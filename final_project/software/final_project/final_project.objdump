
final_project.elf:     file format elf32-littlenios2
final_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0001aa00 memsz 0x0001aa00 flags r-x
    LOAD off    0x0001ba20 vaddr 0x0401aa20 paddr 0x04021be0 align 2**12
         filesz 0x000071c0 memsz 0x000071c0 flags rw-
    LOAD off    0x00022da0 vaddr 0x04028da0 paddr 0x04028da0 align 2**12
         filesz 0x00000000 memsz 0x0000026c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a044  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000798  0401a288  0401a288  0001b288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000071c0  0401aa20  04021be0  0001ba20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000026c  04028da0  04028da0  00022da0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0402900c  0402900c  00022be0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00022be0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000019a0  00000000  00000000  00022c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003e5ac  00000000  00000000  000245a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000f88d  00000000  00000000  00062b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001275f  00000000  00000000  000723e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000582c  00000000  00000000  00084b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000a20e  00000000  00000000  0008a36c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001bba2  00000000  00000000  0009457a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000b011c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002548  00000000  00000000  000b0180  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000ba7ce  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000ba7d1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000ba7dd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000ba7de  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000ba7df  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000ba7e3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000ba7e7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000ba7eb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000ba7f4  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000ba7fd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  000ba806  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005a  00000000  00000000  000ba817  2**0
                  CONTENTS, READONLY
 29 .jdi          0000618f  00000000  00000000  000ba871  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00080fd7  00000000  00000000  000c0a00  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
0401a288 l    d  .rodata	00000000 .rodata
0401aa20 l    d  .rwdata	00000000 .rwdata
04028da0 l    d  .bss	00000000 .bss
0402900c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 fonts.c
00000000 l    df *ABS*	00000000 pixel_vga.c
04028da0 l     O .bss	00000004 vga_ctrl
0402005f l     O .rwdata	00000030 colors
00000000 l    df *ABS*	00000000 Dhcp.cpp
04028da4 l     O .bss	00000004 _ZL11INADDR_NONE
04001990 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
040019f0 l     F .text	00000030 _GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm
00000000 l    df *ABS*	00000000 Dns.cpp
04028da8 l     O .bss	00000004 _ZL11INADDR_NONE
040024e8 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04002548 l     F .text	00000030 _GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress
00000000 l    df *ABS*	00000000 Ethernet.cpp
04028dac l     O .bss	00000004 _ZL11INADDR_NONE
04028db8 l     O .bss	00000008 _ZGVZN13EthernetClass5beginEPhmmE6s_dhcp
04028e28 l     O .bss	0000005c _ZZN13EthernetClass5beginEPhmmE6s_dhcp
04002fbc l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
04003024 l     F .text	00000030 _GLOBAL__sub_I__ZN13EthernetClass17_dnsServerAddressE
00000000 l    df *ABS*	00000000 EthernetClient.cpp
04028dc4 l     O .bss	00000004 _ZL11INADDR_NONE
04004224 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04004284 l     F .text	00000030 _GLOBAL__sub_I__ZN14EthernetClient7connectEPKct
00000000 l    df *ABS*	00000000 EthernetServer.cpp
04028dc8 l     O .bss	00000004 _ZL11INADDR_NONE
04004c6c l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04004ccc l     F .text	00000030 _GLOBAL__sub_I__ZN14EthernetServer11server_portE
00000000 l    df *ABS*	00000000 EthernetUdp.cpp
04028dcc l     O .bss	00000004 _ZL11INADDR_NONE
040054f8 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04005558 l     F .text	00000030 _GLOBAL__sub_I__ZN11EthernetUDP5beginEt
00000000 l    df *ABS*	00000000 socket.cpp
04028dd0 l     O .bss	00000004 _ZL11INADDR_NONE
04021b6c l     O .rwdata	00000002 _ZL10local_port
04028e94 l     O .bss	00000040 _ZL5state
04005e58 l     F .text	0000006c _ZL11getSnRX_RSRh
04005ec4 l     F .text	0000011c _ZL9read_datahtPht
040063dc l     F .text	0000008c _ZL11getSnTX_FSRh
04006468 l     F .text	00000158 _ZL10write_datahtPKht
040069d8 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04006a38 l     F .text	00000030 _GLOBAL__sub_I__ZN13EthernetClass14socketPortRandEt
00000000 l    df *ABS*	00000000 IPAddress.cpp
04028dd4 l     O .bss	00000004 _ZL11INADDR_NONE
0400746c l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
040074cc l     F .text	00000030 _GLOBAL__sub_I__ZN9IPAddressC2Ev
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 w5100.cpp
04028dd8 l     O .bss	00000004 _ZL11INADDR_NONE
04028ddf l     O .bss	00000001 _ZZN10W5100Class4initEvE11initialized
04007f3c l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04007f9c l     F .text	00000030 _GLOBAL__sub_I__ZN10W5100Class4chipE
00000000 l    df *ABS*	00000000 main.cpp
04028de0 l     O .bss	00000004 _ZL11INADDR_NONE
040083cc l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
0400842c l     F .text	00000030 _GLOBAL__sub_I_mac
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0400877c l     F .text	000000a4 _ZL21size_of_encoded_valueh
04008820 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
04008a2c l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
04008a80 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
04008b0c l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
04008c40 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
04008cc8 l     F .text	000001c0 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
04008e88 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
04009764 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 guard.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
04009f10 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
04028ed4 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
04009fc8 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0400a178 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
04028de4 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 guard_error.cc
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0400a474 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
04028dec l     O .bss	00000004 fc_static
0400a58c l     F .text	000000c0 _Unwind_RaiseException_Phase2
0400a64c l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
04020090 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401a772 l     O .rodata	00000010 zeroes.4404
0400dd40 l     F .text	000000bc __sbprintf
0401a782 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400df50 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0400fa80 l     F .text	00000008 __fp_unlock
0400fa94 l     F .text	0000019c __sinit.part.1
0400fc30 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
040208dc l     O .rwdata	00000020 lc_ctype_charset
040208bc l     O .rwdata	00000020 lc_message_charset
040208fc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0401a7b0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
04012480 l     F .text	000000fc __sprint_r.part.0
0401a8e4 l     O .rodata	00000010 blanks.4348
0401a8d4 l     O .rodata	00000010 zeroes.4349
04013a0c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04017514 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04017620 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04017680 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401778c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0401786c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
040179d8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04017ac4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04017c98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04021bd0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
04017ee4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04017fc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
040180fc l     F .text	00000034 alt_dev_reg
04020adc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
040183f4 l     F .text	0000020c altera_avalon_jtag_uart_irq
04018600 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04018e34 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
040191f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04019668 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040197a8 l     F .text	0000003c alt_get_errno
040197e4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04028e24 g     O .bss	00000004 alt_instruction_exception_handler
0400a0d0 g     F .text	00000028 __cxa_free_exception
0400463c  w    F .text	00000048 _ZN9DNSClientC2Ev
040045dc  w    F .text	00000060 _ZN10W5100Class11readSnDPORTEh
04008724 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
04011bf4 g     F .text	00000074 _mprec_log10
04001860 g     F .text	00000040 _ZN9DhcpClass15getDhcpServerIpEv
04009eb0 g     F .text	00000018 _ZSt10unexpectedv
04011ce0 g     F .text	0000008c __any_on
04005c84 g     F .text	0000004c _ZN13EthernetClass12socketStatusEh
04013fa8 g     F .text	00000054 _isatty_r
0401a7bc g     O .rodata	00000028 __mprec_tinytens
04007944 g     F .text	000000d8 _ZN10W5100Class7isW5200Ev
04017bd4 g     F .text	0000007c alt_main
040032dc  w    F .text	00000040 _ZN10W5100Class21setRetransmissionTimeEt
0400b584 g     F .text	000000c0 _puts_r
0400560c  w    F .text	00000028 _ZN11EthernetUDP9localPortEv
04028f0c g     O .bss	00000100 alt_irq
0400a26c g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0401a390  w    O .rodata	00000018 _ZTV14EthernetServer
040031c4  w    F .text	00000038 _ZN10W5100Class13getSubnetMaskEPh
040071a8 g     F .text	00000070 _ZN9IPAddressC1Ehhhh
04013ffc g     F .text	00000060 _lseek_r
0400a708 g     F .text	00000020 .hidden _Unwind_GetIPInfo
040018a0 g     F .text	00000040 _ZN9DhcpClass14getDnsServerIpEv
04021be0 g       *ABS*	00000000 __flash_rwdata_start
04003f30 g     F .text	000000b0 _ZN14EthernetClient9connectedEv
04007a1c g     F .text	000000d8 _ZN10W5100Class7isW5500Ev
04002ac8 g     F .text	00000058 _ZN13EthernetClass10linkStatusEv
04016040 g     F .text	00000088 .hidden __eqdf2
0400717c g     F .text	0000002c _ZN9IPAddressC2Ev
04009838 g     F .text	00000084 __cxa_rethrow
04005924 g     F .text	00000360 _ZN13EthernetClass20socketBeginMulticastEh9IPAddresst
040030b8  w    F .text	00000064 _ZN11EthernetUDPC2Ev
0400a694 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
04009eec g     F .text	00000014 _ZSt14set_unexpectedPFvvE
040040bc g     F .text	0000006c _ZN14EthernetClient9localPortEv
0400a6f8 g     F .text	00000010 .hidden _Unwind_GetIP
0402900c g       *ABS*	00000000 __alt_heap_start
0400b950 g     F .text	0000005c _kill_r
0400b548 g     F .text	0000003c printf
0401ea03 g     O .rwdata	00000980 uname_font_data
04014214 g     F .text	0000009c _wcrtomb_r
0401e9a4 g     O .rwdata	0000005f title_widths
04004684 g     F .text	000000a0 _ZN14EthernetServer5beginEv
0400b718 g     F .text	00000084 _signal_r
04003418  w    F .text	00000038 _ZN10W5100Class9writeSUBREPKh
0401241c g     F .text	0000005c __sseek
0400fdd0 g     F .text	00000010 __sinit
040140bc g     F .text	00000140 __swbuf_r
04028ddd g     O .bss	00000001 _ZN10W5100Class11CH_BASE_MSBE
0401aa20 g     O .rwdata	00000c97 server_font_data
0400a14c g     F .text	0000002c __cxa_free_dependent_exception
0400845c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
04010898 g     F .text	0000007c _setlocale_r
0401a4d4  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0400fc38 g     F .text	00000068 __sfmoreglue
04002e50 g     F .text	00000058 _ZN13EthernetClass13setSubnetMaskE9IPAddress
04017c74 g     F .text	00000024 __malloc_unlock
0400a26c g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
040075c4 g     F .text	0000007c _Z12SPI_transferh
0400326c  w    F .text	00000038 _ZN10W5100Class12setIPAddressEPKh
04009ae0 g     F .text	00000020 _ZSt18uncaught_exceptionv
040098dc g     F .text	00000020 __cxa_deleted_virtual
04010c14 g     F .text	0000015c memmove
0400a244 g     F .text	00000004 _ZNSt9exceptionD2Ev
0400fdb8 g     F .text	00000018 _cleanup
0400335c  w    F .text	0000004c _ZN10W5100Class5writeEth
04010d70 g     F .text	000000a8 _Balloc
040044c0  w    F .text	00000074 _ZN10W5100Class6readSnEhtPht
04000290 g     F .text	000000ac set_color_palette
040160c8 g     F .text	000000dc .hidden __gtdf2
0401a6a8  w    O .rodata	00000014 _ZTVSt13bad_exception
04019ba0 g     F .text	00000024 altera_nios2_gen2_irq_init
04005104 g     F .text	00000134 _ZN11EthernetUDP11parsePacketEv
04006e5c  w    F .text	00000060 _ZN10W5100Class12readSnTX_FSREh
04000000 g     F .entry	0000001c __reset
040009d0 g     F .text	00000024 _ZN9DhcpClass12presend_DHCPEv
04017f20 g     F .text	00000078 times
04004534  w    F .text	00000060 _ZN10W5100Class10readSnPORTEh
0400a744 g     F .text	00000008 .hidden _Unwind_GetRegionStart
040009f4 g     F .text	00000450 _ZN9DhcpClass17send_DHCP_MESSAGEEht
04000020 g       *ABS*	00000000 __flash_exceptions_start
04013f4c g     F .text	0000005c _fstat_r
040082b4  w    F .text	00000020 _ZN10W5100Class5setSSEv
04028dfc g     O .bss	00000004 errno
040017a0 g     F .text	00000040 _ZN9DhcpClass10getLocalIpEv
04012398 g     F .text	00000008 __seofread
0400a920 g     F .text	00000074 .hidden _Unwind_Backtrace
04028e10 g     O .bss	00000004 alt_argv
04029b3c g       *ABS*	00000000 _gp
04017f98 g     F .text	00000030 usleep
0401776c g     F .text	00000020 getpid
04009530 g     F .text	00000230 __cxa_call_unexpected
0401c8e4 g     O .rwdata	0000005f channel_widths
040042b4  w    F .text	00000034 _ZN6Client12rawIPAddressER9IPAddress
04009970 g     F .text	00000008 __cxa_get_exception_ptr
04004cfc  w    F .text	00000034 _ZN6ClientC1Ev
040048c8 g     F .text	00000188 _ZN14EthernetServer6acceptEv
0402095c g     O .rwdata	00000180 alt_fd_list
0401a370  w    O .rodata	0000000c _ZTI14EthernetClient
0400a834 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0400a6c4 g     F .text	00000018 .hidden _Unwind_GetCFA
04009ec8 g     F .text	00000014 _ZSt13set_terminatePFvvE
04019bc4 g     F .text	00000090 alt_find_dev
0400bb24 g     F .text	00000008 _times_r
0400b2a8 g     F .text	00000148 memcpy
04003234  w    F .text	00000038 _ZN10W5100Class13getMACAddressEPh
04007044  w    F .text	00000060 _ZN10W5100Class11readSnRX_RDEh
0400a0f8 g     F .text	00000054 __cxa_allocate_dependent_exception
0400fa88 g     F .text	0000000c _cleanup_r
04003c48 g     F .text	00000078 _ZN14EthernetClient4readEPhj
04009b78 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0401732c g     F .text	000000dc .hidden __floatsidf
0401972c g     F .text	0000007c alt_io_redirect
040070f4  w    F .text	00000050 _ZN10W5100Class5RBASEEh
040161a4 g     F .text	000000f4 .hidden __ltdf2
0401b834 g     O .rwdata	0000005f server_widths
0401a288 g       *ABS*	00000000 __DTOR_END__
04003ab0 g     F .text	0000005c _ZN14EthernetClient17availableForWriteEv
04009b90 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0400b644 g     F .text	00000014 puts
04019e90 g     F .text	0000009c alt_exception_cause_generated_bad_addr
040122d0 g     F .text	00000074 __fpclassifyd
04011b50 g     F .text	000000a4 __ratio
040139f0 g     F .text	0000001c __vfiprintf_internal
040187f8 g     F .text	0000021c altera_avalon_jtag_uart_read
0400a9f8 g     F .text	00000014 malloc
0400b518 g     F .text	00000030 _printf_r
0400a3b8 g     F .text	00000064 .hidden __udivsi3
040177c8 g     F .text	000000a4 isatty
04006f20  w    F .text	00000060 _ZN10W5100Class11readSnTX_WREh
0400b79c g     F .text	000000bc _raise_r
0401a80c g     O .rodata	000000c8 __mprec_tens
04004308  w    F .text	00000048 _ZN14EthernetClientD2Ev
04007d8c g     F .text	00000144 _ZN10W5100Class4readEtPht
04002f00 g     F .text	0000006c _ZN13EthernetClass24setRetransmissionTimeoutEt
04010914 g     F .text	0000000c __locale_charset
040025f4 g     F .text	000002a4 _ZN13EthernetClass5beginEPhmm
0400311c  w    F .text	00000038 _ZN10W5100Class12setGatewayIpEPKh
04019e00 g     F .text	00000090 alt_icache_flush
04028df8 g     O .bss	00000004 __malloc_top_pad
0400b9ac g     F .text	00000004 _getpid_r
04006c3c  w    F .text	00000050 _ZN10W5100Class9writeSnIREhh
040034f8  w    F .text	00000038 _ZN10W5100Class9writeSIPREPKh
04021bb0 g     O .rwdata	00000004 __mb_cur_max
0400724c g     F .text	00000044 _ZN9IPAddressC1EPKh
04010944 g     F .text	0000000c _localeconv_r
04005d1c g     F .text	00000074 _ZN13EthernetClass12socketListenEh
0401117c g     F .text	0000003c __i2b
04010254 g     F .text	000004bc __sfvwrite_r
04009d10 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0400b858 g     F .text	000000a8 __sigtramp_r
0401a45c  w    O .rodata	0000000e _ZTS11EthernetUDP
0400b658 g     F .text	00000054 _sbrk_r
04021b5c  w    O .rwdata	00000008 _ZTI6Server
04001a80  w    F .text	00000028 _ZN11EthernetUDP10remotePortEv
0401a544  w    O .rodata	00000020 _ZTVSt9type_info
04000558 g     F .text	000000ac _ZN9DhcpClass13beginWithDHCPEPhmm
04008038  w    F .text	00000040 _ZN10W5100Class9writeRMSREh
04005fe0 g     F .text	000002ac _ZN13EthernetClass10socketRecvEhPhs
040042e8  w    F .text	00000020 _ZN13EthernetClass11dnsServerIPEv
0401405c g     F .text	00000060 _read_r
0400a24c g     F .text	0000000c _ZNKSt9exception4whatEv
04021bc8 g     O .rwdata	00000004 alt_max_fd
04002d10 g     F .text	00000050 _ZN13EthernetClass10subnetMaskEv
04013c40 g     F .text	000000f0 _fclose_r
04006ebc  w    F .text	00000064 _ZN10W5100Class12writeSnTX_WREht
04007fcc  w    F .text	00000040 _ZN10W5100Class7writeMREh
0400fa50 g     F .text	00000030 fflush
04028df4 g     O .bss	00000004 __malloc_max_sbrked_mem
04005588  w    F .text	00000034 _ZN3UDP12rawIPAddressER9IPAddress
040082d4  w    F .text	00000020 _ZN10W5100Class7resetSSEv
04007290 g     F .text	00000120 _ZN9IPAddress10fromStringEPKc
04005448 g     F .text	000000b0 _ZN11EthernetUDP14beginMulticastE9IPAddresst
04006344 g     F .text	00000098 _ZN13EthernetClass10socketPeekEh
04014eac g     F .text	000008ac .hidden __adddf3
040073f4 g     F .text	00000034 _ZN9IPAddressaSEm
0401a508  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0401a3a8  w    O .rodata	00000038 _ZTV6Client
040118f8 g     F .text	0000010c __b2d
04014974 g     F .text	00000538 .hidden __umoddi3
04017b00 g     F .text	000000d4 lseek
04005050 g     F .text	0000002c _ZN11EthernetUDP5writeEh
040017e0 g     F .text	00000040 _ZN9DhcpClass13getSubnetMaskEv
04009bd4 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0401b6b8 g     O .rwdata	0000017c server_char_indices
04009760 g     F .text	00000004 _ZdlPv
0400a27c g     F .text	00000010 _ZN9__gnu_cxx20recursive_init_errorD1Ev
04021ba0 g     O .rwdata	00000004 _global_impure_ptr
04011d6c g     F .text	00000564 _realloc_r
0402900c g       *ABS*	00000000 __bss_end
04019578 g     F .text	000000f0 alt_iic_isr_register
04004414  w    F .text	0000004c _ZN14EthernetClientneERKS_
04019a98 g     F .text	00000108 alt_tick
04003794 g     F .text	0000031c _ZN14EthernetClient7connectE9IPAddresst
0400a67c g     F .text	00000018 .hidden _Unwind_SjLj_Register
040143fc g     F .text	00000578 .hidden __udivdi3
04001614 g     F .text	0000018c _ZN9DhcpClass10checkLeaseEv
04013ea8 g     F .text	00000024 _fputwc_r
0401a7e4 g     O .rodata	00000028 __mprec_bigtens
040043e8  w    F .text	0000002c _ZN14EthernetClientneEb
04010f60 g     F .text	00000104 __s2b
0400a994 g     F .text	00000018 abort
04017408 g     F .text	000000a8 .hidden __floatunsidf
040081b8  w    F .text	0000003c _ZN10W5100Class8readSnCREh
04011638 g     F .text	00000060 __mcmp
04007538 g     F .text	00000028 _Z6millisv
04009a2c g     F .text	000000b4 __cxa_end_catch
0400fdf0 g     F .text	00000018 __fp_lock_all
0401952c g     F .text	0000004c alt_ic_irq_enabled
0400a248 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
040199fc g     F .text	0000009c alt_alarm_stop
0400507c g     F .text	00000088 _ZN11EthernetUDP5writeEPKhj
0401a400  w    O .rodata	00000050 _ZTV11EthernetUDP
0400717c g     F .text	0000002c _ZN9IPAddressC1Ev
04002cc0 g     F .text	00000050 _ZN13EthernetClass7localIPEv
040043b8  w    F .text	00000030 _ZN14EthernetClienteqEb
04028e18 g     O .bss	00000004 alt_irq_active
04008110  w    F .text	0000002c _ZN10W5100Class17readPSTATUS_W5200Ev
04009e88 g     F .text	00000018 _ZSt9terminatev
040028f8 g     F .text	00000068 _ZN13EthernetClass5beginEPh9IPAddressS1_
040000fc g     F .exceptions	000000d4 alt_irq_handler
04020934 g     O .rwdata	00000028 alt_dev_null
04021b6f g     O .rwdata	00000006 mac
040035fc  w    F .text	00000020 _ZN10W5100Class7getChipEv
04000408 g     F .text	00000150 draw_rectangle
0400a274 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
04002b20 g     F .text	00000060 _ZN13EthernetClass14hardwareStatusEv
04004cfc  w    F .text	00000034 _ZN6ClientC2Ev
040033a8  w    F .text	00000038 _ZN10W5100Class8writeGAREPKh
0401a5a0  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
04007580 g     F .text	00000024 _Z20SPI_beginTransactionPv
040191ac g     F .text	00000048 alt_dcache_flush_all
04011064 g     F .text	00000068 __hi0bits
04028dc0 g     O .bss	00000001 Ethernet
04007428 g     F .text	00000044 _ZNK9IPAddresseqEPKh
04021b84  w    O .rwdata	00000008 _ZTISt9exception
04021b4c  w    O .rwdata	00000008 _ZTI6Client
04006fe0  w    F .text	00000064 _ZN10W5100Class12writeSnRX_RDEht
040172ac g     F .text	00000080 .hidden __fixdfsi
04005e0c g     F .text	0000004c _ZN13EthernetClass16socketDisconnectEh
04006b0c  w    F .text	0000006c _ZN10W5100Class7writeSnEhth
040071a8 g     F .text	00000070 _ZN9IPAddressC2Ehhhh
040053b8 g     F .text	0000006c _ZN11EthernetUDP4peekEv
04006bec  w    F .text	00000050 _ZN10W5100Class9writeSnMREhh
04021be0 g       *ABS*	00000000 __ram_rwdata_end
04007218 g     F .text	00000034 _ZN9IPAddressC2Em
0400259c  w    F .text	00000028 _ZNK9IPAddresscvmEv
04001ff0 g     F .text	000004f8 _ZN9DNSClient15ProcessResponseEtR9IPAddress
04008720 g     F .text	00000004 _ZNSt9type_infoD1Ev
04021bc0 g     O .rwdata	00000008 alt_dev_list
0400a274 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
04007144  w    F .text	00000038 _ZN10W5100Class23hasOffsetAddressMappingEv
04006a68  w    F .text	00000044 _ZN10W5100Class4readEt
04018004 g     F .text	000000f8 write
04006c8c  w    F .text	0000003c _ZN10W5100Class8readSnIREh
04028db4 g     O .bss	00000004 _ZN13EthernetClass5_dhcpE
04008734 g     F .text	00000004 _ZNSt9type_infoD0Ev
0401aa20 g       *ABS*	00000000 __ram_rodata_end
040176bc g     F .text	000000b0 fstat
04004ecc g     F .text	000000c4 _ZN11EthernetUDP11beginPacketEPKct
04004d98 g     F .text	000000a8 _ZN11EthernetUDP5beginEt
0401a37c  w    O .rodata	00000011 _ZTS14EthernetClient
0401a708  w    O .rodata	0000000c _ZTIN9__gnu_cxx20recursive_init_errorE
040178a8 g     F .text	00000130 kill
040161a4 g     F .text	000000f4 .hidden __ledf2
040075a4 g     F .text	00000020 _Z18SPI_endTransactionv
040113b0 g     F .text	00000140 __pow5mult
04012594 g     F .text	0000145c ___vfiprintf_internal_r
04028e08 g     O .bss	00000004 __nlocale_changed
0400a41c g     F .text	00000058 .hidden __umodsi3
0400872c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
04006d68  w    F .text	00000048 _ZN10W5100Class11writeSnDHAREhPh
04009edc g     F .text	00000010 _ZSt13get_terminatev
04006db0  w    F .text	00000048 _ZN10W5100Class11writeSnDIPREhPh
0402900c g       *ABS*	00000000 end
0401a3ec  w    O .rodata	00000011 _ZTS14EthernetServer
04007ed0 g     F .text	0000006c _ZN10W5100Class9execCmdSnEh7SockCMD
04007818 g     F .text	00000074 _ZN10W5100Class9softResetEv
04005634 g     F .text	00000044 _ZN13EthernetClass14socketPortRandEt
0400a908 g     F .text	00000018 .hidden _Unwind_DeleteException
04007af4 g     F .text	000000c0 _ZN10W5100Class13getLinkStatusEv
04006d04  w    F .text	00000064 _ZN10W5100Class11writeSnPORTEht
04018334 g     F .text	000000c0 altera_avalon_jtag_uart_init
04004d30  w    F .text	00000068 _ZN14EthernetClientC2Eh
04002ea8 g     F .text	00000058 _ZN13EthernetClass12setGatewayIPE9IPAddress
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
040080e4  w    F .text	0000002c _ZN10W5100Class18readVERSIONR_W5500Ev
04009c40 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0401a259 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04018eac g     F .text	0000007c alt_avalon_timer_sc_init
040174b0 g     F .text	00000064 .hidden __clzsi2
04003568  w    F .text	00000054 _ZN10W5100Class8writeRTREt
04009b00 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
04003cc0 g     F .text	00000088 _ZN14EthernetClient4peekEv
04018a14 g     F .text	00000224 altera_avalon_jtag_uart_write
04004d30  w    F .text	00000068 _ZN14EthernetClientC1Eh
0400fde0 g     F .text	00000004 __sfp_lock_acquire
0401a630  w    O .rodata	00000012 _ZTSSt13bad_exception
04003fe0 g     F .text	00000058 _ZN14EthernetClient6statusEv
04010b30 g     F .text	000000e4 memchr
0400bb2c g     F .text	000021f8 ___vfprintf_internal_r
04004460  w    F .text	00000038 _ZN14EthernetClient20setConnectionTimeoutEt
0400ff44 g     F .text	00000310 _free_r
04002a8c g     F .text	0000003c _ZN13EthernetClass4initEh
04010920 g     F .text	00000010 __locale_mb_cur_max
04006df8  w    F .text	00000064 _ZN10W5100Class12writeSnDPORTEht
0401e828 g     O .rwdata	0000017c title_char_indices
0401a090 g     F .text	00000180 __call_exitprocs
04006910 g     F .text	000000c8 _ZN13EthernetClass13socketSendUDPEh
04028e04 g     O .bss	00000004 __mlocale_changed
04021ba8 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
04028e1c g     O .bss	00000004 _alt_tick_rate
0401a534  w    O .rodata	0000000d _ZTSSt9type_info
040098bc g     F .text	00000020 __cxa_pure_virtual
040114f0 g     F .text	00000148 __lshift
040030b8  w    F .text	00000064 _ZN11EthernetUDPC1Ev
04018c38 g     F .text	000001fc alt_avalon_spi_command
04028e20 g     O .bss	00000004 _alt_nticks
0401b893 g     O .rwdata	00000ed4 channel_font_data
0400b914 g     F .text	00000018 signal
04017cd4 g     F .text	000000fc read
04018168 g     F .text	00000068 alt_sys_init
04007560 g     F .text	00000020 _Z9SPI_beginv
04001aa8 g     F .text	00000040 _ZN9DNSClient5beginERK9IPAddress
04019f78 g     F .text	00000118 __register_exitproc
04001a20  w    F .text	00000038 _ZNK9IPAddresseqERKS_
04004350  w    F .text	00000038 _ZN14EthernetClientD0Ev
040084a0 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
04003d48 g     F .text	00000060 _ZN14EthernetClient4readEv
040111b8 g     F .text	000001f8 __multiply
040186a0 g     F .text	00000068 altera_avalon_jtag_uart_close
04004e40 g     F .text	0000002c _ZN11EthernetUDP9availableEv
0401aa20 g       *ABS*	00000000 __ram_rwdata_start
0400a764 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0401a288 g       *ABS*	00000000 __ram_rodata_start
04028ee4 g     O .bss	00000028 __malloc_current_mallinfo
0400a878 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
04011a04 g     F .text	0000014c __d2b
0401a6d0  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
04008720 g     F .text	00000004 _ZNSt9type_infoD2Ev
04004308  w    F .text	00000048 _ZN14EthernetClientD1Ev
0400a278 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
04028dde g     O .bss	00000001 W5100
04004724 g     F .text	000001a4 _ZN14EthernetServer9availableEv
04001ae8 g     F .text	00000130 _ZN9DNSClient9inet_atonEPKcR9IPAddress
04003488  w    F .text	00000038 _ZN10W5100Class9writeSHAREPKh
0400869c g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04003084  w    F .text	00000034 _ZN3UDPC1Ev
040035bc  w    F .text	00000040 _ZN10W5100Class8writeRCREh
040181d0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04019d5c g     F .text	000000a4 alt_get_fd
04006b78  w    F .text	00000074 _ZN10W5100Class7writeSnEhtPht
04004388  w    F .text	00000030 _ZN14EthernetClientcvbEv
04019054 g     F .text	00000158 alt_busy_sleep
040065c0 g     F .text	00000164 _ZN13EthernetClass10socketSendEhPKht
04005238 g     F .text	00000094 _ZN11EthernetUDP4readEv
04021b94  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
04008168  w    F .text	00000050 _ZN10W5100Class9writeSnCREhh
04013b28 g     F .text	00000054 _close_r
04003450  w    F .text	00000038 _ZN10W5100Class8readSUBREPh
040041b8 g     F .text	0000006c _ZN14EthernetClient10remotePortEv
04002df8 g     F .text	00000058 _ZN13EthernetClass10setLocalIPE9IPAddress
04001a58  w    F .text	00000028 _ZN11EthernetUDP8remoteIPEv
0400813c  w    F .text	0000002c _ZN10W5100Class17readPHYCFGR_W5500Ev
0400b22c g     F .text	0000007c memcmp
04018290 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0402900c g       *ABS*	00000000 __alt_stack_base
040182e0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0401a714  w    O .rodata	00000014 _ZTVN9__gnu_cxx20recursive_init_errorE
04008294  w    F .text	00000020 _ZN10W5100Class6initSSEv
0400845c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
0400ddfc g     F .text	00000154 __swsetup_r
0400a8bc g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
04015758 g     F .text	000008e8 .hidden __divdf3
040029cc g     F .text	000000c0 _ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_
0400fca0 g     F .text	00000118 __sfp
04011c68 g     F .text	00000078 __copybits
040032a4  w    F .text	00000038 _ZN10W5100Class12getIPAddressEPh
04008724 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
040204b4 g     O .rwdata	00000408 __malloc_av_
0400fdec g     F .text	00000004 __sinit_lock_release
04016298 g     F .text	00000718 .hidden __muldf3
04012344 g     F .text	00000054 __sread
0401a694  w    O .rodata	00000014 _ZTVSt9exception
0400a270 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
04019c54 g     F .text	00000108 alt_find_file
04019230 g     F .text	000000a4 alt_dev_llist_insert
04017c50 g     F .text	00000024 __malloc_lock
04017e34 g     F .text	000000b0 sbrk
0401a5d0  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
04003530  w    F .text	00000038 _ZN10W5100Class8readSIPREPh
040097a8 g     F .text	00000090 __cxa_throw
0400f9f4 g     F .text	0000005c _fflush_r
0400a728 g     F .text	00000010 .hidden _Unwind_SetIP
04013b7c g     F .text	000000c4 _calloc_r
0401f384 g     O .rwdata	0000017c uname_char_indices
040018e0 g     F .text	000000b0 _ZN9DhcpClass9printByteEPch
04007218 g     F .text	00000034 _ZN9IPAddressC1Em
04028da0 g       *ABS*	00000000 __bss_start
0400b3f0 g     F .text	00000128 memset
04003084  w    F .text	00000034 _ZN3UDPC2Ev
040082f4 g     F .text	000000d8 main
04005678 g     F .text	000002ac _ZN13EthernetClass11socketBeginEht
04028e14 g     O .bss	00000004 alt_envp
04002b80 g     F .text	000000fc _ZN13EthernetClass8maintainEv
04028df0 g     O .bss	00000004 __malloc_max_total_mem
04004b10 g     F .text	00000054 _ZN14EthernetServer5writeEh
04018230 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040141fc g     F .text	00000018 __swbuf
0400a22c g     F .text	0000000c __cxa_get_globals_fast
04003154  w    F .text	00000038 _ZN10W5100Class12getGatewayIpEPh
04004038 g     F .text	00000084 _ZN14EthernetClienteqERKS_
0400a28c g     F .text	00000034 _ZN9__gnu_cxx20recursive_init_errorD0Ev
0400628c g     F .text	000000b8 _ZN13EthernetClass19socketRecvAvailableEh
04012478 g     F .text	00000008 __sclose
04002db0 g     F .text	00000048 _ZN13EthernetClass13setMACAddressEPKh
08000000 g       *ABS*	00000000 __alt_heap_limit
04013d30 g     F .text	00000014 fclose
0400e150 g     F .text	00001688 _dtoa_r
0400aa20 g     F .text	0000080c _malloc_r
04014370 g     F .text	00000030 __ascii_wctomb
0400a258 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
04021bcc g     O .rwdata	00000004 alt_errno
0401a3e0  w    O .rodata	0000000c _ZTI14EthernetServer
0400b92c g     F .text	00000010 _init_signal
0401a5c4  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
040080b8  w    F .text	0000002c _ZN10W5100Class18readVERSIONR_W5200Ev
04010710 g     F .text	000000c4 _fwalk
0401c768 g     O .rwdata	0000017c channel_char_indices
0400a248 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
04021b3c  w    O .rwdata	00000008 _ZTI3UDP
040055bc  w    F .text	00000050 _ZN11EthernetUDP4readEPcj
0400a2c0 g     F .text	00000084 .hidden __divsi3
0400fe20 g     F .text	00000124 _malloc_trim_r
0401a288 g       *ABS*	00000000 __CTOR_END__
0400b9b0 g     F .text	000000dc strcmp
0401a288 g       *ABS*	00000000 __flash_rodata_start
0401a6bc  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0401a288 g       *ABS*	00000000 __DTOR_LIST__
04000e44 g     F .text	000007d0 _ZN9DhcpClass17parseDHCPResponseEmRm
04002f6c g     F .text	00000050 _ZN13EthernetClass22setRetransmissionCountEh
04016040 g     F .text	00000088 .hidden __nedf2
0401f55f g     O .rwdata	00000925 message_font_data
040034c0  w    F .text	00000038 _ZN10W5100Class8readSHAREPh
04018130 g     F .text	00000038 alt_irq_init
040067a8 g     F .text	000000a0 _ZN13EthernetClass16socketBufferDataEhtPKht
04017dd0 g     F .text	00000064 alt_release_fd
0400846c g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0401a8f4 g     O .rodata	00000100 .hidden __clz_tab
04028e00 g     O .bss	00000004 _PathLocale
04006724 g     F .text	00000084 _ZN13EthernetClass19socketSendAvailableEh
04019f2c g     F .text	00000014 atexit
04009960 g     F .text	00000010 __cxa_guard_release
04013ac8 g     F .text	00000060 _write_r
04010950 g     F .text	00000018 setlocale
0401fe84 g     O .rwdata	0000017c message_char_indices
040076b8 g     F .text	00000160 _ZN10W5100Class4initEv
0400a75c g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0400a1d4 g     F .text	00000058 __cxa_call_terminate
04021b64  w    O .rwdata	00000008 _ZTS6Server
04021ba4 g     O .rwdata	00000004 _impure_ptr
04021b8c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
04028e0c g     O .bss	00000004 alt_argc
0400f7d8 g     F .text	0000021c __sflush_r
04019334 g     F .text	00000060 _do_dtors
0401093c g     F .text	00000008 __locale_cjk_lang
04007bb4 g     F .text	000001d8 _ZN10W5100Class5writeEtPKht
040074fc g     F .text	0000003c _Z5delayj
04021b44  w    O .rwdata	00000005 _ZTS3UDP
04009f00 g     F .text	00000010 _ZSt14get_unexpectedv
04000020 g       .exceptions	00000000 alt_irq_entry
04011894 g     F .text	00000064 __ulp
0400a74c g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
0400fe08 g     F .text	00000018 __fp_unlock_all
04002c7c g     F .text	00000044 _ZN13EthernetClass10MACAddressEPh
04020000 g     O .rwdata	0000005f message_widths
04021bb8 g     O .rwdata	00000008 alt_fs_list
0401a670  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
0401a2c0  w    O .rodata	0000004c _ZTV3UDP
0400364c  w    F .text	0000003c _ZN9DhcpClassC2Ev
0400a738 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
04009958 g     F .text	00000008 __cxa_guard_abort
04009978 g     F .text	000000b4 __cxa_begin_catch
0400788c g     F .text	000000b8 _ZN10W5100Class7isW5100Ev
04009b90 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
04009ea0 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
04028db0 g     O .bss	00000004 _ZN13EthernetClass17_dnsServerAddressE
04003e48 g     F .text	000000e8 _ZN14EthernetClient4stopEv
04000020 g       *ABS*	00000000 __ram_exceptions_start
04010968 g     F .text	0000000c localeconv
04002d60 g     F .text	00000050 _ZN13EthernetClass9gatewayIPEv
04006f80  w    F .text	00000060 _ZN10W5100Class12readSnRX_RSREh
0400a268 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
04006cc8  w    F .text	0000003c _ZN10W5100Class8readSnSREh
04021b9c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
04006aac  w    F .text	00000060 _ZN10W5100Class6readSnEht
040193c8 g     F .text	00000050 alt_ic_isr_register
04003b60 g     F .text	0000008c _ZN14EthernetClient5writeEPKhj
0400033c g     F .text	000000cc init_color_palette
0400a070 g     F .text	00000060 __cxa_allocate_exception
0401a4fc  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
04002578  w    F .text	00000024 _ZN9IPAddress11raw_addressEv
04021be0 g       *ABS*	00000000 _edata
0402900c g       *ABS*	00000000 _end
04008f30 g     F .text	00000600 __gxx_personality_sj0
04003054  w    F .text	00000030 _ZN3UDP14beginMulticastE9IPAddresst
04013d44 g     F .text	00000164 __fputwc
04004b64 g     F .text	00000108 _ZN14EthernetServer5writeEPKhj
04021b54  w    O .rwdata	00000008 _ZTS6Client
04000244 g       *ABS*	00000000 __ram_exceptions_end
04018708 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04003da8 g     F .text	000000a0 _ZN14EthernetClient5flushEv
0400361c  w    F .text	00000030 _ZN10W5100Class5setSSEh
04000648 g     F .text	00000388 _ZN9DhcpClass18request_DHCP_leaseEv
0400a244 g     F .text	00000004 _ZNSt9exceptionD1Ev
040194a0 g     F .text	0000008c alt_ic_irq_disable
04005d90 g     F .text	0000007c _ZN13EthernetClass13socketConnectEhPht
040123a0 g     F .text	0000007c __swrite
04004594  w    F .text	00000048 _ZN10W5100Class10readSnDIPREhPh
04021bac g     O .rwdata	00000004 __malloc_trim_threshold
04010930 g     F .text	0000000c __locale_msgcharset
04019f40 g     F .text	00000038 exit
0400a6dc g     F .text	0000001c .hidden _Unwind_SetGR
04004498  w    F .text	00000028 _ZN10W5100Class7CH_BASEEv
040107d4 g     F .text	000000c4 _fwalk_reent
04008600 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
04011698 g     F .text	000001fc __mdiff
04005cd0 g     F .text	0000004c _ZN13EthernetClass11socketCloseEh
04009dc8 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
040052cc g     F .text	000000ec _ZN11EthernetUDP4readEPhj
0400a344 g     F .text	00000074 .hidden __modsi3
04003b0c g     F .text	00000054 _ZN14EthernetClient5writeEh
04008244  w    F .text	00000050 _ZN10W5100Class14writeSnTX_SIZEEhh
04000604 g     F .text	00000044 _ZN9DhcpClass16reset_DHCP_leaseEv
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04005424 g     F .text	00000024 _ZN11EthernetUDP5flushEv
0400fde4 g     F .text	00000004 __sfp_lock_release
0401a644  w    O .rodata	0000000c _ZTISt13bad_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
04002898 g     F .text	00000060 _ZN13EthernetClass5beginEPh9IPAddress
04007640 g     F .text	00000078 _Z18SPI_transfer_multiPhj
0400331c  w    F .text	00000040 _ZN10W5100Class22setRetransmissionCountEh
040081f4  w    F .text	00000050 _ZN10W5100Class14writeSnRX_SIZEEhh
04028e84 g     O .bss	00000010 _ZN14EthernetServer11server_portE
0401764c g     F .text	00000034 _exit
04004f90 g     F .text	00000080 _ZN11EthernetUDP11beginPacketE9IPAddresst
04004128 g     F .text	00000090 _ZN14EthernetClient8remoteIPEv
04018f28 g     F .text	0000012c alt_alarm_start
0401f500 g     O .rwdata	0000005f uname_widths
0400318c  w    F .text	00000038 _ZN10W5100Class13setSubnetMaskEPKh
0400a6a8 g     F .text	0000001c .hidden _Unwind_GetGR
0400a238 g     F .text	0000000c __cxa_get_globals
04010974 g     F .text	000001bc __smakebuf_r
04021b80 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0400ba8c g     F .text	00000098 strlen
0400b6ac g     F .text	0000006c _init_signal_r
04021b78  w    O .rwdata	00000008 _ZTISt9type_info
040198a8 g     F .text	00000154 open
0401c943 g     O .rwdata	00001ee3 title_font_data
0401a30c  w    O .rodata	00000064 _ZTV14EthernetClient
040160c8 g     F .text	000000dc .hidden __gedf2
040070a4  w    F .text	00000050 _ZN10W5100Class5SBASEEh
040031fc  w    F .text	00000038 _ZN10W5100Class13setMACAddressEPKh
0401a620  w    O .rodata	0000000d _ZTSSt9exception
04021b6e g     O .rwdata	00000001 _ZN10W5100Class6ss_pinE
0400a9ac g     F .text	0000004c clock
0400463c  w    F .text	00000048 _ZN9DNSClientC1Ev
0401a450  w    O .rodata	0000000c _ZTI11EthernetUDP
04021bb4 g     O .rwdata	00000004 __wctomb
0400a264 g     F .text	00000004 _ZNSt9exceptionD0Ev
0401257c g     F .text	00000018 __sprint_r
04019394 g     F .text	00000034 alt_icache_flush_all
04001da8 g     F .text	00000248 _ZN9DNSClient12BuildRequestEPKc
0401a6e4  w    O .rodata	00000023 _ZTSN9__gnu_cxx20recursive_init_errorE
0400a754 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
0400800c  w    F .text	0000002c _ZN10W5100Class6readMREv
04021bd4 g     O .rwdata	00000004 alt_priority_mask
04004a50 g     F .text	000000c0 _ZN14EthernetServercvbEv
04005010 g     F .text	00000040 _ZN11EthernetUDP9endPacketEv
04019418 g     F .text	00000088 alt_ic_irq_enable
0400dd24 g     F .text	0000001c __vfprintf_internal
040143a0 g     F .text	0000005c _wctomb_r
0400724c g     F .text	00000044 _ZN9IPAddressC2EPKh
040169b0 g     F .text	000008fc .hidden __subdf3
04002960 g     F .text	0000006c _ZN13EthernetClass5beginEPh9IPAddressS1_S1_
0400364c  w    F .text	0000003c _ZN9DhcpClassC1Ev
040025c4  w    F .text	00000030 _ZN9IPAddressixEi
040110cc g     F .text	000000b0 __lo0bits
04021bd8 g     O .rwdata	00000008 alt_alarm_list
040192d4 g     F .text	00000060 _do_ctors
0400b93c g     F .text	00000014 __sigtramp
040098fc g     F .text	0000005c __cxa_guard_acquire
040142b0 g     F .text	000000c0 wcrtomb
04008078  w    F .text	00000040 _ZN10W5100Class9writeTMSREh
04003bec g     F .text	0000005c _ZN14EthernetClient9availableEv
04001820 g     F .text	00000040 _ZN9DhcpClass12getGatewayIpEv
04004e6c g     F .text	00000060 _ZN11EthernetUDP4stopEv
04017550 g     F .text	000000d0 close
040073b0 g     F .text	00000044 _ZN9IPAddressaSEPKh
04001c18 g     F .text	00000190 _ZN9DNSClient13getHostByNameEPKcR9IPAddresst
04006848 g     F .text	000000c8 _ZN13EthernetClass14socketStartUDPEhPht
0401a650  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
04017a40 g     F .text	00000084 alt_load
04008738 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0400a27c g     F .text	00000010 _ZN9__gnu_cxx20recursive_init_errorD2Ev
04028ddc g     O .bss	00000001 _ZN10W5100Class4chipE
040033e0  w    F .text	00000038 _ZN10W5100Class7readGAREPh
04013ecc g     F .text	00000080 fputwc
0400b900 g     F .text	00000014 raise
0400aa0c g     F .text	00000014 free
0400fde8 g     F .text	00000004 __sinit_lock_acquire
04010e40 g     F .text	00000120 __multadd
04009ba0 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
04010e18 g     F .text	00000028 _Bfree
04003688 g     F .text	0000010c _ZN14EthernetClient7connectEPKct



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100f4 	movhi	r2,1027
 4000140:	10a3c304 	addi	r2,r2,-28916
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100f4 	movhi	r2,1027
 4000158:	10a3c304 	addi	r2,r2,-28916
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0bcba17 	ldw	r2,-3352(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0bcba17 	ldw	r2,-3352(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_data_end+0xfc000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 4000260:	d6a6cf14 	ori	gp,gp,39740
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 4000268:	10a36814 	ori	r2,r2,36256

    movhi r3, %hi(__bss_end)
 400026c:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 4000270:	18e40314 	ori	r3,r3,36876

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_data_end+0xfc000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	4017a400 	call	4017a40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	4017bd40 	call	4017bd4 <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_data_end+0xfc00028c>

04000290 <set_color_palette>:
#include "pixel_vga.h"

void set_color_palette(alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue) {
 4000290:	defffa04 	addi	sp,sp,-24
 4000294:	df000515 	stw	fp,20(sp)
 4000298:	df000504 	addi	fp,sp,20
 400029c:	2011883a 	mov	r8,r4
 40002a0:	2809883a 	mov	r4,r5
 40002a4:	3007883a 	mov	r3,r6
 40002a8:	3805883a 	mov	r2,r7
 40002ac:	e23ffc05 	stb	r8,-16(fp)
 40002b0:	e13ffd05 	stb	r4,-12(fp)
 40002b4:	e0fffe05 	stb	r3,-8(fp)
 40002b8:	e0bfff05 	stb	r2,-4(fp)
	// Pointer to the beginning of VRAM
    volatile alt_u32* vram_32 = (alt_u32*) vga_ctrl->VRAM;
 40002bc:	d0bc9917 	ldw	r2,-3484(gp)
 40002c0:	e0bffb15 	stw	r2,-20(fp)

    // Point to start of color palette
    vram_32 += PALETTE_OFFSET + (color/2);
 40002c4:	e0bffc03 	ldbu	r2,-16(fp)
 40002c8:	1004d07a 	srli	r2,r2,1
 40002cc:	10c03fcc 	andi	r3,r2,255
 40002d0:	00a58014 	movui	r2,38400
 40002d4:	1885883a 	add	r2,r3,r2
 40002d8:	1085883a 	add	r2,r2,r2
 40002dc:	1085883a 	add	r2,r2,r2
 40002e0:	1007883a 	mov	r3,r2
 40002e4:	e0bffb17 	ldw	r2,-20(fp)
 40002e8:	10c5883a 	add	r2,r2,r3
 40002ec:	e0bffb15 	stw	r2,-20(fp)

    // color 0
    if(color % 2 == 0)
 40002f0:	e0bffc03 	ldbu	r2,-16(fp)
 40002f4:	1080004c 	andi	r2,r2,1
 40002f8:	10803fcc 	andi	r2,r2,255
 40002fc:	10000a1e 	bne	r2,zero,4000328 <set_color_palette+0x98>
        *vram_32 = (((alt_u32)red) << 9) | (((alt_u32)green) << 5) | (((alt_u32)blue) << 1);
 4000300:	e0bffd03 	ldbu	r2,-12(fp)
 4000304:	1006927a 	slli	r3,r2,9
 4000308:	e0bffe03 	ldbu	r2,-8(fp)
 400030c:	1004917a 	slli	r2,r2,5
 4000310:	1886b03a 	or	r3,r3,r2
 4000314:	e0bfff03 	ldbu	r2,-4(fp)
 4000318:	1085883a 	add	r2,r2,r2
 400031c:	1886b03a 	or	r3,r3,r2
 4000320:	e0bffb17 	ldw	r2,-20(fp)
 4000324:	10c00015 	stw	r3,0(r2)

}
 4000328:	0001883a 	nop
 400032c:	e037883a 	mov	sp,fp
 4000330:	df000017 	ldw	fp,0(sp)
 4000334:	dec00104 	addi	sp,sp,4
 4000338:	f800283a 	ret

0400033c <init_color_palette>:

void init_color_palette() {
 400033c:	defffd04 	addi	sp,sp,-12
 4000340:	dfc00215 	stw	ra,8(sp)
 4000344:	df000115 	stw	fp,4(sp)
 4000348:	df000104 	addi	fp,sp,4
    // Initialize the color palette with the colors declared in the struct header
    for(alt_u8 i=0; i<16; i++) {
 400034c:	e03fff05 	stb	zero,-4(fp)
 4000350:	00002406 	br	40003e4 <init_color_palette+0xa8>
        set_color_palette(i, colors[i].red, colors[i].green, colors[i].blue);
 4000354:	e23fff03 	ldbu	r8,-4(fp)
 4000358:	e13fff03 	ldbu	r4,-4(fp)
 400035c:	00c100b4 	movhi	r3,1026
 4000360:	18c017c4 	addi	r3,r3,95
 4000364:	2005883a 	mov	r2,r4
 4000368:	1085883a 	add	r2,r2,r2
 400036c:	1105883a 	add	r2,r2,r4
 4000370:	1885883a 	add	r2,r3,r2
 4000374:	10800003 	ldbu	r2,0(r2)
 4000378:	11403fcc 	andi	r5,r2,255
 400037c:	e13fff03 	ldbu	r4,-4(fp)
 4000380:	00c100b4 	movhi	r3,1026
 4000384:	18c017c4 	addi	r3,r3,95
 4000388:	2005883a 	mov	r2,r4
 400038c:	1085883a 	add	r2,r2,r2
 4000390:	1105883a 	add	r2,r2,r4
 4000394:	1885883a 	add	r2,r3,r2
 4000398:	10800044 	addi	r2,r2,1
 400039c:	10800003 	ldbu	r2,0(r2)
 40003a0:	11803fcc 	andi	r6,r2,255
 40003a4:	e13fff03 	ldbu	r4,-4(fp)
 40003a8:	00c100b4 	movhi	r3,1026
 40003ac:	18c017c4 	addi	r3,r3,95
 40003b0:	2005883a 	mov	r2,r4
 40003b4:	1085883a 	add	r2,r2,r2
 40003b8:	1105883a 	add	r2,r2,r4
 40003bc:	1885883a 	add	r2,r3,r2
 40003c0:	10800084 	addi	r2,r2,2
 40003c4:	10800003 	ldbu	r2,0(r2)
 40003c8:	10803fcc 	andi	r2,r2,255
 40003cc:	100f883a 	mov	r7,r2
 40003d0:	4009883a 	mov	r4,r8
 40003d4:	40002900 	call	4000290 <set_color_palette>

}

void init_color_palette() {
    // Initialize the color palette with the colors declared in the struct header
    for(alt_u8 i=0; i<16; i++) {
 40003d8:	e0bfff03 	ldbu	r2,-4(fp)
 40003dc:	10800044 	addi	r2,r2,1
 40003e0:	e0bfff05 	stb	r2,-4(fp)
 40003e4:	e0bfff03 	ldbu	r2,-4(fp)
 40003e8:	10800430 	cmpltui	r2,r2,16
 40003ec:	103fd91e 	bne	r2,zero,4000354 <__alt_data_end+0xfc000354>
        set_color_palette(i, colors[i].red, colors[i].green, colors[i].blue);
    }
}
 40003f0:	0001883a 	nop
 40003f4:	e037883a 	mov	sp,fp
 40003f8:	dfc00117 	ldw	ra,4(sp)
 40003fc:	df000017 	ldw	fp,0(sp)
 4000400:	dec00204 	addi	sp,sp,8
 4000404:	f800283a 	ret

04000408 <draw_rectangle>:

void draw_rectangle(alt_u32 x, alt_u32 y, alt_u32 width, alt_u32 height, alt_u8 color){
 4000408:	defff504 	addi	sp,sp,-44
 400040c:	dfc00a15 	stw	ra,40(sp)
 4000410:	df000915 	stw	fp,36(sp)
 4000414:	df000904 	addi	fp,sp,36
 4000418:	e13ffb15 	stw	r4,-20(fp)
 400041c:	e17ffc15 	stw	r5,-16(fp)
 4000420:	e1bffd15 	stw	r6,-12(fp)
 4000424:	e1fffe15 	stw	r7,-8(fp)
 4000428:	e0800217 	ldw	r2,8(fp)
 400042c:	e0bfff05 	stb	r2,-4(fp)
    // Validate the arguments
    if (x%8 != 0 | width%8 != 0) {
 4000430:	e0bffb17 	ldw	r2,-20(fp)
 4000434:	108001cc 	andi	r2,r2,7
 4000438:	1004c03a 	cmpne	r2,r2,zero
 400043c:	1007883a 	mov	r3,r2
 4000440:	e0bffd17 	ldw	r2,-12(fp)
 4000444:	108001cc 	andi	r2,r2,7
 4000448:	1004c03a 	cmpne	r2,r2,zero
 400044c:	1884b03a 	or	r2,r3,r2
 4000450:	10803fcc 	andi	r2,r2,255
 4000454:	10000326 	beq	r2,zero,4000464 <draw_rectangle+0x5c>
        printf("Invalid arguments passed to draw_rectangle!\n");
 4000458:	010100b4 	movhi	r4,1026
 400045c:	2128a204 	addi	r4,r4,-23928
 4000460:	400b6440 	call	400b644 <puts>
    }

    // Initialize the color
    alt_u32 word = 0;
 4000464:	e03ff715 	stw	zero,-36(fp)
    for(alt_u8 p=0; p<8; p++) word += (color << (p*4));
 4000468:	e03ff805 	stb	zero,-32(fp)
 400046c:	00000c06 	br	40004a0 <draw_rectangle+0x98>
 4000470:	e0ffff03 	ldbu	r3,-4(fp)
 4000474:	e0bff803 	ldbu	r2,-32(fp)
 4000478:	1085883a 	add	r2,r2,r2
 400047c:	1085883a 	add	r2,r2,r2
 4000480:	1884983a 	sll	r2,r3,r2
 4000484:	1007883a 	mov	r3,r2
 4000488:	e0bff717 	ldw	r2,-36(fp)
 400048c:	10c5883a 	add	r2,r2,r3
 4000490:	e0bff715 	stw	r2,-36(fp)
 4000494:	e0bff803 	ldbu	r2,-32(fp)
 4000498:	10800044 	addi	r2,r2,1
 400049c:	e0bff805 	stb	r2,-32(fp)
 40004a0:	e0bff803 	ldbu	r2,-32(fp)
 40004a4:	10800230 	cmpltui	r2,r2,8
 40004a8:	103ff11e 	bne	r2,zero,4000470 <__alt_data_end+0xfc000470>
    printf("Color: %x\n", word);
 40004ac:	e17ff717 	ldw	r5,-36(fp)
 40004b0:	010100b4 	movhi	r4,1026
 40004b4:	2128ad04 	addi	r4,r4,-23884
 40004b8:	400b5480 	call	400b548 <printf>

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
 40004bc:	e0bffc17 	ldw	r2,-16(fp)
 40004c0:	e0bff915 	stw	r2,-28(fp)
 40004c4:	00001906 	br	400052c <draw_rectangle+0x124>
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=8) {
 40004c8:	e0bffb17 	ldw	r2,-20(fp)
 40004cc:	e0bffa15 	stw	r2,-24(fp)
 40004d0:	00000e06 	br	400050c <draw_rectangle+0x104>
            vga_ctrl->VRAM[(x_draw/8) + (y_draw*80)] = word;
 40004d4:	d0fc9917 	ldw	r3,-3484(gp)
 40004d8:	e0bffa17 	ldw	r2,-24(fp)
 40004dc:	1008d0fa 	srli	r4,r2,3
 40004e0:	e0bff917 	ldw	r2,-28(fp)
 40004e4:	10801424 	muli	r2,r2,80
 40004e8:	2085883a 	add	r2,r4,r2
 40004ec:	1085883a 	add	r2,r2,r2
 40004f0:	1085883a 	add	r2,r2,r2
 40004f4:	1885883a 	add	r2,r3,r2
 40004f8:	e0fff717 	ldw	r3,-36(fp)
 40004fc:	10c00015 	stw	r3,0(r2)
    for(alt_u8 p=0; p<8; p++) word += (color << (p*4));
    printf("Color: %x\n", word);

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=8) {
 4000500:	e0bffa17 	ldw	r2,-24(fp)
 4000504:	10800204 	addi	r2,r2,8
 4000508:	e0bffa15 	stw	r2,-24(fp)
 400050c:	e0fffb17 	ldw	r3,-20(fp)
 4000510:	e0bffd17 	ldw	r2,-12(fp)
 4000514:	1885883a 	add	r2,r3,r2
 4000518:	e0fffa17 	ldw	r3,-24(fp)
 400051c:	18bfed36 	bltu	r3,r2,40004d4 <__alt_data_end+0xfc0004d4>
    alt_u32 word = 0;
    for(alt_u8 p=0; p<8; p++) word += (color << (p*4));
    printf("Color: %x\n", word);

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
 4000520:	e0bff917 	ldw	r2,-28(fp)
 4000524:	10800044 	addi	r2,r2,1
 4000528:	e0bff915 	stw	r2,-28(fp)
 400052c:	e0fffc17 	ldw	r3,-16(fp)
 4000530:	e0bffe17 	ldw	r2,-8(fp)
 4000534:	1885883a 	add	r2,r3,r2
 4000538:	e0fff917 	ldw	r3,-28(fp)
 400053c:	18bfe236 	bltu	r3,r2,40004c8 <__alt_data_end+0xfc0004c8>
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=8) {
            vga_ctrl->VRAM[(x_draw/8) + (y_draw*80)] = word;
        }
    }
}
 4000540:	0001883a 	nop
 4000544:	e037883a 	mov	sp,fp
 4000548:	dfc00117 	ldw	ra,4(sp)
 400054c:	df000017 	ldw	fp,0(sp)
 4000550:	dec00204 	addi	sp,sp,8
 4000554:	f800283a 	ret

04000558 <_ZN9DhcpClass13beginWithDHCPEPhmm>:
#include "Ethernet.h"
#include "utility/w5100.h"
#include "utility/IPAddress.h"

int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
 4000558:	defffa04 	addi	sp,sp,-24
 400055c:	dfc00515 	stw	ra,20(sp)
 4000560:	df000415 	stw	fp,16(sp)
 4000564:	df000404 	addi	fp,sp,16
 4000568:	e13ffc15 	stw	r4,-16(fp)
 400056c:	e17ffd15 	stw	r5,-12(fp)
 4000570:	e1bffe15 	stw	r6,-8(fp)
 4000574:	e1ffff15 	stw	r7,-4(fp)
	_dhcpLeaseTime=0;
 4000578:	e0bffc17 	ldw	r2,-16(fp)
 400057c:	10000915 	stw	zero,36(r2)
	_dhcpT1=0;
 4000580:	e0bffc17 	ldw	r2,-16(fp)
 4000584:	10000a15 	stw	zero,40(r2)
	_dhcpT2=0;
 4000588:	e0bffc17 	ldw	r2,-16(fp)
 400058c:	10000b15 	stw	zero,44(r2)
	_timeout = timeout;
 4000590:	e0bffc17 	ldw	r2,-16(fp)
 4000594:	e0fffe17 	ldw	r3,-8(fp)
 4000598:	10c00e15 	stw	r3,56(r2)
	_responseTimeout = responseTimeout;
 400059c:	e0bffc17 	ldw	r2,-16(fp)
 40005a0:	e0ffff17 	ldw	r3,-4(fp)
 40005a4:	10c00f15 	stw	r3,60(r2)

	// zero out _dhcpMacAddr
	memset(_dhcpMacAddr, 0, 6);
 40005a8:	e0bffc17 	ldw	r2,-16(fp)
 40005ac:	10800204 	addi	r2,r2,8
 40005b0:	01800184 	movi	r6,6
 40005b4:	000b883a 	mov	r5,zero
 40005b8:	1009883a 	mov	r4,r2
 40005bc:	400b3f00 	call	400b3f0 <memset>
	reset_DHCP_lease();
 40005c0:	e13ffc17 	ldw	r4,-16(fp)
 40005c4:	40006040 	call	4000604 <_ZN9DhcpClass16reset_DHCP_leaseEv>

	memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
 40005c8:	e0bffc17 	ldw	r2,-16(fp)
 40005cc:	10800204 	addi	r2,r2,8
 40005d0:	01800184 	movi	r6,6
 40005d4:	e17ffd17 	ldw	r5,-12(fp)
 40005d8:	1009883a 	mov	r4,r2
 40005dc:	400b2a80 	call	400b2a8 <memcpy>
	_dhcp_state = STATE_DHCP_START;
 40005e0:	e0bffc17 	ldw	r2,-16(fp)
 40005e4:	10001105 	stb	zero,68(r2)
	return request_DHCP_lease();
 40005e8:	e13ffc17 	ldw	r4,-16(fp)
 40005ec:	40006480 	call	4000648 <_ZN9DhcpClass18request_DHCP_leaseEv>
}
 40005f0:	e037883a 	mov	sp,fp
 40005f4:	dfc00117 	ldw	ra,4(sp)
 40005f8:	df000017 	ldw	fp,0(sp)
 40005fc:	dec00204 	addi	sp,sp,8
 4000600:	f800283a 	ret

04000604 <_ZN9DhcpClass16reset_DHCP_leaseEv>:

void DhcpClass::reset_DHCP_lease()
{
 4000604:	defffd04 	addi	sp,sp,-12
 4000608:	dfc00215 	stw	ra,8(sp)
 400060c:	df000115 	stw	fp,4(sp)
 4000610:	df000104 	addi	fp,sp,4
 4000614:	e13fff15 	stw	r4,-4(fp)
	// zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
	memset(_dhcpLocalIp, 0, 20);
 4000618:	e0bfff17 	ldw	r2,-4(fp)
 400061c:	10800384 	addi	r2,r2,14
 4000620:	01800504 	movi	r6,20
 4000624:	000b883a 	mov	r5,zero
 4000628:	1009883a 	mov	r4,r2
 400062c:	400b3f00 	call	400b3f0 <memset>
}
 4000630:	0001883a 	nop
 4000634:	e037883a 	mov	sp,fp
 4000638:	dfc00117 	ldw	ra,4(sp)
 400063c:	df000017 	ldw	fp,0(sp)
 4000640:	dec00204 	addi	sp,sp,8
 4000644:	f800283a 	ret

04000648 <_ZN9DhcpClass18request_DHCP_leaseEv>:

	//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease()
{
 4000648:	defff804 	addi	sp,sp,-32
 400064c:	dfc00715 	stw	ra,28(sp)
 4000650:	df000615 	stw	fp,24(sp)
 4000654:	df000604 	addi	fp,sp,24
 4000658:	e13fff15 	stw	r4,-4(fp)
	uint8_t messageType = 0;
 400065c:	e03ffa05 	stb	zero,-24(fp)

	// Pick an initial transaction ID
	//_dhcpTransactionId = random(1UL, 2000UL);
	_dhcpTransactionId = 1500UL;
 4000660:	e0bfff17 	ldw	r2,-4(fp)
 4000664:	00c17704 	movi	r3,1500
 4000668:	10c00115 	stw	r3,4(r2)
	_dhcpInitialTransactionId = _dhcpTransactionId;
 400066c:	e0bfff17 	ldw	r2,-4(fp)
 4000670:	10c00117 	ldw	r3,4(r2)
 4000674:	e0bfff17 	ldw	r2,-4(fp)
 4000678:	10c00015 	stw	r3,0(r2)

	_dhcpUdpSocket.stop();
 400067c:	e0bfff17 	ldw	r2,-4(fp)
 4000680:	10801204 	addi	r2,r2,72
 4000684:	1009883a 	mov	r4,r2
 4000688:	4004e6c0 	call	4004e6c <_ZN11EthernetUDP4stopEv>
	if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0) {
 400068c:	e0bfff17 	ldw	r2,-4(fp)
 4000690:	10801204 	addi	r2,r2,72
 4000694:	01401104 	movi	r5,68
 4000698:	1009883a 	mov	r4,r2
 400069c:	4004d980 	call	4004d98 <_ZN11EthernetUDP5beginEt>
 40006a0:	10803fcc 	andi	r2,r2,255
 40006a4:	1005003a 	cmpeq	r2,r2,zero
 40006a8:	10803fcc 	andi	r2,r2,255
 40006ac:	10000226 	beq	r2,zero,40006b8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x70>
		// Couldn't get a socket
		return 0;
 40006b0:	0005883a 	mov	r2,zero
 40006b4:	0000c106 	br	40009bc <_ZN9DhcpClass18request_DHCP_leaseEv+0x374>
	}

	presend_DHCP();
 40006b8:	e13fff17 	ldw	r4,-4(fp)
 40006bc:	40009d00 	call	40009d0 <_ZN9DhcpClass12presend_DHCPEv>

	int result = 0;
 40006c0:	e03ffb15 	stw	zero,-20(fp)

	unsigned long startTime = millis();
 40006c4:	40075380 	call	4007538 <_Z6millisv>
 40006c8:	e0bffc15 	stw	r2,-16(fp)

	while (_dhcp_state != STATE_DHCP_LEASED) {
 40006cc:	e0bfff17 	ldw	r2,-4(fp)
 40006d0:	10801103 	ldbu	r2,68(r2)
 40006d4:	10803fcc 	andi	r2,r2,255
 40006d8:	108000e0 	cmpeqi	r2,r2,3
 40006dc:	1000a91e 	bne	r2,zero,4000984 <_ZN9DhcpClass18request_DHCP_leaseEv+0x33c>
		if (_dhcp_state == STATE_DHCP_START) {
 40006e0:	e0bfff17 	ldw	r2,-4(fp)
 40006e4:	10801103 	ldbu	r2,68(r2)
 40006e8:	10803fcc 	andi	r2,r2,255
 40006ec:	1000151e 	bne	r2,zero,4000744 <_ZN9DhcpClass18request_DHCP_leaseEv+0xfc>
			_dhcpTransactionId++;
 40006f0:	e0bfff17 	ldw	r2,-4(fp)
 40006f4:	10800117 	ldw	r2,4(r2)
 40006f8:	10c00044 	addi	r3,r2,1
 40006fc:	e0bfff17 	ldw	r2,-4(fp)
 4000700:	10c00115 	stw	r3,4(r2)
			send_DHCP_MESSAGE(DHCP_DISCOVER, ((millis() - startTime) / 1000));
 4000704:	40075380 	call	4007538 <_Z6millisv>
 4000708:	1007883a 	mov	r3,r2
 400070c:	e0bffc17 	ldw	r2,-16(fp)
 4000710:	1885c83a 	sub	r2,r3,r2
 4000714:	0140fa04 	movi	r5,1000
 4000718:	1009883a 	mov	r4,r2
 400071c:	400a3b80 	call	400a3b8 <__udivsi3>
 4000720:	10bfffcc 	andi	r2,r2,65535
 4000724:	100d883a 	mov	r6,r2
 4000728:	01400044 	movi	r5,1
 400072c:	e13fff17 	ldw	r4,-4(fp)
 4000730:	40009f40 	call	40009f4 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
			_dhcp_state = STATE_DHCP_DISCOVER;
 4000734:	e0bfff17 	ldw	r2,-4(fp)
 4000738:	00c00044 	movi	r3,1
 400073c:	10c01105 	stb	r3,68(r2)
 4000740:	00007906 	br	4000928 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
		} else if (_dhcp_state == STATE_DHCP_REREQUEST) {
 4000744:	e0bfff17 	ldw	r2,-4(fp)
 4000748:	10801103 	ldbu	r2,68(r2)
 400074c:	10803fcc 	andi	r2,r2,255
 4000750:	10800118 	cmpnei	r2,r2,4
 4000754:	1000151e 	bne	r2,zero,40007ac <_ZN9DhcpClass18request_DHCP_leaseEv+0x164>
			_dhcpTransactionId++;
 4000758:	e0bfff17 	ldw	r2,-4(fp)
 400075c:	10800117 	ldw	r2,4(r2)
 4000760:	10c00044 	addi	r3,r2,1
 4000764:	e0bfff17 	ldw	r2,-4(fp)
 4000768:	10c00115 	stw	r3,4(r2)
			send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime)/1000));
 400076c:	40075380 	call	4007538 <_Z6millisv>
 4000770:	1007883a 	mov	r3,r2
 4000774:	e0bffc17 	ldw	r2,-16(fp)
 4000778:	1885c83a 	sub	r2,r3,r2
 400077c:	0140fa04 	movi	r5,1000
 4000780:	1009883a 	mov	r4,r2
 4000784:	400a3b80 	call	400a3b8 <__udivsi3>
 4000788:	10bfffcc 	andi	r2,r2,65535
 400078c:	100d883a 	mov	r6,r2
 4000790:	014000c4 	movi	r5,3
 4000794:	e13fff17 	ldw	r4,-4(fp)
 4000798:	40009f40 	call	40009f4 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
			_dhcp_state = STATE_DHCP_REQUEST;
 400079c:	e0bfff17 	ldw	r2,-4(fp)
 40007a0:	00c00084 	movi	r3,2
 40007a4:	10c01105 	stb	r3,68(r2)
 40007a8:	00005f06 	br	4000928 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
		} else if (_dhcp_state == STATE_DHCP_DISCOVER) {
 40007ac:	e0bfff17 	ldw	r2,-4(fp)
 40007b0:	10801103 	ldbu	r2,68(r2)
 40007b4:	10803fcc 	andi	r2,r2,255
 40007b8:	10800058 	cmpnei	r2,r2,1
 40007bc:	10001e1e 	bne	r2,zero,4000838 <_ZN9DhcpClass18request_DHCP_leaseEv+0x1f0>
			uint32_t respId;
			messageType = parseDHCPResponse(_responseTimeout, respId);
 40007c0:	e0bfff17 	ldw	r2,-4(fp)
 40007c4:	10800f17 	ldw	r2,60(r2)
 40007c8:	e0fffd04 	addi	r3,fp,-12
 40007cc:	180d883a 	mov	r6,r3
 40007d0:	100b883a 	mov	r5,r2
 40007d4:	e13fff17 	ldw	r4,-4(fp)
 40007d8:	4000e440 	call	4000e44 <_ZN9DhcpClass17parseDHCPResponseEmRm>
 40007dc:	e0bffa05 	stb	r2,-24(fp)
			if (messageType == DHCP_OFFER) {
 40007e0:	e0bffa03 	ldbu	r2,-24(fp)
 40007e4:	10800098 	cmpnei	r2,r2,2
 40007e8:	10004f1e 	bne	r2,zero,4000928 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
				// We'll use the transaction ID that the offer came with,
				// rather than the one we were up to
				_dhcpTransactionId = respId;
 40007ec:	e0fffd17 	ldw	r3,-12(fp)
 40007f0:	e0bfff17 	ldw	r2,-4(fp)
 40007f4:	10c00115 	stw	r3,4(r2)
				send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
 40007f8:	40075380 	call	4007538 <_Z6millisv>
 40007fc:	1007883a 	mov	r3,r2
 4000800:	e0bffc17 	ldw	r2,-16(fp)
 4000804:	1885c83a 	sub	r2,r3,r2
 4000808:	0140fa04 	movi	r5,1000
 400080c:	1009883a 	mov	r4,r2
 4000810:	400a3b80 	call	400a3b8 <__udivsi3>
 4000814:	10bfffcc 	andi	r2,r2,65535
 4000818:	100d883a 	mov	r6,r2
 400081c:	014000c4 	movi	r5,3
 4000820:	e13fff17 	ldw	r4,-4(fp)
 4000824:	40009f40 	call	40009f4 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
				_dhcp_state = STATE_DHCP_REQUEST;
 4000828:	e0bfff17 	ldw	r2,-4(fp)
 400082c:	00c00084 	movi	r3,2
 4000830:	10c01105 	stb	r3,68(r2)
 4000834:	00003c06 	br	4000928 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			}
		} else if (_dhcp_state == STATE_DHCP_REQUEST) {
 4000838:	e0bfff17 	ldw	r2,-4(fp)
 400083c:	10801103 	ldbu	r2,68(r2)
 4000840:	10803fcc 	andi	r2,r2,255
 4000844:	10800098 	cmpnei	r2,r2,2
 4000848:	1000371e 	bne	r2,zero,4000928 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			uint32_t respId;
			messageType = parseDHCPResponse(_responseTimeout, respId);
 400084c:	e0bfff17 	ldw	r2,-4(fp)
 4000850:	10800f17 	ldw	r2,60(r2)
 4000854:	e0fffe04 	addi	r3,fp,-8
 4000858:	180d883a 	mov	r6,r3
 400085c:	100b883a 	mov	r5,r2
 4000860:	e13fff17 	ldw	r4,-4(fp)
 4000864:	4000e440 	call	4000e44 <_ZN9DhcpClass17parseDHCPResponseEmRm>
 4000868:	e0bffa05 	stb	r2,-24(fp)
			if (messageType == DHCP_ACK) {
 400086c:	e0bffa03 	ldbu	r2,-24(fp)
 4000870:	10800158 	cmpnei	r2,r2,5
 4000874:	1000271e 	bne	r2,zero,4000914 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2cc>
				_dhcp_state = STATE_DHCP_LEASED;
 4000878:	e0bfff17 	ldw	r2,-4(fp)
 400087c:	00c000c4 	movi	r3,3
 4000880:	10c01105 	stb	r3,68(r2)
				result = 1;
 4000884:	00800044 	movi	r2,1
 4000888:	e0bffb15 	stw	r2,-20(fp)
				//use default lease time if we didn't get it
				if (_dhcpLeaseTime == 0) {
 400088c:	e0bfff17 	ldw	r2,-4(fp)
 4000890:	10800917 	ldw	r2,36(r2)
 4000894:	1000031e 	bne	r2,zero,40008a4 <_ZN9DhcpClass18request_DHCP_leaseEv+0x25c>
					_dhcpLeaseTime = DEFAULT_LEASE;
 4000898:	e0bfff17 	ldw	r2,-4(fp)
 400089c:	00c0e104 	movi	r3,900
 40008a0:	10c00915 	stw	r3,36(r2)
				}
				// Calculate T1 & T2 if we didn't get it
				if (_dhcpT1 == 0) {
 40008a4:	e0bfff17 	ldw	r2,-4(fp)
 40008a8:	10800a17 	ldw	r2,40(r2)
 40008ac:	1000051e 	bne	r2,zero,40008c4 <_ZN9DhcpClass18request_DHCP_leaseEv+0x27c>
					// T1 should be 50% of _dhcpLeaseTime
					_dhcpT1 = _dhcpLeaseTime >> 1;
 40008b0:	e0bfff17 	ldw	r2,-4(fp)
 40008b4:	10800917 	ldw	r2,36(r2)
 40008b8:	1006d07a 	srli	r3,r2,1
 40008bc:	e0bfff17 	ldw	r2,-4(fp)
 40008c0:	10c00a15 	stw	r3,40(r2)
				}
				if (_dhcpT2 == 0) {
 40008c4:	e0bfff17 	ldw	r2,-4(fp)
 40008c8:	10800b17 	ldw	r2,44(r2)
 40008cc:	1000081e 	bne	r2,zero,40008f0 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2a8>
					// T2 should be 87.5% (7/8ths) of _dhcpLeaseTime
					_dhcpT2 = _dhcpLeaseTime - (_dhcpLeaseTime >> 3);
 40008d0:	e0bfff17 	ldw	r2,-4(fp)
 40008d4:	10c00917 	ldw	r3,36(r2)
 40008d8:	e0bfff17 	ldw	r2,-4(fp)
 40008dc:	10800917 	ldw	r2,36(r2)
 40008e0:	1004d0fa 	srli	r2,r2,3
 40008e4:	1887c83a 	sub	r3,r3,r2
 40008e8:	e0bfff17 	ldw	r2,-4(fp)
 40008ec:	10c00b15 	stw	r3,44(r2)
				}
				_renewInSec = _dhcpT1;
 40008f0:	e0bfff17 	ldw	r2,-4(fp)
 40008f4:	10c00a17 	ldw	r3,40(r2)
 40008f8:	e0bfff17 	ldw	r2,-4(fp)
 40008fc:	10c00c15 	stw	r3,48(r2)
				_rebindInSec = _dhcpT2;
 4000900:	e0bfff17 	ldw	r2,-4(fp)
 4000904:	10c00b17 	ldw	r3,44(r2)
 4000908:	e0bfff17 	ldw	r2,-4(fp)
 400090c:	10c00d15 	stw	r3,52(r2)
 4000910:	00000506 	br	4000928 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			} else if (messageType == DHCP_NAK) {
 4000914:	e0bffa03 	ldbu	r2,-24(fp)
 4000918:	10800198 	cmpnei	r2,r2,6
 400091c:	1000021e 	bne	r2,zero,4000928 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
				_dhcp_state = STATE_DHCP_START;
 4000920:	e0bfff17 	ldw	r2,-4(fp)
 4000924:	10001105 	stb	zero,68(r2)
			}
		}

		if (messageType == 255) {
 4000928:	e0bffa03 	ldbu	r2,-24(fp)
 400092c:	10803fd8 	cmpnei	r2,r2,255
 4000930:	1000031e 	bne	r2,zero,4000940 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f8>
			messageType = 0;
 4000934:	e03ffa05 	stb	zero,-24(fp)
			_dhcp_state = STATE_DHCP_START;
 4000938:	e0bfff17 	ldw	r2,-4(fp)
 400093c:	10001105 	stb	zero,68(r2)
		}

		if (result != 1 && ((millis() - startTime) > _timeout))
 4000940:	e0bffb17 	ldw	r2,-20(fp)
 4000944:	10800060 	cmpeqi	r2,r2,1
 4000948:	1000091e 	bne	r2,zero,4000970 <_ZN9DhcpClass18request_DHCP_leaseEv+0x328>
 400094c:	40075380 	call	4007538 <_Z6millisv>
 4000950:	1007883a 	mov	r3,r2
 4000954:	e0bffc17 	ldw	r2,-16(fp)
 4000958:	1885c83a 	sub	r2,r3,r2
 400095c:	e0ffff17 	ldw	r3,-4(fp)
 4000960:	18c00e17 	ldw	r3,56(r3)
 4000964:	1880022e 	bgeu	r3,r2,4000970 <_ZN9DhcpClass18request_DHCP_leaseEv+0x328>
 4000968:	00800044 	movi	r2,1
 400096c:	00000106 	br	4000974 <_ZN9DhcpClass18request_DHCP_leaseEv+0x32c>
 4000970:	0005883a 	mov	r2,zero
 4000974:	10803fcc 	andi	r2,r2,255
 4000978:	1000011e 	bne	r2,zero,4000980 <_ZN9DhcpClass18request_DHCP_leaseEv+0x338>

	int result = 0;

	unsigned long startTime = millis();

	while (_dhcp_state != STATE_DHCP_LEASED) {
 400097c:	003f5306 	br	40006cc <__alt_data_end+0xfc0006cc>
			messageType = 0;
			_dhcp_state = STATE_DHCP_START;
		}

		if (result != 1 && ((millis() - startTime) > _timeout))
			break;
 4000980:	0001883a 	nop
	}

	// We're done with the socket now
	_dhcpUdpSocket.stop();
 4000984:	e0bfff17 	ldw	r2,-4(fp)
 4000988:	10801204 	addi	r2,r2,72
 400098c:	1009883a 	mov	r4,r2
 4000990:	4004e6c0 	call	4004e6c <_ZN11EthernetUDP4stopEv>
	_dhcpTransactionId++;
 4000994:	e0bfff17 	ldw	r2,-4(fp)
 4000998:	10800117 	ldw	r2,4(r2)
 400099c:	10c00044 	addi	r3,r2,1
 40009a0:	e0bfff17 	ldw	r2,-4(fp)
 40009a4:	10c00115 	stw	r3,4(r2)

	_lastCheckLeaseMillis = millis();
 40009a8:	40075380 	call	4007538 <_Z6millisv>
 40009ac:	1007883a 	mov	r3,r2
 40009b0:	e0bfff17 	ldw	r2,-4(fp)
 40009b4:	10c01015 	stw	r3,64(r2)
	return result;
 40009b8:	e0bffb17 	ldw	r2,-20(fp)
}
 40009bc:	e037883a 	mov	sp,fp
 40009c0:	dfc00117 	ldw	ra,4(sp)
 40009c4:	df000017 	ldw	fp,0(sp)
 40009c8:	dec00204 	addi	sp,sp,8
 40009cc:	f800283a 	ret

040009d0 <_ZN9DhcpClass12presend_DHCPEv>:

void DhcpClass::presend_DHCP()
{
 40009d0:	defffe04 	addi	sp,sp,-8
 40009d4:	df000115 	stw	fp,4(sp)
 40009d8:	df000104 	addi	fp,sp,4
 40009dc:	e13fff15 	stw	r4,-4(fp)
}
 40009e0:	0001883a 	nop
 40009e4:	e037883a 	mov	sp,fp
 40009e8:	df000017 	ldw	fp,0(sp)
 40009ec:	dec00104 	addi	sp,sp,4
 40009f0:	f800283a 	ret

040009f4 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>:

void DhcpClass::send_DHCP_MESSAGE(uint8_t messageType, uint16_t secondsElapsed)
{
 40009f4:	deffee04 	addi	sp,sp,-72
 40009f8:	dfc01115 	stw	ra,68(sp)
 40009fc:	df001015 	stw	fp,64(sp)
 4000a00:	df001004 	addi	fp,sp,64
 4000a04:	e13ffd15 	stw	r4,-12(fp)
 4000a08:	2807883a 	mov	r3,r5
 4000a0c:	3005883a 	mov	r2,r6
 4000a10:	e0fffe05 	stb	r3,-8(fp)
 4000a14:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t buffer[32];
	memset(buffer, 0, 32);
 4000a18:	e0bff204 	addi	r2,fp,-56
 4000a1c:	01800804 	movi	r6,32
 4000a20:	000b883a 	mov	r5,zero
 4000a24:	1009883a 	mov	r4,r2
 4000a28:	400b3f00 	call	400b3f0 <memset>
	IPAddress dest_addr(255, 255, 255, 255); // Broadcast address
 4000a2c:	e0fffa04 	addi	r3,fp,-24
 4000a30:	00803fc4 	movi	r2,255
 4000a34:	d8800015 	stw	r2,0(sp)
 4000a38:	01c03fc4 	movi	r7,255
 4000a3c:	01803fc4 	movi	r6,255
 4000a40:	01403fc4 	movi	r5,255
 4000a44:	1809883a 	mov	r4,r3
 4000a48:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>

	if (_dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT) == -1) {
 4000a4c:	e0bffd17 	ldw	r2,-12(fp)
 4000a50:	10801204 	addi	r2,r2,72
 4000a54:	018010c4 	movi	r6,67
 4000a58:	e17ffa17 	ldw	r5,-24(fp)
 4000a5c:	1009883a 	mov	r4,r2
 4000a60:	4004f900 	call	4004f90 <_ZN11EthernetUDP11beginPacketE9IPAddresst>
 4000a64:	10bfffe0 	cmpeqi	r2,r2,-1
 4000a68:	10803fcc 	andi	r2,r2,255
 4000a6c:	1000ef1e 	bne	r2,zero,4000e2c <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x438>
		//Serial.printf("DHCP transmit error\n");
		// FIXME Need to return errors
		return;
	}

	buffer[0] = DHCP_BOOTREQUEST;   // op
 4000a70:	00800044 	movi	r2,1
 4000a74:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = DHCP_HTYPE10MB;     // htype
 4000a78:	00800044 	movi	r2,1
 4000a7c:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = DHCP_HLENETHERNET;  // hlen
 4000a80:	00800184 	movi	r2,6
 4000a84:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = DHCP_HOPS;          // hops
 4000a88:	e03ff2c5 	stb	zero,-53(fp)

	// xid
	unsigned long xid = htonl(_dhcpTransactionId);
 4000a8c:	e0bffd17 	ldw	r2,-12(fp)
 4000a90:	10800117 	ldw	r2,4(r2)
 4000a94:	1006963a 	slli	r3,r2,24
 4000a98:	e0bffd17 	ldw	r2,-12(fp)
 4000a9c:	10800117 	ldw	r2,4(r2)
 4000aa0:	1004923a 	slli	r2,r2,8
 4000aa4:	10803fec 	andhi	r2,r2,255
 4000aa8:	1886b03a 	or	r3,r3,r2
 4000aac:	e0bffd17 	ldw	r2,-12(fp)
 4000ab0:	10800117 	ldw	r2,4(r2)
 4000ab4:	1004d23a 	srli	r2,r2,8
 4000ab8:	10bfc00c 	andi	r2,r2,65280
 4000abc:	1886b03a 	or	r3,r3,r2
 4000ac0:	e0bffd17 	ldw	r2,-12(fp)
 4000ac4:	10800117 	ldw	r2,4(r2)
 4000ac8:	1004d63a 	srli	r2,r2,24
 4000acc:	1884b03a 	or	r2,r3,r2
 4000ad0:	e0bffb15 	stw	r2,-20(fp)
	memcpy(buffer + 4, &(xid), 4);
 4000ad4:	e0bff204 	addi	r2,fp,-56
 4000ad8:	10800104 	addi	r2,r2,4
 4000adc:	e0fffb04 	addi	r3,fp,-20
 4000ae0:	01800104 	movi	r6,4
 4000ae4:	180b883a 	mov	r5,r3
 4000ae8:	1009883a 	mov	r4,r2
 4000aec:	400b2a80 	call	400b2a8 <memcpy>

	// 8, 9 - seconds elapsed
	buffer[8] = ((secondsElapsed & 0xff00) >> 8);
 4000af0:	e0bfff0b 	ldhu	r2,-4(fp)
 4000af4:	1004d23a 	srli	r2,r2,8
 4000af8:	e0bff405 	stb	r2,-48(fp)
	buffer[9] = (secondsElapsed & 0x00ff);
 4000afc:	e0bfff0b 	ldhu	r2,-4(fp)
 4000b00:	e0bff445 	stb	r2,-47(fp)

	// flags
	unsigned short flags = htons(DHCP_FLAGSBROADCAST);
 4000b04:	00802004 	movi	r2,128
 4000b08:	e0bffc0d 	sth	r2,-16(fp)
	memcpy(buffer + 10, &(flags), 2);
 4000b0c:	e0bff204 	addi	r2,fp,-56
 4000b10:	10800284 	addi	r2,r2,10
 4000b14:	e0fffc04 	addi	r3,fp,-16
 4000b18:	01800084 	movi	r6,2
 4000b1c:	180b883a 	mov	r5,r3
 4000b20:	1009883a 	mov	r4,r2
 4000b24:	400b2a80 	call	400b2a8 <memcpy>
	// yiaddr: already zeroed
	// siaddr: already zeroed
	// giaddr: already zeroed

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 28);
 4000b28:	e0bffd17 	ldw	r2,-12(fp)
 4000b2c:	10801204 	addi	r2,r2,72
 4000b30:	e0fff204 	addi	r3,fp,-56
 4000b34:	01800704 	movi	r6,28
 4000b38:	180b883a 	mov	r5,r3
 4000b3c:	1009883a 	mov	r4,r2
 4000b40:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>

	memset(buffer, 0, 32); // clear local buffer
 4000b44:	e0bff204 	addi	r2,fp,-56
 4000b48:	01800804 	movi	r6,32
 4000b4c:	000b883a 	mov	r5,zero
 4000b50:	1009883a 	mov	r4,r2
 4000b54:	400b3f00 	call	400b3f0 <memset>

	memcpy(buffer, _dhcpMacAddr, 6); // chaddr
 4000b58:	e0bffd17 	ldw	r2,-12(fp)
 4000b5c:	10c00204 	addi	r3,r2,8
 4000b60:	e0bff204 	addi	r2,fp,-56
 4000b64:	01800184 	movi	r6,6
 4000b68:	180b883a 	mov	r5,r3
 4000b6c:	1009883a 	mov	r4,r2
 4000b70:	400b2a80 	call	400b2a8 <memcpy>

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 16);
 4000b74:	e0bffd17 	ldw	r2,-12(fp)
 4000b78:	10801204 	addi	r2,r2,72
 4000b7c:	e0fff204 	addi	r3,fp,-56
 4000b80:	01800404 	movi	r6,16
 4000b84:	180b883a 	mov	r5,r3
 4000b88:	1009883a 	mov	r4,r2
 4000b8c:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>

	memset(buffer, 0, 32); // clear local buffer
 4000b90:	e0bff204 	addi	r2,fp,-56
 4000b94:	01800804 	movi	r6,32
 4000b98:	000b883a 	mov	r5,zero
 4000b9c:	1009883a 	mov	r4,r2
 4000ba0:	400b3f00 	call	400b3f0 <memset>

	// leave zeroed out for sname && file
	// put in W5100 transmit buffer x 6 (192 bytes)

	for(int i = 0; i < 6; i++) {
 4000ba4:	e03ff115 	stw	zero,-60(fp)
 4000ba8:	e0bff117 	ldw	r2,-60(fp)
 4000bac:	10800188 	cmpgei	r2,r2,6
 4000bb0:	10000b1e 	bne	r2,zero,4000be0 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x1ec>
		_dhcpUdpSocket.write(buffer, 32);
 4000bb4:	e0bffd17 	ldw	r2,-12(fp)
 4000bb8:	10801204 	addi	r2,r2,72
 4000bbc:	e0fff204 	addi	r3,fp,-56
 4000bc0:	01800804 	movi	r6,32
 4000bc4:	180b883a 	mov	r5,r3
 4000bc8:	1009883a 	mov	r4,r2
 4000bcc:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>
	memset(buffer, 0, 32); // clear local buffer

	// leave zeroed out for sname && file
	// put in W5100 transmit buffer x 6 (192 bytes)

	for(int i = 0; i < 6; i++) {
 4000bd0:	e0bff117 	ldw	r2,-60(fp)
 4000bd4:	10800044 	addi	r2,r2,1
 4000bd8:	e0bff115 	stw	r2,-60(fp)
 4000bdc:	003ff206 	br	4000ba8 <__alt_data_end+0xfc000ba8>
		_dhcpUdpSocket.write(buffer, 32);
	}

	// OPT - Magic Cookie
	buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
 4000be0:	008018c4 	movi	r2,99
 4000be4:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = (uint8_t)((MAGIC_COOKIE >> 16)& 0xFF);
 4000be8:	00bfe084 	movi	r2,-126
 4000bec:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = (uint8_t)((MAGIC_COOKIE >> 8)& 0xFF);
 4000bf0:	008014c4 	movi	r2,83
 4000bf4:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = (uint8_t)(MAGIC_COOKIE& 0xFF);
 4000bf8:	008018c4 	movi	r2,99
 4000bfc:	e0bff2c5 	stb	r2,-53(fp)

	// OPT - message type
	buffer[4] = dhcpMessageType;
 4000c00:	00800d44 	movi	r2,53
 4000c04:	e0bff305 	stb	r2,-52(fp)
	buffer[5] = 0x01;
 4000c08:	00800044 	movi	r2,1
 4000c0c:	e0bff345 	stb	r2,-51(fp)
	buffer[6] = messageType; //DHCP_REQUEST;
 4000c10:	e0bffe03 	ldbu	r2,-8(fp)
 4000c14:	e0bff385 	stb	r2,-50(fp)

	// OPT - client identifier
	buffer[7] = dhcpClientIdentifier;
 4000c18:	00800f44 	movi	r2,61
 4000c1c:	e0bff3c5 	stb	r2,-49(fp)
	buffer[8] = 0x07;
 4000c20:	008001c4 	movi	r2,7
 4000c24:	e0bff405 	stb	r2,-48(fp)
	buffer[9] = 0x01;
 4000c28:	00800044 	movi	r2,1
 4000c2c:	e0bff445 	stb	r2,-47(fp)
	memcpy(buffer + 10, _dhcpMacAddr, 6);
 4000c30:	e0bff204 	addi	r2,fp,-56
 4000c34:	10800284 	addi	r2,r2,10
 4000c38:	e0fffd17 	ldw	r3,-12(fp)
 4000c3c:	18c00204 	addi	r3,r3,8
 4000c40:	01800184 	movi	r6,6
 4000c44:	180b883a 	mov	r5,r3
 4000c48:	1009883a 	mov	r4,r2
 4000c4c:	400b2a80 	call	400b2a8 <memcpy>

	// OPT - host name
	buffer[16] = hostName;
 4000c50:	00800304 	movi	r2,12
 4000c54:	e0bff605 	stb	r2,-40(fp)
	buffer[17] = strlen(HOST_NAME) + 6; // length of hostname + last 3 bytes of mac address
 4000c58:	00800304 	movi	r2,12
 4000c5c:	e0bff645 	stb	r2,-39(fp)
	strcpy((char*)&(buffer[18]), HOST_NAME);
 4000c60:	e0bff204 	addi	r2,fp,-56
 4000c64:	10800484 	addi	r2,r2,18
 4000c68:	00d255c4 	movi	r3,18775
 4000c6c:	10c0000d 	sth	r3,0(r2)
 4000c70:	00db9684 	movi	r3,28250
 4000c74:	10c0008d 	sth	r3,2(r2)
 4000c78:	00dd1944 	movi	r3,29797
 4000c7c:	10c0010d 	sth	r3,4(r2)
 4000c80:	10000185 	stb	zero,6(r2)

	printByte((char*)&(buffer[24]), _dhcpMacAddr[3]);
 4000c84:	e0bffd17 	ldw	r2,-12(fp)
 4000c88:	108002c3 	ldbu	r2,11(r2)
 4000c8c:	10c03fcc 	andi	r3,r2,255
 4000c90:	e0bff204 	addi	r2,fp,-56
 4000c94:	10800604 	addi	r2,r2,24
 4000c98:	180d883a 	mov	r6,r3
 4000c9c:	100b883a 	mov	r5,r2
 4000ca0:	e13ffd17 	ldw	r4,-12(fp)
 4000ca4:	40018e00 	call	40018e0 <_ZN9DhcpClass9printByteEPch>
	printByte((char*)&(buffer[26]), _dhcpMacAddr[4]);
 4000ca8:	e0bffd17 	ldw	r2,-12(fp)
 4000cac:	10800303 	ldbu	r2,12(r2)
 4000cb0:	10c03fcc 	andi	r3,r2,255
 4000cb4:	e0bff204 	addi	r2,fp,-56
 4000cb8:	10800684 	addi	r2,r2,26
 4000cbc:	180d883a 	mov	r6,r3
 4000cc0:	100b883a 	mov	r5,r2
 4000cc4:	e13ffd17 	ldw	r4,-12(fp)
 4000cc8:	40018e00 	call	40018e0 <_ZN9DhcpClass9printByteEPch>
	printByte((char*)&(buffer[28]), _dhcpMacAddr[5]);
 4000ccc:	e0bffd17 	ldw	r2,-12(fp)
 4000cd0:	10800343 	ldbu	r2,13(r2)
 4000cd4:	10c03fcc 	andi	r3,r2,255
 4000cd8:	e0bff204 	addi	r2,fp,-56
 4000cdc:	10800704 	addi	r2,r2,28
 4000ce0:	180d883a 	mov	r6,r3
 4000ce4:	100b883a 	mov	r5,r2
 4000ce8:	e13ffd17 	ldw	r4,-12(fp)
 4000cec:	40018e00 	call	40018e0 <_ZN9DhcpClass9printByteEPch>

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 30);
 4000cf0:	e0bffd17 	ldw	r2,-12(fp)
 4000cf4:	10801204 	addi	r2,r2,72
 4000cf8:	e0fff204 	addi	r3,fp,-56
 4000cfc:	01800784 	movi	r6,30
 4000d00:	180b883a 	mov	r5,r3
 4000d04:	1009883a 	mov	r4,r2
 4000d08:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>

	if (messageType == DHCP_REQUEST) {
 4000d0c:	e0bffe03 	ldbu	r2,-8(fp)
 4000d10:	108000d8 	cmpnei	r2,r2,3
 4000d14:	1000271e 	bne	r2,zero,4000db4 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x3c0>
		buffer[0] = dhcpRequestedIPaddr;
 4000d18:	00800c84 	movi	r2,50
 4000d1c:	e0bff205 	stb	r2,-56(fp)
		buffer[1] = 0x04;
 4000d20:	00800104 	movi	r2,4
 4000d24:	e0bff245 	stb	r2,-55(fp)
		buffer[2] = _dhcpLocalIp[0];
 4000d28:	e0bffd17 	ldw	r2,-12(fp)
 4000d2c:	10800383 	ldbu	r2,14(r2)
 4000d30:	e0bff285 	stb	r2,-54(fp)
		buffer[3] = _dhcpLocalIp[1];
 4000d34:	e0bffd17 	ldw	r2,-12(fp)
 4000d38:	108003c3 	ldbu	r2,15(r2)
 4000d3c:	e0bff2c5 	stb	r2,-53(fp)
		buffer[4] = _dhcpLocalIp[2];
 4000d40:	e0bffd17 	ldw	r2,-12(fp)
 4000d44:	10800403 	ldbu	r2,16(r2)
 4000d48:	e0bff305 	stb	r2,-52(fp)
		buffer[5] = _dhcpLocalIp[3];
 4000d4c:	e0bffd17 	ldw	r2,-12(fp)
 4000d50:	10800443 	ldbu	r2,17(r2)
 4000d54:	e0bff345 	stb	r2,-51(fp)

		buffer[6] = dhcpServerIdentifier;
 4000d58:	00800d84 	movi	r2,54
 4000d5c:	e0bff385 	stb	r2,-50(fp)
		buffer[7] = 0x04;
 4000d60:	00800104 	movi	r2,4
 4000d64:	e0bff3c5 	stb	r2,-49(fp)
		buffer[8] = _dhcpDhcpServerIp[0];
 4000d68:	e0bffd17 	ldw	r2,-12(fp)
 4000d6c:	10800683 	ldbu	r2,26(r2)
 4000d70:	e0bff405 	stb	r2,-48(fp)
		buffer[9] = _dhcpDhcpServerIp[1];
 4000d74:	e0bffd17 	ldw	r2,-12(fp)
 4000d78:	108006c3 	ldbu	r2,27(r2)
 4000d7c:	e0bff445 	stb	r2,-47(fp)
		buffer[10] = _dhcpDhcpServerIp[2];
 4000d80:	e0bffd17 	ldw	r2,-12(fp)
 4000d84:	10800703 	ldbu	r2,28(r2)
 4000d88:	e0bff485 	stb	r2,-46(fp)
		buffer[11] = _dhcpDhcpServerIp[3];
 4000d8c:	e0bffd17 	ldw	r2,-12(fp)
 4000d90:	10800743 	ldbu	r2,29(r2)
 4000d94:	e0bff4c5 	stb	r2,-45(fp)

		//put data in W5100 transmit buffer
		_dhcpUdpSocket.write(buffer, 12);
 4000d98:	e0bffd17 	ldw	r2,-12(fp)
 4000d9c:	10801204 	addi	r2,r2,72
 4000da0:	e0fff204 	addi	r3,fp,-56
 4000da4:	01800304 	movi	r6,12
 4000da8:	180b883a 	mov	r5,r3
 4000dac:	1009883a 	mov	r4,r2
 4000db0:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>
	}

	buffer[0] = dhcpParamRequest;
 4000db4:	00800dc4 	movi	r2,55
 4000db8:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = 0x06;
 4000dbc:	00800184 	movi	r2,6
 4000dc0:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = subnetMask;
 4000dc4:	00800044 	movi	r2,1
 4000dc8:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = routersOnSubnet;
 4000dcc:	008000c4 	movi	r2,3
 4000dd0:	e0bff2c5 	stb	r2,-53(fp)
	buffer[4] = dns;
 4000dd4:	00800184 	movi	r2,6
 4000dd8:	e0bff305 	stb	r2,-52(fp)
	buffer[5] = domainName;
 4000ddc:	008003c4 	movi	r2,15
 4000de0:	e0bff345 	stb	r2,-51(fp)
	buffer[6] = dhcpT1value;
 4000de4:	00800e84 	movi	r2,58
 4000de8:	e0bff385 	stb	r2,-50(fp)
	buffer[7] = dhcpT2value;
 4000dec:	00800ec4 	movi	r2,59
 4000df0:	e0bff3c5 	stb	r2,-49(fp)
	buffer[8] = endOption;
 4000df4:	00bfffc4 	movi	r2,-1
 4000df8:	e0bff405 	stb	r2,-48(fp)

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 9);
 4000dfc:	e0bffd17 	ldw	r2,-12(fp)
 4000e00:	10801204 	addi	r2,r2,72
 4000e04:	e0fff204 	addi	r3,fp,-56
 4000e08:	01800244 	movi	r6,9
 4000e0c:	180b883a 	mov	r5,r3
 4000e10:	1009883a 	mov	r4,r2
 4000e14:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>

	_dhcpUdpSocket.endPacket();
 4000e18:	e0bffd17 	ldw	r2,-12(fp)
 4000e1c:	10801204 	addi	r2,r2,72
 4000e20:	1009883a 	mov	r4,r2
 4000e24:	40050100 	call	4005010 <_ZN11EthernetUDP9endPacketEv>
 4000e28:	00000106 	br	4000e30 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x43c>
	IPAddress dest_addr(255, 255, 255, 255); // Broadcast address

	if (_dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT) == -1) {
		//Serial.printf("DHCP transmit error\n");
		// FIXME Need to return errors
		return;
 4000e2c:	0001883a 	nop

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 9);

	_dhcpUdpSocket.endPacket();
}
 4000e30:	e037883a 	mov	sp,fp
 4000e34:	dfc00117 	ldw	ra,4(sp)
 4000e38:	df000017 	ldw	fp,0(sp)
 4000e3c:	dec00204 	addi	sp,sp,8
 4000e40:	f800283a 	ret

04000e44 <_ZN9DhcpClass17parseDHCPResponseEmRm>:

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
 4000e44:	deffd604 	addi	sp,sp,-168
 4000e48:	dfc02915 	stw	ra,164(sp)
 4000e4c:	df002815 	stw	fp,160(sp)
 4000e50:	ddc02715 	stw	r23,156(sp)
 4000e54:	dd802615 	stw	r22,152(sp)
 4000e58:	dd402515 	stw	r21,148(sp)
 4000e5c:	dd002415 	stw	r20,144(sp)
 4000e60:	dcc02315 	stw	r19,140(sp)
 4000e64:	dc802215 	stw	r18,136(sp)
 4000e68:	dc402115 	stw	r17,132(sp)
 4000e6c:	dc002015 	stw	r16,128(sp)
 4000e70:	df002804 	addi	fp,sp,160
 4000e74:	e13fe715 	stw	r4,-100(fp)
 4000e78:	e17fe815 	stw	r5,-96(fp)
 4000e7c:	e1bfe915 	stw	r6,-92(fp)
 4000e80:	00810074 	movhi	r2,1025
 4000e84:	10a3cc04 	addi	r2,r2,-28880
 4000e88:	e0bff015 	stw	r2,-64(fp)
 4000e8c:	008100b4 	movhi	r2,1026
 4000e90:	10a88404 	addi	r2,r2,-24048
 4000e94:	e0bff115 	stw	r2,-60(fp)
 4000e98:	e0bff204 	addi	r2,fp,-56
 4000e9c:	e0ffd804 	addi	r3,fp,-160
 4000ea0:	10c00015 	stw	r3,0(r2)
 4000ea4:	00c10034 	movhi	r3,1024
 4000ea8:	18c56c04 	addi	r3,r3,5552
 4000eac:	10c00115 	stw	r3,4(r2)
 4000eb0:	16c00215 	stw	sp,8(r2)
 4000eb4:	e0bfea04 	addi	r2,fp,-88
 4000eb8:	1009883a 	mov	r4,r2
 4000ebc:	400a67c0 	call	400a67c <_Unwind_SjLj_Register>
	uint8_t type = 0;
 4000ec0:	e03fd805 	stb	zero,-160(fp)
	uint8_t opt_len = 0;
 4000ec4:	e03fd845 	stb	zero,-159(fp)

	unsigned long startTime = millis();
 4000ec8:	00bfffc4 	movi	r2,-1
 4000ecc:	e0bfeb15 	stw	r2,-84(fp)
 4000ed0:	40075380 	call	4007538 <_Z6millisv>
 4000ed4:	e0bfd915 	stw	r2,-156(fp)

	while (_dhcpUdpSocket.parsePacket() <= 0) {
 4000ed8:	e0bfe717 	ldw	r2,-100(fp)
 4000edc:	10c01204 	addi	r3,r2,72
 4000ee0:	00bfffc4 	movi	r2,-1
 4000ee4:	e0bfeb15 	stw	r2,-84(fp)
 4000ee8:	1809883a 	mov	r4,r3
 4000eec:	40051040 	call	4005104 <_ZN11EthernetUDP11parsePacketEv>
 4000ef0:	0084403a 	cmpge	r2,zero,r2
 4000ef4:	10803fcc 	andi	r2,r2,255
 4000ef8:	10000f26 	beq	r2,zero,4000f38 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xf4>
		if ((millis() - startTime) > responseTimeout) {
 4000efc:	40075380 	call	4007538 <_Z6millisv>
 4000f00:	1007883a 	mov	r3,r2
 4000f04:	e0bfd917 	ldw	r2,-156(fp)
 4000f08:	1885c83a 	sub	r2,r3,r2
 4000f0c:	e0ffe817 	ldw	r3,-96(fp)
 4000f10:	1885803a 	cmpltu	r2,r3,r2
 4000f14:	10803fcc 	andi	r2,r2,255
 4000f18:	10000226 	beq	r2,zero,4000f24 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xe0>
			return 255;
 4000f1c:	00bfffc4 	movi	r2,-1
 4000f20:	0001a106 	br	40015a8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x764>
		}
		delay(50);
 4000f24:	00bfffc4 	movi	r2,-1
 4000f28:	e0bfeb15 	stw	r2,-84(fp)
 4000f2c:	01000c84 	movi	r4,50
 4000f30:	40074fc0 	call	40074fc <_Z5delayj>
	uint8_t type = 0;
	uint8_t opt_len = 0;

	unsigned long startTime = millis();

	while (_dhcpUdpSocket.parsePacket() <= 0) {
 4000f34:	003fe806 	br	4000ed8 <__alt_data_end+0xfc000ed8>
		}
		delay(50);
	}
	// start reading in the packet
	RIP_MSG_FIXED fixedMsg;
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));
 4000f38:	e0bfe717 	ldw	r2,-100(fp)
 4000f3c:	10c01204 	addi	r3,r2,72
 4000f40:	e13fde04 	addi	r4,fp,-136
 4000f44:	00bfffc4 	movi	r2,-1
 4000f48:	e0bfeb15 	stw	r2,-84(fp)
 4000f4c:	01800904 	movi	r6,36
 4000f50:	200b883a 	mov	r5,r4
 4000f54:	1809883a 	mov	r4,r3
 4000f58:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
 4000f5c:	e0bfde03 	ldbu	r2,-136(fp)
 4000f60:	10803fcc 	andi	r2,r2,255
 4000f64:	10800098 	cmpnei	r2,r2,2
 4000f68:	1000091e 	bne	r2,zero,4000f90 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x14c>
 4000f6c:	e0bfe717 	ldw	r2,-100(fp)
 4000f70:	10801204 	addi	r2,r2,72
 4000f74:	1009883a 	mov	r4,r2
 4000f78:	4001a800 	call	4001a80 <_ZN11EthernetUDP10remotePortEv>
 4000f7c:	10bfffcc 	andi	r2,r2,65535
 4000f80:	108010d8 	cmpnei	r2,r2,67
 4000f84:	1000021e 	bne	r2,zero,4000f90 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x14c>
 4000f88:	00800044 	movi	r2,1
 4000f8c:	00000106 	br	4000f94 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x150>
 4000f90:	0005883a 	mov	r2,zero
 4000f94:	10803fcc 	andi	r2,r2,255
 4000f98:	10017c26 	beq	r2,zero,400158c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x748>
		transactionId = ntohl(fixedMsg.xid);
 4000f9c:	e0bfdf17 	ldw	r2,-132(fp)
 4000fa0:	1006963a 	slli	r3,r2,24
 4000fa4:	e0bfdf17 	ldw	r2,-132(fp)
 4000fa8:	1004923a 	slli	r2,r2,8
 4000fac:	10803fec 	andhi	r2,r2,255
 4000fb0:	1886b03a 	or	r3,r3,r2
 4000fb4:	e0bfdf17 	ldw	r2,-132(fp)
 4000fb8:	1004d23a 	srli	r2,r2,8
 4000fbc:	10bfc00c 	andi	r2,r2,65280
 4000fc0:	1886b03a 	or	r3,r3,r2
 4000fc4:	e0bfdf17 	ldw	r2,-132(fp)
 4000fc8:	1004d63a 	srli	r2,r2,24
 4000fcc:	1886b03a 	or	r3,r3,r2
 4000fd0:	e0bfe917 	ldw	r2,-92(fp)
 4000fd4:	10c00015 	stw	r3,0(r2)
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
 4000fd8:	e0bfe717 	ldw	r2,-100(fp)
 4000fdc:	10c00204 	addi	r3,r2,8
 4000fe0:	e0bfde04 	addi	r2,fp,-136
 4000fe4:	10800704 	addi	r2,r2,28
 4000fe8:	01800184 	movi	r6,6
 4000fec:	180b883a 	mov	r5,r3
 4000ff0:	1009883a 	mov	r4,r2
 4000ff4:	400b22c0 	call	400b22c <memcmp>
 4000ff8:	10000a1e 	bne	r2,zero,4001024 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1e0>
		  (transactionId < _dhcpInitialTransactionId) ||
 4000ffc:	e0bfe917 	ldw	r2,-92(fp)
 4001000:	10c00017 	ldw	r3,0(r2)
 4001004:	e0bfe717 	ldw	r2,-100(fp)
 4001008:	10800017 	ldw	r2,0(r2)
	RIP_MSG_FIXED fixedMsg;
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
		transactionId = ntohl(fixedMsg.xid);
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
 400100c:	18800536 	bltu	r3,r2,4001024 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1e0>
		  (transactionId < _dhcpInitialTransactionId) ||
		  (transactionId > _dhcpTransactionId)) {
 4001010:	e0bfe917 	ldw	r2,-92(fp)
 4001014:	10800017 	ldw	r2,0(r2)
 4001018:	e0ffe717 	ldw	r3,-100(fp)
 400101c:	18c00117 	ldw	r3,4(r3)
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
		transactionId = ntohl(fixedMsg.xid);
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
		  (transactionId < _dhcpInitialTransactionId) ||
 4001020:	1880082e 	bgeu	r3,r2,4001044 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x200>
		  (transactionId > _dhcpTransactionId)) {
			// Need to read the rest of the packet here regardless
			_dhcpUdpSocket.flush(); // FIXME
 4001024:	e0bfe717 	ldw	r2,-100(fp)
 4001028:	10c01204 	addi	r3,r2,72
 400102c:	00bfffc4 	movi	r2,-1
 4001030:	e0bfeb15 	stw	r2,-84(fp)
 4001034:	1809883a 	mov	r4,r3
 4001038:	40054240 	call	4005424 <_ZN11EthernetUDP5flushEv>
			return 0;
 400103c:	0005883a 	mov	r2,zero
 4001040:	00015906 	br	40015a8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x764>
		}

		memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);
 4001044:	e0bfe717 	ldw	r2,-100(fp)
 4001048:	10800384 	addi	r2,r2,14
 400104c:	e0ffe203 	ldbu	r3,-120(fp)
 4001050:	10c00005 	stb	r3,0(r2)
 4001054:	e0ffe243 	ldbu	r3,-119(fp)
 4001058:	10c00045 	stb	r3,1(r2)
 400105c:	e0ffe283 	ldbu	r3,-118(fp)
 4001060:	10c00085 	stb	r3,2(r2)
 4001064:	e0ffe2c3 	ldbu	r3,-117(fp)
 4001068:	10c000c5 	stb	r3,3(r2)

		// Skip to the option part
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));
 400106c:	e0bfe717 	ldw	r2,-100(fp)
 4001070:	11001204 	addi	r4,r2,72
 4001074:	00800904 	movi	r2,36
 4001078:	00c03c04 	movi	r3,240
 400107c:	1885c83a 	sub	r2,r3,r2
 4001080:	1007883a 	mov	r3,r2
 4001084:	00bfffc4 	movi	r2,-1
 4001088:	e0bfeb15 	stw	r2,-84(fp)
 400108c:	180d883a 	mov	r6,r3
 4001090:	000b883a 	mov	r5,zero
 4001094:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>

		while (_dhcpUdpSocket.available() > 0) {
 4001098:	e0bfe717 	ldw	r2,-100(fp)
 400109c:	10c01204 	addi	r3,r2,72
 40010a0:	00bfffc4 	movi	r2,-1
 40010a4:	e0bfeb15 	stw	r2,-84(fp)
 40010a8:	1809883a 	mov	r4,r3
 40010ac:	4004e400 	call	4004e40 <_ZN11EthernetUDP9availableEv>
 40010b0:	0084803a 	cmplt	r2,zero,r2
 40010b4:	10803fcc 	andi	r2,r2,255
 40010b8:	10013426 	beq	r2,zero,400158c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x748>
			switch (_dhcpUdpSocket.read()) {
 40010bc:	e0bfe717 	ldw	r2,-100(fp)
 40010c0:	10801204 	addi	r2,r2,72
 40010c4:	1009883a 	mov	r4,r2
 40010c8:	40052380 	call	4005238 <_ZN11EthernetUDP4readEv>
 40010cc:	10c00ce0 	cmpeqi	r3,r2,51
 40010d0:	1800f41e 	bne	r3,zero,40014a4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x660>
 40010d4:	10c00d08 	cmpgei	r3,r2,52
 40010d8:	18000b1e 	bne	r3,zero,4001108 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2c4>
 40010dc:	10c00060 	cmpeqi	r3,r2,1
 40010e0:	1800241e 	bne	r3,zero,4001174 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x330>
 40010e4:	10c00088 	cmpgei	r3,r2,2
 40010e8:	1800021e 	bne	r3,zero,40010f4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2b0>
 40010ec:	10012326 	beq	r2,zero,400157c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x738>
 40010f0:	00011306 	br	4001540 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6fc>
 40010f4:	10c000e0 	cmpeqi	r3,r2,3
 40010f8:	18002e1e 	bne	r3,zero,40011b4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x370>
 40010fc:	108001a0 	cmpeqi	r2,r2,6
 4001100:	1000441e 	bne	r2,zero,4001214 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x3d0>
 4001104:	00010e06 	br	4001540 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6fc>
 4001108:	10c00ea0 	cmpeqi	r3,r2,58
 400110c:	18009f1e 	bne	r3,zero,400138c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x548>
 4001110:	10c00ec8 	cmpgei	r3,r2,59
 4001114:	1800051e 	bne	r3,zero,400112c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e8>
 4001118:	10c00d60 	cmpeqi	r3,r2,53
 400111c:	1800081e 	bne	r3,zero,4001140 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2fc>
 4001120:	10800da0 	cmpeqi	r2,r2,54
 4001124:	1000531e 	bne	r2,zero,4001274 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x430>
 4001128:	00010506 	br	4001540 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6fc>
 400112c:	10c00ee0 	cmpeqi	r3,r2,59
 4001130:	1800b91e 	bne	r3,zero,4001418 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x5d4>
 4001134:	10803fe0 	cmpeqi	r2,r2,255
 4001138:	1001121e 	bne	r2,zero,4001584 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x740>
 400113c:	00010006 	br	4001540 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6fc>

			case padOption :
				break;

			case dhcpMessageType :
				opt_len = _dhcpUdpSocket.read();
 4001140:	e0bfe717 	ldw	r2,-100(fp)
 4001144:	10c01204 	addi	r3,r2,72
 4001148:	00bfffc4 	movi	r2,-1
 400114c:	e0bfeb15 	stw	r2,-84(fp)
 4001150:	1809883a 	mov	r4,r3
 4001154:	40052380 	call	4005238 <_ZN11EthernetUDP4readEv>
 4001158:	e0bfd845 	stb	r2,-159(fp)
				type = _dhcpUdpSocket.read();
 400115c:	e0bfe717 	ldw	r2,-100(fp)
 4001160:	10801204 	addi	r2,r2,72
 4001164:	1009883a 	mov	r4,r2
 4001168:	40052380 	call	4005238 <_ZN11EthernetUDP4readEv>
 400116c:	e0bfd805 	stb	r2,-160(fp)
				break;
 4001170:	00010506 	br	4001588 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x744>

			case subnetMask :
				opt_len = _dhcpUdpSocket.read();
 4001174:	e0bfe717 	ldw	r2,-100(fp)
 4001178:	10c01204 	addi	r3,r2,72
 400117c:	00bfffc4 	movi	r2,-1
 4001180:	e0bfeb15 	stw	r2,-84(fp)
 4001184:	1809883a 	mov	r4,r3
 4001188:	40052380 	call	4005238 <_ZN11EthernetUDP4readEv>
 400118c:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpSubnetMask, 4);
 4001190:	e0bfe717 	ldw	r2,-100(fp)
 4001194:	10c01204 	addi	r3,r2,72
 4001198:	e0bfe717 	ldw	r2,-100(fp)
 400119c:	10800484 	addi	r2,r2,18
 40011a0:	01800104 	movi	r6,4
 40011a4:	100b883a 	mov	r5,r2
 40011a8:	1809883a 	mov	r4,r3
 40011ac:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				break;
 40011b0:	0000f506 	br	4001588 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x744>

			case routersOnSubnet :
				opt_len = _dhcpUdpSocket.read();
 40011b4:	e0bfe717 	ldw	r2,-100(fp)
 40011b8:	10c01204 	addi	r3,r2,72
 40011bc:	00bfffc4 	movi	r2,-1
 40011c0:	e0bfeb15 	stw	r2,-84(fp)
 40011c4:	1809883a 	mov	r4,r3
 40011c8:	40052380 	call	4005238 <_ZN11EthernetUDP4readEv>
 40011cc:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpGatewayIp, 4);
 40011d0:	e0bfe717 	ldw	r2,-100(fp)
 40011d4:	10c01204 	addi	r3,r2,72
 40011d8:	e0bfe717 	ldw	r2,-100(fp)
 40011dc:	10800584 	addi	r2,r2,22
 40011e0:	01800104 	movi	r6,4
 40011e4:	100b883a 	mov	r5,r2
 40011e8:	1809883a 	mov	r4,r3
 40011ec:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
 40011f0:	e0bfe717 	ldw	r2,-100(fp)
 40011f4:	10c01204 	addi	r3,r2,72
 40011f8:	e0bfd843 	ldbu	r2,-159(fp)
 40011fc:	10bfff04 	addi	r2,r2,-4
 4001200:	100d883a 	mov	r6,r2
 4001204:	000b883a 	mov	r5,zero
 4001208:	1809883a 	mov	r4,r3
 400120c:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				break;
 4001210:	0000dd06 	br	4001588 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x744>

			case dns :
				opt_len = _dhcpUdpSocket.read();
 4001214:	e0bfe717 	ldw	r2,-100(fp)
 4001218:	10c01204 	addi	r3,r2,72
 400121c:	00bfffc4 	movi	r2,-1
 4001220:	e0bfeb15 	stw	r2,-84(fp)
 4001224:	1809883a 	mov	r4,r3
 4001228:	40052380 	call	4005238 <_ZN11EthernetUDP4readEv>
 400122c:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
 4001230:	e0bfe717 	ldw	r2,-100(fp)
 4001234:	10c01204 	addi	r3,r2,72
 4001238:	e0bfe717 	ldw	r2,-100(fp)
 400123c:	10800784 	addi	r2,r2,30
 4001240:	01800104 	movi	r6,4
 4001244:	100b883a 	mov	r5,r2
 4001248:	1809883a 	mov	r4,r3
 400124c:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
 4001250:	e0bfe717 	ldw	r2,-100(fp)
 4001254:	10c01204 	addi	r3,r2,72
 4001258:	e0bfd843 	ldbu	r2,-159(fp)
 400125c:	10bfff04 	addi	r2,r2,-4
 4001260:	100d883a 	mov	r6,r2
 4001264:	000b883a 	mov	r5,zero
 4001268:	1809883a 	mov	r4,r3
 400126c:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				break;
 4001270:	0000c506 	br	4001588 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x744>

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
 4001274:	e0bfe717 	ldw	r2,-100(fp)
 4001278:	10c01204 	addi	r3,r2,72
 400127c:	00bfffc4 	movi	r2,-1
 4001280:	e0bfeb15 	stw	r2,-84(fp)
 4001284:	1809883a 	mov	r4,r3
 4001288:	40052380 	call	4005238 <_ZN11EthernetUDP4readEv>
 400128c:	e0bfd845 	stb	r2,-159(fp)
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 4001290:	e0bfe717 	ldw	r2,-100(fp)
 4001294:	11000684 	addi	r4,r2,26
 4001298:	e0ffdd04 	addi	r3,fp,-140
 400129c:	00800044 	movi	r2,1
 40012a0:	e0bfeb15 	stw	r2,-84(fp)
 40012a4:	200b883a 	mov	r5,r4
 40012a8:	1809883a 	mov	r4,r3
 40012ac:	400724c0 	call	400724c <_ZN9IPAddressC1EPKh>
 40012b0:	e0bfdc04 	addi	r2,fp,-144
 40012b4:	000b883a 	mov	r5,zero
 40012b8:	1009883a 	mov	r4,r2
 40012bc:	40072180 	call	4007218 <_ZN9IPAddressC1Em>
 40012c0:	e0ffdc04 	addi	r3,fp,-144
 40012c4:	e0bfdd04 	addi	r2,fp,-140
 40012c8:	180b883a 	mov	r5,r3
 40012cc:	1009883a 	mov	r4,r2
 40012d0:	4001a200 	call	4001a20 <_ZNK9IPAddresseqERKS_>
 40012d4:	10803fcc 	andi	r2,r2,255
 40012d8:	1000121e 	bne	r2,zero,4001324 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e0>
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
 40012dc:	e0bfe717 	ldw	r2,-100(fp)
 40012e0:	10c00684 	addi	r3,r2,26
 40012e4:	e0bfdb04 	addi	r2,fp,-148
 40012e8:	180b883a 	mov	r5,r3
 40012ec:	1009883a 	mov	r4,r2
 40012f0:	400724c0 	call	400724c <_ZN9IPAddressC1EPKh>
 40012f4:	e0bfe717 	ldw	r2,-100(fp)
 40012f8:	10801204 	addi	r2,r2,72
 40012fc:	1009883a 	mov	r4,r2
 4001300:	4001a580 	call	4001a58 <_ZN11EthernetUDP8remoteIPEv>
 4001304:	e0bfda15 	stw	r2,-152(fp)
 4001308:	e0ffda04 	addi	r3,fp,-152
 400130c:	e0bfdb04 	addi	r2,fp,-148
 4001310:	180b883a 	mov	r5,r3
 4001314:	1009883a 	mov	r4,r2
 4001318:	4001a200 	call	4001a20 <_ZNK9IPAddresseqERKS_>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
				break;

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 400131c:	10803fcc 	andi	r2,r2,255
 4001320:	10000226 	beq	r2,zero,400132c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e8>
 4001324:	00800044 	movi	r2,1
 4001328:	00000106 	br	4001330 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ec>
 400132c:	0005883a 	mov	r2,zero
 4001330:	10803fcc 	andi	r2,r2,255
 4001334:	10000b26 	beq	r2,zero,4001364 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x520>
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
					_dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
 4001338:	e0bfe717 	ldw	r2,-100(fp)
 400133c:	10c01204 	addi	r3,r2,72
 4001340:	e0bfe717 	ldw	r2,-100(fp)
 4001344:	11000684 	addi	r4,r2,26
 4001348:	00bfffc4 	movi	r2,-1
 400134c:	e0bfeb15 	stw	r2,-84(fp)
 4001350:	01800104 	movi	r6,4
 4001354:	200b883a 	mov	r5,r4
 4001358:	1809883a 	mov	r4,r3
 400135c:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				} else {
					// Skip over the rest of this option
					_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
				}
				break;
 4001360:	00008906 	br	4001588 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x744>
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
					_dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
				} else {
					// Skip over the rest of this option
					_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
 4001364:	e0bfe717 	ldw	r2,-100(fp)
 4001368:	10c01204 	addi	r3,r2,72
 400136c:	e13fd843 	ldbu	r4,-159(fp)
 4001370:	00bfffc4 	movi	r2,-1
 4001374:	e0bfeb15 	stw	r2,-84(fp)
 4001378:	200d883a 	mov	r6,r4
 400137c:	000b883a 	mov	r5,zero
 4001380:	1809883a 	mov	r4,r3
 4001384:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				}
				break;
 4001388:	00007f06 	br	4001588 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x744>

			case dhcpT1value :
				opt_len = _dhcpUdpSocket.read();
 400138c:	e0bfe717 	ldw	r2,-100(fp)
 4001390:	10c01204 	addi	r3,r2,72
 4001394:	00bfffc4 	movi	r2,-1
 4001398:	e0bfeb15 	stw	r2,-84(fp)
 400139c:	1809883a 	mov	r4,r3
 40013a0:	40052380 	call	4005238 <_ZN11EthernetUDP4readEv>
 40013a4:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
 40013a8:	e0bfe717 	ldw	r2,-100(fp)
 40013ac:	10c01204 	addi	r3,r2,72
 40013b0:	e0bfe717 	ldw	r2,-100(fp)
 40013b4:	10800a04 	addi	r2,r2,40
 40013b8:	01800104 	movi	r6,4
 40013bc:	100b883a 	mov	r5,r2
 40013c0:	1809883a 	mov	r4,r3
 40013c4:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				_dhcpT1 = ntohl(_dhcpT1);
 40013c8:	e0bfe717 	ldw	r2,-100(fp)
 40013cc:	10800a17 	ldw	r2,40(r2)
 40013d0:	1006963a 	slli	r3,r2,24
 40013d4:	e0bfe717 	ldw	r2,-100(fp)
 40013d8:	10800a17 	ldw	r2,40(r2)
 40013dc:	1004923a 	slli	r2,r2,8
 40013e0:	10803fec 	andhi	r2,r2,255
 40013e4:	1886b03a 	or	r3,r3,r2
 40013e8:	e0bfe717 	ldw	r2,-100(fp)
 40013ec:	10800a17 	ldw	r2,40(r2)
 40013f0:	1004d23a 	srli	r2,r2,8
 40013f4:	10bfc00c 	andi	r2,r2,65280
 40013f8:	1886b03a 	or	r3,r3,r2
 40013fc:	e0bfe717 	ldw	r2,-100(fp)
 4001400:	10800a17 	ldw	r2,40(r2)
 4001404:	1004d63a 	srli	r2,r2,24
 4001408:	1886b03a 	or	r3,r3,r2
 400140c:	e0bfe717 	ldw	r2,-100(fp)
 4001410:	10c00a15 	stw	r3,40(r2)
				break;
 4001414:	00005c06 	br	4001588 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x744>

			case dhcpT2value :
				opt_len = _dhcpUdpSocket.read();
 4001418:	e0bfe717 	ldw	r2,-100(fp)
 400141c:	10c01204 	addi	r3,r2,72
 4001420:	00bfffc4 	movi	r2,-1
 4001424:	e0bfeb15 	stw	r2,-84(fp)
 4001428:	1809883a 	mov	r4,r3
 400142c:	40052380 	call	4005238 <_ZN11EthernetUDP4readEv>
 4001430:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
 4001434:	e0bfe717 	ldw	r2,-100(fp)
 4001438:	10c01204 	addi	r3,r2,72
 400143c:	e0bfe717 	ldw	r2,-100(fp)
 4001440:	10800b04 	addi	r2,r2,44
 4001444:	01800104 	movi	r6,4
 4001448:	100b883a 	mov	r5,r2
 400144c:	1809883a 	mov	r4,r3
 4001450:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				_dhcpT2 = ntohl(_dhcpT2);
 4001454:	e0bfe717 	ldw	r2,-100(fp)
 4001458:	10800b17 	ldw	r2,44(r2)
 400145c:	1006963a 	slli	r3,r2,24
 4001460:	e0bfe717 	ldw	r2,-100(fp)
 4001464:	10800b17 	ldw	r2,44(r2)
 4001468:	1004923a 	slli	r2,r2,8
 400146c:	10803fec 	andhi	r2,r2,255
 4001470:	1886b03a 	or	r3,r3,r2
 4001474:	e0bfe717 	ldw	r2,-100(fp)
 4001478:	10800b17 	ldw	r2,44(r2)
 400147c:	1004d23a 	srli	r2,r2,8
 4001480:	10bfc00c 	andi	r2,r2,65280
 4001484:	1886b03a 	or	r3,r3,r2
 4001488:	e0bfe717 	ldw	r2,-100(fp)
 400148c:	10800b17 	ldw	r2,44(r2)
 4001490:	1004d63a 	srli	r2,r2,24
 4001494:	1886b03a 	or	r3,r3,r2
 4001498:	e0bfe717 	ldw	r2,-100(fp)
 400149c:	10c00b15 	stw	r3,44(r2)
				break;
 40014a0:	00003906 	br	4001588 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x744>

			case dhcpIPaddrLeaseTime :
				opt_len = _dhcpUdpSocket.read();
 40014a4:	e0bfe717 	ldw	r2,-100(fp)
 40014a8:	10c01204 	addi	r3,r2,72
 40014ac:	00bfffc4 	movi	r2,-1
 40014b0:	e0bfeb15 	stw	r2,-84(fp)
 40014b4:	1809883a 	mov	r4,r3
 40014b8:	40052380 	call	4005238 <_ZN11EthernetUDP4readEv>
 40014bc:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
 40014c0:	e0bfe717 	ldw	r2,-100(fp)
 40014c4:	10c01204 	addi	r3,r2,72
 40014c8:	e0bfe717 	ldw	r2,-100(fp)
 40014cc:	10800904 	addi	r2,r2,36
 40014d0:	01800104 	movi	r6,4
 40014d4:	100b883a 	mov	r5,r2
 40014d8:	1809883a 	mov	r4,r3
 40014dc:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				_dhcpLeaseTime = ntohl(_dhcpLeaseTime);
 40014e0:	e0bfe717 	ldw	r2,-100(fp)
 40014e4:	10800917 	ldw	r2,36(r2)
 40014e8:	1006963a 	slli	r3,r2,24
 40014ec:	e0bfe717 	ldw	r2,-100(fp)
 40014f0:	10800917 	ldw	r2,36(r2)
 40014f4:	1004923a 	slli	r2,r2,8
 40014f8:	10803fec 	andhi	r2,r2,255
 40014fc:	1886b03a 	or	r3,r3,r2
 4001500:	e0bfe717 	ldw	r2,-100(fp)
 4001504:	10800917 	ldw	r2,36(r2)
 4001508:	1004d23a 	srli	r2,r2,8
 400150c:	10bfc00c 	andi	r2,r2,65280
 4001510:	1886b03a 	or	r3,r3,r2
 4001514:	e0bfe717 	ldw	r2,-100(fp)
 4001518:	10800917 	ldw	r2,36(r2)
 400151c:	1004d63a 	srli	r2,r2,24
 4001520:	1886b03a 	or	r3,r3,r2
 4001524:	e0bfe717 	ldw	r2,-100(fp)
 4001528:	10c00915 	stw	r3,36(r2)
				_renewInSec = _dhcpLeaseTime;
 400152c:	e0bfe717 	ldw	r2,-100(fp)
 4001530:	10c00917 	ldw	r3,36(r2)
 4001534:	e0bfe717 	ldw	r2,-100(fp)
 4001538:	10c00c15 	stw	r3,48(r2)
				break;
 400153c:	00001206 	br	4001588 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x744>

			default :
				opt_len = _dhcpUdpSocket.read();
 4001540:	e0bfe717 	ldw	r2,-100(fp)
 4001544:	10c01204 	addi	r3,r2,72
 4001548:	00bfffc4 	movi	r2,-1
 400154c:	e0bfeb15 	stw	r2,-84(fp)
 4001550:	1809883a 	mov	r4,r3
 4001554:	40052380 	call	4005238 <_ZN11EthernetUDP4readEv>
 4001558:	e0bfd845 	stb	r2,-159(fp)
				// Skip over the rest of this option
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
 400155c:	e0bfe717 	ldw	r2,-100(fp)
 4001560:	10801204 	addi	r2,r2,72
 4001564:	e0ffd843 	ldbu	r3,-159(fp)
 4001568:	180d883a 	mov	r6,r3
 400156c:	000b883a 	mov	r5,zero
 4001570:	1009883a 	mov	r4,r2
 4001574:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				break;
 4001578:	00000306 	br	4001588 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x744>
			switch (_dhcpUdpSocket.read()) {
			case endOption :
				break;

			case padOption :
				break;
 400157c:	0001883a 	nop
 4001580:	003ec506 	br	4001098 <__alt_data_end+0xfc001098>
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));

		while (_dhcpUdpSocket.available() > 0) {
			switch (_dhcpUdpSocket.read()) {
			case endOption :
				break;
 4001584:	0001883a 	nop
		memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);

		// Skip to the option part
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));

		while (_dhcpUdpSocket.available() > 0) {
 4001588:	003ec306 	br	4001098 <__alt_data_end+0xfc001098>
			}
		}
	}

	// Need to skip to end of the packet regardless here
	_dhcpUdpSocket.flush(); // FIXME
 400158c:	e0bfe717 	ldw	r2,-100(fp)
 4001590:	10c01204 	addi	r3,r2,72
 4001594:	00bfffc4 	movi	r2,-1
 4001598:	e0bfeb15 	stw	r2,-84(fp)
 400159c:	1809883a 	mov	r4,r3
 40015a0:	40054240 	call	4005424 <_ZN11EthernetUDP5flushEv>

	return type;
 40015a4:	e0bfd803 	ldbu	r2,-160(fp)
 40015a8:	e0bff705 	stb	r2,-36(fp)
 40015ac:	00000806 	br	40015d0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x78c>
 40015b0:	e7002804 	addi	fp,fp,160
 40015b4:	e0bfec17 	ldw	r2,-80(fp)
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
				break;

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 40015b8:	0001883a 	nop
 40015bc:	1007883a 	mov	r3,r2
 40015c0:	00bfffc4 	movi	r2,-1
 40015c4:	e0bfeb15 	stw	r2,-84(fp)
 40015c8:	1809883a 	mov	r4,r3
 40015cc:	400a8780 	call	400a878 <_Unwind_SjLj_Resume>
 40015d0:	e0bfea04 	addi	r2,fp,-88
 40015d4:	1009883a 	mov	r4,r2
 40015d8:	400a6940 	call	400a694 <_Unwind_SjLj_Unregister>

	// Need to skip to end of the packet regardless here
	_dhcpUdpSocket.flush(); // FIXME

	return type;
}
 40015dc:	e0bff703 	ldbu	r2,-36(fp)
 40015e0:	e6fff804 	addi	sp,fp,-32
 40015e4:	dfc00917 	ldw	ra,36(sp)
 40015e8:	df000817 	ldw	fp,32(sp)
 40015ec:	ddc00717 	ldw	r23,28(sp)
 40015f0:	dd800617 	ldw	r22,24(sp)
 40015f4:	dd400517 	ldw	r21,20(sp)
 40015f8:	dd000417 	ldw	r20,16(sp)
 40015fc:	dcc00317 	ldw	r19,12(sp)
 4001600:	dc800217 	ldw	r18,8(sp)
 4001604:	dc400117 	ldw	r17,4(sp)
 4001608:	dc000017 	ldw	r16,0(sp)
 400160c:	dec00a04 	addi	sp,sp,40
 4001610:	f800283a 	ret

04001614 <_ZN9DhcpClass10checkLeaseEv>:
    2/DHCP_CHECK_RENEW_OK: renew success
    3/DHCP_CHECK_REBIND_FAIL: rebind fail
    4/DHCP_CHECK_REBIND_OK: rebind success
*/
int DhcpClass::checkLease()
{
 4001614:	defffa04 	addi	sp,sp,-24
 4001618:	dfc00515 	stw	ra,20(sp)
 400161c:	df000415 	stw	fp,16(sp)
 4001620:	df000404 	addi	fp,sp,16
 4001624:	e13fff15 	stw	r4,-4(fp)
	int rc = DHCP_CHECK_NONE;
 4001628:	e03ffc15 	stw	zero,-16(fp)

	unsigned long now = millis();
 400162c:	40075380 	call	4007538 <_Z6millisv>
 4001630:	e0bffd15 	stw	r2,-12(fp)
	unsigned long elapsed = now - _lastCheckLeaseMillis;
 4001634:	e0bfff17 	ldw	r2,-4(fp)
 4001638:	10801017 	ldw	r2,64(r2)
 400163c:	e0fffd17 	ldw	r3,-12(fp)
 4001640:	1885c83a 	sub	r2,r3,r2
 4001644:	e0bffe15 	stw	r2,-8(fp)

	// if more then one sec passed, reduce the counters accordingly
	if (elapsed >= 1000) {
 4001648:	e0bffe17 	ldw	r2,-8(fp)
 400164c:	1080fa30 	cmpltui	r2,r2,1000
 4001650:	10002a1e 	bne	r2,zero,40016fc <_ZN9DhcpClass10checkLeaseEv+0xe8>
		// set the new timestamps
		_lastCheckLeaseMillis = now - (elapsed % 1000);
 4001654:	e0bffe17 	ldw	r2,-8(fp)
 4001658:	0140fa04 	movi	r5,1000
 400165c:	1009883a 	mov	r4,r2
 4001660:	400a41c0 	call	400a41c <__umodsi3>
 4001664:	1007883a 	mov	r3,r2
 4001668:	e0bffd17 	ldw	r2,-12(fp)
 400166c:	10c7c83a 	sub	r3,r2,r3
 4001670:	e0bfff17 	ldw	r2,-4(fp)
 4001674:	10c01015 	stw	r3,64(r2)
		elapsed = elapsed / 1000;
 4001678:	e0bffe17 	ldw	r2,-8(fp)
 400167c:	0140fa04 	movi	r5,1000
 4001680:	1009883a 	mov	r4,r2
 4001684:	400a3b80 	call	400a3b8 <__udivsi3>
 4001688:	e0bffe15 	stw	r2,-8(fp)

		// decrease the counters by elapsed seconds
		// we assume that the cycle time (elapsed) is fairly constant
		// if the remainder is less than cycle time * 2
		// do it early instead of late
		if (_renewInSec < elapsed * 2) {
 400168c:	e0bfff17 	ldw	r2,-4(fp)
 4001690:	10c00c17 	ldw	r3,48(r2)
 4001694:	e0bffe17 	ldw	r2,-8(fp)
 4001698:	1085883a 	add	r2,r2,r2
 400169c:	1880032e 	bgeu	r3,r2,40016ac <_ZN9DhcpClass10checkLeaseEv+0x98>
			_renewInSec = 0;
 40016a0:	e0bfff17 	ldw	r2,-4(fp)
 40016a4:	10000c15 	stw	zero,48(r2)
 40016a8:	00000606 	br	40016c4 <_ZN9DhcpClass10checkLeaseEv+0xb0>
		} else {
			_renewInSec -= elapsed;
 40016ac:	e0bfff17 	ldw	r2,-4(fp)
 40016b0:	10c00c17 	ldw	r3,48(r2)
 40016b4:	e0bffe17 	ldw	r2,-8(fp)
 40016b8:	1887c83a 	sub	r3,r3,r2
 40016bc:	e0bfff17 	ldw	r2,-4(fp)
 40016c0:	10c00c15 	stw	r3,48(r2)
		}
		if (_rebindInSec < elapsed * 2) {
 40016c4:	e0bfff17 	ldw	r2,-4(fp)
 40016c8:	10c00d17 	ldw	r3,52(r2)
 40016cc:	e0bffe17 	ldw	r2,-8(fp)
 40016d0:	1085883a 	add	r2,r2,r2
 40016d4:	1880032e 	bgeu	r3,r2,40016e4 <_ZN9DhcpClass10checkLeaseEv+0xd0>
			_rebindInSec = 0;
 40016d8:	e0bfff17 	ldw	r2,-4(fp)
 40016dc:	10000d15 	stw	zero,52(r2)
 40016e0:	00000606 	br	40016fc <_ZN9DhcpClass10checkLeaseEv+0xe8>
		} else {
			_rebindInSec -= elapsed;
 40016e4:	e0bfff17 	ldw	r2,-4(fp)
 40016e8:	10c00d17 	ldw	r3,52(r2)
 40016ec:	e0bffe17 	ldw	r2,-8(fp)
 40016f0:	1887c83a 	sub	r3,r3,r2
 40016f4:	e0bfff17 	ldw	r2,-4(fp)
 40016f8:	10c00d15 	stw	r3,52(r2)
		}
	}

	// if we have a lease but should renew, do it
	if (_renewInSec == 0 &&_dhcp_state == STATE_DHCP_LEASED) {
 40016fc:	e0bfff17 	ldw	r2,-4(fp)
 4001700:	10800c17 	ldw	r2,48(r2)
 4001704:	10000c1e 	bne	r2,zero,4001738 <_ZN9DhcpClass10checkLeaseEv+0x124>
 4001708:	e0bfff17 	ldw	r2,-4(fp)
 400170c:	10801103 	ldbu	r2,68(r2)
 4001710:	10803fcc 	andi	r2,r2,255
 4001714:	108000d8 	cmpnei	r2,r2,3
 4001718:	1000071e 	bne	r2,zero,4001738 <_ZN9DhcpClass10checkLeaseEv+0x124>
		_dhcp_state = STATE_DHCP_REREQUEST;
 400171c:	e0bfff17 	ldw	r2,-4(fp)
 4001720:	00c00104 	movi	r3,4
 4001724:	10c01105 	stb	r3,68(r2)
		rc = 1 + request_DHCP_lease();
 4001728:	e13fff17 	ldw	r4,-4(fp)
 400172c:	40006480 	call	4000648 <_ZN9DhcpClass18request_DHCP_leaseEv>
 4001730:	10800044 	addi	r2,r2,1
 4001734:	e0bffc15 	stw	r2,-16(fp)
	}

	// if we have a lease or is renewing but should bind, do it
	if (_rebindInSec == 0 && (_dhcp_state == STATE_DHCP_LEASED ||
 4001738:	e0bfff17 	ldw	r2,-4(fp)
 400173c:	10800d17 	ldw	r2,52(r2)
 4001740:	1000111e 	bne	r2,zero,4001788 <_ZN9DhcpClass10checkLeaseEv+0x174>
 4001744:	e0bfff17 	ldw	r2,-4(fp)
 4001748:	10801103 	ldbu	r2,68(r2)
 400174c:	10803fcc 	andi	r2,r2,255
 4001750:	108000e0 	cmpeqi	r2,r2,3
 4001754:	1000041e 	bne	r2,zero,4001768 <_ZN9DhcpClass10checkLeaseEv+0x154>
	  _dhcp_state == STATE_DHCP_START)) {
 4001758:	e0bfff17 	ldw	r2,-4(fp)
 400175c:	10801103 	ldbu	r2,68(r2)
		_dhcp_state = STATE_DHCP_REREQUEST;
		rc = 1 + request_DHCP_lease();
	}

	// if we have a lease or is renewing but should bind, do it
	if (_rebindInSec == 0 && (_dhcp_state == STATE_DHCP_LEASED ||
 4001760:	10803fcc 	andi	r2,r2,255
 4001764:	1000081e 	bne	r2,zero,4001788 <_ZN9DhcpClass10checkLeaseEv+0x174>
	  _dhcp_state == STATE_DHCP_START)) {
		// this should basically restart completely
		_dhcp_state = STATE_DHCP_START;
 4001768:	e0bfff17 	ldw	r2,-4(fp)
 400176c:	10001105 	stb	zero,68(r2)
		reset_DHCP_lease();
 4001770:	e13fff17 	ldw	r4,-4(fp)
 4001774:	40006040 	call	4000604 <_ZN9DhcpClass16reset_DHCP_leaseEv>
		rc = 3 + request_DHCP_lease();
 4001778:	e13fff17 	ldw	r4,-4(fp)
 400177c:	40006480 	call	4000648 <_ZN9DhcpClass18request_DHCP_leaseEv>
 4001780:	108000c4 	addi	r2,r2,3
 4001784:	e0bffc15 	stw	r2,-16(fp)
	}
	return rc;
 4001788:	e0bffc17 	ldw	r2,-16(fp)
}
 400178c:	e037883a 	mov	sp,fp
 4001790:	dfc00117 	ldw	ra,4(sp)
 4001794:	df000017 	ldw	fp,0(sp)
 4001798:	dec00204 	addi	sp,sp,8
 400179c:	f800283a 	ret

040017a0 <_ZN9DhcpClass10getLocalIpEv>:

IPAddress DhcpClass::getLocalIp()
{
 40017a0:	defffc04 	addi	sp,sp,-16
 40017a4:	dfc00315 	stw	ra,12(sp)
 40017a8:	df000215 	stw	fp,8(sp)
 40017ac:	df000204 	addi	fp,sp,8
 40017b0:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpLocalIp);
 40017b4:	e0bfff17 	ldw	r2,-4(fp)
 40017b8:	10800384 	addi	r2,r2,14
 40017bc:	100b883a 	mov	r5,r2
 40017c0:	e13ffe04 	addi	r4,fp,-8
 40017c4:	400724c0 	call	400724c <_ZN9IPAddressC1EPKh>
 40017c8:	e0bffe17 	ldw	r2,-8(fp)
}
 40017cc:	e037883a 	mov	sp,fp
 40017d0:	dfc00117 	ldw	ra,4(sp)
 40017d4:	df000017 	ldw	fp,0(sp)
 40017d8:	dec00204 	addi	sp,sp,8
 40017dc:	f800283a 	ret

040017e0 <_ZN9DhcpClass13getSubnetMaskEv>:

IPAddress DhcpClass::getSubnetMask()
{
 40017e0:	defffc04 	addi	sp,sp,-16
 40017e4:	dfc00315 	stw	ra,12(sp)
 40017e8:	df000215 	stw	fp,8(sp)
 40017ec:	df000204 	addi	fp,sp,8
 40017f0:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpSubnetMask);
 40017f4:	e0bfff17 	ldw	r2,-4(fp)
 40017f8:	10800484 	addi	r2,r2,18
 40017fc:	100b883a 	mov	r5,r2
 4001800:	e13ffe04 	addi	r4,fp,-8
 4001804:	400724c0 	call	400724c <_ZN9IPAddressC1EPKh>
 4001808:	e0bffe17 	ldw	r2,-8(fp)
}
 400180c:	e037883a 	mov	sp,fp
 4001810:	dfc00117 	ldw	ra,4(sp)
 4001814:	df000017 	ldw	fp,0(sp)
 4001818:	dec00204 	addi	sp,sp,8
 400181c:	f800283a 	ret

04001820 <_ZN9DhcpClass12getGatewayIpEv>:

IPAddress DhcpClass::getGatewayIp()
{
 4001820:	defffc04 	addi	sp,sp,-16
 4001824:	dfc00315 	stw	ra,12(sp)
 4001828:	df000215 	stw	fp,8(sp)
 400182c:	df000204 	addi	fp,sp,8
 4001830:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpGatewayIp);
 4001834:	e0bfff17 	ldw	r2,-4(fp)
 4001838:	10800584 	addi	r2,r2,22
 400183c:	100b883a 	mov	r5,r2
 4001840:	e13ffe04 	addi	r4,fp,-8
 4001844:	400724c0 	call	400724c <_ZN9IPAddressC1EPKh>
 4001848:	e0bffe17 	ldw	r2,-8(fp)
}
 400184c:	e037883a 	mov	sp,fp
 4001850:	dfc00117 	ldw	ra,4(sp)
 4001854:	df000017 	ldw	fp,0(sp)
 4001858:	dec00204 	addi	sp,sp,8
 400185c:	f800283a 	ret

04001860 <_ZN9DhcpClass15getDhcpServerIpEv>:

IPAddress DhcpClass::getDhcpServerIp()
{
 4001860:	defffc04 	addi	sp,sp,-16
 4001864:	dfc00315 	stw	ra,12(sp)
 4001868:	df000215 	stw	fp,8(sp)
 400186c:	df000204 	addi	fp,sp,8
 4001870:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpDhcpServerIp);
 4001874:	e0bfff17 	ldw	r2,-4(fp)
 4001878:	10800684 	addi	r2,r2,26
 400187c:	100b883a 	mov	r5,r2
 4001880:	e13ffe04 	addi	r4,fp,-8
 4001884:	400724c0 	call	400724c <_ZN9IPAddressC1EPKh>
 4001888:	e0bffe17 	ldw	r2,-8(fp)
}
 400188c:	e037883a 	mov	sp,fp
 4001890:	dfc00117 	ldw	ra,4(sp)
 4001894:	df000017 	ldw	fp,0(sp)
 4001898:	dec00204 	addi	sp,sp,8
 400189c:	f800283a 	ret

040018a0 <_ZN9DhcpClass14getDnsServerIpEv>:

IPAddress DhcpClass::getDnsServerIp()
{
 40018a0:	defffc04 	addi	sp,sp,-16
 40018a4:	dfc00315 	stw	ra,12(sp)
 40018a8:	df000215 	stw	fp,8(sp)
 40018ac:	df000204 	addi	fp,sp,8
 40018b0:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpDnsServerIp);
 40018b4:	e0bfff17 	ldw	r2,-4(fp)
 40018b8:	10800784 	addi	r2,r2,30
 40018bc:	100b883a 	mov	r5,r2
 40018c0:	e13ffe04 	addi	r4,fp,-8
 40018c4:	400724c0 	call	400724c <_ZN9IPAddressC1EPKh>
 40018c8:	e0bffe17 	ldw	r2,-8(fp)
}
 40018cc:	e037883a 	mov	sp,fp
 40018d0:	dfc00117 	ldw	ra,4(sp)
 40018d4:	df000017 	ldw	fp,0(sp)
 40018d8:	dec00204 	addi	sp,sp,8
 40018dc:	f800283a 	ret

040018e0 <_ZN9DhcpClass9printByteEPch>:

void DhcpClass::printByte(char * buf, uint8_t n )
{
 40018e0:	defff904 	addi	sp,sp,-28
 40018e4:	df000615 	stw	fp,24(sp)
 40018e8:	df000604 	addi	fp,sp,24
 40018ec:	e13ffd15 	stw	r4,-12(fp)
 40018f0:	e17ffe15 	stw	r5,-8(fp)
 40018f4:	3005883a 	mov	r2,r6
 40018f8:	e0bfff05 	stb	r2,-4(fp)
	char *str = &buf[1];
 40018fc:	e0bffe17 	ldw	r2,-8(fp)
 4001900:	10800044 	addi	r2,r2,1
 4001904:	e0bffa15 	stw	r2,-24(fp)
	buf[0]='0';
 4001908:	e0bffe17 	ldw	r2,-8(fp)
 400190c:	00c00c04 	movi	r3,48
 4001910:	10c00005 	stb	r3,0(r2)
	do {
		unsigned long m = n;
 4001914:	e0bfff03 	ldbu	r2,-4(fp)
 4001918:	e0bffb15 	stw	r2,-20(fp)
		n /= 16;
 400191c:	e0bfff03 	ldbu	r2,-4(fp)
 4001920:	1004d13a 	srli	r2,r2,4
 4001924:	e0bfff05 	stb	r2,-4(fp)
		char c = m - 16 * n;
 4001928:	e0bffb17 	ldw	r2,-20(fp)
 400192c:	1007883a 	mov	r3,r2
 4001930:	e0bfff03 	ldbu	r2,-4(fp)
 4001934:	1004913a 	slli	r2,r2,4
 4001938:	1885c83a 	sub	r2,r3,r2
 400193c:	e0bffc05 	stb	r2,-16(fp)
		*str-- = c < 10 ? c + '0' : c + 'A' - 10;
 4001940:	e0bffa17 	ldw	r2,-24(fp)
 4001944:	10ffffc4 	addi	r3,r2,-1
 4001948:	e0fffa15 	stw	r3,-24(fp)
 400194c:	e0fffc07 	ldb	r3,-16(fp)
 4001950:	18c00288 	cmpgei	r3,r3,10
 4001954:	1800031e 	bne	r3,zero,4001964 <_ZN9DhcpClass9printByteEPch+0x84>
 4001958:	e0fffc03 	ldbu	r3,-16(fp)
 400195c:	18c00c04 	addi	r3,r3,48
 4001960:	00000206 	br	400196c <_ZN9DhcpClass9printByteEPch+0x8c>
 4001964:	e0fffc03 	ldbu	r3,-16(fp)
 4001968:	18c00dc4 	addi	r3,r3,55
 400196c:	10c00005 	stb	r3,0(r2)

void DhcpClass::printByte(char * buf, uint8_t n )
{
	char *str = &buf[1];
	buf[0]='0';
	do {
 4001970:	e0bfff03 	ldbu	r2,-4(fp)
 4001974:	10000126 	beq	r2,zero,400197c <_ZN9DhcpClass9printByteEPch+0x9c>
 4001978:	003fe606 	br	4001914 <__alt_data_end+0xfc001914>
		unsigned long m = n;
		n /= 16;
		char c = m - 16 * n;
		*str-- = c < 10 ? c + '0' : c + 'A' - 10;
	} while(n);
}
 400197c:	0001883a 	nop
 4001980:	e037883a 	mov	sp,fp
 4001984:	df000017 	ldw	fp,0(sp)
 4001988:	dec00104 	addi	sp,sp,4
 400198c:	f800283a 	ret

04001990 <_Z41__static_initialization_and_destruction_0ii>:
 4001990:	defffb04 	addi	sp,sp,-20
 4001994:	dfc00415 	stw	ra,16(sp)
 4001998:	df000315 	stw	fp,12(sp)
 400199c:	df000304 	addi	fp,sp,12
 40019a0:	e13ffe15 	stw	r4,-8(fp)
 40019a4:	e17fff15 	stw	r5,-4(fp)
 40019a8:	e0bffe17 	ldw	r2,-8(fp)
 40019ac:	10800058 	cmpnei	r2,r2,1
 40019b0:	1000091e 	bne	r2,zero,40019d8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40019b4:	e0ffff17 	ldw	r3,-4(fp)
 40019b8:	00bfffd4 	movui	r2,65535
 40019bc:	1880061e 	bne	r3,r2,40019d8 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 40019c0:	d8000015 	stw	zero,0(sp)
 40019c4:	000f883a 	mov	r7,zero
 40019c8:	000d883a 	mov	r6,zero
 40019cc:	000b883a 	mov	r5,zero
 40019d0:	d13c9a04 	addi	r4,gp,-3480
 40019d4:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
 40019d8:	0001883a 	nop
 40019dc:	e037883a 	mov	sp,fp
 40019e0:	dfc00117 	ldw	ra,4(sp)
 40019e4:	df000017 	ldw	fp,0(sp)
 40019e8:	dec00204 	addi	sp,sp,8
 40019ec:	f800283a 	ret

040019f0 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
 40019f0:	defffe04 	addi	sp,sp,-8
 40019f4:	dfc00115 	stw	ra,4(sp)
 40019f8:	df000015 	stw	fp,0(sp)
 40019fc:	d839883a 	mov	fp,sp
 4001a00:	017fffd4 	movui	r5,65535
 4001a04:	01000044 	movi	r4,1
 4001a08:	40019900 	call	4001990 <_Z41__static_initialization_and_destruction_0ii>
 4001a0c:	e037883a 	mov	sp,fp
 4001a10:	dfc00117 	ldw	ra,4(sp)
 4001a14:	df000017 	ldw	fp,0(sp)
 4001a18:	dec00204 	addi	sp,sp,8
 4001a1c:	f800283a 	ret

04001a20 <_ZNK9IPAddresseqERKS_>:
    bool fromString(const char *address);

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() const { return _address.dword; };
    bool operator==(const IPAddress& addr) const { return _address.dword == addr._address.dword; };
 4001a20:	defffd04 	addi	sp,sp,-12
 4001a24:	df000215 	stw	fp,8(sp)
 4001a28:	df000204 	addi	fp,sp,8
 4001a2c:	e13ffe15 	stw	r4,-8(fp)
 4001a30:	e17fff15 	stw	r5,-4(fp)
 4001a34:	e0bffe17 	ldw	r2,-8(fp)
 4001a38:	10c00017 	ldw	r3,0(r2)
 4001a3c:	e0bfff17 	ldw	r2,-4(fp)
 4001a40:	10800017 	ldw	r2,0(r2)
 4001a44:	1885003a 	cmpeq	r2,r3,r2
 4001a48:	e037883a 	mov	sp,fp
 4001a4c:	df000017 	ldw	fp,0(sp)
 4001a50:	dec00104 	addi	sp,sp,4
 4001a54:	f800283a 	ret

04001a58 <_ZN11EthernetUDP8remoteIPEv>:
	// Return the next byte from the current packet without moving on to the next byte
	virtual int peek();
	virtual void flush(); // Finish reading the current packet

	// Return the IP address of the host who sent the current incoming packet
	virtual IPAddress remoteIP() { return _remoteIP; };
 4001a58:	defffe04 	addi	sp,sp,-8
 4001a5c:	df000115 	stw	fp,4(sp)
 4001a60:	df000104 	addi	fp,sp,4
 4001a64:	e13fff15 	stw	r4,-4(fp)
 4001a68:	e0bfff17 	ldw	r2,-4(fp)
 4001a6c:	10800217 	ldw	r2,8(r2)
 4001a70:	e037883a 	mov	sp,fp
 4001a74:	df000017 	ldw	fp,0(sp)
 4001a78:	dec00104 	addi	sp,sp,4
 4001a7c:	f800283a 	ret

04001a80 <_ZN11EthernetUDP10remotePortEv>:
	// Return the port of the host who sent the current incoming packet
	virtual uint16_t remotePort() { return _remotePort; };
 4001a80:	defffe04 	addi	sp,sp,-8
 4001a84:	df000115 	stw	fp,4(sp)
 4001a88:	df000104 	addi	fp,sp,4
 4001a8c:	e13fff15 	stw	r4,-4(fp)
 4001a90:	e0bfff17 	ldw	r2,-4(fp)
 4001a94:	1080030b 	ldhu	r2,12(r2)
 4001a98:	e037883a 	mov	sp,fp
 4001a9c:	df000017 	ldw	fp,0(sp)
 4001aa0:	dec00104 	addi	sp,sp,4
 4001aa4:	f800283a 	ret

04001aa8 <_ZN9DNSClient5beginERK9IPAddress>:
#define INVALID_SERVER   -2
#define TRUNCATED        -3
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
 4001aa8:	defffd04 	addi	sp,sp,-12
 4001aac:	df000215 	stw	fp,8(sp)
 4001ab0:	df000204 	addi	fp,sp,8
 4001ab4:	e13ffe15 	stw	r4,-8(fp)
 4001ab8:	e17fff15 	stw	r5,-4(fp)
	iDNSServer = aDNSServer;
 4001abc:	e0bffe17 	ldw	r2,-8(fp)
 4001ac0:	e0ffff17 	ldw	r3,-4(fp)
 4001ac4:	18c00017 	ldw	r3,0(r3)
 4001ac8:	10c00015 	stw	r3,0(r2)
	iRequestId = 0;
 4001acc:	e0bffe17 	ldw	r2,-8(fp)
 4001ad0:	1000010d 	sth	zero,4(r2)
}
 4001ad4:	0001883a 	nop
 4001ad8:	e037883a 	mov	sp,fp
 4001adc:	df000017 	ldw	fp,0(sp)
 4001ae0:	dec00104 	addi	sp,sp,4
 4001ae4:	f800283a 	ret

04001ae8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:


int DNSClient::inet_aton(const char* address, IPAddress& result)
{
 4001ae8:	defffa04 	addi	sp,sp,-24
 4001aec:	dfc00515 	stw	ra,20(sp)
 4001af0:	df000415 	stw	fp,16(sp)
 4001af4:	df000404 	addi	fp,sp,16
 4001af8:	e13ffd15 	stw	r4,-12(fp)
 4001afc:	e17ffe15 	stw	r5,-8(fp)
 4001b00:	e1bfff15 	stw	r6,-4(fp)
	uint16_t acc = 0; // Accumulator
 4001b04:	e03ffc0d 	sth	zero,-16(fp)
	uint8_t dots = 0;
 4001b08:	e03ffc85 	stb	zero,-14(fp)

	while (*address) {
 4001b0c:	e0bffe17 	ldw	r2,-8(fp)
 4001b10:	10800003 	ldbu	r2,0(r2)
 4001b14:	10803fcc 	andi	r2,r2,255
 4001b18:	1080201c 	xori	r2,r2,128
 4001b1c:	10bfe004 	addi	r2,r2,-128
 4001b20:	10002d26 	beq	r2,zero,4001bd8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xf0>
		char c = *address++;
 4001b24:	e0bffe17 	ldw	r2,-8(fp)
 4001b28:	10c00044 	addi	r3,r2,1
 4001b2c:	e0fffe15 	stw	r3,-8(fp)
 4001b30:	10800003 	ldbu	r2,0(r2)
 4001b34:	e0bffcc5 	stb	r2,-13(fp)
		if (c >= '0' && c <= '9') {
 4001b38:	e0bffcc7 	ldb	r2,-13(fp)
 4001b3c:	10800c10 	cmplti	r2,r2,48
 4001b40:	10000f1e 	bne	r2,zero,4001b80 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x98>
 4001b44:	e0bffcc7 	ldb	r2,-13(fp)
 4001b48:	10800e88 	cmpgei	r2,r2,58
 4001b4c:	10000c1e 	bne	r2,zero,4001b80 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x98>
			acc = acc * 10 + (c - '0');
 4001b50:	e0bffc0b 	ldhu	r2,-16(fp)
 4001b54:	108002a4 	muli	r2,r2,10
 4001b58:	1007883a 	mov	r3,r2
 4001b5c:	e0bffcc7 	ldb	r2,-13(fp)
 4001b60:	1885883a 	add	r2,r3,r2
 4001b64:	10bff404 	addi	r2,r2,-48
 4001b68:	e0bffc0d 	sth	r2,-16(fp)
			if (acc > 255) {
 4001b6c:	e0bffc0b 	ldhu	r2,-16(fp)
 4001b70:	10804030 	cmpltui	r2,r2,256
 4001b74:	1000171e 	bne	r2,zero,4001bd4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xec>
				// Value out of [0..255] range
				return 0;
 4001b78:	0005883a 	mov	r2,zero
 4001b7c:	00002106 	br	4001c04 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
			}
		} else if (c == '.') {
 4001b80:	e0bffcc7 	ldb	r2,-13(fp)
 4001b84:	10800b98 	cmpnei	r2,r2,46
 4001b88:	1000101e 	bne	r2,zero,4001bcc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xe4>
			if (dots == 3) {
 4001b8c:	e0bffc83 	ldbu	r2,-14(fp)
 4001b90:	108000d8 	cmpnei	r2,r2,3
 4001b94:	1000021e 	bne	r2,zero,4001ba0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xb8>
				// Too much dots (there must be 3 dots)
				return 0;
 4001b98:	0005883a 	mov	r2,zero
 4001b9c:	00001906 	br	4001c04 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
			}
			result[dots++] = acc;
 4001ba0:	e0bffc83 	ldbu	r2,-14(fp)
 4001ba4:	10c00044 	addi	r3,r2,1
 4001ba8:	e0fffc85 	stb	r3,-14(fp)
 4001bac:	10803fcc 	andi	r2,r2,255
 4001bb0:	100b883a 	mov	r5,r2
 4001bb4:	e13fff17 	ldw	r4,-4(fp)
 4001bb8:	40025c40 	call	40025c4 <_ZN9IPAddressixEi>
 4001bbc:	e0fffc0b 	ldhu	r3,-16(fp)
 4001bc0:	10c00005 	stb	r3,0(r2)
			acc = 0;
 4001bc4:	e03ffc0d 	sth	zero,-16(fp)
 4001bc8:	003fd006 	br	4001b0c <__alt_data_end+0xfc001b0c>
		} else {
			// Invalid char
			return 0;
 4001bcc:	0005883a 	mov	r2,zero
 4001bd0:	00000c06 	br	4001c04 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
int DNSClient::inet_aton(const char* address, IPAddress& result)
{
	uint16_t acc = 0; // Accumulator
	uint8_t dots = 0;

	while (*address) {
 4001bd4:	003fcd06 	br	4001b0c <__alt_data_end+0xfc001b0c>
			// Invalid char
			return 0;
		}
	}

	if (dots != 3) {
 4001bd8:	e0bffc83 	ldbu	r2,-14(fp)
 4001bdc:	108000e0 	cmpeqi	r2,r2,3
 4001be0:	1000021e 	bne	r2,zero,4001bec <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x104>
		// Too few dots (there must be 3 dots)
		return 0;
 4001be4:	0005883a 	mov	r2,zero
 4001be8:	00000606 	br	4001c04 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
	}
	result[3] = acc;
 4001bec:	014000c4 	movi	r5,3
 4001bf0:	e13fff17 	ldw	r4,-4(fp)
 4001bf4:	40025c40 	call	40025c4 <_ZN9IPAddressixEi>
 4001bf8:	e0fffc0b 	ldhu	r3,-16(fp)
 4001bfc:	10c00005 	stb	r3,0(r2)
	return 1;
 4001c00:	00800044 	movi	r2,1
}
 4001c04:	e037883a 	mov	sp,fp
 4001c08:	dfc00117 	ldw	ra,4(sp)
 4001c0c:	df000017 	ldw	fp,0(sp)
 4001c10:	dec00204 	addi	sp,sp,8
 4001c14:	f800283a 	ret

04001c18 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>:

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult, uint16_t timeout)
{
 4001c18:	defff604 	addi	sp,sp,-40
 4001c1c:	dfc00915 	stw	ra,36(sp)
 4001c20:	df000815 	stw	fp,32(sp)
 4001c24:	dc000715 	stw	r16,28(sp)
 4001c28:	df000804 	addi	fp,sp,32
 4001c2c:	e13ffb15 	stw	r4,-20(fp)
 4001c30:	e17ffc15 	stw	r5,-16(fp)
 4001c34:	e1bffd15 	stw	r6,-12(fp)
 4001c38:	3805883a 	mov	r2,r7
 4001c3c:	e0bffe0d 	sth	r2,-8(fp)
	int ret = 0;
 4001c40:	e03ff815 	stw	zero,-32(fp)

	// See if it's a numeric IP address
	if (inet_aton(aHostname, aResult)) {
 4001c44:	e1bffd17 	ldw	r6,-12(fp)
 4001c48:	e17ffc17 	ldw	r5,-16(fp)
 4001c4c:	e13ffb17 	ldw	r4,-20(fp)
 4001c50:	4001ae80 	call	4001ae8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
 4001c54:	1004c03a 	cmpne	r2,r2,zero
 4001c58:	10803fcc 	andi	r2,r2,255
 4001c5c:	10000226 	beq	r2,zero,4001c68 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x50>
		// It is, our work here is done
		return 1;
 4001c60:	00800044 	movi	r2,1
 4001c64:	00004a06 	br	4001d90 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x178>
	}

	// Check we've got a valid DNS server to use
	if (iDNSServer == INADDR_NONE) {
 4001c68:	e0bffb17 	ldw	r2,-20(fp)
 4001c6c:	d17c9b04 	addi	r5,gp,-3476
 4001c70:	1009883a 	mov	r4,r2
 4001c74:	4001a200 	call	4001a20 <_ZNK9IPAddresseqERKS_>
 4001c78:	10803fcc 	andi	r2,r2,255
 4001c7c:	10000226 	beq	r2,zero,4001c88 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x70>
		return INVALID_SERVER;
 4001c80:	00bfff84 	movi	r2,-2
 4001c84:	00004206 	br	4001d90 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x178>
	}
	
	// Find a socket to use
	if (iUdp.begin(1024+(millis() & 0xF)) == 1) {
 4001c88:	e0bffb17 	ldw	r2,-20(fp)
 4001c8c:	14000204 	addi	r16,r2,8
 4001c90:	40075380 	call	4007538 <_Z6millisv>
 4001c94:	108003cc 	andi	r2,r2,15
 4001c98:	10810004 	addi	r2,r2,1024
 4001c9c:	10bfffcc 	andi	r2,r2,65535
 4001ca0:	100b883a 	mov	r5,r2
 4001ca4:	8009883a 	mov	r4,r16
 4001ca8:	4004d980 	call	4004d98 <_ZN11EthernetUDP5beginEt>
 4001cac:	10803fcc 	andi	r2,r2,255
 4001cb0:	10800060 	cmpeqi	r2,r2,1
 4001cb4:	10803fcc 	andi	r2,r2,255
 4001cb8:	10003426 	beq	r2,zero,4001d8c <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x174>
		// Try up to three times
		int retries = 0;
 4001cbc:	e03ffa15 	stw	zero,-24(fp)
		// while ((retries < 3) && (ret <= 0)) {
		// Send DNS request
		ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
 4001cc0:	e0bffb17 	ldw	r2,-20(fp)
 4001cc4:	10c00204 	addi	r3,r2,8
 4001cc8:	e0bffb17 	ldw	r2,-20(fp)
 4001ccc:	01800d44 	movi	r6,53
 4001cd0:	11400017 	ldw	r5,0(r2)
 4001cd4:	1809883a 	mov	r4,r3
 4001cd8:	4004f900 	call	4004f90 <_ZN11EthernetUDP11beginPacketE9IPAddresst>
 4001cdc:	e0bff815 	stw	r2,-32(fp)
		if (ret != 0) {
 4001ce0:	e0bff817 	ldw	r2,-32(fp)
 4001ce4:	10002226 	beq	r2,zero,4001d70 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
			// Now output the request data
			ret = BuildRequest(aHostname);
 4001ce8:	e17ffc17 	ldw	r5,-16(fp)
 4001cec:	e13ffb17 	ldw	r4,-20(fp)
 4001cf0:	4001da80 	call	4001da8 <_ZN9DNSClient12BuildRequestEPKc>
 4001cf4:	10bfffcc 	andi	r2,r2,65535
 4001cf8:	e0bff815 	stw	r2,-32(fp)
			if (ret != 0) {
 4001cfc:	e0bff817 	ldw	r2,-32(fp)
 4001d00:	10001b26 	beq	r2,zero,4001d70 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
				// And finally send the request
				ret = iUdp.endPacket();
 4001d04:	e0bffb17 	ldw	r2,-20(fp)
 4001d08:	10800204 	addi	r2,r2,8
 4001d0c:	1009883a 	mov	r4,r2
 4001d10:	40050100 	call	4005010 <_ZN11EthernetUDP9endPacketEv>
 4001d14:	e0bff815 	stw	r2,-32(fp)
				if (ret != 0) {
 4001d18:	e0bff817 	ldw	r2,-32(fp)
 4001d1c:	10001426 	beq	r2,zero,4001d70 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
					// Now wait for a response
					int wait_retries = 0;
 4001d20:	e03ff915 	stw	zero,-28(fp)
					ret = TIMED_OUT;
 4001d24:	00bfffc4 	movi	r2,-1
 4001d28:	e0bff815 	stw	r2,-32(fp)
					while ((wait_retries < 3) && (ret == TIMED_OUT)) {
 4001d2c:	e0bff917 	ldw	r2,-28(fp)
 4001d30:	108000c8 	cmpgei	r2,r2,3
 4001d34:	10000e1e 	bne	r2,zero,4001d70 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
 4001d38:	e0bff817 	ldw	r2,-32(fp)
 4001d3c:	10bfffd8 	cmpnei	r2,r2,-1
 4001d40:	10000b1e 	bne	r2,zero,4001d70 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
						ret = ProcessResponse(timeout, aResult);
 4001d44:	e0bffe0b 	ldhu	r2,-8(fp)
 4001d48:	e1bffd17 	ldw	r6,-12(fp)
 4001d4c:	100b883a 	mov	r5,r2
 4001d50:	e13ffb17 	ldw	r4,-20(fp)
 4001d54:	4001ff00 	call	4001ff0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress>
 4001d58:	10bfffcc 	andi	r2,r2,65535
 4001d5c:	e0bff815 	stw	r2,-32(fp)
						wait_retries++;
 4001d60:	e0bff917 	ldw	r2,-28(fp)
 4001d64:	10800044 	addi	r2,r2,1
 4001d68:	e0bff915 	stw	r2,-28(fp)
				ret = iUdp.endPacket();
				if (ret != 0) {
					// Now wait for a response
					int wait_retries = 0;
					ret = TIMED_OUT;
					while ((wait_retries < 3) && (ret == TIMED_OUT)) {
 4001d6c:	003fef06 	br	4001d2c <__alt_data_end+0xfc001d2c>
						wait_retries++;
					}
				}
			}
		}
		retries++;
 4001d70:	e0bffa17 	ldw	r2,-24(fp)
 4001d74:	10800044 	addi	r2,r2,1
 4001d78:	e0bffa15 	stw	r2,-24(fp)
		//}

		// We're done with the socket now
		iUdp.stop();
 4001d7c:	e0bffb17 	ldw	r2,-20(fp)
 4001d80:	10800204 	addi	r2,r2,8
 4001d84:	1009883a 	mov	r4,r2
 4001d88:	4004e6c0 	call	4004e6c <_ZN11EthernetUDP4stopEv>
	}

	return ret;
 4001d8c:	e0bff817 	ldw	r2,-32(fp)
}
 4001d90:	e6ffff04 	addi	sp,fp,-4
 4001d94:	dfc00217 	ldw	ra,8(sp)
 4001d98:	df000117 	ldw	fp,4(sp)
 4001d9c:	dc000017 	ldw	r16,0(sp)
 4001da0:	dec00304 	addi	sp,sp,12
 4001da4:	f800283a 	ret

04001da8 <_ZN9DNSClient12BuildRequestEPKc>:

uint16_t DNSClient::BuildRequest(const char* aName)
{
 4001da8:	defff904 	addi	sp,sp,-28
 4001dac:	dfc00615 	stw	ra,24(sp)
 4001db0:	df000515 	stw	fp,20(sp)
 4001db4:	df000504 	addi	fp,sp,20
 4001db8:	e13ffe15 	stw	r4,-8(fp)
 4001dbc:	e17fff15 	stw	r5,-4(fp)
	//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	//    |                    ARCOUNT                    |
	//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// As we only support one request at a time at present, we can simplify
	// some of this header
	iRequestId = millis(); // generate a random ID
 4001dc0:	40075380 	call	4007538 <_Z6millisv>
 4001dc4:	1007883a 	mov	r3,r2
 4001dc8:	e0bffe17 	ldw	r2,-8(fp)
 4001dcc:	10c0010d 	sth	r3,4(r2)
	uint16_t twoByteBuffer;

	// FIXME We should also check that there's enough space available to write to, rather
	// FIXME than assume there's enough space (as the code does at present)
	iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
 4001dd0:	e0bffe17 	ldw	r2,-8(fp)
 4001dd4:	10c00204 	addi	r3,r2,8
 4001dd8:	e0bffe17 	ldw	r2,-8(fp)
 4001ddc:	10800104 	addi	r2,r2,4
 4001de0:	01800084 	movi	r6,2
 4001de4:	100b883a 	mov	r5,r2
 4001de8:	1809883a 	mov	r4,r3
 4001dec:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
 4001df0:	00800044 	movi	r2,1
 4001df4:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4001df8:	e0bffe17 	ldw	r2,-8(fp)
 4001dfc:	10800204 	addi	r2,r2,8
 4001e00:	e0fffd04 	addi	r3,fp,-12
 4001e04:	01800084 	movi	r6,2
 4001e08:	180b883a 	mov	r5,r3
 4001e0c:	1009883a 	mov	r4,r2
 4001e10:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(1);  // One question record
 4001e14:	00804004 	movi	r2,256
 4001e18:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4001e1c:	e0bffe17 	ldw	r2,-8(fp)
 4001e20:	10800204 	addi	r2,r2,8
 4001e24:	e0fffd04 	addi	r3,fp,-12
 4001e28:	01800084 	movi	r6,2
 4001e2c:	180b883a 	mov	r5,r3
 4001e30:	1009883a 	mov	r4,r2
 4001e34:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = 0;  // Zero answer records
 4001e38:	e03ffd0d 	sth	zero,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4001e3c:	e0bffe17 	ldw	r2,-8(fp)
 4001e40:	10800204 	addi	r2,r2,8
 4001e44:	e0fffd04 	addi	r3,fp,-12
 4001e48:	01800084 	movi	r6,2
 4001e4c:	180b883a 	mov	r5,r3
 4001e50:	1009883a 	mov	r4,r2
 4001e54:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>

	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4001e58:	e0bffe17 	ldw	r2,-8(fp)
 4001e5c:	10800204 	addi	r2,r2,8
 4001e60:	e0fffd04 	addi	r3,fp,-12
 4001e64:	01800084 	movi	r6,2
 4001e68:	180b883a 	mov	r5,r3
 4001e6c:	1009883a 	mov	r4,r2
 4001e70:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>
	// and zero additional records
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4001e74:	e0bffe17 	ldw	r2,-8(fp)
 4001e78:	10800204 	addi	r2,r2,8
 4001e7c:	e0fffd04 	addi	r3,fp,-12
 4001e80:	01800084 	movi	r6,2
 4001e84:	180b883a 	mov	r5,r3
 4001e88:	1009883a 	mov	r4,r2
 4001e8c:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>

	// Build question
	const char* start =aName;
 4001e90:	e0bfff17 	ldw	r2,-4(fp)
 4001e94:	e0bffb15 	stw	r2,-20(fp)
	const char* end =start;
 4001e98:	e0bffb17 	ldw	r2,-20(fp)
 4001e9c:	e0bffc15 	stw	r2,-16(fp)
	uint8_t len;
	// Run through the name being requested
	while (*end) {
 4001ea0:	e0bffc17 	ldw	r2,-16(fp)
 4001ea4:	10800003 	ldbu	r2,0(r2)
 4001ea8:	10803fcc 	andi	r2,r2,255
 4001eac:	1080201c 	xori	r2,r2,128
 4001eb0:	10bfe004 	addi	r2,r2,-128
 4001eb4:	10002e26 	beq	r2,zero,4001f70 <_ZN9DNSClient12BuildRequestEPKc+0x1c8>
		// Find out how long this section of the name is
		end = start;
 4001eb8:	e0bffb17 	ldw	r2,-20(fp)
 4001ebc:	e0bffc15 	stw	r2,-16(fp)
		while (*end && (*end != '.') ) {
 4001ec0:	e0bffc17 	ldw	r2,-16(fp)
 4001ec4:	10800003 	ldbu	r2,0(r2)
 4001ec8:	10803fcc 	andi	r2,r2,255
 4001ecc:	1080201c 	xori	r2,r2,128
 4001ed0:	10bfe004 	addi	r2,r2,-128
 4001ed4:	10000b26 	beq	r2,zero,4001f04 <_ZN9DNSClient12BuildRequestEPKc+0x15c>
 4001ed8:	e0bffc17 	ldw	r2,-16(fp)
 4001edc:	10800003 	ldbu	r2,0(r2)
 4001ee0:	10803fcc 	andi	r2,r2,255
 4001ee4:	1080201c 	xori	r2,r2,128
 4001ee8:	10bfe004 	addi	r2,r2,-128
 4001eec:	10800ba0 	cmpeqi	r2,r2,46
 4001ef0:	1000041e 	bne	r2,zero,4001f04 <_ZN9DNSClient12BuildRequestEPKc+0x15c>
			end++;
 4001ef4:	e0bffc17 	ldw	r2,-16(fp)
 4001ef8:	10800044 	addi	r2,r2,1
 4001efc:	e0bffc15 	stw	r2,-16(fp)
	uint8_t len;
	// Run through the name being requested
	while (*end) {
		// Find out how long this section of the name is
		end = start;
		while (*end && (*end != '.') ) {
 4001f00:	003fef06 	br	4001ec0 <__alt_data_end+0xfc001ec0>
			end++;
		}

		if (end-start > 0) {
 4001f04:	e0fffc17 	ldw	r3,-16(fp)
 4001f08:	e0bffb17 	ldw	r2,-20(fp)
 4001f0c:	1885c83a 	sub	r2,r3,r2
 4001f10:	0080130e 	bge	zero,r2,4001f60 <_ZN9DNSClient12BuildRequestEPKc+0x1b8>
			// Write out the size of this section
			len = end-start;
 4001f14:	e0fffc17 	ldw	r3,-16(fp)
 4001f18:	e0bffb17 	ldw	r2,-20(fp)
 4001f1c:	1885c83a 	sub	r2,r3,r2
 4001f20:	e0bffd85 	stb	r2,-10(fp)
			iUdp.write(&len, sizeof(len));
 4001f24:	e0bffe17 	ldw	r2,-8(fp)
 4001f28:	10800204 	addi	r2,r2,8
 4001f2c:	e0fffd84 	addi	r3,fp,-10
 4001f30:	01800044 	movi	r6,1
 4001f34:	180b883a 	mov	r5,r3
 4001f38:	1009883a 	mov	r4,r2
 4001f3c:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>
			// And then write out the section
			iUdp.write((uint8_t*)start, end-start);
 4001f40:	e0bffe17 	ldw	r2,-8(fp)
 4001f44:	11000204 	addi	r4,r2,8
 4001f48:	e0fffc17 	ldw	r3,-16(fp)
 4001f4c:	e0bffb17 	ldw	r2,-20(fp)
 4001f50:	1885c83a 	sub	r2,r3,r2
 4001f54:	100d883a 	mov	r6,r2
 4001f58:	e17ffb17 	ldw	r5,-20(fp)
 4001f5c:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>
		}
		start = end+1;
 4001f60:	e0bffc17 	ldw	r2,-16(fp)
 4001f64:	10800044 	addi	r2,r2,1
 4001f68:	e0bffb15 	stw	r2,-20(fp)
	// Build question
	const char* start =aName;
	const char* end =start;
	uint8_t len;
	// Run through the name being requested
	while (*end) {
 4001f6c:	003fcc06 	br	4001ea0 <__alt_data_end+0xfc001ea0>
		start = end+1;
	}

	// We've got to the end of the question name, so
	// terminate it with a zero-length section
	len = 0;
 4001f70:	e03ffd85 	stb	zero,-10(fp)
	iUdp.write(&len, sizeof(len));
 4001f74:	e0bffe17 	ldw	r2,-8(fp)
 4001f78:	10800204 	addi	r2,r2,8
 4001f7c:	e0fffd84 	addi	r3,fp,-10
 4001f80:	01800044 	movi	r6,1
 4001f84:	180b883a 	mov	r5,r3
 4001f88:	1009883a 	mov	r4,r2
 4001f8c:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>
	// Finally the type and class of question
	twoByteBuffer = htons(TYPE_A);
 4001f90:	00804004 	movi	r2,256
 4001f94:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4001f98:	e0bffe17 	ldw	r2,-8(fp)
 4001f9c:	10800204 	addi	r2,r2,8
 4001fa0:	e0fffd04 	addi	r3,fp,-12
 4001fa4:	01800084 	movi	r6,2
 4001fa8:	180b883a 	mov	r5,r3
 4001fac:	1009883a 	mov	r4,r2
 4001fb0:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(CLASS_IN);  // Internet class of question
 4001fb4:	00804004 	movi	r2,256
 4001fb8:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4001fbc:	e0bffe17 	ldw	r2,-8(fp)
 4001fc0:	10800204 	addi	r2,r2,8
 4001fc4:	e0fffd04 	addi	r3,fp,-12
 4001fc8:	01800084 	movi	r6,2
 4001fcc:	180b883a 	mov	r5,r3
 4001fd0:	1009883a 	mov	r4,r2
 4001fd4:	400507c0 	call	400507c <_ZN11EthernetUDP5writeEPKhj>
	// Success!  Everything buffered okay
	return 1;
 4001fd8:	00800044 	movi	r2,1
}
 4001fdc:	e037883a 	mov	sp,fp
 4001fe0:	dfc00117 	ldw	ra,4(sp)
 4001fe4:	df000017 	ldw	fp,0(sp)
 4001fe8:	dec00204 	addi	sp,sp,8
 4001fec:	f800283a 	ret

04001ff0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
 4001ff0:	defff104 	addi	sp,sp,-60
 4001ff4:	dfc00e15 	stw	ra,56(sp)
 4001ff8:	df000d15 	stw	fp,52(sp)
 4001ffc:	dc000c15 	stw	r16,48(sp)
 4002000:	df000d04 	addi	fp,sp,52
 4002004:	e13ffc15 	stw	r4,-16(fp)
 4002008:	2805883a 	mov	r2,r5
 400200c:	e1bffe15 	stw	r6,-8(fp)
 4002010:	e0bffd0d 	sth	r2,-12(fp)
	uint32_t startTime = millis();
 4002014:	40075380 	call	4007538 <_Z6millisv>
 4002018:	e0bff415 	stw	r2,-48(fp)

	// Wait for a response packet
	while (iUdp.parsePacket() <= 0) {
 400201c:	e0bffc17 	ldw	r2,-16(fp)
 4002020:	10800204 	addi	r2,r2,8
 4002024:	1009883a 	mov	r4,r2
 4002028:	40051040 	call	4005104 <_ZN11EthernetUDP11parsePacketEv>
 400202c:	0084403a 	cmpge	r2,zero,r2
 4002030:	10803fcc 	andi	r2,r2,255
 4002034:	10000d26 	beq	r2,zero,400206c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x7c>
		if ((millis() - startTime) > aTimeout) {
 4002038:	40075380 	call	4007538 <_Z6millisv>
 400203c:	1007883a 	mov	r3,r2
 4002040:	e0bff417 	ldw	r2,-48(fp)
 4002044:	1885c83a 	sub	r2,r3,r2
 4002048:	e0fffd0b 	ldhu	r3,-12(fp)
 400204c:	1885803a 	cmpltu	r2,r3,r2
 4002050:	10803fcc 	andi	r2,r2,255
 4002054:	10000226 	beq	r2,zero,4002060 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x70>
			return TIMED_OUT;
 4002058:	00bfffc4 	movi	r2,-1
 400205c:	00011c06 	br	40024d0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
		}
		delay(50);
 4002060:	01000c84 	movi	r4,50
 4002064:	40074fc0 	call	40074fc <_Z5delayj>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
	uint32_t startTime = millis();

	// Wait for a response packet
	while (iUdp.parsePacket() <= 0) {
 4002068:	003fec06 	br	400201c <__alt_data_end+0xfc00201c>
		uint8_t  byte[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
		uint16_t word[DNS_HEADER_SIZE/2];
	} header;

	// Check that it's a response from the right server and the right port
	if ( (iDNSServer != iUdp.remoteIP()) || (iUdp.remotePort() != DNS_PORT) ) {
 400206c:	e0bffc17 	ldw	r2,-16(fp)
 4002070:	1009883a 	mov	r4,r2
 4002074:	400259c0 	call	400259c <_ZNK9IPAddresscvmEv>
 4002078:	1021883a 	mov	r16,r2
 400207c:	e0bffc17 	ldw	r2,-16(fp)
 4002080:	10800204 	addi	r2,r2,8
 4002084:	1009883a 	mov	r4,r2
 4002088:	4001a580 	call	4001a58 <_ZN11EthernetUDP8remoteIPEv>
 400208c:	e0bff615 	stw	r2,-40(fp)
 4002090:	e0bff604 	addi	r2,fp,-40
 4002094:	1009883a 	mov	r4,r2
 4002098:	400259c0 	call	400259c <_ZNK9IPAddresscvmEv>
 400209c:	8080071e 	bne	r16,r2,40020bc <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xcc>
 40020a0:	e0bffc17 	ldw	r2,-16(fp)
 40020a4:	10800204 	addi	r2,r2,8
 40020a8:	1009883a 	mov	r4,r2
 40020ac:	4001a800 	call	4001a80 <_ZN11EthernetUDP10remotePortEv>
 40020b0:	10bfffcc 	andi	r2,r2,65535
 40020b4:	10800d60 	cmpeqi	r2,r2,53
 40020b8:	1000021e 	bne	r2,zero,40020c4 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xd4>
 40020bc:	00800044 	movi	r2,1
 40020c0:	00000106 	br	40020c8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xd8>
 40020c4:	0005883a 	mov	r2,zero
 40020c8:	10803fcc 	andi	r2,r2,255
 40020cc:	10000226 	beq	r2,zero,40020d8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xe8>
		// It's not from who we expected
		return INVALID_SERVER;
 40020d0:	00bfff84 	movi	r2,-2
 40020d4:	0000fe06 	br	40024d0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// Read through the rest of the response
	if (iUdp.available() < DNS_HEADER_SIZE) {
 40020d8:	e0bffc17 	ldw	r2,-16(fp)
 40020dc:	10800204 	addi	r2,r2,8
 40020e0:	1009883a 	mov	r4,r2
 40020e4:	4004e400 	call	4004e40 <_ZN11EthernetUDP9availableEv>
 40020e8:	10800310 	cmplti	r2,r2,12
 40020ec:	10803fcc 	andi	r2,r2,255
 40020f0:	10000226 	beq	r2,zero,40020fc <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x10c>
		return TRUNCATED;
 40020f4:	00bfff44 	movi	r2,-3
 40020f8:	0000f506 	br	40024d0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}
	iUdp.read(header.byte, DNS_HEADER_SIZE);
 40020fc:	e0bffc17 	ldw	r2,-16(fp)
 4002100:	10800204 	addi	r2,r2,8
 4002104:	e0fff704 	addi	r3,fp,-36
 4002108:	01800304 	movi	r6,12
 400210c:	180b883a 	mov	r5,r3
 4002110:	1009883a 	mov	r4,r2
 4002114:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>

	uint16_t header_flags = htons(header.word[1]);
 4002118:	e0bff78b 	ldhu	r2,-34(fp)
 400211c:	10bfffcc 	andi	r2,r2,65535
 4002120:	1004923a 	slli	r2,r2,8
 4002124:	1007883a 	mov	r3,r2
 4002128:	e0bff78b 	ldhu	r2,-34(fp)
 400212c:	10bfffcc 	andi	r2,r2,65535
 4002130:	1004d23a 	srli	r2,r2,8
 4002134:	1884b03a 	or	r2,r3,r2
 4002138:	e0bffa0d 	sth	r2,-24(fp)
	// Check that it's a response to this request
	if ((iRequestId != (header.word[0])) ||
 400213c:	e0bffc17 	ldw	r2,-16(fp)
 4002140:	10c0010b 	ldhu	r3,4(r2)
 4002144:	e0bff70b 	ldhu	r2,-36(fp)
 4002148:	18ffffcc 	andi	r3,r3,65535
 400214c:	10bfffcc 	andi	r2,r2,65535
 4002150:	1880051e 	bne	r3,r2,4002168 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x178>
	  ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) ) {
 4002154:	e0bffa0b 	ldhu	r2,-24(fp)
	}
	iUdp.read(header.byte, DNS_HEADER_SIZE);

	uint16_t header_flags = htons(header.word[1]);
	// Check that it's a response to this request
	if ((iRequestId != (header.word[0])) ||
 4002158:	10bfffcc 	andi	r2,r2,65535
 400215c:	10a0001c 	xori	r2,r2,32768
 4002160:	10a00004 	addi	r2,r2,-32768
 4002164:	10000616 	blt	r2,zero,4002180 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x190>
	  ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) ) {
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 4002168:	e0bffc17 	ldw	r2,-16(fp)
 400216c:	10800204 	addi	r2,r2,8
 4002170:	1009883a 	mov	r4,r2
 4002174:	40054240 	call	4005424 <_ZN11EthernetUDP5flushEv>
		return INVALID_RESPONSE;
 4002178:	00bfff04 	movi	r2,-4
 400217c:	0000d406 	br	40024d0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}
	// Check for any errors in the response (or in our request)
	// although we don't do anything to get round these
	if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) ) {
 4002180:	e0bffa0b 	ldhu	r2,-24(fp)
 4002184:	10bfffcc 	andi	r2,r2,65535
 4002188:	1080800c 	andi	r2,r2,512
 400218c:	1000041e 	bne	r2,zero,40021a0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1b0>
 4002190:	e0bffa0b 	ldhu	r2,-24(fp)
 4002194:	10bfffcc 	andi	r2,r2,65535
 4002198:	108003cc 	andi	r2,r2,15
 400219c:	10000626 	beq	r2,zero,40021b8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1c8>
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 40021a0:	e0bffc17 	ldw	r2,-16(fp)
 40021a4:	10800204 	addi	r2,r2,8
 40021a8:	1009883a 	mov	r4,r2
 40021ac:	40054240 	call	4005424 <_ZN11EthernetUDP5flushEv>
		return -5; //INVALID_RESPONSE;
 40021b0:	00bffec4 	movi	r2,-5
 40021b4:	0000c606 	br	40024d0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// And make sure we've got (at least) one answer
	uint16_t answerCount = htons(header.word[3]);
 40021b8:	e0bff88b 	ldhu	r2,-30(fp)
 40021bc:	10bfffcc 	andi	r2,r2,65535
 40021c0:	1004923a 	slli	r2,r2,8
 40021c4:	1007883a 	mov	r3,r2
 40021c8:	e0bff88b 	ldhu	r2,-30(fp)
 40021cc:	10bfffcc 	andi	r2,r2,65535
 40021d0:	1004d23a 	srli	r2,r2,8
 40021d4:	1884b03a 	or	r2,r3,r2
 40021d8:	e0bff50d 	sth	r2,-44(fp)
	if (answerCount == 0) {
 40021dc:	e0bff50b 	ldhu	r2,-44(fp)
 40021e0:	1000061e 	bne	r2,zero,40021fc <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x20c>
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 40021e4:	e0bffc17 	ldw	r2,-16(fp)
 40021e8:	10800204 	addi	r2,r2,8
 40021ec:	1009883a 	mov	r4,r2
 40021f0:	40054240 	call	4005424 <_ZN11EthernetUDP5flushEv>
		return -6; //INVALID_RESPONSE;
 40021f4:	00bffe84 	movi	r2,-6
 40021f8:	0000b506 	br	40024d0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
 40021fc:	e03ff30d 	sth	zero,-52(fp)
 4002200:	e0fff30b 	ldhu	r3,-52(fp)
 4002204:	e0bff80b 	ldhu	r2,-32(fp)
 4002208:	10bfffcc 	andi	r2,r2,65535
 400220c:	1004923a 	slli	r2,r2,8
 4002210:	113fffcc 	andi	r4,r2,65535
 4002214:	e0bff80b 	ldhu	r2,-32(fp)
 4002218:	10bfffcc 	andi	r2,r2,65535
 400221c:	1004d23a 	srli	r2,r2,8
 4002220:	10bfffcc 	andi	r2,r2,65535
 4002224:	2084b03a 	or	r2,r4,r2
 4002228:	1880200e 	bge	r3,r2,40022ac <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x2bc>
		// Skip over the name
		uint8_t len;
		do {
			iUdp.read(&len, sizeof(len));
 400222c:	e0bffc17 	ldw	r2,-16(fp)
 4002230:	10800204 	addi	r2,r2,8
 4002234:	e0fffa84 	addi	r3,fp,-22
 4002238:	01800044 	movi	r6,1
 400223c:	180b883a 	mov	r5,r3
 4002240:	1009883a 	mov	r4,r2
 4002244:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
			if (len > 0) {
 4002248:	e0bffa83 	ldbu	r2,-22(fp)
 400224c:	10803fcc 	andi	r2,r2,255
 4002250:	10000826 	beq	r2,zero,4002274 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x284>
				// Don't need to actually read the data out for the string, just
				// advance ptr to beyond it
				iUdp.read((uint8_t *)NULL, (size_t)len);
 4002254:	e0bffc17 	ldw	r2,-16(fp)
 4002258:	10800204 	addi	r2,r2,8
 400225c:	e0fffa83 	ldbu	r3,-22(fp)
 4002260:	18c03fcc 	andi	r3,r3,255
 4002264:	180d883a 	mov	r6,r3
 4002268:	000b883a 	mov	r5,zero
 400226c:	1009883a 	mov	r4,r2
 4002270:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
			}
		} while (len != 0);
 4002274:	e0bffa83 	ldbu	r2,-22(fp)
 4002278:	10803fcc 	andi	r2,r2,255
 400227c:	10000126 	beq	r2,zero,4002284 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x294>

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
		// Skip over the name
		uint8_t len;
		do {
 4002280:	003fea06 	br	400222c <__alt_data_end+0xfc00222c>
				iUdp.read((uint8_t *)NULL, (size_t)len);
			}
		} while (len != 0);

		// Now jump over the type and class
		iUdp.read((uint8_t *)NULL, 4);
 4002284:	e0bffc17 	ldw	r2,-16(fp)
 4002288:	10800204 	addi	r2,r2,8
 400228c:	01800104 	movi	r6,4
 4002290:	000b883a 	mov	r5,zero
 4002294:	1009883a 	mov	r4,r2
 4002298:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
		iUdp.flush(); // FIXME
		return -6; //INVALID_RESPONSE;
	}

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
 400229c:	e0bff30b 	ldhu	r2,-52(fp)
 40022a0:	10800044 	addi	r2,r2,1
 40022a4:	e0bff30d 	sth	r2,-52(fp)
 40022a8:	003fd506 	br	4002200 <__alt_data_end+0xfc002200>
	// Now we're up to the bit we're interested in, the answer
	// There might be more than one answer (although we'll just use the first
	// type A answer) and some authority and additional resource records but
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
 40022ac:	e03ff38d 	sth	zero,-50(fp)
 40022b0:	e0fff38b 	ldhu	r3,-50(fp)
 40022b4:	e0bff50b 	ldhu	r2,-44(fp)
 40022b8:	1880802e 	bgeu	r3,r2,40024bc <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4cc>
		// Skip the name
		uint8_t len;
		do {
			iUdp.read(&len, sizeof(len));
 40022bc:	e0bffc17 	ldw	r2,-16(fp)
 40022c0:	10800204 	addi	r2,r2,8
 40022c4:	e0fffac4 	addi	r3,fp,-21
 40022c8:	01800044 	movi	r6,1
 40022cc:	180b883a 	mov	r5,r3
 40022d0:	1009883a 	mov	r4,r2
 40022d4:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
			if ((len & LABEL_COMPRESSION_MASK) == 0) {
 40022d8:	e0bffac3 	ldbu	r2,-21(fp)
 40022dc:	10803fcc 	andi	r2,r2,255
 40022e0:	1080300c 	andi	r2,r2,192
 40022e4:	10000c1e 	bne	r2,zero,4002318 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x328>
				// It's just a normal label
				if (len > 0) {
 40022e8:	e0bffac3 	ldbu	r2,-21(fp)
 40022ec:	10803fcc 	andi	r2,r2,255
 40022f0:	10001026 	beq	r2,zero,4002334 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x344>
					// And it's got a length
					// Don't need to actually read the data out for the string,
					// just advance ptr to beyond it
					iUdp.read((uint8_t *)NULL, len);
 40022f4:	e0bffc17 	ldw	r2,-16(fp)
 40022f8:	10800204 	addi	r2,r2,8
 40022fc:	e0fffac3 	ldbu	r3,-21(fp)
 4002300:	18c03fcc 	andi	r3,r3,255
 4002304:	180d883a 	mov	r6,r3
 4002308:	000b883a 	mov	r5,zero
 400230c:	1009883a 	mov	r4,r2
 4002310:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
 4002314:	00000706 	br	4002334 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x344>
				// says that a name is either a sequence of labels ended with a
				// 0 length octet or a pointer or a sequence of labels ending in
				// a pointer.  Either way, when we get here we're at the end of
				// the name
				// Skip over the pointer
				iUdp.read((uint8_t *)NULL, 1); // we don't care about the byte
 4002318:	e0bffc17 	ldw	r2,-16(fp)
 400231c:	10800204 	addi	r2,r2,8
 4002320:	01800044 	movi	r6,1
 4002324:	000b883a 	mov	r5,zero
 4002328:	1009883a 	mov	r4,r2
 400232c:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
				// And set len so that we drop out of the name loop
				len = 0;
 4002330:	e03ffac5 	stb	zero,-21(fp)
			}
		} while (len != 0);
 4002334:	e0bffac3 	ldbu	r2,-21(fp)
 4002338:	10803fcc 	andi	r2,r2,255
 400233c:	10000126 	beq	r2,zero,4002344 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x354>
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
		// Skip the name
		uint8_t len;
		do {
 4002340:	003fde06 	br	40022bc <__alt_data_end+0xfc0022bc>
		} while (len != 0);

		// Check the type and class
		uint16_t answerType;
		uint16_t answerClass;
		iUdp.read((uint8_t*)&answerType, sizeof(answerType));
 4002344:	e0bffc17 	ldw	r2,-16(fp)
 4002348:	10800204 	addi	r2,r2,8
 400234c:	e0fffb04 	addi	r3,fp,-20
 4002350:	01800084 	movi	r6,2
 4002354:	180b883a 	mov	r5,r3
 4002358:	1009883a 	mov	r4,r2
 400235c:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
		iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
 4002360:	e0bffc17 	ldw	r2,-16(fp)
 4002364:	10800204 	addi	r2,r2,8
 4002368:	e0fffb84 	addi	r3,fp,-18
 400236c:	01800084 	movi	r6,2
 4002370:	180b883a 	mov	r5,r3
 4002374:	1009883a 	mov	r4,r2
 4002378:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>

		// Ignore the Time-To-Live as we don't do any caching
		iUdp.read((uint8_t *)NULL, TTL_SIZE); // don't care about the returned bytes
 400237c:	e0bffc17 	ldw	r2,-16(fp)
 4002380:	10800204 	addi	r2,r2,8
 4002384:	01800104 	movi	r6,4
 4002388:	000b883a 	mov	r5,zero
 400238c:	1009883a 	mov	r4,r2
 4002390:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>

		// And read out the length of this answer
		// Don't need header_flags anymore, so we can reuse it here
		iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
 4002394:	e0bffc17 	ldw	r2,-16(fp)
 4002398:	10800204 	addi	r2,r2,8
 400239c:	e0fffa04 	addi	r3,fp,-24
 40023a0:	01800084 	movi	r6,2
 40023a4:	180b883a 	mov	r5,r3
 40023a8:	1009883a 	mov	r4,r2
 40023ac:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>

		if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) ) {
 40023b0:	e0bffb0b 	ldhu	r2,-20(fp)
 40023b4:	10bfffcc 	andi	r2,r2,65535
 40023b8:	1004923a 	slli	r2,r2,8
 40023bc:	10ffffcc 	andi	r3,r2,65535
 40023c0:	e0bffb0b 	ldhu	r2,-20(fp)
 40023c4:	10bfffcc 	andi	r2,r2,65535
 40023c8:	1004d23a 	srli	r2,r2,8
 40023cc:	10bfffcc 	andi	r2,r2,65535
 40023d0:	1884b03a 	or	r2,r3,r2
 40023d4:	10800058 	cmpnei	r2,r2,1
 40023d8:	1000261e 	bne	r2,zero,4002474 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x484>
 40023dc:	e0bffb8b 	ldhu	r2,-18(fp)
 40023e0:	10bfffcc 	andi	r2,r2,65535
 40023e4:	1004923a 	slli	r2,r2,8
 40023e8:	10ffffcc 	andi	r3,r2,65535
 40023ec:	e0bffb8b 	ldhu	r2,-18(fp)
 40023f0:	10bfffcc 	andi	r2,r2,65535
 40023f4:	1004d23a 	srli	r2,r2,8
 40023f8:	10bfffcc 	andi	r2,r2,65535
 40023fc:	1884b03a 	or	r2,r3,r2
 4002400:	10800058 	cmpnei	r2,r2,1
 4002404:	10001b1e 	bne	r2,zero,4002474 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x484>
			if (htons(header_flags) != 4) {
 4002408:	e0bffa0b 	ldhu	r2,-24(fp)
 400240c:	10bfffcc 	andi	r2,r2,65535
 4002410:	1004923a 	slli	r2,r2,8
 4002414:	10ffffcc 	andi	r3,r2,65535
 4002418:	e0bffa0b 	ldhu	r2,-24(fp)
 400241c:	10bfffcc 	andi	r2,r2,65535
 4002420:	1004d23a 	srli	r2,r2,8
 4002424:	10bfffcc 	andi	r2,r2,65535
 4002428:	1884b03a 	or	r2,r3,r2
 400242c:	10800120 	cmpeqi	r2,r2,4
 4002430:	1000061e 	bne	r2,zero,400244c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x45c>
				// It's a weird size
				// Mark the entire packet as read
				iUdp.flush(); // FIXME
 4002434:	e0bffc17 	ldw	r2,-16(fp)
 4002438:	10800204 	addi	r2,r2,8
 400243c:	1009883a 	mov	r4,r2
 4002440:	40054240 	call	4005424 <_ZN11EthernetUDP5flushEv>
				return -9;//INVALID_RESPONSE;
 4002444:	00bffdc4 	movi	r2,-9
 4002448:	00002106 	br	40024d0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
			}
			// FIXME: seems to lock up here on ESP8266, but why??
			iUdp.read(aAddress.raw_address(), 4);
 400244c:	e0bffc17 	ldw	r2,-16(fp)
 4002450:	14000204 	addi	r16,r2,8
 4002454:	e13ffe17 	ldw	r4,-8(fp)
 4002458:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 400245c:	01800104 	movi	r6,4
 4002460:	100b883a 	mov	r5,r2
 4002464:	8009883a 	mov	r4,r16
 4002468:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
			return SUCCESS;
 400246c:	00800044 	movi	r2,1
 4002470:	00001706 	br	40024d0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
		} else {
			// This isn't an answer type we're after, move onto the next one
			iUdp.read((uint8_t *)NULL, htons(header_flags));
 4002474:	e0bffc17 	ldw	r2,-16(fp)
 4002478:	11000204 	addi	r4,r2,8
 400247c:	e0bffa0b 	ldhu	r2,-24(fp)
 4002480:	10bfffcc 	andi	r2,r2,65535
 4002484:	1004923a 	slli	r2,r2,8
 4002488:	10ffffcc 	andi	r3,r2,65535
 400248c:	e0bffa0b 	ldhu	r2,-24(fp)
 4002490:	10bfffcc 	andi	r2,r2,65535
 4002494:	1004d23a 	srli	r2,r2,8
 4002498:	10bfffcc 	andi	r2,r2,65535
 400249c:	1884b03a 	or	r2,r3,r2
 40024a0:	100d883a 	mov	r6,r2
 40024a4:	000b883a 	mov	r5,zero
 40024a8:	40052cc0 	call	40052cc <_ZN11EthernetUDP4readEPhj>
	// Now we're up to the bit we're interested in, the answer
	// There might be more than one answer (although we'll just use the first
	// type A answer) and some authority and additional resource records but
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
 40024ac:	e0bff38b 	ldhu	r2,-50(fp)
 40024b0:	10800044 	addi	r2,r2,1
 40024b4:	e0bff38d 	sth	r2,-50(fp)
 40024b8:	003f7d06 	br	40022b0 <__alt_data_end+0xfc0022b0>
			iUdp.read((uint8_t *)NULL, htons(header_flags));
		}
	}

	// Mark the entire packet as read
	iUdp.flush(); // FIXME
 40024bc:	e0bffc17 	ldw	r2,-16(fp)
 40024c0:	10800204 	addi	r2,r2,8
 40024c4:	1009883a 	mov	r4,r2
 40024c8:	40054240 	call	4005424 <_ZN11EthernetUDP5flushEv>

	// If we get here then we haven't found an answer
	return -10; //INVALID_RESPONSE;
 40024cc:	00bffd84 	movi	r2,-10
}
 40024d0:	e6ffff04 	addi	sp,fp,-4
 40024d4:	dfc00217 	ldw	ra,8(sp)
 40024d8:	df000117 	ldw	fp,4(sp)
 40024dc:	dc000017 	ldw	r16,0(sp)
 40024e0:	dec00304 	addi	sp,sp,12
 40024e4:	f800283a 	ret

040024e8 <_Z41__static_initialization_and_destruction_0ii>:
 40024e8:	defffb04 	addi	sp,sp,-20
 40024ec:	dfc00415 	stw	ra,16(sp)
 40024f0:	df000315 	stw	fp,12(sp)
 40024f4:	df000304 	addi	fp,sp,12
 40024f8:	e13ffe15 	stw	r4,-8(fp)
 40024fc:	e17fff15 	stw	r5,-4(fp)
 4002500:	e0bffe17 	ldw	r2,-8(fp)
 4002504:	10800058 	cmpnei	r2,r2,1
 4002508:	1000091e 	bne	r2,zero,4002530 <_Z41__static_initialization_and_destruction_0ii+0x48>
 400250c:	e0ffff17 	ldw	r3,-4(fp)
 4002510:	00bfffd4 	movui	r2,65535
 4002514:	1880061e 	bne	r3,r2,4002530 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4002518:	d8000015 	stw	zero,0(sp)
 400251c:	000f883a 	mov	r7,zero
 4002520:	000d883a 	mov	r6,zero
 4002524:	000b883a 	mov	r5,zero
 4002528:	d13c9b04 	addi	r4,gp,-3476
 400252c:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
 4002530:	0001883a 	nop
 4002534:	e037883a 	mov	sp,fp
 4002538:	dfc00117 	ldw	ra,4(sp)
 400253c:	df000017 	ldw	fp,0(sp)
 4002540:	dec00204 	addi	sp,sp,8
 4002544:	f800283a 	ret

04002548 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
 4002548:	defffe04 	addi	sp,sp,-8
 400254c:	dfc00115 	stw	ra,4(sp)
 4002550:	df000015 	stw	fp,0(sp)
 4002554:	d839883a 	mov	fp,sp
 4002558:	017fffd4 	movui	r5,65535
 400255c:	01000044 	movi	r4,1
 4002560:	40024e80 	call	40024e8 <_Z41__static_initialization_and_destruction_0ii>
 4002564:	e037883a 	mov	sp,fp
 4002568:	dfc00117 	ldw	ra,4(sp)
 400256c:	df000017 	ldw	fp,0(sp)
 4002570:	dec00204 	addi	sp,sp,8
 4002574:	f800283a 	ret

04002578 <_ZN9IPAddress11raw_addressEv>:

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
 4002578:	defffe04 	addi	sp,sp,-8
 400257c:	df000115 	stw	fp,4(sp)
 4002580:	df000104 	addi	fp,sp,4
 4002584:	e13fff15 	stw	r4,-4(fp)
 4002588:	e0bfff17 	ldw	r2,-4(fp)
 400258c:	e037883a 	mov	sp,fp
 4002590:	df000017 	ldw	fp,0(sp)
 4002594:	dec00104 	addi	sp,sp,4
 4002598:	f800283a 	ret

0400259c <_ZNK9IPAddresscvmEv>:

    bool fromString(const char *address);

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() const { return _address.dword; };
 400259c:	defffe04 	addi	sp,sp,-8
 40025a0:	df000115 	stw	fp,4(sp)
 40025a4:	df000104 	addi	fp,sp,4
 40025a8:	e13fff15 	stw	r4,-4(fp)
 40025ac:	e0bfff17 	ldw	r2,-4(fp)
 40025b0:	10800017 	ldw	r2,0(r2)
 40025b4:	e037883a 	mov	sp,fp
 40025b8:	df000017 	ldw	fp,0(sp)
 40025bc:	dec00104 	addi	sp,sp,4
 40025c0:	f800283a 	ret

040025c4 <_ZN9IPAddressixEi>:
    bool operator==(const IPAddress& addr) const { return _address.dword == addr._address.dword; };
    bool operator==(const uint8_t* addr) const;

    // Overloaded index operator to allow getting and setting individual octets of the address
    uint8_t operator[](int index) const { return _address.bytes[index]; };
    uint8_t& operator[](int index) { return _address.bytes[index]; };
 40025c4:	defffd04 	addi	sp,sp,-12
 40025c8:	df000215 	stw	fp,8(sp)
 40025cc:	df000204 	addi	fp,sp,8
 40025d0:	e13ffe15 	stw	r4,-8(fp)
 40025d4:	e17fff15 	stw	r5,-4(fp)
 40025d8:	e0fffe17 	ldw	r3,-8(fp)
 40025dc:	e0bfff17 	ldw	r2,-4(fp)
 40025e0:	1885883a 	add	r2,r3,r2
 40025e4:	e037883a 	mov	sp,fp
 40025e8:	df000017 	ldw	fp,0(sp)
 40025ec:	dec00104 	addi	sp,sp,4
 40025f0:	f800283a 	ret

040025f4 <_ZN13EthernetClass5beginEPhmm>:

IPAddress EthernetClass::_dnsServerAddress;
DhcpClass* EthernetClass::_dhcp = NULL;

int EthernetClass::begin(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
 40025f4:	deffdd04 	addi	sp,sp,-140
 40025f8:	dfc02215 	stw	ra,136(sp)
 40025fc:	df002115 	stw	fp,132(sp)
 4002600:	ddc02015 	stw	r23,128(sp)
 4002604:	dd801f15 	stw	r22,124(sp)
 4002608:	dd401e15 	stw	r21,120(sp)
 400260c:	dd001d15 	stw	r20,116(sp)
 4002610:	dcc01c15 	stw	r19,112(sp)
 4002614:	dc801b15 	stw	r18,108(sp)
 4002618:	dc401a15 	stw	r17,104(sp)
 400261c:	dc001915 	stw	r16,100(sp)
 4002620:	df002104 	addi	fp,sp,132
 4002624:	e13fe515 	stw	r4,-108(fp)
 4002628:	e17fe615 	stw	r5,-104(fp)
 400262c:	e1bfe715 	stw	r6,-100(fp)
 4002630:	00810074 	movhi	r2,1025
 4002634:	10a3cc04 	addi	r2,r2,-28880
 4002638:	e0bfee15 	stw	r2,-72(fp)
 400263c:	008100b4 	movhi	r2,1026
 4002640:	10a88584 	addi	r2,r2,-24042
 4002644:	e0bfef15 	stw	r2,-68(fp)
 4002648:	e0bff004 	addi	r2,fp,-64
 400264c:	e0ffe004 	addi	r3,fp,-128
 4002650:	10c00015 	stw	r3,0(r2)
 4002654:	00c10034 	movhi	r3,1024
 4002658:	18ca0904 	addi	r3,r3,10276
 400265c:	10c00115 	stw	r3,4(r2)
 4002660:	16c00215 	stw	sp,8(r2)
 4002664:	e0bfe804 	addi	r2,fp,-96
 4002668:	1009883a 	mov	r4,r2
 400266c:	400a67c0 	call	400a67c <_Unwind_SjLj_Register>
	static DhcpClass s_dhcp;
 4002670:	d0bc9f04 	addi	r2,gp,-3460
 4002674:	10800003 	ldbu	r2,0(r2)
 4002678:	10803fcc 	andi	r2,r2,255
 400267c:	1080201c 	xori	r2,r2,128
 4002680:	10bfe004 	addi	r2,r2,-128
 4002684:	10000d1e 	bne	r2,zero,40026bc <_ZN13EthernetClass5beginEPhmm+0xc8>
 4002688:	d13c9f04 	addi	r4,gp,-3460
 400268c:	40098fc0 	call	40098fc <__cxa_guard_acquire>
 4002690:	1004c03a 	cmpne	r2,r2,zero
 4002694:	10803fcc 	andi	r2,r2,255
 4002698:	10000826 	beq	r2,zero,40026bc <_ZN13EthernetClass5beginEPhmm+0xc8>
 400269c:	e03ff505 	stb	zero,-44(fp)
 40026a0:	010100f4 	movhi	r4,1027
 40026a4:	00800044 	movi	r2,1
 40026a8:	e0bfe915 	stw	r2,-92(fp)
 40026ac:	21238a04 	addi	r4,r4,-29144
 40026b0:	400364c0 	call	400364c <_ZN9DhcpClassC1Ev>
 40026b4:	d13c9f04 	addi	r4,gp,-3460
 40026b8:	40099600 	call	4009960 <__cxa_guard_release>
	_dhcp = &s_dhcp;
 40026bc:	008100f4 	movhi	r2,1027
 40026c0:	10a38a04 	addi	r2,r2,-29144
 40026c4:	d0bc9e15 	stw	r2,-3464(gp)

	// Initialise the basic info
	if (W5100.init() == 0) return 0;
 40026c8:	00bfffc4 	movi	r2,-1
 40026cc:	e0bfe915 	stw	r2,-92(fp)
 40026d0:	40076b80 	call	40076b8 <_ZN10W5100Class4initEv>
 40026d4:	10803fcc 	andi	r2,r2,255
 40026d8:	1005003a 	cmpeq	r2,r2,zero
 40026dc:	10803fcc 	andi	r2,r2,255
 40026e0:	10000226 	beq	r2,zero,40026ec <_ZN13EthernetClass5beginEPhmm+0xf8>
 40026e4:	0005883a 	mov	r2,zero
 40026e8:	00004c06 	br	400281c <_ZN13EthernetClass5beginEPhmm+0x228>
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 40026ec:	00bfffc4 	movi	r2,-1
 40026f0:	e0bfe915 	stw	r2,-92(fp)
 40026f4:	0009883a 	mov	r4,zero
 40026f8:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.setMACAddress(mac);
 40026fc:	e17fe517 	ldw	r5,-108(fp)
 4002700:	d13ca884 	addi	r4,gp,-3422
 4002704:	40031fc0 	call	40031fc <_ZN10W5100Class13setMACAddressEPKh>
	W5100.setIPAddress(IPAddress(0,0,0,0).raw_address());
 4002708:	e0bfe404 	addi	r2,fp,-112
 400270c:	d8000015 	stw	zero,0(sp)
 4002710:	000f883a 	mov	r7,zero
 4002714:	000d883a 	mov	r6,zero
 4002718:	000b883a 	mov	r5,zero
 400271c:	1009883a 	mov	r4,r2
 4002720:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
 4002724:	e0bfe404 	addi	r2,fp,-112
 4002728:	1009883a 	mov	r4,r2
 400272c:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 4002730:	100b883a 	mov	r5,r2
 4002734:	d13ca884 	addi	r4,gp,-3422
 4002738:	400326c0 	call	400326c <_ZN10W5100Class12setIPAddressEPKh>
	SPI_endTransaction();
 400273c:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>

	// Now try to get our config info from a DHCP server
	int ret = _dhcp->beginWithDHCP(mac, timeout, responseTimeout);
 4002740:	d0bc9e17 	ldw	r2,-3464(gp)
 4002744:	e1ffe717 	ldw	r7,-100(fp)
 4002748:	e1bfe617 	ldw	r6,-104(fp)
 400274c:	e17fe517 	ldw	r5,-108(fp)
 4002750:	1009883a 	mov	r4,r2
 4002754:	40005580 	call	4000558 <_ZN9DhcpClass13beginWithDHCPEPhmm>
 4002758:	e0bfe015 	stw	r2,-128(fp)
	if (ret == 1) {
 400275c:	e0bfe017 	ldw	r2,-128(fp)
 4002760:	10800058 	cmpnei	r2,r2,1
 4002764:	10002c1e 	bne	r2,zero,4002818 <_ZN13EthernetClass5beginEPhmm+0x224>
		// We've successfully found a DHCP server and got our configuration
		// info, so set things accordingly
		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002768:	0009883a 	mov	r4,zero
 400276c:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
		W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
 4002770:	d0bc9e17 	ldw	r2,-3464(gp)
 4002774:	1009883a 	mov	r4,r2
 4002778:	40017a00 	call	40017a0 <_ZN9DhcpClass10getLocalIpEv>
 400277c:	e0bfe315 	stw	r2,-116(fp)
 4002780:	e0bfe304 	addi	r2,fp,-116
 4002784:	1009883a 	mov	r4,r2
 4002788:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 400278c:	100b883a 	mov	r5,r2
 4002790:	d13ca884 	addi	r4,gp,-3422
 4002794:	400326c0 	call	400326c <_ZN10W5100Class12setIPAddressEPKh>
		W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
 4002798:	d0bc9e17 	ldw	r2,-3464(gp)
 400279c:	1009883a 	mov	r4,r2
 40027a0:	40018200 	call	4001820 <_ZN9DhcpClass12getGatewayIpEv>
 40027a4:	e0bfe215 	stw	r2,-120(fp)
 40027a8:	e0bfe204 	addi	r2,fp,-120
 40027ac:	1009883a 	mov	r4,r2
 40027b0:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 40027b4:	100b883a 	mov	r5,r2
 40027b8:	d13ca884 	addi	r4,gp,-3422
 40027bc:	400311c0 	call	400311c <_ZN10W5100Class12setGatewayIpEPKh>
		W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
 40027c0:	d0bc9e17 	ldw	r2,-3464(gp)
 40027c4:	1009883a 	mov	r4,r2
 40027c8:	40017e00 	call	40017e0 <_ZN9DhcpClass13getSubnetMaskEv>
 40027cc:	e0bfe115 	stw	r2,-124(fp)
 40027d0:	e0bfe104 	addi	r2,fp,-124
 40027d4:	1009883a 	mov	r4,r2
 40027d8:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 40027dc:	100b883a 	mov	r5,r2
 40027e0:	d13ca884 	addi	r4,gp,-3422
 40027e4:	400318c0 	call	400318c <_ZN10W5100Class13setSubnetMaskEPKh>
		SPI_endTransaction();
 40027e8:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
		_dnsServerAddress = _dhcp->getDnsServerIp();
 40027ec:	d0bc9e17 	ldw	r2,-3464(gp)
 40027f0:	1009883a 	mov	r4,r2
 40027f4:	40018a00 	call	40018a0 <_ZN9DhcpClass14getDnsServerIpEv>
 40027f8:	d0bc9d15 	stw	r2,-3468(gp)
		socketPortRand(millis()/1000);
 40027fc:	40075380 	call	4007538 <_Z6millisv>
 4002800:	0140fa04 	movi	r5,1000
 4002804:	1009883a 	mov	r4,r2
 4002808:	400a3b80 	call	400a3b8 <__udivsi3>
 400280c:	10bfffcc 	andi	r2,r2,65535
 4002810:	1009883a 	mov	r4,r2
 4002814:	40056340 	call	4005634 <_ZN13EthernetClass14socketPortRandEt>
	}
	return ret;
 4002818:	e0bfe017 	ldw	r2,-128(fp)
 400281c:	e0bff615 	stw	r2,-40(fp)
 4002820:	00000c06 	br	4002854 <_ZN13EthernetClass5beginEPhmm+0x260>
 4002824:	e7002004 	addi	fp,fp,128
 4002828:	e0bfea17 	ldw	r2,-88(fp)
 400282c:	e0bff715 	stw	r2,-36(fp)
IPAddress EthernetClass::_dnsServerAddress;
DhcpClass* EthernetClass::_dhcp = NULL;

int EthernetClass::begin(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
	static DhcpClass s_dhcp;
 4002830:	e0bff503 	ldbu	r2,-44(fp)
 4002834:	1000021e 	bne	r2,zero,4002840 <_ZN13EthernetClass5beginEPhmm+0x24c>
 4002838:	d13c9f04 	addi	r4,gp,-3460
 400283c:	40099580 	call	4009958 <__cxa_guard_abort>
 4002840:	e0fff717 	ldw	r3,-36(fp)
 4002844:	00bfffc4 	movi	r2,-1
 4002848:	e0bfe915 	stw	r2,-92(fp)
 400284c:	1809883a 	mov	r4,r3
 4002850:	400a8780 	call	400a878 <_Unwind_SjLj_Resume>
 4002854:	e0bfe804 	addi	r2,fp,-96
 4002858:	1009883a 	mov	r4,r2
 400285c:	400a6940 	call	400a694 <_Unwind_SjLj_Unregister>
		SPI_endTransaction();
		_dnsServerAddress = _dhcp->getDnsServerIp();
		socketPortRand(millis()/1000);
	}
	return ret;
}
 4002860:	e0bff617 	ldw	r2,-40(fp)
 4002864:	e6fff804 	addi	sp,fp,-32
 4002868:	dfc00917 	ldw	ra,36(sp)
 400286c:	df000817 	ldw	fp,32(sp)
 4002870:	ddc00717 	ldw	r23,28(sp)
 4002874:	dd800617 	ldw	r22,24(sp)
 4002878:	dd400517 	ldw	r21,20(sp)
 400287c:	dd000417 	ldw	r20,16(sp)
 4002880:	dcc00317 	ldw	r19,12(sp)
 4002884:	dc800217 	ldw	r18,8(sp)
 4002888:	dc400117 	ldw	r17,4(sp)
 400288c:	dc000017 	ldw	r16,0(sp)
 4002890:	dec00a04 	addi	sp,sp,40
 4002894:	f800283a 	ret

04002898 <_ZN13EthernetClass5beginEPh9IPAddress>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip)
{
 4002898:	defffb04 	addi	sp,sp,-20
 400289c:	dfc00415 	stw	ra,16(sp)
 40028a0:	df000315 	stw	fp,12(sp)
 40028a4:	df000304 	addi	fp,sp,12
 40028a8:	e13ffe15 	stw	r4,-8(fp)
 40028ac:	e17fff15 	stw	r5,-4(fp)
	// Assume the DNS server will be the machine on the same network as the local IP
	// but with last octet being '1'
	IPAddress dns = ip;
 40028b0:	e0bfff17 	ldw	r2,-4(fp)
 40028b4:	e0bffd15 	stw	r2,-12(fp)
	dns[3] = 1;
 40028b8:	014000c4 	movi	r5,3
 40028bc:	e13ffd04 	addi	r4,fp,-12
 40028c0:	40025c40 	call	40025c4 <_ZN9IPAddressixEi>
 40028c4:	1007883a 	mov	r3,r2
 40028c8:	00800044 	movi	r2,1
 40028cc:	18800005 	stb	r2,0(r3)
	begin(mac, ip, dns);
 40028d0:	e1bffd17 	ldw	r6,-12(fp)
 40028d4:	e17fff17 	ldw	r5,-4(fp)
 40028d8:	e13ffe17 	ldw	r4,-8(fp)
 40028dc:	40028f80 	call	40028f8 <_ZN13EthernetClass5beginEPh9IPAddressS1_>
}
 40028e0:	0001883a 	nop
 40028e4:	e037883a 	mov	sp,fp
 40028e8:	dfc00117 	ldw	ra,4(sp)
 40028ec:	df000017 	ldw	fp,0(sp)
 40028f0:	dec00204 	addi	sp,sp,8
 40028f4:	f800283a 	ret

040028f8 <_ZN13EthernetClass5beginEPh9IPAddressS1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns)
{
 40028f8:	defffa04 	addi	sp,sp,-24
 40028fc:	dfc00515 	stw	ra,20(sp)
 4002900:	df000415 	stw	fp,16(sp)
 4002904:	df000404 	addi	fp,sp,16
 4002908:	e13ffd15 	stw	r4,-12(fp)
 400290c:	e17ffe15 	stw	r5,-8(fp)
 4002910:	e1bfff15 	stw	r6,-4(fp)
	// Assume the gateway will be the machine on the same network as the local IP
	// but with last octet being '1'
	IPAddress gateway = ip;
 4002914:	e0bffe17 	ldw	r2,-8(fp)
 4002918:	e0bffc15 	stw	r2,-16(fp)
	gateway[3] = 1;
 400291c:	014000c4 	movi	r5,3
 4002920:	e13ffc04 	addi	r4,fp,-16
 4002924:	40025c40 	call	40025c4 <_ZN9IPAddressixEi>
 4002928:	1007883a 	mov	r3,r2
 400292c:	00800044 	movi	r2,1
 4002930:	18800005 	stb	r2,0(r3)
	begin(mac, ip, dns, gateway);
 4002934:	e1fffc17 	ldw	r7,-16(fp)
 4002938:	e1bfff17 	ldw	r6,-4(fp)
 400293c:	e17ffe17 	ldw	r5,-8(fp)
 4002940:	e13ffd17 	ldw	r4,-12(fp)
 4002944:	40029600 	call	4002960 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>
}
 4002948:	0001883a 	nop
 400294c:	e037883a 	mov	sp,fp
 4002950:	dfc00117 	ldw	ra,4(sp)
 4002954:	df000017 	ldw	fp,0(sp)
 4002958:	dec00204 	addi	sp,sp,8
 400295c:	f800283a 	ret

04002960 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway)
{
 4002960:	defff804 	addi	sp,sp,-32
 4002964:	dfc00715 	stw	ra,28(sp)
 4002968:	df000615 	stw	fp,24(sp)
 400296c:	df000604 	addi	fp,sp,24
 4002970:	e13ffc15 	stw	r4,-16(fp)
 4002974:	e17ffd15 	stw	r5,-12(fp)
 4002978:	e1bffe15 	stw	r6,-8(fp)
 400297c:	e1ffff15 	stw	r7,-4(fp)
	IPAddress subnet(255, 255, 255, 0);
 4002980:	d8000015 	stw	zero,0(sp)
 4002984:	01c03fc4 	movi	r7,255
 4002988:	01803fc4 	movi	r6,255
 400298c:	01403fc4 	movi	r5,255
 4002990:	e13ffb04 	addi	r4,fp,-20
 4002994:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
	begin(mac, ip, dns, gateway, subnet);
 4002998:	e0bffb17 	ldw	r2,-20(fp)
 400299c:	d8800015 	stw	r2,0(sp)
 40029a0:	e1ffff17 	ldw	r7,-4(fp)
 40029a4:	e1bffe17 	ldw	r6,-8(fp)
 40029a8:	e17ffd17 	ldw	r5,-12(fp)
 40029ac:	e13ffc17 	ldw	r4,-16(fp)
 40029b0:	40029cc0 	call	40029cc <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
}
 40029b4:	0001883a 	nop
 40029b8:	e037883a 	mov	sp,fp
 40029bc:	dfc00117 	ldw	ra,4(sp)
 40029c0:	df000017 	ldw	fp,0(sp)
 40029c4:	dec00204 	addi	sp,sp,8
 40029c8:	f800283a 	ret

040029cc <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway, IPAddress subnet)
{
 40029cc:	defffa04 	addi	sp,sp,-24
 40029d0:	dfc00515 	stw	ra,20(sp)
 40029d4:	df000415 	stw	fp,16(sp)
 40029d8:	df000404 	addi	fp,sp,16
 40029dc:	e13ffc15 	stw	r4,-16(fp)
 40029e0:	e17ffd15 	stw	r5,-12(fp)
 40029e4:	e1bffe15 	stw	r6,-8(fp)
 40029e8:	e1ffff15 	stw	r7,-4(fp)
	if (W5100.init() == 0) return;
 40029ec:	40076b80 	call	40076b8 <_ZN10W5100Class4initEv>
 40029f0:	10803fcc 	andi	r2,r2,255
 40029f4:	1005003a 	cmpeq	r2,r2,zero
 40029f8:	10803fcc 	andi	r2,r2,255
 40029fc:	10001d1e 	bne	r2,zero,4002a74 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0xa8>
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002a00:	0009883a 	mov	r4,zero
 4002a04:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.setMACAddress(mac);
 4002a08:	e17ffc17 	ldw	r5,-16(fp)
 4002a0c:	d13ca884 	addi	r4,gp,-3422
 4002a10:	40031fc0 	call	40031fc <_ZN10W5100Class13setMACAddressEPKh>
//#ifdef ESP8266
	W5100.setIPAddress(&ip[0]);
 4002a14:	e0bffd04 	addi	r2,fp,-12
 4002a18:	000b883a 	mov	r5,zero
 4002a1c:	1009883a 	mov	r4,r2
 4002a20:	40025c40 	call	40025c4 <_ZN9IPAddressixEi>
 4002a24:	100b883a 	mov	r5,r2
 4002a28:	d13ca884 	addi	r4,gp,-3422
 4002a2c:	400326c0 	call	400326c <_ZN10W5100Class12setIPAddressEPKh>
	W5100.setGatewayIp(&gateway[0]);
 4002a30:	e0bfff04 	addi	r2,fp,-4
 4002a34:	000b883a 	mov	r5,zero
 4002a38:	1009883a 	mov	r4,r2
 4002a3c:	40025c40 	call	40025c4 <_ZN9IPAddressixEi>
 4002a40:	100b883a 	mov	r5,r2
 4002a44:	d13ca884 	addi	r4,gp,-3422
 4002a48:	400311c0 	call	400311c <_ZN10W5100Class12setGatewayIpEPKh>
	W5100.setSubnetMask(&subnet[0]);
 4002a4c:	000b883a 	mov	r5,zero
 4002a50:	e1000204 	addi	r4,fp,8
 4002a54:	40025c40 	call	40025c4 <_ZN9IPAddressixEi>
 4002a58:	100b883a 	mov	r5,r2
 4002a5c:	d13ca884 	addi	r4,gp,-3422
 4002a60:	400318c0 	call	400318c <_ZN10W5100Class13setSubnetMaskEPKh>
//#else
//	W5100.setIPAddress(ip._address);
//	W5100.setGatewayIp(gateway._address);
//	W5100.setSubnetMask(subnet._address);
//#endif
	SPI_endTransaction();
 4002a64:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	_dnsServerAddress = dns;
 4002a68:	e0bffe17 	ldw	r2,-8(fp)
 4002a6c:	d0bc9d15 	stw	r2,-3468(gp)
 4002a70:	00000106 	br	4002a78 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0xac>
	begin(mac, ip, dns, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway, IPAddress subnet)
{
	if (W5100.init() == 0) return;
 4002a74:	0001883a 	nop
//	W5100.setGatewayIp(gateway._address);
//	W5100.setSubnetMask(subnet._address);
//#endif
	SPI_endTransaction();
	_dnsServerAddress = dns;
}
 4002a78:	e037883a 	mov	sp,fp
 4002a7c:	dfc00117 	ldw	ra,4(sp)
 4002a80:	df000017 	ldw	fp,0(sp)
 4002a84:	dec00204 	addi	sp,sp,8
 4002a88:	f800283a 	ret

04002a8c <_ZN13EthernetClass4initEh>:

void EthernetClass::init(uint8_t sspin)
{
 4002a8c:	defffd04 	addi	sp,sp,-12
 4002a90:	dfc00215 	stw	ra,8(sp)
 4002a94:	df000115 	stw	fp,4(sp)
 4002a98:	df000104 	addi	fp,sp,4
 4002a9c:	2005883a 	mov	r2,r4
 4002aa0:	e0bfff05 	stb	r2,-4(fp)
	W5100.setSS(sspin);
 4002aa4:	e0bfff03 	ldbu	r2,-4(fp)
 4002aa8:	1009883a 	mov	r4,r2
 4002aac:	400361c0 	call	400361c <_ZN10W5100Class5setSSEh>
}
 4002ab0:	0001883a 	nop
 4002ab4:	e037883a 	mov	sp,fp
 4002ab8:	dfc00117 	ldw	ra,4(sp)
 4002abc:	df000017 	ldw	fp,0(sp)
 4002ac0:	dec00204 	addi	sp,sp,8
 4002ac4:	f800283a 	ret

04002ac8 <_ZN13EthernetClass10linkStatusEv>:

EthernetLinkStatus EthernetClass::linkStatus()
{
 4002ac8:	defffe04 	addi	sp,sp,-8
 4002acc:	dfc00115 	stw	ra,4(sp)
 4002ad0:	df000015 	stw	fp,0(sp)
 4002ad4:	d839883a 	mov	fp,sp
	switch (W5100.getLinkStatus()) {
 4002ad8:	4007af40 	call	4007af4 <_ZN10W5100Class13getLinkStatusEv>
 4002adc:	10c00060 	cmpeqi	r3,r2,1
 4002ae0:	1800051e 	bne	r3,zero,4002af8 <_ZN13EthernetClass10linkStatusEv+0x30>
 4002ae4:	10c000a0 	cmpeqi	r3,r2,2
 4002ae8:	1800051e 	bne	r3,zero,4002b00 <_ZN13EthernetClass10linkStatusEv+0x38>
 4002aec:	1000061e 	bne	r2,zero,4002b08 <_ZN13EthernetClass10linkStatusEv+0x40>
		case UNKNOWN:  return Unknown;
 4002af0:	0005883a 	mov	r2,zero
 4002af4:	00000506 	br	4002b0c <_ZN13EthernetClass10linkStatusEv+0x44>
		case LINK_ON:  return LinkON;
 4002af8:	00800044 	movi	r2,1
 4002afc:	00000306 	br	4002b0c <_ZN13EthernetClass10linkStatusEv+0x44>
		case LINK_OFF: return LinkOFF;
 4002b00:	00800084 	movi	r2,2
 4002b04:	00000106 	br	4002b0c <_ZN13EthernetClass10linkStatusEv+0x44>
		default:       return Unknown;
 4002b08:	0005883a 	mov	r2,zero
	}
}
 4002b0c:	e037883a 	mov	sp,fp
 4002b10:	dfc00117 	ldw	ra,4(sp)
 4002b14:	df000017 	ldw	fp,0(sp)
 4002b18:	dec00204 	addi	sp,sp,8
 4002b1c:	f800283a 	ret

04002b20 <_ZN13EthernetClass14hardwareStatusEv>:

EthernetHardwareStatus EthernetClass::hardwareStatus()
{
 4002b20:	defffe04 	addi	sp,sp,-8
 4002b24:	dfc00115 	stw	ra,4(sp)
 4002b28:	df000015 	stw	fp,0(sp)
 4002b2c:	d839883a 	mov	fp,sp
	switch (W5100.getChip()) {
 4002b30:	40035fc0 	call	40035fc <_ZN10W5100Class7getChipEv>
 4002b34:	10803fcc 	andi	r2,r2,255
 4002b38:	10c00d20 	cmpeqi	r3,r2,52
 4002b3c:	1800061e 	bne	r3,zero,4002b58 <_ZN13EthernetClass14hardwareStatusEv+0x38>
 4002b40:	10c00de0 	cmpeqi	r3,r2,55
 4002b44:	1800061e 	bne	r3,zero,4002b60 <_ZN13EthernetClass14hardwareStatusEv+0x40>
 4002b48:	10800ce0 	cmpeqi	r2,r2,51
 4002b4c:	10000626 	beq	r2,zero,4002b68 <_ZN13EthernetClass14hardwareStatusEv+0x48>
		case 51: return EthernetW5100;
 4002b50:	00800044 	movi	r2,1
 4002b54:	00000506 	br	4002b6c <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		case 52: return EthernetW5200;
 4002b58:	00800084 	movi	r2,2
 4002b5c:	00000306 	br	4002b6c <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		case 55: return EthernetW5500;
 4002b60:	008000c4 	movi	r2,3
 4002b64:	00000106 	br	4002b6c <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		default: return EthernetNoHardware;
 4002b68:	0005883a 	mov	r2,zero
	}
}
 4002b6c:	e037883a 	mov	sp,fp
 4002b70:	dfc00117 	ldw	ra,4(sp)
 4002b74:	df000017 	ldw	fp,0(sp)
 4002b78:	dec00204 	addi	sp,sp,8
 4002b7c:	f800283a 	ret

04002b80 <_ZN13EthernetClass8maintainEv>:

int EthernetClass::maintain()
{
 4002b80:	defffa04 	addi	sp,sp,-24
 4002b84:	dfc00515 	stw	ra,20(sp)
 4002b88:	df000415 	stw	fp,16(sp)
 4002b8c:	df000404 	addi	fp,sp,16
	int rc = DHCP_CHECK_NONE;
 4002b90:	e03ffc15 	stw	zero,-16(fp)
	if (_dhcp != NULL) {
 4002b94:	d0bc9e17 	ldw	r2,-3464(gp)
 4002b98:	10003226 	beq	r2,zero,4002c64 <_ZN13EthernetClass8maintainEv+0xe4>
		// we have a pointer to dhcp, use it
		rc = _dhcp->checkLease();
 4002b9c:	d0bc9e17 	ldw	r2,-3464(gp)
 4002ba0:	1009883a 	mov	r4,r2
 4002ba4:	40016140 	call	4001614 <_ZN9DhcpClass10checkLeaseEv>
 4002ba8:	e0bffc15 	stw	r2,-16(fp)
		switch (rc) {
 4002bac:	e0bffc17 	ldw	r2,-16(fp)
 4002bb0:	10c000a0 	cmpeqi	r3,r2,2
 4002bb4:	1800041e 	bne	r3,zero,4002bc8 <_ZN13EthernetClass8maintainEv+0x48>
 4002bb8:	10c00120 	cmpeqi	r3,r2,4
 4002bbc:	1800021e 	bne	r3,zero,4002bc8 <_ZN13EthernetClass8maintainEv+0x48>
 4002bc0:	10002726 	beq	r2,zero,4002c60 <_ZN13EthernetClass8maintainEv+0xe0>
			SPI_endTransaction();
			_dnsServerAddress = _dhcp->getDnsServerIp();
			break;
		default:
			//this is actually an error, it will retry though
			break;
 4002bc4:	00002706 	br	4002c64 <_ZN13EthernetClass8maintainEv+0xe4>
			//nothing done
			break;
		case DHCP_CHECK_RENEW_OK:
		case DHCP_CHECK_REBIND_OK:
			//we might have got a new IP.
			SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002bc8:	0009883a 	mov	r4,zero
 4002bcc:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
			W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
 4002bd0:	d0bc9e17 	ldw	r2,-3464(gp)
 4002bd4:	1009883a 	mov	r4,r2
 4002bd8:	40017a00 	call	40017a0 <_ZN9DhcpClass10getLocalIpEv>
 4002bdc:	e0bfff15 	stw	r2,-4(fp)
 4002be0:	e0bfff04 	addi	r2,fp,-4
 4002be4:	1009883a 	mov	r4,r2
 4002be8:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 4002bec:	100b883a 	mov	r5,r2
 4002bf0:	d13ca884 	addi	r4,gp,-3422
 4002bf4:	400326c0 	call	400326c <_ZN10W5100Class12setIPAddressEPKh>
			W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
 4002bf8:	d0bc9e17 	ldw	r2,-3464(gp)
 4002bfc:	1009883a 	mov	r4,r2
 4002c00:	40018200 	call	4001820 <_ZN9DhcpClass12getGatewayIpEv>
 4002c04:	e0bffe15 	stw	r2,-8(fp)
 4002c08:	e0bffe04 	addi	r2,fp,-8
 4002c0c:	1009883a 	mov	r4,r2
 4002c10:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 4002c14:	100b883a 	mov	r5,r2
 4002c18:	d13ca884 	addi	r4,gp,-3422
 4002c1c:	400311c0 	call	400311c <_ZN10W5100Class12setGatewayIpEPKh>
			W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
 4002c20:	d0bc9e17 	ldw	r2,-3464(gp)
 4002c24:	1009883a 	mov	r4,r2
 4002c28:	40017e00 	call	40017e0 <_ZN9DhcpClass13getSubnetMaskEv>
 4002c2c:	e0bffd15 	stw	r2,-12(fp)
 4002c30:	e0bffd04 	addi	r2,fp,-12
 4002c34:	1009883a 	mov	r4,r2
 4002c38:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 4002c3c:	100b883a 	mov	r5,r2
 4002c40:	d13ca884 	addi	r4,gp,-3422
 4002c44:	400318c0 	call	400318c <_ZN10W5100Class13setSubnetMaskEPKh>
			SPI_endTransaction();
 4002c48:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
			_dnsServerAddress = _dhcp->getDnsServerIp();
 4002c4c:	d0bc9e17 	ldw	r2,-3464(gp)
 4002c50:	1009883a 	mov	r4,r2
 4002c54:	40018a00 	call	40018a0 <_ZN9DhcpClass14getDnsServerIpEv>
 4002c58:	d0bc9d15 	stw	r2,-3468(gp)
			break;
 4002c5c:	00000106 	br	4002c64 <_ZN13EthernetClass8maintainEv+0xe4>
		// we have a pointer to dhcp, use it
		rc = _dhcp->checkLease();
		switch (rc) {
		case DHCP_CHECK_NONE:
			//nothing done
			break;
 4002c60:	0001883a 	nop
		default:
			//this is actually an error, it will retry though
			break;
		}
	}
	return rc;
 4002c64:	e0bffc17 	ldw	r2,-16(fp)
}
 4002c68:	e037883a 	mov	sp,fp
 4002c6c:	dfc00117 	ldw	ra,4(sp)
 4002c70:	df000017 	ldw	fp,0(sp)
 4002c74:	dec00204 	addi	sp,sp,8
 4002c78:	f800283a 	ret

04002c7c <_ZN13EthernetClass10MACAddressEPh>:


void EthernetClass::MACAddress(uint8_t *mac_address)
{
 4002c7c:	defffd04 	addi	sp,sp,-12
 4002c80:	dfc00215 	stw	ra,8(sp)
 4002c84:	df000115 	stw	fp,4(sp)
 4002c88:	df000104 	addi	fp,sp,4
 4002c8c:	e13fff15 	stw	r4,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002c90:	0009883a 	mov	r4,zero
 4002c94:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.getMACAddress(mac_address);
 4002c98:	e17fff17 	ldw	r5,-4(fp)
 4002c9c:	d13ca884 	addi	r4,gp,-3422
 4002ca0:	40032340 	call	4003234 <_ZN10W5100Class13getMACAddressEPh>
	SPI_endTransaction();
 4002ca4:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
}
 4002ca8:	0001883a 	nop
 4002cac:	e037883a 	mov	sp,fp
 4002cb0:	dfc00117 	ldw	ra,4(sp)
 4002cb4:	df000017 	ldw	fp,0(sp)
 4002cb8:	dec00204 	addi	sp,sp,8
 4002cbc:	f800283a 	ret

04002cc0 <_ZN13EthernetClass7localIPEv>:

IPAddress EthernetClass::localIP()
{
 4002cc0:	defffd04 	addi	sp,sp,-12
 4002cc4:	dfc00215 	stw	ra,8(sp)
 4002cc8:	df000115 	stw	fp,4(sp)
 4002ccc:	df000104 	addi	fp,sp,4
	IPAddress ret;
 4002cd0:	e13fff04 	addi	r4,fp,-4
 4002cd4:	400717c0 	call	400717c <_ZN9IPAddressC1Ev>
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002cd8:	0009883a 	mov	r4,zero
 4002cdc:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.getIPAddress(ret.raw_address());
 4002ce0:	e13fff04 	addi	r4,fp,-4
 4002ce4:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 4002ce8:	100b883a 	mov	r5,r2
 4002cec:	d13ca884 	addi	r4,gp,-3422
 4002cf0:	40032a40 	call	40032a4 <_ZN10W5100Class12getIPAddressEPh>
	SPI_endTransaction();
 4002cf4:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return ret;
 4002cf8:	e0bfff17 	ldw	r2,-4(fp)
}
 4002cfc:	e037883a 	mov	sp,fp
 4002d00:	dfc00117 	ldw	ra,4(sp)
 4002d04:	df000017 	ldw	fp,0(sp)
 4002d08:	dec00204 	addi	sp,sp,8
 4002d0c:	f800283a 	ret

04002d10 <_ZN13EthernetClass10subnetMaskEv>:

IPAddress EthernetClass::subnetMask()
{
 4002d10:	defffd04 	addi	sp,sp,-12
 4002d14:	dfc00215 	stw	ra,8(sp)
 4002d18:	df000115 	stw	fp,4(sp)
 4002d1c:	df000104 	addi	fp,sp,4
	IPAddress ret;
 4002d20:	e13fff04 	addi	r4,fp,-4
 4002d24:	400717c0 	call	400717c <_ZN9IPAddressC1Ev>
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002d28:	0009883a 	mov	r4,zero
 4002d2c:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.getSubnetMask(ret.raw_address());
 4002d30:	e13fff04 	addi	r4,fp,-4
 4002d34:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 4002d38:	100b883a 	mov	r5,r2
 4002d3c:	d13ca884 	addi	r4,gp,-3422
 4002d40:	40031c40 	call	40031c4 <_ZN10W5100Class13getSubnetMaskEPh>
	SPI_endTransaction();
 4002d44:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return ret;
 4002d48:	e0bfff17 	ldw	r2,-4(fp)
}
 4002d4c:	e037883a 	mov	sp,fp
 4002d50:	dfc00117 	ldw	ra,4(sp)
 4002d54:	df000017 	ldw	fp,0(sp)
 4002d58:	dec00204 	addi	sp,sp,8
 4002d5c:	f800283a 	ret

04002d60 <_ZN13EthernetClass9gatewayIPEv>:

IPAddress EthernetClass::gatewayIP()
{
 4002d60:	defffd04 	addi	sp,sp,-12
 4002d64:	dfc00215 	stw	ra,8(sp)
 4002d68:	df000115 	stw	fp,4(sp)
 4002d6c:	df000104 	addi	fp,sp,4
	IPAddress ret;
 4002d70:	e13fff04 	addi	r4,fp,-4
 4002d74:	400717c0 	call	400717c <_ZN9IPAddressC1Ev>
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002d78:	0009883a 	mov	r4,zero
 4002d7c:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.getGatewayIp(ret.raw_address());
 4002d80:	e13fff04 	addi	r4,fp,-4
 4002d84:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 4002d88:	100b883a 	mov	r5,r2
 4002d8c:	d13ca884 	addi	r4,gp,-3422
 4002d90:	40031540 	call	4003154 <_ZN10W5100Class12getGatewayIpEPh>
	SPI_endTransaction();
 4002d94:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return ret;
 4002d98:	e0bfff17 	ldw	r2,-4(fp)
}
 4002d9c:	e037883a 	mov	sp,fp
 4002da0:	dfc00117 	ldw	ra,4(sp)
 4002da4:	df000017 	ldw	fp,0(sp)
 4002da8:	dec00204 	addi	sp,sp,8
 4002dac:	f800283a 	ret

04002db0 <_ZN13EthernetClass13setMACAddressEPKh>:

void EthernetClass::setMACAddress(const uint8_t *mac_address)
{
 4002db0:	defffc04 	addi	sp,sp,-16
 4002db4:	dfc00315 	stw	ra,12(sp)
 4002db8:	df000215 	stw	fp,8(sp)
 4002dbc:	df000204 	addi	fp,sp,8
 4002dc0:	e13ffe15 	stw	r4,-8(fp)
 4002dc4:	e17fff15 	stw	r5,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002dc8:	0009883a 	mov	r4,zero
 4002dcc:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.setMACAddress(mac_address);
 4002dd0:	e17fff17 	ldw	r5,-4(fp)
 4002dd4:	d13ca884 	addi	r4,gp,-3422
 4002dd8:	40031fc0 	call	40031fc <_ZN10W5100Class13setMACAddressEPKh>
	SPI_endTransaction();
 4002ddc:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
}
 4002de0:	0001883a 	nop
 4002de4:	e037883a 	mov	sp,fp
 4002de8:	dfc00117 	ldw	ra,4(sp)
 4002dec:	df000017 	ldw	fp,0(sp)
 4002df0:	dec00204 	addi	sp,sp,8
 4002df4:	f800283a 	ret

04002df8 <_ZN13EthernetClass10setLocalIPE9IPAddress>:

void EthernetClass::setLocalIP(const IPAddress local_ip)
{
 4002df8:	defffb04 	addi	sp,sp,-20
 4002dfc:	dfc00415 	stw	ra,16(sp)
 4002e00:	df000315 	stw	fp,12(sp)
 4002e04:	df000304 	addi	fp,sp,12
 4002e08:	e13ffe15 	stw	r4,-8(fp)
 4002e0c:	e17fff15 	stw	r5,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002e10:	0009883a 	mov	r4,zero
 4002e14:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	IPAddress ip = local_ip;
 4002e18:	e0bfff17 	ldw	r2,-4(fp)
 4002e1c:	e0bffd15 	stw	r2,-12(fp)
	W5100.setIPAddress(ip.raw_address());
 4002e20:	e13ffd04 	addi	r4,fp,-12
 4002e24:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 4002e28:	100b883a 	mov	r5,r2
 4002e2c:	d13ca884 	addi	r4,gp,-3422
 4002e30:	400326c0 	call	400326c <_ZN10W5100Class12setIPAddressEPKh>
	SPI_endTransaction();
 4002e34:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
}
 4002e38:	0001883a 	nop
 4002e3c:	e037883a 	mov	sp,fp
 4002e40:	dfc00117 	ldw	ra,4(sp)
 4002e44:	df000017 	ldw	fp,0(sp)
 4002e48:	dec00204 	addi	sp,sp,8
 4002e4c:	f800283a 	ret

04002e50 <_ZN13EthernetClass13setSubnetMaskE9IPAddress>:

void EthernetClass::setSubnetMask(const IPAddress subnet)
{
 4002e50:	defffb04 	addi	sp,sp,-20
 4002e54:	dfc00415 	stw	ra,16(sp)
 4002e58:	df000315 	stw	fp,12(sp)
 4002e5c:	df000304 	addi	fp,sp,12
 4002e60:	e13ffe15 	stw	r4,-8(fp)
 4002e64:	e17fff15 	stw	r5,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002e68:	0009883a 	mov	r4,zero
 4002e6c:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	IPAddress ip = subnet;
 4002e70:	e0bfff17 	ldw	r2,-4(fp)
 4002e74:	e0bffd15 	stw	r2,-12(fp)
	W5100.setSubnetMask(ip.raw_address());
 4002e78:	e13ffd04 	addi	r4,fp,-12
 4002e7c:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 4002e80:	100b883a 	mov	r5,r2
 4002e84:	d13ca884 	addi	r4,gp,-3422
 4002e88:	400318c0 	call	400318c <_ZN10W5100Class13setSubnetMaskEPKh>
	SPI_endTransaction();
 4002e8c:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
}
 4002e90:	0001883a 	nop
 4002e94:	e037883a 	mov	sp,fp
 4002e98:	dfc00117 	ldw	ra,4(sp)
 4002e9c:	df000017 	ldw	fp,0(sp)
 4002ea0:	dec00204 	addi	sp,sp,8
 4002ea4:	f800283a 	ret

04002ea8 <_ZN13EthernetClass12setGatewayIPE9IPAddress>:

void EthernetClass::setGatewayIP(const IPAddress gateway)
{
 4002ea8:	defffb04 	addi	sp,sp,-20
 4002eac:	dfc00415 	stw	ra,16(sp)
 4002eb0:	df000315 	stw	fp,12(sp)
 4002eb4:	df000304 	addi	fp,sp,12
 4002eb8:	e13ffe15 	stw	r4,-8(fp)
 4002ebc:	e17fff15 	stw	r5,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002ec0:	0009883a 	mov	r4,zero
 4002ec4:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	IPAddress ip = gateway;
 4002ec8:	e0bfff17 	ldw	r2,-4(fp)
 4002ecc:	e0bffd15 	stw	r2,-12(fp)
	W5100.setGatewayIp(ip.raw_address());
 4002ed0:	e13ffd04 	addi	r4,fp,-12
 4002ed4:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 4002ed8:	100b883a 	mov	r5,r2
 4002edc:	d13ca884 	addi	r4,gp,-3422
 4002ee0:	400311c0 	call	400311c <_ZN10W5100Class12setGatewayIpEPKh>
	SPI_endTransaction();
 4002ee4:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
}
 4002ee8:	0001883a 	nop
 4002eec:	e037883a 	mov	sp,fp
 4002ef0:	dfc00117 	ldw	ra,4(sp)
 4002ef4:	df000017 	ldw	fp,0(sp)
 4002ef8:	dec00204 	addi	sp,sp,8
 4002efc:	f800283a 	ret

04002f00 <_ZN13EthernetClass24setRetransmissionTimeoutEt>:

void EthernetClass::setRetransmissionTimeout(uint16_t milliseconds)
{
 4002f00:	defffc04 	addi	sp,sp,-16
 4002f04:	dfc00315 	stw	ra,12(sp)
 4002f08:	df000215 	stw	fp,8(sp)
 4002f0c:	df000204 	addi	fp,sp,8
 4002f10:	e13ffe15 	stw	r4,-8(fp)
 4002f14:	2805883a 	mov	r2,r5
 4002f18:	e0bfff0d 	sth	r2,-4(fp)
	if (milliseconds > 6553) milliseconds = 6553;
 4002f1c:	e0bfff0b 	ldhu	r2,-4(fp)
 4002f20:	108666b0 	cmpltui	r2,r2,6554
 4002f24:	1000021e 	bne	r2,zero,4002f30 <_ZN13EthernetClass24setRetransmissionTimeoutEt+0x30>
 4002f28:	00866644 	movi	r2,6553
 4002f2c:	e0bfff0d 	sth	r2,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002f30:	0009883a 	mov	r4,zero
 4002f34:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.setRetransmissionTime(milliseconds * 10);
 4002f38:	e0bfff0b 	ldhu	r2,-4(fp)
 4002f3c:	108002a4 	muli	r2,r2,10
 4002f40:	10bfffcc 	andi	r2,r2,65535
 4002f44:	100b883a 	mov	r5,r2
 4002f48:	d13ca884 	addi	r4,gp,-3422
 4002f4c:	40032dc0 	call	40032dc <_ZN10W5100Class21setRetransmissionTimeEt>
	SPI_endTransaction();
 4002f50:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
}
 4002f54:	0001883a 	nop
 4002f58:	e037883a 	mov	sp,fp
 4002f5c:	dfc00117 	ldw	ra,4(sp)
 4002f60:	df000017 	ldw	fp,0(sp)
 4002f64:	dec00204 	addi	sp,sp,8
 4002f68:	f800283a 	ret

04002f6c <_ZN13EthernetClass22setRetransmissionCountEh>:

void EthernetClass::setRetransmissionCount(uint8_t num)
{
 4002f6c:	defffc04 	addi	sp,sp,-16
 4002f70:	dfc00315 	stw	ra,12(sp)
 4002f74:	df000215 	stw	fp,8(sp)
 4002f78:	df000204 	addi	fp,sp,8
 4002f7c:	e13ffe15 	stw	r4,-8(fp)
 4002f80:	2805883a 	mov	r2,r5
 4002f84:	e0bfff05 	stb	r2,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4002f88:	0009883a 	mov	r4,zero
 4002f8c:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.setRetransmissionCount(num);
 4002f90:	e0bfff03 	ldbu	r2,-4(fp)
 4002f94:	100b883a 	mov	r5,r2
 4002f98:	d13ca884 	addi	r4,gp,-3422
 4002f9c:	400331c0 	call	400331c <_ZN10W5100Class22setRetransmissionCountEh>
	SPI_endTransaction();
 4002fa0:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
}
 4002fa4:	0001883a 	nop
 4002fa8:	e037883a 	mov	sp,fp
 4002fac:	dfc00117 	ldw	ra,4(sp)
 4002fb0:	df000017 	ldw	fp,0(sp)
 4002fb4:	dec00204 	addi	sp,sp,8
 4002fb8:	f800283a 	ret

04002fbc <_Z41__static_initialization_and_destruction_0ii>:





EthernetClass Ethernet;
 4002fbc:	defffb04 	addi	sp,sp,-20
 4002fc0:	dfc00415 	stw	ra,16(sp)
 4002fc4:	df000315 	stw	fp,12(sp)
 4002fc8:	df000304 	addi	fp,sp,12
 4002fcc:	e13ffe15 	stw	r4,-8(fp)
 4002fd0:	e17fff15 	stw	r5,-4(fp)
 4002fd4:	e0bffe17 	ldw	r2,-8(fp)
 4002fd8:	10800058 	cmpnei	r2,r2,1
 4002fdc:	10000b1e 	bne	r2,zero,400300c <_Z41__static_initialization_and_destruction_0ii+0x50>
 4002fe0:	e0ffff17 	ldw	r3,-4(fp)
 4002fe4:	00bfffd4 	movui	r2,65535
 4002fe8:	1880081e 	bne	r3,r2,400300c <_Z41__static_initialization_and_destruction_0ii+0x50>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4002fec:	d8000015 	stw	zero,0(sp)
 4002ff0:	000f883a 	mov	r7,zero
 4002ff4:	000d883a 	mov	r6,zero
 4002ff8:	000b883a 	mov	r5,zero
 4002ffc:	d13c9c04 	addi	r4,gp,-3472
 4003000:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
#include "Ethernet.h"

#include "Dhcp.h"
#include "utility/w5100.h"

IPAddress EthernetClass::_dnsServerAddress;
 4003004:	d13c9d04 	addi	r4,gp,-3468
 4003008:	400717c0 	call	400717c <_ZN9IPAddressC1Ev>





EthernetClass Ethernet;
 400300c:	0001883a 	nop
 4003010:	e037883a 	mov	sp,fp
 4003014:	dfc00117 	ldw	ra,4(sp)
 4003018:	df000017 	ldw	fp,0(sp)
 400301c:	dec00204 	addi	sp,sp,8
 4003020:	f800283a 	ret

04003024 <_GLOBAL__sub_I__ZN13EthernetClass17_dnsServerAddressE>:
 4003024:	defffe04 	addi	sp,sp,-8
 4003028:	dfc00115 	stw	ra,4(sp)
 400302c:	df000015 	stw	fp,0(sp)
 4003030:	d839883a 	mov	fp,sp
 4003034:	017fffd4 	movui	r5,65535
 4003038:	01000044 	movi	r4,1
 400303c:	4002fbc0 	call	4002fbc <_Z41__static_initialization_and_destruction_0ii>
 4003040:	e037883a 	mov	sp,fp
 4003044:	dfc00117 	ldw	ra,4(sp)
 4003048:	df000017 	ldw	fp,0(sp)
 400304c:	dec00204 	addi	sp,sp,8
 4003050:	f800283a 	ret

04003054 <_ZN3UDP14beginMulticastE9IPAddresst>:
#include "utility/IPAddress.h"

class UDP  {
public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
 4003054:	defffc04 	addi	sp,sp,-16
 4003058:	df000315 	stw	fp,12(sp)
 400305c:	df000304 	addi	fp,sp,12
 4003060:	e13ffd15 	stw	r4,-12(fp)
 4003064:	e17ffe15 	stw	r5,-8(fp)
 4003068:	3005883a 	mov	r2,r6
 400306c:	e0bfff0d 	sth	r2,-4(fp)
 4003070:	0005883a 	mov	r2,zero
 4003074:	e037883a 	mov	sp,fp
 4003078:	df000017 	ldw	fp,0(sp)
 400307c:	dec00104 	addi	sp,sp,4
 4003080:	f800283a 	ret

04003084 <_ZN3UDPC1Ev>:
#ifndef udp_h
#define udp_h

#include "utility/IPAddress.h"

class UDP  {
 4003084:	defffe04 	addi	sp,sp,-8
 4003088:	df000115 	stw	fp,4(sp)
 400308c:	df000104 	addi	fp,sp,4
 4003090:	e13fff15 	stw	r4,-4(fp)
 4003094:	008100b4 	movhi	r2,1026
 4003098:	10a8b204 	addi	r2,r2,-23864
 400309c:	e0ffff17 	ldw	r3,-4(fp)
 40030a0:	18800015 	stw	r2,0(r3)
 40030a4:	0001883a 	nop
 40030a8:	e037883a 	mov	sp,fp
 40030ac:	df000017 	ldw	fp,0(sp)
 40030b0:	dec00104 	addi	sp,sp,4
 40030b4:	f800283a 	ret

040030b8 <_ZN11EthernetUDPC1Ev>:
protected:
	uint8_t sockindex;
	uint16_t _remaining; // remaining bytes of incoming packet yet to be processed

public:
	EthernetUDP() : sockindex(MAX_SOCK_NUM) {}  // Constructor
 40030b8:	defffd04 	addi	sp,sp,-12
 40030bc:	dfc00215 	stw	ra,8(sp)
 40030c0:	df000115 	stw	fp,4(sp)
 40030c4:	df000104 	addi	fp,sp,4
 40030c8:	e13fff15 	stw	r4,-4(fp)
 40030cc:	e0bfff17 	ldw	r2,-4(fp)
 40030d0:	1009883a 	mov	r4,r2
 40030d4:	40030840 	call	4003084 <_ZN3UDPC1Ev>
 40030d8:	008100b4 	movhi	r2,1026
 40030dc:	10a90204 	addi	r2,r2,-23544
 40030e0:	e0ffff17 	ldw	r3,-4(fp)
 40030e4:	18800015 	stw	r2,0(r3)
 40030e8:	e0bfff17 	ldw	r2,-4(fp)
 40030ec:	10800204 	addi	r2,r2,8
 40030f0:	1009883a 	mov	r4,r2
 40030f4:	400717c0 	call	400717c <_ZN9IPAddressC1Ev>
 40030f8:	e0bfff17 	ldw	r2,-4(fp)
 40030fc:	00c00204 	movi	r3,8
 4003100:	10c00405 	stb	r3,16(r2)
 4003104:	0001883a 	nop
 4003108:	e037883a 	mov	sp,fp
 400310c:	dfc00117 	ldw	ra,4(sp)
 4003110:	df000017 	ldw	fp,0(sp)
 4003114:	dec00204 	addi	sp,sp,8
 4003118:	f800283a 	ret

0400311c <_ZN10W5100Class12setGatewayIpEPKh>:
class W5100Class {

public:
  static uint8_t init(void);

  inline void setGatewayIp(const uint8_t * addr) { writeGAR(addr); }
 400311c:	defffc04 	addi	sp,sp,-16
 4003120:	dfc00315 	stw	ra,12(sp)
 4003124:	df000215 	stw	fp,8(sp)
 4003128:	df000204 	addi	fp,sp,8
 400312c:	e13ffe15 	stw	r4,-8(fp)
 4003130:	e17fff15 	stw	r5,-4(fp)
 4003134:	e13fff17 	ldw	r4,-4(fp)
 4003138:	40033a80 	call	40033a8 <_ZN10W5100Class8writeGAREPKh>
 400313c:	0001883a 	nop
 4003140:	e037883a 	mov	sp,fp
 4003144:	dfc00117 	ldw	ra,4(sp)
 4003148:	df000017 	ldw	fp,0(sp)
 400314c:	dec00204 	addi	sp,sp,8
 4003150:	f800283a 	ret

04003154 <_ZN10W5100Class12getGatewayIpEPh>:
  inline void getGatewayIp(uint8_t * addr) { readGAR(addr); }
 4003154:	defffc04 	addi	sp,sp,-16
 4003158:	dfc00315 	stw	ra,12(sp)
 400315c:	df000215 	stw	fp,8(sp)
 4003160:	df000204 	addi	fp,sp,8
 4003164:	e13ffe15 	stw	r4,-8(fp)
 4003168:	e17fff15 	stw	r5,-4(fp)
 400316c:	e13fff17 	ldw	r4,-4(fp)
 4003170:	40033e00 	call	40033e0 <_ZN10W5100Class7readGAREPh>
 4003174:	0001883a 	nop
 4003178:	e037883a 	mov	sp,fp
 400317c:	dfc00117 	ldw	ra,4(sp)
 4003180:	df000017 	ldw	fp,0(sp)
 4003184:	dec00204 	addi	sp,sp,8
 4003188:	f800283a 	ret

0400318c <_ZN10W5100Class13setSubnetMaskEPKh>:

  inline void setSubnetMask(const uint8_t * addr) { writeSUBR(addr); }
 400318c:	defffc04 	addi	sp,sp,-16
 4003190:	dfc00315 	stw	ra,12(sp)
 4003194:	df000215 	stw	fp,8(sp)
 4003198:	df000204 	addi	fp,sp,8
 400319c:	e13ffe15 	stw	r4,-8(fp)
 40031a0:	e17fff15 	stw	r5,-4(fp)
 40031a4:	e13fff17 	ldw	r4,-4(fp)
 40031a8:	40034180 	call	4003418 <_ZN10W5100Class9writeSUBREPKh>
 40031ac:	0001883a 	nop
 40031b0:	e037883a 	mov	sp,fp
 40031b4:	dfc00117 	ldw	ra,4(sp)
 40031b8:	df000017 	ldw	fp,0(sp)
 40031bc:	dec00204 	addi	sp,sp,8
 40031c0:	f800283a 	ret

040031c4 <_ZN10W5100Class13getSubnetMaskEPh>:
  inline void getSubnetMask(uint8_t * addr) { readSUBR(addr); }
 40031c4:	defffc04 	addi	sp,sp,-16
 40031c8:	dfc00315 	stw	ra,12(sp)
 40031cc:	df000215 	stw	fp,8(sp)
 40031d0:	df000204 	addi	fp,sp,8
 40031d4:	e13ffe15 	stw	r4,-8(fp)
 40031d8:	e17fff15 	stw	r5,-4(fp)
 40031dc:	e13fff17 	ldw	r4,-4(fp)
 40031e0:	40034500 	call	4003450 <_ZN10W5100Class8readSUBREPh>
 40031e4:	0001883a 	nop
 40031e8:	e037883a 	mov	sp,fp
 40031ec:	dfc00117 	ldw	ra,4(sp)
 40031f0:	df000017 	ldw	fp,0(sp)
 40031f4:	dec00204 	addi	sp,sp,8
 40031f8:	f800283a 	ret

040031fc <_ZN10W5100Class13setMACAddressEPKh>:

  inline void setMACAddress(const uint8_t * addr) { writeSHAR(addr); }
 40031fc:	defffc04 	addi	sp,sp,-16
 4003200:	dfc00315 	stw	ra,12(sp)
 4003204:	df000215 	stw	fp,8(sp)
 4003208:	df000204 	addi	fp,sp,8
 400320c:	e13ffe15 	stw	r4,-8(fp)
 4003210:	e17fff15 	stw	r5,-4(fp)
 4003214:	e13fff17 	ldw	r4,-4(fp)
 4003218:	40034880 	call	4003488 <_ZN10W5100Class9writeSHAREPKh>
 400321c:	0001883a 	nop
 4003220:	e037883a 	mov	sp,fp
 4003224:	dfc00117 	ldw	ra,4(sp)
 4003228:	df000017 	ldw	fp,0(sp)
 400322c:	dec00204 	addi	sp,sp,8
 4003230:	f800283a 	ret

04003234 <_ZN10W5100Class13getMACAddressEPh>:
  inline void getMACAddress(uint8_t * addr) { readSHAR(addr); }
 4003234:	defffc04 	addi	sp,sp,-16
 4003238:	dfc00315 	stw	ra,12(sp)
 400323c:	df000215 	stw	fp,8(sp)
 4003240:	df000204 	addi	fp,sp,8
 4003244:	e13ffe15 	stw	r4,-8(fp)
 4003248:	e17fff15 	stw	r5,-4(fp)
 400324c:	e13fff17 	ldw	r4,-4(fp)
 4003250:	40034c00 	call	40034c0 <_ZN10W5100Class8readSHAREPh>
 4003254:	0001883a 	nop
 4003258:	e037883a 	mov	sp,fp
 400325c:	dfc00117 	ldw	ra,4(sp)
 4003260:	df000017 	ldw	fp,0(sp)
 4003264:	dec00204 	addi	sp,sp,8
 4003268:	f800283a 	ret

0400326c <_ZN10W5100Class12setIPAddressEPKh>:

  inline void setIPAddress(const uint8_t * addr) { writeSIPR(addr); }
 400326c:	defffc04 	addi	sp,sp,-16
 4003270:	dfc00315 	stw	ra,12(sp)
 4003274:	df000215 	stw	fp,8(sp)
 4003278:	df000204 	addi	fp,sp,8
 400327c:	e13ffe15 	stw	r4,-8(fp)
 4003280:	e17fff15 	stw	r5,-4(fp)
 4003284:	e13fff17 	ldw	r4,-4(fp)
 4003288:	40034f80 	call	40034f8 <_ZN10W5100Class9writeSIPREPKh>
 400328c:	0001883a 	nop
 4003290:	e037883a 	mov	sp,fp
 4003294:	dfc00117 	ldw	ra,4(sp)
 4003298:	df000017 	ldw	fp,0(sp)
 400329c:	dec00204 	addi	sp,sp,8
 40032a0:	f800283a 	ret

040032a4 <_ZN10W5100Class12getIPAddressEPh>:
  inline void getIPAddress(uint8_t * addr) { readSIPR(addr); }
 40032a4:	defffc04 	addi	sp,sp,-16
 40032a8:	dfc00315 	stw	ra,12(sp)
 40032ac:	df000215 	stw	fp,8(sp)
 40032b0:	df000204 	addi	fp,sp,8
 40032b4:	e13ffe15 	stw	r4,-8(fp)
 40032b8:	e17fff15 	stw	r5,-4(fp)
 40032bc:	e13fff17 	ldw	r4,-4(fp)
 40032c0:	40035300 	call	4003530 <_ZN10W5100Class8readSIPREPh>
 40032c4:	0001883a 	nop
 40032c8:	e037883a 	mov	sp,fp
 40032cc:	dfc00117 	ldw	ra,4(sp)
 40032d0:	df000017 	ldw	fp,0(sp)
 40032d4:	dec00204 	addi	sp,sp,8
 40032d8:	f800283a 	ret

040032dc <_ZN10W5100Class21setRetransmissionTimeEt>:

  inline void setRetransmissionTime(uint16_t timeout) { writeRTR(timeout); }
 40032dc:	defffc04 	addi	sp,sp,-16
 40032e0:	dfc00315 	stw	ra,12(sp)
 40032e4:	df000215 	stw	fp,8(sp)
 40032e8:	df000204 	addi	fp,sp,8
 40032ec:	e13ffe15 	stw	r4,-8(fp)
 40032f0:	2805883a 	mov	r2,r5
 40032f4:	e0bfff0d 	sth	r2,-4(fp)
 40032f8:	e0bfff0b 	ldhu	r2,-4(fp)
 40032fc:	1009883a 	mov	r4,r2
 4003300:	40035680 	call	4003568 <_ZN10W5100Class8writeRTREt>
 4003304:	0001883a 	nop
 4003308:	e037883a 	mov	sp,fp
 400330c:	dfc00117 	ldw	ra,4(sp)
 4003310:	df000017 	ldw	fp,0(sp)
 4003314:	dec00204 	addi	sp,sp,8
 4003318:	f800283a 	ret

0400331c <_ZN10W5100Class22setRetransmissionCountEh>:
  inline void setRetransmissionCount(uint8_t retry) { writeRCR(retry); }
 400331c:	defffc04 	addi	sp,sp,-16
 4003320:	dfc00315 	stw	ra,12(sp)
 4003324:	df000215 	stw	fp,8(sp)
 4003328:	df000204 	addi	fp,sp,8
 400332c:	e13ffe15 	stw	r4,-8(fp)
 4003330:	2805883a 	mov	r2,r5
 4003334:	e0bfff05 	stb	r2,-4(fp)
 4003338:	e0bfff03 	ldbu	r2,-4(fp)
 400333c:	1009883a 	mov	r4,r2
 4003340:	40035bc0 	call	40035bc <_ZN10W5100Class8writeRCREh>
 4003344:	0001883a 	nop
 4003348:	e037883a 	mov	sp,fp
 400334c:	dfc00117 	ldw	ra,4(sp)
 4003350:	df000017 	ldw	fp,0(sp)
 4003354:	dec00204 	addi	sp,sp,8
 4003358:	f800283a 	ret

0400335c <_ZN10W5100Class5writeEth>:
  // W5100 Registers
  // ---------------
//private:
public:
  static uint16_t write(uint16_t addr, const uint8_t *buf, uint16_t len);
  static uint8_t write(uint16_t addr, uint8_t data) {
 400335c:	defffc04 	addi	sp,sp,-16
 4003360:	dfc00315 	stw	ra,12(sp)
 4003364:	df000215 	stw	fp,8(sp)
 4003368:	df000204 	addi	fp,sp,8
 400336c:	2007883a 	mov	r3,r4
 4003370:	2805883a 	mov	r2,r5
 4003374:	e0fffe0d 	sth	r3,-8(fp)
 4003378:	e0bfff05 	stb	r2,-4(fp)
    return write(addr, &data, 1);
 400337c:	e0bffe0b 	ldhu	r2,-8(fp)
 4003380:	e0ffff04 	addi	r3,fp,-4
 4003384:	01800044 	movi	r6,1
 4003388:	180b883a 	mov	r5,r3
 400338c:	1009883a 	mov	r4,r2
 4003390:	4007bb40 	call	4007bb4 <_ZN10W5100Class5writeEtPKht>
  }
 4003394:	e037883a 	mov	sp,fp
 4003398:	dfc00117 	ldw	ra,4(sp)
 400339c:	df000017 	ldw	fp,0(sp)
 40033a0:	dec00204 	addi	sp,sp,8
 40033a4:	f800283a 	ret

040033a8 <_ZN10W5100Class8writeGAREPKh>:
  }
  static W5100Linkstatus getLinkStatus();

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
 40033a8:	defffd04 	addi	sp,sp,-12
 40033ac:	dfc00215 	stw	ra,8(sp)
 40033b0:	df000115 	stw	fp,4(sp)
 40033b4:	df000104 	addi	fp,sp,4
 40033b8:	e13fff15 	stw	r4,-4(fp)
 40033bc:	01800104 	movi	r6,4
 40033c0:	e17fff17 	ldw	r5,-4(fp)
 40033c4:	01000044 	movi	r4,1
 40033c8:	4007bb40 	call	4007bb4 <_ZN10W5100Class5writeEtPKht>
 40033cc:	e037883a 	mov	sp,fp
 40033d0:	dfc00117 	ldw	ra,4(sp)
 40033d4:	df000017 	ldw	fp,0(sp)
 40033d8:	dec00204 	addi	sp,sp,8
 40033dc:	f800283a 	ret

040033e0 <_ZN10W5100Class7readGAREPh>:
 40033e0:	defffd04 	addi	sp,sp,-12
 40033e4:	dfc00215 	stw	ra,8(sp)
 40033e8:	df000115 	stw	fp,4(sp)
 40033ec:	df000104 	addi	fp,sp,4
 40033f0:	e13fff15 	stw	r4,-4(fp)
 40033f4:	01800104 	movi	r6,4
 40033f8:	e17fff17 	ldw	r5,-4(fp)
 40033fc:	01000044 	movi	r4,1
 4003400:	4007d8c0 	call	4007d8c <_ZN10W5100Class4readEtPht>
 4003404:	e037883a 	mov	sp,fp
 4003408:	dfc00117 	ldw	ra,4(sp)
 400340c:	df000017 	ldw	fp,0(sp)
 4003410:	dec00204 	addi	sp,sp,8
 4003414:	f800283a 	ret

04003418 <_ZN10W5100Class9writeSUBREPKh>:
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
 4003418:	defffd04 	addi	sp,sp,-12
 400341c:	dfc00215 	stw	ra,8(sp)
 4003420:	df000115 	stw	fp,4(sp)
 4003424:	df000104 	addi	fp,sp,4
 4003428:	e13fff15 	stw	r4,-4(fp)
 400342c:	01800104 	movi	r6,4
 4003430:	e17fff17 	ldw	r5,-4(fp)
 4003434:	01000144 	movi	r4,5
 4003438:	4007bb40 	call	4007bb4 <_ZN10W5100Class5writeEtPKht>
 400343c:	e037883a 	mov	sp,fp
 4003440:	dfc00117 	ldw	ra,4(sp)
 4003444:	df000017 	ldw	fp,0(sp)
 4003448:	dec00204 	addi	sp,sp,8
 400344c:	f800283a 	ret

04003450 <_ZN10W5100Class8readSUBREPh>:
 4003450:	defffd04 	addi	sp,sp,-12
 4003454:	dfc00215 	stw	ra,8(sp)
 4003458:	df000115 	stw	fp,4(sp)
 400345c:	df000104 	addi	fp,sp,4
 4003460:	e13fff15 	stw	r4,-4(fp)
 4003464:	01800104 	movi	r6,4
 4003468:	e17fff17 	ldw	r5,-4(fp)
 400346c:	01000144 	movi	r4,5
 4003470:	4007d8c0 	call	4007d8c <_ZN10W5100Class4readEtPht>
 4003474:	e037883a 	mov	sp,fp
 4003478:	dfc00117 	ldw	ra,4(sp)
 400347c:	df000017 	ldw	fp,0(sp)
 4003480:	dec00204 	addi	sp,sp,8
 4003484:	f800283a 	ret

04003488 <_ZN10W5100Class9writeSHAREPKh>:
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
 4003488:	defffd04 	addi	sp,sp,-12
 400348c:	dfc00215 	stw	ra,8(sp)
 4003490:	df000115 	stw	fp,4(sp)
 4003494:	df000104 	addi	fp,sp,4
 4003498:	e13fff15 	stw	r4,-4(fp)
 400349c:	01800184 	movi	r6,6
 40034a0:	e17fff17 	ldw	r5,-4(fp)
 40034a4:	01000244 	movi	r4,9
 40034a8:	4007bb40 	call	4007bb4 <_ZN10W5100Class5writeEtPKht>
 40034ac:	e037883a 	mov	sp,fp
 40034b0:	dfc00117 	ldw	ra,4(sp)
 40034b4:	df000017 	ldw	fp,0(sp)
 40034b8:	dec00204 	addi	sp,sp,8
 40034bc:	f800283a 	ret

040034c0 <_ZN10W5100Class8readSHAREPh>:
 40034c0:	defffd04 	addi	sp,sp,-12
 40034c4:	dfc00215 	stw	ra,8(sp)
 40034c8:	df000115 	stw	fp,4(sp)
 40034cc:	df000104 	addi	fp,sp,4
 40034d0:	e13fff15 	stw	r4,-4(fp)
 40034d4:	01800184 	movi	r6,6
 40034d8:	e17fff17 	ldw	r5,-4(fp)
 40034dc:	01000244 	movi	r4,9
 40034e0:	4007d8c0 	call	4007d8c <_ZN10W5100Class4readEtPht>
 40034e4:	e037883a 	mov	sp,fp
 40034e8:	dfc00117 	ldw	ra,4(sp)
 40034ec:	df000017 	ldw	fp,0(sp)
 40034f0:	dec00204 	addi	sp,sp,8
 40034f4:	f800283a 	ret

040034f8 <_ZN10W5100Class9writeSIPREPKh>:
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
 40034f8:	defffd04 	addi	sp,sp,-12
 40034fc:	dfc00215 	stw	ra,8(sp)
 4003500:	df000115 	stw	fp,4(sp)
 4003504:	df000104 	addi	fp,sp,4
 4003508:	e13fff15 	stw	r4,-4(fp)
 400350c:	01800104 	movi	r6,4
 4003510:	e17fff17 	ldw	r5,-4(fp)
 4003514:	010003c4 	movi	r4,15
 4003518:	4007bb40 	call	4007bb4 <_ZN10W5100Class5writeEtPKht>
 400351c:	e037883a 	mov	sp,fp
 4003520:	dfc00117 	ldw	ra,4(sp)
 4003524:	df000017 	ldw	fp,0(sp)
 4003528:	dec00204 	addi	sp,sp,8
 400352c:	f800283a 	ret

04003530 <_ZN10W5100Class8readSIPREPh>:
 4003530:	defffd04 	addi	sp,sp,-12
 4003534:	dfc00215 	stw	ra,8(sp)
 4003538:	df000115 	stw	fp,4(sp)
 400353c:	df000104 	addi	fp,sp,4
 4003540:	e13fff15 	stw	r4,-4(fp)
 4003544:	01800104 	movi	r6,4
 4003548:	e17fff17 	ldw	r5,-4(fp)
 400354c:	010003c4 	movi	r4,15
 4003550:	4007d8c0 	call	4007d8c <_ZN10W5100Class4readEtPht>
 4003554:	e037883a 	mov	sp,fp
 4003558:	dfc00117 	ldw	ra,4(sp)
 400355c:	df000017 	ldw	fp,0(sp)
 4003560:	dec00204 	addi	sp,sp,8
 4003564:	f800283a 	ret

04003568 <_ZN10W5100Class8writeRTREt>:
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
 4003568:	defffc04 	addi	sp,sp,-16
 400356c:	dfc00315 	stw	ra,12(sp)
 4003570:	df000215 	stw	fp,8(sp)
 4003574:	df000204 	addi	fp,sp,8
 4003578:	2005883a 	mov	r2,r4
 400357c:	e0bfff0d 	sth	r2,-4(fp)
 4003580:	e0bfff0b 	ldhu	r2,-4(fp)
 4003584:	1005d23a 	srai	r2,r2,8
 4003588:	e0bffe05 	stb	r2,-8(fp)
 400358c:	e0bfff0b 	ldhu	r2,-4(fp)
 4003590:	e0bffe45 	stb	r2,-7(fp)
 4003594:	01800084 	movi	r6,2
 4003598:	e17ffe04 	addi	r5,fp,-8
 400359c:	010005c4 	movi	r4,23
 40035a0:	4007bb40 	call	4007bb4 <_ZN10W5100Class5writeEtPKht>
 40035a4:	0001883a 	nop
 40035a8:	e037883a 	mov	sp,fp
 40035ac:	dfc00117 	ldw	ra,4(sp)
 40035b0:	df000017 	ldw	fp,0(sp)
 40035b4:	dec00204 	addi	sp,sp,8
 40035b8:	f800283a 	ret

040035bc <_ZN10W5100Class8writeRCREh>:
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
 40035bc:	defffd04 	addi	sp,sp,-12
 40035c0:	dfc00215 	stw	ra,8(sp)
 40035c4:	df000115 	stw	fp,4(sp)
 40035c8:	df000104 	addi	fp,sp,4
 40035cc:	2005883a 	mov	r2,r4
 40035d0:	e0bfff05 	stb	r2,-4(fp)
 40035d4:	e0bfff03 	ldbu	r2,-4(fp)
 40035d8:	100b883a 	mov	r5,r2
 40035dc:	01000644 	movi	r4,25
 40035e0:	400335c0 	call	400335c <_ZN10W5100Class5writeEth>
 40035e4:	0001883a 	nop
 40035e8:	e037883a 	mov	sp,fp
 40035ec:	dfc00117 	ldw	ra,4(sp)
 40035f0:	df000017 	ldw	fp,0(sp)
 40035f4:	dec00204 	addi	sp,sp,8
 40035f8:	f800283a 	ret

040035fc <_ZN10W5100Class7getChipEv>:
  static uint8_t isW5100(void);
  static uint8_t isW5200(void);
  static uint8_t isW5500(void);

public:
  static uint8_t getChip(void) { return chip; }
 40035fc:	deffff04 	addi	sp,sp,-4
 4003600:	df000015 	stw	fp,0(sp)
 4003604:	d839883a 	mov	fp,sp
 4003608:	d0bca803 	ldbu	r2,-3424(gp)
 400360c:	e037883a 	mov	sp,fp
 4003610:	df000017 	ldw	fp,0(sp)
 4003614:	dec00104 	addi	sp,sp,4
 4003618:	f800283a 	ret

0400361c <_ZN10W5100Class5setSSEh>:

  static bool hasOffsetAddressMapping(void) {
    if (chip == 55) return true;
    return false;
  }
  static void setSS(uint8_t pin) { ss_pin = pin; }
 400361c:	defffe04 	addi	sp,sp,-8
 4003620:	df000115 	stw	fp,4(sp)
 4003624:	df000104 	addi	fp,sp,4
 4003628:	2005883a 	mov	r2,r4
 400362c:	e0bfff05 	stb	r2,-4(fp)
 4003630:	e0bfff03 	ldbu	r2,-4(fp)
 4003634:	d0a00c85 	stb	r2,-32718(gp)
 4003638:	0001883a 	nop
 400363c:	e037883a 	mov	sp,fp
 4003640:	df000017 	ldw	fp,0(sp)
 4003644:	dec00104 	addi	sp,sp,4
 4003648:	f800283a 	ret

0400364c <_ZN9DhcpClassC1Ev>:
	// TODO: make private when socket allocation moves to EthernetClass
	static uint16_t server_port[MAX_SOCK_NUM];
};


class DhcpClass {
 400364c:	defffd04 	addi	sp,sp,-12
 4003650:	dfc00215 	stw	ra,8(sp)
 4003654:	df000115 	stw	fp,4(sp)
 4003658:	df000104 	addi	fp,sp,4
 400365c:	e13fff15 	stw	r4,-4(fp)
 4003660:	e0bfff17 	ldw	r2,-4(fp)
 4003664:	10801204 	addi	r2,r2,72
 4003668:	1009883a 	mov	r4,r2
 400366c:	40030b80 	call	40030b8 <_ZN11EthernetUDPC1Ev>
 4003670:	0001883a 	nop
 4003674:	e037883a 	mov	sp,fp
 4003678:	dfc00117 	ldw	ra,4(sp)
 400367c:	df000017 	ldw	fp,0(sp)
 4003680:	dec00204 	addi	sp,sp,8
 4003684:	f800283a 	ret

04003688 <_ZN14EthernetClient7connectEPKct>:
#include "EthernetClient.h"
#include "utility/SPI.h"
#include "utility/w5100.h"

int EthernetClient::connect(const char * host, uint16_t port)
{
 4003688:	defff204 	addi	sp,sp,-56
 400368c:	dfc00d15 	stw	ra,52(sp)
 4003690:	df000c15 	stw	fp,48(sp)
 4003694:	df000c04 	addi	fp,sp,48
 4003698:	e13ffd15 	stw	r4,-12(fp)
 400369c:	e17ffe15 	stw	r5,-8(fp)
 40036a0:	3005883a 	mov	r2,r6
 40036a4:	e0bfff0d 	sth	r2,-4(fp)
	DNSClient dns; // Look up the host first
 40036a8:	e0bff504 	addi	r2,fp,-44
 40036ac:	1009883a 	mov	r4,r2
 40036b0:	400463c0 	call	400463c <_ZN9DNSClientC1Ev>
	IPAddress remote_addr;
 40036b4:	e0bffc04 	addi	r2,fp,-16
 40036b8:	1009883a 	mov	r4,r2
 40036bc:	400717c0 	call	400717c <_ZN9IPAddressC1Ev>

	if (_sockindex < MAX_SOCK_NUM) {
 40036c0:	e0bffd17 	ldw	r2,-12(fp)
 40036c4:	10800103 	ldbu	r2,4(r2)
 40036c8:	10803fcc 	andi	r2,r2,255
 40036cc:	10800228 	cmpgeui	r2,r2,8
 40036d0:	1000111e 	bne	r2,zero,4003718 <_ZN14EthernetClient7connectEPKct+0x90>
		if (Ethernet.socketStatus(_sockindex) != SnSR::CLOSED) {
 40036d4:	e0bffd17 	ldw	r2,-12(fp)
 40036d8:	10800103 	ldbu	r2,4(r2)
 40036dc:	10803fcc 	andi	r2,r2,255
 40036e0:	1009883a 	mov	r4,r2
 40036e4:	4005c840 	call	4005c84 <_ZN13EthernetClass12socketStatusEh>
 40036e8:	10803fcc 	andi	r2,r2,255
 40036ec:	1004c03a 	cmpne	r2,r2,zero
 40036f0:	10803fcc 	andi	r2,r2,255
 40036f4:	10000526 	beq	r2,zero,400370c <_ZN14EthernetClient7connectEPKct+0x84>
			Ethernet.socketDisconnect(_sockindex); // TODO: should we call stop()?
 40036f8:	e0bffd17 	ldw	r2,-12(fp)
 40036fc:	10800103 	ldbu	r2,4(r2)
 4003700:	10803fcc 	andi	r2,r2,255
 4003704:	1009883a 	mov	r4,r2
 4003708:	4005e0c0 	call	4005e0c <_ZN13EthernetClass16socketDisconnectEh>
		}
		_sockindex = MAX_SOCK_NUM;
 400370c:	e0bffd17 	ldw	r2,-12(fp)
 4003710:	00c00204 	movi	r3,8
 4003714:	10c00105 	stb	r3,4(r2)
	}
	dns.begin(Ethernet.dnsServerIP());
 4003718:	40042e80 	call	40042e8 <_ZN13EthernetClass11dnsServerIPEv>
 400371c:	e0bff415 	stw	r2,-48(fp)
 4003720:	e0bff504 	addi	r2,fp,-44
 4003724:	e17ff404 	addi	r5,fp,-48
 4003728:	1009883a 	mov	r4,r2
 400372c:	4001aa80 	call	4001aa8 <_ZN9DNSClient5beginERK9IPAddress>
	if (!dns.getHostByName(host, remote_addr)) return 0; // TODO: use _timeout
 4003730:	e0fffc04 	addi	r3,fp,-16
 4003734:	e0bff504 	addi	r2,fp,-44
 4003738:	01c4e204 	movi	r7,5000
 400373c:	180d883a 	mov	r6,r3
 4003740:	e17ffe17 	ldw	r5,-8(fp)
 4003744:	1009883a 	mov	r4,r2
 4003748:	4001c180 	call	4001c18 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>
 400374c:	1005003a 	cmpeq	r2,r2,zero
 4003750:	10803fcc 	andi	r2,r2,255
 4003754:	10000226 	beq	r2,zero,4003760 <_ZN14EthernetClient7connectEPKct+0xd8>
 4003758:	0005883a 	mov	r2,zero
 400375c:	00000806 	br	4003780 <_ZN14EthernetClient7connectEPKct+0xf8>
	return connect(remote_addr, port);
 4003760:	e0bffd17 	ldw	r2,-12(fp)
 4003764:	10800017 	ldw	r2,0(r2)
 4003768:	10800017 	ldw	r2,0(r2)
 400376c:	e0ffff0b 	ldhu	r3,-4(fp)
 4003770:	180d883a 	mov	r6,r3
 4003774:	e17ffc17 	ldw	r5,-16(fp)
 4003778:	e13ffd17 	ldw	r4,-12(fp)
 400377c:	103ee83a 	callr	r2
}
 4003780:	e037883a 	mov	sp,fp
 4003784:	dfc00117 	ldw	ra,4(sp)
 4003788:	df000017 	ldw	fp,0(sp)
 400378c:	dec00204 	addi	sp,sp,8
 4003790:	f800283a 	ret

04003794 <_ZN14EthernetClient7connectE9IPAddresst>:

int EthernetClient::connect(IPAddress ip, uint16_t port)
{
 4003794:	deffe004 	addi	sp,sp,-128
 4003798:	dfc01f15 	stw	ra,124(sp)
 400379c:	df001e15 	stw	fp,120(sp)
 40037a0:	ddc01d15 	stw	r23,116(sp)
 40037a4:	dd801c15 	stw	r22,112(sp)
 40037a8:	dd401b15 	stw	r21,108(sp)
 40037ac:	dd001a15 	stw	r20,104(sp)
 40037b0:	dcc01915 	stw	r19,100(sp)
 40037b4:	dc801815 	stw	r18,96(sp)
 40037b8:	dc401715 	stw	r17,92(sp)
 40037bc:	dc001615 	stw	r16,88(sp)
 40037c0:	df001e04 	addi	fp,sp,120
 40037c4:	e13fe615 	stw	r4,-104(fp)
 40037c8:	e17fe715 	stw	r5,-100(fp)
 40037cc:	3005883a 	mov	r2,r6
 40037d0:	e0bfe80d 	sth	r2,-96(fp)
 40037d4:	00810074 	movhi	r2,1025
 40037d8:	10a3cc04 	addi	r2,r2,-28880
 40037dc:	e0bfef15 	stw	r2,-68(fp)
 40037e0:	008100b4 	movhi	r2,1026
 40037e4:	10a88704 	addi	r2,r2,-24036
 40037e8:	e0bff015 	stw	r2,-64(fp)
 40037ec:	e0bff104 	addi	r2,fp,-60
 40037f0:	e0ffe204 	addi	r3,fp,-120
 40037f4:	10c00015 	stw	r3,0(r2)
 40037f8:	00c10034 	movhi	r3,1024
 40037fc:	18ce9304 	addi	r3,r3,14924
 4003800:	10c00115 	stw	r3,4(r2)
 4003804:	16c00215 	stw	sp,8(r2)
 4003808:	e0bfe904 	addi	r2,fp,-92
 400380c:	1009883a 	mov	r4,r2
 4003810:	400a67c0 	call	400a67c <_Unwind_SjLj_Register>
	if (_sockindex < MAX_SOCK_NUM) {
 4003814:	e0bfe617 	ldw	r2,-104(fp)
 4003818:	10800103 	ldbu	r2,4(r2)
 400381c:	10803fcc 	andi	r2,r2,255
 4003820:	10800228 	cmpgeui	r2,r2,8
 4003824:	1000131e 	bne	r2,zero,4003874 <_ZN14EthernetClient7connectE9IPAddresst+0xe0>
		if (Ethernet.socketStatus(_sockindex) != SnSR::CLOSED) {
 4003828:	e0bfe617 	ldw	r2,-104(fp)
 400382c:	10800103 	ldbu	r2,4(r2)
 4003830:	10c03fcc 	andi	r3,r2,255
 4003834:	00bfffc4 	movi	r2,-1
 4003838:	e0bfea15 	stw	r2,-88(fp)
 400383c:	1809883a 	mov	r4,r3
 4003840:	4005c840 	call	4005c84 <_ZN13EthernetClass12socketStatusEh>
 4003844:	10803fcc 	andi	r2,r2,255
 4003848:	1004c03a 	cmpne	r2,r2,zero
 400384c:	10803fcc 	andi	r2,r2,255
 4003850:	10000526 	beq	r2,zero,4003868 <_ZN14EthernetClient7connectE9IPAddresst+0xd4>
			Ethernet.socketDisconnect(_sockindex); // TODO: should we call stop()?
 4003854:	e0bfe617 	ldw	r2,-104(fp)
 4003858:	10800103 	ldbu	r2,4(r2)
 400385c:	10803fcc 	andi	r2,r2,255
 4003860:	1009883a 	mov	r4,r2
 4003864:	4005e0c0 	call	4005e0c <_ZN13EthernetClass16socketDisconnectEh>
		}
		_sockindex = MAX_SOCK_NUM;
 4003868:	e0bfe617 	ldw	r2,-104(fp)
 400386c:	00c00204 	movi	r3,8
 4003870:	10c00105 	stb	r3,4(r2)
	}
#if defined(ESP8266) || defined(ESP32)
	if (ip == IPAddress((uint32_t)0) || ip == IPAddress(0xFFFFFFFFul)) return 0;
#else
	if (ip == IPAddress(0ul) || ip == IPAddress(0xFFFFFFFFul)) return 0;
 4003874:	e0ffe504 	addi	r3,fp,-108
 4003878:	00800044 	movi	r2,1
 400387c:	e0bfea15 	stw	r2,-88(fp)
 4003880:	000b883a 	mov	r5,zero
 4003884:	1809883a 	mov	r4,r3
 4003888:	40072180 	call	4007218 <_ZN9IPAddressC1Em>
 400388c:	e0ffe504 	addi	r3,fp,-108
 4003890:	e0bfe704 	addi	r2,fp,-100
 4003894:	180b883a 	mov	r5,r3
 4003898:	1009883a 	mov	r4,r2
 400389c:	4001a200 	call	4001a20 <_ZNK9IPAddresseqERKS_>
 40038a0:	10803fcc 	andi	r2,r2,255
 40038a4:	10000b1e 	bne	r2,zero,40038d4 <_ZN14EthernetClient7connectE9IPAddresst+0x140>
 40038a8:	e0bfe404 	addi	r2,fp,-112
 40038ac:	017fffc4 	movi	r5,-1
 40038b0:	1009883a 	mov	r4,r2
 40038b4:	40072180 	call	4007218 <_ZN9IPAddressC1Em>
 40038b8:	e0ffe404 	addi	r3,fp,-112
 40038bc:	e0bfe704 	addi	r2,fp,-100
 40038c0:	180b883a 	mov	r5,r3
 40038c4:	1009883a 	mov	r4,r2
 40038c8:	4001a200 	call	4001a20 <_ZNK9IPAddresseqERKS_>
 40038cc:	10803fcc 	andi	r2,r2,255
 40038d0:	10000226 	beq	r2,zero,40038dc <_ZN14EthernetClient7connectE9IPAddresst+0x148>
 40038d4:	00800044 	movi	r2,1
 40038d8:	00000106 	br	40038e0 <_ZN14EthernetClient7connectE9IPAddresst+0x14c>
 40038dc:	0005883a 	mov	r2,zero
 40038e0:	10803fcc 	andi	r2,r2,255
 40038e4:	10000226 	beq	r2,zero,40038f0 <_ZN14EthernetClient7connectE9IPAddresst+0x15c>
 40038e8:	0005883a 	mov	r2,zero
 40038ec:	00005506 	br	4003a44 <_ZN14EthernetClient7connectE9IPAddresst+0x2b0>
#endif
	_sockindex = Ethernet.socketBegin(SnMR::TCP, 0);
 40038f0:	00bfffc4 	movi	r2,-1
 40038f4:	e0bfea15 	stw	r2,-88(fp)
 40038f8:	000b883a 	mov	r5,zero
 40038fc:	01000844 	movi	r4,33
 4003900:	40056780 	call	4005678 <_ZN13EthernetClass11socketBeginEht>
 4003904:	1007883a 	mov	r3,r2
 4003908:	e0bfe617 	ldw	r2,-104(fp)
 400390c:	10c00105 	stb	r3,4(r2)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4003910:	e0bfe617 	ldw	r2,-104(fp)
 4003914:	10800103 	ldbu	r2,4(r2)
 4003918:	10803fcc 	andi	r2,r2,255
 400391c:	10800230 	cmpltui	r2,r2,8
 4003920:	1000021e 	bne	r2,zero,400392c <_ZN14EthernetClient7connectE9IPAddresst+0x198>
 4003924:	0005883a 	mov	r2,zero
 4003928:	00004606 	br	4003a44 <_ZN14EthernetClient7connectE9IPAddresst+0x2b0>
	Ethernet.socketConnect(_sockindex, rawIPAddress(ip), port);
 400392c:	e0bfe617 	ldw	r2,-104(fp)
 4003930:	10800103 	ldbu	r2,4(r2)
 4003934:	10803fcc 	andi	r2,r2,255
 4003938:	e0bff615 	stw	r2,-40(fp)
 400393c:	e0bfe617 	ldw	r2,-104(fp)
 4003940:	e0ffe704 	addi	r3,fp,-100
 4003944:	180b883a 	mov	r5,r3
 4003948:	1009883a 	mov	r4,r2
 400394c:	40042b40 	call	40042b4 <_ZN6Client12rawIPAddressER9IPAddress>
 4003950:	1009883a 	mov	r4,r2
 4003954:	e0ffe80b 	ldhu	r3,-96(fp)
 4003958:	00bfffc4 	movi	r2,-1
 400395c:	e0bfea15 	stw	r2,-88(fp)
 4003960:	180d883a 	mov	r6,r3
 4003964:	200b883a 	mov	r5,r4
 4003968:	e13ff617 	ldw	r4,-40(fp)
 400396c:	4005d900 	call	4005d90 <_ZN13EthernetClass13socketConnectEhPht>
	uint32_t start = millis();
 4003970:	40075380 	call	4007538 <_Z6millisv>
 4003974:	e0bfe215 	stw	r2,-120(fp)
	while (1) {
		uint8_t stat = Ethernet.socketStatus(_sockindex);
 4003978:	e0bfe617 	ldw	r2,-104(fp)
 400397c:	10800103 	ldbu	r2,4(r2)
 4003980:	10c03fcc 	andi	r3,r2,255
 4003984:	00bfffc4 	movi	r2,-1
 4003988:	e0bfea15 	stw	r2,-88(fp)
 400398c:	1809883a 	mov	r4,r3
 4003990:	4005c840 	call	4005c84 <_ZN13EthernetClass12socketStatusEh>
 4003994:	e0bfe305 	stb	r2,-116(fp)
		if (stat == SnSR::ESTABLISHED) return 1;
 4003998:	e0bfe303 	ldbu	r2,-116(fp)
 400399c:	108005d8 	cmpnei	r2,r2,23
 40039a0:	1000021e 	bne	r2,zero,40039ac <_ZN14EthernetClient7connectE9IPAddresst+0x218>
 40039a4:	00800044 	movi	r2,1
 40039a8:	00002606 	br	4003a44 <_ZN14EthernetClient7connectE9IPAddresst+0x2b0>
		if (stat == SnSR::CLOSE_WAIT) return 1;
 40039ac:	e0bfe303 	ldbu	r2,-116(fp)
 40039b0:	10800718 	cmpnei	r2,r2,28
 40039b4:	1000021e 	bne	r2,zero,40039c0 <_ZN14EthernetClient7connectE9IPAddresst+0x22c>
 40039b8:	00800044 	movi	r2,1
 40039bc:	00002106 	br	4003a44 <_ZN14EthernetClient7connectE9IPAddresst+0x2b0>
		if (stat == SnSR::CLOSED) return 0;
 40039c0:	e0bfe303 	ldbu	r2,-116(fp)
 40039c4:	1000021e 	bne	r2,zero,40039d0 <_ZN14EthernetClient7connectE9IPAddresst+0x23c>
 40039c8:	0005883a 	mov	r2,zero
 40039cc:	00001d06 	br	4003a44 <_ZN14EthernetClient7connectE9IPAddresst+0x2b0>
		if (millis() - start > _timeout) break;
 40039d0:	00bfffc4 	movi	r2,-1
 40039d4:	e0bfea15 	stw	r2,-88(fp)
 40039d8:	40075380 	call	4007538 <_Z6millisv>
 40039dc:	1007883a 	mov	r3,r2
 40039e0:	e0bfe217 	ldw	r2,-120(fp)
 40039e4:	1885c83a 	sub	r2,r3,r2
 40039e8:	e0ffe617 	ldw	r3,-104(fp)
 40039ec:	18c0018b 	ldhu	r3,6(r3)
 40039f0:	18ffffcc 	andi	r3,r3,65535
 40039f4:	1885803a 	cmpltu	r2,r3,r2
 40039f8:	10803fcc 	andi	r2,r2,255
 40039fc:	1000051e 	bne	r2,zero,4003a14 <_ZN14EthernetClient7connectE9IPAddresst+0x280>
		delay(1);
 4003a00:	00bfffc4 	movi	r2,-1
 4003a04:	e0bfea15 	stw	r2,-88(fp)
 4003a08:	01000044 	movi	r4,1
 4003a0c:	40074fc0 	call	40074fc <_Z5delayj>
#endif
	_sockindex = Ethernet.socketBegin(SnMR::TCP, 0);
	if (_sockindex >= MAX_SOCK_NUM) return 0;
	Ethernet.socketConnect(_sockindex, rawIPAddress(ip), port);
	uint32_t start = millis();
	while (1) {
 4003a10:	003fd906 	br	4003978 <__alt_data_end+0xfc003978>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
		if (stat == SnSR::ESTABLISHED) return 1;
		if (stat == SnSR::CLOSE_WAIT) return 1;
		if (stat == SnSR::CLOSED) return 0;
		if (millis() - start > _timeout) break;
 4003a14:	0001883a 	nop
		delay(1);
	}
	Ethernet.socketClose(_sockindex);
 4003a18:	e0bfe617 	ldw	r2,-104(fp)
 4003a1c:	10800103 	ldbu	r2,4(r2)
 4003a20:	10c03fcc 	andi	r3,r2,255
 4003a24:	00bfffc4 	movi	r2,-1
 4003a28:	e0bfea15 	stw	r2,-88(fp)
 4003a2c:	1809883a 	mov	r4,r3
 4003a30:	4005cd00 	call	4005cd0 <_ZN13EthernetClass11socketCloseEh>
	_sockindex = MAX_SOCK_NUM;
 4003a34:	e0bfe617 	ldw	r2,-104(fp)
 4003a38:	00c00204 	movi	r3,8
 4003a3c:	10c00105 	stb	r3,4(r2)
	return 0;
 4003a40:	0005883a 	mov	r2,zero
 4003a44:	e0bff715 	stw	r2,-36(fp)
 4003a48:	00000806 	br	4003a6c <_ZN14EthernetClient7connectE9IPAddresst+0x2d8>
 4003a4c:	e7001e04 	addi	fp,fp,120
 4003a50:	e0bfeb17 	ldw	r2,-84(fp)
		_sockindex = MAX_SOCK_NUM;
	}
#if defined(ESP8266) || defined(ESP32)
	if (ip == IPAddress((uint32_t)0) || ip == IPAddress(0xFFFFFFFFul)) return 0;
#else
	if (ip == IPAddress(0ul) || ip == IPAddress(0xFFFFFFFFul)) return 0;
 4003a54:	0001883a 	nop
 4003a58:	1007883a 	mov	r3,r2
 4003a5c:	00bfffc4 	movi	r2,-1
 4003a60:	e0bfea15 	stw	r2,-88(fp)
 4003a64:	1809883a 	mov	r4,r3
 4003a68:	400a8780 	call	400a878 <_Unwind_SjLj_Resume>
 4003a6c:	e0bfe904 	addi	r2,fp,-92
 4003a70:	1009883a 	mov	r4,r2
 4003a74:	400a6940 	call	400a694 <_Unwind_SjLj_Unregister>
		delay(1);
	}
	Ethernet.socketClose(_sockindex);
	_sockindex = MAX_SOCK_NUM;
	return 0;
}
 4003a78:	e0bff717 	ldw	r2,-36(fp)
 4003a7c:	e6fff804 	addi	sp,fp,-32
 4003a80:	dfc00917 	ldw	ra,36(sp)
 4003a84:	df000817 	ldw	fp,32(sp)
 4003a88:	ddc00717 	ldw	r23,28(sp)
 4003a8c:	dd800617 	ldw	r22,24(sp)
 4003a90:	dd400517 	ldw	r21,20(sp)
 4003a94:	dd000417 	ldw	r20,16(sp)
 4003a98:	dcc00317 	ldw	r19,12(sp)
 4003a9c:	dc800217 	ldw	r18,8(sp)
 4003aa0:	dc400117 	ldw	r17,4(sp)
 4003aa4:	dc000017 	ldw	r16,0(sp)
 4003aa8:	dec00a04 	addi	sp,sp,40
 4003aac:	f800283a 	ret

04003ab0 <_ZN14EthernetClient17availableForWriteEv>:

int EthernetClient::availableForWrite(void)
{
 4003ab0:	defffd04 	addi	sp,sp,-12
 4003ab4:	dfc00215 	stw	ra,8(sp)
 4003ab8:	df000115 	stw	fp,4(sp)
 4003abc:	df000104 	addi	fp,sp,4
 4003ac0:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4003ac4:	e0bfff17 	ldw	r2,-4(fp)
 4003ac8:	10800103 	ldbu	r2,4(r2)
 4003acc:	10803fcc 	andi	r2,r2,255
 4003ad0:	10800230 	cmpltui	r2,r2,8
 4003ad4:	1000021e 	bne	r2,zero,4003ae0 <_ZN14EthernetClient17availableForWriteEv+0x30>
 4003ad8:	0005883a 	mov	r2,zero
 4003adc:	00000606 	br	4003af8 <_ZN14EthernetClient17availableForWriteEv+0x48>
	return Ethernet.socketSendAvailable(_sockindex);
 4003ae0:	e0bfff17 	ldw	r2,-4(fp)
 4003ae4:	10800103 	ldbu	r2,4(r2)
 4003ae8:	10803fcc 	andi	r2,r2,255
 4003aec:	1009883a 	mov	r4,r2
 4003af0:	40067240 	call	4006724 <_ZN13EthernetClass19socketSendAvailableEh>
 4003af4:	10bfffcc 	andi	r2,r2,65535
}
 4003af8:	e037883a 	mov	sp,fp
 4003afc:	dfc00117 	ldw	ra,4(sp)
 4003b00:	df000017 	ldw	fp,0(sp)
 4003b04:	dec00204 	addi	sp,sp,8
 4003b08:	f800283a 	ret

04003b0c <_ZN14EthernetClient5writeEh>:

size_t EthernetClient::write(uint8_t b)
{
 4003b0c:	defffc04 	addi	sp,sp,-16
 4003b10:	dfc00315 	stw	ra,12(sp)
 4003b14:	df000215 	stw	fp,8(sp)
 4003b18:	df000204 	addi	fp,sp,8
 4003b1c:	e13ffe15 	stw	r4,-8(fp)
 4003b20:	2805883a 	mov	r2,r5
 4003b24:	e0bfff05 	stb	r2,-4(fp)
	return write(&b, 1);
 4003b28:	e0bffe17 	ldw	r2,-8(fp)
 4003b2c:	10800017 	ldw	r2,0(r2)
 4003b30:	10800304 	addi	r2,r2,12
 4003b34:	10800017 	ldw	r2,0(r2)
 4003b38:	e0ffff04 	addi	r3,fp,-4
 4003b3c:	01800044 	movi	r6,1
 4003b40:	180b883a 	mov	r5,r3
 4003b44:	e13ffe17 	ldw	r4,-8(fp)
 4003b48:	103ee83a 	callr	r2
}
 4003b4c:	e037883a 	mov	sp,fp
 4003b50:	dfc00117 	ldw	ra,4(sp)
 4003b54:	df000017 	ldw	fp,0(sp)
 4003b58:	dec00204 	addi	sp,sp,8
 4003b5c:	f800283a 	ret

04003b60 <_ZN14EthernetClient5writeEPKhj>:

size_t EthernetClient::write(const uint8_t *buf, size_t size)
{
 4003b60:	defffb04 	addi	sp,sp,-20
 4003b64:	dfc00415 	stw	ra,16(sp)
 4003b68:	df000315 	stw	fp,12(sp)
 4003b6c:	df000304 	addi	fp,sp,12
 4003b70:	e13ffd15 	stw	r4,-12(fp)
 4003b74:	e17ffe15 	stw	r5,-8(fp)
 4003b78:	e1bfff15 	stw	r6,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4003b7c:	e0bffd17 	ldw	r2,-12(fp)
 4003b80:	10800103 	ldbu	r2,4(r2)
 4003b84:	10803fcc 	andi	r2,r2,255
 4003b88:	10800230 	cmpltui	r2,r2,8
 4003b8c:	1000021e 	bne	r2,zero,4003b98 <_ZN14EthernetClient5writeEPKhj+0x38>
 4003b90:	0005883a 	mov	r2,zero
 4003b94:	00001006 	br	4003bd8 <_ZN14EthernetClient5writeEPKhj+0x78>
	if (Ethernet.socketSend(_sockindex, buf, size)) return size;
 4003b98:	e0bffd17 	ldw	r2,-12(fp)
 4003b9c:	10800103 	ldbu	r2,4(r2)
 4003ba0:	10c03fcc 	andi	r3,r2,255
 4003ba4:	e0bfff17 	ldw	r2,-4(fp)
 4003ba8:	10bfffcc 	andi	r2,r2,65535
 4003bac:	100d883a 	mov	r6,r2
 4003bb0:	e17ffe17 	ldw	r5,-8(fp)
 4003bb4:	1809883a 	mov	r4,r3
 4003bb8:	40065c00 	call	40065c0 <_ZN13EthernetClass10socketSendEhPKht>
 4003bbc:	10bfffcc 	andi	r2,r2,65535
 4003bc0:	1004c03a 	cmpne	r2,r2,zero
 4003bc4:	10803fcc 	andi	r2,r2,255
 4003bc8:	10000226 	beq	r2,zero,4003bd4 <_ZN14EthernetClient5writeEPKhj+0x74>
 4003bcc:	e0bfff17 	ldw	r2,-4(fp)
 4003bd0:	00000106 	br	4003bd8 <_ZN14EthernetClient5writeEPKhj+0x78>
	// setWriteError();
	return 0;
 4003bd4:	0005883a 	mov	r2,zero
}
 4003bd8:	e037883a 	mov	sp,fp
 4003bdc:	dfc00117 	ldw	ra,4(sp)
 4003be0:	df000017 	ldw	fp,0(sp)
 4003be4:	dec00204 	addi	sp,sp,8
 4003be8:	f800283a 	ret

04003bec <_ZN14EthernetClient9availableEv>:

int EthernetClient::available()
{
 4003bec:	defffd04 	addi	sp,sp,-12
 4003bf0:	dfc00215 	stw	ra,8(sp)
 4003bf4:	df000115 	stw	fp,4(sp)
 4003bf8:	df000104 	addi	fp,sp,4
 4003bfc:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4003c00:	e0bfff17 	ldw	r2,-4(fp)
 4003c04:	10800103 	ldbu	r2,4(r2)
 4003c08:	10803fcc 	andi	r2,r2,255
 4003c0c:	10800230 	cmpltui	r2,r2,8
 4003c10:	1000021e 	bne	r2,zero,4003c1c <_ZN14EthernetClient9availableEv+0x30>
 4003c14:	0005883a 	mov	r2,zero
 4003c18:	00000606 	br	4003c34 <_ZN14EthernetClient9availableEv+0x48>
	return Ethernet.socketRecvAvailable(_sockindex);
 4003c1c:	e0bfff17 	ldw	r2,-4(fp)
 4003c20:	10800103 	ldbu	r2,4(r2)
 4003c24:	10803fcc 	andi	r2,r2,255
 4003c28:	1009883a 	mov	r4,r2
 4003c2c:	400628c0 	call	400628c <_ZN13EthernetClass19socketRecvAvailableEh>
 4003c30:	10bfffcc 	andi	r2,r2,65535
	// packets if they are lost by the network?  Someday this should
	// be checked by a man-in-the-middle test which discards certain
	// packets.  If ACKs aren't resent, we would need to check for
	// returning 0 here and after a timeout do another Sock_RECV
	// command to cause the WIZnet chip to resend the ACK packet.
}
 4003c34:	e037883a 	mov	sp,fp
 4003c38:	dfc00117 	ldw	ra,4(sp)
 4003c3c:	df000017 	ldw	fp,0(sp)
 4003c40:	dec00204 	addi	sp,sp,8
 4003c44:	f800283a 	ret

04003c48 <_ZN14EthernetClient4readEPhj>:

int EthernetClient::read(uint8_t *buf, size_t size)
{
 4003c48:	defffb04 	addi	sp,sp,-20
 4003c4c:	dfc00415 	stw	ra,16(sp)
 4003c50:	df000315 	stw	fp,12(sp)
 4003c54:	df000304 	addi	fp,sp,12
 4003c58:	e13ffd15 	stw	r4,-12(fp)
 4003c5c:	e17ffe15 	stw	r5,-8(fp)
 4003c60:	e1bfff15 	stw	r6,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4003c64:	e0bffd17 	ldw	r2,-12(fp)
 4003c68:	10800103 	ldbu	r2,4(r2)
 4003c6c:	10803fcc 	andi	r2,r2,255
 4003c70:	10800230 	cmpltui	r2,r2,8
 4003c74:	1000021e 	bne	r2,zero,4003c80 <_ZN14EthernetClient4readEPhj+0x38>
 4003c78:	0005883a 	mov	r2,zero
 4003c7c:	00000b06 	br	4003cac <_ZN14EthernetClient4readEPhj+0x64>
	return Ethernet.socketRecv(_sockindex, buf, size);
 4003c80:	e0bffd17 	ldw	r2,-12(fp)
 4003c84:	10800103 	ldbu	r2,4(r2)
 4003c88:	10803fcc 	andi	r2,r2,255
 4003c8c:	e0ffff17 	ldw	r3,-4(fp)
 4003c90:	18ffffcc 	andi	r3,r3,65535
 4003c94:	18e0001c 	xori	r3,r3,32768
 4003c98:	18e00004 	addi	r3,r3,-32768
 4003c9c:	180d883a 	mov	r6,r3
 4003ca0:	e17ffe17 	ldw	r5,-8(fp)
 4003ca4:	1009883a 	mov	r4,r2
 4003ca8:	4005fe00 	call	4005fe0 <_ZN13EthernetClass10socketRecvEhPhs>
}
 4003cac:	e037883a 	mov	sp,fp
 4003cb0:	dfc00117 	ldw	ra,4(sp)
 4003cb4:	df000017 	ldw	fp,0(sp)
 4003cb8:	dec00204 	addi	sp,sp,8
 4003cbc:	f800283a 	ret

04003cc0 <_ZN14EthernetClient4peekEv>:

int EthernetClient::peek()
{
 4003cc0:	defffd04 	addi	sp,sp,-12
 4003cc4:	dfc00215 	stw	ra,8(sp)
 4003cc8:	df000115 	stw	fp,4(sp)
 4003ccc:	df000104 	addi	fp,sp,4
 4003cd0:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return -1;
 4003cd4:	e0bfff17 	ldw	r2,-4(fp)
 4003cd8:	10800103 	ldbu	r2,4(r2)
 4003cdc:	10803fcc 	andi	r2,r2,255
 4003ce0:	10800230 	cmpltui	r2,r2,8
 4003ce4:	1000021e 	bne	r2,zero,4003cf0 <_ZN14EthernetClient4peekEv+0x30>
 4003ce8:	00bfffc4 	movi	r2,-1
 4003cec:	00001106 	br	4003d34 <_ZN14EthernetClient4peekEv+0x74>
	if (!available()) return -1;
 4003cf0:	e0bfff17 	ldw	r2,-4(fp)
 4003cf4:	10800017 	ldw	r2,0(r2)
 4003cf8:	10800404 	addi	r2,r2,16
 4003cfc:	10800017 	ldw	r2,0(r2)
 4003d00:	e13fff17 	ldw	r4,-4(fp)
 4003d04:	103ee83a 	callr	r2
 4003d08:	1005003a 	cmpeq	r2,r2,zero
 4003d0c:	10803fcc 	andi	r2,r2,255
 4003d10:	10000226 	beq	r2,zero,4003d1c <_ZN14EthernetClient4peekEv+0x5c>
 4003d14:	00bfffc4 	movi	r2,-1
 4003d18:	00000606 	br	4003d34 <_ZN14EthernetClient4peekEv+0x74>
	return Ethernet.socketPeek(_sockindex);
 4003d1c:	e0bfff17 	ldw	r2,-4(fp)
 4003d20:	10800103 	ldbu	r2,4(r2)
 4003d24:	10803fcc 	andi	r2,r2,255
 4003d28:	1009883a 	mov	r4,r2
 4003d2c:	40063440 	call	4006344 <_ZN13EthernetClass10socketPeekEh>
 4003d30:	10803fcc 	andi	r2,r2,255
}
 4003d34:	e037883a 	mov	sp,fp
 4003d38:	dfc00117 	ldw	ra,4(sp)
 4003d3c:	df000017 	ldw	fp,0(sp)
 4003d40:	dec00204 	addi	sp,sp,8
 4003d44:	f800283a 	ret

04003d48 <_ZN14EthernetClient4readEv>:

int EthernetClient::read()
{
 4003d48:	defffc04 	addi	sp,sp,-16
 4003d4c:	dfc00315 	stw	ra,12(sp)
 4003d50:	df000215 	stw	fp,8(sp)
 4003d54:	df000204 	addi	fp,sp,8
 4003d58:	e13fff15 	stw	r4,-4(fp)
	uint8_t b;
	if (Ethernet.socketRecv(_sockindex, &b, 1) > 0) return b;
 4003d5c:	e0bfff17 	ldw	r2,-4(fp)
 4003d60:	10800103 	ldbu	r2,4(r2)
 4003d64:	10803fcc 	andi	r2,r2,255
 4003d68:	01800044 	movi	r6,1
 4003d6c:	e17ffe04 	addi	r5,fp,-8
 4003d70:	1009883a 	mov	r4,r2
 4003d74:	4005fe00 	call	4005fe0 <_ZN13EthernetClass10socketRecvEhPhs>
 4003d78:	0084803a 	cmplt	r2,zero,r2
 4003d7c:	10803fcc 	andi	r2,r2,255
 4003d80:	10000326 	beq	r2,zero,4003d90 <_ZN14EthernetClient4readEv+0x48>
 4003d84:	e0bffe03 	ldbu	r2,-8(fp)
 4003d88:	10803fcc 	andi	r2,r2,255
 4003d8c:	00000106 	br	4003d94 <_ZN14EthernetClient4readEv+0x4c>
	return -1;
 4003d90:	00bfffc4 	movi	r2,-1
}
 4003d94:	e037883a 	mov	sp,fp
 4003d98:	dfc00117 	ldw	ra,4(sp)
 4003d9c:	df000017 	ldw	fp,0(sp)
 4003da0:	dec00204 	addi	sp,sp,8
 4003da4:	f800283a 	ret

04003da8 <_ZN14EthernetClient5flushEv>:

void EthernetClient::flush()
{
 4003da8:	defffc04 	addi	sp,sp,-16
 4003dac:	dfc00315 	stw	ra,12(sp)
 4003db0:	df000215 	stw	fp,8(sp)
 4003db4:	df000204 	addi	fp,sp,8
 4003db8:	e13fff15 	stw	r4,-4(fp)
	while (_sockindex < MAX_SOCK_NUM) {
 4003dbc:	e0bfff17 	ldw	r2,-4(fp)
 4003dc0:	10800103 	ldbu	r2,4(r2)
 4003dc4:	10803fcc 	andi	r2,r2,255
 4003dc8:	10800228 	cmpgeui	r2,r2,8
 4003dcc:	1000191e 	bne	r2,zero,4003e34 <_ZN14EthernetClient5flushEv+0x8c>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
 4003dd0:	e0bfff17 	ldw	r2,-4(fp)
 4003dd4:	10800103 	ldbu	r2,4(r2)
 4003dd8:	10803fcc 	andi	r2,r2,255
 4003ddc:	1009883a 	mov	r4,r2
 4003de0:	4005c840 	call	4005c84 <_ZN13EthernetClass12socketStatusEh>
 4003de4:	e0bffe05 	stb	r2,-8(fp)
		if (stat != SnSR::ESTABLISHED && stat != SnSR::CLOSE_WAIT) return;
 4003de8:	e0bffe03 	ldbu	r2,-8(fp)
 4003dec:	108005e0 	cmpeqi	r2,r2,23
 4003df0:	1000031e 	bne	r2,zero,4003e00 <_ZN14EthernetClient5flushEv+0x58>
 4003df4:	e0bffe03 	ldbu	r2,-8(fp)
 4003df8:	10800720 	cmpeqi	r2,r2,28
 4003dfc:	10000a26 	beq	r2,zero,4003e28 <_ZN14EthernetClient5flushEv+0x80>
		if (Ethernet.socketSendAvailable(_sockindex) >= W5100.SSIZE) return;
 4003e00:	e0bfff17 	ldw	r2,-4(fp)
 4003e04:	10800103 	ldbu	r2,4(r2)
 4003e08:	10803fcc 	andi	r2,r2,255
 4003e0c:	1009883a 	mov	r4,r2
 4003e10:	40067240 	call	4006724 <_ZN13EthernetClass19socketSendAvailableEh>
 4003e14:	10bfffcc 	andi	r2,r2,65535
 4003e18:	10820028 	cmpgeui	r2,r2,2048
 4003e1c:	10803fcc 	andi	r2,r2,255
 4003e20:	1000031e 	bne	r2,zero,4003e30 <_ZN14EthernetClient5flushEv+0x88>
	return -1;
}

void EthernetClient::flush()
{
	while (_sockindex < MAX_SOCK_NUM) {
 4003e24:	003fe506 	br	4003dbc <__alt_data_end+0xfc003dbc>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
		if (stat != SnSR::ESTABLISHED && stat != SnSR::CLOSE_WAIT) return;
 4003e28:	0001883a 	nop
 4003e2c:	00000106 	br	4003e34 <_ZN14EthernetClient5flushEv+0x8c>
		if (Ethernet.socketSendAvailable(_sockindex) >= W5100.SSIZE) return;
 4003e30:	0001883a 	nop
	}
}
 4003e34:	e037883a 	mov	sp,fp
 4003e38:	dfc00117 	ldw	ra,4(sp)
 4003e3c:	df000017 	ldw	fp,0(sp)
 4003e40:	dec00204 	addi	sp,sp,8
 4003e44:	f800283a 	ret

04003e48 <_ZN14EthernetClient4stopEv>:

void EthernetClient::stop()
{
 4003e48:	defffc04 	addi	sp,sp,-16
 4003e4c:	dfc00315 	stw	ra,12(sp)
 4003e50:	df000215 	stw	fp,8(sp)
 4003e54:	df000204 	addi	fp,sp,8
 4003e58:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return;
 4003e5c:	e0bfff17 	ldw	r2,-4(fp)
 4003e60:	10800103 	ldbu	r2,4(r2)
 4003e64:	10803fcc 	andi	r2,r2,255
 4003e68:	10800230 	cmpltui	r2,r2,8
 4003e6c:	10002a26 	beq	r2,zero,4003f18 <_ZN14EthernetClient4stopEv+0xd0>

	// attempt to close the connection gracefully (send a FIN to other side)
	Ethernet.socketDisconnect(_sockindex);
 4003e70:	e0bfff17 	ldw	r2,-4(fp)
 4003e74:	10800103 	ldbu	r2,4(r2)
 4003e78:	10803fcc 	andi	r2,r2,255
 4003e7c:	1009883a 	mov	r4,r2
 4003e80:	4005e0c0 	call	4005e0c <_ZN13EthernetClass16socketDisconnectEh>
	unsigned long start = millis();
 4003e84:	40075380 	call	4007538 <_Z6millisv>
 4003e88:	e0bffe15 	stw	r2,-8(fp)

	// wait up to a second for the connection to close
	do {
		if (Ethernet.socketStatus(_sockindex) == SnSR::CLOSED) {
 4003e8c:	e0bfff17 	ldw	r2,-4(fp)
 4003e90:	10800103 	ldbu	r2,4(r2)
 4003e94:	10803fcc 	andi	r2,r2,255
 4003e98:	1009883a 	mov	r4,r2
 4003e9c:	4005c840 	call	4005c84 <_ZN13EthernetClass12socketStatusEh>
 4003ea0:	10803fcc 	andi	r2,r2,255
 4003ea4:	1005003a 	cmpeq	r2,r2,zero
 4003ea8:	10803fcc 	andi	r2,r2,255
 4003eac:	10000426 	beq	r2,zero,4003ec0 <_ZN14EthernetClient4stopEv+0x78>
			_sockindex = MAX_SOCK_NUM;
 4003eb0:	e0bfff17 	ldw	r2,-4(fp)
 4003eb4:	00c00204 	movi	r3,8
 4003eb8:	10c00105 	stb	r3,4(r2)
			return; // exit the loop
 4003ebc:	00001706 	br	4003f1c <_ZN14EthernetClient4stopEv+0xd4>
		}
		delay(1);
 4003ec0:	01000044 	movi	r4,1
 4003ec4:	40074fc0 	call	40074fc <_Z5delayj>
	} while (millis() - start < _timeout);
 4003ec8:	40075380 	call	4007538 <_Z6millisv>
 4003ecc:	1007883a 	mov	r3,r2
 4003ed0:	e0bffe17 	ldw	r2,-8(fp)
 4003ed4:	1887c83a 	sub	r3,r3,r2
 4003ed8:	e0bfff17 	ldw	r2,-4(fp)
 4003edc:	1080018b 	ldhu	r2,6(r2)
 4003ee0:	10bfffcc 	andi	r2,r2,65535
	// attempt to close the connection gracefully (send a FIN to other side)
	Ethernet.socketDisconnect(_sockindex);
	unsigned long start = millis();

	// wait up to a second for the connection to close
	do {
 4003ee4:	1885803a 	cmpltu	r2,r3,r2
 4003ee8:	10803fcc 	andi	r2,r2,255
 4003eec:	10000126 	beq	r2,zero,4003ef4 <_ZN14EthernetClient4stopEv+0xac>
 4003ef0:	003fe606 	br	4003e8c <__alt_data_end+0xfc003e8c>
		}
		delay(1);
	} while (millis() - start < _timeout);

	// if it hasn't closed, close it forcefully
	Ethernet.socketClose(_sockindex);
 4003ef4:	e0bfff17 	ldw	r2,-4(fp)
 4003ef8:	10800103 	ldbu	r2,4(r2)
 4003efc:	10803fcc 	andi	r2,r2,255
 4003f00:	1009883a 	mov	r4,r2
 4003f04:	4005cd00 	call	4005cd0 <_ZN13EthernetClass11socketCloseEh>
	_sockindex = MAX_SOCK_NUM;
 4003f08:	e0bfff17 	ldw	r2,-4(fp)
 4003f0c:	00c00204 	movi	r3,8
 4003f10:	10c00105 	stb	r3,4(r2)
 4003f14:	00000106 	br	4003f1c <_ZN14EthernetClient4stopEv+0xd4>
	}
}

void EthernetClient::stop()
{
	if (_sockindex >= MAX_SOCK_NUM) return;
 4003f18:	0001883a 	nop
	} while (millis() - start < _timeout);

	// if it hasn't closed, close it forcefully
	Ethernet.socketClose(_sockindex);
	_sockindex = MAX_SOCK_NUM;
}
 4003f1c:	e037883a 	mov	sp,fp
 4003f20:	dfc00117 	ldw	ra,4(sp)
 4003f24:	df000017 	ldw	fp,0(sp)
 4003f28:	dec00204 	addi	sp,sp,8
 4003f2c:	f800283a 	ret

04003f30 <_ZN14EthernetClient9connectedEv>:

uint8_t EthernetClient::connected()
{
 4003f30:	defffc04 	addi	sp,sp,-16
 4003f34:	dfc00315 	stw	ra,12(sp)
 4003f38:	df000215 	stw	fp,8(sp)
 4003f3c:	df000204 	addi	fp,sp,8
 4003f40:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4003f44:	e0bfff17 	ldw	r2,-4(fp)
 4003f48:	10800103 	ldbu	r2,4(r2)
 4003f4c:	10803fcc 	andi	r2,r2,255
 4003f50:	10800230 	cmpltui	r2,r2,8
 4003f54:	1000021e 	bne	r2,zero,4003f60 <_ZN14EthernetClient9connectedEv+0x30>
 4003f58:	0005883a 	mov	r2,zero
 4003f5c:	00001b06 	br	4003fcc <_ZN14EthernetClient9connectedEv+0x9c>

	uint8_t s = Ethernet.socketStatus(_sockindex);
 4003f60:	e0bfff17 	ldw	r2,-4(fp)
 4003f64:	10800103 	ldbu	r2,4(r2)
 4003f68:	10803fcc 	andi	r2,r2,255
 4003f6c:	1009883a 	mov	r4,r2
 4003f70:	4005c840 	call	4005c84 <_ZN13EthernetClass12socketStatusEh>
 4003f74:	e0bffe05 	stb	r2,-8(fp)
	return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
		(s == SnSR::CLOSE_WAIT && !available()));
 4003f78:	e0bffe03 	ldbu	r2,-8(fp)
 4003f7c:	10800520 	cmpeqi	r2,r2,20
 4003f80:	1000111e 	bne	r2,zero,4003fc8 <_ZN14EthernetClient9connectedEv+0x98>
uint8_t EthernetClient::connected()
{
	if (_sockindex >= MAX_SOCK_NUM) return 0;

	uint8_t s = Ethernet.socketStatus(_sockindex);
	return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
 4003f84:	e0bffe03 	ldbu	r2,-8(fp)
 4003f88:	10000f26 	beq	r2,zero,4003fc8 <_ZN14EthernetClient9connectedEv+0x98>
 4003f8c:	e0bffe03 	ldbu	r2,-8(fp)
 4003f90:	10800620 	cmpeqi	r2,r2,24
 4003f94:	10000c1e 	bne	r2,zero,4003fc8 <_ZN14EthernetClient9connectedEv+0x98>
		(s == SnSR::CLOSE_WAIT && !available()));
 4003f98:	e0bffe03 	ldbu	r2,-8(fp)
 4003f9c:	10800718 	cmpnei	r2,r2,28
 4003fa0:	1000071e 	bne	r2,zero,4003fc0 <_ZN14EthernetClient9connectedEv+0x90>
 4003fa4:	e0bfff17 	ldw	r2,-4(fp)
 4003fa8:	10800017 	ldw	r2,0(r2)
 4003fac:	10800404 	addi	r2,r2,16
 4003fb0:	10800017 	ldw	r2,0(r2)
 4003fb4:	e13fff17 	ldw	r4,-4(fp)
 4003fb8:	103ee83a 	callr	r2
 4003fbc:	10000226 	beq	r2,zero,4003fc8 <_ZN14EthernetClient9connectedEv+0x98>
 4003fc0:	00800044 	movi	r2,1
 4003fc4:	00000106 	br	4003fcc <_ZN14EthernetClient9connectedEv+0x9c>
 4003fc8:	0005883a 	mov	r2,zero
}
 4003fcc:	e037883a 	mov	sp,fp
 4003fd0:	dfc00117 	ldw	ra,4(sp)
 4003fd4:	df000017 	ldw	fp,0(sp)
 4003fd8:	dec00204 	addi	sp,sp,8
 4003fdc:	f800283a 	ret

04003fe0 <_ZN14EthernetClient6statusEv>:

uint8_t EthernetClient::status()
{
 4003fe0:	defffd04 	addi	sp,sp,-12
 4003fe4:	dfc00215 	stw	ra,8(sp)
 4003fe8:	df000115 	stw	fp,4(sp)
 4003fec:	df000104 	addi	fp,sp,4
 4003ff0:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return SnSR::CLOSED;
 4003ff4:	e0bfff17 	ldw	r2,-4(fp)
 4003ff8:	10800103 	ldbu	r2,4(r2)
 4003ffc:	10803fcc 	andi	r2,r2,255
 4004000:	10800230 	cmpltui	r2,r2,8
 4004004:	1000021e 	bne	r2,zero,4004010 <_ZN14EthernetClient6statusEv+0x30>
 4004008:	0005883a 	mov	r2,zero
 400400c:	00000506 	br	4004024 <_ZN14EthernetClient6statusEv+0x44>
	return Ethernet.socketStatus(_sockindex);
 4004010:	e0bfff17 	ldw	r2,-4(fp)
 4004014:	10800103 	ldbu	r2,4(r2)
 4004018:	10803fcc 	andi	r2,r2,255
 400401c:	1009883a 	mov	r4,r2
 4004020:	4005c840 	call	4005c84 <_ZN13EthernetClass12socketStatusEh>
}
 4004024:	e037883a 	mov	sp,fp
 4004028:	dfc00117 	ldw	ra,4(sp)
 400402c:	df000017 	ldw	fp,0(sp)
 4004030:	dec00204 	addi	sp,sp,8
 4004034:	f800283a 	ret

04004038 <_ZN14EthernetClienteqERKS_>:

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.
bool EthernetClient::operator==(const EthernetClient& rhs)
{
 4004038:	defffd04 	addi	sp,sp,-12
 400403c:	df000215 	stw	fp,8(sp)
 4004040:	df000204 	addi	fp,sp,8
 4004044:	e13ffe15 	stw	r4,-8(fp)
 4004048:	e17fff15 	stw	r5,-4(fp)
	if (_sockindex != rhs._sockindex) return false;
 400404c:	e0bffe17 	ldw	r2,-8(fp)
 4004050:	10c00103 	ldbu	r3,4(r2)
 4004054:	e0bfff17 	ldw	r2,-4(fp)
 4004058:	10800103 	ldbu	r2,4(r2)
 400405c:	18c03fcc 	andi	r3,r3,255
 4004060:	10803fcc 	andi	r2,r2,255
 4004064:	18800226 	beq	r3,r2,4004070 <_ZN14EthernetClienteqERKS_+0x38>
 4004068:	0005883a 	mov	r2,zero
 400406c:	00000f06 	br	40040ac <_ZN14EthernetClienteqERKS_+0x74>
	if (_sockindex >= MAX_SOCK_NUM) return false;
 4004070:	e0bffe17 	ldw	r2,-8(fp)
 4004074:	10800103 	ldbu	r2,4(r2)
 4004078:	10803fcc 	andi	r2,r2,255
 400407c:	10800230 	cmpltui	r2,r2,8
 4004080:	1000021e 	bne	r2,zero,400408c <_ZN14EthernetClienteqERKS_+0x54>
 4004084:	0005883a 	mov	r2,zero
 4004088:	00000806 	br	40040ac <_ZN14EthernetClienteqERKS_+0x74>
	if (rhs._sockindex >= MAX_SOCK_NUM) return false;
 400408c:	e0bfff17 	ldw	r2,-4(fp)
 4004090:	10800103 	ldbu	r2,4(r2)
 4004094:	10803fcc 	andi	r2,r2,255
 4004098:	10800230 	cmpltui	r2,r2,8
 400409c:	1000021e 	bne	r2,zero,40040a8 <_ZN14EthernetClienteqERKS_+0x70>
 40040a0:	0005883a 	mov	r2,zero
 40040a4:	00000106 	br	40040ac <_ZN14EthernetClienteqERKS_+0x74>
	return true;
 40040a8:	00800044 	movi	r2,1
}
 40040ac:	e037883a 	mov	sp,fp
 40040b0:	df000017 	ldw	fp,0(sp)
 40040b4:	dec00104 	addi	sp,sp,4
 40040b8:	f800283a 	ret

040040bc <_ZN14EthernetClient9localPortEv>:

// https://github.com/per1234/EthernetMod
// from: https://github.com/ntruchsess/Arduino-1/commit/937bce1a0bb2567f6d03b15df79525569377dabd
uint16_t EthernetClient::localPort()
{
 40040bc:	defffc04 	addi	sp,sp,-16
 40040c0:	dfc00315 	stw	ra,12(sp)
 40040c4:	df000215 	stw	fp,8(sp)
 40040c8:	df000204 	addi	fp,sp,8
 40040cc:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 40040d0:	e0bfff17 	ldw	r2,-4(fp)
 40040d4:	10800103 	ldbu	r2,4(r2)
 40040d8:	10803fcc 	andi	r2,r2,255
 40040dc:	10800230 	cmpltui	r2,r2,8
 40040e0:	1000021e 	bne	r2,zero,40040ec <_ZN14EthernetClient9localPortEv+0x30>
 40040e4:	0005883a 	mov	r2,zero
 40040e8:	00000a06 	br	4004114 <_ZN14EthernetClient9localPortEv+0x58>
	uint16_t port;
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 40040ec:	0009883a 	mov	r4,zero
 40040f0:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	port = W5100.readSnPORT(_sockindex);
 40040f4:	e0bfff17 	ldw	r2,-4(fp)
 40040f8:	10800103 	ldbu	r2,4(r2)
 40040fc:	10803fcc 	andi	r2,r2,255
 4004100:	1009883a 	mov	r4,r2
 4004104:	40045340 	call	4004534 <_ZN10W5100Class10readSnPORTEh>
 4004108:	e0bffe0d 	sth	r2,-8(fp)
	SPI_endTransaction();
 400410c:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return port;
 4004110:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4004114:	e037883a 	mov	sp,fp
 4004118:	dfc00117 	ldw	ra,4(sp)
 400411c:	df000017 	ldw	fp,0(sp)
 4004120:	dec00204 	addi	sp,sp,8
 4004124:	f800283a 	ret

04004128 <_ZN14EthernetClient8remoteIPEv>:

// https://github.com/per1234/EthernetMod
// returns the remote IP address: https://forum.arduino.cc/index.php?topic=82416.0
IPAddress EthernetClient::remoteIP()
{
 4004128:	defffa04 	addi	sp,sp,-24
 400412c:	dfc00515 	stw	ra,20(sp)
 4004130:	df000415 	stw	fp,16(sp)
 4004134:	df000404 	addi	fp,sp,16
 4004138:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return IPAddress((uint32_t)0);
 400413c:	e0bfff17 	ldw	r2,-4(fp)
 4004140:	10800103 	ldbu	r2,4(r2)
 4004144:	10803fcc 	andi	r2,r2,255
 4004148:	10800230 	cmpltui	r2,r2,8
 400414c:	1000061e 	bne	r2,zero,4004168 <_ZN14EthernetClient8remoteIPEv+0x40>
 4004150:	e0bffd04 	addi	r2,fp,-12
 4004154:	000b883a 	mov	r5,zero
 4004158:	1009883a 	mov	r4,r2
 400415c:	40072180 	call	4007218 <_ZN9IPAddressC1Em>
 4004160:	e0bffd17 	ldw	r2,-12(fp)
 4004164:	00000f06 	br	40041a4 <_ZN14EthernetClient8remoteIPEv+0x7c>
	uint8_t remoteIParray[4];
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4004168:	0009883a 	mov	r4,zero
 400416c:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.readSnDIPR(_sockindex, remoteIParray);
 4004170:	e0bfff17 	ldw	r2,-4(fp)
 4004174:	10800103 	ldbu	r2,4(r2)
 4004178:	10803fcc 	andi	r2,r2,255
 400417c:	e0fffe04 	addi	r3,fp,-8
 4004180:	180b883a 	mov	r5,r3
 4004184:	1009883a 	mov	r4,r2
 4004188:	40045940 	call	4004594 <_ZN10W5100Class10readSnDIPREhPh>
	SPI_endTransaction();
 400418c:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return IPAddress(remoteIParray);
 4004190:	e0bffe04 	addi	r2,fp,-8
 4004194:	100b883a 	mov	r5,r2
 4004198:	e13ffc04 	addi	r4,fp,-16
 400419c:	400724c0 	call	400724c <_ZN9IPAddressC1EPKh>
 40041a0:	e0bffc17 	ldw	r2,-16(fp)
}
 40041a4:	e037883a 	mov	sp,fp
 40041a8:	dfc00117 	ldw	ra,4(sp)
 40041ac:	df000017 	ldw	fp,0(sp)
 40041b0:	dec00204 	addi	sp,sp,8
 40041b4:	f800283a 	ret

040041b8 <_ZN14EthernetClient10remotePortEv>:

// https://github.com/per1234/EthernetMod
// from: https://github.com/ntruchsess/Arduino-1/commit/ca37de4ba4ecbdb941f14ac1fe7dd40f3008af75
uint16_t EthernetClient::remotePort()
{
 40041b8:	defffc04 	addi	sp,sp,-16
 40041bc:	dfc00315 	stw	ra,12(sp)
 40041c0:	df000215 	stw	fp,8(sp)
 40041c4:	df000204 	addi	fp,sp,8
 40041c8:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 40041cc:	e0bfff17 	ldw	r2,-4(fp)
 40041d0:	10800103 	ldbu	r2,4(r2)
 40041d4:	10803fcc 	andi	r2,r2,255
 40041d8:	10800230 	cmpltui	r2,r2,8
 40041dc:	1000021e 	bne	r2,zero,40041e8 <_ZN14EthernetClient10remotePortEv+0x30>
 40041e0:	0005883a 	mov	r2,zero
 40041e4:	00000a06 	br	4004210 <_ZN14EthernetClient10remotePortEv+0x58>
	uint16_t port;
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 40041e8:	0009883a 	mov	r4,zero
 40041ec:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	port = W5100.readSnDPORT(_sockindex);
 40041f0:	e0bfff17 	ldw	r2,-4(fp)
 40041f4:	10800103 	ldbu	r2,4(r2)
 40041f8:	10803fcc 	andi	r2,r2,255
 40041fc:	1009883a 	mov	r4,r2
 4004200:	40045dc0 	call	40045dc <_ZN10W5100Class11readSnDPORTEh>
 4004204:	e0bffe0d 	sth	r2,-8(fp)
	SPI_endTransaction();
 4004208:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return port;
 400420c:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4004210:	e037883a 	mov	sp,fp
 4004214:	dfc00117 	ldw	ra,4(sp)
 4004218:	df000017 	ldw	fp,0(sp)
 400421c:	dec00204 	addi	sp,sp,8
 4004220:	f800283a 	ret

04004224 <_Z41__static_initialization_and_destruction_0ii>:
 4004224:	defffb04 	addi	sp,sp,-20
 4004228:	dfc00415 	stw	ra,16(sp)
 400422c:	df000315 	stw	fp,12(sp)
 4004230:	df000304 	addi	fp,sp,12
 4004234:	e13ffe15 	stw	r4,-8(fp)
 4004238:	e17fff15 	stw	r5,-4(fp)
 400423c:	e0bffe17 	ldw	r2,-8(fp)
 4004240:	10800058 	cmpnei	r2,r2,1
 4004244:	1000091e 	bne	r2,zero,400426c <_Z41__static_initialization_and_destruction_0ii+0x48>
 4004248:	e0ffff17 	ldw	r3,-4(fp)
 400424c:	00bfffd4 	movui	r2,65535
 4004250:	1880061e 	bne	r3,r2,400426c <_Z41__static_initialization_and_destruction_0ii+0x48>
 4004254:	d8000015 	stw	zero,0(sp)
 4004258:	000f883a 	mov	r7,zero
 400425c:	000d883a 	mov	r6,zero
 4004260:	000b883a 	mov	r5,zero
 4004264:	d13ca204 	addi	r4,gp,-3448
 4004268:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
 400426c:	0001883a 	nop
 4004270:	e037883a 	mov	sp,fp
 4004274:	dfc00117 	ldw	ra,4(sp)
 4004278:	df000017 	ldw	fp,0(sp)
 400427c:	dec00204 	addi	sp,sp,8
 4004280:	f800283a 	ret

04004284 <_GLOBAL__sub_I__ZN14EthernetClient7connectEPKct>:
 4004284:	defffe04 	addi	sp,sp,-8
 4004288:	dfc00115 	stw	ra,4(sp)
 400428c:	df000015 	stw	fp,0(sp)
 4004290:	d839883a 	mov	fp,sp
 4004294:	017fffd4 	movui	r5,65535
 4004298:	01000044 	movi	r4,1
 400429c:	40042240 	call	4004224 <_Z41__static_initialization_and_destruction_0ii>
 40042a0:	e037883a 	mov	sp,fp
 40042a4:	dfc00117 	ldw	ra,4(sp)
 40042a8:	df000017 	ldw	fp,0(sp)
 40042ac:	dec00204 	addi	sp,sp,8
 40042b0:	f800283a 	ret

040042b4 <_ZN6Client12rawIPAddressER9IPAddress>:
  virtual void flush() = 0;
  virtual void stop() = 0;
  virtual uint8_t connected() = 0;
  virtual operator bool() = 0;
protected:
  uint8_t* rawIPAddress(IPAddress& addr) { return addr.raw_address(); };
 40042b4:	defffc04 	addi	sp,sp,-16
 40042b8:	dfc00315 	stw	ra,12(sp)
 40042bc:	df000215 	stw	fp,8(sp)
 40042c0:	df000204 	addi	fp,sp,8
 40042c4:	e13ffe15 	stw	r4,-8(fp)
 40042c8:	e17fff15 	stw	r5,-4(fp)
 40042cc:	e13fff17 	ldw	r4,-4(fp)
 40042d0:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 40042d4:	e037883a 	mov	sp,fp
 40042d8:	dfc00117 	ldw	ra,4(sp)
 40042dc:	df000017 	ldw	fp,0(sp)
 40042e0:	dec00204 	addi	sp,sp,8
 40042e4:	f800283a 	ret

040042e8 <_ZN13EthernetClass11dnsServerIPEv>:

	static void MACAddress(uint8_t *mac_address);
	static IPAddress localIP();
	static IPAddress subnetMask();
	static IPAddress gatewayIP();
	static IPAddress dnsServerIP() { return _dnsServerAddress; }
 40042e8:	deffff04 	addi	sp,sp,-4
 40042ec:	df000015 	stw	fp,0(sp)
 40042f0:	d839883a 	mov	fp,sp
 40042f4:	d0bc9d17 	ldw	r2,-3468(gp)
 40042f8:	e037883a 	mov	sp,fp
 40042fc:	df000017 	ldw	fp,0(sp)
 4004300:	dec00104 	addi	sp,sp,4
 4004304:	f800283a 	ret

04004308 <_ZN14EthernetClientD1Ev>:

class EthernetClient : public Client {
public:
	EthernetClient() : _sockindex(MAX_SOCK_NUM), _timeout(1000) { }
	EthernetClient(uint8_t s) : _sockindex(s), _timeout(1000) { }
	virtual ~EthernetClient() {};
 4004308:	defffd04 	addi	sp,sp,-12
 400430c:	dfc00215 	stw	ra,8(sp)
 4004310:	df000115 	stw	fp,4(sp)
 4004314:	df000104 	addi	fp,sp,4
 4004318:	e13fff15 	stw	r4,-4(fp)
 400431c:	008100b4 	movhi	r2,1026
 4004320:	10a8c504 	addi	r2,r2,-23788
 4004324:	e0ffff17 	ldw	r3,-4(fp)
 4004328:	18800015 	stw	r2,0(r3)
 400432c:	0005883a 	mov	r2,zero
 4004330:	10000226 	beq	r2,zero,400433c <_ZN14EthernetClientD1Ev+0x34>
 4004334:	e13fff17 	ldw	r4,-4(fp)
 4004338:	40097600 	call	4009760 <_ZdlPv>
 400433c:	e037883a 	mov	sp,fp
 4004340:	dfc00117 	ldw	ra,4(sp)
 4004344:	df000017 	ldw	fp,0(sp)
 4004348:	dec00204 	addi	sp,sp,8
 400434c:	f800283a 	ret

04004350 <_ZN14EthernetClientD0Ev>:
 4004350:	defffd04 	addi	sp,sp,-12
 4004354:	dfc00215 	stw	ra,8(sp)
 4004358:	df000115 	stw	fp,4(sp)
 400435c:	df000104 	addi	fp,sp,4
 4004360:	e13fff15 	stw	r4,-4(fp)
 4004364:	e13fff17 	ldw	r4,-4(fp)
 4004368:	40043080 	call	4004308 <_ZN14EthernetClientD1Ev>
 400436c:	e13fff17 	ldw	r4,-4(fp)
 4004370:	40097600 	call	4009760 <_ZdlPv>
 4004374:	e037883a 	mov	sp,fp
 4004378:	dfc00117 	ldw	ra,4(sp)
 400437c:	df000017 	ldw	fp,0(sp)
 4004380:	dec00204 	addi	sp,sp,8
 4004384:	f800283a 	ret

04004388 <_ZN14EthernetClientcvbEv>:
	virtual int read(uint8_t *buf, size_t size);
	virtual int peek();
	virtual void flush();
	virtual void stop();
	virtual uint8_t connected();
	virtual operator bool() { return _sockindex < MAX_SOCK_NUM; }
 4004388:	defffe04 	addi	sp,sp,-8
 400438c:	df000115 	stw	fp,4(sp)
 4004390:	df000104 	addi	fp,sp,4
 4004394:	e13fff15 	stw	r4,-4(fp)
 4004398:	e0bfff17 	ldw	r2,-4(fp)
 400439c:	10800103 	ldbu	r2,4(r2)
 40043a0:	10803fcc 	andi	r2,r2,255
 40043a4:	10800230 	cmpltui	r2,r2,8
 40043a8:	e037883a 	mov	sp,fp
 40043ac:	df000017 	ldw	fp,0(sp)
 40043b0:	dec00104 	addi	sp,sp,4
 40043b4:	f800283a 	ret

040043b8 <_ZN14EthernetClienteqEb>:
	virtual bool operator==(const bool value) { return bool() == value; }
 40043b8:	defffd04 	addi	sp,sp,-12
 40043bc:	df000215 	stw	fp,8(sp)
 40043c0:	df000204 	addi	fp,sp,8
 40043c4:	e13ffe15 	stw	r4,-8(fp)
 40043c8:	2805883a 	mov	r2,r5
 40043cc:	e0bfff05 	stb	r2,-4(fp)
 40043d0:	e0bfff03 	ldbu	r2,-4(fp)
 40043d4:	1080005c 	xori	r2,r2,1
 40043d8:	e037883a 	mov	sp,fp
 40043dc:	df000017 	ldw	fp,0(sp)
 40043e0:	dec00104 	addi	sp,sp,4
 40043e4:	f800283a 	ret

040043e8 <_ZN14EthernetClientneEb>:
	virtual bool operator!=(const bool value) { return bool() != value; }
 40043e8:	defffd04 	addi	sp,sp,-12
 40043ec:	df000215 	stw	fp,8(sp)
 40043f0:	df000204 	addi	fp,sp,8
 40043f4:	e13ffe15 	stw	r4,-8(fp)
 40043f8:	2805883a 	mov	r2,r5
 40043fc:	e0bfff05 	stb	r2,-4(fp)
 4004400:	e0bfff03 	ldbu	r2,-4(fp)
 4004404:	e037883a 	mov	sp,fp
 4004408:	df000017 	ldw	fp,0(sp)
 400440c:	dec00104 	addi	sp,sp,4
 4004410:	f800283a 	ret

04004414 <_ZN14EthernetClientneERKS_>:
	virtual bool operator==(const EthernetClient&);
	virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); }
 4004414:	defffc04 	addi	sp,sp,-16
 4004418:	dfc00315 	stw	ra,12(sp)
 400441c:	df000215 	stw	fp,8(sp)
 4004420:	df000204 	addi	fp,sp,8
 4004424:	e13ffe15 	stw	r4,-8(fp)
 4004428:	e17fff15 	stw	r5,-4(fp)
 400442c:	e0bffe17 	ldw	r2,-8(fp)
 4004430:	10800017 	ldw	r2,0(r2)
 4004434:	10801104 	addi	r2,r2,68
 4004438:	10800017 	ldw	r2,0(r2)
 400443c:	e17fff17 	ldw	r5,-4(fp)
 4004440:	e13ffe17 	ldw	r4,-8(fp)
 4004444:	103ee83a 	callr	r2
 4004448:	1080005c 	xori	r2,r2,1
 400444c:	e037883a 	mov	sp,fp
 4004450:	dfc00117 	ldw	ra,4(sp)
 4004454:	df000017 	ldw	fp,0(sp)
 4004458:	dec00204 	addi	sp,sp,8
 400445c:	f800283a 	ret

04004460 <_ZN14EthernetClient20setConnectionTimeoutEt>:
	uint8_t getSocketNumber() const { return _sockindex; }
	virtual uint16_t localPort();
	virtual IPAddress remoteIP();
	virtual uint16_t remotePort();
	virtual void setConnectionTimeout(uint16_t timeout) { _timeout = timeout; }
 4004460:	defffd04 	addi	sp,sp,-12
 4004464:	df000215 	stw	fp,8(sp)
 4004468:	df000204 	addi	fp,sp,8
 400446c:	e13ffe15 	stw	r4,-8(fp)
 4004470:	2805883a 	mov	r2,r5
 4004474:	e0bfff0d 	sth	r2,-4(fp)
 4004478:	e0bffe17 	ldw	r2,-8(fp)
 400447c:	e0ffff0b 	ldhu	r3,-4(fp)
 4004480:	10c0018d 	sth	r3,6(r2)
 4004484:	0001883a 	nop
 4004488:	e037883a 	mov	sp,fp
 400448c:	df000017 	ldw	fp,0(sp)
 4004490:	dec00104 	addi	sp,sp,4
 4004494:	f800283a 	ret

04004498 <_ZN10W5100Class7CH_BASEEv>:
#undef __GP_REGISTER_N

  // W5100 Socket registers
  // ----------------------
private:
  static uint16_t CH_BASE(void) {
 4004498:	deffff04 	addi	sp,sp,-4
 400449c:	df000015 	stw	fp,0(sp)
 40044a0:	d839883a 	mov	fp,sp
    //if (chip == 55) return 0x1000;
    //if (chip == 52) return 0x4000;
    //return 0x0400;
    return CH_BASE_MSB << 8;
 40044a4:	d0bca843 	ldbu	r2,-3423(gp)
 40044a8:	10803fcc 	andi	r2,r2,255
 40044ac:	1004923a 	slli	r2,r2,8
  }
 40044b0:	e037883a 	mov	sp,fp
 40044b4:	df000017 	ldw	fp,0(sp)
 40044b8:	dec00104 	addi	sp,sp,4
 40044bc:	f800283a 	ret

040044c0 <_ZN10W5100Class6readSnEhtPht>:
    return read(CH_BASE() + s * CH_SIZE + addr);
  }
  static inline uint8_t writeSn(SOCKET s, uint16_t addr, uint8_t data) {
    return write(CH_BASE() + s * CH_SIZE + addr, data);
  }
  static inline uint16_t readSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
 40044c0:	defffa04 	addi	sp,sp,-24
 40044c4:	dfc00515 	stw	ra,20(sp)
 40044c8:	df000415 	stw	fp,16(sp)
 40044cc:	df000404 	addi	fp,sp,16
 40044d0:	2807883a 	mov	r3,r5
 40044d4:	e1bffe15 	stw	r6,-8(fp)
 40044d8:	3805883a 	mov	r2,r7
 40044dc:	e13ffc05 	stb	r4,-16(fp)
 40044e0:	e0fffd0d 	sth	r3,-12(fp)
 40044e4:	e0bfff0d 	sth	r2,-4(fp)
    return read(CH_BASE() + s * CH_SIZE + addr, buf, len);
 40044e8:	40044980 	call	4004498 <_ZN10W5100Class7CH_BASEEv>
 40044ec:	1007883a 	mov	r3,r2
 40044f0:	e0bffc03 	ldbu	r2,-16(fp)
 40044f4:	1004923a 	slli	r2,r2,8
 40044f8:	1885883a 	add	r2,r3,r2
 40044fc:	1007883a 	mov	r3,r2
 4004500:	e0bffd0b 	ldhu	r2,-12(fp)
 4004504:	1885883a 	add	r2,r3,r2
 4004508:	10bfffcc 	andi	r2,r2,65535
 400450c:	e0ffff0b 	ldhu	r3,-4(fp)
 4004510:	180d883a 	mov	r6,r3
 4004514:	e17ffe17 	ldw	r5,-8(fp)
 4004518:	1009883a 	mov	r4,r2
 400451c:	4007d8c0 	call	4007d8c <_ZN10W5100Class4readEtPht>
  }
 4004520:	e037883a 	mov	sp,fp
 4004524:	dfc00117 	ldw	ra,4(sp)
 4004528:	df000017 	ldw	fp,0(sp)
 400452c:	dec00204 	addi	sp,sp,8
 4004530:	f800283a 	ret

04004534 <_ZN10W5100Class10readSnPORTEh>:
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
 4004534:	defffc04 	addi	sp,sp,-16
 4004538:	dfc00315 	stw	ra,12(sp)
 400453c:	df000215 	stw	fp,8(sp)
 4004540:	df000204 	addi	fp,sp,8
 4004544:	2005883a 	mov	r2,r4
 4004548:	e0bfff05 	stb	r2,-4(fp)
 400454c:	e0bfff03 	ldbu	r2,-4(fp)
 4004550:	01c00084 	movi	r7,2
 4004554:	e1bffe04 	addi	r6,fp,-8
 4004558:	01400104 	movi	r5,4
 400455c:	1009883a 	mov	r4,r2
 4004560:	40044c00 	call	40044c0 <_ZN10W5100Class6readSnEhtPht>
 4004564:	e0bffe03 	ldbu	r2,-8(fp)
 4004568:	10803fcc 	andi	r2,r2,255
 400456c:	1004923a 	slli	r2,r2,8
 4004570:	1007883a 	mov	r3,r2
 4004574:	e0bffe43 	ldbu	r2,-7(fp)
 4004578:	10803fcc 	andi	r2,r2,255
 400457c:	1884b03a 	or	r2,r3,r2
 4004580:	e037883a 	mov	sp,fp
 4004584:	dfc00117 	ldw	ra,4(sp)
 4004588:	df000017 	ldw	fp,0(sp)
 400458c:	dec00204 	addi	sp,sp,8
 4004590:	f800283a 	ret

04004594 <_ZN10W5100Class10readSnDIPREhPh>:
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
 4004594:	defffc04 	addi	sp,sp,-16
 4004598:	dfc00315 	stw	ra,12(sp)
 400459c:	df000215 	stw	fp,8(sp)
 40045a0:	df000204 	addi	fp,sp,8
 40045a4:	2005883a 	mov	r2,r4
 40045a8:	e17fff15 	stw	r5,-4(fp)
 40045ac:	e0bffe05 	stb	r2,-8(fp)
 40045b0:	e0bffe03 	ldbu	r2,-8(fp)
 40045b4:	01c00104 	movi	r7,4
 40045b8:	e1bfff17 	ldw	r6,-4(fp)
 40045bc:	01400304 	movi	r5,12
 40045c0:	1009883a 	mov	r4,r2
 40045c4:	40044c00 	call	40044c0 <_ZN10W5100Class6readSnEhtPht>
 40045c8:	e037883a 	mov	sp,fp
 40045cc:	dfc00117 	ldw	ra,4(sp)
 40045d0:	df000017 	ldw	fp,0(sp)
 40045d4:	dec00204 	addi	sp,sp,8
 40045d8:	f800283a 	ret

040045dc <_ZN10W5100Class11readSnDPORTEh>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
 40045dc:	defffc04 	addi	sp,sp,-16
 40045e0:	dfc00315 	stw	ra,12(sp)
 40045e4:	df000215 	stw	fp,8(sp)
 40045e8:	df000204 	addi	fp,sp,8
 40045ec:	2005883a 	mov	r2,r4
 40045f0:	e0bfff05 	stb	r2,-4(fp)
 40045f4:	e0bfff03 	ldbu	r2,-4(fp)
 40045f8:	01c00084 	movi	r7,2
 40045fc:	e1bffe04 	addi	r6,fp,-8
 4004600:	01400404 	movi	r5,16
 4004604:	1009883a 	mov	r4,r2
 4004608:	40044c00 	call	40044c0 <_ZN10W5100Class6readSnEhtPht>
 400460c:	e0bffe03 	ldbu	r2,-8(fp)
 4004610:	10803fcc 	andi	r2,r2,255
 4004614:	1004923a 	slli	r2,r2,8
 4004618:	1007883a 	mov	r3,r2
 400461c:	e0bffe43 	ldbu	r2,-7(fp)
 4004620:	10803fcc 	andi	r2,r2,255
 4004624:	1884b03a 	or	r2,r3,r2
 4004628:	e037883a 	mov	sp,fp
 400462c:	dfc00117 	ldw	ra,4(sp)
 4004630:	df000017 	ldw	fp,0(sp)
 4004634:	dec00204 	addi	sp,sp,8
 4004638:	f800283a 	ret

0400463c <_ZN9DNSClientC1Ev>:
#ifndef DNSClient_h
#define DNSClient_h

#include "Ethernet.h"

class DNSClient
 400463c:	defffd04 	addi	sp,sp,-12
 4004640:	dfc00215 	stw	ra,8(sp)
 4004644:	df000115 	stw	fp,4(sp)
 4004648:	df000104 	addi	fp,sp,4
 400464c:	e13fff15 	stw	r4,-4(fp)
 4004650:	e0bfff17 	ldw	r2,-4(fp)
 4004654:	1009883a 	mov	r4,r2
 4004658:	400717c0 	call	400717c <_ZN9IPAddressC1Ev>
 400465c:	e0bfff17 	ldw	r2,-4(fp)
 4004660:	10800204 	addi	r2,r2,8
 4004664:	1009883a 	mov	r4,r2
 4004668:	40030b80 	call	40030b8 <_ZN11EthernetUDPC1Ev>
 400466c:	0001883a 	nop
 4004670:	e037883a 	mov	sp,fp
 4004674:	dfc00117 	ldw	ra,4(sp)
 4004678:	df000017 	ldw	fp,0(sp)
 400467c:	dec00204 	addi	sp,sp,8
 4004680:	f800283a 	ret

04004684 <_ZN14EthernetServer5beginEv>:

uint16_t EthernetServer::server_port[MAX_SOCK_NUM];


void EthernetServer::begin()
{
 4004684:	defffc04 	addi	sp,sp,-16
 4004688:	dfc00315 	stw	ra,12(sp)
 400468c:	df000215 	stw	fp,8(sp)
 4004690:	df000204 	addi	fp,sp,8
 4004694:	e13fff15 	stw	r4,-4(fp)
	uint8_t sockindex = Ethernet.socketBegin(SnMR::TCP, _port);
 4004698:	e0bfff17 	ldw	r2,-4(fp)
 400469c:	1080010b 	ldhu	r2,4(r2)
 40046a0:	10bfffcc 	andi	r2,r2,65535
 40046a4:	100b883a 	mov	r5,r2
 40046a8:	01000844 	movi	r4,33
 40046ac:	40056780 	call	4005678 <_ZN13EthernetClass11socketBeginEht>
 40046b0:	e0bffe05 	stb	r2,-8(fp)
	if (sockindex < MAX_SOCK_NUM) {
 40046b4:	e0bffe03 	ldbu	r2,-8(fp)
 40046b8:	10800228 	cmpgeui	r2,r2,8
 40046bc:	1000131e 	bne	r2,zero,400470c <_ZN14EthernetServer5beginEv+0x88>
		if (Ethernet.socketListen(sockindex)) {
 40046c0:	e0bffe03 	ldbu	r2,-8(fp)
 40046c4:	1009883a 	mov	r4,r2
 40046c8:	4005d1c0 	call	4005d1c <_ZN13EthernetClass12socketListenEh>
 40046cc:	10803fcc 	andi	r2,r2,255
 40046d0:	1004c03a 	cmpne	r2,r2,zero
 40046d4:	10803fcc 	andi	r2,r2,255
 40046d8:	10000926 	beq	r2,zero,4004700 <_ZN14EthernetServer5beginEv+0x7c>
			server_port[sockindex] = _port;
 40046dc:	e0fffe03 	ldbu	r3,-8(fp)
 40046e0:	e0bfff17 	ldw	r2,-4(fp)
 40046e4:	1100010b 	ldhu	r4,4(r2)
 40046e8:	008100f4 	movhi	r2,1027
 40046ec:	10a3a104 	addi	r2,r2,-29052
 40046f0:	18c7883a 	add	r3,r3,r3
 40046f4:	10c5883a 	add	r2,r2,r3
 40046f8:	1100000d 	sth	r4,0(r2)
		} else {
			Ethernet.socketDisconnect(sockindex);
		}
	}
}
 40046fc:	00000306 	br	400470c <_ZN14EthernetServer5beginEv+0x88>
	uint8_t sockindex = Ethernet.socketBegin(SnMR::TCP, _port);
	if (sockindex < MAX_SOCK_NUM) {
		if (Ethernet.socketListen(sockindex)) {
			server_port[sockindex] = _port;
		} else {
			Ethernet.socketDisconnect(sockindex);
 4004700:	e0bffe03 	ldbu	r2,-8(fp)
 4004704:	1009883a 	mov	r4,r2
 4004708:	4005e0c0 	call	4005e0c <_ZN13EthernetClass16socketDisconnectEh>
		}
	}
}
 400470c:	0001883a 	nop
 4004710:	e037883a 	mov	sp,fp
 4004714:	dfc00117 	ldw	ra,4(sp)
 4004718:	df000017 	ldw	fp,0(sp)
 400471c:	dec00204 	addi	sp,sp,8
 4004720:	f800283a 	ret

04004724 <_ZN14EthernetServer9availableEv>:

EthernetClient EthernetServer::available()
{
 4004724:	defffa04 	addi	sp,sp,-24
 4004728:	dfc00515 	stw	ra,20(sp)
 400472c:	df000415 	stw	fp,16(sp)
 4004730:	df000404 	addi	fp,sp,16
 4004734:	e13ffe15 	stw	r4,-8(fp)
 4004738:	e17fff15 	stw	r5,-4(fp)
	bool listening = false;
 400473c:	e03ffc05 	stb	zero,-16(fp)
	uint8_t sockindex = MAX_SOCK_NUM;
 4004740:	00800204 	movi	r2,8
 4004744:	e0bffc45 	stb	r2,-15(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 4004748:	00800204 	movi	r2,8
 400474c:	e0bffc85 	stb	r2,-14(fp)

	chip = W5100.getChip();
 4004750:	40035fc0 	call	40035fc <_ZN10W5100Class7getChipEv>
 4004754:	e0bffd05 	stb	r2,-12(fp)
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
 4004758:	e0bffd03 	ldbu	r2,-12(fp)
 400475c:	1000041e 	bne	r2,zero,4004770 <_ZN14EthernetServer9availableEv+0x4c>
 4004760:	01400204 	movi	r5,8
 4004764:	e13ffe17 	ldw	r4,-8(fp)
 4004768:	4004d300 	call	4004d30 <_ZN14EthernetClientC1Eh>
 400476c:	00005006 	br	40048b0 <_ZN14EthernetServer9availableEv+0x18c>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4004770:	e0bffd03 	ldbu	r2,-12(fp)
 4004774:	10800cd8 	cmpnei	r2,r2,51
 4004778:	1000021e 	bne	r2,zero,4004784 <_ZN14EthernetServer9availableEv+0x60>
 400477c:	00800104 	movi	r2,4
 4004780:	e0bffc85 	stb	r2,-14(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4004784:	e03ffcc5 	stb	zero,-13(fp)
 4004788:	e0fffcc3 	ldbu	r3,-13(fp)
 400478c:	e0bffc83 	ldbu	r2,-14(fp)
 4004790:	18803a2e 	bgeu	r3,r2,400487c <_ZN14EthernetServer9availableEv+0x158>
		if (server_port[i] == _port) {
 4004794:	e0fffcc3 	ldbu	r3,-13(fp)
 4004798:	008100f4 	movhi	r2,1027
 400479c:	10a3a104 	addi	r2,r2,-29052
 40047a0:	18c7883a 	add	r3,r3,r3
 40047a4:	10c5883a 	add	r2,r2,r3
 40047a8:	10c0000b 	ldhu	r3,0(r2)
 40047ac:	e0bfff17 	ldw	r2,-4(fp)
 40047b0:	1080010b 	ldhu	r2,4(r2)
 40047b4:	18ffffcc 	andi	r3,r3,65535
 40047b8:	10bfffcc 	andi	r2,r2,65535
 40047bc:	18802b1e 	bne	r3,r2,400486c <_ZN14EthernetServer9availableEv+0x148>
			uint8_t stat = Ethernet.socketStatus(i);
 40047c0:	e0bffcc3 	ldbu	r2,-13(fp)
 40047c4:	1009883a 	mov	r4,r2
 40047c8:	4005c840 	call	4005c84 <_ZN13EthernetClass12socketStatusEh>
 40047cc:	e0bffd45 	stb	r2,-11(fp)
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
 40047d0:	e0bffd43 	ldbu	r2,-11(fp)
 40047d4:	108005e0 	cmpeqi	r2,r2,23
 40047d8:	1000031e 	bne	r2,zero,40047e8 <_ZN14EthernetServer9availableEv+0xc4>
 40047dc:	e0bffd43 	ldbu	r2,-11(fp)
 40047e0:	10800718 	cmpnei	r2,r2,28
 40047e4:	1000111e 	bne	r2,zero,400482c <_ZN14EthernetServer9availableEv+0x108>
				if (Ethernet.socketRecvAvailable(i) > 0) {
 40047e8:	e0bffcc3 	ldbu	r2,-13(fp)
 40047ec:	1009883a 	mov	r4,r2
 40047f0:	400628c0 	call	400628c <_ZN13EthernetClass19socketRecvAvailableEh>
 40047f4:	10bfffcc 	andi	r2,r2,65535
 40047f8:	1004c03a 	cmpne	r2,r2,zero
 40047fc:	10803fcc 	andi	r2,r2,255
 4004800:	10000326 	beq	r2,zero,4004810 <_ZN14EthernetServer9availableEv+0xec>
					sockindex = i;
 4004804:	e0bffcc3 	ldbu	r2,-13(fp)
 4004808:	e0bffc45 	stb	r2,-15(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 400480c:	00001606 	br	4004868 <_ZN14EthernetServer9availableEv+0x144>
					sockindex = i;
				} else {
					// remote host closed connection, our end still open
					if (stat == SnSR::CLOSE_WAIT) {
 4004810:	e0bffd43 	ldbu	r2,-11(fp)
 4004814:	10800718 	cmpnei	r2,r2,28
 4004818:	1000131e 	bne	r2,zero,4004868 <_ZN14EthernetServer9availableEv+0x144>
						Ethernet.socketDisconnect(i);
 400481c:	e0bffcc3 	ldbu	r2,-13(fp)
 4004820:	1009883a 	mov	r4,r2
 4004824:	4005e0c0 	call	4005e0c <_ZN13EthernetClass16socketDisconnectEh>
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 4004828:	00000f06 	br	4004868 <_ZN14EthernetServer9availableEv+0x144>
					if (stat == SnSR::CLOSE_WAIT) {
						Ethernet.socketDisconnect(i);
						// status becomes LAST_ACK for short time
					}
				}
			} else if (stat == SnSR::LISTEN) {
 400482c:	e0bffd43 	ldbu	r2,-11(fp)
 4004830:	10800518 	cmpnei	r2,r2,20
 4004834:	1000031e 	bne	r2,zero,4004844 <_ZN14EthernetServer9availableEv+0x120>
				listening = true;
 4004838:	00800044 	movi	r2,1
 400483c:	e0bffc05 	stb	r2,-16(fp)
 4004840:	00000a06 	br	400486c <_ZN14EthernetServer9availableEv+0x148>
			} else if (stat == SnSR::CLOSED) {
 4004844:	e0bffd43 	ldbu	r2,-11(fp)
 4004848:	1000081e 	bne	r2,zero,400486c <_ZN14EthernetServer9availableEv+0x148>
				server_port[i] = 0;
 400484c:	e0fffcc3 	ldbu	r3,-13(fp)
 4004850:	008100f4 	movhi	r2,1027
 4004854:	10a3a104 	addi	r2,r2,-29052
 4004858:	18c7883a 	add	r3,r3,r3
 400485c:	10c5883a 	add	r2,r2,r3
 4004860:	1000000d 	sth	zero,0(r2)
 4004864:	00000106 	br	400486c <_ZN14EthernetServer9availableEv+0x148>
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 4004868:	0001883a 	nop
	chip = W5100.getChip();
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 400486c:	e0bffcc3 	ldbu	r2,-13(fp)
 4004870:	10800044 	addi	r2,r2,1
 4004874:	e0bffcc5 	stb	r2,-13(fp)
 4004878:	003fc306 	br	4004788 <__alt_data_end+0xfc004788>
			} else if (stat == SnSR::CLOSED) {
				server_port[i] = 0;
			}
		}
	}
	if (!listening) begin();
 400487c:	e0bffc03 	ldbu	r2,-16(fp)
 4004880:	1080005c 	xori	r2,r2,1
 4004884:	10803fcc 	andi	r2,r2,255
 4004888:	10000526 	beq	r2,zero,40048a0 <_ZN14EthernetServer9availableEv+0x17c>
 400488c:	e0bfff17 	ldw	r2,-4(fp)
 4004890:	10800017 	ldw	r2,0(r2)
 4004894:	10800017 	ldw	r2,0(r2)
 4004898:	e13fff17 	ldw	r4,-4(fp)
 400489c:	103ee83a 	callr	r2
	return EthernetClient(sockindex);
 40048a0:	e0bffc43 	ldbu	r2,-15(fp)
 40048a4:	100b883a 	mov	r5,r2
 40048a8:	e13ffe17 	ldw	r4,-8(fp)
 40048ac:	4004d300 	call	4004d30 <_ZN14EthernetClientC1Eh>
}
 40048b0:	e0bffe17 	ldw	r2,-8(fp)
 40048b4:	e037883a 	mov	sp,fp
 40048b8:	dfc00117 	ldw	ra,4(sp)
 40048bc:	df000017 	ldw	fp,0(sp)
 40048c0:	dec00204 	addi	sp,sp,8
 40048c4:	f800283a 	ret

040048c8 <_ZN14EthernetServer6acceptEv>:

EthernetClient EthernetServer::accept()
{
 40048c8:	defffa04 	addi	sp,sp,-24
 40048cc:	dfc00515 	stw	ra,20(sp)
 40048d0:	df000415 	stw	fp,16(sp)
 40048d4:	df000404 	addi	fp,sp,16
 40048d8:	e13ffe15 	stw	r4,-8(fp)
 40048dc:	e17fff15 	stw	r5,-4(fp)
	bool listening = false;
 40048e0:	e03ffc05 	stb	zero,-16(fp)
	uint8_t sockindex = MAX_SOCK_NUM;
 40048e4:	00800204 	movi	r2,8
 40048e8:	e0bffc45 	stb	r2,-15(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 40048ec:	00800204 	movi	r2,8
 40048f0:	e0bffc85 	stb	r2,-14(fp)

	chip = W5100.getChip();
 40048f4:	40035fc0 	call	40035fc <_ZN10W5100Class7getChipEv>
 40048f8:	e0bffd05 	stb	r2,-12(fp)
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
 40048fc:	e0bffd03 	ldbu	r2,-12(fp)
 4004900:	1000041e 	bne	r2,zero,4004914 <_ZN14EthernetServer6acceptEv+0x4c>
 4004904:	01400204 	movi	r5,8
 4004908:	e13ffe17 	ldw	r4,-8(fp)
 400490c:	4004d300 	call	4004d30 <_ZN14EthernetClientC1Eh>
 4004910:	00004906 	br	4004a38 <_ZN14EthernetServer6acceptEv+0x170>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4004914:	e0bffd03 	ldbu	r2,-12(fp)
 4004918:	10800cd8 	cmpnei	r2,r2,51
 400491c:	1000021e 	bne	r2,zero,4004928 <_ZN14EthernetServer6acceptEv+0x60>
 4004920:	00800104 	movi	r2,4
 4004924:	e0bffc85 	stb	r2,-14(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4004928:	e03ffcc5 	stb	zero,-13(fp)
 400492c:	e0fffcc3 	ldbu	r3,-13(fp)
 4004930:	e0bffc83 	ldbu	r2,-14(fp)
 4004934:	1880332e 	bgeu	r3,r2,4004a04 <_ZN14EthernetServer6acceptEv+0x13c>
		if (server_port[i] == _port) {
 4004938:	e0fffcc3 	ldbu	r3,-13(fp)
 400493c:	008100f4 	movhi	r2,1027
 4004940:	10a3a104 	addi	r2,r2,-29052
 4004944:	18c7883a 	add	r3,r3,r3
 4004948:	10c5883a 	add	r2,r2,r3
 400494c:	10c0000b 	ldhu	r3,0(r2)
 4004950:	e0bfff17 	ldw	r2,-4(fp)
 4004954:	1080010b 	ldhu	r2,4(r2)
 4004958:	18ffffcc 	andi	r3,r3,65535
 400495c:	10bfffcc 	andi	r2,r2,65535
 4004960:	1880241e 	bne	r3,r2,40049f4 <_ZN14EthernetServer6acceptEv+0x12c>
			uint8_t stat = Ethernet.socketStatus(i);
 4004964:	e0bffcc3 	ldbu	r2,-13(fp)
 4004968:	1009883a 	mov	r4,r2
 400496c:	4005c840 	call	4005c84 <_ZN13EthernetClass12socketStatusEh>
 4004970:	e0bffd45 	stb	r2,-11(fp)
			if (sockindex == MAX_SOCK_NUM &&
 4004974:	e0bffc43 	ldbu	r2,-15(fp)
 4004978:	10800218 	cmpnei	r2,r2,8
 400497c:	10000f1e 	bne	r2,zero,40049bc <_ZN14EthernetServer6acceptEv+0xf4>
 4004980:	e0bffd43 	ldbu	r2,-11(fp)
 4004984:	108005e0 	cmpeqi	r2,r2,23
 4004988:	1000031e 	bne	r2,zero,4004998 <_ZN14EthernetServer6acceptEv+0xd0>
			  (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT)) {
 400498c:	e0bffd43 	ldbu	r2,-11(fp)
 4004990:	10800718 	cmpnei	r2,r2,28
 4004994:	1000091e 	bne	r2,zero,40049bc <_ZN14EthernetServer6acceptEv+0xf4>
				// Return the connected client even if no data received.
				// Some protocols like FTP expect the server to send the
				// first data.
				sockindex = i;
 4004998:	e0bffcc3 	ldbu	r2,-13(fp)
 400499c:	e0bffc45 	stb	r2,-15(fp)
				server_port[i] = 0; // only return the client once
 40049a0:	e0fffcc3 	ldbu	r3,-13(fp)
 40049a4:	008100f4 	movhi	r2,1027
 40049a8:	10a3a104 	addi	r2,r2,-29052
 40049ac:	18c7883a 	add	r3,r3,r3
 40049b0:	10c5883a 	add	r2,r2,r3
 40049b4:	1000000d 	sth	zero,0(r2)
 40049b8:	00000e06 	br	40049f4 <_ZN14EthernetServer6acceptEv+0x12c>
			} else if (stat == SnSR::LISTEN) {
 40049bc:	e0bffd43 	ldbu	r2,-11(fp)
 40049c0:	10800518 	cmpnei	r2,r2,20
 40049c4:	1000031e 	bne	r2,zero,40049d4 <_ZN14EthernetServer6acceptEv+0x10c>
				listening = true;
 40049c8:	00800044 	movi	r2,1
 40049cc:	e0bffc05 	stb	r2,-16(fp)
 40049d0:	00000806 	br	40049f4 <_ZN14EthernetServer6acceptEv+0x12c>
			} else if (stat == SnSR::CLOSED) {
 40049d4:	e0bffd43 	ldbu	r2,-11(fp)
 40049d8:	1000061e 	bne	r2,zero,40049f4 <_ZN14EthernetServer6acceptEv+0x12c>
				server_port[i] = 0;
 40049dc:	e0fffcc3 	ldbu	r3,-13(fp)
 40049e0:	008100f4 	movhi	r2,1027
 40049e4:	10a3a104 	addi	r2,r2,-29052
 40049e8:	18c7883a 	add	r3,r3,r3
 40049ec:	10c5883a 	add	r2,r2,r3
 40049f0:	1000000d 	sth	zero,0(r2)
	chip = W5100.getChip();
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 40049f4:	e0bffcc3 	ldbu	r2,-13(fp)
 40049f8:	10800044 	addi	r2,r2,1
 40049fc:	e0bffcc5 	stb	r2,-13(fp)
 4004a00:	003fca06 	br	400492c <__alt_data_end+0xfc00492c>
			} else if (stat == SnSR::CLOSED) {
				server_port[i] = 0;
			}
		}
	}
	if (!listening) begin();
 4004a04:	e0bffc03 	ldbu	r2,-16(fp)
 4004a08:	1080005c 	xori	r2,r2,1
 4004a0c:	10803fcc 	andi	r2,r2,255
 4004a10:	10000526 	beq	r2,zero,4004a28 <_ZN14EthernetServer6acceptEv+0x160>
 4004a14:	e0bfff17 	ldw	r2,-4(fp)
 4004a18:	10800017 	ldw	r2,0(r2)
 4004a1c:	10800017 	ldw	r2,0(r2)
 4004a20:	e13fff17 	ldw	r4,-4(fp)
 4004a24:	103ee83a 	callr	r2
	return EthernetClient(sockindex);
 4004a28:	e0bffc43 	ldbu	r2,-15(fp)
 4004a2c:	100b883a 	mov	r5,r2
 4004a30:	e13ffe17 	ldw	r4,-8(fp)
 4004a34:	4004d300 	call	4004d30 <_ZN14EthernetClientC1Eh>
}
 4004a38:	e0bffe17 	ldw	r2,-8(fp)
 4004a3c:	e037883a 	mov	sp,fp
 4004a40:	dfc00117 	ldw	ra,4(sp)
 4004a44:	df000017 	ldw	fp,0(sp)
 4004a48:	dec00204 	addi	sp,sp,8
 4004a4c:	f800283a 	ret

04004a50 <_ZN14EthernetServercvbEv>:

EthernetServer::operator bool()
{
 4004a50:	defffc04 	addi	sp,sp,-16
 4004a54:	dfc00315 	stw	ra,12(sp)
 4004a58:	df000215 	stw	fp,8(sp)
 4004a5c:	df000204 	addi	fp,sp,8
 4004a60:	e13fff15 	stw	r4,-4(fp)
	uint8_t maxindex=MAX_SOCK_NUM;
 4004a64:	00800204 	movi	r2,8
 4004a68:	e0bffe05 	stb	r2,-8(fp)
#if MAX_SOCK_NUM > 4
	if (W5100.getChip() == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4004a6c:	40035fc0 	call	40035fc <_ZN10W5100Class7getChipEv>
 4004a70:	10803fcc 	andi	r2,r2,255
 4004a74:	10800ce0 	cmpeqi	r2,r2,51
 4004a78:	10803fcc 	andi	r2,r2,255
 4004a7c:	10000226 	beq	r2,zero,4004a88 <_ZN14EthernetServercvbEv+0x38>
 4004a80:	00800104 	movi	r2,4
 4004a84:	e0bffe05 	stb	r2,-8(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4004a88:	e03ffe45 	stb	zero,-7(fp)
 4004a8c:	e0fffe43 	ldbu	r3,-7(fp)
 4004a90:	e0bffe03 	ldbu	r2,-8(fp)
 4004a94:	1880182e 	bgeu	r3,r2,4004af8 <_ZN14EthernetServercvbEv+0xa8>
		if (server_port[i] == _port) {
 4004a98:	e0fffe43 	ldbu	r3,-7(fp)
 4004a9c:	008100f4 	movhi	r2,1027
 4004aa0:	10a3a104 	addi	r2,r2,-29052
 4004aa4:	18c7883a 	add	r3,r3,r3
 4004aa8:	10c5883a 	add	r2,r2,r3
 4004aac:	10c0000b 	ldhu	r3,0(r2)
 4004ab0:	e0bfff17 	ldw	r2,-4(fp)
 4004ab4:	1080010b 	ldhu	r2,4(r2)
 4004ab8:	18ffffcc 	andi	r3,r3,65535
 4004abc:	10bfffcc 	andi	r2,r2,65535
 4004ac0:	1880091e 	bne	r3,r2,4004ae8 <_ZN14EthernetServercvbEv+0x98>
			if (Ethernet.socketStatus(i) == SnSR::LISTEN) {
 4004ac4:	e0bffe43 	ldbu	r2,-7(fp)
 4004ac8:	1009883a 	mov	r4,r2
 4004acc:	4005c840 	call	4005c84 <_ZN13EthernetClass12socketStatusEh>
 4004ad0:	10803fcc 	andi	r2,r2,255
 4004ad4:	10800520 	cmpeqi	r2,r2,20
 4004ad8:	10803fcc 	andi	r2,r2,255
 4004adc:	10000226 	beq	r2,zero,4004ae8 <_ZN14EthernetServercvbEv+0x98>
				return true; // server is listening for incoming clients
 4004ae0:	00800044 	movi	r2,1
 4004ae4:	00000506 	br	4004afc <_ZN14EthernetServercvbEv+0xac>
{
	uint8_t maxindex=MAX_SOCK_NUM;
#if MAX_SOCK_NUM > 4
	if (W5100.getChip() == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4004ae8:	e0bffe43 	ldbu	r2,-7(fp)
 4004aec:	10800044 	addi	r2,r2,1
 4004af0:	e0bffe45 	stb	r2,-7(fp)
 4004af4:	003fe506 	br	4004a8c <__alt_data_end+0xfc004a8c>
			if (Ethernet.socketStatus(i) == SnSR::LISTEN) {
				return true; // server is listening for incoming clients
			}
		}
	}
	return false;
 4004af8:	0005883a 	mov	r2,zero
}
 4004afc:	e037883a 	mov	sp,fp
 4004b00:	dfc00117 	ldw	ra,4(sp)
 4004b04:	df000017 	ldw	fp,0(sp)
 4004b08:	dec00204 	addi	sp,sp,8
 4004b0c:	f800283a 	ret

04004b10 <_ZN14EthernetServer5writeEh>:
	}
}
#endif

size_t EthernetServer::write(uint8_t b)
{
 4004b10:	defffc04 	addi	sp,sp,-16
 4004b14:	dfc00315 	stw	ra,12(sp)
 4004b18:	df000215 	stw	fp,8(sp)
 4004b1c:	df000204 	addi	fp,sp,8
 4004b20:	e13ffe15 	stw	r4,-8(fp)
 4004b24:	2805883a 	mov	r2,r5
 4004b28:	e0bfff05 	stb	r2,-4(fp)
	return write(&b, 1);
 4004b2c:	e0bffe17 	ldw	r2,-8(fp)
 4004b30:	10800017 	ldw	r2,0(r2)
 4004b34:	10800204 	addi	r2,r2,8
 4004b38:	10800017 	ldw	r2,0(r2)
 4004b3c:	e0ffff04 	addi	r3,fp,-4
 4004b40:	01800044 	movi	r6,1
 4004b44:	180b883a 	mov	r5,r3
 4004b48:	e13ffe17 	ldw	r4,-8(fp)
 4004b4c:	103ee83a 	callr	r2
}
 4004b50:	e037883a 	mov	sp,fp
 4004b54:	dfc00117 	ldw	ra,4(sp)
 4004b58:	df000017 	ldw	fp,0(sp)
 4004b5c:	dec00204 	addi	sp,sp,8
 4004b60:	f800283a 	ret

04004b64 <_ZN14EthernetServer5writeEPKhj>:

size_t EthernetServer::write(const uint8_t *buffer, size_t size)
{
 4004b64:	defff804 	addi	sp,sp,-32
 4004b68:	dfc00715 	stw	ra,28(sp)
 4004b6c:	df000615 	stw	fp,24(sp)
 4004b70:	df000604 	addi	fp,sp,24
 4004b74:	e13ffd15 	stw	r4,-12(fp)
 4004b78:	e17ffe15 	stw	r5,-8(fp)
 4004b7c:	e1bfff15 	stw	r6,-4(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 4004b80:	00800204 	movi	r2,8
 4004b84:	e0bffa05 	stb	r2,-24(fp)

	chip = W5100.getChip();
 4004b88:	40035fc0 	call	40035fc <_ZN10W5100Class7getChipEv>
 4004b8c:	e0bffa85 	stb	r2,-22(fp)
	if (!chip) return 0;
 4004b90:	e0bffa83 	ldbu	r2,-22(fp)
 4004b94:	1000021e 	bne	r2,zero,4004ba0 <_ZN14EthernetServer5writeEPKhj+0x3c>
 4004b98:	0005883a 	mov	r2,zero
 4004b9c:	00002e06 	br	4004c58 <_ZN14EthernetServer5writeEPKhj+0xf4>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4004ba0:	e0bffa83 	ldbu	r2,-22(fp)
 4004ba4:	10800cd8 	cmpnei	r2,r2,51
 4004ba8:	1000021e 	bne	r2,zero,4004bb4 <_ZN14EthernetServer5writeEPKhj+0x50>
 4004bac:	00800104 	movi	r2,4
 4004bb0:	e0bffa05 	stb	r2,-24(fp)
#endif
	available();
 4004bb4:	e0bffb04 	addi	r2,fp,-20
 4004bb8:	e17ffd17 	ldw	r5,-12(fp)
 4004bbc:	1009883a 	mov	r4,r2
 4004bc0:	40047240 	call	4004724 <_ZN14EthernetServer9availableEv>
 4004bc4:	e0bffb04 	addi	r2,fp,-20
 4004bc8:	1009883a 	mov	r4,r2
 4004bcc:	40043080 	call	4004308 <_ZN14EthernetClientD1Ev>
	for (uint8_t i=0; i < maxindex; i++) {
 4004bd0:	e03ffa45 	stb	zero,-23(fp)
 4004bd4:	e0fffa43 	ldbu	r3,-23(fp)
 4004bd8:	e0bffa03 	ldbu	r2,-24(fp)
 4004bdc:	18801d2e 	bgeu	r3,r2,4004c54 <_ZN14EthernetServer5writeEPKhj+0xf0>
		if (server_port[i] == _port) {
 4004be0:	e0fffa43 	ldbu	r3,-23(fp)
 4004be4:	008100f4 	movhi	r2,1027
 4004be8:	10a3a104 	addi	r2,r2,-29052
 4004bec:	18c7883a 	add	r3,r3,r3
 4004bf0:	10c5883a 	add	r2,r2,r3
 4004bf4:	10c0000b 	ldhu	r3,0(r2)
 4004bf8:	e0bffd17 	ldw	r2,-12(fp)
 4004bfc:	1080010b 	ldhu	r2,4(r2)
 4004c00:	18ffffcc 	andi	r3,r3,65535
 4004c04:	10bfffcc 	andi	r2,r2,65535
 4004c08:	18800e1e 	bne	r3,r2,4004c44 <_ZN14EthernetServer5writeEPKhj+0xe0>
			if (Ethernet.socketStatus(i) == SnSR::ESTABLISHED) {
 4004c0c:	e0bffa43 	ldbu	r2,-23(fp)
 4004c10:	1009883a 	mov	r4,r2
 4004c14:	4005c840 	call	4005c84 <_ZN13EthernetClass12socketStatusEh>
 4004c18:	10803fcc 	andi	r2,r2,255
 4004c1c:	108005e0 	cmpeqi	r2,r2,23
 4004c20:	10803fcc 	andi	r2,r2,255
 4004c24:	10000726 	beq	r2,zero,4004c44 <_ZN14EthernetServer5writeEPKhj+0xe0>
				Ethernet.socketSend(i, buffer, size);
 4004c28:	e0fffa43 	ldbu	r3,-23(fp)
 4004c2c:	e0bfff17 	ldw	r2,-4(fp)
 4004c30:	10bfffcc 	andi	r2,r2,65535
 4004c34:	100d883a 	mov	r6,r2
 4004c38:	e17ffe17 	ldw	r5,-8(fp)
 4004c3c:	1809883a 	mov	r4,r3
 4004c40:	40065c00 	call	40065c0 <_ZN13EthernetClass10socketSendEhPKht>
	if (!chip) return 0;
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	available();
	for (uint8_t i=0; i < maxindex; i++) {
 4004c44:	e0bffa43 	ldbu	r2,-23(fp)
 4004c48:	10800044 	addi	r2,r2,1
 4004c4c:	e0bffa45 	stb	r2,-23(fp)
 4004c50:	003fe006 	br	4004bd4 <__alt_data_end+0xfc004bd4>
			if (Ethernet.socketStatus(i) == SnSR::ESTABLISHED) {
				Ethernet.socketSend(i, buffer, size);
			}
		}
	}
	return size;
 4004c54:	e0bfff17 	ldw	r2,-4(fp)
}
 4004c58:	e037883a 	mov	sp,fp
 4004c5c:	dfc00117 	ldw	ra,4(sp)
 4004c60:	df000017 	ldw	fp,0(sp)
 4004c64:	dec00204 	addi	sp,sp,8
 4004c68:	f800283a 	ret

04004c6c <_Z41__static_initialization_and_destruction_0ii>:
 4004c6c:	defffb04 	addi	sp,sp,-20
 4004c70:	dfc00415 	stw	ra,16(sp)
 4004c74:	df000315 	stw	fp,12(sp)
 4004c78:	df000304 	addi	fp,sp,12
 4004c7c:	e13ffe15 	stw	r4,-8(fp)
 4004c80:	e17fff15 	stw	r5,-4(fp)
 4004c84:	e0bffe17 	ldw	r2,-8(fp)
 4004c88:	10800058 	cmpnei	r2,r2,1
 4004c8c:	1000091e 	bne	r2,zero,4004cb4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4004c90:	e0ffff17 	ldw	r3,-4(fp)
 4004c94:	00bfffd4 	movui	r2,65535
 4004c98:	1880061e 	bne	r3,r2,4004cb4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4004c9c:	d8000015 	stw	zero,0(sp)
 4004ca0:	000f883a 	mov	r7,zero
 4004ca4:	000d883a 	mov	r6,zero
 4004ca8:	000b883a 	mov	r5,zero
 4004cac:	d13ca304 	addi	r4,gp,-3444
 4004cb0:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
 4004cb4:	0001883a 	nop
 4004cb8:	e037883a 	mov	sp,fp
 4004cbc:	dfc00117 	ldw	ra,4(sp)
 4004cc0:	df000017 	ldw	fp,0(sp)
 4004cc4:	dec00204 	addi	sp,sp,8
 4004cc8:	f800283a 	ret

04004ccc <_GLOBAL__sub_I__ZN14EthernetServer11server_portE>:
 4004ccc:	defffe04 	addi	sp,sp,-8
 4004cd0:	dfc00115 	stw	ra,4(sp)
 4004cd4:	df000015 	stw	fp,0(sp)
 4004cd8:	d839883a 	mov	fp,sp
 4004cdc:	017fffd4 	movui	r5,65535
 4004ce0:	01000044 	movi	r4,1
 4004ce4:	4004c6c0 	call	4004c6c <_Z41__static_initialization_and_destruction_0ii>
 4004ce8:	e037883a 	mov	sp,fp
 4004cec:	dfc00117 	ldw	ra,4(sp)
 4004cf0:	df000017 	ldw	fp,0(sp)
 4004cf4:	dec00204 	addi	sp,sp,8
 4004cf8:	f800283a 	ret

04004cfc <_ZN6ClientC1Ev>:
#ifndef client_h
#define client_h

#include "utility/IPAddress.h"

class Client {
 4004cfc:	defffe04 	addi	sp,sp,-8
 4004d00:	df000115 	stw	fp,4(sp)
 4004d04:	df000104 	addi	fp,sp,4
 4004d08:	e13fff15 	stw	r4,-4(fp)
 4004d0c:	008100b4 	movhi	r2,1026
 4004d10:	10a8ec04 	addi	r2,r2,-23632
 4004d14:	e0ffff17 	ldw	r3,-4(fp)
 4004d18:	18800015 	stw	r2,0(r3)
 4004d1c:	0001883a 	nop
 4004d20:	e037883a 	mov	sp,fp
 4004d24:	df000017 	ldw	fp,0(sp)
 4004d28:	dec00104 	addi	sp,sp,4
 4004d2c:	f800283a 	ret

04004d30 <_ZN14EthernetClientC1Eh>:


class EthernetClient : public Client {
public:
	EthernetClient() : _sockindex(MAX_SOCK_NUM), _timeout(1000) { }
	EthernetClient(uint8_t s) : _sockindex(s), _timeout(1000) { }
 4004d30:	defffc04 	addi	sp,sp,-16
 4004d34:	dfc00315 	stw	ra,12(sp)
 4004d38:	df000215 	stw	fp,8(sp)
 4004d3c:	df000204 	addi	fp,sp,8
 4004d40:	e13ffe15 	stw	r4,-8(fp)
 4004d44:	2805883a 	mov	r2,r5
 4004d48:	e0bfff05 	stb	r2,-4(fp)
 4004d4c:	e0bffe17 	ldw	r2,-8(fp)
 4004d50:	1009883a 	mov	r4,r2
 4004d54:	4004cfc0 	call	4004cfc <_ZN6ClientC1Ev>
 4004d58:	008100b4 	movhi	r2,1026
 4004d5c:	10a8c504 	addi	r2,r2,-23788
 4004d60:	e0fffe17 	ldw	r3,-8(fp)
 4004d64:	18800015 	stw	r2,0(r3)
 4004d68:	e0bffe17 	ldw	r2,-8(fp)
 4004d6c:	e0ffff03 	ldbu	r3,-4(fp)
 4004d70:	10c00105 	stb	r3,4(r2)
 4004d74:	e0bffe17 	ldw	r2,-8(fp)
 4004d78:	00c0fa04 	movi	r3,1000
 4004d7c:	10c0018d 	sth	r3,6(r2)
 4004d80:	0001883a 	nop
 4004d84:	e037883a 	mov	sp,fp
 4004d88:	dfc00117 	ldw	ra,4(sp)
 4004d8c:	df000017 	ldw	fp,0(sp)
 4004d90:	dec00204 	addi	sp,sp,8
 4004d94:	f800283a 	ret

04004d98 <_ZN11EthernetUDP5beginEt>:
#include "Ethernet.h"
#include "utility/w5100.h"

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port)
{
 4004d98:	defffc04 	addi	sp,sp,-16
 4004d9c:	dfc00315 	stw	ra,12(sp)
 4004da0:	df000215 	stw	fp,8(sp)
 4004da4:	df000204 	addi	fp,sp,8
 4004da8:	e13ffe15 	stw	r4,-8(fp)
 4004dac:	2805883a 	mov	r2,r5
 4004db0:	e0bfff0d 	sth	r2,-4(fp)
	if (sockindex < MAX_SOCK_NUM) Ethernet.socketClose(sockindex);
 4004db4:	e0bffe17 	ldw	r2,-8(fp)
 4004db8:	10800403 	ldbu	r2,16(r2)
 4004dbc:	10803fcc 	andi	r2,r2,255
 4004dc0:	10800228 	cmpgeui	r2,r2,8
 4004dc4:	1000051e 	bne	r2,zero,4004ddc <_ZN11EthernetUDP5beginEt+0x44>
 4004dc8:	e0bffe17 	ldw	r2,-8(fp)
 4004dcc:	10800403 	ldbu	r2,16(r2)
 4004dd0:	10803fcc 	andi	r2,r2,255
 4004dd4:	1009883a 	mov	r4,r2
 4004dd8:	4005cd00 	call	4005cd0 <_ZN13EthernetClass11socketCloseEh>
	sockindex = Ethernet.socketBegin(SnMR::UDP, port);
 4004ddc:	e0bfff0b 	ldhu	r2,-4(fp)
 4004de0:	100b883a 	mov	r5,r2
 4004de4:	01000084 	movi	r4,2
 4004de8:	40056780 	call	4005678 <_ZN13EthernetClass11socketBeginEht>
 4004dec:	1007883a 	mov	r3,r2
 4004df0:	e0bffe17 	ldw	r2,-8(fp)
 4004df4:	10c00405 	stb	r3,16(r2)
	if (sockindex >= MAX_SOCK_NUM) return 0;
 4004df8:	e0bffe17 	ldw	r2,-8(fp)
 4004dfc:	10800403 	ldbu	r2,16(r2)
 4004e00:	10803fcc 	andi	r2,r2,255
 4004e04:	10800230 	cmpltui	r2,r2,8
 4004e08:	1000021e 	bne	r2,zero,4004e14 <_ZN11EthernetUDP5beginEt+0x7c>
 4004e0c:	0005883a 	mov	r2,zero
 4004e10:	00000606 	br	4004e2c <_ZN11EthernetUDP5beginEt+0x94>
	_port = port;
 4004e14:	e0bffe17 	ldw	r2,-8(fp)
 4004e18:	e0ffff0b 	ldhu	r3,-4(fp)
 4004e1c:	10c0010d 	sth	r3,4(r2)
	_remaining = 0;
 4004e20:	e0bffe17 	ldw	r2,-8(fp)
 4004e24:	1000048d 	sth	zero,18(r2)
	return 1;
 4004e28:	00800044 	movi	r2,1
}
 4004e2c:	e037883a 	mov	sp,fp
 4004e30:	dfc00117 	ldw	ra,4(sp)
 4004e34:	df000017 	ldw	fp,0(sp)
 4004e38:	dec00204 	addi	sp,sp,8
 4004e3c:	f800283a 	ret

04004e40 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available()
{
 4004e40:	defffe04 	addi	sp,sp,-8
 4004e44:	df000115 	stw	fp,4(sp)
 4004e48:	df000104 	addi	fp,sp,4
 4004e4c:	e13fff15 	stw	r4,-4(fp)
	return _remaining;
 4004e50:	e0bfff17 	ldw	r2,-4(fp)
 4004e54:	1080048b 	ldhu	r2,18(r2)
 4004e58:	10bfffcc 	andi	r2,r2,65535
}
 4004e5c:	e037883a 	mov	sp,fp
 4004e60:	df000017 	ldw	fp,0(sp)
 4004e64:	dec00104 	addi	sp,sp,4
 4004e68:	f800283a 	ret

04004e6c <_ZN11EthernetUDP4stopEv>:

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
 4004e6c:	defffd04 	addi	sp,sp,-12
 4004e70:	dfc00215 	stw	ra,8(sp)
 4004e74:	df000115 	stw	fp,4(sp)
 4004e78:	df000104 	addi	fp,sp,4
 4004e7c:	e13fff15 	stw	r4,-4(fp)
	if (sockindex < MAX_SOCK_NUM) {
 4004e80:	e0bfff17 	ldw	r2,-4(fp)
 4004e84:	10800403 	ldbu	r2,16(r2)
 4004e88:	10803fcc 	andi	r2,r2,255
 4004e8c:	10800228 	cmpgeui	r2,r2,8
 4004e90:	1000081e 	bne	r2,zero,4004eb4 <_ZN11EthernetUDP4stopEv+0x48>
		Ethernet.socketClose(sockindex);
 4004e94:	e0bfff17 	ldw	r2,-4(fp)
 4004e98:	10800403 	ldbu	r2,16(r2)
 4004e9c:	10803fcc 	andi	r2,r2,255
 4004ea0:	1009883a 	mov	r4,r2
 4004ea4:	4005cd00 	call	4005cd0 <_ZN13EthernetClass11socketCloseEh>
		sockindex = MAX_SOCK_NUM;
 4004ea8:	e0bfff17 	ldw	r2,-4(fp)
 4004eac:	00c00204 	movi	r3,8
 4004eb0:	10c00405 	stb	r3,16(r2)
	}
}
 4004eb4:	0001883a 	nop
 4004eb8:	e037883a 	mov	sp,fp
 4004ebc:	dfc00117 	ldw	ra,4(sp)
 4004ec0:	df000017 	ldw	fp,0(sp)
 4004ec4:	dec00204 	addi	sp,sp,8
 4004ec8:	f800283a 	ret

04004ecc <_ZN11EthernetUDP11beginPacketEPKct>:

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
 4004ecc:	defff104 	addi	sp,sp,-60
 4004ed0:	dfc00e15 	stw	ra,56(sp)
 4004ed4:	df000d15 	stw	fp,52(sp)
 4004ed8:	df000d04 	addi	fp,sp,52
 4004edc:	e13ffd15 	stw	r4,-12(fp)
 4004ee0:	e17ffe15 	stw	r5,-8(fp)
 4004ee4:	3005883a 	mov	r2,r6
 4004ee8:	e0bfff0d 	sth	r2,-4(fp)
	// Look up the host first
	int ret = 0;
 4004eec:	e03ff315 	stw	zero,-52(fp)
	DNSClient dns;
 4004ef0:	e0bff504 	addi	r2,fp,-44
 4004ef4:	1009883a 	mov	r4,r2
 4004ef8:	400463c0 	call	400463c <_ZN9DNSClientC1Ev>
	IPAddress remote_addr;
 4004efc:	e0bffc04 	addi	r2,fp,-16
 4004f00:	1009883a 	mov	r4,r2
 4004f04:	400717c0 	call	400717c <_ZN9IPAddressC1Ev>

	dns.begin(Ethernet.dnsServerIP());
 4004f08:	40042e80 	call	40042e8 <_ZN13EthernetClass11dnsServerIPEv>
 4004f0c:	e0bff415 	stw	r2,-48(fp)
 4004f10:	e0fff404 	addi	r3,fp,-48
 4004f14:	e0bff504 	addi	r2,fp,-44
 4004f18:	180b883a 	mov	r5,r3
 4004f1c:	1009883a 	mov	r4,r2
 4004f20:	4001aa80 	call	4001aa8 <_ZN9DNSClient5beginERK9IPAddress>
	ret = dns.getHostByName(host, remote_addr);
 4004f24:	e0fffc04 	addi	r3,fp,-16
 4004f28:	e0bff504 	addi	r2,fp,-44
 4004f2c:	01c4e204 	movi	r7,5000
 4004f30:	180d883a 	mov	r6,r3
 4004f34:	e17ffe17 	ldw	r5,-8(fp)
 4004f38:	1009883a 	mov	r4,r2
 4004f3c:	4001c180 	call	4001c18 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>
 4004f40:	e0bff315 	stw	r2,-52(fp)
	if (ret != 1) return ret;
 4004f44:	e0bff317 	ldw	r2,-52(fp)
 4004f48:	10800060 	cmpeqi	r2,r2,1
 4004f4c:	1000021e 	bne	r2,zero,4004f58 <_ZN11EthernetUDP11beginPacketEPKct+0x8c>
 4004f50:	e0bff317 	ldw	r2,-52(fp)
 4004f54:	00000906 	br	4004f7c <_ZN11EthernetUDP11beginPacketEPKct+0xb0>
	return beginPacket(remote_addr, port);
 4004f58:	e0bffd17 	ldw	r2,-12(fp)
 4004f5c:	10800017 	ldw	r2,0(r2)
 4004f60:	10800304 	addi	r2,r2,12
 4004f64:	10800017 	ldw	r2,0(r2)
 4004f68:	e0ffff0b 	ldhu	r3,-4(fp)
 4004f6c:	180d883a 	mov	r6,r3
 4004f70:	e17ffc17 	ldw	r5,-16(fp)
 4004f74:	e13ffd17 	ldw	r4,-12(fp)
 4004f78:	103ee83a 	callr	r2
}
 4004f7c:	e037883a 	mov	sp,fp
 4004f80:	dfc00117 	ldw	ra,4(sp)
 4004f84:	df000017 	ldw	fp,0(sp)
 4004f88:	dec00204 	addi	sp,sp,8
 4004f8c:	f800283a 	ret

04004f90 <_ZN11EthernetUDP11beginPacketE9IPAddresst>:

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
 4004f90:	defffa04 	addi	sp,sp,-24
 4004f94:	dfc00515 	stw	ra,20(sp)
 4004f98:	df000415 	stw	fp,16(sp)
 4004f9c:	dc000315 	stw	r16,12(sp)
 4004fa0:	df000404 	addi	fp,sp,16
 4004fa4:	e13ffc15 	stw	r4,-16(fp)
 4004fa8:	e17ffd15 	stw	r5,-12(fp)
 4004fac:	3005883a 	mov	r2,r6
 4004fb0:	e0bffe0d 	sth	r2,-8(fp)
	_offset = 0;
 4004fb4:	e0bffc17 	ldw	r2,-16(fp)
 4004fb8:	1000038d 	sth	zero,14(r2)
	//Serial.printf("UDP beginPacket\n");
	return Ethernet.socketStartUDP(sockindex, rawIPAddress(ip), port);
 4004fbc:	e0bffc17 	ldw	r2,-16(fp)
 4004fc0:	10800403 	ldbu	r2,16(r2)
 4004fc4:	14003fcc 	andi	r16,r2,255
 4004fc8:	e0bffc17 	ldw	r2,-16(fp)
 4004fcc:	e0fffd04 	addi	r3,fp,-12
 4004fd0:	180b883a 	mov	r5,r3
 4004fd4:	1009883a 	mov	r4,r2
 4004fd8:	40055880 	call	4005588 <_ZN3UDP12rawIPAddressER9IPAddress>
 4004fdc:	1007883a 	mov	r3,r2
 4004fe0:	e0bffe0b 	ldhu	r2,-8(fp)
 4004fe4:	100d883a 	mov	r6,r2
 4004fe8:	180b883a 	mov	r5,r3
 4004fec:	8009883a 	mov	r4,r16
 4004ff0:	40068480 	call	4006848 <_ZN13EthernetClass14socketStartUDPEhPht>
 4004ff4:	10803fcc 	andi	r2,r2,255
}
 4004ff8:	e6ffff04 	addi	sp,fp,-4
 4004ffc:	dfc00217 	ldw	ra,8(sp)
 4005000:	df000117 	ldw	fp,4(sp)
 4005004:	dc000017 	ldw	r16,0(sp)
 4005008:	dec00304 	addi	sp,sp,12
 400500c:	f800283a 	ret

04005010 <_ZN11EthernetUDP9endPacketEv>:

int EthernetUDP::endPacket()
{
 4005010:	defffd04 	addi	sp,sp,-12
 4005014:	dfc00215 	stw	ra,8(sp)
 4005018:	df000115 	stw	fp,4(sp)
 400501c:	df000104 	addi	fp,sp,4
 4005020:	e13fff15 	stw	r4,-4(fp)
	return Ethernet.socketSendUDP(sockindex);
 4005024:	e0bfff17 	ldw	r2,-4(fp)
 4005028:	10800403 	ldbu	r2,16(r2)
 400502c:	10803fcc 	andi	r2,r2,255
 4005030:	1009883a 	mov	r4,r2
 4005034:	40069100 	call	4006910 <_ZN13EthernetClass13socketSendUDPEh>
 4005038:	10803fcc 	andi	r2,r2,255
}
 400503c:	e037883a 	mov	sp,fp
 4005040:	dfc00117 	ldw	ra,4(sp)
 4005044:	df000017 	ldw	fp,0(sp)
 4005048:	dec00204 	addi	sp,sp,8
 400504c:	f800283a 	ret

04005050 <_ZN11EthernetUDP5writeEh>:

size_t EthernetUDP::write(uint8_t byte)
{
 4005050:	defffd04 	addi	sp,sp,-12
 4005054:	df000215 	stw	fp,8(sp)
 4005058:	df000204 	addi	fp,sp,8
 400505c:	e13ffe15 	stw	r4,-8(fp)
 4005060:	2805883a 	mov	r2,r5
 4005064:	e0bfff05 	stb	r2,-4(fp)
	// TODO fix
	//return write(&byte, 1);
}
 4005068:	0001883a 	nop
 400506c:	e037883a 	mov	sp,fp
 4005070:	df000017 	ldw	fp,0(sp)
 4005074:	dec00104 	addi	sp,sp,4
 4005078:	f800283a 	ret

0400507c <_ZN11EthernetUDP5writeEPKhj>:

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
 400507c:	defffa04 	addi	sp,sp,-24
 4005080:	dfc00515 	stw	ra,20(sp)
 4005084:	df000415 	stw	fp,16(sp)
 4005088:	df000404 	addi	fp,sp,16
 400508c:	e13ffd15 	stw	r4,-12(fp)
 4005090:	e17ffe15 	stw	r5,-8(fp)
 4005094:	e1bfff15 	stw	r6,-4(fp)
	//Serial.printf("UDP write %d\n", size);
	uint16_t bytes_written = Ethernet.socketBufferData(sockindex, _offset, buffer, size);
 4005098:	e0bffd17 	ldw	r2,-12(fp)
 400509c:	10800403 	ldbu	r2,16(r2)
 40050a0:	10c03fcc 	andi	r3,r2,255
 40050a4:	e0bffd17 	ldw	r2,-12(fp)
 40050a8:	1080038b 	ldhu	r2,14(r2)
 40050ac:	113fffcc 	andi	r4,r2,65535
 40050b0:	e0bfff17 	ldw	r2,-4(fp)
 40050b4:	10bfffcc 	andi	r2,r2,65535
 40050b8:	100f883a 	mov	r7,r2
 40050bc:	e1bffe17 	ldw	r6,-8(fp)
 40050c0:	200b883a 	mov	r5,r4
 40050c4:	1809883a 	mov	r4,r3
 40050c8:	40067a80 	call	40067a8 <_ZN13EthernetClass16socketBufferDataEhtPKht>
 40050cc:	e0bffc0d 	sth	r2,-16(fp)
	_offset += bytes_written;
 40050d0:	e0bffd17 	ldw	r2,-12(fp)
 40050d4:	10c0038b 	ldhu	r3,14(r2)
 40050d8:	e0bffc0b 	ldhu	r2,-16(fp)
 40050dc:	1885883a 	add	r2,r3,r2
 40050e0:	1007883a 	mov	r3,r2
 40050e4:	e0bffd17 	ldw	r2,-12(fp)
 40050e8:	10c0038d 	sth	r3,14(r2)
	return bytes_written;
 40050ec:	e0bffc0b 	ldhu	r2,-16(fp)
}
 40050f0:	e037883a 	mov	sp,fp
 40050f4:	dfc00117 	ldw	ra,4(sp)
 40050f8:	df000017 	ldw	fp,0(sp)
 40050fc:	dec00204 	addi	sp,sp,8
 4005100:	f800283a 	ret

04005104 <_ZN11EthernetUDP11parsePacketEv>:

int EthernetUDP::parsePacket()
{
 4005104:	defffa04 	addi	sp,sp,-24
 4005108:	dfc00515 	stw	ra,20(sp)
 400510c:	df000415 	stw	fp,16(sp)
 4005110:	df000404 	addi	fp,sp,16
 4005114:	e13fff15 	stw	r4,-4(fp)
	// discard any remaining bytes in the last packet
	while (_remaining) {
 4005118:	e0bfff17 	ldw	r2,-4(fp)
 400511c:	1080048b 	ldhu	r2,18(r2)
 4005120:	10bfffcc 	andi	r2,r2,65535
 4005124:	10000126 	beq	r2,zero,400512c <_ZN11EthernetUDP11parsePacketEv+0x28>
 4005128:	003ffb06 	br	4005118 <__alt_data_end+0xfc005118>

		// TODO fix
		//read((uint8_t *)NULL, _remaining);
	}

	if (Ethernet.socketRecvAvailable(sockindex) > 0) {
 400512c:	e0bfff17 	ldw	r2,-4(fp)
 4005130:	10800403 	ldbu	r2,16(r2)
 4005134:	10803fcc 	andi	r2,r2,255
 4005138:	1009883a 	mov	r4,r2
 400513c:	400628c0 	call	400628c <_ZN13EthernetClass19socketRecvAvailableEh>
 4005140:	10bfffcc 	andi	r2,r2,65535
 4005144:	1004c03a 	cmpne	r2,r2,zero
 4005148:	10803fcc 	andi	r2,r2,255
 400514c:	10003426 	beq	r2,zero,4005220 <_ZN11EthernetUDP11parsePacketEv+0x11c>
		//HACK - hand-parse the UDP packet using TCP recv method
		uint8_t tmpBuf[8];
		int ret=0;
 4005150:	e03ffc15 	stw	zero,-16(fp)
		//read 8 header bytes and get IP and port from it
		ret = Ethernet.socketRecv(sockindex, tmpBuf, 8);
 4005154:	e0bfff17 	ldw	r2,-4(fp)
 4005158:	10800403 	ldbu	r2,16(r2)
 400515c:	10803fcc 	andi	r2,r2,255
 4005160:	e0fffd04 	addi	r3,fp,-12
 4005164:	01800204 	movi	r6,8
 4005168:	180b883a 	mov	r5,r3
 400516c:	1009883a 	mov	r4,r2
 4005170:	4005fe00 	call	4005fe0 <_ZN13EthernetClass10socketRecvEhPhs>
 4005174:	e0bffc15 	stw	r2,-16(fp)
		if (ret > 0) {
 4005178:	e0bffc17 	ldw	r2,-16(fp)
 400517c:	0080260e 	bge	zero,r2,4005218 <_ZN11EthernetUDP11parsePacketEv+0x114>
			_remoteIP = tmpBuf;
 4005180:	e0bfff17 	ldw	r2,-4(fp)
 4005184:	10800204 	addi	r2,r2,8
 4005188:	e0fffd04 	addi	r3,fp,-12
 400518c:	180b883a 	mov	r5,r3
 4005190:	1009883a 	mov	r4,r2
 4005194:	40073b00 	call	40073b0 <_ZN9IPAddressaSEPKh>
			_remotePort = tmpBuf[4];
 4005198:	e0bffe03 	ldbu	r2,-8(fp)
 400519c:	10c03fcc 	andi	r3,r2,255
 40051a0:	e0bfff17 	ldw	r2,-4(fp)
 40051a4:	10c0030d 	sth	r3,12(r2)
			_remotePort = (_remotePort << 8) + tmpBuf[5];
 40051a8:	e0bfff17 	ldw	r2,-4(fp)
 40051ac:	1080030b 	ldhu	r2,12(r2)
 40051b0:	1004923a 	slli	r2,r2,8
 40051b4:	1007883a 	mov	r3,r2
 40051b8:	e0bffe43 	ldbu	r2,-7(fp)
 40051bc:	10803fcc 	andi	r2,r2,255
 40051c0:	1885883a 	add	r2,r3,r2
 40051c4:	1007883a 	mov	r3,r2
 40051c8:	e0bfff17 	ldw	r2,-4(fp)
 40051cc:	10c0030d 	sth	r3,12(r2)
			_remaining = tmpBuf[6];
 40051d0:	e0bffe83 	ldbu	r2,-6(fp)
 40051d4:	10c03fcc 	andi	r3,r2,255
 40051d8:	e0bfff17 	ldw	r2,-4(fp)
 40051dc:	10c0048d 	sth	r3,18(r2)
			_remaining = (_remaining << 8) + tmpBuf[7];
 40051e0:	e0bfff17 	ldw	r2,-4(fp)
 40051e4:	1080048b 	ldhu	r2,18(r2)
 40051e8:	1004923a 	slli	r2,r2,8
 40051ec:	1007883a 	mov	r3,r2
 40051f0:	e0bffec3 	ldbu	r2,-5(fp)
 40051f4:	10803fcc 	andi	r2,r2,255
 40051f8:	1885883a 	add	r2,r3,r2
 40051fc:	1007883a 	mov	r3,r2
 4005200:	e0bfff17 	ldw	r2,-4(fp)
 4005204:	10c0048d 	sth	r3,18(r2)

			// When we get here, any remaining bytes are the data
			ret = _remaining;
 4005208:	e0bfff17 	ldw	r2,-4(fp)
 400520c:	1080048b 	ldhu	r2,18(r2)
 4005210:	10bfffcc 	andi	r2,r2,65535
 4005214:	e0bffc15 	stw	r2,-16(fp)
		}
		return ret;
 4005218:	e0bffc17 	ldw	r2,-16(fp)
 400521c:	00000106 	br	4005224 <_ZN11EthernetUDP11parsePacketEv+0x120>
	}
	// There aren't any packets available
	return 0;
 4005220:	0005883a 	mov	r2,zero
}
 4005224:	e037883a 	mov	sp,fp
 4005228:	dfc00117 	ldw	ra,4(sp)
 400522c:	df000017 	ldw	fp,0(sp)
 4005230:	dec00204 	addi	sp,sp,8
 4005234:	f800283a 	ret

04005238 <_ZN11EthernetUDP4readEv>:

int EthernetUDP::read()
{
 4005238:	defffc04 	addi	sp,sp,-16
 400523c:	dfc00315 	stw	ra,12(sp)
 4005240:	df000215 	stw	fp,8(sp)
 4005244:	df000204 	addi	fp,sp,8
 4005248:	e13fff15 	stw	r4,-4(fp)
	uint8_t byte;

	if ((_remaining > 0) && (Ethernet.socketRecv(sockindex, &byte, 1) > 0)) {
 400524c:	e0bfff17 	ldw	r2,-4(fp)
 4005250:	1080048b 	ldhu	r2,18(r2)
 4005254:	10bfffcc 	andi	r2,r2,65535
 4005258:	10000a26 	beq	r2,zero,4005284 <_ZN11EthernetUDP4readEv+0x4c>
 400525c:	e0bfff17 	ldw	r2,-4(fp)
 4005260:	10800403 	ldbu	r2,16(r2)
 4005264:	10803fcc 	andi	r2,r2,255
 4005268:	01800044 	movi	r6,1
 400526c:	e17ffe04 	addi	r5,fp,-8
 4005270:	1009883a 	mov	r4,r2
 4005274:	4005fe00 	call	4005fe0 <_ZN13EthernetClass10socketRecvEhPhs>
 4005278:	0080020e 	bge	zero,r2,4005284 <_ZN11EthernetUDP4readEv+0x4c>
 400527c:	00800044 	movi	r2,1
 4005280:	00000106 	br	4005288 <_ZN11EthernetUDP4readEv+0x50>
 4005284:	0005883a 	mov	r2,zero
 4005288:	10803fcc 	andi	r2,r2,255
 400528c:	10000926 	beq	r2,zero,40052b4 <_ZN11EthernetUDP4readEv+0x7c>
		// We read things without any problems
		_remaining--;
 4005290:	e0bfff17 	ldw	r2,-4(fp)
 4005294:	1080048b 	ldhu	r2,18(r2)
 4005298:	10bfffc4 	addi	r2,r2,-1
 400529c:	1007883a 	mov	r3,r2
 40052a0:	e0bfff17 	ldw	r2,-4(fp)
 40052a4:	10c0048d 	sth	r3,18(r2)
		return byte;
 40052a8:	e0bffe03 	ldbu	r2,-8(fp)
 40052ac:	10803fcc 	andi	r2,r2,255
 40052b0:	00000106 	br	40052b8 <_ZN11EthernetUDP4readEv+0x80>
	}

	// If we get here, there's no data available
	return -1;
 40052b4:	00bfffc4 	movi	r2,-1
}
 40052b8:	e037883a 	mov	sp,fp
 40052bc:	dfc00117 	ldw	ra,4(sp)
 40052c0:	df000017 	ldw	fp,0(sp)
 40052c4:	dec00204 	addi	sp,sp,8
 40052c8:	f800283a 	ret

040052cc <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char *buffer, size_t len)
{
 40052cc:	defffa04 	addi	sp,sp,-24
 40052d0:	dfc00515 	stw	ra,20(sp)
 40052d4:	df000415 	stw	fp,16(sp)
 40052d8:	df000404 	addi	fp,sp,16
 40052dc:	e13ffd15 	stw	r4,-12(fp)
 40052e0:	e17ffe15 	stw	r5,-8(fp)
 40052e4:	e1bfff15 	stw	r6,-4(fp)
	if (_remaining > 0) {
 40052e8:	e0bffd17 	ldw	r2,-12(fp)
 40052ec:	1080048b 	ldhu	r2,18(r2)
 40052f0:	10bfffcc 	andi	r2,r2,65535
 40052f4:	10002a26 	beq	r2,zero,40053a0 <_ZN11EthernetUDP4readEPhj+0xd4>
		int got;
		if (_remaining <= len) {
 40052f8:	e0bffd17 	ldw	r2,-12(fp)
 40052fc:	1080048b 	ldhu	r2,18(r2)
 4005300:	10bfffcc 	andi	r2,r2,65535
 4005304:	e0ffff17 	ldw	r3,-4(fp)
 4005308:	18800e36 	bltu	r3,r2,4005344 <_ZN11EthernetUDP4readEPhj+0x78>
			// data should fit in the buffer
			got = Ethernet.socketRecv(sockindex, buffer, _remaining);
 400530c:	e0bffd17 	ldw	r2,-12(fp)
 4005310:	10800403 	ldbu	r2,16(r2)
 4005314:	10c03fcc 	andi	r3,r2,255
 4005318:	e0bffd17 	ldw	r2,-12(fp)
 400531c:	1080048b 	ldhu	r2,18(r2)
 4005320:	10bfffcc 	andi	r2,r2,65535
 4005324:	10a0001c 	xori	r2,r2,32768
 4005328:	10a00004 	addi	r2,r2,-32768
 400532c:	100d883a 	mov	r6,r2
 4005330:	e17ffe17 	ldw	r5,-8(fp)
 4005334:	1809883a 	mov	r4,r3
 4005338:	4005fe00 	call	4005fe0 <_ZN13EthernetClass10socketRecvEhPhs>
 400533c:	e0bffc15 	stw	r2,-16(fp)
 4005340:	00000c06 	br	4005374 <_ZN11EthernetUDP4readEPhj+0xa8>
		} else {
			// too much data for the buffer,
			// grab as much as will fit
			got = Ethernet.socketRecv(sockindex, buffer, len);
 4005344:	e0bffd17 	ldw	r2,-12(fp)
 4005348:	10800403 	ldbu	r2,16(r2)
 400534c:	10803fcc 	andi	r2,r2,255
 4005350:	e0ffff17 	ldw	r3,-4(fp)
 4005354:	18ffffcc 	andi	r3,r3,65535
 4005358:	18e0001c 	xori	r3,r3,32768
 400535c:	18e00004 	addi	r3,r3,-32768
 4005360:	180d883a 	mov	r6,r3
 4005364:	e17ffe17 	ldw	r5,-8(fp)
 4005368:	1009883a 	mov	r4,r2
 400536c:	4005fe00 	call	4005fe0 <_ZN13EthernetClass10socketRecvEhPhs>
 4005370:	e0bffc15 	stw	r2,-16(fp)
		}
		if (got > 0) {
 4005374:	e0bffc17 	ldw	r2,-16(fp)
 4005378:	0080090e 	bge	zero,r2,40053a0 <_ZN11EthernetUDP4readEPhj+0xd4>
			_remaining -= got;
 400537c:	e0bffd17 	ldw	r2,-12(fp)
 4005380:	1080048b 	ldhu	r2,18(r2)
 4005384:	e0fffc17 	ldw	r3,-16(fp)
 4005388:	10c5c83a 	sub	r2,r2,r3
 400538c:	1007883a 	mov	r3,r2
 4005390:	e0bffd17 	ldw	r2,-12(fp)
 4005394:	10c0048d 	sth	r3,18(r2)
			//Serial.printf("UDP read %d\n", got);
			return got;
 4005398:	e0bffc17 	ldw	r2,-16(fp)
 400539c:	00000106 	br	40053a4 <_ZN11EthernetUDP4readEPhj+0xd8>
		}
	}
	// If we get here, there's no data available or recv failed
	return -1;
 40053a0:	00bfffc4 	movi	r2,-1
}
 40053a4:	e037883a 	mov	sp,fp
 40053a8:	dfc00117 	ldw	ra,4(sp)
 40053ac:	df000017 	ldw	fp,0(sp)
 40053b0:	dec00204 	addi	sp,sp,8
 40053b4:	f800283a 	ret

040053b8 <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
 40053b8:	defffd04 	addi	sp,sp,-12
 40053bc:	dfc00215 	stw	ra,8(sp)
 40053c0:	df000115 	stw	fp,4(sp)
 40053c4:	df000104 	addi	fp,sp,4
 40053c8:	e13fff15 	stw	r4,-4(fp)
	// Unlike recv, peek doesn't check to see if there's any data available, so we must.
	// If the user hasn't called parsePacket yet then return nothing otherwise they
	// may get the UDP header
	if (sockindex >= MAX_SOCK_NUM || _remaining == 0) return -1;
 40053cc:	e0bfff17 	ldw	r2,-4(fp)
 40053d0:	10800403 	ldbu	r2,16(r2)
 40053d4:	10803fcc 	andi	r2,r2,255
 40053d8:	10800228 	cmpgeui	r2,r2,8
 40053dc:	1000041e 	bne	r2,zero,40053f0 <_ZN11EthernetUDP4peekEv+0x38>
 40053e0:	e0bfff17 	ldw	r2,-4(fp)
 40053e4:	1080048b 	ldhu	r2,18(r2)
 40053e8:	10bfffcc 	andi	r2,r2,65535
 40053ec:	1000021e 	bne	r2,zero,40053f8 <_ZN11EthernetUDP4peekEv+0x40>
 40053f0:	00bfffc4 	movi	r2,-1
 40053f4:	00000606 	br	4005410 <_ZN11EthernetUDP4peekEv+0x58>
	return Ethernet.socketPeek(sockindex);
 40053f8:	e0bfff17 	ldw	r2,-4(fp)
 40053fc:	10800403 	ldbu	r2,16(r2)
 4005400:	10803fcc 	andi	r2,r2,255
 4005404:	1009883a 	mov	r4,r2
 4005408:	40063440 	call	4006344 <_ZN13EthernetClass10socketPeekEh>
 400540c:	10803fcc 	andi	r2,r2,255
}
 4005410:	e037883a 	mov	sp,fp
 4005414:	dfc00117 	ldw	ra,4(sp)
 4005418:	df000017 	ldw	fp,0(sp)
 400541c:	dec00204 	addi	sp,sp,8
 4005420:	f800283a 	ret

04005424 <_ZN11EthernetUDP5flushEv>:

void EthernetUDP::flush()
{
 4005424:	defffe04 	addi	sp,sp,-8
 4005428:	df000115 	stw	fp,4(sp)
 400542c:	df000104 	addi	fp,sp,4
 4005430:	e13fff15 	stw	r4,-4(fp)
	// TODO: we should wait for TX buffer to be emptied
}
 4005434:	0001883a 	nop
 4005438:	e037883a 	mov	sp,fp
 400543c:	df000017 	ldw	fp,0(sp)
 4005440:	dec00104 	addi	sp,sp,4
 4005444:	f800283a 	ret

04005448 <_ZN11EthernetUDP14beginMulticastE9IPAddresst>:

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::beginMulticast(IPAddress ip, uint16_t port)
{
 4005448:	defffb04 	addi	sp,sp,-20
 400544c:	dfc00415 	stw	ra,16(sp)
 4005450:	df000315 	stw	fp,12(sp)
 4005454:	df000304 	addi	fp,sp,12
 4005458:	e13ffd15 	stw	r4,-12(fp)
 400545c:	e17ffe15 	stw	r5,-8(fp)
 4005460:	3005883a 	mov	r2,r6
 4005464:	e0bfff0d 	sth	r2,-4(fp)
	if (sockindex < MAX_SOCK_NUM) Ethernet.socketClose(sockindex);
 4005468:	e0bffd17 	ldw	r2,-12(fp)
 400546c:	10800403 	ldbu	r2,16(r2)
 4005470:	10803fcc 	andi	r2,r2,255
 4005474:	10800228 	cmpgeui	r2,r2,8
 4005478:	1000051e 	bne	r2,zero,4005490 <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x48>
 400547c:	e0bffd17 	ldw	r2,-12(fp)
 4005480:	10800403 	ldbu	r2,16(r2)
 4005484:	10803fcc 	andi	r2,r2,255
 4005488:	1009883a 	mov	r4,r2
 400548c:	4005cd00 	call	4005cd0 <_ZN13EthernetClass11socketCloseEh>
	sockindex = Ethernet.socketBeginMulticast(SnMR::UDP | SnMR::MULTI, ip, port);
 4005490:	e0bfff0b 	ldhu	r2,-4(fp)
 4005494:	100d883a 	mov	r6,r2
 4005498:	e17ffe17 	ldw	r5,-8(fp)
 400549c:	01002084 	movi	r4,130
 40054a0:	40059240 	call	4005924 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst>
 40054a4:	1007883a 	mov	r3,r2
 40054a8:	e0bffd17 	ldw	r2,-12(fp)
 40054ac:	10c00405 	stb	r3,16(r2)
	if (sockindex >= MAX_SOCK_NUM) return 0;
 40054b0:	e0bffd17 	ldw	r2,-12(fp)
 40054b4:	10800403 	ldbu	r2,16(r2)
 40054b8:	10803fcc 	andi	r2,r2,255
 40054bc:	10800230 	cmpltui	r2,r2,8
 40054c0:	1000021e 	bne	r2,zero,40054cc <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x84>
 40054c4:	0005883a 	mov	r2,zero
 40054c8:	00000606 	br	40054e4 <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x9c>
	_port = port;
 40054cc:	e0bffd17 	ldw	r2,-12(fp)
 40054d0:	e0ffff0b 	ldhu	r3,-4(fp)
 40054d4:	10c0010d 	sth	r3,4(r2)
	_remaining = 0;
 40054d8:	e0bffd17 	ldw	r2,-12(fp)
 40054dc:	1000048d 	sth	zero,18(r2)
	return 1;
 40054e0:	00800044 	movi	r2,1
}
 40054e4:	e037883a 	mov	sp,fp
 40054e8:	dfc00117 	ldw	ra,4(sp)
 40054ec:	df000017 	ldw	fp,0(sp)
 40054f0:	dec00204 	addi	sp,sp,8
 40054f4:	f800283a 	ret

040054f8 <_Z41__static_initialization_and_destruction_0ii>:
 40054f8:	defffb04 	addi	sp,sp,-20
 40054fc:	dfc00415 	stw	ra,16(sp)
 4005500:	df000315 	stw	fp,12(sp)
 4005504:	df000304 	addi	fp,sp,12
 4005508:	e13ffe15 	stw	r4,-8(fp)
 400550c:	e17fff15 	stw	r5,-4(fp)
 4005510:	e0bffe17 	ldw	r2,-8(fp)
 4005514:	10800058 	cmpnei	r2,r2,1
 4005518:	1000091e 	bne	r2,zero,4005540 <_Z41__static_initialization_and_destruction_0ii+0x48>
 400551c:	e0ffff17 	ldw	r3,-4(fp)
 4005520:	00bfffd4 	movui	r2,65535
 4005524:	1880061e 	bne	r3,r2,4005540 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4005528:	d8000015 	stw	zero,0(sp)
 400552c:	000f883a 	mov	r7,zero
 4005530:	000d883a 	mov	r6,zero
 4005534:	000b883a 	mov	r5,zero
 4005538:	d13ca404 	addi	r4,gp,-3440
 400553c:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
 4005540:	0001883a 	nop
 4005544:	e037883a 	mov	sp,fp
 4005548:	dfc00117 	ldw	ra,4(sp)
 400554c:	df000017 	ldw	fp,0(sp)
 4005550:	dec00204 	addi	sp,sp,8
 4005554:	f800283a 	ret

04005558 <_GLOBAL__sub_I__ZN11EthernetUDP5beginEt>:
 4005558:	defffe04 	addi	sp,sp,-8
 400555c:	dfc00115 	stw	ra,4(sp)
 4005560:	df000015 	stw	fp,0(sp)
 4005564:	d839883a 	mov	fp,sp
 4005568:	017fffd4 	movui	r5,65535
 400556c:	01000044 	movi	r4,1
 4005570:	40054f80 	call	40054f8 <_Z41__static_initialization_and_destruction_0ii>
 4005574:	e037883a 	mov	sp,fp
 4005578:	dfc00117 	ldw	ra,4(sp)
 400557c:	df000017 	ldw	fp,0(sp)
 4005580:	dec00204 	addi	sp,sp,8
 4005584:	f800283a 	ret

04005588 <_ZN3UDP12rawIPAddressER9IPAddress>:
  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() =0;
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() =0;
protected:
  uint8_t* rawIPAddress(IPAddress& addr) { return addr.raw_address(); };
 4005588:	defffc04 	addi	sp,sp,-16
 400558c:	dfc00315 	stw	ra,12(sp)
 4005590:	df000215 	stw	fp,8(sp)
 4005594:	df000204 	addi	fp,sp,8
 4005598:	e13ffe15 	stw	r4,-8(fp)
 400559c:	e17fff15 	stw	r5,-4(fp)
 40055a0:	e13fff17 	ldw	r4,-4(fp)
 40055a4:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 40055a8:	e037883a 	mov	sp,fp
 40055ac:	dfc00117 	ldw	ra,4(sp)
 40055b0:	df000017 	ldw	fp,0(sp)
 40055b4:	dec00204 	addi	sp,sp,8
 40055b8:	f800283a 	ret

040055bc <_ZN11EthernetUDP4readEPcj>:
	// Read up to len bytes from the current packet and place them into buffer
	// Returns the number of bytes read, or 0 if none are available
	virtual int read(unsigned char* buffer, size_t len);
	// Read up to len characters from the current packet and place them into buffer
	// Returns the number of characters read, or 0 if none are available
	virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 40055bc:	defffb04 	addi	sp,sp,-20
 40055c0:	dfc00415 	stw	ra,16(sp)
 40055c4:	df000315 	stw	fp,12(sp)
 40055c8:	df000304 	addi	fp,sp,12
 40055cc:	e13ffd15 	stw	r4,-12(fp)
 40055d0:	e17ffe15 	stw	r5,-8(fp)
 40055d4:	e1bfff15 	stw	r6,-4(fp)
 40055d8:	e0bffd17 	ldw	r2,-12(fp)
 40055dc:	10800017 	ldw	r2,0(r2)
 40055e0:	10800b04 	addi	r2,r2,44
 40055e4:	10800017 	ldw	r2,0(r2)
 40055e8:	e1bfff17 	ldw	r6,-4(fp)
 40055ec:	e17ffe17 	ldw	r5,-8(fp)
 40055f0:	e13ffd17 	ldw	r4,-12(fp)
 40055f4:	103ee83a 	callr	r2
 40055f8:	e037883a 	mov	sp,fp
 40055fc:	dfc00117 	ldw	ra,4(sp)
 4005600:	df000017 	ldw	fp,0(sp)
 4005604:	dec00204 	addi	sp,sp,8
 4005608:	f800283a 	ret

0400560c <_ZN11EthernetUDP9localPortEv>:

	// Return the IP address of the host who sent the current incoming packet
	virtual IPAddress remoteIP() { return _remoteIP; };
	// Return the port of the host who sent the current incoming packet
	virtual uint16_t remotePort() { return _remotePort; };
	virtual uint16_t localPort() { return _port; }
 400560c:	defffe04 	addi	sp,sp,-8
 4005610:	df000115 	stw	fp,4(sp)
 4005614:	df000104 	addi	fp,sp,4
 4005618:	e13fff15 	stw	r4,-4(fp)
 400561c:	e0bfff17 	ldw	r2,-4(fp)
 4005620:	1080010b 	ldhu	r2,4(r2)
 4005624:	e037883a 	mov	sp,fp
 4005628:	df000017 	ldw	fp,0(sp)
 400562c:	dec00104 	addi	sp,sp,4
 4005630:	f800283a 	ret

04005634 <_ZN13EthernetClass14socketPortRandEt>:
/*          Socket management            */
/*****************************************/


void EthernetClass::socketPortRand(uint16_t n)
{
 4005634:	defffe04 	addi	sp,sp,-8
 4005638:	df000115 	stw	fp,4(sp)
 400563c:	df000104 	addi	fp,sp,4
 4005640:	2005883a 	mov	r2,r4
 4005644:	e0bfff0d 	sth	r2,-4(fp)
	n &= 0x3FFF;
 4005648:	e0bfff0b 	ldhu	r2,-4(fp)
 400564c:	108fffcc 	andi	r2,r2,16383
 4005650:	e0bfff0d 	sth	r2,-4(fp)
	local_port ^= n;
 4005654:	d0e00c0b 	ldhu	r3,-32720(gp)
 4005658:	e0bfff0b 	ldhu	r2,-4(fp)
 400565c:	1884f03a 	xor	r2,r3,r2
 4005660:	d0a00c0d 	sth	r2,-32720(gp)
	//Serial.printf("socketPortRand %d, srcport=%d\n", n, local_port);
}
 4005664:	0001883a 	nop
 4005668:	e037883a 	mov	sp,fp
 400566c:	df000017 	ldw	fp,0(sp)
 4005670:	dec00104 	addi	sp,sp,4
 4005674:	f800283a 	ret

04005678 <_ZN13EthernetClass11socketBeginEht>:

uint8_t EthernetClass::socketBegin(uint8_t protocol, uint16_t port)
{
 4005678:	defff804 	addi	sp,sp,-32
 400567c:	dfc00715 	stw	ra,28(sp)
 4005680:	df000615 	stw	fp,24(sp)
 4005684:	dc000515 	stw	r16,20(sp)
 4005688:	df000604 	addi	fp,sp,24
 400568c:	2007883a 	mov	r3,r4
 4005690:	2805883a 	mov	r2,r5
 4005694:	e0fffd05 	stb	r3,-12(fp)
 4005698:	e0bffe0d 	sth	r2,-8(fp)
	uint8_t s, status[MAX_SOCK_NUM], chip, maxindex=MAX_SOCK_NUM;
 400569c:	00800204 	movi	r2,8
 40056a0:	e0bffa45 	stb	r2,-23(fp)

	// first check hardware compatibility
	chip = W5100.getChip();
 40056a4:	40035fc0 	call	40035fc <_ZN10W5100Class7getChipEv>
 40056a8:	e0bffa85 	stb	r2,-22(fp)
	if (!chip) return MAX_SOCK_NUM; // immediate error if no hardware detected
 40056ac:	e0bffa83 	ldbu	r2,-22(fp)
 40056b0:	1000021e 	bne	r2,zero,40056bc <_ZN13EthernetClass11socketBeginEht+0x44>
 40056b4:	00800204 	movi	r2,8
 40056b8:	00009406 	br	400590c <_ZN13EthernetClass11socketBeginEht+0x294>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 40056bc:	e0bffa83 	ldbu	r2,-22(fp)
 40056c0:	10800cd8 	cmpnei	r2,r2,51
 40056c4:	1000021e 	bne	r2,zero,40056d0 <_ZN13EthernetClass11socketBeginEht+0x58>
 40056c8:	00800104 	movi	r2,4
 40056cc:	e0bffa45 	stb	r2,-23(fp)
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 40056d0:	0009883a 	mov	r4,zero
 40056d4:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 40056d8:	e03ffa05 	stb	zero,-24(fp)
 40056dc:	e0fffa03 	ldbu	r3,-24(fp)
 40056e0:	e0bffa43 	ldbu	r2,-23(fp)
 40056e4:	1880122e 	bgeu	r3,r2,4005730 <_ZN13EthernetClass11socketBeginEht+0xb8>
		status[s] = W5100.readSnSR(s);
 40056e8:	e43ffa03 	ldbu	r16,-24(fp)
 40056ec:	e0bffa03 	ldbu	r2,-24(fp)
 40056f0:	1009883a 	mov	r4,r2
 40056f4:	4006cc80 	call	4006cc8 <_ZN10W5100Class8readSnSREh>
 40056f8:	1007883a 	mov	r3,r2
 40056fc:	e0bffb04 	addi	r2,fp,-20
 4005700:	1405883a 	add	r2,r2,r16
 4005704:	10c00005 	stb	r3,0(r2)
		if (status[s] == SnSR::CLOSED) goto makesocket;
 4005708:	e0bffa03 	ldbu	r2,-24(fp)
 400570c:	e0fffb04 	addi	r3,fp,-20
 4005710:	1885883a 	add	r2,r3,r2
 4005714:	10800003 	ldbu	r2,0(r2)
 4005718:	10803fcc 	andi	r2,r2,255
 400571c:	10002c26 	beq	r2,zero,40057d0 <_ZN13EthernetClass11socketBeginEht+0x158>
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 4005720:	e0bffa03 	ldbu	r2,-24(fp)
 4005724:	10800044 	addi	r2,r2,1
 4005728:	e0bffa05 	stb	r2,-24(fp)
 400572c:	003feb06 	br	40056dc <__alt_data_end+0xfc0056dc>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 4005730:	e03ffa05 	stb	zero,-24(fp)
 4005734:	e0fffa03 	ldbu	r3,-24(fp)
 4005738:	e0bffa43 	ldbu	r2,-23(fp)
 400573c:	1880152e 	bgeu	r3,r2,4005794 <_ZN13EthernetClass11socketBeginEht+0x11c>
		uint8_t stat = status[s];
 4005740:	e0bffa03 	ldbu	r2,-24(fp)
 4005744:	e0fffb04 	addi	r3,fp,-20
 4005748:	1885883a 	add	r2,r3,r2
 400574c:	10800003 	ldbu	r2,0(r2)
 4005750:	e0bffac5 	stb	r2,-21(fp)
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4005754:	e0bffac3 	ldbu	r2,-21(fp)
 4005758:	10800758 	cmpnei	r2,r2,29
 400575c:	10001026 	beq	r2,zero,40057a0 <_ZN13EthernetClass11socketBeginEht+0x128>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 4005760:	e0bffac3 	ldbu	r2,-21(fp)
 4005764:	108006d8 	cmpnei	r2,r2,27
 4005768:	10000f26 	beq	r2,zero,40057a8 <_ZN13EthernetClass11socketBeginEht+0x130>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 400576c:	e0bffac3 	ldbu	r2,-21(fp)
 4005770:	10800618 	cmpnei	r2,r2,24
 4005774:	10000e26 	beq	r2,zero,40057b0 <_ZN13EthernetClass11socketBeginEht+0x138>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4005778:	e0bffac3 	ldbu	r2,-21(fp)
 400577c:	10800698 	cmpnei	r2,r2,26
 4005780:	10000d26 	beq	r2,zero,40057b8 <_ZN13EthernetClass11socketBeginEht+0x140>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 4005784:	e0bffa03 	ldbu	r2,-24(fp)
 4005788:	10800044 	addi	r2,r2,1
 400578c:	e0bffa05 	stb	r2,-24(fp)
 4005790:	003fe806 	br	4005734 <__alt_data_end+0xfc005734>
		uint8_t stat = status[s];
		// TODO: this also needs to check if no more data
		if (stat == SnSR::CLOSE_WAIT) goto closemakesocket;
	}
#endif
	SPI_endTransaction();
 4005794:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return MAX_SOCK_NUM; // all sockets are in use
 4005798:	00800204 	movi	r2,8
 400579c:	00005b06 	br	400590c <_ZN13EthernetClass11socketBeginEht+0x294>
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
		uint8_t stat = status[s];
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 40057a0:	0001883a 	nop
 40057a4:	00000506 	br	40057bc <_ZN13EthernetClass11socketBeginEht+0x144>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 40057a8:	0001883a 	nop
 40057ac:	00000306 	br	40057bc <_ZN13EthernetClass11socketBeginEht+0x144>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 40057b0:	0001883a 	nop
 40057b4:	00000106 	br	40057bc <_ZN13EthernetClass11socketBeginEht+0x144>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 40057b8:	0001883a 	nop
#endif
	SPI_endTransaction();
	return MAX_SOCK_NUM; // all sockets are in use
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
 40057bc:	e0bffa03 	ldbu	r2,-24(fp)
 40057c0:	01400404 	movi	r5,16
 40057c4:	1009883a 	mov	r4,r2
 40057c8:	4007ed00 	call	4007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>
 40057cc:	00000106 	br	40057d4 <_ZN13EthernetClass11socketBeginEht+0x15c>
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
 40057d0:	0001883a 	nop
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
makesocket:
	//Serial.printf("W5000socket %d\n", s);
	EthernetServer::server_port[s] = 0;
 40057d4:	e0fffa03 	ldbu	r3,-24(fp)
 40057d8:	008100f4 	movhi	r2,1027
 40057dc:	10a3a104 	addi	r2,r2,-29052
 40057e0:	18c7883a 	add	r3,r3,r3
 40057e4:	10c5883a 	add	r2,r2,r3
 40057e8:	1000000d 	sth	zero,0(r2)
	usleep (250); // TODO: is this needed??
 40057ec:	01003e84 	movi	r4,250
 40057f0:	4017f980 	call	4017f98 <usleep>
	W5100.writeSnMR(s, protocol);
 40057f4:	e0bffa03 	ldbu	r2,-24(fp)
 40057f8:	e0fffd03 	ldbu	r3,-12(fp)
 40057fc:	180b883a 	mov	r5,r3
 4005800:	1009883a 	mov	r4,r2
 4005804:	4006bec0 	call	4006bec <_ZN10W5100Class9writeSnMREhh>
	W5100.writeSnIR(s, 0xFF);
 4005808:	e0bffa03 	ldbu	r2,-24(fp)
 400580c:	01403fc4 	movi	r5,255
 4005810:	1009883a 	mov	r4,r2
 4005814:	4006c3c0 	call	4006c3c <_ZN10W5100Class9writeSnIREhh>
	if (port > 0) {
 4005818:	e0bffe0b 	ldhu	r2,-8(fp)
 400581c:	10000626 	beq	r2,zero,4005838 <_ZN13EthernetClass11socketBeginEht+0x1c0>
		W5100.writeSnPORT(s, port);
 4005820:	e0bffa03 	ldbu	r2,-24(fp)
 4005824:	e0fffe0b 	ldhu	r3,-8(fp)
 4005828:	180b883a 	mov	r5,r3
 400582c:	1009883a 	mov	r4,r2
 4005830:	4006d040 	call	4006d04 <_ZN10W5100Class11writeSnPORTEht>
 4005834:	00001006 	br	4005878 <_ZN13EthernetClass11socketBeginEht+0x200>
	} else {
		// if don't set the source port, set local_port number.
		if (++local_port < 49152) local_port = 49152;
 4005838:	d0a00c0b 	ldhu	r2,-32720(gp)
 400583c:	10800044 	addi	r2,r2,1
 4005840:	d0a00c0d 	sth	r2,-32720(gp)
 4005844:	d0a00c0b 	ldhu	r2,-32720(gp)
 4005848:	10bfffcc 	andi	r2,r2,65535
 400584c:	10b00030 	cmpltui	r2,r2,49152
 4005850:	10803fcc 	andi	r2,r2,255
 4005854:	10000226 	beq	r2,zero,4005860 <_ZN13EthernetClass11socketBeginEht+0x1e8>
 4005858:	00b00004 	movi	r2,-16384
 400585c:	d0a00c0d 	sth	r2,-32720(gp)
		W5100.writeSnPORT(s, local_port);
 4005860:	e0bffa03 	ldbu	r2,-24(fp)
 4005864:	d0e00c0b 	ldhu	r3,-32720(gp)
 4005868:	18ffffcc 	andi	r3,r3,65535
 400586c:	180b883a 	mov	r5,r3
 4005870:	1009883a 	mov	r4,r2
 4005874:	4006d040 	call	4006d04 <_ZN10W5100Class11writeSnPORTEht>
	}
	W5100.execCmdSn(s, Sock_OPEN);
 4005878:	e0bffa03 	ldbu	r2,-24(fp)
 400587c:	01400044 	movi	r5,1
 4005880:	1009883a 	mov	r4,r2
 4005884:	4007ed00 	call	4007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	state[s].RX_RSR = 0;
 4005888:	e0fffa03 	ldbu	r3,-24(fp)
 400588c:	008100f4 	movhi	r2,1027
 4005890:	10a3a504 	addi	r2,r2,-29036
 4005894:	180690fa 	slli	r3,r3,3
 4005898:	10c5883a 	add	r2,r2,r3
 400589c:	1000000d 	sth	zero,0(r2)
	state[s].RX_RD  = W5100.readSnRX_RD(s); // always zero?
 40058a0:	e43ffa03 	ldbu	r16,-24(fp)
 40058a4:	e0bffa03 	ldbu	r2,-24(fp)
 40058a8:	1009883a 	mov	r4,r2
 40058ac:	40070440 	call	4007044 <_ZN10W5100Class11readSnRX_RDEh>
 40058b0:	1009883a 	mov	r4,r2
 40058b4:	008100f4 	movhi	r2,1027
 40058b8:	10a3a504 	addi	r2,r2,-29036
 40058bc:	800690fa 	slli	r3,r16,3
 40058c0:	10c5883a 	add	r2,r2,r3
 40058c4:	10800084 	addi	r2,r2,2
 40058c8:	1100000d 	sth	r4,0(r2)
	state[s].RX_inc = 0;
 40058cc:	e0fffa03 	ldbu	r3,-24(fp)
 40058d0:	008100f4 	movhi	r2,1027
 40058d4:	10a3a504 	addi	r2,r2,-29036
 40058d8:	180690fa 	slli	r3,r3,3
 40058dc:	10c5883a 	add	r2,r2,r3
 40058e0:	10800184 	addi	r2,r2,6
 40058e4:	10000005 	stb	zero,0(r2)
	state[s].TX_FSR = 0;
 40058e8:	e0fffa03 	ldbu	r3,-24(fp)
 40058ec:	008100f4 	movhi	r2,1027
 40058f0:	10a3a504 	addi	r2,r2,-29036
 40058f4:	180690fa 	slli	r3,r3,3
 40058f8:	10c5883a 	add	r2,r2,r3
 40058fc:	10800104 	addi	r2,r2,4
 4005900:	1000000d 	sth	zero,0(r2)
	//Serial.printf("W5000socket prot=%d, RX_RD=%d\n", W5100.readSnMR(s), state[s].RX_RD);
	SPI_endTransaction();
 4005904:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return s;
 4005908:	e0bffa03 	ldbu	r2,-24(fp)
}
 400590c:	e6ffff04 	addi	sp,fp,-4
 4005910:	dfc00217 	ldw	ra,8(sp)
 4005914:	df000117 	ldw	fp,4(sp)
 4005918:	dc000017 	ldw	r16,0(sp)
 400591c:	dec00304 	addi	sp,sp,12
 4005920:	f800283a 	ret

04005924 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst>:

// multicast version to set fields before open  thd
uint8_t EthernetClass::socketBeginMulticast(uint8_t protocol, IPAddress ip, uint16_t port)
{
 4005924:	defff504 	addi	sp,sp,-44
 4005928:	dfc00a15 	stw	ra,40(sp)
 400592c:	df000915 	stw	fp,36(sp)
 4005930:	dc000815 	stw	r16,32(sp)
 4005934:	df000904 	addi	fp,sp,36
 4005938:	2007883a 	mov	r3,r4
 400593c:	e17ffd15 	stw	r5,-12(fp)
 4005940:	3005883a 	mov	r2,r6
 4005944:	e0fffc05 	stb	r3,-16(fp)
 4005948:	e0bffe0d 	sth	r2,-8(fp)
	uint8_t s, status[MAX_SOCK_NUM], chip, maxindex=MAX_SOCK_NUM;
 400594c:	00800204 	movi	r2,8
 4005950:	e0bff745 	stb	r2,-35(fp)

	// first check hardware compatibility
	chip = W5100.getChip();
 4005954:	40035fc0 	call	40035fc <_ZN10W5100Class7getChipEv>
 4005958:	e0bff785 	stb	r2,-34(fp)
	if (!chip) return MAX_SOCK_NUM; // immediate error if no hardware detected
 400595c:	e0bff783 	ldbu	r2,-34(fp)
 4005960:	1000021e 	bne	r2,zero,400596c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x48>
 4005964:	00800204 	movi	r2,8
 4005968:	0000c006 	br	4005c6c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x348>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 400596c:	e0bff783 	ldbu	r2,-34(fp)
 4005970:	10800cd8 	cmpnei	r2,r2,51
 4005974:	1000021e 	bne	r2,zero,4005980 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x5c>
 4005978:	00800104 	movi	r2,4
 400597c:	e0bff745 	stb	r2,-35(fp)
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4005980:	0009883a 	mov	r4,zero
 4005984:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 4005988:	e03ff705 	stb	zero,-36(fp)
 400598c:	e0fff703 	ldbu	r3,-36(fp)
 4005990:	e0bff743 	ldbu	r2,-35(fp)
 4005994:	1880122e 	bgeu	r3,r2,40059e0 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0xbc>
		status[s] = W5100.readSnSR(s);
 4005998:	e43ff703 	ldbu	r16,-36(fp)
 400599c:	e0bff703 	ldbu	r2,-36(fp)
 40059a0:	1009883a 	mov	r4,r2
 40059a4:	4006cc80 	call	4006cc8 <_ZN10W5100Class8readSnSREh>
 40059a8:	1007883a 	mov	r3,r2
 40059ac:	e0bff804 	addi	r2,fp,-32
 40059b0:	1405883a 	add	r2,r2,r16
 40059b4:	10c00005 	stb	r3,0(r2)
		if (status[s] == SnSR::CLOSED) goto makesocket;
 40059b8:	e0bff703 	ldbu	r2,-36(fp)
 40059bc:	e0fff804 	addi	r3,fp,-32
 40059c0:	1885883a 	add	r2,r3,r2
 40059c4:	10800003 	ldbu	r2,0(r2)
 40059c8:	10803fcc 	andi	r2,r2,255
 40059cc:	10002c26 	beq	r2,zero,4005a80 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x15c>
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 40059d0:	e0bff703 	ldbu	r2,-36(fp)
 40059d4:	10800044 	addi	r2,r2,1
 40059d8:	e0bff705 	stb	r2,-36(fp)
 40059dc:	003feb06 	br	400598c <__alt_data_end+0xfc00598c>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 40059e0:	e03ff705 	stb	zero,-36(fp)
 40059e4:	e0fff703 	ldbu	r3,-36(fp)
 40059e8:	e0bff743 	ldbu	r2,-35(fp)
 40059ec:	1880152e 	bgeu	r3,r2,4005a44 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x120>
		uint8_t stat = status[s];
 40059f0:	e0bff703 	ldbu	r2,-36(fp)
 40059f4:	e0fff804 	addi	r3,fp,-32
 40059f8:	1885883a 	add	r2,r3,r2
 40059fc:	10800003 	ldbu	r2,0(r2)
 4005a00:	e0bff7c5 	stb	r2,-33(fp)
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4005a04:	e0bff7c3 	ldbu	r2,-33(fp)
 4005a08:	10800758 	cmpnei	r2,r2,29
 4005a0c:	10001026 	beq	r2,zero,4005a50 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x12c>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 4005a10:	e0bff7c3 	ldbu	r2,-33(fp)
 4005a14:	108006d8 	cmpnei	r2,r2,27
 4005a18:	10000f26 	beq	r2,zero,4005a58 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x134>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4005a1c:	e0bff7c3 	ldbu	r2,-33(fp)
 4005a20:	10800618 	cmpnei	r2,r2,24
 4005a24:	10000e26 	beq	r2,zero,4005a60 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x13c>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4005a28:	e0bff7c3 	ldbu	r2,-33(fp)
 4005a2c:	10800698 	cmpnei	r2,r2,26
 4005a30:	10000d26 	beq	r2,zero,4005a68 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x144>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 4005a34:	e0bff703 	ldbu	r2,-36(fp)
 4005a38:	10800044 	addi	r2,r2,1
 4005a3c:	e0bff705 	stb	r2,-36(fp)
 4005a40:	003fe806 	br	40059e4 <__alt_data_end+0xfc0059e4>
		uint8_t stat = status[s];
		// TODO: this also needs to check if no more data
		if (stat == SnSR::CLOSE_WAIT) goto closemakesocket;
	}
#endif
	SPI_endTransaction();
 4005a44:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return MAX_SOCK_NUM; // all sockets are in use
 4005a48:	00800204 	movi	r2,8
 4005a4c:	00008706 	br	4005c6c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x348>
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
		uint8_t stat = status[s];
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4005a50:	0001883a 	nop
 4005a54:	00000506 	br	4005a6c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x148>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 4005a58:	0001883a 	nop
 4005a5c:	00000306 	br	4005a6c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x148>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4005a60:	0001883a 	nop
 4005a64:	00000106 	br	4005a6c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x148>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4005a68:	0001883a 	nop
#endif
	SPI_endTransaction();
	return MAX_SOCK_NUM; // all sockets are in use
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
 4005a6c:	e0bff703 	ldbu	r2,-36(fp)
 4005a70:	01400404 	movi	r5,16
 4005a74:	1009883a 	mov	r4,r2
 4005a78:	4007ed00 	call	4007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>
 4005a7c:	00000106 	br	4005a84 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x160>
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
 4005a80:	0001883a 	nop
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
makesocket:
	//Serial.printf("W5000socket %d\n", s);
	EthernetServer::server_port[s] = 0;
 4005a84:	e0fff703 	ldbu	r3,-36(fp)
 4005a88:	008100f4 	movhi	r2,1027
 4005a8c:	10a3a104 	addi	r2,r2,-29052
 4005a90:	18c7883a 	add	r3,r3,r3
 4005a94:	10c5883a 	add	r2,r2,r3
 4005a98:	1000000d 	sth	zero,0(r2)
	usleep (250); // TODO: is this needed??
 4005a9c:	01003e84 	movi	r4,250
 4005aa0:	4017f980 	call	4017f98 <usleep>
	W5100.writeSnMR(s, protocol);
 4005aa4:	e0bff703 	ldbu	r2,-36(fp)
 4005aa8:	e0fffc03 	ldbu	r3,-16(fp)
 4005aac:	180b883a 	mov	r5,r3
 4005ab0:	1009883a 	mov	r4,r2
 4005ab4:	4006bec0 	call	4006bec <_ZN10W5100Class9writeSnMREhh>
	W5100.writeSnIR(s, 0xFF);
 4005ab8:	e0bff703 	ldbu	r2,-36(fp)
 4005abc:	01403fc4 	movi	r5,255
 4005ac0:	1009883a 	mov	r4,r2
 4005ac4:	4006c3c0 	call	4006c3c <_ZN10W5100Class9writeSnIREhh>
	if (port > 0) {
 4005ac8:	e0bffe0b 	ldhu	r2,-8(fp)
 4005acc:	10000626 	beq	r2,zero,4005ae8 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x1c4>
		W5100.writeSnPORT(s, port);
 4005ad0:	e0bff703 	ldbu	r2,-36(fp)
 4005ad4:	e0fffe0b 	ldhu	r3,-8(fp)
 4005ad8:	180b883a 	mov	r5,r3
 4005adc:	1009883a 	mov	r4,r2
 4005ae0:	4006d040 	call	4006d04 <_ZN10W5100Class11writeSnPORTEht>
 4005ae4:	00001006 	br	4005b28 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x204>
	} else {
		// if don't set the source port, set local_port number.
		if (++local_port < 49152) local_port = 49152;
 4005ae8:	d0a00c0b 	ldhu	r2,-32720(gp)
 4005aec:	10800044 	addi	r2,r2,1
 4005af0:	d0a00c0d 	sth	r2,-32720(gp)
 4005af4:	d0a00c0b 	ldhu	r2,-32720(gp)
 4005af8:	10bfffcc 	andi	r2,r2,65535
 4005afc:	10b00030 	cmpltui	r2,r2,49152
 4005b00:	10803fcc 	andi	r2,r2,255
 4005b04:	10000226 	beq	r2,zero,4005b10 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x1ec>
 4005b08:	00b00004 	movi	r2,-16384
 4005b0c:	d0a00c0d 	sth	r2,-32720(gp)
		W5100.writeSnPORT(s, local_port);
 4005b10:	e0bff703 	ldbu	r2,-36(fp)
 4005b14:	d0e00c0b 	ldhu	r3,-32720(gp)
 4005b18:	18ffffcc 	andi	r3,r3,65535
 4005b1c:	180b883a 	mov	r5,r3
 4005b20:	1009883a 	mov	r4,r2
 4005b24:	4006d040 	call	4006d04 <_ZN10W5100Class11writeSnPORTEht>
	}
	// Calculate MAC address from Multicast IP Address
    	unsigned char mac[] = {  0x01, 0x00, 0x5E, 0x00, 0x00, 0x00 };
 4005b28:	00800044 	movi	r2,1
 4005b2c:	e0bffa05 	stb	r2,-24(fp)
 4005b30:	e03ffa45 	stb	zero,-23(fp)
 4005b34:	00801784 	movi	r2,94
 4005b38:	e0bffa85 	stb	r2,-22(fp)
 4005b3c:	e03ffac5 	stb	zero,-21(fp)
 4005b40:	e03ffb05 	stb	zero,-20(fp)
 4005b44:	e03ffb45 	stb	zero,-19(fp)
    	mac[3] = ip[1] & 0x7F;
 4005b48:	e0bffd04 	addi	r2,fp,-12
 4005b4c:	01400044 	movi	r5,1
 4005b50:	1009883a 	mov	r4,r2
 4005b54:	40025c40 	call	40025c4 <_ZN9IPAddressixEi>
 4005b58:	10800003 	ldbu	r2,0(r2)
 4005b5c:	10801fcc 	andi	r2,r2,127
 4005b60:	e0bffac5 	stb	r2,-21(fp)
    	mac[4] = ip[2];
 4005b64:	e0bffd04 	addi	r2,fp,-12
 4005b68:	01400084 	movi	r5,2
 4005b6c:	1009883a 	mov	r4,r2
 4005b70:	40025c40 	call	40025c4 <_ZN9IPAddressixEi>
 4005b74:	10800003 	ldbu	r2,0(r2)
 4005b78:	e0bffb05 	stb	r2,-20(fp)
    	mac[5] = ip[3];
 4005b7c:	e0bffd04 	addi	r2,fp,-12
 4005b80:	014000c4 	movi	r5,3
 4005b84:	1009883a 	mov	r4,r2
 4005b88:	40025c40 	call	40025c4 <_ZN9IPAddressixEi>
 4005b8c:	10800003 	ldbu	r2,0(r2)
 4005b90:	e0bffb45 	stb	r2,-19(fp)
    	W5100.writeSnDIPR(s, ip.raw_address());   //239.255.0.1
 4005b94:	e43ff703 	ldbu	r16,-36(fp)
 4005b98:	e0bffd04 	addi	r2,fp,-12
 4005b9c:	1009883a 	mov	r4,r2
 4005ba0:	40025780 	call	4002578 <_ZN9IPAddress11raw_addressEv>
 4005ba4:	100b883a 	mov	r5,r2
 4005ba8:	8009883a 	mov	r4,r16
 4005bac:	4006db00 	call	4006db0 <_ZN10W5100Class11writeSnDIPREhPh>
    	W5100.writeSnDPORT(s, port);
 4005bb0:	e0bff703 	ldbu	r2,-36(fp)
 4005bb4:	e0fffe0b 	ldhu	r3,-8(fp)
 4005bb8:	180b883a 	mov	r5,r3
 4005bbc:	1009883a 	mov	r4,r2
 4005bc0:	4006df80 	call	4006df8 <_ZN10W5100Class12writeSnDPORTEht>
    	W5100.writeSnDHAR(s, mac);
 4005bc4:	e0bff703 	ldbu	r2,-36(fp)
 4005bc8:	e0fffa04 	addi	r3,fp,-24
 4005bcc:	180b883a 	mov	r5,r3
 4005bd0:	1009883a 	mov	r4,r2
 4005bd4:	4006d680 	call	4006d68 <_ZN10W5100Class11writeSnDHAREhPh>
	W5100.execCmdSn(s, Sock_OPEN);
 4005bd8:	e0bff703 	ldbu	r2,-36(fp)
 4005bdc:	01400044 	movi	r5,1
 4005be0:	1009883a 	mov	r4,r2
 4005be4:	4007ed00 	call	4007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	state[s].RX_RSR = 0;
 4005be8:	e0fff703 	ldbu	r3,-36(fp)
 4005bec:	008100f4 	movhi	r2,1027
 4005bf0:	10a3a504 	addi	r2,r2,-29036
 4005bf4:	180690fa 	slli	r3,r3,3
 4005bf8:	10c5883a 	add	r2,r2,r3
 4005bfc:	1000000d 	sth	zero,0(r2)
	state[s].RX_RD  = W5100.readSnRX_RD(s); // always zero?
 4005c00:	e43ff703 	ldbu	r16,-36(fp)
 4005c04:	e0bff703 	ldbu	r2,-36(fp)
 4005c08:	1009883a 	mov	r4,r2
 4005c0c:	40070440 	call	4007044 <_ZN10W5100Class11readSnRX_RDEh>
 4005c10:	1009883a 	mov	r4,r2
 4005c14:	008100f4 	movhi	r2,1027
 4005c18:	10a3a504 	addi	r2,r2,-29036
 4005c1c:	800690fa 	slli	r3,r16,3
 4005c20:	10c5883a 	add	r2,r2,r3
 4005c24:	10800084 	addi	r2,r2,2
 4005c28:	1100000d 	sth	r4,0(r2)
	state[s].RX_inc = 0;
 4005c2c:	e0fff703 	ldbu	r3,-36(fp)
 4005c30:	008100f4 	movhi	r2,1027
 4005c34:	10a3a504 	addi	r2,r2,-29036
 4005c38:	180690fa 	slli	r3,r3,3
 4005c3c:	10c5883a 	add	r2,r2,r3
 4005c40:	10800184 	addi	r2,r2,6
 4005c44:	10000005 	stb	zero,0(r2)
	state[s].TX_FSR = 0;
 4005c48:	e0fff703 	ldbu	r3,-36(fp)
 4005c4c:	008100f4 	movhi	r2,1027
 4005c50:	10a3a504 	addi	r2,r2,-29036
 4005c54:	180690fa 	slli	r3,r3,3
 4005c58:	10c5883a 	add	r2,r2,r3
 4005c5c:	10800104 	addi	r2,r2,4
 4005c60:	1000000d 	sth	zero,0(r2)
	//Serial.printf("W5000socket prot=%d, RX_RD=%d\n", W5100.readSnMR(s), state[s].RX_RD);
	SPI_endTransaction();
 4005c64:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return s;
 4005c68:	e0bff703 	ldbu	r2,-36(fp)
}
 4005c6c:	e6ffff04 	addi	sp,fp,-4
 4005c70:	dfc00217 	ldw	ra,8(sp)
 4005c74:	df000117 	ldw	fp,4(sp)
 4005c78:	dc000017 	ldw	r16,0(sp)
 4005c7c:	dec00304 	addi	sp,sp,12
 4005c80:	f800283a 	ret

04005c84 <_ZN13EthernetClass12socketStatusEh>:
// Return the socket's status
//
uint8_t EthernetClass::socketStatus(uint8_t s)
{
 4005c84:	defffc04 	addi	sp,sp,-16
 4005c88:	dfc00315 	stw	ra,12(sp)
 4005c8c:	df000215 	stw	fp,8(sp)
 4005c90:	df000204 	addi	fp,sp,8
 4005c94:	2005883a 	mov	r2,r4
 4005c98:	e0bfff05 	stb	r2,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4005c9c:	0009883a 	mov	r4,zero
 4005ca0:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	uint8_t status = W5100.readSnSR(s);
 4005ca4:	e0bfff03 	ldbu	r2,-4(fp)
 4005ca8:	1009883a 	mov	r4,r2
 4005cac:	4006cc80 	call	4006cc8 <_ZN10W5100Class8readSnSREh>
 4005cb0:	e0bffe05 	stb	r2,-8(fp)
	SPI_endTransaction();
 4005cb4:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return status;
 4005cb8:	e0bffe03 	ldbu	r2,-8(fp)
}
 4005cbc:	e037883a 	mov	sp,fp
 4005cc0:	dfc00117 	ldw	ra,4(sp)
 4005cc4:	df000017 	ldw	fp,0(sp)
 4005cc8:	dec00204 	addi	sp,sp,8
 4005ccc:	f800283a 	ret

04005cd0 <_ZN13EthernetClass11socketCloseEh>:

// Immediately close.  If a TCP connection is established, the
// remote host is left unaware we closed.
//
void EthernetClass::socketClose(uint8_t s)
{
 4005cd0:	defffd04 	addi	sp,sp,-12
 4005cd4:	dfc00215 	stw	ra,8(sp)
 4005cd8:	df000115 	stw	fp,4(sp)
 4005cdc:	df000104 	addi	fp,sp,4
 4005ce0:	2005883a 	mov	r2,r4
 4005ce4:	e0bfff05 	stb	r2,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4005ce8:	0009883a 	mov	r4,zero
 4005cec:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.execCmdSn(s, Sock_CLOSE);
 4005cf0:	e0bfff03 	ldbu	r2,-4(fp)
 4005cf4:	01400404 	movi	r5,16
 4005cf8:	1009883a 	mov	r4,r2
 4005cfc:	4007ed00 	call	4007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	SPI_endTransaction();
 4005d00:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
}
 4005d04:	0001883a 	nop
 4005d08:	e037883a 	mov	sp,fp
 4005d0c:	dfc00117 	ldw	ra,4(sp)
 4005d10:	df000017 	ldw	fp,0(sp)
 4005d14:	dec00204 	addi	sp,sp,8
 4005d18:	f800283a 	ret

04005d1c <_ZN13EthernetClass12socketListenEh>:


// Place the socket in listening (server) mode
//
uint8_t EthernetClass::socketListen(uint8_t s)
{
 4005d1c:	defffd04 	addi	sp,sp,-12
 4005d20:	dfc00215 	stw	ra,8(sp)
 4005d24:	df000115 	stw	fp,4(sp)
 4005d28:	df000104 	addi	fp,sp,4
 4005d2c:	2005883a 	mov	r2,r4
 4005d30:	e0bfff05 	stb	r2,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4005d34:	0009883a 	mov	r4,zero
 4005d38:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	if (W5100.readSnSR(s) != SnSR::INIT) {
 4005d3c:	e0bfff03 	ldbu	r2,-4(fp)
 4005d40:	1009883a 	mov	r4,r2
 4005d44:	4006cc80 	call	4006cc8 <_ZN10W5100Class8readSnSREh>
 4005d48:	10803fcc 	andi	r2,r2,255
 4005d4c:	108004d8 	cmpnei	r2,r2,19
 4005d50:	10803fcc 	andi	r2,r2,255
 4005d54:	10000326 	beq	r2,zero,4005d64 <_ZN13EthernetClass12socketListenEh+0x48>
		SPI_endTransaction();
 4005d58:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
		return 0;
 4005d5c:	0005883a 	mov	r2,zero
 4005d60:	00000606 	br	4005d7c <_ZN13EthernetClass12socketListenEh+0x60>
	}
	W5100.execCmdSn(s, Sock_LISTEN);
 4005d64:	e0bfff03 	ldbu	r2,-4(fp)
 4005d68:	01400084 	movi	r5,2
 4005d6c:	1009883a 	mov	r4,r2
 4005d70:	4007ed00 	call	4007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	SPI_endTransaction();
 4005d74:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return 1;
 4005d78:	00800044 	movi	r2,1
}
 4005d7c:	e037883a 	mov	sp,fp
 4005d80:	dfc00117 	ldw	ra,4(sp)
 4005d84:	df000017 	ldw	fp,0(sp)
 4005d88:	dec00204 	addi	sp,sp,8
 4005d8c:	f800283a 	ret

04005d90 <_ZN13EthernetClass13socketConnectEhPht>:


// establish a TCP connection in Active (client) mode.
//
void EthernetClass::socketConnect(uint8_t s, uint8_t * addr, uint16_t port)
{
 4005d90:	defffb04 	addi	sp,sp,-20
 4005d94:	dfc00415 	stw	ra,16(sp)
 4005d98:	df000315 	stw	fp,12(sp)
 4005d9c:	df000304 	addi	fp,sp,12
 4005da0:	2007883a 	mov	r3,r4
 4005da4:	e17ffe15 	stw	r5,-8(fp)
 4005da8:	3005883a 	mov	r2,r6
 4005dac:	e0fffd05 	stb	r3,-12(fp)
 4005db0:	e0bfff0d 	sth	r2,-4(fp)
	// set destination IP
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4005db4:	0009883a 	mov	r4,zero
 4005db8:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.writeSnDIPR(s, addr);
 4005dbc:	e0bffd03 	ldbu	r2,-12(fp)
 4005dc0:	e17ffe17 	ldw	r5,-8(fp)
 4005dc4:	1009883a 	mov	r4,r2
 4005dc8:	4006db00 	call	4006db0 <_ZN10W5100Class11writeSnDIPREhPh>
	W5100.writeSnDPORT(s, port);
 4005dcc:	e0bffd03 	ldbu	r2,-12(fp)
 4005dd0:	e0ffff0b 	ldhu	r3,-4(fp)
 4005dd4:	180b883a 	mov	r5,r3
 4005dd8:	1009883a 	mov	r4,r2
 4005ddc:	4006df80 	call	4006df8 <_ZN10W5100Class12writeSnDPORTEht>
	W5100.execCmdSn(s, Sock_CONNECT);
 4005de0:	e0bffd03 	ldbu	r2,-12(fp)
 4005de4:	01400104 	movi	r5,4
 4005de8:	1009883a 	mov	r4,r2
 4005dec:	4007ed00 	call	4007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	SPI_endTransaction();
 4005df0:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
}
 4005df4:	0001883a 	nop
 4005df8:	e037883a 	mov	sp,fp
 4005dfc:	dfc00117 	ldw	ra,4(sp)
 4005e00:	df000017 	ldw	fp,0(sp)
 4005e04:	dec00204 	addi	sp,sp,8
 4005e08:	f800283a 	ret

04005e0c <_ZN13EthernetClass16socketDisconnectEh>:


// Gracefully disconnect a TCP connection.
//
void EthernetClass::socketDisconnect(uint8_t s)
{
 4005e0c:	defffd04 	addi	sp,sp,-12
 4005e10:	dfc00215 	stw	ra,8(sp)
 4005e14:	df000115 	stw	fp,4(sp)
 4005e18:	df000104 	addi	fp,sp,4
 4005e1c:	2005883a 	mov	r2,r4
 4005e20:	e0bfff05 	stb	r2,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4005e24:	0009883a 	mov	r4,zero
 4005e28:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.execCmdSn(s, Sock_DISCON);
 4005e2c:	e0bfff03 	ldbu	r2,-4(fp)
 4005e30:	01400204 	movi	r5,8
 4005e34:	1009883a 	mov	r4,r2
 4005e38:	4007ed00 	call	4007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	SPI_endTransaction();
 4005e3c:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
}
 4005e40:	0001883a 	nop
 4005e44:	e037883a 	mov	sp,fp
 4005e48:	dfc00117 	ldw	ra,4(sp)
 4005e4c:	df000017 	ldw	fp,0(sp)
 4005e50:	dec00204 	addi	sp,sp,8
 4005e54:	f800283a 	ret

04005e58 <_ZL11getSnRX_RSRh>:
/*    Socket Data Receive Functions      */
/*****************************************/


static uint16_t getSnRX_RSR(uint8_t s)
{
 4005e58:	defffc04 	addi	sp,sp,-16
 4005e5c:	dfc00315 	stw	ra,12(sp)
 4005e60:	df000215 	stw	fp,8(sp)
 4005e64:	df000204 	addi	fp,sp,8
 4005e68:	2005883a 	mov	r2,r4
 4005e6c:	e0bfff05 	stb	r2,-4(fp)
#if 1
        uint16_t val, prev;

        prev = W5100.readSnRX_RSR(s);
 4005e70:	e0bfff03 	ldbu	r2,-4(fp)
 4005e74:	1009883a 	mov	r4,r2
 4005e78:	4006f800 	call	4006f80 <_ZN10W5100Class12readSnRX_RSREh>
 4005e7c:	e0bffe0d 	sth	r2,-8(fp)
        while (1) {
                val = W5100.readSnRX_RSR(s);
 4005e80:	e0bfff03 	ldbu	r2,-4(fp)
 4005e84:	1009883a 	mov	r4,r2
 4005e88:	4006f800 	call	4006f80 <_ZN10W5100Class12readSnRX_RSREh>
 4005e8c:	e0bffe8d 	sth	r2,-6(fp)
                if (val == prev) {
 4005e90:	e0fffe8b 	ldhu	r3,-6(fp)
 4005e94:	e0bffe0b 	ldhu	r2,-8(fp)
 4005e98:	1880021e 	bne	r3,r2,4005ea4 <_ZL11getSnRX_RSRh+0x4c>
			return val;
 4005e9c:	e0bffe8b 	ldhu	r2,-6(fp)
 4005ea0:	00000306 	br	4005eb0 <_ZL11getSnRX_RSRh+0x58>
		}
                prev = val;
 4005ea4:	e0bffe8b 	ldhu	r2,-6(fp)
 4005ea8:	e0bffe0d 	sth	r2,-8(fp)
{
#if 1
        uint16_t val, prev;

        prev = W5100.readSnRX_RSR(s);
        while (1) {
 4005eac:	003ff406 	br	4005e80 <__alt_data_end+0xfc005e80>
        }
#else
	uint16_t val = W5100.readSnRX_RSR(s);
	return val;
#endif
}
 4005eb0:	e037883a 	mov	sp,fp
 4005eb4:	dfc00117 	ldw	ra,4(sp)
 4005eb8:	df000017 	ldw	fp,0(sp)
 4005ebc:	dec00204 	addi	sp,sp,8
 4005ec0:	f800283a 	ret

04005ec4 <_ZL9read_datahtPht>:

static void read_data(uint8_t s, uint16_t src, uint8_t *dst, uint16_t len)
{
 4005ec4:	defff804 	addi	sp,sp,-32
 4005ec8:	dfc00715 	stw	ra,28(sp)
 4005ecc:	df000615 	stw	fp,24(sp)
 4005ed0:	df000604 	addi	fp,sp,24
 4005ed4:	2807883a 	mov	r3,r5
 4005ed8:	e1bffe15 	stw	r6,-8(fp)
 4005edc:	3805883a 	mov	r2,r7
 4005ee0:	e13ffc05 	stb	r4,-16(fp)
 4005ee4:	e0fffd0d 	sth	r3,-12(fp)
 4005ee8:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t size;
	uint16_t src_mask;
	uint16_t src_ptr;

	//Serial.printf("read_data, len=%d, at:%d\n", len, src);
	src_mask = (uint16_t)src & W5100.SMASK;
 4005eec:	e0bffd0b 	ldhu	r2,-12(fp)
 4005ef0:	1081ffcc 	andi	r2,r2,2047
 4005ef4:	e0bffa0d 	sth	r2,-24(fp)
	src_ptr = W5100.RBASE(s) + src_mask;
 4005ef8:	e0bffc03 	ldbu	r2,-16(fp)
 4005efc:	1009883a 	mov	r4,r2
 4005f00:	40070f40 	call	40070f4 <_ZN10W5100Class5RBASEEh>
 4005f04:	1007883a 	mov	r3,r2
 4005f08:	e0bffa0b 	ldhu	r2,-24(fp)
 4005f0c:	1885883a 	add	r2,r3,r2
 4005f10:	e0bffa8d 	sth	r2,-22(fp)

	if (W5100.hasOffsetAddressMapping() || src_mask + len <= W5100.SSIZE) {
 4005f14:	40071440 	call	4007144 <_ZN10W5100Class23hasOffsetAddressMappingEv>
 4005f18:	10803fcc 	andi	r2,r2,255
 4005f1c:	1000051e 	bne	r2,zero,4005f34 <_ZL9read_datahtPht+0x70>
 4005f20:	e0fffa0b 	ldhu	r3,-24(fp)
 4005f24:	e0bfff0b 	ldhu	r2,-4(fp)
 4005f28:	1885883a 	add	r2,r3,r2
 4005f2c:	10820048 	cmpgei	r2,r2,2049
 4005f30:	1000021e 	bne	r2,zero,4005f3c <_ZL9read_datahtPht+0x78>
 4005f34:	00800044 	movi	r2,1
 4005f38:	00000106 	br	4005f40 <_ZL9read_datahtPht+0x7c>
 4005f3c:	0005883a 	mov	r2,zero
 4005f40:	10803fcc 	andi	r2,r2,255
 4005f44:	10000726 	beq	r2,zero,4005f64 <_ZL9read_datahtPht+0xa0>
		W5100.read(src_ptr, dst, len);
 4005f48:	e0bffa8b 	ldhu	r2,-22(fp)
 4005f4c:	e0ffff0b 	ldhu	r3,-4(fp)
 4005f50:	180d883a 	mov	r6,r3
 4005f54:	e17ffe17 	ldw	r5,-8(fp)
 4005f58:	1009883a 	mov	r4,r2
 4005f5c:	4007d8c0 	call	4007d8c <_ZN10W5100Class4readEtPht>
		size = W5100.SSIZE - src_mask;
		W5100.read(src_ptr, dst, size);
		dst += size;
		W5100.read(W5100.RBASE(s), dst, len - size);
	}
}
 4005f60:	00001906 	br	4005fc8 <_ZL9read_datahtPht+0x104>
	src_ptr = W5100.RBASE(s) + src_mask;

	if (W5100.hasOffsetAddressMapping() || src_mask + len <= W5100.SSIZE) {
		W5100.read(src_ptr, dst, len);
	} else {
		size = W5100.SSIZE - src_mask;
 4005f64:	e0bffa0b 	ldhu	r2,-24(fp)
 4005f68:	00c20004 	movi	r3,2048
 4005f6c:	1885c83a 	sub	r2,r3,r2
 4005f70:	e0bffb0d 	sth	r2,-20(fp)
		W5100.read(src_ptr, dst, size);
 4005f74:	e0bffa8b 	ldhu	r2,-22(fp)
 4005f78:	e0fffb0b 	ldhu	r3,-20(fp)
 4005f7c:	180d883a 	mov	r6,r3
 4005f80:	e17ffe17 	ldw	r5,-8(fp)
 4005f84:	1009883a 	mov	r4,r2
 4005f88:	4007d8c0 	call	4007d8c <_ZN10W5100Class4readEtPht>
		dst += size;
 4005f8c:	e0bffb0b 	ldhu	r2,-20(fp)
 4005f90:	e0fffe17 	ldw	r3,-8(fp)
 4005f94:	1885883a 	add	r2,r3,r2
 4005f98:	e0bffe15 	stw	r2,-8(fp)
		W5100.read(W5100.RBASE(s), dst, len - size);
 4005f9c:	e0bffc03 	ldbu	r2,-16(fp)
 4005fa0:	1009883a 	mov	r4,r2
 4005fa4:	40070f40 	call	40070f4 <_ZN10W5100Class5RBASEEh>
 4005fa8:	113fffcc 	andi	r4,r2,65535
 4005fac:	e0ffff0b 	ldhu	r3,-4(fp)
 4005fb0:	e0bffb0b 	ldhu	r2,-20(fp)
 4005fb4:	1885c83a 	sub	r2,r3,r2
 4005fb8:	10bfffcc 	andi	r2,r2,65535
 4005fbc:	100d883a 	mov	r6,r2
 4005fc0:	e17ffe17 	ldw	r5,-8(fp)
 4005fc4:	4007d8c0 	call	4007d8c <_ZN10W5100Class4readEtPht>
	}
}
 4005fc8:	0001883a 	nop
 4005fcc:	e037883a 	mov	sp,fp
 4005fd0:	dfc00117 	ldw	ra,4(sp)
 4005fd4:	df000017 	ldw	fp,0(sp)
 4005fd8:	dec00204 	addi	sp,sp,8
 4005fdc:	f800283a 	ret

04005fe0 <_ZN13EthernetClass10socketRecvEhPhs>:

// Receive data.  Returns size, or -1 for no data, or 0 if connection closed
//
int EthernetClass::socketRecv(uint8_t s, uint8_t *buf, int16_t len)
{
 4005fe0:	defff804 	addi	sp,sp,-32
 4005fe4:	dfc00715 	stw	ra,28(sp)
 4005fe8:	df000615 	stw	fp,24(sp)
 4005fec:	df000604 	addi	fp,sp,24
 4005ff0:	2007883a 	mov	r3,r4
 4005ff4:	e17ffe15 	stw	r5,-8(fp)
 4005ff8:	3005883a 	mov	r2,r6
 4005ffc:	e0fffd05 	stb	r3,-12(fp)
 4006000:	e0bfff0d 	sth	r2,-4(fp)
	// Check how much data is available
	int ret = state[s].RX_RSR;
 4006004:	e0fffd03 	ldbu	r3,-12(fp)
 4006008:	008100f4 	movhi	r2,1027
 400600c:	10a3a504 	addi	r2,r2,-29036
 4006010:	180690fa 	slli	r3,r3,3
 4006014:	10c5883a 	add	r2,r2,r3
 4006018:	1080000b 	ldhu	r2,0(r2)
 400601c:	10bfffcc 	andi	r2,r2,65535
 4006020:	e0bffa15 	stw	r2,-24(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4006024:	0009883a 	mov	r4,zero
 4006028:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	if (ret < len) {
 400602c:	e0bfff0f 	ldh	r2,-4(fp)
 4006030:	e0fffa17 	ldw	r3,-24(fp)
 4006034:	1880170e 	bge	r3,r2,4006094 <_ZN13EthernetClass10socketRecvEhPhs+0xb4>
		uint16_t rsr = getSnRX_RSR(s);
 4006038:	e0bffd03 	ldbu	r2,-12(fp)
 400603c:	1009883a 	mov	r4,r2
 4006040:	4005e580 	call	4005e58 <_ZL11getSnRX_RSRh>
 4006044:	e0bffb0d 	sth	r2,-20(fp)
		ret = rsr - state[s].RX_inc;
 4006048:	e0fffb0b 	ldhu	r3,-20(fp)
 400604c:	e13ffd03 	ldbu	r4,-12(fp)
 4006050:	008100f4 	movhi	r2,1027
 4006054:	10a3a504 	addi	r2,r2,-29036
 4006058:	200890fa 	slli	r4,r4,3
 400605c:	1105883a 	add	r2,r2,r4
 4006060:	10800184 	addi	r2,r2,6
 4006064:	10800003 	ldbu	r2,0(r2)
 4006068:	10803fcc 	andi	r2,r2,255
 400606c:	1885c83a 	sub	r2,r3,r2
 4006070:	e0bffa15 	stw	r2,-24(fp)
		state[s].RX_RSR = ret;
 4006074:	e0fffd03 	ldbu	r3,-12(fp)
 4006078:	e0bffa17 	ldw	r2,-24(fp)
 400607c:	1009883a 	mov	r4,r2
 4006080:	008100f4 	movhi	r2,1027
 4006084:	10a3a504 	addi	r2,r2,-29036
 4006088:	180690fa 	slli	r3,r3,3
 400608c:	10c5883a 	add	r2,r2,r3
 4006090:	1100000d 	sth	r4,0(r2)
		//Serial.printf("Sock_RECV, RX_RSR=%d, RX_inc=%d\n", ret, state[s].RX_inc);
	}
	if (ret == 0) {
 4006094:	e0bffa17 	ldw	r2,-24(fp)
 4006098:	1000111e 	bne	r2,zero,40060e0 <_ZN13EthernetClass10socketRecvEhPhs+0x100>
		// No data available.
		uint8_t status = W5100.readSnSR(s);
 400609c:	e0bffd03 	ldbu	r2,-12(fp)
 40060a0:	1009883a 	mov	r4,r2
 40060a4:	4006cc80 	call	4006cc8 <_ZN10W5100Class8readSnSREh>
 40060a8:	e0bffb85 	stb	r2,-18(fp)
		if ( status == SnSR::LISTEN || status == SnSR::CLOSED ||
 40060ac:	e0bffb83 	ldbu	r2,-18(fp)
 40060b0:	10800520 	cmpeqi	r2,r2,20
 40060b4:	1000051e 	bne	r2,zero,40060cc <_ZN13EthernetClass10socketRecvEhPhs+0xec>
 40060b8:	e0bffb83 	ldbu	r2,-18(fp)
 40060bc:	10000326 	beq	r2,zero,40060cc <_ZN13EthernetClass10socketRecvEhPhs+0xec>
 40060c0:	e0bffb83 	ldbu	r2,-18(fp)
 40060c4:	10800718 	cmpnei	r2,r2,28
 40060c8:	1000021e 	bne	r2,zero,40060d4 <_ZN13EthernetClass10socketRecvEhPhs+0xf4>
		  status == SnSR::CLOSE_WAIT ) {
			// The remote end has closed its side of the connection,
			// so this is the eof state
			ret = 0;
 40060cc:	e03ffa15 	stw	zero,-24(fp)
 40060d0:	00006706 	br	4006270 <_ZN13EthernetClass10socketRecvEhPhs+0x290>
		} else {
			// The connection is still up, but there's no data waiting to be read
			ret = -1;
 40060d4:	00bfffc4 	movi	r2,-1
 40060d8:	e0bffa15 	stw	r2,-24(fp)
 40060dc:	00006406 	br	4006270 <_ZN13EthernetClass10socketRecvEhPhs+0x290>
		}
	} else {
		if (ret > len) ret = len; // more data available than buffer length
 40060e0:	e0ffff0f 	ldh	r3,-4(fp)
 40060e4:	e0bffa17 	ldw	r2,-24(fp)
 40060e8:	1880020e 	bge	r3,r2,40060f4 <_ZN13EthernetClass10socketRecvEhPhs+0x114>
 40060ec:	e0bfff0f 	ldh	r2,-4(fp)
 40060f0:	e0bffa15 	stw	r2,-24(fp)
		uint16_t ptr = state[s].RX_RD;
 40060f4:	e0fffd03 	ldbu	r3,-12(fp)
 40060f8:	008100f4 	movhi	r2,1027
 40060fc:	10a3a504 	addi	r2,r2,-29036
 4006100:	180690fa 	slli	r3,r3,3
 4006104:	10c5883a 	add	r2,r2,r3
 4006108:	10800084 	addi	r2,r2,2
 400610c:	1080000b 	ldhu	r2,0(r2)
 4006110:	e0bffc0d 	sth	r2,-16(fp)
		if (buf) read_data(s, ptr, buf, ret);
 4006114:	e0bffe17 	ldw	r2,-8(fp)
 4006118:	10000926 	beq	r2,zero,4006140 <_ZN13EthernetClass10socketRecvEhPhs+0x160>
 400611c:	e0fffd03 	ldbu	r3,-12(fp)
 4006120:	e13ffc0b 	ldhu	r4,-16(fp)
 4006124:	e0bffa17 	ldw	r2,-24(fp)
 4006128:	10bfffcc 	andi	r2,r2,65535
 400612c:	100f883a 	mov	r7,r2
 4006130:	e1bffe17 	ldw	r6,-8(fp)
 4006134:	200b883a 	mov	r5,r4
 4006138:	1809883a 	mov	r4,r3
 400613c:	4005ec40 	call	4005ec4 <_ZL9read_datahtPht>
		ptr += ret;
 4006140:	e0bffa17 	ldw	r2,-24(fp)
 4006144:	1007883a 	mov	r3,r2
 4006148:	e0bffc0b 	ldhu	r2,-16(fp)
 400614c:	1885883a 	add	r2,r3,r2
 4006150:	e0bffc0d 	sth	r2,-16(fp)
		state[s].RX_RD = ptr;
 4006154:	e0fffd03 	ldbu	r3,-12(fp)
 4006158:	008100f4 	movhi	r2,1027
 400615c:	10a3a504 	addi	r2,r2,-29036
 4006160:	180690fa 	slli	r3,r3,3
 4006164:	10c5883a 	add	r2,r2,r3
 4006168:	10800084 	addi	r2,r2,2
 400616c:	e0fffc0b 	ldhu	r3,-16(fp)
 4006170:	10c0000d 	sth	r3,0(r2)
		state[s].RX_RSR -= ret;
 4006174:	e0fffd03 	ldbu	r3,-12(fp)
 4006178:	e13ffd03 	ldbu	r4,-12(fp)
 400617c:	008100f4 	movhi	r2,1027
 4006180:	10a3a504 	addi	r2,r2,-29036
 4006184:	200890fa 	slli	r4,r4,3
 4006188:	1105883a 	add	r2,r2,r4
 400618c:	1080000b 	ldhu	r2,0(r2)
 4006190:	e13ffa17 	ldw	r4,-24(fp)
 4006194:	1105c83a 	sub	r2,r2,r4
 4006198:	1009883a 	mov	r4,r2
 400619c:	008100f4 	movhi	r2,1027
 40061a0:	10a3a504 	addi	r2,r2,-29036
 40061a4:	180690fa 	slli	r3,r3,3
 40061a8:	10c5883a 	add	r2,r2,r3
 40061ac:	1100000d 	sth	r4,0(r2)
		uint16_t inc = state[s].RX_inc + ret;
 40061b0:	e0fffd03 	ldbu	r3,-12(fp)
 40061b4:	008100f4 	movhi	r2,1027
 40061b8:	10a3a504 	addi	r2,r2,-29036
 40061bc:	180690fa 	slli	r3,r3,3
 40061c0:	10c5883a 	add	r2,r2,r3
 40061c4:	10800184 	addi	r2,r2,6
 40061c8:	10800003 	ldbu	r2,0(r2)
 40061cc:	10803fcc 	andi	r2,r2,255
 40061d0:	e0fffa17 	ldw	r3,-24(fp)
 40061d4:	10c5883a 	add	r2,r2,r3
 40061d8:	e0bffc8d 	sth	r2,-14(fp)
		if (inc >= 250 || state[s].RX_RSR == 0) {
 40061dc:	e0bffc8b 	ldhu	r2,-14(fp)
 40061e0:	10803ea8 	cmpgeui	r2,r2,250
 40061e4:	1000081e 	bne	r2,zero,4006208 <_ZN13EthernetClass10socketRecvEhPhs+0x228>
 40061e8:	e0fffd03 	ldbu	r3,-12(fp)
 40061ec:	008100f4 	movhi	r2,1027
 40061f0:	10a3a504 	addi	r2,r2,-29036
 40061f4:	180690fa 	slli	r3,r3,3
 40061f8:	10c5883a 	add	r2,r2,r3
 40061fc:	1080000b 	ldhu	r2,0(r2)
 4006200:	10bfffcc 	andi	r2,r2,65535
 4006204:	1000111e 	bne	r2,zero,400624c <_ZN13EthernetClass10socketRecvEhPhs+0x26c>
			state[s].RX_inc = 0;
 4006208:	e0fffd03 	ldbu	r3,-12(fp)
 400620c:	008100f4 	movhi	r2,1027
 4006210:	10a3a504 	addi	r2,r2,-29036
 4006214:	180690fa 	slli	r3,r3,3
 4006218:	10c5883a 	add	r2,r2,r3
 400621c:	10800184 	addi	r2,r2,6
 4006220:	10000005 	stb	zero,0(r2)
			W5100.writeSnRX_RD(s, ptr);
 4006224:	e0bffd03 	ldbu	r2,-12(fp)
 4006228:	e0fffc0b 	ldhu	r3,-16(fp)
 400622c:	180b883a 	mov	r5,r3
 4006230:	1009883a 	mov	r4,r2
 4006234:	4006fe00 	call	4006fe0 <_ZN10W5100Class12writeSnRX_RDEht>
			W5100.execCmdSn(s, Sock_RECV);
 4006238:	e0bffd03 	ldbu	r2,-12(fp)
 400623c:	01401004 	movi	r5,64
 4006240:	1009883a 	mov	r4,r2
 4006244:	4007ed00 	call	4007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>
 4006248:	00000906 	br	4006270 <_ZN13EthernetClass10socketRecvEhPhs+0x290>
			//Serial.printf("Sock_RECV cmd, RX_RD=%d, RX_RSR=%d\n",
			//  state[s].RX_RD, state[s].RX_RSR);
		} else {
			state[s].RX_inc = inc;
 400624c:	e0fffd03 	ldbu	r3,-12(fp)
 4006250:	e0bffc8b 	ldhu	r2,-14(fp)
 4006254:	1009883a 	mov	r4,r2
 4006258:	008100f4 	movhi	r2,1027
 400625c:	10a3a504 	addi	r2,r2,-29036
 4006260:	180690fa 	slli	r3,r3,3
 4006264:	10c5883a 	add	r2,r2,r3
 4006268:	10800184 	addi	r2,r2,6
 400626c:	11000005 	stb	r4,0(r2)
		}
	}
	SPI_endTransaction();
 4006270:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	//Serial.printf("socketRecv, ret=%d\n", ret);
	return ret;
 4006274:	e0bffa17 	ldw	r2,-24(fp)
}
 4006278:	e037883a 	mov	sp,fp
 400627c:	dfc00117 	ldw	ra,4(sp)
 4006280:	df000017 	ldw	fp,0(sp)
 4006284:	dec00204 	addi	sp,sp,8
 4006288:	f800283a 	ret

0400628c <_ZN13EthernetClass19socketRecvAvailableEh>:

uint16_t EthernetClass::socketRecvAvailable(uint8_t s)
{
 400628c:	defffc04 	addi	sp,sp,-16
 4006290:	dfc00315 	stw	ra,12(sp)
 4006294:	df000215 	stw	fp,8(sp)
 4006298:	df000204 	addi	fp,sp,8
 400629c:	2005883a 	mov	r2,r4
 40062a0:	e0bfff05 	stb	r2,-4(fp)
	uint16_t ret = state[s].RX_RSR;
 40062a4:	e0ffff03 	ldbu	r3,-4(fp)
 40062a8:	008100f4 	movhi	r2,1027
 40062ac:	10a3a504 	addi	r2,r2,-29036
 40062b0:	180690fa 	slli	r3,r3,3
 40062b4:	10c5883a 	add	r2,r2,r3
 40062b8:	1080000b 	ldhu	r2,0(r2)
 40062bc:	e0bffe0d 	sth	r2,-8(fp)
	if (ret == 0) {
 40062c0:	e0bffe0b 	ldhu	r2,-8(fp)
 40062c4:	1000191e 	bne	r2,zero,400632c <_ZN13EthernetClass19socketRecvAvailableEh+0xa0>
		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 40062c8:	0009883a 	mov	r4,zero
 40062cc:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
		uint16_t rsr = getSnRX_RSR(s);
 40062d0:	e0bfff03 	ldbu	r2,-4(fp)
 40062d4:	1009883a 	mov	r4,r2
 40062d8:	4005e580 	call	4005e58 <_ZL11getSnRX_RSRh>
 40062dc:	e0bffe8d 	sth	r2,-6(fp)
		SPI_endTransaction();
 40062e0:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
		ret = rsr - state[s].RX_inc;
 40062e4:	e0ffff03 	ldbu	r3,-4(fp)
 40062e8:	008100f4 	movhi	r2,1027
 40062ec:	10a3a504 	addi	r2,r2,-29036
 40062f0:	180690fa 	slli	r3,r3,3
 40062f4:	10c5883a 	add	r2,r2,r3
 40062f8:	10800184 	addi	r2,r2,6
 40062fc:	10800003 	ldbu	r2,0(r2)
 4006300:	10803fcc 	andi	r2,r2,255
 4006304:	e0fffe8b 	ldhu	r3,-6(fp)
 4006308:	1885c83a 	sub	r2,r3,r2
 400630c:	e0bffe0d 	sth	r2,-8(fp)
		state[s].RX_RSR = ret;
 4006310:	e0ffff03 	ldbu	r3,-4(fp)
 4006314:	008100f4 	movhi	r2,1027
 4006318:	10a3a504 	addi	r2,r2,-29036
 400631c:	180690fa 	slli	r3,r3,3
 4006320:	10c5883a 	add	r2,r2,r3
 4006324:	e0fffe0b 	ldhu	r3,-8(fp)
 4006328:	10c0000d 	sth	r3,0(r2)
		//Serial.printf("sockRecvAvailable s=%d, RX_RSR=%d\n", s, ret);
	}
	return ret;
 400632c:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4006330:	e037883a 	mov	sp,fp
 4006334:	dfc00117 	ldw	ra,4(sp)
 4006338:	df000017 	ldw	fp,0(sp)
 400633c:	dec00204 	addi	sp,sp,8
 4006340:	f800283a 	ret

04006344 <_ZN13EthernetClass10socketPeekEh>:

// get the first byte in the receive queue (no checking)
//
uint8_t EthernetClass::socketPeek(uint8_t s)
{
 4006344:	defffb04 	addi	sp,sp,-20
 4006348:	dfc00415 	stw	ra,16(sp)
 400634c:	df000315 	stw	fp,12(sp)
 4006350:	dc000215 	stw	r16,8(sp)
 4006354:	df000304 	addi	fp,sp,12
 4006358:	2005883a 	mov	r2,r4
 400635c:	e0bffe05 	stb	r2,-8(fp)
	uint8_t b;
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4006360:	0009883a 	mov	r4,zero
 4006364:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	uint16_t ptr = state[s].RX_RD;
 4006368:	e0fffe03 	ldbu	r3,-8(fp)
 400636c:	008100f4 	movhi	r2,1027
 4006370:	10a3a504 	addi	r2,r2,-29036
 4006374:	180690fa 	slli	r3,r3,3
 4006378:	10c5883a 	add	r2,r2,r3
 400637c:	10800084 	addi	r2,r2,2
 4006380:	1080000b 	ldhu	r2,0(r2)
 4006384:	e0bffd0d 	sth	r2,-12(fp)
	W5100.read((ptr & W5100.SMASK) + W5100.RBASE(s), &b, 1);
 4006388:	e0bffd0b 	ldhu	r2,-12(fp)
 400638c:	1081ffcc 	andi	r2,r2,2047
 4006390:	1021883a 	mov	r16,r2
 4006394:	e0bffe03 	ldbu	r2,-8(fp)
 4006398:	1009883a 	mov	r4,r2
 400639c:	40070f40 	call	40070f4 <_ZN10W5100Class5RBASEEh>
 40063a0:	8085883a 	add	r2,r16,r2
 40063a4:	10bfffcc 	andi	r2,r2,65535
 40063a8:	e0fffd84 	addi	r3,fp,-10
 40063ac:	01800044 	movi	r6,1
 40063b0:	180b883a 	mov	r5,r3
 40063b4:	1009883a 	mov	r4,r2
 40063b8:	4007d8c0 	call	4007d8c <_ZN10W5100Class4readEtPht>
	SPI_endTransaction();
 40063bc:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return b;
 40063c0:	e0bffd83 	ldbu	r2,-10(fp)
}
 40063c4:	e6ffff04 	addi	sp,fp,-4
 40063c8:	dfc00217 	ldw	ra,8(sp)
 40063cc:	df000117 	ldw	fp,4(sp)
 40063d0:	dc000017 	ldw	r16,0(sp)
 40063d4:	dec00304 	addi	sp,sp,12
 40063d8:	f800283a 	ret

040063dc <_ZL11getSnTX_FSRh>:
/*****************************************/
/*    Socket Data Transmit Functions     */
/*****************************************/

static uint16_t getSnTX_FSR(uint8_t s)
{
 40063dc:	defffc04 	addi	sp,sp,-16
 40063e0:	dfc00315 	stw	ra,12(sp)
 40063e4:	df000215 	stw	fp,8(sp)
 40063e8:	df000204 	addi	fp,sp,8
 40063ec:	2005883a 	mov	r2,r4
 40063f0:	e0bfff05 	stb	r2,-4(fp)
        uint16_t val, prev;

        prev = W5100.readSnTX_FSR(s);
 40063f4:	e0bfff03 	ldbu	r2,-4(fp)
 40063f8:	1009883a 	mov	r4,r2
 40063fc:	4006e5c0 	call	4006e5c <_ZN10W5100Class12readSnTX_FSREh>
 4006400:	e0bffe0d 	sth	r2,-8(fp)
        while (1) {
                val = W5100.readSnTX_FSR(s);
 4006404:	e0bfff03 	ldbu	r2,-4(fp)
 4006408:	1009883a 	mov	r4,r2
 400640c:	4006e5c0 	call	4006e5c <_ZN10W5100Class12readSnTX_FSREh>
 4006410:	e0bffe8d 	sth	r2,-6(fp)
                if (val == prev) {
 4006414:	e0fffe8b 	ldhu	r3,-6(fp)
 4006418:	e0bffe0b 	ldhu	r2,-8(fp)
 400641c:	18800a1e 	bne	r3,r2,4006448 <_ZL11getSnTX_FSRh+0x6c>
			state[s].TX_FSR = val;
 4006420:	e0ffff03 	ldbu	r3,-4(fp)
 4006424:	008100f4 	movhi	r2,1027
 4006428:	10a3a504 	addi	r2,r2,-29036
 400642c:	180690fa 	slli	r3,r3,3
 4006430:	10c5883a 	add	r2,r2,r3
 4006434:	10800104 	addi	r2,r2,4
 4006438:	e0fffe8b 	ldhu	r3,-6(fp)
 400643c:	10c0000d 	sth	r3,0(r2)
			return val;
 4006440:	e0bffe8b 	ldhu	r2,-6(fp)
 4006444:	00000306 	br	4006454 <_ZL11getSnTX_FSRh+0x78>
		}
                prev = val;
 4006448:	e0bffe8b 	ldhu	r2,-6(fp)
 400644c:	e0bffe0d 	sth	r2,-8(fp)
static uint16_t getSnTX_FSR(uint8_t s)
{
        uint16_t val, prev;

        prev = W5100.readSnTX_FSR(s);
        while (1) {
 4006450:	003fec06 	br	4006404 <__alt_data_end+0xfc006404>
			state[s].TX_FSR = val;
			return val;
		}
                prev = val;
        }
}
 4006454:	e037883a 	mov	sp,fp
 4006458:	dfc00117 	ldw	ra,4(sp)
 400645c:	df000017 	ldw	fp,0(sp)
 4006460:	dec00204 	addi	sp,sp,8
 4006464:	f800283a 	ret

04006468 <_ZL10write_datahtPKht>:


static void write_data(uint8_t s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
 4006468:	defff804 	addi	sp,sp,-32
 400646c:	dfc00715 	stw	ra,28(sp)
 4006470:	df000615 	stw	fp,24(sp)
 4006474:	df000604 	addi	fp,sp,24
 4006478:	2807883a 	mov	r3,r5
 400647c:	e1bffe15 	stw	r6,-8(fp)
 4006480:	3805883a 	mov	r2,r7
 4006484:	e13ffc05 	stb	r4,-16(fp)
 4006488:	e0fffd0d 	sth	r3,-12(fp)
 400648c:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t ptr = W5100.readSnTX_WR(s);
 4006490:	e0bffc03 	ldbu	r2,-16(fp)
 4006494:	1009883a 	mov	r4,r2
 4006498:	4006f200 	call	4006f20 <_ZN10W5100Class11readSnTX_WREh>
 400649c:	e0bffa0d 	sth	r2,-24(fp)
	ptr += data_offset;
 40064a0:	e0fffa0b 	ldhu	r3,-24(fp)
 40064a4:	e0bffd0b 	ldhu	r2,-12(fp)
 40064a8:	1885883a 	add	r2,r3,r2
 40064ac:	e0bffa0d 	sth	r2,-24(fp)
	uint16_t offset = ptr & W5100.SMASK;
 40064b0:	e0bffa0b 	ldhu	r2,-24(fp)
 40064b4:	1081ffcc 	andi	r2,r2,2047
 40064b8:	e0bffa8d 	sth	r2,-22(fp)
	uint16_t dstAddr = offset + W5100.SBASE(s);
 40064bc:	e0bffc03 	ldbu	r2,-16(fp)
 40064c0:	1009883a 	mov	r4,r2
 40064c4:	40070a40 	call	40070a4 <_ZN10W5100Class5SBASEEh>
 40064c8:	1007883a 	mov	r3,r2
 40064cc:	e0bffa8b 	ldhu	r2,-22(fp)
 40064d0:	1885883a 	add	r2,r3,r2
 40064d4:	e0bffb0d 	sth	r2,-20(fp)

	if (W5100.hasOffsetAddressMapping() || offset + len <= W5100.SSIZE) {
 40064d8:	40071440 	call	4007144 <_ZN10W5100Class23hasOffsetAddressMappingEv>
 40064dc:	10803fcc 	andi	r2,r2,255
 40064e0:	1000051e 	bne	r2,zero,40064f8 <_ZL10write_datahtPKht+0x90>
 40064e4:	e0fffa8b 	ldhu	r3,-22(fp)
 40064e8:	e0bfff0b 	ldhu	r2,-4(fp)
 40064ec:	1885883a 	add	r2,r3,r2
 40064f0:	10820048 	cmpgei	r2,r2,2049
 40064f4:	1000021e 	bne	r2,zero,4006500 <_ZL10write_datahtPKht+0x98>
 40064f8:	00800044 	movi	r2,1
 40064fc:	00000106 	br	4006504 <_ZL10write_datahtPKht+0x9c>
 4006500:	0005883a 	mov	r2,zero
 4006504:	10803fcc 	andi	r2,r2,255
 4006508:	10000726 	beq	r2,zero,4006528 <_ZL10write_datahtPKht+0xc0>
		W5100.write(dstAddr, data, len);
 400650c:	e0bffb0b 	ldhu	r2,-20(fp)
 4006510:	e0ffff0b 	ldhu	r3,-4(fp)
 4006514:	180d883a 	mov	r6,r3
 4006518:	e17ffe17 	ldw	r5,-8(fp)
 400651c:	1009883a 	mov	r4,r2
 4006520:	4007bb40 	call	4007bb4 <_ZN10W5100Class5writeEtPKht>
 4006524:	00001706 	br	4006584 <_ZL10write_datahtPKht+0x11c>
	} else {
		// Wrap around circular buffer
		uint16_t size = W5100.SSIZE - offset;
 4006528:	e0bffa8b 	ldhu	r2,-22(fp)
 400652c:	00c20004 	movi	r3,2048
 4006530:	1885c83a 	sub	r2,r3,r2
 4006534:	e0bffb8d 	sth	r2,-18(fp)
		W5100.write(dstAddr, data, size);
 4006538:	e0bffb0b 	ldhu	r2,-20(fp)
 400653c:	e0fffb8b 	ldhu	r3,-18(fp)
 4006540:	180d883a 	mov	r6,r3
 4006544:	e17ffe17 	ldw	r5,-8(fp)
 4006548:	1009883a 	mov	r4,r2
 400654c:	4007bb40 	call	4007bb4 <_ZN10W5100Class5writeEtPKht>
		W5100.write(W5100.SBASE(s), data + size, len - size);
 4006550:	e0bffc03 	ldbu	r2,-16(fp)
 4006554:	1009883a 	mov	r4,r2
 4006558:	40070a40 	call	40070a4 <_ZN10W5100Class5SBASEEh>
 400655c:	113fffcc 	andi	r4,r2,65535
 4006560:	e0bffb8b 	ldhu	r2,-18(fp)
 4006564:	e0fffe17 	ldw	r3,-8(fp)
 4006568:	188b883a 	add	r5,r3,r2
 400656c:	e0ffff0b 	ldhu	r3,-4(fp)
 4006570:	e0bffb8b 	ldhu	r2,-18(fp)
 4006574:	1885c83a 	sub	r2,r3,r2
 4006578:	10bfffcc 	andi	r2,r2,65535
 400657c:	100d883a 	mov	r6,r2
 4006580:	4007bb40 	call	4007bb4 <_ZN10W5100Class5writeEtPKht>
	}
	ptr += len;
 4006584:	e0fffa0b 	ldhu	r3,-24(fp)
 4006588:	e0bfff0b 	ldhu	r2,-4(fp)
 400658c:	1885883a 	add	r2,r3,r2
 4006590:	e0bffa0d 	sth	r2,-24(fp)
	W5100.writeSnTX_WR(s, ptr);
 4006594:	e0bffc03 	ldbu	r2,-16(fp)
 4006598:	e0fffa0b 	ldhu	r3,-24(fp)
 400659c:	180b883a 	mov	r5,r3
 40065a0:	1009883a 	mov	r4,r2
 40065a4:	4006ebc0 	call	4006ebc <_ZN10W5100Class12writeSnTX_WREht>
}
 40065a8:	0001883a 	nop
 40065ac:	e037883a 	mov	sp,fp
 40065b0:	dfc00117 	ldw	ra,4(sp)
 40065b4:	df000017 	ldw	fp,0(sp)
 40065b8:	dec00204 	addi	sp,sp,8
 40065bc:	f800283a 	ret

040065c0 <_ZN13EthernetClass10socketSendEhPKht>:
/**
 * @brief	This function used to send the data in TCP mode
 * @return	1 for success else 0.
 */
uint16_t EthernetClass::socketSend(uint8_t s, const uint8_t * buf, uint16_t len)
{
 40065c0:	defff904 	addi	sp,sp,-28
 40065c4:	dfc00615 	stw	ra,24(sp)
 40065c8:	df000515 	stw	fp,20(sp)
 40065cc:	df000504 	addi	fp,sp,20
 40065d0:	2007883a 	mov	r3,r4
 40065d4:	e17ffe15 	stw	r5,-8(fp)
 40065d8:	3005883a 	mov	r2,r6
 40065dc:	e0fffd05 	stb	r3,-12(fp)
 40065e0:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t status=0;
 40065e4:	e03ffb85 	stb	zero,-18(fp)
	uint16_t ret=0;
 40065e8:	e03ffb0d 	sth	zero,-20(fp)
	uint16_t freesize=0;
 40065ec:	e03ffc0d 	sth	zero,-16(fp)

	if (len > W5100.SSIZE) {
 40065f0:	e0bfff0b 	ldhu	r2,-4(fp)
 40065f4:	10820070 	cmpltui	r2,r2,2049
 40065f8:	1000031e 	bne	r2,zero,4006608 <_ZN13EthernetClass10socketSendEhPKht+0x48>
		ret = W5100.SSIZE; // check size not to exceed MAX size.
 40065fc:	00820004 	movi	r2,2048
 4006600:	e0bffb0d 	sth	r2,-20(fp)
 4006604:	00000206 	br	4006610 <_ZN13EthernetClass10socketSendEhPKht+0x50>
	} else {
		ret = len;
 4006608:	e0bfff0b 	ldhu	r2,-4(fp)
 400660c:	e0bffb0d 	sth	r2,-20(fp)
	}

	// if freebuf is available, start.
	do {
		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4006610:	0009883a 	mov	r4,zero
 4006614:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
		freesize = getSnTX_FSR(s);
 4006618:	e0bffd03 	ldbu	r2,-12(fp)
 400661c:	1009883a 	mov	r4,r2
 4006620:	40063dc0 	call	40063dc <_ZL11getSnTX_FSRh>
 4006624:	e0bffc0d 	sth	r2,-16(fp)
		status = W5100.readSnSR(s);
 4006628:	e0bffd03 	ldbu	r2,-12(fp)
 400662c:	1009883a 	mov	r4,r2
 4006630:	4006cc80 	call	4006cc8 <_ZN10W5100Class8readSnSREh>
 4006634:	e0bffb85 	stb	r2,-18(fp)
		SPI_endTransaction();
 4006638:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
		if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT)) {
 400663c:	e0bffb83 	ldbu	r2,-18(fp)
 4006640:	108005e0 	cmpeqi	r2,r2,23
 4006644:	1000051e 	bne	r2,zero,400665c <_ZN13EthernetClass10socketSendEhPKht+0x9c>
 4006648:	e0bffb83 	ldbu	r2,-18(fp)
 400664c:	10800720 	cmpeqi	r2,r2,28
 4006650:	1000021e 	bne	r2,zero,400665c <_ZN13EthernetClass10socketSendEhPKht+0x9c>
			ret = 0;
 4006654:	e03ffb0d 	sth	zero,-20(fp)
			break;
 4006658:	00000406 	br	400666c <_ZN13EthernetClass10socketSendEhPKht+0xac>
		}
		yield();
	} while (freesize < ret);
 400665c:	e0fffc0b 	ldhu	r3,-16(fp)
 4006660:	e0bffb0b 	ldhu	r2,-20(fp)
 4006664:	1880012e 	bgeu	r3,r2,400666c <_ZN13EthernetClass10socketSendEhPKht+0xac>
	} else {
		ret = len;
	}

	// if freebuf is available, start.
	do {
 4006668:	003fe906 	br	4006610 <__alt_data_end+0xfc006610>
		}
		yield();
	} while (freesize < ret);

	// copy data
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 400666c:	0009883a 	mov	r4,zero
 4006670:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	write_data(s, 0, (uint8_t *)buf, ret);
 4006674:	e0bffd03 	ldbu	r2,-12(fp)
 4006678:	e0fffb0b 	ldhu	r3,-20(fp)
 400667c:	180f883a 	mov	r7,r3
 4006680:	e1bffe17 	ldw	r6,-8(fp)
 4006684:	000b883a 	mov	r5,zero
 4006688:	1009883a 	mov	r4,r2
 400668c:	40064680 	call	4006468 <_ZL10write_datahtPKht>
	W5100.execCmdSn(s, Sock_SEND);
 4006690:	e0bffd03 	ldbu	r2,-12(fp)
 4006694:	01400804 	movi	r5,32
 4006698:	1009883a 	mov	r4,r2
 400669c:	4007ed00 	call	4007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>

	/* +2008.01 bj */
	while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) {
 40066a0:	e0bffd03 	ldbu	r2,-12(fp)
 40066a4:	1009883a 	mov	r4,r2
 40066a8:	4006c8c0 	call	4006c8c <_ZN10W5100Class8readSnIREh>
 40066ac:	10803fcc 	andi	r2,r2,255
 40066b0:	1080040c 	andi	r2,r2,16
 40066b4:	1005003a 	cmpeq	r2,r2,zero
 40066b8:	10803fcc 	andi	r2,r2,255
 40066bc:	10000e26 	beq	r2,zero,40066f8 <_ZN13EthernetClass10socketSendEhPKht+0x138>
		/* m2008.01 [bj] : reduce code */
		if ( W5100.readSnSR(s) == SnSR::CLOSED ) {
 40066c0:	e0bffd03 	ldbu	r2,-12(fp)
 40066c4:	1009883a 	mov	r4,r2
 40066c8:	4006cc80 	call	4006cc8 <_ZN10W5100Class8readSnSREh>
 40066cc:	10803fcc 	andi	r2,r2,255
 40066d0:	1005003a 	cmpeq	r2,r2,zero
 40066d4:	10803fcc 	andi	r2,r2,255
 40066d8:	10000326 	beq	r2,zero,40066e8 <_ZN13EthernetClass10socketSendEhPKht+0x128>
			SPI_endTransaction();
 40066dc:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
			return 0;
 40066e0:	0005883a 	mov	r2,zero
 40066e4:	00000a06 	br	4006710 <_ZN13EthernetClass10socketSendEhPKht+0x150>
		}
		SPI_endTransaction();
 40066e8:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
		yield();
		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 40066ec:	0009883a 	mov	r4,zero
 40066f0:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	write_data(s, 0, (uint8_t *)buf, ret);
	W5100.execCmdSn(s, Sock_SEND);

	/* +2008.01 bj */
	while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) {
 40066f4:	003fea06 	br	40066a0 <__alt_data_end+0xfc0066a0>
		SPI_endTransaction();
		yield();
		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	}
	/* +2008.01 bj */
	W5100.writeSnIR(s, SnIR::SEND_OK);
 40066f8:	e0bffd03 	ldbu	r2,-12(fp)
 40066fc:	01400404 	movi	r5,16
 4006700:	1009883a 	mov	r4,r2
 4006704:	4006c3c0 	call	4006c3c <_ZN10W5100Class9writeSnIREhh>
	SPI_endTransaction();
 4006708:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return ret;
 400670c:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4006710:	e037883a 	mov	sp,fp
 4006714:	dfc00117 	ldw	ra,4(sp)
 4006718:	df000017 	ldw	fp,0(sp)
 400671c:	dec00204 	addi	sp,sp,8
 4006720:	f800283a 	ret

04006724 <_ZN13EthernetClass19socketSendAvailableEh>:

uint16_t EthernetClass::socketSendAvailable(uint8_t s)
{
 4006724:	defffc04 	addi	sp,sp,-16
 4006728:	dfc00315 	stw	ra,12(sp)
 400672c:	df000215 	stw	fp,8(sp)
 4006730:	df000204 	addi	fp,sp,8
 4006734:	2005883a 	mov	r2,r4
 4006738:	e0bfff05 	stb	r2,-4(fp)
	uint8_t status=0;
 400673c:	e03ffe05 	stb	zero,-8(fp)
	uint16_t freesize=0;
 4006740:	e03ffe8d 	sth	zero,-6(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4006744:	0009883a 	mov	r4,zero
 4006748:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	freesize = getSnTX_FSR(s);
 400674c:	e0bfff03 	ldbu	r2,-4(fp)
 4006750:	1009883a 	mov	r4,r2
 4006754:	40063dc0 	call	40063dc <_ZL11getSnTX_FSRh>
 4006758:	e0bffe8d 	sth	r2,-6(fp)
	status = W5100.readSnSR(s);
 400675c:	e0bfff03 	ldbu	r2,-4(fp)
 4006760:	1009883a 	mov	r4,r2
 4006764:	4006cc80 	call	4006cc8 <_ZN10W5100Class8readSnSREh>
 4006768:	e0bffe05 	stb	r2,-8(fp)
	SPI_endTransaction();
 400676c:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	if ((status == SnSR::ESTABLISHED) || (status == SnSR::CLOSE_WAIT)) {
 4006770:	e0bffe03 	ldbu	r2,-8(fp)
 4006774:	108005e0 	cmpeqi	r2,r2,23
 4006778:	1000031e 	bne	r2,zero,4006788 <_ZN13EthernetClass19socketSendAvailableEh+0x64>
 400677c:	e0bffe03 	ldbu	r2,-8(fp)
 4006780:	10800718 	cmpnei	r2,r2,28
 4006784:	1000021e 	bne	r2,zero,4006790 <_ZN13EthernetClass19socketSendAvailableEh+0x6c>
		return freesize;
 4006788:	e0bffe8b 	ldhu	r2,-6(fp)
 400678c:	00000106 	br	4006794 <_ZN13EthernetClass19socketSendAvailableEh+0x70>
	}
	return 0;
 4006790:	0005883a 	mov	r2,zero
}
 4006794:	e037883a 	mov	sp,fp
 4006798:	dfc00117 	ldw	ra,4(sp)
 400679c:	df000017 	ldw	fp,0(sp)
 40067a0:	dec00204 	addi	sp,sp,8
 40067a4:	f800283a 	ret

040067a8 <_ZN13EthernetClass16socketBufferDataEhtPKht>:

uint16_t EthernetClass::socketBufferData(uint8_t s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
 40067a8:	defff904 	addi	sp,sp,-28
 40067ac:	dfc00615 	stw	ra,24(sp)
 40067b0:	df000515 	stw	fp,20(sp)
 40067b4:	df000504 	addi	fp,sp,20
 40067b8:	2807883a 	mov	r3,r5
 40067bc:	e1bffe15 	stw	r6,-8(fp)
 40067c0:	3805883a 	mov	r2,r7
 40067c4:	e13ffc05 	stb	r4,-16(fp)
 40067c8:	e0fffd0d 	sth	r3,-12(fp)
 40067cc:	e0bfff0d 	sth	r2,-4(fp)
	//Serial.printf("  bufferData, offset=%d, len=%d\n", offset, len);
	uint16_t ret =0;
 40067d0:	e03ffb0d 	sth	zero,-20(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 40067d4:	0009883a 	mov	r4,zero
 40067d8:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	uint16_t txfree = getSnTX_FSR(s);
 40067dc:	e0bffc03 	ldbu	r2,-16(fp)
 40067e0:	1009883a 	mov	r4,r2
 40067e4:	40063dc0 	call	40063dc <_ZL11getSnTX_FSRh>
 40067e8:	e0bffb8d 	sth	r2,-18(fp)
	if (len > txfree) {
 40067ec:	e0bfff0b 	ldhu	r2,-4(fp)
 40067f0:	e0fffb8b 	ldhu	r3,-18(fp)
 40067f4:	1880032e 	bgeu	r3,r2,4006804 <_ZN13EthernetClass16socketBufferDataEhtPKht+0x5c>
		ret = txfree; // check size not to exceed MAX size.
 40067f8:	e0bffb8b 	ldhu	r2,-18(fp)
 40067fc:	e0bffb0d 	sth	r2,-20(fp)
 4006800:	00000206 	br	400680c <_ZN13EthernetClass16socketBufferDataEhtPKht+0x64>
	} else {
		ret = len;
 4006804:	e0bfff0b 	ldhu	r2,-4(fp)
 4006808:	e0bffb0d 	sth	r2,-20(fp)
	}
	write_data(s, offset, buf, ret);
 400680c:	e0bffc03 	ldbu	r2,-16(fp)
 4006810:	e0fffd0b 	ldhu	r3,-12(fp)
 4006814:	e13ffb0b 	ldhu	r4,-20(fp)
 4006818:	200f883a 	mov	r7,r4
 400681c:	e1bffe17 	ldw	r6,-8(fp)
 4006820:	180b883a 	mov	r5,r3
 4006824:	1009883a 	mov	r4,r2
 4006828:	40064680 	call	4006468 <_ZL10write_datahtPKht>
	SPI_endTransaction();
 400682c:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return ret;
 4006830:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4006834:	e037883a 	mov	sp,fp
 4006838:	dfc00117 	ldw	ra,4(sp)
 400683c:	df000017 	ldw	fp,0(sp)
 4006840:	dec00204 	addi	sp,sp,8
 4006844:	f800283a 	ret

04006848 <_ZN13EthernetClass14socketStartUDPEhPht>:

bool EthernetClass::socketStartUDP(uint8_t s, uint8_t* addr, uint16_t port)
{
 4006848:	defffb04 	addi	sp,sp,-20
 400684c:	dfc00415 	stw	ra,16(sp)
 4006850:	df000315 	stw	fp,12(sp)
 4006854:	df000304 	addi	fp,sp,12
 4006858:	2007883a 	mov	r3,r4
 400685c:	e17ffe15 	stw	r5,-8(fp)
 4006860:	3005883a 	mov	r2,r6
 4006864:	e0fffd05 	stb	r3,-12(fp)
 4006868:	e0bfff0d 	sth	r2,-4(fp)
	if ( ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
 400686c:	e0bffe17 	ldw	r2,-8(fp)
 4006870:	10800003 	ldbu	r2,0(r2)
 4006874:	10803fcc 	andi	r2,r2,255
 4006878:	10000f1e 	bne	r2,zero,40068b8 <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 400687c:	e0bffe17 	ldw	r2,-8(fp)
 4006880:	10800044 	addi	r2,r2,1
 4006884:	10800003 	ldbu	r2,0(r2)
 4006888:	10803fcc 	andi	r2,r2,255
 400688c:	10000a1e 	bne	r2,zero,40068b8 <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 4006890:	e0bffe17 	ldw	r2,-8(fp)
 4006894:	10800084 	addi	r2,r2,2
 4006898:	10800003 	ldbu	r2,0(r2)
 400689c:	10803fcc 	andi	r2,r2,255
 40068a0:	1000051e 	bne	r2,zero,40068b8 <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 40068a4:	e0bffe17 	ldw	r2,-8(fp)
 40068a8:	108000c4 	addi	r2,r2,3
 40068ac:	10800003 	ldbu	r2,0(r2)
 40068b0:	10803fcc 	andi	r2,r2,255
 40068b4:	10000226 	beq	r2,zero,40068c0 <_ZN13EthernetClass14socketStartUDPEhPht+0x78>
 40068b8:	e0bfff0b 	ldhu	r2,-4(fp)
 40068bc:	1000021e 	bne	r2,zero,40068c8 <_ZN13EthernetClass14socketStartUDPEhPht+0x80>
	  ((port == 0x00)) ) {
		return false;
 40068c0:	0005883a 	mov	r2,zero
 40068c4:	00000d06 	br	40068fc <_ZN13EthernetClass14socketStartUDPEhPht+0xb4>
	}
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 40068c8:	0009883a 	mov	r4,zero
 40068cc:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.writeSnDIPR(s, addr);
 40068d0:	e0bffd03 	ldbu	r2,-12(fp)
 40068d4:	e17ffe17 	ldw	r5,-8(fp)
 40068d8:	1009883a 	mov	r4,r2
 40068dc:	4006db00 	call	4006db0 <_ZN10W5100Class11writeSnDIPREhPh>
	W5100.writeSnDPORT(s, port);
 40068e0:	e0bffd03 	ldbu	r2,-12(fp)
 40068e4:	e0ffff0b 	ldhu	r3,-4(fp)
 40068e8:	180b883a 	mov	r5,r3
 40068ec:	1009883a 	mov	r4,r2
 40068f0:	4006df80 	call	4006df8 <_ZN10W5100Class12writeSnDPORTEht>
	SPI_endTransaction();
 40068f4:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	return true;
 40068f8:	00800044 	movi	r2,1
}
 40068fc:	e037883a 	mov	sp,fp
 4006900:	dfc00117 	ldw	ra,4(sp)
 4006904:	df000017 	ldw	fp,0(sp)
 4006908:	dec00204 	addi	sp,sp,8
 400690c:	f800283a 	ret

04006910 <_ZN13EthernetClass13socketSendUDPEh>:

bool EthernetClass::socketSendUDP(uint8_t s)
{
 4006910:	defffd04 	addi	sp,sp,-12
 4006914:	dfc00215 	stw	ra,8(sp)
 4006918:	df000115 	stw	fp,4(sp)
 400691c:	df000104 	addi	fp,sp,4
 4006920:	2005883a 	mov	r2,r4
 4006924:	e0bfff05 	stb	r2,-4(fp)
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4006928:	0009883a 	mov	r4,zero
 400692c:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
	W5100.execCmdSn(s, Sock_SEND);
 4006930:	e0bfff03 	ldbu	r2,-4(fp)
 4006934:	01400804 	movi	r5,32
 4006938:	1009883a 	mov	r4,r2
 400693c:	4007ed00 	call	4007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>

	/* +2008.01 bj */
	while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) {
 4006940:	e0bfff03 	ldbu	r2,-4(fp)
 4006944:	1009883a 	mov	r4,r2
 4006948:	4006c8c0 	call	4006c8c <_ZN10W5100Class8readSnIREh>
 400694c:	10803fcc 	andi	r2,r2,255
 4006950:	1080040c 	andi	r2,r2,16
 4006954:	1005003a 	cmpeq	r2,r2,zero
 4006958:	10803fcc 	andi	r2,r2,255
 400695c:	10001326 	beq	r2,zero,40069ac <_ZN13EthernetClass13socketSendUDPEh+0x9c>
		if (W5100.readSnIR(s) & SnIR::TIMEOUT) {
 4006960:	e0bfff03 	ldbu	r2,-4(fp)
 4006964:	1009883a 	mov	r4,r2
 4006968:	4006c8c0 	call	4006c8c <_ZN10W5100Class8readSnIREh>
 400696c:	10803fcc 	andi	r2,r2,255
 4006970:	1080020c 	andi	r2,r2,8
 4006974:	1004c03a 	cmpne	r2,r2,zero
 4006978:	10803fcc 	andi	r2,r2,255
 400697c:	10000726 	beq	r2,zero,400699c <_ZN13EthernetClass13socketSendUDPEh+0x8c>
			/* +2008.01 [bj]: clear interrupt */
			W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
 4006980:	e0bfff03 	ldbu	r2,-4(fp)
 4006984:	01400604 	movi	r5,24
 4006988:	1009883a 	mov	r4,r2
 400698c:	4006c3c0 	call	4006c3c <_ZN10W5100Class9writeSnIREhh>
			SPI_endTransaction();
 4006990:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
			//Serial.printf("sendUDP timeout\n");
			return false;
 4006994:	0005883a 	mov	r2,zero
 4006998:	00000a06 	br	40069c4 <_ZN13EthernetClass13socketSendUDPEh+0xb4>
		}
		SPI_endTransaction();
 400699c:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
		yield();
		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 40069a0:	0009883a 	mov	r4,zero
 40069a4:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
{
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.execCmdSn(s, Sock_SEND);

	/* +2008.01 bj */
	while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) {
 40069a8:	003fe506 	br	4006940 <__alt_data_end+0xfc006940>
		yield();
		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	}

	/* +2008.01 bj */
	W5100.writeSnIR(s, SnIR::SEND_OK);
 40069ac:	e0bfff03 	ldbu	r2,-4(fp)
 40069b0:	01400404 	movi	r5,16
 40069b4:	1009883a 	mov	r4,r2
 40069b8:	4006c3c0 	call	4006c3c <_ZN10W5100Class9writeSnIREhh>
	SPI_endTransaction();
 40069bc:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>

	//Serial.printf("sendUDP ok\n");
	/* Sent ok */
	return true;
 40069c0:	00800044 	movi	r2,1
}
 40069c4:	e037883a 	mov	sp,fp
 40069c8:	dfc00117 	ldw	ra,4(sp)
 40069cc:	df000017 	ldw	fp,0(sp)
 40069d0:	dec00204 	addi	sp,sp,8
 40069d4:	f800283a 	ret

040069d8 <_Z41__static_initialization_and_destruction_0ii>:
 40069d8:	defffb04 	addi	sp,sp,-20
 40069dc:	dfc00415 	stw	ra,16(sp)
 40069e0:	df000315 	stw	fp,12(sp)
 40069e4:	df000304 	addi	fp,sp,12
 40069e8:	e13ffe15 	stw	r4,-8(fp)
 40069ec:	e17fff15 	stw	r5,-4(fp)
 40069f0:	e0bffe17 	ldw	r2,-8(fp)
 40069f4:	10800058 	cmpnei	r2,r2,1
 40069f8:	1000091e 	bne	r2,zero,4006a20 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40069fc:	e0ffff17 	ldw	r3,-4(fp)
 4006a00:	00bfffd4 	movui	r2,65535
 4006a04:	1880061e 	bne	r3,r2,4006a20 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4006a08:	d8000015 	stw	zero,0(sp)
 4006a0c:	000f883a 	mov	r7,zero
 4006a10:	000d883a 	mov	r6,zero
 4006a14:	000b883a 	mov	r5,zero
 4006a18:	d13ca504 	addi	r4,gp,-3436
 4006a1c:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
 4006a20:	0001883a 	nop
 4006a24:	e037883a 	mov	sp,fp
 4006a28:	dfc00117 	ldw	ra,4(sp)
 4006a2c:	df000017 	ldw	fp,0(sp)
 4006a30:	dec00204 	addi	sp,sp,8
 4006a34:	f800283a 	ret

04006a38 <_GLOBAL__sub_I__ZN13EthernetClass14socketPortRandEt>:
 4006a38:	defffe04 	addi	sp,sp,-8
 4006a3c:	dfc00115 	stw	ra,4(sp)
 4006a40:	df000015 	stw	fp,0(sp)
 4006a44:	d839883a 	mov	fp,sp
 4006a48:	017fffd4 	movui	r5,65535
 4006a4c:	01000044 	movi	r4,1
 4006a50:	40069d80 	call	40069d8 <_Z41__static_initialization_and_destruction_0ii>
 4006a54:	e037883a 	mov	sp,fp
 4006a58:	dfc00117 	ldw	ra,4(sp)
 4006a5c:	df000017 	ldw	fp,0(sp)
 4006a60:	dec00204 	addi	sp,sp,8
 4006a64:	f800283a 	ret

04006a68 <_ZN10W5100Class4readEt>:
  static uint16_t write(uint16_t addr, const uint8_t *buf, uint16_t len);
  static uint8_t write(uint16_t addr, uint8_t data) {
    return write(addr, &data, 1);
  }
  static uint16_t read(uint16_t addr, uint8_t *buf, uint16_t len);
  static uint8_t read(uint16_t addr) {
 4006a68:	defffc04 	addi	sp,sp,-16
 4006a6c:	dfc00315 	stw	ra,12(sp)
 4006a70:	df000215 	stw	fp,8(sp)
 4006a74:	df000204 	addi	fp,sp,8
 4006a78:	2005883a 	mov	r2,r4
 4006a7c:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t data;
    read(addr, &data, 1);
 4006a80:	e0bfff0b 	ldhu	r2,-4(fp)
 4006a84:	01800044 	movi	r6,1
 4006a88:	e17ffe04 	addi	r5,fp,-8
 4006a8c:	1009883a 	mov	r4,r2
 4006a90:	4007d8c0 	call	4007d8c <_ZN10W5100Class4readEtPht>
    return data;
 4006a94:	e0bffe03 	ldbu	r2,-8(fp)
  }
 4006a98:	e037883a 	mov	sp,fp
 4006a9c:	dfc00117 	ldw	ra,4(sp)
 4006aa0:	df000017 	ldw	fp,0(sp)
 4006aa4:	dec00204 	addi	sp,sp,8
 4006aa8:	f800283a 	ret

04006aac <_ZN10W5100Class6readSnEht>:
    return CH_BASE_MSB << 8;
  }
  static uint8_t CH_BASE_MSB; // 1 redundant byte, saves ~80 bytes code on AVR
  static const uint16_t CH_SIZE = 0x0100;

  static inline uint8_t readSn(SOCKET s, uint16_t addr) {
 4006aac:	defffc04 	addi	sp,sp,-16
 4006ab0:	dfc00315 	stw	ra,12(sp)
 4006ab4:	df000215 	stw	fp,8(sp)
 4006ab8:	df000204 	addi	fp,sp,8
 4006abc:	2007883a 	mov	r3,r4
 4006ac0:	2805883a 	mov	r2,r5
 4006ac4:	e0fffe05 	stb	r3,-8(fp)
 4006ac8:	e0bfff0d 	sth	r2,-4(fp)
    return read(CH_BASE() + s * CH_SIZE + addr);
 4006acc:	40044980 	call	4004498 <_ZN10W5100Class7CH_BASEEv>
 4006ad0:	1007883a 	mov	r3,r2
 4006ad4:	e0bffe03 	ldbu	r2,-8(fp)
 4006ad8:	1004923a 	slli	r2,r2,8
 4006adc:	1885883a 	add	r2,r3,r2
 4006ae0:	1007883a 	mov	r3,r2
 4006ae4:	e0bfff0b 	ldhu	r2,-4(fp)
 4006ae8:	1885883a 	add	r2,r3,r2
 4006aec:	10bfffcc 	andi	r2,r2,65535
 4006af0:	1009883a 	mov	r4,r2
 4006af4:	4006a680 	call	4006a68 <_ZN10W5100Class4readEt>
  }
 4006af8:	e037883a 	mov	sp,fp
 4006afc:	dfc00117 	ldw	ra,4(sp)
 4006b00:	df000017 	ldw	fp,0(sp)
 4006b04:	dec00204 	addi	sp,sp,8
 4006b08:	f800283a 	ret

04006b0c <_ZN10W5100Class7writeSnEhth>:
  static inline uint8_t writeSn(SOCKET s, uint16_t addr, uint8_t data) {
 4006b0c:	defffb04 	addi	sp,sp,-20
 4006b10:	dfc00415 	stw	ra,16(sp)
 4006b14:	df000315 	stw	fp,12(sp)
 4006b18:	df000304 	addi	fp,sp,12
 4006b1c:	2807883a 	mov	r3,r5
 4006b20:	3005883a 	mov	r2,r6
 4006b24:	e13ffd05 	stb	r4,-12(fp)
 4006b28:	e0fffe0d 	sth	r3,-8(fp)
 4006b2c:	e0bfff05 	stb	r2,-4(fp)
    return write(CH_BASE() + s * CH_SIZE + addr, data);
 4006b30:	40044980 	call	4004498 <_ZN10W5100Class7CH_BASEEv>
 4006b34:	1007883a 	mov	r3,r2
 4006b38:	e0bffd03 	ldbu	r2,-12(fp)
 4006b3c:	1004923a 	slli	r2,r2,8
 4006b40:	1885883a 	add	r2,r3,r2
 4006b44:	1007883a 	mov	r3,r2
 4006b48:	e0bffe0b 	ldhu	r2,-8(fp)
 4006b4c:	1885883a 	add	r2,r3,r2
 4006b50:	10bfffcc 	andi	r2,r2,65535
 4006b54:	e0ffff03 	ldbu	r3,-4(fp)
 4006b58:	180b883a 	mov	r5,r3
 4006b5c:	1009883a 	mov	r4,r2
 4006b60:	400335c0 	call	400335c <_ZN10W5100Class5writeEth>
  }
 4006b64:	e037883a 	mov	sp,fp
 4006b68:	dfc00117 	ldw	ra,4(sp)
 4006b6c:	df000017 	ldw	fp,0(sp)
 4006b70:	dec00204 	addi	sp,sp,8
 4006b74:	f800283a 	ret

04006b78 <_ZN10W5100Class7writeSnEhtPht>:
  static inline uint16_t readSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
    return read(CH_BASE() + s * CH_SIZE + addr, buf, len);
  }
  static inline uint16_t writeSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
 4006b78:	defffa04 	addi	sp,sp,-24
 4006b7c:	dfc00515 	stw	ra,20(sp)
 4006b80:	df000415 	stw	fp,16(sp)
 4006b84:	df000404 	addi	fp,sp,16
 4006b88:	2807883a 	mov	r3,r5
 4006b8c:	e1bffe15 	stw	r6,-8(fp)
 4006b90:	3805883a 	mov	r2,r7
 4006b94:	e13ffc05 	stb	r4,-16(fp)
 4006b98:	e0fffd0d 	sth	r3,-12(fp)
 4006b9c:	e0bfff0d 	sth	r2,-4(fp)
    return write(CH_BASE() + s * CH_SIZE + addr, buf, len);
 4006ba0:	40044980 	call	4004498 <_ZN10W5100Class7CH_BASEEv>
 4006ba4:	1007883a 	mov	r3,r2
 4006ba8:	e0bffc03 	ldbu	r2,-16(fp)
 4006bac:	1004923a 	slli	r2,r2,8
 4006bb0:	1885883a 	add	r2,r3,r2
 4006bb4:	1007883a 	mov	r3,r2
 4006bb8:	e0bffd0b 	ldhu	r2,-12(fp)
 4006bbc:	1885883a 	add	r2,r3,r2
 4006bc0:	10bfffcc 	andi	r2,r2,65535
 4006bc4:	e0ffff0b 	ldhu	r3,-4(fp)
 4006bc8:	180d883a 	mov	r6,r3
 4006bcc:	e17ffe17 	ldw	r5,-8(fp)
 4006bd0:	1009883a 	mov	r4,r2
 4006bd4:	4007bb40 	call	4007bb4 <_ZN10W5100Class5writeEtPKht>
  }
 4006bd8:	e037883a 	mov	sp,fp
 4006bdc:	dfc00117 	ldw	ra,4(sp)
 4006be0:	df000017 	ldw	fp,0(sp)
 4006be4:	dec00204 	addi	sp,sp,8
 4006be8:	f800283a 	ret

04006bec <_ZN10W5100Class9writeSnMREhh>:
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }

public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
 4006bec:	defffc04 	addi	sp,sp,-16
 4006bf0:	dfc00315 	stw	ra,12(sp)
 4006bf4:	df000215 	stw	fp,8(sp)
 4006bf8:	df000204 	addi	fp,sp,8
 4006bfc:	2007883a 	mov	r3,r4
 4006c00:	2805883a 	mov	r2,r5
 4006c04:	e0fffe05 	stb	r3,-8(fp)
 4006c08:	e0bfff05 	stb	r2,-4(fp)
 4006c0c:	e0bffe03 	ldbu	r2,-8(fp)
 4006c10:	e0ffff03 	ldbu	r3,-4(fp)
 4006c14:	180d883a 	mov	r6,r3
 4006c18:	000b883a 	mov	r5,zero
 4006c1c:	1009883a 	mov	r4,r2
 4006c20:	4006b0c0 	call	4006b0c <_ZN10W5100Class7writeSnEhth>
 4006c24:	0001883a 	nop
 4006c28:	e037883a 	mov	sp,fp
 4006c2c:	dfc00117 	ldw	ra,4(sp)
 4006c30:	df000017 	ldw	fp,0(sp)
 4006c34:	dec00204 	addi	sp,sp,8
 4006c38:	f800283a 	ret

04006c3c <_ZN10W5100Class9writeSnIREhh>:
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
 4006c3c:	defffc04 	addi	sp,sp,-16
 4006c40:	dfc00315 	stw	ra,12(sp)
 4006c44:	df000215 	stw	fp,8(sp)
 4006c48:	df000204 	addi	fp,sp,8
 4006c4c:	2007883a 	mov	r3,r4
 4006c50:	2805883a 	mov	r2,r5
 4006c54:	e0fffe05 	stb	r3,-8(fp)
 4006c58:	e0bfff05 	stb	r2,-4(fp)
 4006c5c:	e0bffe03 	ldbu	r2,-8(fp)
 4006c60:	e0ffff03 	ldbu	r3,-4(fp)
 4006c64:	180d883a 	mov	r6,r3
 4006c68:	01400084 	movi	r5,2
 4006c6c:	1009883a 	mov	r4,r2
 4006c70:	4006b0c0 	call	4006b0c <_ZN10W5100Class7writeSnEhth>
 4006c74:	0001883a 	nop
 4006c78:	e037883a 	mov	sp,fp
 4006c7c:	dfc00117 	ldw	ra,4(sp)
 4006c80:	df000017 	ldw	fp,0(sp)
 4006c84:	dec00204 	addi	sp,sp,8
 4006c88:	f800283a 	ret

04006c8c <_ZN10W5100Class8readSnIREh>:
 4006c8c:	defffd04 	addi	sp,sp,-12
 4006c90:	dfc00215 	stw	ra,8(sp)
 4006c94:	df000115 	stw	fp,4(sp)
 4006c98:	df000104 	addi	fp,sp,4
 4006c9c:	2005883a 	mov	r2,r4
 4006ca0:	e0bfff05 	stb	r2,-4(fp)
 4006ca4:	e0bfff03 	ldbu	r2,-4(fp)
 4006ca8:	01400084 	movi	r5,2
 4006cac:	1009883a 	mov	r4,r2
 4006cb0:	4006aac0 	call	4006aac <_ZN10W5100Class6readSnEht>
 4006cb4:	e037883a 	mov	sp,fp
 4006cb8:	dfc00117 	ldw	ra,4(sp)
 4006cbc:	df000017 	ldw	fp,0(sp)
 4006cc0:	dec00204 	addi	sp,sp,8
 4006cc4:	f800283a 	ret

04006cc8 <_ZN10W5100Class8readSnSREh>:
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
 4006cc8:	defffd04 	addi	sp,sp,-12
 4006ccc:	dfc00215 	stw	ra,8(sp)
 4006cd0:	df000115 	stw	fp,4(sp)
 4006cd4:	df000104 	addi	fp,sp,4
 4006cd8:	2005883a 	mov	r2,r4
 4006cdc:	e0bfff05 	stb	r2,-4(fp)
 4006ce0:	e0bfff03 	ldbu	r2,-4(fp)
 4006ce4:	014000c4 	movi	r5,3
 4006ce8:	1009883a 	mov	r4,r2
 4006cec:	4006aac0 	call	4006aac <_ZN10W5100Class6readSnEht>
 4006cf0:	e037883a 	mov	sp,fp
 4006cf4:	dfc00117 	ldw	ra,4(sp)
 4006cf8:	df000017 	ldw	fp,0(sp)
 4006cfc:	dec00204 	addi	sp,sp,8
 4006d00:	f800283a 	ret

04006d04 <_ZN10W5100Class11writeSnPORTEht>:
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
 4006d04:	defffb04 	addi	sp,sp,-20
 4006d08:	dfc00415 	stw	ra,16(sp)
 4006d0c:	df000315 	stw	fp,12(sp)
 4006d10:	df000304 	addi	fp,sp,12
 4006d14:	2007883a 	mov	r3,r4
 4006d18:	2805883a 	mov	r2,r5
 4006d1c:	e0fffe05 	stb	r3,-8(fp)
 4006d20:	e0bfff0d 	sth	r2,-4(fp)
 4006d24:	e0bfff0b 	ldhu	r2,-4(fp)
 4006d28:	1005d23a 	srai	r2,r2,8
 4006d2c:	e0bffd05 	stb	r2,-12(fp)
 4006d30:	e0bfff0b 	ldhu	r2,-4(fp)
 4006d34:	e0bffd45 	stb	r2,-11(fp)
 4006d38:	e0bffe03 	ldbu	r2,-8(fp)
 4006d3c:	01c00084 	movi	r7,2
 4006d40:	e1bffd04 	addi	r6,fp,-12
 4006d44:	01400104 	movi	r5,4
 4006d48:	1009883a 	mov	r4,r2
 4006d4c:	4006b780 	call	4006b78 <_ZN10W5100Class7writeSnEhtPht>
 4006d50:	0001883a 	nop
 4006d54:	e037883a 	mov	sp,fp
 4006d58:	dfc00117 	ldw	ra,4(sp)
 4006d5c:	df000017 	ldw	fp,0(sp)
 4006d60:	dec00204 	addi	sp,sp,8
 4006d64:	f800283a 	ret

04006d68 <_ZN10W5100Class11writeSnDHAREhPh>:
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
 4006d68:	defffc04 	addi	sp,sp,-16
 4006d6c:	dfc00315 	stw	ra,12(sp)
 4006d70:	df000215 	stw	fp,8(sp)
 4006d74:	df000204 	addi	fp,sp,8
 4006d78:	2005883a 	mov	r2,r4
 4006d7c:	e17fff15 	stw	r5,-4(fp)
 4006d80:	e0bffe05 	stb	r2,-8(fp)
 4006d84:	e0bffe03 	ldbu	r2,-8(fp)
 4006d88:	01c00184 	movi	r7,6
 4006d8c:	e1bfff17 	ldw	r6,-4(fp)
 4006d90:	01400184 	movi	r5,6
 4006d94:	1009883a 	mov	r4,r2
 4006d98:	4006b780 	call	4006b78 <_ZN10W5100Class7writeSnEhtPht>
 4006d9c:	e037883a 	mov	sp,fp
 4006da0:	dfc00117 	ldw	ra,4(sp)
 4006da4:	df000017 	ldw	fp,0(sp)
 4006da8:	dec00204 	addi	sp,sp,8
 4006dac:	f800283a 	ret

04006db0 <_ZN10W5100Class11writeSnDIPREhPh>:
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
 4006db0:	defffc04 	addi	sp,sp,-16
 4006db4:	dfc00315 	stw	ra,12(sp)
 4006db8:	df000215 	stw	fp,8(sp)
 4006dbc:	df000204 	addi	fp,sp,8
 4006dc0:	2005883a 	mov	r2,r4
 4006dc4:	e17fff15 	stw	r5,-4(fp)
 4006dc8:	e0bffe05 	stb	r2,-8(fp)
 4006dcc:	e0bffe03 	ldbu	r2,-8(fp)
 4006dd0:	01c00104 	movi	r7,4
 4006dd4:	e1bfff17 	ldw	r6,-4(fp)
 4006dd8:	01400304 	movi	r5,12
 4006ddc:	1009883a 	mov	r4,r2
 4006de0:	4006b780 	call	4006b78 <_ZN10W5100Class7writeSnEhtPht>
 4006de4:	e037883a 	mov	sp,fp
 4006de8:	dfc00117 	ldw	ra,4(sp)
 4006dec:	df000017 	ldw	fp,0(sp)
 4006df0:	dec00204 	addi	sp,sp,8
 4006df4:	f800283a 	ret

04006df8 <_ZN10W5100Class12writeSnDPORTEht>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
 4006df8:	defffb04 	addi	sp,sp,-20
 4006dfc:	dfc00415 	stw	ra,16(sp)
 4006e00:	df000315 	stw	fp,12(sp)
 4006e04:	df000304 	addi	fp,sp,12
 4006e08:	2007883a 	mov	r3,r4
 4006e0c:	2805883a 	mov	r2,r5
 4006e10:	e0fffe05 	stb	r3,-8(fp)
 4006e14:	e0bfff0d 	sth	r2,-4(fp)
 4006e18:	e0bfff0b 	ldhu	r2,-4(fp)
 4006e1c:	1005d23a 	srai	r2,r2,8
 4006e20:	e0bffd05 	stb	r2,-12(fp)
 4006e24:	e0bfff0b 	ldhu	r2,-4(fp)
 4006e28:	e0bffd45 	stb	r2,-11(fp)
 4006e2c:	e0bffe03 	ldbu	r2,-8(fp)
 4006e30:	01c00084 	movi	r7,2
 4006e34:	e1bffd04 	addi	r6,fp,-12
 4006e38:	01400404 	movi	r5,16
 4006e3c:	1009883a 	mov	r4,r2
 4006e40:	4006b780 	call	4006b78 <_ZN10W5100Class7writeSnEhtPht>
 4006e44:	0001883a 	nop
 4006e48:	e037883a 	mov	sp,fp
 4006e4c:	dfc00117 	ldw	ra,4(sp)
 4006e50:	df000017 	ldw	fp,0(sp)
 4006e54:	dec00204 	addi	sp,sp,8
 4006e58:	f800283a 	ret

04006e5c <_ZN10W5100Class12readSnTX_FSREh>:
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER8(SnRX_SIZE,   0x001E)        // RX Memory Size (W5200 only)
  __SOCKET_REGISTER8(SnTX_SIZE,   0x001F)        // RX Memory Size (W5200 only)
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
 4006e5c:	defffc04 	addi	sp,sp,-16
 4006e60:	dfc00315 	stw	ra,12(sp)
 4006e64:	df000215 	stw	fp,8(sp)
 4006e68:	df000204 	addi	fp,sp,8
 4006e6c:	2005883a 	mov	r2,r4
 4006e70:	e0bfff05 	stb	r2,-4(fp)
 4006e74:	e0bfff03 	ldbu	r2,-4(fp)
 4006e78:	01c00084 	movi	r7,2
 4006e7c:	e1bffe04 	addi	r6,fp,-8
 4006e80:	01400804 	movi	r5,32
 4006e84:	1009883a 	mov	r4,r2
 4006e88:	40044c00 	call	40044c0 <_ZN10W5100Class6readSnEhtPht>
 4006e8c:	e0bffe03 	ldbu	r2,-8(fp)
 4006e90:	10803fcc 	andi	r2,r2,255
 4006e94:	1004923a 	slli	r2,r2,8
 4006e98:	1007883a 	mov	r3,r2
 4006e9c:	e0bffe43 	ldbu	r2,-7(fp)
 4006ea0:	10803fcc 	andi	r2,r2,255
 4006ea4:	1884b03a 	or	r2,r3,r2
 4006ea8:	e037883a 	mov	sp,fp
 4006eac:	dfc00117 	ldw	ra,4(sp)
 4006eb0:	df000017 	ldw	fp,0(sp)
 4006eb4:	dec00204 	addi	sp,sp,8
 4006eb8:	f800283a 	ret

04006ebc <_ZN10W5100Class12writeSnTX_WREht>:
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
 4006ebc:	defffb04 	addi	sp,sp,-20
 4006ec0:	dfc00415 	stw	ra,16(sp)
 4006ec4:	df000315 	stw	fp,12(sp)
 4006ec8:	df000304 	addi	fp,sp,12
 4006ecc:	2007883a 	mov	r3,r4
 4006ed0:	2805883a 	mov	r2,r5
 4006ed4:	e0fffe05 	stb	r3,-8(fp)
 4006ed8:	e0bfff0d 	sth	r2,-4(fp)
 4006edc:	e0bfff0b 	ldhu	r2,-4(fp)
 4006ee0:	1005d23a 	srai	r2,r2,8
 4006ee4:	e0bffd05 	stb	r2,-12(fp)
 4006ee8:	e0bfff0b 	ldhu	r2,-4(fp)
 4006eec:	e0bffd45 	stb	r2,-11(fp)
 4006ef0:	e0bffe03 	ldbu	r2,-8(fp)
 4006ef4:	01c00084 	movi	r7,2
 4006ef8:	e1bffd04 	addi	r6,fp,-12
 4006efc:	01400904 	movi	r5,36
 4006f00:	1009883a 	mov	r4,r2
 4006f04:	4006b780 	call	4006b78 <_ZN10W5100Class7writeSnEhtPht>
 4006f08:	0001883a 	nop
 4006f0c:	e037883a 	mov	sp,fp
 4006f10:	dfc00117 	ldw	ra,4(sp)
 4006f14:	df000017 	ldw	fp,0(sp)
 4006f18:	dec00204 	addi	sp,sp,8
 4006f1c:	f800283a 	ret

04006f20 <_ZN10W5100Class11readSnTX_WREh>:
 4006f20:	defffc04 	addi	sp,sp,-16
 4006f24:	dfc00315 	stw	ra,12(sp)
 4006f28:	df000215 	stw	fp,8(sp)
 4006f2c:	df000204 	addi	fp,sp,8
 4006f30:	2005883a 	mov	r2,r4
 4006f34:	e0bfff05 	stb	r2,-4(fp)
 4006f38:	e0bfff03 	ldbu	r2,-4(fp)
 4006f3c:	01c00084 	movi	r7,2
 4006f40:	e1bffe04 	addi	r6,fp,-8
 4006f44:	01400904 	movi	r5,36
 4006f48:	1009883a 	mov	r4,r2
 4006f4c:	40044c00 	call	40044c0 <_ZN10W5100Class6readSnEhtPht>
 4006f50:	e0bffe03 	ldbu	r2,-8(fp)
 4006f54:	10803fcc 	andi	r2,r2,255
 4006f58:	1004923a 	slli	r2,r2,8
 4006f5c:	1007883a 	mov	r3,r2
 4006f60:	e0bffe43 	ldbu	r2,-7(fp)
 4006f64:	10803fcc 	andi	r2,r2,255
 4006f68:	1884b03a 	or	r2,r3,r2
 4006f6c:	e037883a 	mov	sp,fp
 4006f70:	dfc00117 	ldw	ra,4(sp)
 4006f74:	df000017 	ldw	fp,0(sp)
 4006f78:	dec00204 	addi	sp,sp,8
 4006f7c:	f800283a 	ret

04006f80 <_ZN10W5100Class12readSnRX_RSREh>:
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
 4006f80:	defffc04 	addi	sp,sp,-16
 4006f84:	dfc00315 	stw	ra,12(sp)
 4006f88:	df000215 	stw	fp,8(sp)
 4006f8c:	df000204 	addi	fp,sp,8
 4006f90:	2005883a 	mov	r2,r4
 4006f94:	e0bfff05 	stb	r2,-4(fp)
 4006f98:	e0bfff03 	ldbu	r2,-4(fp)
 4006f9c:	01c00084 	movi	r7,2
 4006fa0:	e1bffe04 	addi	r6,fp,-8
 4006fa4:	01400984 	movi	r5,38
 4006fa8:	1009883a 	mov	r4,r2
 4006fac:	40044c00 	call	40044c0 <_ZN10W5100Class6readSnEhtPht>
 4006fb0:	e0bffe03 	ldbu	r2,-8(fp)
 4006fb4:	10803fcc 	andi	r2,r2,255
 4006fb8:	1004923a 	slli	r2,r2,8
 4006fbc:	1007883a 	mov	r3,r2
 4006fc0:	e0bffe43 	ldbu	r2,-7(fp)
 4006fc4:	10803fcc 	andi	r2,r2,255
 4006fc8:	1884b03a 	or	r2,r3,r2
 4006fcc:	e037883a 	mov	sp,fp
 4006fd0:	dfc00117 	ldw	ra,4(sp)
 4006fd4:	df000017 	ldw	fp,0(sp)
 4006fd8:	dec00204 	addi	sp,sp,8
 4006fdc:	f800283a 	ret

04006fe0 <_ZN10W5100Class12writeSnRX_RDEht>:
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
 4006fe0:	defffb04 	addi	sp,sp,-20
 4006fe4:	dfc00415 	stw	ra,16(sp)
 4006fe8:	df000315 	stw	fp,12(sp)
 4006fec:	df000304 	addi	fp,sp,12
 4006ff0:	2007883a 	mov	r3,r4
 4006ff4:	2805883a 	mov	r2,r5
 4006ff8:	e0fffe05 	stb	r3,-8(fp)
 4006ffc:	e0bfff0d 	sth	r2,-4(fp)
 4007000:	e0bfff0b 	ldhu	r2,-4(fp)
 4007004:	1005d23a 	srai	r2,r2,8
 4007008:	e0bffd05 	stb	r2,-12(fp)
 400700c:	e0bfff0b 	ldhu	r2,-4(fp)
 4007010:	e0bffd45 	stb	r2,-11(fp)
 4007014:	e0bffe03 	ldbu	r2,-8(fp)
 4007018:	01c00084 	movi	r7,2
 400701c:	e1bffd04 	addi	r6,fp,-12
 4007020:	01400a04 	movi	r5,40
 4007024:	1009883a 	mov	r4,r2
 4007028:	4006b780 	call	4006b78 <_ZN10W5100Class7writeSnEhtPht>
 400702c:	0001883a 	nop
 4007030:	e037883a 	mov	sp,fp
 4007034:	dfc00117 	ldw	ra,4(sp)
 4007038:	df000017 	ldw	fp,0(sp)
 400703c:	dec00204 	addi	sp,sp,8
 4007040:	f800283a 	ret

04007044 <_ZN10W5100Class11readSnRX_RDEh>:
 4007044:	defffc04 	addi	sp,sp,-16
 4007048:	dfc00315 	stw	ra,12(sp)
 400704c:	df000215 	stw	fp,8(sp)
 4007050:	df000204 	addi	fp,sp,8
 4007054:	2005883a 	mov	r2,r4
 4007058:	e0bfff05 	stb	r2,-4(fp)
 400705c:	e0bfff03 	ldbu	r2,-4(fp)
 4007060:	01c00084 	movi	r7,2
 4007064:	e1bffe04 	addi	r6,fp,-8
 4007068:	01400a04 	movi	r5,40
 400706c:	1009883a 	mov	r4,r2
 4007070:	40044c00 	call	40044c0 <_ZN10W5100Class6readSnEhtPht>
 4007074:	e0bffe03 	ldbu	r2,-8(fp)
 4007078:	10803fcc 	andi	r2,r2,255
 400707c:	1004923a 	slli	r2,r2,8
 4007080:	1007883a 	mov	r3,r2
 4007084:	e0bffe43 	ldbu	r2,-7(fp)
 4007088:	10803fcc 	andi	r2,r2,255
 400708c:	1884b03a 	or	r2,r3,r2
 4007090:	e037883a 	mov	sp,fp
 4007094:	dfc00117 	ldw	ra,4(sp)
 4007098:	df000017 	ldw	fp,0(sp)
 400709c:	dec00204 	addi	sp,sp,8
 40070a0:	f800283a 	ret

040070a4 <_ZN10W5100Class5SBASEEh>:
  static uint16_t SMASK;
#else
  static const uint16_t SSIZE = 2048;
  static const uint16_t SMASK = 0x07FF;
#endif
  static uint16_t SBASE(uint8_t socknum) {
 40070a4:	defffe04 	addi	sp,sp,-8
 40070a8:	df000115 	stw	fp,4(sp)
 40070ac:	df000104 	addi	fp,sp,4
 40070b0:	2005883a 	mov	r2,r4
 40070b4:	e0bfff05 	stb	r2,-4(fp)
    if (chip == 51) {
 40070b8:	d0bca803 	ldbu	r2,-3424(gp)
 40070bc:	10803fcc 	andi	r2,r2,255
 40070c0:	10800cd8 	cmpnei	r2,r2,51
 40070c4:	1000041e 	bne	r2,zero,40070d8 <_ZN10W5100Class5SBASEEh+0x34>
      return socknum * SSIZE + 0x4000;
 40070c8:	e0bfff03 	ldbu	r2,-4(fp)
 40070cc:	10800204 	addi	r2,r2,8
 40070d0:	100492fa 	slli	r2,r2,11
 40070d4:	00000306 	br	40070e4 <_ZN10W5100Class5SBASEEh+0x40>
    } else {
      return socknum * SSIZE + 0x8000;
 40070d8:	e0bfff03 	ldbu	r2,-4(fp)
 40070dc:	10800404 	addi	r2,r2,16
 40070e0:	100492fa 	slli	r2,r2,11
    }
  }
 40070e4:	e037883a 	mov	sp,fp
 40070e8:	df000017 	ldw	fp,0(sp)
 40070ec:	dec00104 	addi	sp,sp,4
 40070f0:	f800283a 	ret

040070f4 <_ZN10W5100Class5RBASEEh>:
  static uint16_t RBASE(uint8_t socknum) {
 40070f4:	defffe04 	addi	sp,sp,-8
 40070f8:	df000115 	stw	fp,4(sp)
 40070fc:	df000104 	addi	fp,sp,4
 4007100:	2005883a 	mov	r2,r4
 4007104:	e0bfff05 	stb	r2,-4(fp)
    if (chip == 51) {
 4007108:	d0bca803 	ldbu	r2,-3424(gp)
 400710c:	10803fcc 	andi	r2,r2,255
 4007110:	10800cd8 	cmpnei	r2,r2,51
 4007114:	1000041e 	bne	r2,zero,4007128 <_ZN10W5100Class5RBASEEh+0x34>
      return socknum * SSIZE + 0x6000;
 4007118:	e0bfff03 	ldbu	r2,-4(fp)
 400711c:	10800304 	addi	r2,r2,12
 4007120:	100492fa 	slli	r2,r2,11
 4007124:	00000306 	br	4007134 <_ZN10W5100Class5RBASEEh+0x40>
    } else {
      return socknum * SSIZE + 0xC000;
 4007128:	e0bfff03 	ldbu	r2,-4(fp)
 400712c:	10800604 	addi	r2,r2,24
 4007130:	100492fa 	slli	r2,r2,11
    }
  }
 4007134:	e037883a 	mov	sp,fp
 4007138:	df000017 	ldw	fp,0(sp)
 400713c:	dec00104 	addi	sp,sp,4
 4007140:	f800283a 	ret

04007144 <_ZN10W5100Class23hasOffsetAddressMappingEv>:

  static bool hasOffsetAddressMapping(void) {
 4007144:	deffff04 	addi	sp,sp,-4
 4007148:	df000015 	stw	fp,0(sp)
 400714c:	d839883a 	mov	fp,sp
    if (chip == 55) return true;
 4007150:	d0bca803 	ldbu	r2,-3424(gp)
 4007154:	10803fcc 	andi	r2,r2,255
 4007158:	10800dd8 	cmpnei	r2,r2,55
 400715c:	1000021e 	bne	r2,zero,4007168 <_ZN10W5100Class23hasOffsetAddressMappingEv+0x24>
 4007160:	00800044 	movi	r2,1
 4007164:	00000106 	br	400716c <_ZN10W5100Class23hasOffsetAddressMappingEv+0x28>
    return false;
 4007168:	0005883a 	mov	r2,zero
  }
 400716c:	e037883a 	mov	sp,fp
 4007170:	df000017 	ldw	fp,0(sp)
 4007174:	dec00104 	addi	sp,sp,4
 4007178:	f800283a 	ret

0400717c <_ZN9IPAddressC1Ev>:
*/

#include "IPAddress.h"
#include <cstring>

IPAddress::IPAddress()
 400717c:	defffe04 	addi	sp,sp,-8
 4007180:	df000115 	stw	fp,4(sp)
 4007184:	df000104 	addi	fp,sp,4
 4007188:	e13fff15 	stw	r4,-4(fp)
{
    _address.dword = 0;
 400718c:	e0bfff17 	ldw	r2,-4(fp)
 4007190:	10000015 	stw	zero,0(r2)
}
 4007194:	0001883a 	nop
 4007198:	e037883a 	mov	sp,fp
 400719c:	df000017 	ldw	fp,0(sp)
 40071a0:	dec00104 	addi	sp,sp,4
 40071a4:	f800283a 	ret

040071a8 <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 40071a8:	defffa04 	addi	sp,sp,-24
 40071ac:	df000515 	stw	fp,20(sp)
 40071b0:	df000504 	addi	fp,sp,20
 40071b4:	e13ffb15 	stw	r4,-20(fp)
 40071b8:	3009883a 	mov	r4,r6
 40071bc:	3807883a 	mov	r3,r7
 40071c0:	e0800117 	ldw	r2,4(fp)
 40071c4:	e17ffc05 	stb	r5,-16(fp)
 40071c8:	e13ffd05 	stb	r4,-12(fp)
 40071cc:	e0fffe05 	stb	r3,-8(fp)
 40071d0:	e0bfff05 	stb	r2,-4(fp)
{
    _address.bytes[0] = first_octet;
 40071d4:	e0bffb17 	ldw	r2,-20(fp)
 40071d8:	e0fffc03 	ldbu	r3,-16(fp)
 40071dc:	10c00005 	stb	r3,0(r2)
    _address.bytes[1] = second_octet;
 40071e0:	e0bffb17 	ldw	r2,-20(fp)
 40071e4:	e0fffd03 	ldbu	r3,-12(fp)
 40071e8:	10c00045 	stb	r3,1(r2)
    _address.bytes[2] = third_octet;
 40071ec:	e0bffb17 	ldw	r2,-20(fp)
 40071f0:	e0fffe03 	ldbu	r3,-8(fp)
 40071f4:	10c00085 	stb	r3,2(r2)
    _address.bytes[3] = fourth_octet;
 40071f8:	e0bffb17 	ldw	r2,-20(fp)
 40071fc:	e0ffff03 	ldbu	r3,-4(fp)
 4007200:	10c000c5 	stb	r3,3(r2)
}
 4007204:	0001883a 	nop
 4007208:	e037883a 	mov	sp,fp
 400720c:	df000017 	ldw	fp,0(sp)
 4007210:	dec00104 	addi	sp,sp,4
 4007214:	f800283a 	ret

04007218 <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
 4007218:	defffd04 	addi	sp,sp,-12
 400721c:	df000215 	stw	fp,8(sp)
 4007220:	df000204 	addi	fp,sp,8
 4007224:	e13ffe15 	stw	r4,-8(fp)
 4007228:	e17fff15 	stw	r5,-4(fp)
{
    _address.dword = address;
 400722c:	e0bffe17 	ldw	r2,-8(fp)
 4007230:	e0ffff17 	ldw	r3,-4(fp)
 4007234:	10c00015 	stw	r3,0(r2)
}
 4007238:	0001883a 	nop
 400723c:	e037883a 	mov	sp,fp
 4007240:	df000017 	ldw	fp,0(sp)
 4007244:	dec00104 	addi	sp,sp,4
 4007248:	f800283a 	ret

0400724c <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
 400724c:	defffc04 	addi	sp,sp,-16
 4007250:	dfc00315 	stw	ra,12(sp)
 4007254:	df000215 	stw	fp,8(sp)
 4007258:	df000204 	addi	fp,sp,8
 400725c:	e13ffe15 	stw	r4,-8(fp)
 4007260:	e17fff15 	stw	r5,-4(fp)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
 4007264:	e0bffe17 	ldw	r2,-8(fp)
 4007268:	01800104 	movi	r6,4
 400726c:	e17fff17 	ldw	r5,-4(fp)
 4007270:	1009883a 	mov	r4,r2
 4007274:	400b2a80 	call	400b2a8 <memcpy>
}
 4007278:	0001883a 	nop
 400727c:	e037883a 	mov	sp,fp
 4007280:	dfc00117 	ldw	ra,4(sp)
 4007284:	df000017 	ldw	fp,0(sp)
 4007288:	dec00204 	addi	sp,sp,8
 400728c:	f800283a 	ret

04007290 <_ZN9IPAddress10fromStringEPKc>:

bool IPAddress::fromString(const char *address)
{
 4007290:	defffc04 	addi	sp,sp,-16
 4007294:	df000315 	stw	fp,12(sp)
 4007298:	df000304 	addi	fp,sp,12
 400729c:	e13ffe15 	stw	r4,-8(fp)
 40072a0:	e17fff15 	stw	r5,-4(fp)
    uint16_t acc = 0; // Accumulator
 40072a4:	e03ffd0d 	sth	zero,-12(fp)
    uint8_t dots = 0;
 40072a8:	e03ffd85 	stb	zero,-10(fp)

    while (*address)
 40072ac:	e0bfff17 	ldw	r2,-4(fp)
 40072b0:	10800003 	ldbu	r2,0(r2)
 40072b4:	10803fcc 	andi	r2,r2,255
 40072b8:	1080201c 	xori	r2,r2,128
 40072bc:	10bfe004 	addi	r2,r2,-128
 40072c0:	10002d26 	beq	r2,zero,4007378 <_ZN9IPAddress10fromStringEPKc+0xe8>
    {
        char c = *address++;
 40072c4:	e0bfff17 	ldw	r2,-4(fp)
 40072c8:	10c00044 	addi	r3,r2,1
 40072cc:	e0ffff15 	stw	r3,-4(fp)
 40072d0:	10800003 	ldbu	r2,0(r2)
 40072d4:	e0bffdc5 	stb	r2,-9(fp)
        if (c >= '0' && c <= '9')
 40072d8:	e0bffdc7 	ldb	r2,-9(fp)
 40072dc:	10800c10 	cmplti	r2,r2,48
 40072e0:	10000f1e 	bne	r2,zero,4007320 <_ZN9IPAddress10fromStringEPKc+0x90>
 40072e4:	e0bffdc7 	ldb	r2,-9(fp)
 40072e8:	10800e88 	cmpgei	r2,r2,58
 40072ec:	10000c1e 	bne	r2,zero,4007320 <_ZN9IPAddress10fromStringEPKc+0x90>
        {
            acc = acc * 10 + (c - '0');
 40072f0:	e0bffd0b 	ldhu	r2,-12(fp)
 40072f4:	108002a4 	muli	r2,r2,10
 40072f8:	1007883a 	mov	r3,r2
 40072fc:	e0bffdc7 	ldb	r2,-9(fp)
 4007300:	1885883a 	add	r2,r3,r2
 4007304:	10bff404 	addi	r2,r2,-48
 4007308:	e0bffd0d 	sth	r2,-12(fp)
            if (acc > 255) {
 400730c:	e0bffd0b 	ldhu	r2,-12(fp)
 4007310:	10804030 	cmpltui	r2,r2,256
 4007314:	1000171e 	bne	r2,zero,4007374 <_ZN9IPAddress10fromStringEPKc+0xe4>
                // Value out of [0..255] range
                return false;
 4007318:	0005883a 	mov	r2,zero
 400731c:	00002006 	br	40073a0 <_ZN9IPAddress10fromStringEPKc+0x110>
            }
        }
        else if (c == '.')
 4007320:	e0bffdc7 	ldb	r2,-9(fp)
 4007324:	10800b98 	cmpnei	r2,r2,46
 4007328:	1000101e 	bne	r2,zero,400736c <_ZN9IPAddress10fromStringEPKc+0xdc>
        {
            if (dots == 3) {
 400732c:	e0bffd83 	ldbu	r2,-10(fp)
 4007330:	108000d8 	cmpnei	r2,r2,3
 4007334:	1000021e 	bne	r2,zero,4007340 <_ZN9IPAddress10fromStringEPKc+0xb0>
                // Too much dots (there must be 3 dots)
                return false;
 4007338:	0005883a 	mov	r2,zero
 400733c:	00001806 	br	40073a0 <_ZN9IPAddress10fromStringEPKc+0x110>
            }
            _address.bytes[dots++] = acc;
 4007340:	e0bffd83 	ldbu	r2,-10(fp)
 4007344:	10c00044 	addi	r3,r2,1
 4007348:	e0fffd85 	stb	r3,-10(fp)
 400734c:	10803fcc 	andi	r2,r2,255
 4007350:	e0fffd0b 	ldhu	r3,-12(fp)
 4007354:	1809883a 	mov	r4,r3
 4007358:	e0fffe17 	ldw	r3,-8(fp)
 400735c:	1885883a 	add	r2,r3,r2
 4007360:	11000005 	stb	r4,0(r2)
            acc = 0;
 4007364:	e03ffd0d 	sth	zero,-12(fp)
 4007368:	003fd006 	br	40072ac <__alt_data_end+0xfc0072ac>
        }
        else
        {
            // Invalid char
            return false;
 400736c:	0005883a 	mov	r2,zero
 4007370:	00000b06 	br	40073a0 <_ZN9IPAddress10fromStringEPKc+0x110>
bool IPAddress::fromString(const char *address)
{
    uint16_t acc = 0; // Accumulator
    uint8_t dots = 0;

    while (*address)
 4007374:	003fcd06 	br	40072ac <__alt_data_end+0xfc0072ac>
            // Invalid char
            return false;
        }
    }

    if (dots != 3) {
 4007378:	e0bffd83 	ldbu	r2,-10(fp)
 400737c:	108000e0 	cmpeqi	r2,r2,3
 4007380:	1000021e 	bne	r2,zero,400738c <_ZN9IPAddress10fromStringEPKc+0xfc>
        // Too few dots (there must be 3 dots)
        return false;
 4007384:	0005883a 	mov	r2,zero
 4007388:	00000506 	br	40073a0 <_ZN9IPAddress10fromStringEPKc+0x110>
    }
    _address.bytes[3] = acc;
 400738c:	e0bffd0b 	ldhu	r2,-12(fp)
 4007390:	1007883a 	mov	r3,r2
 4007394:	e0bffe17 	ldw	r2,-8(fp)
 4007398:	10c000c5 	stb	r3,3(r2)
    return true;
 400739c:	00800044 	movi	r2,1
}
 40073a0:	e037883a 	mov	sp,fp
 40073a4:	df000017 	ldw	fp,0(sp)
 40073a8:	dec00104 	addi	sp,sp,4
 40073ac:	f800283a 	ret

040073b0 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
 40073b0:	defffc04 	addi	sp,sp,-16
 40073b4:	dfc00315 	stw	ra,12(sp)
 40073b8:	df000215 	stw	fp,8(sp)
 40073bc:	df000204 	addi	fp,sp,8
 40073c0:	e13ffe15 	stw	r4,-8(fp)
 40073c4:	e17fff15 	stw	r5,-4(fp)
    memcpy(_address.bytes, address, sizeof(_address.bytes));
 40073c8:	e0bffe17 	ldw	r2,-8(fp)
 40073cc:	01800104 	movi	r6,4
 40073d0:	e17fff17 	ldw	r5,-4(fp)
 40073d4:	1009883a 	mov	r4,r2
 40073d8:	400b2a80 	call	400b2a8 <memcpy>
    return *this;
 40073dc:	e0bffe17 	ldw	r2,-8(fp)
}
 40073e0:	e037883a 	mov	sp,fp
 40073e4:	dfc00117 	ldw	ra,4(sp)
 40073e8:	df000017 	ldw	fp,0(sp)
 40073ec:	dec00204 	addi	sp,sp,8
 40073f0:	f800283a 	ret

040073f4 <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
 40073f4:	defffd04 	addi	sp,sp,-12
 40073f8:	df000215 	stw	fp,8(sp)
 40073fc:	df000204 	addi	fp,sp,8
 4007400:	e13ffe15 	stw	r4,-8(fp)
 4007404:	e17fff15 	stw	r5,-4(fp)
    _address.dword = address;
 4007408:	e0bffe17 	ldw	r2,-8(fp)
 400740c:	e0ffff17 	ldw	r3,-4(fp)
 4007410:	10c00015 	stw	r3,0(r2)
    return *this;
 4007414:	e0bffe17 	ldw	r2,-8(fp)
}
 4007418:	e037883a 	mov	sp,fp
 400741c:	df000017 	ldw	fp,0(sp)
 4007420:	dec00104 	addi	sp,sp,4
 4007424:	f800283a 	ret

04007428 <_ZNK9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr) const
{
 4007428:	defffc04 	addi	sp,sp,-16
 400742c:	dfc00315 	stw	ra,12(sp)
 4007430:	df000215 	stw	fp,8(sp)
 4007434:	df000204 	addi	fp,sp,8
 4007438:	e13ffe15 	stw	r4,-8(fp)
 400743c:	e17fff15 	stw	r5,-4(fp)
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
 4007440:	e0bffe17 	ldw	r2,-8(fp)
 4007444:	01800104 	movi	r6,4
 4007448:	100b883a 	mov	r5,r2
 400744c:	e13fff17 	ldw	r4,-4(fp)
 4007450:	400b22c0 	call	400b22c <memcmp>
 4007454:	1005003a 	cmpeq	r2,r2,zero
}
 4007458:	e037883a 	mov	sp,fp
 400745c:	dfc00117 	ldw	ra,4(sp)
 4007460:	df000017 	ldw	fp,0(sp)
 4007464:	dec00204 	addi	sp,sp,8
 4007468:	f800283a 	ret

0400746c <_Z41__static_initialization_and_destruction_0ii>:
 400746c:	defffb04 	addi	sp,sp,-20
 4007470:	dfc00415 	stw	ra,16(sp)
 4007474:	df000315 	stw	fp,12(sp)
 4007478:	df000304 	addi	fp,sp,12
 400747c:	e13ffe15 	stw	r4,-8(fp)
 4007480:	e17fff15 	stw	r5,-4(fp)
 4007484:	e0bffe17 	ldw	r2,-8(fp)
 4007488:	10800058 	cmpnei	r2,r2,1
 400748c:	1000091e 	bne	r2,zero,40074b4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4007490:	e0ffff17 	ldw	r3,-4(fp)
 4007494:	00bfffd4 	movui	r2,65535
 4007498:	1880061e 	bne	r3,r2,40074b4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 400749c:	d8000015 	stw	zero,0(sp)
 40074a0:	000f883a 	mov	r7,zero
 40074a4:	000d883a 	mov	r6,zero
 40074a8:	000b883a 	mov	r5,zero
 40074ac:	d13ca604 	addi	r4,gp,-3432
 40074b0:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
 40074b4:	0001883a 	nop
 40074b8:	e037883a 	mov	sp,fp
 40074bc:	dfc00117 	ldw	ra,4(sp)
 40074c0:	df000017 	ldw	fp,0(sp)
 40074c4:	dec00204 	addi	sp,sp,8
 40074c8:	f800283a 	ret

040074cc <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
 40074cc:	defffe04 	addi	sp,sp,-8
 40074d0:	dfc00115 	stw	ra,4(sp)
 40074d4:	df000015 	stw	fp,0(sp)
 40074d8:	d839883a 	mov	fp,sp
 40074dc:	017fffd4 	movui	r5,65535
 40074e0:	01000044 	movi	r4,1
 40074e4:	400746c0 	call	400746c <_Z41__static_initialization_and_destruction_0ii>
 40074e8:	e037883a 	mov	sp,fp
 40074ec:	dfc00117 	ldw	ra,4(sp)
 40074f0:	df000017 	ldw	fp,0(sp)
 40074f4:	dec00204 	addi	sp,sp,8
 40074f8:	f800283a 	ret

040074fc <_Z5delayj>:
#include "SPI.h"
#include "stdlib.h"
#include <altera_avalon_spi.h>
 #include <cstdio>

void delay(unsigned delay) {
 40074fc:	defffd04 	addi	sp,sp,-12
 4007500:	dfc00215 	stw	ra,8(sp)
 4007504:	df000115 	stw	fp,4(sp)
 4007508:	df000104 	addi	fp,sp,4
 400750c:	e13fff15 	stw	r4,-4(fp)
	usleep (1000*delay);
 4007510:	e0bfff17 	ldw	r2,-4(fp)
 4007514:	1080fa24 	muli	r2,r2,1000
 4007518:	1009883a 	mov	r4,r2
 400751c:	4017f980 	call	4017f98 <usleep>
}
 4007520:	0001883a 	nop
 4007524:	e037883a 	mov	sp,fp
 4007528:	dfc00117 	ldw	ra,4(sp)
 400752c:	df000017 	ldw	fp,0(sp)
 4007530:	dec00204 	addi	sp,sp,8
 4007534:	f800283a 	ret

04007538 <_Z6millisv>:

unsigned long millis() {
 4007538:	defffe04 	addi	sp,sp,-8
 400753c:	dfc00115 	stw	ra,4(sp)
 4007540:	df000015 	stw	fp,0(sp)
 4007544:	d839883a 	mov	fp,sp
	return clock();
 4007548:	400a9ac0 	call	400a9ac <clock>
}
 400754c:	e037883a 	mov	sp,fp
 4007550:	dfc00117 	ldw	ra,4(sp)
 4007554:	df000017 	ldw	fp,0(sp)
 4007558:	dec00204 	addi	sp,sp,8
 400755c:	f800283a 	ret

04007560 <_Z9SPI_beginv>:

void SPI_begin() {
 4007560:	deffff04 	addi	sp,sp,-4
 4007564:	df000015 	stw	fp,0(sp)
 4007568:	d839883a 	mov	fp,sp
}
 400756c:	0001883a 	nop
 4007570:	e037883a 	mov	sp,fp
 4007574:	df000017 	ldw	fp,0(sp)
 4007578:	dec00104 	addi	sp,sp,4
 400757c:	f800283a 	ret

04007580 <_Z20SPI_beginTransactionPv>:

void SPI_beginTransaction(void* arg) {;
 4007580:	defffe04 	addi	sp,sp,-8
 4007584:	df000115 	stw	fp,4(sp)
 4007588:	df000104 	addi	fp,sp,4
 400758c:	e13fff15 	stw	r4,-4(fp)

}
 4007590:	0001883a 	nop
 4007594:	e037883a 	mov	sp,fp
 4007598:	df000017 	ldw	fp,0(sp)
 400759c:	dec00104 	addi	sp,sp,4
 40075a0:	f800283a 	ret

040075a4 <_Z18SPI_endTransactionv>:

void SPI_endTransaction() {
 40075a4:	deffff04 	addi	sp,sp,-4
 40075a8:	df000015 	stw	fp,0(sp)
 40075ac:	d839883a 	mov	fp,sp
}
 40075b0:	0001883a 	nop
 40075b4:	e037883a 	mov	sp,fp
 40075b8:	df000017 	ldw	fp,0(sp)
 40075bc:	dec00104 	addi	sp,sp,4
 40075c0:	f800283a 	ret

040075c4 <_Z12SPI_transferh>:

uint8_t SPI_transfer(uint8_t val) {
 40075c4:	defff804 	addi	sp,sp,-32
 40075c8:	dfc00715 	stw	ra,28(sp)
 40075cc:	df000615 	stw	fp,24(sp)
 40075d0:	df000604 	addi	fp,sp,24
 40075d4:	2005883a 	mov	r2,r4
 40075d8:	e0bfff05 	stb	r2,-4(fp)
    int return_code = alt_avalon_spi_command(
        SPI_0_BASE, 0,      // SPI_0 base address, slave address
        1, &val,            // Write length, write data pointer
        1, &data,       // Read data, read buffer pointer
        0                   // Flags
	);
 40075dc:	e0ffff04 	addi	r3,fp,-4
 40075e0:	d8000215 	stw	zero,8(sp)
 40075e4:	e0bffe04 	addi	r2,fp,-8
 40075e8:	d8800115 	stw	r2,4(sp)
 40075ec:	00800044 	movi	r2,1
 40075f0:	d8800015 	stw	r2,0(sp)
 40075f4:	180f883a 	mov	r7,r3
 40075f8:	01800044 	movi	r6,1
 40075fc:	000b883a 	mov	r5,zero
 4007600:	01020034 	movhi	r4,2048
 4007604:	21142804 	addi	r4,r4,20640
 4007608:	4018c380 	call	4018c38 <alt_avalon_spi_command>
 400760c:	e0bffd15 	stw	r2,-12(fp)

	// Check the return code
    if(return_code < 0)
 4007610:	e0bffd17 	ldw	r2,-12(fp)
 4007614:	1000040e 	bge	r2,zero,4007628 <_Z12SPI_transferh+0x64>
        printf("Invalid return code on SPI read: %x.", return_code);
 4007618:	e17ffd17 	ldw	r5,-12(fp)
 400761c:	010100b4 	movhi	r4,1026
 4007620:	21291b04 	addi	r4,r4,-23444
 4007624:	400b5480 	call	400b548 <printf>

    // Return address after the last in the read buffer
	return data;
 4007628:	e0bffe03 	ldbu	r2,-8(fp)
}
 400762c:	e037883a 	mov	sp,fp
 4007630:	dfc00117 	ldw	ra,4(sp)
 4007634:	df000017 	ldw	fp,0(sp)
 4007638:	dec00204 	addi	sp,sp,8
 400763c:	f800283a 	ret

04007640 <_Z18SPI_transfer_multiPhj>:

void SPI_transfer_multi(uint8_t* buf, unsigned len) {
 4007640:	defff804 	addi	sp,sp,-32
 4007644:	dfc00715 	stw	ra,28(sp)
 4007648:	df000615 	stw	fp,24(sp)
 400764c:	df000604 	addi	fp,sp,24
 4007650:	e13ffe15 	stw	r4,-8(fp)
 4007654:	e17fff15 	stw	r5,-4(fp)
    int return_code = alt_avalon_spi_command(
        SPI_0_BASE, 0,      // SPI_0 base address, slave address
        len, buf,            // Write length, write data pointer
		len, buf,       // Read data, read buffer pointer
        0                   // Flags
	);
 4007658:	d8000215 	stw	zero,8(sp)
 400765c:	e0bffe17 	ldw	r2,-8(fp)
 4007660:	d8800115 	stw	r2,4(sp)
 4007664:	e0bfff17 	ldw	r2,-4(fp)
 4007668:	d8800015 	stw	r2,0(sp)
 400766c:	e1fffe17 	ldw	r7,-8(fp)
 4007670:	e1bfff17 	ldw	r6,-4(fp)
 4007674:	000b883a 	mov	r5,zero
 4007678:	01020034 	movhi	r4,2048
 400767c:	21142804 	addi	r4,r4,20640
 4007680:	4018c380 	call	4018c38 <alt_avalon_spi_command>
 4007684:	e0bffd15 	stw	r2,-12(fp)

	// Check the return code
    if(return_code < 0)
 4007688:	e0bffd17 	ldw	r2,-12(fp)
 400768c:	1000040e 	bge	r2,zero,40076a0 <_Z18SPI_transfer_multiPhj+0x60>
        printf("Invalid return code on SPI write: %x.", return_code);
 4007690:	e17ffd17 	ldw	r5,-12(fp)
 4007694:	010100b4 	movhi	r4,1026
 4007698:	21292504 	addi	r4,r4,-23404
 400769c:	400b5480 	call	400b548 <printf>
}
 40076a0:	0001883a 	nop
 40076a4:	e037883a 	mov	sp,fp
 40076a8:	dfc00117 	ldw	ra,4(sp)
 40076ac:	df000017 	ldw	fp,0(sp)
 40076b0:	dec00204 	addi	sp,sp,8
 40076b4:	f800283a 	ret

040076b8 <_ZN10W5100Class4initEv>:
  uint32_t W5100Class::ss_pin_mask;
#endif


uint8_t W5100Class::init(void)
{
 40076b8:	defffd04 	addi	sp,sp,-12
 40076bc:	dfc00215 	stw	ra,8(sp)
 40076c0:	df000115 	stw	fp,4(sp)
 40076c4:	df000104 	addi	fp,sp,4
	static bool initialized = false;
	uint8_t i;

	if (initialized) return 1;
 40076c8:	d0bca8c3 	ldbu	r2,-3421(gp)
 40076cc:	10803fcc 	andi	r2,r2,255
 40076d0:	10000226 	beq	r2,zero,40076dc <_ZN10W5100Class4initEv+0x24>
 40076d4:	00800044 	movi	r2,1
 40076d8:	00004a06 	br	4007804 <_ZN10W5100Class4initEv+0x14c>
	// reset pulse!  The CAT811 has a 240 ms typical pulse length, and
	// a 400 ms worst case maximum pulse length.  MAX811 has a worst
	// case maximum 560 ms pulse length.  This delay is meant to wait
	// until the reset pulse is ended.  If your hardware has a shorter
	// reset time, this can be edited or removed.
	usleep (560000);
 40076dc:	01000274 	movhi	r4,9
 40076e0:	2122e004 	addi	r4,r4,-29824
 40076e4:	4017f980 	call	4017f98 <usleep>
	//Serial.println("w5100 init");

	SPI_begin();
 40076e8:	40075600 	call	4007560 <_Z9SPI_beginv>
	initSS();
 40076ec:	40082940 	call	4008294 <_ZN10W5100Class6initSSEv>
	resetSS();
 40076f0:	40082d40 	call	40082d4 <_ZN10W5100Class7resetSSEv>
	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 40076f4:	0009883a 	mov	r4,zero
 40076f8:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>

	// Attempt W5200 detection first, because W5200 does not properly
	// reset its SPI state when CS goes high (inactive).  Communication
	// from detecting the other chips can leave the W5200 in a state
	// where it won't recover, unless given a reset pulse.
	if (isW5200()) {
 40076fc:	40079440 	call	4007944 <_ZN10W5100Class7isW5200Ev>
 4007700:	10803fcc 	andi	r2,r2,255
 4007704:	1004c03a 	cmpne	r2,r2,zero
 4007708:	10803fcc 	andi	r2,r2,255
 400770c:	10002126 	beq	r2,zero,4007794 <_ZN10W5100Class4initEv+0xdc>
		CH_BASE_MSB = 0x40;
 4007710:	00801004 	movi	r2,64
 4007714:	d0bca845 	stb	r2,-3423(gp)
#else
		SSIZE = 2048;
#endif
		SMASK = SSIZE - 1;
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
 4007718:	e03fff05 	stb	zero,-4(fp)
 400771c:	e0bfff03 	ldbu	r2,-4(fp)
 4007720:	10800228 	cmpgeui	r2,r2,8
 4007724:	10000c1e 	bne	r2,zero,4007758 <_ZN10W5100Class4initEv+0xa0>
			writeSnRX_SIZE(i, SSIZE >> 10);
 4007728:	e0bfff03 	ldbu	r2,-4(fp)
 400772c:	01400084 	movi	r5,2
 4007730:	1009883a 	mov	r4,r2
 4007734:	40081f40 	call	40081f4 <_ZN10W5100Class14writeSnRX_SIZEEhh>
			writeSnTX_SIZE(i, SSIZE >> 10);
 4007738:	e0bfff03 	ldbu	r2,-4(fp)
 400773c:	01400084 	movi	r5,2
 4007740:	1009883a 	mov	r4,r2
 4007744:	40082440 	call	4008244 <_ZN10W5100Class14writeSnTX_SIZEEhh>
#else
		SSIZE = 2048;
#endif
		SMASK = SSIZE - 1;
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
 4007748:	e0bfff03 	ldbu	r2,-4(fp)
 400774c:	10800044 	addi	r2,r2,1
 4007750:	e0bfff05 	stb	r2,-4(fp)
 4007754:	003ff106 	br	400771c <__alt_data_end+0xfc00771c>
			writeSnRX_SIZE(i, SSIZE >> 10);
			writeSnTX_SIZE(i, SSIZE >> 10);
		}
		for (; i<8; i++) {
 4007758:	e0bfff03 	ldbu	r2,-4(fp)
 400775c:	10800228 	cmpgeui	r2,r2,8
 4007760:	1000241e 	bne	r2,zero,40077f4 <_ZN10W5100Class4initEv+0x13c>
			writeSnRX_SIZE(i, 0);
 4007764:	e0bfff03 	ldbu	r2,-4(fp)
 4007768:	000b883a 	mov	r5,zero
 400776c:	1009883a 	mov	r4,r2
 4007770:	40081f40 	call	40081f4 <_ZN10W5100Class14writeSnRX_SIZEEhh>
			writeSnTX_SIZE(i, 0);
 4007774:	e0bfff03 	ldbu	r2,-4(fp)
 4007778:	000b883a 	mov	r5,zero
 400777c:	1009883a 	mov	r4,r2
 4007780:	40082440 	call	4008244 <_ZN10W5100Class14writeSnTX_SIZEEhh>
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
			writeSnRX_SIZE(i, SSIZE >> 10);
			writeSnTX_SIZE(i, SSIZE >> 10);
		}
		for (; i<8; i++) {
 4007784:	e0bfff03 	ldbu	r2,-4(fp)
 4007788:	10800044 	addi	r2,r2,1
 400778c:	e0bfff05 	stb	r2,-4(fp)
 4007790:	003ff106 	br	4007758 <__alt_data_end+0xfc007758>
			writeSnTX_SIZE(i, 0);
		}
	// Try W5500 next.  WIZnet finally seems to have implemented
	// SPI well with this chip.  It appears to be very resilient,
	// so try it after the fragile W5200
	} else if (isW5500()) {
 4007794:	4007a1c0 	call	4007a1c <_ZN10W5100Class7isW5500Ev>
 4007798:	10803fcc 	andi	r2,r2,255
 400779c:	1004c03a 	cmpne	r2,r2,zero
 40077a0:	10803fcc 	andi	r2,r2,255
 40077a4:	10000326 	beq	r2,zero,40077b4 <_ZN10W5100Class4initEv+0xfc>
		CH_BASE_MSB = 0x10;
 40077a8:	00800404 	movi	r2,16
 40077ac:	d0bca845 	stb	r2,-3423(gp)
 40077b0:	00001006 	br	40077f4 <_ZN10W5100Class4initEv+0x13c>
	// Try W5100 last.  This simple chip uses fixed 4 byte frames
	// for every 8 bit access.  Terribly inefficient, but so simple
	// it recovers from "hearing" unsuccessful W5100 or W5200
	// communication.  W5100 is also the only chip without a VERSIONR
	// register for identification, so we check this last.
	} else if (isW5100()) {
 40077b4:	400788c0 	call	400788c <_ZN10W5100Class7isW5100Ev>
 40077b8:	10803fcc 	andi	r2,r2,255
 40077bc:	1004c03a 	cmpne	r2,r2,zero
 40077c0:	10803fcc 	andi	r2,r2,255
 40077c4:	10000726 	beq	r2,zero,40077e4 <_ZN10W5100Class4initEv+0x12c>
		CH_BASE_MSB = 0x04;
 40077c8:	00800104 	movi	r2,4
 40077cc:	d0bca845 	stb	r2,-3423(gp)
		writeTMSR(0x55);
		writeRMSR(0x55);
#endif
		SMASK = SSIZE - 1;
#else
		writeTMSR(0x55);
 40077d0:	01001544 	movi	r4,85
 40077d4:	40080780 	call	4008078 <_ZN10W5100Class9writeTMSREh>
		writeRMSR(0x55);
 40077d8:	01001544 	movi	r4,85
 40077dc:	40080380 	call	4008038 <_ZN10W5100Class9writeRMSREh>
 40077e0:	00000406 	br	40077f4 <_ZN10W5100Class4initEv+0x13c>
	// No hardware seems to be present.  Or it could be a W5200
	// that's heard other SPI communication if its chip select
	// pin wasn't high when a SD card or other SPI chip was used.
	} else {
		//Serial.println("no chip :-(");
		chip = 0;
 40077e4:	d03ca805 	stb	zero,-3424(gp)
		SPI_endTransaction();
 40077e8:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
		return 0; // no known chip is responding :-(
 40077ec:	0005883a 	mov	r2,zero
 40077f0:	00000406 	br	4007804 <_ZN10W5100Class4initEv+0x14c>
	}
	SPI_endTransaction();
 40077f4:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
	initialized = true;
 40077f8:	00800044 	movi	r2,1
 40077fc:	d0bca8c5 	stb	r2,-3421(gp)
	return 1; // successful init
 4007800:	00800044 	movi	r2,1
}
 4007804:	e037883a 	mov	sp,fp
 4007808:	dfc00117 	ldw	ra,4(sp)
 400780c:	df000017 	ldw	fp,0(sp)
 4007810:	dec00204 	addi	sp,sp,8
 4007814:	f800283a 	ret

04007818 <_ZN10W5100Class9softResetEv>:

// Soft reset the WIZnet chip, by writing to its MR register reset bit
uint8_t W5100Class::softReset(void)
{
 4007818:	defffd04 	addi	sp,sp,-12
 400781c:	dfc00215 	stw	ra,8(sp)
 4007820:	df000115 	stw	fp,4(sp)
 4007824:	df000104 	addi	fp,sp,4
	uint16_t count=0;
 4007828:	e03fff0d 	sth	zero,-4(fp)

	//Serial.println("WIZnet soft reset");
	// write to reset bit
	writeMR(0x80);
 400782c:	01002004 	movi	r4,128
 4007830:	4007fcc0 	call	4007fcc <_ZN10W5100Class7writeMREh>
	// then wait for soft reset to complete
	do {
		uint8_t mr = readMR();
 4007834:	400800c0 	call	400800c <_ZN10W5100Class6readMREv>
 4007838:	e0bfff85 	stb	r2,-2(fp)
		//Serial.print("mr=");
		//Serial.println(mr, HEX);
		if (mr == 0) return 1;
 400783c:	e0bfff83 	ldbu	r2,-2(fp)
 4007840:	1000021e 	bne	r2,zero,400784c <_ZN10W5100Class9softResetEv+0x34>
 4007844:	00800044 	movi	r2,1
 4007848:	00000b06 	br	4007878 <_ZN10W5100Class9softResetEv+0x60>
		delay(1);
 400784c:	01000044 	movi	r4,1
 4007850:	40074fc0 	call	40074fc <_Z5delayj>

	//Serial.println("WIZnet soft reset");
	// write to reset bit
	writeMR(0x80);
	// then wait for soft reset to complete
	do {
 4007854:	e0bfff0b 	ldhu	r2,-4(fp)
 4007858:	10800044 	addi	r2,r2,1
 400785c:	e0bfff0d 	sth	r2,-4(fp)
 4007860:	e0bfff0b 	ldhu	r2,-4(fp)
 4007864:	10800530 	cmpltui	r2,r2,20
 4007868:	10803fcc 	andi	r2,r2,255
 400786c:	10000126 	beq	r2,zero,4007874 <_ZN10W5100Class9softResetEv+0x5c>
 4007870:	003ff006 	br	4007834 <__alt_data_end+0xfc007834>
		//Serial.print("mr=");
		//Serial.println(mr, HEX);
		if (mr == 0) return 1;
		delay(1);
	} while (++count < 20);
	return 0;
 4007874:	0005883a 	mov	r2,zero
}
 4007878:	e037883a 	mov	sp,fp
 400787c:	dfc00117 	ldw	ra,4(sp)
 4007880:	df000017 	ldw	fp,0(sp)
 4007884:	dec00204 	addi	sp,sp,8
 4007888:	f800283a 	ret

0400788c <_ZN10W5100Class7isW5100Ev>:

uint8_t W5100Class::isW5100(void)
{
 400788c:	defffe04 	addi	sp,sp,-8
 4007890:	dfc00115 	stw	ra,4(sp)
 4007894:	df000015 	stw	fp,0(sp)
 4007898:	d839883a 	mov	fp,sp
	chip = 51;
 400789c:	00800cc4 	movi	r2,51
 40078a0:	d0bca805 	stb	r2,-3424(gp)
	//Serial.println("w5100.cpp: detect W5100 chip");
	if (!softReset()) return 0;
 40078a4:	40078180 	call	4007818 <_ZN10W5100Class9softResetEv>
 40078a8:	10803fcc 	andi	r2,r2,255
 40078ac:	1005003a 	cmpeq	r2,r2,zero
 40078b0:	10803fcc 	andi	r2,r2,255
 40078b4:	10000226 	beq	r2,zero,40078c0 <_ZN10W5100Class7isW5100Ev+0x34>
 40078b8:	0005883a 	mov	r2,zero
 40078bc:	00001c06 	br	4007930 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x10);
 40078c0:	01000404 	movi	r4,16
 40078c4:	4007fcc0 	call	4007fcc <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 40078c8:	400800c0 	call	400800c <_ZN10W5100Class6readMREv>
 40078cc:	10803fcc 	andi	r2,r2,255
 40078d0:	10800418 	cmpnei	r2,r2,16
 40078d4:	10803fcc 	andi	r2,r2,255
 40078d8:	10000226 	beq	r2,zero,40078e4 <_ZN10W5100Class7isW5100Ev+0x58>
 40078dc:	0005883a 	mov	r2,zero
 40078e0:	00001306 	br	4007930 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x12);
 40078e4:	01000484 	movi	r4,18
 40078e8:	4007fcc0 	call	4007fcc <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x12) return 0;
 40078ec:	400800c0 	call	400800c <_ZN10W5100Class6readMREv>
 40078f0:	10803fcc 	andi	r2,r2,255
 40078f4:	10800498 	cmpnei	r2,r2,18
 40078f8:	10803fcc 	andi	r2,r2,255
 40078fc:	10000226 	beq	r2,zero,4007908 <_ZN10W5100Class7isW5100Ev+0x7c>
 4007900:	0005883a 	mov	r2,zero
 4007904:	00000a06 	br	4007930 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x00);
 4007908:	0009883a 	mov	r4,zero
 400790c:	4007fcc0 	call	4007fcc <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 4007910:	400800c0 	call	400800c <_ZN10W5100Class6readMREv>
 4007914:	10803fcc 	andi	r2,r2,255
 4007918:	1004c03a 	cmpne	r2,r2,zero
 400791c:	10803fcc 	andi	r2,r2,255
 4007920:	10000226 	beq	r2,zero,400792c <_ZN10W5100Class7isW5100Ev+0xa0>
 4007924:	0005883a 	mov	r2,zero
 4007928:	00000106 	br	4007930 <_ZN10W5100Class7isW5100Ev+0xa4>
	//Serial.println("chip is W5100");
	return 1;
 400792c:	00800044 	movi	r2,1
}
 4007930:	e037883a 	mov	sp,fp
 4007934:	dfc00117 	ldw	ra,4(sp)
 4007938:	df000017 	ldw	fp,0(sp)
 400793c:	dec00204 	addi	sp,sp,8
 4007940:	f800283a 	ret

04007944 <_ZN10W5100Class7isW5200Ev>:

uint8_t W5100Class::isW5200(void)
{
 4007944:	defffd04 	addi	sp,sp,-12
 4007948:	dfc00215 	stw	ra,8(sp)
 400794c:	df000115 	stw	fp,4(sp)
 4007950:	df000104 	addi	fp,sp,4
	chip = 52;
 4007954:	00800d04 	movi	r2,52
 4007958:	d0bca805 	stb	r2,-3424(gp)
	//Serial.println("w5100.cpp: detect W5200 chip");
	if (!softReset()) return 0;
 400795c:	40078180 	call	4007818 <_ZN10W5100Class9softResetEv>
 4007960:	10803fcc 	andi	r2,r2,255
 4007964:	1005003a 	cmpeq	r2,r2,zero
 4007968:	10803fcc 	andi	r2,r2,255
 400796c:	10000226 	beq	r2,zero,4007978 <_ZN10W5100Class7isW5200Ev+0x34>
 4007970:	0005883a 	mov	r2,zero
 4007974:	00002406 	br	4007a08 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x08);
 4007978:	01000204 	movi	r4,8
 400797c:	4007fcc0 	call	4007fcc <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x08) return 0;
 4007980:	400800c0 	call	400800c <_ZN10W5100Class6readMREv>
 4007984:	10803fcc 	andi	r2,r2,255
 4007988:	10800218 	cmpnei	r2,r2,8
 400798c:	10803fcc 	andi	r2,r2,255
 4007990:	10000226 	beq	r2,zero,400799c <_ZN10W5100Class7isW5200Ev+0x58>
 4007994:	0005883a 	mov	r2,zero
 4007998:	00001b06 	br	4007a08 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x10);
 400799c:	01000404 	movi	r4,16
 40079a0:	4007fcc0 	call	4007fcc <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 40079a4:	400800c0 	call	400800c <_ZN10W5100Class6readMREv>
 40079a8:	10803fcc 	andi	r2,r2,255
 40079ac:	10800418 	cmpnei	r2,r2,16
 40079b0:	10803fcc 	andi	r2,r2,255
 40079b4:	10000226 	beq	r2,zero,40079c0 <_ZN10W5100Class7isW5200Ev+0x7c>
 40079b8:	0005883a 	mov	r2,zero
 40079bc:	00001206 	br	4007a08 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x00);
 40079c0:	0009883a 	mov	r4,zero
 40079c4:	4007fcc0 	call	4007fcc <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 40079c8:	400800c0 	call	400800c <_ZN10W5100Class6readMREv>
 40079cc:	10803fcc 	andi	r2,r2,255
 40079d0:	1004c03a 	cmpne	r2,r2,zero
 40079d4:	10803fcc 	andi	r2,r2,255
 40079d8:	10000226 	beq	r2,zero,40079e4 <_ZN10W5100Class7isW5200Ev+0xa0>
 40079dc:	0005883a 	mov	r2,zero
 40079e0:	00000906 	br	4007a08 <_ZN10W5100Class7isW5200Ev+0xc4>
	int ver = readVERSIONR_W5200();
 40079e4:	40080b80 	call	40080b8 <_ZN10W5100Class18readVERSIONR_W5200Ev>
 40079e8:	10803fcc 	andi	r2,r2,255
 40079ec:	e0bfff15 	stw	r2,-4(fp)
	//Serial.print("version=");
	//Serial.println(ver);
	if (ver != 3) return 0;
 40079f0:	e0bfff17 	ldw	r2,-4(fp)
 40079f4:	108000e0 	cmpeqi	r2,r2,3
 40079f8:	1000021e 	bne	r2,zero,4007a04 <_ZN10W5100Class7isW5200Ev+0xc0>
 40079fc:	0005883a 	mov	r2,zero
 4007a00:	00000106 	br	4007a08 <_ZN10W5100Class7isW5200Ev+0xc4>
	//Serial.println("chip is W5200");
	return 1;
 4007a04:	00800044 	movi	r2,1
}
 4007a08:	e037883a 	mov	sp,fp
 4007a0c:	dfc00117 	ldw	ra,4(sp)
 4007a10:	df000017 	ldw	fp,0(sp)
 4007a14:	dec00204 	addi	sp,sp,8
 4007a18:	f800283a 	ret

04007a1c <_ZN10W5100Class7isW5500Ev>:

uint8_t W5100Class::isW5500(void)
{
 4007a1c:	defffd04 	addi	sp,sp,-12
 4007a20:	dfc00215 	stw	ra,8(sp)
 4007a24:	df000115 	stw	fp,4(sp)
 4007a28:	df000104 	addi	fp,sp,4
	chip = 55;
 4007a2c:	00800dc4 	movi	r2,55
 4007a30:	d0bca805 	stb	r2,-3424(gp)
	//Serial.println("w5100.cpp: detect W5500 chip");
	if (!softReset()) return 0;
 4007a34:	40078180 	call	4007818 <_ZN10W5100Class9softResetEv>
 4007a38:	10803fcc 	andi	r2,r2,255
 4007a3c:	1005003a 	cmpeq	r2,r2,zero
 4007a40:	10803fcc 	andi	r2,r2,255
 4007a44:	10000226 	beq	r2,zero,4007a50 <_ZN10W5100Class7isW5500Ev+0x34>
 4007a48:	0005883a 	mov	r2,zero
 4007a4c:	00002406 	br	4007ae0 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x08);
 4007a50:	01000204 	movi	r4,8
 4007a54:	4007fcc0 	call	4007fcc <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x08) return 0;
 4007a58:	400800c0 	call	400800c <_ZN10W5100Class6readMREv>
 4007a5c:	10803fcc 	andi	r2,r2,255
 4007a60:	10800218 	cmpnei	r2,r2,8
 4007a64:	10803fcc 	andi	r2,r2,255
 4007a68:	10000226 	beq	r2,zero,4007a74 <_ZN10W5100Class7isW5500Ev+0x58>
 4007a6c:	0005883a 	mov	r2,zero
 4007a70:	00001b06 	br	4007ae0 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x10);
 4007a74:	01000404 	movi	r4,16
 4007a78:	4007fcc0 	call	4007fcc <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 4007a7c:	400800c0 	call	400800c <_ZN10W5100Class6readMREv>
 4007a80:	10803fcc 	andi	r2,r2,255
 4007a84:	10800418 	cmpnei	r2,r2,16
 4007a88:	10803fcc 	andi	r2,r2,255
 4007a8c:	10000226 	beq	r2,zero,4007a98 <_ZN10W5100Class7isW5500Ev+0x7c>
 4007a90:	0005883a 	mov	r2,zero
 4007a94:	00001206 	br	4007ae0 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x00);
 4007a98:	0009883a 	mov	r4,zero
 4007a9c:	4007fcc0 	call	4007fcc <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 4007aa0:	400800c0 	call	400800c <_ZN10W5100Class6readMREv>
 4007aa4:	10803fcc 	andi	r2,r2,255
 4007aa8:	1004c03a 	cmpne	r2,r2,zero
 4007aac:	10803fcc 	andi	r2,r2,255
 4007ab0:	10000226 	beq	r2,zero,4007abc <_ZN10W5100Class7isW5500Ev+0xa0>
 4007ab4:	0005883a 	mov	r2,zero
 4007ab8:	00000906 	br	4007ae0 <_ZN10W5100Class7isW5500Ev+0xc4>
	int ver = readVERSIONR_W5500();
 4007abc:	40080e40 	call	40080e4 <_ZN10W5100Class18readVERSIONR_W5500Ev>
 4007ac0:	10803fcc 	andi	r2,r2,255
 4007ac4:	e0bfff15 	stw	r2,-4(fp)
	//Serial.print("version=");
	//Serial.println(ver);
	if (ver != 4) return 0;
 4007ac8:	e0bfff17 	ldw	r2,-4(fp)
 4007acc:	10800120 	cmpeqi	r2,r2,4
 4007ad0:	1000021e 	bne	r2,zero,4007adc <_ZN10W5100Class7isW5500Ev+0xc0>
 4007ad4:	0005883a 	mov	r2,zero
 4007ad8:	00000106 	br	4007ae0 <_ZN10W5100Class7isW5500Ev+0xc4>
	//Serial.println("chip is W5500");
	return 1;
 4007adc:	00800044 	movi	r2,1
}
 4007ae0:	e037883a 	mov	sp,fp
 4007ae4:	dfc00117 	ldw	ra,4(sp)
 4007ae8:	df000017 	ldw	fp,0(sp)
 4007aec:	dec00204 	addi	sp,sp,8
 4007af0:	f800283a 	ret

04007af4 <_ZN10W5100Class13getLinkStatusEv>:

W5100Linkstatus W5100Class::getLinkStatus()
{
 4007af4:	defffd04 	addi	sp,sp,-12
 4007af8:	dfc00215 	stw	ra,8(sp)
 4007afc:	df000115 	stw	fp,4(sp)
 4007b00:	df000104 	addi	fp,sp,4
	uint8_t phystatus;

	if (!init()) return UNKNOWN;
 4007b04:	40076b80 	call	40076b8 <_ZN10W5100Class4initEv>
 4007b08:	10803fcc 	andi	r2,r2,255
 4007b0c:	1005003a 	cmpeq	r2,r2,zero
 4007b10:	10803fcc 	andi	r2,r2,255
 4007b14:	10000226 	beq	r2,zero,4007b20 <_ZN10W5100Class13getLinkStatusEv+0x2c>
 4007b18:	0005883a 	mov	r2,zero
 4007b1c:	00002006 	br	4007ba0 <_ZN10W5100Class13getLinkStatusEv+0xac>
	switch (chip) {
 4007b20:	d0bca803 	ldbu	r2,-3424(gp)
 4007b24:	10803fcc 	andi	r2,r2,255
 4007b28:	10c00d20 	cmpeqi	r3,r2,52
 4007b2c:	1800031e 	bne	r3,zero,4007b3c <_ZN10W5100Class13getLinkStatusEv+0x48>
 4007b30:	10800de0 	cmpeqi	r2,r2,55
 4007b34:	10000d1e 	bne	r2,zero,4007b6c <_ZN10W5100Class13getLinkStatusEv+0x78>
 4007b38:	00001806 	br	4007b9c <_ZN10W5100Class13getLinkStatusEv+0xa8>
	  case 52:
		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4007b3c:	0009883a 	mov	r4,zero
 4007b40:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
		phystatus = readPSTATUS_W5200();
 4007b44:	40081100 	call	4008110 <_ZN10W5100Class17readPSTATUS_W5200Ev>
 4007b48:	e0bfff05 	stb	r2,-4(fp)
		SPI_endTransaction();
 4007b4c:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
		if (phystatus & 0x20) return LINK_ON;
 4007b50:	e0bfff03 	ldbu	r2,-4(fp)
 4007b54:	1080080c 	andi	r2,r2,32
 4007b58:	10000226 	beq	r2,zero,4007b64 <_ZN10W5100Class13getLinkStatusEv+0x70>
 4007b5c:	00800044 	movi	r2,1
 4007b60:	00000f06 	br	4007ba0 <_ZN10W5100Class13getLinkStatusEv+0xac>
		return LINK_OFF;
 4007b64:	00800084 	movi	r2,2
 4007b68:	00000d06 	br	4007ba0 <_ZN10W5100Class13getLinkStatusEv+0xac>
	  case 55:
		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
 4007b6c:	0009883a 	mov	r4,zero
 4007b70:	40075800 	call	4007580 <_Z20SPI_beginTransactionPv>
		phystatus = readPHYCFGR_W5500();
 4007b74:	400813c0 	call	400813c <_ZN10W5100Class17readPHYCFGR_W5500Ev>
 4007b78:	e0bfff05 	stb	r2,-4(fp)
		SPI_endTransaction();
 4007b7c:	40075a40 	call	40075a4 <_Z18SPI_endTransactionv>
		if (phystatus & 0x01) return LINK_ON;
 4007b80:	e0bfff03 	ldbu	r2,-4(fp)
 4007b84:	1080004c 	andi	r2,r2,1
 4007b88:	10000226 	beq	r2,zero,4007b94 <_ZN10W5100Class13getLinkStatusEv+0xa0>
 4007b8c:	00800044 	movi	r2,1
 4007b90:	00000306 	br	4007ba0 <_ZN10W5100Class13getLinkStatusEv+0xac>
		return LINK_OFF;
 4007b94:	00800084 	movi	r2,2
 4007b98:	00000106 	br	4007ba0 <_ZN10W5100Class13getLinkStatusEv+0xac>
	  default:
		return UNKNOWN;
 4007b9c:	0005883a 	mov	r2,zero
	}
}
 4007ba0:	e037883a 	mov	sp,fp
 4007ba4:	dfc00117 	ldw	ra,4(sp)
 4007ba8:	df000017 	ldw	fp,0(sp)
 4007bac:	dec00204 	addi	sp,sp,8
 4007bb0:	f800283a 	ret

04007bb4 <_ZN10W5100Class5writeEtPKht>:

uint16_t W5100Class::write(uint16_t addr, const uint8_t *buf, uint16_t len)
{
 4007bb4:	defff804 	addi	sp,sp,-32
 4007bb8:	dfc00715 	stw	ra,28(sp)
 4007bbc:	df000615 	stw	fp,24(sp)
 4007bc0:	df000604 	addi	fp,sp,24
 4007bc4:	2007883a 	mov	r3,r4
 4007bc8:	e17ffe15 	stw	r5,-8(fp)
 4007bcc:	3005883a 	mov	r2,r6
 4007bd0:	e0fffd0d 	sth	r3,-12(fp)
 4007bd4:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t cmd[8];

		setSS();
 4007bd8:	40082b40 	call	40082b4 <_ZN10W5100Class5setSSEv>
		if (addr < 0x100) {
 4007bdc:	e0bffd0b 	ldhu	r2,-12(fp)
 4007be0:	10804028 	cmpgeui	r2,r2,256
 4007be4:	1000061e 	bne	r2,zero,4007c00 <_ZN10W5100Class5writeEtPKht+0x4c>
			// common registers 00nn
			cmd[0] = 0;
 4007be8:	e03ffb05 	stb	zero,-20(fp)
			cmd[1] = addr & 0xFF;
 4007bec:	e0bffd0b 	ldhu	r2,-12(fp)
 4007bf0:	e0bffb45 	stb	r2,-19(fp)
			cmd[2] = 0x04;
 4007bf4:	00800104 	movi	r2,4
 4007bf8:	e0bffb85 	stb	r2,-18(fp)
 4007bfc:	00002c06 	br	4007cb0 <_ZN10W5100Class5writeEtPKht+0xfc>
		} else if (addr < 0x8000) {
 4007c00:	e0bffd0b 	ldhu	r2,-12(fp)
 4007c04:	10bfffcc 	andi	r2,r2,65535
 4007c08:	10a0001c 	xori	r2,r2,32768
 4007c0c:	10a00004 	addi	r2,r2,-32768
 4007c10:	10000b16 	blt	r2,zero,4007c40 <_ZN10W5100Class5writeEtPKht+0x8c>
			// socket registers  10nn, 11nn, 12nn, 13nn, etc
			cmd[0] = 0;
 4007c14:	e03ffb05 	stb	zero,-20(fp)
			cmd[1] = addr & 0xFF;
 4007c18:	e0bffd0b 	ldhu	r2,-12(fp)
 4007c1c:	e0bffb45 	stb	r2,-19(fp)
			cmd[2] = ((addr >> 3) & 0xE0) | 0x0C;
 4007c20:	e0bffd0b 	ldhu	r2,-12(fp)
 4007c24:	1005d0fa 	srai	r2,r2,3
 4007c28:	1007883a 	mov	r3,r2
 4007c2c:	00bff804 	movi	r2,-32
 4007c30:	1884703a 	and	r2,r3,r2
 4007c34:	10800314 	ori	r2,r2,12
 4007c38:	e0bffb85 	stb	r2,-18(fp)
 4007c3c:	00001c06 	br	4007cb0 <_ZN10W5100Class5writeEtPKht+0xfc>
		} else if (addr < 0xC000) {
 4007c40:	e0bffd0b 	ldhu	r2,-12(fp)
 4007c44:	10b00028 	cmpgeui	r2,r2,49152
 4007c48:	10000d1e 	bne	r2,zero,4007c80 <_ZN10W5100Class5writeEtPKht+0xcc>
			// transmit buffers  8000-87FF, 8800-8FFF, 9000-97FF, etc
			//  10## #nnn nnnn nnnn
			cmd[0] = addr >> 8;
 4007c4c:	e0bffd0b 	ldhu	r2,-12(fp)
 4007c50:	1005d23a 	srai	r2,r2,8
 4007c54:	e0bffb05 	stb	r2,-20(fp)
			cmd[1] = addr & 0xFF;
 4007c58:	e0bffd0b 	ldhu	r2,-12(fp)
 4007c5c:	e0bffb45 	stb	r2,-19(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x14; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x14; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x14; // 2K buffers
 4007c60:	e0bffd0b 	ldhu	r2,-12(fp)
 4007c64:	1005d1ba 	srai	r2,r2,6
 4007c68:	1007883a 	mov	r3,r2
 4007c6c:	00bff804 	movi	r2,-32
 4007c70:	1884703a 	and	r2,r3,r2
 4007c74:	10800514 	ori	r2,r2,20
 4007c78:	e0bffb85 	stb	r2,-18(fp)
 4007c7c:	00000c06 	br	4007cb0 <_ZN10W5100Class5writeEtPKht+0xfc>
			#endif
		} else {
			// receive buffers
			cmd[0] = addr >> 8;
 4007c80:	e0bffd0b 	ldhu	r2,-12(fp)
 4007c84:	1005d23a 	srai	r2,r2,8
 4007c88:	e0bffb05 	stb	r2,-20(fp)
			cmd[1] = addr & 0xFF;
 4007c8c:	e0bffd0b 	ldhu	r2,-12(fp)
 4007c90:	e0bffb45 	stb	r2,-19(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x1C; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x1C; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x1C; // 2K buffers
 4007c94:	e0bffd0b 	ldhu	r2,-12(fp)
 4007c98:	1005d1ba 	srai	r2,r2,6
 4007c9c:	1007883a 	mov	r3,r2
 4007ca0:	00bff804 	movi	r2,-32
 4007ca4:	1884703a 	and	r2,r3,r2
 4007ca8:	10800714 	ori	r2,r2,28
 4007cac:	e0bffb85 	stb	r2,-18(fp)
			#endif
		}
		if (len <= 5) {
 4007cb0:	e0bfff0b 	ldhu	r2,-4(fp)
 4007cb4:	108001a8 	cmpgeui	r2,r2,6
 4007cb8:	10001a1e 	bne	r2,zero,4007d24 <_ZN10W5100Class5writeEtPKht+0x170>
			for (uint8_t i=0; i < len; i++) {
 4007cbc:	e03ffa05 	stb	zero,-24(fp)
 4007cc0:	e0bffa03 	ldbu	r2,-24(fp)
 4007cc4:	10ffffcc 	andi	r3,r2,65535
 4007cc8:	e0bfff0b 	ldhu	r2,-4(fp)
 4007ccc:	18800d2e 	bgeu	r3,r2,4007d04 <_ZN10W5100Class5writeEtPKht+0x150>
				cmd[i + 3] = buf[i];
 4007cd0:	e0bffa03 	ldbu	r2,-24(fp)
 4007cd4:	108000c4 	addi	r2,r2,3
 4007cd8:	e0fffa03 	ldbu	r3,-24(fp)
 4007cdc:	e13ffe17 	ldw	r4,-8(fp)
 4007ce0:	20c7883a 	add	r3,r4,r3
 4007ce4:	18c00003 	ldbu	r3,0(r3)
 4007ce8:	e13ffb04 	addi	r4,fp,-20
 4007cec:	2085883a 	add	r2,r4,r2
 4007cf0:	10c00005 	stb	r3,0(r2)
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x1C; // 2K buffers
			#endif
		}
		if (len <= 5) {
			for (uint8_t i=0; i < len; i++) {
 4007cf4:	e0bffa03 	ldbu	r2,-24(fp)
 4007cf8:	10800044 	addi	r2,r2,1
 4007cfc:	e0bffa05 	stb	r2,-24(fp)
 4007d00:	003fef06 	br	4007cc0 <__alt_data_end+0xfc007cc0>
				cmd[i + 3] = buf[i];
			}
			SPI_transfer_multi(cmd, len + 3);
 4007d04:	e0bfff0b 	ldhu	r2,-4(fp)
 4007d08:	108000c4 	addi	r2,r2,3
 4007d0c:	1007883a 	mov	r3,r2
 4007d10:	e0bffb04 	addi	r2,fp,-20
 4007d14:	180b883a 	mov	r5,r3
 4007d18:	1009883a 	mov	r4,r2
 4007d1c:	40076400 	call	4007640 <_Z18SPI_transfer_multiPhj>
 4007d20:	00001306 	br	4007d70 <_ZN10W5100Class5writeEtPKht+0x1bc>
		} else {
			SPI_transfer_multi(cmd, 3);
 4007d24:	e0bffb04 	addi	r2,fp,-20
 4007d28:	014000c4 	movi	r5,3
 4007d2c:	1009883a 	mov	r4,r2
 4007d30:	40076400 	call	4007640 <_Z18SPI_transfer_multiPhj>
#ifdef SPI_HAS_TRANSFER_BUF
			SPI_transfer(buf, NULL, len);
#else
			// TODO: copy 8 bytes at a time to cmd[] and block transfer
			for (uint16_t i=0; i < len; i++) {
 4007d34:	e03ffa8d 	sth	zero,-22(fp)
 4007d38:	e0fffa8b 	ldhu	r3,-22(fp)
 4007d3c:	e0bfff0b 	ldhu	r2,-4(fp)
 4007d40:	18800b2e 	bgeu	r3,r2,4007d70 <_ZN10W5100Class5writeEtPKht+0x1bc>
				SPI_transfer(buf[i]);
 4007d44:	e0bffa8b 	ldhu	r2,-22(fp)
 4007d48:	e0fffe17 	ldw	r3,-8(fp)
 4007d4c:	1885883a 	add	r2,r3,r2
 4007d50:	10800003 	ldbu	r2,0(r2)
 4007d54:	10803fcc 	andi	r2,r2,255
 4007d58:	1009883a 	mov	r4,r2
 4007d5c:	40075c40 	call	40075c4 <_Z12SPI_transferh>
			SPI_transfer_multi(cmd, 3);
#ifdef SPI_HAS_TRANSFER_BUF
			SPI_transfer(buf, NULL, len);
#else
			// TODO: copy 8 bytes at a time to cmd[] and block transfer
			for (uint16_t i=0; i < len; i++) {
 4007d60:	e0bffa8b 	ldhu	r2,-22(fp)
 4007d64:	10800044 	addi	r2,r2,1
 4007d68:	e0bffa8d 	sth	r2,-22(fp)
 4007d6c:	003ff206 	br	4007d38 <__alt_data_end+0xfc007d38>
				SPI_transfer(buf[i]);
			}
#endif
		}
		resetSS();
 4007d70:	40082d40 	call	40082d4 <_ZN10W5100Class7resetSSEv>
	return len;
 4007d74:	e0bfff0b 	ldhu	r2,-4(fp)
}
 4007d78:	e037883a 	mov	sp,fp
 4007d7c:	dfc00117 	ldw	ra,4(sp)
 4007d80:	df000017 	ldw	fp,0(sp)
 4007d84:	dec00204 	addi	sp,sp,8
 4007d88:	f800283a 	ret

04007d8c <_ZN10W5100Class4readEtPht>:

uint16_t W5100Class::read(uint16_t addr, uint8_t *buf, uint16_t len)
{
 4007d8c:	defffa04 	addi	sp,sp,-24
 4007d90:	dfc00515 	stw	ra,20(sp)
 4007d94:	df000415 	stw	fp,16(sp)
 4007d98:	df000404 	addi	fp,sp,16
 4007d9c:	2007883a 	mov	r3,r4
 4007da0:	e17ffe15 	stw	r5,-8(fp)
 4007da4:	3005883a 	mov	r2,r6
 4007da8:	e0fffd0d 	sth	r3,-12(fp)
 4007dac:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t cmd[4];
		setSS();
 4007db0:	40082b40 	call	40082b4 <_ZN10W5100Class5setSSEv>
		if (addr < 0x100) {
 4007db4:	e0bffd0b 	ldhu	r2,-12(fp)
 4007db8:	10804028 	cmpgeui	r2,r2,256
 4007dbc:	1000051e 	bne	r2,zero,4007dd4 <_ZN10W5100Class4readEtPht+0x48>
			// common registers 00nn
			cmd[0] = 0;
 4007dc0:	e03ffc05 	stb	zero,-16(fp)
			cmd[1] = addr & 0xFF;
 4007dc4:	e0bffd0b 	ldhu	r2,-12(fp)
 4007dc8:	e0bffc45 	stb	r2,-15(fp)
			cmd[2] = 0x00;
 4007dcc:	e03ffc85 	stb	zero,-14(fp)
 4007dd0:	00002c06 	br	4007e84 <_ZN10W5100Class4readEtPht+0xf8>
		} else if (addr < 0x8000) {
 4007dd4:	e0bffd0b 	ldhu	r2,-12(fp)
 4007dd8:	10bfffcc 	andi	r2,r2,65535
 4007ddc:	10a0001c 	xori	r2,r2,32768
 4007de0:	10a00004 	addi	r2,r2,-32768
 4007de4:	10000b16 	blt	r2,zero,4007e14 <_ZN10W5100Class4readEtPht+0x88>
			// socket registers  10nn, 11nn, 12nn, 13nn, etc
			cmd[0] = 0;
 4007de8:	e03ffc05 	stb	zero,-16(fp)
			cmd[1] = addr & 0xFF;
 4007dec:	e0bffd0b 	ldhu	r2,-12(fp)
 4007df0:	e0bffc45 	stb	r2,-15(fp)
			cmd[2] = ((addr >> 3) & 0xE0) | 0x08;
 4007df4:	e0bffd0b 	ldhu	r2,-12(fp)
 4007df8:	1005d0fa 	srai	r2,r2,3
 4007dfc:	1007883a 	mov	r3,r2
 4007e00:	00bff804 	movi	r2,-32
 4007e04:	1884703a 	and	r2,r3,r2
 4007e08:	10800214 	ori	r2,r2,8
 4007e0c:	e0bffc85 	stb	r2,-14(fp)
 4007e10:	00001c06 	br	4007e84 <_ZN10W5100Class4readEtPht+0xf8>
		} else if (addr < 0xC000) {
 4007e14:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e18:	10b00028 	cmpgeui	r2,r2,49152
 4007e1c:	10000d1e 	bne	r2,zero,4007e54 <_ZN10W5100Class4readEtPht+0xc8>
			// transmit buffers  8000-87FF, 8800-8FFF, 9000-97FF, etc
			//  10## #nnn nnnn nnnn
			cmd[0] = addr >> 8;
 4007e20:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e24:	1005d23a 	srai	r2,r2,8
 4007e28:	e0bffc05 	stb	r2,-16(fp)
			cmd[1] = addr & 0xFF;
 4007e2c:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e30:	e0bffc45 	stb	r2,-15(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x10; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x10; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x10; // 2K buffers
 4007e34:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e38:	1005d1ba 	srai	r2,r2,6
 4007e3c:	1007883a 	mov	r3,r2
 4007e40:	00bff804 	movi	r2,-32
 4007e44:	1884703a 	and	r2,r3,r2
 4007e48:	10800414 	ori	r2,r2,16
 4007e4c:	e0bffc85 	stb	r2,-14(fp)
 4007e50:	00000c06 	br	4007e84 <_ZN10W5100Class4readEtPht+0xf8>
			#endif
		} else {
			// receive buffers
			cmd[0] = addr >> 8;
 4007e54:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e58:	1005d23a 	srai	r2,r2,8
 4007e5c:	e0bffc05 	stb	r2,-16(fp)
			cmd[1] = addr & 0xFF;
 4007e60:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e64:	e0bffc45 	stb	r2,-15(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x18; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x18; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x18; // 2K buffers
 4007e68:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e6c:	1005d1ba 	srai	r2,r2,6
 4007e70:	1007883a 	mov	r3,r2
 4007e74:	00bff804 	movi	r2,-32
 4007e78:	1884703a 	and	r2,r3,r2
 4007e7c:	10800614 	ori	r2,r2,24
 4007e80:	e0bffc85 	stb	r2,-14(fp)
			#endif
		}
		SPI_transfer_multi(cmd, 3);
 4007e84:	014000c4 	movi	r5,3
 4007e88:	e13ffc04 	addi	r4,fp,-16
 4007e8c:	40076400 	call	4007640 <_Z18SPI_transfer_multiPhj>
		memset(buf, 0, len);
 4007e90:	e0bfff0b 	ldhu	r2,-4(fp)
 4007e94:	100d883a 	mov	r6,r2
 4007e98:	000b883a 	mov	r5,zero
 4007e9c:	e13ffe17 	ldw	r4,-8(fp)
 4007ea0:	400b3f00 	call	400b3f0 <memset>
		SPI_transfer_multi(buf, len);
 4007ea4:	e0bfff0b 	ldhu	r2,-4(fp)
 4007ea8:	100b883a 	mov	r5,r2
 4007eac:	e13ffe17 	ldw	r4,-8(fp)
 4007eb0:	40076400 	call	4007640 <_Z18SPI_transfer_multiPhj>
		resetSS();
 4007eb4:	40082d40 	call	40082d4 <_ZN10W5100Class7resetSSEv>
	return len;
 4007eb8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 4007ebc:	e037883a 	mov	sp,fp
 4007ec0:	dfc00117 	ldw	ra,4(sp)
 4007ec4:	df000017 	ldw	fp,0(sp)
 4007ec8:	dec00204 	addi	sp,sp,8
 4007ecc:	f800283a 	ret

04007ed0 <_ZN10W5100Class9execCmdSnEh7SockCMD>:

void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd)
{
 4007ed0:	defffc04 	addi	sp,sp,-16
 4007ed4:	dfc00315 	stw	ra,12(sp)
 4007ed8:	df000215 	stw	fp,8(sp)
 4007edc:	df000204 	addi	fp,sp,8
 4007ee0:	2005883a 	mov	r2,r4
 4007ee4:	e17fff15 	stw	r5,-4(fp)
 4007ee8:	e0bffe05 	stb	r2,-8(fp)
	// Send command to socket
	writeSnCR(s, _cmd);
 4007eec:	e0fffe03 	ldbu	r3,-8(fp)
 4007ef0:	e0bfff17 	ldw	r2,-4(fp)
 4007ef4:	10803fcc 	andi	r2,r2,255
 4007ef8:	100b883a 	mov	r5,r2
 4007efc:	1809883a 	mov	r4,r3
 4007f00:	40081680 	call	4008168 <_ZN10W5100Class9writeSnCREhh>
	// Wait for command to complete
	while (readSnCR(s)) ;
 4007f04:	e0bffe03 	ldbu	r2,-8(fp)
 4007f08:	1009883a 	mov	r4,r2
 4007f0c:	40081b80 	call	40081b8 <_ZN10W5100Class8readSnCREh>
 4007f10:	10803fcc 	andi	r2,r2,255
 4007f14:	1004c03a 	cmpne	r2,r2,zero
 4007f18:	10803fcc 	andi	r2,r2,255
 4007f1c:	10000126 	beq	r2,zero,4007f24 <_ZN10W5100Class9execCmdSnEh7SockCMD+0x54>
 4007f20:	003ff806 	br	4007f04 <__alt_data_end+0xfc007f04>
}
 4007f24:	0001883a 	nop
 4007f28:	e037883a 	mov	sp,fp
 4007f2c:	dfc00117 	ldw	ra,4(sp)
 4007f30:	df000017 	ldw	fp,0(sp)
 4007f34:	dec00204 	addi	sp,sp,8
 4007f38:	f800283a 	ret

04007f3c <_Z41__static_initialization_and_destruction_0ii>:
 4007f3c:	defffb04 	addi	sp,sp,-20
 4007f40:	dfc00415 	stw	ra,16(sp)
 4007f44:	df000315 	stw	fp,12(sp)
 4007f48:	df000304 	addi	fp,sp,12
 4007f4c:	e13ffe15 	stw	r4,-8(fp)
 4007f50:	e17fff15 	stw	r5,-4(fp)
 4007f54:	e0bffe17 	ldw	r2,-8(fp)
 4007f58:	10800058 	cmpnei	r2,r2,1
 4007f5c:	1000091e 	bne	r2,zero,4007f84 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4007f60:	e0ffff17 	ldw	r3,-4(fp)
 4007f64:	00bfffd4 	movui	r2,65535
 4007f68:	1880061e 	bne	r3,r2,4007f84 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4007f6c:	d8000015 	stw	zero,0(sp)
 4007f70:	000f883a 	mov	r7,zero
 4007f74:	000d883a 	mov	r6,zero
 4007f78:	000b883a 	mov	r5,zero
 4007f7c:	d13ca704 	addi	r4,gp,-3428
 4007f80:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
 4007f84:	0001883a 	nop
 4007f88:	e037883a 	mov	sp,fp
 4007f8c:	dfc00117 	ldw	ra,4(sp)
 4007f90:	df000017 	ldw	fp,0(sp)
 4007f94:	dec00204 	addi	sp,sp,8
 4007f98:	f800283a 	ret

04007f9c <_GLOBAL__sub_I__ZN10W5100Class4chipE>:
 4007f9c:	defffe04 	addi	sp,sp,-8
 4007fa0:	dfc00115 	stw	ra,4(sp)
 4007fa4:	df000015 	stw	fp,0(sp)
 4007fa8:	d839883a 	mov	fp,sp
 4007fac:	017fffd4 	movui	r5,65535
 4007fb0:	01000044 	movi	r4,1
 4007fb4:	4007f3c0 	call	4007f3c <_Z41__static_initialization_and_destruction_0ii>
 4007fb8:	e037883a 	mov	sp,fp
 4007fbc:	dfc00117 	ldw	ra,4(sp)
 4007fc0:	df000017 	ldw	fp,0(sp)
 4007fc4:	dec00204 	addi	sp,sp,8
 4007fc8:	f800283a 	ret

04007fcc <_ZN10W5100Class7writeMREh>:
    return read(address, _buff, size);            \
  }
  static W5100Linkstatus getLinkStatus();

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
 4007fcc:	defffd04 	addi	sp,sp,-12
 4007fd0:	dfc00215 	stw	ra,8(sp)
 4007fd4:	df000115 	stw	fp,4(sp)
 4007fd8:	df000104 	addi	fp,sp,4
 4007fdc:	2005883a 	mov	r2,r4
 4007fe0:	e0bfff05 	stb	r2,-4(fp)
 4007fe4:	e0bfff03 	ldbu	r2,-4(fp)
 4007fe8:	100b883a 	mov	r5,r2
 4007fec:	0009883a 	mov	r4,zero
 4007ff0:	400335c0 	call	400335c <_ZN10W5100Class5writeEth>
 4007ff4:	0001883a 	nop
 4007ff8:	e037883a 	mov	sp,fp
 4007ffc:	dfc00117 	ldw	ra,4(sp)
 4008000:	df000017 	ldw	fp,0(sp)
 4008004:	dec00204 	addi	sp,sp,8
 4008008:	f800283a 	ret

0400800c <_ZN10W5100Class6readMREv>:
 400800c:	defffe04 	addi	sp,sp,-8
 4008010:	dfc00115 	stw	ra,4(sp)
 4008014:	df000015 	stw	fp,0(sp)
 4008018:	d839883a 	mov	fp,sp
 400801c:	0009883a 	mov	r4,zero
 4008020:	4006a680 	call	4006a68 <_ZN10W5100Class4readEt>
 4008024:	e037883a 	mov	sp,fp
 4008028:	dfc00117 	ldw	ra,4(sp)
 400802c:	df000017 	ldw	fp,0(sp)
 4008030:	dec00204 	addi	sp,sp,8
 4008034:	f800283a 	ret

04008038 <_ZN10W5100Class9writeRMSREh>:
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size (W5100 only)
 4008038:	defffd04 	addi	sp,sp,-12
 400803c:	dfc00215 	stw	ra,8(sp)
 4008040:	df000115 	stw	fp,4(sp)
 4008044:	df000104 	addi	fp,sp,4
 4008048:	2005883a 	mov	r2,r4
 400804c:	e0bfff05 	stb	r2,-4(fp)
 4008050:	e0bfff03 	ldbu	r2,-4(fp)
 4008054:	100b883a 	mov	r5,r2
 4008058:	01000684 	movi	r4,26
 400805c:	400335c0 	call	400335c <_ZN10W5100Class5writeEth>
 4008060:	0001883a 	nop
 4008064:	e037883a 	mov	sp,fp
 4008068:	dfc00117 	ldw	ra,4(sp)
 400806c:	df000017 	ldw	fp,0(sp)
 4008070:	dec00204 	addi	sp,sp,8
 4008074:	f800283a 	ret

04008078 <_ZN10W5100Class9writeTMSREh>:
  __GP_REGISTER8 (TMSR,   0x001B);    // Transmit memory size (W5100 only)
 4008078:	defffd04 	addi	sp,sp,-12
 400807c:	dfc00215 	stw	ra,8(sp)
 4008080:	df000115 	stw	fp,4(sp)
 4008084:	df000104 	addi	fp,sp,4
 4008088:	2005883a 	mov	r2,r4
 400808c:	e0bfff05 	stb	r2,-4(fp)
 4008090:	e0bfff03 	ldbu	r2,-4(fp)
 4008094:	100b883a 	mov	r5,r2
 4008098:	010006c4 	movi	r4,27
 400809c:	400335c0 	call	400335c <_ZN10W5100Class5writeEth>
 40080a0:	0001883a 	nop
 40080a4:	e037883a 	mov	sp,fp
 40080a8:	dfc00117 	ldw	ra,4(sp)
 40080ac:	df000017 	ldw	fp,0(sp)
 40080b0:	dec00204 	addi	sp,sp,8
 40080b4:	f800283a 	ret

040080b8 <_ZN10W5100Class18readVERSIONR_W5200Ev>:
  __GP_REGISTER8 (PATR,   0x001C);    // Authentication type address in PPPoE mode
  __GP_REGISTER8 (PTIMER, 0x0028);    // PPP LCP Request Timer
  __GP_REGISTER8 (PMAGIC, 0x0029);    // PPP LCP Magic Number
  __GP_REGISTER_N(UIPR,   0x002A, 4); // Unreachable IP address in UDP mode (W5100 only)
  __GP_REGISTER16(UPORT,  0x002E);    // Unreachable Port address in UDP mode (W5100 only)
  __GP_REGISTER8 (VERSIONR_W5200,0x001F);   // Chip Version Register (W5200 only)
 40080b8:	defffe04 	addi	sp,sp,-8
 40080bc:	dfc00115 	stw	ra,4(sp)
 40080c0:	df000015 	stw	fp,0(sp)
 40080c4:	d839883a 	mov	fp,sp
 40080c8:	010007c4 	movi	r4,31
 40080cc:	4006a680 	call	4006a68 <_ZN10W5100Class4readEt>
 40080d0:	e037883a 	mov	sp,fp
 40080d4:	dfc00117 	ldw	ra,4(sp)
 40080d8:	df000017 	ldw	fp,0(sp)
 40080dc:	dec00204 	addi	sp,sp,8
 40080e0:	f800283a 	ret

040080e4 <_ZN10W5100Class18readVERSIONR_W5500Ev>:
  __GP_REGISTER8 (VERSIONR_W5500,0x0039);   // Chip Version Register (W5500 only)
 40080e4:	defffe04 	addi	sp,sp,-8
 40080e8:	dfc00115 	stw	ra,4(sp)
 40080ec:	df000015 	stw	fp,0(sp)
 40080f0:	d839883a 	mov	fp,sp
 40080f4:	01000e44 	movi	r4,57
 40080f8:	4006a680 	call	4006a68 <_ZN10W5100Class4readEt>
 40080fc:	e037883a 	mov	sp,fp
 4008100:	dfc00117 	ldw	ra,4(sp)
 4008104:	df000017 	ldw	fp,0(sp)
 4008108:	dec00204 	addi	sp,sp,8
 400810c:	f800283a 	ret

04008110 <_ZN10W5100Class17readPSTATUS_W5200Ev>:
  __GP_REGISTER8 (PSTATUS_W5200,     0x0035);    // PHY Status
 4008110:	defffe04 	addi	sp,sp,-8
 4008114:	dfc00115 	stw	ra,4(sp)
 4008118:	df000015 	stw	fp,0(sp)
 400811c:	d839883a 	mov	fp,sp
 4008120:	01000d44 	movi	r4,53
 4008124:	4006a680 	call	4006a68 <_ZN10W5100Class4readEt>
 4008128:	e037883a 	mov	sp,fp
 400812c:	dfc00117 	ldw	ra,4(sp)
 4008130:	df000017 	ldw	fp,0(sp)
 4008134:	dec00204 	addi	sp,sp,8
 4008138:	f800283a 	ret

0400813c <_ZN10W5100Class17readPHYCFGR_W5500Ev>:
  __GP_REGISTER8 (PHYCFGR_W5500,     0x002E);    // PHY Configuration register, default: 10111xxx
 400813c:	defffe04 	addi	sp,sp,-8
 4008140:	dfc00115 	stw	ra,4(sp)
 4008144:	df000015 	stw	fp,0(sp)
 4008148:	d839883a 	mov	fp,sp
 400814c:	01000b84 	movi	r4,46
 4008150:	4006a680 	call	4006a68 <_ZN10W5100Class4readEt>
 4008154:	e037883a 	mov	sp,fp
 4008158:	dfc00117 	ldw	ra,4(sp)
 400815c:	df000017 	ldw	fp,0(sp)
 4008160:	dec00204 	addi	sp,sp,8
 4008164:	f800283a 	ret

04008168 <_ZN10W5100Class9writeSnCREhh>:
    return readSn(_s, address, _buff, size);                 \
  }

public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
 4008168:	defffc04 	addi	sp,sp,-16
 400816c:	dfc00315 	stw	ra,12(sp)
 4008170:	df000215 	stw	fp,8(sp)
 4008174:	df000204 	addi	fp,sp,8
 4008178:	2007883a 	mov	r3,r4
 400817c:	2805883a 	mov	r2,r5
 4008180:	e0fffe05 	stb	r3,-8(fp)
 4008184:	e0bfff05 	stb	r2,-4(fp)
 4008188:	e0bffe03 	ldbu	r2,-8(fp)
 400818c:	e0ffff03 	ldbu	r3,-4(fp)
 4008190:	180d883a 	mov	r6,r3
 4008194:	01400044 	movi	r5,1
 4008198:	1009883a 	mov	r4,r2
 400819c:	4006b0c0 	call	4006b0c <_ZN10W5100Class7writeSnEhth>
 40081a0:	0001883a 	nop
 40081a4:	e037883a 	mov	sp,fp
 40081a8:	dfc00117 	ldw	ra,4(sp)
 40081ac:	df000017 	ldw	fp,0(sp)
 40081b0:	dec00204 	addi	sp,sp,8
 40081b4:	f800283a 	ret

040081b8 <_ZN10W5100Class8readSnCREh>:
 40081b8:	defffd04 	addi	sp,sp,-12
 40081bc:	dfc00215 	stw	ra,8(sp)
 40081c0:	df000115 	stw	fp,4(sp)
 40081c4:	df000104 	addi	fp,sp,4
 40081c8:	2005883a 	mov	r2,r4
 40081cc:	e0bfff05 	stb	r2,-4(fp)
 40081d0:	e0bfff03 	ldbu	r2,-4(fp)
 40081d4:	01400044 	movi	r5,1
 40081d8:	1009883a 	mov	r4,r2
 40081dc:	4006aac0 	call	4006aac <_ZN10W5100Class6readSnEht>
 40081e0:	e037883a 	mov	sp,fp
 40081e4:	dfc00117 	ldw	ra,4(sp)
 40081e8:	df000017 	ldw	fp,0(sp)
 40081ec:	dec00204 	addi	sp,sp,8
 40081f0:	f800283a 	ret

040081f4 <_ZN10W5100Class14writeSnRX_SIZEEhh>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER8(SnRX_SIZE,   0x001E)        // RX Memory Size (W5200 only)
 40081f4:	defffc04 	addi	sp,sp,-16
 40081f8:	dfc00315 	stw	ra,12(sp)
 40081fc:	df000215 	stw	fp,8(sp)
 4008200:	df000204 	addi	fp,sp,8
 4008204:	2007883a 	mov	r3,r4
 4008208:	2805883a 	mov	r2,r5
 400820c:	e0fffe05 	stb	r3,-8(fp)
 4008210:	e0bfff05 	stb	r2,-4(fp)
 4008214:	e0bffe03 	ldbu	r2,-8(fp)
 4008218:	e0ffff03 	ldbu	r3,-4(fp)
 400821c:	180d883a 	mov	r6,r3
 4008220:	01400784 	movi	r5,30
 4008224:	1009883a 	mov	r4,r2
 4008228:	4006b0c0 	call	4006b0c <_ZN10W5100Class7writeSnEhth>
 400822c:	0001883a 	nop
 4008230:	e037883a 	mov	sp,fp
 4008234:	dfc00117 	ldw	ra,4(sp)
 4008238:	df000017 	ldw	fp,0(sp)
 400823c:	dec00204 	addi	sp,sp,8
 4008240:	f800283a 	ret

04008244 <_ZN10W5100Class14writeSnTX_SIZEEhh>:
  __SOCKET_REGISTER8(SnTX_SIZE,   0x001F)        // RX Memory Size (W5200 only)
 4008244:	defffc04 	addi	sp,sp,-16
 4008248:	dfc00315 	stw	ra,12(sp)
 400824c:	df000215 	stw	fp,8(sp)
 4008250:	df000204 	addi	fp,sp,8
 4008254:	2007883a 	mov	r3,r4
 4008258:	2805883a 	mov	r2,r5
 400825c:	e0fffe05 	stb	r3,-8(fp)
 4008260:	e0bfff05 	stb	r2,-4(fp)
 4008264:	e0bffe03 	ldbu	r2,-8(fp)
 4008268:	e0ffff03 	ldbu	r3,-4(fp)
 400826c:	180d883a 	mov	r6,r3
 4008270:	014007c4 	movi	r5,31
 4008274:	1009883a 	mov	r4,r2
 4008278:	4006b0c0 	call	4006b0c <_ZN10W5100Class7writeSnEhth>
 400827c:	0001883a 	nop
 4008280:	e037883a 	mov	sp,fp
 4008284:	dfc00117 	ldw	ra,4(sp)
 4008288:	df000017 	ldw	fp,0(sp)
 400828c:	dec00204 	addi	sp,sp,8
 4008290:	f800283a 	ret

04008294 <_ZN10W5100Class6initSSEv>:
	}
	inline static void resetSS() {
		*(ss_pin_reg+6) = ss_pin_mask;
	}
#else
	inline static void initSS() {
 4008294:	deffff04 	addi	sp,sp,-4
 4008298:	df000015 	stw	fp,0(sp)
 400829c:	d839883a 	mov	fp,sp
		//pinMode(ss_pin, OUTPUT);
	}
 40082a0:	0001883a 	nop
 40082a4:	e037883a 	mov	sp,fp
 40082a8:	df000017 	ldw	fp,0(sp)
 40082ac:	dec00104 	addi	sp,sp,4
 40082b0:	f800283a 	ret

040082b4 <_ZN10W5100Class5setSSEv>:
	inline static void setSS() {
 40082b4:	deffff04 	addi	sp,sp,-4
 40082b8:	df000015 	stw	fp,0(sp)
 40082bc:	d839883a 	mov	fp,sp
		//digitalWrite(ss_pin, LOW);
	}
 40082c0:	0001883a 	nop
 40082c4:	e037883a 	mov	sp,fp
 40082c8:	df000017 	ldw	fp,0(sp)
 40082cc:	dec00104 	addi	sp,sp,4
 40082d0:	f800283a 	ret

040082d4 <_ZN10W5100Class7resetSSEv>:
	inline static void resetSS() {
 40082d4:	deffff04 	addi	sp,sp,-4
 40082d8:	df000015 	stw	fp,0(sp)
 40082dc:	d839883a 	mov	fp,sp
		//digitalWrite(ss_pin, HIGH);
	}
 40082e0:	0001883a 	nop
 40082e4:	e037883a 	mov	sp,fp
 40082e8:	df000017 	ldw	fp,0(sp)
 40082ec:	dec00104 	addi	sp,sp,4
 40082f0:	f800283a 	ret

040082f4 <main>:

// Enter a MAC address for your controller below.
// Newer Ethernet shields have a MAC address printed on a sticker on the shield
unsigned char mac[] = { 0xA8, 0x61, 0x0A, 0xAE, 0x74, 0xA6 };

int main() {
 40082f4:	deffe204 	addi	sp,sp,-120
 40082f8:	dfc01d15 	stw	ra,116(sp)
 40082fc:	df001c15 	stw	fp,112(sp)
 4008300:	df001c04 	addi	fp,sp,112
	unsigned char cmd[50];
	unsigned char buf[50];

	// write to Gateway IP Address Register
	cmd[0] = 0x00;
 4008304:	e03fe705 	stb	zero,-100(fp)
	cmd[1] = 0x01;
 4008308:	00800044 	movi	r2,1
 400830c:	e0bfe745 	stb	r2,-99(fp)
	cmd[2] = 0x05;
 4008310:	00800144 	movi	r2,5
 4008314:	e0bfe785 	stb	r2,-98(fp)
	cmd[3] = 0xC0;
 4008318:	00bff004 	movi	r2,-64
 400831c:	e0bfe7c5 	stb	r2,-97(fp)

	printf("writing...");
 4008320:	010100b4 	movhi	r4,1026
 4008324:	21292f04 	addi	r4,r4,-23364
 4008328:	400b5480 	call	400b548 <printf>
    alt_avalon_spi_command(
        SPI_0_BASE, 0,      // SPI_0 base address, slave address
        4, cmd,            // Write length, write data pointer
		0, NULL,       // Read data, read buffer pointer
        0                   // Flags
	);
 400832c:	d8000215 	stw	zero,8(sp)
 4008330:	d8000115 	stw	zero,4(sp)
 4008334:	d8000015 	stw	zero,0(sp)
 4008338:	e1ffe704 	addi	r7,fp,-100
 400833c:	01800104 	movi	r6,4
 4008340:	000b883a 	mov	r5,zero
 4008344:	01020034 	movhi	r4,2048
 4008348:	21142804 	addi	r4,r4,20640
 400834c:	4018c380 	call	4018c38 <alt_avalon_spi_command>

    usleep(100000);
 4008350:	010000b4 	movhi	r4,2
 4008354:	2121a804 	addi	r4,r4,-31072
 4008358:	4017f980 	call	4017f98 <usleep>

    // read from Gateway IP Address Register
	// offset address = 0x18, RWB = 0, 0M = 0
	cmd[0] = 0x00;
 400835c:	e03fe705 	stb	zero,-100(fp)
	cmd[1] = 0x01;
 4008360:	00800044 	movi	r2,1
 4008364:	e0bfe745 	stb	r2,-99(fp)
	cmd[2] = 0x01;
 4008368:	00800044 	movi	r2,1
 400836c:	e0bfe785 	stb	r2,-98(fp)
    alt_avalon_spi_command(
        SPI_0_BASE, 0,      // SPI_0 base address, slave address
        3, cmd,            // Write length, write data pointer
		1, buf,       // Read data, read buffer pointer
        0                   // Flags
	);
 4008370:	d8000215 	stw	zero,8(sp)
 4008374:	e0bff384 	addi	r2,fp,-50
 4008378:	d8800115 	stw	r2,4(sp)
 400837c:	00800044 	movi	r2,1
 4008380:	d8800015 	stw	r2,0(sp)
 4008384:	e1ffe704 	addi	r7,fp,-100
 4008388:	018000c4 	movi	r6,3
 400838c:	000b883a 	mov	r5,zero
 4008390:	01020034 	movhi	r4,2048
 4008394:	21142804 	addi	r4,r4,20640
 4008398:	4018c380 	call	4018c38 <alt_avalon_spi_command>

    printf("buf: %x\n", buf[0]);
 400839c:	e0bff383 	ldbu	r2,-50(fp)
 40083a0:	10803fcc 	andi	r2,r2,255
 40083a4:	100b883a 	mov	r5,r2
 40083a8:	010100b4 	movhi	r4,1026
 40083ac:	21293204 	addi	r4,r4,-23352
 40083b0:	400b5480 	call	400b548 <printf>
//	  } else {
//	    printf("  DHCP assigned IP ");
//	    //printf(Ethernet.localIP());
//	  }

}
 40083b4:	0005883a 	mov	r2,zero
 40083b8:	e037883a 	mov	sp,fp
 40083bc:	dfc00117 	ldw	ra,4(sp)
 40083c0:	df000017 	ldw	fp,0(sp)
 40083c4:	dec00204 	addi	sp,sp,8
 40083c8:	f800283a 	ret

040083cc <_Z41__static_initialization_and_destruction_0ii>:
 40083cc:	defffb04 	addi	sp,sp,-20
 40083d0:	dfc00415 	stw	ra,16(sp)
 40083d4:	df000315 	stw	fp,12(sp)
 40083d8:	df000304 	addi	fp,sp,12
 40083dc:	e13ffe15 	stw	r4,-8(fp)
 40083e0:	e17fff15 	stw	r5,-4(fp)
 40083e4:	e0bffe17 	ldw	r2,-8(fp)
 40083e8:	10800058 	cmpnei	r2,r2,1
 40083ec:	1000091e 	bne	r2,zero,4008414 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40083f0:	e0ffff17 	ldw	r3,-4(fp)
 40083f4:	00bfffd4 	movui	r2,65535
 40083f8:	1880061e 	bne	r3,r2,4008414 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40083fc:	d8000015 	stw	zero,0(sp)
 4008400:	000f883a 	mov	r7,zero
 4008404:	000d883a 	mov	r6,zero
 4008408:	000b883a 	mov	r5,zero
 400840c:	d13ca904 	addi	r4,gp,-3420
 4008410:	40071a80 	call	40071a8 <_ZN9IPAddressC1Ehhhh>
 4008414:	0001883a 	nop
 4008418:	e037883a 	mov	sp,fp
 400841c:	dfc00117 	ldw	ra,4(sp)
 4008420:	df000017 	ldw	fp,0(sp)
 4008424:	dec00204 	addi	sp,sp,8
 4008428:	f800283a 	ret

0400842c <_GLOBAL__sub_I_mac>:
 400842c:	defffe04 	addi	sp,sp,-8
 4008430:	dfc00115 	stw	ra,4(sp)
 4008434:	df000015 	stw	fp,0(sp)
 4008438:	d839883a 	mov	fp,sp
 400843c:	017fffd4 	movui	r5,65535
 4008440:	01000044 	movi	r4,1
 4008444:	40083cc0 	call	40083cc <_Z41__static_initialization_and_destruction_0ii>
 4008448:	e037883a 	mov	sp,fp
 400844c:	dfc00117 	ldw	ra,4(sp)
 4008450:	df000017 	ldw	fp,0(sp)
 4008454:	dec00204 	addi	sp,sp,8
 4008458:	f800283a 	ret

0400845c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 400845c:	008100b4 	movhi	r2,1026
 4008460:	10a94404 	addi	r2,r2,-23280
 4008464:	20800015 	stw	r2,0(r4)
 4008468:	4009b901 	jmpi	4009b90 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0400846c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 400846c:	defffe04 	addi	sp,sp,-8
 4008470:	008100b4 	movhi	r2,1026
 4008474:	dc000015 	stw	r16,0(sp)
 4008478:	dfc00115 	stw	ra,4(sp)
 400847c:	10a94404 	addi	r2,r2,-23280
 4008480:	20800015 	stw	r2,0(r4)
 4008484:	2021883a 	mov	r16,r4
 4008488:	4009b900 	call	4009b90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 400848c:	8009883a 	mov	r4,r16
 4008490:	dfc00117 	ldw	ra,4(sp)
 4008494:	dc000017 	ldw	r16,0(sp)
 4008498:	dec00204 	addi	sp,sp,8
 400849c:	40097601 	jmpi	4009760 <_ZdlPv>

040084a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 40084a0:	defff504 	addi	sp,sp,-44
 40084a4:	dc000115 	stw	r16,4(sp)
 40084a8:	38800117 	ldw	r2,4(r7)
 40084ac:	24000117 	ldw	r16,4(r4)
 40084b0:	df000915 	stw	fp,36(sp)
 40084b4:	ddc00815 	stw	r23,32(sp)
 40084b8:	dd800715 	stw	r22,28(sp)
 40084bc:	dcc00415 	stw	r19,16(sp)
 40084c0:	dc800315 	stw	r18,12(sp)
 40084c4:	dc400215 	stw	r17,8(sp)
 40084c8:	dfc00a15 	stw	ra,40(sp)
 40084cc:	dd400615 	stw	r21,24(sp)
 40084d0:	dd000515 	stw	r20,20(sp)
 40084d4:	2823883a 	mov	r17,r5
 40084d8:	3039883a 	mov	fp,r6
 40084dc:	dcc00b17 	ldw	r19,44(sp)
 40084e0:	ddc00c17 	ldw	r23,48(sp)
 40084e4:	dd800d17 	ldw	r22,52(sp)
 40084e8:	dc800e17 	ldw	r18,56(sp)
 40084ec:	80800b26 	beq	r16,r2,400851c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 40084f0:	80c00007 	ldb	r3,0(r16)
 40084f4:	2029883a 	mov	r20,r4
 40084f8:	01000a84 	movi	r4,42
 40084fc:	382b883a 	mov	r21,r7
 4008500:	19001a26 	beq	r3,r4,400856c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 4008504:	100b883a 	mov	r5,r2
 4008508:	8009883a 	mov	r4,r16
 400850c:	d8c00015 	stw	r3,0(sp)
 4008510:	400b9b00 	call	400b9b0 <strcmp>
 4008514:	d8c00017 	ldw	r3,0(sp)
 4008518:	1000141e 	bne	r2,zero,400856c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400851c:	94c00015 	stw	r19,0(r18)
 4008520:	97000115 	stw	fp,4(r18)
 4008524:	88002816 	blt	r17,zero,40085c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 4008528:	9c63883a 	add	r17,r19,r17
 400852c:	b4403226 	beq	r22,r17,40085f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 4008530:	00800044 	movi	r2,1
 4008534:	90800315 	stw	r2,12(r18)
 4008538:	0005883a 	mov	r2,zero
 400853c:	dfc00a17 	ldw	ra,40(sp)
 4008540:	df000917 	ldw	fp,36(sp)
 4008544:	ddc00817 	ldw	r23,32(sp)
 4008548:	dd800717 	ldw	r22,28(sp)
 400854c:	dd400617 	ldw	r21,24(sp)
 4008550:	dd000517 	ldw	r20,20(sp)
 4008554:	dcc00417 	ldw	r19,16(sp)
 4008558:	dc800317 	ldw	r18,12(sp)
 400855c:	dc400217 	ldw	r17,8(sp)
 4008560:	dc000117 	ldw	r16,4(sp)
 4008564:	dec00b04 	addi	sp,sp,44
 4008568:	f800283a 	ret
 400856c:	9d801926 	beq	r19,r22,40085d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 4008570:	a1000217 	ldw	r4,8(r20)
 4008574:	a80f883a 	mov	r7,r21
 4008578:	e00d883a 	mov	r6,fp
 400857c:	20800017 	ldw	r2,0(r4)
 4008580:	dc800e15 	stw	r18,56(sp)
 4008584:	dd800d15 	stw	r22,52(sp)
 4008588:	ddc00c15 	stw	r23,48(sp)
 400858c:	dcc00b15 	stw	r19,44(sp)
 4008590:	10800717 	ldw	r2,28(r2)
 4008594:	880b883a 	mov	r5,r17
 4008598:	dfc00a17 	ldw	ra,40(sp)
 400859c:	df000917 	ldw	fp,36(sp)
 40085a0:	ddc00817 	ldw	r23,32(sp)
 40085a4:	dd800717 	ldw	r22,28(sp)
 40085a8:	dd400617 	ldw	r21,24(sp)
 40085ac:	dd000517 	ldw	r20,20(sp)
 40085b0:	dcc00417 	ldw	r19,16(sp)
 40085b4:	dc800317 	ldw	r18,12(sp)
 40085b8:	dc400217 	ldw	r17,8(sp)
 40085bc:	dc000117 	ldw	r16,4(sp)
 40085c0:	dec00b04 	addi	sp,sp,44
 40085c4:	1000683a 	jmp	r2
 40085c8:	00bfff84 	movi	r2,-2
 40085cc:	88bfda1e 	bne	r17,r2,4008538 <__alt_data_end+0xfc008538>
 40085d0:	003fd706 	br	4008530 <__alt_data_end+0xfc008530>
 40085d4:	b9400117 	ldw	r5,4(r23)
 40085d8:	81400526 	beq	r16,r5,40085f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 40085dc:	00800a84 	movi	r2,42
 40085e0:	18bfe326 	beq	r3,r2,4008570 <__alt_data_end+0xfc008570>
 40085e4:	8009883a 	mov	r4,r16
 40085e8:	400b9b00 	call	400b9b0 <strcmp>
 40085ec:	103fe01e 	bne	r2,zero,4008570 <__alt_data_end+0xfc008570>
 40085f0:	97000215 	stw	fp,8(r18)
 40085f4:	003fd006 	br	4008538 <__alt_data_end+0xfc008538>
 40085f8:	00800184 	movi	r2,6
 40085fc:	003fcd06 	br	4008534 <__alt_data_end+0xfc008534>

04008600 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 4008600:	defffa04 	addi	sp,sp,-24
 4008604:	dc000215 	stw	r16,8(sp)
 4008608:	dc000617 	ldw	r16,24(sp)
 400860c:	dc800415 	stw	r18,16(sp)
 4008610:	dc400315 	stw	r17,12(sp)
 4008614:	dfc00515 	stw	ra,20(sp)
 4008618:	2023883a 	mov	r17,r4
 400861c:	2825883a 	mov	r18,r5
 4008620:	81800b26 	beq	r16,r6,4008650 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 4008624:	89000217 	ldw	r4,8(r17)
 4008628:	900b883a 	mov	r5,r18
 400862c:	20800017 	ldw	r2,0(r4)
 4008630:	dc000615 	stw	r16,24(sp)
 4008634:	10800817 	ldw	r2,32(r2)
 4008638:	dfc00517 	ldw	ra,20(sp)
 400863c:	dc800417 	ldw	r18,16(sp)
 4008640:	dc400317 	ldw	r17,12(sp)
 4008644:	dc000217 	ldw	r16,8(sp)
 4008648:	dec00604 	addi	sp,sp,24
 400864c:	1000683a 	jmp	r2
 4008650:	21000117 	ldw	r4,4(r4)
 4008654:	39400117 	ldw	r5,4(r7)
 4008658:	21400926 	beq	r4,r5,4008680 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 400865c:	20c00007 	ldb	r3,0(r4)
 4008660:	00800a84 	movi	r2,42
 4008664:	18bfef26 	beq	r3,r2,4008624 <__alt_data_end+0xfc008624>
 4008668:	d9800015 	stw	r6,0(sp)
 400866c:	d9c00115 	stw	r7,4(sp)
 4008670:	400b9b00 	call	400b9b0 <strcmp>
 4008674:	d9800017 	ldw	r6,0(sp)
 4008678:	d9c00117 	ldw	r7,4(sp)
 400867c:	103fe91e 	bne	r2,zero,4008624 <__alt_data_end+0xfc008624>
 4008680:	00800184 	movi	r2,6
 4008684:	dfc00517 	ldw	ra,20(sp)
 4008688:	dc800417 	ldw	r18,16(sp)
 400868c:	dc400317 	ldw	r17,12(sp)
 4008690:	dc000217 	ldw	r16,8(sp)
 4008694:	dec00604 	addi	sp,sp,24
 4008698:	f800283a 	ret

0400869c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 400869c:	defffb04 	addi	sp,sp,-20
 40086a0:	dcc00315 	stw	r19,12(sp)
 40086a4:	dc800215 	stw	r18,8(sp)
 40086a8:	dc400115 	stw	r17,4(sp)
 40086ac:	dc000015 	stw	r16,0(sp)
 40086b0:	dfc00415 	stw	ra,16(sp)
 40086b4:	2027883a 	mov	r19,r4
 40086b8:	2821883a 	mov	r16,r5
 40086bc:	3023883a 	mov	r17,r6
 40086c0:	3825883a 	mov	r18,r7
 40086c4:	4009bd40 	call	4009bd4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 40086c8:	10c03fcc 	andi	r3,r2,255
 40086cc:	18000726 	beq	r3,zero,40086ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 40086d0:	dfc00417 	ldw	ra,16(sp)
 40086d4:	dcc00317 	ldw	r19,12(sp)
 40086d8:	dc800217 	ldw	r18,8(sp)
 40086dc:	dc400117 	ldw	r17,4(sp)
 40086e0:	dc000017 	ldw	r16,0(sp)
 40086e4:	dec00504 	addi	sp,sp,20
 40086e8:	f800283a 	ret
 40086ec:	99000217 	ldw	r4,8(r19)
 40086f0:	900f883a 	mov	r7,r18
 40086f4:	880d883a 	mov	r6,r17
 40086f8:	20800017 	ldw	r2,0(r4)
 40086fc:	800b883a 	mov	r5,r16
 4008700:	10800617 	ldw	r2,24(r2)
 4008704:	dfc00417 	ldw	ra,16(sp)
 4008708:	dcc00317 	ldw	r19,12(sp)
 400870c:	dc800217 	ldw	r18,8(sp)
 4008710:	dc400117 	ldw	r17,4(sp)
 4008714:	dc000017 	ldw	r16,0(sp)
 4008718:	dec00504 	addi	sp,sp,20
 400871c:	1000683a 	jmp	r2

04008720 <_ZNSt9type_infoD1Ev>:
 4008720:	f800283a 	ret

04008724 <_ZNKSt9type_info14__is_pointer_pEv>:
 4008724:	0005883a 	mov	r2,zero
 4008728:	f800283a 	ret

0400872c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 400872c:	0005883a 	mov	r2,zero
 4008730:	f800283a 	ret

04008734 <_ZNSt9type_infoD0Ev>:
 4008734:	40097601 	jmpi	4009760 <_ZdlPv>

04008738 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 4008738:	21000117 	ldw	r4,4(r4)
 400873c:	29400117 	ldw	r5,4(r5)
 4008740:	21400c26 	beq	r4,r5,4008774 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 4008744:	20c00007 	ldb	r3,0(r4)
 4008748:	00800a84 	movi	r2,42
 400874c:	18800726 	beq	r3,r2,400876c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 4008750:	deffff04 	addi	sp,sp,-4
 4008754:	dfc00015 	stw	ra,0(sp)
 4008758:	400b9b00 	call	400b9b0 <strcmp>
 400875c:	1005003a 	cmpeq	r2,r2,zero
 4008760:	dfc00017 	ldw	ra,0(sp)
 4008764:	dec00104 	addi	sp,sp,4
 4008768:	f800283a 	ret
 400876c:	0005883a 	mov	r2,zero
 4008770:	f800283a 	ret
 4008774:	00800044 	movi	r2,1
 4008778:	f800283a 	ret

0400877c <_ZL21size_of_encoded_valueh>:
 400877c:	deffff04 	addi	sp,sp,-4
 4008780:	dfc00015 	stw	ra,0(sp)
 4008784:	20c03fcc 	andi	r3,r4,255
 4008788:	00803fc4 	movi	r2,255
 400878c:	18802026 	beq	r3,r2,4008810 <_ZL21size_of_encoded_valueh+0x94>
 4008790:	210001cc 	andi	r4,r4,7
 4008794:	00800144 	movi	r2,5
 4008798:	11001c36 	bltu	r2,r4,400880c <_ZL21size_of_encoded_valueh+0x90>
 400879c:	200890ba 	slli	r4,r4,2
 40087a0:	00810074 	movhi	r2,1025
 40087a4:	10a1ed04 	addi	r2,r2,-30796
 40087a8:	2089883a 	add	r4,r4,r2
 40087ac:	20800017 	ldw	r2,0(r4)
 40087b0:	1000683a 	jmp	r2
 40087b4:	040087cc 	andi	r16,zero,543
 40087b8:	0400880c 	andi	r16,zero,544
 40087bc:	040087dc 	xori	r16,zero,543
 40087c0:	040087cc 	andi	r16,zero,543
 40087c4:	040087fc 	xorhi	r16,zero,543
 40087c8:	040087ec 	andhi	r16,zero,543
 40087cc:	00800104 	movi	r2,4
 40087d0:	dfc00017 	ldw	ra,0(sp)
 40087d4:	dec00104 	addi	sp,sp,4
 40087d8:	f800283a 	ret
 40087dc:	00800084 	movi	r2,2
 40087e0:	dfc00017 	ldw	ra,0(sp)
 40087e4:	dec00104 	addi	sp,sp,4
 40087e8:	f800283a 	ret
 40087ec:	00800044 	movi	r2,1
 40087f0:	dfc00017 	ldw	ra,0(sp)
 40087f4:	dec00104 	addi	sp,sp,4
 40087f8:	f800283a 	ret
 40087fc:	00800204 	movi	r2,8
 4008800:	dfc00017 	ldw	ra,0(sp)
 4008804:	dec00104 	addi	sp,sp,4
 4008808:	f800283a 	ret
 400880c:	400a9940 	call	400a994 <abort>
 4008810:	0005883a 	mov	r2,zero
 4008814:	dfc00017 	ldw	ra,0(sp)
 4008818:	dec00104 	addi	sp,sp,4
 400881c:	f800283a 	ret

04008820 <_ZL28read_encoded_value_with_basehjPKhPj>:
 4008820:	deffff04 	addi	sp,sp,-4
 4008824:	dfc00015 	stw	ra,0(sp)
 4008828:	20c03fcc 	andi	r3,r4,255
 400882c:	00801404 	movi	r2,80
 4008830:	18807326 	beq	r3,r2,4008a00 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
 4008834:	20c003cc 	andi	r3,r4,15
 4008838:	00800304 	movi	r2,12
 400883c:	10c06f36 	bltu	r2,r3,40089fc <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
 4008840:	180690ba 	slli	r3,r3,2
 4008844:	02010074 	movhi	r8,1025
 4008848:	42221604 	addi	r8,r8,-30632
 400884c:	1a07883a 	add	r3,r3,r8
 4008850:	18800017 	ldw	r2,0(r3)
 4008854:	1000683a 	jmp	r2
 4008858:	0400888c 	andi	r16,zero,546
 400885c:	040089a8 	cmpgeui	r16,zero,550
 4008860:	040089e4 	muli	r16,zero,551
 4008864:	0400888c 	andi	r16,zero,546
 4008868:	040088f0 	cmpltui	r16,zero,547
 400886c:	04008944 	movi	r16,549
 4008870:	040089fc 	xorhi	r16,zero,551
 4008874:	040089fc 	xorhi	r16,zero,551
 4008878:	040089fc 	xorhi	r16,zero,551
 400887c:	04008950 	cmplti	r16,zero,549
 4008880:	04008920 	cmpeqi	r16,zero,548
 4008884:	0400888c 	andi	r16,zero,546
 4008888:	040088f0 	cmpltui	r16,zero,547
 400888c:	30800043 	ldbu	r2,1(r6)
 4008890:	30c00083 	ldbu	r3,2(r6)
 4008894:	324000c3 	ldbu	r9,3(r6)
 4008898:	32000003 	ldbu	r8,0(r6)
 400889c:	1004923a 	slli	r2,r2,8
 40088a0:	1806943a 	slli	r3,r3,16
 40088a4:	4812963a 	slli	r9,r9,24
 40088a8:	1204b03a 	or	r2,r2,r8
 40088ac:	1884b03a 	or	r2,r3,r2
 40088b0:	4886b03a 	or	r3,r9,r2
 40088b4:	30800104 	addi	r2,r6,4
 40088b8:	18000926 	beq	r3,zero,40088e0 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 40088bc:	22001c0c 	andi	r8,r4,112
 40088c0:	02400404 	movi	r9,16
 40088c4:	42405726 	beq	r8,r9,4008a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
 40088c8:	21003fcc 	andi	r4,r4,255
 40088cc:	2100201c 	xori	r4,r4,128
 40088d0:	213fe004 	addi	r4,r4,-128
 40088d4:	1947883a 	add	r3,r3,r5
 40088d8:	2000010e 	bge	r4,zero,40088e0 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 40088dc:	18c00017 	ldw	r3,0(r3)
 40088e0:	38c00015 	stw	r3,0(r7)
 40088e4:	dfc00017 	ldw	ra,0(sp)
 40088e8:	dec00104 	addi	sp,sp,4
 40088ec:	f800283a 	ret
 40088f0:	30800043 	ldbu	r2,1(r6)
 40088f4:	30c00083 	ldbu	r3,2(r6)
 40088f8:	324000c3 	ldbu	r9,3(r6)
 40088fc:	32000003 	ldbu	r8,0(r6)
 4008900:	1004923a 	slli	r2,r2,8
 4008904:	1806943a 	slli	r3,r3,16
 4008908:	4812963a 	slli	r9,r9,24
 400890c:	1204b03a 	or	r2,r2,r8
 4008910:	1884b03a 	or	r2,r3,r2
 4008914:	4886b03a 	or	r3,r9,r2
 4008918:	30800204 	addi	r2,r6,8
 400891c:	003fe606 	br	40088b8 <__alt_data_end+0xfc0088b8>
 4008920:	30c00043 	ldbu	r3,1(r6)
 4008924:	32000003 	ldbu	r8,0(r6)
 4008928:	30800084 	addi	r2,r6,2
 400892c:	1806923a 	slli	r3,r3,8
 4008930:	1a06b03a 	or	r3,r3,r8
 4008934:	18ffffcc 	andi	r3,r3,65535
 4008938:	18e0001c 	xori	r3,r3,32768
 400893c:	18e00004 	addi	r3,r3,-32768
 4008940:	003fdd06 	br	40088b8 <__alt_data_end+0xfc0088b8>
 4008944:	30c00003 	ldbu	r3,0(r6)
 4008948:	30800044 	addi	r2,r6,1
 400894c:	003fda06 	br	40088b8 <__alt_data_end+0xfc0088b8>
 4008950:	3017883a 	mov	r11,r6
 4008954:	0007883a 	mov	r3,zero
 4008958:	0013883a 	mov	r9,zero
 400895c:	5a800003 	ldbu	r10,0(r11)
 4008960:	58800044 	addi	r2,r11,1
 4008964:	1017883a 	mov	r11,r2
 4008968:	52001fcc 	andi	r8,r10,127
 400896c:	4250983a 	sll	r8,r8,r9
 4008970:	53003fcc 	andi	r12,r10,255
 4008974:	6300201c 	xori	r12,r12,128
 4008978:	633fe004 	addi	r12,r12,-128
 400897c:	1a06b03a 	or	r3,r3,r8
 4008980:	4a4001c4 	addi	r9,r9,7
 4008984:	603ff516 	blt	r12,zero,400895c <__alt_data_end+0xfc00895c>
 4008988:	020007c4 	movi	r8,31
 400898c:	427fca36 	bltu	r8,r9,40088b8 <__alt_data_end+0xfc0088b8>
 4008990:	5280100c 	andi	r10,r10,64
 4008994:	503fc826 	beq	r10,zero,40088b8 <__alt_data_end+0xfc0088b8>
 4008998:	023fffc4 	movi	r8,-1
 400899c:	4252983a 	sll	r9,r8,r9
 40089a0:	1a46b03a 	or	r3,r3,r9
 40089a4:	003fc506 	br	40088bc <__alt_data_end+0xfc0088bc>
 40089a8:	3017883a 	mov	r11,r6
 40089ac:	0007883a 	mov	r3,zero
 40089b0:	0015883a 	mov	r10,zero
 40089b4:	5a000003 	ldbu	r8,0(r11)
 40089b8:	58800044 	addi	r2,r11,1
 40089bc:	1017883a 	mov	r11,r2
 40089c0:	42401fcc 	andi	r9,r8,127
 40089c4:	4a92983a 	sll	r9,r9,r10
 40089c8:	42003fcc 	andi	r8,r8,255
 40089cc:	4200201c 	xori	r8,r8,128
 40089d0:	423fe004 	addi	r8,r8,-128
 40089d4:	1a46b03a 	or	r3,r3,r9
 40089d8:	528001c4 	addi	r10,r10,7
 40089dc:	403ff516 	blt	r8,zero,40089b4 <__alt_data_end+0xfc0089b4>
 40089e0:	003fb506 	br	40088b8 <__alt_data_end+0xfc0088b8>
 40089e4:	30c00043 	ldbu	r3,1(r6)
 40089e8:	32000003 	ldbu	r8,0(r6)
 40089ec:	30800084 	addi	r2,r6,2
 40089f0:	1806923a 	slli	r3,r3,8
 40089f4:	1a06b03a 	or	r3,r3,r8
 40089f8:	003faf06 	br	40088b8 <__alt_data_end+0xfc0088b8>
 40089fc:	400a9940 	call	400a994 <abort>
 4008a00:	308000c4 	addi	r2,r6,3
 4008a04:	00ffff04 	movi	r3,-4
 4008a08:	10c4703a 	and	r2,r2,r3
 4008a0c:	10c00017 	ldw	r3,0(r2)
 4008a10:	10800104 	addi	r2,r2,4
 4008a14:	38c00015 	stw	r3,0(r7)
 4008a18:	dfc00017 	ldw	ra,0(sp)
 4008a1c:	dec00104 	addi	sp,sp,4
 4008a20:	f800283a 	ret
 4008a24:	300b883a 	mov	r5,r6
 4008a28:	003fa706 	br	40088c8 <__alt_data_end+0xfc0088c8>

04008a2c <_ZL15get_ttype_entryP16lsda_header_infom>:
 4008a2c:	defffc04 	addi	sp,sp,-16
 4008a30:	dfc00315 	stw	ra,12(sp)
 4008a34:	dc400215 	stw	r17,8(sp)
 4008a38:	dc000115 	stw	r16,4(sp)
 4008a3c:	2021883a 	mov	r16,r4
 4008a40:	21000503 	ldbu	r4,20(r4)
 4008a44:	2823883a 	mov	r17,r5
 4008a48:	400877c0 	call	400877c <_ZL21size_of_encoded_valueh>
 4008a4c:	1445383a 	mul	r2,r2,r17
 4008a50:	81800317 	ldw	r6,12(r16)
 4008a54:	81400217 	ldw	r5,8(r16)
 4008a58:	81000503 	ldbu	r4,20(r16)
 4008a5c:	d80f883a 	mov	r7,sp
 4008a60:	308dc83a 	sub	r6,r6,r2
 4008a64:	40088200 	call	4008820 <_ZL28read_encoded_value_with_basehjPKhPj>
 4008a68:	d8800017 	ldw	r2,0(sp)
 4008a6c:	dfc00317 	ldw	ra,12(sp)
 4008a70:	dc400217 	ldw	r17,8(sp)
 4008a74:	dc000117 	ldw	r16,4(sp)
 4008a78:	dec00404 	addi	sp,sp,16
 4008a7c:	f800283a 	ret

04008a80 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 4008a80:	deffff04 	addi	sp,sp,-4
 4008a84:	dfc00015 	stw	ra,0(sp)
 4008a88:	20c03fcc 	andi	r3,r4,255
 4008a8c:	00803fc4 	movi	r2,255
 4008a90:	18800e26 	beq	r3,r2,4008acc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 4008a94:	20801c0c 	andi	r2,r4,112
 4008a98:	00c00804 	movi	r3,32
 4008a9c:	10c01726 	beq	r2,r3,4008afc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
 4008aa0:	18800e2e 	bgeu	r3,r2,4008adc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
 4008aa4:	00c01004 	movi	r3,64
 4008aa8:	10c01026 	beq	r2,r3,4008aec <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
 4008aac:	00c01404 	movi	r3,80
 4008ab0:	10c00626 	beq	r2,r3,4008acc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 4008ab4:	00c00c04 	movi	r3,48
 4008ab8:	10c00b1e 	bne	r2,r3,4008ae8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 4008abc:	2809883a 	mov	r4,r5
 4008ac0:	dfc00017 	ldw	ra,0(sp)
 4008ac4:	dec00104 	addi	sp,sp,4
 4008ac8:	400a7541 	jmpi	400a754 <_Unwind_GetDataRelBase>
 4008acc:	0005883a 	mov	r2,zero
 4008ad0:	dfc00017 	ldw	ra,0(sp)
 4008ad4:	dec00104 	addi	sp,sp,4
 4008ad8:	f800283a 	ret
 4008adc:	103ffb26 	beq	r2,zero,4008acc <__alt_data_end+0xfc008acc>
 4008ae0:	00c00404 	movi	r3,16
 4008ae4:	10fff926 	beq	r2,r3,4008acc <__alt_data_end+0xfc008acc>
 4008ae8:	400a9940 	call	400a994 <abort>
 4008aec:	2809883a 	mov	r4,r5
 4008af0:	dfc00017 	ldw	ra,0(sp)
 4008af4:	dec00104 	addi	sp,sp,4
 4008af8:	400a7441 	jmpi	400a744 <_Unwind_GetRegionStart>
 4008afc:	2809883a 	mov	r4,r5
 4008b00:	dfc00017 	ldw	ra,0(sp)
 4008b04:	dec00104 	addi	sp,sp,4
 4008b08:	400a75c1 	jmpi	400a75c <_Unwind_GetTextRelBase>

04008b0c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 4008b0c:	defffb04 	addi	sp,sp,-20
 4008b10:	dcc00315 	stw	r19,12(sp)
 4008b14:	dc400115 	stw	r17,4(sp)
 4008b18:	dc000015 	stw	r16,0(sp)
 4008b1c:	dfc00415 	stw	ra,16(sp)
 4008b20:	dc800215 	stw	r18,8(sp)
 4008b24:	2027883a 	mov	r19,r4
 4008b28:	2821883a 	mov	r16,r5
 4008b2c:	3023883a 	mov	r17,r6
 4008b30:	20003f26 	beq	r4,zero,4008c30 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 4008b34:	400a7440 	call	400a744 <_Unwind_GetRegionStart>
 4008b38:	88800015 	stw	r2,0(r17)
 4008b3c:	84800003 	ldbu	r18,0(r16)
 4008b40:	00c03fc4 	movi	r3,255
 4008b44:	84000044 	addi	r16,r16,1
 4008b48:	90c03726 	beq	r18,r3,4008c28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 4008b4c:	980b883a 	mov	r5,r19
 4008b50:	9009883a 	mov	r4,r18
 4008b54:	4008a800 	call	4008a80 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4008b58:	800d883a 	mov	r6,r16
 4008b5c:	89c00104 	addi	r7,r17,4
 4008b60:	100b883a 	mov	r5,r2
 4008b64:	9009883a 	mov	r4,r18
 4008b68:	40088200 	call	4008820 <_ZL28read_encoded_value_with_basehjPKhPj>
 4008b6c:	1021883a 	mov	r16,r2
 4008b70:	80c00003 	ldbu	r3,0(r16)
 4008b74:	01003fc4 	movi	r4,255
 4008b78:	80800044 	addi	r2,r16,1
 4008b7c:	88c00505 	stb	r3,20(r17)
 4008b80:	18c03fcc 	andi	r3,r3,255
 4008b84:	19002c26 	beq	r3,r4,4008c38 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 4008b88:	100f883a 	mov	r7,r2
 4008b8c:	000d883a 	mov	r6,zero
 4008b90:	000b883a 	mov	r5,zero
 4008b94:	38c00003 	ldbu	r3,0(r7)
 4008b98:	10800044 	addi	r2,r2,1
 4008b9c:	100f883a 	mov	r7,r2
 4008ba0:	19001fcc 	andi	r4,r3,127
 4008ba4:	2148983a 	sll	r4,r4,r5
 4008ba8:	18c03fcc 	andi	r3,r3,255
 4008bac:	18c0201c 	xori	r3,r3,128
 4008bb0:	18ffe004 	addi	r3,r3,-128
 4008bb4:	310cb03a 	or	r6,r6,r4
 4008bb8:	294001c4 	addi	r5,r5,7
 4008bbc:	183ff516 	blt	r3,zero,4008b94 <__alt_data_end+0xfc008b94>
 4008bc0:	118d883a 	add	r6,r2,r6
 4008bc4:	89800315 	stw	r6,12(r17)
 4008bc8:	10c00003 	ldbu	r3,0(r2)
 4008bcc:	000d883a 	mov	r6,zero
 4008bd0:	10800044 	addi	r2,r2,1
 4008bd4:	88c00545 	stb	r3,21(r17)
 4008bd8:	000b883a 	mov	r5,zero
 4008bdc:	10c00003 	ldbu	r3,0(r2)
 4008be0:	10800044 	addi	r2,r2,1
 4008be4:	19001fcc 	andi	r4,r3,127
 4008be8:	2148983a 	sll	r4,r4,r5
 4008bec:	18c03fcc 	andi	r3,r3,255
 4008bf0:	18c0201c 	xori	r3,r3,128
 4008bf4:	18ffe004 	addi	r3,r3,-128
 4008bf8:	310cb03a 	or	r6,r6,r4
 4008bfc:	294001c4 	addi	r5,r5,7
 4008c00:	183ff616 	blt	r3,zero,4008bdc <__alt_data_end+0xfc008bdc>
 4008c04:	118d883a 	add	r6,r2,r6
 4008c08:	89800415 	stw	r6,16(r17)
 4008c0c:	dfc00417 	ldw	ra,16(sp)
 4008c10:	dcc00317 	ldw	r19,12(sp)
 4008c14:	dc800217 	ldw	r18,8(sp)
 4008c18:	dc400117 	ldw	r17,4(sp)
 4008c1c:	dc000017 	ldw	r16,0(sp)
 4008c20:	dec00504 	addi	sp,sp,20
 4008c24:	f800283a 	ret
 4008c28:	88800115 	stw	r2,4(r17)
 4008c2c:	003fd006 	br	4008b70 <__alt_data_end+0xfc008b70>
 4008c30:	0005883a 	mov	r2,zero
 4008c34:	003fc006 	br	4008b38 <__alt_data_end+0xfc008b38>
 4008c38:	88000315 	stw	zero,12(r17)
 4008c3c:	003fe206 	br	4008bc8 <__alt_data_end+0xfc008bc8>

04008c40 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 4008c40:	28800017 	ldw	r2,0(r5)
 4008c44:	30c00017 	ldw	r3,0(r6)
 4008c48:	defffb04 	addi	sp,sp,-20
 4008c4c:	10800217 	ldw	r2,8(r2)
 4008c50:	dc400315 	stw	r17,12(sp)
 4008c54:	dc000215 	stw	r16,8(sp)
 4008c58:	d9400115 	stw	r5,4(sp)
 4008c5c:	dfc00415 	stw	ra,16(sp)
 4008c60:	2021883a 	mov	r16,r4
 4008c64:	d8c00015 	stw	r3,0(sp)
 4008c68:	2809883a 	mov	r4,r5
 4008c6c:	3023883a 	mov	r17,r6
 4008c70:	103ee83a 	callr	r2
 4008c74:	10803fcc 	andi	r2,r2,255
 4008c78:	d9400117 	ldw	r5,4(sp)
 4008c7c:	10000326 	beq	r2,zero,4008c8c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
 4008c80:	d8800017 	ldw	r2,0(sp)
 4008c84:	10800017 	ldw	r2,0(r2)
 4008c88:	d8800015 	stw	r2,0(sp)
 4008c8c:	80800017 	ldw	r2,0(r16)
 4008c90:	01c00044 	movi	r7,1
 4008c94:	d80d883a 	mov	r6,sp
 4008c98:	10800417 	ldw	r2,16(r2)
 4008c9c:	8009883a 	mov	r4,r16
 4008ca0:	103ee83a 	callr	r2
 4008ca4:	10c03fcc 	andi	r3,r2,255
 4008ca8:	18000226 	beq	r3,zero,4008cb4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
 4008cac:	d8c00017 	ldw	r3,0(sp)
 4008cb0:	88c00015 	stw	r3,0(r17)
 4008cb4:	dfc00417 	ldw	ra,16(sp)
 4008cb8:	dc400317 	ldw	r17,12(sp)
 4008cbc:	dc000217 	ldw	r16,8(sp)
 4008cc0:	dec00504 	addi	sp,sp,20
 4008cc4:	f800283a 	ret

04008cc8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 4008cc8:	defff604 	addi	sp,sp,-40
 4008ccc:	dc000415 	stw	r16,16(sp)
 4008cd0:	3821d23a 	srai	r16,r7,8
 4008cd4:	dc800615 	stw	r18,24(sp)
 4008cd8:	dc400515 	stw	r17,20(sp)
 4008cdc:	dfc00915 	stw	ra,36(sp)
 4008ce0:	dd000815 	stw	r20,32(sp)
 4008ce4:	dcc00715 	stw	r19,28(sp)
 4008ce8:	d9400215 	stw	r5,8(sp)
 4008cec:	3825883a 	mov	r18,r7
 4008cf0:	2023883a 	mov	r17,r4
 4008cf4:	8000010e 	bge	r16,zero,4008cfc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x34>
 4008cf8:	0421c83a 	sub	r16,zero,r16
 4008cfc:	000b883a 	mov	r5,zero
 4008d00:	01000144 	movi	r4,5
 4008d04:	d9800315 	stw	r6,12(sp)
 4008d08:	4008a800 	call	4008a80 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4008d0c:	d9800317 	ldw	r6,12(sp)
 4008d10:	d9c00104 	addi	r7,sp,4
 4008d14:	100b883a 	mov	r5,r2
 4008d18:	01000144 	movi	r4,5
 4008d1c:	40088200 	call	4008820 <_ZL28read_encoded_value_with_basehjPKhPj>
 4008d20:	11fffe64 	muli	r7,r2,-7
 4008d24:	0007883a 	mov	r3,zero
 4008d28:	11400003 	ldbu	r5,0(r2)
 4008d2c:	110001e4 	muli	r4,r2,7
 4008d30:	10800044 	addi	r2,r2,1
 4008d34:	29801fcc 	andi	r6,r5,127
 4008d38:	21c9883a 	add	r4,r4,r7
 4008d3c:	3108983a 	sll	r4,r6,r4
 4008d40:	29403fcc 	andi	r5,r5,255
 4008d44:	2940201c 	xori	r5,r5,128
 4008d48:	297fe004 	addi	r5,r5,-128
 4008d4c:	1906b03a 	or	r3,r3,r4
 4008d50:	283ff516 	blt	r5,zero,4008d28 <__alt_data_end+0xfc008d28>
 4008d54:	10c5883a 	add	r2,r2,r3
 4008d58:	11fffe64 	muli	r7,r2,-7
 4008d5c:	0009883a 	mov	r4,zero
 4008d60:	11400003 	ldbu	r5,0(r2)
 4008d64:	10c001e4 	muli	r3,r2,7
 4008d68:	10800044 	addi	r2,r2,1
 4008d6c:	29801fcc 	andi	r6,r5,127
 4008d70:	19c7883a 	add	r3,r3,r7
 4008d74:	30c6983a 	sll	r3,r6,r3
 4008d78:	29403fcc 	andi	r5,r5,255
 4008d7c:	2940201c 	xori	r5,r5,128
 4008d80:	297fe004 	addi	r5,r5,-128
 4008d84:	20c8b03a 	or	r4,r4,r3
 4008d88:	283ff516 	blt	r5,zero,4008d60 <__alt_data_end+0xfc008d60>
 4008d8c:	80c03fcc 	andi	r3,r16,255
 4008d90:	18ffffc4 	addi	r3,r3,-1
 4008d94:	10c7883a 	add	r3,r2,r3
 4008d98:	210000c4 	addi	r4,r4,3
 4008d9c:	197ffe64 	muli	r5,r3,-7
 4008da0:	2085883a 	add	r2,r4,r2
 4008da4:	04ffff04 	movi	r19,-4
 4008da8:	14e6703a 	and	r19,r2,r19
 4008dac:	0021883a 	mov	r16,zero
 4008db0:	18800003 	ldbu	r2,0(r3)
 4008db4:	190001e4 	muli	r4,r3,7
 4008db8:	1d000044 	addi	r20,r3,1
 4008dbc:	10c01fcc 	andi	r3,r2,127
 4008dc0:	2149883a 	add	r4,r4,r5
 4008dc4:	1908983a 	sll	r4,r3,r4
 4008dc8:	10803fcc 	andi	r2,r2,255
 4008dcc:	1080201c 	xori	r2,r2,128
 4008dd0:	10bfe004 	addi	r2,r2,-128
 4008dd4:	a007883a 	mov	r3,r20
 4008dd8:	8120b03a 	or	r16,r16,r4
 4008ddc:	103ff416 	blt	r2,zero,4008db0 <__alt_data_end+0xfc008db0>
 4008de0:	94803fcc 	andi	r18,r18,255
 4008de4:	80001f26 	beq	r16,zero,4008e64 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x19c>
 4008de8:	9009883a 	mov	r4,r18
 4008dec:	400877c0 	call	400877c <_ZL21size_of_encoded_valueh>
 4008df0:	81bfffc4 	addi	r6,r16,-1
 4008df4:	308d383a 	mul	r6,r6,r2
 4008df8:	d9400a17 	ldw	r5,40(sp)
 4008dfc:	d80f883a 	mov	r7,sp
 4008e00:	9009883a 	mov	r4,r18
 4008e04:	34cd883a 	add	r6,r6,r19
 4008e08:	40088200 	call	4008820 <_ZL28read_encoded_value_with_basehjPKhPj>
 4008e0c:	d9000017 	ldw	r4,0(sp)
 4008e10:	d9800204 	addi	r6,sp,8
 4008e14:	880b883a 	mov	r5,r17
 4008e18:	4008c400 	call	4008c40 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 4008e1c:	10c03fcc 	andi	r3,r2,255
 4008e20:	1800111e 	bne	r3,zero,4008e68 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1a0>
 4008e24:	a17ffe64 	muli	r5,r20,-7
 4008e28:	a007883a 	mov	r3,r20
 4008e2c:	0021883a 	mov	r16,zero
 4008e30:	19000003 	ldbu	r4,0(r3)
 4008e34:	18c001e4 	muli	r3,r3,7
 4008e38:	a5000044 	addi	r20,r20,1
 4008e3c:	20801fcc 	andi	r2,r4,127
 4008e40:	1947883a 	add	r3,r3,r5
 4008e44:	10c4983a 	sll	r2,r2,r3
 4008e48:	21003fcc 	andi	r4,r4,255
 4008e4c:	2100201c 	xori	r4,r4,128
 4008e50:	213fe004 	addi	r4,r4,-128
 4008e54:	a007883a 	mov	r3,r20
 4008e58:	80a0b03a 	or	r16,r16,r2
 4008e5c:	203ff416 	blt	r4,zero,4008e30 <__alt_data_end+0xfc008e30>
 4008e60:	003fe006 	br	4008de4 <__alt_data_end+0xfc008de4>
 4008e64:	0005883a 	mov	r2,zero
 4008e68:	dfc00917 	ldw	ra,36(sp)
 4008e6c:	dd000817 	ldw	r20,32(sp)
 4008e70:	dcc00717 	ldw	r19,28(sp)
 4008e74:	dc800617 	ldw	r18,24(sp)
 4008e78:	dc400517 	ldw	r17,20(sp)
 4008e7c:	dc000417 	ldw	r16,16(sp)
 4008e80:	dec00a04 	addi	sp,sp,40
 4008e84:	f800283a 	ret

04008e88 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 4008e88:	defffb04 	addi	sp,sp,-20
 4008e8c:	dc000115 	stw	r16,4(sp)
 4008e90:	24000317 	ldw	r16,12(r4)
 4008e94:	01ce303a 	nor	r7,zero,r7
 4008e98:	dc800315 	stw	r18,12(sp)
 4008e9c:	dc400215 	stw	r17,8(sp)
 4008ea0:	dfc00415 	stw	ra,16(sp)
 4008ea4:	2023883a 	mov	r17,r4
 4008ea8:	2825883a 	mov	r18,r5
 4008eac:	d9800015 	stw	r6,0(sp)
 4008eb0:	81e1883a 	add	r16,r16,r7
 4008eb4:	800d883a 	mov	r6,r16
 4008eb8:	000b883a 	mov	r5,zero
 4008ebc:	0009883a 	mov	r4,zero
 4008ec0:	30800003 	ldbu	r2,0(r6)
 4008ec4:	84000044 	addi	r16,r16,1
 4008ec8:	800d883a 	mov	r6,r16
 4008ecc:	10c01fcc 	andi	r3,r2,127
 4008ed0:	1906983a 	sll	r3,r3,r4
 4008ed4:	10803fcc 	andi	r2,r2,255
 4008ed8:	1080201c 	xori	r2,r2,128
 4008edc:	10bfe004 	addi	r2,r2,-128
 4008ee0:	28cab03a 	or	r5,r5,r3
 4008ee4:	210001c4 	addi	r4,r4,7
 4008ee8:	103ff516 	blt	r2,zero,4008ec0 <__alt_data_end+0xfc008ec0>
 4008eec:	28000e26 	beq	r5,zero,4008f28 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 4008ef0:	8809883a 	mov	r4,r17
 4008ef4:	4008a2c0 	call	4008a2c <_ZL15get_ttype_entryP16lsda_header_infom>
 4008ef8:	d80d883a 	mov	r6,sp
 4008efc:	900b883a 	mov	r5,r18
 4008f00:	1009883a 	mov	r4,r2
 4008f04:	4008c400 	call	4008c40 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 4008f08:	10c03fcc 	andi	r3,r2,255
 4008f0c:	183fe926 	beq	r3,zero,4008eb4 <__alt_data_end+0xfc008eb4>
 4008f10:	dfc00417 	ldw	ra,16(sp)
 4008f14:	dc800317 	ldw	r18,12(sp)
 4008f18:	dc400217 	ldw	r17,8(sp)
 4008f1c:	dc000117 	ldw	r16,4(sp)
 4008f20:	dec00504 	addi	sp,sp,20
 4008f24:	f800283a 	ret
 4008f28:	0005883a 	mov	r2,zero
 4008f2c:	003ff806 	br	4008f10 <__alt_data_end+0xfc008f10>

04008f30 <__gxx_personality_sj0>:
 4008f30:	00810074 	movhi	r2,1025
 4008f34:	deffdd04 	addi	sp,sp,-140
 4008f38:	10a3cc04 	addi	r2,r2,-28880
 4008f3c:	d8800e15 	stw	r2,56(sp)
 4008f40:	008100b4 	movhi	r2,1026
 4008f44:	10a88904 	addi	r2,r2,-24028
 4008f48:	d8800f15 	stw	r2,60(sp)
 4008f4c:	00810074 	movhi	r2,1025
 4008f50:	10a54204 	addi	r2,r2,-27384
 4008f54:	d9001515 	stw	r4,84(sp)
 4008f58:	d9000804 	addi	r4,sp,32
 4008f5c:	d8801115 	stw	r2,68(sp)
 4008f60:	dfc02215 	stw	ra,136(sp)
 4008f64:	df002115 	stw	fp,132(sp)
 4008f68:	dec01015 	stw	sp,64(sp)
 4008f6c:	dec01215 	stw	sp,72(sp)
 4008f70:	d9401915 	stw	r5,100(sp)
 4008f74:	d9801615 	stw	r6,88(sp)
 4008f78:	d9c01715 	stw	r7,92(sp)
 4008f7c:	400a67c0 	call	400a67c <_Unwind_SjLj_Register>
 4008f80:	d8c01517 	ldw	r3,84(sp)
 4008f84:	d8000715 	stw	zero,28(sp)
 4008f88:	d8000615 	stw	zero,24(sp)
 4008f8c:	00800044 	movi	r2,1
 4008f90:	18800926 	beq	r3,r2,4008fb8 <__gxx_personality_sj0+0x88>
 4008f94:	01c000c4 	movi	r7,3
 4008f98:	d9c01515 	stw	r7,84(sp)
 4008f9c:	d9000804 	addi	r4,sp,32
 4008fa0:	400a6940 	call	400a694 <_Unwind_SjLj_Unregister>
 4008fa4:	d8801517 	ldw	r2,84(sp)
 4008fa8:	dfc02217 	ldw	ra,136(sp)
 4008fac:	df002117 	ldw	fp,132(sp)
 4008fb0:	dec02304 	addi	sp,sp,140
 4008fb4:	f800283a 	ret
 4008fb8:	d9001617 	ldw	r4,88(sp)
 4008fbc:	00af3574 	movhi	r2,48341
 4008fc0:	d9c01717 	ldw	r7,92(sp)
 4008fc4:	10b54004 	addi	r2,r2,-11008
 4008fc8:	00ee2cb4 	movhi	r3,47282
 4008fcc:	2085883a 	add	r2,r4,r2
 4008fd0:	18eaaf04 	addi	r3,r3,-21828
 4008fd4:	d8801b15 	stw	r2,108(sp)
 4008fd8:	38c7883a 	add	r3,r7,r3
 4008fdc:	1105803a 	cmpltu	r2,r2,r4
 4008fe0:	10c7883a 	add	r3,r2,r3
 4008fe4:	d8c01c15 	stw	r3,112(sp)
 4008fe8:	d8c01917 	ldw	r3,100(sp)
 4008fec:	00800184 	movi	r2,6
 4008ff0:	18805426 	beq	r3,r2,4009144 <__gxx_personality_sj0+0x214>
 4008ff4:	d9002417 	ldw	r4,144(sp)
 4008ff8:	00bfffc4 	movi	r2,-1
 4008ffc:	d8800915 	stw	r2,36(sp)
 4009000:	400a7380 	call	400a738 <_Unwind_GetLanguageSpecificData>
 4009004:	d8801a15 	stw	r2,104(sp)
 4009008:	1000c926 	beq	r2,zero,4009330 <__gxx_personality_sj0+0x400>
 400900c:	d9002417 	ldw	r4,144(sp)
 4009010:	d80d883a 	mov	r6,sp
 4009014:	100b883a 	mov	r5,r2
 4009018:	4008b0c0 	call	4008b0c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400901c:	d9402417 	ldw	r5,144(sp)
 4009020:	d9000503 	ldbu	r4,20(sp)
 4009024:	d8801515 	stw	r2,84(sp)
 4009028:	4008a800 	call	4008a80 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400902c:	d9002417 	ldw	r4,144(sp)
 4009030:	d9400604 	addi	r5,sp,24
 4009034:	d8800215 	stw	r2,8(sp)
 4009038:	400a7080 	call	400a708 <_Unwind_GetIPInfo>
 400903c:	d8c00617 	ldw	r3,24(sp)
 4009040:	18006126 	beq	r3,zero,40091c8 <__gxx_personality_sj0+0x298>
 4009044:	1000ba16 	blt	r2,zero,4009330 <__gxx_personality_sj0+0x400>
 4009048:	10002f1e 	bne	r2,zero,4009108 <__gxx_personality_sj0+0x1d8>
 400904c:	d8001515 	stw	zero,84(sp)
 4009050:	d8001f15 	stw	zero,124(sp)
 4009054:	d8001815 	stw	zero,96(sp)
 4009058:	00c00044 	movi	r3,1
 400905c:	d9001917 	ldw	r4,100(sp)
 4009060:	2080004c 	andi	r2,r4,1
 4009064:	1000b51e 	bne	r2,zero,400933c <__gxx_personality_sj0+0x40c>
 4009068:	d9001917 	ldw	r4,100(sp)
 400906c:	2080020c 	andi	r2,r4,8
 4009070:	1000b71e 	bne	r2,zero,4009350 <__gxx_personality_sj0+0x420>
 4009074:	d9c01c17 	ldw	r7,112(sp)
 4009078:	3800b826 	beq	r7,zero,400935c <__gxx_personality_sj0+0x42c>
 400907c:	00800044 	movi	r2,1
 4009080:	1880b526 	beq	r3,r2,4009358 <__gxx_personality_sj0+0x428>
 4009084:	d9c01517 	ldw	r7,84(sp)
 4009088:	3800f516 	blt	r7,zero,4009460 <__gxx_personality_sj0+0x530>
 400908c:	d9002417 	ldw	r4,144(sp)
 4009090:	d9802317 	ldw	r6,140(sp)
 4009094:	00bfffc4 	movi	r2,-1
 4009098:	000b883a 	mov	r5,zero
 400909c:	d8800915 	stw	r2,36(sp)
 40090a0:	400a6dc0 	call	400a6dc <_Unwind_SetGR>
 40090a4:	d9801517 	ldw	r6,84(sp)
 40090a8:	d9002417 	ldw	r4,144(sp)
 40090ac:	01400044 	movi	r5,1
 40090b0:	400a6dc0 	call	400a6dc <_Unwind_SetGR>
 40090b4:	d9002417 	ldw	r4,144(sp)
 40090b8:	d9401f17 	ldw	r5,124(sp)
 40090bc:	400a7280 	call	400a728 <_Unwind_SetIP>
 40090c0:	010001c4 	movi	r4,7
 40090c4:	d9001515 	stw	r4,84(sp)
 40090c8:	003fb406 	br	4008f9c <__alt_data_end+0xfc008f9c>
 40090cc:	000f883a 	mov	r7,zero
 40090d0:	000d883a 	mov	r6,zero
 40090d4:	19000003 	ldbu	r4,0(r3)
 40090d8:	18c00044 	addi	r3,r3,1
 40090dc:	d8c01515 	stw	r3,84(sp)
 40090e0:	21401fcc 	andi	r5,r4,127
 40090e4:	298a983a 	sll	r5,r5,r6
 40090e8:	21003fcc 	andi	r4,r4,255
 40090ec:	2100201c 	xori	r4,r4,128
 40090f0:	213fe004 	addi	r4,r4,-128
 40090f4:	394eb03a 	or	r7,r7,r5
 40090f8:	318001c4 	addi	r6,r6,7
 40090fc:	203ff516 	blt	r4,zero,40090d4 <__alt_data_end+0xfc0090d4>
 4009100:	10bfffc4 	addi	r2,r2,-1
 4009104:	10003226 	beq	r2,zero,40091d0 <__gxx_personality_sj0+0x2a0>
 4009108:	d9c01517 	ldw	r7,84(sp)
 400910c:	0011883a 	mov	r8,zero
 4009110:	000d883a 	mov	r6,zero
 4009114:	39000003 	ldbu	r4,0(r7)
 4009118:	38c00044 	addi	r3,r7,1
 400911c:	180f883a 	mov	r7,r3
 4009120:	21401fcc 	andi	r5,r4,127
 4009124:	298a983a 	sll	r5,r5,r6
 4009128:	21003fcc 	andi	r4,r4,255
 400912c:	2100201c 	xori	r4,r4,128
 4009130:	213fe004 	addi	r4,r4,-128
 4009134:	4150b03a 	or	r8,r8,r5
 4009138:	318001c4 	addi	r6,r6,7
 400913c:	203ff516 	blt	r4,zero,4009114 <__alt_data_end+0xfc009114>
 4009140:	003fe206 	br	40090cc <__alt_data_end+0xfc0090cc>
 4009144:	d9001c17 	ldw	r4,112(sp)
 4009148:	203faa1e 	bne	r4,zero,4008ff4 <__alt_data_end+0xfc008ff4>
 400914c:	d9c01517 	ldw	r7,84(sp)
 4009150:	d8801b17 	ldw	r2,108(sp)
 4009154:	38bfa736 	bltu	r7,r2,4008ff4 <__alt_data_end+0xfc008ff4>
 4009158:	d8c02317 	ldw	r3,140(sp)
 400915c:	18fffe17 	ldw	r3,-8(r3)
 4009160:	d8c01f15 	stw	r3,124(sp)
 4009164:	18008226 	beq	r3,zero,4009370 <__gxx_personality_sj0+0x440>
 4009168:	d9002317 	ldw	r4,140(sp)
 400916c:	d9c02317 	ldw	r7,140(sp)
 4009170:	213ffb17 	ldw	r4,-20(r4)
 4009174:	39fffd17 	ldw	r7,-12(r7)
 4009178:	d9001515 	stw	r4,84(sp)
 400917c:	d9c01a15 	stw	r7,104(sp)
 4009180:	d8801517 	ldw	r2,84(sp)
 4009184:	103fc10e 	bge	r2,zero,400908c <__alt_data_end+0xfc00908c>
 4009188:	d9002417 	ldw	r4,144(sp)
 400918c:	d9401a17 	ldw	r5,104(sp)
 4009190:	d80d883a 	mov	r6,sp
 4009194:	00bfffc4 	movi	r2,-1
 4009198:	d8800915 	stw	r2,36(sp)
 400919c:	4008b0c0 	call	4008b0c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 40091a0:	d9402417 	ldw	r5,144(sp)
 40091a4:	d9000503 	ldbu	r4,20(sp)
 40091a8:	4008a800 	call	4008a80 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 40091ac:	d9000503 	ldbu	r4,20(sp)
 40091b0:	d9402417 	ldw	r5,144(sp)
 40091b4:	d8800215 	stw	r2,8(sp)
 40091b8:	4008a800 	call	4008a80 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 40091bc:	d8c02317 	ldw	r3,140(sp)
 40091c0:	18bffe15 	stw	r2,-8(r3)
 40091c4:	003fb106 	br	400908c <__alt_data_end+0xfc00908c>
 40091c8:	10bfffc4 	addi	r2,r2,-1
 40091cc:	003f9d06 	br	4009044 <__alt_data_end+0xfc009044>
 40091d0:	42000044 	addi	r8,r8,1
 40091d4:	da001f15 	stw	r8,124(sp)
 40091d8:	38005326 	beq	r7,zero,4009328 <__gxx_personality_sj0+0x3f8>
 40091dc:	d8800417 	ldw	r2,16(sp)
 40091e0:	39ffffc4 	addi	r7,r7,-1
 40091e4:	11c5883a 	add	r2,r2,r7
 40091e8:	d8801815 	stw	r2,96(sp)
 40091ec:	40005026 	beq	r8,zero,4009330 <__gxx_personality_sj0+0x400>
 40091f0:	10007426 	beq	r2,zero,40093c4 <__gxx_personality_sj0+0x494>
 40091f4:	d8801917 	ldw	r2,100(sp)
 40091f8:	1080020c 	andi	r2,r2,8
 40091fc:	d8802015 	stw	r2,128(sp)
 4009200:	1000a21e 	bne	r2,zero,400948c <__gxx_personality_sj0+0x55c>
 4009204:	d8c01c17 	ldw	r3,112(sp)
 4009208:	1800b026 	beq	r3,zero,40094cc <__gxx_personality_sj0+0x59c>
 400920c:	01c100b4 	movhi	r7,1026
 4009210:	39c6e504 	addi	r7,r7,7060
 4009214:	d9c01e15 	stw	r7,120(sp)
 4009218:	d8001d05 	stb	zero,116(sp)
 400921c:	d8c01817 	ldw	r3,96(sp)
 4009220:	d8001515 	stw	zero,84(sp)
 4009224:	0009883a 	mov	r4,zero
 4009228:	19400003 	ldbu	r5,0(r3)
 400922c:	18800044 	addi	r2,r3,1
 4009230:	d9c01517 	ldw	r7,84(sp)
 4009234:	28c01fcc 	andi	r3,r5,127
 4009238:	1906983a 	sll	r3,r3,r4
 400923c:	29803fcc 	andi	r6,r5,255
 4009240:	3180201c 	xori	r6,r6,128
 4009244:	38ceb03a 	or	r7,r7,r3
 4009248:	d8801715 	stw	r2,92(sp)
 400924c:	31bfe004 	addi	r6,r6,-128
 4009250:	d9c01515 	stw	r7,84(sp)
 4009254:	210001c4 	addi	r4,r4,7
 4009258:	1007883a 	mov	r3,r2
 400925c:	303ff216 	blt	r6,zero,4009228 <__alt_data_end+0xfc009228>
 4009260:	00c007c4 	movi	r3,31
 4009264:	19000836 	bltu	r3,r4,4009288 <__gxx_personality_sj0+0x358>
 4009268:	2940100c 	andi	r5,r5,64
 400926c:	28000626 	beq	r5,zero,4009288 <__gxx_personality_sj0+0x358>
 4009270:	01c00044 	movi	r7,1
 4009274:	3908983a 	sll	r4,r7,r4
 4009278:	d8c01517 	ldw	r3,84(sp)
 400927c:	0109c83a 	sub	r4,zero,r4
 4009280:	1906b03a 	or	r3,r3,r4
 4009284:	d8c01515 	stw	r3,84(sp)
 4009288:	d8001615 	stw	zero,88(sp)
 400928c:	0009883a 	mov	r4,zero
 4009290:	11400003 	ldbu	r5,0(r2)
 4009294:	d9c01617 	ldw	r7,88(sp)
 4009298:	10800044 	addi	r2,r2,1
 400929c:	28c01fcc 	andi	r3,r5,127
 40092a0:	1906983a 	sll	r3,r3,r4
 40092a4:	29803fcc 	andi	r6,r5,255
 40092a8:	3180201c 	xori	r6,r6,128
 40092ac:	38ceb03a 	or	r7,r7,r3
 40092b0:	31bfe004 	addi	r6,r6,-128
 40092b4:	d9c01615 	stw	r7,88(sp)
 40092b8:	210001c4 	addi	r4,r4,7
 40092bc:	303ff416 	blt	r6,zero,4009290 <__alt_data_end+0xfc009290>
 40092c0:	008007c4 	movi	r2,31
 40092c4:	11000736 	bltu	r2,r4,40092e4 <__gxx_personality_sj0+0x3b4>
 40092c8:	2940100c 	andi	r5,r5,64
 40092cc:	28000526 	beq	r5,zero,40092e4 <__gxx_personality_sj0+0x3b4>
 40092d0:	00c00044 	movi	r3,1
 40092d4:	1908983a 	sll	r4,r3,r4
 40092d8:	0109c83a 	sub	r4,zero,r4
 40092dc:	390eb03a 	or	r7,r7,r4
 40092e0:	d9c01615 	stw	r7,88(sp)
 40092e4:	d9001517 	ldw	r4,84(sp)
 40092e8:	20003c26 	beq	r4,zero,40093dc <__gxx_personality_sj0+0x4ac>
 40092ec:	01003e0e 	bge	zero,r4,40093e8 <__gxx_personality_sj0+0x4b8>
 40092f0:	01ffffc4 	movi	r7,-1
 40092f4:	200b883a 	mov	r5,r4
 40092f8:	d809883a 	mov	r4,sp
 40092fc:	d9c00915 	stw	r7,36(sp)
 4009300:	4008a2c0 	call	4008a2c <_ZL15get_ttype_entryP16lsda_header_infom>
 4009304:	10005f26 	beq	r2,zero,4009484 <__gxx_personality_sj0+0x554>
 4009308:	d8c01e17 	ldw	r3,120(sp)
 400930c:	1800571e 	bne	r3,zero,400946c <__gxx_personality_sj0+0x53c>
 4009310:	d9001617 	ldw	r4,88(sp)
 4009314:	20002926 	beq	r4,zero,40093bc <__gxx_personality_sj0+0x48c>
 4009318:	d9c01717 	ldw	r7,92(sp)
 400931c:	390f883a 	add	r7,r7,r4
 4009320:	d9c01815 	stw	r7,96(sp)
 4009324:	003fbd06 	br	400921c <__alt_data_end+0xfc00921c>
 4009328:	d8c01f17 	ldw	r3,124(sp)
 400932c:	1800251e 	bne	r3,zero,40093c4 <__gxx_personality_sj0+0x494>
 4009330:	01000204 	movi	r4,8
 4009334:	d9001515 	stw	r4,84(sp)
 4009338:	003f1806 	br	4008f9c <__alt_data_end+0xfc008f9c>
 400933c:	d8801c17 	ldw	r2,112(sp)
 4009340:	10000d26 	beq	r2,zero,4009378 <__gxx_personality_sj0+0x448>
 4009344:	00800184 	movi	r2,6
 4009348:	d8801515 	stw	r2,84(sp)
 400934c:	003f1306 	br	4008f9c <__alt_data_end+0xfc008f9c>
 4009350:	00800044 	movi	r2,1
 4009354:	18bf4d1e 	bne	r3,r2,400908c <__alt_data_end+0xfc00908c>
 4009358:	4009e880 	call	4009e88 <_ZSt9terminatev>
 400935c:	d9001b17 	ldw	r4,108(sp)
 4009360:	00800044 	movi	r2,1
 4009364:	113f4536 	bltu	r2,r4,400907c <__alt_data_end+0xfc00907c>
 4009368:	00800044 	movi	r2,1
 400936c:	18bf841e 	bne	r3,r2,4009180 <__alt_data_end+0xfc009180>
 4009370:	d9002317 	ldw	r4,140(sp)
 4009374:	400a1d40 	call	400a1d4 <__cxa_call_terminate>
 4009378:	d8c01b17 	ldw	r3,108(sp)
 400937c:	00800044 	movi	r2,1
 4009380:	10fff036 	bltu	r2,r3,4009344 <__alt_data_end+0xfc009344>
 4009384:	d9002317 	ldw	r4,140(sp)
 4009388:	d8801817 	ldw	r2,96(sp)
 400938c:	d9c01517 	ldw	r7,84(sp)
 4009390:	d8c01a17 	ldw	r3,104(sp)
 4009394:	20bffc15 	stw	r2,-16(r4)
 4009398:	d8800717 	ldw	r2,28(sp)
 400939c:	21fffb15 	stw	r7,-20(r4)
 40093a0:	d9c01f17 	ldw	r7,124(sp)
 40093a4:	20bfff15 	stw	r2,-4(r4)
 40093a8:	00800184 	movi	r2,6
 40093ac:	20fffd15 	stw	r3,-12(r4)
 40093b0:	21fffe15 	stw	r7,-8(r4)
 40093b4:	d8801515 	stw	r2,84(sp)
 40093b8:	003ef806 	br	4008f9c <__alt_data_end+0xfc008f9c>
 40093bc:	d8801d03 	ldbu	r2,116(sp)
 40093c0:	103fdb26 	beq	r2,zero,4009330 <__alt_data_end+0xfc009330>
 40093c4:	d8c01917 	ldw	r3,100(sp)
 40093c8:	1880004c 	andi	r2,r3,1
 40093cc:	103fd81e 	bne	r2,zero,4009330 <__alt_data_end+0xfc009330>
 40093d0:	d8001515 	stw	zero,84(sp)
 40093d4:	00c00084 	movi	r3,2
 40093d8:	003f2306 	br	4009068 <__alt_data_end+0xfc009068>
 40093dc:	00c00044 	movi	r3,1
 40093e0:	d8c01d05 	stb	r3,116(sp)
 40093e4:	003fca06 	br	4009310 <__alt_data_end+0xfc009310>
 40093e8:	d9001e17 	ldw	r4,120(sp)
 40093ec:	20000426 	beq	r4,zero,4009400 <__gxx_personality_sj0+0x4d0>
 40093f0:	d9c02017 	ldw	r7,128(sp)
 40093f4:	3800021e 	bne	r7,zero,4009400 <__gxx_personality_sj0+0x4d0>
 40093f8:	d8801c17 	ldw	r2,112(sp)
 40093fc:	10002726 	beq	r2,zero,400949c <__gxx_personality_sj0+0x56c>
 4009400:	d8801517 	ldw	r2,84(sp)
 4009404:	000d883a 	mov	r6,zero
 4009408:	000b883a 	mov	r5,zero
 400940c:	0088303a 	nor	r4,zero,r2
 4009410:	d8800317 	ldw	r2,12(sp)
 4009414:	1109883a 	add	r4,r2,r4
 4009418:	20800003 	ldbu	r2,0(r4)
 400941c:	21000044 	addi	r4,r4,1
 4009420:	10c01fcc 	andi	r3,r2,127
 4009424:	1946983a 	sll	r3,r3,r5
 4009428:	10803fcc 	andi	r2,r2,255
 400942c:	1080201c 	xori	r2,r2,128
 4009430:	10bfe004 	addi	r2,r2,-128
 4009434:	30ccb03a 	or	r6,r6,r3
 4009438:	294001c4 	addi	r5,r5,7
 400943c:	103ff616 	blt	r2,zero,4009418 <__alt_data_end+0xfc009418>
 4009440:	3005003a 	cmpeq	r2,r6,zero
 4009444:	10803fcc 	andi	r2,r2,255
 4009448:	103fb126 	beq	r2,zero,4009310 <__alt_data_end+0xfc009310>
 400944c:	d9c01917 	ldw	r7,100(sp)
 4009450:	3880004c 	andi	r2,r7,1
 4009454:	103fb91e 	bne	r2,zero,400933c <__alt_data_end+0xfc00933c>
 4009458:	d8802017 	ldw	r2,128(sp)
 400945c:	10002d26 	beq	r2,zero,4009514 <__gxx_personality_sj0+0x5e4>
 4009460:	00800044 	movi	r2,1
 4009464:	d8800915 	stw	r2,36(sp)
 4009468:	4009eb00 	call	4009eb0 <_ZSt10unexpectedv>
 400946c:	d9800704 	addi	r6,sp,28
 4009470:	180b883a 	mov	r5,r3
 4009474:	1009883a 	mov	r4,r2
 4009478:	4008c400 	call	4008c40 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400947c:	10803fcc 	andi	r2,r2,255
 4009480:	103fa326 	beq	r2,zero,4009310 <__alt_data_end+0xfc009310>
 4009484:	00c000c4 	movi	r3,3
 4009488:	003ef406 	br	400905c <__alt_data_end+0xfc00905c>
 400948c:	010100b4 	movhi	r4,1026
 4009490:	2106e304 	addi	r4,r4,7052
 4009494:	d9001e15 	stw	r4,120(sp)
 4009498:	003f5f06 	br	4009218 <__alt_data_end+0xfc009218>
 400949c:	d9001b17 	ldw	r4,108(sp)
 40094a0:	00c00044 	movi	r3,1
 40094a4:	193fd636 	bltu	r3,r4,4009400 <__alt_data_end+0xfc009400>
 40094a8:	01ffffc4 	movi	r7,-1
 40094ac:	d9c00915 	stw	r7,36(sp)
 40094b0:	d9800717 	ldw	r6,28(sp)
 40094b4:	d9c01517 	ldw	r7,84(sp)
 40094b8:	d9401e17 	ldw	r5,120(sp)
 40094bc:	d809883a 	mov	r4,sp
 40094c0:	4008e880 	call	4008e88 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 40094c4:	1080005c 	xori	r2,r2,1
 40094c8:	003fde06 	br	4009444 <__alt_data_end+0xfc009444>
 40094cc:	d9001b17 	ldw	r4,108(sp)
 40094d0:	00800044 	movi	r2,1
 40094d4:	113f4d36 	bltu	r2,r4,400920c <__alt_data_end+0xfc00920c>
 40094d8:	d9c02317 	ldw	r7,140(sp)
 40094dc:	38800017 	ldw	r2,0(r7)
 40094e0:	1080004c 	andi	r2,r2,1
 40094e4:	1000061e 	bne	r2,zero,4009500 <__gxx_personality_sj0+0x5d0>
 40094e8:	d8c02317 	ldw	r3,140(sp)
 40094ec:	18800504 	addi	r2,r3,20
 40094f0:	d8800715 	stw	r2,28(sp)
 40094f4:	10bff017 	ldw	r2,-64(r2)
 40094f8:	d8801e15 	stw	r2,120(sp)
 40094fc:	003f4606 	br	4009218 <__alt_data_end+0xfc009218>
 4009500:	38bff517 	ldw	r2,-44(r7)
 4009504:	003ffa06 	br	40094f0 <__alt_data_end+0xfc0094f0>
 4009508:	d9000a17 	ldw	r4,40(sp)
 400950c:	40099780 	call	4009978 <__cxa_begin_catch>
 4009510:	003f9106 	br	4009358 <__alt_data_end+0xfc009358>
 4009514:	d9c01c17 	ldw	r7,112(sp)
 4009518:	383eda1e 	bne	r7,zero,4009084 <__alt_data_end+0xfc009084>
 400951c:	d8c01b17 	ldw	r3,108(sp)
 4009520:	00800044 	movi	r2,1
 4009524:	10fed736 	bltu	r2,r3,4009084 <__alt_data_end+0xfc009084>
 4009528:	00c000c4 	movi	r3,3
 400952c:	003f8e06 	br	4009368 <__alt_data_end+0xfc009368>

04009530 <__cxa_call_unexpected>:
 4009530:	00810074 	movhi	r2,1025
 4009534:	deffe604 	addi	sp,sp,-104
 4009538:	10a3cc04 	addi	r2,r2,-28880
 400953c:	d8800d15 	stw	r2,52(sp)
 4009540:	008100b4 	movhi	r2,1026
 4009544:	10a88d04 	addi	r2,r2,-24012
 4009548:	d8800e15 	stw	r2,56(sp)
 400954c:	d8800104 	addi	r2,sp,4
 4009550:	d8800f15 	stw	r2,60(sp)
 4009554:	00810074 	movhi	r2,1025
 4009558:	10a56f04 	addi	r2,r2,-27204
 400955c:	d9001415 	stw	r4,80(sp)
 4009560:	d9000704 	addi	r4,sp,28
 4009564:	dfc01915 	stw	ra,100(sp)
 4009568:	d8801015 	stw	r2,64(sp)
 400956c:	df001815 	stw	fp,96(sp)
 4009570:	dec01115 	stw	sp,68(sp)
 4009574:	400a67c0 	call	400a67c <_Unwind_SjLj_Register>
 4009578:	d9001417 	ldw	r4,80(sp)
 400957c:	40099780 	call	4009978 <__cxa_begin_catch>
 4009580:	d8c01417 	ldw	r3,80(sp)
 4009584:	18bffe17 	ldw	r2,-8(r3)
 4009588:	193ff717 	ldw	r4,-36(r3)
 400958c:	18fffd17 	ldw	r3,-12(r3)
 4009590:	d8800315 	stw	r2,12(sp)
 4009594:	d8c01615 	stw	r3,88(sp)
 4009598:	d8c01417 	ldw	r3,80(sp)
 400959c:	18fffb17 	ldw	r3,-20(r3)
 40095a0:	d8c01515 	stw	r3,84(sp)
 40095a4:	d8c01417 	ldw	r3,80(sp)
 40095a8:	18fff817 	ldw	r3,-32(r3)
 40095ac:	d8c01415 	stw	r3,80(sp)
 40095b0:	00c00044 	movi	r3,1
 40095b4:	d8c00815 	stw	r3,32(sp)
 40095b8:	4009ea00 	call	4009ea0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 40095bc:	d8c00917 	ldw	r3,36(sp)
 40095c0:	d8800817 	ldw	r2,32(sp)
 40095c4:	d8c01715 	stw	r3,92(sp)
 40095c8:	10000a26 	beq	r2,zero,40095f4 <__cxa_call_unexpected+0xc4>
 40095cc:	10bfffc4 	addi	r2,r2,-1
 40095d0:	10000126 	beq	r2,zero,40095d8 <__cxa_call_unexpected+0xa8>
 40095d4:	003b68fa 	trap	3
 40095d8:	d8000815 	stw	zero,32(sp)
 40095dc:	4009a2c0 	call	4009a2c <__cxa_end_catch>
 40095e0:	4009a2c0 	call	4009a2c <__cxa_end_catch>
 40095e4:	d9001717 	ldw	r4,92(sp)
 40095e8:	00bfffc4 	movi	r2,-1
 40095ec:	d8800815 	stw	r2,32(sp)
 40095f0:	400a8780 	call	400a878 <_Unwind_SjLj_Resume>
 40095f4:	d9001717 	ldw	r4,92(sp)
 40095f8:	40099780 	call	4009978 <__cxa_begin_catch>
 40095fc:	400a22c0 	call	400a22c <__cxa_get_globals_fast>
 4009600:	10800017 	ldw	r2,0(r2)
 4009604:	10c00b17 	ldw	r3,44(r2)
 4009608:	18c0004c 	andi	r3,r3,1
 400960c:	18001e26 	beq	r3,zero,4009688 <__cxa_call_unexpected+0x158>
 4009610:	10800017 	ldw	r2,0(r2)
 4009614:	d8801715 	stw	r2,92(sp)
 4009618:	d8801517 	ldw	r2,84(sp)
 400961c:	00802b0e 	bge	zero,r2,40096cc <__cxa_call_unexpected+0x19c>
 4009620:	d8c01717 	ldw	r3,92(sp)
 4009624:	d8800317 	ldw	r2,12(sp)
 4009628:	d9c01517 	ldw	r7,84(sp)
 400962c:	193ff017 	ldw	r4,-64(r3)
 4009630:	d9801617 	ldw	r6,88(sp)
 4009634:	d8800015 	stw	r2,0(sp)
 4009638:	180b883a 	mov	r5,r3
 400963c:	00800084 	movi	r2,2
 4009640:	d8800815 	stw	r2,32(sp)
 4009644:	4008cc80 	call	4008cc8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 4009648:	10803fcc 	andi	r2,r2,255
 400964c:	10001e1e 	bne	r2,zero,40096c8 <__cxa_call_unexpected+0x198>
 4009650:	d8800317 	ldw	r2,12(sp)
 4009654:	d9c01517 	ldw	r7,84(sp)
 4009658:	d9801617 	ldw	r6,88(sp)
 400965c:	010100b4 	movhi	r4,1026
 4009660:	d8800015 	stw	r2,0(sp)
 4009664:	21299104 	addi	r4,r4,-22972
 4009668:	00800084 	movi	r2,2
 400966c:	000b883a 	mov	r5,zero
 4009670:	d8800815 	stw	r2,32(sp)
 4009674:	4008cc80 	call	4008cc8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 4009678:	10803fcc 	andi	r2,r2,255
 400967c:	1000051e 	bne	r2,zero,4009694 <__cxa_call_unexpected+0x164>
 4009680:	d9001417 	ldw	r4,80(sp)
 4009684:	4009dc80 	call	4009dc8 <_ZN10__cxxabiv111__terminateEPFvvE>
 4009688:	10801004 	addi	r2,r2,64
 400968c:	d8801715 	stw	r2,92(sp)
 4009690:	003fe106 	br	4009618 <__alt_data_end+0xfc009618>
 4009694:	01000104 	movi	r4,4
 4009698:	400a0700 	call	400a070 <__cxa_allocate_exception>
 400969c:	00c100b4 	movhi	r3,1026
 40096a0:	18e9ac04 	addi	r3,r3,-22864
 40096a4:	01810074 	movhi	r6,1025
 40096a8:	014100b4 	movhi	r5,1026
 40096ac:	10c00015 	stw	r3,0(r2)
 40096b0:	31a89204 	addi	r6,r6,-23992
 40096b4:	00c00084 	movi	r3,2
 40096b8:	29699104 	addi	r5,r5,-22972
 40096bc:	1009883a 	mov	r4,r2
 40096c0:	d8c00815 	stw	r3,32(sp)
 40096c4:	40097a80 	call	40097a8 <__cxa_throw>
 40096c8:	40098380 	call	4009838 <__cxa_rethrow>
 40096cc:	d9401617 	ldw	r5,88(sp)
 40096d0:	00800084 	movi	r2,2
 40096d4:	d9800104 	addi	r6,sp,4
 40096d8:	0009883a 	mov	r4,zero
 40096dc:	d8800815 	stw	r2,32(sp)
 40096e0:	4008b0c0 	call	4008b0c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 40096e4:	d9801717 	ldw	r6,92(sp)
 40096e8:	d9c01517 	ldw	r7,84(sp)
 40096ec:	d9000104 	addi	r4,sp,4
 40096f0:	317ff017 	ldw	r5,-64(r6)
 40096f4:	4008e880 	call	4008e88 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 40096f8:	10803fcc 	andi	r2,r2,255
 40096fc:	1000171e 	bne	r2,zero,400975c <__cxa_call_unexpected+0x22c>
 4009700:	d9c01517 	ldw	r7,84(sp)
 4009704:	014100b4 	movhi	r5,1026
 4009708:	00800084 	movi	r2,2
 400970c:	29699104 	addi	r5,r5,-22972
 4009710:	000d883a 	mov	r6,zero
 4009714:	d9000104 	addi	r4,sp,4
 4009718:	d8800815 	stw	r2,32(sp)
 400971c:	4008e880 	call	4008e88 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 4009720:	10803fcc 	andi	r2,r2,255
 4009724:	103fd626 	beq	r2,zero,4009680 <__alt_data_end+0xfc009680>
 4009728:	01000104 	movi	r4,4
 400972c:	400a0700 	call	400a070 <__cxa_allocate_exception>
 4009730:	00c100b4 	movhi	r3,1026
 4009734:	18e9ac04 	addi	r3,r3,-22864
 4009738:	01810074 	movhi	r6,1025
 400973c:	014100b4 	movhi	r5,1026
 4009740:	10c00015 	stw	r3,0(r2)
 4009744:	31a89204 	addi	r6,r6,-23992
 4009748:	00c00084 	movi	r3,2
 400974c:	29699104 	addi	r5,r5,-22972
 4009750:	1009883a 	mov	r4,r2
 4009754:	d8c00815 	stw	r3,32(sp)
 4009758:	40097a80 	call	40097a8 <__cxa_throw>
 400975c:	40098380 	call	4009838 <__cxa_rethrow>

04009760 <_ZdlPv>:
 4009760:	400aa0c1 	jmpi	400aa0c <free>

04009764 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 4009764:	defffe04 	addi	sp,sp,-8
 4009768:	dfc00115 	stw	ra,4(sp)
 400976c:	dc000015 	stw	r16,0(sp)
 4009770:	00800044 	movi	r2,1
 4009774:	11000a36 	bltu	r2,r4,40097a0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 4009778:	28bff617 	ldw	r2,-40(r5)
 400977c:	2c000504 	addi	r16,r5,20
 4009780:	10000226 	beq	r2,zero,400978c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 4009784:	8009883a 	mov	r4,r16
 4009788:	103ee83a 	callr	r2
 400978c:	8009883a 	mov	r4,r16
 4009790:	dfc00117 	ldw	ra,4(sp)
 4009794:	dc000017 	ldw	r16,0(sp)
 4009798:	dec00204 	addi	sp,sp,8
 400979c:	400a0d01 	jmpi	400a0d0 <__cxa_free_exception>
 40097a0:	293ff817 	ldw	r4,-32(r5)
 40097a4:	4009dc80 	call	4009dc8 <_ZN10__cxxabiv111__terminateEPFvvE>

040097a8 <__cxa_throw>:
 40097a8:	defffb04 	addi	sp,sp,-20
 40097ac:	dfc00415 	stw	ra,16(sp)
 40097b0:	dcc00315 	stw	r19,12(sp)
 40097b4:	dc800215 	stw	r18,8(sp)
 40097b8:	2827883a 	mov	r19,r5
 40097bc:	3025883a 	mov	r18,r6
 40097c0:	dc400115 	stw	r17,4(sp)
 40097c4:	dc000015 	stw	r16,0(sp)
 40097c8:	2021883a 	mov	r16,r4
 40097cc:	400a2380 	call	400a238 <__cxa_get_globals>
 40097d0:	10c00117 	ldw	r3,4(r2)
 40097d4:	847ffb04 	addi	r17,r16,-20
 40097d8:	18c00044 	addi	r3,r3,1
 40097dc:	10c00115 	stw	r3,4(r2)
 40097e0:	00800044 	movi	r2,1
 40097e4:	80bfef15 	stw	r2,-68(r16)
 40097e8:	84fff015 	stw	r19,-64(r16)
 40097ec:	84bff115 	stw	r18,-60(r16)
 40097f0:	4009f000 	call	4009f00 <_ZSt14get_unexpectedv>
 40097f4:	80bff215 	stw	r2,-56(r16)
 40097f8:	4009edc0 	call	4009edc <_ZSt13get_terminatev>
 40097fc:	80bff315 	stw	r2,-52(r16)
 4009800:	0090caf4 	movhi	r2,17195
 4009804:	108ac004 	addi	r2,r2,11008
 4009808:	80bffb15 	stw	r2,-20(r16)
 400980c:	0091d3b4 	movhi	r2,18254
 4009810:	109550c4 	addi	r2,r2,21827
 4009814:	80bffc15 	stw	r2,-16(r16)
 4009818:	00810074 	movhi	r2,1025
 400981c:	10a5d904 	addi	r2,r2,-26780
 4009820:	8809883a 	mov	r4,r17
 4009824:	80bffd15 	stw	r2,-12(r16)
 4009828:	400a7640 	call	400a764 <_Unwind_SjLj_RaiseException>
 400982c:	8809883a 	mov	r4,r17
 4009830:	40099780 	call	4009978 <__cxa_begin_catch>
 4009834:	4009e880 	call	4009e88 <_ZSt9terminatev>

04009838 <__cxa_rethrow>:
 4009838:	defffe04 	addi	sp,sp,-8
 400983c:	dfc00115 	stw	ra,4(sp)
 4009840:	dc000015 	stw	r16,0(sp)
 4009844:	400a2380 	call	400a238 <__cxa_get_globals>
 4009848:	10c00117 	ldw	r3,4(r2)
 400984c:	11000017 	ldw	r4,0(r2)
 4009850:	18c00044 	addi	r3,r3,1
 4009854:	10c00115 	stw	r3,4(r2)
 4009858:	20001126 	beq	r4,zero,40098a0 <__cxa_rethrow+0x68>
 400985c:	21400b17 	ldw	r5,44(r4)
 4009860:	01ef3574 	movhi	r7,48341
 4009864:	39f54004 	addi	r7,r7,-11008
 4009868:	29cf883a 	add	r7,r5,r7
 400986c:	20c00c17 	ldw	r3,48(r4)
 4009870:	394d803a 	cmpltu	r6,r7,r5
 4009874:	016e2cb4 	movhi	r5,47282
 4009878:	296aaf04 	addi	r5,r5,-21828
 400987c:	1947883a 	add	r3,r3,r5
 4009880:	30c7883a 	add	r3,r6,r3
 4009884:	18000726 	beq	r3,zero,40098a4 <__cxa_rethrow+0x6c>
 4009888:	10000015 	stw	zero,0(r2)
 400988c:	24000b04 	addi	r16,r4,44
 4009890:	8009883a 	mov	r4,r16
 4009894:	400a8bc0 	call	400a8bc <_Unwind_SjLj_Resume_or_Rethrow>
 4009898:	8009883a 	mov	r4,r16
 400989c:	40099780 	call	4009978 <__cxa_begin_catch>
 40098a0:	4009e880 	call	4009e88 <_ZSt9terminatev>
 40098a4:	00c00044 	movi	r3,1
 40098a8:	19fff736 	bltu	r3,r7,4009888 <__alt_data_end+0xfc009888>
 40098ac:	20800517 	ldw	r2,20(r4)
 40098b0:	0085c83a 	sub	r2,zero,r2
 40098b4:	20800515 	stw	r2,20(r4)
 40098b8:	003ff406 	br	400988c <__alt_data_end+0xfc00988c>

040098bc <__cxa_pure_virtual>:
 40098bc:	014100b4 	movhi	r5,1026
 40098c0:	deffff04 	addi	sp,sp,-4
 40098c4:	29695904 	addi	r5,r5,-23196
 40098c8:	018006c4 	movi	r6,27
 40098cc:	01000084 	movi	r4,2
 40098d0:	dfc00015 	stw	ra,0(sp)
 40098d4:	40180040 	call	4018004 <write>
 40098d8:	4009e880 	call	4009e88 <_ZSt9terminatev>

040098dc <__cxa_deleted_virtual>:
 40098dc:	014100b4 	movhi	r5,1026
 40098e0:	deffff04 	addi	sp,sp,-4
 40098e4:	29696004 	addi	r5,r5,-23168
 40098e8:	01800784 	movi	r6,30
 40098ec:	01000084 	movi	r4,2
 40098f0:	dfc00015 	stw	ra,0(sp)
 40098f4:	40180040 	call	4018004 <write>
 40098f8:	4009e880 	call	4009e88 <_ZSt9terminatev>

040098fc <__cxa_guard_acquire>:
 40098fc:	20800007 	ldb	r2,0(r4)
 4009900:	1000061e 	bne	r2,zero,400991c <__cxa_guard_acquire+0x20>
 4009904:	20800047 	ldb	r2,1(r4)
 4009908:	1000061e 	bne	r2,zero,4009924 <__cxa_guard_acquire+0x28>
 400990c:	00800044 	movi	r2,1
 4009910:	20800045 	stb	r2,1(r4)
 4009914:	00800044 	movi	r2,1
 4009918:	f800283a 	ret
 400991c:	0005883a 	mov	r2,zero
 4009920:	f800283a 	ret
 4009924:	deffff04 	addi	sp,sp,-4
 4009928:	01000104 	movi	r4,4
 400992c:	dfc00015 	stw	ra,0(sp)
 4009930:	400a0700 	call	400a070 <__cxa_allocate_exception>
 4009934:	00c100b4 	movhi	r3,1026
 4009938:	01810074 	movhi	r6,1025
 400993c:	014100b4 	movhi	r5,1026
 4009940:	18e9c704 	addi	r3,r3,-22756
 4009944:	31a89f04 	addi	r6,r6,-23940
 4009948:	2969c204 	addi	r5,r5,-22776
 400994c:	1009883a 	mov	r4,r2
 4009950:	10c00015 	stw	r3,0(r2)
 4009954:	40097a80 	call	40097a8 <__cxa_throw>

04009958 <__cxa_guard_abort>:
 4009958:	20000045 	stb	zero,1(r4)
 400995c:	f800283a 	ret

04009960 <__cxa_guard_release>:
 4009960:	00800044 	movi	r2,1
 4009964:	20000045 	stb	zero,1(r4)
 4009968:	20800005 	stb	r2,0(r4)
 400996c:	f800283a 	ret

04009970 <__cxa_get_exception_ptr>:
 4009970:	20bfff17 	ldw	r2,-4(r4)
 4009974:	f800283a 	ret

04009978 <__cxa_begin_catch>:
 4009978:	defffe04 	addi	sp,sp,-8
 400997c:	dc000015 	stw	r16,0(sp)
 4009980:	dfc00115 	stw	ra,4(sp)
 4009984:	2021883a 	mov	r16,r4
 4009988:	400a2380 	call	400a238 <__cxa_get_globals>
 400998c:	81000017 	ldw	r4,0(r16)
 4009990:	80c00117 	ldw	r3,4(r16)
 4009994:	01af3574 	movhi	r6,48341
 4009998:	31b54004 	addi	r6,r6,-11008
 400999c:	016e2cb4 	movhi	r5,47282
 40099a0:	296aaf04 	addi	r5,r5,-21828
 40099a4:	218d883a 	add	r6,r4,r6
 40099a8:	3109803a 	cmpltu	r4,r6,r4
 40099ac:	1947883a 	add	r3,r3,r5
 40099b0:	20c7883a 	add	r3,r4,r3
 40099b4:	817ff504 	addi	r5,r16,-44
 40099b8:	11000017 	ldw	r4,0(r2)
 40099bc:	18000726 	beq	r3,zero,40099dc <__cxa_begin_catch+0x64>
 40099c0:	2000191e 	bne	r4,zero,4009a28 <__cxa_begin_catch+0xb0>
 40099c4:	11400015 	stw	r5,0(r2)
 40099c8:	0005883a 	mov	r2,zero
 40099cc:	dfc00117 	ldw	ra,4(sp)
 40099d0:	dc000017 	ldw	r16,0(sp)
 40099d4:	dec00204 	addi	sp,sp,8
 40099d8:	f800283a 	ret
 40099dc:	01c00044 	movi	r7,1
 40099e0:	39bff736 	bltu	r7,r6,40099c0 <__alt_data_end+0xfc0099c0>
 40099e4:	80fffa17 	ldw	r3,-24(r16)
 40099e8:	18000d16 	blt	r3,zero,4009a20 <__cxa_begin_catch+0xa8>
 40099ec:	18c00044 	addi	r3,r3,1
 40099f0:	11800117 	ldw	r6,4(r2)
 40099f4:	80fffa15 	stw	r3,-24(r16)
 40099f8:	30ffffc4 	addi	r3,r6,-1
 40099fc:	10c00115 	stw	r3,4(r2)
 4009a00:	21400226 	beq	r4,r5,4009a0c <__cxa_begin_catch+0x94>
 4009a04:	813ff915 	stw	r4,-28(r16)
 4009a08:	11400015 	stw	r5,0(r2)
 4009a0c:	80bfff17 	ldw	r2,-4(r16)
 4009a10:	dfc00117 	ldw	ra,4(sp)
 4009a14:	dc000017 	ldw	r16,0(sp)
 4009a18:	dec00204 	addi	sp,sp,8
 4009a1c:	f800283a 	ret
 4009a20:	38c7c83a 	sub	r3,r7,r3
 4009a24:	003ff206 	br	40099f0 <__alt_data_end+0xfc0099f0>
 4009a28:	4009e880 	call	4009e88 <_ZSt9terminatev>

04009a2c <__cxa_end_catch>:
 4009a2c:	deffff04 	addi	sp,sp,-4
 4009a30:	dfc00015 	stw	ra,0(sp)
 4009a34:	400a22c0 	call	400a22c <__cxa_get_globals_fast>
 4009a38:	11000017 	ldw	r4,0(r2)
 4009a3c:	20001426 	beq	r4,zero,4009a90 <__cxa_end_catch+0x64>
 4009a40:	21400b17 	ldw	r5,44(r4)
 4009a44:	01ef3574 	movhi	r7,48341
 4009a48:	39f54004 	addi	r7,r7,-11008
 4009a4c:	29cf883a 	add	r7,r5,r7
 4009a50:	20c00c17 	ldw	r3,48(r4)
 4009a54:	394d803a 	cmpltu	r6,r7,r5
 4009a58:	016e2cb4 	movhi	r5,47282
 4009a5c:	296aaf04 	addi	r5,r5,-21828
 4009a60:	1947883a 	add	r3,r3,r5
 4009a64:	30c7883a 	add	r3,r6,r3
 4009a68:	18000c1e 	bne	r3,zero,4009a9c <__cxa_end_catch+0x70>
 4009a6c:	00c00044 	movi	r3,1
 4009a70:	19c00a36 	bltu	r3,r7,4009a9c <__cxa_end_catch+0x70>
 4009a74:	20c00517 	ldw	r3,20(r4)
 4009a78:	18000d16 	blt	r3,zero,4009ab0 <__cxa_end_catch+0x84>
 4009a7c:	18ffffc4 	addi	r3,r3,-1
 4009a80:	18001026 	beq	r3,zero,4009ac4 <__cxa_end_catch+0x98>
 4009a84:	00bfffc4 	movi	r2,-1
 4009a88:	18801426 	beq	r3,r2,4009adc <__cxa_end_catch+0xb0>
 4009a8c:	20c00515 	stw	r3,20(r4)
 4009a90:	dfc00017 	ldw	ra,0(sp)
 4009a94:	dec00104 	addi	sp,sp,4
 4009a98:	f800283a 	ret
 4009a9c:	21000b04 	addi	r4,r4,44
 4009aa0:	10000015 	stw	zero,0(r2)
 4009aa4:	dfc00017 	ldw	ra,0(sp)
 4009aa8:	dec00104 	addi	sp,sp,4
 4009aac:	400a9081 	jmpi	400a908 <_Unwind_DeleteException>
 4009ab0:	18c00044 	addi	r3,r3,1
 4009ab4:	183ff51e 	bne	r3,zero,4009a8c <__alt_data_end+0xfc009a8c>
 4009ab8:	21400417 	ldw	r5,16(r4)
 4009abc:	11400015 	stw	r5,0(r2)
 4009ac0:	003ff206 	br	4009a8c <__alt_data_end+0xfc009a8c>
 4009ac4:	20c00417 	ldw	r3,16(r4)
 4009ac8:	21000b04 	addi	r4,r4,44
 4009acc:	10c00015 	stw	r3,0(r2)
 4009ad0:	dfc00017 	ldw	ra,0(sp)
 4009ad4:	dec00104 	addi	sp,sp,4
 4009ad8:	400a9081 	jmpi	400a908 <_Unwind_DeleteException>
 4009adc:	4009e880 	call	4009e88 <_ZSt9terminatev>

04009ae0 <_ZSt18uncaught_exceptionv>:
 4009ae0:	deffff04 	addi	sp,sp,-4
 4009ae4:	dfc00015 	stw	ra,0(sp)
 4009ae8:	400a2380 	call	400a238 <__cxa_get_globals>
 4009aec:	10800117 	ldw	r2,4(r2)
 4009af0:	1004c03a 	cmpne	r2,r2,zero
 4009af4:	dfc00017 	ldw	ra,0(sp)
 4009af8:	dec00104 	addi	sp,sp,4
 4009afc:	f800283a 	ret

04009b00 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 4009b00:	20800017 	ldw	r2,0(r4)
 4009b04:	defffa04 	addi	sp,sp,-24
 4009b08:	dc000415 	stw	r16,16(sp)
 4009b0c:	10800617 	ldw	r2,24(r2)
 4009b10:	3021883a 	mov	r16,r6
 4009b14:	31800017 	ldw	r6,0(r6)
 4009b18:	00c00404 	movi	r3,16
 4009b1c:	d8c00215 	stw	r3,8(sp)
 4009b20:	dfc00515 	stw	ra,20(sp)
 4009b24:	d8000015 	stw	zero,0(sp)
 4009b28:	d8000115 	stw	zero,4(sp)
 4009b2c:	d8000315 	stw	zero,12(sp)
 4009b30:	d80f883a 	mov	r7,sp
 4009b34:	103ee83a 	callr	r2
 4009b38:	d8800117 	ldw	r2,4(sp)
 4009b3c:	00c00184 	movi	r3,6
 4009b40:	1080018c 	andi	r2,r2,6
 4009b44:	10c00526 	beq	r2,r3,4009b5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 4009b48:	0005883a 	mov	r2,zero
 4009b4c:	dfc00517 	ldw	ra,20(sp)
 4009b50:	dc000417 	ldw	r16,16(sp)
 4009b54:	dec00604 	addi	sp,sp,24
 4009b58:	f800283a 	ret
 4009b5c:	d8c00017 	ldw	r3,0(sp)
 4009b60:	00800044 	movi	r2,1
 4009b64:	80c00015 	stw	r3,0(r16)
 4009b68:	dfc00517 	ldw	ra,20(sp)
 4009b6c:	dc000417 	ldw	r16,16(sp)
 4009b70:	dec00604 	addi	sp,sp,24
 4009b74:	f800283a 	ret

04009b78 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 4009b78:	d8800017 	ldw	r2,0(sp)
 4009b7c:	11800226 	beq	r2,r6,4009b88 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 4009b80:	00800044 	movi	r2,1
 4009b84:	f800283a 	ret
 4009b88:	00800184 	movi	r2,6
 4009b8c:	f800283a 	ret

04009b90 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 4009b90:	008100b4 	movhi	r2,1026
 4009b94:	10a97604 	addi	r2,r2,-23080
 4009b98:	20800015 	stw	r2,0(r4)
 4009b9c:	40087201 	jmpi	4008720 <_ZNSt9type_infoD1Ev>

04009ba0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 4009ba0:	defffe04 	addi	sp,sp,-8
 4009ba4:	008100b4 	movhi	r2,1026
 4009ba8:	dc000015 	stw	r16,0(sp)
 4009bac:	dfc00115 	stw	ra,4(sp)
 4009bb0:	10a97604 	addi	r2,r2,-23080
 4009bb4:	20800015 	stw	r2,0(r4)
 4009bb8:	2021883a 	mov	r16,r4
 4009bbc:	40087200 	call	4008720 <_ZNSt9type_infoD1Ev>
 4009bc0:	8009883a 	mov	r4,r16
 4009bc4:	dfc00117 	ldw	ra,4(sp)
 4009bc8:	dc000017 	ldw	r16,0(sp)
 4009bcc:	dec00204 	addi	sp,sp,8
 4009bd0:	40097601 	jmpi	4009760 <_ZdlPv>

04009bd4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 4009bd4:	21000117 	ldw	r4,4(r4)
 4009bd8:	29400117 	ldw	r5,4(r5)
 4009bdc:	defffd04 	addi	sp,sp,-12
 4009be0:	dc400115 	stw	r17,4(sp)
 4009be4:	dc000015 	stw	r16,0(sp)
 4009be8:	dfc00215 	stw	ra,8(sp)
 4009bec:	3023883a 	mov	r17,r6
 4009bf0:	3821883a 	mov	r16,r7
 4009bf4:	21400526 	beq	r4,r5,4009c0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 4009bf8:	20c00007 	ldb	r3,0(r4)
 4009bfc:	00800a84 	movi	r2,42
 4009c00:	18800d26 	beq	r3,r2,4009c38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 4009c04:	400b9b00 	call	400b9b0 <strcmp>
 4009c08:	10000b1e 	bne	r2,zero,4009c38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 4009c0c:	00800204 	movi	r2,8
 4009c10:	80800315 	stw	r2,12(r16)
 4009c14:	00800184 	movi	r2,6
 4009c18:	80800115 	stw	r2,4(r16)
 4009c1c:	84400015 	stw	r17,0(r16)
 4009c20:	00800044 	movi	r2,1
 4009c24:	dfc00217 	ldw	ra,8(sp)
 4009c28:	dc400117 	ldw	r17,4(sp)
 4009c2c:	dc000017 	ldw	r16,0(sp)
 4009c30:	dec00304 	addi	sp,sp,12
 4009c34:	f800283a 	ret
 4009c38:	0005883a 	mov	r2,zero
 4009c3c:	003ff906 	br	4009c24 <__alt_data_end+0xfc009c24>

04009c40 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 4009c40:	defffa04 	addi	sp,sp,-24
 4009c44:	dc800415 	stw	r18,16(sp)
 4009c48:	d8800817 	ldw	r2,32(sp)
 4009c4c:	dc800617 	ldw	r18,24(sp)
 4009c50:	dc400315 	stw	r17,12(sp)
 4009c54:	dc000215 	stw	r16,8(sp)
 4009c58:	dfc00515 	stw	ra,20(sp)
 4009c5c:	dc400917 	ldw	r17,36(sp)
 4009c60:	24000117 	ldw	r16,4(r4)
 4009c64:	90801526 	beq	r18,r2,4009cbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 4009c68:	39400117 	ldw	r5,4(r7)
 4009c6c:	2c000826 	beq	r5,r16,4009c90 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 4009c70:	80c00007 	ldb	r3,0(r16)
 4009c74:	00800a84 	movi	r2,42
 4009c78:	18800926 	beq	r3,r2,4009ca0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 4009c7c:	8009883a 	mov	r4,r16
 4009c80:	d9800115 	stw	r6,4(sp)
 4009c84:	400b9b00 	call	400b9b0 <strcmp>
 4009c88:	d9800117 	ldw	r6,4(sp)
 4009c8c:	1000041e 	bne	r2,zero,4009ca0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 4009c90:	00800044 	movi	r2,1
 4009c94:	8c800015 	stw	r18,0(r17)
 4009c98:	89800115 	stw	r6,4(r17)
 4009c9c:	88800315 	stw	r2,12(r17)
 4009ca0:	0005883a 	mov	r2,zero
 4009ca4:	dfc00517 	ldw	ra,20(sp)
 4009ca8:	dc800417 	ldw	r18,16(sp)
 4009cac:	dc400317 	ldw	r17,12(sp)
 4009cb0:	dc000217 	ldw	r16,8(sp)
 4009cb4:	dec00604 	addi	sp,sp,24
 4009cb8:	f800283a 	ret
 4009cbc:	d8800717 	ldw	r2,28(sp)
 4009cc0:	11400117 	ldw	r5,4(r2)
 4009cc4:	81400a26 	beq	r16,r5,4009cf0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 4009cc8:	80c00007 	ldb	r3,0(r16)
 4009ccc:	00800a84 	movi	r2,42
 4009cd0:	18800c26 	beq	r3,r2,4009d04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 4009cd4:	8009883a 	mov	r4,r16
 4009cd8:	d9800115 	stw	r6,4(sp)
 4009cdc:	d9c00015 	stw	r7,0(sp)
 4009ce0:	400b9b00 	call	400b9b0 <strcmp>
 4009ce4:	d9800117 	ldw	r6,4(sp)
 4009ce8:	d9c00017 	ldw	r7,0(sp)
 4009cec:	1000021e 	bne	r2,zero,4009cf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 4009cf0:	89800215 	stw	r6,8(r17)
 4009cf4:	003fea06 	br	4009ca0 <__alt_data_end+0xfc009ca0>
 4009cf8:	39400117 	ldw	r5,4(r7)
 4009cfc:	817fdf1e 	bne	r16,r5,4009c7c <__alt_data_end+0xfc009c7c>
 4009d00:	003fe306 	br	4009c90 <__alt_data_end+0xfc009c90>
 4009d04:	38800117 	ldw	r2,4(r7)
 4009d08:	80bfe51e 	bne	r16,r2,4009ca0 <__alt_data_end+0xfc009ca0>
 4009d0c:	003fe006 	br	4009c90 <__alt_data_end+0xfc009c90>

04009d10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 4009d10:	20800117 	ldw	r2,4(r4)
 4009d14:	28c00117 	ldw	r3,4(r5)
 4009d18:	10c02926 	beq	r2,r3,4009dc0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 4009d1c:	defffb04 	addi	sp,sp,-20
 4009d20:	dcc00315 	stw	r19,12(sp)
 4009d24:	dc800215 	stw	r18,8(sp)
 4009d28:	dc400115 	stw	r17,4(sp)
 4009d2c:	dc000015 	stw	r16,0(sp)
 4009d30:	dfc00415 	stw	ra,16(sp)
 4009d34:	2821883a 	mov	r16,r5
 4009d38:	11400007 	ldb	r5,0(r2)
 4009d3c:	2025883a 	mov	r18,r4
 4009d40:	01000a84 	movi	r4,42
 4009d44:	3823883a 	mov	r17,r7
 4009d48:	3027883a 	mov	r19,r6
 4009d4c:	29000626 	beq	r5,r4,4009d68 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 4009d50:	180b883a 	mov	r5,r3
 4009d54:	1009883a 	mov	r4,r2
 4009d58:	400b9b00 	call	400b9b0 <strcmp>
 4009d5c:	1000021e 	bne	r2,zero,4009d68 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 4009d60:	00800044 	movi	r2,1
 4009d64:	00000306 	br	4009d74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 4009d68:	008000c4 	movi	r2,3
 4009d6c:	1440082e 	bgeu	r2,r17,4009d90 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 4009d70:	0005883a 	mov	r2,zero
 4009d74:	dfc00417 	ldw	ra,16(sp)
 4009d78:	dcc00317 	ldw	r19,12(sp)
 4009d7c:	dc800217 	ldw	r18,8(sp)
 4009d80:	dc400117 	ldw	r17,4(sp)
 4009d84:	dc000017 	ldw	r16,0(sp)
 4009d88:	dec00504 	addi	sp,sp,20
 4009d8c:	f800283a 	ret
 4009d90:	80800017 	ldw	r2,0(r16)
 4009d94:	980d883a 	mov	r6,r19
 4009d98:	900b883a 	mov	r5,r18
 4009d9c:	10800517 	ldw	r2,20(r2)
 4009da0:	8009883a 	mov	r4,r16
 4009da4:	dfc00417 	ldw	ra,16(sp)
 4009da8:	dcc00317 	ldw	r19,12(sp)
 4009dac:	dc800217 	ldw	r18,8(sp)
 4009db0:	dc400117 	ldw	r17,4(sp)
 4009db4:	dc000017 	ldw	r16,0(sp)
 4009db8:	dec00504 	addi	sp,sp,20
 4009dbc:	1000683a 	jmp	r2
 4009dc0:	00800044 	movi	r2,1
 4009dc4:	f800283a 	ret

04009dc8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 4009dc8:	00810074 	movhi	r2,1025
 4009dcc:	deffef04 	addi	sp,sp,-68
 4009dd0:	10a3cc04 	addi	r2,r2,-28880
 4009dd4:	d8800615 	stw	r2,24(sp)
 4009dd8:	008100b4 	movhi	r2,1026
 4009ddc:	10a89104 	addi	r2,r2,-23996
 4009de0:	d8800715 	stw	r2,28(sp)
 4009de4:	00810074 	movhi	r2,1025
 4009de8:	10a78804 	addi	r2,r2,-25056
 4009dec:	d9000d15 	stw	r4,52(sp)
 4009df0:	d809883a 	mov	r4,sp
 4009df4:	d8800915 	stw	r2,36(sp)
 4009df8:	dfc01015 	stw	ra,64(sp)
 4009dfc:	df000f15 	stw	fp,60(sp)
 4009e00:	dec00815 	stw	sp,32(sp)
 4009e04:	dec00a15 	stw	sp,40(sp)
 4009e08:	400a67c0 	call	400a67c <_Unwind_SjLj_Register>
 4009e0c:	00800044 	movi	r2,1
 4009e10:	d8800115 	stw	r2,4(sp)
 4009e14:	d8800d17 	ldw	r2,52(sp)
 4009e18:	103ee83a 	callr	r2
 4009e1c:	400a9940 	call	400a994 <abort>
 4009e20:	d8c00217 	ldw	r3,8(sp)
 4009e24:	d8800117 	ldw	r2,4(sp)
 4009e28:	d8c00d15 	stw	r3,52(sp)
 4009e2c:	d8c00317 	ldw	r3,12(sp)
 4009e30:	d8c00e15 	stw	r3,56(sp)
 4009e34:	10000b26 	beq	r2,zero,4009e64 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 4009e38:	10bfffc4 	addi	r2,r2,-1
 4009e3c:	10000126 	beq	r2,zero,4009e44 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 4009e40:	003b68fa 	trap	3
 4009e44:	d8000115 	stw	zero,4(sp)
 4009e48:	4009a2c0 	call	4009a2c <__cxa_end_catch>
 4009e4c:	d8c00e17 	ldw	r3,56(sp)
 4009e50:	00bfffc4 	movi	r2,-1
 4009e54:	18800826 	beq	r3,r2,4009e78 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 4009e58:	d9000d17 	ldw	r4,52(sp)
 4009e5c:	d8800115 	stw	r2,4(sp)
 4009e60:	400a8780 	call	400a878 <_Unwind_SjLj_Resume>
 4009e64:	d9000d17 	ldw	r4,52(sp)
 4009e68:	40099780 	call	4009978 <__cxa_begin_catch>
 4009e6c:	00800084 	movi	r2,2
 4009e70:	d8800115 	stw	r2,4(sp)
 4009e74:	400a9940 	call	400a994 <abort>
 4009e78:	d8800e17 	ldw	r2,56(sp)
 4009e7c:	d9000d17 	ldw	r4,52(sp)
 4009e80:	d8800115 	stw	r2,4(sp)
 4009e84:	40095300 	call	4009530 <__cxa_call_unexpected>

04009e88 <_ZSt9terminatev>:
 4009e88:	008100b4 	movhi	r2,1026
 4009e8c:	1086e704 	addi	r2,r2,7068
 4009e90:	11000017 	ldw	r4,0(r2)
 4009e94:	deffff04 	addi	sp,sp,-4
 4009e98:	dfc00015 	stw	ra,0(sp)
 4009e9c:	4009dc80 	call	4009dc8 <_ZN10__cxxabiv111__terminateEPFvvE>

04009ea0 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 4009ea0:	deffff04 	addi	sp,sp,-4
 4009ea4:	dfc00015 	stw	ra,0(sp)
 4009ea8:	203ee83a 	callr	r4
 4009eac:	4009e880 	call	4009e88 <_ZSt9terminatev>

04009eb0 <_ZSt10unexpectedv>:
 4009eb0:	008100b4 	movhi	r2,1026
 4009eb4:	1086e004 	addi	r2,r2,7040
 4009eb8:	11000017 	ldw	r4,0(r2)
 4009ebc:	deffff04 	addi	sp,sp,-4
 4009ec0:	dfc00015 	stw	ra,0(sp)
 4009ec4:	4009ea00 	call	4009ea0 <_ZN10__cxxabiv112__unexpectedEPFvvE>

04009ec8 <_ZSt13set_terminatePFvvE>:
 4009ec8:	00c100b4 	movhi	r3,1026
 4009ecc:	18c6e704 	addi	r3,r3,7068
 4009ed0:	18800017 	ldw	r2,0(r3)
 4009ed4:	19000015 	stw	r4,0(r3)
 4009ed8:	f800283a 	ret

04009edc <_ZSt13get_terminatev>:
 4009edc:	008100b4 	movhi	r2,1026
 4009ee0:	1086e704 	addi	r2,r2,7068
 4009ee4:	10800017 	ldw	r2,0(r2)
 4009ee8:	f800283a 	ret

04009eec <_ZSt14set_unexpectedPFvvE>:
 4009eec:	00c100b4 	movhi	r3,1026
 4009ef0:	18c6e004 	addi	r3,r3,7040
 4009ef4:	18800017 	ldw	r2,0(r3)
 4009ef8:	19000015 	stw	r4,0(r3)
 4009efc:	f800283a 	ret

04009f00 <_ZSt14get_unexpectedv>:
 4009f00:	008100b4 	movhi	r2,1026
 4009f04:	1086e004 	addi	r2,r2,7040
 4009f08:	10800017 	ldw	r2,0(r2)
 4009f0c:	f800283a 	ret

04009f10 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 4009f10:	018100f4 	movhi	r6,1027
 4009f14:	31a3b504 	addi	r6,r6,-28972
 4009f18:	31400117 	ldw	r5,4(r6)
 4009f1c:	223fff04 	addi	r8,r4,-4
 4009f20:	227fff17 	ldw	r9,-4(r4)
 4009f24:	28001326 	beq	r5,zero,4009f74 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
 4009f28:	424f883a 	add	r7,r8,r9
 4009f2c:	29c01426 	beq	r5,r7,4009f80 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 4009f30:	28c00117 	ldw	r3,4(r5)
 4009f34:	18001c26 	beq	r3,zero,4009fa8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 4009f38:	38c00336 	bltu	r7,r3,4009f48 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 4009f3c:	00001e06 	br	4009fb8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
 4009f40:	3880052e 	bgeu	r7,r2,4009f58 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
 4009f44:	1007883a 	mov	r3,r2
 4009f48:	18800117 	ldw	r2,4(r3)
 4009f4c:	29800104 	addi	r6,r5,4
 4009f50:	180b883a 	mov	r5,r3
 4009f54:	103ffa1e 	bne	r2,zero,4009f40 <__alt_data_end+0xfc009f40>
 4009f58:	19400017 	ldw	r5,0(r3)
 4009f5c:	194f883a 	add	r7,r3,r5
 4009f60:	41c00e26 	beq	r8,r7,4009f9c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
 4009f64:	20800015 	stw	r2,0(r4)
 4009f68:	30800017 	ldw	r2,0(r6)
 4009f6c:	12000115 	stw	r8,4(r2)
 4009f70:	f800283a 	ret
 4009f74:	20000015 	stw	zero,0(r4)
 4009f78:	32000115 	stw	r8,4(r6)
 4009f7c:	f800283a 	ret
 4009f80:	28c00017 	ldw	r3,0(r5)
 4009f84:	28800117 	ldw	r2,4(r5)
 4009f88:	1a53883a 	add	r9,r3,r9
 4009f8c:	227fff15 	stw	r9,-4(r4)
 4009f90:	20800015 	stw	r2,0(r4)
 4009f94:	32000115 	stw	r8,4(r6)
 4009f98:	f800283a 	ret
 4009f9c:	494b883a 	add	r5,r9,r5
 4009fa0:	19400015 	stw	r5,0(r3)
 4009fa4:	f800283a 	ret
 4009fa8:	0005883a 	mov	r2,zero
 4009fac:	2807883a 	mov	r3,r5
 4009fb0:	31800104 	addi	r6,r6,4
 4009fb4:	003fe806 	br	4009f58 <__alt_data_end+0xfc009f58>
 4009fb8:	1805883a 	mov	r2,r3
 4009fbc:	31800104 	addi	r6,r6,4
 4009fc0:	2807883a 	mov	r3,r5
 4009fc4:	003fe406 	br	4009f58 <__alt_data_end+0xfc009f58>

04009fc8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 4009fc8:	20800104 	addi	r2,r4,4
 4009fcc:	00c001c4 	movi	r3,7
 4009fd0:	1880112e 	bgeu	r3,r2,400a018 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 4009fd4:	20c9883a 	add	r4,r4,r3
 4009fd8:	00bfff04 	movi	r2,-4
 4009fdc:	208a703a 	and	r5,r4,r2
 4009fe0:	018100f4 	movhi	r6,1027
 4009fe4:	31a3b504 	addi	r6,r6,-28972
 4009fe8:	30c00117 	ldw	r3,4(r6)
 4009fec:	18000826 	beq	r3,zero,400a010 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 4009ff0:	19000017 	ldw	r4,0(r3)
 4009ff4:	21400436 	bltu	r4,r5,400a008 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
 4009ff8:	00001a06 	br	400a064 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
 4009ffc:	11000017 	ldw	r4,0(r2)
 400a000:	2140072e 	bgeu	r4,r5,400a020 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 400a004:	1007883a 	mov	r3,r2
 400a008:	18800117 	ldw	r2,4(r3)
 400a00c:	103ffb1e 	bne	r2,zero,4009ffc <__alt_data_end+0xfc009ffc>
 400a010:	0005883a 	mov	r2,zero
 400a014:	f800283a 	ret
 400a018:	01400204 	movi	r5,8
 400a01c:	003ff006 	br	4009fe0 <__alt_data_end+0xfc009fe0>
 400a020:	18c00104 	addi	r3,r3,4
 400a024:	2149c83a 	sub	r4,r4,r5
 400a028:	018001c4 	movi	r6,7
 400a02c:	3100092e 	bgeu	r6,r4,400a054 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
 400a030:	11c00117 	ldw	r7,4(r2)
 400a034:	114d883a 	add	r6,r2,r5
 400a038:	31000015 	stw	r4,0(r6)
 400a03c:	31c00115 	stw	r7,4(r6)
 400a040:	18800017 	ldw	r2,0(r3)
 400a044:	11400015 	stw	r5,0(r2)
 400a048:	19800015 	stw	r6,0(r3)
 400a04c:	10800104 	addi	r2,r2,4
 400a050:	f800283a 	ret
 400a054:	11000117 	ldw	r4,4(r2)
 400a058:	10800104 	addi	r2,r2,4
 400a05c:	19000015 	stw	r4,0(r3)
 400a060:	f800283a 	ret
 400a064:	1805883a 	mov	r2,r3
 400a068:	30c00104 	addi	r3,r6,4
 400a06c:	003fed06 	br	400a024 <__alt_data_end+0xfc00a024>

0400a070 <__cxa_allocate_exception>:
 400a070:	defffd04 	addi	sp,sp,-12
 400a074:	dc400115 	stw	r17,4(sp)
 400a078:	24401104 	addi	r17,r4,68
 400a07c:	8809883a 	mov	r4,r17
 400a080:	dc000015 	stw	r16,0(sp)
 400a084:	dfc00215 	stw	ra,8(sp)
 400a088:	400a9f80 	call	400a9f8 <malloc>
 400a08c:	1021883a 	mov	r16,r2
 400a090:	10000a26 	beq	r2,zero,400a0bc <__cxa_allocate_exception+0x4c>
 400a094:	01801104 	movi	r6,68
 400a098:	000b883a 	mov	r5,zero
 400a09c:	8009883a 	mov	r4,r16
 400a0a0:	400b3f00 	call	400b3f0 <memset>
 400a0a4:	80801104 	addi	r2,r16,68
 400a0a8:	dfc00217 	ldw	ra,8(sp)
 400a0ac:	dc400117 	ldw	r17,4(sp)
 400a0b0:	dc000017 	ldw	r16,0(sp)
 400a0b4:	dec00304 	addi	sp,sp,12
 400a0b8:	f800283a 	ret
 400a0bc:	8809883a 	mov	r4,r17
 400a0c0:	4009fc80 	call	4009fc8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400a0c4:	1021883a 	mov	r16,r2
 400a0c8:	103ff21e 	bne	r2,zero,400a094 <__alt_data_end+0xfc00a094>
 400a0cc:	4009e880 	call	4009e88 <_ZSt9terminatev>

0400a0d0 <__cxa_free_exception>:
 400a0d0:	00c100f4 	movhi	r3,1027
 400a0d4:	18e3b504 	addi	r3,r3,-28972
 400a0d8:	18800217 	ldw	r2,8(r3)
 400a0dc:	213fef04 	addi	r4,r4,-68
 400a0e0:	1100042e 	bgeu	r2,r4,400a0f4 <__cxa_free_exception+0x24>
 400a0e4:	18c00317 	ldw	r3,12(r3)
 400a0e8:	10c5883a 	add	r2,r2,r3
 400a0ec:	2080012e 	bgeu	r4,r2,400a0f4 <__cxa_free_exception+0x24>
 400a0f0:	4009f101 	jmpi	4009f10 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400a0f4:	400aa0c1 	jmpi	400aa0c <free>

0400a0f8 <__cxa_allocate_dependent_exception>:
 400a0f8:	defffe04 	addi	sp,sp,-8
 400a0fc:	01001004 	movi	r4,64
 400a100:	dc000015 	stw	r16,0(sp)
 400a104:	dfc00115 	stw	ra,4(sp)
 400a108:	400a9f80 	call	400a9f8 <malloc>
 400a10c:	1021883a 	mov	r16,r2
 400a110:	10000926 	beq	r2,zero,400a138 <__cxa_allocate_dependent_exception+0x40>
 400a114:	01801004 	movi	r6,64
 400a118:	000b883a 	mov	r5,zero
 400a11c:	8009883a 	mov	r4,r16
 400a120:	400b3f00 	call	400b3f0 <memset>
 400a124:	8005883a 	mov	r2,r16
 400a128:	dfc00117 	ldw	ra,4(sp)
 400a12c:	dc000017 	ldw	r16,0(sp)
 400a130:	dec00204 	addi	sp,sp,8
 400a134:	f800283a 	ret
 400a138:	01001004 	movi	r4,64
 400a13c:	4009fc80 	call	4009fc8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400a140:	1021883a 	mov	r16,r2
 400a144:	103ff31e 	bne	r2,zero,400a114 <__alt_data_end+0xfc00a114>
 400a148:	4009e880 	call	4009e88 <_ZSt9terminatev>

0400a14c <__cxa_free_dependent_exception>:
 400a14c:	014100f4 	movhi	r5,1027
 400a150:	2963b504 	addi	r5,r5,-28972
 400a154:	28c00217 	ldw	r3,8(r5)
 400a158:	2005883a 	mov	r2,r4
 400a15c:	1900042e 	bgeu	r3,r4,400a170 <__cxa_free_dependent_exception+0x24>
 400a160:	29400317 	ldw	r5,12(r5)
 400a164:	1947883a 	add	r3,r3,r5
 400a168:	20c0012e 	bgeu	r4,r3,400a170 <__cxa_free_dependent_exception+0x24>
 400a16c:	4009f101 	jmpi	4009f10 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400a170:	1009883a 	mov	r4,r2
 400a174:	400aa0c1 	jmpi	400aa0c <free>

0400a178 <_GLOBAL__sub_I___cxa_allocate_exception>:
 400a178:	defffd04 	addi	sp,sp,-12
 400a17c:	dc400115 	stw	r17,4(sp)
 400a180:	dc000015 	stw	r16,0(sp)
 400a184:	04424004 	movi	r17,2304
 400a188:	040100f4 	movhi	r16,1027
 400a18c:	8423b504 	addi	r16,r16,-28972
 400a190:	8809883a 	mov	r4,r17
 400a194:	dfc00215 	stw	ra,8(sp)
 400a198:	84400315 	stw	r17,12(r16)
 400a19c:	400a9f80 	call	400a9f8 <malloc>
 400a1a0:	80800215 	stw	r2,8(r16)
 400a1a4:	10000826 	beq	r2,zero,400a1c8 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
 400a1a8:	80800115 	stw	r2,4(r16)
 400a1ac:	14400015 	stw	r17,0(r2)
 400a1b0:	10000115 	stw	zero,4(r2)
 400a1b4:	dfc00217 	ldw	ra,8(sp)
 400a1b8:	dc400117 	ldw	r17,4(sp)
 400a1bc:	dc000017 	ldw	r16,0(sp)
 400a1c0:	dec00304 	addi	sp,sp,12
 400a1c4:	f800283a 	ret
 400a1c8:	80000315 	stw	zero,12(r16)
 400a1cc:	80000115 	stw	zero,4(r16)
 400a1d0:	003ff806 	br	400a1b4 <__alt_data_end+0xfc00a1b4>

0400a1d4 <__cxa_call_terminate>:
 400a1d4:	defffe04 	addi	sp,sp,-8
 400a1d8:	dfc00115 	stw	ra,4(sp)
 400a1dc:	dc000015 	stw	r16,0(sp)
 400a1e0:	20000d26 	beq	r4,zero,400a218 <__cxa_call_terminate+0x44>
 400a1e4:	2021883a 	mov	r16,r4
 400a1e8:	40099780 	call	4009978 <__cxa_begin_catch>
 400a1ec:	80c00017 	ldw	r3,0(r16)
 400a1f0:	016f3574 	movhi	r5,48341
 400a1f4:	29754004 	addi	r5,r5,-11008
 400a1f8:	194b883a 	add	r5,r3,r5
 400a1fc:	80800117 	ldw	r2,4(r16)
 400a200:	28c9803a 	cmpltu	r4,r5,r3
 400a204:	00ee2cb4 	movhi	r3,47282
 400a208:	18eaaf04 	addi	r3,r3,-21828
 400a20c:	10c5883a 	add	r2,r2,r3
 400a210:	2085883a 	add	r2,r4,r2
 400a214:	10000126 	beq	r2,zero,400a21c <__cxa_call_terminate+0x48>
 400a218:	4009e880 	call	4009e88 <_ZSt9terminatev>
 400a21c:	00800044 	movi	r2,1
 400a220:	117ffd36 	bltu	r2,r5,400a218 <__alt_data_end+0xfc00a218>
 400a224:	813ff817 	ldw	r4,-32(r16)
 400a228:	4009dc80 	call	4009dc8 <_ZN10__cxxabiv111__terminateEPFvvE>

0400a22c <__cxa_get_globals_fast>:
 400a22c:	008100f4 	movhi	r2,1027
 400a230:	10a37904 	addi	r2,r2,-29212
 400a234:	f800283a 	ret

0400a238 <__cxa_get_globals>:
 400a238:	008100f4 	movhi	r2,1027
 400a23c:	10a37904 	addi	r2,r2,-29212
 400a240:	f800283a 	ret

0400a244 <_ZNSt9exceptionD1Ev>:
 400a244:	f800283a 	ret

0400a248 <_ZNSt13bad_exceptionD1Ev>:
 400a248:	f800283a 	ret

0400a24c <_ZNKSt9exception4whatEv>:
 400a24c:	008100b4 	movhi	r2,1026
 400a250:	10a97f04 	addi	r2,r2,-23044
 400a254:	f800283a 	ret

0400a258 <_ZNKSt13bad_exception4whatEv>:
 400a258:	008100b4 	movhi	r2,1026
 400a25c:	10a98304 	addi	r2,r2,-23028
 400a260:	f800283a 	ret

0400a264 <_ZNSt9exceptionD0Ev>:
 400a264:	40097601 	jmpi	4009760 <_ZdlPv>

0400a268 <_ZNSt13bad_exceptionD0Ev>:
 400a268:	40097601 	jmpi	4009760 <_ZdlPv>

0400a26c <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 400a26c:	f800283a 	ret

0400a270 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 400a270:	40097601 	jmpi	4009760 <_ZdlPv>

0400a274 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 400a274:	f800283a 	ret

0400a278 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 400a278:	40097601 	jmpi	4009760 <_ZdlPv>

0400a27c <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
 400a27c:	008100b4 	movhi	r2,1026
 400a280:	10a9c704 	addi	r2,r2,-22756
 400a284:	20800015 	stw	r2,0(r4)
 400a288:	400a2441 	jmpi	400a244 <_ZNSt9exceptionD1Ev>

0400a28c <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
 400a28c:	defffe04 	addi	sp,sp,-8
 400a290:	008100b4 	movhi	r2,1026
 400a294:	dc000015 	stw	r16,0(sp)
 400a298:	dfc00115 	stw	ra,4(sp)
 400a29c:	10a9c704 	addi	r2,r2,-22756
 400a2a0:	20800015 	stw	r2,0(r4)
 400a2a4:	2021883a 	mov	r16,r4
 400a2a8:	400a2440 	call	400a244 <_ZNSt9exceptionD1Ev>
 400a2ac:	8009883a 	mov	r4,r16
 400a2b0:	dfc00117 	ldw	ra,4(sp)
 400a2b4:	dc000017 	ldw	r16,0(sp)
 400a2b8:	dec00204 	addi	sp,sp,8
 400a2bc:	40097601 	jmpi	4009760 <_ZdlPv>

0400a2c0 <__divsi3>:
 400a2c0:	20001b16 	blt	r4,zero,400a330 <__divsi3+0x70>
 400a2c4:	000f883a 	mov	r7,zero
 400a2c8:	28001616 	blt	r5,zero,400a324 <__divsi3+0x64>
 400a2cc:	200d883a 	mov	r6,r4
 400a2d0:	29001a2e 	bgeu	r5,r4,400a33c <__divsi3+0x7c>
 400a2d4:	00800804 	movi	r2,32
 400a2d8:	00c00044 	movi	r3,1
 400a2dc:	00000106 	br	400a2e4 <__divsi3+0x24>
 400a2e0:	10000d26 	beq	r2,zero,400a318 <__divsi3+0x58>
 400a2e4:	294b883a 	add	r5,r5,r5
 400a2e8:	10bfffc4 	addi	r2,r2,-1
 400a2ec:	18c7883a 	add	r3,r3,r3
 400a2f0:	293ffb36 	bltu	r5,r4,400a2e0 <__alt_data_end+0xfc00a2e0>
 400a2f4:	0005883a 	mov	r2,zero
 400a2f8:	18000726 	beq	r3,zero,400a318 <__divsi3+0x58>
 400a2fc:	0005883a 	mov	r2,zero
 400a300:	31400236 	bltu	r6,r5,400a30c <__divsi3+0x4c>
 400a304:	314dc83a 	sub	r6,r6,r5
 400a308:	10c4b03a 	or	r2,r2,r3
 400a30c:	1806d07a 	srli	r3,r3,1
 400a310:	280ad07a 	srli	r5,r5,1
 400a314:	183ffa1e 	bne	r3,zero,400a300 <__alt_data_end+0xfc00a300>
 400a318:	38000126 	beq	r7,zero,400a320 <__divsi3+0x60>
 400a31c:	0085c83a 	sub	r2,zero,r2
 400a320:	f800283a 	ret
 400a324:	014bc83a 	sub	r5,zero,r5
 400a328:	39c0005c 	xori	r7,r7,1
 400a32c:	003fe706 	br	400a2cc <__alt_data_end+0xfc00a2cc>
 400a330:	0109c83a 	sub	r4,zero,r4
 400a334:	01c00044 	movi	r7,1
 400a338:	003fe306 	br	400a2c8 <__alt_data_end+0xfc00a2c8>
 400a33c:	00c00044 	movi	r3,1
 400a340:	003fee06 	br	400a2fc <__alt_data_end+0xfc00a2fc>

0400a344 <__modsi3>:
 400a344:	20001716 	blt	r4,zero,400a3a4 <__modsi3+0x60>
 400a348:	000f883a 	mov	r7,zero
 400a34c:	2005883a 	mov	r2,r4
 400a350:	28001216 	blt	r5,zero,400a39c <__modsi3+0x58>
 400a354:	2900162e 	bgeu	r5,r4,400a3b0 <__modsi3+0x6c>
 400a358:	01800804 	movi	r6,32
 400a35c:	00c00044 	movi	r3,1
 400a360:	00000106 	br	400a368 <__modsi3+0x24>
 400a364:	30000a26 	beq	r6,zero,400a390 <__modsi3+0x4c>
 400a368:	294b883a 	add	r5,r5,r5
 400a36c:	31bfffc4 	addi	r6,r6,-1
 400a370:	18c7883a 	add	r3,r3,r3
 400a374:	293ffb36 	bltu	r5,r4,400a364 <__alt_data_end+0xfc00a364>
 400a378:	18000526 	beq	r3,zero,400a390 <__modsi3+0x4c>
 400a37c:	1806d07a 	srli	r3,r3,1
 400a380:	11400136 	bltu	r2,r5,400a388 <__modsi3+0x44>
 400a384:	1145c83a 	sub	r2,r2,r5
 400a388:	280ad07a 	srli	r5,r5,1
 400a38c:	183ffb1e 	bne	r3,zero,400a37c <__alt_data_end+0xfc00a37c>
 400a390:	38000126 	beq	r7,zero,400a398 <__modsi3+0x54>
 400a394:	0085c83a 	sub	r2,zero,r2
 400a398:	f800283a 	ret
 400a39c:	014bc83a 	sub	r5,zero,r5
 400a3a0:	003fec06 	br	400a354 <__alt_data_end+0xfc00a354>
 400a3a4:	0109c83a 	sub	r4,zero,r4
 400a3a8:	01c00044 	movi	r7,1
 400a3ac:	003fe706 	br	400a34c <__alt_data_end+0xfc00a34c>
 400a3b0:	00c00044 	movi	r3,1
 400a3b4:	003ff106 	br	400a37c <__alt_data_end+0xfc00a37c>

0400a3b8 <__udivsi3>:
 400a3b8:	200d883a 	mov	r6,r4
 400a3bc:	2900152e 	bgeu	r5,r4,400a414 <__udivsi3+0x5c>
 400a3c0:	28001416 	blt	r5,zero,400a414 <__udivsi3+0x5c>
 400a3c4:	00800804 	movi	r2,32
 400a3c8:	00c00044 	movi	r3,1
 400a3cc:	00000206 	br	400a3d8 <__udivsi3+0x20>
 400a3d0:	10000e26 	beq	r2,zero,400a40c <__udivsi3+0x54>
 400a3d4:	28000516 	blt	r5,zero,400a3ec <__udivsi3+0x34>
 400a3d8:	294b883a 	add	r5,r5,r5
 400a3dc:	10bfffc4 	addi	r2,r2,-1
 400a3e0:	18c7883a 	add	r3,r3,r3
 400a3e4:	293ffa36 	bltu	r5,r4,400a3d0 <__alt_data_end+0xfc00a3d0>
 400a3e8:	18000826 	beq	r3,zero,400a40c <__udivsi3+0x54>
 400a3ec:	0005883a 	mov	r2,zero
 400a3f0:	31400236 	bltu	r6,r5,400a3fc <__udivsi3+0x44>
 400a3f4:	314dc83a 	sub	r6,r6,r5
 400a3f8:	10c4b03a 	or	r2,r2,r3
 400a3fc:	1806d07a 	srli	r3,r3,1
 400a400:	280ad07a 	srli	r5,r5,1
 400a404:	183ffa1e 	bne	r3,zero,400a3f0 <__alt_data_end+0xfc00a3f0>
 400a408:	f800283a 	ret
 400a40c:	0005883a 	mov	r2,zero
 400a410:	f800283a 	ret
 400a414:	00c00044 	movi	r3,1
 400a418:	003ff406 	br	400a3ec <__alt_data_end+0xfc00a3ec>

0400a41c <__umodsi3>:
 400a41c:	2005883a 	mov	r2,r4
 400a420:	2900122e 	bgeu	r5,r4,400a46c <__umodsi3+0x50>
 400a424:	28001116 	blt	r5,zero,400a46c <__umodsi3+0x50>
 400a428:	01800804 	movi	r6,32
 400a42c:	00c00044 	movi	r3,1
 400a430:	00000206 	br	400a43c <__umodsi3+0x20>
 400a434:	30000c26 	beq	r6,zero,400a468 <__umodsi3+0x4c>
 400a438:	28000516 	blt	r5,zero,400a450 <__umodsi3+0x34>
 400a43c:	294b883a 	add	r5,r5,r5
 400a440:	31bfffc4 	addi	r6,r6,-1
 400a444:	18c7883a 	add	r3,r3,r3
 400a448:	293ffa36 	bltu	r5,r4,400a434 <__alt_data_end+0xfc00a434>
 400a44c:	18000626 	beq	r3,zero,400a468 <__umodsi3+0x4c>
 400a450:	1806d07a 	srli	r3,r3,1
 400a454:	11400136 	bltu	r2,r5,400a45c <__umodsi3+0x40>
 400a458:	1145c83a 	sub	r2,r2,r5
 400a45c:	280ad07a 	srli	r5,r5,1
 400a460:	183ffb1e 	bne	r3,zero,400a450 <__alt_data_end+0xfc00a450>
 400a464:	f800283a 	ret
 400a468:	f800283a 	ret
 400a46c:	00c00044 	movi	r3,1
 400a470:	003ff706 	br	400a450 <__alt_data_end+0xfc00a450>

0400a474 <_Unwind_ForcedUnwind_Phase2>:
 400a474:	defff404 	addi	sp,sp,-48
 400a478:	dd800915 	stw	r22,36(sp)
 400a47c:	058100f4 	movhi	r22,1027
 400a480:	ddc00a15 	stw	r23,40(sp)
 400a484:	dd400815 	stw	r21,32(sp)
 400a488:	dd000715 	stw	r20,28(sp)
 400a48c:	dcc00615 	stw	r19,24(sp)
 400a490:	dc400415 	stw	r17,16(sp)
 400a494:	dc000315 	stw	r16,12(sp)
 400a498:	dfc00b15 	stw	ra,44(sp)
 400a49c:	dc800515 	stw	r18,20(sp)
 400a4a0:	2021883a 	mov	r16,r4
 400a4a4:	2823883a 	mov	r17,r5
 400a4a8:	24c00317 	ldw	r19,12(r4)
 400a4ac:	25000417 	ldw	r20,16(r4)
 400a4b0:	28c00017 	ldw	r3,0(r5)
 400a4b4:	b5a37b04 	addi	r22,r22,-29204
 400a4b8:	054001c4 	movi	r21,7
 400a4bc:	05c00204 	movi	r23,8
 400a4c0:	00001606 	br	400a51c <_Unwind_ForcedUnwind_Phase2+0xa8>
 400a4c4:	81800017 	ldw	r6,0(r16)
 400a4c8:	81c00117 	ldw	r7,4(r16)
 400a4cc:	1c800617 	ldw	r18,24(r3)
 400a4d0:	dd000215 	stw	r20,8(sp)
 400a4d4:	dc400115 	stw	r17,4(sp)
 400a4d8:	dc000015 	stw	r16,0(sp)
 400a4dc:	983ee83a 	callr	r19
 400a4e0:	01400284 	movi	r5,10
 400a4e4:	01000044 	movi	r4,1
 400a4e8:	1000241e 	bne	r2,zero,400a57c <_Unwind_ForcedUnwind_Phase2+0x108>
 400a4ec:	90000726 	beq	r18,zero,400a50c <_Unwind_ForcedUnwind_Phase2+0x98>
 400a4f0:	81800017 	ldw	r6,0(r16)
 400a4f4:	81c00117 	ldw	r7,4(r16)
 400a4f8:	dc400115 	stw	r17,4(sp)
 400a4fc:	dc000015 	stw	r16,0(sp)
 400a500:	903ee83a 	callr	r18
 400a504:	15401f26 	beq	r2,r21,400a584 <_Unwind_ForcedUnwind_Phase2+0x110>
 400a508:	15c01c1e 	bne	r2,r23,400a57c <_Unwind_ForcedUnwind_Phase2+0x108>
 400a50c:	88800017 	ldw	r2,0(r17)
 400a510:	10c00017 	ldw	r3,0(r2)
 400a514:	b0c00015 	stw	r3,0(r22)
 400a518:	88c00015 	stw	r3,0(r17)
 400a51c:	01400284 	movi	r5,10
 400a520:	01000044 	movi	r4,1
 400a524:	183fe71e 	bne	r3,zero,400a4c4 <__alt_data_end+0xfc00a4c4>
 400a528:	81800017 	ldw	r6,0(r16)
 400a52c:	81c00117 	ldw	r7,4(r16)
 400a530:	01400684 	movi	r5,26
 400a534:	dd000215 	stw	r20,8(sp)
 400a538:	dc400115 	stw	r17,4(sp)
 400a53c:	dc000015 	stw	r16,0(sp)
 400a540:	01000044 	movi	r4,1
 400a544:	983ee83a 	callr	r19
 400a548:	10000c1e 	bne	r2,zero,400a57c <_Unwind_ForcedUnwind_Phase2+0x108>
 400a54c:	00800144 	movi	r2,5
 400a550:	dfc00b17 	ldw	ra,44(sp)
 400a554:	ddc00a17 	ldw	r23,40(sp)
 400a558:	dd800917 	ldw	r22,36(sp)
 400a55c:	dd400817 	ldw	r21,32(sp)
 400a560:	dd000717 	ldw	r20,28(sp)
 400a564:	dcc00617 	ldw	r19,24(sp)
 400a568:	dc800517 	ldw	r18,20(sp)
 400a56c:	dc400417 	ldw	r17,16(sp)
 400a570:	dc000317 	ldw	r16,12(sp)
 400a574:	dec00c04 	addi	sp,sp,48
 400a578:	f800283a 	ret
 400a57c:	00800084 	movi	r2,2
 400a580:	003ff306 	br	400a550 <__alt_data_end+0xfc00a550>
 400a584:	a805883a 	mov	r2,r21
 400a588:	003ff106 	br	400a550 <__alt_data_end+0xfc00a550>

0400a58c <_Unwind_RaiseException_Phase2>:
 400a58c:	28c00017 	ldw	r3,0(r5)
 400a590:	defff804 	addi	sp,sp,-32
 400a594:	dcc00515 	stw	r19,20(sp)
 400a598:	dc800415 	stw	r18,16(sp)
 400a59c:	dc400315 	stw	r17,12(sp)
 400a5a0:	dc000215 	stw	r16,8(sp)
 400a5a4:	dfc00715 	stw	ra,28(sp)
 400a5a8:	dd000615 	stw	r20,24(sp)
 400a5ac:	2823883a 	mov	r17,r5
 400a5b0:	2021883a 	mov	r16,r4
 400a5b4:	048001c4 	movi	r18,7
 400a5b8:	04c00204 	movi	r19,8
 400a5bc:	18001326 	beq	r3,zero,400a60c <_Unwind_RaiseException_Phase2+0x80>
 400a5c0:	81000417 	ldw	r4,16(r16)
 400a5c4:	1a000617 	ldw	r8,24(r3)
 400a5c8:	19001926 	beq	r3,r4,400a630 <_Unwind_RaiseException_Phase2+0xa4>
 400a5cc:	40000c26 	beq	r8,zero,400a600 <_Unwind_RaiseException_Phase2+0x74>
 400a5d0:	01400084 	movi	r5,2
 400a5d4:	0029883a 	mov	r20,zero
 400a5d8:	81800017 	ldw	r6,0(r16)
 400a5dc:	81c00117 	ldw	r7,4(r16)
 400a5e0:	01000044 	movi	r4,1
 400a5e4:	dc400115 	stw	r17,4(sp)
 400a5e8:	dc000015 	stw	r16,0(sp)
 400a5ec:	403ee83a 	callr	r8
 400a5f0:	14801326 	beq	r2,r18,400a640 <_Unwind_RaiseException_Phase2+0xb4>
 400a5f4:	14c0051e 	bne	r2,r19,400a60c <_Unwind_RaiseException_Phase2+0x80>
 400a5f8:	a000131e 	bne	r20,zero,400a648 <_Unwind_RaiseException_Phase2+0xbc>
 400a5fc:	88c00017 	ldw	r3,0(r17)
 400a600:	18c00017 	ldw	r3,0(r3)
 400a604:	88c00015 	stw	r3,0(r17)
 400a608:	183fed1e 	bne	r3,zero,400a5c0 <__alt_data_end+0xfc00a5c0>
 400a60c:	00800084 	movi	r2,2
 400a610:	dfc00717 	ldw	ra,28(sp)
 400a614:	dd000617 	ldw	r20,24(sp)
 400a618:	dcc00517 	ldw	r19,20(sp)
 400a61c:	dc800417 	ldw	r18,16(sp)
 400a620:	dc400317 	ldw	r17,12(sp)
 400a624:	dc000217 	ldw	r16,8(sp)
 400a628:	dec00804 	addi	sp,sp,32
 400a62c:	f800283a 	ret
 400a630:	40000526 	beq	r8,zero,400a648 <_Unwind_RaiseException_Phase2+0xbc>
 400a634:	01400184 	movi	r5,6
 400a638:	05000104 	movi	r20,4
 400a63c:	003fe606 	br	400a5d8 <__alt_data_end+0xfc00a5d8>
 400a640:	9005883a 	mov	r2,r18
 400a644:	003ff206 	br	400a610 <__alt_data_end+0xfc00a610>
 400a648:	400a9940 	call	400a994 <abort>

0400a64c <uw_install_context.isra.1>:
 400a64c:	20c00017 	ldw	r3,0(r4)
 400a650:	deffff04 	addi	sp,sp,-4
 400a654:	014100f4 	movhi	r5,1027
 400a658:	19000917 	ldw	r4,36(r3)
 400a65c:	df000015 	stw	fp,0(sp)
 400a660:	18800804 	addi	r2,r3,32
 400a664:	d839883a 	mov	fp,sp
 400a668:	29637b04 	addi	r5,r5,-29204
 400a66c:	28c00015 	stw	r3,0(r5)
 400a670:	17000017 	ldw	fp,0(r2)
 400a674:	1ec00a17 	ldw	sp,40(r3)
 400a678:	2000683a 	jmp	r4

0400a67c <_Unwind_SjLj_Register>:
 400a67c:	008100f4 	movhi	r2,1027
 400a680:	10a37b04 	addi	r2,r2,-29204
 400a684:	10c00017 	ldw	r3,0(r2)
 400a688:	11000015 	stw	r4,0(r2)
 400a68c:	20c00015 	stw	r3,0(r4)
 400a690:	f800283a 	ret

0400a694 <_Unwind_SjLj_Unregister>:
 400a694:	20c00017 	ldw	r3,0(r4)
 400a698:	008100f4 	movhi	r2,1027
 400a69c:	10a37b04 	addi	r2,r2,-29204
 400a6a0:	10c00015 	stw	r3,0(r2)
 400a6a4:	f800283a 	ret

0400a6a8 <_Unwind_GetGR>:
 400a6a8:	20800017 	ldw	r2,0(r4)
 400a6ac:	29400084 	addi	r5,r5,2
 400a6b0:	294b883a 	add	r5,r5,r5
 400a6b4:	294b883a 	add	r5,r5,r5
 400a6b8:	114b883a 	add	r5,r2,r5
 400a6bc:	28800017 	ldw	r2,0(r5)
 400a6c0:	f800283a 	ret

0400a6c4 <_Unwind_GetCFA>:
 400a6c4:	20800017 	ldw	r2,0(r4)
 400a6c8:	10000226 	beq	r2,zero,400a6d4 <_Unwind_GetCFA+0x10>
 400a6cc:	10800a17 	ldw	r2,40(r2)
 400a6d0:	f800283a 	ret
 400a6d4:	0005883a 	mov	r2,zero
 400a6d8:	f800283a 	ret

0400a6dc <_Unwind_SetGR>:
 400a6dc:	20800017 	ldw	r2,0(r4)
 400a6e0:	29400084 	addi	r5,r5,2
 400a6e4:	294b883a 	add	r5,r5,r5
 400a6e8:	294b883a 	add	r5,r5,r5
 400a6ec:	114b883a 	add	r5,r2,r5
 400a6f0:	29800015 	stw	r6,0(r5)
 400a6f4:	f800283a 	ret

0400a6f8 <_Unwind_GetIP>:
 400a6f8:	20800017 	ldw	r2,0(r4)
 400a6fc:	10800117 	ldw	r2,4(r2)
 400a700:	10800044 	addi	r2,r2,1
 400a704:	f800283a 	ret

0400a708 <_Unwind_GetIPInfo>:
 400a708:	20800017 	ldw	r2,0(r4)
 400a70c:	28000015 	stw	zero,0(r5)
 400a710:	10000326 	beq	r2,zero,400a720 <_Unwind_GetIPInfo+0x18>
 400a714:	10800117 	ldw	r2,4(r2)
 400a718:	10800044 	addi	r2,r2,1
 400a71c:	f800283a 	ret
 400a720:	0005883a 	mov	r2,zero
 400a724:	f800283a 	ret

0400a728 <_Unwind_SetIP>:
 400a728:	20800017 	ldw	r2,0(r4)
 400a72c:	297fffc4 	addi	r5,r5,-1
 400a730:	11400115 	stw	r5,4(r2)
 400a734:	f800283a 	ret

0400a738 <_Unwind_GetLanguageSpecificData>:
 400a738:	20800017 	ldw	r2,0(r4)
 400a73c:	10800717 	ldw	r2,28(r2)
 400a740:	f800283a 	ret

0400a744 <_Unwind_GetRegionStart>:
 400a744:	0005883a 	mov	r2,zero
 400a748:	f800283a 	ret

0400a74c <_Unwind_FindEnclosingFunction>:
 400a74c:	0005883a 	mov	r2,zero
 400a750:	f800283a 	ret

0400a754 <_Unwind_GetDataRelBase>:
 400a754:	0005883a 	mov	r2,zero
 400a758:	f800283a 	ret

0400a75c <_Unwind_GetTextRelBase>:
 400a75c:	0005883a 	mov	r2,zero
 400a760:	f800283a 	ret

0400a764 <_Unwind_SjLj_RaiseException>:
 400a764:	008100f4 	movhi	r2,1027
 400a768:	defff804 	addi	sp,sp,-32
 400a76c:	10a37b04 	addi	r2,r2,-29204
 400a770:	dc800515 	stw	r18,20(sp)
 400a774:	14800017 	ldw	r18,0(r2)
 400a778:	dfc00715 	stw	ra,28(sp)
 400a77c:	dcc00615 	stw	r19,24(sp)
 400a780:	dc400415 	stw	r17,16(sp)
 400a784:	dc000315 	stw	r16,12(sp)
 400a788:	dc800215 	stw	r18,8(sp)
 400a78c:	90001426 	beq	r18,zero,400a7e0 <_Unwind_SjLj_RaiseException+0x7c>
 400a790:	2021883a 	mov	r16,r4
 400a794:	9005883a 	mov	r2,r18
 400a798:	04400184 	movi	r17,6
 400a79c:	04c00204 	movi	r19,8
 400a7a0:	10800617 	ldw	r2,24(r2)
 400a7a4:	10000a26 	beq	r2,zero,400a7d0 <_Unwind_SjLj_RaiseException+0x6c>
 400a7a8:	81800017 	ldw	r6,0(r16)
 400a7ac:	81c00117 	ldw	r7,4(r16)
 400a7b0:	01400044 	movi	r5,1
 400a7b4:	d8c00204 	addi	r3,sp,8
 400a7b8:	d8c00115 	stw	r3,4(sp)
 400a7bc:	dc000015 	stw	r16,0(sp)
 400a7c0:	2809883a 	mov	r4,r5
 400a7c4:	103ee83a 	callr	r2
 400a7c8:	14400d26 	beq	r2,r17,400a800 <_Unwind_SjLj_RaiseException+0x9c>
 400a7cc:	14c0171e 	bne	r2,r19,400a82c <_Unwind_SjLj_RaiseException+0xc8>
 400a7d0:	d8800217 	ldw	r2,8(sp)
 400a7d4:	10800017 	ldw	r2,0(r2)
 400a7d8:	d8800215 	stw	r2,8(sp)
 400a7dc:	103ff01e 	bne	r2,zero,400a7a0 <__alt_data_end+0xfc00a7a0>
 400a7e0:	00800144 	movi	r2,5
 400a7e4:	dfc00717 	ldw	ra,28(sp)
 400a7e8:	dcc00617 	ldw	r19,24(sp)
 400a7ec:	dc800517 	ldw	r18,20(sp)
 400a7f0:	dc400417 	ldw	r17,16(sp)
 400a7f4:	dc000317 	ldw	r16,12(sp)
 400a7f8:	dec00804 	addi	sp,sp,32
 400a7fc:	f800283a 	ret
 400a800:	d8800217 	ldw	r2,8(sp)
 400a804:	80000315 	stw	zero,12(r16)
 400a808:	d9400204 	addi	r5,sp,8
 400a80c:	80800415 	stw	r2,16(r16)
 400a810:	8009883a 	mov	r4,r16
 400a814:	dc800215 	stw	r18,8(sp)
 400a818:	400a58c0 	call	400a58c <_Unwind_RaiseException_Phase2>
 400a81c:	00c001c4 	movi	r3,7
 400a820:	10fff01e 	bne	r2,r3,400a7e4 <__alt_data_end+0xfc00a7e4>
 400a824:	d9000204 	addi	r4,sp,8
 400a828:	400a64c0 	call	400a64c <uw_install_context.isra.1>
 400a82c:	008000c4 	movi	r2,3
 400a830:	003fec06 	br	400a7e4 <__alt_data_end+0xfc00a7e4>

0400a834 <_Unwind_SjLj_ForcedUnwind>:
 400a834:	00c100f4 	movhi	r3,1027
 400a838:	18e37b04 	addi	r3,r3,-29204
 400a83c:	defffe04 	addi	sp,sp,-8
 400a840:	18c00017 	ldw	r3,0(r3)
 400a844:	dfc00115 	stw	ra,4(sp)
 400a848:	21400315 	stw	r5,12(r4)
 400a84c:	21800415 	stw	r6,16(r4)
 400a850:	d80b883a 	mov	r5,sp
 400a854:	d8c00015 	stw	r3,0(sp)
 400a858:	400a4740 	call	400a474 <_Unwind_ForcedUnwind_Phase2>
 400a85c:	00c001c4 	movi	r3,7
 400a860:	10c00326 	beq	r2,r3,400a870 <_Unwind_SjLj_ForcedUnwind+0x3c>
 400a864:	dfc00117 	ldw	ra,4(sp)
 400a868:	dec00204 	addi	sp,sp,8
 400a86c:	f800283a 	ret
 400a870:	d809883a 	mov	r4,sp
 400a874:	400a64c0 	call	400a64c <uw_install_context.isra.1>

0400a878 <_Unwind_SjLj_Resume>:
 400a878:	00c100f4 	movhi	r3,1027
 400a87c:	18e37b04 	addi	r3,r3,-29204
 400a880:	18c00017 	ldw	r3,0(r3)
 400a884:	20800317 	ldw	r2,12(r4)
 400a888:	defffe04 	addi	sp,sp,-8
 400a88c:	dfc00115 	stw	ra,4(sp)
 400a890:	d8c00015 	stw	r3,0(sp)
 400a894:	d80b883a 	mov	r5,sp
 400a898:	1000041e 	bne	r2,zero,400a8ac <_Unwind_SjLj_Resume+0x34>
 400a89c:	400a58c0 	call	400a58c <_Unwind_RaiseException_Phase2>
 400a8a0:	00c001c4 	movi	r3,7
 400a8a4:	10c00326 	beq	r2,r3,400a8b4 <_Unwind_SjLj_Resume+0x3c>
 400a8a8:	400a9940 	call	400a994 <abort>
 400a8ac:	400a4740 	call	400a474 <_Unwind_ForcedUnwind_Phase2>
 400a8b0:	003ffb06 	br	400a8a0 <__alt_data_end+0xfc00a8a0>
 400a8b4:	d809883a 	mov	r4,sp
 400a8b8:	400a64c0 	call	400a64c <uw_install_context.isra.1>

0400a8bc <_Unwind_SjLj_Resume_or_Rethrow>:
 400a8bc:	20800317 	ldw	r2,12(r4)
 400a8c0:	defffe04 	addi	sp,sp,-8
 400a8c4:	dfc00115 	stw	ra,4(sp)
 400a8c8:	1000041e 	bne	r2,zero,400a8dc <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 400a8cc:	400a7640 	call	400a764 <_Unwind_SjLj_RaiseException>
 400a8d0:	dfc00117 	ldw	ra,4(sp)
 400a8d4:	dec00204 	addi	sp,sp,8
 400a8d8:	f800283a 	ret
 400a8dc:	008100f4 	movhi	r2,1027
 400a8e0:	10a37b04 	addi	r2,r2,-29204
 400a8e4:	10800017 	ldw	r2,0(r2)
 400a8e8:	d80b883a 	mov	r5,sp
 400a8ec:	d8800015 	stw	r2,0(sp)
 400a8f0:	400a4740 	call	400a474 <_Unwind_ForcedUnwind_Phase2>
 400a8f4:	00c001c4 	movi	r3,7
 400a8f8:	10c00126 	beq	r2,r3,400a900 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 400a8fc:	400a9940 	call	400a994 <abort>
 400a900:	d809883a 	mov	r4,sp
 400a904:	400a64c0 	call	400a64c <uw_install_context.isra.1>

0400a908 <_Unwind_DeleteException>:
 400a908:	20800217 	ldw	r2,8(r4)
 400a90c:	10000326 	beq	r2,zero,400a91c <_Unwind_DeleteException+0x14>
 400a910:	200b883a 	mov	r5,r4
 400a914:	01000044 	movi	r4,1
 400a918:	1000683a 	jmp	r2
 400a91c:	f800283a 	ret

0400a920 <_Unwind_Backtrace>:
 400a920:	008100f4 	movhi	r2,1027
 400a924:	10a37b04 	addi	r2,r2,-29204
 400a928:	10800017 	ldw	r2,0(r2)
 400a92c:	defffc04 	addi	sp,sp,-16
 400a930:	dc400215 	stw	r17,8(sp)
 400a934:	dc000115 	stw	r16,4(sp)
 400a938:	dfc00315 	stw	ra,12(sp)
 400a93c:	2023883a 	mov	r17,r4
 400a940:	2821883a 	mov	r16,r5
 400a944:	d8800015 	stw	r2,0(sp)
 400a948:	00000506 	br	400a960 <_Unwind_Backtrace+0x40>
 400a94c:	883ee83a 	callr	r17
 400a950:	10000e1e 	bne	r2,zero,400a98c <_Unwind_Backtrace+0x6c>
 400a954:	d8800017 	ldw	r2,0(sp)
 400a958:	10800017 	ldw	r2,0(r2)
 400a95c:	d8800015 	stw	r2,0(sp)
 400a960:	800b883a 	mov	r5,r16
 400a964:	d809883a 	mov	r4,sp
 400a968:	103ff81e 	bne	r2,zero,400a94c <__alt_data_end+0xfc00a94c>
 400a96c:	883ee83a 	callr	r17
 400a970:	1000061e 	bne	r2,zero,400a98c <_Unwind_Backtrace+0x6c>
 400a974:	00800144 	movi	r2,5
 400a978:	dfc00317 	ldw	ra,12(sp)
 400a97c:	dc400217 	ldw	r17,8(sp)
 400a980:	dc000117 	ldw	r16,4(sp)
 400a984:	dec00404 	addi	sp,sp,16
 400a988:	f800283a 	ret
 400a98c:	008000c4 	movi	r2,3
 400a990:	003ff906 	br	400a978 <__alt_data_end+0xfc00a978>

0400a994 <abort>:
 400a994:	deffff04 	addi	sp,sp,-4
 400a998:	01000184 	movi	r4,6
 400a99c:	dfc00015 	stw	ra,0(sp)
 400a9a0:	400b9000 	call	400b900 <raise>
 400a9a4:	01000044 	movi	r4,1
 400a9a8:	401764c0 	call	401764c <_exit>

0400a9ac <clock>:
 400a9ac:	008100b4 	movhi	r2,1026
 400a9b0:	1086e904 	addi	r2,r2,7076
 400a9b4:	11000017 	ldw	r4,0(r2)
 400a9b8:	defffb04 	addi	sp,sp,-20
 400a9bc:	d80b883a 	mov	r5,sp
 400a9c0:	dfc00415 	stw	ra,16(sp)
 400a9c4:	400bb240 	call	400bb24 <_times_r>
 400a9c8:	00ffffc4 	movi	r3,-1
 400a9cc:	10c00726 	beq	r2,r3,400a9ec <clock+0x40>
 400a9d0:	d8c00017 	ldw	r3,0(sp)
 400a9d4:	d8800117 	ldw	r2,4(sp)
 400a9d8:	1885883a 	add	r2,r3,r2
 400a9dc:	d8c00217 	ldw	r3,8(sp)
 400a9e0:	10c7883a 	add	r3,r2,r3
 400a9e4:	d8800317 	ldw	r2,12(sp)
 400a9e8:	1885883a 	add	r2,r3,r2
 400a9ec:	dfc00417 	ldw	ra,16(sp)
 400a9f0:	dec00504 	addi	sp,sp,20
 400a9f4:	f800283a 	ret

0400a9f8 <malloc>:
 400a9f8:	008100b4 	movhi	r2,1026
 400a9fc:	1086e904 	addi	r2,r2,7076
 400aa00:	200b883a 	mov	r5,r4
 400aa04:	11000017 	ldw	r4,0(r2)
 400aa08:	400aa201 	jmpi	400aa20 <_malloc_r>

0400aa0c <free>:
 400aa0c:	008100b4 	movhi	r2,1026
 400aa10:	1086e904 	addi	r2,r2,7076
 400aa14:	200b883a 	mov	r5,r4
 400aa18:	11000017 	ldw	r4,0(r2)
 400aa1c:	400ff441 	jmpi	400ff44 <_free_r>

0400aa20 <_malloc_r>:
 400aa20:	defff504 	addi	sp,sp,-44
 400aa24:	dc800315 	stw	r18,12(sp)
 400aa28:	dfc00a15 	stw	ra,40(sp)
 400aa2c:	df000915 	stw	fp,36(sp)
 400aa30:	ddc00815 	stw	r23,32(sp)
 400aa34:	dd800715 	stw	r22,28(sp)
 400aa38:	dd400615 	stw	r21,24(sp)
 400aa3c:	dd000515 	stw	r20,20(sp)
 400aa40:	dcc00415 	stw	r19,16(sp)
 400aa44:	dc400215 	stw	r17,8(sp)
 400aa48:	dc000115 	stw	r16,4(sp)
 400aa4c:	288002c4 	addi	r2,r5,11
 400aa50:	00c00584 	movi	r3,22
 400aa54:	2025883a 	mov	r18,r4
 400aa58:	18807f2e 	bgeu	r3,r2,400ac58 <_malloc_r+0x238>
 400aa5c:	047ffe04 	movi	r17,-8
 400aa60:	1462703a 	and	r17,r2,r17
 400aa64:	8800a316 	blt	r17,zero,400acf4 <_malloc_r+0x2d4>
 400aa68:	8940a236 	bltu	r17,r5,400acf4 <_malloc_r+0x2d4>
 400aa6c:	4017c500 	call	4017c50 <__malloc_lock>
 400aa70:	00807dc4 	movi	r2,503
 400aa74:	1441e92e 	bgeu	r2,r17,400b21c <_malloc_r+0x7fc>
 400aa78:	8804d27a 	srli	r2,r17,9
 400aa7c:	1000a126 	beq	r2,zero,400ad04 <_malloc_r+0x2e4>
 400aa80:	00c00104 	movi	r3,4
 400aa84:	18811e36 	bltu	r3,r2,400af00 <_malloc_r+0x4e0>
 400aa88:	8804d1ba 	srli	r2,r17,6
 400aa8c:	12000e44 	addi	r8,r2,57
 400aa90:	11c00e04 	addi	r7,r2,56
 400aa94:	4209883a 	add	r4,r8,r8
 400aa98:	04c100b4 	movhi	r19,1026
 400aa9c:	2109883a 	add	r4,r4,r4
 400aaa0:	9cc12d04 	addi	r19,r19,1204
 400aaa4:	2109883a 	add	r4,r4,r4
 400aaa8:	9909883a 	add	r4,r19,r4
 400aaac:	24000117 	ldw	r16,4(r4)
 400aab0:	213ffe04 	addi	r4,r4,-8
 400aab4:	24009726 	beq	r4,r16,400ad14 <_malloc_r+0x2f4>
 400aab8:	80800117 	ldw	r2,4(r16)
 400aabc:	01bfff04 	movi	r6,-4
 400aac0:	014003c4 	movi	r5,15
 400aac4:	1184703a 	and	r2,r2,r6
 400aac8:	1447c83a 	sub	r3,r2,r17
 400aacc:	28c00716 	blt	r5,r3,400aaec <_malloc_r+0xcc>
 400aad0:	1800920e 	bge	r3,zero,400ad1c <_malloc_r+0x2fc>
 400aad4:	84000317 	ldw	r16,12(r16)
 400aad8:	24008e26 	beq	r4,r16,400ad14 <_malloc_r+0x2f4>
 400aadc:	80800117 	ldw	r2,4(r16)
 400aae0:	1184703a 	and	r2,r2,r6
 400aae4:	1447c83a 	sub	r3,r2,r17
 400aae8:	28fff90e 	bge	r5,r3,400aad0 <__alt_data_end+0xfc00aad0>
 400aaec:	3809883a 	mov	r4,r7
 400aaf0:	018100b4 	movhi	r6,1026
 400aaf4:	9c000417 	ldw	r16,16(r19)
 400aaf8:	31812d04 	addi	r6,r6,1204
 400aafc:	32000204 	addi	r8,r6,8
 400ab00:	82013426 	beq	r16,r8,400afd4 <_malloc_r+0x5b4>
 400ab04:	80c00117 	ldw	r3,4(r16)
 400ab08:	00bfff04 	movi	r2,-4
 400ab0c:	188e703a 	and	r7,r3,r2
 400ab10:	3c45c83a 	sub	r2,r7,r17
 400ab14:	00c003c4 	movi	r3,15
 400ab18:	18811f16 	blt	r3,r2,400af98 <_malloc_r+0x578>
 400ab1c:	32000515 	stw	r8,20(r6)
 400ab20:	32000415 	stw	r8,16(r6)
 400ab24:	10007f0e 	bge	r2,zero,400ad24 <_malloc_r+0x304>
 400ab28:	00807fc4 	movi	r2,511
 400ab2c:	11c0fd36 	bltu	r2,r7,400af24 <_malloc_r+0x504>
 400ab30:	3806d0fa 	srli	r3,r7,3
 400ab34:	01c00044 	movi	r7,1
 400ab38:	30800117 	ldw	r2,4(r6)
 400ab3c:	19400044 	addi	r5,r3,1
 400ab40:	294b883a 	add	r5,r5,r5
 400ab44:	1807d0ba 	srai	r3,r3,2
 400ab48:	294b883a 	add	r5,r5,r5
 400ab4c:	294b883a 	add	r5,r5,r5
 400ab50:	298b883a 	add	r5,r5,r6
 400ab54:	38c6983a 	sll	r3,r7,r3
 400ab58:	29c00017 	ldw	r7,0(r5)
 400ab5c:	2a7ffe04 	addi	r9,r5,-8
 400ab60:	1886b03a 	or	r3,r3,r2
 400ab64:	82400315 	stw	r9,12(r16)
 400ab68:	81c00215 	stw	r7,8(r16)
 400ab6c:	30c00115 	stw	r3,4(r6)
 400ab70:	2c000015 	stw	r16,0(r5)
 400ab74:	3c000315 	stw	r16,12(r7)
 400ab78:	2005d0ba 	srai	r2,r4,2
 400ab7c:	01400044 	movi	r5,1
 400ab80:	288a983a 	sll	r5,r5,r2
 400ab84:	19406f36 	bltu	r3,r5,400ad44 <_malloc_r+0x324>
 400ab88:	28c4703a 	and	r2,r5,r3
 400ab8c:	10000a1e 	bne	r2,zero,400abb8 <_malloc_r+0x198>
 400ab90:	00bfff04 	movi	r2,-4
 400ab94:	294b883a 	add	r5,r5,r5
 400ab98:	2088703a 	and	r4,r4,r2
 400ab9c:	28c4703a 	and	r2,r5,r3
 400aba0:	21000104 	addi	r4,r4,4
 400aba4:	1000041e 	bne	r2,zero,400abb8 <_malloc_r+0x198>
 400aba8:	294b883a 	add	r5,r5,r5
 400abac:	28c4703a 	and	r2,r5,r3
 400abb0:	21000104 	addi	r4,r4,4
 400abb4:	103ffc26 	beq	r2,zero,400aba8 <__alt_data_end+0xfc00aba8>
 400abb8:	02bfff04 	movi	r10,-4
 400abbc:	024003c4 	movi	r9,15
 400abc0:	21800044 	addi	r6,r4,1
 400abc4:	318d883a 	add	r6,r6,r6
 400abc8:	318d883a 	add	r6,r6,r6
 400abcc:	318d883a 	add	r6,r6,r6
 400abd0:	998d883a 	add	r6,r19,r6
 400abd4:	333ffe04 	addi	r12,r6,-8
 400abd8:	2017883a 	mov	r11,r4
 400abdc:	31800104 	addi	r6,r6,4
 400abe0:	34000017 	ldw	r16,0(r6)
 400abe4:	31fffd04 	addi	r7,r6,-12
 400abe8:	81c0041e 	bne	r16,r7,400abfc <_malloc_r+0x1dc>
 400abec:	0000fb06 	br	400afdc <_malloc_r+0x5bc>
 400abf0:	1801030e 	bge	r3,zero,400b000 <_malloc_r+0x5e0>
 400abf4:	84000317 	ldw	r16,12(r16)
 400abf8:	81c0f826 	beq	r16,r7,400afdc <_malloc_r+0x5bc>
 400abfc:	80800117 	ldw	r2,4(r16)
 400ac00:	1284703a 	and	r2,r2,r10
 400ac04:	1447c83a 	sub	r3,r2,r17
 400ac08:	48fff90e 	bge	r9,r3,400abf0 <__alt_data_end+0xfc00abf0>
 400ac0c:	80800317 	ldw	r2,12(r16)
 400ac10:	81000217 	ldw	r4,8(r16)
 400ac14:	89400054 	ori	r5,r17,1
 400ac18:	81400115 	stw	r5,4(r16)
 400ac1c:	20800315 	stw	r2,12(r4)
 400ac20:	11000215 	stw	r4,8(r2)
 400ac24:	8463883a 	add	r17,r16,r17
 400ac28:	9c400515 	stw	r17,20(r19)
 400ac2c:	9c400415 	stw	r17,16(r19)
 400ac30:	18800054 	ori	r2,r3,1
 400ac34:	88800115 	stw	r2,4(r17)
 400ac38:	8a000315 	stw	r8,12(r17)
 400ac3c:	8a000215 	stw	r8,8(r17)
 400ac40:	88e3883a 	add	r17,r17,r3
 400ac44:	88c00015 	stw	r3,0(r17)
 400ac48:	9009883a 	mov	r4,r18
 400ac4c:	4017c740 	call	4017c74 <__malloc_unlock>
 400ac50:	80800204 	addi	r2,r16,8
 400ac54:	00001b06 	br	400acc4 <_malloc_r+0x2a4>
 400ac58:	04400404 	movi	r17,16
 400ac5c:	89402536 	bltu	r17,r5,400acf4 <_malloc_r+0x2d4>
 400ac60:	4017c500 	call	4017c50 <__malloc_lock>
 400ac64:	00800184 	movi	r2,6
 400ac68:	01000084 	movi	r4,2
 400ac6c:	04c100b4 	movhi	r19,1026
 400ac70:	1085883a 	add	r2,r2,r2
 400ac74:	9cc12d04 	addi	r19,r19,1204
 400ac78:	1085883a 	add	r2,r2,r2
 400ac7c:	9885883a 	add	r2,r19,r2
 400ac80:	14000117 	ldw	r16,4(r2)
 400ac84:	10fffe04 	addi	r3,r2,-8
 400ac88:	80c0d926 	beq	r16,r3,400aff0 <_malloc_r+0x5d0>
 400ac8c:	80c00117 	ldw	r3,4(r16)
 400ac90:	81000317 	ldw	r4,12(r16)
 400ac94:	00bfff04 	movi	r2,-4
 400ac98:	1884703a 	and	r2,r3,r2
 400ac9c:	81400217 	ldw	r5,8(r16)
 400aca0:	8085883a 	add	r2,r16,r2
 400aca4:	10c00117 	ldw	r3,4(r2)
 400aca8:	29000315 	stw	r4,12(r5)
 400acac:	21400215 	stw	r5,8(r4)
 400acb0:	18c00054 	ori	r3,r3,1
 400acb4:	10c00115 	stw	r3,4(r2)
 400acb8:	9009883a 	mov	r4,r18
 400acbc:	4017c740 	call	4017c74 <__malloc_unlock>
 400acc0:	80800204 	addi	r2,r16,8
 400acc4:	dfc00a17 	ldw	ra,40(sp)
 400acc8:	df000917 	ldw	fp,36(sp)
 400accc:	ddc00817 	ldw	r23,32(sp)
 400acd0:	dd800717 	ldw	r22,28(sp)
 400acd4:	dd400617 	ldw	r21,24(sp)
 400acd8:	dd000517 	ldw	r20,20(sp)
 400acdc:	dcc00417 	ldw	r19,16(sp)
 400ace0:	dc800317 	ldw	r18,12(sp)
 400ace4:	dc400217 	ldw	r17,8(sp)
 400ace8:	dc000117 	ldw	r16,4(sp)
 400acec:	dec00b04 	addi	sp,sp,44
 400acf0:	f800283a 	ret
 400acf4:	00800304 	movi	r2,12
 400acf8:	90800015 	stw	r2,0(r18)
 400acfc:	0005883a 	mov	r2,zero
 400ad00:	003ff006 	br	400acc4 <__alt_data_end+0xfc00acc4>
 400ad04:	01002004 	movi	r4,128
 400ad08:	02001004 	movi	r8,64
 400ad0c:	01c00fc4 	movi	r7,63
 400ad10:	003f6106 	br	400aa98 <__alt_data_end+0xfc00aa98>
 400ad14:	4009883a 	mov	r4,r8
 400ad18:	003f7506 	br	400aaf0 <__alt_data_end+0xfc00aaf0>
 400ad1c:	81000317 	ldw	r4,12(r16)
 400ad20:	003fde06 	br	400ac9c <__alt_data_end+0xfc00ac9c>
 400ad24:	81c5883a 	add	r2,r16,r7
 400ad28:	11400117 	ldw	r5,4(r2)
 400ad2c:	9009883a 	mov	r4,r18
 400ad30:	29400054 	ori	r5,r5,1
 400ad34:	11400115 	stw	r5,4(r2)
 400ad38:	4017c740 	call	4017c74 <__malloc_unlock>
 400ad3c:	80800204 	addi	r2,r16,8
 400ad40:	003fe006 	br	400acc4 <__alt_data_end+0xfc00acc4>
 400ad44:	9c000217 	ldw	r16,8(r19)
 400ad48:	00bfff04 	movi	r2,-4
 400ad4c:	85800117 	ldw	r22,4(r16)
 400ad50:	b0ac703a 	and	r22,r22,r2
 400ad54:	b4400336 	bltu	r22,r17,400ad64 <_malloc_r+0x344>
 400ad58:	b445c83a 	sub	r2,r22,r17
 400ad5c:	00c003c4 	movi	r3,15
 400ad60:	18805d16 	blt	r3,r2,400aed8 <_malloc_r+0x4b8>
 400ad64:	05c100b4 	movhi	r23,1026
 400ad68:	008100f4 	movhi	r2,1027
 400ad6c:	10a37e04 	addi	r2,r2,-29192
 400ad70:	bdc6ea04 	addi	r23,r23,7080
 400ad74:	15400017 	ldw	r21,0(r2)
 400ad78:	b8c00017 	ldw	r3,0(r23)
 400ad7c:	00bfffc4 	movi	r2,-1
 400ad80:	858d883a 	add	r6,r16,r22
 400ad84:	8d6b883a 	add	r21,r17,r21
 400ad88:	1880ea26 	beq	r3,r2,400b134 <_malloc_r+0x714>
 400ad8c:	ad4403c4 	addi	r21,r21,4111
 400ad90:	00bc0004 	movi	r2,-4096
 400ad94:	a8aa703a 	and	r21,r21,r2
 400ad98:	a80b883a 	mov	r5,r21
 400ad9c:	9009883a 	mov	r4,r18
 400ada0:	d9800015 	stw	r6,0(sp)
 400ada4:	400b6580 	call	400b658 <_sbrk_r>
 400ada8:	1029883a 	mov	r20,r2
 400adac:	00bfffc4 	movi	r2,-1
 400adb0:	d9800017 	ldw	r6,0(sp)
 400adb4:	a080e826 	beq	r20,r2,400b158 <_malloc_r+0x738>
 400adb8:	a180a636 	bltu	r20,r6,400b054 <_malloc_r+0x634>
 400adbc:	070100f4 	movhi	fp,1027
 400adc0:	e723b904 	addi	fp,fp,-28956
 400adc4:	e0800017 	ldw	r2,0(fp)
 400adc8:	a887883a 	add	r3,r21,r2
 400adcc:	e0c00015 	stw	r3,0(fp)
 400add0:	3500e626 	beq	r6,r20,400b16c <_malloc_r+0x74c>
 400add4:	b9000017 	ldw	r4,0(r23)
 400add8:	00bfffc4 	movi	r2,-1
 400addc:	2080ee26 	beq	r4,r2,400b198 <_malloc_r+0x778>
 400ade0:	a185c83a 	sub	r2,r20,r6
 400ade4:	10c5883a 	add	r2,r2,r3
 400ade8:	e0800015 	stw	r2,0(fp)
 400adec:	a0c001cc 	andi	r3,r20,7
 400adf0:	1800bc26 	beq	r3,zero,400b0e4 <_malloc_r+0x6c4>
 400adf4:	a0e9c83a 	sub	r20,r20,r3
 400adf8:	00840204 	movi	r2,4104
 400adfc:	a5000204 	addi	r20,r20,8
 400ae00:	10c7c83a 	sub	r3,r2,r3
 400ae04:	a545883a 	add	r2,r20,r21
 400ae08:	1083ffcc 	andi	r2,r2,4095
 400ae0c:	18abc83a 	sub	r21,r3,r2
 400ae10:	a80b883a 	mov	r5,r21
 400ae14:	9009883a 	mov	r4,r18
 400ae18:	400b6580 	call	400b658 <_sbrk_r>
 400ae1c:	00ffffc4 	movi	r3,-1
 400ae20:	10c0e126 	beq	r2,r3,400b1a8 <_malloc_r+0x788>
 400ae24:	1505c83a 	sub	r2,r2,r20
 400ae28:	1545883a 	add	r2,r2,r21
 400ae2c:	10800054 	ori	r2,r2,1
 400ae30:	e0c00017 	ldw	r3,0(fp)
 400ae34:	9d000215 	stw	r20,8(r19)
 400ae38:	a0800115 	stw	r2,4(r20)
 400ae3c:	a8c7883a 	add	r3,r21,r3
 400ae40:	e0c00015 	stw	r3,0(fp)
 400ae44:	84c00e26 	beq	r16,r19,400ae80 <_malloc_r+0x460>
 400ae48:	018003c4 	movi	r6,15
 400ae4c:	3580a72e 	bgeu	r6,r22,400b0ec <_malloc_r+0x6cc>
 400ae50:	81400117 	ldw	r5,4(r16)
 400ae54:	013ffe04 	movi	r4,-8
 400ae58:	b0bffd04 	addi	r2,r22,-12
 400ae5c:	1104703a 	and	r2,r2,r4
 400ae60:	2900004c 	andi	r4,r5,1
 400ae64:	2088b03a 	or	r4,r4,r2
 400ae68:	81000115 	stw	r4,4(r16)
 400ae6c:	01400144 	movi	r5,5
 400ae70:	8089883a 	add	r4,r16,r2
 400ae74:	21400115 	stw	r5,4(r4)
 400ae78:	21400215 	stw	r5,8(r4)
 400ae7c:	3080cd36 	bltu	r6,r2,400b1b4 <_malloc_r+0x794>
 400ae80:	008100f4 	movhi	r2,1027
 400ae84:	10a37d04 	addi	r2,r2,-29196
 400ae88:	11000017 	ldw	r4,0(r2)
 400ae8c:	20c0012e 	bgeu	r4,r3,400ae94 <_malloc_r+0x474>
 400ae90:	10c00015 	stw	r3,0(r2)
 400ae94:	008100f4 	movhi	r2,1027
 400ae98:	10a37c04 	addi	r2,r2,-29200
 400ae9c:	11000017 	ldw	r4,0(r2)
 400aea0:	9c000217 	ldw	r16,8(r19)
 400aea4:	20c0012e 	bgeu	r4,r3,400aeac <_malloc_r+0x48c>
 400aea8:	10c00015 	stw	r3,0(r2)
 400aeac:	80c00117 	ldw	r3,4(r16)
 400aeb0:	00bfff04 	movi	r2,-4
 400aeb4:	1886703a 	and	r3,r3,r2
 400aeb8:	1c45c83a 	sub	r2,r3,r17
 400aebc:	1c400236 	bltu	r3,r17,400aec8 <_malloc_r+0x4a8>
 400aec0:	00c003c4 	movi	r3,15
 400aec4:	18800416 	blt	r3,r2,400aed8 <_malloc_r+0x4b8>
 400aec8:	9009883a 	mov	r4,r18
 400aecc:	4017c740 	call	4017c74 <__malloc_unlock>
 400aed0:	0005883a 	mov	r2,zero
 400aed4:	003f7b06 	br	400acc4 <__alt_data_end+0xfc00acc4>
 400aed8:	88c00054 	ori	r3,r17,1
 400aedc:	80c00115 	stw	r3,4(r16)
 400aee0:	8463883a 	add	r17,r16,r17
 400aee4:	10800054 	ori	r2,r2,1
 400aee8:	9c400215 	stw	r17,8(r19)
 400aeec:	88800115 	stw	r2,4(r17)
 400aef0:	9009883a 	mov	r4,r18
 400aef4:	4017c740 	call	4017c74 <__malloc_unlock>
 400aef8:	80800204 	addi	r2,r16,8
 400aefc:	003f7106 	br	400acc4 <__alt_data_end+0xfc00acc4>
 400af00:	00c00504 	movi	r3,20
 400af04:	18804a2e 	bgeu	r3,r2,400b030 <_malloc_r+0x610>
 400af08:	00c01504 	movi	r3,84
 400af0c:	18806e36 	bltu	r3,r2,400b0c8 <_malloc_r+0x6a8>
 400af10:	8804d33a 	srli	r2,r17,12
 400af14:	12001bc4 	addi	r8,r2,111
 400af18:	11c01b84 	addi	r7,r2,110
 400af1c:	4209883a 	add	r4,r8,r8
 400af20:	003edd06 	br	400aa98 <__alt_data_end+0xfc00aa98>
 400af24:	3804d27a 	srli	r2,r7,9
 400af28:	00c00104 	movi	r3,4
 400af2c:	1880442e 	bgeu	r3,r2,400b040 <_malloc_r+0x620>
 400af30:	00c00504 	movi	r3,20
 400af34:	18808136 	bltu	r3,r2,400b13c <_malloc_r+0x71c>
 400af38:	11401704 	addi	r5,r2,92
 400af3c:	10c016c4 	addi	r3,r2,91
 400af40:	294b883a 	add	r5,r5,r5
 400af44:	294b883a 	add	r5,r5,r5
 400af48:	294b883a 	add	r5,r5,r5
 400af4c:	994b883a 	add	r5,r19,r5
 400af50:	28800017 	ldw	r2,0(r5)
 400af54:	018100b4 	movhi	r6,1026
 400af58:	297ffe04 	addi	r5,r5,-8
 400af5c:	31812d04 	addi	r6,r6,1204
 400af60:	28806526 	beq	r5,r2,400b0f8 <_malloc_r+0x6d8>
 400af64:	01bfff04 	movi	r6,-4
 400af68:	10c00117 	ldw	r3,4(r2)
 400af6c:	1986703a 	and	r3,r3,r6
 400af70:	38c0022e 	bgeu	r7,r3,400af7c <_malloc_r+0x55c>
 400af74:	10800217 	ldw	r2,8(r2)
 400af78:	28bffb1e 	bne	r5,r2,400af68 <__alt_data_end+0xfc00af68>
 400af7c:	11400317 	ldw	r5,12(r2)
 400af80:	98c00117 	ldw	r3,4(r19)
 400af84:	81400315 	stw	r5,12(r16)
 400af88:	80800215 	stw	r2,8(r16)
 400af8c:	2c000215 	stw	r16,8(r5)
 400af90:	14000315 	stw	r16,12(r2)
 400af94:	003ef806 	br	400ab78 <__alt_data_end+0xfc00ab78>
 400af98:	88c00054 	ori	r3,r17,1
 400af9c:	80c00115 	stw	r3,4(r16)
 400afa0:	8463883a 	add	r17,r16,r17
 400afa4:	34400515 	stw	r17,20(r6)
 400afa8:	34400415 	stw	r17,16(r6)
 400afac:	10c00054 	ori	r3,r2,1
 400afb0:	8a000315 	stw	r8,12(r17)
 400afb4:	8a000215 	stw	r8,8(r17)
 400afb8:	88c00115 	stw	r3,4(r17)
 400afbc:	88a3883a 	add	r17,r17,r2
 400afc0:	88800015 	stw	r2,0(r17)
 400afc4:	9009883a 	mov	r4,r18
 400afc8:	4017c740 	call	4017c74 <__malloc_unlock>
 400afcc:	80800204 	addi	r2,r16,8
 400afd0:	003f3c06 	br	400acc4 <__alt_data_end+0xfc00acc4>
 400afd4:	30c00117 	ldw	r3,4(r6)
 400afd8:	003ee706 	br	400ab78 <__alt_data_end+0xfc00ab78>
 400afdc:	5ac00044 	addi	r11,r11,1
 400afe0:	588000cc 	andi	r2,r11,3
 400afe4:	31800204 	addi	r6,r6,8
 400afe8:	103efd1e 	bne	r2,zero,400abe0 <__alt_data_end+0xfc00abe0>
 400afec:	00002406 	br	400b080 <_malloc_r+0x660>
 400aff0:	14000317 	ldw	r16,12(r2)
 400aff4:	143f251e 	bne	r2,r16,400ac8c <__alt_data_end+0xfc00ac8c>
 400aff8:	21000084 	addi	r4,r4,2
 400affc:	003ebc06 	br	400aaf0 <__alt_data_end+0xfc00aaf0>
 400b000:	8085883a 	add	r2,r16,r2
 400b004:	10c00117 	ldw	r3,4(r2)
 400b008:	81000317 	ldw	r4,12(r16)
 400b00c:	81400217 	ldw	r5,8(r16)
 400b010:	18c00054 	ori	r3,r3,1
 400b014:	10c00115 	stw	r3,4(r2)
 400b018:	29000315 	stw	r4,12(r5)
 400b01c:	21400215 	stw	r5,8(r4)
 400b020:	9009883a 	mov	r4,r18
 400b024:	4017c740 	call	4017c74 <__malloc_unlock>
 400b028:	80800204 	addi	r2,r16,8
 400b02c:	003f2506 	br	400acc4 <__alt_data_end+0xfc00acc4>
 400b030:	12001704 	addi	r8,r2,92
 400b034:	11c016c4 	addi	r7,r2,91
 400b038:	4209883a 	add	r4,r8,r8
 400b03c:	003e9606 	br	400aa98 <__alt_data_end+0xfc00aa98>
 400b040:	3804d1ba 	srli	r2,r7,6
 400b044:	11400e44 	addi	r5,r2,57
 400b048:	10c00e04 	addi	r3,r2,56
 400b04c:	294b883a 	add	r5,r5,r5
 400b050:	003fbc06 	br	400af44 <__alt_data_end+0xfc00af44>
 400b054:	84ff5926 	beq	r16,r19,400adbc <__alt_data_end+0xfc00adbc>
 400b058:	008100b4 	movhi	r2,1026
 400b05c:	10812d04 	addi	r2,r2,1204
 400b060:	14000217 	ldw	r16,8(r2)
 400b064:	00bfff04 	movi	r2,-4
 400b068:	80c00117 	ldw	r3,4(r16)
 400b06c:	1886703a 	and	r3,r3,r2
 400b070:	003f9106 	br	400aeb8 <__alt_data_end+0xfc00aeb8>
 400b074:	60800217 	ldw	r2,8(r12)
 400b078:	213fffc4 	addi	r4,r4,-1
 400b07c:	1300651e 	bne	r2,r12,400b214 <_malloc_r+0x7f4>
 400b080:	208000cc 	andi	r2,r4,3
 400b084:	633ffe04 	addi	r12,r12,-8
 400b088:	103ffa1e 	bne	r2,zero,400b074 <__alt_data_end+0xfc00b074>
 400b08c:	98800117 	ldw	r2,4(r19)
 400b090:	0146303a 	nor	r3,zero,r5
 400b094:	1884703a 	and	r2,r3,r2
 400b098:	98800115 	stw	r2,4(r19)
 400b09c:	294b883a 	add	r5,r5,r5
 400b0a0:	117f2836 	bltu	r2,r5,400ad44 <__alt_data_end+0xfc00ad44>
 400b0a4:	283f2726 	beq	r5,zero,400ad44 <__alt_data_end+0xfc00ad44>
 400b0a8:	2886703a 	and	r3,r5,r2
 400b0ac:	5809883a 	mov	r4,r11
 400b0b0:	183ec31e 	bne	r3,zero,400abc0 <__alt_data_end+0xfc00abc0>
 400b0b4:	294b883a 	add	r5,r5,r5
 400b0b8:	2886703a 	and	r3,r5,r2
 400b0bc:	21000104 	addi	r4,r4,4
 400b0c0:	183ffc26 	beq	r3,zero,400b0b4 <__alt_data_end+0xfc00b0b4>
 400b0c4:	003ebe06 	br	400abc0 <__alt_data_end+0xfc00abc0>
 400b0c8:	00c05504 	movi	r3,340
 400b0cc:	18801236 	bltu	r3,r2,400b118 <_malloc_r+0x6f8>
 400b0d0:	8804d3fa 	srli	r2,r17,15
 400b0d4:	12001e04 	addi	r8,r2,120
 400b0d8:	11c01dc4 	addi	r7,r2,119
 400b0dc:	4209883a 	add	r4,r8,r8
 400b0e0:	003e6d06 	br	400aa98 <__alt_data_end+0xfc00aa98>
 400b0e4:	00c40004 	movi	r3,4096
 400b0e8:	003f4606 	br	400ae04 <__alt_data_end+0xfc00ae04>
 400b0ec:	00800044 	movi	r2,1
 400b0f0:	a0800115 	stw	r2,4(r20)
 400b0f4:	003f7406 	br	400aec8 <__alt_data_end+0xfc00aec8>
 400b0f8:	1805d0ba 	srai	r2,r3,2
 400b0fc:	01c00044 	movi	r7,1
 400b100:	30c00117 	ldw	r3,4(r6)
 400b104:	388e983a 	sll	r7,r7,r2
 400b108:	2805883a 	mov	r2,r5
 400b10c:	38c6b03a 	or	r3,r7,r3
 400b110:	30c00115 	stw	r3,4(r6)
 400b114:	003f9b06 	br	400af84 <__alt_data_end+0xfc00af84>
 400b118:	00c15504 	movi	r3,1364
 400b11c:	18801a36 	bltu	r3,r2,400b188 <_malloc_r+0x768>
 400b120:	8804d4ba 	srli	r2,r17,18
 400b124:	12001f44 	addi	r8,r2,125
 400b128:	11c01f04 	addi	r7,r2,124
 400b12c:	4209883a 	add	r4,r8,r8
 400b130:	003e5906 	br	400aa98 <__alt_data_end+0xfc00aa98>
 400b134:	ad400404 	addi	r21,r21,16
 400b138:	003f1706 	br	400ad98 <__alt_data_end+0xfc00ad98>
 400b13c:	00c01504 	movi	r3,84
 400b140:	18802336 	bltu	r3,r2,400b1d0 <_malloc_r+0x7b0>
 400b144:	3804d33a 	srli	r2,r7,12
 400b148:	11401bc4 	addi	r5,r2,111
 400b14c:	10c01b84 	addi	r3,r2,110
 400b150:	294b883a 	add	r5,r5,r5
 400b154:	003f7b06 	br	400af44 <__alt_data_end+0xfc00af44>
 400b158:	9c000217 	ldw	r16,8(r19)
 400b15c:	00bfff04 	movi	r2,-4
 400b160:	80c00117 	ldw	r3,4(r16)
 400b164:	1886703a 	and	r3,r3,r2
 400b168:	003f5306 	br	400aeb8 <__alt_data_end+0xfc00aeb8>
 400b16c:	3083ffcc 	andi	r2,r6,4095
 400b170:	103f181e 	bne	r2,zero,400add4 <__alt_data_end+0xfc00add4>
 400b174:	99000217 	ldw	r4,8(r19)
 400b178:	b545883a 	add	r2,r22,r21
 400b17c:	10800054 	ori	r2,r2,1
 400b180:	20800115 	stw	r2,4(r4)
 400b184:	003f3e06 	br	400ae80 <__alt_data_end+0xfc00ae80>
 400b188:	01003f84 	movi	r4,254
 400b18c:	02001fc4 	movi	r8,127
 400b190:	01c01f84 	movi	r7,126
 400b194:	003e4006 	br	400aa98 <__alt_data_end+0xfc00aa98>
 400b198:	008100b4 	movhi	r2,1026
 400b19c:	1086ea04 	addi	r2,r2,7080
 400b1a0:	15000015 	stw	r20,0(r2)
 400b1a4:	003f1106 	br	400adec <__alt_data_end+0xfc00adec>
 400b1a8:	00800044 	movi	r2,1
 400b1ac:	002b883a 	mov	r21,zero
 400b1b0:	003f1f06 	br	400ae30 <__alt_data_end+0xfc00ae30>
 400b1b4:	81400204 	addi	r5,r16,8
 400b1b8:	9009883a 	mov	r4,r18
 400b1bc:	400ff440 	call	400ff44 <_free_r>
 400b1c0:	008100f4 	movhi	r2,1027
 400b1c4:	10a3b904 	addi	r2,r2,-28956
 400b1c8:	10c00017 	ldw	r3,0(r2)
 400b1cc:	003f2c06 	br	400ae80 <__alt_data_end+0xfc00ae80>
 400b1d0:	00c05504 	movi	r3,340
 400b1d4:	18800536 	bltu	r3,r2,400b1ec <_malloc_r+0x7cc>
 400b1d8:	3804d3fa 	srli	r2,r7,15
 400b1dc:	11401e04 	addi	r5,r2,120
 400b1e0:	10c01dc4 	addi	r3,r2,119
 400b1e4:	294b883a 	add	r5,r5,r5
 400b1e8:	003f5606 	br	400af44 <__alt_data_end+0xfc00af44>
 400b1ec:	00c15504 	movi	r3,1364
 400b1f0:	18800536 	bltu	r3,r2,400b208 <_malloc_r+0x7e8>
 400b1f4:	3804d4ba 	srli	r2,r7,18
 400b1f8:	11401f44 	addi	r5,r2,125
 400b1fc:	10c01f04 	addi	r3,r2,124
 400b200:	294b883a 	add	r5,r5,r5
 400b204:	003f4f06 	br	400af44 <__alt_data_end+0xfc00af44>
 400b208:	01403f84 	movi	r5,254
 400b20c:	00c01f84 	movi	r3,126
 400b210:	003f4c06 	br	400af44 <__alt_data_end+0xfc00af44>
 400b214:	98800117 	ldw	r2,4(r19)
 400b218:	003fa006 	br	400b09c <__alt_data_end+0xfc00b09c>
 400b21c:	8808d0fa 	srli	r4,r17,3
 400b220:	20800044 	addi	r2,r4,1
 400b224:	1085883a 	add	r2,r2,r2
 400b228:	003e9006 	br	400ac6c <__alt_data_end+0xfc00ac6c>

0400b22c <memcmp>:
 400b22c:	01c000c4 	movi	r7,3
 400b230:	3980192e 	bgeu	r7,r6,400b298 <memcmp+0x6c>
 400b234:	2144b03a 	or	r2,r4,r5
 400b238:	11c4703a 	and	r2,r2,r7
 400b23c:	10000f26 	beq	r2,zero,400b27c <memcmp+0x50>
 400b240:	20800003 	ldbu	r2,0(r4)
 400b244:	28c00003 	ldbu	r3,0(r5)
 400b248:	10c0151e 	bne	r2,r3,400b2a0 <memcmp+0x74>
 400b24c:	31bfff84 	addi	r6,r6,-2
 400b250:	01ffffc4 	movi	r7,-1
 400b254:	00000406 	br	400b268 <memcmp+0x3c>
 400b258:	20800003 	ldbu	r2,0(r4)
 400b25c:	28c00003 	ldbu	r3,0(r5)
 400b260:	31bfffc4 	addi	r6,r6,-1
 400b264:	10c00e1e 	bne	r2,r3,400b2a0 <memcmp+0x74>
 400b268:	21000044 	addi	r4,r4,1
 400b26c:	29400044 	addi	r5,r5,1
 400b270:	31fff91e 	bne	r6,r7,400b258 <__alt_data_end+0xfc00b258>
 400b274:	0005883a 	mov	r2,zero
 400b278:	f800283a 	ret
 400b27c:	20c00017 	ldw	r3,0(r4)
 400b280:	28800017 	ldw	r2,0(r5)
 400b284:	18bfee1e 	bne	r3,r2,400b240 <__alt_data_end+0xfc00b240>
 400b288:	31bfff04 	addi	r6,r6,-4
 400b28c:	21000104 	addi	r4,r4,4
 400b290:	29400104 	addi	r5,r5,4
 400b294:	39bff936 	bltu	r7,r6,400b27c <__alt_data_end+0xfc00b27c>
 400b298:	303fe91e 	bne	r6,zero,400b240 <__alt_data_end+0xfc00b240>
 400b29c:	003ff506 	br	400b274 <__alt_data_end+0xfc00b274>
 400b2a0:	10c5c83a 	sub	r2,r2,r3
 400b2a4:	f800283a 	ret

0400b2a8 <memcpy>:
 400b2a8:	defffd04 	addi	sp,sp,-12
 400b2ac:	dfc00215 	stw	ra,8(sp)
 400b2b0:	dc400115 	stw	r17,4(sp)
 400b2b4:	dc000015 	stw	r16,0(sp)
 400b2b8:	00c003c4 	movi	r3,15
 400b2bc:	2005883a 	mov	r2,r4
 400b2c0:	1980452e 	bgeu	r3,r6,400b3d8 <memcpy+0x130>
 400b2c4:	2906b03a 	or	r3,r5,r4
 400b2c8:	18c000cc 	andi	r3,r3,3
 400b2cc:	1800441e 	bne	r3,zero,400b3e0 <memcpy+0x138>
 400b2d0:	347ffc04 	addi	r17,r6,-16
 400b2d4:	8822d13a 	srli	r17,r17,4
 400b2d8:	28c00104 	addi	r3,r5,4
 400b2dc:	23400104 	addi	r13,r4,4
 400b2e0:	8820913a 	slli	r16,r17,4
 400b2e4:	2b000204 	addi	r12,r5,8
 400b2e8:	22c00204 	addi	r11,r4,8
 400b2ec:	84000504 	addi	r16,r16,20
 400b2f0:	2a800304 	addi	r10,r5,12
 400b2f4:	22400304 	addi	r9,r4,12
 400b2f8:	2c21883a 	add	r16,r5,r16
 400b2fc:	2811883a 	mov	r8,r5
 400b300:	200f883a 	mov	r7,r4
 400b304:	41000017 	ldw	r4,0(r8)
 400b308:	1fc00017 	ldw	ra,0(r3)
 400b30c:	63c00017 	ldw	r15,0(r12)
 400b310:	39000015 	stw	r4,0(r7)
 400b314:	53800017 	ldw	r14,0(r10)
 400b318:	6fc00015 	stw	ra,0(r13)
 400b31c:	5bc00015 	stw	r15,0(r11)
 400b320:	4b800015 	stw	r14,0(r9)
 400b324:	18c00404 	addi	r3,r3,16
 400b328:	39c00404 	addi	r7,r7,16
 400b32c:	42000404 	addi	r8,r8,16
 400b330:	6b400404 	addi	r13,r13,16
 400b334:	63000404 	addi	r12,r12,16
 400b338:	5ac00404 	addi	r11,r11,16
 400b33c:	52800404 	addi	r10,r10,16
 400b340:	4a400404 	addi	r9,r9,16
 400b344:	1c3fef1e 	bne	r3,r16,400b304 <__alt_data_end+0xfc00b304>
 400b348:	89c00044 	addi	r7,r17,1
 400b34c:	380e913a 	slli	r7,r7,4
 400b350:	310003cc 	andi	r4,r6,15
 400b354:	02c000c4 	movi	r11,3
 400b358:	11c7883a 	add	r3,r2,r7
 400b35c:	29cb883a 	add	r5,r5,r7
 400b360:	5900212e 	bgeu	r11,r4,400b3e8 <memcpy+0x140>
 400b364:	1813883a 	mov	r9,r3
 400b368:	2811883a 	mov	r8,r5
 400b36c:	200f883a 	mov	r7,r4
 400b370:	42800017 	ldw	r10,0(r8)
 400b374:	4a400104 	addi	r9,r9,4
 400b378:	39ffff04 	addi	r7,r7,-4
 400b37c:	4abfff15 	stw	r10,-4(r9)
 400b380:	42000104 	addi	r8,r8,4
 400b384:	59fffa36 	bltu	r11,r7,400b370 <__alt_data_end+0xfc00b370>
 400b388:	213fff04 	addi	r4,r4,-4
 400b38c:	2008d0ba 	srli	r4,r4,2
 400b390:	318000cc 	andi	r6,r6,3
 400b394:	21000044 	addi	r4,r4,1
 400b398:	2109883a 	add	r4,r4,r4
 400b39c:	2109883a 	add	r4,r4,r4
 400b3a0:	1907883a 	add	r3,r3,r4
 400b3a4:	290b883a 	add	r5,r5,r4
 400b3a8:	30000626 	beq	r6,zero,400b3c4 <memcpy+0x11c>
 400b3ac:	198d883a 	add	r6,r3,r6
 400b3b0:	29c00003 	ldbu	r7,0(r5)
 400b3b4:	18c00044 	addi	r3,r3,1
 400b3b8:	29400044 	addi	r5,r5,1
 400b3bc:	19ffffc5 	stb	r7,-1(r3)
 400b3c0:	19bffb1e 	bne	r3,r6,400b3b0 <__alt_data_end+0xfc00b3b0>
 400b3c4:	dfc00217 	ldw	ra,8(sp)
 400b3c8:	dc400117 	ldw	r17,4(sp)
 400b3cc:	dc000017 	ldw	r16,0(sp)
 400b3d0:	dec00304 	addi	sp,sp,12
 400b3d4:	f800283a 	ret
 400b3d8:	2007883a 	mov	r3,r4
 400b3dc:	003ff206 	br	400b3a8 <__alt_data_end+0xfc00b3a8>
 400b3e0:	2007883a 	mov	r3,r4
 400b3e4:	003ff106 	br	400b3ac <__alt_data_end+0xfc00b3ac>
 400b3e8:	200d883a 	mov	r6,r4
 400b3ec:	003fee06 	br	400b3a8 <__alt_data_end+0xfc00b3a8>

0400b3f0 <memset>:
 400b3f0:	20c000cc 	andi	r3,r4,3
 400b3f4:	2005883a 	mov	r2,r4
 400b3f8:	18004426 	beq	r3,zero,400b50c <memset+0x11c>
 400b3fc:	31ffffc4 	addi	r7,r6,-1
 400b400:	30004026 	beq	r6,zero,400b504 <memset+0x114>
 400b404:	2813883a 	mov	r9,r5
 400b408:	200d883a 	mov	r6,r4
 400b40c:	2007883a 	mov	r3,r4
 400b410:	00000406 	br	400b424 <memset+0x34>
 400b414:	3a3fffc4 	addi	r8,r7,-1
 400b418:	31800044 	addi	r6,r6,1
 400b41c:	38003926 	beq	r7,zero,400b504 <memset+0x114>
 400b420:	400f883a 	mov	r7,r8
 400b424:	18c00044 	addi	r3,r3,1
 400b428:	32400005 	stb	r9,0(r6)
 400b42c:	1a0000cc 	andi	r8,r3,3
 400b430:	403ff81e 	bne	r8,zero,400b414 <__alt_data_end+0xfc00b414>
 400b434:	010000c4 	movi	r4,3
 400b438:	21c02d2e 	bgeu	r4,r7,400b4f0 <memset+0x100>
 400b43c:	29003fcc 	andi	r4,r5,255
 400b440:	200c923a 	slli	r6,r4,8
 400b444:	3108b03a 	or	r4,r6,r4
 400b448:	200c943a 	slli	r6,r4,16
 400b44c:	218cb03a 	or	r6,r4,r6
 400b450:	010003c4 	movi	r4,15
 400b454:	21c0182e 	bgeu	r4,r7,400b4b8 <memset+0xc8>
 400b458:	3b3ffc04 	addi	r12,r7,-16
 400b45c:	6018d13a 	srli	r12,r12,4
 400b460:	1a000104 	addi	r8,r3,4
 400b464:	1ac00204 	addi	r11,r3,8
 400b468:	6008913a 	slli	r4,r12,4
 400b46c:	1a800304 	addi	r10,r3,12
 400b470:	1813883a 	mov	r9,r3
 400b474:	21000504 	addi	r4,r4,20
 400b478:	1909883a 	add	r4,r3,r4
 400b47c:	49800015 	stw	r6,0(r9)
 400b480:	41800015 	stw	r6,0(r8)
 400b484:	59800015 	stw	r6,0(r11)
 400b488:	51800015 	stw	r6,0(r10)
 400b48c:	42000404 	addi	r8,r8,16
 400b490:	4a400404 	addi	r9,r9,16
 400b494:	5ac00404 	addi	r11,r11,16
 400b498:	52800404 	addi	r10,r10,16
 400b49c:	413ff71e 	bne	r8,r4,400b47c <__alt_data_end+0xfc00b47c>
 400b4a0:	63000044 	addi	r12,r12,1
 400b4a4:	6018913a 	slli	r12,r12,4
 400b4a8:	39c003cc 	andi	r7,r7,15
 400b4ac:	010000c4 	movi	r4,3
 400b4b0:	1b07883a 	add	r3,r3,r12
 400b4b4:	21c00e2e 	bgeu	r4,r7,400b4f0 <memset+0x100>
 400b4b8:	1813883a 	mov	r9,r3
 400b4bc:	3811883a 	mov	r8,r7
 400b4c0:	010000c4 	movi	r4,3
 400b4c4:	49800015 	stw	r6,0(r9)
 400b4c8:	423fff04 	addi	r8,r8,-4
 400b4cc:	4a400104 	addi	r9,r9,4
 400b4d0:	223ffc36 	bltu	r4,r8,400b4c4 <__alt_data_end+0xfc00b4c4>
 400b4d4:	393fff04 	addi	r4,r7,-4
 400b4d8:	2008d0ba 	srli	r4,r4,2
 400b4dc:	39c000cc 	andi	r7,r7,3
 400b4e0:	21000044 	addi	r4,r4,1
 400b4e4:	2109883a 	add	r4,r4,r4
 400b4e8:	2109883a 	add	r4,r4,r4
 400b4ec:	1907883a 	add	r3,r3,r4
 400b4f0:	38000526 	beq	r7,zero,400b508 <memset+0x118>
 400b4f4:	19cf883a 	add	r7,r3,r7
 400b4f8:	19400005 	stb	r5,0(r3)
 400b4fc:	18c00044 	addi	r3,r3,1
 400b500:	38fffd1e 	bne	r7,r3,400b4f8 <__alt_data_end+0xfc00b4f8>
 400b504:	f800283a 	ret
 400b508:	f800283a 	ret
 400b50c:	2007883a 	mov	r3,r4
 400b510:	300f883a 	mov	r7,r6
 400b514:	003fc706 	br	400b434 <__alt_data_end+0xfc00b434>

0400b518 <_printf_r>:
 400b518:	defffd04 	addi	sp,sp,-12
 400b51c:	2805883a 	mov	r2,r5
 400b520:	dfc00015 	stw	ra,0(sp)
 400b524:	d9800115 	stw	r6,4(sp)
 400b528:	d9c00215 	stw	r7,8(sp)
 400b52c:	21400217 	ldw	r5,8(r4)
 400b530:	d9c00104 	addi	r7,sp,4
 400b534:	100d883a 	mov	r6,r2
 400b538:	400bb2c0 	call	400bb2c <___vfprintf_internal_r>
 400b53c:	dfc00017 	ldw	ra,0(sp)
 400b540:	dec00304 	addi	sp,sp,12
 400b544:	f800283a 	ret

0400b548 <printf>:
 400b548:	defffc04 	addi	sp,sp,-16
 400b54c:	dfc00015 	stw	ra,0(sp)
 400b550:	d9400115 	stw	r5,4(sp)
 400b554:	d9800215 	stw	r6,8(sp)
 400b558:	d9c00315 	stw	r7,12(sp)
 400b55c:	008100b4 	movhi	r2,1026
 400b560:	1086e904 	addi	r2,r2,7076
 400b564:	10800017 	ldw	r2,0(r2)
 400b568:	200b883a 	mov	r5,r4
 400b56c:	d9800104 	addi	r6,sp,4
 400b570:	11000217 	ldw	r4,8(r2)
 400b574:	400dd240 	call	400dd24 <__vfprintf_internal>
 400b578:	dfc00017 	ldw	ra,0(sp)
 400b57c:	dec00404 	addi	sp,sp,16
 400b580:	f800283a 	ret

0400b584 <_puts_r>:
 400b584:	defff604 	addi	sp,sp,-40
 400b588:	dc000715 	stw	r16,28(sp)
 400b58c:	2021883a 	mov	r16,r4
 400b590:	2809883a 	mov	r4,r5
 400b594:	dc400815 	stw	r17,32(sp)
 400b598:	dfc00915 	stw	ra,36(sp)
 400b59c:	2823883a 	mov	r17,r5
 400b5a0:	400ba8c0 	call	400ba8c <strlen>
 400b5a4:	10c00044 	addi	r3,r2,1
 400b5a8:	d8800115 	stw	r2,4(sp)
 400b5ac:	008100b4 	movhi	r2,1026
 400b5b0:	10a9cb04 	addi	r2,r2,-22740
 400b5b4:	d8800215 	stw	r2,8(sp)
 400b5b8:	00800044 	movi	r2,1
 400b5bc:	d8800315 	stw	r2,12(sp)
 400b5c0:	00800084 	movi	r2,2
 400b5c4:	dc400015 	stw	r17,0(sp)
 400b5c8:	d8c00615 	stw	r3,24(sp)
 400b5cc:	dec00415 	stw	sp,16(sp)
 400b5d0:	d8800515 	stw	r2,20(sp)
 400b5d4:	80000226 	beq	r16,zero,400b5e0 <_puts_r+0x5c>
 400b5d8:	80800e17 	ldw	r2,56(r16)
 400b5dc:	10001426 	beq	r2,zero,400b630 <_puts_r+0xac>
 400b5e0:	81400217 	ldw	r5,8(r16)
 400b5e4:	2880030b 	ldhu	r2,12(r5)
 400b5e8:	10c8000c 	andi	r3,r2,8192
 400b5ec:	1800061e 	bne	r3,zero,400b608 <_puts_r+0x84>
 400b5f0:	29001917 	ldw	r4,100(r5)
 400b5f4:	00f7ffc4 	movi	r3,-8193
 400b5f8:	10880014 	ori	r2,r2,8192
 400b5fc:	20c6703a 	and	r3,r4,r3
 400b600:	2880030d 	sth	r2,12(r5)
 400b604:	28c01915 	stw	r3,100(r5)
 400b608:	d9800404 	addi	r6,sp,16
 400b60c:	8009883a 	mov	r4,r16
 400b610:	40102540 	call	4010254 <__sfvwrite_r>
 400b614:	1000091e 	bne	r2,zero,400b63c <_puts_r+0xb8>
 400b618:	00800284 	movi	r2,10
 400b61c:	dfc00917 	ldw	ra,36(sp)
 400b620:	dc400817 	ldw	r17,32(sp)
 400b624:	dc000717 	ldw	r16,28(sp)
 400b628:	dec00a04 	addi	sp,sp,40
 400b62c:	f800283a 	ret
 400b630:	8009883a 	mov	r4,r16
 400b634:	400fdd00 	call	400fdd0 <__sinit>
 400b638:	003fe906 	br	400b5e0 <__alt_data_end+0xfc00b5e0>
 400b63c:	00bfffc4 	movi	r2,-1
 400b640:	003ff606 	br	400b61c <__alt_data_end+0xfc00b61c>

0400b644 <puts>:
 400b644:	008100b4 	movhi	r2,1026
 400b648:	1086e904 	addi	r2,r2,7076
 400b64c:	200b883a 	mov	r5,r4
 400b650:	11000017 	ldw	r4,0(r2)
 400b654:	400b5841 	jmpi	400b584 <_puts_r>

0400b658 <_sbrk_r>:
 400b658:	defffd04 	addi	sp,sp,-12
 400b65c:	dc000015 	stw	r16,0(sp)
 400b660:	040100f4 	movhi	r16,1027
 400b664:	dc400115 	stw	r17,4(sp)
 400b668:	84237f04 	addi	r16,r16,-29188
 400b66c:	2023883a 	mov	r17,r4
 400b670:	2809883a 	mov	r4,r5
 400b674:	dfc00215 	stw	ra,8(sp)
 400b678:	80000015 	stw	zero,0(r16)
 400b67c:	4017e340 	call	4017e34 <sbrk>
 400b680:	00ffffc4 	movi	r3,-1
 400b684:	10c00526 	beq	r2,r3,400b69c <_sbrk_r+0x44>
 400b688:	dfc00217 	ldw	ra,8(sp)
 400b68c:	dc400117 	ldw	r17,4(sp)
 400b690:	dc000017 	ldw	r16,0(sp)
 400b694:	dec00304 	addi	sp,sp,12
 400b698:	f800283a 	ret
 400b69c:	80c00017 	ldw	r3,0(r16)
 400b6a0:	183ff926 	beq	r3,zero,400b688 <__alt_data_end+0xfc00b688>
 400b6a4:	88c00015 	stw	r3,0(r17)
 400b6a8:	003ff706 	br	400b688 <__alt_data_end+0xfc00b688>

0400b6ac <_init_signal_r>:
 400b6ac:	2080b717 	ldw	r2,732(r4)
 400b6b0:	10000226 	beq	r2,zero,400b6bc <_init_signal_r+0x10>
 400b6b4:	0005883a 	mov	r2,zero
 400b6b8:	f800283a 	ret
 400b6bc:	defffe04 	addi	sp,sp,-8
 400b6c0:	01402004 	movi	r5,128
 400b6c4:	dc000015 	stw	r16,0(sp)
 400b6c8:	dfc00115 	stw	ra,4(sp)
 400b6cc:	2021883a 	mov	r16,r4
 400b6d0:	400aa200 	call	400aa20 <_malloc_r>
 400b6d4:	8080b715 	stw	r2,732(r16)
 400b6d8:	10000d26 	beq	r2,zero,400b710 <_init_signal_r+0x64>
 400b6dc:	0007883a 	mov	r3,zero
 400b6e0:	01002004 	movi	r4,128
 400b6e4:	00000106 	br	400b6ec <_init_signal_r+0x40>
 400b6e8:	8080b717 	ldw	r2,732(r16)
 400b6ec:	10c5883a 	add	r2,r2,r3
 400b6f0:	10000015 	stw	zero,0(r2)
 400b6f4:	18c00104 	addi	r3,r3,4
 400b6f8:	193ffb1e 	bne	r3,r4,400b6e8 <__alt_data_end+0xfc00b6e8>
 400b6fc:	0005883a 	mov	r2,zero
 400b700:	dfc00117 	ldw	ra,4(sp)
 400b704:	dc000017 	ldw	r16,0(sp)
 400b708:	dec00204 	addi	sp,sp,8
 400b70c:	f800283a 	ret
 400b710:	00bfffc4 	movi	r2,-1
 400b714:	003ffa06 	br	400b700 <__alt_data_end+0xfc00b700>

0400b718 <_signal_r>:
 400b718:	00c007c4 	movi	r3,31
 400b71c:	19401536 	bltu	r3,r5,400b774 <_signal_r+0x5c>
 400b720:	2080b717 	ldw	r2,732(r4)
 400b724:	defffc04 	addi	sp,sp,-16
 400b728:	dc800215 	stw	r18,8(sp)
 400b72c:	dc400115 	stw	r17,4(sp)
 400b730:	dc000015 	stw	r16,0(sp)
 400b734:	dfc00315 	stw	ra,12(sp)
 400b738:	3023883a 	mov	r17,r6
 400b73c:	2021883a 	mov	r16,r4
 400b740:	2825883a 	mov	r18,r5
 400b744:	10000f26 	beq	r2,zero,400b784 <_signal_r+0x6c>
 400b748:	948b883a 	add	r5,r18,r18
 400b74c:	294b883a 	add	r5,r5,r5
 400b750:	114b883a 	add	r5,r2,r5
 400b754:	28800017 	ldw	r2,0(r5)
 400b758:	2c400015 	stw	r17,0(r5)
 400b75c:	dfc00317 	ldw	ra,12(sp)
 400b760:	dc800217 	ldw	r18,8(sp)
 400b764:	dc400117 	ldw	r17,4(sp)
 400b768:	dc000017 	ldw	r16,0(sp)
 400b76c:	dec00404 	addi	sp,sp,16
 400b770:	f800283a 	ret
 400b774:	00c00584 	movi	r3,22
 400b778:	20c00015 	stw	r3,0(r4)
 400b77c:	00bfffc4 	movi	r2,-1
 400b780:	f800283a 	ret
 400b784:	400b6ac0 	call	400b6ac <_init_signal_r>
 400b788:	1000021e 	bne	r2,zero,400b794 <_signal_r+0x7c>
 400b78c:	8080b717 	ldw	r2,732(r16)
 400b790:	003fed06 	br	400b748 <__alt_data_end+0xfc00b748>
 400b794:	00bfffc4 	movi	r2,-1
 400b798:	003ff006 	br	400b75c <__alt_data_end+0xfc00b75c>

0400b79c <_raise_r>:
 400b79c:	008007c4 	movi	r2,31
 400b7a0:	11402936 	bltu	r2,r5,400b848 <_raise_r+0xac>
 400b7a4:	20c0b717 	ldw	r3,732(r4)
 400b7a8:	defffd04 	addi	sp,sp,-12
 400b7ac:	dc400115 	stw	r17,4(sp)
 400b7b0:	dc000015 	stw	r16,0(sp)
 400b7b4:	dfc00215 	stw	ra,8(sp)
 400b7b8:	2021883a 	mov	r16,r4
 400b7bc:	2823883a 	mov	r17,r5
 400b7c0:	18001726 	beq	r3,zero,400b820 <_raise_r+0x84>
 400b7c4:	2945883a 	add	r2,r5,r5
 400b7c8:	1085883a 	add	r2,r2,r2
 400b7cc:	1887883a 	add	r3,r3,r2
 400b7d0:	19800017 	ldw	r6,0(r3)
 400b7d4:	30001226 	beq	r6,zero,400b820 <_raise_r+0x84>
 400b7d8:	00800044 	movi	r2,1
 400b7dc:	30800e26 	beq	r6,r2,400b818 <_raise_r+0x7c>
 400b7e0:	013fffc4 	movi	r4,-1
 400b7e4:	31000926 	beq	r6,r4,400b80c <_raise_r+0x70>
 400b7e8:	18000015 	stw	zero,0(r3)
 400b7ec:	2809883a 	mov	r4,r5
 400b7f0:	303ee83a 	callr	r6
 400b7f4:	0005883a 	mov	r2,zero
 400b7f8:	dfc00217 	ldw	ra,8(sp)
 400b7fc:	dc400117 	ldw	r17,4(sp)
 400b800:	dc000017 	ldw	r16,0(sp)
 400b804:	dec00304 	addi	sp,sp,12
 400b808:	f800283a 	ret
 400b80c:	00c00584 	movi	r3,22
 400b810:	80c00015 	stw	r3,0(r16)
 400b814:	003ff806 	br	400b7f8 <__alt_data_end+0xfc00b7f8>
 400b818:	0005883a 	mov	r2,zero
 400b81c:	003ff606 	br	400b7f8 <__alt_data_end+0xfc00b7f8>
 400b820:	8009883a 	mov	r4,r16
 400b824:	400b9ac0 	call	400b9ac <_getpid_r>
 400b828:	880d883a 	mov	r6,r17
 400b82c:	100b883a 	mov	r5,r2
 400b830:	8009883a 	mov	r4,r16
 400b834:	dfc00217 	ldw	ra,8(sp)
 400b838:	dc400117 	ldw	r17,4(sp)
 400b83c:	dc000017 	ldw	r16,0(sp)
 400b840:	dec00304 	addi	sp,sp,12
 400b844:	400b9501 	jmpi	400b950 <_kill_r>
 400b848:	00800584 	movi	r2,22
 400b84c:	20800015 	stw	r2,0(r4)
 400b850:	00bfffc4 	movi	r2,-1
 400b854:	f800283a 	ret

0400b858 <__sigtramp_r>:
 400b858:	008007c4 	movi	r2,31
 400b85c:	11402436 	bltu	r2,r5,400b8f0 <__sigtramp_r+0x98>
 400b860:	20c0b717 	ldw	r3,732(r4)
 400b864:	defffd04 	addi	sp,sp,-12
 400b868:	dc400115 	stw	r17,4(sp)
 400b86c:	dc000015 	stw	r16,0(sp)
 400b870:	dfc00215 	stw	ra,8(sp)
 400b874:	2021883a 	mov	r16,r4
 400b878:	2823883a 	mov	r17,r5
 400b87c:	18001826 	beq	r3,zero,400b8e0 <__sigtramp_r+0x88>
 400b880:	8c45883a 	add	r2,r17,r17
 400b884:	1085883a 	add	r2,r2,r2
 400b888:	1885883a 	add	r2,r3,r2
 400b88c:	10c00017 	ldw	r3,0(r2)
 400b890:	18001126 	beq	r3,zero,400b8d8 <__sigtramp_r+0x80>
 400b894:	013fffc4 	movi	r4,-1
 400b898:	19000d26 	beq	r3,r4,400b8d0 <__sigtramp_r+0x78>
 400b89c:	01000044 	movi	r4,1
 400b8a0:	19000926 	beq	r3,r4,400b8c8 <__sigtramp_r+0x70>
 400b8a4:	10000015 	stw	zero,0(r2)
 400b8a8:	8809883a 	mov	r4,r17
 400b8ac:	183ee83a 	callr	r3
 400b8b0:	0005883a 	mov	r2,zero
 400b8b4:	dfc00217 	ldw	ra,8(sp)
 400b8b8:	dc400117 	ldw	r17,4(sp)
 400b8bc:	dc000017 	ldw	r16,0(sp)
 400b8c0:	dec00304 	addi	sp,sp,12
 400b8c4:	f800283a 	ret
 400b8c8:	008000c4 	movi	r2,3
 400b8cc:	003ff906 	br	400b8b4 <__alt_data_end+0xfc00b8b4>
 400b8d0:	00800084 	movi	r2,2
 400b8d4:	003ff706 	br	400b8b4 <__alt_data_end+0xfc00b8b4>
 400b8d8:	00800044 	movi	r2,1
 400b8dc:	003ff506 	br	400b8b4 <__alt_data_end+0xfc00b8b4>
 400b8e0:	400b6ac0 	call	400b6ac <_init_signal_r>
 400b8e4:	1000041e 	bne	r2,zero,400b8f8 <__sigtramp_r+0xa0>
 400b8e8:	80c0b717 	ldw	r3,732(r16)
 400b8ec:	003fe406 	br	400b880 <__alt_data_end+0xfc00b880>
 400b8f0:	00bfffc4 	movi	r2,-1
 400b8f4:	f800283a 	ret
 400b8f8:	00bfffc4 	movi	r2,-1
 400b8fc:	003fed06 	br	400b8b4 <__alt_data_end+0xfc00b8b4>

0400b900 <raise>:
 400b900:	008100b4 	movhi	r2,1026
 400b904:	1086e904 	addi	r2,r2,7076
 400b908:	200b883a 	mov	r5,r4
 400b90c:	11000017 	ldw	r4,0(r2)
 400b910:	400b79c1 	jmpi	400b79c <_raise_r>

0400b914 <signal>:
 400b914:	008100b4 	movhi	r2,1026
 400b918:	1086e904 	addi	r2,r2,7076
 400b91c:	280d883a 	mov	r6,r5
 400b920:	200b883a 	mov	r5,r4
 400b924:	11000017 	ldw	r4,0(r2)
 400b928:	400b7181 	jmpi	400b718 <_signal_r>

0400b92c <_init_signal>:
 400b92c:	008100b4 	movhi	r2,1026
 400b930:	1086e904 	addi	r2,r2,7076
 400b934:	11000017 	ldw	r4,0(r2)
 400b938:	400b6ac1 	jmpi	400b6ac <_init_signal_r>

0400b93c <__sigtramp>:
 400b93c:	008100b4 	movhi	r2,1026
 400b940:	1086e904 	addi	r2,r2,7076
 400b944:	200b883a 	mov	r5,r4
 400b948:	11000017 	ldw	r4,0(r2)
 400b94c:	400b8581 	jmpi	400b858 <__sigtramp_r>

0400b950 <_kill_r>:
 400b950:	defffd04 	addi	sp,sp,-12
 400b954:	2805883a 	mov	r2,r5
 400b958:	dc000015 	stw	r16,0(sp)
 400b95c:	040100f4 	movhi	r16,1027
 400b960:	dc400115 	stw	r17,4(sp)
 400b964:	84237f04 	addi	r16,r16,-29188
 400b968:	2023883a 	mov	r17,r4
 400b96c:	300b883a 	mov	r5,r6
 400b970:	1009883a 	mov	r4,r2
 400b974:	dfc00215 	stw	ra,8(sp)
 400b978:	80000015 	stw	zero,0(r16)
 400b97c:	40178a80 	call	40178a8 <kill>
 400b980:	00ffffc4 	movi	r3,-1
 400b984:	10c00526 	beq	r2,r3,400b99c <_kill_r+0x4c>
 400b988:	dfc00217 	ldw	ra,8(sp)
 400b98c:	dc400117 	ldw	r17,4(sp)
 400b990:	dc000017 	ldw	r16,0(sp)
 400b994:	dec00304 	addi	sp,sp,12
 400b998:	f800283a 	ret
 400b99c:	80c00017 	ldw	r3,0(r16)
 400b9a0:	183ff926 	beq	r3,zero,400b988 <__alt_data_end+0xfc00b988>
 400b9a4:	88c00015 	stw	r3,0(r17)
 400b9a8:	003ff706 	br	400b988 <__alt_data_end+0xfc00b988>

0400b9ac <_getpid_r>:
 400b9ac:	401776c1 	jmpi	401776c <getpid>

0400b9b0 <strcmp>:
 400b9b0:	2144b03a 	or	r2,r4,r5
 400b9b4:	108000cc 	andi	r2,r2,3
 400b9b8:	1000171e 	bne	r2,zero,400ba18 <strcmp+0x68>
 400b9bc:	20800017 	ldw	r2,0(r4)
 400b9c0:	28c00017 	ldw	r3,0(r5)
 400b9c4:	10c0141e 	bne	r2,r3,400ba18 <strcmp+0x68>
 400b9c8:	027fbff4 	movhi	r9,65279
 400b9cc:	4a7fbfc4 	addi	r9,r9,-257
 400b9d0:	0086303a 	nor	r3,zero,r2
 400b9d4:	02202074 	movhi	r8,32897
 400b9d8:	1245883a 	add	r2,r2,r9
 400b9dc:	42202004 	addi	r8,r8,-32640
 400b9e0:	10c4703a 	and	r2,r2,r3
 400b9e4:	1204703a 	and	r2,r2,r8
 400b9e8:	10000226 	beq	r2,zero,400b9f4 <strcmp+0x44>
 400b9ec:	00002306 	br	400ba7c <strcmp+0xcc>
 400b9f0:	1000221e 	bne	r2,zero,400ba7c <strcmp+0xcc>
 400b9f4:	21000104 	addi	r4,r4,4
 400b9f8:	20c00017 	ldw	r3,0(r4)
 400b9fc:	29400104 	addi	r5,r5,4
 400ba00:	29800017 	ldw	r6,0(r5)
 400ba04:	1a4f883a 	add	r7,r3,r9
 400ba08:	00c4303a 	nor	r2,zero,r3
 400ba0c:	3884703a 	and	r2,r7,r2
 400ba10:	1204703a 	and	r2,r2,r8
 400ba14:	19bff626 	beq	r3,r6,400b9f0 <__alt_data_end+0xfc00b9f0>
 400ba18:	20800003 	ldbu	r2,0(r4)
 400ba1c:	10c03fcc 	andi	r3,r2,255
 400ba20:	18c0201c 	xori	r3,r3,128
 400ba24:	18ffe004 	addi	r3,r3,-128
 400ba28:	18000c26 	beq	r3,zero,400ba5c <strcmp+0xac>
 400ba2c:	29800007 	ldb	r6,0(r5)
 400ba30:	19800326 	beq	r3,r6,400ba40 <strcmp+0x90>
 400ba34:	00001306 	br	400ba84 <strcmp+0xd4>
 400ba38:	29800007 	ldb	r6,0(r5)
 400ba3c:	11800b1e 	bne	r2,r6,400ba6c <strcmp+0xbc>
 400ba40:	21000044 	addi	r4,r4,1
 400ba44:	20c00003 	ldbu	r3,0(r4)
 400ba48:	29400044 	addi	r5,r5,1
 400ba4c:	18803fcc 	andi	r2,r3,255
 400ba50:	1080201c 	xori	r2,r2,128
 400ba54:	10bfe004 	addi	r2,r2,-128
 400ba58:	103ff71e 	bne	r2,zero,400ba38 <__alt_data_end+0xfc00ba38>
 400ba5c:	0007883a 	mov	r3,zero
 400ba60:	28800003 	ldbu	r2,0(r5)
 400ba64:	1885c83a 	sub	r2,r3,r2
 400ba68:	f800283a 	ret
 400ba6c:	28800003 	ldbu	r2,0(r5)
 400ba70:	18c03fcc 	andi	r3,r3,255
 400ba74:	1885c83a 	sub	r2,r3,r2
 400ba78:	f800283a 	ret
 400ba7c:	0005883a 	mov	r2,zero
 400ba80:	f800283a 	ret
 400ba84:	10c03fcc 	andi	r3,r2,255
 400ba88:	003ff506 	br	400ba60 <__alt_data_end+0xfc00ba60>

0400ba8c <strlen>:
 400ba8c:	208000cc 	andi	r2,r4,3
 400ba90:	10002026 	beq	r2,zero,400bb14 <strlen+0x88>
 400ba94:	20800007 	ldb	r2,0(r4)
 400ba98:	10002026 	beq	r2,zero,400bb1c <strlen+0x90>
 400ba9c:	2005883a 	mov	r2,r4
 400baa0:	00000206 	br	400baac <strlen+0x20>
 400baa4:	10c00007 	ldb	r3,0(r2)
 400baa8:	18001826 	beq	r3,zero,400bb0c <strlen+0x80>
 400baac:	10800044 	addi	r2,r2,1
 400bab0:	10c000cc 	andi	r3,r2,3
 400bab4:	183ffb1e 	bne	r3,zero,400baa4 <__alt_data_end+0xfc00baa4>
 400bab8:	10c00017 	ldw	r3,0(r2)
 400babc:	01ffbff4 	movhi	r7,65279
 400bac0:	39ffbfc4 	addi	r7,r7,-257
 400bac4:	00ca303a 	nor	r5,zero,r3
 400bac8:	01a02074 	movhi	r6,32897
 400bacc:	19c7883a 	add	r3,r3,r7
 400bad0:	31a02004 	addi	r6,r6,-32640
 400bad4:	1946703a 	and	r3,r3,r5
 400bad8:	1986703a 	and	r3,r3,r6
 400badc:	1800091e 	bne	r3,zero,400bb04 <strlen+0x78>
 400bae0:	10800104 	addi	r2,r2,4
 400bae4:	10c00017 	ldw	r3,0(r2)
 400bae8:	19cb883a 	add	r5,r3,r7
 400baec:	00c6303a 	nor	r3,zero,r3
 400baf0:	28c6703a 	and	r3,r5,r3
 400baf4:	1986703a 	and	r3,r3,r6
 400baf8:	183ff926 	beq	r3,zero,400bae0 <__alt_data_end+0xfc00bae0>
 400bafc:	00000106 	br	400bb04 <strlen+0x78>
 400bb00:	10800044 	addi	r2,r2,1
 400bb04:	10c00007 	ldb	r3,0(r2)
 400bb08:	183ffd1e 	bne	r3,zero,400bb00 <__alt_data_end+0xfc00bb00>
 400bb0c:	1105c83a 	sub	r2,r2,r4
 400bb10:	f800283a 	ret
 400bb14:	2005883a 	mov	r2,r4
 400bb18:	003fe706 	br	400bab8 <__alt_data_end+0xfc00bab8>
 400bb1c:	0005883a 	mov	r2,zero
 400bb20:	f800283a 	ret

0400bb24 <_times_r>:
 400bb24:	2809883a 	mov	r4,r5
 400bb28:	4017f201 	jmpi	4017f20 <times>

0400bb2c <___vfprintf_internal_r>:
 400bb2c:	deffb804 	addi	sp,sp,-288
 400bb30:	dfc04715 	stw	ra,284(sp)
 400bb34:	ddc04515 	stw	r23,276(sp)
 400bb38:	dd404315 	stw	r21,268(sp)
 400bb3c:	d9002c15 	stw	r4,176(sp)
 400bb40:	282f883a 	mov	r23,r5
 400bb44:	302b883a 	mov	r21,r6
 400bb48:	d9c02d15 	stw	r7,180(sp)
 400bb4c:	df004615 	stw	fp,280(sp)
 400bb50:	dd804415 	stw	r22,272(sp)
 400bb54:	dd004215 	stw	r20,264(sp)
 400bb58:	dcc04115 	stw	r19,260(sp)
 400bb5c:	dc804015 	stw	r18,256(sp)
 400bb60:	dc403f15 	stw	r17,252(sp)
 400bb64:	dc003e15 	stw	r16,248(sp)
 400bb68:	40109440 	call	4010944 <_localeconv_r>
 400bb6c:	10800017 	ldw	r2,0(r2)
 400bb70:	1009883a 	mov	r4,r2
 400bb74:	d8803415 	stw	r2,208(sp)
 400bb78:	400ba8c0 	call	400ba8c <strlen>
 400bb7c:	d8803715 	stw	r2,220(sp)
 400bb80:	d8802c17 	ldw	r2,176(sp)
 400bb84:	10000226 	beq	r2,zero,400bb90 <___vfprintf_internal_r+0x64>
 400bb88:	10800e17 	ldw	r2,56(r2)
 400bb8c:	1000f926 	beq	r2,zero,400bf74 <___vfprintf_internal_r+0x448>
 400bb90:	b880030b 	ldhu	r2,12(r23)
 400bb94:	10c8000c 	andi	r3,r2,8192
 400bb98:	1800061e 	bne	r3,zero,400bbb4 <___vfprintf_internal_r+0x88>
 400bb9c:	b9001917 	ldw	r4,100(r23)
 400bba0:	00f7ffc4 	movi	r3,-8193
 400bba4:	10880014 	ori	r2,r2,8192
 400bba8:	20c6703a 	and	r3,r4,r3
 400bbac:	b880030d 	sth	r2,12(r23)
 400bbb0:	b8c01915 	stw	r3,100(r23)
 400bbb4:	10c0020c 	andi	r3,r2,8
 400bbb8:	1800c126 	beq	r3,zero,400bec0 <___vfprintf_internal_r+0x394>
 400bbbc:	b8c00417 	ldw	r3,16(r23)
 400bbc0:	1800bf26 	beq	r3,zero,400bec0 <___vfprintf_internal_r+0x394>
 400bbc4:	1080068c 	andi	r2,r2,26
 400bbc8:	00c00284 	movi	r3,10
 400bbcc:	10c0c426 	beq	r2,r3,400bee0 <___vfprintf_internal_r+0x3b4>
 400bbd0:	d8c00404 	addi	r3,sp,16
 400bbd4:	050100b4 	movhi	r20,1026
 400bbd8:	d9001e04 	addi	r4,sp,120
 400bbdc:	a529dc84 	addi	r20,r20,-22670
 400bbe0:	d8c01e15 	stw	r3,120(sp)
 400bbe4:	d8002015 	stw	zero,128(sp)
 400bbe8:	d8001f15 	stw	zero,124(sp)
 400bbec:	d8003315 	stw	zero,204(sp)
 400bbf0:	d8003615 	stw	zero,216(sp)
 400bbf4:	d8003815 	stw	zero,224(sp)
 400bbf8:	1811883a 	mov	r8,r3
 400bbfc:	d8003915 	stw	zero,228(sp)
 400bc00:	d8003a15 	stw	zero,232(sp)
 400bc04:	d8002f15 	stw	zero,188(sp)
 400bc08:	d9002815 	stw	r4,160(sp)
 400bc0c:	a8800007 	ldb	r2,0(r21)
 400bc10:	10027b26 	beq	r2,zero,400c600 <___vfprintf_internal_r+0xad4>
 400bc14:	00c00944 	movi	r3,37
 400bc18:	a821883a 	mov	r16,r21
 400bc1c:	10c0021e 	bne	r2,r3,400bc28 <___vfprintf_internal_r+0xfc>
 400bc20:	00001406 	br	400bc74 <___vfprintf_internal_r+0x148>
 400bc24:	10c00326 	beq	r2,r3,400bc34 <___vfprintf_internal_r+0x108>
 400bc28:	84000044 	addi	r16,r16,1
 400bc2c:	80800007 	ldb	r2,0(r16)
 400bc30:	103ffc1e 	bne	r2,zero,400bc24 <__alt_data_end+0xfc00bc24>
 400bc34:	8563c83a 	sub	r17,r16,r21
 400bc38:	88000e26 	beq	r17,zero,400bc74 <___vfprintf_internal_r+0x148>
 400bc3c:	d8c02017 	ldw	r3,128(sp)
 400bc40:	d8801f17 	ldw	r2,124(sp)
 400bc44:	45400015 	stw	r21,0(r8)
 400bc48:	1c47883a 	add	r3,r3,r17
 400bc4c:	10800044 	addi	r2,r2,1
 400bc50:	d8c02015 	stw	r3,128(sp)
 400bc54:	44400115 	stw	r17,4(r8)
 400bc58:	d8801f15 	stw	r2,124(sp)
 400bc5c:	00c001c4 	movi	r3,7
 400bc60:	1880a716 	blt	r3,r2,400bf00 <___vfprintf_internal_r+0x3d4>
 400bc64:	42000204 	addi	r8,r8,8
 400bc68:	d9402f17 	ldw	r5,188(sp)
 400bc6c:	2c4b883a 	add	r5,r5,r17
 400bc70:	d9402f15 	stw	r5,188(sp)
 400bc74:	80800007 	ldb	r2,0(r16)
 400bc78:	1000a826 	beq	r2,zero,400bf1c <___vfprintf_internal_r+0x3f0>
 400bc7c:	84400047 	ldb	r17,1(r16)
 400bc80:	00bfffc4 	movi	r2,-1
 400bc84:	85400044 	addi	r21,r16,1
 400bc88:	d8002785 	stb	zero,158(sp)
 400bc8c:	0007883a 	mov	r3,zero
 400bc90:	000f883a 	mov	r7,zero
 400bc94:	d8802915 	stw	r2,164(sp)
 400bc98:	d8003115 	stw	zero,196(sp)
 400bc9c:	0025883a 	mov	r18,zero
 400bca0:	01401604 	movi	r5,88
 400bca4:	01800244 	movi	r6,9
 400bca8:	02800a84 	movi	r10,42
 400bcac:	02401b04 	movi	r9,108
 400bcb0:	ad400044 	addi	r21,r21,1
 400bcb4:	88bff804 	addi	r2,r17,-32
 400bcb8:	28830436 	bltu	r5,r2,400c8cc <___vfprintf_internal_r+0xda0>
 400bcbc:	100490ba 	slli	r2,r2,2
 400bcc0:	01010074 	movhi	r4,1025
 400bcc4:	212f3504 	addi	r4,r4,-17196
 400bcc8:	1105883a 	add	r2,r2,r4
 400bccc:	10800017 	ldw	r2,0(r2)
 400bcd0:	1000683a 	jmp	r2
 400bcd4:	0400c7ec 	andhi	r16,zero,799
 400bcd8:	0400c8cc 	andi	r16,zero,803
 400bcdc:	0400c8cc 	andi	r16,zero,803
 400bce0:	0400c80c 	andi	r16,zero,800
 400bce4:	0400c8cc 	andi	r16,zero,803
 400bce8:	0400c8cc 	andi	r16,zero,803
 400bcec:	0400c8cc 	andi	r16,zero,803
 400bcf0:	0400c8cc 	andi	r16,zero,803
 400bcf4:	0400c8cc 	andi	r16,zero,803
 400bcf8:	0400c8cc 	andi	r16,zero,803
 400bcfc:	0400bf80 	call	400bf8 <__alt_mem_sdram-0x3bff408>
 400bd00:	0400c728 	cmpgeui	r16,zero,796
 400bd04:	0400c8cc 	andi	r16,zero,803
 400bd08:	0400be48 	cmpgei	r16,zero,761
 400bd0c:	0400bfa8 	cmpgeui	r16,zero,766
 400bd10:	0400c8cc 	andi	r16,zero,803
 400bd14:	0400bfe8 	cmpgeui	r16,zero,767
 400bd18:	0400bff4 	movhi	r16,767
 400bd1c:	0400bff4 	movhi	r16,767
 400bd20:	0400bff4 	movhi	r16,767
 400bd24:	0400bff4 	movhi	r16,767
 400bd28:	0400bff4 	movhi	r16,767
 400bd2c:	0400bff4 	movhi	r16,767
 400bd30:	0400bff4 	movhi	r16,767
 400bd34:	0400bff4 	movhi	r16,767
 400bd38:	0400bff4 	movhi	r16,767
 400bd3c:	0400c8cc 	andi	r16,zero,803
 400bd40:	0400c8cc 	andi	r16,zero,803
 400bd44:	0400c8cc 	andi	r16,zero,803
 400bd48:	0400c8cc 	andi	r16,zero,803
 400bd4c:	0400c8cc 	andi	r16,zero,803
 400bd50:	0400c8cc 	andi	r16,zero,803
 400bd54:	0400c8cc 	andi	r16,zero,803
 400bd58:	0400c8cc 	andi	r16,zero,803
 400bd5c:	0400c8cc 	andi	r16,zero,803
 400bd60:	0400c8cc 	andi	r16,zero,803
 400bd64:	0400c028 	cmpgeui	r16,zero,768
 400bd68:	0400c0e4 	muli	r16,zero,771
 400bd6c:	0400c8cc 	andi	r16,zero,803
 400bd70:	0400c0e4 	muli	r16,zero,771
 400bd74:	0400c8cc 	andi	r16,zero,803
 400bd78:	0400c8cc 	andi	r16,zero,803
 400bd7c:	0400c8cc 	andi	r16,zero,803
 400bd80:	0400c8cc 	andi	r16,zero,803
 400bd84:	0400c184 	movi	r16,774
 400bd88:	0400c8cc 	andi	r16,zero,803
 400bd8c:	0400c8cc 	andi	r16,zero,803
 400bd90:	0400c190 	cmplti	r16,zero,774
 400bd94:	0400c8cc 	andi	r16,zero,803
 400bd98:	0400c8cc 	andi	r16,zero,803
 400bd9c:	0400c8cc 	andi	r16,zero,803
 400bda0:	0400c8cc 	andi	r16,zero,803
 400bda4:	0400c8cc 	andi	r16,zero,803
 400bda8:	0400c608 	cmpgei	r16,zero,792
 400bdac:	0400c8cc 	andi	r16,zero,803
 400bdb0:	0400c8cc 	andi	r16,zero,803
 400bdb4:	0400c668 	cmpgeui	r16,zero,793
 400bdb8:	0400c8cc 	andi	r16,zero,803
 400bdbc:	0400c8cc 	andi	r16,zero,803
 400bdc0:	0400c8cc 	andi	r16,zero,803
 400bdc4:	0400c8cc 	andi	r16,zero,803
 400bdc8:	0400c8cc 	andi	r16,zero,803
 400bdcc:	0400c8cc 	andi	r16,zero,803
 400bdd0:	0400c8cc 	andi	r16,zero,803
 400bdd4:	0400c8cc 	andi	r16,zero,803
 400bdd8:	0400c8cc 	andi	r16,zero,803
 400bddc:	0400c8cc 	andi	r16,zero,803
 400bde0:	0400c878 	rdprs	r16,zero,801
 400bde4:	0400c818 	cmpnei	r16,zero,800
 400bde8:	0400c0e4 	muli	r16,zero,771
 400bdec:	0400c0e4 	muli	r16,zero,771
 400bdf0:	0400c0e4 	muli	r16,zero,771
 400bdf4:	0400c828 	cmpgeui	r16,zero,800
 400bdf8:	0400c818 	cmpnei	r16,zero,800
 400bdfc:	0400c8cc 	andi	r16,zero,803
 400be00:	0400c8cc 	andi	r16,zero,803
 400be04:	0400c834 	movhi	r16,800
 400be08:	0400c8cc 	andi	r16,zero,803
 400be0c:	0400c844 	movi	r16,801
 400be10:	0400c718 	cmpnei	r16,zero,796
 400be14:	0400be54 	movui	r16,761
 400be18:	0400c738 	rdprs	r16,zero,796
 400be1c:	0400c8cc 	andi	r16,zero,803
 400be20:	0400c744 	movi	r16,797
 400be24:	0400c8cc 	andi	r16,zero,803
 400be28:	0400c7a0 	cmpeqi	r16,zero,798
 400be2c:	0400c8cc 	andi	r16,zero,803
 400be30:	0400c8cc 	andi	r16,zero,803
 400be34:	0400c7b0 	cmpltui	r16,zero,798
 400be38:	d9003117 	ldw	r4,196(sp)
 400be3c:	d8802d15 	stw	r2,180(sp)
 400be40:	0109c83a 	sub	r4,zero,r4
 400be44:	d9003115 	stw	r4,196(sp)
 400be48:	94800114 	ori	r18,r18,4
 400be4c:	ac400007 	ldb	r17,0(r21)
 400be50:	003f9706 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400be54:	00800c04 	movi	r2,48
 400be58:	d9002d17 	ldw	r4,180(sp)
 400be5c:	d9402917 	ldw	r5,164(sp)
 400be60:	d8802705 	stb	r2,156(sp)
 400be64:	00801e04 	movi	r2,120
 400be68:	d8802745 	stb	r2,157(sp)
 400be6c:	d8002785 	stb	zero,158(sp)
 400be70:	20c00104 	addi	r3,r4,4
 400be74:	24c00017 	ldw	r19,0(r4)
 400be78:	002d883a 	mov	r22,zero
 400be7c:	90800094 	ori	r2,r18,2
 400be80:	28029a16 	blt	r5,zero,400c8ec <___vfprintf_internal_r+0xdc0>
 400be84:	00bfdfc4 	movi	r2,-129
 400be88:	90a4703a 	and	r18,r18,r2
 400be8c:	d8c02d15 	stw	r3,180(sp)
 400be90:	94800094 	ori	r18,r18,2
 400be94:	9802871e 	bne	r19,zero,400c8b4 <___vfprintf_internal_r+0xd88>
 400be98:	008100b4 	movhi	r2,1026
 400be9c:	10a9d504 	addi	r2,r2,-22700
 400bea0:	d8803915 	stw	r2,228(sp)
 400bea4:	04401e04 	movi	r17,120
 400bea8:	d8802917 	ldw	r2,164(sp)
 400beac:	0039883a 	mov	fp,zero
 400beb0:	1001e926 	beq	r2,zero,400c658 <___vfprintf_internal_r+0xb2c>
 400beb4:	0027883a 	mov	r19,zero
 400beb8:	002d883a 	mov	r22,zero
 400bebc:	00020506 	br	400c6d4 <___vfprintf_internal_r+0xba8>
 400bec0:	d9002c17 	ldw	r4,176(sp)
 400bec4:	b80b883a 	mov	r5,r23
 400bec8:	400ddfc0 	call	400ddfc <__swsetup_r>
 400becc:	1005ac1e 	bne	r2,zero,400d580 <___vfprintf_internal_r+0x1a54>
 400bed0:	b880030b 	ldhu	r2,12(r23)
 400bed4:	00c00284 	movi	r3,10
 400bed8:	1080068c 	andi	r2,r2,26
 400bedc:	10ff3c1e 	bne	r2,r3,400bbd0 <__alt_data_end+0xfc00bbd0>
 400bee0:	b880038f 	ldh	r2,14(r23)
 400bee4:	103f3a16 	blt	r2,zero,400bbd0 <__alt_data_end+0xfc00bbd0>
 400bee8:	d9c02d17 	ldw	r7,180(sp)
 400beec:	d9002c17 	ldw	r4,176(sp)
 400bef0:	a80d883a 	mov	r6,r21
 400bef4:	b80b883a 	mov	r5,r23
 400bef8:	400dd400 	call	400dd40 <__sbprintf>
 400befc:	00001106 	br	400bf44 <___vfprintf_internal_r+0x418>
 400bf00:	d9002c17 	ldw	r4,176(sp)
 400bf04:	d9801e04 	addi	r6,sp,120
 400bf08:	b80b883a 	mov	r5,r23
 400bf0c:	401257c0 	call	401257c <__sprint_r>
 400bf10:	1000081e 	bne	r2,zero,400bf34 <___vfprintf_internal_r+0x408>
 400bf14:	da000404 	addi	r8,sp,16
 400bf18:	003f5306 	br	400bc68 <__alt_data_end+0xfc00bc68>
 400bf1c:	d8802017 	ldw	r2,128(sp)
 400bf20:	10000426 	beq	r2,zero,400bf34 <___vfprintf_internal_r+0x408>
 400bf24:	d9002c17 	ldw	r4,176(sp)
 400bf28:	d9801e04 	addi	r6,sp,120
 400bf2c:	b80b883a 	mov	r5,r23
 400bf30:	401257c0 	call	401257c <__sprint_r>
 400bf34:	b880030b 	ldhu	r2,12(r23)
 400bf38:	1080100c 	andi	r2,r2,64
 400bf3c:	1005901e 	bne	r2,zero,400d580 <___vfprintf_internal_r+0x1a54>
 400bf40:	d8802f17 	ldw	r2,188(sp)
 400bf44:	dfc04717 	ldw	ra,284(sp)
 400bf48:	df004617 	ldw	fp,280(sp)
 400bf4c:	ddc04517 	ldw	r23,276(sp)
 400bf50:	dd804417 	ldw	r22,272(sp)
 400bf54:	dd404317 	ldw	r21,268(sp)
 400bf58:	dd004217 	ldw	r20,264(sp)
 400bf5c:	dcc04117 	ldw	r19,260(sp)
 400bf60:	dc804017 	ldw	r18,256(sp)
 400bf64:	dc403f17 	ldw	r17,252(sp)
 400bf68:	dc003e17 	ldw	r16,248(sp)
 400bf6c:	dec04804 	addi	sp,sp,288
 400bf70:	f800283a 	ret
 400bf74:	d9002c17 	ldw	r4,176(sp)
 400bf78:	400fdd00 	call	400fdd0 <__sinit>
 400bf7c:	003f0406 	br	400bb90 <__alt_data_end+0xfc00bb90>
 400bf80:	d8802d17 	ldw	r2,180(sp)
 400bf84:	d9002d17 	ldw	r4,180(sp)
 400bf88:	10800017 	ldw	r2,0(r2)
 400bf8c:	d8803115 	stw	r2,196(sp)
 400bf90:	20800104 	addi	r2,r4,4
 400bf94:	d9003117 	ldw	r4,196(sp)
 400bf98:	203fa716 	blt	r4,zero,400be38 <__alt_data_end+0xfc00be38>
 400bf9c:	d8802d15 	stw	r2,180(sp)
 400bfa0:	ac400007 	ldb	r17,0(r21)
 400bfa4:	003f4206 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400bfa8:	ac400007 	ldb	r17,0(r21)
 400bfac:	aac00044 	addi	r11,r21,1
 400bfb0:	8a872826 	beq	r17,r10,400dc54 <___vfprintf_internal_r+0x2128>
 400bfb4:	88bff404 	addi	r2,r17,-48
 400bfb8:	0009883a 	mov	r4,zero
 400bfbc:	30867d36 	bltu	r6,r2,400d9b4 <___vfprintf_internal_r+0x1e88>
 400bfc0:	5c400007 	ldb	r17,0(r11)
 400bfc4:	210002a4 	muli	r4,r4,10
 400bfc8:	5d400044 	addi	r21,r11,1
 400bfcc:	a817883a 	mov	r11,r21
 400bfd0:	2089883a 	add	r4,r4,r2
 400bfd4:	88bff404 	addi	r2,r17,-48
 400bfd8:	30bff92e 	bgeu	r6,r2,400bfc0 <__alt_data_end+0xfc00bfc0>
 400bfdc:	2005c916 	blt	r4,zero,400d704 <___vfprintf_internal_r+0x1bd8>
 400bfe0:	d9002915 	stw	r4,164(sp)
 400bfe4:	003f3306 	br	400bcb4 <__alt_data_end+0xfc00bcb4>
 400bfe8:	94802014 	ori	r18,r18,128
 400bfec:	ac400007 	ldb	r17,0(r21)
 400bff0:	003f2f06 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400bff4:	a809883a 	mov	r4,r21
 400bff8:	d8003115 	stw	zero,196(sp)
 400bffc:	88bff404 	addi	r2,r17,-48
 400c000:	0017883a 	mov	r11,zero
 400c004:	24400007 	ldb	r17,0(r4)
 400c008:	5ac002a4 	muli	r11,r11,10
 400c00c:	ad400044 	addi	r21,r21,1
 400c010:	a809883a 	mov	r4,r21
 400c014:	12d7883a 	add	r11,r2,r11
 400c018:	88bff404 	addi	r2,r17,-48
 400c01c:	30bff92e 	bgeu	r6,r2,400c004 <__alt_data_end+0xfc00c004>
 400c020:	dac03115 	stw	r11,196(sp)
 400c024:	003f2306 	br	400bcb4 <__alt_data_end+0xfc00bcb4>
 400c028:	18c03fcc 	andi	r3,r3,255
 400c02c:	18072b1e 	bne	r3,zero,400dcdc <___vfprintf_internal_r+0x21b0>
 400c030:	94800414 	ori	r18,r18,16
 400c034:	9080080c 	andi	r2,r18,32
 400c038:	10037b26 	beq	r2,zero,400ce28 <___vfprintf_internal_r+0x12fc>
 400c03c:	d9402d17 	ldw	r5,180(sp)
 400c040:	28800117 	ldw	r2,4(r5)
 400c044:	2cc00017 	ldw	r19,0(r5)
 400c048:	29400204 	addi	r5,r5,8
 400c04c:	d9402d15 	stw	r5,180(sp)
 400c050:	102d883a 	mov	r22,r2
 400c054:	10044b16 	blt	r2,zero,400d184 <___vfprintf_internal_r+0x1658>
 400c058:	d9402917 	ldw	r5,164(sp)
 400c05c:	df002783 	ldbu	fp,158(sp)
 400c060:	2803bc16 	blt	r5,zero,400cf54 <___vfprintf_internal_r+0x1428>
 400c064:	00ffdfc4 	movi	r3,-129
 400c068:	9d84b03a 	or	r2,r19,r22
 400c06c:	90e4703a 	and	r18,r18,r3
 400c070:	10017726 	beq	r2,zero,400c650 <___vfprintf_internal_r+0xb24>
 400c074:	b0038326 	beq	r22,zero,400ce84 <___vfprintf_internal_r+0x1358>
 400c078:	dc402a15 	stw	r17,168(sp)
 400c07c:	dc001e04 	addi	r16,sp,120
 400c080:	b023883a 	mov	r17,r22
 400c084:	402d883a 	mov	r22,r8
 400c088:	9809883a 	mov	r4,r19
 400c08c:	880b883a 	mov	r5,r17
 400c090:	01800284 	movi	r6,10
 400c094:	000f883a 	mov	r7,zero
 400c098:	40149740 	call	4014974 <__umoddi3>
 400c09c:	10800c04 	addi	r2,r2,48
 400c0a0:	843fffc4 	addi	r16,r16,-1
 400c0a4:	9809883a 	mov	r4,r19
 400c0a8:	880b883a 	mov	r5,r17
 400c0ac:	80800005 	stb	r2,0(r16)
 400c0b0:	01800284 	movi	r6,10
 400c0b4:	000f883a 	mov	r7,zero
 400c0b8:	40143fc0 	call	40143fc <__udivdi3>
 400c0bc:	1027883a 	mov	r19,r2
 400c0c0:	10c4b03a 	or	r2,r2,r3
 400c0c4:	1823883a 	mov	r17,r3
 400c0c8:	103fef1e 	bne	r2,zero,400c088 <__alt_data_end+0xfc00c088>
 400c0cc:	d8c02817 	ldw	r3,160(sp)
 400c0d0:	dc402a17 	ldw	r17,168(sp)
 400c0d4:	b011883a 	mov	r8,r22
 400c0d8:	1c07c83a 	sub	r3,r3,r16
 400c0dc:	d8c02e15 	stw	r3,184(sp)
 400c0e0:	00005906 	br	400c248 <___vfprintf_internal_r+0x71c>
 400c0e4:	18c03fcc 	andi	r3,r3,255
 400c0e8:	1806fa1e 	bne	r3,zero,400dcd4 <___vfprintf_internal_r+0x21a8>
 400c0ec:	9080020c 	andi	r2,r18,8
 400c0f0:	10048a26 	beq	r2,zero,400d31c <___vfprintf_internal_r+0x17f0>
 400c0f4:	d8c02d17 	ldw	r3,180(sp)
 400c0f8:	d9002d17 	ldw	r4,180(sp)
 400c0fc:	d9402d17 	ldw	r5,180(sp)
 400c100:	18c00017 	ldw	r3,0(r3)
 400c104:	21000117 	ldw	r4,4(r4)
 400c108:	29400204 	addi	r5,r5,8
 400c10c:	d8c03615 	stw	r3,216(sp)
 400c110:	d9003815 	stw	r4,224(sp)
 400c114:	d9402d15 	stw	r5,180(sp)
 400c118:	d9003617 	ldw	r4,216(sp)
 400c11c:	d9403817 	ldw	r5,224(sp)
 400c120:	da003d15 	stw	r8,244(sp)
 400c124:	04000044 	movi	r16,1
 400c128:	40122d00 	call	40122d0 <__fpclassifyd>
 400c12c:	da003d17 	ldw	r8,244(sp)
 400c130:	14041f1e 	bne	r2,r16,400d1b0 <___vfprintf_internal_r+0x1684>
 400c134:	d9003617 	ldw	r4,216(sp)
 400c138:	d9403817 	ldw	r5,224(sp)
 400c13c:	000d883a 	mov	r6,zero
 400c140:	000f883a 	mov	r7,zero
 400c144:	40161a40 	call	40161a4 <__ledf2>
 400c148:	da003d17 	ldw	r8,244(sp)
 400c14c:	1005be16 	blt	r2,zero,400d848 <___vfprintf_internal_r+0x1d1c>
 400c150:	df002783 	ldbu	fp,158(sp)
 400c154:	008011c4 	movi	r2,71
 400c158:	1445330e 	bge	r2,r17,400d628 <___vfprintf_internal_r+0x1afc>
 400c15c:	040100b4 	movhi	r16,1026
 400c160:	8429cd04 	addi	r16,r16,-22732
 400c164:	00c000c4 	movi	r3,3
 400c168:	00bfdfc4 	movi	r2,-129
 400c16c:	d8c02a15 	stw	r3,168(sp)
 400c170:	90a4703a 	and	r18,r18,r2
 400c174:	d8c02e15 	stw	r3,184(sp)
 400c178:	d8002915 	stw	zero,164(sp)
 400c17c:	d8003215 	stw	zero,200(sp)
 400c180:	00003706 	br	400c260 <___vfprintf_internal_r+0x734>
 400c184:	94800214 	ori	r18,r18,8
 400c188:	ac400007 	ldb	r17,0(r21)
 400c18c:	003ec806 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400c190:	18c03fcc 	andi	r3,r3,255
 400c194:	1806db1e 	bne	r3,zero,400dd04 <___vfprintf_internal_r+0x21d8>
 400c198:	94800414 	ori	r18,r18,16
 400c19c:	9080080c 	andi	r2,r18,32
 400c1a0:	1002d826 	beq	r2,zero,400cd04 <___vfprintf_internal_r+0x11d8>
 400c1a4:	d9402d17 	ldw	r5,180(sp)
 400c1a8:	d8c02917 	ldw	r3,164(sp)
 400c1ac:	d8002785 	stb	zero,158(sp)
 400c1b0:	28800204 	addi	r2,r5,8
 400c1b4:	2cc00017 	ldw	r19,0(r5)
 400c1b8:	2d800117 	ldw	r22,4(r5)
 400c1bc:	18048f16 	blt	r3,zero,400d3fc <___vfprintf_internal_r+0x18d0>
 400c1c0:	013fdfc4 	movi	r4,-129
 400c1c4:	9d86b03a 	or	r3,r19,r22
 400c1c8:	d8802d15 	stw	r2,180(sp)
 400c1cc:	9124703a 	and	r18,r18,r4
 400c1d0:	1802d91e 	bne	r3,zero,400cd38 <___vfprintf_internal_r+0x120c>
 400c1d4:	d8c02917 	ldw	r3,164(sp)
 400c1d8:	0039883a 	mov	fp,zero
 400c1dc:	1805c326 	beq	r3,zero,400d8ec <___vfprintf_internal_r+0x1dc0>
 400c1e0:	0027883a 	mov	r19,zero
 400c1e4:	002d883a 	mov	r22,zero
 400c1e8:	dc001e04 	addi	r16,sp,120
 400c1ec:	9806d0fa 	srli	r3,r19,3
 400c1f0:	b008977a 	slli	r4,r22,29
 400c1f4:	b02cd0fa 	srli	r22,r22,3
 400c1f8:	9cc001cc 	andi	r19,r19,7
 400c1fc:	98800c04 	addi	r2,r19,48
 400c200:	843fffc4 	addi	r16,r16,-1
 400c204:	20e6b03a 	or	r19,r4,r3
 400c208:	80800005 	stb	r2,0(r16)
 400c20c:	9d86b03a 	or	r3,r19,r22
 400c210:	183ff61e 	bne	r3,zero,400c1ec <__alt_data_end+0xfc00c1ec>
 400c214:	90c0004c 	andi	r3,r18,1
 400c218:	18013b26 	beq	r3,zero,400c708 <___vfprintf_internal_r+0xbdc>
 400c21c:	10803fcc 	andi	r2,r2,255
 400c220:	1080201c 	xori	r2,r2,128
 400c224:	10bfe004 	addi	r2,r2,-128
 400c228:	00c00c04 	movi	r3,48
 400c22c:	10c13626 	beq	r2,r3,400c708 <___vfprintf_internal_r+0xbdc>
 400c230:	80ffffc5 	stb	r3,-1(r16)
 400c234:	d8c02817 	ldw	r3,160(sp)
 400c238:	80bfffc4 	addi	r2,r16,-1
 400c23c:	1021883a 	mov	r16,r2
 400c240:	1887c83a 	sub	r3,r3,r2
 400c244:	d8c02e15 	stw	r3,184(sp)
 400c248:	d8802e17 	ldw	r2,184(sp)
 400c24c:	d9002917 	ldw	r4,164(sp)
 400c250:	1100010e 	bge	r2,r4,400c258 <___vfprintf_internal_r+0x72c>
 400c254:	2005883a 	mov	r2,r4
 400c258:	d8802a15 	stw	r2,168(sp)
 400c25c:	d8003215 	stw	zero,200(sp)
 400c260:	e7003fcc 	andi	fp,fp,255
 400c264:	e700201c 	xori	fp,fp,128
 400c268:	e73fe004 	addi	fp,fp,-128
 400c26c:	e0000326 	beq	fp,zero,400c27c <___vfprintf_internal_r+0x750>
 400c270:	d8c02a17 	ldw	r3,168(sp)
 400c274:	18c00044 	addi	r3,r3,1
 400c278:	d8c02a15 	stw	r3,168(sp)
 400c27c:	90c0008c 	andi	r3,r18,2
 400c280:	d8c02b15 	stw	r3,172(sp)
 400c284:	18000326 	beq	r3,zero,400c294 <___vfprintf_internal_r+0x768>
 400c288:	d8c02a17 	ldw	r3,168(sp)
 400c28c:	18c00084 	addi	r3,r3,2
 400c290:	d8c02a15 	stw	r3,168(sp)
 400c294:	90c0210c 	andi	r3,r18,132
 400c298:	d8c03015 	stw	r3,192(sp)
 400c29c:	1801a31e 	bne	r3,zero,400c92c <___vfprintf_internal_r+0xe00>
 400c2a0:	d9003117 	ldw	r4,196(sp)
 400c2a4:	d8c02a17 	ldw	r3,168(sp)
 400c2a8:	20e7c83a 	sub	r19,r4,r3
 400c2ac:	04c19f0e 	bge	zero,r19,400c92c <___vfprintf_internal_r+0xe00>
 400c2b0:	02400404 	movi	r9,16
 400c2b4:	d8c02017 	ldw	r3,128(sp)
 400c2b8:	d8801f17 	ldw	r2,124(sp)
 400c2bc:	4cc50d0e 	bge	r9,r19,400d6f4 <___vfprintf_internal_r+0x1bc8>
 400c2c0:	014100b4 	movhi	r5,1026
 400c2c4:	2969e084 	addi	r5,r5,-22654
 400c2c8:	dc403b15 	stw	r17,236(sp)
 400c2cc:	d9403515 	stw	r5,212(sp)
 400c2d0:	9823883a 	mov	r17,r19
 400c2d4:	482d883a 	mov	r22,r9
 400c2d8:	9027883a 	mov	r19,r18
 400c2dc:	070001c4 	movi	fp,7
 400c2e0:	8025883a 	mov	r18,r16
 400c2e4:	dc002c17 	ldw	r16,176(sp)
 400c2e8:	00000306 	br	400c2f8 <___vfprintf_internal_r+0x7cc>
 400c2ec:	8c7ffc04 	addi	r17,r17,-16
 400c2f0:	42000204 	addi	r8,r8,8
 400c2f4:	b440130e 	bge	r22,r17,400c344 <___vfprintf_internal_r+0x818>
 400c2f8:	010100b4 	movhi	r4,1026
 400c2fc:	18c00404 	addi	r3,r3,16
 400c300:	10800044 	addi	r2,r2,1
 400c304:	2129e084 	addi	r4,r4,-22654
 400c308:	41000015 	stw	r4,0(r8)
 400c30c:	45800115 	stw	r22,4(r8)
 400c310:	d8c02015 	stw	r3,128(sp)
 400c314:	d8801f15 	stw	r2,124(sp)
 400c318:	e0bff40e 	bge	fp,r2,400c2ec <__alt_data_end+0xfc00c2ec>
 400c31c:	d9801e04 	addi	r6,sp,120
 400c320:	b80b883a 	mov	r5,r23
 400c324:	8009883a 	mov	r4,r16
 400c328:	401257c0 	call	401257c <__sprint_r>
 400c32c:	103f011e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400c330:	8c7ffc04 	addi	r17,r17,-16
 400c334:	d8c02017 	ldw	r3,128(sp)
 400c338:	d8801f17 	ldw	r2,124(sp)
 400c33c:	da000404 	addi	r8,sp,16
 400c340:	b47fed16 	blt	r22,r17,400c2f8 <__alt_data_end+0xfc00c2f8>
 400c344:	9021883a 	mov	r16,r18
 400c348:	9825883a 	mov	r18,r19
 400c34c:	8827883a 	mov	r19,r17
 400c350:	dc403b17 	ldw	r17,236(sp)
 400c354:	d9403517 	ldw	r5,212(sp)
 400c358:	98c7883a 	add	r3,r19,r3
 400c35c:	10800044 	addi	r2,r2,1
 400c360:	41400015 	stw	r5,0(r8)
 400c364:	44c00115 	stw	r19,4(r8)
 400c368:	d8c02015 	stw	r3,128(sp)
 400c36c:	d8801f15 	stw	r2,124(sp)
 400c370:	010001c4 	movi	r4,7
 400c374:	2082a316 	blt	r4,r2,400ce04 <___vfprintf_internal_r+0x12d8>
 400c378:	df002787 	ldb	fp,158(sp)
 400c37c:	42000204 	addi	r8,r8,8
 400c380:	e0000c26 	beq	fp,zero,400c3b4 <___vfprintf_internal_r+0x888>
 400c384:	d8801f17 	ldw	r2,124(sp)
 400c388:	d9002784 	addi	r4,sp,158
 400c38c:	18c00044 	addi	r3,r3,1
 400c390:	10800044 	addi	r2,r2,1
 400c394:	41000015 	stw	r4,0(r8)
 400c398:	01000044 	movi	r4,1
 400c39c:	41000115 	stw	r4,4(r8)
 400c3a0:	d8c02015 	stw	r3,128(sp)
 400c3a4:	d8801f15 	stw	r2,124(sp)
 400c3a8:	010001c4 	movi	r4,7
 400c3ac:	20823c16 	blt	r4,r2,400cca0 <___vfprintf_internal_r+0x1174>
 400c3b0:	42000204 	addi	r8,r8,8
 400c3b4:	d8802b17 	ldw	r2,172(sp)
 400c3b8:	10000c26 	beq	r2,zero,400c3ec <___vfprintf_internal_r+0x8c0>
 400c3bc:	d8801f17 	ldw	r2,124(sp)
 400c3c0:	d9002704 	addi	r4,sp,156
 400c3c4:	18c00084 	addi	r3,r3,2
 400c3c8:	10800044 	addi	r2,r2,1
 400c3cc:	41000015 	stw	r4,0(r8)
 400c3d0:	01000084 	movi	r4,2
 400c3d4:	41000115 	stw	r4,4(r8)
 400c3d8:	d8c02015 	stw	r3,128(sp)
 400c3dc:	d8801f15 	stw	r2,124(sp)
 400c3e0:	010001c4 	movi	r4,7
 400c3e4:	20823616 	blt	r4,r2,400ccc0 <___vfprintf_internal_r+0x1194>
 400c3e8:	42000204 	addi	r8,r8,8
 400c3ec:	d9003017 	ldw	r4,192(sp)
 400c3f0:	00802004 	movi	r2,128
 400c3f4:	20819926 	beq	r4,r2,400ca5c <___vfprintf_internal_r+0xf30>
 400c3f8:	d9402917 	ldw	r5,164(sp)
 400c3fc:	d8802e17 	ldw	r2,184(sp)
 400c400:	28adc83a 	sub	r22,r5,r2
 400c404:	0580310e 	bge	zero,r22,400c4cc <___vfprintf_internal_r+0x9a0>
 400c408:	07000404 	movi	fp,16
 400c40c:	d8801f17 	ldw	r2,124(sp)
 400c410:	e584140e 	bge	fp,r22,400d464 <___vfprintf_internal_r+0x1938>
 400c414:	014100b4 	movhi	r5,1026
 400c418:	2969dc84 	addi	r5,r5,-22670
 400c41c:	dc402915 	stw	r17,164(sp)
 400c420:	d9402b15 	stw	r5,172(sp)
 400c424:	b023883a 	mov	r17,r22
 400c428:	04c001c4 	movi	r19,7
 400c42c:	a82d883a 	mov	r22,r21
 400c430:	902b883a 	mov	r21,r18
 400c434:	8025883a 	mov	r18,r16
 400c438:	dc002c17 	ldw	r16,176(sp)
 400c43c:	00000306 	br	400c44c <___vfprintf_internal_r+0x920>
 400c440:	8c7ffc04 	addi	r17,r17,-16
 400c444:	42000204 	addi	r8,r8,8
 400c448:	e440110e 	bge	fp,r17,400c490 <___vfprintf_internal_r+0x964>
 400c44c:	18c00404 	addi	r3,r3,16
 400c450:	10800044 	addi	r2,r2,1
 400c454:	45000015 	stw	r20,0(r8)
 400c458:	47000115 	stw	fp,4(r8)
 400c45c:	d8c02015 	stw	r3,128(sp)
 400c460:	d8801f15 	stw	r2,124(sp)
 400c464:	98bff60e 	bge	r19,r2,400c440 <__alt_data_end+0xfc00c440>
 400c468:	d9801e04 	addi	r6,sp,120
 400c46c:	b80b883a 	mov	r5,r23
 400c470:	8009883a 	mov	r4,r16
 400c474:	401257c0 	call	401257c <__sprint_r>
 400c478:	103eae1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400c47c:	8c7ffc04 	addi	r17,r17,-16
 400c480:	d8c02017 	ldw	r3,128(sp)
 400c484:	d8801f17 	ldw	r2,124(sp)
 400c488:	da000404 	addi	r8,sp,16
 400c48c:	e47fef16 	blt	fp,r17,400c44c <__alt_data_end+0xfc00c44c>
 400c490:	9021883a 	mov	r16,r18
 400c494:	a825883a 	mov	r18,r21
 400c498:	b02b883a 	mov	r21,r22
 400c49c:	882d883a 	mov	r22,r17
 400c4a0:	dc402917 	ldw	r17,164(sp)
 400c4a4:	d9002b17 	ldw	r4,172(sp)
 400c4a8:	1d87883a 	add	r3,r3,r22
 400c4ac:	10800044 	addi	r2,r2,1
 400c4b0:	41000015 	stw	r4,0(r8)
 400c4b4:	45800115 	stw	r22,4(r8)
 400c4b8:	d8c02015 	stw	r3,128(sp)
 400c4bc:	d8801f15 	stw	r2,124(sp)
 400c4c0:	010001c4 	movi	r4,7
 400c4c4:	2081ee16 	blt	r4,r2,400cc80 <___vfprintf_internal_r+0x1154>
 400c4c8:	42000204 	addi	r8,r8,8
 400c4cc:	9080400c 	andi	r2,r18,256
 400c4d0:	1001181e 	bne	r2,zero,400c934 <___vfprintf_internal_r+0xe08>
 400c4d4:	d9402e17 	ldw	r5,184(sp)
 400c4d8:	d8801f17 	ldw	r2,124(sp)
 400c4dc:	44000015 	stw	r16,0(r8)
 400c4e0:	1947883a 	add	r3,r3,r5
 400c4e4:	10800044 	addi	r2,r2,1
 400c4e8:	41400115 	stw	r5,4(r8)
 400c4ec:	d8c02015 	stw	r3,128(sp)
 400c4f0:	d8801f15 	stw	r2,124(sp)
 400c4f4:	010001c4 	movi	r4,7
 400c4f8:	2081d316 	blt	r4,r2,400cc48 <___vfprintf_internal_r+0x111c>
 400c4fc:	42000204 	addi	r8,r8,8
 400c500:	9480010c 	andi	r18,r18,4
 400c504:	90003226 	beq	r18,zero,400c5d0 <___vfprintf_internal_r+0xaa4>
 400c508:	d9403117 	ldw	r5,196(sp)
 400c50c:	d8802a17 	ldw	r2,168(sp)
 400c510:	28a1c83a 	sub	r16,r5,r2
 400c514:	04002e0e 	bge	zero,r16,400c5d0 <___vfprintf_internal_r+0xaa4>
 400c518:	04400404 	movi	r17,16
 400c51c:	d8801f17 	ldw	r2,124(sp)
 400c520:	8c04a20e 	bge	r17,r16,400d7ac <___vfprintf_internal_r+0x1c80>
 400c524:	014100b4 	movhi	r5,1026
 400c528:	2969e084 	addi	r5,r5,-22654
 400c52c:	d9403515 	stw	r5,212(sp)
 400c530:	048001c4 	movi	r18,7
 400c534:	dcc02c17 	ldw	r19,176(sp)
 400c538:	00000306 	br	400c548 <___vfprintf_internal_r+0xa1c>
 400c53c:	843ffc04 	addi	r16,r16,-16
 400c540:	42000204 	addi	r8,r8,8
 400c544:	8c00130e 	bge	r17,r16,400c594 <___vfprintf_internal_r+0xa68>
 400c548:	010100b4 	movhi	r4,1026
 400c54c:	18c00404 	addi	r3,r3,16
 400c550:	10800044 	addi	r2,r2,1
 400c554:	2129e084 	addi	r4,r4,-22654
 400c558:	41000015 	stw	r4,0(r8)
 400c55c:	44400115 	stw	r17,4(r8)
 400c560:	d8c02015 	stw	r3,128(sp)
 400c564:	d8801f15 	stw	r2,124(sp)
 400c568:	90bff40e 	bge	r18,r2,400c53c <__alt_data_end+0xfc00c53c>
 400c56c:	d9801e04 	addi	r6,sp,120
 400c570:	b80b883a 	mov	r5,r23
 400c574:	9809883a 	mov	r4,r19
 400c578:	401257c0 	call	401257c <__sprint_r>
 400c57c:	103e6d1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400c580:	843ffc04 	addi	r16,r16,-16
 400c584:	d8c02017 	ldw	r3,128(sp)
 400c588:	d8801f17 	ldw	r2,124(sp)
 400c58c:	da000404 	addi	r8,sp,16
 400c590:	8c3fed16 	blt	r17,r16,400c548 <__alt_data_end+0xfc00c548>
 400c594:	d9403517 	ldw	r5,212(sp)
 400c598:	1c07883a 	add	r3,r3,r16
 400c59c:	10800044 	addi	r2,r2,1
 400c5a0:	41400015 	stw	r5,0(r8)
 400c5a4:	44000115 	stw	r16,4(r8)
 400c5a8:	d8c02015 	stw	r3,128(sp)
 400c5ac:	d8801f15 	stw	r2,124(sp)
 400c5b0:	010001c4 	movi	r4,7
 400c5b4:	2080060e 	bge	r4,r2,400c5d0 <___vfprintf_internal_r+0xaa4>
 400c5b8:	d9002c17 	ldw	r4,176(sp)
 400c5bc:	d9801e04 	addi	r6,sp,120
 400c5c0:	b80b883a 	mov	r5,r23
 400c5c4:	401257c0 	call	401257c <__sprint_r>
 400c5c8:	103e5a1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400c5cc:	d8c02017 	ldw	r3,128(sp)
 400c5d0:	d8803117 	ldw	r2,196(sp)
 400c5d4:	d9002a17 	ldw	r4,168(sp)
 400c5d8:	1100010e 	bge	r2,r4,400c5e0 <___vfprintf_internal_r+0xab4>
 400c5dc:	2005883a 	mov	r2,r4
 400c5e0:	d9402f17 	ldw	r5,188(sp)
 400c5e4:	288b883a 	add	r5,r5,r2
 400c5e8:	d9402f15 	stw	r5,188(sp)
 400c5ec:	18019e1e 	bne	r3,zero,400cc68 <___vfprintf_internal_r+0x113c>
 400c5f0:	a8800007 	ldb	r2,0(r21)
 400c5f4:	d8001f15 	stw	zero,124(sp)
 400c5f8:	da000404 	addi	r8,sp,16
 400c5fc:	103d851e 	bne	r2,zero,400bc14 <__alt_data_end+0xfc00bc14>
 400c600:	a821883a 	mov	r16,r21
 400c604:	003d9b06 	br	400bc74 <__alt_data_end+0xfc00bc74>
 400c608:	18c03fcc 	andi	r3,r3,255
 400c60c:	1805c11e 	bne	r3,zero,400dd14 <___vfprintf_internal_r+0x21e8>
 400c610:	94800414 	ori	r18,r18,16
 400c614:	9080080c 	andi	r2,r18,32
 400c618:	10020c26 	beq	r2,zero,400ce4c <___vfprintf_internal_r+0x1320>
 400c61c:	d8802d17 	ldw	r2,180(sp)
 400c620:	d9002917 	ldw	r4,164(sp)
 400c624:	d8002785 	stb	zero,158(sp)
 400c628:	10c00204 	addi	r3,r2,8
 400c62c:	14c00017 	ldw	r19,0(r2)
 400c630:	15800117 	ldw	r22,4(r2)
 400c634:	20040f16 	blt	r4,zero,400d674 <___vfprintf_internal_r+0x1b48>
 400c638:	013fdfc4 	movi	r4,-129
 400c63c:	9d84b03a 	or	r2,r19,r22
 400c640:	d8c02d15 	stw	r3,180(sp)
 400c644:	9124703a 	and	r18,r18,r4
 400c648:	0039883a 	mov	fp,zero
 400c64c:	103e891e 	bne	r2,zero,400c074 <__alt_data_end+0xfc00c074>
 400c650:	d9002917 	ldw	r4,164(sp)
 400c654:	2002c11e 	bne	r4,zero,400d15c <___vfprintf_internal_r+0x1630>
 400c658:	d8002915 	stw	zero,164(sp)
 400c65c:	d8002e15 	stw	zero,184(sp)
 400c660:	dc001e04 	addi	r16,sp,120
 400c664:	003ef806 	br	400c248 <__alt_data_end+0xfc00c248>
 400c668:	18c03fcc 	andi	r3,r3,255
 400c66c:	18059d1e 	bne	r3,zero,400dce4 <___vfprintf_internal_r+0x21b8>
 400c670:	014100b4 	movhi	r5,1026
 400c674:	2969d004 	addi	r5,r5,-22720
 400c678:	d9403915 	stw	r5,228(sp)
 400c67c:	9080080c 	andi	r2,r18,32
 400c680:	10005226 	beq	r2,zero,400c7cc <___vfprintf_internal_r+0xca0>
 400c684:	d8802d17 	ldw	r2,180(sp)
 400c688:	14c00017 	ldw	r19,0(r2)
 400c68c:	15800117 	ldw	r22,4(r2)
 400c690:	10800204 	addi	r2,r2,8
 400c694:	d8802d15 	stw	r2,180(sp)
 400c698:	9080004c 	andi	r2,r18,1
 400c69c:	10019026 	beq	r2,zero,400cce0 <___vfprintf_internal_r+0x11b4>
 400c6a0:	9d84b03a 	or	r2,r19,r22
 400c6a4:	10036926 	beq	r2,zero,400d44c <___vfprintf_internal_r+0x1920>
 400c6a8:	d8c02917 	ldw	r3,164(sp)
 400c6ac:	00800c04 	movi	r2,48
 400c6b0:	d8802705 	stb	r2,156(sp)
 400c6b4:	dc402745 	stb	r17,157(sp)
 400c6b8:	d8002785 	stb	zero,158(sp)
 400c6bc:	90800094 	ori	r2,r18,2
 400c6c0:	18045d16 	blt	r3,zero,400d838 <___vfprintf_internal_r+0x1d0c>
 400c6c4:	00bfdfc4 	movi	r2,-129
 400c6c8:	90a4703a 	and	r18,r18,r2
 400c6cc:	94800094 	ori	r18,r18,2
 400c6d0:	0039883a 	mov	fp,zero
 400c6d4:	d9003917 	ldw	r4,228(sp)
 400c6d8:	dc001e04 	addi	r16,sp,120
 400c6dc:	988003cc 	andi	r2,r19,15
 400c6e0:	b006973a 	slli	r3,r22,28
 400c6e4:	2085883a 	add	r2,r4,r2
 400c6e8:	9826d13a 	srli	r19,r19,4
 400c6ec:	10800003 	ldbu	r2,0(r2)
 400c6f0:	b02cd13a 	srli	r22,r22,4
 400c6f4:	843fffc4 	addi	r16,r16,-1
 400c6f8:	1ce6b03a 	or	r19,r3,r19
 400c6fc:	80800005 	stb	r2,0(r16)
 400c700:	9d84b03a 	or	r2,r19,r22
 400c704:	103ff51e 	bne	r2,zero,400c6dc <__alt_data_end+0xfc00c6dc>
 400c708:	d8c02817 	ldw	r3,160(sp)
 400c70c:	1c07c83a 	sub	r3,r3,r16
 400c710:	d8c02e15 	stw	r3,184(sp)
 400c714:	003ecc06 	br	400c248 <__alt_data_end+0xfc00c248>
 400c718:	18c03fcc 	andi	r3,r3,255
 400c71c:	183e9f26 	beq	r3,zero,400c19c <__alt_data_end+0xfc00c19c>
 400c720:	d9c02785 	stb	r7,158(sp)
 400c724:	003e9d06 	br	400c19c <__alt_data_end+0xfc00c19c>
 400c728:	00c00044 	movi	r3,1
 400c72c:	01c00ac4 	movi	r7,43
 400c730:	ac400007 	ldb	r17,0(r21)
 400c734:	003d5e06 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400c738:	94800814 	ori	r18,r18,32
 400c73c:	ac400007 	ldb	r17,0(r21)
 400c740:	003d5b06 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400c744:	d8c02d17 	ldw	r3,180(sp)
 400c748:	d8002785 	stb	zero,158(sp)
 400c74c:	1c000017 	ldw	r16,0(r3)
 400c750:	1cc00104 	addi	r19,r3,4
 400c754:	80041926 	beq	r16,zero,400d7bc <___vfprintf_internal_r+0x1c90>
 400c758:	d9002917 	ldw	r4,164(sp)
 400c75c:	2003d016 	blt	r4,zero,400d6a0 <___vfprintf_internal_r+0x1b74>
 400c760:	200d883a 	mov	r6,r4
 400c764:	000b883a 	mov	r5,zero
 400c768:	8009883a 	mov	r4,r16
 400c76c:	da003d15 	stw	r8,244(sp)
 400c770:	4010b300 	call	4010b30 <memchr>
 400c774:	da003d17 	ldw	r8,244(sp)
 400c778:	10045426 	beq	r2,zero,400d8cc <___vfprintf_internal_r+0x1da0>
 400c77c:	1405c83a 	sub	r2,r2,r16
 400c780:	d8802e15 	stw	r2,184(sp)
 400c784:	1003cc16 	blt	r2,zero,400d6b8 <___vfprintf_internal_r+0x1b8c>
 400c788:	df002783 	ldbu	fp,158(sp)
 400c78c:	d8802a15 	stw	r2,168(sp)
 400c790:	dcc02d15 	stw	r19,180(sp)
 400c794:	d8002915 	stw	zero,164(sp)
 400c798:	d8003215 	stw	zero,200(sp)
 400c79c:	003eb006 	br	400c260 <__alt_data_end+0xfc00c260>
 400c7a0:	18c03fcc 	andi	r3,r3,255
 400c7a4:	183f9b26 	beq	r3,zero,400c614 <__alt_data_end+0xfc00c614>
 400c7a8:	d9c02785 	stb	r7,158(sp)
 400c7ac:	003f9906 	br	400c614 <__alt_data_end+0xfc00c614>
 400c7b0:	18c03fcc 	andi	r3,r3,255
 400c7b4:	1805551e 	bne	r3,zero,400dd0c <___vfprintf_internal_r+0x21e0>
 400c7b8:	014100b4 	movhi	r5,1026
 400c7bc:	2969d504 	addi	r5,r5,-22700
 400c7c0:	d9403915 	stw	r5,228(sp)
 400c7c4:	9080080c 	andi	r2,r18,32
 400c7c8:	103fae1e 	bne	r2,zero,400c684 <__alt_data_end+0xfc00c684>
 400c7cc:	9080040c 	andi	r2,r18,16
 400c7d0:	1002de26 	beq	r2,zero,400d34c <___vfprintf_internal_r+0x1820>
 400c7d4:	d8c02d17 	ldw	r3,180(sp)
 400c7d8:	002d883a 	mov	r22,zero
 400c7dc:	1cc00017 	ldw	r19,0(r3)
 400c7e0:	18c00104 	addi	r3,r3,4
 400c7e4:	d8c02d15 	stw	r3,180(sp)
 400c7e8:	003fab06 	br	400c698 <__alt_data_end+0xfc00c698>
 400c7ec:	38803fcc 	andi	r2,r7,255
 400c7f0:	1080201c 	xori	r2,r2,128
 400c7f4:	10bfe004 	addi	r2,r2,-128
 400c7f8:	1002d21e 	bne	r2,zero,400d344 <___vfprintf_internal_r+0x1818>
 400c7fc:	00c00044 	movi	r3,1
 400c800:	01c00804 	movi	r7,32
 400c804:	ac400007 	ldb	r17,0(r21)
 400c808:	003d2906 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400c80c:	94800054 	ori	r18,r18,1
 400c810:	ac400007 	ldb	r17,0(r21)
 400c814:	003d2606 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400c818:	18c03fcc 	andi	r3,r3,255
 400c81c:	183e0526 	beq	r3,zero,400c034 <__alt_data_end+0xfc00c034>
 400c820:	d9c02785 	stb	r7,158(sp)
 400c824:	003e0306 	br	400c034 <__alt_data_end+0xfc00c034>
 400c828:	94801014 	ori	r18,r18,64
 400c82c:	ac400007 	ldb	r17,0(r21)
 400c830:	003d1f06 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400c834:	ac400007 	ldb	r17,0(r21)
 400c838:	8a438726 	beq	r17,r9,400d658 <___vfprintf_internal_r+0x1b2c>
 400c83c:	94800414 	ori	r18,r18,16
 400c840:	003d1b06 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400c844:	18c03fcc 	andi	r3,r3,255
 400c848:	1805341e 	bne	r3,zero,400dd1c <___vfprintf_internal_r+0x21f0>
 400c84c:	9080080c 	andi	r2,r18,32
 400c850:	1002cd26 	beq	r2,zero,400d388 <___vfprintf_internal_r+0x185c>
 400c854:	d9402d17 	ldw	r5,180(sp)
 400c858:	d9002f17 	ldw	r4,188(sp)
 400c85c:	28800017 	ldw	r2,0(r5)
 400c860:	2007d7fa 	srai	r3,r4,31
 400c864:	29400104 	addi	r5,r5,4
 400c868:	d9402d15 	stw	r5,180(sp)
 400c86c:	11000015 	stw	r4,0(r2)
 400c870:	10c00115 	stw	r3,4(r2)
 400c874:	003ce506 	br	400bc0c <__alt_data_end+0xfc00bc0c>
 400c878:	d8c02d17 	ldw	r3,180(sp)
 400c87c:	d9002d17 	ldw	r4,180(sp)
 400c880:	d8002785 	stb	zero,158(sp)
 400c884:	18800017 	ldw	r2,0(r3)
 400c888:	21000104 	addi	r4,r4,4
 400c88c:	00c00044 	movi	r3,1
 400c890:	d8c02a15 	stw	r3,168(sp)
 400c894:	d8801405 	stb	r2,80(sp)
 400c898:	d9002d15 	stw	r4,180(sp)
 400c89c:	d8c02e15 	stw	r3,184(sp)
 400c8a0:	d8002915 	stw	zero,164(sp)
 400c8a4:	d8003215 	stw	zero,200(sp)
 400c8a8:	dc001404 	addi	r16,sp,80
 400c8ac:	0039883a 	mov	fp,zero
 400c8b0:	003e7206 	br	400c27c <__alt_data_end+0xfc00c27c>
 400c8b4:	010100b4 	movhi	r4,1026
 400c8b8:	2129d504 	addi	r4,r4,-22700
 400c8bc:	0039883a 	mov	fp,zero
 400c8c0:	d9003915 	stw	r4,228(sp)
 400c8c4:	04401e04 	movi	r17,120
 400c8c8:	003f8206 	br	400c6d4 <__alt_data_end+0xfc00c6d4>
 400c8cc:	18c03fcc 	andi	r3,r3,255
 400c8d0:	1805061e 	bne	r3,zero,400dcec <___vfprintf_internal_r+0x21c0>
 400c8d4:	883d9126 	beq	r17,zero,400bf1c <__alt_data_end+0xfc00bf1c>
 400c8d8:	00c00044 	movi	r3,1
 400c8dc:	d8c02a15 	stw	r3,168(sp)
 400c8e0:	dc401405 	stb	r17,80(sp)
 400c8e4:	d8002785 	stb	zero,158(sp)
 400c8e8:	003fec06 	br	400c89c <__alt_data_end+0xfc00c89c>
 400c8ec:	014100b4 	movhi	r5,1026
 400c8f0:	2969d504 	addi	r5,r5,-22700
 400c8f4:	d9403915 	stw	r5,228(sp)
 400c8f8:	d8c02d15 	stw	r3,180(sp)
 400c8fc:	1025883a 	mov	r18,r2
 400c900:	04401e04 	movi	r17,120
 400c904:	9d84b03a 	or	r2,r19,r22
 400c908:	1000fc1e 	bne	r2,zero,400ccfc <___vfprintf_internal_r+0x11d0>
 400c90c:	0039883a 	mov	fp,zero
 400c910:	00800084 	movi	r2,2
 400c914:	10803fcc 	andi	r2,r2,255
 400c918:	00c00044 	movi	r3,1
 400c91c:	10c20f26 	beq	r2,r3,400d15c <___vfprintf_internal_r+0x1630>
 400c920:	00c00084 	movi	r3,2
 400c924:	10fd6326 	beq	r2,r3,400beb4 <__alt_data_end+0xfc00beb4>
 400c928:	003e2d06 	br	400c1e0 <__alt_data_end+0xfc00c1e0>
 400c92c:	d8c02017 	ldw	r3,128(sp)
 400c930:	003e9306 	br	400c380 <__alt_data_end+0xfc00c380>
 400c934:	00801944 	movi	r2,101
 400c938:	14407e0e 	bge	r2,r17,400cb34 <___vfprintf_internal_r+0x1008>
 400c93c:	d9003617 	ldw	r4,216(sp)
 400c940:	d9403817 	ldw	r5,224(sp)
 400c944:	000d883a 	mov	r6,zero
 400c948:	000f883a 	mov	r7,zero
 400c94c:	d8c03c15 	stw	r3,240(sp)
 400c950:	da003d15 	stw	r8,244(sp)
 400c954:	40160400 	call	4016040 <__eqdf2>
 400c958:	d8c03c17 	ldw	r3,240(sp)
 400c95c:	da003d17 	ldw	r8,244(sp)
 400c960:	1000f71e 	bne	r2,zero,400cd40 <___vfprintf_internal_r+0x1214>
 400c964:	d8801f17 	ldw	r2,124(sp)
 400c968:	010100b4 	movhi	r4,1026
 400c96c:	2129dc04 	addi	r4,r4,-22672
 400c970:	18c00044 	addi	r3,r3,1
 400c974:	10800044 	addi	r2,r2,1
 400c978:	41000015 	stw	r4,0(r8)
 400c97c:	01000044 	movi	r4,1
 400c980:	41000115 	stw	r4,4(r8)
 400c984:	d8c02015 	stw	r3,128(sp)
 400c988:	d8801f15 	stw	r2,124(sp)
 400c98c:	010001c4 	movi	r4,7
 400c990:	2082b816 	blt	r4,r2,400d474 <___vfprintf_internal_r+0x1948>
 400c994:	42000204 	addi	r8,r8,8
 400c998:	d8802617 	ldw	r2,152(sp)
 400c99c:	d9403317 	ldw	r5,204(sp)
 400c9a0:	11400216 	blt	r2,r5,400c9ac <___vfprintf_internal_r+0xe80>
 400c9a4:	9080004c 	andi	r2,r18,1
 400c9a8:	103ed526 	beq	r2,zero,400c500 <__alt_data_end+0xfc00c500>
 400c9ac:	d8803717 	ldw	r2,220(sp)
 400c9b0:	d9003417 	ldw	r4,208(sp)
 400c9b4:	d9403717 	ldw	r5,220(sp)
 400c9b8:	1887883a 	add	r3,r3,r2
 400c9bc:	d8801f17 	ldw	r2,124(sp)
 400c9c0:	41000015 	stw	r4,0(r8)
 400c9c4:	41400115 	stw	r5,4(r8)
 400c9c8:	10800044 	addi	r2,r2,1
 400c9cc:	d8c02015 	stw	r3,128(sp)
 400c9d0:	d8801f15 	stw	r2,124(sp)
 400c9d4:	010001c4 	movi	r4,7
 400c9d8:	20832916 	blt	r4,r2,400d680 <___vfprintf_internal_r+0x1b54>
 400c9dc:	42000204 	addi	r8,r8,8
 400c9e0:	d8803317 	ldw	r2,204(sp)
 400c9e4:	143fffc4 	addi	r16,r2,-1
 400c9e8:	043ec50e 	bge	zero,r16,400c500 <__alt_data_end+0xfc00c500>
 400c9ec:	04400404 	movi	r17,16
 400c9f0:	d8801f17 	ldw	r2,124(sp)
 400c9f4:	8c00880e 	bge	r17,r16,400cc18 <___vfprintf_internal_r+0x10ec>
 400c9f8:	014100b4 	movhi	r5,1026
 400c9fc:	2969dc84 	addi	r5,r5,-22670
 400ca00:	d9402b15 	stw	r5,172(sp)
 400ca04:	058001c4 	movi	r22,7
 400ca08:	dcc02c17 	ldw	r19,176(sp)
 400ca0c:	00000306 	br	400ca1c <___vfprintf_internal_r+0xef0>
 400ca10:	42000204 	addi	r8,r8,8
 400ca14:	843ffc04 	addi	r16,r16,-16
 400ca18:	8c00820e 	bge	r17,r16,400cc24 <___vfprintf_internal_r+0x10f8>
 400ca1c:	18c00404 	addi	r3,r3,16
 400ca20:	10800044 	addi	r2,r2,1
 400ca24:	45000015 	stw	r20,0(r8)
 400ca28:	44400115 	stw	r17,4(r8)
 400ca2c:	d8c02015 	stw	r3,128(sp)
 400ca30:	d8801f15 	stw	r2,124(sp)
 400ca34:	b0bff60e 	bge	r22,r2,400ca10 <__alt_data_end+0xfc00ca10>
 400ca38:	d9801e04 	addi	r6,sp,120
 400ca3c:	b80b883a 	mov	r5,r23
 400ca40:	9809883a 	mov	r4,r19
 400ca44:	401257c0 	call	401257c <__sprint_r>
 400ca48:	103d3a1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400ca4c:	d8c02017 	ldw	r3,128(sp)
 400ca50:	d8801f17 	ldw	r2,124(sp)
 400ca54:	da000404 	addi	r8,sp,16
 400ca58:	003fee06 	br	400ca14 <__alt_data_end+0xfc00ca14>
 400ca5c:	d9403117 	ldw	r5,196(sp)
 400ca60:	d8802a17 	ldw	r2,168(sp)
 400ca64:	28adc83a 	sub	r22,r5,r2
 400ca68:	05be630e 	bge	zero,r22,400c3f8 <__alt_data_end+0xfc00c3f8>
 400ca6c:	07000404 	movi	fp,16
 400ca70:	d8801f17 	ldw	r2,124(sp)
 400ca74:	e5838f0e 	bge	fp,r22,400d8b4 <___vfprintf_internal_r+0x1d88>
 400ca78:	014100b4 	movhi	r5,1026
 400ca7c:	2969dc84 	addi	r5,r5,-22670
 400ca80:	dc403015 	stw	r17,192(sp)
 400ca84:	d9402b15 	stw	r5,172(sp)
 400ca88:	b023883a 	mov	r17,r22
 400ca8c:	04c001c4 	movi	r19,7
 400ca90:	a82d883a 	mov	r22,r21
 400ca94:	902b883a 	mov	r21,r18
 400ca98:	8025883a 	mov	r18,r16
 400ca9c:	dc002c17 	ldw	r16,176(sp)
 400caa0:	00000306 	br	400cab0 <___vfprintf_internal_r+0xf84>
 400caa4:	8c7ffc04 	addi	r17,r17,-16
 400caa8:	42000204 	addi	r8,r8,8
 400caac:	e440110e 	bge	fp,r17,400caf4 <___vfprintf_internal_r+0xfc8>
 400cab0:	18c00404 	addi	r3,r3,16
 400cab4:	10800044 	addi	r2,r2,1
 400cab8:	45000015 	stw	r20,0(r8)
 400cabc:	47000115 	stw	fp,4(r8)
 400cac0:	d8c02015 	stw	r3,128(sp)
 400cac4:	d8801f15 	stw	r2,124(sp)
 400cac8:	98bff60e 	bge	r19,r2,400caa4 <__alt_data_end+0xfc00caa4>
 400cacc:	d9801e04 	addi	r6,sp,120
 400cad0:	b80b883a 	mov	r5,r23
 400cad4:	8009883a 	mov	r4,r16
 400cad8:	401257c0 	call	401257c <__sprint_r>
 400cadc:	103d151e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400cae0:	8c7ffc04 	addi	r17,r17,-16
 400cae4:	d8c02017 	ldw	r3,128(sp)
 400cae8:	d8801f17 	ldw	r2,124(sp)
 400caec:	da000404 	addi	r8,sp,16
 400caf0:	e47fef16 	blt	fp,r17,400cab0 <__alt_data_end+0xfc00cab0>
 400caf4:	9021883a 	mov	r16,r18
 400caf8:	a825883a 	mov	r18,r21
 400cafc:	b02b883a 	mov	r21,r22
 400cb00:	882d883a 	mov	r22,r17
 400cb04:	dc403017 	ldw	r17,192(sp)
 400cb08:	d9002b17 	ldw	r4,172(sp)
 400cb0c:	1d87883a 	add	r3,r3,r22
 400cb10:	10800044 	addi	r2,r2,1
 400cb14:	41000015 	stw	r4,0(r8)
 400cb18:	45800115 	stw	r22,4(r8)
 400cb1c:	d8c02015 	stw	r3,128(sp)
 400cb20:	d8801f15 	stw	r2,124(sp)
 400cb24:	010001c4 	movi	r4,7
 400cb28:	20818e16 	blt	r4,r2,400d164 <___vfprintf_internal_r+0x1638>
 400cb2c:	42000204 	addi	r8,r8,8
 400cb30:	003e3106 	br	400c3f8 <__alt_data_end+0xfc00c3f8>
 400cb34:	d9403317 	ldw	r5,204(sp)
 400cb38:	00800044 	movi	r2,1
 400cb3c:	18c00044 	addi	r3,r3,1
 400cb40:	1141530e 	bge	r2,r5,400d090 <___vfprintf_internal_r+0x1564>
 400cb44:	dc401f17 	ldw	r17,124(sp)
 400cb48:	00800044 	movi	r2,1
 400cb4c:	40800115 	stw	r2,4(r8)
 400cb50:	8c400044 	addi	r17,r17,1
 400cb54:	44000015 	stw	r16,0(r8)
 400cb58:	d8c02015 	stw	r3,128(sp)
 400cb5c:	dc401f15 	stw	r17,124(sp)
 400cb60:	008001c4 	movi	r2,7
 400cb64:	14416b16 	blt	r2,r17,400d114 <___vfprintf_internal_r+0x15e8>
 400cb68:	42000204 	addi	r8,r8,8
 400cb6c:	d8803717 	ldw	r2,220(sp)
 400cb70:	d9003417 	ldw	r4,208(sp)
 400cb74:	8c400044 	addi	r17,r17,1
 400cb78:	10c7883a 	add	r3,r2,r3
 400cb7c:	40800115 	stw	r2,4(r8)
 400cb80:	41000015 	stw	r4,0(r8)
 400cb84:	d8c02015 	stw	r3,128(sp)
 400cb88:	dc401f15 	stw	r17,124(sp)
 400cb8c:	008001c4 	movi	r2,7
 400cb90:	14416916 	blt	r2,r17,400d138 <___vfprintf_internal_r+0x160c>
 400cb94:	45800204 	addi	r22,r8,8
 400cb98:	d9003617 	ldw	r4,216(sp)
 400cb9c:	d9403817 	ldw	r5,224(sp)
 400cba0:	000d883a 	mov	r6,zero
 400cba4:	000f883a 	mov	r7,zero
 400cba8:	d8c03c15 	stw	r3,240(sp)
 400cbac:	40160400 	call	4016040 <__eqdf2>
 400cbb0:	d8c03c17 	ldw	r3,240(sp)
 400cbb4:	1000bc26 	beq	r2,zero,400cea8 <___vfprintf_internal_r+0x137c>
 400cbb8:	d9403317 	ldw	r5,204(sp)
 400cbbc:	84000044 	addi	r16,r16,1
 400cbc0:	8c400044 	addi	r17,r17,1
 400cbc4:	28bfffc4 	addi	r2,r5,-1
 400cbc8:	1887883a 	add	r3,r3,r2
 400cbcc:	b0800115 	stw	r2,4(r22)
 400cbd0:	b4000015 	stw	r16,0(r22)
 400cbd4:	d8c02015 	stw	r3,128(sp)
 400cbd8:	dc401f15 	stw	r17,124(sp)
 400cbdc:	008001c4 	movi	r2,7
 400cbe0:	14414316 	blt	r2,r17,400d0f0 <___vfprintf_internal_r+0x15c4>
 400cbe4:	b5800204 	addi	r22,r22,8
 400cbe8:	d9003a17 	ldw	r4,232(sp)
 400cbec:	df0022c4 	addi	fp,sp,139
 400cbf0:	8c400044 	addi	r17,r17,1
 400cbf4:	20c7883a 	add	r3,r4,r3
 400cbf8:	b7000015 	stw	fp,0(r22)
 400cbfc:	b1000115 	stw	r4,4(r22)
 400cc00:	d8c02015 	stw	r3,128(sp)
 400cc04:	dc401f15 	stw	r17,124(sp)
 400cc08:	008001c4 	movi	r2,7
 400cc0c:	14400e16 	blt	r2,r17,400cc48 <___vfprintf_internal_r+0x111c>
 400cc10:	b2000204 	addi	r8,r22,8
 400cc14:	003e3a06 	br	400c500 <__alt_data_end+0xfc00c500>
 400cc18:	010100b4 	movhi	r4,1026
 400cc1c:	2129dc84 	addi	r4,r4,-22670
 400cc20:	d9002b15 	stw	r4,172(sp)
 400cc24:	d9002b17 	ldw	r4,172(sp)
 400cc28:	1c07883a 	add	r3,r3,r16
 400cc2c:	44000115 	stw	r16,4(r8)
 400cc30:	41000015 	stw	r4,0(r8)
 400cc34:	10800044 	addi	r2,r2,1
 400cc38:	d8c02015 	stw	r3,128(sp)
 400cc3c:	d8801f15 	stw	r2,124(sp)
 400cc40:	010001c4 	movi	r4,7
 400cc44:	20be2d0e 	bge	r4,r2,400c4fc <__alt_data_end+0xfc00c4fc>
 400cc48:	d9002c17 	ldw	r4,176(sp)
 400cc4c:	d9801e04 	addi	r6,sp,120
 400cc50:	b80b883a 	mov	r5,r23
 400cc54:	401257c0 	call	401257c <__sprint_r>
 400cc58:	103cb61e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400cc5c:	d8c02017 	ldw	r3,128(sp)
 400cc60:	da000404 	addi	r8,sp,16
 400cc64:	003e2606 	br	400c500 <__alt_data_end+0xfc00c500>
 400cc68:	d9002c17 	ldw	r4,176(sp)
 400cc6c:	d9801e04 	addi	r6,sp,120
 400cc70:	b80b883a 	mov	r5,r23
 400cc74:	401257c0 	call	401257c <__sprint_r>
 400cc78:	103e5d26 	beq	r2,zero,400c5f0 <__alt_data_end+0xfc00c5f0>
 400cc7c:	003cad06 	br	400bf34 <__alt_data_end+0xfc00bf34>
 400cc80:	d9002c17 	ldw	r4,176(sp)
 400cc84:	d9801e04 	addi	r6,sp,120
 400cc88:	b80b883a 	mov	r5,r23
 400cc8c:	401257c0 	call	401257c <__sprint_r>
 400cc90:	103ca81e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400cc94:	d8c02017 	ldw	r3,128(sp)
 400cc98:	da000404 	addi	r8,sp,16
 400cc9c:	003e0b06 	br	400c4cc <__alt_data_end+0xfc00c4cc>
 400cca0:	d9002c17 	ldw	r4,176(sp)
 400cca4:	d9801e04 	addi	r6,sp,120
 400cca8:	b80b883a 	mov	r5,r23
 400ccac:	401257c0 	call	401257c <__sprint_r>
 400ccb0:	103ca01e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400ccb4:	d8c02017 	ldw	r3,128(sp)
 400ccb8:	da000404 	addi	r8,sp,16
 400ccbc:	003dbd06 	br	400c3b4 <__alt_data_end+0xfc00c3b4>
 400ccc0:	d9002c17 	ldw	r4,176(sp)
 400ccc4:	d9801e04 	addi	r6,sp,120
 400ccc8:	b80b883a 	mov	r5,r23
 400cccc:	401257c0 	call	401257c <__sprint_r>
 400ccd0:	103c981e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400ccd4:	d8c02017 	ldw	r3,128(sp)
 400ccd8:	da000404 	addi	r8,sp,16
 400ccdc:	003dc306 	br	400c3ec <__alt_data_end+0xfc00c3ec>
 400cce0:	d8802917 	ldw	r2,164(sp)
 400cce4:	d8002785 	stb	zero,158(sp)
 400cce8:	103f0616 	blt	r2,zero,400c904 <__alt_data_end+0xfc00c904>
 400ccec:	00ffdfc4 	movi	r3,-129
 400ccf0:	9d84b03a 	or	r2,r19,r22
 400ccf4:	90e4703a 	and	r18,r18,r3
 400ccf8:	103c6b26 	beq	r2,zero,400bea8 <__alt_data_end+0xfc00bea8>
 400ccfc:	0039883a 	mov	fp,zero
 400cd00:	003e7406 	br	400c6d4 <__alt_data_end+0xfc00c6d4>
 400cd04:	9080040c 	andi	r2,r18,16
 400cd08:	1001b326 	beq	r2,zero,400d3d8 <___vfprintf_internal_r+0x18ac>
 400cd0c:	d9002d17 	ldw	r4,180(sp)
 400cd10:	d9402917 	ldw	r5,164(sp)
 400cd14:	d8002785 	stb	zero,158(sp)
 400cd18:	20800104 	addi	r2,r4,4
 400cd1c:	24c00017 	ldw	r19,0(r4)
 400cd20:	002d883a 	mov	r22,zero
 400cd24:	2801b516 	blt	r5,zero,400d3fc <___vfprintf_internal_r+0x18d0>
 400cd28:	00ffdfc4 	movi	r3,-129
 400cd2c:	d8802d15 	stw	r2,180(sp)
 400cd30:	90e4703a 	and	r18,r18,r3
 400cd34:	983d2726 	beq	r19,zero,400c1d4 <__alt_data_end+0xfc00c1d4>
 400cd38:	0039883a 	mov	fp,zero
 400cd3c:	003d2a06 	br	400c1e8 <__alt_data_end+0xfc00c1e8>
 400cd40:	dc402617 	ldw	r17,152(sp)
 400cd44:	0441d30e 	bge	zero,r17,400d494 <___vfprintf_internal_r+0x1968>
 400cd48:	dc403217 	ldw	r17,200(sp)
 400cd4c:	d8803317 	ldw	r2,204(sp)
 400cd50:	1440010e 	bge	r2,r17,400cd58 <___vfprintf_internal_r+0x122c>
 400cd54:	1023883a 	mov	r17,r2
 400cd58:	04400a0e 	bge	zero,r17,400cd84 <___vfprintf_internal_r+0x1258>
 400cd5c:	d8801f17 	ldw	r2,124(sp)
 400cd60:	1c47883a 	add	r3,r3,r17
 400cd64:	44000015 	stw	r16,0(r8)
 400cd68:	10800044 	addi	r2,r2,1
 400cd6c:	44400115 	stw	r17,4(r8)
 400cd70:	d8c02015 	stw	r3,128(sp)
 400cd74:	d8801f15 	stw	r2,124(sp)
 400cd78:	010001c4 	movi	r4,7
 400cd7c:	20826516 	blt	r4,r2,400d714 <___vfprintf_internal_r+0x1be8>
 400cd80:	42000204 	addi	r8,r8,8
 400cd84:	88026116 	blt	r17,zero,400d70c <___vfprintf_internal_r+0x1be0>
 400cd88:	d9003217 	ldw	r4,200(sp)
 400cd8c:	2463c83a 	sub	r17,r4,r17
 400cd90:	04407b0e 	bge	zero,r17,400cf80 <___vfprintf_internal_r+0x1454>
 400cd94:	05800404 	movi	r22,16
 400cd98:	d8801f17 	ldw	r2,124(sp)
 400cd9c:	b4419d0e 	bge	r22,r17,400d414 <___vfprintf_internal_r+0x18e8>
 400cda0:	010100b4 	movhi	r4,1026
 400cda4:	2129dc84 	addi	r4,r4,-22670
 400cda8:	d9002b15 	stw	r4,172(sp)
 400cdac:	070001c4 	movi	fp,7
 400cdb0:	dcc02c17 	ldw	r19,176(sp)
 400cdb4:	00000306 	br	400cdc4 <___vfprintf_internal_r+0x1298>
 400cdb8:	42000204 	addi	r8,r8,8
 400cdbc:	8c7ffc04 	addi	r17,r17,-16
 400cdc0:	b441970e 	bge	r22,r17,400d420 <___vfprintf_internal_r+0x18f4>
 400cdc4:	18c00404 	addi	r3,r3,16
 400cdc8:	10800044 	addi	r2,r2,1
 400cdcc:	45000015 	stw	r20,0(r8)
 400cdd0:	45800115 	stw	r22,4(r8)
 400cdd4:	d8c02015 	stw	r3,128(sp)
 400cdd8:	d8801f15 	stw	r2,124(sp)
 400cddc:	e0bff60e 	bge	fp,r2,400cdb8 <__alt_data_end+0xfc00cdb8>
 400cde0:	d9801e04 	addi	r6,sp,120
 400cde4:	b80b883a 	mov	r5,r23
 400cde8:	9809883a 	mov	r4,r19
 400cdec:	401257c0 	call	401257c <__sprint_r>
 400cdf0:	103c501e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400cdf4:	d8c02017 	ldw	r3,128(sp)
 400cdf8:	d8801f17 	ldw	r2,124(sp)
 400cdfc:	da000404 	addi	r8,sp,16
 400ce00:	003fee06 	br	400cdbc <__alt_data_end+0xfc00cdbc>
 400ce04:	d9002c17 	ldw	r4,176(sp)
 400ce08:	d9801e04 	addi	r6,sp,120
 400ce0c:	b80b883a 	mov	r5,r23
 400ce10:	401257c0 	call	401257c <__sprint_r>
 400ce14:	103c471e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400ce18:	d8c02017 	ldw	r3,128(sp)
 400ce1c:	df002787 	ldb	fp,158(sp)
 400ce20:	da000404 	addi	r8,sp,16
 400ce24:	003d5606 	br	400c380 <__alt_data_end+0xfc00c380>
 400ce28:	9080040c 	andi	r2,r18,16
 400ce2c:	10016126 	beq	r2,zero,400d3b4 <___vfprintf_internal_r+0x1888>
 400ce30:	d8802d17 	ldw	r2,180(sp)
 400ce34:	14c00017 	ldw	r19,0(r2)
 400ce38:	10800104 	addi	r2,r2,4
 400ce3c:	d8802d15 	stw	r2,180(sp)
 400ce40:	982dd7fa 	srai	r22,r19,31
 400ce44:	b005883a 	mov	r2,r22
 400ce48:	003c8206 	br	400c054 <__alt_data_end+0xfc00c054>
 400ce4c:	9080040c 	andi	r2,r18,16
 400ce50:	10003526 	beq	r2,zero,400cf28 <___vfprintf_internal_r+0x13fc>
 400ce54:	d9402d17 	ldw	r5,180(sp)
 400ce58:	d8c02917 	ldw	r3,164(sp)
 400ce5c:	d8002785 	stb	zero,158(sp)
 400ce60:	28800104 	addi	r2,r5,4
 400ce64:	2cc00017 	ldw	r19,0(r5)
 400ce68:	002d883a 	mov	r22,zero
 400ce6c:	18003716 	blt	r3,zero,400cf4c <___vfprintf_internal_r+0x1420>
 400ce70:	00ffdfc4 	movi	r3,-129
 400ce74:	d8802d15 	stw	r2,180(sp)
 400ce78:	90e4703a 	and	r18,r18,r3
 400ce7c:	0039883a 	mov	fp,zero
 400ce80:	983df326 	beq	r19,zero,400c650 <__alt_data_end+0xfc00c650>
 400ce84:	00800244 	movi	r2,9
 400ce88:	14fc7b36 	bltu	r2,r19,400c078 <__alt_data_end+0xfc00c078>
 400ce8c:	d8c02817 	ldw	r3,160(sp)
 400ce90:	dc001dc4 	addi	r16,sp,119
 400ce94:	9cc00c04 	addi	r19,r19,48
 400ce98:	1c07c83a 	sub	r3,r3,r16
 400ce9c:	dcc01dc5 	stb	r19,119(sp)
 400cea0:	d8c02e15 	stw	r3,184(sp)
 400cea4:	003ce806 	br	400c248 <__alt_data_end+0xfc00c248>
 400cea8:	d8803317 	ldw	r2,204(sp)
 400ceac:	143fffc4 	addi	r16,r2,-1
 400ceb0:	043f4d0e 	bge	zero,r16,400cbe8 <__alt_data_end+0xfc00cbe8>
 400ceb4:	07000404 	movi	fp,16
 400ceb8:	e400810e 	bge	fp,r16,400d0c0 <___vfprintf_internal_r+0x1594>
 400cebc:	014100b4 	movhi	r5,1026
 400cec0:	2969dc84 	addi	r5,r5,-22670
 400cec4:	d9402b15 	stw	r5,172(sp)
 400cec8:	01c001c4 	movi	r7,7
 400cecc:	dcc02c17 	ldw	r19,176(sp)
 400ced0:	00000306 	br	400cee0 <___vfprintf_internal_r+0x13b4>
 400ced4:	b5800204 	addi	r22,r22,8
 400ced8:	843ffc04 	addi	r16,r16,-16
 400cedc:	e4007b0e 	bge	fp,r16,400d0cc <___vfprintf_internal_r+0x15a0>
 400cee0:	18c00404 	addi	r3,r3,16
 400cee4:	8c400044 	addi	r17,r17,1
 400cee8:	b5000015 	stw	r20,0(r22)
 400ceec:	b7000115 	stw	fp,4(r22)
 400cef0:	d8c02015 	stw	r3,128(sp)
 400cef4:	dc401f15 	stw	r17,124(sp)
 400cef8:	3c7ff60e 	bge	r7,r17,400ced4 <__alt_data_end+0xfc00ced4>
 400cefc:	d9801e04 	addi	r6,sp,120
 400cf00:	b80b883a 	mov	r5,r23
 400cf04:	9809883a 	mov	r4,r19
 400cf08:	d9c03c15 	stw	r7,240(sp)
 400cf0c:	401257c0 	call	401257c <__sprint_r>
 400cf10:	d9c03c17 	ldw	r7,240(sp)
 400cf14:	103c071e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400cf18:	d8c02017 	ldw	r3,128(sp)
 400cf1c:	dc401f17 	ldw	r17,124(sp)
 400cf20:	dd800404 	addi	r22,sp,16
 400cf24:	003fec06 	br	400ced8 <__alt_data_end+0xfc00ced8>
 400cf28:	9080100c 	andi	r2,r18,64
 400cf2c:	d8002785 	stb	zero,158(sp)
 400cf30:	10010e26 	beq	r2,zero,400d36c <___vfprintf_internal_r+0x1840>
 400cf34:	d9002d17 	ldw	r4,180(sp)
 400cf38:	d9402917 	ldw	r5,164(sp)
 400cf3c:	002d883a 	mov	r22,zero
 400cf40:	20800104 	addi	r2,r4,4
 400cf44:	24c0000b 	ldhu	r19,0(r4)
 400cf48:	283fc90e 	bge	r5,zero,400ce70 <__alt_data_end+0xfc00ce70>
 400cf4c:	d8802d15 	stw	r2,180(sp)
 400cf50:	0039883a 	mov	fp,zero
 400cf54:	9d84b03a 	or	r2,r19,r22
 400cf58:	103c461e 	bne	r2,zero,400c074 <__alt_data_end+0xfc00c074>
 400cf5c:	00800044 	movi	r2,1
 400cf60:	003e6c06 	br	400c914 <__alt_data_end+0xfc00c914>
 400cf64:	d9002c17 	ldw	r4,176(sp)
 400cf68:	d9801e04 	addi	r6,sp,120
 400cf6c:	b80b883a 	mov	r5,r23
 400cf70:	401257c0 	call	401257c <__sprint_r>
 400cf74:	103bef1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400cf78:	d8c02017 	ldw	r3,128(sp)
 400cf7c:	da000404 	addi	r8,sp,16
 400cf80:	d9003217 	ldw	r4,200(sp)
 400cf84:	d8802617 	ldw	r2,152(sp)
 400cf88:	d9403317 	ldw	r5,204(sp)
 400cf8c:	8123883a 	add	r17,r16,r4
 400cf90:	11400216 	blt	r2,r5,400cf9c <___vfprintf_internal_r+0x1470>
 400cf94:	9100004c 	andi	r4,r18,1
 400cf98:	20000d26 	beq	r4,zero,400cfd0 <___vfprintf_internal_r+0x14a4>
 400cf9c:	d9003717 	ldw	r4,220(sp)
 400cfa0:	d9403417 	ldw	r5,208(sp)
 400cfa4:	1907883a 	add	r3,r3,r4
 400cfa8:	d9001f17 	ldw	r4,124(sp)
 400cfac:	41400015 	stw	r5,0(r8)
 400cfb0:	d9403717 	ldw	r5,220(sp)
 400cfb4:	21000044 	addi	r4,r4,1
 400cfb8:	d8c02015 	stw	r3,128(sp)
 400cfbc:	41400115 	stw	r5,4(r8)
 400cfc0:	d9001f15 	stw	r4,124(sp)
 400cfc4:	014001c4 	movi	r5,7
 400cfc8:	2901e816 	blt	r5,r4,400d76c <___vfprintf_internal_r+0x1c40>
 400cfcc:	42000204 	addi	r8,r8,8
 400cfd0:	d9003317 	ldw	r4,204(sp)
 400cfd4:	8121883a 	add	r16,r16,r4
 400cfd8:	2085c83a 	sub	r2,r4,r2
 400cfdc:	8461c83a 	sub	r16,r16,r17
 400cfe0:	1400010e 	bge	r2,r16,400cfe8 <___vfprintf_internal_r+0x14bc>
 400cfe4:	1021883a 	mov	r16,r2
 400cfe8:	04000a0e 	bge	zero,r16,400d014 <___vfprintf_internal_r+0x14e8>
 400cfec:	d9001f17 	ldw	r4,124(sp)
 400cff0:	1c07883a 	add	r3,r3,r16
 400cff4:	44400015 	stw	r17,0(r8)
 400cff8:	21000044 	addi	r4,r4,1
 400cffc:	44000115 	stw	r16,4(r8)
 400d000:	d8c02015 	stw	r3,128(sp)
 400d004:	d9001f15 	stw	r4,124(sp)
 400d008:	014001c4 	movi	r5,7
 400d00c:	2901fb16 	blt	r5,r4,400d7fc <___vfprintf_internal_r+0x1cd0>
 400d010:	42000204 	addi	r8,r8,8
 400d014:	8001f716 	blt	r16,zero,400d7f4 <___vfprintf_internal_r+0x1cc8>
 400d018:	1421c83a 	sub	r16,r2,r16
 400d01c:	043d380e 	bge	zero,r16,400c500 <__alt_data_end+0xfc00c500>
 400d020:	04400404 	movi	r17,16
 400d024:	d8801f17 	ldw	r2,124(sp)
 400d028:	8c3efb0e 	bge	r17,r16,400cc18 <__alt_data_end+0xfc00cc18>
 400d02c:	014100b4 	movhi	r5,1026
 400d030:	2969dc84 	addi	r5,r5,-22670
 400d034:	d9402b15 	stw	r5,172(sp)
 400d038:	058001c4 	movi	r22,7
 400d03c:	dcc02c17 	ldw	r19,176(sp)
 400d040:	00000306 	br	400d050 <___vfprintf_internal_r+0x1524>
 400d044:	42000204 	addi	r8,r8,8
 400d048:	843ffc04 	addi	r16,r16,-16
 400d04c:	8c3ef50e 	bge	r17,r16,400cc24 <__alt_data_end+0xfc00cc24>
 400d050:	18c00404 	addi	r3,r3,16
 400d054:	10800044 	addi	r2,r2,1
 400d058:	45000015 	stw	r20,0(r8)
 400d05c:	44400115 	stw	r17,4(r8)
 400d060:	d8c02015 	stw	r3,128(sp)
 400d064:	d8801f15 	stw	r2,124(sp)
 400d068:	b0bff60e 	bge	r22,r2,400d044 <__alt_data_end+0xfc00d044>
 400d06c:	d9801e04 	addi	r6,sp,120
 400d070:	b80b883a 	mov	r5,r23
 400d074:	9809883a 	mov	r4,r19
 400d078:	401257c0 	call	401257c <__sprint_r>
 400d07c:	103bad1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d080:	d8c02017 	ldw	r3,128(sp)
 400d084:	d8801f17 	ldw	r2,124(sp)
 400d088:	da000404 	addi	r8,sp,16
 400d08c:	003fee06 	br	400d048 <__alt_data_end+0xfc00d048>
 400d090:	9088703a 	and	r4,r18,r2
 400d094:	203eab1e 	bne	r4,zero,400cb44 <__alt_data_end+0xfc00cb44>
 400d098:	dc401f17 	ldw	r17,124(sp)
 400d09c:	40800115 	stw	r2,4(r8)
 400d0a0:	44000015 	stw	r16,0(r8)
 400d0a4:	8c400044 	addi	r17,r17,1
 400d0a8:	d8c02015 	stw	r3,128(sp)
 400d0ac:	dc401f15 	stw	r17,124(sp)
 400d0b0:	008001c4 	movi	r2,7
 400d0b4:	14400e16 	blt	r2,r17,400d0f0 <___vfprintf_internal_r+0x15c4>
 400d0b8:	45800204 	addi	r22,r8,8
 400d0bc:	003eca06 	br	400cbe8 <__alt_data_end+0xfc00cbe8>
 400d0c0:	010100b4 	movhi	r4,1026
 400d0c4:	2129dc84 	addi	r4,r4,-22670
 400d0c8:	d9002b15 	stw	r4,172(sp)
 400d0cc:	d8802b17 	ldw	r2,172(sp)
 400d0d0:	1c07883a 	add	r3,r3,r16
 400d0d4:	8c400044 	addi	r17,r17,1
 400d0d8:	b0800015 	stw	r2,0(r22)
 400d0dc:	b4000115 	stw	r16,4(r22)
 400d0e0:	d8c02015 	stw	r3,128(sp)
 400d0e4:	dc401f15 	stw	r17,124(sp)
 400d0e8:	008001c4 	movi	r2,7
 400d0ec:	147ebd0e 	bge	r2,r17,400cbe4 <__alt_data_end+0xfc00cbe4>
 400d0f0:	d9002c17 	ldw	r4,176(sp)
 400d0f4:	d9801e04 	addi	r6,sp,120
 400d0f8:	b80b883a 	mov	r5,r23
 400d0fc:	401257c0 	call	401257c <__sprint_r>
 400d100:	103b8c1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d104:	d8c02017 	ldw	r3,128(sp)
 400d108:	dc401f17 	ldw	r17,124(sp)
 400d10c:	dd800404 	addi	r22,sp,16
 400d110:	003eb506 	br	400cbe8 <__alt_data_end+0xfc00cbe8>
 400d114:	d9002c17 	ldw	r4,176(sp)
 400d118:	d9801e04 	addi	r6,sp,120
 400d11c:	b80b883a 	mov	r5,r23
 400d120:	401257c0 	call	401257c <__sprint_r>
 400d124:	103b831e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d128:	d8c02017 	ldw	r3,128(sp)
 400d12c:	dc401f17 	ldw	r17,124(sp)
 400d130:	da000404 	addi	r8,sp,16
 400d134:	003e8d06 	br	400cb6c <__alt_data_end+0xfc00cb6c>
 400d138:	d9002c17 	ldw	r4,176(sp)
 400d13c:	d9801e04 	addi	r6,sp,120
 400d140:	b80b883a 	mov	r5,r23
 400d144:	401257c0 	call	401257c <__sprint_r>
 400d148:	103b7a1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d14c:	d8c02017 	ldw	r3,128(sp)
 400d150:	dc401f17 	ldw	r17,124(sp)
 400d154:	dd800404 	addi	r22,sp,16
 400d158:	003e8f06 	br	400cb98 <__alt_data_end+0xfc00cb98>
 400d15c:	0027883a 	mov	r19,zero
 400d160:	003f4a06 	br	400ce8c <__alt_data_end+0xfc00ce8c>
 400d164:	d9002c17 	ldw	r4,176(sp)
 400d168:	d9801e04 	addi	r6,sp,120
 400d16c:	b80b883a 	mov	r5,r23
 400d170:	401257c0 	call	401257c <__sprint_r>
 400d174:	103b6f1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d178:	d8c02017 	ldw	r3,128(sp)
 400d17c:	da000404 	addi	r8,sp,16
 400d180:	003c9d06 	br	400c3f8 <__alt_data_end+0xfc00c3f8>
 400d184:	04e7c83a 	sub	r19,zero,r19
 400d188:	9804c03a 	cmpne	r2,r19,zero
 400d18c:	05adc83a 	sub	r22,zero,r22
 400d190:	b0adc83a 	sub	r22,r22,r2
 400d194:	d8802917 	ldw	r2,164(sp)
 400d198:	07000b44 	movi	fp,45
 400d19c:	df002785 	stb	fp,158(sp)
 400d1a0:	10017b16 	blt	r2,zero,400d790 <___vfprintf_internal_r+0x1c64>
 400d1a4:	00bfdfc4 	movi	r2,-129
 400d1a8:	90a4703a 	and	r18,r18,r2
 400d1ac:	003bb106 	br	400c074 <__alt_data_end+0xfc00c074>
 400d1b0:	d9003617 	ldw	r4,216(sp)
 400d1b4:	d9403817 	ldw	r5,224(sp)
 400d1b8:	da003d15 	stw	r8,244(sp)
 400d1bc:	40122d00 	call	40122d0 <__fpclassifyd>
 400d1c0:	da003d17 	ldw	r8,244(sp)
 400d1c4:	1000f026 	beq	r2,zero,400d588 <___vfprintf_internal_r+0x1a5c>
 400d1c8:	d9002917 	ldw	r4,164(sp)
 400d1cc:	05bff7c4 	movi	r22,-33
 400d1d0:	00bfffc4 	movi	r2,-1
 400d1d4:	8dac703a 	and	r22,r17,r22
 400d1d8:	20820026 	beq	r4,r2,400d9dc <___vfprintf_internal_r+0x1eb0>
 400d1dc:	008011c4 	movi	r2,71
 400d1e0:	b081f726 	beq	r22,r2,400d9c0 <___vfprintf_internal_r+0x1e94>
 400d1e4:	d9003817 	ldw	r4,224(sp)
 400d1e8:	90c04014 	ori	r3,r18,256
 400d1ec:	d8c02b15 	stw	r3,172(sp)
 400d1f0:	20021516 	blt	r4,zero,400da48 <___vfprintf_internal_r+0x1f1c>
 400d1f4:	dcc03817 	ldw	r19,224(sp)
 400d1f8:	d8002a05 	stb	zero,168(sp)
 400d1fc:	00801984 	movi	r2,102
 400d200:	8881f926 	beq	r17,r2,400d9e8 <___vfprintf_internal_r+0x1ebc>
 400d204:	00801184 	movi	r2,70
 400d208:	88821c26 	beq	r17,r2,400da7c <___vfprintf_internal_r+0x1f50>
 400d20c:	00801144 	movi	r2,69
 400d210:	b081ef26 	beq	r22,r2,400d9d0 <___vfprintf_internal_r+0x1ea4>
 400d214:	d8c02917 	ldw	r3,164(sp)
 400d218:	d8802104 	addi	r2,sp,132
 400d21c:	d8800315 	stw	r2,12(sp)
 400d220:	d9403617 	ldw	r5,216(sp)
 400d224:	d8802504 	addi	r2,sp,148
 400d228:	d9002c17 	ldw	r4,176(sp)
 400d22c:	d8800215 	stw	r2,8(sp)
 400d230:	d8802604 	addi	r2,sp,152
 400d234:	d8c00015 	stw	r3,0(sp)
 400d238:	d8800115 	stw	r2,4(sp)
 400d23c:	01c00084 	movi	r7,2
 400d240:	980d883a 	mov	r6,r19
 400d244:	d8c03c15 	stw	r3,240(sp)
 400d248:	da003d15 	stw	r8,244(sp)
 400d24c:	400e1500 	call	400e150 <_dtoa_r>
 400d250:	1021883a 	mov	r16,r2
 400d254:	008019c4 	movi	r2,103
 400d258:	d8c03c17 	ldw	r3,240(sp)
 400d25c:	da003d17 	ldw	r8,244(sp)
 400d260:	88817126 	beq	r17,r2,400d828 <___vfprintf_internal_r+0x1cfc>
 400d264:	008011c4 	movi	r2,71
 400d268:	88829226 	beq	r17,r2,400dcb4 <___vfprintf_internal_r+0x2188>
 400d26c:	80f9883a 	add	fp,r16,r3
 400d270:	d9003617 	ldw	r4,216(sp)
 400d274:	000d883a 	mov	r6,zero
 400d278:	000f883a 	mov	r7,zero
 400d27c:	980b883a 	mov	r5,r19
 400d280:	da003d15 	stw	r8,244(sp)
 400d284:	40160400 	call	4016040 <__eqdf2>
 400d288:	da003d17 	ldw	r8,244(sp)
 400d28c:	10018d26 	beq	r2,zero,400d8c4 <___vfprintf_internal_r+0x1d98>
 400d290:	d8802117 	ldw	r2,132(sp)
 400d294:	1700062e 	bgeu	r2,fp,400d2b0 <___vfprintf_internal_r+0x1784>
 400d298:	01000c04 	movi	r4,48
 400d29c:	10c00044 	addi	r3,r2,1
 400d2a0:	d8c02115 	stw	r3,132(sp)
 400d2a4:	11000005 	stb	r4,0(r2)
 400d2a8:	d8802117 	ldw	r2,132(sp)
 400d2ac:	173ffb36 	bltu	r2,fp,400d29c <__alt_data_end+0xfc00d29c>
 400d2b0:	1405c83a 	sub	r2,r2,r16
 400d2b4:	d8803315 	stw	r2,204(sp)
 400d2b8:	008011c4 	movi	r2,71
 400d2bc:	b0817626 	beq	r22,r2,400d898 <___vfprintf_internal_r+0x1d6c>
 400d2c0:	00801944 	movi	r2,101
 400d2c4:	1442810e 	bge	r2,r17,400dccc <___vfprintf_internal_r+0x21a0>
 400d2c8:	d8c02617 	ldw	r3,152(sp)
 400d2cc:	00801984 	movi	r2,102
 400d2d0:	d8c03215 	stw	r3,200(sp)
 400d2d4:	8881fe26 	beq	r17,r2,400dad0 <___vfprintf_internal_r+0x1fa4>
 400d2d8:	d8c03217 	ldw	r3,200(sp)
 400d2dc:	d9003317 	ldw	r4,204(sp)
 400d2e0:	1901dd16 	blt	r3,r4,400da58 <___vfprintf_internal_r+0x1f2c>
 400d2e4:	9480004c 	andi	r18,r18,1
 400d2e8:	90022b1e 	bne	r18,zero,400db98 <___vfprintf_internal_r+0x206c>
 400d2ec:	1805883a 	mov	r2,r3
 400d2f0:	18028016 	blt	r3,zero,400dcf4 <___vfprintf_internal_r+0x21c8>
 400d2f4:	d8c03217 	ldw	r3,200(sp)
 400d2f8:	044019c4 	movi	r17,103
 400d2fc:	d8c02e15 	stw	r3,184(sp)
 400d300:	df002a07 	ldb	fp,168(sp)
 400d304:	e001531e 	bne	fp,zero,400d854 <___vfprintf_internal_r+0x1d28>
 400d308:	df002783 	ldbu	fp,158(sp)
 400d30c:	d8802a15 	stw	r2,168(sp)
 400d310:	dc802b17 	ldw	r18,172(sp)
 400d314:	d8002915 	stw	zero,164(sp)
 400d318:	003bd106 	br	400c260 <__alt_data_end+0xfc00c260>
 400d31c:	d8802d17 	ldw	r2,180(sp)
 400d320:	d8c02d17 	ldw	r3,180(sp)
 400d324:	d9002d17 	ldw	r4,180(sp)
 400d328:	10800017 	ldw	r2,0(r2)
 400d32c:	18c00117 	ldw	r3,4(r3)
 400d330:	21000204 	addi	r4,r4,8
 400d334:	d8803615 	stw	r2,216(sp)
 400d338:	d8c03815 	stw	r3,224(sp)
 400d33c:	d9002d15 	stw	r4,180(sp)
 400d340:	003b7506 	br	400c118 <__alt_data_end+0xfc00c118>
 400d344:	ac400007 	ldb	r17,0(r21)
 400d348:	003a5906 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400d34c:	9080100c 	andi	r2,r18,64
 400d350:	1000a826 	beq	r2,zero,400d5f4 <___vfprintf_internal_r+0x1ac8>
 400d354:	d9002d17 	ldw	r4,180(sp)
 400d358:	002d883a 	mov	r22,zero
 400d35c:	24c0000b 	ldhu	r19,0(r4)
 400d360:	21000104 	addi	r4,r4,4
 400d364:	d9002d15 	stw	r4,180(sp)
 400d368:	003ccb06 	br	400c698 <__alt_data_end+0xfc00c698>
 400d36c:	d8c02d17 	ldw	r3,180(sp)
 400d370:	d9002917 	ldw	r4,164(sp)
 400d374:	002d883a 	mov	r22,zero
 400d378:	18800104 	addi	r2,r3,4
 400d37c:	1cc00017 	ldw	r19,0(r3)
 400d380:	203ebb0e 	bge	r4,zero,400ce70 <__alt_data_end+0xfc00ce70>
 400d384:	003ef106 	br	400cf4c <__alt_data_end+0xfc00cf4c>
 400d388:	9080040c 	andi	r2,r18,16
 400d38c:	1000921e 	bne	r2,zero,400d5d8 <___vfprintf_internal_r+0x1aac>
 400d390:	9480100c 	andi	r18,r18,64
 400d394:	90013926 	beq	r18,zero,400d87c <___vfprintf_internal_r+0x1d50>
 400d398:	d9002d17 	ldw	r4,180(sp)
 400d39c:	d9402f17 	ldw	r5,188(sp)
 400d3a0:	20800017 	ldw	r2,0(r4)
 400d3a4:	21000104 	addi	r4,r4,4
 400d3a8:	d9002d15 	stw	r4,180(sp)
 400d3ac:	1140000d 	sth	r5,0(r2)
 400d3b0:	003a1606 	br	400bc0c <__alt_data_end+0xfc00bc0c>
 400d3b4:	9080100c 	andi	r2,r18,64
 400d3b8:	10008026 	beq	r2,zero,400d5bc <___vfprintf_internal_r+0x1a90>
 400d3bc:	d8c02d17 	ldw	r3,180(sp)
 400d3c0:	1cc0000f 	ldh	r19,0(r3)
 400d3c4:	18c00104 	addi	r3,r3,4
 400d3c8:	d8c02d15 	stw	r3,180(sp)
 400d3cc:	982dd7fa 	srai	r22,r19,31
 400d3d0:	b005883a 	mov	r2,r22
 400d3d4:	003b1f06 	br	400c054 <__alt_data_end+0xfc00c054>
 400d3d8:	9080100c 	andi	r2,r18,64
 400d3dc:	d8002785 	stb	zero,158(sp)
 400d3e0:	10008a1e 	bne	r2,zero,400d60c <___vfprintf_internal_r+0x1ae0>
 400d3e4:	d9402d17 	ldw	r5,180(sp)
 400d3e8:	d8c02917 	ldw	r3,164(sp)
 400d3ec:	002d883a 	mov	r22,zero
 400d3f0:	28800104 	addi	r2,r5,4
 400d3f4:	2cc00017 	ldw	r19,0(r5)
 400d3f8:	183e4b0e 	bge	r3,zero,400cd28 <__alt_data_end+0xfc00cd28>
 400d3fc:	9d86b03a 	or	r3,r19,r22
 400d400:	d8802d15 	stw	r2,180(sp)
 400d404:	183e4c1e 	bne	r3,zero,400cd38 <__alt_data_end+0xfc00cd38>
 400d408:	0039883a 	mov	fp,zero
 400d40c:	0005883a 	mov	r2,zero
 400d410:	003d4006 	br	400c914 <__alt_data_end+0xfc00c914>
 400d414:	014100b4 	movhi	r5,1026
 400d418:	2969dc84 	addi	r5,r5,-22670
 400d41c:	d9402b15 	stw	r5,172(sp)
 400d420:	d9402b17 	ldw	r5,172(sp)
 400d424:	1c47883a 	add	r3,r3,r17
 400d428:	10800044 	addi	r2,r2,1
 400d42c:	41400015 	stw	r5,0(r8)
 400d430:	44400115 	stw	r17,4(r8)
 400d434:	d8c02015 	stw	r3,128(sp)
 400d438:	d8801f15 	stw	r2,124(sp)
 400d43c:	010001c4 	movi	r4,7
 400d440:	20bec816 	blt	r4,r2,400cf64 <__alt_data_end+0xfc00cf64>
 400d444:	42000204 	addi	r8,r8,8
 400d448:	003ecd06 	br	400cf80 <__alt_data_end+0xfc00cf80>
 400d44c:	d9002917 	ldw	r4,164(sp)
 400d450:	d8002785 	stb	zero,158(sp)
 400d454:	203d2d16 	blt	r4,zero,400c90c <__alt_data_end+0xfc00c90c>
 400d458:	00bfdfc4 	movi	r2,-129
 400d45c:	90a4703a 	and	r18,r18,r2
 400d460:	003a9106 	br	400bea8 <__alt_data_end+0xfc00bea8>
 400d464:	010100b4 	movhi	r4,1026
 400d468:	2129dc84 	addi	r4,r4,-22670
 400d46c:	d9002b15 	stw	r4,172(sp)
 400d470:	003c0c06 	br	400c4a4 <__alt_data_end+0xfc00c4a4>
 400d474:	d9002c17 	ldw	r4,176(sp)
 400d478:	d9801e04 	addi	r6,sp,120
 400d47c:	b80b883a 	mov	r5,r23
 400d480:	401257c0 	call	401257c <__sprint_r>
 400d484:	103aab1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d488:	d8c02017 	ldw	r3,128(sp)
 400d48c:	da000404 	addi	r8,sp,16
 400d490:	003d4106 	br	400c998 <__alt_data_end+0xfc00c998>
 400d494:	d8801f17 	ldw	r2,124(sp)
 400d498:	014100b4 	movhi	r5,1026
 400d49c:	01000044 	movi	r4,1
 400d4a0:	18c00044 	addi	r3,r3,1
 400d4a4:	10800044 	addi	r2,r2,1
 400d4a8:	2969dc04 	addi	r5,r5,-22672
 400d4ac:	41000115 	stw	r4,4(r8)
 400d4b0:	41400015 	stw	r5,0(r8)
 400d4b4:	d8c02015 	stw	r3,128(sp)
 400d4b8:	d8801f15 	stw	r2,124(sp)
 400d4bc:	010001c4 	movi	r4,7
 400d4c0:	20805c16 	blt	r4,r2,400d634 <___vfprintf_internal_r+0x1b08>
 400d4c4:	42000204 	addi	r8,r8,8
 400d4c8:	8800041e 	bne	r17,zero,400d4dc <___vfprintf_internal_r+0x19b0>
 400d4cc:	d8803317 	ldw	r2,204(sp)
 400d4d0:	1000021e 	bne	r2,zero,400d4dc <___vfprintf_internal_r+0x19b0>
 400d4d4:	9080004c 	andi	r2,r18,1
 400d4d8:	103c0926 	beq	r2,zero,400c500 <__alt_data_end+0xfc00c500>
 400d4dc:	d9003717 	ldw	r4,220(sp)
 400d4e0:	d8801f17 	ldw	r2,124(sp)
 400d4e4:	d9403417 	ldw	r5,208(sp)
 400d4e8:	20c7883a 	add	r3,r4,r3
 400d4ec:	10800044 	addi	r2,r2,1
 400d4f0:	41000115 	stw	r4,4(r8)
 400d4f4:	41400015 	stw	r5,0(r8)
 400d4f8:	d8c02015 	stw	r3,128(sp)
 400d4fc:	d8801f15 	stw	r2,124(sp)
 400d500:	010001c4 	movi	r4,7
 400d504:	20812116 	blt	r4,r2,400d98c <___vfprintf_internal_r+0x1e60>
 400d508:	42000204 	addi	r8,r8,8
 400d50c:	0463c83a 	sub	r17,zero,r17
 400d510:	0440730e 	bge	zero,r17,400d6e0 <___vfprintf_internal_r+0x1bb4>
 400d514:	05800404 	movi	r22,16
 400d518:	b440860e 	bge	r22,r17,400d734 <___vfprintf_internal_r+0x1c08>
 400d51c:	014100b4 	movhi	r5,1026
 400d520:	2969dc84 	addi	r5,r5,-22670
 400d524:	d9402b15 	stw	r5,172(sp)
 400d528:	070001c4 	movi	fp,7
 400d52c:	dcc02c17 	ldw	r19,176(sp)
 400d530:	00000306 	br	400d540 <___vfprintf_internal_r+0x1a14>
 400d534:	42000204 	addi	r8,r8,8
 400d538:	8c7ffc04 	addi	r17,r17,-16
 400d53c:	b440800e 	bge	r22,r17,400d740 <___vfprintf_internal_r+0x1c14>
 400d540:	18c00404 	addi	r3,r3,16
 400d544:	10800044 	addi	r2,r2,1
 400d548:	45000015 	stw	r20,0(r8)
 400d54c:	45800115 	stw	r22,4(r8)
 400d550:	d8c02015 	stw	r3,128(sp)
 400d554:	d8801f15 	stw	r2,124(sp)
 400d558:	e0bff60e 	bge	fp,r2,400d534 <__alt_data_end+0xfc00d534>
 400d55c:	d9801e04 	addi	r6,sp,120
 400d560:	b80b883a 	mov	r5,r23
 400d564:	9809883a 	mov	r4,r19
 400d568:	401257c0 	call	401257c <__sprint_r>
 400d56c:	103a711e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d570:	d8c02017 	ldw	r3,128(sp)
 400d574:	d8801f17 	ldw	r2,124(sp)
 400d578:	da000404 	addi	r8,sp,16
 400d57c:	003fee06 	br	400d538 <__alt_data_end+0xfc00d538>
 400d580:	00bfffc4 	movi	r2,-1
 400d584:	003a6f06 	br	400bf44 <__alt_data_end+0xfc00bf44>
 400d588:	008011c4 	movi	r2,71
 400d58c:	1440b816 	blt	r2,r17,400d870 <___vfprintf_internal_r+0x1d44>
 400d590:	040100b4 	movhi	r16,1026
 400d594:	8429ce04 	addi	r16,r16,-22728
 400d598:	00c000c4 	movi	r3,3
 400d59c:	00bfdfc4 	movi	r2,-129
 400d5a0:	d8c02a15 	stw	r3,168(sp)
 400d5a4:	90a4703a 	and	r18,r18,r2
 400d5a8:	df002783 	ldbu	fp,158(sp)
 400d5ac:	d8c02e15 	stw	r3,184(sp)
 400d5b0:	d8002915 	stw	zero,164(sp)
 400d5b4:	d8003215 	stw	zero,200(sp)
 400d5b8:	003b2906 	br	400c260 <__alt_data_end+0xfc00c260>
 400d5bc:	d9002d17 	ldw	r4,180(sp)
 400d5c0:	24c00017 	ldw	r19,0(r4)
 400d5c4:	21000104 	addi	r4,r4,4
 400d5c8:	d9002d15 	stw	r4,180(sp)
 400d5cc:	982dd7fa 	srai	r22,r19,31
 400d5d0:	b005883a 	mov	r2,r22
 400d5d4:	003a9f06 	br	400c054 <__alt_data_end+0xfc00c054>
 400d5d8:	d9402d17 	ldw	r5,180(sp)
 400d5dc:	d8c02f17 	ldw	r3,188(sp)
 400d5e0:	28800017 	ldw	r2,0(r5)
 400d5e4:	29400104 	addi	r5,r5,4
 400d5e8:	d9402d15 	stw	r5,180(sp)
 400d5ec:	10c00015 	stw	r3,0(r2)
 400d5f0:	00398606 	br	400bc0c <__alt_data_end+0xfc00bc0c>
 400d5f4:	d9402d17 	ldw	r5,180(sp)
 400d5f8:	002d883a 	mov	r22,zero
 400d5fc:	2cc00017 	ldw	r19,0(r5)
 400d600:	29400104 	addi	r5,r5,4
 400d604:	d9402d15 	stw	r5,180(sp)
 400d608:	003c2306 	br	400c698 <__alt_data_end+0xfc00c698>
 400d60c:	d8c02d17 	ldw	r3,180(sp)
 400d610:	d9002917 	ldw	r4,164(sp)
 400d614:	002d883a 	mov	r22,zero
 400d618:	18800104 	addi	r2,r3,4
 400d61c:	1cc0000b 	ldhu	r19,0(r3)
 400d620:	203dc10e 	bge	r4,zero,400cd28 <__alt_data_end+0xfc00cd28>
 400d624:	003f7506 	br	400d3fc <__alt_data_end+0xfc00d3fc>
 400d628:	040100b4 	movhi	r16,1026
 400d62c:	8429cc04 	addi	r16,r16,-22736
 400d630:	003acc06 	br	400c164 <__alt_data_end+0xfc00c164>
 400d634:	d9002c17 	ldw	r4,176(sp)
 400d638:	d9801e04 	addi	r6,sp,120
 400d63c:	b80b883a 	mov	r5,r23
 400d640:	401257c0 	call	401257c <__sprint_r>
 400d644:	103a3b1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d648:	dc402617 	ldw	r17,152(sp)
 400d64c:	d8c02017 	ldw	r3,128(sp)
 400d650:	da000404 	addi	r8,sp,16
 400d654:	003f9c06 	br	400d4c8 <__alt_data_end+0xfc00d4c8>
 400d658:	ac400043 	ldbu	r17,1(r21)
 400d65c:	94800814 	ori	r18,r18,32
 400d660:	ad400044 	addi	r21,r21,1
 400d664:	8c403fcc 	andi	r17,r17,255
 400d668:	8c40201c 	xori	r17,r17,128
 400d66c:	8c7fe004 	addi	r17,r17,-128
 400d670:	00398f06 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400d674:	d8c02d15 	stw	r3,180(sp)
 400d678:	0039883a 	mov	fp,zero
 400d67c:	003e3506 	br	400cf54 <__alt_data_end+0xfc00cf54>
 400d680:	d9002c17 	ldw	r4,176(sp)
 400d684:	d9801e04 	addi	r6,sp,120
 400d688:	b80b883a 	mov	r5,r23
 400d68c:	401257c0 	call	401257c <__sprint_r>
 400d690:	103a281e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d694:	d8c02017 	ldw	r3,128(sp)
 400d698:	da000404 	addi	r8,sp,16
 400d69c:	003cd006 	br	400c9e0 <__alt_data_end+0xfc00c9e0>
 400d6a0:	8009883a 	mov	r4,r16
 400d6a4:	da003d15 	stw	r8,244(sp)
 400d6a8:	400ba8c0 	call	400ba8c <strlen>
 400d6ac:	d8802e15 	stw	r2,184(sp)
 400d6b0:	da003d17 	ldw	r8,244(sp)
 400d6b4:	103c340e 	bge	r2,zero,400c788 <__alt_data_end+0xfc00c788>
 400d6b8:	0005883a 	mov	r2,zero
 400d6bc:	003c3206 	br	400c788 <__alt_data_end+0xfc00c788>
 400d6c0:	d9002c17 	ldw	r4,176(sp)
 400d6c4:	d9801e04 	addi	r6,sp,120
 400d6c8:	b80b883a 	mov	r5,r23
 400d6cc:	401257c0 	call	401257c <__sprint_r>
 400d6d0:	103a181e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d6d4:	d8c02017 	ldw	r3,128(sp)
 400d6d8:	d8801f17 	ldw	r2,124(sp)
 400d6dc:	da000404 	addi	r8,sp,16
 400d6e0:	d9403317 	ldw	r5,204(sp)
 400d6e4:	10800044 	addi	r2,r2,1
 400d6e8:	44000015 	stw	r16,0(r8)
 400d6ec:	28c7883a 	add	r3,r5,r3
 400d6f0:	003b7d06 	br	400c4e8 <__alt_data_end+0xfc00c4e8>
 400d6f4:	010100b4 	movhi	r4,1026
 400d6f8:	2129e084 	addi	r4,r4,-22654
 400d6fc:	d9003515 	stw	r4,212(sp)
 400d700:	003b1406 	br	400c354 <__alt_data_end+0xfc00c354>
 400d704:	013fffc4 	movi	r4,-1
 400d708:	003a3506 	br	400bfe0 <__alt_data_end+0xfc00bfe0>
 400d70c:	0023883a 	mov	r17,zero
 400d710:	003d9d06 	br	400cd88 <__alt_data_end+0xfc00cd88>
 400d714:	d9002c17 	ldw	r4,176(sp)
 400d718:	d9801e04 	addi	r6,sp,120
 400d71c:	b80b883a 	mov	r5,r23
 400d720:	401257c0 	call	401257c <__sprint_r>
 400d724:	103a031e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d728:	d8c02017 	ldw	r3,128(sp)
 400d72c:	da000404 	addi	r8,sp,16
 400d730:	003d9406 	br	400cd84 <__alt_data_end+0xfc00cd84>
 400d734:	010100b4 	movhi	r4,1026
 400d738:	2129dc84 	addi	r4,r4,-22670
 400d73c:	d9002b15 	stw	r4,172(sp)
 400d740:	d9002b17 	ldw	r4,172(sp)
 400d744:	1c47883a 	add	r3,r3,r17
 400d748:	10800044 	addi	r2,r2,1
 400d74c:	41000015 	stw	r4,0(r8)
 400d750:	44400115 	stw	r17,4(r8)
 400d754:	d8c02015 	stw	r3,128(sp)
 400d758:	d8801f15 	stw	r2,124(sp)
 400d75c:	010001c4 	movi	r4,7
 400d760:	20bfd716 	blt	r4,r2,400d6c0 <__alt_data_end+0xfc00d6c0>
 400d764:	42000204 	addi	r8,r8,8
 400d768:	003fdd06 	br	400d6e0 <__alt_data_end+0xfc00d6e0>
 400d76c:	d9002c17 	ldw	r4,176(sp)
 400d770:	d9801e04 	addi	r6,sp,120
 400d774:	b80b883a 	mov	r5,r23
 400d778:	401257c0 	call	401257c <__sprint_r>
 400d77c:	1039ed1e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d780:	d8802617 	ldw	r2,152(sp)
 400d784:	d8c02017 	ldw	r3,128(sp)
 400d788:	da000404 	addi	r8,sp,16
 400d78c:	003e1006 	br	400cfd0 <__alt_data_end+0xfc00cfd0>
 400d790:	00800044 	movi	r2,1
 400d794:	10803fcc 	andi	r2,r2,255
 400d798:	00c00044 	movi	r3,1
 400d79c:	10fa3526 	beq	r2,r3,400c074 <__alt_data_end+0xfc00c074>
 400d7a0:	00c00084 	movi	r3,2
 400d7a4:	10fbcb26 	beq	r2,r3,400c6d4 <__alt_data_end+0xfc00c6d4>
 400d7a8:	003a8f06 	br	400c1e8 <__alt_data_end+0xfc00c1e8>
 400d7ac:	010100b4 	movhi	r4,1026
 400d7b0:	2129e084 	addi	r4,r4,-22654
 400d7b4:	d9003515 	stw	r4,212(sp)
 400d7b8:	003b7606 	br	400c594 <__alt_data_end+0xfc00c594>
 400d7bc:	d8802917 	ldw	r2,164(sp)
 400d7c0:	00c00184 	movi	r3,6
 400d7c4:	1880012e 	bgeu	r3,r2,400d7cc <___vfprintf_internal_r+0x1ca0>
 400d7c8:	1805883a 	mov	r2,r3
 400d7cc:	d8802e15 	stw	r2,184(sp)
 400d7d0:	1000ef16 	blt	r2,zero,400db90 <___vfprintf_internal_r+0x2064>
 400d7d4:	040100b4 	movhi	r16,1026
 400d7d8:	d8802a15 	stw	r2,168(sp)
 400d7dc:	dcc02d15 	stw	r19,180(sp)
 400d7e0:	d8002915 	stw	zero,164(sp)
 400d7e4:	d8003215 	stw	zero,200(sp)
 400d7e8:	8429da04 	addi	r16,r16,-22680
 400d7ec:	0039883a 	mov	fp,zero
 400d7f0:	003aa206 	br	400c27c <__alt_data_end+0xfc00c27c>
 400d7f4:	0021883a 	mov	r16,zero
 400d7f8:	003e0706 	br	400d018 <__alt_data_end+0xfc00d018>
 400d7fc:	d9002c17 	ldw	r4,176(sp)
 400d800:	d9801e04 	addi	r6,sp,120
 400d804:	b80b883a 	mov	r5,r23
 400d808:	401257c0 	call	401257c <__sprint_r>
 400d80c:	1039c91e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d810:	d8802617 	ldw	r2,152(sp)
 400d814:	d9403317 	ldw	r5,204(sp)
 400d818:	d8c02017 	ldw	r3,128(sp)
 400d81c:	da000404 	addi	r8,sp,16
 400d820:	2885c83a 	sub	r2,r5,r2
 400d824:	003dfb06 	br	400d014 <__alt_data_end+0xfc00d014>
 400d828:	9080004c 	andi	r2,r18,1
 400d82c:	103e8f1e 	bne	r2,zero,400d26c <__alt_data_end+0xfc00d26c>
 400d830:	d8802117 	ldw	r2,132(sp)
 400d834:	003e9e06 	br	400d2b0 <__alt_data_end+0xfc00d2b0>
 400d838:	1025883a 	mov	r18,r2
 400d83c:	0039883a 	mov	fp,zero
 400d840:	00800084 	movi	r2,2
 400d844:	003fd306 	br	400d794 <__alt_data_end+0xfc00d794>
 400d848:	07000b44 	movi	fp,45
 400d84c:	df002785 	stb	fp,158(sp)
 400d850:	003a4006 	br	400c154 <__alt_data_end+0xfc00c154>
 400d854:	00c00b44 	movi	r3,45
 400d858:	d8c02785 	stb	r3,158(sp)
 400d85c:	d8802a15 	stw	r2,168(sp)
 400d860:	dc802b17 	ldw	r18,172(sp)
 400d864:	d8002915 	stw	zero,164(sp)
 400d868:	07000b44 	movi	fp,45
 400d86c:	003a8006 	br	400c270 <__alt_data_end+0xfc00c270>
 400d870:	040100b4 	movhi	r16,1026
 400d874:	8429cf04 	addi	r16,r16,-22724
 400d878:	003f4706 	br	400d598 <__alt_data_end+0xfc00d598>
 400d87c:	d8c02d17 	ldw	r3,180(sp)
 400d880:	d9002f17 	ldw	r4,188(sp)
 400d884:	18800017 	ldw	r2,0(r3)
 400d888:	18c00104 	addi	r3,r3,4
 400d88c:	d8c02d15 	stw	r3,180(sp)
 400d890:	11000015 	stw	r4,0(r2)
 400d894:	0038dd06 	br	400bc0c <__alt_data_end+0xfc00bc0c>
 400d898:	dd802617 	ldw	r22,152(sp)
 400d89c:	00bfff44 	movi	r2,-3
 400d8a0:	b0801c16 	blt	r22,r2,400d914 <___vfprintf_internal_r+0x1de8>
 400d8a4:	d9402917 	ldw	r5,164(sp)
 400d8a8:	2d801a16 	blt	r5,r22,400d914 <___vfprintf_internal_r+0x1de8>
 400d8ac:	dd803215 	stw	r22,200(sp)
 400d8b0:	003e8906 	br	400d2d8 <__alt_data_end+0xfc00d2d8>
 400d8b4:	010100b4 	movhi	r4,1026
 400d8b8:	2129dc84 	addi	r4,r4,-22670
 400d8bc:	d9002b15 	stw	r4,172(sp)
 400d8c0:	003c9106 	br	400cb08 <__alt_data_end+0xfc00cb08>
 400d8c4:	e005883a 	mov	r2,fp
 400d8c8:	003e7906 	br	400d2b0 <__alt_data_end+0xfc00d2b0>
 400d8cc:	d9402917 	ldw	r5,164(sp)
 400d8d0:	df002783 	ldbu	fp,158(sp)
 400d8d4:	dcc02d15 	stw	r19,180(sp)
 400d8d8:	d9402a15 	stw	r5,168(sp)
 400d8dc:	d9402e15 	stw	r5,184(sp)
 400d8e0:	d8002915 	stw	zero,164(sp)
 400d8e4:	d8003215 	stw	zero,200(sp)
 400d8e8:	003a5d06 	br	400c260 <__alt_data_end+0xfc00c260>
 400d8ec:	9080004c 	andi	r2,r18,1
 400d8f0:	0039883a 	mov	fp,zero
 400d8f4:	10000426 	beq	r2,zero,400d908 <___vfprintf_internal_r+0x1ddc>
 400d8f8:	00800c04 	movi	r2,48
 400d8fc:	dc001dc4 	addi	r16,sp,119
 400d900:	d8801dc5 	stb	r2,119(sp)
 400d904:	003b8006 	br	400c708 <__alt_data_end+0xfc00c708>
 400d908:	d8002e15 	stw	zero,184(sp)
 400d90c:	dc001e04 	addi	r16,sp,120
 400d910:	003a4d06 	br	400c248 <__alt_data_end+0xfc00c248>
 400d914:	8c7fff84 	addi	r17,r17,-2
 400d918:	b5bfffc4 	addi	r22,r22,-1
 400d91c:	dd802615 	stw	r22,152(sp)
 400d920:	dc4022c5 	stb	r17,139(sp)
 400d924:	b000bf16 	blt	r22,zero,400dc24 <___vfprintf_internal_r+0x20f8>
 400d928:	00800ac4 	movi	r2,43
 400d92c:	d8802305 	stb	r2,140(sp)
 400d930:	00800244 	movi	r2,9
 400d934:	15807016 	blt	r2,r22,400daf8 <___vfprintf_internal_r+0x1fcc>
 400d938:	00800c04 	movi	r2,48
 400d93c:	b5800c04 	addi	r22,r22,48
 400d940:	d8802345 	stb	r2,141(sp)
 400d944:	dd802385 	stb	r22,142(sp)
 400d948:	d88023c4 	addi	r2,sp,143
 400d94c:	df0022c4 	addi	fp,sp,139
 400d950:	d8c03317 	ldw	r3,204(sp)
 400d954:	1739c83a 	sub	fp,r2,fp
 400d958:	d9003317 	ldw	r4,204(sp)
 400d95c:	e0c7883a 	add	r3,fp,r3
 400d960:	df003a15 	stw	fp,232(sp)
 400d964:	d8c02e15 	stw	r3,184(sp)
 400d968:	00800044 	movi	r2,1
 400d96c:	1100b30e 	bge	r2,r4,400dc3c <___vfprintf_internal_r+0x2110>
 400d970:	d8c02e17 	ldw	r3,184(sp)
 400d974:	18c00044 	addi	r3,r3,1
 400d978:	d8c02e15 	stw	r3,184(sp)
 400d97c:	1805883a 	mov	r2,r3
 400d980:	1800ac16 	blt	r3,zero,400dc34 <___vfprintf_internal_r+0x2108>
 400d984:	d8003215 	stw	zero,200(sp)
 400d988:	003e5d06 	br	400d300 <__alt_data_end+0xfc00d300>
 400d98c:	d9002c17 	ldw	r4,176(sp)
 400d990:	d9801e04 	addi	r6,sp,120
 400d994:	b80b883a 	mov	r5,r23
 400d998:	401257c0 	call	401257c <__sprint_r>
 400d99c:	1039651e 	bne	r2,zero,400bf34 <__alt_data_end+0xfc00bf34>
 400d9a0:	dc402617 	ldw	r17,152(sp)
 400d9a4:	d8c02017 	ldw	r3,128(sp)
 400d9a8:	d8801f17 	ldw	r2,124(sp)
 400d9ac:	da000404 	addi	r8,sp,16
 400d9b0:	003ed606 	br	400d50c <__alt_data_end+0xfc00d50c>
 400d9b4:	582b883a 	mov	r21,r11
 400d9b8:	d8002915 	stw	zero,164(sp)
 400d9bc:	0038bd06 	br	400bcb4 <__alt_data_end+0xfc00bcb4>
 400d9c0:	d8802917 	ldw	r2,164(sp)
 400d9c4:	103e071e 	bne	r2,zero,400d1e4 <__alt_data_end+0xfc00d1e4>
 400d9c8:	dc002915 	stw	r16,164(sp)
 400d9cc:	003e0506 	br	400d1e4 <__alt_data_end+0xfc00d1e4>
 400d9d0:	d9002917 	ldw	r4,164(sp)
 400d9d4:	20c00044 	addi	r3,r4,1
 400d9d8:	003e0f06 	br	400d218 <__alt_data_end+0xfc00d218>
 400d9dc:	01400184 	movi	r5,6
 400d9e0:	d9402915 	stw	r5,164(sp)
 400d9e4:	003dff06 	br	400d1e4 <__alt_data_end+0xfc00d1e4>
 400d9e8:	d8802104 	addi	r2,sp,132
 400d9ec:	d8800315 	stw	r2,12(sp)
 400d9f0:	d8802504 	addi	r2,sp,148
 400d9f4:	d8800215 	stw	r2,8(sp)
 400d9f8:	d8802604 	addi	r2,sp,152
 400d9fc:	d8800115 	stw	r2,4(sp)
 400da00:	d8802917 	ldw	r2,164(sp)
 400da04:	d9403617 	ldw	r5,216(sp)
 400da08:	d9002c17 	ldw	r4,176(sp)
 400da0c:	d8800015 	stw	r2,0(sp)
 400da10:	01c000c4 	movi	r7,3
 400da14:	980d883a 	mov	r6,r19
 400da18:	da003d15 	stw	r8,244(sp)
 400da1c:	400e1500 	call	400e150 <_dtoa_r>
 400da20:	d8c02917 	ldw	r3,164(sp)
 400da24:	da003d17 	ldw	r8,244(sp)
 400da28:	1021883a 	mov	r16,r2
 400da2c:	10f9883a 	add	fp,r2,r3
 400da30:	81000007 	ldb	r4,0(r16)
 400da34:	00800c04 	movi	r2,48
 400da38:	20805e26 	beq	r4,r2,400dbb4 <___vfprintf_internal_r+0x2088>
 400da3c:	d8c02617 	ldw	r3,152(sp)
 400da40:	e0f9883a 	add	fp,fp,r3
 400da44:	003e0a06 	br	400d270 <__alt_data_end+0xfc00d270>
 400da48:	00c00b44 	movi	r3,45
 400da4c:	24e0003c 	xorhi	r19,r4,32768
 400da50:	d8c02a05 	stb	r3,168(sp)
 400da54:	003de906 	br	400d1fc <__alt_data_end+0xfc00d1fc>
 400da58:	d8c03217 	ldw	r3,200(sp)
 400da5c:	00c07a0e 	bge	zero,r3,400dc48 <___vfprintf_internal_r+0x211c>
 400da60:	00800044 	movi	r2,1
 400da64:	d9003317 	ldw	r4,204(sp)
 400da68:	1105883a 	add	r2,r2,r4
 400da6c:	d8802e15 	stw	r2,184(sp)
 400da70:	10004e16 	blt	r2,zero,400dbac <___vfprintf_internal_r+0x2080>
 400da74:	044019c4 	movi	r17,103
 400da78:	003e2106 	br	400d300 <__alt_data_end+0xfc00d300>
 400da7c:	d9002917 	ldw	r4,164(sp)
 400da80:	d8802104 	addi	r2,sp,132
 400da84:	d8800315 	stw	r2,12(sp)
 400da88:	d9000015 	stw	r4,0(sp)
 400da8c:	d8802504 	addi	r2,sp,148
 400da90:	d9403617 	ldw	r5,216(sp)
 400da94:	d9002c17 	ldw	r4,176(sp)
 400da98:	d8800215 	stw	r2,8(sp)
 400da9c:	d8802604 	addi	r2,sp,152
 400daa0:	d8800115 	stw	r2,4(sp)
 400daa4:	01c000c4 	movi	r7,3
 400daa8:	980d883a 	mov	r6,r19
 400daac:	da003d15 	stw	r8,244(sp)
 400dab0:	400e1500 	call	400e150 <_dtoa_r>
 400dab4:	d8c02917 	ldw	r3,164(sp)
 400dab8:	da003d17 	ldw	r8,244(sp)
 400dabc:	1021883a 	mov	r16,r2
 400dac0:	00801184 	movi	r2,70
 400dac4:	80f9883a 	add	fp,r16,r3
 400dac8:	88bfd926 	beq	r17,r2,400da30 <__alt_data_end+0xfc00da30>
 400dacc:	003de806 	br	400d270 <__alt_data_end+0xfc00d270>
 400dad0:	d9002917 	ldw	r4,164(sp)
 400dad4:	00c04d0e 	bge	zero,r3,400dc0c <___vfprintf_internal_r+0x20e0>
 400dad8:	2000441e 	bne	r4,zero,400dbec <___vfprintf_internal_r+0x20c0>
 400dadc:	9480004c 	andi	r18,r18,1
 400dae0:	9000421e 	bne	r18,zero,400dbec <___vfprintf_internal_r+0x20c0>
 400dae4:	1805883a 	mov	r2,r3
 400dae8:	18007016 	blt	r3,zero,400dcac <___vfprintf_internal_r+0x2180>
 400daec:	d8c03217 	ldw	r3,200(sp)
 400daf0:	d8c02e15 	stw	r3,184(sp)
 400daf4:	003e0206 	br	400d300 <__alt_data_end+0xfc00d300>
 400daf8:	df0022c4 	addi	fp,sp,139
 400dafc:	dc002915 	stw	r16,164(sp)
 400db00:	4027883a 	mov	r19,r8
 400db04:	e021883a 	mov	r16,fp
 400db08:	b009883a 	mov	r4,r22
 400db0c:	01400284 	movi	r5,10
 400db10:	400a3440 	call	400a344 <__modsi3>
 400db14:	10800c04 	addi	r2,r2,48
 400db18:	843fffc4 	addi	r16,r16,-1
 400db1c:	b009883a 	mov	r4,r22
 400db20:	01400284 	movi	r5,10
 400db24:	80800005 	stb	r2,0(r16)
 400db28:	400a2c00 	call	400a2c0 <__divsi3>
 400db2c:	102d883a 	mov	r22,r2
 400db30:	00800244 	movi	r2,9
 400db34:	15bff416 	blt	r2,r22,400db08 <__alt_data_end+0xfc00db08>
 400db38:	9811883a 	mov	r8,r19
 400db3c:	b0800c04 	addi	r2,r22,48
 400db40:	8027883a 	mov	r19,r16
 400db44:	997fffc4 	addi	r5,r19,-1
 400db48:	98bfffc5 	stb	r2,-1(r19)
 400db4c:	dc002917 	ldw	r16,164(sp)
 400db50:	2f006a2e 	bgeu	r5,fp,400dcfc <___vfprintf_internal_r+0x21d0>
 400db54:	d9c02384 	addi	r7,sp,142
 400db58:	3ccfc83a 	sub	r7,r7,r19
 400db5c:	d9002344 	addi	r4,sp,141
 400db60:	e1cf883a 	add	r7,fp,r7
 400db64:	00000106 	br	400db6c <___vfprintf_internal_r+0x2040>
 400db68:	28800003 	ldbu	r2,0(r5)
 400db6c:	20800005 	stb	r2,0(r4)
 400db70:	21000044 	addi	r4,r4,1
 400db74:	29400044 	addi	r5,r5,1
 400db78:	393ffb1e 	bne	r7,r4,400db68 <__alt_data_end+0xfc00db68>
 400db7c:	d8802304 	addi	r2,sp,140
 400db80:	14c5c83a 	sub	r2,r2,r19
 400db84:	d8c02344 	addi	r3,sp,141
 400db88:	1885883a 	add	r2,r3,r2
 400db8c:	003f7006 	br	400d950 <__alt_data_end+0xfc00d950>
 400db90:	0005883a 	mov	r2,zero
 400db94:	003f0f06 	br	400d7d4 <__alt_data_end+0xfc00d7d4>
 400db98:	d8c03217 	ldw	r3,200(sp)
 400db9c:	18c00044 	addi	r3,r3,1
 400dba0:	d8c02e15 	stw	r3,184(sp)
 400dba4:	1805883a 	mov	r2,r3
 400dba8:	183fb20e 	bge	r3,zero,400da74 <__alt_data_end+0xfc00da74>
 400dbac:	0005883a 	mov	r2,zero
 400dbb0:	003fb006 	br	400da74 <__alt_data_end+0xfc00da74>
 400dbb4:	d9003617 	ldw	r4,216(sp)
 400dbb8:	000d883a 	mov	r6,zero
 400dbbc:	000f883a 	mov	r7,zero
 400dbc0:	980b883a 	mov	r5,r19
 400dbc4:	d8c03c15 	stw	r3,240(sp)
 400dbc8:	da003d15 	stw	r8,244(sp)
 400dbcc:	40160400 	call	4016040 <__eqdf2>
 400dbd0:	d8c03c17 	ldw	r3,240(sp)
 400dbd4:	da003d17 	ldw	r8,244(sp)
 400dbd8:	103f9826 	beq	r2,zero,400da3c <__alt_data_end+0xfc00da3c>
 400dbdc:	00800044 	movi	r2,1
 400dbe0:	10c7c83a 	sub	r3,r2,r3
 400dbe4:	d8c02615 	stw	r3,152(sp)
 400dbe8:	003f9506 	br	400da40 <__alt_data_end+0xfc00da40>
 400dbec:	d9002917 	ldw	r4,164(sp)
 400dbf0:	d8c03217 	ldw	r3,200(sp)
 400dbf4:	20800044 	addi	r2,r4,1
 400dbf8:	1885883a 	add	r2,r3,r2
 400dbfc:	d8802e15 	stw	r2,184(sp)
 400dc00:	103dbf0e 	bge	r2,zero,400d300 <__alt_data_end+0xfc00d300>
 400dc04:	0005883a 	mov	r2,zero
 400dc08:	003dbd06 	br	400d300 <__alt_data_end+0xfc00d300>
 400dc0c:	2000211e 	bne	r4,zero,400dc94 <___vfprintf_internal_r+0x2168>
 400dc10:	9480004c 	andi	r18,r18,1
 400dc14:	90001f1e 	bne	r18,zero,400dc94 <___vfprintf_internal_r+0x2168>
 400dc18:	00800044 	movi	r2,1
 400dc1c:	d8802e15 	stw	r2,184(sp)
 400dc20:	003db706 	br	400d300 <__alt_data_end+0xfc00d300>
 400dc24:	00800b44 	movi	r2,45
 400dc28:	05adc83a 	sub	r22,zero,r22
 400dc2c:	d8802305 	stb	r2,140(sp)
 400dc30:	003f3f06 	br	400d930 <__alt_data_end+0xfc00d930>
 400dc34:	0005883a 	mov	r2,zero
 400dc38:	003f5206 	br	400d984 <__alt_data_end+0xfc00d984>
 400dc3c:	90a4703a 	and	r18,r18,r2
 400dc40:	903f4e26 	beq	r18,zero,400d97c <__alt_data_end+0xfc00d97c>
 400dc44:	003f4a06 	br	400d970 <__alt_data_end+0xfc00d970>
 400dc48:	00800084 	movi	r2,2
 400dc4c:	10c5c83a 	sub	r2,r2,r3
 400dc50:	003f8406 	br	400da64 <__alt_data_end+0xfc00da64>
 400dc54:	d8802d17 	ldw	r2,180(sp)
 400dc58:	d9002d17 	ldw	r4,180(sp)
 400dc5c:	ac400043 	ldbu	r17,1(r21)
 400dc60:	10800017 	ldw	r2,0(r2)
 400dc64:	582b883a 	mov	r21,r11
 400dc68:	d8802915 	stw	r2,164(sp)
 400dc6c:	20800104 	addi	r2,r4,4
 400dc70:	d9002917 	ldw	r4,164(sp)
 400dc74:	d8802d15 	stw	r2,180(sp)
 400dc78:	203e7a0e 	bge	r4,zero,400d664 <__alt_data_end+0xfc00d664>
 400dc7c:	8c403fcc 	andi	r17,r17,255
 400dc80:	00bfffc4 	movi	r2,-1
 400dc84:	8c40201c 	xori	r17,r17,128
 400dc88:	d8802915 	stw	r2,164(sp)
 400dc8c:	8c7fe004 	addi	r17,r17,-128
 400dc90:	00380706 	br	400bcb0 <__alt_data_end+0xfc00bcb0>
 400dc94:	d8c02917 	ldw	r3,164(sp)
 400dc98:	18c00084 	addi	r3,r3,2
 400dc9c:	d8c02e15 	stw	r3,184(sp)
 400dca0:	1805883a 	mov	r2,r3
 400dca4:	183d960e 	bge	r3,zero,400d300 <__alt_data_end+0xfc00d300>
 400dca8:	003fd606 	br	400dc04 <__alt_data_end+0xfc00dc04>
 400dcac:	0005883a 	mov	r2,zero
 400dcb0:	003f8e06 	br	400daec <__alt_data_end+0xfc00daec>
 400dcb4:	9080004c 	andi	r2,r18,1
 400dcb8:	103f811e 	bne	r2,zero,400dac0 <__alt_data_end+0xfc00dac0>
 400dcbc:	d8802117 	ldw	r2,132(sp)
 400dcc0:	1405c83a 	sub	r2,r2,r16
 400dcc4:	d8803315 	stw	r2,204(sp)
 400dcc8:	b47ef326 	beq	r22,r17,400d898 <__alt_data_end+0xfc00d898>
 400dccc:	dd802617 	ldw	r22,152(sp)
 400dcd0:	003f1106 	br	400d918 <__alt_data_end+0xfc00d918>
 400dcd4:	d9c02785 	stb	r7,158(sp)
 400dcd8:	00390406 	br	400c0ec <__alt_data_end+0xfc00c0ec>
 400dcdc:	d9c02785 	stb	r7,158(sp)
 400dce0:	0038d306 	br	400c030 <__alt_data_end+0xfc00c030>
 400dce4:	d9c02785 	stb	r7,158(sp)
 400dce8:	003a6106 	br	400c670 <__alt_data_end+0xfc00c670>
 400dcec:	d9c02785 	stb	r7,158(sp)
 400dcf0:	003af806 	br	400c8d4 <__alt_data_end+0xfc00c8d4>
 400dcf4:	0005883a 	mov	r2,zero
 400dcf8:	003d7e06 	br	400d2f4 <__alt_data_end+0xfc00d2f4>
 400dcfc:	d8802344 	addi	r2,sp,141
 400dd00:	003f1306 	br	400d950 <__alt_data_end+0xfc00d950>
 400dd04:	d9c02785 	stb	r7,158(sp)
 400dd08:	00392306 	br	400c198 <__alt_data_end+0xfc00c198>
 400dd0c:	d9c02785 	stb	r7,158(sp)
 400dd10:	003aa906 	br	400c7b8 <__alt_data_end+0xfc00c7b8>
 400dd14:	d9c02785 	stb	r7,158(sp)
 400dd18:	003a3d06 	br	400c610 <__alt_data_end+0xfc00c610>
 400dd1c:	d9c02785 	stb	r7,158(sp)
 400dd20:	003aca06 	br	400c84c <__alt_data_end+0xfc00c84c>

0400dd24 <__vfprintf_internal>:
 400dd24:	008100b4 	movhi	r2,1026
 400dd28:	1086e904 	addi	r2,r2,7076
 400dd2c:	300f883a 	mov	r7,r6
 400dd30:	280d883a 	mov	r6,r5
 400dd34:	200b883a 	mov	r5,r4
 400dd38:	11000017 	ldw	r4,0(r2)
 400dd3c:	400bb2c1 	jmpi	400bb2c <___vfprintf_internal_r>

0400dd40 <__sbprintf>:
 400dd40:	2880030b 	ldhu	r2,12(r5)
 400dd44:	2ac01917 	ldw	r11,100(r5)
 400dd48:	2a80038b 	ldhu	r10,14(r5)
 400dd4c:	2a400717 	ldw	r9,28(r5)
 400dd50:	2a000917 	ldw	r8,36(r5)
 400dd54:	defee204 	addi	sp,sp,-1144
 400dd58:	00c10004 	movi	r3,1024
 400dd5c:	dc011a15 	stw	r16,1128(sp)
 400dd60:	10bfff4c 	andi	r2,r2,65533
 400dd64:	2821883a 	mov	r16,r5
 400dd68:	d8cb883a 	add	r5,sp,r3
 400dd6c:	dc811c15 	stw	r18,1136(sp)
 400dd70:	dc411b15 	stw	r17,1132(sp)
 400dd74:	dfc11d15 	stw	ra,1140(sp)
 400dd78:	2025883a 	mov	r18,r4
 400dd7c:	d881030d 	sth	r2,1036(sp)
 400dd80:	dac11915 	stw	r11,1124(sp)
 400dd84:	da81038d 	sth	r10,1038(sp)
 400dd88:	da410715 	stw	r9,1052(sp)
 400dd8c:	da010915 	stw	r8,1060(sp)
 400dd90:	dec10015 	stw	sp,1024(sp)
 400dd94:	dec10415 	stw	sp,1040(sp)
 400dd98:	d8c10215 	stw	r3,1032(sp)
 400dd9c:	d8c10515 	stw	r3,1044(sp)
 400dda0:	d8010615 	stw	zero,1048(sp)
 400dda4:	400bb2c0 	call	400bb2c <___vfprintf_internal_r>
 400dda8:	1023883a 	mov	r17,r2
 400ddac:	10000416 	blt	r2,zero,400ddc0 <__sbprintf+0x80>
 400ddb0:	d9410004 	addi	r5,sp,1024
 400ddb4:	9009883a 	mov	r4,r18
 400ddb8:	400f9f40 	call	400f9f4 <_fflush_r>
 400ddbc:	10000d1e 	bne	r2,zero,400ddf4 <__sbprintf+0xb4>
 400ddc0:	d881030b 	ldhu	r2,1036(sp)
 400ddc4:	1080100c 	andi	r2,r2,64
 400ddc8:	10000326 	beq	r2,zero,400ddd8 <__sbprintf+0x98>
 400ddcc:	8080030b 	ldhu	r2,12(r16)
 400ddd0:	10801014 	ori	r2,r2,64
 400ddd4:	8080030d 	sth	r2,12(r16)
 400ddd8:	8805883a 	mov	r2,r17
 400dddc:	dfc11d17 	ldw	ra,1140(sp)
 400dde0:	dc811c17 	ldw	r18,1136(sp)
 400dde4:	dc411b17 	ldw	r17,1132(sp)
 400dde8:	dc011a17 	ldw	r16,1128(sp)
 400ddec:	dec11e04 	addi	sp,sp,1144
 400ddf0:	f800283a 	ret
 400ddf4:	047fffc4 	movi	r17,-1
 400ddf8:	003ff106 	br	400ddc0 <__alt_data_end+0xfc00ddc0>

0400ddfc <__swsetup_r>:
 400ddfc:	008100b4 	movhi	r2,1026
 400de00:	defffd04 	addi	sp,sp,-12
 400de04:	1086e904 	addi	r2,r2,7076
 400de08:	dc400115 	stw	r17,4(sp)
 400de0c:	2023883a 	mov	r17,r4
 400de10:	11000017 	ldw	r4,0(r2)
 400de14:	dc000015 	stw	r16,0(sp)
 400de18:	dfc00215 	stw	ra,8(sp)
 400de1c:	2821883a 	mov	r16,r5
 400de20:	20000226 	beq	r4,zero,400de2c <__swsetup_r+0x30>
 400de24:	20800e17 	ldw	r2,56(r4)
 400de28:	10003126 	beq	r2,zero,400def0 <__swsetup_r+0xf4>
 400de2c:	8080030b 	ldhu	r2,12(r16)
 400de30:	10c0020c 	andi	r3,r2,8
 400de34:	1009883a 	mov	r4,r2
 400de38:	18000f26 	beq	r3,zero,400de78 <__swsetup_r+0x7c>
 400de3c:	80c00417 	ldw	r3,16(r16)
 400de40:	18001526 	beq	r3,zero,400de98 <__swsetup_r+0x9c>
 400de44:	1100004c 	andi	r4,r2,1
 400de48:	20001c1e 	bne	r4,zero,400debc <__swsetup_r+0xc0>
 400de4c:	1080008c 	andi	r2,r2,2
 400de50:	1000291e 	bne	r2,zero,400def8 <__swsetup_r+0xfc>
 400de54:	80800517 	ldw	r2,20(r16)
 400de58:	80800215 	stw	r2,8(r16)
 400de5c:	18001c26 	beq	r3,zero,400ded0 <__swsetup_r+0xd4>
 400de60:	0005883a 	mov	r2,zero
 400de64:	dfc00217 	ldw	ra,8(sp)
 400de68:	dc400117 	ldw	r17,4(sp)
 400de6c:	dc000017 	ldw	r16,0(sp)
 400de70:	dec00304 	addi	sp,sp,12
 400de74:	f800283a 	ret
 400de78:	2080040c 	andi	r2,r4,16
 400de7c:	10002e26 	beq	r2,zero,400df38 <__swsetup_r+0x13c>
 400de80:	2080010c 	andi	r2,r4,4
 400de84:	10001e1e 	bne	r2,zero,400df00 <__swsetup_r+0x104>
 400de88:	80c00417 	ldw	r3,16(r16)
 400de8c:	20800214 	ori	r2,r4,8
 400de90:	8080030d 	sth	r2,12(r16)
 400de94:	183feb1e 	bne	r3,zero,400de44 <__alt_data_end+0xfc00de44>
 400de98:	1100a00c 	andi	r4,r2,640
 400de9c:	01408004 	movi	r5,512
 400dea0:	217fe826 	beq	r4,r5,400de44 <__alt_data_end+0xfc00de44>
 400dea4:	800b883a 	mov	r5,r16
 400dea8:	8809883a 	mov	r4,r17
 400deac:	40109740 	call	4010974 <__smakebuf_r>
 400deb0:	8080030b 	ldhu	r2,12(r16)
 400deb4:	80c00417 	ldw	r3,16(r16)
 400deb8:	003fe206 	br	400de44 <__alt_data_end+0xfc00de44>
 400debc:	80800517 	ldw	r2,20(r16)
 400dec0:	80000215 	stw	zero,8(r16)
 400dec4:	0085c83a 	sub	r2,zero,r2
 400dec8:	80800615 	stw	r2,24(r16)
 400decc:	183fe41e 	bne	r3,zero,400de60 <__alt_data_end+0xfc00de60>
 400ded0:	80c0030b 	ldhu	r3,12(r16)
 400ded4:	0005883a 	mov	r2,zero
 400ded8:	1900200c 	andi	r4,r3,128
 400dedc:	203fe126 	beq	r4,zero,400de64 <__alt_data_end+0xfc00de64>
 400dee0:	18c01014 	ori	r3,r3,64
 400dee4:	80c0030d 	sth	r3,12(r16)
 400dee8:	00bfffc4 	movi	r2,-1
 400deec:	003fdd06 	br	400de64 <__alt_data_end+0xfc00de64>
 400def0:	400fdd00 	call	400fdd0 <__sinit>
 400def4:	003fcd06 	br	400de2c <__alt_data_end+0xfc00de2c>
 400def8:	0005883a 	mov	r2,zero
 400defc:	003fd606 	br	400de58 <__alt_data_end+0xfc00de58>
 400df00:	81400c17 	ldw	r5,48(r16)
 400df04:	28000626 	beq	r5,zero,400df20 <__swsetup_r+0x124>
 400df08:	80801004 	addi	r2,r16,64
 400df0c:	28800326 	beq	r5,r2,400df1c <__swsetup_r+0x120>
 400df10:	8809883a 	mov	r4,r17
 400df14:	400ff440 	call	400ff44 <_free_r>
 400df18:	8100030b 	ldhu	r4,12(r16)
 400df1c:	80000c15 	stw	zero,48(r16)
 400df20:	80c00417 	ldw	r3,16(r16)
 400df24:	00bff6c4 	movi	r2,-37
 400df28:	1108703a 	and	r4,r2,r4
 400df2c:	80000115 	stw	zero,4(r16)
 400df30:	80c00015 	stw	r3,0(r16)
 400df34:	003fd506 	br	400de8c <__alt_data_end+0xfc00de8c>
 400df38:	00800244 	movi	r2,9
 400df3c:	88800015 	stw	r2,0(r17)
 400df40:	20801014 	ori	r2,r4,64
 400df44:	8080030d 	sth	r2,12(r16)
 400df48:	00bfffc4 	movi	r2,-1
 400df4c:	003fc506 	br	400de64 <__alt_data_end+0xfc00de64>

0400df50 <quorem>:
 400df50:	defff704 	addi	sp,sp,-36
 400df54:	dc800215 	stw	r18,8(sp)
 400df58:	20800417 	ldw	r2,16(r4)
 400df5c:	2c800417 	ldw	r18,16(r5)
 400df60:	dfc00815 	stw	ra,32(sp)
 400df64:	ddc00715 	stw	r23,28(sp)
 400df68:	dd800615 	stw	r22,24(sp)
 400df6c:	dd400515 	stw	r21,20(sp)
 400df70:	dd000415 	stw	r20,16(sp)
 400df74:	dcc00315 	stw	r19,12(sp)
 400df78:	dc400115 	stw	r17,4(sp)
 400df7c:	dc000015 	stw	r16,0(sp)
 400df80:	14807116 	blt	r2,r18,400e148 <quorem+0x1f8>
 400df84:	94bfffc4 	addi	r18,r18,-1
 400df88:	94ad883a 	add	r22,r18,r18
 400df8c:	b5ad883a 	add	r22,r22,r22
 400df90:	2c400504 	addi	r17,r5,20
 400df94:	8da9883a 	add	r20,r17,r22
 400df98:	25400504 	addi	r21,r4,20
 400df9c:	282f883a 	mov	r23,r5
 400dfa0:	adad883a 	add	r22,r21,r22
 400dfa4:	a1400017 	ldw	r5,0(r20)
 400dfa8:	2021883a 	mov	r16,r4
 400dfac:	b1000017 	ldw	r4,0(r22)
 400dfb0:	29400044 	addi	r5,r5,1
 400dfb4:	400a3b80 	call	400a3b8 <__udivsi3>
 400dfb8:	1027883a 	mov	r19,r2
 400dfbc:	10002c26 	beq	r2,zero,400e070 <quorem+0x120>
 400dfc0:	a813883a 	mov	r9,r21
 400dfc4:	880b883a 	mov	r5,r17
 400dfc8:	0009883a 	mov	r4,zero
 400dfcc:	000d883a 	mov	r6,zero
 400dfd0:	2a000017 	ldw	r8,0(r5)
 400dfd4:	49c00017 	ldw	r7,0(r9)
 400dfd8:	29400104 	addi	r5,r5,4
 400dfdc:	40bfffcc 	andi	r2,r8,65535
 400dfe0:	14c5383a 	mul	r2,r2,r19
 400dfe4:	4010d43a 	srli	r8,r8,16
 400dfe8:	38ffffcc 	andi	r3,r7,65535
 400dfec:	1105883a 	add	r2,r2,r4
 400dff0:	1008d43a 	srli	r4,r2,16
 400dff4:	44d1383a 	mul	r8,r8,r19
 400dff8:	198d883a 	add	r6,r3,r6
 400dffc:	10ffffcc 	andi	r3,r2,65535
 400e000:	30c7c83a 	sub	r3,r6,r3
 400e004:	380ed43a 	srli	r7,r7,16
 400e008:	4105883a 	add	r2,r8,r4
 400e00c:	180dd43a 	srai	r6,r3,16
 400e010:	113fffcc 	andi	r4,r2,65535
 400e014:	390fc83a 	sub	r7,r7,r4
 400e018:	398d883a 	add	r6,r7,r6
 400e01c:	300e943a 	slli	r7,r6,16
 400e020:	18ffffcc 	andi	r3,r3,65535
 400e024:	1008d43a 	srli	r4,r2,16
 400e028:	38ceb03a 	or	r7,r7,r3
 400e02c:	49c00015 	stw	r7,0(r9)
 400e030:	300dd43a 	srai	r6,r6,16
 400e034:	4a400104 	addi	r9,r9,4
 400e038:	a17fe52e 	bgeu	r20,r5,400dfd0 <__alt_data_end+0xfc00dfd0>
 400e03c:	b0800017 	ldw	r2,0(r22)
 400e040:	10000b1e 	bne	r2,zero,400e070 <quorem+0x120>
 400e044:	b0bfff04 	addi	r2,r22,-4
 400e048:	a880082e 	bgeu	r21,r2,400e06c <quorem+0x11c>
 400e04c:	b0ffff17 	ldw	r3,-4(r22)
 400e050:	18000326 	beq	r3,zero,400e060 <quorem+0x110>
 400e054:	00000506 	br	400e06c <quorem+0x11c>
 400e058:	10c00017 	ldw	r3,0(r2)
 400e05c:	1800031e 	bne	r3,zero,400e06c <quorem+0x11c>
 400e060:	10bfff04 	addi	r2,r2,-4
 400e064:	94bfffc4 	addi	r18,r18,-1
 400e068:	a8bffb36 	bltu	r21,r2,400e058 <__alt_data_end+0xfc00e058>
 400e06c:	84800415 	stw	r18,16(r16)
 400e070:	b80b883a 	mov	r5,r23
 400e074:	8009883a 	mov	r4,r16
 400e078:	40116380 	call	4011638 <__mcmp>
 400e07c:	10002616 	blt	r2,zero,400e118 <quorem+0x1c8>
 400e080:	9cc00044 	addi	r19,r19,1
 400e084:	a805883a 	mov	r2,r21
 400e088:	000b883a 	mov	r5,zero
 400e08c:	11000017 	ldw	r4,0(r2)
 400e090:	89800017 	ldw	r6,0(r17)
 400e094:	10800104 	addi	r2,r2,4
 400e098:	20ffffcc 	andi	r3,r4,65535
 400e09c:	194b883a 	add	r5,r3,r5
 400e0a0:	30ffffcc 	andi	r3,r6,65535
 400e0a4:	28c7c83a 	sub	r3,r5,r3
 400e0a8:	300cd43a 	srli	r6,r6,16
 400e0ac:	2008d43a 	srli	r4,r4,16
 400e0b0:	180bd43a 	srai	r5,r3,16
 400e0b4:	18ffffcc 	andi	r3,r3,65535
 400e0b8:	2189c83a 	sub	r4,r4,r6
 400e0bc:	2149883a 	add	r4,r4,r5
 400e0c0:	200c943a 	slli	r6,r4,16
 400e0c4:	8c400104 	addi	r17,r17,4
 400e0c8:	200bd43a 	srai	r5,r4,16
 400e0cc:	30c6b03a 	or	r3,r6,r3
 400e0d0:	10ffff15 	stw	r3,-4(r2)
 400e0d4:	a47fed2e 	bgeu	r20,r17,400e08c <__alt_data_end+0xfc00e08c>
 400e0d8:	9485883a 	add	r2,r18,r18
 400e0dc:	1085883a 	add	r2,r2,r2
 400e0e0:	a887883a 	add	r3,r21,r2
 400e0e4:	18800017 	ldw	r2,0(r3)
 400e0e8:	10000b1e 	bne	r2,zero,400e118 <quorem+0x1c8>
 400e0ec:	18bfff04 	addi	r2,r3,-4
 400e0f0:	a880082e 	bgeu	r21,r2,400e114 <quorem+0x1c4>
 400e0f4:	18ffff17 	ldw	r3,-4(r3)
 400e0f8:	18000326 	beq	r3,zero,400e108 <quorem+0x1b8>
 400e0fc:	00000506 	br	400e114 <quorem+0x1c4>
 400e100:	10c00017 	ldw	r3,0(r2)
 400e104:	1800031e 	bne	r3,zero,400e114 <quorem+0x1c4>
 400e108:	10bfff04 	addi	r2,r2,-4
 400e10c:	94bfffc4 	addi	r18,r18,-1
 400e110:	a8bffb36 	bltu	r21,r2,400e100 <__alt_data_end+0xfc00e100>
 400e114:	84800415 	stw	r18,16(r16)
 400e118:	9805883a 	mov	r2,r19
 400e11c:	dfc00817 	ldw	ra,32(sp)
 400e120:	ddc00717 	ldw	r23,28(sp)
 400e124:	dd800617 	ldw	r22,24(sp)
 400e128:	dd400517 	ldw	r21,20(sp)
 400e12c:	dd000417 	ldw	r20,16(sp)
 400e130:	dcc00317 	ldw	r19,12(sp)
 400e134:	dc800217 	ldw	r18,8(sp)
 400e138:	dc400117 	ldw	r17,4(sp)
 400e13c:	dc000017 	ldw	r16,0(sp)
 400e140:	dec00904 	addi	sp,sp,36
 400e144:	f800283a 	ret
 400e148:	0005883a 	mov	r2,zero
 400e14c:	003ff306 	br	400e11c <__alt_data_end+0xfc00e11c>

0400e150 <_dtoa_r>:
 400e150:	20801017 	ldw	r2,64(r4)
 400e154:	deffde04 	addi	sp,sp,-136
 400e158:	df002015 	stw	fp,128(sp)
 400e15c:	dcc01b15 	stw	r19,108(sp)
 400e160:	dc801a15 	stw	r18,104(sp)
 400e164:	dc401915 	stw	r17,100(sp)
 400e168:	dc001815 	stw	r16,96(sp)
 400e16c:	dfc02115 	stw	ra,132(sp)
 400e170:	ddc01f15 	stw	r23,124(sp)
 400e174:	dd801e15 	stw	r22,120(sp)
 400e178:	dd401d15 	stw	r21,116(sp)
 400e17c:	dd001c15 	stw	r20,112(sp)
 400e180:	d9c00315 	stw	r7,12(sp)
 400e184:	2039883a 	mov	fp,r4
 400e188:	3023883a 	mov	r17,r6
 400e18c:	2825883a 	mov	r18,r5
 400e190:	dc002417 	ldw	r16,144(sp)
 400e194:	3027883a 	mov	r19,r6
 400e198:	10000826 	beq	r2,zero,400e1bc <_dtoa_r+0x6c>
 400e19c:	21801117 	ldw	r6,68(r4)
 400e1a0:	00c00044 	movi	r3,1
 400e1a4:	100b883a 	mov	r5,r2
 400e1a8:	1986983a 	sll	r3,r3,r6
 400e1ac:	11800115 	stw	r6,4(r2)
 400e1b0:	10c00215 	stw	r3,8(r2)
 400e1b4:	4010e180 	call	4010e18 <_Bfree>
 400e1b8:	e0001015 	stw	zero,64(fp)
 400e1bc:	88002e16 	blt	r17,zero,400e278 <_dtoa_r+0x128>
 400e1c0:	80000015 	stw	zero,0(r16)
 400e1c4:	889ffc2c 	andhi	r2,r17,32752
 400e1c8:	00dffc34 	movhi	r3,32752
 400e1cc:	10c01c26 	beq	r2,r3,400e240 <_dtoa_r+0xf0>
 400e1d0:	000d883a 	mov	r6,zero
 400e1d4:	000f883a 	mov	r7,zero
 400e1d8:	9009883a 	mov	r4,r18
 400e1dc:	980b883a 	mov	r5,r19
 400e1e0:	40160400 	call	4016040 <__eqdf2>
 400e1e4:	10002b1e 	bne	r2,zero,400e294 <_dtoa_r+0x144>
 400e1e8:	d9c02317 	ldw	r7,140(sp)
 400e1ec:	00800044 	movi	r2,1
 400e1f0:	38800015 	stw	r2,0(r7)
 400e1f4:	d8802517 	ldw	r2,148(sp)
 400e1f8:	10019e26 	beq	r2,zero,400e874 <_dtoa_r+0x724>
 400e1fc:	d8c02517 	ldw	r3,148(sp)
 400e200:	008100b4 	movhi	r2,1026
 400e204:	10a9dc44 	addi	r2,r2,-22671
 400e208:	18800015 	stw	r2,0(r3)
 400e20c:	10bfffc4 	addi	r2,r2,-1
 400e210:	dfc02117 	ldw	ra,132(sp)
 400e214:	df002017 	ldw	fp,128(sp)
 400e218:	ddc01f17 	ldw	r23,124(sp)
 400e21c:	dd801e17 	ldw	r22,120(sp)
 400e220:	dd401d17 	ldw	r21,116(sp)
 400e224:	dd001c17 	ldw	r20,112(sp)
 400e228:	dcc01b17 	ldw	r19,108(sp)
 400e22c:	dc801a17 	ldw	r18,104(sp)
 400e230:	dc401917 	ldw	r17,100(sp)
 400e234:	dc001817 	ldw	r16,96(sp)
 400e238:	dec02204 	addi	sp,sp,136
 400e23c:	f800283a 	ret
 400e240:	d8c02317 	ldw	r3,140(sp)
 400e244:	0089c3c4 	movi	r2,9999
 400e248:	18800015 	stw	r2,0(r3)
 400e24c:	90017726 	beq	r18,zero,400e82c <_dtoa_r+0x6dc>
 400e250:	008100b4 	movhi	r2,1026
 400e254:	10a9e804 	addi	r2,r2,-22624
 400e258:	d9002517 	ldw	r4,148(sp)
 400e25c:	203fec26 	beq	r4,zero,400e210 <__alt_data_end+0xfc00e210>
 400e260:	10c000c7 	ldb	r3,3(r2)
 400e264:	1801781e 	bne	r3,zero,400e848 <_dtoa_r+0x6f8>
 400e268:	10c000c4 	addi	r3,r2,3
 400e26c:	d9802517 	ldw	r6,148(sp)
 400e270:	30c00015 	stw	r3,0(r6)
 400e274:	003fe606 	br	400e210 <__alt_data_end+0xfc00e210>
 400e278:	04e00034 	movhi	r19,32768
 400e27c:	9cffffc4 	addi	r19,r19,-1
 400e280:	00800044 	movi	r2,1
 400e284:	8ce6703a 	and	r19,r17,r19
 400e288:	80800015 	stw	r2,0(r16)
 400e28c:	9823883a 	mov	r17,r19
 400e290:	003fcc06 	br	400e1c4 <__alt_data_end+0xfc00e1c4>
 400e294:	d8800204 	addi	r2,sp,8
 400e298:	d8800015 	stw	r2,0(sp)
 400e29c:	d9c00104 	addi	r7,sp,4
 400e2a0:	900b883a 	mov	r5,r18
 400e2a4:	980d883a 	mov	r6,r19
 400e2a8:	e009883a 	mov	r4,fp
 400e2ac:	8820d53a 	srli	r16,r17,20
 400e2b0:	4011a040 	call	4011a04 <__d2b>
 400e2b4:	d8800915 	stw	r2,36(sp)
 400e2b8:	8001651e 	bne	r16,zero,400e850 <_dtoa_r+0x700>
 400e2bc:	dd800217 	ldw	r22,8(sp)
 400e2c0:	dc000117 	ldw	r16,4(sp)
 400e2c4:	00800804 	movi	r2,32
 400e2c8:	b421883a 	add	r16,r22,r16
 400e2cc:	80c10c84 	addi	r3,r16,1074
 400e2d0:	10c2d10e 	bge	r2,r3,400ee18 <_dtoa_r+0xcc8>
 400e2d4:	00801004 	movi	r2,64
 400e2d8:	81010484 	addi	r4,r16,1042
 400e2dc:	10c7c83a 	sub	r3,r2,r3
 400e2e0:	9108d83a 	srl	r4,r18,r4
 400e2e4:	88e2983a 	sll	r17,r17,r3
 400e2e8:	2448b03a 	or	r4,r4,r17
 400e2ec:	40174080 	call	4017408 <__floatunsidf>
 400e2f0:	017f8434 	movhi	r5,65040
 400e2f4:	01800044 	movi	r6,1
 400e2f8:	1009883a 	mov	r4,r2
 400e2fc:	194b883a 	add	r5,r3,r5
 400e300:	843fffc4 	addi	r16,r16,-1
 400e304:	d9801115 	stw	r6,68(sp)
 400e308:	000d883a 	mov	r6,zero
 400e30c:	01cffe34 	movhi	r7,16376
 400e310:	40169b00 	call	40169b0 <__subdf3>
 400e314:	0198dbf4 	movhi	r6,25455
 400e318:	01cff4f4 	movhi	r7,16339
 400e31c:	3190d844 	addi	r6,r6,17249
 400e320:	39e1e9c4 	addi	r7,r7,-30809
 400e324:	1009883a 	mov	r4,r2
 400e328:	180b883a 	mov	r5,r3
 400e32c:	40162980 	call	4016298 <__muldf3>
 400e330:	01a2d874 	movhi	r6,35681
 400e334:	01cff1f4 	movhi	r7,16327
 400e338:	31b22cc4 	addi	r6,r6,-14157
 400e33c:	39e28a04 	addi	r7,r7,-30168
 400e340:	180b883a 	mov	r5,r3
 400e344:	1009883a 	mov	r4,r2
 400e348:	4014eac0 	call	4014eac <__adddf3>
 400e34c:	8009883a 	mov	r4,r16
 400e350:	1029883a 	mov	r20,r2
 400e354:	1823883a 	mov	r17,r3
 400e358:	401732c0 	call	401732c <__floatsidf>
 400e35c:	019427f4 	movhi	r6,20639
 400e360:	01cff4f4 	movhi	r7,16339
 400e364:	319e7ec4 	addi	r6,r6,31227
 400e368:	39d104c4 	addi	r7,r7,17427
 400e36c:	1009883a 	mov	r4,r2
 400e370:	180b883a 	mov	r5,r3
 400e374:	40162980 	call	4016298 <__muldf3>
 400e378:	100d883a 	mov	r6,r2
 400e37c:	180f883a 	mov	r7,r3
 400e380:	a009883a 	mov	r4,r20
 400e384:	880b883a 	mov	r5,r17
 400e388:	4014eac0 	call	4014eac <__adddf3>
 400e38c:	1009883a 	mov	r4,r2
 400e390:	180b883a 	mov	r5,r3
 400e394:	1029883a 	mov	r20,r2
 400e398:	1823883a 	mov	r17,r3
 400e39c:	40172ac0 	call	40172ac <__fixdfsi>
 400e3a0:	000d883a 	mov	r6,zero
 400e3a4:	000f883a 	mov	r7,zero
 400e3a8:	a009883a 	mov	r4,r20
 400e3ac:	880b883a 	mov	r5,r17
 400e3b0:	d8800515 	stw	r2,20(sp)
 400e3b4:	40161a40 	call	40161a4 <__ledf2>
 400e3b8:	10028716 	blt	r2,zero,400edd8 <_dtoa_r+0xc88>
 400e3bc:	d8c00517 	ldw	r3,20(sp)
 400e3c0:	00800584 	movi	r2,22
 400e3c4:	10c27536 	bltu	r2,r3,400ed9c <_dtoa_r+0xc4c>
 400e3c8:	180490fa 	slli	r2,r3,3
 400e3cc:	00c100b4 	movhi	r3,1026
 400e3d0:	18ea0304 	addi	r3,r3,-22516
 400e3d4:	1885883a 	add	r2,r3,r2
 400e3d8:	11000017 	ldw	r4,0(r2)
 400e3dc:	11400117 	ldw	r5,4(r2)
 400e3e0:	900d883a 	mov	r6,r18
 400e3e4:	980f883a 	mov	r7,r19
 400e3e8:	40160c80 	call	40160c8 <__gedf2>
 400e3ec:	00828d0e 	bge	zero,r2,400ee24 <_dtoa_r+0xcd4>
 400e3f0:	d9000517 	ldw	r4,20(sp)
 400e3f4:	d8000e15 	stw	zero,56(sp)
 400e3f8:	213fffc4 	addi	r4,r4,-1
 400e3fc:	d9000515 	stw	r4,20(sp)
 400e400:	b42dc83a 	sub	r22,r22,r16
 400e404:	b5bfffc4 	addi	r22,r22,-1
 400e408:	b0026f16 	blt	r22,zero,400edc8 <_dtoa_r+0xc78>
 400e40c:	d8000815 	stw	zero,32(sp)
 400e410:	d9c00517 	ldw	r7,20(sp)
 400e414:	38026416 	blt	r7,zero,400eda8 <_dtoa_r+0xc58>
 400e418:	b1ed883a 	add	r22,r22,r7
 400e41c:	d9c00d15 	stw	r7,52(sp)
 400e420:	d8000a15 	stw	zero,40(sp)
 400e424:	d9800317 	ldw	r6,12(sp)
 400e428:	00800244 	movi	r2,9
 400e42c:	11811436 	bltu	r2,r6,400e880 <_dtoa_r+0x730>
 400e430:	00800144 	movi	r2,5
 400e434:	1184e10e 	bge	r2,r6,400f7bc <_dtoa_r+0x166c>
 400e438:	31bfff04 	addi	r6,r6,-4
 400e43c:	d9800315 	stw	r6,12(sp)
 400e440:	0023883a 	mov	r17,zero
 400e444:	d9800317 	ldw	r6,12(sp)
 400e448:	008000c4 	movi	r2,3
 400e44c:	30836726 	beq	r6,r2,400f1ec <_dtoa_r+0x109c>
 400e450:	1183410e 	bge	r2,r6,400f158 <_dtoa_r+0x1008>
 400e454:	d9c00317 	ldw	r7,12(sp)
 400e458:	00800104 	movi	r2,4
 400e45c:	38827c26 	beq	r7,r2,400ee50 <_dtoa_r+0xd00>
 400e460:	00800144 	movi	r2,5
 400e464:	3884c41e 	bne	r7,r2,400f778 <_dtoa_r+0x1628>
 400e468:	00800044 	movi	r2,1
 400e46c:	d8800b15 	stw	r2,44(sp)
 400e470:	d8c00517 	ldw	r3,20(sp)
 400e474:	d9002217 	ldw	r4,136(sp)
 400e478:	1907883a 	add	r3,r3,r4
 400e47c:	19800044 	addi	r6,r3,1
 400e480:	d8c00c15 	stw	r3,48(sp)
 400e484:	d9800615 	stw	r6,24(sp)
 400e488:	0183a40e 	bge	zero,r6,400f31c <_dtoa_r+0x11cc>
 400e48c:	d9800617 	ldw	r6,24(sp)
 400e490:	3021883a 	mov	r16,r6
 400e494:	e0001115 	stw	zero,68(fp)
 400e498:	008005c4 	movi	r2,23
 400e49c:	1184c92e 	bgeu	r2,r6,400f7c4 <_dtoa_r+0x1674>
 400e4a0:	00c00044 	movi	r3,1
 400e4a4:	00800104 	movi	r2,4
 400e4a8:	1085883a 	add	r2,r2,r2
 400e4ac:	11000504 	addi	r4,r2,20
 400e4b0:	180b883a 	mov	r5,r3
 400e4b4:	18c00044 	addi	r3,r3,1
 400e4b8:	313ffb2e 	bgeu	r6,r4,400e4a8 <__alt_data_end+0xfc00e4a8>
 400e4bc:	e1401115 	stw	r5,68(fp)
 400e4c0:	e009883a 	mov	r4,fp
 400e4c4:	4010d700 	call	4010d70 <_Balloc>
 400e4c8:	d8800715 	stw	r2,28(sp)
 400e4cc:	e0801015 	stw	r2,64(fp)
 400e4d0:	00800384 	movi	r2,14
 400e4d4:	1400f736 	bltu	r2,r16,400e8b4 <_dtoa_r+0x764>
 400e4d8:	8800f626 	beq	r17,zero,400e8b4 <_dtoa_r+0x764>
 400e4dc:	d9c00517 	ldw	r7,20(sp)
 400e4e0:	01c39a0e 	bge	zero,r7,400f34c <_dtoa_r+0x11fc>
 400e4e4:	388003cc 	andi	r2,r7,15
 400e4e8:	100490fa 	slli	r2,r2,3
 400e4ec:	382bd13a 	srai	r21,r7,4
 400e4f0:	00c100b4 	movhi	r3,1026
 400e4f4:	18ea0304 	addi	r3,r3,-22516
 400e4f8:	1885883a 	add	r2,r3,r2
 400e4fc:	a8c0040c 	andi	r3,r21,16
 400e500:	12400017 	ldw	r9,0(r2)
 400e504:	12000117 	ldw	r8,4(r2)
 400e508:	18037926 	beq	r3,zero,400f2f0 <_dtoa_r+0x11a0>
 400e50c:	008100b4 	movhi	r2,1026
 400e510:	10a9f904 	addi	r2,r2,-22556
 400e514:	11800817 	ldw	r6,32(r2)
 400e518:	11c00917 	ldw	r7,36(r2)
 400e51c:	9009883a 	mov	r4,r18
 400e520:	980b883a 	mov	r5,r19
 400e524:	da001715 	stw	r8,92(sp)
 400e528:	da401615 	stw	r9,88(sp)
 400e52c:	40157580 	call	4015758 <__divdf3>
 400e530:	da001717 	ldw	r8,92(sp)
 400e534:	da401617 	ldw	r9,88(sp)
 400e538:	ad4003cc 	andi	r21,r21,15
 400e53c:	040000c4 	movi	r16,3
 400e540:	1023883a 	mov	r17,r2
 400e544:	1829883a 	mov	r20,r3
 400e548:	a8001126 	beq	r21,zero,400e590 <_dtoa_r+0x440>
 400e54c:	05c100b4 	movhi	r23,1026
 400e550:	bde9f904 	addi	r23,r23,-22556
 400e554:	4805883a 	mov	r2,r9
 400e558:	4007883a 	mov	r3,r8
 400e55c:	a980004c 	andi	r6,r21,1
 400e560:	1009883a 	mov	r4,r2
 400e564:	a82bd07a 	srai	r21,r21,1
 400e568:	180b883a 	mov	r5,r3
 400e56c:	30000426 	beq	r6,zero,400e580 <_dtoa_r+0x430>
 400e570:	b9800017 	ldw	r6,0(r23)
 400e574:	b9c00117 	ldw	r7,4(r23)
 400e578:	84000044 	addi	r16,r16,1
 400e57c:	40162980 	call	4016298 <__muldf3>
 400e580:	bdc00204 	addi	r23,r23,8
 400e584:	a83ff51e 	bne	r21,zero,400e55c <__alt_data_end+0xfc00e55c>
 400e588:	1013883a 	mov	r9,r2
 400e58c:	1811883a 	mov	r8,r3
 400e590:	480d883a 	mov	r6,r9
 400e594:	400f883a 	mov	r7,r8
 400e598:	8809883a 	mov	r4,r17
 400e59c:	a00b883a 	mov	r5,r20
 400e5a0:	40157580 	call	4015758 <__divdf3>
 400e5a4:	d8800f15 	stw	r2,60(sp)
 400e5a8:	d8c01015 	stw	r3,64(sp)
 400e5ac:	d8c00e17 	ldw	r3,56(sp)
 400e5b0:	18000626 	beq	r3,zero,400e5cc <_dtoa_r+0x47c>
 400e5b4:	d9000f17 	ldw	r4,60(sp)
 400e5b8:	d9401017 	ldw	r5,64(sp)
 400e5bc:	000d883a 	mov	r6,zero
 400e5c0:	01cffc34 	movhi	r7,16368
 400e5c4:	40161a40 	call	40161a4 <__ledf2>
 400e5c8:	10040b16 	blt	r2,zero,400f5f8 <_dtoa_r+0x14a8>
 400e5cc:	8009883a 	mov	r4,r16
 400e5d0:	401732c0 	call	401732c <__floatsidf>
 400e5d4:	d9800f17 	ldw	r6,60(sp)
 400e5d8:	d9c01017 	ldw	r7,64(sp)
 400e5dc:	1009883a 	mov	r4,r2
 400e5e0:	180b883a 	mov	r5,r3
 400e5e4:	40162980 	call	4016298 <__muldf3>
 400e5e8:	000d883a 	mov	r6,zero
 400e5ec:	01d00734 	movhi	r7,16412
 400e5f0:	1009883a 	mov	r4,r2
 400e5f4:	180b883a 	mov	r5,r3
 400e5f8:	4014eac0 	call	4014eac <__adddf3>
 400e5fc:	1021883a 	mov	r16,r2
 400e600:	d8800617 	ldw	r2,24(sp)
 400e604:	047f3034 	movhi	r17,64704
 400e608:	1c63883a 	add	r17,r3,r17
 400e60c:	10031826 	beq	r2,zero,400f270 <_dtoa_r+0x1120>
 400e610:	d8c00517 	ldw	r3,20(sp)
 400e614:	db000617 	ldw	r12,24(sp)
 400e618:	d8c01315 	stw	r3,76(sp)
 400e61c:	d9000b17 	ldw	r4,44(sp)
 400e620:	20038f26 	beq	r4,zero,400f460 <_dtoa_r+0x1310>
 400e624:	60bfffc4 	addi	r2,r12,-1
 400e628:	100490fa 	slli	r2,r2,3
 400e62c:	00c100b4 	movhi	r3,1026
 400e630:	18ea0304 	addi	r3,r3,-22516
 400e634:	1885883a 	add	r2,r3,r2
 400e638:	11800017 	ldw	r6,0(r2)
 400e63c:	11c00117 	ldw	r7,4(r2)
 400e640:	d8800717 	ldw	r2,28(sp)
 400e644:	0009883a 	mov	r4,zero
 400e648:	014ff834 	movhi	r5,16352
 400e64c:	db001615 	stw	r12,88(sp)
 400e650:	15c00044 	addi	r23,r2,1
 400e654:	40157580 	call	4015758 <__divdf3>
 400e658:	800d883a 	mov	r6,r16
 400e65c:	880f883a 	mov	r7,r17
 400e660:	1009883a 	mov	r4,r2
 400e664:	180b883a 	mov	r5,r3
 400e668:	40169b00 	call	40169b0 <__subdf3>
 400e66c:	d9401017 	ldw	r5,64(sp)
 400e670:	d9000f17 	ldw	r4,60(sp)
 400e674:	102b883a 	mov	r21,r2
 400e678:	d8c01215 	stw	r3,72(sp)
 400e67c:	40172ac0 	call	40172ac <__fixdfsi>
 400e680:	1009883a 	mov	r4,r2
 400e684:	1029883a 	mov	r20,r2
 400e688:	401732c0 	call	401732c <__floatsidf>
 400e68c:	d9000f17 	ldw	r4,60(sp)
 400e690:	d9401017 	ldw	r5,64(sp)
 400e694:	100d883a 	mov	r6,r2
 400e698:	180f883a 	mov	r7,r3
 400e69c:	40169b00 	call	40169b0 <__subdf3>
 400e6a0:	1823883a 	mov	r17,r3
 400e6a4:	d8c00717 	ldw	r3,28(sp)
 400e6a8:	d9401217 	ldw	r5,72(sp)
 400e6ac:	a2000c04 	addi	r8,r20,48
 400e6b0:	1021883a 	mov	r16,r2
 400e6b4:	1a000005 	stb	r8,0(r3)
 400e6b8:	800d883a 	mov	r6,r16
 400e6bc:	880f883a 	mov	r7,r17
 400e6c0:	a809883a 	mov	r4,r21
 400e6c4:	4029883a 	mov	r20,r8
 400e6c8:	40160c80 	call	40160c8 <__gedf2>
 400e6cc:	00841d16 	blt	zero,r2,400f744 <_dtoa_r+0x15f4>
 400e6d0:	800d883a 	mov	r6,r16
 400e6d4:	880f883a 	mov	r7,r17
 400e6d8:	0009883a 	mov	r4,zero
 400e6dc:	014ffc34 	movhi	r5,16368
 400e6e0:	40169b00 	call	40169b0 <__subdf3>
 400e6e4:	d9401217 	ldw	r5,72(sp)
 400e6e8:	100d883a 	mov	r6,r2
 400e6ec:	180f883a 	mov	r7,r3
 400e6f0:	a809883a 	mov	r4,r21
 400e6f4:	40160c80 	call	40160c8 <__gedf2>
 400e6f8:	db001617 	ldw	r12,88(sp)
 400e6fc:	00840e16 	blt	zero,r2,400f738 <_dtoa_r+0x15e8>
 400e700:	00800044 	movi	r2,1
 400e704:	13006b0e 	bge	r2,r12,400e8b4 <_dtoa_r+0x764>
 400e708:	d9000717 	ldw	r4,28(sp)
 400e70c:	dd800f15 	stw	r22,60(sp)
 400e710:	dcc01015 	stw	r19,64(sp)
 400e714:	2319883a 	add	r12,r4,r12
 400e718:	dcc01217 	ldw	r19,72(sp)
 400e71c:	602d883a 	mov	r22,r12
 400e720:	dc801215 	stw	r18,72(sp)
 400e724:	b825883a 	mov	r18,r23
 400e728:	00000906 	br	400e750 <_dtoa_r+0x600>
 400e72c:	40169b00 	call	40169b0 <__subdf3>
 400e730:	a80d883a 	mov	r6,r21
 400e734:	980f883a 	mov	r7,r19
 400e738:	1009883a 	mov	r4,r2
 400e73c:	180b883a 	mov	r5,r3
 400e740:	40161a40 	call	40161a4 <__ledf2>
 400e744:	1003e816 	blt	r2,zero,400f6e8 <_dtoa_r+0x1598>
 400e748:	b825883a 	mov	r18,r23
 400e74c:	bd83e926 	beq	r23,r22,400f6f4 <_dtoa_r+0x15a4>
 400e750:	a809883a 	mov	r4,r21
 400e754:	980b883a 	mov	r5,r19
 400e758:	000d883a 	mov	r6,zero
 400e75c:	01d00934 	movhi	r7,16420
 400e760:	40162980 	call	4016298 <__muldf3>
 400e764:	000d883a 	mov	r6,zero
 400e768:	01d00934 	movhi	r7,16420
 400e76c:	8009883a 	mov	r4,r16
 400e770:	880b883a 	mov	r5,r17
 400e774:	102b883a 	mov	r21,r2
 400e778:	1827883a 	mov	r19,r3
 400e77c:	40162980 	call	4016298 <__muldf3>
 400e780:	180b883a 	mov	r5,r3
 400e784:	1009883a 	mov	r4,r2
 400e788:	1821883a 	mov	r16,r3
 400e78c:	1023883a 	mov	r17,r2
 400e790:	40172ac0 	call	40172ac <__fixdfsi>
 400e794:	1009883a 	mov	r4,r2
 400e798:	1029883a 	mov	r20,r2
 400e79c:	401732c0 	call	401732c <__floatsidf>
 400e7a0:	8809883a 	mov	r4,r17
 400e7a4:	800b883a 	mov	r5,r16
 400e7a8:	100d883a 	mov	r6,r2
 400e7ac:	180f883a 	mov	r7,r3
 400e7b0:	40169b00 	call	40169b0 <__subdf3>
 400e7b4:	a5000c04 	addi	r20,r20,48
 400e7b8:	a80d883a 	mov	r6,r21
 400e7bc:	980f883a 	mov	r7,r19
 400e7c0:	1009883a 	mov	r4,r2
 400e7c4:	180b883a 	mov	r5,r3
 400e7c8:	95000005 	stb	r20,0(r18)
 400e7cc:	1021883a 	mov	r16,r2
 400e7d0:	1823883a 	mov	r17,r3
 400e7d4:	40161a40 	call	40161a4 <__ledf2>
 400e7d8:	bdc00044 	addi	r23,r23,1
 400e7dc:	800d883a 	mov	r6,r16
 400e7e0:	880f883a 	mov	r7,r17
 400e7e4:	0009883a 	mov	r4,zero
 400e7e8:	014ffc34 	movhi	r5,16368
 400e7ec:	103fcf0e 	bge	r2,zero,400e72c <__alt_data_end+0xfc00e72c>
 400e7f0:	d8c01317 	ldw	r3,76(sp)
 400e7f4:	d8c00515 	stw	r3,20(sp)
 400e7f8:	d9400917 	ldw	r5,36(sp)
 400e7fc:	e009883a 	mov	r4,fp
 400e800:	4010e180 	call	4010e18 <_Bfree>
 400e804:	d9000517 	ldw	r4,20(sp)
 400e808:	d9802317 	ldw	r6,140(sp)
 400e80c:	d9c02517 	ldw	r7,148(sp)
 400e810:	b8000005 	stb	zero,0(r23)
 400e814:	20800044 	addi	r2,r4,1
 400e818:	30800015 	stw	r2,0(r6)
 400e81c:	3802aa26 	beq	r7,zero,400f2c8 <_dtoa_r+0x1178>
 400e820:	3dc00015 	stw	r23,0(r7)
 400e824:	d8800717 	ldw	r2,28(sp)
 400e828:	003e7906 	br	400e210 <__alt_data_end+0xfc00e210>
 400e82c:	00800434 	movhi	r2,16
 400e830:	10bfffc4 	addi	r2,r2,-1
 400e834:	88a2703a 	and	r17,r17,r2
 400e838:	883e851e 	bne	r17,zero,400e250 <__alt_data_end+0xfc00e250>
 400e83c:	008100b4 	movhi	r2,1026
 400e840:	10a9e504 	addi	r2,r2,-22636
 400e844:	003e8406 	br	400e258 <__alt_data_end+0xfc00e258>
 400e848:	10c00204 	addi	r3,r2,8
 400e84c:	003e8706 	br	400e26c <__alt_data_end+0xfc00e26c>
 400e850:	01400434 	movhi	r5,16
 400e854:	297fffc4 	addi	r5,r5,-1
 400e858:	994a703a 	and	r5,r19,r5
 400e85c:	9009883a 	mov	r4,r18
 400e860:	843f0044 	addi	r16,r16,-1023
 400e864:	294ffc34 	orhi	r5,r5,16368
 400e868:	dd800217 	ldw	r22,8(sp)
 400e86c:	d8001115 	stw	zero,68(sp)
 400e870:	003ea506 	br	400e308 <__alt_data_end+0xfc00e308>
 400e874:	008100b4 	movhi	r2,1026
 400e878:	10a9dc04 	addi	r2,r2,-22672
 400e87c:	003e6406 	br	400e210 <__alt_data_end+0xfc00e210>
 400e880:	e0001115 	stw	zero,68(fp)
 400e884:	000b883a 	mov	r5,zero
 400e888:	e009883a 	mov	r4,fp
 400e88c:	4010d700 	call	4010d70 <_Balloc>
 400e890:	01bfffc4 	movi	r6,-1
 400e894:	01c00044 	movi	r7,1
 400e898:	d8800715 	stw	r2,28(sp)
 400e89c:	d9800c15 	stw	r6,48(sp)
 400e8a0:	e0801015 	stw	r2,64(fp)
 400e8a4:	d8000315 	stw	zero,12(sp)
 400e8a8:	d9c00b15 	stw	r7,44(sp)
 400e8ac:	d9800615 	stw	r6,24(sp)
 400e8b0:	d8002215 	stw	zero,136(sp)
 400e8b4:	d8800117 	ldw	r2,4(sp)
 400e8b8:	10008916 	blt	r2,zero,400eae0 <_dtoa_r+0x990>
 400e8bc:	d9000517 	ldw	r4,20(sp)
 400e8c0:	00c00384 	movi	r3,14
 400e8c4:	19008616 	blt	r3,r4,400eae0 <_dtoa_r+0x990>
 400e8c8:	200490fa 	slli	r2,r4,3
 400e8cc:	00c100b4 	movhi	r3,1026
 400e8d0:	d9802217 	ldw	r6,136(sp)
 400e8d4:	18ea0304 	addi	r3,r3,-22516
 400e8d8:	1885883a 	add	r2,r3,r2
 400e8dc:	14000017 	ldw	r16,0(r2)
 400e8e0:	14400117 	ldw	r17,4(r2)
 400e8e4:	30016316 	blt	r6,zero,400ee74 <_dtoa_r+0xd24>
 400e8e8:	800d883a 	mov	r6,r16
 400e8ec:	880f883a 	mov	r7,r17
 400e8f0:	9009883a 	mov	r4,r18
 400e8f4:	980b883a 	mov	r5,r19
 400e8f8:	40157580 	call	4015758 <__divdf3>
 400e8fc:	180b883a 	mov	r5,r3
 400e900:	1009883a 	mov	r4,r2
 400e904:	40172ac0 	call	40172ac <__fixdfsi>
 400e908:	1009883a 	mov	r4,r2
 400e90c:	102b883a 	mov	r21,r2
 400e910:	401732c0 	call	401732c <__floatsidf>
 400e914:	800d883a 	mov	r6,r16
 400e918:	880f883a 	mov	r7,r17
 400e91c:	1009883a 	mov	r4,r2
 400e920:	180b883a 	mov	r5,r3
 400e924:	40162980 	call	4016298 <__muldf3>
 400e928:	100d883a 	mov	r6,r2
 400e92c:	180f883a 	mov	r7,r3
 400e930:	9009883a 	mov	r4,r18
 400e934:	980b883a 	mov	r5,r19
 400e938:	40169b00 	call	40169b0 <__subdf3>
 400e93c:	d9c00717 	ldw	r7,28(sp)
 400e940:	1009883a 	mov	r4,r2
 400e944:	a8800c04 	addi	r2,r21,48
 400e948:	38800005 	stb	r2,0(r7)
 400e94c:	3dc00044 	addi	r23,r7,1
 400e950:	d9c00617 	ldw	r7,24(sp)
 400e954:	01800044 	movi	r6,1
 400e958:	180b883a 	mov	r5,r3
 400e95c:	2005883a 	mov	r2,r4
 400e960:	39803826 	beq	r7,r6,400ea44 <_dtoa_r+0x8f4>
 400e964:	000d883a 	mov	r6,zero
 400e968:	01d00934 	movhi	r7,16420
 400e96c:	40162980 	call	4016298 <__muldf3>
 400e970:	000d883a 	mov	r6,zero
 400e974:	000f883a 	mov	r7,zero
 400e978:	1009883a 	mov	r4,r2
 400e97c:	180b883a 	mov	r5,r3
 400e980:	1025883a 	mov	r18,r2
 400e984:	1827883a 	mov	r19,r3
 400e988:	40160400 	call	4016040 <__eqdf2>
 400e98c:	103f9a26 	beq	r2,zero,400e7f8 <__alt_data_end+0xfc00e7f8>
 400e990:	d9c00617 	ldw	r7,24(sp)
 400e994:	d8c00717 	ldw	r3,28(sp)
 400e998:	b829883a 	mov	r20,r23
 400e99c:	38bfffc4 	addi	r2,r7,-1
 400e9a0:	18ad883a 	add	r22,r3,r2
 400e9a4:	00000a06 	br	400e9d0 <_dtoa_r+0x880>
 400e9a8:	40162980 	call	4016298 <__muldf3>
 400e9ac:	000d883a 	mov	r6,zero
 400e9b0:	000f883a 	mov	r7,zero
 400e9b4:	1009883a 	mov	r4,r2
 400e9b8:	180b883a 	mov	r5,r3
 400e9bc:	1025883a 	mov	r18,r2
 400e9c0:	1827883a 	mov	r19,r3
 400e9c4:	b829883a 	mov	r20,r23
 400e9c8:	40160400 	call	4016040 <__eqdf2>
 400e9cc:	103f8a26 	beq	r2,zero,400e7f8 <__alt_data_end+0xfc00e7f8>
 400e9d0:	800d883a 	mov	r6,r16
 400e9d4:	880f883a 	mov	r7,r17
 400e9d8:	9009883a 	mov	r4,r18
 400e9dc:	980b883a 	mov	r5,r19
 400e9e0:	40157580 	call	4015758 <__divdf3>
 400e9e4:	180b883a 	mov	r5,r3
 400e9e8:	1009883a 	mov	r4,r2
 400e9ec:	40172ac0 	call	40172ac <__fixdfsi>
 400e9f0:	1009883a 	mov	r4,r2
 400e9f4:	102b883a 	mov	r21,r2
 400e9f8:	401732c0 	call	401732c <__floatsidf>
 400e9fc:	800d883a 	mov	r6,r16
 400ea00:	880f883a 	mov	r7,r17
 400ea04:	1009883a 	mov	r4,r2
 400ea08:	180b883a 	mov	r5,r3
 400ea0c:	40162980 	call	4016298 <__muldf3>
 400ea10:	100d883a 	mov	r6,r2
 400ea14:	180f883a 	mov	r7,r3
 400ea18:	9009883a 	mov	r4,r18
 400ea1c:	980b883a 	mov	r5,r19
 400ea20:	40169b00 	call	40169b0 <__subdf3>
 400ea24:	aa000c04 	addi	r8,r21,48
 400ea28:	a2000005 	stb	r8,0(r20)
 400ea2c:	000d883a 	mov	r6,zero
 400ea30:	01d00934 	movhi	r7,16420
 400ea34:	1009883a 	mov	r4,r2
 400ea38:	180b883a 	mov	r5,r3
 400ea3c:	a5c00044 	addi	r23,r20,1
 400ea40:	b53fd91e 	bne	r22,r20,400e9a8 <__alt_data_end+0xfc00e9a8>
 400ea44:	100d883a 	mov	r6,r2
 400ea48:	180f883a 	mov	r7,r3
 400ea4c:	1009883a 	mov	r4,r2
 400ea50:	180b883a 	mov	r5,r3
 400ea54:	4014eac0 	call	4014eac <__adddf3>
 400ea58:	100d883a 	mov	r6,r2
 400ea5c:	180f883a 	mov	r7,r3
 400ea60:	8009883a 	mov	r4,r16
 400ea64:	880b883a 	mov	r5,r17
 400ea68:	1027883a 	mov	r19,r2
 400ea6c:	1825883a 	mov	r18,r3
 400ea70:	40161a40 	call	40161a4 <__ledf2>
 400ea74:	10000816 	blt	r2,zero,400ea98 <_dtoa_r+0x948>
 400ea78:	980d883a 	mov	r6,r19
 400ea7c:	900f883a 	mov	r7,r18
 400ea80:	8009883a 	mov	r4,r16
 400ea84:	880b883a 	mov	r5,r17
 400ea88:	40160400 	call	4016040 <__eqdf2>
 400ea8c:	103f5a1e 	bne	r2,zero,400e7f8 <__alt_data_end+0xfc00e7f8>
 400ea90:	ad40004c 	andi	r21,r21,1
 400ea94:	a83f5826 	beq	r21,zero,400e7f8 <__alt_data_end+0xfc00e7f8>
 400ea98:	bd3fffc3 	ldbu	r20,-1(r23)
 400ea9c:	b8bfffc4 	addi	r2,r23,-1
 400eaa0:	1007883a 	mov	r3,r2
 400eaa4:	01400e44 	movi	r5,57
 400eaa8:	d9800717 	ldw	r6,28(sp)
 400eaac:	00000506 	br	400eac4 <_dtoa_r+0x974>
 400eab0:	18ffffc4 	addi	r3,r3,-1
 400eab4:	11824726 	beq	r2,r6,400f3d4 <_dtoa_r+0x1284>
 400eab8:	1d000003 	ldbu	r20,0(r3)
 400eabc:	102f883a 	mov	r23,r2
 400eac0:	10bfffc4 	addi	r2,r2,-1
 400eac4:	a1003fcc 	andi	r4,r20,255
 400eac8:	2100201c 	xori	r4,r4,128
 400eacc:	213fe004 	addi	r4,r4,-128
 400ead0:	217ff726 	beq	r4,r5,400eab0 <__alt_data_end+0xfc00eab0>
 400ead4:	a2000044 	addi	r8,r20,1
 400ead8:	12000005 	stb	r8,0(r2)
 400eadc:	003f4606 	br	400e7f8 <__alt_data_end+0xfc00e7f8>
 400eae0:	d9000b17 	ldw	r4,44(sp)
 400eae4:	2000c826 	beq	r4,zero,400ee08 <_dtoa_r+0xcb8>
 400eae8:	d9800317 	ldw	r6,12(sp)
 400eaec:	00c00044 	movi	r3,1
 400eaf0:	1980f90e 	bge	r3,r6,400eed8 <_dtoa_r+0xd88>
 400eaf4:	d8800617 	ldw	r2,24(sp)
 400eaf8:	d8c00a17 	ldw	r3,40(sp)
 400eafc:	157fffc4 	addi	r21,r2,-1
 400eb00:	1d41f316 	blt	r3,r21,400f2d0 <_dtoa_r+0x1180>
 400eb04:	1d6bc83a 	sub	r21,r3,r21
 400eb08:	d9c00617 	ldw	r7,24(sp)
 400eb0c:	3802aa16 	blt	r7,zero,400f5b8 <_dtoa_r+0x1468>
 400eb10:	dd000817 	ldw	r20,32(sp)
 400eb14:	d8800617 	ldw	r2,24(sp)
 400eb18:	d8c00817 	ldw	r3,32(sp)
 400eb1c:	01400044 	movi	r5,1
 400eb20:	e009883a 	mov	r4,fp
 400eb24:	1887883a 	add	r3,r3,r2
 400eb28:	d8c00815 	stw	r3,32(sp)
 400eb2c:	b0ad883a 	add	r22,r22,r2
 400eb30:	401117c0 	call	401117c <__i2b>
 400eb34:	1023883a 	mov	r17,r2
 400eb38:	a0000826 	beq	r20,zero,400eb5c <_dtoa_r+0xa0c>
 400eb3c:	0580070e 	bge	zero,r22,400eb5c <_dtoa_r+0xa0c>
 400eb40:	a005883a 	mov	r2,r20
 400eb44:	b500b916 	blt	r22,r20,400ee2c <_dtoa_r+0xcdc>
 400eb48:	d9000817 	ldw	r4,32(sp)
 400eb4c:	a0a9c83a 	sub	r20,r20,r2
 400eb50:	b0adc83a 	sub	r22,r22,r2
 400eb54:	2089c83a 	sub	r4,r4,r2
 400eb58:	d9000815 	stw	r4,32(sp)
 400eb5c:	d9800a17 	ldw	r6,40(sp)
 400eb60:	0181810e 	bge	zero,r6,400f168 <_dtoa_r+0x1018>
 400eb64:	d9c00b17 	ldw	r7,44(sp)
 400eb68:	3800b326 	beq	r7,zero,400ee38 <_dtoa_r+0xce8>
 400eb6c:	a800b226 	beq	r21,zero,400ee38 <_dtoa_r+0xce8>
 400eb70:	880b883a 	mov	r5,r17
 400eb74:	a80d883a 	mov	r6,r21
 400eb78:	e009883a 	mov	r4,fp
 400eb7c:	40113b00 	call	40113b0 <__pow5mult>
 400eb80:	d9800917 	ldw	r6,36(sp)
 400eb84:	100b883a 	mov	r5,r2
 400eb88:	e009883a 	mov	r4,fp
 400eb8c:	1023883a 	mov	r17,r2
 400eb90:	40111b80 	call	40111b8 <__multiply>
 400eb94:	1021883a 	mov	r16,r2
 400eb98:	d8800a17 	ldw	r2,40(sp)
 400eb9c:	d9400917 	ldw	r5,36(sp)
 400eba0:	e009883a 	mov	r4,fp
 400eba4:	1545c83a 	sub	r2,r2,r21
 400eba8:	d8800a15 	stw	r2,40(sp)
 400ebac:	4010e180 	call	4010e18 <_Bfree>
 400ebb0:	d8c00a17 	ldw	r3,40(sp)
 400ebb4:	18009f1e 	bne	r3,zero,400ee34 <_dtoa_r+0xce4>
 400ebb8:	05c00044 	movi	r23,1
 400ebbc:	e009883a 	mov	r4,fp
 400ebc0:	b80b883a 	mov	r5,r23
 400ebc4:	401117c0 	call	401117c <__i2b>
 400ebc8:	d9000d17 	ldw	r4,52(sp)
 400ebcc:	102b883a 	mov	r21,r2
 400ebd0:	2000ce26 	beq	r4,zero,400ef0c <_dtoa_r+0xdbc>
 400ebd4:	200d883a 	mov	r6,r4
 400ebd8:	100b883a 	mov	r5,r2
 400ebdc:	e009883a 	mov	r4,fp
 400ebe0:	40113b00 	call	40113b0 <__pow5mult>
 400ebe4:	d9800317 	ldw	r6,12(sp)
 400ebe8:	102b883a 	mov	r21,r2
 400ebec:	b981810e 	bge	r23,r6,400f1f4 <_dtoa_r+0x10a4>
 400ebf0:	0027883a 	mov	r19,zero
 400ebf4:	a8800417 	ldw	r2,16(r21)
 400ebf8:	05c00804 	movi	r23,32
 400ebfc:	10800104 	addi	r2,r2,4
 400ec00:	1085883a 	add	r2,r2,r2
 400ec04:	1085883a 	add	r2,r2,r2
 400ec08:	a885883a 	add	r2,r21,r2
 400ec0c:	11000017 	ldw	r4,0(r2)
 400ec10:	40110640 	call	4011064 <__hi0bits>
 400ec14:	b885c83a 	sub	r2,r23,r2
 400ec18:	1585883a 	add	r2,r2,r22
 400ec1c:	108007cc 	andi	r2,r2,31
 400ec20:	1000b326 	beq	r2,zero,400eef0 <_dtoa_r+0xda0>
 400ec24:	00c00804 	movi	r3,32
 400ec28:	1887c83a 	sub	r3,r3,r2
 400ec2c:	01000104 	movi	r4,4
 400ec30:	20c2cd0e 	bge	r4,r3,400f768 <_dtoa_r+0x1618>
 400ec34:	00c00704 	movi	r3,28
 400ec38:	1885c83a 	sub	r2,r3,r2
 400ec3c:	d8c00817 	ldw	r3,32(sp)
 400ec40:	a0a9883a 	add	r20,r20,r2
 400ec44:	b0ad883a 	add	r22,r22,r2
 400ec48:	1887883a 	add	r3,r3,r2
 400ec4c:	d8c00815 	stw	r3,32(sp)
 400ec50:	d9800817 	ldw	r6,32(sp)
 400ec54:	0180040e 	bge	zero,r6,400ec68 <_dtoa_r+0xb18>
 400ec58:	800b883a 	mov	r5,r16
 400ec5c:	e009883a 	mov	r4,fp
 400ec60:	40114f00 	call	40114f0 <__lshift>
 400ec64:	1021883a 	mov	r16,r2
 400ec68:	0580050e 	bge	zero,r22,400ec80 <_dtoa_r+0xb30>
 400ec6c:	a80b883a 	mov	r5,r21
 400ec70:	b00d883a 	mov	r6,r22
 400ec74:	e009883a 	mov	r4,fp
 400ec78:	40114f00 	call	40114f0 <__lshift>
 400ec7c:	102b883a 	mov	r21,r2
 400ec80:	d9c00e17 	ldw	r7,56(sp)
 400ec84:	3801211e 	bne	r7,zero,400f10c <_dtoa_r+0xfbc>
 400ec88:	d9800617 	ldw	r6,24(sp)
 400ec8c:	0181380e 	bge	zero,r6,400f170 <_dtoa_r+0x1020>
 400ec90:	d8c00b17 	ldw	r3,44(sp)
 400ec94:	1800ab1e 	bne	r3,zero,400ef44 <_dtoa_r+0xdf4>
 400ec98:	dc800717 	ldw	r18,28(sp)
 400ec9c:	dcc00617 	ldw	r19,24(sp)
 400eca0:	9029883a 	mov	r20,r18
 400eca4:	00000206 	br	400ecb0 <_dtoa_r+0xb60>
 400eca8:	4010e400 	call	4010e40 <__multadd>
 400ecac:	1021883a 	mov	r16,r2
 400ecb0:	a80b883a 	mov	r5,r21
 400ecb4:	8009883a 	mov	r4,r16
 400ecb8:	400df500 	call	400df50 <quorem>
 400ecbc:	10800c04 	addi	r2,r2,48
 400ecc0:	90800005 	stb	r2,0(r18)
 400ecc4:	94800044 	addi	r18,r18,1
 400ecc8:	9507c83a 	sub	r3,r18,r20
 400eccc:	000f883a 	mov	r7,zero
 400ecd0:	01800284 	movi	r6,10
 400ecd4:	800b883a 	mov	r5,r16
 400ecd8:	e009883a 	mov	r4,fp
 400ecdc:	1cfff216 	blt	r3,r19,400eca8 <__alt_data_end+0xfc00eca8>
 400ece0:	1011883a 	mov	r8,r2
 400ece4:	d8800617 	ldw	r2,24(sp)
 400ece8:	0082370e 	bge	zero,r2,400f5c8 <_dtoa_r+0x1478>
 400ecec:	d9000717 	ldw	r4,28(sp)
 400ecf0:	0025883a 	mov	r18,zero
 400ecf4:	20af883a 	add	r23,r4,r2
 400ecf8:	01800044 	movi	r6,1
 400ecfc:	800b883a 	mov	r5,r16
 400ed00:	e009883a 	mov	r4,fp
 400ed04:	da001715 	stw	r8,92(sp)
 400ed08:	40114f00 	call	40114f0 <__lshift>
 400ed0c:	a80b883a 	mov	r5,r21
 400ed10:	1009883a 	mov	r4,r2
 400ed14:	d8800915 	stw	r2,36(sp)
 400ed18:	40116380 	call	4011638 <__mcmp>
 400ed1c:	da001717 	ldw	r8,92(sp)
 400ed20:	0081800e 	bge	zero,r2,400f324 <_dtoa_r+0x11d4>
 400ed24:	b93fffc3 	ldbu	r4,-1(r23)
 400ed28:	b8bfffc4 	addi	r2,r23,-1
 400ed2c:	1007883a 	mov	r3,r2
 400ed30:	01800e44 	movi	r6,57
 400ed34:	d9c00717 	ldw	r7,28(sp)
 400ed38:	00000506 	br	400ed50 <_dtoa_r+0xc00>
 400ed3c:	18ffffc4 	addi	r3,r3,-1
 400ed40:	11c12326 	beq	r2,r7,400f1d0 <_dtoa_r+0x1080>
 400ed44:	19000003 	ldbu	r4,0(r3)
 400ed48:	102f883a 	mov	r23,r2
 400ed4c:	10bfffc4 	addi	r2,r2,-1
 400ed50:	21403fcc 	andi	r5,r4,255
 400ed54:	2940201c 	xori	r5,r5,128
 400ed58:	297fe004 	addi	r5,r5,-128
 400ed5c:	29bff726 	beq	r5,r6,400ed3c <__alt_data_end+0xfc00ed3c>
 400ed60:	21000044 	addi	r4,r4,1
 400ed64:	11000005 	stb	r4,0(r2)
 400ed68:	a80b883a 	mov	r5,r21
 400ed6c:	e009883a 	mov	r4,fp
 400ed70:	4010e180 	call	4010e18 <_Bfree>
 400ed74:	883ea026 	beq	r17,zero,400e7f8 <__alt_data_end+0xfc00e7f8>
 400ed78:	90000426 	beq	r18,zero,400ed8c <_dtoa_r+0xc3c>
 400ed7c:	94400326 	beq	r18,r17,400ed8c <_dtoa_r+0xc3c>
 400ed80:	900b883a 	mov	r5,r18
 400ed84:	e009883a 	mov	r4,fp
 400ed88:	4010e180 	call	4010e18 <_Bfree>
 400ed8c:	880b883a 	mov	r5,r17
 400ed90:	e009883a 	mov	r4,fp
 400ed94:	4010e180 	call	4010e18 <_Bfree>
 400ed98:	003e9706 	br	400e7f8 <__alt_data_end+0xfc00e7f8>
 400ed9c:	01800044 	movi	r6,1
 400eda0:	d9800e15 	stw	r6,56(sp)
 400eda4:	003d9606 	br	400e400 <__alt_data_end+0xfc00e400>
 400eda8:	d8800817 	ldw	r2,32(sp)
 400edac:	d8c00517 	ldw	r3,20(sp)
 400edb0:	d8000d15 	stw	zero,52(sp)
 400edb4:	10c5c83a 	sub	r2,r2,r3
 400edb8:	00c9c83a 	sub	r4,zero,r3
 400edbc:	d8800815 	stw	r2,32(sp)
 400edc0:	d9000a15 	stw	r4,40(sp)
 400edc4:	003d9706 	br	400e424 <__alt_data_end+0xfc00e424>
 400edc8:	05adc83a 	sub	r22,zero,r22
 400edcc:	dd800815 	stw	r22,32(sp)
 400edd0:	002d883a 	mov	r22,zero
 400edd4:	003d8e06 	br	400e410 <__alt_data_end+0xfc00e410>
 400edd8:	d9000517 	ldw	r4,20(sp)
 400eddc:	401732c0 	call	401732c <__floatsidf>
 400ede0:	100d883a 	mov	r6,r2
 400ede4:	180f883a 	mov	r7,r3
 400ede8:	a009883a 	mov	r4,r20
 400edec:	880b883a 	mov	r5,r17
 400edf0:	40160400 	call	4016040 <__eqdf2>
 400edf4:	103d7126 	beq	r2,zero,400e3bc <__alt_data_end+0xfc00e3bc>
 400edf8:	d9c00517 	ldw	r7,20(sp)
 400edfc:	39ffffc4 	addi	r7,r7,-1
 400ee00:	d9c00515 	stw	r7,20(sp)
 400ee04:	003d6d06 	br	400e3bc <__alt_data_end+0xfc00e3bc>
 400ee08:	dd400a17 	ldw	r21,40(sp)
 400ee0c:	dd000817 	ldw	r20,32(sp)
 400ee10:	0023883a 	mov	r17,zero
 400ee14:	003f4806 	br	400eb38 <__alt_data_end+0xfc00eb38>
 400ee18:	10e3c83a 	sub	r17,r2,r3
 400ee1c:	9448983a 	sll	r4,r18,r17
 400ee20:	003d3206 	br	400e2ec <__alt_data_end+0xfc00e2ec>
 400ee24:	d8000e15 	stw	zero,56(sp)
 400ee28:	003d7506 	br	400e400 <__alt_data_end+0xfc00e400>
 400ee2c:	b005883a 	mov	r2,r22
 400ee30:	003f4506 	br	400eb48 <__alt_data_end+0xfc00eb48>
 400ee34:	dc000915 	stw	r16,36(sp)
 400ee38:	d9800a17 	ldw	r6,40(sp)
 400ee3c:	d9400917 	ldw	r5,36(sp)
 400ee40:	e009883a 	mov	r4,fp
 400ee44:	40113b00 	call	40113b0 <__pow5mult>
 400ee48:	1021883a 	mov	r16,r2
 400ee4c:	003f5a06 	br	400ebb8 <__alt_data_end+0xfc00ebb8>
 400ee50:	01c00044 	movi	r7,1
 400ee54:	d9c00b15 	stw	r7,44(sp)
 400ee58:	d8802217 	ldw	r2,136(sp)
 400ee5c:	0081280e 	bge	zero,r2,400f300 <_dtoa_r+0x11b0>
 400ee60:	100d883a 	mov	r6,r2
 400ee64:	1021883a 	mov	r16,r2
 400ee68:	d8800c15 	stw	r2,48(sp)
 400ee6c:	d8800615 	stw	r2,24(sp)
 400ee70:	003d8806 	br	400e494 <__alt_data_end+0xfc00e494>
 400ee74:	d8800617 	ldw	r2,24(sp)
 400ee78:	00be9b16 	blt	zero,r2,400e8e8 <__alt_data_end+0xfc00e8e8>
 400ee7c:	10010f1e 	bne	r2,zero,400f2bc <_dtoa_r+0x116c>
 400ee80:	880b883a 	mov	r5,r17
 400ee84:	000d883a 	mov	r6,zero
 400ee88:	01d00534 	movhi	r7,16404
 400ee8c:	8009883a 	mov	r4,r16
 400ee90:	40162980 	call	4016298 <__muldf3>
 400ee94:	900d883a 	mov	r6,r18
 400ee98:	980f883a 	mov	r7,r19
 400ee9c:	1009883a 	mov	r4,r2
 400eea0:	180b883a 	mov	r5,r3
 400eea4:	40160c80 	call	40160c8 <__gedf2>
 400eea8:	002b883a 	mov	r21,zero
 400eeac:	0023883a 	mov	r17,zero
 400eeb0:	1000bf16 	blt	r2,zero,400f1b0 <_dtoa_r+0x1060>
 400eeb4:	d9802217 	ldw	r6,136(sp)
 400eeb8:	ddc00717 	ldw	r23,28(sp)
 400eebc:	018c303a 	nor	r6,zero,r6
 400eec0:	d9800515 	stw	r6,20(sp)
 400eec4:	a80b883a 	mov	r5,r21
 400eec8:	e009883a 	mov	r4,fp
 400eecc:	4010e180 	call	4010e18 <_Bfree>
 400eed0:	883e4926 	beq	r17,zero,400e7f8 <__alt_data_end+0xfc00e7f8>
 400eed4:	003fad06 	br	400ed8c <__alt_data_end+0xfc00ed8c>
 400eed8:	d9c01117 	ldw	r7,68(sp)
 400eedc:	3801bc26 	beq	r7,zero,400f5d0 <_dtoa_r+0x1480>
 400eee0:	10810cc4 	addi	r2,r2,1075
 400eee4:	dd400a17 	ldw	r21,40(sp)
 400eee8:	dd000817 	ldw	r20,32(sp)
 400eeec:	003f0a06 	br	400eb18 <__alt_data_end+0xfc00eb18>
 400eef0:	00800704 	movi	r2,28
 400eef4:	d9000817 	ldw	r4,32(sp)
 400eef8:	a0a9883a 	add	r20,r20,r2
 400eefc:	b0ad883a 	add	r22,r22,r2
 400ef00:	2089883a 	add	r4,r4,r2
 400ef04:	d9000815 	stw	r4,32(sp)
 400ef08:	003f5106 	br	400ec50 <__alt_data_end+0xfc00ec50>
 400ef0c:	d8c00317 	ldw	r3,12(sp)
 400ef10:	b8c1fc0e 	bge	r23,r3,400f704 <_dtoa_r+0x15b4>
 400ef14:	0027883a 	mov	r19,zero
 400ef18:	b805883a 	mov	r2,r23
 400ef1c:	003f3e06 	br	400ec18 <__alt_data_end+0xfc00ec18>
 400ef20:	880b883a 	mov	r5,r17
 400ef24:	e009883a 	mov	r4,fp
 400ef28:	000f883a 	mov	r7,zero
 400ef2c:	01800284 	movi	r6,10
 400ef30:	4010e400 	call	4010e40 <__multadd>
 400ef34:	d9000c17 	ldw	r4,48(sp)
 400ef38:	1023883a 	mov	r17,r2
 400ef3c:	0102040e 	bge	zero,r4,400f750 <_dtoa_r+0x1600>
 400ef40:	d9000615 	stw	r4,24(sp)
 400ef44:	0500050e 	bge	zero,r20,400ef5c <_dtoa_r+0xe0c>
 400ef48:	880b883a 	mov	r5,r17
 400ef4c:	a00d883a 	mov	r6,r20
 400ef50:	e009883a 	mov	r4,fp
 400ef54:	40114f00 	call	40114f0 <__lshift>
 400ef58:	1023883a 	mov	r17,r2
 400ef5c:	9801241e 	bne	r19,zero,400f3f0 <_dtoa_r+0x12a0>
 400ef60:	8829883a 	mov	r20,r17
 400ef64:	d9000617 	ldw	r4,24(sp)
 400ef68:	dcc00717 	ldw	r19,28(sp)
 400ef6c:	9480004c 	andi	r18,r18,1
 400ef70:	20bfffc4 	addi	r2,r4,-1
 400ef74:	9885883a 	add	r2,r19,r2
 400ef78:	d8800415 	stw	r2,16(sp)
 400ef7c:	dc800615 	stw	r18,24(sp)
 400ef80:	a80b883a 	mov	r5,r21
 400ef84:	8009883a 	mov	r4,r16
 400ef88:	400df500 	call	400df50 <quorem>
 400ef8c:	880b883a 	mov	r5,r17
 400ef90:	8009883a 	mov	r4,r16
 400ef94:	102f883a 	mov	r23,r2
 400ef98:	40116380 	call	4011638 <__mcmp>
 400ef9c:	a80b883a 	mov	r5,r21
 400efa0:	a00d883a 	mov	r6,r20
 400efa4:	e009883a 	mov	r4,fp
 400efa8:	102d883a 	mov	r22,r2
 400efac:	40116980 	call	4011698 <__mdiff>
 400efb0:	1007883a 	mov	r3,r2
 400efb4:	10800317 	ldw	r2,12(r2)
 400efb8:	bc800c04 	addi	r18,r23,48
 400efbc:	180b883a 	mov	r5,r3
 400efc0:	10004e1e 	bne	r2,zero,400f0fc <_dtoa_r+0xfac>
 400efc4:	8009883a 	mov	r4,r16
 400efc8:	d8c01615 	stw	r3,88(sp)
 400efcc:	40116380 	call	4011638 <__mcmp>
 400efd0:	d8c01617 	ldw	r3,88(sp)
 400efd4:	e009883a 	mov	r4,fp
 400efd8:	d8801615 	stw	r2,88(sp)
 400efdc:	180b883a 	mov	r5,r3
 400efe0:	4010e180 	call	4010e18 <_Bfree>
 400efe4:	d8801617 	ldw	r2,88(sp)
 400efe8:	1000041e 	bne	r2,zero,400effc <_dtoa_r+0xeac>
 400efec:	d9800317 	ldw	r6,12(sp)
 400eff0:	3000021e 	bne	r6,zero,400effc <_dtoa_r+0xeac>
 400eff4:	d8c00617 	ldw	r3,24(sp)
 400eff8:	18003726 	beq	r3,zero,400f0d8 <_dtoa_r+0xf88>
 400effc:	b0002016 	blt	r22,zero,400f080 <_dtoa_r+0xf30>
 400f000:	b000041e 	bne	r22,zero,400f014 <_dtoa_r+0xec4>
 400f004:	d9000317 	ldw	r4,12(sp)
 400f008:	2000021e 	bne	r4,zero,400f014 <_dtoa_r+0xec4>
 400f00c:	d8c00617 	ldw	r3,24(sp)
 400f010:	18001b26 	beq	r3,zero,400f080 <_dtoa_r+0xf30>
 400f014:	00810716 	blt	zero,r2,400f434 <_dtoa_r+0x12e4>
 400f018:	d8c00417 	ldw	r3,16(sp)
 400f01c:	9d800044 	addi	r22,r19,1
 400f020:	9c800005 	stb	r18,0(r19)
 400f024:	b02f883a 	mov	r23,r22
 400f028:	98c10626 	beq	r19,r3,400f444 <_dtoa_r+0x12f4>
 400f02c:	800b883a 	mov	r5,r16
 400f030:	000f883a 	mov	r7,zero
 400f034:	01800284 	movi	r6,10
 400f038:	e009883a 	mov	r4,fp
 400f03c:	4010e400 	call	4010e40 <__multadd>
 400f040:	1021883a 	mov	r16,r2
 400f044:	000f883a 	mov	r7,zero
 400f048:	01800284 	movi	r6,10
 400f04c:	880b883a 	mov	r5,r17
 400f050:	e009883a 	mov	r4,fp
 400f054:	8d002526 	beq	r17,r20,400f0ec <_dtoa_r+0xf9c>
 400f058:	4010e400 	call	4010e40 <__multadd>
 400f05c:	a00b883a 	mov	r5,r20
 400f060:	000f883a 	mov	r7,zero
 400f064:	01800284 	movi	r6,10
 400f068:	e009883a 	mov	r4,fp
 400f06c:	1023883a 	mov	r17,r2
 400f070:	4010e400 	call	4010e40 <__multadd>
 400f074:	1029883a 	mov	r20,r2
 400f078:	b027883a 	mov	r19,r22
 400f07c:	003fc006 	br	400ef80 <__alt_data_end+0xfc00ef80>
 400f080:	9011883a 	mov	r8,r18
 400f084:	00800e0e 	bge	zero,r2,400f0c0 <_dtoa_r+0xf70>
 400f088:	800b883a 	mov	r5,r16
 400f08c:	01800044 	movi	r6,1
 400f090:	e009883a 	mov	r4,fp
 400f094:	da001715 	stw	r8,92(sp)
 400f098:	40114f00 	call	40114f0 <__lshift>
 400f09c:	a80b883a 	mov	r5,r21
 400f0a0:	1009883a 	mov	r4,r2
 400f0a4:	1021883a 	mov	r16,r2
 400f0a8:	40116380 	call	4011638 <__mcmp>
 400f0ac:	da001717 	ldw	r8,92(sp)
 400f0b0:	0081960e 	bge	zero,r2,400f70c <_dtoa_r+0x15bc>
 400f0b4:	00800e44 	movi	r2,57
 400f0b8:	40817026 	beq	r8,r2,400f67c <_dtoa_r+0x152c>
 400f0bc:	ba000c44 	addi	r8,r23,49
 400f0c0:	8825883a 	mov	r18,r17
 400f0c4:	9dc00044 	addi	r23,r19,1
 400f0c8:	9a000005 	stb	r8,0(r19)
 400f0cc:	a023883a 	mov	r17,r20
 400f0d0:	dc000915 	stw	r16,36(sp)
 400f0d4:	003f2406 	br	400ed68 <__alt_data_end+0xfc00ed68>
 400f0d8:	00800e44 	movi	r2,57
 400f0dc:	9011883a 	mov	r8,r18
 400f0e0:	90816626 	beq	r18,r2,400f67c <_dtoa_r+0x152c>
 400f0e4:	05bff516 	blt	zero,r22,400f0bc <__alt_data_end+0xfc00f0bc>
 400f0e8:	003ff506 	br	400f0c0 <__alt_data_end+0xfc00f0c0>
 400f0ec:	4010e400 	call	4010e40 <__multadd>
 400f0f0:	1023883a 	mov	r17,r2
 400f0f4:	1029883a 	mov	r20,r2
 400f0f8:	003fdf06 	br	400f078 <__alt_data_end+0xfc00f078>
 400f0fc:	e009883a 	mov	r4,fp
 400f100:	4010e180 	call	4010e18 <_Bfree>
 400f104:	00800044 	movi	r2,1
 400f108:	003fbc06 	br	400effc <__alt_data_end+0xfc00effc>
 400f10c:	a80b883a 	mov	r5,r21
 400f110:	8009883a 	mov	r4,r16
 400f114:	40116380 	call	4011638 <__mcmp>
 400f118:	103edb0e 	bge	r2,zero,400ec88 <__alt_data_end+0xfc00ec88>
 400f11c:	800b883a 	mov	r5,r16
 400f120:	000f883a 	mov	r7,zero
 400f124:	01800284 	movi	r6,10
 400f128:	e009883a 	mov	r4,fp
 400f12c:	4010e400 	call	4010e40 <__multadd>
 400f130:	1021883a 	mov	r16,r2
 400f134:	d8800517 	ldw	r2,20(sp)
 400f138:	d8c00b17 	ldw	r3,44(sp)
 400f13c:	10bfffc4 	addi	r2,r2,-1
 400f140:	d8800515 	stw	r2,20(sp)
 400f144:	183f761e 	bne	r3,zero,400ef20 <__alt_data_end+0xfc00ef20>
 400f148:	d9000c17 	ldw	r4,48(sp)
 400f14c:	0101730e 	bge	zero,r4,400f71c <_dtoa_r+0x15cc>
 400f150:	d9000615 	stw	r4,24(sp)
 400f154:	003ed006 	br	400ec98 <__alt_data_end+0xfc00ec98>
 400f158:	00800084 	movi	r2,2
 400f15c:	3081861e 	bne	r6,r2,400f778 <_dtoa_r+0x1628>
 400f160:	d8000b15 	stw	zero,44(sp)
 400f164:	003f3c06 	br	400ee58 <__alt_data_end+0xfc00ee58>
 400f168:	dc000917 	ldw	r16,36(sp)
 400f16c:	003e9206 	br	400ebb8 <__alt_data_end+0xfc00ebb8>
 400f170:	d9c00317 	ldw	r7,12(sp)
 400f174:	00800084 	movi	r2,2
 400f178:	11fec50e 	bge	r2,r7,400ec90 <__alt_data_end+0xfc00ec90>
 400f17c:	d9000617 	ldw	r4,24(sp)
 400f180:	20013c1e 	bne	r4,zero,400f674 <_dtoa_r+0x1524>
 400f184:	a80b883a 	mov	r5,r21
 400f188:	000f883a 	mov	r7,zero
 400f18c:	01800144 	movi	r6,5
 400f190:	e009883a 	mov	r4,fp
 400f194:	4010e400 	call	4010e40 <__multadd>
 400f198:	100b883a 	mov	r5,r2
 400f19c:	8009883a 	mov	r4,r16
 400f1a0:	102b883a 	mov	r21,r2
 400f1a4:	40116380 	call	4011638 <__mcmp>
 400f1a8:	dc000915 	stw	r16,36(sp)
 400f1ac:	00bf410e 	bge	zero,r2,400eeb4 <__alt_data_end+0xfc00eeb4>
 400f1b0:	d9c00717 	ldw	r7,28(sp)
 400f1b4:	00800c44 	movi	r2,49
 400f1b8:	38800005 	stb	r2,0(r7)
 400f1bc:	d8800517 	ldw	r2,20(sp)
 400f1c0:	3dc00044 	addi	r23,r7,1
 400f1c4:	10800044 	addi	r2,r2,1
 400f1c8:	d8800515 	stw	r2,20(sp)
 400f1cc:	003f3d06 	br	400eec4 <__alt_data_end+0xfc00eec4>
 400f1d0:	d9800517 	ldw	r6,20(sp)
 400f1d4:	d9c00717 	ldw	r7,28(sp)
 400f1d8:	00800c44 	movi	r2,49
 400f1dc:	31800044 	addi	r6,r6,1
 400f1e0:	d9800515 	stw	r6,20(sp)
 400f1e4:	38800005 	stb	r2,0(r7)
 400f1e8:	003edf06 	br	400ed68 <__alt_data_end+0xfc00ed68>
 400f1ec:	d8000b15 	stw	zero,44(sp)
 400f1f0:	003c9f06 	br	400e470 <__alt_data_end+0xfc00e470>
 400f1f4:	903e7e1e 	bne	r18,zero,400ebf0 <__alt_data_end+0xfc00ebf0>
 400f1f8:	00800434 	movhi	r2,16
 400f1fc:	10bfffc4 	addi	r2,r2,-1
 400f200:	9884703a 	and	r2,r19,r2
 400f204:	1000ea1e 	bne	r2,zero,400f5b0 <_dtoa_r+0x1460>
 400f208:	9cdffc2c 	andhi	r19,r19,32752
 400f20c:	9800e826 	beq	r19,zero,400f5b0 <_dtoa_r+0x1460>
 400f210:	d9c00817 	ldw	r7,32(sp)
 400f214:	b5800044 	addi	r22,r22,1
 400f218:	04c00044 	movi	r19,1
 400f21c:	39c00044 	addi	r7,r7,1
 400f220:	d9c00815 	stw	r7,32(sp)
 400f224:	d8800d17 	ldw	r2,52(sp)
 400f228:	103e721e 	bne	r2,zero,400ebf4 <__alt_data_end+0xfc00ebf4>
 400f22c:	00800044 	movi	r2,1
 400f230:	003e7906 	br	400ec18 <__alt_data_end+0xfc00ec18>
 400f234:	8009883a 	mov	r4,r16
 400f238:	401732c0 	call	401732c <__floatsidf>
 400f23c:	d9800f17 	ldw	r6,60(sp)
 400f240:	d9c01017 	ldw	r7,64(sp)
 400f244:	1009883a 	mov	r4,r2
 400f248:	180b883a 	mov	r5,r3
 400f24c:	40162980 	call	4016298 <__muldf3>
 400f250:	000d883a 	mov	r6,zero
 400f254:	01d00734 	movhi	r7,16412
 400f258:	1009883a 	mov	r4,r2
 400f25c:	180b883a 	mov	r5,r3
 400f260:	4014eac0 	call	4014eac <__adddf3>
 400f264:	047f3034 	movhi	r17,64704
 400f268:	1021883a 	mov	r16,r2
 400f26c:	1c63883a 	add	r17,r3,r17
 400f270:	d9000f17 	ldw	r4,60(sp)
 400f274:	d9401017 	ldw	r5,64(sp)
 400f278:	000d883a 	mov	r6,zero
 400f27c:	01d00534 	movhi	r7,16404
 400f280:	40169b00 	call	40169b0 <__subdf3>
 400f284:	800d883a 	mov	r6,r16
 400f288:	880f883a 	mov	r7,r17
 400f28c:	1009883a 	mov	r4,r2
 400f290:	180b883a 	mov	r5,r3
 400f294:	102b883a 	mov	r21,r2
 400f298:	1829883a 	mov	r20,r3
 400f29c:	40160c80 	call	40160c8 <__gedf2>
 400f2a0:	00806c16 	blt	zero,r2,400f454 <_dtoa_r+0x1304>
 400f2a4:	89e0003c 	xorhi	r7,r17,32768
 400f2a8:	800d883a 	mov	r6,r16
 400f2ac:	a809883a 	mov	r4,r21
 400f2b0:	a00b883a 	mov	r5,r20
 400f2b4:	40161a40 	call	40161a4 <__ledf2>
 400f2b8:	103d7e0e 	bge	r2,zero,400e8b4 <__alt_data_end+0xfc00e8b4>
 400f2bc:	002b883a 	mov	r21,zero
 400f2c0:	0023883a 	mov	r17,zero
 400f2c4:	003efb06 	br	400eeb4 <__alt_data_end+0xfc00eeb4>
 400f2c8:	d8800717 	ldw	r2,28(sp)
 400f2cc:	003bd006 	br	400e210 <__alt_data_end+0xfc00e210>
 400f2d0:	d9000a17 	ldw	r4,40(sp)
 400f2d4:	d9800d17 	ldw	r6,52(sp)
 400f2d8:	dd400a15 	stw	r21,40(sp)
 400f2dc:	a905c83a 	sub	r2,r21,r4
 400f2e0:	308d883a 	add	r6,r6,r2
 400f2e4:	d9800d15 	stw	r6,52(sp)
 400f2e8:	002b883a 	mov	r21,zero
 400f2ec:	003e0606 	br	400eb08 <__alt_data_end+0xfc00eb08>
 400f2f0:	9023883a 	mov	r17,r18
 400f2f4:	9829883a 	mov	r20,r19
 400f2f8:	04000084 	movi	r16,2
 400f2fc:	003c9206 	br	400e548 <__alt_data_end+0xfc00e548>
 400f300:	04000044 	movi	r16,1
 400f304:	dc000c15 	stw	r16,48(sp)
 400f308:	dc000615 	stw	r16,24(sp)
 400f30c:	dc002215 	stw	r16,136(sp)
 400f310:	e0001115 	stw	zero,68(fp)
 400f314:	000b883a 	mov	r5,zero
 400f318:	003c6906 	br	400e4c0 <__alt_data_end+0xfc00e4c0>
 400f31c:	3021883a 	mov	r16,r6
 400f320:	003ffb06 	br	400f310 <__alt_data_end+0xfc00f310>
 400f324:	1000021e 	bne	r2,zero,400f330 <_dtoa_r+0x11e0>
 400f328:	4200004c 	andi	r8,r8,1
 400f32c:	403e7d1e 	bne	r8,zero,400ed24 <__alt_data_end+0xfc00ed24>
 400f330:	01000c04 	movi	r4,48
 400f334:	00000106 	br	400f33c <_dtoa_r+0x11ec>
 400f338:	102f883a 	mov	r23,r2
 400f33c:	b8bfffc4 	addi	r2,r23,-1
 400f340:	10c00007 	ldb	r3,0(r2)
 400f344:	193ffc26 	beq	r3,r4,400f338 <__alt_data_end+0xfc00f338>
 400f348:	003e8706 	br	400ed68 <__alt_data_end+0xfc00ed68>
 400f34c:	d8800517 	ldw	r2,20(sp)
 400f350:	00a3c83a 	sub	r17,zero,r2
 400f354:	8800a426 	beq	r17,zero,400f5e8 <_dtoa_r+0x1498>
 400f358:	888003cc 	andi	r2,r17,15
 400f35c:	100490fa 	slli	r2,r2,3
 400f360:	00c100b4 	movhi	r3,1026
 400f364:	18ea0304 	addi	r3,r3,-22516
 400f368:	1885883a 	add	r2,r3,r2
 400f36c:	11800017 	ldw	r6,0(r2)
 400f370:	11c00117 	ldw	r7,4(r2)
 400f374:	9009883a 	mov	r4,r18
 400f378:	980b883a 	mov	r5,r19
 400f37c:	8823d13a 	srai	r17,r17,4
 400f380:	40162980 	call	4016298 <__muldf3>
 400f384:	d8800f15 	stw	r2,60(sp)
 400f388:	d8c01015 	stw	r3,64(sp)
 400f38c:	8800e826 	beq	r17,zero,400f730 <_dtoa_r+0x15e0>
 400f390:	050100b4 	movhi	r20,1026
 400f394:	a529f904 	addi	r20,r20,-22556
 400f398:	04000084 	movi	r16,2
 400f39c:	8980004c 	andi	r6,r17,1
 400f3a0:	1009883a 	mov	r4,r2
 400f3a4:	8823d07a 	srai	r17,r17,1
 400f3a8:	180b883a 	mov	r5,r3
 400f3ac:	30000426 	beq	r6,zero,400f3c0 <_dtoa_r+0x1270>
 400f3b0:	a1800017 	ldw	r6,0(r20)
 400f3b4:	a1c00117 	ldw	r7,4(r20)
 400f3b8:	84000044 	addi	r16,r16,1
 400f3bc:	40162980 	call	4016298 <__muldf3>
 400f3c0:	a5000204 	addi	r20,r20,8
 400f3c4:	883ff51e 	bne	r17,zero,400f39c <__alt_data_end+0xfc00f39c>
 400f3c8:	d8800f15 	stw	r2,60(sp)
 400f3cc:	d8c01015 	stw	r3,64(sp)
 400f3d0:	003c7606 	br	400e5ac <__alt_data_end+0xfc00e5ac>
 400f3d4:	00c00c04 	movi	r3,48
 400f3d8:	10c00005 	stb	r3,0(r2)
 400f3dc:	d8c00517 	ldw	r3,20(sp)
 400f3e0:	bd3fffc3 	ldbu	r20,-1(r23)
 400f3e4:	18c00044 	addi	r3,r3,1
 400f3e8:	d8c00515 	stw	r3,20(sp)
 400f3ec:	003db906 	br	400ead4 <__alt_data_end+0xfc00ead4>
 400f3f0:	89400117 	ldw	r5,4(r17)
 400f3f4:	e009883a 	mov	r4,fp
 400f3f8:	4010d700 	call	4010d70 <_Balloc>
 400f3fc:	89800417 	ldw	r6,16(r17)
 400f400:	89400304 	addi	r5,r17,12
 400f404:	11000304 	addi	r4,r2,12
 400f408:	31800084 	addi	r6,r6,2
 400f40c:	318d883a 	add	r6,r6,r6
 400f410:	318d883a 	add	r6,r6,r6
 400f414:	1027883a 	mov	r19,r2
 400f418:	400b2a80 	call	400b2a8 <memcpy>
 400f41c:	01800044 	movi	r6,1
 400f420:	980b883a 	mov	r5,r19
 400f424:	e009883a 	mov	r4,fp
 400f428:	40114f00 	call	40114f0 <__lshift>
 400f42c:	1029883a 	mov	r20,r2
 400f430:	003ecc06 	br	400ef64 <__alt_data_end+0xfc00ef64>
 400f434:	00800e44 	movi	r2,57
 400f438:	90809026 	beq	r18,r2,400f67c <_dtoa_r+0x152c>
 400f43c:	92000044 	addi	r8,r18,1
 400f440:	003f1f06 	br	400f0c0 <__alt_data_end+0xfc00f0c0>
 400f444:	9011883a 	mov	r8,r18
 400f448:	8825883a 	mov	r18,r17
 400f44c:	a023883a 	mov	r17,r20
 400f450:	003e2906 	br	400ecf8 <__alt_data_end+0xfc00ecf8>
 400f454:	002b883a 	mov	r21,zero
 400f458:	0023883a 	mov	r17,zero
 400f45c:	003f5406 	br	400f1b0 <__alt_data_end+0xfc00f1b0>
 400f460:	61bfffc4 	addi	r6,r12,-1
 400f464:	300490fa 	slli	r2,r6,3
 400f468:	00c100b4 	movhi	r3,1026
 400f46c:	18ea0304 	addi	r3,r3,-22516
 400f470:	1885883a 	add	r2,r3,r2
 400f474:	11000017 	ldw	r4,0(r2)
 400f478:	11400117 	ldw	r5,4(r2)
 400f47c:	d8800717 	ldw	r2,28(sp)
 400f480:	880f883a 	mov	r7,r17
 400f484:	d9801215 	stw	r6,72(sp)
 400f488:	800d883a 	mov	r6,r16
 400f48c:	db001615 	stw	r12,88(sp)
 400f490:	15c00044 	addi	r23,r2,1
 400f494:	40162980 	call	4016298 <__muldf3>
 400f498:	d9401017 	ldw	r5,64(sp)
 400f49c:	d9000f17 	ldw	r4,60(sp)
 400f4a0:	d8c01515 	stw	r3,84(sp)
 400f4a4:	d8801415 	stw	r2,80(sp)
 400f4a8:	40172ac0 	call	40172ac <__fixdfsi>
 400f4ac:	1009883a 	mov	r4,r2
 400f4b0:	1021883a 	mov	r16,r2
 400f4b4:	401732c0 	call	401732c <__floatsidf>
 400f4b8:	d9000f17 	ldw	r4,60(sp)
 400f4bc:	d9401017 	ldw	r5,64(sp)
 400f4c0:	100d883a 	mov	r6,r2
 400f4c4:	180f883a 	mov	r7,r3
 400f4c8:	40169b00 	call	40169b0 <__subdf3>
 400f4cc:	1829883a 	mov	r20,r3
 400f4d0:	d8c00717 	ldw	r3,28(sp)
 400f4d4:	84000c04 	addi	r16,r16,48
 400f4d8:	1023883a 	mov	r17,r2
 400f4dc:	1c000005 	stb	r16,0(r3)
 400f4e0:	db001617 	ldw	r12,88(sp)
 400f4e4:	00800044 	movi	r2,1
 400f4e8:	60802226 	beq	r12,r2,400f574 <_dtoa_r+0x1424>
 400f4ec:	d9c00717 	ldw	r7,28(sp)
 400f4f0:	8805883a 	mov	r2,r17
 400f4f4:	b82b883a 	mov	r21,r23
 400f4f8:	3b19883a 	add	r12,r7,r12
 400f4fc:	6023883a 	mov	r17,r12
 400f500:	a007883a 	mov	r3,r20
 400f504:	dc800f15 	stw	r18,60(sp)
 400f508:	000d883a 	mov	r6,zero
 400f50c:	01d00934 	movhi	r7,16420
 400f510:	1009883a 	mov	r4,r2
 400f514:	180b883a 	mov	r5,r3
 400f518:	40162980 	call	4016298 <__muldf3>
 400f51c:	180b883a 	mov	r5,r3
 400f520:	1009883a 	mov	r4,r2
 400f524:	1829883a 	mov	r20,r3
 400f528:	1025883a 	mov	r18,r2
 400f52c:	40172ac0 	call	40172ac <__fixdfsi>
 400f530:	1009883a 	mov	r4,r2
 400f534:	1021883a 	mov	r16,r2
 400f538:	401732c0 	call	401732c <__floatsidf>
 400f53c:	100d883a 	mov	r6,r2
 400f540:	180f883a 	mov	r7,r3
 400f544:	9009883a 	mov	r4,r18
 400f548:	a00b883a 	mov	r5,r20
 400f54c:	84000c04 	addi	r16,r16,48
 400f550:	40169b00 	call	40169b0 <__subdf3>
 400f554:	ad400044 	addi	r21,r21,1
 400f558:	ac3fffc5 	stb	r16,-1(r21)
 400f55c:	ac7fea1e 	bne	r21,r17,400f508 <__alt_data_end+0xfc00f508>
 400f560:	1023883a 	mov	r17,r2
 400f564:	d8801217 	ldw	r2,72(sp)
 400f568:	dc800f17 	ldw	r18,60(sp)
 400f56c:	1829883a 	mov	r20,r3
 400f570:	b8af883a 	add	r23,r23,r2
 400f574:	d9001417 	ldw	r4,80(sp)
 400f578:	d9401517 	ldw	r5,84(sp)
 400f57c:	000d883a 	mov	r6,zero
 400f580:	01cff834 	movhi	r7,16352
 400f584:	4014eac0 	call	4014eac <__adddf3>
 400f588:	880d883a 	mov	r6,r17
 400f58c:	a00f883a 	mov	r7,r20
 400f590:	1009883a 	mov	r4,r2
 400f594:	180b883a 	mov	r5,r3
 400f598:	40161a40 	call	40161a4 <__ledf2>
 400f59c:	10003e0e 	bge	r2,zero,400f698 <_dtoa_r+0x1548>
 400f5a0:	d9001317 	ldw	r4,76(sp)
 400f5a4:	bd3fffc3 	ldbu	r20,-1(r23)
 400f5a8:	d9000515 	stw	r4,20(sp)
 400f5ac:	003d3b06 	br	400ea9c <__alt_data_end+0xfc00ea9c>
 400f5b0:	0027883a 	mov	r19,zero
 400f5b4:	003f1b06 	br	400f224 <__alt_data_end+0xfc00f224>
 400f5b8:	d8800817 	ldw	r2,32(sp)
 400f5bc:	11e9c83a 	sub	r20,r2,r7
 400f5c0:	0005883a 	mov	r2,zero
 400f5c4:	003d5406 	br	400eb18 <__alt_data_end+0xfc00eb18>
 400f5c8:	00800044 	movi	r2,1
 400f5cc:	003dc706 	br	400ecec <__alt_data_end+0xfc00ecec>
 400f5d0:	d8c00217 	ldw	r3,8(sp)
 400f5d4:	00800d84 	movi	r2,54
 400f5d8:	dd400a17 	ldw	r21,40(sp)
 400f5dc:	10c5c83a 	sub	r2,r2,r3
 400f5e0:	dd000817 	ldw	r20,32(sp)
 400f5e4:	003d4c06 	br	400eb18 <__alt_data_end+0xfc00eb18>
 400f5e8:	dc800f15 	stw	r18,60(sp)
 400f5ec:	dcc01015 	stw	r19,64(sp)
 400f5f0:	04000084 	movi	r16,2
 400f5f4:	003bed06 	br	400e5ac <__alt_data_end+0xfc00e5ac>
 400f5f8:	d9000617 	ldw	r4,24(sp)
 400f5fc:	203f0d26 	beq	r4,zero,400f234 <__alt_data_end+0xfc00f234>
 400f600:	d9800c17 	ldw	r6,48(sp)
 400f604:	01bcab0e 	bge	zero,r6,400e8b4 <__alt_data_end+0xfc00e8b4>
 400f608:	d9401017 	ldw	r5,64(sp)
 400f60c:	d9000f17 	ldw	r4,60(sp)
 400f610:	000d883a 	mov	r6,zero
 400f614:	01d00934 	movhi	r7,16420
 400f618:	40162980 	call	4016298 <__muldf3>
 400f61c:	81000044 	addi	r4,r16,1
 400f620:	d8800f15 	stw	r2,60(sp)
 400f624:	d8c01015 	stw	r3,64(sp)
 400f628:	401732c0 	call	401732c <__floatsidf>
 400f62c:	d9800f17 	ldw	r6,60(sp)
 400f630:	d9c01017 	ldw	r7,64(sp)
 400f634:	1009883a 	mov	r4,r2
 400f638:	180b883a 	mov	r5,r3
 400f63c:	40162980 	call	4016298 <__muldf3>
 400f640:	01d00734 	movhi	r7,16412
 400f644:	000d883a 	mov	r6,zero
 400f648:	1009883a 	mov	r4,r2
 400f64c:	180b883a 	mov	r5,r3
 400f650:	4014eac0 	call	4014eac <__adddf3>
 400f654:	d9c00517 	ldw	r7,20(sp)
 400f658:	047f3034 	movhi	r17,64704
 400f65c:	1021883a 	mov	r16,r2
 400f660:	39ffffc4 	addi	r7,r7,-1
 400f664:	d9c01315 	stw	r7,76(sp)
 400f668:	1c63883a 	add	r17,r3,r17
 400f66c:	db000c17 	ldw	r12,48(sp)
 400f670:	003bea06 	br	400e61c <__alt_data_end+0xfc00e61c>
 400f674:	dc000915 	stw	r16,36(sp)
 400f678:	003e0e06 	br	400eeb4 <__alt_data_end+0xfc00eeb4>
 400f67c:	01000e44 	movi	r4,57
 400f680:	8825883a 	mov	r18,r17
 400f684:	9dc00044 	addi	r23,r19,1
 400f688:	99000005 	stb	r4,0(r19)
 400f68c:	a023883a 	mov	r17,r20
 400f690:	dc000915 	stw	r16,36(sp)
 400f694:	003da406 	br	400ed28 <__alt_data_end+0xfc00ed28>
 400f698:	d9801417 	ldw	r6,80(sp)
 400f69c:	d9c01517 	ldw	r7,84(sp)
 400f6a0:	0009883a 	mov	r4,zero
 400f6a4:	014ff834 	movhi	r5,16352
 400f6a8:	40169b00 	call	40169b0 <__subdf3>
 400f6ac:	880d883a 	mov	r6,r17
 400f6b0:	a00f883a 	mov	r7,r20
 400f6b4:	1009883a 	mov	r4,r2
 400f6b8:	180b883a 	mov	r5,r3
 400f6bc:	40160c80 	call	40160c8 <__gedf2>
 400f6c0:	00bc7c0e 	bge	zero,r2,400e8b4 <__alt_data_end+0xfc00e8b4>
 400f6c4:	01000c04 	movi	r4,48
 400f6c8:	00000106 	br	400f6d0 <_dtoa_r+0x1580>
 400f6cc:	102f883a 	mov	r23,r2
 400f6d0:	b8bfffc4 	addi	r2,r23,-1
 400f6d4:	10c00007 	ldb	r3,0(r2)
 400f6d8:	193ffc26 	beq	r3,r4,400f6cc <__alt_data_end+0xfc00f6cc>
 400f6dc:	d9801317 	ldw	r6,76(sp)
 400f6e0:	d9800515 	stw	r6,20(sp)
 400f6e4:	003c4406 	br	400e7f8 <__alt_data_end+0xfc00e7f8>
 400f6e8:	d9801317 	ldw	r6,76(sp)
 400f6ec:	d9800515 	stw	r6,20(sp)
 400f6f0:	003cea06 	br	400ea9c <__alt_data_end+0xfc00ea9c>
 400f6f4:	dd800f17 	ldw	r22,60(sp)
 400f6f8:	dcc01017 	ldw	r19,64(sp)
 400f6fc:	dc801217 	ldw	r18,72(sp)
 400f700:	003c6c06 	br	400e8b4 <__alt_data_end+0xfc00e8b4>
 400f704:	903e031e 	bne	r18,zero,400ef14 <__alt_data_end+0xfc00ef14>
 400f708:	003ebb06 	br	400f1f8 <__alt_data_end+0xfc00f1f8>
 400f70c:	103e6c1e 	bne	r2,zero,400f0c0 <__alt_data_end+0xfc00f0c0>
 400f710:	4080004c 	andi	r2,r8,1
 400f714:	103e6a26 	beq	r2,zero,400f0c0 <__alt_data_end+0xfc00f0c0>
 400f718:	003e6606 	br	400f0b4 <__alt_data_end+0xfc00f0b4>
 400f71c:	d8c00317 	ldw	r3,12(sp)
 400f720:	00800084 	movi	r2,2
 400f724:	10c02916 	blt	r2,r3,400f7cc <_dtoa_r+0x167c>
 400f728:	d9000c17 	ldw	r4,48(sp)
 400f72c:	003e8806 	br	400f150 <__alt_data_end+0xfc00f150>
 400f730:	04000084 	movi	r16,2
 400f734:	003b9d06 	br	400e5ac <__alt_data_end+0xfc00e5ac>
 400f738:	d9001317 	ldw	r4,76(sp)
 400f73c:	d9000515 	stw	r4,20(sp)
 400f740:	003cd606 	br	400ea9c <__alt_data_end+0xfc00ea9c>
 400f744:	d8801317 	ldw	r2,76(sp)
 400f748:	d8800515 	stw	r2,20(sp)
 400f74c:	003c2a06 	br	400e7f8 <__alt_data_end+0xfc00e7f8>
 400f750:	d9800317 	ldw	r6,12(sp)
 400f754:	00800084 	movi	r2,2
 400f758:	11801516 	blt	r2,r6,400f7b0 <_dtoa_r+0x1660>
 400f75c:	d9c00c17 	ldw	r7,48(sp)
 400f760:	d9c00615 	stw	r7,24(sp)
 400f764:	003df706 	br	400ef44 <__alt_data_end+0xfc00ef44>
 400f768:	193d3926 	beq	r3,r4,400ec50 <__alt_data_end+0xfc00ec50>
 400f76c:	00c00f04 	movi	r3,60
 400f770:	1885c83a 	sub	r2,r3,r2
 400f774:	003ddf06 	br	400eef4 <__alt_data_end+0xfc00eef4>
 400f778:	e009883a 	mov	r4,fp
 400f77c:	e0001115 	stw	zero,68(fp)
 400f780:	000b883a 	mov	r5,zero
 400f784:	4010d700 	call	4010d70 <_Balloc>
 400f788:	d8800715 	stw	r2,28(sp)
 400f78c:	d8c00717 	ldw	r3,28(sp)
 400f790:	00bfffc4 	movi	r2,-1
 400f794:	01000044 	movi	r4,1
 400f798:	d8800c15 	stw	r2,48(sp)
 400f79c:	e0c01015 	stw	r3,64(fp)
 400f7a0:	d9000b15 	stw	r4,44(sp)
 400f7a4:	d8800615 	stw	r2,24(sp)
 400f7a8:	d8002215 	stw	zero,136(sp)
 400f7ac:	003c4106 	br	400e8b4 <__alt_data_end+0xfc00e8b4>
 400f7b0:	d8c00c17 	ldw	r3,48(sp)
 400f7b4:	d8c00615 	stw	r3,24(sp)
 400f7b8:	003e7006 	br	400f17c <__alt_data_end+0xfc00f17c>
 400f7bc:	04400044 	movi	r17,1
 400f7c0:	003b2006 	br	400e444 <__alt_data_end+0xfc00e444>
 400f7c4:	000b883a 	mov	r5,zero
 400f7c8:	003b3d06 	br	400e4c0 <__alt_data_end+0xfc00e4c0>
 400f7cc:	d8800c17 	ldw	r2,48(sp)
 400f7d0:	d8800615 	stw	r2,24(sp)
 400f7d4:	003e6906 	br	400f17c <__alt_data_end+0xfc00f17c>

0400f7d8 <__sflush_r>:
 400f7d8:	2880030b 	ldhu	r2,12(r5)
 400f7dc:	defffb04 	addi	sp,sp,-20
 400f7e0:	dcc00315 	stw	r19,12(sp)
 400f7e4:	dc400115 	stw	r17,4(sp)
 400f7e8:	dfc00415 	stw	ra,16(sp)
 400f7ec:	dc800215 	stw	r18,8(sp)
 400f7f0:	dc000015 	stw	r16,0(sp)
 400f7f4:	10c0020c 	andi	r3,r2,8
 400f7f8:	2823883a 	mov	r17,r5
 400f7fc:	2027883a 	mov	r19,r4
 400f800:	1800311e 	bne	r3,zero,400f8c8 <__sflush_r+0xf0>
 400f804:	28c00117 	ldw	r3,4(r5)
 400f808:	10820014 	ori	r2,r2,2048
 400f80c:	2880030d 	sth	r2,12(r5)
 400f810:	00c04b0e 	bge	zero,r3,400f940 <__sflush_r+0x168>
 400f814:	8a000a17 	ldw	r8,40(r17)
 400f818:	40002326 	beq	r8,zero,400f8a8 <__sflush_r+0xd0>
 400f81c:	9c000017 	ldw	r16,0(r19)
 400f820:	10c4000c 	andi	r3,r2,4096
 400f824:	98000015 	stw	zero,0(r19)
 400f828:	18004826 	beq	r3,zero,400f94c <__sflush_r+0x174>
 400f82c:	89801417 	ldw	r6,80(r17)
 400f830:	10c0010c 	andi	r3,r2,4
 400f834:	18000626 	beq	r3,zero,400f850 <__sflush_r+0x78>
 400f838:	88c00117 	ldw	r3,4(r17)
 400f83c:	88800c17 	ldw	r2,48(r17)
 400f840:	30cdc83a 	sub	r6,r6,r3
 400f844:	10000226 	beq	r2,zero,400f850 <__sflush_r+0x78>
 400f848:	88800f17 	ldw	r2,60(r17)
 400f84c:	308dc83a 	sub	r6,r6,r2
 400f850:	89400717 	ldw	r5,28(r17)
 400f854:	000f883a 	mov	r7,zero
 400f858:	9809883a 	mov	r4,r19
 400f85c:	403ee83a 	callr	r8
 400f860:	00ffffc4 	movi	r3,-1
 400f864:	10c04426 	beq	r2,r3,400f978 <__sflush_r+0x1a0>
 400f868:	88c0030b 	ldhu	r3,12(r17)
 400f86c:	89000417 	ldw	r4,16(r17)
 400f870:	88000115 	stw	zero,4(r17)
 400f874:	197dffcc 	andi	r5,r3,63487
 400f878:	8940030d 	sth	r5,12(r17)
 400f87c:	89000015 	stw	r4,0(r17)
 400f880:	18c4000c 	andi	r3,r3,4096
 400f884:	18002c1e 	bne	r3,zero,400f938 <__sflush_r+0x160>
 400f888:	89400c17 	ldw	r5,48(r17)
 400f88c:	9c000015 	stw	r16,0(r19)
 400f890:	28000526 	beq	r5,zero,400f8a8 <__sflush_r+0xd0>
 400f894:	88801004 	addi	r2,r17,64
 400f898:	28800226 	beq	r5,r2,400f8a4 <__sflush_r+0xcc>
 400f89c:	9809883a 	mov	r4,r19
 400f8a0:	400ff440 	call	400ff44 <_free_r>
 400f8a4:	88000c15 	stw	zero,48(r17)
 400f8a8:	0005883a 	mov	r2,zero
 400f8ac:	dfc00417 	ldw	ra,16(sp)
 400f8b0:	dcc00317 	ldw	r19,12(sp)
 400f8b4:	dc800217 	ldw	r18,8(sp)
 400f8b8:	dc400117 	ldw	r17,4(sp)
 400f8bc:	dc000017 	ldw	r16,0(sp)
 400f8c0:	dec00504 	addi	sp,sp,20
 400f8c4:	f800283a 	ret
 400f8c8:	2c800417 	ldw	r18,16(r5)
 400f8cc:	903ff626 	beq	r18,zero,400f8a8 <__alt_data_end+0xfc00f8a8>
 400f8d0:	2c000017 	ldw	r16,0(r5)
 400f8d4:	108000cc 	andi	r2,r2,3
 400f8d8:	2c800015 	stw	r18,0(r5)
 400f8dc:	84a1c83a 	sub	r16,r16,r18
 400f8e0:	1000131e 	bne	r2,zero,400f930 <__sflush_r+0x158>
 400f8e4:	28800517 	ldw	r2,20(r5)
 400f8e8:	88800215 	stw	r2,8(r17)
 400f8ec:	04000316 	blt	zero,r16,400f8fc <__sflush_r+0x124>
 400f8f0:	003fed06 	br	400f8a8 <__alt_data_end+0xfc00f8a8>
 400f8f4:	90a5883a 	add	r18,r18,r2
 400f8f8:	043feb0e 	bge	zero,r16,400f8a8 <__alt_data_end+0xfc00f8a8>
 400f8fc:	88800917 	ldw	r2,36(r17)
 400f900:	89400717 	ldw	r5,28(r17)
 400f904:	800f883a 	mov	r7,r16
 400f908:	900d883a 	mov	r6,r18
 400f90c:	9809883a 	mov	r4,r19
 400f910:	103ee83a 	callr	r2
 400f914:	80a1c83a 	sub	r16,r16,r2
 400f918:	00bff616 	blt	zero,r2,400f8f4 <__alt_data_end+0xfc00f8f4>
 400f91c:	88c0030b 	ldhu	r3,12(r17)
 400f920:	00bfffc4 	movi	r2,-1
 400f924:	18c01014 	ori	r3,r3,64
 400f928:	88c0030d 	sth	r3,12(r17)
 400f92c:	003fdf06 	br	400f8ac <__alt_data_end+0xfc00f8ac>
 400f930:	0005883a 	mov	r2,zero
 400f934:	003fec06 	br	400f8e8 <__alt_data_end+0xfc00f8e8>
 400f938:	88801415 	stw	r2,80(r17)
 400f93c:	003fd206 	br	400f888 <__alt_data_end+0xfc00f888>
 400f940:	28c00f17 	ldw	r3,60(r5)
 400f944:	00ffb316 	blt	zero,r3,400f814 <__alt_data_end+0xfc00f814>
 400f948:	003fd706 	br	400f8a8 <__alt_data_end+0xfc00f8a8>
 400f94c:	89400717 	ldw	r5,28(r17)
 400f950:	000d883a 	mov	r6,zero
 400f954:	01c00044 	movi	r7,1
 400f958:	9809883a 	mov	r4,r19
 400f95c:	403ee83a 	callr	r8
 400f960:	100d883a 	mov	r6,r2
 400f964:	00bfffc4 	movi	r2,-1
 400f968:	30801426 	beq	r6,r2,400f9bc <__sflush_r+0x1e4>
 400f96c:	8880030b 	ldhu	r2,12(r17)
 400f970:	8a000a17 	ldw	r8,40(r17)
 400f974:	003fae06 	br	400f830 <__alt_data_end+0xfc00f830>
 400f978:	98c00017 	ldw	r3,0(r19)
 400f97c:	183fba26 	beq	r3,zero,400f868 <__alt_data_end+0xfc00f868>
 400f980:	01000744 	movi	r4,29
 400f984:	19000626 	beq	r3,r4,400f9a0 <__sflush_r+0x1c8>
 400f988:	01000584 	movi	r4,22
 400f98c:	19000426 	beq	r3,r4,400f9a0 <__sflush_r+0x1c8>
 400f990:	88c0030b 	ldhu	r3,12(r17)
 400f994:	18c01014 	ori	r3,r3,64
 400f998:	88c0030d 	sth	r3,12(r17)
 400f99c:	003fc306 	br	400f8ac <__alt_data_end+0xfc00f8ac>
 400f9a0:	8880030b 	ldhu	r2,12(r17)
 400f9a4:	88c00417 	ldw	r3,16(r17)
 400f9a8:	88000115 	stw	zero,4(r17)
 400f9ac:	10bdffcc 	andi	r2,r2,63487
 400f9b0:	8880030d 	sth	r2,12(r17)
 400f9b4:	88c00015 	stw	r3,0(r17)
 400f9b8:	003fb306 	br	400f888 <__alt_data_end+0xfc00f888>
 400f9bc:	98800017 	ldw	r2,0(r19)
 400f9c0:	103fea26 	beq	r2,zero,400f96c <__alt_data_end+0xfc00f96c>
 400f9c4:	00c00744 	movi	r3,29
 400f9c8:	10c00226 	beq	r2,r3,400f9d4 <__sflush_r+0x1fc>
 400f9cc:	00c00584 	movi	r3,22
 400f9d0:	10c0031e 	bne	r2,r3,400f9e0 <__sflush_r+0x208>
 400f9d4:	9c000015 	stw	r16,0(r19)
 400f9d8:	0005883a 	mov	r2,zero
 400f9dc:	003fb306 	br	400f8ac <__alt_data_end+0xfc00f8ac>
 400f9e0:	88c0030b 	ldhu	r3,12(r17)
 400f9e4:	3005883a 	mov	r2,r6
 400f9e8:	18c01014 	ori	r3,r3,64
 400f9ec:	88c0030d 	sth	r3,12(r17)
 400f9f0:	003fae06 	br	400f8ac <__alt_data_end+0xfc00f8ac>

0400f9f4 <_fflush_r>:
 400f9f4:	defffd04 	addi	sp,sp,-12
 400f9f8:	dc000115 	stw	r16,4(sp)
 400f9fc:	dfc00215 	stw	ra,8(sp)
 400fa00:	2021883a 	mov	r16,r4
 400fa04:	20000226 	beq	r4,zero,400fa10 <_fflush_r+0x1c>
 400fa08:	20800e17 	ldw	r2,56(r4)
 400fa0c:	10000c26 	beq	r2,zero,400fa40 <_fflush_r+0x4c>
 400fa10:	2880030f 	ldh	r2,12(r5)
 400fa14:	1000051e 	bne	r2,zero,400fa2c <_fflush_r+0x38>
 400fa18:	0005883a 	mov	r2,zero
 400fa1c:	dfc00217 	ldw	ra,8(sp)
 400fa20:	dc000117 	ldw	r16,4(sp)
 400fa24:	dec00304 	addi	sp,sp,12
 400fa28:	f800283a 	ret
 400fa2c:	8009883a 	mov	r4,r16
 400fa30:	dfc00217 	ldw	ra,8(sp)
 400fa34:	dc000117 	ldw	r16,4(sp)
 400fa38:	dec00304 	addi	sp,sp,12
 400fa3c:	400f7d81 	jmpi	400f7d8 <__sflush_r>
 400fa40:	d9400015 	stw	r5,0(sp)
 400fa44:	400fdd00 	call	400fdd0 <__sinit>
 400fa48:	d9400017 	ldw	r5,0(sp)
 400fa4c:	003ff006 	br	400fa10 <__alt_data_end+0xfc00fa10>

0400fa50 <fflush>:
 400fa50:	20000526 	beq	r4,zero,400fa68 <fflush+0x18>
 400fa54:	008100b4 	movhi	r2,1026
 400fa58:	1086e904 	addi	r2,r2,7076
 400fa5c:	200b883a 	mov	r5,r4
 400fa60:	11000017 	ldw	r4,0(r2)
 400fa64:	400f9f41 	jmpi	400f9f4 <_fflush_r>
 400fa68:	008100b4 	movhi	r2,1026
 400fa6c:	1086e804 	addi	r2,r2,7072
 400fa70:	11000017 	ldw	r4,0(r2)
 400fa74:	01410074 	movhi	r5,1025
 400fa78:	297e7d04 	addi	r5,r5,-1548
 400fa7c:	40107d41 	jmpi	40107d4 <_fwalk_reent>

0400fa80 <__fp_unlock>:
 400fa80:	0005883a 	mov	r2,zero
 400fa84:	f800283a 	ret

0400fa88 <_cleanup_r>:
 400fa88:	01410074 	movhi	r5,1025
 400fa8c:	294f1004 	addi	r5,r5,15424
 400fa90:	40107d41 	jmpi	40107d4 <_fwalk_reent>

0400fa94 <__sinit.part.1>:
 400fa94:	defff704 	addi	sp,sp,-36
 400fa98:	00c10074 	movhi	r3,1025
 400fa9c:	dfc00815 	stw	ra,32(sp)
 400faa0:	ddc00715 	stw	r23,28(sp)
 400faa4:	dd800615 	stw	r22,24(sp)
 400faa8:	dd400515 	stw	r21,20(sp)
 400faac:	dd000415 	stw	r20,16(sp)
 400fab0:	dcc00315 	stw	r19,12(sp)
 400fab4:	dc800215 	stw	r18,8(sp)
 400fab8:	dc400115 	stw	r17,4(sp)
 400fabc:	dc000015 	stw	r16,0(sp)
 400fac0:	18fea204 	addi	r3,r3,-1400
 400fac4:	24000117 	ldw	r16,4(r4)
 400fac8:	20c00f15 	stw	r3,60(r4)
 400facc:	2080bb04 	addi	r2,r4,748
 400fad0:	00c000c4 	movi	r3,3
 400fad4:	20c0b915 	stw	r3,740(r4)
 400fad8:	2080ba15 	stw	r2,744(r4)
 400fadc:	2000b815 	stw	zero,736(r4)
 400fae0:	05c00204 	movi	r23,8
 400fae4:	00800104 	movi	r2,4
 400fae8:	2025883a 	mov	r18,r4
 400faec:	b80d883a 	mov	r6,r23
 400faf0:	81001704 	addi	r4,r16,92
 400faf4:	000b883a 	mov	r5,zero
 400faf8:	80000015 	stw	zero,0(r16)
 400fafc:	80000115 	stw	zero,4(r16)
 400fb00:	80000215 	stw	zero,8(r16)
 400fb04:	8080030d 	sth	r2,12(r16)
 400fb08:	80001915 	stw	zero,100(r16)
 400fb0c:	8000038d 	sth	zero,14(r16)
 400fb10:	80000415 	stw	zero,16(r16)
 400fb14:	80000515 	stw	zero,20(r16)
 400fb18:	80000615 	stw	zero,24(r16)
 400fb1c:	400b3f00 	call	400b3f0 <memset>
 400fb20:	05810074 	movhi	r22,1025
 400fb24:	94400217 	ldw	r17,8(r18)
 400fb28:	05410074 	movhi	r21,1025
 400fb2c:	05010074 	movhi	r20,1025
 400fb30:	04c10074 	movhi	r19,1025
 400fb34:	b588d104 	addi	r22,r22,9028
 400fb38:	ad48e804 	addi	r21,r21,9120
 400fb3c:	a5090704 	addi	r20,r20,9244
 400fb40:	9cc91e04 	addi	r19,r19,9336
 400fb44:	85800815 	stw	r22,32(r16)
 400fb48:	85400915 	stw	r21,36(r16)
 400fb4c:	85000a15 	stw	r20,40(r16)
 400fb50:	84c00b15 	stw	r19,44(r16)
 400fb54:	84000715 	stw	r16,28(r16)
 400fb58:	00800284 	movi	r2,10
 400fb5c:	8880030d 	sth	r2,12(r17)
 400fb60:	00800044 	movi	r2,1
 400fb64:	b80d883a 	mov	r6,r23
 400fb68:	89001704 	addi	r4,r17,92
 400fb6c:	000b883a 	mov	r5,zero
 400fb70:	88000015 	stw	zero,0(r17)
 400fb74:	88000115 	stw	zero,4(r17)
 400fb78:	88000215 	stw	zero,8(r17)
 400fb7c:	88001915 	stw	zero,100(r17)
 400fb80:	8880038d 	sth	r2,14(r17)
 400fb84:	88000415 	stw	zero,16(r17)
 400fb88:	88000515 	stw	zero,20(r17)
 400fb8c:	88000615 	stw	zero,24(r17)
 400fb90:	400b3f00 	call	400b3f0 <memset>
 400fb94:	94000317 	ldw	r16,12(r18)
 400fb98:	00800484 	movi	r2,18
 400fb9c:	8c400715 	stw	r17,28(r17)
 400fba0:	8d800815 	stw	r22,32(r17)
 400fba4:	8d400915 	stw	r21,36(r17)
 400fba8:	8d000a15 	stw	r20,40(r17)
 400fbac:	8cc00b15 	stw	r19,44(r17)
 400fbb0:	8080030d 	sth	r2,12(r16)
 400fbb4:	00800084 	movi	r2,2
 400fbb8:	80000015 	stw	zero,0(r16)
 400fbbc:	80000115 	stw	zero,4(r16)
 400fbc0:	80000215 	stw	zero,8(r16)
 400fbc4:	80001915 	stw	zero,100(r16)
 400fbc8:	8080038d 	sth	r2,14(r16)
 400fbcc:	80000415 	stw	zero,16(r16)
 400fbd0:	80000515 	stw	zero,20(r16)
 400fbd4:	80000615 	stw	zero,24(r16)
 400fbd8:	b80d883a 	mov	r6,r23
 400fbdc:	000b883a 	mov	r5,zero
 400fbe0:	81001704 	addi	r4,r16,92
 400fbe4:	400b3f00 	call	400b3f0 <memset>
 400fbe8:	00800044 	movi	r2,1
 400fbec:	84000715 	stw	r16,28(r16)
 400fbf0:	85800815 	stw	r22,32(r16)
 400fbf4:	85400915 	stw	r21,36(r16)
 400fbf8:	85000a15 	stw	r20,40(r16)
 400fbfc:	84c00b15 	stw	r19,44(r16)
 400fc00:	90800e15 	stw	r2,56(r18)
 400fc04:	dfc00817 	ldw	ra,32(sp)
 400fc08:	ddc00717 	ldw	r23,28(sp)
 400fc0c:	dd800617 	ldw	r22,24(sp)
 400fc10:	dd400517 	ldw	r21,20(sp)
 400fc14:	dd000417 	ldw	r20,16(sp)
 400fc18:	dcc00317 	ldw	r19,12(sp)
 400fc1c:	dc800217 	ldw	r18,8(sp)
 400fc20:	dc400117 	ldw	r17,4(sp)
 400fc24:	dc000017 	ldw	r16,0(sp)
 400fc28:	dec00904 	addi	sp,sp,36
 400fc2c:	f800283a 	ret

0400fc30 <__fp_lock>:
 400fc30:	0005883a 	mov	r2,zero
 400fc34:	f800283a 	ret

0400fc38 <__sfmoreglue>:
 400fc38:	defffc04 	addi	sp,sp,-16
 400fc3c:	dc400115 	stw	r17,4(sp)
 400fc40:	2c7fffc4 	addi	r17,r5,-1
 400fc44:	8c401a24 	muli	r17,r17,104
 400fc48:	dc800215 	stw	r18,8(sp)
 400fc4c:	2825883a 	mov	r18,r5
 400fc50:	89401d04 	addi	r5,r17,116
 400fc54:	dc000015 	stw	r16,0(sp)
 400fc58:	dfc00315 	stw	ra,12(sp)
 400fc5c:	400aa200 	call	400aa20 <_malloc_r>
 400fc60:	1021883a 	mov	r16,r2
 400fc64:	10000726 	beq	r2,zero,400fc84 <__sfmoreglue+0x4c>
 400fc68:	11000304 	addi	r4,r2,12
 400fc6c:	10000015 	stw	zero,0(r2)
 400fc70:	14800115 	stw	r18,4(r2)
 400fc74:	11000215 	stw	r4,8(r2)
 400fc78:	89801a04 	addi	r6,r17,104
 400fc7c:	000b883a 	mov	r5,zero
 400fc80:	400b3f00 	call	400b3f0 <memset>
 400fc84:	8005883a 	mov	r2,r16
 400fc88:	dfc00317 	ldw	ra,12(sp)
 400fc8c:	dc800217 	ldw	r18,8(sp)
 400fc90:	dc400117 	ldw	r17,4(sp)
 400fc94:	dc000017 	ldw	r16,0(sp)
 400fc98:	dec00404 	addi	sp,sp,16
 400fc9c:	f800283a 	ret

0400fca0 <__sfp>:
 400fca0:	defffb04 	addi	sp,sp,-20
 400fca4:	dc000015 	stw	r16,0(sp)
 400fca8:	040100b4 	movhi	r16,1026
 400fcac:	8406e804 	addi	r16,r16,7072
 400fcb0:	dcc00315 	stw	r19,12(sp)
 400fcb4:	2027883a 	mov	r19,r4
 400fcb8:	81000017 	ldw	r4,0(r16)
 400fcbc:	dfc00415 	stw	ra,16(sp)
 400fcc0:	dc800215 	stw	r18,8(sp)
 400fcc4:	20800e17 	ldw	r2,56(r4)
 400fcc8:	dc400115 	stw	r17,4(sp)
 400fccc:	1000021e 	bne	r2,zero,400fcd8 <__sfp+0x38>
 400fcd0:	400fa940 	call	400fa94 <__sinit.part.1>
 400fcd4:	81000017 	ldw	r4,0(r16)
 400fcd8:	2480b804 	addi	r18,r4,736
 400fcdc:	047fffc4 	movi	r17,-1
 400fce0:	91000117 	ldw	r4,4(r18)
 400fce4:	94000217 	ldw	r16,8(r18)
 400fce8:	213fffc4 	addi	r4,r4,-1
 400fcec:	20000a16 	blt	r4,zero,400fd18 <__sfp+0x78>
 400fcf0:	8080030f 	ldh	r2,12(r16)
 400fcf4:	10000c26 	beq	r2,zero,400fd28 <__sfp+0x88>
 400fcf8:	80c01d04 	addi	r3,r16,116
 400fcfc:	00000206 	br	400fd08 <__sfp+0x68>
 400fd00:	18bfe60f 	ldh	r2,-104(r3)
 400fd04:	10000826 	beq	r2,zero,400fd28 <__sfp+0x88>
 400fd08:	213fffc4 	addi	r4,r4,-1
 400fd0c:	1c3ffd04 	addi	r16,r3,-12
 400fd10:	18c01a04 	addi	r3,r3,104
 400fd14:	247ffa1e 	bne	r4,r17,400fd00 <__alt_data_end+0xfc00fd00>
 400fd18:	90800017 	ldw	r2,0(r18)
 400fd1c:	10001d26 	beq	r2,zero,400fd94 <__sfp+0xf4>
 400fd20:	1025883a 	mov	r18,r2
 400fd24:	003fee06 	br	400fce0 <__alt_data_end+0xfc00fce0>
 400fd28:	00bfffc4 	movi	r2,-1
 400fd2c:	8080038d 	sth	r2,14(r16)
 400fd30:	00800044 	movi	r2,1
 400fd34:	8080030d 	sth	r2,12(r16)
 400fd38:	80001915 	stw	zero,100(r16)
 400fd3c:	80000015 	stw	zero,0(r16)
 400fd40:	80000215 	stw	zero,8(r16)
 400fd44:	80000115 	stw	zero,4(r16)
 400fd48:	80000415 	stw	zero,16(r16)
 400fd4c:	80000515 	stw	zero,20(r16)
 400fd50:	80000615 	stw	zero,24(r16)
 400fd54:	01800204 	movi	r6,8
 400fd58:	000b883a 	mov	r5,zero
 400fd5c:	81001704 	addi	r4,r16,92
 400fd60:	400b3f00 	call	400b3f0 <memset>
 400fd64:	8005883a 	mov	r2,r16
 400fd68:	80000c15 	stw	zero,48(r16)
 400fd6c:	80000d15 	stw	zero,52(r16)
 400fd70:	80001115 	stw	zero,68(r16)
 400fd74:	80001215 	stw	zero,72(r16)
 400fd78:	dfc00417 	ldw	ra,16(sp)
 400fd7c:	dcc00317 	ldw	r19,12(sp)
 400fd80:	dc800217 	ldw	r18,8(sp)
 400fd84:	dc400117 	ldw	r17,4(sp)
 400fd88:	dc000017 	ldw	r16,0(sp)
 400fd8c:	dec00504 	addi	sp,sp,20
 400fd90:	f800283a 	ret
 400fd94:	01400104 	movi	r5,4
 400fd98:	9809883a 	mov	r4,r19
 400fd9c:	400fc380 	call	400fc38 <__sfmoreglue>
 400fda0:	90800015 	stw	r2,0(r18)
 400fda4:	103fde1e 	bne	r2,zero,400fd20 <__alt_data_end+0xfc00fd20>
 400fda8:	00800304 	movi	r2,12
 400fdac:	98800015 	stw	r2,0(r19)
 400fdb0:	0005883a 	mov	r2,zero
 400fdb4:	003ff006 	br	400fd78 <__alt_data_end+0xfc00fd78>

0400fdb8 <_cleanup>:
 400fdb8:	008100b4 	movhi	r2,1026
 400fdbc:	1086e804 	addi	r2,r2,7072
 400fdc0:	11000017 	ldw	r4,0(r2)
 400fdc4:	01410074 	movhi	r5,1025
 400fdc8:	294f1004 	addi	r5,r5,15424
 400fdcc:	40107d41 	jmpi	40107d4 <_fwalk_reent>

0400fdd0 <__sinit>:
 400fdd0:	20800e17 	ldw	r2,56(r4)
 400fdd4:	10000126 	beq	r2,zero,400fddc <__sinit+0xc>
 400fdd8:	f800283a 	ret
 400fddc:	400fa941 	jmpi	400fa94 <__sinit.part.1>

0400fde0 <__sfp_lock_acquire>:
 400fde0:	f800283a 	ret

0400fde4 <__sfp_lock_release>:
 400fde4:	f800283a 	ret

0400fde8 <__sinit_lock_acquire>:
 400fde8:	f800283a 	ret

0400fdec <__sinit_lock_release>:
 400fdec:	f800283a 	ret

0400fdf0 <__fp_lock_all>:
 400fdf0:	008100b4 	movhi	r2,1026
 400fdf4:	1086e904 	addi	r2,r2,7076
 400fdf8:	11000017 	ldw	r4,0(r2)
 400fdfc:	01410074 	movhi	r5,1025
 400fe00:	297f0c04 	addi	r5,r5,-976
 400fe04:	40107101 	jmpi	4010710 <_fwalk>

0400fe08 <__fp_unlock_all>:
 400fe08:	008100b4 	movhi	r2,1026
 400fe0c:	1086e904 	addi	r2,r2,7076
 400fe10:	11000017 	ldw	r4,0(r2)
 400fe14:	01410074 	movhi	r5,1025
 400fe18:	297ea004 	addi	r5,r5,-1408
 400fe1c:	40107101 	jmpi	4010710 <_fwalk>

0400fe20 <_malloc_trim_r>:
 400fe20:	defffb04 	addi	sp,sp,-20
 400fe24:	dcc00315 	stw	r19,12(sp)
 400fe28:	04c100b4 	movhi	r19,1026
 400fe2c:	dc800215 	stw	r18,8(sp)
 400fe30:	dc400115 	stw	r17,4(sp)
 400fe34:	dc000015 	stw	r16,0(sp)
 400fe38:	dfc00415 	stw	ra,16(sp)
 400fe3c:	2821883a 	mov	r16,r5
 400fe40:	9cc12d04 	addi	r19,r19,1204
 400fe44:	2025883a 	mov	r18,r4
 400fe48:	4017c500 	call	4017c50 <__malloc_lock>
 400fe4c:	98800217 	ldw	r2,8(r19)
 400fe50:	14400117 	ldw	r17,4(r2)
 400fe54:	00bfff04 	movi	r2,-4
 400fe58:	88a2703a 	and	r17,r17,r2
 400fe5c:	8c21c83a 	sub	r16,r17,r16
 400fe60:	8403fbc4 	addi	r16,r16,4079
 400fe64:	8020d33a 	srli	r16,r16,12
 400fe68:	0083ffc4 	movi	r2,4095
 400fe6c:	843fffc4 	addi	r16,r16,-1
 400fe70:	8020933a 	slli	r16,r16,12
 400fe74:	1400060e 	bge	r2,r16,400fe90 <_malloc_trim_r+0x70>
 400fe78:	000b883a 	mov	r5,zero
 400fe7c:	9009883a 	mov	r4,r18
 400fe80:	400b6580 	call	400b658 <_sbrk_r>
 400fe84:	98c00217 	ldw	r3,8(r19)
 400fe88:	1c47883a 	add	r3,r3,r17
 400fe8c:	10c00a26 	beq	r2,r3,400feb8 <_malloc_trim_r+0x98>
 400fe90:	9009883a 	mov	r4,r18
 400fe94:	4017c740 	call	4017c74 <__malloc_unlock>
 400fe98:	0005883a 	mov	r2,zero
 400fe9c:	dfc00417 	ldw	ra,16(sp)
 400fea0:	dcc00317 	ldw	r19,12(sp)
 400fea4:	dc800217 	ldw	r18,8(sp)
 400fea8:	dc400117 	ldw	r17,4(sp)
 400feac:	dc000017 	ldw	r16,0(sp)
 400feb0:	dec00504 	addi	sp,sp,20
 400feb4:	f800283a 	ret
 400feb8:	040bc83a 	sub	r5,zero,r16
 400febc:	9009883a 	mov	r4,r18
 400fec0:	400b6580 	call	400b658 <_sbrk_r>
 400fec4:	00ffffc4 	movi	r3,-1
 400fec8:	10c00d26 	beq	r2,r3,400ff00 <_malloc_trim_r+0xe0>
 400fecc:	00c100f4 	movhi	r3,1027
 400fed0:	18e3b904 	addi	r3,r3,-28956
 400fed4:	18800017 	ldw	r2,0(r3)
 400fed8:	99000217 	ldw	r4,8(r19)
 400fedc:	8c23c83a 	sub	r17,r17,r16
 400fee0:	8c400054 	ori	r17,r17,1
 400fee4:	1421c83a 	sub	r16,r2,r16
 400fee8:	24400115 	stw	r17,4(r4)
 400feec:	9009883a 	mov	r4,r18
 400fef0:	1c000015 	stw	r16,0(r3)
 400fef4:	4017c740 	call	4017c74 <__malloc_unlock>
 400fef8:	00800044 	movi	r2,1
 400fefc:	003fe706 	br	400fe9c <__alt_data_end+0xfc00fe9c>
 400ff00:	000b883a 	mov	r5,zero
 400ff04:	9009883a 	mov	r4,r18
 400ff08:	400b6580 	call	400b658 <_sbrk_r>
 400ff0c:	99000217 	ldw	r4,8(r19)
 400ff10:	014003c4 	movi	r5,15
 400ff14:	1107c83a 	sub	r3,r2,r4
 400ff18:	28ffdd0e 	bge	r5,r3,400fe90 <__alt_data_end+0xfc00fe90>
 400ff1c:	014100b4 	movhi	r5,1026
 400ff20:	2946ea04 	addi	r5,r5,7080
 400ff24:	29400017 	ldw	r5,0(r5)
 400ff28:	18c00054 	ori	r3,r3,1
 400ff2c:	20c00115 	stw	r3,4(r4)
 400ff30:	00c100f4 	movhi	r3,1027
 400ff34:	1145c83a 	sub	r2,r2,r5
 400ff38:	18e3b904 	addi	r3,r3,-28956
 400ff3c:	18800015 	stw	r2,0(r3)
 400ff40:	003fd306 	br	400fe90 <__alt_data_end+0xfc00fe90>

0400ff44 <_free_r>:
 400ff44:	28004126 	beq	r5,zero,401004c <_free_r+0x108>
 400ff48:	defffd04 	addi	sp,sp,-12
 400ff4c:	dc400115 	stw	r17,4(sp)
 400ff50:	dc000015 	stw	r16,0(sp)
 400ff54:	2023883a 	mov	r17,r4
 400ff58:	2821883a 	mov	r16,r5
 400ff5c:	dfc00215 	stw	ra,8(sp)
 400ff60:	4017c500 	call	4017c50 <__malloc_lock>
 400ff64:	81ffff17 	ldw	r7,-4(r16)
 400ff68:	00bfff84 	movi	r2,-2
 400ff6c:	010100b4 	movhi	r4,1026
 400ff70:	81bffe04 	addi	r6,r16,-8
 400ff74:	3884703a 	and	r2,r7,r2
 400ff78:	21012d04 	addi	r4,r4,1204
 400ff7c:	308b883a 	add	r5,r6,r2
 400ff80:	2a400117 	ldw	r9,4(r5)
 400ff84:	22000217 	ldw	r8,8(r4)
 400ff88:	00ffff04 	movi	r3,-4
 400ff8c:	48c6703a 	and	r3,r9,r3
 400ff90:	2a005726 	beq	r5,r8,40100f0 <_free_r+0x1ac>
 400ff94:	28c00115 	stw	r3,4(r5)
 400ff98:	39c0004c 	andi	r7,r7,1
 400ff9c:	3800091e 	bne	r7,zero,400ffc4 <_free_r+0x80>
 400ffa0:	823ffe17 	ldw	r8,-8(r16)
 400ffa4:	22400204 	addi	r9,r4,8
 400ffa8:	320dc83a 	sub	r6,r6,r8
 400ffac:	31c00217 	ldw	r7,8(r6)
 400ffb0:	1205883a 	add	r2,r2,r8
 400ffb4:	3a406526 	beq	r7,r9,401014c <_free_r+0x208>
 400ffb8:	32000317 	ldw	r8,12(r6)
 400ffbc:	3a000315 	stw	r8,12(r7)
 400ffc0:	41c00215 	stw	r7,8(r8)
 400ffc4:	28cf883a 	add	r7,r5,r3
 400ffc8:	39c00117 	ldw	r7,4(r7)
 400ffcc:	39c0004c 	andi	r7,r7,1
 400ffd0:	38003a26 	beq	r7,zero,40100bc <_free_r+0x178>
 400ffd4:	10c00054 	ori	r3,r2,1
 400ffd8:	30c00115 	stw	r3,4(r6)
 400ffdc:	3087883a 	add	r3,r6,r2
 400ffe0:	18800015 	stw	r2,0(r3)
 400ffe4:	00c07fc4 	movi	r3,511
 400ffe8:	18801936 	bltu	r3,r2,4010050 <_free_r+0x10c>
 400ffec:	1004d0fa 	srli	r2,r2,3
 400fff0:	01c00044 	movi	r7,1
 400fff4:	21400117 	ldw	r5,4(r4)
 400fff8:	10c00044 	addi	r3,r2,1
 400fffc:	18c7883a 	add	r3,r3,r3
 4010000:	1005d0ba 	srai	r2,r2,2
 4010004:	18c7883a 	add	r3,r3,r3
 4010008:	18c7883a 	add	r3,r3,r3
 401000c:	1907883a 	add	r3,r3,r4
 4010010:	3884983a 	sll	r2,r7,r2
 4010014:	19c00017 	ldw	r7,0(r3)
 4010018:	1a3ffe04 	addi	r8,r3,-8
 401001c:	1144b03a 	or	r2,r2,r5
 4010020:	32000315 	stw	r8,12(r6)
 4010024:	31c00215 	stw	r7,8(r6)
 4010028:	20800115 	stw	r2,4(r4)
 401002c:	19800015 	stw	r6,0(r3)
 4010030:	39800315 	stw	r6,12(r7)
 4010034:	8809883a 	mov	r4,r17
 4010038:	dfc00217 	ldw	ra,8(sp)
 401003c:	dc400117 	ldw	r17,4(sp)
 4010040:	dc000017 	ldw	r16,0(sp)
 4010044:	dec00304 	addi	sp,sp,12
 4010048:	4017c741 	jmpi	4017c74 <__malloc_unlock>
 401004c:	f800283a 	ret
 4010050:	100ad27a 	srli	r5,r2,9
 4010054:	00c00104 	movi	r3,4
 4010058:	19404a36 	bltu	r3,r5,4010184 <_free_r+0x240>
 401005c:	100ad1ba 	srli	r5,r2,6
 4010060:	28c00e44 	addi	r3,r5,57
 4010064:	18c7883a 	add	r3,r3,r3
 4010068:	29400e04 	addi	r5,r5,56
 401006c:	18c7883a 	add	r3,r3,r3
 4010070:	18c7883a 	add	r3,r3,r3
 4010074:	1909883a 	add	r4,r3,r4
 4010078:	20c00017 	ldw	r3,0(r4)
 401007c:	01c100b4 	movhi	r7,1026
 4010080:	213ffe04 	addi	r4,r4,-8
 4010084:	39c12d04 	addi	r7,r7,1204
 4010088:	20c04426 	beq	r4,r3,401019c <_free_r+0x258>
 401008c:	01ffff04 	movi	r7,-4
 4010090:	19400117 	ldw	r5,4(r3)
 4010094:	29ca703a 	and	r5,r5,r7
 4010098:	1140022e 	bgeu	r2,r5,40100a4 <_free_r+0x160>
 401009c:	18c00217 	ldw	r3,8(r3)
 40100a0:	20fffb1e 	bne	r4,r3,4010090 <__alt_data_end+0xfc010090>
 40100a4:	19000317 	ldw	r4,12(r3)
 40100a8:	31000315 	stw	r4,12(r6)
 40100ac:	30c00215 	stw	r3,8(r6)
 40100b0:	21800215 	stw	r6,8(r4)
 40100b4:	19800315 	stw	r6,12(r3)
 40100b8:	003fde06 	br	4010034 <__alt_data_end+0xfc010034>
 40100bc:	29c00217 	ldw	r7,8(r5)
 40100c0:	10c5883a 	add	r2,r2,r3
 40100c4:	00c100b4 	movhi	r3,1026
 40100c8:	18c12f04 	addi	r3,r3,1212
 40100cc:	38c03b26 	beq	r7,r3,40101bc <_free_r+0x278>
 40100d0:	2a000317 	ldw	r8,12(r5)
 40100d4:	11400054 	ori	r5,r2,1
 40100d8:	3087883a 	add	r3,r6,r2
 40100dc:	3a000315 	stw	r8,12(r7)
 40100e0:	41c00215 	stw	r7,8(r8)
 40100e4:	31400115 	stw	r5,4(r6)
 40100e8:	18800015 	stw	r2,0(r3)
 40100ec:	003fbd06 	br	400ffe4 <__alt_data_end+0xfc00ffe4>
 40100f0:	39c0004c 	andi	r7,r7,1
 40100f4:	10c5883a 	add	r2,r2,r3
 40100f8:	3800071e 	bne	r7,zero,4010118 <_free_r+0x1d4>
 40100fc:	81fffe17 	ldw	r7,-8(r16)
 4010100:	31cdc83a 	sub	r6,r6,r7
 4010104:	30c00317 	ldw	r3,12(r6)
 4010108:	31400217 	ldw	r5,8(r6)
 401010c:	11c5883a 	add	r2,r2,r7
 4010110:	28c00315 	stw	r3,12(r5)
 4010114:	19400215 	stw	r5,8(r3)
 4010118:	10c00054 	ori	r3,r2,1
 401011c:	30c00115 	stw	r3,4(r6)
 4010120:	00c100b4 	movhi	r3,1026
 4010124:	18c6eb04 	addi	r3,r3,7084
 4010128:	18c00017 	ldw	r3,0(r3)
 401012c:	21800215 	stw	r6,8(r4)
 4010130:	10ffc036 	bltu	r2,r3,4010034 <__alt_data_end+0xfc010034>
 4010134:	008100f4 	movhi	r2,1027
 4010138:	10a37e04 	addi	r2,r2,-29192
 401013c:	11400017 	ldw	r5,0(r2)
 4010140:	8809883a 	mov	r4,r17
 4010144:	400fe200 	call	400fe20 <_malloc_trim_r>
 4010148:	003fba06 	br	4010034 <__alt_data_end+0xfc010034>
 401014c:	28c9883a 	add	r4,r5,r3
 4010150:	21000117 	ldw	r4,4(r4)
 4010154:	2100004c 	andi	r4,r4,1
 4010158:	2000391e 	bne	r4,zero,4010240 <_free_r+0x2fc>
 401015c:	29c00217 	ldw	r7,8(r5)
 4010160:	29000317 	ldw	r4,12(r5)
 4010164:	1885883a 	add	r2,r3,r2
 4010168:	10c00054 	ori	r3,r2,1
 401016c:	39000315 	stw	r4,12(r7)
 4010170:	21c00215 	stw	r7,8(r4)
 4010174:	30c00115 	stw	r3,4(r6)
 4010178:	308d883a 	add	r6,r6,r2
 401017c:	30800015 	stw	r2,0(r6)
 4010180:	003fac06 	br	4010034 <__alt_data_end+0xfc010034>
 4010184:	00c00504 	movi	r3,20
 4010188:	19401536 	bltu	r3,r5,40101e0 <_free_r+0x29c>
 401018c:	28c01704 	addi	r3,r5,92
 4010190:	18c7883a 	add	r3,r3,r3
 4010194:	294016c4 	addi	r5,r5,91
 4010198:	003fb406 	br	401006c <__alt_data_end+0xfc01006c>
 401019c:	280bd0ba 	srai	r5,r5,2
 40101a0:	00c00044 	movi	r3,1
 40101a4:	38800117 	ldw	r2,4(r7)
 40101a8:	194a983a 	sll	r5,r3,r5
 40101ac:	2007883a 	mov	r3,r4
 40101b0:	2884b03a 	or	r2,r5,r2
 40101b4:	38800115 	stw	r2,4(r7)
 40101b8:	003fbb06 	br	40100a8 <__alt_data_end+0xfc0100a8>
 40101bc:	21800515 	stw	r6,20(r4)
 40101c0:	21800415 	stw	r6,16(r4)
 40101c4:	10c00054 	ori	r3,r2,1
 40101c8:	31c00315 	stw	r7,12(r6)
 40101cc:	31c00215 	stw	r7,8(r6)
 40101d0:	30c00115 	stw	r3,4(r6)
 40101d4:	308d883a 	add	r6,r6,r2
 40101d8:	30800015 	stw	r2,0(r6)
 40101dc:	003f9506 	br	4010034 <__alt_data_end+0xfc010034>
 40101e0:	00c01504 	movi	r3,84
 40101e4:	19400536 	bltu	r3,r5,40101fc <_free_r+0x2b8>
 40101e8:	100ad33a 	srli	r5,r2,12
 40101ec:	28c01bc4 	addi	r3,r5,111
 40101f0:	18c7883a 	add	r3,r3,r3
 40101f4:	29401b84 	addi	r5,r5,110
 40101f8:	003f9c06 	br	401006c <__alt_data_end+0xfc01006c>
 40101fc:	00c05504 	movi	r3,340
 4010200:	19400536 	bltu	r3,r5,4010218 <_free_r+0x2d4>
 4010204:	100ad3fa 	srli	r5,r2,15
 4010208:	28c01e04 	addi	r3,r5,120
 401020c:	18c7883a 	add	r3,r3,r3
 4010210:	29401dc4 	addi	r5,r5,119
 4010214:	003f9506 	br	401006c <__alt_data_end+0xfc01006c>
 4010218:	00c15504 	movi	r3,1364
 401021c:	19400536 	bltu	r3,r5,4010234 <_free_r+0x2f0>
 4010220:	100ad4ba 	srli	r5,r2,18
 4010224:	28c01f44 	addi	r3,r5,125
 4010228:	18c7883a 	add	r3,r3,r3
 401022c:	29401f04 	addi	r5,r5,124
 4010230:	003f8e06 	br	401006c <__alt_data_end+0xfc01006c>
 4010234:	00c03f84 	movi	r3,254
 4010238:	01401f84 	movi	r5,126
 401023c:	003f8b06 	br	401006c <__alt_data_end+0xfc01006c>
 4010240:	10c00054 	ori	r3,r2,1
 4010244:	30c00115 	stw	r3,4(r6)
 4010248:	308d883a 	add	r6,r6,r2
 401024c:	30800015 	stw	r2,0(r6)
 4010250:	003f7806 	br	4010034 <__alt_data_end+0xfc010034>

04010254 <__sfvwrite_r>:
 4010254:	30800217 	ldw	r2,8(r6)
 4010258:	10006726 	beq	r2,zero,40103f8 <__sfvwrite_r+0x1a4>
 401025c:	28c0030b 	ldhu	r3,12(r5)
 4010260:	defff404 	addi	sp,sp,-48
 4010264:	dd400715 	stw	r21,28(sp)
 4010268:	dd000615 	stw	r20,24(sp)
 401026c:	dc000215 	stw	r16,8(sp)
 4010270:	dfc00b15 	stw	ra,44(sp)
 4010274:	df000a15 	stw	fp,40(sp)
 4010278:	ddc00915 	stw	r23,36(sp)
 401027c:	dd800815 	stw	r22,32(sp)
 4010280:	dcc00515 	stw	r19,20(sp)
 4010284:	dc800415 	stw	r18,16(sp)
 4010288:	dc400315 	stw	r17,12(sp)
 401028c:	1880020c 	andi	r2,r3,8
 4010290:	2821883a 	mov	r16,r5
 4010294:	202b883a 	mov	r21,r4
 4010298:	3029883a 	mov	r20,r6
 401029c:	10002726 	beq	r2,zero,401033c <__sfvwrite_r+0xe8>
 40102a0:	28800417 	ldw	r2,16(r5)
 40102a4:	10002526 	beq	r2,zero,401033c <__sfvwrite_r+0xe8>
 40102a8:	1880008c 	andi	r2,r3,2
 40102ac:	a4400017 	ldw	r17,0(r20)
 40102b0:	10002a26 	beq	r2,zero,401035c <__sfvwrite_r+0x108>
 40102b4:	05a00034 	movhi	r22,32768
 40102b8:	0027883a 	mov	r19,zero
 40102bc:	0025883a 	mov	r18,zero
 40102c0:	b5bf0004 	addi	r22,r22,-1024
 40102c4:	980d883a 	mov	r6,r19
 40102c8:	a809883a 	mov	r4,r21
 40102cc:	90004626 	beq	r18,zero,40103e8 <__sfvwrite_r+0x194>
 40102d0:	900f883a 	mov	r7,r18
 40102d4:	b480022e 	bgeu	r22,r18,40102e0 <__sfvwrite_r+0x8c>
 40102d8:	01e00034 	movhi	r7,32768
 40102dc:	39ff0004 	addi	r7,r7,-1024
 40102e0:	80800917 	ldw	r2,36(r16)
 40102e4:	81400717 	ldw	r5,28(r16)
 40102e8:	103ee83a 	callr	r2
 40102ec:	0080570e 	bge	zero,r2,401044c <__sfvwrite_r+0x1f8>
 40102f0:	a0c00217 	ldw	r3,8(r20)
 40102f4:	98a7883a 	add	r19,r19,r2
 40102f8:	90a5c83a 	sub	r18,r18,r2
 40102fc:	1885c83a 	sub	r2,r3,r2
 4010300:	a0800215 	stw	r2,8(r20)
 4010304:	103fef1e 	bne	r2,zero,40102c4 <__alt_data_end+0xfc0102c4>
 4010308:	0005883a 	mov	r2,zero
 401030c:	dfc00b17 	ldw	ra,44(sp)
 4010310:	df000a17 	ldw	fp,40(sp)
 4010314:	ddc00917 	ldw	r23,36(sp)
 4010318:	dd800817 	ldw	r22,32(sp)
 401031c:	dd400717 	ldw	r21,28(sp)
 4010320:	dd000617 	ldw	r20,24(sp)
 4010324:	dcc00517 	ldw	r19,20(sp)
 4010328:	dc800417 	ldw	r18,16(sp)
 401032c:	dc400317 	ldw	r17,12(sp)
 4010330:	dc000217 	ldw	r16,8(sp)
 4010334:	dec00c04 	addi	sp,sp,48
 4010338:	f800283a 	ret
 401033c:	800b883a 	mov	r5,r16
 4010340:	a809883a 	mov	r4,r21
 4010344:	400ddfc0 	call	400ddfc <__swsetup_r>
 4010348:	1000eb1e 	bne	r2,zero,40106f8 <__sfvwrite_r+0x4a4>
 401034c:	80c0030b 	ldhu	r3,12(r16)
 4010350:	a4400017 	ldw	r17,0(r20)
 4010354:	1880008c 	andi	r2,r3,2
 4010358:	103fd61e 	bne	r2,zero,40102b4 <__alt_data_end+0xfc0102b4>
 401035c:	1880004c 	andi	r2,r3,1
 4010360:	10003f1e 	bne	r2,zero,4010460 <__sfvwrite_r+0x20c>
 4010364:	0039883a 	mov	fp,zero
 4010368:	0025883a 	mov	r18,zero
 401036c:	90001a26 	beq	r18,zero,40103d8 <__sfvwrite_r+0x184>
 4010370:	1880800c 	andi	r2,r3,512
 4010374:	84c00217 	ldw	r19,8(r16)
 4010378:	10002126 	beq	r2,zero,4010400 <__sfvwrite_r+0x1ac>
 401037c:	982f883a 	mov	r23,r19
 4010380:	94c09336 	bltu	r18,r19,40105d0 <__sfvwrite_r+0x37c>
 4010384:	1881200c 	andi	r2,r3,1152
 4010388:	10009e1e 	bne	r2,zero,4010604 <__sfvwrite_r+0x3b0>
 401038c:	81000017 	ldw	r4,0(r16)
 4010390:	b80d883a 	mov	r6,r23
 4010394:	e00b883a 	mov	r5,fp
 4010398:	4010c140 	call	4010c14 <memmove>
 401039c:	80c00217 	ldw	r3,8(r16)
 40103a0:	81000017 	ldw	r4,0(r16)
 40103a4:	9005883a 	mov	r2,r18
 40103a8:	1ce7c83a 	sub	r19,r3,r19
 40103ac:	25cf883a 	add	r7,r4,r23
 40103b0:	84c00215 	stw	r19,8(r16)
 40103b4:	81c00015 	stw	r7,0(r16)
 40103b8:	a0c00217 	ldw	r3,8(r20)
 40103bc:	e0b9883a 	add	fp,fp,r2
 40103c0:	90a5c83a 	sub	r18,r18,r2
 40103c4:	18a7c83a 	sub	r19,r3,r2
 40103c8:	a4c00215 	stw	r19,8(r20)
 40103cc:	983fce26 	beq	r19,zero,4010308 <__alt_data_end+0xfc010308>
 40103d0:	80c0030b 	ldhu	r3,12(r16)
 40103d4:	903fe61e 	bne	r18,zero,4010370 <__alt_data_end+0xfc010370>
 40103d8:	8f000017 	ldw	fp,0(r17)
 40103dc:	8c800117 	ldw	r18,4(r17)
 40103e0:	8c400204 	addi	r17,r17,8
 40103e4:	003fe106 	br	401036c <__alt_data_end+0xfc01036c>
 40103e8:	8cc00017 	ldw	r19,0(r17)
 40103ec:	8c800117 	ldw	r18,4(r17)
 40103f0:	8c400204 	addi	r17,r17,8
 40103f4:	003fb306 	br	40102c4 <__alt_data_end+0xfc0102c4>
 40103f8:	0005883a 	mov	r2,zero
 40103fc:	f800283a 	ret
 4010400:	81000017 	ldw	r4,0(r16)
 4010404:	80800417 	ldw	r2,16(r16)
 4010408:	11005736 	bltu	r2,r4,4010568 <__sfvwrite_r+0x314>
 401040c:	85c00517 	ldw	r23,20(r16)
 4010410:	95c05536 	bltu	r18,r23,4010568 <__sfvwrite_r+0x314>
 4010414:	00a00034 	movhi	r2,32768
 4010418:	10bfffc4 	addi	r2,r2,-1
 401041c:	9009883a 	mov	r4,r18
 4010420:	1480012e 	bgeu	r2,r18,4010428 <__sfvwrite_r+0x1d4>
 4010424:	1009883a 	mov	r4,r2
 4010428:	b80b883a 	mov	r5,r23
 401042c:	400a2c00 	call	400a2c0 <__divsi3>
 4010430:	15cf383a 	mul	r7,r2,r23
 4010434:	81400717 	ldw	r5,28(r16)
 4010438:	80800917 	ldw	r2,36(r16)
 401043c:	e00d883a 	mov	r6,fp
 4010440:	a809883a 	mov	r4,r21
 4010444:	103ee83a 	callr	r2
 4010448:	00bfdb16 	blt	zero,r2,40103b8 <__alt_data_end+0xfc0103b8>
 401044c:	8080030b 	ldhu	r2,12(r16)
 4010450:	10801014 	ori	r2,r2,64
 4010454:	8080030d 	sth	r2,12(r16)
 4010458:	00bfffc4 	movi	r2,-1
 401045c:	003fab06 	br	401030c <__alt_data_end+0xfc01030c>
 4010460:	0027883a 	mov	r19,zero
 4010464:	0011883a 	mov	r8,zero
 4010468:	0039883a 	mov	fp,zero
 401046c:	0025883a 	mov	r18,zero
 4010470:	90001f26 	beq	r18,zero,40104f0 <__sfvwrite_r+0x29c>
 4010474:	40005a26 	beq	r8,zero,40105e0 <__sfvwrite_r+0x38c>
 4010478:	982d883a 	mov	r22,r19
 401047c:	94c0012e 	bgeu	r18,r19,4010484 <__sfvwrite_r+0x230>
 4010480:	902d883a 	mov	r22,r18
 4010484:	81000017 	ldw	r4,0(r16)
 4010488:	80800417 	ldw	r2,16(r16)
 401048c:	b02f883a 	mov	r23,r22
 4010490:	81c00517 	ldw	r7,20(r16)
 4010494:	1100032e 	bgeu	r2,r4,40104a4 <__sfvwrite_r+0x250>
 4010498:	80c00217 	ldw	r3,8(r16)
 401049c:	38c7883a 	add	r3,r7,r3
 40104a0:	1d801816 	blt	r3,r22,4010504 <__sfvwrite_r+0x2b0>
 40104a4:	b1c03e16 	blt	r22,r7,40105a0 <__sfvwrite_r+0x34c>
 40104a8:	80800917 	ldw	r2,36(r16)
 40104ac:	81400717 	ldw	r5,28(r16)
 40104b0:	e00d883a 	mov	r6,fp
 40104b4:	da000115 	stw	r8,4(sp)
 40104b8:	a809883a 	mov	r4,r21
 40104bc:	103ee83a 	callr	r2
 40104c0:	102f883a 	mov	r23,r2
 40104c4:	da000117 	ldw	r8,4(sp)
 40104c8:	00bfe00e 	bge	zero,r2,401044c <__alt_data_end+0xfc01044c>
 40104cc:	9de7c83a 	sub	r19,r19,r23
 40104d0:	98001f26 	beq	r19,zero,4010550 <__sfvwrite_r+0x2fc>
 40104d4:	a0800217 	ldw	r2,8(r20)
 40104d8:	e5f9883a 	add	fp,fp,r23
 40104dc:	95e5c83a 	sub	r18,r18,r23
 40104e0:	15efc83a 	sub	r23,r2,r23
 40104e4:	a5c00215 	stw	r23,8(r20)
 40104e8:	b83f8726 	beq	r23,zero,4010308 <__alt_data_end+0xfc010308>
 40104ec:	903fe11e 	bne	r18,zero,4010474 <__alt_data_end+0xfc010474>
 40104f0:	8f000017 	ldw	fp,0(r17)
 40104f4:	8c800117 	ldw	r18,4(r17)
 40104f8:	0011883a 	mov	r8,zero
 40104fc:	8c400204 	addi	r17,r17,8
 4010500:	003fdb06 	br	4010470 <__alt_data_end+0xfc010470>
 4010504:	180d883a 	mov	r6,r3
 4010508:	e00b883a 	mov	r5,fp
 401050c:	da000115 	stw	r8,4(sp)
 4010510:	d8c00015 	stw	r3,0(sp)
 4010514:	4010c140 	call	4010c14 <memmove>
 4010518:	d8c00017 	ldw	r3,0(sp)
 401051c:	80800017 	ldw	r2,0(r16)
 4010520:	800b883a 	mov	r5,r16
 4010524:	a809883a 	mov	r4,r21
 4010528:	10c5883a 	add	r2,r2,r3
 401052c:	80800015 	stw	r2,0(r16)
 4010530:	d8c00015 	stw	r3,0(sp)
 4010534:	400f9f40 	call	400f9f4 <_fflush_r>
 4010538:	d8c00017 	ldw	r3,0(sp)
 401053c:	da000117 	ldw	r8,4(sp)
 4010540:	103fc21e 	bne	r2,zero,401044c <__alt_data_end+0xfc01044c>
 4010544:	182f883a 	mov	r23,r3
 4010548:	9de7c83a 	sub	r19,r19,r23
 401054c:	983fe11e 	bne	r19,zero,40104d4 <__alt_data_end+0xfc0104d4>
 4010550:	800b883a 	mov	r5,r16
 4010554:	a809883a 	mov	r4,r21
 4010558:	400f9f40 	call	400f9f4 <_fflush_r>
 401055c:	103fbb1e 	bne	r2,zero,401044c <__alt_data_end+0xfc01044c>
 4010560:	0011883a 	mov	r8,zero
 4010564:	003fdb06 	br	40104d4 <__alt_data_end+0xfc0104d4>
 4010568:	94c0012e 	bgeu	r18,r19,4010570 <__sfvwrite_r+0x31c>
 401056c:	9027883a 	mov	r19,r18
 4010570:	980d883a 	mov	r6,r19
 4010574:	e00b883a 	mov	r5,fp
 4010578:	4010c140 	call	4010c14 <memmove>
 401057c:	80800217 	ldw	r2,8(r16)
 4010580:	80c00017 	ldw	r3,0(r16)
 4010584:	14c5c83a 	sub	r2,r2,r19
 4010588:	1cc7883a 	add	r3,r3,r19
 401058c:	80800215 	stw	r2,8(r16)
 4010590:	80c00015 	stw	r3,0(r16)
 4010594:	10004326 	beq	r2,zero,40106a4 <__sfvwrite_r+0x450>
 4010598:	9805883a 	mov	r2,r19
 401059c:	003f8606 	br	40103b8 <__alt_data_end+0xfc0103b8>
 40105a0:	b00d883a 	mov	r6,r22
 40105a4:	e00b883a 	mov	r5,fp
 40105a8:	da000115 	stw	r8,4(sp)
 40105ac:	4010c140 	call	4010c14 <memmove>
 40105b0:	80800217 	ldw	r2,8(r16)
 40105b4:	80c00017 	ldw	r3,0(r16)
 40105b8:	da000117 	ldw	r8,4(sp)
 40105bc:	1585c83a 	sub	r2,r2,r22
 40105c0:	1dad883a 	add	r22,r3,r22
 40105c4:	80800215 	stw	r2,8(r16)
 40105c8:	85800015 	stw	r22,0(r16)
 40105cc:	003fbf06 	br	40104cc <__alt_data_end+0xfc0104cc>
 40105d0:	81000017 	ldw	r4,0(r16)
 40105d4:	9027883a 	mov	r19,r18
 40105d8:	902f883a 	mov	r23,r18
 40105dc:	003f6c06 	br	4010390 <__alt_data_end+0xfc010390>
 40105e0:	900d883a 	mov	r6,r18
 40105e4:	01400284 	movi	r5,10
 40105e8:	e009883a 	mov	r4,fp
 40105ec:	4010b300 	call	4010b30 <memchr>
 40105f0:	10003e26 	beq	r2,zero,40106ec <__sfvwrite_r+0x498>
 40105f4:	10800044 	addi	r2,r2,1
 40105f8:	1727c83a 	sub	r19,r2,fp
 40105fc:	02000044 	movi	r8,1
 4010600:	003f9d06 	br	4010478 <__alt_data_end+0xfc010478>
 4010604:	80800517 	ldw	r2,20(r16)
 4010608:	81400417 	ldw	r5,16(r16)
 401060c:	81c00017 	ldw	r7,0(r16)
 4010610:	10a7883a 	add	r19,r2,r2
 4010614:	9885883a 	add	r2,r19,r2
 4010618:	1026d7fa 	srli	r19,r2,31
 401061c:	396dc83a 	sub	r22,r7,r5
 4010620:	b1000044 	addi	r4,r22,1
 4010624:	9885883a 	add	r2,r19,r2
 4010628:	1027d07a 	srai	r19,r2,1
 401062c:	2485883a 	add	r2,r4,r18
 4010630:	980d883a 	mov	r6,r19
 4010634:	9880022e 	bgeu	r19,r2,4010640 <__sfvwrite_r+0x3ec>
 4010638:	1027883a 	mov	r19,r2
 401063c:	100d883a 	mov	r6,r2
 4010640:	18c1000c 	andi	r3,r3,1024
 4010644:	18001c26 	beq	r3,zero,40106b8 <__sfvwrite_r+0x464>
 4010648:	300b883a 	mov	r5,r6
 401064c:	a809883a 	mov	r4,r21
 4010650:	400aa200 	call	400aa20 <_malloc_r>
 4010654:	102f883a 	mov	r23,r2
 4010658:	10002926 	beq	r2,zero,4010700 <__sfvwrite_r+0x4ac>
 401065c:	81400417 	ldw	r5,16(r16)
 4010660:	b00d883a 	mov	r6,r22
 4010664:	1009883a 	mov	r4,r2
 4010668:	400b2a80 	call	400b2a8 <memcpy>
 401066c:	8080030b 	ldhu	r2,12(r16)
 4010670:	00fedfc4 	movi	r3,-1153
 4010674:	10c4703a 	and	r2,r2,r3
 4010678:	10802014 	ori	r2,r2,128
 401067c:	8080030d 	sth	r2,12(r16)
 4010680:	bd89883a 	add	r4,r23,r22
 4010684:	9d8fc83a 	sub	r7,r19,r22
 4010688:	85c00415 	stw	r23,16(r16)
 401068c:	84c00515 	stw	r19,20(r16)
 4010690:	81000015 	stw	r4,0(r16)
 4010694:	9027883a 	mov	r19,r18
 4010698:	81c00215 	stw	r7,8(r16)
 401069c:	902f883a 	mov	r23,r18
 40106a0:	003f3b06 	br	4010390 <__alt_data_end+0xfc010390>
 40106a4:	800b883a 	mov	r5,r16
 40106a8:	a809883a 	mov	r4,r21
 40106ac:	400f9f40 	call	400f9f4 <_fflush_r>
 40106b0:	103fb926 	beq	r2,zero,4010598 <__alt_data_end+0xfc010598>
 40106b4:	003f6506 	br	401044c <__alt_data_end+0xfc01044c>
 40106b8:	a809883a 	mov	r4,r21
 40106bc:	4011d6c0 	call	4011d6c <_realloc_r>
 40106c0:	102f883a 	mov	r23,r2
 40106c4:	103fee1e 	bne	r2,zero,4010680 <__alt_data_end+0xfc010680>
 40106c8:	81400417 	ldw	r5,16(r16)
 40106cc:	a809883a 	mov	r4,r21
 40106d0:	400ff440 	call	400ff44 <_free_r>
 40106d4:	8080030b 	ldhu	r2,12(r16)
 40106d8:	00ffdfc4 	movi	r3,-129
 40106dc:	1884703a 	and	r2,r3,r2
 40106e0:	00c00304 	movi	r3,12
 40106e4:	a8c00015 	stw	r3,0(r21)
 40106e8:	003f5906 	br	4010450 <__alt_data_end+0xfc010450>
 40106ec:	94c00044 	addi	r19,r18,1
 40106f0:	02000044 	movi	r8,1
 40106f4:	003f6006 	br	4010478 <__alt_data_end+0xfc010478>
 40106f8:	00bfffc4 	movi	r2,-1
 40106fc:	003f0306 	br	401030c <__alt_data_end+0xfc01030c>
 4010700:	00800304 	movi	r2,12
 4010704:	a8800015 	stw	r2,0(r21)
 4010708:	8080030b 	ldhu	r2,12(r16)
 401070c:	003f5006 	br	4010450 <__alt_data_end+0xfc010450>

04010710 <_fwalk>:
 4010710:	defff704 	addi	sp,sp,-36
 4010714:	dd000415 	stw	r20,16(sp)
 4010718:	dfc00815 	stw	ra,32(sp)
 401071c:	ddc00715 	stw	r23,28(sp)
 4010720:	dd800615 	stw	r22,24(sp)
 4010724:	dd400515 	stw	r21,20(sp)
 4010728:	dcc00315 	stw	r19,12(sp)
 401072c:	dc800215 	stw	r18,8(sp)
 4010730:	dc400115 	stw	r17,4(sp)
 4010734:	dc000015 	stw	r16,0(sp)
 4010738:	2500b804 	addi	r20,r4,736
 401073c:	a0002326 	beq	r20,zero,40107cc <_fwalk+0xbc>
 4010740:	282b883a 	mov	r21,r5
 4010744:	002f883a 	mov	r23,zero
 4010748:	05800044 	movi	r22,1
 401074c:	04ffffc4 	movi	r19,-1
 4010750:	a4400117 	ldw	r17,4(r20)
 4010754:	a4800217 	ldw	r18,8(r20)
 4010758:	8c7fffc4 	addi	r17,r17,-1
 401075c:	88000d16 	blt	r17,zero,4010794 <_fwalk+0x84>
 4010760:	94000304 	addi	r16,r18,12
 4010764:	94800384 	addi	r18,r18,14
 4010768:	8080000b 	ldhu	r2,0(r16)
 401076c:	8c7fffc4 	addi	r17,r17,-1
 4010770:	813ffd04 	addi	r4,r16,-12
 4010774:	b080042e 	bgeu	r22,r2,4010788 <_fwalk+0x78>
 4010778:	9080000f 	ldh	r2,0(r18)
 401077c:	14c00226 	beq	r2,r19,4010788 <_fwalk+0x78>
 4010780:	a83ee83a 	callr	r21
 4010784:	b8aeb03a 	or	r23,r23,r2
 4010788:	84001a04 	addi	r16,r16,104
 401078c:	94801a04 	addi	r18,r18,104
 4010790:	8cfff51e 	bne	r17,r19,4010768 <__alt_data_end+0xfc010768>
 4010794:	a5000017 	ldw	r20,0(r20)
 4010798:	a03fed1e 	bne	r20,zero,4010750 <__alt_data_end+0xfc010750>
 401079c:	b805883a 	mov	r2,r23
 40107a0:	dfc00817 	ldw	ra,32(sp)
 40107a4:	ddc00717 	ldw	r23,28(sp)
 40107a8:	dd800617 	ldw	r22,24(sp)
 40107ac:	dd400517 	ldw	r21,20(sp)
 40107b0:	dd000417 	ldw	r20,16(sp)
 40107b4:	dcc00317 	ldw	r19,12(sp)
 40107b8:	dc800217 	ldw	r18,8(sp)
 40107bc:	dc400117 	ldw	r17,4(sp)
 40107c0:	dc000017 	ldw	r16,0(sp)
 40107c4:	dec00904 	addi	sp,sp,36
 40107c8:	f800283a 	ret
 40107cc:	002f883a 	mov	r23,zero
 40107d0:	003ff206 	br	401079c <__alt_data_end+0xfc01079c>

040107d4 <_fwalk_reent>:
 40107d4:	defff704 	addi	sp,sp,-36
 40107d8:	dd000415 	stw	r20,16(sp)
 40107dc:	dfc00815 	stw	ra,32(sp)
 40107e0:	ddc00715 	stw	r23,28(sp)
 40107e4:	dd800615 	stw	r22,24(sp)
 40107e8:	dd400515 	stw	r21,20(sp)
 40107ec:	dcc00315 	stw	r19,12(sp)
 40107f0:	dc800215 	stw	r18,8(sp)
 40107f4:	dc400115 	stw	r17,4(sp)
 40107f8:	dc000015 	stw	r16,0(sp)
 40107fc:	2500b804 	addi	r20,r4,736
 4010800:	a0002326 	beq	r20,zero,4010890 <_fwalk_reent+0xbc>
 4010804:	282b883a 	mov	r21,r5
 4010808:	2027883a 	mov	r19,r4
 401080c:	002f883a 	mov	r23,zero
 4010810:	05800044 	movi	r22,1
 4010814:	04bfffc4 	movi	r18,-1
 4010818:	a4400117 	ldw	r17,4(r20)
 401081c:	a4000217 	ldw	r16,8(r20)
 4010820:	8c7fffc4 	addi	r17,r17,-1
 4010824:	88000c16 	blt	r17,zero,4010858 <_fwalk_reent+0x84>
 4010828:	84000304 	addi	r16,r16,12
 401082c:	8080000b 	ldhu	r2,0(r16)
 4010830:	8c7fffc4 	addi	r17,r17,-1
 4010834:	817ffd04 	addi	r5,r16,-12
 4010838:	b080052e 	bgeu	r22,r2,4010850 <_fwalk_reent+0x7c>
 401083c:	8080008f 	ldh	r2,2(r16)
 4010840:	9809883a 	mov	r4,r19
 4010844:	14800226 	beq	r2,r18,4010850 <_fwalk_reent+0x7c>
 4010848:	a83ee83a 	callr	r21
 401084c:	b8aeb03a 	or	r23,r23,r2
 4010850:	84001a04 	addi	r16,r16,104
 4010854:	8cbff51e 	bne	r17,r18,401082c <__alt_data_end+0xfc01082c>
 4010858:	a5000017 	ldw	r20,0(r20)
 401085c:	a03fee1e 	bne	r20,zero,4010818 <__alt_data_end+0xfc010818>
 4010860:	b805883a 	mov	r2,r23
 4010864:	dfc00817 	ldw	ra,32(sp)
 4010868:	ddc00717 	ldw	r23,28(sp)
 401086c:	dd800617 	ldw	r22,24(sp)
 4010870:	dd400517 	ldw	r21,20(sp)
 4010874:	dd000417 	ldw	r20,16(sp)
 4010878:	dcc00317 	ldw	r19,12(sp)
 401087c:	dc800217 	ldw	r18,8(sp)
 4010880:	dc400117 	ldw	r17,4(sp)
 4010884:	dc000017 	ldw	r16,0(sp)
 4010888:	dec00904 	addi	sp,sp,36
 401088c:	f800283a 	ret
 4010890:	002f883a 	mov	r23,zero
 4010894:	003ff206 	br	4010860 <__alt_data_end+0xfc010860>

04010898 <_setlocale_r>:
 4010898:	30001b26 	beq	r6,zero,4010908 <_setlocale_r+0x70>
 401089c:	014100b4 	movhi	r5,1026
 40108a0:	defffe04 	addi	sp,sp,-8
 40108a4:	2969e904 	addi	r5,r5,-22620
 40108a8:	3009883a 	mov	r4,r6
 40108ac:	dc000015 	stw	r16,0(sp)
 40108b0:	dfc00115 	stw	ra,4(sp)
 40108b4:	3021883a 	mov	r16,r6
 40108b8:	400b9b00 	call	400b9b0 <strcmp>
 40108bc:	1000061e 	bne	r2,zero,40108d8 <_setlocale_r+0x40>
 40108c0:	008100b4 	movhi	r2,1026
 40108c4:	10a9ca04 	addi	r2,r2,-22744
 40108c8:	dfc00117 	ldw	ra,4(sp)
 40108cc:	dc000017 	ldw	r16,0(sp)
 40108d0:	dec00204 	addi	sp,sp,8
 40108d4:	f800283a 	ret
 40108d8:	014100b4 	movhi	r5,1026
 40108dc:	2969ca04 	addi	r5,r5,-22744
 40108e0:	8009883a 	mov	r4,r16
 40108e4:	400b9b00 	call	400b9b0 <strcmp>
 40108e8:	103ff526 	beq	r2,zero,40108c0 <__alt_data_end+0xfc0108c0>
 40108ec:	014100b4 	movhi	r5,1026
 40108f0:	2969d404 	addi	r5,r5,-22704
 40108f4:	8009883a 	mov	r4,r16
 40108f8:	400b9b00 	call	400b9b0 <strcmp>
 40108fc:	103ff026 	beq	r2,zero,40108c0 <__alt_data_end+0xfc0108c0>
 4010900:	0005883a 	mov	r2,zero
 4010904:	003ff006 	br	40108c8 <__alt_data_end+0xfc0108c8>
 4010908:	008100b4 	movhi	r2,1026
 401090c:	10a9ca04 	addi	r2,r2,-22744
 4010910:	f800283a 	ret

04010914 <__locale_charset>:
 4010914:	008100b4 	movhi	r2,1026
 4010918:	10823704 	addi	r2,r2,2268
 401091c:	f800283a 	ret

04010920 <__locale_mb_cur_max>:
 4010920:	008100b4 	movhi	r2,1026
 4010924:	1086ec04 	addi	r2,r2,7088
 4010928:	10800017 	ldw	r2,0(r2)
 401092c:	f800283a 	ret

04010930 <__locale_msgcharset>:
 4010930:	008100b4 	movhi	r2,1026
 4010934:	10822f04 	addi	r2,r2,2236
 4010938:	f800283a 	ret

0401093c <__locale_cjk_lang>:
 401093c:	0005883a 	mov	r2,zero
 4010940:	f800283a 	ret

04010944 <_localeconv_r>:
 4010944:	008100b4 	movhi	r2,1026
 4010948:	10823f04 	addi	r2,r2,2300
 401094c:	f800283a 	ret

04010950 <setlocale>:
 4010950:	008100b4 	movhi	r2,1026
 4010954:	1086e904 	addi	r2,r2,7076
 4010958:	280d883a 	mov	r6,r5
 401095c:	200b883a 	mov	r5,r4
 4010960:	11000017 	ldw	r4,0(r2)
 4010964:	40108981 	jmpi	4010898 <_setlocale_r>

04010968 <localeconv>:
 4010968:	008100b4 	movhi	r2,1026
 401096c:	10823f04 	addi	r2,r2,2300
 4010970:	f800283a 	ret

04010974 <__smakebuf_r>:
 4010974:	2880030b 	ldhu	r2,12(r5)
 4010978:	10c0008c 	andi	r3,r2,2
 401097c:	1800411e 	bne	r3,zero,4010a84 <__smakebuf_r+0x110>
 4010980:	deffec04 	addi	sp,sp,-80
 4010984:	dc000f15 	stw	r16,60(sp)
 4010988:	2821883a 	mov	r16,r5
 401098c:	2940038f 	ldh	r5,14(r5)
 4010990:	dc401015 	stw	r17,64(sp)
 4010994:	dfc01315 	stw	ra,76(sp)
 4010998:	dcc01215 	stw	r19,72(sp)
 401099c:	dc801115 	stw	r18,68(sp)
 40109a0:	2023883a 	mov	r17,r4
 40109a4:	28001c16 	blt	r5,zero,4010a18 <__smakebuf_r+0xa4>
 40109a8:	d80d883a 	mov	r6,sp
 40109ac:	4013f4c0 	call	4013f4c <_fstat_r>
 40109b0:	10001816 	blt	r2,zero,4010a14 <__smakebuf_r+0xa0>
 40109b4:	d8800117 	ldw	r2,4(sp)
 40109b8:	00e00014 	movui	r3,32768
 40109bc:	10bc000c 	andi	r2,r2,61440
 40109c0:	14c80020 	cmpeqi	r19,r2,8192
 40109c4:	10c03726 	beq	r2,r3,4010aa4 <__smakebuf_r+0x130>
 40109c8:	80c0030b 	ldhu	r3,12(r16)
 40109cc:	18c20014 	ori	r3,r3,2048
 40109d0:	80c0030d 	sth	r3,12(r16)
 40109d4:	00c80004 	movi	r3,8192
 40109d8:	10c0521e 	bne	r2,r3,4010b24 <__smakebuf_r+0x1b0>
 40109dc:	8140038f 	ldh	r5,14(r16)
 40109e0:	8809883a 	mov	r4,r17
 40109e4:	4013fa80 	call	4013fa8 <_isatty_r>
 40109e8:	10004c26 	beq	r2,zero,4010b1c <__smakebuf_r+0x1a8>
 40109ec:	8080030b 	ldhu	r2,12(r16)
 40109f0:	80c010c4 	addi	r3,r16,67
 40109f4:	80c00015 	stw	r3,0(r16)
 40109f8:	10800054 	ori	r2,r2,1
 40109fc:	8080030d 	sth	r2,12(r16)
 4010a00:	00800044 	movi	r2,1
 4010a04:	80c00415 	stw	r3,16(r16)
 4010a08:	80800515 	stw	r2,20(r16)
 4010a0c:	04810004 	movi	r18,1024
 4010a10:	00000706 	br	4010a30 <__smakebuf_r+0xbc>
 4010a14:	8080030b 	ldhu	r2,12(r16)
 4010a18:	10c0200c 	andi	r3,r2,128
 4010a1c:	18001f1e 	bne	r3,zero,4010a9c <__smakebuf_r+0x128>
 4010a20:	04810004 	movi	r18,1024
 4010a24:	10820014 	ori	r2,r2,2048
 4010a28:	8080030d 	sth	r2,12(r16)
 4010a2c:	0027883a 	mov	r19,zero
 4010a30:	900b883a 	mov	r5,r18
 4010a34:	8809883a 	mov	r4,r17
 4010a38:	400aa200 	call	400aa20 <_malloc_r>
 4010a3c:	10002c26 	beq	r2,zero,4010af0 <__smakebuf_r+0x17c>
 4010a40:	80c0030b 	ldhu	r3,12(r16)
 4010a44:	01010074 	movhi	r4,1025
 4010a48:	213ea204 	addi	r4,r4,-1400
 4010a4c:	89000f15 	stw	r4,60(r17)
 4010a50:	18c02014 	ori	r3,r3,128
 4010a54:	80c0030d 	sth	r3,12(r16)
 4010a58:	80800015 	stw	r2,0(r16)
 4010a5c:	80800415 	stw	r2,16(r16)
 4010a60:	84800515 	stw	r18,20(r16)
 4010a64:	98001a1e 	bne	r19,zero,4010ad0 <__smakebuf_r+0x15c>
 4010a68:	dfc01317 	ldw	ra,76(sp)
 4010a6c:	dcc01217 	ldw	r19,72(sp)
 4010a70:	dc801117 	ldw	r18,68(sp)
 4010a74:	dc401017 	ldw	r17,64(sp)
 4010a78:	dc000f17 	ldw	r16,60(sp)
 4010a7c:	dec01404 	addi	sp,sp,80
 4010a80:	f800283a 	ret
 4010a84:	288010c4 	addi	r2,r5,67
 4010a88:	28800015 	stw	r2,0(r5)
 4010a8c:	28800415 	stw	r2,16(r5)
 4010a90:	00800044 	movi	r2,1
 4010a94:	28800515 	stw	r2,20(r5)
 4010a98:	f800283a 	ret
 4010a9c:	04801004 	movi	r18,64
 4010aa0:	003fe006 	br	4010a24 <__alt_data_end+0xfc010a24>
 4010aa4:	81000a17 	ldw	r4,40(r16)
 4010aa8:	00c10074 	movhi	r3,1025
 4010aac:	18c90704 	addi	r3,r3,9244
 4010ab0:	20ffc51e 	bne	r4,r3,40109c8 <__alt_data_end+0xfc0109c8>
 4010ab4:	8080030b 	ldhu	r2,12(r16)
 4010ab8:	04810004 	movi	r18,1024
 4010abc:	84801315 	stw	r18,76(r16)
 4010ac0:	1484b03a 	or	r2,r2,r18
 4010ac4:	8080030d 	sth	r2,12(r16)
 4010ac8:	0027883a 	mov	r19,zero
 4010acc:	003fd806 	br	4010a30 <__alt_data_end+0xfc010a30>
 4010ad0:	8140038f 	ldh	r5,14(r16)
 4010ad4:	8809883a 	mov	r4,r17
 4010ad8:	4013fa80 	call	4013fa8 <_isatty_r>
 4010adc:	103fe226 	beq	r2,zero,4010a68 <__alt_data_end+0xfc010a68>
 4010ae0:	8080030b 	ldhu	r2,12(r16)
 4010ae4:	10800054 	ori	r2,r2,1
 4010ae8:	8080030d 	sth	r2,12(r16)
 4010aec:	003fde06 	br	4010a68 <__alt_data_end+0xfc010a68>
 4010af0:	8080030b 	ldhu	r2,12(r16)
 4010af4:	10c0800c 	andi	r3,r2,512
 4010af8:	183fdb1e 	bne	r3,zero,4010a68 <__alt_data_end+0xfc010a68>
 4010afc:	10800094 	ori	r2,r2,2
 4010b00:	80c010c4 	addi	r3,r16,67
 4010b04:	8080030d 	sth	r2,12(r16)
 4010b08:	00800044 	movi	r2,1
 4010b0c:	80c00015 	stw	r3,0(r16)
 4010b10:	80c00415 	stw	r3,16(r16)
 4010b14:	80800515 	stw	r2,20(r16)
 4010b18:	003fd306 	br	4010a68 <__alt_data_end+0xfc010a68>
 4010b1c:	04810004 	movi	r18,1024
 4010b20:	003fc306 	br	4010a30 <__alt_data_end+0xfc010a30>
 4010b24:	0027883a 	mov	r19,zero
 4010b28:	04810004 	movi	r18,1024
 4010b2c:	003fc006 	br	4010a30 <__alt_data_end+0xfc010a30>

04010b30 <memchr>:
 4010b30:	208000cc 	andi	r2,r4,3
 4010b34:	280f883a 	mov	r7,r5
 4010b38:	10003426 	beq	r2,zero,4010c0c <memchr+0xdc>
 4010b3c:	30bfffc4 	addi	r2,r6,-1
 4010b40:	30001a26 	beq	r6,zero,4010bac <memchr+0x7c>
 4010b44:	20c00003 	ldbu	r3,0(r4)
 4010b48:	29803fcc 	andi	r6,r5,255
 4010b4c:	30c0051e 	bne	r6,r3,4010b64 <memchr+0x34>
 4010b50:	00001806 	br	4010bb4 <memchr+0x84>
 4010b54:	10001526 	beq	r2,zero,4010bac <memchr+0x7c>
 4010b58:	20c00003 	ldbu	r3,0(r4)
 4010b5c:	10bfffc4 	addi	r2,r2,-1
 4010b60:	30c01426 	beq	r6,r3,4010bb4 <memchr+0x84>
 4010b64:	21000044 	addi	r4,r4,1
 4010b68:	20c000cc 	andi	r3,r4,3
 4010b6c:	183ff91e 	bne	r3,zero,4010b54 <__alt_data_end+0xfc010b54>
 4010b70:	020000c4 	movi	r8,3
 4010b74:	40801136 	bltu	r8,r2,4010bbc <memchr+0x8c>
 4010b78:	10000c26 	beq	r2,zero,4010bac <memchr+0x7c>
 4010b7c:	20c00003 	ldbu	r3,0(r4)
 4010b80:	29403fcc 	andi	r5,r5,255
 4010b84:	28c00b26 	beq	r5,r3,4010bb4 <memchr+0x84>
 4010b88:	20c00044 	addi	r3,r4,1
 4010b8c:	39803fcc 	andi	r6,r7,255
 4010b90:	2089883a 	add	r4,r4,r2
 4010b94:	00000306 	br	4010ba4 <memchr+0x74>
 4010b98:	18c00044 	addi	r3,r3,1
 4010b9c:	197fffc3 	ldbu	r5,-1(r3)
 4010ba0:	31400526 	beq	r6,r5,4010bb8 <memchr+0x88>
 4010ba4:	1805883a 	mov	r2,r3
 4010ba8:	20fffb1e 	bne	r4,r3,4010b98 <__alt_data_end+0xfc010b98>
 4010bac:	0005883a 	mov	r2,zero
 4010bb0:	f800283a 	ret
 4010bb4:	2005883a 	mov	r2,r4
 4010bb8:	f800283a 	ret
 4010bbc:	28c03fcc 	andi	r3,r5,255
 4010bc0:	1812923a 	slli	r9,r3,8
 4010bc4:	02ffbff4 	movhi	r11,65279
 4010bc8:	02a02074 	movhi	r10,32897
 4010bcc:	48d2b03a 	or	r9,r9,r3
 4010bd0:	4806943a 	slli	r3,r9,16
 4010bd4:	5affbfc4 	addi	r11,r11,-257
 4010bd8:	52a02004 	addi	r10,r10,-32640
 4010bdc:	48d2b03a 	or	r9,r9,r3
 4010be0:	20c00017 	ldw	r3,0(r4)
 4010be4:	48c6f03a 	xor	r3,r9,r3
 4010be8:	1acd883a 	add	r6,r3,r11
 4010bec:	00c6303a 	nor	r3,zero,r3
 4010bf0:	30c6703a 	and	r3,r6,r3
 4010bf4:	1a86703a 	and	r3,r3,r10
 4010bf8:	183fe01e 	bne	r3,zero,4010b7c <__alt_data_end+0xfc010b7c>
 4010bfc:	10bfff04 	addi	r2,r2,-4
 4010c00:	21000104 	addi	r4,r4,4
 4010c04:	40bff636 	bltu	r8,r2,4010be0 <__alt_data_end+0xfc010be0>
 4010c08:	003fdb06 	br	4010b78 <__alt_data_end+0xfc010b78>
 4010c0c:	3005883a 	mov	r2,r6
 4010c10:	003fd706 	br	4010b70 <__alt_data_end+0xfc010b70>

04010c14 <memmove>:
 4010c14:	2005883a 	mov	r2,r4
 4010c18:	29000b2e 	bgeu	r5,r4,4010c48 <memmove+0x34>
 4010c1c:	298f883a 	add	r7,r5,r6
 4010c20:	21c0092e 	bgeu	r4,r7,4010c48 <memmove+0x34>
 4010c24:	2187883a 	add	r3,r4,r6
 4010c28:	198bc83a 	sub	r5,r3,r6
 4010c2c:	30004826 	beq	r6,zero,4010d50 <memmove+0x13c>
 4010c30:	39ffffc4 	addi	r7,r7,-1
 4010c34:	39000003 	ldbu	r4,0(r7)
 4010c38:	18ffffc4 	addi	r3,r3,-1
 4010c3c:	19000005 	stb	r4,0(r3)
 4010c40:	28fffb1e 	bne	r5,r3,4010c30 <__alt_data_end+0xfc010c30>
 4010c44:	f800283a 	ret
 4010c48:	00c003c4 	movi	r3,15
 4010c4c:	1980412e 	bgeu	r3,r6,4010d54 <memmove+0x140>
 4010c50:	2886b03a 	or	r3,r5,r2
 4010c54:	18c000cc 	andi	r3,r3,3
 4010c58:	1800401e 	bne	r3,zero,4010d5c <memmove+0x148>
 4010c5c:	33fffc04 	addi	r15,r6,-16
 4010c60:	781ed13a 	srli	r15,r15,4
 4010c64:	28c00104 	addi	r3,r5,4
 4010c68:	13400104 	addi	r13,r2,4
 4010c6c:	781c913a 	slli	r14,r15,4
 4010c70:	2b000204 	addi	r12,r5,8
 4010c74:	12c00204 	addi	r11,r2,8
 4010c78:	73800504 	addi	r14,r14,20
 4010c7c:	2a800304 	addi	r10,r5,12
 4010c80:	12400304 	addi	r9,r2,12
 4010c84:	2b9d883a 	add	r14,r5,r14
 4010c88:	2811883a 	mov	r8,r5
 4010c8c:	100f883a 	mov	r7,r2
 4010c90:	41000017 	ldw	r4,0(r8)
 4010c94:	39c00404 	addi	r7,r7,16
 4010c98:	18c00404 	addi	r3,r3,16
 4010c9c:	393ffc15 	stw	r4,-16(r7)
 4010ca0:	193ffc17 	ldw	r4,-16(r3)
 4010ca4:	6b400404 	addi	r13,r13,16
 4010ca8:	5ac00404 	addi	r11,r11,16
 4010cac:	693ffc15 	stw	r4,-16(r13)
 4010cb0:	61000017 	ldw	r4,0(r12)
 4010cb4:	4a400404 	addi	r9,r9,16
 4010cb8:	42000404 	addi	r8,r8,16
 4010cbc:	593ffc15 	stw	r4,-16(r11)
 4010cc0:	51000017 	ldw	r4,0(r10)
 4010cc4:	63000404 	addi	r12,r12,16
 4010cc8:	52800404 	addi	r10,r10,16
 4010ccc:	493ffc15 	stw	r4,-16(r9)
 4010cd0:	1bbfef1e 	bne	r3,r14,4010c90 <__alt_data_end+0xfc010c90>
 4010cd4:	79000044 	addi	r4,r15,1
 4010cd8:	2008913a 	slli	r4,r4,4
 4010cdc:	328003cc 	andi	r10,r6,15
 4010ce0:	02c000c4 	movi	r11,3
 4010ce4:	1107883a 	add	r3,r2,r4
 4010ce8:	290b883a 	add	r5,r5,r4
 4010cec:	5a801e2e 	bgeu	r11,r10,4010d68 <memmove+0x154>
 4010cf0:	1813883a 	mov	r9,r3
 4010cf4:	2811883a 	mov	r8,r5
 4010cf8:	500f883a 	mov	r7,r10
 4010cfc:	41000017 	ldw	r4,0(r8)
 4010d00:	4a400104 	addi	r9,r9,4
 4010d04:	39ffff04 	addi	r7,r7,-4
 4010d08:	493fff15 	stw	r4,-4(r9)
 4010d0c:	42000104 	addi	r8,r8,4
 4010d10:	59fffa36 	bltu	r11,r7,4010cfc <__alt_data_end+0xfc010cfc>
 4010d14:	513fff04 	addi	r4,r10,-4
 4010d18:	2008d0ba 	srli	r4,r4,2
 4010d1c:	318000cc 	andi	r6,r6,3
 4010d20:	21000044 	addi	r4,r4,1
 4010d24:	2109883a 	add	r4,r4,r4
 4010d28:	2109883a 	add	r4,r4,r4
 4010d2c:	1907883a 	add	r3,r3,r4
 4010d30:	290b883a 	add	r5,r5,r4
 4010d34:	30000b26 	beq	r6,zero,4010d64 <memmove+0x150>
 4010d38:	198d883a 	add	r6,r3,r6
 4010d3c:	29c00003 	ldbu	r7,0(r5)
 4010d40:	18c00044 	addi	r3,r3,1
 4010d44:	29400044 	addi	r5,r5,1
 4010d48:	19ffffc5 	stb	r7,-1(r3)
 4010d4c:	19bffb1e 	bne	r3,r6,4010d3c <__alt_data_end+0xfc010d3c>
 4010d50:	f800283a 	ret
 4010d54:	1007883a 	mov	r3,r2
 4010d58:	003ff606 	br	4010d34 <__alt_data_end+0xfc010d34>
 4010d5c:	1007883a 	mov	r3,r2
 4010d60:	003ff506 	br	4010d38 <__alt_data_end+0xfc010d38>
 4010d64:	f800283a 	ret
 4010d68:	500d883a 	mov	r6,r10
 4010d6c:	003ff106 	br	4010d34 <__alt_data_end+0xfc010d34>

04010d70 <_Balloc>:
 4010d70:	20801317 	ldw	r2,76(r4)
 4010d74:	defffc04 	addi	sp,sp,-16
 4010d78:	dc400115 	stw	r17,4(sp)
 4010d7c:	dc000015 	stw	r16,0(sp)
 4010d80:	dfc00315 	stw	ra,12(sp)
 4010d84:	dc800215 	stw	r18,8(sp)
 4010d88:	2023883a 	mov	r17,r4
 4010d8c:	2821883a 	mov	r16,r5
 4010d90:	10000f26 	beq	r2,zero,4010dd0 <_Balloc+0x60>
 4010d94:	8407883a 	add	r3,r16,r16
 4010d98:	18c7883a 	add	r3,r3,r3
 4010d9c:	10c7883a 	add	r3,r2,r3
 4010da0:	18800017 	ldw	r2,0(r3)
 4010da4:	10001126 	beq	r2,zero,4010dec <_Balloc+0x7c>
 4010da8:	11000017 	ldw	r4,0(r2)
 4010dac:	19000015 	stw	r4,0(r3)
 4010db0:	10000415 	stw	zero,16(r2)
 4010db4:	10000315 	stw	zero,12(r2)
 4010db8:	dfc00317 	ldw	ra,12(sp)
 4010dbc:	dc800217 	ldw	r18,8(sp)
 4010dc0:	dc400117 	ldw	r17,4(sp)
 4010dc4:	dc000017 	ldw	r16,0(sp)
 4010dc8:	dec00404 	addi	sp,sp,16
 4010dcc:	f800283a 	ret
 4010dd0:	01800844 	movi	r6,33
 4010dd4:	01400104 	movi	r5,4
 4010dd8:	4013b7c0 	call	4013b7c <_calloc_r>
 4010ddc:	88801315 	stw	r2,76(r17)
 4010de0:	103fec1e 	bne	r2,zero,4010d94 <__alt_data_end+0xfc010d94>
 4010de4:	0005883a 	mov	r2,zero
 4010de8:	003ff306 	br	4010db8 <__alt_data_end+0xfc010db8>
 4010dec:	01400044 	movi	r5,1
 4010df0:	2c24983a 	sll	r18,r5,r16
 4010df4:	8809883a 	mov	r4,r17
 4010df8:	91800144 	addi	r6,r18,5
 4010dfc:	318d883a 	add	r6,r6,r6
 4010e00:	318d883a 	add	r6,r6,r6
 4010e04:	4013b7c0 	call	4013b7c <_calloc_r>
 4010e08:	103ff626 	beq	r2,zero,4010de4 <__alt_data_end+0xfc010de4>
 4010e0c:	14000115 	stw	r16,4(r2)
 4010e10:	14800215 	stw	r18,8(r2)
 4010e14:	003fe606 	br	4010db0 <__alt_data_end+0xfc010db0>

04010e18 <_Bfree>:
 4010e18:	28000826 	beq	r5,zero,4010e3c <_Bfree+0x24>
 4010e1c:	28c00117 	ldw	r3,4(r5)
 4010e20:	20801317 	ldw	r2,76(r4)
 4010e24:	18c7883a 	add	r3,r3,r3
 4010e28:	18c7883a 	add	r3,r3,r3
 4010e2c:	10c5883a 	add	r2,r2,r3
 4010e30:	10c00017 	ldw	r3,0(r2)
 4010e34:	28c00015 	stw	r3,0(r5)
 4010e38:	11400015 	stw	r5,0(r2)
 4010e3c:	f800283a 	ret

04010e40 <__multadd>:
 4010e40:	defffa04 	addi	sp,sp,-24
 4010e44:	dc800315 	stw	r18,12(sp)
 4010e48:	dc400215 	stw	r17,8(sp)
 4010e4c:	dc000115 	stw	r16,4(sp)
 4010e50:	2823883a 	mov	r17,r5
 4010e54:	2c000417 	ldw	r16,16(r5)
 4010e58:	dfc00515 	stw	ra,20(sp)
 4010e5c:	dcc00415 	stw	r19,16(sp)
 4010e60:	2025883a 	mov	r18,r4
 4010e64:	29400504 	addi	r5,r5,20
 4010e68:	0011883a 	mov	r8,zero
 4010e6c:	28c00017 	ldw	r3,0(r5)
 4010e70:	29400104 	addi	r5,r5,4
 4010e74:	42000044 	addi	r8,r8,1
 4010e78:	18bfffcc 	andi	r2,r3,65535
 4010e7c:	1185383a 	mul	r2,r2,r6
 4010e80:	1806d43a 	srli	r3,r3,16
 4010e84:	11cf883a 	add	r7,r2,r7
 4010e88:	3808d43a 	srli	r4,r7,16
 4010e8c:	1987383a 	mul	r3,r3,r6
 4010e90:	38bfffcc 	andi	r2,r7,65535
 4010e94:	1907883a 	add	r3,r3,r4
 4010e98:	1808943a 	slli	r4,r3,16
 4010e9c:	180ed43a 	srli	r7,r3,16
 4010ea0:	2085883a 	add	r2,r4,r2
 4010ea4:	28bfff15 	stw	r2,-4(r5)
 4010ea8:	443ff016 	blt	r8,r16,4010e6c <__alt_data_end+0xfc010e6c>
 4010eac:	38000926 	beq	r7,zero,4010ed4 <__multadd+0x94>
 4010eb0:	88800217 	ldw	r2,8(r17)
 4010eb4:	80800f0e 	bge	r16,r2,4010ef4 <__multadd+0xb4>
 4010eb8:	80800144 	addi	r2,r16,5
 4010ebc:	1085883a 	add	r2,r2,r2
 4010ec0:	1085883a 	add	r2,r2,r2
 4010ec4:	8885883a 	add	r2,r17,r2
 4010ec8:	11c00015 	stw	r7,0(r2)
 4010ecc:	84000044 	addi	r16,r16,1
 4010ed0:	8c000415 	stw	r16,16(r17)
 4010ed4:	8805883a 	mov	r2,r17
 4010ed8:	dfc00517 	ldw	ra,20(sp)
 4010edc:	dcc00417 	ldw	r19,16(sp)
 4010ee0:	dc800317 	ldw	r18,12(sp)
 4010ee4:	dc400217 	ldw	r17,8(sp)
 4010ee8:	dc000117 	ldw	r16,4(sp)
 4010eec:	dec00604 	addi	sp,sp,24
 4010ef0:	f800283a 	ret
 4010ef4:	89400117 	ldw	r5,4(r17)
 4010ef8:	9009883a 	mov	r4,r18
 4010efc:	d9c00015 	stw	r7,0(sp)
 4010f00:	29400044 	addi	r5,r5,1
 4010f04:	4010d700 	call	4010d70 <_Balloc>
 4010f08:	89800417 	ldw	r6,16(r17)
 4010f0c:	89400304 	addi	r5,r17,12
 4010f10:	11000304 	addi	r4,r2,12
 4010f14:	31800084 	addi	r6,r6,2
 4010f18:	318d883a 	add	r6,r6,r6
 4010f1c:	318d883a 	add	r6,r6,r6
 4010f20:	1027883a 	mov	r19,r2
 4010f24:	400b2a80 	call	400b2a8 <memcpy>
 4010f28:	d9c00017 	ldw	r7,0(sp)
 4010f2c:	88000a26 	beq	r17,zero,4010f58 <__multadd+0x118>
 4010f30:	88c00117 	ldw	r3,4(r17)
 4010f34:	90801317 	ldw	r2,76(r18)
 4010f38:	18c7883a 	add	r3,r3,r3
 4010f3c:	18c7883a 	add	r3,r3,r3
 4010f40:	10c5883a 	add	r2,r2,r3
 4010f44:	10c00017 	ldw	r3,0(r2)
 4010f48:	88c00015 	stw	r3,0(r17)
 4010f4c:	14400015 	stw	r17,0(r2)
 4010f50:	9823883a 	mov	r17,r19
 4010f54:	003fd806 	br	4010eb8 <__alt_data_end+0xfc010eb8>
 4010f58:	9823883a 	mov	r17,r19
 4010f5c:	003fd606 	br	4010eb8 <__alt_data_end+0xfc010eb8>

04010f60 <__s2b>:
 4010f60:	defff904 	addi	sp,sp,-28
 4010f64:	dc400115 	stw	r17,4(sp)
 4010f68:	dc000015 	stw	r16,0(sp)
 4010f6c:	2023883a 	mov	r17,r4
 4010f70:	2821883a 	mov	r16,r5
 4010f74:	39000204 	addi	r4,r7,8
 4010f78:	01400244 	movi	r5,9
 4010f7c:	dcc00315 	stw	r19,12(sp)
 4010f80:	dc800215 	stw	r18,8(sp)
 4010f84:	dfc00615 	stw	ra,24(sp)
 4010f88:	dd400515 	stw	r21,20(sp)
 4010f8c:	dd000415 	stw	r20,16(sp)
 4010f90:	3825883a 	mov	r18,r7
 4010f94:	3027883a 	mov	r19,r6
 4010f98:	400a2c00 	call	400a2c0 <__divsi3>
 4010f9c:	00c00044 	movi	r3,1
 4010fa0:	000b883a 	mov	r5,zero
 4010fa4:	1880030e 	bge	r3,r2,4010fb4 <__s2b+0x54>
 4010fa8:	18c7883a 	add	r3,r3,r3
 4010fac:	29400044 	addi	r5,r5,1
 4010fb0:	18bffd16 	blt	r3,r2,4010fa8 <__alt_data_end+0xfc010fa8>
 4010fb4:	8809883a 	mov	r4,r17
 4010fb8:	4010d700 	call	4010d70 <_Balloc>
 4010fbc:	d8c00717 	ldw	r3,28(sp)
 4010fc0:	10c00515 	stw	r3,20(r2)
 4010fc4:	00c00044 	movi	r3,1
 4010fc8:	10c00415 	stw	r3,16(r2)
 4010fcc:	00c00244 	movi	r3,9
 4010fd0:	1cc0210e 	bge	r3,r19,4011058 <__s2b+0xf8>
 4010fd4:	80eb883a 	add	r21,r16,r3
 4010fd8:	a829883a 	mov	r20,r21
 4010fdc:	84e1883a 	add	r16,r16,r19
 4010fe0:	a1c00007 	ldb	r7,0(r20)
 4010fe4:	01800284 	movi	r6,10
 4010fe8:	a5000044 	addi	r20,r20,1
 4010fec:	100b883a 	mov	r5,r2
 4010ff0:	39fff404 	addi	r7,r7,-48
 4010ff4:	8809883a 	mov	r4,r17
 4010ff8:	4010e400 	call	4010e40 <__multadd>
 4010ffc:	a43ff81e 	bne	r20,r16,4010fe0 <__alt_data_end+0xfc010fe0>
 4011000:	ace1883a 	add	r16,r21,r19
 4011004:	843ffe04 	addi	r16,r16,-8
 4011008:	9c800a0e 	bge	r19,r18,4011034 <__s2b+0xd4>
 401100c:	94e5c83a 	sub	r18,r18,r19
 4011010:	84a5883a 	add	r18,r16,r18
 4011014:	81c00007 	ldb	r7,0(r16)
 4011018:	01800284 	movi	r6,10
 401101c:	84000044 	addi	r16,r16,1
 4011020:	100b883a 	mov	r5,r2
 4011024:	39fff404 	addi	r7,r7,-48
 4011028:	8809883a 	mov	r4,r17
 401102c:	4010e400 	call	4010e40 <__multadd>
 4011030:	84bff81e 	bne	r16,r18,4011014 <__alt_data_end+0xfc011014>
 4011034:	dfc00617 	ldw	ra,24(sp)
 4011038:	dd400517 	ldw	r21,20(sp)
 401103c:	dd000417 	ldw	r20,16(sp)
 4011040:	dcc00317 	ldw	r19,12(sp)
 4011044:	dc800217 	ldw	r18,8(sp)
 4011048:	dc400117 	ldw	r17,4(sp)
 401104c:	dc000017 	ldw	r16,0(sp)
 4011050:	dec00704 	addi	sp,sp,28
 4011054:	f800283a 	ret
 4011058:	84000284 	addi	r16,r16,10
 401105c:	1827883a 	mov	r19,r3
 4011060:	003fe906 	br	4011008 <__alt_data_end+0xfc011008>

04011064 <__hi0bits>:
 4011064:	20bfffec 	andhi	r2,r4,65535
 4011068:	1000141e 	bne	r2,zero,40110bc <__hi0bits+0x58>
 401106c:	2008943a 	slli	r4,r4,16
 4011070:	00800404 	movi	r2,16
 4011074:	20ffc02c 	andhi	r3,r4,65280
 4011078:	1800021e 	bne	r3,zero,4011084 <__hi0bits+0x20>
 401107c:	2008923a 	slli	r4,r4,8
 4011080:	10800204 	addi	r2,r2,8
 4011084:	20fc002c 	andhi	r3,r4,61440
 4011088:	1800021e 	bne	r3,zero,4011094 <__hi0bits+0x30>
 401108c:	2008913a 	slli	r4,r4,4
 4011090:	10800104 	addi	r2,r2,4
 4011094:	20f0002c 	andhi	r3,r4,49152
 4011098:	1800031e 	bne	r3,zero,40110a8 <__hi0bits+0x44>
 401109c:	2109883a 	add	r4,r4,r4
 40110a0:	10800084 	addi	r2,r2,2
 40110a4:	2109883a 	add	r4,r4,r4
 40110a8:	20000316 	blt	r4,zero,40110b8 <__hi0bits+0x54>
 40110ac:	2110002c 	andhi	r4,r4,16384
 40110b0:	2000041e 	bne	r4,zero,40110c4 <__hi0bits+0x60>
 40110b4:	00800804 	movi	r2,32
 40110b8:	f800283a 	ret
 40110bc:	0005883a 	mov	r2,zero
 40110c0:	003fec06 	br	4011074 <__alt_data_end+0xfc011074>
 40110c4:	10800044 	addi	r2,r2,1
 40110c8:	f800283a 	ret

040110cc <__lo0bits>:
 40110cc:	20c00017 	ldw	r3,0(r4)
 40110d0:	188001cc 	andi	r2,r3,7
 40110d4:	10000826 	beq	r2,zero,40110f8 <__lo0bits+0x2c>
 40110d8:	1880004c 	andi	r2,r3,1
 40110dc:	1000211e 	bne	r2,zero,4011164 <__lo0bits+0x98>
 40110e0:	1880008c 	andi	r2,r3,2
 40110e4:	1000211e 	bne	r2,zero,401116c <__lo0bits+0xa0>
 40110e8:	1806d0ba 	srli	r3,r3,2
 40110ec:	00800084 	movi	r2,2
 40110f0:	20c00015 	stw	r3,0(r4)
 40110f4:	f800283a 	ret
 40110f8:	18bfffcc 	andi	r2,r3,65535
 40110fc:	10001326 	beq	r2,zero,401114c <__lo0bits+0x80>
 4011100:	0005883a 	mov	r2,zero
 4011104:	19403fcc 	andi	r5,r3,255
 4011108:	2800021e 	bne	r5,zero,4011114 <__lo0bits+0x48>
 401110c:	1806d23a 	srli	r3,r3,8
 4011110:	10800204 	addi	r2,r2,8
 4011114:	194003cc 	andi	r5,r3,15
 4011118:	2800021e 	bne	r5,zero,4011124 <__lo0bits+0x58>
 401111c:	1806d13a 	srli	r3,r3,4
 4011120:	10800104 	addi	r2,r2,4
 4011124:	194000cc 	andi	r5,r3,3
 4011128:	2800021e 	bne	r5,zero,4011134 <__lo0bits+0x68>
 401112c:	1806d0ba 	srli	r3,r3,2
 4011130:	10800084 	addi	r2,r2,2
 4011134:	1940004c 	andi	r5,r3,1
 4011138:	2800081e 	bne	r5,zero,401115c <__lo0bits+0x90>
 401113c:	1806d07a 	srli	r3,r3,1
 4011140:	1800051e 	bne	r3,zero,4011158 <__lo0bits+0x8c>
 4011144:	00800804 	movi	r2,32
 4011148:	f800283a 	ret
 401114c:	1806d43a 	srli	r3,r3,16
 4011150:	00800404 	movi	r2,16
 4011154:	003feb06 	br	4011104 <__alt_data_end+0xfc011104>
 4011158:	10800044 	addi	r2,r2,1
 401115c:	20c00015 	stw	r3,0(r4)
 4011160:	f800283a 	ret
 4011164:	0005883a 	mov	r2,zero
 4011168:	f800283a 	ret
 401116c:	1806d07a 	srli	r3,r3,1
 4011170:	00800044 	movi	r2,1
 4011174:	20c00015 	stw	r3,0(r4)
 4011178:	f800283a 	ret

0401117c <__i2b>:
 401117c:	defffd04 	addi	sp,sp,-12
 4011180:	dc000015 	stw	r16,0(sp)
 4011184:	04000044 	movi	r16,1
 4011188:	dc400115 	stw	r17,4(sp)
 401118c:	2823883a 	mov	r17,r5
 4011190:	800b883a 	mov	r5,r16
 4011194:	dfc00215 	stw	ra,8(sp)
 4011198:	4010d700 	call	4010d70 <_Balloc>
 401119c:	14400515 	stw	r17,20(r2)
 40111a0:	14000415 	stw	r16,16(r2)
 40111a4:	dfc00217 	ldw	ra,8(sp)
 40111a8:	dc400117 	ldw	r17,4(sp)
 40111ac:	dc000017 	ldw	r16,0(sp)
 40111b0:	dec00304 	addi	sp,sp,12
 40111b4:	f800283a 	ret

040111b8 <__multiply>:
 40111b8:	defffa04 	addi	sp,sp,-24
 40111bc:	dcc00315 	stw	r19,12(sp)
 40111c0:	dc800215 	stw	r18,8(sp)
 40111c4:	34c00417 	ldw	r19,16(r6)
 40111c8:	2c800417 	ldw	r18,16(r5)
 40111cc:	dd000415 	stw	r20,16(sp)
 40111d0:	dc400115 	stw	r17,4(sp)
 40111d4:	dfc00515 	stw	ra,20(sp)
 40111d8:	dc000015 	stw	r16,0(sp)
 40111dc:	2829883a 	mov	r20,r5
 40111e0:	3023883a 	mov	r17,r6
 40111e4:	94c0050e 	bge	r18,r19,40111fc <__multiply+0x44>
 40111e8:	9007883a 	mov	r3,r18
 40111ec:	3029883a 	mov	r20,r6
 40111f0:	9825883a 	mov	r18,r19
 40111f4:	2823883a 	mov	r17,r5
 40111f8:	1827883a 	mov	r19,r3
 40111fc:	a0800217 	ldw	r2,8(r20)
 4011200:	94e1883a 	add	r16,r18,r19
 4011204:	a1400117 	ldw	r5,4(r20)
 4011208:	1400010e 	bge	r2,r16,4011210 <__multiply+0x58>
 401120c:	29400044 	addi	r5,r5,1
 4011210:	4010d700 	call	4010d70 <_Balloc>
 4011214:	8415883a 	add	r10,r16,r16
 4011218:	12c00504 	addi	r11,r2,20
 401121c:	5295883a 	add	r10,r10,r10
 4011220:	5a95883a 	add	r10,r11,r10
 4011224:	5807883a 	mov	r3,r11
 4011228:	5a80032e 	bgeu	r11,r10,4011238 <__multiply+0x80>
 401122c:	18000015 	stw	zero,0(r3)
 4011230:	18c00104 	addi	r3,r3,4
 4011234:	1abffd36 	bltu	r3,r10,401122c <__alt_data_end+0xfc01122c>
 4011238:	9ce7883a 	add	r19,r19,r19
 401123c:	94a5883a 	add	r18,r18,r18
 4011240:	89800504 	addi	r6,r17,20
 4011244:	9ce7883a 	add	r19,r19,r19
 4011248:	a3400504 	addi	r13,r20,20
 401124c:	94a5883a 	add	r18,r18,r18
 4011250:	34d9883a 	add	r12,r6,r19
 4011254:	6c93883a 	add	r9,r13,r18
 4011258:	3300422e 	bgeu	r6,r12,4011364 <__multiply+0x1ac>
 401125c:	37c00017 	ldw	ra,0(r6)
 4011260:	fbffffcc 	andi	r15,ra,65535
 4011264:	78001b26 	beq	r15,zero,40112d4 <__multiply+0x11c>
 4011268:	5811883a 	mov	r8,r11
 401126c:	681d883a 	mov	r14,r13
 4011270:	000f883a 	mov	r7,zero
 4011274:	71000017 	ldw	r4,0(r14)
 4011278:	40c00017 	ldw	r3,0(r8)
 401127c:	73800104 	addi	r14,r14,4
 4011280:	217fffcc 	andi	r5,r4,65535
 4011284:	2bcb383a 	mul	r5,r5,r15
 4011288:	2008d43a 	srli	r4,r4,16
 401128c:	1c7fffcc 	andi	r17,r3,65535
 4011290:	2c4b883a 	add	r5,r5,r17
 4011294:	29cb883a 	add	r5,r5,r7
 4011298:	23c9383a 	mul	r4,r4,r15
 401129c:	1806d43a 	srli	r3,r3,16
 40112a0:	280ed43a 	srli	r7,r5,16
 40112a4:	297fffcc 	andi	r5,r5,65535
 40112a8:	20c7883a 	add	r3,r4,r3
 40112ac:	19c7883a 	add	r3,r3,r7
 40112b0:	1808943a 	slli	r4,r3,16
 40112b4:	4023883a 	mov	r17,r8
 40112b8:	180ed43a 	srli	r7,r3,16
 40112bc:	214ab03a 	or	r5,r4,r5
 40112c0:	41400015 	stw	r5,0(r8)
 40112c4:	42000104 	addi	r8,r8,4
 40112c8:	727fea36 	bltu	r14,r9,4011274 <__alt_data_end+0xfc011274>
 40112cc:	89c00115 	stw	r7,4(r17)
 40112d0:	37c00017 	ldw	ra,0(r6)
 40112d4:	f83ed43a 	srli	ra,ra,16
 40112d8:	f8001f26 	beq	ra,zero,4011358 <__multiply+0x1a0>
 40112dc:	58c00017 	ldw	r3,0(r11)
 40112e0:	681d883a 	mov	r14,r13
 40112e4:	581f883a 	mov	r15,r11
 40112e8:	1811883a 	mov	r8,r3
 40112ec:	5825883a 	mov	r18,r11
 40112f0:	000f883a 	mov	r7,zero
 40112f4:	00000106 	br	40112fc <__multiply+0x144>
 40112f8:	8825883a 	mov	r18,r17
 40112fc:	7140000b 	ldhu	r5,0(r14)
 4011300:	4010d43a 	srli	r8,r8,16
 4011304:	193fffcc 	andi	r4,r3,65535
 4011308:	2fcb383a 	mul	r5,r5,ra
 401130c:	7bc00104 	addi	r15,r15,4
 4011310:	73800104 	addi	r14,r14,4
 4011314:	2a0b883a 	add	r5,r5,r8
 4011318:	29cb883a 	add	r5,r5,r7
 401131c:	2806943a 	slli	r3,r5,16
 4011320:	94400104 	addi	r17,r18,4
 4011324:	280ad43a 	srli	r5,r5,16
 4011328:	1908b03a 	or	r4,r3,r4
 401132c:	793fff15 	stw	r4,-4(r15)
 4011330:	70ffff17 	ldw	r3,-4(r14)
 4011334:	8a000017 	ldw	r8,0(r17)
 4011338:	1806d43a 	srli	r3,r3,16
 401133c:	413fffcc 	andi	r4,r8,65535
 4011340:	1fc7383a 	mul	r3,r3,ra
 4011344:	1907883a 	add	r3,r3,r4
 4011348:	1947883a 	add	r3,r3,r5
 401134c:	180ed43a 	srli	r7,r3,16
 4011350:	727fe936 	bltu	r14,r9,40112f8 <__alt_data_end+0xfc0112f8>
 4011354:	90c00115 	stw	r3,4(r18)
 4011358:	31800104 	addi	r6,r6,4
 401135c:	5ac00104 	addi	r11,r11,4
 4011360:	333fbe36 	bltu	r6,r12,401125c <__alt_data_end+0xfc01125c>
 4011364:	0400090e 	bge	zero,r16,401138c <__multiply+0x1d4>
 4011368:	50ffff17 	ldw	r3,-4(r10)
 401136c:	52bfff04 	addi	r10,r10,-4
 4011370:	18000326 	beq	r3,zero,4011380 <__multiply+0x1c8>
 4011374:	00000506 	br	401138c <__multiply+0x1d4>
 4011378:	50c00017 	ldw	r3,0(r10)
 401137c:	1800031e 	bne	r3,zero,401138c <__multiply+0x1d4>
 4011380:	843fffc4 	addi	r16,r16,-1
 4011384:	52bfff04 	addi	r10,r10,-4
 4011388:	803ffb1e 	bne	r16,zero,4011378 <__alt_data_end+0xfc011378>
 401138c:	14000415 	stw	r16,16(r2)
 4011390:	dfc00517 	ldw	ra,20(sp)
 4011394:	dd000417 	ldw	r20,16(sp)
 4011398:	dcc00317 	ldw	r19,12(sp)
 401139c:	dc800217 	ldw	r18,8(sp)
 40113a0:	dc400117 	ldw	r17,4(sp)
 40113a4:	dc000017 	ldw	r16,0(sp)
 40113a8:	dec00604 	addi	sp,sp,24
 40113ac:	f800283a 	ret

040113b0 <__pow5mult>:
 40113b0:	defffa04 	addi	sp,sp,-24
 40113b4:	dcc00315 	stw	r19,12(sp)
 40113b8:	dc000015 	stw	r16,0(sp)
 40113bc:	dfc00515 	stw	ra,20(sp)
 40113c0:	dd000415 	stw	r20,16(sp)
 40113c4:	dc800215 	stw	r18,8(sp)
 40113c8:	dc400115 	stw	r17,4(sp)
 40113cc:	308000cc 	andi	r2,r6,3
 40113d0:	3021883a 	mov	r16,r6
 40113d4:	2027883a 	mov	r19,r4
 40113d8:	10002f1e 	bne	r2,zero,4011498 <__pow5mult+0xe8>
 40113dc:	2825883a 	mov	r18,r5
 40113e0:	8021d0ba 	srai	r16,r16,2
 40113e4:	80001a26 	beq	r16,zero,4011450 <__pow5mult+0xa0>
 40113e8:	9c401217 	ldw	r17,72(r19)
 40113ec:	8800061e 	bne	r17,zero,4011408 <__pow5mult+0x58>
 40113f0:	00003406 	br	40114c4 <__pow5mult+0x114>
 40113f4:	8021d07a 	srai	r16,r16,1
 40113f8:	80001526 	beq	r16,zero,4011450 <__pow5mult+0xa0>
 40113fc:	88800017 	ldw	r2,0(r17)
 4011400:	10001c26 	beq	r2,zero,4011474 <__pow5mult+0xc4>
 4011404:	1023883a 	mov	r17,r2
 4011408:	8080004c 	andi	r2,r16,1
 401140c:	103ff926 	beq	r2,zero,40113f4 <__alt_data_end+0xfc0113f4>
 4011410:	880d883a 	mov	r6,r17
 4011414:	900b883a 	mov	r5,r18
 4011418:	9809883a 	mov	r4,r19
 401141c:	40111b80 	call	40111b8 <__multiply>
 4011420:	90001b26 	beq	r18,zero,4011490 <__pow5mult+0xe0>
 4011424:	91000117 	ldw	r4,4(r18)
 4011428:	98c01317 	ldw	r3,76(r19)
 401142c:	8021d07a 	srai	r16,r16,1
 4011430:	2109883a 	add	r4,r4,r4
 4011434:	2109883a 	add	r4,r4,r4
 4011438:	1907883a 	add	r3,r3,r4
 401143c:	19000017 	ldw	r4,0(r3)
 4011440:	91000015 	stw	r4,0(r18)
 4011444:	1c800015 	stw	r18,0(r3)
 4011448:	1025883a 	mov	r18,r2
 401144c:	803feb1e 	bne	r16,zero,40113fc <__alt_data_end+0xfc0113fc>
 4011450:	9005883a 	mov	r2,r18
 4011454:	dfc00517 	ldw	ra,20(sp)
 4011458:	dd000417 	ldw	r20,16(sp)
 401145c:	dcc00317 	ldw	r19,12(sp)
 4011460:	dc800217 	ldw	r18,8(sp)
 4011464:	dc400117 	ldw	r17,4(sp)
 4011468:	dc000017 	ldw	r16,0(sp)
 401146c:	dec00604 	addi	sp,sp,24
 4011470:	f800283a 	ret
 4011474:	880d883a 	mov	r6,r17
 4011478:	880b883a 	mov	r5,r17
 401147c:	9809883a 	mov	r4,r19
 4011480:	40111b80 	call	40111b8 <__multiply>
 4011484:	88800015 	stw	r2,0(r17)
 4011488:	10000015 	stw	zero,0(r2)
 401148c:	003fdd06 	br	4011404 <__alt_data_end+0xfc011404>
 4011490:	1025883a 	mov	r18,r2
 4011494:	003fd706 	br	40113f4 <__alt_data_end+0xfc0113f4>
 4011498:	10bfffc4 	addi	r2,r2,-1
 401149c:	1085883a 	add	r2,r2,r2
 40114a0:	00c100b4 	movhi	r3,1026
 40114a4:	18e9ec04 	addi	r3,r3,-22608
 40114a8:	1085883a 	add	r2,r2,r2
 40114ac:	1885883a 	add	r2,r3,r2
 40114b0:	11800017 	ldw	r6,0(r2)
 40114b4:	000f883a 	mov	r7,zero
 40114b8:	4010e400 	call	4010e40 <__multadd>
 40114bc:	1025883a 	mov	r18,r2
 40114c0:	003fc706 	br	40113e0 <__alt_data_end+0xfc0113e0>
 40114c4:	05000044 	movi	r20,1
 40114c8:	a00b883a 	mov	r5,r20
 40114cc:	9809883a 	mov	r4,r19
 40114d0:	4010d700 	call	4010d70 <_Balloc>
 40114d4:	1023883a 	mov	r17,r2
 40114d8:	00809c44 	movi	r2,625
 40114dc:	88800515 	stw	r2,20(r17)
 40114e0:	8d000415 	stw	r20,16(r17)
 40114e4:	9c401215 	stw	r17,72(r19)
 40114e8:	88000015 	stw	zero,0(r17)
 40114ec:	003fc606 	br	4011408 <__alt_data_end+0xfc011408>

040114f0 <__lshift>:
 40114f0:	defff904 	addi	sp,sp,-28
 40114f4:	dd400515 	stw	r21,20(sp)
 40114f8:	dcc00315 	stw	r19,12(sp)
 40114fc:	302bd17a 	srai	r21,r6,5
 4011500:	2cc00417 	ldw	r19,16(r5)
 4011504:	28800217 	ldw	r2,8(r5)
 4011508:	dd000415 	stw	r20,16(sp)
 401150c:	ace7883a 	add	r19,r21,r19
 4011510:	dc800215 	stw	r18,8(sp)
 4011514:	dc400115 	stw	r17,4(sp)
 4011518:	dc000015 	stw	r16,0(sp)
 401151c:	dfc00615 	stw	ra,24(sp)
 4011520:	9c000044 	addi	r16,r19,1
 4011524:	2823883a 	mov	r17,r5
 4011528:	3029883a 	mov	r20,r6
 401152c:	2025883a 	mov	r18,r4
 4011530:	29400117 	ldw	r5,4(r5)
 4011534:	1400030e 	bge	r2,r16,4011544 <__lshift+0x54>
 4011538:	1085883a 	add	r2,r2,r2
 401153c:	29400044 	addi	r5,r5,1
 4011540:	143ffd16 	blt	r2,r16,4011538 <__alt_data_end+0xfc011538>
 4011544:	9009883a 	mov	r4,r18
 4011548:	4010d700 	call	4010d70 <_Balloc>
 401154c:	10c00504 	addi	r3,r2,20
 4011550:	0540070e 	bge	zero,r21,4011570 <__lshift+0x80>
 4011554:	ad6b883a 	add	r21,r21,r21
 4011558:	ad6b883a 	add	r21,r21,r21
 401155c:	1809883a 	mov	r4,r3
 4011560:	1d47883a 	add	r3,r3,r21
 4011564:	20000015 	stw	zero,0(r4)
 4011568:	21000104 	addi	r4,r4,4
 401156c:	193ffd1e 	bne	r3,r4,4011564 <__alt_data_end+0xfc011564>
 4011570:	8a000417 	ldw	r8,16(r17)
 4011574:	89000504 	addi	r4,r17,20
 4011578:	a18007cc 	andi	r6,r20,31
 401157c:	4211883a 	add	r8,r8,r8
 4011580:	4211883a 	add	r8,r8,r8
 4011584:	2211883a 	add	r8,r4,r8
 4011588:	30002326 	beq	r6,zero,4011618 <__lshift+0x128>
 401158c:	02400804 	movi	r9,32
 4011590:	4993c83a 	sub	r9,r9,r6
 4011594:	000b883a 	mov	r5,zero
 4011598:	21c00017 	ldw	r7,0(r4)
 401159c:	1815883a 	mov	r10,r3
 40115a0:	18c00104 	addi	r3,r3,4
 40115a4:	398e983a 	sll	r7,r7,r6
 40115a8:	21000104 	addi	r4,r4,4
 40115ac:	394ab03a 	or	r5,r7,r5
 40115b0:	197fff15 	stw	r5,-4(r3)
 40115b4:	217fff17 	ldw	r5,-4(r4)
 40115b8:	2a4ad83a 	srl	r5,r5,r9
 40115bc:	223ff636 	bltu	r4,r8,4011598 <__alt_data_end+0xfc011598>
 40115c0:	51400115 	stw	r5,4(r10)
 40115c4:	28001a1e 	bne	r5,zero,4011630 <__lshift+0x140>
 40115c8:	843fffc4 	addi	r16,r16,-1
 40115cc:	14000415 	stw	r16,16(r2)
 40115d0:	88000826 	beq	r17,zero,40115f4 <__lshift+0x104>
 40115d4:	89000117 	ldw	r4,4(r17)
 40115d8:	90c01317 	ldw	r3,76(r18)
 40115dc:	2109883a 	add	r4,r4,r4
 40115e0:	2109883a 	add	r4,r4,r4
 40115e4:	1907883a 	add	r3,r3,r4
 40115e8:	19000017 	ldw	r4,0(r3)
 40115ec:	89000015 	stw	r4,0(r17)
 40115f0:	1c400015 	stw	r17,0(r3)
 40115f4:	dfc00617 	ldw	ra,24(sp)
 40115f8:	dd400517 	ldw	r21,20(sp)
 40115fc:	dd000417 	ldw	r20,16(sp)
 4011600:	dcc00317 	ldw	r19,12(sp)
 4011604:	dc800217 	ldw	r18,8(sp)
 4011608:	dc400117 	ldw	r17,4(sp)
 401160c:	dc000017 	ldw	r16,0(sp)
 4011610:	dec00704 	addi	sp,sp,28
 4011614:	f800283a 	ret
 4011618:	21400017 	ldw	r5,0(r4)
 401161c:	18c00104 	addi	r3,r3,4
 4011620:	21000104 	addi	r4,r4,4
 4011624:	197fff15 	stw	r5,-4(r3)
 4011628:	223ffb36 	bltu	r4,r8,4011618 <__alt_data_end+0xfc011618>
 401162c:	003fe606 	br	40115c8 <__alt_data_end+0xfc0115c8>
 4011630:	9c000084 	addi	r16,r19,2
 4011634:	003fe406 	br	40115c8 <__alt_data_end+0xfc0115c8>

04011638 <__mcmp>:
 4011638:	20800417 	ldw	r2,16(r4)
 401163c:	28c00417 	ldw	r3,16(r5)
 4011640:	10c5c83a 	sub	r2,r2,r3
 4011644:	1000111e 	bne	r2,zero,401168c <__mcmp+0x54>
 4011648:	18c7883a 	add	r3,r3,r3
 401164c:	18c7883a 	add	r3,r3,r3
 4011650:	21000504 	addi	r4,r4,20
 4011654:	29400504 	addi	r5,r5,20
 4011658:	20c5883a 	add	r2,r4,r3
 401165c:	28cb883a 	add	r5,r5,r3
 4011660:	00000106 	br	4011668 <__mcmp+0x30>
 4011664:	20800a2e 	bgeu	r4,r2,4011690 <__mcmp+0x58>
 4011668:	10bfff04 	addi	r2,r2,-4
 401166c:	297fff04 	addi	r5,r5,-4
 4011670:	11800017 	ldw	r6,0(r2)
 4011674:	28c00017 	ldw	r3,0(r5)
 4011678:	30fffa26 	beq	r6,r3,4011664 <__alt_data_end+0xfc011664>
 401167c:	30c00236 	bltu	r6,r3,4011688 <__mcmp+0x50>
 4011680:	00800044 	movi	r2,1
 4011684:	f800283a 	ret
 4011688:	00bfffc4 	movi	r2,-1
 401168c:	f800283a 	ret
 4011690:	0005883a 	mov	r2,zero
 4011694:	f800283a 	ret

04011698 <__mdiff>:
 4011698:	28c00417 	ldw	r3,16(r5)
 401169c:	30800417 	ldw	r2,16(r6)
 40116a0:	defffa04 	addi	sp,sp,-24
 40116a4:	dcc00315 	stw	r19,12(sp)
 40116a8:	dc800215 	stw	r18,8(sp)
 40116ac:	dfc00515 	stw	ra,20(sp)
 40116b0:	dd000415 	stw	r20,16(sp)
 40116b4:	dc400115 	stw	r17,4(sp)
 40116b8:	dc000015 	stw	r16,0(sp)
 40116bc:	1887c83a 	sub	r3,r3,r2
 40116c0:	2825883a 	mov	r18,r5
 40116c4:	3027883a 	mov	r19,r6
 40116c8:	1800141e 	bne	r3,zero,401171c <__mdiff+0x84>
 40116cc:	1085883a 	add	r2,r2,r2
 40116d0:	1085883a 	add	r2,r2,r2
 40116d4:	2a000504 	addi	r8,r5,20
 40116d8:	34000504 	addi	r16,r6,20
 40116dc:	4087883a 	add	r3,r8,r2
 40116e0:	8085883a 	add	r2,r16,r2
 40116e4:	00000106 	br	40116ec <__mdiff+0x54>
 40116e8:	40c0592e 	bgeu	r8,r3,4011850 <__mdiff+0x1b8>
 40116ec:	18ffff04 	addi	r3,r3,-4
 40116f0:	10bfff04 	addi	r2,r2,-4
 40116f4:	19c00017 	ldw	r7,0(r3)
 40116f8:	11400017 	ldw	r5,0(r2)
 40116fc:	397ffa26 	beq	r7,r5,40116e8 <__alt_data_end+0xfc0116e8>
 4011700:	3940592e 	bgeu	r7,r5,4011868 <__mdiff+0x1d0>
 4011704:	9005883a 	mov	r2,r18
 4011708:	4023883a 	mov	r17,r8
 401170c:	9825883a 	mov	r18,r19
 4011710:	05000044 	movi	r20,1
 4011714:	1027883a 	mov	r19,r2
 4011718:	00000406 	br	401172c <__mdiff+0x94>
 401171c:	18005616 	blt	r3,zero,4011878 <__mdiff+0x1e0>
 4011720:	34400504 	addi	r17,r6,20
 4011724:	2c000504 	addi	r16,r5,20
 4011728:	0029883a 	mov	r20,zero
 401172c:	91400117 	ldw	r5,4(r18)
 4011730:	4010d700 	call	4010d70 <_Balloc>
 4011734:	92400417 	ldw	r9,16(r18)
 4011738:	9b000417 	ldw	r12,16(r19)
 401173c:	12c00504 	addi	r11,r2,20
 4011740:	4a51883a 	add	r8,r9,r9
 4011744:	6319883a 	add	r12,r12,r12
 4011748:	4211883a 	add	r8,r8,r8
 401174c:	6319883a 	add	r12,r12,r12
 4011750:	15000315 	stw	r20,12(r2)
 4011754:	8211883a 	add	r8,r16,r8
 4011758:	8b19883a 	add	r12,r17,r12
 401175c:	0007883a 	mov	r3,zero
 4011760:	81400017 	ldw	r5,0(r16)
 4011764:	89c00017 	ldw	r7,0(r17)
 4011768:	59800104 	addi	r6,r11,4
 401176c:	293fffcc 	andi	r4,r5,65535
 4011770:	20c7883a 	add	r3,r4,r3
 4011774:	393fffcc 	andi	r4,r7,65535
 4011778:	1909c83a 	sub	r4,r3,r4
 401177c:	280ad43a 	srli	r5,r5,16
 4011780:	380ed43a 	srli	r7,r7,16
 4011784:	2007d43a 	srai	r3,r4,16
 4011788:	213fffcc 	andi	r4,r4,65535
 401178c:	29cbc83a 	sub	r5,r5,r7
 4011790:	28c7883a 	add	r3,r5,r3
 4011794:	180a943a 	slli	r5,r3,16
 4011798:	8c400104 	addi	r17,r17,4
 401179c:	84000104 	addi	r16,r16,4
 40117a0:	2908b03a 	or	r4,r5,r4
 40117a4:	59000015 	stw	r4,0(r11)
 40117a8:	1807d43a 	srai	r3,r3,16
 40117ac:	3015883a 	mov	r10,r6
 40117b0:	3017883a 	mov	r11,r6
 40117b4:	8b3fea36 	bltu	r17,r12,4011760 <__alt_data_end+0xfc011760>
 40117b8:	8200162e 	bgeu	r16,r8,4011814 <__mdiff+0x17c>
 40117bc:	8017883a 	mov	r11,r16
 40117c0:	59400017 	ldw	r5,0(r11)
 40117c4:	31800104 	addi	r6,r6,4
 40117c8:	5ac00104 	addi	r11,r11,4
 40117cc:	293fffcc 	andi	r4,r5,65535
 40117d0:	20c7883a 	add	r3,r4,r3
 40117d4:	280ed43a 	srli	r7,r5,16
 40117d8:	180bd43a 	srai	r5,r3,16
 40117dc:	193fffcc 	andi	r4,r3,65535
 40117e0:	3947883a 	add	r3,r7,r5
 40117e4:	180a943a 	slli	r5,r3,16
 40117e8:	1807d43a 	srai	r3,r3,16
 40117ec:	2908b03a 	or	r4,r5,r4
 40117f0:	313fff15 	stw	r4,-4(r6)
 40117f4:	5a3ff236 	bltu	r11,r8,40117c0 <__alt_data_end+0xfc0117c0>
 40117f8:	0406303a 	nor	r3,zero,r16
 40117fc:	1a07883a 	add	r3,r3,r8
 4011800:	1806d0ba 	srli	r3,r3,2
 4011804:	18c00044 	addi	r3,r3,1
 4011808:	18c7883a 	add	r3,r3,r3
 401180c:	18c7883a 	add	r3,r3,r3
 4011810:	50d5883a 	add	r10,r10,r3
 4011814:	50ffff04 	addi	r3,r10,-4
 4011818:	2000041e 	bne	r4,zero,401182c <__mdiff+0x194>
 401181c:	18ffff04 	addi	r3,r3,-4
 4011820:	19000017 	ldw	r4,0(r3)
 4011824:	4a7fffc4 	addi	r9,r9,-1
 4011828:	203ffc26 	beq	r4,zero,401181c <__alt_data_end+0xfc01181c>
 401182c:	12400415 	stw	r9,16(r2)
 4011830:	dfc00517 	ldw	ra,20(sp)
 4011834:	dd000417 	ldw	r20,16(sp)
 4011838:	dcc00317 	ldw	r19,12(sp)
 401183c:	dc800217 	ldw	r18,8(sp)
 4011840:	dc400117 	ldw	r17,4(sp)
 4011844:	dc000017 	ldw	r16,0(sp)
 4011848:	dec00604 	addi	sp,sp,24
 401184c:	f800283a 	ret
 4011850:	000b883a 	mov	r5,zero
 4011854:	4010d700 	call	4010d70 <_Balloc>
 4011858:	00c00044 	movi	r3,1
 401185c:	10c00415 	stw	r3,16(r2)
 4011860:	10000515 	stw	zero,20(r2)
 4011864:	003ff206 	br	4011830 <__alt_data_end+0xfc011830>
 4011868:	8023883a 	mov	r17,r16
 401186c:	0029883a 	mov	r20,zero
 4011870:	4021883a 	mov	r16,r8
 4011874:	003fad06 	br	401172c <__alt_data_end+0xfc01172c>
 4011878:	9005883a 	mov	r2,r18
 401187c:	94400504 	addi	r17,r18,20
 4011880:	9c000504 	addi	r16,r19,20
 4011884:	9825883a 	mov	r18,r19
 4011888:	05000044 	movi	r20,1
 401188c:	1027883a 	mov	r19,r2
 4011890:	003fa606 	br	401172c <__alt_data_end+0xfc01172c>

04011894 <__ulp>:
 4011894:	295ffc2c 	andhi	r5,r5,32752
 4011898:	00bf3034 	movhi	r2,64704
 401189c:	2887883a 	add	r3,r5,r2
 40118a0:	00c0020e 	bge	zero,r3,40118ac <__ulp+0x18>
 40118a4:	0005883a 	mov	r2,zero
 40118a8:	f800283a 	ret
 40118ac:	00c7c83a 	sub	r3,zero,r3
 40118b0:	1807d53a 	srai	r3,r3,20
 40118b4:	008004c4 	movi	r2,19
 40118b8:	10c00b0e 	bge	r2,r3,40118e8 <__ulp+0x54>
 40118bc:	18bffb04 	addi	r2,r3,-20
 40118c0:	01000784 	movi	r4,30
 40118c4:	0007883a 	mov	r3,zero
 40118c8:	20800516 	blt	r4,r2,40118e0 <__ulp+0x4c>
 40118cc:	010007c4 	movi	r4,31
 40118d0:	2089c83a 	sub	r4,r4,r2
 40118d4:	00800044 	movi	r2,1
 40118d8:	1104983a 	sll	r2,r2,r4
 40118dc:	f800283a 	ret
 40118e0:	00800044 	movi	r2,1
 40118e4:	f800283a 	ret
 40118e8:	01400234 	movhi	r5,8
 40118ec:	28c7d83a 	sra	r3,r5,r3
 40118f0:	0005883a 	mov	r2,zero
 40118f4:	f800283a 	ret

040118f8 <__b2d>:
 40118f8:	defffa04 	addi	sp,sp,-24
 40118fc:	dc000015 	stw	r16,0(sp)
 4011900:	24000417 	ldw	r16,16(r4)
 4011904:	dc400115 	stw	r17,4(sp)
 4011908:	24400504 	addi	r17,r4,20
 401190c:	8421883a 	add	r16,r16,r16
 4011910:	8421883a 	add	r16,r16,r16
 4011914:	8c21883a 	add	r16,r17,r16
 4011918:	dc800215 	stw	r18,8(sp)
 401191c:	84bfff17 	ldw	r18,-4(r16)
 4011920:	dd000415 	stw	r20,16(sp)
 4011924:	dcc00315 	stw	r19,12(sp)
 4011928:	9009883a 	mov	r4,r18
 401192c:	2829883a 	mov	r20,r5
 4011930:	dfc00515 	stw	ra,20(sp)
 4011934:	40110640 	call	4011064 <__hi0bits>
 4011938:	00c00804 	movi	r3,32
 401193c:	1889c83a 	sub	r4,r3,r2
 4011940:	a1000015 	stw	r4,0(r20)
 4011944:	01000284 	movi	r4,10
 4011948:	84ffff04 	addi	r19,r16,-4
 401194c:	20801216 	blt	r4,r2,4011998 <__b2d+0xa0>
 4011950:	018002c4 	movi	r6,11
 4011954:	308dc83a 	sub	r6,r6,r2
 4011958:	9186d83a 	srl	r3,r18,r6
 401195c:	18cffc34 	orhi	r3,r3,16368
 4011960:	8cc0212e 	bgeu	r17,r19,40119e8 <__b2d+0xf0>
 4011964:	813ffe17 	ldw	r4,-8(r16)
 4011968:	218cd83a 	srl	r6,r4,r6
 401196c:	10800544 	addi	r2,r2,21
 4011970:	9084983a 	sll	r2,r18,r2
 4011974:	1184b03a 	or	r2,r2,r6
 4011978:	dfc00517 	ldw	ra,20(sp)
 401197c:	dd000417 	ldw	r20,16(sp)
 4011980:	dcc00317 	ldw	r19,12(sp)
 4011984:	dc800217 	ldw	r18,8(sp)
 4011988:	dc400117 	ldw	r17,4(sp)
 401198c:	dc000017 	ldw	r16,0(sp)
 4011990:	dec00604 	addi	sp,sp,24
 4011994:	f800283a 	ret
 4011998:	8cc00f2e 	bgeu	r17,r19,40119d8 <__b2d+0xe0>
 401199c:	117ffd44 	addi	r5,r2,-11
 40119a0:	80bffe17 	ldw	r2,-8(r16)
 40119a4:	28000e26 	beq	r5,zero,40119e0 <__b2d+0xe8>
 40119a8:	1949c83a 	sub	r4,r3,r5
 40119ac:	9164983a 	sll	r18,r18,r5
 40119b0:	1106d83a 	srl	r3,r2,r4
 40119b4:	81bffe04 	addi	r6,r16,-8
 40119b8:	948ffc34 	orhi	r18,r18,16368
 40119bc:	90c6b03a 	or	r3,r18,r3
 40119c0:	89800e2e 	bgeu	r17,r6,40119fc <__b2d+0x104>
 40119c4:	81bffd17 	ldw	r6,-12(r16)
 40119c8:	1144983a 	sll	r2,r2,r5
 40119cc:	310ad83a 	srl	r5,r6,r4
 40119d0:	2884b03a 	or	r2,r5,r2
 40119d4:	003fe806 	br	4011978 <__alt_data_end+0xfc011978>
 40119d8:	10bffd44 	addi	r2,r2,-11
 40119dc:	1000041e 	bne	r2,zero,40119f0 <__b2d+0xf8>
 40119e0:	90cffc34 	orhi	r3,r18,16368
 40119e4:	003fe406 	br	4011978 <__alt_data_end+0xfc011978>
 40119e8:	000d883a 	mov	r6,zero
 40119ec:	003fdf06 	br	401196c <__alt_data_end+0xfc01196c>
 40119f0:	90a4983a 	sll	r18,r18,r2
 40119f4:	0005883a 	mov	r2,zero
 40119f8:	003ff906 	br	40119e0 <__alt_data_end+0xfc0119e0>
 40119fc:	1144983a 	sll	r2,r2,r5
 4011a00:	003fdd06 	br	4011978 <__alt_data_end+0xfc011978>

04011a04 <__d2b>:
 4011a04:	defff804 	addi	sp,sp,-32
 4011a08:	dc000215 	stw	r16,8(sp)
 4011a0c:	3021883a 	mov	r16,r6
 4011a10:	dc400315 	stw	r17,12(sp)
 4011a14:	8022907a 	slli	r17,r16,1
 4011a18:	dd000615 	stw	r20,24(sp)
 4011a1c:	2829883a 	mov	r20,r5
 4011a20:	01400044 	movi	r5,1
 4011a24:	dcc00515 	stw	r19,20(sp)
 4011a28:	dc800415 	stw	r18,16(sp)
 4011a2c:	dfc00715 	stw	ra,28(sp)
 4011a30:	3825883a 	mov	r18,r7
 4011a34:	8822d57a 	srli	r17,r17,21
 4011a38:	4010d700 	call	4010d70 <_Balloc>
 4011a3c:	1027883a 	mov	r19,r2
 4011a40:	00800434 	movhi	r2,16
 4011a44:	10bfffc4 	addi	r2,r2,-1
 4011a48:	808c703a 	and	r6,r16,r2
 4011a4c:	88000126 	beq	r17,zero,4011a54 <__d2b+0x50>
 4011a50:	31800434 	orhi	r6,r6,16
 4011a54:	d9800015 	stw	r6,0(sp)
 4011a58:	a0002426 	beq	r20,zero,4011aec <__d2b+0xe8>
 4011a5c:	d9000104 	addi	r4,sp,4
 4011a60:	dd000115 	stw	r20,4(sp)
 4011a64:	40110cc0 	call	40110cc <__lo0bits>
 4011a68:	d8c00017 	ldw	r3,0(sp)
 4011a6c:	10002f1e 	bne	r2,zero,4011b2c <__d2b+0x128>
 4011a70:	d9000117 	ldw	r4,4(sp)
 4011a74:	99000515 	stw	r4,20(r19)
 4011a78:	1821003a 	cmpeq	r16,r3,zero
 4011a7c:	01000084 	movi	r4,2
 4011a80:	2421c83a 	sub	r16,r4,r16
 4011a84:	98c00615 	stw	r3,24(r19)
 4011a88:	9c000415 	stw	r16,16(r19)
 4011a8c:	88001f1e 	bne	r17,zero,4011b0c <__d2b+0x108>
 4011a90:	10bef384 	addi	r2,r2,-1074
 4011a94:	90800015 	stw	r2,0(r18)
 4011a98:	00900034 	movhi	r2,16384
 4011a9c:	10bfffc4 	addi	r2,r2,-1
 4011aa0:	8085883a 	add	r2,r16,r2
 4011aa4:	1085883a 	add	r2,r2,r2
 4011aa8:	1085883a 	add	r2,r2,r2
 4011aac:	9885883a 	add	r2,r19,r2
 4011ab0:	11000517 	ldw	r4,20(r2)
 4011ab4:	8020917a 	slli	r16,r16,5
 4011ab8:	40110640 	call	4011064 <__hi0bits>
 4011abc:	d8c00817 	ldw	r3,32(sp)
 4011ac0:	8085c83a 	sub	r2,r16,r2
 4011ac4:	18800015 	stw	r2,0(r3)
 4011ac8:	9805883a 	mov	r2,r19
 4011acc:	dfc00717 	ldw	ra,28(sp)
 4011ad0:	dd000617 	ldw	r20,24(sp)
 4011ad4:	dcc00517 	ldw	r19,20(sp)
 4011ad8:	dc800417 	ldw	r18,16(sp)
 4011adc:	dc400317 	ldw	r17,12(sp)
 4011ae0:	dc000217 	ldw	r16,8(sp)
 4011ae4:	dec00804 	addi	sp,sp,32
 4011ae8:	f800283a 	ret
 4011aec:	d809883a 	mov	r4,sp
 4011af0:	40110cc0 	call	40110cc <__lo0bits>
 4011af4:	d8c00017 	ldw	r3,0(sp)
 4011af8:	04000044 	movi	r16,1
 4011afc:	9c000415 	stw	r16,16(r19)
 4011b00:	98c00515 	stw	r3,20(r19)
 4011b04:	10800804 	addi	r2,r2,32
 4011b08:	883fe126 	beq	r17,zero,4011a90 <__alt_data_end+0xfc011a90>
 4011b0c:	00c00d44 	movi	r3,53
 4011b10:	8c7ef344 	addi	r17,r17,-1075
 4011b14:	88a3883a 	add	r17,r17,r2
 4011b18:	1885c83a 	sub	r2,r3,r2
 4011b1c:	d8c00817 	ldw	r3,32(sp)
 4011b20:	94400015 	stw	r17,0(r18)
 4011b24:	18800015 	stw	r2,0(r3)
 4011b28:	003fe706 	br	4011ac8 <__alt_data_end+0xfc011ac8>
 4011b2c:	01000804 	movi	r4,32
 4011b30:	2089c83a 	sub	r4,r4,r2
 4011b34:	1908983a 	sll	r4,r3,r4
 4011b38:	d9400117 	ldw	r5,4(sp)
 4011b3c:	1886d83a 	srl	r3,r3,r2
 4011b40:	2148b03a 	or	r4,r4,r5
 4011b44:	99000515 	stw	r4,20(r19)
 4011b48:	d8c00015 	stw	r3,0(sp)
 4011b4c:	003fca06 	br	4011a78 <__alt_data_end+0xfc011a78>

04011b50 <__ratio>:
 4011b50:	defff904 	addi	sp,sp,-28
 4011b54:	dc400315 	stw	r17,12(sp)
 4011b58:	2823883a 	mov	r17,r5
 4011b5c:	d9400104 	addi	r5,sp,4
 4011b60:	dfc00615 	stw	ra,24(sp)
 4011b64:	dcc00515 	stw	r19,20(sp)
 4011b68:	dc800415 	stw	r18,16(sp)
 4011b6c:	2027883a 	mov	r19,r4
 4011b70:	dc000215 	stw	r16,8(sp)
 4011b74:	40118f80 	call	40118f8 <__b2d>
 4011b78:	d80b883a 	mov	r5,sp
 4011b7c:	8809883a 	mov	r4,r17
 4011b80:	1025883a 	mov	r18,r2
 4011b84:	1821883a 	mov	r16,r3
 4011b88:	40118f80 	call	40118f8 <__b2d>
 4011b8c:	8a000417 	ldw	r8,16(r17)
 4011b90:	99000417 	ldw	r4,16(r19)
 4011b94:	d9400117 	ldw	r5,4(sp)
 4011b98:	2209c83a 	sub	r4,r4,r8
 4011b9c:	2010917a 	slli	r8,r4,5
 4011ba0:	d9000017 	ldw	r4,0(sp)
 4011ba4:	2909c83a 	sub	r4,r5,r4
 4011ba8:	4109883a 	add	r4,r8,r4
 4011bac:	01000e0e 	bge	zero,r4,4011be8 <__ratio+0x98>
 4011bb0:	2008953a 	slli	r4,r4,20
 4011bb4:	2421883a 	add	r16,r4,r16
 4011bb8:	100d883a 	mov	r6,r2
 4011bbc:	180f883a 	mov	r7,r3
 4011bc0:	9009883a 	mov	r4,r18
 4011bc4:	800b883a 	mov	r5,r16
 4011bc8:	40157580 	call	4015758 <__divdf3>
 4011bcc:	dfc00617 	ldw	ra,24(sp)
 4011bd0:	dcc00517 	ldw	r19,20(sp)
 4011bd4:	dc800417 	ldw	r18,16(sp)
 4011bd8:	dc400317 	ldw	r17,12(sp)
 4011bdc:	dc000217 	ldw	r16,8(sp)
 4011be0:	dec00704 	addi	sp,sp,28
 4011be4:	f800283a 	ret
 4011be8:	2008953a 	slli	r4,r4,20
 4011bec:	1907c83a 	sub	r3,r3,r4
 4011bf0:	003ff106 	br	4011bb8 <__alt_data_end+0xfc011bb8>

04011bf4 <_mprec_log10>:
 4011bf4:	defffe04 	addi	sp,sp,-8
 4011bf8:	dc000015 	stw	r16,0(sp)
 4011bfc:	dfc00115 	stw	ra,4(sp)
 4011c00:	008005c4 	movi	r2,23
 4011c04:	2021883a 	mov	r16,r4
 4011c08:	11000d0e 	bge	r2,r4,4011c40 <_mprec_log10+0x4c>
 4011c0c:	0005883a 	mov	r2,zero
 4011c10:	00cffc34 	movhi	r3,16368
 4011c14:	843fffc4 	addi	r16,r16,-1
 4011c18:	000d883a 	mov	r6,zero
 4011c1c:	01d00934 	movhi	r7,16420
 4011c20:	1009883a 	mov	r4,r2
 4011c24:	180b883a 	mov	r5,r3
 4011c28:	40162980 	call	4016298 <__muldf3>
 4011c2c:	803ff91e 	bne	r16,zero,4011c14 <__alt_data_end+0xfc011c14>
 4011c30:	dfc00117 	ldw	ra,4(sp)
 4011c34:	dc000017 	ldw	r16,0(sp)
 4011c38:	dec00204 	addi	sp,sp,8
 4011c3c:	f800283a 	ret
 4011c40:	202090fa 	slli	r16,r4,3
 4011c44:	008100b4 	movhi	r2,1026
 4011c48:	10aa0304 	addi	r2,r2,-22516
 4011c4c:	1421883a 	add	r16,r2,r16
 4011c50:	80800017 	ldw	r2,0(r16)
 4011c54:	80c00117 	ldw	r3,4(r16)
 4011c58:	dfc00117 	ldw	ra,4(sp)
 4011c5c:	dc000017 	ldw	r16,0(sp)
 4011c60:	dec00204 	addi	sp,sp,8
 4011c64:	f800283a 	ret

04011c68 <__copybits>:
 4011c68:	297fffc4 	addi	r5,r5,-1
 4011c6c:	280fd17a 	srai	r7,r5,5
 4011c70:	30c00417 	ldw	r3,16(r6)
 4011c74:	30800504 	addi	r2,r6,20
 4011c78:	39c00044 	addi	r7,r7,1
 4011c7c:	18c7883a 	add	r3,r3,r3
 4011c80:	39cf883a 	add	r7,r7,r7
 4011c84:	18c7883a 	add	r3,r3,r3
 4011c88:	39cf883a 	add	r7,r7,r7
 4011c8c:	10c7883a 	add	r3,r2,r3
 4011c90:	21cf883a 	add	r7,r4,r7
 4011c94:	10c00d2e 	bgeu	r2,r3,4011ccc <__copybits+0x64>
 4011c98:	200b883a 	mov	r5,r4
 4011c9c:	12000017 	ldw	r8,0(r2)
 4011ca0:	29400104 	addi	r5,r5,4
 4011ca4:	10800104 	addi	r2,r2,4
 4011ca8:	2a3fff15 	stw	r8,-4(r5)
 4011cac:	10fffb36 	bltu	r2,r3,4011c9c <__alt_data_end+0xfc011c9c>
 4011cb0:	1985c83a 	sub	r2,r3,r6
 4011cb4:	10bffac4 	addi	r2,r2,-21
 4011cb8:	1004d0ba 	srli	r2,r2,2
 4011cbc:	10800044 	addi	r2,r2,1
 4011cc0:	1085883a 	add	r2,r2,r2
 4011cc4:	1085883a 	add	r2,r2,r2
 4011cc8:	2089883a 	add	r4,r4,r2
 4011ccc:	21c0032e 	bgeu	r4,r7,4011cdc <__copybits+0x74>
 4011cd0:	20000015 	stw	zero,0(r4)
 4011cd4:	21000104 	addi	r4,r4,4
 4011cd8:	21fffd36 	bltu	r4,r7,4011cd0 <__alt_data_end+0xfc011cd0>
 4011cdc:	f800283a 	ret

04011ce0 <__any_on>:
 4011ce0:	20c00417 	ldw	r3,16(r4)
 4011ce4:	2805d17a 	srai	r2,r5,5
 4011ce8:	21000504 	addi	r4,r4,20
 4011cec:	18800d0e 	bge	r3,r2,4011d24 <__any_on+0x44>
 4011cf0:	18c7883a 	add	r3,r3,r3
 4011cf4:	18c7883a 	add	r3,r3,r3
 4011cf8:	20c7883a 	add	r3,r4,r3
 4011cfc:	20c0192e 	bgeu	r4,r3,4011d64 <__any_on+0x84>
 4011d00:	18bfff17 	ldw	r2,-4(r3)
 4011d04:	18ffff04 	addi	r3,r3,-4
 4011d08:	1000041e 	bne	r2,zero,4011d1c <__any_on+0x3c>
 4011d0c:	20c0142e 	bgeu	r4,r3,4011d60 <__any_on+0x80>
 4011d10:	18ffff04 	addi	r3,r3,-4
 4011d14:	19400017 	ldw	r5,0(r3)
 4011d18:	283ffc26 	beq	r5,zero,4011d0c <__alt_data_end+0xfc011d0c>
 4011d1c:	00800044 	movi	r2,1
 4011d20:	f800283a 	ret
 4011d24:	10c00a0e 	bge	r2,r3,4011d50 <__any_on+0x70>
 4011d28:	1085883a 	add	r2,r2,r2
 4011d2c:	1085883a 	add	r2,r2,r2
 4011d30:	294007cc 	andi	r5,r5,31
 4011d34:	2087883a 	add	r3,r4,r2
 4011d38:	283ff026 	beq	r5,zero,4011cfc <__alt_data_end+0xfc011cfc>
 4011d3c:	19800017 	ldw	r6,0(r3)
 4011d40:	3144d83a 	srl	r2,r6,r5
 4011d44:	114a983a 	sll	r5,r2,r5
 4011d48:	317ff41e 	bne	r6,r5,4011d1c <__alt_data_end+0xfc011d1c>
 4011d4c:	003feb06 	br	4011cfc <__alt_data_end+0xfc011cfc>
 4011d50:	1085883a 	add	r2,r2,r2
 4011d54:	1085883a 	add	r2,r2,r2
 4011d58:	2087883a 	add	r3,r4,r2
 4011d5c:	003fe706 	br	4011cfc <__alt_data_end+0xfc011cfc>
 4011d60:	f800283a 	ret
 4011d64:	0005883a 	mov	r2,zero
 4011d68:	f800283a 	ret

04011d6c <_realloc_r>:
 4011d6c:	defff604 	addi	sp,sp,-40
 4011d70:	dc800215 	stw	r18,8(sp)
 4011d74:	dfc00915 	stw	ra,36(sp)
 4011d78:	df000815 	stw	fp,32(sp)
 4011d7c:	ddc00715 	stw	r23,28(sp)
 4011d80:	dd800615 	stw	r22,24(sp)
 4011d84:	dd400515 	stw	r21,20(sp)
 4011d88:	dd000415 	stw	r20,16(sp)
 4011d8c:	dcc00315 	stw	r19,12(sp)
 4011d90:	dc400115 	stw	r17,4(sp)
 4011d94:	dc000015 	stw	r16,0(sp)
 4011d98:	3025883a 	mov	r18,r6
 4011d9c:	2800b726 	beq	r5,zero,401207c <_realloc_r+0x310>
 4011da0:	282b883a 	mov	r21,r5
 4011da4:	2029883a 	mov	r20,r4
 4011da8:	4017c500 	call	4017c50 <__malloc_lock>
 4011dac:	a8bfff17 	ldw	r2,-4(r21)
 4011db0:	043fff04 	movi	r16,-4
 4011db4:	90c002c4 	addi	r3,r18,11
 4011db8:	01000584 	movi	r4,22
 4011dbc:	acfffe04 	addi	r19,r21,-8
 4011dc0:	1420703a 	and	r16,r2,r16
 4011dc4:	20c0332e 	bgeu	r4,r3,4011e94 <_realloc_r+0x128>
 4011dc8:	047ffe04 	movi	r17,-8
 4011dcc:	1c62703a 	and	r17,r3,r17
 4011dd0:	8807883a 	mov	r3,r17
 4011dd4:	88005816 	blt	r17,zero,4011f38 <_realloc_r+0x1cc>
 4011dd8:	8c805736 	bltu	r17,r18,4011f38 <_realloc_r+0x1cc>
 4011ddc:	80c0300e 	bge	r16,r3,4011ea0 <_realloc_r+0x134>
 4011de0:	070100b4 	movhi	fp,1026
 4011de4:	e7012d04 	addi	fp,fp,1204
 4011de8:	e1c00217 	ldw	r7,8(fp)
 4011dec:	9c09883a 	add	r4,r19,r16
 4011df0:	22000117 	ldw	r8,4(r4)
 4011df4:	21c06326 	beq	r4,r7,4011f84 <_realloc_r+0x218>
 4011df8:	017fff84 	movi	r5,-2
 4011dfc:	414a703a 	and	r5,r8,r5
 4011e00:	214b883a 	add	r5,r4,r5
 4011e04:	29800117 	ldw	r6,4(r5)
 4011e08:	3180004c 	andi	r6,r6,1
 4011e0c:	30003f26 	beq	r6,zero,4011f0c <_realloc_r+0x1a0>
 4011e10:	1080004c 	andi	r2,r2,1
 4011e14:	10008326 	beq	r2,zero,4012024 <_realloc_r+0x2b8>
 4011e18:	900b883a 	mov	r5,r18
 4011e1c:	a009883a 	mov	r4,r20
 4011e20:	400aa200 	call	400aa20 <_malloc_r>
 4011e24:	1025883a 	mov	r18,r2
 4011e28:	10011e26 	beq	r2,zero,40122a4 <_realloc_r+0x538>
 4011e2c:	a93fff17 	ldw	r4,-4(r21)
 4011e30:	10fffe04 	addi	r3,r2,-8
 4011e34:	00bfff84 	movi	r2,-2
 4011e38:	2084703a 	and	r2,r4,r2
 4011e3c:	9885883a 	add	r2,r19,r2
 4011e40:	1880ee26 	beq	r3,r2,40121fc <_realloc_r+0x490>
 4011e44:	81bfff04 	addi	r6,r16,-4
 4011e48:	00800904 	movi	r2,36
 4011e4c:	1180b836 	bltu	r2,r6,4012130 <_realloc_r+0x3c4>
 4011e50:	00c004c4 	movi	r3,19
 4011e54:	19809636 	bltu	r3,r6,40120b0 <_realloc_r+0x344>
 4011e58:	9005883a 	mov	r2,r18
 4011e5c:	a807883a 	mov	r3,r21
 4011e60:	19000017 	ldw	r4,0(r3)
 4011e64:	11000015 	stw	r4,0(r2)
 4011e68:	19000117 	ldw	r4,4(r3)
 4011e6c:	11000115 	stw	r4,4(r2)
 4011e70:	18c00217 	ldw	r3,8(r3)
 4011e74:	10c00215 	stw	r3,8(r2)
 4011e78:	a80b883a 	mov	r5,r21
 4011e7c:	a009883a 	mov	r4,r20
 4011e80:	400ff440 	call	400ff44 <_free_r>
 4011e84:	a009883a 	mov	r4,r20
 4011e88:	4017c740 	call	4017c74 <__malloc_unlock>
 4011e8c:	9005883a 	mov	r2,r18
 4011e90:	00001206 	br	4011edc <_realloc_r+0x170>
 4011e94:	00c00404 	movi	r3,16
 4011e98:	1823883a 	mov	r17,r3
 4011e9c:	003fce06 	br	4011dd8 <__alt_data_end+0xfc011dd8>
 4011ea0:	a825883a 	mov	r18,r21
 4011ea4:	8445c83a 	sub	r2,r16,r17
 4011ea8:	00c003c4 	movi	r3,15
 4011eac:	18802636 	bltu	r3,r2,4011f48 <_realloc_r+0x1dc>
 4011eb0:	99800117 	ldw	r6,4(r19)
 4011eb4:	9c07883a 	add	r3,r19,r16
 4011eb8:	3180004c 	andi	r6,r6,1
 4011ebc:	3420b03a 	or	r16,r6,r16
 4011ec0:	9c000115 	stw	r16,4(r19)
 4011ec4:	18800117 	ldw	r2,4(r3)
 4011ec8:	10800054 	ori	r2,r2,1
 4011ecc:	18800115 	stw	r2,4(r3)
 4011ed0:	a009883a 	mov	r4,r20
 4011ed4:	4017c740 	call	4017c74 <__malloc_unlock>
 4011ed8:	9005883a 	mov	r2,r18
 4011edc:	dfc00917 	ldw	ra,36(sp)
 4011ee0:	df000817 	ldw	fp,32(sp)
 4011ee4:	ddc00717 	ldw	r23,28(sp)
 4011ee8:	dd800617 	ldw	r22,24(sp)
 4011eec:	dd400517 	ldw	r21,20(sp)
 4011ef0:	dd000417 	ldw	r20,16(sp)
 4011ef4:	dcc00317 	ldw	r19,12(sp)
 4011ef8:	dc800217 	ldw	r18,8(sp)
 4011efc:	dc400117 	ldw	r17,4(sp)
 4011f00:	dc000017 	ldw	r16,0(sp)
 4011f04:	dec00a04 	addi	sp,sp,40
 4011f08:	f800283a 	ret
 4011f0c:	017fff04 	movi	r5,-4
 4011f10:	414a703a 	and	r5,r8,r5
 4011f14:	814d883a 	add	r6,r16,r5
 4011f18:	30c01f16 	blt	r6,r3,4011f98 <_realloc_r+0x22c>
 4011f1c:	20800317 	ldw	r2,12(r4)
 4011f20:	20c00217 	ldw	r3,8(r4)
 4011f24:	a825883a 	mov	r18,r21
 4011f28:	3021883a 	mov	r16,r6
 4011f2c:	18800315 	stw	r2,12(r3)
 4011f30:	10c00215 	stw	r3,8(r2)
 4011f34:	003fdb06 	br	4011ea4 <__alt_data_end+0xfc011ea4>
 4011f38:	00800304 	movi	r2,12
 4011f3c:	a0800015 	stw	r2,0(r20)
 4011f40:	0005883a 	mov	r2,zero
 4011f44:	003fe506 	br	4011edc <__alt_data_end+0xfc011edc>
 4011f48:	98c00117 	ldw	r3,4(r19)
 4011f4c:	9c4b883a 	add	r5,r19,r17
 4011f50:	11000054 	ori	r4,r2,1
 4011f54:	18c0004c 	andi	r3,r3,1
 4011f58:	1c62b03a 	or	r17,r3,r17
 4011f5c:	9c400115 	stw	r17,4(r19)
 4011f60:	29000115 	stw	r4,4(r5)
 4011f64:	2885883a 	add	r2,r5,r2
 4011f68:	10c00117 	ldw	r3,4(r2)
 4011f6c:	29400204 	addi	r5,r5,8
 4011f70:	a009883a 	mov	r4,r20
 4011f74:	18c00054 	ori	r3,r3,1
 4011f78:	10c00115 	stw	r3,4(r2)
 4011f7c:	400ff440 	call	400ff44 <_free_r>
 4011f80:	003fd306 	br	4011ed0 <__alt_data_end+0xfc011ed0>
 4011f84:	017fff04 	movi	r5,-4
 4011f88:	414a703a 	and	r5,r8,r5
 4011f8c:	89800404 	addi	r6,r17,16
 4011f90:	8151883a 	add	r8,r16,r5
 4011f94:	4180590e 	bge	r8,r6,40120fc <_realloc_r+0x390>
 4011f98:	1080004c 	andi	r2,r2,1
 4011f9c:	103f9e1e 	bne	r2,zero,4011e18 <__alt_data_end+0xfc011e18>
 4011fa0:	adbffe17 	ldw	r22,-8(r21)
 4011fa4:	00bfff04 	movi	r2,-4
 4011fa8:	9dadc83a 	sub	r22,r19,r22
 4011fac:	b1800117 	ldw	r6,4(r22)
 4011fb0:	3084703a 	and	r2,r6,r2
 4011fb4:	20002026 	beq	r4,zero,4012038 <_realloc_r+0x2cc>
 4011fb8:	80af883a 	add	r23,r16,r2
 4011fbc:	b96f883a 	add	r23,r23,r5
 4011fc0:	21c05f26 	beq	r4,r7,4012140 <_realloc_r+0x3d4>
 4011fc4:	b8c01c16 	blt	r23,r3,4012038 <_realloc_r+0x2cc>
 4011fc8:	20800317 	ldw	r2,12(r4)
 4011fcc:	20c00217 	ldw	r3,8(r4)
 4011fd0:	81bfff04 	addi	r6,r16,-4
 4011fd4:	01000904 	movi	r4,36
 4011fd8:	18800315 	stw	r2,12(r3)
 4011fdc:	10c00215 	stw	r3,8(r2)
 4011fe0:	b0c00217 	ldw	r3,8(r22)
 4011fe4:	b0800317 	ldw	r2,12(r22)
 4011fe8:	b4800204 	addi	r18,r22,8
 4011fec:	18800315 	stw	r2,12(r3)
 4011ff0:	10c00215 	stw	r3,8(r2)
 4011ff4:	21801b36 	bltu	r4,r6,4012064 <_realloc_r+0x2f8>
 4011ff8:	008004c4 	movi	r2,19
 4011ffc:	1180352e 	bgeu	r2,r6,40120d4 <_realloc_r+0x368>
 4012000:	a8800017 	ldw	r2,0(r21)
 4012004:	b0800215 	stw	r2,8(r22)
 4012008:	a8800117 	ldw	r2,4(r21)
 401200c:	b0800315 	stw	r2,12(r22)
 4012010:	008006c4 	movi	r2,27
 4012014:	11807f36 	bltu	r2,r6,4012214 <_realloc_r+0x4a8>
 4012018:	b0800404 	addi	r2,r22,16
 401201c:	ad400204 	addi	r21,r21,8
 4012020:	00002d06 	br	40120d8 <_realloc_r+0x36c>
 4012024:	adbffe17 	ldw	r22,-8(r21)
 4012028:	00bfff04 	movi	r2,-4
 401202c:	9dadc83a 	sub	r22,r19,r22
 4012030:	b1000117 	ldw	r4,4(r22)
 4012034:	2084703a 	and	r2,r4,r2
 4012038:	b03f7726 	beq	r22,zero,4011e18 <__alt_data_end+0xfc011e18>
 401203c:	80af883a 	add	r23,r16,r2
 4012040:	b8ff7516 	blt	r23,r3,4011e18 <__alt_data_end+0xfc011e18>
 4012044:	b0800317 	ldw	r2,12(r22)
 4012048:	b0c00217 	ldw	r3,8(r22)
 401204c:	81bfff04 	addi	r6,r16,-4
 4012050:	01000904 	movi	r4,36
 4012054:	18800315 	stw	r2,12(r3)
 4012058:	10c00215 	stw	r3,8(r2)
 401205c:	b4800204 	addi	r18,r22,8
 4012060:	21bfe52e 	bgeu	r4,r6,4011ff8 <__alt_data_end+0xfc011ff8>
 4012064:	a80b883a 	mov	r5,r21
 4012068:	9009883a 	mov	r4,r18
 401206c:	4010c140 	call	4010c14 <memmove>
 4012070:	b821883a 	mov	r16,r23
 4012074:	b027883a 	mov	r19,r22
 4012078:	003f8a06 	br	4011ea4 <__alt_data_end+0xfc011ea4>
 401207c:	300b883a 	mov	r5,r6
 4012080:	dfc00917 	ldw	ra,36(sp)
 4012084:	df000817 	ldw	fp,32(sp)
 4012088:	ddc00717 	ldw	r23,28(sp)
 401208c:	dd800617 	ldw	r22,24(sp)
 4012090:	dd400517 	ldw	r21,20(sp)
 4012094:	dd000417 	ldw	r20,16(sp)
 4012098:	dcc00317 	ldw	r19,12(sp)
 401209c:	dc800217 	ldw	r18,8(sp)
 40120a0:	dc400117 	ldw	r17,4(sp)
 40120a4:	dc000017 	ldw	r16,0(sp)
 40120a8:	dec00a04 	addi	sp,sp,40
 40120ac:	400aa201 	jmpi	400aa20 <_malloc_r>
 40120b0:	a8c00017 	ldw	r3,0(r21)
 40120b4:	90c00015 	stw	r3,0(r18)
 40120b8:	a8c00117 	ldw	r3,4(r21)
 40120bc:	90c00115 	stw	r3,4(r18)
 40120c0:	00c006c4 	movi	r3,27
 40120c4:	19804536 	bltu	r3,r6,40121dc <_realloc_r+0x470>
 40120c8:	90800204 	addi	r2,r18,8
 40120cc:	a8c00204 	addi	r3,r21,8
 40120d0:	003f6306 	br	4011e60 <__alt_data_end+0xfc011e60>
 40120d4:	9005883a 	mov	r2,r18
 40120d8:	a8c00017 	ldw	r3,0(r21)
 40120dc:	b821883a 	mov	r16,r23
 40120e0:	b027883a 	mov	r19,r22
 40120e4:	10c00015 	stw	r3,0(r2)
 40120e8:	a8c00117 	ldw	r3,4(r21)
 40120ec:	10c00115 	stw	r3,4(r2)
 40120f0:	a8c00217 	ldw	r3,8(r21)
 40120f4:	10c00215 	stw	r3,8(r2)
 40120f8:	003f6a06 	br	4011ea4 <__alt_data_end+0xfc011ea4>
 40120fc:	9c67883a 	add	r19,r19,r17
 4012100:	4445c83a 	sub	r2,r8,r17
 4012104:	e4c00215 	stw	r19,8(fp)
 4012108:	10800054 	ori	r2,r2,1
 401210c:	98800115 	stw	r2,4(r19)
 4012110:	a8bfff17 	ldw	r2,-4(r21)
 4012114:	a009883a 	mov	r4,r20
 4012118:	1080004c 	andi	r2,r2,1
 401211c:	1462b03a 	or	r17,r2,r17
 4012120:	ac7fff15 	stw	r17,-4(r21)
 4012124:	4017c740 	call	4017c74 <__malloc_unlock>
 4012128:	a805883a 	mov	r2,r21
 401212c:	003f6b06 	br	4011edc <__alt_data_end+0xfc011edc>
 4012130:	a80b883a 	mov	r5,r21
 4012134:	9009883a 	mov	r4,r18
 4012138:	4010c140 	call	4010c14 <memmove>
 401213c:	003f4e06 	br	4011e78 <__alt_data_end+0xfc011e78>
 4012140:	89000404 	addi	r4,r17,16
 4012144:	b93fbc16 	blt	r23,r4,4012038 <__alt_data_end+0xfc012038>
 4012148:	b0800317 	ldw	r2,12(r22)
 401214c:	b0c00217 	ldw	r3,8(r22)
 4012150:	81bfff04 	addi	r6,r16,-4
 4012154:	01000904 	movi	r4,36
 4012158:	18800315 	stw	r2,12(r3)
 401215c:	10c00215 	stw	r3,8(r2)
 4012160:	b4800204 	addi	r18,r22,8
 4012164:	21804336 	bltu	r4,r6,4012274 <_realloc_r+0x508>
 4012168:	008004c4 	movi	r2,19
 401216c:	11803f2e 	bgeu	r2,r6,401226c <_realloc_r+0x500>
 4012170:	a8800017 	ldw	r2,0(r21)
 4012174:	b0800215 	stw	r2,8(r22)
 4012178:	a8800117 	ldw	r2,4(r21)
 401217c:	b0800315 	stw	r2,12(r22)
 4012180:	008006c4 	movi	r2,27
 4012184:	11803f36 	bltu	r2,r6,4012284 <_realloc_r+0x518>
 4012188:	b0800404 	addi	r2,r22,16
 401218c:	ad400204 	addi	r21,r21,8
 4012190:	a8c00017 	ldw	r3,0(r21)
 4012194:	10c00015 	stw	r3,0(r2)
 4012198:	a8c00117 	ldw	r3,4(r21)
 401219c:	10c00115 	stw	r3,4(r2)
 40121a0:	a8c00217 	ldw	r3,8(r21)
 40121a4:	10c00215 	stw	r3,8(r2)
 40121a8:	b447883a 	add	r3,r22,r17
 40121ac:	bc45c83a 	sub	r2,r23,r17
 40121b0:	e0c00215 	stw	r3,8(fp)
 40121b4:	10800054 	ori	r2,r2,1
 40121b8:	18800115 	stw	r2,4(r3)
 40121bc:	b0800117 	ldw	r2,4(r22)
 40121c0:	a009883a 	mov	r4,r20
 40121c4:	1080004c 	andi	r2,r2,1
 40121c8:	1462b03a 	or	r17,r2,r17
 40121cc:	b4400115 	stw	r17,4(r22)
 40121d0:	4017c740 	call	4017c74 <__malloc_unlock>
 40121d4:	9005883a 	mov	r2,r18
 40121d8:	003f4006 	br	4011edc <__alt_data_end+0xfc011edc>
 40121dc:	a8c00217 	ldw	r3,8(r21)
 40121e0:	90c00215 	stw	r3,8(r18)
 40121e4:	a8c00317 	ldw	r3,12(r21)
 40121e8:	90c00315 	stw	r3,12(r18)
 40121ec:	30801126 	beq	r6,r2,4012234 <_realloc_r+0x4c8>
 40121f0:	90800404 	addi	r2,r18,16
 40121f4:	a8c00404 	addi	r3,r21,16
 40121f8:	003f1906 	br	4011e60 <__alt_data_end+0xfc011e60>
 40121fc:	90ffff17 	ldw	r3,-4(r18)
 4012200:	00bfff04 	movi	r2,-4
 4012204:	a825883a 	mov	r18,r21
 4012208:	1884703a 	and	r2,r3,r2
 401220c:	80a1883a 	add	r16,r16,r2
 4012210:	003f2406 	br	4011ea4 <__alt_data_end+0xfc011ea4>
 4012214:	a8800217 	ldw	r2,8(r21)
 4012218:	b0800415 	stw	r2,16(r22)
 401221c:	a8800317 	ldw	r2,12(r21)
 4012220:	b0800515 	stw	r2,20(r22)
 4012224:	31000a26 	beq	r6,r4,4012250 <_realloc_r+0x4e4>
 4012228:	b0800604 	addi	r2,r22,24
 401222c:	ad400404 	addi	r21,r21,16
 4012230:	003fa906 	br	40120d8 <__alt_data_end+0xfc0120d8>
 4012234:	a9000417 	ldw	r4,16(r21)
 4012238:	90800604 	addi	r2,r18,24
 401223c:	a8c00604 	addi	r3,r21,24
 4012240:	91000415 	stw	r4,16(r18)
 4012244:	a9000517 	ldw	r4,20(r21)
 4012248:	91000515 	stw	r4,20(r18)
 401224c:	003f0406 	br	4011e60 <__alt_data_end+0xfc011e60>
 4012250:	a8c00417 	ldw	r3,16(r21)
 4012254:	ad400604 	addi	r21,r21,24
 4012258:	b0800804 	addi	r2,r22,32
 401225c:	b0c00615 	stw	r3,24(r22)
 4012260:	a8ffff17 	ldw	r3,-4(r21)
 4012264:	b0c00715 	stw	r3,28(r22)
 4012268:	003f9b06 	br	40120d8 <__alt_data_end+0xfc0120d8>
 401226c:	9005883a 	mov	r2,r18
 4012270:	003fc706 	br	4012190 <__alt_data_end+0xfc012190>
 4012274:	a80b883a 	mov	r5,r21
 4012278:	9009883a 	mov	r4,r18
 401227c:	4010c140 	call	4010c14 <memmove>
 4012280:	003fc906 	br	40121a8 <__alt_data_end+0xfc0121a8>
 4012284:	a8800217 	ldw	r2,8(r21)
 4012288:	b0800415 	stw	r2,16(r22)
 401228c:	a8800317 	ldw	r2,12(r21)
 4012290:	b0800515 	stw	r2,20(r22)
 4012294:	31000726 	beq	r6,r4,40122b4 <_realloc_r+0x548>
 4012298:	b0800604 	addi	r2,r22,24
 401229c:	ad400404 	addi	r21,r21,16
 40122a0:	003fbb06 	br	4012190 <__alt_data_end+0xfc012190>
 40122a4:	a009883a 	mov	r4,r20
 40122a8:	4017c740 	call	4017c74 <__malloc_unlock>
 40122ac:	0005883a 	mov	r2,zero
 40122b0:	003f0a06 	br	4011edc <__alt_data_end+0xfc011edc>
 40122b4:	a8c00417 	ldw	r3,16(r21)
 40122b8:	ad400604 	addi	r21,r21,24
 40122bc:	b0800804 	addi	r2,r22,32
 40122c0:	b0c00615 	stw	r3,24(r22)
 40122c4:	a8ffff17 	ldw	r3,-4(r21)
 40122c8:	b0c00715 	stw	r3,28(r22)
 40122cc:	003fb006 	br	4012190 <__alt_data_end+0xfc012190>

040122d0 <__fpclassifyd>:
 40122d0:	00a00034 	movhi	r2,32768
 40122d4:	10bfffc4 	addi	r2,r2,-1
 40122d8:	2884703a 	and	r2,r5,r2
 40122dc:	10000726 	beq	r2,zero,40122fc <__fpclassifyd+0x2c>
 40122e0:	00fffc34 	movhi	r3,65520
 40122e4:	019ff834 	movhi	r6,32736
 40122e8:	28c7883a 	add	r3,r5,r3
 40122ec:	31bfffc4 	addi	r6,r6,-1
 40122f0:	30c00536 	bltu	r6,r3,4012308 <__fpclassifyd+0x38>
 40122f4:	00800104 	movi	r2,4
 40122f8:	f800283a 	ret
 40122fc:	2000021e 	bne	r4,zero,4012308 <__fpclassifyd+0x38>
 4012300:	00800084 	movi	r2,2
 4012304:	f800283a 	ret
 4012308:	00dffc34 	movhi	r3,32752
 401230c:	019ff834 	movhi	r6,32736
 4012310:	28cb883a 	add	r5,r5,r3
 4012314:	31bfffc4 	addi	r6,r6,-1
 4012318:	317ff62e 	bgeu	r6,r5,40122f4 <__alt_data_end+0xfc0122f4>
 401231c:	01400434 	movhi	r5,16
 4012320:	297fffc4 	addi	r5,r5,-1
 4012324:	28800236 	bltu	r5,r2,4012330 <__fpclassifyd+0x60>
 4012328:	008000c4 	movi	r2,3
 401232c:	f800283a 	ret
 4012330:	10c00226 	beq	r2,r3,401233c <__fpclassifyd+0x6c>
 4012334:	0005883a 	mov	r2,zero
 4012338:	f800283a 	ret
 401233c:	2005003a 	cmpeq	r2,r4,zero
 4012340:	f800283a 	ret

04012344 <__sread>:
 4012344:	defffe04 	addi	sp,sp,-8
 4012348:	dc000015 	stw	r16,0(sp)
 401234c:	2821883a 	mov	r16,r5
 4012350:	2940038f 	ldh	r5,14(r5)
 4012354:	dfc00115 	stw	ra,4(sp)
 4012358:	401405c0 	call	401405c <_read_r>
 401235c:	10000716 	blt	r2,zero,401237c <__sread+0x38>
 4012360:	80c01417 	ldw	r3,80(r16)
 4012364:	1887883a 	add	r3,r3,r2
 4012368:	80c01415 	stw	r3,80(r16)
 401236c:	dfc00117 	ldw	ra,4(sp)
 4012370:	dc000017 	ldw	r16,0(sp)
 4012374:	dec00204 	addi	sp,sp,8
 4012378:	f800283a 	ret
 401237c:	80c0030b 	ldhu	r3,12(r16)
 4012380:	18fbffcc 	andi	r3,r3,61439
 4012384:	80c0030d 	sth	r3,12(r16)
 4012388:	dfc00117 	ldw	ra,4(sp)
 401238c:	dc000017 	ldw	r16,0(sp)
 4012390:	dec00204 	addi	sp,sp,8
 4012394:	f800283a 	ret

04012398 <__seofread>:
 4012398:	0005883a 	mov	r2,zero
 401239c:	f800283a 	ret

040123a0 <__swrite>:
 40123a0:	2880030b 	ldhu	r2,12(r5)
 40123a4:	defffb04 	addi	sp,sp,-20
 40123a8:	dcc00315 	stw	r19,12(sp)
 40123ac:	dc800215 	stw	r18,8(sp)
 40123b0:	dc400115 	stw	r17,4(sp)
 40123b4:	dc000015 	stw	r16,0(sp)
 40123b8:	dfc00415 	stw	ra,16(sp)
 40123bc:	10c0400c 	andi	r3,r2,256
 40123c0:	2821883a 	mov	r16,r5
 40123c4:	2023883a 	mov	r17,r4
 40123c8:	3025883a 	mov	r18,r6
 40123cc:	3827883a 	mov	r19,r7
 40123d0:	18000526 	beq	r3,zero,40123e8 <__swrite+0x48>
 40123d4:	2940038f 	ldh	r5,14(r5)
 40123d8:	01c00084 	movi	r7,2
 40123dc:	000d883a 	mov	r6,zero
 40123e0:	4013ffc0 	call	4013ffc <_lseek_r>
 40123e4:	8080030b 	ldhu	r2,12(r16)
 40123e8:	8140038f 	ldh	r5,14(r16)
 40123ec:	10bbffcc 	andi	r2,r2,61439
 40123f0:	980f883a 	mov	r7,r19
 40123f4:	900d883a 	mov	r6,r18
 40123f8:	8809883a 	mov	r4,r17
 40123fc:	8080030d 	sth	r2,12(r16)
 4012400:	dfc00417 	ldw	ra,16(sp)
 4012404:	dcc00317 	ldw	r19,12(sp)
 4012408:	dc800217 	ldw	r18,8(sp)
 401240c:	dc400117 	ldw	r17,4(sp)
 4012410:	dc000017 	ldw	r16,0(sp)
 4012414:	dec00504 	addi	sp,sp,20
 4012418:	4013ac81 	jmpi	4013ac8 <_write_r>

0401241c <__sseek>:
 401241c:	defffe04 	addi	sp,sp,-8
 4012420:	dc000015 	stw	r16,0(sp)
 4012424:	2821883a 	mov	r16,r5
 4012428:	2940038f 	ldh	r5,14(r5)
 401242c:	dfc00115 	stw	ra,4(sp)
 4012430:	4013ffc0 	call	4013ffc <_lseek_r>
 4012434:	00ffffc4 	movi	r3,-1
 4012438:	10c00826 	beq	r2,r3,401245c <__sseek+0x40>
 401243c:	80c0030b 	ldhu	r3,12(r16)
 4012440:	80801415 	stw	r2,80(r16)
 4012444:	18c40014 	ori	r3,r3,4096
 4012448:	80c0030d 	sth	r3,12(r16)
 401244c:	dfc00117 	ldw	ra,4(sp)
 4012450:	dc000017 	ldw	r16,0(sp)
 4012454:	dec00204 	addi	sp,sp,8
 4012458:	f800283a 	ret
 401245c:	80c0030b 	ldhu	r3,12(r16)
 4012460:	18fbffcc 	andi	r3,r3,61439
 4012464:	80c0030d 	sth	r3,12(r16)
 4012468:	dfc00117 	ldw	ra,4(sp)
 401246c:	dc000017 	ldw	r16,0(sp)
 4012470:	dec00204 	addi	sp,sp,8
 4012474:	f800283a 	ret

04012478 <__sclose>:
 4012478:	2940038f 	ldh	r5,14(r5)
 401247c:	4013b281 	jmpi	4013b28 <_close_r>

04012480 <__sprint_r.part.0>:
 4012480:	28801917 	ldw	r2,100(r5)
 4012484:	defff604 	addi	sp,sp,-40
 4012488:	dd400515 	stw	r21,20(sp)
 401248c:	dfc00915 	stw	ra,36(sp)
 4012490:	df000815 	stw	fp,32(sp)
 4012494:	ddc00715 	stw	r23,28(sp)
 4012498:	dd800615 	stw	r22,24(sp)
 401249c:	dd000415 	stw	r20,16(sp)
 40124a0:	dcc00315 	stw	r19,12(sp)
 40124a4:	dc800215 	stw	r18,8(sp)
 40124a8:	dc400115 	stw	r17,4(sp)
 40124ac:	dc000015 	stw	r16,0(sp)
 40124b0:	1088000c 	andi	r2,r2,8192
 40124b4:	302b883a 	mov	r21,r6
 40124b8:	10002e26 	beq	r2,zero,4012574 <__sprint_r.part.0+0xf4>
 40124bc:	30800217 	ldw	r2,8(r6)
 40124c0:	35800017 	ldw	r22,0(r6)
 40124c4:	10002926 	beq	r2,zero,401256c <__sprint_r.part.0+0xec>
 40124c8:	2827883a 	mov	r19,r5
 40124cc:	2029883a 	mov	r20,r4
 40124d0:	b5c00104 	addi	r23,r22,4
 40124d4:	04bfffc4 	movi	r18,-1
 40124d8:	bc400017 	ldw	r17,0(r23)
 40124dc:	b4000017 	ldw	r16,0(r22)
 40124e0:	0039883a 	mov	fp,zero
 40124e4:	8822d0ba 	srli	r17,r17,2
 40124e8:	8800031e 	bne	r17,zero,40124f8 <__sprint_r.part.0+0x78>
 40124ec:	00001806 	br	4012550 <__sprint_r.part.0+0xd0>
 40124f0:	84000104 	addi	r16,r16,4
 40124f4:	8f001526 	beq	r17,fp,401254c <__sprint_r.part.0+0xcc>
 40124f8:	81400017 	ldw	r5,0(r16)
 40124fc:	980d883a 	mov	r6,r19
 4012500:	a009883a 	mov	r4,r20
 4012504:	4013ea80 	call	4013ea8 <_fputwc_r>
 4012508:	e7000044 	addi	fp,fp,1
 401250c:	14bff81e 	bne	r2,r18,40124f0 <__alt_data_end+0xfc0124f0>
 4012510:	9005883a 	mov	r2,r18
 4012514:	a8000215 	stw	zero,8(r21)
 4012518:	a8000115 	stw	zero,4(r21)
 401251c:	dfc00917 	ldw	ra,36(sp)
 4012520:	df000817 	ldw	fp,32(sp)
 4012524:	ddc00717 	ldw	r23,28(sp)
 4012528:	dd800617 	ldw	r22,24(sp)
 401252c:	dd400517 	ldw	r21,20(sp)
 4012530:	dd000417 	ldw	r20,16(sp)
 4012534:	dcc00317 	ldw	r19,12(sp)
 4012538:	dc800217 	ldw	r18,8(sp)
 401253c:	dc400117 	ldw	r17,4(sp)
 4012540:	dc000017 	ldw	r16,0(sp)
 4012544:	dec00a04 	addi	sp,sp,40
 4012548:	f800283a 	ret
 401254c:	a8800217 	ldw	r2,8(r21)
 4012550:	8c63883a 	add	r17,r17,r17
 4012554:	8c63883a 	add	r17,r17,r17
 4012558:	1445c83a 	sub	r2,r2,r17
 401255c:	a8800215 	stw	r2,8(r21)
 4012560:	b5800204 	addi	r22,r22,8
 4012564:	bdc00204 	addi	r23,r23,8
 4012568:	103fdb1e 	bne	r2,zero,40124d8 <__alt_data_end+0xfc0124d8>
 401256c:	0005883a 	mov	r2,zero
 4012570:	003fe806 	br	4012514 <__alt_data_end+0xfc012514>
 4012574:	40102540 	call	4010254 <__sfvwrite_r>
 4012578:	003fe606 	br	4012514 <__alt_data_end+0xfc012514>

0401257c <__sprint_r>:
 401257c:	30c00217 	ldw	r3,8(r6)
 4012580:	18000126 	beq	r3,zero,4012588 <__sprint_r+0xc>
 4012584:	40124801 	jmpi	4012480 <__sprint_r.part.0>
 4012588:	30000115 	stw	zero,4(r6)
 401258c:	0005883a 	mov	r2,zero
 4012590:	f800283a 	ret

04012594 <___vfiprintf_internal_r>:
 4012594:	deffc904 	addi	sp,sp,-220
 4012598:	df003515 	stw	fp,212(sp)
 401259c:	dd003115 	stw	r20,196(sp)
 40125a0:	dfc03615 	stw	ra,216(sp)
 40125a4:	ddc03415 	stw	r23,208(sp)
 40125a8:	dd803315 	stw	r22,204(sp)
 40125ac:	dd403215 	stw	r21,200(sp)
 40125b0:	dcc03015 	stw	r19,192(sp)
 40125b4:	dc802f15 	stw	r18,188(sp)
 40125b8:	dc402e15 	stw	r17,184(sp)
 40125bc:	dc002d15 	stw	r16,180(sp)
 40125c0:	d9002015 	stw	r4,128(sp)
 40125c4:	d9c02215 	stw	r7,136(sp)
 40125c8:	2829883a 	mov	r20,r5
 40125cc:	3039883a 	mov	fp,r6
 40125d0:	20000226 	beq	r4,zero,40125dc <___vfiprintf_internal_r+0x48>
 40125d4:	20800e17 	ldw	r2,56(r4)
 40125d8:	1000cf26 	beq	r2,zero,4012918 <___vfiprintf_internal_r+0x384>
 40125dc:	a080030b 	ldhu	r2,12(r20)
 40125e0:	10c8000c 	andi	r3,r2,8192
 40125e4:	1800061e 	bne	r3,zero,4012600 <___vfiprintf_internal_r+0x6c>
 40125e8:	a1001917 	ldw	r4,100(r20)
 40125ec:	00f7ffc4 	movi	r3,-8193
 40125f0:	10880014 	ori	r2,r2,8192
 40125f4:	20c6703a 	and	r3,r4,r3
 40125f8:	a080030d 	sth	r2,12(r20)
 40125fc:	a0c01915 	stw	r3,100(r20)
 4012600:	10c0020c 	andi	r3,r2,8
 4012604:	1800a926 	beq	r3,zero,40128ac <___vfiprintf_internal_r+0x318>
 4012608:	a0c00417 	ldw	r3,16(r20)
 401260c:	1800a726 	beq	r3,zero,40128ac <___vfiprintf_internal_r+0x318>
 4012610:	1080068c 	andi	r2,r2,26
 4012614:	00c00284 	movi	r3,10
 4012618:	10c0ac26 	beq	r2,r3,40128cc <___vfiprintf_internal_r+0x338>
 401261c:	da801a04 	addi	r10,sp,104
 4012620:	da801e15 	stw	r10,120(sp)
 4012624:	d8801e17 	ldw	r2,120(sp)
 4012628:	da8019c4 	addi	r10,sp,103
 401262c:	058100b4 	movhi	r22,1026
 4012630:	05c100b4 	movhi	r23,1026
 4012634:	da801f15 	stw	r10,124(sp)
 4012638:	1295c83a 	sub	r10,r2,r10
 401263c:	b5aa3904 	addi	r22,r22,-22300
 4012640:	bdea3504 	addi	r23,r23,-22316
 4012644:	dec01a15 	stw	sp,104(sp)
 4012648:	d8001c15 	stw	zero,112(sp)
 401264c:	d8001b15 	stw	zero,108(sp)
 4012650:	d8002615 	stw	zero,152(sp)
 4012654:	d8002315 	stw	zero,140(sp)
 4012658:	da802715 	stw	r10,156(sp)
 401265c:	d811883a 	mov	r8,sp
 4012660:	dd002115 	stw	r20,132(sp)
 4012664:	e021883a 	mov	r16,fp
 4012668:	80800007 	ldb	r2,0(r16)
 401266c:	1003ea26 	beq	r2,zero,4013618 <___vfiprintf_internal_r+0x1084>
 4012670:	00c00944 	movi	r3,37
 4012674:	8025883a 	mov	r18,r16
 4012678:	10c0021e 	bne	r2,r3,4012684 <___vfiprintf_internal_r+0xf0>
 401267c:	00001606 	br	40126d8 <___vfiprintf_internal_r+0x144>
 4012680:	10c00326 	beq	r2,r3,4012690 <___vfiprintf_internal_r+0xfc>
 4012684:	94800044 	addi	r18,r18,1
 4012688:	90800007 	ldb	r2,0(r18)
 401268c:	103ffc1e 	bne	r2,zero,4012680 <__alt_data_end+0xfc012680>
 4012690:	9423c83a 	sub	r17,r18,r16
 4012694:	88001026 	beq	r17,zero,40126d8 <___vfiprintf_internal_r+0x144>
 4012698:	d8c01c17 	ldw	r3,112(sp)
 401269c:	d8801b17 	ldw	r2,108(sp)
 40126a0:	44000015 	stw	r16,0(r8)
 40126a4:	88c7883a 	add	r3,r17,r3
 40126a8:	10800044 	addi	r2,r2,1
 40126ac:	44400115 	stw	r17,4(r8)
 40126b0:	d8c01c15 	stw	r3,112(sp)
 40126b4:	d8801b15 	stw	r2,108(sp)
 40126b8:	010001c4 	movi	r4,7
 40126bc:	2080760e 	bge	r4,r2,4012898 <___vfiprintf_internal_r+0x304>
 40126c0:	1803821e 	bne	r3,zero,40134cc <___vfiprintf_internal_r+0xf38>
 40126c4:	da802317 	ldw	r10,140(sp)
 40126c8:	d8001b15 	stw	zero,108(sp)
 40126cc:	d811883a 	mov	r8,sp
 40126d0:	5455883a 	add	r10,r10,r17
 40126d4:	da802315 	stw	r10,140(sp)
 40126d8:	90800007 	ldb	r2,0(r18)
 40126dc:	10044626 	beq	r2,zero,40137f8 <___vfiprintf_internal_r+0x1264>
 40126e0:	90c00047 	ldb	r3,1(r18)
 40126e4:	94000044 	addi	r16,r18,1
 40126e8:	d8001d85 	stb	zero,118(sp)
 40126ec:	0009883a 	mov	r4,zero
 40126f0:	000f883a 	mov	r7,zero
 40126f4:	027fffc4 	movi	r9,-1
 40126f8:	0023883a 	mov	r17,zero
 40126fc:	0029883a 	mov	r20,zero
 4012700:	01401604 	movi	r5,88
 4012704:	01800244 	movi	r6,9
 4012708:	03400a84 	movi	r13,42
 401270c:	03001b04 	movi	r12,108
 4012710:	84000044 	addi	r16,r16,1
 4012714:	18bff804 	addi	r2,r3,-32
 4012718:	28827336 	bltu	r5,r2,40130e8 <___vfiprintf_internal_r+0xb54>
 401271c:	100490ba 	slli	r2,r2,2
 4012720:	02810074 	movhi	r10,1025
 4012724:	5289cd04 	addi	r10,r10,10036
 4012728:	1285883a 	add	r2,r2,r10
 401272c:	10800017 	ldw	r2,0(r2)
 4012730:	1000683a 	jmp	r2
 4012734:	04012e1c 	xori	r16,zero,1208
 4012738:	040130e8 	cmpgeui	r16,zero,1219
 401273c:	040130e8 	cmpgeui	r16,zero,1219
 4012740:	04012e3c 	xorhi	r16,zero,1208
 4012744:	040130e8 	cmpgeui	r16,zero,1219
 4012748:	040130e8 	cmpgeui	r16,zero,1219
 401274c:	040130e8 	cmpgeui	r16,zero,1219
 4012750:	040130e8 	cmpgeui	r16,zero,1219
 4012754:	040130e8 	cmpgeui	r16,zero,1219
 4012758:	040130e8 	cmpgeui	r16,zero,1219
 401275c:	04013024 	muli	r16,zero,1216
 4012760:	04013040 	call	401304 <__alt_mem_sdram-0x3bfecfc>
 4012764:	040130e8 	cmpgeui	r16,zero,1219
 4012768:	04012928 	cmpgeui	r16,zero,1188
 401276c:	04013050 	cmplti	r16,zero,1217
 4012770:	040130e8 	cmpgeui	r16,zero,1219
 4012774:	04012e48 	cmpgei	r16,zero,1209
 4012778:	04012e54 	movui	r16,1209
 401277c:	04012e54 	movui	r16,1209
 4012780:	04012e54 	movui	r16,1209
 4012784:	04012e54 	movui	r16,1209
 4012788:	04012e54 	movui	r16,1209
 401278c:	04012e54 	movui	r16,1209
 4012790:	04012e54 	movui	r16,1209
 4012794:	04012e54 	movui	r16,1209
 4012798:	04012e54 	movui	r16,1209
 401279c:	040130e8 	cmpgeui	r16,zero,1219
 40127a0:	040130e8 	cmpgeui	r16,zero,1219
 40127a4:	040130e8 	cmpgeui	r16,zero,1219
 40127a8:	040130e8 	cmpgeui	r16,zero,1219
 40127ac:	040130e8 	cmpgeui	r16,zero,1219
 40127b0:	040130e8 	cmpgeui	r16,zero,1219
 40127b4:	040130e8 	cmpgeui	r16,zero,1219
 40127b8:	040130e8 	cmpgeui	r16,zero,1219
 40127bc:	040130e8 	cmpgeui	r16,zero,1219
 40127c0:	040130e8 	cmpgeui	r16,zero,1219
 40127c4:	04012e80 	call	4012e8 <__alt_mem_sdram-0x3bfed18>
 40127c8:	040130e8 	cmpgeui	r16,zero,1219
 40127cc:	040130e8 	cmpgeui	r16,zero,1219
 40127d0:	040130e8 	cmpgeui	r16,zero,1219
 40127d4:	040130e8 	cmpgeui	r16,zero,1219
 40127d8:	040130e8 	cmpgeui	r16,zero,1219
 40127dc:	040130e8 	cmpgeui	r16,zero,1219
 40127e0:	040130e8 	cmpgeui	r16,zero,1219
 40127e4:	040130e8 	cmpgeui	r16,zero,1219
 40127e8:	040130e8 	cmpgeui	r16,zero,1219
 40127ec:	040130e8 	cmpgeui	r16,zero,1219
 40127f0:	04012eb8 	rdprs	r16,zero,1210
 40127f4:	040130e8 	cmpgeui	r16,zero,1219
 40127f8:	040130e8 	cmpgeui	r16,zero,1219
 40127fc:	040130e8 	cmpgeui	r16,zero,1219
 4012800:	040130e8 	cmpgeui	r16,zero,1219
 4012804:	040130e8 	cmpgeui	r16,zero,1219
 4012808:	04012f10 	cmplti	r16,zero,1212
 401280c:	040130e8 	cmpgeui	r16,zero,1219
 4012810:	040130e8 	cmpgeui	r16,zero,1219
 4012814:	04012f80 	call	4012f8 <__alt_mem_sdram-0x3bfed08>
 4012818:	040130e8 	cmpgeui	r16,zero,1219
 401281c:	040130e8 	cmpgeui	r16,zero,1219
 4012820:	040130e8 	cmpgeui	r16,zero,1219
 4012824:	040130e8 	cmpgeui	r16,zero,1219
 4012828:	040130e8 	cmpgeui	r16,zero,1219
 401282c:	040130e8 	cmpgeui	r16,zero,1219
 4012830:	040130e8 	cmpgeui	r16,zero,1219
 4012834:	040130e8 	cmpgeui	r16,zero,1219
 4012838:	040130e8 	cmpgeui	r16,zero,1219
 401283c:	040130e8 	cmpgeui	r16,zero,1219
 4012840:	04012d2c 	andhi	r16,zero,1204
 4012844:	04012d58 	cmpnei	r16,zero,1205
 4012848:	040130e8 	cmpgeui	r16,zero,1219
 401284c:	040130e8 	cmpgeui	r16,zero,1219
 4012850:	040130e8 	cmpgeui	r16,zero,1219
 4012854:	04013090 	cmplti	r16,zero,1218
 4012858:	04012d58 	cmpnei	r16,zero,1205
 401285c:	040130e8 	cmpgeui	r16,zero,1219
 4012860:	040130e8 	cmpgeui	r16,zero,1219
 4012864:	04012bec 	andhi	r16,zero,1199
 4012868:	040130e8 	cmpgeui	r16,zero,1219
 401286c:	04012bfc 	xorhi	r16,zero,1199
 4012870:	04012c38 	rdprs	r16,zero,1200
 4012874:	04012934 	movhi	r16,1188
 4012878:	04012be0 	cmpeqi	r16,zero,1199
 401287c:	040130e8 	cmpgeui	r16,zero,1219
 4012880:	04012fbc 	xorhi	r16,zero,1214
 4012884:	040130e8 	cmpgeui	r16,zero,1219
 4012888:	04013014 	movui	r16,1216
 401288c:	040130e8 	cmpgeui	r16,zero,1219
 4012890:	040130e8 	cmpgeui	r16,zero,1219
 4012894:	04012cd8 	cmpnei	r16,zero,1203
 4012898:	42000204 	addi	r8,r8,8
 401289c:	da802317 	ldw	r10,140(sp)
 40128a0:	5455883a 	add	r10,r10,r17
 40128a4:	da802315 	stw	r10,140(sp)
 40128a8:	003f8b06 	br	40126d8 <__alt_data_end+0xfc0126d8>
 40128ac:	d9002017 	ldw	r4,128(sp)
 40128b0:	a00b883a 	mov	r5,r20
 40128b4:	400ddfc0 	call	400ddfc <__swsetup_r>
 40128b8:	1003b11e 	bne	r2,zero,4013780 <___vfiprintf_internal_r+0x11ec>
 40128bc:	a080030b 	ldhu	r2,12(r20)
 40128c0:	00c00284 	movi	r3,10
 40128c4:	1080068c 	andi	r2,r2,26
 40128c8:	10ff541e 	bne	r2,r3,401261c <__alt_data_end+0xfc01261c>
 40128cc:	a080038f 	ldh	r2,14(r20)
 40128d0:	103f5216 	blt	r2,zero,401261c <__alt_data_end+0xfc01261c>
 40128d4:	d9c02217 	ldw	r7,136(sp)
 40128d8:	d9002017 	ldw	r4,128(sp)
 40128dc:	e00d883a 	mov	r6,fp
 40128e0:	a00b883a 	mov	r5,r20
 40128e4:	4013a0c0 	call	4013a0c <__sbprintf>
 40128e8:	dfc03617 	ldw	ra,216(sp)
 40128ec:	df003517 	ldw	fp,212(sp)
 40128f0:	ddc03417 	ldw	r23,208(sp)
 40128f4:	dd803317 	ldw	r22,204(sp)
 40128f8:	dd403217 	ldw	r21,200(sp)
 40128fc:	dd003117 	ldw	r20,196(sp)
 4012900:	dcc03017 	ldw	r19,192(sp)
 4012904:	dc802f17 	ldw	r18,188(sp)
 4012908:	dc402e17 	ldw	r17,184(sp)
 401290c:	dc002d17 	ldw	r16,180(sp)
 4012910:	dec03704 	addi	sp,sp,220
 4012914:	f800283a 	ret
 4012918:	400fdd00 	call	400fdd0 <__sinit>
 401291c:	003f2f06 	br	40125dc <__alt_data_end+0xfc0125dc>
 4012920:	0463c83a 	sub	r17,zero,r17
 4012924:	d8802215 	stw	r2,136(sp)
 4012928:	a5000114 	ori	r20,r20,4
 401292c:	80c00007 	ldb	r3,0(r16)
 4012930:	003f7706 	br	4012710 <__alt_data_end+0xfc012710>
 4012934:	00800c04 	movi	r2,48
 4012938:	da802217 	ldw	r10,136(sp)
 401293c:	d8801d05 	stb	r2,116(sp)
 4012940:	00801e04 	movi	r2,120
 4012944:	d8801d45 	stb	r2,117(sp)
 4012948:	d8001d85 	stb	zero,118(sp)
 401294c:	50c00104 	addi	r3,r10,4
 4012950:	54800017 	ldw	r18,0(r10)
 4012954:	0027883a 	mov	r19,zero
 4012958:	a0800094 	ori	r2,r20,2
 401295c:	48030b16 	blt	r9,zero,401358c <___vfiprintf_internal_r+0xff8>
 4012960:	00bfdfc4 	movi	r2,-129
 4012964:	a096703a 	and	r11,r20,r2
 4012968:	d8c02215 	stw	r3,136(sp)
 401296c:	5d000094 	ori	r20,r11,2
 4012970:	90032b1e 	bne	r18,zero,4013620 <___vfiprintf_internal_r+0x108c>
 4012974:	008100b4 	movhi	r2,1026
 4012978:	10a9d504 	addi	r2,r2,-22700
 401297c:	d8802615 	stw	r2,152(sp)
 4012980:	0039883a 	mov	fp,zero
 4012984:	48017b1e 	bne	r9,zero,4012f74 <___vfiprintf_internal_r+0x9e0>
 4012988:	0013883a 	mov	r9,zero
 401298c:	0027883a 	mov	r19,zero
 4012990:	dd401a04 	addi	r21,sp,104
 4012994:	4825883a 	mov	r18,r9
 4012998:	4cc0010e 	bge	r9,r19,40129a0 <___vfiprintf_internal_r+0x40c>
 401299c:	9825883a 	mov	r18,r19
 40129a0:	e7003fcc 	andi	fp,fp,255
 40129a4:	e700201c 	xori	fp,fp,128
 40129a8:	e73fe004 	addi	fp,fp,-128
 40129ac:	e0000126 	beq	fp,zero,40129b4 <___vfiprintf_internal_r+0x420>
 40129b0:	94800044 	addi	r18,r18,1
 40129b4:	a380008c 	andi	r14,r20,2
 40129b8:	70000126 	beq	r14,zero,40129c0 <___vfiprintf_internal_r+0x42c>
 40129bc:	94800084 	addi	r18,r18,2
 40129c0:	a700210c 	andi	fp,r20,132
 40129c4:	e001df1e 	bne	fp,zero,4013144 <___vfiprintf_internal_r+0xbb0>
 40129c8:	8c87c83a 	sub	r3,r17,r18
 40129cc:	00c1dd0e 	bge	zero,r3,4013144 <___vfiprintf_internal_r+0xbb0>
 40129d0:	01c00404 	movi	r7,16
 40129d4:	d8801c17 	ldw	r2,112(sp)
 40129d8:	38c3ad0e 	bge	r7,r3,4013890 <___vfiprintf_internal_r+0x12fc>
 40129dc:	028100b4 	movhi	r10,1026
 40129e0:	52aa3904 	addi	r10,r10,-22300
 40129e4:	dc002915 	stw	r16,164(sp)
 40129e8:	d9801b17 	ldw	r6,108(sp)
 40129ec:	da802415 	stw	r10,144(sp)
 40129f0:	03c001c4 	movi	r15,7
 40129f4:	da402515 	stw	r9,148(sp)
 40129f8:	db802815 	stw	r14,160(sp)
 40129fc:	1821883a 	mov	r16,r3
 4012a00:	00000506 	br	4012a18 <___vfiprintf_internal_r+0x484>
 4012a04:	31400084 	addi	r5,r6,2
 4012a08:	42000204 	addi	r8,r8,8
 4012a0c:	200d883a 	mov	r6,r4
 4012a10:	843ffc04 	addi	r16,r16,-16
 4012a14:	3c000d0e 	bge	r7,r16,4012a4c <___vfiprintf_internal_r+0x4b8>
 4012a18:	10800404 	addi	r2,r2,16
 4012a1c:	31000044 	addi	r4,r6,1
 4012a20:	45800015 	stw	r22,0(r8)
 4012a24:	41c00115 	stw	r7,4(r8)
 4012a28:	d8801c15 	stw	r2,112(sp)
 4012a2c:	d9001b15 	stw	r4,108(sp)
 4012a30:	793ff40e 	bge	r15,r4,4012a04 <__alt_data_end+0xfc012a04>
 4012a34:	1001b51e 	bne	r2,zero,401310c <___vfiprintf_internal_r+0xb78>
 4012a38:	843ffc04 	addi	r16,r16,-16
 4012a3c:	000d883a 	mov	r6,zero
 4012a40:	01400044 	movi	r5,1
 4012a44:	d811883a 	mov	r8,sp
 4012a48:	3c3ff316 	blt	r7,r16,4012a18 <__alt_data_end+0xfc012a18>
 4012a4c:	8007883a 	mov	r3,r16
 4012a50:	da402517 	ldw	r9,148(sp)
 4012a54:	db802817 	ldw	r14,160(sp)
 4012a58:	dc002917 	ldw	r16,164(sp)
 4012a5c:	da802417 	ldw	r10,144(sp)
 4012a60:	1885883a 	add	r2,r3,r2
 4012a64:	40c00115 	stw	r3,4(r8)
 4012a68:	42800015 	stw	r10,0(r8)
 4012a6c:	d8801c15 	stw	r2,112(sp)
 4012a70:	d9401b15 	stw	r5,108(sp)
 4012a74:	00c001c4 	movi	r3,7
 4012a78:	19426016 	blt	r3,r5,40133fc <___vfiprintf_internal_r+0xe68>
 4012a7c:	d8c01d87 	ldb	r3,118(sp)
 4012a80:	42000204 	addi	r8,r8,8
 4012a84:	29000044 	addi	r4,r5,1
 4012a88:	1801b31e 	bne	r3,zero,4013158 <___vfiprintf_internal_r+0xbc4>
 4012a8c:	7001c026 	beq	r14,zero,4013190 <___vfiprintf_internal_r+0xbfc>
 4012a90:	d8c01d04 	addi	r3,sp,116
 4012a94:	10800084 	addi	r2,r2,2
 4012a98:	40c00015 	stw	r3,0(r8)
 4012a9c:	00c00084 	movi	r3,2
 4012aa0:	40c00115 	stw	r3,4(r8)
 4012aa4:	d8801c15 	stw	r2,112(sp)
 4012aa8:	d9001b15 	stw	r4,108(sp)
 4012aac:	00c001c4 	movi	r3,7
 4012ab0:	1902650e 	bge	r3,r4,4013448 <___vfiprintf_internal_r+0xeb4>
 4012ab4:	10029a1e 	bne	r2,zero,4013520 <___vfiprintf_internal_r+0xf8c>
 4012ab8:	00c02004 	movi	r3,128
 4012abc:	01000044 	movi	r4,1
 4012ac0:	000b883a 	mov	r5,zero
 4012ac4:	d811883a 	mov	r8,sp
 4012ac8:	e0c1b31e 	bne	fp,r3,4013198 <___vfiprintf_internal_r+0xc04>
 4012acc:	8cb9c83a 	sub	fp,r17,r18
 4012ad0:	0701b10e 	bge	zero,fp,4013198 <___vfiprintf_internal_r+0xc04>
 4012ad4:	01c00404 	movi	r7,16
 4012ad8:	3f03890e 	bge	r7,fp,4013900 <___vfiprintf_internal_r+0x136c>
 4012adc:	00c100b4 	movhi	r3,1026
 4012ae0:	18ea3504 	addi	r3,r3,-22316
 4012ae4:	d8c02415 	stw	r3,144(sp)
 4012ae8:	8007883a 	mov	r3,r16
 4012aec:	034001c4 	movi	r13,7
 4012af0:	e021883a 	mov	r16,fp
 4012af4:	da402515 	stw	r9,148(sp)
 4012af8:	1839883a 	mov	fp,r3
 4012afc:	00000506 	br	4012b14 <___vfiprintf_internal_r+0x580>
 4012b00:	29800084 	addi	r6,r5,2
 4012b04:	42000204 	addi	r8,r8,8
 4012b08:	180b883a 	mov	r5,r3
 4012b0c:	843ffc04 	addi	r16,r16,-16
 4012b10:	3c000d0e 	bge	r7,r16,4012b48 <___vfiprintf_internal_r+0x5b4>
 4012b14:	10800404 	addi	r2,r2,16
 4012b18:	28c00044 	addi	r3,r5,1
 4012b1c:	45c00015 	stw	r23,0(r8)
 4012b20:	41c00115 	stw	r7,4(r8)
 4012b24:	d8801c15 	stw	r2,112(sp)
 4012b28:	d8c01b15 	stw	r3,108(sp)
 4012b2c:	68fff40e 	bge	r13,r3,4012b00 <__alt_data_end+0xfc012b00>
 4012b30:	1002241e 	bne	r2,zero,40133c4 <___vfiprintf_internal_r+0xe30>
 4012b34:	843ffc04 	addi	r16,r16,-16
 4012b38:	01800044 	movi	r6,1
 4012b3c:	000b883a 	mov	r5,zero
 4012b40:	d811883a 	mov	r8,sp
 4012b44:	3c3ff316 	blt	r7,r16,4012b14 <__alt_data_end+0xfc012b14>
 4012b48:	da402517 	ldw	r9,148(sp)
 4012b4c:	e007883a 	mov	r3,fp
 4012b50:	8039883a 	mov	fp,r16
 4012b54:	1821883a 	mov	r16,r3
 4012b58:	d8c02417 	ldw	r3,144(sp)
 4012b5c:	1705883a 	add	r2,r2,fp
 4012b60:	47000115 	stw	fp,4(r8)
 4012b64:	40c00015 	stw	r3,0(r8)
 4012b68:	d8801c15 	stw	r2,112(sp)
 4012b6c:	d9801b15 	stw	r6,108(sp)
 4012b70:	00c001c4 	movi	r3,7
 4012b74:	19827616 	blt	r3,r6,4013550 <___vfiprintf_internal_r+0xfbc>
 4012b78:	4cf9c83a 	sub	fp,r9,r19
 4012b7c:	42000204 	addi	r8,r8,8
 4012b80:	31000044 	addi	r4,r6,1
 4012b84:	300b883a 	mov	r5,r6
 4012b88:	07018516 	blt	zero,fp,40131a0 <___vfiprintf_internal_r+0xc0c>
 4012b8c:	9885883a 	add	r2,r19,r2
 4012b90:	45400015 	stw	r21,0(r8)
 4012b94:	44c00115 	stw	r19,4(r8)
 4012b98:	d8801c15 	stw	r2,112(sp)
 4012b9c:	d9001b15 	stw	r4,108(sp)
 4012ba0:	00c001c4 	movi	r3,7
 4012ba4:	1901dd0e 	bge	r3,r4,401331c <___vfiprintf_internal_r+0xd88>
 4012ba8:	1002401e 	bne	r2,zero,40134ac <___vfiprintf_internal_r+0xf18>
 4012bac:	d8001b15 	stw	zero,108(sp)
 4012bb0:	a2c0010c 	andi	r11,r20,4
 4012bb4:	58000226 	beq	r11,zero,4012bc0 <___vfiprintf_internal_r+0x62c>
 4012bb8:	8ca7c83a 	sub	r19,r17,r18
 4012bbc:	04c2f216 	blt	zero,r19,4013788 <___vfiprintf_internal_r+0x11f4>
 4012bc0:	8c80010e 	bge	r17,r18,4012bc8 <___vfiprintf_internal_r+0x634>
 4012bc4:	9023883a 	mov	r17,r18
 4012bc8:	da802317 	ldw	r10,140(sp)
 4012bcc:	5455883a 	add	r10,r10,r17
 4012bd0:	da802315 	stw	r10,140(sp)
 4012bd4:	d8001b15 	stw	zero,108(sp)
 4012bd8:	d811883a 	mov	r8,sp
 4012bdc:	003ea206 	br	4012668 <__alt_data_end+0xfc012668>
 4012be0:	a5000814 	ori	r20,r20,32
 4012be4:	80c00007 	ldb	r3,0(r16)
 4012be8:	003ec906 	br	4012710 <__alt_data_end+0xfc012710>
 4012bec:	80c00007 	ldb	r3,0(r16)
 4012bf0:	1b030926 	beq	r3,r12,4013818 <___vfiprintf_internal_r+0x1284>
 4012bf4:	a5000414 	ori	r20,r20,16
 4012bf8:	003ec506 	br	4012710 <__alt_data_end+0xfc012710>
 4012bfc:	21003fcc 	andi	r4,r4,255
 4012c00:	20035e1e 	bne	r4,zero,401397c <___vfiprintf_internal_r+0x13e8>
 4012c04:	a080080c 	andi	r2,r20,32
 4012c08:	1002a526 	beq	r2,zero,40136a0 <___vfiprintf_internal_r+0x110c>
 4012c0c:	da802217 	ldw	r10,136(sp)
 4012c10:	50800017 	ldw	r2,0(r10)
 4012c14:	da802317 	ldw	r10,140(sp)
 4012c18:	5007d7fa 	srai	r3,r10,31
 4012c1c:	da802217 	ldw	r10,136(sp)
 4012c20:	10c00115 	stw	r3,4(r2)
 4012c24:	52800104 	addi	r10,r10,4
 4012c28:	da802215 	stw	r10,136(sp)
 4012c2c:	da802317 	ldw	r10,140(sp)
 4012c30:	12800015 	stw	r10,0(r2)
 4012c34:	003e8c06 	br	4012668 <__alt_data_end+0xfc012668>
 4012c38:	21003fcc 	andi	r4,r4,255
 4012c3c:	2003511e 	bne	r4,zero,4013984 <___vfiprintf_internal_r+0x13f0>
 4012c40:	a080080c 	andi	r2,r20,32
 4012c44:	1000a126 	beq	r2,zero,4012ecc <___vfiprintf_internal_r+0x938>
 4012c48:	da802217 	ldw	r10,136(sp)
 4012c4c:	d8001d85 	stb	zero,118(sp)
 4012c50:	50800204 	addi	r2,r10,8
 4012c54:	54800017 	ldw	r18,0(r10)
 4012c58:	54c00117 	ldw	r19,4(r10)
 4012c5c:	4802b416 	blt	r9,zero,4013730 <___vfiprintf_internal_r+0x119c>
 4012c60:	013fdfc4 	movi	r4,-129
 4012c64:	94c6b03a 	or	r3,r18,r19
 4012c68:	d8802215 	stw	r2,136(sp)
 4012c6c:	a128703a 	and	r20,r20,r4
 4012c70:	1800a226 	beq	r3,zero,4012efc <___vfiprintf_internal_r+0x968>
 4012c74:	0039883a 	mov	fp,zero
 4012c78:	dd401a04 	addi	r21,sp,104
 4012c7c:	9006d0fa 	srli	r3,r18,3
 4012c80:	9808977a 	slli	r4,r19,29
 4012c84:	9826d0fa 	srli	r19,r19,3
 4012c88:	948001cc 	andi	r18,r18,7
 4012c8c:	90800c04 	addi	r2,r18,48
 4012c90:	ad7fffc4 	addi	r21,r21,-1
 4012c94:	20e4b03a 	or	r18,r4,r3
 4012c98:	a8800005 	stb	r2,0(r21)
 4012c9c:	94c6b03a 	or	r3,r18,r19
 4012ca0:	183ff61e 	bne	r3,zero,4012c7c <__alt_data_end+0xfc012c7c>
 4012ca4:	a0c0004c 	andi	r3,r20,1
 4012ca8:	18005926 	beq	r3,zero,4012e10 <___vfiprintf_internal_r+0x87c>
 4012cac:	10803fcc 	andi	r2,r2,255
 4012cb0:	1080201c 	xori	r2,r2,128
 4012cb4:	10bfe004 	addi	r2,r2,-128
 4012cb8:	00c00c04 	movi	r3,48
 4012cbc:	10c05426 	beq	r2,r3,4012e10 <___vfiprintf_internal_r+0x87c>
 4012cc0:	da801e17 	ldw	r10,120(sp)
 4012cc4:	a8bfffc4 	addi	r2,r21,-1
 4012cc8:	a8ffffc5 	stb	r3,-1(r21)
 4012ccc:	50a7c83a 	sub	r19,r10,r2
 4012cd0:	102b883a 	mov	r21,r2
 4012cd4:	003f2f06 	br	4012994 <__alt_data_end+0xfc012994>
 4012cd8:	21003fcc 	andi	r4,r4,255
 4012cdc:	2003421e 	bne	r4,zero,40139e8 <___vfiprintf_internal_r+0x1454>
 4012ce0:	008100b4 	movhi	r2,1026
 4012ce4:	10a9d504 	addi	r2,r2,-22700
 4012ce8:	d8802615 	stw	r2,152(sp)
 4012cec:	a080080c 	andi	r2,r20,32
 4012cf0:	1000aa26 	beq	r2,zero,4012f9c <___vfiprintf_internal_r+0xa08>
 4012cf4:	da802217 	ldw	r10,136(sp)
 4012cf8:	54800017 	ldw	r18,0(r10)
 4012cfc:	54c00117 	ldw	r19,4(r10)
 4012d00:	52800204 	addi	r10,r10,8
 4012d04:	da802215 	stw	r10,136(sp)
 4012d08:	a080004c 	andi	r2,r20,1
 4012d0c:	1001d226 	beq	r2,zero,4013458 <___vfiprintf_internal_r+0xec4>
 4012d10:	94c4b03a 	or	r2,r18,r19
 4012d14:	1002351e 	bne	r2,zero,40135ec <___vfiprintf_internal_r+0x1058>
 4012d18:	d8001d85 	stb	zero,118(sp)
 4012d1c:	48022216 	blt	r9,zero,40135a8 <___vfiprintf_internal_r+0x1014>
 4012d20:	00bfdfc4 	movi	r2,-129
 4012d24:	a0a8703a 	and	r20,r20,r2
 4012d28:	003f1506 	br	4012980 <__alt_data_end+0xfc012980>
 4012d2c:	da802217 	ldw	r10,136(sp)
 4012d30:	04800044 	movi	r18,1
 4012d34:	d8001d85 	stb	zero,118(sp)
 4012d38:	50800017 	ldw	r2,0(r10)
 4012d3c:	52800104 	addi	r10,r10,4
 4012d40:	da802215 	stw	r10,136(sp)
 4012d44:	d8801005 	stb	r2,64(sp)
 4012d48:	9027883a 	mov	r19,r18
 4012d4c:	dd401004 	addi	r21,sp,64
 4012d50:	0013883a 	mov	r9,zero
 4012d54:	003f1706 	br	40129b4 <__alt_data_end+0xfc0129b4>
 4012d58:	21003fcc 	andi	r4,r4,255
 4012d5c:	2003201e 	bne	r4,zero,40139e0 <___vfiprintf_internal_r+0x144c>
 4012d60:	a080080c 	andi	r2,r20,32
 4012d64:	10004b26 	beq	r2,zero,4012e94 <___vfiprintf_internal_r+0x900>
 4012d68:	da802217 	ldw	r10,136(sp)
 4012d6c:	50800117 	ldw	r2,4(r10)
 4012d70:	54800017 	ldw	r18,0(r10)
 4012d74:	52800204 	addi	r10,r10,8
 4012d78:	da802215 	stw	r10,136(sp)
 4012d7c:	1027883a 	mov	r19,r2
 4012d80:	10022c16 	blt	r2,zero,4013634 <___vfiprintf_internal_r+0x10a0>
 4012d84:	df001d83 	ldbu	fp,118(sp)
 4012d88:	48007216 	blt	r9,zero,4012f54 <___vfiprintf_internal_r+0x9c0>
 4012d8c:	00ffdfc4 	movi	r3,-129
 4012d90:	94c4b03a 	or	r2,r18,r19
 4012d94:	a0e8703a 	and	r20,r20,r3
 4012d98:	1000cc26 	beq	r2,zero,40130cc <___vfiprintf_internal_r+0xb38>
 4012d9c:	98021026 	beq	r19,zero,40135e0 <___vfiprintf_internal_r+0x104c>
 4012da0:	dc402415 	stw	r17,144(sp)
 4012da4:	dc002515 	stw	r16,148(sp)
 4012da8:	9823883a 	mov	r17,r19
 4012dac:	9021883a 	mov	r16,r18
 4012db0:	dd401a04 	addi	r21,sp,104
 4012db4:	4825883a 	mov	r18,r9
 4012db8:	4027883a 	mov	r19,r8
 4012dbc:	8009883a 	mov	r4,r16
 4012dc0:	880b883a 	mov	r5,r17
 4012dc4:	01800284 	movi	r6,10
 4012dc8:	000f883a 	mov	r7,zero
 4012dcc:	40149740 	call	4014974 <__umoddi3>
 4012dd0:	10800c04 	addi	r2,r2,48
 4012dd4:	ad7fffc4 	addi	r21,r21,-1
 4012dd8:	8009883a 	mov	r4,r16
 4012ddc:	880b883a 	mov	r5,r17
 4012de0:	a8800005 	stb	r2,0(r21)
 4012de4:	01800284 	movi	r6,10
 4012de8:	000f883a 	mov	r7,zero
 4012dec:	40143fc0 	call	40143fc <__udivdi3>
 4012df0:	1021883a 	mov	r16,r2
 4012df4:	10c4b03a 	or	r2,r2,r3
 4012df8:	1823883a 	mov	r17,r3
 4012dfc:	103fef1e 	bne	r2,zero,4012dbc <__alt_data_end+0xfc012dbc>
 4012e00:	dc402417 	ldw	r17,144(sp)
 4012e04:	dc002517 	ldw	r16,148(sp)
 4012e08:	9013883a 	mov	r9,r18
 4012e0c:	9811883a 	mov	r8,r19
 4012e10:	da801e17 	ldw	r10,120(sp)
 4012e14:	5567c83a 	sub	r19,r10,r21
 4012e18:	003ede06 	br	4012994 <__alt_data_end+0xfc012994>
 4012e1c:	38803fcc 	andi	r2,r7,255
 4012e20:	1080201c 	xori	r2,r2,128
 4012e24:	10bfe004 	addi	r2,r2,-128
 4012e28:	1002371e 	bne	r2,zero,4013708 <___vfiprintf_internal_r+0x1174>
 4012e2c:	01000044 	movi	r4,1
 4012e30:	01c00804 	movi	r7,32
 4012e34:	80c00007 	ldb	r3,0(r16)
 4012e38:	003e3506 	br	4012710 <__alt_data_end+0xfc012710>
 4012e3c:	a5000054 	ori	r20,r20,1
 4012e40:	80c00007 	ldb	r3,0(r16)
 4012e44:	003e3206 	br	4012710 <__alt_data_end+0xfc012710>
 4012e48:	a5002014 	ori	r20,r20,128
 4012e4c:	80c00007 	ldb	r3,0(r16)
 4012e50:	003e2f06 	br	4012710 <__alt_data_end+0xfc012710>
 4012e54:	8015883a 	mov	r10,r16
 4012e58:	0023883a 	mov	r17,zero
 4012e5c:	18bff404 	addi	r2,r3,-48
 4012e60:	50c00007 	ldb	r3,0(r10)
 4012e64:	8c4002a4 	muli	r17,r17,10
 4012e68:	84000044 	addi	r16,r16,1
 4012e6c:	8015883a 	mov	r10,r16
 4012e70:	1463883a 	add	r17,r2,r17
 4012e74:	18bff404 	addi	r2,r3,-48
 4012e78:	30bff92e 	bgeu	r6,r2,4012e60 <__alt_data_end+0xfc012e60>
 4012e7c:	003e2506 	br	4012714 <__alt_data_end+0xfc012714>
 4012e80:	21003fcc 	andi	r4,r4,255
 4012e84:	2002d41e 	bne	r4,zero,40139d8 <___vfiprintf_internal_r+0x1444>
 4012e88:	a5000414 	ori	r20,r20,16
 4012e8c:	a080080c 	andi	r2,r20,32
 4012e90:	103fb51e 	bne	r2,zero,4012d68 <__alt_data_end+0xfc012d68>
 4012e94:	a080040c 	andi	r2,r20,16
 4012e98:	1001f826 	beq	r2,zero,401367c <___vfiprintf_internal_r+0x10e8>
 4012e9c:	da802217 	ldw	r10,136(sp)
 4012ea0:	54800017 	ldw	r18,0(r10)
 4012ea4:	52800104 	addi	r10,r10,4
 4012ea8:	da802215 	stw	r10,136(sp)
 4012eac:	9027d7fa 	srai	r19,r18,31
 4012eb0:	9805883a 	mov	r2,r19
 4012eb4:	003fb206 	br	4012d80 <__alt_data_end+0xfc012d80>
 4012eb8:	21003fcc 	andi	r4,r4,255
 4012ebc:	2002c41e 	bne	r4,zero,40139d0 <___vfiprintf_internal_r+0x143c>
 4012ec0:	a5000414 	ori	r20,r20,16
 4012ec4:	a080080c 	andi	r2,r20,32
 4012ec8:	103f5f1e 	bne	r2,zero,4012c48 <__alt_data_end+0xfc012c48>
 4012ecc:	a080040c 	andi	r2,r20,16
 4012ed0:	10020f26 	beq	r2,zero,4013710 <___vfiprintf_internal_r+0x117c>
 4012ed4:	da802217 	ldw	r10,136(sp)
 4012ed8:	d8001d85 	stb	zero,118(sp)
 4012edc:	0027883a 	mov	r19,zero
 4012ee0:	50800104 	addi	r2,r10,4
 4012ee4:	54800017 	ldw	r18,0(r10)
 4012ee8:	48021116 	blt	r9,zero,4013730 <___vfiprintf_internal_r+0x119c>
 4012eec:	00ffdfc4 	movi	r3,-129
 4012ef0:	d8802215 	stw	r2,136(sp)
 4012ef4:	a0e8703a 	and	r20,r20,r3
 4012ef8:	903f5e1e 	bne	r18,zero,4012c74 <__alt_data_end+0xfc012c74>
 4012efc:	0039883a 	mov	fp,zero
 4012f00:	4802a626 	beq	r9,zero,401399c <___vfiprintf_internal_r+0x1408>
 4012f04:	0025883a 	mov	r18,zero
 4012f08:	0027883a 	mov	r19,zero
 4012f0c:	003f5a06 	br	4012c78 <__alt_data_end+0xfc012c78>
 4012f10:	21003fcc 	andi	r4,r4,255
 4012f14:	20029f1e 	bne	r4,zero,4013994 <___vfiprintf_internal_r+0x1400>
 4012f18:	a5000414 	ori	r20,r20,16
 4012f1c:	a080080c 	andi	r2,r20,32
 4012f20:	10005e1e 	bne	r2,zero,401309c <___vfiprintf_internal_r+0xb08>
 4012f24:	a080040c 	andi	r2,r20,16
 4012f28:	1001a21e 	bne	r2,zero,40135b4 <___vfiprintf_internal_r+0x1020>
 4012f2c:	a080100c 	andi	r2,r20,64
 4012f30:	d8001d85 	stb	zero,118(sp)
 4012f34:	da802217 	ldw	r10,136(sp)
 4012f38:	1002231e 	bne	r2,zero,40137c8 <___vfiprintf_internal_r+0x1234>
 4012f3c:	50800104 	addi	r2,r10,4
 4012f40:	54800017 	ldw	r18,0(r10)
 4012f44:	0027883a 	mov	r19,zero
 4012f48:	4801a00e 	bge	r9,zero,40135cc <___vfiprintf_internal_r+0x1038>
 4012f4c:	d8802215 	stw	r2,136(sp)
 4012f50:	0039883a 	mov	fp,zero
 4012f54:	94c4b03a 	or	r2,r18,r19
 4012f58:	103f901e 	bne	r2,zero,4012d9c <__alt_data_end+0xfc012d9c>
 4012f5c:	00800044 	movi	r2,1
 4012f60:	10803fcc 	andi	r2,r2,255
 4012f64:	00c00044 	movi	r3,1
 4012f68:	10c05926 	beq	r2,r3,40130d0 <___vfiprintf_internal_r+0xb3c>
 4012f6c:	00c00084 	movi	r3,2
 4012f70:	10ffe41e 	bne	r2,r3,4012f04 <__alt_data_end+0xfc012f04>
 4012f74:	0025883a 	mov	r18,zero
 4012f78:	0027883a 	mov	r19,zero
 4012f7c:	00013d06 	br	4013474 <___vfiprintf_internal_r+0xee0>
 4012f80:	21003fcc 	andi	r4,r4,255
 4012f84:	2002811e 	bne	r4,zero,401398c <___vfiprintf_internal_r+0x13f8>
 4012f88:	008100b4 	movhi	r2,1026
 4012f8c:	10a9d004 	addi	r2,r2,-22720
 4012f90:	d8802615 	stw	r2,152(sp)
 4012f94:	a080080c 	andi	r2,r20,32
 4012f98:	103f561e 	bne	r2,zero,4012cf4 <__alt_data_end+0xfc012cf4>
 4012f9c:	a080040c 	andi	r2,r20,16
 4012fa0:	1001d126 	beq	r2,zero,40136e8 <___vfiprintf_internal_r+0x1154>
 4012fa4:	da802217 	ldw	r10,136(sp)
 4012fa8:	0027883a 	mov	r19,zero
 4012fac:	54800017 	ldw	r18,0(r10)
 4012fb0:	52800104 	addi	r10,r10,4
 4012fb4:	da802215 	stw	r10,136(sp)
 4012fb8:	003f5306 	br	4012d08 <__alt_data_end+0xfc012d08>
 4012fbc:	da802217 	ldw	r10,136(sp)
 4012fc0:	d8001d85 	stb	zero,118(sp)
 4012fc4:	55400017 	ldw	r21,0(r10)
 4012fc8:	50c00104 	addi	r3,r10,4
 4012fcc:	a8024226 	beq	r21,zero,40138d8 <___vfiprintf_internal_r+0x1344>
 4012fd0:	48021816 	blt	r9,zero,4013834 <___vfiprintf_internal_r+0x12a0>
 4012fd4:	480d883a 	mov	r6,r9
 4012fd8:	000b883a 	mov	r5,zero
 4012fdc:	a809883a 	mov	r4,r21
 4012fe0:	d8c02a15 	stw	r3,168(sp)
 4012fe4:	da002b15 	stw	r8,172(sp)
 4012fe8:	da402c15 	stw	r9,176(sp)
 4012fec:	4010b300 	call	4010b30 <memchr>
 4012ff0:	d8c02a17 	ldw	r3,168(sp)
 4012ff4:	da002b17 	ldw	r8,172(sp)
 4012ff8:	da402c17 	ldw	r9,176(sp)
 4012ffc:	10024826 	beq	r2,zero,4013920 <___vfiprintf_internal_r+0x138c>
 4013000:	1567c83a 	sub	r19,r2,r21
 4013004:	df001d83 	ldbu	fp,118(sp)
 4013008:	d8c02215 	stw	r3,136(sp)
 401300c:	0013883a 	mov	r9,zero
 4013010:	003e6006 	br	4012994 <__alt_data_end+0xfc012994>
 4013014:	21003fcc 	andi	r4,r4,255
 4013018:	203fc026 	beq	r4,zero,4012f1c <__alt_data_end+0xfc012f1c>
 401301c:	d9c01d85 	stb	r7,118(sp)
 4013020:	003fbe06 	br	4012f1c <__alt_data_end+0xfc012f1c>
 4013024:	da802217 	ldw	r10,136(sp)
 4013028:	54400017 	ldw	r17,0(r10)
 401302c:	50800104 	addi	r2,r10,4
 4013030:	883e3b16 	blt	r17,zero,4012920 <__alt_data_end+0xfc012920>
 4013034:	d8802215 	stw	r2,136(sp)
 4013038:	80c00007 	ldb	r3,0(r16)
 401303c:	003db406 	br	4012710 <__alt_data_end+0xfc012710>
 4013040:	01000044 	movi	r4,1
 4013044:	01c00ac4 	movi	r7,43
 4013048:	80c00007 	ldb	r3,0(r16)
 401304c:	003db006 	br	4012710 <__alt_data_end+0xfc012710>
 4013050:	80c00007 	ldb	r3,0(r16)
 4013054:	82800044 	addi	r10,r16,1
 4013058:	1b423c26 	beq	r3,r13,401394c <___vfiprintf_internal_r+0x13b8>
 401305c:	18bff404 	addi	r2,r3,-48
 4013060:	0013883a 	mov	r9,zero
 4013064:	30822b36 	bltu	r6,r2,4013914 <___vfiprintf_internal_r+0x1380>
 4013068:	50c00007 	ldb	r3,0(r10)
 401306c:	4a4002a4 	muli	r9,r9,10
 4013070:	54000044 	addi	r16,r10,1
 4013074:	8015883a 	mov	r10,r16
 4013078:	4893883a 	add	r9,r9,r2
 401307c:	18bff404 	addi	r2,r3,-48
 4013080:	30bff92e 	bgeu	r6,r2,4013068 <__alt_data_end+0xfc013068>
 4013084:	483da30e 	bge	r9,zero,4012714 <__alt_data_end+0xfc012714>
 4013088:	027fffc4 	movi	r9,-1
 401308c:	003da106 	br	4012714 <__alt_data_end+0xfc012714>
 4013090:	a5001014 	ori	r20,r20,64
 4013094:	80c00007 	ldb	r3,0(r16)
 4013098:	003d9d06 	br	4012710 <__alt_data_end+0xfc012710>
 401309c:	da802217 	ldw	r10,136(sp)
 40130a0:	d8001d85 	stb	zero,118(sp)
 40130a4:	50c00204 	addi	r3,r10,8
 40130a8:	54800017 	ldw	r18,0(r10)
 40130ac:	54c00117 	ldw	r19,4(r10)
 40130b0:	4801ca16 	blt	r9,zero,40137dc <___vfiprintf_internal_r+0x1248>
 40130b4:	013fdfc4 	movi	r4,-129
 40130b8:	94c4b03a 	or	r2,r18,r19
 40130bc:	d8c02215 	stw	r3,136(sp)
 40130c0:	a128703a 	and	r20,r20,r4
 40130c4:	0039883a 	mov	fp,zero
 40130c8:	103f341e 	bne	r2,zero,4012d9c <__alt_data_end+0xfc012d9c>
 40130cc:	483e2e26 	beq	r9,zero,4012988 <__alt_data_end+0xfc012988>
 40130d0:	0025883a 	mov	r18,zero
 40130d4:	94800c04 	addi	r18,r18,48
 40130d8:	dc8019c5 	stb	r18,103(sp)
 40130dc:	dcc02717 	ldw	r19,156(sp)
 40130e0:	dd4019c4 	addi	r21,sp,103
 40130e4:	003e2b06 	br	4012994 <__alt_data_end+0xfc012994>
 40130e8:	21003fcc 	andi	r4,r4,255
 40130ec:	2002361e 	bne	r4,zero,40139c8 <___vfiprintf_internal_r+0x1434>
 40130f0:	1801c126 	beq	r3,zero,40137f8 <___vfiprintf_internal_r+0x1264>
 40130f4:	04800044 	movi	r18,1
 40130f8:	d8c01005 	stb	r3,64(sp)
 40130fc:	d8001d85 	stb	zero,118(sp)
 4013100:	9027883a 	mov	r19,r18
 4013104:	dd401004 	addi	r21,sp,64
 4013108:	003f1106 	br	4012d50 <__alt_data_end+0xfc012d50>
 401310c:	d9402117 	ldw	r5,132(sp)
 4013110:	d9002017 	ldw	r4,128(sp)
 4013114:	d9801a04 	addi	r6,sp,104
 4013118:	d9c02b15 	stw	r7,172(sp)
 401311c:	dbc02a15 	stw	r15,168(sp)
 4013120:	40124800 	call	4012480 <__sprint_r.part.0>
 4013124:	d9c02b17 	ldw	r7,172(sp)
 4013128:	dbc02a17 	ldw	r15,168(sp)
 401312c:	10006d1e 	bne	r2,zero,40132e4 <___vfiprintf_internal_r+0xd50>
 4013130:	d9801b17 	ldw	r6,108(sp)
 4013134:	d8801c17 	ldw	r2,112(sp)
 4013138:	d811883a 	mov	r8,sp
 401313c:	31400044 	addi	r5,r6,1
 4013140:	003e3306 	br	4012a10 <__alt_data_end+0xfc012a10>
 4013144:	d9401b17 	ldw	r5,108(sp)
 4013148:	d8801c17 	ldw	r2,112(sp)
 401314c:	29000044 	addi	r4,r5,1
 4013150:	d8c01d87 	ldb	r3,118(sp)
 4013154:	183e4d26 	beq	r3,zero,4012a8c <__alt_data_end+0xfc012a8c>
 4013158:	00c00044 	movi	r3,1
 401315c:	d9401d84 	addi	r5,sp,118
 4013160:	10c5883a 	add	r2,r2,r3
 4013164:	41400015 	stw	r5,0(r8)
 4013168:	40c00115 	stw	r3,4(r8)
 401316c:	d8801c15 	stw	r2,112(sp)
 4013170:	d9001b15 	stw	r4,108(sp)
 4013174:	014001c4 	movi	r5,7
 4013178:	2900a90e 	bge	r5,r4,4013420 <___vfiprintf_internal_r+0xe8c>
 401317c:	1000da1e 	bne	r2,zero,40134e8 <___vfiprintf_internal_r+0xf54>
 4013180:	7000ab1e 	bne	r14,zero,4013430 <___vfiprintf_internal_r+0xe9c>
 4013184:	000b883a 	mov	r5,zero
 4013188:	1809883a 	mov	r4,r3
 401318c:	d811883a 	mov	r8,sp
 4013190:	00c02004 	movi	r3,128
 4013194:	e0fe4d26 	beq	fp,r3,4012acc <__alt_data_end+0xfc012acc>
 4013198:	4cf9c83a 	sub	fp,r9,r19
 401319c:	073e7b0e 	bge	zero,fp,4012b8c <__alt_data_end+0xfc012b8c>
 40131a0:	01c00404 	movi	r7,16
 40131a4:	3f01900e 	bge	r7,fp,40137e8 <___vfiprintf_internal_r+0x1254>
 40131a8:	00c100b4 	movhi	r3,1026
 40131ac:	18ea3504 	addi	r3,r3,-22316
 40131b0:	d8c02415 	stw	r3,144(sp)
 40131b4:	034001c4 	movi	r13,7
 40131b8:	00000506 	br	40131d0 <___vfiprintf_internal_r+0xc3c>
 40131bc:	29000084 	addi	r4,r5,2
 40131c0:	42000204 	addi	r8,r8,8
 40131c4:	180b883a 	mov	r5,r3
 40131c8:	e73ffc04 	addi	fp,fp,-16
 40131cc:	3f000d0e 	bge	r7,fp,4013204 <___vfiprintf_internal_r+0xc70>
 40131d0:	10800404 	addi	r2,r2,16
 40131d4:	28c00044 	addi	r3,r5,1
 40131d8:	45c00015 	stw	r23,0(r8)
 40131dc:	41c00115 	stw	r7,4(r8)
 40131e0:	d8801c15 	stw	r2,112(sp)
 40131e4:	d8c01b15 	stw	r3,108(sp)
 40131e8:	68fff40e 	bge	r13,r3,40131bc <__alt_data_end+0xfc0131bc>
 40131ec:	1000101e 	bne	r2,zero,4013230 <___vfiprintf_internal_r+0xc9c>
 40131f0:	e73ffc04 	addi	fp,fp,-16
 40131f4:	01000044 	movi	r4,1
 40131f8:	000b883a 	mov	r5,zero
 40131fc:	d811883a 	mov	r8,sp
 4013200:	3f3ff316 	blt	r7,fp,40131d0 <__alt_data_end+0xfc0131d0>
 4013204:	da802417 	ldw	r10,144(sp)
 4013208:	1705883a 	add	r2,r2,fp
 401320c:	47000115 	stw	fp,4(r8)
 4013210:	42800015 	stw	r10,0(r8)
 4013214:	d8801c15 	stw	r2,112(sp)
 4013218:	d9001b15 	stw	r4,108(sp)
 401321c:	00c001c4 	movi	r3,7
 4013220:	19003616 	blt	r3,r4,40132fc <___vfiprintf_internal_r+0xd68>
 4013224:	42000204 	addi	r8,r8,8
 4013228:	21000044 	addi	r4,r4,1
 401322c:	003e5706 	br	4012b8c <__alt_data_end+0xfc012b8c>
 4013230:	d9402117 	ldw	r5,132(sp)
 4013234:	d9002017 	ldw	r4,128(sp)
 4013238:	d9801a04 	addi	r6,sp,104
 401323c:	d9c02b15 	stw	r7,172(sp)
 4013240:	db402a15 	stw	r13,168(sp)
 4013244:	40124800 	call	4012480 <__sprint_r.part.0>
 4013248:	d9c02b17 	ldw	r7,172(sp)
 401324c:	db402a17 	ldw	r13,168(sp)
 4013250:	1000241e 	bne	r2,zero,40132e4 <___vfiprintf_internal_r+0xd50>
 4013254:	d9401b17 	ldw	r5,108(sp)
 4013258:	d8801c17 	ldw	r2,112(sp)
 401325c:	d811883a 	mov	r8,sp
 4013260:	29000044 	addi	r4,r5,1
 4013264:	003fd806 	br	40131c8 <__alt_data_end+0xfc0131c8>
 4013268:	d9401b17 	ldw	r5,108(sp)
 401326c:	00c100b4 	movhi	r3,1026
 4013270:	18ea3904 	addi	r3,r3,-22300
 4013274:	d8c02415 	stw	r3,144(sp)
 4013278:	29400044 	addi	r5,r5,1
 401327c:	d8c02417 	ldw	r3,144(sp)
 4013280:	14c5883a 	add	r2,r2,r19
 4013284:	44c00115 	stw	r19,4(r8)
 4013288:	40c00015 	stw	r3,0(r8)
 401328c:	d8801c15 	stw	r2,112(sp)
 4013290:	d9401b15 	stw	r5,108(sp)
 4013294:	00c001c4 	movi	r3,7
 4013298:	1940070e 	bge	r3,r5,40132b8 <___vfiprintf_internal_r+0xd24>
 401329c:	103e4826 	beq	r2,zero,4012bc0 <__alt_data_end+0xfc012bc0>
 40132a0:	d9402117 	ldw	r5,132(sp)
 40132a4:	d9002017 	ldw	r4,128(sp)
 40132a8:	d9801a04 	addi	r6,sp,104
 40132ac:	40124800 	call	4012480 <__sprint_r.part.0>
 40132b0:	10000c1e 	bne	r2,zero,40132e4 <___vfiprintf_internal_r+0xd50>
 40132b4:	d8801c17 	ldw	r2,112(sp)
 40132b8:	8c80010e 	bge	r17,r18,40132c0 <___vfiprintf_internal_r+0xd2c>
 40132bc:	9023883a 	mov	r17,r18
 40132c0:	da802317 	ldw	r10,140(sp)
 40132c4:	5455883a 	add	r10,r10,r17
 40132c8:	da802315 	stw	r10,140(sp)
 40132cc:	103e4126 	beq	r2,zero,4012bd4 <__alt_data_end+0xfc012bd4>
 40132d0:	d9402117 	ldw	r5,132(sp)
 40132d4:	d9002017 	ldw	r4,128(sp)
 40132d8:	d9801a04 	addi	r6,sp,104
 40132dc:	40124800 	call	4012480 <__sprint_r.part.0>
 40132e0:	103e3c26 	beq	r2,zero,4012bd4 <__alt_data_end+0xfc012bd4>
 40132e4:	dd002117 	ldw	r20,132(sp)
 40132e8:	a080030b 	ldhu	r2,12(r20)
 40132ec:	1080100c 	andi	r2,r2,64
 40132f0:	1001231e 	bne	r2,zero,4013780 <___vfiprintf_internal_r+0x11ec>
 40132f4:	d8802317 	ldw	r2,140(sp)
 40132f8:	003d7b06 	br	40128e8 <__alt_data_end+0xfc0128e8>
 40132fc:	1000991e 	bne	r2,zero,4013564 <___vfiprintf_internal_r+0xfd0>
 4013300:	00c00044 	movi	r3,1
 4013304:	9805883a 	mov	r2,r19
 4013308:	dd400015 	stw	r21,0(sp)
 401330c:	dcc00115 	stw	r19,4(sp)
 4013310:	dcc01c15 	stw	r19,112(sp)
 4013314:	d8c01b15 	stw	r3,108(sp)
 4013318:	d811883a 	mov	r8,sp
 401331c:	42000204 	addi	r8,r8,8
 4013320:	a2c0010c 	andi	r11,r20,4
 4013324:	583fe426 	beq	r11,zero,40132b8 <__alt_data_end+0xfc0132b8>
 4013328:	8ca7c83a 	sub	r19,r17,r18
 401332c:	04ffe20e 	bge	zero,r19,40132b8 <__alt_data_end+0xfc0132b8>
 4013330:	01c00404 	movi	r7,16
 4013334:	3cffcc0e 	bge	r7,r19,4013268 <__alt_data_end+0xfc013268>
 4013338:	028100b4 	movhi	r10,1026
 401333c:	52aa3904 	addi	r10,r10,-22300
 4013340:	d9001b17 	ldw	r4,108(sp)
 4013344:	da802415 	stw	r10,144(sp)
 4013348:	382b883a 	mov	r21,r7
 401334c:	050001c4 	movi	r20,7
 4013350:	df002017 	ldw	fp,128(sp)
 4013354:	00000506 	br	401336c <___vfiprintf_internal_r+0xdd8>
 4013358:	21400084 	addi	r5,r4,2
 401335c:	42000204 	addi	r8,r8,8
 4013360:	1809883a 	mov	r4,r3
 4013364:	9cfffc04 	addi	r19,r19,-16
 4013368:	acffc40e 	bge	r21,r19,401327c <__alt_data_end+0xfc01327c>
 401336c:	10800404 	addi	r2,r2,16
 4013370:	20c00044 	addi	r3,r4,1
 4013374:	45800015 	stw	r22,0(r8)
 4013378:	45400115 	stw	r21,4(r8)
 401337c:	d8801c15 	stw	r2,112(sp)
 4013380:	d8c01b15 	stw	r3,108(sp)
 4013384:	a0fff40e 	bge	r20,r3,4013358 <__alt_data_end+0xfc013358>
 4013388:	1000041e 	bne	r2,zero,401339c <___vfiprintf_internal_r+0xe08>
 401338c:	01400044 	movi	r5,1
 4013390:	0009883a 	mov	r4,zero
 4013394:	d811883a 	mov	r8,sp
 4013398:	003ff206 	br	4013364 <__alt_data_end+0xfc013364>
 401339c:	d9402117 	ldw	r5,132(sp)
 40133a0:	d9801a04 	addi	r6,sp,104
 40133a4:	e009883a 	mov	r4,fp
 40133a8:	40124800 	call	4012480 <__sprint_r.part.0>
 40133ac:	103fcd1e 	bne	r2,zero,40132e4 <__alt_data_end+0xfc0132e4>
 40133b0:	d9001b17 	ldw	r4,108(sp)
 40133b4:	d8801c17 	ldw	r2,112(sp)
 40133b8:	d811883a 	mov	r8,sp
 40133bc:	21400044 	addi	r5,r4,1
 40133c0:	003fe806 	br	4013364 <__alt_data_end+0xfc013364>
 40133c4:	d9402117 	ldw	r5,132(sp)
 40133c8:	d9002017 	ldw	r4,128(sp)
 40133cc:	d9801a04 	addi	r6,sp,104
 40133d0:	d9c02b15 	stw	r7,172(sp)
 40133d4:	db402a15 	stw	r13,168(sp)
 40133d8:	40124800 	call	4012480 <__sprint_r.part.0>
 40133dc:	d9c02b17 	ldw	r7,172(sp)
 40133e0:	db402a17 	ldw	r13,168(sp)
 40133e4:	103fbf1e 	bne	r2,zero,40132e4 <__alt_data_end+0xfc0132e4>
 40133e8:	d9401b17 	ldw	r5,108(sp)
 40133ec:	d8801c17 	ldw	r2,112(sp)
 40133f0:	d811883a 	mov	r8,sp
 40133f4:	29800044 	addi	r6,r5,1
 40133f8:	003dc406 	br	4012b0c <__alt_data_end+0xfc012b0c>
 40133fc:	1000d21e 	bne	r2,zero,4013748 <___vfiprintf_internal_r+0x11b4>
 4013400:	d8c01d87 	ldb	r3,118(sp)
 4013404:	18009526 	beq	r3,zero,401365c <___vfiprintf_internal_r+0x10c8>
 4013408:	00800044 	movi	r2,1
 401340c:	d8c01d84 	addi	r3,sp,118
 4013410:	1009883a 	mov	r4,r2
 4013414:	d8c00015 	stw	r3,0(sp)
 4013418:	d8800115 	stw	r2,4(sp)
 401341c:	d811883a 	mov	r8,sp
 4013420:	200b883a 	mov	r5,r4
 4013424:	42000204 	addi	r8,r8,8
 4013428:	21000044 	addi	r4,r4,1
 401342c:	003d9706 	br	4012a8c <__alt_data_end+0xfc012a8c>
 4013430:	d9001d04 	addi	r4,sp,116
 4013434:	00800084 	movi	r2,2
 4013438:	d9000015 	stw	r4,0(sp)
 401343c:	d8800115 	stw	r2,4(sp)
 4013440:	1809883a 	mov	r4,r3
 4013444:	d811883a 	mov	r8,sp
 4013448:	200b883a 	mov	r5,r4
 401344c:	42000204 	addi	r8,r8,8
 4013450:	21000044 	addi	r4,r4,1
 4013454:	003f4e06 	br	4013190 <__alt_data_end+0xfc013190>
 4013458:	d8001d85 	stb	zero,118(sp)
 401345c:	48005016 	blt	r9,zero,40135a0 <___vfiprintf_internal_r+0x100c>
 4013460:	00ffdfc4 	movi	r3,-129
 4013464:	94c4b03a 	or	r2,r18,r19
 4013468:	a0e8703a 	and	r20,r20,r3
 401346c:	103d4426 	beq	r2,zero,4012980 <__alt_data_end+0xfc012980>
 4013470:	0039883a 	mov	fp,zero
 4013474:	d9002617 	ldw	r4,152(sp)
 4013478:	dd401a04 	addi	r21,sp,104
 401347c:	908003cc 	andi	r2,r18,15
 4013480:	9806973a 	slli	r3,r19,28
 4013484:	2085883a 	add	r2,r4,r2
 4013488:	9024d13a 	srli	r18,r18,4
 401348c:	10800003 	ldbu	r2,0(r2)
 4013490:	9826d13a 	srli	r19,r19,4
 4013494:	ad7fffc4 	addi	r21,r21,-1
 4013498:	1ca4b03a 	or	r18,r3,r18
 401349c:	a8800005 	stb	r2,0(r21)
 40134a0:	94c4b03a 	or	r2,r18,r19
 40134a4:	103ff51e 	bne	r2,zero,401347c <__alt_data_end+0xfc01347c>
 40134a8:	003e5906 	br	4012e10 <__alt_data_end+0xfc012e10>
 40134ac:	d9402117 	ldw	r5,132(sp)
 40134b0:	d9002017 	ldw	r4,128(sp)
 40134b4:	d9801a04 	addi	r6,sp,104
 40134b8:	40124800 	call	4012480 <__sprint_r.part.0>
 40134bc:	103f891e 	bne	r2,zero,40132e4 <__alt_data_end+0xfc0132e4>
 40134c0:	d8801c17 	ldw	r2,112(sp)
 40134c4:	d811883a 	mov	r8,sp
 40134c8:	003f9506 	br	4013320 <__alt_data_end+0xfc013320>
 40134cc:	d9402117 	ldw	r5,132(sp)
 40134d0:	d9002017 	ldw	r4,128(sp)
 40134d4:	d9801a04 	addi	r6,sp,104
 40134d8:	40124800 	call	4012480 <__sprint_r.part.0>
 40134dc:	103f811e 	bne	r2,zero,40132e4 <__alt_data_end+0xfc0132e4>
 40134e0:	d811883a 	mov	r8,sp
 40134e4:	003ced06 	br	401289c <__alt_data_end+0xfc01289c>
 40134e8:	d9402117 	ldw	r5,132(sp)
 40134ec:	d9002017 	ldw	r4,128(sp)
 40134f0:	d9801a04 	addi	r6,sp,104
 40134f4:	da402c15 	stw	r9,176(sp)
 40134f8:	db802a15 	stw	r14,168(sp)
 40134fc:	40124800 	call	4012480 <__sprint_r.part.0>
 4013500:	da402c17 	ldw	r9,176(sp)
 4013504:	db802a17 	ldw	r14,168(sp)
 4013508:	103f761e 	bne	r2,zero,40132e4 <__alt_data_end+0xfc0132e4>
 401350c:	d9401b17 	ldw	r5,108(sp)
 4013510:	d8801c17 	ldw	r2,112(sp)
 4013514:	d811883a 	mov	r8,sp
 4013518:	29000044 	addi	r4,r5,1
 401351c:	003d5b06 	br	4012a8c <__alt_data_end+0xfc012a8c>
 4013520:	d9402117 	ldw	r5,132(sp)
 4013524:	d9002017 	ldw	r4,128(sp)
 4013528:	d9801a04 	addi	r6,sp,104
 401352c:	da402c15 	stw	r9,176(sp)
 4013530:	40124800 	call	4012480 <__sprint_r.part.0>
 4013534:	da402c17 	ldw	r9,176(sp)
 4013538:	103f6a1e 	bne	r2,zero,40132e4 <__alt_data_end+0xfc0132e4>
 401353c:	d9401b17 	ldw	r5,108(sp)
 4013540:	d8801c17 	ldw	r2,112(sp)
 4013544:	d811883a 	mov	r8,sp
 4013548:	29000044 	addi	r4,r5,1
 401354c:	003f1006 	br	4013190 <__alt_data_end+0xfc013190>
 4013550:	1000c31e 	bne	r2,zero,4013860 <___vfiprintf_internal_r+0x12cc>
 4013554:	01000044 	movi	r4,1
 4013558:	000b883a 	mov	r5,zero
 401355c:	d811883a 	mov	r8,sp
 4013560:	003f0d06 	br	4013198 <__alt_data_end+0xfc013198>
 4013564:	d9402117 	ldw	r5,132(sp)
 4013568:	d9002017 	ldw	r4,128(sp)
 401356c:	d9801a04 	addi	r6,sp,104
 4013570:	40124800 	call	4012480 <__sprint_r.part.0>
 4013574:	103f5b1e 	bne	r2,zero,40132e4 <__alt_data_end+0xfc0132e4>
 4013578:	d9001b17 	ldw	r4,108(sp)
 401357c:	d8801c17 	ldw	r2,112(sp)
 4013580:	d811883a 	mov	r8,sp
 4013584:	21000044 	addi	r4,r4,1
 4013588:	003d8006 	br	4012b8c <__alt_data_end+0xfc012b8c>
 401358c:	010100b4 	movhi	r4,1026
 4013590:	2129d504 	addi	r4,r4,-22700
 4013594:	d9002615 	stw	r4,152(sp)
 4013598:	d8c02215 	stw	r3,136(sp)
 401359c:	1029883a 	mov	r20,r2
 40135a0:	94c4b03a 	or	r2,r18,r19
 40135a4:	103fb21e 	bne	r2,zero,4013470 <__alt_data_end+0xfc013470>
 40135a8:	0039883a 	mov	fp,zero
 40135ac:	00800084 	movi	r2,2
 40135b0:	003e6b06 	br	4012f60 <__alt_data_end+0xfc012f60>
 40135b4:	da802217 	ldw	r10,136(sp)
 40135b8:	d8001d85 	stb	zero,118(sp)
 40135bc:	0027883a 	mov	r19,zero
 40135c0:	50800104 	addi	r2,r10,4
 40135c4:	54800017 	ldw	r18,0(r10)
 40135c8:	483e6016 	blt	r9,zero,4012f4c <__alt_data_end+0xfc012f4c>
 40135cc:	00ffdfc4 	movi	r3,-129
 40135d0:	d8802215 	stw	r2,136(sp)
 40135d4:	a0e8703a 	and	r20,r20,r3
 40135d8:	0039883a 	mov	fp,zero
 40135dc:	903ebb26 	beq	r18,zero,40130cc <__alt_data_end+0xfc0130cc>
 40135e0:	00800244 	movi	r2,9
 40135e4:	14bdee36 	bltu	r2,r18,4012da0 <__alt_data_end+0xfc012da0>
 40135e8:	003eba06 	br	40130d4 <__alt_data_end+0xfc0130d4>
 40135ec:	00800c04 	movi	r2,48
 40135f0:	d8c01d45 	stb	r3,117(sp)
 40135f4:	d8801d05 	stb	r2,116(sp)
 40135f8:	d8001d85 	stb	zero,118(sp)
 40135fc:	a0c00094 	ori	r3,r20,2
 4013600:	4800a916 	blt	r9,zero,40138a8 <___vfiprintf_internal_r+0x1314>
 4013604:	00bfdfc4 	movi	r2,-129
 4013608:	a096703a 	and	r11,r20,r2
 401360c:	5d000094 	ori	r20,r11,2
 4013610:	0039883a 	mov	fp,zero
 4013614:	003f9706 	br	4013474 <__alt_data_end+0xfc013474>
 4013618:	8025883a 	mov	r18,r16
 401361c:	003c2e06 	br	40126d8 <__alt_data_end+0xfc0126d8>
 4013620:	008100b4 	movhi	r2,1026
 4013624:	10a9d504 	addi	r2,r2,-22700
 4013628:	0039883a 	mov	fp,zero
 401362c:	d8802615 	stw	r2,152(sp)
 4013630:	003f9006 	br	4013474 <__alt_data_end+0xfc013474>
 4013634:	04a5c83a 	sub	r18,zero,r18
 4013638:	07000b44 	movi	fp,45
 401363c:	9004c03a 	cmpne	r2,r18,zero
 4013640:	04e7c83a 	sub	r19,zero,r19
 4013644:	df001d85 	stb	fp,118(sp)
 4013648:	98a7c83a 	sub	r19,r19,r2
 401364c:	48009f16 	blt	r9,zero,40138cc <___vfiprintf_internal_r+0x1338>
 4013650:	00bfdfc4 	movi	r2,-129
 4013654:	a0a8703a 	and	r20,r20,r2
 4013658:	003dd006 	br	4012d9c <__alt_data_end+0xfc012d9c>
 401365c:	70004c26 	beq	r14,zero,4013790 <___vfiprintf_internal_r+0x11fc>
 4013660:	00800084 	movi	r2,2
 4013664:	d8c01d04 	addi	r3,sp,116
 4013668:	d8c00015 	stw	r3,0(sp)
 401366c:	d8800115 	stw	r2,4(sp)
 4013670:	01000044 	movi	r4,1
 4013674:	d811883a 	mov	r8,sp
 4013678:	003f7306 	br	4013448 <__alt_data_end+0xfc013448>
 401367c:	a080100c 	andi	r2,r20,64
 4013680:	da802217 	ldw	r10,136(sp)
 4013684:	103e0626 	beq	r2,zero,4012ea0 <__alt_data_end+0xfc012ea0>
 4013688:	5480000f 	ldh	r18,0(r10)
 401368c:	52800104 	addi	r10,r10,4
 4013690:	da802215 	stw	r10,136(sp)
 4013694:	9027d7fa 	srai	r19,r18,31
 4013698:	9805883a 	mov	r2,r19
 401369c:	003db806 	br	4012d80 <__alt_data_end+0xfc012d80>
 40136a0:	a080040c 	andi	r2,r20,16
 40136a4:	1000091e 	bne	r2,zero,40136cc <___vfiprintf_internal_r+0x1138>
 40136a8:	a2c0100c 	andi	r11,r20,64
 40136ac:	58000726 	beq	r11,zero,40136cc <___vfiprintf_internal_r+0x1138>
 40136b0:	da802217 	ldw	r10,136(sp)
 40136b4:	50800017 	ldw	r2,0(r10)
 40136b8:	52800104 	addi	r10,r10,4
 40136bc:	da802215 	stw	r10,136(sp)
 40136c0:	da802317 	ldw	r10,140(sp)
 40136c4:	1280000d 	sth	r10,0(r2)
 40136c8:	003be706 	br	4012668 <__alt_data_end+0xfc012668>
 40136cc:	da802217 	ldw	r10,136(sp)
 40136d0:	50800017 	ldw	r2,0(r10)
 40136d4:	52800104 	addi	r10,r10,4
 40136d8:	da802215 	stw	r10,136(sp)
 40136dc:	da802317 	ldw	r10,140(sp)
 40136e0:	12800015 	stw	r10,0(r2)
 40136e4:	003be006 	br	4012668 <__alt_data_end+0xfc012668>
 40136e8:	a080100c 	andi	r2,r20,64
 40136ec:	da802217 	ldw	r10,136(sp)
 40136f0:	10003026 	beq	r2,zero,40137b4 <___vfiprintf_internal_r+0x1220>
 40136f4:	5480000b 	ldhu	r18,0(r10)
 40136f8:	52800104 	addi	r10,r10,4
 40136fc:	0027883a 	mov	r19,zero
 4013700:	da802215 	stw	r10,136(sp)
 4013704:	003d8006 	br	4012d08 <__alt_data_end+0xfc012d08>
 4013708:	80c00007 	ldb	r3,0(r16)
 401370c:	003c0006 	br	4012710 <__alt_data_end+0xfc012710>
 4013710:	a080100c 	andi	r2,r20,64
 4013714:	d8001d85 	stb	zero,118(sp)
 4013718:	da802217 	ldw	r10,136(sp)
 401371c:	1000201e 	bne	r2,zero,40137a0 <___vfiprintf_internal_r+0x120c>
 4013720:	50800104 	addi	r2,r10,4
 4013724:	54800017 	ldw	r18,0(r10)
 4013728:	0027883a 	mov	r19,zero
 401372c:	483def0e 	bge	r9,zero,4012eec <__alt_data_end+0xfc012eec>
 4013730:	94c6b03a 	or	r3,r18,r19
 4013734:	d8802215 	stw	r2,136(sp)
 4013738:	183d4e1e 	bne	r3,zero,4012c74 <__alt_data_end+0xfc012c74>
 401373c:	0039883a 	mov	fp,zero
 4013740:	0005883a 	mov	r2,zero
 4013744:	003e0606 	br	4012f60 <__alt_data_end+0xfc012f60>
 4013748:	d9402117 	ldw	r5,132(sp)
 401374c:	d9002017 	ldw	r4,128(sp)
 4013750:	d9801a04 	addi	r6,sp,104
 4013754:	da402c15 	stw	r9,176(sp)
 4013758:	db802a15 	stw	r14,168(sp)
 401375c:	40124800 	call	4012480 <__sprint_r.part.0>
 4013760:	da402c17 	ldw	r9,176(sp)
 4013764:	db802a17 	ldw	r14,168(sp)
 4013768:	103ede1e 	bne	r2,zero,40132e4 <__alt_data_end+0xfc0132e4>
 401376c:	d9401b17 	ldw	r5,108(sp)
 4013770:	d8801c17 	ldw	r2,112(sp)
 4013774:	d811883a 	mov	r8,sp
 4013778:	29000044 	addi	r4,r5,1
 401377c:	003e7406 	br	4013150 <__alt_data_end+0xfc013150>
 4013780:	00bfffc4 	movi	r2,-1
 4013784:	003c5806 	br	40128e8 <__alt_data_end+0xfc0128e8>
 4013788:	d811883a 	mov	r8,sp
 401378c:	003ee806 	br	4013330 <__alt_data_end+0xfc013330>
 4013790:	000b883a 	mov	r5,zero
 4013794:	01000044 	movi	r4,1
 4013798:	d811883a 	mov	r8,sp
 401379c:	003e7c06 	br	4013190 <__alt_data_end+0xfc013190>
 40137a0:	50800104 	addi	r2,r10,4
 40137a4:	5480000b 	ldhu	r18,0(r10)
 40137a8:	0027883a 	mov	r19,zero
 40137ac:	483dcf0e 	bge	r9,zero,4012eec <__alt_data_end+0xfc012eec>
 40137b0:	003fdf06 	br	4013730 <__alt_data_end+0xfc013730>
 40137b4:	54800017 	ldw	r18,0(r10)
 40137b8:	52800104 	addi	r10,r10,4
 40137bc:	0027883a 	mov	r19,zero
 40137c0:	da802215 	stw	r10,136(sp)
 40137c4:	003d5006 	br	4012d08 <__alt_data_end+0xfc012d08>
 40137c8:	50800104 	addi	r2,r10,4
 40137cc:	5480000b 	ldhu	r18,0(r10)
 40137d0:	0027883a 	mov	r19,zero
 40137d4:	483f7d0e 	bge	r9,zero,40135cc <__alt_data_end+0xfc0135cc>
 40137d8:	003ddc06 	br	4012f4c <__alt_data_end+0xfc012f4c>
 40137dc:	d8c02215 	stw	r3,136(sp)
 40137e0:	0039883a 	mov	fp,zero
 40137e4:	003ddb06 	br	4012f54 <__alt_data_end+0xfc012f54>
 40137e8:	028100b4 	movhi	r10,1026
 40137ec:	52aa3504 	addi	r10,r10,-22316
 40137f0:	da802415 	stw	r10,144(sp)
 40137f4:	003e8306 	br	4013204 <__alt_data_end+0xfc013204>
 40137f8:	d8801c17 	ldw	r2,112(sp)
 40137fc:	dd002117 	ldw	r20,132(sp)
 4013800:	103eb926 	beq	r2,zero,40132e8 <__alt_data_end+0xfc0132e8>
 4013804:	d9002017 	ldw	r4,128(sp)
 4013808:	d9801a04 	addi	r6,sp,104
 401380c:	a00b883a 	mov	r5,r20
 4013810:	40124800 	call	4012480 <__sprint_r.part.0>
 4013814:	003eb406 	br	40132e8 <__alt_data_end+0xfc0132e8>
 4013818:	80c00043 	ldbu	r3,1(r16)
 401381c:	a5000814 	ori	r20,r20,32
 4013820:	84000044 	addi	r16,r16,1
 4013824:	18c03fcc 	andi	r3,r3,255
 4013828:	18c0201c 	xori	r3,r3,128
 401382c:	18ffe004 	addi	r3,r3,-128
 4013830:	003bb706 	br	4012710 <__alt_data_end+0xfc012710>
 4013834:	a809883a 	mov	r4,r21
 4013838:	d8c02a15 	stw	r3,168(sp)
 401383c:	da002b15 	stw	r8,172(sp)
 4013840:	400ba8c0 	call	400ba8c <strlen>
 4013844:	d8c02a17 	ldw	r3,168(sp)
 4013848:	1027883a 	mov	r19,r2
 401384c:	df001d83 	ldbu	fp,118(sp)
 4013850:	d8c02215 	stw	r3,136(sp)
 4013854:	0013883a 	mov	r9,zero
 4013858:	da002b17 	ldw	r8,172(sp)
 401385c:	003c4d06 	br	4012994 <__alt_data_end+0xfc012994>
 4013860:	d9402117 	ldw	r5,132(sp)
 4013864:	d9002017 	ldw	r4,128(sp)
 4013868:	d9801a04 	addi	r6,sp,104
 401386c:	da402c15 	stw	r9,176(sp)
 4013870:	40124800 	call	4012480 <__sprint_r.part.0>
 4013874:	da402c17 	ldw	r9,176(sp)
 4013878:	103e9a1e 	bne	r2,zero,40132e4 <__alt_data_end+0xfc0132e4>
 401387c:	d9401b17 	ldw	r5,108(sp)
 4013880:	d8801c17 	ldw	r2,112(sp)
 4013884:	d811883a 	mov	r8,sp
 4013888:	29000044 	addi	r4,r5,1
 401388c:	003e4206 	br	4013198 <__alt_data_end+0xfc013198>
 4013890:	d9401b17 	ldw	r5,108(sp)
 4013894:	010100b4 	movhi	r4,1026
 4013898:	212a3904 	addi	r4,r4,-22300
 401389c:	d9002415 	stw	r4,144(sp)
 40138a0:	29400044 	addi	r5,r5,1
 40138a4:	003c6d06 	br	4012a5c <__alt_data_end+0xfc012a5c>
 40138a8:	0039883a 	mov	fp,zero
 40138ac:	00800084 	movi	r2,2
 40138b0:	10803fcc 	andi	r2,r2,255
 40138b4:	01000044 	movi	r4,1
 40138b8:	11001e26 	beq	r2,r4,4013934 <___vfiprintf_internal_r+0x13a0>
 40138bc:	01000084 	movi	r4,2
 40138c0:	11001e1e 	bne	r2,r4,401393c <___vfiprintf_internal_r+0x13a8>
 40138c4:	1829883a 	mov	r20,r3
 40138c8:	003eea06 	br	4013474 <__alt_data_end+0xfc013474>
 40138cc:	a007883a 	mov	r3,r20
 40138d0:	00800044 	movi	r2,1
 40138d4:	003ff606 	br	40138b0 <__alt_data_end+0xfc0138b0>
 40138d8:	00800184 	movi	r2,6
 40138dc:	1240012e 	bgeu	r2,r9,40138e4 <___vfiprintf_internal_r+0x1350>
 40138e0:	1013883a 	mov	r9,r2
 40138e4:	4827883a 	mov	r19,r9
 40138e8:	4825883a 	mov	r18,r9
 40138ec:	48001516 	blt	r9,zero,4013944 <___vfiprintf_internal_r+0x13b0>
 40138f0:	054100b4 	movhi	r21,1026
 40138f4:	d8c02215 	stw	r3,136(sp)
 40138f8:	ad69da04 	addi	r21,r21,-22680
 40138fc:	003d1406 	br	4012d50 <__alt_data_end+0xfc012d50>
 4013900:	028100b4 	movhi	r10,1026
 4013904:	52aa3504 	addi	r10,r10,-22316
 4013908:	da802415 	stw	r10,144(sp)
 401390c:	200d883a 	mov	r6,r4
 4013910:	003c9106 	br	4012b58 <__alt_data_end+0xfc012b58>
 4013914:	5021883a 	mov	r16,r10
 4013918:	0013883a 	mov	r9,zero
 401391c:	003b7d06 	br	4012714 <__alt_data_end+0xfc012714>
 4013920:	4827883a 	mov	r19,r9
 4013924:	df001d83 	ldbu	fp,118(sp)
 4013928:	d8c02215 	stw	r3,136(sp)
 401392c:	0013883a 	mov	r9,zero
 4013930:	003c1806 	br	4012994 <__alt_data_end+0xfc012994>
 4013934:	1829883a 	mov	r20,r3
 4013938:	003d1806 	br	4012d9c <__alt_data_end+0xfc012d9c>
 401393c:	1829883a 	mov	r20,r3
 4013940:	003ccd06 	br	4012c78 <__alt_data_end+0xfc012c78>
 4013944:	0025883a 	mov	r18,zero
 4013948:	003fe906 	br	40138f0 <__alt_data_end+0xfc0138f0>
 401394c:	d8802217 	ldw	r2,136(sp)
 4013950:	80c00043 	ldbu	r3,1(r16)
 4013954:	5021883a 	mov	r16,r10
 4013958:	12400017 	ldw	r9,0(r2)
 401395c:	10800104 	addi	r2,r2,4
 4013960:	d8802215 	stw	r2,136(sp)
 4013964:	483faf0e 	bge	r9,zero,4013824 <__alt_data_end+0xfc013824>
 4013968:	18c03fcc 	andi	r3,r3,255
 401396c:	18c0201c 	xori	r3,r3,128
 4013970:	027fffc4 	movi	r9,-1
 4013974:	18ffe004 	addi	r3,r3,-128
 4013978:	003b6506 	br	4012710 <__alt_data_end+0xfc012710>
 401397c:	d9c01d85 	stb	r7,118(sp)
 4013980:	003ca006 	br	4012c04 <__alt_data_end+0xfc012c04>
 4013984:	d9c01d85 	stb	r7,118(sp)
 4013988:	003cad06 	br	4012c40 <__alt_data_end+0xfc012c40>
 401398c:	d9c01d85 	stb	r7,118(sp)
 4013990:	003d7d06 	br	4012f88 <__alt_data_end+0xfc012f88>
 4013994:	d9c01d85 	stb	r7,118(sp)
 4013998:	003d5f06 	br	4012f18 <__alt_data_end+0xfc012f18>
 401399c:	a080004c 	andi	r2,r20,1
 40139a0:	0039883a 	mov	fp,zero
 40139a4:	10000526 	beq	r2,zero,40139bc <___vfiprintf_internal_r+0x1428>
 40139a8:	00800c04 	movi	r2,48
 40139ac:	d88019c5 	stb	r2,103(sp)
 40139b0:	dcc02717 	ldw	r19,156(sp)
 40139b4:	dd4019c4 	addi	r21,sp,103
 40139b8:	003bf606 	br	4012994 <__alt_data_end+0xfc012994>
 40139bc:	0027883a 	mov	r19,zero
 40139c0:	dd401a04 	addi	r21,sp,104
 40139c4:	003bf306 	br	4012994 <__alt_data_end+0xfc012994>
 40139c8:	d9c01d85 	stb	r7,118(sp)
 40139cc:	003dc806 	br	40130f0 <__alt_data_end+0xfc0130f0>
 40139d0:	d9c01d85 	stb	r7,118(sp)
 40139d4:	003d3a06 	br	4012ec0 <__alt_data_end+0xfc012ec0>
 40139d8:	d9c01d85 	stb	r7,118(sp)
 40139dc:	003d2a06 	br	4012e88 <__alt_data_end+0xfc012e88>
 40139e0:	d9c01d85 	stb	r7,118(sp)
 40139e4:	003cde06 	br	4012d60 <__alt_data_end+0xfc012d60>
 40139e8:	d9c01d85 	stb	r7,118(sp)
 40139ec:	003cbc06 	br	4012ce0 <__alt_data_end+0xfc012ce0>

040139f0 <__vfiprintf_internal>:
 40139f0:	008100b4 	movhi	r2,1026
 40139f4:	1086e904 	addi	r2,r2,7076
 40139f8:	300f883a 	mov	r7,r6
 40139fc:	280d883a 	mov	r6,r5
 4013a00:	200b883a 	mov	r5,r4
 4013a04:	11000017 	ldw	r4,0(r2)
 4013a08:	40125941 	jmpi	4012594 <___vfiprintf_internal_r>

04013a0c <__sbprintf>:
 4013a0c:	2880030b 	ldhu	r2,12(r5)
 4013a10:	2ac01917 	ldw	r11,100(r5)
 4013a14:	2a80038b 	ldhu	r10,14(r5)
 4013a18:	2a400717 	ldw	r9,28(r5)
 4013a1c:	2a000917 	ldw	r8,36(r5)
 4013a20:	defee204 	addi	sp,sp,-1144
 4013a24:	00c10004 	movi	r3,1024
 4013a28:	dc011a15 	stw	r16,1128(sp)
 4013a2c:	10bfff4c 	andi	r2,r2,65533
 4013a30:	2821883a 	mov	r16,r5
 4013a34:	d8cb883a 	add	r5,sp,r3
 4013a38:	dc811c15 	stw	r18,1136(sp)
 4013a3c:	dc411b15 	stw	r17,1132(sp)
 4013a40:	dfc11d15 	stw	ra,1140(sp)
 4013a44:	2025883a 	mov	r18,r4
 4013a48:	d881030d 	sth	r2,1036(sp)
 4013a4c:	dac11915 	stw	r11,1124(sp)
 4013a50:	da81038d 	sth	r10,1038(sp)
 4013a54:	da410715 	stw	r9,1052(sp)
 4013a58:	da010915 	stw	r8,1060(sp)
 4013a5c:	dec10015 	stw	sp,1024(sp)
 4013a60:	dec10415 	stw	sp,1040(sp)
 4013a64:	d8c10215 	stw	r3,1032(sp)
 4013a68:	d8c10515 	stw	r3,1044(sp)
 4013a6c:	d8010615 	stw	zero,1048(sp)
 4013a70:	40125940 	call	4012594 <___vfiprintf_internal_r>
 4013a74:	1023883a 	mov	r17,r2
 4013a78:	10000416 	blt	r2,zero,4013a8c <__sbprintf+0x80>
 4013a7c:	d9410004 	addi	r5,sp,1024
 4013a80:	9009883a 	mov	r4,r18
 4013a84:	400f9f40 	call	400f9f4 <_fflush_r>
 4013a88:	10000d1e 	bne	r2,zero,4013ac0 <__sbprintf+0xb4>
 4013a8c:	d881030b 	ldhu	r2,1036(sp)
 4013a90:	1080100c 	andi	r2,r2,64
 4013a94:	10000326 	beq	r2,zero,4013aa4 <__sbprintf+0x98>
 4013a98:	8080030b 	ldhu	r2,12(r16)
 4013a9c:	10801014 	ori	r2,r2,64
 4013aa0:	8080030d 	sth	r2,12(r16)
 4013aa4:	8805883a 	mov	r2,r17
 4013aa8:	dfc11d17 	ldw	ra,1140(sp)
 4013aac:	dc811c17 	ldw	r18,1136(sp)
 4013ab0:	dc411b17 	ldw	r17,1132(sp)
 4013ab4:	dc011a17 	ldw	r16,1128(sp)
 4013ab8:	dec11e04 	addi	sp,sp,1144
 4013abc:	f800283a 	ret
 4013ac0:	047fffc4 	movi	r17,-1
 4013ac4:	003ff106 	br	4013a8c <__alt_data_end+0xfc013a8c>

04013ac8 <_write_r>:
 4013ac8:	defffd04 	addi	sp,sp,-12
 4013acc:	2805883a 	mov	r2,r5
 4013ad0:	dc000015 	stw	r16,0(sp)
 4013ad4:	040100f4 	movhi	r16,1027
 4013ad8:	dc400115 	stw	r17,4(sp)
 4013adc:	300b883a 	mov	r5,r6
 4013ae0:	84237f04 	addi	r16,r16,-29188
 4013ae4:	2023883a 	mov	r17,r4
 4013ae8:	380d883a 	mov	r6,r7
 4013aec:	1009883a 	mov	r4,r2
 4013af0:	dfc00215 	stw	ra,8(sp)
 4013af4:	80000015 	stw	zero,0(r16)
 4013af8:	40180040 	call	4018004 <write>
 4013afc:	00ffffc4 	movi	r3,-1
 4013b00:	10c00526 	beq	r2,r3,4013b18 <_write_r+0x50>
 4013b04:	dfc00217 	ldw	ra,8(sp)
 4013b08:	dc400117 	ldw	r17,4(sp)
 4013b0c:	dc000017 	ldw	r16,0(sp)
 4013b10:	dec00304 	addi	sp,sp,12
 4013b14:	f800283a 	ret
 4013b18:	80c00017 	ldw	r3,0(r16)
 4013b1c:	183ff926 	beq	r3,zero,4013b04 <__alt_data_end+0xfc013b04>
 4013b20:	88c00015 	stw	r3,0(r17)
 4013b24:	003ff706 	br	4013b04 <__alt_data_end+0xfc013b04>

04013b28 <_close_r>:
 4013b28:	defffd04 	addi	sp,sp,-12
 4013b2c:	dc000015 	stw	r16,0(sp)
 4013b30:	040100f4 	movhi	r16,1027
 4013b34:	dc400115 	stw	r17,4(sp)
 4013b38:	84237f04 	addi	r16,r16,-29188
 4013b3c:	2023883a 	mov	r17,r4
 4013b40:	2809883a 	mov	r4,r5
 4013b44:	dfc00215 	stw	ra,8(sp)
 4013b48:	80000015 	stw	zero,0(r16)
 4013b4c:	40175500 	call	4017550 <close>
 4013b50:	00ffffc4 	movi	r3,-1
 4013b54:	10c00526 	beq	r2,r3,4013b6c <_close_r+0x44>
 4013b58:	dfc00217 	ldw	ra,8(sp)
 4013b5c:	dc400117 	ldw	r17,4(sp)
 4013b60:	dc000017 	ldw	r16,0(sp)
 4013b64:	dec00304 	addi	sp,sp,12
 4013b68:	f800283a 	ret
 4013b6c:	80c00017 	ldw	r3,0(r16)
 4013b70:	183ff926 	beq	r3,zero,4013b58 <__alt_data_end+0xfc013b58>
 4013b74:	88c00015 	stw	r3,0(r17)
 4013b78:	003ff706 	br	4013b58 <__alt_data_end+0xfc013b58>

04013b7c <_calloc_r>:
 4013b7c:	298b383a 	mul	r5,r5,r6
 4013b80:	defffe04 	addi	sp,sp,-8
 4013b84:	dfc00115 	stw	ra,4(sp)
 4013b88:	dc000015 	stw	r16,0(sp)
 4013b8c:	400aa200 	call	400aa20 <_malloc_r>
 4013b90:	10002926 	beq	r2,zero,4013c38 <_calloc_r+0xbc>
 4013b94:	11bfff17 	ldw	r6,-4(r2)
 4013b98:	1021883a 	mov	r16,r2
 4013b9c:	00bfff04 	movi	r2,-4
 4013ba0:	308c703a 	and	r6,r6,r2
 4013ba4:	00c00904 	movi	r3,36
 4013ba8:	308d883a 	add	r6,r6,r2
 4013bac:	19801636 	bltu	r3,r6,4013c08 <_calloc_r+0x8c>
 4013bb0:	008004c4 	movi	r2,19
 4013bb4:	11800b2e 	bgeu	r2,r6,4013be4 <_calloc_r+0x68>
 4013bb8:	80000015 	stw	zero,0(r16)
 4013bbc:	80000115 	stw	zero,4(r16)
 4013bc0:	008006c4 	movi	r2,27
 4013bc4:	11801a2e 	bgeu	r2,r6,4013c30 <_calloc_r+0xb4>
 4013bc8:	80000215 	stw	zero,8(r16)
 4013bcc:	80000315 	stw	zero,12(r16)
 4013bd0:	30c0151e 	bne	r6,r3,4013c28 <_calloc_r+0xac>
 4013bd4:	80000415 	stw	zero,16(r16)
 4013bd8:	80800604 	addi	r2,r16,24
 4013bdc:	80000515 	stw	zero,20(r16)
 4013be0:	00000106 	br	4013be8 <_calloc_r+0x6c>
 4013be4:	8005883a 	mov	r2,r16
 4013be8:	10000015 	stw	zero,0(r2)
 4013bec:	10000115 	stw	zero,4(r2)
 4013bf0:	10000215 	stw	zero,8(r2)
 4013bf4:	8005883a 	mov	r2,r16
 4013bf8:	dfc00117 	ldw	ra,4(sp)
 4013bfc:	dc000017 	ldw	r16,0(sp)
 4013c00:	dec00204 	addi	sp,sp,8
 4013c04:	f800283a 	ret
 4013c08:	000b883a 	mov	r5,zero
 4013c0c:	8009883a 	mov	r4,r16
 4013c10:	400b3f00 	call	400b3f0 <memset>
 4013c14:	8005883a 	mov	r2,r16
 4013c18:	dfc00117 	ldw	ra,4(sp)
 4013c1c:	dc000017 	ldw	r16,0(sp)
 4013c20:	dec00204 	addi	sp,sp,8
 4013c24:	f800283a 	ret
 4013c28:	80800404 	addi	r2,r16,16
 4013c2c:	003fee06 	br	4013be8 <__alt_data_end+0xfc013be8>
 4013c30:	80800204 	addi	r2,r16,8
 4013c34:	003fec06 	br	4013be8 <__alt_data_end+0xfc013be8>
 4013c38:	0005883a 	mov	r2,zero
 4013c3c:	003fee06 	br	4013bf8 <__alt_data_end+0xfc013bf8>

04013c40 <_fclose_r>:
 4013c40:	28003926 	beq	r5,zero,4013d28 <_fclose_r+0xe8>
 4013c44:	defffc04 	addi	sp,sp,-16
 4013c48:	dc400115 	stw	r17,4(sp)
 4013c4c:	dc000015 	stw	r16,0(sp)
 4013c50:	dfc00315 	stw	ra,12(sp)
 4013c54:	dc800215 	stw	r18,8(sp)
 4013c58:	2023883a 	mov	r17,r4
 4013c5c:	2821883a 	mov	r16,r5
 4013c60:	20000226 	beq	r4,zero,4013c6c <_fclose_r+0x2c>
 4013c64:	20800e17 	ldw	r2,56(r4)
 4013c68:	10002726 	beq	r2,zero,4013d08 <_fclose_r+0xc8>
 4013c6c:	8080030f 	ldh	r2,12(r16)
 4013c70:	1000071e 	bne	r2,zero,4013c90 <_fclose_r+0x50>
 4013c74:	0005883a 	mov	r2,zero
 4013c78:	dfc00317 	ldw	ra,12(sp)
 4013c7c:	dc800217 	ldw	r18,8(sp)
 4013c80:	dc400117 	ldw	r17,4(sp)
 4013c84:	dc000017 	ldw	r16,0(sp)
 4013c88:	dec00404 	addi	sp,sp,16
 4013c8c:	f800283a 	ret
 4013c90:	800b883a 	mov	r5,r16
 4013c94:	8809883a 	mov	r4,r17
 4013c98:	400f7d80 	call	400f7d8 <__sflush_r>
 4013c9c:	1025883a 	mov	r18,r2
 4013ca0:	80800b17 	ldw	r2,44(r16)
 4013ca4:	10000426 	beq	r2,zero,4013cb8 <_fclose_r+0x78>
 4013ca8:	81400717 	ldw	r5,28(r16)
 4013cac:	8809883a 	mov	r4,r17
 4013cb0:	103ee83a 	callr	r2
 4013cb4:	10001616 	blt	r2,zero,4013d10 <_fclose_r+0xd0>
 4013cb8:	8080030b 	ldhu	r2,12(r16)
 4013cbc:	1080200c 	andi	r2,r2,128
 4013cc0:	1000151e 	bne	r2,zero,4013d18 <_fclose_r+0xd8>
 4013cc4:	81400c17 	ldw	r5,48(r16)
 4013cc8:	28000526 	beq	r5,zero,4013ce0 <_fclose_r+0xa0>
 4013ccc:	80801004 	addi	r2,r16,64
 4013cd0:	28800226 	beq	r5,r2,4013cdc <_fclose_r+0x9c>
 4013cd4:	8809883a 	mov	r4,r17
 4013cd8:	400ff440 	call	400ff44 <_free_r>
 4013cdc:	80000c15 	stw	zero,48(r16)
 4013ce0:	81401117 	ldw	r5,68(r16)
 4013ce4:	28000326 	beq	r5,zero,4013cf4 <_fclose_r+0xb4>
 4013ce8:	8809883a 	mov	r4,r17
 4013cec:	400ff440 	call	400ff44 <_free_r>
 4013cf0:	80001115 	stw	zero,68(r16)
 4013cf4:	400fde00 	call	400fde0 <__sfp_lock_acquire>
 4013cf8:	8000030d 	sth	zero,12(r16)
 4013cfc:	400fde40 	call	400fde4 <__sfp_lock_release>
 4013d00:	9005883a 	mov	r2,r18
 4013d04:	003fdc06 	br	4013c78 <__alt_data_end+0xfc013c78>
 4013d08:	400fdd00 	call	400fdd0 <__sinit>
 4013d0c:	003fd706 	br	4013c6c <__alt_data_end+0xfc013c6c>
 4013d10:	04bfffc4 	movi	r18,-1
 4013d14:	003fe806 	br	4013cb8 <__alt_data_end+0xfc013cb8>
 4013d18:	81400417 	ldw	r5,16(r16)
 4013d1c:	8809883a 	mov	r4,r17
 4013d20:	400ff440 	call	400ff44 <_free_r>
 4013d24:	003fe706 	br	4013cc4 <__alt_data_end+0xfc013cc4>
 4013d28:	0005883a 	mov	r2,zero
 4013d2c:	f800283a 	ret

04013d30 <fclose>:
 4013d30:	008100b4 	movhi	r2,1026
 4013d34:	1086e904 	addi	r2,r2,7076
 4013d38:	200b883a 	mov	r5,r4
 4013d3c:	11000017 	ldw	r4,0(r2)
 4013d40:	4013c401 	jmpi	4013c40 <_fclose_r>

04013d44 <__fputwc>:
 4013d44:	defff804 	addi	sp,sp,-32
 4013d48:	dcc00415 	stw	r19,16(sp)
 4013d4c:	dc800315 	stw	r18,12(sp)
 4013d50:	dc000115 	stw	r16,4(sp)
 4013d54:	dfc00715 	stw	ra,28(sp)
 4013d58:	dd400615 	stw	r21,24(sp)
 4013d5c:	dd000515 	stw	r20,20(sp)
 4013d60:	dc400215 	stw	r17,8(sp)
 4013d64:	2027883a 	mov	r19,r4
 4013d68:	2825883a 	mov	r18,r5
 4013d6c:	3021883a 	mov	r16,r6
 4013d70:	40109200 	call	4010920 <__locale_mb_cur_max>
 4013d74:	00c00044 	movi	r3,1
 4013d78:	10c03e26 	beq	r2,r3,4013e74 <__fputwc+0x130>
 4013d7c:	81c01704 	addi	r7,r16,92
 4013d80:	900d883a 	mov	r6,r18
 4013d84:	d80b883a 	mov	r5,sp
 4013d88:	9809883a 	mov	r4,r19
 4013d8c:	40142140 	call	4014214 <_wcrtomb_r>
 4013d90:	1029883a 	mov	r20,r2
 4013d94:	00bfffc4 	movi	r2,-1
 4013d98:	a0802026 	beq	r20,r2,4013e1c <__fputwc+0xd8>
 4013d9c:	d9400003 	ldbu	r5,0(sp)
 4013da0:	a0001c26 	beq	r20,zero,4013e14 <__fputwc+0xd0>
 4013da4:	0023883a 	mov	r17,zero
 4013da8:	05400284 	movi	r21,10
 4013dac:	00000906 	br	4013dd4 <__fputwc+0x90>
 4013db0:	80800017 	ldw	r2,0(r16)
 4013db4:	11400005 	stb	r5,0(r2)
 4013db8:	80c00017 	ldw	r3,0(r16)
 4013dbc:	18c00044 	addi	r3,r3,1
 4013dc0:	80c00015 	stw	r3,0(r16)
 4013dc4:	8c400044 	addi	r17,r17,1
 4013dc8:	dc45883a 	add	r2,sp,r17
 4013dcc:	8d00112e 	bgeu	r17,r20,4013e14 <__fputwc+0xd0>
 4013dd0:	11400003 	ldbu	r5,0(r2)
 4013dd4:	80c00217 	ldw	r3,8(r16)
 4013dd8:	18ffffc4 	addi	r3,r3,-1
 4013ddc:	80c00215 	stw	r3,8(r16)
 4013de0:	183ff30e 	bge	r3,zero,4013db0 <__alt_data_end+0xfc013db0>
 4013de4:	80800617 	ldw	r2,24(r16)
 4013de8:	18801916 	blt	r3,r2,4013e50 <__fputwc+0x10c>
 4013dec:	80800017 	ldw	r2,0(r16)
 4013df0:	11400005 	stb	r5,0(r2)
 4013df4:	80800017 	ldw	r2,0(r16)
 4013df8:	10c00003 	ldbu	r3,0(r2)
 4013dfc:	10800044 	addi	r2,r2,1
 4013e00:	1d402326 	beq	r3,r21,4013e90 <__fputwc+0x14c>
 4013e04:	80800015 	stw	r2,0(r16)
 4013e08:	8c400044 	addi	r17,r17,1
 4013e0c:	dc45883a 	add	r2,sp,r17
 4013e10:	8d3fef36 	bltu	r17,r20,4013dd0 <__alt_data_end+0xfc013dd0>
 4013e14:	9005883a 	mov	r2,r18
 4013e18:	00000406 	br	4013e2c <__fputwc+0xe8>
 4013e1c:	80c0030b 	ldhu	r3,12(r16)
 4013e20:	a005883a 	mov	r2,r20
 4013e24:	18c01014 	ori	r3,r3,64
 4013e28:	80c0030d 	sth	r3,12(r16)
 4013e2c:	dfc00717 	ldw	ra,28(sp)
 4013e30:	dd400617 	ldw	r21,24(sp)
 4013e34:	dd000517 	ldw	r20,20(sp)
 4013e38:	dcc00417 	ldw	r19,16(sp)
 4013e3c:	dc800317 	ldw	r18,12(sp)
 4013e40:	dc400217 	ldw	r17,8(sp)
 4013e44:	dc000117 	ldw	r16,4(sp)
 4013e48:	dec00804 	addi	sp,sp,32
 4013e4c:	f800283a 	ret
 4013e50:	800d883a 	mov	r6,r16
 4013e54:	29403fcc 	andi	r5,r5,255
 4013e58:	9809883a 	mov	r4,r19
 4013e5c:	40140bc0 	call	40140bc <__swbuf_r>
 4013e60:	10bfffe0 	cmpeqi	r2,r2,-1
 4013e64:	10803fcc 	andi	r2,r2,255
 4013e68:	103fd626 	beq	r2,zero,4013dc4 <__alt_data_end+0xfc013dc4>
 4013e6c:	00bfffc4 	movi	r2,-1
 4013e70:	003fee06 	br	4013e2c <__alt_data_end+0xfc013e2c>
 4013e74:	90ffffc4 	addi	r3,r18,-1
 4013e78:	01003f84 	movi	r4,254
 4013e7c:	20ffbf36 	bltu	r4,r3,4013d7c <__alt_data_end+0xfc013d7c>
 4013e80:	900b883a 	mov	r5,r18
 4013e84:	dc800005 	stb	r18,0(sp)
 4013e88:	1029883a 	mov	r20,r2
 4013e8c:	003fc506 	br	4013da4 <__alt_data_end+0xfc013da4>
 4013e90:	800d883a 	mov	r6,r16
 4013e94:	a80b883a 	mov	r5,r21
 4013e98:	9809883a 	mov	r4,r19
 4013e9c:	40140bc0 	call	40140bc <__swbuf_r>
 4013ea0:	10bfffe0 	cmpeqi	r2,r2,-1
 4013ea4:	003fef06 	br	4013e64 <__alt_data_end+0xfc013e64>

04013ea8 <_fputwc_r>:
 4013ea8:	3080030b 	ldhu	r2,12(r6)
 4013eac:	10c8000c 	andi	r3,r2,8192
 4013eb0:	1800051e 	bne	r3,zero,4013ec8 <_fputwc_r+0x20>
 4013eb4:	30c01917 	ldw	r3,100(r6)
 4013eb8:	10880014 	ori	r2,r2,8192
 4013ebc:	3080030d 	sth	r2,12(r6)
 4013ec0:	18880014 	ori	r2,r3,8192
 4013ec4:	30801915 	stw	r2,100(r6)
 4013ec8:	4013d441 	jmpi	4013d44 <__fputwc>

04013ecc <fputwc>:
 4013ecc:	008100b4 	movhi	r2,1026
 4013ed0:	defffc04 	addi	sp,sp,-16
 4013ed4:	1086e904 	addi	r2,r2,7076
 4013ed8:	dc000115 	stw	r16,4(sp)
 4013edc:	14000017 	ldw	r16,0(r2)
 4013ee0:	dc400215 	stw	r17,8(sp)
 4013ee4:	dfc00315 	stw	ra,12(sp)
 4013ee8:	2023883a 	mov	r17,r4
 4013eec:	80000226 	beq	r16,zero,4013ef8 <fputwc+0x2c>
 4013ef0:	80800e17 	ldw	r2,56(r16)
 4013ef4:	10001026 	beq	r2,zero,4013f38 <fputwc+0x6c>
 4013ef8:	2880030b 	ldhu	r2,12(r5)
 4013efc:	10c8000c 	andi	r3,r2,8192
 4013f00:	1800051e 	bne	r3,zero,4013f18 <fputwc+0x4c>
 4013f04:	28c01917 	ldw	r3,100(r5)
 4013f08:	10880014 	ori	r2,r2,8192
 4013f0c:	2880030d 	sth	r2,12(r5)
 4013f10:	18880014 	ori	r2,r3,8192
 4013f14:	28801915 	stw	r2,100(r5)
 4013f18:	280d883a 	mov	r6,r5
 4013f1c:	8009883a 	mov	r4,r16
 4013f20:	880b883a 	mov	r5,r17
 4013f24:	dfc00317 	ldw	ra,12(sp)
 4013f28:	dc400217 	ldw	r17,8(sp)
 4013f2c:	dc000117 	ldw	r16,4(sp)
 4013f30:	dec00404 	addi	sp,sp,16
 4013f34:	4013d441 	jmpi	4013d44 <__fputwc>
 4013f38:	8009883a 	mov	r4,r16
 4013f3c:	d9400015 	stw	r5,0(sp)
 4013f40:	400fdd00 	call	400fdd0 <__sinit>
 4013f44:	d9400017 	ldw	r5,0(sp)
 4013f48:	003feb06 	br	4013ef8 <__alt_data_end+0xfc013ef8>

04013f4c <_fstat_r>:
 4013f4c:	defffd04 	addi	sp,sp,-12
 4013f50:	2805883a 	mov	r2,r5
 4013f54:	dc000015 	stw	r16,0(sp)
 4013f58:	040100f4 	movhi	r16,1027
 4013f5c:	dc400115 	stw	r17,4(sp)
 4013f60:	84237f04 	addi	r16,r16,-29188
 4013f64:	2023883a 	mov	r17,r4
 4013f68:	300b883a 	mov	r5,r6
 4013f6c:	1009883a 	mov	r4,r2
 4013f70:	dfc00215 	stw	ra,8(sp)
 4013f74:	80000015 	stw	zero,0(r16)
 4013f78:	40176bc0 	call	40176bc <fstat>
 4013f7c:	00ffffc4 	movi	r3,-1
 4013f80:	10c00526 	beq	r2,r3,4013f98 <_fstat_r+0x4c>
 4013f84:	dfc00217 	ldw	ra,8(sp)
 4013f88:	dc400117 	ldw	r17,4(sp)
 4013f8c:	dc000017 	ldw	r16,0(sp)
 4013f90:	dec00304 	addi	sp,sp,12
 4013f94:	f800283a 	ret
 4013f98:	80c00017 	ldw	r3,0(r16)
 4013f9c:	183ff926 	beq	r3,zero,4013f84 <__alt_data_end+0xfc013f84>
 4013fa0:	88c00015 	stw	r3,0(r17)
 4013fa4:	003ff706 	br	4013f84 <__alt_data_end+0xfc013f84>

04013fa8 <_isatty_r>:
 4013fa8:	defffd04 	addi	sp,sp,-12
 4013fac:	dc000015 	stw	r16,0(sp)
 4013fb0:	040100f4 	movhi	r16,1027
 4013fb4:	dc400115 	stw	r17,4(sp)
 4013fb8:	84237f04 	addi	r16,r16,-29188
 4013fbc:	2023883a 	mov	r17,r4
 4013fc0:	2809883a 	mov	r4,r5
 4013fc4:	dfc00215 	stw	ra,8(sp)
 4013fc8:	80000015 	stw	zero,0(r16)
 4013fcc:	40177c80 	call	40177c8 <isatty>
 4013fd0:	00ffffc4 	movi	r3,-1
 4013fd4:	10c00526 	beq	r2,r3,4013fec <_isatty_r+0x44>
 4013fd8:	dfc00217 	ldw	ra,8(sp)
 4013fdc:	dc400117 	ldw	r17,4(sp)
 4013fe0:	dc000017 	ldw	r16,0(sp)
 4013fe4:	dec00304 	addi	sp,sp,12
 4013fe8:	f800283a 	ret
 4013fec:	80c00017 	ldw	r3,0(r16)
 4013ff0:	183ff926 	beq	r3,zero,4013fd8 <__alt_data_end+0xfc013fd8>
 4013ff4:	88c00015 	stw	r3,0(r17)
 4013ff8:	003ff706 	br	4013fd8 <__alt_data_end+0xfc013fd8>

04013ffc <_lseek_r>:
 4013ffc:	defffd04 	addi	sp,sp,-12
 4014000:	2805883a 	mov	r2,r5
 4014004:	dc000015 	stw	r16,0(sp)
 4014008:	040100f4 	movhi	r16,1027
 401400c:	dc400115 	stw	r17,4(sp)
 4014010:	300b883a 	mov	r5,r6
 4014014:	84237f04 	addi	r16,r16,-29188
 4014018:	2023883a 	mov	r17,r4
 401401c:	380d883a 	mov	r6,r7
 4014020:	1009883a 	mov	r4,r2
 4014024:	dfc00215 	stw	ra,8(sp)
 4014028:	80000015 	stw	zero,0(r16)
 401402c:	4017b000 	call	4017b00 <lseek>
 4014030:	00ffffc4 	movi	r3,-1
 4014034:	10c00526 	beq	r2,r3,401404c <_lseek_r+0x50>
 4014038:	dfc00217 	ldw	ra,8(sp)
 401403c:	dc400117 	ldw	r17,4(sp)
 4014040:	dc000017 	ldw	r16,0(sp)
 4014044:	dec00304 	addi	sp,sp,12
 4014048:	f800283a 	ret
 401404c:	80c00017 	ldw	r3,0(r16)
 4014050:	183ff926 	beq	r3,zero,4014038 <__alt_data_end+0xfc014038>
 4014054:	88c00015 	stw	r3,0(r17)
 4014058:	003ff706 	br	4014038 <__alt_data_end+0xfc014038>

0401405c <_read_r>:
 401405c:	defffd04 	addi	sp,sp,-12
 4014060:	2805883a 	mov	r2,r5
 4014064:	dc000015 	stw	r16,0(sp)
 4014068:	040100f4 	movhi	r16,1027
 401406c:	dc400115 	stw	r17,4(sp)
 4014070:	300b883a 	mov	r5,r6
 4014074:	84237f04 	addi	r16,r16,-29188
 4014078:	2023883a 	mov	r17,r4
 401407c:	380d883a 	mov	r6,r7
 4014080:	1009883a 	mov	r4,r2
 4014084:	dfc00215 	stw	ra,8(sp)
 4014088:	80000015 	stw	zero,0(r16)
 401408c:	4017cd40 	call	4017cd4 <read>
 4014090:	00ffffc4 	movi	r3,-1
 4014094:	10c00526 	beq	r2,r3,40140ac <_read_r+0x50>
 4014098:	dfc00217 	ldw	ra,8(sp)
 401409c:	dc400117 	ldw	r17,4(sp)
 40140a0:	dc000017 	ldw	r16,0(sp)
 40140a4:	dec00304 	addi	sp,sp,12
 40140a8:	f800283a 	ret
 40140ac:	80c00017 	ldw	r3,0(r16)
 40140b0:	183ff926 	beq	r3,zero,4014098 <__alt_data_end+0xfc014098>
 40140b4:	88c00015 	stw	r3,0(r17)
 40140b8:	003ff706 	br	4014098 <__alt_data_end+0xfc014098>

040140bc <__swbuf_r>:
 40140bc:	defffb04 	addi	sp,sp,-20
 40140c0:	dcc00315 	stw	r19,12(sp)
 40140c4:	dc800215 	stw	r18,8(sp)
 40140c8:	dc000015 	stw	r16,0(sp)
 40140cc:	dfc00415 	stw	ra,16(sp)
 40140d0:	dc400115 	stw	r17,4(sp)
 40140d4:	2025883a 	mov	r18,r4
 40140d8:	2827883a 	mov	r19,r5
 40140dc:	3021883a 	mov	r16,r6
 40140e0:	20000226 	beq	r4,zero,40140ec <__swbuf_r+0x30>
 40140e4:	20800e17 	ldw	r2,56(r4)
 40140e8:	10004226 	beq	r2,zero,40141f4 <__swbuf_r+0x138>
 40140ec:	80800617 	ldw	r2,24(r16)
 40140f0:	8100030b 	ldhu	r4,12(r16)
 40140f4:	80800215 	stw	r2,8(r16)
 40140f8:	2080020c 	andi	r2,r4,8
 40140fc:	10003626 	beq	r2,zero,40141d8 <__swbuf_r+0x11c>
 4014100:	80c00417 	ldw	r3,16(r16)
 4014104:	18003426 	beq	r3,zero,40141d8 <__swbuf_r+0x11c>
 4014108:	2088000c 	andi	r2,r4,8192
 401410c:	9c403fcc 	andi	r17,r19,255
 4014110:	10001a26 	beq	r2,zero,401417c <__swbuf_r+0xc0>
 4014114:	80800017 	ldw	r2,0(r16)
 4014118:	81000517 	ldw	r4,20(r16)
 401411c:	10c7c83a 	sub	r3,r2,r3
 4014120:	1900200e 	bge	r3,r4,40141a4 <__swbuf_r+0xe8>
 4014124:	18c00044 	addi	r3,r3,1
 4014128:	81000217 	ldw	r4,8(r16)
 401412c:	11400044 	addi	r5,r2,1
 4014130:	81400015 	stw	r5,0(r16)
 4014134:	213fffc4 	addi	r4,r4,-1
 4014138:	81000215 	stw	r4,8(r16)
 401413c:	14c00005 	stb	r19,0(r2)
 4014140:	80800517 	ldw	r2,20(r16)
 4014144:	10c01e26 	beq	r2,r3,40141c0 <__swbuf_r+0x104>
 4014148:	8080030b 	ldhu	r2,12(r16)
 401414c:	1080004c 	andi	r2,r2,1
 4014150:	10000226 	beq	r2,zero,401415c <__swbuf_r+0xa0>
 4014154:	00800284 	movi	r2,10
 4014158:	88801926 	beq	r17,r2,40141c0 <__swbuf_r+0x104>
 401415c:	8805883a 	mov	r2,r17
 4014160:	dfc00417 	ldw	ra,16(sp)
 4014164:	dcc00317 	ldw	r19,12(sp)
 4014168:	dc800217 	ldw	r18,8(sp)
 401416c:	dc400117 	ldw	r17,4(sp)
 4014170:	dc000017 	ldw	r16,0(sp)
 4014174:	dec00504 	addi	sp,sp,20
 4014178:	f800283a 	ret
 401417c:	81401917 	ldw	r5,100(r16)
 4014180:	00b7ffc4 	movi	r2,-8193
 4014184:	21080014 	ori	r4,r4,8192
 4014188:	2884703a 	and	r2,r5,r2
 401418c:	80801915 	stw	r2,100(r16)
 4014190:	80800017 	ldw	r2,0(r16)
 4014194:	8100030d 	sth	r4,12(r16)
 4014198:	81000517 	ldw	r4,20(r16)
 401419c:	10c7c83a 	sub	r3,r2,r3
 40141a0:	193fe016 	blt	r3,r4,4014124 <__alt_data_end+0xfc014124>
 40141a4:	800b883a 	mov	r5,r16
 40141a8:	9009883a 	mov	r4,r18
 40141ac:	400f9f40 	call	400f9f4 <_fflush_r>
 40141b0:	1000071e 	bne	r2,zero,40141d0 <__swbuf_r+0x114>
 40141b4:	80800017 	ldw	r2,0(r16)
 40141b8:	00c00044 	movi	r3,1
 40141bc:	003fda06 	br	4014128 <__alt_data_end+0xfc014128>
 40141c0:	800b883a 	mov	r5,r16
 40141c4:	9009883a 	mov	r4,r18
 40141c8:	400f9f40 	call	400f9f4 <_fflush_r>
 40141cc:	103fe326 	beq	r2,zero,401415c <__alt_data_end+0xfc01415c>
 40141d0:	00bfffc4 	movi	r2,-1
 40141d4:	003fe206 	br	4014160 <__alt_data_end+0xfc014160>
 40141d8:	800b883a 	mov	r5,r16
 40141dc:	9009883a 	mov	r4,r18
 40141e0:	400ddfc0 	call	400ddfc <__swsetup_r>
 40141e4:	103ffa1e 	bne	r2,zero,40141d0 <__alt_data_end+0xfc0141d0>
 40141e8:	8100030b 	ldhu	r4,12(r16)
 40141ec:	80c00417 	ldw	r3,16(r16)
 40141f0:	003fc506 	br	4014108 <__alt_data_end+0xfc014108>
 40141f4:	400fdd00 	call	400fdd0 <__sinit>
 40141f8:	003fbc06 	br	40140ec <__alt_data_end+0xfc0140ec>

040141fc <__swbuf>:
 40141fc:	008100b4 	movhi	r2,1026
 4014200:	1086e904 	addi	r2,r2,7076
 4014204:	280d883a 	mov	r6,r5
 4014208:	200b883a 	mov	r5,r4
 401420c:	11000017 	ldw	r4,0(r2)
 4014210:	40140bc1 	jmpi	40140bc <__swbuf_r>

04014214 <_wcrtomb_r>:
 4014214:	defff604 	addi	sp,sp,-40
 4014218:	008100b4 	movhi	r2,1026
 401421c:	dc800815 	stw	r18,32(sp)
 4014220:	dc400715 	stw	r17,28(sp)
 4014224:	dc000615 	stw	r16,24(sp)
 4014228:	1086ed04 	addi	r2,r2,7092
 401422c:	dfc00915 	stw	ra,36(sp)
 4014230:	2021883a 	mov	r16,r4
 4014234:	3823883a 	mov	r17,r7
 4014238:	14800017 	ldw	r18,0(r2)
 401423c:	28001426 	beq	r5,zero,4014290 <_wcrtomb_r+0x7c>
 4014240:	d9400415 	stw	r5,16(sp)
 4014244:	d9800515 	stw	r6,20(sp)
 4014248:	40109140 	call	4010914 <__locale_charset>
 401424c:	d9800517 	ldw	r6,20(sp)
 4014250:	d9400417 	ldw	r5,16(sp)
 4014254:	100f883a 	mov	r7,r2
 4014258:	dc400015 	stw	r17,0(sp)
 401425c:	8009883a 	mov	r4,r16
 4014260:	903ee83a 	callr	r18
 4014264:	00ffffc4 	movi	r3,-1
 4014268:	10c0031e 	bne	r2,r3,4014278 <_wcrtomb_r+0x64>
 401426c:	88000015 	stw	zero,0(r17)
 4014270:	00c02284 	movi	r3,138
 4014274:	80c00015 	stw	r3,0(r16)
 4014278:	dfc00917 	ldw	ra,36(sp)
 401427c:	dc800817 	ldw	r18,32(sp)
 4014280:	dc400717 	ldw	r17,28(sp)
 4014284:	dc000617 	ldw	r16,24(sp)
 4014288:	dec00a04 	addi	sp,sp,40
 401428c:	f800283a 	ret
 4014290:	40109140 	call	4010914 <__locale_charset>
 4014294:	100f883a 	mov	r7,r2
 4014298:	dc400015 	stw	r17,0(sp)
 401429c:	000d883a 	mov	r6,zero
 40142a0:	d9400104 	addi	r5,sp,4
 40142a4:	8009883a 	mov	r4,r16
 40142a8:	903ee83a 	callr	r18
 40142ac:	003fed06 	br	4014264 <__alt_data_end+0xfc014264>

040142b0 <wcrtomb>:
 40142b0:	defff604 	addi	sp,sp,-40
 40142b4:	008100b4 	movhi	r2,1026
 40142b8:	dc800615 	stw	r18,24(sp)
 40142bc:	dc400515 	stw	r17,20(sp)
 40142c0:	1086e904 	addi	r2,r2,7076
 40142c4:	dfc00915 	stw	ra,36(sp)
 40142c8:	dd000815 	stw	r20,32(sp)
 40142cc:	dcc00715 	stw	r19,28(sp)
 40142d0:	dc000415 	stw	r16,16(sp)
 40142d4:	3025883a 	mov	r18,r6
 40142d8:	14400017 	ldw	r17,0(r2)
 40142dc:	20001926 	beq	r4,zero,4014344 <wcrtomb+0x94>
 40142e0:	008100b4 	movhi	r2,1026
 40142e4:	1086ed04 	addi	r2,r2,7092
 40142e8:	15000017 	ldw	r20,0(r2)
 40142ec:	2021883a 	mov	r16,r4
 40142f0:	2827883a 	mov	r19,r5
 40142f4:	40109140 	call	4010914 <__locale_charset>
 40142f8:	100f883a 	mov	r7,r2
 40142fc:	dc800015 	stw	r18,0(sp)
 4014300:	980d883a 	mov	r6,r19
 4014304:	800b883a 	mov	r5,r16
 4014308:	8809883a 	mov	r4,r17
 401430c:	a03ee83a 	callr	r20
 4014310:	00ffffc4 	movi	r3,-1
 4014314:	10c0031e 	bne	r2,r3,4014324 <wcrtomb+0x74>
 4014318:	90000015 	stw	zero,0(r18)
 401431c:	00c02284 	movi	r3,138
 4014320:	88c00015 	stw	r3,0(r17)
 4014324:	dfc00917 	ldw	ra,36(sp)
 4014328:	dd000817 	ldw	r20,32(sp)
 401432c:	dcc00717 	ldw	r19,28(sp)
 4014330:	dc800617 	ldw	r18,24(sp)
 4014334:	dc400517 	ldw	r17,20(sp)
 4014338:	dc000417 	ldw	r16,16(sp)
 401433c:	dec00a04 	addi	sp,sp,40
 4014340:	f800283a 	ret
 4014344:	008100b4 	movhi	r2,1026
 4014348:	1086ed04 	addi	r2,r2,7092
 401434c:	14000017 	ldw	r16,0(r2)
 4014350:	40109140 	call	4010914 <__locale_charset>
 4014354:	100f883a 	mov	r7,r2
 4014358:	dc800015 	stw	r18,0(sp)
 401435c:	000d883a 	mov	r6,zero
 4014360:	d9400104 	addi	r5,sp,4
 4014364:	8809883a 	mov	r4,r17
 4014368:	803ee83a 	callr	r16
 401436c:	003fe806 	br	4014310 <__alt_data_end+0xfc014310>

04014370 <__ascii_wctomb>:
 4014370:	28000526 	beq	r5,zero,4014388 <__ascii_wctomb+0x18>
 4014374:	00803fc4 	movi	r2,255
 4014378:	11800536 	bltu	r2,r6,4014390 <__ascii_wctomb+0x20>
 401437c:	29800005 	stb	r6,0(r5)
 4014380:	00800044 	movi	r2,1
 4014384:	f800283a 	ret
 4014388:	0005883a 	mov	r2,zero
 401438c:	f800283a 	ret
 4014390:	00802284 	movi	r2,138
 4014394:	20800015 	stw	r2,0(r4)
 4014398:	00bfffc4 	movi	r2,-1
 401439c:	f800283a 	ret

040143a0 <_wctomb_r>:
 40143a0:	008100b4 	movhi	r2,1026
 40143a4:	defff904 	addi	sp,sp,-28
 40143a8:	1086ed04 	addi	r2,r2,7092
 40143ac:	dfc00615 	stw	ra,24(sp)
 40143b0:	dc400515 	stw	r17,20(sp)
 40143b4:	dc000415 	stw	r16,16(sp)
 40143b8:	3823883a 	mov	r17,r7
 40143bc:	14000017 	ldw	r16,0(r2)
 40143c0:	d9000115 	stw	r4,4(sp)
 40143c4:	d9400215 	stw	r5,8(sp)
 40143c8:	d9800315 	stw	r6,12(sp)
 40143cc:	40109140 	call	4010914 <__locale_charset>
 40143d0:	d9800317 	ldw	r6,12(sp)
 40143d4:	d9400217 	ldw	r5,8(sp)
 40143d8:	d9000117 	ldw	r4,4(sp)
 40143dc:	100f883a 	mov	r7,r2
 40143e0:	dc400015 	stw	r17,0(sp)
 40143e4:	803ee83a 	callr	r16
 40143e8:	dfc00617 	ldw	ra,24(sp)
 40143ec:	dc400517 	ldw	r17,20(sp)
 40143f0:	dc000417 	ldw	r16,16(sp)
 40143f4:	dec00704 	addi	sp,sp,28
 40143f8:	f800283a 	ret

040143fc <__udivdi3>:
 40143fc:	defff504 	addi	sp,sp,-44
 4014400:	dcc00415 	stw	r19,16(sp)
 4014404:	dc000115 	stw	r16,4(sp)
 4014408:	dfc00a15 	stw	ra,40(sp)
 401440c:	df000915 	stw	fp,36(sp)
 4014410:	ddc00815 	stw	r23,32(sp)
 4014414:	dd800715 	stw	r22,28(sp)
 4014418:	dd400615 	stw	r21,24(sp)
 401441c:	dd000515 	stw	r20,20(sp)
 4014420:	dc800315 	stw	r18,12(sp)
 4014424:	dc400215 	stw	r17,8(sp)
 4014428:	2027883a 	mov	r19,r4
 401442c:	2821883a 	mov	r16,r5
 4014430:	3800411e 	bne	r7,zero,4014538 <__udivdi3+0x13c>
 4014434:	3023883a 	mov	r17,r6
 4014438:	2025883a 	mov	r18,r4
 401443c:	2980522e 	bgeu	r5,r6,4014588 <__udivdi3+0x18c>
 4014440:	00bfffd4 	movui	r2,65535
 4014444:	282d883a 	mov	r22,r5
 4014448:	1180a836 	bltu	r2,r6,40146ec <__udivdi3+0x2f0>
 401444c:	00803fc4 	movi	r2,255
 4014450:	1185803a 	cmpltu	r2,r2,r6
 4014454:	100490fa 	slli	r2,r2,3
 4014458:	3086d83a 	srl	r3,r6,r2
 401445c:	010100b4 	movhi	r4,1026
 4014460:	212a3d04 	addi	r4,r4,-22284
 4014464:	20c7883a 	add	r3,r4,r3
 4014468:	18c00003 	ldbu	r3,0(r3)
 401446c:	1885883a 	add	r2,r3,r2
 4014470:	00c00804 	movi	r3,32
 4014474:	1887c83a 	sub	r3,r3,r2
 4014478:	18000526 	beq	r3,zero,4014490 <__udivdi3+0x94>
 401447c:	80e0983a 	sll	r16,r16,r3
 4014480:	9884d83a 	srl	r2,r19,r2
 4014484:	30e2983a 	sll	r17,r6,r3
 4014488:	98e4983a 	sll	r18,r19,r3
 401448c:	142cb03a 	or	r22,r2,r16
 4014490:	882ad43a 	srli	r21,r17,16
 4014494:	b009883a 	mov	r4,r22
 4014498:	8d3fffcc 	andi	r20,r17,65535
 401449c:	a80b883a 	mov	r5,r21
 40144a0:	400a41c0 	call	400a41c <__umodsi3>
 40144a4:	b009883a 	mov	r4,r22
 40144a8:	a80b883a 	mov	r5,r21
 40144ac:	1027883a 	mov	r19,r2
 40144b0:	400a3b80 	call	400a3b8 <__udivsi3>
 40144b4:	102d883a 	mov	r22,r2
 40144b8:	9826943a 	slli	r19,r19,16
 40144bc:	9004d43a 	srli	r2,r18,16
 40144c0:	a5a1383a 	mul	r16,r20,r22
 40144c4:	14c4b03a 	or	r2,r2,r19
 40144c8:	1400052e 	bgeu	r2,r16,40144e0 <__udivdi3+0xe4>
 40144cc:	1445883a 	add	r2,r2,r17
 40144d0:	b0ffffc4 	addi	r3,r22,-1
 40144d4:	14400136 	bltu	r2,r17,40144dc <__udivdi3+0xe0>
 40144d8:	14012336 	bltu	r2,r16,4014968 <__udivdi3+0x56c>
 40144dc:	182d883a 	mov	r22,r3
 40144e0:	1421c83a 	sub	r16,r2,r16
 40144e4:	a80b883a 	mov	r5,r21
 40144e8:	8009883a 	mov	r4,r16
 40144ec:	400a41c0 	call	400a41c <__umodsi3>
 40144f0:	1027883a 	mov	r19,r2
 40144f4:	a80b883a 	mov	r5,r21
 40144f8:	8009883a 	mov	r4,r16
 40144fc:	400a3b80 	call	400a3b8 <__udivsi3>
 4014500:	9826943a 	slli	r19,r19,16
 4014504:	a0a9383a 	mul	r20,r20,r2
 4014508:	94bfffcc 	andi	r18,r18,65535
 401450c:	94e4b03a 	or	r18,r18,r19
 4014510:	9500052e 	bgeu	r18,r20,4014528 <__udivdi3+0x12c>
 4014514:	8ca5883a 	add	r18,r17,r18
 4014518:	10ffffc4 	addi	r3,r2,-1
 401451c:	9440f136 	bltu	r18,r17,40148e4 <__udivdi3+0x4e8>
 4014520:	9500f02e 	bgeu	r18,r20,40148e4 <__udivdi3+0x4e8>
 4014524:	10bfff84 	addi	r2,r2,-2
 4014528:	b00c943a 	slli	r6,r22,16
 401452c:	0007883a 	mov	r3,zero
 4014530:	3084b03a 	or	r2,r6,r2
 4014534:	00005906 	br	401469c <__udivdi3+0x2a0>
 4014538:	29c05636 	bltu	r5,r7,4014694 <__udivdi3+0x298>
 401453c:	00bfffd4 	movui	r2,65535
 4014540:	11c0622e 	bgeu	r2,r7,40146cc <__udivdi3+0x2d0>
 4014544:	00804034 	movhi	r2,256
 4014548:	10bfffc4 	addi	r2,r2,-1
 401454c:	11c0ee36 	bltu	r2,r7,4014908 <__udivdi3+0x50c>
 4014550:	00800404 	movi	r2,16
 4014554:	3886d83a 	srl	r3,r7,r2
 4014558:	010100b4 	movhi	r4,1026
 401455c:	212a3d04 	addi	r4,r4,-22284
 4014560:	20c7883a 	add	r3,r4,r3
 4014564:	18c00003 	ldbu	r3,0(r3)
 4014568:	05400804 	movi	r21,32
 401456c:	1885883a 	add	r2,r3,r2
 4014570:	a8abc83a 	sub	r21,r21,r2
 4014574:	a800621e 	bne	r21,zero,4014700 <__udivdi3+0x304>
 4014578:	3c00e936 	bltu	r7,r16,4014920 <__udivdi3+0x524>
 401457c:	9985403a 	cmpgeu	r2,r19,r6
 4014580:	0007883a 	mov	r3,zero
 4014584:	00004506 	br	401469c <__udivdi3+0x2a0>
 4014588:	3000041e 	bne	r6,zero,401459c <__udivdi3+0x1a0>
 401458c:	000b883a 	mov	r5,zero
 4014590:	01000044 	movi	r4,1
 4014594:	400a3b80 	call	400a3b8 <__udivsi3>
 4014598:	1023883a 	mov	r17,r2
 401459c:	00bfffd4 	movui	r2,65535
 40145a0:	14404e2e 	bgeu	r2,r17,40146dc <__udivdi3+0x2e0>
 40145a4:	00804034 	movhi	r2,256
 40145a8:	10bfffc4 	addi	r2,r2,-1
 40145ac:	1440d836 	bltu	r2,r17,4014910 <__udivdi3+0x514>
 40145b0:	00800404 	movi	r2,16
 40145b4:	8886d83a 	srl	r3,r17,r2
 40145b8:	010100b4 	movhi	r4,1026
 40145bc:	212a3d04 	addi	r4,r4,-22284
 40145c0:	20c7883a 	add	r3,r4,r3
 40145c4:	18c00003 	ldbu	r3,0(r3)
 40145c8:	1885883a 	add	r2,r3,r2
 40145cc:	00c00804 	movi	r3,32
 40145d0:	1887c83a 	sub	r3,r3,r2
 40145d4:	18008f1e 	bne	r3,zero,4014814 <__udivdi3+0x418>
 40145d8:	882ad43a 	srli	r21,r17,16
 40145dc:	8461c83a 	sub	r16,r16,r17
 40145e0:	8d3fffcc 	andi	r20,r17,65535
 40145e4:	00c00044 	movi	r3,1
 40145e8:	8009883a 	mov	r4,r16
 40145ec:	a80b883a 	mov	r5,r21
 40145f0:	d8c00015 	stw	r3,0(sp)
 40145f4:	400a41c0 	call	400a41c <__umodsi3>
 40145f8:	8009883a 	mov	r4,r16
 40145fc:	a80b883a 	mov	r5,r21
 4014600:	1027883a 	mov	r19,r2
 4014604:	400a3b80 	call	400a3b8 <__udivsi3>
 4014608:	9826943a 	slli	r19,r19,16
 401460c:	9008d43a 	srli	r4,r18,16
 4014610:	1521383a 	mul	r16,r2,r20
 4014614:	102d883a 	mov	r22,r2
 4014618:	24c8b03a 	or	r4,r4,r19
 401461c:	d8c00017 	ldw	r3,0(sp)
 4014620:	2400052e 	bgeu	r4,r16,4014638 <__udivdi3+0x23c>
 4014624:	2449883a 	add	r4,r4,r17
 4014628:	b0bfffc4 	addi	r2,r22,-1
 401462c:	24400136 	bltu	r4,r17,4014634 <__udivdi3+0x238>
 4014630:	2400ca36 	bltu	r4,r16,401495c <__udivdi3+0x560>
 4014634:	102d883a 	mov	r22,r2
 4014638:	2421c83a 	sub	r16,r4,r16
 401463c:	a80b883a 	mov	r5,r21
 4014640:	8009883a 	mov	r4,r16
 4014644:	d8c00015 	stw	r3,0(sp)
 4014648:	400a41c0 	call	400a41c <__umodsi3>
 401464c:	1027883a 	mov	r19,r2
 4014650:	a80b883a 	mov	r5,r21
 4014654:	8009883a 	mov	r4,r16
 4014658:	400a3b80 	call	400a3b8 <__udivsi3>
 401465c:	9826943a 	slli	r19,r19,16
 4014660:	1529383a 	mul	r20,r2,r20
 4014664:	94bfffcc 	andi	r18,r18,65535
 4014668:	94e4b03a 	or	r18,r18,r19
 401466c:	d8c00017 	ldw	r3,0(sp)
 4014670:	9500052e 	bgeu	r18,r20,4014688 <__udivdi3+0x28c>
 4014674:	8ca5883a 	add	r18,r17,r18
 4014678:	113fffc4 	addi	r4,r2,-1
 401467c:	94409736 	bltu	r18,r17,40148dc <__udivdi3+0x4e0>
 4014680:	9500962e 	bgeu	r18,r20,40148dc <__udivdi3+0x4e0>
 4014684:	10bfff84 	addi	r2,r2,-2
 4014688:	b00c943a 	slli	r6,r22,16
 401468c:	3084b03a 	or	r2,r6,r2
 4014690:	00000206 	br	401469c <__udivdi3+0x2a0>
 4014694:	0007883a 	mov	r3,zero
 4014698:	0005883a 	mov	r2,zero
 401469c:	dfc00a17 	ldw	ra,40(sp)
 40146a0:	df000917 	ldw	fp,36(sp)
 40146a4:	ddc00817 	ldw	r23,32(sp)
 40146a8:	dd800717 	ldw	r22,28(sp)
 40146ac:	dd400617 	ldw	r21,24(sp)
 40146b0:	dd000517 	ldw	r20,20(sp)
 40146b4:	dcc00417 	ldw	r19,16(sp)
 40146b8:	dc800317 	ldw	r18,12(sp)
 40146bc:	dc400217 	ldw	r17,8(sp)
 40146c0:	dc000117 	ldw	r16,4(sp)
 40146c4:	dec00b04 	addi	sp,sp,44
 40146c8:	f800283a 	ret
 40146cc:	00803fc4 	movi	r2,255
 40146d0:	11c5803a 	cmpltu	r2,r2,r7
 40146d4:	100490fa 	slli	r2,r2,3
 40146d8:	003f9e06 	br	4014554 <__alt_data_end+0xfc014554>
 40146dc:	00803fc4 	movi	r2,255
 40146e0:	1445803a 	cmpltu	r2,r2,r17
 40146e4:	100490fa 	slli	r2,r2,3
 40146e8:	003fb206 	br	40145b4 <__alt_data_end+0xfc0145b4>
 40146ec:	00804034 	movhi	r2,256
 40146f0:	10bfffc4 	addi	r2,r2,-1
 40146f4:	11808836 	bltu	r2,r6,4014918 <__udivdi3+0x51c>
 40146f8:	00800404 	movi	r2,16
 40146fc:	003f5606 	br	4014458 <__alt_data_end+0xfc014458>
 4014700:	30aed83a 	srl	r23,r6,r2
 4014704:	3d4e983a 	sll	r7,r7,r21
 4014708:	80acd83a 	srl	r22,r16,r2
 401470c:	9884d83a 	srl	r2,r19,r2
 4014710:	3deeb03a 	or	r23,r7,r23
 4014714:	b824d43a 	srli	r18,r23,16
 4014718:	8560983a 	sll	r16,r16,r21
 401471c:	b009883a 	mov	r4,r22
 4014720:	900b883a 	mov	r5,r18
 4014724:	3568983a 	sll	r20,r6,r21
 4014728:	1420b03a 	or	r16,r2,r16
 401472c:	400a41c0 	call	400a41c <__umodsi3>
 4014730:	b009883a 	mov	r4,r22
 4014734:	900b883a 	mov	r5,r18
 4014738:	1023883a 	mov	r17,r2
 401473c:	400a3b80 	call	400a3b8 <__udivsi3>
 4014740:	8808943a 	slli	r4,r17,16
 4014744:	bf3fffcc 	andi	fp,r23,65535
 4014748:	8006d43a 	srli	r3,r16,16
 401474c:	e0a3383a 	mul	r17,fp,r2
 4014750:	100d883a 	mov	r6,r2
 4014754:	1906b03a 	or	r3,r3,r4
 4014758:	1c40042e 	bgeu	r3,r17,401476c <__udivdi3+0x370>
 401475c:	1dc7883a 	add	r3,r3,r23
 4014760:	10bfffc4 	addi	r2,r2,-1
 4014764:	1dc0752e 	bgeu	r3,r23,401493c <__udivdi3+0x540>
 4014768:	100d883a 	mov	r6,r2
 401476c:	1c63c83a 	sub	r17,r3,r17
 4014770:	900b883a 	mov	r5,r18
 4014774:	8809883a 	mov	r4,r17
 4014778:	d9800015 	stw	r6,0(sp)
 401477c:	400a41c0 	call	400a41c <__umodsi3>
 4014780:	102d883a 	mov	r22,r2
 4014784:	8809883a 	mov	r4,r17
 4014788:	900b883a 	mov	r5,r18
 401478c:	400a3b80 	call	400a3b8 <__udivsi3>
 4014790:	b02c943a 	slli	r22,r22,16
 4014794:	e089383a 	mul	r4,fp,r2
 4014798:	843fffcc 	andi	r16,r16,65535
 401479c:	85a0b03a 	or	r16,r16,r22
 40147a0:	d9800017 	ldw	r6,0(sp)
 40147a4:	8100042e 	bgeu	r16,r4,40147b8 <__udivdi3+0x3bc>
 40147a8:	85e1883a 	add	r16,r16,r23
 40147ac:	10ffffc4 	addi	r3,r2,-1
 40147b0:	85c05e2e 	bgeu	r16,r23,401492c <__udivdi3+0x530>
 40147b4:	1805883a 	mov	r2,r3
 40147b8:	300c943a 	slli	r6,r6,16
 40147bc:	a17fffcc 	andi	r5,r20,65535
 40147c0:	a028d43a 	srli	r20,r20,16
 40147c4:	3084b03a 	or	r2,r6,r2
 40147c8:	10ffffcc 	andi	r3,r2,65535
 40147cc:	100cd43a 	srli	r6,r2,16
 40147d0:	194f383a 	mul	r7,r3,r5
 40147d4:	1d07383a 	mul	r3,r3,r20
 40147d8:	314b383a 	mul	r5,r6,r5
 40147dc:	3810d43a 	srli	r8,r7,16
 40147e0:	8121c83a 	sub	r16,r16,r4
 40147e4:	1947883a 	add	r3,r3,r5
 40147e8:	40c7883a 	add	r3,r8,r3
 40147ec:	350d383a 	mul	r6,r6,r20
 40147f0:	1940022e 	bgeu	r3,r5,40147fc <__udivdi3+0x400>
 40147f4:	01000074 	movhi	r4,1
 40147f8:	310d883a 	add	r6,r6,r4
 40147fc:	1828d43a 	srli	r20,r3,16
 4014800:	a18d883a 	add	r6,r20,r6
 4014804:	81803e36 	bltu	r16,r6,4014900 <__udivdi3+0x504>
 4014808:	81803826 	beq	r16,r6,40148ec <__udivdi3+0x4f0>
 401480c:	0007883a 	mov	r3,zero
 4014810:	003fa206 	br	401469c <__alt_data_end+0xfc01469c>
 4014814:	88e2983a 	sll	r17,r17,r3
 4014818:	80a8d83a 	srl	r20,r16,r2
 401481c:	80e0983a 	sll	r16,r16,r3
 4014820:	882ad43a 	srli	r21,r17,16
 4014824:	9884d83a 	srl	r2,r19,r2
 4014828:	a009883a 	mov	r4,r20
 401482c:	a80b883a 	mov	r5,r21
 4014830:	142eb03a 	or	r23,r2,r16
 4014834:	98e4983a 	sll	r18,r19,r3
 4014838:	400a41c0 	call	400a41c <__umodsi3>
 401483c:	a009883a 	mov	r4,r20
 4014840:	a80b883a 	mov	r5,r21
 4014844:	1021883a 	mov	r16,r2
 4014848:	400a3b80 	call	400a3b8 <__udivsi3>
 401484c:	1039883a 	mov	fp,r2
 4014850:	8d3fffcc 	andi	r20,r17,65535
 4014854:	8020943a 	slli	r16,r16,16
 4014858:	b804d43a 	srli	r2,r23,16
 401485c:	a72d383a 	mul	r22,r20,fp
 4014860:	1404b03a 	or	r2,r2,r16
 4014864:	1580062e 	bgeu	r2,r22,4014880 <__udivdi3+0x484>
 4014868:	1445883a 	add	r2,r2,r17
 401486c:	e0ffffc4 	addi	r3,fp,-1
 4014870:	14403836 	bltu	r2,r17,4014954 <__udivdi3+0x558>
 4014874:	1580372e 	bgeu	r2,r22,4014954 <__udivdi3+0x558>
 4014878:	e73fff84 	addi	fp,fp,-2
 401487c:	1445883a 	add	r2,r2,r17
 4014880:	15adc83a 	sub	r22,r2,r22
 4014884:	a80b883a 	mov	r5,r21
 4014888:	b009883a 	mov	r4,r22
 401488c:	400a41c0 	call	400a41c <__umodsi3>
 4014890:	1027883a 	mov	r19,r2
 4014894:	b009883a 	mov	r4,r22
 4014898:	a80b883a 	mov	r5,r21
 401489c:	400a3b80 	call	400a3b8 <__udivsi3>
 40148a0:	9826943a 	slli	r19,r19,16
 40148a4:	a0a1383a 	mul	r16,r20,r2
 40148a8:	b93fffcc 	andi	r4,r23,65535
 40148ac:	24c8b03a 	or	r4,r4,r19
 40148b0:	2400062e 	bgeu	r4,r16,40148cc <__udivdi3+0x4d0>
 40148b4:	2449883a 	add	r4,r4,r17
 40148b8:	10ffffc4 	addi	r3,r2,-1
 40148bc:	24402336 	bltu	r4,r17,401494c <__udivdi3+0x550>
 40148c0:	2400222e 	bgeu	r4,r16,401494c <__udivdi3+0x550>
 40148c4:	10bfff84 	addi	r2,r2,-2
 40148c8:	2449883a 	add	r4,r4,r17
 40148cc:	e038943a 	slli	fp,fp,16
 40148d0:	2421c83a 	sub	r16,r4,r16
 40148d4:	e086b03a 	or	r3,fp,r2
 40148d8:	003f4306 	br	40145e8 <__alt_data_end+0xfc0145e8>
 40148dc:	2005883a 	mov	r2,r4
 40148e0:	003f6906 	br	4014688 <__alt_data_end+0xfc014688>
 40148e4:	1805883a 	mov	r2,r3
 40148e8:	003f0f06 	br	4014528 <__alt_data_end+0xfc014528>
 40148ec:	1806943a 	slli	r3,r3,16
 40148f0:	9d66983a 	sll	r19,r19,r21
 40148f4:	39ffffcc 	andi	r7,r7,65535
 40148f8:	19c7883a 	add	r3,r3,r7
 40148fc:	98ffc32e 	bgeu	r19,r3,401480c <__alt_data_end+0xfc01480c>
 4014900:	10bfffc4 	addi	r2,r2,-1
 4014904:	003fc106 	br	401480c <__alt_data_end+0xfc01480c>
 4014908:	00800604 	movi	r2,24
 401490c:	003f1106 	br	4014554 <__alt_data_end+0xfc014554>
 4014910:	00800604 	movi	r2,24
 4014914:	003f2706 	br	40145b4 <__alt_data_end+0xfc0145b4>
 4014918:	00800604 	movi	r2,24
 401491c:	003ece06 	br	4014458 <__alt_data_end+0xfc014458>
 4014920:	0007883a 	mov	r3,zero
 4014924:	00800044 	movi	r2,1
 4014928:	003f5c06 	br	401469c <__alt_data_end+0xfc01469c>
 401492c:	813fa12e 	bgeu	r16,r4,40147b4 <__alt_data_end+0xfc0147b4>
 4014930:	10bfff84 	addi	r2,r2,-2
 4014934:	85e1883a 	add	r16,r16,r23
 4014938:	003f9f06 	br	40147b8 <__alt_data_end+0xfc0147b8>
 401493c:	1c7f8a2e 	bgeu	r3,r17,4014768 <__alt_data_end+0xfc014768>
 4014940:	31bfff84 	addi	r6,r6,-2
 4014944:	1dc7883a 	add	r3,r3,r23
 4014948:	003f8806 	br	401476c <__alt_data_end+0xfc01476c>
 401494c:	1805883a 	mov	r2,r3
 4014950:	003fde06 	br	40148cc <__alt_data_end+0xfc0148cc>
 4014954:	1839883a 	mov	fp,r3
 4014958:	003fc906 	br	4014880 <__alt_data_end+0xfc014880>
 401495c:	b5bfff84 	addi	r22,r22,-2
 4014960:	2449883a 	add	r4,r4,r17
 4014964:	003f3406 	br	4014638 <__alt_data_end+0xfc014638>
 4014968:	b5bfff84 	addi	r22,r22,-2
 401496c:	1445883a 	add	r2,r2,r17
 4014970:	003edb06 	br	40144e0 <__alt_data_end+0xfc0144e0>

04014974 <__umoddi3>:
 4014974:	defff404 	addi	sp,sp,-48
 4014978:	df000a15 	stw	fp,40(sp)
 401497c:	dc400315 	stw	r17,12(sp)
 4014980:	dc000215 	stw	r16,8(sp)
 4014984:	dfc00b15 	stw	ra,44(sp)
 4014988:	ddc00915 	stw	r23,36(sp)
 401498c:	dd800815 	stw	r22,32(sp)
 4014990:	dd400715 	stw	r21,28(sp)
 4014994:	dd000615 	stw	r20,24(sp)
 4014998:	dcc00515 	stw	r19,20(sp)
 401499c:	dc800415 	stw	r18,16(sp)
 40149a0:	2021883a 	mov	r16,r4
 40149a4:	2823883a 	mov	r17,r5
 40149a8:	2839883a 	mov	fp,r5
 40149ac:	38003c1e 	bne	r7,zero,4014aa0 <__umoddi3+0x12c>
 40149b0:	3027883a 	mov	r19,r6
 40149b4:	2029883a 	mov	r20,r4
 40149b8:	2980512e 	bgeu	r5,r6,4014b00 <__umoddi3+0x18c>
 40149bc:	00bfffd4 	movui	r2,65535
 40149c0:	11809a36 	bltu	r2,r6,4014c2c <__umoddi3+0x2b8>
 40149c4:	01003fc4 	movi	r4,255
 40149c8:	2189803a 	cmpltu	r4,r4,r6
 40149cc:	200890fa 	slli	r4,r4,3
 40149d0:	3104d83a 	srl	r2,r6,r4
 40149d4:	00c100b4 	movhi	r3,1026
 40149d8:	18ea3d04 	addi	r3,r3,-22284
 40149dc:	1885883a 	add	r2,r3,r2
 40149e0:	10c00003 	ldbu	r3,0(r2)
 40149e4:	00800804 	movi	r2,32
 40149e8:	1909883a 	add	r4,r3,r4
 40149ec:	1125c83a 	sub	r18,r2,r4
 40149f0:	90000526 	beq	r18,zero,4014a08 <__umoddi3+0x94>
 40149f4:	8ca2983a 	sll	r17,r17,r18
 40149f8:	8108d83a 	srl	r4,r16,r4
 40149fc:	34a6983a 	sll	r19,r6,r18
 4014a00:	84a8983a 	sll	r20,r16,r18
 4014a04:	2478b03a 	or	fp,r4,r17
 4014a08:	982ed43a 	srli	r23,r19,16
 4014a0c:	e009883a 	mov	r4,fp
 4014a10:	9dbfffcc 	andi	r22,r19,65535
 4014a14:	b80b883a 	mov	r5,r23
 4014a18:	400a41c0 	call	400a41c <__umodsi3>
 4014a1c:	e009883a 	mov	r4,fp
 4014a20:	b80b883a 	mov	r5,r23
 4014a24:	102b883a 	mov	r21,r2
 4014a28:	400a3b80 	call	400a3b8 <__udivsi3>
 4014a2c:	a806943a 	slli	r3,r21,16
 4014a30:	a008d43a 	srli	r4,r20,16
 4014a34:	b085383a 	mul	r2,r22,r2
 4014a38:	20c8b03a 	or	r4,r4,r3
 4014a3c:	2080032e 	bgeu	r4,r2,4014a4c <__umoddi3+0xd8>
 4014a40:	24c9883a 	add	r4,r4,r19
 4014a44:	24c00136 	bltu	r4,r19,4014a4c <__umoddi3+0xd8>
 4014a48:	20811036 	bltu	r4,r2,4014e8c <__umoddi3+0x518>
 4014a4c:	20abc83a 	sub	r21,r4,r2
 4014a50:	b80b883a 	mov	r5,r23
 4014a54:	a809883a 	mov	r4,r21
 4014a58:	400a41c0 	call	400a41c <__umodsi3>
 4014a5c:	1023883a 	mov	r17,r2
 4014a60:	b80b883a 	mov	r5,r23
 4014a64:	a809883a 	mov	r4,r21
 4014a68:	400a3b80 	call	400a3b8 <__udivsi3>
 4014a6c:	8822943a 	slli	r17,r17,16
 4014a70:	b085383a 	mul	r2,r22,r2
 4014a74:	a0ffffcc 	andi	r3,r20,65535
 4014a78:	1c46b03a 	or	r3,r3,r17
 4014a7c:	1880042e 	bgeu	r3,r2,4014a90 <__umoddi3+0x11c>
 4014a80:	1cc7883a 	add	r3,r3,r19
 4014a84:	1cc00236 	bltu	r3,r19,4014a90 <__umoddi3+0x11c>
 4014a88:	1880012e 	bgeu	r3,r2,4014a90 <__umoddi3+0x11c>
 4014a8c:	1cc7883a 	add	r3,r3,r19
 4014a90:	1885c83a 	sub	r2,r3,r2
 4014a94:	1484d83a 	srl	r2,r2,r18
 4014a98:	0007883a 	mov	r3,zero
 4014a9c:	00004f06 	br	4014bdc <__umoddi3+0x268>
 4014aa0:	29c04c36 	bltu	r5,r7,4014bd4 <__umoddi3+0x260>
 4014aa4:	00bfffd4 	movui	r2,65535
 4014aa8:	11c0582e 	bgeu	r2,r7,4014c0c <__umoddi3+0x298>
 4014aac:	00804034 	movhi	r2,256
 4014ab0:	10bfffc4 	addi	r2,r2,-1
 4014ab4:	11c0e736 	bltu	r2,r7,4014e54 <__umoddi3+0x4e0>
 4014ab8:	01000404 	movi	r4,16
 4014abc:	3904d83a 	srl	r2,r7,r4
 4014ac0:	00c100b4 	movhi	r3,1026
 4014ac4:	18ea3d04 	addi	r3,r3,-22284
 4014ac8:	1885883a 	add	r2,r3,r2
 4014acc:	14c00003 	ldbu	r19,0(r2)
 4014ad0:	00c00804 	movi	r3,32
 4014ad4:	9927883a 	add	r19,r19,r4
 4014ad8:	1ce9c83a 	sub	r20,r3,r19
 4014adc:	a000581e 	bne	r20,zero,4014c40 <__umoddi3+0x2cc>
 4014ae0:	3c400136 	bltu	r7,r17,4014ae8 <__umoddi3+0x174>
 4014ae4:	8180eb36 	bltu	r16,r6,4014e94 <__umoddi3+0x520>
 4014ae8:	8185c83a 	sub	r2,r16,r6
 4014aec:	89e3c83a 	sub	r17,r17,r7
 4014af0:	8089803a 	cmpltu	r4,r16,r2
 4014af4:	8939c83a 	sub	fp,r17,r4
 4014af8:	e007883a 	mov	r3,fp
 4014afc:	00003706 	br	4014bdc <__umoddi3+0x268>
 4014b00:	3000041e 	bne	r6,zero,4014b14 <__umoddi3+0x1a0>
 4014b04:	000b883a 	mov	r5,zero
 4014b08:	01000044 	movi	r4,1
 4014b0c:	400a3b80 	call	400a3b8 <__udivsi3>
 4014b10:	1027883a 	mov	r19,r2
 4014b14:	00bfffd4 	movui	r2,65535
 4014b18:	14c0402e 	bgeu	r2,r19,4014c1c <__umoddi3+0x2a8>
 4014b1c:	00804034 	movhi	r2,256
 4014b20:	10bfffc4 	addi	r2,r2,-1
 4014b24:	14c0cd36 	bltu	r2,r19,4014e5c <__umoddi3+0x4e8>
 4014b28:	00800404 	movi	r2,16
 4014b2c:	9886d83a 	srl	r3,r19,r2
 4014b30:	010100b4 	movhi	r4,1026
 4014b34:	212a3d04 	addi	r4,r4,-22284
 4014b38:	20c7883a 	add	r3,r4,r3
 4014b3c:	18c00003 	ldbu	r3,0(r3)
 4014b40:	1887883a 	add	r3,r3,r2
 4014b44:	00800804 	movi	r2,32
 4014b48:	10e5c83a 	sub	r18,r2,r3
 4014b4c:	9000901e 	bne	r18,zero,4014d90 <__umoddi3+0x41c>
 4014b50:	982cd43a 	srli	r22,r19,16
 4014b54:	8ce3c83a 	sub	r17,r17,r19
 4014b58:	9d7fffcc 	andi	r21,r19,65535
 4014b5c:	b00b883a 	mov	r5,r22
 4014b60:	8809883a 	mov	r4,r17
 4014b64:	400a41c0 	call	400a41c <__umodsi3>
 4014b68:	8809883a 	mov	r4,r17
 4014b6c:	b00b883a 	mov	r5,r22
 4014b70:	1021883a 	mov	r16,r2
 4014b74:	400a3b80 	call	400a3b8 <__udivsi3>
 4014b78:	8006943a 	slli	r3,r16,16
 4014b7c:	a008d43a 	srli	r4,r20,16
 4014b80:	1545383a 	mul	r2,r2,r21
 4014b84:	20c8b03a 	or	r4,r4,r3
 4014b88:	2080042e 	bgeu	r4,r2,4014b9c <__umoddi3+0x228>
 4014b8c:	24c9883a 	add	r4,r4,r19
 4014b90:	24c00236 	bltu	r4,r19,4014b9c <__umoddi3+0x228>
 4014b94:	2080012e 	bgeu	r4,r2,4014b9c <__umoddi3+0x228>
 4014b98:	24c9883a 	add	r4,r4,r19
 4014b9c:	20a1c83a 	sub	r16,r4,r2
 4014ba0:	b00b883a 	mov	r5,r22
 4014ba4:	8009883a 	mov	r4,r16
 4014ba8:	400a41c0 	call	400a41c <__umodsi3>
 4014bac:	1023883a 	mov	r17,r2
 4014bb0:	b00b883a 	mov	r5,r22
 4014bb4:	8009883a 	mov	r4,r16
 4014bb8:	400a3b80 	call	400a3b8 <__udivsi3>
 4014bbc:	8822943a 	slli	r17,r17,16
 4014bc0:	1545383a 	mul	r2,r2,r21
 4014bc4:	a53fffcc 	andi	r20,r20,65535
 4014bc8:	a446b03a 	or	r3,r20,r17
 4014bcc:	18bfb02e 	bgeu	r3,r2,4014a90 <__alt_data_end+0xfc014a90>
 4014bd0:	003fab06 	br	4014a80 <__alt_data_end+0xfc014a80>
 4014bd4:	2005883a 	mov	r2,r4
 4014bd8:	2807883a 	mov	r3,r5
 4014bdc:	dfc00b17 	ldw	ra,44(sp)
 4014be0:	df000a17 	ldw	fp,40(sp)
 4014be4:	ddc00917 	ldw	r23,36(sp)
 4014be8:	dd800817 	ldw	r22,32(sp)
 4014bec:	dd400717 	ldw	r21,28(sp)
 4014bf0:	dd000617 	ldw	r20,24(sp)
 4014bf4:	dcc00517 	ldw	r19,20(sp)
 4014bf8:	dc800417 	ldw	r18,16(sp)
 4014bfc:	dc400317 	ldw	r17,12(sp)
 4014c00:	dc000217 	ldw	r16,8(sp)
 4014c04:	dec00c04 	addi	sp,sp,48
 4014c08:	f800283a 	ret
 4014c0c:	04c03fc4 	movi	r19,255
 4014c10:	99c9803a 	cmpltu	r4,r19,r7
 4014c14:	200890fa 	slli	r4,r4,3
 4014c18:	003fa806 	br	4014abc <__alt_data_end+0xfc014abc>
 4014c1c:	00803fc4 	movi	r2,255
 4014c20:	14c5803a 	cmpltu	r2,r2,r19
 4014c24:	100490fa 	slli	r2,r2,3
 4014c28:	003fc006 	br	4014b2c <__alt_data_end+0xfc014b2c>
 4014c2c:	00804034 	movhi	r2,256
 4014c30:	10bfffc4 	addi	r2,r2,-1
 4014c34:	11808b36 	bltu	r2,r6,4014e64 <__umoddi3+0x4f0>
 4014c38:	01000404 	movi	r4,16
 4014c3c:	003f6406 	br	40149d0 <__alt_data_end+0xfc0149d0>
 4014c40:	34c4d83a 	srl	r2,r6,r19
 4014c44:	3d0e983a 	sll	r7,r7,r20
 4014c48:	8cf8d83a 	srl	fp,r17,r19
 4014c4c:	8d10983a 	sll	r8,r17,r20
 4014c50:	38aab03a 	or	r21,r7,r2
 4014c54:	a82cd43a 	srli	r22,r21,16
 4014c58:	84e2d83a 	srl	r17,r16,r19
 4014c5c:	e009883a 	mov	r4,fp
 4014c60:	b00b883a 	mov	r5,r22
 4014c64:	8a22b03a 	or	r17,r17,r8
 4014c68:	3524983a 	sll	r18,r6,r20
 4014c6c:	400a41c0 	call	400a41c <__umodsi3>
 4014c70:	e009883a 	mov	r4,fp
 4014c74:	b00b883a 	mov	r5,r22
 4014c78:	102f883a 	mov	r23,r2
 4014c7c:	400a3b80 	call	400a3b8 <__udivsi3>
 4014c80:	100d883a 	mov	r6,r2
 4014c84:	b808943a 	slli	r4,r23,16
 4014c88:	aa3fffcc 	andi	r8,r21,65535
 4014c8c:	8804d43a 	srli	r2,r17,16
 4014c90:	41af383a 	mul	r23,r8,r6
 4014c94:	8520983a 	sll	r16,r16,r20
 4014c98:	1104b03a 	or	r2,r2,r4
 4014c9c:	15c0042e 	bgeu	r2,r23,4014cb0 <__umoddi3+0x33c>
 4014ca0:	1545883a 	add	r2,r2,r21
 4014ca4:	30ffffc4 	addi	r3,r6,-1
 4014ca8:	1540742e 	bgeu	r2,r21,4014e7c <__umoddi3+0x508>
 4014cac:	180d883a 	mov	r6,r3
 4014cb0:	15efc83a 	sub	r23,r2,r23
 4014cb4:	b00b883a 	mov	r5,r22
 4014cb8:	b809883a 	mov	r4,r23
 4014cbc:	d9800115 	stw	r6,4(sp)
 4014cc0:	da000015 	stw	r8,0(sp)
 4014cc4:	400a41c0 	call	400a41c <__umodsi3>
 4014cc8:	b00b883a 	mov	r5,r22
 4014ccc:	b809883a 	mov	r4,r23
 4014cd0:	1039883a 	mov	fp,r2
 4014cd4:	400a3b80 	call	400a3b8 <__udivsi3>
 4014cd8:	da000017 	ldw	r8,0(sp)
 4014cdc:	e038943a 	slli	fp,fp,16
 4014ce0:	100b883a 	mov	r5,r2
 4014ce4:	4089383a 	mul	r4,r8,r2
 4014ce8:	8a3fffcc 	andi	r8,r17,65535
 4014cec:	4710b03a 	or	r8,r8,fp
 4014cf0:	d9800117 	ldw	r6,4(sp)
 4014cf4:	4100042e 	bgeu	r8,r4,4014d08 <__umoddi3+0x394>
 4014cf8:	4551883a 	add	r8,r8,r21
 4014cfc:	10bfffc4 	addi	r2,r2,-1
 4014d00:	45405a2e 	bgeu	r8,r21,4014e6c <__umoddi3+0x4f8>
 4014d04:	100b883a 	mov	r5,r2
 4014d08:	300c943a 	slli	r6,r6,16
 4014d0c:	91ffffcc 	andi	r7,r18,65535
 4014d10:	9004d43a 	srli	r2,r18,16
 4014d14:	314cb03a 	or	r6,r6,r5
 4014d18:	317fffcc 	andi	r5,r6,65535
 4014d1c:	300cd43a 	srli	r6,r6,16
 4014d20:	29d3383a 	mul	r9,r5,r7
 4014d24:	288b383a 	mul	r5,r5,r2
 4014d28:	31cf383a 	mul	r7,r6,r7
 4014d2c:	4806d43a 	srli	r3,r9,16
 4014d30:	4111c83a 	sub	r8,r8,r4
 4014d34:	29cb883a 	add	r5,r5,r7
 4014d38:	194b883a 	add	r5,r3,r5
 4014d3c:	3085383a 	mul	r2,r6,r2
 4014d40:	29c0022e 	bgeu	r5,r7,4014d4c <__umoddi3+0x3d8>
 4014d44:	00c00074 	movhi	r3,1
 4014d48:	10c5883a 	add	r2,r2,r3
 4014d4c:	2808d43a 	srli	r4,r5,16
 4014d50:	280a943a 	slli	r5,r5,16
 4014d54:	4a7fffcc 	andi	r9,r9,65535
 4014d58:	2085883a 	add	r2,r4,r2
 4014d5c:	2a4b883a 	add	r5,r5,r9
 4014d60:	40803636 	bltu	r8,r2,4014e3c <__umoddi3+0x4c8>
 4014d64:	40804d26 	beq	r8,r2,4014e9c <__umoddi3+0x528>
 4014d68:	4089c83a 	sub	r4,r8,r2
 4014d6c:	280f883a 	mov	r7,r5
 4014d70:	81cfc83a 	sub	r7,r16,r7
 4014d74:	81c7803a 	cmpltu	r3,r16,r7
 4014d78:	20c7c83a 	sub	r3,r4,r3
 4014d7c:	1cc4983a 	sll	r2,r3,r19
 4014d80:	3d0ed83a 	srl	r7,r7,r20
 4014d84:	1d06d83a 	srl	r3,r3,r20
 4014d88:	11c4b03a 	or	r2,r2,r7
 4014d8c:	003f9306 	br	4014bdc <__alt_data_end+0xfc014bdc>
 4014d90:	9ca6983a 	sll	r19,r19,r18
 4014d94:	88e8d83a 	srl	r20,r17,r3
 4014d98:	80c4d83a 	srl	r2,r16,r3
 4014d9c:	982cd43a 	srli	r22,r19,16
 4014da0:	8ca2983a 	sll	r17,r17,r18
 4014da4:	a009883a 	mov	r4,r20
 4014da8:	b00b883a 	mov	r5,r22
 4014dac:	1478b03a 	or	fp,r2,r17
 4014db0:	400a41c0 	call	400a41c <__umodsi3>
 4014db4:	a009883a 	mov	r4,r20
 4014db8:	b00b883a 	mov	r5,r22
 4014dbc:	1023883a 	mov	r17,r2
 4014dc0:	400a3b80 	call	400a3b8 <__udivsi3>
 4014dc4:	9d7fffcc 	andi	r21,r19,65535
 4014dc8:	880a943a 	slli	r5,r17,16
 4014dcc:	e008d43a 	srli	r4,fp,16
 4014dd0:	a885383a 	mul	r2,r21,r2
 4014dd4:	84a8983a 	sll	r20,r16,r18
 4014dd8:	2148b03a 	or	r4,r4,r5
 4014ddc:	2080042e 	bgeu	r4,r2,4014df0 <__umoddi3+0x47c>
 4014de0:	24c9883a 	add	r4,r4,r19
 4014de4:	24c00236 	bltu	r4,r19,4014df0 <__umoddi3+0x47c>
 4014de8:	2080012e 	bgeu	r4,r2,4014df0 <__umoddi3+0x47c>
 4014dec:	24c9883a 	add	r4,r4,r19
 4014df0:	20a3c83a 	sub	r17,r4,r2
 4014df4:	b00b883a 	mov	r5,r22
 4014df8:	8809883a 	mov	r4,r17
 4014dfc:	400a41c0 	call	400a41c <__umodsi3>
 4014e00:	102f883a 	mov	r23,r2
 4014e04:	8809883a 	mov	r4,r17
 4014e08:	b00b883a 	mov	r5,r22
 4014e0c:	400a3b80 	call	400a3b8 <__udivsi3>
 4014e10:	b82e943a 	slli	r23,r23,16
 4014e14:	a885383a 	mul	r2,r21,r2
 4014e18:	e13fffcc 	andi	r4,fp,65535
 4014e1c:	25c8b03a 	or	r4,r4,r23
 4014e20:	2080042e 	bgeu	r4,r2,4014e34 <__umoddi3+0x4c0>
 4014e24:	24c9883a 	add	r4,r4,r19
 4014e28:	24c00236 	bltu	r4,r19,4014e34 <__umoddi3+0x4c0>
 4014e2c:	2080012e 	bgeu	r4,r2,4014e34 <__umoddi3+0x4c0>
 4014e30:	24c9883a 	add	r4,r4,r19
 4014e34:	20a3c83a 	sub	r17,r4,r2
 4014e38:	003f4806 	br	4014b5c <__alt_data_end+0xfc014b5c>
 4014e3c:	2c8fc83a 	sub	r7,r5,r18
 4014e40:	1545c83a 	sub	r2,r2,r21
 4014e44:	29cb803a 	cmpltu	r5,r5,r7
 4014e48:	1145c83a 	sub	r2,r2,r5
 4014e4c:	4089c83a 	sub	r4,r8,r2
 4014e50:	003fc706 	br	4014d70 <__alt_data_end+0xfc014d70>
 4014e54:	01000604 	movi	r4,24
 4014e58:	003f1806 	br	4014abc <__alt_data_end+0xfc014abc>
 4014e5c:	00800604 	movi	r2,24
 4014e60:	003f3206 	br	4014b2c <__alt_data_end+0xfc014b2c>
 4014e64:	01000604 	movi	r4,24
 4014e68:	003ed906 	br	40149d0 <__alt_data_end+0xfc0149d0>
 4014e6c:	413fa52e 	bgeu	r8,r4,4014d04 <__alt_data_end+0xfc014d04>
 4014e70:	297fff84 	addi	r5,r5,-2
 4014e74:	4551883a 	add	r8,r8,r21
 4014e78:	003fa306 	br	4014d08 <__alt_data_end+0xfc014d08>
 4014e7c:	15ff8b2e 	bgeu	r2,r23,4014cac <__alt_data_end+0xfc014cac>
 4014e80:	31bfff84 	addi	r6,r6,-2
 4014e84:	1545883a 	add	r2,r2,r21
 4014e88:	003f8906 	br	4014cb0 <__alt_data_end+0xfc014cb0>
 4014e8c:	24c9883a 	add	r4,r4,r19
 4014e90:	003eee06 	br	4014a4c <__alt_data_end+0xfc014a4c>
 4014e94:	8005883a 	mov	r2,r16
 4014e98:	003f1706 	br	4014af8 <__alt_data_end+0xfc014af8>
 4014e9c:	817fe736 	bltu	r16,r5,4014e3c <__alt_data_end+0xfc014e3c>
 4014ea0:	280f883a 	mov	r7,r5
 4014ea4:	0009883a 	mov	r4,zero
 4014ea8:	003fb106 	br	4014d70 <__alt_data_end+0xfc014d70>

04014eac <__adddf3>:
 4014eac:	02c00434 	movhi	r11,16
 4014eb0:	5affffc4 	addi	r11,r11,-1
 4014eb4:	2806d7fa 	srli	r3,r5,31
 4014eb8:	2ad4703a 	and	r10,r5,r11
 4014ebc:	3ad2703a 	and	r9,r7,r11
 4014ec0:	3804d53a 	srli	r2,r7,20
 4014ec4:	3018d77a 	srli	r12,r6,29
 4014ec8:	280ad53a 	srli	r5,r5,20
 4014ecc:	501490fa 	slli	r10,r10,3
 4014ed0:	2010d77a 	srli	r8,r4,29
 4014ed4:	481290fa 	slli	r9,r9,3
 4014ed8:	380ed7fa 	srli	r7,r7,31
 4014edc:	defffb04 	addi	sp,sp,-20
 4014ee0:	dc800215 	stw	r18,8(sp)
 4014ee4:	dc400115 	stw	r17,4(sp)
 4014ee8:	dc000015 	stw	r16,0(sp)
 4014eec:	dfc00415 	stw	ra,16(sp)
 4014ef0:	dcc00315 	stw	r19,12(sp)
 4014ef4:	1c803fcc 	andi	r18,r3,255
 4014ef8:	2c01ffcc 	andi	r16,r5,2047
 4014efc:	5210b03a 	or	r8,r10,r8
 4014f00:	202290fa 	slli	r17,r4,3
 4014f04:	1081ffcc 	andi	r2,r2,2047
 4014f08:	4b12b03a 	or	r9,r9,r12
 4014f0c:	300c90fa 	slli	r6,r6,3
 4014f10:	91c07526 	beq	r18,r7,40150e8 <__adddf3+0x23c>
 4014f14:	8087c83a 	sub	r3,r16,r2
 4014f18:	00c0ab0e 	bge	zero,r3,40151c8 <__adddf3+0x31c>
 4014f1c:	10002a1e 	bne	r2,zero,4014fc8 <__adddf3+0x11c>
 4014f20:	4984b03a 	or	r2,r9,r6
 4014f24:	1000961e 	bne	r2,zero,4015180 <__adddf3+0x2d4>
 4014f28:	888001cc 	andi	r2,r17,7
 4014f2c:	10000726 	beq	r2,zero,4014f4c <__adddf3+0xa0>
 4014f30:	888003cc 	andi	r2,r17,15
 4014f34:	00c00104 	movi	r3,4
 4014f38:	10c00426 	beq	r2,r3,4014f4c <__adddf3+0xa0>
 4014f3c:	88c7883a 	add	r3,r17,r3
 4014f40:	1c63803a 	cmpltu	r17,r3,r17
 4014f44:	4451883a 	add	r8,r8,r17
 4014f48:	1823883a 	mov	r17,r3
 4014f4c:	4080202c 	andhi	r2,r8,128
 4014f50:	10005926 	beq	r2,zero,40150b8 <__adddf3+0x20c>
 4014f54:	84000044 	addi	r16,r16,1
 4014f58:	0081ffc4 	movi	r2,2047
 4014f5c:	8080ba26 	beq	r16,r2,4015248 <__adddf3+0x39c>
 4014f60:	00bfe034 	movhi	r2,65408
 4014f64:	10bfffc4 	addi	r2,r2,-1
 4014f68:	4090703a 	and	r8,r8,r2
 4014f6c:	4004977a 	slli	r2,r8,29
 4014f70:	4010927a 	slli	r8,r8,9
 4014f74:	8822d0fa 	srli	r17,r17,3
 4014f78:	8401ffcc 	andi	r16,r16,2047
 4014f7c:	4010d33a 	srli	r8,r8,12
 4014f80:	9007883a 	mov	r3,r18
 4014f84:	1444b03a 	or	r2,r2,r17
 4014f88:	8401ffcc 	andi	r16,r16,2047
 4014f8c:	8020953a 	slli	r16,r16,20
 4014f90:	18c03fcc 	andi	r3,r3,255
 4014f94:	01000434 	movhi	r4,16
 4014f98:	213fffc4 	addi	r4,r4,-1
 4014f9c:	180697fa 	slli	r3,r3,31
 4014fa0:	4110703a 	and	r8,r8,r4
 4014fa4:	4410b03a 	or	r8,r8,r16
 4014fa8:	40c6b03a 	or	r3,r8,r3
 4014fac:	dfc00417 	ldw	ra,16(sp)
 4014fb0:	dcc00317 	ldw	r19,12(sp)
 4014fb4:	dc800217 	ldw	r18,8(sp)
 4014fb8:	dc400117 	ldw	r17,4(sp)
 4014fbc:	dc000017 	ldw	r16,0(sp)
 4014fc0:	dec00504 	addi	sp,sp,20
 4014fc4:	f800283a 	ret
 4014fc8:	0081ffc4 	movi	r2,2047
 4014fcc:	80bfd626 	beq	r16,r2,4014f28 <__alt_data_end+0xfc014f28>
 4014fd0:	4a402034 	orhi	r9,r9,128
 4014fd4:	00800e04 	movi	r2,56
 4014fd8:	10c09f16 	blt	r2,r3,4015258 <__adddf3+0x3ac>
 4014fdc:	008007c4 	movi	r2,31
 4014fe0:	10c0c216 	blt	r2,r3,40152ec <__adddf3+0x440>
 4014fe4:	00800804 	movi	r2,32
 4014fe8:	10c5c83a 	sub	r2,r2,r3
 4014fec:	488a983a 	sll	r5,r9,r2
 4014ff0:	30c8d83a 	srl	r4,r6,r3
 4014ff4:	3084983a 	sll	r2,r6,r2
 4014ff8:	48c6d83a 	srl	r3,r9,r3
 4014ffc:	290cb03a 	or	r6,r5,r4
 4015000:	1004c03a 	cmpne	r2,r2,zero
 4015004:	308cb03a 	or	r6,r6,r2
 4015008:	898dc83a 	sub	r6,r17,r6
 401500c:	89a3803a 	cmpltu	r17,r17,r6
 4015010:	40d1c83a 	sub	r8,r8,r3
 4015014:	4451c83a 	sub	r8,r8,r17
 4015018:	3023883a 	mov	r17,r6
 401501c:	4080202c 	andhi	r2,r8,128
 4015020:	10002326 	beq	r2,zero,40150b0 <__adddf3+0x204>
 4015024:	04c02034 	movhi	r19,128
 4015028:	9cffffc4 	addi	r19,r19,-1
 401502c:	44e6703a 	and	r19,r8,r19
 4015030:	98007626 	beq	r19,zero,401520c <__adddf3+0x360>
 4015034:	9809883a 	mov	r4,r19
 4015038:	40174b00 	call	40174b0 <__clzsi2>
 401503c:	10fffe04 	addi	r3,r2,-8
 4015040:	010007c4 	movi	r4,31
 4015044:	20c07716 	blt	r4,r3,4015224 <__adddf3+0x378>
 4015048:	00800804 	movi	r2,32
 401504c:	10c5c83a 	sub	r2,r2,r3
 4015050:	8884d83a 	srl	r2,r17,r2
 4015054:	98d0983a 	sll	r8,r19,r3
 4015058:	88e2983a 	sll	r17,r17,r3
 401505c:	1204b03a 	or	r2,r2,r8
 4015060:	1c007416 	blt	r3,r16,4015234 <__adddf3+0x388>
 4015064:	1c21c83a 	sub	r16,r3,r16
 4015068:	82000044 	addi	r8,r16,1
 401506c:	00c007c4 	movi	r3,31
 4015070:	1a009116 	blt	r3,r8,40152b8 <__adddf3+0x40c>
 4015074:	00c00804 	movi	r3,32
 4015078:	1a07c83a 	sub	r3,r3,r8
 401507c:	8a08d83a 	srl	r4,r17,r8
 4015080:	88e2983a 	sll	r17,r17,r3
 4015084:	10c6983a 	sll	r3,r2,r3
 4015088:	1210d83a 	srl	r8,r2,r8
 401508c:	8804c03a 	cmpne	r2,r17,zero
 4015090:	1906b03a 	or	r3,r3,r4
 4015094:	18a2b03a 	or	r17,r3,r2
 4015098:	0021883a 	mov	r16,zero
 401509c:	003fa206 	br	4014f28 <__alt_data_end+0xfc014f28>
 40150a0:	1890b03a 	or	r8,r3,r2
 40150a4:	40017d26 	beq	r8,zero,401569c <__adddf3+0x7f0>
 40150a8:	1011883a 	mov	r8,r2
 40150ac:	1823883a 	mov	r17,r3
 40150b0:	888001cc 	andi	r2,r17,7
 40150b4:	103f9e1e 	bne	r2,zero,4014f30 <__alt_data_end+0xfc014f30>
 40150b8:	4004977a 	slli	r2,r8,29
 40150bc:	8822d0fa 	srli	r17,r17,3
 40150c0:	4010d0fa 	srli	r8,r8,3
 40150c4:	9007883a 	mov	r3,r18
 40150c8:	1444b03a 	or	r2,r2,r17
 40150cc:	0101ffc4 	movi	r4,2047
 40150d0:	81002426 	beq	r16,r4,4015164 <__adddf3+0x2b8>
 40150d4:	8120703a 	and	r16,r16,r4
 40150d8:	01000434 	movhi	r4,16
 40150dc:	213fffc4 	addi	r4,r4,-1
 40150e0:	4110703a 	and	r8,r8,r4
 40150e4:	003fa806 	br	4014f88 <__alt_data_end+0xfc014f88>
 40150e8:	8089c83a 	sub	r4,r16,r2
 40150ec:	01005e0e 	bge	zero,r4,4015268 <__adddf3+0x3bc>
 40150f0:	10002b26 	beq	r2,zero,40151a0 <__adddf3+0x2f4>
 40150f4:	0081ffc4 	movi	r2,2047
 40150f8:	80bf8b26 	beq	r16,r2,4014f28 <__alt_data_end+0xfc014f28>
 40150fc:	4a402034 	orhi	r9,r9,128
 4015100:	00800e04 	movi	r2,56
 4015104:	1100a40e 	bge	r2,r4,4015398 <__adddf3+0x4ec>
 4015108:	498cb03a 	or	r6,r9,r6
 401510c:	300ac03a 	cmpne	r5,r6,zero
 4015110:	0013883a 	mov	r9,zero
 4015114:	2c4b883a 	add	r5,r5,r17
 4015118:	2c63803a 	cmpltu	r17,r5,r17
 401511c:	4a11883a 	add	r8,r9,r8
 4015120:	8a11883a 	add	r8,r17,r8
 4015124:	2823883a 	mov	r17,r5
 4015128:	4080202c 	andhi	r2,r8,128
 401512c:	103fe026 	beq	r2,zero,40150b0 <__alt_data_end+0xfc0150b0>
 4015130:	84000044 	addi	r16,r16,1
 4015134:	0081ffc4 	movi	r2,2047
 4015138:	8080d226 	beq	r16,r2,4015484 <__adddf3+0x5d8>
 401513c:	00bfe034 	movhi	r2,65408
 4015140:	10bfffc4 	addi	r2,r2,-1
 4015144:	4090703a 	and	r8,r8,r2
 4015148:	880ad07a 	srli	r5,r17,1
 401514c:	400897fa 	slli	r4,r8,31
 4015150:	88c0004c 	andi	r3,r17,1
 4015154:	28e2b03a 	or	r17,r5,r3
 4015158:	4010d07a 	srli	r8,r8,1
 401515c:	2462b03a 	or	r17,r4,r17
 4015160:	003f7106 	br	4014f28 <__alt_data_end+0xfc014f28>
 4015164:	4088b03a 	or	r4,r8,r2
 4015168:	20014526 	beq	r4,zero,4015680 <__adddf3+0x7d4>
 401516c:	01000434 	movhi	r4,16
 4015170:	42000234 	orhi	r8,r8,8
 4015174:	213fffc4 	addi	r4,r4,-1
 4015178:	4110703a 	and	r8,r8,r4
 401517c:	003f8206 	br	4014f88 <__alt_data_end+0xfc014f88>
 4015180:	18ffffc4 	addi	r3,r3,-1
 4015184:	1800491e 	bne	r3,zero,40152ac <__adddf3+0x400>
 4015188:	898bc83a 	sub	r5,r17,r6
 401518c:	8963803a 	cmpltu	r17,r17,r5
 4015190:	4251c83a 	sub	r8,r8,r9
 4015194:	4451c83a 	sub	r8,r8,r17
 4015198:	2823883a 	mov	r17,r5
 401519c:	003f9f06 	br	401501c <__alt_data_end+0xfc01501c>
 40151a0:	4984b03a 	or	r2,r9,r6
 40151a4:	103f6026 	beq	r2,zero,4014f28 <__alt_data_end+0xfc014f28>
 40151a8:	213fffc4 	addi	r4,r4,-1
 40151ac:	2000931e 	bne	r4,zero,40153fc <__adddf3+0x550>
 40151b0:	898d883a 	add	r6,r17,r6
 40151b4:	3463803a 	cmpltu	r17,r6,r17
 40151b8:	4251883a 	add	r8,r8,r9
 40151bc:	8a11883a 	add	r8,r17,r8
 40151c0:	3023883a 	mov	r17,r6
 40151c4:	003fd806 	br	4015128 <__alt_data_end+0xfc015128>
 40151c8:	1800541e 	bne	r3,zero,401531c <__adddf3+0x470>
 40151cc:	80800044 	addi	r2,r16,1
 40151d0:	1081ffcc 	andi	r2,r2,2047
 40151d4:	00c00044 	movi	r3,1
 40151d8:	1880a00e 	bge	r3,r2,401545c <__adddf3+0x5b0>
 40151dc:	8989c83a 	sub	r4,r17,r6
 40151e0:	8905803a 	cmpltu	r2,r17,r4
 40151e4:	4267c83a 	sub	r19,r8,r9
 40151e8:	98a7c83a 	sub	r19,r19,r2
 40151ec:	9880202c 	andhi	r2,r19,128
 40151f0:	10006326 	beq	r2,zero,4015380 <__adddf3+0x4d4>
 40151f4:	3463c83a 	sub	r17,r6,r17
 40151f8:	4a07c83a 	sub	r3,r9,r8
 40151fc:	344d803a 	cmpltu	r6,r6,r17
 4015200:	19a7c83a 	sub	r19,r3,r6
 4015204:	3825883a 	mov	r18,r7
 4015208:	983f8a1e 	bne	r19,zero,4015034 <__alt_data_end+0xfc015034>
 401520c:	8809883a 	mov	r4,r17
 4015210:	40174b00 	call	40174b0 <__clzsi2>
 4015214:	10800804 	addi	r2,r2,32
 4015218:	10fffe04 	addi	r3,r2,-8
 401521c:	010007c4 	movi	r4,31
 4015220:	20ff890e 	bge	r4,r3,4015048 <__alt_data_end+0xfc015048>
 4015224:	10bff604 	addi	r2,r2,-40
 4015228:	8884983a 	sll	r2,r17,r2
 401522c:	0023883a 	mov	r17,zero
 4015230:	1c3f8c0e 	bge	r3,r16,4015064 <__alt_data_end+0xfc015064>
 4015234:	023fe034 	movhi	r8,65408
 4015238:	423fffc4 	addi	r8,r8,-1
 401523c:	80e1c83a 	sub	r16,r16,r3
 4015240:	1210703a 	and	r8,r2,r8
 4015244:	003f3806 	br	4014f28 <__alt_data_end+0xfc014f28>
 4015248:	9007883a 	mov	r3,r18
 401524c:	0011883a 	mov	r8,zero
 4015250:	0005883a 	mov	r2,zero
 4015254:	003f4c06 	br	4014f88 <__alt_data_end+0xfc014f88>
 4015258:	498cb03a 	or	r6,r9,r6
 401525c:	300cc03a 	cmpne	r6,r6,zero
 4015260:	0007883a 	mov	r3,zero
 4015264:	003f6806 	br	4015008 <__alt_data_end+0xfc015008>
 4015268:	20009c1e 	bne	r4,zero,40154dc <__adddf3+0x630>
 401526c:	80800044 	addi	r2,r16,1
 4015270:	1141ffcc 	andi	r5,r2,2047
 4015274:	01000044 	movi	r4,1
 4015278:	2140670e 	bge	r4,r5,4015418 <__adddf3+0x56c>
 401527c:	0101ffc4 	movi	r4,2047
 4015280:	11007f26 	beq	r2,r4,4015480 <__adddf3+0x5d4>
 4015284:	898d883a 	add	r6,r17,r6
 4015288:	4247883a 	add	r3,r8,r9
 401528c:	3451803a 	cmpltu	r8,r6,r17
 4015290:	40d1883a 	add	r8,r8,r3
 4015294:	402297fa 	slli	r17,r8,31
 4015298:	300cd07a 	srli	r6,r6,1
 401529c:	4010d07a 	srli	r8,r8,1
 40152a0:	1021883a 	mov	r16,r2
 40152a4:	89a2b03a 	or	r17,r17,r6
 40152a8:	003f1f06 	br	4014f28 <__alt_data_end+0xfc014f28>
 40152ac:	0081ffc4 	movi	r2,2047
 40152b0:	80bf481e 	bne	r16,r2,4014fd4 <__alt_data_end+0xfc014fd4>
 40152b4:	003f1c06 	br	4014f28 <__alt_data_end+0xfc014f28>
 40152b8:	843ff844 	addi	r16,r16,-31
 40152bc:	01000804 	movi	r4,32
 40152c0:	1406d83a 	srl	r3,r2,r16
 40152c4:	41005026 	beq	r8,r4,4015408 <__adddf3+0x55c>
 40152c8:	01001004 	movi	r4,64
 40152cc:	2211c83a 	sub	r8,r4,r8
 40152d0:	1204983a 	sll	r2,r2,r8
 40152d4:	88a2b03a 	or	r17,r17,r2
 40152d8:	8822c03a 	cmpne	r17,r17,zero
 40152dc:	1c62b03a 	or	r17,r3,r17
 40152e0:	0011883a 	mov	r8,zero
 40152e4:	0021883a 	mov	r16,zero
 40152e8:	003f7106 	br	40150b0 <__alt_data_end+0xfc0150b0>
 40152ec:	193ff804 	addi	r4,r3,-32
 40152f0:	00800804 	movi	r2,32
 40152f4:	4908d83a 	srl	r4,r9,r4
 40152f8:	18804526 	beq	r3,r2,4015410 <__adddf3+0x564>
 40152fc:	00801004 	movi	r2,64
 4015300:	10c5c83a 	sub	r2,r2,r3
 4015304:	4886983a 	sll	r3,r9,r2
 4015308:	198cb03a 	or	r6,r3,r6
 401530c:	300cc03a 	cmpne	r6,r6,zero
 4015310:	218cb03a 	or	r6,r4,r6
 4015314:	0007883a 	mov	r3,zero
 4015318:	003f3b06 	br	4015008 <__alt_data_end+0xfc015008>
 401531c:	80002a26 	beq	r16,zero,40153c8 <__adddf3+0x51c>
 4015320:	0101ffc4 	movi	r4,2047
 4015324:	11006826 	beq	r2,r4,40154c8 <__adddf3+0x61c>
 4015328:	00c7c83a 	sub	r3,zero,r3
 401532c:	42002034 	orhi	r8,r8,128
 4015330:	01000e04 	movi	r4,56
 4015334:	20c07c16 	blt	r4,r3,4015528 <__adddf3+0x67c>
 4015338:	010007c4 	movi	r4,31
 401533c:	20c0da16 	blt	r4,r3,40156a8 <__adddf3+0x7fc>
 4015340:	01000804 	movi	r4,32
 4015344:	20c9c83a 	sub	r4,r4,r3
 4015348:	4114983a 	sll	r10,r8,r4
 401534c:	88cad83a 	srl	r5,r17,r3
 4015350:	8908983a 	sll	r4,r17,r4
 4015354:	40c6d83a 	srl	r3,r8,r3
 4015358:	5162b03a 	or	r17,r10,r5
 401535c:	2008c03a 	cmpne	r4,r4,zero
 4015360:	8922b03a 	or	r17,r17,r4
 4015364:	3463c83a 	sub	r17,r6,r17
 4015368:	48c7c83a 	sub	r3,r9,r3
 401536c:	344d803a 	cmpltu	r6,r6,r17
 4015370:	1991c83a 	sub	r8,r3,r6
 4015374:	1021883a 	mov	r16,r2
 4015378:	3825883a 	mov	r18,r7
 401537c:	003f2706 	br	401501c <__alt_data_end+0xfc01501c>
 4015380:	24d0b03a 	or	r8,r4,r19
 4015384:	40001b1e 	bne	r8,zero,40153f4 <__adddf3+0x548>
 4015388:	0005883a 	mov	r2,zero
 401538c:	0007883a 	mov	r3,zero
 4015390:	0021883a 	mov	r16,zero
 4015394:	003f4d06 	br	40150cc <__alt_data_end+0xfc0150cc>
 4015398:	008007c4 	movi	r2,31
 401539c:	11003c16 	blt	r2,r4,4015490 <__adddf3+0x5e4>
 40153a0:	00800804 	movi	r2,32
 40153a4:	1105c83a 	sub	r2,r2,r4
 40153a8:	488e983a 	sll	r7,r9,r2
 40153ac:	310ad83a 	srl	r5,r6,r4
 40153b0:	3084983a 	sll	r2,r6,r2
 40153b4:	4912d83a 	srl	r9,r9,r4
 40153b8:	394ab03a 	or	r5,r7,r5
 40153bc:	1004c03a 	cmpne	r2,r2,zero
 40153c0:	288ab03a 	or	r5,r5,r2
 40153c4:	003f5306 	br	4015114 <__alt_data_end+0xfc015114>
 40153c8:	4448b03a 	or	r4,r8,r17
 40153cc:	20003e26 	beq	r4,zero,40154c8 <__adddf3+0x61c>
 40153d0:	00c6303a 	nor	r3,zero,r3
 40153d4:	18003a1e 	bne	r3,zero,40154c0 <__adddf3+0x614>
 40153d8:	3463c83a 	sub	r17,r6,r17
 40153dc:	4a07c83a 	sub	r3,r9,r8
 40153e0:	344d803a 	cmpltu	r6,r6,r17
 40153e4:	1991c83a 	sub	r8,r3,r6
 40153e8:	1021883a 	mov	r16,r2
 40153ec:	3825883a 	mov	r18,r7
 40153f0:	003f0a06 	br	401501c <__alt_data_end+0xfc01501c>
 40153f4:	2023883a 	mov	r17,r4
 40153f8:	003f0d06 	br	4015030 <__alt_data_end+0xfc015030>
 40153fc:	0081ffc4 	movi	r2,2047
 4015400:	80bf3f1e 	bne	r16,r2,4015100 <__alt_data_end+0xfc015100>
 4015404:	003ec806 	br	4014f28 <__alt_data_end+0xfc014f28>
 4015408:	0005883a 	mov	r2,zero
 401540c:	003fb106 	br	40152d4 <__alt_data_end+0xfc0152d4>
 4015410:	0007883a 	mov	r3,zero
 4015414:	003fbc06 	br	4015308 <__alt_data_end+0xfc015308>
 4015418:	4444b03a 	or	r2,r8,r17
 401541c:	8000871e 	bne	r16,zero,401563c <__adddf3+0x790>
 4015420:	1000ba26 	beq	r2,zero,401570c <__adddf3+0x860>
 4015424:	4984b03a 	or	r2,r9,r6
 4015428:	103ebf26 	beq	r2,zero,4014f28 <__alt_data_end+0xfc014f28>
 401542c:	8985883a 	add	r2,r17,r6
 4015430:	4247883a 	add	r3,r8,r9
 4015434:	1451803a 	cmpltu	r8,r2,r17
 4015438:	40d1883a 	add	r8,r8,r3
 401543c:	40c0202c 	andhi	r3,r8,128
 4015440:	1023883a 	mov	r17,r2
 4015444:	183f1a26 	beq	r3,zero,40150b0 <__alt_data_end+0xfc0150b0>
 4015448:	00bfe034 	movhi	r2,65408
 401544c:	10bfffc4 	addi	r2,r2,-1
 4015450:	2021883a 	mov	r16,r4
 4015454:	4090703a 	and	r8,r8,r2
 4015458:	003eb306 	br	4014f28 <__alt_data_end+0xfc014f28>
 401545c:	4444b03a 	or	r2,r8,r17
 4015460:	8000291e 	bne	r16,zero,4015508 <__adddf3+0x65c>
 4015464:	10004b1e 	bne	r2,zero,4015594 <__adddf3+0x6e8>
 4015468:	4990b03a 	or	r8,r9,r6
 401546c:	40008b26 	beq	r8,zero,401569c <__adddf3+0x7f0>
 4015470:	4811883a 	mov	r8,r9
 4015474:	3023883a 	mov	r17,r6
 4015478:	3825883a 	mov	r18,r7
 401547c:	003eaa06 	br	4014f28 <__alt_data_end+0xfc014f28>
 4015480:	1021883a 	mov	r16,r2
 4015484:	0011883a 	mov	r8,zero
 4015488:	0005883a 	mov	r2,zero
 401548c:	003f0f06 	br	40150cc <__alt_data_end+0xfc0150cc>
 4015490:	217ff804 	addi	r5,r4,-32
 4015494:	00800804 	movi	r2,32
 4015498:	494ad83a 	srl	r5,r9,r5
 401549c:	20807d26 	beq	r4,r2,4015694 <__adddf3+0x7e8>
 40154a0:	00801004 	movi	r2,64
 40154a4:	1109c83a 	sub	r4,r2,r4
 40154a8:	4912983a 	sll	r9,r9,r4
 40154ac:	498cb03a 	or	r6,r9,r6
 40154b0:	300cc03a 	cmpne	r6,r6,zero
 40154b4:	298ab03a 	or	r5,r5,r6
 40154b8:	0013883a 	mov	r9,zero
 40154bc:	003f1506 	br	4015114 <__alt_data_end+0xfc015114>
 40154c0:	0101ffc4 	movi	r4,2047
 40154c4:	113f9a1e 	bne	r2,r4,4015330 <__alt_data_end+0xfc015330>
 40154c8:	4811883a 	mov	r8,r9
 40154cc:	3023883a 	mov	r17,r6
 40154d0:	1021883a 	mov	r16,r2
 40154d4:	3825883a 	mov	r18,r7
 40154d8:	003e9306 	br	4014f28 <__alt_data_end+0xfc014f28>
 40154dc:	8000161e 	bne	r16,zero,4015538 <__adddf3+0x68c>
 40154e0:	444ab03a 	or	r5,r8,r17
 40154e4:	28005126 	beq	r5,zero,401562c <__adddf3+0x780>
 40154e8:	0108303a 	nor	r4,zero,r4
 40154ec:	20004d1e 	bne	r4,zero,4015624 <__adddf3+0x778>
 40154f0:	89a3883a 	add	r17,r17,r6
 40154f4:	4253883a 	add	r9,r8,r9
 40154f8:	898d803a 	cmpltu	r6,r17,r6
 40154fc:	3251883a 	add	r8,r6,r9
 4015500:	1021883a 	mov	r16,r2
 4015504:	003f0806 	br	4015128 <__alt_data_end+0xfc015128>
 4015508:	1000301e 	bne	r2,zero,40155cc <__adddf3+0x720>
 401550c:	4984b03a 	or	r2,r9,r6
 4015510:	10007126 	beq	r2,zero,40156d8 <__adddf3+0x82c>
 4015514:	4811883a 	mov	r8,r9
 4015518:	3023883a 	mov	r17,r6
 401551c:	3825883a 	mov	r18,r7
 4015520:	0401ffc4 	movi	r16,2047
 4015524:	003e8006 	br	4014f28 <__alt_data_end+0xfc014f28>
 4015528:	4462b03a 	or	r17,r8,r17
 401552c:	8822c03a 	cmpne	r17,r17,zero
 4015530:	0007883a 	mov	r3,zero
 4015534:	003f8b06 	br	4015364 <__alt_data_end+0xfc015364>
 4015538:	0141ffc4 	movi	r5,2047
 401553c:	11403b26 	beq	r2,r5,401562c <__adddf3+0x780>
 4015540:	0109c83a 	sub	r4,zero,r4
 4015544:	42002034 	orhi	r8,r8,128
 4015548:	01400e04 	movi	r5,56
 401554c:	29006716 	blt	r5,r4,40156ec <__adddf3+0x840>
 4015550:	014007c4 	movi	r5,31
 4015554:	29007016 	blt	r5,r4,4015718 <__adddf3+0x86c>
 4015558:	01400804 	movi	r5,32
 401555c:	290bc83a 	sub	r5,r5,r4
 4015560:	4154983a 	sll	r10,r8,r5
 4015564:	890ed83a 	srl	r7,r17,r4
 4015568:	894a983a 	sll	r5,r17,r5
 401556c:	4108d83a 	srl	r4,r8,r4
 4015570:	51e2b03a 	or	r17,r10,r7
 4015574:	280ac03a 	cmpne	r5,r5,zero
 4015578:	8962b03a 	or	r17,r17,r5
 401557c:	89a3883a 	add	r17,r17,r6
 4015580:	2253883a 	add	r9,r4,r9
 4015584:	898d803a 	cmpltu	r6,r17,r6
 4015588:	3251883a 	add	r8,r6,r9
 401558c:	1021883a 	mov	r16,r2
 4015590:	003ee506 	br	4015128 <__alt_data_end+0xfc015128>
 4015594:	4984b03a 	or	r2,r9,r6
 4015598:	103e6326 	beq	r2,zero,4014f28 <__alt_data_end+0xfc014f28>
 401559c:	8987c83a 	sub	r3,r17,r6
 40155a0:	88c9803a 	cmpltu	r4,r17,r3
 40155a4:	4245c83a 	sub	r2,r8,r9
 40155a8:	1105c83a 	sub	r2,r2,r4
 40155ac:	1100202c 	andhi	r4,r2,128
 40155b0:	203ebb26 	beq	r4,zero,40150a0 <__alt_data_end+0xfc0150a0>
 40155b4:	3463c83a 	sub	r17,r6,r17
 40155b8:	4a07c83a 	sub	r3,r9,r8
 40155bc:	344d803a 	cmpltu	r6,r6,r17
 40155c0:	1991c83a 	sub	r8,r3,r6
 40155c4:	3825883a 	mov	r18,r7
 40155c8:	003e5706 	br	4014f28 <__alt_data_end+0xfc014f28>
 40155cc:	4984b03a 	or	r2,r9,r6
 40155d0:	10002e26 	beq	r2,zero,401568c <__adddf3+0x7e0>
 40155d4:	4004d0fa 	srli	r2,r8,3
 40155d8:	8822d0fa 	srli	r17,r17,3
 40155dc:	4010977a 	slli	r8,r8,29
 40155e0:	10c0022c 	andhi	r3,r2,8
 40155e4:	4462b03a 	or	r17,r8,r17
 40155e8:	18000826 	beq	r3,zero,401560c <__adddf3+0x760>
 40155ec:	4808d0fa 	srli	r4,r9,3
 40155f0:	20c0022c 	andhi	r3,r4,8
 40155f4:	1800051e 	bne	r3,zero,401560c <__adddf3+0x760>
 40155f8:	300cd0fa 	srli	r6,r6,3
 40155fc:	4806977a 	slli	r3,r9,29
 4015600:	2005883a 	mov	r2,r4
 4015604:	3825883a 	mov	r18,r7
 4015608:	19a2b03a 	or	r17,r3,r6
 401560c:	8810d77a 	srli	r8,r17,29
 4015610:	100490fa 	slli	r2,r2,3
 4015614:	882290fa 	slli	r17,r17,3
 4015618:	0401ffc4 	movi	r16,2047
 401561c:	4090b03a 	or	r8,r8,r2
 4015620:	003e4106 	br	4014f28 <__alt_data_end+0xfc014f28>
 4015624:	0141ffc4 	movi	r5,2047
 4015628:	117fc71e 	bne	r2,r5,4015548 <__alt_data_end+0xfc015548>
 401562c:	4811883a 	mov	r8,r9
 4015630:	3023883a 	mov	r17,r6
 4015634:	1021883a 	mov	r16,r2
 4015638:	003e3b06 	br	4014f28 <__alt_data_end+0xfc014f28>
 401563c:	10002f26 	beq	r2,zero,40156fc <__adddf3+0x850>
 4015640:	4984b03a 	or	r2,r9,r6
 4015644:	10001126 	beq	r2,zero,401568c <__adddf3+0x7e0>
 4015648:	4004d0fa 	srli	r2,r8,3
 401564c:	8822d0fa 	srli	r17,r17,3
 4015650:	4010977a 	slli	r8,r8,29
 4015654:	10c0022c 	andhi	r3,r2,8
 4015658:	4462b03a 	or	r17,r8,r17
 401565c:	183feb26 	beq	r3,zero,401560c <__alt_data_end+0xfc01560c>
 4015660:	4808d0fa 	srli	r4,r9,3
 4015664:	20c0022c 	andhi	r3,r4,8
 4015668:	183fe81e 	bne	r3,zero,401560c <__alt_data_end+0xfc01560c>
 401566c:	300cd0fa 	srli	r6,r6,3
 4015670:	4806977a 	slli	r3,r9,29
 4015674:	2005883a 	mov	r2,r4
 4015678:	19a2b03a 	or	r17,r3,r6
 401567c:	003fe306 	br	401560c <__alt_data_end+0xfc01560c>
 4015680:	0011883a 	mov	r8,zero
 4015684:	0005883a 	mov	r2,zero
 4015688:	003e3f06 	br	4014f88 <__alt_data_end+0xfc014f88>
 401568c:	0401ffc4 	movi	r16,2047
 4015690:	003e2506 	br	4014f28 <__alt_data_end+0xfc014f28>
 4015694:	0013883a 	mov	r9,zero
 4015698:	003f8406 	br	40154ac <__alt_data_end+0xfc0154ac>
 401569c:	0005883a 	mov	r2,zero
 40156a0:	0007883a 	mov	r3,zero
 40156a4:	003e8906 	br	40150cc <__alt_data_end+0xfc0150cc>
 40156a8:	197ff804 	addi	r5,r3,-32
 40156ac:	01000804 	movi	r4,32
 40156b0:	414ad83a 	srl	r5,r8,r5
 40156b4:	19002426 	beq	r3,r4,4015748 <__adddf3+0x89c>
 40156b8:	01001004 	movi	r4,64
 40156bc:	20c7c83a 	sub	r3,r4,r3
 40156c0:	40c6983a 	sll	r3,r8,r3
 40156c4:	1c46b03a 	or	r3,r3,r17
 40156c8:	1806c03a 	cmpne	r3,r3,zero
 40156cc:	28e2b03a 	or	r17,r5,r3
 40156d0:	0007883a 	mov	r3,zero
 40156d4:	003f2306 	br	4015364 <__alt_data_end+0xfc015364>
 40156d8:	0007883a 	mov	r3,zero
 40156dc:	5811883a 	mov	r8,r11
 40156e0:	00bfffc4 	movi	r2,-1
 40156e4:	0401ffc4 	movi	r16,2047
 40156e8:	003e7806 	br	40150cc <__alt_data_end+0xfc0150cc>
 40156ec:	4462b03a 	or	r17,r8,r17
 40156f0:	8822c03a 	cmpne	r17,r17,zero
 40156f4:	0009883a 	mov	r4,zero
 40156f8:	003fa006 	br	401557c <__alt_data_end+0xfc01557c>
 40156fc:	4811883a 	mov	r8,r9
 4015700:	3023883a 	mov	r17,r6
 4015704:	0401ffc4 	movi	r16,2047
 4015708:	003e0706 	br	4014f28 <__alt_data_end+0xfc014f28>
 401570c:	4811883a 	mov	r8,r9
 4015710:	3023883a 	mov	r17,r6
 4015714:	003e0406 	br	4014f28 <__alt_data_end+0xfc014f28>
 4015718:	21fff804 	addi	r7,r4,-32
 401571c:	01400804 	movi	r5,32
 4015720:	41ced83a 	srl	r7,r8,r7
 4015724:	21400a26 	beq	r4,r5,4015750 <__adddf3+0x8a4>
 4015728:	01401004 	movi	r5,64
 401572c:	2909c83a 	sub	r4,r5,r4
 4015730:	4108983a 	sll	r4,r8,r4
 4015734:	2448b03a 	or	r4,r4,r17
 4015738:	2008c03a 	cmpne	r4,r4,zero
 401573c:	3922b03a 	or	r17,r7,r4
 4015740:	0009883a 	mov	r4,zero
 4015744:	003f8d06 	br	401557c <__alt_data_end+0xfc01557c>
 4015748:	0007883a 	mov	r3,zero
 401574c:	003fdd06 	br	40156c4 <__alt_data_end+0xfc0156c4>
 4015750:	0009883a 	mov	r4,zero
 4015754:	003ff706 	br	4015734 <__alt_data_end+0xfc015734>

04015758 <__divdf3>:
 4015758:	defff204 	addi	sp,sp,-56
 401575c:	dd400915 	stw	r21,36(sp)
 4015760:	282ad53a 	srli	r21,r5,20
 4015764:	dd000815 	stw	r20,32(sp)
 4015768:	2828d7fa 	srli	r20,r5,31
 401576c:	dc000415 	stw	r16,16(sp)
 4015770:	04000434 	movhi	r16,16
 4015774:	df000c15 	stw	fp,48(sp)
 4015778:	843fffc4 	addi	r16,r16,-1
 401577c:	dfc00d15 	stw	ra,52(sp)
 4015780:	ddc00b15 	stw	r23,44(sp)
 4015784:	dd800a15 	stw	r22,40(sp)
 4015788:	dcc00715 	stw	r19,28(sp)
 401578c:	dc800615 	stw	r18,24(sp)
 4015790:	dc400515 	stw	r17,20(sp)
 4015794:	ad41ffcc 	andi	r21,r21,2047
 4015798:	2c20703a 	and	r16,r5,r16
 401579c:	a7003fcc 	andi	fp,r20,255
 40157a0:	a8006126 	beq	r21,zero,4015928 <__divdf3+0x1d0>
 40157a4:	0081ffc4 	movi	r2,2047
 40157a8:	2025883a 	mov	r18,r4
 40157ac:	a8803726 	beq	r21,r2,401588c <__divdf3+0x134>
 40157b0:	80800434 	orhi	r2,r16,16
 40157b4:	100490fa 	slli	r2,r2,3
 40157b8:	2020d77a 	srli	r16,r4,29
 40157bc:	202490fa 	slli	r18,r4,3
 40157c0:	ad7f0044 	addi	r21,r21,-1023
 40157c4:	80a0b03a 	or	r16,r16,r2
 40157c8:	0027883a 	mov	r19,zero
 40157cc:	0013883a 	mov	r9,zero
 40157d0:	3804d53a 	srli	r2,r7,20
 40157d4:	382cd7fa 	srli	r22,r7,31
 40157d8:	04400434 	movhi	r17,16
 40157dc:	8c7fffc4 	addi	r17,r17,-1
 40157e0:	1081ffcc 	andi	r2,r2,2047
 40157e4:	3011883a 	mov	r8,r6
 40157e8:	3c62703a 	and	r17,r7,r17
 40157ec:	b5c03fcc 	andi	r23,r22,255
 40157f0:	10006c26 	beq	r2,zero,40159a4 <__divdf3+0x24c>
 40157f4:	00c1ffc4 	movi	r3,2047
 40157f8:	10c06426 	beq	r2,r3,401598c <__divdf3+0x234>
 40157fc:	88c00434 	orhi	r3,r17,16
 4015800:	180690fa 	slli	r3,r3,3
 4015804:	3022d77a 	srli	r17,r6,29
 4015808:	301090fa 	slli	r8,r6,3
 401580c:	10bf0044 	addi	r2,r2,-1023
 4015810:	88e2b03a 	or	r17,r17,r3
 4015814:	000f883a 	mov	r7,zero
 4015818:	a58cf03a 	xor	r6,r20,r22
 401581c:	3cc8b03a 	or	r4,r7,r19
 4015820:	a8abc83a 	sub	r21,r21,r2
 4015824:	008003c4 	movi	r2,15
 4015828:	3007883a 	mov	r3,r6
 401582c:	34c03fcc 	andi	r19,r6,255
 4015830:	11009036 	bltu	r2,r4,4015a74 <__divdf3+0x31c>
 4015834:	200890ba 	slli	r4,r4,2
 4015838:	00810074 	movhi	r2,1025
 401583c:	10961304 	addi	r2,r2,22604
 4015840:	2089883a 	add	r4,r4,r2
 4015844:	20800017 	ldw	r2,0(r4)
 4015848:	1000683a 	jmp	r2
 401584c:	04015a74 	movhi	r16,1385
 4015850:	040158c4 	movi	r16,1379
 4015854:	04015a64 	muli	r16,zero,1385
 4015858:	040158b8 	rdprs	r16,zero,1378
 401585c:	04015a64 	muli	r16,zero,1385
 4015860:	04015a38 	rdprs	r16,zero,1384
 4015864:	04015a64 	muli	r16,zero,1385
 4015868:	040158b8 	rdprs	r16,zero,1378
 401586c:	040158c4 	movi	r16,1379
 4015870:	040158c4 	movi	r16,1379
 4015874:	04015a38 	rdprs	r16,zero,1384
 4015878:	040158b8 	rdprs	r16,zero,1378
 401587c:	040158a8 	cmpgeui	r16,zero,1378
 4015880:	040158a8 	cmpgeui	r16,zero,1378
 4015884:	040158a8 	cmpgeui	r16,zero,1378
 4015888:	04015d58 	cmpnei	r16,zero,1397
 401588c:	2404b03a 	or	r2,r4,r16
 4015890:	1000661e 	bne	r2,zero,4015a2c <__divdf3+0x2d4>
 4015894:	04c00204 	movi	r19,8
 4015898:	0021883a 	mov	r16,zero
 401589c:	0025883a 	mov	r18,zero
 40158a0:	02400084 	movi	r9,2
 40158a4:	003fca06 	br	40157d0 <__alt_data_end+0xfc0157d0>
 40158a8:	8023883a 	mov	r17,r16
 40158ac:	9011883a 	mov	r8,r18
 40158b0:	e02f883a 	mov	r23,fp
 40158b4:	480f883a 	mov	r7,r9
 40158b8:	00800084 	movi	r2,2
 40158bc:	3881311e 	bne	r7,r2,4015d84 <__divdf3+0x62c>
 40158c0:	b827883a 	mov	r19,r23
 40158c4:	98c0004c 	andi	r3,r19,1
 40158c8:	0081ffc4 	movi	r2,2047
 40158cc:	000b883a 	mov	r5,zero
 40158d0:	0025883a 	mov	r18,zero
 40158d4:	1004953a 	slli	r2,r2,20
 40158d8:	18c03fcc 	andi	r3,r3,255
 40158dc:	04400434 	movhi	r17,16
 40158e0:	8c7fffc4 	addi	r17,r17,-1
 40158e4:	180697fa 	slli	r3,r3,31
 40158e8:	2c4a703a 	and	r5,r5,r17
 40158ec:	288ab03a 	or	r5,r5,r2
 40158f0:	28c6b03a 	or	r3,r5,r3
 40158f4:	9005883a 	mov	r2,r18
 40158f8:	dfc00d17 	ldw	ra,52(sp)
 40158fc:	df000c17 	ldw	fp,48(sp)
 4015900:	ddc00b17 	ldw	r23,44(sp)
 4015904:	dd800a17 	ldw	r22,40(sp)
 4015908:	dd400917 	ldw	r21,36(sp)
 401590c:	dd000817 	ldw	r20,32(sp)
 4015910:	dcc00717 	ldw	r19,28(sp)
 4015914:	dc800617 	ldw	r18,24(sp)
 4015918:	dc400517 	ldw	r17,20(sp)
 401591c:	dc000417 	ldw	r16,16(sp)
 4015920:	dec00e04 	addi	sp,sp,56
 4015924:	f800283a 	ret
 4015928:	2404b03a 	or	r2,r4,r16
 401592c:	2027883a 	mov	r19,r4
 4015930:	10003926 	beq	r2,zero,4015a18 <__divdf3+0x2c0>
 4015934:	80012e26 	beq	r16,zero,4015df0 <__divdf3+0x698>
 4015938:	8009883a 	mov	r4,r16
 401593c:	d9800315 	stw	r6,12(sp)
 4015940:	d9c00215 	stw	r7,8(sp)
 4015944:	40174b00 	call	40174b0 <__clzsi2>
 4015948:	d9800317 	ldw	r6,12(sp)
 401594c:	d9c00217 	ldw	r7,8(sp)
 4015950:	113ffd44 	addi	r4,r2,-11
 4015954:	00c00704 	movi	r3,28
 4015958:	19012116 	blt	r3,r4,4015de0 <__divdf3+0x688>
 401595c:	00c00744 	movi	r3,29
 4015960:	147ffe04 	addi	r17,r2,-8
 4015964:	1907c83a 	sub	r3,r3,r4
 4015968:	8460983a 	sll	r16,r16,r17
 401596c:	98c6d83a 	srl	r3,r19,r3
 4015970:	9c64983a 	sll	r18,r19,r17
 4015974:	1c20b03a 	or	r16,r3,r16
 4015978:	1080fcc4 	addi	r2,r2,1011
 401597c:	00abc83a 	sub	r21,zero,r2
 4015980:	0027883a 	mov	r19,zero
 4015984:	0013883a 	mov	r9,zero
 4015988:	003f9106 	br	40157d0 <__alt_data_end+0xfc0157d0>
 401598c:	3446b03a 	or	r3,r6,r17
 4015990:	18001f1e 	bne	r3,zero,4015a10 <__divdf3+0x2b8>
 4015994:	0023883a 	mov	r17,zero
 4015998:	0011883a 	mov	r8,zero
 401599c:	01c00084 	movi	r7,2
 40159a0:	003f9d06 	br	4015818 <__alt_data_end+0xfc015818>
 40159a4:	3446b03a 	or	r3,r6,r17
 40159a8:	18001526 	beq	r3,zero,4015a00 <__divdf3+0x2a8>
 40159ac:	88011b26 	beq	r17,zero,4015e1c <__divdf3+0x6c4>
 40159b0:	8809883a 	mov	r4,r17
 40159b4:	d9800315 	stw	r6,12(sp)
 40159b8:	da400115 	stw	r9,4(sp)
 40159bc:	40174b00 	call	40174b0 <__clzsi2>
 40159c0:	d9800317 	ldw	r6,12(sp)
 40159c4:	da400117 	ldw	r9,4(sp)
 40159c8:	113ffd44 	addi	r4,r2,-11
 40159cc:	00c00704 	movi	r3,28
 40159d0:	19010e16 	blt	r3,r4,4015e0c <__divdf3+0x6b4>
 40159d4:	00c00744 	movi	r3,29
 40159d8:	123ffe04 	addi	r8,r2,-8
 40159dc:	1907c83a 	sub	r3,r3,r4
 40159e0:	8a22983a 	sll	r17,r17,r8
 40159e4:	30c6d83a 	srl	r3,r6,r3
 40159e8:	3210983a 	sll	r8,r6,r8
 40159ec:	1c62b03a 	or	r17,r3,r17
 40159f0:	1080fcc4 	addi	r2,r2,1011
 40159f4:	0085c83a 	sub	r2,zero,r2
 40159f8:	000f883a 	mov	r7,zero
 40159fc:	003f8606 	br	4015818 <__alt_data_end+0xfc015818>
 4015a00:	0023883a 	mov	r17,zero
 4015a04:	0011883a 	mov	r8,zero
 4015a08:	01c00044 	movi	r7,1
 4015a0c:	003f8206 	br	4015818 <__alt_data_end+0xfc015818>
 4015a10:	01c000c4 	movi	r7,3
 4015a14:	003f8006 	br	4015818 <__alt_data_end+0xfc015818>
 4015a18:	04c00104 	movi	r19,4
 4015a1c:	0021883a 	mov	r16,zero
 4015a20:	0025883a 	mov	r18,zero
 4015a24:	02400044 	movi	r9,1
 4015a28:	003f6906 	br	40157d0 <__alt_data_end+0xfc0157d0>
 4015a2c:	04c00304 	movi	r19,12
 4015a30:	024000c4 	movi	r9,3
 4015a34:	003f6606 	br	40157d0 <__alt_data_end+0xfc0157d0>
 4015a38:	01400434 	movhi	r5,16
 4015a3c:	0007883a 	mov	r3,zero
 4015a40:	297fffc4 	addi	r5,r5,-1
 4015a44:	04bfffc4 	movi	r18,-1
 4015a48:	0081ffc4 	movi	r2,2047
 4015a4c:	003fa106 	br	40158d4 <__alt_data_end+0xfc0158d4>
 4015a50:	00c00044 	movi	r3,1
 4015a54:	1887c83a 	sub	r3,r3,r2
 4015a58:	01000e04 	movi	r4,56
 4015a5c:	20c1210e 	bge	r4,r3,4015ee4 <__divdf3+0x78c>
 4015a60:	98c0004c 	andi	r3,r19,1
 4015a64:	0005883a 	mov	r2,zero
 4015a68:	000b883a 	mov	r5,zero
 4015a6c:	0025883a 	mov	r18,zero
 4015a70:	003f9806 	br	40158d4 <__alt_data_end+0xfc0158d4>
 4015a74:	8c00fd36 	bltu	r17,r16,4015e6c <__divdf3+0x714>
 4015a78:	8440fb26 	beq	r16,r17,4015e68 <__divdf3+0x710>
 4015a7c:	8007883a 	mov	r3,r16
 4015a80:	ad7fffc4 	addi	r21,r21,-1
 4015a84:	0021883a 	mov	r16,zero
 4015a88:	4004d63a 	srli	r2,r8,24
 4015a8c:	8822923a 	slli	r17,r17,8
 4015a90:	1809883a 	mov	r4,r3
 4015a94:	402c923a 	slli	r22,r8,8
 4015a98:	88b8b03a 	or	fp,r17,r2
 4015a9c:	e028d43a 	srli	r20,fp,16
 4015aa0:	d8c00015 	stw	r3,0(sp)
 4015aa4:	e5ffffcc 	andi	r23,fp,65535
 4015aa8:	a00b883a 	mov	r5,r20
 4015aac:	400a3b80 	call	400a3b8 <__udivsi3>
 4015ab0:	d8c00017 	ldw	r3,0(sp)
 4015ab4:	a00b883a 	mov	r5,r20
 4015ab8:	d8800315 	stw	r2,12(sp)
 4015abc:	1809883a 	mov	r4,r3
 4015ac0:	400a41c0 	call	400a41c <__umodsi3>
 4015ac4:	d9800317 	ldw	r6,12(sp)
 4015ac8:	1006943a 	slli	r3,r2,16
 4015acc:	9004d43a 	srli	r2,r18,16
 4015ad0:	b9a3383a 	mul	r17,r23,r6
 4015ad4:	10c4b03a 	or	r2,r2,r3
 4015ad8:	1440062e 	bgeu	r2,r17,4015af4 <__divdf3+0x39c>
 4015adc:	1705883a 	add	r2,r2,fp
 4015ae0:	30ffffc4 	addi	r3,r6,-1
 4015ae4:	1700ee36 	bltu	r2,fp,4015ea0 <__divdf3+0x748>
 4015ae8:	1440ed2e 	bgeu	r2,r17,4015ea0 <__divdf3+0x748>
 4015aec:	31bfff84 	addi	r6,r6,-2
 4015af0:	1705883a 	add	r2,r2,fp
 4015af4:	1463c83a 	sub	r17,r2,r17
 4015af8:	a00b883a 	mov	r5,r20
 4015afc:	8809883a 	mov	r4,r17
 4015b00:	d9800315 	stw	r6,12(sp)
 4015b04:	400a3b80 	call	400a3b8 <__udivsi3>
 4015b08:	a00b883a 	mov	r5,r20
 4015b0c:	8809883a 	mov	r4,r17
 4015b10:	d8800215 	stw	r2,8(sp)
 4015b14:	400a41c0 	call	400a41c <__umodsi3>
 4015b18:	d9c00217 	ldw	r7,8(sp)
 4015b1c:	1004943a 	slli	r2,r2,16
 4015b20:	94bfffcc 	andi	r18,r18,65535
 4015b24:	b9d1383a 	mul	r8,r23,r7
 4015b28:	90a4b03a 	or	r18,r18,r2
 4015b2c:	d9800317 	ldw	r6,12(sp)
 4015b30:	9200062e 	bgeu	r18,r8,4015b4c <__divdf3+0x3f4>
 4015b34:	9725883a 	add	r18,r18,fp
 4015b38:	38bfffc4 	addi	r2,r7,-1
 4015b3c:	9700d636 	bltu	r18,fp,4015e98 <__divdf3+0x740>
 4015b40:	9200d52e 	bgeu	r18,r8,4015e98 <__divdf3+0x740>
 4015b44:	39ffff84 	addi	r7,r7,-2
 4015b48:	9725883a 	add	r18,r18,fp
 4015b4c:	3004943a 	slli	r2,r6,16
 4015b50:	b012d43a 	srli	r9,r22,16
 4015b54:	b1bfffcc 	andi	r6,r22,65535
 4015b58:	11e2b03a 	or	r17,r2,r7
 4015b5c:	8806d43a 	srli	r3,r17,16
 4015b60:	893fffcc 	andi	r4,r17,65535
 4015b64:	218b383a 	mul	r5,r4,r6
 4015b68:	30c5383a 	mul	r2,r6,r3
 4015b6c:	2249383a 	mul	r4,r4,r9
 4015b70:	280ed43a 	srli	r7,r5,16
 4015b74:	9225c83a 	sub	r18,r18,r8
 4015b78:	2089883a 	add	r4,r4,r2
 4015b7c:	3909883a 	add	r4,r7,r4
 4015b80:	1a47383a 	mul	r3,r3,r9
 4015b84:	2080022e 	bgeu	r4,r2,4015b90 <__divdf3+0x438>
 4015b88:	00800074 	movhi	r2,1
 4015b8c:	1887883a 	add	r3,r3,r2
 4015b90:	2004d43a 	srli	r2,r4,16
 4015b94:	2008943a 	slli	r4,r4,16
 4015b98:	297fffcc 	andi	r5,r5,65535
 4015b9c:	10c7883a 	add	r3,r2,r3
 4015ba0:	2149883a 	add	r4,r4,r5
 4015ba4:	90c0a536 	bltu	r18,r3,4015e3c <__divdf3+0x6e4>
 4015ba8:	90c0bf26 	beq	r18,r3,4015ea8 <__divdf3+0x750>
 4015bac:	90c7c83a 	sub	r3,r18,r3
 4015bb0:	810fc83a 	sub	r7,r16,r4
 4015bb4:	81e5803a 	cmpltu	r18,r16,r7
 4015bb8:	1ca5c83a 	sub	r18,r3,r18
 4015bbc:	e480c126 	beq	fp,r18,4015ec4 <__divdf3+0x76c>
 4015bc0:	a00b883a 	mov	r5,r20
 4015bc4:	9009883a 	mov	r4,r18
 4015bc8:	d9800315 	stw	r6,12(sp)
 4015bcc:	d9c00215 	stw	r7,8(sp)
 4015bd0:	da400115 	stw	r9,4(sp)
 4015bd4:	400a3b80 	call	400a3b8 <__udivsi3>
 4015bd8:	a00b883a 	mov	r5,r20
 4015bdc:	9009883a 	mov	r4,r18
 4015be0:	d8800015 	stw	r2,0(sp)
 4015be4:	400a41c0 	call	400a41c <__umodsi3>
 4015be8:	d9c00217 	ldw	r7,8(sp)
 4015bec:	da000017 	ldw	r8,0(sp)
 4015bf0:	1006943a 	slli	r3,r2,16
 4015bf4:	3804d43a 	srli	r2,r7,16
 4015bf8:	ba21383a 	mul	r16,r23,r8
 4015bfc:	d9800317 	ldw	r6,12(sp)
 4015c00:	10c4b03a 	or	r2,r2,r3
 4015c04:	da400117 	ldw	r9,4(sp)
 4015c08:	1400062e 	bgeu	r2,r16,4015c24 <__divdf3+0x4cc>
 4015c0c:	1705883a 	add	r2,r2,fp
 4015c10:	40ffffc4 	addi	r3,r8,-1
 4015c14:	1700ad36 	bltu	r2,fp,4015ecc <__divdf3+0x774>
 4015c18:	1400ac2e 	bgeu	r2,r16,4015ecc <__divdf3+0x774>
 4015c1c:	423fff84 	addi	r8,r8,-2
 4015c20:	1705883a 	add	r2,r2,fp
 4015c24:	1421c83a 	sub	r16,r2,r16
 4015c28:	a00b883a 	mov	r5,r20
 4015c2c:	8009883a 	mov	r4,r16
 4015c30:	d9800315 	stw	r6,12(sp)
 4015c34:	d9c00215 	stw	r7,8(sp)
 4015c38:	da000015 	stw	r8,0(sp)
 4015c3c:	da400115 	stw	r9,4(sp)
 4015c40:	400a3b80 	call	400a3b8 <__udivsi3>
 4015c44:	8009883a 	mov	r4,r16
 4015c48:	a00b883a 	mov	r5,r20
 4015c4c:	1025883a 	mov	r18,r2
 4015c50:	400a41c0 	call	400a41c <__umodsi3>
 4015c54:	d9c00217 	ldw	r7,8(sp)
 4015c58:	1004943a 	slli	r2,r2,16
 4015c5c:	bcaf383a 	mul	r23,r23,r18
 4015c60:	393fffcc 	andi	r4,r7,65535
 4015c64:	2088b03a 	or	r4,r4,r2
 4015c68:	d9800317 	ldw	r6,12(sp)
 4015c6c:	da000017 	ldw	r8,0(sp)
 4015c70:	da400117 	ldw	r9,4(sp)
 4015c74:	25c0062e 	bgeu	r4,r23,4015c90 <__divdf3+0x538>
 4015c78:	2709883a 	add	r4,r4,fp
 4015c7c:	90bfffc4 	addi	r2,r18,-1
 4015c80:	27009436 	bltu	r4,fp,4015ed4 <__divdf3+0x77c>
 4015c84:	25c0932e 	bgeu	r4,r23,4015ed4 <__divdf3+0x77c>
 4015c88:	94bfff84 	addi	r18,r18,-2
 4015c8c:	2709883a 	add	r4,r4,fp
 4015c90:	4004943a 	slli	r2,r8,16
 4015c94:	25efc83a 	sub	r23,r4,r23
 4015c98:	1490b03a 	or	r8,r2,r18
 4015c9c:	4008d43a 	srli	r4,r8,16
 4015ca0:	40ffffcc 	andi	r3,r8,65535
 4015ca4:	30c5383a 	mul	r2,r6,r3
 4015ca8:	1a47383a 	mul	r3,r3,r9
 4015cac:	310d383a 	mul	r6,r6,r4
 4015cb0:	100ad43a 	srli	r5,r2,16
 4015cb4:	4913383a 	mul	r9,r9,r4
 4015cb8:	1987883a 	add	r3,r3,r6
 4015cbc:	28c7883a 	add	r3,r5,r3
 4015cc0:	1980022e 	bgeu	r3,r6,4015ccc <__divdf3+0x574>
 4015cc4:	01000074 	movhi	r4,1
 4015cc8:	4913883a 	add	r9,r9,r4
 4015ccc:	1808d43a 	srli	r4,r3,16
 4015cd0:	1806943a 	slli	r3,r3,16
 4015cd4:	10bfffcc 	andi	r2,r2,65535
 4015cd8:	2253883a 	add	r9,r4,r9
 4015cdc:	1887883a 	add	r3,r3,r2
 4015ce0:	ba403836 	bltu	r23,r9,4015dc4 <__divdf3+0x66c>
 4015ce4:	ba403626 	beq	r23,r9,4015dc0 <__divdf3+0x668>
 4015ce8:	42000054 	ori	r8,r8,1
 4015cec:	a880ffc4 	addi	r2,r21,1023
 4015cf0:	00bf570e 	bge	zero,r2,4015a50 <__alt_data_end+0xfc015a50>
 4015cf4:	40c001cc 	andi	r3,r8,7
 4015cf8:	18000726 	beq	r3,zero,4015d18 <__divdf3+0x5c0>
 4015cfc:	40c003cc 	andi	r3,r8,15
 4015d00:	01000104 	movi	r4,4
 4015d04:	19000426 	beq	r3,r4,4015d18 <__divdf3+0x5c0>
 4015d08:	4107883a 	add	r3,r8,r4
 4015d0c:	1a11803a 	cmpltu	r8,r3,r8
 4015d10:	8a23883a 	add	r17,r17,r8
 4015d14:	1811883a 	mov	r8,r3
 4015d18:	88c0402c 	andhi	r3,r17,256
 4015d1c:	18000426 	beq	r3,zero,4015d30 <__divdf3+0x5d8>
 4015d20:	00ffc034 	movhi	r3,65280
 4015d24:	18ffffc4 	addi	r3,r3,-1
 4015d28:	a8810004 	addi	r2,r21,1024
 4015d2c:	88e2703a 	and	r17,r17,r3
 4015d30:	00c1ff84 	movi	r3,2046
 4015d34:	18bee316 	blt	r3,r2,40158c4 <__alt_data_end+0xfc0158c4>
 4015d38:	8824977a 	slli	r18,r17,29
 4015d3c:	4010d0fa 	srli	r8,r8,3
 4015d40:	8822927a 	slli	r17,r17,9
 4015d44:	1081ffcc 	andi	r2,r2,2047
 4015d48:	9224b03a 	or	r18,r18,r8
 4015d4c:	880ad33a 	srli	r5,r17,12
 4015d50:	98c0004c 	andi	r3,r19,1
 4015d54:	003edf06 	br	40158d4 <__alt_data_end+0xfc0158d4>
 4015d58:	8080022c 	andhi	r2,r16,8
 4015d5c:	10001226 	beq	r2,zero,4015da8 <__divdf3+0x650>
 4015d60:	8880022c 	andhi	r2,r17,8
 4015d64:	1000101e 	bne	r2,zero,4015da8 <__divdf3+0x650>
 4015d68:	00800434 	movhi	r2,16
 4015d6c:	89400234 	orhi	r5,r17,8
 4015d70:	10bfffc4 	addi	r2,r2,-1
 4015d74:	b007883a 	mov	r3,r22
 4015d78:	288a703a 	and	r5,r5,r2
 4015d7c:	4025883a 	mov	r18,r8
 4015d80:	003f3106 	br	4015a48 <__alt_data_end+0xfc015a48>
 4015d84:	008000c4 	movi	r2,3
 4015d88:	3880a626 	beq	r7,r2,4016024 <__divdf3+0x8cc>
 4015d8c:	00800044 	movi	r2,1
 4015d90:	3880521e 	bne	r7,r2,4015edc <__divdf3+0x784>
 4015d94:	b807883a 	mov	r3,r23
 4015d98:	0005883a 	mov	r2,zero
 4015d9c:	000b883a 	mov	r5,zero
 4015da0:	0025883a 	mov	r18,zero
 4015da4:	003ecb06 	br	40158d4 <__alt_data_end+0xfc0158d4>
 4015da8:	00800434 	movhi	r2,16
 4015dac:	81400234 	orhi	r5,r16,8
 4015db0:	10bfffc4 	addi	r2,r2,-1
 4015db4:	a007883a 	mov	r3,r20
 4015db8:	288a703a 	and	r5,r5,r2
 4015dbc:	003f2206 	br	4015a48 <__alt_data_end+0xfc015a48>
 4015dc0:	183fca26 	beq	r3,zero,4015cec <__alt_data_end+0xfc015cec>
 4015dc4:	e5ef883a 	add	r23,fp,r23
 4015dc8:	40bfffc4 	addi	r2,r8,-1
 4015dcc:	bf00392e 	bgeu	r23,fp,4015eb4 <__divdf3+0x75c>
 4015dd0:	1011883a 	mov	r8,r2
 4015dd4:	ba7fc41e 	bne	r23,r9,4015ce8 <__alt_data_end+0xfc015ce8>
 4015dd8:	b0ffc31e 	bne	r22,r3,4015ce8 <__alt_data_end+0xfc015ce8>
 4015ddc:	003fc306 	br	4015cec <__alt_data_end+0xfc015cec>
 4015de0:	143ff604 	addi	r16,r2,-40
 4015de4:	9c20983a 	sll	r16,r19,r16
 4015de8:	0025883a 	mov	r18,zero
 4015dec:	003ee206 	br	4015978 <__alt_data_end+0xfc015978>
 4015df0:	d9800315 	stw	r6,12(sp)
 4015df4:	d9c00215 	stw	r7,8(sp)
 4015df8:	40174b00 	call	40174b0 <__clzsi2>
 4015dfc:	10800804 	addi	r2,r2,32
 4015e00:	d9c00217 	ldw	r7,8(sp)
 4015e04:	d9800317 	ldw	r6,12(sp)
 4015e08:	003ed106 	br	4015950 <__alt_data_end+0xfc015950>
 4015e0c:	147ff604 	addi	r17,r2,-40
 4015e10:	3462983a 	sll	r17,r6,r17
 4015e14:	0011883a 	mov	r8,zero
 4015e18:	003ef506 	br	40159f0 <__alt_data_end+0xfc0159f0>
 4015e1c:	3009883a 	mov	r4,r6
 4015e20:	d9800315 	stw	r6,12(sp)
 4015e24:	da400115 	stw	r9,4(sp)
 4015e28:	40174b00 	call	40174b0 <__clzsi2>
 4015e2c:	10800804 	addi	r2,r2,32
 4015e30:	da400117 	ldw	r9,4(sp)
 4015e34:	d9800317 	ldw	r6,12(sp)
 4015e38:	003ee306 	br	40159c8 <__alt_data_end+0xfc0159c8>
 4015e3c:	85a1883a 	add	r16,r16,r22
 4015e40:	8585803a 	cmpltu	r2,r16,r22
 4015e44:	1705883a 	add	r2,r2,fp
 4015e48:	14a5883a 	add	r18,r2,r18
 4015e4c:	88bfffc4 	addi	r2,r17,-1
 4015e50:	e4800c2e 	bgeu	fp,r18,4015e84 <__divdf3+0x72c>
 4015e54:	90c03e36 	bltu	r18,r3,4015f50 <__divdf3+0x7f8>
 4015e58:	1c806926 	beq	r3,r18,4016000 <__divdf3+0x8a8>
 4015e5c:	90c7c83a 	sub	r3,r18,r3
 4015e60:	1023883a 	mov	r17,r2
 4015e64:	003f5206 	br	4015bb0 <__alt_data_end+0xfc015bb0>
 4015e68:	923f0436 	bltu	r18,r8,4015a7c <__alt_data_end+0xfc015a7c>
 4015e6c:	800897fa 	slli	r4,r16,31
 4015e70:	9004d07a 	srli	r2,r18,1
 4015e74:	8006d07a 	srli	r3,r16,1
 4015e78:	902097fa 	slli	r16,r18,31
 4015e7c:	20a4b03a 	or	r18,r4,r2
 4015e80:	003f0106 	br	4015a88 <__alt_data_end+0xfc015a88>
 4015e84:	e4bff51e 	bne	fp,r18,4015e5c <__alt_data_end+0xfc015e5c>
 4015e88:	85bff22e 	bgeu	r16,r22,4015e54 <__alt_data_end+0xfc015e54>
 4015e8c:	e0c7c83a 	sub	r3,fp,r3
 4015e90:	1023883a 	mov	r17,r2
 4015e94:	003f4606 	br	4015bb0 <__alt_data_end+0xfc015bb0>
 4015e98:	100f883a 	mov	r7,r2
 4015e9c:	003f2b06 	br	4015b4c <__alt_data_end+0xfc015b4c>
 4015ea0:	180d883a 	mov	r6,r3
 4015ea4:	003f1306 	br	4015af4 <__alt_data_end+0xfc015af4>
 4015ea8:	813fe436 	bltu	r16,r4,4015e3c <__alt_data_end+0xfc015e3c>
 4015eac:	0007883a 	mov	r3,zero
 4015eb0:	003f3f06 	br	4015bb0 <__alt_data_end+0xfc015bb0>
 4015eb4:	ba402c36 	bltu	r23,r9,4015f68 <__divdf3+0x810>
 4015eb8:	4dc05426 	beq	r9,r23,401600c <__divdf3+0x8b4>
 4015ebc:	1011883a 	mov	r8,r2
 4015ec0:	003f8906 	br	4015ce8 <__alt_data_end+0xfc015ce8>
 4015ec4:	023fffc4 	movi	r8,-1
 4015ec8:	003f8806 	br	4015cec <__alt_data_end+0xfc015cec>
 4015ecc:	1811883a 	mov	r8,r3
 4015ed0:	003f5406 	br	4015c24 <__alt_data_end+0xfc015c24>
 4015ed4:	1025883a 	mov	r18,r2
 4015ed8:	003f6d06 	br	4015c90 <__alt_data_end+0xfc015c90>
 4015edc:	b827883a 	mov	r19,r23
 4015ee0:	003f8206 	br	4015cec <__alt_data_end+0xfc015cec>
 4015ee4:	010007c4 	movi	r4,31
 4015ee8:	20c02616 	blt	r4,r3,4015f84 <__divdf3+0x82c>
 4015eec:	00800804 	movi	r2,32
 4015ef0:	10c5c83a 	sub	r2,r2,r3
 4015ef4:	888a983a 	sll	r5,r17,r2
 4015ef8:	40c8d83a 	srl	r4,r8,r3
 4015efc:	4084983a 	sll	r2,r8,r2
 4015f00:	88e2d83a 	srl	r17,r17,r3
 4015f04:	2906b03a 	or	r3,r5,r4
 4015f08:	1004c03a 	cmpne	r2,r2,zero
 4015f0c:	1886b03a 	or	r3,r3,r2
 4015f10:	188001cc 	andi	r2,r3,7
 4015f14:	10000726 	beq	r2,zero,4015f34 <__divdf3+0x7dc>
 4015f18:	188003cc 	andi	r2,r3,15
 4015f1c:	01000104 	movi	r4,4
 4015f20:	11000426 	beq	r2,r4,4015f34 <__divdf3+0x7dc>
 4015f24:	1805883a 	mov	r2,r3
 4015f28:	10c00104 	addi	r3,r2,4
 4015f2c:	1885803a 	cmpltu	r2,r3,r2
 4015f30:	88a3883a 	add	r17,r17,r2
 4015f34:	8880202c 	andhi	r2,r17,128
 4015f38:	10002726 	beq	r2,zero,4015fd8 <__divdf3+0x880>
 4015f3c:	98c0004c 	andi	r3,r19,1
 4015f40:	00800044 	movi	r2,1
 4015f44:	000b883a 	mov	r5,zero
 4015f48:	0025883a 	mov	r18,zero
 4015f4c:	003e6106 	br	40158d4 <__alt_data_end+0xfc0158d4>
 4015f50:	85a1883a 	add	r16,r16,r22
 4015f54:	8585803a 	cmpltu	r2,r16,r22
 4015f58:	1705883a 	add	r2,r2,fp
 4015f5c:	14a5883a 	add	r18,r2,r18
 4015f60:	8c7fff84 	addi	r17,r17,-2
 4015f64:	003f1106 	br	4015bac <__alt_data_end+0xfc015bac>
 4015f68:	b589883a 	add	r4,r22,r22
 4015f6c:	25ad803a 	cmpltu	r22,r4,r22
 4015f70:	b739883a 	add	fp,r22,fp
 4015f74:	40bfff84 	addi	r2,r8,-2
 4015f78:	bf2f883a 	add	r23,r23,fp
 4015f7c:	202d883a 	mov	r22,r4
 4015f80:	003f9306 	br	4015dd0 <__alt_data_end+0xfc015dd0>
 4015f84:	013ff844 	movi	r4,-31
 4015f88:	2085c83a 	sub	r2,r4,r2
 4015f8c:	8888d83a 	srl	r4,r17,r2
 4015f90:	00800804 	movi	r2,32
 4015f94:	18802126 	beq	r3,r2,401601c <__divdf3+0x8c4>
 4015f98:	00801004 	movi	r2,64
 4015f9c:	10c5c83a 	sub	r2,r2,r3
 4015fa0:	8884983a 	sll	r2,r17,r2
 4015fa4:	1204b03a 	or	r2,r2,r8
 4015fa8:	1004c03a 	cmpne	r2,r2,zero
 4015fac:	2084b03a 	or	r2,r4,r2
 4015fb0:	144001cc 	andi	r17,r2,7
 4015fb4:	88000d1e 	bne	r17,zero,4015fec <__divdf3+0x894>
 4015fb8:	000b883a 	mov	r5,zero
 4015fbc:	1024d0fa 	srli	r18,r2,3
 4015fc0:	98c0004c 	andi	r3,r19,1
 4015fc4:	0005883a 	mov	r2,zero
 4015fc8:	9464b03a 	or	r18,r18,r17
 4015fcc:	003e4106 	br	40158d4 <__alt_data_end+0xfc0158d4>
 4015fd0:	1007883a 	mov	r3,r2
 4015fd4:	0023883a 	mov	r17,zero
 4015fd8:	880a927a 	slli	r5,r17,9
 4015fdc:	1805883a 	mov	r2,r3
 4015fe0:	8822977a 	slli	r17,r17,29
 4015fe4:	280ad33a 	srli	r5,r5,12
 4015fe8:	003ff406 	br	4015fbc <__alt_data_end+0xfc015fbc>
 4015fec:	10c003cc 	andi	r3,r2,15
 4015ff0:	01000104 	movi	r4,4
 4015ff4:	193ff626 	beq	r3,r4,4015fd0 <__alt_data_end+0xfc015fd0>
 4015ff8:	0023883a 	mov	r17,zero
 4015ffc:	003fca06 	br	4015f28 <__alt_data_end+0xfc015f28>
 4016000:	813fd336 	bltu	r16,r4,4015f50 <__alt_data_end+0xfc015f50>
 4016004:	1023883a 	mov	r17,r2
 4016008:	003fa806 	br	4015eac <__alt_data_end+0xfc015eac>
 401600c:	b0ffd636 	bltu	r22,r3,4015f68 <__alt_data_end+0xfc015f68>
 4016010:	1011883a 	mov	r8,r2
 4016014:	b0ff341e 	bne	r22,r3,4015ce8 <__alt_data_end+0xfc015ce8>
 4016018:	003f3406 	br	4015cec <__alt_data_end+0xfc015cec>
 401601c:	0005883a 	mov	r2,zero
 4016020:	003fe006 	br	4015fa4 <__alt_data_end+0xfc015fa4>
 4016024:	00800434 	movhi	r2,16
 4016028:	89400234 	orhi	r5,r17,8
 401602c:	10bfffc4 	addi	r2,r2,-1
 4016030:	b807883a 	mov	r3,r23
 4016034:	288a703a 	and	r5,r5,r2
 4016038:	4025883a 	mov	r18,r8
 401603c:	003e8206 	br	4015a48 <__alt_data_end+0xfc015a48>

04016040 <__eqdf2>:
 4016040:	2804d53a 	srli	r2,r5,20
 4016044:	3806d53a 	srli	r3,r7,20
 4016048:	02000434 	movhi	r8,16
 401604c:	423fffc4 	addi	r8,r8,-1
 4016050:	1081ffcc 	andi	r2,r2,2047
 4016054:	0281ffc4 	movi	r10,2047
 4016058:	2a12703a 	and	r9,r5,r8
 401605c:	18c1ffcc 	andi	r3,r3,2047
 4016060:	3a10703a 	and	r8,r7,r8
 4016064:	280ad7fa 	srli	r5,r5,31
 4016068:	380ed7fa 	srli	r7,r7,31
 401606c:	12801026 	beq	r2,r10,40160b0 <__eqdf2+0x70>
 4016070:	0281ffc4 	movi	r10,2047
 4016074:	1a800a26 	beq	r3,r10,40160a0 <__eqdf2+0x60>
 4016078:	10c00226 	beq	r2,r3,4016084 <__eqdf2+0x44>
 401607c:	00800044 	movi	r2,1
 4016080:	f800283a 	ret
 4016084:	4a3ffd1e 	bne	r9,r8,401607c <__alt_data_end+0xfc01607c>
 4016088:	21bffc1e 	bne	r4,r6,401607c <__alt_data_end+0xfc01607c>
 401608c:	29c00c26 	beq	r5,r7,40160c0 <__eqdf2+0x80>
 4016090:	103ffa1e 	bne	r2,zero,401607c <__alt_data_end+0xfc01607c>
 4016094:	2244b03a 	or	r2,r4,r9
 4016098:	1004c03a 	cmpne	r2,r2,zero
 401609c:	f800283a 	ret
 40160a0:	3214b03a 	or	r10,r6,r8
 40160a4:	503ff426 	beq	r10,zero,4016078 <__alt_data_end+0xfc016078>
 40160a8:	00800044 	movi	r2,1
 40160ac:	f800283a 	ret
 40160b0:	2254b03a 	or	r10,r4,r9
 40160b4:	503fee26 	beq	r10,zero,4016070 <__alt_data_end+0xfc016070>
 40160b8:	00800044 	movi	r2,1
 40160bc:	f800283a 	ret
 40160c0:	0005883a 	mov	r2,zero
 40160c4:	f800283a 	ret

040160c8 <__gedf2>:
 40160c8:	2804d53a 	srli	r2,r5,20
 40160cc:	3806d53a 	srli	r3,r7,20
 40160d0:	02000434 	movhi	r8,16
 40160d4:	423fffc4 	addi	r8,r8,-1
 40160d8:	1081ffcc 	andi	r2,r2,2047
 40160dc:	0241ffc4 	movi	r9,2047
 40160e0:	2a14703a 	and	r10,r5,r8
 40160e4:	18c1ffcc 	andi	r3,r3,2047
 40160e8:	3a10703a 	and	r8,r7,r8
 40160ec:	280ad7fa 	srli	r5,r5,31
 40160f0:	380ed7fa 	srli	r7,r7,31
 40160f4:	12401d26 	beq	r2,r9,401616c <__gedf2+0xa4>
 40160f8:	0241ffc4 	movi	r9,2047
 40160fc:	1a401226 	beq	r3,r9,4016148 <__gedf2+0x80>
 4016100:	1000081e 	bne	r2,zero,4016124 <__gedf2+0x5c>
 4016104:	2296b03a 	or	r11,r4,r10
 4016108:	5813003a 	cmpeq	r9,r11,zero
 401610c:	1800091e 	bne	r3,zero,4016134 <__gedf2+0x6c>
 4016110:	3218b03a 	or	r12,r6,r8
 4016114:	6000071e 	bne	r12,zero,4016134 <__gedf2+0x6c>
 4016118:	0005883a 	mov	r2,zero
 401611c:	5800101e 	bne	r11,zero,4016160 <__gedf2+0x98>
 4016120:	f800283a 	ret
 4016124:	18000c1e 	bne	r3,zero,4016158 <__gedf2+0x90>
 4016128:	3212b03a 	or	r9,r6,r8
 401612c:	48000c26 	beq	r9,zero,4016160 <__gedf2+0x98>
 4016130:	0013883a 	mov	r9,zero
 4016134:	39c03fcc 	andi	r7,r7,255
 4016138:	48000826 	beq	r9,zero,401615c <__gedf2+0x94>
 401613c:	38000926 	beq	r7,zero,4016164 <__gedf2+0x9c>
 4016140:	00800044 	movi	r2,1
 4016144:	f800283a 	ret
 4016148:	3212b03a 	or	r9,r6,r8
 401614c:	483fec26 	beq	r9,zero,4016100 <__alt_data_end+0xfc016100>
 4016150:	00bfff84 	movi	r2,-2
 4016154:	f800283a 	ret
 4016158:	39c03fcc 	andi	r7,r7,255
 401615c:	29c00626 	beq	r5,r7,4016178 <__gedf2+0xb0>
 4016160:	283ff726 	beq	r5,zero,4016140 <__alt_data_end+0xfc016140>
 4016164:	00bfffc4 	movi	r2,-1
 4016168:	f800283a 	ret
 401616c:	2292b03a 	or	r9,r4,r10
 4016170:	483fe126 	beq	r9,zero,40160f8 <__alt_data_end+0xfc0160f8>
 4016174:	003ff606 	br	4016150 <__alt_data_end+0xfc016150>
 4016178:	18bff916 	blt	r3,r2,4016160 <__alt_data_end+0xfc016160>
 401617c:	10c00316 	blt	r2,r3,401618c <__gedf2+0xc4>
 4016180:	42bff736 	bltu	r8,r10,4016160 <__alt_data_end+0xfc016160>
 4016184:	52000326 	beq	r10,r8,4016194 <__gedf2+0xcc>
 4016188:	5200042e 	bgeu	r10,r8,401619c <__gedf2+0xd4>
 401618c:	283fec1e 	bne	r5,zero,4016140 <__alt_data_end+0xfc016140>
 4016190:	003ff406 	br	4016164 <__alt_data_end+0xfc016164>
 4016194:	313ff236 	bltu	r6,r4,4016160 <__alt_data_end+0xfc016160>
 4016198:	21bffc36 	bltu	r4,r6,401618c <__alt_data_end+0xfc01618c>
 401619c:	0005883a 	mov	r2,zero
 40161a0:	f800283a 	ret

040161a4 <__ledf2>:
 40161a4:	2804d53a 	srli	r2,r5,20
 40161a8:	3810d53a 	srli	r8,r7,20
 40161ac:	00c00434 	movhi	r3,16
 40161b0:	18ffffc4 	addi	r3,r3,-1
 40161b4:	1081ffcc 	andi	r2,r2,2047
 40161b8:	0241ffc4 	movi	r9,2047
 40161bc:	28d4703a 	and	r10,r5,r3
 40161c0:	4201ffcc 	andi	r8,r8,2047
 40161c4:	38c6703a 	and	r3,r7,r3
 40161c8:	280ad7fa 	srli	r5,r5,31
 40161cc:	380ed7fa 	srli	r7,r7,31
 40161d0:	12401f26 	beq	r2,r9,4016250 <__ledf2+0xac>
 40161d4:	0241ffc4 	movi	r9,2047
 40161d8:	42401426 	beq	r8,r9,401622c <__ledf2+0x88>
 40161dc:	1000091e 	bne	r2,zero,4016204 <__ledf2+0x60>
 40161e0:	2296b03a 	or	r11,r4,r10
 40161e4:	5813003a 	cmpeq	r9,r11,zero
 40161e8:	29403fcc 	andi	r5,r5,255
 40161ec:	40000a1e 	bne	r8,zero,4016218 <__ledf2+0x74>
 40161f0:	30d8b03a 	or	r12,r6,r3
 40161f4:	6000081e 	bne	r12,zero,4016218 <__ledf2+0x74>
 40161f8:	0005883a 	mov	r2,zero
 40161fc:	5800111e 	bne	r11,zero,4016244 <__ledf2+0xa0>
 4016200:	f800283a 	ret
 4016204:	29403fcc 	andi	r5,r5,255
 4016208:	40000c1e 	bne	r8,zero,401623c <__ledf2+0x98>
 401620c:	30d2b03a 	or	r9,r6,r3
 4016210:	48000c26 	beq	r9,zero,4016244 <__ledf2+0xa0>
 4016214:	0013883a 	mov	r9,zero
 4016218:	39c03fcc 	andi	r7,r7,255
 401621c:	48000826 	beq	r9,zero,4016240 <__ledf2+0x9c>
 4016220:	38001126 	beq	r7,zero,4016268 <__ledf2+0xc4>
 4016224:	00800044 	movi	r2,1
 4016228:	f800283a 	ret
 401622c:	30d2b03a 	or	r9,r6,r3
 4016230:	483fea26 	beq	r9,zero,40161dc <__alt_data_end+0xfc0161dc>
 4016234:	00800084 	movi	r2,2
 4016238:	f800283a 	ret
 401623c:	39c03fcc 	andi	r7,r7,255
 4016240:	39400726 	beq	r7,r5,4016260 <__ledf2+0xbc>
 4016244:	2800081e 	bne	r5,zero,4016268 <__ledf2+0xc4>
 4016248:	00800044 	movi	r2,1
 401624c:	f800283a 	ret
 4016250:	2292b03a 	or	r9,r4,r10
 4016254:	483fdf26 	beq	r9,zero,40161d4 <__alt_data_end+0xfc0161d4>
 4016258:	00800084 	movi	r2,2
 401625c:	f800283a 	ret
 4016260:	4080030e 	bge	r8,r2,4016270 <__ledf2+0xcc>
 4016264:	383fef26 	beq	r7,zero,4016224 <__alt_data_end+0xfc016224>
 4016268:	00bfffc4 	movi	r2,-1
 401626c:	f800283a 	ret
 4016270:	123feb16 	blt	r2,r8,4016220 <__alt_data_end+0xfc016220>
 4016274:	1abff336 	bltu	r3,r10,4016244 <__alt_data_end+0xfc016244>
 4016278:	50c00326 	beq	r10,r3,4016288 <__ledf2+0xe4>
 401627c:	50c0042e 	bgeu	r10,r3,4016290 <__ledf2+0xec>
 4016280:	283fe81e 	bne	r5,zero,4016224 <__alt_data_end+0xfc016224>
 4016284:	003ff806 	br	4016268 <__alt_data_end+0xfc016268>
 4016288:	313fee36 	bltu	r6,r4,4016244 <__alt_data_end+0xfc016244>
 401628c:	21bffc36 	bltu	r4,r6,4016280 <__alt_data_end+0xfc016280>
 4016290:	0005883a 	mov	r2,zero
 4016294:	f800283a 	ret

04016298 <__muldf3>:
 4016298:	defff304 	addi	sp,sp,-52
 401629c:	2804d53a 	srli	r2,r5,20
 40162a0:	dd800915 	stw	r22,36(sp)
 40162a4:	282cd7fa 	srli	r22,r5,31
 40162a8:	dc000315 	stw	r16,12(sp)
 40162ac:	04000434 	movhi	r16,16
 40162b0:	dd400815 	stw	r21,32(sp)
 40162b4:	dc800515 	stw	r18,20(sp)
 40162b8:	843fffc4 	addi	r16,r16,-1
 40162bc:	dfc00c15 	stw	ra,48(sp)
 40162c0:	df000b15 	stw	fp,44(sp)
 40162c4:	ddc00a15 	stw	r23,40(sp)
 40162c8:	dd000715 	stw	r20,28(sp)
 40162cc:	dcc00615 	stw	r19,24(sp)
 40162d0:	dc400415 	stw	r17,16(sp)
 40162d4:	1481ffcc 	andi	r18,r2,2047
 40162d8:	2c20703a 	and	r16,r5,r16
 40162dc:	b02b883a 	mov	r21,r22
 40162e0:	b2403fcc 	andi	r9,r22,255
 40162e4:	90006026 	beq	r18,zero,4016468 <__muldf3+0x1d0>
 40162e8:	0081ffc4 	movi	r2,2047
 40162ec:	2029883a 	mov	r20,r4
 40162f0:	90803626 	beq	r18,r2,40163cc <__muldf3+0x134>
 40162f4:	80800434 	orhi	r2,r16,16
 40162f8:	100490fa 	slli	r2,r2,3
 40162fc:	2020d77a 	srli	r16,r4,29
 4016300:	202890fa 	slli	r20,r4,3
 4016304:	94bf0044 	addi	r18,r18,-1023
 4016308:	80a0b03a 	or	r16,r16,r2
 401630c:	0027883a 	mov	r19,zero
 4016310:	0039883a 	mov	fp,zero
 4016314:	3804d53a 	srli	r2,r7,20
 4016318:	382ed7fa 	srli	r23,r7,31
 401631c:	04400434 	movhi	r17,16
 4016320:	8c7fffc4 	addi	r17,r17,-1
 4016324:	1081ffcc 	andi	r2,r2,2047
 4016328:	3011883a 	mov	r8,r6
 401632c:	3c62703a 	and	r17,r7,r17
 4016330:	ba803fcc 	andi	r10,r23,255
 4016334:	10006d26 	beq	r2,zero,40164ec <__muldf3+0x254>
 4016338:	00c1ffc4 	movi	r3,2047
 401633c:	10c06526 	beq	r2,r3,40164d4 <__muldf3+0x23c>
 4016340:	88c00434 	orhi	r3,r17,16
 4016344:	180690fa 	slli	r3,r3,3
 4016348:	3022d77a 	srli	r17,r6,29
 401634c:	301090fa 	slli	r8,r6,3
 4016350:	10bf0044 	addi	r2,r2,-1023
 4016354:	88e2b03a 	or	r17,r17,r3
 4016358:	000b883a 	mov	r5,zero
 401635c:	9085883a 	add	r2,r18,r2
 4016360:	2cc8b03a 	or	r4,r5,r19
 4016364:	00c003c4 	movi	r3,15
 4016368:	bdacf03a 	xor	r22,r23,r22
 401636c:	12c00044 	addi	r11,r2,1
 4016370:	19009936 	bltu	r3,r4,40165d8 <__muldf3+0x340>
 4016374:	200890ba 	slli	r4,r4,2
 4016378:	00c10074 	movhi	r3,1025
 401637c:	18d8e304 	addi	r3,r3,25484
 4016380:	20c9883a 	add	r4,r4,r3
 4016384:	20c00017 	ldw	r3,0(r4)
 4016388:	1800683a 	jmp	r3
 401638c:	040165d8 	cmpnei	r16,zero,1431
 4016390:	040163ec 	andhi	r16,zero,1423
 4016394:	040163ec 	andhi	r16,zero,1423
 4016398:	040163e8 	cmpgeui	r16,zero,1423
 401639c:	040165b4 	movhi	r16,1430
 40163a0:	040165b4 	movhi	r16,1430
 40163a4:	0401659c 	xori	r16,zero,1430
 40163a8:	040163e8 	cmpgeui	r16,zero,1423
 40163ac:	040165b4 	movhi	r16,1430
 40163b0:	0401659c 	xori	r16,zero,1430
 40163b4:	040165b4 	movhi	r16,1430
 40163b8:	040163e8 	cmpgeui	r16,zero,1423
 40163bc:	040165c4 	movi	r16,1431
 40163c0:	040165c4 	movi	r16,1431
 40163c4:	040165c4 	movi	r16,1431
 40163c8:	040167e0 	cmpeqi	r16,zero,1439
 40163cc:	2404b03a 	or	r2,r4,r16
 40163d0:	10006f1e 	bne	r2,zero,4016590 <__muldf3+0x2f8>
 40163d4:	04c00204 	movi	r19,8
 40163d8:	0021883a 	mov	r16,zero
 40163dc:	0029883a 	mov	r20,zero
 40163e0:	07000084 	movi	fp,2
 40163e4:	003fcb06 	br	4016314 <__alt_data_end+0xfc016314>
 40163e8:	502d883a 	mov	r22,r10
 40163ec:	00800084 	movi	r2,2
 40163f0:	28805726 	beq	r5,r2,4016550 <__muldf3+0x2b8>
 40163f4:	008000c4 	movi	r2,3
 40163f8:	28816626 	beq	r5,r2,4016994 <__muldf3+0x6fc>
 40163fc:	00800044 	movi	r2,1
 4016400:	2881411e 	bne	r5,r2,4016908 <__muldf3+0x670>
 4016404:	b02b883a 	mov	r21,r22
 4016408:	0005883a 	mov	r2,zero
 401640c:	000b883a 	mov	r5,zero
 4016410:	0029883a 	mov	r20,zero
 4016414:	1004953a 	slli	r2,r2,20
 4016418:	a8c03fcc 	andi	r3,r21,255
 401641c:	04400434 	movhi	r17,16
 4016420:	8c7fffc4 	addi	r17,r17,-1
 4016424:	180697fa 	slli	r3,r3,31
 4016428:	2c4a703a 	and	r5,r5,r17
 401642c:	288ab03a 	or	r5,r5,r2
 4016430:	28c6b03a 	or	r3,r5,r3
 4016434:	a005883a 	mov	r2,r20
 4016438:	dfc00c17 	ldw	ra,48(sp)
 401643c:	df000b17 	ldw	fp,44(sp)
 4016440:	ddc00a17 	ldw	r23,40(sp)
 4016444:	dd800917 	ldw	r22,36(sp)
 4016448:	dd400817 	ldw	r21,32(sp)
 401644c:	dd000717 	ldw	r20,28(sp)
 4016450:	dcc00617 	ldw	r19,24(sp)
 4016454:	dc800517 	ldw	r18,20(sp)
 4016458:	dc400417 	ldw	r17,16(sp)
 401645c:	dc000317 	ldw	r16,12(sp)
 4016460:	dec00d04 	addi	sp,sp,52
 4016464:	f800283a 	ret
 4016468:	2404b03a 	or	r2,r4,r16
 401646c:	2027883a 	mov	r19,r4
 4016470:	10004226 	beq	r2,zero,401657c <__muldf3+0x2e4>
 4016474:	8000fc26 	beq	r16,zero,4016868 <__muldf3+0x5d0>
 4016478:	8009883a 	mov	r4,r16
 401647c:	d9800215 	stw	r6,8(sp)
 4016480:	d9c00015 	stw	r7,0(sp)
 4016484:	da400115 	stw	r9,4(sp)
 4016488:	40174b00 	call	40174b0 <__clzsi2>
 401648c:	d9800217 	ldw	r6,8(sp)
 4016490:	d9c00017 	ldw	r7,0(sp)
 4016494:	da400117 	ldw	r9,4(sp)
 4016498:	113ffd44 	addi	r4,r2,-11
 401649c:	00c00704 	movi	r3,28
 40164a0:	1900ed16 	blt	r3,r4,4016858 <__muldf3+0x5c0>
 40164a4:	00c00744 	movi	r3,29
 40164a8:	147ffe04 	addi	r17,r2,-8
 40164ac:	1907c83a 	sub	r3,r3,r4
 40164b0:	8460983a 	sll	r16,r16,r17
 40164b4:	98c6d83a 	srl	r3,r19,r3
 40164b8:	9c68983a 	sll	r20,r19,r17
 40164bc:	1c20b03a 	or	r16,r3,r16
 40164c0:	1080fcc4 	addi	r2,r2,1011
 40164c4:	00a5c83a 	sub	r18,zero,r2
 40164c8:	0027883a 	mov	r19,zero
 40164cc:	0039883a 	mov	fp,zero
 40164d0:	003f9006 	br	4016314 <__alt_data_end+0xfc016314>
 40164d4:	3446b03a 	or	r3,r6,r17
 40164d8:	1800261e 	bne	r3,zero,4016574 <__muldf3+0x2dc>
 40164dc:	0023883a 	mov	r17,zero
 40164e0:	0011883a 	mov	r8,zero
 40164e4:	01400084 	movi	r5,2
 40164e8:	003f9c06 	br	401635c <__alt_data_end+0xfc01635c>
 40164ec:	3446b03a 	or	r3,r6,r17
 40164f0:	18001c26 	beq	r3,zero,4016564 <__muldf3+0x2cc>
 40164f4:	8800ce26 	beq	r17,zero,4016830 <__muldf3+0x598>
 40164f8:	8809883a 	mov	r4,r17
 40164fc:	d9800215 	stw	r6,8(sp)
 4016500:	da400115 	stw	r9,4(sp)
 4016504:	da800015 	stw	r10,0(sp)
 4016508:	40174b00 	call	40174b0 <__clzsi2>
 401650c:	d9800217 	ldw	r6,8(sp)
 4016510:	da400117 	ldw	r9,4(sp)
 4016514:	da800017 	ldw	r10,0(sp)
 4016518:	113ffd44 	addi	r4,r2,-11
 401651c:	00c00704 	movi	r3,28
 4016520:	1900bf16 	blt	r3,r4,4016820 <__muldf3+0x588>
 4016524:	00c00744 	movi	r3,29
 4016528:	123ffe04 	addi	r8,r2,-8
 401652c:	1907c83a 	sub	r3,r3,r4
 4016530:	8a22983a 	sll	r17,r17,r8
 4016534:	30c6d83a 	srl	r3,r6,r3
 4016538:	3210983a 	sll	r8,r6,r8
 401653c:	1c62b03a 	or	r17,r3,r17
 4016540:	1080fcc4 	addi	r2,r2,1011
 4016544:	0085c83a 	sub	r2,zero,r2
 4016548:	000b883a 	mov	r5,zero
 401654c:	003f8306 	br	401635c <__alt_data_end+0xfc01635c>
 4016550:	b02b883a 	mov	r21,r22
 4016554:	0081ffc4 	movi	r2,2047
 4016558:	000b883a 	mov	r5,zero
 401655c:	0029883a 	mov	r20,zero
 4016560:	003fac06 	br	4016414 <__alt_data_end+0xfc016414>
 4016564:	0023883a 	mov	r17,zero
 4016568:	0011883a 	mov	r8,zero
 401656c:	01400044 	movi	r5,1
 4016570:	003f7a06 	br	401635c <__alt_data_end+0xfc01635c>
 4016574:	014000c4 	movi	r5,3
 4016578:	003f7806 	br	401635c <__alt_data_end+0xfc01635c>
 401657c:	04c00104 	movi	r19,4
 4016580:	0021883a 	mov	r16,zero
 4016584:	0029883a 	mov	r20,zero
 4016588:	07000044 	movi	fp,1
 401658c:	003f6106 	br	4016314 <__alt_data_end+0xfc016314>
 4016590:	04c00304 	movi	r19,12
 4016594:	070000c4 	movi	fp,3
 4016598:	003f5e06 	br	4016314 <__alt_data_end+0xfc016314>
 401659c:	01400434 	movhi	r5,16
 40165a0:	002b883a 	mov	r21,zero
 40165a4:	297fffc4 	addi	r5,r5,-1
 40165a8:	053fffc4 	movi	r20,-1
 40165ac:	0081ffc4 	movi	r2,2047
 40165b0:	003f9806 	br	4016414 <__alt_data_end+0xfc016414>
 40165b4:	8023883a 	mov	r17,r16
 40165b8:	a011883a 	mov	r8,r20
 40165bc:	e00b883a 	mov	r5,fp
 40165c0:	003f8a06 	br	40163ec <__alt_data_end+0xfc0163ec>
 40165c4:	8023883a 	mov	r17,r16
 40165c8:	a011883a 	mov	r8,r20
 40165cc:	482d883a 	mov	r22,r9
 40165d0:	e00b883a 	mov	r5,fp
 40165d4:	003f8506 	br	40163ec <__alt_data_end+0xfc0163ec>
 40165d8:	a00ad43a 	srli	r5,r20,16
 40165dc:	401ad43a 	srli	r13,r8,16
 40165e0:	a53fffcc 	andi	r20,r20,65535
 40165e4:	423fffcc 	andi	r8,r8,65535
 40165e8:	4519383a 	mul	r12,r8,r20
 40165ec:	4147383a 	mul	r3,r8,r5
 40165f0:	6d09383a 	mul	r4,r13,r20
 40165f4:	600cd43a 	srli	r6,r12,16
 40165f8:	2b5d383a 	mul	r14,r5,r13
 40165fc:	20c9883a 	add	r4,r4,r3
 4016600:	310d883a 	add	r6,r6,r4
 4016604:	30c0022e 	bgeu	r6,r3,4016610 <__muldf3+0x378>
 4016608:	00c00074 	movhi	r3,1
 401660c:	70dd883a 	add	r14,r14,r3
 4016610:	8826d43a 	srli	r19,r17,16
 4016614:	8bffffcc 	andi	r15,r17,65535
 4016618:	7d23383a 	mul	r17,r15,r20
 401661c:	7949383a 	mul	r4,r15,r5
 4016620:	9d29383a 	mul	r20,r19,r20
 4016624:	8814d43a 	srli	r10,r17,16
 4016628:	3012943a 	slli	r9,r6,16
 401662c:	a129883a 	add	r20,r20,r4
 4016630:	633fffcc 	andi	r12,r12,65535
 4016634:	5515883a 	add	r10,r10,r20
 4016638:	3006d43a 	srli	r3,r6,16
 401663c:	4b13883a 	add	r9,r9,r12
 4016640:	2ccb383a 	mul	r5,r5,r19
 4016644:	5100022e 	bgeu	r10,r4,4016650 <__muldf3+0x3b8>
 4016648:	01000074 	movhi	r4,1
 401664c:	290b883a 	add	r5,r5,r4
 4016650:	802ad43a 	srli	r21,r16,16
 4016654:	843fffcc 	andi	r16,r16,65535
 4016658:	440d383a 	mul	r6,r8,r16
 401665c:	4565383a 	mul	r18,r8,r21
 4016660:	8349383a 	mul	r4,r16,r13
 4016664:	500e943a 	slli	r7,r10,16
 4016668:	3010d43a 	srli	r8,r6,16
 401666c:	5028d43a 	srli	r20,r10,16
 4016670:	2489883a 	add	r4,r4,r18
 4016674:	8abfffcc 	andi	r10,r17,65535
 4016678:	3a95883a 	add	r10,r7,r10
 401667c:	4119883a 	add	r12,r8,r4
 4016680:	a169883a 	add	r20,r20,r5
 4016684:	1a87883a 	add	r3,r3,r10
 4016688:	6d5b383a 	mul	r13,r13,r21
 401668c:	6480022e 	bgeu	r12,r18,4016698 <__muldf3+0x400>
 4016690:	01000074 	movhi	r4,1
 4016694:	691b883a 	add	r13,r13,r4
 4016698:	7c25383a 	mul	r18,r15,r16
 401669c:	7d4b383a 	mul	r5,r15,r21
 40166a0:	84cf383a 	mul	r7,r16,r19
 40166a4:	901ed43a 	srli	r15,r18,16
 40166a8:	6008d43a 	srli	r4,r12,16
 40166ac:	6010943a 	slli	r8,r12,16
 40166b0:	394f883a 	add	r7,r7,r5
 40166b4:	333fffcc 	andi	r12,r6,65535
 40166b8:	79df883a 	add	r15,r15,r7
 40166bc:	235b883a 	add	r13,r4,r13
 40166c0:	9d63383a 	mul	r17,r19,r21
 40166c4:	4309883a 	add	r4,r8,r12
 40166c8:	7940022e 	bgeu	r15,r5,40166d4 <__muldf3+0x43c>
 40166cc:	01400074 	movhi	r5,1
 40166d0:	8963883a 	add	r17,r17,r5
 40166d4:	780a943a 	slli	r5,r15,16
 40166d8:	91bfffcc 	andi	r6,r18,65535
 40166dc:	70c7883a 	add	r3,r14,r3
 40166e0:	298d883a 	add	r6,r5,r6
 40166e4:	1a8f803a 	cmpltu	r7,r3,r10
 40166e8:	350b883a 	add	r5,r6,r20
 40166ec:	20c7883a 	add	r3,r4,r3
 40166f0:	3955883a 	add	r10,r7,r5
 40166f4:	1909803a 	cmpltu	r4,r3,r4
 40166f8:	6a91883a 	add	r8,r13,r10
 40166fc:	780cd43a 	srli	r6,r15,16
 4016700:	2219883a 	add	r12,r4,r8
 4016704:	2d0b803a 	cmpltu	r5,r5,r20
 4016708:	51cf803a 	cmpltu	r7,r10,r7
 401670c:	29ceb03a 	or	r7,r5,r7
 4016710:	4351803a 	cmpltu	r8,r8,r13
 4016714:	610b803a 	cmpltu	r5,r12,r4
 4016718:	4148b03a 	or	r4,r8,r5
 401671c:	398f883a 	add	r7,r7,r6
 4016720:	3909883a 	add	r4,r7,r4
 4016724:	1810927a 	slli	r8,r3,9
 4016728:	2449883a 	add	r4,r4,r17
 401672c:	2008927a 	slli	r4,r4,9
 4016730:	6022d5fa 	srli	r17,r12,23
 4016734:	1806d5fa 	srli	r3,r3,23
 4016738:	4252b03a 	or	r9,r8,r9
 401673c:	600a927a 	slli	r5,r12,9
 4016740:	4810c03a 	cmpne	r8,r9,zero
 4016744:	2462b03a 	or	r17,r4,r17
 4016748:	40c6b03a 	or	r3,r8,r3
 401674c:	8900402c 	andhi	r4,r17,256
 4016750:	1950b03a 	or	r8,r3,r5
 4016754:	20000726 	beq	r4,zero,4016774 <__muldf3+0x4dc>
 4016758:	4006d07a 	srli	r3,r8,1
 401675c:	880497fa 	slli	r2,r17,31
 4016760:	4200004c 	andi	r8,r8,1
 4016764:	8822d07a 	srli	r17,r17,1
 4016768:	1a10b03a 	or	r8,r3,r8
 401676c:	1210b03a 	or	r8,r2,r8
 4016770:	5805883a 	mov	r2,r11
 4016774:	1140ffc4 	addi	r5,r2,1023
 4016778:	0140440e 	bge	zero,r5,401688c <__muldf3+0x5f4>
 401677c:	40c001cc 	andi	r3,r8,7
 4016780:	18000726 	beq	r3,zero,40167a0 <__muldf3+0x508>
 4016784:	40c003cc 	andi	r3,r8,15
 4016788:	01000104 	movi	r4,4
 401678c:	19000426 	beq	r3,r4,40167a0 <__muldf3+0x508>
 4016790:	4107883a 	add	r3,r8,r4
 4016794:	1a11803a 	cmpltu	r8,r3,r8
 4016798:	8a23883a 	add	r17,r17,r8
 401679c:	1811883a 	mov	r8,r3
 40167a0:	88c0402c 	andhi	r3,r17,256
 40167a4:	18000426 	beq	r3,zero,40167b8 <__muldf3+0x520>
 40167a8:	11410004 	addi	r5,r2,1024
 40167ac:	00bfc034 	movhi	r2,65280
 40167b0:	10bfffc4 	addi	r2,r2,-1
 40167b4:	88a2703a 	and	r17,r17,r2
 40167b8:	0081ff84 	movi	r2,2046
 40167bc:	117f6416 	blt	r2,r5,4016550 <__alt_data_end+0xfc016550>
 40167c0:	8828977a 	slli	r20,r17,29
 40167c4:	4010d0fa 	srli	r8,r8,3
 40167c8:	8822927a 	slli	r17,r17,9
 40167cc:	2881ffcc 	andi	r2,r5,2047
 40167d0:	a228b03a 	or	r20,r20,r8
 40167d4:	880ad33a 	srli	r5,r17,12
 40167d8:	b02b883a 	mov	r21,r22
 40167dc:	003f0d06 	br	4016414 <__alt_data_end+0xfc016414>
 40167e0:	8080022c 	andhi	r2,r16,8
 40167e4:	10000926 	beq	r2,zero,401680c <__muldf3+0x574>
 40167e8:	8880022c 	andhi	r2,r17,8
 40167ec:	1000071e 	bne	r2,zero,401680c <__muldf3+0x574>
 40167f0:	00800434 	movhi	r2,16
 40167f4:	89400234 	orhi	r5,r17,8
 40167f8:	10bfffc4 	addi	r2,r2,-1
 40167fc:	b82b883a 	mov	r21,r23
 4016800:	288a703a 	and	r5,r5,r2
 4016804:	4029883a 	mov	r20,r8
 4016808:	003f6806 	br	40165ac <__alt_data_end+0xfc0165ac>
 401680c:	00800434 	movhi	r2,16
 4016810:	81400234 	orhi	r5,r16,8
 4016814:	10bfffc4 	addi	r2,r2,-1
 4016818:	288a703a 	and	r5,r5,r2
 401681c:	003f6306 	br	40165ac <__alt_data_end+0xfc0165ac>
 4016820:	147ff604 	addi	r17,r2,-40
 4016824:	3462983a 	sll	r17,r6,r17
 4016828:	0011883a 	mov	r8,zero
 401682c:	003f4406 	br	4016540 <__alt_data_end+0xfc016540>
 4016830:	3009883a 	mov	r4,r6
 4016834:	d9800215 	stw	r6,8(sp)
 4016838:	da400115 	stw	r9,4(sp)
 401683c:	da800015 	stw	r10,0(sp)
 4016840:	40174b00 	call	40174b0 <__clzsi2>
 4016844:	10800804 	addi	r2,r2,32
 4016848:	da800017 	ldw	r10,0(sp)
 401684c:	da400117 	ldw	r9,4(sp)
 4016850:	d9800217 	ldw	r6,8(sp)
 4016854:	003f3006 	br	4016518 <__alt_data_end+0xfc016518>
 4016858:	143ff604 	addi	r16,r2,-40
 401685c:	9c20983a 	sll	r16,r19,r16
 4016860:	0029883a 	mov	r20,zero
 4016864:	003f1606 	br	40164c0 <__alt_data_end+0xfc0164c0>
 4016868:	d9800215 	stw	r6,8(sp)
 401686c:	d9c00015 	stw	r7,0(sp)
 4016870:	da400115 	stw	r9,4(sp)
 4016874:	40174b00 	call	40174b0 <__clzsi2>
 4016878:	10800804 	addi	r2,r2,32
 401687c:	da400117 	ldw	r9,4(sp)
 4016880:	d9c00017 	ldw	r7,0(sp)
 4016884:	d9800217 	ldw	r6,8(sp)
 4016888:	003f0306 	br	4016498 <__alt_data_end+0xfc016498>
 401688c:	00c00044 	movi	r3,1
 4016890:	1947c83a 	sub	r3,r3,r5
 4016894:	00800e04 	movi	r2,56
 4016898:	10feda16 	blt	r2,r3,4016404 <__alt_data_end+0xfc016404>
 401689c:	008007c4 	movi	r2,31
 40168a0:	10c01b16 	blt	r2,r3,4016910 <__muldf3+0x678>
 40168a4:	00800804 	movi	r2,32
 40168a8:	10c5c83a 	sub	r2,r2,r3
 40168ac:	888a983a 	sll	r5,r17,r2
 40168b0:	40c8d83a 	srl	r4,r8,r3
 40168b4:	4084983a 	sll	r2,r8,r2
 40168b8:	88e2d83a 	srl	r17,r17,r3
 40168bc:	2906b03a 	or	r3,r5,r4
 40168c0:	1004c03a 	cmpne	r2,r2,zero
 40168c4:	1886b03a 	or	r3,r3,r2
 40168c8:	188001cc 	andi	r2,r3,7
 40168cc:	10000726 	beq	r2,zero,40168ec <__muldf3+0x654>
 40168d0:	188003cc 	andi	r2,r3,15
 40168d4:	01000104 	movi	r4,4
 40168d8:	11000426 	beq	r2,r4,40168ec <__muldf3+0x654>
 40168dc:	1805883a 	mov	r2,r3
 40168e0:	10c00104 	addi	r3,r2,4
 40168e4:	1885803a 	cmpltu	r2,r3,r2
 40168e8:	88a3883a 	add	r17,r17,r2
 40168ec:	8880202c 	andhi	r2,r17,128
 40168f0:	10001c26 	beq	r2,zero,4016964 <__muldf3+0x6cc>
 40168f4:	b02b883a 	mov	r21,r22
 40168f8:	00800044 	movi	r2,1
 40168fc:	000b883a 	mov	r5,zero
 4016900:	0029883a 	mov	r20,zero
 4016904:	003ec306 	br	4016414 <__alt_data_end+0xfc016414>
 4016908:	5805883a 	mov	r2,r11
 401690c:	003f9906 	br	4016774 <__alt_data_end+0xfc016774>
 4016910:	00bff844 	movi	r2,-31
 4016914:	1145c83a 	sub	r2,r2,r5
 4016918:	8888d83a 	srl	r4,r17,r2
 401691c:	00800804 	movi	r2,32
 4016920:	18801a26 	beq	r3,r2,401698c <__muldf3+0x6f4>
 4016924:	00801004 	movi	r2,64
 4016928:	10c5c83a 	sub	r2,r2,r3
 401692c:	8884983a 	sll	r2,r17,r2
 4016930:	1204b03a 	or	r2,r2,r8
 4016934:	1004c03a 	cmpne	r2,r2,zero
 4016938:	2084b03a 	or	r2,r4,r2
 401693c:	144001cc 	andi	r17,r2,7
 4016940:	88000d1e 	bne	r17,zero,4016978 <__muldf3+0x6e0>
 4016944:	000b883a 	mov	r5,zero
 4016948:	1028d0fa 	srli	r20,r2,3
 401694c:	b02b883a 	mov	r21,r22
 4016950:	0005883a 	mov	r2,zero
 4016954:	a468b03a 	or	r20,r20,r17
 4016958:	003eae06 	br	4016414 <__alt_data_end+0xfc016414>
 401695c:	1007883a 	mov	r3,r2
 4016960:	0023883a 	mov	r17,zero
 4016964:	880a927a 	slli	r5,r17,9
 4016968:	1805883a 	mov	r2,r3
 401696c:	8822977a 	slli	r17,r17,29
 4016970:	280ad33a 	srli	r5,r5,12
 4016974:	003ff406 	br	4016948 <__alt_data_end+0xfc016948>
 4016978:	10c003cc 	andi	r3,r2,15
 401697c:	01000104 	movi	r4,4
 4016980:	193ff626 	beq	r3,r4,401695c <__alt_data_end+0xfc01695c>
 4016984:	0023883a 	mov	r17,zero
 4016988:	003fd506 	br	40168e0 <__alt_data_end+0xfc0168e0>
 401698c:	0005883a 	mov	r2,zero
 4016990:	003fe706 	br	4016930 <__alt_data_end+0xfc016930>
 4016994:	00800434 	movhi	r2,16
 4016998:	89400234 	orhi	r5,r17,8
 401699c:	10bfffc4 	addi	r2,r2,-1
 40169a0:	b02b883a 	mov	r21,r22
 40169a4:	288a703a 	and	r5,r5,r2
 40169a8:	4029883a 	mov	r20,r8
 40169ac:	003eff06 	br	40165ac <__alt_data_end+0xfc0165ac>

040169b0 <__subdf3>:
 40169b0:	02000434 	movhi	r8,16
 40169b4:	423fffc4 	addi	r8,r8,-1
 40169b8:	defffb04 	addi	sp,sp,-20
 40169bc:	2a14703a 	and	r10,r5,r8
 40169c0:	3812d53a 	srli	r9,r7,20
 40169c4:	3a10703a 	and	r8,r7,r8
 40169c8:	2006d77a 	srli	r3,r4,29
 40169cc:	3004d77a 	srli	r2,r6,29
 40169d0:	dc000015 	stw	r16,0(sp)
 40169d4:	501490fa 	slli	r10,r10,3
 40169d8:	2820d53a 	srli	r16,r5,20
 40169dc:	401090fa 	slli	r8,r8,3
 40169e0:	dc800215 	stw	r18,8(sp)
 40169e4:	dc400115 	stw	r17,4(sp)
 40169e8:	dfc00415 	stw	ra,16(sp)
 40169ec:	202290fa 	slli	r17,r4,3
 40169f0:	dcc00315 	stw	r19,12(sp)
 40169f4:	4a41ffcc 	andi	r9,r9,2047
 40169f8:	0101ffc4 	movi	r4,2047
 40169fc:	2824d7fa 	srli	r18,r5,31
 4016a00:	8401ffcc 	andi	r16,r16,2047
 4016a04:	50c6b03a 	or	r3,r10,r3
 4016a08:	380ed7fa 	srli	r7,r7,31
 4016a0c:	408ab03a 	or	r5,r8,r2
 4016a10:	300c90fa 	slli	r6,r6,3
 4016a14:	49009626 	beq	r9,r4,4016c70 <__subdf3+0x2c0>
 4016a18:	39c0005c 	xori	r7,r7,1
 4016a1c:	8245c83a 	sub	r2,r16,r9
 4016a20:	3c807426 	beq	r7,r18,4016bf4 <__subdf3+0x244>
 4016a24:	0080af0e 	bge	zero,r2,4016ce4 <__subdf3+0x334>
 4016a28:	48002a1e 	bne	r9,zero,4016ad4 <__subdf3+0x124>
 4016a2c:	2988b03a 	or	r4,r5,r6
 4016a30:	20009a1e 	bne	r4,zero,4016c9c <__subdf3+0x2ec>
 4016a34:	888001cc 	andi	r2,r17,7
 4016a38:	10000726 	beq	r2,zero,4016a58 <__subdf3+0xa8>
 4016a3c:	888003cc 	andi	r2,r17,15
 4016a40:	01000104 	movi	r4,4
 4016a44:	11000426 	beq	r2,r4,4016a58 <__subdf3+0xa8>
 4016a48:	890b883a 	add	r5,r17,r4
 4016a4c:	2c63803a 	cmpltu	r17,r5,r17
 4016a50:	1c47883a 	add	r3,r3,r17
 4016a54:	2823883a 	mov	r17,r5
 4016a58:	1880202c 	andhi	r2,r3,128
 4016a5c:	10005926 	beq	r2,zero,4016bc4 <__subdf3+0x214>
 4016a60:	84000044 	addi	r16,r16,1
 4016a64:	0081ffc4 	movi	r2,2047
 4016a68:	8080be26 	beq	r16,r2,4016d64 <__subdf3+0x3b4>
 4016a6c:	017fe034 	movhi	r5,65408
 4016a70:	297fffc4 	addi	r5,r5,-1
 4016a74:	1946703a 	and	r3,r3,r5
 4016a78:	1804977a 	slli	r2,r3,29
 4016a7c:	1806927a 	slli	r3,r3,9
 4016a80:	8822d0fa 	srli	r17,r17,3
 4016a84:	8401ffcc 	andi	r16,r16,2047
 4016a88:	180ad33a 	srli	r5,r3,12
 4016a8c:	9100004c 	andi	r4,r18,1
 4016a90:	1444b03a 	or	r2,r2,r17
 4016a94:	80c1ffcc 	andi	r3,r16,2047
 4016a98:	1820953a 	slli	r16,r3,20
 4016a9c:	20c03fcc 	andi	r3,r4,255
 4016aa0:	180897fa 	slli	r4,r3,31
 4016aa4:	00c00434 	movhi	r3,16
 4016aa8:	18ffffc4 	addi	r3,r3,-1
 4016aac:	28c6703a 	and	r3,r5,r3
 4016ab0:	1c06b03a 	or	r3,r3,r16
 4016ab4:	1906b03a 	or	r3,r3,r4
 4016ab8:	dfc00417 	ldw	ra,16(sp)
 4016abc:	dcc00317 	ldw	r19,12(sp)
 4016ac0:	dc800217 	ldw	r18,8(sp)
 4016ac4:	dc400117 	ldw	r17,4(sp)
 4016ac8:	dc000017 	ldw	r16,0(sp)
 4016acc:	dec00504 	addi	sp,sp,20
 4016ad0:	f800283a 	ret
 4016ad4:	0101ffc4 	movi	r4,2047
 4016ad8:	813fd626 	beq	r16,r4,4016a34 <__alt_data_end+0xfc016a34>
 4016adc:	29402034 	orhi	r5,r5,128
 4016ae0:	01000e04 	movi	r4,56
 4016ae4:	2080a316 	blt	r4,r2,4016d74 <__subdf3+0x3c4>
 4016ae8:	010007c4 	movi	r4,31
 4016aec:	2080c616 	blt	r4,r2,4016e08 <__subdf3+0x458>
 4016af0:	01000804 	movi	r4,32
 4016af4:	2089c83a 	sub	r4,r4,r2
 4016af8:	2910983a 	sll	r8,r5,r4
 4016afc:	308ed83a 	srl	r7,r6,r2
 4016b00:	3108983a 	sll	r4,r6,r4
 4016b04:	2884d83a 	srl	r2,r5,r2
 4016b08:	41ccb03a 	or	r6,r8,r7
 4016b0c:	2008c03a 	cmpne	r4,r4,zero
 4016b10:	310cb03a 	or	r6,r6,r4
 4016b14:	898dc83a 	sub	r6,r17,r6
 4016b18:	89a3803a 	cmpltu	r17,r17,r6
 4016b1c:	1887c83a 	sub	r3,r3,r2
 4016b20:	1c47c83a 	sub	r3,r3,r17
 4016b24:	3023883a 	mov	r17,r6
 4016b28:	1880202c 	andhi	r2,r3,128
 4016b2c:	10002326 	beq	r2,zero,4016bbc <__subdf3+0x20c>
 4016b30:	04c02034 	movhi	r19,128
 4016b34:	9cffffc4 	addi	r19,r19,-1
 4016b38:	1ce6703a 	and	r19,r3,r19
 4016b3c:	98007a26 	beq	r19,zero,4016d28 <__subdf3+0x378>
 4016b40:	9809883a 	mov	r4,r19
 4016b44:	40174b00 	call	40174b0 <__clzsi2>
 4016b48:	113ffe04 	addi	r4,r2,-8
 4016b4c:	00c007c4 	movi	r3,31
 4016b50:	19007b16 	blt	r3,r4,4016d40 <__subdf3+0x390>
 4016b54:	00800804 	movi	r2,32
 4016b58:	1105c83a 	sub	r2,r2,r4
 4016b5c:	8884d83a 	srl	r2,r17,r2
 4016b60:	9906983a 	sll	r3,r19,r4
 4016b64:	8922983a 	sll	r17,r17,r4
 4016b68:	10c4b03a 	or	r2,r2,r3
 4016b6c:	24007816 	blt	r4,r16,4016d50 <__subdf3+0x3a0>
 4016b70:	2421c83a 	sub	r16,r4,r16
 4016b74:	80c00044 	addi	r3,r16,1
 4016b78:	010007c4 	movi	r4,31
 4016b7c:	20c09516 	blt	r4,r3,4016dd4 <__subdf3+0x424>
 4016b80:	01400804 	movi	r5,32
 4016b84:	28cbc83a 	sub	r5,r5,r3
 4016b88:	88c8d83a 	srl	r4,r17,r3
 4016b8c:	8962983a 	sll	r17,r17,r5
 4016b90:	114a983a 	sll	r5,r2,r5
 4016b94:	10c6d83a 	srl	r3,r2,r3
 4016b98:	8804c03a 	cmpne	r2,r17,zero
 4016b9c:	290ab03a 	or	r5,r5,r4
 4016ba0:	28a2b03a 	or	r17,r5,r2
 4016ba4:	0021883a 	mov	r16,zero
 4016ba8:	003fa206 	br	4016a34 <__alt_data_end+0xfc016a34>
 4016bac:	2090b03a 	or	r8,r4,r2
 4016bb0:	40018e26 	beq	r8,zero,40171ec <__subdf3+0x83c>
 4016bb4:	1007883a 	mov	r3,r2
 4016bb8:	2023883a 	mov	r17,r4
 4016bbc:	888001cc 	andi	r2,r17,7
 4016bc0:	103f9e1e 	bne	r2,zero,4016a3c <__alt_data_end+0xfc016a3c>
 4016bc4:	1804977a 	slli	r2,r3,29
 4016bc8:	8822d0fa 	srli	r17,r17,3
 4016bcc:	1810d0fa 	srli	r8,r3,3
 4016bd0:	9100004c 	andi	r4,r18,1
 4016bd4:	1444b03a 	or	r2,r2,r17
 4016bd8:	00c1ffc4 	movi	r3,2047
 4016bdc:	80c02826 	beq	r16,r3,4016c80 <__subdf3+0x2d0>
 4016be0:	01400434 	movhi	r5,16
 4016be4:	297fffc4 	addi	r5,r5,-1
 4016be8:	80e0703a 	and	r16,r16,r3
 4016bec:	414a703a 	and	r5,r8,r5
 4016bf0:	003fa806 	br	4016a94 <__alt_data_end+0xfc016a94>
 4016bf4:	0080630e 	bge	zero,r2,4016d84 <__subdf3+0x3d4>
 4016bf8:	48003026 	beq	r9,zero,4016cbc <__subdf3+0x30c>
 4016bfc:	0101ffc4 	movi	r4,2047
 4016c00:	813f8c26 	beq	r16,r4,4016a34 <__alt_data_end+0xfc016a34>
 4016c04:	29402034 	orhi	r5,r5,128
 4016c08:	01000e04 	movi	r4,56
 4016c0c:	2080a90e 	bge	r4,r2,4016eb4 <__subdf3+0x504>
 4016c10:	298cb03a 	or	r6,r5,r6
 4016c14:	3012c03a 	cmpne	r9,r6,zero
 4016c18:	0005883a 	mov	r2,zero
 4016c1c:	4c53883a 	add	r9,r9,r17
 4016c20:	4c63803a 	cmpltu	r17,r9,r17
 4016c24:	10c7883a 	add	r3,r2,r3
 4016c28:	88c7883a 	add	r3,r17,r3
 4016c2c:	4823883a 	mov	r17,r9
 4016c30:	1880202c 	andhi	r2,r3,128
 4016c34:	1000d026 	beq	r2,zero,4016f78 <__subdf3+0x5c8>
 4016c38:	84000044 	addi	r16,r16,1
 4016c3c:	0081ffc4 	movi	r2,2047
 4016c40:	8080fe26 	beq	r16,r2,401703c <__subdf3+0x68c>
 4016c44:	00bfe034 	movhi	r2,65408
 4016c48:	10bfffc4 	addi	r2,r2,-1
 4016c4c:	1886703a 	and	r3,r3,r2
 4016c50:	880ad07a 	srli	r5,r17,1
 4016c54:	180497fa 	slli	r2,r3,31
 4016c58:	8900004c 	andi	r4,r17,1
 4016c5c:	2922b03a 	or	r17,r5,r4
 4016c60:	1806d07a 	srli	r3,r3,1
 4016c64:	1462b03a 	or	r17,r2,r17
 4016c68:	3825883a 	mov	r18,r7
 4016c6c:	003f7106 	br	4016a34 <__alt_data_end+0xfc016a34>
 4016c70:	2984b03a 	or	r2,r5,r6
 4016c74:	103f6826 	beq	r2,zero,4016a18 <__alt_data_end+0xfc016a18>
 4016c78:	39c03fcc 	andi	r7,r7,255
 4016c7c:	003f6706 	br	4016a1c <__alt_data_end+0xfc016a1c>
 4016c80:	4086b03a 	or	r3,r8,r2
 4016c84:	18015226 	beq	r3,zero,40171d0 <__subdf3+0x820>
 4016c88:	00c00434 	movhi	r3,16
 4016c8c:	41400234 	orhi	r5,r8,8
 4016c90:	18ffffc4 	addi	r3,r3,-1
 4016c94:	28ca703a 	and	r5,r5,r3
 4016c98:	003f7e06 	br	4016a94 <__alt_data_end+0xfc016a94>
 4016c9c:	10bfffc4 	addi	r2,r2,-1
 4016ca0:	1000491e 	bne	r2,zero,4016dc8 <__subdf3+0x418>
 4016ca4:	898fc83a 	sub	r7,r17,r6
 4016ca8:	89e3803a 	cmpltu	r17,r17,r7
 4016cac:	1947c83a 	sub	r3,r3,r5
 4016cb0:	1c47c83a 	sub	r3,r3,r17
 4016cb4:	3823883a 	mov	r17,r7
 4016cb8:	003f9b06 	br	4016b28 <__alt_data_end+0xfc016b28>
 4016cbc:	2988b03a 	or	r4,r5,r6
 4016cc0:	203f5c26 	beq	r4,zero,4016a34 <__alt_data_end+0xfc016a34>
 4016cc4:	10bfffc4 	addi	r2,r2,-1
 4016cc8:	1000931e 	bne	r2,zero,4016f18 <__subdf3+0x568>
 4016ccc:	898d883a 	add	r6,r17,r6
 4016cd0:	3463803a 	cmpltu	r17,r6,r17
 4016cd4:	1947883a 	add	r3,r3,r5
 4016cd8:	88c7883a 	add	r3,r17,r3
 4016cdc:	3023883a 	mov	r17,r6
 4016ce0:	003fd306 	br	4016c30 <__alt_data_end+0xfc016c30>
 4016ce4:	1000541e 	bne	r2,zero,4016e38 <__subdf3+0x488>
 4016ce8:	80800044 	addi	r2,r16,1
 4016cec:	1081ffcc 	andi	r2,r2,2047
 4016cf0:	01000044 	movi	r4,1
 4016cf4:	2080a20e 	bge	r4,r2,4016f80 <__subdf3+0x5d0>
 4016cf8:	8989c83a 	sub	r4,r17,r6
 4016cfc:	8905803a 	cmpltu	r2,r17,r4
 4016d00:	1967c83a 	sub	r19,r3,r5
 4016d04:	98a7c83a 	sub	r19,r19,r2
 4016d08:	9880202c 	andhi	r2,r19,128
 4016d0c:	10006326 	beq	r2,zero,4016e9c <__subdf3+0x4ec>
 4016d10:	3463c83a 	sub	r17,r6,r17
 4016d14:	28c7c83a 	sub	r3,r5,r3
 4016d18:	344d803a 	cmpltu	r6,r6,r17
 4016d1c:	19a7c83a 	sub	r19,r3,r6
 4016d20:	3825883a 	mov	r18,r7
 4016d24:	983f861e 	bne	r19,zero,4016b40 <__alt_data_end+0xfc016b40>
 4016d28:	8809883a 	mov	r4,r17
 4016d2c:	40174b00 	call	40174b0 <__clzsi2>
 4016d30:	10800804 	addi	r2,r2,32
 4016d34:	113ffe04 	addi	r4,r2,-8
 4016d38:	00c007c4 	movi	r3,31
 4016d3c:	193f850e 	bge	r3,r4,4016b54 <__alt_data_end+0xfc016b54>
 4016d40:	10bff604 	addi	r2,r2,-40
 4016d44:	8884983a 	sll	r2,r17,r2
 4016d48:	0023883a 	mov	r17,zero
 4016d4c:	243f880e 	bge	r4,r16,4016b70 <__alt_data_end+0xfc016b70>
 4016d50:	00ffe034 	movhi	r3,65408
 4016d54:	18ffffc4 	addi	r3,r3,-1
 4016d58:	8121c83a 	sub	r16,r16,r4
 4016d5c:	10c6703a 	and	r3,r2,r3
 4016d60:	003f3406 	br	4016a34 <__alt_data_end+0xfc016a34>
 4016d64:	9100004c 	andi	r4,r18,1
 4016d68:	000b883a 	mov	r5,zero
 4016d6c:	0005883a 	mov	r2,zero
 4016d70:	003f4806 	br	4016a94 <__alt_data_end+0xfc016a94>
 4016d74:	298cb03a 	or	r6,r5,r6
 4016d78:	300cc03a 	cmpne	r6,r6,zero
 4016d7c:	0005883a 	mov	r2,zero
 4016d80:	003f6406 	br	4016b14 <__alt_data_end+0xfc016b14>
 4016d84:	10009a1e 	bne	r2,zero,4016ff0 <__subdf3+0x640>
 4016d88:	82400044 	addi	r9,r16,1
 4016d8c:	4881ffcc 	andi	r2,r9,2047
 4016d90:	02800044 	movi	r10,1
 4016d94:	5080670e 	bge	r10,r2,4016f34 <__subdf3+0x584>
 4016d98:	0081ffc4 	movi	r2,2047
 4016d9c:	4880af26 	beq	r9,r2,401705c <__subdf3+0x6ac>
 4016da0:	898d883a 	add	r6,r17,r6
 4016da4:	1945883a 	add	r2,r3,r5
 4016da8:	3447803a 	cmpltu	r3,r6,r17
 4016dac:	1887883a 	add	r3,r3,r2
 4016db0:	182297fa 	slli	r17,r3,31
 4016db4:	300cd07a 	srli	r6,r6,1
 4016db8:	1806d07a 	srli	r3,r3,1
 4016dbc:	4821883a 	mov	r16,r9
 4016dc0:	89a2b03a 	or	r17,r17,r6
 4016dc4:	003f1b06 	br	4016a34 <__alt_data_end+0xfc016a34>
 4016dc8:	0101ffc4 	movi	r4,2047
 4016dcc:	813f441e 	bne	r16,r4,4016ae0 <__alt_data_end+0xfc016ae0>
 4016dd0:	003f1806 	br	4016a34 <__alt_data_end+0xfc016a34>
 4016dd4:	843ff844 	addi	r16,r16,-31
 4016dd8:	01400804 	movi	r5,32
 4016ddc:	1408d83a 	srl	r4,r2,r16
 4016de0:	19405026 	beq	r3,r5,4016f24 <__subdf3+0x574>
 4016de4:	01401004 	movi	r5,64
 4016de8:	28c7c83a 	sub	r3,r5,r3
 4016dec:	10c4983a 	sll	r2,r2,r3
 4016df0:	88a2b03a 	or	r17,r17,r2
 4016df4:	8822c03a 	cmpne	r17,r17,zero
 4016df8:	2462b03a 	or	r17,r4,r17
 4016dfc:	0007883a 	mov	r3,zero
 4016e00:	0021883a 	mov	r16,zero
 4016e04:	003f6d06 	br	4016bbc <__alt_data_end+0xfc016bbc>
 4016e08:	11fff804 	addi	r7,r2,-32
 4016e0c:	01000804 	movi	r4,32
 4016e10:	29ced83a 	srl	r7,r5,r7
 4016e14:	11004526 	beq	r2,r4,4016f2c <__subdf3+0x57c>
 4016e18:	01001004 	movi	r4,64
 4016e1c:	2089c83a 	sub	r4,r4,r2
 4016e20:	2904983a 	sll	r2,r5,r4
 4016e24:	118cb03a 	or	r6,r2,r6
 4016e28:	300cc03a 	cmpne	r6,r6,zero
 4016e2c:	398cb03a 	or	r6,r7,r6
 4016e30:	0005883a 	mov	r2,zero
 4016e34:	003f3706 	br	4016b14 <__alt_data_end+0xfc016b14>
 4016e38:	80002a26 	beq	r16,zero,4016ee4 <__subdf3+0x534>
 4016e3c:	0101ffc4 	movi	r4,2047
 4016e40:	49006626 	beq	r9,r4,4016fdc <__subdf3+0x62c>
 4016e44:	0085c83a 	sub	r2,zero,r2
 4016e48:	18c02034 	orhi	r3,r3,128
 4016e4c:	01000e04 	movi	r4,56
 4016e50:	20807e16 	blt	r4,r2,401704c <__subdf3+0x69c>
 4016e54:	010007c4 	movi	r4,31
 4016e58:	2080e716 	blt	r4,r2,40171f8 <__subdf3+0x848>
 4016e5c:	01000804 	movi	r4,32
 4016e60:	2089c83a 	sub	r4,r4,r2
 4016e64:	1914983a 	sll	r10,r3,r4
 4016e68:	8890d83a 	srl	r8,r17,r2
 4016e6c:	8908983a 	sll	r4,r17,r4
 4016e70:	1884d83a 	srl	r2,r3,r2
 4016e74:	5222b03a 	or	r17,r10,r8
 4016e78:	2006c03a 	cmpne	r3,r4,zero
 4016e7c:	88e2b03a 	or	r17,r17,r3
 4016e80:	3463c83a 	sub	r17,r6,r17
 4016e84:	2885c83a 	sub	r2,r5,r2
 4016e88:	344d803a 	cmpltu	r6,r6,r17
 4016e8c:	1187c83a 	sub	r3,r2,r6
 4016e90:	4821883a 	mov	r16,r9
 4016e94:	3825883a 	mov	r18,r7
 4016e98:	003f2306 	br	4016b28 <__alt_data_end+0xfc016b28>
 4016e9c:	24d0b03a 	or	r8,r4,r19
 4016ea0:	40001b1e 	bne	r8,zero,4016f10 <__subdf3+0x560>
 4016ea4:	0005883a 	mov	r2,zero
 4016ea8:	0009883a 	mov	r4,zero
 4016eac:	0021883a 	mov	r16,zero
 4016eb0:	003f4906 	br	4016bd8 <__alt_data_end+0xfc016bd8>
 4016eb4:	010007c4 	movi	r4,31
 4016eb8:	20803a16 	blt	r4,r2,4016fa4 <__subdf3+0x5f4>
 4016ebc:	01000804 	movi	r4,32
 4016ec0:	2089c83a 	sub	r4,r4,r2
 4016ec4:	2912983a 	sll	r9,r5,r4
 4016ec8:	3090d83a 	srl	r8,r6,r2
 4016ecc:	3108983a 	sll	r4,r6,r4
 4016ed0:	2884d83a 	srl	r2,r5,r2
 4016ed4:	4a12b03a 	or	r9,r9,r8
 4016ed8:	2008c03a 	cmpne	r4,r4,zero
 4016edc:	4912b03a 	or	r9,r9,r4
 4016ee0:	003f4e06 	br	4016c1c <__alt_data_end+0xfc016c1c>
 4016ee4:	1c48b03a 	or	r4,r3,r17
 4016ee8:	20003c26 	beq	r4,zero,4016fdc <__subdf3+0x62c>
 4016eec:	0084303a 	nor	r2,zero,r2
 4016ef0:	1000381e 	bne	r2,zero,4016fd4 <__subdf3+0x624>
 4016ef4:	3463c83a 	sub	r17,r6,r17
 4016ef8:	28c5c83a 	sub	r2,r5,r3
 4016efc:	344d803a 	cmpltu	r6,r6,r17
 4016f00:	1187c83a 	sub	r3,r2,r6
 4016f04:	4821883a 	mov	r16,r9
 4016f08:	3825883a 	mov	r18,r7
 4016f0c:	003f0606 	br	4016b28 <__alt_data_end+0xfc016b28>
 4016f10:	2023883a 	mov	r17,r4
 4016f14:	003f0906 	br	4016b3c <__alt_data_end+0xfc016b3c>
 4016f18:	0101ffc4 	movi	r4,2047
 4016f1c:	813f3a1e 	bne	r16,r4,4016c08 <__alt_data_end+0xfc016c08>
 4016f20:	003ec406 	br	4016a34 <__alt_data_end+0xfc016a34>
 4016f24:	0005883a 	mov	r2,zero
 4016f28:	003fb106 	br	4016df0 <__alt_data_end+0xfc016df0>
 4016f2c:	0005883a 	mov	r2,zero
 4016f30:	003fbc06 	br	4016e24 <__alt_data_end+0xfc016e24>
 4016f34:	1c44b03a 	or	r2,r3,r17
 4016f38:	80008e1e 	bne	r16,zero,4017174 <__subdf3+0x7c4>
 4016f3c:	1000c826 	beq	r2,zero,4017260 <__subdf3+0x8b0>
 4016f40:	2984b03a 	or	r2,r5,r6
 4016f44:	103ebb26 	beq	r2,zero,4016a34 <__alt_data_end+0xfc016a34>
 4016f48:	8989883a 	add	r4,r17,r6
 4016f4c:	1945883a 	add	r2,r3,r5
 4016f50:	2447803a 	cmpltu	r3,r4,r17
 4016f54:	1887883a 	add	r3,r3,r2
 4016f58:	1880202c 	andhi	r2,r3,128
 4016f5c:	2023883a 	mov	r17,r4
 4016f60:	103f1626 	beq	r2,zero,4016bbc <__alt_data_end+0xfc016bbc>
 4016f64:	00bfe034 	movhi	r2,65408
 4016f68:	10bfffc4 	addi	r2,r2,-1
 4016f6c:	5021883a 	mov	r16,r10
 4016f70:	1886703a 	and	r3,r3,r2
 4016f74:	003eaf06 	br	4016a34 <__alt_data_end+0xfc016a34>
 4016f78:	3825883a 	mov	r18,r7
 4016f7c:	003f0f06 	br	4016bbc <__alt_data_end+0xfc016bbc>
 4016f80:	1c44b03a 	or	r2,r3,r17
 4016f84:	8000251e 	bne	r16,zero,401701c <__subdf3+0x66c>
 4016f88:	1000661e 	bne	r2,zero,4017124 <__subdf3+0x774>
 4016f8c:	2990b03a 	or	r8,r5,r6
 4016f90:	40009626 	beq	r8,zero,40171ec <__subdf3+0x83c>
 4016f94:	2807883a 	mov	r3,r5
 4016f98:	3023883a 	mov	r17,r6
 4016f9c:	3825883a 	mov	r18,r7
 4016fa0:	003ea406 	br	4016a34 <__alt_data_end+0xfc016a34>
 4016fa4:	127ff804 	addi	r9,r2,-32
 4016fa8:	01000804 	movi	r4,32
 4016fac:	2a52d83a 	srl	r9,r5,r9
 4016fb0:	11008c26 	beq	r2,r4,40171e4 <__subdf3+0x834>
 4016fb4:	01001004 	movi	r4,64
 4016fb8:	2085c83a 	sub	r2,r4,r2
 4016fbc:	2884983a 	sll	r2,r5,r2
 4016fc0:	118cb03a 	or	r6,r2,r6
 4016fc4:	300cc03a 	cmpne	r6,r6,zero
 4016fc8:	4992b03a 	or	r9,r9,r6
 4016fcc:	0005883a 	mov	r2,zero
 4016fd0:	003f1206 	br	4016c1c <__alt_data_end+0xfc016c1c>
 4016fd4:	0101ffc4 	movi	r4,2047
 4016fd8:	493f9c1e 	bne	r9,r4,4016e4c <__alt_data_end+0xfc016e4c>
 4016fdc:	2807883a 	mov	r3,r5
 4016fe0:	3023883a 	mov	r17,r6
 4016fe4:	4821883a 	mov	r16,r9
 4016fe8:	3825883a 	mov	r18,r7
 4016fec:	003e9106 	br	4016a34 <__alt_data_end+0xfc016a34>
 4016ff0:	80001f1e 	bne	r16,zero,4017070 <__subdf3+0x6c0>
 4016ff4:	1c48b03a 	or	r4,r3,r17
 4016ff8:	20005a26 	beq	r4,zero,4017164 <__subdf3+0x7b4>
 4016ffc:	0084303a 	nor	r2,zero,r2
 4017000:	1000561e 	bne	r2,zero,401715c <__subdf3+0x7ac>
 4017004:	89a3883a 	add	r17,r17,r6
 4017008:	1945883a 	add	r2,r3,r5
 401700c:	898d803a 	cmpltu	r6,r17,r6
 4017010:	3087883a 	add	r3,r6,r2
 4017014:	4821883a 	mov	r16,r9
 4017018:	003f0506 	br	4016c30 <__alt_data_end+0xfc016c30>
 401701c:	10002b1e 	bne	r2,zero,40170cc <__subdf3+0x71c>
 4017020:	2984b03a 	or	r2,r5,r6
 4017024:	10008026 	beq	r2,zero,4017228 <__subdf3+0x878>
 4017028:	2807883a 	mov	r3,r5
 401702c:	3023883a 	mov	r17,r6
 4017030:	3825883a 	mov	r18,r7
 4017034:	0401ffc4 	movi	r16,2047
 4017038:	003e7e06 	br	4016a34 <__alt_data_end+0xfc016a34>
 401703c:	3809883a 	mov	r4,r7
 4017040:	0011883a 	mov	r8,zero
 4017044:	0005883a 	mov	r2,zero
 4017048:	003ee306 	br	4016bd8 <__alt_data_end+0xfc016bd8>
 401704c:	1c62b03a 	or	r17,r3,r17
 4017050:	8822c03a 	cmpne	r17,r17,zero
 4017054:	0005883a 	mov	r2,zero
 4017058:	003f8906 	br	4016e80 <__alt_data_end+0xfc016e80>
 401705c:	3809883a 	mov	r4,r7
 4017060:	4821883a 	mov	r16,r9
 4017064:	0011883a 	mov	r8,zero
 4017068:	0005883a 	mov	r2,zero
 401706c:	003eda06 	br	4016bd8 <__alt_data_end+0xfc016bd8>
 4017070:	0101ffc4 	movi	r4,2047
 4017074:	49003b26 	beq	r9,r4,4017164 <__subdf3+0x7b4>
 4017078:	0085c83a 	sub	r2,zero,r2
 401707c:	18c02034 	orhi	r3,r3,128
 4017080:	01000e04 	movi	r4,56
 4017084:	20806e16 	blt	r4,r2,4017240 <__subdf3+0x890>
 4017088:	010007c4 	movi	r4,31
 401708c:	20807716 	blt	r4,r2,401726c <__subdf3+0x8bc>
 4017090:	01000804 	movi	r4,32
 4017094:	2089c83a 	sub	r4,r4,r2
 4017098:	1914983a 	sll	r10,r3,r4
 401709c:	8890d83a 	srl	r8,r17,r2
 40170a0:	8908983a 	sll	r4,r17,r4
 40170a4:	1884d83a 	srl	r2,r3,r2
 40170a8:	5222b03a 	or	r17,r10,r8
 40170ac:	2006c03a 	cmpne	r3,r4,zero
 40170b0:	88e2b03a 	or	r17,r17,r3
 40170b4:	89a3883a 	add	r17,r17,r6
 40170b8:	1145883a 	add	r2,r2,r5
 40170bc:	898d803a 	cmpltu	r6,r17,r6
 40170c0:	3087883a 	add	r3,r6,r2
 40170c4:	4821883a 	mov	r16,r9
 40170c8:	003ed906 	br	4016c30 <__alt_data_end+0xfc016c30>
 40170cc:	2984b03a 	or	r2,r5,r6
 40170d0:	10004226 	beq	r2,zero,40171dc <__subdf3+0x82c>
 40170d4:	1808d0fa 	srli	r4,r3,3
 40170d8:	8822d0fa 	srli	r17,r17,3
 40170dc:	1806977a 	slli	r3,r3,29
 40170e0:	2080022c 	andhi	r2,r4,8
 40170e4:	1c62b03a 	or	r17,r3,r17
 40170e8:	10000826 	beq	r2,zero,401710c <__subdf3+0x75c>
 40170ec:	2812d0fa 	srli	r9,r5,3
 40170f0:	4880022c 	andhi	r2,r9,8
 40170f4:	1000051e 	bne	r2,zero,401710c <__subdf3+0x75c>
 40170f8:	300cd0fa 	srli	r6,r6,3
 40170fc:	2804977a 	slli	r2,r5,29
 4017100:	4809883a 	mov	r4,r9
 4017104:	3825883a 	mov	r18,r7
 4017108:	11a2b03a 	or	r17,r2,r6
 401710c:	8806d77a 	srli	r3,r17,29
 4017110:	200890fa 	slli	r4,r4,3
 4017114:	882290fa 	slli	r17,r17,3
 4017118:	0401ffc4 	movi	r16,2047
 401711c:	1906b03a 	or	r3,r3,r4
 4017120:	003e4406 	br	4016a34 <__alt_data_end+0xfc016a34>
 4017124:	2984b03a 	or	r2,r5,r6
 4017128:	103e4226 	beq	r2,zero,4016a34 <__alt_data_end+0xfc016a34>
 401712c:	8989c83a 	sub	r4,r17,r6
 4017130:	8911803a 	cmpltu	r8,r17,r4
 4017134:	1945c83a 	sub	r2,r3,r5
 4017138:	1205c83a 	sub	r2,r2,r8
 401713c:	1200202c 	andhi	r8,r2,128
 4017140:	403e9a26 	beq	r8,zero,4016bac <__alt_data_end+0xfc016bac>
 4017144:	3463c83a 	sub	r17,r6,r17
 4017148:	28c5c83a 	sub	r2,r5,r3
 401714c:	344d803a 	cmpltu	r6,r6,r17
 4017150:	1187c83a 	sub	r3,r2,r6
 4017154:	3825883a 	mov	r18,r7
 4017158:	003e3606 	br	4016a34 <__alt_data_end+0xfc016a34>
 401715c:	0101ffc4 	movi	r4,2047
 4017160:	493fc71e 	bne	r9,r4,4017080 <__alt_data_end+0xfc017080>
 4017164:	2807883a 	mov	r3,r5
 4017168:	3023883a 	mov	r17,r6
 401716c:	4821883a 	mov	r16,r9
 4017170:	003e3006 	br	4016a34 <__alt_data_end+0xfc016a34>
 4017174:	10003626 	beq	r2,zero,4017250 <__subdf3+0x8a0>
 4017178:	2984b03a 	or	r2,r5,r6
 401717c:	10001726 	beq	r2,zero,40171dc <__subdf3+0x82c>
 4017180:	1808d0fa 	srli	r4,r3,3
 4017184:	8822d0fa 	srli	r17,r17,3
 4017188:	1806977a 	slli	r3,r3,29
 401718c:	2080022c 	andhi	r2,r4,8
 4017190:	1c62b03a 	or	r17,r3,r17
 4017194:	10000726 	beq	r2,zero,40171b4 <__subdf3+0x804>
 4017198:	2812d0fa 	srli	r9,r5,3
 401719c:	4880022c 	andhi	r2,r9,8
 40171a0:	1000041e 	bne	r2,zero,40171b4 <__subdf3+0x804>
 40171a4:	300cd0fa 	srli	r6,r6,3
 40171a8:	2804977a 	slli	r2,r5,29
 40171ac:	4809883a 	mov	r4,r9
 40171b0:	11a2b03a 	or	r17,r2,r6
 40171b4:	8806d77a 	srli	r3,r17,29
 40171b8:	200890fa 	slli	r4,r4,3
 40171bc:	882290fa 	slli	r17,r17,3
 40171c0:	3825883a 	mov	r18,r7
 40171c4:	1906b03a 	or	r3,r3,r4
 40171c8:	0401ffc4 	movi	r16,2047
 40171cc:	003e1906 	br	4016a34 <__alt_data_end+0xfc016a34>
 40171d0:	000b883a 	mov	r5,zero
 40171d4:	0005883a 	mov	r2,zero
 40171d8:	003e2e06 	br	4016a94 <__alt_data_end+0xfc016a94>
 40171dc:	0401ffc4 	movi	r16,2047
 40171e0:	003e1406 	br	4016a34 <__alt_data_end+0xfc016a34>
 40171e4:	0005883a 	mov	r2,zero
 40171e8:	003f7506 	br	4016fc0 <__alt_data_end+0xfc016fc0>
 40171ec:	0005883a 	mov	r2,zero
 40171f0:	0009883a 	mov	r4,zero
 40171f4:	003e7806 	br	4016bd8 <__alt_data_end+0xfc016bd8>
 40171f8:	123ff804 	addi	r8,r2,-32
 40171fc:	01000804 	movi	r4,32
 4017200:	1a10d83a 	srl	r8,r3,r8
 4017204:	11002526 	beq	r2,r4,401729c <__subdf3+0x8ec>
 4017208:	01001004 	movi	r4,64
 401720c:	2085c83a 	sub	r2,r4,r2
 4017210:	1884983a 	sll	r2,r3,r2
 4017214:	1444b03a 	or	r2,r2,r17
 4017218:	1004c03a 	cmpne	r2,r2,zero
 401721c:	40a2b03a 	or	r17,r8,r2
 4017220:	0005883a 	mov	r2,zero
 4017224:	003f1606 	br	4016e80 <__alt_data_end+0xfc016e80>
 4017228:	02000434 	movhi	r8,16
 401722c:	0009883a 	mov	r4,zero
 4017230:	423fffc4 	addi	r8,r8,-1
 4017234:	00bfffc4 	movi	r2,-1
 4017238:	0401ffc4 	movi	r16,2047
 401723c:	003e6606 	br	4016bd8 <__alt_data_end+0xfc016bd8>
 4017240:	1c62b03a 	or	r17,r3,r17
 4017244:	8822c03a 	cmpne	r17,r17,zero
 4017248:	0005883a 	mov	r2,zero
 401724c:	003f9906 	br	40170b4 <__alt_data_end+0xfc0170b4>
 4017250:	2807883a 	mov	r3,r5
 4017254:	3023883a 	mov	r17,r6
 4017258:	0401ffc4 	movi	r16,2047
 401725c:	003df506 	br	4016a34 <__alt_data_end+0xfc016a34>
 4017260:	2807883a 	mov	r3,r5
 4017264:	3023883a 	mov	r17,r6
 4017268:	003df206 	br	4016a34 <__alt_data_end+0xfc016a34>
 401726c:	123ff804 	addi	r8,r2,-32
 4017270:	01000804 	movi	r4,32
 4017274:	1a10d83a 	srl	r8,r3,r8
 4017278:	11000a26 	beq	r2,r4,40172a4 <__subdf3+0x8f4>
 401727c:	01001004 	movi	r4,64
 4017280:	2085c83a 	sub	r2,r4,r2
 4017284:	1884983a 	sll	r2,r3,r2
 4017288:	1444b03a 	or	r2,r2,r17
 401728c:	1004c03a 	cmpne	r2,r2,zero
 4017290:	40a2b03a 	or	r17,r8,r2
 4017294:	0005883a 	mov	r2,zero
 4017298:	003f8606 	br	40170b4 <__alt_data_end+0xfc0170b4>
 401729c:	0005883a 	mov	r2,zero
 40172a0:	003fdc06 	br	4017214 <__alt_data_end+0xfc017214>
 40172a4:	0005883a 	mov	r2,zero
 40172a8:	003ff706 	br	4017288 <__alt_data_end+0xfc017288>

040172ac <__fixdfsi>:
 40172ac:	280cd53a 	srli	r6,r5,20
 40172b0:	00c00434 	movhi	r3,16
 40172b4:	18ffffc4 	addi	r3,r3,-1
 40172b8:	3181ffcc 	andi	r6,r6,2047
 40172bc:	01c0ff84 	movi	r7,1022
 40172c0:	28c6703a 	and	r3,r5,r3
 40172c4:	280ad7fa 	srli	r5,r5,31
 40172c8:	3980120e 	bge	r7,r6,4017314 <__fixdfsi+0x68>
 40172cc:	00810744 	movi	r2,1053
 40172d0:	11800c16 	blt	r2,r6,4017304 <__fixdfsi+0x58>
 40172d4:	00810cc4 	movi	r2,1075
 40172d8:	1185c83a 	sub	r2,r2,r6
 40172dc:	01c007c4 	movi	r7,31
 40172e0:	18c00434 	orhi	r3,r3,16
 40172e4:	38800d16 	blt	r7,r2,401731c <__fixdfsi+0x70>
 40172e8:	31befb44 	addi	r6,r6,-1043
 40172ec:	2084d83a 	srl	r2,r4,r2
 40172f0:	1986983a 	sll	r3,r3,r6
 40172f4:	1884b03a 	or	r2,r3,r2
 40172f8:	28000726 	beq	r5,zero,4017318 <__fixdfsi+0x6c>
 40172fc:	0085c83a 	sub	r2,zero,r2
 4017300:	f800283a 	ret
 4017304:	00a00034 	movhi	r2,32768
 4017308:	10bfffc4 	addi	r2,r2,-1
 401730c:	2885883a 	add	r2,r5,r2
 4017310:	f800283a 	ret
 4017314:	0005883a 	mov	r2,zero
 4017318:	f800283a 	ret
 401731c:	008104c4 	movi	r2,1043
 4017320:	1185c83a 	sub	r2,r2,r6
 4017324:	1884d83a 	srl	r2,r3,r2
 4017328:	003ff306 	br	40172f8 <__alt_data_end+0xfc0172f8>

0401732c <__floatsidf>:
 401732c:	defffd04 	addi	sp,sp,-12
 4017330:	dfc00215 	stw	ra,8(sp)
 4017334:	dc400115 	stw	r17,4(sp)
 4017338:	dc000015 	stw	r16,0(sp)
 401733c:	20002b26 	beq	r4,zero,40173ec <__floatsidf+0xc0>
 4017340:	2023883a 	mov	r17,r4
 4017344:	2020d7fa 	srli	r16,r4,31
 4017348:	20002d16 	blt	r4,zero,4017400 <__floatsidf+0xd4>
 401734c:	8809883a 	mov	r4,r17
 4017350:	40174b00 	call	40174b0 <__clzsi2>
 4017354:	01410784 	movi	r5,1054
 4017358:	288bc83a 	sub	r5,r5,r2
 401735c:	01010cc4 	movi	r4,1075
 4017360:	2149c83a 	sub	r4,r4,r5
 4017364:	00c007c4 	movi	r3,31
 4017368:	1900160e 	bge	r3,r4,40173c4 <__floatsidf+0x98>
 401736c:	00c104c4 	movi	r3,1043
 4017370:	1947c83a 	sub	r3,r3,r5
 4017374:	88c6983a 	sll	r3,r17,r3
 4017378:	00800434 	movhi	r2,16
 401737c:	10bfffc4 	addi	r2,r2,-1
 4017380:	1886703a 	and	r3,r3,r2
 4017384:	2941ffcc 	andi	r5,r5,2047
 4017388:	800d883a 	mov	r6,r16
 401738c:	0005883a 	mov	r2,zero
 4017390:	280a953a 	slli	r5,r5,20
 4017394:	31803fcc 	andi	r6,r6,255
 4017398:	01000434 	movhi	r4,16
 401739c:	300c97fa 	slli	r6,r6,31
 40173a0:	213fffc4 	addi	r4,r4,-1
 40173a4:	1906703a 	and	r3,r3,r4
 40173a8:	1946b03a 	or	r3,r3,r5
 40173ac:	1986b03a 	or	r3,r3,r6
 40173b0:	dfc00217 	ldw	ra,8(sp)
 40173b4:	dc400117 	ldw	r17,4(sp)
 40173b8:	dc000017 	ldw	r16,0(sp)
 40173bc:	dec00304 	addi	sp,sp,12
 40173c0:	f800283a 	ret
 40173c4:	00c002c4 	movi	r3,11
 40173c8:	1887c83a 	sub	r3,r3,r2
 40173cc:	88c6d83a 	srl	r3,r17,r3
 40173d0:	8904983a 	sll	r2,r17,r4
 40173d4:	01000434 	movhi	r4,16
 40173d8:	213fffc4 	addi	r4,r4,-1
 40173dc:	2941ffcc 	andi	r5,r5,2047
 40173e0:	1906703a 	and	r3,r3,r4
 40173e4:	800d883a 	mov	r6,r16
 40173e8:	003fe906 	br	4017390 <__alt_data_end+0xfc017390>
 40173ec:	000d883a 	mov	r6,zero
 40173f0:	000b883a 	mov	r5,zero
 40173f4:	0007883a 	mov	r3,zero
 40173f8:	0005883a 	mov	r2,zero
 40173fc:	003fe406 	br	4017390 <__alt_data_end+0xfc017390>
 4017400:	0123c83a 	sub	r17,zero,r4
 4017404:	003fd106 	br	401734c <__alt_data_end+0xfc01734c>

04017408 <__floatunsidf>:
 4017408:	defffe04 	addi	sp,sp,-8
 401740c:	dc000015 	stw	r16,0(sp)
 4017410:	dfc00115 	stw	ra,4(sp)
 4017414:	2021883a 	mov	r16,r4
 4017418:	20002226 	beq	r4,zero,40174a4 <__floatunsidf+0x9c>
 401741c:	40174b00 	call	40174b0 <__clzsi2>
 4017420:	01010784 	movi	r4,1054
 4017424:	2089c83a 	sub	r4,r4,r2
 4017428:	01810cc4 	movi	r6,1075
 401742c:	310dc83a 	sub	r6,r6,r4
 4017430:	00c007c4 	movi	r3,31
 4017434:	1980120e 	bge	r3,r6,4017480 <__floatunsidf+0x78>
 4017438:	00c104c4 	movi	r3,1043
 401743c:	1907c83a 	sub	r3,r3,r4
 4017440:	80ca983a 	sll	r5,r16,r3
 4017444:	00800434 	movhi	r2,16
 4017448:	10bfffc4 	addi	r2,r2,-1
 401744c:	2101ffcc 	andi	r4,r4,2047
 4017450:	0021883a 	mov	r16,zero
 4017454:	288a703a 	and	r5,r5,r2
 4017458:	2008953a 	slli	r4,r4,20
 401745c:	00c00434 	movhi	r3,16
 4017460:	18ffffc4 	addi	r3,r3,-1
 4017464:	28c6703a 	and	r3,r5,r3
 4017468:	8005883a 	mov	r2,r16
 401746c:	1906b03a 	or	r3,r3,r4
 4017470:	dfc00117 	ldw	ra,4(sp)
 4017474:	dc000017 	ldw	r16,0(sp)
 4017478:	dec00204 	addi	sp,sp,8
 401747c:	f800283a 	ret
 4017480:	00c002c4 	movi	r3,11
 4017484:	188bc83a 	sub	r5,r3,r2
 4017488:	814ad83a 	srl	r5,r16,r5
 401748c:	00c00434 	movhi	r3,16
 4017490:	18ffffc4 	addi	r3,r3,-1
 4017494:	81a0983a 	sll	r16,r16,r6
 4017498:	2101ffcc 	andi	r4,r4,2047
 401749c:	28ca703a 	and	r5,r5,r3
 40174a0:	003fed06 	br	4017458 <__alt_data_end+0xfc017458>
 40174a4:	0009883a 	mov	r4,zero
 40174a8:	000b883a 	mov	r5,zero
 40174ac:	003fea06 	br	4017458 <__alt_data_end+0xfc017458>

040174b0 <__clzsi2>:
 40174b0:	00bfffd4 	movui	r2,65535
 40174b4:	11000536 	bltu	r2,r4,40174cc <__clzsi2+0x1c>
 40174b8:	00803fc4 	movi	r2,255
 40174bc:	11000f36 	bltu	r2,r4,40174fc <__clzsi2+0x4c>
 40174c0:	00800804 	movi	r2,32
 40174c4:	0007883a 	mov	r3,zero
 40174c8:	00000506 	br	40174e0 <__clzsi2+0x30>
 40174cc:	00804034 	movhi	r2,256
 40174d0:	10bfffc4 	addi	r2,r2,-1
 40174d4:	11000c2e 	bgeu	r2,r4,4017508 <__clzsi2+0x58>
 40174d8:	00800204 	movi	r2,8
 40174dc:	00c00604 	movi	r3,24
 40174e0:	20c8d83a 	srl	r4,r4,r3
 40174e4:	00c100b4 	movhi	r3,1026
 40174e8:	18ea3d04 	addi	r3,r3,-22284
 40174ec:	1909883a 	add	r4,r3,r4
 40174f0:	20c00003 	ldbu	r3,0(r4)
 40174f4:	10c5c83a 	sub	r2,r2,r3
 40174f8:	f800283a 	ret
 40174fc:	00800604 	movi	r2,24
 4017500:	00c00204 	movi	r3,8
 4017504:	003ff606 	br	40174e0 <__alt_data_end+0xfc0174e0>
 4017508:	00800404 	movi	r2,16
 401750c:	1007883a 	mov	r3,r2
 4017510:	003ff306 	br	40174e0 <__alt_data_end+0xfc0174e0>

04017514 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017514:	defffe04 	addi	sp,sp,-8
 4017518:	dfc00115 	stw	ra,4(sp)
 401751c:	df000015 	stw	fp,0(sp)
 4017520:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4017524:	d0a02417 	ldw	r2,-32624(gp)
 4017528:	10000326 	beq	r2,zero,4017538 <alt_get_errno+0x24>
 401752c:	d0a02417 	ldw	r2,-32624(gp)
 4017530:	103ee83a 	callr	r2
 4017534:	00000106 	br	401753c <alt_get_errno+0x28>
 4017538:	d0bcb004 	addi	r2,gp,-3392
}
 401753c:	e037883a 	mov	sp,fp
 4017540:	dfc00117 	ldw	ra,4(sp)
 4017544:	df000017 	ldw	fp,0(sp)
 4017548:	dec00204 	addi	sp,sp,8
 401754c:	f800283a 	ret

04017550 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4017550:	defffb04 	addi	sp,sp,-20
 4017554:	dfc00415 	stw	ra,16(sp)
 4017558:	df000315 	stw	fp,12(sp)
 401755c:	df000304 	addi	fp,sp,12
 4017560:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4017564:	e0bfff17 	ldw	r2,-4(fp)
 4017568:	10000616 	blt	r2,zero,4017584 <close+0x34>
 401756c:	e0bfff17 	ldw	r2,-4(fp)
 4017570:	10c00324 	muli	r3,r2,12
 4017574:	008100b4 	movhi	r2,1026
 4017578:	10825704 	addi	r2,r2,2396
 401757c:	1885883a 	add	r2,r3,r2
 4017580:	00000106 	br	4017588 <close+0x38>
 4017584:	0005883a 	mov	r2,zero
 4017588:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 401758c:	e0bffd17 	ldw	r2,-12(fp)
 4017590:	10001926 	beq	r2,zero,40175f8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4017594:	e0bffd17 	ldw	r2,-12(fp)
 4017598:	10800017 	ldw	r2,0(r2)
 401759c:	10800417 	ldw	r2,16(r2)
 40175a0:	10000626 	beq	r2,zero,40175bc <close+0x6c>
 40175a4:	e0bffd17 	ldw	r2,-12(fp)
 40175a8:	10800017 	ldw	r2,0(r2)
 40175ac:	10800417 	ldw	r2,16(r2)
 40175b0:	e13ffd17 	ldw	r4,-12(fp)
 40175b4:	103ee83a 	callr	r2
 40175b8:	00000106 	br	40175c0 <close+0x70>
 40175bc:	0005883a 	mov	r2,zero
 40175c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40175c4:	e13fff17 	ldw	r4,-4(fp)
 40175c8:	4017dd00 	call	4017dd0 <alt_release_fd>
    if (rval < 0)
 40175cc:	e0bffe17 	ldw	r2,-8(fp)
 40175d0:	1000070e 	bge	r2,zero,40175f0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 40175d4:	40175140 	call	4017514 <alt_get_errno>
 40175d8:	1007883a 	mov	r3,r2
 40175dc:	e0bffe17 	ldw	r2,-8(fp)
 40175e0:	0085c83a 	sub	r2,zero,r2
 40175e4:	18800015 	stw	r2,0(r3)
      return -1;
 40175e8:	00bfffc4 	movi	r2,-1
 40175ec:	00000706 	br	401760c <close+0xbc>
    }
    return 0;
 40175f0:	0005883a 	mov	r2,zero
 40175f4:	00000506 	br	401760c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40175f8:	40175140 	call	4017514 <alt_get_errno>
 40175fc:	1007883a 	mov	r3,r2
 4017600:	00801444 	movi	r2,81
 4017604:	18800015 	stw	r2,0(r3)
    return -1;
 4017608:	00bfffc4 	movi	r2,-1
  }
}
 401760c:	e037883a 	mov	sp,fp
 4017610:	dfc00117 	ldw	ra,4(sp)
 4017614:	df000017 	ldw	fp,0(sp)
 4017618:	dec00204 	addi	sp,sp,8
 401761c:	f800283a 	ret

04017620 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4017620:	defffc04 	addi	sp,sp,-16
 4017624:	df000315 	stw	fp,12(sp)
 4017628:	df000304 	addi	fp,sp,12
 401762c:	e13ffd15 	stw	r4,-12(fp)
 4017630:	e17ffe15 	stw	r5,-8(fp)
 4017634:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4017638:	e0bfff17 	ldw	r2,-4(fp)
}
 401763c:	e037883a 	mov	sp,fp
 4017640:	df000017 	ldw	fp,0(sp)
 4017644:	dec00104 	addi	sp,sp,4
 4017648:	f800283a 	ret

0401764c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401764c:	defffd04 	addi	sp,sp,-12
 4017650:	df000215 	stw	fp,8(sp)
 4017654:	df000204 	addi	fp,sp,8
 4017658:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401765c:	0001883a 	nop
 4017660:	e0bfff17 	ldw	r2,-4(fp)
 4017664:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4017668:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401766c:	10000226 	beq	r2,zero,4017678 <_exit+0x2c>
    ALT_SIM_FAIL();
 4017670:	002af070 	cmpltui	zero,zero,43969
 4017674:	00000106 	br	401767c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4017678:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401767c:	003fff06 	br	401767c <__alt_data_end+0xfc01767c>

04017680 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017680:	defffe04 	addi	sp,sp,-8
 4017684:	dfc00115 	stw	ra,4(sp)
 4017688:	df000015 	stw	fp,0(sp)
 401768c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4017690:	d0a02417 	ldw	r2,-32624(gp)
 4017694:	10000326 	beq	r2,zero,40176a4 <alt_get_errno+0x24>
 4017698:	d0a02417 	ldw	r2,-32624(gp)
 401769c:	103ee83a 	callr	r2
 40176a0:	00000106 	br	40176a8 <alt_get_errno+0x28>
 40176a4:	d0bcb004 	addi	r2,gp,-3392
}
 40176a8:	e037883a 	mov	sp,fp
 40176ac:	dfc00117 	ldw	ra,4(sp)
 40176b0:	df000017 	ldw	fp,0(sp)
 40176b4:	dec00204 	addi	sp,sp,8
 40176b8:	f800283a 	ret

040176bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 40176bc:	defffb04 	addi	sp,sp,-20
 40176c0:	dfc00415 	stw	ra,16(sp)
 40176c4:	df000315 	stw	fp,12(sp)
 40176c8:	df000304 	addi	fp,sp,12
 40176cc:	e13ffe15 	stw	r4,-8(fp)
 40176d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40176d4:	e0bffe17 	ldw	r2,-8(fp)
 40176d8:	10000616 	blt	r2,zero,40176f4 <fstat+0x38>
 40176dc:	e0bffe17 	ldw	r2,-8(fp)
 40176e0:	10c00324 	muli	r3,r2,12
 40176e4:	008100b4 	movhi	r2,1026
 40176e8:	10825704 	addi	r2,r2,2396
 40176ec:	1885883a 	add	r2,r3,r2
 40176f0:	00000106 	br	40176f8 <fstat+0x3c>
 40176f4:	0005883a 	mov	r2,zero
 40176f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 40176fc:	e0bffd17 	ldw	r2,-12(fp)
 4017700:	10001026 	beq	r2,zero,4017744 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4017704:	e0bffd17 	ldw	r2,-12(fp)
 4017708:	10800017 	ldw	r2,0(r2)
 401770c:	10800817 	ldw	r2,32(r2)
 4017710:	10000726 	beq	r2,zero,4017730 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4017714:	e0bffd17 	ldw	r2,-12(fp)
 4017718:	10800017 	ldw	r2,0(r2)
 401771c:	10800817 	ldw	r2,32(r2)
 4017720:	e17fff17 	ldw	r5,-4(fp)
 4017724:	e13ffd17 	ldw	r4,-12(fp)
 4017728:	103ee83a 	callr	r2
 401772c:	00000a06 	br	4017758 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4017730:	e0bfff17 	ldw	r2,-4(fp)
 4017734:	00c80004 	movi	r3,8192
 4017738:	10c00115 	stw	r3,4(r2)
      return 0;
 401773c:	0005883a 	mov	r2,zero
 4017740:	00000506 	br	4017758 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4017744:	40176800 	call	4017680 <alt_get_errno>
 4017748:	1007883a 	mov	r3,r2
 401774c:	00801444 	movi	r2,81
 4017750:	18800015 	stw	r2,0(r3)
    return -1;
 4017754:	00bfffc4 	movi	r2,-1
  }
}
 4017758:	e037883a 	mov	sp,fp
 401775c:	dfc00117 	ldw	ra,4(sp)
 4017760:	df000017 	ldw	fp,0(sp)
 4017764:	dec00204 	addi	sp,sp,8
 4017768:	f800283a 	ret

0401776c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 401776c:	deffff04 	addi	sp,sp,-4
 4017770:	df000015 	stw	fp,0(sp)
 4017774:	d839883a 	mov	fp,sp
  return 0;
 4017778:	0005883a 	mov	r2,zero
}
 401777c:	e037883a 	mov	sp,fp
 4017780:	df000017 	ldw	fp,0(sp)
 4017784:	dec00104 	addi	sp,sp,4
 4017788:	f800283a 	ret

0401778c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401778c:	defffe04 	addi	sp,sp,-8
 4017790:	dfc00115 	stw	ra,4(sp)
 4017794:	df000015 	stw	fp,0(sp)
 4017798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401779c:	d0a02417 	ldw	r2,-32624(gp)
 40177a0:	10000326 	beq	r2,zero,40177b0 <alt_get_errno+0x24>
 40177a4:	d0a02417 	ldw	r2,-32624(gp)
 40177a8:	103ee83a 	callr	r2
 40177ac:	00000106 	br	40177b4 <alt_get_errno+0x28>
 40177b0:	d0bcb004 	addi	r2,gp,-3392
}
 40177b4:	e037883a 	mov	sp,fp
 40177b8:	dfc00117 	ldw	ra,4(sp)
 40177bc:	df000017 	ldw	fp,0(sp)
 40177c0:	dec00204 	addi	sp,sp,8
 40177c4:	f800283a 	ret

040177c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 40177c8:	deffed04 	addi	sp,sp,-76
 40177cc:	dfc01215 	stw	ra,72(sp)
 40177d0:	df001115 	stw	fp,68(sp)
 40177d4:	df001104 	addi	fp,sp,68
 40177d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40177dc:	e0bfff17 	ldw	r2,-4(fp)
 40177e0:	10000616 	blt	r2,zero,40177fc <isatty+0x34>
 40177e4:	e0bfff17 	ldw	r2,-4(fp)
 40177e8:	10c00324 	muli	r3,r2,12
 40177ec:	008100b4 	movhi	r2,1026
 40177f0:	10825704 	addi	r2,r2,2396
 40177f4:	1885883a 	add	r2,r3,r2
 40177f8:	00000106 	br	4017800 <isatty+0x38>
 40177fc:	0005883a 	mov	r2,zero
 4017800:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4017804:	e0bfef17 	ldw	r2,-68(fp)
 4017808:	10000e26 	beq	r2,zero,4017844 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 401780c:	e0bfef17 	ldw	r2,-68(fp)
 4017810:	10800017 	ldw	r2,0(r2)
 4017814:	10800817 	ldw	r2,32(r2)
 4017818:	1000021e 	bne	r2,zero,4017824 <isatty+0x5c>
    {
      return 1;
 401781c:	00800044 	movi	r2,1
 4017820:	00000d06 	br	4017858 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4017824:	e0bff004 	addi	r2,fp,-64
 4017828:	100b883a 	mov	r5,r2
 401782c:	e13fff17 	ldw	r4,-4(fp)
 4017830:	40176bc0 	call	40176bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4017834:	e0bff117 	ldw	r2,-60(fp)
 4017838:	10880020 	cmpeqi	r2,r2,8192
 401783c:	10803fcc 	andi	r2,r2,255
 4017840:	00000506 	br	4017858 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4017844:	401778c0 	call	401778c <alt_get_errno>
 4017848:	1007883a 	mov	r3,r2
 401784c:	00801444 	movi	r2,81
 4017850:	18800015 	stw	r2,0(r3)
    return 0;
 4017854:	0005883a 	mov	r2,zero
  }
}
 4017858:	e037883a 	mov	sp,fp
 401785c:	dfc00117 	ldw	ra,4(sp)
 4017860:	df000017 	ldw	fp,0(sp)
 4017864:	dec00204 	addi	sp,sp,8
 4017868:	f800283a 	ret

0401786c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401786c:	defffe04 	addi	sp,sp,-8
 4017870:	dfc00115 	stw	ra,4(sp)
 4017874:	df000015 	stw	fp,0(sp)
 4017878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401787c:	d0a02417 	ldw	r2,-32624(gp)
 4017880:	10000326 	beq	r2,zero,4017890 <alt_get_errno+0x24>
 4017884:	d0a02417 	ldw	r2,-32624(gp)
 4017888:	103ee83a 	callr	r2
 401788c:	00000106 	br	4017894 <alt_get_errno+0x28>
 4017890:	d0bcb004 	addi	r2,gp,-3392
}
 4017894:	e037883a 	mov	sp,fp
 4017898:	dfc00117 	ldw	ra,4(sp)
 401789c:	df000017 	ldw	fp,0(sp)
 40178a0:	dec00204 	addi	sp,sp,8
 40178a4:	f800283a 	ret

040178a8 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 40178a8:	defffb04 	addi	sp,sp,-20
 40178ac:	dfc00415 	stw	ra,16(sp)
 40178b0:	df000315 	stw	fp,12(sp)
 40178b4:	df000304 	addi	fp,sp,12
 40178b8:	e13ffe15 	stw	r4,-8(fp)
 40178bc:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 40178c0:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 40178c4:	e0bffe17 	ldw	r2,-8(fp)
 40178c8:	00802f16 	blt	zero,r2,4017988 <kill+0xe0>
  {
    switch (sig)
 40178cc:	e0bfff17 	ldw	r2,-4(fp)
 40178d0:	10800828 	cmpgeui	r2,r2,32
 40178d4:	1000291e 	bne	r2,zero,401797c <kill+0xd4>
 40178d8:	e0bfff17 	ldw	r2,-4(fp)
 40178dc:	100690ba 	slli	r3,r2,2
 40178e0:	00810074 	movhi	r2,1025
 40178e4:	109e3d04 	addi	r2,r2,30964
 40178e8:	1885883a 	add	r2,r3,r2
 40178ec:	10800017 	ldw	r2,0(r2)
 40178f0:	1000683a 	jmp	r2
 40178f4:	0401799c 	xori	r16,zero,1510
 40178f8:	0401797c 	xorhi	r16,zero,1509
 40178fc:	0401797c 	xorhi	r16,zero,1509
 4017900:	04017974 	movhi	r16,1509
 4017904:	04017974 	movhi	r16,1509
 4017908:	04017974 	movhi	r16,1509
 401790c:	04017974 	movhi	r16,1509
 4017910:	0401797c 	xorhi	r16,zero,1509
 4017914:	04017974 	movhi	r16,1509
 4017918:	04017974 	movhi	r16,1509
 401791c:	04017974 	movhi	r16,1509
 4017920:	04017974 	movhi	r16,1509
 4017924:	04017974 	movhi	r16,1509
 4017928:	04017974 	movhi	r16,1509
 401792c:	04017974 	movhi	r16,1509
 4017930:	04017974 	movhi	r16,1509
 4017934:	0401799c 	xori	r16,zero,1510
 4017938:	0401797c 	xorhi	r16,zero,1509
 401793c:	0401797c 	xorhi	r16,zero,1509
 4017940:	0401797c 	xorhi	r16,zero,1509
 4017944:	0401799c 	xori	r16,zero,1510
 4017948:	0401797c 	xorhi	r16,zero,1509
 401794c:	0401797c 	xorhi	r16,zero,1509
 4017950:	04017974 	movhi	r16,1509
 4017954:	04017974 	movhi	r16,1509
 4017958:	04017974 	movhi	r16,1509
 401795c:	04017974 	movhi	r16,1509
 4017960:	04017974 	movhi	r16,1509
 4017964:	0401797c 	xorhi	r16,zero,1509
 4017968:	0401797c 	xorhi	r16,zero,1509
 401796c:	04017974 	movhi	r16,1509
 4017970:	04017974 	movhi	r16,1509
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 4017974:	0009883a 	mov	r4,zero
 4017978:	401764c0 	call	401764c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 401797c:	00800584 	movi	r2,22
 4017980:	e0bffd15 	stw	r2,-12(fp)
 4017984:	00000606 	br	40179a0 <kill+0xf8>
    }
  }

  else if (pid > 0)
 4017988:	e0bffe17 	ldw	r2,-8(fp)
 401798c:	0080040e 	bge	zero,r2,40179a0 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 4017990:	008000c4 	movi	r2,3
 4017994:	e0bffd15 	stw	r2,-12(fp)
 4017998:	00000106 	br	40179a0 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 401799c:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 40179a0:	e0bffd17 	ldw	r2,-12(fp)
 40179a4:	10000626 	beq	r2,zero,40179c0 <kill+0x118>
  {
    ALT_ERRNO = status;
 40179a8:	401786c0 	call	401786c <alt_get_errno>
 40179ac:	1007883a 	mov	r3,r2
 40179b0:	e0bffd17 	ldw	r2,-12(fp)
 40179b4:	18800015 	stw	r2,0(r3)
    return -1;
 40179b8:	00bfffc4 	movi	r2,-1
 40179bc:	00000106 	br	40179c4 <kill+0x11c>
  }

  return 0;
 40179c0:	0005883a 	mov	r2,zero
}
 40179c4:	e037883a 	mov	sp,fp
 40179c8:	dfc00117 	ldw	ra,4(sp)
 40179cc:	df000017 	ldw	fp,0(sp)
 40179d0:	dec00204 	addi	sp,sp,8
 40179d4:	f800283a 	ret

040179d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40179d8:	defffc04 	addi	sp,sp,-16
 40179dc:	df000315 	stw	fp,12(sp)
 40179e0:	df000304 	addi	fp,sp,12
 40179e4:	e13ffd15 	stw	r4,-12(fp)
 40179e8:	e17ffe15 	stw	r5,-8(fp)
 40179ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40179f0:	e0fffe17 	ldw	r3,-8(fp)
 40179f4:	e0bffd17 	ldw	r2,-12(fp)
 40179f8:	18800c26 	beq	r3,r2,4017a2c <alt_load_section+0x54>
  {
    while( to != end )
 40179fc:	00000806 	br	4017a20 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4017a00:	e0bffe17 	ldw	r2,-8(fp)
 4017a04:	10c00104 	addi	r3,r2,4
 4017a08:	e0fffe15 	stw	r3,-8(fp)
 4017a0c:	e0fffd17 	ldw	r3,-12(fp)
 4017a10:	19000104 	addi	r4,r3,4
 4017a14:	e13ffd15 	stw	r4,-12(fp)
 4017a18:	18c00017 	ldw	r3,0(r3)
 4017a1c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4017a20:	e0fffe17 	ldw	r3,-8(fp)
 4017a24:	e0bfff17 	ldw	r2,-4(fp)
 4017a28:	18bff51e 	bne	r3,r2,4017a00 <__alt_data_end+0xfc017a00>
    {
      *to++ = *from++;
    }
  }
}
 4017a2c:	0001883a 	nop
 4017a30:	e037883a 	mov	sp,fp
 4017a34:	df000017 	ldw	fp,0(sp)
 4017a38:	dec00104 	addi	sp,sp,4
 4017a3c:	f800283a 	ret

04017a40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4017a40:	defffe04 	addi	sp,sp,-8
 4017a44:	dfc00115 	stw	ra,4(sp)
 4017a48:	df000015 	stw	fp,0(sp)
 4017a4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4017a50:	018100b4 	movhi	r6,1026
 4017a54:	3186f804 	addi	r6,r6,7136
 4017a58:	014100b4 	movhi	r5,1026
 4017a5c:	296a8804 	addi	r5,r5,-21984
 4017a60:	010100b4 	movhi	r4,1026
 4017a64:	2106f804 	addi	r4,r4,7136
 4017a68:	40179d80 	call	40179d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4017a6c:	01810034 	movhi	r6,1024
 4017a70:	31809104 	addi	r6,r6,580
 4017a74:	01410034 	movhi	r5,1024
 4017a78:	29400804 	addi	r5,r5,32
 4017a7c:	01010034 	movhi	r4,1024
 4017a80:	21000804 	addi	r4,r4,32
 4017a84:	40179d80 	call	40179d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4017a88:	018100b4 	movhi	r6,1026
 4017a8c:	31aa8804 	addi	r6,r6,-21984
 4017a90:	014100b4 	movhi	r5,1026
 4017a94:	2968a204 	addi	r5,r5,-23928
 4017a98:	010100b4 	movhi	r4,1026
 4017a9c:	2128a204 	addi	r4,r4,-23928
 4017aa0:	40179d80 	call	40179d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4017aa4:	40191ac0 	call	40191ac <alt_dcache_flush_all>
  alt_icache_flush_all();
 4017aa8:	40193940 	call	4019394 <alt_icache_flush_all>
}
 4017aac:	0001883a 	nop
 4017ab0:	e037883a 	mov	sp,fp
 4017ab4:	dfc00117 	ldw	ra,4(sp)
 4017ab8:	df000017 	ldw	fp,0(sp)
 4017abc:	dec00204 	addi	sp,sp,8
 4017ac0:	f800283a 	ret

04017ac4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017ac4:	defffe04 	addi	sp,sp,-8
 4017ac8:	dfc00115 	stw	ra,4(sp)
 4017acc:	df000015 	stw	fp,0(sp)
 4017ad0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4017ad4:	d0a02417 	ldw	r2,-32624(gp)
 4017ad8:	10000326 	beq	r2,zero,4017ae8 <alt_get_errno+0x24>
 4017adc:	d0a02417 	ldw	r2,-32624(gp)
 4017ae0:	103ee83a 	callr	r2
 4017ae4:	00000106 	br	4017aec <alt_get_errno+0x28>
 4017ae8:	d0bcb004 	addi	r2,gp,-3392
}
 4017aec:	e037883a 	mov	sp,fp
 4017af0:	dfc00117 	ldw	ra,4(sp)
 4017af4:	df000017 	ldw	fp,0(sp)
 4017af8:	dec00204 	addi	sp,sp,8
 4017afc:	f800283a 	ret

04017b00 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4017b00:	defff904 	addi	sp,sp,-28
 4017b04:	dfc00615 	stw	ra,24(sp)
 4017b08:	df000515 	stw	fp,20(sp)
 4017b0c:	df000504 	addi	fp,sp,20
 4017b10:	e13ffd15 	stw	r4,-12(fp)
 4017b14:	e17ffe15 	stw	r5,-8(fp)
 4017b18:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4017b1c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4017b20:	e0bffd17 	ldw	r2,-12(fp)
 4017b24:	10000616 	blt	r2,zero,4017b40 <lseek+0x40>
 4017b28:	e0bffd17 	ldw	r2,-12(fp)
 4017b2c:	10c00324 	muli	r3,r2,12
 4017b30:	008100b4 	movhi	r2,1026
 4017b34:	10825704 	addi	r2,r2,2396
 4017b38:	1885883a 	add	r2,r3,r2
 4017b3c:	00000106 	br	4017b44 <lseek+0x44>
 4017b40:	0005883a 	mov	r2,zero
 4017b44:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4017b48:	e0bffc17 	ldw	r2,-16(fp)
 4017b4c:	10001026 	beq	r2,zero,4017b90 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4017b50:	e0bffc17 	ldw	r2,-16(fp)
 4017b54:	10800017 	ldw	r2,0(r2)
 4017b58:	10800717 	ldw	r2,28(r2)
 4017b5c:	10000926 	beq	r2,zero,4017b84 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4017b60:	e0bffc17 	ldw	r2,-16(fp)
 4017b64:	10800017 	ldw	r2,0(r2)
 4017b68:	10800717 	ldw	r2,28(r2)
 4017b6c:	e1bfff17 	ldw	r6,-4(fp)
 4017b70:	e17ffe17 	ldw	r5,-8(fp)
 4017b74:	e13ffc17 	ldw	r4,-16(fp)
 4017b78:	103ee83a 	callr	r2
 4017b7c:	e0bffb15 	stw	r2,-20(fp)
 4017b80:	00000506 	br	4017b98 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4017b84:	00bfde84 	movi	r2,-134
 4017b88:	e0bffb15 	stw	r2,-20(fp)
 4017b8c:	00000206 	br	4017b98 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 4017b90:	00bfebc4 	movi	r2,-81
 4017b94:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4017b98:	e0bffb17 	ldw	r2,-20(fp)
 4017b9c:	1000070e 	bge	r2,zero,4017bbc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4017ba0:	4017ac40 	call	4017ac4 <alt_get_errno>
 4017ba4:	1007883a 	mov	r3,r2
 4017ba8:	e0bffb17 	ldw	r2,-20(fp)
 4017bac:	0085c83a 	sub	r2,zero,r2
 4017bb0:	18800015 	stw	r2,0(r3)
    rc = -1;
 4017bb4:	00bfffc4 	movi	r2,-1
 4017bb8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4017bbc:	e0bffb17 	ldw	r2,-20(fp)
}
 4017bc0:	e037883a 	mov	sp,fp
 4017bc4:	dfc00117 	ldw	ra,4(sp)
 4017bc8:	df000017 	ldw	fp,0(sp)
 4017bcc:	dec00204 	addi	sp,sp,8
 4017bd0:	f800283a 	ret

04017bd4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4017bd4:	defffd04 	addi	sp,sp,-12
 4017bd8:	dfc00215 	stw	ra,8(sp)
 4017bdc:	df000115 	stw	fp,4(sp)
 4017be0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4017be4:	0009883a 	mov	r4,zero
 4017be8:	40181300 	call	4018130 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4017bec:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4017bf0:	40181680 	call	4018168 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4017bf4:	018100b4 	movhi	r6,1026
 4017bf8:	31aa8004 	addi	r6,r6,-22016
 4017bfc:	014100b4 	movhi	r5,1026
 4017c00:	296a8004 	addi	r5,r5,-22016
 4017c04:	010100b4 	movhi	r4,1026
 4017c08:	212a8004 	addi	r4,r4,-22016
 4017c0c:	401972c0 	call	401972c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4017c10:	40192d40 	call	40192d4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4017c14:	010100b4 	movhi	r4,1026
 4017c18:	2124cd04 	addi	r4,r4,-27852
 4017c1c:	4019f2c0 	call	4019f2c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4017c20:	d0bcb417 	ldw	r2,-3376(gp)
 4017c24:	d0fcb517 	ldw	r3,-3372(gp)
 4017c28:	d13cb617 	ldw	r4,-3368(gp)
 4017c2c:	200d883a 	mov	r6,r4
 4017c30:	180b883a 	mov	r5,r3
 4017c34:	1009883a 	mov	r4,r2
 4017c38:	40082f40 	call	40082f4 <main>
 4017c3c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4017c40:	01000044 	movi	r4,1
 4017c44:	40175500 	call	4017550 <close>
  exit (result);
 4017c48:	e13fff17 	ldw	r4,-4(fp)
 4017c4c:	4019f400 	call	4019f40 <exit>

04017c50 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4017c50:	defffe04 	addi	sp,sp,-8
 4017c54:	df000115 	stw	fp,4(sp)
 4017c58:	df000104 	addi	fp,sp,4
 4017c5c:	e13fff15 	stw	r4,-4(fp)
}
 4017c60:	0001883a 	nop
 4017c64:	e037883a 	mov	sp,fp
 4017c68:	df000017 	ldw	fp,0(sp)
 4017c6c:	dec00104 	addi	sp,sp,4
 4017c70:	f800283a 	ret

04017c74 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4017c74:	defffe04 	addi	sp,sp,-8
 4017c78:	df000115 	stw	fp,4(sp)
 4017c7c:	df000104 	addi	fp,sp,4
 4017c80:	e13fff15 	stw	r4,-4(fp)
}
 4017c84:	0001883a 	nop
 4017c88:	e037883a 	mov	sp,fp
 4017c8c:	df000017 	ldw	fp,0(sp)
 4017c90:	dec00104 	addi	sp,sp,4
 4017c94:	f800283a 	ret

04017c98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017c98:	defffe04 	addi	sp,sp,-8
 4017c9c:	dfc00115 	stw	ra,4(sp)
 4017ca0:	df000015 	stw	fp,0(sp)
 4017ca4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4017ca8:	d0a02417 	ldw	r2,-32624(gp)
 4017cac:	10000326 	beq	r2,zero,4017cbc <alt_get_errno+0x24>
 4017cb0:	d0a02417 	ldw	r2,-32624(gp)
 4017cb4:	103ee83a 	callr	r2
 4017cb8:	00000106 	br	4017cc0 <alt_get_errno+0x28>
 4017cbc:	d0bcb004 	addi	r2,gp,-3392
}
 4017cc0:	e037883a 	mov	sp,fp
 4017cc4:	dfc00117 	ldw	ra,4(sp)
 4017cc8:	df000017 	ldw	fp,0(sp)
 4017ccc:	dec00204 	addi	sp,sp,8
 4017cd0:	f800283a 	ret

04017cd4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4017cd4:	defff904 	addi	sp,sp,-28
 4017cd8:	dfc00615 	stw	ra,24(sp)
 4017cdc:	df000515 	stw	fp,20(sp)
 4017ce0:	df000504 	addi	fp,sp,20
 4017ce4:	e13ffd15 	stw	r4,-12(fp)
 4017ce8:	e17ffe15 	stw	r5,-8(fp)
 4017cec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4017cf0:	e0bffd17 	ldw	r2,-12(fp)
 4017cf4:	10000616 	blt	r2,zero,4017d10 <read+0x3c>
 4017cf8:	e0bffd17 	ldw	r2,-12(fp)
 4017cfc:	10c00324 	muli	r3,r2,12
 4017d00:	008100b4 	movhi	r2,1026
 4017d04:	10825704 	addi	r2,r2,2396
 4017d08:	1885883a 	add	r2,r3,r2
 4017d0c:	00000106 	br	4017d14 <read+0x40>
 4017d10:	0005883a 	mov	r2,zero
 4017d14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4017d18:	e0bffb17 	ldw	r2,-20(fp)
 4017d1c:	10002226 	beq	r2,zero,4017da8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4017d20:	e0bffb17 	ldw	r2,-20(fp)
 4017d24:	10800217 	ldw	r2,8(r2)
 4017d28:	108000cc 	andi	r2,r2,3
 4017d2c:	10800060 	cmpeqi	r2,r2,1
 4017d30:	1000181e 	bne	r2,zero,4017d94 <read+0xc0>
        (fd->dev->read))
 4017d34:	e0bffb17 	ldw	r2,-20(fp)
 4017d38:	10800017 	ldw	r2,0(r2)
 4017d3c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4017d40:	10001426 	beq	r2,zero,4017d94 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4017d44:	e0bffb17 	ldw	r2,-20(fp)
 4017d48:	10800017 	ldw	r2,0(r2)
 4017d4c:	10800517 	ldw	r2,20(r2)
 4017d50:	e0ffff17 	ldw	r3,-4(fp)
 4017d54:	180d883a 	mov	r6,r3
 4017d58:	e17ffe17 	ldw	r5,-8(fp)
 4017d5c:	e13ffb17 	ldw	r4,-20(fp)
 4017d60:	103ee83a 	callr	r2
 4017d64:	e0bffc15 	stw	r2,-16(fp)
 4017d68:	e0bffc17 	ldw	r2,-16(fp)
 4017d6c:	1000070e 	bge	r2,zero,4017d8c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4017d70:	4017c980 	call	4017c98 <alt_get_errno>
 4017d74:	1007883a 	mov	r3,r2
 4017d78:	e0bffc17 	ldw	r2,-16(fp)
 4017d7c:	0085c83a 	sub	r2,zero,r2
 4017d80:	18800015 	stw	r2,0(r3)
          return -1;
 4017d84:	00bfffc4 	movi	r2,-1
 4017d88:	00000c06 	br	4017dbc <read+0xe8>
        }
        return rval;
 4017d8c:	e0bffc17 	ldw	r2,-16(fp)
 4017d90:	00000a06 	br	4017dbc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4017d94:	4017c980 	call	4017c98 <alt_get_errno>
 4017d98:	1007883a 	mov	r3,r2
 4017d9c:	00800344 	movi	r2,13
 4017da0:	18800015 	stw	r2,0(r3)
 4017da4:	00000406 	br	4017db8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4017da8:	4017c980 	call	4017c98 <alt_get_errno>
 4017dac:	1007883a 	mov	r3,r2
 4017db0:	00801444 	movi	r2,81
 4017db4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4017db8:	00bfffc4 	movi	r2,-1
}
 4017dbc:	e037883a 	mov	sp,fp
 4017dc0:	dfc00117 	ldw	ra,4(sp)
 4017dc4:	df000017 	ldw	fp,0(sp)
 4017dc8:	dec00204 	addi	sp,sp,8
 4017dcc:	f800283a 	ret

04017dd0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4017dd0:	defffe04 	addi	sp,sp,-8
 4017dd4:	df000115 	stw	fp,4(sp)
 4017dd8:	df000104 	addi	fp,sp,4
 4017ddc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4017de0:	e0bfff17 	ldw	r2,-4(fp)
 4017de4:	108000d0 	cmplti	r2,r2,3
 4017de8:	10000d1e 	bne	r2,zero,4017e20 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4017dec:	008100b4 	movhi	r2,1026
 4017df0:	10825704 	addi	r2,r2,2396
 4017df4:	e0ffff17 	ldw	r3,-4(fp)
 4017df8:	18c00324 	muli	r3,r3,12
 4017dfc:	10c5883a 	add	r2,r2,r3
 4017e00:	10800204 	addi	r2,r2,8
 4017e04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4017e08:	008100b4 	movhi	r2,1026
 4017e0c:	10825704 	addi	r2,r2,2396
 4017e10:	e0ffff17 	ldw	r3,-4(fp)
 4017e14:	18c00324 	muli	r3,r3,12
 4017e18:	10c5883a 	add	r2,r2,r3
 4017e1c:	10000015 	stw	zero,0(r2)
  }
}
 4017e20:	0001883a 	nop
 4017e24:	e037883a 	mov	sp,fp
 4017e28:	df000017 	ldw	fp,0(sp)
 4017e2c:	dec00104 	addi	sp,sp,4
 4017e30:	f800283a 	ret

04017e34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4017e34:	defff904 	addi	sp,sp,-28
 4017e38:	df000615 	stw	fp,24(sp)
 4017e3c:	df000604 	addi	fp,sp,24
 4017e40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017e44:	0005303a 	rdctl	r2,status
 4017e48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017e4c:	e0fffe17 	ldw	r3,-8(fp)
 4017e50:	00bfff84 	movi	r2,-2
 4017e54:	1884703a 	and	r2,r3,r2
 4017e58:	1001703a 	wrctl	status,r2
  
  return context;
 4017e5c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4017e60:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4017e64:	d0a02517 	ldw	r2,-32620(gp)
 4017e68:	10c000c4 	addi	r3,r2,3
 4017e6c:	00bfff04 	movi	r2,-4
 4017e70:	1884703a 	and	r2,r3,r2
 4017e74:	d0a02515 	stw	r2,-32620(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4017e78:	d0e02517 	ldw	r3,-32620(gp)
 4017e7c:	e0bfff17 	ldw	r2,-4(fp)
 4017e80:	1887883a 	add	r3,r3,r2
 4017e84:	00820034 	movhi	r2,2048
 4017e88:	10800004 	addi	r2,r2,0
 4017e8c:	10c0062e 	bgeu	r2,r3,4017ea8 <sbrk+0x74>
 4017e90:	e0bffb17 	ldw	r2,-20(fp)
 4017e94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017e98:	e0bffa17 	ldw	r2,-24(fp)
 4017e9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4017ea0:	00bfffc4 	movi	r2,-1
 4017ea4:	00000b06 	br	4017ed4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4017ea8:	d0a02517 	ldw	r2,-32620(gp)
 4017eac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4017eb0:	d0e02517 	ldw	r3,-32620(gp)
 4017eb4:	e0bfff17 	ldw	r2,-4(fp)
 4017eb8:	1885883a 	add	r2,r3,r2
 4017ebc:	d0a02515 	stw	r2,-32620(gp)
 4017ec0:	e0bffb17 	ldw	r2,-20(fp)
 4017ec4:	e0bffc15 	stw	r2,-16(fp)
 4017ec8:	e0bffc17 	ldw	r2,-16(fp)
 4017ecc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4017ed0:	e0bffd17 	ldw	r2,-12(fp)
} 
 4017ed4:	e037883a 	mov	sp,fp
 4017ed8:	df000017 	ldw	fp,0(sp)
 4017edc:	dec00104 	addi	sp,sp,4
 4017ee0:	f800283a 	ret

04017ee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017ee4:	defffe04 	addi	sp,sp,-8
 4017ee8:	dfc00115 	stw	ra,4(sp)
 4017eec:	df000015 	stw	fp,0(sp)
 4017ef0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4017ef4:	d0a02417 	ldw	r2,-32624(gp)
 4017ef8:	10000326 	beq	r2,zero,4017f08 <alt_get_errno+0x24>
 4017efc:	d0a02417 	ldw	r2,-32624(gp)
 4017f00:	103ee83a 	callr	r2
 4017f04:	00000106 	br	4017f0c <alt_get_errno+0x28>
 4017f08:	d0bcb004 	addi	r2,gp,-3392
}
 4017f0c:	e037883a 	mov	sp,fp
 4017f10:	dfc00117 	ldw	ra,4(sp)
 4017f14:	df000017 	ldw	fp,0(sp)
 4017f18:	dec00204 	addi	sp,sp,8
 4017f1c:	f800283a 	ret

04017f20 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 4017f20:	defffc04 	addi	sp,sp,-16
 4017f24:	dfc00315 	stw	ra,12(sp)
 4017f28:	df000215 	stw	fp,8(sp)
 4017f2c:	df000204 	addi	fp,sp,8
 4017f30:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4017f34:	d0bcb917 	ldw	r2,-3356(gp)
  clock_t ticks = alt_nticks(); 
 4017f38:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4017f3c:	d0bcb817 	ldw	r2,-3360(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 4017f40:	1000061e 	bne	r2,zero,4017f5c <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 4017f44:	4017ee40 	call	4017ee4 <alt_get_errno>
 4017f48:	1007883a 	mov	r3,r2
 4017f4c:	00801604 	movi	r2,88
 4017f50:	18800015 	stw	r2,0(r3)
    return 0;
 4017f54:	0005883a 	mov	r2,zero
 4017f58:	00000a06 	br	4017f84 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 4017f5c:	e0bfff17 	ldw	r2,-4(fp)
 4017f60:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 4017f64:	e0bfff17 	ldw	r2,-4(fp)
 4017f68:	e0fffe17 	ldw	r3,-8(fp)
 4017f6c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 4017f70:	e0bfff17 	ldw	r2,-4(fp)
 4017f74:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 4017f78:	e0bfff17 	ldw	r2,-4(fp)
 4017f7c:	10000315 	stw	zero,12(r2)

  return ticks;
 4017f80:	e0bffe17 	ldw	r2,-8(fp)
}
 4017f84:	e037883a 	mov	sp,fp
 4017f88:	dfc00117 	ldw	ra,4(sp)
 4017f8c:	df000017 	ldw	fp,0(sp)
 4017f90:	dec00204 	addi	sp,sp,8
 4017f94:	f800283a 	ret

04017f98 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4017f98:	defffd04 	addi	sp,sp,-12
 4017f9c:	dfc00215 	stw	ra,8(sp)
 4017fa0:	df000115 	stw	fp,4(sp)
 4017fa4:	df000104 	addi	fp,sp,4
 4017fa8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4017fac:	e13fff17 	ldw	r4,-4(fp)
 4017fb0:	40190540 	call	4019054 <alt_busy_sleep>
}
 4017fb4:	e037883a 	mov	sp,fp
 4017fb8:	dfc00117 	ldw	ra,4(sp)
 4017fbc:	df000017 	ldw	fp,0(sp)
 4017fc0:	dec00204 	addi	sp,sp,8
 4017fc4:	f800283a 	ret

04017fc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017fc8:	defffe04 	addi	sp,sp,-8
 4017fcc:	dfc00115 	stw	ra,4(sp)
 4017fd0:	df000015 	stw	fp,0(sp)
 4017fd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4017fd8:	d0a02417 	ldw	r2,-32624(gp)
 4017fdc:	10000326 	beq	r2,zero,4017fec <alt_get_errno+0x24>
 4017fe0:	d0a02417 	ldw	r2,-32624(gp)
 4017fe4:	103ee83a 	callr	r2
 4017fe8:	00000106 	br	4017ff0 <alt_get_errno+0x28>
 4017fec:	d0bcb004 	addi	r2,gp,-3392
}
 4017ff0:	e037883a 	mov	sp,fp
 4017ff4:	dfc00117 	ldw	ra,4(sp)
 4017ff8:	df000017 	ldw	fp,0(sp)
 4017ffc:	dec00204 	addi	sp,sp,8
 4018000:	f800283a 	ret

04018004 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4018004:	defff904 	addi	sp,sp,-28
 4018008:	dfc00615 	stw	ra,24(sp)
 401800c:	df000515 	stw	fp,20(sp)
 4018010:	df000504 	addi	fp,sp,20
 4018014:	e13ffd15 	stw	r4,-12(fp)
 4018018:	e17ffe15 	stw	r5,-8(fp)
 401801c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4018020:	e0bffd17 	ldw	r2,-12(fp)
 4018024:	10000616 	blt	r2,zero,4018040 <write+0x3c>
 4018028:	e0bffd17 	ldw	r2,-12(fp)
 401802c:	10c00324 	muli	r3,r2,12
 4018030:	008100b4 	movhi	r2,1026
 4018034:	10825704 	addi	r2,r2,2396
 4018038:	1885883a 	add	r2,r3,r2
 401803c:	00000106 	br	4018044 <write+0x40>
 4018040:	0005883a 	mov	r2,zero
 4018044:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4018048:	e0bffb17 	ldw	r2,-20(fp)
 401804c:	10002126 	beq	r2,zero,40180d4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4018050:	e0bffb17 	ldw	r2,-20(fp)
 4018054:	10800217 	ldw	r2,8(r2)
 4018058:	108000cc 	andi	r2,r2,3
 401805c:	10001826 	beq	r2,zero,40180c0 <write+0xbc>
 4018060:	e0bffb17 	ldw	r2,-20(fp)
 4018064:	10800017 	ldw	r2,0(r2)
 4018068:	10800617 	ldw	r2,24(r2)
 401806c:	10001426 	beq	r2,zero,40180c0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4018070:	e0bffb17 	ldw	r2,-20(fp)
 4018074:	10800017 	ldw	r2,0(r2)
 4018078:	10800617 	ldw	r2,24(r2)
 401807c:	e0ffff17 	ldw	r3,-4(fp)
 4018080:	180d883a 	mov	r6,r3
 4018084:	e17ffe17 	ldw	r5,-8(fp)
 4018088:	e13ffb17 	ldw	r4,-20(fp)
 401808c:	103ee83a 	callr	r2
 4018090:	e0bffc15 	stw	r2,-16(fp)
 4018094:	e0bffc17 	ldw	r2,-16(fp)
 4018098:	1000070e 	bge	r2,zero,40180b8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 401809c:	4017fc80 	call	4017fc8 <alt_get_errno>
 40180a0:	1007883a 	mov	r3,r2
 40180a4:	e0bffc17 	ldw	r2,-16(fp)
 40180a8:	0085c83a 	sub	r2,zero,r2
 40180ac:	18800015 	stw	r2,0(r3)
        return -1;
 40180b0:	00bfffc4 	movi	r2,-1
 40180b4:	00000c06 	br	40180e8 <write+0xe4>
      }
      return rval;
 40180b8:	e0bffc17 	ldw	r2,-16(fp)
 40180bc:	00000a06 	br	40180e8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 40180c0:	4017fc80 	call	4017fc8 <alt_get_errno>
 40180c4:	1007883a 	mov	r3,r2
 40180c8:	00800344 	movi	r2,13
 40180cc:	18800015 	stw	r2,0(r3)
 40180d0:	00000406 	br	40180e4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40180d4:	4017fc80 	call	4017fc8 <alt_get_errno>
 40180d8:	1007883a 	mov	r3,r2
 40180dc:	00801444 	movi	r2,81
 40180e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40180e4:	00bfffc4 	movi	r2,-1
}
 40180e8:	e037883a 	mov	sp,fp
 40180ec:	dfc00117 	ldw	ra,4(sp)
 40180f0:	df000017 	ldw	fp,0(sp)
 40180f4:	dec00204 	addi	sp,sp,8
 40180f8:	f800283a 	ret

040180fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40180fc:	defffd04 	addi	sp,sp,-12
 4018100:	dfc00215 	stw	ra,8(sp)
 4018104:	df000115 	stw	fp,4(sp)
 4018108:	df000104 	addi	fp,sp,4
 401810c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4018110:	d1602104 	addi	r5,gp,-32636
 4018114:	e13fff17 	ldw	r4,-4(fp)
 4018118:	40192300 	call	4019230 <alt_dev_llist_insert>
}
 401811c:	e037883a 	mov	sp,fp
 4018120:	dfc00117 	ldw	ra,4(sp)
 4018124:	df000017 	ldw	fp,0(sp)
 4018128:	dec00204 	addi	sp,sp,8
 401812c:	f800283a 	ret

04018130 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4018130:	defffd04 	addi	sp,sp,-12
 4018134:	dfc00215 	stw	ra,8(sp)
 4018138:	df000115 	stw	fp,4(sp)
 401813c:	df000104 	addi	fp,sp,4
 4018140:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4018144:	4019ba00 	call	4019ba0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4018148:	00800044 	movi	r2,1
 401814c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4018150:	0001883a 	nop
 4018154:	e037883a 	mov	sp,fp
 4018158:	dfc00117 	ldw	ra,4(sp)
 401815c:	df000017 	ldw	fp,0(sp)
 4018160:	dec00204 	addi	sp,sp,8
 4018164:	f800283a 	ret

04018168 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4018168:	defffe04 	addi	sp,sp,-8
 401816c:	dfc00115 	stw	ra,4(sp)
 4018170:	df000015 	stw	fp,0(sp)
 4018174:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4018178:	01c0fa04 	movi	r7,1000
 401817c:	01800084 	movi	r6,2
 4018180:	000b883a 	mov	r5,zero
 4018184:	01020034 	movhi	r4,2048
 4018188:	21141004 	addi	r4,r4,20544
 401818c:	4018eac0 	call	4018eac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4018190:	01800044 	movi	r6,1
 4018194:	000b883a 	mov	r5,zero
 4018198:	010100b4 	movhi	r4,1026
 401819c:	2102c104 	addi	r4,r4,2820
 40181a0:	40183340 	call	4018334 <altera_avalon_jtag_uart_init>
 40181a4:	010100b4 	movhi	r4,1026
 40181a8:	2102b704 	addi	r4,r4,2780
 40181ac:	40180fc0 	call	40180fc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 40181b0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 40181b4:	0001883a 	nop
}
 40181b8:	0001883a 	nop
 40181bc:	e037883a 	mov	sp,fp
 40181c0:	dfc00117 	ldw	ra,4(sp)
 40181c4:	df000017 	ldw	fp,0(sp)
 40181c8:	dec00204 	addi	sp,sp,8
 40181cc:	f800283a 	ret

040181d0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40181d0:	defffa04 	addi	sp,sp,-24
 40181d4:	dfc00515 	stw	ra,20(sp)
 40181d8:	df000415 	stw	fp,16(sp)
 40181dc:	df000404 	addi	fp,sp,16
 40181e0:	e13ffd15 	stw	r4,-12(fp)
 40181e4:	e17ffe15 	stw	r5,-8(fp)
 40181e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40181ec:	e0bffd17 	ldw	r2,-12(fp)
 40181f0:	10800017 	ldw	r2,0(r2)
 40181f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40181f8:	e0bffc17 	ldw	r2,-16(fp)
 40181fc:	10c00a04 	addi	r3,r2,40
 4018200:	e0bffd17 	ldw	r2,-12(fp)
 4018204:	10800217 	ldw	r2,8(r2)
 4018208:	100f883a 	mov	r7,r2
 401820c:	e1bfff17 	ldw	r6,-4(fp)
 4018210:	e17ffe17 	ldw	r5,-8(fp)
 4018214:	1809883a 	mov	r4,r3
 4018218:	40187f80 	call	40187f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401821c:	e037883a 	mov	sp,fp
 4018220:	dfc00117 	ldw	ra,4(sp)
 4018224:	df000017 	ldw	fp,0(sp)
 4018228:	dec00204 	addi	sp,sp,8
 401822c:	f800283a 	ret

04018230 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4018230:	defffa04 	addi	sp,sp,-24
 4018234:	dfc00515 	stw	ra,20(sp)
 4018238:	df000415 	stw	fp,16(sp)
 401823c:	df000404 	addi	fp,sp,16
 4018240:	e13ffd15 	stw	r4,-12(fp)
 4018244:	e17ffe15 	stw	r5,-8(fp)
 4018248:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401824c:	e0bffd17 	ldw	r2,-12(fp)
 4018250:	10800017 	ldw	r2,0(r2)
 4018254:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4018258:	e0bffc17 	ldw	r2,-16(fp)
 401825c:	10c00a04 	addi	r3,r2,40
 4018260:	e0bffd17 	ldw	r2,-12(fp)
 4018264:	10800217 	ldw	r2,8(r2)
 4018268:	100f883a 	mov	r7,r2
 401826c:	e1bfff17 	ldw	r6,-4(fp)
 4018270:	e17ffe17 	ldw	r5,-8(fp)
 4018274:	1809883a 	mov	r4,r3
 4018278:	4018a140 	call	4018a14 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401827c:	e037883a 	mov	sp,fp
 4018280:	dfc00117 	ldw	ra,4(sp)
 4018284:	df000017 	ldw	fp,0(sp)
 4018288:	dec00204 	addi	sp,sp,8
 401828c:	f800283a 	ret

04018290 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4018290:	defffc04 	addi	sp,sp,-16
 4018294:	dfc00315 	stw	ra,12(sp)
 4018298:	df000215 	stw	fp,8(sp)
 401829c:	df000204 	addi	fp,sp,8
 40182a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40182a4:	e0bfff17 	ldw	r2,-4(fp)
 40182a8:	10800017 	ldw	r2,0(r2)
 40182ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40182b0:	e0bffe17 	ldw	r2,-8(fp)
 40182b4:	10c00a04 	addi	r3,r2,40
 40182b8:	e0bfff17 	ldw	r2,-4(fp)
 40182bc:	10800217 	ldw	r2,8(r2)
 40182c0:	100b883a 	mov	r5,r2
 40182c4:	1809883a 	mov	r4,r3
 40182c8:	40186a00 	call	40186a0 <altera_avalon_jtag_uart_close>
}
 40182cc:	e037883a 	mov	sp,fp
 40182d0:	dfc00117 	ldw	ra,4(sp)
 40182d4:	df000017 	ldw	fp,0(sp)
 40182d8:	dec00204 	addi	sp,sp,8
 40182dc:	f800283a 	ret

040182e0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 40182e0:	defffa04 	addi	sp,sp,-24
 40182e4:	dfc00515 	stw	ra,20(sp)
 40182e8:	df000415 	stw	fp,16(sp)
 40182ec:	df000404 	addi	fp,sp,16
 40182f0:	e13ffd15 	stw	r4,-12(fp)
 40182f4:	e17ffe15 	stw	r5,-8(fp)
 40182f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40182fc:	e0bffd17 	ldw	r2,-12(fp)
 4018300:	10800017 	ldw	r2,0(r2)
 4018304:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4018308:	e0bffc17 	ldw	r2,-16(fp)
 401830c:	10800a04 	addi	r2,r2,40
 4018310:	e1bfff17 	ldw	r6,-4(fp)
 4018314:	e17ffe17 	ldw	r5,-8(fp)
 4018318:	1009883a 	mov	r4,r2
 401831c:	40187080 	call	4018708 <altera_avalon_jtag_uart_ioctl>
}
 4018320:	e037883a 	mov	sp,fp
 4018324:	dfc00117 	ldw	ra,4(sp)
 4018328:	df000017 	ldw	fp,0(sp)
 401832c:	dec00204 	addi	sp,sp,8
 4018330:	f800283a 	ret

04018334 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4018334:	defffa04 	addi	sp,sp,-24
 4018338:	dfc00515 	stw	ra,20(sp)
 401833c:	df000415 	stw	fp,16(sp)
 4018340:	df000404 	addi	fp,sp,16
 4018344:	e13ffd15 	stw	r4,-12(fp)
 4018348:	e17ffe15 	stw	r5,-8(fp)
 401834c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4018350:	e0bffd17 	ldw	r2,-12(fp)
 4018354:	00c00044 	movi	r3,1
 4018358:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401835c:	e0bffd17 	ldw	r2,-12(fp)
 4018360:	10800017 	ldw	r2,0(r2)
 4018364:	10800104 	addi	r2,r2,4
 4018368:	1007883a 	mov	r3,r2
 401836c:	e0bffd17 	ldw	r2,-12(fp)
 4018370:	10800817 	ldw	r2,32(r2)
 4018374:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4018378:	e0bffe17 	ldw	r2,-8(fp)
 401837c:	e0ffff17 	ldw	r3,-4(fp)
 4018380:	d8000015 	stw	zero,0(sp)
 4018384:	e1fffd17 	ldw	r7,-12(fp)
 4018388:	018100b4 	movhi	r6,1026
 401838c:	31a0fd04 	addi	r6,r6,-31756
 4018390:	180b883a 	mov	r5,r3
 4018394:	1009883a 	mov	r4,r2
 4018398:	40193c80 	call	40193c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401839c:	e0bffd17 	ldw	r2,-12(fp)
 40183a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40183a4:	e0bffd17 	ldw	r2,-12(fp)
 40183a8:	10800204 	addi	r2,r2,8
 40183ac:	d0fcb817 	ldw	r3,-3360(gp)
 40183b0:	e1fffd17 	ldw	r7,-12(fp)
 40183b4:	018100b4 	movhi	r6,1026
 40183b8:	31a18004 	addi	r6,r6,-31232
 40183bc:	180b883a 	mov	r5,r3
 40183c0:	1009883a 	mov	r4,r2
 40183c4:	4018f280 	call	4018f28 <alt_alarm_start>
 40183c8:	1000040e 	bge	r2,zero,40183dc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40183cc:	e0fffd17 	ldw	r3,-12(fp)
 40183d0:	00a00034 	movhi	r2,32768
 40183d4:	10bfffc4 	addi	r2,r2,-1
 40183d8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40183dc:	0001883a 	nop
 40183e0:	e037883a 	mov	sp,fp
 40183e4:	dfc00117 	ldw	ra,4(sp)
 40183e8:	df000017 	ldw	fp,0(sp)
 40183ec:	dec00204 	addi	sp,sp,8
 40183f0:	f800283a 	ret

040183f4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40183f4:	defff804 	addi	sp,sp,-32
 40183f8:	df000715 	stw	fp,28(sp)
 40183fc:	df000704 	addi	fp,sp,28
 4018400:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4018404:	e0bfff17 	ldw	r2,-4(fp)
 4018408:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401840c:	e0bffb17 	ldw	r2,-20(fp)
 4018410:	10800017 	ldw	r2,0(r2)
 4018414:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4018418:	e0bffc17 	ldw	r2,-16(fp)
 401841c:	10800104 	addi	r2,r2,4
 4018420:	10800037 	ldwio	r2,0(r2)
 4018424:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4018428:	e0bffd17 	ldw	r2,-12(fp)
 401842c:	1080c00c 	andi	r2,r2,768
 4018430:	10006d26 	beq	r2,zero,40185e8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4018434:	e0bffd17 	ldw	r2,-12(fp)
 4018438:	1080400c 	andi	r2,r2,256
 401843c:	10003526 	beq	r2,zero,4018514 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4018440:	00800074 	movhi	r2,1
 4018444:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4018448:	e0bffb17 	ldw	r2,-20(fp)
 401844c:	10800a17 	ldw	r2,40(r2)
 4018450:	10800044 	addi	r2,r2,1
 4018454:	1081ffcc 	andi	r2,r2,2047
 4018458:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 401845c:	e0bffb17 	ldw	r2,-20(fp)
 4018460:	10c00b17 	ldw	r3,44(r2)
 4018464:	e0bffe17 	ldw	r2,-8(fp)
 4018468:	18801526 	beq	r3,r2,40184c0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401846c:	e0bffc17 	ldw	r2,-16(fp)
 4018470:	10800037 	ldwio	r2,0(r2)
 4018474:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4018478:	e0bff917 	ldw	r2,-28(fp)
 401847c:	10a0000c 	andi	r2,r2,32768
 4018480:	10001126 	beq	r2,zero,40184c8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4018484:	e0bffb17 	ldw	r2,-20(fp)
 4018488:	10800a17 	ldw	r2,40(r2)
 401848c:	e0fff917 	ldw	r3,-28(fp)
 4018490:	1809883a 	mov	r4,r3
 4018494:	e0fffb17 	ldw	r3,-20(fp)
 4018498:	1885883a 	add	r2,r3,r2
 401849c:	10800e04 	addi	r2,r2,56
 40184a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40184a4:	e0bffb17 	ldw	r2,-20(fp)
 40184a8:	10800a17 	ldw	r2,40(r2)
 40184ac:	10800044 	addi	r2,r2,1
 40184b0:	10c1ffcc 	andi	r3,r2,2047
 40184b4:	e0bffb17 	ldw	r2,-20(fp)
 40184b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40184bc:	003fe206 	br	4018448 <__alt_data_end+0xfc018448>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 40184c0:	0001883a 	nop
 40184c4:	00000106 	br	40184cc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 40184c8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40184cc:	e0bff917 	ldw	r2,-28(fp)
 40184d0:	10bfffec 	andhi	r2,r2,65535
 40184d4:	10000f26 	beq	r2,zero,4018514 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40184d8:	e0bffb17 	ldw	r2,-20(fp)
 40184dc:	10c00817 	ldw	r3,32(r2)
 40184e0:	00bfff84 	movi	r2,-2
 40184e4:	1886703a 	and	r3,r3,r2
 40184e8:	e0bffb17 	ldw	r2,-20(fp)
 40184ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40184f0:	e0bffc17 	ldw	r2,-16(fp)
 40184f4:	10800104 	addi	r2,r2,4
 40184f8:	1007883a 	mov	r3,r2
 40184fc:	e0bffb17 	ldw	r2,-20(fp)
 4018500:	10800817 	ldw	r2,32(r2)
 4018504:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4018508:	e0bffc17 	ldw	r2,-16(fp)
 401850c:	10800104 	addi	r2,r2,4
 4018510:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4018514:	e0bffd17 	ldw	r2,-12(fp)
 4018518:	1080800c 	andi	r2,r2,512
 401851c:	103fbe26 	beq	r2,zero,4018418 <__alt_data_end+0xfc018418>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4018520:	e0bffd17 	ldw	r2,-12(fp)
 4018524:	1004d43a 	srli	r2,r2,16
 4018528:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401852c:	00001406 	br	4018580 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4018530:	e0bffc17 	ldw	r2,-16(fp)
 4018534:	e0fffb17 	ldw	r3,-20(fp)
 4018538:	18c00d17 	ldw	r3,52(r3)
 401853c:	e13ffb17 	ldw	r4,-20(fp)
 4018540:	20c7883a 	add	r3,r4,r3
 4018544:	18c20e04 	addi	r3,r3,2104
 4018548:	18c00003 	ldbu	r3,0(r3)
 401854c:	18c03fcc 	andi	r3,r3,255
 4018550:	18c0201c 	xori	r3,r3,128
 4018554:	18ffe004 	addi	r3,r3,-128
 4018558:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401855c:	e0bffb17 	ldw	r2,-20(fp)
 4018560:	10800d17 	ldw	r2,52(r2)
 4018564:	10800044 	addi	r2,r2,1
 4018568:	10c1ffcc 	andi	r3,r2,2047
 401856c:	e0bffb17 	ldw	r2,-20(fp)
 4018570:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4018574:	e0bffa17 	ldw	r2,-24(fp)
 4018578:	10bfffc4 	addi	r2,r2,-1
 401857c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4018580:	e0bffa17 	ldw	r2,-24(fp)
 4018584:	10000526 	beq	r2,zero,401859c <altera_avalon_jtag_uart_irq+0x1a8>
 4018588:	e0bffb17 	ldw	r2,-20(fp)
 401858c:	10c00d17 	ldw	r3,52(r2)
 4018590:	e0bffb17 	ldw	r2,-20(fp)
 4018594:	10800c17 	ldw	r2,48(r2)
 4018598:	18bfe51e 	bne	r3,r2,4018530 <__alt_data_end+0xfc018530>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401859c:	e0bffa17 	ldw	r2,-24(fp)
 40185a0:	103f9d26 	beq	r2,zero,4018418 <__alt_data_end+0xfc018418>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40185a4:	e0bffb17 	ldw	r2,-20(fp)
 40185a8:	10c00817 	ldw	r3,32(r2)
 40185ac:	00bfff44 	movi	r2,-3
 40185b0:	1886703a 	and	r3,r3,r2
 40185b4:	e0bffb17 	ldw	r2,-20(fp)
 40185b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40185bc:	e0bffb17 	ldw	r2,-20(fp)
 40185c0:	10800017 	ldw	r2,0(r2)
 40185c4:	10800104 	addi	r2,r2,4
 40185c8:	1007883a 	mov	r3,r2
 40185cc:	e0bffb17 	ldw	r2,-20(fp)
 40185d0:	10800817 	ldw	r2,32(r2)
 40185d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40185d8:	e0bffc17 	ldw	r2,-16(fp)
 40185dc:	10800104 	addi	r2,r2,4
 40185e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 40185e4:	003f8c06 	br	4018418 <__alt_data_end+0xfc018418>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 40185e8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 40185ec:	0001883a 	nop
 40185f0:	e037883a 	mov	sp,fp
 40185f4:	df000017 	ldw	fp,0(sp)
 40185f8:	dec00104 	addi	sp,sp,4
 40185fc:	f800283a 	ret

04018600 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4018600:	defff804 	addi	sp,sp,-32
 4018604:	df000715 	stw	fp,28(sp)
 4018608:	df000704 	addi	fp,sp,28
 401860c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4018610:	e0bffb17 	ldw	r2,-20(fp)
 4018614:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4018618:	e0bff917 	ldw	r2,-28(fp)
 401861c:	10800017 	ldw	r2,0(r2)
 4018620:	10800104 	addi	r2,r2,4
 4018624:	10800037 	ldwio	r2,0(r2)
 4018628:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401862c:	e0bffa17 	ldw	r2,-24(fp)
 4018630:	1081000c 	andi	r2,r2,1024
 4018634:	10000b26 	beq	r2,zero,4018664 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4018638:	e0bff917 	ldw	r2,-28(fp)
 401863c:	10800017 	ldw	r2,0(r2)
 4018640:	10800104 	addi	r2,r2,4
 4018644:	1007883a 	mov	r3,r2
 4018648:	e0bff917 	ldw	r2,-28(fp)
 401864c:	10800817 	ldw	r2,32(r2)
 4018650:	10810014 	ori	r2,r2,1024
 4018654:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4018658:	e0bff917 	ldw	r2,-28(fp)
 401865c:	10000915 	stw	zero,36(r2)
 4018660:	00000a06 	br	401868c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4018664:	e0bff917 	ldw	r2,-28(fp)
 4018668:	10c00917 	ldw	r3,36(r2)
 401866c:	00a00034 	movhi	r2,32768
 4018670:	10bfff04 	addi	r2,r2,-4
 4018674:	10c00536 	bltu	r2,r3,401868c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4018678:	e0bff917 	ldw	r2,-28(fp)
 401867c:	10800917 	ldw	r2,36(r2)
 4018680:	10c00044 	addi	r3,r2,1
 4018684:	e0bff917 	ldw	r2,-28(fp)
 4018688:	10c00915 	stw	r3,36(r2)
 401868c:	d0bcb817 	ldw	r2,-3360(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4018690:	e037883a 	mov	sp,fp
 4018694:	df000017 	ldw	fp,0(sp)
 4018698:	dec00104 	addi	sp,sp,4
 401869c:	f800283a 	ret

040186a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40186a0:	defffd04 	addi	sp,sp,-12
 40186a4:	df000215 	stw	fp,8(sp)
 40186a8:	df000204 	addi	fp,sp,8
 40186ac:	e13ffe15 	stw	r4,-8(fp)
 40186b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40186b4:	00000506 	br	40186cc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40186b8:	e0bfff17 	ldw	r2,-4(fp)
 40186bc:	1090000c 	andi	r2,r2,16384
 40186c0:	10000226 	beq	r2,zero,40186cc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40186c4:	00bffd44 	movi	r2,-11
 40186c8:	00000b06 	br	40186f8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40186cc:	e0bffe17 	ldw	r2,-8(fp)
 40186d0:	10c00d17 	ldw	r3,52(r2)
 40186d4:	e0bffe17 	ldw	r2,-8(fp)
 40186d8:	10800c17 	ldw	r2,48(r2)
 40186dc:	18800526 	beq	r3,r2,40186f4 <altera_avalon_jtag_uart_close+0x54>
 40186e0:	e0bffe17 	ldw	r2,-8(fp)
 40186e4:	10c00917 	ldw	r3,36(r2)
 40186e8:	e0bffe17 	ldw	r2,-8(fp)
 40186ec:	10800117 	ldw	r2,4(r2)
 40186f0:	18bff136 	bltu	r3,r2,40186b8 <__alt_data_end+0xfc0186b8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40186f4:	0005883a 	mov	r2,zero
}
 40186f8:	e037883a 	mov	sp,fp
 40186fc:	df000017 	ldw	fp,0(sp)
 4018700:	dec00104 	addi	sp,sp,4
 4018704:	f800283a 	ret

04018708 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4018708:	defffa04 	addi	sp,sp,-24
 401870c:	df000515 	stw	fp,20(sp)
 4018710:	df000504 	addi	fp,sp,20
 4018714:	e13ffd15 	stw	r4,-12(fp)
 4018718:	e17ffe15 	stw	r5,-8(fp)
 401871c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4018720:	00bff9c4 	movi	r2,-25
 4018724:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4018728:	e0bffe17 	ldw	r2,-8(fp)
 401872c:	10da8060 	cmpeqi	r3,r2,27137
 4018730:	1800031e 	bne	r3,zero,4018740 <altera_avalon_jtag_uart_ioctl+0x38>
 4018734:	109a80a0 	cmpeqi	r2,r2,27138
 4018738:	1000181e 	bne	r2,zero,401879c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401873c:	00002906 	br	40187e4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4018740:	e0bffd17 	ldw	r2,-12(fp)
 4018744:	10c00117 	ldw	r3,4(r2)
 4018748:	00a00034 	movhi	r2,32768
 401874c:	10bfffc4 	addi	r2,r2,-1
 4018750:	18802126 	beq	r3,r2,40187d8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4018754:	e0bfff17 	ldw	r2,-4(fp)
 4018758:	10800017 	ldw	r2,0(r2)
 401875c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4018760:	e0bffc17 	ldw	r2,-16(fp)
 4018764:	10800090 	cmplti	r2,r2,2
 4018768:	1000061e 	bne	r2,zero,4018784 <altera_avalon_jtag_uart_ioctl+0x7c>
 401876c:	e0fffc17 	ldw	r3,-16(fp)
 4018770:	00a00034 	movhi	r2,32768
 4018774:	10bfffc4 	addi	r2,r2,-1
 4018778:	18800226 	beq	r3,r2,4018784 <altera_avalon_jtag_uart_ioctl+0x7c>
 401877c:	e0bffc17 	ldw	r2,-16(fp)
 4018780:	00000206 	br	401878c <altera_avalon_jtag_uart_ioctl+0x84>
 4018784:	00a00034 	movhi	r2,32768
 4018788:	10bfff84 	addi	r2,r2,-2
 401878c:	e0fffd17 	ldw	r3,-12(fp)
 4018790:	18800115 	stw	r2,4(r3)
      rc = 0;
 4018794:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4018798:	00000f06 	br	40187d8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401879c:	e0bffd17 	ldw	r2,-12(fp)
 40187a0:	10c00117 	ldw	r3,4(r2)
 40187a4:	00a00034 	movhi	r2,32768
 40187a8:	10bfffc4 	addi	r2,r2,-1
 40187ac:	18800c26 	beq	r3,r2,40187e0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40187b0:	e0bffd17 	ldw	r2,-12(fp)
 40187b4:	10c00917 	ldw	r3,36(r2)
 40187b8:	e0bffd17 	ldw	r2,-12(fp)
 40187bc:	10800117 	ldw	r2,4(r2)
 40187c0:	1885803a 	cmpltu	r2,r3,r2
 40187c4:	10c03fcc 	andi	r3,r2,255
 40187c8:	e0bfff17 	ldw	r2,-4(fp)
 40187cc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40187d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40187d4:	00000206 	br	40187e0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 40187d8:	0001883a 	nop
 40187dc:	00000106 	br	40187e4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 40187e0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 40187e4:	e0bffb17 	ldw	r2,-20(fp)
}
 40187e8:	e037883a 	mov	sp,fp
 40187ec:	df000017 	ldw	fp,0(sp)
 40187f0:	dec00104 	addi	sp,sp,4
 40187f4:	f800283a 	ret

040187f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40187f8:	defff304 	addi	sp,sp,-52
 40187fc:	dfc00c15 	stw	ra,48(sp)
 4018800:	df000b15 	stw	fp,44(sp)
 4018804:	df000b04 	addi	fp,sp,44
 4018808:	e13ffc15 	stw	r4,-16(fp)
 401880c:	e17ffd15 	stw	r5,-12(fp)
 4018810:	e1bffe15 	stw	r6,-8(fp)
 4018814:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4018818:	e0bffd17 	ldw	r2,-12(fp)
 401881c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4018820:	00004706 	br	4018940 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4018824:	e0bffc17 	ldw	r2,-16(fp)
 4018828:	10800a17 	ldw	r2,40(r2)
 401882c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4018830:	e0bffc17 	ldw	r2,-16(fp)
 4018834:	10800b17 	ldw	r2,44(r2)
 4018838:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401883c:	e0fff717 	ldw	r3,-36(fp)
 4018840:	e0bff817 	ldw	r2,-32(fp)
 4018844:	18800536 	bltu	r3,r2,401885c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4018848:	e0fff717 	ldw	r3,-36(fp)
 401884c:	e0bff817 	ldw	r2,-32(fp)
 4018850:	1885c83a 	sub	r2,r3,r2
 4018854:	e0bff615 	stw	r2,-40(fp)
 4018858:	00000406 	br	401886c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401885c:	00c20004 	movi	r3,2048
 4018860:	e0bff817 	ldw	r2,-32(fp)
 4018864:	1885c83a 	sub	r2,r3,r2
 4018868:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401886c:	e0bff617 	ldw	r2,-40(fp)
 4018870:	10001e26 	beq	r2,zero,40188ec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4018874:	e0fffe17 	ldw	r3,-8(fp)
 4018878:	e0bff617 	ldw	r2,-40(fp)
 401887c:	1880022e 	bgeu	r3,r2,4018888 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4018880:	e0bffe17 	ldw	r2,-8(fp)
 4018884:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4018888:	e0bffc17 	ldw	r2,-16(fp)
 401888c:	10c00e04 	addi	r3,r2,56
 4018890:	e0bff817 	ldw	r2,-32(fp)
 4018894:	1885883a 	add	r2,r3,r2
 4018898:	e1bff617 	ldw	r6,-40(fp)
 401889c:	100b883a 	mov	r5,r2
 40188a0:	e13ff517 	ldw	r4,-44(fp)
 40188a4:	400b2a80 	call	400b2a8 <memcpy>
      ptr   += n;
 40188a8:	e0fff517 	ldw	r3,-44(fp)
 40188ac:	e0bff617 	ldw	r2,-40(fp)
 40188b0:	1885883a 	add	r2,r3,r2
 40188b4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40188b8:	e0fffe17 	ldw	r3,-8(fp)
 40188bc:	e0bff617 	ldw	r2,-40(fp)
 40188c0:	1885c83a 	sub	r2,r3,r2
 40188c4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40188c8:	e0fff817 	ldw	r3,-32(fp)
 40188cc:	e0bff617 	ldw	r2,-40(fp)
 40188d0:	1885883a 	add	r2,r3,r2
 40188d4:	10c1ffcc 	andi	r3,r2,2047
 40188d8:	e0bffc17 	ldw	r2,-16(fp)
 40188dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 40188e0:	e0bffe17 	ldw	r2,-8(fp)
 40188e4:	00bfcf16 	blt	zero,r2,4018824 <__alt_data_end+0xfc018824>
 40188e8:	00000106 	br	40188f0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 40188ec:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 40188f0:	e0fff517 	ldw	r3,-44(fp)
 40188f4:	e0bffd17 	ldw	r2,-12(fp)
 40188f8:	1880141e 	bne	r3,r2,401894c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40188fc:	e0bfff17 	ldw	r2,-4(fp)
 4018900:	1090000c 	andi	r2,r2,16384
 4018904:	1000131e 	bne	r2,zero,4018954 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4018908:	0001883a 	nop
 401890c:	e0bffc17 	ldw	r2,-16(fp)
 4018910:	10c00a17 	ldw	r3,40(r2)
 4018914:	e0bff717 	ldw	r2,-36(fp)
 4018918:	1880051e 	bne	r3,r2,4018930 <altera_avalon_jtag_uart_read+0x138>
 401891c:	e0bffc17 	ldw	r2,-16(fp)
 4018920:	10c00917 	ldw	r3,36(r2)
 4018924:	e0bffc17 	ldw	r2,-16(fp)
 4018928:	10800117 	ldw	r2,4(r2)
 401892c:	18bff736 	bltu	r3,r2,401890c <__alt_data_end+0xfc01890c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4018930:	e0bffc17 	ldw	r2,-16(fp)
 4018934:	10c00a17 	ldw	r3,40(r2)
 4018938:	e0bff717 	ldw	r2,-36(fp)
 401893c:	18800726 	beq	r3,r2,401895c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4018940:	e0bffe17 	ldw	r2,-8(fp)
 4018944:	00bfb716 	blt	zero,r2,4018824 <__alt_data_end+0xfc018824>
 4018948:	00000506 	br	4018960 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401894c:	0001883a 	nop
 4018950:	00000306 	br	4018960 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4018954:	0001883a 	nop
 4018958:	00000106 	br	4018960 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401895c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4018960:	e0fff517 	ldw	r3,-44(fp)
 4018964:	e0bffd17 	ldw	r2,-12(fp)
 4018968:	18801826 	beq	r3,r2,40189cc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401896c:	0005303a 	rdctl	r2,status
 4018970:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018974:	e0fffb17 	ldw	r3,-20(fp)
 4018978:	00bfff84 	movi	r2,-2
 401897c:	1884703a 	and	r2,r3,r2
 4018980:	1001703a 	wrctl	status,r2
  
  return context;
 4018984:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4018988:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401898c:	e0bffc17 	ldw	r2,-16(fp)
 4018990:	10800817 	ldw	r2,32(r2)
 4018994:	10c00054 	ori	r3,r2,1
 4018998:	e0bffc17 	ldw	r2,-16(fp)
 401899c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40189a0:	e0bffc17 	ldw	r2,-16(fp)
 40189a4:	10800017 	ldw	r2,0(r2)
 40189a8:	10800104 	addi	r2,r2,4
 40189ac:	1007883a 	mov	r3,r2
 40189b0:	e0bffc17 	ldw	r2,-16(fp)
 40189b4:	10800817 	ldw	r2,32(r2)
 40189b8:	18800035 	stwio	r2,0(r3)
 40189bc:	e0bffa17 	ldw	r2,-24(fp)
 40189c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40189c4:	e0bff917 	ldw	r2,-28(fp)
 40189c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40189cc:	e0fff517 	ldw	r3,-44(fp)
 40189d0:	e0bffd17 	ldw	r2,-12(fp)
 40189d4:	18800426 	beq	r3,r2,40189e8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 40189d8:	e0fff517 	ldw	r3,-44(fp)
 40189dc:	e0bffd17 	ldw	r2,-12(fp)
 40189e0:	1885c83a 	sub	r2,r3,r2
 40189e4:	00000606 	br	4018a00 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 40189e8:	e0bfff17 	ldw	r2,-4(fp)
 40189ec:	1090000c 	andi	r2,r2,16384
 40189f0:	10000226 	beq	r2,zero,40189fc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 40189f4:	00bffd44 	movi	r2,-11
 40189f8:	00000106 	br	4018a00 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 40189fc:	00bffec4 	movi	r2,-5
}
 4018a00:	e037883a 	mov	sp,fp
 4018a04:	dfc00117 	ldw	ra,4(sp)
 4018a08:	df000017 	ldw	fp,0(sp)
 4018a0c:	dec00204 	addi	sp,sp,8
 4018a10:	f800283a 	ret

04018a14 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4018a14:	defff304 	addi	sp,sp,-52
 4018a18:	dfc00c15 	stw	ra,48(sp)
 4018a1c:	df000b15 	stw	fp,44(sp)
 4018a20:	df000b04 	addi	fp,sp,44
 4018a24:	e13ffc15 	stw	r4,-16(fp)
 4018a28:	e17ffd15 	stw	r5,-12(fp)
 4018a2c:	e1bffe15 	stw	r6,-8(fp)
 4018a30:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4018a34:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4018a38:	e0bffd17 	ldw	r2,-12(fp)
 4018a3c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4018a40:	00003706 	br	4018b20 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4018a44:	e0bffc17 	ldw	r2,-16(fp)
 4018a48:	10800c17 	ldw	r2,48(r2)
 4018a4c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4018a50:	e0bffc17 	ldw	r2,-16(fp)
 4018a54:	10800d17 	ldw	r2,52(r2)
 4018a58:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4018a5c:	e0fff917 	ldw	r3,-28(fp)
 4018a60:	e0bff517 	ldw	r2,-44(fp)
 4018a64:	1880062e 	bgeu	r3,r2,4018a80 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4018a68:	e0fff517 	ldw	r3,-44(fp)
 4018a6c:	e0bff917 	ldw	r2,-28(fp)
 4018a70:	1885c83a 	sub	r2,r3,r2
 4018a74:	10bfffc4 	addi	r2,r2,-1
 4018a78:	e0bff615 	stw	r2,-40(fp)
 4018a7c:	00000b06 	br	4018aac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4018a80:	e0bff517 	ldw	r2,-44(fp)
 4018a84:	10000526 	beq	r2,zero,4018a9c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4018a88:	00c20004 	movi	r3,2048
 4018a8c:	e0bff917 	ldw	r2,-28(fp)
 4018a90:	1885c83a 	sub	r2,r3,r2
 4018a94:	e0bff615 	stw	r2,-40(fp)
 4018a98:	00000406 	br	4018aac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4018a9c:	00c1ffc4 	movi	r3,2047
 4018aa0:	e0bff917 	ldw	r2,-28(fp)
 4018aa4:	1885c83a 	sub	r2,r3,r2
 4018aa8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4018aac:	e0bff617 	ldw	r2,-40(fp)
 4018ab0:	10001e26 	beq	r2,zero,4018b2c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4018ab4:	e0fffe17 	ldw	r3,-8(fp)
 4018ab8:	e0bff617 	ldw	r2,-40(fp)
 4018abc:	1880022e 	bgeu	r3,r2,4018ac8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4018ac0:	e0bffe17 	ldw	r2,-8(fp)
 4018ac4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4018ac8:	e0bffc17 	ldw	r2,-16(fp)
 4018acc:	10c20e04 	addi	r3,r2,2104
 4018ad0:	e0bff917 	ldw	r2,-28(fp)
 4018ad4:	1885883a 	add	r2,r3,r2
 4018ad8:	e1bff617 	ldw	r6,-40(fp)
 4018adc:	e17ffd17 	ldw	r5,-12(fp)
 4018ae0:	1009883a 	mov	r4,r2
 4018ae4:	400b2a80 	call	400b2a8 <memcpy>
      ptr   += n;
 4018ae8:	e0fffd17 	ldw	r3,-12(fp)
 4018aec:	e0bff617 	ldw	r2,-40(fp)
 4018af0:	1885883a 	add	r2,r3,r2
 4018af4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4018af8:	e0fffe17 	ldw	r3,-8(fp)
 4018afc:	e0bff617 	ldw	r2,-40(fp)
 4018b00:	1885c83a 	sub	r2,r3,r2
 4018b04:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4018b08:	e0fff917 	ldw	r3,-28(fp)
 4018b0c:	e0bff617 	ldw	r2,-40(fp)
 4018b10:	1885883a 	add	r2,r3,r2
 4018b14:	10c1ffcc 	andi	r3,r2,2047
 4018b18:	e0bffc17 	ldw	r2,-16(fp)
 4018b1c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4018b20:	e0bffe17 	ldw	r2,-8(fp)
 4018b24:	00bfc716 	blt	zero,r2,4018a44 <__alt_data_end+0xfc018a44>
 4018b28:	00000106 	br	4018b30 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4018b2c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018b30:	0005303a 	rdctl	r2,status
 4018b34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018b38:	e0fffb17 	ldw	r3,-20(fp)
 4018b3c:	00bfff84 	movi	r2,-2
 4018b40:	1884703a 	and	r2,r3,r2
 4018b44:	1001703a 	wrctl	status,r2
  
  return context;
 4018b48:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4018b4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4018b50:	e0bffc17 	ldw	r2,-16(fp)
 4018b54:	10800817 	ldw	r2,32(r2)
 4018b58:	10c00094 	ori	r3,r2,2
 4018b5c:	e0bffc17 	ldw	r2,-16(fp)
 4018b60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4018b64:	e0bffc17 	ldw	r2,-16(fp)
 4018b68:	10800017 	ldw	r2,0(r2)
 4018b6c:	10800104 	addi	r2,r2,4
 4018b70:	1007883a 	mov	r3,r2
 4018b74:	e0bffc17 	ldw	r2,-16(fp)
 4018b78:	10800817 	ldw	r2,32(r2)
 4018b7c:	18800035 	stwio	r2,0(r3)
 4018b80:	e0bffa17 	ldw	r2,-24(fp)
 4018b84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018b88:	e0bff817 	ldw	r2,-32(fp)
 4018b8c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4018b90:	e0bffe17 	ldw	r2,-8(fp)
 4018b94:	0080100e 	bge	zero,r2,4018bd8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4018b98:	e0bfff17 	ldw	r2,-4(fp)
 4018b9c:	1090000c 	andi	r2,r2,16384
 4018ba0:	1000101e 	bne	r2,zero,4018be4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4018ba4:	0001883a 	nop
 4018ba8:	e0bffc17 	ldw	r2,-16(fp)
 4018bac:	10c00d17 	ldw	r3,52(r2)
 4018bb0:	e0bff517 	ldw	r2,-44(fp)
 4018bb4:	1880051e 	bne	r3,r2,4018bcc <altera_avalon_jtag_uart_write+0x1b8>
 4018bb8:	e0bffc17 	ldw	r2,-16(fp)
 4018bbc:	10c00917 	ldw	r3,36(r2)
 4018bc0:	e0bffc17 	ldw	r2,-16(fp)
 4018bc4:	10800117 	ldw	r2,4(r2)
 4018bc8:	18bff736 	bltu	r3,r2,4018ba8 <__alt_data_end+0xfc018ba8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4018bcc:	e0bffc17 	ldw	r2,-16(fp)
 4018bd0:	10800917 	ldw	r2,36(r2)
 4018bd4:	1000051e 	bne	r2,zero,4018bec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4018bd8:	e0bffe17 	ldw	r2,-8(fp)
 4018bdc:	00bfd016 	blt	zero,r2,4018b20 <__alt_data_end+0xfc018b20>
 4018be0:	00000306 	br	4018bf0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4018be4:	0001883a 	nop
 4018be8:	00000106 	br	4018bf0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4018bec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4018bf0:	e0fffd17 	ldw	r3,-12(fp)
 4018bf4:	e0bff717 	ldw	r2,-36(fp)
 4018bf8:	18800426 	beq	r3,r2,4018c0c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4018bfc:	e0fffd17 	ldw	r3,-12(fp)
 4018c00:	e0bff717 	ldw	r2,-36(fp)
 4018c04:	1885c83a 	sub	r2,r3,r2
 4018c08:	00000606 	br	4018c24 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4018c0c:	e0bfff17 	ldw	r2,-4(fp)
 4018c10:	1090000c 	andi	r2,r2,16384
 4018c14:	10000226 	beq	r2,zero,4018c20 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4018c18:	00bffd44 	movi	r2,-11
 4018c1c:	00000106 	br	4018c24 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4018c20:	00bffec4 	movi	r2,-5
}
 4018c24:	e037883a 	mov	sp,fp
 4018c28:	dfc00117 	ldw	ra,4(sp)
 4018c2c:	df000017 	ldw	fp,0(sp)
 4018c30:	dec00204 	addi	sp,sp,8
 4018c34:	f800283a 	ret

04018c38 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4018c38:	defff404 	addi	sp,sp,-48
 4018c3c:	df000b15 	stw	fp,44(sp)
 4018c40:	df000b04 	addi	fp,sp,44
 4018c44:	e13ffc15 	stw	r4,-16(fp)
 4018c48:	e17ffd15 	stw	r5,-12(fp)
 4018c4c:	e1bffe15 	stw	r6,-8(fp)
 4018c50:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 4018c54:	e0ffff17 	ldw	r3,-4(fp)
 4018c58:	e0bffe17 	ldw	r2,-8(fp)
 4018c5c:	1885883a 	add	r2,r3,r2
 4018c60:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 4018c64:	e0c00217 	ldw	r3,8(fp)
 4018c68:	e0800117 	ldw	r2,4(fp)
 4018c6c:	1885883a 	add	r2,r3,r2
 4018c70:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 4018c74:	e0800117 	ldw	r2,4(fp)
 4018c78:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 4018c7c:	e0bffe17 	ldw	r2,-8(fp)
 4018c80:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4018c84:	00800044 	movi	r2,1
 4018c88:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4018c8c:	e0bffc17 	ldw	r2,-16(fp)
 4018c90:	10800504 	addi	r2,r2,20
 4018c94:	1009883a 	mov	r4,r2
 4018c98:	00c00044 	movi	r3,1
 4018c9c:	e0bffd17 	ldw	r2,-12(fp)
 4018ca0:	1884983a 	sll	r2,r3,r2
 4018ca4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4018ca8:	e0800317 	ldw	r2,12(fp)
 4018cac:	1080008c 	andi	r2,r2,2
 4018cb0:	1000051e 	bne	r2,zero,4018cc8 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4018cb4:	e0bffc17 	ldw	r2,-16(fp)
 4018cb8:	10800304 	addi	r2,r2,12
 4018cbc:	1007883a 	mov	r3,r2
 4018cc0:	00810004 	movi	r2,1024
 4018cc4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4018cc8:	e0bffc17 	ldw	r2,-16(fp)
 4018ccc:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4018cd0:	e0bffc17 	ldw	r2,-16(fp)
 4018cd4:	10800204 	addi	r2,r2,8
 4018cd8:	10800037 	ldwio	r2,0(r2)
 4018cdc:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4018ce0:	e0bffa17 	ldw	r2,-24(fp)
 4018ce4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4018ce8:	10000226 	beq	r2,zero,4018cf4 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4018cec:	e0bff717 	ldw	r2,-36(fp)
 4018cf0:	1000031e 	bne	r2,zero,4018d00 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4018cf4:	e0bffa17 	ldw	r2,-24(fp)
 4018cf8:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4018cfc:	103ff426 	beq	r2,zero,4018cd0 <__alt_data_end+0xfc018cd0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4018d00:	e0bffa17 	ldw	r2,-24(fp)
 4018d04:	1080100c 	andi	r2,r2,64
 4018d08:	10001e26 	beq	r2,zero,4018d84 <alt_avalon_spi_command+0x14c>
 4018d0c:	e0bff717 	ldw	r2,-36(fp)
 4018d10:	00801c0e 	bge	zero,r2,4018d84 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 4018d14:	e0bff717 	ldw	r2,-36(fp)
 4018d18:	10bfffc4 	addi	r2,r2,-1
 4018d1c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 4018d20:	e0ffff17 	ldw	r3,-4(fp)
 4018d24:	e0bff817 	ldw	r2,-32(fp)
 4018d28:	18800a2e 	bgeu	r3,r2,4018d54 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4018d2c:	e0bffc17 	ldw	r2,-16(fp)
 4018d30:	10800104 	addi	r2,r2,4
 4018d34:	1009883a 	mov	r4,r2
 4018d38:	e0bfff17 	ldw	r2,-4(fp)
 4018d3c:	10c00044 	addi	r3,r2,1
 4018d40:	e0ffff15 	stw	r3,-4(fp)
 4018d44:	10800003 	ldbu	r2,0(r2)
 4018d48:	10803fcc 	andi	r2,r2,255
 4018d4c:	20800035 	stwio	r2,0(r4)
 4018d50:	00000c06 	br	4018d84 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 4018d54:	e0bff517 	ldw	r2,-44(fp)
 4018d58:	10000826 	beq	r2,zero,4018d7c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 4018d5c:	e0bff517 	ldw	r2,-44(fp)
 4018d60:	10bfffc4 	addi	r2,r2,-1
 4018d64:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4018d68:	e0bffc17 	ldw	r2,-16(fp)
 4018d6c:	10800104 	addi	r2,r2,4
 4018d70:	0007883a 	mov	r3,zero
 4018d74:	10c00035 	stwio	r3,0(r2)
 4018d78:	00000206 	br	4018d84 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 4018d7c:	00bf0004 	movi	r2,-1024
 4018d80:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4018d84:	e0bffa17 	ldw	r2,-24(fp)
 4018d88:	1080200c 	andi	r2,r2,128
 4018d8c:	103fd026 	beq	r2,zero,4018cd0 <__alt_data_end+0xfc018cd0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4018d90:	e0bffc17 	ldw	r2,-16(fp)
 4018d94:	10800037 	ldwio	r2,0(r2)
 4018d98:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4018d9c:	e0bff617 	ldw	r2,-40(fp)
 4018da0:	10000426 	beq	r2,zero,4018db4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4018da4:	e0bff617 	ldw	r2,-40(fp)
 4018da8:	10bfffc4 	addi	r2,r2,-1
 4018dac:	e0bff615 	stw	r2,-40(fp)
 4018db0:	00000506 	br	4018dc8 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 4018db4:	e0800217 	ldw	r2,8(fp)
 4018db8:	10c00044 	addi	r3,r2,1
 4018dbc:	e0c00215 	stw	r3,8(fp)
 4018dc0:	e0fffb17 	ldw	r3,-20(fp)
 4018dc4:	10c00005 	stb	r3,0(r2)
      credits++;
 4018dc8:	e0bff717 	ldw	r2,-36(fp)
 4018dcc:	10800044 	addi	r2,r2,1
 4018dd0:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 4018dd4:	e0bff617 	ldw	r2,-40(fp)
 4018dd8:	103fbd1e 	bne	r2,zero,4018cd0 <__alt_data_end+0xfc018cd0>
 4018ddc:	e0c00217 	ldw	r3,8(fp)
 4018de0:	e0bff917 	ldw	r2,-28(fp)
 4018de4:	18bfba1e 	bne	r3,r2,4018cd0 <__alt_data_end+0xfc018cd0>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4018de8:	e0bffc17 	ldw	r2,-16(fp)
 4018dec:	10800204 	addi	r2,r2,8
 4018df0:	10800037 	ldwio	r2,0(r2)
 4018df4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4018df8:	e0bffa17 	ldw	r2,-24(fp)
 4018dfc:	1080080c 	andi	r2,r2,32
 4018e00:	103ff926 	beq	r2,zero,4018de8 <__alt_data_end+0xfc018de8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4018e04:	e0800317 	ldw	r2,12(fp)
 4018e08:	1080004c 	andi	r2,r2,1
 4018e0c:	1000041e 	bne	r2,zero,4018e20 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4018e10:	e0bffc17 	ldw	r2,-16(fp)
 4018e14:	10800304 	addi	r2,r2,12
 4018e18:	0007883a 	mov	r3,zero
 4018e1c:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4018e20:	e0800117 	ldw	r2,4(fp)
}
 4018e24:	e037883a 	mov	sp,fp
 4018e28:	df000017 	ldw	fp,0(sp)
 4018e2c:	dec00104 	addi	sp,sp,4
 4018e30:	f800283a 	ret

04018e34 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4018e34:	defffa04 	addi	sp,sp,-24
 4018e38:	dfc00515 	stw	ra,20(sp)
 4018e3c:	df000415 	stw	fp,16(sp)
 4018e40:	df000404 	addi	fp,sp,16
 4018e44:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4018e48:	0007883a 	mov	r3,zero
 4018e4c:	e0bfff17 	ldw	r2,-4(fp)
 4018e50:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4018e54:	e0bfff17 	ldw	r2,-4(fp)
 4018e58:	10800104 	addi	r2,r2,4
 4018e5c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018e60:	0005303a 	rdctl	r2,status
 4018e64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018e68:	e0fffd17 	ldw	r3,-12(fp)
 4018e6c:	00bfff84 	movi	r2,-2
 4018e70:	1884703a 	and	r2,r3,r2
 4018e74:	1001703a 	wrctl	status,r2
  
  return context;
 4018e78:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4018e7c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4018e80:	4019a980 	call	4019a98 <alt_tick>
 4018e84:	e0bffc17 	ldw	r2,-16(fp)
 4018e88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018e8c:	e0bffe17 	ldw	r2,-8(fp)
 4018e90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4018e94:	0001883a 	nop
 4018e98:	e037883a 	mov	sp,fp
 4018e9c:	dfc00117 	ldw	ra,4(sp)
 4018ea0:	df000017 	ldw	fp,0(sp)
 4018ea4:	dec00204 	addi	sp,sp,8
 4018ea8:	f800283a 	ret

04018eac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4018eac:	defff804 	addi	sp,sp,-32
 4018eb0:	dfc00715 	stw	ra,28(sp)
 4018eb4:	df000615 	stw	fp,24(sp)
 4018eb8:	df000604 	addi	fp,sp,24
 4018ebc:	e13ffc15 	stw	r4,-16(fp)
 4018ec0:	e17ffd15 	stw	r5,-12(fp)
 4018ec4:	e1bffe15 	stw	r6,-8(fp)
 4018ec8:	e1ffff15 	stw	r7,-4(fp)
 4018ecc:	e0bfff17 	ldw	r2,-4(fp)
 4018ed0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4018ed4:	d0bcb817 	ldw	r2,-3360(gp)
 4018ed8:	1000021e 	bne	r2,zero,4018ee4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4018edc:	e0bffb17 	ldw	r2,-20(fp)
 4018ee0:	d0bcb815 	stw	r2,-3360(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4018ee4:	e0bffc17 	ldw	r2,-16(fp)
 4018ee8:	10800104 	addi	r2,r2,4
 4018eec:	00c001c4 	movi	r3,7
 4018ef0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4018ef4:	d8000015 	stw	zero,0(sp)
 4018ef8:	e1fffc17 	ldw	r7,-16(fp)
 4018efc:	018100b4 	movhi	r6,1026
 4018f00:	31a38d04 	addi	r6,r6,-29132
 4018f04:	e17ffe17 	ldw	r5,-8(fp)
 4018f08:	e13ffd17 	ldw	r4,-12(fp)
 4018f0c:	40193c80 	call	40193c8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4018f10:	0001883a 	nop
 4018f14:	e037883a 	mov	sp,fp
 4018f18:	dfc00117 	ldw	ra,4(sp)
 4018f1c:	df000017 	ldw	fp,0(sp)
 4018f20:	dec00204 	addi	sp,sp,8
 4018f24:	f800283a 	ret

04018f28 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4018f28:	defff504 	addi	sp,sp,-44
 4018f2c:	df000a15 	stw	fp,40(sp)
 4018f30:	df000a04 	addi	fp,sp,40
 4018f34:	e13ffc15 	stw	r4,-16(fp)
 4018f38:	e17ffd15 	stw	r5,-12(fp)
 4018f3c:	e1bffe15 	stw	r6,-8(fp)
 4018f40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4018f44:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4018f48:	d0bcb817 	ldw	r2,-3360(gp)
  
  if (alt_ticks_per_second ())
 4018f4c:	10003c26 	beq	r2,zero,4019040 <alt_alarm_start+0x118>
  {
    if (alarm)
 4018f50:	e0bffc17 	ldw	r2,-16(fp)
 4018f54:	10003826 	beq	r2,zero,4019038 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4018f58:	e0bffc17 	ldw	r2,-16(fp)
 4018f5c:	e0fffe17 	ldw	r3,-8(fp)
 4018f60:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4018f64:	e0bffc17 	ldw	r2,-16(fp)
 4018f68:	e0ffff17 	ldw	r3,-4(fp)
 4018f6c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018f70:	0005303a 	rdctl	r2,status
 4018f74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018f78:	e0fff917 	ldw	r3,-28(fp)
 4018f7c:	00bfff84 	movi	r2,-2
 4018f80:	1884703a 	and	r2,r3,r2
 4018f84:	1001703a 	wrctl	status,r2
  
  return context;
 4018f88:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4018f8c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4018f90:	d0bcb917 	ldw	r2,-3356(gp)
      
      current_nticks = alt_nticks();
 4018f94:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4018f98:	e0fffd17 	ldw	r3,-12(fp)
 4018f9c:	e0bff617 	ldw	r2,-40(fp)
 4018fa0:	1885883a 	add	r2,r3,r2
 4018fa4:	10c00044 	addi	r3,r2,1
 4018fa8:	e0bffc17 	ldw	r2,-16(fp)
 4018fac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4018fb0:	e0bffc17 	ldw	r2,-16(fp)
 4018fb4:	10c00217 	ldw	r3,8(r2)
 4018fb8:	e0bff617 	ldw	r2,-40(fp)
 4018fbc:	1880042e 	bgeu	r3,r2,4018fd0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4018fc0:	e0bffc17 	ldw	r2,-16(fp)
 4018fc4:	00c00044 	movi	r3,1
 4018fc8:	10c00405 	stb	r3,16(r2)
 4018fcc:	00000206 	br	4018fd8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4018fd0:	e0bffc17 	ldw	r2,-16(fp)
 4018fd4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4018fd8:	e0bffc17 	ldw	r2,-16(fp)
 4018fdc:	d0e02704 	addi	r3,gp,-32612
 4018fe0:	e0fffa15 	stw	r3,-24(fp)
 4018fe4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4018fe8:	e0bffb17 	ldw	r2,-20(fp)
 4018fec:	e0fffa17 	ldw	r3,-24(fp)
 4018ff0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4018ff4:	e0bffa17 	ldw	r2,-24(fp)
 4018ff8:	10c00017 	ldw	r3,0(r2)
 4018ffc:	e0bffb17 	ldw	r2,-20(fp)
 4019000:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4019004:	e0bffa17 	ldw	r2,-24(fp)
 4019008:	10800017 	ldw	r2,0(r2)
 401900c:	e0fffb17 	ldw	r3,-20(fp)
 4019010:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4019014:	e0bffa17 	ldw	r2,-24(fp)
 4019018:	e0fffb17 	ldw	r3,-20(fp)
 401901c:	10c00015 	stw	r3,0(r2)
 4019020:	e0bff817 	ldw	r2,-32(fp)
 4019024:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019028:	e0bff717 	ldw	r2,-36(fp)
 401902c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4019030:	0005883a 	mov	r2,zero
 4019034:	00000306 	br	4019044 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4019038:	00bffa84 	movi	r2,-22
 401903c:	00000106 	br	4019044 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4019040:	00bfde84 	movi	r2,-134
  }
}
 4019044:	e037883a 	mov	sp,fp
 4019048:	df000017 	ldw	fp,0(sp)
 401904c:	dec00104 	addi	sp,sp,4
 4019050:	f800283a 	ret

04019054 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4019054:	defffa04 	addi	sp,sp,-24
 4019058:	dfc00515 	stw	ra,20(sp)
 401905c:	df000415 	stw	fp,16(sp)
 4019060:	df000404 	addi	fp,sp,16
 4019064:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4019068:	008000c4 	movi	r2,3
 401906c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4019070:	e0fffd17 	ldw	r3,-12(fp)
 4019074:	008003f4 	movhi	r2,15
 4019078:	10909004 	addi	r2,r2,16960
 401907c:	1885383a 	mul	r2,r3,r2
 4019080:	100b883a 	mov	r5,r2
 4019084:	0100bef4 	movhi	r4,763
 4019088:	213c2004 	addi	r4,r4,-3968
 401908c:	400a3b80 	call	400a3b8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4019090:	100b883a 	mov	r5,r2
 4019094:	01200034 	movhi	r4,32768
 4019098:	213fffc4 	addi	r4,r4,-1
 401909c:	400a3b80 	call	400a3b8 <__udivsi3>
 40190a0:	100b883a 	mov	r5,r2
 40190a4:	e13fff17 	ldw	r4,-4(fp)
 40190a8:	400a3b80 	call	400a3b8 <__udivsi3>
 40190ac:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 40190b0:	e0bffe17 	ldw	r2,-8(fp)
 40190b4:	10002a26 	beq	r2,zero,4019160 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 40190b8:	e03ffc15 	stw	zero,-16(fp)
 40190bc:	00001706 	br	401911c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40190c0:	00a00034 	movhi	r2,32768
 40190c4:	10bfffc4 	addi	r2,r2,-1
 40190c8:	10bfffc4 	addi	r2,r2,-1
 40190cc:	103ffe1e 	bne	r2,zero,40190c8 <__alt_data_end+0xfc0190c8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40190d0:	e0fffd17 	ldw	r3,-12(fp)
 40190d4:	008003f4 	movhi	r2,15
 40190d8:	10909004 	addi	r2,r2,16960
 40190dc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40190e0:	100b883a 	mov	r5,r2
 40190e4:	0100bef4 	movhi	r4,763
 40190e8:	213c2004 	addi	r4,r4,-3968
 40190ec:	400a3b80 	call	400a3b8 <__udivsi3>
 40190f0:	100b883a 	mov	r5,r2
 40190f4:	01200034 	movhi	r4,32768
 40190f8:	213fffc4 	addi	r4,r4,-1
 40190fc:	400a3b80 	call	400a3b8 <__udivsi3>
 4019100:	1007883a 	mov	r3,r2
 4019104:	e0bfff17 	ldw	r2,-4(fp)
 4019108:	10c5c83a 	sub	r2,r2,r3
 401910c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4019110:	e0bffc17 	ldw	r2,-16(fp)
 4019114:	10800044 	addi	r2,r2,1
 4019118:	e0bffc15 	stw	r2,-16(fp)
 401911c:	e0fffc17 	ldw	r3,-16(fp)
 4019120:	e0bffe17 	ldw	r2,-8(fp)
 4019124:	18bfe616 	blt	r3,r2,40190c0 <__alt_data_end+0xfc0190c0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4019128:	e0fffd17 	ldw	r3,-12(fp)
 401912c:	008003f4 	movhi	r2,15
 4019130:	10909004 	addi	r2,r2,16960
 4019134:	1885383a 	mul	r2,r3,r2
 4019138:	100b883a 	mov	r5,r2
 401913c:	0100bef4 	movhi	r4,763
 4019140:	213c2004 	addi	r4,r4,-3968
 4019144:	400a3b80 	call	400a3b8 <__udivsi3>
 4019148:	1007883a 	mov	r3,r2
 401914c:	e0bfff17 	ldw	r2,-4(fp)
 4019150:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4019154:	10bfffc4 	addi	r2,r2,-1
 4019158:	103ffe1e 	bne	r2,zero,4019154 <__alt_data_end+0xfc019154>
 401915c:	00000d06 	br	4019194 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4019160:	e0fffd17 	ldw	r3,-12(fp)
 4019164:	008003f4 	movhi	r2,15
 4019168:	10909004 	addi	r2,r2,16960
 401916c:	1885383a 	mul	r2,r3,r2
 4019170:	100b883a 	mov	r5,r2
 4019174:	0100bef4 	movhi	r4,763
 4019178:	213c2004 	addi	r4,r4,-3968
 401917c:	400a3b80 	call	400a3b8 <__udivsi3>
 4019180:	1007883a 	mov	r3,r2
 4019184:	e0bfff17 	ldw	r2,-4(fp)
 4019188:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401918c:	10bfffc4 	addi	r2,r2,-1
 4019190:	00bffe16 	blt	zero,r2,401918c <__alt_data_end+0xfc01918c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4019194:	0005883a 	mov	r2,zero
}
 4019198:	e037883a 	mov	sp,fp
 401919c:	dfc00117 	ldw	ra,4(sp)
 40191a0:	df000017 	ldw	fp,0(sp)
 40191a4:	dec00204 	addi	sp,sp,8
 40191a8:	f800283a 	ret

040191ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40191ac:	defffe04 	addi	sp,sp,-8
 40191b0:	df000115 	stw	fp,4(sp)
 40191b4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40191b8:	e03fff15 	stw	zero,-4(fp)
 40191bc:	00000506 	br	40191d4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 40191c0:	e0bfff17 	ldw	r2,-4(fp)
 40191c4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40191c8:	e0bfff17 	ldw	r2,-4(fp)
 40191cc:	10800804 	addi	r2,r2,32
 40191d0:	e0bfff15 	stw	r2,-4(fp)
 40191d4:	e0bfff17 	ldw	r2,-4(fp)
 40191d8:	10820030 	cmpltui	r2,r2,2048
 40191dc:	103ff81e 	bne	r2,zero,40191c0 <__alt_data_end+0xfc0191c0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40191e0:	0001883a 	nop
 40191e4:	e037883a 	mov	sp,fp
 40191e8:	df000017 	ldw	fp,0(sp)
 40191ec:	dec00104 	addi	sp,sp,4
 40191f0:	f800283a 	ret

040191f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40191f4:	defffe04 	addi	sp,sp,-8
 40191f8:	dfc00115 	stw	ra,4(sp)
 40191fc:	df000015 	stw	fp,0(sp)
 4019200:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4019204:	d0a02417 	ldw	r2,-32624(gp)
 4019208:	10000326 	beq	r2,zero,4019218 <alt_get_errno+0x24>
 401920c:	d0a02417 	ldw	r2,-32624(gp)
 4019210:	103ee83a 	callr	r2
 4019214:	00000106 	br	401921c <alt_get_errno+0x28>
 4019218:	d0bcb004 	addi	r2,gp,-3392
}
 401921c:	e037883a 	mov	sp,fp
 4019220:	dfc00117 	ldw	ra,4(sp)
 4019224:	df000017 	ldw	fp,0(sp)
 4019228:	dec00204 	addi	sp,sp,8
 401922c:	f800283a 	ret

04019230 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4019230:	defffa04 	addi	sp,sp,-24
 4019234:	dfc00515 	stw	ra,20(sp)
 4019238:	df000415 	stw	fp,16(sp)
 401923c:	df000404 	addi	fp,sp,16
 4019240:	e13ffe15 	stw	r4,-8(fp)
 4019244:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4019248:	e0bffe17 	ldw	r2,-8(fp)
 401924c:	10000326 	beq	r2,zero,401925c <alt_dev_llist_insert+0x2c>
 4019250:	e0bffe17 	ldw	r2,-8(fp)
 4019254:	10800217 	ldw	r2,8(r2)
 4019258:	1000061e 	bne	r2,zero,4019274 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 401925c:	40191f40 	call	40191f4 <alt_get_errno>
 4019260:	1007883a 	mov	r3,r2
 4019264:	00800584 	movi	r2,22
 4019268:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 401926c:	00bffa84 	movi	r2,-22
 4019270:	00001306 	br	40192c0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4019274:	e0bffe17 	ldw	r2,-8(fp)
 4019278:	e0ffff17 	ldw	r3,-4(fp)
 401927c:	e0fffc15 	stw	r3,-16(fp)
 4019280:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4019284:	e0bffd17 	ldw	r2,-12(fp)
 4019288:	e0fffc17 	ldw	r3,-16(fp)
 401928c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4019290:	e0bffc17 	ldw	r2,-16(fp)
 4019294:	10c00017 	ldw	r3,0(r2)
 4019298:	e0bffd17 	ldw	r2,-12(fp)
 401929c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40192a0:	e0bffc17 	ldw	r2,-16(fp)
 40192a4:	10800017 	ldw	r2,0(r2)
 40192a8:	e0fffd17 	ldw	r3,-12(fp)
 40192ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40192b0:	e0bffc17 	ldw	r2,-16(fp)
 40192b4:	e0fffd17 	ldw	r3,-12(fp)
 40192b8:	10c00015 	stw	r3,0(r2)

  return 0;  
 40192bc:	0005883a 	mov	r2,zero
}
 40192c0:	e037883a 	mov	sp,fp
 40192c4:	dfc00117 	ldw	ra,4(sp)
 40192c8:	df000017 	ldw	fp,0(sp)
 40192cc:	dec00204 	addi	sp,sp,8
 40192d0:	f800283a 	ret

040192d4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40192d4:	defffd04 	addi	sp,sp,-12
 40192d8:	dfc00215 	stw	ra,8(sp)
 40192dc:	df000115 	stw	fp,4(sp)
 40192e0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40192e4:	008100b4 	movhi	r2,1026
 40192e8:	10a8a104 	addi	r2,r2,-23932
 40192ec:	e0bfff15 	stw	r2,-4(fp)
 40192f0:	00000606 	br	401930c <_do_ctors+0x38>
        (*ctor) (); 
 40192f4:	e0bfff17 	ldw	r2,-4(fp)
 40192f8:	10800017 	ldw	r2,0(r2)
 40192fc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4019300:	e0bfff17 	ldw	r2,-4(fp)
 4019304:	10bfff04 	addi	r2,r2,-4
 4019308:	e0bfff15 	stw	r2,-4(fp)
 401930c:	e0ffff17 	ldw	r3,-4(fp)
 4019310:	008100b4 	movhi	r2,1026
 4019314:	10a89644 	addi	r2,r2,-23975
 4019318:	18bff62e 	bgeu	r3,r2,40192f4 <__alt_data_end+0xfc0192f4>
        (*ctor) (); 
}
 401931c:	0001883a 	nop
 4019320:	e037883a 	mov	sp,fp
 4019324:	dfc00117 	ldw	ra,4(sp)
 4019328:	df000017 	ldw	fp,0(sp)
 401932c:	dec00204 	addi	sp,sp,8
 4019330:	f800283a 	ret

04019334 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4019334:	defffd04 	addi	sp,sp,-12
 4019338:	dfc00215 	stw	ra,8(sp)
 401933c:	df000115 	stw	fp,4(sp)
 4019340:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4019344:	008100b4 	movhi	r2,1026
 4019348:	10a8a104 	addi	r2,r2,-23932
 401934c:	e0bfff15 	stw	r2,-4(fp)
 4019350:	00000606 	br	401936c <_do_dtors+0x38>
        (*dtor) (); 
 4019354:	e0bfff17 	ldw	r2,-4(fp)
 4019358:	10800017 	ldw	r2,0(r2)
 401935c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4019360:	e0bfff17 	ldw	r2,-4(fp)
 4019364:	10bfff04 	addi	r2,r2,-4
 4019368:	e0bfff15 	stw	r2,-4(fp)
 401936c:	e0ffff17 	ldw	r3,-4(fp)
 4019370:	008100b4 	movhi	r2,1026
 4019374:	10a8a204 	addi	r2,r2,-23928
 4019378:	18bff62e 	bgeu	r3,r2,4019354 <__alt_data_end+0xfc019354>
        (*dtor) (); 
}
 401937c:	0001883a 	nop
 4019380:	e037883a 	mov	sp,fp
 4019384:	dfc00117 	ldw	ra,4(sp)
 4019388:	df000017 	ldw	fp,0(sp)
 401938c:	dec00204 	addi	sp,sp,8
 4019390:	f800283a 	ret

04019394 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4019394:	defffe04 	addi	sp,sp,-8
 4019398:	dfc00115 	stw	ra,4(sp)
 401939c:	df000015 	stw	fp,0(sp)
 40193a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 40193a4:	01440004 	movi	r5,4096
 40193a8:	0009883a 	mov	r4,zero
 40193ac:	4019e000 	call	4019e00 <alt_icache_flush>
#endif
}
 40193b0:	0001883a 	nop
 40193b4:	e037883a 	mov	sp,fp
 40193b8:	dfc00117 	ldw	ra,4(sp)
 40193bc:	df000017 	ldw	fp,0(sp)
 40193c0:	dec00204 	addi	sp,sp,8
 40193c4:	f800283a 	ret

040193c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40193c8:	defff904 	addi	sp,sp,-28
 40193cc:	dfc00615 	stw	ra,24(sp)
 40193d0:	df000515 	stw	fp,20(sp)
 40193d4:	df000504 	addi	fp,sp,20
 40193d8:	e13ffc15 	stw	r4,-16(fp)
 40193dc:	e17ffd15 	stw	r5,-12(fp)
 40193e0:	e1bffe15 	stw	r6,-8(fp)
 40193e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40193e8:	e0800217 	ldw	r2,8(fp)
 40193ec:	d8800015 	stw	r2,0(sp)
 40193f0:	e1ffff17 	ldw	r7,-4(fp)
 40193f4:	e1bffe17 	ldw	r6,-8(fp)
 40193f8:	e17ffd17 	ldw	r5,-12(fp)
 40193fc:	e13ffc17 	ldw	r4,-16(fp)
 4019400:	40195780 	call	4019578 <alt_iic_isr_register>
}  
 4019404:	e037883a 	mov	sp,fp
 4019408:	dfc00117 	ldw	ra,4(sp)
 401940c:	df000017 	ldw	fp,0(sp)
 4019410:	dec00204 	addi	sp,sp,8
 4019414:	f800283a 	ret

04019418 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4019418:	defff904 	addi	sp,sp,-28
 401941c:	df000615 	stw	fp,24(sp)
 4019420:	df000604 	addi	fp,sp,24
 4019424:	e13ffe15 	stw	r4,-8(fp)
 4019428:	e17fff15 	stw	r5,-4(fp)
 401942c:	e0bfff17 	ldw	r2,-4(fp)
 4019430:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019434:	0005303a 	rdctl	r2,status
 4019438:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401943c:	e0fffb17 	ldw	r3,-20(fp)
 4019440:	00bfff84 	movi	r2,-2
 4019444:	1884703a 	and	r2,r3,r2
 4019448:	1001703a 	wrctl	status,r2
  
  return context;
 401944c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4019450:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4019454:	00c00044 	movi	r3,1
 4019458:	e0bffa17 	ldw	r2,-24(fp)
 401945c:	1884983a 	sll	r2,r3,r2
 4019460:	1007883a 	mov	r3,r2
 4019464:	d0bcb717 	ldw	r2,-3364(gp)
 4019468:	1884b03a 	or	r2,r3,r2
 401946c:	d0bcb715 	stw	r2,-3364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4019470:	d0bcb717 	ldw	r2,-3364(gp)
 4019474:	100170fa 	wrctl	ienable,r2
 4019478:	e0bffc17 	ldw	r2,-16(fp)
 401947c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019480:	e0bffd17 	ldw	r2,-12(fp)
 4019484:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4019488:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401948c:	0001883a 	nop
}
 4019490:	e037883a 	mov	sp,fp
 4019494:	df000017 	ldw	fp,0(sp)
 4019498:	dec00104 	addi	sp,sp,4
 401949c:	f800283a 	ret

040194a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40194a0:	defff904 	addi	sp,sp,-28
 40194a4:	df000615 	stw	fp,24(sp)
 40194a8:	df000604 	addi	fp,sp,24
 40194ac:	e13ffe15 	stw	r4,-8(fp)
 40194b0:	e17fff15 	stw	r5,-4(fp)
 40194b4:	e0bfff17 	ldw	r2,-4(fp)
 40194b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40194bc:	0005303a 	rdctl	r2,status
 40194c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40194c4:	e0fffb17 	ldw	r3,-20(fp)
 40194c8:	00bfff84 	movi	r2,-2
 40194cc:	1884703a 	and	r2,r3,r2
 40194d0:	1001703a 	wrctl	status,r2
  
  return context;
 40194d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40194d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40194dc:	00c00044 	movi	r3,1
 40194e0:	e0bffa17 	ldw	r2,-24(fp)
 40194e4:	1884983a 	sll	r2,r3,r2
 40194e8:	0084303a 	nor	r2,zero,r2
 40194ec:	1007883a 	mov	r3,r2
 40194f0:	d0bcb717 	ldw	r2,-3364(gp)
 40194f4:	1884703a 	and	r2,r3,r2
 40194f8:	d0bcb715 	stw	r2,-3364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40194fc:	d0bcb717 	ldw	r2,-3364(gp)
 4019500:	100170fa 	wrctl	ienable,r2
 4019504:	e0bffc17 	ldw	r2,-16(fp)
 4019508:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401950c:	e0bffd17 	ldw	r2,-12(fp)
 4019510:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4019514:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4019518:	0001883a 	nop
}
 401951c:	e037883a 	mov	sp,fp
 4019520:	df000017 	ldw	fp,0(sp)
 4019524:	dec00104 	addi	sp,sp,4
 4019528:	f800283a 	ret

0401952c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401952c:	defffc04 	addi	sp,sp,-16
 4019530:	df000315 	stw	fp,12(sp)
 4019534:	df000304 	addi	fp,sp,12
 4019538:	e13ffe15 	stw	r4,-8(fp)
 401953c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4019540:	000530fa 	rdctl	r2,ienable
 4019544:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4019548:	00c00044 	movi	r3,1
 401954c:	e0bfff17 	ldw	r2,-4(fp)
 4019550:	1884983a 	sll	r2,r3,r2
 4019554:	1007883a 	mov	r3,r2
 4019558:	e0bffd17 	ldw	r2,-12(fp)
 401955c:	1884703a 	and	r2,r3,r2
 4019560:	1004c03a 	cmpne	r2,r2,zero
 4019564:	10803fcc 	andi	r2,r2,255
}
 4019568:	e037883a 	mov	sp,fp
 401956c:	df000017 	ldw	fp,0(sp)
 4019570:	dec00104 	addi	sp,sp,4
 4019574:	f800283a 	ret

04019578 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4019578:	defff504 	addi	sp,sp,-44
 401957c:	dfc00a15 	stw	ra,40(sp)
 4019580:	df000915 	stw	fp,36(sp)
 4019584:	df000904 	addi	fp,sp,36
 4019588:	e13ffc15 	stw	r4,-16(fp)
 401958c:	e17ffd15 	stw	r5,-12(fp)
 4019590:	e1bffe15 	stw	r6,-8(fp)
 4019594:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4019598:	00bffa84 	movi	r2,-22
 401959c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40195a0:	e0bffd17 	ldw	r2,-12(fp)
 40195a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40195a8:	e0bff817 	ldw	r2,-32(fp)
 40195ac:	10800808 	cmpgei	r2,r2,32
 40195b0:	1000271e 	bne	r2,zero,4019650 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40195b4:	0005303a 	rdctl	r2,status
 40195b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40195bc:	e0fffb17 	ldw	r3,-20(fp)
 40195c0:	00bfff84 	movi	r2,-2
 40195c4:	1884703a 	and	r2,r3,r2
 40195c8:	1001703a 	wrctl	status,r2
  
  return context;
 40195cc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40195d0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40195d4:	008100f4 	movhi	r2,1027
 40195d8:	10a3c304 	addi	r2,r2,-28916
 40195dc:	e0fff817 	ldw	r3,-32(fp)
 40195e0:	180690fa 	slli	r3,r3,3
 40195e4:	10c5883a 	add	r2,r2,r3
 40195e8:	e0fffe17 	ldw	r3,-8(fp)
 40195ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40195f0:	008100f4 	movhi	r2,1027
 40195f4:	10a3c304 	addi	r2,r2,-28916
 40195f8:	e0fff817 	ldw	r3,-32(fp)
 40195fc:	180690fa 	slli	r3,r3,3
 4019600:	10c5883a 	add	r2,r2,r3
 4019604:	10800104 	addi	r2,r2,4
 4019608:	e0ffff17 	ldw	r3,-4(fp)
 401960c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4019610:	e0bffe17 	ldw	r2,-8(fp)
 4019614:	10000526 	beq	r2,zero,401962c <alt_iic_isr_register+0xb4>
 4019618:	e0bff817 	ldw	r2,-32(fp)
 401961c:	100b883a 	mov	r5,r2
 4019620:	e13ffc17 	ldw	r4,-16(fp)
 4019624:	40194180 	call	4019418 <alt_ic_irq_enable>
 4019628:	00000406 	br	401963c <alt_iic_isr_register+0xc4>
 401962c:	e0bff817 	ldw	r2,-32(fp)
 4019630:	100b883a 	mov	r5,r2
 4019634:	e13ffc17 	ldw	r4,-16(fp)
 4019638:	40194a00 	call	40194a0 <alt_ic_irq_disable>
 401963c:	e0bff715 	stw	r2,-36(fp)
 4019640:	e0bffa17 	ldw	r2,-24(fp)
 4019644:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019648:	e0bff917 	ldw	r2,-28(fp)
 401964c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4019650:	e0bff717 	ldw	r2,-36(fp)
}
 4019654:	e037883a 	mov	sp,fp
 4019658:	dfc00117 	ldw	ra,4(sp)
 401965c:	df000017 	ldw	fp,0(sp)
 4019660:	dec00204 	addi	sp,sp,8
 4019664:	f800283a 	ret

04019668 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4019668:	defff904 	addi	sp,sp,-28
 401966c:	dfc00615 	stw	ra,24(sp)
 4019670:	df000515 	stw	fp,20(sp)
 4019674:	df000504 	addi	fp,sp,20
 4019678:	e13ffc15 	stw	r4,-16(fp)
 401967c:	e17ffd15 	stw	r5,-12(fp)
 4019680:	e1bffe15 	stw	r6,-8(fp)
 4019684:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4019688:	e1bfff17 	ldw	r6,-4(fp)
 401968c:	e17ffe17 	ldw	r5,-8(fp)
 4019690:	e13ffd17 	ldw	r4,-12(fp)
 4019694:	40198a80 	call	40198a8 <open>
 4019698:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 401969c:	e0bffb17 	ldw	r2,-20(fp)
 40196a0:	10001c16 	blt	r2,zero,4019714 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 40196a4:	008100b4 	movhi	r2,1026
 40196a8:	10825704 	addi	r2,r2,2396
 40196ac:	e0fffb17 	ldw	r3,-20(fp)
 40196b0:	18c00324 	muli	r3,r3,12
 40196b4:	10c5883a 	add	r2,r2,r3
 40196b8:	10c00017 	ldw	r3,0(r2)
 40196bc:	e0bffc17 	ldw	r2,-16(fp)
 40196c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40196c4:	008100b4 	movhi	r2,1026
 40196c8:	10825704 	addi	r2,r2,2396
 40196cc:	e0fffb17 	ldw	r3,-20(fp)
 40196d0:	18c00324 	muli	r3,r3,12
 40196d4:	10c5883a 	add	r2,r2,r3
 40196d8:	10800104 	addi	r2,r2,4
 40196dc:	10c00017 	ldw	r3,0(r2)
 40196e0:	e0bffc17 	ldw	r2,-16(fp)
 40196e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40196e8:	008100b4 	movhi	r2,1026
 40196ec:	10825704 	addi	r2,r2,2396
 40196f0:	e0fffb17 	ldw	r3,-20(fp)
 40196f4:	18c00324 	muli	r3,r3,12
 40196f8:	10c5883a 	add	r2,r2,r3
 40196fc:	10800204 	addi	r2,r2,8
 4019700:	10c00017 	ldw	r3,0(r2)
 4019704:	e0bffc17 	ldw	r2,-16(fp)
 4019708:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401970c:	e13ffb17 	ldw	r4,-20(fp)
 4019710:	4017dd00 	call	4017dd0 <alt_release_fd>
  }
} 
 4019714:	0001883a 	nop
 4019718:	e037883a 	mov	sp,fp
 401971c:	dfc00117 	ldw	ra,4(sp)
 4019720:	df000017 	ldw	fp,0(sp)
 4019724:	dec00204 	addi	sp,sp,8
 4019728:	f800283a 	ret

0401972c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401972c:	defffb04 	addi	sp,sp,-20
 4019730:	dfc00415 	stw	ra,16(sp)
 4019734:	df000315 	stw	fp,12(sp)
 4019738:	df000304 	addi	fp,sp,12
 401973c:	e13ffd15 	stw	r4,-12(fp)
 4019740:	e17ffe15 	stw	r5,-8(fp)
 4019744:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4019748:	01c07fc4 	movi	r7,511
 401974c:	01800044 	movi	r6,1
 4019750:	e17ffd17 	ldw	r5,-12(fp)
 4019754:	010100b4 	movhi	r4,1026
 4019758:	21025a04 	addi	r4,r4,2408
 401975c:	40196680 	call	4019668 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4019760:	01c07fc4 	movi	r7,511
 4019764:	000d883a 	mov	r6,zero
 4019768:	e17ffe17 	ldw	r5,-8(fp)
 401976c:	010100b4 	movhi	r4,1026
 4019770:	21025704 	addi	r4,r4,2396
 4019774:	40196680 	call	4019668 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4019778:	01c07fc4 	movi	r7,511
 401977c:	01800044 	movi	r6,1
 4019780:	e17fff17 	ldw	r5,-4(fp)
 4019784:	010100b4 	movhi	r4,1026
 4019788:	21025d04 	addi	r4,r4,2420
 401978c:	40196680 	call	4019668 <alt_open_fd>
}  
 4019790:	0001883a 	nop
 4019794:	e037883a 	mov	sp,fp
 4019798:	dfc00117 	ldw	ra,4(sp)
 401979c:	df000017 	ldw	fp,0(sp)
 40197a0:	dec00204 	addi	sp,sp,8
 40197a4:	f800283a 	ret

040197a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40197a8:	defffe04 	addi	sp,sp,-8
 40197ac:	dfc00115 	stw	ra,4(sp)
 40197b0:	df000015 	stw	fp,0(sp)
 40197b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40197b8:	d0a02417 	ldw	r2,-32624(gp)
 40197bc:	10000326 	beq	r2,zero,40197cc <alt_get_errno+0x24>
 40197c0:	d0a02417 	ldw	r2,-32624(gp)
 40197c4:	103ee83a 	callr	r2
 40197c8:	00000106 	br	40197d0 <alt_get_errno+0x28>
 40197cc:	d0bcb004 	addi	r2,gp,-3392
}
 40197d0:	e037883a 	mov	sp,fp
 40197d4:	dfc00117 	ldw	ra,4(sp)
 40197d8:	df000017 	ldw	fp,0(sp)
 40197dc:	dec00204 	addi	sp,sp,8
 40197e0:	f800283a 	ret

040197e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40197e4:	defffd04 	addi	sp,sp,-12
 40197e8:	df000215 	stw	fp,8(sp)
 40197ec:	df000204 	addi	fp,sp,8
 40197f0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40197f4:	e0bfff17 	ldw	r2,-4(fp)
 40197f8:	10800217 	ldw	r2,8(r2)
 40197fc:	10d00034 	orhi	r3,r2,16384
 4019800:	e0bfff17 	ldw	r2,-4(fp)
 4019804:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4019808:	e03ffe15 	stw	zero,-8(fp)
 401980c:	00001d06 	br	4019884 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4019810:	008100b4 	movhi	r2,1026
 4019814:	10825704 	addi	r2,r2,2396
 4019818:	e0fffe17 	ldw	r3,-8(fp)
 401981c:	18c00324 	muli	r3,r3,12
 4019820:	10c5883a 	add	r2,r2,r3
 4019824:	10c00017 	ldw	r3,0(r2)
 4019828:	e0bfff17 	ldw	r2,-4(fp)
 401982c:	10800017 	ldw	r2,0(r2)
 4019830:	1880111e 	bne	r3,r2,4019878 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4019834:	008100b4 	movhi	r2,1026
 4019838:	10825704 	addi	r2,r2,2396
 401983c:	e0fffe17 	ldw	r3,-8(fp)
 4019840:	18c00324 	muli	r3,r3,12
 4019844:	10c5883a 	add	r2,r2,r3
 4019848:	10800204 	addi	r2,r2,8
 401984c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4019850:	1000090e 	bge	r2,zero,4019878 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4019854:	e0bffe17 	ldw	r2,-8(fp)
 4019858:	10c00324 	muli	r3,r2,12
 401985c:	008100b4 	movhi	r2,1026
 4019860:	10825704 	addi	r2,r2,2396
 4019864:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4019868:	e0bfff17 	ldw	r2,-4(fp)
 401986c:	18800226 	beq	r3,r2,4019878 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4019870:	00bffcc4 	movi	r2,-13
 4019874:	00000806 	br	4019898 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4019878:	e0bffe17 	ldw	r2,-8(fp)
 401987c:	10800044 	addi	r2,r2,1
 4019880:	e0bffe15 	stw	r2,-8(fp)
 4019884:	d0a02317 	ldw	r2,-32628(gp)
 4019888:	1007883a 	mov	r3,r2
 401988c:	e0bffe17 	ldw	r2,-8(fp)
 4019890:	18bfdf2e 	bgeu	r3,r2,4019810 <__alt_data_end+0xfc019810>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4019894:	0005883a 	mov	r2,zero
}
 4019898:	e037883a 	mov	sp,fp
 401989c:	df000017 	ldw	fp,0(sp)
 40198a0:	dec00104 	addi	sp,sp,4
 40198a4:	f800283a 	ret

040198a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40198a8:	defff604 	addi	sp,sp,-40
 40198ac:	dfc00915 	stw	ra,36(sp)
 40198b0:	df000815 	stw	fp,32(sp)
 40198b4:	df000804 	addi	fp,sp,32
 40198b8:	e13ffd15 	stw	r4,-12(fp)
 40198bc:	e17ffe15 	stw	r5,-8(fp)
 40198c0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40198c4:	00bfffc4 	movi	r2,-1
 40198c8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40198cc:	00bffb44 	movi	r2,-19
 40198d0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40198d4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40198d8:	d1602104 	addi	r5,gp,-32636
 40198dc:	e13ffd17 	ldw	r4,-12(fp)
 40198e0:	4019bc40 	call	4019bc4 <alt_find_dev>
 40198e4:	e0bff815 	stw	r2,-32(fp)
 40198e8:	e0bff817 	ldw	r2,-32(fp)
 40198ec:	1000051e 	bne	r2,zero,4019904 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40198f0:	e13ffd17 	ldw	r4,-12(fp)
 40198f4:	4019c540 	call	4019c54 <alt_find_file>
 40198f8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40198fc:	00800044 	movi	r2,1
 4019900:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4019904:	e0bff817 	ldw	r2,-32(fp)
 4019908:	10002926 	beq	r2,zero,40199b0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401990c:	e13ff817 	ldw	r4,-32(fp)
 4019910:	4019d5c0 	call	4019d5c <alt_get_fd>
 4019914:	e0bff915 	stw	r2,-28(fp)
 4019918:	e0bff917 	ldw	r2,-28(fp)
 401991c:	1000030e 	bge	r2,zero,401992c <open+0x84>
    {
      status = index;
 4019920:	e0bff917 	ldw	r2,-28(fp)
 4019924:	e0bffa15 	stw	r2,-24(fp)
 4019928:	00002306 	br	40199b8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 401992c:	e0bff917 	ldw	r2,-28(fp)
 4019930:	10c00324 	muli	r3,r2,12
 4019934:	008100b4 	movhi	r2,1026
 4019938:	10825704 	addi	r2,r2,2396
 401993c:	1885883a 	add	r2,r3,r2
 4019940:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4019944:	e0fffe17 	ldw	r3,-8(fp)
 4019948:	00900034 	movhi	r2,16384
 401994c:	10bfffc4 	addi	r2,r2,-1
 4019950:	1886703a 	and	r3,r3,r2
 4019954:	e0bffc17 	ldw	r2,-16(fp)
 4019958:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401995c:	e0bffb17 	ldw	r2,-20(fp)
 4019960:	1000051e 	bne	r2,zero,4019978 <open+0xd0>
 4019964:	e13ffc17 	ldw	r4,-16(fp)
 4019968:	40197e40 	call	40197e4 <alt_file_locked>
 401996c:	e0bffa15 	stw	r2,-24(fp)
 4019970:	e0bffa17 	ldw	r2,-24(fp)
 4019974:	10001016 	blt	r2,zero,40199b8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4019978:	e0bff817 	ldw	r2,-32(fp)
 401997c:	10800317 	ldw	r2,12(r2)
 4019980:	10000826 	beq	r2,zero,40199a4 <open+0xfc>
 4019984:	e0bff817 	ldw	r2,-32(fp)
 4019988:	10800317 	ldw	r2,12(r2)
 401998c:	e1ffff17 	ldw	r7,-4(fp)
 4019990:	e1bffe17 	ldw	r6,-8(fp)
 4019994:	e17ffd17 	ldw	r5,-12(fp)
 4019998:	e13ffc17 	ldw	r4,-16(fp)
 401999c:	103ee83a 	callr	r2
 40199a0:	00000106 	br	40199a8 <open+0x100>
 40199a4:	0005883a 	mov	r2,zero
 40199a8:	e0bffa15 	stw	r2,-24(fp)
 40199ac:	00000206 	br	40199b8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40199b0:	00bffb44 	movi	r2,-19
 40199b4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40199b8:	e0bffa17 	ldw	r2,-24(fp)
 40199bc:	1000090e 	bge	r2,zero,40199e4 <open+0x13c>
  {
    alt_release_fd (index);  
 40199c0:	e13ff917 	ldw	r4,-28(fp)
 40199c4:	4017dd00 	call	4017dd0 <alt_release_fd>
    ALT_ERRNO = -status;
 40199c8:	40197a80 	call	40197a8 <alt_get_errno>
 40199cc:	1007883a 	mov	r3,r2
 40199d0:	e0bffa17 	ldw	r2,-24(fp)
 40199d4:	0085c83a 	sub	r2,zero,r2
 40199d8:	18800015 	stw	r2,0(r3)
    return -1;
 40199dc:	00bfffc4 	movi	r2,-1
 40199e0:	00000106 	br	40199e8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 40199e4:	e0bff917 	ldw	r2,-28(fp)
}
 40199e8:	e037883a 	mov	sp,fp
 40199ec:	dfc00117 	ldw	ra,4(sp)
 40199f0:	df000017 	ldw	fp,0(sp)
 40199f4:	dec00204 	addi	sp,sp,8
 40199f8:	f800283a 	ret

040199fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40199fc:	defffa04 	addi	sp,sp,-24
 4019a00:	df000515 	stw	fp,20(sp)
 4019a04:	df000504 	addi	fp,sp,20
 4019a08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019a0c:	0005303a 	rdctl	r2,status
 4019a10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019a14:	e0fffc17 	ldw	r3,-16(fp)
 4019a18:	00bfff84 	movi	r2,-2
 4019a1c:	1884703a 	and	r2,r3,r2
 4019a20:	1001703a 	wrctl	status,r2
  
  return context;
 4019a24:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4019a28:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4019a2c:	e0bfff17 	ldw	r2,-4(fp)
 4019a30:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4019a34:	e0bffd17 	ldw	r2,-12(fp)
 4019a38:	10800017 	ldw	r2,0(r2)
 4019a3c:	e0fffd17 	ldw	r3,-12(fp)
 4019a40:	18c00117 	ldw	r3,4(r3)
 4019a44:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4019a48:	e0bffd17 	ldw	r2,-12(fp)
 4019a4c:	10800117 	ldw	r2,4(r2)
 4019a50:	e0fffd17 	ldw	r3,-12(fp)
 4019a54:	18c00017 	ldw	r3,0(r3)
 4019a58:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4019a5c:	e0bffd17 	ldw	r2,-12(fp)
 4019a60:	e0fffd17 	ldw	r3,-12(fp)
 4019a64:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4019a68:	e0bffd17 	ldw	r2,-12(fp)
 4019a6c:	e0fffd17 	ldw	r3,-12(fp)
 4019a70:	10c00015 	stw	r3,0(r2)
 4019a74:	e0bffb17 	ldw	r2,-20(fp)
 4019a78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019a7c:	e0bffe17 	ldw	r2,-8(fp)
 4019a80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4019a84:	0001883a 	nop
 4019a88:	e037883a 	mov	sp,fp
 4019a8c:	df000017 	ldw	fp,0(sp)
 4019a90:	dec00104 	addi	sp,sp,4
 4019a94:	f800283a 	ret

04019a98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4019a98:	defffb04 	addi	sp,sp,-20
 4019a9c:	dfc00415 	stw	ra,16(sp)
 4019aa0:	df000315 	stw	fp,12(sp)
 4019aa4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4019aa8:	d0a02717 	ldw	r2,-32612(gp)
 4019aac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4019ab0:	d0bcb917 	ldw	r2,-3356(gp)
 4019ab4:	10800044 	addi	r2,r2,1
 4019ab8:	d0bcb915 	stw	r2,-3356(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4019abc:	00002e06 	br	4019b78 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4019ac0:	e0bffd17 	ldw	r2,-12(fp)
 4019ac4:	10800017 	ldw	r2,0(r2)
 4019ac8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4019acc:	e0bffd17 	ldw	r2,-12(fp)
 4019ad0:	10800403 	ldbu	r2,16(r2)
 4019ad4:	10803fcc 	andi	r2,r2,255
 4019ad8:	10000426 	beq	r2,zero,4019aec <alt_tick+0x54>
 4019adc:	d0bcb917 	ldw	r2,-3356(gp)
 4019ae0:	1000021e 	bne	r2,zero,4019aec <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4019ae4:	e0bffd17 	ldw	r2,-12(fp)
 4019ae8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4019aec:	e0bffd17 	ldw	r2,-12(fp)
 4019af0:	10800217 	ldw	r2,8(r2)
 4019af4:	d0fcb917 	ldw	r3,-3356(gp)
 4019af8:	18801d36 	bltu	r3,r2,4019b70 <alt_tick+0xd8>
 4019afc:	e0bffd17 	ldw	r2,-12(fp)
 4019b00:	10800403 	ldbu	r2,16(r2)
 4019b04:	10803fcc 	andi	r2,r2,255
 4019b08:	1000191e 	bne	r2,zero,4019b70 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4019b0c:	e0bffd17 	ldw	r2,-12(fp)
 4019b10:	10800317 	ldw	r2,12(r2)
 4019b14:	e0fffd17 	ldw	r3,-12(fp)
 4019b18:	18c00517 	ldw	r3,20(r3)
 4019b1c:	1809883a 	mov	r4,r3
 4019b20:	103ee83a 	callr	r2
 4019b24:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4019b28:	e0bfff17 	ldw	r2,-4(fp)
 4019b2c:	1000031e 	bne	r2,zero,4019b3c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4019b30:	e13ffd17 	ldw	r4,-12(fp)
 4019b34:	40199fc0 	call	40199fc <alt_alarm_stop>
 4019b38:	00000d06 	br	4019b70 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4019b3c:	e0bffd17 	ldw	r2,-12(fp)
 4019b40:	10c00217 	ldw	r3,8(r2)
 4019b44:	e0bfff17 	ldw	r2,-4(fp)
 4019b48:	1887883a 	add	r3,r3,r2
 4019b4c:	e0bffd17 	ldw	r2,-12(fp)
 4019b50:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4019b54:	e0bffd17 	ldw	r2,-12(fp)
 4019b58:	10c00217 	ldw	r3,8(r2)
 4019b5c:	d0bcb917 	ldw	r2,-3356(gp)
 4019b60:	1880032e 	bgeu	r3,r2,4019b70 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4019b64:	e0bffd17 	ldw	r2,-12(fp)
 4019b68:	00c00044 	movi	r3,1
 4019b6c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4019b70:	e0bffe17 	ldw	r2,-8(fp)
 4019b74:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4019b78:	e0fffd17 	ldw	r3,-12(fp)
 4019b7c:	d0a02704 	addi	r2,gp,-32612
 4019b80:	18bfcf1e 	bne	r3,r2,4019ac0 <__alt_data_end+0xfc019ac0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4019b84:	0001883a 	nop
}
 4019b88:	0001883a 	nop
 4019b8c:	e037883a 	mov	sp,fp
 4019b90:	dfc00117 	ldw	ra,4(sp)
 4019b94:	df000017 	ldw	fp,0(sp)
 4019b98:	dec00204 	addi	sp,sp,8
 4019b9c:	f800283a 	ret

04019ba0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4019ba0:	deffff04 	addi	sp,sp,-4
 4019ba4:	df000015 	stw	fp,0(sp)
 4019ba8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4019bac:	000170fa 	wrctl	ienable,zero
}
 4019bb0:	0001883a 	nop
 4019bb4:	e037883a 	mov	sp,fp
 4019bb8:	df000017 	ldw	fp,0(sp)
 4019bbc:	dec00104 	addi	sp,sp,4
 4019bc0:	f800283a 	ret

04019bc4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4019bc4:	defffa04 	addi	sp,sp,-24
 4019bc8:	dfc00515 	stw	ra,20(sp)
 4019bcc:	df000415 	stw	fp,16(sp)
 4019bd0:	df000404 	addi	fp,sp,16
 4019bd4:	e13ffe15 	stw	r4,-8(fp)
 4019bd8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4019bdc:	e0bfff17 	ldw	r2,-4(fp)
 4019be0:	10800017 	ldw	r2,0(r2)
 4019be4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4019be8:	e13ffe17 	ldw	r4,-8(fp)
 4019bec:	400ba8c0 	call	400ba8c <strlen>
 4019bf0:	10800044 	addi	r2,r2,1
 4019bf4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4019bf8:	00000d06 	br	4019c30 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4019bfc:	e0bffc17 	ldw	r2,-16(fp)
 4019c00:	10800217 	ldw	r2,8(r2)
 4019c04:	e0fffd17 	ldw	r3,-12(fp)
 4019c08:	180d883a 	mov	r6,r3
 4019c0c:	e17ffe17 	ldw	r5,-8(fp)
 4019c10:	1009883a 	mov	r4,r2
 4019c14:	400b22c0 	call	400b22c <memcmp>
 4019c18:	1000021e 	bne	r2,zero,4019c24 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4019c1c:	e0bffc17 	ldw	r2,-16(fp)
 4019c20:	00000706 	br	4019c40 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4019c24:	e0bffc17 	ldw	r2,-16(fp)
 4019c28:	10800017 	ldw	r2,0(r2)
 4019c2c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4019c30:	e0fffc17 	ldw	r3,-16(fp)
 4019c34:	e0bfff17 	ldw	r2,-4(fp)
 4019c38:	18bff01e 	bne	r3,r2,4019bfc <__alt_data_end+0xfc019bfc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4019c3c:	0005883a 	mov	r2,zero
}
 4019c40:	e037883a 	mov	sp,fp
 4019c44:	dfc00117 	ldw	ra,4(sp)
 4019c48:	df000017 	ldw	fp,0(sp)
 4019c4c:	dec00204 	addi	sp,sp,8
 4019c50:	f800283a 	ret

04019c54 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4019c54:	defffb04 	addi	sp,sp,-20
 4019c58:	dfc00415 	stw	ra,16(sp)
 4019c5c:	df000315 	stw	fp,12(sp)
 4019c60:	df000304 	addi	fp,sp,12
 4019c64:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4019c68:	d0a01f17 	ldw	r2,-32644(gp)
 4019c6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4019c70:	00003106 	br	4019d38 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4019c74:	e0bffd17 	ldw	r2,-12(fp)
 4019c78:	10800217 	ldw	r2,8(r2)
 4019c7c:	1009883a 	mov	r4,r2
 4019c80:	400ba8c0 	call	400ba8c <strlen>
 4019c84:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4019c88:	e0bffd17 	ldw	r2,-12(fp)
 4019c8c:	10c00217 	ldw	r3,8(r2)
 4019c90:	e0bffe17 	ldw	r2,-8(fp)
 4019c94:	10bfffc4 	addi	r2,r2,-1
 4019c98:	1885883a 	add	r2,r3,r2
 4019c9c:	10800003 	ldbu	r2,0(r2)
 4019ca0:	10803fcc 	andi	r2,r2,255
 4019ca4:	1080201c 	xori	r2,r2,128
 4019ca8:	10bfe004 	addi	r2,r2,-128
 4019cac:	10800bd8 	cmpnei	r2,r2,47
 4019cb0:	1000031e 	bne	r2,zero,4019cc0 <alt_find_file+0x6c>
    {
      len -= 1;
 4019cb4:	e0bffe17 	ldw	r2,-8(fp)
 4019cb8:	10bfffc4 	addi	r2,r2,-1
 4019cbc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4019cc0:	e0bffe17 	ldw	r2,-8(fp)
 4019cc4:	e0ffff17 	ldw	r3,-4(fp)
 4019cc8:	1885883a 	add	r2,r3,r2
 4019ccc:	10800003 	ldbu	r2,0(r2)
 4019cd0:	10803fcc 	andi	r2,r2,255
 4019cd4:	1080201c 	xori	r2,r2,128
 4019cd8:	10bfe004 	addi	r2,r2,-128
 4019cdc:	10800be0 	cmpeqi	r2,r2,47
 4019ce0:	1000081e 	bne	r2,zero,4019d04 <alt_find_file+0xb0>
 4019ce4:	e0bffe17 	ldw	r2,-8(fp)
 4019ce8:	e0ffff17 	ldw	r3,-4(fp)
 4019cec:	1885883a 	add	r2,r3,r2
 4019cf0:	10800003 	ldbu	r2,0(r2)
 4019cf4:	10803fcc 	andi	r2,r2,255
 4019cf8:	1080201c 	xori	r2,r2,128
 4019cfc:	10bfe004 	addi	r2,r2,-128
 4019d00:	10000a1e 	bne	r2,zero,4019d2c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4019d04:	e0bffd17 	ldw	r2,-12(fp)
 4019d08:	10800217 	ldw	r2,8(r2)
 4019d0c:	e0fffe17 	ldw	r3,-8(fp)
 4019d10:	180d883a 	mov	r6,r3
 4019d14:	e17fff17 	ldw	r5,-4(fp)
 4019d18:	1009883a 	mov	r4,r2
 4019d1c:	400b22c0 	call	400b22c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4019d20:	1000021e 	bne	r2,zero,4019d2c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4019d24:	e0bffd17 	ldw	r2,-12(fp)
 4019d28:	00000706 	br	4019d48 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4019d2c:	e0bffd17 	ldw	r2,-12(fp)
 4019d30:	10800017 	ldw	r2,0(r2)
 4019d34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4019d38:	e0fffd17 	ldw	r3,-12(fp)
 4019d3c:	d0a01f04 	addi	r2,gp,-32644
 4019d40:	18bfcc1e 	bne	r3,r2,4019c74 <__alt_data_end+0xfc019c74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4019d44:	0005883a 	mov	r2,zero
}
 4019d48:	e037883a 	mov	sp,fp
 4019d4c:	dfc00117 	ldw	ra,4(sp)
 4019d50:	df000017 	ldw	fp,0(sp)
 4019d54:	dec00204 	addi	sp,sp,8
 4019d58:	f800283a 	ret

04019d5c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4019d5c:	defffc04 	addi	sp,sp,-16
 4019d60:	df000315 	stw	fp,12(sp)
 4019d64:	df000304 	addi	fp,sp,12
 4019d68:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4019d6c:	00bffa04 	movi	r2,-24
 4019d70:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4019d74:	e03ffd15 	stw	zero,-12(fp)
 4019d78:	00001906 	br	4019de0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 4019d7c:	008100b4 	movhi	r2,1026
 4019d80:	10825704 	addi	r2,r2,2396
 4019d84:	e0fffd17 	ldw	r3,-12(fp)
 4019d88:	18c00324 	muli	r3,r3,12
 4019d8c:	10c5883a 	add	r2,r2,r3
 4019d90:	10800017 	ldw	r2,0(r2)
 4019d94:	10000f1e 	bne	r2,zero,4019dd4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4019d98:	008100b4 	movhi	r2,1026
 4019d9c:	10825704 	addi	r2,r2,2396
 4019da0:	e0fffd17 	ldw	r3,-12(fp)
 4019da4:	18c00324 	muli	r3,r3,12
 4019da8:	10c5883a 	add	r2,r2,r3
 4019dac:	e0ffff17 	ldw	r3,-4(fp)
 4019db0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4019db4:	d0e02317 	ldw	r3,-32628(gp)
 4019db8:	e0bffd17 	ldw	r2,-12(fp)
 4019dbc:	1880020e 	bge	r3,r2,4019dc8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4019dc0:	e0bffd17 	ldw	r2,-12(fp)
 4019dc4:	d0a02315 	stw	r2,-32628(gp)
      }
      rc = i;
 4019dc8:	e0bffd17 	ldw	r2,-12(fp)
 4019dcc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4019dd0:	00000606 	br	4019dec <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4019dd4:	e0bffd17 	ldw	r2,-12(fp)
 4019dd8:	10800044 	addi	r2,r2,1
 4019ddc:	e0bffd15 	stw	r2,-12(fp)
 4019de0:	e0bffd17 	ldw	r2,-12(fp)
 4019de4:	10800810 	cmplti	r2,r2,32
 4019de8:	103fe41e 	bne	r2,zero,4019d7c <__alt_data_end+0xfc019d7c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4019dec:	e0bffe17 	ldw	r2,-8(fp)
}
 4019df0:	e037883a 	mov	sp,fp
 4019df4:	df000017 	ldw	fp,0(sp)
 4019df8:	dec00104 	addi	sp,sp,4
 4019dfc:	f800283a 	ret

04019e00 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4019e00:	defffb04 	addi	sp,sp,-20
 4019e04:	df000415 	stw	fp,16(sp)
 4019e08:	df000404 	addi	fp,sp,16
 4019e0c:	e13ffe15 	stw	r4,-8(fp)
 4019e10:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4019e14:	e0bfff17 	ldw	r2,-4(fp)
 4019e18:	10840070 	cmpltui	r2,r2,4097
 4019e1c:	1000021e 	bne	r2,zero,4019e28 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4019e20:	00840004 	movi	r2,4096
 4019e24:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4019e28:	e0fffe17 	ldw	r3,-8(fp)
 4019e2c:	e0bfff17 	ldw	r2,-4(fp)
 4019e30:	1885883a 	add	r2,r3,r2
 4019e34:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4019e38:	e0bffe17 	ldw	r2,-8(fp)
 4019e3c:	e0bffc15 	stw	r2,-16(fp)
 4019e40:	00000506 	br	4019e58 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4019e44:	e0bffc17 	ldw	r2,-16(fp)
 4019e48:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4019e4c:	e0bffc17 	ldw	r2,-16(fp)
 4019e50:	10800804 	addi	r2,r2,32
 4019e54:	e0bffc15 	stw	r2,-16(fp)
 4019e58:	e0fffc17 	ldw	r3,-16(fp)
 4019e5c:	e0bffd17 	ldw	r2,-12(fp)
 4019e60:	18bff836 	bltu	r3,r2,4019e44 <__alt_data_end+0xfc019e44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4019e64:	e0bffe17 	ldw	r2,-8(fp)
 4019e68:	108007cc 	andi	r2,r2,31
 4019e6c:	10000226 	beq	r2,zero,4019e78 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4019e70:	e0bffc17 	ldw	r2,-16(fp)
 4019e74:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4019e78:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4019e7c:	0001883a 	nop
 4019e80:	e037883a 	mov	sp,fp
 4019e84:	df000017 	ldw	fp,0(sp)
 4019e88:	dec00104 	addi	sp,sp,4
 4019e8c:	f800283a 	ret

04019e90 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4019e90:	defffe04 	addi	sp,sp,-8
 4019e94:	df000115 	stw	fp,4(sp)
 4019e98:	df000104 	addi	fp,sp,4
 4019e9c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4019ea0:	e0bfff17 	ldw	r2,-4(fp)
 4019ea4:	10bffe84 	addi	r2,r2,-6
 4019ea8:	10c00428 	cmpgeui	r3,r2,16
 4019eac:	18001a1e 	bne	r3,zero,4019f18 <alt_exception_cause_generated_bad_addr+0x88>
 4019eb0:	100690ba 	slli	r3,r2,2
 4019eb4:	008100b4 	movhi	r2,1026
 4019eb8:	10a7b204 	addi	r2,r2,-24888
 4019ebc:	1885883a 	add	r2,r3,r2
 4019ec0:	10800017 	ldw	r2,0(r2)
 4019ec4:	1000683a 	jmp	r2
 4019ec8:	04019f08 	cmpgei	r16,zero,1660
 4019ecc:	04019f08 	cmpgei	r16,zero,1660
 4019ed0:	04019f18 	cmpnei	r16,zero,1660
 4019ed4:	04019f18 	cmpnei	r16,zero,1660
 4019ed8:	04019f18 	cmpnei	r16,zero,1660
 4019edc:	04019f08 	cmpgei	r16,zero,1660
 4019ee0:	04019f10 	cmplti	r16,zero,1660
 4019ee4:	04019f18 	cmpnei	r16,zero,1660
 4019ee8:	04019f08 	cmpgei	r16,zero,1660
 4019eec:	04019f08 	cmpgei	r16,zero,1660
 4019ef0:	04019f18 	cmpnei	r16,zero,1660
 4019ef4:	04019f08 	cmpgei	r16,zero,1660
 4019ef8:	04019f10 	cmplti	r16,zero,1660
 4019efc:	04019f18 	cmpnei	r16,zero,1660
 4019f00:	04019f18 	cmpnei	r16,zero,1660
 4019f04:	04019f08 	cmpgei	r16,zero,1660
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4019f08:	00800044 	movi	r2,1
 4019f0c:	00000306 	br	4019f1c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4019f10:	0005883a 	mov	r2,zero
 4019f14:	00000106 	br	4019f1c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4019f18:	0005883a 	mov	r2,zero
  }
}
 4019f1c:	e037883a 	mov	sp,fp
 4019f20:	df000017 	ldw	fp,0(sp)
 4019f24:	dec00104 	addi	sp,sp,4
 4019f28:	f800283a 	ret

04019f2c <atexit>:
 4019f2c:	200b883a 	mov	r5,r4
 4019f30:	000f883a 	mov	r7,zero
 4019f34:	000d883a 	mov	r6,zero
 4019f38:	0009883a 	mov	r4,zero
 4019f3c:	4019f781 	jmpi	4019f78 <__register_exitproc>

04019f40 <exit>:
 4019f40:	defffe04 	addi	sp,sp,-8
 4019f44:	000b883a 	mov	r5,zero
 4019f48:	dc000015 	stw	r16,0(sp)
 4019f4c:	dfc00115 	stw	ra,4(sp)
 4019f50:	2021883a 	mov	r16,r4
 4019f54:	401a0900 	call	401a090 <__call_exitprocs>
 4019f58:	008100b4 	movhi	r2,1026
 4019f5c:	1086e804 	addi	r2,r2,7072
 4019f60:	11000017 	ldw	r4,0(r2)
 4019f64:	20800f17 	ldw	r2,60(r4)
 4019f68:	10000126 	beq	r2,zero,4019f70 <exit+0x30>
 4019f6c:	103ee83a 	callr	r2
 4019f70:	8009883a 	mov	r4,r16
 4019f74:	401764c0 	call	401764c <_exit>

04019f78 <__register_exitproc>:
 4019f78:	defffa04 	addi	sp,sp,-24
 4019f7c:	dc000315 	stw	r16,12(sp)
 4019f80:	040100b4 	movhi	r16,1026
 4019f84:	8406e804 	addi	r16,r16,7072
 4019f88:	80c00017 	ldw	r3,0(r16)
 4019f8c:	dc400415 	stw	r17,16(sp)
 4019f90:	dfc00515 	stw	ra,20(sp)
 4019f94:	18805217 	ldw	r2,328(r3)
 4019f98:	2023883a 	mov	r17,r4
 4019f9c:	10003726 	beq	r2,zero,401a07c <__register_exitproc+0x104>
 4019fa0:	10c00117 	ldw	r3,4(r2)
 4019fa4:	010007c4 	movi	r4,31
 4019fa8:	20c00e16 	blt	r4,r3,4019fe4 <__register_exitproc+0x6c>
 4019fac:	1a000044 	addi	r8,r3,1
 4019fb0:	8800221e 	bne	r17,zero,401a03c <__register_exitproc+0xc4>
 4019fb4:	18c00084 	addi	r3,r3,2
 4019fb8:	18c7883a 	add	r3,r3,r3
 4019fbc:	18c7883a 	add	r3,r3,r3
 4019fc0:	12000115 	stw	r8,4(r2)
 4019fc4:	10c7883a 	add	r3,r2,r3
 4019fc8:	19400015 	stw	r5,0(r3)
 4019fcc:	0005883a 	mov	r2,zero
 4019fd0:	dfc00517 	ldw	ra,20(sp)
 4019fd4:	dc400417 	ldw	r17,16(sp)
 4019fd8:	dc000317 	ldw	r16,12(sp)
 4019fdc:	dec00604 	addi	sp,sp,24
 4019fe0:	f800283a 	ret
 4019fe4:	00810074 	movhi	r2,1025
 4019fe8:	10aa7e04 	addi	r2,r2,-22024
 4019fec:	10002626 	beq	r2,zero,401a088 <__register_exitproc+0x110>
 4019ff0:	01006404 	movi	r4,400
 4019ff4:	d9400015 	stw	r5,0(sp)
 4019ff8:	d9800115 	stw	r6,4(sp)
 4019ffc:	d9c00215 	stw	r7,8(sp)
 401a000:	400a9f80 	call	400a9f8 <malloc>
 401a004:	d9400017 	ldw	r5,0(sp)
 401a008:	d9800117 	ldw	r6,4(sp)
 401a00c:	d9c00217 	ldw	r7,8(sp)
 401a010:	10001d26 	beq	r2,zero,401a088 <__register_exitproc+0x110>
 401a014:	81000017 	ldw	r4,0(r16)
 401a018:	10000115 	stw	zero,4(r2)
 401a01c:	02000044 	movi	r8,1
 401a020:	22405217 	ldw	r9,328(r4)
 401a024:	0007883a 	mov	r3,zero
 401a028:	12400015 	stw	r9,0(r2)
 401a02c:	20805215 	stw	r2,328(r4)
 401a030:	10006215 	stw	zero,392(r2)
 401a034:	10006315 	stw	zero,396(r2)
 401a038:	883fde26 	beq	r17,zero,4019fb4 <__alt_data_end+0xfc019fb4>
 401a03c:	18c9883a 	add	r4,r3,r3
 401a040:	2109883a 	add	r4,r4,r4
 401a044:	1109883a 	add	r4,r2,r4
 401a048:	21802215 	stw	r6,136(r4)
 401a04c:	01800044 	movi	r6,1
 401a050:	12406217 	ldw	r9,392(r2)
 401a054:	30cc983a 	sll	r6,r6,r3
 401a058:	4992b03a 	or	r9,r9,r6
 401a05c:	12406215 	stw	r9,392(r2)
 401a060:	21c04215 	stw	r7,264(r4)
 401a064:	01000084 	movi	r4,2
 401a068:	893fd21e 	bne	r17,r4,4019fb4 <__alt_data_end+0xfc019fb4>
 401a06c:	11006317 	ldw	r4,396(r2)
 401a070:	218cb03a 	or	r6,r4,r6
 401a074:	11806315 	stw	r6,396(r2)
 401a078:	003fce06 	br	4019fb4 <__alt_data_end+0xfc019fb4>
 401a07c:	18805304 	addi	r2,r3,332
 401a080:	18805215 	stw	r2,328(r3)
 401a084:	003fc606 	br	4019fa0 <__alt_data_end+0xfc019fa0>
 401a088:	00bfffc4 	movi	r2,-1
 401a08c:	003fd006 	br	4019fd0 <__alt_data_end+0xfc019fd0>

0401a090 <__call_exitprocs>:
 401a090:	defff504 	addi	sp,sp,-44
 401a094:	df000915 	stw	fp,36(sp)
 401a098:	dd400615 	stw	r21,24(sp)
 401a09c:	dc800315 	stw	r18,12(sp)
 401a0a0:	dfc00a15 	stw	ra,40(sp)
 401a0a4:	ddc00815 	stw	r23,32(sp)
 401a0a8:	dd800715 	stw	r22,28(sp)
 401a0ac:	dd000515 	stw	r20,20(sp)
 401a0b0:	dcc00415 	stw	r19,16(sp)
 401a0b4:	dc400215 	stw	r17,8(sp)
 401a0b8:	dc000115 	stw	r16,4(sp)
 401a0bc:	d9000015 	stw	r4,0(sp)
 401a0c0:	2839883a 	mov	fp,r5
 401a0c4:	04800044 	movi	r18,1
 401a0c8:	057fffc4 	movi	r21,-1
 401a0cc:	008100b4 	movhi	r2,1026
 401a0d0:	1086e804 	addi	r2,r2,7072
 401a0d4:	12000017 	ldw	r8,0(r2)
 401a0d8:	45005217 	ldw	r20,328(r8)
 401a0dc:	44c05204 	addi	r19,r8,328
 401a0e0:	a0001c26 	beq	r20,zero,401a154 <__call_exitprocs+0xc4>
 401a0e4:	a0800117 	ldw	r2,4(r20)
 401a0e8:	15ffffc4 	addi	r23,r2,-1
 401a0ec:	b8000d16 	blt	r23,zero,401a124 <__call_exitprocs+0x94>
 401a0f0:	14000044 	addi	r16,r2,1
 401a0f4:	8421883a 	add	r16,r16,r16
 401a0f8:	8421883a 	add	r16,r16,r16
 401a0fc:	84402004 	addi	r17,r16,128
 401a100:	a463883a 	add	r17,r20,r17
 401a104:	a421883a 	add	r16,r20,r16
 401a108:	e0001e26 	beq	fp,zero,401a184 <__call_exitprocs+0xf4>
 401a10c:	80804017 	ldw	r2,256(r16)
 401a110:	e0801c26 	beq	fp,r2,401a184 <__call_exitprocs+0xf4>
 401a114:	bdffffc4 	addi	r23,r23,-1
 401a118:	843fff04 	addi	r16,r16,-4
 401a11c:	8c7fff04 	addi	r17,r17,-4
 401a120:	bd7ff91e 	bne	r23,r21,401a108 <__alt_data_end+0xfc01a108>
 401a124:	00810074 	movhi	r2,1025
 401a128:	10aa8304 	addi	r2,r2,-22004
 401a12c:	10000926 	beq	r2,zero,401a154 <__call_exitprocs+0xc4>
 401a130:	a0800117 	ldw	r2,4(r20)
 401a134:	1000301e 	bne	r2,zero,401a1f8 <__call_exitprocs+0x168>
 401a138:	a0800017 	ldw	r2,0(r20)
 401a13c:	10003226 	beq	r2,zero,401a208 <__call_exitprocs+0x178>
 401a140:	a009883a 	mov	r4,r20
 401a144:	98800015 	stw	r2,0(r19)
 401a148:	400aa0c0 	call	400aa0c <free>
 401a14c:	9d000017 	ldw	r20,0(r19)
 401a150:	a03fe41e 	bne	r20,zero,401a0e4 <__alt_data_end+0xfc01a0e4>
 401a154:	dfc00a17 	ldw	ra,40(sp)
 401a158:	df000917 	ldw	fp,36(sp)
 401a15c:	ddc00817 	ldw	r23,32(sp)
 401a160:	dd800717 	ldw	r22,28(sp)
 401a164:	dd400617 	ldw	r21,24(sp)
 401a168:	dd000517 	ldw	r20,20(sp)
 401a16c:	dcc00417 	ldw	r19,16(sp)
 401a170:	dc800317 	ldw	r18,12(sp)
 401a174:	dc400217 	ldw	r17,8(sp)
 401a178:	dc000117 	ldw	r16,4(sp)
 401a17c:	dec00b04 	addi	sp,sp,44
 401a180:	f800283a 	ret
 401a184:	a0800117 	ldw	r2,4(r20)
 401a188:	80c00017 	ldw	r3,0(r16)
 401a18c:	10bfffc4 	addi	r2,r2,-1
 401a190:	15c01426 	beq	r2,r23,401a1e4 <__call_exitprocs+0x154>
 401a194:	80000015 	stw	zero,0(r16)
 401a198:	183fde26 	beq	r3,zero,401a114 <__alt_data_end+0xfc01a114>
 401a19c:	95c8983a 	sll	r4,r18,r23
 401a1a0:	a0806217 	ldw	r2,392(r20)
 401a1a4:	a5800117 	ldw	r22,4(r20)
 401a1a8:	2084703a 	and	r2,r4,r2
 401a1ac:	10000b26 	beq	r2,zero,401a1dc <__call_exitprocs+0x14c>
 401a1b0:	a0806317 	ldw	r2,396(r20)
 401a1b4:	2088703a 	and	r4,r4,r2
 401a1b8:	20000c1e 	bne	r4,zero,401a1ec <__call_exitprocs+0x15c>
 401a1bc:	89400017 	ldw	r5,0(r17)
 401a1c0:	d9000017 	ldw	r4,0(sp)
 401a1c4:	183ee83a 	callr	r3
 401a1c8:	a0800117 	ldw	r2,4(r20)
 401a1cc:	15bfbf1e 	bne	r2,r22,401a0cc <__alt_data_end+0xfc01a0cc>
 401a1d0:	98800017 	ldw	r2,0(r19)
 401a1d4:	153fcf26 	beq	r2,r20,401a114 <__alt_data_end+0xfc01a114>
 401a1d8:	003fbc06 	br	401a0cc <__alt_data_end+0xfc01a0cc>
 401a1dc:	183ee83a 	callr	r3
 401a1e0:	003ff906 	br	401a1c8 <__alt_data_end+0xfc01a1c8>
 401a1e4:	a5c00115 	stw	r23,4(r20)
 401a1e8:	003feb06 	br	401a198 <__alt_data_end+0xfc01a198>
 401a1ec:	89000017 	ldw	r4,0(r17)
 401a1f0:	183ee83a 	callr	r3
 401a1f4:	003ff406 	br	401a1c8 <__alt_data_end+0xfc01a1c8>
 401a1f8:	a0800017 	ldw	r2,0(r20)
 401a1fc:	a027883a 	mov	r19,r20
 401a200:	1029883a 	mov	r20,r2
 401a204:	003fb606 	br	401a0e0 <__alt_data_end+0xfc01a0e0>
 401a208:	0005883a 	mov	r2,zero
 401a20c:	003ffb06 	br	401a1fc <__alt_data_end+0xfc01a1fc>
 401a210:	0201ffff 	0x201ffff
 401a214:	ffff0000 	call	ffff000 <__alt_data_end+0x7fff000>
 401a218:	00000201 	jmpi	20 <__alt_mem_sdram-0x3ffffe0>
 401a21c:	0201ffff 	0x201ffff
 401a220:	883a0000 	call	883a000 <__alt_data_end+0x83a000>
 401a224:	010d0bff 	0x10d0bff
 401a228:	01010002 	0x1010002
	...
 401a234:	010d0bff 	0x10d0bff
 401a238:	01010004 	movi	r4,1024
 401a23c:	00000100 	call	10 <__alt_mem_sdram-0x3fffff0>
 401a240:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 401a244:	01110bff 	0x1110bff
 401a248:	01010004 	movi	r4,1024
 401a24c:	7f000105 	stb	fp,4(r15)
 401a250:	007d0000 	call	7d000 <__alt_mem_sdram-0x3f83000>
 401a254:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 401a258:	01883a00 	call	1883a0 <__alt_mem_sdram-0x3e77c60>
 401a25c:	040019f0 	cmpltui	r16,zero,103
 401a260:	04002548 	cmpgei	r16,zero,149
 401a264:	04003024 	muli	r16,zero,192
 401a268:	04004284 	movi	r16,266
 401a26c:	04004ccc 	andi	r16,zero,307
 401a270:	04005558 	cmpnei	r16,zero,341
 401a274:	04006a38 	rdprs	r16,zero,424
 401a278:	040074cc 	andi	r16,zero,467
 401a27c:	04007f9c 	xori	r16,zero,510
 401a280:	0400842c 	andhi	r16,zero,528
 401a284:	0400a178 	rdprs	r16,zero,645
