
final_project.elf:     file format elf32-littlenios2
final_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000201fc memsz 0x000201fc flags r-x
    LOAD off    0x0002121c vaddr 0x0402021c paddr 0x0402ccb0 align 2**12
         filesz 0x0000ca94 memsz 0x0000ca94 flags rw-
    LOAD off    0x0002e744 vaddr 0x04039744 paddr 0x04039744 align 2**12
         filesz 0x00000000 memsz 0x00000270 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001ed3c  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000129c  0401ef80  0401ef80  0001ff80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000ca94  0402021c  0402ccb0  0002121c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000270  04039744  04039744  0002e744  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  040399b4  040399b4  0002dcb0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002dcb0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001ab8  00000000  00000000  0002dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00044946  00000000  00000000  0002f790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010f1e  00000000  00000000  000740d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014d42  00000000  00000000  00084ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005c54  00000000  00000000  00099d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000a830  00000000  00000000  0009f98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00020c01  00000000  00000000  000aa1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000cadc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002818  00000000  00000000  000cae20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000d5e7a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000d5e7d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000d5e89  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000d5e8a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000d5e8b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000d5e8f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000d5e93  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000d5e97  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000d5ea0  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000d5ea9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  000d5eb2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005a  00000000  00000000  000d5ec3  2**0
                  CONTENTS, READONLY
 29 .jdi          0000618f  00000000  00000000  000d5f1d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00080fd7  00000000  00000000  000dc0ac  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
0401ef80 l    d  .rodata	00000000 .rodata
0402021c l    d  .rwdata	00000000 .rwdata
04039744 l    d  .bss	00000000 .bss
040399b4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 pixel_vga.c
0402021c l     O .rwdata	00000c97 server_font_data
04020eb4 l     O .rwdata	0000017c server_char_indices
04021030 l     O .rwdata	0000005f server_widths
0402108f l     O .rwdata	00000ed4 channel_font_data
04021f64 l     O .rwdata	0000017c channel_char_indices
040220e0 l     O .rwdata	0000005f channel_widths
0402213f l     O .rwdata	00001ee3 title_font_data
04024024 l     O .rwdata	0000017c title_char_indices
040241a0 l     O .rwdata	0000005f title_widths
040241ff l     O .rwdata	00000980 uname_font_data
04024b80 l     O .rwdata	0000017c uname_char_indices
04024cfc l     O .rwdata	0000005f uname_widths
04024d5b l     O .rwdata	00000925 message_font_data
04025680 l     O .rwdata	0000017c message_char_indices
040257fc l     O .rwdata	0000005f message_widths
0402cc00 l     O .rwdata	00000004 VRAM
0402585b l     O .rwdata	0000000c colors
04025868 l     O .rwdata	00000050 fonts
040258b8 l     O .rwdata	00000100 decode_ascii
00000000 l    df *ABS*	00000000 DiscordClient.cpp
04039744 l     O .bss	00000004 _ZL11INADDR_NONE
0400190c l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
0400196c l     F .text	00000030 _GLOBAL__sub_I__ZN13DiscordClientC2Ev
00000000 l    df *ABS*	00000000 Dhcp.cpp
04039748 l     O .bss	00000004 _ZL11INADDR_NONE
04002e60 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04002ec0 l     F .text	00000030 _GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm
00000000 l    df *ABS*	00000000 Dns.cpp
0403974c l     O .bss	00000004 _ZL11INADDR_NONE
040039b8 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04003a18 l     F .text	00000030 _GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress
00000000 l    df *ABS*	00000000 Ethernet.cpp
04039750 l     O .bss	00000004 _ZL11INADDR_NONE
0403975c l     O .bss	00000008 _ZGVZN13EthernetClass5beginEPhmmE6s_dhcp
040397d0 l     O .bss	0000005c _ZZN13EthernetClass5beginEPhmmE6s_dhcp
040043e4 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0400444c l     F .text	00000030 _GLOBAL__sub_I__ZN13EthernetClass17_dnsServerAddressE
00000000 l    df *ABS*	00000000 EthernetClient.cpp
04039768 l     O .bss	00000004 _ZL11INADDR_NONE
04005744 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
040057a4 l     F .text	00000030 _GLOBAL__sub_I__ZN14EthernetClient7connectEPKct
00000000 l    df *ABS*	00000000 EthernetServer.cpp
0403976c l     O .bss	00000004 _ZL11INADDR_NONE
04006164 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
040061c4 l     F .text	00000030 _GLOBAL__sub_I__ZN14EthernetServer11server_portE
00000000 l    df *ABS*	00000000 EthernetUdp.cpp
04039770 l     O .bss	00000004 _ZL11INADDR_NONE
040069bc l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04006a1c l     F .text	00000030 _GLOBAL__sub_I__ZN11EthernetUDP5beginEt
00000000 l    df *ABS*	00000000 socket.cpp
04039774 l     O .bss	00000004 _ZL11INADDR_NONE
0402cc34 l     O .rwdata	00000002 _ZL10local_port
0403983c l     O .bss	00000040 _ZL5state
040072bc l     F .text	0000006c _ZL11getSnRX_RSRh
04007328 l     F .text	0000011c _ZL9read_datahtPht
0400781c l     F .text	0000008c _ZL11getSnTX_FSRh
040078a8 l     F .text	00000158 _ZL10write_datahtPKht
04007da8 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04007e08 l     F .text	00000030 _GLOBAL__sub_I__ZN13EthernetClass14socketPortRandEt
00000000 l    df *ABS*	00000000 IPAddress.cpp
04039778 l     O .bss	00000004 _ZL11INADDR_NONE
040088b4 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04008914 l     F .text	00000030 _GLOBAL__sub_I__ZN9IPAddressC2Ev
00000000 l    df *ABS*	00000000 w5100.cpp
0403977c l     O .bss	00000004 _ZL11INADDR_NONE
04039783 l     O .bss	00000001 _ZZN10W5100Class4initEvE11initialized
04009270 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
040092d0 l     F .text	00000030 _GLOBAL__sub_I__ZN10W5100Class4chipE
00000000 l    df *ABS*	00000000 main.cpp
04039784 l     O .bss	00000004 _ZL11INADDR_NONE
040259b8 l     O .rwdata	00000c97 _ZL16server_font_data
04026650 l     O .rwdata	0000017c _ZL19server_char_indices
040267cc l     O .rwdata	0000005f _ZL13server_widths
0402682b l     O .rwdata	00000ed4 _ZL17channel_font_data
04027700 l     O .rwdata	0000017c _ZL20channel_char_indices
0402787c l     O .rwdata	0000005f _ZL14channel_widths
040278db l     O .rwdata	00001ee3 _ZL15title_font_data
040297c0 l     O .rwdata	0000017c _ZL18title_char_indices
0402993c l     O .rwdata	0000005f _ZL12title_widths
0402999b l     O .rwdata	00000980 _ZL15uname_font_data
0402a31c l     O .rwdata	0000017c _ZL18uname_char_indices
0402a498 l     O .rwdata	0000005f _ZL12uname_widths
0402a4f7 l     O .rwdata	00000925 _ZL17message_font_data
0402ae1c l     O .rwdata	0000017c _ZL20message_char_indices
0402af98 l     O .rwdata	0000005f _ZL14message_widths
0402cc38 l     O .rwdata	00000004 _ZL4VRAM
0402aff7 l     O .rwdata	0000000c _ZL6colors
0402b004 l     O .rwdata	00000050 _ZL5fonts
0402b054 l     O .rwdata	00000100 _ZL12decode_ascii
040097a8 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04009808 l     F .text	00000030 _GLOBAL__sub_I_mac
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 new_handler.cc
04039788 l     O .bss	00000004 _ZN12_GLOBAL__N_113__new_handlerE
00000000 l    df *ABS*	00000000 eh_personality.cc
04009bec l     F .text	000000a4 _ZL21size_of_encoded_valueh
04009c90 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
04009e9c l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
04009ef0 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
04009f7c l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0400a0b0 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0400a138 l     F .text	000001c0 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0400a2f8 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
0400ac24 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 guard.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0400b3d0 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0403987c l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0400b488 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0400b638 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0403978c l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 guard_error.cc
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0400b934 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
04039794 l     O .bss	00000004 fc_static
0400ba4c l     F .text	000000c0 _Unwind_RaiseException_Phase2
0400bb0c l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0402b154 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401ff2e l     O .rodata	00000010 zeroes.4389
0401ff3e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401ff4e l     O .rodata	00000010 zeroes.4404
040114bc l     F .text	000000bc __sbprintf
0401ff5e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040116cc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040131fc l     F .text	00000008 __fp_unlock
04013210 l     F .text	0000019c __sinit.part.1
040133ac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0402b9a0 l     O .rwdata	00000020 lc_ctype_charset
0402b980 l     O .rwdata	00000020 lc_message_charset
0402b9c0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0401ff8c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
040200c0 l     O .rodata	00000010 blanks.4332
040200b0 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
04017170 l     F .text	000000fc __sprint_r.part.0
040200e0 l     O .rodata	00000010 blanks.4348
040200d0 l     O .rodata	00000010 zeroes.4349
040186fc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0401c204 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0401c310 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0401c370 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401c47c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0401c55c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0401c6c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0401c7b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0401c988 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0402cca0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0401cbd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0401ccb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401cdec l     F .text	00000034 alt_dev_reg
0402bba0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401d0e4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0401d2f0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401db24 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401dee4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401e358 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401e498 l     F .text	0000003c alt_get_errno
0401e4d4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
040397cc g     O .bss	00000004 alt_instruction_exception_handler
0400b590 g     F .text	00000028 __cxa_free_exception
04005b5c  w    F .text	00000048 _ZN9DNSClientC2Ev
04005afc  w    F .text	00000060 _ZN10W5100Class11readSnDPORTEh
0400ca4c g     F .text	00000018 putchar
04009b70 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
04015370 g     F .text	00000074 _mprec_log10
04002d30 g     F .text	00000040 _ZN9DhcpClass15getDhcpServerIpEv
0400b370 g     F .text	00000018 _ZSt10unexpectedv
0401545c g     F .text	0000008c __any_on
04007128 g     F .text	00000040 _ZN13EthernetClass12socketStatusEh
04018df0 g     F .text	00000054 _isatty_r
0401ff98 g     O .rodata	00000028 __mprec_tinytens
04008bb4 g     F .text	000000d8 _ZN10W5100Class7isW5200Ev
0401c8c4 g     F .text	0000007c alt_main
04004704  w    F .text	00000040 _ZN10W5100Class21setRetransmissionTimeEt
0400ca64 g     F .text	000000c0 _puts_r
04006ad0  w    F .text	00000028 _ZN11EthernetUDP9localPortEv
040398b4 g     O .bss	00000100 alt_irq
0400b72c g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0401fb4c  w    O .rodata	00000018 _ZTV14EthernetServer
040045ec  w    F .text	00000038 _ZN10W5100Class13getSubnetMaskEPh
04008578 g     F .text	00000070 _ZN9IPAddressC1Ehhhh
04018e44 g     F .text	00000060 _lseek_r
0400bbc8 g     F .text	00000020 .hidden _Unwind_GetIPInfo
04002d70 g     F .text	00000040 _ZN9DhcpClass14getDnsServerIpEv
0402ccb0 g       *ABS*	00000000 __flash_rwdata_start
04005474 g     F .text	000000b0 _ZN14EthernetClient9connectedEv
04008c8c g     F .text	000000d8 _ZN10W5100Class7isW5500Ev
04003f74 g     F .text	00000058 _ZN13EthernetClass10linkStatusEv
0401ad30 g     F .text	00000088 .hidden __eqdf2
0400854c g     F .text	0000002c _ZN9IPAddressC2Ev
0400acf8 g     F .text	00000084 __cxa_rethrow
04006dd8 g     F .text	00000350 _ZN13EthernetClass20socketBeginMulticastEh9IPAddresst
040044e0  w    F .text	00000064 _ZN11EthernetUDPC2Ev
0400bb54 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0400b3ac g     F .text	00000014 _ZSt14set_unexpectedPFvvE
04005600 g     F .text	00000060 _ZN14EthernetClient9localPortEv
0400bbb8 g     F .text	00000010 .hidden _Unwind_GetIP
040399b4 g       *ABS*	00000000 __alt_heap_start
0400ce30 g     F .text	0000005c _kill_r
0400abdc g     F .text	00000010 _ZNSt9bad_allocD2Ev
0400ca08 g     F .text	0000003c printf
04018f04 g     F .text	0000009c _wcrtomb_r
04001134 g     F .text	0000005c _ZN13DiscordClientD2Ev
04005ba4 g     F .text	000000a0 _ZN14EthernetServer5beginEv
0400cbf8 g     F .text	00000084 _signal_r
04004840  w    F .text	00000038 _ZN10W5100Class9writeSUBREPKh
04015d00 g     F .text	0000005c __sseek
0401354c g     F .text	00000010 __sinit
040187b8 g     F .text	00000140 __swbuf_r
04039781 g     O .bss	00000001 _ZN10W5100Class11CH_BASE_MSBE
0400b60c g     F .text	0000002c __cxa_free_dependent_exception
040019d0  w    F .text	00000060 _ZN14EthernetClientC1Ev
040098a8 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
04014014 g     F .text	0000007c _setlocale_r
0401fc50  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
040133b4 g     F .text	00000068 __sfmoreglue
040042a8 g     F .text	0000004c _ZN13EthernetClass13setSubnetMaskE9IPAddress
0401c964 g     F .text	00000024 __malloc_unlock
0400b72c g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
04004694  w    F .text	00000038 _ZN10W5100Class12setIPAddressEPKh
0400afa0 g     F .text	00000020 _ZSt18uncaught_exceptionv
0400ad9c g     F .text	00000020 __cxa_deleted_virtual
04014390 g     F .text	0000015c memmove
0400b704 g     F .text	00000004 _ZNSt9exceptionD2Ev
04013534 g     F .text	00000018 _cleanup
04004784  w    F .text	0000004c _ZN10W5100Class5writeEth
040144ec g     F .text	000000a8 _Balloc
04000658 g     F .text	00000224 draw_char
040059e0  w    F .text	00000074 _ZN10W5100Class6readSnEhtPht
04000290 g     F .text	000000a4 set_color_palette
0401adb8 g     F .text	000000dc .hidden __gtdf2
0401fe64  w    O .rodata	00000014 _ZTVSt13bad_exception
0401e890 g     F .text	00000024 altera_nios2_gen2_irq_init
040065c8 g     F .text	00000134 _ZN11EthernetUDP11parsePacketEv
0400822c  w    F .text	00000060 _ZN10W5100Class12readSnTX_FSREh
04000000 g     F .entry	0000001c __reset
04001ea8 g     F .text	00000024 _ZN9DhcpClass12presend_DHCPEv
0401cc10 g     F .text	00000078 times
04005a54  w    F .text	00000060 _ZN10W5100Class10readSnPORTEh
0400bc04 g     F .text	00000008 .hidden _Unwind_GetRegionStart
04001ecc g     F .text	00000450 _ZN9DhcpClass17send_DHCP_MESSAGEEht
04000020 g       *ABS*	00000000 __flash_exceptions_start
04018d94 g     F .text	0000005c _fstat_r
040397a4 g     O .bss	00000004 errno
04002c70 g     F .text	00000040 _ZN9DhcpClass10getLocalIpEv
04015c7c g     F .text	00000008 __seofread
04015f34 g     F .text	0000123c ___svfiprintf_internal_r
0400bde0 g     F .text	00000074 .hidden _Unwind_Backtrace
040397b8 g     O .bss	00000004 alt_argv
04034c00 g       *ABS*	00000000 _gp
0401cc88 g     F .text	00000030 usleep
0401c45c g     F .text	00000020 getpid
0400a9a0 g     F .text	00000230 __cxa_call_unexpected
040057d4  w    F .text	00000034 _ZN6Client12rawIPAddressER9IPAddress
0400ae30 g     F .text	00000008 __cxa_get_exception_ptr
0400199c  w    F .text	00000034 _ZN6ClientC1Ev
04005de8 g     F .text	00000188 _ZN14EthernetServer6acceptEv
0402ba20 g     O .rwdata	00000180 alt_fd_list
0401fb2c  w    O .rodata	0000000c _ZTI14EthernetClient
0400ca44 g     F .text	00000008 _putchar_r
0400bcf4 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0400bb84 g     F .text	00000018 .hidden _Unwind_GetCFA
0400b388 g     F .text	00000014 _ZSt13set_terminatePFvvE
04005068 g     F .text	00000048 _ZN14EthernetClient7printlnEv
0401e8b4 g     F .text	00000090 alt_find_dev
0400f2a0 g     F .text	00000008 _times_r
0400c768 g     F .text	00000148 memcpy
0400465c  w    F .text	00000038 _ZN10W5100Class13getMACAddressEPh
04008414  w    F .text	00000060 _ZN10W5100Class11readSnRX_RDEh
0400b5b8 g     F .text	00000054 __cxa_allocate_dependent_exception
04013204 g     F .text	0000000c _cleanup_r
0400518c g     F .text	00000078 _ZN14EthernetClient4readEPhj
0400b038 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0401c01c g     F .text	000000dc .hidden __floatsidf
04000f78 g     F .text	00000094 isDiscord
0401e41c g     F .text	0000007c alt_io_redirect
040084c4  w    F .text	00000050 _ZN10W5100Class5RBASEEh
0401ae94 g     F .text	000000f4 .hidden __ltdf2
0401ef80 g       *ABS*	00000000 __DTOR_END__
04004ed0 g     F .text	0000005c _ZN14EthernetClient17availableForWriteEv
0400b050 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0400cb24 g     F .text	00000014 puts
0401eb80 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04015bb4 g     F .text	00000074 __fpclassifyd
040152cc g     F .text	000000a4 __ratio
040186e0 g     F .text	0000001c __vfiprintf_internal
0401d4e8 g     F .text	0000021c altera_avalon_jtag_uart_read
0400beb8 g     F .text	00000014 malloc
0400c9d8 g     F .text	00000030 _printf_r
0400b878 g     F .text	00000064 .hidden __udivsi3
0401c4b8 g     F .text	000000a4 isatty
040082f0  w    F .text	00000060 _ZN10W5100Class11readSnTX_WREh
0400cc7c g     F .text	000000bc _raise_r
0401ffe8 g     O .rodata	000000c8 __mprec_tens
04005828  w    F .text	00000048 _ZN14EthernetClientD2Ev
04008fb0 g     F .text	00000254 _ZN10W5100Class4readEtPht
04000e84 g     F .text	000000f4 draw_sample
04004340 g     F .text	00000060 _ZN13EthernetClass24setRetransmissionTimeoutEt
04014090 g     F .text	0000000c __locale_charset
04003ac4 g     F .text	0000028c _ZN13EthernetClass5beginEPhmm
04004544  w    F .text	00000038 _ZN10W5100Class12setGatewayIpEPKh
0401eaf0 g     F .text	00000090 alt_icache_flush
040397a0 g     O .bss	00000004 __malloc_top_pad
0400ce8c g     F .text	00000004 _getpid_r
0400800c  w    F .text	00000050 _ZN10W5100Class9writeSnIREhh
04004920  w    F .text	00000038 _ZN10W5100Class9writeSIPREPKh
0402cc80 g     O .rwdata	00000004 __mb_cur_max
0400861c g     F .text	00000044 _ZN9IPAddressC1EPKh
040140c0 g     F .text	0000000c _localeconv_r
040071a8 g     F .text	00000064 _ZN13EthernetClass12socketListenEh
040148f8 g     F .text	0000003c __i2b
040139d0 g     F .text	000004bc __sfvwrite_r
0400b1d0 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0400cd38 g     F .text	000000a8 __sigtramp_r
0401fbe0  w    O .rodata	0000000e _ZTS11EthernetUDP
0400cb38 g     F .text	00000054 _sbrk_r
0402cc24  w    O .rwdata	00000008 _ZTI6Server
04002f50  w    F .text	00000028 _ZN11EthernetUDP10remotePortEv
0401fcc0  w    O .rodata	00000020 _ZTVSt9type_info
04001a30 g     F .text	000000ac _ZN9DhcpClass13beginWithDHCPEPhmm
0400936c  w    F .text	00000040 _ZN10W5100Class9writeRMSREh
04007444 g     F .text	000002a0 _ZN13EthernetClass10socketRecvEhPhs
04005808  w    F .text	00000020 _ZN13EthernetClass11dnsServerIPEv
04018ea4 g     F .text	00000060 _read_r
0400b70c g     F .text	0000000c _ZNKSt9exception4whatEv
0402cc98 g     O .rwdata	00000004 alt_max_fd
04004198 g     F .text	00000044 _ZN13EthernetClass10subnetMaskEv
04018a88 g     F .text	000000f0 _fclose_r
0400828c  w    F .text	00000064 _ZN10W5100Class12writeSnTX_WREht
04009300  w    F .text	00000040 _ZN10W5100Class7writeMREh
0401fd00  w    O .rodata	0000000c _ZTISt9bad_alloc
040131cc g     F .text	00000030 fflush
0403979c g     O .bss	00000004 __malloc_max_sbrked_mem
04006a4c  w    F .text	00000034 _ZN3UDP12rawIPAddressER9IPAddress
04008660 g     F .text	00000120 _ZN9IPAddress10fromStringEPKc
0400690c g     F .text	000000b0 _ZN11EthernetUDP14beginMulticastE9IPAddresst
0400053c g     F .text	000000c4 debug
04007790 g     F .text	0000008c _ZN13EthernetClass10socketPeekEh
04019b9c g     F .text	000008ac .hidden __adddf3
0400883c g     F .text	00000034 _ZN9IPAddressaSEm
0401fc84  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
040050b0 g     F .text	00000080 _ZN14EthernetClient7printlnEPKc
0401fa34  w    O .rodata	00000038 _ZTV6Client
04015074 g     F .text	0000010c __b2d
04019664 g     F .text	00000538 .hidden __umoddi3
0401c7f0 g     F .text	000000d4 lseek
04006514 g     F .text	0000002c _ZN11EthernetUDP5writeEh
04002cb0 g     F .text	00000040 _ZN9DhcpClass13getSubnetMaskEv
0400b094 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0400ac20 g     F .text	00000004 _ZdlPv
0400b73c g     F .text	00000010 _ZN9__gnu_cxx20recursive_init_errorD1Ev
0402cc70 g     O .rwdata	00000004 _global_impure_ptr
04015650 g     F .text	00000564 _realloc_r
040399b4 g       *ABS*	00000000 __bss_end
04009bdc g     F .text	00000010 _ZSt15get_new_handlerv
0401e268 g     F .text	000000f0 alt_iic_isr_register
04005934  w    F .text	0000004c _ZN14EthernetClientneERKS_
04000600 g     F .text	00000058 draw_background
0401e788 g     F .text	00000108 alt_tick
04004bbc g     F .text	00000314 _ZN14EthernetClient7connectE9IPAddresst
0400bb3c g     F .text	00000018 .hidden _Unwind_SjLj_Register
040190ec g     F .text	00000578 .hidden __udivdi3
04002ae4 g     F .text	0000018c _ZN9DhcpClass10checkLeaseEv
04018cf0 g     F .text	00000024 _fputwc_r
0401ffc0 g     O .rodata	00000028 __mprec_bigtens
04005908  w    F .text	0000002c _ZN14EthernetClientneEb
040146dc g     F .text	00000104 __s2b
0400be54 g     F .text	00000018 abort
0401c0f8 g     F .text	000000a8 .hidden __floatunsidf
040094ec  w    F .text	0000003c _ZN10W5100Class8readSnCREh
04014db4 g     F .text	00000060 __mcmp
0400aeec g     F .text	000000b4 __cxa_end_catch
0401356c g     F .text	00000018 __fp_lock_all
0401e21c g     F .text	0000004c alt_ic_irq_enabled
0400b708 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
0400100c g     F .text	00000128 _ZN13DiscordClientC1Ev
0401e6ec g     F .text	0000009c alt_alarm_stop
04006540 g     F .text	00000088 _ZN11EthernetUDP5writeEPKhj
0401fb84  w    O .rodata	00000050 _ZTV11EthernetUDP
0400854c g     F .text	0000002c _ZN9IPAddressC1Ev
04004154 g     F .text	00000044 _ZN13EthernetClass7localIPEv
040058d8  w    F .text	00000030 _ZN14EthernetClienteqEb
040397c0 g     O .bss	00000004 alt_irq_active
04009444  w    F .text	0000002c _ZN10W5100Class17readPSTATUS_W5200Ev
0400b348 g     F .text	00000018 _ZSt9terminatev
04003db0 g     F .text	00000068 _ZN13EthernetClass5beginEPh9IPAddressS1_
040000fc g     F .exceptions	000000d4 alt_irq_handler
0402b9f8 g     O .rwdata	00000028 alt_dev_null
0402cc3c g     O .rwdata	00000006 mac
04004a24  w    F .text	00000020 _ZN10W5100Class7getChipEv
04000400 g     F .text	0000013c draw_rectangle
0400b734 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
04003fcc g     F .text	00000060 _ZN13EthernetClass14hardwareStatusEv
0400199c  w    F .text	00000034 _ZN6ClientC2Ev
040047d0  w    F .text	00000038 _ZN10W5100Class8writeGAREPKh
0401fd5c  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
0401de9c g     F .text	00000048 alt_dcache_flush_all
040147e0 g     F .text	00000068 __hi0bits
04039764 g     O .bss	00000001 Ethernet
04008870 g     F .text	00000044 _ZNK9IPAddresseqEPKh
0402cc54  w    O .rwdata	00000008 _ZTISt9exception
0402cc04  w    O .rwdata	00000008 _ZTI6Client
040083b0  w    F .text	00000064 _ZN10W5100Class12writeSnRX_RDEht
0401bf9c g     F .text	00000080 .hidden __fixdfsi
0400727c g     F .text	00000040 _ZN13EthernetClass16socketDisconnectEh
04007edc  w    F .text	0000006c _ZN10W5100Class7writeSnEhth
04008578 g     F .text	00000070 _ZN9IPAddressC2Ehhhh
0400687c g     F .text	0000006c _ZN11EthernetUDP4peekEv
04007fbc  w    F .text	00000050 _ZN10W5100Class9writeSnMREhh
0402ccb0 g       *ABS*	00000000 __ram_rwdata_end
040085e8 g     F .text	00000034 _ZN9IPAddressC2Em
04003a6c  w    F .text	00000028 _ZNK9IPAddresscvmEv
040034c0 g     F .text	000004f8 _ZN9DNSClient15ProcessResponseEtR9IPAddress
04009b6c g     F .text	00000004 _ZNSt9type_infoD1Ev
0402cc90 g     O .rwdata	00000008 alt_dev_list
0400b734 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
04008514  w    F .text	00000038 _ZN10W5100Class23hasOffsetAddressMappingEv
04007e38  w    F .text	00000044 _ZN10W5100Class4readEt
0401ccf4 g     F .text	000000f8 write
0400805c  w    F .text	0000003c _ZN10W5100Class8readSnIREh
040154e8 g     F .text	000000a0 _putc_r
04039758 g     O .bss	00000004 _ZN13EthernetClass5_dhcpE
04009b80 g     F .text	00000004 _ZNSt9type_infoD0Ev
0402021c g       *ABS*	00000000 __ram_rodata_end
0401c3ac g     F .text	000000b0 fstat
04006390 g     F .text	000000c4 _ZN11EthernetUDP11beginPacketEPKct
0400625c g     F .text	000000a8 _ZN11EthernetUDP5beginEt
0401fb38  w    O .rodata	00000011 _ZTS14EthernetClient
0401fec4  w    O .rodata	0000000c _ZTIN9__gnu_cxx20recursive_init_errorE
0401c598 g     F .text	00000130 kill
0401ae94 g     F .text	000000f4 .hidden __ledf2
04001190 g     F .text	00000658 _ZN13DiscordClient12fetchChannelEPKch
04014b2c g     F .text	00000140 __pow5mult
04017284 g     F .text	0000145c ___vfiprintf_internal_r
040397b0 g     O .bss	00000004 __nlocale_changed
0400b8dc g     F .text	00000058 .hidden __umodsi3
04009b78 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
04008138  w    F .text	00000048 _ZN10W5100Class11writeSnDHAREhPh
0400b39c g     F .text	00000010 _ZSt13get_terminatev
04008180  w    F .text	00000048 _ZN10W5100Class11writeSnDIPREhPh
040399b4 g       *ABS*	00000000 end
0401fb70  w    O .rodata	00000011 _ZTS14EthernetServer
04009204 g     F .text	0000006c _ZN10W5100Class9execCmdSnEh7SockCMD
04008a88 g     F .text	00000074 _ZN10W5100Class9softResetEv
04006af8 g     F .text	00000044 _ZN13EthernetClass14socketPortRandEt
0400bdc8 g     F .text	00000018 .hidden _Unwind_DeleteException
04008d64 g     F .text	000000a8 _ZN10W5100Class13getLinkStatusEv
040080d4  w    F .text	00000064 _ZN10W5100Class11writeSnPORTEht
0401d024 g     F .text	000000c0 altera_avalon_jtag_uart_init
040061f4  w    F .text	00000068 _ZN14EthernetClientC2Eh
040042f4 g     F .text	0000004c _ZN13EthernetClass12setGatewayIPE9IPAddress
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04009418  w    F .text	0000002c _ZN10W5100Class18readVERSIONR_W5500Ev
0400b100 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0401ef4d g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401db9c g     F .text	0000007c alt_avalon_timer_sc_init
0401c1a0 g     F .text	00000064 .hidden __clzsi2
04004990  w    F .text	00000054 _ZN10W5100Class8writeRTREt
04001134 g     F .text	0000005c _ZN13DiscordClientD1Ev
0400afc0 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
04005204 g     F .text	00000088 _ZN14EthernetClient4peekEv
0401d704 g     F .text	00000224 altera_avalon_jtag_uart_write
040061f4  w    F .text	00000068 _ZN14EthernetClientC1Eh
0401355c g     F .text	00000004 __sfp_lock_acquire
0401fdec  w    O .rodata	00000012 _ZTSSt13bad_exception
04005524 g     F .text	00000058 _ZN14EthernetClient6statusEv
040142ac g     F .text	000000e4 memchr
0400f2a8 g     F .text	000021f8 ___vfprintf_internal_r
0400ce90 g     F .text	00000058 _sprintf_r
04005980  w    F .text	00000038 _ZN14EthernetClient20setConnectionTimeoutEt
040136c0 g     F .text	00000310 _free_r
04003f38 g     F .text	0000003c _ZN13EthernetClass4initEh
0401409c g     F .text	00000010 __locale_mb_cur_max
040081c8  w    F .text	00000064 _ZN10W5100Class12writeSnDPORTEht
0401ed80 g     F .text	00000180 __call_exitprocs
04007d00 g     F .text	000000a8 _ZN13EthernetClass13socketSendUDPEh
040397ac g     O .bss	00000004 __mlocale_changed
0402cc78 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
040397c4 g     O .bss	00000004 _alt_tick_rate
0401fcb0  w    O .rodata	0000000d _ZTSSt9type_info
0400087c g     F .text	00000608 draw_string
0400abd0 g     F .text	0000000c _ZNKSt9bad_alloc4whatEv
0400ad7c g     F .text	00000020 __cxa_pure_virtual
04014c6c g     F .text	00000148 __lshift
040044e0  w    F .text	00000064 _ZN11EthernetUDPC1Ev
0401d928 g     F .text	000001fc alt_avalon_spi_command
0401fd0c  w    O .rodata	00000014 _ZTVSt9bad_alloc
040397c8 g     O .bss	00000004 _alt_nticks
0400cdf4 g     F .text	00000018 signal
0401c9c4 g     F .text	000000fc read
0401ce58 g     F .text	00000068 alt_sys_init
04015d64 g     F .text	000001d0 __ssprint_r
04002f78 g     F .text	00000040 _ZN9DNSClient5beginERK9IPAddress
0401ec68 g     F .text	00000118 __register_exitproc
0401fcf0  w    O .rodata	0000000d _ZTSSt9bad_alloc
04002ef0  w    F .text	00000038 _ZNK9IPAddresseqERKS_
04005870  w    F .text	00000038 _ZN14EthernetClientD0Ev
040098ec g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0400528c g     F .text	00000060 _ZN14EthernetClient4readEv
04014934 g     F .text	000001f8 __multiply
0401d390 g     F .text	00000068 altera_avalon_jtag_uart_close
04006304 g     F .text	0000002c _ZN11EthernetUDP9availableEv
0402021c g       *ABS*	00000000 __ram_rwdata_start
0400bc24 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0401ef80 g       *ABS*	00000000 __ram_rodata_start
0403988c g     O .bss	00000028 __malloc_current_mallinfo
0400bd38 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
04015180 g     F .text	0000014c __d2b
0401fe8c  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
040018d4 g     F .text	00000038 _ZN13DiscordClient7getLineEh
04009b6c g     F .text	00000004 _ZNSt9type_infoD2Ev
04005828  w    F .text	00000048 _ZN14EthernetClientD1Ev
0400b738 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
04039782 g     O .bss	00000001 W5100
04005c44 g     F .text	000001a4 _ZN14EthernetServer9availableEv
04002fb8 g     F .text	00000130 _ZN9DNSClient9inet_atonEPKcR9IPAddress
040048b0  w    F .text	00000038 _ZN10W5100Class9writeSHAREPKh
04009ae8 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
040044ac  w    F .text	00000034 _ZN3UDPC1Ev
040049e4  w    F .text	00000040 _ZN10W5100Class8writeRCREh
0401cec0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401ea4c g     F .text	000000a4 alt_get_fd
04007f48  w    F .text	00000074 _ZN10W5100Class7writeSnEhtPht
040058a8  w    F .text	00000030 _ZN14EthernetClientcvbEv
0401dd44 g     F .text	00000158 alt_busy_sleep
04007a00 g     F .text	00000138 _ZN13EthernetClass10socketSendEhPKht
040066fc g     F .text	00000094 _ZN11EthernetUDP4readEv
0402cc64  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0400949c  w    F .text	00000050 _ZN10W5100Class9writeSnCREhh
04018970 g     F .text	00000054 _close_r
04004878  w    F .text	00000038 _ZN10W5100Class8readSUBREPh
040056e4 g     F .text	00000060 _ZN14EthernetClient10remotePortEv
0400425c g     F .text	0000004c _ZN13EthernetClass10setLocalIPE9IPAddress
04002f28  w    F .text	00000028 _ZN11EthernetUDP8remoteIPEv
04009470  w    F .text	0000002c _ZN10W5100Class17readPHYCFGR_W5500Ev
0400c6ec g     F .text	0000007c memcmp
0401cf80 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040399b4 g       *ABS*	00000000 __alt_stack_base
0401cfd0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0401fed0  w    O .rodata	00000014 _ZTVN9__gnu_cxx20recursive_init_errorE
0400abec g     F .text	00000034 _ZNSt9bad_allocD0Ev
040098a8 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
040019d0  w    F .text	00000060 _ZN14EthernetClientC2Ev
04011578 g     F .text	00000154 __swsetup_r
0400bd7c g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
0401a448 g     F .text	000008e8 .hidden __divdf3
04003e84 g     F .text	000000b4 _ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_
0401341c g     F .text	00000118 __sfp
040153e4 g     F .text	00000078 __copybits
040046cc  w    F .text	00000038 _ZN10W5100Class12getIPAddressEPh
04009b70 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0402b578 g     O .rwdata	00000408 __malloc_av_
04013568 g     F .text	00000004 __sinit_lock_release
0401af88 g     F .text	00000718 .hidden __muldf3
04015c28 g     F .text	00000054 __sread
0401fe50  w    O .rodata	00000014 _ZTVSt9exception
0400b730 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
0401e944 g     F .text	00000108 alt_find_file
0401df20 g     F .text	000000a4 alt_dev_llist_insert
0401c940 g     F .text	00000024 __malloc_lock
0401cb24 g     F .text	000000b0 sbrk
0400d0c8 g     F .text	000021d8 ___svfprintf_internal_r
04004958  w    F .text	00000038 _ZN10W5100Class8readSIPREPh
0401fd8c  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0400ac68 g     F .text	00000090 __cxa_throw
04013170 g     F .text	0000005c _fflush_r
0400bbe8 g     F .text	00000010 .hidden _Unwind_SetIP
040189c4 g     F .text	000000c4 _calloc_r
04002db0 g     F .text	000000b0 _ZN9DhcpClass9printByteEPch
040085e8 g     F .text	00000034 _ZN9IPAddressC1Em
04039744 g       *ABS*	00000000 __bss_start
0400c8b0 g     F .text	00000128 memset
040044ac  w    F .text	00000034 _ZN3UDPC2Ev
040095c8 g     F .text	000001e0 main
04006b3c g     F .text	0000029c _ZN13EthernetClass11socketBeginEht
040397bc g     O .bss	00000004 alt_envp
0400402c g     F .text	000000f0 _ZN13EthernetClass8maintainEv
04039798 g     O .bss	00000004 __malloc_max_total_mem
04006030 g     F .text	0000002c _ZN14EthernetServer5writeEh
0401cf20 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040188f8 g     F .text	00000018 __swbuf
0400b6ec g     F .text	0000000c __cxa_get_globals_fast
0400457c  w    F .text	00000038 _ZN10W5100Class12getGatewayIpEPh
0400557c g     F .text	00000084 _ZN14EthernetClienteqERKS_
0400b74c g     F .text	00000034 _ZN9__gnu_cxx20recursive_init_errorD0Ev
040076e4 g     F .text	000000ac _ZN13EthernetClass19socketRecvAvailableEh
04015d5c g     F .text	00000008 __sclose
04004220 g     F .text	0000003c _ZN13EthernetClass13setMACAddressEPKh
08000000 g       *ABS*	00000000 __alt_heap_limit
04018b78 g     F .text	00000014 fclose
040118cc g     F .text	00001688 _dtoa_r
0400bee0 g     F .text	0000080c _malloc_r
04019060 g     F .text	00000030 __ascii_wctomb
0400b718 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0402cc9c g     O .rwdata	00000004 alt_errno
0401fb64  w    O .rodata	0000000c _ZTI14EthernetServer
0400ce0c g     F .text	00000010 _init_signal
0401fd80  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
040093ec  w    F .text	0000002c _ZN10W5100Class18readVERSIONR_W5200Ev
04013e8c g     F .text	000000c4 _fwalk
0400b708 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
0402cc14  w    O .rwdata	00000008 _ZTI3UDP
04006a80  w    F .text	00000050 _ZN11EthernetUDP4readEPcj
04015588 g     F .text	000000c8 putc
0400b780 g     F .text	00000084 .hidden __divsi3
0401359c g     F .text	00000124 _malloc_trim_r
0401ef80 g       *ABS*	00000000 __CTOR_END__
0400cf54 g     F .text	000000dc strcmp
0401ef80 g       *ABS*	00000000 __flash_rodata_start
0401fe78  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0401ef80 g       *ABS*	00000000 __DTOR_LIST__
0400231c g     F .text	000007c8 _ZN9DhcpClass17parseDHCPResponseEmRm
040043a0 g     F .text	00000044 _ZN13EthernetClass22setRetransmissionCountEh
0401ad30 g     F .text	00000088 .hidden __nedf2
040048e8  w    F .text	00000038 _ZN10W5100Class8readSHAREPh
0401ce20 g     F .text	00000038 alt_irq_init
04007bb0 g     F .text	00000094 _ZN13EthernetClass16socketBufferDataEhtPKht
0401cac0 g     F .text	00000064 alt_release_fd
040098b8 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0400cee8 g     F .text	0000006c sprintf
040200f0 g     O .rodata	00000100 .hidden __clz_tab
040397a8 g     O .bss	00000004 _PathLocale
04007b38 g     F .text	00000078 _ZN13EthernetClass19socketSendAvailableEh
0401ec1c g     F .text	00000014 atexit
0400ae20 g     F .text	00000010 __cxa_guard_release
04018910 g     F .text	00000060 _write_r
040140cc g     F .text	00000018 setlocale
04008944 g     F .text	00000144 _ZN10W5100Class4initEv
040017e8 g     F .text	000000ec _ZN13DiscordClient15discordStartPosEPKcj
0400bc1c g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0400b694 g     F .text	00000058 __cxa_call_terminate
0402cc2c  w    O .rwdata	00000008 _ZTS6Server
0402cc74 g     O .rwdata	00000004 _impure_ptr
0402cc5c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
040397b4 g     O .bss	00000004 alt_argc
04012f54 g     F .text	0000021c __sflush_r
0400500c g     F .text	0000005c _ZN14EthernetClient5printEPKc
0401e024 g     F .text	00000060 _do_dtors
040140b8 g     F .text	00000008 __locale_cjk_lang
04008e0c g     F .text	000001a4 _ZN10W5100Class5writeEtPKht
0402cc1c  w    O .rwdata	00000005 _ZTS3UDP
0400b3c0 g     F .text	00000010 _ZSt14get_unexpectedv
04000020 g       .exceptions	00000000 alt_irq_entry
04015010 g     F .text	00000064 __ulp
0400bc0c g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
04013584 g     F .text	00000018 __fp_unlock_all
0400411c g     F .text	00000038 _ZN13EthernetClass10MACAddressEPh
0402cc88 g     O .rwdata	00000008 alt_fs_list
0401fe2c  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
0401fa6c  w    O .rodata	0000004c _ZTV3UDP
04004a74  w    F .text	0000003c _ZN9DhcpClassC2Ev
0400bbf8 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
0400ae18 g     F .text	00000008 __cxa_guard_abort
0400ae38 g     F .text	000000b4 __cxa_begin_catch
04008afc g     F .text	000000b8 _ZN10W5100Class7isW5100Ev
0400b050 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0400b360 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
04039754 g     O .bss	00000004 _ZN13EthernetClass17_dnsServerAddressE
0400538c g     F .text	000000e8 _ZN14EthernetClient4stopEv
04000020 g       *ABS*	00000000 __ram_exceptions_start
040140e4 g     F .text	0000000c localeconv
040041dc g     F .text	00000044 _ZN13EthernetClass9gatewayIPEv
04008350  w    F .text	00000060 _ZN10W5100Class12readSnRX_RSREh
0400b728 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
04008098  w    F .text	0000003c _ZN10W5100Class8readSnSREh
0402cc6c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
04007e7c  w    F .text	00000060 _ZN10W5100Class6readSnEht
0401e0b8 g     F .text	00000050 alt_ic_isr_register
04004f80 g     F .text	0000008c _ZN14EthernetClient5writeEPKhj
04000334 g     F .text	000000cc init_color_palette
0400b530 g     F .text	00000060 __cxa_allocate_exception
0401fc78  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
04003a48  w    F .text	00000024 _ZN9IPAddress11raw_addressEv
04009bc8 g     F .text	00000014 _ZSt15set_new_handlerPFvvE
0402ccb0 g       *ABS*	00000000 _edata
040399b4 g       *ABS*	00000000 _end
0402cc4c g     O .rwdata	00000001 _ZSt7nothrow
0400a3a0 g     F .text	00000600 __gxx_personality_sj0
0400447c  w    F .text	00000030 _ZN3UDP14beginMulticastE9IPAddresst
04018b8c g     F .text	00000164 __fputwc
0400605c g     F .text	00000108 _ZN14EthernetServer5writeEPKhj
0402cc0c  w    O .rwdata	00000008 _ZTS6Client
04000244 g       *ABS*	00000000 __ram_exceptions_end
0401d3f8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040052ec g     F .text	000000a0 _ZN14EthernetClient5flushEv
04004a44  w    F .text	00000030 _ZN10W5100Class5setSSEh
04001b20 g     F .text	00000388 _ZN9DhcpClass18request_DHCP_leaseEv
0400b704 g     F .text	00000004 _ZNSt9exceptionD1Ev
0401e190 g     F .text	0000008c alt_ic_irq_disable
0400720c g     F .text	00000070 _ZN13EthernetClass13socketConnectEhPht
04015c84 g     F .text	0000007c __swrite
04009838 g     F .text	00000070 _Znwj
04005ab4  w    F .text	00000048 _ZN10W5100Class10readSnDIPREhPh
0402cc7c g     O .rwdata	00000004 __malloc_trim_threshold
040140ac g     F .text	0000000c __locale_msgcharset
0401ec30 g     F .text	00000038 exit
0400bb9c g     F .text	0000001c .hidden _Unwind_SetGR
040059b8  w    F .text	00000028 _ZN10W5100Class7CH_BASEEv
04013f50 g     F .text	000000c4 _fwalk_reent
04009a4c g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
04014e14 g     F .text	000001fc __mdiff
04007168 g     F .text	00000040 _ZN13EthernetClass11socketCloseEh
0400b288 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
04006790 g     F .text	000000ec _ZN11EthernetUDP4readEPhj
0400b804 g     F .text	00000074 .hidden __modsi3
04004f2c g     F .text	00000054 _ZN14EthernetClient5writeEh
04009578  w    F .text	00000050 _ZN10W5100Class14writeSnTX_SIZEEhh
04001adc g     F .text	00000044 _ZN9DhcpClass16reset_DHCP_leaseEv
0400abdc g     F .text	00000010 _ZNSt9bad_allocD1Ev
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
040068e8 g     F .text	00000024 _ZN11EthernetUDP5flushEv
04013560 g     F .text	00000004 __sfp_lock_release
0401fe00  w    O .rodata	0000000c _ZTISt13bad_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
04003d50 g     F .text	00000060 _ZN13EthernetClass5beginEPh9IPAddress
04004744  w    F .text	00000040 _ZN10W5100Class22setRetransmissionCountEh
04009528  w    F .text	00000050 _ZN10W5100Class14writeSnRX_SIZEEhh
0403982c g     O .bss	00000010 _ZN14EthernetServer11server_portE
0401c33c g     F .text	00000034 _exit
04006454 g     F .text	00000080 _ZN11EthernetUDP11beginPacketE9IPAddresst
04005660 g     F .text	00000084 _ZN14EthernetClient8remoteIPEv
0401dc18 g     F .text	0000012c alt_alarm_start
040045b4  w    F .text	00000038 _ZN10W5100Class13setSubnetMaskEPKh
0400bb68 g     F .text	0000001c .hidden _Unwind_GetGR
0400b6f8 g     F .text	0000000c __cxa_get_globals
040140f0 g     F .text	000001bc __smakebuf_r
0402cc50 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0400d030 g     F .text	00000098 strlen
0400cb8c g     F .text	0000006c _init_signal_r
0402cc44  w    O .rwdata	00000008 _ZTISt9type_info
0401e598 g     F .text	00000154 open
0401fabc  w    O .rodata	00000070 _ZTV14EthernetClient
0401adb8 g     F .text	000000dc .hidden __gedf2
04008474  w    F .text	00000050 _ZN10W5100Class5SBASEEh
04004624  w    F .text	00000038 _ZN10W5100Class13setMACAddressEPKh
0401fddc  w    O .rodata	0000000d _ZTSSt9exception
0402cc36 g     O .rwdata	00000001 _ZN10W5100Class6ss_pinE
0400be6c g     F .text	0000004c clock
04005b5c  w    F .text	00000048 _ZN9DNSClientC1Ev
0401fbd4  w    O .rodata	0000000c _ZTI11EthernetUDP
0402cc84 g     O .rwdata	00000004 __wctomb
0400b724 g     F .text	00000004 _ZNSt9exceptionD0Ev
0401726c g     F .text	00000018 __sprint_r
0401e084 g     F .text	00000034 alt_icache_flush_all
04003278 g     F .text	00000248 _ZN9DNSClient12BuildRequestEPKc
0401fea0  w    O .rodata	00000023 _ZTSN9__gnu_cxx20recursive_init_errorE
0400bc14 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
04009340  w    F .text	0000002c _ZN10W5100Class6readMREv
0402cca4 g     O .rwdata	00000004 alt_priority_mask
04005f70 g     F .text	000000c0 _ZN14EthernetServercvbEv
040064d4 g     F .text	00000040 _ZN11EthernetUDP9endPacketEv
0401e108 g     F .text	00000088 alt_ic_irq_enable
040114a0 g     F .text	0000001c __vfprintf_internal
04019090 g     F .text	0000005c _wctomb_r
0400861c g     F .text	00000044 _ZN9IPAddressC2EPKh
0401b6a0 g     F .text	000008fc .hidden __subdf3
04003e18 g     F .text	0000006c _ZN13EthernetClass5beginEPh9IPAddressS1_S1_
04004a74  w    F .text	0000003c _ZN9DhcpClassC1Ev
04003a94  w    F .text	00000030 _ZN9IPAddressixEi
0400100c g     F .text	00000128 _ZN13DiscordClientC2Ev
04008780 g     F .text	00000078 _ZN9IPAddress5printEv
04014848 g     F .text	000000b0 __lo0bits
0402cca8 g     O .rwdata	00000008 alt_alarm_list
0401dfc4 g     F .text	00000060 _do_ctors
0400ce1c g     F .text	00000014 __sigtramp
0400adbc g     F .text	0000005c __cxa_guard_acquire
04018fa0 g     F .text	000000c0 wcrtomb
040093ac  w    F .text	00000040 _ZN10W5100Class9writeTMSREh
04005130 g     F .text	0000005c _ZN14EthernetClient9availableEv
04002cf0 g     F .text	00000040 _ZN9DhcpClass12getGatewayIpEv
04006330 g     F .text	00000060 _ZN11EthernetUDP4stopEv
0401c240 g     F .text	000000d0 close
040087f8 g     F .text	00000044 _ZN9IPAddressaSEPKh
040030e8 g     F .text	00000190 _ZN9DNSClient13getHostByNameEPKcR9IPAddresst
04007c44 g     F .text	000000bc _ZN13EthernetClass14socketStartUDPEhPht
0401fe0c  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0401c730 g     F .text	00000084 alt_load
04009b84 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0400b73c g     F .text	00000010 _ZN9__gnu_cxx20recursive_init_errorD2Ev
04039780 g     O .bss	00000001 _ZN10W5100Class4chipE
04004808  w    F .text	00000038 _ZN10W5100Class7readGAREPh
04018d14 g     F .text	00000080 fputwc
0400cde0 g     F .text	00000014 raise
0400becc g     F .text	00000014 free
04013564 g     F .text	00000004 __sinit_lock_acquire
040145bc g     F .text	00000120 __multadd
0400b060 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
04014594 g     F .text	00000028 _Bfree
04004ab0 g     F .text	0000010c _ZN14EthernetClient7connectEPKct



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__reset-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810134 	movhi	r2,1028
 4000140:	10a62d04 	addi	r2,r2,-26444
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810134 	movhi	r2,1028
 4000158:	10a62d04 	addi	r2,r2,-26444
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d092f317 	ldw	r2,19404(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d092f317 	ldw	r2,19404(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_data_end+0xfc000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 4000260:	d6930014 	ori	gp,gp,19456
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 4000268:	10a5d114 	ori	r2,r2,38724

    movhi r3, %hi(__bss_end)
 400026c:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 4000270:	18e66d14 	ori	r3,r3,39348

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_data_end+0xfc000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	401c7300 	call	401c730 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	401c8c40 	call	401c8c4 <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_data_end+0xfc00028c>

04000290 <set_color_palette>:
#include "pixel_vga.h"

void set_color_palette(alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue) {
 4000290:	defffa04 	addi	sp,sp,-24
 4000294:	df000515 	stw	fp,20(sp)
 4000298:	df000504 	addi	fp,sp,20
 400029c:	2011883a 	mov	r8,r4
 40002a0:	2809883a 	mov	r4,r5
 40002a4:	3007883a 	mov	r3,r6
 40002a8:	3805883a 	mov	r2,r7
 40002ac:	e23ffc05 	stb	r8,-16(fp)
 40002b0:	e13ffd05 	stb	r4,-12(fp)
 40002b4:	e0fffe05 	stb	r3,-8(fp)
 40002b8:	e0bfff05 	stb	r2,-4(fp)
	// Pointer to the beginning of VRAM
    volatile alt_u32* vram_32 = (alt_u32*) VRAM;
 40002bc:	d0a00017 	ldw	r2,-32768(gp)
 40002c0:	e0bffb15 	stw	r2,-20(fp)

    // Point to start of color palette
    vram_32 += PALETTE_OFFSET + color;
 40002c4:	e0bffc03 	ldbu	r2,-16(fp)
 40002c8:	1092c004 	addi	r2,r2,19200
 40002cc:	1085883a 	add	r2,r2,r2
 40002d0:	1085883a 	add	r2,r2,r2
 40002d4:	1007883a 	mov	r3,r2
 40002d8:	e0bffb17 	ldw	r2,-20(fp)
 40002dc:	10c5883a 	add	r2,r2,r3
 40002e0:	e0bffb15 	stw	r2,-20(fp)

    // Set the color
    *vram_32 = (((alt_u32)red / 16) << 8) + (((alt_u32)green / 16) << 4) + ((alt_u32)blue / 16);
 40002e4:	e0bffd03 	ldbu	r2,-12(fp)
 40002e8:	1004d13a 	srli	r2,r2,4
 40002ec:	10803fcc 	andi	r2,r2,255
 40002f0:	1006923a 	slli	r3,r2,8
 40002f4:	e0bffe03 	ldbu	r2,-8(fp)
 40002f8:	1004d13a 	srli	r2,r2,4
 40002fc:	10803fcc 	andi	r2,r2,255
 4000300:	1004913a 	slli	r2,r2,4
 4000304:	1887883a 	add	r3,r3,r2
 4000308:	e0bfff03 	ldbu	r2,-4(fp)
 400030c:	1004d13a 	srli	r2,r2,4
 4000310:	10803fcc 	andi	r2,r2,255
 4000314:	1887883a 	add	r3,r3,r2
 4000318:	e0bffb17 	ldw	r2,-20(fp)
 400031c:	10c00015 	stw	r3,0(r2)
}
 4000320:	0001883a 	nop
 4000324:	e037883a 	mov	sp,fp
 4000328:	df000017 	ldw	fp,0(sp)
 400032c:	dec00104 	addi	sp,sp,4
 4000330:	f800283a 	ret

04000334 <init_color_palette>:

void init_color_palette() {
 4000334:	defffd04 	addi	sp,sp,-12
 4000338:	dfc00215 	stw	ra,8(sp)
 400033c:	df000115 	stw	fp,4(sp)
 4000340:	df000104 	addi	fp,sp,4
    // Initialize the color palette with the colors declared in the struct header
    for(alt_u8 i=0; i<4; i++) {
 4000344:	e03fff05 	stb	zero,-4(fp)
 4000348:	00002406 	br	40003dc <init_color_palette+0xa8>
        set_color_palette(i, colors[i].red, colors[i].green, colors[i].blue);
 400034c:	e23fff03 	ldbu	r8,-4(fp)
 4000350:	e13fff03 	ldbu	r4,-4(fp)
 4000354:	00c100b4 	movhi	r3,1026
 4000358:	18d616c4 	addi	r3,r3,22619
 400035c:	2005883a 	mov	r2,r4
 4000360:	1085883a 	add	r2,r2,r2
 4000364:	1105883a 	add	r2,r2,r4
 4000368:	1885883a 	add	r2,r3,r2
 400036c:	10800003 	ldbu	r2,0(r2)
 4000370:	11403fcc 	andi	r5,r2,255
 4000374:	e13fff03 	ldbu	r4,-4(fp)
 4000378:	00c100b4 	movhi	r3,1026
 400037c:	18d616c4 	addi	r3,r3,22619
 4000380:	2005883a 	mov	r2,r4
 4000384:	1085883a 	add	r2,r2,r2
 4000388:	1105883a 	add	r2,r2,r4
 400038c:	1885883a 	add	r2,r3,r2
 4000390:	10800044 	addi	r2,r2,1
 4000394:	10800003 	ldbu	r2,0(r2)
 4000398:	11803fcc 	andi	r6,r2,255
 400039c:	e13fff03 	ldbu	r4,-4(fp)
 40003a0:	00c100b4 	movhi	r3,1026
 40003a4:	18d616c4 	addi	r3,r3,22619
 40003a8:	2005883a 	mov	r2,r4
 40003ac:	1085883a 	add	r2,r2,r2
 40003b0:	1105883a 	add	r2,r2,r4
 40003b4:	1885883a 	add	r2,r3,r2
 40003b8:	10800084 	addi	r2,r2,2
 40003bc:	10800003 	ldbu	r2,0(r2)
 40003c0:	10803fcc 	andi	r2,r2,255
 40003c4:	100f883a 	mov	r7,r2
 40003c8:	4009883a 	mov	r4,r8
 40003cc:	40002900 	call	4000290 <set_color_palette>
    *vram_32 = (((alt_u32)red / 16) << 8) + (((alt_u32)green / 16) << 4) + ((alt_u32)blue / 16);
}

void init_color_palette() {
    // Initialize the color palette with the colors declared in the struct header
    for(alt_u8 i=0; i<4; i++) {
 40003d0:	e0bfff03 	ldbu	r2,-4(fp)
 40003d4:	10800044 	addi	r2,r2,1
 40003d8:	e0bfff05 	stb	r2,-4(fp)
 40003dc:	e0bfff03 	ldbu	r2,-4(fp)
 40003e0:	10800130 	cmpltui	r2,r2,4
 40003e4:	103fd91e 	bne	r2,zero,400034c <__alt_data_end+0xfc00034c>
        set_color_palette(i, colors[i].red, colors[i].green, colors[i].blue);
    }
}
 40003e8:	0001883a 	nop
 40003ec:	e037883a 	mov	sp,fp
 40003f0:	dfc00117 	ldw	ra,4(sp)
 40003f4:	df000017 	ldw	fp,0(sp)
 40003f8:	dec00204 	addi	sp,sp,8
 40003fc:	f800283a 	ret

04000400 <draw_rectangle>:

void draw_rectangle(alt_u32 x, alt_u32 y, alt_u32 width, alt_u32 height, alt_u8 color){
 4000400:	defff504 	addi	sp,sp,-44
 4000404:	dfc00a15 	stw	ra,40(sp)
 4000408:	df000915 	stw	fp,36(sp)
 400040c:	df000904 	addi	fp,sp,36
 4000410:	e13ffb15 	stw	r4,-20(fp)
 4000414:	e17ffc15 	stw	r5,-16(fp)
 4000418:	e1bffd15 	stw	r6,-12(fp)
 400041c:	e1fffe15 	stw	r7,-8(fp)
 4000420:	e0800217 	ldw	r2,8(fp)
 4000424:	e0bfff05 	stb	r2,-4(fp)
    // Validate the arguments
    if (x%16 != 0 | width%16 != 0)
 4000428:	e0bffb17 	ldw	r2,-20(fp)
 400042c:	108003cc 	andi	r2,r2,15
 4000430:	1004c03a 	cmpne	r2,r2,zero
 4000434:	1007883a 	mov	r3,r2
 4000438:	e0bffd17 	ldw	r2,-12(fp)
 400043c:	108003cc 	andi	r2,r2,15
 4000440:	1004c03a 	cmpne	r2,r2,zero
 4000444:	1884b03a 	or	r2,r3,r2
 4000448:	10803fcc 	andi	r2,r2,255
 400044c:	10000326 	beq	r2,zero,400045c <draw_rectangle+0x5c>
        printf("Invalid arguments passed to draw_rectangle!\n");
 4000450:	010100b4 	movhi	r4,1026
 4000454:	213be004 	addi	r4,r4,-4224
 4000458:	400cb240 	call	400cb24 <puts>

    // Initialize the color
    alt_u32 word = 0;
 400045c:	e03ff715 	stw	zero,-36(fp)
    for(alt_u8 p=0; p<16; p++) word += (color << (p*2));
 4000460:	e03ff805 	stb	zero,-32(fp)
 4000464:	00000b06 	br	4000494 <draw_rectangle+0x94>
 4000468:	e0ffff03 	ldbu	r3,-4(fp)
 400046c:	e0bff803 	ldbu	r2,-32(fp)
 4000470:	1085883a 	add	r2,r2,r2
 4000474:	1884983a 	sll	r2,r3,r2
 4000478:	1007883a 	mov	r3,r2
 400047c:	e0bff717 	ldw	r2,-36(fp)
 4000480:	10c5883a 	add	r2,r2,r3
 4000484:	e0bff715 	stw	r2,-36(fp)
 4000488:	e0bff803 	ldbu	r2,-32(fp)
 400048c:	10800044 	addi	r2,r2,1
 4000490:	e0bff805 	stb	r2,-32(fp)
 4000494:	e0bff803 	ldbu	r2,-32(fp)
 4000498:	10800430 	cmpltui	r2,r2,16
 400049c:	103ff21e 	bne	r2,zero,4000468 <__alt_data_end+0xfc000468>

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
 40004a0:	e0bffc17 	ldw	r2,-16(fp)
 40004a4:	e0bff915 	stw	r2,-28(fp)
 40004a8:	00001906 	br	4000510 <draw_rectangle+0x110>
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=16) {
 40004ac:	e0bffb17 	ldw	r2,-20(fp)
 40004b0:	e0bffa15 	stw	r2,-24(fp)
 40004b4:	00000e06 	br	40004f0 <draw_rectangle+0xf0>
            VRAM[(x_draw/16) + (y_draw*40)] = word;
 40004b8:	d0e00017 	ldw	r3,-32768(gp)
 40004bc:	e0bffa17 	ldw	r2,-24(fp)
 40004c0:	1008d13a 	srli	r4,r2,4
 40004c4:	e0bff917 	ldw	r2,-28(fp)
 40004c8:	10800a24 	muli	r2,r2,40
 40004cc:	2085883a 	add	r2,r4,r2
 40004d0:	1085883a 	add	r2,r2,r2
 40004d4:	1085883a 	add	r2,r2,r2
 40004d8:	1885883a 	add	r2,r3,r2
 40004dc:	e0fff717 	ldw	r3,-36(fp)
 40004e0:	10c00015 	stw	r3,0(r2)
    alt_u32 word = 0;
    for(alt_u8 p=0; p<16; p++) word += (color << (p*2));

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=16) {
 40004e4:	e0bffa17 	ldw	r2,-24(fp)
 40004e8:	10800404 	addi	r2,r2,16
 40004ec:	e0bffa15 	stw	r2,-24(fp)
 40004f0:	e0fffb17 	ldw	r3,-20(fp)
 40004f4:	e0bffd17 	ldw	r2,-12(fp)
 40004f8:	1885883a 	add	r2,r3,r2
 40004fc:	e0fffa17 	ldw	r3,-24(fp)
 4000500:	18bfed36 	bltu	r3,r2,40004b8 <__alt_data_end+0xfc0004b8>
    // Initialize the color
    alt_u32 word = 0;
    for(alt_u8 p=0; p<16; p++) word += (color << (p*2));

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
 4000504:	e0bff917 	ldw	r2,-28(fp)
 4000508:	10800044 	addi	r2,r2,1
 400050c:	e0bff915 	stw	r2,-28(fp)
 4000510:	e0fffc17 	ldw	r3,-16(fp)
 4000514:	e0bffe17 	ldw	r2,-8(fp)
 4000518:	1885883a 	add	r2,r3,r2
 400051c:	e0fff917 	ldw	r3,-28(fp)
 4000520:	18bfe236 	bltu	r3,r2,40004ac <__alt_data_end+0xfc0004ac>
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=16) {
            VRAM[(x_draw/16) + (y_draw*40)] = word;
        }
    }
}
 4000524:	0001883a 	nop
 4000528:	e037883a 	mov	sp,fp
 400052c:	dfc00117 	ldw	ra,4(sp)
 4000530:	df000017 	ldw	fp,0(sp)
 4000534:	dec00204 	addi	sp,sp,8
 4000538:	f800283a 	ret

0400053c <debug>:

void debug() {
 400053c:	defffa04 	addi	sp,sp,-24
 4000540:	dfc00515 	stw	ra,20(sp)
 4000544:	df000415 	stw	fp,16(sp)
 4000548:	df000404 	addi	fp,sp,16
    // Clear the screen
    draw_rectangle(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0);
 400054c:	d8000015 	stw	zero,0(sp)
 4000550:	01c07804 	movi	r7,480
 4000554:	0180a004 	movi	r6,640
 4000558:	000b883a 	mov	r5,zero
 400055c:	0009883a 	mov	r4,zero
 4000560:	40004000 	call	4000400 <draw_rectangle>

    // Set each word to a different color
    for(alt_u32 i=0; i < 100; i++){
 4000564:	e03ffd15 	stw	zero,-12(fp)
 4000568:	00001c06 	br	40005dc <debug+0xa0>
        alt_u32 word = 0;
 400056c:	e03ffe15 	stw	zero,-8(fp)
        for(alt_u8 p=0; p<8; p++) word += ((i%4) << (p*4));
 4000570:	e03fff05 	stb	zero,-4(fp)
 4000574:	00000c06 	br	40005a8 <debug+0x6c>
 4000578:	e0bffd17 	ldw	r2,-12(fp)
 400057c:	10c000cc 	andi	r3,r2,3
 4000580:	e0bfff03 	ldbu	r2,-4(fp)
 4000584:	1085883a 	add	r2,r2,r2
 4000588:	1085883a 	add	r2,r2,r2
 400058c:	1884983a 	sll	r2,r3,r2
 4000590:	e0fffe17 	ldw	r3,-8(fp)
 4000594:	1885883a 	add	r2,r3,r2
 4000598:	e0bffe15 	stw	r2,-8(fp)
 400059c:	e0bfff03 	ldbu	r2,-4(fp)
 40005a0:	10800044 	addi	r2,r2,1
 40005a4:	e0bfff05 	stb	r2,-4(fp)
 40005a8:	e0bfff03 	ldbu	r2,-4(fp)
 40005ac:	10800230 	cmpltui	r2,r2,8
 40005b0:	103ff11e 	bne	r2,zero,4000578 <__alt_data_end+0xfc000578>
        VRAM[i] = word;
 40005b4:	d0e00017 	ldw	r3,-32768(gp)
 40005b8:	e0bffd17 	ldw	r2,-12(fp)
 40005bc:	1085883a 	add	r2,r2,r2
 40005c0:	1085883a 	add	r2,r2,r2
 40005c4:	1885883a 	add	r2,r3,r2
 40005c8:	e0fffe17 	ldw	r3,-8(fp)
 40005cc:	10c00015 	stw	r3,0(r2)
void debug() {
    // Clear the screen
    draw_rectangle(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0);

    // Set each word to a different color
    for(alt_u32 i=0; i < 100; i++){
 40005d0:	e0bffd17 	ldw	r2,-12(fp)
 40005d4:	10800044 	addi	r2,r2,1
 40005d8:	e0bffd15 	stw	r2,-12(fp)
 40005dc:	e0bffd17 	ldw	r2,-12(fp)
 40005e0:	10801930 	cmpltui	r2,r2,100
 40005e4:	103fe11e 	bne	r2,zero,400056c <__alt_data_end+0xfc00056c>
        alt_u32 word = 0;
        for(alt_u8 p=0; p<8; p++) word += ((i%4) << (p*4));
        VRAM[i] = word;
    }
}
 40005e8:	0001883a 	nop
 40005ec:	e037883a 	mov	sp,fp
 40005f0:	dfc00117 	ldw	ra,4(sp)
 40005f4:	df000017 	ldw	fp,0(sp)
 40005f8:	dec00204 	addi	sp,sp,8
 40005fc:	f800283a 	ret

04000600 <draw_background>:

void draw_background() {
 4000600:	defffd04 	addi	sp,sp,-12
 4000604:	dfc00215 	stw	ra,8(sp)
 4000608:	df000115 	stw	fp,4(sp)
 400060c:	df000104 	addi	fp,sp,4
    // Draw the sidebar background
    draw_rectangle(0, 0, SIDEBAR_WIDTH, SCREEN_HEIGHT, 0);
 4000610:	d8000015 	stw	zero,0(sp)
 4000614:	01c07804 	movi	r7,480
 4000618:	01802004 	movi	r6,128
 400061c:	000b883a 	mov	r5,zero
 4000620:	0009883a 	mov	r4,zero
 4000624:	40004000 	call	4000400 <draw_rectangle>

    // Draw the messages background
    draw_rectangle(SIDEBAR_WIDTH, 0, SCREEN_WIDTH-SIDEBAR_WIDTH, SCREEN_HEIGHT, 0);
 4000628:	d8000015 	stw	zero,0(sp)
 400062c:	01c07804 	movi	r7,480
 4000630:	01808004 	movi	r6,512
 4000634:	000b883a 	mov	r5,zero
 4000638:	01002004 	movi	r4,128
 400063c:	40004000 	call	4000400 <draw_rectangle>
}
 4000640:	0001883a 	nop
 4000644:	e037883a 	mov	sp,fp
 4000648:	dfc00117 	ldw	ra,4(sp)
 400064c:	df000017 	ldw	fp,0(sp)
 4000650:	dec00204 	addi	sp,sp,8
 4000654:	f800283a 	ret

04000658 <draw_char>:

void draw_char(alt_u8 x, alt_u8 y, alt_u8 render_code, struct FONT* font) {
 4000658:	defff004 	addi	sp,sp,-64
 400065c:	df000f15 	stw	fp,60(sp)
 4000660:	df000f04 	addi	fp,sp,60
 4000664:	2807883a 	mov	r3,r5
 4000668:	3005883a 	mov	r2,r6
 400066c:	e1ffff15 	stw	r7,-4(fp)
 4000670:	e13ffc05 	stb	r4,-16(fp)
 4000674:	e0fffd05 	stb	r3,-12(fp)
 4000678:	e0bffe05 	stb	r2,-8(fp)
    // Get the character metadata
    alt_u8  char_width = font->widths[render_code];
 400067c:	e0bfff17 	ldw	r2,-4(fp)
 4000680:	10c00217 	ldw	r3,8(r2)
 4000684:	e0bffe03 	ldbu	r2,-8(fp)
 4000688:	1885883a 	add	r2,r3,r2
 400068c:	10800003 	ldbu	r2,0(r2)
 4000690:	e0bff705 	stb	r2,-36(fp)
    alt_u8  char_height = font->height;
 4000694:	e0bfff17 	ldw	r2,-4(fp)
 4000698:	10800003 	ldbu	r2,0(r2)
 400069c:	e0bff745 	stb	r2,-35(fp)
    alt_u32 font_outer = font->indices[render_code];
 40006a0:	e0bfff17 	ldw	r2,-4(fp)
 40006a4:	10c00317 	ldw	r3,12(r2)
 40006a8:	e0bffe03 	ldbu	r2,-8(fp)
 40006ac:	1085883a 	add	r2,r2,r2
 40006b0:	1085883a 	add	r2,r2,r2
 40006b4:	1885883a 	add	r2,r3,r2
 40006b8:	10800017 	ldw	r2,0(r2)
 40006bc:	e0bff115 	stw	r2,-60(fp)
    alt_u8  font_inner = 0;
 40006c0:	e03ff205 	stb	zero,-56(fp)

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
 40006c4:	e0fffc03 	ldbu	r3,-16(fp)
 40006c8:	00bffc04 	movi	r2,-16
 40006cc:	1884703a 	and	r2,r3,r2
 40006d0:	e0bff815 	stw	r2,-32(fp)
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 40006d4:	e0bffd03 	ldbu	r2,-12(fp)
 40006d8:	e0bff315 	stw	r2,-52(fp)
 40006dc:	00005c06 	br	4000850 <draw_char+0x1f8>
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+char_width); x_wb+=16) {
 40006e0:	e0bff817 	ldw	r2,-32(fp)
 40006e4:	e0bff415 	stw	r2,-48(fp)
 40006e8:	00005006 	br	400082c <draw_char+0x1d4>

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
 40006ec:	e0bff317 	ldw	r2,-52(fp)
 40006f0:	e0bff915 	stw	r2,-28(fp)
            alt_u32 word = 0;
 40006f4:	e03ff515 	stw	zero,-44(fp)
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 40006f8:	e0bff417 	ldw	r2,-48(fp)
 40006fc:	e0bff615 	stw	r2,-40(fp)
 4000700:	00004306 	br	4000810 <draw_char+0x1b8>
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 4000704:	e0bffc03 	ldbu	r2,-16(fp)
 4000708:	e0fff617 	ldw	r3,-40(fp)
 400070c:	18803a36 	bltu	r3,r2,40007f8 <draw_char+0x1a0>

                // Check if we are out of the width of the font
                if (wx-x >= char_width) continue;
 4000710:	e0bffc03 	ldbu	r2,-16(fp)
 4000714:	e0fff617 	ldw	r3,-40(fp)
 4000718:	1887c83a 	sub	r3,r3,r2
 400071c:	e0bff703 	ldbu	r2,-36(fp)
 4000720:	1880372e 	bgeu	r3,r2,4000800 <draw_char+0x1a8>

                // Get the relevant character from the font data
                alt_u8 font_data = font->data[font_outer];
 4000724:	e0bfff17 	ldw	r2,-4(fp)
 4000728:	10c00117 	ldw	r3,4(r2)
 400072c:	e0bff117 	ldw	r2,-60(fp)
 4000730:	1885883a 	add	r2,r3,r2
 4000734:	10800003 	ldbu	r2,0(r2)
 4000738:	e0bffa05 	stb	r2,-24(fp)

                // Extract the relevant pixel data
                alt_u32 pixel_data = (font_data >> ((3-font_inner)*2)) % 4;
 400073c:	e0fffa03 	ldbu	r3,-24(fp)
 4000740:	e0bff203 	ldbu	r2,-56(fp)
 4000744:	010000c4 	movi	r4,3
 4000748:	2085c83a 	sub	r2,r4,r2
 400074c:	1085883a 	add	r2,r2,r2
 4000750:	1887d83a 	sra	r3,r3,r2
 4000754:	00a00034 	movhi	r2,32768
 4000758:	108000c4 	addi	r2,r2,3
 400075c:	1884703a 	and	r2,r3,r2
 4000760:	1000040e 	bge	r2,zero,4000774 <draw_char+0x11c>
 4000764:	10bfffc4 	addi	r2,r2,-1
 4000768:	00ffff04 	movi	r3,-4
 400076c:	10c4b03a 	or	r2,r2,r3
 4000770:	10800044 	addi	r2,r2,1
 4000774:	e0bffb15 	stw	r2,-20(fp)

                // Write the pixel data to the word
                word += pixel_data << (15-(wx%16))*2;
 4000778:	e0bff617 	ldw	r2,-40(fp)
 400077c:	0084303a 	nor	r2,zero,r2
 4000780:	108003cc 	andi	r2,r2,15
 4000784:	1085883a 	add	r2,r2,r2
 4000788:	1007883a 	mov	r3,r2
 400078c:	e0bffb17 	ldw	r2,-20(fp)
 4000790:	10c4983a 	sll	r2,r2,r3
 4000794:	e0fff517 	ldw	r3,-44(fp)
 4000798:	1885883a 	add	r2,r3,r2
 400079c:	e0bff515 	stw	r2,-44(fp)

                // Increment the pixel counter for the font data
                if (++font_inner == 4){
 40007a0:	e0bff203 	ldbu	r2,-56(fp)
 40007a4:	10800044 	addi	r2,r2,1
 40007a8:	e0bff205 	stb	r2,-56(fp)
 40007ac:	e0bff203 	ldbu	r2,-56(fp)
 40007b0:	10800118 	cmpnei	r2,r2,4
 40007b4:	1000041e 	bne	r2,zero,40007c8 <draw_char+0x170>
                    font_inner = 0;
 40007b8:	e03ff205 	stb	zero,-56(fp)
                    font_outer++;
 40007bc:	e0bff117 	ldw	r2,-60(fp)
 40007c0:	10800044 	addi	r2,r2,1
 40007c4:	e0bff115 	stw	r2,-60(fp)
                }

            // Write the word to VRAM
            VRAM[(x_wb/16) + (y_wb*40)] = word;
 40007c8:	d0e00017 	ldw	r3,-32768(gp)
 40007cc:	e0bff417 	ldw	r2,-48(fp)
 40007d0:	1008d13a 	srli	r4,r2,4
 40007d4:	e0bff317 	ldw	r2,-52(fp)
 40007d8:	10800a24 	muli	r2,r2,40
 40007dc:	2085883a 	add	r2,r4,r2
 40007e0:	1085883a 	add	r2,r2,r2
 40007e4:	1085883a 	add	r2,r2,r2
 40007e8:	1885883a 	add	r2,r3,r2
 40007ec:	e0fff517 	ldw	r3,-44(fp)
 40007f0:	10c00015 	stw	r3,0(r2)
 40007f4:	00000306 	br	4000804 <draw_char+0x1ac>
            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 40007f8:	0001883a 	nop
 40007fc:	00000106 	br	4000804 <draw_char+0x1ac>

                // Check if we are out of the width of the font
                if (wx-x >= char_width) continue;
 4000800:	0001883a 	nop
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+char_width); x_wb+=16) {

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 4000804:	e0bff617 	ldw	r2,-40(fp)
 4000808:	10800044 	addi	r2,r2,1
 400080c:	e0bff615 	stw	r2,-40(fp)
 4000810:	e0bff417 	ldw	r2,-48(fp)
 4000814:	10800404 	addi	r2,r2,16
 4000818:	e0fff617 	ldw	r3,-40(fp)
 400081c:	18bfb936 	bltu	r3,r2,4000704 <__alt_data_end+0xfc000704>

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+char_width); x_wb+=16) {
 4000820:	e0bff417 	ldw	r2,-48(fp)
 4000824:	10800404 	addi	r2,r2,16
 4000828:	e0bff415 	stw	r2,-48(fp)
 400082c:	e0fffc03 	ldbu	r3,-16(fp)
 4000830:	e0bff703 	ldbu	r2,-36(fp)
 4000834:	1885883a 	add	r2,r3,r2
 4000838:	1007883a 	mov	r3,r2
 400083c:	e0bff417 	ldw	r2,-48(fp)
 4000840:	10ffaa36 	bltu	r2,r3,40006ec <__alt_data_end+0xfc0006ec>
    alt_u8  font_inner = 0;

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 4000844:	e0bff317 	ldw	r2,-52(fp)
 4000848:	10800044 	addi	r2,r2,1
 400084c:	e0bff315 	stw	r2,-52(fp)
 4000850:	e0fffd03 	ldbu	r3,-12(fp)
 4000854:	e0bff743 	ldbu	r2,-35(fp)
 4000858:	1885883a 	add	r2,r3,r2
 400085c:	1007883a 	mov	r3,r2
 4000860:	e0bff317 	ldw	r2,-52(fp)
 4000864:	10ff9e36 	bltu	r2,r3,40006e0 <__alt_data_end+0xfc0006e0>
            // Write the word to VRAM
            VRAM[(x_wb/16) + (y_wb*40)] = word;
            }
        }
    }
}
 4000868:	0001883a 	nop
 400086c:	e037883a 	mov	sp,fp
 4000870:	df000017 	ldw	fp,0(sp)
 4000874:	dec00104 	addi	sp,sp,4
 4000878:	f800283a 	ret

0400087c <draw_string>:

void draw_string(alt_u8 x, alt_u8 y, const char* str, struct FONT* font) {
 400087c:	deffd704 	addi	sp,sp,-164
 4000880:	df002815 	stw	fp,160(sp)
 4000884:	ddc02715 	stw	r23,156(sp)
 4000888:	dd802615 	stw	r22,152(sp)
 400088c:	dd402515 	stw	r21,148(sp)
 4000890:	dd002415 	stw	r20,144(sp)
 4000894:	dcc02315 	stw	r19,140(sp)
 4000898:	dc802215 	stw	r18,136(sp)
 400089c:	dc402115 	stw	r17,132(sp)
 40008a0:	dc002015 	stw	r16,128(sp)
 40008a4:	df002804 	addi	fp,sp,160
 40008a8:	2007883a 	mov	r3,r4
 40008ac:	2805883a 	mov	r2,r5
 40008b0:	e1bfee15 	stw	r6,-72(fp)
 40008b4:	e1ffef15 	stw	r7,-68(fp)
 40008b8:	e0ffec05 	stb	r3,-80(fp)
 40008bc:	e0bfed05 	stb	r2,-76(fp)
    // Find the length of the string in pixels
    alt_u32 str_char_len = 0;
 40008c0:	e03fd815 	stw	zero,-160(fp)
    for (alt_u32 i=0; str[i] != '\0'; i++) str_char_len++;
 40008c4:	e03fd915 	stw	zero,-156(fp)
 40008c8:	00000606 	br	40008e4 <draw_string+0x68>
 40008cc:	e0bfd817 	ldw	r2,-160(fp)
 40008d0:	10800044 	addi	r2,r2,1
 40008d4:	e0bfd815 	stw	r2,-160(fp)
 40008d8:	e0bfd917 	ldw	r2,-156(fp)
 40008dc:	10800044 	addi	r2,r2,1
 40008e0:	e0bfd915 	stw	r2,-156(fp)
 40008e4:	e0ffee17 	ldw	r3,-72(fp)
 40008e8:	e0bfd917 	ldw	r2,-156(fp)
 40008ec:	1885883a 	add	r2,r3,r2
 40008f0:	10800003 	ldbu	r2,0(r2)
 40008f4:	10803fcc 	andi	r2,r2,255
 40008f8:	1080201c 	xori	r2,r2,128
 40008fc:	10bfe004 	addi	r2,r2,-128
 4000900:	103ff21e 	bne	r2,zero,40008cc <__alt_data_end+0xfc0008cc>

    // Character-relevant data
    alt_u32 font_outers[str_char_len];
 4000904:	e0ffd817 	ldw	r3,-160(fp)
 4000908:	d805883a 	mov	r2,sp
 400090c:	100b883a 	mov	r5,r2
 4000910:	1805883a 	mov	r2,r3
 4000914:	10bfffc4 	addi	r2,r2,-1
 4000918:	e0bfe215 	stw	r2,-120(fp)
 400091c:	e0fff015 	stw	r3,-64(fp)
 4000920:	e03ff115 	stw	zero,-60(fp)
 4000924:	e13ff017 	ldw	r4,-64(fp)
 4000928:	2004d6fa 	srli	r2,r4,27
 400092c:	e13ff117 	ldw	r4,-60(fp)
 4000930:	2026917a 	slli	r19,r4,5
 4000934:	14e6b03a 	or	r19,r2,r19
 4000938:	e0bff017 	ldw	r2,-64(fp)
 400093c:	1024917a 	slli	r18,r2,5
 4000940:	e0fff215 	stw	r3,-56(fp)
 4000944:	e03ff315 	stw	zero,-52(fp)
 4000948:	e13ff217 	ldw	r4,-56(fp)
 400094c:	2004d6fa 	srli	r2,r4,27
 4000950:	e13ff317 	ldw	r4,-52(fp)
 4000954:	2022917a 	slli	r17,r4,5
 4000958:	1462b03a 	or	r17,r2,r17
 400095c:	e0bff217 	ldw	r2,-56(fp)
 4000960:	1020917a 	slli	r16,r2,5
 4000964:	18c5883a 	add	r2,r3,r3
 4000968:	1085883a 	add	r2,r2,r2
 400096c:	108000c4 	addi	r2,r2,3
 4000970:	108000c4 	addi	r2,r2,3
 4000974:	1004d0ba 	srli	r2,r2,2
 4000978:	1085883a 	add	r2,r2,r2
 400097c:	1085883a 	add	r2,r2,r2
 4000980:	d8b7c83a 	sub	sp,sp,r2
 4000984:	d805883a 	mov	r2,sp
 4000988:	108000c4 	addi	r2,r2,3
 400098c:	1004d0ba 	srli	r2,r2,2
 4000990:	1085883a 	add	r2,r2,r2
 4000994:	1085883a 	add	r2,r2,r2
 4000998:	e0bfe315 	stw	r2,-116(fp)
    alt_u8  font_inners[str_char_len];
 400099c:	e0bfd817 	ldw	r2,-160(fp)
 40009a0:	1007883a 	mov	r3,r2
 40009a4:	18ffffc4 	addi	r3,r3,-1
 40009a8:	e0ffe415 	stw	r3,-112(fp)
 40009ac:	e0bff415 	stw	r2,-48(fp)
 40009b0:	e03ff515 	stw	zero,-44(fp)
 40009b4:	e13ff417 	ldw	r4,-48(fp)
 40009b8:	2006d77a 	srli	r3,r4,29
 40009bc:	e13ff517 	ldw	r4,-44(fp)
 40009c0:	201e90fa 	slli	r15,r4,3
 40009c4:	1bdeb03a 	or	r15,r3,r15
 40009c8:	e0fff417 	ldw	r3,-48(fp)
 40009cc:	181c90fa 	slli	r14,r3,3
 40009d0:	e0bff615 	stw	r2,-40(fp)
 40009d4:	e03ff715 	stw	zero,-36(fp)
 40009d8:	e13ff617 	ldw	r4,-40(fp)
 40009dc:	2006d77a 	srli	r3,r4,29
 40009e0:	e13ff717 	ldw	r4,-36(fp)
 40009e4:	201a90fa 	slli	r13,r4,3
 40009e8:	1b5ab03a 	or	r13,r3,r13
 40009ec:	e0fff617 	ldw	r3,-40(fp)
 40009f0:	181890fa 	slli	r12,r3,3
 40009f4:	108000c4 	addi	r2,r2,3
 40009f8:	1004d0ba 	srli	r2,r2,2
 40009fc:	1085883a 	add	r2,r2,r2
 4000a00:	1085883a 	add	r2,r2,r2
 4000a04:	d8b7c83a 	sub	sp,sp,r2
 4000a08:	d805883a 	mov	r2,sp
 4000a0c:	1005883a 	mov	r2,r2
 4000a10:	e0bfe515 	stw	r2,-108(fp)

    // Get pixel boundaries for the characters
    alt_u32 str_pxl_len = 0;
 4000a14:	e03fda15 	stw	zero,-152(fp)
    alt_u32 pxl_boundaries[str_char_len];
 4000a18:	e0bfd817 	ldw	r2,-160(fp)
 4000a1c:	1007883a 	mov	r3,r2
 4000a20:	18ffffc4 	addi	r3,r3,-1
 4000a24:	e0ffe615 	stw	r3,-104(fp)
 4000a28:	102d883a 	mov	r22,r2
 4000a2c:	002f883a 	mov	r23,zero
 4000a30:	b006d6fa 	srli	r3,r22,27
 4000a34:	b816917a 	slli	r11,r23,5
 4000a38:	1ad6b03a 	or	r11,r3,r11
 4000a3c:	b014917a 	slli	r10,r22,5
 4000a40:	1029883a 	mov	r20,r2
 4000a44:	002b883a 	mov	r21,zero
 4000a48:	a006d6fa 	srli	r3,r20,27
 4000a4c:	a812917a 	slli	r9,r21,5
 4000a50:	1a52b03a 	or	r9,r3,r9
 4000a54:	a010917a 	slli	r8,r20,5
 4000a58:	1085883a 	add	r2,r2,r2
 4000a5c:	1085883a 	add	r2,r2,r2
 4000a60:	108000c4 	addi	r2,r2,3
 4000a64:	108000c4 	addi	r2,r2,3
 4000a68:	1004d0ba 	srli	r2,r2,2
 4000a6c:	1085883a 	add	r2,r2,r2
 4000a70:	1085883a 	add	r2,r2,r2
 4000a74:	d8b7c83a 	sub	sp,sp,r2
 4000a78:	d805883a 	mov	r2,sp
 4000a7c:	108000c4 	addi	r2,r2,3
 4000a80:	1004d0ba 	srli	r2,r2,2
 4000a84:	1085883a 	add	r2,r2,r2
 4000a88:	1085883a 	add	r2,r2,r2
 4000a8c:	e0bfe715 	stw	r2,-100(fp)
    for (alt_u32 i=0; str[i] != '\0'; i++) {
 4000a90:	e03fdb15 	stw	zero,-148(fp)
 4000a94:	00004006 	br	4000b98 <draw_string+0x31c>
        alt_u8 render_code = decode_ascii[str[i]];
 4000a98:	e0ffee17 	ldw	r3,-72(fp)
 4000a9c:	e0bfdb17 	ldw	r2,-148(fp)
 4000aa0:	1885883a 	add	r2,r3,r2
 4000aa4:	10800003 	ldbu	r2,0(r2)
 4000aa8:	10c03fcc 	andi	r3,r2,255
 4000aac:	18c0201c 	xori	r3,r3,128
 4000ab0:	18ffe004 	addi	r3,r3,-128
 4000ab4:	008100b4 	movhi	r2,1026
 4000ab8:	10962e04 	addi	r2,r2,22712
 4000abc:	10c5883a 	add	r2,r2,r3
 4000ac0:	10800003 	ldbu	r2,0(r2)
 4000ac4:	e0bfe805 	stb	r2,-96(fp)

        // Set pixel boundaries
        if(str[i] == ' ') str_pxl_len += font->space_pxls;
 4000ac8:	e0ffee17 	ldw	r3,-72(fp)
 4000acc:	e0bfdb17 	ldw	r2,-148(fp)
 4000ad0:	1885883a 	add	r2,r3,r2
 4000ad4:	10800003 	ldbu	r2,0(r2)
 4000ad8:	10803fcc 	andi	r2,r2,255
 4000adc:	1080201c 	xori	r2,r2,128
 4000ae0:	10bfe004 	addi	r2,r2,-128
 4000ae4:	10800818 	cmpnei	r2,r2,32
 4000ae8:	1000071e 	bne	r2,zero,4000b08 <draw_string+0x28c>
 4000aec:	e0bfef17 	ldw	r2,-68(fp)
 4000af0:	10800043 	ldbu	r2,1(r2)
 4000af4:	10803fcc 	andi	r2,r2,255
 4000af8:	e0ffda17 	ldw	r3,-152(fp)
 4000afc:	1885883a 	add	r2,r3,r2
 4000b00:	e0bfda15 	stw	r2,-152(fp)
 4000b04:	00000906 	br	4000b2c <draw_string+0x2b0>
        else str_pxl_len += font->widths[render_code];
 4000b08:	e0bfef17 	ldw	r2,-68(fp)
 4000b0c:	10c00217 	ldw	r3,8(r2)
 4000b10:	e0bfe803 	ldbu	r2,-96(fp)
 4000b14:	1885883a 	add	r2,r3,r2
 4000b18:	10800003 	ldbu	r2,0(r2)
 4000b1c:	10803fcc 	andi	r2,r2,255
 4000b20:	e0ffda17 	ldw	r3,-152(fp)
 4000b24:	1885883a 	add	r2,r3,r2
 4000b28:	e0bfda15 	stw	r2,-152(fp)
        pxl_boundaries[i] = str_pxl_len;
 4000b2c:	e0ffe717 	ldw	r3,-100(fp)
 4000b30:	e0bfdb17 	ldw	r2,-148(fp)
 4000b34:	1085883a 	add	r2,r2,r2
 4000b38:	1085883a 	add	r2,r2,r2
 4000b3c:	1885883a 	add	r2,r3,r2
 4000b40:	e0ffda17 	ldw	r3,-152(fp)
 4000b44:	10c00015 	stw	r3,0(r2)

        // Set font pointers and metadata
        font_outers[i]    = font->indices[render_code];
 4000b48:	e0bfef17 	ldw	r2,-68(fp)
 4000b4c:	10c00317 	ldw	r3,12(r2)
 4000b50:	e0bfe803 	ldbu	r2,-96(fp)
 4000b54:	1085883a 	add	r2,r2,r2
 4000b58:	1085883a 	add	r2,r2,r2
 4000b5c:	1885883a 	add	r2,r3,r2
 4000b60:	10c00017 	ldw	r3,0(r2)
 4000b64:	e13fe317 	ldw	r4,-116(fp)
 4000b68:	e0bfdb17 	ldw	r2,-148(fp)
 4000b6c:	1085883a 	add	r2,r2,r2
 4000b70:	1085883a 	add	r2,r2,r2
 4000b74:	2085883a 	add	r2,r4,r2
 4000b78:	10c00015 	stw	r3,0(r2)
        font_inners[i]    = 0;
 4000b7c:	e0ffe517 	ldw	r3,-108(fp)
 4000b80:	e0bfdb17 	ldw	r2,-148(fp)
 4000b84:	1885883a 	add	r2,r3,r2
 4000b88:	10000005 	stb	zero,0(r2)
    alt_u8  font_inners[str_char_len];

    // Get pixel boundaries for the characters
    alt_u32 str_pxl_len = 0;
    alt_u32 pxl_boundaries[str_char_len];
    for (alt_u32 i=0; str[i] != '\0'; i++) {
 4000b8c:	e0bfdb17 	ldw	r2,-148(fp)
 4000b90:	10800044 	addi	r2,r2,1
 4000b94:	e0bfdb15 	stw	r2,-148(fp)
 4000b98:	e0ffee17 	ldw	r3,-72(fp)
 4000b9c:	e0bfdb17 	ldw	r2,-148(fp)
 4000ba0:	1885883a 	add	r2,r3,r2
 4000ba4:	10800003 	ldbu	r2,0(r2)
 4000ba8:	10803fcc 	andi	r2,r2,255
 4000bac:	1080201c 	xori	r2,r2,128
 4000bb0:	10bfe004 	addi	r2,r2,-128
 4000bb4:	103fb81e 	bne	r2,zero,4000a98 <__alt_data_end+0xfc000a98>
        font_outers[i]    = font->indices[render_code];
        font_inners[i]    = 0;
    }

    // Font metadata
    alt_u32 char_idx    = 0;
 4000bb8:	e03fdc15 	stw	zero,-144(fp)
    alt_u8  char_height = font->height;
 4000bbc:	e0bfef17 	ldw	r2,-68(fp)
 4000bc0:	10800003 	ldbu	r2,0(r2)
 4000bc4:	e0bfe845 	stb	r2,-95(fp)

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
 4000bc8:	e0ffec03 	ldbu	r3,-80(fp)
 4000bcc:	00bffc04 	movi	r2,-16
 4000bd0:	1884703a 	and	r2,r3,r2
 4000bd4:	e0bfe915 	stw	r2,-92(fp)
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 4000bd8:	e0bfed03 	ldbu	r2,-76(fp)
 4000bdc:	e0bfdd15 	stw	r2,-140(fp)
 4000be0:	00009406 	br	4000e34 <draw_string+0x5b8>
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+str_pxl_len); x_wb+=16) {
 4000be4:	e0bfe917 	ldw	r2,-92(fp)
 4000be8:	e0bfde15 	stw	r2,-136(fp)
 4000bec:	00008806 	br	4000e10 <draw_string+0x594>

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
 4000bf0:	e0bfdd17 	ldw	r2,-140(fp)
 4000bf4:	e0bfea15 	stw	r2,-88(fp)
            alt_u32 word = 0;
 4000bf8:	e03fdf15 	stw	zero,-132(fp)
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 4000bfc:	e0bfde17 	ldw	r2,-136(fp)
 4000c00:	e0bfe015 	stw	r2,-128(fp)
 4000c04:	00007b06 	br	4000df4 <draw_string+0x578>
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 4000c08:	e0bfec03 	ldbu	r2,-80(fp)
 4000c0c:	e0ffe017 	ldw	r3,-128(fp)
 4000c10:	18807236 	bltu	r3,r2,4000ddc <draw_string+0x560>

                // Check if we are out of the width of the string
                if (wx-x >= str_pxl_len) continue;
 4000c14:	e0bfec03 	ldbu	r2,-80(fp)
 4000c18:	e0ffe017 	ldw	r3,-128(fp)
 4000c1c:	1887c83a 	sub	r3,r3,r2
 4000c20:	e0bfda17 	ldw	r2,-152(fp)
 4000c24:	18806f2e 	bgeu	r3,r2,4000de4 <draw_string+0x568>

                // Figure out which character we are drawing
                if (wx-x >= pxl_boundaries[char_idx]) char_idx++;
 4000c28:	e0bfec03 	ldbu	r2,-80(fp)
 4000c2c:	e0ffe017 	ldw	r3,-128(fp)
 4000c30:	1887c83a 	sub	r3,r3,r2
 4000c34:	e13fe717 	ldw	r4,-100(fp)
 4000c38:	e0bfdc17 	ldw	r2,-144(fp)
 4000c3c:	1085883a 	add	r2,r2,r2
 4000c40:	1085883a 	add	r2,r2,r2
 4000c44:	2085883a 	add	r2,r4,r2
 4000c48:	10800017 	ldw	r2,0(r2)
 4000c4c:	18800336 	bltu	r3,r2,4000c5c <draw_string+0x3e0>
 4000c50:	e0bfdc17 	ldw	r2,-144(fp)
 4000c54:	10800044 	addi	r2,r2,1
 4000c58:	e0bfdc15 	stw	r2,-144(fp)

                // Get the relevant character from the font data
                alt_u8 font_data = font->data[font_outers[char_idx]];
 4000c5c:	e0bfef17 	ldw	r2,-68(fp)
 4000c60:	10c00117 	ldw	r3,4(r2)
 4000c64:	e13fe317 	ldw	r4,-116(fp)
 4000c68:	e0bfdc17 	ldw	r2,-144(fp)
 4000c6c:	1085883a 	add	r2,r2,r2
 4000c70:	1085883a 	add	r2,r2,r2
 4000c74:	2085883a 	add	r2,r4,r2
 4000c78:	10800017 	ldw	r2,0(r2)
 4000c7c:	1885883a 	add	r2,r3,r2
 4000c80:	10800003 	ldbu	r2,0(r2)
 4000c84:	e0bfeb05 	stb	r2,-84(fp)

                // Extract the relevant pixel data
                alt_u32 pixel_data = (font_data >> ((3-font_inners[char_idx])*2)) % 4;
 4000c88:	e0ffeb03 	ldbu	r3,-84(fp)
 4000c8c:	e13fe517 	ldw	r4,-108(fp)
 4000c90:	e0bfdc17 	ldw	r2,-144(fp)
 4000c94:	2085883a 	add	r2,r4,r2
 4000c98:	10800003 	ldbu	r2,0(r2)
 4000c9c:	10803fcc 	andi	r2,r2,255
 4000ca0:	010000c4 	movi	r4,3
 4000ca4:	2085c83a 	sub	r2,r4,r2
 4000ca8:	1085883a 	add	r2,r2,r2
 4000cac:	1887d83a 	sra	r3,r3,r2
 4000cb0:	00a00034 	movhi	r2,32768
 4000cb4:	108000c4 	addi	r2,r2,3
 4000cb8:	1884703a 	and	r2,r3,r2
 4000cbc:	1000040e 	bge	r2,zero,4000cd0 <draw_string+0x454>
 4000cc0:	10bfffc4 	addi	r2,r2,-1
 4000cc4:	00ffff04 	movi	r3,-4
 4000cc8:	10c4b03a 	or	r2,r2,r3
 4000ccc:	10800044 	addi	r2,r2,1
 4000cd0:	e0bfe115 	stw	r2,-124(fp)
                if (str[char_idx] == ' ') pixel_data = 0;
 4000cd4:	e0ffee17 	ldw	r3,-72(fp)
 4000cd8:	e0bfdc17 	ldw	r2,-144(fp)
 4000cdc:	1885883a 	add	r2,r3,r2
 4000ce0:	10800003 	ldbu	r2,0(r2)
 4000ce4:	10803fcc 	andi	r2,r2,255
 4000ce8:	1080201c 	xori	r2,r2,128
 4000cec:	10bfe004 	addi	r2,r2,-128
 4000cf0:	10800818 	cmpnei	r2,r2,32
 4000cf4:	1000011e 	bne	r2,zero,4000cfc <draw_string+0x480>
 4000cf8:	e03fe115 	stw	zero,-124(fp)

                // Write the pixel data to the word
                word += pixel_data << (15-(wx%16))*2;
 4000cfc:	e0bfe017 	ldw	r2,-128(fp)
 4000d00:	0084303a 	nor	r2,zero,r2
 4000d04:	108003cc 	andi	r2,r2,15
 4000d08:	1085883a 	add	r2,r2,r2
 4000d0c:	1007883a 	mov	r3,r2
 4000d10:	e0bfe117 	ldw	r2,-124(fp)
 4000d14:	10c4983a 	sll	r2,r2,r3
 4000d18:	e0ffdf17 	ldw	r3,-132(fp)
 4000d1c:	1885883a 	add	r2,r3,r2
 4000d20:	e0bfdf15 	stw	r2,-132(fp)

                // Increment the pixel counter for the font data
                if (++font_inners[char_idx] == 4){
 4000d24:	e0ffe517 	ldw	r3,-108(fp)
 4000d28:	e0bfdc17 	ldw	r2,-144(fp)
 4000d2c:	1885883a 	add	r2,r3,r2
 4000d30:	10800003 	ldbu	r2,0(r2)
 4000d34:	10800044 	addi	r2,r2,1
 4000d38:	1009883a 	mov	r4,r2
 4000d3c:	e0ffe517 	ldw	r3,-108(fp)
 4000d40:	e0bfdc17 	ldw	r2,-144(fp)
 4000d44:	1885883a 	add	r2,r3,r2
 4000d48:	11000005 	stb	r4,0(r2)
 4000d4c:	e0ffe517 	ldw	r3,-108(fp)
 4000d50:	e0bfdc17 	ldw	r2,-144(fp)
 4000d54:	1885883a 	add	r2,r3,r2
 4000d58:	10800003 	ldbu	r2,0(r2)
 4000d5c:	10803fcc 	andi	r2,r2,255
 4000d60:	10800118 	cmpnei	r2,r2,4
 4000d64:	1000111e 	bne	r2,zero,4000dac <draw_string+0x530>
                    font_inners[char_idx] = 0;
 4000d68:	e0ffe517 	ldw	r3,-108(fp)
 4000d6c:	e0bfdc17 	ldw	r2,-144(fp)
 4000d70:	1885883a 	add	r2,r3,r2
 4000d74:	10000005 	stb	zero,0(r2)
                    font_outers[char_idx]++;
 4000d78:	e0ffe317 	ldw	r3,-116(fp)
 4000d7c:	e0bfdc17 	ldw	r2,-144(fp)
 4000d80:	1085883a 	add	r2,r2,r2
 4000d84:	1085883a 	add	r2,r2,r2
 4000d88:	1885883a 	add	r2,r3,r2
 4000d8c:	10800017 	ldw	r2,0(r2)
 4000d90:	10c00044 	addi	r3,r2,1
 4000d94:	e13fe317 	ldw	r4,-116(fp)
 4000d98:	e0bfdc17 	ldw	r2,-144(fp)
 4000d9c:	1085883a 	add	r2,r2,r2
 4000da0:	1085883a 	add	r2,r2,r2
 4000da4:	2085883a 	add	r2,r4,r2
 4000da8:	10c00015 	stw	r3,0(r2)
                }

            // Write the word to VRAM
            VRAM[(x_wb/16) + (y_wb*40)] = word;
 4000dac:	d0e00017 	ldw	r3,-32768(gp)
 4000db0:	e0bfde17 	ldw	r2,-136(fp)
 4000db4:	1008d13a 	srli	r4,r2,4
 4000db8:	e0bfdd17 	ldw	r2,-140(fp)
 4000dbc:	10800a24 	muli	r2,r2,40
 4000dc0:	2085883a 	add	r2,r4,r2
 4000dc4:	1085883a 	add	r2,r2,r2
 4000dc8:	1085883a 	add	r2,r2,r2
 4000dcc:	1885883a 	add	r2,r3,r2
 4000dd0:	e0ffdf17 	ldw	r3,-132(fp)
 4000dd4:	10c00015 	stw	r3,0(r2)
 4000dd8:	00000306 	br	4000de8 <draw_string+0x56c>
            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 4000ddc:	0001883a 	nop
 4000de0:	00000106 	br	4000de8 <draw_string+0x56c>

                // Check if we are out of the width of the string
                if (wx-x >= str_pxl_len) continue;
 4000de4:	0001883a 	nop
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+str_pxl_len); x_wb+=16) {

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 4000de8:	e0bfe017 	ldw	r2,-128(fp)
 4000dec:	10800044 	addi	r2,r2,1
 4000df0:	e0bfe015 	stw	r2,-128(fp)
 4000df4:	e0bfde17 	ldw	r2,-136(fp)
 4000df8:	10800404 	addi	r2,r2,16
 4000dfc:	e0ffe017 	ldw	r3,-128(fp)
 4000e00:	18bf8136 	bltu	r3,r2,4000c08 <__alt_data_end+0xfc000c08>

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+str_pxl_len); x_wb+=16) {
 4000e04:	e0bfde17 	ldw	r2,-136(fp)
 4000e08:	10800404 	addi	r2,r2,16
 4000e0c:	e0bfde15 	stw	r2,-136(fp)
 4000e10:	e0ffec03 	ldbu	r3,-80(fp)
 4000e14:	e0bfda17 	ldw	r2,-152(fp)
 4000e18:	1885883a 	add	r2,r3,r2
 4000e1c:	e0ffde17 	ldw	r3,-136(fp)
 4000e20:	18bf7336 	bltu	r3,r2,4000bf0 <__alt_data_end+0xfc000bf0>
            VRAM[(x_wb/16) + (y_wb*40)] = word;

            }
        }
        // Reset the character index for the next row of pixels
        char_idx = 0;
 4000e24:	e03fdc15 	stw	zero,-144(fp)
    alt_u8  char_height = font->height;

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 4000e28:	e0bfdd17 	ldw	r2,-140(fp)
 4000e2c:	10800044 	addi	r2,r2,1
 4000e30:	e0bfdd15 	stw	r2,-140(fp)
 4000e34:	e0ffed03 	ldbu	r3,-76(fp)
 4000e38:	e0bfe843 	ldbu	r2,-95(fp)
 4000e3c:	1885883a 	add	r2,r3,r2
 4000e40:	1007883a 	mov	r3,r2
 4000e44:	e0bfdd17 	ldw	r2,-140(fp)
 4000e48:	10ff6636 	bltu	r2,r3,4000be4 <__alt_data_end+0xfc000be4>
 4000e4c:	2837883a 	mov	sp,r5
            }
        }
        // Reset the character index for the next row of pixels
        char_idx = 0;
    }
}
 4000e50:	0001883a 	nop
 4000e54:	e6fff804 	addi	sp,fp,-32
 4000e58:	df000817 	ldw	fp,32(sp)
 4000e5c:	ddc00717 	ldw	r23,28(sp)
 4000e60:	dd800617 	ldw	r22,24(sp)
 4000e64:	dd400517 	ldw	r21,20(sp)
 4000e68:	dd000417 	ldw	r20,16(sp)
 4000e6c:	dcc00317 	ldw	r19,12(sp)
 4000e70:	dc800217 	ldw	r18,8(sp)
 4000e74:	dc400117 	ldw	r17,4(sp)
 4000e78:	dc000017 	ldw	r16,0(sp)
 4000e7c:	dec00904 	addi	sp,sp,36
 4000e80:	f800283a 	ret

04000e84 <draw_sample>:

void draw_sample() {
 4000e84:	defdff04 	addi	sp,sp,-2052
 4000e88:	dfc20015 	stw	ra,2048(sp)
 4000e8c:	df01ff15 	stw	fp,2044(sp)
 4000e90:	df01ff04 	addi	fp,sp,2044
    // Draw the server name
    draw_string(SIDEBAR_X_MARGIN, SERVER_Y, "ECE 385", &fonts[SERVER_FONT]);
 4000e94:	01c100b4 	movhi	r7,1026
 4000e98:	39d61a04 	addi	r7,r7,22632
 4000e9c:	018100b4 	movhi	r6,1026
 4000ea0:	31bbeb04 	addi	r6,r6,-4180
 4000ea4:	014008c4 	movi	r5,35
 4000ea8:	01000144 	movi	r4,5
 4000eac:	400087c0 	call	400087c <draw_string>

    // Draw the channel names
    const char channels[8][255] = {
 4000eb0:	008100b4 	movhi	r2,1026
 4000eb4:	10bbef44 	addi	r2,r2,-4163
 4000eb8:	e0fe0144 	addi	r3,fp,-2043
 4000ebc:	1009883a 	mov	r4,r2
 4000ec0:	0081fe04 	movi	r2,2040
 4000ec4:	100d883a 	mov	r6,r2
 4000ec8:	200b883a 	mov	r5,r4
 4000ecc:	1809883a 	mov	r4,r3
 4000ed0:	400c7680 	call	400c768 <memcpy>
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
 4000ed4:	e03e0105 	stb	zero,-2044(fp)
 4000ed8:	00001706 	br	4000f38 <draw_sample+0xb4>
        draw_string(
            SIDEBAR_X_MARGIN,
            (i*fonts[CHANNEL_FONT].height) + (i*CHANNEL_Y_MARGIN*2) + CHANNEL_Y_MARGIN + CHANNEL_Y,
 4000edc:	008100b4 	movhi	r2,1026
 4000ee0:	10961a04 	addi	r2,r2,22632
 4000ee4:	10800403 	ldbu	r2,16(r2)
 4000ee8:	10803fcc 	andi	r2,r2,255
 4000eec:	10800084 	addi	r2,r2,2
    const char channels[8][255] = {
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
        draw_string(
 4000ef0:	1007883a 	mov	r3,r2
 4000ef4:	e0be0103 	ldbu	r2,-2044(fp)
 4000ef8:	1885383a 	mul	r2,r3,r2
 4000efc:	10800d44 	addi	r2,r2,53
 4000f00:	11003fcc 	andi	r4,r2,255
            SIDEBAR_X_MARGIN,
            (i*fonts[CHANNEL_FONT].height) + (i*CHANNEL_Y_MARGIN*2) + CHANNEL_Y_MARGIN + CHANNEL_Y,
            channels[i],
 4000f04:	e0be0103 	ldbu	r2,-2044(fp)
 4000f08:	e0fe0144 	addi	r3,fp,-2043
 4000f0c:	10803fe4 	muli	r2,r2,255
 4000f10:	1885883a 	add	r2,r3,r2
    const char channels[8][255] = {
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
        draw_string(
 4000f14:	01c100b4 	movhi	r7,1026
 4000f18:	39d61e04 	addi	r7,r7,22648
 4000f1c:	100d883a 	mov	r6,r2
 4000f20:	200b883a 	mov	r5,r4
 4000f24:	01000144 	movi	r4,5
 4000f28:	400087c0 	call	400087c <draw_string>
    // Draw the channel names
    const char channels[8][255] = {
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
 4000f2c:	e0be0103 	ldbu	r2,-2044(fp)
 4000f30:	10800044 	addi	r2,r2,1
 4000f34:	e0be0105 	stb	r2,-2044(fp)
 4000f38:	e0be0103 	ldbu	r2,-2044(fp)
 4000f3c:	10800230 	cmpltui	r2,r2,8
 4000f40:	103fe61e 	bne	r2,zero,4000edc <__alt_data_end+0xfc000edc>
            &fonts[CHANNEL_FONT]
        );
    }

    // Draw the title for the message board
    draw_string(MESSAGE_X_MARGIN, TITLE_Y, "#general", &fonts[TITLE_FONT]);
 4000f44:	01c100b4 	movhi	r7,1026
 4000f48:	39d62204 	addi	r7,r7,22664
 4000f4c:	018100b4 	movhi	r6,1026
 4000f50:	31bbed04 	addi	r6,r6,-4172
 4000f54:	01400144 	movi	r5,5
 4000f58:	01002504 	movi	r4,148
 4000f5c:	400087c0 	call	400087c <draw_string>


}
 4000f60:	0001883a 	nop
 4000f64:	e037883a 	mov	sp,fp
 4000f68:	dfc00117 	ldw	ra,4(sp)
 4000f6c:	df000017 	ldw	fp,0(sp)
 4000f70:	dec00204 	addi	sp,sp,8
 4000f74:	f800283a 	ret

04000f78 <isDiscord>:

int isDiscord(const char* start) {
 4000f78:	defffc04 	addi	sp,sp,-16
 4000f7c:	df000315 	stw	fp,12(sp)
 4000f80:	df000304 	addi	fp,sp,12
 4000f84:	e13fff15 	stw	r4,-4(fp)
	const char* comp = "discord-message:";
 4000f88:	008100b4 	movhi	r2,1026
 4000f8c:	10bdee04 	addi	r2,r2,-2120
 4000f90:	e0bffe15 	stw	r2,-8(fp)
	for (int i = 0; i < 16; ++i) {
 4000f94:	e03ffd15 	stw	zero,-12(fp)
 4000f98:	00001406 	br	4000fec <isDiscord+0x74>
		if(comp[i] != start[i]) return 0;
 4000f9c:	e0bffd17 	ldw	r2,-12(fp)
 4000fa0:	e0fffe17 	ldw	r3,-8(fp)
 4000fa4:	1885883a 	add	r2,r3,r2
 4000fa8:	11000003 	ldbu	r4,0(r2)
 4000fac:	e0bffd17 	ldw	r2,-12(fp)
 4000fb0:	e0ffff17 	ldw	r3,-4(fp)
 4000fb4:	1885883a 	add	r2,r3,r2
 4000fb8:	10800003 	ldbu	r2,0(r2)
 4000fbc:	20c03fcc 	andi	r3,r4,255
 4000fc0:	18c0201c 	xori	r3,r3,128
 4000fc4:	18ffe004 	addi	r3,r3,-128
 4000fc8:	10803fcc 	andi	r2,r2,255
 4000fcc:	1080201c 	xori	r2,r2,128
 4000fd0:	10bfe004 	addi	r2,r2,-128
 4000fd4:	18800226 	beq	r3,r2,4000fe0 <isDiscord+0x68>
 4000fd8:	0005883a 	mov	r2,zero
 4000fdc:	00000706 	br	4000ffc <isDiscord+0x84>

}

int isDiscord(const char* start) {
	const char* comp = "discord-message:";
	for (int i = 0; i < 16; ++i) {
 4000fe0:	e0bffd17 	ldw	r2,-12(fp)
 4000fe4:	10800044 	addi	r2,r2,1
 4000fe8:	e0bffd15 	stw	r2,-12(fp)
 4000fec:	e0bffd17 	ldw	r2,-12(fp)
 4000ff0:	10800410 	cmplti	r2,r2,16
 4000ff4:	103fe91e 	bne	r2,zero,4000f9c <__alt_data_end+0xfc000f9c>
		if(comp[i] != start[i]) return 0;
	}
	return 1;
 4000ff8:	00800044 	movi	r2,1
}
 4000ffc:	e037883a 	mov	sp,fp
 4001000:	df000017 	ldw	fp,0(sp)
 4001004:	dec00104 	addi	sp,sp,4
 4001008:	f800283a 	ret

0400100c <_ZN13DiscordClientC1Ev>:
#include "DiscordClient.h"

// constructor
DiscordClient::DiscordClient() {
 400100c:	defff904 	addi	sp,sp,-28
 4001010:	dfc00615 	stw	ra,24(sp)
 4001014:	df000515 	stw	fp,20(sp)
 4001018:	dc000415 	stw	r16,16(sp)
 400101c:	df000504 	addi	fp,sp,20
 4001020:	e13ffe15 	stw	r4,-8(fp)
 4001024:	e0bffe17 	ldw	r2,-8(fp)
 4001028:	00c00044 	movi	r3,1
 400102c:	10c7ea05 	stb	r3,8104(r2)
	  unsigned char mac[] = MAC_ADDRESS;
 4001030:	00bfea04 	movi	r2,-88
 4001034:	e0bffc05 	stb	r2,-16(fp)
 4001038:	00801844 	movi	r2,97
 400103c:	e0bffc45 	stb	r2,-15(fp)
 4001040:	00800284 	movi	r2,10
 4001044:	e0bffc85 	stb	r2,-14(fp)
 4001048:	00bfeb84 	movi	r2,-82
 400104c:	e0bffcc5 	stb	r2,-13(fp)
 4001050:	00801d04 	movi	r2,116
 4001054:	e0bffd05 	stb	r2,-12(fp)
 4001058:	00bfe984 	movi	r2,-90
 400105c:	e0bffd45 	stb	r2,-11(fp)

	if (Ethernet.begin(mac) == 0) {
 4001060:	e0bffc04 	addi	r2,fp,-16
 4001064:	0183e804 	movi	r6,4000
 4001068:	017a9814 	movui	r5,60000
 400106c:	1009883a 	mov	r4,r2
 4001070:	4003ac40 	call	4003ac4 <_ZN13EthernetClass5beginEPhmm>
 4001074:	1005003a 	cmpeq	r2,r2,zero
 4001078:	10803fcc 	andi	r2,r2,255
 400107c:	10001626 	beq	r2,zero,40010d8 <_ZN13DiscordClientC1Ev+0xcc>
		printf("Failed to configure Ethernet using DHCP");
 4001080:	010100b4 	movhi	r4,1026
 4001084:	213df304 	addi	r4,r4,-2100
 4001088:	400ca080 	call	400ca08 <printf>
		// Check for Ethernet hardware present
		if (Ethernet.hardwareStatus() == EthernetNoHardware) {
 400108c:	4003fcc0 	call	4003fcc <_ZN13EthernetClass14hardwareStatusEv>
 4001090:	1005003a 	cmpeq	r2,r2,zero
 4001094:	10803fcc 	andi	r2,r2,255
 4001098:	10000726 	beq	r2,zero,40010b8 <_ZN13DiscordClientC1Ev+0xac>
			printf("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
 400109c:	010100b4 	movhi	r4,1026
 40010a0:	213dfd04 	addi	r4,r4,-2060
 40010a4:	400ca080 	call	400ca08 <printf>
			while (true) usleep(100000); // do nothing
 40010a8:	010000b4 	movhi	r4,2
 40010ac:	2121a804 	addi	r4,r4,-31072
 40010b0:	401cc880 	call	401cc88 <usleep>
 40010b4:	003ffc06 	br	40010a8 <__alt_data_end+0xfc0010a8>
		}
		if (Ethernet.linkStatus() == LinkOFF) {
 40010b8:	4003f740 	call	4003f74 <_ZN13EthernetClass10linkStatusEv>
 40010bc:	108000a0 	cmpeqi	r2,r2,2
 40010c0:	10803fcc 	andi	r2,r2,255
 40010c4:	10000d26 	beq	r2,zero,40010fc <_ZN13DiscordClientC1Ev+0xf0>
			printf("Ethernet cable is not connected.");
 40010c8:	010100b4 	movhi	r4,1026
 40010cc:	213e0f04 	addi	r4,r4,-1988
 40010d0:	400ca080 	call	400ca08 <printf>
 40010d4:	00000906 	br	40010fc <_ZN13DiscordClientC1Ev+0xf0>
		}
	} else {
		printf("DHCP assigned IP: ");
 40010d8:	010100b4 	movhi	r4,1026
 40010dc:	213e1804 	addi	r4,r4,-1952
 40010e0:	400ca080 	call	400ca08 <printf>
		Ethernet.localIP().print();
 40010e4:	40041540 	call	4004154 <_ZN13EthernetClass7localIPEv>
 40010e8:	e0bffb15 	stw	r2,-20(fp)
 40010ec:	e13ffb04 	addi	r4,fp,-20
 40010f0:	40087800 	call	4008780 <_ZN9IPAddress5printEv>
		printf("\n");
 40010f4:	01000284 	movi	r4,10
 40010f8:	400ca4c0 	call	400ca4c <putchar>
	}

	client = new EthernetClient();
 40010fc:	01000204 	movi	r4,8
 4001100:	40098380 	call	4009838 <_Znwj>
 4001104:	1021883a 	mov	r16,r2
 4001108:	8009883a 	mov	r4,r16
 400110c:	40019d00 	call	40019d0 <_ZN14EthernetClientC1Ev>
 4001110:	e0bffe17 	ldw	r2,-8(fp)
 4001114:	1407e915 	stw	r16,8100(r2)
}
 4001118:	0001883a 	nop
 400111c:	e6ffff04 	addi	sp,fp,-4
 4001120:	dfc00217 	ldw	ra,8(sp)
 4001124:	df000117 	ldw	fp,4(sp)
 4001128:	dc000017 	ldw	r16,0(sp)
 400112c:	dec00304 	addi	sp,sp,12
 4001130:	f800283a 	ret

04001134 <_ZN13DiscordClientD1Ev>:

// destructor
DiscordClient::~DiscordClient() {
 4001134:	defffd04 	addi	sp,sp,-12
 4001138:	dfc00215 	stw	ra,8(sp)
 400113c:	df000115 	stw	fp,4(sp)
 4001140:	df000104 	addi	fp,sp,4
 4001144:	e13fff15 	stw	r4,-4(fp)
	// free the EthernetClient instance
	delete client;
 4001148:	e0bfff17 	ldw	r2,-4(fp)
 400114c:	1087e917 	ldw	r2,8100(r2)
 4001150:	10000926 	beq	r2,zero,4001178 <_ZN13DiscordClientD1Ev+0x44>
 4001154:	e0bfff17 	ldw	r2,-4(fp)
 4001158:	1087e917 	ldw	r2,8100(r2)
 400115c:	10800017 	ldw	r2,0(r2)
 4001160:	10800d04 	addi	r2,r2,52
 4001164:	10800017 	ldw	r2,0(r2)
 4001168:	e0ffff17 	ldw	r3,-4(fp)
 400116c:	18c7e917 	ldw	r3,8100(r3)
 4001170:	1809883a 	mov	r4,r3
 4001174:	103ee83a 	callr	r2
}
 4001178:	0001883a 	nop
 400117c:	e037883a 	mov	sp,fp
 4001180:	dfc00117 	ldw	ra,4(sp)
 4001184:	df000017 	ldw	fp,0(sp)
 4001188:	dec00204 	addi	sp,sp,8
 400118c:	f800283a 	ret

04001190 <_ZN13DiscordClient12fetchChannelEPKch>:

bool DiscordClient::fetchChannel(const char* channelId, uint8_t scroll) {
 4001190:	deffef04 	addi	sp,sp,-68
 4001194:	dfc01015 	stw	ra,64(sp)
 4001198:	df000f15 	stw	fp,60(sp)
 400119c:	df000f04 	addi	fp,sp,60
 40011a0:	e13ffd15 	stw	r4,-12(fp)
 40011a4:	e17ffe15 	stw	r5,-8(fp)
 40011a8:	3005883a 	mov	r2,r6
 40011ac:	e0bfff05 	stb	r2,-4(fp)
	const char* server = SERVER_ADDRESS;
 40011b0:	008100b4 	movhi	r2,1026
 40011b4:	10be1d04 	addi	r2,r2,-1932
 40011b8:	e0bff915 	stw	r2,-28(fp)

	if (client->connect(server, 80)) {
 40011bc:	e0bffd17 	ldw	r2,-12(fp)
 40011c0:	1087e917 	ldw	r2,8100(r2)
 40011c4:	10800017 	ldw	r2,0(r2)
 40011c8:	10800104 	addi	r2,r2,4
 40011cc:	10800017 	ldw	r2,0(r2)
 40011d0:	e0fffd17 	ldw	r3,-12(fp)
 40011d4:	18c7e917 	ldw	r3,8100(r3)
 40011d8:	01801404 	movi	r6,80
 40011dc:	e17ff917 	ldw	r5,-28(fp)
 40011e0:	1809883a 	mov	r4,r3
 40011e4:	103ee83a 	callr	r2
 40011e8:	1004c03a 	cmpne	r2,r2,zero
 40011ec:	10803fcc 	andi	r2,r2,255
 40011f0:	10005d26 	beq	r2,zero,4001368 <_ZN13DiscordClient12fetchChannelEPKch+0x1d8>
		//client.remoteIP().print();
		//printf("\n");
		// Make a HTTP request:
		//client->print("GET /get/945536104629698631/0 HTTP/1.1");
		char scroll_str[4];
		sprintf(scroll_str, "%u", scroll);
 40011f4:	e0ffff03 	ldbu	r3,-4(fp)
 40011f8:	e0bffc04 	addi	r2,fp,-16
 40011fc:	180d883a 	mov	r6,r3
 4001200:	014100b4 	movhi	r5,1026
 4001204:	297e2104 	addi	r5,r5,-1916
 4001208:	1009883a 	mov	r4,r2
 400120c:	400cee80 	call	400cee8 <sprintf>

		client->print("GET /get/");
 4001210:	e0bffd17 	ldw	r2,-12(fp)
 4001214:	1087e917 	ldw	r2,8100(r2)
 4001218:	10800017 	ldw	r2,0(r2)
 400121c:	10800f04 	addi	r2,r2,60
 4001220:	10800017 	ldw	r2,0(r2)
 4001224:	e0fffd17 	ldw	r3,-12(fp)
 4001228:	18c7e917 	ldw	r3,8100(r3)
 400122c:	014100b4 	movhi	r5,1026
 4001230:	297e2204 	addi	r5,r5,-1912
 4001234:	1809883a 	mov	r4,r3
 4001238:	103ee83a 	callr	r2
		client->print(channelId);
 400123c:	e0bffd17 	ldw	r2,-12(fp)
 4001240:	1087e917 	ldw	r2,8100(r2)
 4001244:	10800017 	ldw	r2,0(r2)
 4001248:	10800f04 	addi	r2,r2,60
 400124c:	10800017 	ldw	r2,0(r2)
 4001250:	e0fffd17 	ldw	r3,-12(fp)
 4001254:	18c7e917 	ldw	r3,8100(r3)
 4001258:	e17ffe17 	ldw	r5,-8(fp)
 400125c:	1809883a 	mov	r4,r3
 4001260:	103ee83a 	callr	r2
		client->print("/");
 4001264:	e0bffd17 	ldw	r2,-12(fp)
 4001268:	1087e917 	ldw	r2,8100(r2)
 400126c:	10800017 	ldw	r2,0(r2)
 4001270:	10800f04 	addi	r2,r2,60
 4001274:	10800017 	ldw	r2,0(r2)
 4001278:	e0fffd17 	ldw	r3,-12(fp)
 400127c:	18c7e917 	ldw	r3,8100(r3)
 4001280:	014100b4 	movhi	r5,1026
 4001284:	297e2504 	addi	r5,r5,-1900
 4001288:	1809883a 	mov	r4,r3
 400128c:	103ee83a 	callr	r2
		client->print((const char*)scroll_str);
 4001290:	e0bffd17 	ldw	r2,-12(fp)
 4001294:	1087e917 	ldw	r2,8100(r2)
 4001298:	10800017 	ldw	r2,0(r2)
 400129c:	10800f04 	addi	r2,r2,60
 40012a0:	10800017 	ldw	r2,0(r2)
 40012a4:	e0fffd17 	ldw	r3,-12(fp)
 40012a8:	18c7e917 	ldw	r3,8100(r3)
 40012ac:	e13ffc04 	addi	r4,fp,-16
 40012b0:	200b883a 	mov	r5,r4
 40012b4:	1809883a 	mov	r4,r3
 40012b8:	103ee83a 	callr	r2
		client->println(" HTTP/1.1");
 40012bc:	e0bffd17 	ldw	r2,-12(fp)
 40012c0:	1087e917 	ldw	r2,8100(r2)
 40012c4:	10800017 	ldw	r2,0(r2)
 40012c8:	10801104 	addi	r2,r2,68
 40012cc:	10800017 	ldw	r2,0(r2)
 40012d0:	e0fffd17 	ldw	r3,-12(fp)
 40012d4:	18c7e917 	ldw	r3,8100(r3)
 40012d8:	014100b4 	movhi	r5,1026
 40012dc:	297e2604 	addi	r5,r5,-1896
 40012e0:	1809883a 	mov	r4,r3
 40012e4:	103ee83a 	callr	r2
		client->println("Host: 149.56.141.231");
 40012e8:	e0bffd17 	ldw	r2,-12(fp)
 40012ec:	1087e917 	ldw	r2,8100(r2)
 40012f0:	10800017 	ldw	r2,0(r2)
 40012f4:	10801104 	addi	r2,r2,68
 40012f8:	10800017 	ldw	r2,0(r2)
 40012fc:	e0fffd17 	ldw	r3,-12(fp)
 4001300:	18c7e917 	ldw	r3,8100(r3)
 4001304:	014100b4 	movhi	r5,1026
 4001308:	297e2904 	addi	r5,r5,-1884
 400130c:	1809883a 	mov	r4,r3
 4001310:	103ee83a 	callr	r2
		client->println("Connection: close");
 4001314:	e0bffd17 	ldw	r2,-12(fp)
 4001318:	1087e917 	ldw	r2,8100(r2)
 400131c:	10800017 	ldw	r2,0(r2)
 4001320:	10801104 	addi	r2,r2,68
 4001324:	10800017 	ldw	r2,0(r2)
 4001328:	e0fffd17 	ldw	r3,-12(fp)
 400132c:	18c7e917 	ldw	r3,8100(r3)
 4001330:	014100b4 	movhi	r5,1026
 4001334:	297e2f04 	addi	r5,r5,-1860
 4001338:	1809883a 	mov	r4,r3
 400133c:	103ee83a 	callr	r2
		client->println();
 4001340:	e0bffd17 	ldw	r2,-12(fp)
 4001344:	1087e917 	ldw	r2,8100(r2)
 4001348:	10800017 	ldw	r2,0(r2)
 400134c:	10801004 	addi	r2,r2,64
 4001350:	10800017 	ldw	r2,0(r2)
 4001354:	e0fffd17 	ldw	r3,-12(fp)
 4001358:	18c7e917 	ldw	r3,8100(r3)
 400135c:	1809883a 	mov	r4,r3
 4001360:	103ee83a 	callr	r2
 4001364:	00000306 	br	4001374 <_ZN13DiscordClient12fetchChannelEPKch+0x1e4>

	} else {
		// if you didn't get a connection to the server:
		printf("connection failed.\n");
 4001368:	010100b4 	movhi	r4,1026
 400136c:	213e3404 	addi	r4,r4,-1840
 4001370:	400cb240 	call	400cb24 <puts>
	}

	// allocate an rx buffer
	uint8_t* rx_buffer = (uint8_t*) malloc(RX_BUFFER_SIZE);
 4001374:	01065904 	movi	r4,6500
 4001378:	400beb80 	call	400beb8 <malloc>
 400137c:	e0bffa15 	stw	r2,-24(fp)

	// keeps track of where the buffer ends, resets once DISCORD_START is found
	unsigned buffer_end = 0;
 4001380:	e03ff115 	stw	zero,-60(fp)

	while (1) {
	    unsigned len = client->available();
 4001384:	e0bffd17 	ldw	r2,-12(fp)
 4001388:	1087e917 	ldw	r2,8100(r2)
 400138c:	10800017 	ldw	r2,0(r2)
 4001390:	10800404 	addi	r2,r2,16
 4001394:	10800017 	ldw	r2,0(r2)
 4001398:	e0fffd17 	ldw	r3,-12(fp)
 400139c:	18c7e917 	ldw	r3,8100(r3)
 40013a0:	1809883a 	mov	r4,r3
 40013a4:	103ee83a 	callr	r2
 40013a8:	e0bff215 	stw	r2,-56(fp)


		if (len > 0) {
 40013ac:	e0bff217 	ldw	r2,-56(fp)
 40013b0:	10004526 	beq	r2,zero,40014c8 <_ZN13DiscordClient12fetchChannelEPKch+0x338>

			// read 100 bytes at a time
			if (len > 100)
 40013b4:	e0bff217 	ldw	r2,-56(fp)
 40013b8:	10801970 	cmpltui	r2,r2,101
 40013bc:	1000021e 	bne	r2,zero,40013c8 <_ZN13DiscordClient12fetchChannelEPKch+0x238>
				len = 100;
 40013c0:	00801904 	movi	r2,100
 40013c4:	e0bff215 	stw	r2,-56(fp)

			// TODO handle this edge case (or just increase rx buffer size if needed)
			// this is here to avoid possible segfaults
			if(buffer_end + len >= RX_BUFFER_SIZE) {
 40013c8:	e0fff117 	ldw	r3,-60(fp)
 40013cc:	e0bff217 	ldw	r2,-56(fp)
 40013d0:	1885883a 	add	r2,r3,r2
 40013d4:	10865930 	cmpltui	r2,r2,6500
 40013d8:	10000a1e 	bne	r2,zero,4001404 <_ZN13DiscordClient12fetchChannelEPKch+0x274>
				printf("Server sent too much data! Channel has not been fetched.\n");
 40013dc:	010100b4 	movhi	r4,1026
 40013e0:	213e3904 	addi	r4,r4,-1820
 40013e4:	400cb240 	call	400cb24 <puts>
				printf("Either the headers are too big or DISCORD_START is not present in the server response.\n");
 40013e8:	010100b4 	movhi	r4,1026
 40013ec:	213e4804 	addi	r4,r4,-1760
 40013f0:	400cb240 	call	400cb24 <puts>
				free(rx_buffer);
 40013f4:	e13ffa17 	ldw	r4,-24(fp)
 40013f8:	400becc0 	call	400becc <free>
				return false;
 40013fc:	0005883a 	mov	r2,zero
 4001400:	0000f406 	br	40017d4 <_ZN13DiscordClient12fetchChannelEPKch+0x644>
			}

			// read the data
			client->read(rx_buffer + buffer_end, len);
 4001404:	e0bffd17 	ldw	r2,-12(fp)
 4001408:	1087e917 	ldw	r2,8100(r2)
 400140c:	10800017 	ldw	r2,0(r2)
 4001410:	10800604 	addi	r2,r2,24
 4001414:	10800017 	ldw	r2,0(r2)
 4001418:	e0fffd17 	ldw	r3,-12(fp)
 400141c:	19c7e917 	ldw	r7,8100(r3)
 4001420:	e13ffa17 	ldw	r4,-24(fp)
 4001424:	e0fff117 	ldw	r3,-60(fp)
 4001428:	20c7883a 	add	r3,r4,r3
 400142c:	e1bff217 	ldw	r6,-56(fp)
 4001430:	180b883a 	mov	r5,r3
 4001434:	3809883a 	mov	r4,r7
 4001438:	103ee83a 	callr	r2
			//printf("\nNew Buffer:\n");
			//for (unsigned i = 0; i < buffer_end + len; ++i) {
				//printf("%c", rx_buffer[i]);
			//}

			buffer_end += len;
 400143c:	e0fff117 	ldw	r3,-60(fp)
 4001440:	e0bff217 	ldw	r2,-56(fp)
 4001444:	1885883a 	add	r2,r3,r2
 4001448:	e0bff115 	stw	r2,-60(fp)

			// if the buffer contains the Discord start string, reset the buffer end point to overwrite the header data
			int discord_start = discordStartPos((const char*) rx_buffer, buffer_end);
 400144c:	e1bff117 	ldw	r6,-60(fp)
 4001450:	e17ffa17 	ldw	r5,-24(fp)
 4001454:	e13ffd17 	ldw	r4,-12(fp)
 4001458:	40017e80 	call	40017e8 <_ZN13DiscordClient15discordStartPosEPKcj>
 400145c:	e0bffb15 	stw	r2,-20(fp)
			if(discord_start > 0) {
 4001460:	e0bffb17 	ldw	r2,-20(fp)
 4001464:	0080180e 	bge	zero,r2,40014c8 <_ZN13DiscordClient12fetchChannelEPKch+0x338>
				// move the data after the starting point to the beginning of the buffer
				for(unsigned i = 0; i < buffer_end-discord_start; ++i) {
 4001468:	e03ff315 	stw	zero,-52(fp)
 400146c:	e0bffb17 	ldw	r2,-20(fp)
 4001470:	e0fff117 	ldw	r3,-60(fp)
 4001474:	1885c83a 	sub	r2,r3,r2
 4001478:	e0fff317 	ldw	r3,-52(fp)
 400147c:	18800e2e 	bgeu	r3,r2,40014b8 <_ZN13DiscordClient12fetchChannelEPKch+0x328>
					rx_buffer[i] = rx_buffer[i+discord_start];
 4001480:	e0fffa17 	ldw	r3,-24(fp)
 4001484:	e0bff317 	ldw	r2,-52(fp)
 4001488:	1885883a 	add	r2,r3,r2
 400148c:	e13ffb17 	ldw	r4,-20(fp)
 4001490:	e0fff317 	ldw	r3,-52(fp)
 4001494:	20c7883a 	add	r3,r4,r3
 4001498:	e13ffa17 	ldw	r4,-24(fp)
 400149c:	20c7883a 	add	r3,r4,r3
 40014a0:	18c00003 	ldbu	r3,0(r3)
 40014a4:	10c00005 	stb	r3,0(r2)

			// if the buffer contains the Discord start string, reset the buffer end point to overwrite the header data
			int discord_start = discordStartPos((const char*) rx_buffer, buffer_end);
			if(discord_start > 0) {
				// move the data after the starting point to the beginning of the buffer
				for(unsigned i = 0; i < buffer_end-discord_start; ++i) {
 40014a8:	e0bff317 	ldw	r2,-52(fp)
 40014ac:	10800044 	addi	r2,r2,1
 40014b0:	e0bff315 	stw	r2,-52(fp)
 40014b4:	003fed06 	br	400146c <__alt_data_end+0xfc00146c>
					rx_buffer[i] = rx_buffer[i+discord_start];
				}

				// shift the buffer endpoint
				buffer_end -= discord_start;
 40014b8:	e0bffb17 	ldw	r2,-20(fp)
 40014bc:	e0fff117 	ldw	r3,-60(fp)
 40014c0:	1885c83a 	sub	r2,r3,r2
 40014c4:	e0bff115 	stw	r2,-60(fp)
			//printf("\ndiscordStartPos: %i\n", discordStartPos((const char*) rx_buffer, buffer_end));

		}

		// if the server's disconnected, stop the client:
		if (!client->connected()) {
 40014c8:	e0bffd17 	ldw	r2,-12(fp)
 40014cc:	1087e917 	ldw	r2,8100(r2)
 40014d0:	10800017 	ldw	r2,0(r2)
 40014d4:	10800a04 	addi	r2,r2,40
 40014d8:	10800017 	ldw	r2,0(r2)
 40014dc:	e0fffd17 	ldw	r3,-12(fp)
 40014e0:	18c7e917 	ldw	r3,8100(r3)
 40014e4:	1809883a 	mov	r4,r3
 40014e8:	103ee83a 	callr	r2
 40014ec:	10803fcc 	andi	r2,r2,255
 40014f0:	1005003a 	cmpeq	r2,r2,zero
 40014f4:	10803fcc 	andi	r2,r2,255
 40014f8:	103fa226 	beq	r2,zero,4001384 <__alt_data_end+0xfc001384>
			client->stop();
 40014fc:	e0bffd17 	ldw	r2,-12(fp)
 4001500:	1087e917 	ldw	r2,8100(r2)
 4001504:	10800017 	ldw	r2,0(r2)
 4001508:	10800904 	addi	r2,r2,36
 400150c:	10800017 	ldw	r2,0(r2)
 4001510:	e0fffd17 	ldw	r3,-12(fp)
 4001514:	18c7e917 	ldw	r3,8100(r3)
 4001518:	1809883a 	mov	r4,r3
 400151c:	103ee83a 	callr	r2

			// track if the text has changed
			bool changed = false;
 4001520:	e03ff405 	stb	zero,-48(fp)

			unsigned mem_idx = 0;
 4001524:	e03ff515 	stw	zero,-44(fp)
			for(int line = 0; line < MAX_MESSAGE_LINES; ++line) {
 4001528:	e03ff615 	stw	zero,-40(fp)
 400152c:	e0bff617 	ldw	r2,-40(fp)
 4001530:	10800648 	cmpgei	r2,r2,25
 4001534:	1000981e 	bne	r2,zero,4001798 <_ZN13DiscordClient12fetchChannelEPKch+0x608>
				bool first = true;
 4001538:	00800044 	movi	r2,1
 400153c:	e0bff705 	stb	r2,-36(fp)
				unsigned line_idx = 0;
 4001540:	e03ff815 	stw	zero,-32(fp)

				// for each line, loop until newline
				while(rx_buffer[mem_idx] != '\n' && line_idx < MAX_LINE_LENGTH && mem_idx < buffer_end) {
 4001544:	e0fffa17 	ldw	r3,-24(fp)
 4001548:	e0bff517 	ldw	r2,-44(fp)
 400154c:	1885883a 	add	r2,r3,r2
 4001550:	10800003 	ldbu	r2,0(r2)
 4001554:	10803fcc 	andi	r2,r2,255
 4001558:	108002a0 	cmpeqi	r2,r2,10
 400155c:	1000681e 	bne	r2,zero,4001700 <_ZN13DiscordClient12fetchChannelEPKch+0x570>
 4001560:	e0bff817 	ldw	r2,-32(fp)
 4001564:	10805028 	cmpgeui	r2,r2,320
 4001568:	1000651e 	bne	r2,zero,4001700 <_ZN13DiscordClient12fetchChannelEPKch+0x570>
 400156c:	e0fff517 	ldw	r3,-44(fp)
 4001570:	e0bff117 	ldw	r2,-60(fp)
 4001574:	1880622e 	bgeu	r3,r2,4001700 <_ZN13DiscordClient12fetchChannelEPKch+0x570>
					if(first) {
 4001578:	e0bff703 	ldbu	r2,-36(fp)
 400157c:	10003c26 	beq	r2,zero,4001670 <_ZN13DiscordClient12fetchChannelEPKch+0x4e0>
						if(rx_buffer[mem_idx] == 'u') {
 4001580:	e0fffa17 	ldw	r3,-24(fp)
 4001584:	e0bff517 	ldw	r2,-44(fp)
 4001588:	1885883a 	add	r2,r3,r2
 400158c:	10800003 	ldbu	r2,0(r2)
 4001590:	10803fcc 	andi	r2,r2,255
 4001594:	10801d58 	cmpnei	r2,r2,117
 4001598:	10000f1e 	bne	r2,zero,40015d8 <_ZN13DiscordClient12fetchChannelEPKch+0x448>
							if(messageCache[line].font == MESSAGE) changed = true;
 400159c:	e0fffd17 	ldw	r3,-12(fp)
 40015a0:	e0bff617 	ldw	r2,-40(fp)
 40015a4:	10805124 	muli	r2,r2,324
 40015a8:	1885883a 	add	r2,r3,r2
 40015ac:	10800017 	ldw	r2,0(r2)
 40015b0:	10800058 	cmpnei	r2,r2,1
 40015b4:	1000021e 	bne	r2,zero,40015c0 <_ZN13DiscordClient12fetchChannelEPKch+0x430>
 40015b8:	00800044 	movi	r2,1
 40015bc:	e0bff405 	stb	r2,-48(fp)
							messageCache[line].font = USERNAME;
 40015c0:	e0fffd17 	ldw	r3,-12(fp)
 40015c4:	e0bff617 	ldw	r2,-40(fp)
 40015c8:	10805124 	muli	r2,r2,324
 40015cc:	1885883a 	add	r2,r3,r2
 40015d0:	10000015 	stw	zero,0(r2)
 40015d4:	00002106 	br	400165c <_ZN13DiscordClient12fetchChannelEPKch+0x4cc>
						} else if (rx_buffer[mem_idx] == 'm') {
 40015d8:	e0fffa17 	ldw	r3,-24(fp)
 40015dc:	e0bff517 	ldw	r2,-44(fp)
 40015e0:	1885883a 	add	r2,r3,r2
 40015e4:	10800003 	ldbu	r2,0(r2)
 40015e8:	10803fcc 	andi	r2,r2,255
 40015ec:	10801b58 	cmpnei	r2,r2,109
 40015f0:	10000f1e 	bne	r2,zero,4001630 <_ZN13DiscordClient12fetchChannelEPKch+0x4a0>
							if(messageCache[line].font == USERNAME) changed = true;
 40015f4:	e0fffd17 	ldw	r3,-12(fp)
 40015f8:	e0bff617 	ldw	r2,-40(fp)
 40015fc:	10805124 	muli	r2,r2,324
 4001600:	1885883a 	add	r2,r3,r2
 4001604:	10800017 	ldw	r2,0(r2)
 4001608:	1000021e 	bne	r2,zero,4001614 <_ZN13DiscordClient12fetchChannelEPKch+0x484>
 400160c:	00800044 	movi	r2,1
 4001610:	e0bff405 	stb	r2,-48(fp)
							messageCache[line].font = MESSAGE;
 4001614:	e0fffd17 	ldw	r3,-12(fp)
 4001618:	e0bff617 	ldw	r2,-40(fp)
 400161c:	10805124 	muli	r2,r2,324
 4001620:	1885883a 	add	r2,r3,r2
 4001624:	00c00044 	movi	r3,1
 4001628:	10c00015 	stw	r3,0(r2)
 400162c:	00000b06 	br	400165c <_ZN13DiscordClient12fetchChannelEPKch+0x4cc>
						} else {
							printf("Warning: line %i does not have a valid start character!\n", line);
 4001630:	e17ff617 	ldw	r5,-40(fp)
 4001634:	010100b4 	movhi	r4,1026
 4001638:	213e5e04 	addi	r4,r4,-1672
 400163c:	400ca080 	call	400ca08 <printf>
							// just put a blank line
							messageCache[line].font = MESSAGE;
 4001640:	e0fffd17 	ldw	r3,-12(fp)
 4001644:	e0bff617 	ldw	r2,-40(fp)
 4001648:	10805124 	muli	r2,r2,324
 400164c:	1885883a 	add	r2,r3,r2
 4001650:	00c00044 	movi	r3,1
 4001654:	10c00015 	stw	r3,0(r2)
							break;
 4001658:	00002906 	br	4001700 <_ZN13DiscordClient12fetchChannelEPKch+0x570>
						}
						first = false;
 400165c:	e03ff705 	stb	zero,-36(fp)
						++mem_idx;
 4001660:	e0bff517 	ldw	r2,-44(fp)
 4001664:	10800044 	addi	r2,r2,1
 4001668:	e0bff515 	stw	r2,-44(fp)
 400166c:	003fb506 	br	4001544 <__alt_data_end+0xfc001544>
					// for lines after first, copy the buffer into the line and increment the memory addresses
					} else {

						// must cast from char to uint8_t or this test will fail in certain edge cases
						// (specifically, with character codes >=128 such as the unknown character)
						if((uint8_t) messageCache[line].content[line_idx] != rx_buffer[mem_idx]) {
 4001670:	e0fffd17 	ldw	r3,-12(fp)
 4001674:	e0bff617 	ldw	r2,-40(fp)
 4001678:	10805124 	muli	r2,r2,324
 400167c:	1887883a 	add	r3,r3,r2
 4001680:	e0bff817 	ldw	r2,-32(fp)
 4001684:	1885883a 	add	r2,r3,r2
 4001688:	10800104 	addi	r2,r2,4
 400168c:	10800003 	ldbu	r2,0(r2)
 4001690:	1009883a 	mov	r4,r2
 4001694:	e0fffa17 	ldw	r3,-24(fp)
 4001698:	e0bff517 	ldw	r2,-44(fp)
 400169c:	1885883a 	add	r2,r3,r2
 40016a0:	10800003 	ldbu	r2,0(r2)
 40016a4:	20c03fcc 	andi	r3,r4,255
 40016a8:	10803fcc 	andi	r2,r2,255
 40016ac:	18800226 	beq	r3,r2,40016b8 <_ZN13DiscordClient12fetchChannelEPKch+0x528>
							changed = true;
 40016b0:	00800044 	movi	r2,1
 40016b4:	e0bff405 	stb	r2,-48(fp)
						}
						messageCache[line].content[line_idx++] = rx_buffer[mem_idx++];
 40016b8:	e0bff817 	ldw	r2,-32(fp)
 40016bc:	10c00044 	addi	r3,r2,1
 40016c0:	e0fff815 	stw	r3,-32(fp)
 40016c4:	e0fff517 	ldw	r3,-44(fp)
 40016c8:	19000044 	addi	r4,r3,1
 40016cc:	e13ff515 	stw	r4,-44(fp)
 40016d0:	e13ffa17 	ldw	r4,-24(fp)
 40016d4:	20c7883a 	add	r3,r4,r3
 40016d8:	18c00003 	ldbu	r3,0(r3)
 40016dc:	180b883a 	mov	r5,r3
 40016e0:	e13ffd17 	ldw	r4,-12(fp)
 40016e4:	e0fff617 	ldw	r3,-40(fp)
 40016e8:	18c05124 	muli	r3,r3,324
 40016ec:	20c7883a 	add	r3,r4,r3
 40016f0:	1885883a 	add	r2,r3,r2
 40016f4:	10800104 	addi	r2,r2,4
 40016f8:	11400005 	stb	r5,0(r2)
			for(int line = 0; line < MAX_MESSAGE_LINES; ++line) {
				bool first = true;
				unsigned line_idx = 0;

				// for each line, loop until newline
				while(rx_buffer[mem_idx] != '\n' && line_idx < MAX_LINE_LENGTH && mem_idx < buffer_end) {
 40016fc:	003f9106 	br	4001544 <__alt_data_end+0xfc001544>
						messageCache[line].content[line_idx++] = rx_buffer[mem_idx++];
					}

				}
				// move past the trailing newline
				++mem_idx;
 4001700:	e0bff517 	ldw	r2,-44(fp)
 4001704:	10800044 	addi	r2,r2,1
 4001708:	e0bff515 	stw	r2,-44(fp)

				// null-terminate the end of the string
				messageCache[line].content[line_idx] = '\0';
 400170c:	e0fffd17 	ldw	r3,-12(fp)
 4001710:	e0bff617 	ldw	r2,-40(fp)
 4001714:	10805124 	muli	r2,r2,324
 4001718:	1887883a 	add	r3,r3,r2
 400171c:	e0bff817 	ldw	r2,-32(fp)
 4001720:	1885883a 	add	r2,r3,r2
 4001724:	10800104 	addi	r2,r2,4
 4001728:	10000005 	stb	zero,0(r2)

				// print message content
				//printf("Line: %i, Font: %i, Content: %s\n", line, messageCache[line].font, messageCache[line].content);

				// print out warnings
				if(line_idx >= MAX_LINE_LENGTH) {
 400172c:	e0bff817 	ldw	r2,-32(fp)
 4001730:	10805030 	cmpltui	r2,r2,320
 4001734:	1000071e 	bne	r2,zero,4001754 <_ZN13DiscordClient12fetchChannelEPKch+0x5c4>
					printf("WARNING: Received a line that was too long!\n");
 4001738:	010100b4 	movhi	r4,1026
 400173c:	213e6d04 	addi	r4,r4,-1612
 4001740:	400cb240 	call	400cb24 <puts>
					free(rx_buffer);
 4001744:	e13ffa17 	ldw	r4,-24(fp)
 4001748:	400becc0 	call	400becc <free>
					return false;
 400174c:	0005883a 	mov	r2,zero
 4001750:	00002006 	br	40017d4 <_ZN13DiscordClient12fetchChannelEPKch+0x644>
				}
				if(mem_idx >= buffer_end && line < MAX_MESSAGE_LINES-1) {
 4001754:	e0fff517 	ldw	r3,-44(fp)
 4001758:	e0bff117 	ldw	r2,-60(fp)
 400175c:	18800a36 	bltu	r3,r2,4001788 <_ZN13DiscordClient12fetchChannelEPKch+0x5f8>
 4001760:	e0bff617 	ldw	r2,-40(fp)
 4001764:	10800608 	cmpgei	r2,r2,24
 4001768:	1000071e 	bne	r2,zero,4001788 <_ZN13DiscordClient12fetchChannelEPKch+0x5f8>
					printf("WARNING: Reached end of RX buffer while reading Discord messages!\n");
 400176c:	010100b4 	movhi	r4,1026
 4001770:	213e7804 	addi	r4,r4,-1568
 4001774:	400cb240 	call	400cb24 <puts>
					free(rx_buffer);
 4001778:	e13ffa17 	ldw	r4,-24(fp)
 400177c:	400becc0 	call	400becc <free>
					return false;
 4001780:	0005883a 	mov	r2,zero
 4001784:	00001306 	br	40017d4 <_ZN13DiscordClient12fetchChannelEPKch+0x644>

			// track if the text has changed
			bool changed = false;

			unsigned mem_idx = 0;
			for(int line = 0; line < MAX_MESSAGE_LINES; ++line) {
 4001788:	e0bff617 	ldw	r2,-40(fp)
 400178c:	10800044 	addi	r2,r2,1
 4001790:	e0bff615 	stw	r2,-40(fp)
 4001794:	003f6506 	br	400152c <__alt_data_end+0xfc00152c>
				}

			}

			// free the read buffer and return
			free(rx_buffer);
 4001798:	e13ffa17 	ldw	r4,-24(fp)
 400179c:	400becc0 	call	400becc <free>

			changed = changed || first_run;
 40017a0:	e0bff403 	ldbu	r2,-48(fp)
 40017a4:	1000041e 	bne	r2,zero,40017b8 <_ZN13DiscordClient12fetchChannelEPKch+0x628>
 40017a8:	e0bffd17 	ldw	r2,-12(fp)
 40017ac:	1087ea03 	ldbu	r2,8104(r2)
 40017b0:	10803fcc 	andi	r2,r2,255
 40017b4:	10000226 	beq	r2,zero,40017c0 <_ZN13DiscordClient12fetchChannelEPKch+0x630>
 40017b8:	00800044 	movi	r2,1
 40017bc:	00000106 	br	40017c4 <_ZN13DiscordClient12fetchChannelEPKch+0x634>
 40017c0:	0005883a 	mov	r2,zero
 40017c4:	e0bff405 	stb	r2,-48(fp)
			first_run = false;
 40017c8:	e0bffd17 	ldw	r2,-12(fp)
 40017cc:	1007ea05 	stb	zero,8104(r2)
			return changed;
 40017d0:	e0bff403 	ldbu	r2,-48(fp)
		}
	}
}
 40017d4:	e037883a 	mov	sp,fp
 40017d8:	dfc00117 	ldw	ra,4(sp)
 40017dc:	df000017 	ldw	fp,0(sp)
 40017e0:	dec00204 	addi	sp,sp,8
 40017e4:	f800283a 	ret

040017e8 <_ZN13DiscordClient15discordStartPosEPKcj>:

// searches a character buffer for DISCORD_START
// returns the index of the first character after DISCORD_START
// if DISCORD_START is not found, this returns -1
int DiscordClient::discordStartPos(const char* buffer, unsigned len) {
 40017e8:	defff704 	addi	sp,sp,-36
 40017ec:	df000815 	stw	fp,32(sp)
 40017f0:	df000804 	addi	fp,sp,32
 40017f4:	e13ffd15 	stw	r4,-12(fp)
 40017f8:	e17ffe15 	stw	r5,-8(fp)
 40017fc:	e1bfff15 	stw	r6,-4(fp)
	const char* target = DISCORD_START;
 4001800:	008100b4 	movhi	r2,1026
 4001804:	10be8904 	addi	r2,r2,-1500
 4001808:	e0bffb15 	stw	r2,-20(fp)
	const unsigned target_length = DISCORD_START_LENGTH;
 400180c:	00800384 	movi	r2,14
 4001810:	e0bffc15 	stw	r2,-16(fp)

	// linear substring search (assumine target_length is constant)

	for(unsigned start = 0; start < len - target_length; ++start) {
 4001814:	e03ff815 	stw	zero,-32(fp)
 4001818:	e0bfff17 	ldw	r2,-4(fp)
 400181c:	10bffc84 	addi	r2,r2,-14
 4001820:	e0fff817 	ldw	r3,-32(fp)
 4001824:	1880262e 	bgeu	r3,r2,40018c0 <_ZN13DiscordClient15discordStartPosEPKcj+0xd8>
		bool equal = true;
 4001828:	00800044 	movi	r2,1
 400182c:	e0bff905 	stb	r2,-28(fp)
		for(unsigned i = 0; i < target_length; ++i) {
 4001830:	e03ffa15 	stw	zero,-24(fp)
 4001834:	e0bffa17 	ldw	r2,-24(fp)
 4001838:	108003a8 	cmpgeui	r2,r2,14
 400183c:	1000171e 	bne	r2,zero,400189c <_ZN13DiscordClient15discordStartPosEPKcj+0xb4>
			if(target[i] != buffer[start+i]) {
 4001840:	e0fffb17 	ldw	r3,-20(fp)
 4001844:	e0bffa17 	ldw	r2,-24(fp)
 4001848:	1885883a 	add	r2,r3,r2
 400184c:	11000003 	ldbu	r4,0(r2)
 4001850:	e0fff817 	ldw	r3,-32(fp)
 4001854:	e0bffa17 	ldw	r2,-24(fp)
 4001858:	1885883a 	add	r2,r3,r2
 400185c:	e0fffe17 	ldw	r3,-8(fp)
 4001860:	1885883a 	add	r2,r3,r2
 4001864:	10800003 	ldbu	r2,0(r2)
 4001868:	20c03fcc 	andi	r3,r4,255
 400186c:	18c0201c 	xori	r3,r3,128
 4001870:	18ffe004 	addi	r3,r3,-128
 4001874:	10803fcc 	andi	r2,r2,255
 4001878:	1080201c 	xori	r2,r2,128
 400187c:	10bfe004 	addi	r2,r2,-128
 4001880:	18800226 	beq	r3,r2,400188c <_ZN13DiscordClient15discordStartPosEPKcj+0xa4>
				equal = false;
 4001884:	e03ff905 	stb	zero,-28(fp)
				break;
 4001888:	00000406 	br	400189c <_ZN13DiscordClient15discordStartPosEPKcj+0xb4>

	// linear substring search (assumine target_length is constant)

	for(unsigned start = 0; start < len - target_length; ++start) {
		bool equal = true;
		for(unsigned i = 0; i < target_length; ++i) {
 400188c:	e0bffa17 	ldw	r2,-24(fp)
 4001890:	10800044 	addi	r2,r2,1
 4001894:	e0bffa15 	stw	r2,-24(fp)
 4001898:	003fe606 	br	4001834 <__alt_data_end+0xfc001834>
				equal = false;
				break;
			}
		}
		// if the string is found, return the next character position
		if(equal) {
 400189c:	e0bff903 	ldbu	r2,-28(fp)
 40018a0:	10000326 	beq	r2,zero,40018b0 <_ZN13DiscordClient15discordStartPosEPKcj+0xc8>
			return start + target_length;
 40018a4:	e0bff817 	ldw	r2,-32(fp)
 40018a8:	10800384 	addi	r2,r2,14
 40018ac:	00000506 	br	40018c4 <_ZN13DiscordClient15discordStartPosEPKcj+0xdc>
	const char* target = DISCORD_START;
	const unsigned target_length = DISCORD_START_LENGTH;

	// linear substring search (assumine target_length is constant)

	for(unsigned start = 0; start < len - target_length; ++start) {
 40018b0:	e0bff817 	ldw	r2,-32(fp)
 40018b4:	10800044 	addi	r2,r2,1
 40018b8:	e0bff815 	stw	r2,-32(fp)
 40018bc:	003fd606 	br	4001818 <__alt_data_end+0xfc001818>
		// if the string is found, return the next character position
		if(equal) {
			return start + target_length;
		}
	}
	return -1;
 40018c0:	00bfffc4 	movi	r2,-1
}
 40018c4:	e037883a 	mov	sp,fp
 40018c8:	df000017 	ldw	fp,0(sp)
 40018cc:	dec00104 	addi	sp,sp,4
 40018d0:	f800283a 	ret

040018d4 <_ZN13DiscordClient7getLineEh>:

// returns a pointer to a given message line
const MessageLine* DiscordClient::getLine(uint8_t line) {
 40018d4:	defffd04 	addi	sp,sp,-12
 40018d8:	df000215 	stw	fp,8(sp)
 40018dc:	df000204 	addi	fp,sp,8
 40018e0:	e13ffe15 	stw	r4,-8(fp)
 40018e4:	2805883a 	mov	r2,r5
 40018e8:	e0bfff05 	stb	r2,-4(fp)
	return &messageCache[line];
 40018ec:	e0bfff03 	ldbu	r2,-4(fp)
 40018f0:	10805124 	muli	r2,r2,324
 40018f4:	e0fffe17 	ldw	r3,-8(fp)
 40018f8:	1885883a 	add	r2,r3,r2
}
 40018fc:	e037883a 	mov	sp,fp
 4001900:	df000017 	ldw	fp,0(sp)
 4001904:	dec00104 	addi	sp,sp,4
 4001908:	f800283a 	ret

0400190c <_Z41__static_initialization_and_destruction_0ii>:
 400190c:	defffb04 	addi	sp,sp,-20
 4001910:	dfc00415 	stw	ra,16(sp)
 4001914:	df000315 	stw	fp,12(sp)
 4001918:	df000304 	addi	fp,sp,12
 400191c:	e13ffe15 	stw	r4,-8(fp)
 4001920:	e17fff15 	stw	r5,-4(fp)
 4001924:	e0bffe17 	ldw	r2,-8(fp)
 4001928:	10800058 	cmpnei	r2,r2,1
 400192c:	1000091e 	bne	r2,zero,4001954 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4001930:	e0ffff17 	ldw	r3,-4(fp)
 4001934:	00bfffd4 	movui	r2,65535
 4001938:	1880061e 	bne	r3,r2,4001954 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 400193c:	d8000015 	stw	zero,0(sp)
 4001940:	000f883a 	mov	r7,zero
 4001944:	000d883a 	mov	r6,zero
 4001948:	000b883a 	mov	r5,zero
 400194c:	d112d104 	addi	r4,gp,19268
 4001950:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
 4001954:	0001883a 	nop
 4001958:	e037883a 	mov	sp,fp
 400195c:	dfc00117 	ldw	ra,4(sp)
 4001960:	df000017 	ldw	fp,0(sp)
 4001964:	dec00204 	addi	sp,sp,8
 4001968:	f800283a 	ret

0400196c <_GLOBAL__sub_I__ZN13DiscordClientC2Ev>:
 400196c:	defffe04 	addi	sp,sp,-8
 4001970:	dfc00115 	stw	ra,4(sp)
 4001974:	df000015 	stw	fp,0(sp)
 4001978:	d839883a 	mov	fp,sp
 400197c:	017fffd4 	movui	r5,65535
 4001980:	01000044 	movi	r4,1
 4001984:	400190c0 	call	400190c <_Z41__static_initialization_and_destruction_0ii>
 4001988:	e037883a 	mov	sp,fp
 400198c:	dfc00117 	ldw	ra,4(sp)
 4001990:	df000017 	ldw	fp,0(sp)
 4001994:	dec00204 	addi	sp,sp,8
 4001998:	f800283a 	ret

0400199c <_ZN6ClientC1Ev>:
#ifndef client_h
#define client_h

#include "utility/IPAddress.h"

class Client {
 400199c:	defffe04 	addi	sp,sp,-8
 40019a0:	df000115 	stw	fp,4(sp)
 40019a4:	df000104 	addi	fp,sp,4
 40019a8:	e13fff15 	stw	r4,-4(fp)
 40019ac:	008100b4 	movhi	r2,1026
 40019b0:	10be8f04 	addi	r2,r2,-1476
 40019b4:	e0ffff17 	ldw	r3,-4(fp)
 40019b8:	18800015 	stw	r2,0(r3)
 40019bc:	0001883a 	nop
 40019c0:	e037883a 	mov	sp,fp
 40019c4:	df000017 	ldw	fp,0(sp)
 40019c8:	dec00104 	addi	sp,sp,4
 40019cc:	f800283a 	ret

040019d0 <_ZN14EthernetClientC1Ev>:



class EthernetClient : public Client {
public:
	EthernetClient() : _sockindex(MAX_SOCK_NUM), _timeout(1000) { }
 40019d0:	defffd04 	addi	sp,sp,-12
 40019d4:	dfc00215 	stw	ra,8(sp)
 40019d8:	df000115 	stw	fp,4(sp)
 40019dc:	df000104 	addi	fp,sp,4
 40019e0:	e13fff15 	stw	r4,-4(fp)
 40019e4:	e0bfff17 	ldw	r2,-4(fp)
 40019e8:	1009883a 	mov	r4,r2
 40019ec:	400199c0 	call	400199c <_ZN6ClientC1Ev>
 40019f0:	008100b4 	movhi	r2,1026
 40019f4:	10beb104 	addi	r2,r2,-1340
 40019f8:	e0ffff17 	ldw	r3,-4(fp)
 40019fc:	18800015 	stw	r2,0(r3)
 4001a00:	e0bfff17 	ldw	r2,-4(fp)
 4001a04:	00c00204 	movi	r3,8
 4001a08:	10c00105 	stb	r3,4(r2)
 4001a0c:	e0bfff17 	ldw	r2,-4(fp)
 4001a10:	00c0fa04 	movi	r3,1000
 4001a14:	10c0018d 	sth	r3,6(r2)
 4001a18:	0001883a 	nop
 4001a1c:	e037883a 	mov	sp,fp
 4001a20:	dfc00117 	ldw	ra,4(sp)
 4001a24:	df000017 	ldw	fp,0(sp)
 4001a28:	dec00204 	addi	sp,sp,8
 4001a2c:	f800283a 	ret

04001a30 <_ZN9DhcpClass13beginWithDHCPEPhmm>:
#include "Ethernet.h"
#include "utility/w5100.h"
#include "utility/IPAddress.h"

int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
 4001a30:	defffa04 	addi	sp,sp,-24
 4001a34:	dfc00515 	stw	ra,20(sp)
 4001a38:	df000415 	stw	fp,16(sp)
 4001a3c:	df000404 	addi	fp,sp,16
 4001a40:	e13ffc15 	stw	r4,-16(fp)
 4001a44:	e17ffd15 	stw	r5,-12(fp)
 4001a48:	e1bffe15 	stw	r6,-8(fp)
 4001a4c:	e1ffff15 	stw	r7,-4(fp)
	_dhcpLeaseTime=0;
 4001a50:	e0bffc17 	ldw	r2,-16(fp)
 4001a54:	10000915 	stw	zero,36(r2)
	_dhcpT1=0;
 4001a58:	e0bffc17 	ldw	r2,-16(fp)
 4001a5c:	10000a15 	stw	zero,40(r2)
	_dhcpT2=0;
 4001a60:	e0bffc17 	ldw	r2,-16(fp)
 4001a64:	10000b15 	stw	zero,44(r2)
	_timeout = timeout;
 4001a68:	e0bffc17 	ldw	r2,-16(fp)
 4001a6c:	e0fffe17 	ldw	r3,-8(fp)
 4001a70:	10c00e15 	stw	r3,56(r2)
	_responseTimeout = responseTimeout;
 4001a74:	e0bffc17 	ldw	r2,-16(fp)
 4001a78:	e0ffff17 	ldw	r3,-4(fp)
 4001a7c:	10c00f15 	stw	r3,60(r2)

	// zero out _dhcpMacAddr
	memset(_dhcpMacAddr, 0, 6);
 4001a80:	e0bffc17 	ldw	r2,-16(fp)
 4001a84:	10800204 	addi	r2,r2,8
 4001a88:	01800184 	movi	r6,6
 4001a8c:	000b883a 	mov	r5,zero
 4001a90:	1009883a 	mov	r4,r2
 4001a94:	400c8b00 	call	400c8b0 <memset>
	reset_DHCP_lease();
 4001a98:	e13ffc17 	ldw	r4,-16(fp)
 4001a9c:	4001adc0 	call	4001adc <_ZN9DhcpClass16reset_DHCP_leaseEv>

	memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
 4001aa0:	e0bffc17 	ldw	r2,-16(fp)
 4001aa4:	10800204 	addi	r2,r2,8
 4001aa8:	01800184 	movi	r6,6
 4001aac:	e17ffd17 	ldw	r5,-12(fp)
 4001ab0:	1009883a 	mov	r4,r2
 4001ab4:	400c7680 	call	400c768 <memcpy>
	_dhcp_state = STATE_DHCP_START;
 4001ab8:	e0bffc17 	ldw	r2,-16(fp)
 4001abc:	10001105 	stb	zero,68(r2)
	return request_DHCP_lease();
 4001ac0:	e13ffc17 	ldw	r4,-16(fp)
 4001ac4:	4001b200 	call	4001b20 <_ZN9DhcpClass18request_DHCP_leaseEv>
}
 4001ac8:	e037883a 	mov	sp,fp
 4001acc:	dfc00117 	ldw	ra,4(sp)
 4001ad0:	df000017 	ldw	fp,0(sp)
 4001ad4:	dec00204 	addi	sp,sp,8
 4001ad8:	f800283a 	ret

04001adc <_ZN9DhcpClass16reset_DHCP_leaseEv>:

void DhcpClass::reset_DHCP_lease()
{
 4001adc:	defffd04 	addi	sp,sp,-12
 4001ae0:	dfc00215 	stw	ra,8(sp)
 4001ae4:	df000115 	stw	fp,4(sp)
 4001ae8:	df000104 	addi	fp,sp,4
 4001aec:	e13fff15 	stw	r4,-4(fp)
	// zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
	memset(_dhcpLocalIp, 0, 20);
 4001af0:	e0bfff17 	ldw	r2,-4(fp)
 4001af4:	10800384 	addi	r2,r2,14
 4001af8:	01800504 	movi	r6,20
 4001afc:	000b883a 	mov	r5,zero
 4001b00:	1009883a 	mov	r4,r2
 4001b04:	400c8b00 	call	400c8b0 <memset>
}
 4001b08:	0001883a 	nop
 4001b0c:	e037883a 	mov	sp,fp
 4001b10:	dfc00117 	ldw	ra,4(sp)
 4001b14:	df000017 	ldw	fp,0(sp)
 4001b18:	dec00204 	addi	sp,sp,8
 4001b1c:	f800283a 	ret

04001b20 <_ZN9DhcpClass18request_DHCP_leaseEv>:

	//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease()
{
 4001b20:	defff804 	addi	sp,sp,-32
 4001b24:	dfc00715 	stw	ra,28(sp)
 4001b28:	df000615 	stw	fp,24(sp)
 4001b2c:	df000604 	addi	fp,sp,24
 4001b30:	e13fff15 	stw	r4,-4(fp)
	uint8_t messageType = 0;
 4001b34:	e03ffa05 	stb	zero,-24(fp)

	// Pick an initial transaction ID
	//_dhcpTransactionId = random(1UL, 2000UL);
	_dhcpTransactionId = 1500UL;
 4001b38:	e0bfff17 	ldw	r2,-4(fp)
 4001b3c:	00c17704 	movi	r3,1500
 4001b40:	10c00115 	stw	r3,4(r2)
	_dhcpInitialTransactionId = _dhcpTransactionId;
 4001b44:	e0bfff17 	ldw	r2,-4(fp)
 4001b48:	10c00117 	ldw	r3,4(r2)
 4001b4c:	e0bfff17 	ldw	r2,-4(fp)
 4001b50:	10c00015 	stw	r3,0(r2)

	_dhcpUdpSocket.stop();
 4001b54:	e0bfff17 	ldw	r2,-4(fp)
 4001b58:	10801204 	addi	r2,r2,72
 4001b5c:	1009883a 	mov	r4,r2
 4001b60:	40063300 	call	4006330 <_ZN11EthernetUDP4stopEv>
	if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0) {
 4001b64:	e0bfff17 	ldw	r2,-4(fp)
 4001b68:	10801204 	addi	r2,r2,72
 4001b6c:	01401104 	movi	r5,68
 4001b70:	1009883a 	mov	r4,r2
 4001b74:	400625c0 	call	400625c <_ZN11EthernetUDP5beginEt>
 4001b78:	10803fcc 	andi	r2,r2,255
 4001b7c:	1005003a 	cmpeq	r2,r2,zero
 4001b80:	10803fcc 	andi	r2,r2,255
 4001b84:	10000226 	beq	r2,zero,4001b90 <_ZN9DhcpClass18request_DHCP_leaseEv+0x70>
		// Couldn't get a socket
		return 0;
 4001b88:	0005883a 	mov	r2,zero
 4001b8c:	0000c106 	br	4001e94 <_ZN9DhcpClass18request_DHCP_leaseEv+0x374>
	}

	presend_DHCP();
 4001b90:	e13fff17 	ldw	r4,-4(fp)
 4001b94:	4001ea80 	call	4001ea8 <_ZN9DhcpClass12presend_DHCPEv>

	int result = 0;
 4001b98:	e03ffb15 	stw	zero,-20(fp)

	unsigned long startTime = clock();
 4001b9c:	400be6c0 	call	400be6c <clock>
 4001ba0:	e0bffc15 	stw	r2,-16(fp)

	while (_dhcp_state != STATE_DHCP_LEASED) {
 4001ba4:	e0bfff17 	ldw	r2,-4(fp)
 4001ba8:	10801103 	ldbu	r2,68(r2)
 4001bac:	10803fcc 	andi	r2,r2,255
 4001bb0:	108000e0 	cmpeqi	r2,r2,3
 4001bb4:	1000a91e 	bne	r2,zero,4001e5c <_ZN9DhcpClass18request_DHCP_leaseEv+0x33c>
		if (_dhcp_state == STATE_DHCP_START) {
 4001bb8:	e0bfff17 	ldw	r2,-4(fp)
 4001bbc:	10801103 	ldbu	r2,68(r2)
 4001bc0:	10803fcc 	andi	r2,r2,255
 4001bc4:	1000151e 	bne	r2,zero,4001c1c <_ZN9DhcpClass18request_DHCP_leaseEv+0xfc>
			_dhcpTransactionId++;
 4001bc8:	e0bfff17 	ldw	r2,-4(fp)
 4001bcc:	10800117 	ldw	r2,4(r2)
 4001bd0:	10c00044 	addi	r3,r2,1
 4001bd4:	e0bfff17 	ldw	r2,-4(fp)
 4001bd8:	10c00115 	stw	r3,4(r2)
			send_DHCP_MESSAGE(DHCP_DISCOVER, ((clock() - startTime) / 1000));
 4001bdc:	400be6c0 	call	400be6c <clock>
 4001be0:	1007883a 	mov	r3,r2
 4001be4:	e0bffc17 	ldw	r2,-16(fp)
 4001be8:	1885c83a 	sub	r2,r3,r2
 4001bec:	0140fa04 	movi	r5,1000
 4001bf0:	1009883a 	mov	r4,r2
 4001bf4:	400b8780 	call	400b878 <__udivsi3>
 4001bf8:	10bfffcc 	andi	r2,r2,65535
 4001bfc:	100d883a 	mov	r6,r2
 4001c00:	01400044 	movi	r5,1
 4001c04:	e13fff17 	ldw	r4,-4(fp)
 4001c08:	4001ecc0 	call	4001ecc <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
			_dhcp_state = STATE_DHCP_DISCOVER;
 4001c0c:	e0bfff17 	ldw	r2,-4(fp)
 4001c10:	00c00044 	movi	r3,1
 4001c14:	10c01105 	stb	r3,68(r2)
 4001c18:	00007906 	br	4001e00 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
		} else if (_dhcp_state == STATE_DHCP_REREQUEST) {
 4001c1c:	e0bfff17 	ldw	r2,-4(fp)
 4001c20:	10801103 	ldbu	r2,68(r2)
 4001c24:	10803fcc 	andi	r2,r2,255
 4001c28:	10800118 	cmpnei	r2,r2,4
 4001c2c:	1000151e 	bne	r2,zero,4001c84 <_ZN9DhcpClass18request_DHCP_leaseEv+0x164>
			_dhcpTransactionId++;
 4001c30:	e0bfff17 	ldw	r2,-4(fp)
 4001c34:	10800117 	ldw	r2,4(r2)
 4001c38:	10c00044 	addi	r3,r2,1
 4001c3c:	e0bfff17 	ldw	r2,-4(fp)
 4001c40:	10c00115 	stw	r3,4(r2)
			send_DHCP_MESSAGE(DHCP_REQUEST, ((clock() - startTime)/1000));
 4001c44:	400be6c0 	call	400be6c <clock>
 4001c48:	1007883a 	mov	r3,r2
 4001c4c:	e0bffc17 	ldw	r2,-16(fp)
 4001c50:	1885c83a 	sub	r2,r3,r2
 4001c54:	0140fa04 	movi	r5,1000
 4001c58:	1009883a 	mov	r4,r2
 4001c5c:	400b8780 	call	400b878 <__udivsi3>
 4001c60:	10bfffcc 	andi	r2,r2,65535
 4001c64:	100d883a 	mov	r6,r2
 4001c68:	014000c4 	movi	r5,3
 4001c6c:	e13fff17 	ldw	r4,-4(fp)
 4001c70:	4001ecc0 	call	4001ecc <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
			_dhcp_state = STATE_DHCP_REQUEST;
 4001c74:	e0bfff17 	ldw	r2,-4(fp)
 4001c78:	00c00084 	movi	r3,2
 4001c7c:	10c01105 	stb	r3,68(r2)
 4001c80:	00005f06 	br	4001e00 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
		} else if (_dhcp_state == STATE_DHCP_DISCOVER) {
 4001c84:	e0bfff17 	ldw	r2,-4(fp)
 4001c88:	10801103 	ldbu	r2,68(r2)
 4001c8c:	10803fcc 	andi	r2,r2,255
 4001c90:	10800058 	cmpnei	r2,r2,1
 4001c94:	10001e1e 	bne	r2,zero,4001d10 <_ZN9DhcpClass18request_DHCP_leaseEv+0x1f0>
			uint32_t respId;
			messageType = parseDHCPResponse(_responseTimeout, respId);
 4001c98:	e0bfff17 	ldw	r2,-4(fp)
 4001c9c:	10800f17 	ldw	r2,60(r2)
 4001ca0:	e0fffd04 	addi	r3,fp,-12
 4001ca4:	180d883a 	mov	r6,r3
 4001ca8:	100b883a 	mov	r5,r2
 4001cac:	e13fff17 	ldw	r4,-4(fp)
 4001cb0:	400231c0 	call	400231c <_ZN9DhcpClass17parseDHCPResponseEmRm>
 4001cb4:	e0bffa05 	stb	r2,-24(fp)
			if (messageType == DHCP_OFFER) {
 4001cb8:	e0bffa03 	ldbu	r2,-24(fp)
 4001cbc:	10800098 	cmpnei	r2,r2,2
 4001cc0:	10004f1e 	bne	r2,zero,4001e00 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
				// We'll use the transaction ID that the offer came with,
				// rather than the one we were up to
				_dhcpTransactionId = respId;
 4001cc4:	e0fffd17 	ldw	r3,-12(fp)
 4001cc8:	e0bfff17 	ldw	r2,-4(fp)
 4001ccc:	10c00115 	stw	r3,4(r2)
				send_DHCP_MESSAGE(DHCP_REQUEST, ((clock() - startTime) / 1000));
 4001cd0:	400be6c0 	call	400be6c <clock>
 4001cd4:	1007883a 	mov	r3,r2
 4001cd8:	e0bffc17 	ldw	r2,-16(fp)
 4001cdc:	1885c83a 	sub	r2,r3,r2
 4001ce0:	0140fa04 	movi	r5,1000
 4001ce4:	1009883a 	mov	r4,r2
 4001ce8:	400b8780 	call	400b878 <__udivsi3>
 4001cec:	10bfffcc 	andi	r2,r2,65535
 4001cf0:	100d883a 	mov	r6,r2
 4001cf4:	014000c4 	movi	r5,3
 4001cf8:	e13fff17 	ldw	r4,-4(fp)
 4001cfc:	4001ecc0 	call	4001ecc <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
				_dhcp_state = STATE_DHCP_REQUEST;
 4001d00:	e0bfff17 	ldw	r2,-4(fp)
 4001d04:	00c00084 	movi	r3,2
 4001d08:	10c01105 	stb	r3,68(r2)
 4001d0c:	00003c06 	br	4001e00 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			}
		} else if (_dhcp_state == STATE_DHCP_REQUEST) {
 4001d10:	e0bfff17 	ldw	r2,-4(fp)
 4001d14:	10801103 	ldbu	r2,68(r2)
 4001d18:	10803fcc 	andi	r2,r2,255
 4001d1c:	10800098 	cmpnei	r2,r2,2
 4001d20:	1000371e 	bne	r2,zero,4001e00 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			uint32_t respId;
			messageType = parseDHCPResponse(_responseTimeout, respId);
 4001d24:	e0bfff17 	ldw	r2,-4(fp)
 4001d28:	10800f17 	ldw	r2,60(r2)
 4001d2c:	e0fffe04 	addi	r3,fp,-8
 4001d30:	180d883a 	mov	r6,r3
 4001d34:	100b883a 	mov	r5,r2
 4001d38:	e13fff17 	ldw	r4,-4(fp)
 4001d3c:	400231c0 	call	400231c <_ZN9DhcpClass17parseDHCPResponseEmRm>
 4001d40:	e0bffa05 	stb	r2,-24(fp)
			if (messageType == DHCP_ACK) {
 4001d44:	e0bffa03 	ldbu	r2,-24(fp)
 4001d48:	10800158 	cmpnei	r2,r2,5
 4001d4c:	1000271e 	bne	r2,zero,4001dec <_ZN9DhcpClass18request_DHCP_leaseEv+0x2cc>
				_dhcp_state = STATE_DHCP_LEASED;
 4001d50:	e0bfff17 	ldw	r2,-4(fp)
 4001d54:	00c000c4 	movi	r3,3
 4001d58:	10c01105 	stb	r3,68(r2)
				result = 1;
 4001d5c:	00800044 	movi	r2,1
 4001d60:	e0bffb15 	stw	r2,-20(fp)
				//use default lease time if we didn't get it
				if (_dhcpLeaseTime == 0) {
 4001d64:	e0bfff17 	ldw	r2,-4(fp)
 4001d68:	10800917 	ldw	r2,36(r2)
 4001d6c:	1000031e 	bne	r2,zero,4001d7c <_ZN9DhcpClass18request_DHCP_leaseEv+0x25c>
					_dhcpLeaseTime = DEFAULT_LEASE;
 4001d70:	e0bfff17 	ldw	r2,-4(fp)
 4001d74:	00c0e104 	movi	r3,900
 4001d78:	10c00915 	stw	r3,36(r2)
				}
				// Calculate T1 & T2 if we didn't get it
				if (_dhcpT1 == 0) {
 4001d7c:	e0bfff17 	ldw	r2,-4(fp)
 4001d80:	10800a17 	ldw	r2,40(r2)
 4001d84:	1000051e 	bne	r2,zero,4001d9c <_ZN9DhcpClass18request_DHCP_leaseEv+0x27c>
					// T1 should be 50% of _dhcpLeaseTime
					_dhcpT1 = _dhcpLeaseTime >> 1;
 4001d88:	e0bfff17 	ldw	r2,-4(fp)
 4001d8c:	10800917 	ldw	r2,36(r2)
 4001d90:	1006d07a 	srli	r3,r2,1
 4001d94:	e0bfff17 	ldw	r2,-4(fp)
 4001d98:	10c00a15 	stw	r3,40(r2)
				}
				if (_dhcpT2 == 0) {
 4001d9c:	e0bfff17 	ldw	r2,-4(fp)
 4001da0:	10800b17 	ldw	r2,44(r2)
 4001da4:	1000081e 	bne	r2,zero,4001dc8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2a8>
					// T2 should be 87.5% (7/8ths) of _dhcpLeaseTime
					_dhcpT2 = _dhcpLeaseTime - (_dhcpLeaseTime >> 3);
 4001da8:	e0bfff17 	ldw	r2,-4(fp)
 4001dac:	10c00917 	ldw	r3,36(r2)
 4001db0:	e0bfff17 	ldw	r2,-4(fp)
 4001db4:	10800917 	ldw	r2,36(r2)
 4001db8:	1004d0fa 	srli	r2,r2,3
 4001dbc:	1887c83a 	sub	r3,r3,r2
 4001dc0:	e0bfff17 	ldw	r2,-4(fp)
 4001dc4:	10c00b15 	stw	r3,44(r2)
				}
				_renewInSec = _dhcpT1;
 4001dc8:	e0bfff17 	ldw	r2,-4(fp)
 4001dcc:	10c00a17 	ldw	r3,40(r2)
 4001dd0:	e0bfff17 	ldw	r2,-4(fp)
 4001dd4:	10c00c15 	stw	r3,48(r2)
				_rebindInSec = _dhcpT2;
 4001dd8:	e0bfff17 	ldw	r2,-4(fp)
 4001ddc:	10c00b17 	ldw	r3,44(r2)
 4001de0:	e0bfff17 	ldw	r2,-4(fp)
 4001de4:	10c00d15 	stw	r3,52(r2)
 4001de8:	00000506 	br	4001e00 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			} else if (messageType == DHCP_NAK) {
 4001dec:	e0bffa03 	ldbu	r2,-24(fp)
 4001df0:	10800198 	cmpnei	r2,r2,6
 4001df4:	1000021e 	bne	r2,zero,4001e00 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
				_dhcp_state = STATE_DHCP_START;
 4001df8:	e0bfff17 	ldw	r2,-4(fp)
 4001dfc:	10001105 	stb	zero,68(r2)
			}
		}

		if (messageType == 255) {
 4001e00:	e0bffa03 	ldbu	r2,-24(fp)
 4001e04:	10803fd8 	cmpnei	r2,r2,255
 4001e08:	1000031e 	bne	r2,zero,4001e18 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f8>
			messageType = 0;
 4001e0c:	e03ffa05 	stb	zero,-24(fp)
			_dhcp_state = STATE_DHCP_START;
 4001e10:	e0bfff17 	ldw	r2,-4(fp)
 4001e14:	10001105 	stb	zero,68(r2)
		}

		if (result != 1 && ((clock() - startTime) > _timeout))
 4001e18:	e0bffb17 	ldw	r2,-20(fp)
 4001e1c:	10800060 	cmpeqi	r2,r2,1
 4001e20:	1000091e 	bne	r2,zero,4001e48 <_ZN9DhcpClass18request_DHCP_leaseEv+0x328>
 4001e24:	400be6c0 	call	400be6c <clock>
 4001e28:	1007883a 	mov	r3,r2
 4001e2c:	e0bffc17 	ldw	r2,-16(fp)
 4001e30:	1885c83a 	sub	r2,r3,r2
 4001e34:	e0ffff17 	ldw	r3,-4(fp)
 4001e38:	18c00e17 	ldw	r3,56(r3)
 4001e3c:	1880022e 	bgeu	r3,r2,4001e48 <_ZN9DhcpClass18request_DHCP_leaseEv+0x328>
 4001e40:	00800044 	movi	r2,1
 4001e44:	00000106 	br	4001e4c <_ZN9DhcpClass18request_DHCP_leaseEv+0x32c>
 4001e48:	0005883a 	mov	r2,zero
 4001e4c:	10803fcc 	andi	r2,r2,255
 4001e50:	1000011e 	bne	r2,zero,4001e58 <_ZN9DhcpClass18request_DHCP_leaseEv+0x338>

	int result = 0;

	unsigned long startTime = clock();

	while (_dhcp_state != STATE_DHCP_LEASED) {
 4001e54:	003f5306 	br	4001ba4 <__alt_data_end+0xfc001ba4>
			messageType = 0;
			_dhcp_state = STATE_DHCP_START;
		}

		if (result != 1 && ((clock() - startTime) > _timeout))
			break;
 4001e58:	0001883a 	nop
	}

	// We're done with the socket now
	_dhcpUdpSocket.stop();
 4001e5c:	e0bfff17 	ldw	r2,-4(fp)
 4001e60:	10801204 	addi	r2,r2,72
 4001e64:	1009883a 	mov	r4,r2
 4001e68:	40063300 	call	4006330 <_ZN11EthernetUDP4stopEv>
	_dhcpTransactionId++;
 4001e6c:	e0bfff17 	ldw	r2,-4(fp)
 4001e70:	10800117 	ldw	r2,4(r2)
 4001e74:	10c00044 	addi	r3,r2,1
 4001e78:	e0bfff17 	ldw	r2,-4(fp)
 4001e7c:	10c00115 	stw	r3,4(r2)

	_lastCheckLeaseMillis = clock();
 4001e80:	400be6c0 	call	400be6c <clock>
 4001e84:	1007883a 	mov	r3,r2
 4001e88:	e0bfff17 	ldw	r2,-4(fp)
 4001e8c:	10c01015 	stw	r3,64(r2)
	return result;
 4001e90:	e0bffb17 	ldw	r2,-20(fp)
}
 4001e94:	e037883a 	mov	sp,fp
 4001e98:	dfc00117 	ldw	ra,4(sp)
 4001e9c:	df000017 	ldw	fp,0(sp)
 4001ea0:	dec00204 	addi	sp,sp,8
 4001ea4:	f800283a 	ret

04001ea8 <_ZN9DhcpClass12presend_DHCPEv>:

void DhcpClass::presend_DHCP()
{
 4001ea8:	defffe04 	addi	sp,sp,-8
 4001eac:	df000115 	stw	fp,4(sp)
 4001eb0:	df000104 	addi	fp,sp,4
 4001eb4:	e13fff15 	stw	r4,-4(fp)
}
 4001eb8:	0001883a 	nop
 4001ebc:	e037883a 	mov	sp,fp
 4001ec0:	df000017 	ldw	fp,0(sp)
 4001ec4:	dec00104 	addi	sp,sp,4
 4001ec8:	f800283a 	ret

04001ecc <_ZN9DhcpClass17send_DHCP_MESSAGEEht>:

void DhcpClass::send_DHCP_MESSAGE(uint8_t messageType, uint16_t secondsElapsed)
{
 4001ecc:	deffee04 	addi	sp,sp,-72
 4001ed0:	dfc01115 	stw	ra,68(sp)
 4001ed4:	df001015 	stw	fp,64(sp)
 4001ed8:	df001004 	addi	fp,sp,64
 4001edc:	e13ffd15 	stw	r4,-12(fp)
 4001ee0:	2807883a 	mov	r3,r5
 4001ee4:	3005883a 	mov	r2,r6
 4001ee8:	e0fffe05 	stb	r3,-8(fp)
 4001eec:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t buffer[32];
	memset(buffer, 0, 32);
 4001ef0:	e0bff204 	addi	r2,fp,-56
 4001ef4:	01800804 	movi	r6,32
 4001ef8:	000b883a 	mov	r5,zero
 4001efc:	1009883a 	mov	r4,r2
 4001f00:	400c8b00 	call	400c8b0 <memset>
	IPAddress dest_addr(255, 255, 255, 255); // Broadcast address
 4001f04:	e0fffa04 	addi	r3,fp,-24
 4001f08:	00803fc4 	movi	r2,255
 4001f0c:	d8800015 	stw	r2,0(sp)
 4001f10:	01c03fc4 	movi	r7,255
 4001f14:	01803fc4 	movi	r6,255
 4001f18:	01403fc4 	movi	r5,255
 4001f1c:	1809883a 	mov	r4,r3
 4001f20:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>

	if (_dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT) == -1) {
 4001f24:	e0bffd17 	ldw	r2,-12(fp)
 4001f28:	10801204 	addi	r2,r2,72
 4001f2c:	018010c4 	movi	r6,67
 4001f30:	e17ffa17 	ldw	r5,-24(fp)
 4001f34:	1009883a 	mov	r4,r2
 4001f38:	40064540 	call	4006454 <_ZN11EthernetUDP11beginPacketE9IPAddresst>
 4001f3c:	10bfffe0 	cmpeqi	r2,r2,-1
 4001f40:	10803fcc 	andi	r2,r2,255
 4001f44:	1000ef1e 	bne	r2,zero,4002304 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x438>
		//Serial.printf("DHCP transmit error\n");
		// FIXME Need to return errors
		return;
	}

	buffer[0] = DHCP_BOOTREQUEST;   // op
 4001f48:	00800044 	movi	r2,1
 4001f4c:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = DHCP_HTYPE10MB;     // htype
 4001f50:	00800044 	movi	r2,1
 4001f54:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = DHCP_HLENETHERNET;  // hlen
 4001f58:	00800184 	movi	r2,6
 4001f5c:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = DHCP_HOPS;          // hops
 4001f60:	e03ff2c5 	stb	zero,-53(fp)

	// xid
	unsigned long xid = htonl(_dhcpTransactionId);
 4001f64:	e0bffd17 	ldw	r2,-12(fp)
 4001f68:	10800117 	ldw	r2,4(r2)
 4001f6c:	1006963a 	slli	r3,r2,24
 4001f70:	e0bffd17 	ldw	r2,-12(fp)
 4001f74:	10800117 	ldw	r2,4(r2)
 4001f78:	1004923a 	slli	r2,r2,8
 4001f7c:	10803fec 	andhi	r2,r2,255
 4001f80:	1886b03a 	or	r3,r3,r2
 4001f84:	e0bffd17 	ldw	r2,-12(fp)
 4001f88:	10800117 	ldw	r2,4(r2)
 4001f8c:	1004d23a 	srli	r2,r2,8
 4001f90:	10bfc00c 	andi	r2,r2,65280
 4001f94:	1886b03a 	or	r3,r3,r2
 4001f98:	e0bffd17 	ldw	r2,-12(fp)
 4001f9c:	10800117 	ldw	r2,4(r2)
 4001fa0:	1004d63a 	srli	r2,r2,24
 4001fa4:	1884b03a 	or	r2,r3,r2
 4001fa8:	e0bffb15 	stw	r2,-20(fp)
	memcpy(buffer + 4, &(xid), 4);
 4001fac:	e0bff204 	addi	r2,fp,-56
 4001fb0:	10800104 	addi	r2,r2,4
 4001fb4:	e0fffb04 	addi	r3,fp,-20
 4001fb8:	01800104 	movi	r6,4
 4001fbc:	180b883a 	mov	r5,r3
 4001fc0:	1009883a 	mov	r4,r2
 4001fc4:	400c7680 	call	400c768 <memcpy>

	// 8, 9 - seconds elapsed
	buffer[8] = ((secondsElapsed & 0xff00) >> 8);
 4001fc8:	e0bfff0b 	ldhu	r2,-4(fp)
 4001fcc:	1004d23a 	srli	r2,r2,8
 4001fd0:	e0bff405 	stb	r2,-48(fp)
	buffer[9] = (secondsElapsed & 0x00ff);
 4001fd4:	e0bfff0b 	ldhu	r2,-4(fp)
 4001fd8:	e0bff445 	stb	r2,-47(fp)

	// flags
	unsigned short flags = htons(DHCP_FLAGSBROADCAST);
 4001fdc:	00802004 	movi	r2,128
 4001fe0:	e0bffc0d 	sth	r2,-16(fp)
	memcpy(buffer + 10, &(flags), 2);
 4001fe4:	e0bff204 	addi	r2,fp,-56
 4001fe8:	10800284 	addi	r2,r2,10
 4001fec:	e0fffc04 	addi	r3,fp,-16
 4001ff0:	01800084 	movi	r6,2
 4001ff4:	180b883a 	mov	r5,r3
 4001ff8:	1009883a 	mov	r4,r2
 4001ffc:	400c7680 	call	400c768 <memcpy>
	// yiaddr: already zeroed
	// siaddr: already zeroed
	// giaddr: already zeroed

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 28);
 4002000:	e0bffd17 	ldw	r2,-12(fp)
 4002004:	10801204 	addi	r2,r2,72
 4002008:	e0fff204 	addi	r3,fp,-56
 400200c:	01800704 	movi	r6,28
 4002010:	180b883a 	mov	r5,r3
 4002014:	1009883a 	mov	r4,r2
 4002018:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>

	memset(buffer, 0, 32); // clear local buffer
 400201c:	e0bff204 	addi	r2,fp,-56
 4002020:	01800804 	movi	r6,32
 4002024:	000b883a 	mov	r5,zero
 4002028:	1009883a 	mov	r4,r2
 400202c:	400c8b00 	call	400c8b0 <memset>

	memcpy(buffer, _dhcpMacAddr, 6); // chaddr
 4002030:	e0bffd17 	ldw	r2,-12(fp)
 4002034:	10c00204 	addi	r3,r2,8
 4002038:	e0bff204 	addi	r2,fp,-56
 400203c:	01800184 	movi	r6,6
 4002040:	180b883a 	mov	r5,r3
 4002044:	1009883a 	mov	r4,r2
 4002048:	400c7680 	call	400c768 <memcpy>

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 16);
 400204c:	e0bffd17 	ldw	r2,-12(fp)
 4002050:	10801204 	addi	r2,r2,72
 4002054:	e0fff204 	addi	r3,fp,-56
 4002058:	01800404 	movi	r6,16
 400205c:	180b883a 	mov	r5,r3
 4002060:	1009883a 	mov	r4,r2
 4002064:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>

	memset(buffer, 0, 32); // clear local buffer
 4002068:	e0bff204 	addi	r2,fp,-56
 400206c:	01800804 	movi	r6,32
 4002070:	000b883a 	mov	r5,zero
 4002074:	1009883a 	mov	r4,r2
 4002078:	400c8b00 	call	400c8b0 <memset>

	// leave zeroed out for sname && file
	// put in W5100 transmit buffer x 6 (192 bytes)

	for(int i = 0; i < 6; i++) {
 400207c:	e03ff115 	stw	zero,-60(fp)
 4002080:	e0bff117 	ldw	r2,-60(fp)
 4002084:	10800188 	cmpgei	r2,r2,6
 4002088:	10000b1e 	bne	r2,zero,40020b8 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x1ec>
		_dhcpUdpSocket.write(buffer, 32);
 400208c:	e0bffd17 	ldw	r2,-12(fp)
 4002090:	10801204 	addi	r2,r2,72
 4002094:	e0fff204 	addi	r3,fp,-56
 4002098:	01800804 	movi	r6,32
 400209c:	180b883a 	mov	r5,r3
 40020a0:	1009883a 	mov	r4,r2
 40020a4:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>
	memset(buffer, 0, 32); // clear local buffer

	// leave zeroed out for sname && file
	// put in W5100 transmit buffer x 6 (192 bytes)

	for(int i = 0; i < 6; i++) {
 40020a8:	e0bff117 	ldw	r2,-60(fp)
 40020ac:	10800044 	addi	r2,r2,1
 40020b0:	e0bff115 	stw	r2,-60(fp)
 40020b4:	003ff206 	br	4002080 <__alt_data_end+0xfc002080>
		_dhcpUdpSocket.write(buffer, 32);
	}

	// OPT - Magic Cookie
	buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
 40020b8:	008018c4 	movi	r2,99
 40020bc:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = (uint8_t)((MAGIC_COOKIE >> 16)& 0xFF);
 40020c0:	00bfe084 	movi	r2,-126
 40020c4:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = (uint8_t)((MAGIC_COOKIE >> 8)& 0xFF);
 40020c8:	008014c4 	movi	r2,83
 40020cc:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = (uint8_t)(MAGIC_COOKIE& 0xFF);
 40020d0:	008018c4 	movi	r2,99
 40020d4:	e0bff2c5 	stb	r2,-53(fp)

	// OPT - message type
	buffer[4] = dhcpMessageType;
 40020d8:	00800d44 	movi	r2,53
 40020dc:	e0bff305 	stb	r2,-52(fp)
	buffer[5] = 0x01;
 40020e0:	00800044 	movi	r2,1
 40020e4:	e0bff345 	stb	r2,-51(fp)
	buffer[6] = messageType; //DHCP_REQUEST;
 40020e8:	e0bffe03 	ldbu	r2,-8(fp)
 40020ec:	e0bff385 	stb	r2,-50(fp)

	// OPT - client identifier
	buffer[7] = dhcpClientIdentifier;
 40020f0:	00800f44 	movi	r2,61
 40020f4:	e0bff3c5 	stb	r2,-49(fp)
	buffer[8] = 0x07;
 40020f8:	008001c4 	movi	r2,7
 40020fc:	e0bff405 	stb	r2,-48(fp)
	buffer[9] = 0x01;
 4002100:	00800044 	movi	r2,1
 4002104:	e0bff445 	stb	r2,-47(fp)
	memcpy(buffer + 10, _dhcpMacAddr, 6);
 4002108:	e0bff204 	addi	r2,fp,-56
 400210c:	10800284 	addi	r2,r2,10
 4002110:	e0fffd17 	ldw	r3,-12(fp)
 4002114:	18c00204 	addi	r3,r3,8
 4002118:	01800184 	movi	r6,6
 400211c:	180b883a 	mov	r5,r3
 4002120:	1009883a 	mov	r4,r2
 4002124:	400c7680 	call	400c768 <memcpy>

	// OPT - host name
	buffer[16] = hostName;
 4002128:	00800304 	movi	r2,12
 400212c:	e0bff605 	stb	r2,-40(fp)
	buffer[17] = strlen(HOST_NAME) + 6; // length of hostname + last 3 bytes of mac address
 4002130:	00800304 	movi	r2,12
 4002134:	e0bff645 	stb	r2,-39(fp)
	strcpy((char*)&(buffer[18]), HOST_NAME);
 4002138:	e0bff204 	addi	r2,fp,-56
 400213c:	10800484 	addi	r2,r2,18
 4002140:	00d255c4 	movi	r3,18775
 4002144:	10c0000d 	sth	r3,0(r2)
 4002148:	00db9684 	movi	r3,28250
 400214c:	10c0008d 	sth	r3,2(r2)
 4002150:	00dd1944 	movi	r3,29797
 4002154:	10c0010d 	sth	r3,4(r2)
 4002158:	10000185 	stb	zero,6(r2)

	printByte((char*)&(buffer[24]), _dhcpMacAddr[3]);
 400215c:	e0bffd17 	ldw	r2,-12(fp)
 4002160:	108002c3 	ldbu	r2,11(r2)
 4002164:	10c03fcc 	andi	r3,r2,255
 4002168:	e0bff204 	addi	r2,fp,-56
 400216c:	10800604 	addi	r2,r2,24
 4002170:	180d883a 	mov	r6,r3
 4002174:	100b883a 	mov	r5,r2
 4002178:	e13ffd17 	ldw	r4,-12(fp)
 400217c:	4002db00 	call	4002db0 <_ZN9DhcpClass9printByteEPch>
	printByte((char*)&(buffer[26]), _dhcpMacAddr[4]);
 4002180:	e0bffd17 	ldw	r2,-12(fp)
 4002184:	10800303 	ldbu	r2,12(r2)
 4002188:	10c03fcc 	andi	r3,r2,255
 400218c:	e0bff204 	addi	r2,fp,-56
 4002190:	10800684 	addi	r2,r2,26
 4002194:	180d883a 	mov	r6,r3
 4002198:	100b883a 	mov	r5,r2
 400219c:	e13ffd17 	ldw	r4,-12(fp)
 40021a0:	4002db00 	call	4002db0 <_ZN9DhcpClass9printByteEPch>
	printByte((char*)&(buffer[28]), _dhcpMacAddr[5]);
 40021a4:	e0bffd17 	ldw	r2,-12(fp)
 40021a8:	10800343 	ldbu	r2,13(r2)
 40021ac:	10c03fcc 	andi	r3,r2,255
 40021b0:	e0bff204 	addi	r2,fp,-56
 40021b4:	10800704 	addi	r2,r2,28
 40021b8:	180d883a 	mov	r6,r3
 40021bc:	100b883a 	mov	r5,r2
 40021c0:	e13ffd17 	ldw	r4,-12(fp)
 40021c4:	4002db00 	call	4002db0 <_ZN9DhcpClass9printByteEPch>

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 30);
 40021c8:	e0bffd17 	ldw	r2,-12(fp)
 40021cc:	10801204 	addi	r2,r2,72
 40021d0:	e0fff204 	addi	r3,fp,-56
 40021d4:	01800784 	movi	r6,30
 40021d8:	180b883a 	mov	r5,r3
 40021dc:	1009883a 	mov	r4,r2
 40021e0:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>

	if (messageType == DHCP_REQUEST) {
 40021e4:	e0bffe03 	ldbu	r2,-8(fp)
 40021e8:	108000d8 	cmpnei	r2,r2,3
 40021ec:	1000271e 	bne	r2,zero,400228c <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x3c0>
		buffer[0] = dhcpRequestedIPaddr;
 40021f0:	00800c84 	movi	r2,50
 40021f4:	e0bff205 	stb	r2,-56(fp)
		buffer[1] = 0x04;
 40021f8:	00800104 	movi	r2,4
 40021fc:	e0bff245 	stb	r2,-55(fp)
		buffer[2] = _dhcpLocalIp[0];
 4002200:	e0bffd17 	ldw	r2,-12(fp)
 4002204:	10800383 	ldbu	r2,14(r2)
 4002208:	e0bff285 	stb	r2,-54(fp)
		buffer[3] = _dhcpLocalIp[1];
 400220c:	e0bffd17 	ldw	r2,-12(fp)
 4002210:	108003c3 	ldbu	r2,15(r2)
 4002214:	e0bff2c5 	stb	r2,-53(fp)
		buffer[4] = _dhcpLocalIp[2];
 4002218:	e0bffd17 	ldw	r2,-12(fp)
 400221c:	10800403 	ldbu	r2,16(r2)
 4002220:	e0bff305 	stb	r2,-52(fp)
		buffer[5] = _dhcpLocalIp[3];
 4002224:	e0bffd17 	ldw	r2,-12(fp)
 4002228:	10800443 	ldbu	r2,17(r2)
 400222c:	e0bff345 	stb	r2,-51(fp)

		buffer[6] = dhcpServerIdentifier;
 4002230:	00800d84 	movi	r2,54
 4002234:	e0bff385 	stb	r2,-50(fp)
		buffer[7] = 0x04;
 4002238:	00800104 	movi	r2,4
 400223c:	e0bff3c5 	stb	r2,-49(fp)
		buffer[8] = _dhcpDhcpServerIp[0];
 4002240:	e0bffd17 	ldw	r2,-12(fp)
 4002244:	10800683 	ldbu	r2,26(r2)
 4002248:	e0bff405 	stb	r2,-48(fp)
		buffer[9] = _dhcpDhcpServerIp[1];
 400224c:	e0bffd17 	ldw	r2,-12(fp)
 4002250:	108006c3 	ldbu	r2,27(r2)
 4002254:	e0bff445 	stb	r2,-47(fp)
		buffer[10] = _dhcpDhcpServerIp[2];
 4002258:	e0bffd17 	ldw	r2,-12(fp)
 400225c:	10800703 	ldbu	r2,28(r2)
 4002260:	e0bff485 	stb	r2,-46(fp)
		buffer[11] = _dhcpDhcpServerIp[3];
 4002264:	e0bffd17 	ldw	r2,-12(fp)
 4002268:	10800743 	ldbu	r2,29(r2)
 400226c:	e0bff4c5 	stb	r2,-45(fp)

		//put data in W5100 transmit buffer
		_dhcpUdpSocket.write(buffer, 12);
 4002270:	e0bffd17 	ldw	r2,-12(fp)
 4002274:	10801204 	addi	r2,r2,72
 4002278:	e0fff204 	addi	r3,fp,-56
 400227c:	01800304 	movi	r6,12
 4002280:	180b883a 	mov	r5,r3
 4002284:	1009883a 	mov	r4,r2
 4002288:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>
	}

	buffer[0] = dhcpParamRequest;
 400228c:	00800dc4 	movi	r2,55
 4002290:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = 0x06;
 4002294:	00800184 	movi	r2,6
 4002298:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = subnetMask;
 400229c:	00800044 	movi	r2,1
 40022a0:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = routersOnSubnet;
 40022a4:	008000c4 	movi	r2,3
 40022a8:	e0bff2c5 	stb	r2,-53(fp)
	buffer[4] = dns;
 40022ac:	00800184 	movi	r2,6
 40022b0:	e0bff305 	stb	r2,-52(fp)
	buffer[5] = domainName;
 40022b4:	008003c4 	movi	r2,15
 40022b8:	e0bff345 	stb	r2,-51(fp)
	buffer[6] = dhcpT1value;
 40022bc:	00800e84 	movi	r2,58
 40022c0:	e0bff385 	stb	r2,-50(fp)
	buffer[7] = dhcpT2value;
 40022c4:	00800ec4 	movi	r2,59
 40022c8:	e0bff3c5 	stb	r2,-49(fp)
	buffer[8] = endOption;
 40022cc:	00bfffc4 	movi	r2,-1
 40022d0:	e0bff405 	stb	r2,-48(fp)

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 9);
 40022d4:	e0bffd17 	ldw	r2,-12(fp)
 40022d8:	10801204 	addi	r2,r2,72
 40022dc:	e0fff204 	addi	r3,fp,-56
 40022e0:	01800244 	movi	r6,9
 40022e4:	180b883a 	mov	r5,r3
 40022e8:	1009883a 	mov	r4,r2
 40022ec:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>

	_dhcpUdpSocket.endPacket();
 40022f0:	e0bffd17 	ldw	r2,-12(fp)
 40022f4:	10801204 	addi	r2,r2,72
 40022f8:	1009883a 	mov	r4,r2
 40022fc:	40064d40 	call	40064d4 <_ZN11EthernetUDP9endPacketEv>
 4002300:	00000106 	br	4002308 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x43c>
	IPAddress dest_addr(255, 255, 255, 255); // Broadcast address

	if (_dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT) == -1) {
		//Serial.printf("DHCP transmit error\n");
		// FIXME Need to return errors
		return;
 4002304:	0001883a 	nop

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 9);

	_dhcpUdpSocket.endPacket();
}
 4002308:	e037883a 	mov	sp,fp
 400230c:	dfc00117 	ldw	ra,4(sp)
 4002310:	df000017 	ldw	fp,0(sp)
 4002314:	dec00204 	addi	sp,sp,8
 4002318:	f800283a 	ret

0400231c <_ZN9DhcpClass17parseDHCPResponseEmRm>:

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
 400231c:	deffd604 	addi	sp,sp,-168
 4002320:	dfc02915 	stw	ra,164(sp)
 4002324:	df002815 	stw	fp,160(sp)
 4002328:	ddc02715 	stw	r23,156(sp)
 400232c:	dd802615 	stw	r22,152(sp)
 4002330:	dd402515 	stw	r21,148(sp)
 4002334:	dd002415 	stw	r20,144(sp)
 4002338:	dcc02315 	stw	r19,140(sp)
 400233c:	dc802215 	stw	r18,136(sp)
 4002340:	dc402115 	stw	r17,132(sp)
 4002344:	dc002015 	stw	r16,128(sp)
 4002348:	df002804 	addi	fp,sp,160
 400234c:	e13fe715 	stw	r4,-100(fp)
 4002350:	e17fe815 	stw	r5,-96(fp)
 4002354:	e1bfe915 	stw	r6,-92(fp)
 4002358:	00810074 	movhi	r2,1025
 400235c:	10a8e804 	addi	r2,r2,-23648
 4002360:	e0bff015 	stw	r2,-64(fp)
 4002364:	008100b4 	movhi	r2,1026
 4002368:	10bbc004 	addi	r2,r2,-4352
 400236c:	e0bff115 	stw	r2,-60(fp)
 4002370:	e0bff204 	addi	r2,fp,-56
 4002374:	e0ffd804 	addi	r3,fp,-160
 4002378:	10c00015 	stw	r3,0(r2)
 400237c:	00c10034 	movhi	r3,1024
 4002380:	18caa004 	addi	r3,r3,10880
 4002384:	10c00115 	stw	r3,4(r2)
 4002388:	16c00215 	stw	sp,8(r2)
 400238c:	e0bfea04 	addi	r2,fp,-88
 4002390:	1009883a 	mov	r4,r2
 4002394:	400bb3c0 	call	400bb3c <_Unwind_SjLj_Register>
	uint8_t type = 0;
 4002398:	e03fd805 	stb	zero,-160(fp)
	uint8_t opt_len = 0;
 400239c:	e03fd845 	stb	zero,-159(fp)

	unsigned long startTime = clock();
 40023a0:	400be6c0 	call	400be6c <clock>
 40023a4:	e0bfd915 	stw	r2,-156(fp)

	while (_dhcpUdpSocket.parsePacket() <= 0) {
 40023a8:	e0bfe717 	ldw	r2,-100(fp)
 40023ac:	10c01204 	addi	r3,r2,72
 40023b0:	00bfffc4 	movi	r2,-1
 40023b4:	e0bfeb15 	stw	r2,-84(fp)
 40023b8:	1809883a 	mov	r4,r3
 40023bc:	40065c80 	call	40065c8 <_ZN11EthernetUDP11parsePacketEv>
 40023c0:	0084403a 	cmpge	r2,zero,r2
 40023c4:	10803fcc 	andi	r2,r2,255
 40023c8:	10000f26 	beq	r2,zero,4002408 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xec>
		if ((clock() - startTime) > responseTimeout) {
 40023cc:	400be6c0 	call	400be6c <clock>
 40023d0:	1007883a 	mov	r3,r2
 40023d4:	e0bfd917 	ldw	r2,-156(fp)
 40023d8:	1885c83a 	sub	r2,r3,r2
 40023dc:	e0ffe817 	ldw	r3,-96(fp)
 40023e0:	1885803a 	cmpltu	r2,r3,r2
 40023e4:	10803fcc 	andi	r2,r2,255
 40023e8:	10000226 	beq	r2,zero,40023f4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xd8>
			return 255;
 40023ec:	00bfffc4 	movi	r2,-1
 40023f0:	0001a106 	br	4002a78 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x75c>
		}
		usleep (50000);
 40023f4:	00bfffc4 	movi	r2,-1
 40023f8:	e0bfeb15 	stw	r2,-84(fp)
 40023fc:	0130d414 	movui	r4,50000
 4002400:	401cc880 	call	401cc88 <usleep>
	uint8_t type = 0;
	uint8_t opt_len = 0;

	unsigned long startTime = clock();

	while (_dhcpUdpSocket.parsePacket() <= 0) {
 4002404:	003fe806 	br	40023a8 <__alt_data_end+0xfc0023a8>
		}
		usleep (50000);
	}
	// start reading in the packet
	RIP_MSG_FIXED fixedMsg;
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));
 4002408:	e0bfe717 	ldw	r2,-100(fp)
 400240c:	10c01204 	addi	r3,r2,72
 4002410:	e13fde04 	addi	r4,fp,-136
 4002414:	00bfffc4 	movi	r2,-1
 4002418:	e0bfeb15 	stw	r2,-84(fp)
 400241c:	01800904 	movi	r6,36
 4002420:	200b883a 	mov	r5,r4
 4002424:	1809883a 	mov	r4,r3
 4002428:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
 400242c:	e0bfde03 	ldbu	r2,-136(fp)
 4002430:	10803fcc 	andi	r2,r2,255
 4002434:	10800098 	cmpnei	r2,r2,2
 4002438:	1000091e 	bne	r2,zero,4002460 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x144>
 400243c:	e0bfe717 	ldw	r2,-100(fp)
 4002440:	10801204 	addi	r2,r2,72
 4002444:	1009883a 	mov	r4,r2
 4002448:	4002f500 	call	4002f50 <_ZN11EthernetUDP10remotePortEv>
 400244c:	10bfffcc 	andi	r2,r2,65535
 4002450:	108010d8 	cmpnei	r2,r2,67
 4002454:	1000021e 	bne	r2,zero,4002460 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x144>
 4002458:	00800044 	movi	r2,1
 400245c:	00000106 	br	4002464 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x148>
 4002460:	0005883a 	mov	r2,zero
 4002464:	10803fcc 	andi	r2,r2,255
 4002468:	10017c26 	beq	r2,zero,4002a5c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x740>
		transactionId = ntohl(fixedMsg.xid);
 400246c:	e0bfdf17 	ldw	r2,-132(fp)
 4002470:	1006963a 	slli	r3,r2,24
 4002474:	e0bfdf17 	ldw	r2,-132(fp)
 4002478:	1004923a 	slli	r2,r2,8
 400247c:	10803fec 	andhi	r2,r2,255
 4002480:	1886b03a 	or	r3,r3,r2
 4002484:	e0bfdf17 	ldw	r2,-132(fp)
 4002488:	1004d23a 	srli	r2,r2,8
 400248c:	10bfc00c 	andi	r2,r2,65280
 4002490:	1886b03a 	or	r3,r3,r2
 4002494:	e0bfdf17 	ldw	r2,-132(fp)
 4002498:	1004d63a 	srli	r2,r2,24
 400249c:	1886b03a 	or	r3,r3,r2
 40024a0:	e0bfe917 	ldw	r2,-92(fp)
 40024a4:	10c00015 	stw	r3,0(r2)
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
 40024a8:	e0bfe717 	ldw	r2,-100(fp)
 40024ac:	10c00204 	addi	r3,r2,8
 40024b0:	e0bfde04 	addi	r2,fp,-136
 40024b4:	10800704 	addi	r2,r2,28
 40024b8:	01800184 	movi	r6,6
 40024bc:	180b883a 	mov	r5,r3
 40024c0:	1009883a 	mov	r4,r2
 40024c4:	400c6ec0 	call	400c6ec <memcmp>
 40024c8:	10000a1e 	bne	r2,zero,40024f4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1d8>
		  (transactionId < _dhcpInitialTransactionId) ||
 40024cc:	e0bfe917 	ldw	r2,-92(fp)
 40024d0:	10c00017 	ldw	r3,0(r2)
 40024d4:	e0bfe717 	ldw	r2,-100(fp)
 40024d8:	10800017 	ldw	r2,0(r2)
	RIP_MSG_FIXED fixedMsg;
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
		transactionId = ntohl(fixedMsg.xid);
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
 40024dc:	18800536 	bltu	r3,r2,40024f4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1d8>
		  (transactionId < _dhcpInitialTransactionId) ||
		  (transactionId > _dhcpTransactionId)) {
 40024e0:	e0bfe917 	ldw	r2,-92(fp)
 40024e4:	10800017 	ldw	r2,0(r2)
 40024e8:	e0ffe717 	ldw	r3,-100(fp)
 40024ec:	18c00117 	ldw	r3,4(r3)
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
		transactionId = ntohl(fixedMsg.xid);
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
		  (transactionId < _dhcpInitialTransactionId) ||
 40024f0:	1880082e 	bgeu	r3,r2,4002514 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1f8>
		  (transactionId > _dhcpTransactionId)) {
			// Need to read the rest of the packet here regardless
			_dhcpUdpSocket.flush(); // FIXME
 40024f4:	e0bfe717 	ldw	r2,-100(fp)
 40024f8:	10c01204 	addi	r3,r2,72
 40024fc:	00bfffc4 	movi	r2,-1
 4002500:	e0bfeb15 	stw	r2,-84(fp)
 4002504:	1809883a 	mov	r4,r3
 4002508:	40068e80 	call	40068e8 <_ZN11EthernetUDP5flushEv>
			return 0;
 400250c:	0005883a 	mov	r2,zero
 4002510:	00015906 	br	4002a78 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x75c>
		}

		memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);
 4002514:	e0bfe717 	ldw	r2,-100(fp)
 4002518:	10800384 	addi	r2,r2,14
 400251c:	e0ffe203 	ldbu	r3,-120(fp)
 4002520:	10c00005 	stb	r3,0(r2)
 4002524:	e0ffe243 	ldbu	r3,-119(fp)
 4002528:	10c00045 	stb	r3,1(r2)
 400252c:	e0ffe283 	ldbu	r3,-118(fp)
 4002530:	10c00085 	stb	r3,2(r2)
 4002534:	e0ffe2c3 	ldbu	r3,-117(fp)
 4002538:	10c000c5 	stb	r3,3(r2)

		// Skip to the option part
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));
 400253c:	e0bfe717 	ldw	r2,-100(fp)
 4002540:	11001204 	addi	r4,r2,72
 4002544:	00800904 	movi	r2,36
 4002548:	00c03c04 	movi	r3,240
 400254c:	1885c83a 	sub	r2,r3,r2
 4002550:	1007883a 	mov	r3,r2
 4002554:	00bfffc4 	movi	r2,-1
 4002558:	e0bfeb15 	stw	r2,-84(fp)
 400255c:	180d883a 	mov	r6,r3
 4002560:	000b883a 	mov	r5,zero
 4002564:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>

		while (_dhcpUdpSocket.available() > 0) {
 4002568:	e0bfe717 	ldw	r2,-100(fp)
 400256c:	10c01204 	addi	r3,r2,72
 4002570:	00bfffc4 	movi	r2,-1
 4002574:	e0bfeb15 	stw	r2,-84(fp)
 4002578:	1809883a 	mov	r4,r3
 400257c:	40063040 	call	4006304 <_ZN11EthernetUDP9availableEv>
 4002580:	0084803a 	cmplt	r2,zero,r2
 4002584:	10803fcc 	andi	r2,r2,255
 4002588:	10013426 	beq	r2,zero,4002a5c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x740>
			switch (_dhcpUdpSocket.read()) {
 400258c:	e0bfe717 	ldw	r2,-100(fp)
 4002590:	10801204 	addi	r2,r2,72
 4002594:	1009883a 	mov	r4,r2
 4002598:	40066fc0 	call	40066fc <_ZN11EthernetUDP4readEv>
 400259c:	10c00ce0 	cmpeqi	r3,r2,51
 40025a0:	1800f41e 	bne	r3,zero,4002974 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x658>
 40025a4:	10c00d08 	cmpgei	r3,r2,52
 40025a8:	18000b1e 	bne	r3,zero,40025d8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2bc>
 40025ac:	10c00060 	cmpeqi	r3,r2,1
 40025b0:	1800241e 	bne	r3,zero,4002644 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x328>
 40025b4:	10c00088 	cmpgei	r3,r2,2
 40025b8:	1800021e 	bne	r3,zero,40025c4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2a8>
 40025bc:	10012326 	beq	r2,zero,4002a4c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x730>
 40025c0:	00011306 	br	4002a10 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>
 40025c4:	10c000e0 	cmpeqi	r3,r2,3
 40025c8:	18002e1e 	bne	r3,zero,4002684 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x368>
 40025cc:	108001a0 	cmpeqi	r2,r2,6
 40025d0:	1000441e 	bne	r2,zero,40026e4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x3c8>
 40025d4:	00010e06 	br	4002a10 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>
 40025d8:	10c00ea0 	cmpeqi	r3,r2,58
 40025dc:	18009f1e 	bne	r3,zero,400285c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x540>
 40025e0:	10c00ec8 	cmpgei	r3,r2,59
 40025e4:	1800051e 	bne	r3,zero,40025fc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e0>
 40025e8:	10c00d60 	cmpeqi	r3,r2,53
 40025ec:	1800081e 	bne	r3,zero,4002610 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2f4>
 40025f0:	10800da0 	cmpeqi	r2,r2,54
 40025f4:	1000531e 	bne	r2,zero,4002744 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x428>
 40025f8:	00010506 	br	4002a10 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>
 40025fc:	10c00ee0 	cmpeqi	r3,r2,59
 4002600:	1800b91e 	bne	r3,zero,40028e8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x5cc>
 4002604:	10803fe0 	cmpeqi	r2,r2,255
 4002608:	1001121e 	bne	r2,zero,4002a54 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x738>
 400260c:	00010006 	br	4002a10 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>

			case padOption :
				break;

			case dhcpMessageType :
				opt_len = _dhcpUdpSocket.read();
 4002610:	e0bfe717 	ldw	r2,-100(fp)
 4002614:	10c01204 	addi	r3,r2,72
 4002618:	00bfffc4 	movi	r2,-1
 400261c:	e0bfeb15 	stw	r2,-84(fp)
 4002620:	1809883a 	mov	r4,r3
 4002624:	40066fc0 	call	40066fc <_ZN11EthernetUDP4readEv>
 4002628:	e0bfd845 	stb	r2,-159(fp)
				type = _dhcpUdpSocket.read();
 400262c:	e0bfe717 	ldw	r2,-100(fp)
 4002630:	10801204 	addi	r2,r2,72
 4002634:	1009883a 	mov	r4,r2
 4002638:	40066fc0 	call	40066fc <_ZN11EthernetUDP4readEv>
 400263c:	e0bfd805 	stb	r2,-160(fp)
				break;
 4002640:	00010506 	br	4002a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case subnetMask :
				opt_len = _dhcpUdpSocket.read();
 4002644:	e0bfe717 	ldw	r2,-100(fp)
 4002648:	10c01204 	addi	r3,r2,72
 400264c:	00bfffc4 	movi	r2,-1
 4002650:	e0bfeb15 	stw	r2,-84(fp)
 4002654:	1809883a 	mov	r4,r3
 4002658:	40066fc0 	call	40066fc <_ZN11EthernetUDP4readEv>
 400265c:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpSubnetMask, 4);
 4002660:	e0bfe717 	ldw	r2,-100(fp)
 4002664:	10c01204 	addi	r3,r2,72
 4002668:	e0bfe717 	ldw	r2,-100(fp)
 400266c:	10800484 	addi	r2,r2,18
 4002670:	01800104 	movi	r6,4
 4002674:	100b883a 	mov	r5,r2
 4002678:	1809883a 	mov	r4,r3
 400267c:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				break;
 4002680:	0000f506 	br	4002a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case routersOnSubnet :
				opt_len = _dhcpUdpSocket.read();
 4002684:	e0bfe717 	ldw	r2,-100(fp)
 4002688:	10c01204 	addi	r3,r2,72
 400268c:	00bfffc4 	movi	r2,-1
 4002690:	e0bfeb15 	stw	r2,-84(fp)
 4002694:	1809883a 	mov	r4,r3
 4002698:	40066fc0 	call	40066fc <_ZN11EthernetUDP4readEv>
 400269c:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpGatewayIp, 4);
 40026a0:	e0bfe717 	ldw	r2,-100(fp)
 40026a4:	10c01204 	addi	r3,r2,72
 40026a8:	e0bfe717 	ldw	r2,-100(fp)
 40026ac:	10800584 	addi	r2,r2,22
 40026b0:	01800104 	movi	r6,4
 40026b4:	100b883a 	mov	r5,r2
 40026b8:	1809883a 	mov	r4,r3
 40026bc:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
 40026c0:	e0bfe717 	ldw	r2,-100(fp)
 40026c4:	10c01204 	addi	r3,r2,72
 40026c8:	e0bfd843 	ldbu	r2,-159(fp)
 40026cc:	10bfff04 	addi	r2,r2,-4
 40026d0:	100d883a 	mov	r6,r2
 40026d4:	000b883a 	mov	r5,zero
 40026d8:	1809883a 	mov	r4,r3
 40026dc:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				break;
 40026e0:	0000dd06 	br	4002a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dns :
				opt_len = _dhcpUdpSocket.read();
 40026e4:	e0bfe717 	ldw	r2,-100(fp)
 40026e8:	10c01204 	addi	r3,r2,72
 40026ec:	00bfffc4 	movi	r2,-1
 40026f0:	e0bfeb15 	stw	r2,-84(fp)
 40026f4:	1809883a 	mov	r4,r3
 40026f8:	40066fc0 	call	40066fc <_ZN11EthernetUDP4readEv>
 40026fc:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
 4002700:	e0bfe717 	ldw	r2,-100(fp)
 4002704:	10c01204 	addi	r3,r2,72
 4002708:	e0bfe717 	ldw	r2,-100(fp)
 400270c:	10800784 	addi	r2,r2,30
 4002710:	01800104 	movi	r6,4
 4002714:	100b883a 	mov	r5,r2
 4002718:	1809883a 	mov	r4,r3
 400271c:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
 4002720:	e0bfe717 	ldw	r2,-100(fp)
 4002724:	10c01204 	addi	r3,r2,72
 4002728:	e0bfd843 	ldbu	r2,-159(fp)
 400272c:	10bfff04 	addi	r2,r2,-4
 4002730:	100d883a 	mov	r6,r2
 4002734:	000b883a 	mov	r5,zero
 4002738:	1809883a 	mov	r4,r3
 400273c:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				break;
 4002740:	0000c506 	br	4002a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
 4002744:	e0bfe717 	ldw	r2,-100(fp)
 4002748:	10c01204 	addi	r3,r2,72
 400274c:	00bfffc4 	movi	r2,-1
 4002750:	e0bfeb15 	stw	r2,-84(fp)
 4002754:	1809883a 	mov	r4,r3
 4002758:	40066fc0 	call	40066fc <_ZN11EthernetUDP4readEv>
 400275c:	e0bfd845 	stb	r2,-159(fp)
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 4002760:	e0bfe717 	ldw	r2,-100(fp)
 4002764:	11000684 	addi	r4,r2,26
 4002768:	e0ffdd04 	addi	r3,fp,-140
 400276c:	00800044 	movi	r2,1
 4002770:	e0bfeb15 	stw	r2,-84(fp)
 4002774:	200b883a 	mov	r5,r4
 4002778:	1809883a 	mov	r4,r3
 400277c:	400861c0 	call	400861c <_ZN9IPAddressC1EPKh>
 4002780:	e0bfdc04 	addi	r2,fp,-144
 4002784:	000b883a 	mov	r5,zero
 4002788:	1009883a 	mov	r4,r2
 400278c:	40085e80 	call	40085e8 <_ZN9IPAddressC1Em>
 4002790:	e0ffdc04 	addi	r3,fp,-144
 4002794:	e0bfdd04 	addi	r2,fp,-140
 4002798:	180b883a 	mov	r5,r3
 400279c:	1009883a 	mov	r4,r2
 40027a0:	4002ef00 	call	4002ef0 <_ZNK9IPAddresseqERKS_>
 40027a4:	10803fcc 	andi	r2,r2,255
 40027a8:	1000121e 	bne	r2,zero,40027f4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4d8>
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
 40027ac:	e0bfe717 	ldw	r2,-100(fp)
 40027b0:	10c00684 	addi	r3,r2,26
 40027b4:	e0bfdb04 	addi	r2,fp,-148
 40027b8:	180b883a 	mov	r5,r3
 40027bc:	1009883a 	mov	r4,r2
 40027c0:	400861c0 	call	400861c <_ZN9IPAddressC1EPKh>
 40027c4:	e0bfe717 	ldw	r2,-100(fp)
 40027c8:	10801204 	addi	r2,r2,72
 40027cc:	1009883a 	mov	r4,r2
 40027d0:	4002f280 	call	4002f28 <_ZN11EthernetUDP8remoteIPEv>
 40027d4:	e0bfda15 	stw	r2,-152(fp)
 40027d8:	e0ffda04 	addi	r3,fp,-152
 40027dc:	e0bfdb04 	addi	r2,fp,-148
 40027e0:	180b883a 	mov	r5,r3
 40027e4:	1009883a 	mov	r4,r2
 40027e8:	4002ef00 	call	4002ef0 <_ZNK9IPAddresseqERKS_>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
				break;

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 40027ec:	10803fcc 	andi	r2,r2,255
 40027f0:	10000226 	beq	r2,zero,40027fc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e0>
 40027f4:	00800044 	movi	r2,1
 40027f8:	00000106 	br	4002800 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e4>
 40027fc:	0005883a 	mov	r2,zero
 4002800:	10803fcc 	andi	r2,r2,255
 4002804:	10000b26 	beq	r2,zero,4002834 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x518>
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
					_dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
 4002808:	e0bfe717 	ldw	r2,-100(fp)
 400280c:	10c01204 	addi	r3,r2,72
 4002810:	e0bfe717 	ldw	r2,-100(fp)
 4002814:	11000684 	addi	r4,r2,26
 4002818:	00bfffc4 	movi	r2,-1
 400281c:	e0bfeb15 	stw	r2,-84(fp)
 4002820:	01800104 	movi	r6,4
 4002824:	200b883a 	mov	r5,r4
 4002828:	1809883a 	mov	r4,r3
 400282c:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				} else {
					// Skip over the rest of this option
					_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
				}
				break;
 4002830:	00008906 	br	4002a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
					_dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
				} else {
					// Skip over the rest of this option
					_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
 4002834:	e0bfe717 	ldw	r2,-100(fp)
 4002838:	10c01204 	addi	r3,r2,72
 400283c:	e13fd843 	ldbu	r4,-159(fp)
 4002840:	00bfffc4 	movi	r2,-1
 4002844:	e0bfeb15 	stw	r2,-84(fp)
 4002848:	200d883a 	mov	r6,r4
 400284c:	000b883a 	mov	r5,zero
 4002850:	1809883a 	mov	r4,r3
 4002854:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				}
				break;
 4002858:	00007f06 	br	4002a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpT1value :
				opt_len = _dhcpUdpSocket.read();
 400285c:	e0bfe717 	ldw	r2,-100(fp)
 4002860:	10c01204 	addi	r3,r2,72
 4002864:	00bfffc4 	movi	r2,-1
 4002868:	e0bfeb15 	stw	r2,-84(fp)
 400286c:	1809883a 	mov	r4,r3
 4002870:	40066fc0 	call	40066fc <_ZN11EthernetUDP4readEv>
 4002874:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
 4002878:	e0bfe717 	ldw	r2,-100(fp)
 400287c:	10c01204 	addi	r3,r2,72
 4002880:	e0bfe717 	ldw	r2,-100(fp)
 4002884:	10800a04 	addi	r2,r2,40
 4002888:	01800104 	movi	r6,4
 400288c:	100b883a 	mov	r5,r2
 4002890:	1809883a 	mov	r4,r3
 4002894:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				_dhcpT1 = ntohl(_dhcpT1);
 4002898:	e0bfe717 	ldw	r2,-100(fp)
 400289c:	10800a17 	ldw	r2,40(r2)
 40028a0:	1006963a 	slli	r3,r2,24
 40028a4:	e0bfe717 	ldw	r2,-100(fp)
 40028a8:	10800a17 	ldw	r2,40(r2)
 40028ac:	1004923a 	slli	r2,r2,8
 40028b0:	10803fec 	andhi	r2,r2,255
 40028b4:	1886b03a 	or	r3,r3,r2
 40028b8:	e0bfe717 	ldw	r2,-100(fp)
 40028bc:	10800a17 	ldw	r2,40(r2)
 40028c0:	1004d23a 	srli	r2,r2,8
 40028c4:	10bfc00c 	andi	r2,r2,65280
 40028c8:	1886b03a 	or	r3,r3,r2
 40028cc:	e0bfe717 	ldw	r2,-100(fp)
 40028d0:	10800a17 	ldw	r2,40(r2)
 40028d4:	1004d63a 	srli	r2,r2,24
 40028d8:	1886b03a 	or	r3,r3,r2
 40028dc:	e0bfe717 	ldw	r2,-100(fp)
 40028e0:	10c00a15 	stw	r3,40(r2)
				break;
 40028e4:	00005c06 	br	4002a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpT2value :
				opt_len = _dhcpUdpSocket.read();
 40028e8:	e0bfe717 	ldw	r2,-100(fp)
 40028ec:	10c01204 	addi	r3,r2,72
 40028f0:	00bfffc4 	movi	r2,-1
 40028f4:	e0bfeb15 	stw	r2,-84(fp)
 40028f8:	1809883a 	mov	r4,r3
 40028fc:	40066fc0 	call	40066fc <_ZN11EthernetUDP4readEv>
 4002900:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
 4002904:	e0bfe717 	ldw	r2,-100(fp)
 4002908:	10c01204 	addi	r3,r2,72
 400290c:	e0bfe717 	ldw	r2,-100(fp)
 4002910:	10800b04 	addi	r2,r2,44
 4002914:	01800104 	movi	r6,4
 4002918:	100b883a 	mov	r5,r2
 400291c:	1809883a 	mov	r4,r3
 4002920:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				_dhcpT2 = ntohl(_dhcpT2);
 4002924:	e0bfe717 	ldw	r2,-100(fp)
 4002928:	10800b17 	ldw	r2,44(r2)
 400292c:	1006963a 	slli	r3,r2,24
 4002930:	e0bfe717 	ldw	r2,-100(fp)
 4002934:	10800b17 	ldw	r2,44(r2)
 4002938:	1004923a 	slli	r2,r2,8
 400293c:	10803fec 	andhi	r2,r2,255
 4002940:	1886b03a 	or	r3,r3,r2
 4002944:	e0bfe717 	ldw	r2,-100(fp)
 4002948:	10800b17 	ldw	r2,44(r2)
 400294c:	1004d23a 	srli	r2,r2,8
 4002950:	10bfc00c 	andi	r2,r2,65280
 4002954:	1886b03a 	or	r3,r3,r2
 4002958:	e0bfe717 	ldw	r2,-100(fp)
 400295c:	10800b17 	ldw	r2,44(r2)
 4002960:	1004d63a 	srli	r2,r2,24
 4002964:	1886b03a 	or	r3,r3,r2
 4002968:	e0bfe717 	ldw	r2,-100(fp)
 400296c:	10c00b15 	stw	r3,44(r2)
				break;
 4002970:	00003906 	br	4002a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpIPaddrLeaseTime :
				opt_len = _dhcpUdpSocket.read();
 4002974:	e0bfe717 	ldw	r2,-100(fp)
 4002978:	10c01204 	addi	r3,r2,72
 400297c:	00bfffc4 	movi	r2,-1
 4002980:	e0bfeb15 	stw	r2,-84(fp)
 4002984:	1809883a 	mov	r4,r3
 4002988:	40066fc0 	call	40066fc <_ZN11EthernetUDP4readEv>
 400298c:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
 4002990:	e0bfe717 	ldw	r2,-100(fp)
 4002994:	10c01204 	addi	r3,r2,72
 4002998:	e0bfe717 	ldw	r2,-100(fp)
 400299c:	10800904 	addi	r2,r2,36
 40029a0:	01800104 	movi	r6,4
 40029a4:	100b883a 	mov	r5,r2
 40029a8:	1809883a 	mov	r4,r3
 40029ac:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				_dhcpLeaseTime = ntohl(_dhcpLeaseTime);
 40029b0:	e0bfe717 	ldw	r2,-100(fp)
 40029b4:	10800917 	ldw	r2,36(r2)
 40029b8:	1006963a 	slli	r3,r2,24
 40029bc:	e0bfe717 	ldw	r2,-100(fp)
 40029c0:	10800917 	ldw	r2,36(r2)
 40029c4:	1004923a 	slli	r2,r2,8
 40029c8:	10803fec 	andhi	r2,r2,255
 40029cc:	1886b03a 	or	r3,r3,r2
 40029d0:	e0bfe717 	ldw	r2,-100(fp)
 40029d4:	10800917 	ldw	r2,36(r2)
 40029d8:	1004d23a 	srli	r2,r2,8
 40029dc:	10bfc00c 	andi	r2,r2,65280
 40029e0:	1886b03a 	or	r3,r3,r2
 40029e4:	e0bfe717 	ldw	r2,-100(fp)
 40029e8:	10800917 	ldw	r2,36(r2)
 40029ec:	1004d63a 	srli	r2,r2,24
 40029f0:	1886b03a 	or	r3,r3,r2
 40029f4:	e0bfe717 	ldw	r2,-100(fp)
 40029f8:	10c00915 	stw	r3,36(r2)
				_renewInSec = _dhcpLeaseTime;
 40029fc:	e0bfe717 	ldw	r2,-100(fp)
 4002a00:	10c00917 	ldw	r3,36(r2)
 4002a04:	e0bfe717 	ldw	r2,-100(fp)
 4002a08:	10c00c15 	stw	r3,48(r2)
				break;
 4002a0c:	00001206 	br	4002a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			default :
				opt_len = _dhcpUdpSocket.read();
 4002a10:	e0bfe717 	ldw	r2,-100(fp)
 4002a14:	10c01204 	addi	r3,r2,72
 4002a18:	00bfffc4 	movi	r2,-1
 4002a1c:	e0bfeb15 	stw	r2,-84(fp)
 4002a20:	1809883a 	mov	r4,r3
 4002a24:	40066fc0 	call	40066fc <_ZN11EthernetUDP4readEv>
 4002a28:	e0bfd845 	stb	r2,-159(fp)
				// Skip over the rest of this option
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
 4002a2c:	e0bfe717 	ldw	r2,-100(fp)
 4002a30:	10801204 	addi	r2,r2,72
 4002a34:	e0ffd843 	ldbu	r3,-159(fp)
 4002a38:	180d883a 	mov	r6,r3
 4002a3c:	000b883a 	mov	r5,zero
 4002a40:	1009883a 	mov	r4,r2
 4002a44:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				break;
 4002a48:	00000306 	br	4002a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>
			switch (_dhcpUdpSocket.read()) {
			case endOption :
				break;

			case padOption :
				break;
 4002a4c:	0001883a 	nop
 4002a50:	003ec506 	br	4002568 <__alt_data_end+0xfc002568>
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));

		while (_dhcpUdpSocket.available() > 0) {
			switch (_dhcpUdpSocket.read()) {
			case endOption :
				break;
 4002a54:	0001883a 	nop
		memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);

		// Skip to the option part
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));

		while (_dhcpUdpSocket.available() > 0) {
 4002a58:	003ec306 	br	4002568 <__alt_data_end+0xfc002568>
			}
		}
	}

	// Need to skip to end of the packet regardless here
	_dhcpUdpSocket.flush(); // FIXME
 4002a5c:	e0bfe717 	ldw	r2,-100(fp)
 4002a60:	10c01204 	addi	r3,r2,72
 4002a64:	00bfffc4 	movi	r2,-1
 4002a68:	e0bfeb15 	stw	r2,-84(fp)
 4002a6c:	1809883a 	mov	r4,r3
 4002a70:	40068e80 	call	40068e8 <_ZN11EthernetUDP5flushEv>

	return type;
 4002a74:	e0bfd803 	ldbu	r2,-160(fp)
 4002a78:	e0bff705 	stb	r2,-36(fp)
 4002a7c:	00000806 	br	4002aa0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x784>
 4002a80:	e7002804 	addi	fp,fp,160
 4002a84:	e0bfec17 	ldw	r2,-80(fp)
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
				break;

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 4002a88:	0001883a 	nop
 4002a8c:	1007883a 	mov	r3,r2
 4002a90:	00bfffc4 	movi	r2,-1
 4002a94:	e0bfeb15 	stw	r2,-84(fp)
 4002a98:	1809883a 	mov	r4,r3
 4002a9c:	400bd380 	call	400bd38 <_Unwind_SjLj_Resume>
 4002aa0:	e0bfea04 	addi	r2,fp,-88
 4002aa4:	1009883a 	mov	r4,r2
 4002aa8:	400bb540 	call	400bb54 <_Unwind_SjLj_Unregister>

	// Need to skip to end of the packet regardless here
	_dhcpUdpSocket.flush(); // FIXME

	return type;
}
 4002aac:	e0bff703 	ldbu	r2,-36(fp)
 4002ab0:	e6fff804 	addi	sp,fp,-32
 4002ab4:	dfc00917 	ldw	ra,36(sp)
 4002ab8:	df000817 	ldw	fp,32(sp)
 4002abc:	ddc00717 	ldw	r23,28(sp)
 4002ac0:	dd800617 	ldw	r22,24(sp)
 4002ac4:	dd400517 	ldw	r21,20(sp)
 4002ac8:	dd000417 	ldw	r20,16(sp)
 4002acc:	dcc00317 	ldw	r19,12(sp)
 4002ad0:	dc800217 	ldw	r18,8(sp)
 4002ad4:	dc400117 	ldw	r17,4(sp)
 4002ad8:	dc000017 	ldw	r16,0(sp)
 4002adc:	dec00a04 	addi	sp,sp,40
 4002ae0:	f800283a 	ret

04002ae4 <_ZN9DhcpClass10checkLeaseEv>:
    2/DHCP_CHECK_RENEW_OK: renew success
    3/DHCP_CHECK_REBIND_FAIL: rebind fail
    4/DHCP_CHECK_REBIND_OK: rebind success
*/
int DhcpClass::checkLease()
{
 4002ae4:	defffa04 	addi	sp,sp,-24
 4002ae8:	dfc00515 	stw	ra,20(sp)
 4002aec:	df000415 	stw	fp,16(sp)
 4002af0:	df000404 	addi	fp,sp,16
 4002af4:	e13fff15 	stw	r4,-4(fp)
	int rc = DHCP_CHECK_NONE;
 4002af8:	e03ffc15 	stw	zero,-16(fp)

	unsigned long now = clock();
 4002afc:	400be6c0 	call	400be6c <clock>
 4002b00:	e0bffd15 	stw	r2,-12(fp)
	unsigned long elapsed = now - _lastCheckLeaseMillis;
 4002b04:	e0bfff17 	ldw	r2,-4(fp)
 4002b08:	10801017 	ldw	r2,64(r2)
 4002b0c:	e0fffd17 	ldw	r3,-12(fp)
 4002b10:	1885c83a 	sub	r2,r3,r2
 4002b14:	e0bffe15 	stw	r2,-8(fp)

	// if more then one sec passed, reduce the counters accordingly
	if (elapsed >= 1000) {
 4002b18:	e0bffe17 	ldw	r2,-8(fp)
 4002b1c:	1080fa30 	cmpltui	r2,r2,1000
 4002b20:	10002a1e 	bne	r2,zero,4002bcc <_ZN9DhcpClass10checkLeaseEv+0xe8>
		// set the new timestamps
		_lastCheckLeaseMillis = now - (elapsed % 1000);
 4002b24:	e0bffe17 	ldw	r2,-8(fp)
 4002b28:	0140fa04 	movi	r5,1000
 4002b2c:	1009883a 	mov	r4,r2
 4002b30:	400b8dc0 	call	400b8dc <__umodsi3>
 4002b34:	1007883a 	mov	r3,r2
 4002b38:	e0bffd17 	ldw	r2,-12(fp)
 4002b3c:	10c7c83a 	sub	r3,r2,r3
 4002b40:	e0bfff17 	ldw	r2,-4(fp)
 4002b44:	10c01015 	stw	r3,64(r2)
		elapsed = elapsed / 1000;
 4002b48:	e0bffe17 	ldw	r2,-8(fp)
 4002b4c:	0140fa04 	movi	r5,1000
 4002b50:	1009883a 	mov	r4,r2
 4002b54:	400b8780 	call	400b878 <__udivsi3>
 4002b58:	e0bffe15 	stw	r2,-8(fp)

		// decrease the counters by elapsed seconds
		// we assume that the cycle time (elapsed) is fairly constant
		// if the remainder is less than cycle time * 2
		// do it early instead of late
		if (_renewInSec < elapsed * 2) {
 4002b5c:	e0bfff17 	ldw	r2,-4(fp)
 4002b60:	10c00c17 	ldw	r3,48(r2)
 4002b64:	e0bffe17 	ldw	r2,-8(fp)
 4002b68:	1085883a 	add	r2,r2,r2
 4002b6c:	1880032e 	bgeu	r3,r2,4002b7c <_ZN9DhcpClass10checkLeaseEv+0x98>
			_renewInSec = 0;
 4002b70:	e0bfff17 	ldw	r2,-4(fp)
 4002b74:	10000c15 	stw	zero,48(r2)
 4002b78:	00000606 	br	4002b94 <_ZN9DhcpClass10checkLeaseEv+0xb0>
		} else {
			_renewInSec -= elapsed;
 4002b7c:	e0bfff17 	ldw	r2,-4(fp)
 4002b80:	10c00c17 	ldw	r3,48(r2)
 4002b84:	e0bffe17 	ldw	r2,-8(fp)
 4002b88:	1887c83a 	sub	r3,r3,r2
 4002b8c:	e0bfff17 	ldw	r2,-4(fp)
 4002b90:	10c00c15 	stw	r3,48(r2)
		}
		if (_rebindInSec < elapsed * 2) {
 4002b94:	e0bfff17 	ldw	r2,-4(fp)
 4002b98:	10c00d17 	ldw	r3,52(r2)
 4002b9c:	e0bffe17 	ldw	r2,-8(fp)
 4002ba0:	1085883a 	add	r2,r2,r2
 4002ba4:	1880032e 	bgeu	r3,r2,4002bb4 <_ZN9DhcpClass10checkLeaseEv+0xd0>
			_rebindInSec = 0;
 4002ba8:	e0bfff17 	ldw	r2,-4(fp)
 4002bac:	10000d15 	stw	zero,52(r2)
 4002bb0:	00000606 	br	4002bcc <_ZN9DhcpClass10checkLeaseEv+0xe8>
		} else {
			_rebindInSec -= elapsed;
 4002bb4:	e0bfff17 	ldw	r2,-4(fp)
 4002bb8:	10c00d17 	ldw	r3,52(r2)
 4002bbc:	e0bffe17 	ldw	r2,-8(fp)
 4002bc0:	1887c83a 	sub	r3,r3,r2
 4002bc4:	e0bfff17 	ldw	r2,-4(fp)
 4002bc8:	10c00d15 	stw	r3,52(r2)
		}
	}

	// if we have a lease but should renew, do it
	if (_renewInSec == 0 &&_dhcp_state == STATE_DHCP_LEASED) {
 4002bcc:	e0bfff17 	ldw	r2,-4(fp)
 4002bd0:	10800c17 	ldw	r2,48(r2)
 4002bd4:	10000c1e 	bne	r2,zero,4002c08 <_ZN9DhcpClass10checkLeaseEv+0x124>
 4002bd8:	e0bfff17 	ldw	r2,-4(fp)
 4002bdc:	10801103 	ldbu	r2,68(r2)
 4002be0:	10803fcc 	andi	r2,r2,255
 4002be4:	108000d8 	cmpnei	r2,r2,3
 4002be8:	1000071e 	bne	r2,zero,4002c08 <_ZN9DhcpClass10checkLeaseEv+0x124>
		_dhcp_state = STATE_DHCP_REREQUEST;
 4002bec:	e0bfff17 	ldw	r2,-4(fp)
 4002bf0:	00c00104 	movi	r3,4
 4002bf4:	10c01105 	stb	r3,68(r2)
		rc = 1 + request_DHCP_lease();
 4002bf8:	e13fff17 	ldw	r4,-4(fp)
 4002bfc:	4001b200 	call	4001b20 <_ZN9DhcpClass18request_DHCP_leaseEv>
 4002c00:	10800044 	addi	r2,r2,1
 4002c04:	e0bffc15 	stw	r2,-16(fp)
	}

	// if we have a lease or is renewing but should bind, do it
	if (_rebindInSec == 0 && (_dhcp_state == STATE_DHCP_LEASED ||
 4002c08:	e0bfff17 	ldw	r2,-4(fp)
 4002c0c:	10800d17 	ldw	r2,52(r2)
 4002c10:	1000111e 	bne	r2,zero,4002c58 <_ZN9DhcpClass10checkLeaseEv+0x174>
 4002c14:	e0bfff17 	ldw	r2,-4(fp)
 4002c18:	10801103 	ldbu	r2,68(r2)
 4002c1c:	10803fcc 	andi	r2,r2,255
 4002c20:	108000e0 	cmpeqi	r2,r2,3
 4002c24:	1000041e 	bne	r2,zero,4002c38 <_ZN9DhcpClass10checkLeaseEv+0x154>
	  _dhcp_state == STATE_DHCP_START)) {
 4002c28:	e0bfff17 	ldw	r2,-4(fp)
 4002c2c:	10801103 	ldbu	r2,68(r2)
		_dhcp_state = STATE_DHCP_REREQUEST;
		rc = 1 + request_DHCP_lease();
	}

	// if we have a lease or is renewing but should bind, do it
	if (_rebindInSec == 0 && (_dhcp_state == STATE_DHCP_LEASED ||
 4002c30:	10803fcc 	andi	r2,r2,255
 4002c34:	1000081e 	bne	r2,zero,4002c58 <_ZN9DhcpClass10checkLeaseEv+0x174>
	  _dhcp_state == STATE_DHCP_START)) {
		// this should basically restart completely
		_dhcp_state = STATE_DHCP_START;
 4002c38:	e0bfff17 	ldw	r2,-4(fp)
 4002c3c:	10001105 	stb	zero,68(r2)
		reset_DHCP_lease();
 4002c40:	e13fff17 	ldw	r4,-4(fp)
 4002c44:	4001adc0 	call	4001adc <_ZN9DhcpClass16reset_DHCP_leaseEv>
		rc = 3 + request_DHCP_lease();
 4002c48:	e13fff17 	ldw	r4,-4(fp)
 4002c4c:	4001b200 	call	4001b20 <_ZN9DhcpClass18request_DHCP_leaseEv>
 4002c50:	108000c4 	addi	r2,r2,3
 4002c54:	e0bffc15 	stw	r2,-16(fp)
	}
	return rc;
 4002c58:	e0bffc17 	ldw	r2,-16(fp)
}
 4002c5c:	e037883a 	mov	sp,fp
 4002c60:	dfc00117 	ldw	ra,4(sp)
 4002c64:	df000017 	ldw	fp,0(sp)
 4002c68:	dec00204 	addi	sp,sp,8
 4002c6c:	f800283a 	ret

04002c70 <_ZN9DhcpClass10getLocalIpEv>:

IPAddress DhcpClass::getLocalIp()
{
 4002c70:	defffc04 	addi	sp,sp,-16
 4002c74:	dfc00315 	stw	ra,12(sp)
 4002c78:	df000215 	stw	fp,8(sp)
 4002c7c:	df000204 	addi	fp,sp,8
 4002c80:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpLocalIp);
 4002c84:	e0bfff17 	ldw	r2,-4(fp)
 4002c88:	10800384 	addi	r2,r2,14
 4002c8c:	100b883a 	mov	r5,r2
 4002c90:	e13ffe04 	addi	r4,fp,-8
 4002c94:	400861c0 	call	400861c <_ZN9IPAddressC1EPKh>
 4002c98:	e0bffe17 	ldw	r2,-8(fp)
}
 4002c9c:	e037883a 	mov	sp,fp
 4002ca0:	dfc00117 	ldw	ra,4(sp)
 4002ca4:	df000017 	ldw	fp,0(sp)
 4002ca8:	dec00204 	addi	sp,sp,8
 4002cac:	f800283a 	ret

04002cb0 <_ZN9DhcpClass13getSubnetMaskEv>:

IPAddress DhcpClass::getSubnetMask()
{
 4002cb0:	defffc04 	addi	sp,sp,-16
 4002cb4:	dfc00315 	stw	ra,12(sp)
 4002cb8:	df000215 	stw	fp,8(sp)
 4002cbc:	df000204 	addi	fp,sp,8
 4002cc0:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpSubnetMask);
 4002cc4:	e0bfff17 	ldw	r2,-4(fp)
 4002cc8:	10800484 	addi	r2,r2,18
 4002ccc:	100b883a 	mov	r5,r2
 4002cd0:	e13ffe04 	addi	r4,fp,-8
 4002cd4:	400861c0 	call	400861c <_ZN9IPAddressC1EPKh>
 4002cd8:	e0bffe17 	ldw	r2,-8(fp)
}
 4002cdc:	e037883a 	mov	sp,fp
 4002ce0:	dfc00117 	ldw	ra,4(sp)
 4002ce4:	df000017 	ldw	fp,0(sp)
 4002ce8:	dec00204 	addi	sp,sp,8
 4002cec:	f800283a 	ret

04002cf0 <_ZN9DhcpClass12getGatewayIpEv>:

IPAddress DhcpClass::getGatewayIp()
{
 4002cf0:	defffc04 	addi	sp,sp,-16
 4002cf4:	dfc00315 	stw	ra,12(sp)
 4002cf8:	df000215 	stw	fp,8(sp)
 4002cfc:	df000204 	addi	fp,sp,8
 4002d00:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpGatewayIp);
 4002d04:	e0bfff17 	ldw	r2,-4(fp)
 4002d08:	10800584 	addi	r2,r2,22
 4002d0c:	100b883a 	mov	r5,r2
 4002d10:	e13ffe04 	addi	r4,fp,-8
 4002d14:	400861c0 	call	400861c <_ZN9IPAddressC1EPKh>
 4002d18:	e0bffe17 	ldw	r2,-8(fp)
}
 4002d1c:	e037883a 	mov	sp,fp
 4002d20:	dfc00117 	ldw	ra,4(sp)
 4002d24:	df000017 	ldw	fp,0(sp)
 4002d28:	dec00204 	addi	sp,sp,8
 4002d2c:	f800283a 	ret

04002d30 <_ZN9DhcpClass15getDhcpServerIpEv>:

IPAddress DhcpClass::getDhcpServerIp()
{
 4002d30:	defffc04 	addi	sp,sp,-16
 4002d34:	dfc00315 	stw	ra,12(sp)
 4002d38:	df000215 	stw	fp,8(sp)
 4002d3c:	df000204 	addi	fp,sp,8
 4002d40:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpDhcpServerIp);
 4002d44:	e0bfff17 	ldw	r2,-4(fp)
 4002d48:	10800684 	addi	r2,r2,26
 4002d4c:	100b883a 	mov	r5,r2
 4002d50:	e13ffe04 	addi	r4,fp,-8
 4002d54:	400861c0 	call	400861c <_ZN9IPAddressC1EPKh>
 4002d58:	e0bffe17 	ldw	r2,-8(fp)
}
 4002d5c:	e037883a 	mov	sp,fp
 4002d60:	dfc00117 	ldw	ra,4(sp)
 4002d64:	df000017 	ldw	fp,0(sp)
 4002d68:	dec00204 	addi	sp,sp,8
 4002d6c:	f800283a 	ret

04002d70 <_ZN9DhcpClass14getDnsServerIpEv>:

IPAddress DhcpClass::getDnsServerIp()
{
 4002d70:	defffc04 	addi	sp,sp,-16
 4002d74:	dfc00315 	stw	ra,12(sp)
 4002d78:	df000215 	stw	fp,8(sp)
 4002d7c:	df000204 	addi	fp,sp,8
 4002d80:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpDnsServerIp);
 4002d84:	e0bfff17 	ldw	r2,-4(fp)
 4002d88:	10800784 	addi	r2,r2,30
 4002d8c:	100b883a 	mov	r5,r2
 4002d90:	e13ffe04 	addi	r4,fp,-8
 4002d94:	400861c0 	call	400861c <_ZN9IPAddressC1EPKh>
 4002d98:	e0bffe17 	ldw	r2,-8(fp)
}
 4002d9c:	e037883a 	mov	sp,fp
 4002da0:	dfc00117 	ldw	ra,4(sp)
 4002da4:	df000017 	ldw	fp,0(sp)
 4002da8:	dec00204 	addi	sp,sp,8
 4002dac:	f800283a 	ret

04002db0 <_ZN9DhcpClass9printByteEPch>:

void DhcpClass::printByte(char * buf, uint8_t n )
{
 4002db0:	defff904 	addi	sp,sp,-28
 4002db4:	df000615 	stw	fp,24(sp)
 4002db8:	df000604 	addi	fp,sp,24
 4002dbc:	e13ffd15 	stw	r4,-12(fp)
 4002dc0:	e17ffe15 	stw	r5,-8(fp)
 4002dc4:	3005883a 	mov	r2,r6
 4002dc8:	e0bfff05 	stb	r2,-4(fp)
	char *str = &buf[1];
 4002dcc:	e0bffe17 	ldw	r2,-8(fp)
 4002dd0:	10800044 	addi	r2,r2,1
 4002dd4:	e0bffa15 	stw	r2,-24(fp)
	buf[0]='0';
 4002dd8:	e0bffe17 	ldw	r2,-8(fp)
 4002ddc:	00c00c04 	movi	r3,48
 4002de0:	10c00005 	stb	r3,0(r2)
	do {
		unsigned long m = n;
 4002de4:	e0bfff03 	ldbu	r2,-4(fp)
 4002de8:	e0bffb15 	stw	r2,-20(fp)
		n /= 16;
 4002dec:	e0bfff03 	ldbu	r2,-4(fp)
 4002df0:	1004d13a 	srli	r2,r2,4
 4002df4:	e0bfff05 	stb	r2,-4(fp)
		char c = m - 16 * n;
 4002df8:	e0bffb17 	ldw	r2,-20(fp)
 4002dfc:	1007883a 	mov	r3,r2
 4002e00:	e0bfff03 	ldbu	r2,-4(fp)
 4002e04:	1004913a 	slli	r2,r2,4
 4002e08:	1885c83a 	sub	r2,r3,r2
 4002e0c:	e0bffc05 	stb	r2,-16(fp)
		*str-- = c < 10 ? c + '0' : c + 'A' - 10;
 4002e10:	e0bffa17 	ldw	r2,-24(fp)
 4002e14:	10ffffc4 	addi	r3,r2,-1
 4002e18:	e0fffa15 	stw	r3,-24(fp)
 4002e1c:	e0fffc07 	ldb	r3,-16(fp)
 4002e20:	18c00288 	cmpgei	r3,r3,10
 4002e24:	1800031e 	bne	r3,zero,4002e34 <_ZN9DhcpClass9printByteEPch+0x84>
 4002e28:	e0fffc03 	ldbu	r3,-16(fp)
 4002e2c:	18c00c04 	addi	r3,r3,48
 4002e30:	00000206 	br	4002e3c <_ZN9DhcpClass9printByteEPch+0x8c>
 4002e34:	e0fffc03 	ldbu	r3,-16(fp)
 4002e38:	18c00dc4 	addi	r3,r3,55
 4002e3c:	10c00005 	stb	r3,0(r2)

void DhcpClass::printByte(char * buf, uint8_t n )
{
	char *str = &buf[1];
	buf[0]='0';
	do {
 4002e40:	e0bfff03 	ldbu	r2,-4(fp)
 4002e44:	10000126 	beq	r2,zero,4002e4c <_ZN9DhcpClass9printByteEPch+0x9c>
 4002e48:	003fe606 	br	4002de4 <__alt_data_end+0xfc002de4>
		unsigned long m = n;
		n /= 16;
		char c = m - 16 * n;
		*str-- = c < 10 ? c + '0' : c + 'A' - 10;
	} while(n);
}
 4002e4c:	0001883a 	nop
 4002e50:	e037883a 	mov	sp,fp
 4002e54:	df000017 	ldw	fp,0(sp)
 4002e58:	dec00104 	addi	sp,sp,4
 4002e5c:	f800283a 	ret

04002e60 <_Z41__static_initialization_and_destruction_0ii>:
 4002e60:	defffb04 	addi	sp,sp,-20
 4002e64:	dfc00415 	stw	ra,16(sp)
 4002e68:	df000315 	stw	fp,12(sp)
 4002e6c:	df000304 	addi	fp,sp,12
 4002e70:	e13ffe15 	stw	r4,-8(fp)
 4002e74:	e17fff15 	stw	r5,-4(fp)
 4002e78:	e0bffe17 	ldw	r2,-8(fp)
 4002e7c:	10800058 	cmpnei	r2,r2,1
 4002e80:	1000091e 	bne	r2,zero,4002ea8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4002e84:	e0ffff17 	ldw	r3,-4(fp)
 4002e88:	00bfffd4 	movui	r2,65535
 4002e8c:	1880061e 	bne	r3,r2,4002ea8 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4002e90:	d8000015 	stw	zero,0(sp)
 4002e94:	000f883a 	mov	r7,zero
 4002e98:	000d883a 	mov	r6,zero
 4002e9c:	000b883a 	mov	r5,zero
 4002ea0:	d112d204 	addi	r4,gp,19272
 4002ea4:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
 4002ea8:	0001883a 	nop
 4002eac:	e037883a 	mov	sp,fp
 4002eb0:	dfc00117 	ldw	ra,4(sp)
 4002eb4:	df000017 	ldw	fp,0(sp)
 4002eb8:	dec00204 	addi	sp,sp,8
 4002ebc:	f800283a 	ret

04002ec0 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
 4002ec0:	defffe04 	addi	sp,sp,-8
 4002ec4:	dfc00115 	stw	ra,4(sp)
 4002ec8:	df000015 	stw	fp,0(sp)
 4002ecc:	d839883a 	mov	fp,sp
 4002ed0:	017fffd4 	movui	r5,65535
 4002ed4:	01000044 	movi	r4,1
 4002ed8:	4002e600 	call	4002e60 <_Z41__static_initialization_and_destruction_0ii>
 4002edc:	e037883a 	mov	sp,fp
 4002ee0:	dfc00117 	ldw	ra,4(sp)
 4002ee4:	df000017 	ldw	fp,0(sp)
 4002ee8:	dec00204 	addi	sp,sp,8
 4002eec:	f800283a 	ret

04002ef0 <_ZNK9IPAddresseqERKS_>:
    void print();

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() const { return _address.dword; };
    bool operator==(const IPAddress& addr) const { return _address.dword == addr._address.dword; };
 4002ef0:	defffd04 	addi	sp,sp,-12
 4002ef4:	df000215 	stw	fp,8(sp)
 4002ef8:	df000204 	addi	fp,sp,8
 4002efc:	e13ffe15 	stw	r4,-8(fp)
 4002f00:	e17fff15 	stw	r5,-4(fp)
 4002f04:	e0bffe17 	ldw	r2,-8(fp)
 4002f08:	10c00017 	ldw	r3,0(r2)
 4002f0c:	e0bfff17 	ldw	r2,-4(fp)
 4002f10:	10800017 	ldw	r2,0(r2)
 4002f14:	1885003a 	cmpeq	r2,r3,r2
 4002f18:	e037883a 	mov	sp,fp
 4002f1c:	df000017 	ldw	fp,0(sp)
 4002f20:	dec00104 	addi	sp,sp,4
 4002f24:	f800283a 	ret

04002f28 <_ZN11EthernetUDP8remoteIPEv>:
	// Return the next byte from the current packet without moving on to the next byte
	virtual int peek();
	virtual void flush(); // Finish reading the current packet

	// Return the IP address of the host who sent the current incoming packet
	virtual IPAddress remoteIP() { return _remoteIP; };
 4002f28:	defffe04 	addi	sp,sp,-8
 4002f2c:	df000115 	stw	fp,4(sp)
 4002f30:	df000104 	addi	fp,sp,4
 4002f34:	e13fff15 	stw	r4,-4(fp)
 4002f38:	e0bfff17 	ldw	r2,-4(fp)
 4002f3c:	10800217 	ldw	r2,8(r2)
 4002f40:	e037883a 	mov	sp,fp
 4002f44:	df000017 	ldw	fp,0(sp)
 4002f48:	dec00104 	addi	sp,sp,4
 4002f4c:	f800283a 	ret

04002f50 <_ZN11EthernetUDP10remotePortEv>:
	// Return the port of the host who sent the current incoming packet
	virtual uint16_t remotePort() { return _remotePort; };
 4002f50:	defffe04 	addi	sp,sp,-8
 4002f54:	df000115 	stw	fp,4(sp)
 4002f58:	df000104 	addi	fp,sp,4
 4002f5c:	e13fff15 	stw	r4,-4(fp)
 4002f60:	e0bfff17 	ldw	r2,-4(fp)
 4002f64:	1080030b 	ldhu	r2,12(r2)
 4002f68:	e037883a 	mov	sp,fp
 4002f6c:	df000017 	ldw	fp,0(sp)
 4002f70:	dec00104 	addi	sp,sp,4
 4002f74:	f800283a 	ret

04002f78 <_ZN9DNSClient5beginERK9IPAddress>:
#define INVALID_SERVER   -2
#define TRUNCATED        -3
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
 4002f78:	defffd04 	addi	sp,sp,-12
 4002f7c:	df000215 	stw	fp,8(sp)
 4002f80:	df000204 	addi	fp,sp,8
 4002f84:	e13ffe15 	stw	r4,-8(fp)
 4002f88:	e17fff15 	stw	r5,-4(fp)
	iDNSServer = aDNSServer;
 4002f8c:	e0bffe17 	ldw	r2,-8(fp)
 4002f90:	e0ffff17 	ldw	r3,-4(fp)
 4002f94:	18c00017 	ldw	r3,0(r3)
 4002f98:	10c00015 	stw	r3,0(r2)
	iRequestId = 0;
 4002f9c:	e0bffe17 	ldw	r2,-8(fp)
 4002fa0:	1000010d 	sth	zero,4(r2)
}
 4002fa4:	0001883a 	nop
 4002fa8:	e037883a 	mov	sp,fp
 4002fac:	df000017 	ldw	fp,0(sp)
 4002fb0:	dec00104 	addi	sp,sp,4
 4002fb4:	f800283a 	ret

04002fb8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:


int DNSClient::inet_aton(const char* address, IPAddress& result)
{
 4002fb8:	defffa04 	addi	sp,sp,-24
 4002fbc:	dfc00515 	stw	ra,20(sp)
 4002fc0:	df000415 	stw	fp,16(sp)
 4002fc4:	df000404 	addi	fp,sp,16
 4002fc8:	e13ffd15 	stw	r4,-12(fp)
 4002fcc:	e17ffe15 	stw	r5,-8(fp)
 4002fd0:	e1bfff15 	stw	r6,-4(fp)
	uint16_t acc = 0; // Accumulator
 4002fd4:	e03ffc0d 	sth	zero,-16(fp)
	uint8_t dots = 0;
 4002fd8:	e03ffc85 	stb	zero,-14(fp)

	while (*address) {
 4002fdc:	e0bffe17 	ldw	r2,-8(fp)
 4002fe0:	10800003 	ldbu	r2,0(r2)
 4002fe4:	10803fcc 	andi	r2,r2,255
 4002fe8:	1080201c 	xori	r2,r2,128
 4002fec:	10bfe004 	addi	r2,r2,-128
 4002ff0:	10002d26 	beq	r2,zero,40030a8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xf0>
		char c = *address++;
 4002ff4:	e0bffe17 	ldw	r2,-8(fp)
 4002ff8:	10c00044 	addi	r3,r2,1
 4002ffc:	e0fffe15 	stw	r3,-8(fp)
 4003000:	10800003 	ldbu	r2,0(r2)
 4003004:	e0bffcc5 	stb	r2,-13(fp)
		if (c >= '0' && c <= '9') {
 4003008:	e0bffcc7 	ldb	r2,-13(fp)
 400300c:	10800c10 	cmplti	r2,r2,48
 4003010:	10000f1e 	bne	r2,zero,4003050 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x98>
 4003014:	e0bffcc7 	ldb	r2,-13(fp)
 4003018:	10800e88 	cmpgei	r2,r2,58
 400301c:	10000c1e 	bne	r2,zero,4003050 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x98>
			acc = acc * 10 + (c - '0');
 4003020:	e0bffc0b 	ldhu	r2,-16(fp)
 4003024:	108002a4 	muli	r2,r2,10
 4003028:	1007883a 	mov	r3,r2
 400302c:	e0bffcc7 	ldb	r2,-13(fp)
 4003030:	1885883a 	add	r2,r3,r2
 4003034:	10bff404 	addi	r2,r2,-48
 4003038:	e0bffc0d 	sth	r2,-16(fp)
			if (acc > 255) {
 400303c:	e0bffc0b 	ldhu	r2,-16(fp)
 4003040:	10804030 	cmpltui	r2,r2,256
 4003044:	1000171e 	bne	r2,zero,40030a4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xec>
				// Value out of [0..255] range
				return 0;
 4003048:	0005883a 	mov	r2,zero
 400304c:	00002106 	br	40030d4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
			}
		} else if (c == '.') {
 4003050:	e0bffcc7 	ldb	r2,-13(fp)
 4003054:	10800b98 	cmpnei	r2,r2,46
 4003058:	1000101e 	bne	r2,zero,400309c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xe4>
			if (dots == 3) {
 400305c:	e0bffc83 	ldbu	r2,-14(fp)
 4003060:	108000d8 	cmpnei	r2,r2,3
 4003064:	1000021e 	bne	r2,zero,4003070 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xb8>
				// Too much dots (there must be 3 dots)
				return 0;
 4003068:	0005883a 	mov	r2,zero
 400306c:	00001906 	br	40030d4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
			}
			result[dots++] = acc;
 4003070:	e0bffc83 	ldbu	r2,-14(fp)
 4003074:	10c00044 	addi	r3,r2,1
 4003078:	e0fffc85 	stb	r3,-14(fp)
 400307c:	10803fcc 	andi	r2,r2,255
 4003080:	100b883a 	mov	r5,r2
 4003084:	e13fff17 	ldw	r4,-4(fp)
 4003088:	4003a940 	call	4003a94 <_ZN9IPAddressixEi>
 400308c:	e0fffc0b 	ldhu	r3,-16(fp)
 4003090:	10c00005 	stb	r3,0(r2)
			acc = 0;
 4003094:	e03ffc0d 	sth	zero,-16(fp)
 4003098:	003fd006 	br	4002fdc <__alt_data_end+0xfc002fdc>
		} else {
			// Invalid char
			return 0;
 400309c:	0005883a 	mov	r2,zero
 40030a0:	00000c06 	br	40030d4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
int DNSClient::inet_aton(const char* address, IPAddress& result)
{
	uint16_t acc = 0; // Accumulator
	uint8_t dots = 0;

	while (*address) {
 40030a4:	003fcd06 	br	4002fdc <__alt_data_end+0xfc002fdc>
			// Invalid char
			return 0;
		}
	}

	if (dots != 3) {
 40030a8:	e0bffc83 	ldbu	r2,-14(fp)
 40030ac:	108000e0 	cmpeqi	r2,r2,3
 40030b0:	1000021e 	bne	r2,zero,40030bc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x104>
		// Too few dots (there must be 3 dots)
		return 0;
 40030b4:	0005883a 	mov	r2,zero
 40030b8:	00000606 	br	40030d4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
	}
	result[3] = acc;
 40030bc:	014000c4 	movi	r5,3
 40030c0:	e13fff17 	ldw	r4,-4(fp)
 40030c4:	4003a940 	call	4003a94 <_ZN9IPAddressixEi>
 40030c8:	e0fffc0b 	ldhu	r3,-16(fp)
 40030cc:	10c00005 	stb	r3,0(r2)
	return 1;
 40030d0:	00800044 	movi	r2,1
}
 40030d4:	e037883a 	mov	sp,fp
 40030d8:	dfc00117 	ldw	ra,4(sp)
 40030dc:	df000017 	ldw	fp,0(sp)
 40030e0:	dec00204 	addi	sp,sp,8
 40030e4:	f800283a 	ret

040030e8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>:

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult, uint16_t timeout)
{
 40030e8:	defff604 	addi	sp,sp,-40
 40030ec:	dfc00915 	stw	ra,36(sp)
 40030f0:	df000815 	stw	fp,32(sp)
 40030f4:	dc000715 	stw	r16,28(sp)
 40030f8:	df000804 	addi	fp,sp,32
 40030fc:	e13ffb15 	stw	r4,-20(fp)
 4003100:	e17ffc15 	stw	r5,-16(fp)
 4003104:	e1bffd15 	stw	r6,-12(fp)
 4003108:	3805883a 	mov	r2,r7
 400310c:	e0bffe0d 	sth	r2,-8(fp)
	int ret = 0;
 4003110:	e03ff815 	stw	zero,-32(fp)

	// See if it's a numeric IP address
	if (inet_aton(aHostname, aResult)) {
 4003114:	e1bffd17 	ldw	r6,-12(fp)
 4003118:	e17ffc17 	ldw	r5,-16(fp)
 400311c:	e13ffb17 	ldw	r4,-20(fp)
 4003120:	4002fb80 	call	4002fb8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
 4003124:	1004c03a 	cmpne	r2,r2,zero
 4003128:	10803fcc 	andi	r2,r2,255
 400312c:	10000226 	beq	r2,zero,4003138 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x50>
		// It is, our work here is done
		return 1;
 4003130:	00800044 	movi	r2,1
 4003134:	00004a06 	br	4003260 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x178>
	}

	// Check we've got a valid DNS server to use
	if (iDNSServer == INADDR_NONE) {
 4003138:	e0bffb17 	ldw	r2,-20(fp)
 400313c:	d152d304 	addi	r5,gp,19276
 4003140:	1009883a 	mov	r4,r2
 4003144:	4002ef00 	call	4002ef0 <_ZNK9IPAddresseqERKS_>
 4003148:	10803fcc 	andi	r2,r2,255
 400314c:	10000226 	beq	r2,zero,4003158 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x70>
		return INVALID_SERVER;
 4003150:	00bfff84 	movi	r2,-2
 4003154:	00004206 	br	4003260 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x178>
	}
	
	// Find a socket to use
	if (iUdp.begin(1024+(clock() & 0xF)) == 1) {
 4003158:	e0bffb17 	ldw	r2,-20(fp)
 400315c:	14000204 	addi	r16,r2,8
 4003160:	400be6c0 	call	400be6c <clock>
 4003164:	108003cc 	andi	r2,r2,15
 4003168:	10810004 	addi	r2,r2,1024
 400316c:	10bfffcc 	andi	r2,r2,65535
 4003170:	100b883a 	mov	r5,r2
 4003174:	8009883a 	mov	r4,r16
 4003178:	400625c0 	call	400625c <_ZN11EthernetUDP5beginEt>
 400317c:	10803fcc 	andi	r2,r2,255
 4003180:	10800060 	cmpeqi	r2,r2,1
 4003184:	10803fcc 	andi	r2,r2,255
 4003188:	10003426 	beq	r2,zero,400325c <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x174>
		// Try up to three times
		int retries = 0;
 400318c:	e03ffa15 	stw	zero,-24(fp)
		// while ((retries < 3) && (ret <= 0)) {
		// Send DNS request
		ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
 4003190:	e0bffb17 	ldw	r2,-20(fp)
 4003194:	10c00204 	addi	r3,r2,8
 4003198:	e0bffb17 	ldw	r2,-20(fp)
 400319c:	01800d44 	movi	r6,53
 40031a0:	11400017 	ldw	r5,0(r2)
 40031a4:	1809883a 	mov	r4,r3
 40031a8:	40064540 	call	4006454 <_ZN11EthernetUDP11beginPacketE9IPAddresst>
 40031ac:	e0bff815 	stw	r2,-32(fp)
		if (ret != 0) {
 40031b0:	e0bff817 	ldw	r2,-32(fp)
 40031b4:	10002226 	beq	r2,zero,4003240 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
			// Now output the request data
			ret = BuildRequest(aHostname);
 40031b8:	e17ffc17 	ldw	r5,-16(fp)
 40031bc:	e13ffb17 	ldw	r4,-20(fp)
 40031c0:	40032780 	call	4003278 <_ZN9DNSClient12BuildRequestEPKc>
 40031c4:	10bfffcc 	andi	r2,r2,65535
 40031c8:	e0bff815 	stw	r2,-32(fp)
			if (ret != 0) {
 40031cc:	e0bff817 	ldw	r2,-32(fp)
 40031d0:	10001b26 	beq	r2,zero,4003240 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
				// And finally send the request
				ret = iUdp.endPacket();
 40031d4:	e0bffb17 	ldw	r2,-20(fp)
 40031d8:	10800204 	addi	r2,r2,8
 40031dc:	1009883a 	mov	r4,r2
 40031e0:	40064d40 	call	40064d4 <_ZN11EthernetUDP9endPacketEv>
 40031e4:	e0bff815 	stw	r2,-32(fp)
				if (ret != 0) {
 40031e8:	e0bff817 	ldw	r2,-32(fp)
 40031ec:	10001426 	beq	r2,zero,4003240 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
					// Now wait for a response
					int wait_retries = 0;
 40031f0:	e03ff915 	stw	zero,-28(fp)
					ret = TIMED_OUT;
 40031f4:	00bfffc4 	movi	r2,-1
 40031f8:	e0bff815 	stw	r2,-32(fp)
					while ((wait_retries < 3) && (ret == TIMED_OUT)) {
 40031fc:	e0bff917 	ldw	r2,-28(fp)
 4003200:	108000c8 	cmpgei	r2,r2,3
 4003204:	10000e1e 	bne	r2,zero,4003240 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
 4003208:	e0bff817 	ldw	r2,-32(fp)
 400320c:	10bfffd8 	cmpnei	r2,r2,-1
 4003210:	10000b1e 	bne	r2,zero,4003240 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
						ret = ProcessResponse(timeout, aResult);
 4003214:	e0bffe0b 	ldhu	r2,-8(fp)
 4003218:	e1bffd17 	ldw	r6,-12(fp)
 400321c:	100b883a 	mov	r5,r2
 4003220:	e13ffb17 	ldw	r4,-20(fp)
 4003224:	40034c00 	call	40034c0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress>
 4003228:	10bfffcc 	andi	r2,r2,65535
 400322c:	e0bff815 	stw	r2,-32(fp)
						wait_retries++;
 4003230:	e0bff917 	ldw	r2,-28(fp)
 4003234:	10800044 	addi	r2,r2,1
 4003238:	e0bff915 	stw	r2,-28(fp)
				ret = iUdp.endPacket();
				if (ret != 0) {
					// Now wait for a response
					int wait_retries = 0;
					ret = TIMED_OUT;
					while ((wait_retries < 3) && (ret == TIMED_OUT)) {
 400323c:	003fef06 	br	40031fc <__alt_data_end+0xfc0031fc>
						wait_retries++;
					}
				}
			}
		}
		retries++;
 4003240:	e0bffa17 	ldw	r2,-24(fp)
 4003244:	10800044 	addi	r2,r2,1
 4003248:	e0bffa15 	stw	r2,-24(fp)
		//}

		// We're done with the socket now
		iUdp.stop();
 400324c:	e0bffb17 	ldw	r2,-20(fp)
 4003250:	10800204 	addi	r2,r2,8
 4003254:	1009883a 	mov	r4,r2
 4003258:	40063300 	call	4006330 <_ZN11EthernetUDP4stopEv>
	}

	return ret;
 400325c:	e0bff817 	ldw	r2,-32(fp)
}
 4003260:	e6ffff04 	addi	sp,fp,-4
 4003264:	dfc00217 	ldw	ra,8(sp)
 4003268:	df000117 	ldw	fp,4(sp)
 400326c:	dc000017 	ldw	r16,0(sp)
 4003270:	dec00304 	addi	sp,sp,12
 4003274:	f800283a 	ret

04003278 <_ZN9DNSClient12BuildRequestEPKc>:

uint16_t DNSClient::BuildRequest(const char* aName)
{
 4003278:	defff904 	addi	sp,sp,-28
 400327c:	dfc00615 	stw	ra,24(sp)
 4003280:	df000515 	stw	fp,20(sp)
 4003284:	df000504 	addi	fp,sp,20
 4003288:	e13ffe15 	stw	r4,-8(fp)
 400328c:	e17fff15 	stw	r5,-4(fp)
	//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	//    |                    ARCOUNT                    |
	//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// As we only support one request at a time at present, we can simplify
	// some of this header
	iRequestId = clock(); // generate a random ID
 4003290:	400be6c0 	call	400be6c <clock>
 4003294:	1007883a 	mov	r3,r2
 4003298:	e0bffe17 	ldw	r2,-8(fp)
 400329c:	10c0010d 	sth	r3,4(r2)
	uint16_t twoByteBuffer;

	// FIXME We should also check that there's enough space available to write to, rather
	// FIXME than assume there's enough space (as the code does at present)
	iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
 40032a0:	e0bffe17 	ldw	r2,-8(fp)
 40032a4:	10c00204 	addi	r3,r2,8
 40032a8:	e0bffe17 	ldw	r2,-8(fp)
 40032ac:	10800104 	addi	r2,r2,4
 40032b0:	01800084 	movi	r6,2
 40032b4:	100b883a 	mov	r5,r2
 40032b8:	1809883a 	mov	r4,r3
 40032bc:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
 40032c0:	00800044 	movi	r2,1
 40032c4:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 40032c8:	e0bffe17 	ldw	r2,-8(fp)
 40032cc:	10800204 	addi	r2,r2,8
 40032d0:	e0fffd04 	addi	r3,fp,-12
 40032d4:	01800084 	movi	r6,2
 40032d8:	180b883a 	mov	r5,r3
 40032dc:	1009883a 	mov	r4,r2
 40032e0:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(1);  // One question record
 40032e4:	00804004 	movi	r2,256
 40032e8:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 40032ec:	e0bffe17 	ldw	r2,-8(fp)
 40032f0:	10800204 	addi	r2,r2,8
 40032f4:	e0fffd04 	addi	r3,fp,-12
 40032f8:	01800084 	movi	r6,2
 40032fc:	180b883a 	mov	r5,r3
 4003300:	1009883a 	mov	r4,r2
 4003304:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = 0;  // Zero answer records
 4003308:	e03ffd0d 	sth	zero,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 400330c:	e0bffe17 	ldw	r2,-8(fp)
 4003310:	10800204 	addi	r2,r2,8
 4003314:	e0fffd04 	addi	r3,fp,-12
 4003318:	01800084 	movi	r6,2
 400331c:	180b883a 	mov	r5,r3
 4003320:	1009883a 	mov	r4,r2
 4003324:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>

	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4003328:	e0bffe17 	ldw	r2,-8(fp)
 400332c:	10800204 	addi	r2,r2,8
 4003330:	e0fffd04 	addi	r3,fp,-12
 4003334:	01800084 	movi	r6,2
 4003338:	180b883a 	mov	r5,r3
 400333c:	1009883a 	mov	r4,r2
 4003340:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>
	// and zero additional records
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4003344:	e0bffe17 	ldw	r2,-8(fp)
 4003348:	10800204 	addi	r2,r2,8
 400334c:	e0fffd04 	addi	r3,fp,-12
 4003350:	01800084 	movi	r6,2
 4003354:	180b883a 	mov	r5,r3
 4003358:	1009883a 	mov	r4,r2
 400335c:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>

	// Build question
	const char* start =aName;
 4003360:	e0bfff17 	ldw	r2,-4(fp)
 4003364:	e0bffb15 	stw	r2,-20(fp)
	const char* end =start;
 4003368:	e0bffb17 	ldw	r2,-20(fp)
 400336c:	e0bffc15 	stw	r2,-16(fp)
	uint8_t len;
	// Run through the name being requested
	while (*end) {
 4003370:	e0bffc17 	ldw	r2,-16(fp)
 4003374:	10800003 	ldbu	r2,0(r2)
 4003378:	10803fcc 	andi	r2,r2,255
 400337c:	1080201c 	xori	r2,r2,128
 4003380:	10bfe004 	addi	r2,r2,-128
 4003384:	10002e26 	beq	r2,zero,4003440 <_ZN9DNSClient12BuildRequestEPKc+0x1c8>
		// Find out how long this section of the name is
		end = start;
 4003388:	e0bffb17 	ldw	r2,-20(fp)
 400338c:	e0bffc15 	stw	r2,-16(fp)
		while (*end && (*end != '.') ) {
 4003390:	e0bffc17 	ldw	r2,-16(fp)
 4003394:	10800003 	ldbu	r2,0(r2)
 4003398:	10803fcc 	andi	r2,r2,255
 400339c:	1080201c 	xori	r2,r2,128
 40033a0:	10bfe004 	addi	r2,r2,-128
 40033a4:	10000b26 	beq	r2,zero,40033d4 <_ZN9DNSClient12BuildRequestEPKc+0x15c>
 40033a8:	e0bffc17 	ldw	r2,-16(fp)
 40033ac:	10800003 	ldbu	r2,0(r2)
 40033b0:	10803fcc 	andi	r2,r2,255
 40033b4:	1080201c 	xori	r2,r2,128
 40033b8:	10bfe004 	addi	r2,r2,-128
 40033bc:	10800ba0 	cmpeqi	r2,r2,46
 40033c0:	1000041e 	bne	r2,zero,40033d4 <_ZN9DNSClient12BuildRequestEPKc+0x15c>
			end++;
 40033c4:	e0bffc17 	ldw	r2,-16(fp)
 40033c8:	10800044 	addi	r2,r2,1
 40033cc:	e0bffc15 	stw	r2,-16(fp)
	uint8_t len;
	// Run through the name being requested
	while (*end) {
		// Find out how long this section of the name is
		end = start;
		while (*end && (*end != '.') ) {
 40033d0:	003fef06 	br	4003390 <__alt_data_end+0xfc003390>
			end++;
		}

		if (end-start > 0) {
 40033d4:	e0fffc17 	ldw	r3,-16(fp)
 40033d8:	e0bffb17 	ldw	r2,-20(fp)
 40033dc:	1885c83a 	sub	r2,r3,r2
 40033e0:	0080130e 	bge	zero,r2,4003430 <_ZN9DNSClient12BuildRequestEPKc+0x1b8>
			// Write out the size of this section
			len = end-start;
 40033e4:	e0fffc17 	ldw	r3,-16(fp)
 40033e8:	e0bffb17 	ldw	r2,-20(fp)
 40033ec:	1885c83a 	sub	r2,r3,r2
 40033f0:	e0bffd85 	stb	r2,-10(fp)
			iUdp.write(&len, sizeof(len));
 40033f4:	e0bffe17 	ldw	r2,-8(fp)
 40033f8:	10800204 	addi	r2,r2,8
 40033fc:	e0fffd84 	addi	r3,fp,-10
 4003400:	01800044 	movi	r6,1
 4003404:	180b883a 	mov	r5,r3
 4003408:	1009883a 	mov	r4,r2
 400340c:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>
			// And then write out the section
			iUdp.write((uint8_t*)start, end-start);
 4003410:	e0bffe17 	ldw	r2,-8(fp)
 4003414:	11000204 	addi	r4,r2,8
 4003418:	e0fffc17 	ldw	r3,-16(fp)
 400341c:	e0bffb17 	ldw	r2,-20(fp)
 4003420:	1885c83a 	sub	r2,r3,r2
 4003424:	100d883a 	mov	r6,r2
 4003428:	e17ffb17 	ldw	r5,-20(fp)
 400342c:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>
		}
		start = end+1;
 4003430:	e0bffc17 	ldw	r2,-16(fp)
 4003434:	10800044 	addi	r2,r2,1
 4003438:	e0bffb15 	stw	r2,-20(fp)
	// Build question
	const char* start =aName;
	const char* end =start;
	uint8_t len;
	// Run through the name being requested
	while (*end) {
 400343c:	003fcc06 	br	4003370 <__alt_data_end+0xfc003370>
		start = end+1;
	}

	// We've got to the end of the question name, so
	// terminate it with a zero-length section
	len = 0;
 4003440:	e03ffd85 	stb	zero,-10(fp)
	iUdp.write(&len, sizeof(len));
 4003444:	e0bffe17 	ldw	r2,-8(fp)
 4003448:	10800204 	addi	r2,r2,8
 400344c:	e0fffd84 	addi	r3,fp,-10
 4003450:	01800044 	movi	r6,1
 4003454:	180b883a 	mov	r5,r3
 4003458:	1009883a 	mov	r4,r2
 400345c:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>
	// Finally the type and class of question
	twoByteBuffer = htons(TYPE_A);
 4003460:	00804004 	movi	r2,256
 4003464:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4003468:	e0bffe17 	ldw	r2,-8(fp)
 400346c:	10800204 	addi	r2,r2,8
 4003470:	e0fffd04 	addi	r3,fp,-12
 4003474:	01800084 	movi	r6,2
 4003478:	180b883a 	mov	r5,r3
 400347c:	1009883a 	mov	r4,r2
 4003480:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(CLASS_IN);  // Internet class of question
 4003484:	00804004 	movi	r2,256
 4003488:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 400348c:	e0bffe17 	ldw	r2,-8(fp)
 4003490:	10800204 	addi	r2,r2,8
 4003494:	e0fffd04 	addi	r3,fp,-12
 4003498:	01800084 	movi	r6,2
 400349c:	180b883a 	mov	r5,r3
 40034a0:	1009883a 	mov	r4,r2
 40034a4:	40065400 	call	4006540 <_ZN11EthernetUDP5writeEPKhj>
	// Success!  Everything buffered okay
	return 1;
 40034a8:	00800044 	movi	r2,1
}
 40034ac:	e037883a 	mov	sp,fp
 40034b0:	dfc00117 	ldw	ra,4(sp)
 40034b4:	df000017 	ldw	fp,0(sp)
 40034b8:	dec00204 	addi	sp,sp,8
 40034bc:	f800283a 	ret

040034c0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
 40034c0:	defff104 	addi	sp,sp,-60
 40034c4:	dfc00e15 	stw	ra,56(sp)
 40034c8:	df000d15 	stw	fp,52(sp)
 40034cc:	dc000c15 	stw	r16,48(sp)
 40034d0:	df000d04 	addi	fp,sp,52
 40034d4:	e13ffc15 	stw	r4,-16(fp)
 40034d8:	2805883a 	mov	r2,r5
 40034dc:	e1bffe15 	stw	r6,-8(fp)
 40034e0:	e0bffd0d 	sth	r2,-12(fp)
	uint32_t startTime = clock();
 40034e4:	400be6c0 	call	400be6c <clock>
 40034e8:	e0bff415 	stw	r2,-48(fp)

	// Wait for a response packet
	while (iUdp.parsePacket() <= 0) {
 40034ec:	e0bffc17 	ldw	r2,-16(fp)
 40034f0:	10800204 	addi	r2,r2,8
 40034f4:	1009883a 	mov	r4,r2
 40034f8:	40065c80 	call	40065c8 <_ZN11EthernetUDP11parsePacketEv>
 40034fc:	0084403a 	cmpge	r2,zero,r2
 4003500:	10803fcc 	andi	r2,r2,255
 4003504:	10000d26 	beq	r2,zero,400353c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x7c>
		if ((clock() - startTime) > aTimeout) {
 4003508:	400be6c0 	call	400be6c <clock>
 400350c:	1007883a 	mov	r3,r2
 4003510:	e0bff417 	ldw	r2,-48(fp)
 4003514:	1885c83a 	sub	r2,r3,r2
 4003518:	e0fffd0b 	ldhu	r3,-12(fp)
 400351c:	1885803a 	cmpltu	r2,r3,r2
 4003520:	10803fcc 	andi	r2,r2,255
 4003524:	10000226 	beq	r2,zero,4003530 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x70>
			return TIMED_OUT;
 4003528:	00bfffc4 	movi	r2,-1
 400352c:	00011c06 	br	40039a0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
		}
		usleep(50000);
 4003530:	0130d414 	movui	r4,50000
 4003534:	401cc880 	call	401cc88 <usleep>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
	uint32_t startTime = clock();

	// Wait for a response packet
	while (iUdp.parsePacket() <= 0) {
 4003538:	003fec06 	br	40034ec <__alt_data_end+0xfc0034ec>
		uint8_t  byte[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
		uint16_t word[DNS_HEADER_SIZE/2];
	} header;

	// Check that it's a response from the right server and the right port
	if ( (iDNSServer != iUdp.remoteIP()) || (iUdp.remotePort() != DNS_PORT) ) {
 400353c:	e0bffc17 	ldw	r2,-16(fp)
 4003540:	1009883a 	mov	r4,r2
 4003544:	4003a6c0 	call	4003a6c <_ZNK9IPAddresscvmEv>
 4003548:	1021883a 	mov	r16,r2
 400354c:	e0bffc17 	ldw	r2,-16(fp)
 4003550:	10800204 	addi	r2,r2,8
 4003554:	1009883a 	mov	r4,r2
 4003558:	4002f280 	call	4002f28 <_ZN11EthernetUDP8remoteIPEv>
 400355c:	e0bff615 	stw	r2,-40(fp)
 4003560:	e0bff604 	addi	r2,fp,-40
 4003564:	1009883a 	mov	r4,r2
 4003568:	4003a6c0 	call	4003a6c <_ZNK9IPAddresscvmEv>
 400356c:	8080071e 	bne	r16,r2,400358c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xcc>
 4003570:	e0bffc17 	ldw	r2,-16(fp)
 4003574:	10800204 	addi	r2,r2,8
 4003578:	1009883a 	mov	r4,r2
 400357c:	4002f500 	call	4002f50 <_ZN11EthernetUDP10remotePortEv>
 4003580:	10bfffcc 	andi	r2,r2,65535
 4003584:	10800d60 	cmpeqi	r2,r2,53
 4003588:	1000021e 	bne	r2,zero,4003594 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xd4>
 400358c:	00800044 	movi	r2,1
 4003590:	00000106 	br	4003598 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xd8>
 4003594:	0005883a 	mov	r2,zero
 4003598:	10803fcc 	andi	r2,r2,255
 400359c:	10000226 	beq	r2,zero,40035a8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xe8>
		// It's not from who we expected
		return INVALID_SERVER;
 40035a0:	00bfff84 	movi	r2,-2
 40035a4:	0000fe06 	br	40039a0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// Read through the rest of the response
	if (iUdp.available() < DNS_HEADER_SIZE) {
 40035a8:	e0bffc17 	ldw	r2,-16(fp)
 40035ac:	10800204 	addi	r2,r2,8
 40035b0:	1009883a 	mov	r4,r2
 40035b4:	40063040 	call	4006304 <_ZN11EthernetUDP9availableEv>
 40035b8:	10800310 	cmplti	r2,r2,12
 40035bc:	10803fcc 	andi	r2,r2,255
 40035c0:	10000226 	beq	r2,zero,40035cc <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x10c>
		return TRUNCATED;
 40035c4:	00bfff44 	movi	r2,-3
 40035c8:	0000f506 	br	40039a0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}
	iUdp.read(header.byte, DNS_HEADER_SIZE);
 40035cc:	e0bffc17 	ldw	r2,-16(fp)
 40035d0:	10800204 	addi	r2,r2,8
 40035d4:	e0fff704 	addi	r3,fp,-36
 40035d8:	01800304 	movi	r6,12
 40035dc:	180b883a 	mov	r5,r3
 40035e0:	1009883a 	mov	r4,r2
 40035e4:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>

	uint16_t header_flags = htons(header.word[1]);
 40035e8:	e0bff78b 	ldhu	r2,-34(fp)
 40035ec:	10bfffcc 	andi	r2,r2,65535
 40035f0:	1004923a 	slli	r2,r2,8
 40035f4:	1007883a 	mov	r3,r2
 40035f8:	e0bff78b 	ldhu	r2,-34(fp)
 40035fc:	10bfffcc 	andi	r2,r2,65535
 4003600:	1004d23a 	srli	r2,r2,8
 4003604:	1884b03a 	or	r2,r3,r2
 4003608:	e0bffa0d 	sth	r2,-24(fp)
	// Check that it's a response to this request
	if ((iRequestId != (header.word[0])) ||
 400360c:	e0bffc17 	ldw	r2,-16(fp)
 4003610:	10c0010b 	ldhu	r3,4(r2)
 4003614:	e0bff70b 	ldhu	r2,-36(fp)
 4003618:	18ffffcc 	andi	r3,r3,65535
 400361c:	10bfffcc 	andi	r2,r2,65535
 4003620:	1880051e 	bne	r3,r2,4003638 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x178>
	  ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) ) {
 4003624:	e0bffa0b 	ldhu	r2,-24(fp)
	}
	iUdp.read(header.byte, DNS_HEADER_SIZE);

	uint16_t header_flags = htons(header.word[1]);
	// Check that it's a response to this request
	if ((iRequestId != (header.word[0])) ||
 4003628:	10bfffcc 	andi	r2,r2,65535
 400362c:	10a0001c 	xori	r2,r2,32768
 4003630:	10a00004 	addi	r2,r2,-32768
 4003634:	10000616 	blt	r2,zero,4003650 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x190>
	  ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) ) {
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 4003638:	e0bffc17 	ldw	r2,-16(fp)
 400363c:	10800204 	addi	r2,r2,8
 4003640:	1009883a 	mov	r4,r2
 4003644:	40068e80 	call	40068e8 <_ZN11EthernetUDP5flushEv>
		return INVALID_RESPONSE;
 4003648:	00bfff04 	movi	r2,-4
 400364c:	0000d406 	br	40039a0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}
	// Check for any errors in the response (or in our request)
	// although we don't do anything to get round these
	if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) ) {
 4003650:	e0bffa0b 	ldhu	r2,-24(fp)
 4003654:	10bfffcc 	andi	r2,r2,65535
 4003658:	1080800c 	andi	r2,r2,512
 400365c:	1000041e 	bne	r2,zero,4003670 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1b0>
 4003660:	e0bffa0b 	ldhu	r2,-24(fp)
 4003664:	10bfffcc 	andi	r2,r2,65535
 4003668:	108003cc 	andi	r2,r2,15
 400366c:	10000626 	beq	r2,zero,4003688 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1c8>
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 4003670:	e0bffc17 	ldw	r2,-16(fp)
 4003674:	10800204 	addi	r2,r2,8
 4003678:	1009883a 	mov	r4,r2
 400367c:	40068e80 	call	40068e8 <_ZN11EthernetUDP5flushEv>
		return -5; //INVALID_RESPONSE;
 4003680:	00bffec4 	movi	r2,-5
 4003684:	0000c606 	br	40039a0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// And make sure we've got (at least) one answer
	uint16_t answerCount = htons(header.word[3]);
 4003688:	e0bff88b 	ldhu	r2,-30(fp)
 400368c:	10bfffcc 	andi	r2,r2,65535
 4003690:	1004923a 	slli	r2,r2,8
 4003694:	1007883a 	mov	r3,r2
 4003698:	e0bff88b 	ldhu	r2,-30(fp)
 400369c:	10bfffcc 	andi	r2,r2,65535
 40036a0:	1004d23a 	srli	r2,r2,8
 40036a4:	1884b03a 	or	r2,r3,r2
 40036a8:	e0bff50d 	sth	r2,-44(fp)
	if (answerCount == 0) {
 40036ac:	e0bff50b 	ldhu	r2,-44(fp)
 40036b0:	1000061e 	bne	r2,zero,40036cc <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x20c>
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 40036b4:	e0bffc17 	ldw	r2,-16(fp)
 40036b8:	10800204 	addi	r2,r2,8
 40036bc:	1009883a 	mov	r4,r2
 40036c0:	40068e80 	call	40068e8 <_ZN11EthernetUDP5flushEv>
		return -6; //INVALID_RESPONSE;
 40036c4:	00bffe84 	movi	r2,-6
 40036c8:	0000b506 	br	40039a0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
 40036cc:	e03ff30d 	sth	zero,-52(fp)
 40036d0:	e0fff30b 	ldhu	r3,-52(fp)
 40036d4:	e0bff80b 	ldhu	r2,-32(fp)
 40036d8:	10bfffcc 	andi	r2,r2,65535
 40036dc:	1004923a 	slli	r2,r2,8
 40036e0:	113fffcc 	andi	r4,r2,65535
 40036e4:	e0bff80b 	ldhu	r2,-32(fp)
 40036e8:	10bfffcc 	andi	r2,r2,65535
 40036ec:	1004d23a 	srli	r2,r2,8
 40036f0:	10bfffcc 	andi	r2,r2,65535
 40036f4:	2084b03a 	or	r2,r4,r2
 40036f8:	1880200e 	bge	r3,r2,400377c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x2bc>
		// Skip over the name
		uint8_t len;
		do {
			iUdp.read(&len, sizeof(len));
 40036fc:	e0bffc17 	ldw	r2,-16(fp)
 4003700:	10800204 	addi	r2,r2,8
 4003704:	e0fffa84 	addi	r3,fp,-22
 4003708:	01800044 	movi	r6,1
 400370c:	180b883a 	mov	r5,r3
 4003710:	1009883a 	mov	r4,r2
 4003714:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
			if (len > 0) {
 4003718:	e0bffa83 	ldbu	r2,-22(fp)
 400371c:	10803fcc 	andi	r2,r2,255
 4003720:	10000826 	beq	r2,zero,4003744 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x284>
				// Don't need to actually read the data out for the string, just
				// advance ptr to beyond it
				iUdp.read((uint8_t *)NULL, (size_t)len);
 4003724:	e0bffc17 	ldw	r2,-16(fp)
 4003728:	10800204 	addi	r2,r2,8
 400372c:	e0fffa83 	ldbu	r3,-22(fp)
 4003730:	18c03fcc 	andi	r3,r3,255
 4003734:	180d883a 	mov	r6,r3
 4003738:	000b883a 	mov	r5,zero
 400373c:	1009883a 	mov	r4,r2
 4003740:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
			}
		} while (len != 0);
 4003744:	e0bffa83 	ldbu	r2,-22(fp)
 4003748:	10803fcc 	andi	r2,r2,255
 400374c:	10000126 	beq	r2,zero,4003754 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x294>

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
		// Skip over the name
		uint8_t len;
		do {
 4003750:	003fea06 	br	40036fc <__alt_data_end+0xfc0036fc>
				iUdp.read((uint8_t *)NULL, (size_t)len);
			}
		} while (len != 0);

		// Now jump over the type and class
		iUdp.read((uint8_t *)NULL, 4);
 4003754:	e0bffc17 	ldw	r2,-16(fp)
 4003758:	10800204 	addi	r2,r2,8
 400375c:	01800104 	movi	r6,4
 4003760:	000b883a 	mov	r5,zero
 4003764:	1009883a 	mov	r4,r2
 4003768:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
		iUdp.flush(); // FIXME
		return -6; //INVALID_RESPONSE;
	}

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
 400376c:	e0bff30b 	ldhu	r2,-52(fp)
 4003770:	10800044 	addi	r2,r2,1
 4003774:	e0bff30d 	sth	r2,-52(fp)
 4003778:	003fd506 	br	40036d0 <__alt_data_end+0xfc0036d0>
	// Now we're up to the bit we're interested in, the answer
	// There might be more than one answer (although we'll just use the first
	// type A answer) and some authority and additional resource records but
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
 400377c:	e03ff38d 	sth	zero,-50(fp)
 4003780:	e0fff38b 	ldhu	r3,-50(fp)
 4003784:	e0bff50b 	ldhu	r2,-44(fp)
 4003788:	1880802e 	bgeu	r3,r2,400398c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4cc>
		// Skip the name
		uint8_t len;
		do {
			iUdp.read(&len, sizeof(len));
 400378c:	e0bffc17 	ldw	r2,-16(fp)
 4003790:	10800204 	addi	r2,r2,8
 4003794:	e0fffac4 	addi	r3,fp,-21
 4003798:	01800044 	movi	r6,1
 400379c:	180b883a 	mov	r5,r3
 40037a0:	1009883a 	mov	r4,r2
 40037a4:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
			if ((len & LABEL_COMPRESSION_MASK) == 0) {
 40037a8:	e0bffac3 	ldbu	r2,-21(fp)
 40037ac:	10803fcc 	andi	r2,r2,255
 40037b0:	1080300c 	andi	r2,r2,192
 40037b4:	10000c1e 	bne	r2,zero,40037e8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x328>
				// It's just a normal label
				if (len > 0) {
 40037b8:	e0bffac3 	ldbu	r2,-21(fp)
 40037bc:	10803fcc 	andi	r2,r2,255
 40037c0:	10001026 	beq	r2,zero,4003804 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x344>
					// And it's got a length
					// Don't need to actually read the data out for the string,
					// just advance ptr to beyond it
					iUdp.read((uint8_t *)NULL, len);
 40037c4:	e0bffc17 	ldw	r2,-16(fp)
 40037c8:	10800204 	addi	r2,r2,8
 40037cc:	e0fffac3 	ldbu	r3,-21(fp)
 40037d0:	18c03fcc 	andi	r3,r3,255
 40037d4:	180d883a 	mov	r6,r3
 40037d8:	000b883a 	mov	r5,zero
 40037dc:	1009883a 	mov	r4,r2
 40037e0:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
 40037e4:	00000706 	br	4003804 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x344>
				// says that a name is either a sequence of labels ended with a
				// 0 length octet or a pointer or a sequence of labels ending in
				// a pointer.  Either way, when we get here we're at the end of
				// the name
				// Skip over the pointer
				iUdp.read((uint8_t *)NULL, 1); // we don't care about the byte
 40037e8:	e0bffc17 	ldw	r2,-16(fp)
 40037ec:	10800204 	addi	r2,r2,8
 40037f0:	01800044 	movi	r6,1
 40037f4:	000b883a 	mov	r5,zero
 40037f8:	1009883a 	mov	r4,r2
 40037fc:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
				// And set len so that we drop out of the name loop
				len = 0;
 4003800:	e03ffac5 	stb	zero,-21(fp)
			}
		} while (len != 0);
 4003804:	e0bffac3 	ldbu	r2,-21(fp)
 4003808:	10803fcc 	andi	r2,r2,255
 400380c:	10000126 	beq	r2,zero,4003814 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x354>
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
		// Skip the name
		uint8_t len;
		do {
 4003810:	003fde06 	br	400378c <__alt_data_end+0xfc00378c>
		} while (len != 0);

		// Check the type and class
		uint16_t answerType;
		uint16_t answerClass;
		iUdp.read((uint8_t*)&answerType, sizeof(answerType));
 4003814:	e0bffc17 	ldw	r2,-16(fp)
 4003818:	10800204 	addi	r2,r2,8
 400381c:	e0fffb04 	addi	r3,fp,-20
 4003820:	01800084 	movi	r6,2
 4003824:	180b883a 	mov	r5,r3
 4003828:	1009883a 	mov	r4,r2
 400382c:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
		iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
 4003830:	e0bffc17 	ldw	r2,-16(fp)
 4003834:	10800204 	addi	r2,r2,8
 4003838:	e0fffb84 	addi	r3,fp,-18
 400383c:	01800084 	movi	r6,2
 4003840:	180b883a 	mov	r5,r3
 4003844:	1009883a 	mov	r4,r2
 4003848:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>

		// Ignore the Time-To-Live as we don't do any caching
		iUdp.read((uint8_t *)NULL, TTL_SIZE); // don't care about the returned bytes
 400384c:	e0bffc17 	ldw	r2,-16(fp)
 4003850:	10800204 	addi	r2,r2,8
 4003854:	01800104 	movi	r6,4
 4003858:	000b883a 	mov	r5,zero
 400385c:	1009883a 	mov	r4,r2
 4003860:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>

		// And read out the length of this answer
		// Don't need header_flags anymore, so we can reuse it here
		iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
 4003864:	e0bffc17 	ldw	r2,-16(fp)
 4003868:	10800204 	addi	r2,r2,8
 400386c:	e0fffa04 	addi	r3,fp,-24
 4003870:	01800084 	movi	r6,2
 4003874:	180b883a 	mov	r5,r3
 4003878:	1009883a 	mov	r4,r2
 400387c:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>

		if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) ) {
 4003880:	e0bffb0b 	ldhu	r2,-20(fp)
 4003884:	10bfffcc 	andi	r2,r2,65535
 4003888:	1004923a 	slli	r2,r2,8
 400388c:	10ffffcc 	andi	r3,r2,65535
 4003890:	e0bffb0b 	ldhu	r2,-20(fp)
 4003894:	10bfffcc 	andi	r2,r2,65535
 4003898:	1004d23a 	srli	r2,r2,8
 400389c:	10bfffcc 	andi	r2,r2,65535
 40038a0:	1884b03a 	or	r2,r3,r2
 40038a4:	10800058 	cmpnei	r2,r2,1
 40038a8:	1000261e 	bne	r2,zero,4003944 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x484>
 40038ac:	e0bffb8b 	ldhu	r2,-18(fp)
 40038b0:	10bfffcc 	andi	r2,r2,65535
 40038b4:	1004923a 	slli	r2,r2,8
 40038b8:	10ffffcc 	andi	r3,r2,65535
 40038bc:	e0bffb8b 	ldhu	r2,-18(fp)
 40038c0:	10bfffcc 	andi	r2,r2,65535
 40038c4:	1004d23a 	srli	r2,r2,8
 40038c8:	10bfffcc 	andi	r2,r2,65535
 40038cc:	1884b03a 	or	r2,r3,r2
 40038d0:	10800058 	cmpnei	r2,r2,1
 40038d4:	10001b1e 	bne	r2,zero,4003944 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x484>
			if (htons(header_flags) != 4) {
 40038d8:	e0bffa0b 	ldhu	r2,-24(fp)
 40038dc:	10bfffcc 	andi	r2,r2,65535
 40038e0:	1004923a 	slli	r2,r2,8
 40038e4:	10ffffcc 	andi	r3,r2,65535
 40038e8:	e0bffa0b 	ldhu	r2,-24(fp)
 40038ec:	10bfffcc 	andi	r2,r2,65535
 40038f0:	1004d23a 	srli	r2,r2,8
 40038f4:	10bfffcc 	andi	r2,r2,65535
 40038f8:	1884b03a 	or	r2,r3,r2
 40038fc:	10800120 	cmpeqi	r2,r2,4
 4003900:	1000061e 	bne	r2,zero,400391c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x45c>
				// It's a weird size
				// Mark the entire packet as read
				iUdp.flush(); // FIXME
 4003904:	e0bffc17 	ldw	r2,-16(fp)
 4003908:	10800204 	addi	r2,r2,8
 400390c:	1009883a 	mov	r4,r2
 4003910:	40068e80 	call	40068e8 <_ZN11EthernetUDP5flushEv>
				return -9;//INVALID_RESPONSE;
 4003914:	00bffdc4 	movi	r2,-9
 4003918:	00002106 	br	40039a0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
			}
			// FIXME: seems to lock up here on ESP8266, but why??
			iUdp.read(aAddress.raw_address(), 4);
 400391c:	e0bffc17 	ldw	r2,-16(fp)
 4003920:	14000204 	addi	r16,r2,8
 4003924:	e13ffe17 	ldw	r4,-8(fp)
 4003928:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 400392c:	01800104 	movi	r6,4
 4003930:	100b883a 	mov	r5,r2
 4003934:	8009883a 	mov	r4,r16
 4003938:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
			return SUCCESS;
 400393c:	00800044 	movi	r2,1
 4003940:	00001706 	br	40039a0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
		} else {
			// This isn't an answer type we're after, move onto the next one
			iUdp.read((uint8_t *)NULL, htons(header_flags));
 4003944:	e0bffc17 	ldw	r2,-16(fp)
 4003948:	11000204 	addi	r4,r2,8
 400394c:	e0bffa0b 	ldhu	r2,-24(fp)
 4003950:	10bfffcc 	andi	r2,r2,65535
 4003954:	1004923a 	slli	r2,r2,8
 4003958:	10ffffcc 	andi	r3,r2,65535
 400395c:	e0bffa0b 	ldhu	r2,-24(fp)
 4003960:	10bfffcc 	andi	r2,r2,65535
 4003964:	1004d23a 	srli	r2,r2,8
 4003968:	10bfffcc 	andi	r2,r2,65535
 400396c:	1884b03a 	or	r2,r3,r2
 4003970:	100d883a 	mov	r6,r2
 4003974:	000b883a 	mov	r5,zero
 4003978:	40067900 	call	4006790 <_ZN11EthernetUDP4readEPhj>
	// Now we're up to the bit we're interested in, the answer
	// There might be more than one answer (although we'll just use the first
	// type A answer) and some authority and additional resource records but
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
 400397c:	e0bff38b 	ldhu	r2,-50(fp)
 4003980:	10800044 	addi	r2,r2,1
 4003984:	e0bff38d 	sth	r2,-50(fp)
 4003988:	003f7d06 	br	4003780 <__alt_data_end+0xfc003780>
			iUdp.read((uint8_t *)NULL, htons(header_flags));
		}
	}

	// Mark the entire packet as read
	iUdp.flush(); // FIXME
 400398c:	e0bffc17 	ldw	r2,-16(fp)
 4003990:	10800204 	addi	r2,r2,8
 4003994:	1009883a 	mov	r4,r2
 4003998:	40068e80 	call	40068e8 <_ZN11EthernetUDP5flushEv>

	// If we get here then we haven't found an answer
	return -10; //INVALID_RESPONSE;
 400399c:	00bffd84 	movi	r2,-10
}
 40039a0:	e6ffff04 	addi	sp,fp,-4
 40039a4:	dfc00217 	ldw	ra,8(sp)
 40039a8:	df000117 	ldw	fp,4(sp)
 40039ac:	dc000017 	ldw	r16,0(sp)
 40039b0:	dec00304 	addi	sp,sp,12
 40039b4:	f800283a 	ret

040039b8 <_Z41__static_initialization_and_destruction_0ii>:
 40039b8:	defffb04 	addi	sp,sp,-20
 40039bc:	dfc00415 	stw	ra,16(sp)
 40039c0:	df000315 	stw	fp,12(sp)
 40039c4:	df000304 	addi	fp,sp,12
 40039c8:	e13ffe15 	stw	r4,-8(fp)
 40039cc:	e17fff15 	stw	r5,-4(fp)
 40039d0:	e0bffe17 	ldw	r2,-8(fp)
 40039d4:	10800058 	cmpnei	r2,r2,1
 40039d8:	1000091e 	bne	r2,zero,4003a00 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40039dc:	e0ffff17 	ldw	r3,-4(fp)
 40039e0:	00bfffd4 	movui	r2,65535
 40039e4:	1880061e 	bne	r3,r2,4003a00 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 40039e8:	d8000015 	stw	zero,0(sp)
 40039ec:	000f883a 	mov	r7,zero
 40039f0:	000d883a 	mov	r6,zero
 40039f4:	000b883a 	mov	r5,zero
 40039f8:	d112d304 	addi	r4,gp,19276
 40039fc:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
 4003a00:	0001883a 	nop
 4003a04:	e037883a 	mov	sp,fp
 4003a08:	dfc00117 	ldw	ra,4(sp)
 4003a0c:	df000017 	ldw	fp,0(sp)
 4003a10:	dec00204 	addi	sp,sp,8
 4003a14:	f800283a 	ret

04003a18 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
 4003a18:	defffe04 	addi	sp,sp,-8
 4003a1c:	dfc00115 	stw	ra,4(sp)
 4003a20:	df000015 	stw	fp,0(sp)
 4003a24:	d839883a 	mov	fp,sp
 4003a28:	017fffd4 	movui	r5,65535
 4003a2c:	01000044 	movi	r4,1
 4003a30:	40039b80 	call	40039b8 <_Z41__static_initialization_and_destruction_0ii>
 4003a34:	e037883a 	mov	sp,fp
 4003a38:	dfc00117 	ldw	ra,4(sp)
 4003a3c:	df000017 	ldw	fp,0(sp)
 4003a40:	dec00204 	addi	sp,sp,8
 4003a44:	f800283a 	ret

04003a48 <_ZN9IPAddress11raw_addressEv>:

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
 4003a48:	defffe04 	addi	sp,sp,-8
 4003a4c:	df000115 	stw	fp,4(sp)
 4003a50:	df000104 	addi	fp,sp,4
 4003a54:	e13fff15 	stw	r4,-4(fp)
 4003a58:	e0bfff17 	ldw	r2,-4(fp)
 4003a5c:	e037883a 	mov	sp,fp
 4003a60:	df000017 	ldw	fp,0(sp)
 4003a64:	dec00104 	addi	sp,sp,4
 4003a68:	f800283a 	ret

04003a6c <_ZNK9IPAddresscvmEv>:
    bool fromString(const char *address);
    void print();

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() const { return _address.dword; };
 4003a6c:	defffe04 	addi	sp,sp,-8
 4003a70:	df000115 	stw	fp,4(sp)
 4003a74:	df000104 	addi	fp,sp,4
 4003a78:	e13fff15 	stw	r4,-4(fp)
 4003a7c:	e0bfff17 	ldw	r2,-4(fp)
 4003a80:	10800017 	ldw	r2,0(r2)
 4003a84:	e037883a 	mov	sp,fp
 4003a88:	df000017 	ldw	fp,0(sp)
 4003a8c:	dec00104 	addi	sp,sp,4
 4003a90:	f800283a 	ret

04003a94 <_ZN9IPAddressixEi>:
    bool operator==(const IPAddress& addr) const { return _address.dword == addr._address.dword; };
    bool operator==(const uint8_t* addr) const;

    // Overloaded index operator to allow getting and setting individual octets of the address
    uint8_t operator[](int index) const { return _address.bytes[index]; };
    uint8_t& operator[](int index) { return _address.bytes[index]; };
 4003a94:	defffd04 	addi	sp,sp,-12
 4003a98:	df000215 	stw	fp,8(sp)
 4003a9c:	df000204 	addi	fp,sp,8
 4003aa0:	e13ffe15 	stw	r4,-8(fp)
 4003aa4:	e17fff15 	stw	r5,-4(fp)
 4003aa8:	e0fffe17 	ldw	r3,-8(fp)
 4003aac:	e0bfff17 	ldw	r2,-4(fp)
 4003ab0:	1885883a 	add	r2,r3,r2
 4003ab4:	e037883a 	mov	sp,fp
 4003ab8:	df000017 	ldw	fp,0(sp)
 4003abc:	dec00104 	addi	sp,sp,4
 4003ac0:	f800283a 	ret

04003ac4 <_ZN13EthernetClass5beginEPhmm>:

IPAddress EthernetClass::_dnsServerAddress;
DhcpClass* EthernetClass::_dhcp = NULL;

int EthernetClass::begin(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
 4003ac4:	deffdd04 	addi	sp,sp,-140
 4003ac8:	dfc02215 	stw	ra,136(sp)
 4003acc:	df002115 	stw	fp,132(sp)
 4003ad0:	ddc02015 	stw	r23,128(sp)
 4003ad4:	dd801f15 	stw	r22,124(sp)
 4003ad8:	dd401e15 	stw	r21,120(sp)
 4003adc:	dd001d15 	stw	r20,116(sp)
 4003ae0:	dcc01c15 	stw	r19,112(sp)
 4003ae4:	dc801b15 	stw	r18,108(sp)
 4003ae8:	dc401a15 	stw	r17,104(sp)
 4003aec:	dc001915 	stw	r16,100(sp)
 4003af0:	df002104 	addi	fp,sp,132
 4003af4:	e13fe515 	stw	r4,-108(fp)
 4003af8:	e17fe615 	stw	r5,-104(fp)
 4003afc:	e1bfe715 	stw	r6,-100(fp)
 4003b00:	00810074 	movhi	r2,1025
 4003b04:	10a8e804 	addi	r2,r2,-23648
 4003b08:	e0bfee15 	stw	r2,-72(fp)
 4003b0c:	008100b4 	movhi	r2,1026
 4003b10:	10bbc184 	addi	r2,r2,-4346
 4003b14:	e0bfef15 	stw	r2,-68(fp)
 4003b18:	e0bff004 	addi	r2,fp,-64
 4003b1c:	e0ffe004 	addi	r3,fp,-128
 4003b20:	10c00015 	stw	r3,0(r2)
 4003b24:	00c10034 	movhi	r3,1024
 4003b28:	18cf3704 	addi	r3,r3,15580
 4003b2c:	10c00115 	stw	r3,4(r2)
 4003b30:	16c00215 	stw	sp,8(r2)
 4003b34:	e0bfe804 	addi	r2,fp,-96
 4003b38:	1009883a 	mov	r4,r2
 4003b3c:	400bb3c0 	call	400bb3c <_Unwind_SjLj_Register>
	static DhcpClass s_dhcp;
 4003b40:	d092d704 	addi	r2,gp,19292
 4003b44:	10800003 	ldbu	r2,0(r2)
 4003b48:	10803fcc 	andi	r2,r2,255
 4003b4c:	1080201c 	xori	r2,r2,128
 4003b50:	10bfe004 	addi	r2,r2,-128
 4003b54:	10000d1e 	bne	r2,zero,4003b8c <_ZN13EthernetClass5beginEPhmm+0xc8>
 4003b58:	d112d704 	addi	r4,gp,19292
 4003b5c:	400adbc0 	call	400adbc <__cxa_guard_acquire>
 4003b60:	1004c03a 	cmpne	r2,r2,zero
 4003b64:	10803fcc 	andi	r2,r2,255
 4003b68:	10000826 	beq	r2,zero,4003b8c <_ZN13EthernetClass5beginEPhmm+0xc8>
 4003b6c:	e03ff505 	stb	zero,-44(fp)
 4003b70:	01010134 	movhi	r4,1028
 4003b74:	00800044 	movi	r2,1
 4003b78:	e0bfe915 	stw	r2,-92(fp)
 4003b7c:	2125f404 	addi	r4,r4,-26672
 4003b80:	4004a740 	call	4004a74 <_ZN9DhcpClassC1Ev>
 4003b84:	d112d704 	addi	r4,gp,19292
 4003b88:	400ae200 	call	400ae20 <__cxa_guard_release>
	_dhcp = &s_dhcp;
 4003b8c:	00810134 	movhi	r2,1028
 4003b90:	10a5f404 	addi	r2,r2,-26672
 4003b94:	d092d615 	stw	r2,19288(gp)

	// Initialise the basic info
	if (W5100.init() == 0) return 0;
 4003b98:	00bfffc4 	movi	r2,-1
 4003b9c:	e0bfe915 	stw	r2,-92(fp)
 4003ba0:	40089440 	call	4008944 <_ZN10W5100Class4initEv>
 4003ba4:	10803fcc 	andi	r2,r2,255
 4003ba8:	1005003a 	cmpeq	r2,r2,zero
 4003bac:	10803fcc 	andi	r2,r2,255
 4003bb0:	10000226 	beq	r2,zero,4003bbc <_ZN13EthernetClass5beginEPhmm+0xf8>
 4003bb4:	0005883a 	mov	r2,zero
 4003bb8:	00004606 	br	4003cd4 <_ZN13EthernetClass5beginEPhmm+0x210>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setMACAddress(mac);
 4003bbc:	00bfffc4 	movi	r2,-1
 4003bc0:	e0bfe915 	stw	r2,-92(fp)
 4003bc4:	e17fe517 	ldw	r5,-108(fp)
 4003bc8:	d112e084 	addi	r4,gp,19330
 4003bcc:	40046240 	call	4004624 <_ZN10W5100Class13setMACAddressEPKh>
	W5100.setIPAddress(IPAddress(0,0,0,0).raw_address());
 4003bd0:	e0bfe404 	addi	r2,fp,-112
 4003bd4:	d8000015 	stw	zero,0(sp)
 4003bd8:	000f883a 	mov	r7,zero
 4003bdc:	000d883a 	mov	r6,zero
 4003be0:	000b883a 	mov	r5,zero
 4003be4:	1009883a 	mov	r4,r2
 4003be8:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
 4003bec:	e0bfe404 	addi	r2,fp,-112
 4003bf0:	1009883a 	mov	r4,r2
 4003bf4:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 4003bf8:	100b883a 	mov	r5,r2
 4003bfc:	d112e084 	addi	r4,gp,19330
 4003c00:	40046940 	call	4004694 <_ZN10W5100Class12setIPAddressEPKh>
//	SPI_endTransaction();

	// Now try to get our config info from a DHCP server
	int ret = _dhcp->beginWithDHCP(mac, timeout, responseTimeout);
 4003c04:	d092d617 	ldw	r2,19288(gp)
 4003c08:	e1ffe717 	ldw	r7,-100(fp)
 4003c0c:	e1bfe617 	ldw	r6,-104(fp)
 4003c10:	e17fe517 	ldw	r5,-108(fp)
 4003c14:	1009883a 	mov	r4,r2
 4003c18:	4001a300 	call	4001a30 <_ZN9DhcpClass13beginWithDHCPEPhmm>
 4003c1c:	e0bfe015 	stw	r2,-128(fp)
	if (ret == 1) {
 4003c20:	e0bfe017 	ldw	r2,-128(fp)
 4003c24:	10800058 	cmpnei	r2,r2,1
 4003c28:	1000291e 	bne	r2,zero,4003cd0 <_ZN13EthernetClass5beginEPhmm+0x20c>
		// We've successfully found a DHCP server and got our configuration
		// info, so set things accordingly
//		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
		W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
 4003c2c:	d092d617 	ldw	r2,19288(gp)
 4003c30:	1009883a 	mov	r4,r2
 4003c34:	4002c700 	call	4002c70 <_ZN9DhcpClass10getLocalIpEv>
 4003c38:	e0bfe315 	stw	r2,-116(fp)
 4003c3c:	e0bfe304 	addi	r2,fp,-116
 4003c40:	1009883a 	mov	r4,r2
 4003c44:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 4003c48:	100b883a 	mov	r5,r2
 4003c4c:	d112e084 	addi	r4,gp,19330
 4003c50:	40046940 	call	4004694 <_ZN10W5100Class12setIPAddressEPKh>
		W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
 4003c54:	d092d617 	ldw	r2,19288(gp)
 4003c58:	1009883a 	mov	r4,r2
 4003c5c:	4002cf00 	call	4002cf0 <_ZN9DhcpClass12getGatewayIpEv>
 4003c60:	e0bfe215 	stw	r2,-120(fp)
 4003c64:	e0bfe204 	addi	r2,fp,-120
 4003c68:	1009883a 	mov	r4,r2
 4003c6c:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 4003c70:	100b883a 	mov	r5,r2
 4003c74:	d112e084 	addi	r4,gp,19330
 4003c78:	40045440 	call	4004544 <_ZN10W5100Class12setGatewayIpEPKh>
		W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
 4003c7c:	d092d617 	ldw	r2,19288(gp)
 4003c80:	1009883a 	mov	r4,r2
 4003c84:	4002cb00 	call	4002cb0 <_ZN9DhcpClass13getSubnetMaskEv>
 4003c88:	e0bfe115 	stw	r2,-124(fp)
 4003c8c:	e0bfe104 	addi	r2,fp,-124
 4003c90:	1009883a 	mov	r4,r2
 4003c94:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 4003c98:	100b883a 	mov	r5,r2
 4003c9c:	d112e084 	addi	r4,gp,19330
 4003ca0:	40045b40 	call	40045b4 <_ZN10W5100Class13setSubnetMaskEPKh>
//		SPI_endTransaction();
		_dnsServerAddress = _dhcp->getDnsServerIp();
 4003ca4:	d092d617 	ldw	r2,19288(gp)
 4003ca8:	1009883a 	mov	r4,r2
 4003cac:	4002d700 	call	4002d70 <_ZN9DhcpClass14getDnsServerIpEv>
 4003cb0:	d092d515 	stw	r2,19284(gp)
		socketPortRand(clock()/1000);
 4003cb4:	400be6c0 	call	400be6c <clock>
 4003cb8:	0140fa04 	movi	r5,1000
 4003cbc:	1009883a 	mov	r4,r2
 4003cc0:	400b8780 	call	400b878 <__udivsi3>
 4003cc4:	10bfffcc 	andi	r2,r2,65535
 4003cc8:	1009883a 	mov	r4,r2
 4003ccc:	4006af80 	call	4006af8 <_ZN13EthernetClass14socketPortRandEt>
	}
	return ret;
 4003cd0:	e0bfe017 	ldw	r2,-128(fp)
 4003cd4:	e0bff615 	stw	r2,-40(fp)
 4003cd8:	00000c06 	br	4003d0c <_ZN13EthernetClass5beginEPhmm+0x248>
 4003cdc:	e7002004 	addi	fp,fp,128
 4003ce0:	e0bfea17 	ldw	r2,-88(fp)
 4003ce4:	e0bff715 	stw	r2,-36(fp)
IPAddress EthernetClass::_dnsServerAddress;
DhcpClass* EthernetClass::_dhcp = NULL;

int EthernetClass::begin(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
	static DhcpClass s_dhcp;
 4003ce8:	e0bff503 	ldbu	r2,-44(fp)
 4003cec:	1000021e 	bne	r2,zero,4003cf8 <_ZN13EthernetClass5beginEPhmm+0x234>
 4003cf0:	d112d704 	addi	r4,gp,19292
 4003cf4:	400ae180 	call	400ae18 <__cxa_guard_abort>
 4003cf8:	e0fff717 	ldw	r3,-36(fp)
 4003cfc:	00bfffc4 	movi	r2,-1
 4003d00:	e0bfe915 	stw	r2,-92(fp)
 4003d04:	1809883a 	mov	r4,r3
 4003d08:	400bd380 	call	400bd38 <_Unwind_SjLj_Resume>
 4003d0c:	e0bfe804 	addi	r2,fp,-96
 4003d10:	1009883a 	mov	r4,r2
 4003d14:	400bb540 	call	400bb54 <_Unwind_SjLj_Unregister>
//		SPI_endTransaction();
		_dnsServerAddress = _dhcp->getDnsServerIp();
		socketPortRand(clock()/1000);
	}
	return ret;
}
 4003d18:	e0bff617 	ldw	r2,-40(fp)
 4003d1c:	e6fff804 	addi	sp,fp,-32
 4003d20:	dfc00917 	ldw	ra,36(sp)
 4003d24:	df000817 	ldw	fp,32(sp)
 4003d28:	ddc00717 	ldw	r23,28(sp)
 4003d2c:	dd800617 	ldw	r22,24(sp)
 4003d30:	dd400517 	ldw	r21,20(sp)
 4003d34:	dd000417 	ldw	r20,16(sp)
 4003d38:	dcc00317 	ldw	r19,12(sp)
 4003d3c:	dc800217 	ldw	r18,8(sp)
 4003d40:	dc400117 	ldw	r17,4(sp)
 4003d44:	dc000017 	ldw	r16,0(sp)
 4003d48:	dec00a04 	addi	sp,sp,40
 4003d4c:	f800283a 	ret

04003d50 <_ZN13EthernetClass5beginEPh9IPAddress>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip)
{
 4003d50:	defffb04 	addi	sp,sp,-20
 4003d54:	dfc00415 	stw	ra,16(sp)
 4003d58:	df000315 	stw	fp,12(sp)
 4003d5c:	df000304 	addi	fp,sp,12
 4003d60:	e13ffe15 	stw	r4,-8(fp)
 4003d64:	e17fff15 	stw	r5,-4(fp)
	// Assume the DNS server will be the machine on the same network as the local IP
	// but with last octet being '1'
	IPAddress dns = ip;
 4003d68:	e0bfff17 	ldw	r2,-4(fp)
 4003d6c:	e0bffd15 	stw	r2,-12(fp)
	dns[3] = 1;
 4003d70:	014000c4 	movi	r5,3
 4003d74:	e13ffd04 	addi	r4,fp,-12
 4003d78:	4003a940 	call	4003a94 <_ZN9IPAddressixEi>
 4003d7c:	1007883a 	mov	r3,r2
 4003d80:	00800044 	movi	r2,1
 4003d84:	18800005 	stb	r2,0(r3)
	begin(mac, ip, dns);
 4003d88:	e1bffd17 	ldw	r6,-12(fp)
 4003d8c:	e17fff17 	ldw	r5,-4(fp)
 4003d90:	e13ffe17 	ldw	r4,-8(fp)
 4003d94:	4003db00 	call	4003db0 <_ZN13EthernetClass5beginEPh9IPAddressS1_>
}
 4003d98:	0001883a 	nop
 4003d9c:	e037883a 	mov	sp,fp
 4003da0:	dfc00117 	ldw	ra,4(sp)
 4003da4:	df000017 	ldw	fp,0(sp)
 4003da8:	dec00204 	addi	sp,sp,8
 4003dac:	f800283a 	ret

04003db0 <_ZN13EthernetClass5beginEPh9IPAddressS1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns)
{
 4003db0:	defffa04 	addi	sp,sp,-24
 4003db4:	dfc00515 	stw	ra,20(sp)
 4003db8:	df000415 	stw	fp,16(sp)
 4003dbc:	df000404 	addi	fp,sp,16
 4003dc0:	e13ffd15 	stw	r4,-12(fp)
 4003dc4:	e17ffe15 	stw	r5,-8(fp)
 4003dc8:	e1bfff15 	stw	r6,-4(fp)
	// Assume the gateway will be the machine on the same network as the local IP
	// but with last octet being '1'
	IPAddress gateway = ip;
 4003dcc:	e0bffe17 	ldw	r2,-8(fp)
 4003dd0:	e0bffc15 	stw	r2,-16(fp)
	gateway[3] = 1;
 4003dd4:	014000c4 	movi	r5,3
 4003dd8:	e13ffc04 	addi	r4,fp,-16
 4003ddc:	4003a940 	call	4003a94 <_ZN9IPAddressixEi>
 4003de0:	1007883a 	mov	r3,r2
 4003de4:	00800044 	movi	r2,1
 4003de8:	18800005 	stb	r2,0(r3)
	begin(mac, ip, dns, gateway);
 4003dec:	e1fffc17 	ldw	r7,-16(fp)
 4003df0:	e1bfff17 	ldw	r6,-4(fp)
 4003df4:	e17ffe17 	ldw	r5,-8(fp)
 4003df8:	e13ffd17 	ldw	r4,-12(fp)
 4003dfc:	4003e180 	call	4003e18 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>
}
 4003e00:	0001883a 	nop
 4003e04:	e037883a 	mov	sp,fp
 4003e08:	dfc00117 	ldw	ra,4(sp)
 4003e0c:	df000017 	ldw	fp,0(sp)
 4003e10:	dec00204 	addi	sp,sp,8
 4003e14:	f800283a 	ret

04003e18 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway)
{
 4003e18:	defff804 	addi	sp,sp,-32
 4003e1c:	dfc00715 	stw	ra,28(sp)
 4003e20:	df000615 	stw	fp,24(sp)
 4003e24:	df000604 	addi	fp,sp,24
 4003e28:	e13ffc15 	stw	r4,-16(fp)
 4003e2c:	e17ffd15 	stw	r5,-12(fp)
 4003e30:	e1bffe15 	stw	r6,-8(fp)
 4003e34:	e1ffff15 	stw	r7,-4(fp)
	IPAddress subnet(255, 255, 255, 0);
 4003e38:	d8000015 	stw	zero,0(sp)
 4003e3c:	01c03fc4 	movi	r7,255
 4003e40:	01803fc4 	movi	r6,255
 4003e44:	01403fc4 	movi	r5,255
 4003e48:	e13ffb04 	addi	r4,fp,-20
 4003e4c:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
	begin(mac, ip, dns, gateway, subnet);
 4003e50:	e0bffb17 	ldw	r2,-20(fp)
 4003e54:	d8800015 	stw	r2,0(sp)
 4003e58:	e1ffff17 	ldw	r7,-4(fp)
 4003e5c:	e1bffe17 	ldw	r6,-8(fp)
 4003e60:	e17ffd17 	ldw	r5,-12(fp)
 4003e64:	e13ffc17 	ldw	r4,-16(fp)
 4003e68:	4003e840 	call	4003e84 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
}
 4003e6c:	0001883a 	nop
 4003e70:	e037883a 	mov	sp,fp
 4003e74:	dfc00117 	ldw	ra,4(sp)
 4003e78:	df000017 	ldw	fp,0(sp)
 4003e7c:	dec00204 	addi	sp,sp,8
 4003e80:	f800283a 	ret

04003e84 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway, IPAddress subnet)
{
 4003e84:	defffa04 	addi	sp,sp,-24
 4003e88:	dfc00515 	stw	ra,20(sp)
 4003e8c:	df000415 	stw	fp,16(sp)
 4003e90:	df000404 	addi	fp,sp,16
 4003e94:	e13ffc15 	stw	r4,-16(fp)
 4003e98:	e17ffd15 	stw	r5,-12(fp)
 4003e9c:	e1bffe15 	stw	r6,-8(fp)
 4003ea0:	e1ffff15 	stw	r7,-4(fp)
	if (W5100.init() == 0) return;
 4003ea4:	40089440 	call	4008944 <_ZN10W5100Class4initEv>
 4003ea8:	10803fcc 	andi	r2,r2,255
 4003eac:	1005003a 	cmpeq	r2,r2,zero
 4003eb0:	10803fcc 	andi	r2,r2,255
 4003eb4:	10001a1e 	bne	r2,zero,4003f20 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0x9c>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setMACAddress(mac);
 4003eb8:	e17ffc17 	ldw	r5,-16(fp)
 4003ebc:	d112e084 	addi	r4,gp,19330
 4003ec0:	40046240 	call	4004624 <_ZN10W5100Class13setMACAddressEPKh>
//#ifdef ESP8266
	W5100.setIPAddress(&ip[0]);
 4003ec4:	e0bffd04 	addi	r2,fp,-12
 4003ec8:	000b883a 	mov	r5,zero
 4003ecc:	1009883a 	mov	r4,r2
 4003ed0:	4003a940 	call	4003a94 <_ZN9IPAddressixEi>
 4003ed4:	100b883a 	mov	r5,r2
 4003ed8:	d112e084 	addi	r4,gp,19330
 4003edc:	40046940 	call	4004694 <_ZN10W5100Class12setIPAddressEPKh>
	W5100.setGatewayIp(&gateway[0]);
 4003ee0:	e0bfff04 	addi	r2,fp,-4
 4003ee4:	000b883a 	mov	r5,zero
 4003ee8:	1009883a 	mov	r4,r2
 4003eec:	4003a940 	call	4003a94 <_ZN9IPAddressixEi>
 4003ef0:	100b883a 	mov	r5,r2
 4003ef4:	d112e084 	addi	r4,gp,19330
 4003ef8:	40045440 	call	4004544 <_ZN10W5100Class12setGatewayIpEPKh>
	W5100.setSubnetMask(&subnet[0]);
 4003efc:	000b883a 	mov	r5,zero
 4003f00:	e1000204 	addi	r4,fp,8
 4003f04:	4003a940 	call	4003a94 <_ZN9IPAddressixEi>
 4003f08:	100b883a 	mov	r5,r2
 4003f0c:	d112e084 	addi	r4,gp,19330
 4003f10:	40045b40 	call	40045b4 <_ZN10W5100Class13setSubnetMaskEPKh>
//	W5100.setIPAddress(ip._address);
//	W5100.setGatewayIp(gateway._address);
//	W5100.setSubnetMask(subnet._address);
//#endif
//	SPI_endTransaction();
	_dnsServerAddress = dns;
 4003f14:	e0bffe17 	ldw	r2,-8(fp)
 4003f18:	d092d515 	stw	r2,19284(gp)
 4003f1c:	00000106 	br	4003f24 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0xa0>
	begin(mac, ip, dns, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway, IPAddress subnet)
{
	if (W5100.init() == 0) return;
 4003f20:	0001883a 	nop
//	W5100.setGatewayIp(gateway._address);
//	W5100.setSubnetMask(subnet._address);
//#endif
//	SPI_endTransaction();
	_dnsServerAddress = dns;
}
 4003f24:	e037883a 	mov	sp,fp
 4003f28:	dfc00117 	ldw	ra,4(sp)
 4003f2c:	df000017 	ldw	fp,0(sp)
 4003f30:	dec00204 	addi	sp,sp,8
 4003f34:	f800283a 	ret

04003f38 <_ZN13EthernetClass4initEh>:

void EthernetClass::init(uint8_t sspin)
{
 4003f38:	defffd04 	addi	sp,sp,-12
 4003f3c:	dfc00215 	stw	ra,8(sp)
 4003f40:	df000115 	stw	fp,4(sp)
 4003f44:	df000104 	addi	fp,sp,4
 4003f48:	2005883a 	mov	r2,r4
 4003f4c:	e0bfff05 	stb	r2,-4(fp)
	W5100.setSS(sspin);
 4003f50:	e0bfff03 	ldbu	r2,-4(fp)
 4003f54:	1009883a 	mov	r4,r2
 4003f58:	4004a440 	call	4004a44 <_ZN10W5100Class5setSSEh>
}
 4003f5c:	0001883a 	nop
 4003f60:	e037883a 	mov	sp,fp
 4003f64:	dfc00117 	ldw	ra,4(sp)
 4003f68:	df000017 	ldw	fp,0(sp)
 4003f6c:	dec00204 	addi	sp,sp,8
 4003f70:	f800283a 	ret

04003f74 <_ZN13EthernetClass10linkStatusEv>:

EthernetLinkStatus EthernetClass::linkStatus()
{
 4003f74:	defffe04 	addi	sp,sp,-8
 4003f78:	dfc00115 	stw	ra,4(sp)
 4003f7c:	df000015 	stw	fp,0(sp)
 4003f80:	d839883a 	mov	fp,sp
	switch (W5100.getLinkStatus()) {
 4003f84:	4008d640 	call	4008d64 <_ZN10W5100Class13getLinkStatusEv>
 4003f88:	10c00060 	cmpeqi	r3,r2,1
 4003f8c:	1800051e 	bne	r3,zero,4003fa4 <_ZN13EthernetClass10linkStatusEv+0x30>
 4003f90:	10c000a0 	cmpeqi	r3,r2,2
 4003f94:	1800051e 	bne	r3,zero,4003fac <_ZN13EthernetClass10linkStatusEv+0x38>
 4003f98:	1000061e 	bne	r2,zero,4003fb4 <_ZN13EthernetClass10linkStatusEv+0x40>
		case UNKNOWN:  return Unknown;
 4003f9c:	0005883a 	mov	r2,zero
 4003fa0:	00000506 	br	4003fb8 <_ZN13EthernetClass10linkStatusEv+0x44>
		case LINK_ON:  return LinkON;
 4003fa4:	00800044 	movi	r2,1
 4003fa8:	00000306 	br	4003fb8 <_ZN13EthernetClass10linkStatusEv+0x44>
		case LINK_OFF: return LinkOFF;
 4003fac:	00800084 	movi	r2,2
 4003fb0:	00000106 	br	4003fb8 <_ZN13EthernetClass10linkStatusEv+0x44>
		default:       return Unknown;
 4003fb4:	0005883a 	mov	r2,zero
	}
}
 4003fb8:	e037883a 	mov	sp,fp
 4003fbc:	dfc00117 	ldw	ra,4(sp)
 4003fc0:	df000017 	ldw	fp,0(sp)
 4003fc4:	dec00204 	addi	sp,sp,8
 4003fc8:	f800283a 	ret

04003fcc <_ZN13EthernetClass14hardwareStatusEv>:

EthernetHardwareStatus EthernetClass::hardwareStatus()
{
 4003fcc:	defffe04 	addi	sp,sp,-8
 4003fd0:	dfc00115 	stw	ra,4(sp)
 4003fd4:	df000015 	stw	fp,0(sp)
 4003fd8:	d839883a 	mov	fp,sp
	switch (W5100.getChip()) {
 4003fdc:	4004a240 	call	4004a24 <_ZN10W5100Class7getChipEv>
 4003fe0:	10803fcc 	andi	r2,r2,255
 4003fe4:	10c00d20 	cmpeqi	r3,r2,52
 4003fe8:	1800061e 	bne	r3,zero,4004004 <_ZN13EthernetClass14hardwareStatusEv+0x38>
 4003fec:	10c00de0 	cmpeqi	r3,r2,55
 4003ff0:	1800061e 	bne	r3,zero,400400c <_ZN13EthernetClass14hardwareStatusEv+0x40>
 4003ff4:	10800ce0 	cmpeqi	r2,r2,51
 4003ff8:	10000626 	beq	r2,zero,4004014 <_ZN13EthernetClass14hardwareStatusEv+0x48>
		case 51: return EthernetW5100;
 4003ffc:	00800044 	movi	r2,1
 4004000:	00000506 	br	4004018 <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		case 52: return EthernetW5200;
 4004004:	00800084 	movi	r2,2
 4004008:	00000306 	br	4004018 <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		case 55: return EthernetW5500;
 400400c:	008000c4 	movi	r2,3
 4004010:	00000106 	br	4004018 <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		default: return EthernetNoHardware;
 4004014:	0005883a 	mov	r2,zero
	}
}
 4004018:	e037883a 	mov	sp,fp
 400401c:	dfc00117 	ldw	ra,4(sp)
 4004020:	df000017 	ldw	fp,0(sp)
 4004024:	dec00204 	addi	sp,sp,8
 4004028:	f800283a 	ret

0400402c <_ZN13EthernetClass8maintainEv>:

int EthernetClass::maintain()
{
 400402c:	defffa04 	addi	sp,sp,-24
 4004030:	dfc00515 	stw	ra,20(sp)
 4004034:	df000415 	stw	fp,16(sp)
 4004038:	df000404 	addi	fp,sp,16
	int rc = DHCP_CHECK_NONE;
 400403c:	e03ffc15 	stw	zero,-16(fp)
	if (_dhcp != NULL) {
 4004040:	d092d617 	ldw	r2,19288(gp)
 4004044:	10002f26 	beq	r2,zero,4004104 <_ZN13EthernetClass8maintainEv+0xd8>
		// we have a pointer to dhcp, use it
		rc = _dhcp->checkLease();
 4004048:	d092d617 	ldw	r2,19288(gp)
 400404c:	1009883a 	mov	r4,r2
 4004050:	4002ae40 	call	4002ae4 <_ZN9DhcpClass10checkLeaseEv>
 4004054:	e0bffc15 	stw	r2,-16(fp)
		switch (rc) {
 4004058:	e0bffc17 	ldw	r2,-16(fp)
 400405c:	10c000a0 	cmpeqi	r3,r2,2
 4004060:	1800041e 	bne	r3,zero,4004074 <_ZN13EthernetClass8maintainEv+0x48>
 4004064:	10c00120 	cmpeqi	r3,r2,4
 4004068:	1800021e 	bne	r3,zero,4004074 <_ZN13EthernetClass8maintainEv+0x48>
 400406c:	10002426 	beq	r2,zero,4004100 <_ZN13EthernetClass8maintainEv+0xd4>
//			SPI_endTransaction();
			_dnsServerAddress = _dhcp->getDnsServerIp();
			break;
		default:
			//this is actually an error, it will retry though
			break;
 4004070:	00002406 	br	4004104 <_ZN13EthernetClass8maintainEv+0xd8>
			break;
		case DHCP_CHECK_RENEW_OK:
		case DHCP_CHECK_REBIND_OK:
			//we might have got a new IP.
//			SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
			W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
 4004074:	d092d617 	ldw	r2,19288(gp)
 4004078:	1009883a 	mov	r4,r2
 400407c:	4002c700 	call	4002c70 <_ZN9DhcpClass10getLocalIpEv>
 4004080:	e0bfff15 	stw	r2,-4(fp)
 4004084:	e0bfff04 	addi	r2,fp,-4
 4004088:	1009883a 	mov	r4,r2
 400408c:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 4004090:	100b883a 	mov	r5,r2
 4004094:	d112e084 	addi	r4,gp,19330
 4004098:	40046940 	call	4004694 <_ZN10W5100Class12setIPAddressEPKh>
			W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
 400409c:	d092d617 	ldw	r2,19288(gp)
 40040a0:	1009883a 	mov	r4,r2
 40040a4:	4002cf00 	call	4002cf0 <_ZN9DhcpClass12getGatewayIpEv>
 40040a8:	e0bffe15 	stw	r2,-8(fp)
 40040ac:	e0bffe04 	addi	r2,fp,-8
 40040b0:	1009883a 	mov	r4,r2
 40040b4:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 40040b8:	100b883a 	mov	r5,r2
 40040bc:	d112e084 	addi	r4,gp,19330
 40040c0:	40045440 	call	4004544 <_ZN10W5100Class12setGatewayIpEPKh>
			W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
 40040c4:	d092d617 	ldw	r2,19288(gp)
 40040c8:	1009883a 	mov	r4,r2
 40040cc:	4002cb00 	call	4002cb0 <_ZN9DhcpClass13getSubnetMaskEv>
 40040d0:	e0bffd15 	stw	r2,-12(fp)
 40040d4:	e0bffd04 	addi	r2,fp,-12
 40040d8:	1009883a 	mov	r4,r2
 40040dc:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 40040e0:	100b883a 	mov	r5,r2
 40040e4:	d112e084 	addi	r4,gp,19330
 40040e8:	40045b40 	call	40045b4 <_ZN10W5100Class13setSubnetMaskEPKh>
//			SPI_endTransaction();
			_dnsServerAddress = _dhcp->getDnsServerIp();
 40040ec:	d092d617 	ldw	r2,19288(gp)
 40040f0:	1009883a 	mov	r4,r2
 40040f4:	4002d700 	call	4002d70 <_ZN9DhcpClass14getDnsServerIpEv>
 40040f8:	d092d515 	stw	r2,19284(gp)
			break;
 40040fc:	00000106 	br	4004104 <_ZN13EthernetClass8maintainEv+0xd8>
		// we have a pointer to dhcp, use it
		rc = _dhcp->checkLease();
		switch (rc) {
		case DHCP_CHECK_NONE:
			//nothing done
			break;
 4004100:	0001883a 	nop
		default:
			//this is actually an error, it will retry though
			break;
		}
	}
	return rc;
 4004104:	e0bffc17 	ldw	r2,-16(fp)
}
 4004108:	e037883a 	mov	sp,fp
 400410c:	dfc00117 	ldw	ra,4(sp)
 4004110:	df000017 	ldw	fp,0(sp)
 4004114:	dec00204 	addi	sp,sp,8
 4004118:	f800283a 	ret

0400411c <_ZN13EthernetClass10MACAddressEPh>:


void EthernetClass::MACAddress(uint8_t *mac_address)
{
 400411c:	defffd04 	addi	sp,sp,-12
 4004120:	dfc00215 	stw	ra,8(sp)
 4004124:	df000115 	stw	fp,4(sp)
 4004128:	df000104 	addi	fp,sp,4
 400412c:	e13fff15 	stw	r4,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getMACAddress(mac_address);
 4004130:	e17fff17 	ldw	r5,-4(fp)
 4004134:	d112e084 	addi	r4,gp,19330
 4004138:	400465c0 	call	400465c <_ZN10W5100Class13getMACAddressEPh>
//	SPI_endTransaction();
}
 400413c:	0001883a 	nop
 4004140:	e037883a 	mov	sp,fp
 4004144:	dfc00117 	ldw	ra,4(sp)
 4004148:	df000017 	ldw	fp,0(sp)
 400414c:	dec00204 	addi	sp,sp,8
 4004150:	f800283a 	ret

04004154 <_ZN13EthernetClass7localIPEv>:

IPAddress EthernetClass::localIP()
{
 4004154:	defffd04 	addi	sp,sp,-12
 4004158:	dfc00215 	stw	ra,8(sp)
 400415c:	df000115 	stw	fp,4(sp)
 4004160:	df000104 	addi	fp,sp,4
	IPAddress ret;
 4004164:	e13fff04 	addi	r4,fp,-4
 4004168:	400854c0 	call	400854c <_ZN9IPAddressC1Ev>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getIPAddress(ret.raw_address());
 400416c:	e13fff04 	addi	r4,fp,-4
 4004170:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 4004174:	100b883a 	mov	r5,r2
 4004178:	d112e084 	addi	r4,gp,19330
 400417c:	40046cc0 	call	40046cc <_ZN10W5100Class12getIPAddressEPh>
//	SPI_endTransaction();
	return ret;
 4004180:	e0bfff17 	ldw	r2,-4(fp)
}
 4004184:	e037883a 	mov	sp,fp
 4004188:	dfc00117 	ldw	ra,4(sp)
 400418c:	df000017 	ldw	fp,0(sp)
 4004190:	dec00204 	addi	sp,sp,8
 4004194:	f800283a 	ret

04004198 <_ZN13EthernetClass10subnetMaskEv>:

IPAddress EthernetClass::subnetMask()
{
 4004198:	defffd04 	addi	sp,sp,-12
 400419c:	dfc00215 	stw	ra,8(sp)
 40041a0:	df000115 	stw	fp,4(sp)
 40041a4:	df000104 	addi	fp,sp,4
	IPAddress ret;
 40041a8:	e13fff04 	addi	r4,fp,-4
 40041ac:	400854c0 	call	400854c <_ZN9IPAddressC1Ev>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getSubnetMask(ret.raw_address());
 40041b0:	e13fff04 	addi	r4,fp,-4
 40041b4:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 40041b8:	100b883a 	mov	r5,r2
 40041bc:	d112e084 	addi	r4,gp,19330
 40041c0:	40045ec0 	call	40045ec <_ZN10W5100Class13getSubnetMaskEPh>
//	SPI_endTransaction();
	return ret;
 40041c4:	e0bfff17 	ldw	r2,-4(fp)
}
 40041c8:	e037883a 	mov	sp,fp
 40041cc:	dfc00117 	ldw	ra,4(sp)
 40041d0:	df000017 	ldw	fp,0(sp)
 40041d4:	dec00204 	addi	sp,sp,8
 40041d8:	f800283a 	ret

040041dc <_ZN13EthernetClass9gatewayIPEv>:

IPAddress EthernetClass::gatewayIP()
{
 40041dc:	defffd04 	addi	sp,sp,-12
 40041e0:	dfc00215 	stw	ra,8(sp)
 40041e4:	df000115 	stw	fp,4(sp)
 40041e8:	df000104 	addi	fp,sp,4
	IPAddress ret;
 40041ec:	e13fff04 	addi	r4,fp,-4
 40041f0:	400854c0 	call	400854c <_ZN9IPAddressC1Ev>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getGatewayIp(ret.raw_address());
 40041f4:	e13fff04 	addi	r4,fp,-4
 40041f8:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 40041fc:	100b883a 	mov	r5,r2
 4004200:	d112e084 	addi	r4,gp,19330
 4004204:	400457c0 	call	400457c <_ZN10W5100Class12getGatewayIpEPh>
//	SPI_endTransaction();
	return ret;
 4004208:	e0bfff17 	ldw	r2,-4(fp)
}
 400420c:	e037883a 	mov	sp,fp
 4004210:	dfc00117 	ldw	ra,4(sp)
 4004214:	df000017 	ldw	fp,0(sp)
 4004218:	dec00204 	addi	sp,sp,8
 400421c:	f800283a 	ret

04004220 <_ZN13EthernetClass13setMACAddressEPKh>:

void EthernetClass::setMACAddress(const uint8_t *mac_address)
{
 4004220:	defffc04 	addi	sp,sp,-16
 4004224:	dfc00315 	stw	ra,12(sp)
 4004228:	df000215 	stw	fp,8(sp)
 400422c:	df000204 	addi	fp,sp,8
 4004230:	e13ffe15 	stw	r4,-8(fp)
 4004234:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setMACAddress(mac_address);
 4004238:	e17fff17 	ldw	r5,-4(fp)
 400423c:	d112e084 	addi	r4,gp,19330
 4004240:	40046240 	call	4004624 <_ZN10W5100Class13setMACAddressEPKh>
//	SPI_endTransaction();
}
 4004244:	0001883a 	nop
 4004248:	e037883a 	mov	sp,fp
 400424c:	dfc00117 	ldw	ra,4(sp)
 4004250:	df000017 	ldw	fp,0(sp)
 4004254:	dec00204 	addi	sp,sp,8
 4004258:	f800283a 	ret

0400425c <_ZN13EthernetClass10setLocalIPE9IPAddress>:

void EthernetClass::setLocalIP(const IPAddress local_ip)
{
 400425c:	defffb04 	addi	sp,sp,-20
 4004260:	dfc00415 	stw	ra,16(sp)
 4004264:	df000315 	stw	fp,12(sp)
 4004268:	df000304 	addi	fp,sp,12
 400426c:	e13ffe15 	stw	r4,-8(fp)
 4004270:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	IPAddress ip = local_ip;
 4004274:	e0bfff17 	ldw	r2,-4(fp)
 4004278:	e0bffd15 	stw	r2,-12(fp)
	W5100.setIPAddress(ip.raw_address());
 400427c:	e13ffd04 	addi	r4,fp,-12
 4004280:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 4004284:	100b883a 	mov	r5,r2
 4004288:	d112e084 	addi	r4,gp,19330
 400428c:	40046940 	call	4004694 <_ZN10W5100Class12setIPAddressEPKh>
//	SPI_endTransaction();
}
 4004290:	0001883a 	nop
 4004294:	e037883a 	mov	sp,fp
 4004298:	dfc00117 	ldw	ra,4(sp)
 400429c:	df000017 	ldw	fp,0(sp)
 40042a0:	dec00204 	addi	sp,sp,8
 40042a4:	f800283a 	ret

040042a8 <_ZN13EthernetClass13setSubnetMaskE9IPAddress>:

void EthernetClass::setSubnetMask(const IPAddress subnet)
{
 40042a8:	defffb04 	addi	sp,sp,-20
 40042ac:	dfc00415 	stw	ra,16(sp)
 40042b0:	df000315 	stw	fp,12(sp)
 40042b4:	df000304 	addi	fp,sp,12
 40042b8:	e13ffe15 	stw	r4,-8(fp)
 40042bc:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	IPAddress ip = subnet;
 40042c0:	e0bfff17 	ldw	r2,-4(fp)
 40042c4:	e0bffd15 	stw	r2,-12(fp)
	W5100.setSubnetMask(ip.raw_address());
 40042c8:	e13ffd04 	addi	r4,fp,-12
 40042cc:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 40042d0:	100b883a 	mov	r5,r2
 40042d4:	d112e084 	addi	r4,gp,19330
 40042d8:	40045b40 	call	40045b4 <_ZN10W5100Class13setSubnetMaskEPKh>
//	SPI_endTransaction();
}
 40042dc:	0001883a 	nop
 40042e0:	e037883a 	mov	sp,fp
 40042e4:	dfc00117 	ldw	ra,4(sp)
 40042e8:	df000017 	ldw	fp,0(sp)
 40042ec:	dec00204 	addi	sp,sp,8
 40042f0:	f800283a 	ret

040042f4 <_ZN13EthernetClass12setGatewayIPE9IPAddress>:

void EthernetClass::setGatewayIP(const IPAddress gateway)
{
 40042f4:	defffb04 	addi	sp,sp,-20
 40042f8:	dfc00415 	stw	ra,16(sp)
 40042fc:	df000315 	stw	fp,12(sp)
 4004300:	df000304 	addi	fp,sp,12
 4004304:	e13ffe15 	stw	r4,-8(fp)
 4004308:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	IPAddress ip = gateway;
 400430c:	e0bfff17 	ldw	r2,-4(fp)
 4004310:	e0bffd15 	stw	r2,-12(fp)
	W5100.setGatewayIp(ip.raw_address());
 4004314:	e13ffd04 	addi	r4,fp,-12
 4004318:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 400431c:	100b883a 	mov	r5,r2
 4004320:	d112e084 	addi	r4,gp,19330
 4004324:	40045440 	call	4004544 <_ZN10W5100Class12setGatewayIpEPKh>
//	SPI_endTransaction();
}
 4004328:	0001883a 	nop
 400432c:	e037883a 	mov	sp,fp
 4004330:	dfc00117 	ldw	ra,4(sp)
 4004334:	df000017 	ldw	fp,0(sp)
 4004338:	dec00204 	addi	sp,sp,8
 400433c:	f800283a 	ret

04004340 <_ZN13EthernetClass24setRetransmissionTimeoutEt>:

void EthernetClass::setRetransmissionTimeout(uint16_t milliseconds)
{
 4004340:	defffc04 	addi	sp,sp,-16
 4004344:	dfc00315 	stw	ra,12(sp)
 4004348:	df000215 	stw	fp,8(sp)
 400434c:	df000204 	addi	fp,sp,8
 4004350:	e13ffe15 	stw	r4,-8(fp)
 4004354:	2805883a 	mov	r2,r5
 4004358:	e0bfff0d 	sth	r2,-4(fp)
	if (milliseconds > 6553) milliseconds = 6553;
 400435c:	e0bfff0b 	ldhu	r2,-4(fp)
 4004360:	108666b0 	cmpltui	r2,r2,6554
 4004364:	1000021e 	bne	r2,zero,4004370 <_ZN13EthernetClass24setRetransmissionTimeoutEt+0x30>
 4004368:	00866644 	movi	r2,6553
 400436c:	e0bfff0d 	sth	r2,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setRetransmissionTime(milliseconds * 10);
 4004370:	e0bfff0b 	ldhu	r2,-4(fp)
 4004374:	108002a4 	muli	r2,r2,10
 4004378:	10bfffcc 	andi	r2,r2,65535
 400437c:	100b883a 	mov	r5,r2
 4004380:	d112e084 	addi	r4,gp,19330
 4004384:	40047040 	call	4004704 <_ZN10W5100Class21setRetransmissionTimeEt>
//	SPI_endTransaction();
}
 4004388:	0001883a 	nop
 400438c:	e037883a 	mov	sp,fp
 4004390:	dfc00117 	ldw	ra,4(sp)
 4004394:	df000017 	ldw	fp,0(sp)
 4004398:	dec00204 	addi	sp,sp,8
 400439c:	f800283a 	ret

040043a0 <_ZN13EthernetClass22setRetransmissionCountEh>:

void EthernetClass::setRetransmissionCount(uint8_t num)
{
 40043a0:	defffc04 	addi	sp,sp,-16
 40043a4:	dfc00315 	stw	ra,12(sp)
 40043a8:	df000215 	stw	fp,8(sp)
 40043ac:	df000204 	addi	fp,sp,8
 40043b0:	e13ffe15 	stw	r4,-8(fp)
 40043b4:	2805883a 	mov	r2,r5
 40043b8:	e0bfff05 	stb	r2,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setRetransmissionCount(num);
 40043bc:	e0bfff03 	ldbu	r2,-4(fp)
 40043c0:	100b883a 	mov	r5,r2
 40043c4:	d112e084 	addi	r4,gp,19330
 40043c8:	40047440 	call	4004744 <_ZN10W5100Class22setRetransmissionCountEh>
//	SPI_endTransaction();
}
 40043cc:	0001883a 	nop
 40043d0:	e037883a 	mov	sp,fp
 40043d4:	dfc00117 	ldw	ra,4(sp)
 40043d8:	df000017 	ldw	fp,0(sp)
 40043dc:	dec00204 	addi	sp,sp,8
 40043e0:	f800283a 	ret

040043e4 <_Z41__static_initialization_and_destruction_0ii>:





EthernetClass Ethernet;
 40043e4:	defffb04 	addi	sp,sp,-20
 40043e8:	dfc00415 	stw	ra,16(sp)
 40043ec:	df000315 	stw	fp,12(sp)
 40043f0:	df000304 	addi	fp,sp,12
 40043f4:	e13ffe15 	stw	r4,-8(fp)
 40043f8:	e17fff15 	stw	r5,-4(fp)
 40043fc:	e0bffe17 	ldw	r2,-8(fp)
 4004400:	10800058 	cmpnei	r2,r2,1
 4004404:	10000b1e 	bne	r2,zero,4004434 <_Z41__static_initialization_and_destruction_0ii+0x50>
 4004408:	e0ffff17 	ldw	r3,-4(fp)
 400440c:	00bfffd4 	movui	r2,65535
 4004410:	1880081e 	bne	r3,r2,4004434 <_Z41__static_initialization_and_destruction_0ii+0x50>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4004414:	d8000015 	stw	zero,0(sp)
 4004418:	000f883a 	mov	r7,zero
 400441c:	000d883a 	mov	r6,zero
 4004420:	000b883a 	mov	r5,zero
 4004424:	d112d404 	addi	r4,gp,19280
 4004428:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
#include "time.h"

#include "Dhcp.h"
#include "utility/w5100.h"

IPAddress EthernetClass::_dnsServerAddress;
 400442c:	d112d504 	addi	r4,gp,19284
 4004430:	400854c0 	call	400854c <_ZN9IPAddressC1Ev>





EthernetClass Ethernet;
 4004434:	0001883a 	nop
 4004438:	e037883a 	mov	sp,fp
 400443c:	dfc00117 	ldw	ra,4(sp)
 4004440:	df000017 	ldw	fp,0(sp)
 4004444:	dec00204 	addi	sp,sp,8
 4004448:	f800283a 	ret

0400444c <_GLOBAL__sub_I__ZN13EthernetClass17_dnsServerAddressE>:
 400444c:	defffe04 	addi	sp,sp,-8
 4004450:	dfc00115 	stw	ra,4(sp)
 4004454:	df000015 	stw	fp,0(sp)
 4004458:	d839883a 	mov	fp,sp
 400445c:	017fffd4 	movui	r5,65535
 4004460:	01000044 	movi	r4,1
 4004464:	40043e40 	call	40043e4 <_Z41__static_initialization_and_destruction_0ii>
 4004468:	e037883a 	mov	sp,fp
 400446c:	dfc00117 	ldw	ra,4(sp)
 4004470:	df000017 	ldw	fp,0(sp)
 4004474:	dec00204 	addi	sp,sp,8
 4004478:	f800283a 	ret

0400447c <_ZN3UDP14beginMulticastE9IPAddresst>:
#include "utility/IPAddress.h"

class UDP  {
public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
 400447c:	defffc04 	addi	sp,sp,-16
 4004480:	df000315 	stw	fp,12(sp)
 4004484:	df000304 	addi	fp,sp,12
 4004488:	e13ffd15 	stw	r4,-12(fp)
 400448c:	e17ffe15 	stw	r5,-8(fp)
 4004490:	3005883a 	mov	r2,r6
 4004494:	e0bfff0d 	sth	r2,-4(fp)
 4004498:	0005883a 	mov	r2,zero
 400449c:	e037883a 	mov	sp,fp
 40044a0:	df000017 	ldw	fp,0(sp)
 40044a4:	dec00104 	addi	sp,sp,4
 40044a8:	f800283a 	ret

040044ac <_ZN3UDPC1Ev>:
#ifndef udp_h
#define udp_h

#include "utility/IPAddress.h"

class UDP  {
 40044ac:	defffe04 	addi	sp,sp,-8
 40044b0:	df000115 	stw	fp,4(sp)
 40044b4:	df000104 	addi	fp,sp,4
 40044b8:	e13fff15 	stw	r4,-4(fp)
 40044bc:	008100b4 	movhi	r2,1026
 40044c0:	10be9d04 	addi	r2,r2,-1420
 40044c4:	e0ffff17 	ldw	r3,-4(fp)
 40044c8:	18800015 	stw	r2,0(r3)
 40044cc:	0001883a 	nop
 40044d0:	e037883a 	mov	sp,fp
 40044d4:	df000017 	ldw	fp,0(sp)
 40044d8:	dec00104 	addi	sp,sp,4
 40044dc:	f800283a 	ret

040044e0 <_ZN11EthernetUDPC1Ev>:
protected:
	uint8_t sockindex;
	uint16_t _remaining; // remaining bytes of incoming packet yet to be processed

public:
	EthernetUDP() : sockindex(MAX_SOCK_NUM) {}  // Constructor
 40044e0:	defffd04 	addi	sp,sp,-12
 40044e4:	dfc00215 	stw	ra,8(sp)
 40044e8:	df000115 	stw	fp,4(sp)
 40044ec:	df000104 	addi	fp,sp,4
 40044f0:	e13fff15 	stw	r4,-4(fp)
 40044f4:	e0bfff17 	ldw	r2,-4(fp)
 40044f8:	1009883a 	mov	r4,r2
 40044fc:	40044ac0 	call	40044ac <_ZN3UDPC1Ev>
 4004500:	008100b4 	movhi	r2,1026
 4004504:	10bee304 	addi	r2,r2,-1140
 4004508:	e0ffff17 	ldw	r3,-4(fp)
 400450c:	18800015 	stw	r2,0(r3)
 4004510:	e0bfff17 	ldw	r2,-4(fp)
 4004514:	10800204 	addi	r2,r2,8
 4004518:	1009883a 	mov	r4,r2
 400451c:	400854c0 	call	400854c <_ZN9IPAddressC1Ev>
 4004520:	e0bfff17 	ldw	r2,-4(fp)
 4004524:	00c00204 	movi	r3,8
 4004528:	10c00405 	stb	r3,16(r2)
 400452c:	0001883a 	nop
 4004530:	e037883a 	mov	sp,fp
 4004534:	dfc00117 	ldw	ra,4(sp)
 4004538:	df000017 	ldw	fp,0(sp)
 400453c:	dec00204 	addi	sp,sp,8
 4004540:	f800283a 	ret

04004544 <_ZN10W5100Class12setGatewayIpEPKh>:
class W5100Class {

public:
  static uint8_t init(void);

  inline void setGatewayIp(const uint8_t * addr) { writeGAR(addr); }
 4004544:	defffc04 	addi	sp,sp,-16
 4004548:	dfc00315 	stw	ra,12(sp)
 400454c:	df000215 	stw	fp,8(sp)
 4004550:	df000204 	addi	fp,sp,8
 4004554:	e13ffe15 	stw	r4,-8(fp)
 4004558:	e17fff15 	stw	r5,-4(fp)
 400455c:	e13fff17 	ldw	r4,-4(fp)
 4004560:	40047d00 	call	40047d0 <_ZN10W5100Class8writeGAREPKh>
 4004564:	0001883a 	nop
 4004568:	e037883a 	mov	sp,fp
 400456c:	dfc00117 	ldw	ra,4(sp)
 4004570:	df000017 	ldw	fp,0(sp)
 4004574:	dec00204 	addi	sp,sp,8
 4004578:	f800283a 	ret

0400457c <_ZN10W5100Class12getGatewayIpEPh>:
  inline void getGatewayIp(uint8_t * addr) { readGAR(addr); }
 400457c:	defffc04 	addi	sp,sp,-16
 4004580:	dfc00315 	stw	ra,12(sp)
 4004584:	df000215 	stw	fp,8(sp)
 4004588:	df000204 	addi	fp,sp,8
 400458c:	e13ffe15 	stw	r4,-8(fp)
 4004590:	e17fff15 	stw	r5,-4(fp)
 4004594:	e13fff17 	ldw	r4,-4(fp)
 4004598:	40048080 	call	4004808 <_ZN10W5100Class7readGAREPh>
 400459c:	0001883a 	nop
 40045a0:	e037883a 	mov	sp,fp
 40045a4:	dfc00117 	ldw	ra,4(sp)
 40045a8:	df000017 	ldw	fp,0(sp)
 40045ac:	dec00204 	addi	sp,sp,8
 40045b0:	f800283a 	ret

040045b4 <_ZN10W5100Class13setSubnetMaskEPKh>:

  inline void setSubnetMask(const uint8_t * addr) { writeSUBR(addr); }
 40045b4:	defffc04 	addi	sp,sp,-16
 40045b8:	dfc00315 	stw	ra,12(sp)
 40045bc:	df000215 	stw	fp,8(sp)
 40045c0:	df000204 	addi	fp,sp,8
 40045c4:	e13ffe15 	stw	r4,-8(fp)
 40045c8:	e17fff15 	stw	r5,-4(fp)
 40045cc:	e13fff17 	ldw	r4,-4(fp)
 40045d0:	40048400 	call	4004840 <_ZN10W5100Class9writeSUBREPKh>
 40045d4:	0001883a 	nop
 40045d8:	e037883a 	mov	sp,fp
 40045dc:	dfc00117 	ldw	ra,4(sp)
 40045e0:	df000017 	ldw	fp,0(sp)
 40045e4:	dec00204 	addi	sp,sp,8
 40045e8:	f800283a 	ret

040045ec <_ZN10W5100Class13getSubnetMaskEPh>:
  inline void getSubnetMask(uint8_t * addr) { readSUBR(addr); }
 40045ec:	defffc04 	addi	sp,sp,-16
 40045f0:	dfc00315 	stw	ra,12(sp)
 40045f4:	df000215 	stw	fp,8(sp)
 40045f8:	df000204 	addi	fp,sp,8
 40045fc:	e13ffe15 	stw	r4,-8(fp)
 4004600:	e17fff15 	stw	r5,-4(fp)
 4004604:	e13fff17 	ldw	r4,-4(fp)
 4004608:	40048780 	call	4004878 <_ZN10W5100Class8readSUBREPh>
 400460c:	0001883a 	nop
 4004610:	e037883a 	mov	sp,fp
 4004614:	dfc00117 	ldw	ra,4(sp)
 4004618:	df000017 	ldw	fp,0(sp)
 400461c:	dec00204 	addi	sp,sp,8
 4004620:	f800283a 	ret

04004624 <_ZN10W5100Class13setMACAddressEPKh>:

  inline void setMACAddress(const uint8_t * addr) { writeSHAR(addr); }
 4004624:	defffc04 	addi	sp,sp,-16
 4004628:	dfc00315 	stw	ra,12(sp)
 400462c:	df000215 	stw	fp,8(sp)
 4004630:	df000204 	addi	fp,sp,8
 4004634:	e13ffe15 	stw	r4,-8(fp)
 4004638:	e17fff15 	stw	r5,-4(fp)
 400463c:	e13fff17 	ldw	r4,-4(fp)
 4004640:	40048b00 	call	40048b0 <_ZN10W5100Class9writeSHAREPKh>
 4004644:	0001883a 	nop
 4004648:	e037883a 	mov	sp,fp
 400464c:	dfc00117 	ldw	ra,4(sp)
 4004650:	df000017 	ldw	fp,0(sp)
 4004654:	dec00204 	addi	sp,sp,8
 4004658:	f800283a 	ret

0400465c <_ZN10W5100Class13getMACAddressEPh>:
  inline void getMACAddress(uint8_t * addr) { readSHAR(addr); }
 400465c:	defffc04 	addi	sp,sp,-16
 4004660:	dfc00315 	stw	ra,12(sp)
 4004664:	df000215 	stw	fp,8(sp)
 4004668:	df000204 	addi	fp,sp,8
 400466c:	e13ffe15 	stw	r4,-8(fp)
 4004670:	e17fff15 	stw	r5,-4(fp)
 4004674:	e13fff17 	ldw	r4,-4(fp)
 4004678:	40048e80 	call	40048e8 <_ZN10W5100Class8readSHAREPh>
 400467c:	0001883a 	nop
 4004680:	e037883a 	mov	sp,fp
 4004684:	dfc00117 	ldw	ra,4(sp)
 4004688:	df000017 	ldw	fp,0(sp)
 400468c:	dec00204 	addi	sp,sp,8
 4004690:	f800283a 	ret

04004694 <_ZN10W5100Class12setIPAddressEPKh>:

  inline void setIPAddress(const uint8_t * addr) { writeSIPR(addr); }
 4004694:	defffc04 	addi	sp,sp,-16
 4004698:	dfc00315 	stw	ra,12(sp)
 400469c:	df000215 	stw	fp,8(sp)
 40046a0:	df000204 	addi	fp,sp,8
 40046a4:	e13ffe15 	stw	r4,-8(fp)
 40046a8:	e17fff15 	stw	r5,-4(fp)
 40046ac:	e13fff17 	ldw	r4,-4(fp)
 40046b0:	40049200 	call	4004920 <_ZN10W5100Class9writeSIPREPKh>
 40046b4:	0001883a 	nop
 40046b8:	e037883a 	mov	sp,fp
 40046bc:	dfc00117 	ldw	ra,4(sp)
 40046c0:	df000017 	ldw	fp,0(sp)
 40046c4:	dec00204 	addi	sp,sp,8
 40046c8:	f800283a 	ret

040046cc <_ZN10W5100Class12getIPAddressEPh>:
  inline void getIPAddress(uint8_t * addr) { readSIPR(addr); }
 40046cc:	defffc04 	addi	sp,sp,-16
 40046d0:	dfc00315 	stw	ra,12(sp)
 40046d4:	df000215 	stw	fp,8(sp)
 40046d8:	df000204 	addi	fp,sp,8
 40046dc:	e13ffe15 	stw	r4,-8(fp)
 40046e0:	e17fff15 	stw	r5,-4(fp)
 40046e4:	e13fff17 	ldw	r4,-4(fp)
 40046e8:	40049580 	call	4004958 <_ZN10W5100Class8readSIPREPh>
 40046ec:	0001883a 	nop
 40046f0:	e037883a 	mov	sp,fp
 40046f4:	dfc00117 	ldw	ra,4(sp)
 40046f8:	df000017 	ldw	fp,0(sp)
 40046fc:	dec00204 	addi	sp,sp,8
 4004700:	f800283a 	ret

04004704 <_ZN10W5100Class21setRetransmissionTimeEt>:

  inline void setRetransmissionTime(uint16_t timeout) { writeRTR(timeout); }
 4004704:	defffc04 	addi	sp,sp,-16
 4004708:	dfc00315 	stw	ra,12(sp)
 400470c:	df000215 	stw	fp,8(sp)
 4004710:	df000204 	addi	fp,sp,8
 4004714:	e13ffe15 	stw	r4,-8(fp)
 4004718:	2805883a 	mov	r2,r5
 400471c:	e0bfff0d 	sth	r2,-4(fp)
 4004720:	e0bfff0b 	ldhu	r2,-4(fp)
 4004724:	1009883a 	mov	r4,r2
 4004728:	40049900 	call	4004990 <_ZN10W5100Class8writeRTREt>
 400472c:	0001883a 	nop
 4004730:	e037883a 	mov	sp,fp
 4004734:	dfc00117 	ldw	ra,4(sp)
 4004738:	df000017 	ldw	fp,0(sp)
 400473c:	dec00204 	addi	sp,sp,8
 4004740:	f800283a 	ret

04004744 <_ZN10W5100Class22setRetransmissionCountEh>:
  inline void setRetransmissionCount(uint8_t retry) { writeRCR(retry); }
 4004744:	defffc04 	addi	sp,sp,-16
 4004748:	dfc00315 	stw	ra,12(sp)
 400474c:	df000215 	stw	fp,8(sp)
 4004750:	df000204 	addi	fp,sp,8
 4004754:	e13ffe15 	stw	r4,-8(fp)
 4004758:	2805883a 	mov	r2,r5
 400475c:	e0bfff05 	stb	r2,-4(fp)
 4004760:	e0bfff03 	ldbu	r2,-4(fp)
 4004764:	1009883a 	mov	r4,r2
 4004768:	40049e40 	call	40049e4 <_ZN10W5100Class8writeRCREh>
 400476c:	0001883a 	nop
 4004770:	e037883a 	mov	sp,fp
 4004774:	dfc00117 	ldw	ra,4(sp)
 4004778:	df000017 	ldw	fp,0(sp)
 400477c:	dec00204 	addi	sp,sp,8
 4004780:	f800283a 	ret

04004784 <_ZN10W5100Class5writeEth>:
  // W5100 Registers
  // ---------------
//private:
public:
  static uint16_t write(uint16_t addr, const uint8_t *buf, uint16_t len);
  static uint8_t write(uint16_t addr, uint8_t data) {
 4004784:	defffc04 	addi	sp,sp,-16
 4004788:	dfc00315 	stw	ra,12(sp)
 400478c:	df000215 	stw	fp,8(sp)
 4004790:	df000204 	addi	fp,sp,8
 4004794:	2007883a 	mov	r3,r4
 4004798:	2805883a 	mov	r2,r5
 400479c:	e0fffe0d 	sth	r3,-8(fp)
 40047a0:	e0bfff05 	stb	r2,-4(fp)
    return write(addr, &data, 1);
 40047a4:	e0bffe0b 	ldhu	r2,-8(fp)
 40047a8:	e0ffff04 	addi	r3,fp,-4
 40047ac:	01800044 	movi	r6,1
 40047b0:	180b883a 	mov	r5,r3
 40047b4:	1009883a 	mov	r4,r2
 40047b8:	4008e0c0 	call	4008e0c <_ZN10W5100Class5writeEtPKht>
  }
 40047bc:	e037883a 	mov	sp,fp
 40047c0:	dfc00117 	ldw	ra,4(sp)
 40047c4:	df000017 	ldw	fp,0(sp)
 40047c8:	dec00204 	addi	sp,sp,8
 40047cc:	f800283a 	ret

040047d0 <_ZN10W5100Class8writeGAREPKh>:
  }
  static W5100Linkstatus getLinkStatus();

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
 40047d0:	defffd04 	addi	sp,sp,-12
 40047d4:	dfc00215 	stw	ra,8(sp)
 40047d8:	df000115 	stw	fp,4(sp)
 40047dc:	df000104 	addi	fp,sp,4
 40047e0:	e13fff15 	stw	r4,-4(fp)
 40047e4:	01800104 	movi	r6,4
 40047e8:	e17fff17 	ldw	r5,-4(fp)
 40047ec:	01000044 	movi	r4,1
 40047f0:	4008e0c0 	call	4008e0c <_ZN10W5100Class5writeEtPKht>
 40047f4:	e037883a 	mov	sp,fp
 40047f8:	dfc00117 	ldw	ra,4(sp)
 40047fc:	df000017 	ldw	fp,0(sp)
 4004800:	dec00204 	addi	sp,sp,8
 4004804:	f800283a 	ret

04004808 <_ZN10W5100Class7readGAREPh>:
 4004808:	defffd04 	addi	sp,sp,-12
 400480c:	dfc00215 	stw	ra,8(sp)
 4004810:	df000115 	stw	fp,4(sp)
 4004814:	df000104 	addi	fp,sp,4
 4004818:	e13fff15 	stw	r4,-4(fp)
 400481c:	01800104 	movi	r6,4
 4004820:	e17fff17 	ldw	r5,-4(fp)
 4004824:	01000044 	movi	r4,1
 4004828:	4008fb00 	call	4008fb0 <_ZN10W5100Class4readEtPht>
 400482c:	e037883a 	mov	sp,fp
 4004830:	dfc00117 	ldw	ra,4(sp)
 4004834:	df000017 	ldw	fp,0(sp)
 4004838:	dec00204 	addi	sp,sp,8
 400483c:	f800283a 	ret

04004840 <_ZN10W5100Class9writeSUBREPKh>:
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
 4004840:	defffd04 	addi	sp,sp,-12
 4004844:	dfc00215 	stw	ra,8(sp)
 4004848:	df000115 	stw	fp,4(sp)
 400484c:	df000104 	addi	fp,sp,4
 4004850:	e13fff15 	stw	r4,-4(fp)
 4004854:	01800104 	movi	r6,4
 4004858:	e17fff17 	ldw	r5,-4(fp)
 400485c:	01000144 	movi	r4,5
 4004860:	4008e0c0 	call	4008e0c <_ZN10W5100Class5writeEtPKht>
 4004864:	e037883a 	mov	sp,fp
 4004868:	dfc00117 	ldw	ra,4(sp)
 400486c:	df000017 	ldw	fp,0(sp)
 4004870:	dec00204 	addi	sp,sp,8
 4004874:	f800283a 	ret

04004878 <_ZN10W5100Class8readSUBREPh>:
 4004878:	defffd04 	addi	sp,sp,-12
 400487c:	dfc00215 	stw	ra,8(sp)
 4004880:	df000115 	stw	fp,4(sp)
 4004884:	df000104 	addi	fp,sp,4
 4004888:	e13fff15 	stw	r4,-4(fp)
 400488c:	01800104 	movi	r6,4
 4004890:	e17fff17 	ldw	r5,-4(fp)
 4004894:	01000144 	movi	r4,5
 4004898:	4008fb00 	call	4008fb0 <_ZN10W5100Class4readEtPht>
 400489c:	e037883a 	mov	sp,fp
 40048a0:	dfc00117 	ldw	ra,4(sp)
 40048a4:	df000017 	ldw	fp,0(sp)
 40048a8:	dec00204 	addi	sp,sp,8
 40048ac:	f800283a 	ret

040048b0 <_ZN10W5100Class9writeSHAREPKh>:
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
 40048b0:	defffd04 	addi	sp,sp,-12
 40048b4:	dfc00215 	stw	ra,8(sp)
 40048b8:	df000115 	stw	fp,4(sp)
 40048bc:	df000104 	addi	fp,sp,4
 40048c0:	e13fff15 	stw	r4,-4(fp)
 40048c4:	01800184 	movi	r6,6
 40048c8:	e17fff17 	ldw	r5,-4(fp)
 40048cc:	01000244 	movi	r4,9
 40048d0:	4008e0c0 	call	4008e0c <_ZN10W5100Class5writeEtPKht>
 40048d4:	e037883a 	mov	sp,fp
 40048d8:	dfc00117 	ldw	ra,4(sp)
 40048dc:	df000017 	ldw	fp,0(sp)
 40048e0:	dec00204 	addi	sp,sp,8
 40048e4:	f800283a 	ret

040048e8 <_ZN10W5100Class8readSHAREPh>:
 40048e8:	defffd04 	addi	sp,sp,-12
 40048ec:	dfc00215 	stw	ra,8(sp)
 40048f0:	df000115 	stw	fp,4(sp)
 40048f4:	df000104 	addi	fp,sp,4
 40048f8:	e13fff15 	stw	r4,-4(fp)
 40048fc:	01800184 	movi	r6,6
 4004900:	e17fff17 	ldw	r5,-4(fp)
 4004904:	01000244 	movi	r4,9
 4004908:	4008fb00 	call	4008fb0 <_ZN10W5100Class4readEtPht>
 400490c:	e037883a 	mov	sp,fp
 4004910:	dfc00117 	ldw	ra,4(sp)
 4004914:	df000017 	ldw	fp,0(sp)
 4004918:	dec00204 	addi	sp,sp,8
 400491c:	f800283a 	ret

04004920 <_ZN10W5100Class9writeSIPREPKh>:
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
 4004920:	defffd04 	addi	sp,sp,-12
 4004924:	dfc00215 	stw	ra,8(sp)
 4004928:	df000115 	stw	fp,4(sp)
 400492c:	df000104 	addi	fp,sp,4
 4004930:	e13fff15 	stw	r4,-4(fp)
 4004934:	01800104 	movi	r6,4
 4004938:	e17fff17 	ldw	r5,-4(fp)
 400493c:	010003c4 	movi	r4,15
 4004940:	4008e0c0 	call	4008e0c <_ZN10W5100Class5writeEtPKht>
 4004944:	e037883a 	mov	sp,fp
 4004948:	dfc00117 	ldw	ra,4(sp)
 400494c:	df000017 	ldw	fp,0(sp)
 4004950:	dec00204 	addi	sp,sp,8
 4004954:	f800283a 	ret

04004958 <_ZN10W5100Class8readSIPREPh>:
 4004958:	defffd04 	addi	sp,sp,-12
 400495c:	dfc00215 	stw	ra,8(sp)
 4004960:	df000115 	stw	fp,4(sp)
 4004964:	df000104 	addi	fp,sp,4
 4004968:	e13fff15 	stw	r4,-4(fp)
 400496c:	01800104 	movi	r6,4
 4004970:	e17fff17 	ldw	r5,-4(fp)
 4004974:	010003c4 	movi	r4,15
 4004978:	4008fb00 	call	4008fb0 <_ZN10W5100Class4readEtPht>
 400497c:	e037883a 	mov	sp,fp
 4004980:	dfc00117 	ldw	ra,4(sp)
 4004984:	df000017 	ldw	fp,0(sp)
 4004988:	dec00204 	addi	sp,sp,8
 400498c:	f800283a 	ret

04004990 <_ZN10W5100Class8writeRTREt>:
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
 4004990:	defffc04 	addi	sp,sp,-16
 4004994:	dfc00315 	stw	ra,12(sp)
 4004998:	df000215 	stw	fp,8(sp)
 400499c:	df000204 	addi	fp,sp,8
 40049a0:	2005883a 	mov	r2,r4
 40049a4:	e0bfff0d 	sth	r2,-4(fp)
 40049a8:	e0bfff0b 	ldhu	r2,-4(fp)
 40049ac:	1005d23a 	srai	r2,r2,8
 40049b0:	e0bffe05 	stb	r2,-8(fp)
 40049b4:	e0bfff0b 	ldhu	r2,-4(fp)
 40049b8:	e0bffe45 	stb	r2,-7(fp)
 40049bc:	01800084 	movi	r6,2
 40049c0:	e17ffe04 	addi	r5,fp,-8
 40049c4:	010005c4 	movi	r4,23
 40049c8:	4008e0c0 	call	4008e0c <_ZN10W5100Class5writeEtPKht>
 40049cc:	0001883a 	nop
 40049d0:	e037883a 	mov	sp,fp
 40049d4:	dfc00117 	ldw	ra,4(sp)
 40049d8:	df000017 	ldw	fp,0(sp)
 40049dc:	dec00204 	addi	sp,sp,8
 40049e0:	f800283a 	ret

040049e4 <_ZN10W5100Class8writeRCREh>:
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
 40049e4:	defffd04 	addi	sp,sp,-12
 40049e8:	dfc00215 	stw	ra,8(sp)
 40049ec:	df000115 	stw	fp,4(sp)
 40049f0:	df000104 	addi	fp,sp,4
 40049f4:	2005883a 	mov	r2,r4
 40049f8:	e0bfff05 	stb	r2,-4(fp)
 40049fc:	e0bfff03 	ldbu	r2,-4(fp)
 4004a00:	100b883a 	mov	r5,r2
 4004a04:	01000644 	movi	r4,25
 4004a08:	40047840 	call	4004784 <_ZN10W5100Class5writeEth>
 4004a0c:	0001883a 	nop
 4004a10:	e037883a 	mov	sp,fp
 4004a14:	dfc00117 	ldw	ra,4(sp)
 4004a18:	df000017 	ldw	fp,0(sp)
 4004a1c:	dec00204 	addi	sp,sp,8
 4004a20:	f800283a 	ret

04004a24 <_ZN10W5100Class7getChipEv>:
  static uint8_t isW5100(void);
  static uint8_t isW5200(void);
  static uint8_t isW5500(void);

public:
  static uint8_t getChip(void) { return chip; }
 4004a24:	deffff04 	addi	sp,sp,-4
 4004a28:	df000015 	stw	fp,0(sp)
 4004a2c:	d839883a 	mov	fp,sp
 4004a30:	d092e003 	ldbu	r2,19328(gp)
 4004a34:	e037883a 	mov	sp,fp
 4004a38:	df000017 	ldw	fp,0(sp)
 4004a3c:	dec00104 	addi	sp,sp,4
 4004a40:	f800283a 	ret

04004a44 <_ZN10W5100Class5setSSEh>:

  static bool hasOffsetAddressMapping(void) {
    if (chip == 55) return true;
    return false;
  }
  static void setSS(uint8_t pin) { ss_pin = pin; }
 4004a44:	defffe04 	addi	sp,sp,-8
 4004a48:	df000115 	stw	fp,4(sp)
 4004a4c:	df000104 	addi	fp,sp,4
 4004a50:	2005883a 	mov	r2,r4
 4004a54:	e0bfff05 	stb	r2,-4(fp)
 4004a58:	e0bfff03 	ldbu	r2,-4(fp)
 4004a5c:	d0a00d85 	stb	r2,-32714(gp)
 4004a60:	0001883a 	nop
 4004a64:	e037883a 	mov	sp,fp
 4004a68:	df000017 	ldw	fp,0(sp)
 4004a6c:	dec00104 	addi	sp,sp,4
 4004a70:	f800283a 	ret

04004a74 <_ZN9DhcpClassC1Ev>:
	// TODO: make private when socket allocation moves to EthernetClass
	static uint16_t server_port[MAX_SOCK_NUM];
};


class DhcpClass {
 4004a74:	defffd04 	addi	sp,sp,-12
 4004a78:	dfc00215 	stw	ra,8(sp)
 4004a7c:	df000115 	stw	fp,4(sp)
 4004a80:	df000104 	addi	fp,sp,4
 4004a84:	e13fff15 	stw	r4,-4(fp)
 4004a88:	e0bfff17 	ldw	r2,-4(fp)
 4004a8c:	10801204 	addi	r2,r2,72
 4004a90:	1009883a 	mov	r4,r2
 4004a94:	40044e00 	call	40044e0 <_ZN11EthernetUDPC1Ev>
 4004a98:	0001883a 	nop
 4004a9c:	e037883a 	mov	sp,fp
 4004aa0:	dfc00117 	ldw	ra,4(sp)
 4004aa4:	df000017 	ldw	fp,0(sp)
 4004aa8:	dec00204 	addi	sp,sp,8
 4004aac:	f800283a 	ret

04004ab0 <_ZN14EthernetClient7connectEPKct>:
#include <string.h>
#include "EthernetClient.h"
#include "utility/w5100.h"

int EthernetClient::connect(const char * host, uint16_t port)
{
 4004ab0:	defff204 	addi	sp,sp,-56
 4004ab4:	dfc00d15 	stw	ra,52(sp)
 4004ab8:	df000c15 	stw	fp,48(sp)
 4004abc:	df000c04 	addi	fp,sp,48
 4004ac0:	e13ffd15 	stw	r4,-12(fp)
 4004ac4:	e17ffe15 	stw	r5,-8(fp)
 4004ac8:	3005883a 	mov	r2,r6
 4004acc:	e0bfff0d 	sth	r2,-4(fp)
	DNSClient dns; // Look up the host first
 4004ad0:	e0bff504 	addi	r2,fp,-44
 4004ad4:	1009883a 	mov	r4,r2
 4004ad8:	4005b5c0 	call	4005b5c <_ZN9DNSClientC1Ev>
	IPAddress remote_addr;
 4004adc:	e0bffc04 	addi	r2,fp,-16
 4004ae0:	1009883a 	mov	r4,r2
 4004ae4:	400854c0 	call	400854c <_ZN9IPAddressC1Ev>

	if (_sockindex < MAX_SOCK_NUM) {
 4004ae8:	e0bffd17 	ldw	r2,-12(fp)
 4004aec:	10800103 	ldbu	r2,4(r2)
 4004af0:	10803fcc 	andi	r2,r2,255
 4004af4:	10800228 	cmpgeui	r2,r2,8
 4004af8:	1000111e 	bne	r2,zero,4004b40 <_ZN14EthernetClient7connectEPKct+0x90>
		if (Ethernet.socketStatus(_sockindex) != SnSR::CLOSED) {
 4004afc:	e0bffd17 	ldw	r2,-12(fp)
 4004b00:	10800103 	ldbu	r2,4(r2)
 4004b04:	10803fcc 	andi	r2,r2,255
 4004b08:	1009883a 	mov	r4,r2
 4004b0c:	40071280 	call	4007128 <_ZN13EthernetClass12socketStatusEh>
 4004b10:	10803fcc 	andi	r2,r2,255
 4004b14:	1004c03a 	cmpne	r2,r2,zero
 4004b18:	10803fcc 	andi	r2,r2,255
 4004b1c:	10000526 	beq	r2,zero,4004b34 <_ZN14EthernetClient7connectEPKct+0x84>
			Ethernet.socketDisconnect(_sockindex); // TODO: should we call stop()?
 4004b20:	e0bffd17 	ldw	r2,-12(fp)
 4004b24:	10800103 	ldbu	r2,4(r2)
 4004b28:	10803fcc 	andi	r2,r2,255
 4004b2c:	1009883a 	mov	r4,r2
 4004b30:	400727c0 	call	400727c <_ZN13EthernetClass16socketDisconnectEh>
		}
		_sockindex = MAX_SOCK_NUM;
 4004b34:	e0bffd17 	ldw	r2,-12(fp)
 4004b38:	00c00204 	movi	r3,8
 4004b3c:	10c00105 	stb	r3,4(r2)
	}
	dns.begin(Ethernet.dnsServerIP());
 4004b40:	40058080 	call	4005808 <_ZN13EthernetClass11dnsServerIPEv>
 4004b44:	e0bff415 	stw	r2,-48(fp)
 4004b48:	e0bff504 	addi	r2,fp,-44
 4004b4c:	e17ff404 	addi	r5,fp,-48
 4004b50:	1009883a 	mov	r4,r2
 4004b54:	4002f780 	call	4002f78 <_ZN9DNSClient5beginERK9IPAddress>
	if (!dns.getHostByName(host, remote_addr)) return 0; // TODO: use _timeout
 4004b58:	e0fffc04 	addi	r3,fp,-16
 4004b5c:	e0bff504 	addi	r2,fp,-44
 4004b60:	01c4e204 	movi	r7,5000
 4004b64:	180d883a 	mov	r6,r3
 4004b68:	e17ffe17 	ldw	r5,-8(fp)
 4004b6c:	1009883a 	mov	r4,r2
 4004b70:	40030e80 	call	40030e8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>
 4004b74:	1005003a 	cmpeq	r2,r2,zero
 4004b78:	10803fcc 	andi	r2,r2,255
 4004b7c:	10000226 	beq	r2,zero,4004b88 <_ZN14EthernetClient7connectEPKct+0xd8>
 4004b80:	0005883a 	mov	r2,zero
 4004b84:	00000806 	br	4004ba8 <_ZN14EthernetClient7connectEPKct+0xf8>
	return connect(remote_addr, port);
 4004b88:	e0bffd17 	ldw	r2,-12(fp)
 4004b8c:	10800017 	ldw	r2,0(r2)
 4004b90:	10800017 	ldw	r2,0(r2)
 4004b94:	e0ffff0b 	ldhu	r3,-4(fp)
 4004b98:	180d883a 	mov	r6,r3
 4004b9c:	e17ffc17 	ldw	r5,-16(fp)
 4004ba0:	e13ffd17 	ldw	r4,-12(fp)
 4004ba4:	103ee83a 	callr	r2
}
 4004ba8:	e037883a 	mov	sp,fp
 4004bac:	dfc00117 	ldw	ra,4(sp)
 4004bb0:	df000017 	ldw	fp,0(sp)
 4004bb4:	dec00204 	addi	sp,sp,8
 4004bb8:	f800283a 	ret

04004bbc <_ZN14EthernetClient7connectE9IPAddresst>:

int EthernetClient::connect(IPAddress ip, uint16_t port)
{
 4004bbc:	deffe004 	addi	sp,sp,-128
 4004bc0:	dfc01f15 	stw	ra,124(sp)
 4004bc4:	df001e15 	stw	fp,120(sp)
 4004bc8:	ddc01d15 	stw	r23,116(sp)
 4004bcc:	dd801c15 	stw	r22,112(sp)
 4004bd0:	dd401b15 	stw	r21,108(sp)
 4004bd4:	dd001a15 	stw	r20,104(sp)
 4004bd8:	dcc01915 	stw	r19,100(sp)
 4004bdc:	dc801815 	stw	r18,96(sp)
 4004be0:	dc401715 	stw	r17,92(sp)
 4004be4:	dc001615 	stw	r16,88(sp)
 4004be8:	df001e04 	addi	fp,sp,120
 4004bec:	e13fe615 	stw	r4,-104(fp)
 4004bf0:	e17fe715 	stw	r5,-100(fp)
 4004bf4:	3005883a 	mov	r2,r6
 4004bf8:	e0bfe80d 	sth	r2,-96(fp)
 4004bfc:	00810074 	movhi	r2,1025
 4004c00:	10a8e804 	addi	r2,r2,-23648
 4004c04:	e0bfef15 	stw	r2,-68(fp)
 4004c08:	008100b4 	movhi	r2,1026
 4004c0c:	10bbc304 	addi	r2,r2,-4340
 4004c10:	e0bff015 	stw	r2,-64(fp)
 4004c14:	e0bff104 	addi	r2,fp,-60
 4004c18:	e0ffe204 	addi	r3,fp,-120
 4004c1c:	10c00015 	stw	r3,0(r2)
 4004c20:	00c10034 	movhi	r3,1024
 4004c24:	18d39b04 	addi	r3,r3,20076
 4004c28:	10c00115 	stw	r3,4(r2)
 4004c2c:	16c00215 	stw	sp,8(r2)
 4004c30:	e0bfe904 	addi	r2,fp,-92
 4004c34:	1009883a 	mov	r4,r2
 4004c38:	400bb3c0 	call	400bb3c <_Unwind_SjLj_Register>
	if (_sockindex < MAX_SOCK_NUM) {
 4004c3c:	e0bfe617 	ldw	r2,-104(fp)
 4004c40:	10800103 	ldbu	r2,4(r2)
 4004c44:	10803fcc 	andi	r2,r2,255
 4004c48:	10800228 	cmpgeui	r2,r2,8
 4004c4c:	1000131e 	bne	r2,zero,4004c9c <_ZN14EthernetClient7connectE9IPAddresst+0xe0>
		if (Ethernet.socketStatus(_sockindex) != SnSR::CLOSED) {
 4004c50:	e0bfe617 	ldw	r2,-104(fp)
 4004c54:	10800103 	ldbu	r2,4(r2)
 4004c58:	10c03fcc 	andi	r3,r2,255
 4004c5c:	00bfffc4 	movi	r2,-1
 4004c60:	e0bfea15 	stw	r2,-88(fp)
 4004c64:	1809883a 	mov	r4,r3
 4004c68:	40071280 	call	4007128 <_ZN13EthernetClass12socketStatusEh>
 4004c6c:	10803fcc 	andi	r2,r2,255
 4004c70:	1004c03a 	cmpne	r2,r2,zero
 4004c74:	10803fcc 	andi	r2,r2,255
 4004c78:	10000526 	beq	r2,zero,4004c90 <_ZN14EthernetClient7connectE9IPAddresst+0xd4>
			Ethernet.socketDisconnect(_sockindex); // TODO: should we call stop()?
 4004c7c:	e0bfe617 	ldw	r2,-104(fp)
 4004c80:	10800103 	ldbu	r2,4(r2)
 4004c84:	10803fcc 	andi	r2,r2,255
 4004c88:	1009883a 	mov	r4,r2
 4004c8c:	400727c0 	call	400727c <_ZN13EthernetClass16socketDisconnectEh>
		}
		_sockindex = MAX_SOCK_NUM;
 4004c90:	e0bfe617 	ldw	r2,-104(fp)
 4004c94:	00c00204 	movi	r3,8
 4004c98:	10c00105 	stb	r3,4(r2)
	}
#if defined(ESP8266) || defined(ESP32)
	if (ip == IPAddress((uint32_t)0) || ip == IPAddress(0xFFFFFFFFul)) return 0;
#else
	if (ip == IPAddress(0ul) || ip == IPAddress(0xFFFFFFFFul)) return 0;
 4004c9c:	e0ffe504 	addi	r3,fp,-108
 4004ca0:	00800044 	movi	r2,1
 4004ca4:	e0bfea15 	stw	r2,-88(fp)
 4004ca8:	000b883a 	mov	r5,zero
 4004cac:	1809883a 	mov	r4,r3
 4004cb0:	40085e80 	call	40085e8 <_ZN9IPAddressC1Em>
 4004cb4:	e0ffe504 	addi	r3,fp,-108
 4004cb8:	e0bfe704 	addi	r2,fp,-100
 4004cbc:	180b883a 	mov	r5,r3
 4004cc0:	1009883a 	mov	r4,r2
 4004cc4:	4002ef00 	call	4002ef0 <_ZNK9IPAddresseqERKS_>
 4004cc8:	10803fcc 	andi	r2,r2,255
 4004ccc:	10000b1e 	bne	r2,zero,4004cfc <_ZN14EthernetClient7connectE9IPAddresst+0x140>
 4004cd0:	e0bfe404 	addi	r2,fp,-112
 4004cd4:	017fffc4 	movi	r5,-1
 4004cd8:	1009883a 	mov	r4,r2
 4004cdc:	40085e80 	call	40085e8 <_ZN9IPAddressC1Em>
 4004ce0:	e0ffe404 	addi	r3,fp,-112
 4004ce4:	e0bfe704 	addi	r2,fp,-100
 4004ce8:	180b883a 	mov	r5,r3
 4004cec:	1009883a 	mov	r4,r2
 4004cf0:	4002ef00 	call	4002ef0 <_ZNK9IPAddresseqERKS_>
 4004cf4:	10803fcc 	andi	r2,r2,255
 4004cf8:	10000226 	beq	r2,zero,4004d04 <_ZN14EthernetClient7connectE9IPAddresst+0x148>
 4004cfc:	00800044 	movi	r2,1
 4004d00:	00000106 	br	4004d08 <_ZN14EthernetClient7connectE9IPAddresst+0x14c>
 4004d04:	0005883a 	mov	r2,zero
 4004d08:	10803fcc 	andi	r2,r2,255
 4004d0c:	10000226 	beq	r2,zero,4004d18 <_ZN14EthernetClient7connectE9IPAddresst+0x15c>
 4004d10:	0005883a 	mov	r2,zero
 4004d14:	00005306 	br	4004e64 <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
#endif
	_sockindex = Ethernet.socketBegin(SnMR::TCP, 0);
 4004d18:	00bfffc4 	movi	r2,-1
 4004d1c:	e0bfea15 	stw	r2,-88(fp)
 4004d20:	000b883a 	mov	r5,zero
 4004d24:	01000844 	movi	r4,33
 4004d28:	4006b3c0 	call	4006b3c <_ZN13EthernetClass11socketBeginEht>
 4004d2c:	1007883a 	mov	r3,r2
 4004d30:	e0bfe617 	ldw	r2,-104(fp)
 4004d34:	10c00105 	stb	r3,4(r2)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004d38:	e0bfe617 	ldw	r2,-104(fp)
 4004d3c:	10800103 	ldbu	r2,4(r2)
 4004d40:	10803fcc 	andi	r2,r2,255
 4004d44:	10800230 	cmpltui	r2,r2,8
 4004d48:	1000021e 	bne	r2,zero,4004d54 <_ZN14EthernetClient7connectE9IPAddresst+0x198>
 4004d4c:	0005883a 	mov	r2,zero
 4004d50:	00004406 	br	4004e64 <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
	Ethernet.socketConnect(_sockindex, rawIPAddress(ip), port);
 4004d54:	e0bfe617 	ldw	r2,-104(fp)
 4004d58:	10800103 	ldbu	r2,4(r2)
 4004d5c:	10803fcc 	andi	r2,r2,255
 4004d60:	e0bff615 	stw	r2,-40(fp)
 4004d64:	e0bfe617 	ldw	r2,-104(fp)
 4004d68:	e0ffe704 	addi	r3,fp,-100
 4004d6c:	180b883a 	mov	r5,r3
 4004d70:	1009883a 	mov	r4,r2
 4004d74:	40057d40 	call	40057d4 <_ZN6Client12rawIPAddressER9IPAddress>
 4004d78:	1009883a 	mov	r4,r2
 4004d7c:	e0ffe80b 	ldhu	r3,-96(fp)
 4004d80:	00bfffc4 	movi	r2,-1
 4004d84:	e0bfea15 	stw	r2,-88(fp)
 4004d88:	180d883a 	mov	r6,r3
 4004d8c:	200b883a 	mov	r5,r4
 4004d90:	e13ff617 	ldw	r4,-40(fp)
 4004d94:	400720c0 	call	400720c <_ZN13EthernetClass13socketConnectEhPht>
	uint32_t start = clock();
 4004d98:	400be6c0 	call	400be6c <clock>
 4004d9c:	e0bfe215 	stw	r2,-120(fp)
	while (1) {
		uint8_t stat = Ethernet.socketStatus(_sockindex);
 4004da0:	e0bfe617 	ldw	r2,-104(fp)
 4004da4:	10800103 	ldbu	r2,4(r2)
 4004da8:	10c03fcc 	andi	r3,r2,255
 4004dac:	00bfffc4 	movi	r2,-1
 4004db0:	e0bfea15 	stw	r2,-88(fp)
 4004db4:	1809883a 	mov	r4,r3
 4004db8:	40071280 	call	4007128 <_ZN13EthernetClass12socketStatusEh>
 4004dbc:	e0bfe305 	stb	r2,-116(fp)
		if (stat == SnSR::ESTABLISHED) return 1;
 4004dc0:	e0bfe303 	ldbu	r2,-116(fp)
 4004dc4:	108005d8 	cmpnei	r2,r2,23
 4004dc8:	1000021e 	bne	r2,zero,4004dd4 <_ZN14EthernetClient7connectE9IPAddresst+0x218>
 4004dcc:	00800044 	movi	r2,1
 4004dd0:	00002406 	br	4004e64 <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
		if (stat == SnSR::CLOSE_WAIT) return 1;
 4004dd4:	e0bfe303 	ldbu	r2,-116(fp)
 4004dd8:	10800718 	cmpnei	r2,r2,28
 4004ddc:	1000021e 	bne	r2,zero,4004de8 <_ZN14EthernetClient7connectE9IPAddresst+0x22c>
 4004de0:	00800044 	movi	r2,1
 4004de4:	00001f06 	br	4004e64 <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
		if (stat == SnSR::CLOSED) return 0;
 4004de8:	e0bfe303 	ldbu	r2,-116(fp)
 4004dec:	1000021e 	bne	r2,zero,4004df8 <_ZN14EthernetClient7connectE9IPAddresst+0x23c>
 4004df0:	0005883a 	mov	r2,zero
 4004df4:	00001b06 	br	4004e64 <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
		if (clock() - start > _timeout) break;
 4004df8:	400be6c0 	call	400be6c <clock>
 4004dfc:	1007883a 	mov	r3,r2
 4004e00:	e0bfe217 	ldw	r2,-120(fp)
 4004e04:	1885c83a 	sub	r2,r3,r2
 4004e08:	e0ffe617 	ldw	r3,-104(fp)
 4004e0c:	18c0018b 	ldhu	r3,6(r3)
 4004e10:	18ffffcc 	andi	r3,r3,65535
 4004e14:	1885803a 	cmpltu	r2,r3,r2
 4004e18:	10803fcc 	andi	r2,r2,255
 4004e1c:	1000051e 	bne	r2,zero,4004e34 <_ZN14EthernetClient7connectE9IPAddresst+0x278>
		usleep(1000);
 4004e20:	00bfffc4 	movi	r2,-1
 4004e24:	e0bfea15 	stw	r2,-88(fp)
 4004e28:	0100fa04 	movi	r4,1000
 4004e2c:	401cc880 	call	401cc88 <usleep>
#endif
	_sockindex = Ethernet.socketBegin(SnMR::TCP, 0);
	if (_sockindex >= MAX_SOCK_NUM) return 0;
	Ethernet.socketConnect(_sockindex, rawIPAddress(ip), port);
	uint32_t start = clock();
	while (1) {
 4004e30:	003fdb06 	br	4004da0 <__alt_data_end+0xfc004da0>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
		if (stat == SnSR::ESTABLISHED) return 1;
		if (stat == SnSR::CLOSE_WAIT) return 1;
		if (stat == SnSR::CLOSED) return 0;
		if (clock() - start > _timeout) break;
 4004e34:	0001883a 	nop
		usleep(1000);
	}
	Ethernet.socketClose(_sockindex);
 4004e38:	e0bfe617 	ldw	r2,-104(fp)
 4004e3c:	10800103 	ldbu	r2,4(r2)
 4004e40:	10c03fcc 	andi	r3,r2,255
 4004e44:	00bfffc4 	movi	r2,-1
 4004e48:	e0bfea15 	stw	r2,-88(fp)
 4004e4c:	1809883a 	mov	r4,r3
 4004e50:	40071680 	call	4007168 <_ZN13EthernetClass11socketCloseEh>
	_sockindex = MAX_SOCK_NUM;
 4004e54:	e0bfe617 	ldw	r2,-104(fp)
 4004e58:	00c00204 	movi	r3,8
 4004e5c:	10c00105 	stb	r3,4(r2)
	return 0;
 4004e60:	0005883a 	mov	r2,zero
 4004e64:	e0bff715 	stw	r2,-36(fp)
 4004e68:	00000806 	br	4004e8c <_ZN14EthernetClient7connectE9IPAddresst+0x2d0>
 4004e6c:	e7001e04 	addi	fp,fp,120
 4004e70:	e0bfeb17 	ldw	r2,-84(fp)
		_sockindex = MAX_SOCK_NUM;
	}
#if defined(ESP8266) || defined(ESP32)
	if (ip == IPAddress((uint32_t)0) || ip == IPAddress(0xFFFFFFFFul)) return 0;
#else
	if (ip == IPAddress(0ul) || ip == IPAddress(0xFFFFFFFFul)) return 0;
 4004e74:	0001883a 	nop
 4004e78:	1007883a 	mov	r3,r2
 4004e7c:	00bfffc4 	movi	r2,-1
 4004e80:	e0bfea15 	stw	r2,-88(fp)
 4004e84:	1809883a 	mov	r4,r3
 4004e88:	400bd380 	call	400bd38 <_Unwind_SjLj_Resume>
 4004e8c:	e0bfe904 	addi	r2,fp,-92
 4004e90:	1009883a 	mov	r4,r2
 4004e94:	400bb540 	call	400bb54 <_Unwind_SjLj_Unregister>
		usleep(1000);
	}
	Ethernet.socketClose(_sockindex);
	_sockindex = MAX_SOCK_NUM;
	return 0;
}
 4004e98:	e0bff717 	ldw	r2,-36(fp)
 4004e9c:	e6fff804 	addi	sp,fp,-32
 4004ea0:	dfc00917 	ldw	ra,36(sp)
 4004ea4:	df000817 	ldw	fp,32(sp)
 4004ea8:	ddc00717 	ldw	r23,28(sp)
 4004eac:	dd800617 	ldw	r22,24(sp)
 4004eb0:	dd400517 	ldw	r21,20(sp)
 4004eb4:	dd000417 	ldw	r20,16(sp)
 4004eb8:	dcc00317 	ldw	r19,12(sp)
 4004ebc:	dc800217 	ldw	r18,8(sp)
 4004ec0:	dc400117 	ldw	r17,4(sp)
 4004ec4:	dc000017 	ldw	r16,0(sp)
 4004ec8:	dec00a04 	addi	sp,sp,40
 4004ecc:	f800283a 	ret

04004ed0 <_ZN14EthernetClient17availableForWriteEv>:

int EthernetClient::availableForWrite(void)
{
 4004ed0:	defffd04 	addi	sp,sp,-12
 4004ed4:	dfc00215 	stw	ra,8(sp)
 4004ed8:	df000115 	stw	fp,4(sp)
 4004edc:	df000104 	addi	fp,sp,4
 4004ee0:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004ee4:	e0bfff17 	ldw	r2,-4(fp)
 4004ee8:	10800103 	ldbu	r2,4(r2)
 4004eec:	10803fcc 	andi	r2,r2,255
 4004ef0:	10800230 	cmpltui	r2,r2,8
 4004ef4:	1000021e 	bne	r2,zero,4004f00 <_ZN14EthernetClient17availableForWriteEv+0x30>
 4004ef8:	0005883a 	mov	r2,zero
 4004efc:	00000606 	br	4004f18 <_ZN14EthernetClient17availableForWriteEv+0x48>
	return Ethernet.socketSendAvailable(_sockindex);
 4004f00:	e0bfff17 	ldw	r2,-4(fp)
 4004f04:	10800103 	ldbu	r2,4(r2)
 4004f08:	10803fcc 	andi	r2,r2,255
 4004f0c:	1009883a 	mov	r4,r2
 4004f10:	4007b380 	call	4007b38 <_ZN13EthernetClass19socketSendAvailableEh>
 4004f14:	10bfffcc 	andi	r2,r2,65535
}
 4004f18:	e037883a 	mov	sp,fp
 4004f1c:	dfc00117 	ldw	ra,4(sp)
 4004f20:	df000017 	ldw	fp,0(sp)
 4004f24:	dec00204 	addi	sp,sp,8
 4004f28:	f800283a 	ret

04004f2c <_ZN14EthernetClient5writeEh>:

size_t EthernetClient::write(uint8_t b)
{
 4004f2c:	defffc04 	addi	sp,sp,-16
 4004f30:	dfc00315 	stw	ra,12(sp)
 4004f34:	df000215 	stw	fp,8(sp)
 4004f38:	df000204 	addi	fp,sp,8
 4004f3c:	e13ffe15 	stw	r4,-8(fp)
 4004f40:	2805883a 	mov	r2,r5
 4004f44:	e0bfff05 	stb	r2,-4(fp)
	return write(&b, 1);
 4004f48:	e0bffe17 	ldw	r2,-8(fp)
 4004f4c:	10800017 	ldw	r2,0(r2)
 4004f50:	10800304 	addi	r2,r2,12
 4004f54:	10800017 	ldw	r2,0(r2)
 4004f58:	e0ffff04 	addi	r3,fp,-4
 4004f5c:	01800044 	movi	r6,1
 4004f60:	180b883a 	mov	r5,r3
 4004f64:	e13ffe17 	ldw	r4,-8(fp)
 4004f68:	103ee83a 	callr	r2
}
 4004f6c:	e037883a 	mov	sp,fp
 4004f70:	dfc00117 	ldw	ra,4(sp)
 4004f74:	df000017 	ldw	fp,0(sp)
 4004f78:	dec00204 	addi	sp,sp,8
 4004f7c:	f800283a 	ret

04004f80 <_ZN14EthernetClient5writeEPKhj>:

size_t EthernetClient::write(const uint8_t *buf, size_t size)
{
 4004f80:	defffb04 	addi	sp,sp,-20
 4004f84:	dfc00415 	stw	ra,16(sp)
 4004f88:	df000315 	stw	fp,12(sp)
 4004f8c:	df000304 	addi	fp,sp,12
 4004f90:	e13ffd15 	stw	r4,-12(fp)
 4004f94:	e17ffe15 	stw	r5,-8(fp)
 4004f98:	e1bfff15 	stw	r6,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004f9c:	e0bffd17 	ldw	r2,-12(fp)
 4004fa0:	10800103 	ldbu	r2,4(r2)
 4004fa4:	10803fcc 	andi	r2,r2,255
 4004fa8:	10800230 	cmpltui	r2,r2,8
 4004fac:	1000021e 	bne	r2,zero,4004fb8 <_ZN14EthernetClient5writeEPKhj+0x38>
 4004fb0:	0005883a 	mov	r2,zero
 4004fb4:	00001006 	br	4004ff8 <_ZN14EthernetClient5writeEPKhj+0x78>
	if (Ethernet.socketSend(_sockindex, buf, size)) return size;
 4004fb8:	e0bffd17 	ldw	r2,-12(fp)
 4004fbc:	10800103 	ldbu	r2,4(r2)
 4004fc0:	10c03fcc 	andi	r3,r2,255
 4004fc4:	e0bfff17 	ldw	r2,-4(fp)
 4004fc8:	10bfffcc 	andi	r2,r2,65535
 4004fcc:	100d883a 	mov	r6,r2
 4004fd0:	e17ffe17 	ldw	r5,-8(fp)
 4004fd4:	1809883a 	mov	r4,r3
 4004fd8:	4007a000 	call	4007a00 <_ZN13EthernetClass10socketSendEhPKht>
 4004fdc:	10bfffcc 	andi	r2,r2,65535
 4004fe0:	1004c03a 	cmpne	r2,r2,zero
 4004fe4:	10803fcc 	andi	r2,r2,255
 4004fe8:	10000226 	beq	r2,zero,4004ff4 <_ZN14EthernetClient5writeEPKhj+0x74>
 4004fec:	e0bfff17 	ldw	r2,-4(fp)
 4004ff0:	00000106 	br	4004ff8 <_ZN14EthernetClient5writeEPKhj+0x78>
	// setWriteError();
	return 0;
 4004ff4:	0005883a 	mov	r2,zero
}
 4004ff8:	e037883a 	mov	sp,fp
 4004ffc:	dfc00117 	ldw	ra,4(sp)
 4005000:	df000017 	ldw	fp,0(sp)
 4005004:	dec00204 	addi	sp,sp,8
 4005008:	f800283a 	ret

0400500c <_ZN14EthernetClient5printEPKc>:

size_t EthernetClient::print(const char *buf)
{
 400500c:	defffb04 	addi	sp,sp,-20
 4005010:	dfc00415 	stw	ra,16(sp)
 4005014:	df000315 	stw	fp,12(sp)
 4005018:	df000304 	addi	fp,sp,12
 400501c:	e13ffe15 	stw	r4,-8(fp)
 4005020:	e17fff15 	stw	r5,-4(fp)
	size_t len = strlen(buf);
 4005024:	e13fff17 	ldw	r4,-4(fp)
 4005028:	400d0300 	call	400d030 <strlen>
 400502c:	e0bffd15 	stw	r2,-12(fp)
	write((uint8_t*)buf, len);
 4005030:	e0bffe17 	ldw	r2,-8(fp)
 4005034:	10800017 	ldw	r2,0(r2)
 4005038:	10800304 	addi	r2,r2,12
 400503c:	10800017 	ldw	r2,0(r2)
 4005040:	e1bffd17 	ldw	r6,-12(fp)
 4005044:	e17fff17 	ldw	r5,-4(fp)
 4005048:	e13ffe17 	ldw	r4,-8(fp)
 400504c:	103ee83a 	callr	r2
	return 0;
 4005050:	0005883a 	mov	r2,zero
}
 4005054:	e037883a 	mov	sp,fp
 4005058:	dfc00117 	ldw	ra,4(sp)
 400505c:	df000017 	ldw	fp,0(sp)
 4005060:	dec00204 	addi	sp,sp,8
 4005064:	f800283a 	ret

04005068 <_ZN14EthernetClient7printlnEv>:

size_t EthernetClient::println()
{
 4005068:	defffd04 	addi	sp,sp,-12
 400506c:	dfc00215 	stw	ra,8(sp)
 4005070:	df000115 	stw	fp,4(sp)
 4005074:	df000104 	addi	fp,sp,4
 4005078:	e13fff15 	stw	r4,-4(fp)
	return println("\n");
 400507c:	e0bfff17 	ldw	r2,-4(fp)
 4005080:	10800017 	ldw	r2,0(r2)
 4005084:	10801104 	addi	r2,r2,68
 4005088:	10800017 	ldw	r2,0(r2)
 400508c:	014100b4 	movhi	r5,1026
 4005090:	297eae04 	addi	r5,r5,-1352
 4005094:	e13fff17 	ldw	r4,-4(fp)
 4005098:	103ee83a 	callr	r2
}
 400509c:	e037883a 	mov	sp,fp
 40050a0:	dfc00117 	ldw	ra,4(sp)
 40050a4:	df000017 	ldw	fp,0(sp)
 40050a8:	dec00204 	addi	sp,sp,8
 40050ac:	f800283a 	ret

040050b0 <_ZN14EthernetClient7printlnEPKc>:

size_t EthernetClient::println(const char *buf)
{
 40050b0:	defffb04 	addi	sp,sp,-20
 40050b4:	dfc00415 	stw	ra,16(sp)
 40050b8:	df000315 	stw	fp,12(sp)
 40050bc:	df000304 	addi	fp,sp,12
 40050c0:	e13ffe15 	stw	r4,-8(fp)
 40050c4:	e17fff15 	stw	r5,-4(fp)
	size_t len = strlen(buf);
 40050c8:	e13fff17 	ldw	r4,-4(fp)
 40050cc:	400d0300 	call	400d030 <strlen>
 40050d0:	e0bffd15 	stw	r2,-12(fp)
	write((uint8_t*)buf, len);
 40050d4:	e0bffe17 	ldw	r2,-8(fp)
 40050d8:	10800017 	ldw	r2,0(r2)
 40050dc:	10800304 	addi	r2,r2,12
 40050e0:	10800017 	ldw	r2,0(r2)
 40050e4:	e1bffd17 	ldw	r6,-12(fp)
 40050e8:	e17fff17 	ldw	r5,-4(fp)
 40050ec:	e13ffe17 	ldw	r4,-8(fp)
 40050f0:	103ee83a 	callr	r2
	write((uint8_t*)"\n", 1);
 40050f4:	e0bffe17 	ldw	r2,-8(fp)
 40050f8:	10800017 	ldw	r2,0(r2)
 40050fc:	10800304 	addi	r2,r2,12
 4005100:	10800017 	ldw	r2,0(r2)
 4005104:	01800044 	movi	r6,1
 4005108:	014100b4 	movhi	r5,1026
 400510c:	297eae04 	addi	r5,r5,-1352
 4005110:	e13ffe17 	ldw	r4,-8(fp)
 4005114:	103ee83a 	callr	r2
	return 0;
 4005118:	0005883a 	mov	r2,zero
}
 400511c:	e037883a 	mov	sp,fp
 4005120:	dfc00117 	ldw	ra,4(sp)
 4005124:	df000017 	ldw	fp,0(sp)
 4005128:	dec00204 	addi	sp,sp,8
 400512c:	f800283a 	ret

04005130 <_ZN14EthernetClient9availableEv>:

int EthernetClient::available()
{
 4005130:	defffd04 	addi	sp,sp,-12
 4005134:	dfc00215 	stw	ra,8(sp)
 4005138:	df000115 	stw	fp,4(sp)
 400513c:	df000104 	addi	fp,sp,4
 4005140:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4005144:	e0bfff17 	ldw	r2,-4(fp)
 4005148:	10800103 	ldbu	r2,4(r2)
 400514c:	10803fcc 	andi	r2,r2,255
 4005150:	10800230 	cmpltui	r2,r2,8
 4005154:	1000021e 	bne	r2,zero,4005160 <_ZN14EthernetClient9availableEv+0x30>
 4005158:	0005883a 	mov	r2,zero
 400515c:	00000606 	br	4005178 <_ZN14EthernetClient9availableEv+0x48>
	return Ethernet.socketRecvAvailable(_sockindex);
 4005160:	e0bfff17 	ldw	r2,-4(fp)
 4005164:	10800103 	ldbu	r2,4(r2)
 4005168:	10803fcc 	andi	r2,r2,255
 400516c:	1009883a 	mov	r4,r2
 4005170:	40076e40 	call	40076e4 <_ZN13EthernetClass19socketRecvAvailableEh>
 4005174:	10bfffcc 	andi	r2,r2,65535
	// packets if they are lost by the network?  Someday this should
	// be checked by a man-in-the-middle test which discards certain
	// packets.  If ACKs aren't resent, we would need to check for
	// returning 0 here and after a timeout do another Sock_RECV
	// command to cause the WIZnet chip to resend the ACK packet.
}
 4005178:	e037883a 	mov	sp,fp
 400517c:	dfc00117 	ldw	ra,4(sp)
 4005180:	df000017 	ldw	fp,0(sp)
 4005184:	dec00204 	addi	sp,sp,8
 4005188:	f800283a 	ret

0400518c <_ZN14EthernetClient4readEPhj>:

int EthernetClient::read(uint8_t *buf, size_t size)
{
 400518c:	defffb04 	addi	sp,sp,-20
 4005190:	dfc00415 	stw	ra,16(sp)
 4005194:	df000315 	stw	fp,12(sp)
 4005198:	df000304 	addi	fp,sp,12
 400519c:	e13ffd15 	stw	r4,-12(fp)
 40051a0:	e17ffe15 	stw	r5,-8(fp)
 40051a4:	e1bfff15 	stw	r6,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 40051a8:	e0bffd17 	ldw	r2,-12(fp)
 40051ac:	10800103 	ldbu	r2,4(r2)
 40051b0:	10803fcc 	andi	r2,r2,255
 40051b4:	10800230 	cmpltui	r2,r2,8
 40051b8:	1000021e 	bne	r2,zero,40051c4 <_ZN14EthernetClient4readEPhj+0x38>
 40051bc:	0005883a 	mov	r2,zero
 40051c0:	00000b06 	br	40051f0 <_ZN14EthernetClient4readEPhj+0x64>
	return Ethernet.socketRecv(_sockindex, buf, size);
 40051c4:	e0bffd17 	ldw	r2,-12(fp)
 40051c8:	10800103 	ldbu	r2,4(r2)
 40051cc:	10803fcc 	andi	r2,r2,255
 40051d0:	e0ffff17 	ldw	r3,-4(fp)
 40051d4:	18ffffcc 	andi	r3,r3,65535
 40051d8:	18e0001c 	xori	r3,r3,32768
 40051dc:	18e00004 	addi	r3,r3,-32768
 40051e0:	180d883a 	mov	r6,r3
 40051e4:	e17ffe17 	ldw	r5,-8(fp)
 40051e8:	1009883a 	mov	r4,r2
 40051ec:	40074440 	call	4007444 <_ZN13EthernetClass10socketRecvEhPhs>
}
 40051f0:	e037883a 	mov	sp,fp
 40051f4:	dfc00117 	ldw	ra,4(sp)
 40051f8:	df000017 	ldw	fp,0(sp)
 40051fc:	dec00204 	addi	sp,sp,8
 4005200:	f800283a 	ret

04005204 <_ZN14EthernetClient4peekEv>:

int EthernetClient::peek()
{
 4005204:	defffd04 	addi	sp,sp,-12
 4005208:	dfc00215 	stw	ra,8(sp)
 400520c:	df000115 	stw	fp,4(sp)
 4005210:	df000104 	addi	fp,sp,4
 4005214:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return -1;
 4005218:	e0bfff17 	ldw	r2,-4(fp)
 400521c:	10800103 	ldbu	r2,4(r2)
 4005220:	10803fcc 	andi	r2,r2,255
 4005224:	10800230 	cmpltui	r2,r2,8
 4005228:	1000021e 	bne	r2,zero,4005234 <_ZN14EthernetClient4peekEv+0x30>
 400522c:	00bfffc4 	movi	r2,-1
 4005230:	00001106 	br	4005278 <_ZN14EthernetClient4peekEv+0x74>
	if (!available()) return -1;
 4005234:	e0bfff17 	ldw	r2,-4(fp)
 4005238:	10800017 	ldw	r2,0(r2)
 400523c:	10800404 	addi	r2,r2,16
 4005240:	10800017 	ldw	r2,0(r2)
 4005244:	e13fff17 	ldw	r4,-4(fp)
 4005248:	103ee83a 	callr	r2
 400524c:	1005003a 	cmpeq	r2,r2,zero
 4005250:	10803fcc 	andi	r2,r2,255
 4005254:	10000226 	beq	r2,zero,4005260 <_ZN14EthernetClient4peekEv+0x5c>
 4005258:	00bfffc4 	movi	r2,-1
 400525c:	00000606 	br	4005278 <_ZN14EthernetClient4peekEv+0x74>
	return Ethernet.socketPeek(_sockindex);
 4005260:	e0bfff17 	ldw	r2,-4(fp)
 4005264:	10800103 	ldbu	r2,4(r2)
 4005268:	10803fcc 	andi	r2,r2,255
 400526c:	1009883a 	mov	r4,r2
 4005270:	40077900 	call	4007790 <_ZN13EthernetClass10socketPeekEh>
 4005274:	10803fcc 	andi	r2,r2,255
}
 4005278:	e037883a 	mov	sp,fp
 400527c:	dfc00117 	ldw	ra,4(sp)
 4005280:	df000017 	ldw	fp,0(sp)
 4005284:	dec00204 	addi	sp,sp,8
 4005288:	f800283a 	ret

0400528c <_ZN14EthernetClient4readEv>:

int EthernetClient::read()
{
 400528c:	defffc04 	addi	sp,sp,-16
 4005290:	dfc00315 	stw	ra,12(sp)
 4005294:	df000215 	stw	fp,8(sp)
 4005298:	df000204 	addi	fp,sp,8
 400529c:	e13fff15 	stw	r4,-4(fp)
	uint8_t b;
	if (Ethernet.socketRecv(_sockindex, &b, 1) > 0) return b;
 40052a0:	e0bfff17 	ldw	r2,-4(fp)
 40052a4:	10800103 	ldbu	r2,4(r2)
 40052a8:	10803fcc 	andi	r2,r2,255
 40052ac:	01800044 	movi	r6,1
 40052b0:	e17ffe04 	addi	r5,fp,-8
 40052b4:	1009883a 	mov	r4,r2
 40052b8:	40074440 	call	4007444 <_ZN13EthernetClass10socketRecvEhPhs>
 40052bc:	0084803a 	cmplt	r2,zero,r2
 40052c0:	10803fcc 	andi	r2,r2,255
 40052c4:	10000326 	beq	r2,zero,40052d4 <_ZN14EthernetClient4readEv+0x48>
 40052c8:	e0bffe03 	ldbu	r2,-8(fp)
 40052cc:	10803fcc 	andi	r2,r2,255
 40052d0:	00000106 	br	40052d8 <_ZN14EthernetClient4readEv+0x4c>
	return -1;
 40052d4:	00bfffc4 	movi	r2,-1
}
 40052d8:	e037883a 	mov	sp,fp
 40052dc:	dfc00117 	ldw	ra,4(sp)
 40052e0:	df000017 	ldw	fp,0(sp)
 40052e4:	dec00204 	addi	sp,sp,8
 40052e8:	f800283a 	ret

040052ec <_ZN14EthernetClient5flushEv>:

void EthernetClient::flush()
{
 40052ec:	defffc04 	addi	sp,sp,-16
 40052f0:	dfc00315 	stw	ra,12(sp)
 40052f4:	df000215 	stw	fp,8(sp)
 40052f8:	df000204 	addi	fp,sp,8
 40052fc:	e13fff15 	stw	r4,-4(fp)
	while (_sockindex < MAX_SOCK_NUM) {
 4005300:	e0bfff17 	ldw	r2,-4(fp)
 4005304:	10800103 	ldbu	r2,4(r2)
 4005308:	10803fcc 	andi	r2,r2,255
 400530c:	10800228 	cmpgeui	r2,r2,8
 4005310:	1000191e 	bne	r2,zero,4005378 <_ZN14EthernetClient5flushEv+0x8c>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
 4005314:	e0bfff17 	ldw	r2,-4(fp)
 4005318:	10800103 	ldbu	r2,4(r2)
 400531c:	10803fcc 	andi	r2,r2,255
 4005320:	1009883a 	mov	r4,r2
 4005324:	40071280 	call	4007128 <_ZN13EthernetClass12socketStatusEh>
 4005328:	e0bffe05 	stb	r2,-8(fp)
		if (stat != SnSR::ESTABLISHED && stat != SnSR::CLOSE_WAIT) return;
 400532c:	e0bffe03 	ldbu	r2,-8(fp)
 4005330:	108005e0 	cmpeqi	r2,r2,23
 4005334:	1000031e 	bne	r2,zero,4005344 <_ZN14EthernetClient5flushEv+0x58>
 4005338:	e0bffe03 	ldbu	r2,-8(fp)
 400533c:	10800720 	cmpeqi	r2,r2,28
 4005340:	10000a26 	beq	r2,zero,400536c <_ZN14EthernetClient5flushEv+0x80>
		if (Ethernet.socketSendAvailable(_sockindex) >= W5100.SSIZE) return;
 4005344:	e0bfff17 	ldw	r2,-4(fp)
 4005348:	10800103 	ldbu	r2,4(r2)
 400534c:	10803fcc 	andi	r2,r2,255
 4005350:	1009883a 	mov	r4,r2
 4005354:	4007b380 	call	4007b38 <_ZN13EthernetClass19socketSendAvailableEh>
 4005358:	10bfffcc 	andi	r2,r2,65535
 400535c:	10820028 	cmpgeui	r2,r2,2048
 4005360:	10803fcc 	andi	r2,r2,255
 4005364:	1000031e 	bne	r2,zero,4005374 <_ZN14EthernetClient5flushEv+0x88>
	return -1;
}

void EthernetClient::flush()
{
	while (_sockindex < MAX_SOCK_NUM) {
 4005368:	003fe506 	br	4005300 <__alt_data_end+0xfc005300>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
		if (stat != SnSR::ESTABLISHED && stat != SnSR::CLOSE_WAIT) return;
 400536c:	0001883a 	nop
 4005370:	00000106 	br	4005378 <_ZN14EthernetClient5flushEv+0x8c>
		if (Ethernet.socketSendAvailable(_sockindex) >= W5100.SSIZE) return;
 4005374:	0001883a 	nop
	}
}
 4005378:	e037883a 	mov	sp,fp
 400537c:	dfc00117 	ldw	ra,4(sp)
 4005380:	df000017 	ldw	fp,0(sp)
 4005384:	dec00204 	addi	sp,sp,8
 4005388:	f800283a 	ret

0400538c <_ZN14EthernetClient4stopEv>:

void EthernetClient::stop()
{
 400538c:	defffc04 	addi	sp,sp,-16
 4005390:	dfc00315 	stw	ra,12(sp)
 4005394:	df000215 	stw	fp,8(sp)
 4005398:	df000204 	addi	fp,sp,8
 400539c:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return;
 40053a0:	e0bfff17 	ldw	r2,-4(fp)
 40053a4:	10800103 	ldbu	r2,4(r2)
 40053a8:	10803fcc 	andi	r2,r2,255
 40053ac:	10800230 	cmpltui	r2,r2,8
 40053b0:	10002a26 	beq	r2,zero,400545c <_ZN14EthernetClient4stopEv+0xd0>

	// attempt to close the connection gracefully (send a FIN to other side)
	Ethernet.socketDisconnect(_sockindex);
 40053b4:	e0bfff17 	ldw	r2,-4(fp)
 40053b8:	10800103 	ldbu	r2,4(r2)
 40053bc:	10803fcc 	andi	r2,r2,255
 40053c0:	1009883a 	mov	r4,r2
 40053c4:	400727c0 	call	400727c <_ZN13EthernetClass16socketDisconnectEh>
	unsigned long start = clock();
 40053c8:	400be6c0 	call	400be6c <clock>
 40053cc:	e0bffe15 	stw	r2,-8(fp)

	// wait up to a second for the connection to close
	do {
		if (Ethernet.socketStatus(_sockindex) == SnSR::CLOSED) {
 40053d0:	e0bfff17 	ldw	r2,-4(fp)
 40053d4:	10800103 	ldbu	r2,4(r2)
 40053d8:	10803fcc 	andi	r2,r2,255
 40053dc:	1009883a 	mov	r4,r2
 40053e0:	40071280 	call	4007128 <_ZN13EthernetClass12socketStatusEh>
 40053e4:	10803fcc 	andi	r2,r2,255
 40053e8:	1005003a 	cmpeq	r2,r2,zero
 40053ec:	10803fcc 	andi	r2,r2,255
 40053f0:	10000426 	beq	r2,zero,4005404 <_ZN14EthernetClient4stopEv+0x78>
			_sockindex = MAX_SOCK_NUM;
 40053f4:	e0bfff17 	ldw	r2,-4(fp)
 40053f8:	00c00204 	movi	r3,8
 40053fc:	10c00105 	stb	r3,4(r2)
			return; // exit the loop
 4005400:	00001706 	br	4005460 <_ZN14EthernetClient4stopEv+0xd4>
		}
		usleep(1000);
 4005404:	0100fa04 	movi	r4,1000
 4005408:	401cc880 	call	401cc88 <usleep>
	} while (clock() - start < _timeout);
 400540c:	400be6c0 	call	400be6c <clock>
 4005410:	1007883a 	mov	r3,r2
 4005414:	e0bffe17 	ldw	r2,-8(fp)
 4005418:	1887c83a 	sub	r3,r3,r2
 400541c:	e0bfff17 	ldw	r2,-4(fp)
 4005420:	1080018b 	ldhu	r2,6(r2)
 4005424:	10bfffcc 	andi	r2,r2,65535
	// attempt to close the connection gracefully (send a FIN to other side)
	Ethernet.socketDisconnect(_sockindex);
	unsigned long start = clock();

	// wait up to a second for the connection to close
	do {
 4005428:	1885803a 	cmpltu	r2,r3,r2
 400542c:	10803fcc 	andi	r2,r2,255
 4005430:	10000126 	beq	r2,zero,4005438 <_ZN14EthernetClient4stopEv+0xac>
 4005434:	003fe606 	br	40053d0 <__alt_data_end+0xfc0053d0>
		}
		usleep(1000);
	} while (clock() - start < _timeout);

	// if it hasn't closed, close it forcefully
	Ethernet.socketClose(_sockindex);
 4005438:	e0bfff17 	ldw	r2,-4(fp)
 400543c:	10800103 	ldbu	r2,4(r2)
 4005440:	10803fcc 	andi	r2,r2,255
 4005444:	1009883a 	mov	r4,r2
 4005448:	40071680 	call	4007168 <_ZN13EthernetClass11socketCloseEh>
	_sockindex = MAX_SOCK_NUM;
 400544c:	e0bfff17 	ldw	r2,-4(fp)
 4005450:	00c00204 	movi	r3,8
 4005454:	10c00105 	stb	r3,4(r2)
 4005458:	00000106 	br	4005460 <_ZN14EthernetClient4stopEv+0xd4>
	}
}

void EthernetClient::stop()
{
	if (_sockindex >= MAX_SOCK_NUM) return;
 400545c:	0001883a 	nop
	} while (clock() - start < _timeout);

	// if it hasn't closed, close it forcefully
	Ethernet.socketClose(_sockindex);
	_sockindex = MAX_SOCK_NUM;
}
 4005460:	e037883a 	mov	sp,fp
 4005464:	dfc00117 	ldw	ra,4(sp)
 4005468:	df000017 	ldw	fp,0(sp)
 400546c:	dec00204 	addi	sp,sp,8
 4005470:	f800283a 	ret

04005474 <_ZN14EthernetClient9connectedEv>:

uint8_t EthernetClient::connected()
{
 4005474:	defffc04 	addi	sp,sp,-16
 4005478:	dfc00315 	stw	ra,12(sp)
 400547c:	df000215 	stw	fp,8(sp)
 4005480:	df000204 	addi	fp,sp,8
 4005484:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4005488:	e0bfff17 	ldw	r2,-4(fp)
 400548c:	10800103 	ldbu	r2,4(r2)
 4005490:	10803fcc 	andi	r2,r2,255
 4005494:	10800230 	cmpltui	r2,r2,8
 4005498:	1000021e 	bne	r2,zero,40054a4 <_ZN14EthernetClient9connectedEv+0x30>
 400549c:	0005883a 	mov	r2,zero
 40054a0:	00001b06 	br	4005510 <_ZN14EthernetClient9connectedEv+0x9c>

	uint8_t s = Ethernet.socketStatus(_sockindex);
 40054a4:	e0bfff17 	ldw	r2,-4(fp)
 40054a8:	10800103 	ldbu	r2,4(r2)
 40054ac:	10803fcc 	andi	r2,r2,255
 40054b0:	1009883a 	mov	r4,r2
 40054b4:	40071280 	call	4007128 <_ZN13EthernetClass12socketStatusEh>
 40054b8:	e0bffe05 	stb	r2,-8(fp)
	return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
		(s == SnSR::CLOSE_WAIT && !available()));
 40054bc:	e0bffe03 	ldbu	r2,-8(fp)
 40054c0:	10800520 	cmpeqi	r2,r2,20
 40054c4:	1000111e 	bne	r2,zero,400550c <_ZN14EthernetClient9connectedEv+0x98>
uint8_t EthernetClient::connected()
{
	if (_sockindex >= MAX_SOCK_NUM) return 0;

	uint8_t s = Ethernet.socketStatus(_sockindex);
	return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
 40054c8:	e0bffe03 	ldbu	r2,-8(fp)
 40054cc:	10000f26 	beq	r2,zero,400550c <_ZN14EthernetClient9connectedEv+0x98>
 40054d0:	e0bffe03 	ldbu	r2,-8(fp)
 40054d4:	10800620 	cmpeqi	r2,r2,24
 40054d8:	10000c1e 	bne	r2,zero,400550c <_ZN14EthernetClient9connectedEv+0x98>
		(s == SnSR::CLOSE_WAIT && !available()));
 40054dc:	e0bffe03 	ldbu	r2,-8(fp)
 40054e0:	10800718 	cmpnei	r2,r2,28
 40054e4:	1000071e 	bne	r2,zero,4005504 <_ZN14EthernetClient9connectedEv+0x90>
 40054e8:	e0bfff17 	ldw	r2,-4(fp)
 40054ec:	10800017 	ldw	r2,0(r2)
 40054f0:	10800404 	addi	r2,r2,16
 40054f4:	10800017 	ldw	r2,0(r2)
 40054f8:	e13fff17 	ldw	r4,-4(fp)
 40054fc:	103ee83a 	callr	r2
 4005500:	10000226 	beq	r2,zero,400550c <_ZN14EthernetClient9connectedEv+0x98>
 4005504:	00800044 	movi	r2,1
 4005508:	00000106 	br	4005510 <_ZN14EthernetClient9connectedEv+0x9c>
 400550c:	0005883a 	mov	r2,zero
}
 4005510:	e037883a 	mov	sp,fp
 4005514:	dfc00117 	ldw	ra,4(sp)
 4005518:	df000017 	ldw	fp,0(sp)
 400551c:	dec00204 	addi	sp,sp,8
 4005520:	f800283a 	ret

04005524 <_ZN14EthernetClient6statusEv>:

uint8_t EthernetClient::status()
{
 4005524:	defffd04 	addi	sp,sp,-12
 4005528:	dfc00215 	stw	ra,8(sp)
 400552c:	df000115 	stw	fp,4(sp)
 4005530:	df000104 	addi	fp,sp,4
 4005534:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return SnSR::CLOSED;
 4005538:	e0bfff17 	ldw	r2,-4(fp)
 400553c:	10800103 	ldbu	r2,4(r2)
 4005540:	10803fcc 	andi	r2,r2,255
 4005544:	10800230 	cmpltui	r2,r2,8
 4005548:	1000021e 	bne	r2,zero,4005554 <_ZN14EthernetClient6statusEv+0x30>
 400554c:	0005883a 	mov	r2,zero
 4005550:	00000506 	br	4005568 <_ZN14EthernetClient6statusEv+0x44>
	return Ethernet.socketStatus(_sockindex);
 4005554:	e0bfff17 	ldw	r2,-4(fp)
 4005558:	10800103 	ldbu	r2,4(r2)
 400555c:	10803fcc 	andi	r2,r2,255
 4005560:	1009883a 	mov	r4,r2
 4005564:	40071280 	call	4007128 <_ZN13EthernetClass12socketStatusEh>
}
 4005568:	e037883a 	mov	sp,fp
 400556c:	dfc00117 	ldw	ra,4(sp)
 4005570:	df000017 	ldw	fp,0(sp)
 4005574:	dec00204 	addi	sp,sp,8
 4005578:	f800283a 	ret

0400557c <_ZN14EthernetClienteqERKS_>:

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.
bool EthernetClient::operator==(const EthernetClient& rhs)
{
 400557c:	defffd04 	addi	sp,sp,-12
 4005580:	df000215 	stw	fp,8(sp)
 4005584:	df000204 	addi	fp,sp,8
 4005588:	e13ffe15 	stw	r4,-8(fp)
 400558c:	e17fff15 	stw	r5,-4(fp)
	if (_sockindex != rhs._sockindex) return false;
 4005590:	e0bffe17 	ldw	r2,-8(fp)
 4005594:	10c00103 	ldbu	r3,4(r2)
 4005598:	e0bfff17 	ldw	r2,-4(fp)
 400559c:	10800103 	ldbu	r2,4(r2)
 40055a0:	18c03fcc 	andi	r3,r3,255
 40055a4:	10803fcc 	andi	r2,r2,255
 40055a8:	18800226 	beq	r3,r2,40055b4 <_ZN14EthernetClienteqERKS_+0x38>
 40055ac:	0005883a 	mov	r2,zero
 40055b0:	00000f06 	br	40055f0 <_ZN14EthernetClienteqERKS_+0x74>
	if (_sockindex >= MAX_SOCK_NUM) return false;
 40055b4:	e0bffe17 	ldw	r2,-8(fp)
 40055b8:	10800103 	ldbu	r2,4(r2)
 40055bc:	10803fcc 	andi	r2,r2,255
 40055c0:	10800230 	cmpltui	r2,r2,8
 40055c4:	1000021e 	bne	r2,zero,40055d0 <_ZN14EthernetClienteqERKS_+0x54>
 40055c8:	0005883a 	mov	r2,zero
 40055cc:	00000806 	br	40055f0 <_ZN14EthernetClienteqERKS_+0x74>
	if (rhs._sockindex >= MAX_SOCK_NUM) return false;
 40055d0:	e0bfff17 	ldw	r2,-4(fp)
 40055d4:	10800103 	ldbu	r2,4(r2)
 40055d8:	10803fcc 	andi	r2,r2,255
 40055dc:	10800230 	cmpltui	r2,r2,8
 40055e0:	1000021e 	bne	r2,zero,40055ec <_ZN14EthernetClienteqERKS_+0x70>
 40055e4:	0005883a 	mov	r2,zero
 40055e8:	00000106 	br	40055f0 <_ZN14EthernetClienteqERKS_+0x74>
	return true;
 40055ec:	00800044 	movi	r2,1
}
 40055f0:	e037883a 	mov	sp,fp
 40055f4:	df000017 	ldw	fp,0(sp)
 40055f8:	dec00104 	addi	sp,sp,4
 40055fc:	f800283a 	ret

04005600 <_ZN14EthernetClient9localPortEv>:

// https://github.com/per1234/EthernetMod
// from: https://github.com/ntruchsess/Arduino-1/commit/937bce1a0bb2567f6d03b15df79525569377dabd
uint16_t EthernetClient::localPort()
{
 4005600:	defffc04 	addi	sp,sp,-16
 4005604:	dfc00315 	stw	ra,12(sp)
 4005608:	df000215 	stw	fp,8(sp)
 400560c:	df000204 	addi	fp,sp,8
 4005610:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4005614:	e0bfff17 	ldw	r2,-4(fp)
 4005618:	10800103 	ldbu	r2,4(r2)
 400561c:	10803fcc 	andi	r2,r2,255
 4005620:	10800230 	cmpltui	r2,r2,8
 4005624:	1000021e 	bne	r2,zero,4005630 <_ZN14EthernetClient9localPortEv+0x30>
 4005628:	0005883a 	mov	r2,zero
 400562c:	00000706 	br	400564c <_ZN14EthernetClient9localPortEv+0x4c>
	uint16_t port;
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	port = W5100.readSnPORT(_sockindex);
 4005630:	e0bfff17 	ldw	r2,-4(fp)
 4005634:	10800103 	ldbu	r2,4(r2)
 4005638:	10803fcc 	andi	r2,r2,255
 400563c:	1009883a 	mov	r4,r2
 4005640:	4005a540 	call	4005a54 <_ZN10W5100Class10readSnPORTEh>
 4005644:	e0bffe0d 	sth	r2,-8(fp)
//	SPI_endTransaction();
	return port;
 4005648:	e0bffe0b 	ldhu	r2,-8(fp)
}
 400564c:	e037883a 	mov	sp,fp
 4005650:	dfc00117 	ldw	ra,4(sp)
 4005654:	df000017 	ldw	fp,0(sp)
 4005658:	dec00204 	addi	sp,sp,8
 400565c:	f800283a 	ret

04005660 <_ZN14EthernetClient8remoteIPEv>:

// https://github.com/per1234/EthernetMod
// returns the remote IP address: https://forum.arduino.cc/index.php?topic=82416.0
IPAddress EthernetClient::remoteIP()
{
 4005660:	defffa04 	addi	sp,sp,-24
 4005664:	dfc00515 	stw	ra,20(sp)
 4005668:	df000415 	stw	fp,16(sp)
 400566c:	df000404 	addi	fp,sp,16
 4005670:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return IPAddress((uint32_t)0);
 4005674:	e0bfff17 	ldw	r2,-4(fp)
 4005678:	10800103 	ldbu	r2,4(r2)
 400567c:	10803fcc 	andi	r2,r2,255
 4005680:	10800230 	cmpltui	r2,r2,8
 4005684:	1000061e 	bne	r2,zero,40056a0 <_ZN14EthernetClient8remoteIPEv+0x40>
 4005688:	e0bffd04 	addi	r2,fp,-12
 400568c:	000b883a 	mov	r5,zero
 4005690:	1009883a 	mov	r4,r2
 4005694:	40085e80 	call	40085e8 <_ZN9IPAddressC1Em>
 4005698:	e0bffd17 	ldw	r2,-12(fp)
 400569c:	00000c06 	br	40056d0 <_ZN14EthernetClient8remoteIPEv+0x70>
	uint8_t remoteIParray[4];
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.readSnDIPR(_sockindex, remoteIParray);
 40056a0:	e0bfff17 	ldw	r2,-4(fp)
 40056a4:	10800103 	ldbu	r2,4(r2)
 40056a8:	10803fcc 	andi	r2,r2,255
 40056ac:	e0fffe04 	addi	r3,fp,-8
 40056b0:	180b883a 	mov	r5,r3
 40056b4:	1009883a 	mov	r4,r2
 40056b8:	4005ab40 	call	4005ab4 <_ZN10W5100Class10readSnDIPREhPh>
//	SPI_endTransaction();
	return IPAddress(remoteIParray);
 40056bc:	e0bffe04 	addi	r2,fp,-8
 40056c0:	100b883a 	mov	r5,r2
 40056c4:	e13ffc04 	addi	r4,fp,-16
 40056c8:	400861c0 	call	400861c <_ZN9IPAddressC1EPKh>
 40056cc:	e0bffc17 	ldw	r2,-16(fp)
}
 40056d0:	e037883a 	mov	sp,fp
 40056d4:	dfc00117 	ldw	ra,4(sp)
 40056d8:	df000017 	ldw	fp,0(sp)
 40056dc:	dec00204 	addi	sp,sp,8
 40056e0:	f800283a 	ret

040056e4 <_ZN14EthernetClient10remotePortEv>:

// https://github.com/per1234/EthernetMod
// from: https://github.com/ntruchsess/Arduino-1/commit/ca37de4ba4ecbdb941f14ac1fe7dd40f3008af75
uint16_t EthernetClient::remotePort()
{
 40056e4:	defffc04 	addi	sp,sp,-16
 40056e8:	dfc00315 	stw	ra,12(sp)
 40056ec:	df000215 	stw	fp,8(sp)
 40056f0:	df000204 	addi	fp,sp,8
 40056f4:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 40056f8:	e0bfff17 	ldw	r2,-4(fp)
 40056fc:	10800103 	ldbu	r2,4(r2)
 4005700:	10803fcc 	andi	r2,r2,255
 4005704:	10800230 	cmpltui	r2,r2,8
 4005708:	1000021e 	bne	r2,zero,4005714 <_ZN14EthernetClient10remotePortEv+0x30>
 400570c:	0005883a 	mov	r2,zero
 4005710:	00000706 	br	4005730 <_ZN14EthernetClient10remotePortEv+0x4c>
	uint16_t port;
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	port = W5100.readSnDPORT(_sockindex);
 4005714:	e0bfff17 	ldw	r2,-4(fp)
 4005718:	10800103 	ldbu	r2,4(r2)
 400571c:	10803fcc 	andi	r2,r2,255
 4005720:	1009883a 	mov	r4,r2
 4005724:	4005afc0 	call	4005afc <_ZN10W5100Class11readSnDPORTEh>
 4005728:	e0bffe0d 	sth	r2,-8(fp)
//	SPI_endTransaction();
	return port;
 400572c:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4005730:	e037883a 	mov	sp,fp
 4005734:	dfc00117 	ldw	ra,4(sp)
 4005738:	df000017 	ldw	fp,0(sp)
 400573c:	dec00204 	addi	sp,sp,8
 4005740:	f800283a 	ret

04005744 <_Z41__static_initialization_and_destruction_0ii>:
 4005744:	defffb04 	addi	sp,sp,-20
 4005748:	dfc00415 	stw	ra,16(sp)
 400574c:	df000315 	stw	fp,12(sp)
 4005750:	df000304 	addi	fp,sp,12
 4005754:	e13ffe15 	stw	r4,-8(fp)
 4005758:	e17fff15 	stw	r5,-4(fp)
 400575c:	e0bffe17 	ldw	r2,-8(fp)
 4005760:	10800058 	cmpnei	r2,r2,1
 4005764:	1000091e 	bne	r2,zero,400578c <_Z41__static_initialization_and_destruction_0ii+0x48>
 4005768:	e0ffff17 	ldw	r3,-4(fp)
 400576c:	00bfffd4 	movui	r2,65535
 4005770:	1880061e 	bne	r3,r2,400578c <_Z41__static_initialization_and_destruction_0ii+0x48>
 4005774:	d8000015 	stw	zero,0(sp)
 4005778:	000f883a 	mov	r7,zero
 400577c:	000d883a 	mov	r6,zero
 4005780:	000b883a 	mov	r5,zero
 4005784:	d112da04 	addi	r4,gp,19304
 4005788:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
 400578c:	0001883a 	nop
 4005790:	e037883a 	mov	sp,fp
 4005794:	dfc00117 	ldw	ra,4(sp)
 4005798:	df000017 	ldw	fp,0(sp)
 400579c:	dec00204 	addi	sp,sp,8
 40057a0:	f800283a 	ret

040057a4 <_GLOBAL__sub_I__ZN14EthernetClient7connectEPKct>:
 40057a4:	defffe04 	addi	sp,sp,-8
 40057a8:	dfc00115 	stw	ra,4(sp)
 40057ac:	df000015 	stw	fp,0(sp)
 40057b0:	d839883a 	mov	fp,sp
 40057b4:	017fffd4 	movui	r5,65535
 40057b8:	01000044 	movi	r4,1
 40057bc:	40057440 	call	4005744 <_Z41__static_initialization_and_destruction_0ii>
 40057c0:	e037883a 	mov	sp,fp
 40057c4:	dfc00117 	ldw	ra,4(sp)
 40057c8:	df000017 	ldw	fp,0(sp)
 40057cc:	dec00204 	addi	sp,sp,8
 40057d0:	f800283a 	ret

040057d4 <_ZN6Client12rawIPAddressER9IPAddress>:
  virtual void flush() = 0;
  virtual void stop() = 0;
  virtual uint8_t connected() = 0;
  virtual operator bool() = 0;
protected:
  uint8_t* rawIPAddress(IPAddress& addr) { return addr.raw_address(); };
 40057d4:	defffc04 	addi	sp,sp,-16
 40057d8:	dfc00315 	stw	ra,12(sp)
 40057dc:	df000215 	stw	fp,8(sp)
 40057e0:	df000204 	addi	fp,sp,8
 40057e4:	e13ffe15 	stw	r4,-8(fp)
 40057e8:	e17fff15 	stw	r5,-4(fp)
 40057ec:	e13fff17 	ldw	r4,-4(fp)
 40057f0:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 40057f4:	e037883a 	mov	sp,fp
 40057f8:	dfc00117 	ldw	ra,4(sp)
 40057fc:	df000017 	ldw	fp,0(sp)
 4005800:	dec00204 	addi	sp,sp,8
 4005804:	f800283a 	ret

04005808 <_ZN13EthernetClass11dnsServerIPEv>:

	static void MACAddress(uint8_t *mac_address);
	static IPAddress localIP();
	static IPAddress subnetMask();
	static IPAddress gatewayIP();
	static IPAddress dnsServerIP() { return _dnsServerAddress; }
 4005808:	deffff04 	addi	sp,sp,-4
 400580c:	df000015 	stw	fp,0(sp)
 4005810:	d839883a 	mov	fp,sp
 4005814:	d092d517 	ldw	r2,19284(gp)
 4005818:	e037883a 	mov	sp,fp
 400581c:	df000017 	ldw	fp,0(sp)
 4005820:	dec00104 	addi	sp,sp,4
 4005824:	f800283a 	ret

04005828 <_ZN14EthernetClientD1Ev>:

class EthernetClient : public Client {
public:
	EthernetClient() : _sockindex(MAX_SOCK_NUM), _timeout(1000) { }
	EthernetClient(uint8_t s) : _sockindex(s), _timeout(1000) { }
	virtual ~EthernetClient() {};
 4005828:	defffd04 	addi	sp,sp,-12
 400582c:	dfc00215 	stw	ra,8(sp)
 4005830:	df000115 	stw	fp,4(sp)
 4005834:	df000104 	addi	fp,sp,4
 4005838:	e13fff15 	stw	r4,-4(fp)
 400583c:	008100b4 	movhi	r2,1026
 4005840:	10beb104 	addi	r2,r2,-1340
 4005844:	e0ffff17 	ldw	r3,-4(fp)
 4005848:	18800015 	stw	r2,0(r3)
 400584c:	0005883a 	mov	r2,zero
 4005850:	10000226 	beq	r2,zero,400585c <_ZN14EthernetClientD1Ev+0x34>
 4005854:	e13fff17 	ldw	r4,-4(fp)
 4005858:	400ac200 	call	400ac20 <_ZdlPv>
 400585c:	e037883a 	mov	sp,fp
 4005860:	dfc00117 	ldw	ra,4(sp)
 4005864:	df000017 	ldw	fp,0(sp)
 4005868:	dec00204 	addi	sp,sp,8
 400586c:	f800283a 	ret

04005870 <_ZN14EthernetClientD0Ev>:
 4005870:	defffd04 	addi	sp,sp,-12
 4005874:	dfc00215 	stw	ra,8(sp)
 4005878:	df000115 	stw	fp,4(sp)
 400587c:	df000104 	addi	fp,sp,4
 4005880:	e13fff15 	stw	r4,-4(fp)
 4005884:	e13fff17 	ldw	r4,-4(fp)
 4005888:	40058280 	call	4005828 <_ZN14EthernetClientD1Ev>
 400588c:	e13fff17 	ldw	r4,-4(fp)
 4005890:	400ac200 	call	400ac20 <_ZdlPv>
 4005894:	e037883a 	mov	sp,fp
 4005898:	dfc00117 	ldw	ra,4(sp)
 400589c:	df000017 	ldw	fp,0(sp)
 40058a0:	dec00204 	addi	sp,sp,8
 40058a4:	f800283a 	ret

040058a8 <_ZN14EthernetClientcvbEv>:
	virtual int read(uint8_t *buf, size_t size);
	virtual int peek();
	virtual void flush();
	virtual void stop();
	virtual uint8_t connected();
	virtual operator bool() { return _sockindex < MAX_SOCK_NUM; }
 40058a8:	defffe04 	addi	sp,sp,-8
 40058ac:	df000115 	stw	fp,4(sp)
 40058b0:	df000104 	addi	fp,sp,4
 40058b4:	e13fff15 	stw	r4,-4(fp)
 40058b8:	e0bfff17 	ldw	r2,-4(fp)
 40058bc:	10800103 	ldbu	r2,4(r2)
 40058c0:	10803fcc 	andi	r2,r2,255
 40058c4:	10800230 	cmpltui	r2,r2,8
 40058c8:	e037883a 	mov	sp,fp
 40058cc:	df000017 	ldw	fp,0(sp)
 40058d0:	dec00104 	addi	sp,sp,4
 40058d4:	f800283a 	ret

040058d8 <_ZN14EthernetClienteqEb>:
	virtual bool operator==(const bool value) { return bool() == value; }
 40058d8:	defffd04 	addi	sp,sp,-12
 40058dc:	df000215 	stw	fp,8(sp)
 40058e0:	df000204 	addi	fp,sp,8
 40058e4:	e13ffe15 	stw	r4,-8(fp)
 40058e8:	2805883a 	mov	r2,r5
 40058ec:	e0bfff05 	stb	r2,-4(fp)
 40058f0:	e0bfff03 	ldbu	r2,-4(fp)
 40058f4:	1080005c 	xori	r2,r2,1
 40058f8:	e037883a 	mov	sp,fp
 40058fc:	df000017 	ldw	fp,0(sp)
 4005900:	dec00104 	addi	sp,sp,4
 4005904:	f800283a 	ret

04005908 <_ZN14EthernetClientneEb>:
	virtual bool operator!=(const bool value) { return bool() != value; }
 4005908:	defffd04 	addi	sp,sp,-12
 400590c:	df000215 	stw	fp,8(sp)
 4005910:	df000204 	addi	fp,sp,8
 4005914:	e13ffe15 	stw	r4,-8(fp)
 4005918:	2805883a 	mov	r2,r5
 400591c:	e0bfff05 	stb	r2,-4(fp)
 4005920:	e0bfff03 	ldbu	r2,-4(fp)
 4005924:	e037883a 	mov	sp,fp
 4005928:	df000017 	ldw	fp,0(sp)
 400592c:	dec00104 	addi	sp,sp,4
 4005930:	f800283a 	ret

04005934 <_ZN14EthernetClientneERKS_>:
	virtual bool operator==(const EthernetClient&);
	virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); }
 4005934:	defffc04 	addi	sp,sp,-16
 4005938:	dfc00315 	stw	ra,12(sp)
 400593c:	df000215 	stw	fp,8(sp)
 4005940:	df000204 	addi	fp,sp,8
 4005944:	e13ffe15 	stw	r4,-8(fp)
 4005948:	e17fff15 	stw	r5,-4(fp)
 400594c:	e0bffe17 	ldw	r2,-8(fp)
 4005950:	10800017 	ldw	r2,0(r2)
 4005954:	10801404 	addi	r2,r2,80
 4005958:	10800017 	ldw	r2,0(r2)
 400595c:	e17fff17 	ldw	r5,-4(fp)
 4005960:	e13ffe17 	ldw	r4,-8(fp)
 4005964:	103ee83a 	callr	r2
 4005968:	1080005c 	xori	r2,r2,1
 400596c:	e037883a 	mov	sp,fp
 4005970:	dfc00117 	ldw	ra,4(sp)
 4005974:	df000017 	ldw	fp,0(sp)
 4005978:	dec00204 	addi	sp,sp,8
 400597c:	f800283a 	ret

04005980 <_ZN14EthernetClient20setConnectionTimeoutEt>:
	uint8_t getSocketNumber() const { return _sockindex; }
	virtual uint16_t localPort();
	virtual IPAddress remoteIP();
	virtual uint16_t remotePort();
	virtual void setConnectionTimeout(uint16_t timeout) { _timeout = timeout; }
 4005980:	defffd04 	addi	sp,sp,-12
 4005984:	df000215 	stw	fp,8(sp)
 4005988:	df000204 	addi	fp,sp,8
 400598c:	e13ffe15 	stw	r4,-8(fp)
 4005990:	2805883a 	mov	r2,r5
 4005994:	e0bfff0d 	sth	r2,-4(fp)
 4005998:	e0bffe17 	ldw	r2,-8(fp)
 400599c:	e0ffff0b 	ldhu	r3,-4(fp)
 40059a0:	10c0018d 	sth	r3,6(r2)
 40059a4:	0001883a 	nop
 40059a8:	e037883a 	mov	sp,fp
 40059ac:	df000017 	ldw	fp,0(sp)
 40059b0:	dec00104 	addi	sp,sp,4
 40059b4:	f800283a 	ret

040059b8 <_ZN10W5100Class7CH_BASEEv>:
#undef __GP_REGISTER_N

  // W5100 Socket registers
  // ----------------------
private:
  static uint16_t CH_BASE(void) {
 40059b8:	deffff04 	addi	sp,sp,-4
 40059bc:	df000015 	stw	fp,0(sp)
 40059c0:	d839883a 	mov	fp,sp
    //if (chip == 55) return 0x1000;
    //if (chip == 52) return 0x4000;
    //return 0x0400;
    return CH_BASE_MSB << 8;
 40059c4:	d092e043 	ldbu	r2,19329(gp)
 40059c8:	10803fcc 	andi	r2,r2,255
 40059cc:	1004923a 	slli	r2,r2,8
  }
 40059d0:	e037883a 	mov	sp,fp
 40059d4:	df000017 	ldw	fp,0(sp)
 40059d8:	dec00104 	addi	sp,sp,4
 40059dc:	f800283a 	ret

040059e0 <_ZN10W5100Class6readSnEhtPht>:
    return read(CH_BASE() + s * CH_SIZE + addr);
  }
  static inline uint8_t writeSn(SOCKET s, uint16_t addr, uint8_t data) {
    return write(CH_BASE() + s * CH_SIZE + addr, data);
  }
  static inline uint16_t readSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
 40059e0:	defffa04 	addi	sp,sp,-24
 40059e4:	dfc00515 	stw	ra,20(sp)
 40059e8:	df000415 	stw	fp,16(sp)
 40059ec:	df000404 	addi	fp,sp,16
 40059f0:	2807883a 	mov	r3,r5
 40059f4:	e1bffe15 	stw	r6,-8(fp)
 40059f8:	3805883a 	mov	r2,r7
 40059fc:	e13ffc05 	stb	r4,-16(fp)
 4005a00:	e0fffd0d 	sth	r3,-12(fp)
 4005a04:	e0bfff0d 	sth	r2,-4(fp)
    return read(CH_BASE() + s * CH_SIZE + addr, buf, len);
 4005a08:	40059b80 	call	40059b8 <_ZN10W5100Class7CH_BASEEv>
 4005a0c:	1007883a 	mov	r3,r2
 4005a10:	e0bffc03 	ldbu	r2,-16(fp)
 4005a14:	1004923a 	slli	r2,r2,8
 4005a18:	1885883a 	add	r2,r3,r2
 4005a1c:	1007883a 	mov	r3,r2
 4005a20:	e0bffd0b 	ldhu	r2,-12(fp)
 4005a24:	1885883a 	add	r2,r3,r2
 4005a28:	10bfffcc 	andi	r2,r2,65535
 4005a2c:	e0ffff0b 	ldhu	r3,-4(fp)
 4005a30:	180d883a 	mov	r6,r3
 4005a34:	e17ffe17 	ldw	r5,-8(fp)
 4005a38:	1009883a 	mov	r4,r2
 4005a3c:	4008fb00 	call	4008fb0 <_ZN10W5100Class4readEtPht>
  }
 4005a40:	e037883a 	mov	sp,fp
 4005a44:	dfc00117 	ldw	ra,4(sp)
 4005a48:	df000017 	ldw	fp,0(sp)
 4005a4c:	dec00204 	addi	sp,sp,8
 4005a50:	f800283a 	ret

04005a54 <_ZN10W5100Class10readSnPORTEh>:
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
 4005a54:	defffc04 	addi	sp,sp,-16
 4005a58:	dfc00315 	stw	ra,12(sp)
 4005a5c:	df000215 	stw	fp,8(sp)
 4005a60:	df000204 	addi	fp,sp,8
 4005a64:	2005883a 	mov	r2,r4
 4005a68:	e0bfff05 	stb	r2,-4(fp)
 4005a6c:	e0bfff03 	ldbu	r2,-4(fp)
 4005a70:	01c00084 	movi	r7,2
 4005a74:	e1bffe04 	addi	r6,fp,-8
 4005a78:	01400104 	movi	r5,4
 4005a7c:	1009883a 	mov	r4,r2
 4005a80:	40059e00 	call	40059e0 <_ZN10W5100Class6readSnEhtPht>
 4005a84:	e0bffe03 	ldbu	r2,-8(fp)
 4005a88:	10803fcc 	andi	r2,r2,255
 4005a8c:	1004923a 	slli	r2,r2,8
 4005a90:	1007883a 	mov	r3,r2
 4005a94:	e0bffe43 	ldbu	r2,-7(fp)
 4005a98:	10803fcc 	andi	r2,r2,255
 4005a9c:	1884b03a 	or	r2,r3,r2
 4005aa0:	e037883a 	mov	sp,fp
 4005aa4:	dfc00117 	ldw	ra,4(sp)
 4005aa8:	df000017 	ldw	fp,0(sp)
 4005aac:	dec00204 	addi	sp,sp,8
 4005ab0:	f800283a 	ret

04005ab4 <_ZN10W5100Class10readSnDIPREhPh>:
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
 4005ab4:	defffc04 	addi	sp,sp,-16
 4005ab8:	dfc00315 	stw	ra,12(sp)
 4005abc:	df000215 	stw	fp,8(sp)
 4005ac0:	df000204 	addi	fp,sp,8
 4005ac4:	2005883a 	mov	r2,r4
 4005ac8:	e17fff15 	stw	r5,-4(fp)
 4005acc:	e0bffe05 	stb	r2,-8(fp)
 4005ad0:	e0bffe03 	ldbu	r2,-8(fp)
 4005ad4:	01c00104 	movi	r7,4
 4005ad8:	e1bfff17 	ldw	r6,-4(fp)
 4005adc:	01400304 	movi	r5,12
 4005ae0:	1009883a 	mov	r4,r2
 4005ae4:	40059e00 	call	40059e0 <_ZN10W5100Class6readSnEhtPht>
 4005ae8:	e037883a 	mov	sp,fp
 4005aec:	dfc00117 	ldw	ra,4(sp)
 4005af0:	df000017 	ldw	fp,0(sp)
 4005af4:	dec00204 	addi	sp,sp,8
 4005af8:	f800283a 	ret

04005afc <_ZN10W5100Class11readSnDPORTEh>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
 4005afc:	defffc04 	addi	sp,sp,-16
 4005b00:	dfc00315 	stw	ra,12(sp)
 4005b04:	df000215 	stw	fp,8(sp)
 4005b08:	df000204 	addi	fp,sp,8
 4005b0c:	2005883a 	mov	r2,r4
 4005b10:	e0bfff05 	stb	r2,-4(fp)
 4005b14:	e0bfff03 	ldbu	r2,-4(fp)
 4005b18:	01c00084 	movi	r7,2
 4005b1c:	e1bffe04 	addi	r6,fp,-8
 4005b20:	01400404 	movi	r5,16
 4005b24:	1009883a 	mov	r4,r2
 4005b28:	40059e00 	call	40059e0 <_ZN10W5100Class6readSnEhtPht>
 4005b2c:	e0bffe03 	ldbu	r2,-8(fp)
 4005b30:	10803fcc 	andi	r2,r2,255
 4005b34:	1004923a 	slli	r2,r2,8
 4005b38:	1007883a 	mov	r3,r2
 4005b3c:	e0bffe43 	ldbu	r2,-7(fp)
 4005b40:	10803fcc 	andi	r2,r2,255
 4005b44:	1884b03a 	or	r2,r3,r2
 4005b48:	e037883a 	mov	sp,fp
 4005b4c:	dfc00117 	ldw	ra,4(sp)
 4005b50:	df000017 	ldw	fp,0(sp)
 4005b54:	dec00204 	addi	sp,sp,8
 4005b58:	f800283a 	ret

04005b5c <_ZN9DNSClientC1Ev>:
#ifndef DNSClient_h
#define DNSClient_h

#include "Ethernet.h"

class DNSClient
 4005b5c:	defffd04 	addi	sp,sp,-12
 4005b60:	dfc00215 	stw	ra,8(sp)
 4005b64:	df000115 	stw	fp,4(sp)
 4005b68:	df000104 	addi	fp,sp,4
 4005b6c:	e13fff15 	stw	r4,-4(fp)
 4005b70:	e0bfff17 	ldw	r2,-4(fp)
 4005b74:	1009883a 	mov	r4,r2
 4005b78:	400854c0 	call	400854c <_ZN9IPAddressC1Ev>
 4005b7c:	e0bfff17 	ldw	r2,-4(fp)
 4005b80:	10800204 	addi	r2,r2,8
 4005b84:	1009883a 	mov	r4,r2
 4005b88:	40044e00 	call	40044e0 <_ZN11EthernetUDPC1Ev>
 4005b8c:	0001883a 	nop
 4005b90:	e037883a 	mov	sp,fp
 4005b94:	dfc00117 	ldw	ra,4(sp)
 4005b98:	df000017 	ldw	fp,0(sp)
 4005b9c:	dec00204 	addi	sp,sp,8
 4005ba0:	f800283a 	ret

04005ba4 <_ZN14EthernetServer5beginEv>:

uint16_t EthernetServer::server_port[MAX_SOCK_NUM];


void EthernetServer::begin()
{
 4005ba4:	defffc04 	addi	sp,sp,-16
 4005ba8:	dfc00315 	stw	ra,12(sp)
 4005bac:	df000215 	stw	fp,8(sp)
 4005bb0:	df000204 	addi	fp,sp,8
 4005bb4:	e13fff15 	stw	r4,-4(fp)
	uint8_t sockindex = Ethernet.socketBegin(SnMR::TCP, _port);
 4005bb8:	e0bfff17 	ldw	r2,-4(fp)
 4005bbc:	1080010b 	ldhu	r2,4(r2)
 4005bc0:	10bfffcc 	andi	r2,r2,65535
 4005bc4:	100b883a 	mov	r5,r2
 4005bc8:	01000844 	movi	r4,33
 4005bcc:	4006b3c0 	call	4006b3c <_ZN13EthernetClass11socketBeginEht>
 4005bd0:	e0bffe05 	stb	r2,-8(fp)
	if (sockindex < MAX_SOCK_NUM) {
 4005bd4:	e0bffe03 	ldbu	r2,-8(fp)
 4005bd8:	10800228 	cmpgeui	r2,r2,8
 4005bdc:	1000131e 	bne	r2,zero,4005c2c <_ZN14EthernetServer5beginEv+0x88>
		if (Ethernet.socketListen(sockindex)) {
 4005be0:	e0bffe03 	ldbu	r2,-8(fp)
 4005be4:	1009883a 	mov	r4,r2
 4005be8:	40071a80 	call	40071a8 <_ZN13EthernetClass12socketListenEh>
 4005bec:	10803fcc 	andi	r2,r2,255
 4005bf0:	1004c03a 	cmpne	r2,r2,zero
 4005bf4:	10803fcc 	andi	r2,r2,255
 4005bf8:	10000926 	beq	r2,zero,4005c20 <_ZN14EthernetServer5beginEv+0x7c>
			server_port[sockindex] = _port;
 4005bfc:	e0fffe03 	ldbu	r3,-8(fp)
 4005c00:	e0bfff17 	ldw	r2,-4(fp)
 4005c04:	1100010b 	ldhu	r4,4(r2)
 4005c08:	00810134 	movhi	r2,1028
 4005c0c:	10a60b04 	addi	r2,r2,-26580
 4005c10:	18c7883a 	add	r3,r3,r3
 4005c14:	10c5883a 	add	r2,r2,r3
 4005c18:	1100000d 	sth	r4,0(r2)
		} else {
			Ethernet.socketDisconnect(sockindex);
		}
	}
}
 4005c1c:	00000306 	br	4005c2c <_ZN14EthernetServer5beginEv+0x88>
	uint8_t sockindex = Ethernet.socketBegin(SnMR::TCP, _port);
	if (sockindex < MAX_SOCK_NUM) {
		if (Ethernet.socketListen(sockindex)) {
			server_port[sockindex] = _port;
		} else {
			Ethernet.socketDisconnect(sockindex);
 4005c20:	e0bffe03 	ldbu	r2,-8(fp)
 4005c24:	1009883a 	mov	r4,r2
 4005c28:	400727c0 	call	400727c <_ZN13EthernetClass16socketDisconnectEh>
		}
	}
}
 4005c2c:	0001883a 	nop
 4005c30:	e037883a 	mov	sp,fp
 4005c34:	dfc00117 	ldw	ra,4(sp)
 4005c38:	df000017 	ldw	fp,0(sp)
 4005c3c:	dec00204 	addi	sp,sp,8
 4005c40:	f800283a 	ret

04005c44 <_ZN14EthernetServer9availableEv>:

EthernetClient EthernetServer::available()
{
 4005c44:	defffa04 	addi	sp,sp,-24
 4005c48:	dfc00515 	stw	ra,20(sp)
 4005c4c:	df000415 	stw	fp,16(sp)
 4005c50:	df000404 	addi	fp,sp,16
 4005c54:	e13ffe15 	stw	r4,-8(fp)
 4005c58:	e17fff15 	stw	r5,-4(fp)
	bool listening = false;
 4005c5c:	e03ffc05 	stb	zero,-16(fp)
	uint8_t sockindex = MAX_SOCK_NUM;
 4005c60:	00800204 	movi	r2,8
 4005c64:	e0bffc45 	stb	r2,-15(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 4005c68:	00800204 	movi	r2,8
 4005c6c:	e0bffc85 	stb	r2,-14(fp)

	chip = W5100.getChip();
 4005c70:	4004a240 	call	4004a24 <_ZN10W5100Class7getChipEv>
 4005c74:	e0bffd05 	stb	r2,-12(fp)
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
 4005c78:	e0bffd03 	ldbu	r2,-12(fp)
 4005c7c:	1000041e 	bne	r2,zero,4005c90 <_ZN14EthernetServer9availableEv+0x4c>
 4005c80:	01400204 	movi	r5,8
 4005c84:	e13ffe17 	ldw	r4,-8(fp)
 4005c88:	40061f40 	call	40061f4 <_ZN14EthernetClientC1Eh>
 4005c8c:	00005006 	br	4005dd0 <_ZN14EthernetServer9availableEv+0x18c>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4005c90:	e0bffd03 	ldbu	r2,-12(fp)
 4005c94:	10800cd8 	cmpnei	r2,r2,51
 4005c98:	1000021e 	bne	r2,zero,4005ca4 <_ZN14EthernetServer9availableEv+0x60>
 4005c9c:	00800104 	movi	r2,4
 4005ca0:	e0bffc85 	stb	r2,-14(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4005ca4:	e03ffcc5 	stb	zero,-13(fp)
 4005ca8:	e0fffcc3 	ldbu	r3,-13(fp)
 4005cac:	e0bffc83 	ldbu	r2,-14(fp)
 4005cb0:	18803a2e 	bgeu	r3,r2,4005d9c <_ZN14EthernetServer9availableEv+0x158>
		if (server_port[i] == _port) {
 4005cb4:	e0fffcc3 	ldbu	r3,-13(fp)
 4005cb8:	00810134 	movhi	r2,1028
 4005cbc:	10a60b04 	addi	r2,r2,-26580
 4005cc0:	18c7883a 	add	r3,r3,r3
 4005cc4:	10c5883a 	add	r2,r2,r3
 4005cc8:	10c0000b 	ldhu	r3,0(r2)
 4005ccc:	e0bfff17 	ldw	r2,-4(fp)
 4005cd0:	1080010b 	ldhu	r2,4(r2)
 4005cd4:	18ffffcc 	andi	r3,r3,65535
 4005cd8:	10bfffcc 	andi	r2,r2,65535
 4005cdc:	18802b1e 	bne	r3,r2,4005d8c <_ZN14EthernetServer9availableEv+0x148>
			uint8_t stat = Ethernet.socketStatus(i);
 4005ce0:	e0bffcc3 	ldbu	r2,-13(fp)
 4005ce4:	1009883a 	mov	r4,r2
 4005ce8:	40071280 	call	4007128 <_ZN13EthernetClass12socketStatusEh>
 4005cec:	e0bffd45 	stb	r2,-11(fp)
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
 4005cf0:	e0bffd43 	ldbu	r2,-11(fp)
 4005cf4:	108005e0 	cmpeqi	r2,r2,23
 4005cf8:	1000031e 	bne	r2,zero,4005d08 <_ZN14EthernetServer9availableEv+0xc4>
 4005cfc:	e0bffd43 	ldbu	r2,-11(fp)
 4005d00:	10800718 	cmpnei	r2,r2,28
 4005d04:	1000111e 	bne	r2,zero,4005d4c <_ZN14EthernetServer9availableEv+0x108>
				if (Ethernet.socketRecvAvailable(i) > 0) {
 4005d08:	e0bffcc3 	ldbu	r2,-13(fp)
 4005d0c:	1009883a 	mov	r4,r2
 4005d10:	40076e40 	call	40076e4 <_ZN13EthernetClass19socketRecvAvailableEh>
 4005d14:	10bfffcc 	andi	r2,r2,65535
 4005d18:	1004c03a 	cmpne	r2,r2,zero
 4005d1c:	10803fcc 	andi	r2,r2,255
 4005d20:	10000326 	beq	r2,zero,4005d30 <_ZN14EthernetServer9availableEv+0xec>
					sockindex = i;
 4005d24:	e0bffcc3 	ldbu	r2,-13(fp)
 4005d28:	e0bffc45 	stb	r2,-15(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 4005d2c:	00001606 	br	4005d88 <_ZN14EthernetServer9availableEv+0x144>
					sockindex = i;
				} else {
					// remote host closed connection, our end still open
					if (stat == SnSR::CLOSE_WAIT) {
 4005d30:	e0bffd43 	ldbu	r2,-11(fp)
 4005d34:	10800718 	cmpnei	r2,r2,28
 4005d38:	1000131e 	bne	r2,zero,4005d88 <_ZN14EthernetServer9availableEv+0x144>
						Ethernet.socketDisconnect(i);
 4005d3c:	e0bffcc3 	ldbu	r2,-13(fp)
 4005d40:	1009883a 	mov	r4,r2
 4005d44:	400727c0 	call	400727c <_ZN13EthernetClass16socketDisconnectEh>
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 4005d48:	00000f06 	br	4005d88 <_ZN14EthernetServer9availableEv+0x144>
					if (stat == SnSR::CLOSE_WAIT) {
						Ethernet.socketDisconnect(i);
						// status becomes LAST_ACK for short time
					}
				}
			} else if (stat == SnSR::LISTEN) {
 4005d4c:	e0bffd43 	ldbu	r2,-11(fp)
 4005d50:	10800518 	cmpnei	r2,r2,20
 4005d54:	1000031e 	bne	r2,zero,4005d64 <_ZN14EthernetServer9availableEv+0x120>
				listening = true;
 4005d58:	00800044 	movi	r2,1
 4005d5c:	e0bffc05 	stb	r2,-16(fp)
 4005d60:	00000a06 	br	4005d8c <_ZN14EthernetServer9availableEv+0x148>
			} else if (stat == SnSR::CLOSED) {
 4005d64:	e0bffd43 	ldbu	r2,-11(fp)
 4005d68:	1000081e 	bne	r2,zero,4005d8c <_ZN14EthernetServer9availableEv+0x148>
				server_port[i] = 0;
 4005d6c:	e0fffcc3 	ldbu	r3,-13(fp)
 4005d70:	00810134 	movhi	r2,1028
 4005d74:	10a60b04 	addi	r2,r2,-26580
 4005d78:	18c7883a 	add	r3,r3,r3
 4005d7c:	10c5883a 	add	r2,r2,r3
 4005d80:	1000000d 	sth	zero,0(r2)
 4005d84:	00000106 	br	4005d8c <_ZN14EthernetServer9availableEv+0x148>
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 4005d88:	0001883a 	nop
	chip = W5100.getChip();
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4005d8c:	e0bffcc3 	ldbu	r2,-13(fp)
 4005d90:	10800044 	addi	r2,r2,1
 4005d94:	e0bffcc5 	stb	r2,-13(fp)
 4005d98:	003fc306 	br	4005ca8 <__alt_data_end+0xfc005ca8>
			} else if (stat == SnSR::CLOSED) {
				server_port[i] = 0;
			}
		}
	}
	if (!listening) begin();
 4005d9c:	e0bffc03 	ldbu	r2,-16(fp)
 4005da0:	1080005c 	xori	r2,r2,1
 4005da4:	10803fcc 	andi	r2,r2,255
 4005da8:	10000526 	beq	r2,zero,4005dc0 <_ZN14EthernetServer9availableEv+0x17c>
 4005dac:	e0bfff17 	ldw	r2,-4(fp)
 4005db0:	10800017 	ldw	r2,0(r2)
 4005db4:	10800017 	ldw	r2,0(r2)
 4005db8:	e13fff17 	ldw	r4,-4(fp)
 4005dbc:	103ee83a 	callr	r2
	return EthernetClient(sockindex);
 4005dc0:	e0bffc43 	ldbu	r2,-15(fp)
 4005dc4:	100b883a 	mov	r5,r2
 4005dc8:	e13ffe17 	ldw	r4,-8(fp)
 4005dcc:	40061f40 	call	40061f4 <_ZN14EthernetClientC1Eh>
}
 4005dd0:	e0bffe17 	ldw	r2,-8(fp)
 4005dd4:	e037883a 	mov	sp,fp
 4005dd8:	dfc00117 	ldw	ra,4(sp)
 4005ddc:	df000017 	ldw	fp,0(sp)
 4005de0:	dec00204 	addi	sp,sp,8
 4005de4:	f800283a 	ret

04005de8 <_ZN14EthernetServer6acceptEv>:

EthernetClient EthernetServer::accept()
{
 4005de8:	defffa04 	addi	sp,sp,-24
 4005dec:	dfc00515 	stw	ra,20(sp)
 4005df0:	df000415 	stw	fp,16(sp)
 4005df4:	df000404 	addi	fp,sp,16
 4005df8:	e13ffe15 	stw	r4,-8(fp)
 4005dfc:	e17fff15 	stw	r5,-4(fp)
	bool listening = false;
 4005e00:	e03ffc05 	stb	zero,-16(fp)
	uint8_t sockindex = MAX_SOCK_NUM;
 4005e04:	00800204 	movi	r2,8
 4005e08:	e0bffc45 	stb	r2,-15(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 4005e0c:	00800204 	movi	r2,8
 4005e10:	e0bffc85 	stb	r2,-14(fp)

	chip = W5100.getChip();
 4005e14:	4004a240 	call	4004a24 <_ZN10W5100Class7getChipEv>
 4005e18:	e0bffd05 	stb	r2,-12(fp)
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
 4005e1c:	e0bffd03 	ldbu	r2,-12(fp)
 4005e20:	1000041e 	bne	r2,zero,4005e34 <_ZN14EthernetServer6acceptEv+0x4c>
 4005e24:	01400204 	movi	r5,8
 4005e28:	e13ffe17 	ldw	r4,-8(fp)
 4005e2c:	40061f40 	call	40061f4 <_ZN14EthernetClientC1Eh>
 4005e30:	00004906 	br	4005f58 <_ZN14EthernetServer6acceptEv+0x170>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4005e34:	e0bffd03 	ldbu	r2,-12(fp)
 4005e38:	10800cd8 	cmpnei	r2,r2,51
 4005e3c:	1000021e 	bne	r2,zero,4005e48 <_ZN14EthernetServer6acceptEv+0x60>
 4005e40:	00800104 	movi	r2,4
 4005e44:	e0bffc85 	stb	r2,-14(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4005e48:	e03ffcc5 	stb	zero,-13(fp)
 4005e4c:	e0fffcc3 	ldbu	r3,-13(fp)
 4005e50:	e0bffc83 	ldbu	r2,-14(fp)
 4005e54:	1880332e 	bgeu	r3,r2,4005f24 <_ZN14EthernetServer6acceptEv+0x13c>
		if (server_port[i] == _port) {
 4005e58:	e0fffcc3 	ldbu	r3,-13(fp)
 4005e5c:	00810134 	movhi	r2,1028
 4005e60:	10a60b04 	addi	r2,r2,-26580
 4005e64:	18c7883a 	add	r3,r3,r3
 4005e68:	10c5883a 	add	r2,r2,r3
 4005e6c:	10c0000b 	ldhu	r3,0(r2)
 4005e70:	e0bfff17 	ldw	r2,-4(fp)
 4005e74:	1080010b 	ldhu	r2,4(r2)
 4005e78:	18ffffcc 	andi	r3,r3,65535
 4005e7c:	10bfffcc 	andi	r2,r2,65535
 4005e80:	1880241e 	bne	r3,r2,4005f14 <_ZN14EthernetServer6acceptEv+0x12c>
			uint8_t stat = Ethernet.socketStatus(i);
 4005e84:	e0bffcc3 	ldbu	r2,-13(fp)
 4005e88:	1009883a 	mov	r4,r2
 4005e8c:	40071280 	call	4007128 <_ZN13EthernetClass12socketStatusEh>
 4005e90:	e0bffd45 	stb	r2,-11(fp)
			if (sockindex == MAX_SOCK_NUM &&
 4005e94:	e0bffc43 	ldbu	r2,-15(fp)
 4005e98:	10800218 	cmpnei	r2,r2,8
 4005e9c:	10000f1e 	bne	r2,zero,4005edc <_ZN14EthernetServer6acceptEv+0xf4>
 4005ea0:	e0bffd43 	ldbu	r2,-11(fp)
 4005ea4:	108005e0 	cmpeqi	r2,r2,23
 4005ea8:	1000031e 	bne	r2,zero,4005eb8 <_ZN14EthernetServer6acceptEv+0xd0>
			  (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT)) {
 4005eac:	e0bffd43 	ldbu	r2,-11(fp)
 4005eb0:	10800718 	cmpnei	r2,r2,28
 4005eb4:	1000091e 	bne	r2,zero,4005edc <_ZN14EthernetServer6acceptEv+0xf4>
				// Return the connected client even if no data received.
				// Some protocols like FTP expect the server to send the
				// first data.
				sockindex = i;
 4005eb8:	e0bffcc3 	ldbu	r2,-13(fp)
 4005ebc:	e0bffc45 	stb	r2,-15(fp)
				server_port[i] = 0; // only return the client once
 4005ec0:	e0fffcc3 	ldbu	r3,-13(fp)
 4005ec4:	00810134 	movhi	r2,1028
 4005ec8:	10a60b04 	addi	r2,r2,-26580
 4005ecc:	18c7883a 	add	r3,r3,r3
 4005ed0:	10c5883a 	add	r2,r2,r3
 4005ed4:	1000000d 	sth	zero,0(r2)
 4005ed8:	00000e06 	br	4005f14 <_ZN14EthernetServer6acceptEv+0x12c>
			} else if (stat == SnSR::LISTEN) {
 4005edc:	e0bffd43 	ldbu	r2,-11(fp)
 4005ee0:	10800518 	cmpnei	r2,r2,20
 4005ee4:	1000031e 	bne	r2,zero,4005ef4 <_ZN14EthernetServer6acceptEv+0x10c>
				listening = true;
 4005ee8:	00800044 	movi	r2,1
 4005eec:	e0bffc05 	stb	r2,-16(fp)
 4005ef0:	00000806 	br	4005f14 <_ZN14EthernetServer6acceptEv+0x12c>
			} else if (stat == SnSR::CLOSED) {
 4005ef4:	e0bffd43 	ldbu	r2,-11(fp)
 4005ef8:	1000061e 	bne	r2,zero,4005f14 <_ZN14EthernetServer6acceptEv+0x12c>
				server_port[i] = 0;
 4005efc:	e0fffcc3 	ldbu	r3,-13(fp)
 4005f00:	00810134 	movhi	r2,1028
 4005f04:	10a60b04 	addi	r2,r2,-26580
 4005f08:	18c7883a 	add	r3,r3,r3
 4005f0c:	10c5883a 	add	r2,r2,r3
 4005f10:	1000000d 	sth	zero,0(r2)
	chip = W5100.getChip();
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4005f14:	e0bffcc3 	ldbu	r2,-13(fp)
 4005f18:	10800044 	addi	r2,r2,1
 4005f1c:	e0bffcc5 	stb	r2,-13(fp)
 4005f20:	003fca06 	br	4005e4c <__alt_data_end+0xfc005e4c>
			} else if (stat == SnSR::CLOSED) {
				server_port[i] = 0;
			}
		}
	}
	if (!listening) begin();
 4005f24:	e0bffc03 	ldbu	r2,-16(fp)
 4005f28:	1080005c 	xori	r2,r2,1
 4005f2c:	10803fcc 	andi	r2,r2,255
 4005f30:	10000526 	beq	r2,zero,4005f48 <_ZN14EthernetServer6acceptEv+0x160>
 4005f34:	e0bfff17 	ldw	r2,-4(fp)
 4005f38:	10800017 	ldw	r2,0(r2)
 4005f3c:	10800017 	ldw	r2,0(r2)
 4005f40:	e13fff17 	ldw	r4,-4(fp)
 4005f44:	103ee83a 	callr	r2
	return EthernetClient(sockindex);
 4005f48:	e0bffc43 	ldbu	r2,-15(fp)
 4005f4c:	100b883a 	mov	r5,r2
 4005f50:	e13ffe17 	ldw	r4,-8(fp)
 4005f54:	40061f40 	call	40061f4 <_ZN14EthernetClientC1Eh>
}
 4005f58:	e0bffe17 	ldw	r2,-8(fp)
 4005f5c:	e037883a 	mov	sp,fp
 4005f60:	dfc00117 	ldw	ra,4(sp)
 4005f64:	df000017 	ldw	fp,0(sp)
 4005f68:	dec00204 	addi	sp,sp,8
 4005f6c:	f800283a 	ret

04005f70 <_ZN14EthernetServercvbEv>:

EthernetServer::operator bool()
{
 4005f70:	defffc04 	addi	sp,sp,-16
 4005f74:	dfc00315 	stw	ra,12(sp)
 4005f78:	df000215 	stw	fp,8(sp)
 4005f7c:	df000204 	addi	fp,sp,8
 4005f80:	e13fff15 	stw	r4,-4(fp)
	uint8_t maxindex=MAX_SOCK_NUM;
 4005f84:	00800204 	movi	r2,8
 4005f88:	e0bffe05 	stb	r2,-8(fp)
#if MAX_SOCK_NUM > 4
	if (W5100.getChip() == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4005f8c:	4004a240 	call	4004a24 <_ZN10W5100Class7getChipEv>
 4005f90:	10803fcc 	andi	r2,r2,255
 4005f94:	10800ce0 	cmpeqi	r2,r2,51
 4005f98:	10803fcc 	andi	r2,r2,255
 4005f9c:	10000226 	beq	r2,zero,4005fa8 <_ZN14EthernetServercvbEv+0x38>
 4005fa0:	00800104 	movi	r2,4
 4005fa4:	e0bffe05 	stb	r2,-8(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4005fa8:	e03ffe45 	stb	zero,-7(fp)
 4005fac:	e0fffe43 	ldbu	r3,-7(fp)
 4005fb0:	e0bffe03 	ldbu	r2,-8(fp)
 4005fb4:	1880182e 	bgeu	r3,r2,4006018 <_ZN14EthernetServercvbEv+0xa8>
		if (server_port[i] == _port) {
 4005fb8:	e0fffe43 	ldbu	r3,-7(fp)
 4005fbc:	00810134 	movhi	r2,1028
 4005fc0:	10a60b04 	addi	r2,r2,-26580
 4005fc4:	18c7883a 	add	r3,r3,r3
 4005fc8:	10c5883a 	add	r2,r2,r3
 4005fcc:	10c0000b 	ldhu	r3,0(r2)
 4005fd0:	e0bfff17 	ldw	r2,-4(fp)
 4005fd4:	1080010b 	ldhu	r2,4(r2)
 4005fd8:	18ffffcc 	andi	r3,r3,65535
 4005fdc:	10bfffcc 	andi	r2,r2,65535
 4005fe0:	1880091e 	bne	r3,r2,4006008 <_ZN14EthernetServercvbEv+0x98>
			if (Ethernet.socketStatus(i) == SnSR::LISTEN) {
 4005fe4:	e0bffe43 	ldbu	r2,-7(fp)
 4005fe8:	1009883a 	mov	r4,r2
 4005fec:	40071280 	call	4007128 <_ZN13EthernetClass12socketStatusEh>
 4005ff0:	10803fcc 	andi	r2,r2,255
 4005ff4:	10800520 	cmpeqi	r2,r2,20
 4005ff8:	10803fcc 	andi	r2,r2,255
 4005ffc:	10000226 	beq	r2,zero,4006008 <_ZN14EthernetServercvbEv+0x98>
				return true; // server is listening for incoming clients
 4006000:	00800044 	movi	r2,1
 4006004:	00000506 	br	400601c <_ZN14EthernetServercvbEv+0xac>
{
	uint8_t maxindex=MAX_SOCK_NUM;
#if MAX_SOCK_NUM > 4
	if (W5100.getChip() == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4006008:	e0bffe43 	ldbu	r2,-7(fp)
 400600c:	10800044 	addi	r2,r2,1
 4006010:	e0bffe45 	stb	r2,-7(fp)
 4006014:	003fe506 	br	4005fac <__alt_data_end+0xfc005fac>
			if (Ethernet.socketStatus(i) == SnSR::LISTEN) {
				return true; // server is listening for incoming clients
			}
		}
	}
	return false;
 4006018:	0005883a 	mov	r2,zero
}
 400601c:	e037883a 	mov	sp,fp
 4006020:	dfc00117 	ldw	ra,4(sp)
 4006024:	df000017 	ldw	fp,0(sp)
 4006028:	dec00204 	addi	sp,sp,8
 400602c:	f800283a 	ret

04006030 <_ZN14EthernetServer5writeEh>:
#endif


// TODO why doesn't this compile??
size_t EthernetServer::write(uint8_t b)
{
 4006030:	defffd04 	addi	sp,sp,-12
 4006034:	df000215 	stw	fp,8(sp)
 4006038:	df000204 	addi	fp,sp,8
 400603c:	e13ffe15 	stw	r4,-8(fp)
 4006040:	2805883a 	mov	r2,r5
 4006044:	e0bfff05 	stb	r2,-4(fp)
	return 0;//write((const uint8_t *) &b, (size_t) 1);
 4006048:	0005883a 	mov	r2,zero
}
 400604c:	e037883a 	mov	sp,fp
 4006050:	df000017 	ldw	fp,0(sp)
 4006054:	dec00104 	addi	sp,sp,4
 4006058:	f800283a 	ret

0400605c <_ZN14EthernetServer5writeEPKhj>:

size_t EthernetServer::write(const uint8_t *buffer, size_t size)
{
 400605c:	defff804 	addi	sp,sp,-32
 4006060:	dfc00715 	stw	ra,28(sp)
 4006064:	df000615 	stw	fp,24(sp)
 4006068:	df000604 	addi	fp,sp,24
 400606c:	e13ffd15 	stw	r4,-12(fp)
 4006070:	e17ffe15 	stw	r5,-8(fp)
 4006074:	e1bfff15 	stw	r6,-4(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 4006078:	00800204 	movi	r2,8
 400607c:	e0bffa05 	stb	r2,-24(fp)

	chip = W5100.getChip();
 4006080:	4004a240 	call	4004a24 <_ZN10W5100Class7getChipEv>
 4006084:	e0bffa85 	stb	r2,-22(fp)
	if (!chip) return 0;
 4006088:	e0bffa83 	ldbu	r2,-22(fp)
 400608c:	1000021e 	bne	r2,zero,4006098 <_ZN14EthernetServer5writeEPKhj+0x3c>
 4006090:	0005883a 	mov	r2,zero
 4006094:	00002e06 	br	4006150 <_ZN14EthernetServer5writeEPKhj+0xf4>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4006098:	e0bffa83 	ldbu	r2,-22(fp)
 400609c:	10800cd8 	cmpnei	r2,r2,51
 40060a0:	1000021e 	bne	r2,zero,40060ac <_ZN14EthernetServer5writeEPKhj+0x50>
 40060a4:	00800104 	movi	r2,4
 40060a8:	e0bffa05 	stb	r2,-24(fp)
#endif
	available();
 40060ac:	e0bffb04 	addi	r2,fp,-20
 40060b0:	e17ffd17 	ldw	r5,-12(fp)
 40060b4:	1009883a 	mov	r4,r2
 40060b8:	4005c440 	call	4005c44 <_ZN14EthernetServer9availableEv>
 40060bc:	e0bffb04 	addi	r2,fp,-20
 40060c0:	1009883a 	mov	r4,r2
 40060c4:	40058280 	call	4005828 <_ZN14EthernetClientD1Ev>
	for (uint8_t i=0; i < maxindex; i++) {
 40060c8:	e03ffa45 	stb	zero,-23(fp)
 40060cc:	e0fffa43 	ldbu	r3,-23(fp)
 40060d0:	e0bffa03 	ldbu	r2,-24(fp)
 40060d4:	18801d2e 	bgeu	r3,r2,400614c <_ZN14EthernetServer5writeEPKhj+0xf0>
		if (server_port[i] == _port) {
 40060d8:	e0fffa43 	ldbu	r3,-23(fp)
 40060dc:	00810134 	movhi	r2,1028
 40060e0:	10a60b04 	addi	r2,r2,-26580
 40060e4:	18c7883a 	add	r3,r3,r3
 40060e8:	10c5883a 	add	r2,r2,r3
 40060ec:	10c0000b 	ldhu	r3,0(r2)
 40060f0:	e0bffd17 	ldw	r2,-12(fp)
 40060f4:	1080010b 	ldhu	r2,4(r2)
 40060f8:	18ffffcc 	andi	r3,r3,65535
 40060fc:	10bfffcc 	andi	r2,r2,65535
 4006100:	18800e1e 	bne	r3,r2,400613c <_ZN14EthernetServer5writeEPKhj+0xe0>
			if (Ethernet.socketStatus(i) == SnSR::ESTABLISHED) {
 4006104:	e0bffa43 	ldbu	r2,-23(fp)
 4006108:	1009883a 	mov	r4,r2
 400610c:	40071280 	call	4007128 <_ZN13EthernetClass12socketStatusEh>
 4006110:	10803fcc 	andi	r2,r2,255
 4006114:	108005e0 	cmpeqi	r2,r2,23
 4006118:	10803fcc 	andi	r2,r2,255
 400611c:	10000726 	beq	r2,zero,400613c <_ZN14EthernetServer5writeEPKhj+0xe0>
				Ethernet.socketSend(i, buffer, size);
 4006120:	e0fffa43 	ldbu	r3,-23(fp)
 4006124:	e0bfff17 	ldw	r2,-4(fp)
 4006128:	10bfffcc 	andi	r2,r2,65535
 400612c:	100d883a 	mov	r6,r2
 4006130:	e17ffe17 	ldw	r5,-8(fp)
 4006134:	1809883a 	mov	r4,r3
 4006138:	4007a000 	call	4007a00 <_ZN13EthernetClass10socketSendEhPKht>
	if (!chip) return 0;
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	available();
	for (uint8_t i=0; i < maxindex; i++) {
 400613c:	e0bffa43 	ldbu	r2,-23(fp)
 4006140:	10800044 	addi	r2,r2,1
 4006144:	e0bffa45 	stb	r2,-23(fp)
 4006148:	003fe006 	br	40060cc <__alt_data_end+0xfc0060cc>
			if (Ethernet.socketStatus(i) == SnSR::ESTABLISHED) {
				Ethernet.socketSend(i, buffer, size);
			}
		}
	}
	return size;
 400614c:	e0bfff17 	ldw	r2,-4(fp)
}
 4006150:	e037883a 	mov	sp,fp
 4006154:	dfc00117 	ldw	ra,4(sp)
 4006158:	df000017 	ldw	fp,0(sp)
 400615c:	dec00204 	addi	sp,sp,8
 4006160:	f800283a 	ret

04006164 <_Z41__static_initialization_and_destruction_0ii>:
 4006164:	defffb04 	addi	sp,sp,-20
 4006168:	dfc00415 	stw	ra,16(sp)
 400616c:	df000315 	stw	fp,12(sp)
 4006170:	df000304 	addi	fp,sp,12
 4006174:	e13ffe15 	stw	r4,-8(fp)
 4006178:	e17fff15 	stw	r5,-4(fp)
 400617c:	e0bffe17 	ldw	r2,-8(fp)
 4006180:	10800058 	cmpnei	r2,r2,1
 4006184:	1000091e 	bne	r2,zero,40061ac <_Z41__static_initialization_and_destruction_0ii+0x48>
 4006188:	e0ffff17 	ldw	r3,-4(fp)
 400618c:	00bfffd4 	movui	r2,65535
 4006190:	1880061e 	bne	r3,r2,40061ac <_Z41__static_initialization_and_destruction_0ii+0x48>
 4006194:	d8000015 	stw	zero,0(sp)
 4006198:	000f883a 	mov	r7,zero
 400619c:	000d883a 	mov	r6,zero
 40061a0:	000b883a 	mov	r5,zero
 40061a4:	d112db04 	addi	r4,gp,19308
 40061a8:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
 40061ac:	0001883a 	nop
 40061b0:	e037883a 	mov	sp,fp
 40061b4:	dfc00117 	ldw	ra,4(sp)
 40061b8:	df000017 	ldw	fp,0(sp)
 40061bc:	dec00204 	addi	sp,sp,8
 40061c0:	f800283a 	ret

040061c4 <_GLOBAL__sub_I__ZN14EthernetServer11server_portE>:
 40061c4:	defffe04 	addi	sp,sp,-8
 40061c8:	dfc00115 	stw	ra,4(sp)
 40061cc:	df000015 	stw	fp,0(sp)
 40061d0:	d839883a 	mov	fp,sp
 40061d4:	017fffd4 	movui	r5,65535
 40061d8:	01000044 	movi	r4,1
 40061dc:	40061640 	call	4006164 <_Z41__static_initialization_and_destruction_0ii>
 40061e0:	e037883a 	mov	sp,fp
 40061e4:	dfc00117 	ldw	ra,4(sp)
 40061e8:	df000017 	ldw	fp,0(sp)
 40061ec:	dec00204 	addi	sp,sp,8
 40061f0:	f800283a 	ret

040061f4 <_ZN14EthernetClientC1Eh>:


class EthernetClient : public Client {
public:
	EthernetClient() : _sockindex(MAX_SOCK_NUM), _timeout(1000) { }
	EthernetClient(uint8_t s) : _sockindex(s), _timeout(1000) { }
 40061f4:	defffc04 	addi	sp,sp,-16
 40061f8:	dfc00315 	stw	ra,12(sp)
 40061fc:	df000215 	stw	fp,8(sp)
 4006200:	df000204 	addi	fp,sp,8
 4006204:	e13ffe15 	stw	r4,-8(fp)
 4006208:	2805883a 	mov	r2,r5
 400620c:	e0bfff05 	stb	r2,-4(fp)
 4006210:	e0bffe17 	ldw	r2,-8(fp)
 4006214:	1009883a 	mov	r4,r2
 4006218:	400199c0 	call	400199c <_ZN6ClientC1Ev>
 400621c:	008100b4 	movhi	r2,1026
 4006220:	10beb104 	addi	r2,r2,-1340
 4006224:	e0fffe17 	ldw	r3,-8(fp)
 4006228:	18800015 	stw	r2,0(r3)
 400622c:	e0bffe17 	ldw	r2,-8(fp)
 4006230:	e0ffff03 	ldbu	r3,-4(fp)
 4006234:	10c00105 	stb	r3,4(r2)
 4006238:	e0bffe17 	ldw	r2,-8(fp)
 400623c:	00c0fa04 	movi	r3,1000
 4006240:	10c0018d 	sth	r3,6(r2)
 4006244:	0001883a 	nop
 4006248:	e037883a 	mov	sp,fp
 400624c:	dfc00117 	ldw	ra,4(sp)
 4006250:	df000017 	ldw	fp,0(sp)
 4006254:	dec00204 	addi	sp,sp,8
 4006258:	f800283a 	ret

0400625c <_ZN11EthernetUDP5beginEt>:
#include "Ethernet.h"
#include "utility/w5100.h"

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port)
{
 400625c:	defffc04 	addi	sp,sp,-16
 4006260:	dfc00315 	stw	ra,12(sp)
 4006264:	df000215 	stw	fp,8(sp)
 4006268:	df000204 	addi	fp,sp,8
 400626c:	e13ffe15 	stw	r4,-8(fp)
 4006270:	2805883a 	mov	r2,r5
 4006274:	e0bfff0d 	sth	r2,-4(fp)
	if (sockindex < MAX_SOCK_NUM) Ethernet.socketClose(sockindex);
 4006278:	e0bffe17 	ldw	r2,-8(fp)
 400627c:	10800403 	ldbu	r2,16(r2)
 4006280:	10803fcc 	andi	r2,r2,255
 4006284:	10800228 	cmpgeui	r2,r2,8
 4006288:	1000051e 	bne	r2,zero,40062a0 <_ZN11EthernetUDP5beginEt+0x44>
 400628c:	e0bffe17 	ldw	r2,-8(fp)
 4006290:	10800403 	ldbu	r2,16(r2)
 4006294:	10803fcc 	andi	r2,r2,255
 4006298:	1009883a 	mov	r4,r2
 400629c:	40071680 	call	4007168 <_ZN13EthernetClass11socketCloseEh>
	sockindex = Ethernet.socketBegin(SnMR::UDP, port);
 40062a0:	e0bfff0b 	ldhu	r2,-4(fp)
 40062a4:	100b883a 	mov	r5,r2
 40062a8:	01000084 	movi	r4,2
 40062ac:	4006b3c0 	call	4006b3c <_ZN13EthernetClass11socketBeginEht>
 40062b0:	1007883a 	mov	r3,r2
 40062b4:	e0bffe17 	ldw	r2,-8(fp)
 40062b8:	10c00405 	stb	r3,16(r2)
	if (sockindex >= MAX_SOCK_NUM) return 0;
 40062bc:	e0bffe17 	ldw	r2,-8(fp)
 40062c0:	10800403 	ldbu	r2,16(r2)
 40062c4:	10803fcc 	andi	r2,r2,255
 40062c8:	10800230 	cmpltui	r2,r2,8
 40062cc:	1000021e 	bne	r2,zero,40062d8 <_ZN11EthernetUDP5beginEt+0x7c>
 40062d0:	0005883a 	mov	r2,zero
 40062d4:	00000606 	br	40062f0 <_ZN11EthernetUDP5beginEt+0x94>
	_port = port;
 40062d8:	e0bffe17 	ldw	r2,-8(fp)
 40062dc:	e0ffff0b 	ldhu	r3,-4(fp)
 40062e0:	10c0010d 	sth	r3,4(r2)
	_remaining = 0;
 40062e4:	e0bffe17 	ldw	r2,-8(fp)
 40062e8:	1000048d 	sth	zero,18(r2)
	return 1;
 40062ec:	00800044 	movi	r2,1
}
 40062f0:	e037883a 	mov	sp,fp
 40062f4:	dfc00117 	ldw	ra,4(sp)
 40062f8:	df000017 	ldw	fp,0(sp)
 40062fc:	dec00204 	addi	sp,sp,8
 4006300:	f800283a 	ret

04006304 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available()
{
 4006304:	defffe04 	addi	sp,sp,-8
 4006308:	df000115 	stw	fp,4(sp)
 400630c:	df000104 	addi	fp,sp,4
 4006310:	e13fff15 	stw	r4,-4(fp)
	return _remaining;
 4006314:	e0bfff17 	ldw	r2,-4(fp)
 4006318:	1080048b 	ldhu	r2,18(r2)
 400631c:	10bfffcc 	andi	r2,r2,65535
}
 4006320:	e037883a 	mov	sp,fp
 4006324:	df000017 	ldw	fp,0(sp)
 4006328:	dec00104 	addi	sp,sp,4
 400632c:	f800283a 	ret

04006330 <_ZN11EthernetUDP4stopEv>:

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
 4006330:	defffd04 	addi	sp,sp,-12
 4006334:	dfc00215 	stw	ra,8(sp)
 4006338:	df000115 	stw	fp,4(sp)
 400633c:	df000104 	addi	fp,sp,4
 4006340:	e13fff15 	stw	r4,-4(fp)
	if (sockindex < MAX_SOCK_NUM) {
 4006344:	e0bfff17 	ldw	r2,-4(fp)
 4006348:	10800403 	ldbu	r2,16(r2)
 400634c:	10803fcc 	andi	r2,r2,255
 4006350:	10800228 	cmpgeui	r2,r2,8
 4006354:	1000081e 	bne	r2,zero,4006378 <_ZN11EthernetUDP4stopEv+0x48>
		Ethernet.socketClose(sockindex);
 4006358:	e0bfff17 	ldw	r2,-4(fp)
 400635c:	10800403 	ldbu	r2,16(r2)
 4006360:	10803fcc 	andi	r2,r2,255
 4006364:	1009883a 	mov	r4,r2
 4006368:	40071680 	call	4007168 <_ZN13EthernetClass11socketCloseEh>
		sockindex = MAX_SOCK_NUM;
 400636c:	e0bfff17 	ldw	r2,-4(fp)
 4006370:	00c00204 	movi	r3,8
 4006374:	10c00405 	stb	r3,16(r2)
	}
}
 4006378:	0001883a 	nop
 400637c:	e037883a 	mov	sp,fp
 4006380:	dfc00117 	ldw	ra,4(sp)
 4006384:	df000017 	ldw	fp,0(sp)
 4006388:	dec00204 	addi	sp,sp,8
 400638c:	f800283a 	ret

04006390 <_ZN11EthernetUDP11beginPacketEPKct>:

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
 4006390:	defff104 	addi	sp,sp,-60
 4006394:	dfc00e15 	stw	ra,56(sp)
 4006398:	df000d15 	stw	fp,52(sp)
 400639c:	df000d04 	addi	fp,sp,52
 40063a0:	e13ffd15 	stw	r4,-12(fp)
 40063a4:	e17ffe15 	stw	r5,-8(fp)
 40063a8:	3005883a 	mov	r2,r6
 40063ac:	e0bfff0d 	sth	r2,-4(fp)
	// Look up the host first
	int ret = 0;
 40063b0:	e03ff315 	stw	zero,-52(fp)
	DNSClient dns;
 40063b4:	e0bff504 	addi	r2,fp,-44
 40063b8:	1009883a 	mov	r4,r2
 40063bc:	4005b5c0 	call	4005b5c <_ZN9DNSClientC1Ev>
	IPAddress remote_addr;
 40063c0:	e0bffc04 	addi	r2,fp,-16
 40063c4:	1009883a 	mov	r4,r2
 40063c8:	400854c0 	call	400854c <_ZN9IPAddressC1Ev>

	dns.begin(Ethernet.dnsServerIP());
 40063cc:	40058080 	call	4005808 <_ZN13EthernetClass11dnsServerIPEv>
 40063d0:	e0bff415 	stw	r2,-48(fp)
 40063d4:	e0fff404 	addi	r3,fp,-48
 40063d8:	e0bff504 	addi	r2,fp,-44
 40063dc:	180b883a 	mov	r5,r3
 40063e0:	1009883a 	mov	r4,r2
 40063e4:	4002f780 	call	4002f78 <_ZN9DNSClient5beginERK9IPAddress>
	ret = dns.getHostByName(host, remote_addr);
 40063e8:	e0fffc04 	addi	r3,fp,-16
 40063ec:	e0bff504 	addi	r2,fp,-44
 40063f0:	01c4e204 	movi	r7,5000
 40063f4:	180d883a 	mov	r6,r3
 40063f8:	e17ffe17 	ldw	r5,-8(fp)
 40063fc:	1009883a 	mov	r4,r2
 4006400:	40030e80 	call	40030e8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>
 4006404:	e0bff315 	stw	r2,-52(fp)
	if (ret != 1) return ret;
 4006408:	e0bff317 	ldw	r2,-52(fp)
 400640c:	10800060 	cmpeqi	r2,r2,1
 4006410:	1000021e 	bne	r2,zero,400641c <_ZN11EthernetUDP11beginPacketEPKct+0x8c>
 4006414:	e0bff317 	ldw	r2,-52(fp)
 4006418:	00000906 	br	4006440 <_ZN11EthernetUDP11beginPacketEPKct+0xb0>
	return beginPacket(remote_addr, port);
 400641c:	e0bffd17 	ldw	r2,-12(fp)
 4006420:	10800017 	ldw	r2,0(r2)
 4006424:	10800304 	addi	r2,r2,12
 4006428:	10800017 	ldw	r2,0(r2)
 400642c:	e0ffff0b 	ldhu	r3,-4(fp)
 4006430:	180d883a 	mov	r6,r3
 4006434:	e17ffc17 	ldw	r5,-16(fp)
 4006438:	e13ffd17 	ldw	r4,-12(fp)
 400643c:	103ee83a 	callr	r2
}
 4006440:	e037883a 	mov	sp,fp
 4006444:	dfc00117 	ldw	ra,4(sp)
 4006448:	df000017 	ldw	fp,0(sp)
 400644c:	dec00204 	addi	sp,sp,8
 4006450:	f800283a 	ret

04006454 <_ZN11EthernetUDP11beginPacketE9IPAddresst>:

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
 4006454:	defffa04 	addi	sp,sp,-24
 4006458:	dfc00515 	stw	ra,20(sp)
 400645c:	df000415 	stw	fp,16(sp)
 4006460:	dc000315 	stw	r16,12(sp)
 4006464:	df000404 	addi	fp,sp,16
 4006468:	e13ffc15 	stw	r4,-16(fp)
 400646c:	e17ffd15 	stw	r5,-12(fp)
 4006470:	3005883a 	mov	r2,r6
 4006474:	e0bffe0d 	sth	r2,-8(fp)
	_offset = 0;
 4006478:	e0bffc17 	ldw	r2,-16(fp)
 400647c:	1000038d 	sth	zero,14(r2)
	//Serial.printf("UDP beginPacket\n");
	return Ethernet.socketStartUDP(sockindex, rawIPAddress(ip), port);
 4006480:	e0bffc17 	ldw	r2,-16(fp)
 4006484:	10800403 	ldbu	r2,16(r2)
 4006488:	14003fcc 	andi	r16,r2,255
 400648c:	e0bffc17 	ldw	r2,-16(fp)
 4006490:	e0fffd04 	addi	r3,fp,-12
 4006494:	180b883a 	mov	r5,r3
 4006498:	1009883a 	mov	r4,r2
 400649c:	4006a4c0 	call	4006a4c <_ZN3UDP12rawIPAddressER9IPAddress>
 40064a0:	1007883a 	mov	r3,r2
 40064a4:	e0bffe0b 	ldhu	r2,-8(fp)
 40064a8:	100d883a 	mov	r6,r2
 40064ac:	180b883a 	mov	r5,r3
 40064b0:	8009883a 	mov	r4,r16
 40064b4:	4007c440 	call	4007c44 <_ZN13EthernetClass14socketStartUDPEhPht>
 40064b8:	10803fcc 	andi	r2,r2,255
}
 40064bc:	e6ffff04 	addi	sp,fp,-4
 40064c0:	dfc00217 	ldw	ra,8(sp)
 40064c4:	df000117 	ldw	fp,4(sp)
 40064c8:	dc000017 	ldw	r16,0(sp)
 40064cc:	dec00304 	addi	sp,sp,12
 40064d0:	f800283a 	ret

040064d4 <_ZN11EthernetUDP9endPacketEv>:

int EthernetUDP::endPacket()
{
 40064d4:	defffd04 	addi	sp,sp,-12
 40064d8:	dfc00215 	stw	ra,8(sp)
 40064dc:	df000115 	stw	fp,4(sp)
 40064e0:	df000104 	addi	fp,sp,4
 40064e4:	e13fff15 	stw	r4,-4(fp)
	return Ethernet.socketSendUDP(sockindex);
 40064e8:	e0bfff17 	ldw	r2,-4(fp)
 40064ec:	10800403 	ldbu	r2,16(r2)
 40064f0:	10803fcc 	andi	r2,r2,255
 40064f4:	1009883a 	mov	r4,r2
 40064f8:	4007d000 	call	4007d00 <_ZN13EthernetClass13socketSendUDPEh>
 40064fc:	10803fcc 	andi	r2,r2,255
}
 4006500:	e037883a 	mov	sp,fp
 4006504:	dfc00117 	ldw	ra,4(sp)
 4006508:	df000017 	ldw	fp,0(sp)
 400650c:	dec00204 	addi	sp,sp,8
 4006510:	f800283a 	ret

04006514 <_ZN11EthernetUDP5writeEh>:

size_t EthernetUDP::write(uint8_t byte)
{
 4006514:	defffd04 	addi	sp,sp,-12
 4006518:	df000215 	stw	fp,8(sp)
 400651c:	df000204 	addi	fp,sp,8
 4006520:	e13ffe15 	stw	r4,-8(fp)
 4006524:	2805883a 	mov	r2,r5
 4006528:	e0bfff05 	stb	r2,-4(fp)
	// TODO fix
	//return write(&byte, 1);
}
 400652c:	0001883a 	nop
 4006530:	e037883a 	mov	sp,fp
 4006534:	df000017 	ldw	fp,0(sp)
 4006538:	dec00104 	addi	sp,sp,4
 400653c:	f800283a 	ret

04006540 <_ZN11EthernetUDP5writeEPKhj>:

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
 4006540:	defffa04 	addi	sp,sp,-24
 4006544:	dfc00515 	stw	ra,20(sp)
 4006548:	df000415 	stw	fp,16(sp)
 400654c:	df000404 	addi	fp,sp,16
 4006550:	e13ffd15 	stw	r4,-12(fp)
 4006554:	e17ffe15 	stw	r5,-8(fp)
 4006558:	e1bfff15 	stw	r6,-4(fp)
	//Serial.printf("UDP write %d\n", size);
	uint16_t bytes_written = Ethernet.socketBufferData(sockindex, _offset, buffer, size);
 400655c:	e0bffd17 	ldw	r2,-12(fp)
 4006560:	10800403 	ldbu	r2,16(r2)
 4006564:	10c03fcc 	andi	r3,r2,255
 4006568:	e0bffd17 	ldw	r2,-12(fp)
 400656c:	1080038b 	ldhu	r2,14(r2)
 4006570:	113fffcc 	andi	r4,r2,65535
 4006574:	e0bfff17 	ldw	r2,-4(fp)
 4006578:	10bfffcc 	andi	r2,r2,65535
 400657c:	100f883a 	mov	r7,r2
 4006580:	e1bffe17 	ldw	r6,-8(fp)
 4006584:	200b883a 	mov	r5,r4
 4006588:	1809883a 	mov	r4,r3
 400658c:	4007bb00 	call	4007bb0 <_ZN13EthernetClass16socketBufferDataEhtPKht>
 4006590:	e0bffc0d 	sth	r2,-16(fp)
	_offset += bytes_written;
 4006594:	e0bffd17 	ldw	r2,-12(fp)
 4006598:	10c0038b 	ldhu	r3,14(r2)
 400659c:	e0bffc0b 	ldhu	r2,-16(fp)
 40065a0:	1885883a 	add	r2,r3,r2
 40065a4:	1007883a 	mov	r3,r2
 40065a8:	e0bffd17 	ldw	r2,-12(fp)
 40065ac:	10c0038d 	sth	r3,14(r2)
	return bytes_written;
 40065b0:	e0bffc0b 	ldhu	r2,-16(fp)
}
 40065b4:	e037883a 	mov	sp,fp
 40065b8:	dfc00117 	ldw	ra,4(sp)
 40065bc:	df000017 	ldw	fp,0(sp)
 40065c0:	dec00204 	addi	sp,sp,8
 40065c4:	f800283a 	ret

040065c8 <_ZN11EthernetUDP11parsePacketEv>:

int EthernetUDP::parsePacket()
{
 40065c8:	defffa04 	addi	sp,sp,-24
 40065cc:	dfc00515 	stw	ra,20(sp)
 40065d0:	df000415 	stw	fp,16(sp)
 40065d4:	df000404 	addi	fp,sp,16
 40065d8:	e13fff15 	stw	r4,-4(fp)
	// discard any remaining bytes in the last packet
	while (_remaining) {
 40065dc:	e0bfff17 	ldw	r2,-4(fp)
 40065e0:	1080048b 	ldhu	r2,18(r2)
 40065e4:	10bfffcc 	andi	r2,r2,65535
 40065e8:	10000126 	beq	r2,zero,40065f0 <_ZN11EthernetUDP11parsePacketEv+0x28>
 40065ec:	003ffb06 	br	40065dc <__alt_data_end+0xfc0065dc>

		// TODO fix
		//read((uint8_t *)NULL, _remaining);
	}

	if (Ethernet.socketRecvAvailable(sockindex) > 0) {
 40065f0:	e0bfff17 	ldw	r2,-4(fp)
 40065f4:	10800403 	ldbu	r2,16(r2)
 40065f8:	10803fcc 	andi	r2,r2,255
 40065fc:	1009883a 	mov	r4,r2
 4006600:	40076e40 	call	40076e4 <_ZN13EthernetClass19socketRecvAvailableEh>
 4006604:	10bfffcc 	andi	r2,r2,65535
 4006608:	1004c03a 	cmpne	r2,r2,zero
 400660c:	10803fcc 	andi	r2,r2,255
 4006610:	10003426 	beq	r2,zero,40066e4 <_ZN11EthernetUDP11parsePacketEv+0x11c>
		//HACK - hand-parse the UDP packet using TCP recv method
		uint8_t tmpBuf[8];
		int ret=0;
 4006614:	e03ffc15 	stw	zero,-16(fp)
		//read 8 header bytes and get IP and port from it
		ret = Ethernet.socketRecv(sockindex, tmpBuf, 8);
 4006618:	e0bfff17 	ldw	r2,-4(fp)
 400661c:	10800403 	ldbu	r2,16(r2)
 4006620:	10803fcc 	andi	r2,r2,255
 4006624:	e0fffd04 	addi	r3,fp,-12
 4006628:	01800204 	movi	r6,8
 400662c:	180b883a 	mov	r5,r3
 4006630:	1009883a 	mov	r4,r2
 4006634:	40074440 	call	4007444 <_ZN13EthernetClass10socketRecvEhPhs>
 4006638:	e0bffc15 	stw	r2,-16(fp)
		if (ret > 0) {
 400663c:	e0bffc17 	ldw	r2,-16(fp)
 4006640:	0080260e 	bge	zero,r2,40066dc <_ZN11EthernetUDP11parsePacketEv+0x114>
			_remoteIP = tmpBuf;
 4006644:	e0bfff17 	ldw	r2,-4(fp)
 4006648:	10800204 	addi	r2,r2,8
 400664c:	e0fffd04 	addi	r3,fp,-12
 4006650:	180b883a 	mov	r5,r3
 4006654:	1009883a 	mov	r4,r2
 4006658:	40087f80 	call	40087f8 <_ZN9IPAddressaSEPKh>
			_remotePort = tmpBuf[4];
 400665c:	e0bffe03 	ldbu	r2,-8(fp)
 4006660:	10c03fcc 	andi	r3,r2,255
 4006664:	e0bfff17 	ldw	r2,-4(fp)
 4006668:	10c0030d 	sth	r3,12(r2)
			_remotePort = (_remotePort << 8) + tmpBuf[5];
 400666c:	e0bfff17 	ldw	r2,-4(fp)
 4006670:	1080030b 	ldhu	r2,12(r2)
 4006674:	1004923a 	slli	r2,r2,8
 4006678:	1007883a 	mov	r3,r2
 400667c:	e0bffe43 	ldbu	r2,-7(fp)
 4006680:	10803fcc 	andi	r2,r2,255
 4006684:	1885883a 	add	r2,r3,r2
 4006688:	1007883a 	mov	r3,r2
 400668c:	e0bfff17 	ldw	r2,-4(fp)
 4006690:	10c0030d 	sth	r3,12(r2)
			_remaining = tmpBuf[6];
 4006694:	e0bffe83 	ldbu	r2,-6(fp)
 4006698:	10c03fcc 	andi	r3,r2,255
 400669c:	e0bfff17 	ldw	r2,-4(fp)
 40066a0:	10c0048d 	sth	r3,18(r2)
			_remaining = (_remaining << 8) + tmpBuf[7];
 40066a4:	e0bfff17 	ldw	r2,-4(fp)
 40066a8:	1080048b 	ldhu	r2,18(r2)
 40066ac:	1004923a 	slli	r2,r2,8
 40066b0:	1007883a 	mov	r3,r2
 40066b4:	e0bffec3 	ldbu	r2,-5(fp)
 40066b8:	10803fcc 	andi	r2,r2,255
 40066bc:	1885883a 	add	r2,r3,r2
 40066c0:	1007883a 	mov	r3,r2
 40066c4:	e0bfff17 	ldw	r2,-4(fp)
 40066c8:	10c0048d 	sth	r3,18(r2)

			// When we get here, any remaining bytes are the data
			ret = _remaining;
 40066cc:	e0bfff17 	ldw	r2,-4(fp)
 40066d0:	1080048b 	ldhu	r2,18(r2)
 40066d4:	10bfffcc 	andi	r2,r2,65535
 40066d8:	e0bffc15 	stw	r2,-16(fp)
		}
		return ret;
 40066dc:	e0bffc17 	ldw	r2,-16(fp)
 40066e0:	00000106 	br	40066e8 <_ZN11EthernetUDP11parsePacketEv+0x120>
	}
	// There aren't any packets available
	return 0;
 40066e4:	0005883a 	mov	r2,zero
}
 40066e8:	e037883a 	mov	sp,fp
 40066ec:	dfc00117 	ldw	ra,4(sp)
 40066f0:	df000017 	ldw	fp,0(sp)
 40066f4:	dec00204 	addi	sp,sp,8
 40066f8:	f800283a 	ret

040066fc <_ZN11EthernetUDP4readEv>:

int EthernetUDP::read()
{
 40066fc:	defffc04 	addi	sp,sp,-16
 4006700:	dfc00315 	stw	ra,12(sp)
 4006704:	df000215 	stw	fp,8(sp)
 4006708:	df000204 	addi	fp,sp,8
 400670c:	e13fff15 	stw	r4,-4(fp)
	uint8_t byte;

	if ((_remaining > 0) && (Ethernet.socketRecv(sockindex, &byte, 1) > 0)) {
 4006710:	e0bfff17 	ldw	r2,-4(fp)
 4006714:	1080048b 	ldhu	r2,18(r2)
 4006718:	10bfffcc 	andi	r2,r2,65535
 400671c:	10000a26 	beq	r2,zero,4006748 <_ZN11EthernetUDP4readEv+0x4c>
 4006720:	e0bfff17 	ldw	r2,-4(fp)
 4006724:	10800403 	ldbu	r2,16(r2)
 4006728:	10803fcc 	andi	r2,r2,255
 400672c:	01800044 	movi	r6,1
 4006730:	e17ffe04 	addi	r5,fp,-8
 4006734:	1009883a 	mov	r4,r2
 4006738:	40074440 	call	4007444 <_ZN13EthernetClass10socketRecvEhPhs>
 400673c:	0080020e 	bge	zero,r2,4006748 <_ZN11EthernetUDP4readEv+0x4c>
 4006740:	00800044 	movi	r2,1
 4006744:	00000106 	br	400674c <_ZN11EthernetUDP4readEv+0x50>
 4006748:	0005883a 	mov	r2,zero
 400674c:	10803fcc 	andi	r2,r2,255
 4006750:	10000926 	beq	r2,zero,4006778 <_ZN11EthernetUDP4readEv+0x7c>
		// We read things without any problems
		_remaining--;
 4006754:	e0bfff17 	ldw	r2,-4(fp)
 4006758:	1080048b 	ldhu	r2,18(r2)
 400675c:	10bfffc4 	addi	r2,r2,-1
 4006760:	1007883a 	mov	r3,r2
 4006764:	e0bfff17 	ldw	r2,-4(fp)
 4006768:	10c0048d 	sth	r3,18(r2)
		return byte;
 400676c:	e0bffe03 	ldbu	r2,-8(fp)
 4006770:	10803fcc 	andi	r2,r2,255
 4006774:	00000106 	br	400677c <_ZN11EthernetUDP4readEv+0x80>
	}

	// If we get here, there's no data available
	return -1;
 4006778:	00bfffc4 	movi	r2,-1
}
 400677c:	e037883a 	mov	sp,fp
 4006780:	dfc00117 	ldw	ra,4(sp)
 4006784:	df000017 	ldw	fp,0(sp)
 4006788:	dec00204 	addi	sp,sp,8
 400678c:	f800283a 	ret

04006790 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char *buffer, size_t len)
{
 4006790:	defffa04 	addi	sp,sp,-24
 4006794:	dfc00515 	stw	ra,20(sp)
 4006798:	df000415 	stw	fp,16(sp)
 400679c:	df000404 	addi	fp,sp,16
 40067a0:	e13ffd15 	stw	r4,-12(fp)
 40067a4:	e17ffe15 	stw	r5,-8(fp)
 40067a8:	e1bfff15 	stw	r6,-4(fp)
	if (_remaining > 0) {
 40067ac:	e0bffd17 	ldw	r2,-12(fp)
 40067b0:	1080048b 	ldhu	r2,18(r2)
 40067b4:	10bfffcc 	andi	r2,r2,65535
 40067b8:	10002a26 	beq	r2,zero,4006864 <_ZN11EthernetUDP4readEPhj+0xd4>
		int got;
		if (_remaining <= len) {
 40067bc:	e0bffd17 	ldw	r2,-12(fp)
 40067c0:	1080048b 	ldhu	r2,18(r2)
 40067c4:	10bfffcc 	andi	r2,r2,65535
 40067c8:	e0ffff17 	ldw	r3,-4(fp)
 40067cc:	18800e36 	bltu	r3,r2,4006808 <_ZN11EthernetUDP4readEPhj+0x78>
			// data should fit in the buffer
			got = Ethernet.socketRecv(sockindex, buffer, _remaining);
 40067d0:	e0bffd17 	ldw	r2,-12(fp)
 40067d4:	10800403 	ldbu	r2,16(r2)
 40067d8:	10c03fcc 	andi	r3,r2,255
 40067dc:	e0bffd17 	ldw	r2,-12(fp)
 40067e0:	1080048b 	ldhu	r2,18(r2)
 40067e4:	10bfffcc 	andi	r2,r2,65535
 40067e8:	10a0001c 	xori	r2,r2,32768
 40067ec:	10a00004 	addi	r2,r2,-32768
 40067f0:	100d883a 	mov	r6,r2
 40067f4:	e17ffe17 	ldw	r5,-8(fp)
 40067f8:	1809883a 	mov	r4,r3
 40067fc:	40074440 	call	4007444 <_ZN13EthernetClass10socketRecvEhPhs>
 4006800:	e0bffc15 	stw	r2,-16(fp)
 4006804:	00000c06 	br	4006838 <_ZN11EthernetUDP4readEPhj+0xa8>
		} else {
			// too much data for the buffer,
			// grab as much as will fit
			got = Ethernet.socketRecv(sockindex, buffer, len);
 4006808:	e0bffd17 	ldw	r2,-12(fp)
 400680c:	10800403 	ldbu	r2,16(r2)
 4006810:	10803fcc 	andi	r2,r2,255
 4006814:	e0ffff17 	ldw	r3,-4(fp)
 4006818:	18ffffcc 	andi	r3,r3,65535
 400681c:	18e0001c 	xori	r3,r3,32768
 4006820:	18e00004 	addi	r3,r3,-32768
 4006824:	180d883a 	mov	r6,r3
 4006828:	e17ffe17 	ldw	r5,-8(fp)
 400682c:	1009883a 	mov	r4,r2
 4006830:	40074440 	call	4007444 <_ZN13EthernetClass10socketRecvEhPhs>
 4006834:	e0bffc15 	stw	r2,-16(fp)
		}
		if (got > 0) {
 4006838:	e0bffc17 	ldw	r2,-16(fp)
 400683c:	0080090e 	bge	zero,r2,4006864 <_ZN11EthernetUDP4readEPhj+0xd4>
			_remaining -= got;
 4006840:	e0bffd17 	ldw	r2,-12(fp)
 4006844:	1080048b 	ldhu	r2,18(r2)
 4006848:	e0fffc17 	ldw	r3,-16(fp)
 400684c:	10c5c83a 	sub	r2,r2,r3
 4006850:	1007883a 	mov	r3,r2
 4006854:	e0bffd17 	ldw	r2,-12(fp)
 4006858:	10c0048d 	sth	r3,18(r2)
			//Serial.printf("UDP read %d\n", got);
			return got;
 400685c:	e0bffc17 	ldw	r2,-16(fp)
 4006860:	00000106 	br	4006868 <_ZN11EthernetUDP4readEPhj+0xd8>
		}
	}
	// If we get here, there's no data available or recv failed
	return -1;
 4006864:	00bfffc4 	movi	r2,-1
}
 4006868:	e037883a 	mov	sp,fp
 400686c:	dfc00117 	ldw	ra,4(sp)
 4006870:	df000017 	ldw	fp,0(sp)
 4006874:	dec00204 	addi	sp,sp,8
 4006878:	f800283a 	ret

0400687c <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
 400687c:	defffd04 	addi	sp,sp,-12
 4006880:	dfc00215 	stw	ra,8(sp)
 4006884:	df000115 	stw	fp,4(sp)
 4006888:	df000104 	addi	fp,sp,4
 400688c:	e13fff15 	stw	r4,-4(fp)
	// Unlike recv, peek doesn't check to see if there's any data available, so we must.
	// If the user hasn't called parsePacket yet then return nothing otherwise they
	// may get the UDP header
	if (sockindex >= MAX_SOCK_NUM || _remaining == 0) return -1;
 4006890:	e0bfff17 	ldw	r2,-4(fp)
 4006894:	10800403 	ldbu	r2,16(r2)
 4006898:	10803fcc 	andi	r2,r2,255
 400689c:	10800228 	cmpgeui	r2,r2,8
 40068a0:	1000041e 	bne	r2,zero,40068b4 <_ZN11EthernetUDP4peekEv+0x38>
 40068a4:	e0bfff17 	ldw	r2,-4(fp)
 40068a8:	1080048b 	ldhu	r2,18(r2)
 40068ac:	10bfffcc 	andi	r2,r2,65535
 40068b0:	1000021e 	bne	r2,zero,40068bc <_ZN11EthernetUDP4peekEv+0x40>
 40068b4:	00bfffc4 	movi	r2,-1
 40068b8:	00000606 	br	40068d4 <_ZN11EthernetUDP4peekEv+0x58>
	return Ethernet.socketPeek(sockindex);
 40068bc:	e0bfff17 	ldw	r2,-4(fp)
 40068c0:	10800403 	ldbu	r2,16(r2)
 40068c4:	10803fcc 	andi	r2,r2,255
 40068c8:	1009883a 	mov	r4,r2
 40068cc:	40077900 	call	4007790 <_ZN13EthernetClass10socketPeekEh>
 40068d0:	10803fcc 	andi	r2,r2,255
}
 40068d4:	e037883a 	mov	sp,fp
 40068d8:	dfc00117 	ldw	ra,4(sp)
 40068dc:	df000017 	ldw	fp,0(sp)
 40068e0:	dec00204 	addi	sp,sp,8
 40068e4:	f800283a 	ret

040068e8 <_ZN11EthernetUDP5flushEv>:

void EthernetUDP::flush()
{
 40068e8:	defffe04 	addi	sp,sp,-8
 40068ec:	df000115 	stw	fp,4(sp)
 40068f0:	df000104 	addi	fp,sp,4
 40068f4:	e13fff15 	stw	r4,-4(fp)
	// TODO: we should wait for TX buffer to be emptied
}
 40068f8:	0001883a 	nop
 40068fc:	e037883a 	mov	sp,fp
 4006900:	df000017 	ldw	fp,0(sp)
 4006904:	dec00104 	addi	sp,sp,4
 4006908:	f800283a 	ret

0400690c <_ZN11EthernetUDP14beginMulticastE9IPAddresst>:

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::beginMulticast(IPAddress ip, uint16_t port)
{
 400690c:	defffb04 	addi	sp,sp,-20
 4006910:	dfc00415 	stw	ra,16(sp)
 4006914:	df000315 	stw	fp,12(sp)
 4006918:	df000304 	addi	fp,sp,12
 400691c:	e13ffd15 	stw	r4,-12(fp)
 4006920:	e17ffe15 	stw	r5,-8(fp)
 4006924:	3005883a 	mov	r2,r6
 4006928:	e0bfff0d 	sth	r2,-4(fp)
	if (sockindex < MAX_SOCK_NUM) Ethernet.socketClose(sockindex);
 400692c:	e0bffd17 	ldw	r2,-12(fp)
 4006930:	10800403 	ldbu	r2,16(r2)
 4006934:	10803fcc 	andi	r2,r2,255
 4006938:	10800228 	cmpgeui	r2,r2,8
 400693c:	1000051e 	bne	r2,zero,4006954 <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x48>
 4006940:	e0bffd17 	ldw	r2,-12(fp)
 4006944:	10800403 	ldbu	r2,16(r2)
 4006948:	10803fcc 	andi	r2,r2,255
 400694c:	1009883a 	mov	r4,r2
 4006950:	40071680 	call	4007168 <_ZN13EthernetClass11socketCloseEh>
	sockindex = Ethernet.socketBeginMulticast(SnMR::UDP | SnMR::MULTI, ip, port);
 4006954:	e0bfff0b 	ldhu	r2,-4(fp)
 4006958:	100d883a 	mov	r6,r2
 400695c:	e17ffe17 	ldw	r5,-8(fp)
 4006960:	01002084 	movi	r4,130
 4006964:	4006dd80 	call	4006dd8 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst>
 4006968:	1007883a 	mov	r3,r2
 400696c:	e0bffd17 	ldw	r2,-12(fp)
 4006970:	10c00405 	stb	r3,16(r2)
	if (sockindex >= MAX_SOCK_NUM) return 0;
 4006974:	e0bffd17 	ldw	r2,-12(fp)
 4006978:	10800403 	ldbu	r2,16(r2)
 400697c:	10803fcc 	andi	r2,r2,255
 4006980:	10800230 	cmpltui	r2,r2,8
 4006984:	1000021e 	bne	r2,zero,4006990 <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x84>
 4006988:	0005883a 	mov	r2,zero
 400698c:	00000606 	br	40069a8 <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x9c>
	_port = port;
 4006990:	e0bffd17 	ldw	r2,-12(fp)
 4006994:	e0ffff0b 	ldhu	r3,-4(fp)
 4006998:	10c0010d 	sth	r3,4(r2)
	_remaining = 0;
 400699c:	e0bffd17 	ldw	r2,-12(fp)
 40069a0:	1000048d 	sth	zero,18(r2)
	return 1;
 40069a4:	00800044 	movi	r2,1
}
 40069a8:	e037883a 	mov	sp,fp
 40069ac:	dfc00117 	ldw	ra,4(sp)
 40069b0:	df000017 	ldw	fp,0(sp)
 40069b4:	dec00204 	addi	sp,sp,8
 40069b8:	f800283a 	ret

040069bc <_Z41__static_initialization_and_destruction_0ii>:
 40069bc:	defffb04 	addi	sp,sp,-20
 40069c0:	dfc00415 	stw	ra,16(sp)
 40069c4:	df000315 	stw	fp,12(sp)
 40069c8:	df000304 	addi	fp,sp,12
 40069cc:	e13ffe15 	stw	r4,-8(fp)
 40069d0:	e17fff15 	stw	r5,-4(fp)
 40069d4:	e0bffe17 	ldw	r2,-8(fp)
 40069d8:	10800058 	cmpnei	r2,r2,1
 40069dc:	1000091e 	bne	r2,zero,4006a04 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40069e0:	e0ffff17 	ldw	r3,-4(fp)
 40069e4:	00bfffd4 	movui	r2,65535
 40069e8:	1880061e 	bne	r3,r2,4006a04 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40069ec:	d8000015 	stw	zero,0(sp)
 40069f0:	000f883a 	mov	r7,zero
 40069f4:	000d883a 	mov	r6,zero
 40069f8:	000b883a 	mov	r5,zero
 40069fc:	d112dc04 	addi	r4,gp,19312
 4006a00:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
 4006a04:	0001883a 	nop
 4006a08:	e037883a 	mov	sp,fp
 4006a0c:	dfc00117 	ldw	ra,4(sp)
 4006a10:	df000017 	ldw	fp,0(sp)
 4006a14:	dec00204 	addi	sp,sp,8
 4006a18:	f800283a 	ret

04006a1c <_GLOBAL__sub_I__ZN11EthernetUDP5beginEt>:
 4006a1c:	defffe04 	addi	sp,sp,-8
 4006a20:	dfc00115 	stw	ra,4(sp)
 4006a24:	df000015 	stw	fp,0(sp)
 4006a28:	d839883a 	mov	fp,sp
 4006a2c:	017fffd4 	movui	r5,65535
 4006a30:	01000044 	movi	r4,1
 4006a34:	40069bc0 	call	40069bc <_Z41__static_initialization_and_destruction_0ii>
 4006a38:	e037883a 	mov	sp,fp
 4006a3c:	dfc00117 	ldw	ra,4(sp)
 4006a40:	df000017 	ldw	fp,0(sp)
 4006a44:	dec00204 	addi	sp,sp,8
 4006a48:	f800283a 	ret

04006a4c <_ZN3UDP12rawIPAddressER9IPAddress>:
  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() =0;
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() =0;
protected:
  uint8_t* rawIPAddress(IPAddress& addr) { return addr.raw_address(); };
 4006a4c:	defffc04 	addi	sp,sp,-16
 4006a50:	dfc00315 	stw	ra,12(sp)
 4006a54:	df000215 	stw	fp,8(sp)
 4006a58:	df000204 	addi	fp,sp,8
 4006a5c:	e13ffe15 	stw	r4,-8(fp)
 4006a60:	e17fff15 	stw	r5,-4(fp)
 4006a64:	e13fff17 	ldw	r4,-4(fp)
 4006a68:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 4006a6c:	e037883a 	mov	sp,fp
 4006a70:	dfc00117 	ldw	ra,4(sp)
 4006a74:	df000017 	ldw	fp,0(sp)
 4006a78:	dec00204 	addi	sp,sp,8
 4006a7c:	f800283a 	ret

04006a80 <_ZN11EthernetUDP4readEPcj>:
	// Read up to len bytes from the current packet and place them into buffer
	// Returns the number of bytes read, or 0 if none are available
	virtual int read(unsigned char* buffer, size_t len);
	// Read up to len characters from the current packet and place them into buffer
	// Returns the number of characters read, or 0 if none are available
	virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 4006a80:	defffb04 	addi	sp,sp,-20
 4006a84:	dfc00415 	stw	ra,16(sp)
 4006a88:	df000315 	stw	fp,12(sp)
 4006a8c:	df000304 	addi	fp,sp,12
 4006a90:	e13ffd15 	stw	r4,-12(fp)
 4006a94:	e17ffe15 	stw	r5,-8(fp)
 4006a98:	e1bfff15 	stw	r6,-4(fp)
 4006a9c:	e0bffd17 	ldw	r2,-12(fp)
 4006aa0:	10800017 	ldw	r2,0(r2)
 4006aa4:	10800b04 	addi	r2,r2,44
 4006aa8:	10800017 	ldw	r2,0(r2)
 4006aac:	e1bfff17 	ldw	r6,-4(fp)
 4006ab0:	e17ffe17 	ldw	r5,-8(fp)
 4006ab4:	e13ffd17 	ldw	r4,-12(fp)
 4006ab8:	103ee83a 	callr	r2
 4006abc:	e037883a 	mov	sp,fp
 4006ac0:	dfc00117 	ldw	ra,4(sp)
 4006ac4:	df000017 	ldw	fp,0(sp)
 4006ac8:	dec00204 	addi	sp,sp,8
 4006acc:	f800283a 	ret

04006ad0 <_ZN11EthernetUDP9localPortEv>:

	// Return the IP address of the host who sent the current incoming packet
	virtual IPAddress remoteIP() { return _remoteIP; };
	// Return the port of the host who sent the current incoming packet
	virtual uint16_t remotePort() { return _remotePort; };
	virtual uint16_t localPort() { return _port; }
 4006ad0:	defffe04 	addi	sp,sp,-8
 4006ad4:	df000115 	stw	fp,4(sp)
 4006ad8:	df000104 	addi	fp,sp,4
 4006adc:	e13fff15 	stw	r4,-4(fp)
 4006ae0:	e0bfff17 	ldw	r2,-4(fp)
 4006ae4:	1080010b 	ldhu	r2,4(r2)
 4006ae8:	e037883a 	mov	sp,fp
 4006aec:	df000017 	ldw	fp,0(sp)
 4006af0:	dec00104 	addi	sp,sp,4
 4006af4:	f800283a 	ret

04006af8 <_ZN13EthernetClass14socketPortRandEt>:
/*          Socket management            */
/*****************************************/


void EthernetClass::socketPortRand(uint16_t n)
{
 4006af8:	defffe04 	addi	sp,sp,-8
 4006afc:	df000115 	stw	fp,4(sp)
 4006b00:	df000104 	addi	fp,sp,4
 4006b04:	2005883a 	mov	r2,r4
 4006b08:	e0bfff0d 	sth	r2,-4(fp)
	n &= 0x3FFF;
 4006b0c:	e0bfff0b 	ldhu	r2,-4(fp)
 4006b10:	108fffcc 	andi	r2,r2,16383
 4006b14:	e0bfff0d 	sth	r2,-4(fp)
	local_port ^= n;
 4006b18:	d0e00d0b 	ldhu	r3,-32716(gp)
 4006b1c:	e0bfff0b 	ldhu	r2,-4(fp)
 4006b20:	1884f03a 	xor	r2,r3,r2
 4006b24:	d0a00d0d 	sth	r2,-32716(gp)
	//Serial.printf("socketPortRand %d, srcport=%d\n", n, local_port);
}
 4006b28:	0001883a 	nop
 4006b2c:	e037883a 	mov	sp,fp
 4006b30:	df000017 	ldw	fp,0(sp)
 4006b34:	dec00104 	addi	sp,sp,4
 4006b38:	f800283a 	ret

04006b3c <_ZN13EthernetClass11socketBeginEht>:

uint8_t EthernetClass::socketBegin(uint8_t protocol, uint16_t port)
{
 4006b3c:	defff804 	addi	sp,sp,-32
 4006b40:	dfc00715 	stw	ra,28(sp)
 4006b44:	df000615 	stw	fp,24(sp)
 4006b48:	dc000515 	stw	r16,20(sp)
 4006b4c:	df000604 	addi	fp,sp,24
 4006b50:	2007883a 	mov	r3,r4
 4006b54:	2805883a 	mov	r2,r5
 4006b58:	e0fffd05 	stb	r3,-12(fp)
 4006b5c:	e0bffe0d 	sth	r2,-8(fp)
	uint8_t s, status[MAX_SOCK_NUM], chip, maxindex=MAX_SOCK_NUM;
 4006b60:	00800204 	movi	r2,8
 4006b64:	e0bffa45 	stb	r2,-23(fp)

	// first check hardware compatibility
	chip = W5100.getChip();
 4006b68:	4004a240 	call	4004a24 <_ZN10W5100Class7getChipEv>
 4006b6c:	e0bffa85 	stb	r2,-22(fp)
	if (!chip) return MAX_SOCK_NUM; // immediate error if no hardware detected
 4006b70:	e0bffa83 	ldbu	r2,-22(fp)
 4006b74:	1000021e 	bne	r2,zero,4006b80 <_ZN13EthernetClass11socketBeginEht+0x44>
 4006b78:	00800204 	movi	r2,8
 4006b7c:	00009006 	br	4006dc0 <_ZN13EthernetClass11socketBeginEht+0x284>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4006b80:	e0bffa83 	ldbu	r2,-22(fp)
 4006b84:	10800cd8 	cmpnei	r2,r2,51
 4006b88:	1000021e 	bne	r2,zero,4006b94 <_ZN13EthernetClass11socketBeginEht+0x58>
 4006b8c:	00800104 	movi	r2,4
 4006b90:	e0bffa45 	stb	r2,-23(fp)
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 4006b94:	e03ffa05 	stb	zero,-24(fp)
 4006b98:	e0fffa03 	ldbu	r3,-24(fp)
 4006b9c:	e0bffa43 	ldbu	r2,-23(fp)
 4006ba0:	1880122e 	bgeu	r3,r2,4006bec <_ZN13EthernetClass11socketBeginEht+0xb0>
		status[s] = W5100.readSnSR(s);
 4006ba4:	e43ffa03 	ldbu	r16,-24(fp)
 4006ba8:	e0bffa03 	ldbu	r2,-24(fp)
 4006bac:	1009883a 	mov	r4,r2
 4006bb0:	40080980 	call	4008098 <_ZN10W5100Class8readSnSREh>
 4006bb4:	1007883a 	mov	r3,r2
 4006bb8:	e0bffb04 	addi	r2,fp,-20
 4006bbc:	1405883a 	add	r2,r2,r16
 4006bc0:	10c00005 	stb	r3,0(r2)
		if (status[s] == SnSR::CLOSED) goto makesocket;
 4006bc4:	e0bffa03 	ldbu	r2,-24(fp)
 4006bc8:	e0fffb04 	addi	r3,fp,-20
 4006bcc:	1885883a 	add	r2,r3,r2
 4006bd0:	10800003 	ldbu	r2,0(r2)
 4006bd4:	10803fcc 	andi	r2,r2,255
 4006bd8:	10002b26 	beq	r2,zero,4006c88 <_ZN13EthernetClass11socketBeginEht+0x14c>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 4006bdc:	e0bffa03 	ldbu	r2,-24(fp)
 4006be0:	10800044 	addi	r2,r2,1
 4006be4:	e0bffa05 	stb	r2,-24(fp)
 4006be8:	003feb06 	br	4006b98 <__alt_data_end+0xfc006b98>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 4006bec:	e03ffa05 	stb	zero,-24(fp)
 4006bf0:	e0fffa03 	ldbu	r3,-24(fp)
 4006bf4:	e0bffa43 	ldbu	r2,-23(fp)
 4006bf8:	1880152e 	bgeu	r3,r2,4006c50 <_ZN13EthernetClass11socketBeginEht+0x114>
		uint8_t stat = status[s];
 4006bfc:	e0bffa03 	ldbu	r2,-24(fp)
 4006c00:	e0fffb04 	addi	r3,fp,-20
 4006c04:	1885883a 	add	r2,r3,r2
 4006c08:	10800003 	ldbu	r2,0(r2)
 4006c0c:	e0bffac5 	stb	r2,-21(fp)
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4006c10:	e0bffac3 	ldbu	r2,-21(fp)
 4006c14:	10800758 	cmpnei	r2,r2,29
 4006c18:	10000f26 	beq	r2,zero,4006c58 <_ZN13EthernetClass11socketBeginEht+0x11c>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 4006c1c:	e0bffac3 	ldbu	r2,-21(fp)
 4006c20:	108006d8 	cmpnei	r2,r2,27
 4006c24:	10000e26 	beq	r2,zero,4006c60 <_ZN13EthernetClass11socketBeginEht+0x124>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4006c28:	e0bffac3 	ldbu	r2,-21(fp)
 4006c2c:	10800618 	cmpnei	r2,r2,24
 4006c30:	10000d26 	beq	r2,zero,4006c68 <_ZN13EthernetClass11socketBeginEht+0x12c>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4006c34:	e0bffac3 	ldbu	r2,-21(fp)
 4006c38:	10800698 	cmpnei	r2,r2,26
 4006c3c:	10000c26 	beq	r2,zero,4006c70 <_ZN13EthernetClass11socketBeginEht+0x134>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 4006c40:	e0bffa03 	ldbu	r2,-24(fp)
 4006c44:	10800044 	addi	r2,r2,1
 4006c48:	e0bffa05 	stb	r2,-24(fp)
 4006c4c:	003fe806 	br	4006bf0 <__alt_data_end+0xfc006bf0>
		uint8_t stat = status[s];
		// TODO: this also needs to check if no more data
		if (stat == SnSR::CLOSE_WAIT) goto closemakesocket;
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
 4006c50:	00800204 	movi	r2,8
 4006c54:	00005a06 	br	4006dc0 <_ZN13EthernetClass11socketBeginEht+0x284>
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
		uint8_t stat = status[s];
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4006c58:	0001883a 	nop
 4006c5c:	00000506 	br	4006c74 <_ZN13EthernetClass11socketBeginEht+0x138>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 4006c60:	0001883a 	nop
 4006c64:	00000306 	br	4006c74 <_ZN13EthernetClass11socketBeginEht+0x138>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4006c68:	0001883a 	nop
 4006c6c:	00000106 	br	4006c74 <_ZN13EthernetClass11socketBeginEht+0x138>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4006c70:	0001883a 	nop
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
 4006c74:	e0bffa03 	ldbu	r2,-24(fp)
 4006c78:	01400404 	movi	r5,16
 4006c7c:	1009883a 	mov	r4,r2
 4006c80:	40092040 	call	4009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>
 4006c84:	00000106 	br	4006c8c <_ZN13EthernetClass11socketBeginEht+0x150>
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
 4006c88:	0001883a 	nop
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
makesocket:
	//Serial.printf("W5000socket %d\n", s);
	EthernetServer::server_port[s] = 0;
 4006c8c:	e0fffa03 	ldbu	r3,-24(fp)
 4006c90:	00810134 	movhi	r2,1028
 4006c94:	10a60b04 	addi	r2,r2,-26580
 4006c98:	18c7883a 	add	r3,r3,r3
 4006c9c:	10c5883a 	add	r2,r2,r3
 4006ca0:	1000000d 	sth	zero,0(r2)
	usleep (250); // TODO: is this needed??
 4006ca4:	01003e84 	movi	r4,250
 4006ca8:	401cc880 	call	401cc88 <usleep>
	W5100.writeSnMR(s, protocol);
 4006cac:	e0bffa03 	ldbu	r2,-24(fp)
 4006cb0:	e0fffd03 	ldbu	r3,-12(fp)
 4006cb4:	180b883a 	mov	r5,r3
 4006cb8:	1009883a 	mov	r4,r2
 4006cbc:	4007fbc0 	call	4007fbc <_ZN10W5100Class9writeSnMREhh>
	W5100.writeSnIR(s, 0xFF);
 4006cc0:	e0bffa03 	ldbu	r2,-24(fp)
 4006cc4:	01403fc4 	movi	r5,255
 4006cc8:	1009883a 	mov	r4,r2
 4006ccc:	400800c0 	call	400800c <_ZN10W5100Class9writeSnIREhh>
	if (port > 0) {
 4006cd0:	e0bffe0b 	ldhu	r2,-8(fp)
 4006cd4:	10000626 	beq	r2,zero,4006cf0 <_ZN13EthernetClass11socketBeginEht+0x1b4>
		W5100.writeSnPORT(s, port);
 4006cd8:	e0bffa03 	ldbu	r2,-24(fp)
 4006cdc:	e0fffe0b 	ldhu	r3,-8(fp)
 4006ce0:	180b883a 	mov	r5,r3
 4006ce4:	1009883a 	mov	r4,r2
 4006ce8:	40080d40 	call	40080d4 <_ZN10W5100Class11writeSnPORTEht>
 4006cec:	00001006 	br	4006d30 <_ZN13EthernetClass11socketBeginEht+0x1f4>
	} else {
		// if don't set the source port, set local_port number.
		if (++local_port < 49152) local_port = 49152;
 4006cf0:	d0a00d0b 	ldhu	r2,-32716(gp)
 4006cf4:	10800044 	addi	r2,r2,1
 4006cf8:	d0a00d0d 	sth	r2,-32716(gp)
 4006cfc:	d0a00d0b 	ldhu	r2,-32716(gp)
 4006d00:	10bfffcc 	andi	r2,r2,65535
 4006d04:	10b00030 	cmpltui	r2,r2,49152
 4006d08:	10803fcc 	andi	r2,r2,255
 4006d0c:	10000226 	beq	r2,zero,4006d18 <_ZN13EthernetClass11socketBeginEht+0x1dc>
 4006d10:	00b00004 	movi	r2,-16384
 4006d14:	d0a00d0d 	sth	r2,-32716(gp)
		W5100.writeSnPORT(s, local_port);
 4006d18:	e0bffa03 	ldbu	r2,-24(fp)
 4006d1c:	d0e00d0b 	ldhu	r3,-32716(gp)
 4006d20:	18ffffcc 	andi	r3,r3,65535
 4006d24:	180b883a 	mov	r5,r3
 4006d28:	1009883a 	mov	r4,r2
 4006d2c:	40080d40 	call	40080d4 <_ZN10W5100Class11writeSnPORTEht>
	}
	W5100.execCmdSn(s, Sock_OPEN);
 4006d30:	e0bffa03 	ldbu	r2,-24(fp)
 4006d34:	01400044 	movi	r5,1
 4006d38:	1009883a 	mov	r4,r2
 4006d3c:	40092040 	call	4009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	state[s].RX_RSR = 0;
 4006d40:	e0fffa03 	ldbu	r3,-24(fp)
 4006d44:	00810134 	movhi	r2,1028
 4006d48:	10a60f04 	addi	r2,r2,-26564
 4006d4c:	180690fa 	slli	r3,r3,3
 4006d50:	10c5883a 	add	r2,r2,r3
 4006d54:	1000000d 	sth	zero,0(r2)
	state[s].RX_RD  = W5100.readSnRX_RD(s); // always zero?
 4006d58:	e43ffa03 	ldbu	r16,-24(fp)
 4006d5c:	e0bffa03 	ldbu	r2,-24(fp)
 4006d60:	1009883a 	mov	r4,r2
 4006d64:	40084140 	call	4008414 <_ZN10W5100Class11readSnRX_RDEh>
 4006d68:	1009883a 	mov	r4,r2
 4006d6c:	00810134 	movhi	r2,1028
 4006d70:	10a60f04 	addi	r2,r2,-26564
 4006d74:	800690fa 	slli	r3,r16,3
 4006d78:	10c5883a 	add	r2,r2,r3
 4006d7c:	10800084 	addi	r2,r2,2
 4006d80:	1100000d 	sth	r4,0(r2)
	state[s].RX_inc = 0;
 4006d84:	e0fffa03 	ldbu	r3,-24(fp)
 4006d88:	00810134 	movhi	r2,1028
 4006d8c:	10a60f04 	addi	r2,r2,-26564
 4006d90:	180690fa 	slli	r3,r3,3
 4006d94:	10c5883a 	add	r2,r2,r3
 4006d98:	10800184 	addi	r2,r2,6
 4006d9c:	10000005 	stb	zero,0(r2)
	state[s].TX_FSR = 0;
 4006da0:	e0fffa03 	ldbu	r3,-24(fp)
 4006da4:	00810134 	movhi	r2,1028
 4006da8:	10a60f04 	addi	r2,r2,-26564
 4006dac:	180690fa 	slli	r3,r3,3
 4006db0:	10c5883a 	add	r2,r2,r3
 4006db4:	10800104 	addi	r2,r2,4
 4006db8:	1000000d 	sth	zero,0(r2)
	//Serial.printf("W5000socket prot=%d, RX_RD=%d\n", W5100.readSnMR(s), state[s].RX_RD);
	return s;
 4006dbc:	e0bffa03 	ldbu	r2,-24(fp)
}
 4006dc0:	e6ffff04 	addi	sp,fp,-4
 4006dc4:	dfc00217 	ldw	ra,8(sp)
 4006dc8:	df000117 	ldw	fp,4(sp)
 4006dcc:	dc000017 	ldw	r16,0(sp)
 4006dd0:	dec00304 	addi	sp,sp,12
 4006dd4:	f800283a 	ret

04006dd8 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst>:

// multicast version to set fields before open  thd
uint8_t EthernetClass::socketBeginMulticast(uint8_t protocol, IPAddress ip, uint16_t port)
{
 4006dd8:	defff504 	addi	sp,sp,-44
 4006ddc:	dfc00a15 	stw	ra,40(sp)
 4006de0:	df000915 	stw	fp,36(sp)
 4006de4:	dc000815 	stw	r16,32(sp)
 4006de8:	df000904 	addi	fp,sp,36
 4006dec:	2007883a 	mov	r3,r4
 4006df0:	e17ffd15 	stw	r5,-12(fp)
 4006df4:	3005883a 	mov	r2,r6
 4006df8:	e0fffc05 	stb	r3,-16(fp)
 4006dfc:	e0bffe0d 	sth	r2,-8(fp)
	uint8_t s, status[MAX_SOCK_NUM], chip, maxindex=MAX_SOCK_NUM;
 4006e00:	00800204 	movi	r2,8
 4006e04:	e0bff745 	stb	r2,-35(fp)

	// first check hardware compatibility
	chip = W5100.getChip();
 4006e08:	4004a240 	call	4004a24 <_ZN10W5100Class7getChipEv>
 4006e0c:	e0bff785 	stb	r2,-34(fp)
	if (!chip) return MAX_SOCK_NUM; // immediate error if no hardware detected
 4006e10:	e0bff783 	ldbu	r2,-34(fp)
 4006e14:	1000021e 	bne	r2,zero,4006e20 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x48>
 4006e18:	00800204 	movi	r2,8
 4006e1c:	0000bc06 	br	4007110 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x338>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4006e20:	e0bff783 	ldbu	r2,-34(fp)
 4006e24:	10800cd8 	cmpnei	r2,r2,51
 4006e28:	1000021e 	bne	r2,zero,4006e34 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x5c>
 4006e2c:	00800104 	movi	r2,4
 4006e30:	e0bff745 	stb	r2,-35(fp)
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 4006e34:	e03ff705 	stb	zero,-36(fp)
 4006e38:	e0fff703 	ldbu	r3,-36(fp)
 4006e3c:	e0bff743 	ldbu	r2,-35(fp)
 4006e40:	1880122e 	bgeu	r3,r2,4006e8c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0xb4>
		status[s] = W5100.readSnSR(s);
 4006e44:	e43ff703 	ldbu	r16,-36(fp)
 4006e48:	e0bff703 	ldbu	r2,-36(fp)
 4006e4c:	1009883a 	mov	r4,r2
 4006e50:	40080980 	call	4008098 <_ZN10W5100Class8readSnSREh>
 4006e54:	1007883a 	mov	r3,r2
 4006e58:	e0bff804 	addi	r2,fp,-32
 4006e5c:	1405883a 	add	r2,r2,r16
 4006e60:	10c00005 	stb	r3,0(r2)
		if (status[s] == SnSR::CLOSED) goto makesocket;
 4006e64:	e0bff703 	ldbu	r2,-36(fp)
 4006e68:	e0fff804 	addi	r3,fp,-32
 4006e6c:	1885883a 	add	r2,r3,r2
 4006e70:	10800003 	ldbu	r2,0(r2)
 4006e74:	10803fcc 	andi	r2,r2,255
 4006e78:	10002b26 	beq	r2,zero,4006f28 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x150>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 4006e7c:	e0bff703 	ldbu	r2,-36(fp)
 4006e80:	10800044 	addi	r2,r2,1
 4006e84:	e0bff705 	stb	r2,-36(fp)
 4006e88:	003feb06 	br	4006e38 <__alt_data_end+0xfc006e38>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 4006e8c:	e03ff705 	stb	zero,-36(fp)
 4006e90:	e0fff703 	ldbu	r3,-36(fp)
 4006e94:	e0bff743 	ldbu	r2,-35(fp)
 4006e98:	1880152e 	bgeu	r3,r2,4006ef0 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x118>
		uint8_t stat = status[s];
 4006e9c:	e0bff703 	ldbu	r2,-36(fp)
 4006ea0:	e0fff804 	addi	r3,fp,-32
 4006ea4:	1885883a 	add	r2,r3,r2
 4006ea8:	10800003 	ldbu	r2,0(r2)
 4006eac:	e0bff7c5 	stb	r2,-33(fp)
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4006eb0:	e0bff7c3 	ldbu	r2,-33(fp)
 4006eb4:	10800758 	cmpnei	r2,r2,29
 4006eb8:	10000f26 	beq	r2,zero,4006ef8 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x120>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 4006ebc:	e0bff7c3 	ldbu	r2,-33(fp)
 4006ec0:	108006d8 	cmpnei	r2,r2,27
 4006ec4:	10000e26 	beq	r2,zero,4006f00 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x128>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4006ec8:	e0bff7c3 	ldbu	r2,-33(fp)
 4006ecc:	10800618 	cmpnei	r2,r2,24
 4006ed0:	10000d26 	beq	r2,zero,4006f08 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x130>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4006ed4:	e0bff7c3 	ldbu	r2,-33(fp)
 4006ed8:	10800698 	cmpnei	r2,r2,26
 4006edc:	10000c26 	beq	r2,zero,4006f10 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x138>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 4006ee0:	e0bff703 	ldbu	r2,-36(fp)
 4006ee4:	10800044 	addi	r2,r2,1
 4006ee8:	e0bff705 	stb	r2,-36(fp)
 4006eec:	003fe806 	br	4006e90 <__alt_data_end+0xfc006e90>
		uint8_t stat = status[s];
		// TODO: this also needs to check if no more data
		if (stat == SnSR::CLOSE_WAIT) goto closemakesocket;
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
 4006ef0:	00800204 	movi	r2,8
 4006ef4:	00008606 	br	4007110 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x338>
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
		uint8_t stat = status[s];
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4006ef8:	0001883a 	nop
 4006efc:	00000506 	br	4006f14 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x13c>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 4006f00:	0001883a 	nop
 4006f04:	00000306 	br	4006f14 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x13c>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4006f08:	0001883a 	nop
 4006f0c:	00000106 	br	4006f14 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x13c>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4006f10:	0001883a 	nop
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
 4006f14:	e0bff703 	ldbu	r2,-36(fp)
 4006f18:	01400404 	movi	r5,16
 4006f1c:	1009883a 	mov	r4,r2
 4006f20:	40092040 	call	4009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>
 4006f24:	00000106 	br	4006f2c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x154>
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
 4006f28:	0001883a 	nop
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
makesocket:
	//Serial.printf("W5000socket %d\n", s);
	EthernetServer::server_port[s] = 0;
 4006f2c:	e0fff703 	ldbu	r3,-36(fp)
 4006f30:	00810134 	movhi	r2,1028
 4006f34:	10a60b04 	addi	r2,r2,-26580
 4006f38:	18c7883a 	add	r3,r3,r3
 4006f3c:	10c5883a 	add	r2,r2,r3
 4006f40:	1000000d 	sth	zero,0(r2)
	usleep (250); // TODO: is this needed??
 4006f44:	01003e84 	movi	r4,250
 4006f48:	401cc880 	call	401cc88 <usleep>
	W5100.writeSnMR(s, protocol);
 4006f4c:	e0bff703 	ldbu	r2,-36(fp)
 4006f50:	e0fffc03 	ldbu	r3,-16(fp)
 4006f54:	180b883a 	mov	r5,r3
 4006f58:	1009883a 	mov	r4,r2
 4006f5c:	4007fbc0 	call	4007fbc <_ZN10W5100Class9writeSnMREhh>
	W5100.writeSnIR(s, 0xFF);
 4006f60:	e0bff703 	ldbu	r2,-36(fp)
 4006f64:	01403fc4 	movi	r5,255
 4006f68:	1009883a 	mov	r4,r2
 4006f6c:	400800c0 	call	400800c <_ZN10W5100Class9writeSnIREhh>
	if (port > 0) {
 4006f70:	e0bffe0b 	ldhu	r2,-8(fp)
 4006f74:	10000626 	beq	r2,zero,4006f90 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x1b8>
		W5100.writeSnPORT(s, port);
 4006f78:	e0bff703 	ldbu	r2,-36(fp)
 4006f7c:	e0fffe0b 	ldhu	r3,-8(fp)
 4006f80:	180b883a 	mov	r5,r3
 4006f84:	1009883a 	mov	r4,r2
 4006f88:	40080d40 	call	40080d4 <_ZN10W5100Class11writeSnPORTEht>
 4006f8c:	00001006 	br	4006fd0 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x1f8>
	} else {
		// if don't set the source port, set local_port number.
		if (++local_port < 49152) local_port = 49152;
 4006f90:	d0a00d0b 	ldhu	r2,-32716(gp)
 4006f94:	10800044 	addi	r2,r2,1
 4006f98:	d0a00d0d 	sth	r2,-32716(gp)
 4006f9c:	d0a00d0b 	ldhu	r2,-32716(gp)
 4006fa0:	10bfffcc 	andi	r2,r2,65535
 4006fa4:	10b00030 	cmpltui	r2,r2,49152
 4006fa8:	10803fcc 	andi	r2,r2,255
 4006fac:	10000226 	beq	r2,zero,4006fb8 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x1e0>
 4006fb0:	00b00004 	movi	r2,-16384
 4006fb4:	d0a00d0d 	sth	r2,-32716(gp)
		W5100.writeSnPORT(s, local_port);
 4006fb8:	e0bff703 	ldbu	r2,-36(fp)
 4006fbc:	d0e00d0b 	ldhu	r3,-32716(gp)
 4006fc0:	18ffffcc 	andi	r3,r3,65535
 4006fc4:	180b883a 	mov	r5,r3
 4006fc8:	1009883a 	mov	r4,r2
 4006fcc:	40080d40 	call	40080d4 <_ZN10W5100Class11writeSnPORTEht>
	}
	// Calculate MAC address from Multicast IP Address
    	unsigned char mac[] = {  0x01, 0x00, 0x5E, 0x00, 0x00, 0x00 };
 4006fd0:	00800044 	movi	r2,1
 4006fd4:	e0bffa05 	stb	r2,-24(fp)
 4006fd8:	e03ffa45 	stb	zero,-23(fp)
 4006fdc:	00801784 	movi	r2,94
 4006fe0:	e0bffa85 	stb	r2,-22(fp)
 4006fe4:	e03ffac5 	stb	zero,-21(fp)
 4006fe8:	e03ffb05 	stb	zero,-20(fp)
 4006fec:	e03ffb45 	stb	zero,-19(fp)
    	mac[3] = ip[1] & 0x7F;
 4006ff0:	e0bffd04 	addi	r2,fp,-12
 4006ff4:	01400044 	movi	r5,1
 4006ff8:	1009883a 	mov	r4,r2
 4006ffc:	4003a940 	call	4003a94 <_ZN9IPAddressixEi>
 4007000:	10800003 	ldbu	r2,0(r2)
 4007004:	10801fcc 	andi	r2,r2,127
 4007008:	e0bffac5 	stb	r2,-21(fp)
    	mac[4] = ip[2];
 400700c:	e0bffd04 	addi	r2,fp,-12
 4007010:	01400084 	movi	r5,2
 4007014:	1009883a 	mov	r4,r2
 4007018:	4003a940 	call	4003a94 <_ZN9IPAddressixEi>
 400701c:	10800003 	ldbu	r2,0(r2)
 4007020:	e0bffb05 	stb	r2,-20(fp)
    	mac[5] = ip[3];
 4007024:	e0bffd04 	addi	r2,fp,-12
 4007028:	014000c4 	movi	r5,3
 400702c:	1009883a 	mov	r4,r2
 4007030:	4003a940 	call	4003a94 <_ZN9IPAddressixEi>
 4007034:	10800003 	ldbu	r2,0(r2)
 4007038:	e0bffb45 	stb	r2,-19(fp)
    	W5100.writeSnDIPR(s, ip.raw_address());   //239.255.0.1
 400703c:	e43ff703 	ldbu	r16,-36(fp)
 4007040:	e0bffd04 	addi	r2,fp,-12
 4007044:	1009883a 	mov	r4,r2
 4007048:	4003a480 	call	4003a48 <_ZN9IPAddress11raw_addressEv>
 400704c:	100b883a 	mov	r5,r2
 4007050:	8009883a 	mov	r4,r16
 4007054:	40081800 	call	4008180 <_ZN10W5100Class11writeSnDIPREhPh>
    	W5100.writeSnDPORT(s, port);
 4007058:	e0bff703 	ldbu	r2,-36(fp)
 400705c:	e0fffe0b 	ldhu	r3,-8(fp)
 4007060:	180b883a 	mov	r5,r3
 4007064:	1009883a 	mov	r4,r2
 4007068:	40081c80 	call	40081c8 <_ZN10W5100Class12writeSnDPORTEht>
    	W5100.writeSnDHAR(s, mac);
 400706c:	e0bff703 	ldbu	r2,-36(fp)
 4007070:	e0fffa04 	addi	r3,fp,-24
 4007074:	180b883a 	mov	r5,r3
 4007078:	1009883a 	mov	r4,r2
 400707c:	40081380 	call	4008138 <_ZN10W5100Class11writeSnDHAREhPh>
	W5100.execCmdSn(s, Sock_OPEN);
 4007080:	e0bff703 	ldbu	r2,-36(fp)
 4007084:	01400044 	movi	r5,1
 4007088:	1009883a 	mov	r4,r2
 400708c:	40092040 	call	4009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	state[s].RX_RSR = 0;
 4007090:	e0fff703 	ldbu	r3,-36(fp)
 4007094:	00810134 	movhi	r2,1028
 4007098:	10a60f04 	addi	r2,r2,-26564
 400709c:	180690fa 	slli	r3,r3,3
 40070a0:	10c5883a 	add	r2,r2,r3
 40070a4:	1000000d 	sth	zero,0(r2)
	state[s].RX_RD  = W5100.readSnRX_RD(s); // always zero?
 40070a8:	e43ff703 	ldbu	r16,-36(fp)
 40070ac:	e0bff703 	ldbu	r2,-36(fp)
 40070b0:	1009883a 	mov	r4,r2
 40070b4:	40084140 	call	4008414 <_ZN10W5100Class11readSnRX_RDEh>
 40070b8:	1009883a 	mov	r4,r2
 40070bc:	00810134 	movhi	r2,1028
 40070c0:	10a60f04 	addi	r2,r2,-26564
 40070c4:	800690fa 	slli	r3,r16,3
 40070c8:	10c5883a 	add	r2,r2,r3
 40070cc:	10800084 	addi	r2,r2,2
 40070d0:	1100000d 	sth	r4,0(r2)
	state[s].RX_inc = 0;
 40070d4:	e0fff703 	ldbu	r3,-36(fp)
 40070d8:	00810134 	movhi	r2,1028
 40070dc:	10a60f04 	addi	r2,r2,-26564
 40070e0:	180690fa 	slli	r3,r3,3
 40070e4:	10c5883a 	add	r2,r2,r3
 40070e8:	10800184 	addi	r2,r2,6
 40070ec:	10000005 	stb	zero,0(r2)
	state[s].TX_FSR = 0;
 40070f0:	e0fff703 	ldbu	r3,-36(fp)
 40070f4:	00810134 	movhi	r2,1028
 40070f8:	10a60f04 	addi	r2,r2,-26564
 40070fc:	180690fa 	slli	r3,r3,3
 4007100:	10c5883a 	add	r2,r2,r3
 4007104:	10800104 	addi	r2,r2,4
 4007108:	1000000d 	sth	zero,0(r2)
	//Serial.printf("W5000socket prot=%d, RX_RD=%d\n", W5100.readSnMR(s), state[s].RX_RD);
	return s;
 400710c:	e0bff703 	ldbu	r2,-36(fp)
}
 4007110:	e6ffff04 	addi	sp,fp,-4
 4007114:	dfc00217 	ldw	ra,8(sp)
 4007118:	df000117 	ldw	fp,4(sp)
 400711c:	dc000017 	ldw	r16,0(sp)
 4007120:	dec00304 	addi	sp,sp,12
 4007124:	f800283a 	ret

04007128 <_ZN13EthernetClass12socketStatusEh>:
// Return the socket's status
//
uint8_t EthernetClass::socketStatus(uint8_t s)
{
 4007128:	defffc04 	addi	sp,sp,-16
 400712c:	dfc00315 	stw	ra,12(sp)
 4007130:	df000215 	stw	fp,8(sp)
 4007134:	df000204 	addi	fp,sp,8
 4007138:	2005883a 	mov	r2,r4
 400713c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t status = W5100.readSnSR(s);
 4007140:	e0bfff03 	ldbu	r2,-4(fp)
 4007144:	1009883a 	mov	r4,r2
 4007148:	40080980 	call	4008098 <_ZN10W5100Class8readSnSREh>
 400714c:	e0bffe05 	stb	r2,-8(fp)
	return status;
 4007150:	e0bffe03 	ldbu	r2,-8(fp)
}
 4007154:	e037883a 	mov	sp,fp
 4007158:	dfc00117 	ldw	ra,4(sp)
 400715c:	df000017 	ldw	fp,0(sp)
 4007160:	dec00204 	addi	sp,sp,8
 4007164:	f800283a 	ret

04007168 <_ZN13EthernetClass11socketCloseEh>:

// Immediately close.  If a TCP connection is established, the
// remote host is left unaware we closed.
//
void EthernetClass::socketClose(uint8_t s)
{
 4007168:	defffd04 	addi	sp,sp,-12
 400716c:	dfc00215 	stw	ra,8(sp)
 4007170:	df000115 	stw	fp,4(sp)
 4007174:	df000104 	addi	fp,sp,4
 4007178:	2005883a 	mov	r2,r4
 400717c:	e0bfff05 	stb	r2,-4(fp)
	W5100.execCmdSn(s, Sock_CLOSE);
 4007180:	e0bfff03 	ldbu	r2,-4(fp)
 4007184:	01400404 	movi	r5,16
 4007188:	1009883a 	mov	r4,r2
 400718c:	40092040 	call	4009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
 4007190:	0001883a 	nop
 4007194:	e037883a 	mov	sp,fp
 4007198:	dfc00117 	ldw	ra,4(sp)
 400719c:	df000017 	ldw	fp,0(sp)
 40071a0:	dec00204 	addi	sp,sp,8
 40071a4:	f800283a 	ret

040071a8 <_ZN13EthernetClass12socketListenEh>:


// Place the socket in listening (server) mode
//
uint8_t EthernetClass::socketListen(uint8_t s)
{
 40071a8:	defffd04 	addi	sp,sp,-12
 40071ac:	dfc00215 	stw	ra,8(sp)
 40071b0:	df000115 	stw	fp,4(sp)
 40071b4:	df000104 	addi	fp,sp,4
 40071b8:	2005883a 	mov	r2,r4
 40071bc:	e0bfff05 	stb	r2,-4(fp)
	if (W5100.readSnSR(s) != SnSR::INIT) {
 40071c0:	e0bfff03 	ldbu	r2,-4(fp)
 40071c4:	1009883a 	mov	r4,r2
 40071c8:	40080980 	call	4008098 <_ZN10W5100Class8readSnSREh>
 40071cc:	10803fcc 	andi	r2,r2,255
 40071d0:	108004d8 	cmpnei	r2,r2,19
 40071d4:	10803fcc 	andi	r2,r2,255
 40071d8:	10000226 	beq	r2,zero,40071e4 <_ZN13EthernetClass12socketListenEh+0x3c>
		return 0;
 40071dc:	0005883a 	mov	r2,zero
 40071e0:	00000506 	br	40071f8 <_ZN13EthernetClass12socketListenEh+0x50>
	}
	W5100.execCmdSn(s, Sock_LISTEN);
 40071e4:	e0bfff03 	ldbu	r2,-4(fp)
 40071e8:	01400084 	movi	r5,2
 40071ec:	1009883a 	mov	r4,r2
 40071f0:	40092040 	call	4009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	return 1;
 40071f4:	00800044 	movi	r2,1
}
 40071f8:	e037883a 	mov	sp,fp
 40071fc:	dfc00117 	ldw	ra,4(sp)
 4007200:	df000017 	ldw	fp,0(sp)
 4007204:	dec00204 	addi	sp,sp,8
 4007208:	f800283a 	ret

0400720c <_ZN13EthernetClass13socketConnectEhPht>:


// establish a TCP connection in Active (client) mode.
//
void EthernetClass::socketConnect(uint8_t s, uint8_t * addr, uint16_t port)
{
 400720c:	defffb04 	addi	sp,sp,-20
 4007210:	dfc00415 	stw	ra,16(sp)
 4007214:	df000315 	stw	fp,12(sp)
 4007218:	df000304 	addi	fp,sp,12
 400721c:	2007883a 	mov	r3,r4
 4007220:	e17ffe15 	stw	r5,-8(fp)
 4007224:	3005883a 	mov	r2,r6
 4007228:	e0fffd05 	stb	r3,-12(fp)
 400722c:	e0bfff0d 	sth	r2,-4(fp)
	// set destination IP
	W5100.writeSnDIPR(s, addr);
 4007230:	e0bffd03 	ldbu	r2,-12(fp)
 4007234:	e17ffe17 	ldw	r5,-8(fp)
 4007238:	1009883a 	mov	r4,r2
 400723c:	40081800 	call	4008180 <_ZN10W5100Class11writeSnDIPREhPh>
	W5100.writeSnDPORT(s, port);
 4007240:	e0bffd03 	ldbu	r2,-12(fp)
 4007244:	e0ffff0b 	ldhu	r3,-4(fp)
 4007248:	180b883a 	mov	r5,r3
 400724c:	1009883a 	mov	r4,r2
 4007250:	40081c80 	call	40081c8 <_ZN10W5100Class12writeSnDPORTEht>
	W5100.execCmdSn(s, Sock_CONNECT);
 4007254:	e0bffd03 	ldbu	r2,-12(fp)
 4007258:	01400104 	movi	r5,4
 400725c:	1009883a 	mov	r4,r2
 4007260:	40092040 	call	4009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
 4007264:	0001883a 	nop
 4007268:	e037883a 	mov	sp,fp
 400726c:	dfc00117 	ldw	ra,4(sp)
 4007270:	df000017 	ldw	fp,0(sp)
 4007274:	dec00204 	addi	sp,sp,8
 4007278:	f800283a 	ret

0400727c <_ZN13EthernetClass16socketDisconnectEh>:


// Gracefully disconnect a TCP connection.
//
void EthernetClass::socketDisconnect(uint8_t s)
{
 400727c:	defffd04 	addi	sp,sp,-12
 4007280:	dfc00215 	stw	ra,8(sp)
 4007284:	df000115 	stw	fp,4(sp)
 4007288:	df000104 	addi	fp,sp,4
 400728c:	2005883a 	mov	r2,r4
 4007290:	e0bfff05 	stb	r2,-4(fp)
	W5100.execCmdSn(s, Sock_DISCON);
 4007294:	e0bfff03 	ldbu	r2,-4(fp)
 4007298:	01400204 	movi	r5,8
 400729c:	1009883a 	mov	r4,r2
 40072a0:	40092040 	call	4009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
 40072a4:	0001883a 	nop
 40072a8:	e037883a 	mov	sp,fp
 40072ac:	dfc00117 	ldw	ra,4(sp)
 40072b0:	df000017 	ldw	fp,0(sp)
 40072b4:	dec00204 	addi	sp,sp,8
 40072b8:	f800283a 	ret

040072bc <_ZL11getSnRX_RSRh>:
/*    Socket Data Receive Functions      */
/*****************************************/


static uint16_t getSnRX_RSR(uint8_t s)
{
 40072bc:	defffc04 	addi	sp,sp,-16
 40072c0:	dfc00315 	stw	ra,12(sp)
 40072c4:	df000215 	stw	fp,8(sp)
 40072c8:	df000204 	addi	fp,sp,8
 40072cc:	2005883a 	mov	r2,r4
 40072d0:	e0bfff05 	stb	r2,-4(fp)
#if 1
        uint16_t val, prev;

        prev = W5100.readSnRX_RSR(s);
 40072d4:	e0bfff03 	ldbu	r2,-4(fp)
 40072d8:	1009883a 	mov	r4,r2
 40072dc:	40083500 	call	4008350 <_ZN10W5100Class12readSnRX_RSREh>
 40072e0:	e0bffe0d 	sth	r2,-8(fp)
        while (1) {
                val = W5100.readSnRX_RSR(s);
 40072e4:	e0bfff03 	ldbu	r2,-4(fp)
 40072e8:	1009883a 	mov	r4,r2
 40072ec:	40083500 	call	4008350 <_ZN10W5100Class12readSnRX_RSREh>
 40072f0:	e0bffe8d 	sth	r2,-6(fp)
                if (val == prev) {
 40072f4:	e0fffe8b 	ldhu	r3,-6(fp)
 40072f8:	e0bffe0b 	ldhu	r2,-8(fp)
 40072fc:	1880021e 	bne	r3,r2,4007308 <_ZL11getSnRX_RSRh+0x4c>
			return val;
 4007300:	e0bffe8b 	ldhu	r2,-6(fp)
 4007304:	00000306 	br	4007314 <_ZL11getSnRX_RSRh+0x58>
		}
                prev = val;
 4007308:	e0bffe8b 	ldhu	r2,-6(fp)
 400730c:	e0bffe0d 	sth	r2,-8(fp)
{
#if 1
        uint16_t val, prev;

        prev = W5100.readSnRX_RSR(s);
        while (1) {
 4007310:	003ff406 	br	40072e4 <__alt_data_end+0xfc0072e4>
        }
#else
	uint16_t val = W5100.readSnRX_RSR(s);
	return val;
#endif
}
 4007314:	e037883a 	mov	sp,fp
 4007318:	dfc00117 	ldw	ra,4(sp)
 400731c:	df000017 	ldw	fp,0(sp)
 4007320:	dec00204 	addi	sp,sp,8
 4007324:	f800283a 	ret

04007328 <_ZL9read_datahtPht>:

static void read_data(uint8_t s, uint16_t src, uint8_t *dst, uint16_t len)
{
 4007328:	defff804 	addi	sp,sp,-32
 400732c:	dfc00715 	stw	ra,28(sp)
 4007330:	df000615 	stw	fp,24(sp)
 4007334:	df000604 	addi	fp,sp,24
 4007338:	2807883a 	mov	r3,r5
 400733c:	e1bffe15 	stw	r6,-8(fp)
 4007340:	3805883a 	mov	r2,r7
 4007344:	e13ffc05 	stb	r4,-16(fp)
 4007348:	e0fffd0d 	sth	r3,-12(fp)
 400734c:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t size;
	uint16_t src_mask;
	uint16_t src_ptr;

	//Serial.printf("read_data, len=%d, at:%d\n", len, src);
	src_mask = (uint16_t)src & W5100.SMASK;
 4007350:	e0bffd0b 	ldhu	r2,-12(fp)
 4007354:	1081ffcc 	andi	r2,r2,2047
 4007358:	e0bffa0d 	sth	r2,-24(fp)
	src_ptr = W5100.RBASE(s) + src_mask;
 400735c:	e0bffc03 	ldbu	r2,-16(fp)
 4007360:	1009883a 	mov	r4,r2
 4007364:	40084c40 	call	40084c4 <_ZN10W5100Class5RBASEEh>
 4007368:	1007883a 	mov	r3,r2
 400736c:	e0bffa0b 	ldhu	r2,-24(fp)
 4007370:	1885883a 	add	r2,r3,r2
 4007374:	e0bffa8d 	sth	r2,-22(fp)

	if (W5100.hasOffsetAddressMapping() || src_mask + len <= W5100.SSIZE) {
 4007378:	40085140 	call	4008514 <_ZN10W5100Class23hasOffsetAddressMappingEv>
 400737c:	10803fcc 	andi	r2,r2,255
 4007380:	1000051e 	bne	r2,zero,4007398 <_ZL9read_datahtPht+0x70>
 4007384:	e0fffa0b 	ldhu	r3,-24(fp)
 4007388:	e0bfff0b 	ldhu	r2,-4(fp)
 400738c:	1885883a 	add	r2,r3,r2
 4007390:	10820048 	cmpgei	r2,r2,2049
 4007394:	1000021e 	bne	r2,zero,40073a0 <_ZL9read_datahtPht+0x78>
 4007398:	00800044 	movi	r2,1
 400739c:	00000106 	br	40073a4 <_ZL9read_datahtPht+0x7c>
 40073a0:	0005883a 	mov	r2,zero
 40073a4:	10803fcc 	andi	r2,r2,255
 40073a8:	10000726 	beq	r2,zero,40073c8 <_ZL9read_datahtPht+0xa0>
		W5100.read(src_ptr, dst, len);
 40073ac:	e0bffa8b 	ldhu	r2,-22(fp)
 40073b0:	e0ffff0b 	ldhu	r3,-4(fp)
 40073b4:	180d883a 	mov	r6,r3
 40073b8:	e17ffe17 	ldw	r5,-8(fp)
 40073bc:	1009883a 	mov	r4,r2
 40073c0:	4008fb00 	call	4008fb0 <_ZN10W5100Class4readEtPht>
		size = W5100.SSIZE - src_mask;
		W5100.read(src_ptr, dst, size);
		dst += size;
		W5100.read(W5100.RBASE(s), dst, len - size);
	}
}
 40073c4:	00001906 	br	400742c <_ZL9read_datahtPht+0x104>
	src_ptr = W5100.RBASE(s) + src_mask;

	if (W5100.hasOffsetAddressMapping() || src_mask + len <= W5100.SSIZE) {
		W5100.read(src_ptr, dst, len);
	} else {
		size = W5100.SSIZE - src_mask;
 40073c8:	e0bffa0b 	ldhu	r2,-24(fp)
 40073cc:	00c20004 	movi	r3,2048
 40073d0:	1885c83a 	sub	r2,r3,r2
 40073d4:	e0bffb0d 	sth	r2,-20(fp)
		W5100.read(src_ptr, dst, size);
 40073d8:	e0bffa8b 	ldhu	r2,-22(fp)
 40073dc:	e0fffb0b 	ldhu	r3,-20(fp)
 40073e0:	180d883a 	mov	r6,r3
 40073e4:	e17ffe17 	ldw	r5,-8(fp)
 40073e8:	1009883a 	mov	r4,r2
 40073ec:	4008fb00 	call	4008fb0 <_ZN10W5100Class4readEtPht>
		dst += size;
 40073f0:	e0bffb0b 	ldhu	r2,-20(fp)
 40073f4:	e0fffe17 	ldw	r3,-8(fp)
 40073f8:	1885883a 	add	r2,r3,r2
 40073fc:	e0bffe15 	stw	r2,-8(fp)
		W5100.read(W5100.RBASE(s), dst, len - size);
 4007400:	e0bffc03 	ldbu	r2,-16(fp)
 4007404:	1009883a 	mov	r4,r2
 4007408:	40084c40 	call	40084c4 <_ZN10W5100Class5RBASEEh>
 400740c:	113fffcc 	andi	r4,r2,65535
 4007410:	e0ffff0b 	ldhu	r3,-4(fp)
 4007414:	e0bffb0b 	ldhu	r2,-20(fp)
 4007418:	1885c83a 	sub	r2,r3,r2
 400741c:	10bfffcc 	andi	r2,r2,65535
 4007420:	100d883a 	mov	r6,r2
 4007424:	e17ffe17 	ldw	r5,-8(fp)
 4007428:	4008fb00 	call	4008fb0 <_ZN10W5100Class4readEtPht>
	}
}
 400742c:	0001883a 	nop
 4007430:	e037883a 	mov	sp,fp
 4007434:	dfc00117 	ldw	ra,4(sp)
 4007438:	df000017 	ldw	fp,0(sp)
 400743c:	dec00204 	addi	sp,sp,8
 4007440:	f800283a 	ret

04007444 <_ZN13EthernetClass10socketRecvEhPhs>:

// Receive data.  Returns size, or -1 for no data, or 0 if connection closed
//
int EthernetClass::socketRecv(uint8_t s, uint8_t *buf, int16_t len)
{
 4007444:	defff804 	addi	sp,sp,-32
 4007448:	dfc00715 	stw	ra,28(sp)
 400744c:	df000615 	stw	fp,24(sp)
 4007450:	df000604 	addi	fp,sp,24
 4007454:	2007883a 	mov	r3,r4
 4007458:	e17ffe15 	stw	r5,-8(fp)
 400745c:	3005883a 	mov	r2,r6
 4007460:	e0fffd05 	stb	r3,-12(fp)
 4007464:	e0bfff0d 	sth	r2,-4(fp)
	// Check how much data is available
	int ret = state[s].RX_RSR;
 4007468:	e0fffd03 	ldbu	r3,-12(fp)
 400746c:	00810134 	movhi	r2,1028
 4007470:	10a60f04 	addi	r2,r2,-26564
 4007474:	180690fa 	slli	r3,r3,3
 4007478:	10c5883a 	add	r2,r2,r3
 400747c:	1080000b 	ldhu	r2,0(r2)
 4007480:	10bfffcc 	andi	r2,r2,65535
 4007484:	e0bffa15 	stw	r2,-24(fp)
	if (ret < len) {
 4007488:	e0bfff0f 	ldh	r2,-4(fp)
 400748c:	e0fffa17 	ldw	r3,-24(fp)
 4007490:	1880170e 	bge	r3,r2,40074f0 <_ZN13EthernetClass10socketRecvEhPhs+0xac>
		uint16_t rsr = getSnRX_RSR(s);
 4007494:	e0bffd03 	ldbu	r2,-12(fp)
 4007498:	1009883a 	mov	r4,r2
 400749c:	40072bc0 	call	40072bc <_ZL11getSnRX_RSRh>
 40074a0:	e0bffb0d 	sth	r2,-20(fp)
		ret = rsr - state[s].RX_inc;
 40074a4:	e0fffb0b 	ldhu	r3,-20(fp)
 40074a8:	e13ffd03 	ldbu	r4,-12(fp)
 40074ac:	00810134 	movhi	r2,1028
 40074b0:	10a60f04 	addi	r2,r2,-26564
 40074b4:	200890fa 	slli	r4,r4,3
 40074b8:	1105883a 	add	r2,r2,r4
 40074bc:	10800184 	addi	r2,r2,6
 40074c0:	10800003 	ldbu	r2,0(r2)
 40074c4:	10803fcc 	andi	r2,r2,255
 40074c8:	1885c83a 	sub	r2,r3,r2
 40074cc:	e0bffa15 	stw	r2,-24(fp)
		state[s].RX_RSR = ret;
 40074d0:	e0fffd03 	ldbu	r3,-12(fp)
 40074d4:	e0bffa17 	ldw	r2,-24(fp)
 40074d8:	1009883a 	mov	r4,r2
 40074dc:	00810134 	movhi	r2,1028
 40074e0:	10a60f04 	addi	r2,r2,-26564
 40074e4:	180690fa 	slli	r3,r3,3
 40074e8:	10c5883a 	add	r2,r2,r3
 40074ec:	1100000d 	sth	r4,0(r2)
		//Serial.printf("Sock_RECV, RX_RSR=%d, RX_inc=%d\n", ret, state[s].RX_inc);
	}
	if (ret == 0) {
 40074f0:	e0bffa17 	ldw	r2,-24(fp)
 40074f4:	1000111e 	bne	r2,zero,400753c <_ZN13EthernetClass10socketRecvEhPhs+0xf8>
		// No data available.
		uint8_t status = W5100.readSnSR(s);
 40074f8:	e0bffd03 	ldbu	r2,-12(fp)
 40074fc:	1009883a 	mov	r4,r2
 4007500:	40080980 	call	4008098 <_ZN10W5100Class8readSnSREh>
 4007504:	e0bffb85 	stb	r2,-18(fp)
		if ( status == SnSR::LISTEN || status == SnSR::CLOSED ||
 4007508:	e0bffb83 	ldbu	r2,-18(fp)
 400750c:	10800520 	cmpeqi	r2,r2,20
 4007510:	1000051e 	bne	r2,zero,4007528 <_ZN13EthernetClass10socketRecvEhPhs+0xe4>
 4007514:	e0bffb83 	ldbu	r2,-18(fp)
 4007518:	10000326 	beq	r2,zero,4007528 <_ZN13EthernetClass10socketRecvEhPhs+0xe4>
 400751c:	e0bffb83 	ldbu	r2,-18(fp)
 4007520:	10800718 	cmpnei	r2,r2,28
 4007524:	1000021e 	bne	r2,zero,4007530 <_ZN13EthernetClass10socketRecvEhPhs+0xec>
		  status == SnSR::CLOSE_WAIT ) {
			// The remote end has closed its side of the connection,
			// so this is the eof state
			ret = 0;
 4007528:	e03ffa15 	stw	zero,-24(fp)
 400752c:	00006706 	br	40076cc <_ZN13EthernetClass10socketRecvEhPhs+0x288>
		} else {
			// The connection is still up, but there's no data waiting to be read
			ret = -1;
 4007530:	00bfffc4 	movi	r2,-1
 4007534:	e0bffa15 	stw	r2,-24(fp)
 4007538:	00006406 	br	40076cc <_ZN13EthernetClass10socketRecvEhPhs+0x288>
		}
	} else {
		if (ret > len) ret = len; // more data available than buffer length
 400753c:	e0ffff0f 	ldh	r3,-4(fp)
 4007540:	e0bffa17 	ldw	r2,-24(fp)
 4007544:	1880020e 	bge	r3,r2,4007550 <_ZN13EthernetClass10socketRecvEhPhs+0x10c>
 4007548:	e0bfff0f 	ldh	r2,-4(fp)
 400754c:	e0bffa15 	stw	r2,-24(fp)
		uint16_t ptr = state[s].RX_RD;
 4007550:	e0fffd03 	ldbu	r3,-12(fp)
 4007554:	00810134 	movhi	r2,1028
 4007558:	10a60f04 	addi	r2,r2,-26564
 400755c:	180690fa 	slli	r3,r3,3
 4007560:	10c5883a 	add	r2,r2,r3
 4007564:	10800084 	addi	r2,r2,2
 4007568:	1080000b 	ldhu	r2,0(r2)
 400756c:	e0bffc0d 	sth	r2,-16(fp)
		if (buf) read_data(s, ptr, buf, ret);
 4007570:	e0bffe17 	ldw	r2,-8(fp)
 4007574:	10000926 	beq	r2,zero,400759c <_ZN13EthernetClass10socketRecvEhPhs+0x158>
 4007578:	e0fffd03 	ldbu	r3,-12(fp)
 400757c:	e13ffc0b 	ldhu	r4,-16(fp)
 4007580:	e0bffa17 	ldw	r2,-24(fp)
 4007584:	10bfffcc 	andi	r2,r2,65535
 4007588:	100f883a 	mov	r7,r2
 400758c:	e1bffe17 	ldw	r6,-8(fp)
 4007590:	200b883a 	mov	r5,r4
 4007594:	1809883a 	mov	r4,r3
 4007598:	40073280 	call	4007328 <_ZL9read_datahtPht>
		ptr += ret;
 400759c:	e0bffa17 	ldw	r2,-24(fp)
 40075a0:	1007883a 	mov	r3,r2
 40075a4:	e0bffc0b 	ldhu	r2,-16(fp)
 40075a8:	1885883a 	add	r2,r3,r2
 40075ac:	e0bffc0d 	sth	r2,-16(fp)
		state[s].RX_RD = ptr;
 40075b0:	e0fffd03 	ldbu	r3,-12(fp)
 40075b4:	00810134 	movhi	r2,1028
 40075b8:	10a60f04 	addi	r2,r2,-26564
 40075bc:	180690fa 	slli	r3,r3,3
 40075c0:	10c5883a 	add	r2,r2,r3
 40075c4:	10800084 	addi	r2,r2,2
 40075c8:	e0fffc0b 	ldhu	r3,-16(fp)
 40075cc:	10c0000d 	sth	r3,0(r2)
		state[s].RX_RSR -= ret;
 40075d0:	e0fffd03 	ldbu	r3,-12(fp)
 40075d4:	e13ffd03 	ldbu	r4,-12(fp)
 40075d8:	00810134 	movhi	r2,1028
 40075dc:	10a60f04 	addi	r2,r2,-26564
 40075e0:	200890fa 	slli	r4,r4,3
 40075e4:	1105883a 	add	r2,r2,r4
 40075e8:	1080000b 	ldhu	r2,0(r2)
 40075ec:	e13ffa17 	ldw	r4,-24(fp)
 40075f0:	1105c83a 	sub	r2,r2,r4
 40075f4:	1009883a 	mov	r4,r2
 40075f8:	00810134 	movhi	r2,1028
 40075fc:	10a60f04 	addi	r2,r2,-26564
 4007600:	180690fa 	slli	r3,r3,3
 4007604:	10c5883a 	add	r2,r2,r3
 4007608:	1100000d 	sth	r4,0(r2)
		uint16_t inc = state[s].RX_inc + ret;
 400760c:	e0fffd03 	ldbu	r3,-12(fp)
 4007610:	00810134 	movhi	r2,1028
 4007614:	10a60f04 	addi	r2,r2,-26564
 4007618:	180690fa 	slli	r3,r3,3
 400761c:	10c5883a 	add	r2,r2,r3
 4007620:	10800184 	addi	r2,r2,6
 4007624:	10800003 	ldbu	r2,0(r2)
 4007628:	10803fcc 	andi	r2,r2,255
 400762c:	e0fffa17 	ldw	r3,-24(fp)
 4007630:	10c5883a 	add	r2,r2,r3
 4007634:	e0bffc8d 	sth	r2,-14(fp)
		if (inc >= 250 || state[s].RX_RSR == 0) {
 4007638:	e0bffc8b 	ldhu	r2,-14(fp)
 400763c:	10803ea8 	cmpgeui	r2,r2,250
 4007640:	1000081e 	bne	r2,zero,4007664 <_ZN13EthernetClass10socketRecvEhPhs+0x220>
 4007644:	e0fffd03 	ldbu	r3,-12(fp)
 4007648:	00810134 	movhi	r2,1028
 400764c:	10a60f04 	addi	r2,r2,-26564
 4007650:	180690fa 	slli	r3,r3,3
 4007654:	10c5883a 	add	r2,r2,r3
 4007658:	1080000b 	ldhu	r2,0(r2)
 400765c:	10bfffcc 	andi	r2,r2,65535
 4007660:	1000111e 	bne	r2,zero,40076a8 <_ZN13EthernetClass10socketRecvEhPhs+0x264>
			state[s].RX_inc = 0;
 4007664:	e0fffd03 	ldbu	r3,-12(fp)
 4007668:	00810134 	movhi	r2,1028
 400766c:	10a60f04 	addi	r2,r2,-26564
 4007670:	180690fa 	slli	r3,r3,3
 4007674:	10c5883a 	add	r2,r2,r3
 4007678:	10800184 	addi	r2,r2,6
 400767c:	10000005 	stb	zero,0(r2)
			W5100.writeSnRX_RD(s, ptr);
 4007680:	e0bffd03 	ldbu	r2,-12(fp)
 4007684:	e0fffc0b 	ldhu	r3,-16(fp)
 4007688:	180b883a 	mov	r5,r3
 400768c:	1009883a 	mov	r4,r2
 4007690:	40083b00 	call	40083b0 <_ZN10W5100Class12writeSnRX_RDEht>
			W5100.execCmdSn(s, Sock_RECV);
 4007694:	e0bffd03 	ldbu	r2,-12(fp)
 4007698:	01401004 	movi	r5,64
 400769c:	1009883a 	mov	r4,r2
 40076a0:	40092040 	call	4009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>
 40076a4:	00000906 	br	40076cc <_ZN13EthernetClass10socketRecvEhPhs+0x288>
			//Serial.printf("Sock_RECV cmd, RX_RD=%d, RX_RSR=%d\n",
			//  state[s].RX_RD, state[s].RX_RSR);
		} else {
			state[s].RX_inc = inc;
 40076a8:	e0fffd03 	ldbu	r3,-12(fp)
 40076ac:	e0bffc8b 	ldhu	r2,-14(fp)
 40076b0:	1009883a 	mov	r4,r2
 40076b4:	00810134 	movhi	r2,1028
 40076b8:	10a60f04 	addi	r2,r2,-26564
 40076bc:	180690fa 	slli	r3,r3,3
 40076c0:	10c5883a 	add	r2,r2,r3
 40076c4:	10800184 	addi	r2,r2,6
 40076c8:	11000005 	stb	r4,0(r2)
		}
	}
	//Serial.printf("socketRecv, ret=%d\n", ret);
	return ret;
 40076cc:	e0bffa17 	ldw	r2,-24(fp)
}
 40076d0:	e037883a 	mov	sp,fp
 40076d4:	dfc00117 	ldw	ra,4(sp)
 40076d8:	df000017 	ldw	fp,0(sp)
 40076dc:	dec00204 	addi	sp,sp,8
 40076e0:	f800283a 	ret

040076e4 <_ZN13EthernetClass19socketRecvAvailableEh>:

uint16_t EthernetClass::socketRecvAvailable(uint8_t s)
{
 40076e4:	defffc04 	addi	sp,sp,-16
 40076e8:	dfc00315 	stw	ra,12(sp)
 40076ec:	df000215 	stw	fp,8(sp)
 40076f0:	df000204 	addi	fp,sp,8
 40076f4:	2005883a 	mov	r2,r4
 40076f8:	e0bfff05 	stb	r2,-4(fp)
	uint16_t ret = state[s].RX_RSR;
 40076fc:	e0ffff03 	ldbu	r3,-4(fp)
 4007700:	00810134 	movhi	r2,1028
 4007704:	10a60f04 	addi	r2,r2,-26564
 4007708:	180690fa 	slli	r3,r3,3
 400770c:	10c5883a 	add	r2,r2,r3
 4007710:	1080000b 	ldhu	r2,0(r2)
 4007714:	e0bffe0d 	sth	r2,-8(fp)
	if (ret == 0) {
 4007718:	e0bffe0b 	ldhu	r2,-8(fp)
 400771c:	1000161e 	bne	r2,zero,4007778 <_ZN13EthernetClass19socketRecvAvailableEh+0x94>
		uint16_t rsr = getSnRX_RSR(s);
 4007720:	e0bfff03 	ldbu	r2,-4(fp)
 4007724:	1009883a 	mov	r4,r2
 4007728:	40072bc0 	call	40072bc <_ZL11getSnRX_RSRh>
 400772c:	e0bffe8d 	sth	r2,-6(fp)
		ret = rsr - state[s].RX_inc;
 4007730:	e0ffff03 	ldbu	r3,-4(fp)
 4007734:	00810134 	movhi	r2,1028
 4007738:	10a60f04 	addi	r2,r2,-26564
 400773c:	180690fa 	slli	r3,r3,3
 4007740:	10c5883a 	add	r2,r2,r3
 4007744:	10800184 	addi	r2,r2,6
 4007748:	10800003 	ldbu	r2,0(r2)
 400774c:	10803fcc 	andi	r2,r2,255
 4007750:	e0fffe8b 	ldhu	r3,-6(fp)
 4007754:	1885c83a 	sub	r2,r3,r2
 4007758:	e0bffe0d 	sth	r2,-8(fp)
		state[s].RX_RSR = ret;
 400775c:	e0ffff03 	ldbu	r3,-4(fp)
 4007760:	00810134 	movhi	r2,1028
 4007764:	10a60f04 	addi	r2,r2,-26564
 4007768:	180690fa 	slli	r3,r3,3
 400776c:	10c5883a 	add	r2,r2,r3
 4007770:	e0fffe0b 	ldhu	r3,-8(fp)
 4007774:	10c0000d 	sth	r3,0(r2)
		//Serial.printf("sockRecvAvailable s=%d, RX_RSR=%d\n", s, ret);
	}
	return ret;
 4007778:	e0bffe0b 	ldhu	r2,-8(fp)
}
 400777c:	e037883a 	mov	sp,fp
 4007780:	dfc00117 	ldw	ra,4(sp)
 4007784:	df000017 	ldw	fp,0(sp)
 4007788:	dec00204 	addi	sp,sp,8
 400778c:	f800283a 	ret

04007790 <_ZN13EthernetClass10socketPeekEh>:

// get the first byte in the receive queue (no checking)
//
uint8_t EthernetClass::socketPeek(uint8_t s)
{
 4007790:	defffb04 	addi	sp,sp,-20
 4007794:	dfc00415 	stw	ra,16(sp)
 4007798:	df000315 	stw	fp,12(sp)
 400779c:	dc000215 	stw	r16,8(sp)
 40077a0:	df000304 	addi	fp,sp,12
 40077a4:	2005883a 	mov	r2,r4
 40077a8:	e0bffe05 	stb	r2,-8(fp)
	uint8_t b;
	uint16_t ptr = state[s].RX_RD;
 40077ac:	e0fffe03 	ldbu	r3,-8(fp)
 40077b0:	00810134 	movhi	r2,1028
 40077b4:	10a60f04 	addi	r2,r2,-26564
 40077b8:	180690fa 	slli	r3,r3,3
 40077bc:	10c5883a 	add	r2,r2,r3
 40077c0:	10800084 	addi	r2,r2,2
 40077c4:	1080000b 	ldhu	r2,0(r2)
 40077c8:	e0bffd0d 	sth	r2,-12(fp)
	W5100.read((ptr & W5100.SMASK) + W5100.RBASE(s), &b, 1);
 40077cc:	e0bffd0b 	ldhu	r2,-12(fp)
 40077d0:	1081ffcc 	andi	r2,r2,2047
 40077d4:	1021883a 	mov	r16,r2
 40077d8:	e0bffe03 	ldbu	r2,-8(fp)
 40077dc:	1009883a 	mov	r4,r2
 40077e0:	40084c40 	call	40084c4 <_ZN10W5100Class5RBASEEh>
 40077e4:	8085883a 	add	r2,r16,r2
 40077e8:	10bfffcc 	andi	r2,r2,65535
 40077ec:	e0fffd84 	addi	r3,fp,-10
 40077f0:	01800044 	movi	r6,1
 40077f4:	180b883a 	mov	r5,r3
 40077f8:	1009883a 	mov	r4,r2
 40077fc:	4008fb00 	call	4008fb0 <_ZN10W5100Class4readEtPht>
	return b;
 4007800:	e0bffd83 	ldbu	r2,-10(fp)
}
 4007804:	e6ffff04 	addi	sp,fp,-4
 4007808:	dfc00217 	ldw	ra,8(sp)
 400780c:	df000117 	ldw	fp,4(sp)
 4007810:	dc000017 	ldw	r16,0(sp)
 4007814:	dec00304 	addi	sp,sp,12
 4007818:	f800283a 	ret

0400781c <_ZL11getSnTX_FSRh>:
/*****************************************/
/*    Socket Data Transmit Functions     */
/*****************************************/

static uint16_t getSnTX_FSR(uint8_t s)
{
 400781c:	defffc04 	addi	sp,sp,-16
 4007820:	dfc00315 	stw	ra,12(sp)
 4007824:	df000215 	stw	fp,8(sp)
 4007828:	df000204 	addi	fp,sp,8
 400782c:	2005883a 	mov	r2,r4
 4007830:	e0bfff05 	stb	r2,-4(fp)
        uint16_t val, prev;

        prev = W5100.readSnTX_FSR(s);
 4007834:	e0bfff03 	ldbu	r2,-4(fp)
 4007838:	1009883a 	mov	r4,r2
 400783c:	400822c0 	call	400822c <_ZN10W5100Class12readSnTX_FSREh>
 4007840:	e0bffe0d 	sth	r2,-8(fp)
        while (1) {
                val = W5100.readSnTX_FSR(s);
 4007844:	e0bfff03 	ldbu	r2,-4(fp)
 4007848:	1009883a 	mov	r4,r2
 400784c:	400822c0 	call	400822c <_ZN10W5100Class12readSnTX_FSREh>
 4007850:	e0bffe8d 	sth	r2,-6(fp)
                if (val == prev) {
 4007854:	e0fffe8b 	ldhu	r3,-6(fp)
 4007858:	e0bffe0b 	ldhu	r2,-8(fp)
 400785c:	18800a1e 	bne	r3,r2,4007888 <_ZL11getSnTX_FSRh+0x6c>
			state[s].TX_FSR = val;
 4007860:	e0ffff03 	ldbu	r3,-4(fp)
 4007864:	00810134 	movhi	r2,1028
 4007868:	10a60f04 	addi	r2,r2,-26564
 400786c:	180690fa 	slli	r3,r3,3
 4007870:	10c5883a 	add	r2,r2,r3
 4007874:	10800104 	addi	r2,r2,4
 4007878:	e0fffe8b 	ldhu	r3,-6(fp)
 400787c:	10c0000d 	sth	r3,0(r2)
			return val;
 4007880:	e0bffe8b 	ldhu	r2,-6(fp)
 4007884:	00000306 	br	4007894 <_ZL11getSnTX_FSRh+0x78>
		}
                prev = val;
 4007888:	e0bffe8b 	ldhu	r2,-6(fp)
 400788c:	e0bffe0d 	sth	r2,-8(fp)
static uint16_t getSnTX_FSR(uint8_t s)
{
        uint16_t val, prev;

        prev = W5100.readSnTX_FSR(s);
        while (1) {
 4007890:	003fec06 	br	4007844 <__alt_data_end+0xfc007844>
			state[s].TX_FSR = val;
			return val;
		}
                prev = val;
        }
}
 4007894:	e037883a 	mov	sp,fp
 4007898:	dfc00117 	ldw	ra,4(sp)
 400789c:	df000017 	ldw	fp,0(sp)
 40078a0:	dec00204 	addi	sp,sp,8
 40078a4:	f800283a 	ret

040078a8 <_ZL10write_datahtPKht>:


static void write_data(uint8_t s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
 40078a8:	defff804 	addi	sp,sp,-32
 40078ac:	dfc00715 	stw	ra,28(sp)
 40078b0:	df000615 	stw	fp,24(sp)
 40078b4:	df000604 	addi	fp,sp,24
 40078b8:	2807883a 	mov	r3,r5
 40078bc:	e1bffe15 	stw	r6,-8(fp)
 40078c0:	3805883a 	mov	r2,r7
 40078c4:	e13ffc05 	stb	r4,-16(fp)
 40078c8:	e0fffd0d 	sth	r3,-12(fp)
 40078cc:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t ptr = W5100.readSnTX_WR(s);
 40078d0:	e0bffc03 	ldbu	r2,-16(fp)
 40078d4:	1009883a 	mov	r4,r2
 40078d8:	40082f00 	call	40082f0 <_ZN10W5100Class11readSnTX_WREh>
 40078dc:	e0bffa0d 	sth	r2,-24(fp)
	ptr += data_offset;
 40078e0:	e0fffa0b 	ldhu	r3,-24(fp)
 40078e4:	e0bffd0b 	ldhu	r2,-12(fp)
 40078e8:	1885883a 	add	r2,r3,r2
 40078ec:	e0bffa0d 	sth	r2,-24(fp)
	uint16_t offset = ptr & W5100.SMASK;
 40078f0:	e0bffa0b 	ldhu	r2,-24(fp)
 40078f4:	1081ffcc 	andi	r2,r2,2047
 40078f8:	e0bffa8d 	sth	r2,-22(fp)
	uint16_t dstAddr = offset + W5100.SBASE(s);
 40078fc:	e0bffc03 	ldbu	r2,-16(fp)
 4007900:	1009883a 	mov	r4,r2
 4007904:	40084740 	call	4008474 <_ZN10W5100Class5SBASEEh>
 4007908:	1007883a 	mov	r3,r2
 400790c:	e0bffa8b 	ldhu	r2,-22(fp)
 4007910:	1885883a 	add	r2,r3,r2
 4007914:	e0bffb0d 	sth	r2,-20(fp)

	if (W5100.hasOffsetAddressMapping() || offset + len <= W5100.SSIZE) {
 4007918:	40085140 	call	4008514 <_ZN10W5100Class23hasOffsetAddressMappingEv>
 400791c:	10803fcc 	andi	r2,r2,255
 4007920:	1000051e 	bne	r2,zero,4007938 <_ZL10write_datahtPKht+0x90>
 4007924:	e0fffa8b 	ldhu	r3,-22(fp)
 4007928:	e0bfff0b 	ldhu	r2,-4(fp)
 400792c:	1885883a 	add	r2,r3,r2
 4007930:	10820048 	cmpgei	r2,r2,2049
 4007934:	1000021e 	bne	r2,zero,4007940 <_ZL10write_datahtPKht+0x98>
 4007938:	00800044 	movi	r2,1
 400793c:	00000106 	br	4007944 <_ZL10write_datahtPKht+0x9c>
 4007940:	0005883a 	mov	r2,zero
 4007944:	10803fcc 	andi	r2,r2,255
 4007948:	10000726 	beq	r2,zero,4007968 <_ZL10write_datahtPKht+0xc0>
		W5100.write(dstAddr, data, len);
 400794c:	e0bffb0b 	ldhu	r2,-20(fp)
 4007950:	e0ffff0b 	ldhu	r3,-4(fp)
 4007954:	180d883a 	mov	r6,r3
 4007958:	e17ffe17 	ldw	r5,-8(fp)
 400795c:	1009883a 	mov	r4,r2
 4007960:	4008e0c0 	call	4008e0c <_ZN10W5100Class5writeEtPKht>
 4007964:	00001706 	br	40079c4 <_ZL10write_datahtPKht+0x11c>
	} else {
		// Wrap around circular buffer
		uint16_t size = W5100.SSIZE - offset;
 4007968:	e0bffa8b 	ldhu	r2,-22(fp)
 400796c:	00c20004 	movi	r3,2048
 4007970:	1885c83a 	sub	r2,r3,r2
 4007974:	e0bffb8d 	sth	r2,-18(fp)
		W5100.write(dstAddr, data, size);
 4007978:	e0bffb0b 	ldhu	r2,-20(fp)
 400797c:	e0fffb8b 	ldhu	r3,-18(fp)
 4007980:	180d883a 	mov	r6,r3
 4007984:	e17ffe17 	ldw	r5,-8(fp)
 4007988:	1009883a 	mov	r4,r2
 400798c:	4008e0c0 	call	4008e0c <_ZN10W5100Class5writeEtPKht>
		W5100.write(W5100.SBASE(s), data + size, len - size);
 4007990:	e0bffc03 	ldbu	r2,-16(fp)
 4007994:	1009883a 	mov	r4,r2
 4007998:	40084740 	call	4008474 <_ZN10W5100Class5SBASEEh>
 400799c:	113fffcc 	andi	r4,r2,65535
 40079a0:	e0bffb8b 	ldhu	r2,-18(fp)
 40079a4:	e0fffe17 	ldw	r3,-8(fp)
 40079a8:	188b883a 	add	r5,r3,r2
 40079ac:	e0ffff0b 	ldhu	r3,-4(fp)
 40079b0:	e0bffb8b 	ldhu	r2,-18(fp)
 40079b4:	1885c83a 	sub	r2,r3,r2
 40079b8:	10bfffcc 	andi	r2,r2,65535
 40079bc:	100d883a 	mov	r6,r2
 40079c0:	4008e0c0 	call	4008e0c <_ZN10W5100Class5writeEtPKht>
	}
	ptr += len;
 40079c4:	e0fffa0b 	ldhu	r3,-24(fp)
 40079c8:	e0bfff0b 	ldhu	r2,-4(fp)
 40079cc:	1885883a 	add	r2,r3,r2
 40079d0:	e0bffa0d 	sth	r2,-24(fp)
	W5100.writeSnTX_WR(s, ptr);
 40079d4:	e0bffc03 	ldbu	r2,-16(fp)
 40079d8:	e0fffa0b 	ldhu	r3,-24(fp)
 40079dc:	180b883a 	mov	r5,r3
 40079e0:	1009883a 	mov	r4,r2
 40079e4:	400828c0 	call	400828c <_ZN10W5100Class12writeSnTX_WREht>
}
 40079e8:	0001883a 	nop
 40079ec:	e037883a 	mov	sp,fp
 40079f0:	dfc00117 	ldw	ra,4(sp)
 40079f4:	df000017 	ldw	fp,0(sp)
 40079f8:	dec00204 	addi	sp,sp,8
 40079fc:	f800283a 	ret

04007a00 <_ZN13EthernetClass10socketSendEhPKht>:
/**
 * @brief	This function used to send the data in TCP mode
 * @return	1 for success else 0.
 */
uint16_t EthernetClass::socketSend(uint8_t s, const uint8_t * buf, uint16_t len)
{
 4007a00:	defff904 	addi	sp,sp,-28
 4007a04:	dfc00615 	stw	ra,24(sp)
 4007a08:	df000515 	stw	fp,20(sp)
 4007a0c:	df000504 	addi	fp,sp,20
 4007a10:	2007883a 	mov	r3,r4
 4007a14:	e17ffe15 	stw	r5,-8(fp)
 4007a18:	3005883a 	mov	r2,r6
 4007a1c:	e0fffd05 	stb	r3,-12(fp)
 4007a20:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t status=0;
 4007a24:	e03ffb85 	stb	zero,-18(fp)
	uint16_t ret=0;
 4007a28:	e03ffb0d 	sth	zero,-20(fp)
	uint16_t freesize=0;
 4007a2c:	e03ffc0d 	sth	zero,-16(fp)

	if (len > W5100.SSIZE) {
 4007a30:	e0bfff0b 	ldhu	r2,-4(fp)
 4007a34:	10820070 	cmpltui	r2,r2,2049
 4007a38:	1000031e 	bne	r2,zero,4007a48 <_ZN13EthernetClass10socketSendEhPKht+0x48>
		ret = W5100.SSIZE; // check size not to exceed MAX size.
 4007a3c:	00820004 	movi	r2,2048
 4007a40:	e0bffb0d 	sth	r2,-20(fp)
 4007a44:	00000206 	br	4007a50 <_ZN13EthernetClass10socketSendEhPKht+0x50>
	} else {
		ret = len;
 4007a48:	e0bfff0b 	ldhu	r2,-4(fp)
 4007a4c:	e0bffb0d 	sth	r2,-20(fp)
	}

	// if freebuf is available, start.
	do {
		freesize = getSnTX_FSR(s);
 4007a50:	e0bffd03 	ldbu	r2,-12(fp)
 4007a54:	1009883a 	mov	r4,r2
 4007a58:	400781c0 	call	400781c <_ZL11getSnTX_FSRh>
 4007a5c:	e0bffc0d 	sth	r2,-16(fp)
		status = W5100.readSnSR(s);
 4007a60:	e0bffd03 	ldbu	r2,-12(fp)
 4007a64:	1009883a 	mov	r4,r2
 4007a68:	40080980 	call	4008098 <_ZN10W5100Class8readSnSREh>
 4007a6c:	e0bffb85 	stb	r2,-18(fp)
		if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT)) {
 4007a70:	e0bffb83 	ldbu	r2,-18(fp)
 4007a74:	108005e0 	cmpeqi	r2,r2,23
 4007a78:	1000051e 	bne	r2,zero,4007a90 <_ZN13EthernetClass10socketSendEhPKht+0x90>
 4007a7c:	e0bffb83 	ldbu	r2,-18(fp)
 4007a80:	10800720 	cmpeqi	r2,r2,28
 4007a84:	1000021e 	bne	r2,zero,4007a90 <_ZN13EthernetClass10socketSendEhPKht+0x90>
			ret = 0;
 4007a88:	e03ffb0d 	sth	zero,-20(fp)
			break;
 4007a8c:	00000406 	br	4007aa0 <_ZN13EthernetClass10socketSendEhPKht+0xa0>
		}
		yield();
	} while (freesize < ret);
 4007a90:	e0fffc0b 	ldhu	r3,-16(fp)
 4007a94:	e0bffb0b 	ldhu	r2,-20(fp)
 4007a98:	1880012e 	bgeu	r3,r2,4007aa0 <_ZN13EthernetClass10socketSendEhPKht+0xa0>
	} else {
		ret = len;
	}

	// if freebuf is available, start.
	do {
 4007a9c:	003fec06 	br	4007a50 <__alt_data_end+0xfc007a50>
		}
		yield();
	} while (freesize < ret);

	// copy data
	write_data(s, 0, (uint8_t *)buf, ret);
 4007aa0:	e0bffd03 	ldbu	r2,-12(fp)
 4007aa4:	e0fffb0b 	ldhu	r3,-20(fp)
 4007aa8:	180f883a 	mov	r7,r3
 4007aac:	e1bffe17 	ldw	r6,-8(fp)
 4007ab0:	000b883a 	mov	r5,zero
 4007ab4:	1009883a 	mov	r4,r2
 4007ab8:	40078a80 	call	40078a8 <_ZL10write_datahtPKht>
	W5100.execCmdSn(s, Sock_SEND);
 4007abc:	e0bffd03 	ldbu	r2,-12(fp)
 4007ac0:	01400804 	movi	r5,32
 4007ac4:	1009883a 	mov	r4,r2
 4007ac8:	40092040 	call	4009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>

	/* +2008.01 bj */
	while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) {
 4007acc:	e0bffd03 	ldbu	r2,-12(fp)
 4007ad0:	1009883a 	mov	r4,r2
 4007ad4:	400805c0 	call	400805c <_ZN10W5100Class8readSnIREh>
 4007ad8:	10803fcc 	andi	r2,r2,255
 4007adc:	1080040c 	andi	r2,r2,16
 4007ae0:	1005003a 	cmpeq	r2,r2,zero
 4007ae4:	10803fcc 	andi	r2,r2,255
 4007ae8:	10000926 	beq	r2,zero,4007b10 <_ZN13EthernetClass10socketSendEhPKht+0x110>
		/* m2008.01 [bj] : reduce code */
		if ( W5100.readSnSR(s) == SnSR::CLOSED ) {
 4007aec:	e0bffd03 	ldbu	r2,-12(fp)
 4007af0:	1009883a 	mov	r4,r2
 4007af4:	40080980 	call	4008098 <_ZN10W5100Class8readSnSREh>
 4007af8:	10803fcc 	andi	r2,r2,255
 4007afc:	1005003a 	cmpeq	r2,r2,zero
 4007b00:	10803fcc 	andi	r2,r2,255
 4007b04:	103ff126 	beq	r2,zero,4007acc <__alt_data_end+0xfc007acc>
			return 0;
 4007b08:	0005883a 	mov	r2,zero
 4007b0c:	00000506 	br	4007b24 <_ZN13EthernetClass10socketSendEhPKht+0x124>
		}
		yield();
	}
	/* +2008.01 bj */
	W5100.writeSnIR(s, SnIR::SEND_OK);
 4007b10:	e0bffd03 	ldbu	r2,-12(fp)
 4007b14:	01400404 	movi	r5,16
 4007b18:	1009883a 	mov	r4,r2
 4007b1c:	400800c0 	call	400800c <_ZN10W5100Class9writeSnIREhh>
	return ret;
 4007b20:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4007b24:	e037883a 	mov	sp,fp
 4007b28:	dfc00117 	ldw	ra,4(sp)
 4007b2c:	df000017 	ldw	fp,0(sp)
 4007b30:	dec00204 	addi	sp,sp,8
 4007b34:	f800283a 	ret

04007b38 <_ZN13EthernetClass19socketSendAvailableEh>:

uint16_t EthernetClass::socketSendAvailable(uint8_t s)
{
 4007b38:	defffc04 	addi	sp,sp,-16
 4007b3c:	dfc00315 	stw	ra,12(sp)
 4007b40:	df000215 	stw	fp,8(sp)
 4007b44:	df000204 	addi	fp,sp,8
 4007b48:	2005883a 	mov	r2,r4
 4007b4c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t status=0;
 4007b50:	e03ffe05 	stb	zero,-8(fp)
	uint16_t freesize=0;
 4007b54:	e03ffe8d 	sth	zero,-6(fp)
	freesize = getSnTX_FSR(s);
 4007b58:	e0bfff03 	ldbu	r2,-4(fp)
 4007b5c:	1009883a 	mov	r4,r2
 4007b60:	400781c0 	call	400781c <_ZL11getSnTX_FSRh>
 4007b64:	e0bffe8d 	sth	r2,-6(fp)
	status = W5100.readSnSR(s);
 4007b68:	e0bfff03 	ldbu	r2,-4(fp)
 4007b6c:	1009883a 	mov	r4,r2
 4007b70:	40080980 	call	4008098 <_ZN10W5100Class8readSnSREh>
 4007b74:	e0bffe05 	stb	r2,-8(fp)
	if ((status == SnSR::ESTABLISHED) || (status == SnSR::CLOSE_WAIT)) {
 4007b78:	e0bffe03 	ldbu	r2,-8(fp)
 4007b7c:	108005e0 	cmpeqi	r2,r2,23
 4007b80:	1000031e 	bne	r2,zero,4007b90 <_ZN13EthernetClass19socketSendAvailableEh+0x58>
 4007b84:	e0bffe03 	ldbu	r2,-8(fp)
 4007b88:	10800718 	cmpnei	r2,r2,28
 4007b8c:	1000021e 	bne	r2,zero,4007b98 <_ZN13EthernetClass19socketSendAvailableEh+0x60>
		return freesize;
 4007b90:	e0bffe8b 	ldhu	r2,-6(fp)
 4007b94:	00000106 	br	4007b9c <_ZN13EthernetClass19socketSendAvailableEh+0x64>
	}
	return 0;
 4007b98:	0005883a 	mov	r2,zero
}
 4007b9c:	e037883a 	mov	sp,fp
 4007ba0:	dfc00117 	ldw	ra,4(sp)
 4007ba4:	df000017 	ldw	fp,0(sp)
 4007ba8:	dec00204 	addi	sp,sp,8
 4007bac:	f800283a 	ret

04007bb0 <_ZN13EthernetClass16socketBufferDataEhtPKht>:

uint16_t EthernetClass::socketBufferData(uint8_t s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
 4007bb0:	defff904 	addi	sp,sp,-28
 4007bb4:	dfc00615 	stw	ra,24(sp)
 4007bb8:	df000515 	stw	fp,20(sp)
 4007bbc:	df000504 	addi	fp,sp,20
 4007bc0:	2807883a 	mov	r3,r5
 4007bc4:	e1bffe15 	stw	r6,-8(fp)
 4007bc8:	3805883a 	mov	r2,r7
 4007bcc:	e13ffc05 	stb	r4,-16(fp)
 4007bd0:	e0fffd0d 	sth	r3,-12(fp)
 4007bd4:	e0bfff0d 	sth	r2,-4(fp)
	//Serial.printf("  bufferData, offset=%d, len=%d\n", offset, len);
	uint16_t ret =0;
 4007bd8:	e03ffb0d 	sth	zero,-20(fp)
	uint16_t txfree = getSnTX_FSR(s);
 4007bdc:	e0bffc03 	ldbu	r2,-16(fp)
 4007be0:	1009883a 	mov	r4,r2
 4007be4:	400781c0 	call	400781c <_ZL11getSnTX_FSRh>
 4007be8:	e0bffb8d 	sth	r2,-18(fp)
	if (len > txfree) {
 4007bec:	e0bfff0b 	ldhu	r2,-4(fp)
 4007bf0:	e0fffb8b 	ldhu	r3,-18(fp)
 4007bf4:	1880032e 	bgeu	r3,r2,4007c04 <_ZN13EthernetClass16socketBufferDataEhtPKht+0x54>
		ret = txfree; // check size not to exceed MAX size.
 4007bf8:	e0bffb8b 	ldhu	r2,-18(fp)
 4007bfc:	e0bffb0d 	sth	r2,-20(fp)
 4007c00:	00000206 	br	4007c0c <_ZN13EthernetClass16socketBufferDataEhtPKht+0x5c>
	} else {
		ret = len;
 4007c04:	e0bfff0b 	ldhu	r2,-4(fp)
 4007c08:	e0bffb0d 	sth	r2,-20(fp)
	}
	write_data(s, offset, buf, ret);
 4007c0c:	e0bffc03 	ldbu	r2,-16(fp)
 4007c10:	e0fffd0b 	ldhu	r3,-12(fp)
 4007c14:	e13ffb0b 	ldhu	r4,-20(fp)
 4007c18:	200f883a 	mov	r7,r4
 4007c1c:	e1bffe17 	ldw	r6,-8(fp)
 4007c20:	180b883a 	mov	r5,r3
 4007c24:	1009883a 	mov	r4,r2
 4007c28:	40078a80 	call	40078a8 <_ZL10write_datahtPKht>
	return ret;
 4007c2c:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4007c30:	e037883a 	mov	sp,fp
 4007c34:	dfc00117 	ldw	ra,4(sp)
 4007c38:	df000017 	ldw	fp,0(sp)
 4007c3c:	dec00204 	addi	sp,sp,8
 4007c40:	f800283a 	ret

04007c44 <_ZN13EthernetClass14socketStartUDPEhPht>:

bool EthernetClass::socketStartUDP(uint8_t s, uint8_t* addr, uint16_t port)
{
 4007c44:	defffb04 	addi	sp,sp,-20
 4007c48:	dfc00415 	stw	ra,16(sp)
 4007c4c:	df000315 	stw	fp,12(sp)
 4007c50:	df000304 	addi	fp,sp,12
 4007c54:	2007883a 	mov	r3,r4
 4007c58:	e17ffe15 	stw	r5,-8(fp)
 4007c5c:	3005883a 	mov	r2,r6
 4007c60:	e0fffd05 	stb	r3,-12(fp)
 4007c64:	e0bfff0d 	sth	r2,-4(fp)
	if ( ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
 4007c68:	e0bffe17 	ldw	r2,-8(fp)
 4007c6c:	10800003 	ldbu	r2,0(r2)
 4007c70:	10803fcc 	andi	r2,r2,255
 4007c74:	10000f1e 	bne	r2,zero,4007cb4 <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 4007c78:	e0bffe17 	ldw	r2,-8(fp)
 4007c7c:	10800044 	addi	r2,r2,1
 4007c80:	10800003 	ldbu	r2,0(r2)
 4007c84:	10803fcc 	andi	r2,r2,255
 4007c88:	10000a1e 	bne	r2,zero,4007cb4 <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 4007c8c:	e0bffe17 	ldw	r2,-8(fp)
 4007c90:	10800084 	addi	r2,r2,2
 4007c94:	10800003 	ldbu	r2,0(r2)
 4007c98:	10803fcc 	andi	r2,r2,255
 4007c9c:	1000051e 	bne	r2,zero,4007cb4 <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 4007ca0:	e0bffe17 	ldw	r2,-8(fp)
 4007ca4:	108000c4 	addi	r2,r2,3
 4007ca8:	10800003 	ldbu	r2,0(r2)
 4007cac:	10803fcc 	andi	r2,r2,255
 4007cb0:	10000226 	beq	r2,zero,4007cbc <_ZN13EthernetClass14socketStartUDPEhPht+0x78>
 4007cb4:	e0bfff0b 	ldhu	r2,-4(fp)
 4007cb8:	1000021e 	bne	r2,zero,4007cc4 <_ZN13EthernetClass14socketStartUDPEhPht+0x80>
	  ((port == 0x00)) ) {
		return false;
 4007cbc:	0005883a 	mov	r2,zero
 4007cc0:	00000a06 	br	4007cec <_ZN13EthernetClass14socketStartUDPEhPht+0xa8>
	}
	W5100.writeSnDIPR(s, addr);
 4007cc4:	e0bffd03 	ldbu	r2,-12(fp)
 4007cc8:	e17ffe17 	ldw	r5,-8(fp)
 4007ccc:	1009883a 	mov	r4,r2
 4007cd0:	40081800 	call	4008180 <_ZN10W5100Class11writeSnDIPREhPh>
	W5100.writeSnDPORT(s, port);
 4007cd4:	e0bffd03 	ldbu	r2,-12(fp)
 4007cd8:	e0ffff0b 	ldhu	r3,-4(fp)
 4007cdc:	180b883a 	mov	r5,r3
 4007ce0:	1009883a 	mov	r4,r2
 4007ce4:	40081c80 	call	40081c8 <_ZN10W5100Class12writeSnDPORTEht>
	return true;
 4007ce8:	00800044 	movi	r2,1
}
 4007cec:	e037883a 	mov	sp,fp
 4007cf0:	dfc00117 	ldw	ra,4(sp)
 4007cf4:	df000017 	ldw	fp,0(sp)
 4007cf8:	dec00204 	addi	sp,sp,8
 4007cfc:	f800283a 	ret

04007d00 <_ZN13EthernetClass13socketSendUDPEh>:

bool EthernetClass::socketSendUDP(uint8_t s)
{
 4007d00:	defffd04 	addi	sp,sp,-12
 4007d04:	dfc00215 	stw	ra,8(sp)
 4007d08:	df000115 	stw	fp,4(sp)
 4007d0c:	df000104 	addi	fp,sp,4
 4007d10:	2005883a 	mov	r2,r4
 4007d14:	e0bfff05 	stb	r2,-4(fp)
	W5100.execCmdSn(s, Sock_SEND);
 4007d18:	e0bfff03 	ldbu	r2,-4(fp)
 4007d1c:	01400804 	movi	r5,32
 4007d20:	1009883a 	mov	r4,r2
 4007d24:	40092040 	call	4009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>

	/* +2008.01 bj */
	while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) {
 4007d28:	e0bfff03 	ldbu	r2,-4(fp)
 4007d2c:	1009883a 	mov	r4,r2
 4007d30:	400805c0 	call	400805c <_ZN10W5100Class8readSnIREh>
 4007d34:	10803fcc 	andi	r2,r2,255
 4007d38:	1080040c 	andi	r2,r2,16
 4007d3c:	1005003a 	cmpeq	r2,r2,zero
 4007d40:	10803fcc 	andi	r2,r2,255
 4007d44:	10000e26 	beq	r2,zero,4007d80 <_ZN13EthernetClass13socketSendUDPEh+0x80>
		if (W5100.readSnIR(s) & SnIR::TIMEOUT) {
 4007d48:	e0bfff03 	ldbu	r2,-4(fp)
 4007d4c:	1009883a 	mov	r4,r2
 4007d50:	400805c0 	call	400805c <_ZN10W5100Class8readSnIREh>
 4007d54:	10803fcc 	andi	r2,r2,255
 4007d58:	1080020c 	andi	r2,r2,8
 4007d5c:	1004c03a 	cmpne	r2,r2,zero
 4007d60:	10803fcc 	andi	r2,r2,255
 4007d64:	103ff026 	beq	r2,zero,4007d28 <__alt_data_end+0xfc007d28>
			/* +2008.01 [bj]: clear interrupt */
			W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
 4007d68:	e0bfff03 	ldbu	r2,-4(fp)
 4007d6c:	01400604 	movi	r5,24
 4007d70:	1009883a 	mov	r4,r2
 4007d74:	400800c0 	call	400800c <_ZN10W5100Class9writeSnIREhh>
			//Serial.printf("sendUDP timeout\n");
			return false;
 4007d78:	0005883a 	mov	r2,zero
 4007d7c:	00000506 	br	4007d94 <_ZN13EthernetClass13socketSendUDPEh+0x94>
		}
		yield();
	}

	/* +2008.01 bj */
	W5100.writeSnIR(s, SnIR::SEND_OK);
 4007d80:	e0bfff03 	ldbu	r2,-4(fp)
 4007d84:	01400404 	movi	r5,16
 4007d88:	1009883a 	mov	r4,r2
 4007d8c:	400800c0 	call	400800c <_ZN10W5100Class9writeSnIREhh>

	//Serial.printf("sendUDP ok\n");
	/* Sent ok */
	return true;
 4007d90:	00800044 	movi	r2,1
}
 4007d94:	e037883a 	mov	sp,fp
 4007d98:	dfc00117 	ldw	ra,4(sp)
 4007d9c:	df000017 	ldw	fp,0(sp)
 4007da0:	dec00204 	addi	sp,sp,8
 4007da4:	f800283a 	ret

04007da8 <_Z41__static_initialization_and_destruction_0ii>:
 4007da8:	defffb04 	addi	sp,sp,-20
 4007dac:	dfc00415 	stw	ra,16(sp)
 4007db0:	df000315 	stw	fp,12(sp)
 4007db4:	df000304 	addi	fp,sp,12
 4007db8:	e13ffe15 	stw	r4,-8(fp)
 4007dbc:	e17fff15 	stw	r5,-4(fp)
 4007dc0:	e0bffe17 	ldw	r2,-8(fp)
 4007dc4:	10800058 	cmpnei	r2,r2,1
 4007dc8:	1000091e 	bne	r2,zero,4007df0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4007dcc:	e0ffff17 	ldw	r3,-4(fp)
 4007dd0:	00bfffd4 	movui	r2,65535
 4007dd4:	1880061e 	bne	r3,r2,4007df0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4007dd8:	d8000015 	stw	zero,0(sp)
 4007ddc:	000f883a 	mov	r7,zero
 4007de0:	000d883a 	mov	r6,zero
 4007de4:	000b883a 	mov	r5,zero
 4007de8:	d112dd04 	addi	r4,gp,19316
 4007dec:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
 4007df0:	0001883a 	nop
 4007df4:	e037883a 	mov	sp,fp
 4007df8:	dfc00117 	ldw	ra,4(sp)
 4007dfc:	df000017 	ldw	fp,0(sp)
 4007e00:	dec00204 	addi	sp,sp,8
 4007e04:	f800283a 	ret

04007e08 <_GLOBAL__sub_I__ZN13EthernetClass14socketPortRandEt>:
 4007e08:	defffe04 	addi	sp,sp,-8
 4007e0c:	dfc00115 	stw	ra,4(sp)
 4007e10:	df000015 	stw	fp,0(sp)
 4007e14:	d839883a 	mov	fp,sp
 4007e18:	017fffd4 	movui	r5,65535
 4007e1c:	01000044 	movi	r4,1
 4007e20:	4007da80 	call	4007da8 <_Z41__static_initialization_and_destruction_0ii>
 4007e24:	e037883a 	mov	sp,fp
 4007e28:	dfc00117 	ldw	ra,4(sp)
 4007e2c:	df000017 	ldw	fp,0(sp)
 4007e30:	dec00204 	addi	sp,sp,8
 4007e34:	f800283a 	ret

04007e38 <_ZN10W5100Class4readEt>:
  static uint16_t write(uint16_t addr, const uint8_t *buf, uint16_t len);
  static uint8_t write(uint16_t addr, uint8_t data) {
    return write(addr, &data, 1);
  }
  static uint16_t read(uint16_t addr, uint8_t *buf, uint16_t len);
  static uint8_t read(uint16_t addr) {
 4007e38:	defffc04 	addi	sp,sp,-16
 4007e3c:	dfc00315 	stw	ra,12(sp)
 4007e40:	df000215 	stw	fp,8(sp)
 4007e44:	df000204 	addi	fp,sp,8
 4007e48:	2005883a 	mov	r2,r4
 4007e4c:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t data;
    read(addr, &data, 1);
 4007e50:	e0bfff0b 	ldhu	r2,-4(fp)
 4007e54:	01800044 	movi	r6,1
 4007e58:	e17ffe04 	addi	r5,fp,-8
 4007e5c:	1009883a 	mov	r4,r2
 4007e60:	4008fb00 	call	4008fb0 <_ZN10W5100Class4readEtPht>
    return data;
 4007e64:	e0bffe03 	ldbu	r2,-8(fp)
  }
 4007e68:	e037883a 	mov	sp,fp
 4007e6c:	dfc00117 	ldw	ra,4(sp)
 4007e70:	df000017 	ldw	fp,0(sp)
 4007e74:	dec00204 	addi	sp,sp,8
 4007e78:	f800283a 	ret

04007e7c <_ZN10W5100Class6readSnEht>:
    return CH_BASE_MSB << 8;
  }
  static uint8_t CH_BASE_MSB; // 1 redundant byte, saves ~80 bytes code on AVR
  static const uint16_t CH_SIZE = 0x0100;

  static inline uint8_t readSn(SOCKET s, uint16_t addr) {
 4007e7c:	defffc04 	addi	sp,sp,-16
 4007e80:	dfc00315 	stw	ra,12(sp)
 4007e84:	df000215 	stw	fp,8(sp)
 4007e88:	df000204 	addi	fp,sp,8
 4007e8c:	2007883a 	mov	r3,r4
 4007e90:	2805883a 	mov	r2,r5
 4007e94:	e0fffe05 	stb	r3,-8(fp)
 4007e98:	e0bfff0d 	sth	r2,-4(fp)
    return read(CH_BASE() + s * CH_SIZE + addr);
 4007e9c:	40059b80 	call	40059b8 <_ZN10W5100Class7CH_BASEEv>
 4007ea0:	1007883a 	mov	r3,r2
 4007ea4:	e0bffe03 	ldbu	r2,-8(fp)
 4007ea8:	1004923a 	slli	r2,r2,8
 4007eac:	1885883a 	add	r2,r3,r2
 4007eb0:	1007883a 	mov	r3,r2
 4007eb4:	e0bfff0b 	ldhu	r2,-4(fp)
 4007eb8:	1885883a 	add	r2,r3,r2
 4007ebc:	10bfffcc 	andi	r2,r2,65535
 4007ec0:	1009883a 	mov	r4,r2
 4007ec4:	4007e380 	call	4007e38 <_ZN10W5100Class4readEt>
  }
 4007ec8:	e037883a 	mov	sp,fp
 4007ecc:	dfc00117 	ldw	ra,4(sp)
 4007ed0:	df000017 	ldw	fp,0(sp)
 4007ed4:	dec00204 	addi	sp,sp,8
 4007ed8:	f800283a 	ret

04007edc <_ZN10W5100Class7writeSnEhth>:
  static inline uint8_t writeSn(SOCKET s, uint16_t addr, uint8_t data) {
 4007edc:	defffb04 	addi	sp,sp,-20
 4007ee0:	dfc00415 	stw	ra,16(sp)
 4007ee4:	df000315 	stw	fp,12(sp)
 4007ee8:	df000304 	addi	fp,sp,12
 4007eec:	2807883a 	mov	r3,r5
 4007ef0:	3005883a 	mov	r2,r6
 4007ef4:	e13ffd05 	stb	r4,-12(fp)
 4007ef8:	e0fffe0d 	sth	r3,-8(fp)
 4007efc:	e0bfff05 	stb	r2,-4(fp)
    return write(CH_BASE() + s * CH_SIZE + addr, data);
 4007f00:	40059b80 	call	40059b8 <_ZN10W5100Class7CH_BASEEv>
 4007f04:	1007883a 	mov	r3,r2
 4007f08:	e0bffd03 	ldbu	r2,-12(fp)
 4007f0c:	1004923a 	slli	r2,r2,8
 4007f10:	1885883a 	add	r2,r3,r2
 4007f14:	1007883a 	mov	r3,r2
 4007f18:	e0bffe0b 	ldhu	r2,-8(fp)
 4007f1c:	1885883a 	add	r2,r3,r2
 4007f20:	10bfffcc 	andi	r2,r2,65535
 4007f24:	e0ffff03 	ldbu	r3,-4(fp)
 4007f28:	180b883a 	mov	r5,r3
 4007f2c:	1009883a 	mov	r4,r2
 4007f30:	40047840 	call	4004784 <_ZN10W5100Class5writeEth>
  }
 4007f34:	e037883a 	mov	sp,fp
 4007f38:	dfc00117 	ldw	ra,4(sp)
 4007f3c:	df000017 	ldw	fp,0(sp)
 4007f40:	dec00204 	addi	sp,sp,8
 4007f44:	f800283a 	ret

04007f48 <_ZN10W5100Class7writeSnEhtPht>:
  static inline uint16_t readSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
    return read(CH_BASE() + s * CH_SIZE + addr, buf, len);
  }
  static inline uint16_t writeSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
 4007f48:	defffa04 	addi	sp,sp,-24
 4007f4c:	dfc00515 	stw	ra,20(sp)
 4007f50:	df000415 	stw	fp,16(sp)
 4007f54:	df000404 	addi	fp,sp,16
 4007f58:	2807883a 	mov	r3,r5
 4007f5c:	e1bffe15 	stw	r6,-8(fp)
 4007f60:	3805883a 	mov	r2,r7
 4007f64:	e13ffc05 	stb	r4,-16(fp)
 4007f68:	e0fffd0d 	sth	r3,-12(fp)
 4007f6c:	e0bfff0d 	sth	r2,-4(fp)
    return write(CH_BASE() + s * CH_SIZE + addr, buf, len);
 4007f70:	40059b80 	call	40059b8 <_ZN10W5100Class7CH_BASEEv>
 4007f74:	1007883a 	mov	r3,r2
 4007f78:	e0bffc03 	ldbu	r2,-16(fp)
 4007f7c:	1004923a 	slli	r2,r2,8
 4007f80:	1885883a 	add	r2,r3,r2
 4007f84:	1007883a 	mov	r3,r2
 4007f88:	e0bffd0b 	ldhu	r2,-12(fp)
 4007f8c:	1885883a 	add	r2,r3,r2
 4007f90:	10bfffcc 	andi	r2,r2,65535
 4007f94:	e0ffff0b 	ldhu	r3,-4(fp)
 4007f98:	180d883a 	mov	r6,r3
 4007f9c:	e17ffe17 	ldw	r5,-8(fp)
 4007fa0:	1009883a 	mov	r4,r2
 4007fa4:	4008e0c0 	call	4008e0c <_ZN10W5100Class5writeEtPKht>
  }
 4007fa8:	e037883a 	mov	sp,fp
 4007fac:	dfc00117 	ldw	ra,4(sp)
 4007fb0:	df000017 	ldw	fp,0(sp)
 4007fb4:	dec00204 	addi	sp,sp,8
 4007fb8:	f800283a 	ret

04007fbc <_ZN10W5100Class9writeSnMREhh>:
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }

public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
 4007fbc:	defffc04 	addi	sp,sp,-16
 4007fc0:	dfc00315 	stw	ra,12(sp)
 4007fc4:	df000215 	stw	fp,8(sp)
 4007fc8:	df000204 	addi	fp,sp,8
 4007fcc:	2007883a 	mov	r3,r4
 4007fd0:	2805883a 	mov	r2,r5
 4007fd4:	e0fffe05 	stb	r3,-8(fp)
 4007fd8:	e0bfff05 	stb	r2,-4(fp)
 4007fdc:	e0bffe03 	ldbu	r2,-8(fp)
 4007fe0:	e0ffff03 	ldbu	r3,-4(fp)
 4007fe4:	180d883a 	mov	r6,r3
 4007fe8:	000b883a 	mov	r5,zero
 4007fec:	1009883a 	mov	r4,r2
 4007ff0:	4007edc0 	call	4007edc <_ZN10W5100Class7writeSnEhth>
 4007ff4:	0001883a 	nop
 4007ff8:	e037883a 	mov	sp,fp
 4007ffc:	dfc00117 	ldw	ra,4(sp)
 4008000:	df000017 	ldw	fp,0(sp)
 4008004:	dec00204 	addi	sp,sp,8
 4008008:	f800283a 	ret

0400800c <_ZN10W5100Class9writeSnIREhh>:
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
 400800c:	defffc04 	addi	sp,sp,-16
 4008010:	dfc00315 	stw	ra,12(sp)
 4008014:	df000215 	stw	fp,8(sp)
 4008018:	df000204 	addi	fp,sp,8
 400801c:	2007883a 	mov	r3,r4
 4008020:	2805883a 	mov	r2,r5
 4008024:	e0fffe05 	stb	r3,-8(fp)
 4008028:	e0bfff05 	stb	r2,-4(fp)
 400802c:	e0bffe03 	ldbu	r2,-8(fp)
 4008030:	e0ffff03 	ldbu	r3,-4(fp)
 4008034:	180d883a 	mov	r6,r3
 4008038:	01400084 	movi	r5,2
 400803c:	1009883a 	mov	r4,r2
 4008040:	4007edc0 	call	4007edc <_ZN10W5100Class7writeSnEhth>
 4008044:	0001883a 	nop
 4008048:	e037883a 	mov	sp,fp
 400804c:	dfc00117 	ldw	ra,4(sp)
 4008050:	df000017 	ldw	fp,0(sp)
 4008054:	dec00204 	addi	sp,sp,8
 4008058:	f800283a 	ret

0400805c <_ZN10W5100Class8readSnIREh>:
 400805c:	defffd04 	addi	sp,sp,-12
 4008060:	dfc00215 	stw	ra,8(sp)
 4008064:	df000115 	stw	fp,4(sp)
 4008068:	df000104 	addi	fp,sp,4
 400806c:	2005883a 	mov	r2,r4
 4008070:	e0bfff05 	stb	r2,-4(fp)
 4008074:	e0bfff03 	ldbu	r2,-4(fp)
 4008078:	01400084 	movi	r5,2
 400807c:	1009883a 	mov	r4,r2
 4008080:	4007e7c0 	call	4007e7c <_ZN10W5100Class6readSnEht>
 4008084:	e037883a 	mov	sp,fp
 4008088:	dfc00117 	ldw	ra,4(sp)
 400808c:	df000017 	ldw	fp,0(sp)
 4008090:	dec00204 	addi	sp,sp,8
 4008094:	f800283a 	ret

04008098 <_ZN10W5100Class8readSnSREh>:
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
 4008098:	defffd04 	addi	sp,sp,-12
 400809c:	dfc00215 	stw	ra,8(sp)
 40080a0:	df000115 	stw	fp,4(sp)
 40080a4:	df000104 	addi	fp,sp,4
 40080a8:	2005883a 	mov	r2,r4
 40080ac:	e0bfff05 	stb	r2,-4(fp)
 40080b0:	e0bfff03 	ldbu	r2,-4(fp)
 40080b4:	014000c4 	movi	r5,3
 40080b8:	1009883a 	mov	r4,r2
 40080bc:	4007e7c0 	call	4007e7c <_ZN10W5100Class6readSnEht>
 40080c0:	e037883a 	mov	sp,fp
 40080c4:	dfc00117 	ldw	ra,4(sp)
 40080c8:	df000017 	ldw	fp,0(sp)
 40080cc:	dec00204 	addi	sp,sp,8
 40080d0:	f800283a 	ret

040080d4 <_ZN10W5100Class11writeSnPORTEht>:
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
 40080d4:	defffb04 	addi	sp,sp,-20
 40080d8:	dfc00415 	stw	ra,16(sp)
 40080dc:	df000315 	stw	fp,12(sp)
 40080e0:	df000304 	addi	fp,sp,12
 40080e4:	2007883a 	mov	r3,r4
 40080e8:	2805883a 	mov	r2,r5
 40080ec:	e0fffe05 	stb	r3,-8(fp)
 40080f0:	e0bfff0d 	sth	r2,-4(fp)
 40080f4:	e0bfff0b 	ldhu	r2,-4(fp)
 40080f8:	1005d23a 	srai	r2,r2,8
 40080fc:	e0bffd05 	stb	r2,-12(fp)
 4008100:	e0bfff0b 	ldhu	r2,-4(fp)
 4008104:	e0bffd45 	stb	r2,-11(fp)
 4008108:	e0bffe03 	ldbu	r2,-8(fp)
 400810c:	01c00084 	movi	r7,2
 4008110:	e1bffd04 	addi	r6,fp,-12
 4008114:	01400104 	movi	r5,4
 4008118:	1009883a 	mov	r4,r2
 400811c:	4007f480 	call	4007f48 <_ZN10W5100Class7writeSnEhtPht>
 4008120:	0001883a 	nop
 4008124:	e037883a 	mov	sp,fp
 4008128:	dfc00117 	ldw	ra,4(sp)
 400812c:	df000017 	ldw	fp,0(sp)
 4008130:	dec00204 	addi	sp,sp,8
 4008134:	f800283a 	ret

04008138 <_ZN10W5100Class11writeSnDHAREhPh>:
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
 4008138:	defffc04 	addi	sp,sp,-16
 400813c:	dfc00315 	stw	ra,12(sp)
 4008140:	df000215 	stw	fp,8(sp)
 4008144:	df000204 	addi	fp,sp,8
 4008148:	2005883a 	mov	r2,r4
 400814c:	e17fff15 	stw	r5,-4(fp)
 4008150:	e0bffe05 	stb	r2,-8(fp)
 4008154:	e0bffe03 	ldbu	r2,-8(fp)
 4008158:	01c00184 	movi	r7,6
 400815c:	e1bfff17 	ldw	r6,-4(fp)
 4008160:	01400184 	movi	r5,6
 4008164:	1009883a 	mov	r4,r2
 4008168:	4007f480 	call	4007f48 <_ZN10W5100Class7writeSnEhtPht>
 400816c:	e037883a 	mov	sp,fp
 4008170:	dfc00117 	ldw	ra,4(sp)
 4008174:	df000017 	ldw	fp,0(sp)
 4008178:	dec00204 	addi	sp,sp,8
 400817c:	f800283a 	ret

04008180 <_ZN10W5100Class11writeSnDIPREhPh>:
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
 4008180:	defffc04 	addi	sp,sp,-16
 4008184:	dfc00315 	stw	ra,12(sp)
 4008188:	df000215 	stw	fp,8(sp)
 400818c:	df000204 	addi	fp,sp,8
 4008190:	2005883a 	mov	r2,r4
 4008194:	e17fff15 	stw	r5,-4(fp)
 4008198:	e0bffe05 	stb	r2,-8(fp)
 400819c:	e0bffe03 	ldbu	r2,-8(fp)
 40081a0:	01c00104 	movi	r7,4
 40081a4:	e1bfff17 	ldw	r6,-4(fp)
 40081a8:	01400304 	movi	r5,12
 40081ac:	1009883a 	mov	r4,r2
 40081b0:	4007f480 	call	4007f48 <_ZN10W5100Class7writeSnEhtPht>
 40081b4:	e037883a 	mov	sp,fp
 40081b8:	dfc00117 	ldw	ra,4(sp)
 40081bc:	df000017 	ldw	fp,0(sp)
 40081c0:	dec00204 	addi	sp,sp,8
 40081c4:	f800283a 	ret

040081c8 <_ZN10W5100Class12writeSnDPORTEht>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
 40081c8:	defffb04 	addi	sp,sp,-20
 40081cc:	dfc00415 	stw	ra,16(sp)
 40081d0:	df000315 	stw	fp,12(sp)
 40081d4:	df000304 	addi	fp,sp,12
 40081d8:	2007883a 	mov	r3,r4
 40081dc:	2805883a 	mov	r2,r5
 40081e0:	e0fffe05 	stb	r3,-8(fp)
 40081e4:	e0bfff0d 	sth	r2,-4(fp)
 40081e8:	e0bfff0b 	ldhu	r2,-4(fp)
 40081ec:	1005d23a 	srai	r2,r2,8
 40081f0:	e0bffd05 	stb	r2,-12(fp)
 40081f4:	e0bfff0b 	ldhu	r2,-4(fp)
 40081f8:	e0bffd45 	stb	r2,-11(fp)
 40081fc:	e0bffe03 	ldbu	r2,-8(fp)
 4008200:	01c00084 	movi	r7,2
 4008204:	e1bffd04 	addi	r6,fp,-12
 4008208:	01400404 	movi	r5,16
 400820c:	1009883a 	mov	r4,r2
 4008210:	4007f480 	call	4007f48 <_ZN10W5100Class7writeSnEhtPht>
 4008214:	0001883a 	nop
 4008218:	e037883a 	mov	sp,fp
 400821c:	dfc00117 	ldw	ra,4(sp)
 4008220:	df000017 	ldw	fp,0(sp)
 4008224:	dec00204 	addi	sp,sp,8
 4008228:	f800283a 	ret

0400822c <_ZN10W5100Class12readSnTX_FSREh>:
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER8(SnRX_SIZE,   0x001E)        // RX Memory Size (W5200 only)
  __SOCKET_REGISTER8(SnTX_SIZE,   0x001F)        // RX Memory Size (W5200 only)
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
 400822c:	defffc04 	addi	sp,sp,-16
 4008230:	dfc00315 	stw	ra,12(sp)
 4008234:	df000215 	stw	fp,8(sp)
 4008238:	df000204 	addi	fp,sp,8
 400823c:	2005883a 	mov	r2,r4
 4008240:	e0bfff05 	stb	r2,-4(fp)
 4008244:	e0bfff03 	ldbu	r2,-4(fp)
 4008248:	01c00084 	movi	r7,2
 400824c:	e1bffe04 	addi	r6,fp,-8
 4008250:	01400804 	movi	r5,32
 4008254:	1009883a 	mov	r4,r2
 4008258:	40059e00 	call	40059e0 <_ZN10W5100Class6readSnEhtPht>
 400825c:	e0bffe03 	ldbu	r2,-8(fp)
 4008260:	10803fcc 	andi	r2,r2,255
 4008264:	1004923a 	slli	r2,r2,8
 4008268:	1007883a 	mov	r3,r2
 400826c:	e0bffe43 	ldbu	r2,-7(fp)
 4008270:	10803fcc 	andi	r2,r2,255
 4008274:	1884b03a 	or	r2,r3,r2
 4008278:	e037883a 	mov	sp,fp
 400827c:	dfc00117 	ldw	ra,4(sp)
 4008280:	df000017 	ldw	fp,0(sp)
 4008284:	dec00204 	addi	sp,sp,8
 4008288:	f800283a 	ret

0400828c <_ZN10W5100Class12writeSnTX_WREht>:
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
 400828c:	defffb04 	addi	sp,sp,-20
 4008290:	dfc00415 	stw	ra,16(sp)
 4008294:	df000315 	stw	fp,12(sp)
 4008298:	df000304 	addi	fp,sp,12
 400829c:	2007883a 	mov	r3,r4
 40082a0:	2805883a 	mov	r2,r5
 40082a4:	e0fffe05 	stb	r3,-8(fp)
 40082a8:	e0bfff0d 	sth	r2,-4(fp)
 40082ac:	e0bfff0b 	ldhu	r2,-4(fp)
 40082b0:	1005d23a 	srai	r2,r2,8
 40082b4:	e0bffd05 	stb	r2,-12(fp)
 40082b8:	e0bfff0b 	ldhu	r2,-4(fp)
 40082bc:	e0bffd45 	stb	r2,-11(fp)
 40082c0:	e0bffe03 	ldbu	r2,-8(fp)
 40082c4:	01c00084 	movi	r7,2
 40082c8:	e1bffd04 	addi	r6,fp,-12
 40082cc:	01400904 	movi	r5,36
 40082d0:	1009883a 	mov	r4,r2
 40082d4:	4007f480 	call	4007f48 <_ZN10W5100Class7writeSnEhtPht>
 40082d8:	0001883a 	nop
 40082dc:	e037883a 	mov	sp,fp
 40082e0:	dfc00117 	ldw	ra,4(sp)
 40082e4:	df000017 	ldw	fp,0(sp)
 40082e8:	dec00204 	addi	sp,sp,8
 40082ec:	f800283a 	ret

040082f0 <_ZN10W5100Class11readSnTX_WREh>:
 40082f0:	defffc04 	addi	sp,sp,-16
 40082f4:	dfc00315 	stw	ra,12(sp)
 40082f8:	df000215 	stw	fp,8(sp)
 40082fc:	df000204 	addi	fp,sp,8
 4008300:	2005883a 	mov	r2,r4
 4008304:	e0bfff05 	stb	r2,-4(fp)
 4008308:	e0bfff03 	ldbu	r2,-4(fp)
 400830c:	01c00084 	movi	r7,2
 4008310:	e1bffe04 	addi	r6,fp,-8
 4008314:	01400904 	movi	r5,36
 4008318:	1009883a 	mov	r4,r2
 400831c:	40059e00 	call	40059e0 <_ZN10W5100Class6readSnEhtPht>
 4008320:	e0bffe03 	ldbu	r2,-8(fp)
 4008324:	10803fcc 	andi	r2,r2,255
 4008328:	1004923a 	slli	r2,r2,8
 400832c:	1007883a 	mov	r3,r2
 4008330:	e0bffe43 	ldbu	r2,-7(fp)
 4008334:	10803fcc 	andi	r2,r2,255
 4008338:	1884b03a 	or	r2,r3,r2
 400833c:	e037883a 	mov	sp,fp
 4008340:	dfc00117 	ldw	ra,4(sp)
 4008344:	df000017 	ldw	fp,0(sp)
 4008348:	dec00204 	addi	sp,sp,8
 400834c:	f800283a 	ret

04008350 <_ZN10W5100Class12readSnRX_RSREh>:
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
 4008350:	defffc04 	addi	sp,sp,-16
 4008354:	dfc00315 	stw	ra,12(sp)
 4008358:	df000215 	stw	fp,8(sp)
 400835c:	df000204 	addi	fp,sp,8
 4008360:	2005883a 	mov	r2,r4
 4008364:	e0bfff05 	stb	r2,-4(fp)
 4008368:	e0bfff03 	ldbu	r2,-4(fp)
 400836c:	01c00084 	movi	r7,2
 4008370:	e1bffe04 	addi	r6,fp,-8
 4008374:	01400984 	movi	r5,38
 4008378:	1009883a 	mov	r4,r2
 400837c:	40059e00 	call	40059e0 <_ZN10W5100Class6readSnEhtPht>
 4008380:	e0bffe03 	ldbu	r2,-8(fp)
 4008384:	10803fcc 	andi	r2,r2,255
 4008388:	1004923a 	slli	r2,r2,8
 400838c:	1007883a 	mov	r3,r2
 4008390:	e0bffe43 	ldbu	r2,-7(fp)
 4008394:	10803fcc 	andi	r2,r2,255
 4008398:	1884b03a 	or	r2,r3,r2
 400839c:	e037883a 	mov	sp,fp
 40083a0:	dfc00117 	ldw	ra,4(sp)
 40083a4:	df000017 	ldw	fp,0(sp)
 40083a8:	dec00204 	addi	sp,sp,8
 40083ac:	f800283a 	ret

040083b0 <_ZN10W5100Class12writeSnRX_RDEht>:
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
 40083b0:	defffb04 	addi	sp,sp,-20
 40083b4:	dfc00415 	stw	ra,16(sp)
 40083b8:	df000315 	stw	fp,12(sp)
 40083bc:	df000304 	addi	fp,sp,12
 40083c0:	2007883a 	mov	r3,r4
 40083c4:	2805883a 	mov	r2,r5
 40083c8:	e0fffe05 	stb	r3,-8(fp)
 40083cc:	e0bfff0d 	sth	r2,-4(fp)
 40083d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40083d4:	1005d23a 	srai	r2,r2,8
 40083d8:	e0bffd05 	stb	r2,-12(fp)
 40083dc:	e0bfff0b 	ldhu	r2,-4(fp)
 40083e0:	e0bffd45 	stb	r2,-11(fp)
 40083e4:	e0bffe03 	ldbu	r2,-8(fp)
 40083e8:	01c00084 	movi	r7,2
 40083ec:	e1bffd04 	addi	r6,fp,-12
 40083f0:	01400a04 	movi	r5,40
 40083f4:	1009883a 	mov	r4,r2
 40083f8:	4007f480 	call	4007f48 <_ZN10W5100Class7writeSnEhtPht>
 40083fc:	0001883a 	nop
 4008400:	e037883a 	mov	sp,fp
 4008404:	dfc00117 	ldw	ra,4(sp)
 4008408:	df000017 	ldw	fp,0(sp)
 400840c:	dec00204 	addi	sp,sp,8
 4008410:	f800283a 	ret

04008414 <_ZN10W5100Class11readSnRX_RDEh>:
 4008414:	defffc04 	addi	sp,sp,-16
 4008418:	dfc00315 	stw	ra,12(sp)
 400841c:	df000215 	stw	fp,8(sp)
 4008420:	df000204 	addi	fp,sp,8
 4008424:	2005883a 	mov	r2,r4
 4008428:	e0bfff05 	stb	r2,-4(fp)
 400842c:	e0bfff03 	ldbu	r2,-4(fp)
 4008430:	01c00084 	movi	r7,2
 4008434:	e1bffe04 	addi	r6,fp,-8
 4008438:	01400a04 	movi	r5,40
 400843c:	1009883a 	mov	r4,r2
 4008440:	40059e00 	call	40059e0 <_ZN10W5100Class6readSnEhtPht>
 4008444:	e0bffe03 	ldbu	r2,-8(fp)
 4008448:	10803fcc 	andi	r2,r2,255
 400844c:	1004923a 	slli	r2,r2,8
 4008450:	1007883a 	mov	r3,r2
 4008454:	e0bffe43 	ldbu	r2,-7(fp)
 4008458:	10803fcc 	andi	r2,r2,255
 400845c:	1884b03a 	or	r2,r3,r2
 4008460:	e037883a 	mov	sp,fp
 4008464:	dfc00117 	ldw	ra,4(sp)
 4008468:	df000017 	ldw	fp,0(sp)
 400846c:	dec00204 	addi	sp,sp,8
 4008470:	f800283a 	ret

04008474 <_ZN10W5100Class5SBASEEh>:
  static uint16_t SMASK;
#else
  static const uint16_t SSIZE = 2048;
  static const uint16_t SMASK = 0x07FF;
#endif
  static uint16_t SBASE(uint8_t socknum) {
 4008474:	defffe04 	addi	sp,sp,-8
 4008478:	df000115 	stw	fp,4(sp)
 400847c:	df000104 	addi	fp,sp,4
 4008480:	2005883a 	mov	r2,r4
 4008484:	e0bfff05 	stb	r2,-4(fp)
    if (chip == 51) {
 4008488:	d092e003 	ldbu	r2,19328(gp)
 400848c:	10803fcc 	andi	r2,r2,255
 4008490:	10800cd8 	cmpnei	r2,r2,51
 4008494:	1000041e 	bne	r2,zero,40084a8 <_ZN10W5100Class5SBASEEh+0x34>
      return socknum * SSIZE + 0x4000;
 4008498:	e0bfff03 	ldbu	r2,-4(fp)
 400849c:	10800204 	addi	r2,r2,8
 40084a0:	100492fa 	slli	r2,r2,11
 40084a4:	00000306 	br	40084b4 <_ZN10W5100Class5SBASEEh+0x40>
    } else {
      return socknum * SSIZE + 0x8000;
 40084a8:	e0bfff03 	ldbu	r2,-4(fp)
 40084ac:	10800404 	addi	r2,r2,16
 40084b0:	100492fa 	slli	r2,r2,11
    }
  }
 40084b4:	e037883a 	mov	sp,fp
 40084b8:	df000017 	ldw	fp,0(sp)
 40084bc:	dec00104 	addi	sp,sp,4
 40084c0:	f800283a 	ret

040084c4 <_ZN10W5100Class5RBASEEh>:
  static uint16_t RBASE(uint8_t socknum) {
 40084c4:	defffe04 	addi	sp,sp,-8
 40084c8:	df000115 	stw	fp,4(sp)
 40084cc:	df000104 	addi	fp,sp,4
 40084d0:	2005883a 	mov	r2,r4
 40084d4:	e0bfff05 	stb	r2,-4(fp)
    if (chip == 51) {
 40084d8:	d092e003 	ldbu	r2,19328(gp)
 40084dc:	10803fcc 	andi	r2,r2,255
 40084e0:	10800cd8 	cmpnei	r2,r2,51
 40084e4:	1000041e 	bne	r2,zero,40084f8 <_ZN10W5100Class5RBASEEh+0x34>
      return socknum * SSIZE + 0x6000;
 40084e8:	e0bfff03 	ldbu	r2,-4(fp)
 40084ec:	10800304 	addi	r2,r2,12
 40084f0:	100492fa 	slli	r2,r2,11
 40084f4:	00000306 	br	4008504 <_ZN10W5100Class5RBASEEh+0x40>
    } else {
      return socknum * SSIZE + 0xC000;
 40084f8:	e0bfff03 	ldbu	r2,-4(fp)
 40084fc:	10800604 	addi	r2,r2,24
 4008500:	100492fa 	slli	r2,r2,11
    }
  }
 4008504:	e037883a 	mov	sp,fp
 4008508:	df000017 	ldw	fp,0(sp)
 400850c:	dec00104 	addi	sp,sp,4
 4008510:	f800283a 	ret

04008514 <_ZN10W5100Class23hasOffsetAddressMappingEv>:

  static bool hasOffsetAddressMapping(void) {
 4008514:	deffff04 	addi	sp,sp,-4
 4008518:	df000015 	stw	fp,0(sp)
 400851c:	d839883a 	mov	fp,sp
    if (chip == 55) return true;
 4008520:	d092e003 	ldbu	r2,19328(gp)
 4008524:	10803fcc 	andi	r2,r2,255
 4008528:	10800dd8 	cmpnei	r2,r2,55
 400852c:	1000021e 	bne	r2,zero,4008538 <_ZN10W5100Class23hasOffsetAddressMappingEv+0x24>
 4008530:	00800044 	movi	r2,1
 4008534:	00000106 	br	400853c <_ZN10W5100Class23hasOffsetAddressMappingEv+0x28>
    return false;
 4008538:	0005883a 	mov	r2,zero
  }
 400853c:	e037883a 	mov	sp,fp
 4008540:	df000017 	ldw	fp,0(sp)
 4008544:	dec00104 	addi	sp,sp,4
 4008548:	f800283a 	ret

0400854c <_ZN9IPAddressC1Ev>:

#include "IPAddress.h"
#include <cstring>
#include <stdio.h>

IPAddress::IPAddress()
 400854c:	defffe04 	addi	sp,sp,-8
 4008550:	df000115 	stw	fp,4(sp)
 4008554:	df000104 	addi	fp,sp,4
 4008558:	e13fff15 	stw	r4,-4(fp)
{
    _address.dword = 0;
 400855c:	e0bfff17 	ldw	r2,-4(fp)
 4008560:	10000015 	stw	zero,0(r2)
}
 4008564:	0001883a 	nop
 4008568:	e037883a 	mov	sp,fp
 400856c:	df000017 	ldw	fp,0(sp)
 4008570:	dec00104 	addi	sp,sp,4
 4008574:	f800283a 	ret

04008578 <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 4008578:	defffa04 	addi	sp,sp,-24
 400857c:	df000515 	stw	fp,20(sp)
 4008580:	df000504 	addi	fp,sp,20
 4008584:	e13ffb15 	stw	r4,-20(fp)
 4008588:	3009883a 	mov	r4,r6
 400858c:	3807883a 	mov	r3,r7
 4008590:	e0800117 	ldw	r2,4(fp)
 4008594:	e17ffc05 	stb	r5,-16(fp)
 4008598:	e13ffd05 	stb	r4,-12(fp)
 400859c:	e0fffe05 	stb	r3,-8(fp)
 40085a0:	e0bfff05 	stb	r2,-4(fp)
{
    _address.bytes[0] = first_octet;
 40085a4:	e0bffb17 	ldw	r2,-20(fp)
 40085a8:	e0fffc03 	ldbu	r3,-16(fp)
 40085ac:	10c00005 	stb	r3,0(r2)
    _address.bytes[1] = second_octet;
 40085b0:	e0bffb17 	ldw	r2,-20(fp)
 40085b4:	e0fffd03 	ldbu	r3,-12(fp)
 40085b8:	10c00045 	stb	r3,1(r2)
    _address.bytes[2] = third_octet;
 40085bc:	e0bffb17 	ldw	r2,-20(fp)
 40085c0:	e0fffe03 	ldbu	r3,-8(fp)
 40085c4:	10c00085 	stb	r3,2(r2)
    _address.bytes[3] = fourth_octet;
 40085c8:	e0bffb17 	ldw	r2,-20(fp)
 40085cc:	e0ffff03 	ldbu	r3,-4(fp)
 40085d0:	10c000c5 	stb	r3,3(r2)
}
 40085d4:	0001883a 	nop
 40085d8:	e037883a 	mov	sp,fp
 40085dc:	df000017 	ldw	fp,0(sp)
 40085e0:	dec00104 	addi	sp,sp,4
 40085e4:	f800283a 	ret

040085e8 <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
 40085e8:	defffd04 	addi	sp,sp,-12
 40085ec:	df000215 	stw	fp,8(sp)
 40085f0:	df000204 	addi	fp,sp,8
 40085f4:	e13ffe15 	stw	r4,-8(fp)
 40085f8:	e17fff15 	stw	r5,-4(fp)
{
    _address.dword = address;
 40085fc:	e0bffe17 	ldw	r2,-8(fp)
 4008600:	e0ffff17 	ldw	r3,-4(fp)
 4008604:	10c00015 	stw	r3,0(r2)
}
 4008608:	0001883a 	nop
 400860c:	e037883a 	mov	sp,fp
 4008610:	df000017 	ldw	fp,0(sp)
 4008614:	dec00104 	addi	sp,sp,4
 4008618:	f800283a 	ret

0400861c <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
 400861c:	defffc04 	addi	sp,sp,-16
 4008620:	dfc00315 	stw	ra,12(sp)
 4008624:	df000215 	stw	fp,8(sp)
 4008628:	df000204 	addi	fp,sp,8
 400862c:	e13ffe15 	stw	r4,-8(fp)
 4008630:	e17fff15 	stw	r5,-4(fp)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
 4008634:	e0bffe17 	ldw	r2,-8(fp)
 4008638:	01800104 	movi	r6,4
 400863c:	e17fff17 	ldw	r5,-4(fp)
 4008640:	1009883a 	mov	r4,r2
 4008644:	400c7680 	call	400c768 <memcpy>
}
 4008648:	0001883a 	nop
 400864c:	e037883a 	mov	sp,fp
 4008650:	dfc00117 	ldw	ra,4(sp)
 4008654:	df000017 	ldw	fp,0(sp)
 4008658:	dec00204 	addi	sp,sp,8
 400865c:	f800283a 	ret

04008660 <_ZN9IPAddress10fromStringEPKc>:

bool IPAddress::fromString(const char *address)
{
 4008660:	defffc04 	addi	sp,sp,-16
 4008664:	df000315 	stw	fp,12(sp)
 4008668:	df000304 	addi	fp,sp,12
 400866c:	e13ffe15 	stw	r4,-8(fp)
 4008670:	e17fff15 	stw	r5,-4(fp)
    uint16_t acc = 0; // Accumulator
 4008674:	e03ffd0d 	sth	zero,-12(fp)
    uint8_t dots = 0;
 4008678:	e03ffd85 	stb	zero,-10(fp)

    while (*address)
 400867c:	e0bfff17 	ldw	r2,-4(fp)
 4008680:	10800003 	ldbu	r2,0(r2)
 4008684:	10803fcc 	andi	r2,r2,255
 4008688:	1080201c 	xori	r2,r2,128
 400868c:	10bfe004 	addi	r2,r2,-128
 4008690:	10002d26 	beq	r2,zero,4008748 <_ZN9IPAddress10fromStringEPKc+0xe8>
    {
        char c = *address++;
 4008694:	e0bfff17 	ldw	r2,-4(fp)
 4008698:	10c00044 	addi	r3,r2,1
 400869c:	e0ffff15 	stw	r3,-4(fp)
 40086a0:	10800003 	ldbu	r2,0(r2)
 40086a4:	e0bffdc5 	stb	r2,-9(fp)
        if (c >= '0' && c <= '9')
 40086a8:	e0bffdc7 	ldb	r2,-9(fp)
 40086ac:	10800c10 	cmplti	r2,r2,48
 40086b0:	10000f1e 	bne	r2,zero,40086f0 <_ZN9IPAddress10fromStringEPKc+0x90>
 40086b4:	e0bffdc7 	ldb	r2,-9(fp)
 40086b8:	10800e88 	cmpgei	r2,r2,58
 40086bc:	10000c1e 	bne	r2,zero,40086f0 <_ZN9IPAddress10fromStringEPKc+0x90>
        {
            acc = acc * 10 + (c - '0');
 40086c0:	e0bffd0b 	ldhu	r2,-12(fp)
 40086c4:	108002a4 	muli	r2,r2,10
 40086c8:	1007883a 	mov	r3,r2
 40086cc:	e0bffdc7 	ldb	r2,-9(fp)
 40086d0:	1885883a 	add	r2,r3,r2
 40086d4:	10bff404 	addi	r2,r2,-48
 40086d8:	e0bffd0d 	sth	r2,-12(fp)
            if (acc > 255) {
 40086dc:	e0bffd0b 	ldhu	r2,-12(fp)
 40086e0:	10804030 	cmpltui	r2,r2,256
 40086e4:	1000171e 	bne	r2,zero,4008744 <_ZN9IPAddress10fromStringEPKc+0xe4>
                // Value out of [0..255] range
                return false;
 40086e8:	0005883a 	mov	r2,zero
 40086ec:	00002006 	br	4008770 <_ZN9IPAddress10fromStringEPKc+0x110>
            }
        }
        else if (c == '.')
 40086f0:	e0bffdc7 	ldb	r2,-9(fp)
 40086f4:	10800b98 	cmpnei	r2,r2,46
 40086f8:	1000101e 	bne	r2,zero,400873c <_ZN9IPAddress10fromStringEPKc+0xdc>
        {
            if (dots == 3) {
 40086fc:	e0bffd83 	ldbu	r2,-10(fp)
 4008700:	108000d8 	cmpnei	r2,r2,3
 4008704:	1000021e 	bne	r2,zero,4008710 <_ZN9IPAddress10fromStringEPKc+0xb0>
                // Too much dots (there must be 3 dots)
                return false;
 4008708:	0005883a 	mov	r2,zero
 400870c:	00001806 	br	4008770 <_ZN9IPAddress10fromStringEPKc+0x110>
            }
            _address.bytes[dots++] = acc;
 4008710:	e0bffd83 	ldbu	r2,-10(fp)
 4008714:	10c00044 	addi	r3,r2,1
 4008718:	e0fffd85 	stb	r3,-10(fp)
 400871c:	10803fcc 	andi	r2,r2,255
 4008720:	e0fffd0b 	ldhu	r3,-12(fp)
 4008724:	1809883a 	mov	r4,r3
 4008728:	e0fffe17 	ldw	r3,-8(fp)
 400872c:	1885883a 	add	r2,r3,r2
 4008730:	11000005 	stb	r4,0(r2)
            acc = 0;
 4008734:	e03ffd0d 	sth	zero,-12(fp)
 4008738:	003fd006 	br	400867c <__alt_data_end+0xfc00867c>
        }
        else
        {
            // Invalid char
            return false;
 400873c:	0005883a 	mov	r2,zero
 4008740:	00000b06 	br	4008770 <_ZN9IPAddress10fromStringEPKc+0x110>
bool IPAddress::fromString(const char *address)
{
    uint16_t acc = 0; // Accumulator
    uint8_t dots = 0;

    while (*address)
 4008744:	003fcd06 	br	400867c <__alt_data_end+0xfc00867c>
            // Invalid char
            return false;
        }
    }

    if (dots != 3) {
 4008748:	e0bffd83 	ldbu	r2,-10(fp)
 400874c:	108000e0 	cmpeqi	r2,r2,3
 4008750:	1000021e 	bne	r2,zero,400875c <_ZN9IPAddress10fromStringEPKc+0xfc>
        // Too few dots (there must be 3 dots)
        return false;
 4008754:	0005883a 	mov	r2,zero
 4008758:	00000506 	br	4008770 <_ZN9IPAddress10fromStringEPKc+0x110>
    }
    _address.bytes[3] = acc;
 400875c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008760:	1007883a 	mov	r3,r2
 4008764:	e0bffe17 	ldw	r2,-8(fp)
 4008768:	10c000c5 	stb	r3,3(r2)
    return true;
 400876c:	00800044 	movi	r2,1
}
 4008770:	e037883a 	mov	sp,fp
 4008774:	df000017 	ldw	fp,0(sp)
 4008778:	dec00104 	addi	sp,sp,4
 400877c:	f800283a 	ret

04008780 <_ZN9IPAddress5printEv>:

void IPAddress::print() {
 4008780:	defffc04 	addi	sp,sp,-16
 4008784:	dfc00315 	stw	ra,12(sp)
 4008788:	df000215 	stw	fp,8(sp)
 400878c:	df000204 	addi	fp,sp,8
 4008790:	e13fff15 	stw	r4,-4(fp)
	printf("%u.%u.%u.%u", _address.bytes[0], _address.bytes[1], _address.bytes[2], _address.bytes[3]);
 4008794:	e0bfff17 	ldw	r2,-4(fp)
 4008798:	10800003 	ldbu	r2,0(r2)
 400879c:	10c03fcc 	andi	r3,r2,255
 40087a0:	e0bfff17 	ldw	r2,-4(fp)
 40087a4:	10800043 	ldbu	r2,1(r2)
 40087a8:	11003fcc 	andi	r4,r2,255
 40087ac:	e0bfff17 	ldw	r2,-4(fp)
 40087b0:	10800083 	ldbu	r2,2(r2)
 40087b4:	11403fcc 	andi	r5,r2,255
 40087b8:	e0bfff17 	ldw	r2,-4(fp)
 40087bc:	108000c3 	ldbu	r2,3(r2)
 40087c0:	10803fcc 	andi	r2,r2,255
 40087c4:	d8800015 	stw	r2,0(sp)
 40087c8:	280f883a 	mov	r7,r5
 40087cc:	200d883a 	mov	r6,r4
 40087d0:	180b883a 	mov	r5,r3
 40087d4:	010100b4 	movhi	r4,1026
 40087d8:	213efc04 	addi	r4,r4,-1040
 40087dc:	400ca080 	call	400ca08 <printf>
}
 40087e0:	0001883a 	nop
 40087e4:	e037883a 	mov	sp,fp
 40087e8:	dfc00117 	ldw	ra,4(sp)
 40087ec:	df000017 	ldw	fp,0(sp)
 40087f0:	dec00204 	addi	sp,sp,8
 40087f4:	f800283a 	ret

040087f8 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
 40087f8:	defffc04 	addi	sp,sp,-16
 40087fc:	dfc00315 	stw	ra,12(sp)
 4008800:	df000215 	stw	fp,8(sp)
 4008804:	df000204 	addi	fp,sp,8
 4008808:	e13ffe15 	stw	r4,-8(fp)
 400880c:	e17fff15 	stw	r5,-4(fp)
    memcpy(_address.bytes, address, sizeof(_address.bytes));
 4008810:	e0bffe17 	ldw	r2,-8(fp)
 4008814:	01800104 	movi	r6,4
 4008818:	e17fff17 	ldw	r5,-4(fp)
 400881c:	1009883a 	mov	r4,r2
 4008820:	400c7680 	call	400c768 <memcpy>
    return *this;
 4008824:	e0bffe17 	ldw	r2,-8(fp)
}
 4008828:	e037883a 	mov	sp,fp
 400882c:	dfc00117 	ldw	ra,4(sp)
 4008830:	df000017 	ldw	fp,0(sp)
 4008834:	dec00204 	addi	sp,sp,8
 4008838:	f800283a 	ret

0400883c <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
 400883c:	defffd04 	addi	sp,sp,-12
 4008840:	df000215 	stw	fp,8(sp)
 4008844:	df000204 	addi	fp,sp,8
 4008848:	e13ffe15 	stw	r4,-8(fp)
 400884c:	e17fff15 	stw	r5,-4(fp)
    _address.dword = address;
 4008850:	e0bffe17 	ldw	r2,-8(fp)
 4008854:	e0ffff17 	ldw	r3,-4(fp)
 4008858:	10c00015 	stw	r3,0(r2)
    return *this;
 400885c:	e0bffe17 	ldw	r2,-8(fp)
}
 4008860:	e037883a 	mov	sp,fp
 4008864:	df000017 	ldw	fp,0(sp)
 4008868:	dec00104 	addi	sp,sp,4
 400886c:	f800283a 	ret

04008870 <_ZNK9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr) const
{
 4008870:	defffc04 	addi	sp,sp,-16
 4008874:	dfc00315 	stw	ra,12(sp)
 4008878:	df000215 	stw	fp,8(sp)
 400887c:	df000204 	addi	fp,sp,8
 4008880:	e13ffe15 	stw	r4,-8(fp)
 4008884:	e17fff15 	stw	r5,-4(fp)
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
 4008888:	e0bffe17 	ldw	r2,-8(fp)
 400888c:	01800104 	movi	r6,4
 4008890:	100b883a 	mov	r5,r2
 4008894:	e13fff17 	ldw	r4,-4(fp)
 4008898:	400c6ec0 	call	400c6ec <memcmp>
 400889c:	1005003a 	cmpeq	r2,r2,zero
}
 40088a0:	e037883a 	mov	sp,fp
 40088a4:	dfc00117 	ldw	ra,4(sp)
 40088a8:	df000017 	ldw	fp,0(sp)
 40088ac:	dec00204 	addi	sp,sp,8
 40088b0:	f800283a 	ret

040088b4 <_Z41__static_initialization_and_destruction_0ii>:
 40088b4:	defffb04 	addi	sp,sp,-20
 40088b8:	dfc00415 	stw	ra,16(sp)
 40088bc:	df000315 	stw	fp,12(sp)
 40088c0:	df000304 	addi	fp,sp,12
 40088c4:	e13ffe15 	stw	r4,-8(fp)
 40088c8:	e17fff15 	stw	r5,-4(fp)
 40088cc:	e0bffe17 	ldw	r2,-8(fp)
 40088d0:	10800058 	cmpnei	r2,r2,1
 40088d4:	1000091e 	bne	r2,zero,40088fc <_Z41__static_initialization_and_destruction_0ii+0x48>
 40088d8:	e0ffff17 	ldw	r3,-4(fp)
 40088dc:	00bfffd4 	movui	r2,65535
 40088e0:	1880061e 	bne	r3,r2,40088fc <_Z41__static_initialization_and_destruction_0ii+0x48>
 40088e4:	d8000015 	stw	zero,0(sp)
 40088e8:	000f883a 	mov	r7,zero
 40088ec:	000d883a 	mov	r6,zero
 40088f0:	000b883a 	mov	r5,zero
 40088f4:	d112de04 	addi	r4,gp,19320
 40088f8:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
 40088fc:	0001883a 	nop
 4008900:	e037883a 	mov	sp,fp
 4008904:	dfc00117 	ldw	ra,4(sp)
 4008908:	df000017 	ldw	fp,0(sp)
 400890c:	dec00204 	addi	sp,sp,8
 4008910:	f800283a 	ret

04008914 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
 4008914:	defffe04 	addi	sp,sp,-8
 4008918:	dfc00115 	stw	ra,4(sp)
 400891c:	df000015 	stw	fp,0(sp)
 4008920:	d839883a 	mov	fp,sp
 4008924:	017fffd4 	movui	r5,65535
 4008928:	01000044 	movi	r4,1
 400892c:	40088b40 	call	40088b4 <_Z41__static_initialization_and_destruction_0ii>
 4008930:	e037883a 	mov	sp,fp
 4008934:	dfc00117 	ldw	ra,4(sp)
 4008938:	df000017 	ldw	fp,0(sp)
 400893c:	dec00204 	addi	sp,sp,8
 4008940:	f800283a 	ret

04008944 <_ZN10W5100Class4initEv>:
  uint32_t W5100Class::ss_pin_mask;
#endif


uint8_t W5100Class::init(void)
{
 4008944:	defffd04 	addi	sp,sp,-12
 4008948:	dfc00215 	stw	ra,8(sp)
 400894c:	df000115 	stw	fp,4(sp)
 4008950:	df000104 	addi	fp,sp,4
	static bool initialized = false;
	uint8_t i;

	if (initialized) return 1;
 4008954:	d092e0c3 	ldbu	r2,19331(gp)
 4008958:	10803fcc 	andi	r2,r2,255
 400895c:	10000226 	beq	r2,zero,4008968 <_ZN10W5100Class4initEv+0x24>
 4008960:	00800044 	movi	r2,1
 4008964:	00004306 	br	4008a74 <_ZN10W5100Class4initEv+0x130>
	// reset pulse!  The CAT811 has a 240 ms typical pulse length, and
	// a 400 ms worst case maximum pulse length.  MAX811 has a worst
	// case maximum 560 ms pulse length.  This delay is meant to wait
	// until the reset pulse is ended.  If your hardware has a shorter
	// reset time, this can be edited or removed.
	usleep (560000);
 4008968:	01000274 	movhi	r4,9
 400896c:	2122e004 	addi	r4,r4,-29824
 4008970:	401cc880 	call	401cc88 <usleep>

	// Attempt W5200 detection first, because W5200 does not properly
	// reset its SPI state when CS goes high (inactive).  Communication
	// from detecting the other chips can leave the W5200 in a state
	// where it won't recover, unless given a reset pulse.
	if (isW5200()) {
 4008974:	4008bb40 	call	4008bb4 <_ZN10W5100Class7isW5200Ev>
 4008978:	10803fcc 	andi	r2,r2,255
 400897c:	1004c03a 	cmpne	r2,r2,zero
 4008980:	10803fcc 	andi	r2,r2,255
 4008984:	10002126 	beq	r2,zero,4008a0c <_ZN10W5100Class4initEv+0xc8>
		CH_BASE_MSB = 0x40;
 4008988:	00801004 	movi	r2,64
 400898c:	d092e045 	stb	r2,19329(gp)
#else
		SSIZE = 2048;
#endif
		SMASK = SSIZE - 1;
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
 4008990:	e03fff05 	stb	zero,-4(fp)
 4008994:	e0bfff03 	ldbu	r2,-4(fp)
 4008998:	10800228 	cmpgeui	r2,r2,8
 400899c:	10000c1e 	bne	r2,zero,40089d0 <_ZN10W5100Class4initEv+0x8c>
			writeSnRX_SIZE(i, SSIZE >> 10);
 40089a0:	e0bfff03 	ldbu	r2,-4(fp)
 40089a4:	01400084 	movi	r5,2
 40089a8:	1009883a 	mov	r4,r2
 40089ac:	40095280 	call	4009528 <_ZN10W5100Class14writeSnRX_SIZEEhh>
			writeSnTX_SIZE(i, SSIZE >> 10);
 40089b0:	e0bfff03 	ldbu	r2,-4(fp)
 40089b4:	01400084 	movi	r5,2
 40089b8:	1009883a 	mov	r4,r2
 40089bc:	40095780 	call	4009578 <_ZN10W5100Class14writeSnTX_SIZEEhh>
#else
		SSIZE = 2048;
#endif
		SMASK = SSIZE - 1;
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
 40089c0:	e0bfff03 	ldbu	r2,-4(fp)
 40089c4:	10800044 	addi	r2,r2,1
 40089c8:	e0bfff05 	stb	r2,-4(fp)
 40089cc:	003ff106 	br	4008994 <__alt_data_end+0xfc008994>
			writeSnRX_SIZE(i, SSIZE >> 10);
			writeSnTX_SIZE(i, SSIZE >> 10);
		}
		for (; i<8; i++) {
 40089d0:	e0bfff03 	ldbu	r2,-4(fp)
 40089d4:	10800228 	cmpgeui	r2,r2,8
 40089d8:	1000231e 	bne	r2,zero,4008a68 <_ZN10W5100Class4initEv+0x124>
			writeSnRX_SIZE(i, 0);
 40089dc:	e0bfff03 	ldbu	r2,-4(fp)
 40089e0:	000b883a 	mov	r5,zero
 40089e4:	1009883a 	mov	r4,r2
 40089e8:	40095280 	call	4009528 <_ZN10W5100Class14writeSnRX_SIZEEhh>
			writeSnTX_SIZE(i, 0);
 40089ec:	e0bfff03 	ldbu	r2,-4(fp)
 40089f0:	000b883a 	mov	r5,zero
 40089f4:	1009883a 	mov	r4,r2
 40089f8:	40095780 	call	4009578 <_ZN10W5100Class14writeSnTX_SIZEEhh>
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
			writeSnRX_SIZE(i, SSIZE >> 10);
			writeSnTX_SIZE(i, SSIZE >> 10);
		}
		for (; i<8; i++) {
 40089fc:	e0bfff03 	ldbu	r2,-4(fp)
 4008a00:	10800044 	addi	r2,r2,1
 4008a04:	e0bfff05 	stb	r2,-4(fp)
 4008a08:	003ff106 	br	40089d0 <__alt_data_end+0xfc0089d0>
			writeSnTX_SIZE(i, 0);
		}
	// Try W5500 next.  WIZnet finally seems to have implemented
	// SPI well with this chip.  It appears to be very resilient,
	// so try it after the fragile W5200
	} else if (isW5500()) {
 4008a0c:	4008c8c0 	call	4008c8c <_ZN10W5100Class7isW5500Ev>
 4008a10:	10803fcc 	andi	r2,r2,255
 4008a14:	1004c03a 	cmpne	r2,r2,zero
 4008a18:	10803fcc 	andi	r2,r2,255
 4008a1c:	10000326 	beq	r2,zero,4008a2c <_ZN10W5100Class4initEv+0xe8>
		CH_BASE_MSB = 0x10;
 4008a20:	00800404 	movi	r2,16
 4008a24:	d092e045 	stb	r2,19329(gp)
 4008a28:	00000f06 	br	4008a68 <_ZN10W5100Class4initEv+0x124>
	// Try W5100 last.  This simple chip uses fixed 4 byte frames
	// for every 8 bit access.  Terribly inefficient, but so simple
	// it recovers from "hearing" unsuccessful W5100 or W5200
	// communication.  W5100 is also the only chip without a VERSIONR
	// register for identification, so we check this last.
	} else if (isW5100()) {
 4008a2c:	4008afc0 	call	4008afc <_ZN10W5100Class7isW5100Ev>
 4008a30:	10803fcc 	andi	r2,r2,255
 4008a34:	1004c03a 	cmpne	r2,r2,zero
 4008a38:	10803fcc 	andi	r2,r2,255
 4008a3c:	10000726 	beq	r2,zero,4008a5c <_ZN10W5100Class4initEv+0x118>
		CH_BASE_MSB = 0x04;
 4008a40:	00800104 	movi	r2,4
 4008a44:	d092e045 	stb	r2,19329(gp)
		writeTMSR(0x55);
		writeRMSR(0x55);
#endif
		SMASK = SSIZE - 1;
#else
		writeTMSR(0x55);
 4008a48:	01001544 	movi	r4,85
 4008a4c:	40093ac0 	call	40093ac <_ZN10W5100Class9writeTMSREh>
		writeRMSR(0x55);
 4008a50:	01001544 	movi	r4,85
 4008a54:	400936c0 	call	400936c <_ZN10W5100Class9writeRMSREh>
 4008a58:	00000306 	br	4008a68 <_ZN10W5100Class4initEv+0x124>
	// No hardware seems to be present.  Or it could be a W5200
	// that's heard other SPI communication if its chip select
	// pin wasn't high when a SD card or other SPI chip was used.
	} else {
		//Serial.println("no chip :-(");
		chip = 0;
 4008a5c:	d012e005 	stb	zero,19328(gp)
		return 0; // no known chip is responding :-(
 4008a60:	0005883a 	mov	r2,zero
 4008a64:	00000306 	br	4008a74 <_ZN10W5100Class4initEv+0x130>
	}
	initialized = true;
 4008a68:	00800044 	movi	r2,1
 4008a6c:	d092e0c5 	stb	r2,19331(gp)
	return 1; // successful init
 4008a70:	00800044 	movi	r2,1
}
 4008a74:	e037883a 	mov	sp,fp
 4008a78:	dfc00117 	ldw	ra,4(sp)
 4008a7c:	df000017 	ldw	fp,0(sp)
 4008a80:	dec00204 	addi	sp,sp,8
 4008a84:	f800283a 	ret

04008a88 <_ZN10W5100Class9softResetEv>:

// Soft reset the WIZnet chip, by writing to its MR register reset bit
uint8_t W5100Class::softReset(void)
{
 4008a88:	defffd04 	addi	sp,sp,-12
 4008a8c:	dfc00215 	stw	ra,8(sp)
 4008a90:	df000115 	stw	fp,4(sp)
 4008a94:	df000104 	addi	fp,sp,4
	uint16_t count=0;
 4008a98:	e03fff0d 	sth	zero,-4(fp)

	//Serial.println("WIZnet soft reset");
	// write to reset bit
	writeMR(0x80);
 4008a9c:	01002004 	movi	r4,128
 4008aa0:	40093000 	call	4009300 <_ZN10W5100Class7writeMREh>
	// then wait for soft reset to complete
	do {
		uint8_t mr = readMR();
 4008aa4:	40093400 	call	4009340 <_ZN10W5100Class6readMREv>
 4008aa8:	e0bfff85 	stb	r2,-2(fp)
		//Serial.print("mr=");
		//Serial.println(mr, HEX);
		if (mr == 0) return 1;
 4008aac:	e0bfff83 	ldbu	r2,-2(fp)
 4008ab0:	1000021e 	bne	r2,zero,4008abc <_ZN10W5100Class9softResetEv+0x34>
 4008ab4:	00800044 	movi	r2,1
 4008ab8:	00000b06 	br	4008ae8 <_ZN10W5100Class9softResetEv+0x60>
		usleep (1000);
 4008abc:	0100fa04 	movi	r4,1000
 4008ac0:	401cc880 	call	401cc88 <usleep>

	//Serial.println("WIZnet soft reset");
	// write to reset bit
	writeMR(0x80);
	// then wait for soft reset to complete
	do {
 4008ac4:	e0bfff0b 	ldhu	r2,-4(fp)
 4008ac8:	10800044 	addi	r2,r2,1
 4008acc:	e0bfff0d 	sth	r2,-4(fp)
 4008ad0:	e0bfff0b 	ldhu	r2,-4(fp)
 4008ad4:	10800530 	cmpltui	r2,r2,20
 4008ad8:	10803fcc 	andi	r2,r2,255
 4008adc:	10000126 	beq	r2,zero,4008ae4 <_ZN10W5100Class9softResetEv+0x5c>
 4008ae0:	003ff006 	br	4008aa4 <__alt_data_end+0xfc008aa4>
		//Serial.print("mr=");
		//Serial.println(mr, HEX);
		if (mr == 0) return 1;
		usleep (1000);
	} while (++count < 20);
	return 0;
 4008ae4:	0005883a 	mov	r2,zero
}
 4008ae8:	e037883a 	mov	sp,fp
 4008aec:	dfc00117 	ldw	ra,4(sp)
 4008af0:	df000017 	ldw	fp,0(sp)
 4008af4:	dec00204 	addi	sp,sp,8
 4008af8:	f800283a 	ret

04008afc <_ZN10W5100Class7isW5100Ev>:

uint8_t W5100Class::isW5100(void)
{
 4008afc:	defffe04 	addi	sp,sp,-8
 4008b00:	dfc00115 	stw	ra,4(sp)
 4008b04:	df000015 	stw	fp,0(sp)
 4008b08:	d839883a 	mov	fp,sp
	chip = 51;
 4008b0c:	00800cc4 	movi	r2,51
 4008b10:	d092e005 	stb	r2,19328(gp)
	//Serial.println("w5100.cpp: detect W5100 chip");
	if (!softReset()) return 0;
 4008b14:	4008a880 	call	4008a88 <_ZN10W5100Class9softResetEv>
 4008b18:	10803fcc 	andi	r2,r2,255
 4008b1c:	1005003a 	cmpeq	r2,r2,zero
 4008b20:	10803fcc 	andi	r2,r2,255
 4008b24:	10000226 	beq	r2,zero,4008b30 <_ZN10W5100Class7isW5100Ev+0x34>
 4008b28:	0005883a 	mov	r2,zero
 4008b2c:	00001c06 	br	4008ba0 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x10);
 4008b30:	01000404 	movi	r4,16
 4008b34:	40093000 	call	4009300 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 4008b38:	40093400 	call	4009340 <_ZN10W5100Class6readMREv>
 4008b3c:	10803fcc 	andi	r2,r2,255
 4008b40:	10800418 	cmpnei	r2,r2,16
 4008b44:	10803fcc 	andi	r2,r2,255
 4008b48:	10000226 	beq	r2,zero,4008b54 <_ZN10W5100Class7isW5100Ev+0x58>
 4008b4c:	0005883a 	mov	r2,zero
 4008b50:	00001306 	br	4008ba0 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x12);
 4008b54:	01000484 	movi	r4,18
 4008b58:	40093000 	call	4009300 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x12) return 0;
 4008b5c:	40093400 	call	4009340 <_ZN10W5100Class6readMREv>
 4008b60:	10803fcc 	andi	r2,r2,255
 4008b64:	10800498 	cmpnei	r2,r2,18
 4008b68:	10803fcc 	andi	r2,r2,255
 4008b6c:	10000226 	beq	r2,zero,4008b78 <_ZN10W5100Class7isW5100Ev+0x7c>
 4008b70:	0005883a 	mov	r2,zero
 4008b74:	00000a06 	br	4008ba0 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x00);
 4008b78:	0009883a 	mov	r4,zero
 4008b7c:	40093000 	call	4009300 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 4008b80:	40093400 	call	4009340 <_ZN10W5100Class6readMREv>
 4008b84:	10803fcc 	andi	r2,r2,255
 4008b88:	1004c03a 	cmpne	r2,r2,zero
 4008b8c:	10803fcc 	andi	r2,r2,255
 4008b90:	10000226 	beq	r2,zero,4008b9c <_ZN10W5100Class7isW5100Ev+0xa0>
 4008b94:	0005883a 	mov	r2,zero
 4008b98:	00000106 	br	4008ba0 <_ZN10W5100Class7isW5100Ev+0xa4>
	//Serial.println("chip is W5100");
	return 1;
 4008b9c:	00800044 	movi	r2,1
}
 4008ba0:	e037883a 	mov	sp,fp
 4008ba4:	dfc00117 	ldw	ra,4(sp)
 4008ba8:	df000017 	ldw	fp,0(sp)
 4008bac:	dec00204 	addi	sp,sp,8
 4008bb0:	f800283a 	ret

04008bb4 <_ZN10W5100Class7isW5200Ev>:

uint8_t W5100Class::isW5200(void)
{
 4008bb4:	defffd04 	addi	sp,sp,-12
 4008bb8:	dfc00215 	stw	ra,8(sp)
 4008bbc:	df000115 	stw	fp,4(sp)
 4008bc0:	df000104 	addi	fp,sp,4
	chip = 52;
 4008bc4:	00800d04 	movi	r2,52
 4008bc8:	d092e005 	stb	r2,19328(gp)
	//Serial.println("w5100.cpp: detect W5200 chip");
	if (!softReset()) return 0;
 4008bcc:	4008a880 	call	4008a88 <_ZN10W5100Class9softResetEv>
 4008bd0:	10803fcc 	andi	r2,r2,255
 4008bd4:	1005003a 	cmpeq	r2,r2,zero
 4008bd8:	10803fcc 	andi	r2,r2,255
 4008bdc:	10000226 	beq	r2,zero,4008be8 <_ZN10W5100Class7isW5200Ev+0x34>
 4008be0:	0005883a 	mov	r2,zero
 4008be4:	00002406 	br	4008c78 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x08);
 4008be8:	01000204 	movi	r4,8
 4008bec:	40093000 	call	4009300 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x08) return 0;
 4008bf0:	40093400 	call	4009340 <_ZN10W5100Class6readMREv>
 4008bf4:	10803fcc 	andi	r2,r2,255
 4008bf8:	10800218 	cmpnei	r2,r2,8
 4008bfc:	10803fcc 	andi	r2,r2,255
 4008c00:	10000226 	beq	r2,zero,4008c0c <_ZN10W5100Class7isW5200Ev+0x58>
 4008c04:	0005883a 	mov	r2,zero
 4008c08:	00001b06 	br	4008c78 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x10);
 4008c0c:	01000404 	movi	r4,16
 4008c10:	40093000 	call	4009300 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 4008c14:	40093400 	call	4009340 <_ZN10W5100Class6readMREv>
 4008c18:	10803fcc 	andi	r2,r2,255
 4008c1c:	10800418 	cmpnei	r2,r2,16
 4008c20:	10803fcc 	andi	r2,r2,255
 4008c24:	10000226 	beq	r2,zero,4008c30 <_ZN10W5100Class7isW5200Ev+0x7c>
 4008c28:	0005883a 	mov	r2,zero
 4008c2c:	00001206 	br	4008c78 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x00);
 4008c30:	0009883a 	mov	r4,zero
 4008c34:	40093000 	call	4009300 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 4008c38:	40093400 	call	4009340 <_ZN10W5100Class6readMREv>
 4008c3c:	10803fcc 	andi	r2,r2,255
 4008c40:	1004c03a 	cmpne	r2,r2,zero
 4008c44:	10803fcc 	andi	r2,r2,255
 4008c48:	10000226 	beq	r2,zero,4008c54 <_ZN10W5100Class7isW5200Ev+0xa0>
 4008c4c:	0005883a 	mov	r2,zero
 4008c50:	00000906 	br	4008c78 <_ZN10W5100Class7isW5200Ev+0xc4>
	int ver = readVERSIONR_W5200();
 4008c54:	40093ec0 	call	40093ec <_ZN10W5100Class18readVERSIONR_W5200Ev>
 4008c58:	10803fcc 	andi	r2,r2,255
 4008c5c:	e0bfff15 	stw	r2,-4(fp)
	//Serial.print("version=");
	//Serial.println(ver);
	if (ver != 3) return 0;
 4008c60:	e0bfff17 	ldw	r2,-4(fp)
 4008c64:	108000e0 	cmpeqi	r2,r2,3
 4008c68:	1000021e 	bne	r2,zero,4008c74 <_ZN10W5100Class7isW5200Ev+0xc0>
 4008c6c:	0005883a 	mov	r2,zero
 4008c70:	00000106 	br	4008c78 <_ZN10W5100Class7isW5200Ev+0xc4>
	//Serial.println("chip is W5200");
	return 1;
 4008c74:	00800044 	movi	r2,1
}
 4008c78:	e037883a 	mov	sp,fp
 4008c7c:	dfc00117 	ldw	ra,4(sp)
 4008c80:	df000017 	ldw	fp,0(sp)
 4008c84:	dec00204 	addi	sp,sp,8
 4008c88:	f800283a 	ret

04008c8c <_ZN10W5100Class7isW5500Ev>:

uint8_t W5100Class::isW5500(void)
{
 4008c8c:	defffd04 	addi	sp,sp,-12
 4008c90:	dfc00215 	stw	ra,8(sp)
 4008c94:	df000115 	stw	fp,4(sp)
 4008c98:	df000104 	addi	fp,sp,4
	chip = 55;
 4008c9c:	00800dc4 	movi	r2,55
 4008ca0:	d092e005 	stb	r2,19328(gp)
	//Serial.println("w5100.cpp: detect W5500 chip");
	if (!softReset()) return 0;
 4008ca4:	4008a880 	call	4008a88 <_ZN10W5100Class9softResetEv>
 4008ca8:	10803fcc 	andi	r2,r2,255
 4008cac:	1005003a 	cmpeq	r2,r2,zero
 4008cb0:	10803fcc 	andi	r2,r2,255
 4008cb4:	10000226 	beq	r2,zero,4008cc0 <_ZN10W5100Class7isW5500Ev+0x34>
 4008cb8:	0005883a 	mov	r2,zero
 4008cbc:	00002406 	br	4008d50 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x08);
 4008cc0:	01000204 	movi	r4,8
 4008cc4:	40093000 	call	4009300 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x08) return 0;
 4008cc8:	40093400 	call	4009340 <_ZN10W5100Class6readMREv>
 4008ccc:	10803fcc 	andi	r2,r2,255
 4008cd0:	10800218 	cmpnei	r2,r2,8
 4008cd4:	10803fcc 	andi	r2,r2,255
 4008cd8:	10000226 	beq	r2,zero,4008ce4 <_ZN10W5100Class7isW5500Ev+0x58>
 4008cdc:	0005883a 	mov	r2,zero
 4008ce0:	00001b06 	br	4008d50 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x10);
 4008ce4:	01000404 	movi	r4,16
 4008ce8:	40093000 	call	4009300 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 4008cec:	40093400 	call	4009340 <_ZN10W5100Class6readMREv>
 4008cf0:	10803fcc 	andi	r2,r2,255
 4008cf4:	10800418 	cmpnei	r2,r2,16
 4008cf8:	10803fcc 	andi	r2,r2,255
 4008cfc:	10000226 	beq	r2,zero,4008d08 <_ZN10W5100Class7isW5500Ev+0x7c>
 4008d00:	0005883a 	mov	r2,zero
 4008d04:	00001206 	br	4008d50 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x00);
 4008d08:	0009883a 	mov	r4,zero
 4008d0c:	40093000 	call	4009300 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 4008d10:	40093400 	call	4009340 <_ZN10W5100Class6readMREv>
 4008d14:	10803fcc 	andi	r2,r2,255
 4008d18:	1004c03a 	cmpne	r2,r2,zero
 4008d1c:	10803fcc 	andi	r2,r2,255
 4008d20:	10000226 	beq	r2,zero,4008d2c <_ZN10W5100Class7isW5500Ev+0xa0>
 4008d24:	0005883a 	mov	r2,zero
 4008d28:	00000906 	br	4008d50 <_ZN10W5100Class7isW5500Ev+0xc4>
	int ver = readVERSIONR_W5500();
 4008d2c:	40094180 	call	4009418 <_ZN10W5100Class18readVERSIONR_W5500Ev>
 4008d30:	10803fcc 	andi	r2,r2,255
 4008d34:	e0bfff15 	stw	r2,-4(fp)
	//Serial.print("version=");
	//Serial.println(ver);
	if (ver != 4) return 0;
 4008d38:	e0bfff17 	ldw	r2,-4(fp)
 4008d3c:	10800120 	cmpeqi	r2,r2,4
 4008d40:	1000021e 	bne	r2,zero,4008d4c <_ZN10W5100Class7isW5500Ev+0xc0>
 4008d44:	0005883a 	mov	r2,zero
 4008d48:	00000106 	br	4008d50 <_ZN10W5100Class7isW5500Ev+0xc4>
	//Serial.println("chip is W5500");
	return 1;
 4008d4c:	00800044 	movi	r2,1
}
 4008d50:	e037883a 	mov	sp,fp
 4008d54:	dfc00117 	ldw	ra,4(sp)
 4008d58:	df000017 	ldw	fp,0(sp)
 4008d5c:	dec00204 	addi	sp,sp,8
 4008d60:	f800283a 	ret

04008d64 <_ZN10W5100Class13getLinkStatusEv>:

W5100Linkstatus W5100Class::getLinkStatus()
{
 4008d64:	defffd04 	addi	sp,sp,-12
 4008d68:	dfc00215 	stw	ra,8(sp)
 4008d6c:	df000115 	stw	fp,4(sp)
 4008d70:	df000104 	addi	fp,sp,4
	uint8_t phystatus;

	if (!init()) return UNKNOWN;
 4008d74:	40089440 	call	4008944 <_ZN10W5100Class4initEv>
 4008d78:	10803fcc 	andi	r2,r2,255
 4008d7c:	1005003a 	cmpeq	r2,r2,zero
 4008d80:	10803fcc 	andi	r2,r2,255
 4008d84:	10000226 	beq	r2,zero,4008d90 <_ZN10W5100Class13getLinkStatusEv+0x2c>
 4008d88:	0005883a 	mov	r2,zero
 4008d8c:	00001a06 	br	4008df8 <_ZN10W5100Class13getLinkStatusEv+0x94>
	switch (chip) {
 4008d90:	d092e003 	ldbu	r2,19328(gp)
 4008d94:	10803fcc 	andi	r2,r2,255
 4008d98:	10c00d20 	cmpeqi	r3,r2,52
 4008d9c:	1800031e 	bne	r3,zero,4008dac <_ZN10W5100Class13getLinkStatusEv+0x48>
 4008da0:	10800de0 	cmpeqi	r2,r2,55
 4008da4:	10000a1e 	bne	r2,zero,4008dd0 <_ZN10W5100Class13getLinkStatusEv+0x6c>
 4008da8:	00001206 	br	4008df4 <_ZN10W5100Class13getLinkStatusEv+0x90>
	  case 52:
		phystatus = readPSTATUS_W5200();
 4008dac:	40094440 	call	4009444 <_ZN10W5100Class17readPSTATUS_W5200Ev>
 4008db0:	e0bfff05 	stb	r2,-4(fp)
		if (phystatus & 0x20) return LINK_ON;
 4008db4:	e0bfff03 	ldbu	r2,-4(fp)
 4008db8:	1080080c 	andi	r2,r2,32
 4008dbc:	10000226 	beq	r2,zero,4008dc8 <_ZN10W5100Class13getLinkStatusEv+0x64>
 4008dc0:	00800044 	movi	r2,1
 4008dc4:	00000c06 	br	4008df8 <_ZN10W5100Class13getLinkStatusEv+0x94>
		return LINK_OFF;
 4008dc8:	00800084 	movi	r2,2
 4008dcc:	00000a06 	br	4008df8 <_ZN10W5100Class13getLinkStatusEv+0x94>
	  case 55:
		phystatus = readPHYCFGR_W5500();
 4008dd0:	40094700 	call	4009470 <_ZN10W5100Class17readPHYCFGR_W5500Ev>
 4008dd4:	e0bfff05 	stb	r2,-4(fp)
		if (phystatus & 0x01) return LINK_ON;
 4008dd8:	e0bfff03 	ldbu	r2,-4(fp)
 4008ddc:	1080004c 	andi	r2,r2,1
 4008de0:	10000226 	beq	r2,zero,4008dec <_ZN10W5100Class13getLinkStatusEv+0x88>
 4008de4:	00800044 	movi	r2,1
 4008de8:	00000306 	br	4008df8 <_ZN10W5100Class13getLinkStatusEv+0x94>
		return LINK_OFF;
 4008dec:	00800084 	movi	r2,2
 4008df0:	00000106 	br	4008df8 <_ZN10W5100Class13getLinkStatusEv+0x94>
	  default:
		return UNKNOWN;
 4008df4:	0005883a 	mov	r2,zero
	}
}
 4008df8:	e037883a 	mov	sp,fp
 4008dfc:	dfc00117 	ldw	ra,4(sp)
 4008e00:	df000017 	ldw	fp,0(sp)
 4008e04:	dec00204 	addi	sp,sp,8
 4008e08:	f800283a 	ret

04008e0c <_ZN10W5100Class5writeEtPKht>:

uint16_t W5100Class::write(uint16_t addr, const uint8_t *buf, uint16_t len)
{
 4008e0c:	deffeb04 	addi	sp,sp,-84
 4008e10:	dfc01415 	stw	ra,80(sp)
 4008e14:	df001315 	stw	fp,76(sp)
 4008e18:	df001304 	addi	fp,sp,76
 4008e1c:	2007883a 	mov	r3,r4
 4008e20:	e17ffe15 	stw	r5,-8(fp)
 4008e24:	3005883a 	mov	r2,r6
 4008e28:	e0fffd0d 	sth	r3,-12(fp)
 4008e2c:	e0bfff0d 	sth	r2,-4(fp)
	if(len > 50) printf("WARNING: W5100Class::write called with a buffer that's too big!\n");
 4008e30:	e0bfff0b 	ldhu	r2,-4(fp)
 4008e34:	10800cf0 	cmpltui	r2,r2,51
 4008e38:	1000031e 	bne	r2,zero,4008e48 <_ZN10W5100Class5writeEtPKht+0x3c>
 4008e3c:	010100b4 	movhi	r4,1026
 4008e40:	213eff04 	addi	r4,r4,-1028
 4008e44:	400cb240 	call	400cb24 <puts>

	// buffer holds command and data
	uint8_t cmd[50];

		if (addr < 0x100) {
 4008e48:	e0bffd0b 	ldhu	r2,-12(fp)
 4008e4c:	10804028 	cmpgeui	r2,r2,256
 4008e50:	1000061e 	bne	r2,zero,4008e6c <_ZN10W5100Class5writeEtPKht+0x60>
			// common registers 00nn
			cmd[0] = 0;
 4008e54:	e03ff045 	stb	zero,-63(fp)
			cmd[1] = addr & 0xFF;
 4008e58:	e0bffd0b 	ldhu	r2,-12(fp)
 4008e5c:	e0bff085 	stb	r2,-62(fp)
			cmd[2] = 0x04;
 4008e60:	00800104 	movi	r2,4
 4008e64:	e0bff0c5 	stb	r2,-61(fp)
 4008e68:	00002c06 	br	4008f1c <_ZN10W5100Class5writeEtPKht+0x110>
		} else if (addr < 0x8000) {
 4008e6c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008e70:	10bfffcc 	andi	r2,r2,65535
 4008e74:	10a0001c 	xori	r2,r2,32768
 4008e78:	10a00004 	addi	r2,r2,-32768
 4008e7c:	10000b16 	blt	r2,zero,4008eac <_ZN10W5100Class5writeEtPKht+0xa0>
			// socket registers  10nn, 11nn, 12nn, 13nn, etc
			cmd[0] = 0;
 4008e80:	e03ff045 	stb	zero,-63(fp)
			cmd[1] = addr & 0xFF;
 4008e84:	e0bffd0b 	ldhu	r2,-12(fp)
 4008e88:	e0bff085 	stb	r2,-62(fp)
			cmd[2] = ((addr >> 3) & 0xE0) | 0x0C;
 4008e8c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008e90:	1005d0fa 	srai	r2,r2,3
 4008e94:	1007883a 	mov	r3,r2
 4008e98:	00bff804 	movi	r2,-32
 4008e9c:	1884703a 	and	r2,r3,r2
 4008ea0:	10800314 	ori	r2,r2,12
 4008ea4:	e0bff0c5 	stb	r2,-61(fp)
 4008ea8:	00001c06 	br	4008f1c <_ZN10W5100Class5writeEtPKht+0x110>
		} else if (addr < 0xC000) {
 4008eac:	e0bffd0b 	ldhu	r2,-12(fp)
 4008eb0:	10b00028 	cmpgeui	r2,r2,49152
 4008eb4:	10000d1e 	bne	r2,zero,4008eec <_ZN10W5100Class5writeEtPKht+0xe0>
			// transmit buffers  8000-87FF, 8800-8FFF, 9000-97FF, etc
			//  10## #nnn nnnn nnnn
			cmd[0] = addr >> 8;
 4008eb8:	e0bffd0b 	ldhu	r2,-12(fp)
 4008ebc:	1005d23a 	srai	r2,r2,8
 4008ec0:	e0bff045 	stb	r2,-63(fp)
			cmd[1] = addr & 0xFF;
 4008ec4:	e0bffd0b 	ldhu	r2,-12(fp)
 4008ec8:	e0bff085 	stb	r2,-62(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x14; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x14; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x14; // 2K buffers
 4008ecc:	e0bffd0b 	ldhu	r2,-12(fp)
 4008ed0:	1005d1ba 	srai	r2,r2,6
 4008ed4:	1007883a 	mov	r3,r2
 4008ed8:	00bff804 	movi	r2,-32
 4008edc:	1884703a 	and	r2,r3,r2
 4008ee0:	10800514 	ori	r2,r2,20
 4008ee4:	e0bff0c5 	stb	r2,-61(fp)
 4008ee8:	00000c06 	br	4008f1c <_ZN10W5100Class5writeEtPKht+0x110>
			#endif
		} else {
			// receive buffers
			cmd[0] = addr >> 8;
 4008eec:	e0bffd0b 	ldhu	r2,-12(fp)
 4008ef0:	1005d23a 	srai	r2,r2,8
 4008ef4:	e0bff045 	stb	r2,-63(fp)
			cmd[1] = addr & 0xFF;
 4008ef8:	e0bffd0b 	ldhu	r2,-12(fp)
 4008efc:	e0bff085 	stb	r2,-62(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x1C; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x1C; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x1C; // 2K buffers
 4008f00:	e0bffd0b 	ldhu	r2,-12(fp)
 4008f04:	1005d1ba 	srai	r2,r2,6
 4008f08:	1007883a 	mov	r3,r2
 4008f0c:	00bff804 	movi	r2,-32
 4008f10:	1884703a 	and	r2,r3,r2
 4008f14:	10800714 	ori	r2,r2,28
 4008f18:	e0bff0c5 	stb	r2,-61(fp)
			#endif
		}
		for (uint8_t i=0; i < len; i++) {
 4008f1c:	e03ff005 	stb	zero,-64(fp)
 4008f20:	e0bff003 	ldbu	r2,-64(fp)
 4008f24:	10ffffcc 	andi	r3,r2,65535
 4008f28:	e0bfff0b 	ldhu	r2,-4(fp)
 4008f2c:	18800d2e 	bgeu	r3,r2,4008f64 <_ZN10W5100Class5writeEtPKht+0x158>
			cmd[i + 3] = buf[i];
 4008f30:	e0bff003 	ldbu	r2,-64(fp)
 4008f34:	108000c4 	addi	r2,r2,3
 4008f38:	e0fff003 	ldbu	r3,-64(fp)
 4008f3c:	e13ffe17 	ldw	r4,-8(fp)
 4008f40:	20c7883a 	add	r3,r4,r3
 4008f44:	18c00003 	ldbu	r3,0(r3)
 4008f48:	e13ff044 	addi	r4,fp,-63
 4008f4c:	2085883a 	add	r2,r4,r2
 4008f50:	10c00005 	stb	r3,0(r2)
			cmd[2] = ((addr >> 7) & 0x60) | 0x1C; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x1C; // 2K buffers
			#endif
		}
		for (uint8_t i=0; i < len; i++) {
 4008f54:	e0bff003 	ldbu	r2,-64(fp)
 4008f58:	10800044 	addi	r2,r2,1
 4008f5c:	e0bff005 	stb	r2,-64(fp)
 4008f60:	003fef06 	br	4008f20 <__alt_data_end+0xfc008f20>
			cmd[i + 3] = buf[i];
		}
		alt_avalon_spi_command(
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			len+3, cmd,            // Write length, write data pointer
 4008f64:	e0bfff0b 	ldhu	r2,-4(fp)
 4008f68:	108000c4 	addi	r2,r2,3
			#endif
		}
		for (uint8_t i=0; i < len; i++) {
			cmd[i + 3] = buf[i];
		}
		alt_avalon_spi_command(
 4008f6c:	1007883a 	mov	r3,r2
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			len+3, cmd,            // Write length, write data pointer
			0, NULL,       // Read data, read buffer pointer
			0                   // Flags
		);
 4008f70:	e0bff044 	addi	r2,fp,-63
 4008f74:	d8000215 	stw	zero,8(sp)
 4008f78:	d8000115 	stw	zero,4(sp)
 4008f7c:	d8000015 	stw	zero,0(sp)
 4008f80:	100f883a 	mov	r7,r2
 4008f84:	180d883a 	mov	r6,r3
 4008f88:	000b883a 	mov	r5,zero
 4008f8c:	01020034 	movhi	r4,2048
 4008f90:	21142804 	addi	r4,r4,20640
 4008f94:	401d9280 	call	401d928 <alt_avalon_spi_command>
	return len;
 4008f98:	e0bfff0b 	ldhu	r2,-4(fp)
}
 4008f9c:	e037883a 	mov	sp,fp
 4008fa0:	dfc00117 	ldw	ra,4(sp)
 4008fa4:	df000017 	ldw	fp,0(sp)
 4008fa8:	dec00204 	addi	sp,sp,8
 4008fac:	f800283a 	ret

04008fb0 <_ZN10W5100Class4readEtPht>:

uint16_t W5100Class::read(uint16_t addr, uint8_t *buf, uint16_t len)
{
 4008fb0:	defff604 	addi	sp,sp,-40
 4008fb4:	dfc00915 	stw	ra,36(sp)
 4008fb8:	df000815 	stw	fp,32(sp)
 4008fbc:	df000804 	addi	fp,sp,32
 4008fc0:	2007883a 	mov	r3,r4
 4008fc4:	e17ffe15 	stw	r5,-8(fp)
 4008fc8:	3005883a 	mov	r2,r6
 4008fcc:	e0fffd0d 	sth	r3,-12(fp)
 4008fd0:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t cmd[4];

	// TODO test W5100 and 5200 support
	// this function is completely untested for those chips
	if (chip == 51) {
 4008fd4:	d092e003 	ldbu	r2,19328(gp)
 4008fd8:	10803fcc 	andi	r2,r2,255
 4008fdc:	10800cd8 	cmpnei	r2,r2,51
 4008fe0:	1000211e 	bne	r2,zero,4009068 <_ZN10W5100Class4readEtPht+0xb8>
		// WARNING: COMPLETELY UNTESTED
		for (uint16_t i=0; i < len; i++) {
 4008fe4:	e03ffb0d 	sth	zero,-20(fp)
 4008fe8:	e0fffb0b 	ldhu	r3,-20(fp)
 4008fec:	e0bfff0b 	ldhu	r2,-4(fp)
 4008ff0:	18807e2e 	bgeu	r3,r2,40091ec <_ZN10W5100Class4readEtPht+0x23c>
//			#if 1
			cmd[0] = 0x0F;
 4008ff4:	008003c4 	movi	r2,15
 4008ff8:	e0bffb85 	stb	r2,-18(fp)
			cmd[1] = addr >> 8;
 4008ffc:	e0bffd0b 	ldhu	r2,-12(fp)
 4009000:	1005d23a 	srai	r2,r2,8
 4009004:	e0bffbc5 	stb	r2,-17(fp)
			cmd[2] = addr & 0xFF;
 4009008:	e0bffd0b 	ldhu	r2,-12(fp)
 400900c:	e0bffc05 	stb	r2,-16(fp)

			alt_avalon_spi_command(
 4009010:	e0bffb0b 	ldhu	r2,-20(fp)
 4009014:	e0fffe17 	ldw	r3,-8(fp)
 4009018:	1885883a 	add	r2,r3,r2
				SPI_0_BASE, 0,      // SPI_0 base address, slave address
				3, cmd,            // Write length, write data pointer
				1, buf + i,       // Read data, read buffer pointer
				ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N      // Flags (toggle slave select each time...? that's what the old driver did)
			);
 400901c:	e13ffb84 	addi	r4,fp,-18
 4009020:	00c00084 	movi	r3,2
 4009024:	d8c00215 	stw	r3,8(sp)
 4009028:	d8800115 	stw	r2,4(sp)
 400902c:	00800044 	movi	r2,1
 4009030:	d8800015 	stw	r2,0(sp)
 4009034:	200f883a 	mov	r7,r4
 4009038:	018000c4 	movi	r6,3
 400903c:	000b883a 	mov	r5,zero
 4009040:	01020034 	movhi	r4,2048
 4009044:	21142804 	addi	r4,r4,20640
 4009048:	401d9280 	call	401d928 <alt_avalon_spi_command>
			addr++;
 400904c:	e0bffd0b 	ldhu	r2,-12(fp)
 4009050:	10800044 	addi	r2,r2,1
 4009054:	e0bffd0d 	sth	r2,-12(fp)

	// TODO test W5100 and 5200 support
	// this function is completely untested for those chips
	if (chip == 51) {
		// WARNING: COMPLETELY UNTESTED
		for (uint16_t i=0; i < len; i++) {
 4009058:	e0bffb0b 	ldhu	r2,-20(fp)
 400905c:	10800044 	addi	r2,r2,1
 4009060:	e0bffb0d 	sth	r2,-20(fp)
 4009064:	003fe006 	br	4008fe8 <__alt_data_end+0xfc008fe8>
//			SPI.transfer(cmd, 4); // TODO: why doesn't this work?
//			buf[i] = cmd[3];
//			addr++;
//			#endif
		}
	} else if (chip == 52) {
 4009068:	d092e003 	ldbu	r2,19328(gp)
 400906c:	10803fcc 	andi	r2,r2,255
 4009070:	10800d18 	cmpnei	r2,r2,52
 4009074:	10001d1e 	bne	r2,zero,40090ec <_ZN10W5100Class4readEtPht+0x13c>
		// WARNING: COMPLETELY UNTESTED
		memset(buf, 0, len);
 4009078:	e0bfff0b 	ldhu	r2,-4(fp)
 400907c:	100d883a 	mov	r6,r2
 4009080:	000b883a 	mov	r5,zero
 4009084:	e13ffe17 	ldw	r4,-8(fp)
 4009088:	400c8b00 	call	400c8b0 <memset>

		cmd[0] = addr >> 8;
 400908c:	e0bffd0b 	ldhu	r2,-12(fp)
 4009090:	1005d23a 	srai	r2,r2,8
 4009094:	e0bffb85 	stb	r2,-18(fp)
		cmd[1] = addr & 0xFF;
 4009098:	e0bffd0b 	ldhu	r2,-12(fp)
 400909c:	e0bffbc5 	stb	r2,-17(fp)
		cmd[2] = (len >> 8) & 0x7F;
 40090a0:	e0bfff0b 	ldhu	r2,-4(fp)
 40090a4:	1005d23a 	srai	r2,r2,8
 40090a8:	10801fcc 	andi	r2,r2,127
 40090ac:	e0bffc05 	stb	r2,-16(fp)
		cmd[3] = len & 0xFF;
 40090b0:	e0bfff0b 	ldhu	r2,-4(fp)
 40090b4:	e0bffc45 	stb	r2,-15(fp)
		alt_avalon_spi_command(
 40090b8:	e0bfff0b 	ldhu	r2,-4(fp)
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			4, cmd,            // Write length, write data pointer
			len, buf,       // Read data, read buffer pointer
			0                   // Flags
		);
 40090bc:	e13ffb84 	addi	r4,fp,-18
 40090c0:	d8000215 	stw	zero,8(sp)
 40090c4:	e0fffe17 	ldw	r3,-8(fp)
 40090c8:	d8c00115 	stw	r3,4(sp)
 40090cc:	d8800015 	stw	r2,0(sp)
 40090d0:	200f883a 	mov	r7,r4
 40090d4:	01800104 	movi	r6,4
 40090d8:	000b883a 	mov	r5,zero
 40090dc:	01020034 	movhi	r4,2048
 40090e0:	21142804 	addi	r4,r4,20640
 40090e4:	401d9280 	call	401d928 <alt_avalon_spi_command>
 40090e8:	00004006 	br	40091ec <_ZN10W5100Class4readEtPht+0x23c>
	} else { // chip == 55
		if (addr < 0x100) {
 40090ec:	e0bffd0b 	ldhu	r2,-12(fp)
 40090f0:	10804028 	cmpgeui	r2,r2,256
 40090f4:	1000051e 	bne	r2,zero,400910c <_ZN10W5100Class4readEtPht+0x15c>
			// common registers 00nn
			cmd[0] = 0;
 40090f8:	e03ffb85 	stb	zero,-18(fp)
			cmd[1] = addr & 0xFF;
 40090fc:	e0bffd0b 	ldhu	r2,-12(fp)
 4009100:	e0bffbc5 	stb	r2,-17(fp)
			cmd[2] = 0x00;
 4009104:	e03ffc05 	stb	zero,-16(fp)
 4009108:	00002c06 	br	40091bc <_ZN10W5100Class4readEtPht+0x20c>
		} else if (addr < 0x8000) {
 400910c:	e0bffd0b 	ldhu	r2,-12(fp)
 4009110:	10bfffcc 	andi	r2,r2,65535
 4009114:	10a0001c 	xori	r2,r2,32768
 4009118:	10a00004 	addi	r2,r2,-32768
 400911c:	10000b16 	blt	r2,zero,400914c <_ZN10W5100Class4readEtPht+0x19c>
			// socket registers  10nn, 11nn, 12nn, 13nn, etc
			cmd[0] = 0;
 4009120:	e03ffb85 	stb	zero,-18(fp)
			cmd[1] = addr & 0xFF;
 4009124:	e0bffd0b 	ldhu	r2,-12(fp)
 4009128:	e0bffbc5 	stb	r2,-17(fp)
			cmd[2] = ((addr >> 3) & 0xE0) | 0x08;
 400912c:	e0bffd0b 	ldhu	r2,-12(fp)
 4009130:	1005d0fa 	srai	r2,r2,3
 4009134:	1007883a 	mov	r3,r2
 4009138:	00bff804 	movi	r2,-32
 400913c:	1884703a 	and	r2,r3,r2
 4009140:	10800214 	ori	r2,r2,8
 4009144:	e0bffc05 	stb	r2,-16(fp)
 4009148:	00001c06 	br	40091bc <_ZN10W5100Class4readEtPht+0x20c>
		} else if (addr < 0xC000) {
 400914c:	e0bffd0b 	ldhu	r2,-12(fp)
 4009150:	10b00028 	cmpgeui	r2,r2,49152
 4009154:	10000d1e 	bne	r2,zero,400918c <_ZN10W5100Class4readEtPht+0x1dc>
			// transmit buffers  8000-87FF, 8800-8FFF, 9000-97FF, etc
			//  10## #nnn nnnn nnnn
			cmd[0] = addr >> 8;
 4009158:	e0bffd0b 	ldhu	r2,-12(fp)
 400915c:	1005d23a 	srai	r2,r2,8
 4009160:	e0bffb85 	stb	r2,-18(fp)
			cmd[1] = addr & 0xFF;
 4009164:	e0bffd0b 	ldhu	r2,-12(fp)
 4009168:	e0bffbc5 	stb	r2,-17(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x10; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x10; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x10; // 2K buffers
 400916c:	e0bffd0b 	ldhu	r2,-12(fp)
 4009170:	1005d1ba 	srai	r2,r2,6
 4009174:	1007883a 	mov	r3,r2
 4009178:	00bff804 	movi	r2,-32
 400917c:	1884703a 	and	r2,r3,r2
 4009180:	10800414 	ori	r2,r2,16
 4009184:	e0bffc05 	stb	r2,-16(fp)
 4009188:	00000c06 	br	40091bc <_ZN10W5100Class4readEtPht+0x20c>
			#endif
		} else {
			// receive buffers
			cmd[0] = addr >> 8;
 400918c:	e0bffd0b 	ldhu	r2,-12(fp)
 4009190:	1005d23a 	srai	r2,r2,8
 4009194:	e0bffb85 	stb	r2,-18(fp)
			cmd[1] = addr & 0xFF;
 4009198:	e0bffd0b 	ldhu	r2,-12(fp)
 400919c:	e0bffbc5 	stb	r2,-17(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x18; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x18; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x18; // 2K buffers
 40091a0:	e0bffd0b 	ldhu	r2,-12(fp)
 40091a4:	1005d1ba 	srai	r2,r2,6
 40091a8:	1007883a 	mov	r3,r2
 40091ac:	00bff804 	movi	r2,-32
 40091b0:	1884703a 	and	r2,r3,r2
 40091b4:	10800614 	ori	r2,r2,24
 40091b8:	e0bffc05 	stb	r2,-16(fp)
			#endif
		}

		alt_avalon_spi_command(
 40091bc:	e0bfff0b 	ldhu	r2,-4(fp)
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			3, cmd,            // Write length, write data pointer
			len, buf,       // Read data, read buffer pointer
			0                   // Flags
		);
 40091c0:	e13ffb84 	addi	r4,fp,-18
 40091c4:	d8000215 	stw	zero,8(sp)
 40091c8:	e0fffe17 	ldw	r3,-8(fp)
 40091cc:	d8c00115 	stw	r3,4(sp)
 40091d0:	d8800015 	stw	r2,0(sp)
 40091d4:	200f883a 	mov	r7,r4
 40091d8:	018000c4 	movi	r6,3
 40091dc:	000b883a 	mov	r5,zero
 40091e0:	01020034 	movhi	r4,2048
 40091e4:	21142804 	addi	r4,r4,20640
 40091e8:	401d9280 	call	401d928 <alt_avalon_spi_command>
	}
	return len;
 40091ec:	e0bfff0b 	ldhu	r2,-4(fp)
}
 40091f0:	e037883a 	mov	sp,fp
 40091f4:	dfc00117 	ldw	ra,4(sp)
 40091f8:	df000017 	ldw	fp,0(sp)
 40091fc:	dec00204 	addi	sp,sp,8
 4009200:	f800283a 	ret

04009204 <_ZN10W5100Class9execCmdSnEh7SockCMD>:

void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd)
{
 4009204:	defffc04 	addi	sp,sp,-16
 4009208:	dfc00315 	stw	ra,12(sp)
 400920c:	df000215 	stw	fp,8(sp)
 4009210:	df000204 	addi	fp,sp,8
 4009214:	2005883a 	mov	r2,r4
 4009218:	e17fff15 	stw	r5,-4(fp)
 400921c:	e0bffe05 	stb	r2,-8(fp)
	// Send command to socket
	writeSnCR(s, _cmd);
 4009220:	e0fffe03 	ldbu	r3,-8(fp)
 4009224:	e0bfff17 	ldw	r2,-4(fp)
 4009228:	10803fcc 	andi	r2,r2,255
 400922c:	100b883a 	mov	r5,r2
 4009230:	1809883a 	mov	r4,r3
 4009234:	400949c0 	call	400949c <_ZN10W5100Class9writeSnCREhh>
	// Wait for command to complete
	while (readSnCR(s)) ;
 4009238:	e0bffe03 	ldbu	r2,-8(fp)
 400923c:	1009883a 	mov	r4,r2
 4009240:	40094ec0 	call	40094ec <_ZN10W5100Class8readSnCREh>
 4009244:	10803fcc 	andi	r2,r2,255
 4009248:	1004c03a 	cmpne	r2,r2,zero
 400924c:	10803fcc 	andi	r2,r2,255
 4009250:	10000126 	beq	r2,zero,4009258 <_ZN10W5100Class9execCmdSnEh7SockCMD+0x54>
 4009254:	003ff806 	br	4009238 <__alt_data_end+0xfc009238>
}
 4009258:	0001883a 	nop
 400925c:	e037883a 	mov	sp,fp
 4009260:	dfc00117 	ldw	ra,4(sp)
 4009264:	df000017 	ldw	fp,0(sp)
 4009268:	dec00204 	addi	sp,sp,8
 400926c:	f800283a 	ret

04009270 <_Z41__static_initialization_and_destruction_0ii>:
 4009270:	defffb04 	addi	sp,sp,-20
 4009274:	dfc00415 	stw	ra,16(sp)
 4009278:	df000315 	stw	fp,12(sp)
 400927c:	df000304 	addi	fp,sp,12
 4009280:	e13ffe15 	stw	r4,-8(fp)
 4009284:	e17fff15 	stw	r5,-4(fp)
 4009288:	e0bffe17 	ldw	r2,-8(fp)
 400928c:	10800058 	cmpnei	r2,r2,1
 4009290:	1000091e 	bne	r2,zero,40092b8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4009294:	e0ffff17 	ldw	r3,-4(fp)
 4009298:	00bfffd4 	movui	r2,65535
 400929c:	1880061e 	bne	r3,r2,40092b8 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 40092a0:	d8000015 	stw	zero,0(sp)
 40092a4:	000f883a 	mov	r7,zero
 40092a8:	000d883a 	mov	r6,zero
 40092ac:	000b883a 	mov	r5,zero
 40092b0:	d112df04 	addi	r4,gp,19324
 40092b4:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
 40092b8:	0001883a 	nop
 40092bc:	e037883a 	mov	sp,fp
 40092c0:	dfc00117 	ldw	ra,4(sp)
 40092c4:	df000017 	ldw	fp,0(sp)
 40092c8:	dec00204 	addi	sp,sp,8
 40092cc:	f800283a 	ret

040092d0 <_GLOBAL__sub_I__ZN10W5100Class4chipE>:
 40092d0:	defffe04 	addi	sp,sp,-8
 40092d4:	dfc00115 	stw	ra,4(sp)
 40092d8:	df000015 	stw	fp,0(sp)
 40092dc:	d839883a 	mov	fp,sp
 40092e0:	017fffd4 	movui	r5,65535
 40092e4:	01000044 	movi	r4,1
 40092e8:	40092700 	call	4009270 <_Z41__static_initialization_and_destruction_0ii>
 40092ec:	e037883a 	mov	sp,fp
 40092f0:	dfc00117 	ldw	ra,4(sp)
 40092f4:	df000017 	ldw	fp,0(sp)
 40092f8:	dec00204 	addi	sp,sp,8
 40092fc:	f800283a 	ret

04009300 <_ZN10W5100Class7writeMREh>:
    return read(address, _buff, size);            \
  }
  static W5100Linkstatus getLinkStatus();

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
 4009300:	defffd04 	addi	sp,sp,-12
 4009304:	dfc00215 	stw	ra,8(sp)
 4009308:	df000115 	stw	fp,4(sp)
 400930c:	df000104 	addi	fp,sp,4
 4009310:	2005883a 	mov	r2,r4
 4009314:	e0bfff05 	stb	r2,-4(fp)
 4009318:	e0bfff03 	ldbu	r2,-4(fp)
 400931c:	100b883a 	mov	r5,r2
 4009320:	0009883a 	mov	r4,zero
 4009324:	40047840 	call	4004784 <_ZN10W5100Class5writeEth>
 4009328:	0001883a 	nop
 400932c:	e037883a 	mov	sp,fp
 4009330:	dfc00117 	ldw	ra,4(sp)
 4009334:	df000017 	ldw	fp,0(sp)
 4009338:	dec00204 	addi	sp,sp,8
 400933c:	f800283a 	ret

04009340 <_ZN10W5100Class6readMREv>:
 4009340:	defffe04 	addi	sp,sp,-8
 4009344:	dfc00115 	stw	ra,4(sp)
 4009348:	df000015 	stw	fp,0(sp)
 400934c:	d839883a 	mov	fp,sp
 4009350:	0009883a 	mov	r4,zero
 4009354:	4007e380 	call	4007e38 <_ZN10W5100Class4readEt>
 4009358:	e037883a 	mov	sp,fp
 400935c:	dfc00117 	ldw	ra,4(sp)
 4009360:	df000017 	ldw	fp,0(sp)
 4009364:	dec00204 	addi	sp,sp,8
 4009368:	f800283a 	ret

0400936c <_ZN10W5100Class9writeRMSREh>:
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size (W5100 only)
 400936c:	defffd04 	addi	sp,sp,-12
 4009370:	dfc00215 	stw	ra,8(sp)
 4009374:	df000115 	stw	fp,4(sp)
 4009378:	df000104 	addi	fp,sp,4
 400937c:	2005883a 	mov	r2,r4
 4009380:	e0bfff05 	stb	r2,-4(fp)
 4009384:	e0bfff03 	ldbu	r2,-4(fp)
 4009388:	100b883a 	mov	r5,r2
 400938c:	01000684 	movi	r4,26
 4009390:	40047840 	call	4004784 <_ZN10W5100Class5writeEth>
 4009394:	0001883a 	nop
 4009398:	e037883a 	mov	sp,fp
 400939c:	dfc00117 	ldw	ra,4(sp)
 40093a0:	df000017 	ldw	fp,0(sp)
 40093a4:	dec00204 	addi	sp,sp,8
 40093a8:	f800283a 	ret

040093ac <_ZN10W5100Class9writeTMSREh>:
  __GP_REGISTER8 (TMSR,   0x001B);    // Transmit memory size (W5100 only)
 40093ac:	defffd04 	addi	sp,sp,-12
 40093b0:	dfc00215 	stw	ra,8(sp)
 40093b4:	df000115 	stw	fp,4(sp)
 40093b8:	df000104 	addi	fp,sp,4
 40093bc:	2005883a 	mov	r2,r4
 40093c0:	e0bfff05 	stb	r2,-4(fp)
 40093c4:	e0bfff03 	ldbu	r2,-4(fp)
 40093c8:	100b883a 	mov	r5,r2
 40093cc:	010006c4 	movi	r4,27
 40093d0:	40047840 	call	4004784 <_ZN10W5100Class5writeEth>
 40093d4:	0001883a 	nop
 40093d8:	e037883a 	mov	sp,fp
 40093dc:	dfc00117 	ldw	ra,4(sp)
 40093e0:	df000017 	ldw	fp,0(sp)
 40093e4:	dec00204 	addi	sp,sp,8
 40093e8:	f800283a 	ret

040093ec <_ZN10W5100Class18readVERSIONR_W5200Ev>:
  __GP_REGISTER8 (PATR,   0x001C);    // Authentication type address in PPPoE mode
  __GP_REGISTER8 (PTIMER, 0x0028);    // PPP LCP Request Timer
  __GP_REGISTER8 (PMAGIC, 0x0029);    // PPP LCP Magic Number
  __GP_REGISTER_N(UIPR,   0x002A, 4); // Unreachable IP address in UDP mode (W5100 only)
  __GP_REGISTER16(UPORT,  0x002E);    // Unreachable Port address in UDP mode (W5100 only)
  __GP_REGISTER8 (VERSIONR_W5200,0x001F);   // Chip Version Register (W5200 only)
 40093ec:	defffe04 	addi	sp,sp,-8
 40093f0:	dfc00115 	stw	ra,4(sp)
 40093f4:	df000015 	stw	fp,0(sp)
 40093f8:	d839883a 	mov	fp,sp
 40093fc:	010007c4 	movi	r4,31
 4009400:	4007e380 	call	4007e38 <_ZN10W5100Class4readEt>
 4009404:	e037883a 	mov	sp,fp
 4009408:	dfc00117 	ldw	ra,4(sp)
 400940c:	df000017 	ldw	fp,0(sp)
 4009410:	dec00204 	addi	sp,sp,8
 4009414:	f800283a 	ret

04009418 <_ZN10W5100Class18readVERSIONR_W5500Ev>:
  __GP_REGISTER8 (VERSIONR_W5500,0x0039);   // Chip Version Register (W5500 only)
 4009418:	defffe04 	addi	sp,sp,-8
 400941c:	dfc00115 	stw	ra,4(sp)
 4009420:	df000015 	stw	fp,0(sp)
 4009424:	d839883a 	mov	fp,sp
 4009428:	01000e44 	movi	r4,57
 400942c:	4007e380 	call	4007e38 <_ZN10W5100Class4readEt>
 4009430:	e037883a 	mov	sp,fp
 4009434:	dfc00117 	ldw	ra,4(sp)
 4009438:	df000017 	ldw	fp,0(sp)
 400943c:	dec00204 	addi	sp,sp,8
 4009440:	f800283a 	ret

04009444 <_ZN10W5100Class17readPSTATUS_W5200Ev>:
  __GP_REGISTER8 (PSTATUS_W5200,     0x0035);    // PHY Status
 4009444:	defffe04 	addi	sp,sp,-8
 4009448:	dfc00115 	stw	ra,4(sp)
 400944c:	df000015 	stw	fp,0(sp)
 4009450:	d839883a 	mov	fp,sp
 4009454:	01000d44 	movi	r4,53
 4009458:	4007e380 	call	4007e38 <_ZN10W5100Class4readEt>
 400945c:	e037883a 	mov	sp,fp
 4009460:	dfc00117 	ldw	ra,4(sp)
 4009464:	df000017 	ldw	fp,0(sp)
 4009468:	dec00204 	addi	sp,sp,8
 400946c:	f800283a 	ret

04009470 <_ZN10W5100Class17readPHYCFGR_W5500Ev>:
  __GP_REGISTER8 (PHYCFGR_W5500,     0x002E);    // PHY Configuration register, default: 10111xxx
 4009470:	defffe04 	addi	sp,sp,-8
 4009474:	dfc00115 	stw	ra,4(sp)
 4009478:	df000015 	stw	fp,0(sp)
 400947c:	d839883a 	mov	fp,sp
 4009480:	01000b84 	movi	r4,46
 4009484:	4007e380 	call	4007e38 <_ZN10W5100Class4readEt>
 4009488:	e037883a 	mov	sp,fp
 400948c:	dfc00117 	ldw	ra,4(sp)
 4009490:	df000017 	ldw	fp,0(sp)
 4009494:	dec00204 	addi	sp,sp,8
 4009498:	f800283a 	ret

0400949c <_ZN10W5100Class9writeSnCREhh>:
    return readSn(_s, address, _buff, size);                 \
  }

public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
 400949c:	defffc04 	addi	sp,sp,-16
 40094a0:	dfc00315 	stw	ra,12(sp)
 40094a4:	df000215 	stw	fp,8(sp)
 40094a8:	df000204 	addi	fp,sp,8
 40094ac:	2007883a 	mov	r3,r4
 40094b0:	2805883a 	mov	r2,r5
 40094b4:	e0fffe05 	stb	r3,-8(fp)
 40094b8:	e0bfff05 	stb	r2,-4(fp)
 40094bc:	e0bffe03 	ldbu	r2,-8(fp)
 40094c0:	e0ffff03 	ldbu	r3,-4(fp)
 40094c4:	180d883a 	mov	r6,r3
 40094c8:	01400044 	movi	r5,1
 40094cc:	1009883a 	mov	r4,r2
 40094d0:	4007edc0 	call	4007edc <_ZN10W5100Class7writeSnEhth>
 40094d4:	0001883a 	nop
 40094d8:	e037883a 	mov	sp,fp
 40094dc:	dfc00117 	ldw	ra,4(sp)
 40094e0:	df000017 	ldw	fp,0(sp)
 40094e4:	dec00204 	addi	sp,sp,8
 40094e8:	f800283a 	ret

040094ec <_ZN10W5100Class8readSnCREh>:
 40094ec:	defffd04 	addi	sp,sp,-12
 40094f0:	dfc00215 	stw	ra,8(sp)
 40094f4:	df000115 	stw	fp,4(sp)
 40094f8:	df000104 	addi	fp,sp,4
 40094fc:	2005883a 	mov	r2,r4
 4009500:	e0bfff05 	stb	r2,-4(fp)
 4009504:	e0bfff03 	ldbu	r2,-4(fp)
 4009508:	01400044 	movi	r5,1
 400950c:	1009883a 	mov	r4,r2
 4009510:	4007e7c0 	call	4007e7c <_ZN10W5100Class6readSnEht>
 4009514:	e037883a 	mov	sp,fp
 4009518:	dfc00117 	ldw	ra,4(sp)
 400951c:	df000017 	ldw	fp,0(sp)
 4009520:	dec00204 	addi	sp,sp,8
 4009524:	f800283a 	ret

04009528 <_ZN10W5100Class14writeSnRX_SIZEEhh>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER8(SnRX_SIZE,   0x001E)        // RX Memory Size (W5200 only)
 4009528:	defffc04 	addi	sp,sp,-16
 400952c:	dfc00315 	stw	ra,12(sp)
 4009530:	df000215 	stw	fp,8(sp)
 4009534:	df000204 	addi	fp,sp,8
 4009538:	2007883a 	mov	r3,r4
 400953c:	2805883a 	mov	r2,r5
 4009540:	e0fffe05 	stb	r3,-8(fp)
 4009544:	e0bfff05 	stb	r2,-4(fp)
 4009548:	e0bffe03 	ldbu	r2,-8(fp)
 400954c:	e0ffff03 	ldbu	r3,-4(fp)
 4009550:	180d883a 	mov	r6,r3
 4009554:	01400784 	movi	r5,30
 4009558:	1009883a 	mov	r4,r2
 400955c:	4007edc0 	call	4007edc <_ZN10W5100Class7writeSnEhth>
 4009560:	0001883a 	nop
 4009564:	e037883a 	mov	sp,fp
 4009568:	dfc00117 	ldw	ra,4(sp)
 400956c:	df000017 	ldw	fp,0(sp)
 4009570:	dec00204 	addi	sp,sp,8
 4009574:	f800283a 	ret

04009578 <_ZN10W5100Class14writeSnTX_SIZEEhh>:
  __SOCKET_REGISTER8(SnTX_SIZE,   0x001F)        // RX Memory Size (W5200 only)
 4009578:	defffc04 	addi	sp,sp,-16
 400957c:	dfc00315 	stw	ra,12(sp)
 4009580:	df000215 	stw	fp,8(sp)
 4009584:	df000204 	addi	fp,sp,8
 4009588:	2007883a 	mov	r3,r4
 400958c:	2805883a 	mov	r2,r5
 4009590:	e0fffe05 	stb	r3,-8(fp)
 4009594:	e0bfff05 	stb	r2,-4(fp)
 4009598:	e0bffe03 	ldbu	r2,-8(fp)
 400959c:	e0ffff03 	ldbu	r3,-4(fp)
 40095a0:	180d883a 	mov	r6,r3
 40095a4:	014007c4 	movi	r5,31
 40095a8:	1009883a 	mov	r4,r2
 40095ac:	4007edc0 	call	4007edc <_ZN10W5100Class7writeSnEhth>
 40095b0:	0001883a 	nop
 40095b4:	e037883a 	mov	sp,fp
 40095b8:	dfc00117 	ldw	ra,4(sp)
 40095bc:	df000017 	ldw	fp,0(sp)
 40095c0:	dec00204 	addi	sp,sp,8
 40095c4:	f800283a 	ret

040095c8 <main>:

// Enter a MAC address for your controller below.
// Newer Ethernet shields have a MAC address printed on a sticker on the shield
unsigned char mac[] = { 0xA8, 0x61, 0x0A, 0xAE, 0x74, 0xA6 };

int main() {
 40095c8:	def7f904 	addi	sp,sp,-8220
 40095cc:	dfc80615 	stw	ra,8216(sp)
 40095d0:	df080515 	stw	fp,8212(sp)
 40095d4:	ddc80415 	stw	r23,8208(sp)
 40095d8:	dd880315 	stw	r22,8204(sp)
 40095dc:	dd480215 	stw	r21,8200(sp)
 40095e0:	dd080115 	stw	r20,8196(sp)
 40095e4:	dcc80015 	stw	r19,8192(sp)
 40095e8:	dc87ff15 	stw	r18,8188(sp)
 40095ec:	dc47fe15 	stw	r17,8184(sp)
 40095f0:	dc07fd15 	stw	r16,8180(sp)
 40095f4:	df080504 	addi	fp,sp,8212
 40095f8:	00810074 	movhi	r2,1025
 40095fc:	10a8e804 	addi	r2,r2,-23648
 4009600:	e0bff015 	stw	r2,-64(fp)
 4009604:	008100b4 	movhi	r2,1026
 4009608:	10bbc484 	addi	r2,r2,-4334
 400960c:	e0bff115 	stw	r2,-60(fp)
 4009610:	e0bff204 	addi	r2,fp,-56
 4009614:	e0f7fc04 	addi	r3,fp,-8208
 4009618:	10c00015 	stw	r3,0(r2)
 400961c:	00c10074 	movhi	r3,1025
 4009620:	18e5de04 	addi	r3,r3,-26760
 4009624:	10c00115 	stw	r3,4(r2)
 4009628:	16c00215 	stw	sp,8(r2)
 400962c:	e0bfea04 	addi	r2,fp,-88
 4009630:	1009883a 	mov	r4,r2
 4009634:	400bb3c0 	call	400bb3c <_Unwind_SjLj_Register>
		init_color_palette();
 4009638:	00bfffc4 	movi	r2,-1
 400963c:	e0bfeb15 	stw	r2,-84(fp)
 4009640:	40003340 	call	4000334 <init_color_palette>
		draw_background();
 4009644:	40006000 	call	4000600 <draw_background>
		draw_sample();
 4009648:	4000e840 	call	4000e84 <draw_sample>

		DiscordClient discordClient;
 400964c:	e0b7ff04 	addi	r2,fp,-8196
 4009650:	1009883a 	mov	r4,r2
 4009654:	400100c0 	call	400100c <_ZN13DiscordClientC1Ev>
		while(1) {
			if(discordClient.fetchChannel("945536104629698631", 0)) {
 4009658:	e0f7ff04 	addi	r3,fp,-8196
 400965c:	000d883a 	mov	r6,zero
 4009660:	014100b4 	movhi	r5,1026
 4009664:	00800044 	movi	r2,1
 4009668:	e0bfeb15 	stw	r2,-84(fp)
 400966c:	297f0f04 	addi	r5,r5,-964
 4009670:	1809883a 	mov	r4,r3
 4009674:	40011900 	call	4001190 <_ZN13DiscordClient12fetchChannelEPKch>
 4009678:	10803fcc 	andi	r2,r2,255
 400967c:	103ff626 	beq	r2,zero,4009658 <__alt_data_end+0xfc009658>
				draw_rectangle(128, 32, 512, 240, 0);
 4009680:	d8000015 	stw	zero,0(sp)
 4009684:	01c03c04 	movi	r7,240
 4009688:	01808004 	movi	r6,512
 400968c:	01400804 	movi	r5,32
 4009690:	01002004 	movi	r4,128
 4009694:	40004000 	call	4000400 <draw_rectangle>
			    alt_u32 y = 226;
 4009698:	00803884 	movi	r2,226
 400969c:	e0b7fc15 	stw	r2,-8208(fp)
			    for(alt_u8 i=0; i<12; ++i) {
 40096a0:	e037fd05 	stb	zero,-8204(fp)
 40096a4:	e0b7fd03 	ldbu	r2,-8204(fp)
 40096a8:	10800328 	cmpgeui	r2,r2,12
 40096ac:	103fea1e 	bne	r2,zero,4009658 <__alt_data_end+0xfc009658>
			    	const MessageLine* line = discordClient.getLine(i);
 40096b0:	e137fd03 	ldbu	r4,-8204(fp)
 40096b4:	e0f7ff04 	addi	r3,fp,-8196
 40096b8:	00800044 	movi	r2,1
 40096bc:	e0bfeb15 	stw	r2,-84(fp)
 40096c0:	200b883a 	mov	r5,r4
 40096c4:	1809883a 	mov	r4,r3
 40096c8:	40018d40 	call	40018d4 <_ZN13DiscordClient7getLineEh>
 40096cc:	e0b7fe15 	stw	r2,-8200(fp)

			    	if(line->font == USERNAME) {
 40096d0:	e0b7fe17 	ldw	r2,-8200(fp)
 40096d4:	10800017 	ldw	r2,0(r2)
 40096d8:	10000f1e 	bne	r2,zero,4009718 <main+0x150>
				        // Draw the uname
				        draw_string(
 40096dc:	e0b7fc17 	ldw	r2,-8208(fp)
 40096e0:	10800044 	addi	r2,r2,1
 40096e4:	10c03fcc 	andi	r3,r2,255
 40096e8:	e0b7fe17 	ldw	r2,-8200(fp)
 40096ec:	10800104 	addi	r2,r2,4
				            MESSAGE_X_MARGIN,
				            y + UNAME_Y_MARGIN,
				            line->content,
				            &fonts[UNAME_FONT]
				        );
 40096f0:	01c100f4 	movhi	r7,1027
 40096f4:	39ec0d04 	addi	r7,r7,-20428
 40096f8:	100d883a 	mov	r6,r2
 40096fc:	180b883a 	mov	r5,r3
 4009700:	01002504 	movi	r4,148
 4009704:	400087c0 	call	400087c <draw_string>
				        y -= 16;
 4009708:	e0b7fc17 	ldw	r2,-8208(fp)
 400970c:	10bffc04 	addi	r2,r2,-16
 4009710:	e0b7fc15 	stw	r2,-8208(fp)
 4009714:	00001406 	br	4009768 <main+0x1a0>
			    	} else if (line->font == MESSAGE) {
 4009718:	e0b7fe17 	ldw	r2,-8200(fp)
 400971c:	10800017 	ldw	r2,0(r2)
 4009720:	10800058 	cmpnei	r2,r2,1
 4009724:	1000101e 	bne	r2,zero,4009768 <main+0x1a0>
				        // Draw the message
				        draw_string(
 4009728:	e0b7fc17 	ldw	r2,-8208(fp)
 400972c:	10800044 	addi	r2,r2,1
 4009730:	10c03fcc 	andi	r3,r2,255
 4009734:	e0b7fe17 	ldw	r2,-8200(fp)
 4009738:	11000104 	addi	r4,r2,4
				            MESSAGE_X_MARGIN,
				            y + MESSAGE_Y_MARGIN,
							line->content,
				            &fonts[MESSAGE_FONT]
				        );
 400973c:	01c100f4 	movhi	r7,1027
 4009740:	00800044 	movi	r2,1
 4009744:	e0bfeb15 	stw	r2,-84(fp)
 4009748:	39ec1104 	addi	r7,r7,-20412
 400974c:	200d883a 	mov	r6,r4
 4009750:	180b883a 	mov	r5,r3
 4009754:	01002504 	movi	r4,148
 4009758:	400087c0 	call	400087c <draw_string>
				        y -= 16;
 400975c:	e0b7fc17 	ldw	r2,-8208(fp)
 4009760:	10bffc04 	addi	r2,r2,-16
 4009764:	e0b7fc15 	stw	r2,-8208(fp)
		DiscordClient discordClient;
		while(1) {
			if(discordClient.fetchChannel("945536104629698631", 0)) {
				draw_rectangle(128, 32, 512, 240, 0);
			    alt_u32 y = 226;
			    for(alt_u8 i=0; i<12; ++i) {
 4009768:	e0b7fd03 	ldbu	r2,-8204(fp)
 400976c:	10800044 	addi	r2,r2,1
 4009770:	e0b7fd05 	stb	r2,-8204(fp)
 4009774:	003fcb06 	br	40096a4 <__alt_data_end+0xfc0096a4>
 4009778:	e7080404 	addi	fp,fp,8208
 400977c:	e0bfec17 	ldw	r2,-80(fp)
 4009780:	e0bff715 	stw	r2,-36(fp)
int main() {
		init_color_palette();
		draw_background();
		draw_sample();

		DiscordClient discordClient;
 4009784:	e0b7ff04 	addi	r2,fp,-8196
 4009788:	e03feb15 	stw	zero,-84(fp)
 400978c:	1009883a 	mov	r4,r2
 4009790:	40011340 	call	4001134 <_ZN13DiscordClientD1Ev>
 4009794:	e0fff717 	ldw	r3,-36(fp)
 4009798:	00bfffc4 	movi	r2,-1
 400979c:	e0bfeb15 	stw	r2,-84(fp)
 40097a0:	1809883a 	mov	r4,r3
 40097a4:	400bd380 	call	400bd38 <_Unwind_SjLj_Resume>

040097a8 <_Z41__static_initialization_and_destruction_0ii>:
			    	}
			    }
			}
		}

}
 40097a8:	defffb04 	addi	sp,sp,-20
 40097ac:	dfc00415 	stw	ra,16(sp)
 40097b0:	df000315 	stw	fp,12(sp)
 40097b4:	df000304 	addi	fp,sp,12
 40097b8:	e13ffe15 	stw	r4,-8(fp)
 40097bc:	e17fff15 	stw	r5,-4(fp)
 40097c0:	e0bffe17 	ldw	r2,-8(fp)
 40097c4:	10800058 	cmpnei	r2,r2,1
 40097c8:	1000091e 	bne	r2,zero,40097f0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40097cc:	e0ffff17 	ldw	r3,-4(fp)
 40097d0:	00bfffd4 	movui	r2,65535
 40097d4:	1880061e 	bne	r3,r2,40097f0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40097d8:	d8000015 	stw	zero,0(sp)
 40097dc:	000f883a 	mov	r7,zero
 40097e0:	000d883a 	mov	r6,zero
 40097e4:	000b883a 	mov	r5,zero
 40097e8:	d112e104 	addi	r4,gp,19332
 40097ec:	40085780 	call	4008578 <_ZN9IPAddressC1Ehhhh>
 40097f0:	0001883a 	nop
 40097f4:	e037883a 	mov	sp,fp
 40097f8:	dfc00117 	ldw	ra,4(sp)
 40097fc:	df000017 	ldw	fp,0(sp)
 4009800:	dec00204 	addi	sp,sp,8
 4009804:	f800283a 	ret

04009808 <_GLOBAL__sub_I_mac>:
 4009808:	defffe04 	addi	sp,sp,-8
 400980c:	dfc00115 	stw	ra,4(sp)
 4009810:	df000015 	stw	fp,0(sp)
 4009814:	d839883a 	mov	fp,sp
 4009818:	017fffd4 	movui	r5,65535
 400981c:	01000044 	movi	r4,1
 4009820:	40097a80 	call	40097a8 <_Z41__static_initialization_and_destruction_0ii>
 4009824:	e037883a 	mov	sp,fp
 4009828:	dfc00117 	ldw	ra,4(sp)
 400982c:	df000017 	ldw	fp,0(sp)
 4009830:	dec00204 	addi	sp,sp,8
 4009834:	f800283a 	ret

04009838 <_Znwj>:
 4009838:	defffe04 	addi	sp,sp,-8
 400983c:	dc000015 	stw	r16,0(sp)
 4009840:	dfc00115 	stw	ra,4(sp)
 4009844:	2021883a 	mov	r16,r4
 4009848:	2000011e 	bne	r4,zero,4009850 <_Znwj+0x18>
 400984c:	04000044 	movi	r16,1
 4009850:	8009883a 	mov	r4,r16
 4009854:	400beb80 	call	400beb8 <malloc>
 4009858:	10000426 	beq	r2,zero,400986c <_Znwj+0x34>
 400985c:	dfc00117 	ldw	ra,4(sp)
 4009860:	dc000017 	ldw	r16,0(sp)
 4009864:	dec00204 	addi	sp,sp,8
 4009868:	f800283a 	ret
 400986c:	4009bdc0 	call	4009bdc <_ZSt15get_new_handlerv>
 4009870:	10000226 	beq	r2,zero,400987c <_Znwj+0x44>
 4009874:	103ee83a 	callr	r2
 4009878:	003ff506 	br	4009850 <__alt_data_end+0xfc009850>
 400987c:	01000104 	movi	r4,4
 4009880:	400b5300 	call	400b530 <__cxa_allocate_exception>
 4009884:	00c100b4 	movhi	r3,1026
 4009888:	01810074 	movhi	r6,1025
 400988c:	014100b4 	movhi	r5,1026
 4009890:	18ff4504 	addi	r3,r3,-748
 4009894:	31aaf704 	addi	r6,r6,-21540
 4009898:	297f4004 	addi	r5,r5,-768
 400989c:	1009883a 	mov	r4,r2
 40098a0:	10c00015 	stw	r3,0(r2)
 40098a4:	400ac680 	call	400ac68 <__cxa_throw>

040098a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 40098a8:	008100b4 	movhi	r2,1026
 40098ac:	10bf2304 	addi	r2,r2,-884
 40098b0:	20800015 	stw	r2,0(r4)
 40098b4:	400b0501 	jmpi	400b050 <_ZN10__cxxabiv117__class_type_infoD1Ev>

040098b8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 40098b8:	defffe04 	addi	sp,sp,-8
 40098bc:	008100b4 	movhi	r2,1026
 40098c0:	dc000015 	stw	r16,0(sp)
 40098c4:	dfc00115 	stw	ra,4(sp)
 40098c8:	10bf2304 	addi	r2,r2,-884
 40098cc:	20800015 	stw	r2,0(r4)
 40098d0:	2021883a 	mov	r16,r4
 40098d4:	400b0500 	call	400b050 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 40098d8:	8009883a 	mov	r4,r16
 40098dc:	dfc00117 	ldw	ra,4(sp)
 40098e0:	dc000017 	ldw	r16,0(sp)
 40098e4:	dec00204 	addi	sp,sp,8
 40098e8:	400ac201 	jmpi	400ac20 <_ZdlPv>

040098ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 40098ec:	defff504 	addi	sp,sp,-44
 40098f0:	dc000115 	stw	r16,4(sp)
 40098f4:	38800117 	ldw	r2,4(r7)
 40098f8:	24000117 	ldw	r16,4(r4)
 40098fc:	df000915 	stw	fp,36(sp)
 4009900:	ddc00815 	stw	r23,32(sp)
 4009904:	dd800715 	stw	r22,28(sp)
 4009908:	dcc00415 	stw	r19,16(sp)
 400990c:	dc800315 	stw	r18,12(sp)
 4009910:	dc400215 	stw	r17,8(sp)
 4009914:	dfc00a15 	stw	ra,40(sp)
 4009918:	dd400615 	stw	r21,24(sp)
 400991c:	dd000515 	stw	r20,20(sp)
 4009920:	2823883a 	mov	r17,r5
 4009924:	3039883a 	mov	fp,r6
 4009928:	dcc00b17 	ldw	r19,44(sp)
 400992c:	ddc00c17 	ldw	r23,48(sp)
 4009930:	dd800d17 	ldw	r22,52(sp)
 4009934:	dc800e17 	ldw	r18,56(sp)
 4009938:	80800b26 	beq	r16,r2,4009968 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 400993c:	80c00007 	ldb	r3,0(r16)
 4009940:	2029883a 	mov	r20,r4
 4009944:	01000a84 	movi	r4,42
 4009948:	382b883a 	mov	r21,r7
 400994c:	19001a26 	beq	r3,r4,40099b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 4009950:	100b883a 	mov	r5,r2
 4009954:	8009883a 	mov	r4,r16
 4009958:	d8c00015 	stw	r3,0(sp)
 400995c:	400cf540 	call	400cf54 <strcmp>
 4009960:	d8c00017 	ldw	r3,0(sp)
 4009964:	1000141e 	bne	r2,zero,40099b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 4009968:	94c00015 	stw	r19,0(r18)
 400996c:	97000115 	stw	fp,4(r18)
 4009970:	88002816 	blt	r17,zero,4009a14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 4009974:	9c63883a 	add	r17,r19,r17
 4009978:	b4403226 	beq	r22,r17,4009a44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 400997c:	00800044 	movi	r2,1
 4009980:	90800315 	stw	r2,12(r18)
 4009984:	0005883a 	mov	r2,zero
 4009988:	dfc00a17 	ldw	ra,40(sp)
 400998c:	df000917 	ldw	fp,36(sp)
 4009990:	ddc00817 	ldw	r23,32(sp)
 4009994:	dd800717 	ldw	r22,28(sp)
 4009998:	dd400617 	ldw	r21,24(sp)
 400999c:	dd000517 	ldw	r20,20(sp)
 40099a0:	dcc00417 	ldw	r19,16(sp)
 40099a4:	dc800317 	ldw	r18,12(sp)
 40099a8:	dc400217 	ldw	r17,8(sp)
 40099ac:	dc000117 	ldw	r16,4(sp)
 40099b0:	dec00b04 	addi	sp,sp,44
 40099b4:	f800283a 	ret
 40099b8:	9d801926 	beq	r19,r22,4009a20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 40099bc:	a1000217 	ldw	r4,8(r20)
 40099c0:	a80f883a 	mov	r7,r21
 40099c4:	e00d883a 	mov	r6,fp
 40099c8:	20800017 	ldw	r2,0(r4)
 40099cc:	dc800e15 	stw	r18,56(sp)
 40099d0:	dd800d15 	stw	r22,52(sp)
 40099d4:	ddc00c15 	stw	r23,48(sp)
 40099d8:	dcc00b15 	stw	r19,44(sp)
 40099dc:	10800717 	ldw	r2,28(r2)
 40099e0:	880b883a 	mov	r5,r17
 40099e4:	dfc00a17 	ldw	ra,40(sp)
 40099e8:	df000917 	ldw	fp,36(sp)
 40099ec:	ddc00817 	ldw	r23,32(sp)
 40099f0:	dd800717 	ldw	r22,28(sp)
 40099f4:	dd400617 	ldw	r21,24(sp)
 40099f8:	dd000517 	ldw	r20,20(sp)
 40099fc:	dcc00417 	ldw	r19,16(sp)
 4009a00:	dc800317 	ldw	r18,12(sp)
 4009a04:	dc400217 	ldw	r17,8(sp)
 4009a08:	dc000117 	ldw	r16,4(sp)
 4009a0c:	dec00b04 	addi	sp,sp,44
 4009a10:	1000683a 	jmp	r2
 4009a14:	00bfff84 	movi	r2,-2
 4009a18:	88bfda1e 	bne	r17,r2,4009984 <__alt_data_end+0xfc009984>
 4009a1c:	003fd706 	br	400997c <__alt_data_end+0xfc00997c>
 4009a20:	b9400117 	ldw	r5,4(r23)
 4009a24:	81400526 	beq	r16,r5,4009a3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 4009a28:	00800a84 	movi	r2,42
 4009a2c:	18bfe326 	beq	r3,r2,40099bc <__alt_data_end+0xfc0099bc>
 4009a30:	8009883a 	mov	r4,r16
 4009a34:	400cf540 	call	400cf54 <strcmp>
 4009a38:	103fe01e 	bne	r2,zero,40099bc <__alt_data_end+0xfc0099bc>
 4009a3c:	97000215 	stw	fp,8(r18)
 4009a40:	003fd006 	br	4009984 <__alt_data_end+0xfc009984>
 4009a44:	00800184 	movi	r2,6
 4009a48:	003fcd06 	br	4009980 <__alt_data_end+0xfc009980>

04009a4c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 4009a4c:	defffa04 	addi	sp,sp,-24
 4009a50:	dc000215 	stw	r16,8(sp)
 4009a54:	dc000617 	ldw	r16,24(sp)
 4009a58:	dc800415 	stw	r18,16(sp)
 4009a5c:	dc400315 	stw	r17,12(sp)
 4009a60:	dfc00515 	stw	ra,20(sp)
 4009a64:	2023883a 	mov	r17,r4
 4009a68:	2825883a 	mov	r18,r5
 4009a6c:	81800b26 	beq	r16,r6,4009a9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 4009a70:	89000217 	ldw	r4,8(r17)
 4009a74:	900b883a 	mov	r5,r18
 4009a78:	20800017 	ldw	r2,0(r4)
 4009a7c:	dc000615 	stw	r16,24(sp)
 4009a80:	10800817 	ldw	r2,32(r2)
 4009a84:	dfc00517 	ldw	ra,20(sp)
 4009a88:	dc800417 	ldw	r18,16(sp)
 4009a8c:	dc400317 	ldw	r17,12(sp)
 4009a90:	dc000217 	ldw	r16,8(sp)
 4009a94:	dec00604 	addi	sp,sp,24
 4009a98:	1000683a 	jmp	r2
 4009a9c:	21000117 	ldw	r4,4(r4)
 4009aa0:	39400117 	ldw	r5,4(r7)
 4009aa4:	21400926 	beq	r4,r5,4009acc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 4009aa8:	20c00007 	ldb	r3,0(r4)
 4009aac:	00800a84 	movi	r2,42
 4009ab0:	18bfef26 	beq	r3,r2,4009a70 <__alt_data_end+0xfc009a70>
 4009ab4:	d9800015 	stw	r6,0(sp)
 4009ab8:	d9c00115 	stw	r7,4(sp)
 4009abc:	400cf540 	call	400cf54 <strcmp>
 4009ac0:	d9800017 	ldw	r6,0(sp)
 4009ac4:	d9c00117 	ldw	r7,4(sp)
 4009ac8:	103fe91e 	bne	r2,zero,4009a70 <__alt_data_end+0xfc009a70>
 4009acc:	00800184 	movi	r2,6
 4009ad0:	dfc00517 	ldw	ra,20(sp)
 4009ad4:	dc800417 	ldw	r18,16(sp)
 4009ad8:	dc400317 	ldw	r17,12(sp)
 4009adc:	dc000217 	ldw	r16,8(sp)
 4009ae0:	dec00604 	addi	sp,sp,24
 4009ae4:	f800283a 	ret

04009ae8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 4009ae8:	defffb04 	addi	sp,sp,-20
 4009aec:	dcc00315 	stw	r19,12(sp)
 4009af0:	dc800215 	stw	r18,8(sp)
 4009af4:	dc400115 	stw	r17,4(sp)
 4009af8:	dc000015 	stw	r16,0(sp)
 4009afc:	dfc00415 	stw	ra,16(sp)
 4009b00:	2027883a 	mov	r19,r4
 4009b04:	2821883a 	mov	r16,r5
 4009b08:	3023883a 	mov	r17,r6
 4009b0c:	3825883a 	mov	r18,r7
 4009b10:	400b0940 	call	400b094 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 4009b14:	10c03fcc 	andi	r3,r2,255
 4009b18:	18000726 	beq	r3,zero,4009b38 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 4009b1c:	dfc00417 	ldw	ra,16(sp)
 4009b20:	dcc00317 	ldw	r19,12(sp)
 4009b24:	dc800217 	ldw	r18,8(sp)
 4009b28:	dc400117 	ldw	r17,4(sp)
 4009b2c:	dc000017 	ldw	r16,0(sp)
 4009b30:	dec00504 	addi	sp,sp,20
 4009b34:	f800283a 	ret
 4009b38:	99000217 	ldw	r4,8(r19)
 4009b3c:	900f883a 	mov	r7,r18
 4009b40:	880d883a 	mov	r6,r17
 4009b44:	20800017 	ldw	r2,0(r4)
 4009b48:	800b883a 	mov	r5,r16
 4009b4c:	10800617 	ldw	r2,24(r2)
 4009b50:	dfc00417 	ldw	ra,16(sp)
 4009b54:	dcc00317 	ldw	r19,12(sp)
 4009b58:	dc800217 	ldw	r18,8(sp)
 4009b5c:	dc400117 	ldw	r17,4(sp)
 4009b60:	dc000017 	ldw	r16,0(sp)
 4009b64:	dec00504 	addi	sp,sp,20
 4009b68:	1000683a 	jmp	r2

04009b6c <_ZNSt9type_infoD1Ev>:
 4009b6c:	f800283a 	ret

04009b70 <_ZNKSt9type_info14__is_pointer_pEv>:
 4009b70:	0005883a 	mov	r2,zero
 4009b74:	f800283a 	ret

04009b78 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 4009b78:	0005883a 	mov	r2,zero
 4009b7c:	f800283a 	ret

04009b80 <_ZNSt9type_infoD0Ev>:
 4009b80:	400ac201 	jmpi	400ac20 <_ZdlPv>

04009b84 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 4009b84:	21000117 	ldw	r4,4(r4)
 4009b88:	29400117 	ldw	r5,4(r5)
 4009b8c:	21400c26 	beq	r4,r5,4009bc0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 4009b90:	20c00007 	ldb	r3,0(r4)
 4009b94:	00800a84 	movi	r2,42
 4009b98:	18800726 	beq	r3,r2,4009bb8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 4009b9c:	deffff04 	addi	sp,sp,-4
 4009ba0:	dfc00015 	stw	ra,0(sp)
 4009ba4:	400cf540 	call	400cf54 <strcmp>
 4009ba8:	1005003a 	cmpeq	r2,r2,zero
 4009bac:	dfc00017 	ldw	ra,0(sp)
 4009bb0:	dec00104 	addi	sp,sp,4
 4009bb4:	f800283a 	ret
 4009bb8:	0005883a 	mov	r2,zero
 4009bbc:	f800283a 	ret
 4009bc0:	00800044 	movi	r2,1
 4009bc4:	f800283a 	ret

04009bc8 <_ZSt15set_new_handlerPFvvE>:
 4009bc8:	00c10134 	movhi	r3,1028
 4009bcc:	18e5e204 	addi	r3,r3,-26744
 4009bd0:	18800017 	ldw	r2,0(r3)
 4009bd4:	19000015 	stw	r4,0(r3)
 4009bd8:	f800283a 	ret

04009bdc <_ZSt15get_new_handlerv>:
 4009bdc:	00810134 	movhi	r2,1028
 4009be0:	10a5e204 	addi	r2,r2,-26744
 4009be4:	10800017 	ldw	r2,0(r2)
 4009be8:	f800283a 	ret

04009bec <_ZL21size_of_encoded_valueh>:
 4009bec:	deffff04 	addi	sp,sp,-4
 4009bf0:	dfc00015 	stw	ra,0(sp)
 4009bf4:	20c03fcc 	andi	r3,r4,255
 4009bf8:	00803fc4 	movi	r2,255
 4009bfc:	18802026 	beq	r3,r2,4009c80 <_ZL21size_of_encoded_valueh+0x94>
 4009c00:	210001cc 	andi	r4,r4,7
 4009c04:	00800144 	movi	r2,5
 4009c08:	11001c36 	bltu	r2,r4,4009c7c <_ZL21size_of_encoded_valueh+0x90>
 4009c0c:	200890ba 	slli	r4,r4,2
 4009c10:	00810074 	movhi	r2,1025
 4009c14:	10a70904 	addi	r2,r2,-25564
 4009c18:	2089883a 	add	r4,r4,r2
 4009c1c:	20800017 	ldw	r2,0(r4)
 4009c20:	1000683a 	jmp	r2
 4009c24:	04009c3c 	xorhi	r16,zero,624
 4009c28:	04009c7c 	xorhi	r16,zero,625
 4009c2c:	04009c4c 	andi	r16,zero,625
 4009c30:	04009c3c 	xorhi	r16,zero,624
 4009c34:	04009c6c 	andhi	r16,zero,625
 4009c38:	04009c5c 	xori	r16,zero,625
 4009c3c:	00800104 	movi	r2,4
 4009c40:	dfc00017 	ldw	ra,0(sp)
 4009c44:	dec00104 	addi	sp,sp,4
 4009c48:	f800283a 	ret
 4009c4c:	00800084 	movi	r2,2
 4009c50:	dfc00017 	ldw	ra,0(sp)
 4009c54:	dec00104 	addi	sp,sp,4
 4009c58:	f800283a 	ret
 4009c5c:	00800044 	movi	r2,1
 4009c60:	dfc00017 	ldw	ra,0(sp)
 4009c64:	dec00104 	addi	sp,sp,4
 4009c68:	f800283a 	ret
 4009c6c:	00800204 	movi	r2,8
 4009c70:	dfc00017 	ldw	ra,0(sp)
 4009c74:	dec00104 	addi	sp,sp,4
 4009c78:	f800283a 	ret
 4009c7c:	400be540 	call	400be54 <abort>
 4009c80:	0005883a 	mov	r2,zero
 4009c84:	dfc00017 	ldw	ra,0(sp)
 4009c88:	dec00104 	addi	sp,sp,4
 4009c8c:	f800283a 	ret

04009c90 <_ZL28read_encoded_value_with_basehjPKhPj>:
 4009c90:	deffff04 	addi	sp,sp,-4
 4009c94:	dfc00015 	stw	ra,0(sp)
 4009c98:	20c03fcc 	andi	r3,r4,255
 4009c9c:	00801404 	movi	r2,80
 4009ca0:	18807326 	beq	r3,r2,4009e70 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
 4009ca4:	20c003cc 	andi	r3,r4,15
 4009ca8:	00800304 	movi	r2,12
 4009cac:	10c06f36 	bltu	r2,r3,4009e6c <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
 4009cb0:	180690ba 	slli	r3,r3,2
 4009cb4:	02010074 	movhi	r8,1025
 4009cb8:	42273204 	addi	r8,r8,-25400
 4009cbc:	1a07883a 	add	r3,r3,r8
 4009cc0:	18800017 	ldw	r2,0(r3)
 4009cc4:	1000683a 	jmp	r2
 4009cc8:	04009cfc 	xorhi	r16,zero,627
 4009ccc:	04009e18 	cmpnei	r16,zero,632
 4009cd0:	04009e54 	movui	r16,633
 4009cd4:	04009cfc 	xorhi	r16,zero,627
 4009cd8:	04009d60 	cmpeqi	r16,zero,629
 4009cdc:	04009db4 	movhi	r16,630
 4009ce0:	04009e6c 	andhi	r16,zero,633
 4009ce4:	04009e6c 	andhi	r16,zero,633
 4009ce8:	04009e6c 	andhi	r16,zero,633
 4009cec:	04009dc0 	call	4009dc <__reset-0x3bff624>
 4009cf0:	04009d90 	cmplti	r16,zero,630
 4009cf4:	04009cfc 	xorhi	r16,zero,627
 4009cf8:	04009d60 	cmpeqi	r16,zero,629
 4009cfc:	30800043 	ldbu	r2,1(r6)
 4009d00:	30c00083 	ldbu	r3,2(r6)
 4009d04:	324000c3 	ldbu	r9,3(r6)
 4009d08:	32000003 	ldbu	r8,0(r6)
 4009d0c:	1004923a 	slli	r2,r2,8
 4009d10:	1806943a 	slli	r3,r3,16
 4009d14:	4812963a 	slli	r9,r9,24
 4009d18:	1204b03a 	or	r2,r2,r8
 4009d1c:	1884b03a 	or	r2,r3,r2
 4009d20:	4886b03a 	or	r3,r9,r2
 4009d24:	30800104 	addi	r2,r6,4
 4009d28:	18000926 	beq	r3,zero,4009d50 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 4009d2c:	22001c0c 	andi	r8,r4,112
 4009d30:	02400404 	movi	r9,16
 4009d34:	42405726 	beq	r8,r9,4009e94 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
 4009d38:	21003fcc 	andi	r4,r4,255
 4009d3c:	2100201c 	xori	r4,r4,128
 4009d40:	213fe004 	addi	r4,r4,-128
 4009d44:	1947883a 	add	r3,r3,r5
 4009d48:	2000010e 	bge	r4,zero,4009d50 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 4009d4c:	18c00017 	ldw	r3,0(r3)
 4009d50:	38c00015 	stw	r3,0(r7)
 4009d54:	dfc00017 	ldw	ra,0(sp)
 4009d58:	dec00104 	addi	sp,sp,4
 4009d5c:	f800283a 	ret
 4009d60:	30800043 	ldbu	r2,1(r6)
 4009d64:	30c00083 	ldbu	r3,2(r6)
 4009d68:	324000c3 	ldbu	r9,3(r6)
 4009d6c:	32000003 	ldbu	r8,0(r6)
 4009d70:	1004923a 	slli	r2,r2,8
 4009d74:	1806943a 	slli	r3,r3,16
 4009d78:	4812963a 	slli	r9,r9,24
 4009d7c:	1204b03a 	or	r2,r2,r8
 4009d80:	1884b03a 	or	r2,r3,r2
 4009d84:	4886b03a 	or	r3,r9,r2
 4009d88:	30800204 	addi	r2,r6,8
 4009d8c:	003fe606 	br	4009d28 <__alt_data_end+0xfc009d28>
 4009d90:	30c00043 	ldbu	r3,1(r6)
 4009d94:	32000003 	ldbu	r8,0(r6)
 4009d98:	30800084 	addi	r2,r6,2
 4009d9c:	1806923a 	slli	r3,r3,8
 4009da0:	1a06b03a 	or	r3,r3,r8
 4009da4:	18ffffcc 	andi	r3,r3,65535
 4009da8:	18e0001c 	xori	r3,r3,32768
 4009dac:	18e00004 	addi	r3,r3,-32768
 4009db0:	003fdd06 	br	4009d28 <__alt_data_end+0xfc009d28>
 4009db4:	30c00003 	ldbu	r3,0(r6)
 4009db8:	30800044 	addi	r2,r6,1
 4009dbc:	003fda06 	br	4009d28 <__alt_data_end+0xfc009d28>
 4009dc0:	3017883a 	mov	r11,r6
 4009dc4:	0007883a 	mov	r3,zero
 4009dc8:	0013883a 	mov	r9,zero
 4009dcc:	5a800003 	ldbu	r10,0(r11)
 4009dd0:	58800044 	addi	r2,r11,1
 4009dd4:	1017883a 	mov	r11,r2
 4009dd8:	52001fcc 	andi	r8,r10,127
 4009ddc:	4250983a 	sll	r8,r8,r9
 4009de0:	53003fcc 	andi	r12,r10,255
 4009de4:	6300201c 	xori	r12,r12,128
 4009de8:	633fe004 	addi	r12,r12,-128
 4009dec:	1a06b03a 	or	r3,r3,r8
 4009df0:	4a4001c4 	addi	r9,r9,7
 4009df4:	603ff516 	blt	r12,zero,4009dcc <__alt_data_end+0xfc009dcc>
 4009df8:	020007c4 	movi	r8,31
 4009dfc:	427fca36 	bltu	r8,r9,4009d28 <__alt_data_end+0xfc009d28>
 4009e00:	5280100c 	andi	r10,r10,64
 4009e04:	503fc826 	beq	r10,zero,4009d28 <__alt_data_end+0xfc009d28>
 4009e08:	023fffc4 	movi	r8,-1
 4009e0c:	4252983a 	sll	r9,r8,r9
 4009e10:	1a46b03a 	or	r3,r3,r9
 4009e14:	003fc506 	br	4009d2c <__alt_data_end+0xfc009d2c>
 4009e18:	3017883a 	mov	r11,r6
 4009e1c:	0007883a 	mov	r3,zero
 4009e20:	0015883a 	mov	r10,zero
 4009e24:	5a000003 	ldbu	r8,0(r11)
 4009e28:	58800044 	addi	r2,r11,1
 4009e2c:	1017883a 	mov	r11,r2
 4009e30:	42401fcc 	andi	r9,r8,127
 4009e34:	4a92983a 	sll	r9,r9,r10
 4009e38:	42003fcc 	andi	r8,r8,255
 4009e3c:	4200201c 	xori	r8,r8,128
 4009e40:	423fe004 	addi	r8,r8,-128
 4009e44:	1a46b03a 	or	r3,r3,r9
 4009e48:	528001c4 	addi	r10,r10,7
 4009e4c:	403ff516 	blt	r8,zero,4009e24 <__alt_data_end+0xfc009e24>
 4009e50:	003fb506 	br	4009d28 <__alt_data_end+0xfc009d28>
 4009e54:	30c00043 	ldbu	r3,1(r6)
 4009e58:	32000003 	ldbu	r8,0(r6)
 4009e5c:	30800084 	addi	r2,r6,2
 4009e60:	1806923a 	slli	r3,r3,8
 4009e64:	1a06b03a 	or	r3,r3,r8
 4009e68:	003faf06 	br	4009d28 <__alt_data_end+0xfc009d28>
 4009e6c:	400be540 	call	400be54 <abort>
 4009e70:	308000c4 	addi	r2,r6,3
 4009e74:	00ffff04 	movi	r3,-4
 4009e78:	10c4703a 	and	r2,r2,r3
 4009e7c:	10c00017 	ldw	r3,0(r2)
 4009e80:	10800104 	addi	r2,r2,4
 4009e84:	38c00015 	stw	r3,0(r7)
 4009e88:	dfc00017 	ldw	ra,0(sp)
 4009e8c:	dec00104 	addi	sp,sp,4
 4009e90:	f800283a 	ret
 4009e94:	300b883a 	mov	r5,r6
 4009e98:	003fa706 	br	4009d38 <__alt_data_end+0xfc009d38>

04009e9c <_ZL15get_ttype_entryP16lsda_header_infom>:
 4009e9c:	defffc04 	addi	sp,sp,-16
 4009ea0:	dfc00315 	stw	ra,12(sp)
 4009ea4:	dc400215 	stw	r17,8(sp)
 4009ea8:	dc000115 	stw	r16,4(sp)
 4009eac:	2021883a 	mov	r16,r4
 4009eb0:	21000503 	ldbu	r4,20(r4)
 4009eb4:	2823883a 	mov	r17,r5
 4009eb8:	4009bec0 	call	4009bec <_ZL21size_of_encoded_valueh>
 4009ebc:	1445383a 	mul	r2,r2,r17
 4009ec0:	81800317 	ldw	r6,12(r16)
 4009ec4:	81400217 	ldw	r5,8(r16)
 4009ec8:	81000503 	ldbu	r4,20(r16)
 4009ecc:	d80f883a 	mov	r7,sp
 4009ed0:	308dc83a 	sub	r6,r6,r2
 4009ed4:	4009c900 	call	4009c90 <_ZL28read_encoded_value_with_basehjPKhPj>
 4009ed8:	d8800017 	ldw	r2,0(sp)
 4009edc:	dfc00317 	ldw	ra,12(sp)
 4009ee0:	dc400217 	ldw	r17,8(sp)
 4009ee4:	dc000117 	ldw	r16,4(sp)
 4009ee8:	dec00404 	addi	sp,sp,16
 4009eec:	f800283a 	ret

04009ef0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 4009ef0:	deffff04 	addi	sp,sp,-4
 4009ef4:	dfc00015 	stw	ra,0(sp)
 4009ef8:	20c03fcc 	andi	r3,r4,255
 4009efc:	00803fc4 	movi	r2,255
 4009f00:	18800e26 	beq	r3,r2,4009f3c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 4009f04:	20801c0c 	andi	r2,r4,112
 4009f08:	00c00804 	movi	r3,32
 4009f0c:	10c01726 	beq	r2,r3,4009f6c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
 4009f10:	18800e2e 	bgeu	r3,r2,4009f4c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
 4009f14:	00c01004 	movi	r3,64
 4009f18:	10c01026 	beq	r2,r3,4009f5c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
 4009f1c:	00c01404 	movi	r3,80
 4009f20:	10c00626 	beq	r2,r3,4009f3c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 4009f24:	00c00c04 	movi	r3,48
 4009f28:	10c00b1e 	bne	r2,r3,4009f58 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 4009f2c:	2809883a 	mov	r4,r5
 4009f30:	dfc00017 	ldw	ra,0(sp)
 4009f34:	dec00104 	addi	sp,sp,4
 4009f38:	400bc141 	jmpi	400bc14 <_Unwind_GetDataRelBase>
 4009f3c:	0005883a 	mov	r2,zero
 4009f40:	dfc00017 	ldw	ra,0(sp)
 4009f44:	dec00104 	addi	sp,sp,4
 4009f48:	f800283a 	ret
 4009f4c:	103ffb26 	beq	r2,zero,4009f3c <__alt_data_end+0xfc009f3c>
 4009f50:	00c00404 	movi	r3,16
 4009f54:	10fff926 	beq	r2,r3,4009f3c <__alt_data_end+0xfc009f3c>
 4009f58:	400be540 	call	400be54 <abort>
 4009f5c:	2809883a 	mov	r4,r5
 4009f60:	dfc00017 	ldw	ra,0(sp)
 4009f64:	dec00104 	addi	sp,sp,4
 4009f68:	400bc041 	jmpi	400bc04 <_Unwind_GetRegionStart>
 4009f6c:	2809883a 	mov	r4,r5
 4009f70:	dfc00017 	ldw	ra,0(sp)
 4009f74:	dec00104 	addi	sp,sp,4
 4009f78:	400bc1c1 	jmpi	400bc1c <_Unwind_GetTextRelBase>

04009f7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 4009f7c:	defffb04 	addi	sp,sp,-20
 4009f80:	dcc00315 	stw	r19,12(sp)
 4009f84:	dc400115 	stw	r17,4(sp)
 4009f88:	dc000015 	stw	r16,0(sp)
 4009f8c:	dfc00415 	stw	ra,16(sp)
 4009f90:	dc800215 	stw	r18,8(sp)
 4009f94:	2027883a 	mov	r19,r4
 4009f98:	2821883a 	mov	r16,r5
 4009f9c:	3023883a 	mov	r17,r6
 4009fa0:	20003f26 	beq	r4,zero,400a0a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 4009fa4:	400bc040 	call	400bc04 <_Unwind_GetRegionStart>
 4009fa8:	88800015 	stw	r2,0(r17)
 4009fac:	84800003 	ldbu	r18,0(r16)
 4009fb0:	00c03fc4 	movi	r3,255
 4009fb4:	84000044 	addi	r16,r16,1
 4009fb8:	90c03726 	beq	r18,r3,400a098 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 4009fbc:	980b883a 	mov	r5,r19
 4009fc0:	9009883a 	mov	r4,r18
 4009fc4:	4009ef00 	call	4009ef0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009fc8:	800d883a 	mov	r6,r16
 4009fcc:	89c00104 	addi	r7,r17,4
 4009fd0:	100b883a 	mov	r5,r2
 4009fd4:	9009883a 	mov	r4,r18
 4009fd8:	4009c900 	call	4009c90 <_ZL28read_encoded_value_with_basehjPKhPj>
 4009fdc:	1021883a 	mov	r16,r2
 4009fe0:	80c00003 	ldbu	r3,0(r16)
 4009fe4:	01003fc4 	movi	r4,255
 4009fe8:	80800044 	addi	r2,r16,1
 4009fec:	88c00505 	stb	r3,20(r17)
 4009ff0:	18c03fcc 	andi	r3,r3,255
 4009ff4:	19002c26 	beq	r3,r4,400a0a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 4009ff8:	100f883a 	mov	r7,r2
 4009ffc:	000d883a 	mov	r6,zero
 400a000:	000b883a 	mov	r5,zero
 400a004:	38c00003 	ldbu	r3,0(r7)
 400a008:	10800044 	addi	r2,r2,1
 400a00c:	100f883a 	mov	r7,r2
 400a010:	19001fcc 	andi	r4,r3,127
 400a014:	2148983a 	sll	r4,r4,r5
 400a018:	18c03fcc 	andi	r3,r3,255
 400a01c:	18c0201c 	xori	r3,r3,128
 400a020:	18ffe004 	addi	r3,r3,-128
 400a024:	310cb03a 	or	r6,r6,r4
 400a028:	294001c4 	addi	r5,r5,7
 400a02c:	183ff516 	blt	r3,zero,400a004 <__alt_data_end+0xfc00a004>
 400a030:	118d883a 	add	r6,r2,r6
 400a034:	89800315 	stw	r6,12(r17)
 400a038:	10c00003 	ldbu	r3,0(r2)
 400a03c:	000d883a 	mov	r6,zero
 400a040:	10800044 	addi	r2,r2,1
 400a044:	88c00545 	stb	r3,21(r17)
 400a048:	000b883a 	mov	r5,zero
 400a04c:	10c00003 	ldbu	r3,0(r2)
 400a050:	10800044 	addi	r2,r2,1
 400a054:	19001fcc 	andi	r4,r3,127
 400a058:	2148983a 	sll	r4,r4,r5
 400a05c:	18c03fcc 	andi	r3,r3,255
 400a060:	18c0201c 	xori	r3,r3,128
 400a064:	18ffe004 	addi	r3,r3,-128
 400a068:	310cb03a 	or	r6,r6,r4
 400a06c:	294001c4 	addi	r5,r5,7
 400a070:	183ff616 	blt	r3,zero,400a04c <__alt_data_end+0xfc00a04c>
 400a074:	118d883a 	add	r6,r2,r6
 400a078:	89800415 	stw	r6,16(r17)
 400a07c:	dfc00417 	ldw	ra,16(sp)
 400a080:	dcc00317 	ldw	r19,12(sp)
 400a084:	dc800217 	ldw	r18,8(sp)
 400a088:	dc400117 	ldw	r17,4(sp)
 400a08c:	dc000017 	ldw	r16,0(sp)
 400a090:	dec00504 	addi	sp,sp,20
 400a094:	f800283a 	ret
 400a098:	88800115 	stw	r2,4(r17)
 400a09c:	003fd006 	br	4009fe0 <__alt_data_end+0xfc009fe0>
 400a0a0:	0005883a 	mov	r2,zero
 400a0a4:	003fc006 	br	4009fa8 <__alt_data_end+0xfc009fa8>
 400a0a8:	88000315 	stw	zero,12(r17)
 400a0ac:	003fe206 	br	400a038 <__alt_data_end+0xfc00a038>

0400a0b0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 400a0b0:	28800017 	ldw	r2,0(r5)
 400a0b4:	30c00017 	ldw	r3,0(r6)
 400a0b8:	defffb04 	addi	sp,sp,-20
 400a0bc:	10800217 	ldw	r2,8(r2)
 400a0c0:	dc400315 	stw	r17,12(sp)
 400a0c4:	dc000215 	stw	r16,8(sp)
 400a0c8:	d9400115 	stw	r5,4(sp)
 400a0cc:	dfc00415 	stw	ra,16(sp)
 400a0d0:	2021883a 	mov	r16,r4
 400a0d4:	d8c00015 	stw	r3,0(sp)
 400a0d8:	2809883a 	mov	r4,r5
 400a0dc:	3023883a 	mov	r17,r6
 400a0e0:	103ee83a 	callr	r2
 400a0e4:	10803fcc 	andi	r2,r2,255
 400a0e8:	d9400117 	ldw	r5,4(sp)
 400a0ec:	10000326 	beq	r2,zero,400a0fc <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
 400a0f0:	d8800017 	ldw	r2,0(sp)
 400a0f4:	10800017 	ldw	r2,0(r2)
 400a0f8:	d8800015 	stw	r2,0(sp)
 400a0fc:	80800017 	ldw	r2,0(r16)
 400a100:	01c00044 	movi	r7,1
 400a104:	d80d883a 	mov	r6,sp
 400a108:	10800417 	ldw	r2,16(r2)
 400a10c:	8009883a 	mov	r4,r16
 400a110:	103ee83a 	callr	r2
 400a114:	10c03fcc 	andi	r3,r2,255
 400a118:	18000226 	beq	r3,zero,400a124 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
 400a11c:	d8c00017 	ldw	r3,0(sp)
 400a120:	88c00015 	stw	r3,0(r17)
 400a124:	dfc00417 	ldw	ra,16(sp)
 400a128:	dc400317 	ldw	r17,12(sp)
 400a12c:	dc000217 	ldw	r16,8(sp)
 400a130:	dec00504 	addi	sp,sp,20
 400a134:	f800283a 	ret

0400a138 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 400a138:	defff604 	addi	sp,sp,-40
 400a13c:	dc000415 	stw	r16,16(sp)
 400a140:	3821d23a 	srai	r16,r7,8
 400a144:	dc800615 	stw	r18,24(sp)
 400a148:	dc400515 	stw	r17,20(sp)
 400a14c:	dfc00915 	stw	ra,36(sp)
 400a150:	dd000815 	stw	r20,32(sp)
 400a154:	dcc00715 	stw	r19,28(sp)
 400a158:	d9400215 	stw	r5,8(sp)
 400a15c:	3825883a 	mov	r18,r7
 400a160:	2023883a 	mov	r17,r4
 400a164:	8000010e 	bge	r16,zero,400a16c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x34>
 400a168:	0421c83a 	sub	r16,zero,r16
 400a16c:	000b883a 	mov	r5,zero
 400a170:	01000144 	movi	r4,5
 400a174:	d9800315 	stw	r6,12(sp)
 400a178:	4009ef00 	call	4009ef0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400a17c:	d9800317 	ldw	r6,12(sp)
 400a180:	d9c00104 	addi	r7,sp,4
 400a184:	100b883a 	mov	r5,r2
 400a188:	01000144 	movi	r4,5
 400a18c:	4009c900 	call	4009c90 <_ZL28read_encoded_value_with_basehjPKhPj>
 400a190:	11fffe64 	muli	r7,r2,-7
 400a194:	0007883a 	mov	r3,zero
 400a198:	11400003 	ldbu	r5,0(r2)
 400a19c:	110001e4 	muli	r4,r2,7
 400a1a0:	10800044 	addi	r2,r2,1
 400a1a4:	29801fcc 	andi	r6,r5,127
 400a1a8:	21c9883a 	add	r4,r4,r7
 400a1ac:	3108983a 	sll	r4,r6,r4
 400a1b0:	29403fcc 	andi	r5,r5,255
 400a1b4:	2940201c 	xori	r5,r5,128
 400a1b8:	297fe004 	addi	r5,r5,-128
 400a1bc:	1906b03a 	or	r3,r3,r4
 400a1c0:	283ff516 	blt	r5,zero,400a198 <__alt_data_end+0xfc00a198>
 400a1c4:	10c5883a 	add	r2,r2,r3
 400a1c8:	11fffe64 	muli	r7,r2,-7
 400a1cc:	0009883a 	mov	r4,zero
 400a1d0:	11400003 	ldbu	r5,0(r2)
 400a1d4:	10c001e4 	muli	r3,r2,7
 400a1d8:	10800044 	addi	r2,r2,1
 400a1dc:	29801fcc 	andi	r6,r5,127
 400a1e0:	19c7883a 	add	r3,r3,r7
 400a1e4:	30c6983a 	sll	r3,r6,r3
 400a1e8:	29403fcc 	andi	r5,r5,255
 400a1ec:	2940201c 	xori	r5,r5,128
 400a1f0:	297fe004 	addi	r5,r5,-128
 400a1f4:	20c8b03a 	or	r4,r4,r3
 400a1f8:	283ff516 	blt	r5,zero,400a1d0 <__alt_data_end+0xfc00a1d0>
 400a1fc:	80c03fcc 	andi	r3,r16,255
 400a200:	18ffffc4 	addi	r3,r3,-1
 400a204:	10c7883a 	add	r3,r2,r3
 400a208:	210000c4 	addi	r4,r4,3
 400a20c:	197ffe64 	muli	r5,r3,-7
 400a210:	2085883a 	add	r2,r4,r2
 400a214:	04ffff04 	movi	r19,-4
 400a218:	14e6703a 	and	r19,r2,r19
 400a21c:	0021883a 	mov	r16,zero
 400a220:	18800003 	ldbu	r2,0(r3)
 400a224:	190001e4 	muli	r4,r3,7
 400a228:	1d000044 	addi	r20,r3,1
 400a22c:	10c01fcc 	andi	r3,r2,127
 400a230:	2149883a 	add	r4,r4,r5
 400a234:	1908983a 	sll	r4,r3,r4
 400a238:	10803fcc 	andi	r2,r2,255
 400a23c:	1080201c 	xori	r2,r2,128
 400a240:	10bfe004 	addi	r2,r2,-128
 400a244:	a007883a 	mov	r3,r20
 400a248:	8120b03a 	or	r16,r16,r4
 400a24c:	103ff416 	blt	r2,zero,400a220 <__alt_data_end+0xfc00a220>
 400a250:	94803fcc 	andi	r18,r18,255
 400a254:	80001f26 	beq	r16,zero,400a2d4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x19c>
 400a258:	9009883a 	mov	r4,r18
 400a25c:	4009bec0 	call	4009bec <_ZL21size_of_encoded_valueh>
 400a260:	81bfffc4 	addi	r6,r16,-1
 400a264:	308d383a 	mul	r6,r6,r2
 400a268:	d9400a17 	ldw	r5,40(sp)
 400a26c:	d80f883a 	mov	r7,sp
 400a270:	9009883a 	mov	r4,r18
 400a274:	34cd883a 	add	r6,r6,r19
 400a278:	4009c900 	call	4009c90 <_ZL28read_encoded_value_with_basehjPKhPj>
 400a27c:	d9000017 	ldw	r4,0(sp)
 400a280:	d9800204 	addi	r6,sp,8
 400a284:	880b883a 	mov	r5,r17
 400a288:	400a0b00 	call	400a0b0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400a28c:	10c03fcc 	andi	r3,r2,255
 400a290:	1800111e 	bne	r3,zero,400a2d8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1a0>
 400a294:	a17ffe64 	muli	r5,r20,-7
 400a298:	a007883a 	mov	r3,r20
 400a29c:	0021883a 	mov	r16,zero
 400a2a0:	19000003 	ldbu	r4,0(r3)
 400a2a4:	18c001e4 	muli	r3,r3,7
 400a2a8:	a5000044 	addi	r20,r20,1
 400a2ac:	20801fcc 	andi	r2,r4,127
 400a2b0:	1947883a 	add	r3,r3,r5
 400a2b4:	10c4983a 	sll	r2,r2,r3
 400a2b8:	21003fcc 	andi	r4,r4,255
 400a2bc:	2100201c 	xori	r4,r4,128
 400a2c0:	213fe004 	addi	r4,r4,-128
 400a2c4:	a007883a 	mov	r3,r20
 400a2c8:	80a0b03a 	or	r16,r16,r2
 400a2cc:	203ff416 	blt	r4,zero,400a2a0 <__alt_data_end+0xfc00a2a0>
 400a2d0:	003fe006 	br	400a254 <__alt_data_end+0xfc00a254>
 400a2d4:	0005883a 	mov	r2,zero
 400a2d8:	dfc00917 	ldw	ra,36(sp)
 400a2dc:	dd000817 	ldw	r20,32(sp)
 400a2e0:	dcc00717 	ldw	r19,28(sp)
 400a2e4:	dc800617 	ldw	r18,24(sp)
 400a2e8:	dc400517 	ldw	r17,20(sp)
 400a2ec:	dc000417 	ldw	r16,16(sp)
 400a2f0:	dec00a04 	addi	sp,sp,40
 400a2f4:	f800283a 	ret

0400a2f8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 400a2f8:	defffb04 	addi	sp,sp,-20
 400a2fc:	dc000115 	stw	r16,4(sp)
 400a300:	24000317 	ldw	r16,12(r4)
 400a304:	01ce303a 	nor	r7,zero,r7
 400a308:	dc800315 	stw	r18,12(sp)
 400a30c:	dc400215 	stw	r17,8(sp)
 400a310:	dfc00415 	stw	ra,16(sp)
 400a314:	2023883a 	mov	r17,r4
 400a318:	2825883a 	mov	r18,r5
 400a31c:	d9800015 	stw	r6,0(sp)
 400a320:	81e1883a 	add	r16,r16,r7
 400a324:	800d883a 	mov	r6,r16
 400a328:	000b883a 	mov	r5,zero
 400a32c:	0009883a 	mov	r4,zero
 400a330:	30800003 	ldbu	r2,0(r6)
 400a334:	84000044 	addi	r16,r16,1
 400a338:	800d883a 	mov	r6,r16
 400a33c:	10c01fcc 	andi	r3,r2,127
 400a340:	1906983a 	sll	r3,r3,r4
 400a344:	10803fcc 	andi	r2,r2,255
 400a348:	1080201c 	xori	r2,r2,128
 400a34c:	10bfe004 	addi	r2,r2,-128
 400a350:	28cab03a 	or	r5,r5,r3
 400a354:	210001c4 	addi	r4,r4,7
 400a358:	103ff516 	blt	r2,zero,400a330 <__alt_data_end+0xfc00a330>
 400a35c:	28000e26 	beq	r5,zero,400a398 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 400a360:	8809883a 	mov	r4,r17
 400a364:	4009e9c0 	call	4009e9c <_ZL15get_ttype_entryP16lsda_header_infom>
 400a368:	d80d883a 	mov	r6,sp
 400a36c:	900b883a 	mov	r5,r18
 400a370:	1009883a 	mov	r4,r2
 400a374:	400a0b00 	call	400a0b0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400a378:	10c03fcc 	andi	r3,r2,255
 400a37c:	183fe926 	beq	r3,zero,400a324 <__alt_data_end+0xfc00a324>
 400a380:	dfc00417 	ldw	ra,16(sp)
 400a384:	dc800317 	ldw	r18,12(sp)
 400a388:	dc400217 	ldw	r17,8(sp)
 400a38c:	dc000117 	ldw	r16,4(sp)
 400a390:	dec00504 	addi	sp,sp,20
 400a394:	f800283a 	ret
 400a398:	0005883a 	mov	r2,zero
 400a39c:	003ff806 	br	400a380 <__alt_data_end+0xfc00a380>

0400a3a0 <__gxx_personality_sj0>:
 400a3a0:	00810074 	movhi	r2,1025
 400a3a4:	deffdd04 	addi	sp,sp,-140
 400a3a8:	10a8e804 	addi	r2,r2,-23648
 400a3ac:	d8800e15 	stw	r2,56(sp)
 400a3b0:	008100b4 	movhi	r2,1026
 400a3b4:	10bbc604 	addi	r2,r2,-4328
 400a3b8:	d8800f15 	stw	r2,60(sp)
 400a3bc:	00810074 	movhi	r2,1025
 400a3c0:	10aa5e04 	addi	r2,r2,-22152
 400a3c4:	d9001515 	stw	r4,84(sp)
 400a3c8:	d9000804 	addi	r4,sp,32
 400a3cc:	d8801115 	stw	r2,68(sp)
 400a3d0:	dfc02215 	stw	ra,136(sp)
 400a3d4:	df002115 	stw	fp,132(sp)
 400a3d8:	dec01015 	stw	sp,64(sp)
 400a3dc:	dec01215 	stw	sp,72(sp)
 400a3e0:	d9401915 	stw	r5,100(sp)
 400a3e4:	d9801615 	stw	r6,88(sp)
 400a3e8:	d9c01715 	stw	r7,92(sp)
 400a3ec:	400bb3c0 	call	400bb3c <_Unwind_SjLj_Register>
 400a3f0:	d8c01517 	ldw	r3,84(sp)
 400a3f4:	d8000715 	stw	zero,28(sp)
 400a3f8:	d8000615 	stw	zero,24(sp)
 400a3fc:	00800044 	movi	r2,1
 400a400:	18800926 	beq	r3,r2,400a428 <__gxx_personality_sj0+0x88>
 400a404:	01c000c4 	movi	r7,3
 400a408:	d9c01515 	stw	r7,84(sp)
 400a40c:	d9000804 	addi	r4,sp,32
 400a410:	400bb540 	call	400bb54 <_Unwind_SjLj_Unregister>
 400a414:	d8801517 	ldw	r2,84(sp)
 400a418:	dfc02217 	ldw	ra,136(sp)
 400a41c:	df002117 	ldw	fp,132(sp)
 400a420:	dec02304 	addi	sp,sp,140
 400a424:	f800283a 	ret
 400a428:	d9001617 	ldw	r4,88(sp)
 400a42c:	00af3574 	movhi	r2,48341
 400a430:	d9c01717 	ldw	r7,92(sp)
 400a434:	10b54004 	addi	r2,r2,-11008
 400a438:	00ee2cb4 	movhi	r3,47282
 400a43c:	2085883a 	add	r2,r4,r2
 400a440:	18eaaf04 	addi	r3,r3,-21828
 400a444:	d8801b15 	stw	r2,108(sp)
 400a448:	38c7883a 	add	r3,r7,r3
 400a44c:	1105803a 	cmpltu	r2,r2,r4
 400a450:	10c7883a 	add	r3,r2,r3
 400a454:	d8c01c15 	stw	r3,112(sp)
 400a458:	d8c01917 	ldw	r3,100(sp)
 400a45c:	00800184 	movi	r2,6
 400a460:	18805426 	beq	r3,r2,400a5b4 <__gxx_personality_sj0+0x214>
 400a464:	d9002417 	ldw	r4,144(sp)
 400a468:	00bfffc4 	movi	r2,-1
 400a46c:	d8800915 	stw	r2,36(sp)
 400a470:	400bbf80 	call	400bbf8 <_Unwind_GetLanguageSpecificData>
 400a474:	d8801a15 	stw	r2,104(sp)
 400a478:	1000c926 	beq	r2,zero,400a7a0 <__gxx_personality_sj0+0x400>
 400a47c:	d9002417 	ldw	r4,144(sp)
 400a480:	d80d883a 	mov	r6,sp
 400a484:	100b883a 	mov	r5,r2
 400a488:	4009f7c0 	call	4009f7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400a48c:	d9402417 	ldw	r5,144(sp)
 400a490:	d9000503 	ldbu	r4,20(sp)
 400a494:	d8801515 	stw	r2,84(sp)
 400a498:	4009ef00 	call	4009ef0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400a49c:	d9002417 	ldw	r4,144(sp)
 400a4a0:	d9400604 	addi	r5,sp,24
 400a4a4:	d8800215 	stw	r2,8(sp)
 400a4a8:	400bbc80 	call	400bbc8 <_Unwind_GetIPInfo>
 400a4ac:	d8c00617 	ldw	r3,24(sp)
 400a4b0:	18006126 	beq	r3,zero,400a638 <__gxx_personality_sj0+0x298>
 400a4b4:	1000ba16 	blt	r2,zero,400a7a0 <__gxx_personality_sj0+0x400>
 400a4b8:	10002f1e 	bne	r2,zero,400a578 <__gxx_personality_sj0+0x1d8>
 400a4bc:	d8001515 	stw	zero,84(sp)
 400a4c0:	d8001f15 	stw	zero,124(sp)
 400a4c4:	d8001815 	stw	zero,96(sp)
 400a4c8:	00c00044 	movi	r3,1
 400a4cc:	d9001917 	ldw	r4,100(sp)
 400a4d0:	2080004c 	andi	r2,r4,1
 400a4d4:	1000b51e 	bne	r2,zero,400a7ac <__gxx_personality_sj0+0x40c>
 400a4d8:	d9001917 	ldw	r4,100(sp)
 400a4dc:	2080020c 	andi	r2,r4,8
 400a4e0:	1000b71e 	bne	r2,zero,400a7c0 <__gxx_personality_sj0+0x420>
 400a4e4:	d9c01c17 	ldw	r7,112(sp)
 400a4e8:	3800b826 	beq	r7,zero,400a7cc <__gxx_personality_sj0+0x42c>
 400a4ec:	00800044 	movi	r2,1
 400a4f0:	1880b526 	beq	r3,r2,400a7c8 <__gxx_personality_sj0+0x428>
 400a4f4:	d9c01517 	ldw	r7,84(sp)
 400a4f8:	3800f516 	blt	r7,zero,400a8d0 <__gxx_personality_sj0+0x530>
 400a4fc:	d9002417 	ldw	r4,144(sp)
 400a500:	d9802317 	ldw	r6,140(sp)
 400a504:	00bfffc4 	movi	r2,-1
 400a508:	000b883a 	mov	r5,zero
 400a50c:	d8800915 	stw	r2,36(sp)
 400a510:	400bb9c0 	call	400bb9c <_Unwind_SetGR>
 400a514:	d9801517 	ldw	r6,84(sp)
 400a518:	d9002417 	ldw	r4,144(sp)
 400a51c:	01400044 	movi	r5,1
 400a520:	400bb9c0 	call	400bb9c <_Unwind_SetGR>
 400a524:	d9002417 	ldw	r4,144(sp)
 400a528:	d9401f17 	ldw	r5,124(sp)
 400a52c:	400bbe80 	call	400bbe8 <_Unwind_SetIP>
 400a530:	010001c4 	movi	r4,7
 400a534:	d9001515 	stw	r4,84(sp)
 400a538:	003fb406 	br	400a40c <__alt_data_end+0xfc00a40c>
 400a53c:	000f883a 	mov	r7,zero
 400a540:	000d883a 	mov	r6,zero
 400a544:	19000003 	ldbu	r4,0(r3)
 400a548:	18c00044 	addi	r3,r3,1
 400a54c:	d8c01515 	stw	r3,84(sp)
 400a550:	21401fcc 	andi	r5,r4,127
 400a554:	298a983a 	sll	r5,r5,r6
 400a558:	21003fcc 	andi	r4,r4,255
 400a55c:	2100201c 	xori	r4,r4,128
 400a560:	213fe004 	addi	r4,r4,-128
 400a564:	394eb03a 	or	r7,r7,r5
 400a568:	318001c4 	addi	r6,r6,7
 400a56c:	203ff516 	blt	r4,zero,400a544 <__alt_data_end+0xfc00a544>
 400a570:	10bfffc4 	addi	r2,r2,-1
 400a574:	10003226 	beq	r2,zero,400a640 <__gxx_personality_sj0+0x2a0>
 400a578:	d9c01517 	ldw	r7,84(sp)
 400a57c:	0011883a 	mov	r8,zero
 400a580:	000d883a 	mov	r6,zero
 400a584:	39000003 	ldbu	r4,0(r7)
 400a588:	38c00044 	addi	r3,r7,1
 400a58c:	180f883a 	mov	r7,r3
 400a590:	21401fcc 	andi	r5,r4,127
 400a594:	298a983a 	sll	r5,r5,r6
 400a598:	21003fcc 	andi	r4,r4,255
 400a59c:	2100201c 	xori	r4,r4,128
 400a5a0:	213fe004 	addi	r4,r4,-128
 400a5a4:	4150b03a 	or	r8,r8,r5
 400a5a8:	318001c4 	addi	r6,r6,7
 400a5ac:	203ff516 	blt	r4,zero,400a584 <__alt_data_end+0xfc00a584>
 400a5b0:	003fe206 	br	400a53c <__alt_data_end+0xfc00a53c>
 400a5b4:	d9001c17 	ldw	r4,112(sp)
 400a5b8:	203faa1e 	bne	r4,zero,400a464 <__alt_data_end+0xfc00a464>
 400a5bc:	d9c01517 	ldw	r7,84(sp)
 400a5c0:	d8801b17 	ldw	r2,108(sp)
 400a5c4:	38bfa736 	bltu	r7,r2,400a464 <__alt_data_end+0xfc00a464>
 400a5c8:	d8c02317 	ldw	r3,140(sp)
 400a5cc:	18fffe17 	ldw	r3,-8(r3)
 400a5d0:	d8c01f15 	stw	r3,124(sp)
 400a5d4:	18008226 	beq	r3,zero,400a7e0 <__gxx_personality_sj0+0x440>
 400a5d8:	d9002317 	ldw	r4,140(sp)
 400a5dc:	d9c02317 	ldw	r7,140(sp)
 400a5e0:	213ffb17 	ldw	r4,-20(r4)
 400a5e4:	39fffd17 	ldw	r7,-12(r7)
 400a5e8:	d9001515 	stw	r4,84(sp)
 400a5ec:	d9c01a15 	stw	r7,104(sp)
 400a5f0:	d8801517 	ldw	r2,84(sp)
 400a5f4:	103fc10e 	bge	r2,zero,400a4fc <__alt_data_end+0xfc00a4fc>
 400a5f8:	d9002417 	ldw	r4,144(sp)
 400a5fc:	d9401a17 	ldw	r5,104(sp)
 400a600:	d80d883a 	mov	r6,sp
 400a604:	00bfffc4 	movi	r2,-1
 400a608:	d8800915 	stw	r2,36(sp)
 400a60c:	4009f7c0 	call	4009f7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400a610:	d9402417 	ldw	r5,144(sp)
 400a614:	d9000503 	ldbu	r4,20(sp)
 400a618:	4009ef00 	call	4009ef0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400a61c:	d9000503 	ldbu	r4,20(sp)
 400a620:	d9402417 	ldw	r5,144(sp)
 400a624:	d8800215 	stw	r2,8(sp)
 400a628:	4009ef00 	call	4009ef0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400a62c:	d8c02317 	ldw	r3,140(sp)
 400a630:	18bffe15 	stw	r2,-8(r3)
 400a634:	003fb106 	br	400a4fc <__alt_data_end+0xfc00a4fc>
 400a638:	10bfffc4 	addi	r2,r2,-1
 400a63c:	003f9d06 	br	400a4b4 <__alt_data_end+0xfc00a4b4>
 400a640:	42000044 	addi	r8,r8,1
 400a644:	da001f15 	stw	r8,124(sp)
 400a648:	38005326 	beq	r7,zero,400a798 <__gxx_personality_sj0+0x3f8>
 400a64c:	d8800417 	ldw	r2,16(sp)
 400a650:	39ffffc4 	addi	r7,r7,-1
 400a654:	11c5883a 	add	r2,r2,r7
 400a658:	d8801815 	stw	r2,96(sp)
 400a65c:	40005026 	beq	r8,zero,400a7a0 <__gxx_personality_sj0+0x400>
 400a660:	10007426 	beq	r2,zero,400a834 <__gxx_personality_sj0+0x494>
 400a664:	d8801917 	ldw	r2,100(sp)
 400a668:	1080020c 	andi	r2,r2,8
 400a66c:	d8802015 	stw	r2,128(sp)
 400a670:	1000a21e 	bne	r2,zero,400a8fc <__gxx_personality_sj0+0x55c>
 400a674:	d8c01c17 	ldw	r3,112(sp)
 400a678:	1800b026 	beq	r3,zero,400a93c <__gxx_personality_sj0+0x59c>
 400a67c:	01c100f4 	movhi	r7,1027
 400a680:	39f31904 	addi	r7,r7,-13212
 400a684:	d9c01e15 	stw	r7,120(sp)
 400a688:	d8001d05 	stb	zero,116(sp)
 400a68c:	d8c01817 	ldw	r3,96(sp)
 400a690:	d8001515 	stw	zero,84(sp)
 400a694:	0009883a 	mov	r4,zero
 400a698:	19400003 	ldbu	r5,0(r3)
 400a69c:	18800044 	addi	r2,r3,1
 400a6a0:	d9c01517 	ldw	r7,84(sp)
 400a6a4:	28c01fcc 	andi	r3,r5,127
 400a6a8:	1906983a 	sll	r3,r3,r4
 400a6ac:	29803fcc 	andi	r6,r5,255
 400a6b0:	3180201c 	xori	r6,r6,128
 400a6b4:	38ceb03a 	or	r7,r7,r3
 400a6b8:	d8801715 	stw	r2,92(sp)
 400a6bc:	31bfe004 	addi	r6,r6,-128
 400a6c0:	d9c01515 	stw	r7,84(sp)
 400a6c4:	210001c4 	addi	r4,r4,7
 400a6c8:	1007883a 	mov	r3,r2
 400a6cc:	303ff216 	blt	r6,zero,400a698 <__alt_data_end+0xfc00a698>
 400a6d0:	00c007c4 	movi	r3,31
 400a6d4:	19000836 	bltu	r3,r4,400a6f8 <__gxx_personality_sj0+0x358>
 400a6d8:	2940100c 	andi	r5,r5,64
 400a6dc:	28000626 	beq	r5,zero,400a6f8 <__gxx_personality_sj0+0x358>
 400a6e0:	01c00044 	movi	r7,1
 400a6e4:	3908983a 	sll	r4,r7,r4
 400a6e8:	d8c01517 	ldw	r3,84(sp)
 400a6ec:	0109c83a 	sub	r4,zero,r4
 400a6f0:	1906b03a 	or	r3,r3,r4
 400a6f4:	d8c01515 	stw	r3,84(sp)
 400a6f8:	d8001615 	stw	zero,88(sp)
 400a6fc:	0009883a 	mov	r4,zero
 400a700:	11400003 	ldbu	r5,0(r2)
 400a704:	d9c01617 	ldw	r7,88(sp)
 400a708:	10800044 	addi	r2,r2,1
 400a70c:	28c01fcc 	andi	r3,r5,127
 400a710:	1906983a 	sll	r3,r3,r4
 400a714:	29803fcc 	andi	r6,r5,255
 400a718:	3180201c 	xori	r6,r6,128
 400a71c:	38ceb03a 	or	r7,r7,r3
 400a720:	31bfe004 	addi	r6,r6,-128
 400a724:	d9c01615 	stw	r7,88(sp)
 400a728:	210001c4 	addi	r4,r4,7
 400a72c:	303ff416 	blt	r6,zero,400a700 <__alt_data_end+0xfc00a700>
 400a730:	008007c4 	movi	r2,31
 400a734:	11000736 	bltu	r2,r4,400a754 <__gxx_personality_sj0+0x3b4>
 400a738:	2940100c 	andi	r5,r5,64
 400a73c:	28000526 	beq	r5,zero,400a754 <__gxx_personality_sj0+0x3b4>
 400a740:	00c00044 	movi	r3,1
 400a744:	1908983a 	sll	r4,r3,r4
 400a748:	0109c83a 	sub	r4,zero,r4
 400a74c:	390eb03a 	or	r7,r7,r4
 400a750:	d9c01615 	stw	r7,88(sp)
 400a754:	d9001517 	ldw	r4,84(sp)
 400a758:	20003c26 	beq	r4,zero,400a84c <__gxx_personality_sj0+0x4ac>
 400a75c:	01003e0e 	bge	zero,r4,400a858 <__gxx_personality_sj0+0x4b8>
 400a760:	01ffffc4 	movi	r7,-1
 400a764:	200b883a 	mov	r5,r4
 400a768:	d809883a 	mov	r4,sp
 400a76c:	d9c00915 	stw	r7,36(sp)
 400a770:	4009e9c0 	call	4009e9c <_ZL15get_ttype_entryP16lsda_header_infom>
 400a774:	10005f26 	beq	r2,zero,400a8f4 <__gxx_personality_sj0+0x554>
 400a778:	d8c01e17 	ldw	r3,120(sp)
 400a77c:	1800571e 	bne	r3,zero,400a8dc <__gxx_personality_sj0+0x53c>
 400a780:	d9001617 	ldw	r4,88(sp)
 400a784:	20002926 	beq	r4,zero,400a82c <__gxx_personality_sj0+0x48c>
 400a788:	d9c01717 	ldw	r7,92(sp)
 400a78c:	390f883a 	add	r7,r7,r4
 400a790:	d9c01815 	stw	r7,96(sp)
 400a794:	003fbd06 	br	400a68c <__alt_data_end+0xfc00a68c>
 400a798:	d8c01f17 	ldw	r3,124(sp)
 400a79c:	1800251e 	bne	r3,zero,400a834 <__gxx_personality_sj0+0x494>
 400a7a0:	01000204 	movi	r4,8
 400a7a4:	d9001515 	stw	r4,84(sp)
 400a7a8:	003f1806 	br	400a40c <__alt_data_end+0xfc00a40c>
 400a7ac:	d8801c17 	ldw	r2,112(sp)
 400a7b0:	10000d26 	beq	r2,zero,400a7e8 <__gxx_personality_sj0+0x448>
 400a7b4:	00800184 	movi	r2,6
 400a7b8:	d8801515 	stw	r2,84(sp)
 400a7bc:	003f1306 	br	400a40c <__alt_data_end+0xfc00a40c>
 400a7c0:	00800044 	movi	r2,1
 400a7c4:	18bf4d1e 	bne	r3,r2,400a4fc <__alt_data_end+0xfc00a4fc>
 400a7c8:	400b3480 	call	400b348 <_ZSt9terminatev>
 400a7cc:	d9001b17 	ldw	r4,108(sp)
 400a7d0:	00800044 	movi	r2,1
 400a7d4:	113f4536 	bltu	r2,r4,400a4ec <__alt_data_end+0xfc00a4ec>
 400a7d8:	00800044 	movi	r2,1
 400a7dc:	18bf841e 	bne	r3,r2,400a5f0 <__alt_data_end+0xfc00a5f0>
 400a7e0:	d9002317 	ldw	r4,140(sp)
 400a7e4:	400b6940 	call	400b694 <__cxa_call_terminate>
 400a7e8:	d8c01b17 	ldw	r3,108(sp)
 400a7ec:	00800044 	movi	r2,1
 400a7f0:	10fff036 	bltu	r2,r3,400a7b4 <__alt_data_end+0xfc00a7b4>
 400a7f4:	d9002317 	ldw	r4,140(sp)
 400a7f8:	d8801817 	ldw	r2,96(sp)
 400a7fc:	d9c01517 	ldw	r7,84(sp)
 400a800:	d8c01a17 	ldw	r3,104(sp)
 400a804:	20bffc15 	stw	r2,-16(r4)
 400a808:	d8800717 	ldw	r2,28(sp)
 400a80c:	21fffb15 	stw	r7,-20(r4)
 400a810:	d9c01f17 	ldw	r7,124(sp)
 400a814:	20bfff15 	stw	r2,-4(r4)
 400a818:	00800184 	movi	r2,6
 400a81c:	20fffd15 	stw	r3,-12(r4)
 400a820:	21fffe15 	stw	r7,-8(r4)
 400a824:	d8801515 	stw	r2,84(sp)
 400a828:	003ef806 	br	400a40c <__alt_data_end+0xfc00a40c>
 400a82c:	d8801d03 	ldbu	r2,116(sp)
 400a830:	103fdb26 	beq	r2,zero,400a7a0 <__alt_data_end+0xfc00a7a0>
 400a834:	d8c01917 	ldw	r3,100(sp)
 400a838:	1880004c 	andi	r2,r3,1
 400a83c:	103fd81e 	bne	r2,zero,400a7a0 <__alt_data_end+0xfc00a7a0>
 400a840:	d8001515 	stw	zero,84(sp)
 400a844:	00c00084 	movi	r3,2
 400a848:	003f2306 	br	400a4d8 <__alt_data_end+0xfc00a4d8>
 400a84c:	00c00044 	movi	r3,1
 400a850:	d8c01d05 	stb	r3,116(sp)
 400a854:	003fca06 	br	400a780 <__alt_data_end+0xfc00a780>
 400a858:	d9001e17 	ldw	r4,120(sp)
 400a85c:	20000426 	beq	r4,zero,400a870 <__gxx_personality_sj0+0x4d0>
 400a860:	d9c02017 	ldw	r7,128(sp)
 400a864:	3800021e 	bne	r7,zero,400a870 <__gxx_personality_sj0+0x4d0>
 400a868:	d8801c17 	ldw	r2,112(sp)
 400a86c:	10002726 	beq	r2,zero,400a90c <__gxx_personality_sj0+0x56c>
 400a870:	d8801517 	ldw	r2,84(sp)
 400a874:	000d883a 	mov	r6,zero
 400a878:	000b883a 	mov	r5,zero
 400a87c:	0088303a 	nor	r4,zero,r2
 400a880:	d8800317 	ldw	r2,12(sp)
 400a884:	1109883a 	add	r4,r2,r4
 400a888:	20800003 	ldbu	r2,0(r4)
 400a88c:	21000044 	addi	r4,r4,1
 400a890:	10c01fcc 	andi	r3,r2,127
 400a894:	1946983a 	sll	r3,r3,r5
 400a898:	10803fcc 	andi	r2,r2,255
 400a89c:	1080201c 	xori	r2,r2,128
 400a8a0:	10bfe004 	addi	r2,r2,-128
 400a8a4:	30ccb03a 	or	r6,r6,r3
 400a8a8:	294001c4 	addi	r5,r5,7
 400a8ac:	103ff616 	blt	r2,zero,400a888 <__alt_data_end+0xfc00a888>
 400a8b0:	3005003a 	cmpeq	r2,r6,zero
 400a8b4:	10803fcc 	andi	r2,r2,255
 400a8b8:	103fb126 	beq	r2,zero,400a780 <__alt_data_end+0xfc00a780>
 400a8bc:	d9c01917 	ldw	r7,100(sp)
 400a8c0:	3880004c 	andi	r2,r7,1
 400a8c4:	103fb91e 	bne	r2,zero,400a7ac <__alt_data_end+0xfc00a7ac>
 400a8c8:	d8802017 	ldw	r2,128(sp)
 400a8cc:	10002d26 	beq	r2,zero,400a984 <__gxx_personality_sj0+0x5e4>
 400a8d0:	00800044 	movi	r2,1
 400a8d4:	d8800915 	stw	r2,36(sp)
 400a8d8:	400b3700 	call	400b370 <_ZSt10unexpectedv>
 400a8dc:	d9800704 	addi	r6,sp,28
 400a8e0:	180b883a 	mov	r5,r3
 400a8e4:	1009883a 	mov	r4,r2
 400a8e8:	400a0b00 	call	400a0b0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400a8ec:	10803fcc 	andi	r2,r2,255
 400a8f0:	103fa326 	beq	r2,zero,400a780 <__alt_data_end+0xfc00a780>
 400a8f4:	00c000c4 	movi	r3,3
 400a8f8:	003ef406 	br	400a4cc <__alt_data_end+0xfc00a4cc>
 400a8fc:	010100f4 	movhi	r4,1027
 400a900:	21331704 	addi	r4,r4,-13220
 400a904:	d9001e15 	stw	r4,120(sp)
 400a908:	003f5f06 	br	400a688 <__alt_data_end+0xfc00a688>
 400a90c:	d9001b17 	ldw	r4,108(sp)
 400a910:	00c00044 	movi	r3,1
 400a914:	193fd636 	bltu	r3,r4,400a870 <__alt_data_end+0xfc00a870>
 400a918:	01ffffc4 	movi	r7,-1
 400a91c:	d9c00915 	stw	r7,36(sp)
 400a920:	d9800717 	ldw	r6,28(sp)
 400a924:	d9c01517 	ldw	r7,84(sp)
 400a928:	d9401e17 	ldw	r5,120(sp)
 400a92c:	d809883a 	mov	r4,sp
 400a930:	400a2f80 	call	400a2f8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400a934:	1080005c 	xori	r2,r2,1
 400a938:	003fde06 	br	400a8b4 <__alt_data_end+0xfc00a8b4>
 400a93c:	d9001b17 	ldw	r4,108(sp)
 400a940:	00800044 	movi	r2,1
 400a944:	113f4d36 	bltu	r2,r4,400a67c <__alt_data_end+0xfc00a67c>
 400a948:	d9c02317 	ldw	r7,140(sp)
 400a94c:	38800017 	ldw	r2,0(r7)
 400a950:	1080004c 	andi	r2,r2,1
 400a954:	1000061e 	bne	r2,zero,400a970 <__gxx_personality_sj0+0x5d0>
 400a958:	d8c02317 	ldw	r3,140(sp)
 400a95c:	18800504 	addi	r2,r3,20
 400a960:	d8800715 	stw	r2,28(sp)
 400a964:	10bff017 	ldw	r2,-64(r2)
 400a968:	d8801e15 	stw	r2,120(sp)
 400a96c:	003f4606 	br	400a688 <__alt_data_end+0xfc00a688>
 400a970:	38bff517 	ldw	r2,-44(r7)
 400a974:	003ffa06 	br	400a960 <__alt_data_end+0xfc00a960>
 400a978:	d9000a17 	ldw	r4,40(sp)
 400a97c:	400ae380 	call	400ae38 <__cxa_begin_catch>
 400a980:	003f9106 	br	400a7c8 <__alt_data_end+0xfc00a7c8>
 400a984:	d9c01c17 	ldw	r7,112(sp)
 400a988:	383eda1e 	bne	r7,zero,400a4f4 <__alt_data_end+0xfc00a4f4>
 400a98c:	d8c01b17 	ldw	r3,108(sp)
 400a990:	00800044 	movi	r2,1
 400a994:	10fed736 	bltu	r2,r3,400a4f4 <__alt_data_end+0xfc00a4f4>
 400a998:	00c000c4 	movi	r3,3
 400a99c:	003f8e06 	br	400a7d8 <__alt_data_end+0xfc00a7d8>

0400a9a0 <__cxa_call_unexpected>:
 400a9a0:	00810074 	movhi	r2,1025
 400a9a4:	deffe604 	addi	sp,sp,-104
 400a9a8:	10a8e804 	addi	r2,r2,-23648
 400a9ac:	d8800d15 	stw	r2,52(sp)
 400a9b0:	008100b4 	movhi	r2,1026
 400a9b4:	10bbca04 	addi	r2,r2,-4312
 400a9b8:	d8800e15 	stw	r2,56(sp)
 400a9bc:	d8800104 	addi	r2,sp,4
 400a9c0:	d8800f15 	stw	r2,60(sp)
 400a9c4:	00810074 	movhi	r2,1025
 400a9c8:	10aa8b04 	addi	r2,r2,-21972
 400a9cc:	d9001415 	stw	r4,80(sp)
 400a9d0:	d9000704 	addi	r4,sp,28
 400a9d4:	dfc01915 	stw	ra,100(sp)
 400a9d8:	d8801015 	stw	r2,64(sp)
 400a9dc:	df001815 	stw	fp,96(sp)
 400a9e0:	dec01115 	stw	sp,68(sp)
 400a9e4:	400bb3c0 	call	400bb3c <_Unwind_SjLj_Register>
 400a9e8:	d9001417 	ldw	r4,80(sp)
 400a9ec:	400ae380 	call	400ae38 <__cxa_begin_catch>
 400a9f0:	d8c01417 	ldw	r3,80(sp)
 400a9f4:	18bffe17 	ldw	r2,-8(r3)
 400a9f8:	193ff717 	ldw	r4,-36(r3)
 400a9fc:	18fffd17 	ldw	r3,-12(r3)
 400aa00:	d8800315 	stw	r2,12(sp)
 400aa04:	d8c01615 	stw	r3,88(sp)
 400aa08:	d8c01417 	ldw	r3,80(sp)
 400aa0c:	18fffb17 	ldw	r3,-20(r3)
 400aa10:	d8c01515 	stw	r3,84(sp)
 400aa14:	d8c01417 	ldw	r3,80(sp)
 400aa18:	18fff817 	ldw	r3,-32(r3)
 400aa1c:	d8c01415 	stw	r3,80(sp)
 400aa20:	00c00044 	movi	r3,1
 400aa24:	d8c00815 	stw	r3,32(sp)
 400aa28:	400b3600 	call	400b360 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 400aa2c:	d8c00917 	ldw	r3,36(sp)
 400aa30:	d8800817 	ldw	r2,32(sp)
 400aa34:	d8c01715 	stw	r3,92(sp)
 400aa38:	10000a26 	beq	r2,zero,400aa64 <__cxa_call_unexpected+0xc4>
 400aa3c:	10bfffc4 	addi	r2,r2,-1
 400aa40:	10000126 	beq	r2,zero,400aa48 <__cxa_call_unexpected+0xa8>
 400aa44:	003b68fa 	trap	3
 400aa48:	d8000815 	stw	zero,32(sp)
 400aa4c:	400aeec0 	call	400aeec <__cxa_end_catch>
 400aa50:	400aeec0 	call	400aeec <__cxa_end_catch>
 400aa54:	d9001717 	ldw	r4,92(sp)
 400aa58:	00bfffc4 	movi	r2,-1
 400aa5c:	d8800815 	stw	r2,32(sp)
 400aa60:	400bd380 	call	400bd38 <_Unwind_SjLj_Resume>
 400aa64:	d9001717 	ldw	r4,92(sp)
 400aa68:	400ae380 	call	400ae38 <__cxa_begin_catch>
 400aa6c:	400b6ec0 	call	400b6ec <__cxa_get_globals_fast>
 400aa70:	10800017 	ldw	r2,0(r2)
 400aa74:	10c00b17 	ldw	r3,44(r2)
 400aa78:	18c0004c 	andi	r3,r3,1
 400aa7c:	18001e26 	beq	r3,zero,400aaf8 <__cxa_call_unexpected+0x158>
 400aa80:	10800017 	ldw	r2,0(r2)
 400aa84:	d8801715 	stw	r2,92(sp)
 400aa88:	d8801517 	ldw	r2,84(sp)
 400aa8c:	00802b0e 	bge	zero,r2,400ab3c <__cxa_call_unexpected+0x19c>
 400aa90:	d8c01717 	ldw	r3,92(sp)
 400aa94:	d8800317 	ldw	r2,12(sp)
 400aa98:	d9c01517 	ldw	r7,84(sp)
 400aa9c:	193ff017 	ldw	r4,-64(r3)
 400aaa0:	d9801617 	ldw	r6,88(sp)
 400aaa4:	d8800015 	stw	r2,0(sp)
 400aaa8:	180b883a 	mov	r5,r3
 400aaac:	00800084 	movi	r2,2
 400aab0:	d8800815 	stw	r2,32(sp)
 400aab4:	400a1380 	call	400a138 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400aab8:	10803fcc 	andi	r2,r2,255
 400aabc:	10001e1e 	bne	r2,zero,400ab38 <__cxa_call_unexpected+0x198>
 400aac0:	d8800317 	ldw	r2,12(sp)
 400aac4:	d9c01517 	ldw	r7,84(sp)
 400aac8:	d9801617 	ldw	r6,88(sp)
 400aacc:	010100b4 	movhi	r4,1026
 400aad0:	d8800015 	stw	r2,0(sp)
 400aad4:	213f8004 	addi	r4,r4,-512
 400aad8:	00800084 	movi	r2,2
 400aadc:	000b883a 	mov	r5,zero
 400aae0:	d8800815 	stw	r2,32(sp)
 400aae4:	400a1380 	call	400a138 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400aae8:	10803fcc 	andi	r2,r2,255
 400aaec:	1000051e 	bne	r2,zero,400ab04 <__cxa_call_unexpected+0x164>
 400aaf0:	d9001417 	ldw	r4,80(sp)
 400aaf4:	400b2880 	call	400b288 <_ZN10__cxxabiv111__terminateEPFvvE>
 400aaf8:	10801004 	addi	r2,r2,64
 400aafc:	d8801715 	stw	r2,92(sp)
 400ab00:	003fe106 	br	400aa88 <__alt_data_end+0xfc00aa88>
 400ab04:	01000104 	movi	r4,4
 400ab08:	400b5300 	call	400b530 <__cxa_allocate_exception>
 400ab0c:	00c100b4 	movhi	r3,1026
 400ab10:	18ff9b04 	addi	r3,r3,-404
 400ab14:	01810074 	movhi	r6,1025
 400ab18:	014100b4 	movhi	r5,1026
 400ab1c:	10c00015 	stw	r3,0(r2)
 400ab20:	31adc204 	addi	r6,r6,-18680
 400ab24:	00c00084 	movi	r3,2
 400ab28:	297f8004 	addi	r5,r5,-512
 400ab2c:	1009883a 	mov	r4,r2
 400ab30:	d8c00815 	stw	r3,32(sp)
 400ab34:	400ac680 	call	400ac68 <__cxa_throw>
 400ab38:	400acf80 	call	400acf8 <__cxa_rethrow>
 400ab3c:	d9401617 	ldw	r5,88(sp)
 400ab40:	00800084 	movi	r2,2
 400ab44:	d9800104 	addi	r6,sp,4
 400ab48:	0009883a 	mov	r4,zero
 400ab4c:	d8800815 	stw	r2,32(sp)
 400ab50:	4009f7c0 	call	4009f7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400ab54:	d9801717 	ldw	r6,92(sp)
 400ab58:	d9c01517 	ldw	r7,84(sp)
 400ab5c:	d9000104 	addi	r4,sp,4
 400ab60:	317ff017 	ldw	r5,-64(r6)
 400ab64:	400a2f80 	call	400a2f8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400ab68:	10803fcc 	andi	r2,r2,255
 400ab6c:	1000171e 	bne	r2,zero,400abcc <__cxa_call_unexpected+0x22c>
 400ab70:	d9c01517 	ldw	r7,84(sp)
 400ab74:	014100b4 	movhi	r5,1026
 400ab78:	00800084 	movi	r2,2
 400ab7c:	297f8004 	addi	r5,r5,-512
 400ab80:	000d883a 	mov	r6,zero
 400ab84:	d9000104 	addi	r4,sp,4
 400ab88:	d8800815 	stw	r2,32(sp)
 400ab8c:	400a2f80 	call	400a2f8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400ab90:	10803fcc 	andi	r2,r2,255
 400ab94:	103fd626 	beq	r2,zero,400aaf0 <__alt_data_end+0xfc00aaf0>
 400ab98:	01000104 	movi	r4,4
 400ab9c:	400b5300 	call	400b530 <__cxa_allocate_exception>
 400aba0:	00c100b4 	movhi	r3,1026
 400aba4:	18ff9b04 	addi	r3,r3,-404
 400aba8:	01810074 	movhi	r6,1025
 400abac:	014100b4 	movhi	r5,1026
 400abb0:	10c00015 	stw	r3,0(r2)
 400abb4:	31adc204 	addi	r6,r6,-18680
 400abb8:	00c00084 	movi	r3,2
 400abbc:	297f8004 	addi	r5,r5,-512
 400abc0:	1009883a 	mov	r4,r2
 400abc4:	d8c00815 	stw	r3,32(sp)
 400abc8:	400ac680 	call	400ac68 <__cxa_throw>
 400abcc:	400acf80 	call	400acf8 <__cxa_rethrow>

0400abd0 <_ZNKSt9bad_alloc4whatEv>:
 400abd0:	008100b4 	movhi	r2,1026
 400abd4:	10bf3804 	addi	r2,r2,-800
 400abd8:	f800283a 	ret

0400abdc <_ZNSt9bad_allocD1Ev>:
 400abdc:	008100b4 	movhi	r2,1026
 400abe0:	10bf4504 	addi	r2,r2,-748
 400abe4:	20800015 	stw	r2,0(r4)
 400abe8:	400b7041 	jmpi	400b704 <_ZNSt9exceptionD1Ev>

0400abec <_ZNSt9bad_allocD0Ev>:
 400abec:	defffe04 	addi	sp,sp,-8
 400abf0:	008100b4 	movhi	r2,1026
 400abf4:	dc000015 	stw	r16,0(sp)
 400abf8:	dfc00115 	stw	ra,4(sp)
 400abfc:	10bf4504 	addi	r2,r2,-748
 400ac00:	20800015 	stw	r2,0(r4)
 400ac04:	2021883a 	mov	r16,r4
 400ac08:	400b7040 	call	400b704 <_ZNSt9exceptionD1Ev>
 400ac0c:	8009883a 	mov	r4,r16
 400ac10:	dfc00117 	ldw	ra,4(sp)
 400ac14:	dc000017 	ldw	r16,0(sp)
 400ac18:	dec00204 	addi	sp,sp,8
 400ac1c:	400ac201 	jmpi	400ac20 <_ZdlPv>

0400ac20 <_ZdlPv>:
 400ac20:	400becc1 	jmpi	400becc <free>

0400ac24 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 400ac24:	defffe04 	addi	sp,sp,-8
 400ac28:	dfc00115 	stw	ra,4(sp)
 400ac2c:	dc000015 	stw	r16,0(sp)
 400ac30:	00800044 	movi	r2,1
 400ac34:	11000a36 	bltu	r2,r4,400ac60 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 400ac38:	28bff617 	ldw	r2,-40(r5)
 400ac3c:	2c000504 	addi	r16,r5,20
 400ac40:	10000226 	beq	r2,zero,400ac4c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 400ac44:	8009883a 	mov	r4,r16
 400ac48:	103ee83a 	callr	r2
 400ac4c:	8009883a 	mov	r4,r16
 400ac50:	dfc00117 	ldw	ra,4(sp)
 400ac54:	dc000017 	ldw	r16,0(sp)
 400ac58:	dec00204 	addi	sp,sp,8
 400ac5c:	400b5901 	jmpi	400b590 <__cxa_free_exception>
 400ac60:	293ff817 	ldw	r4,-32(r5)
 400ac64:	400b2880 	call	400b288 <_ZN10__cxxabiv111__terminateEPFvvE>

0400ac68 <__cxa_throw>:
 400ac68:	defffb04 	addi	sp,sp,-20
 400ac6c:	dfc00415 	stw	ra,16(sp)
 400ac70:	dcc00315 	stw	r19,12(sp)
 400ac74:	dc800215 	stw	r18,8(sp)
 400ac78:	2827883a 	mov	r19,r5
 400ac7c:	3025883a 	mov	r18,r6
 400ac80:	dc400115 	stw	r17,4(sp)
 400ac84:	dc000015 	stw	r16,0(sp)
 400ac88:	2021883a 	mov	r16,r4
 400ac8c:	400b6f80 	call	400b6f8 <__cxa_get_globals>
 400ac90:	10c00117 	ldw	r3,4(r2)
 400ac94:	847ffb04 	addi	r17,r16,-20
 400ac98:	18c00044 	addi	r3,r3,1
 400ac9c:	10c00115 	stw	r3,4(r2)
 400aca0:	00800044 	movi	r2,1
 400aca4:	80bfef15 	stw	r2,-68(r16)
 400aca8:	84fff015 	stw	r19,-64(r16)
 400acac:	84bff115 	stw	r18,-60(r16)
 400acb0:	400b3c00 	call	400b3c0 <_ZSt14get_unexpectedv>
 400acb4:	80bff215 	stw	r2,-56(r16)
 400acb8:	400b39c0 	call	400b39c <_ZSt13get_terminatev>
 400acbc:	80bff315 	stw	r2,-52(r16)
 400acc0:	0090caf4 	movhi	r2,17195
 400acc4:	108ac004 	addi	r2,r2,11008
 400acc8:	80bffb15 	stw	r2,-20(r16)
 400accc:	0091d3b4 	movhi	r2,18254
 400acd0:	109550c4 	addi	r2,r2,21827
 400acd4:	80bffc15 	stw	r2,-16(r16)
 400acd8:	00810074 	movhi	r2,1025
 400acdc:	10ab0904 	addi	r2,r2,-21468
 400ace0:	8809883a 	mov	r4,r17
 400ace4:	80bffd15 	stw	r2,-12(r16)
 400ace8:	400bc240 	call	400bc24 <_Unwind_SjLj_RaiseException>
 400acec:	8809883a 	mov	r4,r17
 400acf0:	400ae380 	call	400ae38 <__cxa_begin_catch>
 400acf4:	400b3480 	call	400b348 <_ZSt9terminatev>

0400acf8 <__cxa_rethrow>:
 400acf8:	defffe04 	addi	sp,sp,-8
 400acfc:	dfc00115 	stw	ra,4(sp)
 400ad00:	dc000015 	stw	r16,0(sp)
 400ad04:	400b6f80 	call	400b6f8 <__cxa_get_globals>
 400ad08:	10c00117 	ldw	r3,4(r2)
 400ad0c:	11000017 	ldw	r4,0(r2)
 400ad10:	18c00044 	addi	r3,r3,1
 400ad14:	10c00115 	stw	r3,4(r2)
 400ad18:	20001126 	beq	r4,zero,400ad60 <__cxa_rethrow+0x68>
 400ad1c:	21400b17 	ldw	r5,44(r4)
 400ad20:	01ef3574 	movhi	r7,48341
 400ad24:	39f54004 	addi	r7,r7,-11008
 400ad28:	29cf883a 	add	r7,r5,r7
 400ad2c:	20c00c17 	ldw	r3,48(r4)
 400ad30:	394d803a 	cmpltu	r6,r7,r5
 400ad34:	016e2cb4 	movhi	r5,47282
 400ad38:	296aaf04 	addi	r5,r5,-21828
 400ad3c:	1947883a 	add	r3,r3,r5
 400ad40:	30c7883a 	add	r3,r6,r3
 400ad44:	18000726 	beq	r3,zero,400ad64 <__cxa_rethrow+0x6c>
 400ad48:	10000015 	stw	zero,0(r2)
 400ad4c:	24000b04 	addi	r16,r4,44
 400ad50:	8009883a 	mov	r4,r16
 400ad54:	400bd7c0 	call	400bd7c <_Unwind_SjLj_Resume_or_Rethrow>
 400ad58:	8009883a 	mov	r4,r16
 400ad5c:	400ae380 	call	400ae38 <__cxa_begin_catch>
 400ad60:	400b3480 	call	400b348 <_ZSt9terminatev>
 400ad64:	00c00044 	movi	r3,1
 400ad68:	19fff736 	bltu	r3,r7,400ad48 <__alt_data_end+0xfc00ad48>
 400ad6c:	20800517 	ldw	r2,20(r4)
 400ad70:	0085c83a 	sub	r2,zero,r2
 400ad74:	20800515 	stw	r2,20(r4)
 400ad78:	003ff406 	br	400ad4c <__alt_data_end+0xfc00ad4c>

0400ad7c <__cxa_pure_virtual>:
 400ad7c:	014100b4 	movhi	r5,1026
 400ad80:	deffff04 	addi	sp,sp,-4
 400ad84:	297f4804 	addi	r5,r5,-736
 400ad88:	018006c4 	movi	r6,27
 400ad8c:	01000084 	movi	r4,2
 400ad90:	dfc00015 	stw	ra,0(sp)
 400ad94:	401ccf40 	call	401ccf4 <write>
 400ad98:	400b3480 	call	400b348 <_ZSt9terminatev>

0400ad9c <__cxa_deleted_virtual>:
 400ad9c:	014100b4 	movhi	r5,1026
 400ada0:	deffff04 	addi	sp,sp,-4
 400ada4:	297f4f04 	addi	r5,r5,-708
 400ada8:	01800784 	movi	r6,30
 400adac:	01000084 	movi	r4,2
 400adb0:	dfc00015 	stw	ra,0(sp)
 400adb4:	401ccf40 	call	401ccf4 <write>
 400adb8:	400b3480 	call	400b348 <_ZSt9terminatev>

0400adbc <__cxa_guard_acquire>:
 400adbc:	20800007 	ldb	r2,0(r4)
 400adc0:	1000061e 	bne	r2,zero,400addc <__cxa_guard_acquire+0x20>
 400adc4:	20800047 	ldb	r2,1(r4)
 400adc8:	1000061e 	bne	r2,zero,400ade4 <__cxa_guard_acquire+0x28>
 400adcc:	00800044 	movi	r2,1
 400add0:	20800045 	stb	r2,1(r4)
 400add4:	00800044 	movi	r2,1
 400add8:	f800283a 	ret
 400addc:	0005883a 	mov	r2,zero
 400ade0:	f800283a 	ret
 400ade4:	deffff04 	addi	sp,sp,-4
 400ade8:	01000104 	movi	r4,4
 400adec:	dfc00015 	stw	ra,0(sp)
 400adf0:	400b5300 	call	400b530 <__cxa_allocate_exception>
 400adf4:	00c100b4 	movhi	r3,1026
 400adf8:	01810074 	movhi	r6,1025
 400adfc:	014100b4 	movhi	r5,1026
 400ae00:	18ffb604 	addi	r3,r3,-296
 400ae04:	31adcf04 	addi	r6,r6,-18628
 400ae08:	297fb104 	addi	r5,r5,-316
 400ae0c:	1009883a 	mov	r4,r2
 400ae10:	10c00015 	stw	r3,0(r2)
 400ae14:	400ac680 	call	400ac68 <__cxa_throw>

0400ae18 <__cxa_guard_abort>:
 400ae18:	20000045 	stb	zero,1(r4)
 400ae1c:	f800283a 	ret

0400ae20 <__cxa_guard_release>:
 400ae20:	00800044 	movi	r2,1
 400ae24:	20000045 	stb	zero,1(r4)
 400ae28:	20800005 	stb	r2,0(r4)
 400ae2c:	f800283a 	ret

0400ae30 <__cxa_get_exception_ptr>:
 400ae30:	20bfff17 	ldw	r2,-4(r4)
 400ae34:	f800283a 	ret

0400ae38 <__cxa_begin_catch>:
 400ae38:	defffe04 	addi	sp,sp,-8
 400ae3c:	dc000015 	stw	r16,0(sp)
 400ae40:	dfc00115 	stw	ra,4(sp)
 400ae44:	2021883a 	mov	r16,r4
 400ae48:	400b6f80 	call	400b6f8 <__cxa_get_globals>
 400ae4c:	81000017 	ldw	r4,0(r16)
 400ae50:	80c00117 	ldw	r3,4(r16)
 400ae54:	01af3574 	movhi	r6,48341
 400ae58:	31b54004 	addi	r6,r6,-11008
 400ae5c:	016e2cb4 	movhi	r5,47282
 400ae60:	296aaf04 	addi	r5,r5,-21828
 400ae64:	218d883a 	add	r6,r4,r6
 400ae68:	3109803a 	cmpltu	r4,r6,r4
 400ae6c:	1947883a 	add	r3,r3,r5
 400ae70:	20c7883a 	add	r3,r4,r3
 400ae74:	817ff504 	addi	r5,r16,-44
 400ae78:	11000017 	ldw	r4,0(r2)
 400ae7c:	18000726 	beq	r3,zero,400ae9c <__cxa_begin_catch+0x64>
 400ae80:	2000191e 	bne	r4,zero,400aee8 <__cxa_begin_catch+0xb0>
 400ae84:	11400015 	stw	r5,0(r2)
 400ae88:	0005883a 	mov	r2,zero
 400ae8c:	dfc00117 	ldw	ra,4(sp)
 400ae90:	dc000017 	ldw	r16,0(sp)
 400ae94:	dec00204 	addi	sp,sp,8
 400ae98:	f800283a 	ret
 400ae9c:	01c00044 	movi	r7,1
 400aea0:	39bff736 	bltu	r7,r6,400ae80 <__alt_data_end+0xfc00ae80>
 400aea4:	80fffa17 	ldw	r3,-24(r16)
 400aea8:	18000d16 	blt	r3,zero,400aee0 <__cxa_begin_catch+0xa8>
 400aeac:	18c00044 	addi	r3,r3,1
 400aeb0:	11800117 	ldw	r6,4(r2)
 400aeb4:	80fffa15 	stw	r3,-24(r16)
 400aeb8:	30ffffc4 	addi	r3,r6,-1
 400aebc:	10c00115 	stw	r3,4(r2)
 400aec0:	21400226 	beq	r4,r5,400aecc <__cxa_begin_catch+0x94>
 400aec4:	813ff915 	stw	r4,-28(r16)
 400aec8:	11400015 	stw	r5,0(r2)
 400aecc:	80bfff17 	ldw	r2,-4(r16)
 400aed0:	dfc00117 	ldw	ra,4(sp)
 400aed4:	dc000017 	ldw	r16,0(sp)
 400aed8:	dec00204 	addi	sp,sp,8
 400aedc:	f800283a 	ret
 400aee0:	38c7c83a 	sub	r3,r7,r3
 400aee4:	003ff206 	br	400aeb0 <__alt_data_end+0xfc00aeb0>
 400aee8:	400b3480 	call	400b348 <_ZSt9terminatev>

0400aeec <__cxa_end_catch>:
 400aeec:	deffff04 	addi	sp,sp,-4
 400aef0:	dfc00015 	stw	ra,0(sp)
 400aef4:	400b6ec0 	call	400b6ec <__cxa_get_globals_fast>
 400aef8:	11000017 	ldw	r4,0(r2)
 400aefc:	20001426 	beq	r4,zero,400af50 <__cxa_end_catch+0x64>
 400af00:	21400b17 	ldw	r5,44(r4)
 400af04:	01ef3574 	movhi	r7,48341
 400af08:	39f54004 	addi	r7,r7,-11008
 400af0c:	29cf883a 	add	r7,r5,r7
 400af10:	20c00c17 	ldw	r3,48(r4)
 400af14:	394d803a 	cmpltu	r6,r7,r5
 400af18:	016e2cb4 	movhi	r5,47282
 400af1c:	296aaf04 	addi	r5,r5,-21828
 400af20:	1947883a 	add	r3,r3,r5
 400af24:	30c7883a 	add	r3,r6,r3
 400af28:	18000c1e 	bne	r3,zero,400af5c <__cxa_end_catch+0x70>
 400af2c:	00c00044 	movi	r3,1
 400af30:	19c00a36 	bltu	r3,r7,400af5c <__cxa_end_catch+0x70>
 400af34:	20c00517 	ldw	r3,20(r4)
 400af38:	18000d16 	blt	r3,zero,400af70 <__cxa_end_catch+0x84>
 400af3c:	18ffffc4 	addi	r3,r3,-1
 400af40:	18001026 	beq	r3,zero,400af84 <__cxa_end_catch+0x98>
 400af44:	00bfffc4 	movi	r2,-1
 400af48:	18801426 	beq	r3,r2,400af9c <__cxa_end_catch+0xb0>
 400af4c:	20c00515 	stw	r3,20(r4)
 400af50:	dfc00017 	ldw	ra,0(sp)
 400af54:	dec00104 	addi	sp,sp,4
 400af58:	f800283a 	ret
 400af5c:	21000b04 	addi	r4,r4,44
 400af60:	10000015 	stw	zero,0(r2)
 400af64:	dfc00017 	ldw	ra,0(sp)
 400af68:	dec00104 	addi	sp,sp,4
 400af6c:	400bdc81 	jmpi	400bdc8 <_Unwind_DeleteException>
 400af70:	18c00044 	addi	r3,r3,1
 400af74:	183ff51e 	bne	r3,zero,400af4c <__alt_data_end+0xfc00af4c>
 400af78:	21400417 	ldw	r5,16(r4)
 400af7c:	11400015 	stw	r5,0(r2)
 400af80:	003ff206 	br	400af4c <__alt_data_end+0xfc00af4c>
 400af84:	20c00417 	ldw	r3,16(r4)
 400af88:	21000b04 	addi	r4,r4,44
 400af8c:	10c00015 	stw	r3,0(r2)
 400af90:	dfc00017 	ldw	ra,0(sp)
 400af94:	dec00104 	addi	sp,sp,4
 400af98:	400bdc81 	jmpi	400bdc8 <_Unwind_DeleteException>
 400af9c:	400b3480 	call	400b348 <_ZSt9terminatev>

0400afa0 <_ZSt18uncaught_exceptionv>:
 400afa0:	deffff04 	addi	sp,sp,-4
 400afa4:	dfc00015 	stw	ra,0(sp)
 400afa8:	400b6f80 	call	400b6f8 <__cxa_get_globals>
 400afac:	10800117 	ldw	r2,4(r2)
 400afb0:	1004c03a 	cmpne	r2,r2,zero
 400afb4:	dfc00017 	ldw	ra,0(sp)
 400afb8:	dec00104 	addi	sp,sp,4
 400afbc:	f800283a 	ret

0400afc0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 400afc0:	20800017 	ldw	r2,0(r4)
 400afc4:	defffa04 	addi	sp,sp,-24
 400afc8:	dc000415 	stw	r16,16(sp)
 400afcc:	10800617 	ldw	r2,24(r2)
 400afd0:	3021883a 	mov	r16,r6
 400afd4:	31800017 	ldw	r6,0(r6)
 400afd8:	00c00404 	movi	r3,16
 400afdc:	d8c00215 	stw	r3,8(sp)
 400afe0:	dfc00515 	stw	ra,20(sp)
 400afe4:	d8000015 	stw	zero,0(sp)
 400afe8:	d8000115 	stw	zero,4(sp)
 400afec:	d8000315 	stw	zero,12(sp)
 400aff0:	d80f883a 	mov	r7,sp
 400aff4:	103ee83a 	callr	r2
 400aff8:	d8800117 	ldw	r2,4(sp)
 400affc:	00c00184 	movi	r3,6
 400b000:	1080018c 	andi	r2,r2,6
 400b004:	10c00526 	beq	r2,r3,400b01c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 400b008:	0005883a 	mov	r2,zero
 400b00c:	dfc00517 	ldw	ra,20(sp)
 400b010:	dc000417 	ldw	r16,16(sp)
 400b014:	dec00604 	addi	sp,sp,24
 400b018:	f800283a 	ret
 400b01c:	d8c00017 	ldw	r3,0(sp)
 400b020:	00800044 	movi	r2,1
 400b024:	80c00015 	stw	r3,0(r16)
 400b028:	dfc00517 	ldw	ra,20(sp)
 400b02c:	dc000417 	ldw	r16,16(sp)
 400b030:	dec00604 	addi	sp,sp,24
 400b034:	f800283a 	ret

0400b038 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 400b038:	d8800017 	ldw	r2,0(sp)
 400b03c:	11800226 	beq	r2,r6,400b048 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 400b040:	00800044 	movi	r2,1
 400b044:	f800283a 	ret
 400b048:	00800184 	movi	r2,6
 400b04c:	f800283a 	ret

0400b050 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 400b050:	008100b4 	movhi	r2,1026
 400b054:	10bf6504 	addi	r2,r2,-620
 400b058:	20800015 	stw	r2,0(r4)
 400b05c:	4009b6c1 	jmpi	4009b6c <_ZNSt9type_infoD1Ev>

0400b060 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 400b060:	defffe04 	addi	sp,sp,-8
 400b064:	008100b4 	movhi	r2,1026
 400b068:	dc000015 	stw	r16,0(sp)
 400b06c:	dfc00115 	stw	ra,4(sp)
 400b070:	10bf6504 	addi	r2,r2,-620
 400b074:	20800015 	stw	r2,0(r4)
 400b078:	2021883a 	mov	r16,r4
 400b07c:	4009b6c0 	call	4009b6c <_ZNSt9type_infoD1Ev>
 400b080:	8009883a 	mov	r4,r16
 400b084:	dfc00117 	ldw	ra,4(sp)
 400b088:	dc000017 	ldw	r16,0(sp)
 400b08c:	dec00204 	addi	sp,sp,8
 400b090:	400ac201 	jmpi	400ac20 <_ZdlPv>

0400b094 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 400b094:	21000117 	ldw	r4,4(r4)
 400b098:	29400117 	ldw	r5,4(r5)
 400b09c:	defffd04 	addi	sp,sp,-12
 400b0a0:	dc400115 	stw	r17,4(sp)
 400b0a4:	dc000015 	stw	r16,0(sp)
 400b0a8:	dfc00215 	stw	ra,8(sp)
 400b0ac:	3023883a 	mov	r17,r6
 400b0b0:	3821883a 	mov	r16,r7
 400b0b4:	21400526 	beq	r4,r5,400b0cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 400b0b8:	20c00007 	ldb	r3,0(r4)
 400b0bc:	00800a84 	movi	r2,42
 400b0c0:	18800d26 	beq	r3,r2,400b0f8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400b0c4:	400cf540 	call	400cf54 <strcmp>
 400b0c8:	10000b1e 	bne	r2,zero,400b0f8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400b0cc:	00800204 	movi	r2,8
 400b0d0:	80800315 	stw	r2,12(r16)
 400b0d4:	00800184 	movi	r2,6
 400b0d8:	80800115 	stw	r2,4(r16)
 400b0dc:	84400015 	stw	r17,0(r16)
 400b0e0:	00800044 	movi	r2,1
 400b0e4:	dfc00217 	ldw	ra,8(sp)
 400b0e8:	dc400117 	ldw	r17,4(sp)
 400b0ec:	dc000017 	ldw	r16,0(sp)
 400b0f0:	dec00304 	addi	sp,sp,12
 400b0f4:	f800283a 	ret
 400b0f8:	0005883a 	mov	r2,zero
 400b0fc:	003ff906 	br	400b0e4 <__alt_data_end+0xfc00b0e4>

0400b100 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 400b100:	defffa04 	addi	sp,sp,-24
 400b104:	dc800415 	stw	r18,16(sp)
 400b108:	d8800817 	ldw	r2,32(sp)
 400b10c:	dc800617 	ldw	r18,24(sp)
 400b110:	dc400315 	stw	r17,12(sp)
 400b114:	dc000215 	stw	r16,8(sp)
 400b118:	dfc00515 	stw	ra,20(sp)
 400b11c:	dc400917 	ldw	r17,36(sp)
 400b120:	24000117 	ldw	r16,4(r4)
 400b124:	90801526 	beq	r18,r2,400b17c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 400b128:	39400117 	ldw	r5,4(r7)
 400b12c:	2c000826 	beq	r5,r16,400b150 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 400b130:	80c00007 	ldb	r3,0(r16)
 400b134:	00800a84 	movi	r2,42
 400b138:	18800926 	beq	r3,r2,400b160 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400b13c:	8009883a 	mov	r4,r16
 400b140:	d9800115 	stw	r6,4(sp)
 400b144:	400cf540 	call	400cf54 <strcmp>
 400b148:	d9800117 	ldw	r6,4(sp)
 400b14c:	1000041e 	bne	r2,zero,400b160 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400b150:	00800044 	movi	r2,1
 400b154:	8c800015 	stw	r18,0(r17)
 400b158:	89800115 	stw	r6,4(r17)
 400b15c:	88800315 	stw	r2,12(r17)
 400b160:	0005883a 	mov	r2,zero
 400b164:	dfc00517 	ldw	ra,20(sp)
 400b168:	dc800417 	ldw	r18,16(sp)
 400b16c:	dc400317 	ldw	r17,12(sp)
 400b170:	dc000217 	ldw	r16,8(sp)
 400b174:	dec00604 	addi	sp,sp,24
 400b178:	f800283a 	ret
 400b17c:	d8800717 	ldw	r2,28(sp)
 400b180:	11400117 	ldw	r5,4(r2)
 400b184:	81400a26 	beq	r16,r5,400b1b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 400b188:	80c00007 	ldb	r3,0(r16)
 400b18c:	00800a84 	movi	r2,42
 400b190:	18800c26 	beq	r3,r2,400b1c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 400b194:	8009883a 	mov	r4,r16
 400b198:	d9800115 	stw	r6,4(sp)
 400b19c:	d9c00015 	stw	r7,0(sp)
 400b1a0:	400cf540 	call	400cf54 <strcmp>
 400b1a4:	d9800117 	ldw	r6,4(sp)
 400b1a8:	d9c00017 	ldw	r7,0(sp)
 400b1ac:	1000021e 	bne	r2,zero,400b1b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 400b1b0:	89800215 	stw	r6,8(r17)
 400b1b4:	003fea06 	br	400b160 <__alt_data_end+0xfc00b160>
 400b1b8:	39400117 	ldw	r5,4(r7)
 400b1bc:	817fdf1e 	bne	r16,r5,400b13c <__alt_data_end+0xfc00b13c>
 400b1c0:	003fe306 	br	400b150 <__alt_data_end+0xfc00b150>
 400b1c4:	38800117 	ldw	r2,4(r7)
 400b1c8:	80bfe51e 	bne	r16,r2,400b160 <__alt_data_end+0xfc00b160>
 400b1cc:	003fe006 	br	400b150 <__alt_data_end+0xfc00b150>

0400b1d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 400b1d0:	20800117 	ldw	r2,4(r4)
 400b1d4:	28c00117 	ldw	r3,4(r5)
 400b1d8:	10c02926 	beq	r2,r3,400b280 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 400b1dc:	defffb04 	addi	sp,sp,-20
 400b1e0:	dcc00315 	stw	r19,12(sp)
 400b1e4:	dc800215 	stw	r18,8(sp)
 400b1e8:	dc400115 	stw	r17,4(sp)
 400b1ec:	dc000015 	stw	r16,0(sp)
 400b1f0:	dfc00415 	stw	ra,16(sp)
 400b1f4:	2821883a 	mov	r16,r5
 400b1f8:	11400007 	ldb	r5,0(r2)
 400b1fc:	2025883a 	mov	r18,r4
 400b200:	01000a84 	movi	r4,42
 400b204:	3823883a 	mov	r17,r7
 400b208:	3027883a 	mov	r19,r6
 400b20c:	29000626 	beq	r5,r4,400b228 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400b210:	180b883a 	mov	r5,r3
 400b214:	1009883a 	mov	r4,r2
 400b218:	400cf540 	call	400cf54 <strcmp>
 400b21c:	1000021e 	bne	r2,zero,400b228 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400b220:	00800044 	movi	r2,1
 400b224:	00000306 	br	400b234 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 400b228:	008000c4 	movi	r2,3
 400b22c:	1440082e 	bgeu	r2,r17,400b250 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 400b230:	0005883a 	mov	r2,zero
 400b234:	dfc00417 	ldw	ra,16(sp)
 400b238:	dcc00317 	ldw	r19,12(sp)
 400b23c:	dc800217 	ldw	r18,8(sp)
 400b240:	dc400117 	ldw	r17,4(sp)
 400b244:	dc000017 	ldw	r16,0(sp)
 400b248:	dec00504 	addi	sp,sp,20
 400b24c:	f800283a 	ret
 400b250:	80800017 	ldw	r2,0(r16)
 400b254:	980d883a 	mov	r6,r19
 400b258:	900b883a 	mov	r5,r18
 400b25c:	10800517 	ldw	r2,20(r2)
 400b260:	8009883a 	mov	r4,r16
 400b264:	dfc00417 	ldw	ra,16(sp)
 400b268:	dcc00317 	ldw	r19,12(sp)
 400b26c:	dc800217 	ldw	r18,8(sp)
 400b270:	dc400117 	ldw	r17,4(sp)
 400b274:	dc000017 	ldw	r16,0(sp)
 400b278:	dec00504 	addi	sp,sp,20
 400b27c:	1000683a 	jmp	r2
 400b280:	00800044 	movi	r2,1
 400b284:	f800283a 	ret

0400b288 <_ZN10__cxxabiv111__terminateEPFvvE>:
 400b288:	00810074 	movhi	r2,1025
 400b28c:	deffef04 	addi	sp,sp,-68
 400b290:	10a8e804 	addi	r2,r2,-23648
 400b294:	d8800615 	stw	r2,24(sp)
 400b298:	008100b4 	movhi	r2,1026
 400b29c:	10bbce04 	addi	r2,r2,-4296
 400b2a0:	d8800715 	stw	r2,28(sp)
 400b2a4:	00810074 	movhi	r2,1025
 400b2a8:	10acb804 	addi	r2,r2,-19744
 400b2ac:	d9000d15 	stw	r4,52(sp)
 400b2b0:	d809883a 	mov	r4,sp
 400b2b4:	d8800915 	stw	r2,36(sp)
 400b2b8:	dfc01015 	stw	ra,64(sp)
 400b2bc:	df000f15 	stw	fp,60(sp)
 400b2c0:	dec00815 	stw	sp,32(sp)
 400b2c4:	dec00a15 	stw	sp,40(sp)
 400b2c8:	400bb3c0 	call	400bb3c <_Unwind_SjLj_Register>
 400b2cc:	00800044 	movi	r2,1
 400b2d0:	d8800115 	stw	r2,4(sp)
 400b2d4:	d8800d17 	ldw	r2,52(sp)
 400b2d8:	103ee83a 	callr	r2
 400b2dc:	400be540 	call	400be54 <abort>
 400b2e0:	d8c00217 	ldw	r3,8(sp)
 400b2e4:	d8800117 	ldw	r2,4(sp)
 400b2e8:	d8c00d15 	stw	r3,52(sp)
 400b2ec:	d8c00317 	ldw	r3,12(sp)
 400b2f0:	d8c00e15 	stw	r3,56(sp)
 400b2f4:	10000b26 	beq	r2,zero,400b324 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 400b2f8:	10bfffc4 	addi	r2,r2,-1
 400b2fc:	10000126 	beq	r2,zero,400b304 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 400b300:	003b68fa 	trap	3
 400b304:	d8000115 	stw	zero,4(sp)
 400b308:	400aeec0 	call	400aeec <__cxa_end_catch>
 400b30c:	d8c00e17 	ldw	r3,56(sp)
 400b310:	00bfffc4 	movi	r2,-1
 400b314:	18800826 	beq	r3,r2,400b338 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 400b318:	d9000d17 	ldw	r4,52(sp)
 400b31c:	d8800115 	stw	r2,4(sp)
 400b320:	400bd380 	call	400bd38 <_Unwind_SjLj_Resume>
 400b324:	d9000d17 	ldw	r4,52(sp)
 400b328:	400ae380 	call	400ae38 <__cxa_begin_catch>
 400b32c:	00800084 	movi	r2,2
 400b330:	d8800115 	stw	r2,4(sp)
 400b334:	400be540 	call	400be54 <abort>
 400b338:	d8800e17 	ldw	r2,56(sp)
 400b33c:	d9000d17 	ldw	r4,52(sp)
 400b340:	d8800115 	stw	r2,4(sp)
 400b344:	400a9a00 	call	400a9a0 <__cxa_call_unexpected>

0400b348 <_ZSt9terminatev>:
 400b348:	008100f4 	movhi	r2,1027
 400b34c:	10b31b04 	addi	r2,r2,-13204
 400b350:	11000017 	ldw	r4,0(r2)
 400b354:	deffff04 	addi	sp,sp,-4
 400b358:	dfc00015 	stw	ra,0(sp)
 400b35c:	400b2880 	call	400b288 <_ZN10__cxxabiv111__terminateEPFvvE>

0400b360 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 400b360:	deffff04 	addi	sp,sp,-4
 400b364:	dfc00015 	stw	ra,0(sp)
 400b368:	203ee83a 	callr	r4
 400b36c:	400b3480 	call	400b348 <_ZSt9terminatev>

0400b370 <_ZSt10unexpectedv>:
 400b370:	008100f4 	movhi	r2,1027
 400b374:	10b31404 	addi	r2,r2,-13232
 400b378:	11000017 	ldw	r4,0(r2)
 400b37c:	deffff04 	addi	sp,sp,-4
 400b380:	dfc00015 	stw	ra,0(sp)
 400b384:	400b3600 	call	400b360 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0400b388 <_ZSt13set_terminatePFvvE>:
 400b388:	00c100f4 	movhi	r3,1027
 400b38c:	18f31b04 	addi	r3,r3,-13204
 400b390:	18800017 	ldw	r2,0(r3)
 400b394:	19000015 	stw	r4,0(r3)
 400b398:	f800283a 	ret

0400b39c <_ZSt13get_terminatev>:
 400b39c:	008100f4 	movhi	r2,1027
 400b3a0:	10b31b04 	addi	r2,r2,-13204
 400b3a4:	10800017 	ldw	r2,0(r2)
 400b3a8:	f800283a 	ret

0400b3ac <_ZSt14set_unexpectedPFvvE>:
 400b3ac:	00c100f4 	movhi	r3,1027
 400b3b0:	18f31404 	addi	r3,r3,-13232
 400b3b4:	18800017 	ldw	r2,0(r3)
 400b3b8:	19000015 	stw	r4,0(r3)
 400b3bc:	f800283a 	ret

0400b3c0 <_ZSt14get_unexpectedv>:
 400b3c0:	008100f4 	movhi	r2,1027
 400b3c4:	10b31404 	addi	r2,r2,-13232
 400b3c8:	10800017 	ldw	r2,0(r2)
 400b3cc:	f800283a 	ret

0400b3d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 400b3d0:	01810134 	movhi	r6,1028
 400b3d4:	31a61f04 	addi	r6,r6,-26500
 400b3d8:	31400117 	ldw	r5,4(r6)
 400b3dc:	223fff04 	addi	r8,r4,-4
 400b3e0:	227fff17 	ldw	r9,-4(r4)
 400b3e4:	28001326 	beq	r5,zero,400b434 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
 400b3e8:	424f883a 	add	r7,r8,r9
 400b3ec:	29c01426 	beq	r5,r7,400b440 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 400b3f0:	28c00117 	ldw	r3,4(r5)
 400b3f4:	18001c26 	beq	r3,zero,400b468 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 400b3f8:	38c00336 	bltu	r7,r3,400b408 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 400b3fc:	00001e06 	br	400b478 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
 400b400:	3880052e 	bgeu	r7,r2,400b418 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
 400b404:	1007883a 	mov	r3,r2
 400b408:	18800117 	ldw	r2,4(r3)
 400b40c:	29800104 	addi	r6,r5,4
 400b410:	180b883a 	mov	r5,r3
 400b414:	103ffa1e 	bne	r2,zero,400b400 <__alt_data_end+0xfc00b400>
 400b418:	19400017 	ldw	r5,0(r3)
 400b41c:	194f883a 	add	r7,r3,r5
 400b420:	41c00e26 	beq	r8,r7,400b45c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
 400b424:	20800015 	stw	r2,0(r4)
 400b428:	30800017 	ldw	r2,0(r6)
 400b42c:	12000115 	stw	r8,4(r2)
 400b430:	f800283a 	ret
 400b434:	20000015 	stw	zero,0(r4)
 400b438:	32000115 	stw	r8,4(r6)
 400b43c:	f800283a 	ret
 400b440:	28c00017 	ldw	r3,0(r5)
 400b444:	28800117 	ldw	r2,4(r5)
 400b448:	1a53883a 	add	r9,r3,r9
 400b44c:	227fff15 	stw	r9,-4(r4)
 400b450:	20800015 	stw	r2,0(r4)
 400b454:	32000115 	stw	r8,4(r6)
 400b458:	f800283a 	ret
 400b45c:	494b883a 	add	r5,r9,r5
 400b460:	19400015 	stw	r5,0(r3)
 400b464:	f800283a 	ret
 400b468:	0005883a 	mov	r2,zero
 400b46c:	2807883a 	mov	r3,r5
 400b470:	31800104 	addi	r6,r6,4
 400b474:	003fe806 	br	400b418 <__alt_data_end+0xfc00b418>
 400b478:	1805883a 	mov	r2,r3
 400b47c:	31800104 	addi	r6,r6,4
 400b480:	2807883a 	mov	r3,r5
 400b484:	003fe406 	br	400b418 <__alt_data_end+0xfc00b418>

0400b488 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 400b488:	20800104 	addi	r2,r4,4
 400b48c:	00c001c4 	movi	r3,7
 400b490:	1880112e 	bgeu	r3,r2,400b4d8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 400b494:	20c9883a 	add	r4,r4,r3
 400b498:	00bfff04 	movi	r2,-4
 400b49c:	208a703a 	and	r5,r4,r2
 400b4a0:	01810134 	movhi	r6,1028
 400b4a4:	31a61f04 	addi	r6,r6,-26500
 400b4a8:	30c00117 	ldw	r3,4(r6)
 400b4ac:	18000826 	beq	r3,zero,400b4d0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 400b4b0:	19000017 	ldw	r4,0(r3)
 400b4b4:	21400436 	bltu	r4,r5,400b4c8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
 400b4b8:	00001a06 	br	400b524 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
 400b4bc:	11000017 	ldw	r4,0(r2)
 400b4c0:	2140072e 	bgeu	r4,r5,400b4e0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 400b4c4:	1007883a 	mov	r3,r2
 400b4c8:	18800117 	ldw	r2,4(r3)
 400b4cc:	103ffb1e 	bne	r2,zero,400b4bc <__alt_data_end+0xfc00b4bc>
 400b4d0:	0005883a 	mov	r2,zero
 400b4d4:	f800283a 	ret
 400b4d8:	01400204 	movi	r5,8
 400b4dc:	003ff006 	br	400b4a0 <__alt_data_end+0xfc00b4a0>
 400b4e0:	18c00104 	addi	r3,r3,4
 400b4e4:	2149c83a 	sub	r4,r4,r5
 400b4e8:	018001c4 	movi	r6,7
 400b4ec:	3100092e 	bgeu	r6,r4,400b514 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
 400b4f0:	11c00117 	ldw	r7,4(r2)
 400b4f4:	114d883a 	add	r6,r2,r5
 400b4f8:	31000015 	stw	r4,0(r6)
 400b4fc:	31c00115 	stw	r7,4(r6)
 400b500:	18800017 	ldw	r2,0(r3)
 400b504:	11400015 	stw	r5,0(r2)
 400b508:	19800015 	stw	r6,0(r3)
 400b50c:	10800104 	addi	r2,r2,4
 400b510:	f800283a 	ret
 400b514:	11000117 	ldw	r4,4(r2)
 400b518:	10800104 	addi	r2,r2,4
 400b51c:	19000015 	stw	r4,0(r3)
 400b520:	f800283a 	ret
 400b524:	1805883a 	mov	r2,r3
 400b528:	30c00104 	addi	r3,r6,4
 400b52c:	003fed06 	br	400b4e4 <__alt_data_end+0xfc00b4e4>

0400b530 <__cxa_allocate_exception>:
 400b530:	defffd04 	addi	sp,sp,-12
 400b534:	dc400115 	stw	r17,4(sp)
 400b538:	24401104 	addi	r17,r4,68
 400b53c:	8809883a 	mov	r4,r17
 400b540:	dc000015 	stw	r16,0(sp)
 400b544:	dfc00215 	stw	ra,8(sp)
 400b548:	400beb80 	call	400beb8 <malloc>
 400b54c:	1021883a 	mov	r16,r2
 400b550:	10000a26 	beq	r2,zero,400b57c <__cxa_allocate_exception+0x4c>
 400b554:	01801104 	movi	r6,68
 400b558:	000b883a 	mov	r5,zero
 400b55c:	8009883a 	mov	r4,r16
 400b560:	400c8b00 	call	400c8b0 <memset>
 400b564:	80801104 	addi	r2,r16,68
 400b568:	dfc00217 	ldw	ra,8(sp)
 400b56c:	dc400117 	ldw	r17,4(sp)
 400b570:	dc000017 	ldw	r16,0(sp)
 400b574:	dec00304 	addi	sp,sp,12
 400b578:	f800283a 	ret
 400b57c:	8809883a 	mov	r4,r17
 400b580:	400b4880 	call	400b488 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400b584:	1021883a 	mov	r16,r2
 400b588:	103ff21e 	bne	r2,zero,400b554 <__alt_data_end+0xfc00b554>
 400b58c:	400b3480 	call	400b348 <_ZSt9terminatev>

0400b590 <__cxa_free_exception>:
 400b590:	00c10134 	movhi	r3,1028
 400b594:	18e61f04 	addi	r3,r3,-26500
 400b598:	18800217 	ldw	r2,8(r3)
 400b59c:	213fef04 	addi	r4,r4,-68
 400b5a0:	1100042e 	bgeu	r2,r4,400b5b4 <__cxa_free_exception+0x24>
 400b5a4:	18c00317 	ldw	r3,12(r3)
 400b5a8:	10c5883a 	add	r2,r2,r3
 400b5ac:	2080012e 	bgeu	r4,r2,400b5b4 <__cxa_free_exception+0x24>
 400b5b0:	400b3d01 	jmpi	400b3d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400b5b4:	400becc1 	jmpi	400becc <free>

0400b5b8 <__cxa_allocate_dependent_exception>:
 400b5b8:	defffe04 	addi	sp,sp,-8
 400b5bc:	01001004 	movi	r4,64
 400b5c0:	dc000015 	stw	r16,0(sp)
 400b5c4:	dfc00115 	stw	ra,4(sp)
 400b5c8:	400beb80 	call	400beb8 <malloc>
 400b5cc:	1021883a 	mov	r16,r2
 400b5d0:	10000926 	beq	r2,zero,400b5f8 <__cxa_allocate_dependent_exception+0x40>
 400b5d4:	01801004 	movi	r6,64
 400b5d8:	000b883a 	mov	r5,zero
 400b5dc:	8009883a 	mov	r4,r16
 400b5e0:	400c8b00 	call	400c8b0 <memset>
 400b5e4:	8005883a 	mov	r2,r16
 400b5e8:	dfc00117 	ldw	ra,4(sp)
 400b5ec:	dc000017 	ldw	r16,0(sp)
 400b5f0:	dec00204 	addi	sp,sp,8
 400b5f4:	f800283a 	ret
 400b5f8:	01001004 	movi	r4,64
 400b5fc:	400b4880 	call	400b488 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400b600:	1021883a 	mov	r16,r2
 400b604:	103ff31e 	bne	r2,zero,400b5d4 <__alt_data_end+0xfc00b5d4>
 400b608:	400b3480 	call	400b348 <_ZSt9terminatev>

0400b60c <__cxa_free_dependent_exception>:
 400b60c:	01410134 	movhi	r5,1028
 400b610:	29661f04 	addi	r5,r5,-26500
 400b614:	28c00217 	ldw	r3,8(r5)
 400b618:	2005883a 	mov	r2,r4
 400b61c:	1900042e 	bgeu	r3,r4,400b630 <__cxa_free_dependent_exception+0x24>
 400b620:	29400317 	ldw	r5,12(r5)
 400b624:	1947883a 	add	r3,r3,r5
 400b628:	20c0012e 	bgeu	r4,r3,400b630 <__cxa_free_dependent_exception+0x24>
 400b62c:	400b3d01 	jmpi	400b3d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400b630:	1009883a 	mov	r4,r2
 400b634:	400becc1 	jmpi	400becc <free>

0400b638 <_GLOBAL__sub_I___cxa_allocate_exception>:
 400b638:	defffd04 	addi	sp,sp,-12
 400b63c:	dc400115 	stw	r17,4(sp)
 400b640:	dc000015 	stw	r16,0(sp)
 400b644:	04424004 	movi	r17,2304
 400b648:	04010134 	movhi	r16,1028
 400b64c:	84261f04 	addi	r16,r16,-26500
 400b650:	8809883a 	mov	r4,r17
 400b654:	dfc00215 	stw	ra,8(sp)
 400b658:	84400315 	stw	r17,12(r16)
 400b65c:	400beb80 	call	400beb8 <malloc>
 400b660:	80800215 	stw	r2,8(r16)
 400b664:	10000826 	beq	r2,zero,400b688 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
 400b668:	80800115 	stw	r2,4(r16)
 400b66c:	14400015 	stw	r17,0(r2)
 400b670:	10000115 	stw	zero,4(r2)
 400b674:	dfc00217 	ldw	ra,8(sp)
 400b678:	dc400117 	ldw	r17,4(sp)
 400b67c:	dc000017 	ldw	r16,0(sp)
 400b680:	dec00304 	addi	sp,sp,12
 400b684:	f800283a 	ret
 400b688:	80000315 	stw	zero,12(r16)
 400b68c:	80000115 	stw	zero,4(r16)
 400b690:	003ff806 	br	400b674 <__alt_data_end+0xfc00b674>

0400b694 <__cxa_call_terminate>:
 400b694:	defffe04 	addi	sp,sp,-8
 400b698:	dfc00115 	stw	ra,4(sp)
 400b69c:	dc000015 	stw	r16,0(sp)
 400b6a0:	20000d26 	beq	r4,zero,400b6d8 <__cxa_call_terminate+0x44>
 400b6a4:	2021883a 	mov	r16,r4
 400b6a8:	400ae380 	call	400ae38 <__cxa_begin_catch>
 400b6ac:	80c00017 	ldw	r3,0(r16)
 400b6b0:	016f3574 	movhi	r5,48341
 400b6b4:	29754004 	addi	r5,r5,-11008
 400b6b8:	194b883a 	add	r5,r3,r5
 400b6bc:	80800117 	ldw	r2,4(r16)
 400b6c0:	28c9803a 	cmpltu	r4,r5,r3
 400b6c4:	00ee2cb4 	movhi	r3,47282
 400b6c8:	18eaaf04 	addi	r3,r3,-21828
 400b6cc:	10c5883a 	add	r2,r2,r3
 400b6d0:	2085883a 	add	r2,r4,r2
 400b6d4:	10000126 	beq	r2,zero,400b6dc <__cxa_call_terminate+0x48>
 400b6d8:	400b3480 	call	400b348 <_ZSt9terminatev>
 400b6dc:	00800044 	movi	r2,1
 400b6e0:	117ffd36 	bltu	r2,r5,400b6d8 <__alt_data_end+0xfc00b6d8>
 400b6e4:	813ff817 	ldw	r4,-32(r16)
 400b6e8:	400b2880 	call	400b288 <_ZN10__cxxabiv111__terminateEPFvvE>

0400b6ec <__cxa_get_globals_fast>:
 400b6ec:	00810134 	movhi	r2,1028
 400b6f0:	10a5e304 	addi	r2,r2,-26740
 400b6f4:	f800283a 	ret

0400b6f8 <__cxa_get_globals>:
 400b6f8:	00810134 	movhi	r2,1028
 400b6fc:	10a5e304 	addi	r2,r2,-26740
 400b700:	f800283a 	ret

0400b704 <_ZNSt9exceptionD1Ev>:
 400b704:	f800283a 	ret

0400b708 <_ZNSt13bad_exceptionD1Ev>:
 400b708:	f800283a 	ret

0400b70c <_ZNKSt9exception4whatEv>:
 400b70c:	008100b4 	movhi	r2,1026
 400b710:	10bf6e04 	addi	r2,r2,-584
 400b714:	f800283a 	ret

0400b718 <_ZNKSt13bad_exception4whatEv>:
 400b718:	008100b4 	movhi	r2,1026
 400b71c:	10bf7204 	addi	r2,r2,-568
 400b720:	f800283a 	ret

0400b724 <_ZNSt9exceptionD0Ev>:
 400b724:	400ac201 	jmpi	400ac20 <_ZdlPv>

0400b728 <_ZNSt13bad_exceptionD0Ev>:
 400b728:	400ac201 	jmpi	400ac20 <_ZdlPv>

0400b72c <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 400b72c:	f800283a 	ret

0400b730 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 400b730:	400ac201 	jmpi	400ac20 <_ZdlPv>

0400b734 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 400b734:	f800283a 	ret

0400b738 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 400b738:	400ac201 	jmpi	400ac20 <_ZdlPv>

0400b73c <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
 400b73c:	008100b4 	movhi	r2,1026
 400b740:	10bfb604 	addi	r2,r2,-296
 400b744:	20800015 	stw	r2,0(r4)
 400b748:	400b7041 	jmpi	400b704 <_ZNSt9exceptionD1Ev>

0400b74c <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
 400b74c:	defffe04 	addi	sp,sp,-8
 400b750:	008100b4 	movhi	r2,1026
 400b754:	dc000015 	stw	r16,0(sp)
 400b758:	dfc00115 	stw	ra,4(sp)
 400b75c:	10bfb604 	addi	r2,r2,-296
 400b760:	20800015 	stw	r2,0(r4)
 400b764:	2021883a 	mov	r16,r4
 400b768:	400b7040 	call	400b704 <_ZNSt9exceptionD1Ev>
 400b76c:	8009883a 	mov	r4,r16
 400b770:	dfc00117 	ldw	ra,4(sp)
 400b774:	dc000017 	ldw	r16,0(sp)
 400b778:	dec00204 	addi	sp,sp,8
 400b77c:	400ac201 	jmpi	400ac20 <_ZdlPv>

0400b780 <__divsi3>:
 400b780:	20001b16 	blt	r4,zero,400b7f0 <__divsi3+0x70>
 400b784:	000f883a 	mov	r7,zero
 400b788:	28001616 	blt	r5,zero,400b7e4 <__divsi3+0x64>
 400b78c:	200d883a 	mov	r6,r4
 400b790:	29001a2e 	bgeu	r5,r4,400b7fc <__divsi3+0x7c>
 400b794:	00800804 	movi	r2,32
 400b798:	00c00044 	movi	r3,1
 400b79c:	00000106 	br	400b7a4 <__divsi3+0x24>
 400b7a0:	10000d26 	beq	r2,zero,400b7d8 <__divsi3+0x58>
 400b7a4:	294b883a 	add	r5,r5,r5
 400b7a8:	10bfffc4 	addi	r2,r2,-1
 400b7ac:	18c7883a 	add	r3,r3,r3
 400b7b0:	293ffb36 	bltu	r5,r4,400b7a0 <__alt_data_end+0xfc00b7a0>
 400b7b4:	0005883a 	mov	r2,zero
 400b7b8:	18000726 	beq	r3,zero,400b7d8 <__divsi3+0x58>
 400b7bc:	0005883a 	mov	r2,zero
 400b7c0:	31400236 	bltu	r6,r5,400b7cc <__divsi3+0x4c>
 400b7c4:	314dc83a 	sub	r6,r6,r5
 400b7c8:	10c4b03a 	or	r2,r2,r3
 400b7cc:	1806d07a 	srli	r3,r3,1
 400b7d0:	280ad07a 	srli	r5,r5,1
 400b7d4:	183ffa1e 	bne	r3,zero,400b7c0 <__alt_data_end+0xfc00b7c0>
 400b7d8:	38000126 	beq	r7,zero,400b7e0 <__divsi3+0x60>
 400b7dc:	0085c83a 	sub	r2,zero,r2
 400b7e0:	f800283a 	ret
 400b7e4:	014bc83a 	sub	r5,zero,r5
 400b7e8:	39c0005c 	xori	r7,r7,1
 400b7ec:	003fe706 	br	400b78c <__alt_data_end+0xfc00b78c>
 400b7f0:	0109c83a 	sub	r4,zero,r4
 400b7f4:	01c00044 	movi	r7,1
 400b7f8:	003fe306 	br	400b788 <__alt_data_end+0xfc00b788>
 400b7fc:	00c00044 	movi	r3,1
 400b800:	003fee06 	br	400b7bc <__alt_data_end+0xfc00b7bc>

0400b804 <__modsi3>:
 400b804:	20001716 	blt	r4,zero,400b864 <__modsi3+0x60>
 400b808:	000f883a 	mov	r7,zero
 400b80c:	2005883a 	mov	r2,r4
 400b810:	28001216 	blt	r5,zero,400b85c <__modsi3+0x58>
 400b814:	2900162e 	bgeu	r5,r4,400b870 <__modsi3+0x6c>
 400b818:	01800804 	movi	r6,32
 400b81c:	00c00044 	movi	r3,1
 400b820:	00000106 	br	400b828 <__modsi3+0x24>
 400b824:	30000a26 	beq	r6,zero,400b850 <__modsi3+0x4c>
 400b828:	294b883a 	add	r5,r5,r5
 400b82c:	31bfffc4 	addi	r6,r6,-1
 400b830:	18c7883a 	add	r3,r3,r3
 400b834:	293ffb36 	bltu	r5,r4,400b824 <__alt_data_end+0xfc00b824>
 400b838:	18000526 	beq	r3,zero,400b850 <__modsi3+0x4c>
 400b83c:	1806d07a 	srli	r3,r3,1
 400b840:	11400136 	bltu	r2,r5,400b848 <__modsi3+0x44>
 400b844:	1145c83a 	sub	r2,r2,r5
 400b848:	280ad07a 	srli	r5,r5,1
 400b84c:	183ffb1e 	bne	r3,zero,400b83c <__alt_data_end+0xfc00b83c>
 400b850:	38000126 	beq	r7,zero,400b858 <__modsi3+0x54>
 400b854:	0085c83a 	sub	r2,zero,r2
 400b858:	f800283a 	ret
 400b85c:	014bc83a 	sub	r5,zero,r5
 400b860:	003fec06 	br	400b814 <__alt_data_end+0xfc00b814>
 400b864:	0109c83a 	sub	r4,zero,r4
 400b868:	01c00044 	movi	r7,1
 400b86c:	003fe706 	br	400b80c <__alt_data_end+0xfc00b80c>
 400b870:	00c00044 	movi	r3,1
 400b874:	003ff106 	br	400b83c <__alt_data_end+0xfc00b83c>

0400b878 <__udivsi3>:
 400b878:	200d883a 	mov	r6,r4
 400b87c:	2900152e 	bgeu	r5,r4,400b8d4 <__udivsi3+0x5c>
 400b880:	28001416 	blt	r5,zero,400b8d4 <__udivsi3+0x5c>
 400b884:	00800804 	movi	r2,32
 400b888:	00c00044 	movi	r3,1
 400b88c:	00000206 	br	400b898 <__udivsi3+0x20>
 400b890:	10000e26 	beq	r2,zero,400b8cc <__udivsi3+0x54>
 400b894:	28000516 	blt	r5,zero,400b8ac <__udivsi3+0x34>
 400b898:	294b883a 	add	r5,r5,r5
 400b89c:	10bfffc4 	addi	r2,r2,-1
 400b8a0:	18c7883a 	add	r3,r3,r3
 400b8a4:	293ffa36 	bltu	r5,r4,400b890 <__alt_data_end+0xfc00b890>
 400b8a8:	18000826 	beq	r3,zero,400b8cc <__udivsi3+0x54>
 400b8ac:	0005883a 	mov	r2,zero
 400b8b0:	31400236 	bltu	r6,r5,400b8bc <__udivsi3+0x44>
 400b8b4:	314dc83a 	sub	r6,r6,r5
 400b8b8:	10c4b03a 	or	r2,r2,r3
 400b8bc:	1806d07a 	srli	r3,r3,1
 400b8c0:	280ad07a 	srli	r5,r5,1
 400b8c4:	183ffa1e 	bne	r3,zero,400b8b0 <__alt_data_end+0xfc00b8b0>
 400b8c8:	f800283a 	ret
 400b8cc:	0005883a 	mov	r2,zero
 400b8d0:	f800283a 	ret
 400b8d4:	00c00044 	movi	r3,1
 400b8d8:	003ff406 	br	400b8ac <__alt_data_end+0xfc00b8ac>

0400b8dc <__umodsi3>:
 400b8dc:	2005883a 	mov	r2,r4
 400b8e0:	2900122e 	bgeu	r5,r4,400b92c <__umodsi3+0x50>
 400b8e4:	28001116 	blt	r5,zero,400b92c <__umodsi3+0x50>
 400b8e8:	01800804 	movi	r6,32
 400b8ec:	00c00044 	movi	r3,1
 400b8f0:	00000206 	br	400b8fc <__umodsi3+0x20>
 400b8f4:	30000c26 	beq	r6,zero,400b928 <__umodsi3+0x4c>
 400b8f8:	28000516 	blt	r5,zero,400b910 <__umodsi3+0x34>
 400b8fc:	294b883a 	add	r5,r5,r5
 400b900:	31bfffc4 	addi	r6,r6,-1
 400b904:	18c7883a 	add	r3,r3,r3
 400b908:	293ffa36 	bltu	r5,r4,400b8f4 <__alt_data_end+0xfc00b8f4>
 400b90c:	18000626 	beq	r3,zero,400b928 <__umodsi3+0x4c>
 400b910:	1806d07a 	srli	r3,r3,1
 400b914:	11400136 	bltu	r2,r5,400b91c <__umodsi3+0x40>
 400b918:	1145c83a 	sub	r2,r2,r5
 400b91c:	280ad07a 	srli	r5,r5,1
 400b920:	183ffb1e 	bne	r3,zero,400b910 <__alt_data_end+0xfc00b910>
 400b924:	f800283a 	ret
 400b928:	f800283a 	ret
 400b92c:	00c00044 	movi	r3,1
 400b930:	003ff706 	br	400b910 <__alt_data_end+0xfc00b910>

0400b934 <_Unwind_ForcedUnwind_Phase2>:
 400b934:	defff404 	addi	sp,sp,-48
 400b938:	dd800915 	stw	r22,36(sp)
 400b93c:	05810134 	movhi	r22,1028
 400b940:	ddc00a15 	stw	r23,40(sp)
 400b944:	dd400815 	stw	r21,32(sp)
 400b948:	dd000715 	stw	r20,28(sp)
 400b94c:	dcc00615 	stw	r19,24(sp)
 400b950:	dc400415 	stw	r17,16(sp)
 400b954:	dc000315 	stw	r16,12(sp)
 400b958:	dfc00b15 	stw	ra,44(sp)
 400b95c:	dc800515 	stw	r18,20(sp)
 400b960:	2021883a 	mov	r16,r4
 400b964:	2823883a 	mov	r17,r5
 400b968:	24c00317 	ldw	r19,12(r4)
 400b96c:	25000417 	ldw	r20,16(r4)
 400b970:	28c00017 	ldw	r3,0(r5)
 400b974:	b5a5e504 	addi	r22,r22,-26732
 400b978:	054001c4 	movi	r21,7
 400b97c:	05c00204 	movi	r23,8
 400b980:	00001606 	br	400b9dc <_Unwind_ForcedUnwind_Phase2+0xa8>
 400b984:	81800017 	ldw	r6,0(r16)
 400b988:	81c00117 	ldw	r7,4(r16)
 400b98c:	1c800617 	ldw	r18,24(r3)
 400b990:	dd000215 	stw	r20,8(sp)
 400b994:	dc400115 	stw	r17,4(sp)
 400b998:	dc000015 	stw	r16,0(sp)
 400b99c:	983ee83a 	callr	r19
 400b9a0:	01400284 	movi	r5,10
 400b9a4:	01000044 	movi	r4,1
 400b9a8:	1000241e 	bne	r2,zero,400ba3c <_Unwind_ForcedUnwind_Phase2+0x108>
 400b9ac:	90000726 	beq	r18,zero,400b9cc <_Unwind_ForcedUnwind_Phase2+0x98>
 400b9b0:	81800017 	ldw	r6,0(r16)
 400b9b4:	81c00117 	ldw	r7,4(r16)
 400b9b8:	dc400115 	stw	r17,4(sp)
 400b9bc:	dc000015 	stw	r16,0(sp)
 400b9c0:	903ee83a 	callr	r18
 400b9c4:	15401f26 	beq	r2,r21,400ba44 <_Unwind_ForcedUnwind_Phase2+0x110>
 400b9c8:	15c01c1e 	bne	r2,r23,400ba3c <_Unwind_ForcedUnwind_Phase2+0x108>
 400b9cc:	88800017 	ldw	r2,0(r17)
 400b9d0:	10c00017 	ldw	r3,0(r2)
 400b9d4:	b0c00015 	stw	r3,0(r22)
 400b9d8:	88c00015 	stw	r3,0(r17)
 400b9dc:	01400284 	movi	r5,10
 400b9e0:	01000044 	movi	r4,1
 400b9e4:	183fe71e 	bne	r3,zero,400b984 <__alt_data_end+0xfc00b984>
 400b9e8:	81800017 	ldw	r6,0(r16)
 400b9ec:	81c00117 	ldw	r7,4(r16)
 400b9f0:	01400684 	movi	r5,26
 400b9f4:	dd000215 	stw	r20,8(sp)
 400b9f8:	dc400115 	stw	r17,4(sp)
 400b9fc:	dc000015 	stw	r16,0(sp)
 400ba00:	01000044 	movi	r4,1
 400ba04:	983ee83a 	callr	r19
 400ba08:	10000c1e 	bne	r2,zero,400ba3c <_Unwind_ForcedUnwind_Phase2+0x108>
 400ba0c:	00800144 	movi	r2,5
 400ba10:	dfc00b17 	ldw	ra,44(sp)
 400ba14:	ddc00a17 	ldw	r23,40(sp)
 400ba18:	dd800917 	ldw	r22,36(sp)
 400ba1c:	dd400817 	ldw	r21,32(sp)
 400ba20:	dd000717 	ldw	r20,28(sp)
 400ba24:	dcc00617 	ldw	r19,24(sp)
 400ba28:	dc800517 	ldw	r18,20(sp)
 400ba2c:	dc400417 	ldw	r17,16(sp)
 400ba30:	dc000317 	ldw	r16,12(sp)
 400ba34:	dec00c04 	addi	sp,sp,48
 400ba38:	f800283a 	ret
 400ba3c:	00800084 	movi	r2,2
 400ba40:	003ff306 	br	400ba10 <__alt_data_end+0xfc00ba10>
 400ba44:	a805883a 	mov	r2,r21
 400ba48:	003ff106 	br	400ba10 <__alt_data_end+0xfc00ba10>

0400ba4c <_Unwind_RaiseException_Phase2>:
 400ba4c:	28c00017 	ldw	r3,0(r5)
 400ba50:	defff804 	addi	sp,sp,-32
 400ba54:	dcc00515 	stw	r19,20(sp)
 400ba58:	dc800415 	stw	r18,16(sp)
 400ba5c:	dc400315 	stw	r17,12(sp)
 400ba60:	dc000215 	stw	r16,8(sp)
 400ba64:	dfc00715 	stw	ra,28(sp)
 400ba68:	dd000615 	stw	r20,24(sp)
 400ba6c:	2823883a 	mov	r17,r5
 400ba70:	2021883a 	mov	r16,r4
 400ba74:	048001c4 	movi	r18,7
 400ba78:	04c00204 	movi	r19,8
 400ba7c:	18001326 	beq	r3,zero,400bacc <_Unwind_RaiseException_Phase2+0x80>
 400ba80:	81000417 	ldw	r4,16(r16)
 400ba84:	1a000617 	ldw	r8,24(r3)
 400ba88:	19001926 	beq	r3,r4,400baf0 <_Unwind_RaiseException_Phase2+0xa4>
 400ba8c:	40000c26 	beq	r8,zero,400bac0 <_Unwind_RaiseException_Phase2+0x74>
 400ba90:	01400084 	movi	r5,2
 400ba94:	0029883a 	mov	r20,zero
 400ba98:	81800017 	ldw	r6,0(r16)
 400ba9c:	81c00117 	ldw	r7,4(r16)
 400baa0:	01000044 	movi	r4,1
 400baa4:	dc400115 	stw	r17,4(sp)
 400baa8:	dc000015 	stw	r16,0(sp)
 400baac:	403ee83a 	callr	r8
 400bab0:	14801326 	beq	r2,r18,400bb00 <_Unwind_RaiseException_Phase2+0xb4>
 400bab4:	14c0051e 	bne	r2,r19,400bacc <_Unwind_RaiseException_Phase2+0x80>
 400bab8:	a000131e 	bne	r20,zero,400bb08 <_Unwind_RaiseException_Phase2+0xbc>
 400babc:	88c00017 	ldw	r3,0(r17)
 400bac0:	18c00017 	ldw	r3,0(r3)
 400bac4:	88c00015 	stw	r3,0(r17)
 400bac8:	183fed1e 	bne	r3,zero,400ba80 <__alt_data_end+0xfc00ba80>
 400bacc:	00800084 	movi	r2,2
 400bad0:	dfc00717 	ldw	ra,28(sp)
 400bad4:	dd000617 	ldw	r20,24(sp)
 400bad8:	dcc00517 	ldw	r19,20(sp)
 400badc:	dc800417 	ldw	r18,16(sp)
 400bae0:	dc400317 	ldw	r17,12(sp)
 400bae4:	dc000217 	ldw	r16,8(sp)
 400bae8:	dec00804 	addi	sp,sp,32
 400baec:	f800283a 	ret
 400baf0:	40000526 	beq	r8,zero,400bb08 <_Unwind_RaiseException_Phase2+0xbc>
 400baf4:	01400184 	movi	r5,6
 400baf8:	05000104 	movi	r20,4
 400bafc:	003fe606 	br	400ba98 <__alt_data_end+0xfc00ba98>
 400bb00:	9005883a 	mov	r2,r18
 400bb04:	003ff206 	br	400bad0 <__alt_data_end+0xfc00bad0>
 400bb08:	400be540 	call	400be54 <abort>

0400bb0c <uw_install_context.isra.1>:
 400bb0c:	20c00017 	ldw	r3,0(r4)
 400bb10:	deffff04 	addi	sp,sp,-4
 400bb14:	01410134 	movhi	r5,1028
 400bb18:	19000917 	ldw	r4,36(r3)
 400bb1c:	df000015 	stw	fp,0(sp)
 400bb20:	18800804 	addi	r2,r3,32
 400bb24:	d839883a 	mov	fp,sp
 400bb28:	2965e504 	addi	r5,r5,-26732
 400bb2c:	28c00015 	stw	r3,0(r5)
 400bb30:	17000017 	ldw	fp,0(r2)
 400bb34:	1ec00a17 	ldw	sp,40(r3)
 400bb38:	2000683a 	jmp	r4

0400bb3c <_Unwind_SjLj_Register>:
 400bb3c:	00810134 	movhi	r2,1028
 400bb40:	10a5e504 	addi	r2,r2,-26732
 400bb44:	10c00017 	ldw	r3,0(r2)
 400bb48:	11000015 	stw	r4,0(r2)
 400bb4c:	20c00015 	stw	r3,0(r4)
 400bb50:	f800283a 	ret

0400bb54 <_Unwind_SjLj_Unregister>:
 400bb54:	20c00017 	ldw	r3,0(r4)
 400bb58:	00810134 	movhi	r2,1028
 400bb5c:	10a5e504 	addi	r2,r2,-26732
 400bb60:	10c00015 	stw	r3,0(r2)
 400bb64:	f800283a 	ret

0400bb68 <_Unwind_GetGR>:
 400bb68:	20800017 	ldw	r2,0(r4)
 400bb6c:	29400084 	addi	r5,r5,2
 400bb70:	294b883a 	add	r5,r5,r5
 400bb74:	294b883a 	add	r5,r5,r5
 400bb78:	114b883a 	add	r5,r2,r5
 400bb7c:	28800017 	ldw	r2,0(r5)
 400bb80:	f800283a 	ret

0400bb84 <_Unwind_GetCFA>:
 400bb84:	20800017 	ldw	r2,0(r4)
 400bb88:	10000226 	beq	r2,zero,400bb94 <_Unwind_GetCFA+0x10>
 400bb8c:	10800a17 	ldw	r2,40(r2)
 400bb90:	f800283a 	ret
 400bb94:	0005883a 	mov	r2,zero
 400bb98:	f800283a 	ret

0400bb9c <_Unwind_SetGR>:
 400bb9c:	20800017 	ldw	r2,0(r4)
 400bba0:	29400084 	addi	r5,r5,2
 400bba4:	294b883a 	add	r5,r5,r5
 400bba8:	294b883a 	add	r5,r5,r5
 400bbac:	114b883a 	add	r5,r2,r5
 400bbb0:	29800015 	stw	r6,0(r5)
 400bbb4:	f800283a 	ret

0400bbb8 <_Unwind_GetIP>:
 400bbb8:	20800017 	ldw	r2,0(r4)
 400bbbc:	10800117 	ldw	r2,4(r2)
 400bbc0:	10800044 	addi	r2,r2,1
 400bbc4:	f800283a 	ret

0400bbc8 <_Unwind_GetIPInfo>:
 400bbc8:	20800017 	ldw	r2,0(r4)
 400bbcc:	28000015 	stw	zero,0(r5)
 400bbd0:	10000326 	beq	r2,zero,400bbe0 <_Unwind_GetIPInfo+0x18>
 400bbd4:	10800117 	ldw	r2,4(r2)
 400bbd8:	10800044 	addi	r2,r2,1
 400bbdc:	f800283a 	ret
 400bbe0:	0005883a 	mov	r2,zero
 400bbe4:	f800283a 	ret

0400bbe8 <_Unwind_SetIP>:
 400bbe8:	20800017 	ldw	r2,0(r4)
 400bbec:	297fffc4 	addi	r5,r5,-1
 400bbf0:	11400115 	stw	r5,4(r2)
 400bbf4:	f800283a 	ret

0400bbf8 <_Unwind_GetLanguageSpecificData>:
 400bbf8:	20800017 	ldw	r2,0(r4)
 400bbfc:	10800717 	ldw	r2,28(r2)
 400bc00:	f800283a 	ret

0400bc04 <_Unwind_GetRegionStart>:
 400bc04:	0005883a 	mov	r2,zero
 400bc08:	f800283a 	ret

0400bc0c <_Unwind_FindEnclosingFunction>:
 400bc0c:	0005883a 	mov	r2,zero
 400bc10:	f800283a 	ret

0400bc14 <_Unwind_GetDataRelBase>:
 400bc14:	0005883a 	mov	r2,zero
 400bc18:	f800283a 	ret

0400bc1c <_Unwind_GetTextRelBase>:
 400bc1c:	0005883a 	mov	r2,zero
 400bc20:	f800283a 	ret

0400bc24 <_Unwind_SjLj_RaiseException>:
 400bc24:	00810134 	movhi	r2,1028
 400bc28:	defff804 	addi	sp,sp,-32
 400bc2c:	10a5e504 	addi	r2,r2,-26732
 400bc30:	dc800515 	stw	r18,20(sp)
 400bc34:	14800017 	ldw	r18,0(r2)
 400bc38:	dfc00715 	stw	ra,28(sp)
 400bc3c:	dcc00615 	stw	r19,24(sp)
 400bc40:	dc400415 	stw	r17,16(sp)
 400bc44:	dc000315 	stw	r16,12(sp)
 400bc48:	dc800215 	stw	r18,8(sp)
 400bc4c:	90001426 	beq	r18,zero,400bca0 <_Unwind_SjLj_RaiseException+0x7c>
 400bc50:	2021883a 	mov	r16,r4
 400bc54:	9005883a 	mov	r2,r18
 400bc58:	04400184 	movi	r17,6
 400bc5c:	04c00204 	movi	r19,8
 400bc60:	10800617 	ldw	r2,24(r2)
 400bc64:	10000a26 	beq	r2,zero,400bc90 <_Unwind_SjLj_RaiseException+0x6c>
 400bc68:	81800017 	ldw	r6,0(r16)
 400bc6c:	81c00117 	ldw	r7,4(r16)
 400bc70:	01400044 	movi	r5,1
 400bc74:	d8c00204 	addi	r3,sp,8
 400bc78:	d8c00115 	stw	r3,4(sp)
 400bc7c:	dc000015 	stw	r16,0(sp)
 400bc80:	2809883a 	mov	r4,r5
 400bc84:	103ee83a 	callr	r2
 400bc88:	14400d26 	beq	r2,r17,400bcc0 <_Unwind_SjLj_RaiseException+0x9c>
 400bc8c:	14c0171e 	bne	r2,r19,400bcec <_Unwind_SjLj_RaiseException+0xc8>
 400bc90:	d8800217 	ldw	r2,8(sp)
 400bc94:	10800017 	ldw	r2,0(r2)
 400bc98:	d8800215 	stw	r2,8(sp)
 400bc9c:	103ff01e 	bne	r2,zero,400bc60 <__alt_data_end+0xfc00bc60>
 400bca0:	00800144 	movi	r2,5
 400bca4:	dfc00717 	ldw	ra,28(sp)
 400bca8:	dcc00617 	ldw	r19,24(sp)
 400bcac:	dc800517 	ldw	r18,20(sp)
 400bcb0:	dc400417 	ldw	r17,16(sp)
 400bcb4:	dc000317 	ldw	r16,12(sp)
 400bcb8:	dec00804 	addi	sp,sp,32
 400bcbc:	f800283a 	ret
 400bcc0:	d8800217 	ldw	r2,8(sp)
 400bcc4:	80000315 	stw	zero,12(r16)
 400bcc8:	d9400204 	addi	r5,sp,8
 400bccc:	80800415 	stw	r2,16(r16)
 400bcd0:	8009883a 	mov	r4,r16
 400bcd4:	dc800215 	stw	r18,8(sp)
 400bcd8:	400ba4c0 	call	400ba4c <_Unwind_RaiseException_Phase2>
 400bcdc:	00c001c4 	movi	r3,7
 400bce0:	10fff01e 	bne	r2,r3,400bca4 <__alt_data_end+0xfc00bca4>
 400bce4:	d9000204 	addi	r4,sp,8
 400bce8:	400bb0c0 	call	400bb0c <uw_install_context.isra.1>
 400bcec:	008000c4 	movi	r2,3
 400bcf0:	003fec06 	br	400bca4 <__alt_data_end+0xfc00bca4>

0400bcf4 <_Unwind_SjLj_ForcedUnwind>:
 400bcf4:	00c10134 	movhi	r3,1028
 400bcf8:	18e5e504 	addi	r3,r3,-26732
 400bcfc:	defffe04 	addi	sp,sp,-8
 400bd00:	18c00017 	ldw	r3,0(r3)
 400bd04:	dfc00115 	stw	ra,4(sp)
 400bd08:	21400315 	stw	r5,12(r4)
 400bd0c:	21800415 	stw	r6,16(r4)
 400bd10:	d80b883a 	mov	r5,sp
 400bd14:	d8c00015 	stw	r3,0(sp)
 400bd18:	400b9340 	call	400b934 <_Unwind_ForcedUnwind_Phase2>
 400bd1c:	00c001c4 	movi	r3,7
 400bd20:	10c00326 	beq	r2,r3,400bd30 <_Unwind_SjLj_ForcedUnwind+0x3c>
 400bd24:	dfc00117 	ldw	ra,4(sp)
 400bd28:	dec00204 	addi	sp,sp,8
 400bd2c:	f800283a 	ret
 400bd30:	d809883a 	mov	r4,sp
 400bd34:	400bb0c0 	call	400bb0c <uw_install_context.isra.1>

0400bd38 <_Unwind_SjLj_Resume>:
 400bd38:	00c10134 	movhi	r3,1028
 400bd3c:	18e5e504 	addi	r3,r3,-26732
 400bd40:	18c00017 	ldw	r3,0(r3)
 400bd44:	20800317 	ldw	r2,12(r4)
 400bd48:	defffe04 	addi	sp,sp,-8
 400bd4c:	dfc00115 	stw	ra,4(sp)
 400bd50:	d8c00015 	stw	r3,0(sp)
 400bd54:	d80b883a 	mov	r5,sp
 400bd58:	1000041e 	bne	r2,zero,400bd6c <_Unwind_SjLj_Resume+0x34>
 400bd5c:	400ba4c0 	call	400ba4c <_Unwind_RaiseException_Phase2>
 400bd60:	00c001c4 	movi	r3,7
 400bd64:	10c00326 	beq	r2,r3,400bd74 <_Unwind_SjLj_Resume+0x3c>
 400bd68:	400be540 	call	400be54 <abort>
 400bd6c:	400b9340 	call	400b934 <_Unwind_ForcedUnwind_Phase2>
 400bd70:	003ffb06 	br	400bd60 <__alt_data_end+0xfc00bd60>
 400bd74:	d809883a 	mov	r4,sp
 400bd78:	400bb0c0 	call	400bb0c <uw_install_context.isra.1>

0400bd7c <_Unwind_SjLj_Resume_or_Rethrow>:
 400bd7c:	20800317 	ldw	r2,12(r4)
 400bd80:	defffe04 	addi	sp,sp,-8
 400bd84:	dfc00115 	stw	ra,4(sp)
 400bd88:	1000041e 	bne	r2,zero,400bd9c <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 400bd8c:	400bc240 	call	400bc24 <_Unwind_SjLj_RaiseException>
 400bd90:	dfc00117 	ldw	ra,4(sp)
 400bd94:	dec00204 	addi	sp,sp,8
 400bd98:	f800283a 	ret
 400bd9c:	00810134 	movhi	r2,1028
 400bda0:	10a5e504 	addi	r2,r2,-26732
 400bda4:	10800017 	ldw	r2,0(r2)
 400bda8:	d80b883a 	mov	r5,sp
 400bdac:	d8800015 	stw	r2,0(sp)
 400bdb0:	400b9340 	call	400b934 <_Unwind_ForcedUnwind_Phase2>
 400bdb4:	00c001c4 	movi	r3,7
 400bdb8:	10c00126 	beq	r2,r3,400bdc0 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 400bdbc:	400be540 	call	400be54 <abort>
 400bdc0:	d809883a 	mov	r4,sp
 400bdc4:	400bb0c0 	call	400bb0c <uw_install_context.isra.1>

0400bdc8 <_Unwind_DeleteException>:
 400bdc8:	20800217 	ldw	r2,8(r4)
 400bdcc:	10000326 	beq	r2,zero,400bddc <_Unwind_DeleteException+0x14>
 400bdd0:	200b883a 	mov	r5,r4
 400bdd4:	01000044 	movi	r4,1
 400bdd8:	1000683a 	jmp	r2
 400bddc:	f800283a 	ret

0400bde0 <_Unwind_Backtrace>:
 400bde0:	00810134 	movhi	r2,1028
 400bde4:	10a5e504 	addi	r2,r2,-26732
 400bde8:	10800017 	ldw	r2,0(r2)
 400bdec:	defffc04 	addi	sp,sp,-16
 400bdf0:	dc400215 	stw	r17,8(sp)
 400bdf4:	dc000115 	stw	r16,4(sp)
 400bdf8:	dfc00315 	stw	ra,12(sp)
 400bdfc:	2023883a 	mov	r17,r4
 400be00:	2821883a 	mov	r16,r5
 400be04:	d8800015 	stw	r2,0(sp)
 400be08:	00000506 	br	400be20 <_Unwind_Backtrace+0x40>
 400be0c:	883ee83a 	callr	r17
 400be10:	10000e1e 	bne	r2,zero,400be4c <_Unwind_Backtrace+0x6c>
 400be14:	d8800017 	ldw	r2,0(sp)
 400be18:	10800017 	ldw	r2,0(r2)
 400be1c:	d8800015 	stw	r2,0(sp)
 400be20:	800b883a 	mov	r5,r16
 400be24:	d809883a 	mov	r4,sp
 400be28:	103ff81e 	bne	r2,zero,400be0c <__alt_data_end+0xfc00be0c>
 400be2c:	883ee83a 	callr	r17
 400be30:	1000061e 	bne	r2,zero,400be4c <_Unwind_Backtrace+0x6c>
 400be34:	00800144 	movi	r2,5
 400be38:	dfc00317 	ldw	ra,12(sp)
 400be3c:	dc400217 	ldw	r17,8(sp)
 400be40:	dc000117 	ldw	r16,4(sp)
 400be44:	dec00404 	addi	sp,sp,16
 400be48:	f800283a 	ret
 400be4c:	008000c4 	movi	r2,3
 400be50:	003ff906 	br	400be38 <__alt_data_end+0xfc00be38>

0400be54 <abort>:
 400be54:	deffff04 	addi	sp,sp,-4
 400be58:	01000184 	movi	r4,6
 400be5c:	dfc00015 	stw	ra,0(sp)
 400be60:	400cde00 	call	400cde0 <raise>
 400be64:	01000044 	movi	r4,1
 400be68:	401c33c0 	call	401c33c <_exit>

0400be6c <clock>:
 400be6c:	008100f4 	movhi	r2,1027
 400be70:	10b31d04 	addi	r2,r2,-13196
 400be74:	11000017 	ldw	r4,0(r2)
 400be78:	defffb04 	addi	sp,sp,-20
 400be7c:	d80b883a 	mov	r5,sp
 400be80:	dfc00415 	stw	ra,16(sp)
 400be84:	400f2a00 	call	400f2a0 <_times_r>
 400be88:	00ffffc4 	movi	r3,-1
 400be8c:	10c00726 	beq	r2,r3,400beac <clock+0x40>
 400be90:	d8c00017 	ldw	r3,0(sp)
 400be94:	d8800117 	ldw	r2,4(sp)
 400be98:	1885883a 	add	r2,r3,r2
 400be9c:	d8c00217 	ldw	r3,8(sp)
 400bea0:	10c7883a 	add	r3,r2,r3
 400bea4:	d8800317 	ldw	r2,12(sp)
 400bea8:	1885883a 	add	r2,r3,r2
 400beac:	dfc00417 	ldw	ra,16(sp)
 400beb0:	dec00504 	addi	sp,sp,20
 400beb4:	f800283a 	ret

0400beb8 <malloc>:
 400beb8:	008100f4 	movhi	r2,1027
 400bebc:	10b31d04 	addi	r2,r2,-13196
 400bec0:	200b883a 	mov	r5,r4
 400bec4:	11000017 	ldw	r4,0(r2)
 400bec8:	400bee01 	jmpi	400bee0 <_malloc_r>

0400becc <free>:
 400becc:	008100f4 	movhi	r2,1027
 400bed0:	10b31d04 	addi	r2,r2,-13196
 400bed4:	200b883a 	mov	r5,r4
 400bed8:	11000017 	ldw	r4,0(r2)
 400bedc:	40136c01 	jmpi	40136c0 <_free_r>

0400bee0 <_malloc_r>:
 400bee0:	defff504 	addi	sp,sp,-44
 400bee4:	dc800315 	stw	r18,12(sp)
 400bee8:	dfc00a15 	stw	ra,40(sp)
 400beec:	df000915 	stw	fp,36(sp)
 400bef0:	ddc00815 	stw	r23,32(sp)
 400bef4:	dd800715 	stw	r22,28(sp)
 400bef8:	dd400615 	stw	r21,24(sp)
 400befc:	dd000515 	stw	r20,20(sp)
 400bf00:	dcc00415 	stw	r19,16(sp)
 400bf04:	dc400215 	stw	r17,8(sp)
 400bf08:	dc000115 	stw	r16,4(sp)
 400bf0c:	288002c4 	addi	r2,r5,11
 400bf10:	00c00584 	movi	r3,22
 400bf14:	2025883a 	mov	r18,r4
 400bf18:	18807f2e 	bgeu	r3,r2,400c118 <_malloc_r+0x238>
 400bf1c:	047ffe04 	movi	r17,-8
 400bf20:	1462703a 	and	r17,r2,r17
 400bf24:	8800a316 	blt	r17,zero,400c1b4 <_malloc_r+0x2d4>
 400bf28:	8940a236 	bltu	r17,r5,400c1b4 <_malloc_r+0x2d4>
 400bf2c:	401c9400 	call	401c940 <__malloc_lock>
 400bf30:	00807dc4 	movi	r2,503
 400bf34:	1441e92e 	bgeu	r2,r17,400c6dc <_malloc_r+0x7fc>
 400bf38:	8804d27a 	srli	r2,r17,9
 400bf3c:	1000a126 	beq	r2,zero,400c1c4 <_malloc_r+0x2e4>
 400bf40:	00c00104 	movi	r3,4
 400bf44:	18811e36 	bltu	r3,r2,400c3c0 <_malloc_r+0x4e0>
 400bf48:	8804d1ba 	srli	r2,r17,6
 400bf4c:	12000e44 	addi	r8,r2,57
 400bf50:	11c00e04 	addi	r7,r2,56
 400bf54:	4209883a 	add	r4,r8,r8
 400bf58:	04c100f4 	movhi	r19,1027
 400bf5c:	2109883a 	add	r4,r4,r4
 400bf60:	9ced5e04 	addi	r19,r19,-19080
 400bf64:	2109883a 	add	r4,r4,r4
 400bf68:	9909883a 	add	r4,r19,r4
 400bf6c:	24000117 	ldw	r16,4(r4)
 400bf70:	213ffe04 	addi	r4,r4,-8
 400bf74:	24009726 	beq	r4,r16,400c1d4 <_malloc_r+0x2f4>
 400bf78:	80800117 	ldw	r2,4(r16)
 400bf7c:	01bfff04 	movi	r6,-4
 400bf80:	014003c4 	movi	r5,15
 400bf84:	1184703a 	and	r2,r2,r6
 400bf88:	1447c83a 	sub	r3,r2,r17
 400bf8c:	28c00716 	blt	r5,r3,400bfac <_malloc_r+0xcc>
 400bf90:	1800920e 	bge	r3,zero,400c1dc <_malloc_r+0x2fc>
 400bf94:	84000317 	ldw	r16,12(r16)
 400bf98:	24008e26 	beq	r4,r16,400c1d4 <_malloc_r+0x2f4>
 400bf9c:	80800117 	ldw	r2,4(r16)
 400bfa0:	1184703a 	and	r2,r2,r6
 400bfa4:	1447c83a 	sub	r3,r2,r17
 400bfa8:	28fff90e 	bge	r5,r3,400bf90 <__alt_data_end+0xfc00bf90>
 400bfac:	3809883a 	mov	r4,r7
 400bfb0:	018100f4 	movhi	r6,1027
 400bfb4:	9c000417 	ldw	r16,16(r19)
 400bfb8:	31ad5e04 	addi	r6,r6,-19080
 400bfbc:	32000204 	addi	r8,r6,8
 400bfc0:	82013426 	beq	r16,r8,400c494 <_malloc_r+0x5b4>
 400bfc4:	80c00117 	ldw	r3,4(r16)
 400bfc8:	00bfff04 	movi	r2,-4
 400bfcc:	188e703a 	and	r7,r3,r2
 400bfd0:	3c45c83a 	sub	r2,r7,r17
 400bfd4:	00c003c4 	movi	r3,15
 400bfd8:	18811f16 	blt	r3,r2,400c458 <_malloc_r+0x578>
 400bfdc:	32000515 	stw	r8,20(r6)
 400bfe0:	32000415 	stw	r8,16(r6)
 400bfe4:	10007f0e 	bge	r2,zero,400c1e4 <_malloc_r+0x304>
 400bfe8:	00807fc4 	movi	r2,511
 400bfec:	11c0fd36 	bltu	r2,r7,400c3e4 <_malloc_r+0x504>
 400bff0:	3806d0fa 	srli	r3,r7,3
 400bff4:	01c00044 	movi	r7,1
 400bff8:	30800117 	ldw	r2,4(r6)
 400bffc:	19400044 	addi	r5,r3,1
 400c000:	294b883a 	add	r5,r5,r5
 400c004:	1807d0ba 	srai	r3,r3,2
 400c008:	294b883a 	add	r5,r5,r5
 400c00c:	294b883a 	add	r5,r5,r5
 400c010:	298b883a 	add	r5,r5,r6
 400c014:	38c6983a 	sll	r3,r7,r3
 400c018:	29c00017 	ldw	r7,0(r5)
 400c01c:	2a7ffe04 	addi	r9,r5,-8
 400c020:	1886b03a 	or	r3,r3,r2
 400c024:	82400315 	stw	r9,12(r16)
 400c028:	81c00215 	stw	r7,8(r16)
 400c02c:	30c00115 	stw	r3,4(r6)
 400c030:	2c000015 	stw	r16,0(r5)
 400c034:	3c000315 	stw	r16,12(r7)
 400c038:	2005d0ba 	srai	r2,r4,2
 400c03c:	01400044 	movi	r5,1
 400c040:	288a983a 	sll	r5,r5,r2
 400c044:	19406f36 	bltu	r3,r5,400c204 <_malloc_r+0x324>
 400c048:	28c4703a 	and	r2,r5,r3
 400c04c:	10000a1e 	bne	r2,zero,400c078 <_malloc_r+0x198>
 400c050:	00bfff04 	movi	r2,-4
 400c054:	294b883a 	add	r5,r5,r5
 400c058:	2088703a 	and	r4,r4,r2
 400c05c:	28c4703a 	and	r2,r5,r3
 400c060:	21000104 	addi	r4,r4,4
 400c064:	1000041e 	bne	r2,zero,400c078 <_malloc_r+0x198>
 400c068:	294b883a 	add	r5,r5,r5
 400c06c:	28c4703a 	and	r2,r5,r3
 400c070:	21000104 	addi	r4,r4,4
 400c074:	103ffc26 	beq	r2,zero,400c068 <__alt_data_end+0xfc00c068>
 400c078:	02bfff04 	movi	r10,-4
 400c07c:	024003c4 	movi	r9,15
 400c080:	21800044 	addi	r6,r4,1
 400c084:	318d883a 	add	r6,r6,r6
 400c088:	318d883a 	add	r6,r6,r6
 400c08c:	318d883a 	add	r6,r6,r6
 400c090:	998d883a 	add	r6,r19,r6
 400c094:	333ffe04 	addi	r12,r6,-8
 400c098:	2017883a 	mov	r11,r4
 400c09c:	31800104 	addi	r6,r6,4
 400c0a0:	34000017 	ldw	r16,0(r6)
 400c0a4:	31fffd04 	addi	r7,r6,-12
 400c0a8:	81c0041e 	bne	r16,r7,400c0bc <_malloc_r+0x1dc>
 400c0ac:	0000fb06 	br	400c49c <_malloc_r+0x5bc>
 400c0b0:	1801030e 	bge	r3,zero,400c4c0 <_malloc_r+0x5e0>
 400c0b4:	84000317 	ldw	r16,12(r16)
 400c0b8:	81c0f826 	beq	r16,r7,400c49c <_malloc_r+0x5bc>
 400c0bc:	80800117 	ldw	r2,4(r16)
 400c0c0:	1284703a 	and	r2,r2,r10
 400c0c4:	1447c83a 	sub	r3,r2,r17
 400c0c8:	48fff90e 	bge	r9,r3,400c0b0 <__alt_data_end+0xfc00c0b0>
 400c0cc:	80800317 	ldw	r2,12(r16)
 400c0d0:	81000217 	ldw	r4,8(r16)
 400c0d4:	89400054 	ori	r5,r17,1
 400c0d8:	81400115 	stw	r5,4(r16)
 400c0dc:	20800315 	stw	r2,12(r4)
 400c0e0:	11000215 	stw	r4,8(r2)
 400c0e4:	8463883a 	add	r17,r16,r17
 400c0e8:	9c400515 	stw	r17,20(r19)
 400c0ec:	9c400415 	stw	r17,16(r19)
 400c0f0:	18800054 	ori	r2,r3,1
 400c0f4:	88800115 	stw	r2,4(r17)
 400c0f8:	8a000315 	stw	r8,12(r17)
 400c0fc:	8a000215 	stw	r8,8(r17)
 400c100:	88e3883a 	add	r17,r17,r3
 400c104:	88c00015 	stw	r3,0(r17)
 400c108:	9009883a 	mov	r4,r18
 400c10c:	401c9640 	call	401c964 <__malloc_unlock>
 400c110:	80800204 	addi	r2,r16,8
 400c114:	00001b06 	br	400c184 <_malloc_r+0x2a4>
 400c118:	04400404 	movi	r17,16
 400c11c:	89402536 	bltu	r17,r5,400c1b4 <_malloc_r+0x2d4>
 400c120:	401c9400 	call	401c940 <__malloc_lock>
 400c124:	00800184 	movi	r2,6
 400c128:	01000084 	movi	r4,2
 400c12c:	04c100f4 	movhi	r19,1027
 400c130:	1085883a 	add	r2,r2,r2
 400c134:	9ced5e04 	addi	r19,r19,-19080
 400c138:	1085883a 	add	r2,r2,r2
 400c13c:	9885883a 	add	r2,r19,r2
 400c140:	14000117 	ldw	r16,4(r2)
 400c144:	10fffe04 	addi	r3,r2,-8
 400c148:	80c0d926 	beq	r16,r3,400c4b0 <_malloc_r+0x5d0>
 400c14c:	80c00117 	ldw	r3,4(r16)
 400c150:	81000317 	ldw	r4,12(r16)
 400c154:	00bfff04 	movi	r2,-4
 400c158:	1884703a 	and	r2,r3,r2
 400c15c:	81400217 	ldw	r5,8(r16)
 400c160:	8085883a 	add	r2,r16,r2
 400c164:	10c00117 	ldw	r3,4(r2)
 400c168:	29000315 	stw	r4,12(r5)
 400c16c:	21400215 	stw	r5,8(r4)
 400c170:	18c00054 	ori	r3,r3,1
 400c174:	10c00115 	stw	r3,4(r2)
 400c178:	9009883a 	mov	r4,r18
 400c17c:	401c9640 	call	401c964 <__malloc_unlock>
 400c180:	80800204 	addi	r2,r16,8
 400c184:	dfc00a17 	ldw	ra,40(sp)
 400c188:	df000917 	ldw	fp,36(sp)
 400c18c:	ddc00817 	ldw	r23,32(sp)
 400c190:	dd800717 	ldw	r22,28(sp)
 400c194:	dd400617 	ldw	r21,24(sp)
 400c198:	dd000517 	ldw	r20,20(sp)
 400c19c:	dcc00417 	ldw	r19,16(sp)
 400c1a0:	dc800317 	ldw	r18,12(sp)
 400c1a4:	dc400217 	ldw	r17,8(sp)
 400c1a8:	dc000117 	ldw	r16,4(sp)
 400c1ac:	dec00b04 	addi	sp,sp,44
 400c1b0:	f800283a 	ret
 400c1b4:	00800304 	movi	r2,12
 400c1b8:	90800015 	stw	r2,0(r18)
 400c1bc:	0005883a 	mov	r2,zero
 400c1c0:	003ff006 	br	400c184 <__alt_data_end+0xfc00c184>
 400c1c4:	01002004 	movi	r4,128
 400c1c8:	02001004 	movi	r8,64
 400c1cc:	01c00fc4 	movi	r7,63
 400c1d0:	003f6106 	br	400bf58 <__alt_data_end+0xfc00bf58>
 400c1d4:	4009883a 	mov	r4,r8
 400c1d8:	003f7506 	br	400bfb0 <__alt_data_end+0xfc00bfb0>
 400c1dc:	81000317 	ldw	r4,12(r16)
 400c1e0:	003fde06 	br	400c15c <__alt_data_end+0xfc00c15c>
 400c1e4:	81c5883a 	add	r2,r16,r7
 400c1e8:	11400117 	ldw	r5,4(r2)
 400c1ec:	9009883a 	mov	r4,r18
 400c1f0:	29400054 	ori	r5,r5,1
 400c1f4:	11400115 	stw	r5,4(r2)
 400c1f8:	401c9640 	call	401c964 <__malloc_unlock>
 400c1fc:	80800204 	addi	r2,r16,8
 400c200:	003fe006 	br	400c184 <__alt_data_end+0xfc00c184>
 400c204:	9c000217 	ldw	r16,8(r19)
 400c208:	00bfff04 	movi	r2,-4
 400c20c:	85800117 	ldw	r22,4(r16)
 400c210:	b0ac703a 	and	r22,r22,r2
 400c214:	b4400336 	bltu	r22,r17,400c224 <_malloc_r+0x344>
 400c218:	b445c83a 	sub	r2,r22,r17
 400c21c:	00c003c4 	movi	r3,15
 400c220:	18805d16 	blt	r3,r2,400c398 <_malloc_r+0x4b8>
 400c224:	05c100f4 	movhi	r23,1027
 400c228:	00810134 	movhi	r2,1028
 400c22c:	10a5e804 	addi	r2,r2,-26720
 400c230:	bdf31e04 	addi	r23,r23,-13192
 400c234:	15400017 	ldw	r21,0(r2)
 400c238:	b8c00017 	ldw	r3,0(r23)
 400c23c:	00bfffc4 	movi	r2,-1
 400c240:	858d883a 	add	r6,r16,r22
 400c244:	8d6b883a 	add	r21,r17,r21
 400c248:	1880ea26 	beq	r3,r2,400c5f4 <_malloc_r+0x714>
 400c24c:	ad4403c4 	addi	r21,r21,4111
 400c250:	00bc0004 	movi	r2,-4096
 400c254:	a8aa703a 	and	r21,r21,r2
 400c258:	a80b883a 	mov	r5,r21
 400c25c:	9009883a 	mov	r4,r18
 400c260:	d9800015 	stw	r6,0(sp)
 400c264:	400cb380 	call	400cb38 <_sbrk_r>
 400c268:	1029883a 	mov	r20,r2
 400c26c:	00bfffc4 	movi	r2,-1
 400c270:	d9800017 	ldw	r6,0(sp)
 400c274:	a080e826 	beq	r20,r2,400c618 <_malloc_r+0x738>
 400c278:	a180a636 	bltu	r20,r6,400c514 <_malloc_r+0x634>
 400c27c:	07010134 	movhi	fp,1028
 400c280:	e7262304 	addi	fp,fp,-26484
 400c284:	e0800017 	ldw	r2,0(fp)
 400c288:	a887883a 	add	r3,r21,r2
 400c28c:	e0c00015 	stw	r3,0(fp)
 400c290:	3500e626 	beq	r6,r20,400c62c <_malloc_r+0x74c>
 400c294:	b9000017 	ldw	r4,0(r23)
 400c298:	00bfffc4 	movi	r2,-1
 400c29c:	2080ee26 	beq	r4,r2,400c658 <_malloc_r+0x778>
 400c2a0:	a185c83a 	sub	r2,r20,r6
 400c2a4:	10c5883a 	add	r2,r2,r3
 400c2a8:	e0800015 	stw	r2,0(fp)
 400c2ac:	a0c001cc 	andi	r3,r20,7
 400c2b0:	1800bc26 	beq	r3,zero,400c5a4 <_malloc_r+0x6c4>
 400c2b4:	a0e9c83a 	sub	r20,r20,r3
 400c2b8:	00840204 	movi	r2,4104
 400c2bc:	a5000204 	addi	r20,r20,8
 400c2c0:	10c7c83a 	sub	r3,r2,r3
 400c2c4:	a545883a 	add	r2,r20,r21
 400c2c8:	1083ffcc 	andi	r2,r2,4095
 400c2cc:	18abc83a 	sub	r21,r3,r2
 400c2d0:	a80b883a 	mov	r5,r21
 400c2d4:	9009883a 	mov	r4,r18
 400c2d8:	400cb380 	call	400cb38 <_sbrk_r>
 400c2dc:	00ffffc4 	movi	r3,-1
 400c2e0:	10c0e126 	beq	r2,r3,400c668 <_malloc_r+0x788>
 400c2e4:	1505c83a 	sub	r2,r2,r20
 400c2e8:	1545883a 	add	r2,r2,r21
 400c2ec:	10800054 	ori	r2,r2,1
 400c2f0:	e0c00017 	ldw	r3,0(fp)
 400c2f4:	9d000215 	stw	r20,8(r19)
 400c2f8:	a0800115 	stw	r2,4(r20)
 400c2fc:	a8c7883a 	add	r3,r21,r3
 400c300:	e0c00015 	stw	r3,0(fp)
 400c304:	84c00e26 	beq	r16,r19,400c340 <_malloc_r+0x460>
 400c308:	018003c4 	movi	r6,15
 400c30c:	3580a72e 	bgeu	r6,r22,400c5ac <_malloc_r+0x6cc>
 400c310:	81400117 	ldw	r5,4(r16)
 400c314:	013ffe04 	movi	r4,-8
 400c318:	b0bffd04 	addi	r2,r22,-12
 400c31c:	1104703a 	and	r2,r2,r4
 400c320:	2900004c 	andi	r4,r5,1
 400c324:	2088b03a 	or	r4,r4,r2
 400c328:	81000115 	stw	r4,4(r16)
 400c32c:	01400144 	movi	r5,5
 400c330:	8089883a 	add	r4,r16,r2
 400c334:	21400115 	stw	r5,4(r4)
 400c338:	21400215 	stw	r5,8(r4)
 400c33c:	3080cd36 	bltu	r6,r2,400c674 <_malloc_r+0x794>
 400c340:	00810134 	movhi	r2,1028
 400c344:	10a5e704 	addi	r2,r2,-26724
 400c348:	11000017 	ldw	r4,0(r2)
 400c34c:	20c0012e 	bgeu	r4,r3,400c354 <_malloc_r+0x474>
 400c350:	10c00015 	stw	r3,0(r2)
 400c354:	00810134 	movhi	r2,1028
 400c358:	10a5e604 	addi	r2,r2,-26728
 400c35c:	11000017 	ldw	r4,0(r2)
 400c360:	9c000217 	ldw	r16,8(r19)
 400c364:	20c0012e 	bgeu	r4,r3,400c36c <_malloc_r+0x48c>
 400c368:	10c00015 	stw	r3,0(r2)
 400c36c:	80c00117 	ldw	r3,4(r16)
 400c370:	00bfff04 	movi	r2,-4
 400c374:	1886703a 	and	r3,r3,r2
 400c378:	1c45c83a 	sub	r2,r3,r17
 400c37c:	1c400236 	bltu	r3,r17,400c388 <_malloc_r+0x4a8>
 400c380:	00c003c4 	movi	r3,15
 400c384:	18800416 	blt	r3,r2,400c398 <_malloc_r+0x4b8>
 400c388:	9009883a 	mov	r4,r18
 400c38c:	401c9640 	call	401c964 <__malloc_unlock>
 400c390:	0005883a 	mov	r2,zero
 400c394:	003f7b06 	br	400c184 <__alt_data_end+0xfc00c184>
 400c398:	88c00054 	ori	r3,r17,1
 400c39c:	80c00115 	stw	r3,4(r16)
 400c3a0:	8463883a 	add	r17,r16,r17
 400c3a4:	10800054 	ori	r2,r2,1
 400c3a8:	9c400215 	stw	r17,8(r19)
 400c3ac:	88800115 	stw	r2,4(r17)
 400c3b0:	9009883a 	mov	r4,r18
 400c3b4:	401c9640 	call	401c964 <__malloc_unlock>
 400c3b8:	80800204 	addi	r2,r16,8
 400c3bc:	003f7106 	br	400c184 <__alt_data_end+0xfc00c184>
 400c3c0:	00c00504 	movi	r3,20
 400c3c4:	18804a2e 	bgeu	r3,r2,400c4f0 <_malloc_r+0x610>
 400c3c8:	00c01504 	movi	r3,84
 400c3cc:	18806e36 	bltu	r3,r2,400c588 <_malloc_r+0x6a8>
 400c3d0:	8804d33a 	srli	r2,r17,12
 400c3d4:	12001bc4 	addi	r8,r2,111
 400c3d8:	11c01b84 	addi	r7,r2,110
 400c3dc:	4209883a 	add	r4,r8,r8
 400c3e0:	003edd06 	br	400bf58 <__alt_data_end+0xfc00bf58>
 400c3e4:	3804d27a 	srli	r2,r7,9
 400c3e8:	00c00104 	movi	r3,4
 400c3ec:	1880442e 	bgeu	r3,r2,400c500 <_malloc_r+0x620>
 400c3f0:	00c00504 	movi	r3,20
 400c3f4:	18808136 	bltu	r3,r2,400c5fc <_malloc_r+0x71c>
 400c3f8:	11401704 	addi	r5,r2,92
 400c3fc:	10c016c4 	addi	r3,r2,91
 400c400:	294b883a 	add	r5,r5,r5
 400c404:	294b883a 	add	r5,r5,r5
 400c408:	294b883a 	add	r5,r5,r5
 400c40c:	994b883a 	add	r5,r19,r5
 400c410:	28800017 	ldw	r2,0(r5)
 400c414:	018100f4 	movhi	r6,1027
 400c418:	297ffe04 	addi	r5,r5,-8
 400c41c:	31ad5e04 	addi	r6,r6,-19080
 400c420:	28806526 	beq	r5,r2,400c5b8 <_malloc_r+0x6d8>
 400c424:	01bfff04 	movi	r6,-4
 400c428:	10c00117 	ldw	r3,4(r2)
 400c42c:	1986703a 	and	r3,r3,r6
 400c430:	38c0022e 	bgeu	r7,r3,400c43c <_malloc_r+0x55c>
 400c434:	10800217 	ldw	r2,8(r2)
 400c438:	28bffb1e 	bne	r5,r2,400c428 <__alt_data_end+0xfc00c428>
 400c43c:	11400317 	ldw	r5,12(r2)
 400c440:	98c00117 	ldw	r3,4(r19)
 400c444:	81400315 	stw	r5,12(r16)
 400c448:	80800215 	stw	r2,8(r16)
 400c44c:	2c000215 	stw	r16,8(r5)
 400c450:	14000315 	stw	r16,12(r2)
 400c454:	003ef806 	br	400c038 <__alt_data_end+0xfc00c038>
 400c458:	88c00054 	ori	r3,r17,1
 400c45c:	80c00115 	stw	r3,4(r16)
 400c460:	8463883a 	add	r17,r16,r17
 400c464:	34400515 	stw	r17,20(r6)
 400c468:	34400415 	stw	r17,16(r6)
 400c46c:	10c00054 	ori	r3,r2,1
 400c470:	8a000315 	stw	r8,12(r17)
 400c474:	8a000215 	stw	r8,8(r17)
 400c478:	88c00115 	stw	r3,4(r17)
 400c47c:	88a3883a 	add	r17,r17,r2
 400c480:	88800015 	stw	r2,0(r17)
 400c484:	9009883a 	mov	r4,r18
 400c488:	401c9640 	call	401c964 <__malloc_unlock>
 400c48c:	80800204 	addi	r2,r16,8
 400c490:	003f3c06 	br	400c184 <__alt_data_end+0xfc00c184>
 400c494:	30c00117 	ldw	r3,4(r6)
 400c498:	003ee706 	br	400c038 <__alt_data_end+0xfc00c038>
 400c49c:	5ac00044 	addi	r11,r11,1
 400c4a0:	588000cc 	andi	r2,r11,3
 400c4a4:	31800204 	addi	r6,r6,8
 400c4a8:	103efd1e 	bne	r2,zero,400c0a0 <__alt_data_end+0xfc00c0a0>
 400c4ac:	00002406 	br	400c540 <_malloc_r+0x660>
 400c4b0:	14000317 	ldw	r16,12(r2)
 400c4b4:	143f251e 	bne	r2,r16,400c14c <__alt_data_end+0xfc00c14c>
 400c4b8:	21000084 	addi	r4,r4,2
 400c4bc:	003ebc06 	br	400bfb0 <__alt_data_end+0xfc00bfb0>
 400c4c0:	8085883a 	add	r2,r16,r2
 400c4c4:	10c00117 	ldw	r3,4(r2)
 400c4c8:	81000317 	ldw	r4,12(r16)
 400c4cc:	81400217 	ldw	r5,8(r16)
 400c4d0:	18c00054 	ori	r3,r3,1
 400c4d4:	10c00115 	stw	r3,4(r2)
 400c4d8:	29000315 	stw	r4,12(r5)
 400c4dc:	21400215 	stw	r5,8(r4)
 400c4e0:	9009883a 	mov	r4,r18
 400c4e4:	401c9640 	call	401c964 <__malloc_unlock>
 400c4e8:	80800204 	addi	r2,r16,8
 400c4ec:	003f2506 	br	400c184 <__alt_data_end+0xfc00c184>
 400c4f0:	12001704 	addi	r8,r2,92
 400c4f4:	11c016c4 	addi	r7,r2,91
 400c4f8:	4209883a 	add	r4,r8,r8
 400c4fc:	003e9606 	br	400bf58 <__alt_data_end+0xfc00bf58>
 400c500:	3804d1ba 	srli	r2,r7,6
 400c504:	11400e44 	addi	r5,r2,57
 400c508:	10c00e04 	addi	r3,r2,56
 400c50c:	294b883a 	add	r5,r5,r5
 400c510:	003fbc06 	br	400c404 <__alt_data_end+0xfc00c404>
 400c514:	84ff5926 	beq	r16,r19,400c27c <__alt_data_end+0xfc00c27c>
 400c518:	008100f4 	movhi	r2,1027
 400c51c:	10ad5e04 	addi	r2,r2,-19080
 400c520:	14000217 	ldw	r16,8(r2)
 400c524:	00bfff04 	movi	r2,-4
 400c528:	80c00117 	ldw	r3,4(r16)
 400c52c:	1886703a 	and	r3,r3,r2
 400c530:	003f9106 	br	400c378 <__alt_data_end+0xfc00c378>
 400c534:	60800217 	ldw	r2,8(r12)
 400c538:	213fffc4 	addi	r4,r4,-1
 400c53c:	1300651e 	bne	r2,r12,400c6d4 <_malloc_r+0x7f4>
 400c540:	208000cc 	andi	r2,r4,3
 400c544:	633ffe04 	addi	r12,r12,-8
 400c548:	103ffa1e 	bne	r2,zero,400c534 <__alt_data_end+0xfc00c534>
 400c54c:	98800117 	ldw	r2,4(r19)
 400c550:	0146303a 	nor	r3,zero,r5
 400c554:	1884703a 	and	r2,r3,r2
 400c558:	98800115 	stw	r2,4(r19)
 400c55c:	294b883a 	add	r5,r5,r5
 400c560:	117f2836 	bltu	r2,r5,400c204 <__alt_data_end+0xfc00c204>
 400c564:	283f2726 	beq	r5,zero,400c204 <__alt_data_end+0xfc00c204>
 400c568:	2886703a 	and	r3,r5,r2
 400c56c:	5809883a 	mov	r4,r11
 400c570:	183ec31e 	bne	r3,zero,400c080 <__alt_data_end+0xfc00c080>
 400c574:	294b883a 	add	r5,r5,r5
 400c578:	2886703a 	and	r3,r5,r2
 400c57c:	21000104 	addi	r4,r4,4
 400c580:	183ffc26 	beq	r3,zero,400c574 <__alt_data_end+0xfc00c574>
 400c584:	003ebe06 	br	400c080 <__alt_data_end+0xfc00c080>
 400c588:	00c05504 	movi	r3,340
 400c58c:	18801236 	bltu	r3,r2,400c5d8 <_malloc_r+0x6f8>
 400c590:	8804d3fa 	srli	r2,r17,15
 400c594:	12001e04 	addi	r8,r2,120
 400c598:	11c01dc4 	addi	r7,r2,119
 400c59c:	4209883a 	add	r4,r8,r8
 400c5a0:	003e6d06 	br	400bf58 <__alt_data_end+0xfc00bf58>
 400c5a4:	00c40004 	movi	r3,4096
 400c5a8:	003f4606 	br	400c2c4 <__alt_data_end+0xfc00c2c4>
 400c5ac:	00800044 	movi	r2,1
 400c5b0:	a0800115 	stw	r2,4(r20)
 400c5b4:	003f7406 	br	400c388 <__alt_data_end+0xfc00c388>
 400c5b8:	1805d0ba 	srai	r2,r3,2
 400c5bc:	01c00044 	movi	r7,1
 400c5c0:	30c00117 	ldw	r3,4(r6)
 400c5c4:	388e983a 	sll	r7,r7,r2
 400c5c8:	2805883a 	mov	r2,r5
 400c5cc:	38c6b03a 	or	r3,r7,r3
 400c5d0:	30c00115 	stw	r3,4(r6)
 400c5d4:	003f9b06 	br	400c444 <__alt_data_end+0xfc00c444>
 400c5d8:	00c15504 	movi	r3,1364
 400c5dc:	18801a36 	bltu	r3,r2,400c648 <_malloc_r+0x768>
 400c5e0:	8804d4ba 	srli	r2,r17,18
 400c5e4:	12001f44 	addi	r8,r2,125
 400c5e8:	11c01f04 	addi	r7,r2,124
 400c5ec:	4209883a 	add	r4,r8,r8
 400c5f0:	003e5906 	br	400bf58 <__alt_data_end+0xfc00bf58>
 400c5f4:	ad400404 	addi	r21,r21,16
 400c5f8:	003f1706 	br	400c258 <__alt_data_end+0xfc00c258>
 400c5fc:	00c01504 	movi	r3,84
 400c600:	18802336 	bltu	r3,r2,400c690 <_malloc_r+0x7b0>
 400c604:	3804d33a 	srli	r2,r7,12
 400c608:	11401bc4 	addi	r5,r2,111
 400c60c:	10c01b84 	addi	r3,r2,110
 400c610:	294b883a 	add	r5,r5,r5
 400c614:	003f7b06 	br	400c404 <__alt_data_end+0xfc00c404>
 400c618:	9c000217 	ldw	r16,8(r19)
 400c61c:	00bfff04 	movi	r2,-4
 400c620:	80c00117 	ldw	r3,4(r16)
 400c624:	1886703a 	and	r3,r3,r2
 400c628:	003f5306 	br	400c378 <__alt_data_end+0xfc00c378>
 400c62c:	3083ffcc 	andi	r2,r6,4095
 400c630:	103f181e 	bne	r2,zero,400c294 <__alt_data_end+0xfc00c294>
 400c634:	99000217 	ldw	r4,8(r19)
 400c638:	b545883a 	add	r2,r22,r21
 400c63c:	10800054 	ori	r2,r2,1
 400c640:	20800115 	stw	r2,4(r4)
 400c644:	003f3e06 	br	400c340 <__alt_data_end+0xfc00c340>
 400c648:	01003f84 	movi	r4,254
 400c64c:	02001fc4 	movi	r8,127
 400c650:	01c01f84 	movi	r7,126
 400c654:	003e4006 	br	400bf58 <__alt_data_end+0xfc00bf58>
 400c658:	008100f4 	movhi	r2,1027
 400c65c:	10b31e04 	addi	r2,r2,-13192
 400c660:	15000015 	stw	r20,0(r2)
 400c664:	003f1106 	br	400c2ac <__alt_data_end+0xfc00c2ac>
 400c668:	00800044 	movi	r2,1
 400c66c:	002b883a 	mov	r21,zero
 400c670:	003f1f06 	br	400c2f0 <__alt_data_end+0xfc00c2f0>
 400c674:	81400204 	addi	r5,r16,8
 400c678:	9009883a 	mov	r4,r18
 400c67c:	40136c00 	call	40136c0 <_free_r>
 400c680:	00810134 	movhi	r2,1028
 400c684:	10a62304 	addi	r2,r2,-26484
 400c688:	10c00017 	ldw	r3,0(r2)
 400c68c:	003f2c06 	br	400c340 <__alt_data_end+0xfc00c340>
 400c690:	00c05504 	movi	r3,340
 400c694:	18800536 	bltu	r3,r2,400c6ac <_malloc_r+0x7cc>
 400c698:	3804d3fa 	srli	r2,r7,15
 400c69c:	11401e04 	addi	r5,r2,120
 400c6a0:	10c01dc4 	addi	r3,r2,119
 400c6a4:	294b883a 	add	r5,r5,r5
 400c6a8:	003f5606 	br	400c404 <__alt_data_end+0xfc00c404>
 400c6ac:	00c15504 	movi	r3,1364
 400c6b0:	18800536 	bltu	r3,r2,400c6c8 <_malloc_r+0x7e8>
 400c6b4:	3804d4ba 	srli	r2,r7,18
 400c6b8:	11401f44 	addi	r5,r2,125
 400c6bc:	10c01f04 	addi	r3,r2,124
 400c6c0:	294b883a 	add	r5,r5,r5
 400c6c4:	003f4f06 	br	400c404 <__alt_data_end+0xfc00c404>
 400c6c8:	01403f84 	movi	r5,254
 400c6cc:	00c01f84 	movi	r3,126
 400c6d0:	003f4c06 	br	400c404 <__alt_data_end+0xfc00c404>
 400c6d4:	98800117 	ldw	r2,4(r19)
 400c6d8:	003fa006 	br	400c55c <__alt_data_end+0xfc00c55c>
 400c6dc:	8808d0fa 	srli	r4,r17,3
 400c6e0:	20800044 	addi	r2,r4,1
 400c6e4:	1085883a 	add	r2,r2,r2
 400c6e8:	003e9006 	br	400c12c <__alt_data_end+0xfc00c12c>

0400c6ec <memcmp>:
 400c6ec:	01c000c4 	movi	r7,3
 400c6f0:	3980192e 	bgeu	r7,r6,400c758 <memcmp+0x6c>
 400c6f4:	2144b03a 	or	r2,r4,r5
 400c6f8:	11c4703a 	and	r2,r2,r7
 400c6fc:	10000f26 	beq	r2,zero,400c73c <memcmp+0x50>
 400c700:	20800003 	ldbu	r2,0(r4)
 400c704:	28c00003 	ldbu	r3,0(r5)
 400c708:	10c0151e 	bne	r2,r3,400c760 <memcmp+0x74>
 400c70c:	31bfff84 	addi	r6,r6,-2
 400c710:	01ffffc4 	movi	r7,-1
 400c714:	00000406 	br	400c728 <memcmp+0x3c>
 400c718:	20800003 	ldbu	r2,0(r4)
 400c71c:	28c00003 	ldbu	r3,0(r5)
 400c720:	31bfffc4 	addi	r6,r6,-1
 400c724:	10c00e1e 	bne	r2,r3,400c760 <memcmp+0x74>
 400c728:	21000044 	addi	r4,r4,1
 400c72c:	29400044 	addi	r5,r5,1
 400c730:	31fff91e 	bne	r6,r7,400c718 <__alt_data_end+0xfc00c718>
 400c734:	0005883a 	mov	r2,zero
 400c738:	f800283a 	ret
 400c73c:	20c00017 	ldw	r3,0(r4)
 400c740:	28800017 	ldw	r2,0(r5)
 400c744:	18bfee1e 	bne	r3,r2,400c700 <__alt_data_end+0xfc00c700>
 400c748:	31bfff04 	addi	r6,r6,-4
 400c74c:	21000104 	addi	r4,r4,4
 400c750:	29400104 	addi	r5,r5,4
 400c754:	39bff936 	bltu	r7,r6,400c73c <__alt_data_end+0xfc00c73c>
 400c758:	303fe91e 	bne	r6,zero,400c700 <__alt_data_end+0xfc00c700>
 400c75c:	003ff506 	br	400c734 <__alt_data_end+0xfc00c734>
 400c760:	10c5c83a 	sub	r2,r2,r3
 400c764:	f800283a 	ret

0400c768 <memcpy>:
 400c768:	defffd04 	addi	sp,sp,-12
 400c76c:	dfc00215 	stw	ra,8(sp)
 400c770:	dc400115 	stw	r17,4(sp)
 400c774:	dc000015 	stw	r16,0(sp)
 400c778:	00c003c4 	movi	r3,15
 400c77c:	2005883a 	mov	r2,r4
 400c780:	1980452e 	bgeu	r3,r6,400c898 <memcpy+0x130>
 400c784:	2906b03a 	or	r3,r5,r4
 400c788:	18c000cc 	andi	r3,r3,3
 400c78c:	1800441e 	bne	r3,zero,400c8a0 <memcpy+0x138>
 400c790:	347ffc04 	addi	r17,r6,-16
 400c794:	8822d13a 	srli	r17,r17,4
 400c798:	28c00104 	addi	r3,r5,4
 400c79c:	23400104 	addi	r13,r4,4
 400c7a0:	8820913a 	slli	r16,r17,4
 400c7a4:	2b000204 	addi	r12,r5,8
 400c7a8:	22c00204 	addi	r11,r4,8
 400c7ac:	84000504 	addi	r16,r16,20
 400c7b0:	2a800304 	addi	r10,r5,12
 400c7b4:	22400304 	addi	r9,r4,12
 400c7b8:	2c21883a 	add	r16,r5,r16
 400c7bc:	2811883a 	mov	r8,r5
 400c7c0:	200f883a 	mov	r7,r4
 400c7c4:	41000017 	ldw	r4,0(r8)
 400c7c8:	1fc00017 	ldw	ra,0(r3)
 400c7cc:	63c00017 	ldw	r15,0(r12)
 400c7d0:	39000015 	stw	r4,0(r7)
 400c7d4:	53800017 	ldw	r14,0(r10)
 400c7d8:	6fc00015 	stw	ra,0(r13)
 400c7dc:	5bc00015 	stw	r15,0(r11)
 400c7e0:	4b800015 	stw	r14,0(r9)
 400c7e4:	18c00404 	addi	r3,r3,16
 400c7e8:	39c00404 	addi	r7,r7,16
 400c7ec:	42000404 	addi	r8,r8,16
 400c7f0:	6b400404 	addi	r13,r13,16
 400c7f4:	63000404 	addi	r12,r12,16
 400c7f8:	5ac00404 	addi	r11,r11,16
 400c7fc:	52800404 	addi	r10,r10,16
 400c800:	4a400404 	addi	r9,r9,16
 400c804:	1c3fef1e 	bne	r3,r16,400c7c4 <__alt_data_end+0xfc00c7c4>
 400c808:	89c00044 	addi	r7,r17,1
 400c80c:	380e913a 	slli	r7,r7,4
 400c810:	310003cc 	andi	r4,r6,15
 400c814:	02c000c4 	movi	r11,3
 400c818:	11c7883a 	add	r3,r2,r7
 400c81c:	29cb883a 	add	r5,r5,r7
 400c820:	5900212e 	bgeu	r11,r4,400c8a8 <memcpy+0x140>
 400c824:	1813883a 	mov	r9,r3
 400c828:	2811883a 	mov	r8,r5
 400c82c:	200f883a 	mov	r7,r4
 400c830:	42800017 	ldw	r10,0(r8)
 400c834:	4a400104 	addi	r9,r9,4
 400c838:	39ffff04 	addi	r7,r7,-4
 400c83c:	4abfff15 	stw	r10,-4(r9)
 400c840:	42000104 	addi	r8,r8,4
 400c844:	59fffa36 	bltu	r11,r7,400c830 <__alt_data_end+0xfc00c830>
 400c848:	213fff04 	addi	r4,r4,-4
 400c84c:	2008d0ba 	srli	r4,r4,2
 400c850:	318000cc 	andi	r6,r6,3
 400c854:	21000044 	addi	r4,r4,1
 400c858:	2109883a 	add	r4,r4,r4
 400c85c:	2109883a 	add	r4,r4,r4
 400c860:	1907883a 	add	r3,r3,r4
 400c864:	290b883a 	add	r5,r5,r4
 400c868:	30000626 	beq	r6,zero,400c884 <memcpy+0x11c>
 400c86c:	198d883a 	add	r6,r3,r6
 400c870:	29c00003 	ldbu	r7,0(r5)
 400c874:	18c00044 	addi	r3,r3,1
 400c878:	29400044 	addi	r5,r5,1
 400c87c:	19ffffc5 	stb	r7,-1(r3)
 400c880:	19bffb1e 	bne	r3,r6,400c870 <__alt_data_end+0xfc00c870>
 400c884:	dfc00217 	ldw	ra,8(sp)
 400c888:	dc400117 	ldw	r17,4(sp)
 400c88c:	dc000017 	ldw	r16,0(sp)
 400c890:	dec00304 	addi	sp,sp,12
 400c894:	f800283a 	ret
 400c898:	2007883a 	mov	r3,r4
 400c89c:	003ff206 	br	400c868 <__alt_data_end+0xfc00c868>
 400c8a0:	2007883a 	mov	r3,r4
 400c8a4:	003ff106 	br	400c86c <__alt_data_end+0xfc00c86c>
 400c8a8:	200d883a 	mov	r6,r4
 400c8ac:	003fee06 	br	400c868 <__alt_data_end+0xfc00c868>

0400c8b0 <memset>:
 400c8b0:	20c000cc 	andi	r3,r4,3
 400c8b4:	2005883a 	mov	r2,r4
 400c8b8:	18004426 	beq	r3,zero,400c9cc <memset+0x11c>
 400c8bc:	31ffffc4 	addi	r7,r6,-1
 400c8c0:	30004026 	beq	r6,zero,400c9c4 <memset+0x114>
 400c8c4:	2813883a 	mov	r9,r5
 400c8c8:	200d883a 	mov	r6,r4
 400c8cc:	2007883a 	mov	r3,r4
 400c8d0:	00000406 	br	400c8e4 <memset+0x34>
 400c8d4:	3a3fffc4 	addi	r8,r7,-1
 400c8d8:	31800044 	addi	r6,r6,1
 400c8dc:	38003926 	beq	r7,zero,400c9c4 <memset+0x114>
 400c8e0:	400f883a 	mov	r7,r8
 400c8e4:	18c00044 	addi	r3,r3,1
 400c8e8:	32400005 	stb	r9,0(r6)
 400c8ec:	1a0000cc 	andi	r8,r3,3
 400c8f0:	403ff81e 	bne	r8,zero,400c8d4 <__alt_data_end+0xfc00c8d4>
 400c8f4:	010000c4 	movi	r4,3
 400c8f8:	21c02d2e 	bgeu	r4,r7,400c9b0 <memset+0x100>
 400c8fc:	29003fcc 	andi	r4,r5,255
 400c900:	200c923a 	slli	r6,r4,8
 400c904:	3108b03a 	or	r4,r6,r4
 400c908:	200c943a 	slli	r6,r4,16
 400c90c:	218cb03a 	or	r6,r4,r6
 400c910:	010003c4 	movi	r4,15
 400c914:	21c0182e 	bgeu	r4,r7,400c978 <memset+0xc8>
 400c918:	3b3ffc04 	addi	r12,r7,-16
 400c91c:	6018d13a 	srli	r12,r12,4
 400c920:	1a000104 	addi	r8,r3,4
 400c924:	1ac00204 	addi	r11,r3,8
 400c928:	6008913a 	slli	r4,r12,4
 400c92c:	1a800304 	addi	r10,r3,12
 400c930:	1813883a 	mov	r9,r3
 400c934:	21000504 	addi	r4,r4,20
 400c938:	1909883a 	add	r4,r3,r4
 400c93c:	49800015 	stw	r6,0(r9)
 400c940:	41800015 	stw	r6,0(r8)
 400c944:	59800015 	stw	r6,0(r11)
 400c948:	51800015 	stw	r6,0(r10)
 400c94c:	42000404 	addi	r8,r8,16
 400c950:	4a400404 	addi	r9,r9,16
 400c954:	5ac00404 	addi	r11,r11,16
 400c958:	52800404 	addi	r10,r10,16
 400c95c:	413ff71e 	bne	r8,r4,400c93c <__alt_data_end+0xfc00c93c>
 400c960:	63000044 	addi	r12,r12,1
 400c964:	6018913a 	slli	r12,r12,4
 400c968:	39c003cc 	andi	r7,r7,15
 400c96c:	010000c4 	movi	r4,3
 400c970:	1b07883a 	add	r3,r3,r12
 400c974:	21c00e2e 	bgeu	r4,r7,400c9b0 <memset+0x100>
 400c978:	1813883a 	mov	r9,r3
 400c97c:	3811883a 	mov	r8,r7
 400c980:	010000c4 	movi	r4,3
 400c984:	49800015 	stw	r6,0(r9)
 400c988:	423fff04 	addi	r8,r8,-4
 400c98c:	4a400104 	addi	r9,r9,4
 400c990:	223ffc36 	bltu	r4,r8,400c984 <__alt_data_end+0xfc00c984>
 400c994:	393fff04 	addi	r4,r7,-4
 400c998:	2008d0ba 	srli	r4,r4,2
 400c99c:	39c000cc 	andi	r7,r7,3
 400c9a0:	21000044 	addi	r4,r4,1
 400c9a4:	2109883a 	add	r4,r4,r4
 400c9a8:	2109883a 	add	r4,r4,r4
 400c9ac:	1907883a 	add	r3,r3,r4
 400c9b0:	38000526 	beq	r7,zero,400c9c8 <memset+0x118>
 400c9b4:	19cf883a 	add	r7,r3,r7
 400c9b8:	19400005 	stb	r5,0(r3)
 400c9bc:	18c00044 	addi	r3,r3,1
 400c9c0:	38fffd1e 	bne	r7,r3,400c9b8 <__alt_data_end+0xfc00c9b8>
 400c9c4:	f800283a 	ret
 400c9c8:	f800283a 	ret
 400c9cc:	2007883a 	mov	r3,r4
 400c9d0:	300f883a 	mov	r7,r6
 400c9d4:	003fc706 	br	400c8f4 <__alt_data_end+0xfc00c8f4>

0400c9d8 <_printf_r>:
 400c9d8:	defffd04 	addi	sp,sp,-12
 400c9dc:	2805883a 	mov	r2,r5
 400c9e0:	dfc00015 	stw	ra,0(sp)
 400c9e4:	d9800115 	stw	r6,4(sp)
 400c9e8:	d9c00215 	stw	r7,8(sp)
 400c9ec:	21400217 	ldw	r5,8(r4)
 400c9f0:	d9c00104 	addi	r7,sp,4
 400c9f4:	100d883a 	mov	r6,r2
 400c9f8:	400f2a80 	call	400f2a8 <___vfprintf_internal_r>
 400c9fc:	dfc00017 	ldw	ra,0(sp)
 400ca00:	dec00304 	addi	sp,sp,12
 400ca04:	f800283a 	ret

0400ca08 <printf>:
 400ca08:	defffc04 	addi	sp,sp,-16
 400ca0c:	dfc00015 	stw	ra,0(sp)
 400ca10:	d9400115 	stw	r5,4(sp)
 400ca14:	d9800215 	stw	r6,8(sp)
 400ca18:	d9c00315 	stw	r7,12(sp)
 400ca1c:	008100f4 	movhi	r2,1027
 400ca20:	10b31d04 	addi	r2,r2,-13196
 400ca24:	10800017 	ldw	r2,0(r2)
 400ca28:	200b883a 	mov	r5,r4
 400ca2c:	d9800104 	addi	r6,sp,4
 400ca30:	11000217 	ldw	r4,8(r2)
 400ca34:	40114a00 	call	40114a0 <__vfprintf_internal>
 400ca38:	dfc00017 	ldw	ra,0(sp)
 400ca3c:	dec00404 	addi	sp,sp,16
 400ca40:	f800283a 	ret

0400ca44 <_putchar_r>:
 400ca44:	21800217 	ldw	r6,8(r4)
 400ca48:	40154e81 	jmpi	40154e8 <_putc_r>

0400ca4c <putchar>:
 400ca4c:	008100f4 	movhi	r2,1027
 400ca50:	10b31d04 	addi	r2,r2,-13196
 400ca54:	200b883a 	mov	r5,r4
 400ca58:	11000017 	ldw	r4,0(r2)
 400ca5c:	21800217 	ldw	r6,8(r4)
 400ca60:	40154e81 	jmpi	40154e8 <_putc_r>

0400ca64 <_puts_r>:
 400ca64:	defff604 	addi	sp,sp,-40
 400ca68:	dc000715 	stw	r16,28(sp)
 400ca6c:	2021883a 	mov	r16,r4
 400ca70:	2809883a 	mov	r4,r5
 400ca74:	dc400815 	stw	r17,32(sp)
 400ca78:	dfc00915 	stw	ra,36(sp)
 400ca7c:	2823883a 	mov	r17,r5
 400ca80:	400d0300 	call	400d030 <strlen>
 400ca84:	10c00044 	addi	r3,r2,1
 400ca88:	d8800115 	stw	r2,4(sp)
 400ca8c:	008100b4 	movhi	r2,1026
 400ca90:	10bfba04 	addi	r2,r2,-280
 400ca94:	d8800215 	stw	r2,8(sp)
 400ca98:	00800044 	movi	r2,1
 400ca9c:	d8800315 	stw	r2,12(sp)
 400caa0:	00800084 	movi	r2,2
 400caa4:	dc400015 	stw	r17,0(sp)
 400caa8:	d8c00615 	stw	r3,24(sp)
 400caac:	dec00415 	stw	sp,16(sp)
 400cab0:	d8800515 	stw	r2,20(sp)
 400cab4:	80000226 	beq	r16,zero,400cac0 <_puts_r+0x5c>
 400cab8:	80800e17 	ldw	r2,56(r16)
 400cabc:	10001426 	beq	r2,zero,400cb10 <_puts_r+0xac>
 400cac0:	81400217 	ldw	r5,8(r16)
 400cac4:	2880030b 	ldhu	r2,12(r5)
 400cac8:	10c8000c 	andi	r3,r2,8192
 400cacc:	1800061e 	bne	r3,zero,400cae8 <_puts_r+0x84>
 400cad0:	29001917 	ldw	r4,100(r5)
 400cad4:	00f7ffc4 	movi	r3,-8193
 400cad8:	10880014 	ori	r2,r2,8192
 400cadc:	20c6703a 	and	r3,r4,r3
 400cae0:	2880030d 	sth	r2,12(r5)
 400cae4:	28c01915 	stw	r3,100(r5)
 400cae8:	d9800404 	addi	r6,sp,16
 400caec:	8009883a 	mov	r4,r16
 400caf0:	40139d00 	call	40139d0 <__sfvwrite_r>
 400caf4:	1000091e 	bne	r2,zero,400cb1c <_puts_r+0xb8>
 400caf8:	00800284 	movi	r2,10
 400cafc:	dfc00917 	ldw	ra,36(sp)
 400cb00:	dc400817 	ldw	r17,32(sp)
 400cb04:	dc000717 	ldw	r16,28(sp)
 400cb08:	dec00a04 	addi	sp,sp,40
 400cb0c:	f800283a 	ret
 400cb10:	8009883a 	mov	r4,r16
 400cb14:	401354c0 	call	401354c <__sinit>
 400cb18:	003fe906 	br	400cac0 <__alt_data_end+0xfc00cac0>
 400cb1c:	00bfffc4 	movi	r2,-1
 400cb20:	003ff606 	br	400cafc <__alt_data_end+0xfc00cafc>

0400cb24 <puts>:
 400cb24:	008100f4 	movhi	r2,1027
 400cb28:	10b31d04 	addi	r2,r2,-13196
 400cb2c:	200b883a 	mov	r5,r4
 400cb30:	11000017 	ldw	r4,0(r2)
 400cb34:	400ca641 	jmpi	400ca64 <_puts_r>

0400cb38 <_sbrk_r>:
 400cb38:	defffd04 	addi	sp,sp,-12
 400cb3c:	dc000015 	stw	r16,0(sp)
 400cb40:	04010134 	movhi	r16,1028
 400cb44:	dc400115 	stw	r17,4(sp)
 400cb48:	8425e904 	addi	r16,r16,-26716
 400cb4c:	2023883a 	mov	r17,r4
 400cb50:	2809883a 	mov	r4,r5
 400cb54:	dfc00215 	stw	ra,8(sp)
 400cb58:	80000015 	stw	zero,0(r16)
 400cb5c:	401cb240 	call	401cb24 <sbrk>
 400cb60:	00ffffc4 	movi	r3,-1
 400cb64:	10c00526 	beq	r2,r3,400cb7c <_sbrk_r+0x44>
 400cb68:	dfc00217 	ldw	ra,8(sp)
 400cb6c:	dc400117 	ldw	r17,4(sp)
 400cb70:	dc000017 	ldw	r16,0(sp)
 400cb74:	dec00304 	addi	sp,sp,12
 400cb78:	f800283a 	ret
 400cb7c:	80c00017 	ldw	r3,0(r16)
 400cb80:	183ff926 	beq	r3,zero,400cb68 <__alt_data_end+0xfc00cb68>
 400cb84:	88c00015 	stw	r3,0(r17)
 400cb88:	003ff706 	br	400cb68 <__alt_data_end+0xfc00cb68>

0400cb8c <_init_signal_r>:
 400cb8c:	2080b717 	ldw	r2,732(r4)
 400cb90:	10000226 	beq	r2,zero,400cb9c <_init_signal_r+0x10>
 400cb94:	0005883a 	mov	r2,zero
 400cb98:	f800283a 	ret
 400cb9c:	defffe04 	addi	sp,sp,-8
 400cba0:	01402004 	movi	r5,128
 400cba4:	dc000015 	stw	r16,0(sp)
 400cba8:	dfc00115 	stw	ra,4(sp)
 400cbac:	2021883a 	mov	r16,r4
 400cbb0:	400bee00 	call	400bee0 <_malloc_r>
 400cbb4:	8080b715 	stw	r2,732(r16)
 400cbb8:	10000d26 	beq	r2,zero,400cbf0 <_init_signal_r+0x64>
 400cbbc:	0007883a 	mov	r3,zero
 400cbc0:	01002004 	movi	r4,128
 400cbc4:	00000106 	br	400cbcc <_init_signal_r+0x40>
 400cbc8:	8080b717 	ldw	r2,732(r16)
 400cbcc:	10c5883a 	add	r2,r2,r3
 400cbd0:	10000015 	stw	zero,0(r2)
 400cbd4:	18c00104 	addi	r3,r3,4
 400cbd8:	193ffb1e 	bne	r3,r4,400cbc8 <__alt_data_end+0xfc00cbc8>
 400cbdc:	0005883a 	mov	r2,zero
 400cbe0:	dfc00117 	ldw	ra,4(sp)
 400cbe4:	dc000017 	ldw	r16,0(sp)
 400cbe8:	dec00204 	addi	sp,sp,8
 400cbec:	f800283a 	ret
 400cbf0:	00bfffc4 	movi	r2,-1
 400cbf4:	003ffa06 	br	400cbe0 <__alt_data_end+0xfc00cbe0>

0400cbf8 <_signal_r>:
 400cbf8:	00c007c4 	movi	r3,31
 400cbfc:	19401536 	bltu	r3,r5,400cc54 <_signal_r+0x5c>
 400cc00:	2080b717 	ldw	r2,732(r4)
 400cc04:	defffc04 	addi	sp,sp,-16
 400cc08:	dc800215 	stw	r18,8(sp)
 400cc0c:	dc400115 	stw	r17,4(sp)
 400cc10:	dc000015 	stw	r16,0(sp)
 400cc14:	dfc00315 	stw	ra,12(sp)
 400cc18:	3023883a 	mov	r17,r6
 400cc1c:	2021883a 	mov	r16,r4
 400cc20:	2825883a 	mov	r18,r5
 400cc24:	10000f26 	beq	r2,zero,400cc64 <_signal_r+0x6c>
 400cc28:	948b883a 	add	r5,r18,r18
 400cc2c:	294b883a 	add	r5,r5,r5
 400cc30:	114b883a 	add	r5,r2,r5
 400cc34:	28800017 	ldw	r2,0(r5)
 400cc38:	2c400015 	stw	r17,0(r5)
 400cc3c:	dfc00317 	ldw	ra,12(sp)
 400cc40:	dc800217 	ldw	r18,8(sp)
 400cc44:	dc400117 	ldw	r17,4(sp)
 400cc48:	dc000017 	ldw	r16,0(sp)
 400cc4c:	dec00404 	addi	sp,sp,16
 400cc50:	f800283a 	ret
 400cc54:	00c00584 	movi	r3,22
 400cc58:	20c00015 	stw	r3,0(r4)
 400cc5c:	00bfffc4 	movi	r2,-1
 400cc60:	f800283a 	ret
 400cc64:	400cb8c0 	call	400cb8c <_init_signal_r>
 400cc68:	1000021e 	bne	r2,zero,400cc74 <_signal_r+0x7c>
 400cc6c:	8080b717 	ldw	r2,732(r16)
 400cc70:	003fed06 	br	400cc28 <__alt_data_end+0xfc00cc28>
 400cc74:	00bfffc4 	movi	r2,-1
 400cc78:	003ff006 	br	400cc3c <__alt_data_end+0xfc00cc3c>

0400cc7c <_raise_r>:
 400cc7c:	008007c4 	movi	r2,31
 400cc80:	11402936 	bltu	r2,r5,400cd28 <_raise_r+0xac>
 400cc84:	20c0b717 	ldw	r3,732(r4)
 400cc88:	defffd04 	addi	sp,sp,-12
 400cc8c:	dc400115 	stw	r17,4(sp)
 400cc90:	dc000015 	stw	r16,0(sp)
 400cc94:	dfc00215 	stw	ra,8(sp)
 400cc98:	2021883a 	mov	r16,r4
 400cc9c:	2823883a 	mov	r17,r5
 400cca0:	18001726 	beq	r3,zero,400cd00 <_raise_r+0x84>
 400cca4:	2945883a 	add	r2,r5,r5
 400cca8:	1085883a 	add	r2,r2,r2
 400ccac:	1887883a 	add	r3,r3,r2
 400ccb0:	19800017 	ldw	r6,0(r3)
 400ccb4:	30001226 	beq	r6,zero,400cd00 <_raise_r+0x84>
 400ccb8:	00800044 	movi	r2,1
 400ccbc:	30800e26 	beq	r6,r2,400ccf8 <_raise_r+0x7c>
 400ccc0:	013fffc4 	movi	r4,-1
 400ccc4:	31000926 	beq	r6,r4,400ccec <_raise_r+0x70>
 400ccc8:	18000015 	stw	zero,0(r3)
 400cccc:	2809883a 	mov	r4,r5
 400ccd0:	303ee83a 	callr	r6
 400ccd4:	0005883a 	mov	r2,zero
 400ccd8:	dfc00217 	ldw	ra,8(sp)
 400ccdc:	dc400117 	ldw	r17,4(sp)
 400cce0:	dc000017 	ldw	r16,0(sp)
 400cce4:	dec00304 	addi	sp,sp,12
 400cce8:	f800283a 	ret
 400ccec:	00c00584 	movi	r3,22
 400ccf0:	80c00015 	stw	r3,0(r16)
 400ccf4:	003ff806 	br	400ccd8 <__alt_data_end+0xfc00ccd8>
 400ccf8:	0005883a 	mov	r2,zero
 400ccfc:	003ff606 	br	400ccd8 <__alt_data_end+0xfc00ccd8>
 400cd00:	8009883a 	mov	r4,r16
 400cd04:	400ce8c0 	call	400ce8c <_getpid_r>
 400cd08:	880d883a 	mov	r6,r17
 400cd0c:	100b883a 	mov	r5,r2
 400cd10:	8009883a 	mov	r4,r16
 400cd14:	dfc00217 	ldw	ra,8(sp)
 400cd18:	dc400117 	ldw	r17,4(sp)
 400cd1c:	dc000017 	ldw	r16,0(sp)
 400cd20:	dec00304 	addi	sp,sp,12
 400cd24:	400ce301 	jmpi	400ce30 <_kill_r>
 400cd28:	00800584 	movi	r2,22
 400cd2c:	20800015 	stw	r2,0(r4)
 400cd30:	00bfffc4 	movi	r2,-1
 400cd34:	f800283a 	ret

0400cd38 <__sigtramp_r>:
 400cd38:	008007c4 	movi	r2,31
 400cd3c:	11402436 	bltu	r2,r5,400cdd0 <__sigtramp_r+0x98>
 400cd40:	20c0b717 	ldw	r3,732(r4)
 400cd44:	defffd04 	addi	sp,sp,-12
 400cd48:	dc400115 	stw	r17,4(sp)
 400cd4c:	dc000015 	stw	r16,0(sp)
 400cd50:	dfc00215 	stw	ra,8(sp)
 400cd54:	2021883a 	mov	r16,r4
 400cd58:	2823883a 	mov	r17,r5
 400cd5c:	18001826 	beq	r3,zero,400cdc0 <__sigtramp_r+0x88>
 400cd60:	8c45883a 	add	r2,r17,r17
 400cd64:	1085883a 	add	r2,r2,r2
 400cd68:	1885883a 	add	r2,r3,r2
 400cd6c:	10c00017 	ldw	r3,0(r2)
 400cd70:	18001126 	beq	r3,zero,400cdb8 <__sigtramp_r+0x80>
 400cd74:	013fffc4 	movi	r4,-1
 400cd78:	19000d26 	beq	r3,r4,400cdb0 <__sigtramp_r+0x78>
 400cd7c:	01000044 	movi	r4,1
 400cd80:	19000926 	beq	r3,r4,400cda8 <__sigtramp_r+0x70>
 400cd84:	10000015 	stw	zero,0(r2)
 400cd88:	8809883a 	mov	r4,r17
 400cd8c:	183ee83a 	callr	r3
 400cd90:	0005883a 	mov	r2,zero
 400cd94:	dfc00217 	ldw	ra,8(sp)
 400cd98:	dc400117 	ldw	r17,4(sp)
 400cd9c:	dc000017 	ldw	r16,0(sp)
 400cda0:	dec00304 	addi	sp,sp,12
 400cda4:	f800283a 	ret
 400cda8:	008000c4 	movi	r2,3
 400cdac:	003ff906 	br	400cd94 <__alt_data_end+0xfc00cd94>
 400cdb0:	00800084 	movi	r2,2
 400cdb4:	003ff706 	br	400cd94 <__alt_data_end+0xfc00cd94>
 400cdb8:	00800044 	movi	r2,1
 400cdbc:	003ff506 	br	400cd94 <__alt_data_end+0xfc00cd94>
 400cdc0:	400cb8c0 	call	400cb8c <_init_signal_r>
 400cdc4:	1000041e 	bne	r2,zero,400cdd8 <__sigtramp_r+0xa0>
 400cdc8:	80c0b717 	ldw	r3,732(r16)
 400cdcc:	003fe406 	br	400cd60 <__alt_data_end+0xfc00cd60>
 400cdd0:	00bfffc4 	movi	r2,-1
 400cdd4:	f800283a 	ret
 400cdd8:	00bfffc4 	movi	r2,-1
 400cddc:	003fed06 	br	400cd94 <__alt_data_end+0xfc00cd94>

0400cde0 <raise>:
 400cde0:	008100f4 	movhi	r2,1027
 400cde4:	10b31d04 	addi	r2,r2,-13196
 400cde8:	200b883a 	mov	r5,r4
 400cdec:	11000017 	ldw	r4,0(r2)
 400cdf0:	400cc7c1 	jmpi	400cc7c <_raise_r>

0400cdf4 <signal>:
 400cdf4:	008100f4 	movhi	r2,1027
 400cdf8:	10b31d04 	addi	r2,r2,-13196
 400cdfc:	280d883a 	mov	r6,r5
 400ce00:	200b883a 	mov	r5,r4
 400ce04:	11000017 	ldw	r4,0(r2)
 400ce08:	400cbf81 	jmpi	400cbf8 <_signal_r>

0400ce0c <_init_signal>:
 400ce0c:	008100f4 	movhi	r2,1027
 400ce10:	10b31d04 	addi	r2,r2,-13196
 400ce14:	11000017 	ldw	r4,0(r2)
 400ce18:	400cb8c1 	jmpi	400cb8c <_init_signal_r>

0400ce1c <__sigtramp>:
 400ce1c:	008100f4 	movhi	r2,1027
 400ce20:	10b31d04 	addi	r2,r2,-13196
 400ce24:	200b883a 	mov	r5,r4
 400ce28:	11000017 	ldw	r4,0(r2)
 400ce2c:	400cd381 	jmpi	400cd38 <__sigtramp_r>

0400ce30 <_kill_r>:
 400ce30:	defffd04 	addi	sp,sp,-12
 400ce34:	2805883a 	mov	r2,r5
 400ce38:	dc000015 	stw	r16,0(sp)
 400ce3c:	04010134 	movhi	r16,1028
 400ce40:	dc400115 	stw	r17,4(sp)
 400ce44:	8425e904 	addi	r16,r16,-26716
 400ce48:	2023883a 	mov	r17,r4
 400ce4c:	300b883a 	mov	r5,r6
 400ce50:	1009883a 	mov	r4,r2
 400ce54:	dfc00215 	stw	ra,8(sp)
 400ce58:	80000015 	stw	zero,0(r16)
 400ce5c:	401c5980 	call	401c598 <kill>
 400ce60:	00ffffc4 	movi	r3,-1
 400ce64:	10c00526 	beq	r2,r3,400ce7c <_kill_r+0x4c>
 400ce68:	dfc00217 	ldw	ra,8(sp)
 400ce6c:	dc400117 	ldw	r17,4(sp)
 400ce70:	dc000017 	ldw	r16,0(sp)
 400ce74:	dec00304 	addi	sp,sp,12
 400ce78:	f800283a 	ret
 400ce7c:	80c00017 	ldw	r3,0(r16)
 400ce80:	183ff926 	beq	r3,zero,400ce68 <__alt_data_end+0xfc00ce68>
 400ce84:	88c00015 	stw	r3,0(r17)
 400ce88:	003ff706 	br	400ce68 <__alt_data_end+0xfc00ce68>

0400ce8c <_getpid_r>:
 400ce8c:	401c45c1 	jmpi	401c45c <getpid>

0400ce90 <_sprintf_r>:
 400ce90:	deffe404 	addi	sp,sp,-112
 400ce94:	2807883a 	mov	r3,r5
 400ce98:	dfc01a15 	stw	ra,104(sp)
 400ce9c:	d9c01b15 	stw	r7,108(sp)
 400cea0:	00a00034 	movhi	r2,32768
 400cea4:	10bfffc4 	addi	r2,r2,-1
 400cea8:	02008204 	movi	r8,520
 400ceac:	d8800215 	stw	r2,8(sp)
 400ceb0:	d8800515 	stw	r2,20(sp)
 400ceb4:	d9c01b04 	addi	r7,sp,108
 400ceb8:	d80b883a 	mov	r5,sp
 400cebc:	00bfffc4 	movi	r2,-1
 400cec0:	d8c00015 	stw	r3,0(sp)
 400cec4:	d8c00415 	stw	r3,16(sp)
 400cec8:	da00030d 	sth	r8,12(sp)
 400cecc:	d880038d 	sth	r2,14(sp)
 400ced0:	400d0c80 	call	400d0c8 <___svfprintf_internal_r>
 400ced4:	d8c00017 	ldw	r3,0(sp)
 400ced8:	18000005 	stb	zero,0(r3)
 400cedc:	dfc01a17 	ldw	ra,104(sp)
 400cee0:	dec01c04 	addi	sp,sp,112
 400cee4:	f800283a 	ret

0400cee8 <sprintf>:
 400cee8:	deffe304 	addi	sp,sp,-116
 400ceec:	2007883a 	mov	r3,r4
 400cef0:	dfc01a15 	stw	ra,104(sp)
 400cef4:	d9801b15 	stw	r6,108(sp)
 400cef8:	d9c01c15 	stw	r7,112(sp)
 400cefc:	010100f4 	movhi	r4,1027
 400cf00:	21331d04 	addi	r4,r4,-13196
 400cf04:	21000017 	ldw	r4,0(r4)
 400cf08:	00a00034 	movhi	r2,32768
 400cf0c:	10bfffc4 	addi	r2,r2,-1
 400cf10:	280d883a 	mov	r6,r5
 400cf14:	02008204 	movi	r8,520
 400cf18:	d8800215 	stw	r2,8(sp)
 400cf1c:	d8800515 	stw	r2,20(sp)
 400cf20:	d9c01b04 	addi	r7,sp,108
 400cf24:	d80b883a 	mov	r5,sp
 400cf28:	00bfffc4 	movi	r2,-1
 400cf2c:	d8c00015 	stw	r3,0(sp)
 400cf30:	d8c00415 	stw	r3,16(sp)
 400cf34:	da00030d 	sth	r8,12(sp)
 400cf38:	d880038d 	sth	r2,14(sp)
 400cf3c:	400d0c80 	call	400d0c8 <___svfprintf_internal_r>
 400cf40:	d8c00017 	ldw	r3,0(sp)
 400cf44:	18000005 	stb	zero,0(r3)
 400cf48:	dfc01a17 	ldw	ra,104(sp)
 400cf4c:	dec01d04 	addi	sp,sp,116
 400cf50:	f800283a 	ret

0400cf54 <strcmp>:
 400cf54:	2144b03a 	or	r2,r4,r5
 400cf58:	108000cc 	andi	r2,r2,3
 400cf5c:	1000171e 	bne	r2,zero,400cfbc <strcmp+0x68>
 400cf60:	20800017 	ldw	r2,0(r4)
 400cf64:	28c00017 	ldw	r3,0(r5)
 400cf68:	10c0141e 	bne	r2,r3,400cfbc <strcmp+0x68>
 400cf6c:	027fbff4 	movhi	r9,65279
 400cf70:	4a7fbfc4 	addi	r9,r9,-257
 400cf74:	0086303a 	nor	r3,zero,r2
 400cf78:	02202074 	movhi	r8,32897
 400cf7c:	1245883a 	add	r2,r2,r9
 400cf80:	42202004 	addi	r8,r8,-32640
 400cf84:	10c4703a 	and	r2,r2,r3
 400cf88:	1204703a 	and	r2,r2,r8
 400cf8c:	10000226 	beq	r2,zero,400cf98 <strcmp+0x44>
 400cf90:	00002306 	br	400d020 <strcmp+0xcc>
 400cf94:	1000221e 	bne	r2,zero,400d020 <strcmp+0xcc>
 400cf98:	21000104 	addi	r4,r4,4
 400cf9c:	20c00017 	ldw	r3,0(r4)
 400cfa0:	29400104 	addi	r5,r5,4
 400cfa4:	29800017 	ldw	r6,0(r5)
 400cfa8:	1a4f883a 	add	r7,r3,r9
 400cfac:	00c4303a 	nor	r2,zero,r3
 400cfb0:	3884703a 	and	r2,r7,r2
 400cfb4:	1204703a 	and	r2,r2,r8
 400cfb8:	19bff626 	beq	r3,r6,400cf94 <__alt_data_end+0xfc00cf94>
 400cfbc:	20800003 	ldbu	r2,0(r4)
 400cfc0:	10c03fcc 	andi	r3,r2,255
 400cfc4:	18c0201c 	xori	r3,r3,128
 400cfc8:	18ffe004 	addi	r3,r3,-128
 400cfcc:	18000c26 	beq	r3,zero,400d000 <strcmp+0xac>
 400cfd0:	29800007 	ldb	r6,0(r5)
 400cfd4:	19800326 	beq	r3,r6,400cfe4 <strcmp+0x90>
 400cfd8:	00001306 	br	400d028 <strcmp+0xd4>
 400cfdc:	29800007 	ldb	r6,0(r5)
 400cfe0:	11800b1e 	bne	r2,r6,400d010 <strcmp+0xbc>
 400cfe4:	21000044 	addi	r4,r4,1
 400cfe8:	20c00003 	ldbu	r3,0(r4)
 400cfec:	29400044 	addi	r5,r5,1
 400cff0:	18803fcc 	andi	r2,r3,255
 400cff4:	1080201c 	xori	r2,r2,128
 400cff8:	10bfe004 	addi	r2,r2,-128
 400cffc:	103ff71e 	bne	r2,zero,400cfdc <__alt_data_end+0xfc00cfdc>
 400d000:	0007883a 	mov	r3,zero
 400d004:	28800003 	ldbu	r2,0(r5)
 400d008:	1885c83a 	sub	r2,r3,r2
 400d00c:	f800283a 	ret
 400d010:	28800003 	ldbu	r2,0(r5)
 400d014:	18c03fcc 	andi	r3,r3,255
 400d018:	1885c83a 	sub	r2,r3,r2
 400d01c:	f800283a 	ret
 400d020:	0005883a 	mov	r2,zero
 400d024:	f800283a 	ret
 400d028:	10c03fcc 	andi	r3,r2,255
 400d02c:	003ff506 	br	400d004 <__alt_data_end+0xfc00d004>

0400d030 <strlen>:
 400d030:	208000cc 	andi	r2,r4,3
 400d034:	10002026 	beq	r2,zero,400d0b8 <strlen+0x88>
 400d038:	20800007 	ldb	r2,0(r4)
 400d03c:	10002026 	beq	r2,zero,400d0c0 <strlen+0x90>
 400d040:	2005883a 	mov	r2,r4
 400d044:	00000206 	br	400d050 <strlen+0x20>
 400d048:	10c00007 	ldb	r3,0(r2)
 400d04c:	18001826 	beq	r3,zero,400d0b0 <strlen+0x80>
 400d050:	10800044 	addi	r2,r2,1
 400d054:	10c000cc 	andi	r3,r2,3
 400d058:	183ffb1e 	bne	r3,zero,400d048 <__alt_data_end+0xfc00d048>
 400d05c:	10c00017 	ldw	r3,0(r2)
 400d060:	01ffbff4 	movhi	r7,65279
 400d064:	39ffbfc4 	addi	r7,r7,-257
 400d068:	00ca303a 	nor	r5,zero,r3
 400d06c:	01a02074 	movhi	r6,32897
 400d070:	19c7883a 	add	r3,r3,r7
 400d074:	31a02004 	addi	r6,r6,-32640
 400d078:	1946703a 	and	r3,r3,r5
 400d07c:	1986703a 	and	r3,r3,r6
 400d080:	1800091e 	bne	r3,zero,400d0a8 <strlen+0x78>
 400d084:	10800104 	addi	r2,r2,4
 400d088:	10c00017 	ldw	r3,0(r2)
 400d08c:	19cb883a 	add	r5,r3,r7
 400d090:	00c6303a 	nor	r3,zero,r3
 400d094:	28c6703a 	and	r3,r5,r3
 400d098:	1986703a 	and	r3,r3,r6
 400d09c:	183ff926 	beq	r3,zero,400d084 <__alt_data_end+0xfc00d084>
 400d0a0:	00000106 	br	400d0a8 <strlen+0x78>
 400d0a4:	10800044 	addi	r2,r2,1
 400d0a8:	10c00007 	ldb	r3,0(r2)
 400d0ac:	183ffd1e 	bne	r3,zero,400d0a4 <__alt_data_end+0xfc00d0a4>
 400d0b0:	1105c83a 	sub	r2,r2,r4
 400d0b4:	f800283a 	ret
 400d0b8:	2005883a 	mov	r2,r4
 400d0bc:	003fe706 	br	400d05c <__alt_data_end+0xfc00d05c>
 400d0c0:	0005883a 	mov	r2,zero
 400d0c4:	f800283a 	ret

0400d0c8 <___svfprintf_internal_r>:
 400d0c8:	deffb704 	addi	sp,sp,-292
 400d0cc:	dfc04815 	stw	ra,288(sp)
 400d0d0:	ddc04615 	stw	r23,280(sp)
 400d0d4:	d9402c15 	stw	r5,176(sp)
 400d0d8:	d9003915 	stw	r4,228(sp)
 400d0dc:	302f883a 	mov	r23,r6
 400d0e0:	d9c02d15 	stw	r7,180(sp)
 400d0e4:	df004715 	stw	fp,284(sp)
 400d0e8:	dd804515 	stw	r22,276(sp)
 400d0ec:	dd404415 	stw	r21,272(sp)
 400d0f0:	dd004315 	stw	r20,268(sp)
 400d0f4:	dcc04215 	stw	r19,264(sp)
 400d0f8:	dc804115 	stw	r18,260(sp)
 400d0fc:	dc404015 	stw	r17,256(sp)
 400d100:	dc003f15 	stw	r16,252(sp)
 400d104:	40140c00 	call	40140c0 <_localeconv_r>
 400d108:	10800017 	ldw	r2,0(r2)
 400d10c:	1009883a 	mov	r4,r2
 400d110:	d8803415 	stw	r2,208(sp)
 400d114:	400d0300 	call	400d030 <strlen>
 400d118:	d8c02c17 	ldw	r3,176(sp)
 400d11c:	d8803815 	stw	r2,224(sp)
 400d120:	1880030b 	ldhu	r2,12(r3)
 400d124:	1080200c 	andi	r2,r2,128
 400d128:	10000226 	beq	r2,zero,400d134 <___svfprintf_internal_r+0x6c>
 400d12c:	18800417 	ldw	r2,16(r3)
 400d130:	10067f26 	beq	r2,zero,400eb30 <___svfprintf_internal_r+0x1a68>
 400d134:	dcc03917 	ldw	r19,228(sp)
 400d138:	d8c00404 	addi	r3,sp,16
 400d13c:	054100b4 	movhi	r21,1026
 400d140:	d9001e04 	addi	r4,sp,120
 400d144:	ad7fcb84 	addi	r21,r21,-210
 400d148:	d8c01e15 	stw	r3,120(sp)
 400d14c:	d8002015 	stw	zero,128(sp)
 400d150:	d8001f15 	stw	zero,124(sp)
 400d154:	d8003315 	stw	zero,204(sp)
 400d158:	d8003615 	stw	zero,216(sp)
 400d15c:	d8003715 	stw	zero,220(sp)
 400d160:	1811883a 	mov	r8,r3
 400d164:	d8003a15 	stw	zero,232(sp)
 400d168:	d8003b15 	stw	zero,236(sp)
 400d16c:	d8002f15 	stw	zero,188(sp)
 400d170:	d9002815 	stw	r4,160(sp)
 400d174:	b8800007 	ldb	r2,0(r23)
 400d178:	10026726 	beq	r2,zero,400db18 <___svfprintf_internal_r+0xa50>
 400d17c:	00c00944 	movi	r3,37
 400d180:	b821883a 	mov	r16,r23
 400d184:	10c0021e 	bne	r2,r3,400d190 <___svfprintf_internal_r+0xc8>
 400d188:	00001406 	br	400d1dc <___svfprintf_internal_r+0x114>
 400d18c:	10c00326 	beq	r2,r3,400d19c <___svfprintf_internal_r+0xd4>
 400d190:	84000044 	addi	r16,r16,1
 400d194:	80800007 	ldb	r2,0(r16)
 400d198:	103ffc1e 	bne	r2,zero,400d18c <__alt_data_end+0xfc00d18c>
 400d19c:	85e3c83a 	sub	r17,r16,r23
 400d1a0:	88000e26 	beq	r17,zero,400d1dc <___svfprintf_internal_r+0x114>
 400d1a4:	d8c02017 	ldw	r3,128(sp)
 400d1a8:	d8801f17 	ldw	r2,124(sp)
 400d1ac:	45c00015 	stw	r23,0(r8)
 400d1b0:	1c47883a 	add	r3,r3,r17
 400d1b4:	10800044 	addi	r2,r2,1
 400d1b8:	d8c02015 	stw	r3,128(sp)
 400d1bc:	44400115 	stw	r17,4(r8)
 400d1c0:	d8801f15 	stw	r2,124(sp)
 400d1c4:	00c001c4 	movi	r3,7
 400d1c8:	18809716 	blt	r3,r2,400d428 <___svfprintf_internal_r+0x360>
 400d1cc:	42000204 	addi	r8,r8,8
 400d1d0:	d9402f17 	ldw	r5,188(sp)
 400d1d4:	2c4b883a 	add	r5,r5,r17
 400d1d8:	d9402f15 	stw	r5,188(sp)
 400d1dc:	80800007 	ldb	r2,0(r16)
 400d1e0:	10009826 	beq	r2,zero,400d444 <___svfprintf_internal_r+0x37c>
 400d1e4:	84400047 	ldb	r17,1(r16)
 400d1e8:	00bfffc4 	movi	r2,-1
 400d1ec:	85c00044 	addi	r23,r16,1
 400d1f0:	d8002785 	stb	zero,158(sp)
 400d1f4:	0007883a 	mov	r3,zero
 400d1f8:	000f883a 	mov	r7,zero
 400d1fc:	d8802915 	stw	r2,164(sp)
 400d200:	d8003115 	stw	zero,196(sp)
 400d204:	0025883a 	mov	r18,zero
 400d208:	01401604 	movi	r5,88
 400d20c:	01800244 	movi	r6,9
 400d210:	02800a84 	movi	r10,42
 400d214:	02401b04 	movi	r9,108
 400d218:	bdc00044 	addi	r23,r23,1
 400d21c:	88bff804 	addi	r2,r17,-32
 400d220:	2882f036 	bltu	r5,r2,400dde4 <___svfprintf_internal_r+0xd1c>
 400d224:	100490ba 	slli	r2,r2,2
 400d228:	01010074 	movhi	r4,1025
 400d22c:	21348f04 	addi	r4,r4,-11716
 400d230:	1105883a 	add	r2,r2,r4
 400d234:	10800017 	ldw	r2,0(r2)
 400d238:	1000683a 	jmp	r2
 400d23c:	0400dd4c 	andi	r16,zero,885
 400d240:	0400dde4 	muli	r16,zero,887
 400d244:	0400dde4 	muli	r16,zero,887
 400d248:	0400dd40 	call	400dd4 <__reset-0x3bff22c>
 400d24c:	0400dde4 	muli	r16,zero,887
 400d250:	0400dde4 	muli	r16,zero,887
 400d254:	0400dde4 	muli	r16,zero,887
 400d258:	0400dde4 	muli	r16,zero,887
 400d25c:	0400dde4 	muli	r16,zero,887
 400d260:	0400dde4 	muli	r16,zero,887
 400d264:	0400d4a0 	cmpeqi	r16,zero,850
 400d268:	0400dc7c 	xorhi	r16,zero,881
 400d26c:	0400dde4 	muli	r16,zero,887
 400d270:	0400d3b0 	cmpltui	r16,zero,846
 400d274:	0400d4c8 	cmpgei	r16,zero,851
 400d278:	0400dde4 	muli	r16,zero,887
 400d27c:	0400d53c 	xorhi	r16,zero,852
 400d280:	0400d508 	cmpgei	r16,zero,852
 400d284:	0400d508 	cmpgei	r16,zero,852
 400d288:	0400d508 	cmpgei	r16,zero,852
 400d28c:	0400d508 	cmpgei	r16,zero,852
 400d290:	0400d508 	cmpgei	r16,zero,852
 400d294:	0400d508 	cmpgei	r16,zero,852
 400d298:	0400d508 	cmpgei	r16,zero,852
 400d29c:	0400d508 	cmpgei	r16,zero,852
 400d2a0:	0400d508 	cmpgei	r16,zero,852
 400d2a4:	0400dde4 	muli	r16,zero,887
 400d2a8:	0400dde4 	muli	r16,zero,887
 400d2ac:	0400dde4 	muli	r16,zero,887
 400d2b0:	0400dde4 	muli	r16,zero,887
 400d2b4:	0400dde4 	muli	r16,zero,887
 400d2b8:	0400dde4 	muli	r16,zero,887
 400d2bc:	0400dde4 	muli	r16,zero,887
 400d2c0:	0400dde4 	muli	r16,zero,887
 400d2c4:	0400dde4 	muli	r16,zero,887
 400d2c8:	0400dde4 	muli	r16,zero,887
 400d2cc:	0400d5f4 	movhi	r16,855
 400d2d0:	0400d548 	cmpgei	r16,zero,853
 400d2d4:	0400dde4 	muli	r16,zero,887
 400d2d8:	0400d548 	cmpgei	r16,zero,853
 400d2dc:	0400dde4 	muli	r16,zero,887
 400d2e0:	0400dde4 	muli	r16,zero,887
 400d2e4:	0400dde4 	muli	r16,zero,887
 400d2e8:	0400dde4 	muli	r16,zero,887
 400d2ec:	0400d5e8 	cmpgeui	r16,zero,855
 400d2f0:	0400dde4 	muli	r16,zero,887
 400d2f4:	0400dde4 	muli	r16,zero,887
 400d2f8:	0400d6b0 	cmpltui	r16,zero,858
 400d2fc:	0400dde4 	muli	r16,zero,887
 400d300:	0400dde4 	muli	r16,zero,887
 400d304:	0400dde4 	muli	r16,zero,887
 400d308:	0400dde4 	muli	r16,zero,887
 400d30c:	0400dde4 	muli	r16,zero,887
 400d310:	0400db20 	cmpeqi	r16,zero,876
 400d314:	0400dde4 	muli	r16,zero,887
 400d318:	0400dde4 	muli	r16,zero,887
 400d31c:	0400db80 	call	400db8 <__reset-0x3bff248>
 400d320:	0400dde4 	muli	r16,zero,887
 400d324:	0400dde4 	muli	r16,zero,887
 400d328:	0400dde4 	muli	r16,zero,887
 400d32c:	0400dde4 	muli	r16,zero,887
 400d330:	0400dde4 	muli	r16,zero,887
 400d334:	0400dde4 	muli	r16,zero,887
 400d338:	0400dde4 	muli	r16,zero,887
 400d33c:	0400dde4 	muli	r16,zero,887
 400d340:	0400dde4 	muli	r16,zero,887
 400d344:	0400dde4 	muli	r16,zero,887
 400d348:	0400dc30 	cmpltui	r16,zero,880
 400d34c:	0400dd6c 	andhi	r16,zero,885
 400d350:	0400d548 	cmpgei	r16,zero,853
 400d354:	0400d548 	cmpgei	r16,zero,853
 400d358:	0400d548 	cmpgei	r16,zero,853
 400d35c:	0400ddc0 	call	400ddc <__reset-0x3bff224>
 400d360:	0400dd6c 	andhi	r16,zero,885
 400d364:	0400dde4 	muli	r16,zero,887
 400d368:	0400dde4 	muli	r16,zero,887
 400d36c:	0400dd7c 	xorhi	r16,zero,885
 400d370:	0400dde4 	muli	r16,zero,887
 400d374:	0400dd8c 	andi	r16,zero,886
 400d378:	0400dc6c 	andhi	r16,zero,881
 400d37c:	0400d3bc 	xorhi	r16,zero,846
 400d380:	0400dc8c 	andi	r16,zero,882
 400d384:	0400dde4 	muli	r16,zero,887
 400d388:	0400dc98 	cmpnei	r16,zero,882
 400d38c:	0400dde4 	muli	r16,zero,887
 400d390:	0400dcf4 	movhi	r16,883
 400d394:	0400dde4 	muli	r16,zero,887
 400d398:	0400dde4 	muli	r16,zero,887
 400d39c:	0400dd04 	movi	r16,884
 400d3a0:	d9003117 	ldw	r4,196(sp)
 400d3a4:	d8802d15 	stw	r2,180(sp)
 400d3a8:	0109c83a 	sub	r4,zero,r4
 400d3ac:	d9003115 	stw	r4,196(sp)
 400d3b0:	94800114 	ori	r18,r18,4
 400d3b4:	bc400007 	ldb	r17,0(r23)
 400d3b8:	003f9706 	br	400d218 <__alt_data_end+0xfc00d218>
 400d3bc:	00800c04 	movi	r2,48
 400d3c0:	d9002d17 	ldw	r4,180(sp)
 400d3c4:	d9402917 	ldw	r5,164(sp)
 400d3c8:	d8802705 	stb	r2,156(sp)
 400d3cc:	00801e04 	movi	r2,120
 400d3d0:	d8802745 	stb	r2,157(sp)
 400d3d4:	d8002785 	stb	zero,158(sp)
 400d3d8:	20c00104 	addi	r3,r4,4
 400d3dc:	25000017 	ldw	r20,0(r4)
 400d3e0:	002d883a 	mov	r22,zero
 400d3e4:	90800094 	ori	r2,r18,2
 400d3e8:	28028616 	blt	r5,zero,400de04 <___svfprintf_internal_r+0xd3c>
 400d3ec:	00bfdfc4 	movi	r2,-129
 400d3f0:	90a4703a 	and	r18,r18,r2
 400d3f4:	d8c02d15 	stw	r3,180(sp)
 400d3f8:	94800094 	ori	r18,r18,2
 400d3fc:	a002731e 	bne	r20,zero,400ddcc <___svfprintf_internal_r+0xd04>
 400d400:	008100b4 	movhi	r2,1026
 400d404:	10bfc404 	addi	r2,r2,-240
 400d408:	d8803a15 	stw	r2,232(sp)
 400d40c:	04401e04 	movi	r17,120
 400d410:	d8c02917 	ldw	r3,164(sp)
 400d414:	0039883a 	mov	fp,zero
 400d418:	1801d526 	beq	r3,zero,400db70 <___svfprintf_internal_r+0xaa8>
 400d41c:	0029883a 	mov	r20,zero
 400d420:	002d883a 	mov	r22,zero
 400d424:	0001f106 	br	400dbec <___svfprintf_internal_r+0xb24>
 400d428:	d9402c17 	ldw	r5,176(sp)
 400d42c:	d9801e04 	addi	r6,sp,120
 400d430:	9809883a 	mov	r4,r19
 400d434:	4015d640 	call	4015d64 <__ssprint_r>
 400d438:	1000081e 	bne	r2,zero,400d45c <___svfprintf_internal_r+0x394>
 400d43c:	da000404 	addi	r8,sp,16
 400d440:	003f6306 	br	400d1d0 <__alt_data_end+0xfc00d1d0>
 400d444:	d8802017 	ldw	r2,128(sp)
 400d448:	10000426 	beq	r2,zero,400d45c <___svfprintf_internal_r+0x394>
 400d44c:	d9402c17 	ldw	r5,176(sp)
 400d450:	d9003917 	ldw	r4,228(sp)
 400d454:	d9801e04 	addi	r6,sp,120
 400d458:	4015d640 	call	4015d64 <__ssprint_r>
 400d45c:	d8802c17 	ldw	r2,176(sp)
 400d460:	10c0030b 	ldhu	r3,12(r2)
 400d464:	d8802f17 	ldw	r2,188(sp)
 400d468:	18c0100c 	andi	r3,r3,64
 400d46c:	1805f51e 	bne	r3,zero,400ec44 <___svfprintf_internal_r+0x1b7c>
 400d470:	dfc04817 	ldw	ra,288(sp)
 400d474:	df004717 	ldw	fp,284(sp)
 400d478:	ddc04617 	ldw	r23,280(sp)
 400d47c:	dd804517 	ldw	r22,276(sp)
 400d480:	dd404417 	ldw	r21,272(sp)
 400d484:	dd004317 	ldw	r20,268(sp)
 400d488:	dcc04217 	ldw	r19,264(sp)
 400d48c:	dc804117 	ldw	r18,260(sp)
 400d490:	dc404017 	ldw	r17,256(sp)
 400d494:	dc003f17 	ldw	r16,252(sp)
 400d498:	dec04904 	addi	sp,sp,292
 400d49c:	f800283a 	ret
 400d4a0:	d8802d17 	ldw	r2,180(sp)
 400d4a4:	d9002d17 	ldw	r4,180(sp)
 400d4a8:	10800017 	ldw	r2,0(r2)
 400d4ac:	d8803115 	stw	r2,196(sp)
 400d4b0:	20800104 	addi	r2,r4,4
 400d4b4:	d9003117 	ldw	r4,196(sp)
 400d4b8:	203fb916 	blt	r4,zero,400d3a0 <__alt_data_end+0xfc00d3a0>
 400d4bc:	d8802d15 	stw	r2,180(sp)
 400d4c0:	bc400007 	ldb	r17,0(r23)
 400d4c4:	003f5406 	br	400d218 <__alt_data_end+0xfc00d218>
 400d4c8:	bc400007 	ldb	r17,0(r23)
 400d4cc:	bac00044 	addi	r11,r23,1
 400d4d0:	8a873926 	beq	r17,r10,400f1b8 <___svfprintf_internal_r+0x20f0>
 400d4d4:	88bff404 	addi	r2,r17,-48
 400d4d8:	0009883a 	mov	r4,zero
 400d4dc:	30868836 	bltu	r6,r2,400ef00 <___svfprintf_internal_r+0x1e38>
 400d4e0:	5c400007 	ldb	r17,0(r11)
 400d4e4:	210002a4 	muli	r4,r4,10
 400d4e8:	5dc00044 	addi	r23,r11,1
 400d4ec:	b817883a 	mov	r11,r23
 400d4f0:	2089883a 	add	r4,r4,r2
 400d4f4:	88bff404 	addi	r2,r17,-48
 400d4f8:	30bff92e 	bgeu	r6,r2,400d4e0 <__alt_data_end+0xfc00d4e0>
 400d4fc:	2005d716 	blt	r4,zero,400ec5c <___svfprintf_internal_r+0x1b94>
 400d500:	d9002915 	stw	r4,164(sp)
 400d504:	003f4506 	br	400d21c <__alt_data_end+0xfc00d21c>
 400d508:	b809883a 	mov	r4,r23
 400d50c:	d8003115 	stw	zero,196(sp)
 400d510:	88bff404 	addi	r2,r17,-48
 400d514:	0017883a 	mov	r11,zero
 400d518:	24400007 	ldb	r17,0(r4)
 400d51c:	5ac002a4 	muli	r11,r11,10
 400d520:	bdc00044 	addi	r23,r23,1
 400d524:	b809883a 	mov	r4,r23
 400d528:	12d7883a 	add	r11,r2,r11
 400d52c:	88bff404 	addi	r2,r17,-48
 400d530:	30bff92e 	bgeu	r6,r2,400d518 <__alt_data_end+0xfc00d518>
 400d534:	dac03115 	stw	r11,196(sp)
 400d538:	003f3806 	br	400d21c <__alt_data_end+0xfc00d21c>
 400d53c:	94802014 	ori	r18,r18,128
 400d540:	bc400007 	ldb	r17,0(r23)
 400d544:	003f3406 	br	400d218 <__alt_data_end+0xfc00d218>
 400d548:	18c03fcc 	andi	r3,r3,255
 400d54c:	1807471e 	bne	r3,zero,400f26c <___svfprintf_internal_r+0x21a4>
 400d550:	9080020c 	andi	r2,r18,8
 400d554:	10047d26 	beq	r2,zero,400e74c <___svfprintf_internal_r+0x1684>
 400d558:	d8c02d17 	ldw	r3,180(sp)
 400d55c:	d9002d17 	ldw	r4,180(sp)
 400d560:	d9402d17 	ldw	r5,180(sp)
 400d564:	18c00017 	ldw	r3,0(r3)
 400d568:	21000117 	ldw	r4,4(r4)
 400d56c:	29400204 	addi	r5,r5,8
 400d570:	d8c03615 	stw	r3,216(sp)
 400d574:	d9003715 	stw	r4,220(sp)
 400d578:	d9402d15 	stw	r5,180(sp)
 400d57c:	d9003617 	ldw	r4,216(sp)
 400d580:	d9403717 	ldw	r5,220(sp)
 400d584:	da003e15 	stw	r8,248(sp)
 400d588:	04000044 	movi	r16,1
 400d58c:	4015bb40 	call	4015bb4 <__fpclassifyd>
 400d590:	da003e17 	ldw	r8,248(sp)
 400d594:	14044b1e 	bne	r2,r16,400e6c4 <___svfprintf_internal_r+0x15fc>
 400d598:	d9003617 	ldw	r4,216(sp)
 400d59c:	d9403717 	ldw	r5,220(sp)
 400d5a0:	000d883a 	mov	r6,zero
 400d5a4:	000f883a 	mov	r7,zero
 400d5a8:	401ae940 	call	401ae94 <__ledf2>
 400d5ac:	da003e17 	ldw	r8,248(sp)
 400d5b0:	1005f316 	blt	r2,zero,400ed80 <___svfprintf_internal_r+0x1cb8>
 400d5b4:	df002783 	ldbu	fp,158(sp)
 400d5b8:	008011c4 	movi	r2,71
 400d5bc:	1445590e 	bge	r2,r17,400eb24 <___svfprintf_internal_r+0x1a5c>
 400d5c0:	040100b4 	movhi	r16,1026
 400d5c4:	843fbc04 	addi	r16,r16,-272
 400d5c8:	00c000c4 	movi	r3,3
 400d5cc:	00bfdfc4 	movi	r2,-129
 400d5d0:	d8c02a15 	stw	r3,168(sp)
 400d5d4:	90a4703a 	and	r18,r18,r2
 400d5d8:	d8c02e15 	stw	r3,184(sp)
 400d5dc:	d8002915 	stw	zero,164(sp)
 400d5e0:	d8003215 	stw	zero,200(sp)
 400d5e4:	00006606 	br	400d780 <___svfprintf_internal_r+0x6b8>
 400d5e8:	94800214 	ori	r18,r18,8
 400d5ec:	bc400007 	ldb	r17,0(r23)
 400d5f0:	003f0906 	br	400d218 <__alt_data_end+0xfc00d218>
 400d5f4:	18c03fcc 	andi	r3,r3,255
 400d5f8:	1807181e 	bne	r3,zero,400f25c <___svfprintf_internal_r+0x2194>
 400d5fc:	94800414 	ori	r18,r18,16
 400d600:	9080080c 	andi	r2,r18,32
 400d604:	10039626 	beq	r2,zero,400e460 <___svfprintf_internal_r+0x1398>
 400d608:	d9402d17 	ldw	r5,180(sp)
 400d60c:	28800117 	ldw	r2,4(r5)
 400d610:	2d000017 	ldw	r20,0(r5)
 400d614:	29400204 	addi	r5,r5,8
 400d618:	d9402d15 	stw	r5,180(sp)
 400d61c:	102d883a 	mov	r22,r2
 400d620:	10039816 	blt	r2,zero,400e484 <___svfprintf_internal_r+0x13bc>
 400d624:	d9402917 	ldw	r5,164(sp)
 400d628:	df002783 	ldbu	fp,158(sp)
 400d62c:	2803ab16 	blt	r5,zero,400e4dc <___svfprintf_internal_r+0x1414>
 400d630:	00ffdfc4 	movi	r3,-129
 400d634:	a584b03a 	or	r2,r20,r22
 400d638:	90e4703a 	and	r18,r18,r3
 400d63c:	10014a26 	beq	r2,zero,400db68 <___svfprintf_internal_r+0xaa0>
 400d640:	b0034b26 	beq	r22,zero,400e370 <___svfprintf_internal_r+0x12a8>
 400d644:	dc402a15 	stw	r17,168(sp)
 400d648:	dc001e04 	addi	r16,sp,120
 400d64c:	b023883a 	mov	r17,r22
 400d650:	402d883a 	mov	r22,r8
 400d654:	a009883a 	mov	r4,r20
 400d658:	880b883a 	mov	r5,r17
 400d65c:	01800284 	movi	r6,10
 400d660:	000f883a 	mov	r7,zero
 400d664:	40196640 	call	4019664 <__umoddi3>
 400d668:	10800c04 	addi	r2,r2,48
 400d66c:	843fffc4 	addi	r16,r16,-1
 400d670:	a009883a 	mov	r4,r20
 400d674:	880b883a 	mov	r5,r17
 400d678:	80800005 	stb	r2,0(r16)
 400d67c:	01800284 	movi	r6,10
 400d680:	000f883a 	mov	r7,zero
 400d684:	40190ec0 	call	40190ec <__udivdi3>
 400d688:	1029883a 	mov	r20,r2
 400d68c:	10c4b03a 	or	r2,r2,r3
 400d690:	1823883a 	mov	r17,r3
 400d694:	103fef1e 	bne	r2,zero,400d654 <__alt_data_end+0xfc00d654>
 400d698:	d8c02817 	ldw	r3,160(sp)
 400d69c:	dc402a17 	ldw	r17,168(sp)
 400d6a0:	b011883a 	mov	r8,r22
 400d6a4:	1c07c83a 	sub	r3,r3,r16
 400d6a8:	d8c02e15 	stw	r3,184(sp)
 400d6ac:	00002e06 	br	400d768 <___svfprintf_internal_r+0x6a0>
 400d6b0:	18c03fcc 	andi	r3,r3,255
 400d6b4:	1806e71e 	bne	r3,zero,400f254 <___svfprintf_internal_r+0x218c>
 400d6b8:	94800414 	ori	r18,r18,16
 400d6bc:	9080080c 	andi	r2,r18,32
 400d6c0:	1002d426 	beq	r2,zero,400e214 <___svfprintf_internal_r+0x114c>
 400d6c4:	d9402d17 	ldw	r5,180(sp)
 400d6c8:	d8c02917 	ldw	r3,164(sp)
 400d6cc:	d8002785 	stb	zero,158(sp)
 400d6d0:	28800204 	addi	r2,r5,8
 400d6d4:	2d000017 	ldw	r20,0(r5)
 400d6d8:	2d800117 	ldw	r22,4(r5)
 400d6dc:	18041516 	blt	r3,zero,400e734 <___svfprintf_internal_r+0x166c>
 400d6e0:	013fdfc4 	movi	r4,-129
 400d6e4:	a586b03a 	or	r3,r20,r22
 400d6e8:	d8802d15 	stw	r2,180(sp)
 400d6ec:	9124703a 	and	r18,r18,r4
 400d6f0:	1802d51e 	bne	r3,zero,400e248 <___svfprintf_internal_r+0x1180>
 400d6f4:	d9402917 	ldw	r5,164(sp)
 400d6f8:	0039883a 	mov	fp,zero
 400d6fc:	2806be26 	beq	r5,zero,400f1f8 <___svfprintf_internal_r+0x2130>
 400d700:	0029883a 	mov	r20,zero
 400d704:	002d883a 	mov	r22,zero
 400d708:	dc001e04 	addi	r16,sp,120
 400d70c:	a006d0fa 	srli	r3,r20,3
 400d710:	b008977a 	slli	r4,r22,29
 400d714:	b02cd0fa 	srli	r22,r22,3
 400d718:	a50001cc 	andi	r20,r20,7
 400d71c:	a0800c04 	addi	r2,r20,48
 400d720:	843fffc4 	addi	r16,r16,-1
 400d724:	20e8b03a 	or	r20,r4,r3
 400d728:	80800005 	stb	r2,0(r16)
 400d72c:	a586b03a 	or	r3,r20,r22
 400d730:	183ff61e 	bne	r3,zero,400d70c <__alt_data_end+0xfc00d70c>
 400d734:	90c0004c 	andi	r3,r18,1
 400d738:	18013926 	beq	r3,zero,400dc20 <___svfprintf_internal_r+0xb58>
 400d73c:	10803fcc 	andi	r2,r2,255
 400d740:	1080201c 	xori	r2,r2,128
 400d744:	10bfe004 	addi	r2,r2,-128
 400d748:	00c00c04 	movi	r3,48
 400d74c:	10c13426 	beq	r2,r3,400dc20 <___svfprintf_internal_r+0xb58>
 400d750:	80ffffc5 	stb	r3,-1(r16)
 400d754:	d8c02817 	ldw	r3,160(sp)
 400d758:	80bfffc4 	addi	r2,r16,-1
 400d75c:	1021883a 	mov	r16,r2
 400d760:	1887c83a 	sub	r3,r3,r2
 400d764:	d8c02e15 	stw	r3,184(sp)
 400d768:	d8802e17 	ldw	r2,184(sp)
 400d76c:	d9002917 	ldw	r4,164(sp)
 400d770:	1100010e 	bge	r2,r4,400d778 <___svfprintf_internal_r+0x6b0>
 400d774:	2005883a 	mov	r2,r4
 400d778:	d8802a15 	stw	r2,168(sp)
 400d77c:	d8003215 	stw	zero,200(sp)
 400d780:	e7003fcc 	andi	fp,fp,255
 400d784:	e700201c 	xori	fp,fp,128
 400d788:	e73fe004 	addi	fp,fp,-128
 400d78c:	e0000326 	beq	fp,zero,400d79c <___svfprintf_internal_r+0x6d4>
 400d790:	d8c02a17 	ldw	r3,168(sp)
 400d794:	18c00044 	addi	r3,r3,1
 400d798:	d8c02a15 	stw	r3,168(sp)
 400d79c:	90c0008c 	andi	r3,r18,2
 400d7a0:	d8c02b15 	stw	r3,172(sp)
 400d7a4:	18000326 	beq	r3,zero,400d7b4 <___svfprintf_internal_r+0x6ec>
 400d7a8:	d8c02a17 	ldw	r3,168(sp)
 400d7ac:	18c00084 	addi	r3,r3,2
 400d7b0:	d8c02a15 	stw	r3,168(sp)
 400d7b4:	90c0210c 	andi	r3,r18,132
 400d7b8:	d8c03015 	stw	r3,192(sp)
 400d7bc:	1801a11e 	bne	r3,zero,400de44 <___svfprintf_internal_r+0xd7c>
 400d7c0:	d9003117 	ldw	r4,196(sp)
 400d7c4:	d8c02a17 	ldw	r3,168(sp)
 400d7c8:	20e9c83a 	sub	r20,r4,r3
 400d7cc:	05019d0e 	bge	zero,r20,400de44 <___svfprintf_internal_r+0xd7c>
 400d7d0:	02400404 	movi	r9,16
 400d7d4:	d8c02017 	ldw	r3,128(sp)
 400d7d8:	d8801f17 	ldw	r2,124(sp)
 400d7dc:	4d051b0e 	bge	r9,r20,400ec4c <___svfprintf_internal_r+0x1b84>
 400d7e0:	014100b4 	movhi	r5,1026
 400d7e4:	297fcf84 	addi	r5,r5,-194
 400d7e8:	dc403c15 	stw	r17,240(sp)
 400d7ec:	d9403515 	stw	r5,212(sp)
 400d7f0:	a023883a 	mov	r17,r20
 400d7f4:	482d883a 	mov	r22,r9
 400d7f8:	9029883a 	mov	r20,r18
 400d7fc:	070001c4 	movi	fp,7
 400d800:	8025883a 	mov	r18,r16
 400d804:	dc002c17 	ldw	r16,176(sp)
 400d808:	00000306 	br	400d818 <___svfprintf_internal_r+0x750>
 400d80c:	8c7ffc04 	addi	r17,r17,-16
 400d810:	42000204 	addi	r8,r8,8
 400d814:	b440130e 	bge	r22,r17,400d864 <___svfprintf_internal_r+0x79c>
 400d818:	010100b4 	movhi	r4,1026
 400d81c:	18c00404 	addi	r3,r3,16
 400d820:	10800044 	addi	r2,r2,1
 400d824:	213fcf84 	addi	r4,r4,-194
 400d828:	41000015 	stw	r4,0(r8)
 400d82c:	45800115 	stw	r22,4(r8)
 400d830:	d8c02015 	stw	r3,128(sp)
 400d834:	d8801f15 	stw	r2,124(sp)
 400d838:	e0bff40e 	bge	fp,r2,400d80c <__alt_data_end+0xfc00d80c>
 400d83c:	d9801e04 	addi	r6,sp,120
 400d840:	800b883a 	mov	r5,r16
 400d844:	9809883a 	mov	r4,r19
 400d848:	4015d640 	call	4015d64 <__ssprint_r>
 400d84c:	103f031e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400d850:	8c7ffc04 	addi	r17,r17,-16
 400d854:	d8c02017 	ldw	r3,128(sp)
 400d858:	d8801f17 	ldw	r2,124(sp)
 400d85c:	da000404 	addi	r8,sp,16
 400d860:	b47fed16 	blt	r22,r17,400d818 <__alt_data_end+0xfc00d818>
 400d864:	9021883a 	mov	r16,r18
 400d868:	a025883a 	mov	r18,r20
 400d86c:	8829883a 	mov	r20,r17
 400d870:	dc403c17 	ldw	r17,240(sp)
 400d874:	d9403517 	ldw	r5,212(sp)
 400d878:	a0c7883a 	add	r3,r20,r3
 400d87c:	10800044 	addi	r2,r2,1
 400d880:	41400015 	stw	r5,0(r8)
 400d884:	45000115 	stw	r20,4(r8)
 400d888:	d8c02015 	stw	r3,128(sp)
 400d88c:	d8801f15 	stw	r2,124(sp)
 400d890:	010001c4 	movi	r4,7
 400d894:	20829f16 	blt	r4,r2,400e314 <___svfprintf_internal_r+0x124c>
 400d898:	df002787 	ldb	fp,158(sp)
 400d89c:	42000204 	addi	r8,r8,8
 400d8a0:	e0000c26 	beq	fp,zero,400d8d4 <___svfprintf_internal_r+0x80c>
 400d8a4:	d8801f17 	ldw	r2,124(sp)
 400d8a8:	d9002784 	addi	r4,sp,158
 400d8ac:	18c00044 	addi	r3,r3,1
 400d8b0:	10800044 	addi	r2,r2,1
 400d8b4:	41000015 	stw	r4,0(r8)
 400d8b8:	01000044 	movi	r4,1
 400d8bc:	41000115 	stw	r4,4(r8)
 400d8c0:	d8c02015 	stw	r3,128(sp)
 400d8c4:	d8801f15 	stw	r2,124(sp)
 400d8c8:	010001c4 	movi	r4,7
 400d8cc:	20823816 	blt	r4,r2,400e1b0 <___svfprintf_internal_r+0x10e8>
 400d8d0:	42000204 	addi	r8,r8,8
 400d8d4:	d8802b17 	ldw	r2,172(sp)
 400d8d8:	10000c26 	beq	r2,zero,400d90c <___svfprintf_internal_r+0x844>
 400d8dc:	d8801f17 	ldw	r2,124(sp)
 400d8e0:	d9002704 	addi	r4,sp,156
 400d8e4:	18c00084 	addi	r3,r3,2
 400d8e8:	10800044 	addi	r2,r2,1
 400d8ec:	41000015 	stw	r4,0(r8)
 400d8f0:	01000084 	movi	r4,2
 400d8f4:	41000115 	stw	r4,4(r8)
 400d8f8:	d8c02015 	stw	r3,128(sp)
 400d8fc:	d8801f15 	stw	r2,124(sp)
 400d900:	010001c4 	movi	r4,7
 400d904:	20823216 	blt	r4,r2,400e1d0 <___svfprintf_internal_r+0x1108>
 400d908:	42000204 	addi	r8,r8,8
 400d90c:	d9003017 	ldw	r4,192(sp)
 400d910:	00802004 	movi	r2,128
 400d914:	20819726 	beq	r4,r2,400df74 <___svfprintf_internal_r+0xeac>
 400d918:	d9402917 	ldw	r5,164(sp)
 400d91c:	d8802e17 	ldw	r2,184(sp)
 400d920:	28adc83a 	sub	r22,r5,r2
 400d924:	05802f0e 	bge	zero,r22,400d9e4 <___svfprintf_internal_r+0x91c>
 400d928:	07000404 	movi	fp,16
 400d92c:	d8801f17 	ldw	r2,124(sp)
 400d930:	e583c00e 	bge	fp,r22,400e834 <___svfprintf_internal_r+0x176c>
 400d934:	014100b4 	movhi	r5,1026
 400d938:	297fcb84 	addi	r5,r5,-210
 400d93c:	dc402915 	stw	r17,164(sp)
 400d940:	d9402b15 	stw	r5,172(sp)
 400d944:	b023883a 	mov	r17,r22
 400d948:	050001c4 	movi	r20,7
 400d94c:	902d883a 	mov	r22,r18
 400d950:	8025883a 	mov	r18,r16
 400d954:	dc002c17 	ldw	r16,176(sp)
 400d958:	00000306 	br	400d968 <___svfprintf_internal_r+0x8a0>
 400d95c:	8c7ffc04 	addi	r17,r17,-16
 400d960:	42000204 	addi	r8,r8,8
 400d964:	e440110e 	bge	fp,r17,400d9ac <___svfprintf_internal_r+0x8e4>
 400d968:	18c00404 	addi	r3,r3,16
 400d96c:	10800044 	addi	r2,r2,1
 400d970:	45400015 	stw	r21,0(r8)
 400d974:	47000115 	stw	fp,4(r8)
 400d978:	d8c02015 	stw	r3,128(sp)
 400d97c:	d8801f15 	stw	r2,124(sp)
 400d980:	a0bff60e 	bge	r20,r2,400d95c <__alt_data_end+0xfc00d95c>
 400d984:	d9801e04 	addi	r6,sp,120
 400d988:	800b883a 	mov	r5,r16
 400d98c:	9809883a 	mov	r4,r19
 400d990:	4015d640 	call	4015d64 <__ssprint_r>
 400d994:	103eb11e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400d998:	8c7ffc04 	addi	r17,r17,-16
 400d99c:	d8c02017 	ldw	r3,128(sp)
 400d9a0:	d8801f17 	ldw	r2,124(sp)
 400d9a4:	da000404 	addi	r8,sp,16
 400d9a8:	e47fef16 	blt	fp,r17,400d968 <__alt_data_end+0xfc00d968>
 400d9ac:	9021883a 	mov	r16,r18
 400d9b0:	b025883a 	mov	r18,r22
 400d9b4:	882d883a 	mov	r22,r17
 400d9b8:	dc402917 	ldw	r17,164(sp)
 400d9bc:	d9002b17 	ldw	r4,172(sp)
 400d9c0:	1d87883a 	add	r3,r3,r22
 400d9c4:	10800044 	addi	r2,r2,1
 400d9c8:	41000015 	stw	r4,0(r8)
 400d9cc:	45800115 	stw	r22,4(r8)
 400d9d0:	d8c02015 	stw	r3,128(sp)
 400d9d4:	d8801f15 	stw	r2,124(sp)
 400d9d8:	010001c4 	movi	r4,7
 400d9dc:	2081ec16 	blt	r4,r2,400e190 <___svfprintf_internal_r+0x10c8>
 400d9e0:	42000204 	addi	r8,r8,8
 400d9e4:	9080400c 	andi	r2,r18,256
 400d9e8:	1001181e 	bne	r2,zero,400de4c <___svfprintf_internal_r+0xd84>
 400d9ec:	d9402e17 	ldw	r5,184(sp)
 400d9f0:	d8801f17 	ldw	r2,124(sp)
 400d9f4:	44000015 	stw	r16,0(r8)
 400d9f8:	1947883a 	add	r3,r3,r5
 400d9fc:	10800044 	addi	r2,r2,1
 400da00:	41400115 	stw	r5,4(r8)
 400da04:	d8c02015 	stw	r3,128(sp)
 400da08:	d8801f15 	stw	r2,124(sp)
 400da0c:	010001c4 	movi	r4,7
 400da10:	2081d116 	blt	r4,r2,400e158 <___svfprintf_internal_r+0x1090>
 400da14:	42000204 	addi	r8,r8,8
 400da18:	9480010c 	andi	r18,r18,4
 400da1c:	90003226 	beq	r18,zero,400dae8 <___svfprintf_internal_r+0xa20>
 400da20:	d9403117 	ldw	r5,196(sp)
 400da24:	d8802a17 	ldw	r2,168(sp)
 400da28:	28a1c83a 	sub	r16,r5,r2
 400da2c:	04002e0e 	bge	zero,r16,400dae8 <___svfprintf_internal_r+0xa20>
 400da30:	04400404 	movi	r17,16
 400da34:	d8801f17 	ldw	r2,124(sp)
 400da38:	8c04b90e 	bge	r17,r16,400ed20 <___svfprintf_internal_r+0x1c58>
 400da3c:	014100b4 	movhi	r5,1026
 400da40:	297fcf84 	addi	r5,r5,-194
 400da44:	d9403515 	stw	r5,212(sp)
 400da48:	048001c4 	movi	r18,7
 400da4c:	dd002c17 	ldw	r20,176(sp)
 400da50:	00000306 	br	400da60 <___svfprintf_internal_r+0x998>
 400da54:	843ffc04 	addi	r16,r16,-16
 400da58:	42000204 	addi	r8,r8,8
 400da5c:	8c00130e 	bge	r17,r16,400daac <___svfprintf_internal_r+0x9e4>
 400da60:	010100b4 	movhi	r4,1026
 400da64:	18c00404 	addi	r3,r3,16
 400da68:	10800044 	addi	r2,r2,1
 400da6c:	213fcf84 	addi	r4,r4,-194
 400da70:	41000015 	stw	r4,0(r8)
 400da74:	44400115 	stw	r17,4(r8)
 400da78:	d8c02015 	stw	r3,128(sp)
 400da7c:	d8801f15 	stw	r2,124(sp)
 400da80:	90bff40e 	bge	r18,r2,400da54 <__alt_data_end+0xfc00da54>
 400da84:	d9801e04 	addi	r6,sp,120
 400da88:	a00b883a 	mov	r5,r20
 400da8c:	9809883a 	mov	r4,r19
 400da90:	4015d640 	call	4015d64 <__ssprint_r>
 400da94:	103e711e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400da98:	843ffc04 	addi	r16,r16,-16
 400da9c:	d8c02017 	ldw	r3,128(sp)
 400daa0:	d8801f17 	ldw	r2,124(sp)
 400daa4:	da000404 	addi	r8,sp,16
 400daa8:	8c3fed16 	blt	r17,r16,400da60 <__alt_data_end+0xfc00da60>
 400daac:	d9403517 	ldw	r5,212(sp)
 400dab0:	1c07883a 	add	r3,r3,r16
 400dab4:	10800044 	addi	r2,r2,1
 400dab8:	41400015 	stw	r5,0(r8)
 400dabc:	44000115 	stw	r16,4(r8)
 400dac0:	d8c02015 	stw	r3,128(sp)
 400dac4:	d8801f15 	stw	r2,124(sp)
 400dac8:	010001c4 	movi	r4,7
 400dacc:	2080060e 	bge	r4,r2,400dae8 <___svfprintf_internal_r+0xa20>
 400dad0:	d9402c17 	ldw	r5,176(sp)
 400dad4:	d9801e04 	addi	r6,sp,120
 400dad8:	9809883a 	mov	r4,r19
 400dadc:	4015d640 	call	4015d64 <__ssprint_r>
 400dae0:	103e5e1e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400dae4:	d8c02017 	ldw	r3,128(sp)
 400dae8:	d8803117 	ldw	r2,196(sp)
 400daec:	d9002a17 	ldw	r4,168(sp)
 400daf0:	1100010e 	bge	r2,r4,400daf8 <___svfprintf_internal_r+0xa30>
 400daf4:	2005883a 	mov	r2,r4
 400daf8:	d9402f17 	ldw	r5,188(sp)
 400dafc:	288b883a 	add	r5,r5,r2
 400db00:	d9402f15 	stw	r5,188(sp)
 400db04:	18019c1e 	bne	r3,zero,400e178 <___svfprintf_internal_r+0x10b0>
 400db08:	b8800007 	ldb	r2,0(r23)
 400db0c:	d8001f15 	stw	zero,124(sp)
 400db10:	da000404 	addi	r8,sp,16
 400db14:	103d991e 	bne	r2,zero,400d17c <__alt_data_end+0xfc00d17c>
 400db18:	b821883a 	mov	r16,r23
 400db1c:	003daf06 	br	400d1dc <__alt_data_end+0xfc00d1dc>
 400db20:	18c03fcc 	andi	r3,r3,255
 400db24:	1805c71e 	bne	r3,zero,400f244 <___svfprintf_internal_r+0x217c>
 400db28:	94800414 	ori	r18,r18,16
 400db2c:	9080080c 	andi	r2,r18,32
 400db30:	10020126 	beq	r2,zero,400e338 <___svfprintf_internal_r+0x1270>
 400db34:	d8802d17 	ldw	r2,180(sp)
 400db38:	d9002917 	ldw	r4,164(sp)
 400db3c:	d8002785 	stb	zero,158(sp)
 400db40:	10c00204 	addi	r3,r2,8
 400db44:	15000017 	ldw	r20,0(r2)
 400db48:	15800117 	ldw	r22,4(r2)
 400db4c:	20038e16 	blt	r4,zero,400e988 <___svfprintf_internal_r+0x18c0>
 400db50:	013fdfc4 	movi	r4,-129
 400db54:	a584b03a 	or	r2,r20,r22
 400db58:	d8c02d15 	stw	r3,180(sp)
 400db5c:	9124703a 	and	r18,r18,r4
 400db60:	0039883a 	mov	fp,zero
 400db64:	103eb61e 	bne	r2,zero,400d640 <__alt_data_end+0xfc00d640>
 400db68:	d8802917 	ldw	r2,164(sp)
 400db6c:	1002c81e 	bne	r2,zero,400e690 <___svfprintf_internal_r+0x15c8>
 400db70:	d8002915 	stw	zero,164(sp)
 400db74:	d8002e15 	stw	zero,184(sp)
 400db78:	dc001e04 	addi	r16,sp,120
 400db7c:	003efa06 	br	400d768 <__alt_data_end+0xfc00d768>
 400db80:	18c03fcc 	andi	r3,r3,255
 400db84:	1805ad1e 	bne	r3,zero,400f23c <___svfprintf_internal_r+0x2174>
 400db88:	014100b4 	movhi	r5,1026
 400db8c:	297fbf04 	addi	r5,r5,-260
 400db90:	d9403a15 	stw	r5,232(sp)
 400db94:	9080080c 	andi	r2,r18,32
 400db98:	10006126 	beq	r2,zero,400dd20 <___svfprintf_internal_r+0xc58>
 400db9c:	d8802d17 	ldw	r2,180(sp)
 400dba0:	15000017 	ldw	r20,0(r2)
 400dba4:	15800117 	ldw	r22,4(r2)
 400dba8:	10800204 	addi	r2,r2,8
 400dbac:	d8802d15 	stw	r2,180(sp)
 400dbb0:	9080004c 	andi	r2,r18,1
 400dbb4:	10018e26 	beq	r2,zero,400e1f0 <___svfprintf_internal_r+0x1128>
 400dbb8:	a584b03a 	or	r2,r20,r22
 400dbbc:	10030926 	beq	r2,zero,400e7e4 <___svfprintf_internal_r+0x171c>
 400dbc0:	d8c02917 	ldw	r3,164(sp)
 400dbc4:	00800c04 	movi	r2,48
 400dbc8:	d8802705 	stb	r2,156(sp)
 400dbcc:	dc402745 	stb	r17,157(sp)
 400dbd0:	d8002785 	stb	zero,158(sp)
 400dbd4:	90800094 	ori	r2,r18,2
 400dbd8:	18048716 	blt	r3,zero,400edf8 <___svfprintf_internal_r+0x1d30>
 400dbdc:	00bfdfc4 	movi	r2,-129
 400dbe0:	90a4703a 	and	r18,r18,r2
 400dbe4:	94800094 	ori	r18,r18,2
 400dbe8:	0039883a 	mov	fp,zero
 400dbec:	d9003a17 	ldw	r4,232(sp)
 400dbf0:	dc001e04 	addi	r16,sp,120
 400dbf4:	a08003cc 	andi	r2,r20,15
 400dbf8:	b006973a 	slli	r3,r22,28
 400dbfc:	2085883a 	add	r2,r4,r2
 400dc00:	a028d13a 	srli	r20,r20,4
 400dc04:	10800003 	ldbu	r2,0(r2)
 400dc08:	b02cd13a 	srli	r22,r22,4
 400dc0c:	843fffc4 	addi	r16,r16,-1
 400dc10:	1d28b03a 	or	r20,r3,r20
 400dc14:	80800005 	stb	r2,0(r16)
 400dc18:	a584b03a 	or	r2,r20,r22
 400dc1c:	103ff51e 	bne	r2,zero,400dbf4 <__alt_data_end+0xfc00dbf4>
 400dc20:	d8c02817 	ldw	r3,160(sp)
 400dc24:	1c07c83a 	sub	r3,r3,r16
 400dc28:	d8c02e15 	stw	r3,184(sp)
 400dc2c:	003ece06 	br	400d768 <__alt_data_end+0xfc00d768>
 400dc30:	d8c02d17 	ldw	r3,180(sp)
 400dc34:	d9002d17 	ldw	r4,180(sp)
 400dc38:	d8002785 	stb	zero,158(sp)
 400dc3c:	18800017 	ldw	r2,0(r3)
 400dc40:	21000104 	addi	r4,r4,4
 400dc44:	00c00044 	movi	r3,1
 400dc48:	d8c02a15 	stw	r3,168(sp)
 400dc4c:	d8801405 	stb	r2,80(sp)
 400dc50:	d9002d15 	stw	r4,180(sp)
 400dc54:	d8c02e15 	stw	r3,184(sp)
 400dc58:	d8002915 	stw	zero,164(sp)
 400dc5c:	d8003215 	stw	zero,200(sp)
 400dc60:	dc001404 	addi	r16,sp,80
 400dc64:	0039883a 	mov	fp,zero
 400dc68:	003ecc06 	br	400d79c <__alt_data_end+0xfc00d79c>
 400dc6c:	18c03fcc 	andi	r3,r3,255
 400dc70:	183e9226 	beq	r3,zero,400d6bc <__alt_data_end+0xfc00d6bc>
 400dc74:	d9c02785 	stb	r7,158(sp)
 400dc78:	003e9006 	br	400d6bc <__alt_data_end+0xfc00d6bc>
 400dc7c:	00c00044 	movi	r3,1
 400dc80:	01c00ac4 	movi	r7,43
 400dc84:	bc400007 	ldb	r17,0(r23)
 400dc88:	003d6306 	br	400d218 <__alt_data_end+0xfc00d218>
 400dc8c:	94800814 	ori	r18,r18,32
 400dc90:	bc400007 	ldb	r17,0(r23)
 400dc94:	003d6006 	br	400d218 <__alt_data_end+0xfc00d218>
 400dc98:	d8c02d17 	ldw	r3,180(sp)
 400dc9c:	d8002785 	stb	zero,158(sp)
 400dca0:	1c000017 	ldw	r16,0(r3)
 400dca4:	1d000104 	addi	r20,r3,4
 400dca8:	80040f26 	beq	r16,zero,400ece8 <___svfprintf_internal_r+0x1c20>
 400dcac:	d9002917 	ldw	r4,164(sp)
 400dcb0:	2003dc16 	blt	r4,zero,400ec24 <___svfprintf_internal_r+0x1b5c>
 400dcb4:	200d883a 	mov	r6,r4
 400dcb8:	000b883a 	mov	r5,zero
 400dcbc:	8009883a 	mov	r4,r16
 400dcc0:	da003e15 	stw	r8,248(sp)
 400dcc4:	40142ac0 	call	40142ac <memchr>
 400dcc8:	da003e17 	ldw	r8,248(sp)
 400dccc:	10045826 	beq	r2,zero,400ee30 <___svfprintf_internal_r+0x1d68>
 400dcd0:	1405c83a 	sub	r2,r2,r16
 400dcd4:	d8802e15 	stw	r2,184(sp)
 400dcd8:	1003d816 	blt	r2,zero,400ec3c <___svfprintf_internal_r+0x1b74>
 400dcdc:	df002783 	ldbu	fp,158(sp)
 400dce0:	d8802a15 	stw	r2,168(sp)
 400dce4:	dd002d15 	stw	r20,180(sp)
 400dce8:	d8002915 	stw	zero,164(sp)
 400dcec:	d8003215 	stw	zero,200(sp)
 400dcf0:	003ea306 	br	400d780 <__alt_data_end+0xfc00d780>
 400dcf4:	18c03fcc 	andi	r3,r3,255
 400dcf8:	183f8c26 	beq	r3,zero,400db2c <__alt_data_end+0xfc00db2c>
 400dcfc:	d9c02785 	stb	r7,158(sp)
 400dd00:	003f8a06 	br	400db2c <__alt_data_end+0xfc00db2c>
 400dd04:	18c03fcc 	andi	r3,r3,255
 400dd08:	1805631e 	bne	r3,zero,400f298 <___svfprintf_internal_r+0x21d0>
 400dd0c:	014100b4 	movhi	r5,1026
 400dd10:	297fc404 	addi	r5,r5,-240
 400dd14:	d9403a15 	stw	r5,232(sp)
 400dd18:	9080080c 	andi	r2,r18,32
 400dd1c:	103f9f1e 	bne	r2,zero,400db9c <__alt_data_end+0xfc00db9c>
 400dd20:	9080040c 	andi	r2,r18,16
 400dd24:	10029c26 	beq	r2,zero,400e798 <___svfprintf_internal_r+0x16d0>
 400dd28:	d8c02d17 	ldw	r3,180(sp)
 400dd2c:	002d883a 	mov	r22,zero
 400dd30:	1d000017 	ldw	r20,0(r3)
 400dd34:	18c00104 	addi	r3,r3,4
 400dd38:	d8c02d15 	stw	r3,180(sp)
 400dd3c:	003f9c06 	br	400dbb0 <__alt_data_end+0xfc00dbb0>
 400dd40:	94800054 	ori	r18,r18,1
 400dd44:	bc400007 	ldb	r17,0(r23)
 400dd48:	003d3306 	br	400d218 <__alt_data_end+0xfc00d218>
 400dd4c:	38803fcc 	andi	r2,r7,255
 400dd50:	1080201c 	xori	r2,r2,128
 400dd54:	10bfe004 	addi	r2,r2,-128
 400dd58:	1002971e 	bne	r2,zero,400e7b8 <___svfprintf_internal_r+0x16f0>
 400dd5c:	00c00044 	movi	r3,1
 400dd60:	01c00804 	movi	r7,32
 400dd64:	bc400007 	ldb	r17,0(r23)
 400dd68:	003d2b06 	br	400d218 <__alt_data_end+0xfc00d218>
 400dd6c:	18c03fcc 	andi	r3,r3,255
 400dd70:	183e2326 	beq	r3,zero,400d600 <__alt_data_end+0xfc00d600>
 400dd74:	d9c02785 	stb	r7,158(sp)
 400dd78:	003e2106 	br	400d600 <__alt_data_end+0xfc00d600>
 400dd7c:	bc400007 	ldb	r17,0(r23)
 400dd80:	8a430426 	beq	r17,r9,400e994 <___svfprintf_internal_r+0x18cc>
 400dd84:	94800414 	ori	r18,r18,16
 400dd88:	003d2306 	br	400d218 <__alt_data_end+0xfc00d218>
 400dd8c:	18c03fcc 	andi	r3,r3,255
 400dd90:	18053f1e 	bne	r3,zero,400f290 <___svfprintf_internal_r+0x21c8>
 400dd94:	9080080c 	andi	r2,r18,32
 400dd98:	10028926 	beq	r2,zero,400e7c0 <___svfprintf_internal_r+0x16f8>
 400dd9c:	d9402d17 	ldw	r5,180(sp)
 400dda0:	d9002f17 	ldw	r4,188(sp)
 400dda4:	28800017 	ldw	r2,0(r5)
 400dda8:	2007d7fa 	srai	r3,r4,31
 400ddac:	29400104 	addi	r5,r5,4
 400ddb0:	d9402d15 	stw	r5,180(sp)
 400ddb4:	11000015 	stw	r4,0(r2)
 400ddb8:	10c00115 	stw	r3,4(r2)
 400ddbc:	003ced06 	br	400d174 <__alt_data_end+0xfc00d174>
 400ddc0:	94801014 	ori	r18,r18,64
 400ddc4:	bc400007 	ldb	r17,0(r23)
 400ddc8:	003d1306 	br	400d218 <__alt_data_end+0xfc00d218>
 400ddcc:	010100b4 	movhi	r4,1026
 400ddd0:	213fc404 	addi	r4,r4,-240
 400ddd4:	0039883a 	mov	fp,zero
 400ddd8:	d9003a15 	stw	r4,232(sp)
 400dddc:	04401e04 	movi	r17,120
 400dde0:	003f8206 	br	400dbec <__alt_data_end+0xfc00dbec>
 400dde4:	18c03fcc 	andi	r3,r3,255
 400dde8:	1805221e 	bne	r3,zero,400f274 <___svfprintf_internal_r+0x21ac>
 400ddec:	883d9526 	beq	r17,zero,400d444 <__alt_data_end+0xfc00d444>
 400ddf0:	00c00044 	movi	r3,1
 400ddf4:	d8c02a15 	stw	r3,168(sp)
 400ddf8:	dc401405 	stb	r17,80(sp)
 400ddfc:	d8002785 	stb	zero,158(sp)
 400de00:	003f9406 	br	400dc54 <__alt_data_end+0xfc00dc54>
 400de04:	010100b4 	movhi	r4,1026
 400de08:	213fc404 	addi	r4,r4,-240
 400de0c:	d9003a15 	stw	r4,232(sp)
 400de10:	d8c02d15 	stw	r3,180(sp)
 400de14:	1025883a 	mov	r18,r2
 400de18:	04401e04 	movi	r17,120
 400de1c:	a584b03a 	or	r2,r20,r22
 400de20:	1000fa1e 	bne	r2,zero,400e20c <___svfprintf_internal_r+0x1144>
 400de24:	0039883a 	mov	fp,zero
 400de28:	00800084 	movi	r2,2
 400de2c:	10803fcc 	andi	r2,r2,255
 400de30:	00c00044 	movi	r3,1
 400de34:	10c21626 	beq	r2,r3,400e690 <___svfprintf_internal_r+0x15c8>
 400de38:	00c00084 	movi	r3,2
 400de3c:	10fe301e 	bne	r2,r3,400d700 <__alt_data_end+0xfc00d700>
 400de40:	003d7606 	br	400d41c <__alt_data_end+0xfc00d41c>
 400de44:	d8c02017 	ldw	r3,128(sp)
 400de48:	003e9506 	br	400d8a0 <__alt_data_end+0xfc00d8a0>
 400de4c:	00801944 	movi	r2,101
 400de50:	14407c0e 	bge	r2,r17,400e044 <___svfprintf_internal_r+0xf7c>
 400de54:	d9003617 	ldw	r4,216(sp)
 400de58:	d9403717 	ldw	r5,220(sp)
 400de5c:	000d883a 	mov	r6,zero
 400de60:	000f883a 	mov	r7,zero
 400de64:	d8c03d15 	stw	r3,244(sp)
 400de68:	da003e15 	stw	r8,248(sp)
 400de6c:	401ad300 	call	401ad30 <__eqdf2>
 400de70:	d8c03d17 	ldw	r3,244(sp)
 400de74:	da003e17 	ldw	r8,248(sp)
 400de78:	1000f51e 	bne	r2,zero,400e250 <___svfprintf_internal_r+0x1188>
 400de7c:	d8801f17 	ldw	r2,124(sp)
 400de80:	010100b4 	movhi	r4,1026
 400de84:	213fcb04 	addi	r4,r4,-212
 400de88:	18c00044 	addi	r3,r3,1
 400de8c:	10800044 	addi	r2,r2,1
 400de90:	41000015 	stw	r4,0(r8)
 400de94:	01000044 	movi	r4,1
 400de98:	41000115 	stw	r4,4(r8)
 400de9c:	d8c02015 	stw	r3,128(sp)
 400dea0:	d8801f15 	stw	r2,124(sp)
 400dea4:	010001c4 	movi	r4,7
 400dea8:	20826616 	blt	r4,r2,400e844 <___svfprintf_internal_r+0x177c>
 400deac:	42000204 	addi	r8,r8,8
 400deb0:	d8802617 	ldw	r2,152(sp)
 400deb4:	d9403317 	ldw	r5,204(sp)
 400deb8:	11400216 	blt	r2,r5,400dec4 <___svfprintf_internal_r+0xdfc>
 400debc:	9080004c 	andi	r2,r18,1
 400dec0:	103ed526 	beq	r2,zero,400da18 <__alt_data_end+0xfc00da18>
 400dec4:	d8803817 	ldw	r2,224(sp)
 400dec8:	d9003417 	ldw	r4,208(sp)
 400decc:	d9403817 	ldw	r5,224(sp)
 400ded0:	1887883a 	add	r3,r3,r2
 400ded4:	d8801f17 	ldw	r2,124(sp)
 400ded8:	41000015 	stw	r4,0(r8)
 400dedc:	41400115 	stw	r5,4(r8)
 400dee0:	10800044 	addi	r2,r2,1
 400dee4:	d8c02015 	stw	r3,128(sp)
 400dee8:	d8801f15 	stw	r2,124(sp)
 400deec:	010001c4 	movi	r4,7
 400def0:	2082af16 	blt	r4,r2,400e9b0 <___svfprintf_internal_r+0x18e8>
 400def4:	42000204 	addi	r8,r8,8
 400def8:	d8803317 	ldw	r2,204(sp)
 400defc:	143fffc4 	addi	r16,r2,-1
 400df00:	043ec50e 	bge	zero,r16,400da18 <__alt_data_end+0xfc00da18>
 400df04:	04400404 	movi	r17,16
 400df08:	d8801f17 	ldw	r2,124(sp)
 400df0c:	8c00860e 	bge	r17,r16,400e128 <___svfprintf_internal_r+0x1060>
 400df10:	014100b4 	movhi	r5,1026
 400df14:	297fcb84 	addi	r5,r5,-210
 400df18:	d9402b15 	stw	r5,172(sp)
 400df1c:	058001c4 	movi	r22,7
 400df20:	dd002c17 	ldw	r20,176(sp)
 400df24:	00000306 	br	400df34 <___svfprintf_internal_r+0xe6c>
 400df28:	42000204 	addi	r8,r8,8
 400df2c:	843ffc04 	addi	r16,r16,-16
 400df30:	8c00800e 	bge	r17,r16,400e134 <___svfprintf_internal_r+0x106c>
 400df34:	18c00404 	addi	r3,r3,16
 400df38:	10800044 	addi	r2,r2,1
 400df3c:	45400015 	stw	r21,0(r8)
 400df40:	44400115 	stw	r17,4(r8)
 400df44:	d8c02015 	stw	r3,128(sp)
 400df48:	d8801f15 	stw	r2,124(sp)
 400df4c:	b0bff60e 	bge	r22,r2,400df28 <__alt_data_end+0xfc00df28>
 400df50:	d9801e04 	addi	r6,sp,120
 400df54:	a00b883a 	mov	r5,r20
 400df58:	9809883a 	mov	r4,r19
 400df5c:	4015d640 	call	4015d64 <__ssprint_r>
 400df60:	103d3e1e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400df64:	d8c02017 	ldw	r3,128(sp)
 400df68:	d8801f17 	ldw	r2,124(sp)
 400df6c:	da000404 	addi	r8,sp,16
 400df70:	003fee06 	br	400df2c <__alt_data_end+0xfc00df2c>
 400df74:	d9403117 	ldw	r5,196(sp)
 400df78:	d8802a17 	ldw	r2,168(sp)
 400df7c:	28adc83a 	sub	r22,r5,r2
 400df80:	05be650e 	bge	zero,r22,400d918 <__alt_data_end+0xfc00d918>
 400df84:	07000404 	movi	fp,16
 400df88:	d8801f17 	ldw	r2,124(sp)
 400df8c:	e583a20e 	bge	fp,r22,400ee18 <___svfprintf_internal_r+0x1d50>
 400df90:	014100b4 	movhi	r5,1026
 400df94:	297fcb84 	addi	r5,r5,-210
 400df98:	dc403015 	stw	r17,192(sp)
 400df9c:	d9402b15 	stw	r5,172(sp)
 400dfa0:	b023883a 	mov	r17,r22
 400dfa4:	050001c4 	movi	r20,7
 400dfa8:	902d883a 	mov	r22,r18
 400dfac:	8025883a 	mov	r18,r16
 400dfb0:	dc002c17 	ldw	r16,176(sp)
 400dfb4:	00000306 	br	400dfc4 <___svfprintf_internal_r+0xefc>
 400dfb8:	8c7ffc04 	addi	r17,r17,-16
 400dfbc:	42000204 	addi	r8,r8,8
 400dfc0:	e440110e 	bge	fp,r17,400e008 <___svfprintf_internal_r+0xf40>
 400dfc4:	18c00404 	addi	r3,r3,16
 400dfc8:	10800044 	addi	r2,r2,1
 400dfcc:	45400015 	stw	r21,0(r8)
 400dfd0:	47000115 	stw	fp,4(r8)
 400dfd4:	d8c02015 	stw	r3,128(sp)
 400dfd8:	d8801f15 	stw	r2,124(sp)
 400dfdc:	a0bff60e 	bge	r20,r2,400dfb8 <__alt_data_end+0xfc00dfb8>
 400dfe0:	d9801e04 	addi	r6,sp,120
 400dfe4:	800b883a 	mov	r5,r16
 400dfe8:	9809883a 	mov	r4,r19
 400dfec:	4015d640 	call	4015d64 <__ssprint_r>
 400dff0:	103d1a1e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400dff4:	8c7ffc04 	addi	r17,r17,-16
 400dff8:	d8c02017 	ldw	r3,128(sp)
 400dffc:	d8801f17 	ldw	r2,124(sp)
 400e000:	da000404 	addi	r8,sp,16
 400e004:	e47fef16 	blt	fp,r17,400dfc4 <__alt_data_end+0xfc00dfc4>
 400e008:	9021883a 	mov	r16,r18
 400e00c:	b025883a 	mov	r18,r22
 400e010:	882d883a 	mov	r22,r17
 400e014:	dc403017 	ldw	r17,192(sp)
 400e018:	d9002b17 	ldw	r4,172(sp)
 400e01c:	1d87883a 	add	r3,r3,r22
 400e020:	10800044 	addi	r2,r2,1
 400e024:	41000015 	stw	r4,0(r8)
 400e028:	45800115 	stw	r22,4(r8)
 400e02c:	d8c02015 	stw	r3,128(sp)
 400e030:	d8801f15 	stw	r2,124(sp)
 400e034:	010001c4 	movi	r4,7
 400e038:	20819a16 	blt	r4,r2,400e6a4 <___svfprintf_internal_r+0x15dc>
 400e03c:	42000204 	addi	r8,r8,8
 400e040:	003e3506 	br	400d918 <__alt_data_end+0xfc00d918>
 400e044:	d9403317 	ldw	r5,204(sp)
 400e048:	00800044 	movi	r2,1
 400e04c:	18c00044 	addi	r3,r3,1
 400e050:	1141710e 	bge	r2,r5,400e618 <___svfprintf_internal_r+0x1550>
 400e054:	dc401f17 	ldw	r17,124(sp)
 400e058:	00800044 	movi	r2,1
 400e05c:	40800115 	stw	r2,4(r8)
 400e060:	8c400044 	addi	r17,r17,1
 400e064:	44000015 	stw	r16,0(r8)
 400e068:	d8c02015 	stw	r3,128(sp)
 400e06c:	dc401f15 	stw	r17,124(sp)
 400e070:	008001c4 	movi	r2,7
 400e074:	14417416 	blt	r2,r17,400e648 <___svfprintf_internal_r+0x1580>
 400e078:	42000204 	addi	r8,r8,8
 400e07c:	d8803817 	ldw	r2,224(sp)
 400e080:	d9003417 	ldw	r4,208(sp)
 400e084:	8c400044 	addi	r17,r17,1
 400e088:	10c7883a 	add	r3,r2,r3
 400e08c:	40800115 	stw	r2,4(r8)
 400e090:	41000015 	stw	r4,0(r8)
 400e094:	d8c02015 	stw	r3,128(sp)
 400e098:	dc401f15 	stw	r17,124(sp)
 400e09c:	008001c4 	movi	r2,7
 400e0a0:	14417216 	blt	r2,r17,400e66c <___svfprintf_internal_r+0x15a4>
 400e0a4:	45800204 	addi	r22,r8,8
 400e0a8:	d9003617 	ldw	r4,216(sp)
 400e0ac:	d9403717 	ldw	r5,220(sp)
 400e0b0:	000d883a 	mov	r6,zero
 400e0b4:	000f883a 	mov	r7,zero
 400e0b8:	d8c03d15 	stw	r3,244(sp)
 400e0bc:	401ad300 	call	401ad30 <__eqdf2>
 400e0c0:	d8c03d17 	ldw	r3,244(sp)
 400e0c4:	1000b326 	beq	r2,zero,400e394 <___svfprintf_internal_r+0x12cc>
 400e0c8:	d9403317 	ldw	r5,204(sp)
 400e0cc:	84000044 	addi	r16,r16,1
 400e0d0:	8c400044 	addi	r17,r17,1
 400e0d4:	28bfffc4 	addi	r2,r5,-1
 400e0d8:	1887883a 	add	r3,r3,r2
 400e0dc:	b0800115 	stw	r2,4(r22)
 400e0e0:	b4000015 	stw	r16,0(r22)
 400e0e4:	d8c02015 	stw	r3,128(sp)
 400e0e8:	dc401f15 	stw	r17,124(sp)
 400e0ec:	008001c4 	movi	r2,7
 400e0f0:	1440d216 	blt	r2,r17,400e43c <___svfprintf_internal_r+0x1374>
 400e0f4:	b5800204 	addi	r22,r22,8
 400e0f8:	d9003b17 	ldw	r4,236(sp)
 400e0fc:	df0022c4 	addi	fp,sp,139
 400e100:	8c400044 	addi	r17,r17,1
 400e104:	20c7883a 	add	r3,r4,r3
 400e108:	b7000015 	stw	fp,0(r22)
 400e10c:	b1000115 	stw	r4,4(r22)
 400e110:	d8c02015 	stw	r3,128(sp)
 400e114:	dc401f15 	stw	r17,124(sp)
 400e118:	008001c4 	movi	r2,7
 400e11c:	14400e16 	blt	r2,r17,400e158 <___svfprintf_internal_r+0x1090>
 400e120:	b2000204 	addi	r8,r22,8
 400e124:	003e3c06 	br	400da18 <__alt_data_end+0xfc00da18>
 400e128:	010100b4 	movhi	r4,1026
 400e12c:	213fcb84 	addi	r4,r4,-210
 400e130:	d9002b15 	stw	r4,172(sp)
 400e134:	d9002b17 	ldw	r4,172(sp)
 400e138:	1c07883a 	add	r3,r3,r16
 400e13c:	44000115 	stw	r16,4(r8)
 400e140:	41000015 	stw	r4,0(r8)
 400e144:	10800044 	addi	r2,r2,1
 400e148:	d8c02015 	stw	r3,128(sp)
 400e14c:	d8801f15 	stw	r2,124(sp)
 400e150:	010001c4 	movi	r4,7
 400e154:	20be2f0e 	bge	r4,r2,400da14 <__alt_data_end+0xfc00da14>
 400e158:	d9402c17 	ldw	r5,176(sp)
 400e15c:	d9801e04 	addi	r6,sp,120
 400e160:	9809883a 	mov	r4,r19
 400e164:	4015d640 	call	4015d64 <__ssprint_r>
 400e168:	103cbc1e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e16c:	d8c02017 	ldw	r3,128(sp)
 400e170:	da000404 	addi	r8,sp,16
 400e174:	003e2806 	br	400da18 <__alt_data_end+0xfc00da18>
 400e178:	d9402c17 	ldw	r5,176(sp)
 400e17c:	d9801e04 	addi	r6,sp,120
 400e180:	9809883a 	mov	r4,r19
 400e184:	4015d640 	call	4015d64 <__ssprint_r>
 400e188:	103e5f26 	beq	r2,zero,400db08 <__alt_data_end+0xfc00db08>
 400e18c:	003cb306 	br	400d45c <__alt_data_end+0xfc00d45c>
 400e190:	d9402c17 	ldw	r5,176(sp)
 400e194:	d9801e04 	addi	r6,sp,120
 400e198:	9809883a 	mov	r4,r19
 400e19c:	4015d640 	call	4015d64 <__ssprint_r>
 400e1a0:	103cae1e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e1a4:	d8c02017 	ldw	r3,128(sp)
 400e1a8:	da000404 	addi	r8,sp,16
 400e1ac:	003e0d06 	br	400d9e4 <__alt_data_end+0xfc00d9e4>
 400e1b0:	d9402c17 	ldw	r5,176(sp)
 400e1b4:	d9801e04 	addi	r6,sp,120
 400e1b8:	9809883a 	mov	r4,r19
 400e1bc:	4015d640 	call	4015d64 <__ssprint_r>
 400e1c0:	103ca61e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e1c4:	d8c02017 	ldw	r3,128(sp)
 400e1c8:	da000404 	addi	r8,sp,16
 400e1cc:	003dc106 	br	400d8d4 <__alt_data_end+0xfc00d8d4>
 400e1d0:	d9402c17 	ldw	r5,176(sp)
 400e1d4:	d9801e04 	addi	r6,sp,120
 400e1d8:	9809883a 	mov	r4,r19
 400e1dc:	4015d640 	call	4015d64 <__ssprint_r>
 400e1e0:	103c9e1e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e1e4:	d8c02017 	ldw	r3,128(sp)
 400e1e8:	da000404 	addi	r8,sp,16
 400e1ec:	003dc706 	br	400d90c <__alt_data_end+0xfc00d90c>
 400e1f0:	d8802917 	ldw	r2,164(sp)
 400e1f4:	d8002785 	stb	zero,158(sp)
 400e1f8:	103f0816 	blt	r2,zero,400de1c <__alt_data_end+0xfc00de1c>
 400e1fc:	00ffdfc4 	movi	r3,-129
 400e200:	a584b03a 	or	r2,r20,r22
 400e204:	90e4703a 	and	r18,r18,r3
 400e208:	103c8126 	beq	r2,zero,400d410 <__alt_data_end+0xfc00d410>
 400e20c:	0039883a 	mov	fp,zero
 400e210:	003e7606 	br	400dbec <__alt_data_end+0xfc00dbec>
 400e214:	9080040c 	andi	r2,r18,16
 400e218:	10013d26 	beq	r2,zero,400e710 <___svfprintf_internal_r+0x1648>
 400e21c:	d9002d17 	ldw	r4,180(sp)
 400e220:	d9402917 	ldw	r5,164(sp)
 400e224:	d8002785 	stb	zero,158(sp)
 400e228:	20800104 	addi	r2,r4,4
 400e22c:	25000017 	ldw	r20,0(r4)
 400e230:	002d883a 	mov	r22,zero
 400e234:	28013f16 	blt	r5,zero,400e734 <___svfprintf_internal_r+0x166c>
 400e238:	00ffdfc4 	movi	r3,-129
 400e23c:	d8802d15 	stw	r2,180(sp)
 400e240:	90e4703a 	and	r18,r18,r3
 400e244:	a03d2b26 	beq	r20,zero,400d6f4 <__alt_data_end+0xfc00d6f4>
 400e248:	0039883a 	mov	fp,zero
 400e24c:	003d2e06 	br	400d708 <__alt_data_end+0xfc00d708>
 400e250:	dc402617 	ldw	r17,152(sp)
 400e254:	0441830e 	bge	zero,r17,400e864 <___svfprintf_internal_r+0x179c>
 400e258:	dc403217 	ldw	r17,200(sp)
 400e25c:	d8803317 	ldw	r2,204(sp)
 400e260:	1440010e 	bge	r2,r17,400e268 <___svfprintf_internal_r+0x11a0>
 400e264:	1023883a 	mov	r17,r2
 400e268:	04400a0e 	bge	zero,r17,400e294 <___svfprintf_internal_r+0x11cc>
 400e26c:	d8801f17 	ldw	r2,124(sp)
 400e270:	1c47883a 	add	r3,r3,r17
 400e274:	44000015 	stw	r16,0(r8)
 400e278:	10800044 	addi	r2,r2,1
 400e27c:	44400115 	stw	r17,4(r8)
 400e280:	d8c02015 	stw	r3,128(sp)
 400e284:	d8801f15 	stw	r2,124(sp)
 400e288:	010001c4 	movi	r4,7
 400e28c:	20827516 	blt	r4,r2,400ec64 <___svfprintf_internal_r+0x1b9c>
 400e290:	42000204 	addi	r8,r8,8
 400e294:	88027b16 	blt	r17,zero,400ec84 <___svfprintf_internal_r+0x1bbc>
 400e298:	d9003217 	ldw	r4,200(sp)
 400e29c:	2463c83a 	sub	r17,r4,r17
 400e2a0:	0440990e 	bge	zero,r17,400e508 <___svfprintf_internal_r+0x1440>
 400e2a4:	05800404 	movi	r22,16
 400e2a8:	d8801f17 	ldw	r2,124(sp)
 400e2ac:	b441530e 	bge	r22,r17,400e7fc <___svfprintf_internal_r+0x1734>
 400e2b0:	010100b4 	movhi	r4,1026
 400e2b4:	213fcb84 	addi	r4,r4,-210
 400e2b8:	d9002b15 	stw	r4,172(sp)
 400e2bc:	070001c4 	movi	fp,7
 400e2c0:	dd002c17 	ldw	r20,176(sp)
 400e2c4:	00000306 	br	400e2d4 <___svfprintf_internal_r+0x120c>
 400e2c8:	42000204 	addi	r8,r8,8
 400e2cc:	8c7ffc04 	addi	r17,r17,-16
 400e2d0:	b4414d0e 	bge	r22,r17,400e808 <___svfprintf_internal_r+0x1740>
 400e2d4:	18c00404 	addi	r3,r3,16
 400e2d8:	10800044 	addi	r2,r2,1
 400e2dc:	45400015 	stw	r21,0(r8)
 400e2e0:	45800115 	stw	r22,4(r8)
 400e2e4:	d8c02015 	stw	r3,128(sp)
 400e2e8:	d8801f15 	stw	r2,124(sp)
 400e2ec:	e0bff60e 	bge	fp,r2,400e2c8 <__alt_data_end+0xfc00e2c8>
 400e2f0:	d9801e04 	addi	r6,sp,120
 400e2f4:	a00b883a 	mov	r5,r20
 400e2f8:	9809883a 	mov	r4,r19
 400e2fc:	4015d640 	call	4015d64 <__ssprint_r>
 400e300:	103c561e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e304:	d8c02017 	ldw	r3,128(sp)
 400e308:	d8801f17 	ldw	r2,124(sp)
 400e30c:	da000404 	addi	r8,sp,16
 400e310:	003fee06 	br	400e2cc <__alt_data_end+0xfc00e2cc>
 400e314:	d9402c17 	ldw	r5,176(sp)
 400e318:	d9801e04 	addi	r6,sp,120
 400e31c:	9809883a 	mov	r4,r19
 400e320:	4015d640 	call	4015d64 <__ssprint_r>
 400e324:	103c4d1e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e328:	d8c02017 	ldw	r3,128(sp)
 400e32c:	df002787 	ldb	fp,158(sp)
 400e330:	da000404 	addi	r8,sp,16
 400e334:	003d5a06 	br	400d8a0 <__alt_data_end+0xfc00d8a0>
 400e338:	9080040c 	andi	r2,r18,16
 400e33c:	10005c26 	beq	r2,zero,400e4b0 <___svfprintf_internal_r+0x13e8>
 400e340:	d9402d17 	ldw	r5,180(sp)
 400e344:	d8c02917 	ldw	r3,164(sp)
 400e348:	d8002785 	stb	zero,158(sp)
 400e34c:	28800104 	addi	r2,r5,4
 400e350:	2d000017 	ldw	r20,0(r5)
 400e354:	002d883a 	mov	r22,zero
 400e358:	18005e16 	blt	r3,zero,400e4d4 <___svfprintf_internal_r+0x140c>
 400e35c:	00ffdfc4 	movi	r3,-129
 400e360:	d8802d15 	stw	r2,180(sp)
 400e364:	90e4703a 	and	r18,r18,r3
 400e368:	0039883a 	mov	fp,zero
 400e36c:	a03dfe26 	beq	r20,zero,400db68 <__alt_data_end+0xfc00db68>
 400e370:	00800244 	movi	r2,9
 400e374:	153cb336 	bltu	r2,r20,400d644 <__alt_data_end+0xfc00d644>
 400e378:	a5000c04 	addi	r20,r20,48
 400e37c:	dc001dc4 	addi	r16,sp,119
 400e380:	dd001dc5 	stb	r20,119(sp)
 400e384:	d8c02817 	ldw	r3,160(sp)
 400e388:	1c07c83a 	sub	r3,r3,r16
 400e38c:	d8c02e15 	stw	r3,184(sp)
 400e390:	003cf506 	br	400d768 <__alt_data_end+0xfc00d768>
 400e394:	d8803317 	ldw	r2,204(sp)
 400e398:	143fffc4 	addi	r16,r2,-1
 400e39c:	043f560e 	bge	zero,r16,400e0f8 <__alt_data_end+0xfc00e0f8>
 400e3a0:	07000404 	movi	fp,16
 400e3a4:	e403530e 	bge	fp,r16,400f0f4 <___svfprintf_internal_r+0x202c>
 400e3a8:	014100b4 	movhi	r5,1026
 400e3ac:	297fcb84 	addi	r5,r5,-210
 400e3b0:	d9402b15 	stw	r5,172(sp)
 400e3b4:	01c001c4 	movi	r7,7
 400e3b8:	dd002c17 	ldw	r20,176(sp)
 400e3bc:	00000306 	br	400e3cc <___svfprintf_internal_r+0x1304>
 400e3c0:	843ffc04 	addi	r16,r16,-16
 400e3c4:	b5800204 	addi	r22,r22,8
 400e3c8:	e400130e 	bge	fp,r16,400e418 <___svfprintf_internal_r+0x1350>
 400e3cc:	18c00404 	addi	r3,r3,16
 400e3d0:	8c400044 	addi	r17,r17,1
 400e3d4:	b5400015 	stw	r21,0(r22)
 400e3d8:	b7000115 	stw	fp,4(r22)
 400e3dc:	d8c02015 	stw	r3,128(sp)
 400e3e0:	dc401f15 	stw	r17,124(sp)
 400e3e4:	3c7ff60e 	bge	r7,r17,400e3c0 <__alt_data_end+0xfc00e3c0>
 400e3e8:	d9801e04 	addi	r6,sp,120
 400e3ec:	a00b883a 	mov	r5,r20
 400e3f0:	9809883a 	mov	r4,r19
 400e3f4:	d9c03d15 	stw	r7,244(sp)
 400e3f8:	4015d640 	call	4015d64 <__ssprint_r>
 400e3fc:	d9c03d17 	ldw	r7,244(sp)
 400e400:	103c161e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e404:	843ffc04 	addi	r16,r16,-16
 400e408:	d8c02017 	ldw	r3,128(sp)
 400e40c:	dc401f17 	ldw	r17,124(sp)
 400e410:	dd800404 	addi	r22,sp,16
 400e414:	e43fed16 	blt	fp,r16,400e3cc <__alt_data_end+0xfc00e3cc>
 400e418:	d8802b17 	ldw	r2,172(sp)
 400e41c:	1c07883a 	add	r3,r3,r16
 400e420:	8c400044 	addi	r17,r17,1
 400e424:	b0800015 	stw	r2,0(r22)
 400e428:	b4000115 	stw	r16,4(r22)
 400e42c:	d8c02015 	stw	r3,128(sp)
 400e430:	dc401f15 	stw	r17,124(sp)
 400e434:	008001c4 	movi	r2,7
 400e438:	147f2e0e 	bge	r2,r17,400e0f4 <__alt_data_end+0xfc00e0f4>
 400e43c:	d9402c17 	ldw	r5,176(sp)
 400e440:	d9801e04 	addi	r6,sp,120
 400e444:	9809883a 	mov	r4,r19
 400e448:	4015d640 	call	4015d64 <__ssprint_r>
 400e44c:	103c031e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e450:	d8c02017 	ldw	r3,128(sp)
 400e454:	dc401f17 	ldw	r17,124(sp)
 400e458:	dd800404 	addi	r22,sp,16
 400e45c:	003f2606 	br	400e0f8 <__alt_data_end+0xfc00e0f8>
 400e460:	9080040c 	andi	r2,r18,16
 400e464:	1000c326 	beq	r2,zero,400e774 <___svfprintf_internal_r+0x16ac>
 400e468:	d8802d17 	ldw	r2,180(sp)
 400e46c:	15000017 	ldw	r20,0(r2)
 400e470:	10800104 	addi	r2,r2,4
 400e474:	d8802d15 	stw	r2,180(sp)
 400e478:	a02dd7fa 	srai	r22,r20,31
 400e47c:	b005883a 	mov	r2,r22
 400e480:	103c680e 	bge	r2,zero,400d624 <__alt_data_end+0xfc00d624>
 400e484:	0529c83a 	sub	r20,zero,r20
 400e488:	a004c03a 	cmpne	r2,r20,zero
 400e48c:	05adc83a 	sub	r22,zero,r22
 400e490:	b0adc83a 	sub	r22,r22,r2
 400e494:	d8802917 	ldw	r2,164(sp)
 400e498:	07000b44 	movi	fp,45
 400e49c:	df002785 	stb	fp,158(sp)
 400e4a0:	10022e16 	blt	r2,zero,400ed5c <___svfprintf_internal_r+0x1c94>
 400e4a4:	00bfdfc4 	movi	r2,-129
 400e4a8:	90a4703a 	and	r18,r18,r2
 400e4ac:	003c6406 	br	400d640 <__alt_data_end+0xfc00d640>
 400e4b0:	9080100c 	andi	r2,r18,64
 400e4b4:	d8002785 	stb	zero,158(sp)
 400e4b8:	10012526 	beq	r2,zero,400e950 <___svfprintf_internal_r+0x1888>
 400e4bc:	d9002d17 	ldw	r4,180(sp)
 400e4c0:	d9402917 	ldw	r5,164(sp)
 400e4c4:	002d883a 	mov	r22,zero
 400e4c8:	20800104 	addi	r2,r4,4
 400e4cc:	2500000b 	ldhu	r20,0(r4)
 400e4d0:	283fa20e 	bge	r5,zero,400e35c <__alt_data_end+0xfc00e35c>
 400e4d4:	d8802d15 	stw	r2,180(sp)
 400e4d8:	0039883a 	mov	fp,zero
 400e4dc:	a584b03a 	or	r2,r20,r22
 400e4e0:	103c571e 	bne	r2,zero,400d640 <__alt_data_end+0xfc00d640>
 400e4e4:	00800044 	movi	r2,1
 400e4e8:	003e5006 	br	400de2c <__alt_data_end+0xfc00de2c>
 400e4ec:	d9402c17 	ldw	r5,176(sp)
 400e4f0:	d9801e04 	addi	r6,sp,120
 400e4f4:	9809883a 	mov	r4,r19
 400e4f8:	4015d640 	call	4015d64 <__ssprint_r>
 400e4fc:	103bd71e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e500:	d8c02017 	ldw	r3,128(sp)
 400e504:	da000404 	addi	r8,sp,16
 400e508:	d9003217 	ldw	r4,200(sp)
 400e50c:	d8802617 	ldw	r2,152(sp)
 400e510:	d9403317 	ldw	r5,204(sp)
 400e514:	8123883a 	add	r17,r16,r4
 400e518:	11400216 	blt	r2,r5,400e524 <___svfprintf_internal_r+0x145c>
 400e51c:	9100004c 	andi	r4,r18,1
 400e520:	20000d26 	beq	r4,zero,400e558 <___svfprintf_internal_r+0x1490>
 400e524:	d9003817 	ldw	r4,224(sp)
 400e528:	d9403417 	ldw	r5,208(sp)
 400e52c:	1907883a 	add	r3,r3,r4
 400e530:	d9001f17 	ldw	r4,124(sp)
 400e534:	41400015 	stw	r5,0(r8)
 400e538:	d9403817 	ldw	r5,224(sp)
 400e53c:	21000044 	addi	r4,r4,1
 400e540:	d8c02015 	stw	r3,128(sp)
 400e544:	41400115 	stw	r5,4(r8)
 400e548:	d9001f15 	stw	r4,124(sp)
 400e54c:	014001c4 	movi	r5,7
 400e550:	2901dc16 	blt	r5,r4,400ecc4 <___svfprintf_internal_r+0x1bfc>
 400e554:	42000204 	addi	r8,r8,8
 400e558:	d9003317 	ldw	r4,204(sp)
 400e55c:	8121883a 	add	r16,r16,r4
 400e560:	2085c83a 	sub	r2,r4,r2
 400e564:	8461c83a 	sub	r16,r16,r17
 400e568:	1400010e 	bge	r2,r16,400e570 <___svfprintf_internal_r+0x14a8>
 400e56c:	1021883a 	mov	r16,r2
 400e570:	04000a0e 	bge	zero,r16,400e59c <___svfprintf_internal_r+0x14d4>
 400e574:	d9001f17 	ldw	r4,124(sp)
 400e578:	1c07883a 	add	r3,r3,r16
 400e57c:	44400015 	stw	r17,0(r8)
 400e580:	21000044 	addi	r4,r4,1
 400e584:	44000115 	stw	r16,4(r8)
 400e588:	d8c02015 	stw	r3,128(sp)
 400e58c:	d9001f15 	stw	r4,124(sp)
 400e590:	014001c4 	movi	r5,7
 400e594:	2901e616 	blt	r5,r4,400ed30 <___svfprintf_internal_r+0x1c68>
 400e598:	42000204 	addi	r8,r8,8
 400e59c:	8001f616 	blt	r16,zero,400ed78 <___svfprintf_internal_r+0x1cb0>
 400e5a0:	1421c83a 	sub	r16,r2,r16
 400e5a4:	043d1c0e 	bge	zero,r16,400da18 <__alt_data_end+0xfc00da18>
 400e5a8:	04400404 	movi	r17,16
 400e5ac:	d8801f17 	ldw	r2,124(sp)
 400e5b0:	8c3edd0e 	bge	r17,r16,400e128 <__alt_data_end+0xfc00e128>
 400e5b4:	014100b4 	movhi	r5,1026
 400e5b8:	297fcb84 	addi	r5,r5,-210
 400e5bc:	d9402b15 	stw	r5,172(sp)
 400e5c0:	058001c4 	movi	r22,7
 400e5c4:	dd002c17 	ldw	r20,176(sp)
 400e5c8:	00000306 	br	400e5d8 <___svfprintf_internal_r+0x1510>
 400e5cc:	42000204 	addi	r8,r8,8
 400e5d0:	843ffc04 	addi	r16,r16,-16
 400e5d4:	8c3ed70e 	bge	r17,r16,400e134 <__alt_data_end+0xfc00e134>
 400e5d8:	18c00404 	addi	r3,r3,16
 400e5dc:	10800044 	addi	r2,r2,1
 400e5e0:	45400015 	stw	r21,0(r8)
 400e5e4:	44400115 	stw	r17,4(r8)
 400e5e8:	d8c02015 	stw	r3,128(sp)
 400e5ec:	d8801f15 	stw	r2,124(sp)
 400e5f0:	b0bff60e 	bge	r22,r2,400e5cc <__alt_data_end+0xfc00e5cc>
 400e5f4:	d9801e04 	addi	r6,sp,120
 400e5f8:	a00b883a 	mov	r5,r20
 400e5fc:	9809883a 	mov	r4,r19
 400e600:	4015d640 	call	4015d64 <__ssprint_r>
 400e604:	103b951e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e608:	d8c02017 	ldw	r3,128(sp)
 400e60c:	d8801f17 	ldw	r2,124(sp)
 400e610:	da000404 	addi	r8,sp,16
 400e614:	003fee06 	br	400e5d0 <__alt_data_end+0xfc00e5d0>
 400e618:	9088703a 	and	r4,r18,r2
 400e61c:	203e8d1e 	bne	r4,zero,400e054 <__alt_data_end+0xfc00e054>
 400e620:	dc401f17 	ldw	r17,124(sp)
 400e624:	40800115 	stw	r2,4(r8)
 400e628:	44000015 	stw	r16,0(r8)
 400e62c:	8c400044 	addi	r17,r17,1
 400e630:	d8c02015 	stw	r3,128(sp)
 400e634:	dc401f15 	stw	r17,124(sp)
 400e638:	008001c4 	movi	r2,7
 400e63c:	147f7f16 	blt	r2,r17,400e43c <__alt_data_end+0xfc00e43c>
 400e640:	45800204 	addi	r22,r8,8
 400e644:	003eac06 	br	400e0f8 <__alt_data_end+0xfc00e0f8>
 400e648:	d9402c17 	ldw	r5,176(sp)
 400e64c:	d9801e04 	addi	r6,sp,120
 400e650:	9809883a 	mov	r4,r19
 400e654:	4015d640 	call	4015d64 <__ssprint_r>
 400e658:	103b801e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e65c:	d8c02017 	ldw	r3,128(sp)
 400e660:	dc401f17 	ldw	r17,124(sp)
 400e664:	da000404 	addi	r8,sp,16
 400e668:	003e8406 	br	400e07c <__alt_data_end+0xfc00e07c>
 400e66c:	d9402c17 	ldw	r5,176(sp)
 400e670:	d9801e04 	addi	r6,sp,120
 400e674:	9809883a 	mov	r4,r19
 400e678:	4015d640 	call	4015d64 <__ssprint_r>
 400e67c:	103b771e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e680:	d8c02017 	ldw	r3,128(sp)
 400e684:	dc401f17 	ldw	r17,124(sp)
 400e688:	dd800404 	addi	r22,sp,16
 400e68c:	003e8606 	br	400e0a8 <__alt_data_end+0xfc00e0a8>
 400e690:	0029883a 	mov	r20,zero
 400e694:	a5000c04 	addi	r20,r20,48
 400e698:	dc001dc4 	addi	r16,sp,119
 400e69c:	dd001dc5 	stb	r20,119(sp)
 400e6a0:	003f3806 	br	400e384 <__alt_data_end+0xfc00e384>
 400e6a4:	d9402c17 	ldw	r5,176(sp)
 400e6a8:	d9801e04 	addi	r6,sp,120
 400e6ac:	9809883a 	mov	r4,r19
 400e6b0:	4015d640 	call	4015d64 <__ssprint_r>
 400e6b4:	103b691e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e6b8:	d8c02017 	ldw	r3,128(sp)
 400e6bc:	da000404 	addi	r8,sp,16
 400e6c0:	003c9506 	br	400d918 <__alt_data_end+0xfc00d918>
 400e6c4:	d9003617 	ldw	r4,216(sp)
 400e6c8:	d9403717 	ldw	r5,220(sp)
 400e6cc:	da003e15 	stw	r8,248(sp)
 400e6d0:	4015bb40 	call	4015bb4 <__fpclassifyd>
 400e6d4:	da003e17 	ldw	r8,248(sp)
 400e6d8:	1000bd1e 	bne	r2,zero,400e9d0 <___svfprintf_internal_r+0x1908>
 400e6dc:	008011c4 	movi	r2,71
 400e6e0:	14411e0e 	bge	r2,r17,400eb5c <___svfprintf_internal_r+0x1a94>
 400e6e4:	040100b4 	movhi	r16,1026
 400e6e8:	843fbe04 	addi	r16,r16,-264
 400e6ec:	00c000c4 	movi	r3,3
 400e6f0:	00bfdfc4 	movi	r2,-129
 400e6f4:	d8c02a15 	stw	r3,168(sp)
 400e6f8:	90a4703a 	and	r18,r18,r2
 400e6fc:	df002783 	ldbu	fp,158(sp)
 400e700:	d8c02e15 	stw	r3,184(sp)
 400e704:	d8002915 	stw	zero,164(sp)
 400e708:	d8003215 	stw	zero,200(sp)
 400e70c:	003c1c06 	br	400d780 <__alt_data_end+0xfc00d780>
 400e710:	9080100c 	andi	r2,r18,64
 400e714:	d8002785 	stb	zero,158(sp)
 400e718:	10009426 	beq	r2,zero,400e96c <___svfprintf_internal_r+0x18a4>
 400e71c:	d8c02d17 	ldw	r3,180(sp)
 400e720:	d9002917 	ldw	r4,164(sp)
 400e724:	002d883a 	mov	r22,zero
 400e728:	18800104 	addi	r2,r3,4
 400e72c:	1d00000b 	ldhu	r20,0(r3)
 400e730:	203ec10e 	bge	r4,zero,400e238 <__alt_data_end+0xfc00e238>
 400e734:	a586b03a 	or	r3,r20,r22
 400e738:	d8802d15 	stw	r2,180(sp)
 400e73c:	183ec21e 	bne	r3,zero,400e248 <__alt_data_end+0xfc00e248>
 400e740:	0039883a 	mov	fp,zero
 400e744:	0005883a 	mov	r2,zero
 400e748:	003db806 	br	400de2c <__alt_data_end+0xfc00de2c>
 400e74c:	d8802d17 	ldw	r2,180(sp)
 400e750:	d8c02d17 	ldw	r3,180(sp)
 400e754:	d9002d17 	ldw	r4,180(sp)
 400e758:	10800017 	ldw	r2,0(r2)
 400e75c:	18c00117 	ldw	r3,4(r3)
 400e760:	21000204 	addi	r4,r4,8
 400e764:	d8803615 	stw	r2,216(sp)
 400e768:	d8c03715 	stw	r3,220(sp)
 400e76c:	d9002d15 	stw	r4,180(sp)
 400e770:	003b8206 	br	400d57c <__alt_data_end+0xfc00d57c>
 400e774:	9080100c 	andi	r2,r18,64
 400e778:	10010726 	beq	r2,zero,400eb98 <___svfprintf_internal_r+0x1ad0>
 400e77c:	d8c02d17 	ldw	r3,180(sp)
 400e780:	1d00000f 	ldh	r20,0(r3)
 400e784:	18c00104 	addi	r3,r3,4
 400e788:	d8c02d15 	stw	r3,180(sp)
 400e78c:	a02dd7fa 	srai	r22,r20,31
 400e790:	b005883a 	mov	r2,r22
 400e794:	003ba206 	br	400d620 <__alt_data_end+0xfc00d620>
 400e798:	9080100c 	andi	r2,r18,64
 400e79c:	10010526 	beq	r2,zero,400ebb4 <___svfprintf_internal_r+0x1aec>
 400e7a0:	d9002d17 	ldw	r4,180(sp)
 400e7a4:	002d883a 	mov	r22,zero
 400e7a8:	2500000b 	ldhu	r20,0(r4)
 400e7ac:	21000104 	addi	r4,r4,4
 400e7b0:	d9002d15 	stw	r4,180(sp)
 400e7b4:	003cfe06 	br	400dbb0 <__alt_data_end+0xfc00dbb0>
 400e7b8:	bc400007 	ldb	r17,0(r23)
 400e7bc:	003a9606 	br	400d218 <__alt_data_end+0xfc00d218>
 400e7c0:	9080040c 	andi	r2,r18,16
 400e7c4:	10010126 	beq	r2,zero,400ebcc <___svfprintf_internal_r+0x1b04>
 400e7c8:	d9402d17 	ldw	r5,180(sp)
 400e7cc:	d8c02f17 	ldw	r3,188(sp)
 400e7d0:	28800017 	ldw	r2,0(r5)
 400e7d4:	29400104 	addi	r5,r5,4
 400e7d8:	d9402d15 	stw	r5,180(sp)
 400e7dc:	10c00015 	stw	r3,0(r2)
 400e7e0:	003a6406 	br	400d174 <__alt_data_end+0xfc00d174>
 400e7e4:	d9002917 	ldw	r4,164(sp)
 400e7e8:	d8002785 	stb	zero,158(sp)
 400e7ec:	203d8d16 	blt	r4,zero,400de24 <__alt_data_end+0xfc00de24>
 400e7f0:	00bfdfc4 	movi	r2,-129
 400e7f4:	90a4703a 	and	r18,r18,r2
 400e7f8:	003b0506 	br	400d410 <__alt_data_end+0xfc00d410>
 400e7fc:	014100b4 	movhi	r5,1026
 400e800:	297fcb84 	addi	r5,r5,-210
 400e804:	d9402b15 	stw	r5,172(sp)
 400e808:	d9402b17 	ldw	r5,172(sp)
 400e80c:	1c47883a 	add	r3,r3,r17
 400e810:	10800044 	addi	r2,r2,1
 400e814:	41400015 	stw	r5,0(r8)
 400e818:	44400115 	stw	r17,4(r8)
 400e81c:	d8c02015 	stw	r3,128(sp)
 400e820:	d8801f15 	stw	r2,124(sp)
 400e824:	010001c4 	movi	r4,7
 400e828:	20bf3016 	blt	r4,r2,400e4ec <__alt_data_end+0xfc00e4ec>
 400e82c:	42000204 	addi	r8,r8,8
 400e830:	003f3506 	br	400e508 <__alt_data_end+0xfc00e508>
 400e834:	010100b4 	movhi	r4,1026
 400e838:	213fcb84 	addi	r4,r4,-210
 400e83c:	d9002b15 	stw	r4,172(sp)
 400e840:	003c5e06 	br	400d9bc <__alt_data_end+0xfc00d9bc>
 400e844:	d9402c17 	ldw	r5,176(sp)
 400e848:	d9801e04 	addi	r6,sp,120
 400e84c:	9809883a 	mov	r4,r19
 400e850:	4015d640 	call	4015d64 <__ssprint_r>
 400e854:	103b011e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e858:	d8c02017 	ldw	r3,128(sp)
 400e85c:	da000404 	addi	r8,sp,16
 400e860:	003d9306 	br	400deb0 <__alt_data_end+0xfc00deb0>
 400e864:	d8801f17 	ldw	r2,124(sp)
 400e868:	014100b4 	movhi	r5,1026
 400e86c:	01000044 	movi	r4,1
 400e870:	18c00044 	addi	r3,r3,1
 400e874:	10800044 	addi	r2,r2,1
 400e878:	297fcb04 	addi	r5,r5,-212
 400e87c:	41000115 	stw	r4,4(r8)
 400e880:	41400015 	stw	r5,0(r8)
 400e884:	d8c02015 	stw	r3,128(sp)
 400e888:	d8801f15 	stw	r2,124(sp)
 400e88c:	010001c4 	movi	r4,7
 400e890:	2080b516 	blt	r4,r2,400eb68 <___svfprintf_internal_r+0x1aa0>
 400e894:	42000204 	addi	r8,r8,8
 400e898:	8800041e 	bne	r17,zero,400e8ac <___svfprintf_internal_r+0x17e4>
 400e89c:	d8803317 	ldw	r2,204(sp)
 400e8a0:	1000021e 	bne	r2,zero,400e8ac <___svfprintf_internal_r+0x17e4>
 400e8a4:	9080004c 	andi	r2,r18,1
 400e8a8:	103c5b26 	beq	r2,zero,400da18 <__alt_data_end+0xfc00da18>
 400e8ac:	d9003817 	ldw	r4,224(sp)
 400e8b0:	d8801f17 	ldw	r2,124(sp)
 400e8b4:	d9403417 	ldw	r5,208(sp)
 400e8b8:	20c7883a 	add	r3,r4,r3
 400e8bc:	10800044 	addi	r2,r2,1
 400e8c0:	41000115 	stw	r4,4(r8)
 400e8c4:	41400015 	stw	r5,0(r8)
 400e8c8:	d8c02015 	stw	r3,128(sp)
 400e8cc:	d8801f15 	stw	r2,124(sp)
 400e8d0:	010001c4 	movi	r4,7
 400e8d4:	20818016 	blt	r4,r2,400eed8 <___svfprintf_internal_r+0x1e10>
 400e8d8:	42000204 	addi	r8,r8,8
 400e8dc:	0463c83a 	sub	r17,zero,r17
 400e8e0:	0440cb0e 	bge	zero,r17,400ec10 <___svfprintf_internal_r+0x1b48>
 400e8e4:	05800404 	movi	r22,16
 400e8e8:	b440e80e 	bge	r22,r17,400ec8c <___svfprintf_internal_r+0x1bc4>
 400e8ec:	014100b4 	movhi	r5,1026
 400e8f0:	297fcb84 	addi	r5,r5,-210
 400e8f4:	d9402b15 	stw	r5,172(sp)
 400e8f8:	070001c4 	movi	fp,7
 400e8fc:	dd002c17 	ldw	r20,176(sp)
 400e900:	00000306 	br	400e910 <___svfprintf_internal_r+0x1848>
 400e904:	42000204 	addi	r8,r8,8
 400e908:	8c7ffc04 	addi	r17,r17,-16
 400e90c:	b440e20e 	bge	r22,r17,400ec98 <___svfprintf_internal_r+0x1bd0>
 400e910:	18c00404 	addi	r3,r3,16
 400e914:	10800044 	addi	r2,r2,1
 400e918:	45400015 	stw	r21,0(r8)
 400e91c:	45800115 	stw	r22,4(r8)
 400e920:	d8c02015 	stw	r3,128(sp)
 400e924:	d8801f15 	stw	r2,124(sp)
 400e928:	e0bff60e 	bge	fp,r2,400e904 <__alt_data_end+0xfc00e904>
 400e92c:	d9801e04 	addi	r6,sp,120
 400e930:	a00b883a 	mov	r5,r20
 400e934:	9809883a 	mov	r4,r19
 400e938:	4015d640 	call	4015d64 <__ssprint_r>
 400e93c:	103ac71e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e940:	d8c02017 	ldw	r3,128(sp)
 400e944:	d8801f17 	ldw	r2,124(sp)
 400e948:	da000404 	addi	r8,sp,16
 400e94c:	003fee06 	br	400e908 <__alt_data_end+0xfc00e908>
 400e950:	d8c02d17 	ldw	r3,180(sp)
 400e954:	d9002917 	ldw	r4,164(sp)
 400e958:	002d883a 	mov	r22,zero
 400e95c:	18800104 	addi	r2,r3,4
 400e960:	1d000017 	ldw	r20,0(r3)
 400e964:	203e7d0e 	bge	r4,zero,400e35c <__alt_data_end+0xfc00e35c>
 400e968:	003eda06 	br	400e4d4 <__alt_data_end+0xfc00e4d4>
 400e96c:	d9402d17 	ldw	r5,180(sp)
 400e970:	d8c02917 	ldw	r3,164(sp)
 400e974:	002d883a 	mov	r22,zero
 400e978:	28800104 	addi	r2,r5,4
 400e97c:	2d000017 	ldw	r20,0(r5)
 400e980:	183e2d0e 	bge	r3,zero,400e238 <__alt_data_end+0xfc00e238>
 400e984:	003f6b06 	br	400e734 <__alt_data_end+0xfc00e734>
 400e988:	d8c02d15 	stw	r3,180(sp)
 400e98c:	0039883a 	mov	fp,zero
 400e990:	003ed206 	br	400e4dc <__alt_data_end+0xfc00e4dc>
 400e994:	bc400043 	ldbu	r17,1(r23)
 400e998:	94800814 	ori	r18,r18,32
 400e99c:	bdc00044 	addi	r23,r23,1
 400e9a0:	8c403fcc 	andi	r17,r17,255
 400e9a4:	8c40201c 	xori	r17,r17,128
 400e9a8:	8c7fe004 	addi	r17,r17,-128
 400e9ac:	003a1a06 	br	400d218 <__alt_data_end+0xfc00d218>
 400e9b0:	d9402c17 	ldw	r5,176(sp)
 400e9b4:	d9801e04 	addi	r6,sp,120
 400e9b8:	9809883a 	mov	r4,r19
 400e9bc:	4015d640 	call	4015d64 <__ssprint_r>
 400e9c0:	103aa61e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400e9c4:	d8c02017 	ldw	r3,128(sp)
 400e9c8:	da000404 	addi	r8,sp,16
 400e9cc:	003d4a06 	br	400def8 <__alt_data_end+0xfc00def8>
 400e9d0:	d9002917 	ldw	r4,164(sp)
 400e9d4:	05bff7c4 	movi	r22,-33
 400e9d8:	00bfffc4 	movi	r2,-1
 400e9dc:	8dac703a 	and	r22,r17,r22
 400e9e0:	20806a26 	beq	r4,r2,400eb8c <___svfprintf_internal_r+0x1ac4>
 400e9e4:	008011c4 	movi	r2,71
 400e9e8:	b0813726 	beq	r22,r2,400eec8 <___svfprintf_internal_r+0x1e00>
 400e9ec:	d9003717 	ldw	r4,220(sp)
 400e9f0:	90c04014 	ori	r3,r18,256
 400e9f4:	d8c02b15 	stw	r3,172(sp)
 400e9f8:	20015d16 	blt	r4,zero,400ef70 <___svfprintf_internal_r+0x1ea8>
 400e9fc:	dd003717 	ldw	r20,220(sp)
 400ea00:	d8002a05 	stb	zero,168(sp)
 400ea04:	00801984 	movi	r2,102
 400ea08:	88814026 	beq	r17,r2,400ef0c <___svfprintf_internal_r+0x1e44>
 400ea0c:	00801184 	movi	r2,70
 400ea10:	88817126 	beq	r17,r2,400efd8 <___svfprintf_internal_r+0x1f10>
 400ea14:	00801144 	movi	r2,69
 400ea18:	b0816226 	beq	r22,r2,400efa4 <___svfprintf_internal_r+0x1edc>
 400ea1c:	d8c02917 	ldw	r3,164(sp)
 400ea20:	d8802104 	addi	r2,sp,132
 400ea24:	d8800315 	stw	r2,12(sp)
 400ea28:	d9403617 	ldw	r5,216(sp)
 400ea2c:	d8802504 	addi	r2,sp,148
 400ea30:	d8800215 	stw	r2,8(sp)
 400ea34:	d8802604 	addi	r2,sp,152
 400ea38:	d8c00015 	stw	r3,0(sp)
 400ea3c:	d8800115 	stw	r2,4(sp)
 400ea40:	01c00084 	movi	r7,2
 400ea44:	a00d883a 	mov	r6,r20
 400ea48:	9809883a 	mov	r4,r19
 400ea4c:	d8c03d15 	stw	r3,244(sp)
 400ea50:	da003e15 	stw	r8,248(sp)
 400ea54:	40118cc0 	call	40118cc <_dtoa_r>
 400ea58:	1021883a 	mov	r16,r2
 400ea5c:	008019c4 	movi	r2,103
 400ea60:	d8c03d17 	ldw	r3,244(sp)
 400ea64:	da003e17 	ldw	r8,248(sp)
 400ea68:	8880e726 	beq	r17,r2,400ee08 <___svfprintf_internal_r+0x1d40>
 400ea6c:	008011c4 	movi	r2,71
 400ea70:	8880d426 	beq	r17,r2,400edc4 <___svfprintf_internal_r+0x1cfc>
 400ea74:	80f9883a 	add	fp,r16,r3
 400ea78:	d9003617 	ldw	r4,216(sp)
 400ea7c:	000d883a 	mov	r6,zero
 400ea80:	000f883a 	mov	r7,zero
 400ea84:	a00b883a 	mov	r5,r20
 400ea88:	da003e15 	stw	r8,248(sp)
 400ea8c:	401ad300 	call	401ad30 <__eqdf2>
 400ea90:	da003e17 	ldw	r8,248(sp)
 400ea94:	1000e426 	beq	r2,zero,400ee28 <___svfprintf_internal_r+0x1d60>
 400ea98:	d8802117 	ldw	r2,132(sp)
 400ea9c:	1700062e 	bgeu	r2,fp,400eab8 <___svfprintf_internal_r+0x19f0>
 400eaa0:	01000c04 	movi	r4,48
 400eaa4:	10c00044 	addi	r3,r2,1
 400eaa8:	d8c02115 	stw	r3,132(sp)
 400eaac:	11000005 	stb	r4,0(r2)
 400eab0:	d8802117 	ldw	r2,132(sp)
 400eab4:	173ffb36 	bltu	r2,fp,400eaa4 <__alt_data_end+0xfc00eaa4>
 400eab8:	1405c83a 	sub	r2,r2,r16
 400eabc:	d8803315 	stw	r2,204(sp)
 400eac0:	008011c4 	movi	r2,71
 400eac4:	b080c526 	beq	r22,r2,400eddc <___svfprintf_internal_r+0x1d14>
 400eac8:	00801944 	movi	r2,101
 400eacc:	1441d90e 	bge	r2,r17,400f234 <___svfprintf_internal_r+0x216c>
 400ead0:	d8c02617 	ldw	r3,152(sp)
 400ead4:	00801984 	movi	r2,102
 400ead8:	d8c03215 	stw	r3,200(sp)
 400eadc:	88813426 	beq	r17,r2,400efb0 <___svfprintf_internal_r+0x1ee8>
 400eae0:	d8c03217 	ldw	r3,200(sp)
 400eae4:	d9003317 	ldw	r4,204(sp)
 400eae8:	19012516 	blt	r3,r4,400ef80 <___svfprintf_internal_r+0x1eb8>
 400eaec:	9480004c 	andi	r18,r18,1
 400eaf0:	9001841e 	bne	r18,zero,400f104 <___svfprintf_internal_r+0x203c>
 400eaf4:	1805883a 	mov	r2,r3
 400eaf8:	1801cc16 	blt	r3,zero,400f22c <___svfprintf_internal_r+0x2164>
 400eafc:	d8c03217 	ldw	r3,200(sp)
 400eb00:	044019c4 	movi	r17,103
 400eb04:	d8c02e15 	stw	r3,184(sp)
 400eb08:	df002a07 	ldb	fp,168(sp)
 400eb0c:	e000a61e 	bne	fp,zero,400eda8 <___svfprintf_internal_r+0x1ce0>
 400eb10:	df002783 	ldbu	fp,158(sp)
 400eb14:	d8802a15 	stw	r2,168(sp)
 400eb18:	dc802b17 	ldw	r18,172(sp)
 400eb1c:	d8002915 	stw	zero,164(sp)
 400eb20:	003b1706 	br	400d780 <__alt_data_end+0xfc00d780>
 400eb24:	040100b4 	movhi	r16,1026
 400eb28:	843fbb04 	addi	r16,r16,-276
 400eb2c:	003aa606 	br	400d5c8 <__alt_data_end+0xfc00d5c8>
 400eb30:	d9003917 	ldw	r4,228(sp)
 400eb34:	04001004 	movi	r16,64
 400eb38:	800b883a 	mov	r5,r16
 400eb3c:	400bee00 	call	400bee0 <_malloc_r>
 400eb40:	d9002c17 	ldw	r4,176(sp)
 400eb44:	20800015 	stw	r2,0(r4)
 400eb48:	20800415 	stw	r2,16(r4)
 400eb4c:	1001cb26 	beq	r2,zero,400f27c <___svfprintf_internal_r+0x21b4>
 400eb50:	d8802c17 	ldw	r2,176(sp)
 400eb54:	14000515 	stw	r16,20(r2)
 400eb58:	00397606 	br	400d134 <__alt_data_end+0xfc00d134>
 400eb5c:	040100b4 	movhi	r16,1026
 400eb60:	843fbd04 	addi	r16,r16,-268
 400eb64:	003ee106 	br	400e6ec <__alt_data_end+0xfc00e6ec>
 400eb68:	d9402c17 	ldw	r5,176(sp)
 400eb6c:	d9801e04 	addi	r6,sp,120
 400eb70:	9809883a 	mov	r4,r19
 400eb74:	4015d640 	call	4015d64 <__ssprint_r>
 400eb78:	103a381e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400eb7c:	dc402617 	ldw	r17,152(sp)
 400eb80:	d8c02017 	ldw	r3,128(sp)
 400eb84:	da000404 	addi	r8,sp,16
 400eb88:	003f4306 	br	400e898 <__alt_data_end+0xfc00e898>
 400eb8c:	01400184 	movi	r5,6
 400eb90:	d9402915 	stw	r5,164(sp)
 400eb94:	003f9506 	br	400e9ec <__alt_data_end+0xfc00e9ec>
 400eb98:	d9002d17 	ldw	r4,180(sp)
 400eb9c:	25000017 	ldw	r20,0(r4)
 400eba0:	21000104 	addi	r4,r4,4
 400eba4:	d9002d15 	stw	r4,180(sp)
 400eba8:	a02dd7fa 	srai	r22,r20,31
 400ebac:	b005883a 	mov	r2,r22
 400ebb0:	003a9b06 	br	400d620 <__alt_data_end+0xfc00d620>
 400ebb4:	d9402d17 	ldw	r5,180(sp)
 400ebb8:	002d883a 	mov	r22,zero
 400ebbc:	2d000017 	ldw	r20,0(r5)
 400ebc0:	29400104 	addi	r5,r5,4
 400ebc4:	d9402d15 	stw	r5,180(sp)
 400ebc8:	003bf906 	br	400dbb0 <__alt_data_end+0xfc00dbb0>
 400ebcc:	9480100c 	andi	r18,r18,64
 400ebd0:	90006e26 	beq	r18,zero,400ed8c <___svfprintf_internal_r+0x1cc4>
 400ebd4:	d9002d17 	ldw	r4,180(sp)
 400ebd8:	d9402f17 	ldw	r5,188(sp)
 400ebdc:	20800017 	ldw	r2,0(r4)
 400ebe0:	21000104 	addi	r4,r4,4
 400ebe4:	d9002d15 	stw	r4,180(sp)
 400ebe8:	1140000d 	sth	r5,0(r2)
 400ebec:	00396106 	br	400d174 <__alt_data_end+0xfc00d174>
 400ebf0:	d9402c17 	ldw	r5,176(sp)
 400ebf4:	d9801e04 	addi	r6,sp,120
 400ebf8:	9809883a 	mov	r4,r19
 400ebfc:	4015d640 	call	4015d64 <__ssprint_r>
 400ec00:	103a161e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400ec04:	d8c02017 	ldw	r3,128(sp)
 400ec08:	d8801f17 	ldw	r2,124(sp)
 400ec0c:	da000404 	addi	r8,sp,16
 400ec10:	d9403317 	ldw	r5,204(sp)
 400ec14:	10800044 	addi	r2,r2,1
 400ec18:	44000015 	stw	r16,0(r8)
 400ec1c:	28c7883a 	add	r3,r5,r3
 400ec20:	003b7706 	br	400da00 <__alt_data_end+0xfc00da00>
 400ec24:	8009883a 	mov	r4,r16
 400ec28:	da003e15 	stw	r8,248(sp)
 400ec2c:	400d0300 	call	400d030 <strlen>
 400ec30:	d8802e15 	stw	r2,184(sp)
 400ec34:	da003e17 	ldw	r8,248(sp)
 400ec38:	103c280e 	bge	r2,zero,400dcdc <__alt_data_end+0xfc00dcdc>
 400ec3c:	0005883a 	mov	r2,zero
 400ec40:	003c2606 	br	400dcdc <__alt_data_end+0xfc00dcdc>
 400ec44:	00bfffc4 	movi	r2,-1
 400ec48:	003a0906 	br	400d470 <__alt_data_end+0xfc00d470>
 400ec4c:	010100b4 	movhi	r4,1026
 400ec50:	213fcf84 	addi	r4,r4,-194
 400ec54:	d9003515 	stw	r4,212(sp)
 400ec58:	003b0606 	br	400d874 <__alt_data_end+0xfc00d874>
 400ec5c:	013fffc4 	movi	r4,-1
 400ec60:	003a2706 	br	400d500 <__alt_data_end+0xfc00d500>
 400ec64:	d9402c17 	ldw	r5,176(sp)
 400ec68:	d9801e04 	addi	r6,sp,120
 400ec6c:	9809883a 	mov	r4,r19
 400ec70:	4015d640 	call	4015d64 <__ssprint_r>
 400ec74:	1039f91e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400ec78:	d8c02017 	ldw	r3,128(sp)
 400ec7c:	da000404 	addi	r8,sp,16
 400ec80:	003d8406 	br	400e294 <__alt_data_end+0xfc00e294>
 400ec84:	0023883a 	mov	r17,zero
 400ec88:	003d8306 	br	400e298 <__alt_data_end+0xfc00e298>
 400ec8c:	010100b4 	movhi	r4,1026
 400ec90:	213fcb84 	addi	r4,r4,-210
 400ec94:	d9002b15 	stw	r4,172(sp)
 400ec98:	d9002b17 	ldw	r4,172(sp)
 400ec9c:	1c47883a 	add	r3,r3,r17
 400eca0:	10800044 	addi	r2,r2,1
 400eca4:	41000015 	stw	r4,0(r8)
 400eca8:	44400115 	stw	r17,4(r8)
 400ecac:	d8c02015 	stw	r3,128(sp)
 400ecb0:	d8801f15 	stw	r2,124(sp)
 400ecb4:	010001c4 	movi	r4,7
 400ecb8:	20bfcd16 	blt	r4,r2,400ebf0 <__alt_data_end+0xfc00ebf0>
 400ecbc:	42000204 	addi	r8,r8,8
 400ecc0:	003fd306 	br	400ec10 <__alt_data_end+0xfc00ec10>
 400ecc4:	d9402c17 	ldw	r5,176(sp)
 400ecc8:	d9801e04 	addi	r6,sp,120
 400eccc:	9809883a 	mov	r4,r19
 400ecd0:	4015d640 	call	4015d64 <__ssprint_r>
 400ecd4:	1039e11e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400ecd8:	d8802617 	ldw	r2,152(sp)
 400ecdc:	d8c02017 	ldw	r3,128(sp)
 400ece0:	da000404 	addi	r8,sp,16
 400ece4:	003e1c06 	br	400e558 <__alt_data_end+0xfc00e558>
 400ece8:	d8802917 	ldw	r2,164(sp)
 400ecec:	00c00184 	movi	r3,6
 400ecf0:	1880012e 	bgeu	r3,r2,400ecf8 <___svfprintf_internal_r+0x1c30>
 400ecf4:	1805883a 	mov	r2,r3
 400ecf8:	d8802e15 	stw	r2,184(sp)
 400ecfc:	1000f316 	blt	r2,zero,400f0cc <___svfprintf_internal_r+0x2004>
 400ed00:	040100b4 	movhi	r16,1026
 400ed04:	d8802a15 	stw	r2,168(sp)
 400ed08:	dd002d15 	stw	r20,180(sp)
 400ed0c:	d8002915 	stw	zero,164(sp)
 400ed10:	d8003215 	stw	zero,200(sp)
 400ed14:	843fc904 	addi	r16,r16,-220
 400ed18:	0039883a 	mov	fp,zero
 400ed1c:	003a9f06 	br	400d79c <__alt_data_end+0xfc00d79c>
 400ed20:	010100b4 	movhi	r4,1026
 400ed24:	213fcf84 	addi	r4,r4,-194
 400ed28:	d9003515 	stw	r4,212(sp)
 400ed2c:	003b5f06 	br	400daac <__alt_data_end+0xfc00daac>
 400ed30:	d9402c17 	ldw	r5,176(sp)
 400ed34:	d9801e04 	addi	r6,sp,120
 400ed38:	9809883a 	mov	r4,r19
 400ed3c:	4015d640 	call	4015d64 <__ssprint_r>
 400ed40:	1039c61e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400ed44:	d8802617 	ldw	r2,152(sp)
 400ed48:	d9403317 	ldw	r5,204(sp)
 400ed4c:	d8c02017 	ldw	r3,128(sp)
 400ed50:	da000404 	addi	r8,sp,16
 400ed54:	2885c83a 	sub	r2,r5,r2
 400ed58:	003e1006 	br	400e59c <__alt_data_end+0xfc00e59c>
 400ed5c:	00800044 	movi	r2,1
 400ed60:	10803fcc 	andi	r2,r2,255
 400ed64:	00c00044 	movi	r3,1
 400ed68:	10fa3526 	beq	r2,r3,400d640 <__alt_data_end+0xfc00d640>
 400ed6c:	00c00084 	movi	r3,2
 400ed70:	10fb9e26 	beq	r2,r3,400dbec <__alt_data_end+0xfc00dbec>
 400ed74:	003a6406 	br	400d708 <__alt_data_end+0xfc00d708>
 400ed78:	0021883a 	mov	r16,zero
 400ed7c:	003e0806 	br	400e5a0 <__alt_data_end+0xfc00e5a0>
 400ed80:	07000b44 	movi	fp,45
 400ed84:	df002785 	stb	fp,158(sp)
 400ed88:	003a0b06 	br	400d5b8 <__alt_data_end+0xfc00d5b8>
 400ed8c:	d8c02d17 	ldw	r3,180(sp)
 400ed90:	d9002f17 	ldw	r4,188(sp)
 400ed94:	18800017 	ldw	r2,0(r3)
 400ed98:	18c00104 	addi	r3,r3,4
 400ed9c:	d8c02d15 	stw	r3,180(sp)
 400eda0:	11000015 	stw	r4,0(r2)
 400eda4:	0038f306 	br	400d174 <__alt_data_end+0xfc00d174>
 400eda8:	00c00b44 	movi	r3,45
 400edac:	d8c02785 	stb	r3,158(sp)
 400edb0:	d8802a15 	stw	r2,168(sp)
 400edb4:	dc802b17 	ldw	r18,172(sp)
 400edb8:	d8002915 	stw	zero,164(sp)
 400edbc:	07000b44 	movi	fp,45
 400edc0:	003a7306 	br	400d790 <__alt_data_end+0xfc00d790>
 400edc4:	9080004c 	andi	r2,r18,1
 400edc8:	1000941e 	bne	r2,zero,400f01c <___svfprintf_internal_r+0x1f54>
 400edcc:	d8802117 	ldw	r2,132(sp)
 400edd0:	1405c83a 	sub	r2,r2,r16
 400edd4:	d8803315 	stw	r2,204(sp)
 400edd8:	b441161e 	bne	r22,r17,400f234 <___svfprintf_internal_r+0x216c>
 400eddc:	dd802617 	ldw	r22,152(sp)
 400ede0:	00bfff44 	movi	r2,-3
 400ede4:	b0801a16 	blt	r22,r2,400ee50 <___svfprintf_internal_r+0x1d88>
 400ede8:	d9402917 	ldw	r5,164(sp)
 400edec:	2d801816 	blt	r5,r22,400ee50 <___svfprintf_internal_r+0x1d88>
 400edf0:	dd803215 	stw	r22,200(sp)
 400edf4:	003f3a06 	br	400eae0 <__alt_data_end+0xfc00eae0>
 400edf8:	1025883a 	mov	r18,r2
 400edfc:	0039883a 	mov	fp,zero
 400ee00:	00800084 	movi	r2,2
 400ee04:	003fd606 	br	400ed60 <__alt_data_end+0xfc00ed60>
 400ee08:	9080004c 	andi	r2,r18,1
 400ee0c:	103f191e 	bne	r2,zero,400ea74 <__alt_data_end+0xfc00ea74>
 400ee10:	d8802117 	ldw	r2,132(sp)
 400ee14:	003f2806 	br	400eab8 <__alt_data_end+0xfc00eab8>
 400ee18:	010100b4 	movhi	r4,1026
 400ee1c:	213fcb84 	addi	r4,r4,-210
 400ee20:	d9002b15 	stw	r4,172(sp)
 400ee24:	003c7c06 	br	400e018 <__alt_data_end+0xfc00e018>
 400ee28:	e005883a 	mov	r2,fp
 400ee2c:	003f2206 	br	400eab8 <__alt_data_end+0xfc00eab8>
 400ee30:	d9402917 	ldw	r5,164(sp)
 400ee34:	df002783 	ldbu	fp,158(sp)
 400ee38:	dd002d15 	stw	r20,180(sp)
 400ee3c:	d9402a15 	stw	r5,168(sp)
 400ee40:	d9402e15 	stw	r5,184(sp)
 400ee44:	d8002915 	stw	zero,164(sp)
 400ee48:	d8003215 	stw	zero,200(sp)
 400ee4c:	003a4c06 	br	400d780 <__alt_data_end+0xfc00d780>
 400ee50:	8c7fff84 	addi	r17,r17,-2
 400ee54:	b5bfffc4 	addi	r22,r22,-1
 400ee58:	dd802615 	stw	r22,152(sp)
 400ee5c:	dc4022c5 	stb	r17,139(sp)
 400ee60:	b000c316 	blt	r22,zero,400f170 <___svfprintf_internal_r+0x20a8>
 400ee64:	00800ac4 	movi	r2,43
 400ee68:	d8802305 	stb	r2,140(sp)
 400ee6c:	00800244 	movi	r2,9
 400ee70:	15806e16 	blt	r2,r22,400f02c <___svfprintf_internal_r+0x1f64>
 400ee74:	00800c04 	movi	r2,48
 400ee78:	b5800c04 	addi	r22,r22,48
 400ee7c:	d8802345 	stb	r2,141(sp)
 400ee80:	dd802385 	stb	r22,142(sp)
 400ee84:	d88023c4 	addi	r2,sp,143
 400ee88:	df0022c4 	addi	fp,sp,139
 400ee8c:	d8c03317 	ldw	r3,204(sp)
 400ee90:	1739c83a 	sub	fp,r2,fp
 400ee94:	d9003317 	ldw	r4,204(sp)
 400ee98:	e0c7883a 	add	r3,fp,r3
 400ee9c:	df003b15 	stw	fp,236(sp)
 400eea0:	d8c02e15 	stw	r3,184(sp)
 400eea4:	00800044 	movi	r2,1
 400eea8:	1100b70e 	bge	r2,r4,400f188 <___svfprintf_internal_r+0x20c0>
 400eeac:	d8c02e17 	ldw	r3,184(sp)
 400eeb0:	18c00044 	addi	r3,r3,1
 400eeb4:	d8c02e15 	stw	r3,184(sp)
 400eeb8:	1805883a 	mov	r2,r3
 400eebc:	1800b016 	blt	r3,zero,400f180 <___svfprintf_internal_r+0x20b8>
 400eec0:	d8003215 	stw	zero,200(sp)
 400eec4:	003f1006 	br	400eb08 <__alt_data_end+0xfc00eb08>
 400eec8:	d8802917 	ldw	r2,164(sp)
 400eecc:	103ec71e 	bne	r2,zero,400e9ec <__alt_data_end+0xfc00e9ec>
 400eed0:	dc002915 	stw	r16,164(sp)
 400eed4:	003ec506 	br	400e9ec <__alt_data_end+0xfc00e9ec>
 400eed8:	d9402c17 	ldw	r5,176(sp)
 400eedc:	d9801e04 	addi	r6,sp,120
 400eee0:	9809883a 	mov	r4,r19
 400eee4:	4015d640 	call	4015d64 <__ssprint_r>
 400eee8:	10395c1e 	bne	r2,zero,400d45c <__alt_data_end+0xfc00d45c>
 400eeec:	dc402617 	ldw	r17,152(sp)
 400eef0:	d8c02017 	ldw	r3,128(sp)
 400eef4:	d8801f17 	ldw	r2,124(sp)
 400eef8:	da000404 	addi	r8,sp,16
 400eefc:	003e7706 	br	400e8dc <__alt_data_end+0xfc00e8dc>
 400ef00:	582f883a 	mov	r23,r11
 400ef04:	d8002915 	stw	zero,164(sp)
 400ef08:	0038c406 	br	400d21c <__alt_data_end+0xfc00d21c>
 400ef0c:	d8c02917 	ldw	r3,164(sp)
 400ef10:	d8802104 	addi	r2,sp,132
 400ef14:	d8800315 	stw	r2,12(sp)
 400ef18:	d9403617 	ldw	r5,216(sp)
 400ef1c:	d8802504 	addi	r2,sp,148
 400ef20:	d8800215 	stw	r2,8(sp)
 400ef24:	d8802604 	addi	r2,sp,152
 400ef28:	d8c00015 	stw	r3,0(sp)
 400ef2c:	9809883a 	mov	r4,r19
 400ef30:	d8800115 	stw	r2,4(sp)
 400ef34:	01c000c4 	movi	r7,3
 400ef38:	a00d883a 	mov	r6,r20
 400ef3c:	da003e15 	stw	r8,248(sp)
 400ef40:	40118cc0 	call	40118cc <_dtoa_r>
 400ef44:	d9002917 	ldw	r4,164(sp)
 400ef48:	da003e17 	ldw	r8,248(sp)
 400ef4c:	1021883a 	mov	r16,r2
 400ef50:	1139883a 	add	fp,r2,r4
 400ef54:	2007883a 	mov	r3,r4
 400ef58:	81000007 	ldb	r4,0(r16)
 400ef5c:	00800c04 	movi	r2,48
 400ef60:	20806f26 	beq	r4,r2,400f120 <___svfprintf_internal_r+0x2058>
 400ef64:	d8c02617 	ldw	r3,152(sp)
 400ef68:	e0f9883a 	add	fp,fp,r3
 400ef6c:	003ec206 	br	400ea78 <__alt_data_end+0xfc00ea78>
 400ef70:	00c00b44 	movi	r3,45
 400ef74:	2520003c 	xorhi	r20,r4,32768
 400ef78:	d8c02a05 	stb	r3,168(sp)
 400ef7c:	003ea106 	br	400ea04 <__alt_data_end+0xfc00ea04>
 400ef80:	d8c03217 	ldw	r3,200(sp)
 400ef84:	00c0890e 	bge	zero,r3,400f1ac <___svfprintf_internal_r+0x20e4>
 400ef88:	00800044 	movi	r2,1
 400ef8c:	d9003317 	ldw	r4,204(sp)
 400ef90:	1105883a 	add	r2,r2,r4
 400ef94:	d8802e15 	stw	r2,184(sp)
 400ef98:	10005f16 	blt	r2,zero,400f118 <___svfprintf_internal_r+0x2050>
 400ef9c:	044019c4 	movi	r17,103
 400efa0:	003ed906 	br	400eb08 <__alt_data_end+0xfc00eb08>
 400efa4:	d9002917 	ldw	r4,164(sp)
 400efa8:	20c00044 	addi	r3,r4,1
 400efac:	003e9c06 	br	400ea20 <__alt_data_end+0xfc00ea20>
 400efb0:	d9002917 	ldw	r4,164(sp)
 400efb4:	00c0680e 	bge	zero,r3,400f158 <___svfprintf_internal_r+0x2090>
 400efb8:	2000461e 	bne	r4,zero,400f0d4 <___svfprintf_internal_r+0x200c>
 400efbc:	9480004c 	andi	r18,r18,1
 400efc0:	9000441e 	bne	r18,zero,400f0d4 <___svfprintf_internal_r+0x200c>
 400efc4:	1805883a 	mov	r2,r3
 400efc8:	1800a016 	blt	r3,zero,400f24c <___svfprintf_internal_r+0x2184>
 400efcc:	d8c03217 	ldw	r3,200(sp)
 400efd0:	d8c02e15 	stw	r3,184(sp)
 400efd4:	003ecc06 	br	400eb08 <__alt_data_end+0xfc00eb08>
 400efd8:	d9402917 	ldw	r5,164(sp)
 400efdc:	d8802104 	addi	r2,sp,132
 400efe0:	d8800315 	stw	r2,12(sp)
 400efe4:	d9400015 	stw	r5,0(sp)
 400efe8:	d8802504 	addi	r2,sp,148
 400efec:	d9403617 	ldw	r5,216(sp)
 400eff0:	d8800215 	stw	r2,8(sp)
 400eff4:	d8802604 	addi	r2,sp,152
 400eff8:	d8800115 	stw	r2,4(sp)
 400effc:	01c000c4 	movi	r7,3
 400f000:	a00d883a 	mov	r6,r20
 400f004:	9809883a 	mov	r4,r19
 400f008:	da003e15 	stw	r8,248(sp)
 400f00c:	40118cc0 	call	40118cc <_dtoa_r>
 400f010:	d8c02917 	ldw	r3,164(sp)
 400f014:	da003e17 	ldw	r8,248(sp)
 400f018:	1021883a 	mov	r16,r2
 400f01c:	00801184 	movi	r2,70
 400f020:	80f9883a 	add	fp,r16,r3
 400f024:	88bfcc26 	beq	r17,r2,400ef58 <__alt_data_end+0xfc00ef58>
 400f028:	003e9306 	br	400ea78 <__alt_data_end+0xfc00ea78>
 400f02c:	df0022c4 	addi	fp,sp,139
 400f030:	dc002915 	stw	r16,164(sp)
 400f034:	9829883a 	mov	r20,r19
 400f038:	e021883a 	mov	r16,fp
 400f03c:	4027883a 	mov	r19,r8
 400f040:	b009883a 	mov	r4,r22
 400f044:	01400284 	movi	r5,10
 400f048:	400b8040 	call	400b804 <__modsi3>
 400f04c:	10800c04 	addi	r2,r2,48
 400f050:	843fffc4 	addi	r16,r16,-1
 400f054:	b009883a 	mov	r4,r22
 400f058:	01400284 	movi	r5,10
 400f05c:	80800005 	stb	r2,0(r16)
 400f060:	400b7800 	call	400b780 <__divsi3>
 400f064:	102d883a 	mov	r22,r2
 400f068:	00800244 	movi	r2,9
 400f06c:	15bff416 	blt	r2,r22,400f040 <__alt_data_end+0xfc00f040>
 400f070:	9811883a 	mov	r8,r19
 400f074:	b0800c04 	addi	r2,r22,48
 400f078:	a027883a 	mov	r19,r20
 400f07c:	8029883a 	mov	r20,r16
 400f080:	a17fffc4 	addi	r5,r20,-1
 400f084:	a0bfffc5 	stb	r2,-1(r20)
 400f088:	dc002917 	ldw	r16,164(sp)
 400f08c:	2f00752e 	bgeu	r5,fp,400f264 <___svfprintf_internal_r+0x219c>
 400f090:	d9c02384 	addi	r7,sp,142
 400f094:	3d0fc83a 	sub	r7,r7,r20
 400f098:	d9002344 	addi	r4,sp,141
 400f09c:	e1cf883a 	add	r7,fp,r7
 400f0a0:	00000106 	br	400f0a8 <___svfprintf_internal_r+0x1fe0>
 400f0a4:	28800003 	ldbu	r2,0(r5)
 400f0a8:	20800005 	stb	r2,0(r4)
 400f0ac:	21000044 	addi	r4,r4,1
 400f0b0:	29400044 	addi	r5,r5,1
 400f0b4:	21fffb1e 	bne	r4,r7,400f0a4 <__alt_data_end+0xfc00f0a4>
 400f0b8:	d8802304 	addi	r2,sp,140
 400f0bc:	1505c83a 	sub	r2,r2,r20
 400f0c0:	d8c02344 	addi	r3,sp,141
 400f0c4:	1885883a 	add	r2,r3,r2
 400f0c8:	003f7006 	br	400ee8c <__alt_data_end+0xfc00ee8c>
 400f0cc:	0005883a 	mov	r2,zero
 400f0d0:	003f0b06 	br	400ed00 <__alt_data_end+0xfc00ed00>
 400f0d4:	d9002917 	ldw	r4,164(sp)
 400f0d8:	d8c03217 	ldw	r3,200(sp)
 400f0dc:	20800044 	addi	r2,r4,1
 400f0e0:	1885883a 	add	r2,r3,r2
 400f0e4:	d8802e15 	stw	r2,184(sp)
 400f0e8:	103e870e 	bge	r2,zero,400eb08 <__alt_data_end+0xfc00eb08>
 400f0ec:	0005883a 	mov	r2,zero
 400f0f0:	003e8506 	br	400eb08 <__alt_data_end+0xfc00eb08>
 400f0f4:	010100b4 	movhi	r4,1026
 400f0f8:	213fcb84 	addi	r4,r4,-210
 400f0fc:	d9002b15 	stw	r4,172(sp)
 400f100:	003cc506 	br	400e418 <__alt_data_end+0xfc00e418>
 400f104:	d8c03217 	ldw	r3,200(sp)
 400f108:	18c00044 	addi	r3,r3,1
 400f10c:	d8c02e15 	stw	r3,184(sp)
 400f110:	1805883a 	mov	r2,r3
 400f114:	183fa10e 	bge	r3,zero,400ef9c <__alt_data_end+0xfc00ef9c>
 400f118:	0005883a 	mov	r2,zero
 400f11c:	003f9f06 	br	400ef9c <__alt_data_end+0xfc00ef9c>
 400f120:	d9003617 	ldw	r4,216(sp)
 400f124:	000d883a 	mov	r6,zero
 400f128:	000f883a 	mov	r7,zero
 400f12c:	a00b883a 	mov	r5,r20
 400f130:	d8c03d15 	stw	r3,244(sp)
 400f134:	da003e15 	stw	r8,248(sp)
 400f138:	401ad300 	call	401ad30 <__eqdf2>
 400f13c:	d8c03d17 	ldw	r3,244(sp)
 400f140:	da003e17 	ldw	r8,248(sp)
 400f144:	103f8726 	beq	r2,zero,400ef64 <__alt_data_end+0xfc00ef64>
 400f148:	00800044 	movi	r2,1
 400f14c:	10c7c83a 	sub	r3,r2,r3
 400f150:	d8c02615 	stw	r3,152(sp)
 400f154:	003f8406 	br	400ef68 <__alt_data_end+0xfc00ef68>
 400f158:	20000e1e 	bne	r4,zero,400f194 <___svfprintf_internal_r+0x20cc>
 400f15c:	9480004c 	andi	r18,r18,1
 400f160:	90000c1e 	bne	r18,zero,400f194 <___svfprintf_internal_r+0x20cc>
 400f164:	00800044 	movi	r2,1
 400f168:	d8802e15 	stw	r2,184(sp)
 400f16c:	003e6606 	br	400eb08 <__alt_data_end+0xfc00eb08>
 400f170:	00800b44 	movi	r2,45
 400f174:	05adc83a 	sub	r22,zero,r22
 400f178:	d8802305 	stb	r2,140(sp)
 400f17c:	003f3b06 	br	400ee6c <__alt_data_end+0xfc00ee6c>
 400f180:	0005883a 	mov	r2,zero
 400f184:	003f4e06 	br	400eec0 <__alt_data_end+0xfc00eec0>
 400f188:	90a4703a 	and	r18,r18,r2
 400f18c:	903f4a26 	beq	r18,zero,400eeb8 <__alt_data_end+0xfc00eeb8>
 400f190:	003f4606 	br	400eeac <__alt_data_end+0xfc00eeac>
 400f194:	d8c02917 	ldw	r3,164(sp)
 400f198:	18c00084 	addi	r3,r3,2
 400f19c:	d8c02e15 	stw	r3,184(sp)
 400f1a0:	1805883a 	mov	r2,r3
 400f1a4:	183e580e 	bge	r3,zero,400eb08 <__alt_data_end+0xfc00eb08>
 400f1a8:	003fd006 	br	400f0ec <__alt_data_end+0xfc00f0ec>
 400f1ac:	00800084 	movi	r2,2
 400f1b0:	10c5c83a 	sub	r2,r2,r3
 400f1b4:	003f7506 	br	400ef8c <__alt_data_end+0xfc00ef8c>
 400f1b8:	d8802d17 	ldw	r2,180(sp)
 400f1bc:	d9002d17 	ldw	r4,180(sp)
 400f1c0:	bc400043 	ldbu	r17,1(r23)
 400f1c4:	10800017 	ldw	r2,0(r2)
 400f1c8:	582f883a 	mov	r23,r11
 400f1cc:	d8802915 	stw	r2,164(sp)
 400f1d0:	20800104 	addi	r2,r4,4
 400f1d4:	d9002917 	ldw	r4,164(sp)
 400f1d8:	d8802d15 	stw	r2,180(sp)
 400f1dc:	203df00e 	bge	r4,zero,400e9a0 <__alt_data_end+0xfc00e9a0>
 400f1e0:	8c403fcc 	andi	r17,r17,255
 400f1e4:	00bfffc4 	movi	r2,-1
 400f1e8:	8c40201c 	xori	r17,r17,128
 400f1ec:	d8802915 	stw	r2,164(sp)
 400f1f0:	8c7fe004 	addi	r17,r17,-128
 400f1f4:	00380806 	br	400d218 <__alt_data_end+0xfc00d218>
 400f1f8:	9080004c 	andi	r2,r18,1
 400f1fc:	0039883a 	mov	fp,zero
 400f200:	10000726 	beq	r2,zero,400f220 <___svfprintf_internal_r+0x2158>
 400f204:	d8c02817 	ldw	r3,160(sp)
 400f208:	dc001dc4 	addi	r16,sp,119
 400f20c:	00800c04 	movi	r2,48
 400f210:	1c07c83a 	sub	r3,r3,r16
 400f214:	d8801dc5 	stb	r2,119(sp)
 400f218:	d8c02e15 	stw	r3,184(sp)
 400f21c:	00395206 	br	400d768 <__alt_data_end+0xfc00d768>
 400f220:	d8002e15 	stw	zero,184(sp)
 400f224:	dc001e04 	addi	r16,sp,120
 400f228:	00394f06 	br	400d768 <__alt_data_end+0xfc00d768>
 400f22c:	0005883a 	mov	r2,zero
 400f230:	003e3206 	br	400eafc <__alt_data_end+0xfc00eafc>
 400f234:	dd802617 	ldw	r22,152(sp)
 400f238:	003f0606 	br	400ee54 <__alt_data_end+0xfc00ee54>
 400f23c:	d9c02785 	stb	r7,158(sp)
 400f240:	003a5106 	br	400db88 <__alt_data_end+0xfc00db88>
 400f244:	d9c02785 	stb	r7,158(sp)
 400f248:	003a3706 	br	400db28 <__alt_data_end+0xfc00db28>
 400f24c:	0005883a 	mov	r2,zero
 400f250:	003f5e06 	br	400efcc <__alt_data_end+0xfc00efcc>
 400f254:	d9c02785 	stb	r7,158(sp)
 400f258:	00391706 	br	400d6b8 <__alt_data_end+0xfc00d6b8>
 400f25c:	d9c02785 	stb	r7,158(sp)
 400f260:	0038e606 	br	400d5fc <__alt_data_end+0xfc00d5fc>
 400f264:	d8802344 	addi	r2,sp,141
 400f268:	003f0806 	br	400ee8c <__alt_data_end+0xfc00ee8c>
 400f26c:	d9c02785 	stb	r7,158(sp)
 400f270:	0038b706 	br	400d550 <__alt_data_end+0xfc00d550>
 400f274:	d9c02785 	stb	r7,158(sp)
 400f278:	003adc06 	br	400ddec <__alt_data_end+0xfc00ddec>
 400f27c:	d9403917 	ldw	r5,228(sp)
 400f280:	00800304 	movi	r2,12
 400f284:	28800015 	stw	r2,0(r5)
 400f288:	00bfffc4 	movi	r2,-1
 400f28c:	00387806 	br	400d470 <__alt_data_end+0xfc00d470>
 400f290:	d9c02785 	stb	r7,158(sp)
 400f294:	003abf06 	br	400dd94 <__alt_data_end+0xfc00dd94>
 400f298:	d9c02785 	stb	r7,158(sp)
 400f29c:	003a9b06 	br	400dd0c <__alt_data_end+0xfc00dd0c>

0400f2a0 <_times_r>:
 400f2a0:	2809883a 	mov	r4,r5
 400f2a4:	401cc101 	jmpi	401cc10 <times>

0400f2a8 <___vfprintf_internal_r>:
 400f2a8:	deffb804 	addi	sp,sp,-288
 400f2ac:	dfc04715 	stw	ra,284(sp)
 400f2b0:	ddc04515 	stw	r23,276(sp)
 400f2b4:	dd404315 	stw	r21,268(sp)
 400f2b8:	d9002c15 	stw	r4,176(sp)
 400f2bc:	282f883a 	mov	r23,r5
 400f2c0:	302b883a 	mov	r21,r6
 400f2c4:	d9c02d15 	stw	r7,180(sp)
 400f2c8:	df004615 	stw	fp,280(sp)
 400f2cc:	dd804415 	stw	r22,272(sp)
 400f2d0:	dd004215 	stw	r20,264(sp)
 400f2d4:	dcc04115 	stw	r19,260(sp)
 400f2d8:	dc804015 	stw	r18,256(sp)
 400f2dc:	dc403f15 	stw	r17,252(sp)
 400f2e0:	dc003e15 	stw	r16,248(sp)
 400f2e4:	40140c00 	call	40140c0 <_localeconv_r>
 400f2e8:	10800017 	ldw	r2,0(r2)
 400f2ec:	1009883a 	mov	r4,r2
 400f2f0:	d8803415 	stw	r2,208(sp)
 400f2f4:	400d0300 	call	400d030 <strlen>
 400f2f8:	d8803715 	stw	r2,220(sp)
 400f2fc:	d8802c17 	ldw	r2,176(sp)
 400f300:	10000226 	beq	r2,zero,400f30c <___vfprintf_internal_r+0x64>
 400f304:	10800e17 	ldw	r2,56(r2)
 400f308:	1000f926 	beq	r2,zero,400f6f0 <___vfprintf_internal_r+0x448>
 400f30c:	b880030b 	ldhu	r2,12(r23)
 400f310:	10c8000c 	andi	r3,r2,8192
 400f314:	1800061e 	bne	r3,zero,400f330 <___vfprintf_internal_r+0x88>
 400f318:	b9001917 	ldw	r4,100(r23)
 400f31c:	00f7ffc4 	movi	r3,-8193
 400f320:	10880014 	ori	r2,r2,8192
 400f324:	20c6703a 	and	r3,r4,r3
 400f328:	b880030d 	sth	r2,12(r23)
 400f32c:	b8c01915 	stw	r3,100(r23)
 400f330:	10c0020c 	andi	r3,r2,8
 400f334:	1800c126 	beq	r3,zero,400f63c <___vfprintf_internal_r+0x394>
 400f338:	b8c00417 	ldw	r3,16(r23)
 400f33c:	1800bf26 	beq	r3,zero,400f63c <___vfprintf_internal_r+0x394>
 400f340:	1080068c 	andi	r2,r2,26
 400f344:	00c00284 	movi	r3,10
 400f348:	10c0c426 	beq	r2,r3,400f65c <___vfprintf_internal_r+0x3b4>
 400f34c:	d8c00404 	addi	r3,sp,16
 400f350:	050100b4 	movhi	r20,1026
 400f354:	d9001e04 	addi	r4,sp,120
 400f358:	a53fd384 	addi	r20,r20,-178
 400f35c:	d8c01e15 	stw	r3,120(sp)
 400f360:	d8002015 	stw	zero,128(sp)
 400f364:	d8001f15 	stw	zero,124(sp)
 400f368:	d8003315 	stw	zero,204(sp)
 400f36c:	d8003615 	stw	zero,216(sp)
 400f370:	d8003815 	stw	zero,224(sp)
 400f374:	1811883a 	mov	r8,r3
 400f378:	d8003915 	stw	zero,228(sp)
 400f37c:	d8003a15 	stw	zero,232(sp)
 400f380:	d8002f15 	stw	zero,188(sp)
 400f384:	d9002815 	stw	r4,160(sp)
 400f388:	a8800007 	ldb	r2,0(r21)
 400f38c:	10027b26 	beq	r2,zero,400fd7c <___vfprintf_internal_r+0xad4>
 400f390:	00c00944 	movi	r3,37
 400f394:	a821883a 	mov	r16,r21
 400f398:	10c0021e 	bne	r2,r3,400f3a4 <___vfprintf_internal_r+0xfc>
 400f39c:	00001406 	br	400f3f0 <___vfprintf_internal_r+0x148>
 400f3a0:	10c00326 	beq	r2,r3,400f3b0 <___vfprintf_internal_r+0x108>
 400f3a4:	84000044 	addi	r16,r16,1
 400f3a8:	80800007 	ldb	r2,0(r16)
 400f3ac:	103ffc1e 	bne	r2,zero,400f3a0 <__alt_data_end+0xfc00f3a0>
 400f3b0:	8563c83a 	sub	r17,r16,r21
 400f3b4:	88000e26 	beq	r17,zero,400f3f0 <___vfprintf_internal_r+0x148>
 400f3b8:	d8c02017 	ldw	r3,128(sp)
 400f3bc:	d8801f17 	ldw	r2,124(sp)
 400f3c0:	45400015 	stw	r21,0(r8)
 400f3c4:	1c47883a 	add	r3,r3,r17
 400f3c8:	10800044 	addi	r2,r2,1
 400f3cc:	d8c02015 	stw	r3,128(sp)
 400f3d0:	44400115 	stw	r17,4(r8)
 400f3d4:	d8801f15 	stw	r2,124(sp)
 400f3d8:	00c001c4 	movi	r3,7
 400f3dc:	1880a716 	blt	r3,r2,400f67c <___vfprintf_internal_r+0x3d4>
 400f3e0:	42000204 	addi	r8,r8,8
 400f3e4:	d9402f17 	ldw	r5,188(sp)
 400f3e8:	2c4b883a 	add	r5,r5,r17
 400f3ec:	d9402f15 	stw	r5,188(sp)
 400f3f0:	80800007 	ldb	r2,0(r16)
 400f3f4:	1000a826 	beq	r2,zero,400f698 <___vfprintf_internal_r+0x3f0>
 400f3f8:	84400047 	ldb	r17,1(r16)
 400f3fc:	00bfffc4 	movi	r2,-1
 400f400:	85400044 	addi	r21,r16,1
 400f404:	d8002785 	stb	zero,158(sp)
 400f408:	0007883a 	mov	r3,zero
 400f40c:	000f883a 	mov	r7,zero
 400f410:	d8802915 	stw	r2,164(sp)
 400f414:	d8003115 	stw	zero,196(sp)
 400f418:	0025883a 	mov	r18,zero
 400f41c:	01401604 	movi	r5,88
 400f420:	01800244 	movi	r6,9
 400f424:	02800a84 	movi	r10,42
 400f428:	02401b04 	movi	r9,108
 400f42c:	ad400044 	addi	r21,r21,1
 400f430:	88bff804 	addi	r2,r17,-32
 400f434:	28830436 	bltu	r5,r2,4010048 <___vfprintf_internal_r+0xda0>
 400f438:	100490ba 	slli	r2,r2,2
 400f43c:	01010074 	movhi	r4,1025
 400f440:	213d1404 	addi	r4,r4,-2992
 400f444:	1105883a 	add	r2,r2,r4
 400f448:	10800017 	ldw	r2,0(r2)
 400f44c:	1000683a 	jmp	r2
 400f450:	0400ff68 	cmpgeui	r16,zero,1021
 400f454:	04010048 	cmpgei	r16,zero,1025
 400f458:	04010048 	cmpgei	r16,zero,1025
 400f45c:	0400ff88 	cmpgei	r16,zero,1022
 400f460:	04010048 	cmpgei	r16,zero,1025
 400f464:	04010048 	cmpgei	r16,zero,1025
 400f468:	04010048 	cmpgei	r16,zero,1025
 400f46c:	04010048 	cmpgei	r16,zero,1025
 400f470:	04010048 	cmpgei	r16,zero,1025
 400f474:	04010048 	cmpgei	r16,zero,1025
 400f478:	0400f6fc 	xorhi	r16,zero,987
 400f47c:	0400fea4 	muli	r16,zero,1018
 400f480:	04010048 	cmpgei	r16,zero,1025
 400f484:	0400f5c4 	movi	r16,983
 400f488:	0400f724 	muli	r16,zero,988
 400f48c:	04010048 	cmpgei	r16,zero,1025
 400f490:	0400f764 	muli	r16,zero,989
 400f494:	0400f770 	cmpltui	r16,zero,989
 400f498:	0400f770 	cmpltui	r16,zero,989
 400f49c:	0400f770 	cmpltui	r16,zero,989
 400f4a0:	0400f770 	cmpltui	r16,zero,989
 400f4a4:	0400f770 	cmpltui	r16,zero,989
 400f4a8:	0400f770 	cmpltui	r16,zero,989
 400f4ac:	0400f770 	cmpltui	r16,zero,989
 400f4b0:	0400f770 	cmpltui	r16,zero,989
 400f4b4:	0400f770 	cmpltui	r16,zero,989
 400f4b8:	04010048 	cmpgei	r16,zero,1025
 400f4bc:	04010048 	cmpgei	r16,zero,1025
 400f4c0:	04010048 	cmpgei	r16,zero,1025
 400f4c4:	04010048 	cmpgei	r16,zero,1025
 400f4c8:	04010048 	cmpgei	r16,zero,1025
 400f4cc:	04010048 	cmpgei	r16,zero,1025
 400f4d0:	04010048 	cmpgei	r16,zero,1025
 400f4d4:	04010048 	cmpgei	r16,zero,1025
 400f4d8:	04010048 	cmpgei	r16,zero,1025
 400f4dc:	04010048 	cmpgei	r16,zero,1025
 400f4e0:	0400f7a4 	muli	r16,zero,990
 400f4e4:	0400f860 	cmpeqi	r16,zero,993
 400f4e8:	04010048 	cmpgei	r16,zero,1025
 400f4ec:	0400f860 	cmpeqi	r16,zero,993
 400f4f0:	04010048 	cmpgei	r16,zero,1025
 400f4f4:	04010048 	cmpgei	r16,zero,1025
 400f4f8:	04010048 	cmpgei	r16,zero,1025
 400f4fc:	04010048 	cmpgei	r16,zero,1025
 400f500:	0400f900 	call	400f90 <__reset-0x3bff070>
 400f504:	04010048 	cmpgei	r16,zero,1025
 400f508:	04010048 	cmpgei	r16,zero,1025
 400f50c:	0400f90c 	andi	r16,zero,996
 400f510:	04010048 	cmpgei	r16,zero,1025
 400f514:	04010048 	cmpgei	r16,zero,1025
 400f518:	04010048 	cmpgei	r16,zero,1025
 400f51c:	04010048 	cmpgei	r16,zero,1025
 400f520:	04010048 	cmpgei	r16,zero,1025
 400f524:	0400fd84 	movi	r16,1014
 400f528:	04010048 	cmpgei	r16,zero,1025
 400f52c:	04010048 	cmpgei	r16,zero,1025
 400f530:	0400fde4 	muli	r16,zero,1015
 400f534:	04010048 	cmpgei	r16,zero,1025
 400f538:	04010048 	cmpgei	r16,zero,1025
 400f53c:	04010048 	cmpgei	r16,zero,1025
 400f540:	04010048 	cmpgei	r16,zero,1025
 400f544:	04010048 	cmpgei	r16,zero,1025
 400f548:	04010048 	cmpgei	r16,zero,1025
 400f54c:	04010048 	cmpgei	r16,zero,1025
 400f550:	04010048 	cmpgei	r16,zero,1025
 400f554:	04010048 	cmpgei	r16,zero,1025
 400f558:	04010048 	cmpgei	r16,zero,1025
 400f55c:	0400fff4 	movhi	r16,1023
 400f560:	0400ff94 	movui	r16,1022
 400f564:	0400f860 	cmpeqi	r16,zero,993
 400f568:	0400f860 	cmpeqi	r16,zero,993
 400f56c:	0400f860 	cmpeqi	r16,zero,993
 400f570:	0400ffa4 	muli	r16,zero,1022
 400f574:	0400ff94 	movui	r16,1022
 400f578:	04010048 	cmpgei	r16,zero,1025
 400f57c:	04010048 	cmpgei	r16,zero,1025
 400f580:	0400ffb0 	cmpltui	r16,zero,1022
 400f584:	04010048 	cmpgei	r16,zero,1025
 400f588:	0400ffc0 	call	400ffc <__reset-0x3bff004>
 400f58c:	0400fe94 	movui	r16,1018
 400f590:	0400f5d0 	cmplti	r16,zero,983
 400f594:	0400feb4 	movhi	r16,1018
 400f598:	04010048 	cmpgei	r16,zero,1025
 400f59c:	0400fec0 	call	400fec <__reset-0x3bff014>
 400f5a0:	04010048 	cmpgei	r16,zero,1025
 400f5a4:	0400ff1c 	xori	r16,zero,1020
 400f5a8:	04010048 	cmpgei	r16,zero,1025
 400f5ac:	04010048 	cmpgei	r16,zero,1025
 400f5b0:	0400ff2c 	andhi	r16,zero,1020
 400f5b4:	d9003117 	ldw	r4,196(sp)
 400f5b8:	d8802d15 	stw	r2,180(sp)
 400f5bc:	0109c83a 	sub	r4,zero,r4
 400f5c0:	d9003115 	stw	r4,196(sp)
 400f5c4:	94800114 	ori	r18,r18,4
 400f5c8:	ac400007 	ldb	r17,0(r21)
 400f5cc:	003f9706 	br	400f42c <__alt_data_end+0xfc00f42c>
 400f5d0:	00800c04 	movi	r2,48
 400f5d4:	d9002d17 	ldw	r4,180(sp)
 400f5d8:	d9402917 	ldw	r5,164(sp)
 400f5dc:	d8802705 	stb	r2,156(sp)
 400f5e0:	00801e04 	movi	r2,120
 400f5e4:	d8802745 	stb	r2,157(sp)
 400f5e8:	d8002785 	stb	zero,158(sp)
 400f5ec:	20c00104 	addi	r3,r4,4
 400f5f0:	24c00017 	ldw	r19,0(r4)
 400f5f4:	002d883a 	mov	r22,zero
 400f5f8:	90800094 	ori	r2,r18,2
 400f5fc:	28029a16 	blt	r5,zero,4010068 <___vfprintf_internal_r+0xdc0>
 400f600:	00bfdfc4 	movi	r2,-129
 400f604:	90a4703a 	and	r18,r18,r2
 400f608:	d8c02d15 	stw	r3,180(sp)
 400f60c:	94800094 	ori	r18,r18,2
 400f610:	9802871e 	bne	r19,zero,4010030 <___vfprintf_internal_r+0xd88>
 400f614:	008100b4 	movhi	r2,1026
 400f618:	10bfc404 	addi	r2,r2,-240
 400f61c:	d8803915 	stw	r2,228(sp)
 400f620:	04401e04 	movi	r17,120
 400f624:	d8802917 	ldw	r2,164(sp)
 400f628:	0039883a 	mov	fp,zero
 400f62c:	1001e926 	beq	r2,zero,400fdd4 <___vfprintf_internal_r+0xb2c>
 400f630:	0027883a 	mov	r19,zero
 400f634:	002d883a 	mov	r22,zero
 400f638:	00020506 	br	400fe50 <___vfprintf_internal_r+0xba8>
 400f63c:	d9002c17 	ldw	r4,176(sp)
 400f640:	b80b883a 	mov	r5,r23
 400f644:	40115780 	call	4011578 <__swsetup_r>
 400f648:	1005ac1e 	bne	r2,zero,4010cfc <___vfprintf_internal_r+0x1a54>
 400f64c:	b880030b 	ldhu	r2,12(r23)
 400f650:	00c00284 	movi	r3,10
 400f654:	1080068c 	andi	r2,r2,26
 400f658:	10ff3c1e 	bne	r2,r3,400f34c <__alt_data_end+0xfc00f34c>
 400f65c:	b880038f 	ldh	r2,14(r23)
 400f660:	103f3a16 	blt	r2,zero,400f34c <__alt_data_end+0xfc00f34c>
 400f664:	d9c02d17 	ldw	r7,180(sp)
 400f668:	d9002c17 	ldw	r4,176(sp)
 400f66c:	a80d883a 	mov	r6,r21
 400f670:	b80b883a 	mov	r5,r23
 400f674:	40114bc0 	call	40114bc <__sbprintf>
 400f678:	00001106 	br	400f6c0 <___vfprintf_internal_r+0x418>
 400f67c:	d9002c17 	ldw	r4,176(sp)
 400f680:	d9801e04 	addi	r6,sp,120
 400f684:	b80b883a 	mov	r5,r23
 400f688:	401726c0 	call	401726c <__sprint_r>
 400f68c:	1000081e 	bne	r2,zero,400f6b0 <___vfprintf_internal_r+0x408>
 400f690:	da000404 	addi	r8,sp,16
 400f694:	003f5306 	br	400f3e4 <__alt_data_end+0xfc00f3e4>
 400f698:	d8802017 	ldw	r2,128(sp)
 400f69c:	10000426 	beq	r2,zero,400f6b0 <___vfprintf_internal_r+0x408>
 400f6a0:	d9002c17 	ldw	r4,176(sp)
 400f6a4:	d9801e04 	addi	r6,sp,120
 400f6a8:	b80b883a 	mov	r5,r23
 400f6ac:	401726c0 	call	401726c <__sprint_r>
 400f6b0:	b880030b 	ldhu	r2,12(r23)
 400f6b4:	1080100c 	andi	r2,r2,64
 400f6b8:	1005901e 	bne	r2,zero,4010cfc <___vfprintf_internal_r+0x1a54>
 400f6bc:	d8802f17 	ldw	r2,188(sp)
 400f6c0:	dfc04717 	ldw	ra,284(sp)
 400f6c4:	df004617 	ldw	fp,280(sp)
 400f6c8:	ddc04517 	ldw	r23,276(sp)
 400f6cc:	dd804417 	ldw	r22,272(sp)
 400f6d0:	dd404317 	ldw	r21,268(sp)
 400f6d4:	dd004217 	ldw	r20,264(sp)
 400f6d8:	dcc04117 	ldw	r19,260(sp)
 400f6dc:	dc804017 	ldw	r18,256(sp)
 400f6e0:	dc403f17 	ldw	r17,252(sp)
 400f6e4:	dc003e17 	ldw	r16,248(sp)
 400f6e8:	dec04804 	addi	sp,sp,288
 400f6ec:	f800283a 	ret
 400f6f0:	d9002c17 	ldw	r4,176(sp)
 400f6f4:	401354c0 	call	401354c <__sinit>
 400f6f8:	003f0406 	br	400f30c <__alt_data_end+0xfc00f30c>
 400f6fc:	d8802d17 	ldw	r2,180(sp)
 400f700:	d9002d17 	ldw	r4,180(sp)
 400f704:	10800017 	ldw	r2,0(r2)
 400f708:	d8803115 	stw	r2,196(sp)
 400f70c:	20800104 	addi	r2,r4,4
 400f710:	d9003117 	ldw	r4,196(sp)
 400f714:	203fa716 	blt	r4,zero,400f5b4 <__alt_data_end+0xfc00f5b4>
 400f718:	d8802d15 	stw	r2,180(sp)
 400f71c:	ac400007 	ldb	r17,0(r21)
 400f720:	003f4206 	br	400f42c <__alt_data_end+0xfc00f42c>
 400f724:	ac400007 	ldb	r17,0(r21)
 400f728:	aac00044 	addi	r11,r21,1
 400f72c:	8a872826 	beq	r17,r10,40113d0 <___vfprintf_internal_r+0x2128>
 400f730:	88bff404 	addi	r2,r17,-48
 400f734:	0009883a 	mov	r4,zero
 400f738:	30867d36 	bltu	r6,r2,4011130 <___vfprintf_internal_r+0x1e88>
 400f73c:	5c400007 	ldb	r17,0(r11)
 400f740:	210002a4 	muli	r4,r4,10
 400f744:	5d400044 	addi	r21,r11,1
 400f748:	a817883a 	mov	r11,r21
 400f74c:	2089883a 	add	r4,r4,r2
 400f750:	88bff404 	addi	r2,r17,-48
 400f754:	30bff92e 	bgeu	r6,r2,400f73c <__alt_data_end+0xfc00f73c>
 400f758:	2005c916 	blt	r4,zero,4010e80 <___vfprintf_internal_r+0x1bd8>
 400f75c:	d9002915 	stw	r4,164(sp)
 400f760:	003f3306 	br	400f430 <__alt_data_end+0xfc00f430>
 400f764:	94802014 	ori	r18,r18,128
 400f768:	ac400007 	ldb	r17,0(r21)
 400f76c:	003f2f06 	br	400f42c <__alt_data_end+0xfc00f42c>
 400f770:	a809883a 	mov	r4,r21
 400f774:	d8003115 	stw	zero,196(sp)
 400f778:	88bff404 	addi	r2,r17,-48
 400f77c:	0017883a 	mov	r11,zero
 400f780:	24400007 	ldb	r17,0(r4)
 400f784:	5ac002a4 	muli	r11,r11,10
 400f788:	ad400044 	addi	r21,r21,1
 400f78c:	a809883a 	mov	r4,r21
 400f790:	12d7883a 	add	r11,r2,r11
 400f794:	88bff404 	addi	r2,r17,-48
 400f798:	30bff92e 	bgeu	r6,r2,400f780 <__alt_data_end+0xfc00f780>
 400f79c:	dac03115 	stw	r11,196(sp)
 400f7a0:	003f2306 	br	400f430 <__alt_data_end+0xfc00f430>
 400f7a4:	18c03fcc 	andi	r3,r3,255
 400f7a8:	18072b1e 	bne	r3,zero,4011458 <___vfprintf_internal_r+0x21b0>
 400f7ac:	94800414 	ori	r18,r18,16
 400f7b0:	9080080c 	andi	r2,r18,32
 400f7b4:	10037b26 	beq	r2,zero,40105a4 <___vfprintf_internal_r+0x12fc>
 400f7b8:	d9402d17 	ldw	r5,180(sp)
 400f7bc:	28800117 	ldw	r2,4(r5)
 400f7c0:	2cc00017 	ldw	r19,0(r5)
 400f7c4:	29400204 	addi	r5,r5,8
 400f7c8:	d9402d15 	stw	r5,180(sp)
 400f7cc:	102d883a 	mov	r22,r2
 400f7d0:	10044b16 	blt	r2,zero,4010900 <___vfprintf_internal_r+0x1658>
 400f7d4:	d9402917 	ldw	r5,164(sp)
 400f7d8:	df002783 	ldbu	fp,158(sp)
 400f7dc:	2803bc16 	blt	r5,zero,40106d0 <___vfprintf_internal_r+0x1428>
 400f7e0:	00ffdfc4 	movi	r3,-129
 400f7e4:	9d84b03a 	or	r2,r19,r22
 400f7e8:	90e4703a 	and	r18,r18,r3
 400f7ec:	10017726 	beq	r2,zero,400fdcc <___vfprintf_internal_r+0xb24>
 400f7f0:	b0038326 	beq	r22,zero,4010600 <___vfprintf_internal_r+0x1358>
 400f7f4:	dc402a15 	stw	r17,168(sp)
 400f7f8:	dc001e04 	addi	r16,sp,120
 400f7fc:	b023883a 	mov	r17,r22
 400f800:	402d883a 	mov	r22,r8
 400f804:	9809883a 	mov	r4,r19
 400f808:	880b883a 	mov	r5,r17
 400f80c:	01800284 	movi	r6,10
 400f810:	000f883a 	mov	r7,zero
 400f814:	40196640 	call	4019664 <__umoddi3>
 400f818:	10800c04 	addi	r2,r2,48
 400f81c:	843fffc4 	addi	r16,r16,-1
 400f820:	9809883a 	mov	r4,r19
 400f824:	880b883a 	mov	r5,r17
 400f828:	80800005 	stb	r2,0(r16)
 400f82c:	01800284 	movi	r6,10
 400f830:	000f883a 	mov	r7,zero
 400f834:	40190ec0 	call	40190ec <__udivdi3>
 400f838:	1027883a 	mov	r19,r2
 400f83c:	10c4b03a 	or	r2,r2,r3
 400f840:	1823883a 	mov	r17,r3
 400f844:	103fef1e 	bne	r2,zero,400f804 <__alt_data_end+0xfc00f804>
 400f848:	d8c02817 	ldw	r3,160(sp)
 400f84c:	dc402a17 	ldw	r17,168(sp)
 400f850:	b011883a 	mov	r8,r22
 400f854:	1c07c83a 	sub	r3,r3,r16
 400f858:	d8c02e15 	stw	r3,184(sp)
 400f85c:	00005906 	br	400f9c4 <___vfprintf_internal_r+0x71c>
 400f860:	18c03fcc 	andi	r3,r3,255
 400f864:	1806fa1e 	bne	r3,zero,4011450 <___vfprintf_internal_r+0x21a8>
 400f868:	9080020c 	andi	r2,r18,8
 400f86c:	10048a26 	beq	r2,zero,4010a98 <___vfprintf_internal_r+0x17f0>
 400f870:	d8c02d17 	ldw	r3,180(sp)
 400f874:	d9002d17 	ldw	r4,180(sp)
 400f878:	d9402d17 	ldw	r5,180(sp)
 400f87c:	18c00017 	ldw	r3,0(r3)
 400f880:	21000117 	ldw	r4,4(r4)
 400f884:	29400204 	addi	r5,r5,8
 400f888:	d8c03615 	stw	r3,216(sp)
 400f88c:	d9003815 	stw	r4,224(sp)
 400f890:	d9402d15 	stw	r5,180(sp)
 400f894:	d9003617 	ldw	r4,216(sp)
 400f898:	d9403817 	ldw	r5,224(sp)
 400f89c:	da003d15 	stw	r8,244(sp)
 400f8a0:	04000044 	movi	r16,1
 400f8a4:	4015bb40 	call	4015bb4 <__fpclassifyd>
 400f8a8:	da003d17 	ldw	r8,244(sp)
 400f8ac:	14041f1e 	bne	r2,r16,401092c <___vfprintf_internal_r+0x1684>
 400f8b0:	d9003617 	ldw	r4,216(sp)
 400f8b4:	d9403817 	ldw	r5,224(sp)
 400f8b8:	000d883a 	mov	r6,zero
 400f8bc:	000f883a 	mov	r7,zero
 400f8c0:	401ae940 	call	401ae94 <__ledf2>
 400f8c4:	da003d17 	ldw	r8,244(sp)
 400f8c8:	1005be16 	blt	r2,zero,4010fc4 <___vfprintf_internal_r+0x1d1c>
 400f8cc:	df002783 	ldbu	fp,158(sp)
 400f8d0:	008011c4 	movi	r2,71
 400f8d4:	1445330e 	bge	r2,r17,4010da4 <___vfprintf_internal_r+0x1afc>
 400f8d8:	040100b4 	movhi	r16,1026
 400f8dc:	843fbc04 	addi	r16,r16,-272
 400f8e0:	00c000c4 	movi	r3,3
 400f8e4:	00bfdfc4 	movi	r2,-129
 400f8e8:	d8c02a15 	stw	r3,168(sp)
 400f8ec:	90a4703a 	and	r18,r18,r2
 400f8f0:	d8c02e15 	stw	r3,184(sp)
 400f8f4:	d8002915 	stw	zero,164(sp)
 400f8f8:	d8003215 	stw	zero,200(sp)
 400f8fc:	00003706 	br	400f9dc <___vfprintf_internal_r+0x734>
 400f900:	94800214 	ori	r18,r18,8
 400f904:	ac400007 	ldb	r17,0(r21)
 400f908:	003ec806 	br	400f42c <__alt_data_end+0xfc00f42c>
 400f90c:	18c03fcc 	andi	r3,r3,255
 400f910:	1806db1e 	bne	r3,zero,4011480 <___vfprintf_internal_r+0x21d8>
 400f914:	94800414 	ori	r18,r18,16
 400f918:	9080080c 	andi	r2,r18,32
 400f91c:	1002d826 	beq	r2,zero,4010480 <___vfprintf_internal_r+0x11d8>
 400f920:	d9402d17 	ldw	r5,180(sp)
 400f924:	d8c02917 	ldw	r3,164(sp)
 400f928:	d8002785 	stb	zero,158(sp)
 400f92c:	28800204 	addi	r2,r5,8
 400f930:	2cc00017 	ldw	r19,0(r5)
 400f934:	2d800117 	ldw	r22,4(r5)
 400f938:	18048f16 	blt	r3,zero,4010b78 <___vfprintf_internal_r+0x18d0>
 400f93c:	013fdfc4 	movi	r4,-129
 400f940:	9d86b03a 	or	r3,r19,r22
 400f944:	d8802d15 	stw	r2,180(sp)
 400f948:	9124703a 	and	r18,r18,r4
 400f94c:	1802d91e 	bne	r3,zero,40104b4 <___vfprintf_internal_r+0x120c>
 400f950:	d8c02917 	ldw	r3,164(sp)
 400f954:	0039883a 	mov	fp,zero
 400f958:	1805c326 	beq	r3,zero,4011068 <___vfprintf_internal_r+0x1dc0>
 400f95c:	0027883a 	mov	r19,zero
 400f960:	002d883a 	mov	r22,zero
 400f964:	dc001e04 	addi	r16,sp,120
 400f968:	9806d0fa 	srli	r3,r19,3
 400f96c:	b008977a 	slli	r4,r22,29
 400f970:	b02cd0fa 	srli	r22,r22,3
 400f974:	9cc001cc 	andi	r19,r19,7
 400f978:	98800c04 	addi	r2,r19,48
 400f97c:	843fffc4 	addi	r16,r16,-1
 400f980:	20e6b03a 	or	r19,r4,r3
 400f984:	80800005 	stb	r2,0(r16)
 400f988:	9d86b03a 	or	r3,r19,r22
 400f98c:	183ff61e 	bne	r3,zero,400f968 <__alt_data_end+0xfc00f968>
 400f990:	90c0004c 	andi	r3,r18,1
 400f994:	18013b26 	beq	r3,zero,400fe84 <___vfprintf_internal_r+0xbdc>
 400f998:	10803fcc 	andi	r2,r2,255
 400f99c:	1080201c 	xori	r2,r2,128
 400f9a0:	10bfe004 	addi	r2,r2,-128
 400f9a4:	00c00c04 	movi	r3,48
 400f9a8:	10c13626 	beq	r2,r3,400fe84 <___vfprintf_internal_r+0xbdc>
 400f9ac:	80ffffc5 	stb	r3,-1(r16)
 400f9b0:	d8c02817 	ldw	r3,160(sp)
 400f9b4:	80bfffc4 	addi	r2,r16,-1
 400f9b8:	1021883a 	mov	r16,r2
 400f9bc:	1887c83a 	sub	r3,r3,r2
 400f9c0:	d8c02e15 	stw	r3,184(sp)
 400f9c4:	d8802e17 	ldw	r2,184(sp)
 400f9c8:	d9002917 	ldw	r4,164(sp)
 400f9cc:	1100010e 	bge	r2,r4,400f9d4 <___vfprintf_internal_r+0x72c>
 400f9d0:	2005883a 	mov	r2,r4
 400f9d4:	d8802a15 	stw	r2,168(sp)
 400f9d8:	d8003215 	stw	zero,200(sp)
 400f9dc:	e7003fcc 	andi	fp,fp,255
 400f9e0:	e700201c 	xori	fp,fp,128
 400f9e4:	e73fe004 	addi	fp,fp,-128
 400f9e8:	e0000326 	beq	fp,zero,400f9f8 <___vfprintf_internal_r+0x750>
 400f9ec:	d8c02a17 	ldw	r3,168(sp)
 400f9f0:	18c00044 	addi	r3,r3,1
 400f9f4:	d8c02a15 	stw	r3,168(sp)
 400f9f8:	90c0008c 	andi	r3,r18,2
 400f9fc:	d8c02b15 	stw	r3,172(sp)
 400fa00:	18000326 	beq	r3,zero,400fa10 <___vfprintf_internal_r+0x768>
 400fa04:	d8c02a17 	ldw	r3,168(sp)
 400fa08:	18c00084 	addi	r3,r3,2
 400fa0c:	d8c02a15 	stw	r3,168(sp)
 400fa10:	90c0210c 	andi	r3,r18,132
 400fa14:	d8c03015 	stw	r3,192(sp)
 400fa18:	1801a31e 	bne	r3,zero,40100a8 <___vfprintf_internal_r+0xe00>
 400fa1c:	d9003117 	ldw	r4,196(sp)
 400fa20:	d8c02a17 	ldw	r3,168(sp)
 400fa24:	20e7c83a 	sub	r19,r4,r3
 400fa28:	04c19f0e 	bge	zero,r19,40100a8 <___vfprintf_internal_r+0xe00>
 400fa2c:	02400404 	movi	r9,16
 400fa30:	d8c02017 	ldw	r3,128(sp)
 400fa34:	d8801f17 	ldw	r2,124(sp)
 400fa38:	4cc50d0e 	bge	r9,r19,4010e70 <___vfprintf_internal_r+0x1bc8>
 400fa3c:	014100b4 	movhi	r5,1026
 400fa40:	297fd784 	addi	r5,r5,-162
 400fa44:	dc403b15 	stw	r17,236(sp)
 400fa48:	d9403515 	stw	r5,212(sp)
 400fa4c:	9823883a 	mov	r17,r19
 400fa50:	482d883a 	mov	r22,r9
 400fa54:	9027883a 	mov	r19,r18
 400fa58:	070001c4 	movi	fp,7
 400fa5c:	8025883a 	mov	r18,r16
 400fa60:	dc002c17 	ldw	r16,176(sp)
 400fa64:	00000306 	br	400fa74 <___vfprintf_internal_r+0x7cc>
 400fa68:	8c7ffc04 	addi	r17,r17,-16
 400fa6c:	42000204 	addi	r8,r8,8
 400fa70:	b440130e 	bge	r22,r17,400fac0 <___vfprintf_internal_r+0x818>
 400fa74:	010100b4 	movhi	r4,1026
 400fa78:	18c00404 	addi	r3,r3,16
 400fa7c:	10800044 	addi	r2,r2,1
 400fa80:	213fd784 	addi	r4,r4,-162
 400fa84:	41000015 	stw	r4,0(r8)
 400fa88:	45800115 	stw	r22,4(r8)
 400fa8c:	d8c02015 	stw	r3,128(sp)
 400fa90:	d8801f15 	stw	r2,124(sp)
 400fa94:	e0bff40e 	bge	fp,r2,400fa68 <__alt_data_end+0xfc00fa68>
 400fa98:	d9801e04 	addi	r6,sp,120
 400fa9c:	b80b883a 	mov	r5,r23
 400faa0:	8009883a 	mov	r4,r16
 400faa4:	401726c0 	call	401726c <__sprint_r>
 400faa8:	103f011e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 400faac:	8c7ffc04 	addi	r17,r17,-16
 400fab0:	d8c02017 	ldw	r3,128(sp)
 400fab4:	d8801f17 	ldw	r2,124(sp)
 400fab8:	da000404 	addi	r8,sp,16
 400fabc:	b47fed16 	blt	r22,r17,400fa74 <__alt_data_end+0xfc00fa74>
 400fac0:	9021883a 	mov	r16,r18
 400fac4:	9825883a 	mov	r18,r19
 400fac8:	8827883a 	mov	r19,r17
 400facc:	dc403b17 	ldw	r17,236(sp)
 400fad0:	d9403517 	ldw	r5,212(sp)
 400fad4:	98c7883a 	add	r3,r19,r3
 400fad8:	10800044 	addi	r2,r2,1
 400fadc:	41400015 	stw	r5,0(r8)
 400fae0:	44c00115 	stw	r19,4(r8)
 400fae4:	d8c02015 	stw	r3,128(sp)
 400fae8:	d8801f15 	stw	r2,124(sp)
 400faec:	010001c4 	movi	r4,7
 400faf0:	2082a316 	blt	r4,r2,4010580 <___vfprintf_internal_r+0x12d8>
 400faf4:	df002787 	ldb	fp,158(sp)
 400faf8:	42000204 	addi	r8,r8,8
 400fafc:	e0000c26 	beq	fp,zero,400fb30 <___vfprintf_internal_r+0x888>
 400fb00:	d8801f17 	ldw	r2,124(sp)
 400fb04:	d9002784 	addi	r4,sp,158
 400fb08:	18c00044 	addi	r3,r3,1
 400fb0c:	10800044 	addi	r2,r2,1
 400fb10:	41000015 	stw	r4,0(r8)
 400fb14:	01000044 	movi	r4,1
 400fb18:	41000115 	stw	r4,4(r8)
 400fb1c:	d8c02015 	stw	r3,128(sp)
 400fb20:	d8801f15 	stw	r2,124(sp)
 400fb24:	010001c4 	movi	r4,7
 400fb28:	20823c16 	blt	r4,r2,401041c <___vfprintf_internal_r+0x1174>
 400fb2c:	42000204 	addi	r8,r8,8
 400fb30:	d8802b17 	ldw	r2,172(sp)
 400fb34:	10000c26 	beq	r2,zero,400fb68 <___vfprintf_internal_r+0x8c0>
 400fb38:	d8801f17 	ldw	r2,124(sp)
 400fb3c:	d9002704 	addi	r4,sp,156
 400fb40:	18c00084 	addi	r3,r3,2
 400fb44:	10800044 	addi	r2,r2,1
 400fb48:	41000015 	stw	r4,0(r8)
 400fb4c:	01000084 	movi	r4,2
 400fb50:	41000115 	stw	r4,4(r8)
 400fb54:	d8c02015 	stw	r3,128(sp)
 400fb58:	d8801f15 	stw	r2,124(sp)
 400fb5c:	010001c4 	movi	r4,7
 400fb60:	20823616 	blt	r4,r2,401043c <___vfprintf_internal_r+0x1194>
 400fb64:	42000204 	addi	r8,r8,8
 400fb68:	d9003017 	ldw	r4,192(sp)
 400fb6c:	00802004 	movi	r2,128
 400fb70:	20819926 	beq	r4,r2,40101d8 <___vfprintf_internal_r+0xf30>
 400fb74:	d9402917 	ldw	r5,164(sp)
 400fb78:	d8802e17 	ldw	r2,184(sp)
 400fb7c:	28adc83a 	sub	r22,r5,r2
 400fb80:	0580310e 	bge	zero,r22,400fc48 <___vfprintf_internal_r+0x9a0>
 400fb84:	07000404 	movi	fp,16
 400fb88:	d8801f17 	ldw	r2,124(sp)
 400fb8c:	e584140e 	bge	fp,r22,4010be0 <___vfprintf_internal_r+0x1938>
 400fb90:	014100b4 	movhi	r5,1026
 400fb94:	297fd384 	addi	r5,r5,-178
 400fb98:	dc402915 	stw	r17,164(sp)
 400fb9c:	d9402b15 	stw	r5,172(sp)
 400fba0:	b023883a 	mov	r17,r22
 400fba4:	04c001c4 	movi	r19,7
 400fba8:	a82d883a 	mov	r22,r21
 400fbac:	902b883a 	mov	r21,r18
 400fbb0:	8025883a 	mov	r18,r16
 400fbb4:	dc002c17 	ldw	r16,176(sp)
 400fbb8:	00000306 	br	400fbc8 <___vfprintf_internal_r+0x920>
 400fbbc:	8c7ffc04 	addi	r17,r17,-16
 400fbc0:	42000204 	addi	r8,r8,8
 400fbc4:	e440110e 	bge	fp,r17,400fc0c <___vfprintf_internal_r+0x964>
 400fbc8:	18c00404 	addi	r3,r3,16
 400fbcc:	10800044 	addi	r2,r2,1
 400fbd0:	45000015 	stw	r20,0(r8)
 400fbd4:	47000115 	stw	fp,4(r8)
 400fbd8:	d8c02015 	stw	r3,128(sp)
 400fbdc:	d8801f15 	stw	r2,124(sp)
 400fbe0:	98bff60e 	bge	r19,r2,400fbbc <__alt_data_end+0xfc00fbbc>
 400fbe4:	d9801e04 	addi	r6,sp,120
 400fbe8:	b80b883a 	mov	r5,r23
 400fbec:	8009883a 	mov	r4,r16
 400fbf0:	401726c0 	call	401726c <__sprint_r>
 400fbf4:	103eae1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 400fbf8:	8c7ffc04 	addi	r17,r17,-16
 400fbfc:	d8c02017 	ldw	r3,128(sp)
 400fc00:	d8801f17 	ldw	r2,124(sp)
 400fc04:	da000404 	addi	r8,sp,16
 400fc08:	e47fef16 	blt	fp,r17,400fbc8 <__alt_data_end+0xfc00fbc8>
 400fc0c:	9021883a 	mov	r16,r18
 400fc10:	a825883a 	mov	r18,r21
 400fc14:	b02b883a 	mov	r21,r22
 400fc18:	882d883a 	mov	r22,r17
 400fc1c:	dc402917 	ldw	r17,164(sp)
 400fc20:	d9002b17 	ldw	r4,172(sp)
 400fc24:	1d87883a 	add	r3,r3,r22
 400fc28:	10800044 	addi	r2,r2,1
 400fc2c:	41000015 	stw	r4,0(r8)
 400fc30:	45800115 	stw	r22,4(r8)
 400fc34:	d8c02015 	stw	r3,128(sp)
 400fc38:	d8801f15 	stw	r2,124(sp)
 400fc3c:	010001c4 	movi	r4,7
 400fc40:	2081ee16 	blt	r4,r2,40103fc <___vfprintf_internal_r+0x1154>
 400fc44:	42000204 	addi	r8,r8,8
 400fc48:	9080400c 	andi	r2,r18,256
 400fc4c:	1001181e 	bne	r2,zero,40100b0 <___vfprintf_internal_r+0xe08>
 400fc50:	d9402e17 	ldw	r5,184(sp)
 400fc54:	d8801f17 	ldw	r2,124(sp)
 400fc58:	44000015 	stw	r16,0(r8)
 400fc5c:	1947883a 	add	r3,r3,r5
 400fc60:	10800044 	addi	r2,r2,1
 400fc64:	41400115 	stw	r5,4(r8)
 400fc68:	d8c02015 	stw	r3,128(sp)
 400fc6c:	d8801f15 	stw	r2,124(sp)
 400fc70:	010001c4 	movi	r4,7
 400fc74:	2081d316 	blt	r4,r2,40103c4 <___vfprintf_internal_r+0x111c>
 400fc78:	42000204 	addi	r8,r8,8
 400fc7c:	9480010c 	andi	r18,r18,4
 400fc80:	90003226 	beq	r18,zero,400fd4c <___vfprintf_internal_r+0xaa4>
 400fc84:	d9403117 	ldw	r5,196(sp)
 400fc88:	d8802a17 	ldw	r2,168(sp)
 400fc8c:	28a1c83a 	sub	r16,r5,r2
 400fc90:	04002e0e 	bge	zero,r16,400fd4c <___vfprintf_internal_r+0xaa4>
 400fc94:	04400404 	movi	r17,16
 400fc98:	d8801f17 	ldw	r2,124(sp)
 400fc9c:	8c04a20e 	bge	r17,r16,4010f28 <___vfprintf_internal_r+0x1c80>
 400fca0:	014100b4 	movhi	r5,1026
 400fca4:	297fd784 	addi	r5,r5,-162
 400fca8:	d9403515 	stw	r5,212(sp)
 400fcac:	048001c4 	movi	r18,7
 400fcb0:	dcc02c17 	ldw	r19,176(sp)
 400fcb4:	00000306 	br	400fcc4 <___vfprintf_internal_r+0xa1c>
 400fcb8:	843ffc04 	addi	r16,r16,-16
 400fcbc:	42000204 	addi	r8,r8,8
 400fcc0:	8c00130e 	bge	r17,r16,400fd10 <___vfprintf_internal_r+0xa68>
 400fcc4:	010100b4 	movhi	r4,1026
 400fcc8:	18c00404 	addi	r3,r3,16
 400fccc:	10800044 	addi	r2,r2,1
 400fcd0:	213fd784 	addi	r4,r4,-162
 400fcd4:	41000015 	stw	r4,0(r8)
 400fcd8:	44400115 	stw	r17,4(r8)
 400fcdc:	d8c02015 	stw	r3,128(sp)
 400fce0:	d8801f15 	stw	r2,124(sp)
 400fce4:	90bff40e 	bge	r18,r2,400fcb8 <__alt_data_end+0xfc00fcb8>
 400fce8:	d9801e04 	addi	r6,sp,120
 400fcec:	b80b883a 	mov	r5,r23
 400fcf0:	9809883a 	mov	r4,r19
 400fcf4:	401726c0 	call	401726c <__sprint_r>
 400fcf8:	103e6d1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 400fcfc:	843ffc04 	addi	r16,r16,-16
 400fd00:	d8c02017 	ldw	r3,128(sp)
 400fd04:	d8801f17 	ldw	r2,124(sp)
 400fd08:	da000404 	addi	r8,sp,16
 400fd0c:	8c3fed16 	blt	r17,r16,400fcc4 <__alt_data_end+0xfc00fcc4>
 400fd10:	d9403517 	ldw	r5,212(sp)
 400fd14:	1c07883a 	add	r3,r3,r16
 400fd18:	10800044 	addi	r2,r2,1
 400fd1c:	41400015 	stw	r5,0(r8)
 400fd20:	44000115 	stw	r16,4(r8)
 400fd24:	d8c02015 	stw	r3,128(sp)
 400fd28:	d8801f15 	stw	r2,124(sp)
 400fd2c:	010001c4 	movi	r4,7
 400fd30:	2080060e 	bge	r4,r2,400fd4c <___vfprintf_internal_r+0xaa4>
 400fd34:	d9002c17 	ldw	r4,176(sp)
 400fd38:	d9801e04 	addi	r6,sp,120
 400fd3c:	b80b883a 	mov	r5,r23
 400fd40:	401726c0 	call	401726c <__sprint_r>
 400fd44:	103e5a1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 400fd48:	d8c02017 	ldw	r3,128(sp)
 400fd4c:	d8803117 	ldw	r2,196(sp)
 400fd50:	d9002a17 	ldw	r4,168(sp)
 400fd54:	1100010e 	bge	r2,r4,400fd5c <___vfprintf_internal_r+0xab4>
 400fd58:	2005883a 	mov	r2,r4
 400fd5c:	d9402f17 	ldw	r5,188(sp)
 400fd60:	288b883a 	add	r5,r5,r2
 400fd64:	d9402f15 	stw	r5,188(sp)
 400fd68:	18019e1e 	bne	r3,zero,40103e4 <___vfprintf_internal_r+0x113c>
 400fd6c:	a8800007 	ldb	r2,0(r21)
 400fd70:	d8001f15 	stw	zero,124(sp)
 400fd74:	da000404 	addi	r8,sp,16
 400fd78:	103d851e 	bne	r2,zero,400f390 <__alt_data_end+0xfc00f390>
 400fd7c:	a821883a 	mov	r16,r21
 400fd80:	003d9b06 	br	400f3f0 <__alt_data_end+0xfc00f3f0>
 400fd84:	18c03fcc 	andi	r3,r3,255
 400fd88:	1805c11e 	bne	r3,zero,4011490 <___vfprintf_internal_r+0x21e8>
 400fd8c:	94800414 	ori	r18,r18,16
 400fd90:	9080080c 	andi	r2,r18,32
 400fd94:	10020c26 	beq	r2,zero,40105c8 <___vfprintf_internal_r+0x1320>
 400fd98:	d8802d17 	ldw	r2,180(sp)
 400fd9c:	d9002917 	ldw	r4,164(sp)
 400fda0:	d8002785 	stb	zero,158(sp)
 400fda4:	10c00204 	addi	r3,r2,8
 400fda8:	14c00017 	ldw	r19,0(r2)
 400fdac:	15800117 	ldw	r22,4(r2)
 400fdb0:	20040f16 	blt	r4,zero,4010df0 <___vfprintf_internal_r+0x1b48>
 400fdb4:	013fdfc4 	movi	r4,-129
 400fdb8:	9d84b03a 	or	r2,r19,r22
 400fdbc:	d8c02d15 	stw	r3,180(sp)
 400fdc0:	9124703a 	and	r18,r18,r4
 400fdc4:	0039883a 	mov	fp,zero
 400fdc8:	103e891e 	bne	r2,zero,400f7f0 <__alt_data_end+0xfc00f7f0>
 400fdcc:	d9002917 	ldw	r4,164(sp)
 400fdd0:	2002c11e 	bne	r4,zero,40108d8 <___vfprintf_internal_r+0x1630>
 400fdd4:	d8002915 	stw	zero,164(sp)
 400fdd8:	d8002e15 	stw	zero,184(sp)
 400fddc:	dc001e04 	addi	r16,sp,120
 400fde0:	003ef806 	br	400f9c4 <__alt_data_end+0xfc00f9c4>
 400fde4:	18c03fcc 	andi	r3,r3,255
 400fde8:	18059d1e 	bne	r3,zero,4011460 <___vfprintf_internal_r+0x21b8>
 400fdec:	014100b4 	movhi	r5,1026
 400fdf0:	297fbf04 	addi	r5,r5,-260
 400fdf4:	d9403915 	stw	r5,228(sp)
 400fdf8:	9080080c 	andi	r2,r18,32
 400fdfc:	10005226 	beq	r2,zero,400ff48 <___vfprintf_internal_r+0xca0>
 400fe00:	d8802d17 	ldw	r2,180(sp)
 400fe04:	14c00017 	ldw	r19,0(r2)
 400fe08:	15800117 	ldw	r22,4(r2)
 400fe0c:	10800204 	addi	r2,r2,8
 400fe10:	d8802d15 	stw	r2,180(sp)
 400fe14:	9080004c 	andi	r2,r18,1
 400fe18:	10019026 	beq	r2,zero,401045c <___vfprintf_internal_r+0x11b4>
 400fe1c:	9d84b03a 	or	r2,r19,r22
 400fe20:	10036926 	beq	r2,zero,4010bc8 <___vfprintf_internal_r+0x1920>
 400fe24:	d8c02917 	ldw	r3,164(sp)
 400fe28:	00800c04 	movi	r2,48
 400fe2c:	d8802705 	stb	r2,156(sp)
 400fe30:	dc402745 	stb	r17,157(sp)
 400fe34:	d8002785 	stb	zero,158(sp)
 400fe38:	90800094 	ori	r2,r18,2
 400fe3c:	18045d16 	blt	r3,zero,4010fb4 <___vfprintf_internal_r+0x1d0c>
 400fe40:	00bfdfc4 	movi	r2,-129
 400fe44:	90a4703a 	and	r18,r18,r2
 400fe48:	94800094 	ori	r18,r18,2
 400fe4c:	0039883a 	mov	fp,zero
 400fe50:	d9003917 	ldw	r4,228(sp)
 400fe54:	dc001e04 	addi	r16,sp,120
 400fe58:	988003cc 	andi	r2,r19,15
 400fe5c:	b006973a 	slli	r3,r22,28
 400fe60:	2085883a 	add	r2,r4,r2
 400fe64:	9826d13a 	srli	r19,r19,4
 400fe68:	10800003 	ldbu	r2,0(r2)
 400fe6c:	b02cd13a 	srli	r22,r22,4
 400fe70:	843fffc4 	addi	r16,r16,-1
 400fe74:	1ce6b03a 	or	r19,r3,r19
 400fe78:	80800005 	stb	r2,0(r16)
 400fe7c:	9d84b03a 	or	r2,r19,r22
 400fe80:	103ff51e 	bne	r2,zero,400fe58 <__alt_data_end+0xfc00fe58>
 400fe84:	d8c02817 	ldw	r3,160(sp)
 400fe88:	1c07c83a 	sub	r3,r3,r16
 400fe8c:	d8c02e15 	stw	r3,184(sp)
 400fe90:	003ecc06 	br	400f9c4 <__alt_data_end+0xfc00f9c4>
 400fe94:	18c03fcc 	andi	r3,r3,255
 400fe98:	183e9f26 	beq	r3,zero,400f918 <__alt_data_end+0xfc00f918>
 400fe9c:	d9c02785 	stb	r7,158(sp)
 400fea0:	003e9d06 	br	400f918 <__alt_data_end+0xfc00f918>
 400fea4:	00c00044 	movi	r3,1
 400fea8:	01c00ac4 	movi	r7,43
 400feac:	ac400007 	ldb	r17,0(r21)
 400feb0:	003d5e06 	br	400f42c <__alt_data_end+0xfc00f42c>
 400feb4:	94800814 	ori	r18,r18,32
 400feb8:	ac400007 	ldb	r17,0(r21)
 400febc:	003d5b06 	br	400f42c <__alt_data_end+0xfc00f42c>
 400fec0:	d8c02d17 	ldw	r3,180(sp)
 400fec4:	d8002785 	stb	zero,158(sp)
 400fec8:	1c000017 	ldw	r16,0(r3)
 400fecc:	1cc00104 	addi	r19,r3,4
 400fed0:	80041926 	beq	r16,zero,4010f38 <___vfprintf_internal_r+0x1c90>
 400fed4:	d9002917 	ldw	r4,164(sp)
 400fed8:	2003d016 	blt	r4,zero,4010e1c <___vfprintf_internal_r+0x1b74>
 400fedc:	200d883a 	mov	r6,r4
 400fee0:	000b883a 	mov	r5,zero
 400fee4:	8009883a 	mov	r4,r16
 400fee8:	da003d15 	stw	r8,244(sp)
 400feec:	40142ac0 	call	40142ac <memchr>
 400fef0:	da003d17 	ldw	r8,244(sp)
 400fef4:	10045426 	beq	r2,zero,4011048 <___vfprintf_internal_r+0x1da0>
 400fef8:	1405c83a 	sub	r2,r2,r16
 400fefc:	d8802e15 	stw	r2,184(sp)
 400ff00:	1003cc16 	blt	r2,zero,4010e34 <___vfprintf_internal_r+0x1b8c>
 400ff04:	df002783 	ldbu	fp,158(sp)
 400ff08:	d8802a15 	stw	r2,168(sp)
 400ff0c:	dcc02d15 	stw	r19,180(sp)
 400ff10:	d8002915 	stw	zero,164(sp)
 400ff14:	d8003215 	stw	zero,200(sp)
 400ff18:	003eb006 	br	400f9dc <__alt_data_end+0xfc00f9dc>
 400ff1c:	18c03fcc 	andi	r3,r3,255
 400ff20:	183f9b26 	beq	r3,zero,400fd90 <__alt_data_end+0xfc00fd90>
 400ff24:	d9c02785 	stb	r7,158(sp)
 400ff28:	003f9906 	br	400fd90 <__alt_data_end+0xfc00fd90>
 400ff2c:	18c03fcc 	andi	r3,r3,255
 400ff30:	1805551e 	bne	r3,zero,4011488 <___vfprintf_internal_r+0x21e0>
 400ff34:	014100b4 	movhi	r5,1026
 400ff38:	297fc404 	addi	r5,r5,-240
 400ff3c:	d9403915 	stw	r5,228(sp)
 400ff40:	9080080c 	andi	r2,r18,32
 400ff44:	103fae1e 	bne	r2,zero,400fe00 <__alt_data_end+0xfc00fe00>
 400ff48:	9080040c 	andi	r2,r18,16
 400ff4c:	1002de26 	beq	r2,zero,4010ac8 <___vfprintf_internal_r+0x1820>
 400ff50:	d8c02d17 	ldw	r3,180(sp)
 400ff54:	002d883a 	mov	r22,zero
 400ff58:	1cc00017 	ldw	r19,0(r3)
 400ff5c:	18c00104 	addi	r3,r3,4
 400ff60:	d8c02d15 	stw	r3,180(sp)
 400ff64:	003fab06 	br	400fe14 <__alt_data_end+0xfc00fe14>
 400ff68:	38803fcc 	andi	r2,r7,255
 400ff6c:	1080201c 	xori	r2,r2,128
 400ff70:	10bfe004 	addi	r2,r2,-128
 400ff74:	1002d21e 	bne	r2,zero,4010ac0 <___vfprintf_internal_r+0x1818>
 400ff78:	00c00044 	movi	r3,1
 400ff7c:	01c00804 	movi	r7,32
 400ff80:	ac400007 	ldb	r17,0(r21)
 400ff84:	003d2906 	br	400f42c <__alt_data_end+0xfc00f42c>
 400ff88:	94800054 	ori	r18,r18,1
 400ff8c:	ac400007 	ldb	r17,0(r21)
 400ff90:	003d2606 	br	400f42c <__alt_data_end+0xfc00f42c>
 400ff94:	18c03fcc 	andi	r3,r3,255
 400ff98:	183e0526 	beq	r3,zero,400f7b0 <__alt_data_end+0xfc00f7b0>
 400ff9c:	d9c02785 	stb	r7,158(sp)
 400ffa0:	003e0306 	br	400f7b0 <__alt_data_end+0xfc00f7b0>
 400ffa4:	94801014 	ori	r18,r18,64
 400ffa8:	ac400007 	ldb	r17,0(r21)
 400ffac:	003d1f06 	br	400f42c <__alt_data_end+0xfc00f42c>
 400ffb0:	ac400007 	ldb	r17,0(r21)
 400ffb4:	8a438726 	beq	r17,r9,4010dd4 <___vfprintf_internal_r+0x1b2c>
 400ffb8:	94800414 	ori	r18,r18,16
 400ffbc:	003d1b06 	br	400f42c <__alt_data_end+0xfc00f42c>
 400ffc0:	18c03fcc 	andi	r3,r3,255
 400ffc4:	1805341e 	bne	r3,zero,4011498 <___vfprintf_internal_r+0x21f0>
 400ffc8:	9080080c 	andi	r2,r18,32
 400ffcc:	1002cd26 	beq	r2,zero,4010b04 <___vfprintf_internal_r+0x185c>
 400ffd0:	d9402d17 	ldw	r5,180(sp)
 400ffd4:	d9002f17 	ldw	r4,188(sp)
 400ffd8:	28800017 	ldw	r2,0(r5)
 400ffdc:	2007d7fa 	srai	r3,r4,31
 400ffe0:	29400104 	addi	r5,r5,4
 400ffe4:	d9402d15 	stw	r5,180(sp)
 400ffe8:	11000015 	stw	r4,0(r2)
 400ffec:	10c00115 	stw	r3,4(r2)
 400fff0:	003ce506 	br	400f388 <__alt_data_end+0xfc00f388>
 400fff4:	d8c02d17 	ldw	r3,180(sp)
 400fff8:	d9002d17 	ldw	r4,180(sp)
 400fffc:	d8002785 	stb	zero,158(sp)
 4010000:	18800017 	ldw	r2,0(r3)
 4010004:	21000104 	addi	r4,r4,4
 4010008:	00c00044 	movi	r3,1
 401000c:	d8c02a15 	stw	r3,168(sp)
 4010010:	d8801405 	stb	r2,80(sp)
 4010014:	d9002d15 	stw	r4,180(sp)
 4010018:	d8c02e15 	stw	r3,184(sp)
 401001c:	d8002915 	stw	zero,164(sp)
 4010020:	d8003215 	stw	zero,200(sp)
 4010024:	dc001404 	addi	r16,sp,80
 4010028:	0039883a 	mov	fp,zero
 401002c:	003e7206 	br	400f9f8 <__alt_data_end+0xfc00f9f8>
 4010030:	010100b4 	movhi	r4,1026
 4010034:	213fc404 	addi	r4,r4,-240
 4010038:	0039883a 	mov	fp,zero
 401003c:	d9003915 	stw	r4,228(sp)
 4010040:	04401e04 	movi	r17,120
 4010044:	003f8206 	br	400fe50 <__alt_data_end+0xfc00fe50>
 4010048:	18c03fcc 	andi	r3,r3,255
 401004c:	1805061e 	bne	r3,zero,4011468 <___vfprintf_internal_r+0x21c0>
 4010050:	883d9126 	beq	r17,zero,400f698 <__alt_data_end+0xfc00f698>
 4010054:	00c00044 	movi	r3,1
 4010058:	d8c02a15 	stw	r3,168(sp)
 401005c:	dc401405 	stb	r17,80(sp)
 4010060:	d8002785 	stb	zero,158(sp)
 4010064:	003fec06 	br	4010018 <__alt_data_end+0xfc010018>
 4010068:	014100b4 	movhi	r5,1026
 401006c:	297fc404 	addi	r5,r5,-240
 4010070:	d9403915 	stw	r5,228(sp)
 4010074:	d8c02d15 	stw	r3,180(sp)
 4010078:	1025883a 	mov	r18,r2
 401007c:	04401e04 	movi	r17,120
 4010080:	9d84b03a 	or	r2,r19,r22
 4010084:	1000fc1e 	bne	r2,zero,4010478 <___vfprintf_internal_r+0x11d0>
 4010088:	0039883a 	mov	fp,zero
 401008c:	00800084 	movi	r2,2
 4010090:	10803fcc 	andi	r2,r2,255
 4010094:	00c00044 	movi	r3,1
 4010098:	10c20f26 	beq	r2,r3,40108d8 <___vfprintf_internal_r+0x1630>
 401009c:	00c00084 	movi	r3,2
 40100a0:	10fd6326 	beq	r2,r3,400f630 <__alt_data_end+0xfc00f630>
 40100a4:	003e2d06 	br	400f95c <__alt_data_end+0xfc00f95c>
 40100a8:	d8c02017 	ldw	r3,128(sp)
 40100ac:	003e9306 	br	400fafc <__alt_data_end+0xfc00fafc>
 40100b0:	00801944 	movi	r2,101
 40100b4:	14407e0e 	bge	r2,r17,40102b0 <___vfprintf_internal_r+0x1008>
 40100b8:	d9003617 	ldw	r4,216(sp)
 40100bc:	d9403817 	ldw	r5,224(sp)
 40100c0:	000d883a 	mov	r6,zero
 40100c4:	000f883a 	mov	r7,zero
 40100c8:	d8c03c15 	stw	r3,240(sp)
 40100cc:	da003d15 	stw	r8,244(sp)
 40100d0:	401ad300 	call	401ad30 <__eqdf2>
 40100d4:	d8c03c17 	ldw	r3,240(sp)
 40100d8:	da003d17 	ldw	r8,244(sp)
 40100dc:	1000f71e 	bne	r2,zero,40104bc <___vfprintf_internal_r+0x1214>
 40100e0:	d8801f17 	ldw	r2,124(sp)
 40100e4:	010100b4 	movhi	r4,1026
 40100e8:	213fcb04 	addi	r4,r4,-212
 40100ec:	18c00044 	addi	r3,r3,1
 40100f0:	10800044 	addi	r2,r2,1
 40100f4:	41000015 	stw	r4,0(r8)
 40100f8:	01000044 	movi	r4,1
 40100fc:	41000115 	stw	r4,4(r8)
 4010100:	d8c02015 	stw	r3,128(sp)
 4010104:	d8801f15 	stw	r2,124(sp)
 4010108:	010001c4 	movi	r4,7
 401010c:	2082b816 	blt	r4,r2,4010bf0 <___vfprintf_internal_r+0x1948>
 4010110:	42000204 	addi	r8,r8,8
 4010114:	d8802617 	ldw	r2,152(sp)
 4010118:	d9403317 	ldw	r5,204(sp)
 401011c:	11400216 	blt	r2,r5,4010128 <___vfprintf_internal_r+0xe80>
 4010120:	9080004c 	andi	r2,r18,1
 4010124:	103ed526 	beq	r2,zero,400fc7c <__alt_data_end+0xfc00fc7c>
 4010128:	d8803717 	ldw	r2,220(sp)
 401012c:	d9003417 	ldw	r4,208(sp)
 4010130:	d9403717 	ldw	r5,220(sp)
 4010134:	1887883a 	add	r3,r3,r2
 4010138:	d8801f17 	ldw	r2,124(sp)
 401013c:	41000015 	stw	r4,0(r8)
 4010140:	41400115 	stw	r5,4(r8)
 4010144:	10800044 	addi	r2,r2,1
 4010148:	d8c02015 	stw	r3,128(sp)
 401014c:	d8801f15 	stw	r2,124(sp)
 4010150:	010001c4 	movi	r4,7
 4010154:	20832916 	blt	r4,r2,4010dfc <___vfprintf_internal_r+0x1b54>
 4010158:	42000204 	addi	r8,r8,8
 401015c:	d8803317 	ldw	r2,204(sp)
 4010160:	143fffc4 	addi	r16,r2,-1
 4010164:	043ec50e 	bge	zero,r16,400fc7c <__alt_data_end+0xfc00fc7c>
 4010168:	04400404 	movi	r17,16
 401016c:	d8801f17 	ldw	r2,124(sp)
 4010170:	8c00880e 	bge	r17,r16,4010394 <___vfprintf_internal_r+0x10ec>
 4010174:	014100b4 	movhi	r5,1026
 4010178:	297fd384 	addi	r5,r5,-178
 401017c:	d9402b15 	stw	r5,172(sp)
 4010180:	058001c4 	movi	r22,7
 4010184:	dcc02c17 	ldw	r19,176(sp)
 4010188:	00000306 	br	4010198 <___vfprintf_internal_r+0xef0>
 401018c:	42000204 	addi	r8,r8,8
 4010190:	843ffc04 	addi	r16,r16,-16
 4010194:	8c00820e 	bge	r17,r16,40103a0 <___vfprintf_internal_r+0x10f8>
 4010198:	18c00404 	addi	r3,r3,16
 401019c:	10800044 	addi	r2,r2,1
 40101a0:	45000015 	stw	r20,0(r8)
 40101a4:	44400115 	stw	r17,4(r8)
 40101a8:	d8c02015 	stw	r3,128(sp)
 40101ac:	d8801f15 	stw	r2,124(sp)
 40101b0:	b0bff60e 	bge	r22,r2,401018c <__alt_data_end+0xfc01018c>
 40101b4:	d9801e04 	addi	r6,sp,120
 40101b8:	b80b883a 	mov	r5,r23
 40101bc:	9809883a 	mov	r4,r19
 40101c0:	401726c0 	call	401726c <__sprint_r>
 40101c4:	103d3a1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 40101c8:	d8c02017 	ldw	r3,128(sp)
 40101cc:	d8801f17 	ldw	r2,124(sp)
 40101d0:	da000404 	addi	r8,sp,16
 40101d4:	003fee06 	br	4010190 <__alt_data_end+0xfc010190>
 40101d8:	d9403117 	ldw	r5,196(sp)
 40101dc:	d8802a17 	ldw	r2,168(sp)
 40101e0:	28adc83a 	sub	r22,r5,r2
 40101e4:	05be630e 	bge	zero,r22,400fb74 <__alt_data_end+0xfc00fb74>
 40101e8:	07000404 	movi	fp,16
 40101ec:	d8801f17 	ldw	r2,124(sp)
 40101f0:	e5838f0e 	bge	fp,r22,4011030 <___vfprintf_internal_r+0x1d88>
 40101f4:	014100b4 	movhi	r5,1026
 40101f8:	297fd384 	addi	r5,r5,-178
 40101fc:	dc403015 	stw	r17,192(sp)
 4010200:	d9402b15 	stw	r5,172(sp)
 4010204:	b023883a 	mov	r17,r22
 4010208:	04c001c4 	movi	r19,7
 401020c:	a82d883a 	mov	r22,r21
 4010210:	902b883a 	mov	r21,r18
 4010214:	8025883a 	mov	r18,r16
 4010218:	dc002c17 	ldw	r16,176(sp)
 401021c:	00000306 	br	401022c <___vfprintf_internal_r+0xf84>
 4010220:	8c7ffc04 	addi	r17,r17,-16
 4010224:	42000204 	addi	r8,r8,8
 4010228:	e440110e 	bge	fp,r17,4010270 <___vfprintf_internal_r+0xfc8>
 401022c:	18c00404 	addi	r3,r3,16
 4010230:	10800044 	addi	r2,r2,1
 4010234:	45000015 	stw	r20,0(r8)
 4010238:	47000115 	stw	fp,4(r8)
 401023c:	d8c02015 	stw	r3,128(sp)
 4010240:	d8801f15 	stw	r2,124(sp)
 4010244:	98bff60e 	bge	r19,r2,4010220 <__alt_data_end+0xfc010220>
 4010248:	d9801e04 	addi	r6,sp,120
 401024c:	b80b883a 	mov	r5,r23
 4010250:	8009883a 	mov	r4,r16
 4010254:	401726c0 	call	401726c <__sprint_r>
 4010258:	103d151e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 401025c:	8c7ffc04 	addi	r17,r17,-16
 4010260:	d8c02017 	ldw	r3,128(sp)
 4010264:	d8801f17 	ldw	r2,124(sp)
 4010268:	da000404 	addi	r8,sp,16
 401026c:	e47fef16 	blt	fp,r17,401022c <__alt_data_end+0xfc01022c>
 4010270:	9021883a 	mov	r16,r18
 4010274:	a825883a 	mov	r18,r21
 4010278:	b02b883a 	mov	r21,r22
 401027c:	882d883a 	mov	r22,r17
 4010280:	dc403017 	ldw	r17,192(sp)
 4010284:	d9002b17 	ldw	r4,172(sp)
 4010288:	1d87883a 	add	r3,r3,r22
 401028c:	10800044 	addi	r2,r2,1
 4010290:	41000015 	stw	r4,0(r8)
 4010294:	45800115 	stw	r22,4(r8)
 4010298:	d8c02015 	stw	r3,128(sp)
 401029c:	d8801f15 	stw	r2,124(sp)
 40102a0:	010001c4 	movi	r4,7
 40102a4:	20818e16 	blt	r4,r2,40108e0 <___vfprintf_internal_r+0x1638>
 40102a8:	42000204 	addi	r8,r8,8
 40102ac:	003e3106 	br	400fb74 <__alt_data_end+0xfc00fb74>
 40102b0:	d9403317 	ldw	r5,204(sp)
 40102b4:	00800044 	movi	r2,1
 40102b8:	18c00044 	addi	r3,r3,1
 40102bc:	1141530e 	bge	r2,r5,401080c <___vfprintf_internal_r+0x1564>
 40102c0:	dc401f17 	ldw	r17,124(sp)
 40102c4:	00800044 	movi	r2,1
 40102c8:	40800115 	stw	r2,4(r8)
 40102cc:	8c400044 	addi	r17,r17,1
 40102d0:	44000015 	stw	r16,0(r8)
 40102d4:	d8c02015 	stw	r3,128(sp)
 40102d8:	dc401f15 	stw	r17,124(sp)
 40102dc:	008001c4 	movi	r2,7
 40102e0:	14416b16 	blt	r2,r17,4010890 <___vfprintf_internal_r+0x15e8>
 40102e4:	42000204 	addi	r8,r8,8
 40102e8:	d8803717 	ldw	r2,220(sp)
 40102ec:	d9003417 	ldw	r4,208(sp)
 40102f0:	8c400044 	addi	r17,r17,1
 40102f4:	10c7883a 	add	r3,r2,r3
 40102f8:	40800115 	stw	r2,4(r8)
 40102fc:	41000015 	stw	r4,0(r8)
 4010300:	d8c02015 	stw	r3,128(sp)
 4010304:	dc401f15 	stw	r17,124(sp)
 4010308:	008001c4 	movi	r2,7
 401030c:	14416916 	blt	r2,r17,40108b4 <___vfprintf_internal_r+0x160c>
 4010310:	45800204 	addi	r22,r8,8
 4010314:	d9003617 	ldw	r4,216(sp)
 4010318:	d9403817 	ldw	r5,224(sp)
 401031c:	000d883a 	mov	r6,zero
 4010320:	000f883a 	mov	r7,zero
 4010324:	d8c03c15 	stw	r3,240(sp)
 4010328:	401ad300 	call	401ad30 <__eqdf2>
 401032c:	d8c03c17 	ldw	r3,240(sp)
 4010330:	1000bc26 	beq	r2,zero,4010624 <___vfprintf_internal_r+0x137c>
 4010334:	d9403317 	ldw	r5,204(sp)
 4010338:	84000044 	addi	r16,r16,1
 401033c:	8c400044 	addi	r17,r17,1
 4010340:	28bfffc4 	addi	r2,r5,-1
 4010344:	1887883a 	add	r3,r3,r2
 4010348:	b0800115 	stw	r2,4(r22)
 401034c:	b4000015 	stw	r16,0(r22)
 4010350:	d8c02015 	stw	r3,128(sp)
 4010354:	dc401f15 	stw	r17,124(sp)
 4010358:	008001c4 	movi	r2,7
 401035c:	14414316 	blt	r2,r17,401086c <___vfprintf_internal_r+0x15c4>
 4010360:	b5800204 	addi	r22,r22,8
 4010364:	d9003a17 	ldw	r4,232(sp)
 4010368:	df0022c4 	addi	fp,sp,139
 401036c:	8c400044 	addi	r17,r17,1
 4010370:	20c7883a 	add	r3,r4,r3
 4010374:	b7000015 	stw	fp,0(r22)
 4010378:	b1000115 	stw	r4,4(r22)
 401037c:	d8c02015 	stw	r3,128(sp)
 4010380:	dc401f15 	stw	r17,124(sp)
 4010384:	008001c4 	movi	r2,7
 4010388:	14400e16 	blt	r2,r17,40103c4 <___vfprintf_internal_r+0x111c>
 401038c:	b2000204 	addi	r8,r22,8
 4010390:	003e3a06 	br	400fc7c <__alt_data_end+0xfc00fc7c>
 4010394:	010100b4 	movhi	r4,1026
 4010398:	213fd384 	addi	r4,r4,-178
 401039c:	d9002b15 	stw	r4,172(sp)
 40103a0:	d9002b17 	ldw	r4,172(sp)
 40103a4:	1c07883a 	add	r3,r3,r16
 40103a8:	44000115 	stw	r16,4(r8)
 40103ac:	41000015 	stw	r4,0(r8)
 40103b0:	10800044 	addi	r2,r2,1
 40103b4:	d8c02015 	stw	r3,128(sp)
 40103b8:	d8801f15 	stw	r2,124(sp)
 40103bc:	010001c4 	movi	r4,7
 40103c0:	20be2d0e 	bge	r4,r2,400fc78 <__alt_data_end+0xfc00fc78>
 40103c4:	d9002c17 	ldw	r4,176(sp)
 40103c8:	d9801e04 	addi	r6,sp,120
 40103cc:	b80b883a 	mov	r5,r23
 40103d0:	401726c0 	call	401726c <__sprint_r>
 40103d4:	103cb61e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 40103d8:	d8c02017 	ldw	r3,128(sp)
 40103dc:	da000404 	addi	r8,sp,16
 40103e0:	003e2606 	br	400fc7c <__alt_data_end+0xfc00fc7c>
 40103e4:	d9002c17 	ldw	r4,176(sp)
 40103e8:	d9801e04 	addi	r6,sp,120
 40103ec:	b80b883a 	mov	r5,r23
 40103f0:	401726c0 	call	401726c <__sprint_r>
 40103f4:	103e5d26 	beq	r2,zero,400fd6c <__alt_data_end+0xfc00fd6c>
 40103f8:	003cad06 	br	400f6b0 <__alt_data_end+0xfc00f6b0>
 40103fc:	d9002c17 	ldw	r4,176(sp)
 4010400:	d9801e04 	addi	r6,sp,120
 4010404:	b80b883a 	mov	r5,r23
 4010408:	401726c0 	call	401726c <__sprint_r>
 401040c:	103ca81e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010410:	d8c02017 	ldw	r3,128(sp)
 4010414:	da000404 	addi	r8,sp,16
 4010418:	003e0b06 	br	400fc48 <__alt_data_end+0xfc00fc48>
 401041c:	d9002c17 	ldw	r4,176(sp)
 4010420:	d9801e04 	addi	r6,sp,120
 4010424:	b80b883a 	mov	r5,r23
 4010428:	401726c0 	call	401726c <__sprint_r>
 401042c:	103ca01e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010430:	d8c02017 	ldw	r3,128(sp)
 4010434:	da000404 	addi	r8,sp,16
 4010438:	003dbd06 	br	400fb30 <__alt_data_end+0xfc00fb30>
 401043c:	d9002c17 	ldw	r4,176(sp)
 4010440:	d9801e04 	addi	r6,sp,120
 4010444:	b80b883a 	mov	r5,r23
 4010448:	401726c0 	call	401726c <__sprint_r>
 401044c:	103c981e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010450:	d8c02017 	ldw	r3,128(sp)
 4010454:	da000404 	addi	r8,sp,16
 4010458:	003dc306 	br	400fb68 <__alt_data_end+0xfc00fb68>
 401045c:	d8802917 	ldw	r2,164(sp)
 4010460:	d8002785 	stb	zero,158(sp)
 4010464:	103f0616 	blt	r2,zero,4010080 <__alt_data_end+0xfc010080>
 4010468:	00ffdfc4 	movi	r3,-129
 401046c:	9d84b03a 	or	r2,r19,r22
 4010470:	90e4703a 	and	r18,r18,r3
 4010474:	103c6b26 	beq	r2,zero,400f624 <__alt_data_end+0xfc00f624>
 4010478:	0039883a 	mov	fp,zero
 401047c:	003e7406 	br	400fe50 <__alt_data_end+0xfc00fe50>
 4010480:	9080040c 	andi	r2,r18,16
 4010484:	1001b326 	beq	r2,zero,4010b54 <___vfprintf_internal_r+0x18ac>
 4010488:	d9002d17 	ldw	r4,180(sp)
 401048c:	d9402917 	ldw	r5,164(sp)
 4010490:	d8002785 	stb	zero,158(sp)
 4010494:	20800104 	addi	r2,r4,4
 4010498:	24c00017 	ldw	r19,0(r4)
 401049c:	002d883a 	mov	r22,zero
 40104a0:	2801b516 	blt	r5,zero,4010b78 <___vfprintf_internal_r+0x18d0>
 40104a4:	00ffdfc4 	movi	r3,-129
 40104a8:	d8802d15 	stw	r2,180(sp)
 40104ac:	90e4703a 	and	r18,r18,r3
 40104b0:	983d2726 	beq	r19,zero,400f950 <__alt_data_end+0xfc00f950>
 40104b4:	0039883a 	mov	fp,zero
 40104b8:	003d2a06 	br	400f964 <__alt_data_end+0xfc00f964>
 40104bc:	dc402617 	ldw	r17,152(sp)
 40104c0:	0441d30e 	bge	zero,r17,4010c10 <___vfprintf_internal_r+0x1968>
 40104c4:	dc403217 	ldw	r17,200(sp)
 40104c8:	d8803317 	ldw	r2,204(sp)
 40104cc:	1440010e 	bge	r2,r17,40104d4 <___vfprintf_internal_r+0x122c>
 40104d0:	1023883a 	mov	r17,r2
 40104d4:	04400a0e 	bge	zero,r17,4010500 <___vfprintf_internal_r+0x1258>
 40104d8:	d8801f17 	ldw	r2,124(sp)
 40104dc:	1c47883a 	add	r3,r3,r17
 40104e0:	44000015 	stw	r16,0(r8)
 40104e4:	10800044 	addi	r2,r2,1
 40104e8:	44400115 	stw	r17,4(r8)
 40104ec:	d8c02015 	stw	r3,128(sp)
 40104f0:	d8801f15 	stw	r2,124(sp)
 40104f4:	010001c4 	movi	r4,7
 40104f8:	20826516 	blt	r4,r2,4010e90 <___vfprintf_internal_r+0x1be8>
 40104fc:	42000204 	addi	r8,r8,8
 4010500:	88026116 	blt	r17,zero,4010e88 <___vfprintf_internal_r+0x1be0>
 4010504:	d9003217 	ldw	r4,200(sp)
 4010508:	2463c83a 	sub	r17,r4,r17
 401050c:	04407b0e 	bge	zero,r17,40106fc <___vfprintf_internal_r+0x1454>
 4010510:	05800404 	movi	r22,16
 4010514:	d8801f17 	ldw	r2,124(sp)
 4010518:	b4419d0e 	bge	r22,r17,4010b90 <___vfprintf_internal_r+0x18e8>
 401051c:	010100b4 	movhi	r4,1026
 4010520:	213fd384 	addi	r4,r4,-178
 4010524:	d9002b15 	stw	r4,172(sp)
 4010528:	070001c4 	movi	fp,7
 401052c:	dcc02c17 	ldw	r19,176(sp)
 4010530:	00000306 	br	4010540 <___vfprintf_internal_r+0x1298>
 4010534:	42000204 	addi	r8,r8,8
 4010538:	8c7ffc04 	addi	r17,r17,-16
 401053c:	b441970e 	bge	r22,r17,4010b9c <___vfprintf_internal_r+0x18f4>
 4010540:	18c00404 	addi	r3,r3,16
 4010544:	10800044 	addi	r2,r2,1
 4010548:	45000015 	stw	r20,0(r8)
 401054c:	45800115 	stw	r22,4(r8)
 4010550:	d8c02015 	stw	r3,128(sp)
 4010554:	d8801f15 	stw	r2,124(sp)
 4010558:	e0bff60e 	bge	fp,r2,4010534 <__alt_data_end+0xfc010534>
 401055c:	d9801e04 	addi	r6,sp,120
 4010560:	b80b883a 	mov	r5,r23
 4010564:	9809883a 	mov	r4,r19
 4010568:	401726c0 	call	401726c <__sprint_r>
 401056c:	103c501e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010570:	d8c02017 	ldw	r3,128(sp)
 4010574:	d8801f17 	ldw	r2,124(sp)
 4010578:	da000404 	addi	r8,sp,16
 401057c:	003fee06 	br	4010538 <__alt_data_end+0xfc010538>
 4010580:	d9002c17 	ldw	r4,176(sp)
 4010584:	d9801e04 	addi	r6,sp,120
 4010588:	b80b883a 	mov	r5,r23
 401058c:	401726c0 	call	401726c <__sprint_r>
 4010590:	103c471e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010594:	d8c02017 	ldw	r3,128(sp)
 4010598:	df002787 	ldb	fp,158(sp)
 401059c:	da000404 	addi	r8,sp,16
 40105a0:	003d5606 	br	400fafc <__alt_data_end+0xfc00fafc>
 40105a4:	9080040c 	andi	r2,r18,16
 40105a8:	10016126 	beq	r2,zero,4010b30 <___vfprintf_internal_r+0x1888>
 40105ac:	d8802d17 	ldw	r2,180(sp)
 40105b0:	14c00017 	ldw	r19,0(r2)
 40105b4:	10800104 	addi	r2,r2,4
 40105b8:	d8802d15 	stw	r2,180(sp)
 40105bc:	982dd7fa 	srai	r22,r19,31
 40105c0:	b005883a 	mov	r2,r22
 40105c4:	003c8206 	br	400f7d0 <__alt_data_end+0xfc00f7d0>
 40105c8:	9080040c 	andi	r2,r18,16
 40105cc:	10003526 	beq	r2,zero,40106a4 <___vfprintf_internal_r+0x13fc>
 40105d0:	d9402d17 	ldw	r5,180(sp)
 40105d4:	d8c02917 	ldw	r3,164(sp)
 40105d8:	d8002785 	stb	zero,158(sp)
 40105dc:	28800104 	addi	r2,r5,4
 40105e0:	2cc00017 	ldw	r19,0(r5)
 40105e4:	002d883a 	mov	r22,zero
 40105e8:	18003716 	blt	r3,zero,40106c8 <___vfprintf_internal_r+0x1420>
 40105ec:	00ffdfc4 	movi	r3,-129
 40105f0:	d8802d15 	stw	r2,180(sp)
 40105f4:	90e4703a 	and	r18,r18,r3
 40105f8:	0039883a 	mov	fp,zero
 40105fc:	983df326 	beq	r19,zero,400fdcc <__alt_data_end+0xfc00fdcc>
 4010600:	00800244 	movi	r2,9
 4010604:	14fc7b36 	bltu	r2,r19,400f7f4 <__alt_data_end+0xfc00f7f4>
 4010608:	d8c02817 	ldw	r3,160(sp)
 401060c:	dc001dc4 	addi	r16,sp,119
 4010610:	9cc00c04 	addi	r19,r19,48
 4010614:	1c07c83a 	sub	r3,r3,r16
 4010618:	dcc01dc5 	stb	r19,119(sp)
 401061c:	d8c02e15 	stw	r3,184(sp)
 4010620:	003ce806 	br	400f9c4 <__alt_data_end+0xfc00f9c4>
 4010624:	d8803317 	ldw	r2,204(sp)
 4010628:	143fffc4 	addi	r16,r2,-1
 401062c:	043f4d0e 	bge	zero,r16,4010364 <__alt_data_end+0xfc010364>
 4010630:	07000404 	movi	fp,16
 4010634:	e400810e 	bge	fp,r16,401083c <___vfprintf_internal_r+0x1594>
 4010638:	014100b4 	movhi	r5,1026
 401063c:	297fd384 	addi	r5,r5,-178
 4010640:	d9402b15 	stw	r5,172(sp)
 4010644:	01c001c4 	movi	r7,7
 4010648:	dcc02c17 	ldw	r19,176(sp)
 401064c:	00000306 	br	401065c <___vfprintf_internal_r+0x13b4>
 4010650:	b5800204 	addi	r22,r22,8
 4010654:	843ffc04 	addi	r16,r16,-16
 4010658:	e4007b0e 	bge	fp,r16,4010848 <___vfprintf_internal_r+0x15a0>
 401065c:	18c00404 	addi	r3,r3,16
 4010660:	8c400044 	addi	r17,r17,1
 4010664:	b5000015 	stw	r20,0(r22)
 4010668:	b7000115 	stw	fp,4(r22)
 401066c:	d8c02015 	stw	r3,128(sp)
 4010670:	dc401f15 	stw	r17,124(sp)
 4010674:	3c7ff60e 	bge	r7,r17,4010650 <__alt_data_end+0xfc010650>
 4010678:	d9801e04 	addi	r6,sp,120
 401067c:	b80b883a 	mov	r5,r23
 4010680:	9809883a 	mov	r4,r19
 4010684:	d9c03c15 	stw	r7,240(sp)
 4010688:	401726c0 	call	401726c <__sprint_r>
 401068c:	d9c03c17 	ldw	r7,240(sp)
 4010690:	103c071e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010694:	d8c02017 	ldw	r3,128(sp)
 4010698:	dc401f17 	ldw	r17,124(sp)
 401069c:	dd800404 	addi	r22,sp,16
 40106a0:	003fec06 	br	4010654 <__alt_data_end+0xfc010654>
 40106a4:	9080100c 	andi	r2,r18,64
 40106a8:	d8002785 	stb	zero,158(sp)
 40106ac:	10010e26 	beq	r2,zero,4010ae8 <___vfprintf_internal_r+0x1840>
 40106b0:	d9002d17 	ldw	r4,180(sp)
 40106b4:	d9402917 	ldw	r5,164(sp)
 40106b8:	002d883a 	mov	r22,zero
 40106bc:	20800104 	addi	r2,r4,4
 40106c0:	24c0000b 	ldhu	r19,0(r4)
 40106c4:	283fc90e 	bge	r5,zero,40105ec <__alt_data_end+0xfc0105ec>
 40106c8:	d8802d15 	stw	r2,180(sp)
 40106cc:	0039883a 	mov	fp,zero
 40106d0:	9d84b03a 	or	r2,r19,r22
 40106d4:	103c461e 	bne	r2,zero,400f7f0 <__alt_data_end+0xfc00f7f0>
 40106d8:	00800044 	movi	r2,1
 40106dc:	003e6c06 	br	4010090 <__alt_data_end+0xfc010090>
 40106e0:	d9002c17 	ldw	r4,176(sp)
 40106e4:	d9801e04 	addi	r6,sp,120
 40106e8:	b80b883a 	mov	r5,r23
 40106ec:	401726c0 	call	401726c <__sprint_r>
 40106f0:	103bef1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 40106f4:	d8c02017 	ldw	r3,128(sp)
 40106f8:	da000404 	addi	r8,sp,16
 40106fc:	d9003217 	ldw	r4,200(sp)
 4010700:	d8802617 	ldw	r2,152(sp)
 4010704:	d9403317 	ldw	r5,204(sp)
 4010708:	8123883a 	add	r17,r16,r4
 401070c:	11400216 	blt	r2,r5,4010718 <___vfprintf_internal_r+0x1470>
 4010710:	9100004c 	andi	r4,r18,1
 4010714:	20000d26 	beq	r4,zero,401074c <___vfprintf_internal_r+0x14a4>
 4010718:	d9003717 	ldw	r4,220(sp)
 401071c:	d9403417 	ldw	r5,208(sp)
 4010720:	1907883a 	add	r3,r3,r4
 4010724:	d9001f17 	ldw	r4,124(sp)
 4010728:	41400015 	stw	r5,0(r8)
 401072c:	d9403717 	ldw	r5,220(sp)
 4010730:	21000044 	addi	r4,r4,1
 4010734:	d8c02015 	stw	r3,128(sp)
 4010738:	41400115 	stw	r5,4(r8)
 401073c:	d9001f15 	stw	r4,124(sp)
 4010740:	014001c4 	movi	r5,7
 4010744:	2901e816 	blt	r5,r4,4010ee8 <___vfprintf_internal_r+0x1c40>
 4010748:	42000204 	addi	r8,r8,8
 401074c:	d9003317 	ldw	r4,204(sp)
 4010750:	8121883a 	add	r16,r16,r4
 4010754:	2085c83a 	sub	r2,r4,r2
 4010758:	8461c83a 	sub	r16,r16,r17
 401075c:	1400010e 	bge	r2,r16,4010764 <___vfprintf_internal_r+0x14bc>
 4010760:	1021883a 	mov	r16,r2
 4010764:	04000a0e 	bge	zero,r16,4010790 <___vfprintf_internal_r+0x14e8>
 4010768:	d9001f17 	ldw	r4,124(sp)
 401076c:	1c07883a 	add	r3,r3,r16
 4010770:	44400015 	stw	r17,0(r8)
 4010774:	21000044 	addi	r4,r4,1
 4010778:	44000115 	stw	r16,4(r8)
 401077c:	d8c02015 	stw	r3,128(sp)
 4010780:	d9001f15 	stw	r4,124(sp)
 4010784:	014001c4 	movi	r5,7
 4010788:	2901fb16 	blt	r5,r4,4010f78 <___vfprintf_internal_r+0x1cd0>
 401078c:	42000204 	addi	r8,r8,8
 4010790:	8001f716 	blt	r16,zero,4010f70 <___vfprintf_internal_r+0x1cc8>
 4010794:	1421c83a 	sub	r16,r2,r16
 4010798:	043d380e 	bge	zero,r16,400fc7c <__alt_data_end+0xfc00fc7c>
 401079c:	04400404 	movi	r17,16
 40107a0:	d8801f17 	ldw	r2,124(sp)
 40107a4:	8c3efb0e 	bge	r17,r16,4010394 <__alt_data_end+0xfc010394>
 40107a8:	014100b4 	movhi	r5,1026
 40107ac:	297fd384 	addi	r5,r5,-178
 40107b0:	d9402b15 	stw	r5,172(sp)
 40107b4:	058001c4 	movi	r22,7
 40107b8:	dcc02c17 	ldw	r19,176(sp)
 40107bc:	00000306 	br	40107cc <___vfprintf_internal_r+0x1524>
 40107c0:	42000204 	addi	r8,r8,8
 40107c4:	843ffc04 	addi	r16,r16,-16
 40107c8:	8c3ef50e 	bge	r17,r16,40103a0 <__alt_data_end+0xfc0103a0>
 40107cc:	18c00404 	addi	r3,r3,16
 40107d0:	10800044 	addi	r2,r2,1
 40107d4:	45000015 	stw	r20,0(r8)
 40107d8:	44400115 	stw	r17,4(r8)
 40107dc:	d8c02015 	stw	r3,128(sp)
 40107e0:	d8801f15 	stw	r2,124(sp)
 40107e4:	b0bff60e 	bge	r22,r2,40107c0 <__alt_data_end+0xfc0107c0>
 40107e8:	d9801e04 	addi	r6,sp,120
 40107ec:	b80b883a 	mov	r5,r23
 40107f0:	9809883a 	mov	r4,r19
 40107f4:	401726c0 	call	401726c <__sprint_r>
 40107f8:	103bad1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 40107fc:	d8c02017 	ldw	r3,128(sp)
 4010800:	d8801f17 	ldw	r2,124(sp)
 4010804:	da000404 	addi	r8,sp,16
 4010808:	003fee06 	br	40107c4 <__alt_data_end+0xfc0107c4>
 401080c:	9088703a 	and	r4,r18,r2
 4010810:	203eab1e 	bne	r4,zero,40102c0 <__alt_data_end+0xfc0102c0>
 4010814:	dc401f17 	ldw	r17,124(sp)
 4010818:	40800115 	stw	r2,4(r8)
 401081c:	44000015 	stw	r16,0(r8)
 4010820:	8c400044 	addi	r17,r17,1
 4010824:	d8c02015 	stw	r3,128(sp)
 4010828:	dc401f15 	stw	r17,124(sp)
 401082c:	008001c4 	movi	r2,7
 4010830:	14400e16 	blt	r2,r17,401086c <___vfprintf_internal_r+0x15c4>
 4010834:	45800204 	addi	r22,r8,8
 4010838:	003eca06 	br	4010364 <__alt_data_end+0xfc010364>
 401083c:	010100b4 	movhi	r4,1026
 4010840:	213fd384 	addi	r4,r4,-178
 4010844:	d9002b15 	stw	r4,172(sp)
 4010848:	d8802b17 	ldw	r2,172(sp)
 401084c:	1c07883a 	add	r3,r3,r16
 4010850:	8c400044 	addi	r17,r17,1
 4010854:	b0800015 	stw	r2,0(r22)
 4010858:	b4000115 	stw	r16,4(r22)
 401085c:	d8c02015 	stw	r3,128(sp)
 4010860:	dc401f15 	stw	r17,124(sp)
 4010864:	008001c4 	movi	r2,7
 4010868:	147ebd0e 	bge	r2,r17,4010360 <__alt_data_end+0xfc010360>
 401086c:	d9002c17 	ldw	r4,176(sp)
 4010870:	d9801e04 	addi	r6,sp,120
 4010874:	b80b883a 	mov	r5,r23
 4010878:	401726c0 	call	401726c <__sprint_r>
 401087c:	103b8c1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010880:	d8c02017 	ldw	r3,128(sp)
 4010884:	dc401f17 	ldw	r17,124(sp)
 4010888:	dd800404 	addi	r22,sp,16
 401088c:	003eb506 	br	4010364 <__alt_data_end+0xfc010364>
 4010890:	d9002c17 	ldw	r4,176(sp)
 4010894:	d9801e04 	addi	r6,sp,120
 4010898:	b80b883a 	mov	r5,r23
 401089c:	401726c0 	call	401726c <__sprint_r>
 40108a0:	103b831e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 40108a4:	d8c02017 	ldw	r3,128(sp)
 40108a8:	dc401f17 	ldw	r17,124(sp)
 40108ac:	da000404 	addi	r8,sp,16
 40108b0:	003e8d06 	br	40102e8 <__alt_data_end+0xfc0102e8>
 40108b4:	d9002c17 	ldw	r4,176(sp)
 40108b8:	d9801e04 	addi	r6,sp,120
 40108bc:	b80b883a 	mov	r5,r23
 40108c0:	401726c0 	call	401726c <__sprint_r>
 40108c4:	103b7a1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 40108c8:	d8c02017 	ldw	r3,128(sp)
 40108cc:	dc401f17 	ldw	r17,124(sp)
 40108d0:	dd800404 	addi	r22,sp,16
 40108d4:	003e8f06 	br	4010314 <__alt_data_end+0xfc010314>
 40108d8:	0027883a 	mov	r19,zero
 40108dc:	003f4a06 	br	4010608 <__alt_data_end+0xfc010608>
 40108e0:	d9002c17 	ldw	r4,176(sp)
 40108e4:	d9801e04 	addi	r6,sp,120
 40108e8:	b80b883a 	mov	r5,r23
 40108ec:	401726c0 	call	401726c <__sprint_r>
 40108f0:	103b6f1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 40108f4:	d8c02017 	ldw	r3,128(sp)
 40108f8:	da000404 	addi	r8,sp,16
 40108fc:	003c9d06 	br	400fb74 <__alt_data_end+0xfc00fb74>
 4010900:	04e7c83a 	sub	r19,zero,r19
 4010904:	9804c03a 	cmpne	r2,r19,zero
 4010908:	05adc83a 	sub	r22,zero,r22
 401090c:	b0adc83a 	sub	r22,r22,r2
 4010910:	d8802917 	ldw	r2,164(sp)
 4010914:	07000b44 	movi	fp,45
 4010918:	df002785 	stb	fp,158(sp)
 401091c:	10017b16 	blt	r2,zero,4010f0c <___vfprintf_internal_r+0x1c64>
 4010920:	00bfdfc4 	movi	r2,-129
 4010924:	90a4703a 	and	r18,r18,r2
 4010928:	003bb106 	br	400f7f0 <__alt_data_end+0xfc00f7f0>
 401092c:	d9003617 	ldw	r4,216(sp)
 4010930:	d9403817 	ldw	r5,224(sp)
 4010934:	da003d15 	stw	r8,244(sp)
 4010938:	4015bb40 	call	4015bb4 <__fpclassifyd>
 401093c:	da003d17 	ldw	r8,244(sp)
 4010940:	1000f026 	beq	r2,zero,4010d04 <___vfprintf_internal_r+0x1a5c>
 4010944:	d9002917 	ldw	r4,164(sp)
 4010948:	05bff7c4 	movi	r22,-33
 401094c:	00bfffc4 	movi	r2,-1
 4010950:	8dac703a 	and	r22,r17,r22
 4010954:	20820026 	beq	r4,r2,4011158 <___vfprintf_internal_r+0x1eb0>
 4010958:	008011c4 	movi	r2,71
 401095c:	b081f726 	beq	r22,r2,401113c <___vfprintf_internal_r+0x1e94>
 4010960:	d9003817 	ldw	r4,224(sp)
 4010964:	90c04014 	ori	r3,r18,256
 4010968:	d8c02b15 	stw	r3,172(sp)
 401096c:	20021516 	blt	r4,zero,40111c4 <___vfprintf_internal_r+0x1f1c>
 4010970:	dcc03817 	ldw	r19,224(sp)
 4010974:	d8002a05 	stb	zero,168(sp)
 4010978:	00801984 	movi	r2,102
 401097c:	8881f926 	beq	r17,r2,4011164 <___vfprintf_internal_r+0x1ebc>
 4010980:	00801184 	movi	r2,70
 4010984:	88821c26 	beq	r17,r2,40111f8 <___vfprintf_internal_r+0x1f50>
 4010988:	00801144 	movi	r2,69
 401098c:	b081ef26 	beq	r22,r2,401114c <___vfprintf_internal_r+0x1ea4>
 4010990:	d8c02917 	ldw	r3,164(sp)
 4010994:	d8802104 	addi	r2,sp,132
 4010998:	d8800315 	stw	r2,12(sp)
 401099c:	d9403617 	ldw	r5,216(sp)
 40109a0:	d8802504 	addi	r2,sp,148
 40109a4:	d9002c17 	ldw	r4,176(sp)
 40109a8:	d8800215 	stw	r2,8(sp)
 40109ac:	d8802604 	addi	r2,sp,152
 40109b0:	d8c00015 	stw	r3,0(sp)
 40109b4:	d8800115 	stw	r2,4(sp)
 40109b8:	01c00084 	movi	r7,2
 40109bc:	980d883a 	mov	r6,r19
 40109c0:	d8c03c15 	stw	r3,240(sp)
 40109c4:	da003d15 	stw	r8,244(sp)
 40109c8:	40118cc0 	call	40118cc <_dtoa_r>
 40109cc:	1021883a 	mov	r16,r2
 40109d0:	008019c4 	movi	r2,103
 40109d4:	d8c03c17 	ldw	r3,240(sp)
 40109d8:	da003d17 	ldw	r8,244(sp)
 40109dc:	88817126 	beq	r17,r2,4010fa4 <___vfprintf_internal_r+0x1cfc>
 40109e0:	008011c4 	movi	r2,71
 40109e4:	88829226 	beq	r17,r2,4011430 <___vfprintf_internal_r+0x2188>
 40109e8:	80f9883a 	add	fp,r16,r3
 40109ec:	d9003617 	ldw	r4,216(sp)
 40109f0:	000d883a 	mov	r6,zero
 40109f4:	000f883a 	mov	r7,zero
 40109f8:	980b883a 	mov	r5,r19
 40109fc:	da003d15 	stw	r8,244(sp)
 4010a00:	401ad300 	call	401ad30 <__eqdf2>
 4010a04:	da003d17 	ldw	r8,244(sp)
 4010a08:	10018d26 	beq	r2,zero,4011040 <___vfprintf_internal_r+0x1d98>
 4010a0c:	d8802117 	ldw	r2,132(sp)
 4010a10:	1700062e 	bgeu	r2,fp,4010a2c <___vfprintf_internal_r+0x1784>
 4010a14:	01000c04 	movi	r4,48
 4010a18:	10c00044 	addi	r3,r2,1
 4010a1c:	d8c02115 	stw	r3,132(sp)
 4010a20:	11000005 	stb	r4,0(r2)
 4010a24:	d8802117 	ldw	r2,132(sp)
 4010a28:	173ffb36 	bltu	r2,fp,4010a18 <__alt_data_end+0xfc010a18>
 4010a2c:	1405c83a 	sub	r2,r2,r16
 4010a30:	d8803315 	stw	r2,204(sp)
 4010a34:	008011c4 	movi	r2,71
 4010a38:	b0817626 	beq	r22,r2,4011014 <___vfprintf_internal_r+0x1d6c>
 4010a3c:	00801944 	movi	r2,101
 4010a40:	1442810e 	bge	r2,r17,4011448 <___vfprintf_internal_r+0x21a0>
 4010a44:	d8c02617 	ldw	r3,152(sp)
 4010a48:	00801984 	movi	r2,102
 4010a4c:	d8c03215 	stw	r3,200(sp)
 4010a50:	8881fe26 	beq	r17,r2,401124c <___vfprintf_internal_r+0x1fa4>
 4010a54:	d8c03217 	ldw	r3,200(sp)
 4010a58:	d9003317 	ldw	r4,204(sp)
 4010a5c:	1901dd16 	blt	r3,r4,40111d4 <___vfprintf_internal_r+0x1f2c>
 4010a60:	9480004c 	andi	r18,r18,1
 4010a64:	90022b1e 	bne	r18,zero,4011314 <___vfprintf_internal_r+0x206c>
 4010a68:	1805883a 	mov	r2,r3
 4010a6c:	18028016 	blt	r3,zero,4011470 <___vfprintf_internal_r+0x21c8>
 4010a70:	d8c03217 	ldw	r3,200(sp)
 4010a74:	044019c4 	movi	r17,103
 4010a78:	d8c02e15 	stw	r3,184(sp)
 4010a7c:	df002a07 	ldb	fp,168(sp)
 4010a80:	e001531e 	bne	fp,zero,4010fd0 <___vfprintf_internal_r+0x1d28>
 4010a84:	df002783 	ldbu	fp,158(sp)
 4010a88:	d8802a15 	stw	r2,168(sp)
 4010a8c:	dc802b17 	ldw	r18,172(sp)
 4010a90:	d8002915 	stw	zero,164(sp)
 4010a94:	003bd106 	br	400f9dc <__alt_data_end+0xfc00f9dc>
 4010a98:	d8802d17 	ldw	r2,180(sp)
 4010a9c:	d8c02d17 	ldw	r3,180(sp)
 4010aa0:	d9002d17 	ldw	r4,180(sp)
 4010aa4:	10800017 	ldw	r2,0(r2)
 4010aa8:	18c00117 	ldw	r3,4(r3)
 4010aac:	21000204 	addi	r4,r4,8
 4010ab0:	d8803615 	stw	r2,216(sp)
 4010ab4:	d8c03815 	stw	r3,224(sp)
 4010ab8:	d9002d15 	stw	r4,180(sp)
 4010abc:	003b7506 	br	400f894 <__alt_data_end+0xfc00f894>
 4010ac0:	ac400007 	ldb	r17,0(r21)
 4010ac4:	003a5906 	br	400f42c <__alt_data_end+0xfc00f42c>
 4010ac8:	9080100c 	andi	r2,r18,64
 4010acc:	1000a826 	beq	r2,zero,4010d70 <___vfprintf_internal_r+0x1ac8>
 4010ad0:	d9002d17 	ldw	r4,180(sp)
 4010ad4:	002d883a 	mov	r22,zero
 4010ad8:	24c0000b 	ldhu	r19,0(r4)
 4010adc:	21000104 	addi	r4,r4,4
 4010ae0:	d9002d15 	stw	r4,180(sp)
 4010ae4:	003ccb06 	br	400fe14 <__alt_data_end+0xfc00fe14>
 4010ae8:	d8c02d17 	ldw	r3,180(sp)
 4010aec:	d9002917 	ldw	r4,164(sp)
 4010af0:	002d883a 	mov	r22,zero
 4010af4:	18800104 	addi	r2,r3,4
 4010af8:	1cc00017 	ldw	r19,0(r3)
 4010afc:	203ebb0e 	bge	r4,zero,40105ec <__alt_data_end+0xfc0105ec>
 4010b00:	003ef106 	br	40106c8 <__alt_data_end+0xfc0106c8>
 4010b04:	9080040c 	andi	r2,r18,16
 4010b08:	1000921e 	bne	r2,zero,4010d54 <___vfprintf_internal_r+0x1aac>
 4010b0c:	9480100c 	andi	r18,r18,64
 4010b10:	90013926 	beq	r18,zero,4010ff8 <___vfprintf_internal_r+0x1d50>
 4010b14:	d9002d17 	ldw	r4,180(sp)
 4010b18:	d9402f17 	ldw	r5,188(sp)
 4010b1c:	20800017 	ldw	r2,0(r4)
 4010b20:	21000104 	addi	r4,r4,4
 4010b24:	d9002d15 	stw	r4,180(sp)
 4010b28:	1140000d 	sth	r5,0(r2)
 4010b2c:	003a1606 	br	400f388 <__alt_data_end+0xfc00f388>
 4010b30:	9080100c 	andi	r2,r18,64
 4010b34:	10008026 	beq	r2,zero,4010d38 <___vfprintf_internal_r+0x1a90>
 4010b38:	d8c02d17 	ldw	r3,180(sp)
 4010b3c:	1cc0000f 	ldh	r19,0(r3)
 4010b40:	18c00104 	addi	r3,r3,4
 4010b44:	d8c02d15 	stw	r3,180(sp)
 4010b48:	982dd7fa 	srai	r22,r19,31
 4010b4c:	b005883a 	mov	r2,r22
 4010b50:	003b1f06 	br	400f7d0 <__alt_data_end+0xfc00f7d0>
 4010b54:	9080100c 	andi	r2,r18,64
 4010b58:	d8002785 	stb	zero,158(sp)
 4010b5c:	10008a1e 	bne	r2,zero,4010d88 <___vfprintf_internal_r+0x1ae0>
 4010b60:	d9402d17 	ldw	r5,180(sp)
 4010b64:	d8c02917 	ldw	r3,164(sp)
 4010b68:	002d883a 	mov	r22,zero
 4010b6c:	28800104 	addi	r2,r5,4
 4010b70:	2cc00017 	ldw	r19,0(r5)
 4010b74:	183e4b0e 	bge	r3,zero,40104a4 <__alt_data_end+0xfc0104a4>
 4010b78:	9d86b03a 	or	r3,r19,r22
 4010b7c:	d8802d15 	stw	r2,180(sp)
 4010b80:	183e4c1e 	bne	r3,zero,40104b4 <__alt_data_end+0xfc0104b4>
 4010b84:	0039883a 	mov	fp,zero
 4010b88:	0005883a 	mov	r2,zero
 4010b8c:	003d4006 	br	4010090 <__alt_data_end+0xfc010090>
 4010b90:	014100b4 	movhi	r5,1026
 4010b94:	297fd384 	addi	r5,r5,-178
 4010b98:	d9402b15 	stw	r5,172(sp)
 4010b9c:	d9402b17 	ldw	r5,172(sp)
 4010ba0:	1c47883a 	add	r3,r3,r17
 4010ba4:	10800044 	addi	r2,r2,1
 4010ba8:	41400015 	stw	r5,0(r8)
 4010bac:	44400115 	stw	r17,4(r8)
 4010bb0:	d8c02015 	stw	r3,128(sp)
 4010bb4:	d8801f15 	stw	r2,124(sp)
 4010bb8:	010001c4 	movi	r4,7
 4010bbc:	20bec816 	blt	r4,r2,40106e0 <__alt_data_end+0xfc0106e0>
 4010bc0:	42000204 	addi	r8,r8,8
 4010bc4:	003ecd06 	br	40106fc <__alt_data_end+0xfc0106fc>
 4010bc8:	d9002917 	ldw	r4,164(sp)
 4010bcc:	d8002785 	stb	zero,158(sp)
 4010bd0:	203d2d16 	blt	r4,zero,4010088 <__alt_data_end+0xfc010088>
 4010bd4:	00bfdfc4 	movi	r2,-129
 4010bd8:	90a4703a 	and	r18,r18,r2
 4010bdc:	003a9106 	br	400f624 <__alt_data_end+0xfc00f624>
 4010be0:	010100b4 	movhi	r4,1026
 4010be4:	213fd384 	addi	r4,r4,-178
 4010be8:	d9002b15 	stw	r4,172(sp)
 4010bec:	003c0c06 	br	400fc20 <__alt_data_end+0xfc00fc20>
 4010bf0:	d9002c17 	ldw	r4,176(sp)
 4010bf4:	d9801e04 	addi	r6,sp,120
 4010bf8:	b80b883a 	mov	r5,r23
 4010bfc:	401726c0 	call	401726c <__sprint_r>
 4010c00:	103aab1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010c04:	d8c02017 	ldw	r3,128(sp)
 4010c08:	da000404 	addi	r8,sp,16
 4010c0c:	003d4106 	br	4010114 <__alt_data_end+0xfc010114>
 4010c10:	d8801f17 	ldw	r2,124(sp)
 4010c14:	014100b4 	movhi	r5,1026
 4010c18:	01000044 	movi	r4,1
 4010c1c:	18c00044 	addi	r3,r3,1
 4010c20:	10800044 	addi	r2,r2,1
 4010c24:	297fcb04 	addi	r5,r5,-212
 4010c28:	41000115 	stw	r4,4(r8)
 4010c2c:	41400015 	stw	r5,0(r8)
 4010c30:	d8c02015 	stw	r3,128(sp)
 4010c34:	d8801f15 	stw	r2,124(sp)
 4010c38:	010001c4 	movi	r4,7
 4010c3c:	20805c16 	blt	r4,r2,4010db0 <___vfprintf_internal_r+0x1b08>
 4010c40:	42000204 	addi	r8,r8,8
 4010c44:	8800041e 	bne	r17,zero,4010c58 <___vfprintf_internal_r+0x19b0>
 4010c48:	d8803317 	ldw	r2,204(sp)
 4010c4c:	1000021e 	bne	r2,zero,4010c58 <___vfprintf_internal_r+0x19b0>
 4010c50:	9080004c 	andi	r2,r18,1
 4010c54:	103c0926 	beq	r2,zero,400fc7c <__alt_data_end+0xfc00fc7c>
 4010c58:	d9003717 	ldw	r4,220(sp)
 4010c5c:	d8801f17 	ldw	r2,124(sp)
 4010c60:	d9403417 	ldw	r5,208(sp)
 4010c64:	20c7883a 	add	r3,r4,r3
 4010c68:	10800044 	addi	r2,r2,1
 4010c6c:	41000115 	stw	r4,4(r8)
 4010c70:	41400015 	stw	r5,0(r8)
 4010c74:	d8c02015 	stw	r3,128(sp)
 4010c78:	d8801f15 	stw	r2,124(sp)
 4010c7c:	010001c4 	movi	r4,7
 4010c80:	20812116 	blt	r4,r2,4011108 <___vfprintf_internal_r+0x1e60>
 4010c84:	42000204 	addi	r8,r8,8
 4010c88:	0463c83a 	sub	r17,zero,r17
 4010c8c:	0440730e 	bge	zero,r17,4010e5c <___vfprintf_internal_r+0x1bb4>
 4010c90:	05800404 	movi	r22,16
 4010c94:	b440860e 	bge	r22,r17,4010eb0 <___vfprintf_internal_r+0x1c08>
 4010c98:	014100b4 	movhi	r5,1026
 4010c9c:	297fd384 	addi	r5,r5,-178
 4010ca0:	d9402b15 	stw	r5,172(sp)
 4010ca4:	070001c4 	movi	fp,7
 4010ca8:	dcc02c17 	ldw	r19,176(sp)
 4010cac:	00000306 	br	4010cbc <___vfprintf_internal_r+0x1a14>
 4010cb0:	42000204 	addi	r8,r8,8
 4010cb4:	8c7ffc04 	addi	r17,r17,-16
 4010cb8:	b440800e 	bge	r22,r17,4010ebc <___vfprintf_internal_r+0x1c14>
 4010cbc:	18c00404 	addi	r3,r3,16
 4010cc0:	10800044 	addi	r2,r2,1
 4010cc4:	45000015 	stw	r20,0(r8)
 4010cc8:	45800115 	stw	r22,4(r8)
 4010ccc:	d8c02015 	stw	r3,128(sp)
 4010cd0:	d8801f15 	stw	r2,124(sp)
 4010cd4:	e0bff60e 	bge	fp,r2,4010cb0 <__alt_data_end+0xfc010cb0>
 4010cd8:	d9801e04 	addi	r6,sp,120
 4010cdc:	b80b883a 	mov	r5,r23
 4010ce0:	9809883a 	mov	r4,r19
 4010ce4:	401726c0 	call	401726c <__sprint_r>
 4010ce8:	103a711e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010cec:	d8c02017 	ldw	r3,128(sp)
 4010cf0:	d8801f17 	ldw	r2,124(sp)
 4010cf4:	da000404 	addi	r8,sp,16
 4010cf8:	003fee06 	br	4010cb4 <__alt_data_end+0xfc010cb4>
 4010cfc:	00bfffc4 	movi	r2,-1
 4010d00:	003a6f06 	br	400f6c0 <__alt_data_end+0xfc00f6c0>
 4010d04:	008011c4 	movi	r2,71
 4010d08:	1440b816 	blt	r2,r17,4010fec <___vfprintf_internal_r+0x1d44>
 4010d0c:	040100b4 	movhi	r16,1026
 4010d10:	843fbd04 	addi	r16,r16,-268
 4010d14:	00c000c4 	movi	r3,3
 4010d18:	00bfdfc4 	movi	r2,-129
 4010d1c:	d8c02a15 	stw	r3,168(sp)
 4010d20:	90a4703a 	and	r18,r18,r2
 4010d24:	df002783 	ldbu	fp,158(sp)
 4010d28:	d8c02e15 	stw	r3,184(sp)
 4010d2c:	d8002915 	stw	zero,164(sp)
 4010d30:	d8003215 	stw	zero,200(sp)
 4010d34:	003b2906 	br	400f9dc <__alt_data_end+0xfc00f9dc>
 4010d38:	d9002d17 	ldw	r4,180(sp)
 4010d3c:	24c00017 	ldw	r19,0(r4)
 4010d40:	21000104 	addi	r4,r4,4
 4010d44:	d9002d15 	stw	r4,180(sp)
 4010d48:	982dd7fa 	srai	r22,r19,31
 4010d4c:	b005883a 	mov	r2,r22
 4010d50:	003a9f06 	br	400f7d0 <__alt_data_end+0xfc00f7d0>
 4010d54:	d9402d17 	ldw	r5,180(sp)
 4010d58:	d8c02f17 	ldw	r3,188(sp)
 4010d5c:	28800017 	ldw	r2,0(r5)
 4010d60:	29400104 	addi	r5,r5,4
 4010d64:	d9402d15 	stw	r5,180(sp)
 4010d68:	10c00015 	stw	r3,0(r2)
 4010d6c:	00398606 	br	400f388 <__alt_data_end+0xfc00f388>
 4010d70:	d9402d17 	ldw	r5,180(sp)
 4010d74:	002d883a 	mov	r22,zero
 4010d78:	2cc00017 	ldw	r19,0(r5)
 4010d7c:	29400104 	addi	r5,r5,4
 4010d80:	d9402d15 	stw	r5,180(sp)
 4010d84:	003c2306 	br	400fe14 <__alt_data_end+0xfc00fe14>
 4010d88:	d8c02d17 	ldw	r3,180(sp)
 4010d8c:	d9002917 	ldw	r4,164(sp)
 4010d90:	002d883a 	mov	r22,zero
 4010d94:	18800104 	addi	r2,r3,4
 4010d98:	1cc0000b 	ldhu	r19,0(r3)
 4010d9c:	203dc10e 	bge	r4,zero,40104a4 <__alt_data_end+0xfc0104a4>
 4010da0:	003f7506 	br	4010b78 <__alt_data_end+0xfc010b78>
 4010da4:	040100b4 	movhi	r16,1026
 4010da8:	843fbb04 	addi	r16,r16,-276
 4010dac:	003acc06 	br	400f8e0 <__alt_data_end+0xfc00f8e0>
 4010db0:	d9002c17 	ldw	r4,176(sp)
 4010db4:	d9801e04 	addi	r6,sp,120
 4010db8:	b80b883a 	mov	r5,r23
 4010dbc:	401726c0 	call	401726c <__sprint_r>
 4010dc0:	103a3b1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010dc4:	dc402617 	ldw	r17,152(sp)
 4010dc8:	d8c02017 	ldw	r3,128(sp)
 4010dcc:	da000404 	addi	r8,sp,16
 4010dd0:	003f9c06 	br	4010c44 <__alt_data_end+0xfc010c44>
 4010dd4:	ac400043 	ldbu	r17,1(r21)
 4010dd8:	94800814 	ori	r18,r18,32
 4010ddc:	ad400044 	addi	r21,r21,1
 4010de0:	8c403fcc 	andi	r17,r17,255
 4010de4:	8c40201c 	xori	r17,r17,128
 4010de8:	8c7fe004 	addi	r17,r17,-128
 4010dec:	00398f06 	br	400f42c <__alt_data_end+0xfc00f42c>
 4010df0:	d8c02d15 	stw	r3,180(sp)
 4010df4:	0039883a 	mov	fp,zero
 4010df8:	003e3506 	br	40106d0 <__alt_data_end+0xfc0106d0>
 4010dfc:	d9002c17 	ldw	r4,176(sp)
 4010e00:	d9801e04 	addi	r6,sp,120
 4010e04:	b80b883a 	mov	r5,r23
 4010e08:	401726c0 	call	401726c <__sprint_r>
 4010e0c:	103a281e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010e10:	d8c02017 	ldw	r3,128(sp)
 4010e14:	da000404 	addi	r8,sp,16
 4010e18:	003cd006 	br	401015c <__alt_data_end+0xfc01015c>
 4010e1c:	8009883a 	mov	r4,r16
 4010e20:	da003d15 	stw	r8,244(sp)
 4010e24:	400d0300 	call	400d030 <strlen>
 4010e28:	d8802e15 	stw	r2,184(sp)
 4010e2c:	da003d17 	ldw	r8,244(sp)
 4010e30:	103c340e 	bge	r2,zero,400ff04 <__alt_data_end+0xfc00ff04>
 4010e34:	0005883a 	mov	r2,zero
 4010e38:	003c3206 	br	400ff04 <__alt_data_end+0xfc00ff04>
 4010e3c:	d9002c17 	ldw	r4,176(sp)
 4010e40:	d9801e04 	addi	r6,sp,120
 4010e44:	b80b883a 	mov	r5,r23
 4010e48:	401726c0 	call	401726c <__sprint_r>
 4010e4c:	103a181e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010e50:	d8c02017 	ldw	r3,128(sp)
 4010e54:	d8801f17 	ldw	r2,124(sp)
 4010e58:	da000404 	addi	r8,sp,16
 4010e5c:	d9403317 	ldw	r5,204(sp)
 4010e60:	10800044 	addi	r2,r2,1
 4010e64:	44000015 	stw	r16,0(r8)
 4010e68:	28c7883a 	add	r3,r5,r3
 4010e6c:	003b7d06 	br	400fc64 <__alt_data_end+0xfc00fc64>
 4010e70:	010100b4 	movhi	r4,1026
 4010e74:	213fd784 	addi	r4,r4,-162
 4010e78:	d9003515 	stw	r4,212(sp)
 4010e7c:	003b1406 	br	400fad0 <__alt_data_end+0xfc00fad0>
 4010e80:	013fffc4 	movi	r4,-1
 4010e84:	003a3506 	br	400f75c <__alt_data_end+0xfc00f75c>
 4010e88:	0023883a 	mov	r17,zero
 4010e8c:	003d9d06 	br	4010504 <__alt_data_end+0xfc010504>
 4010e90:	d9002c17 	ldw	r4,176(sp)
 4010e94:	d9801e04 	addi	r6,sp,120
 4010e98:	b80b883a 	mov	r5,r23
 4010e9c:	401726c0 	call	401726c <__sprint_r>
 4010ea0:	103a031e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010ea4:	d8c02017 	ldw	r3,128(sp)
 4010ea8:	da000404 	addi	r8,sp,16
 4010eac:	003d9406 	br	4010500 <__alt_data_end+0xfc010500>
 4010eb0:	010100b4 	movhi	r4,1026
 4010eb4:	213fd384 	addi	r4,r4,-178
 4010eb8:	d9002b15 	stw	r4,172(sp)
 4010ebc:	d9002b17 	ldw	r4,172(sp)
 4010ec0:	1c47883a 	add	r3,r3,r17
 4010ec4:	10800044 	addi	r2,r2,1
 4010ec8:	41000015 	stw	r4,0(r8)
 4010ecc:	44400115 	stw	r17,4(r8)
 4010ed0:	d8c02015 	stw	r3,128(sp)
 4010ed4:	d8801f15 	stw	r2,124(sp)
 4010ed8:	010001c4 	movi	r4,7
 4010edc:	20bfd716 	blt	r4,r2,4010e3c <__alt_data_end+0xfc010e3c>
 4010ee0:	42000204 	addi	r8,r8,8
 4010ee4:	003fdd06 	br	4010e5c <__alt_data_end+0xfc010e5c>
 4010ee8:	d9002c17 	ldw	r4,176(sp)
 4010eec:	d9801e04 	addi	r6,sp,120
 4010ef0:	b80b883a 	mov	r5,r23
 4010ef4:	401726c0 	call	401726c <__sprint_r>
 4010ef8:	1039ed1e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010efc:	d8802617 	ldw	r2,152(sp)
 4010f00:	d8c02017 	ldw	r3,128(sp)
 4010f04:	da000404 	addi	r8,sp,16
 4010f08:	003e1006 	br	401074c <__alt_data_end+0xfc01074c>
 4010f0c:	00800044 	movi	r2,1
 4010f10:	10803fcc 	andi	r2,r2,255
 4010f14:	00c00044 	movi	r3,1
 4010f18:	10fa3526 	beq	r2,r3,400f7f0 <__alt_data_end+0xfc00f7f0>
 4010f1c:	00c00084 	movi	r3,2
 4010f20:	10fbcb26 	beq	r2,r3,400fe50 <__alt_data_end+0xfc00fe50>
 4010f24:	003a8f06 	br	400f964 <__alt_data_end+0xfc00f964>
 4010f28:	010100b4 	movhi	r4,1026
 4010f2c:	213fd784 	addi	r4,r4,-162
 4010f30:	d9003515 	stw	r4,212(sp)
 4010f34:	003b7606 	br	400fd10 <__alt_data_end+0xfc00fd10>
 4010f38:	d8802917 	ldw	r2,164(sp)
 4010f3c:	00c00184 	movi	r3,6
 4010f40:	1880012e 	bgeu	r3,r2,4010f48 <___vfprintf_internal_r+0x1ca0>
 4010f44:	1805883a 	mov	r2,r3
 4010f48:	d8802e15 	stw	r2,184(sp)
 4010f4c:	1000ef16 	blt	r2,zero,401130c <___vfprintf_internal_r+0x2064>
 4010f50:	040100b4 	movhi	r16,1026
 4010f54:	d8802a15 	stw	r2,168(sp)
 4010f58:	dcc02d15 	stw	r19,180(sp)
 4010f5c:	d8002915 	stw	zero,164(sp)
 4010f60:	d8003215 	stw	zero,200(sp)
 4010f64:	843fc904 	addi	r16,r16,-220
 4010f68:	0039883a 	mov	fp,zero
 4010f6c:	003aa206 	br	400f9f8 <__alt_data_end+0xfc00f9f8>
 4010f70:	0021883a 	mov	r16,zero
 4010f74:	003e0706 	br	4010794 <__alt_data_end+0xfc010794>
 4010f78:	d9002c17 	ldw	r4,176(sp)
 4010f7c:	d9801e04 	addi	r6,sp,120
 4010f80:	b80b883a 	mov	r5,r23
 4010f84:	401726c0 	call	401726c <__sprint_r>
 4010f88:	1039c91e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 4010f8c:	d8802617 	ldw	r2,152(sp)
 4010f90:	d9403317 	ldw	r5,204(sp)
 4010f94:	d8c02017 	ldw	r3,128(sp)
 4010f98:	da000404 	addi	r8,sp,16
 4010f9c:	2885c83a 	sub	r2,r5,r2
 4010fa0:	003dfb06 	br	4010790 <__alt_data_end+0xfc010790>
 4010fa4:	9080004c 	andi	r2,r18,1
 4010fa8:	103e8f1e 	bne	r2,zero,40109e8 <__alt_data_end+0xfc0109e8>
 4010fac:	d8802117 	ldw	r2,132(sp)
 4010fb0:	003e9e06 	br	4010a2c <__alt_data_end+0xfc010a2c>
 4010fb4:	1025883a 	mov	r18,r2
 4010fb8:	0039883a 	mov	fp,zero
 4010fbc:	00800084 	movi	r2,2
 4010fc0:	003fd306 	br	4010f10 <__alt_data_end+0xfc010f10>
 4010fc4:	07000b44 	movi	fp,45
 4010fc8:	df002785 	stb	fp,158(sp)
 4010fcc:	003a4006 	br	400f8d0 <__alt_data_end+0xfc00f8d0>
 4010fd0:	00c00b44 	movi	r3,45
 4010fd4:	d8c02785 	stb	r3,158(sp)
 4010fd8:	d8802a15 	stw	r2,168(sp)
 4010fdc:	dc802b17 	ldw	r18,172(sp)
 4010fe0:	d8002915 	stw	zero,164(sp)
 4010fe4:	07000b44 	movi	fp,45
 4010fe8:	003a8006 	br	400f9ec <__alt_data_end+0xfc00f9ec>
 4010fec:	040100b4 	movhi	r16,1026
 4010ff0:	843fbe04 	addi	r16,r16,-264
 4010ff4:	003f4706 	br	4010d14 <__alt_data_end+0xfc010d14>
 4010ff8:	d8c02d17 	ldw	r3,180(sp)
 4010ffc:	d9002f17 	ldw	r4,188(sp)
 4011000:	18800017 	ldw	r2,0(r3)
 4011004:	18c00104 	addi	r3,r3,4
 4011008:	d8c02d15 	stw	r3,180(sp)
 401100c:	11000015 	stw	r4,0(r2)
 4011010:	0038dd06 	br	400f388 <__alt_data_end+0xfc00f388>
 4011014:	dd802617 	ldw	r22,152(sp)
 4011018:	00bfff44 	movi	r2,-3
 401101c:	b0801c16 	blt	r22,r2,4011090 <___vfprintf_internal_r+0x1de8>
 4011020:	d9402917 	ldw	r5,164(sp)
 4011024:	2d801a16 	blt	r5,r22,4011090 <___vfprintf_internal_r+0x1de8>
 4011028:	dd803215 	stw	r22,200(sp)
 401102c:	003e8906 	br	4010a54 <__alt_data_end+0xfc010a54>
 4011030:	010100b4 	movhi	r4,1026
 4011034:	213fd384 	addi	r4,r4,-178
 4011038:	d9002b15 	stw	r4,172(sp)
 401103c:	003c9106 	br	4010284 <__alt_data_end+0xfc010284>
 4011040:	e005883a 	mov	r2,fp
 4011044:	003e7906 	br	4010a2c <__alt_data_end+0xfc010a2c>
 4011048:	d9402917 	ldw	r5,164(sp)
 401104c:	df002783 	ldbu	fp,158(sp)
 4011050:	dcc02d15 	stw	r19,180(sp)
 4011054:	d9402a15 	stw	r5,168(sp)
 4011058:	d9402e15 	stw	r5,184(sp)
 401105c:	d8002915 	stw	zero,164(sp)
 4011060:	d8003215 	stw	zero,200(sp)
 4011064:	003a5d06 	br	400f9dc <__alt_data_end+0xfc00f9dc>
 4011068:	9080004c 	andi	r2,r18,1
 401106c:	0039883a 	mov	fp,zero
 4011070:	10000426 	beq	r2,zero,4011084 <___vfprintf_internal_r+0x1ddc>
 4011074:	00800c04 	movi	r2,48
 4011078:	dc001dc4 	addi	r16,sp,119
 401107c:	d8801dc5 	stb	r2,119(sp)
 4011080:	003b8006 	br	400fe84 <__alt_data_end+0xfc00fe84>
 4011084:	d8002e15 	stw	zero,184(sp)
 4011088:	dc001e04 	addi	r16,sp,120
 401108c:	003a4d06 	br	400f9c4 <__alt_data_end+0xfc00f9c4>
 4011090:	8c7fff84 	addi	r17,r17,-2
 4011094:	b5bfffc4 	addi	r22,r22,-1
 4011098:	dd802615 	stw	r22,152(sp)
 401109c:	dc4022c5 	stb	r17,139(sp)
 40110a0:	b000bf16 	blt	r22,zero,40113a0 <___vfprintf_internal_r+0x20f8>
 40110a4:	00800ac4 	movi	r2,43
 40110a8:	d8802305 	stb	r2,140(sp)
 40110ac:	00800244 	movi	r2,9
 40110b0:	15807016 	blt	r2,r22,4011274 <___vfprintf_internal_r+0x1fcc>
 40110b4:	00800c04 	movi	r2,48
 40110b8:	b5800c04 	addi	r22,r22,48
 40110bc:	d8802345 	stb	r2,141(sp)
 40110c0:	dd802385 	stb	r22,142(sp)
 40110c4:	d88023c4 	addi	r2,sp,143
 40110c8:	df0022c4 	addi	fp,sp,139
 40110cc:	d8c03317 	ldw	r3,204(sp)
 40110d0:	1739c83a 	sub	fp,r2,fp
 40110d4:	d9003317 	ldw	r4,204(sp)
 40110d8:	e0c7883a 	add	r3,fp,r3
 40110dc:	df003a15 	stw	fp,232(sp)
 40110e0:	d8c02e15 	stw	r3,184(sp)
 40110e4:	00800044 	movi	r2,1
 40110e8:	1100b30e 	bge	r2,r4,40113b8 <___vfprintf_internal_r+0x2110>
 40110ec:	d8c02e17 	ldw	r3,184(sp)
 40110f0:	18c00044 	addi	r3,r3,1
 40110f4:	d8c02e15 	stw	r3,184(sp)
 40110f8:	1805883a 	mov	r2,r3
 40110fc:	1800ac16 	blt	r3,zero,40113b0 <___vfprintf_internal_r+0x2108>
 4011100:	d8003215 	stw	zero,200(sp)
 4011104:	003e5d06 	br	4010a7c <__alt_data_end+0xfc010a7c>
 4011108:	d9002c17 	ldw	r4,176(sp)
 401110c:	d9801e04 	addi	r6,sp,120
 4011110:	b80b883a 	mov	r5,r23
 4011114:	401726c0 	call	401726c <__sprint_r>
 4011118:	1039651e 	bne	r2,zero,400f6b0 <__alt_data_end+0xfc00f6b0>
 401111c:	dc402617 	ldw	r17,152(sp)
 4011120:	d8c02017 	ldw	r3,128(sp)
 4011124:	d8801f17 	ldw	r2,124(sp)
 4011128:	da000404 	addi	r8,sp,16
 401112c:	003ed606 	br	4010c88 <__alt_data_end+0xfc010c88>
 4011130:	582b883a 	mov	r21,r11
 4011134:	d8002915 	stw	zero,164(sp)
 4011138:	0038bd06 	br	400f430 <__alt_data_end+0xfc00f430>
 401113c:	d8802917 	ldw	r2,164(sp)
 4011140:	103e071e 	bne	r2,zero,4010960 <__alt_data_end+0xfc010960>
 4011144:	dc002915 	stw	r16,164(sp)
 4011148:	003e0506 	br	4010960 <__alt_data_end+0xfc010960>
 401114c:	d9002917 	ldw	r4,164(sp)
 4011150:	20c00044 	addi	r3,r4,1
 4011154:	003e0f06 	br	4010994 <__alt_data_end+0xfc010994>
 4011158:	01400184 	movi	r5,6
 401115c:	d9402915 	stw	r5,164(sp)
 4011160:	003dff06 	br	4010960 <__alt_data_end+0xfc010960>
 4011164:	d8802104 	addi	r2,sp,132
 4011168:	d8800315 	stw	r2,12(sp)
 401116c:	d8802504 	addi	r2,sp,148
 4011170:	d8800215 	stw	r2,8(sp)
 4011174:	d8802604 	addi	r2,sp,152
 4011178:	d8800115 	stw	r2,4(sp)
 401117c:	d8802917 	ldw	r2,164(sp)
 4011180:	d9403617 	ldw	r5,216(sp)
 4011184:	d9002c17 	ldw	r4,176(sp)
 4011188:	d8800015 	stw	r2,0(sp)
 401118c:	01c000c4 	movi	r7,3
 4011190:	980d883a 	mov	r6,r19
 4011194:	da003d15 	stw	r8,244(sp)
 4011198:	40118cc0 	call	40118cc <_dtoa_r>
 401119c:	d8c02917 	ldw	r3,164(sp)
 40111a0:	da003d17 	ldw	r8,244(sp)
 40111a4:	1021883a 	mov	r16,r2
 40111a8:	10f9883a 	add	fp,r2,r3
 40111ac:	81000007 	ldb	r4,0(r16)
 40111b0:	00800c04 	movi	r2,48
 40111b4:	20805e26 	beq	r4,r2,4011330 <___vfprintf_internal_r+0x2088>
 40111b8:	d8c02617 	ldw	r3,152(sp)
 40111bc:	e0f9883a 	add	fp,fp,r3
 40111c0:	003e0a06 	br	40109ec <__alt_data_end+0xfc0109ec>
 40111c4:	00c00b44 	movi	r3,45
 40111c8:	24e0003c 	xorhi	r19,r4,32768
 40111cc:	d8c02a05 	stb	r3,168(sp)
 40111d0:	003de906 	br	4010978 <__alt_data_end+0xfc010978>
 40111d4:	d8c03217 	ldw	r3,200(sp)
 40111d8:	00c07a0e 	bge	zero,r3,40113c4 <___vfprintf_internal_r+0x211c>
 40111dc:	00800044 	movi	r2,1
 40111e0:	d9003317 	ldw	r4,204(sp)
 40111e4:	1105883a 	add	r2,r2,r4
 40111e8:	d8802e15 	stw	r2,184(sp)
 40111ec:	10004e16 	blt	r2,zero,4011328 <___vfprintf_internal_r+0x2080>
 40111f0:	044019c4 	movi	r17,103
 40111f4:	003e2106 	br	4010a7c <__alt_data_end+0xfc010a7c>
 40111f8:	d9002917 	ldw	r4,164(sp)
 40111fc:	d8802104 	addi	r2,sp,132
 4011200:	d8800315 	stw	r2,12(sp)
 4011204:	d9000015 	stw	r4,0(sp)
 4011208:	d8802504 	addi	r2,sp,148
 401120c:	d9403617 	ldw	r5,216(sp)
 4011210:	d9002c17 	ldw	r4,176(sp)
 4011214:	d8800215 	stw	r2,8(sp)
 4011218:	d8802604 	addi	r2,sp,152
 401121c:	d8800115 	stw	r2,4(sp)
 4011220:	01c000c4 	movi	r7,3
 4011224:	980d883a 	mov	r6,r19
 4011228:	da003d15 	stw	r8,244(sp)
 401122c:	40118cc0 	call	40118cc <_dtoa_r>
 4011230:	d8c02917 	ldw	r3,164(sp)
 4011234:	da003d17 	ldw	r8,244(sp)
 4011238:	1021883a 	mov	r16,r2
 401123c:	00801184 	movi	r2,70
 4011240:	80f9883a 	add	fp,r16,r3
 4011244:	88bfd926 	beq	r17,r2,40111ac <__alt_data_end+0xfc0111ac>
 4011248:	003de806 	br	40109ec <__alt_data_end+0xfc0109ec>
 401124c:	d9002917 	ldw	r4,164(sp)
 4011250:	00c04d0e 	bge	zero,r3,4011388 <___vfprintf_internal_r+0x20e0>
 4011254:	2000441e 	bne	r4,zero,4011368 <___vfprintf_internal_r+0x20c0>
 4011258:	9480004c 	andi	r18,r18,1
 401125c:	9000421e 	bne	r18,zero,4011368 <___vfprintf_internal_r+0x20c0>
 4011260:	1805883a 	mov	r2,r3
 4011264:	18007016 	blt	r3,zero,4011428 <___vfprintf_internal_r+0x2180>
 4011268:	d8c03217 	ldw	r3,200(sp)
 401126c:	d8c02e15 	stw	r3,184(sp)
 4011270:	003e0206 	br	4010a7c <__alt_data_end+0xfc010a7c>
 4011274:	df0022c4 	addi	fp,sp,139
 4011278:	dc002915 	stw	r16,164(sp)
 401127c:	4027883a 	mov	r19,r8
 4011280:	e021883a 	mov	r16,fp
 4011284:	b009883a 	mov	r4,r22
 4011288:	01400284 	movi	r5,10
 401128c:	400b8040 	call	400b804 <__modsi3>
 4011290:	10800c04 	addi	r2,r2,48
 4011294:	843fffc4 	addi	r16,r16,-1
 4011298:	b009883a 	mov	r4,r22
 401129c:	01400284 	movi	r5,10
 40112a0:	80800005 	stb	r2,0(r16)
 40112a4:	400b7800 	call	400b780 <__divsi3>
 40112a8:	102d883a 	mov	r22,r2
 40112ac:	00800244 	movi	r2,9
 40112b0:	15bff416 	blt	r2,r22,4011284 <__alt_data_end+0xfc011284>
 40112b4:	9811883a 	mov	r8,r19
 40112b8:	b0800c04 	addi	r2,r22,48
 40112bc:	8027883a 	mov	r19,r16
 40112c0:	997fffc4 	addi	r5,r19,-1
 40112c4:	98bfffc5 	stb	r2,-1(r19)
 40112c8:	dc002917 	ldw	r16,164(sp)
 40112cc:	2f006a2e 	bgeu	r5,fp,4011478 <___vfprintf_internal_r+0x21d0>
 40112d0:	d9c02384 	addi	r7,sp,142
 40112d4:	3ccfc83a 	sub	r7,r7,r19
 40112d8:	d9002344 	addi	r4,sp,141
 40112dc:	e1cf883a 	add	r7,fp,r7
 40112e0:	00000106 	br	40112e8 <___vfprintf_internal_r+0x2040>
 40112e4:	28800003 	ldbu	r2,0(r5)
 40112e8:	20800005 	stb	r2,0(r4)
 40112ec:	21000044 	addi	r4,r4,1
 40112f0:	29400044 	addi	r5,r5,1
 40112f4:	393ffb1e 	bne	r7,r4,40112e4 <__alt_data_end+0xfc0112e4>
 40112f8:	d8802304 	addi	r2,sp,140
 40112fc:	14c5c83a 	sub	r2,r2,r19
 4011300:	d8c02344 	addi	r3,sp,141
 4011304:	1885883a 	add	r2,r3,r2
 4011308:	003f7006 	br	40110cc <__alt_data_end+0xfc0110cc>
 401130c:	0005883a 	mov	r2,zero
 4011310:	003f0f06 	br	4010f50 <__alt_data_end+0xfc010f50>
 4011314:	d8c03217 	ldw	r3,200(sp)
 4011318:	18c00044 	addi	r3,r3,1
 401131c:	d8c02e15 	stw	r3,184(sp)
 4011320:	1805883a 	mov	r2,r3
 4011324:	183fb20e 	bge	r3,zero,40111f0 <__alt_data_end+0xfc0111f0>
 4011328:	0005883a 	mov	r2,zero
 401132c:	003fb006 	br	40111f0 <__alt_data_end+0xfc0111f0>
 4011330:	d9003617 	ldw	r4,216(sp)
 4011334:	000d883a 	mov	r6,zero
 4011338:	000f883a 	mov	r7,zero
 401133c:	980b883a 	mov	r5,r19
 4011340:	d8c03c15 	stw	r3,240(sp)
 4011344:	da003d15 	stw	r8,244(sp)
 4011348:	401ad300 	call	401ad30 <__eqdf2>
 401134c:	d8c03c17 	ldw	r3,240(sp)
 4011350:	da003d17 	ldw	r8,244(sp)
 4011354:	103f9826 	beq	r2,zero,40111b8 <__alt_data_end+0xfc0111b8>
 4011358:	00800044 	movi	r2,1
 401135c:	10c7c83a 	sub	r3,r2,r3
 4011360:	d8c02615 	stw	r3,152(sp)
 4011364:	003f9506 	br	40111bc <__alt_data_end+0xfc0111bc>
 4011368:	d9002917 	ldw	r4,164(sp)
 401136c:	d8c03217 	ldw	r3,200(sp)
 4011370:	20800044 	addi	r2,r4,1
 4011374:	1885883a 	add	r2,r3,r2
 4011378:	d8802e15 	stw	r2,184(sp)
 401137c:	103dbf0e 	bge	r2,zero,4010a7c <__alt_data_end+0xfc010a7c>
 4011380:	0005883a 	mov	r2,zero
 4011384:	003dbd06 	br	4010a7c <__alt_data_end+0xfc010a7c>
 4011388:	2000211e 	bne	r4,zero,4011410 <___vfprintf_internal_r+0x2168>
 401138c:	9480004c 	andi	r18,r18,1
 4011390:	90001f1e 	bne	r18,zero,4011410 <___vfprintf_internal_r+0x2168>
 4011394:	00800044 	movi	r2,1
 4011398:	d8802e15 	stw	r2,184(sp)
 401139c:	003db706 	br	4010a7c <__alt_data_end+0xfc010a7c>
 40113a0:	00800b44 	movi	r2,45
 40113a4:	05adc83a 	sub	r22,zero,r22
 40113a8:	d8802305 	stb	r2,140(sp)
 40113ac:	003f3f06 	br	40110ac <__alt_data_end+0xfc0110ac>
 40113b0:	0005883a 	mov	r2,zero
 40113b4:	003f5206 	br	4011100 <__alt_data_end+0xfc011100>
 40113b8:	90a4703a 	and	r18,r18,r2
 40113bc:	903f4e26 	beq	r18,zero,40110f8 <__alt_data_end+0xfc0110f8>
 40113c0:	003f4a06 	br	40110ec <__alt_data_end+0xfc0110ec>
 40113c4:	00800084 	movi	r2,2
 40113c8:	10c5c83a 	sub	r2,r2,r3
 40113cc:	003f8406 	br	40111e0 <__alt_data_end+0xfc0111e0>
 40113d0:	d8802d17 	ldw	r2,180(sp)
 40113d4:	d9002d17 	ldw	r4,180(sp)
 40113d8:	ac400043 	ldbu	r17,1(r21)
 40113dc:	10800017 	ldw	r2,0(r2)
 40113e0:	582b883a 	mov	r21,r11
 40113e4:	d8802915 	stw	r2,164(sp)
 40113e8:	20800104 	addi	r2,r4,4
 40113ec:	d9002917 	ldw	r4,164(sp)
 40113f0:	d8802d15 	stw	r2,180(sp)
 40113f4:	203e7a0e 	bge	r4,zero,4010de0 <__alt_data_end+0xfc010de0>
 40113f8:	8c403fcc 	andi	r17,r17,255
 40113fc:	00bfffc4 	movi	r2,-1
 4011400:	8c40201c 	xori	r17,r17,128
 4011404:	d8802915 	stw	r2,164(sp)
 4011408:	8c7fe004 	addi	r17,r17,-128
 401140c:	00380706 	br	400f42c <__alt_data_end+0xfc00f42c>
 4011410:	d8c02917 	ldw	r3,164(sp)
 4011414:	18c00084 	addi	r3,r3,2
 4011418:	d8c02e15 	stw	r3,184(sp)
 401141c:	1805883a 	mov	r2,r3
 4011420:	183d960e 	bge	r3,zero,4010a7c <__alt_data_end+0xfc010a7c>
 4011424:	003fd606 	br	4011380 <__alt_data_end+0xfc011380>
 4011428:	0005883a 	mov	r2,zero
 401142c:	003f8e06 	br	4011268 <__alt_data_end+0xfc011268>
 4011430:	9080004c 	andi	r2,r18,1
 4011434:	103f811e 	bne	r2,zero,401123c <__alt_data_end+0xfc01123c>
 4011438:	d8802117 	ldw	r2,132(sp)
 401143c:	1405c83a 	sub	r2,r2,r16
 4011440:	d8803315 	stw	r2,204(sp)
 4011444:	b47ef326 	beq	r22,r17,4011014 <__alt_data_end+0xfc011014>
 4011448:	dd802617 	ldw	r22,152(sp)
 401144c:	003f1106 	br	4011094 <__alt_data_end+0xfc011094>
 4011450:	d9c02785 	stb	r7,158(sp)
 4011454:	00390406 	br	400f868 <__alt_data_end+0xfc00f868>
 4011458:	d9c02785 	stb	r7,158(sp)
 401145c:	0038d306 	br	400f7ac <__alt_data_end+0xfc00f7ac>
 4011460:	d9c02785 	stb	r7,158(sp)
 4011464:	003a6106 	br	400fdec <__alt_data_end+0xfc00fdec>
 4011468:	d9c02785 	stb	r7,158(sp)
 401146c:	003af806 	br	4010050 <__alt_data_end+0xfc010050>
 4011470:	0005883a 	mov	r2,zero
 4011474:	003d7e06 	br	4010a70 <__alt_data_end+0xfc010a70>
 4011478:	d8802344 	addi	r2,sp,141
 401147c:	003f1306 	br	40110cc <__alt_data_end+0xfc0110cc>
 4011480:	d9c02785 	stb	r7,158(sp)
 4011484:	00392306 	br	400f914 <__alt_data_end+0xfc00f914>
 4011488:	d9c02785 	stb	r7,158(sp)
 401148c:	003aa906 	br	400ff34 <__alt_data_end+0xfc00ff34>
 4011490:	d9c02785 	stb	r7,158(sp)
 4011494:	003a3d06 	br	400fd8c <__alt_data_end+0xfc00fd8c>
 4011498:	d9c02785 	stb	r7,158(sp)
 401149c:	003aca06 	br	400ffc8 <__alt_data_end+0xfc00ffc8>

040114a0 <__vfprintf_internal>:
 40114a0:	008100f4 	movhi	r2,1027
 40114a4:	10b31d04 	addi	r2,r2,-13196
 40114a8:	300f883a 	mov	r7,r6
 40114ac:	280d883a 	mov	r6,r5
 40114b0:	200b883a 	mov	r5,r4
 40114b4:	11000017 	ldw	r4,0(r2)
 40114b8:	400f2a81 	jmpi	400f2a8 <___vfprintf_internal_r>

040114bc <__sbprintf>:
 40114bc:	2880030b 	ldhu	r2,12(r5)
 40114c0:	2ac01917 	ldw	r11,100(r5)
 40114c4:	2a80038b 	ldhu	r10,14(r5)
 40114c8:	2a400717 	ldw	r9,28(r5)
 40114cc:	2a000917 	ldw	r8,36(r5)
 40114d0:	defee204 	addi	sp,sp,-1144
 40114d4:	00c10004 	movi	r3,1024
 40114d8:	dc011a15 	stw	r16,1128(sp)
 40114dc:	10bfff4c 	andi	r2,r2,65533
 40114e0:	2821883a 	mov	r16,r5
 40114e4:	d8cb883a 	add	r5,sp,r3
 40114e8:	dc811c15 	stw	r18,1136(sp)
 40114ec:	dc411b15 	stw	r17,1132(sp)
 40114f0:	dfc11d15 	stw	ra,1140(sp)
 40114f4:	2025883a 	mov	r18,r4
 40114f8:	d881030d 	sth	r2,1036(sp)
 40114fc:	dac11915 	stw	r11,1124(sp)
 4011500:	da81038d 	sth	r10,1038(sp)
 4011504:	da410715 	stw	r9,1052(sp)
 4011508:	da010915 	stw	r8,1060(sp)
 401150c:	dec10015 	stw	sp,1024(sp)
 4011510:	dec10415 	stw	sp,1040(sp)
 4011514:	d8c10215 	stw	r3,1032(sp)
 4011518:	d8c10515 	stw	r3,1044(sp)
 401151c:	d8010615 	stw	zero,1048(sp)
 4011520:	400f2a80 	call	400f2a8 <___vfprintf_internal_r>
 4011524:	1023883a 	mov	r17,r2
 4011528:	10000416 	blt	r2,zero,401153c <__sbprintf+0x80>
 401152c:	d9410004 	addi	r5,sp,1024
 4011530:	9009883a 	mov	r4,r18
 4011534:	40131700 	call	4013170 <_fflush_r>
 4011538:	10000d1e 	bne	r2,zero,4011570 <__sbprintf+0xb4>
 401153c:	d881030b 	ldhu	r2,1036(sp)
 4011540:	1080100c 	andi	r2,r2,64
 4011544:	10000326 	beq	r2,zero,4011554 <__sbprintf+0x98>
 4011548:	8080030b 	ldhu	r2,12(r16)
 401154c:	10801014 	ori	r2,r2,64
 4011550:	8080030d 	sth	r2,12(r16)
 4011554:	8805883a 	mov	r2,r17
 4011558:	dfc11d17 	ldw	ra,1140(sp)
 401155c:	dc811c17 	ldw	r18,1136(sp)
 4011560:	dc411b17 	ldw	r17,1132(sp)
 4011564:	dc011a17 	ldw	r16,1128(sp)
 4011568:	dec11e04 	addi	sp,sp,1144
 401156c:	f800283a 	ret
 4011570:	047fffc4 	movi	r17,-1
 4011574:	003ff106 	br	401153c <__alt_data_end+0xfc01153c>

04011578 <__swsetup_r>:
 4011578:	008100f4 	movhi	r2,1027
 401157c:	defffd04 	addi	sp,sp,-12
 4011580:	10b31d04 	addi	r2,r2,-13196
 4011584:	dc400115 	stw	r17,4(sp)
 4011588:	2023883a 	mov	r17,r4
 401158c:	11000017 	ldw	r4,0(r2)
 4011590:	dc000015 	stw	r16,0(sp)
 4011594:	dfc00215 	stw	ra,8(sp)
 4011598:	2821883a 	mov	r16,r5
 401159c:	20000226 	beq	r4,zero,40115a8 <__swsetup_r+0x30>
 40115a0:	20800e17 	ldw	r2,56(r4)
 40115a4:	10003126 	beq	r2,zero,401166c <__swsetup_r+0xf4>
 40115a8:	8080030b 	ldhu	r2,12(r16)
 40115ac:	10c0020c 	andi	r3,r2,8
 40115b0:	1009883a 	mov	r4,r2
 40115b4:	18000f26 	beq	r3,zero,40115f4 <__swsetup_r+0x7c>
 40115b8:	80c00417 	ldw	r3,16(r16)
 40115bc:	18001526 	beq	r3,zero,4011614 <__swsetup_r+0x9c>
 40115c0:	1100004c 	andi	r4,r2,1
 40115c4:	20001c1e 	bne	r4,zero,4011638 <__swsetup_r+0xc0>
 40115c8:	1080008c 	andi	r2,r2,2
 40115cc:	1000291e 	bne	r2,zero,4011674 <__swsetup_r+0xfc>
 40115d0:	80800517 	ldw	r2,20(r16)
 40115d4:	80800215 	stw	r2,8(r16)
 40115d8:	18001c26 	beq	r3,zero,401164c <__swsetup_r+0xd4>
 40115dc:	0005883a 	mov	r2,zero
 40115e0:	dfc00217 	ldw	ra,8(sp)
 40115e4:	dc400117 	ldw	r17,4(sp)
 40115e8:	dc000017 	ldw	r16,0(sp)
 40115ec:	dec00304 	addi	sp,sp,12
 40115f0:	f800283a 	ret
 40115f4:	2080040c 	andi	r2,r4,16
 40115f8:	10002e26 	beq	r2,zero,40116b4 <__swsetup_r+0x13c>
 40115fc:	2080010c 	andi	r2,r4,4
 4011600:	10001e1e 	bne	r2,zero,401167c <__swsetup_r+0x104>
 4011604:	80c00417 	ldw	r3,16(r16)
 4011608:	20800214 	ori	r2,r4,8
 401160c:	8080030d 	sth	r2,12(r16)
 4011610:	183feb1e 	bne	r3,zero,40115c0 <__alt_data_end+0xfc0115c0>
 4011614:	1100a00c 	andi	r4,r2,640
 4011618:	01408004 	movi	r5,512
 401161c:	217fe826 	beq	r4,r5,40115c0 <__alt_data_end+0xfc0115c0>
 4011620:	800b883a 	mov	r5,r16
 4011624:	8809883a 	mov	r4,r17
 4011628:	40140f00 	call	40140f0 <__smakebuf_r>
 401162c:	8080030b 	ldhu	r2,12(r16)
 4011630:	80c00417 	ldw	r3,16(r16)
 4011634:	003fe206 	br	40115c0 <__alt_data_end+0xfc0115c0>
 4011638:	80800517 	ldw	r2,20(r16)
 401163c:	80000215 	stw	zero,8(r16)
 4011640:	0085c83a 	sub	r2,zero,r2
 4011644:	80800615 	stw	r2,24(r16)
 4011648:	183fe41e 	bne	r3,zero,40115dc <__alt_data_end+0xfc0115dc>
 401164c:	80c0030b 	ldhu	r3,12(r16)
 4011650:	0005883a 	mov	r2,zero
 4011654:	1900200c 	andi	r4,r3,128
 4011658:	203fe126 	beq	r4,zero,40115e0 <__alt_data_end+0xfc0115e0>
 401165c:	18c01014 	ori	r3,r3,64
 4011660:	80c0030d 	sth	r3,12(r16)
 4011664:	00bfffc4 	movi	r2,-1
 4011668:	003fdd06 	br	40115e0 <__alt_data_end+0xfc0115e0>
 401166c:	401354c0 	call	401354c <__sinit>
 4011670:	003fcd06 	br	40115a8 <__alt_data_end+0xfc0115a8>
 4011674:	0005883a 	mov	r2,zero
 4011678:	003fd606 	br	40115d4 <__alt_data_end+0xfc0115d4>
 401167c:	81400c17 	ldw	r5,48(r16)
 4011680:	28000626 	beq	r5,zero,401169c <__swsetup_r+0x124>
 4011684:	80801004 	addi	r2,r16,64
 4011688:	28800326 	beq	r5,r2,4011698 <__swsetup_r+0x120>
 401168c:	8809883a 	mov	r4,r17
 4011690:	40136c00 	call	40136c0 <_free_r>
 4011694:	8100030b 	ldhu	r4,12(r16)
 4011698:	80000c15 	stw	zero,48(r16)
 401169c:	80c00417 	ldw	r3,16(r16)
 40116a0:	00bff6c4 	movi	r2,-37
 40116a4:	1108703a 	and	r4,r2,r4
 40116a8:	80000115 	stw	zero,4(r16)
 40116ac:	80c00015 	stw	r3,0(r16)
 40116b0:	003fd506 	br	4011608 <__alt_data_end+0xfc011608>
 40116b4:	00800244 	movi	r2,9
 40116b8:	88800015 	stw	r2,0(r17)
 40116bc:	20801014 	ori	r2,r4,64
 40116c0:	8080030d 	sth	r2,12(r16)
 40116c4:	00bfffc4 	movi	r2,-1
 40116c8:	003fc506 	br	40115e0 <__alt_data_end+0xfc0115e0>

040116cc <quorem>:
 40116cc:	defff704 	addi	sp,sp,-36
 40116d0:	dc800215 	stw	r18,8(sp)
 40116d4:	20800417 	ldw	r2,16(r4)
 40116d8:	2c800417 	ldw	r18,16(r5)
 40116dc:	dfc00815 	stw	ra,32(sp)
 40116e0:	ddc00715 	stw	r23,28(sp)
 40116e4:	dd800615 	stw	r22,24(sp)
 40116e8:	dd400515 	stw	r21,20(sp)
 40116ec:	dd000415 	stw	r20,16(sp)
 40116f0:	dcc00315 	stw	r19,12(sp)
 40116f4:	dc400115 	stw	r17,4(sp)
 40116f8:	dc000015 	stw	r16,0(sp)
 40116fc:	14807116 	blt	r2,r18,40118c4 <quorem+0x1f8>
 4011700:	94bfffc4 	addi	r18,r18,-1
 4011704:	94ad883a 	add	r22,r18,r18
 4011708:	b5ad883a 	add	r22,r22,r22
 401170c:	2c400504 	addi	r17,r5,20
 4011710:	8da9883a 	add	r20,r17,r22
 4011714:	25400504 	addi	r21,r4,20
 4011718:	282f883a 	mov	r23,r5
 401171c:	adad883a 	add	r22,r21,r22
 4011720:	a1400017 	ldw	r5,0(r20)
 4011724:	2021883a 	mov	r16,r4
 4011728:	b1000017 	ldw	r4,0(r22)
 401172c:	29400044 	addi	r5,r5,1
 4011730:	400b8780 	call	400b878 <__udivsi3>
 4011734:	1027883a 	mov	r19,r2
 4011738:	10002c26 	beq	r2,zero,40117ec <quorem+0x120>
 401173c:	a813883a 	mov	r9,r21
 4011740:	880b883a 	mov	r5,r17
 4011744:	0009883a 	mov	r4,zero
 4011748:	000d883a 	mov	r6,zero
 401174c:	2a000017 	ldw	r8,0(r5)
 4011750:	49c00017 	ldw	r7,0(r9)
 4011754:	29400104 	addi	r5,r5,4
 4011758:	40bfffcc 	andi	r2,r8,65535
 401175c:	14c5383a 	mul	r2,r2,r19
 4011760:	4010d43a 	srli	r8,r8,16
 4011764:	38ffffcc 	andi	r3,r7,65535
 4011768:	1105883a 	add	r2,r2,r4
 401176c:	1008d43a 	srli	r4,r2,16
 4011770:	44d1383a 	mul	r8,r8,r19
 4011774:	198d883a 	add	r6,r3,r6
 4011778:	10ffffcc 	andi	r3,r2,65535
 401177c:	30c7c83a 	sub	r3,r6,r3
 4011780:	380ed43a 	srli	r7,r7,16
 4011784:	4105883a 	add	r2,r8,r4
 4011788:	180dd43a 	srai	r6,r3,16
 401178c:	113fffcc 	andi	r4,r2,65535
 4011790:	390fc83a 	sub	r7,r7,r4
 4011794:	398d883a 	add	r6,r7,r6
 4011798:	300e943a 	slli	r7,r6,16
 401179c:	18ffffcc 	andi	r3,r3,65535
 40117a0:	1008d43a 	srli	r4,r2,16
 40117a4:	38ceb03a 	or	r7,r7,r3
 40117a8:	49c00015 	stw	r7,0(r9)
 40117ac:	300dd43a 	srai	r6,r6,16
 40117b0:	4a400104 	addi	r9,r9,4
 40117b4:	a17fe52e 	bgeu	r20,r5,401174c <__alt_data_end+0xfc01174c>
 40117b8:	b0800017 	ldw	r2,0(r22)
 40117bc:	10000b1e 	bne	r2,zero,40117ec <quorem+0x120>
 40117c0:	b0bfff04 	addi	r2,r22,-4
 40117c4:	a880082e 	bgeu	r21,r2,40117e8 <quorem+0x11c>
 40117c8:	b0ffff17 	ldw	r3,-4(r22)
 40117cc:	18000326 	beq	r3,zero,40117dc <quorem+0x110>
 40117d0:	00000506 	br	40117e8 <quorem+0x11c>
 40117d4:	10c00017 	ldw	r3,0(r2)
 40117d8:	1800031e 	bne	r3,zero,40117e8 <quorem+0x11c>
 40117dc:	10bfff04 	addi	r2,r2,-4
 40117e0:	94bfffc4 	addi	r18,r18,-1
 40117e4:	a8bffb36 	bltu	r21,r2,40117d4 <__alt_data_end+0xfc0117d4>
 40117e8:	84800415 	stw	r18,16(r16)
 40117ec:	b80b883a 	mov	r5,r23
 40117f0:	8009883a 	mov	r4,r16
 40117f4:	4014db40 	call	4014db4 <__mcmp>
 40117f8:	10002616 	blt	r2,zero,4011894 <quorem+0x1c8>
 40117fc:	9cc00044 	addi	r19,r19,1
 4011800:	a805883a 	mov	r2,r21
 4011804:	000b883a 	mov	r5,zero
 4011808:	11000017 	ldw	r4,0(r2)
 401180c:	89800017 	ldw	r6,0(r17)
 4011810:	10800104 	addi	r2,r2,4
 4011814:	20ffffcc 	andi	r3,r4,65535
 4011818:	194b883a 	add	r5,r3,r5
 401181c:	30ffffcc 	andi	r3,r6,65535
 4011820:	28c7c83a 	sub	r3,r5,r3
 4011824:	300cd43a 	srli	r6,r6,16
 4011828:	2008d43a 	srli	r4,r4,16
 401182c:	180bd43a 	srai	r5,r3,16
 4011830:	18ffffcc 	andi	r3,r3,65535
 4011834:	2189c83a 	sub	r4,r4,r6
 4011838:	2149883a 	add	r4,r4,r5
 401183c:	200c943a 	slli	r6,r4,16
 4011840:	8c400104 	addi	r17,r17,4
 4011844:	200bd43a 	srai	r5,r4,16
 4011848:	30c6b03a 	or	r3,r6,r3
 401184c:	10ffff15 	stw	r3,-4(r2)
 4011850:	a47fed2e 	bgeu	r20,r17,4011808 <__alt_data_end+0xfc011808>
 4011854:	9485883a 	add	r2,r18,r18
 4011858:	1085883a 	add	r2,r2,r2
 401185c:	a887883a 	add	r3,r21,r2
 4011860:	18800017 	ldw	r2,0(r3)
 4011864:	10000b1e 	bne	r2,zero,4011894 <quorem+0x1c8>
 4011868:	18bfff04 	addi	r2,r3,-4
 401186c:	a880082e 	bgeu	r21,r2,4011890 <quorem+0x1c4>
 4011870:	18ffff17 	ldw	r3,-4(r3)
 4011874:	18000326 	beq	r3,zero,4011884 <quorem+0x1b8>
 4011878:	00000506 	br	4011890 <quorem+0x1c4>
 401187c:	10c00017 	ldw	r3,0(r2)
 4011880:	1800031e 	bne	r3,zero,4011890 <quorem+0x1c4>
 4011884:	10bfff04 	addi	r2,r2,-4
 4011888:	94bfffc4 	addi	r18,r18,-1
 401188c:	a8bffb36 	bltu	r21,r2,401187c <__alt_data_end+0xfc01187c>
 4011890:	84800415 	stw	r18,16(r16)
 4011894:	9805883a 	mov	r2,r19
 4011898:	dfc00817 	ldw	ra,32(sp)
 401189c:	ddc00717 	ldw	r23,28(sp)
 40118a0:	dd800617 	ldw	r22,24(sp)
 40118a4:	dd400517 	ldw	r21,20(sp)
 40118a8:	dd000417 	ldw	r20,16(sp)
 40118ac:	dcc00317 	ldw	r19,12(sp)
 40118b0:	dc800217 	ldw	r18,8(sp)
 40118b4:	dc400117 	ldw	r17,4(sp)
 40118b8:	dc000017 	ldw	r16,0(sp)
 40118bc:	dec00904 	addi	sp,sp,36
 40118c0:	f800283a 	ret
 40118c4:	0005883a 	mov	r2,zero
 40118c8:	003ff306 	br	4011898 <__alt_data_end+0xfc011898>

040118cc <_dtoa_r>:
 40118cc:	20801017 	ldw	r2,64(r4)
 40118d0:	deffde04 	addi	sp,sp,-136
 40118d4:	df002015 	stw	fp,128(sp)
 40118d8:	dcc01b15 	stw	r19,108(sp)
 40118dc:	dc801a15 	stw	r18,104(sp)
 40118e0:	dc401915 	stw	r17,100(sp)
 40118e4:	dc001815 	stw	r16,96(sp)
 40118e8:	dfc02115 	stw	ra,132(sp)
 40118ec:	ddc01f15 	stw	r23,124(sp)
 40118f0:	dd801e15 	stw	r22,120(sp)
 40118f4:	dd401d15 	stw	r21,116(sp)
 40118f8:	dd001c15 	stw	r20,112(sp)
 40118fc:	d9c00315 	stw	r7,12(sp)
 4011900:	2039883a 	mov	fp,r4
 4011904:	3023883a 	mov	r17,r6
 4011908:	2825883a 	mov	r18,r5
 401190c:	dc002417 	ldw	r16,144(sp)
 4011910:	3027883a 	mov	r19,r6
 4011914:	10000826 	beq	r2,zero,4011938 <_dtoa_r+0x6c>
 4011918:	21801117 	ldw	r6,68(r4)
 401191c:	00c00044 	movi	r3,1
 4011920:	100b883a 	mov	r5,r2
 4011924:	1986983a 	sll	r3,r3,r6
 4011928:	11800115 	stw	r6,4(r2)
 401192c:	10c00215 	stw	r3,8(r2)
 4011930:	40145940 	call	4014594 <_Bfree>
 4011934:	e0001015 	stw	zero,64(fp)
 4011938:	88002e16 	blt	r17,zero,40119f4 <_dtoa_r+0x128>
 401193c:	80000015 	stw	zero,0(r16)
 4011940:	889ffc2c 	andhi	r2,r17,32752
 4011944:	00dffc34 	movhi	r3,32752
 4011948:	10c01c26 	beq	r2,r3,40119bc <_dtoa_r+0xf0>
 401194c:	000d883a 	mov	r6,zero
 4011950:	000f883a 	mov	r7,zero
 4011954:	9009883a 	mov	r4,r18
 4011958:	980b883a 	mov	r5,r19
 401195c:	401ad300 	call	401ad30 <__eqdf2>
 4011960:	10002b1e 	bne	r2,zero,4011a10 <_dtoa_r+0x144>
 4011964:	d9c02317 	ldw	r7,140(sp)
 4011968:	00800044 	movi	r2,1
 401196c:	38800015 	stw	r2,0(r7)
 4011970:	d8802517 	ldw	r2,148(sp)
 4011974:	10019e26 	beq	r2,zero,4011ff0 <_dtoa_r+0x724>
 4011978:	d8c02517 	ldw	r3,148(sp)
 401197c:	008100b4 	movhi	r2,1026
 4011980:	10bfcb44 	addi	r2,r2,-211
 4011984:	18800015 	stw	r2,0(r3)
 4011988:	10bfffc4 	addi	r2,r2,-1
 401198c:	dfc02117 	ldw	ra,132(sp)
 4011990:	df002017 	ldw	fp,128(sp)
 4011994:	ddc01f17 	ldw	r23,124(sp)
 4011998:	dd801e17 	ldw	r22,120(sp)
 401199c:	dd401d17 	ldw	r21,116(sp)
 40119a0:	dd001c17 	ldw	r20,112(sp)
 40119a4:	dcc01b17 	ldw	r19,108(sp)
 40119a8:	dc801a17 	ldw	r18,104(sp)
 40119ac:	dc401917 	ldw	r17,100(sp)
 40119b0:	dc001817 	ldw	r16,96(sp)
 40119b4:	dec02204 	addi	sp,sp,136
 40119b8:	f800283a 	ret
 40119bc:	d8c02317 	ldw	r3,140(sp)
 40119c0:	0089c3c4 	movi	r2,9999
 40119c4:	18800015 	stw	r2,0(r3)
 40119c8:	90017726 	beq	r18,zero,4011fa8 <_dtoa_r+0x6dc>
 40119cc:	008100b4 	movhi	r2,1026
 40119d0:	10bfdf04 	addi	r2,r2,-132
 40119d4:	d9002517 	ldw	r4,148(sp)
 40119d8:	203fec26 	beq	r4,zero,401198c <__alt_data_end+0xfc01198c>
 40119dc:	10c000c7 	ldb	r3,3(r2)
 40119e0:	1801781e 	bne	r3,zero,4011fc4 <_dtoa_r+0x6f8>
 40119e4:	10c000c4 	addi	r3,r2,3
 40119e8:	d9802517 	ldw	r6,148(sp)
 40119ec:	30c00015 	stw	r3,0(r6)
 40119f0:	003fe606 	br	401198c <__alt_data_end+0xfc01198c>
 40119f4:	04e00034 	movhi	r19,32768
 40119f8:	9cffffc4 	addi	r19,r19,-1
 40119fc:	00800044 	movi	r2,1
 4011a00:	8ce6703a 	and	r19,r17,r19
 4011a04:	80800015 	stw	r2,0(r16)
 4011a08:	9823883a 	mov	r17,r19
 4011a0c:	003fcc06 	br	4011940 <__alt_data_end+0xfc011940>
 4011a10:	d8800204 	addi	r2,sp,8
 4011a14:	d8800015 	stw	r2,0(sp)
 4011a18:	d9c00104 	addi	r7,sp,4
 4011a1c:	900b883a 	mov	r5,r18
 4011a20:	980d883a 	mov	r6,r19
 4011a24:	e009883a 	mov	r4,fp
 4011a28:	8820d53a 	srli	r16,r17,20
 4011a2c:	40151800 	call	4015180 <__d2b>
 4011a30:	d8800915 	stw	r2,36(sp)
 4011a34:	8001651e 	bne	r16,zero,4011fcc <_dtoa_r+0x700>
 4011a38:	dd800217 	ldw	r22,8(sp)
 4011a3c:	dc000117 	ldw	r16,4(sp)
 4011a40:	00800804 	movi	r2,32
 4011a44:	b421883a 	add	r16,r22,r16
 4011a48:	80c10c84 	addi	r3,r16,1074
 4011a4c:	10c2d10e 	bge	r2,r3,4012594 <_dtoa_r+0xcc8>
 4011a50:	00801004 	movi	r2,64
 4011a54:	81010484 	addi	r4,r16,1042
 4011a58:	10c7c83a 	sub	r3,r2,r3
 4011a5c:	9108d83a 	srl	r4,r18,r4
 4011a60:	88e2983a 	sll	r17,r17,r3
 4011a64:	2448b03a 	or	r4,r4,r17
 4011a68:	401c0f80 	call	401c0f8 <__floatunsidf>
 4011a6c:	017f8434 	movhi	r5,65040
 4011a70:	01800044 	movi	r6,1
 4011a74:	1009883a 	mov	r4,r2
 4011a78:	194b883a 	add	r5,r3,r5
 4011a7c:	843fffc4 	addi	r16,r16,-1
 4011a80:	d9801115 	stw	r6,68(sp)
 4011a84:	000d883a 	mov	r6,zero
 4011a88:	01cffe34 	movhi	r7,16376
 4011a8c:	401b6a00 	call	401b6a0 <__subdf3>
 4011a90:	0198dbf4 	movhi	r6,25455
 4011a94:	01cff4f4 	movhi	r7,16339
 4011a98:	3190d844 	addi	r6,r6,17249
 4011a9c:	39e1e9c4 	addi	r7,r7,-30809
 4011aa0:	1009883a 	mov	r4,r2
 4011aa4:	180b883a 	mov	r5,r3
 4011aa8:	401af880 	call	401af88 <__muldf3>
 4011aac:	01a2d874 	movhi	r6,35681
 4011ab0:	01cff1f4 	movhi	r7,16327
 4011ab4:	31b22cc4 	addi	r6,r6,-14157
 4011ab8:	39e28a04 	addi	r7,r7,-30168
 4011abc:	180b883a 	mov	r5,r3
 4011ac0:	1009883a 	mov	r4,r2
 4011ac4:	4019b9c0 	call	4019b9c <__adddf3>
 4011ac8:	8009883a 	mov	r4,r16
 4011acc:	1029883a 	mov	r20,r2
 4011ad0:	1823883a 	mov	r17,r3
 4011ad4:	401c01c0 	call	401c01c <__floatsidf>
 4011ad8:	019427f4 	movhi	r6,20639
 4011adc:	01cff4f4 	movhi	r7,16339
 4011ae0:	319e7ec4 	addi	r6,r6,31227
 4011ae4:	39d104c4 	addi	r7,r7,17427
 4011ae8:	1009883a 	mov	r4,r2
 4011aec:	180b883a 	mov	r5,r3
 4011af0:	401af880 	call	401af88 <__muldf3>
 4011af4:	100d883a 	mov	r6,r2
 4011af8:	180f883a 	mov	r7,r3
 4011afc:	a009883a 	mov	r4,r20
 4011b00:	880b883a 	mov	r5,r17
 4011b04:	4019b9c0 	call	4019b9c <__adddf3>
 4011b08:	1009883a 	mov	r4,r2
 4011b0c:	180b883a 	mov	r5,r3
 4011b10:	1029883a 	mov	r20,r2
 4011b14:	1823883a 	mov	r17,r3
 4011b18:	401bf9c0 	call	401bf9c <__fixdfsi>
 4011b1c:	000d883a 	mov	r6,zero
 4011b20:	000f883a 	mov	r7,zero
 4011b24:	a009883a 	mov	r4,r20
 4011b28:	880b883a 	mov	r5,r17
 4011b2c:	d8800515 	stw	r2,20(sp)
 4011b30:	401ae940 	call	401ae94 <__ledf2>
 4011b34:	10028716 	blt	r2,zero,4012554 <_dtoa_r+0xc88>
 4011b38:	d8c00517 	ldw	r3,20(sp)
 4011b3c:	00800584 	movi	r2,22
 4011b40:	10c27536 	bltu	r2,r3,4012518 <_dtoa_r+0xc4c>
 4011b44:	180490fa 	slli	r2,r3,3
 4011b48:	00c100b4 	movhi	r3,1026
 4011b4c:	18fffa04 	addi	r3,r3,-24
 4011b50:	1885883a 	add	r2,r3,r2
 4011b54:	11000017 	ldw	r4,0(r2)
 4011b58:	11400117 	ldw	r5,4(r2)
 4011b5c:	900d883a 	mov	r6,r18
 4011b60:	980f883a 	mov	r7,r19
 4011b64:	401adb80 	call	401adb8 <__gedf2>
 4011b68:	00828d0e 	bge	zero,r2,40125a0 <_dtoa_r+0xcd4>
 4011b6c:	d9000517 	ldw	r4,20(sp)
 4011b70:	d8000e15 	stw	zero,56(sp)
 4011b74:	213fffc4 	addi	r4,r4,-1
 4011b78:	d9000515 	stw	r4,20(sp)
 4011b7c:	b42dc83a 	sub	r22,r22,r16
 4011b80:	b5bfffc4 	addi	r22,r22,-1
 4011b84:	b0026f16 	blt	r22,zero,4012544 <_dtoa_r+0xc78>
 4011b88:	d8000815 	stw	zero,32(sp)
 4011b8c:	d9c00517 	ldw	r7,20(sp)
 4011b90:	38026416 	blt	r7,zero,4012524 <_dtoa_r+0xc58>
 4011b94:	b1ed883a 	add	r22,r22,r7
 4011b98:	d9c00d15 	stw	r7,52(sp)
 4011b9c:	d8000a15 	stw	zero,40(sp)
 4011ba0:	d9800317 	ldw	r6,12(sp)
 4011ba4:	00800244 	movi	r2,9
 4011ba8:	11811436 	bltu	r2,r6,4011ffc <_dtoa_r+0x730>
 4011bac:	00800144 	movi	r2,5
 4011bb0:	1184e10e 	bge	r2,r6,4012f38 <_dtoa_r+0x166c>
 4011bb4:	31bfff04 	addi	r6,r6,-4
 4011bb8:	d9800315 	stw	r6,12(sp)
 4011bbc:	0023883a 	mov	r17,zero
 4011bc0:	d9800317 	ldw	r6,12(sp)
 4011bc4:	008000c4 	movi	r2,3
 4011bc8:	30836726 	beq	r6,r2,4012968 <_dtoa_r+0x109c>
 4011bcc:	1183410e 	bge	r2,r6,40128d4 <_dtoa_r+0x1008>
 4011bd0:	d9c00317 	ldw	r7,12(sp)
 4011bd4:	00800104 	movi	r2,4
 4011bd8:	38827c26 	beq	r7,r2,40125cc <_dtoa_r+0xd00>
 4011bdc:	00800144 	movi	r2,5
 4011be0:	3884c41e 	bne	r7,r2,4012ef4 <_dtoa_r+0x1628>
 4011be4:	00800044 	movi	r2,1
 4011be8:	d8800b15 	stw	r2,44(sp)
 4011bec:	d8c00517 	ldw	r3,20(sp)
 4011bf0:	d9002217 	ldw	r4,136(sp)
 4011bf4:	1907883a 	add	r3,r3,r4
 4011bf8:	19800044 	addi	r6,r3,1
 4011bfc:	d8c00c15 	stw	r3,48(sp)
 4011c00:	d9800615 	stw	r6,24(sp)
 4011c04:	0183a40e 	bge	zero,r6,4012a98 <_dtoa_r+0x11cc>
 4011c08:	d9800617 	ldw	r6,24(sp)
 4011c0c:	3021883a 	mov	r16,r6
 4011c10:	e0001115 	stw	zero,68(fp)
 4011c14:	008005c4 	movi	r2,23
 4011c18:	1184c92e 	bgeu	r2,r6,4012f40 <_dtoa_r+0x1674>
 4011c1c:	00c00044 	movi	r3,1
 4011c20:	00800104 	movi	r2,4
 4011c24:	1085883a 	add	r2,r2,r2
 4011c28:	11000504 	addi	r4,r2,20
 4011c2c:	180b883a 	mov	r5,r3
 4011c30:	18c00044 	addi	r3,r3,1
 4011c34:	313ffb2e 	bgeu	r6,r4,4011c24 <__alt_data_end+0xfc011c24>
 4011c38:	e1401115 	stw	r5,68(fp)
 4011c3c:	e009883a 	mov	r4,fp
 4011c40:	40144ec0 	call	40144ec <_Balloc>
 4011c44:	d8800715 	stw	r2,28(sp)
 4011c48:	e0801015 	stw	r2,64(fp)
 4011c4c:	00800384 	movi	r2,14
 4011c50:	1400f736 	bltu	r2,r16,4012030 <_dtoa_r+0x764>
 4011c54:	8800f626 	beq	r17,zero,4012030 <_dtoa_r+0x764>
 4011c58:	d9c00517 	ldw	r7,20(sp)
 4011c5c:	01c39a0e 	bge	zero,r7,4012ac8 <_dtoa_r+0x11fc>
 4011c60:	388003cc 	andi	r2,r7,15
 4011c64:	100490fa 	slli	r2,r2,3
 4011c68:	382bd13a 	srai	r21,r7,4
 4011c6c:	00c100b4 	movhi	r3,1026
 4011c70:	18fffa04 	addi	r3,r3,-24
 4011c74:	1885883a 	add	r2,r3,r2
 4011c78:	a8c0040c 	andi	r3,r21,16
 4011c7c:	12400017 	ldw	r9,0(r2)
 4011c80:	12000117 	ldw	r8,4(r2)
 4011c84:	18037926 	beq	r3,zero,4012a6c <_dtoa_r+0x11a0>
 4011c88:	008100b4 	movhi	r2,1026
 4011c8c:	10bff004 	addi	r2,r2,-64
 4011c90:	11800817 	ldw	r6,32(r2)
 4011c94:	11c00917 	ldw	r7,36(r2)
 4011c98:	9009883a 	mov	r4,r18
 4011c9c:	980b883a 	mov	r5,r19
 4011ca0:	da001715 	stw	r8,92(sp)
 4011ca4:	da401615 	stw	r9,88(sp)
 4011ca8:	401a4480 	call	401a448 <__divdf3>
 4011cac:	da001717 	ldw	r8,92(sp)
 4011cb0:	da401617 	ldw	r9,88(sp)
 4011cb4:	ad4003cc 	andi	r21,r21,15
 4011cb8:	040000c4 	movi	r16,3
 4011cbc:	1023883a 	mov	r17,r2
 4011cc0:	1829883a 	mov	r20,r3
 4011cc4:	a8001126 	beq	r21,zero,4011d0c <_dtoa_r+0x440>
 4011cc8:	05c100b4 	movhi	r23,1026
 4011ccc:	bdfff004 	addi	r23,r23,-64
 4011cd0:	4805883a 	mov	r2,r9
 4011cd4:	4007883a 	mov	r3,r8
 4011cd8:	a980004c 	andi	r6,r21,1
 4011cdc:	1009883a 	mov	r4,r2
 4011ce0:	a82bd07a 	srai	r21,r21,1
 4011ce4:	180b883a 	mov	r5,r3
 4011ce8:	30000426 	beq	r6,zero,4011cfc <_dtoa_r+0x430>
 4011cec:	b9800017 	ldw	r6,0(r23)
 4011cf0:	b9c00117 	ldw	r7,4(r23)
 4011cf4:	84000044 	addi	r16,r16,1
 4011cf8:	401af880 	call	401af88 <__muldf3>
 4011cfc:	bdc00204 	addi	r23,r23,8
 4011d00:	a83ff51e 	bne	r21,zero,4011cd8 <__alt_data_end+0xfc011cd8>
 4011d04:	1013883a 	mov	r9,r2
 4011d08:	1811883a 	mov	r8,r3
 4011d0c:	480d883a 	mov	r6,r9
 4011d10:	400f883a 	mov	r7,r8
 4011d14:	8809883a 	mov	r4,r17
 4011d18:	a00b883a 	mov	r5,r20
 4011d1c:	401a4480 	call	401a448 <__divdf3>
 4011d20:	d8800f15 	stw	r2,60(sp)
 4011d24:	d8c01015 	stw	r3,64(sp)
 4011d28:	d8c00e17 	ldw	r3,56(sp)
 4011d2c:	18000626 	beq	r3,zero,4011d48 <_dtoa_r+0x47c>
 4011d30:	d9000f17 	ldw	r4,60(sp)
 4011d34:	d9401017 	ldw	r5,64(sp)
 4011d38:	000d883a 	mov	r6,zero
 4011d3c:	01cffc34 	movhi	r7,16368
 4011d40:	401ae940 	call	401ae94 <__ledf2>
 4011d44:	10040b16 	blt	r2,zero,4012d74 <_dtoa_r+0x14a8>
 4011d48:	8009883a 	mov	r4,r16
 4011d4c:	401c01c0 	call	401c01c <__floatsidf>
 4011d50:	d9800f17 	ldw	r6,60(sp)
 4011d54:	d9c01017 	ldw	r7,64(sp)
 4011d58:	1009883a 	mov	r4,r2
 4011d5c:	180b883a 	mov	r5,r3
 4011d60:	401af880 	call	401af88 <__muldf3>
 4011d64:	000d883a 	mov	r6,zero
 4011d68:	01d00734 	movhi	r7,16412
 4011d6c:	1009883a 	mov	r4,r2
 4011d70:	180b883a 	mov	r5,r3
 4011d74:	4019b9c0 	call	4019b9c <__adddf3>
 4011d78:	1021883a 	mov	r16,r2
 4011d7c:	d8800617 	ldw	r2,24(sp)
 4011d80:	047f3034 	movhi	r17,64704
 4011d84:	1c63883a 	add	r17,r3,r17
 4011d88:	10031826 	beq	r2,zero,40129ec <_dtoa_r+0x1120>
 4011d8c:	d8c00517 	ldw	r3,20(sp)
 4011d90:	db000617 	ldw	r12,24(sp)
 4011d94:	d8c01315 	stw	r3,76(sp)
 4011d98:	d9000b17 	ldw	r4,44(sp)
 4011d9c:	20038f26 	beq	r4,zero,4012bdc <_dtoa_r+0x1310>
 4011da0:	60bfffc4 	addi	r2,r12,-1
 4011da4:	100490fa 	slli	r2,r2,3
 4011da8:	00c100b4 	movhi	r3,1026
 4011dac:	18fffa04 	addi	r3,r3,-24
 4011db0:	1885883a 	add	r2,r3,r2
 4011db4:	11800017 	ldw	r6,0(r2)
 4011db8:	11c00117 	ldw	r7,4(r2)
 4011dbc:	d8800717 	ldw	r2,28(sp)
 4011dc0:	0009883a 	mov	r4,zero
 4011dc4:	014ff834 	movhi	r5,16352
 4011dc8:	db001615 	stw	r12,88(sp)
 4011dcc:	15c00044 	addi	r23,r2,1
 4011dd0:	401a4480 	call	401a448 <__divdf3>
 4011dd4:	800d883a 	mov	r6,r16
 4011dd8:	880f883a 	mov	r7,r17
 4011ddc:	1009883a 	mov	r4,r2
 4011de0:	180b883a 	mov	r5,r3
 4011de4:	401b6a00 	call	401b6a0 <__subdf3>
 4011de8:	d9401017 	ldw	r5,64(sp)
 4011dec:	d9000f17 	ldw	r4,60(sp)
 4011df0:	102b883a 	mov	r21,r2
 4011df4:	d8c01215 	stw	r3,72(sp)
 4011df8:	401bf9c0 	call	401bf9c <__fixdfsi>
 4011dfc:	1009883a 	mov	r4,r2
 4011e00:	1029883a 	mov	r20,r2
 4011e04:	401c01c0 	call	401c01c <__floatsidf>
 4011e08:	d9000f17 	ldw	r4,60(sp)
 4011e0c:	d9401017 	ldw	r5,64(sp)
 4011e10:	100d883a 	mov	r6,r2
 4011e14:	180f883a 	mov	r7,r3
 4011e18:	401b6a00 	call	401b6a0 <__subdf3>
 4011e1c:	1823883a 	mov	r17,r3
 4011e20:	d8c00717 	ldw	r3,28(sp)
 4011e24:	d9401217 	ldw	r5,72(sp)
 4011e28:	a2000c04 	addi	r8,r20,48
 4011e2c:	1021883a 	mov	r16,r2
 4011e30:	1a000005 	stb	r8,0(r3)
 4011e34:	800d883a 	mov	r6,r16
 4011e38:	880f883a 	mov	r7,r17
 4011e3c:	a809883a 	mov	r4,r21
 4011e40:	4029883a 	mov	r20,r8
 4011e44:	401adb80 	call	401adb8 <__gedf2>
 4011e48:	00841d16 	blt	zero,r2,4012ec0 <_dtoa_r+0x15f4>
 4011e4c:	800d883a 	mov	r6,r16
 4011e50:	880f883a 	mov	r7,r17
 4011e54:	0009883a 	mov	r4,zero
 4011e58:	014ffc34 	movhi	r5,16368
 4011e5c:	401b6a00 	call	401b6a0 <__subdf3>
 4011e60:	d9401217 	ldw	r5,72(sp)
 4011e64:	100d883a 	mov	r6,r2
 4011e68:	180f883a 	mov	r7,r3
 4011e6c:	a809883a 	mov	r4,r21
 4011e70:	401adb80 	call	401adb8 <__gedf2>
 4011e74:	db001617 	ldw	r12,88(sp)
 4011e78:	00840e16 	blt	zero,r2,4012eb4 <_dtoa_r+0x15e8>
 4011e7c:	00800044 	movi	r2,1
 4011e80:	13006b0e 	bge	r2,r12,4012030 <_dtoa_r+0x764>
 4011e84:	d9000717 	ldw	r4,28(sp)
 4011e88:	dd800f15 	stw	r22,60(sp)
 4011e8c:	dcc01015 	stw	r19,64(sp)
 4011e90:	2319883a 	add	r12,r4,r12
 4011e94:	dcc01217 	ldw	r19,72(sp)
 4011e98:	602d883a 	mov	r22,r12
 4011e9c:	dc801215 	stw	r18,72(sp)
 4011ea0:	b825883a 	mov	r18,r23
 4011ea4:	00000906 	br	4011ecc <_dtoa_r+0x600>
 4011ea8:	401b6a00 	call	401b6a0 <__subdf3>
 4011eac:	a80d883a 	mov	r6,r21
 4011eb0:	980f883a 	mov	r7,r19
 4011eb4:	1009883a 	mov	r4,r2
 4011eb8:	180b883a 	mov	r5,r3
 4011ebc:	401ae940 	call	401ae94 <__ledf2>
 4011ec0:	1003e816 	blt	r2,zero,4012e64 <_dtoa_r+0x1598>
 4011ec4:	b825883a 	mov	r18,r23
 4011ec8:	bd83e926 	beq	r23,r22,4012e70 <_dtoa_r+0x15a4>
 4011ecc:	a809883a 	mov	r4,r21
 4011ed0:	980b883a 	mov	r5,r19
 4011ed4:	000d883a 	mov	r6,zero
 4011ed8:	01d00934 	movhi	r7,16420
 4011edc:	401af880 	call	401af88 <__muldf3>
 4011ee0:	000d883a 	mov	r6,zero
 4011ee4:	01d00934 	movhi	r7,16420
 4011ee8:	8009883a 	mov	r4,r16
 4011eec:	880b883a 	mov	r5,r17
 4011ef0:	102b883a 	mov	r21,r2
 4011ef4:	1827883a 	mov	r19,r3
 4011ef8:	401af880 	call	401af88 <__muldf3>
 4011efc:	180b883a 	mov	r5,r3
 4011f00:	1009883a 	mov	r4,r2
 4011f04:	1821883a 	mov	r16,r3
 4011f08:	1023883a 	mov	r17,r2
 4011f0c:	401bf9c0 	call	401bf9c <__fixdfsi>
 4011f10:	1009883a 	mov	r4,r2
 4011f14:	1029883a 	mov	r20,r2
 4011f18:	401c01c0 	call	401c01c <__floatsidf>
 4011f1c:	8809883a 	mov	r4,r17
 4011f20:	800b883a 	mov	r5,r16
 4011f24:	100d883a 	mov	r6,r2
 4011f28:	180f883a 	mov	r7,r3
 4011f2c:	401b6a00 	call	401b6a0 <__subdf3>
 4011f30:	a5000c04 	addi	r20,r20,48
 4011f34:	a80d883a 	mov	r6,r21
 4011f38:	980f883a 	mov	r7,r19
 4011f3c:	1009883a 	mov	r4,r2
 4011f40:	180b883a 	mov	r5,r3
 4011f44:	95000005 	stb	r20,0(r18)
 4011f48:	1021883a 	mov	r16,r2
 4011f4c:	1823883a 	mov	r17,r3
 4011f50:	401ae940 	call	401ae94 <__ledf2>
 4011f54:	bdc00044 	addi	r23,r23,1
 4011f58:	800d883a 	mov	r6,r16
 4011f5c:	880f883a 	mov	r7,r17
 4011f60:	0009883a 	mov	r4,zero
 4011f64:	014ffc34 	movhi	r5,16368
 4011f68:	103fcf0e 	bge	r2,zero,4011ea8 <__alt_data_end+0xfc011ea8>
 4011f6c:	d8c01317 	ldw	r3,76(sp)
 4011f70:	d8c00515 	stw	r3,20(sp)
 4011f74:	d9400917 	ldw	r5,36(sp)
 4011f78:	e009883a 	mov	r4,fp
 4011f7c:	40145940 	call	4014594 <_Bfree>
 4011f80:	d9000517 	ldw	r4,20(sp)
 4011f84:	d9802317 	ldw	r6,140(sp)
 4011f88:	d9c02517 	ldw	r7,148(sp)
 4011f8c:	b8000005 	stb	zero,0(r23)
 4011f90:	20800044 	addi	r2,r4,1
 4011f94:	30800015 	stw	r2,0(r6)
 4011f98:	3802aa26 	beq	r7,zero,4012a44 <_dtoa_r+0x1178>
 4011f9c:	3dc00015 	stw	r23,0(r7)
 4011fa0:	d8800717 	ldw	r2,28(sp)
 4011fa4:	003e7906 	br	401198c <__alt_data_end+0xfc01198c>
 4011fa8:	00800434 	movhi	r2,16
 4011fac:	10bfffc4 	addi	r2,r2,-1
 4011fb0:	88a2703a 	and	r17,r17,r2
 4011fb4:	883e851e 	bne	r17,zero,40119cc <__alt_data_end+0xfc0119cc>
 4011fb8:	008100b4 	movhi	r2,1026
 4011fbc:	10bfdc04 	addi	r2,r2,-144
 4011fc0:	003e8406 	br	40119d4 <__alt_data_end+0xfc0119d4>
 4011fc4:	10c00204 	addi	r3,r2,8
 4011fc8:	003e8706 	br	40119e8 <__alt_data_end+0xfc0119e8>
 4011fcc:	01400434 	movhi	r5,16
 4011fd0:	297fffc4 	addi	r5,r5,-1
 4011fd4:	994a703a 	and	r5,r19,r5
 4011fd8:	9009883a 	mov	r4,r18
 4011fdc:	843f0044 	addi	r16,r16,-1023
 4011fe0:	294ffc34 	orhi	r5,r5,16368
 4011fe4:	dd800217 	ldw	r22,8(sp)
 4011fe8:	d8001115 	stw	zero,68(sp)
 4011fec:	003ea506 	br	4011a84 <__alt_data_end+0xfc011a84>
 4011ff0:	008100b4 	movhi	r2,1026
 4011ff4:	10bfcb04 	addi	r2,r2,-212
 4011ff8:	003e6406 	br	401198c <__alt_data_end+0xfc01198c>
 4011ffc:	e0001115 	stw	zero,68(fp)
 4012000:	000b883a 	mov	r5,zero
 4012004:	e009883a 	mov	r4,fp
 4012008:	40144ec0 	call	40144ec <_Balloc>
 401200c:	01bfffc4 	movi	r6,-1
 4012010:	01c00044 	movi	r7,1
 4012014:	d8800715 	stw	r2,28(sp)
 4012018:	d9800c15 	stw	r6,48(sp)
 401201c:	e0801015 	stw	r2,64(fp)
 4012020:	d8000315 	stw	zero,12(sp)
 4012024:	d9c00b15 	stw	r7,44(sp)
 4012028:	d9800615 	stw	r6,24(sp)
 401202c:	d8002215 	stw	zero,136(sp)
 4012030:	d8800117 	ldw	r2,4(sp)
 4012034:	10008916 	blt	r2,zero,401225c <_dtoa_r+0x990>
 4012038:	d9000517 	ldw	r4,20(sp)
 401203c:	00c00384 	movi	r3,14
 4012040:	19008616 	blt	r3,r4,401225c <_dtoa_r+0x990>
 4012044:	200490fa 	slli	r2,r4,3
 4012048:	00c100b4 	movhi	r3,1026
 401204c:	d9802217 	ldw	r6,136(sp)
 4012050:	18fffa04 	addi	r3,r3,-24
 4012054:	1885883a 	add	r2,r3,r2
 4012058:	14000017 	ldw	r16,0(r2)
 401205c:	14400117 	ldw	r17,4(r2)
 4012060:	30016316 	blt	r6,zero,40125f0 <_dtoa_r+0xd24>
 4012064:	800d883a 	mov	r6,r16
 4012068:	880f883a 	mov	r7,r17
 401206c:	9009883a 	mov	r4,r18
 4012070:	980b883a 	mov	r5,r19
 4012074:	401a4480 	call	401a448 <__divdf3>
 4012078:	180b883a 	mov	r5,r3
 401207c:	1009883a 	mov	r4,r2
 4012080:	401bf9c0 	call	401bf9c <__fixdfsi>
 4012084:	1009883a 	mov	r4,r2
 4012088:	102b883a 	mov	r21,r2
 401208c:	401c01c0 	call	401c01c <__floatsidf>
 4012090:	800d883a 	mov	r6,r16
 4012094:	880f883a 	mov	r7,r17
 4012098:	1009883a 	mov	r4,r2
 401209c:	180b883a 	mov	r5,r3
 40120a0:	401af880 	call	401af88 <__muldf3>
 40120a4:	100d883a 	mov	r6,r2
 40120a8:	180f883a 	mov	r7,r3
 40120ac:	9009883a 	mov	r4,r18
 40120b0:	980b883a 	mov	r5,r19
 40120b4:	401b6a00 	call	401b6a0 <__subdf3>
 40120b8:	d9c00717 	ldw	r7,28(sp)
 40120bc:	1009883a 	mov	r4,r2
 40120c0:	a8800c04 	addi	r2,r21,48
 40120c4:	38800005 	stb	r2,0(r7)
 40120c8:	3dc00044 	addi	r23,r7,1
 40120cc:	d9c00617 	ldw	r7,24(sp)
 40120d0:	01800044 	movi	r6,1
 40120d4:	180b883a 	mov	r5,r3
 40120d8:	2005883a 	mov	r2,r4
 40120dc:	39803826 	beq	r7,r6,40121c0 <_dtoa_r+0x8f4>
 40120e0:	000d883a 	mov	r6,zero
 40120e4:	01d00934 	movhi	r7,16420
 40120e8:	401af880 	call	401af88 <__muldf3>
 40120ec:	000d883a 	mov	r6,zero
 40120f0:	000f883a 	mov	r7,zero
 40120f4:	1009883a 	mov	r4,r2
 40120f8:	180b883a 	mov	r5,r3
 40120fc:	1025883a 	mov	r18,r2
 4012100:	1827883a 	mov	r19,r3
 4012104:	401ad300 	call	401ad30 <__eqdf2>
 4012108:	103f9a26 	beq	r2,zero,4011f74 <__alt_data_end+0xfc011f74>
 401210c:	d9c00617 	ldw	r7,24(sp)
 4012110:	d8c00717 	ldw	r3,28(sp)
 4012114:	b829883a 	mov	r20,r23
 4012118:	38bfffc4 	addi	r2,r7,-1
 401211c:	18ad883a 	add	r22,r3,r2
 4012120:	00000a06 	br	401214c <_dtoa_r+0x880>
 4012124:	401af880 	call	401af88 <__muldf3>
 4012128:	000d883a 	mov	r6,zero
 401212c:	000f883a 	mov	r7,zero
 4012130:	1009883a 	mov	r4,r2
 4012134:	180b883a 	mov	r5,r3
 4012138:	1025883a 	mov	r18,r2
 401213c:	1827883a 	mov	r19,r3
 4012140:	b829883a 	mov	r20,r23
 4012144:	401ad300 	call	401ad30 <__eqdf2>
 4012148:	103f8a26 	beq	r2,zero,4011f74 <__alt_data_end+0xfc011f74>
 401214c:	800d883a 	mov	r6,r16
 4012150:	880f883a 	mov	r7,r17
 4012154:	9009883a 	mov	r4,r18
 4012158:	980b883a 	mov	r5,r19
 401215c:	401a4480 	call	401a448 <__divdf3>
 4012160:	180b883a 	mov	r5,r3
 4012164:	1009883a 	mov	r4,r2
 4012168:	401bf9c0 	call	401bf9c <__fixdfsi>
 401216c:	1009883a 	mov	r4,r2
 4012170:	102b883a 	mov	r21,r2
 4012174:	401c01c0 	call	401c01c <__floatsidf>
 4012178:	800d883a 	mov	r6,r16
 401217c:	880f883a 	mov	r7,r17
 4012180:	1009883a 	mov	r4,r2
 4012184:	180b883a 	mov	r5,r3
 4012188:	401af880 	call	401af88 <__muldf3>
 401218c:	100d883a 	mov	r6,r2
 4012190:	180f883a 	mov	r7,r3
 4012194:	9009883a 	mov	r4,r18
 4012198:	980b883a 	mov	r5,r19
 401219c:	401b6a00 	call	401b6a0 <__subdf3>
 40121a0:	aa000c04 	addi	r8,r21,48
 40121a4:	a2000005 	stb	r8,0(r20)
 40121a8:	000d883a 	mov	r6,zero
 40121ac:	01d00934 	movhi	r7,16420
 40121b0:	1009883a 	mov	r4,r2
 40121b4:	180b883a 	mov	r5,r3
 40121b8:	a5c00044 	addi	r23,r20,1
 40121bc:	b53fd91e 	bne	r22,r20,4012124 <__alt_data_end+0xfc012124>
 40121c0:	100d883a 	mov	r6,r2
 40121c4:	180f883a 	mov	r7,r3
 40121c8:	1009883a 	mov	r4,r2
 40121cc:	180b883a 	mov	r5,r3
 40121d0:	4019b9c0 	call	4019b9c <__adddf3>
 40121d4:	100d883a 	mov	r6,r2
 40121d8:	180f883a 	mov	r7,r3
 40121dc:	8009883a 	mov	r4,r16
 40121e0:	880b883a 	mov	r5,r17
 40121e4:	1027883a 	mov	r19,r2
 40121e8:	1825883a 	mov	r18,r3
 40121ec:	401ae940 	call	401ae94 <__ledf2>
 40121f0:	10000816 	blt	r2,zero,4012214 <_dtoa_r+0x948>
 40121f4:	980d883a 	mov	r6,r19
 40121f8:	900f883a 	mov	r7,r18
 40121fc:	8009883a 	mov	r4,r16
 4012200:	880b883a 	mov	r5,r17
 4012204:	401ad300 	call	401ad30 <__eqdf2>
 4012208:	103f5a1e 	bne	r2,zero,4011f74 <__alt_data_end+0xfc011f74>
 401220c:	ad40004c 	andi	r21,r21,1
 4012210:	a83f5826 	beq	r21,zero,4011f74 <__alt_data_end+0xfc011f74>
 4012214:	bd3fffc3 	ldbu	r20,-1(r23)
 4012218:	b8bfffc4 	addi	r2,r23,-1
 401221c:	1007883a 	mov	r3,r2
 4012220:	01400e44 	movi	r5,57
 4012224:	d9800717 	ldw	r6,28(sp)
 4012228:	00000506 	br	4012240 <_dtoa_r+0x974>
 401222c:	18ffffc4 	addi	r3,r3,-1
 4012230:	11824726 	beq	r2,r6,4012b50 <_dtoa_r+0x1284>
 4012234:	1d000003 	ldbu	r20,0(r3)
 4012238:	102f883a 	mov	r23,r2
 401223c:	10bfffc4 	addi	r2,r2,-1
 4012240:	a1003fcc 	andi	r4,r20,255
 4012244:	2100201c 	xori	r4,r4,128
 4012248:	213fe004 	addi	r4,r4,-128
 401224c:	217ff726 	beq	r4,r5,401222c <__alt_data_end+0xfc01222c>
 4012250:	a2000044 	addi	r8,r20,1
 4012254:	12000005 	stb	r8,0(r2)
 4012258:	003f4606 	br	4011f74 <__alt_data_end+0xfc011f74>
 401225c:	d9000b17 	ldw	r4,44(sp)
 4012260:	2000c826 	beq	r4,zero,4012584 <_dtoa_r+0xcb8>
 4012264:	d9800317 	ldw	r6,12(sp)
 4012268:	00c00044 	movi	r3,1
 401226c:	1980f90e 	bge	r3,r6,4012654 <_dtoa_r+0xd88>
 4012270:	d8800617 	ldw	r2,24(sp)
 4012274:	d8c00a17 	ldw	r3,40(sp)
 4012278:	157fffc4 	addi	r21,r2,-1
 401227c:	1d41f316 	blt	r3,r21,4012a4c <_dtoa_r+0x1180>
 4012280:	1d6bc83a 	sub	r21,r3,r21
 4012284:	d9c00617 	ldw	r7,24(sp)
 4012288:	3802aa16 	blt	r7,zero,4012d34 <_dtoa_r+0x1468>
 401228c:	dd000817 	ldw	r20,32(sp)
 4012290:	d8800617 	ldw	r2,24(sp)
 4012294:	d8c00817 	ldw	r3,32(sp)
 4012298:	01400044 	movi	r5,1
 401229c:	e009883a 	mov	r4,fp
 40122a0:	1887883a 	add	r3,r3,r2
 40122a4:	d8c00815 	stw	r3,32(sp)
 40122a8:	b0ad883a 	add	r22,r22,r2
 40122ac:	40148f80 	call	40148f8 <__i2b>
 40122b0:	1023883a 	mov	r17,r2
 40122b4:	a0000826 	beq	r20,zero,40122d8 <_dtoa_r+0xa0c>
 40122b8:	0580070e 	bge	zero,r22,40122d8 <_dtoa_r+0xa0c>
 40122bc:	a005883a 	mov	r2,r20
 40122c0:	b500b916 	blt	r22,r20,40125a8 <_dtoa_r+0xcdc>
 40122c4:	d9000817 	ldw	r4,32(sp)
 40122c8:	a0a9c83a 	sub	r20,r20,r2
 40122cc:	b0adc83a 	sub	r22,r22,r2
 40122d0:	2089c83a 	sub	r4,r4,r2
 40122d4:	d9000815 	stw	r4,32(sp)
 40122d8:	d9800a17 	ldw	r6,40(sp)
 40122dc:	0181810e 	bge	zero,r6,40128e4 <_dtoa_r+0x1018>
 40122e0:	d9c00b17 	ldw	r7,44(sp)
 40122e4:	3800b326 	beq	r7,zero,40125b4 <_dtoa_r+0xce8>
 40122e8:	a800b226 	beq	r21,zero,40125b4 <_dtoa_r+0xce8>
 40122ec:	880b883a 	mov	r5,r17
 40122f0:	a80d883a 	mov	r6,r21
 40122f4:	e009883a 	mov	r4,fp
 40122f8:	4014b2c0 	call	4014b2c <__pow5mult>
 40122fc:	d9800917 	ldw	r6,36(sp)
 4012300:	100b883a 	mov	r5,r2
 4012304:	e009883a 	mov	r4,fp
 4012308:	1023883a 	mov	r17,r2
 401230c:	40149340 	call	4014934 <__multiply>
 4012310:	1021883a 	mov	r16,r2
 4012314:	d8800a17 	ldw	r2,40(sp)
 4012318:	d9400917 	ldw	r5,36(sp)
 401231c:	e009883a 	mov	r4,fp
 4012320:	1545c83a 	sub	r2,r2,r21
 4012324:	d8800a15 	stw	r2,40(sp)
 4012328:	40145940 	call	4014594 <_Bfree>
 401232c:	d8c00a17 	ldw	r3,40(sp)
 4012330:	18009f1e 	bne	r3,zero,40125b0 <_dtoa_r+0xce4>
 4012334:	05c00044 	movi	r23,1
 4012338:	e009883a 	mov	r4,fp
 401233c:	b80b883a 	mov	r5,r23
 4012340:	40148f80 	call	40148f8 <__i2b>
 4012344:	d9000d17 	ldw	r4,52(sp)
 4012348:	102b883a 	mov	r21,r2
 401234c:	2000ce26 	beq	r4,zero,4012688 <_dtoa_r+0xdbc>
 4012350:	200d883a 	mov	r6,r4
 4012354:	100b883a 	mov	r5,r2
 4012358:	e009883a 	mov	r4,fp
 401235c:	4014b2c0 	call	4014b2c <__pow5mult>
 4012360:	d9800317 	ldw	r6,12(sp)
 4012364:	102b883a 	mov	r21,r2
 4012368:	b981810e 	bge	r23,r6,4012970 <_dtoa_r+0x10a4>
 401236c:	0027883a 	mov	r19,zero
 4012370:	a8800417 	ldw	r2,16(r21)
 4012374:	05c00804 	movi	r23,32
 4012378:	10800104 	addi	r2,r2,4
 401237c:	1085883a 	add	r2,r2,r2
 4012380:	1085883a 	add	r2,r2,r2
 4012384:	a885883a 	add	r2,r21,r2
 4012388:	11000017 	ldw	r4,0(r2)
 401238c:	40147e00 	call	40147e0 <__hi0bits>
 4012390:	b885c83a 	sub	r2,r23,r2
 4012394:	1585883a 	add	r2,r2,r22
 4012398:	108007cc 	andi	r2,r2,31
 401239c:	1000b326 	beq	r2,zero,401266c <_dtoa_r+0xda0>
 40123a0:	00c00804 	movi	r3,32
 40123a4:	1887c83a 	sub	r3,r3,r2
 40123a8:	01000104 	movi	r4,4
 40123ac:	20c2cd0e 	bge	r4,r3,4012ee4 <_dtoa_r+0x1618>
 40123b0:	00c00704 	movi	r3,28
 40123b4:	1885c83a 	sub	r2,r3,r2
 40123b8:	d8c00817 	ldw	r3,32(sp)
 40123bc:	a0a9883a 	add	r20,r20,r2
 40123c0:	b0ad883a 	add	r22,r22,r2
 40123c4:	1887883a 	add	r3,r3,r2
 40123c8:	d8c00815 	stw	r3,32(sp)
 40123cc:	d9800817 	ldw	r6,32(sp)
 40123d0:	0180040e 	bge	zero,r6,40123e4 <_dtoa_r+0xb18>
 40123d4:	800b883a 	mov	r5,r16
 40123d8:	e009883a 	mov	r4,fp
 40123dc:	4014c6c0 	call	4014c6c <__lshift>
 40123e0:	1021883a 	mov	r16,r2
 40123e4:	0580050e 	bge	zero,r22,40123fc <_dtoa_r+0xb30>
 40123e8:	a80b883a 	mov	r5,r21
 40123ec:	b00d883a 	mov	r6,r22
 40123f0:	e009883a 	mov	r4,fp
 40123f4:	4014c6c0 	call	4014c6c <__lshift>
 40123f8:	102b883a 	mov	r21,r2
 40123fc:	d9c00e17 	ldw	r7,56(sp)
 4012400:	3801211e 	bne	r7,zero,4012888 <_dtoa_r+0xfbc>
 4012404:	d9800617 	ldw	r6,24(sp)
 4012408:	0181380e 	bge	zero,r6,40128ec <_dtoa_r+0x1020>
 401240c:	d8c00b17 	ldw	r3,44(sp)
 4012410:	1800ab1e 	bne	r3,zero,40126c0 <_dtoa_r+0xdf4>
 4012414:	dc800717 	ldw	r18,28(sp)
 4012418:	dcc00617 	ldw	r19,24(sp)
 401241c:	9029883a 	mov	r20,r18
 4012420:	00000206 	br	401242c <_dtoa_r+0xb60>
 4012424:	40145bc0 	call	40145bc <__multadd>
 4012428:	1021883a 	mov	r16,r2
 401242c:	a80b883a 	mov	r5,r21
 4012430:	8009883a 	mov	r4,r16
 4012434:	40116cc0 	call	40116cc <quorem>
 4012438:	10800c04 	addi	r2,r2,48
 401243c:	90800005 	stb	r2,0(r18)
 4012440:	94800044 	addi	r18,r18,1
 4012444:	9507c83a 	sub	r3,r18,r20
 4012448:	000f883a 	mov	r7,zero
 401244c:	01800284 	movi	r6,10
 4012450:	800b883a 	mov	r5,r16
 4012454:	e009883a 	mov	r4,fp
 4012458:	1cfff216 	blt	r3,r19,4012424 <__alt_data_end+0xfc012424>
 401245c:	1011883a 	mov	r8,r2
 4012460:	d8800617 	ldw	r2,24(sp)
 4012464:	0082370e 	bge	zero,r2,4012d44 <_dtoa_r+0x1478>
 4012468:	d9000717 	ldw	r4,28(sp)
 401246c:	0025883a 	mov	r18,zero
 4012470:	20af883a 	add	r23,r4,r2
 4012474:	01800044 	movi	r6,1
 4012478:	800b883a 	mov	r5,r16
 401247c:	e009883a 	mov	r4,fp
 4012480:	da001715 	stw	r8,92(sp)
 4012484:	4014c6c0 	call	4014c6c <__lshift>
 4012488:	a80b883a 	mov	r5,r21
 401248c:	1009883a 	mov	r4,r2
 4012490:	d8800915 	stw	r2,36(sp)
 4012494:	4014db40 	call	4014db4 <__mcmp>
 4012498:	da001717 	ldw	r8,92(sp)
 401249c:	0081800e 	bge	zero,r2,4012aa0 <_dtoa_r+0x11d4>
 40124a0:	b93fffc3 	ldbu	r4,-1(r23)
 40124a4:	b8bfffc4 	addi	r2,r23,-1
 40124a8:	1007883a 	mov	r3,r2
 40124ac:	01800e44 	movi	r6,57
 40124b0:	d9c00717 	ldw	r7,28(sp)
 40124b4:	00000506 	br	40124cc <_dtoa_r+0xc00>
 40124b8:	18ffffc4 	addi	r3,r3,-1
 40124bc:	11c12326 	beq	r2,r7,401294c <_dtoa_r+0x1080>
 40124c0:	19000003 	ldbu	r4,0(r3)
 40124c4:	102f883a 	mov	r23,r2
 40124c8:	10bfffc4 	addi	r2,r2,-1
 40124cc:	21403fcc 	andi	r5,r4,255
 40124d0:	2940201c 	xori	r5,r5,128
 40124d4:	297fe004 	addi	r5,r5,-128
 40124d8:	29bff726 	beq	r5,r6,40124b8 <__alt_data_end+0xfc0124b8>
 40124dc:	21000044 	addi	r4,r4,1
 40124e0:	11000005 	stb	r4,0(r2)
 40124e4:	a80b883a 	mov	r5,r21
 40124e8:	e009883a 	mov	r4,fp
 40124ec:	40145940 	call	4014594 <_Bfree>
 40124f0:	883ea026 	beq	r17,zero,4011f74 <__alt_data_end+0xfc011f74>
 40124f4:	90000426 	beq	r18,zero,4012508 <_dtoa_r+0xc3c>
 40124f8:	94400326 	beq	r18,r17,4012508 <_dtoa_r+0xc3c>
 40124fc:	900b883a 	mov	r5,r18
 4012500:	e009883a 	mov	r4,fp
 4012504:	40145940 	call	4014594 <_Bfree>
 4012508:	880b883a 	mov	r5,r17
 401250c:	e009883a 	mov	r4,fp
 4012510:	40145940 	call	4014594 <_Bfree>
 4012514:	003e9706 	br	4011f74 <__alt_data_end+0xfc011f74>
 4012518:	01800044 	movi	r6,1
 401251c:	d9800e15 	stw	r6,56(sp)
 4012520:	003d9606 	br	4011b7c <__alt_data_end+0xfc011b7c>
 4012524:	d8800817 	ldw	r2,32(sp)
 4012528:	d8c00517 	ldw	r3,20(sp)
 401252c:	d8000d15 	stw	zero,52(sp)
 4012530:	10c5c83a 	sub	r2,r2,r3
 4012534:	00c9c83a 	sub	r4,zero,r3
 4012538:	d8800815 	stw	r2,32(sp)
 401253c:	d9000a15 	stw	r4,40(sp)
 4012540:	003d9706 	br	4011ba0 <__alt_data_end+0xfc011ba0>
 4012544:	05adc83a 	sub	r22,zero,r22
 4012548:	dd800815 	stw	r22,32(sp)
 401254c:	002d883a 	mov	r22,zero
 4012550:	003d8e06 	br	4011b8c <__alt_data_end+0xfc011b8c>
 4012554:	d9000517 	ldw	r4,20(sp)
 4012558:	401c01c0 	call	401c01c <__floatsidf>
 401255c:	100d883a 	mov	r6,r2
 4012560:	180f883a 	mov	r7,r3
 4012564:	a009883a 	mov	r4,r20
 4012568:	880b883a 	mov	r5,r17
 401256c:	401ad300 	call	401ad30 <__eqdf2>
 4012570:	103d7126 	beq	r2,zero,4011b38 <__alt_data_end+0xfc011b38>
 4012574:	d9c00517 	ldw	r7,20(sp)
 4012578:	39ffffc4 	addi	r7,r7,-1
 401257c:	d9c00515 	stw	r7,20(sp)
 4012580:	003d6d06 	br	4011b38 <__alt_data_end+0xfc011b38>
 4012584:	dd400a17 	ldw	r21,40(sp)
 4012588:	dd000817 	ldw	r20,32(sp)
 401258c:	0023883a 	mov	r17,zero
 4012590:	003f4806 	br	40122b4 <__alt_data_end+0xfc0122b4>
 4012594:	10e3c83a 	sub	r17,r2,r3
 4012598:	9448983a 	sll	r4,r18,r17
 401259c:	003d3206 	br	4011a68 <__alt_data_end+0xfc011a68>
 40125a0:	d8000e15 	stw	zero,56(sp)
 40125a4:	003d7506 	br	4011b7c <__alt_data_end+0xfc011b7c>
 40125a8:	b005883a 	mov	r2,r22
 40125ac:	003f4506 	br	40122c4 <__alt_data_end+0xfc0122c4>
 40125b0:	dc000915 	stw	r16,36(sp)
 40125b4:	d9800a17 	ldw	r6,40(sp)
 40125b8:	d9400917 	ldw	r5,36(sp)
 40125bc:	e009883a 	mov	r4,fp
 40125c0:	4014b2c0 	call	4014b2c <__pow5mult>
 40125c4:	1021883a 	mov	r16,r2
 40125c8:	003f5a06 	br	4012334 <__alt_data_end+0xfc012334>
 40125cc:	01c00044 	movi	r7,1
 40125d0:	d9c00b15 	stw	r7,44(sp)
 40125d4:	d8802217 	ldw	r2,136(sp)
 40125d8:	0081280e 	bge	zero,r2,4012a7c <_dtoa_r+0x11b0>
 40125dc:	100d883a 	mov	r6,r2
 40125e0:	1021883a 	mov	r16,r2
 40125e4:	d8800c15 	stw	r2,48(sp)
 40125e8:	d8800615 	stw	r2,24(sp)
 40125ec:	003d8806 	br	4011c10 <__alt_data_end+0xfc011c10>
 40125f0:	d8800617 	ldw	r2,24(sp)
 40125f4:	00be9b16 	blt	zero,r2,4012064 <__alt_data_end+0xfc012064>
 40125f8:	10010f1e 	bne	r2,zero,4012a38 <_dtoa_r+0x116c>
 40125fc:	880b883a 	mov	r5,r17
 4012600:	000d883a 	mov	r6,zero
 4012604:	01d00534 	movhi	r7,16404
 4012608:	8009883a 	mov	r4,r16
 401260c:	401af880 	call	401af88 <__muldf3>
 4012610:	900d883a 	mov	r6,r18
 4012614:	980f883a 	mov	r7,r19
 4012618:	1009883a 	mov	r4,r2
 401261c:	180b883a 	mov	r5,r3
 4012620:	401adb80 	call	401adb8 <__gedf2>
 4012624:	002b883a 	mov	r21,zero
 4012628:	0023883a 	mov	r17,zero
 401262c:	1000bf16 	blt	r2,zero,401292c <_dtoa_r+0x1060>
 4012630:	d9802217 	ldw	r6,136(sp)
 4012634:	ddc00717 	ldw	r23,28(sp)
 4012638:	018c303a 	nor	r6,zero,r6
 401263c:	d9800515 	stw	r6,20(sp)
 4012640:	a80b883a 	mov	r5,r21
 4012644:	e009883a 	mov	r4,fp
 4012648:	40145940 	call	4014594 <_Bfree>
 401264c:	883e4926 	beq	r17,zero,4011f74 <__alt_data_end+0xfc011f74>
 4012650:	003fad06 	br	4012508 <__alt_data_end+0xfc012508>
 4012654:	d9c01117 	ldw	r7,68(sp)
 4012658:	3801bc26 	beq	r7,zero,4012d4c <_dtoa_r+0x1480>
 401265c:	10810cc4 	addi	r2,r2,1075
 4012660:	dd400a17 	ldw	r21,40(sp)
 4012664:	dd000817 	ldw	r20,32(sp)
 4012668:	003f0a06 	br	4012294 <__alt_data_end+0xfc012294>
 401266c:	00800704 	movi	r2,28
 4012670:	d9000817 	ldw	r4,32(sp)
 4012674:	a0a9883a 	add	r20,r20,r2
 4012678:	b0ad883a 	add	r22,r22,r2
 401267c:	2089883a 	add	r4,r4,r2
 4012680:	d9000815 	stw	r4,32(sp)
 4012684:	003f5106 	br	40123cc <__alt_data_end+0xfc0123cc>
 4012688:	d8c00317 	ldw	r3,12(sp)
 401268c:	b8c1fc0e 	bge	r23,r3,4012e80 <_dtoa_r+0x15b4>
 4012690:	0027883a 	mov	r19,zero
 4012694:	b805883a 	mov	r2,r23
 4012698:	003f3e06 	br	4012394 <__alt_data_end+0xfc012394>
 401269c:	880b883a 	mov	r5,r17
 40126a0:	e009883a 	mov	r4,fp
 40126a4:	000f883a 	mov	r7,zero
 40126a8:	01800284 	movi	r6,10
 40126ac:	40145bc0 	call	40145bc <__multadd>
 40126b0:	d9000c17 	ldw	r4,48(sp)
 40126b4:	1023883a 	mov	r17,r2
 40126b8:	0102040e 	bge	zero,r4,4012ecc <_dtoa_r+0x1600>
 40126bc:	d9000615 	stw	r4,24(sp)
 40126c0:	0500050e 	bge	zero,r20,40126d8 <_dtoa_r+0xe0c>
 40126c4:	880b883a 	mov	r5,r17
 40126c8:	a00d883a 	mov	r6,r20
 40126cc:	e009883a 	mov	r4,fp
 40126d0:	4014c6c0 	call	4014c6c <__lshift>
 40126d4:	1023883a 	mov	r17,r2
 40126d8:	9801241e 	bne	r19,zero,4012b6c <_dtoa_r+0x12a0>
 40126dc:	8829883a 	mov	r20,r17
 40126e0:	d9000617 	ldw	r4,24(sp)
 40126e4:	dcc00717 	ldw	r19,28(sp)
 40126e8:	9480004c 	andi	r18,r18,1
 40126ec:	20bfffc4 	addi	r2,r4,-1
 40126f0:	9885883a 	add	r2,r19,r2
 40126f4:	d8800415 	stw	r2,16(sp)
 40126f8:	dc800615 	stw	r18,24(sp)
 40126fc:	a80b883a 	mov	r5,r21
 4012700:	8009883a 	mov	r4,r16
 4012704:	40116cc0 	call	40116cc <quorem>
 4012708:	880b883a 	mov	r5,r17
 401270c:	8009883a 	mov	r4,r16
 4012710:	102f883a 	mov	r23,r2
 4012714:	4014db40 	call	4014db4 <__mcmp>
 4012718:	a80b883a 	mov	r5,r21
 401271c:	a00d883a 	mov	r6,r20
 4012720:	e009883a 	mov	r4,fp
 4012724:	102d883a 	mov	r22,r2
 4012728:	4014e140 	call	4014e14 <__mdiff>
 401272c:	1007883a 	mov	r3,r2
 4012730:	10800317 	ldw	r2,12(r2)
 4012734:	bc800c04 	addi	r18,r23,48
 4012738:	180b883a 	mov	r5,r3
 401273c:	10004e1e 	bne	r2,zero,4012878 <_dtoa_r+0xfac>
 4012740:	8009883a 	mov	r4,r16
 4012744:	d8c01615 	stw	r3,88(sp)
 4012748:	4014db40 	call	4014db4 <__mcmp>
 401274c:	d8c01617 	ldw	r3,88(sp)
 4012750:	e009883a 	mov	r4,fp
 4012754:	d8801615 	stw	r2,88(sp)
 4012758:	180b883a 	mov	r5,r3
 401275c:	40145940 	call	4014594 <_Bfree>
 4012760:	d8801617 	ldw	r2,88(sp)
 4012764:	1000041e 	bne	r2,zero,4012778 <_dtoa_r+0xeac>
 4012768:	d9800317 	ldw	r6,12(sp)
 401276c:	3000021e 	bne	r6,zero,4012778 <_dtoa_r+0xeac>
 4012770:	d8c00617 	ldw	r3,24(sp)
 4012774:	18003726 	beq	r3,zero,4012854 <_dtoa_r+0xf88>
 4012778:	b0002016 	blt	r22,zero,40127fc <_dtoa_r+0xf30>
 401277c:	b000041e 	bne	r22,zero,4012790 <_dtoa_r+0xec4>
 4012780:	d9000317 	ldw	r4,12(sp)
 4012784:	2000021e 	bne	r4,zero,4012790 <_dtoa_r+0xec4>
 4012788:	d8c00617 	ldw	r3,24(sp)
 401278c:	18001b26 	beq	r3,zero,40127fc <_dtoa_r+0xf30>
 4012790:	00810716 	blt	zero,r2,4012bb0 <_dtoa_r+0x12e4>
 4012794:	d8c00417 	ldw	r3,16(sp)
 4012798:	9d800044 	addi	r22,r19,1
 401279c:	9c800005 	stb	r18,0(r19)
 40127a0:	b02f883a 	mov	r23,r22
 40127a4:	98c10626 	beq	r19,r3,4012bc0 <_dtoa_r+0x12f4>
 40127a8:	800b883a 	mov	r5,r16
 40127ac:	000f883a 	mov	r7,zero
 40127b0:	01800284 	movi	r6,10
 40127b4:	e009883a 	mov	r4,fp
 40127b8:	40145bc0 	call	40145bc <__multadd>
 40127bc:	1021883a 	mov	r16,r2
 40127c0:	000f883a 	mov	r7,zero
 40127c4:	01800284 	movi	r6,10
 40127c8:	880b883a 	mov	r5,r17
 40127cc:	e009883a 	mov	r4,fp
 40127d0:	8d002526 	beq	r17,r20,4012868 <_dtoa_r+0xf9c>
 40127d4:	40145bc0 	call	40145bc <__multadd>
 40127d8:	a00b883a 	mov	r5,r20
 40127dc:	000f883a 	mov	r7,zero
 40127e0:	01800284 	movi	r6,10
 40127e4:	e009883a 	mov	r4,fp
 40127e8:	1023883a 	mov	r17,r2
 40127ec:	40145bc0 	call	40145bc <__multadd>
 40127f0:	1029883a 	mov	r20,r2
 40127f4:	b027883a 	mov	r19,r22
 40127f8:	003fc006 	br	40126fc <__alt_data_end+0xfc0126fc>
 40127fc:	9011883a 	mov	r8,r18
 4012800:	00800e0e 	bge	zero,r2,401283c <_dtoa_r+0xf70>
 4012804:	800b883a 	mov	r5,r16
 4012808:	01800044 	movi	r6,1
 401280c:	e009883a 	mov	r4,fp
 4012810:	da001715 	stw	r8,92(sp)
 4012814:	4014c6c0 	call	4014c6c <__lshift>
 4012818:	a80b883a 	mov	r5,r21
 401281c:	1009883a 	mov	r4,r2
 4012820:	1021883a 	mov	r16,r2
 4012824:	4014db40 	call	4014db4 <__mcmp>
 4012828:	da001717 	ldw	r8,92(sp)
 401282c:	0081960e 	bge	zero,r2,4012e88 <_dtoa_r+0x15bc>
 4012830:	00800e44 	movi	r2,57
 4012834:	40817026 	beq	r8,r2,4012df8 <_dtoa_r+0x152c>
 4012838:	ba000c44 	addi	r8,r23,49
 401283c:	8825883a 	mov	r18,r17
 4012840:	9dc00044 	addi	r23,r19,1
 4012844:	9a000005 	stb	r8,0(r19)
 4012848:	a023883a 	mov	r17,r20
 401284c:	dc000915 	stw	r16,36(sp)
 4012850:	003f2406 	br	40124e4 <__alt_data_end+0xfc0124e4>
 4012854:	00800e44 	movi	r2,57
 4012858:	9011883a 	mov	r8,r18
 401285c:	90816626 	beq	r18,r2,4012df8 <_dtoa_r+0x152c>
 4012860:	05bff516 	blt	zero,r22,4012838 <__alt_data_end+0xfc012838>
 4012864:	003ff506 	br	401283c <__alt_data_end+0xfc01283c>
 4012868:	40145bc0 	call	40145bc <__multadd>
 401286c:	1023883a 	mov	r17,r2
 4012870:	1029883a 	mov	r20,r2
 4012874:	003fdf06 	br	40127f4 <__alt_data_end+0xfc0127f4>
 4012878:	e009883a 	mov	r4,fp
 401287c:	40145940 	call	4014594 <_Bfree>
 4012880:	00800044 	movi	r2,1
 4012884:	003fbc06 	br	4012778 <__alt_data_end+0xfc012778>
 4012888:	a80b883a 	mov	r5,r21
 401288c:	8009883a 	mov	r4,r16
 4012890:	4014db40 	call	4014db4 <__mcmp>
 4012894:	103edb0e 	bge	r2,zero,4012404 <__alt_data_end+0xfc012404>
 4012898:	800b883a 	mov	r5,r16
 401289c:	000f883a 	mov	r7,zero
 40128a0:	01800284 	movi	r6,10
 40128a4:	e009883a 	mov	r4,fp
 40128a8:	40145bc0 	call	40145bc <__multadd>
 40128ac:	1021883a 	mov	r16,r2
 40128b0:	d8800517 	ldw	r2,20(sp)
 40128b4:	d8c00b17 	ldw	r3,44(sp)
 40128b8:	10bfffc4 	addi	r2,r2,-1
 40128bc:	d8800515 	stw	r2,20(sp)
 40128c0:	183f761e 	bne	r3,zero,401269c <__alt_data_end+0xfc01269c>
 40128c4:	d9000c17 	ldw	r4,48(sp)
 40128c8:	0101730e 	bge	zero,r4,4012e98 <_dtoa_r+0x15cc>
 40128cc:	d9000615 	stw	r4,24(sp)
 40128d0:	003ed006 	br	4012414 <__alt_data_end+0xfc012414>
 40128d4:	00800084 	movi	r2,2
 40128d8:	3081861e 	bne	r6,r2,4012ef4 <_dtoa_r+0x1628>
 40128dc:	d8000b15 	stw	zero,44(sp)
 40128e0:	003f3c06 	br	40125d4 <__alt_data_end+0xfc0125d4>
 40128e4:	dc000917 	ldw	r16,36(sp)
 40128e8:	003e9206 	br	4012334 <__alt_data_end+0xfc012334>
 40128ec:	d9c00317 	ldw	r7,12(sp)
 40128f0:	00800084 	movi	r2,2
 40128f4:	11fec50e 	bge	r2,r7,401240c <__alt_data_end+0xfc01240c>
 40128f8:	d9000617 	ldw	r4,24(sp)
 40128fc:	20013c1e 	bne	r4,zero,4012df0 <_dtoa_r+0x1524>
 4012900:	a80b883a 	mov	r5,r21
 4012904:	000f883a 	mov	r7,zero
 4012908:	01800144 	movi	r6,5
 401290c:	e009883a 	mov	r4,fp
 4012910:	40145bc0 	call	40145bc <__multadd>
 4012914:	100b883a 	mov	r5,r2
 4012918:	8009883a 	mov	r4,r16
 401291c:	102b883a 	mov	r21,r2
 4012920:	4014db40 	call	4014db4 <__mcmp>
 4012924:	dc000915 	stw	r16,36(sp)
 4012928:	00bf410e 	bge	zero,r2,4012630 <__alt_data_end+0xfc012630>
 401292c:	d9c00717 	ldw	r7,28(sp)
 4012930:	00800c44 	movi	r2,49
 4012934:	38800005 	stb	r2,0(r7)
 4012938:	d8800517 	ldw	r2,20(sp)
 401293c:	3dc00044 	addi	r23,r7,1
 4012940:	10800044 	addi	r2,r2,1
 4012944:	d8800515 	stw	r2,20(sp)
 4012948:	003f3d06 	br	4012640 <__alt_data_end+0xfc012640>
 401294c:	d9800517 	ldw	r6,20(sp)
 4012950:	d9c00717 	ldw	r7,28(sp)
 4012954:	00800c44 	movi	r2,49
 4012958:	31800044 	addi	r6,r6,1
 401295c:	d9800515 	stw	r6,20(sp)
 4012960:	38800005 	stb	r2,0(r7)
 4012964:	003edf06 	br	40124e4 <__alt_data_end+0xfc0124e4>
 4012968:	d8000b15 	stw	zero,44(sp)
 401296c:	003c9f06 	br	4011bec <__alt_data_end+0xfc011bec>
 4012970:	903e7e1e 	bne	r18,zero,401236c <__alt_data_end+0xfc01236c>
 4012974:	00800434 	movhi	r2,16
 4012978:	10bfffc4 	addi	r2,r2,-1
 401297c:	9884703a 	and	r2,r19,r2
 4012980:	1000ea1e 	bne	r2,zero,4012d2c <_dtoa_r+0x1460>
 4012984:	9cdffc2c 	andhi	r19,r19,32752
 4012988:	9800e826 	beq	r19,zero,4012d2c <_dtoa_r+0x1460>
 401298c:	d9c00817 	ldw	r7,32(sp)
 4012990:	b5800044 	addi	r22,r22,1
 4012994:	04c00044 	movi	r19,1
 4012998:	39c00044 	addi	r7,r7,1
 401299c:	d9c00815 	stw	r7,32(sp)
 40129a0:	d8800d17 	ldw	r2,52(sp)
 40129a4:	103e721e 	bne	r2,zero,4012370 <__alt_data_end+0xfc012370>
 40129a8:	00800044 	movi	r2,1
 40129ac:	003e7906 	br	4012394 <__alt_data_end+0xfc012394>
 40129b0:	8009883a 	mov	r4,r16
 40129b4:	401c01c0 	call	401c01c <__floatsidf>
 40129b8:	d9800f17 	ldw	r6,60(sp)
 40129bc:	d9c01017 	ldw	r7,64(sp)
 40129c0:	1009883a 	mov	r4,r2
 40129c4:	180b883a 	mov	r5,r3
 40129c8:	401af880 	call	401af88 <__muldf3>
 40129cc:	000d883a 	mov	r6,zero
 40129d0:	01d00734 	movhi	r7,16412
 40129d4:	1009883a 	mov	r4,r2
 40129d8:	180b883a 	mov	r5,r3
 40129dc:	4019b9c0 	call	4019b9c <__adddf3>
 40129e0:	047f3034 	movhi	r17,64704
 40129e4:	1021883a 	mov	r16,r2
 40129e8:	1c63883a 	add	r17,r3,r17
 40129ec:	d9000f17 	ldw	r4,60(sp)
 40129f0:	d9401017 	ldw	r5,64(sp)
 40129f4:	000d883a 	mov	r6,zero
 40129f8:	01d00534 	movhi	r7,16404
 40129fc:	401b6a00 	call	401b6a0 <__subdf3>
 4012a00:	800d883a 	mov	r6,r16
 4012a04:	880f883a 	mov	r7,r17
 4012a08:	1009883a 	mov	r4,r2
 4012a0c:	180b883a 	mov	r5,r3
 4012a10:	102b883a 	mov	r21,r2
 4012a14:	1829883a 	mov	r20,r3
 4012a18:	401adb80 	call	401adb8 <__gedf2>
 4012a1c:	00806c16 	blt	zero,r2,4012bd0 <_dtoa_r+0x1304>
 4012a20:	89e0003c 	xorhi	r7,r17,32768
 4012a24:	800d883a 	mov	r6,r16
 4012a28:	a809883a 	mov	r4,r21
 4012a2c:	a00b883a 	mov	r5,r20
 4012a30:	401ae940 	call	401ae94 <__ledf2>
 4012a34:	103d7e0e 	bge	r2,zero,4012030 <__alt_data_end+0xfc012030>
 4012a38:	002b883a 	mov	r21,zero
 4012a3c:	0023883a 	mov	r17,zero
 4012a40:	003efb06 	br	4012630 <__alt_data_end+0xfc012630>
 4012a44:	d8800717 	ldw	r2,28(sp)
 4012a48:	003bd006 	br	401198c <__alt_data_end+0xfc01198c>
 4012a4c:	d9000a17 	ldw	r4,40(sp)
 4012a50:	d9800d17 	ldw	r6,52(sp)
 4012a54:	dd400a15 	stw	r21,40(sp)
 4012a58:	a905c83a 	sub	r2,r21,r4
 4012a5c:	308d883a 	add	r6,r6,r2
 4012a60:	d9800d15 	stw	r6,52(sp)
 4012a64:	002b883a 	mov	r21,zero
 4012a68:	003e0606 	br	4012284 <__alt_data_end+0xfc012284>
 4012a6c:	9023883a 	mov	r17,r18
 4012a70:	9829883a 	mov	r20,r19
 4012a74:	04000084 	movi	r16,2
 4012a78:	003c9206 	br	4011cc4 <__alt_data_end+0xfc011cc4>
 4012a7c:	04000044 	movi	r16,1
 4012a80:	dc000c15 	stw	r16,48(sp)
 4012a84:	dc000615 	stw	r16,24(sp)
 4012a88:	dc002215 	stw	r16,136(sp)
 4012a8c:	e0001115 	stw	zero,68(fp)
 4012a90:	000b883a 	mov	r5,zero
 4012a94:	003c6906 	br	4011c3c <__alt_data_end+0xfc011c3c>
 4012a98:	3021883a 	mov	r16,r6
 4012a9c:	003ffb06 	br	4012a8c <__alt_data_end+0xfc012a8c>
 4012aa0:	1000021e 	bne	r2,zero,4012aac <_dtoa_r+0x11e0>
 4012aa4:	4200004c 	andi	r8,r8,1
 4012aa8:	403e7d1e 	bne	r8,zero,40124a0 <__alt_data_end+0xfc0124a0>
 4012aac:	01000c04 	movi	r4,48
 4012ab0:	00000106 	br	4012ab8 <_dtoa_r+0x11ec>
 4012ab4:	102f883a 	mov	r23,r2
 4012ab8:	b8bfffc4 	addi	r2,r23,-1
 4012abc:	10c00007 	ldb	r3,0(r2)
 4012ac0:	193ffc26 	beq	r3,r4,4012ab4 <__alt_data_end+0xfc012ab4>
 4012ac4:	003e8706 	br	40124e4 <__alt_data_end+0xfc0124e4>
 4012ac8:	d8800517 	ldw	r2,20(sp)
 4012acc:	00a3c83a 	sub	r17,zero,r2
 4012ad0:	8800a426 	beq	r17,zero,4012d64 <_dtoa_r+0x1498>
 4012ad4:	888003cc 	andi	r2,r17,15
 4012ad8:	100490fa 	slli	r2,r2,3
 4012adc:	00c100b4 	movhi	r3,1026
 4012ae0:	18fffa04 	addi	r3,r3,-24
 4012ae4:	1885883a 	add	r2,r3,r2
 4012ae8:	11800017 	ldw	r6,0(r2)
 4012aec:	11c00117 	ldw	r7,4(r2)
 4012af0:	9009883a 	mov	r4,r18
 4012af4:	980b883a 	mov	r5,r19
 4012af8:	8823d13a 	srai	r17,r17,4
 4012afc:	401af880 	call	401af88 <__muldf3>
 4012b00:	d8800f15 	stw	r2,60(sp)
 4012b04:	d8c01015 	stw	r3,64(sp)
 4012b08:	8800e826 	beq	r17,zero,4012eac <_dtoa_r+0x15e0>
 4012b0c:	050100b4 	movhi	r20,1026
 4012b10:	a53ff004 	addi	r20,r20,-64
 4012b14:	04000084 	movi	r16,2
 4012b18:	8980004c 	andi	r6,r17,1
 4012b1c:	1009883a 	mov	r4,r2
 4012b20:	8823d07a 	srai	r17,r17,1
 4012b24:	180b883a 	mov	r5,r3
 4012b28:	30000426 	beq	r6,zero,4012b3c <_dtoa_r+0x1270>
 4012b2c:	a1800017 	ldw	r6,0(r20)
 4012b30:	a1c00117 	ldw	r7,4(r20)
 4012b34:	84000044 	addi	r16,r16,1
 4012b38:	401af880 	call	401af88 <__muldf3>
 4012b3c:	a5000204 	addi	r20,r20,8
 4012b40:	883ff51e 	bne	r17,zero,4012b18 <__alt_data_end+0xfc012b18>
 4012b44:	d8800f15 	stw	r2,60(sp)
 4012b48:	d8c01015 	stw	r3,64(sp)
 4012b4c:	003c7606 	br	4011d28 <__alt_data_end+0xfc011d28>
 4012b50:	00c00c04 	movi	r3,48
 4012b54:	10c00005 	stb	r3,0(r2)
 4012b58:	d8c00517 	ldw	r3,20(sp)
 4012b5c:	bd3fffc3 	ldbu	r20,-1(r23)
 4012b60:	18c00044 	addi	r3,r3,1
 4012b64:	d8c00515 	stw	r3,20(sp)
 4012b68:	003db906 	br	4012250 <__alt_data_end+0xfc012250>
 4012b6c:	89400117 	ldw	r5,4(r17)
 4012b70:	e009883a 	mov	r4,fp
 4012b74:	40144ec0 	call	40144ec <_Balloc>
 4012b78:	89800417 	ldw	r6,16(r17)
 4012b7c:	89400304 	addi	r5,r17,12
 4012b80:	11000304 	addi	r4,r2,12
 4012b84:	31800084 	addi	r6,r6,2
 4012b88:	318d883a 	add	r6,r6,r6
 4012b8c:	318d883a 	add	r6,r6,r6
 4012b90:	1027883a 	mov	r19,r2
 4012b94:	400c7680 	call	400c768 <memcpy>
 4012b98:	01800044 	movi	r6,1
 4012b9c:	980b883a 	mov	r5,r19
 4012ba0:	e009883a 	mov	r4,fp
 4012ba4:	4014c6c0 	call	4014c6c <__lshift>
 4012ba8:	1029883a 	mov	r20,r2
 4012bac:	003ecc06 	br	40126e0 <__alt_data_end+0xfc0126e0>
 4012bb0:	00800e44 	movi	r2,57
 4012bb4:	90809026 	beq	r18,r2,4012df8 <_dtoa_r+0x152c>
 4012bb8:	92000044 	addi	r8,r18,1
 4012bbc:	003f1f06 	br	401283c <__alt_data_end+0xfc01283c>
 4012bc0:	9011883a 	mov	r8,r18
 4012bc4:	8825883a 	mov	r18,r17
 4012bc8:	a023883a 	mov	r17,r20
 4012bcc:	003e2906 	br	4012474 <__alt_data_end+0xfc012474>
 4012bd0:	002b883a 	mov	r21,zero
 4012bd4:	0023883a 	mov	r17,zero
 4012bd8:	003f5406 	br	401292c <__alt_data_end+0xfc01292c>
 4012bdc:	61bfffc4 	addi	r6,r12,-1
 4012be0:	300490fa 	slli	r2,r6,3
 4012be4:	00c100b4 	movhi	r3,1026
 4012be8:	18fffa04 	addi	r3,r3,-24
 4012bec:	1885883a 	add	r2,r3,r2
 4012bf0:	11000017 	ldw	r4,0(r2)
 4012bf4:	11400117 	ldw	r5,4(r2)
 4012bf8:	d8800717 	ldw	r2,28(sp)
 4012bfc:	880f883a 	mov	r7,r17
 4012c00:	d9801215 	stw	r6,72(sp)
 4012c04:	800d883a 	mov	r6,r16
 4012c08:	db001615 	stw	r12,88(sp)
 4012c0c:	15c00044 	addi	r23,r2,1
 4012c10:	401af880 	call	401af88 <__muldf3>
 4012c14:	d9401017 	ldw	r5,64(sp)
 4012c18:	d9000f17 	ldw	r4,60(sp)
 4012c1c:	d8c01515 	stw	r3,84(sp)
 4012c20:	d8801415 	stw	r2,80(sp)
 4012c24:	401bf9c0 	call	401bf9c <__fixdfsi>
 4012c28:	1009883a 	mov	r4,r2
 4012c2c:	1021883a 	mov	r16,r2
 4012c30:	401c01c0 	call	401c01c <__floatsidf>
 4012c34:	d9000f17 	ldw	r4,60(sp)
 4012c38:	d9401017 	ldw	r5,64(sp)
 4012c3c:	100d883a 	mov	r6,r2
 4012c40:	180f883a 	mov	r7,r3
 4012c44:	401b6a00 	call	401b6a0 <__subdf3>
 4012c48:	1829883a 	mov	r20,r3
 4012c4c:	d8c00717 	ldw	r3,28(sp)
 4012c50:	84000c04 	addi	r16,r16,48
 4012c54:	1023883a 	mov	r17,r2
 4012c58:	1c000005 	stb	r16,0(r3)
 4012c5c:	db001617 	ldw	r12,88(sp)
 4012c60:	00800044 	movi	r2,1
 4012c64:	60802226 	beq	r12,r2,4012cf0 <_dtoa_r+0x1424>
 4012c68:	d9c00717 	ldw	r7,28(sp)
 4012c6c:	8805883a 	mov	r2,r17
 4012c70:	b82b883a 	mov	r21,r23
 4012c74:	3b19883a 	add	r12,r7,r12
 4012c78:	6023883a 	mov	r17,r12
 4012c7c:	a007883a 	mov	r3,r20
 4012c80:	dc800f15 	stw	r18,60(sp)
 4012c84:	000d883a 	mov	r6,zero
 4012c88:	01d00934 	movhi	r7,16420
 4012c8c:	1009883a 	mov	r4,r2
 4012c90:	180b883a 	mov	r5,r3
 4012c94:	401af880 	call	401af88 <__muldf3>
 4012c98:	180b883a 	mov	r5,r3
 4012c9c:	1009883a 	mov	r4,r2
 4012ca0:	1829883a 	mov	r20,r3
 4012ca4:	1025883a 	mov	r18,r2
 4012ca8:	401bf9c0 	call	401bf9c <__fixdfsi>
 4012cac:	1009883a 	mov	r4,r2
 4012cb0:	1021883a 	mov	r16,r2
 4012cb4:	401c01c0 	call	401c01c <__floatsidf>
 4012cb8:	100d883a 	mov	r6,r2
 4012cbc:	180f883a 	mov	r7,r3
 4012cc0:	9009883a 	mov	r4,r18
 4012cc4:	a00b883a 	mov	r5,r20
 4012cc8:	84000c04 	addi	r16,r16,48
 4012ccc:	401b6a00 	call	401b6a0 <__subdf3>
 4012cd0:	ad400044 	addi	r21,r21,1
 4012cd4:	ac3fffc5 	stb	r16,-1(r21)
 4012cd8:	ac7fea1e 	bne	r21,r17,4012c84 <__alt_data_end+0xfc012c84>
 4012cdc:	1023883a 	mov	r17,r2
 4012ce0:	d8801217 	ldw	r2,72(sp)
 4012ce4:	dc800f17 	ldw	r18,60(sp)
 4012ce8:	1829883a 	mov	r20,r3
 4012cec:	b8af883a 	add	r23,r23,r2
 4012cf0:	d9001417 	ldw	r4,80(sp)
 4012cf4:	d9401517 	ldw	r5,84(sp)
 4012cf8:	000d883a 	mov	r6,zero
 4012cfc:	01cff834 	movhi	r7,16352
 4012d00:	4019b9c0 	call	4019b9c <__adddf3>
 4012d04:	880d883a 	mov	r6,r17
 4012d08:	a00f883a 	mov	r7,r20
 4012d0c:	1009883a 	mov	r4,r2
 4012d10:	180b883a 	mov	r5,r3
 4012d14:	401ae940 	call	401ae94 <__ledf2>
 4012d18:	10003e0e 	bge	r2,zero,4012e14 <_dtoa_r+0x1548>
 4012d1c:	d9001317 	ldw	r4,76(sp)
 4012d20:	bd3fffc3 	ldbu	r20,-1(r23)
 4012d24:	d9000515 	stw	r4,20(sp)
 4012d28:	003d3b06 	br	4012218 <__alt_data_end+0xfc012218>
 4012d2c:	0027883a 	mov	r19,zero
 4012d30:	003f1b06 	br	40129a0 <__alt_data_end+0xfc0129a0>
 4012d34:	d8800817 	ldw	r2,32(sp)
 4012d38:	11e9c83a 	sub	r20,r2,r7
 4012d3c:	0005883a 	mov	r2,zero
 4012d40:	003d5406 	br	4012294 <__alt_data_end+0xfc012294>
 4012d44:	00800044 	movi	r2,1
 4012d48:	003dc706 	br	4012468 <__alt_data_end+0xfc012468>
 4012d4c:	d8c00217 	ldw	r3,8(sp)
 4012d50:	00800d84 	movi	r2,54
 4012d54:	dd400a17 	ldw	r21,40(sp)
 4012d58:	10c5c83a 	sub	r2,r2,r3
 4012d5c:	dd000817 	ldw	r20,32(sp)
 4012d60:	003d4c06 	br	4012294 <__alt_data_end+0xfc012294>
 4012d64:	dc800f15 	stw	r18,60(sp)
 4012d68:	dcc01015 	stw	r19,64(sp)
 4012d6c:	04000084 	movi	r16,2
 4012d70:	003bed06 	br	4011d28 <__alt_data_end+0xfc011d28>
 4012d74:	d9000617 	ldw	r4,24(sp)
 4012d78:	203f0d26 	beq	r4,zero,40129b0 <__alt_data_end+0xfc0129b0>
 4012d7c:	d9800c17 	ldw	r6,48(sp)
 4012d80:	01bcab0e 	bge	zero,r6,4012030 <__alt_data_end+0xfc012030>
 4012d84:	d9401017 	ldw	r5,64(sp)
 4012d88:	d9000f17 	ldw	r4,60(sp)
 4012d8c:	000d883a 	mov	r6,zero
 4012d90:	01d00934 	movhi	r7,16420
 4012d94:	401af880 	call	401af88 <__muldf3>
 4012d98:	81000044 	addi	r4,r16,1
 4012d9c:	d8800f15 	stw	r2,60(sp)
 4012da0:	d8c01015 	stw	r3,64(sp)
 4012da4:	401c01c0 	call	401c01c <__floatsidf>
 4012da8:	d9800f17 	ldw	r6,60(sp)
 4012dac:	d9c01017 	ldw	r7,64(sp)
 4012db0:	1009883a 	mov	r4,r2
 4012db4:	180b883a 	mov	r5,r3
 4012db8:	401af880 	call	401af88 <__muldf3>
 4012dbc:	01d00734 	movhi	r7,16412
 4012dc0:	000d883a 	mov	r6,zero
 4012dc4:	1009883a 	mov	r4,r2
 4012dc8:	180b883a 	mov	r5,r3
 4012dcc:	4019b9c0 	call	4019b9c <__adddf3>
 4012dd0:	d9c00517 	ldw	r7,20(sp)
 4012dd4:	047f3034 	movhi	r17,64704
 4012dd8:	1021883a 	mov	r16,r2
 4012ddc:	39ffffc4 	addi	r7,r7,-1
 4012de0:	d9c01315 	stw	r7,76(sp)
 4012de4:	1c63883a 	add	r17,r3,r17
 4012de8:	db000c17 	ldw	r12,48(sp)
 4012dec:	003bea06 	br	4011d98 <__alt_data_end+0xfc011d98>
 4012df0:	dc000915 	stw	r16,36(sp)
 4012df4:	003e0e06 	br	4012630 <__alt_data_end+0xfc012630>
 4012df8:	01000e44 	movi	r4,57
 4012dfc:	8825883a 	mov	r18,r17
 4012e00:	9dc00044 	addi	r23,r19,1
 4012e04:	99000005 	stb	r4,0(r19)
 4012e08:	a023883a 	mov	r17,r20
 4012e0c:	dc000915 	stw	r16,36(sp)
 4012e10:	003da406 	br	40124a4 <__alt_data_end+0xfc0124a4>
 4012e14:	d9801417 	ldw	r6,80(sp)
 4012e18:	d9c01517 	ldw	r7,84(sp)
 4012e1c:	0009883a 	mov	r4,zero
 4012e20:	014ff834 	movhi	r5,16352
 4012e24:	401b6a00 	call	401b6a0 <__subdf3>
 4012e28:	880d883a 	mov	r6,r17
 4012e2c:	a00f883a 	mov	r7,r20
 4012e30:	1009883a 	mov	r4,r2
 4012e34:	180b883a 	mov	r5,r3
 4012e38:	401adb80 	call	401adb8 <__gedf2>
 4012e3c:	00bc7c0e 	bge	zero,r2,4012030 <__alt_data_end+0xfc012030>
 4012e40:	01000c04 	movi	r4,48
 4012e44:	00000106 	br	4012e4c <_dtoa_r+0x1580>
 4012e48:	102f883a 	mov	r23,r2
 4012e4c:	b8bfffc4 	addi	r2,r23,-1
 4012e50:	10c00007 	ldb	r3,0(r2)
 4012e54:	193ffc26 	beq	r3,r4,4012e48 <__alt_data_end+0xfc012e48>
 4012e58:	d9801317 	ldw	r6,76(sp)
 4012e5c:	d9800515 	stw	r6,20(sp)
 4012e60:	003c4406 	br	4011f74 <__alt_data_end+0xfc011f74>
 4012e64:	d9801317 	ldw	r6,76(sp)
 4012e68:	d9800515 	stw	r6,20(sp)
 4012e6c:	003cea06 	br	4012218 <__alt_data_end+0xfc012218>
 4012e70:	dd800f17 	ldw	r22,60(sp)
 4012e74:	dcc01017 	ldw	r19,64(sp)
 4012e78:	dc801217 	ldw	r18,72(sp)
 4012e7c:	003c6c06 	br	4012030 <__alt_data_end+0xfc012030>
 4012e80:	903e031e 	bne	r18,zero,4012690 <__alt_data_end+0xfc012690>
 4012e84:	003ebb06 	br	4012974 <__alt_data_end+0xfc012974>
 4012e88:	103e6c1e 	bne	r2,zero,401283c <__alt_data_end+0xfc01283c>
 4012e8c:	4080004c 	andi	r2,r8,1
 4012e90:	103e6a26 	beq	r2,zero,401283c <__alt_data_end+0xfc01283c>
 4012e94:	003e6606 	br	4012830 <__alt_data_end+0xfc012830>
 4012e98:	d8c00317 	ldw	r3,12(sp)
 4012e9c:	00800084 	movi	r2,2
 4012ea0:	10c02916 	blt	r2,r3,4012f48 <_dtoa_r+0x167c>
 4012ea4:	d9000c17 	ldw	r4,48(sp)
 4012ea8:	003e8806 	br	40128cc <__alt_data_end+0xfc0128cc>
 4012eac:	04000084 	movi	r16,2
 4012eb0:	003b9d06 	br	4011d28 <__alt_data_end+0xfc011d28>
 4012eb4:	d9001317 	ldw	r4,76(sp)
 4012eb8:	d9000515 	stw	r4,20(sp)
 4012ebc:	003cd606 	br	4012218 <__alt_data_end+0xfc012218>
 4012ec0:	d8801317 	ldw	r2,76(sp)
 4012ec4:	d8800515 	stw	r2,20(sp)
 4012ec8:	003c2a06 	br	4011f74 <__alt_data_end+0xfc011f74>
 4012ecc:	d9800317 	ldw	r6,12(sp)
 4012ed0:	00800084 	movi	r2,2
 4012ed4:	11801516 	blt	r2,r6,4012f2c <_dtoa_r+0x1660>
 4012ed8:	d9c00c17 	ldw	r7,48(sp)
 4012edc:	d9c00615 	stw	r7,24(sp)
 4012ee0:	003df706 	br	40126c0 <__alt_data_end+0xfc0126c0>
 4012ee4:	193d3926 	beq	r3,r4,40123cc <__alt_data_end+0xfc0123cc>
 4012ee8:	00c00f04 	movi	r3,60
 4012eec:	1885c83a 	sub	r2,r3,r2
 4012ef0:	003ddf06 	br	4012670 <__alt_data_end+0xfc012670>
 4012ef4:	e009883a 	mov	r4,fp
 4012ef8:	e0001115 	stw	zero,68(fp)
 4012efc:	000b883a 	mov	r5,zero
 4012f00:	40144ec0 	call	40144ec <_Balloc>
 4012f04:	d8800715 	stw	r2,28(sp)
 4012f08:	d8c00717 	ldw	r3,28(sp)
 4012f0c:	00bfffc4 	movi	r2,-1
 4012f10:	01000044 	movi	r4,1
 4012f14:	d8800c15 	stw	r2,48(sp)
 4012f18:	e0c01015 	stw	r3,64(fp)
 4012f1c:	d9000b15 	stw	r4,44(sp)
 4012f20:	d8800615 	stw	r2,24(sp)
 4012f24:	d8002215 	stw	zero,136(sp)
 4012f28:	003c4106 	br	4012030 <__alt_data_end+0xfc012030>
 4012f2c:	d8c00c17 	ldw	r3,48(sp)
 4012f30:	d8c00615 	stw	r3,24(sp)
 4012f34:	003e7006 	br	40128f8 <__alt_data_end+0xfc0128f8>
 4012f38:	04400044 	movi	r17,1
 4012f3c:	003b2006 	br	4011bc0 <__alt_data_end+0xfc011bc0>
 4012f40:	000b883a 	mov	r5,zero
 4012f44:	003b3d06 	br	4011c3c <__alt_data_end+0xfc011c3c>
 4012f48:	d8800c17 	ldw	r2,48(sp)
 4012f4c:	d8800615 	stw	r2,24(sp)
 4012f50:	003e6906 	br	40128f8 <__alt_data_end+0xfc0128f8>

04012f54 <__sflush_r>:
 4012f54:	2880030b 	ldhu	r2,12(r5)
 4012f58:	defffb04 	addi	sp,sp,-20
 4012f5c:	dcc00315 	stw	r19,12(sp)
 4012f60:	dc400115 	stw	r17,4(sp)
 4012f64:	dfc00415 	stw	ra,16(sp)
 4012f68:	dc800215 	stw	r18,8(sp)
 4012f6c:	dc000015 	stw	r16,0(sp)
 4012f70:	10c0020c 	andi	r3,r2,8
 4012f74:	2823883a 	mov	r17,r5
 4012f78:	2027883a 	mov	r19,r4
 4012f7c:	1800311e 	bne	r3,zero,4013044 <__sflush_r+0xf0>
 4012f80:	28c00117 	ldw	r3,4(r5)
 4012f84:	10820014 	ori	r2,r2,2048
 4012f88:	2880030d 	sth	r2,12(r5)
 4012f8c:	00c04b0e 	bge	zero,r3,40130bc <__sflush_r+0x168>
 4012f90:	8a000a17 	ldw	r8,40(r17)
 4012f94:	40002326 	beq	r8,zero,4013024 <__sflush_r+0xd0>
 4012f98:	9c000017 	ldw	r16,0(r19)
 4012f9c:	10c4000c 	andi	r3,r2,4096
 4012fa0:	98000015 	stw	zero,0(r19)
 4012fa4:	18004826 	beq	r3,zero,40130c8 <__sflush_r+0x174>
 4012fa8:	89801417 	ldw	r6,80(r17)
 4012fac:	10c0010c 	andi	r3,r2,4
 4012fb0:	18000626 	beq	r3,zero,4012fcc <__sflush_r+0x78>
 4012fb4:	88c00117 	ldw	r3,4(r17)
 4012fb8:	88800c17 	ldw	r2,48(r17)
 4012fbc:	30cdc83a 	sub	r6,r6,r3
 4012fc0:	10000226 	beq	r2,zero,4012fcc <__sflush_r+0x78>
 4012fc4:	88800f17 	ldw	r2,60(r17)
 4012fc8:	308dc83a 	sub	r6,r6,r2
 4012fcc:	89400717 	ldw	r5,28(r17)
 4012fd0:	000f883a 	mov	r7,zero
 4012fd4:	9809883a 	mov	r4,r19
 4012fd8:	403ee83a 	callr	r8
 4012fdc:	00ffffc4 	movi	r3,-1
 4012fe0:	10c04426 	beq	r2,r3,40130f4 <__sflush_r+0x1a0>
 4012fe4:	88c0030b 	ldhu	r3,12(r17)
 4012fe8:	89000417 	ldw	r4,16(r17)
 4012fec:	88000115 	stw	zero,4(r17)
 4012ff0:	197dffcc 	andi	r5,r3,63487
 4012ff4:	8940030d 	sth	r5,12(r17)
 4012ff8:	89000015 	stw	r4,0(r17)
 4012ffc:	18c4000c 	andi	r3,r3,4096
 4013000:	18002c1e 	bne	r3,zero,40130b4 <__sflush_r+0x160>
 4013004:	89400c17 	ldw	r5,48(r17)
 4013008:	9c000015 	stw	r16,0(r19)
 401300c:	28000526 	beq	r5,zero,4013024 <__sflush_r+0xd0>
 4013010:	88801004 	addi	r2,r17,64
 4013014:	28800226 	beq	r5,r2,4013020 <__sflush_r+0xcc>
 4013018:	9809883a 	mov	r4,r19
 401301c:	40136c00 	call	40136c0 <_free_r>
 4013020:	88000c15 	stw	zero,48(r17)
 4013024:	0005883a 	mov	r2,zero
 4013028:	dfc00417 	ldw	ra,16(sp)
 401302c:	dcc00317 	ldw	r19,12(sp)
 4013030:	dc800217 	ldw	r18,8(sp)
 4013034:	dc400117 	ldw	r17,4(sp)
 4013038:	dc000017 	ldw	r16,0(sp)
 401303c:	dec00504 	addi	sp,sp,20
 4013040:	f800283a 	ret
 4013044:	2c800417 	ldw	r18,16(r5)
 4013048:	903ff626 	beq	r18,zero,4013024 <__alt_data_end+0xfc013024>
 401304c:	2c000017 	ldw	r16,0(r5)
 4013050:	108000cc 	andi	r2,r2,3
 4013054:	2c800015 	stw	r18,0(r5)
 4013058:	84a1c83a 	sub	r16,r16,r18
 401305c:	1000131e 	bne	r2,zero,40130ac <__sflush_r+0x158>
 4013060:	28800517 	ldw	r2,20(r5)
 4013064:	88800215 	stw	r2,8(r17)
 4013068:	04000316 	blt	zero,r16,4013078 <__sflush_r+0x124>
 401306c:	003fed06 	br	4013024 <__alt_data_end+0xfc013024>
 4013070:	90a5883a 	add	r18,r18,r2
 4013074:	043feb0e 	bge	zero,r16,4013024 <__alt_data_end+0xfc013024>
 4013078:	88800917 	ldw	r2,36(r17)
 401307c:	89400717 	ldw	r5,28(r17)
 4013080:	800f883a 	mov	r7,r16
 4013084:	900d883a 	mov	r6,r18
 4013088:	9809883a 	mov	r4,r19
 401308c:	103ee83a 	callr	r2
 4013090:	80a1c83a 	sub	r16,r16,r2
 4013094:	00bff616 	blt	zero,r2,4013070 <__alt_data_end+0xfc013070>
 4013098:	88c0030b 	ldhu	r3,12(r17)
 401309c:	00bfffc4 	movi	r2,-1
 40130a0:	18c01014 	ori	r3,r3,64
 40130a4:	88c0030d 	sth	r3,12(r17)
 40130a8:	003fdf06 	br	4013028 <__alt_data_end+0xfc013028>
 40130ac:	0005883a 	mov	r2,zero
 40130b0:	003fec06 	br	4013064 <__alt_data_end+0xfc013064>
 40130b4:	88801415 	stw	r2,80(r17)
 40130b8:	003fd206 	br	4013004 <__alt_data_end+0xfc013004>
 40130bc:	28c00f17 	ldw	r3,60(r5)
 40130c0:	00ffb316 	blt	zero,r3,4012f90 <__alt_data_end+0xfc012f90>
 40130c4:	003fd706 	br	4013024 <__alt_data_end+0xfc013024>
 40130c8:	89400717 	ldw	r5,28(r17)
 40130cc:	000d883a 	mov	r6,zero
 40130d0:	01c00044 	movi	r7,1
 40130d4:	9809883a 	mov	r4,r19
 40130d8:	403ee83a 	callr	r8
 40130dc:	100d883a 	mov	r6,r2
 40130e0:	00bfffc4 	movi	r2,-1
 40130e4:	30801426 	beq	r6,r2,4013138 <__sflush_r+0x1e4>
 40130e8:	8880030b 	ldhu	r2,12(r17)
 40130ec:	8a000a17 	ldw	r8,40(r17)
 40130f0:	003fae06 	br	4012fac <__alt_data_end+0xfc012fac>
 40130f4:	98c00017 	ldw	r3,0(r19)
 40130f8:	183fba26 	beq	r3,zero,4012fe4 <__alt_data_end+0xfc012fe4>
 40130fc:	01000744 	movi	r4,29
 4013100:	19000626 	beq	r3,r4,401311c <__sflush_r+0x1c8>
 4013104:	01000584 	movi	r4,22
 4013108:	19000426 	beq	r3,r4,401311c <__sflush_r+0x1c8>
 401310c:	88c0030b 	ldhu	r3,12(r17)
 4013110:	18c01014 	ori	r3,r3,64
 4013114:	88c0030d 	sth	r3,12(r17)
 4013118:	003fc306 	br	4013028 <__alt_data_end+0xfc013028>
 401311c:	8880030b 	ldhu	r2,12(r17)
 4013120:	88c00417 	ldw	r3,16(r17)
 4013124:	88000115 	stw	zero,4(r17)
 4013128:	10bdffcc 	andi	r2,r2,63487
 401312c:	8880030d 	sth	r2,12(r17)
 4013130:	88c00015 	stw	r3,0(r17)
 4013134:	003fb306 	br	4013004 <__alt_data_end+0xfc013004>
 4013138:	98800017 	ldw	r2,0(r19)
 401313c:	103fea26 	beq	r2,zero,40130e8 <__alt_data_end+0xfc0130e8>
 4013140:	00c00744 	movi	r3,29
 4013144:	10c00226 	beq	r2,r3,4013150 <__sflush_r+0x1fc>
 4013148:	00c00584 	movi	r3,22
 401314c:	10c0031e 	bne	r2,r3,401315c <__sflush_r+0x208>
 4013150:	9c000015 	stw	r16,0(r19)
 4013154:	0005883a 	mov	r2,zero
 4013158:	003fb306 	br	4013028 <__alt_data_end+0xfc013028>
 401315c:	88c0030b 	ldhu	r3,12(r17)
 4013160:	3005883a 	mov	r2,r6
 4013164:	18c01014 	ori	r3,r3,64
 4013168:	88c0030d 	sth	r3,12(r17)
 401316c:	003fae06 	br	4013028 <__alt_data_end+0xfc013028>

04013170 <_fflush_r>:
 4013170:	defffd04 	addi	sp,sp,-12
 4013174:	dc000115 	stw	r16,4(sp)
 4013178:	dfc00215 	stw	ra,8(sp)
 401317c:	2021883a 	mov	r16,r4
 4013180:	20000226 	beq	r4,zero,401318c <_fflush_r+0x1c>
 4013184:	20800e17 	ldw	r2,56(r4)
 4013188:	10000c26 	beq	r2,zero,40131bc <_fflush_r+0x4c>
 401318c:	2880030f 	ldh	r2,12(r5)
 4013190:	1000051e 	bne	r2,zero,40131a8 <_fflush_r+0x38>
 4013194:	0005883a 	mov	r2,zero
 4013198:	dfc00217 	ldw	ra,8(sp)
 401319c:	dc000117 	ldw	r16,4(sp)
 40131a0:	dec00304 	addi	sp,sp,12
 40131a4:	f800283a 	ret
 40131a8:	8009883a 	mov	r4,r16
 40131ac:	dfc00217 	ldw	ra,8(sp)
 40131b0:	dc000117 	ldw	r16,4(sp)
 40131b4:	dec00304 	addi	sp,sp,12
 40131b8:	4012f541 	jmpi	4012f54 <__sflush_r>
 40131bc:	d9400015 	stw	r5,0(sp)
 40131c0:	401354c0 	call	401354c <__sinit>
 40131c4:	d9400017 	ldw	r5,0(sp)
 40131c8:	003ff006 	br	401318c <__alt_data_end+0xfc01318c>

040131cc <fflush>:
 40131cc:	20000526 	beq	r4,zero,40131e4 <fflush+0x18>
 40131d0:	008100f4 	movhi	r2,1027
 40131d4:	10b31d04 	addi	r2,r2,-13196
 40131d8:	200b883a 	mov	r5,r4
 40131dc:	11000017 	ldw	r4,0(r2)
 40131e0:	40131701 	jmpi	4013170 <_fflush_r>
 40131e4:	008100f4 	movhi	r2,1027
 40131e8:	10b31c04 	addi	r2,r2,-13200
 40131ec:	11000017 	ldw	r4,0(r2)
 40131f0:	01410074 	movhi	r5,1025
 40131f4:	294c5c04 	addi	r5,r5,12656
 40131f8:	4013f501 	jmpi	4013f50 <_fwalk_reent>

040131fc <__fp_unlock>:
 40131fc:	0005883a 	mov	r2,zero
 4013200:	f800283a 	ret

04013204 <_cleanup_r>:
 4013204:	014100b4 	movhi	r5,1026
 4013208:	2962a204 	addi	r5,r5,-30072
 401320c:	4013f501 	jmpi	4013f50 <_fwalk_reent>

04013210 <__sinit.part.1>:
 4013210:	defff704 	addi	sp,sp,-36
 4013214:	00c10074 	movhi	r3,1025
 4013218:	dfc00815 	stw	ra,32(sp)
 401321c:	ddc00715 	stw	r23,28(sp)
 4013220:	dd800615 	stw	r22,24(sp)
 4013224:	dd400515 	stw	r21,20(sp)
 4013228:	dd000415 	stw	r20,16(sp)
 401322c:	dcc00315 	stw	r19,12(sp)
 4013230:	dc800215 	stw	r18,8(sp)
 4013234:	dc400115 	stw	r17,4(sp)
 4013238:	dc000015 	stw	r16,0(sp)
 401323c:	18cc8104 	addi	r3,r3,12804
 4013240:	24000117 	ldw	r16,4(r4)
 4013244:	20c00f15 	stw	r3,60(r4)
 4013248:	2080bb04 	addi	r2,r4,748
 401324c:	00c000c4 	movi	r3,3
 4013250:	20c0b915 	stw	r3,740(r4)
 4013254:	2080ba15 	stw	r2,744(r4)
 4013258:	2000b815 	stw	zero,736(r4)
 401325c:	05c00204 	movi	r23,8
 4013260:	00800104 	movi	r2,4
 4013264:	2025883a 	mov	r18,r4
 4013268:	b80d883a 	mov	r6,r23
 401326c:	81001704 	addi	r4,r16,92
 4013270:	000b883a 	mov	r5,zero
 4013274:	80000015 	stw	zero,0(r16)
 4013278:	80000115 	stw	zero,4(r16)
 401327c:	80000215 	stw	zero,8(r16)
 4013280:	8080030d 	sth	r2,12(r16)
 4013284:	80001915 	stw	zero,100(r16)
 4013288:	8000038d 	sth	zero,14(r16)
 401328c:	80000415 	stw	zero,16(r16)
 4013290:	80000515 	stw	zero,20(r16)
 4013294:	80000615 	stw	zero,24(r16)
 4013298:	400c8b00 	call	400c8b0 <memset>
 401329c:	05810074 	movhi	r22,1025
 40132a0:	94400217 	ldw	r17,8(r18)
 40132a4:	05410074 	movhi	r21,1025
 40132a8:	05010074 	movhi	r20,1025
 40132ac:	04c10074 	movhi	r19,1025
 40132b0:	b5970a04 	addi	r22,r22,23592
 40132b4:	ad572104 	addi	r21,r21,23684
 40132b8:	a5174004 	addi	r20,r20,23808
 40132bc:	9cd75704 	addi	r19,r19,23900
 40132c0:	85800815 	stw	r22,32(r16)
 40132c4:	85400915 	stw	r21,36(r16)
 40132c8:	85000a15 	stw	r20,40(r16)
 40132cc:	84c00b15 	stw	r19,44(r16)
 40132d0:	84000715 	stw	r16,28(r16)
 40132d4:	00800284 	movi	r2,10
 40132d8:	8880030d 	sth	r2,12(r17)
 40132dc:	00800044 	movi	r2,1
 40132e0:	b80d883a 	mov	r6,r23
 40132e4:	89001704 	addi	r4,r17,92
 40132e8:	000b883a 	mov	r5,zero
 40132ec:	88000015 	stw	zero,0(r17)
 40132f0:	88000115 	stw	zero,4(r17)
 40132f4:	88000215 	stw	zero,8(r17)
 40132f8:	88001915 	stw	zero,100(r17)
 40132fc:	8880038d 	sth	r2,14(r17)
 4013300:	88000415 	stw	zero,16(r17)
 4013304:	88000515 	stw	zero,20(r17)
 4013308:	88000615 	stw	zero,24(r17)
 401330c:	400c8b00 	call	400c8b0 <memset>
 4013310:	94000317 	ldw	r16,12(r18)
 4013314:	00800484 	movi	r2,18
 4013318:	8c400715 	stw	r17,28(r17)
 401331c:	8d800815 	stw	r22,32(r17)
 4013320:	8d400915 	stw	r21,36(r17)
 4013324:	8d000a15 	stw	r20,40(r17)
 4013328:	8cc00b15 	stw	r19,44(r17)
 401332c:	8080030d 	sth	r2,12(r16)
 4013330:	00800084 	movi	r2,2
 4013334:	80000015 	stw	zero,0(r16)
 4013338:	80000115 	stw	zero,4(r16)
 401333c:	80000215 	stw	zero,8(r16)
 4013340:	80001915 	stw	zero,100(r16)
 4013344:	8080038d 	sth	r2,14(r16)
 4013348:	80000415 	stw	zero,16(r16)
 401334c:	80000515 	stw	zero,20(r16)
 4013350:	80000615 	stw	zero,24(r16)
 4013354:	b80d883a 	mov	r6,r23
 4013358:	000b883a 	mov	r5,zero
 401335c:	81001704 	addi	r4,r16,92
 4013360:	400c8b00 	call	400c8b0 <memset>
 4013364:	00800044 	movi	r2,1
 4013368:	84000715 	stw	r16,28(r16)
 401336c:	85800815 	stw	r22,32(r16)
 4013370:	85400915 	stw	r21,36(r16)
 4013374:	85000a15 	stw	r20,40(r16)
 4013378:	84c00b15 	stw	r19,44(r16)
 401337c:	90800e15 	stw	r2,56(r18)
 4013380:	dfc00817 	ldw	ra,32(sp)
 4013384:	ddc00717 	ldw	r23,28(sp)
 4013388:	dd800617 	ldw	r22,24(sp)
 401338c:	dd400517 	ldw	r21,20(sp)
 4013390:	dd000417 	ldw	r20,16(sp)
 4013394:	dcc00317 	ldw	r19,12(sp)
 4013398:	dc800217 	ldw	r18,8(sp)
 401339c:	dc400117 	ldw	r17,4(sp)
 40133a0:	dc000017 	ldw	r16,0(sp)
 40133a4:	dec00904 	addi	sp,sp,36
 40133a8:	f800283a 	ret

040133ac <__fp_lock>:
 40133ac:	0005883a 	mov	r2,zero
 40133b0:	f800283a 	ret

040133b4 <__sfmoreglue>:
 40133b4:	defffc04 	addi	sp,sp,-16
 40133b8:	dc400115 	stw	r17,4(sp)
 40133bc:	2c7fffc4 	addi	r17,r5,-1
 40133c0:	8c401a24 	muli	r17,r17,104
 40133c4:	dc800215 	stw	r18,8(sp)
 40133c8:	2825883a 	mov	r18,r5
 40133cc:	89401d04 	addi	r5,r17,116
 40133d0:	dc000015 	stw	r16,0(sp)
 40133d4:	dfc00315 	stw	ra,12(sp)
 40133d8:	400bee00 	call	400bee0 <_malloc_r>
 40133dc:	1021883a 	mov	r16,r2
 40133e0:	10000726 	beq	r2,zero,4013400 <__sfmoreglue+0x4c>
 40133e4:	11000304 	addi	r4,r2,12
 40133e8:	10000015 	stw	zero,0(r2)
 40133ec:	14800115 	stw	r18,4(r2)
 40133f0:	11000215 	stw	r4,8(r2)
 40133f4:	89801a04 	addi	r6,r17,104
 40133f8:	000b883a 	mov	r5,zero
 40133fc:	400c8b00 	call	400c8b0 <memset>
 4013400:	8005883a 	mov	r2,r16
 4013404:	dfc00317 	ldw	ra,12(sp)
 4013408:	dc800217 	ldw	r18,8(sp)
 401340c:	dc400117 	ldw	r17,4(sp)
 4013410:	dc000017 	ldw	r16,0(sp)
 4013414:	dec00404 	addi	sp,sp,16
 4013418:	f800283a 	ret

0401341c <__sfp>:
 401341c:	defffb04 	addi	sp,sp,-20
 4013420:	dc000015 	stw	r16,0(sp)
 4013424:	040100f4 	movhi	r16,1027
 4013428:	84331c04 	addi	r16,r16,-13200
 401342c:	dcc00315 	stw	r19,12(sp)
 4013430:	2027883a 	mov	r19,r4
 4013434:	81000017 	ldw	r4,0(r16)
 4013438:	dfc00415 	stw	ra,16(sp)
 401343c:	dc800215 	stw	r18,8(sp)
 4013440:	20800e17 	ldw	r2,56(r4)
 4013444:	dc400115 	stw	r17,4(sp)
 4013448:	1000021e 	bne	r2,zero,4013454 <__sfp+0x38>
 401344c:	40132100 	call	4013210 <__sinit.part.1>
 4013450:	81000017 	ldw	r4,0(r16)
 4013454:	2480b804 	addi	r18,r4,736
 4013458:	047fffc4 	movi	r17,-1
 401345c:	91000117 	ldw	r4,4(r18)
 4013460:	94000217 	ldw	r16,8(r18)
 4013464:	213fffc4 	addi	r4,r4,-1
 4013468:	20000a16 	blt	r4,zero,4013494 <__sfp+0x78>
 401346c:	8080030f 	ldh	r2,12(r16)
 4013470:	10000c26 	beq	r2,zero,40134a4 <__sfp+0x88>
 4013474:	80c01d04 	addi	r3,r16,116
 4013478:	00000206 	br	4013484 <__sfp+0x68>
 401347c:	18bfe60f 	ldh	r2,-104(r3)
 4013480:	10000826 	beq	r2,zero,40134a4 <__sfp+0x88>
 4013484:	213fffc4 	addi	r4,r4,-1
 4013488:	1c3ffd04 	addi	r16,r3,-12
 401348c:	18c01a04 	addi	r3,r3,104
 4013490:	247ffa1e 	bne	r4,r17,401347c <__alt_data_end+0xfc01347c>
 4013494:	90800017 	ldw	r2,0(r18)
 4013498:	10001d26 	beq	r2,zero,4013510 <__sfp+0xf4>
 401349c:	1025883a 	mov	r18,r2
 40134a0:	003fee06 	br	401345c <__alt_data_end+0xfc01345c>
 40134a4:	00bfffc4 	movi	r2,-1
 40134a8:	8080038d 	sth	r2,14(r16)
 40134ac:	00800044 	movi	r2,1
 40134b0:	8080030d 	sth	r2,12(r16)
 40134b4:	80001915 	stw	zero,100(r16)
 40134b8:	80000015 	stw	zero,0(r16)
 40134bc:	80000215 	stw	zero,8(r16)
 40134c0:	80000115 	stw	zero,4(r16)
 40134c4:	80000415 	stw	zero,16(r16)
 40134c8:	80000515 	stw	zero,20(r16)
 40134cc:	80000615 	stw	zero,24(r16)
 40134d0:	01800204 	movi	r6,8
 40134d4:	000b883a 	mov	r5,zero
 40134d8:	81001704 	addi	r4,r16,92
 40134dc:	400c8b00 	call	400c8b0 <memset>
 40134e0:	8005883a 	mov	r2,r16
 40134e4:	80000c15 	stw	zero,48(r16)
 40134e8:	80000d15 	stw	zero,52(r16)
 40134ec:	80001115 	stw	zero,68(r16)
 40134f0:	80001215 	stw	zero,72(r16)
 40134f4:	dfc00417 	ldw	ra,16(sp)
 40134f8:	dcc00317 	ldw	r19,12(sp)
 40134fc:	dc800217 	ldw	r18,8(sp)
 4013500:	dc400117 	ldw	r17,4(sp)
 4013504:	dc000017 	ldw	r16,0(sp)
 4013508:	dec00504 	addi	sp,sp,20
 401350c:	f800283a 	ret
 4013510:	01400104 	movi	r5,4
 4013514:	9809883a 	mov	r4,r19
 4013518:	40133b40 	call	40133b4 <__sfmoreglue>
 401351c:	90800015 	stw	r2,0(r18)
 4013520:	103fde1e 	bne	r2,zero,401349c <__alt_data_end+0xfc01349c>
 4013524:	00800304 	movi	r2,12
 4013528:	98800015 	stw	r2,0(r19)
 401352c:	0005883a 	mov	r2,zero
 4013530:	003ff006 	br	40134f4 <__alt_data_end+0xfc0134f4>

04013534 <_cleanup>:
 4013534:	008100f4 	movhi	r2,1027
 4013538:	10b31c04 	addi	r2,r2,-13200
 401353c:	11000017 	ldw	r4,0(r2)
 4013540:	014100b4 	movhi	r5,1026
 4013544:	2962a204 	addi	r5,r5,-30072
 4013548:	4013f501 	jmpi	4013f50 <_fwalk_reent>

0401354c <__sinit>:
 401354c:	20800e17 	ldw	r2,56(r4)
 4013550:	10000126 	beq	r2,zero,4013558 <__sinit+0xc>
 4013554:	f800283a 	ret
 4013558:	40132101 	jmpi	4013210 <__sinit.part.1>

0401355c <__sfp_lock_acquire>:
 401355c:	f800283a 	ret

04013560 <__sfp_lock_release>:
 4013560:	f800283a 	ret

04013564 <__sinit_lock_acquire>:
 4013564:	f800283a 	ret

04013568 <__sinit_lock_release>:
 4013568:	f800283a 	ret

0401356c <__fp_lock_all>:
 401356c:	008100f4 	movhi	r2,1027
 4013570:	10b31d04 	addi	r2,r2,-13196
 4013574:	11000017 	ldw	r4,0(r2)
 4013578:	01410074 	movhi	r5,1025
 401357c:	294ceb04 	addi	r5,r5,13228
 4013580:	4013e8c1 	jmpi	4013e8c <_fwalk>

04013584 <__fp_unlock_all>:
 4013584:	008100f4 	movhi	r2,1027
 4013588:	10b31d04 	addi	r2,r2,-13196
 401358c:	11000017 	ldw	r4,0(r2)
 4013590:	01410074 	movhi	r5,1025
 4013594:	294c7f04 	addi	r5,r5,12796
 4013598:	4013e8c1 	jmpi	4013e8c <_fwalk>

0401359c <_malloc_trim_r>:
 401359c:	defffb04 	addi	sp,sp,-20
 40135a0:	dcc00315 	stw	r19,12(sp)
 40135a4:	04c100f4 	movhi	r19,1027
 40135a8:	dc800215 	stw	r18,8(sp)
 40135ac:	dc400115 	stw	r17,4(sp)
 40135b0:	dc000015 	stw	r16,0(sp)
 40135b4:	dfc00415 	stw	ra,16(sp)
 40135b8:	2821883a 	mov	r16,r5
 40135bc:	9ced5e04 	addi	r19,r19,-19080
 40135c0:	2025883a 	mov	r18,r4
 40135c4:	401c9400 	call	401c940 <__malloc_lock>
 40135c8:	98800217 	ldw	r2,8(r19)
 40135cc:	14400117 	ldw	r17,4(r2)
 40135d0:	00bfff04 	movi	r2,-4
 40135d4:	88a2703a 	and	r17,r17,r2
 40135d8:	8c21c83a 	sub	r16,r17,r16
 40135dc:	8403fbc4 	addi	r16,r16,4079
 40135e0:	8020d33a 	srli	r16,r16,12
 40135e4:	0083ffc4 	movi	r2,4095
 40135e8:	843fffc4 	addi	r16,r16,-1
 40135ec:	8020933a 	slli	r16,r16,12
 40135f0:	1400060e 	bge	r2,r16,401360c <_malloc_trim_r+0x70>
 40135f4:	000b883a 	mov	r5,zero
 40135f8:	9009883a 	mov	r4,r18
 40135fc:	400cb380 	call	400cb38 <_sbrk_r>
 4013600:	98c00217 	ldw	r3,8(r19)
 4013604:	1c47883a 	add	r3,r3,r17
 4013608:	10c00a26 	beq	r2,r3,4013634 <_malloc_trim_r+0x98>
 401360c:	9009883a 	mov	r4,r18
 4013610:	401c9640 	call	401c964 <__malloc_unlock>
 4013614:	0005883a 	mov	r2,zero
 4013618:	dfc00417 	ldw	ra,16(sp)
 401361c:	dcc00317 	ldw	r19,12(sp)
 4013620:	dc800217 	ldw	r18,8(sp)
 4013624:	dc400117 	ldw	r17,4(sp)
 4013628:	dc000017 	ldw	r16,0(sp)
 401362c:	dec00504 	addi	sp,sp,20
 4013630:	f800283a 	ret
 4013634:	040bc83a 	sub	r5,zero,r16
 4013638:	9009883a 	mov	r4,r18
 401363c:	400cb380 	call	400cb38 <_sbrk_r>
 4013640:	00ffffc4 	movi	r3,-1
 4013644:	10c00d26 	beq	r2,r3,401367c <_malloc_trim_r+0xe0>
 4013648:	00c10134 	movhi	r3,1028
 401364c:	18e62304 	addi	r3,r3,-26484
 4013650:	18800017 	ldw	r2,0(r3)
 4013654:	99000217 	ldw	r4,8(r19)
 4013658:	8c23c83a 	sub	r17,r17,r16
 401365c:	8c400054 	ori	r17,r17,1
 4013660:	1421c83a 	sub	r16,r2,r16
 4013664:	24400115 	stw	r17,4(r4)
 4013668:	9009883a 	mov	r4,r18
 401366c:	1c000015 	stw	r16,0(r3)
 4013670:	401c9640 	call	401c964 <__malloc_unlock>
 4013674:	00800044 	movi	r2,1
 4013678:	003fe706 	br	4013618 <__alt_data_end+0xfc013618>
 401367c:	000b883a 	mov	r5,zero
 4013680:	9009883a 	mov	r4,r18
 4013684:	400cb380 	call	400cb38 <_sbrk_r>
 4013688:	99000217 	ldw	r4,8(r19)
 401368c:	014003c4 	movi	r5,15
 4013690:	1107c83a 	sub	r3,r2,r4
 4013694:	28ffdd0e 	bge	r5,r3,401360c <__alt_data_end+0xfc01360c>
 4013698:	014100f4 	movhi	r5,1027
 401369c:	29731e04 	addi	r5,r5,-13192
 40136a0:	29400017 	ldw	r5,0(r5)
 40136a4:	18c00054 	ori	r3,r3,1
 40136a8:	20c00115 	stw	r3,4(r4)
 40136ac:	00c10134 	movhi	r3,1028
 40136b0:	1145c83a 	sub	r2,r2,r5
 40136b4:	18e62304 	addi	r3,r3,-26484
 40136b8:	18800015 	stw	r2,0(r3)
 40136bc:	003fd306 	br	401360c <__alt_data_end+0xfc01360c>

040136c0 <_free_r>:
 40136c0:	28004126 	beq	r5,zero,40137c8 <_free_r+0x108>
 40136c4:	defffd04 	addi	sp,sp,-12
 40136c8:	dc400115 	stw	r17,4(sp)
 40136cc:	dc000015 	stw	r16,0(sp)
 40136d0:	2023883a 	mov	r17,r4
 40136d4:	2821883a 	mov	r16,r5
 40136d8:	dfc00215 	stw	ra,8(sp)
 40136dc:	401c9400 	call	401c940 <__malloc_lock>
 40136e0:	81ffff17 	ldw	r7,-4(r16)
 40136e4:	00bfff84 	movi	r2,-2
 40136e8:	010100f4 	movhi	r4,1027
 40136ec:	81bffe04 	addi	r6,r16,-8
 40136f0:	3884703a 	and	r2,r7,r2
 40136f4:	212d5e04 	addi	r4,r4,-19080
 40136f8:	308b883a 	add	r5,r6,r2
 40136fc:	2a400117 	ldw	r9,4(r5)
 4013700:	22000217 	ldw	r8,8(r4)
 4013704:	00ffff04 	movi	r3,-4
 4013708:	48c6703a 	and	r3,r9,r3
 401370c:	2a005726 	beq	r5,r8,401386c <_free_r+0x1ac>
 4013710:	28c00115 	stw	r3,4(r5)
 4013714:	39c0004c 	andi	r7,r7,1
 4013718:	3800091e 	bne	r7,zero,4013740 <_free_r+0x80>
 401371c:	823ffe17 	ldw	r8,-8(r16)
 4013720:	22400204 	addi	r9,r4,8
 4013724:	320dc83a 	sub	r6,r6,r8
 4013728:	31c00217 	ldw	r7,8(r6)
 401372c:	1205883a 	add	r2,r2,r8
 4013730:	3a406526 	beq	r7,r9,40138c8 <_free_r+0x208>
 4013734:	32000317 	ldw	r8,12(r6)
 4013738:	3a000315 	stw	r8,12(r7)
 401373c:	41c00215 	stw	r7,8(r8)
 4013740:	28cf883a 	add	r7,r5,r3
 4013744:	39c00117 	ldw	r7,4(r7)
 4013748:	39c0004c 	andi	r7,r7,1
 401374c:	38003a26 	beq	r7,zero,4013838 <_free_r+0x178>
 4013750:	10c00054 	ori	r3,r2,1
 4013754:	30c00115 	stw	r3,4(r6)
 4013758:	3087883a 	add	r3,r6,r2
 401375c:	18800015 	stw	r2,0(r3)
 4013760:	00c07fc4 	movi	r3,511
 4013764:	18801936 	bltu	r3,r2,40137cc <_free_r+0x10c>
 4013768:	1004d0fa 	srli	r2,r2,3
 401376c:	01c00044 	movi	r7,1
 4013770:	21400117 	ldw	r5,4(r4)
 4013774:	10c00044 	addi	r3,r2,1
 4013778:	18c7883a 	add	r3,r3,r3
 401377c:	1005d0ba 	srai	r2,r2,2
 4013780:	18c7883a 	add	r3,r3,r3
 4013784:	18c7883a 	add	r3,r3,r3
 4013788:	1907883a 	add	r3,r3,r4
 401378c:	3884983a 	sll	r2,r7,r2
 4013790:	19c00017 	ldw	r7,0(r3)
 4013794:	1a3ffe04 	addi	r8,r3,-8
 4013798:	1144b03a 	or	r2,r2,r5
 401379c:	32000315 	stw	r8,12(r6)
 40137a0:	31c00215 	stw	r7,8(r6)
 40137a4:	20800115 	stw	r2,4(r4)
 40137a8:	19800015 	stw	r6,0(r3)
 40137ac:	39800315 	stw	r6,12(r7)
 40137b0:	8809883a 	mov	r4,r17
 40137b4:	dfc00217 	ldw	ra,8(sp)
 40137b8:	dc400117 	ldw	r17,4(sp)
 40137bc:	dc000017 	ldw	r16,0(sp)
 40137c0:	dec00304 	addi	sp,sp,12
 40137c4:	401c9641 	jmpi	401c964 <__malloc_unlock>
 40137c8:	f800283a 	ret
 40137cc:	100ad27a 	srli	r5,r2,9
 40137d0:	00c00104 	movi	r3,4
 40137d4:	19404a36 	bltu	r3,r5,4013900 <_free_r+0x240>
 40137d8:	100ad1ba 	srli	r5,r2,6
 40137dc:	28c00e44 	addi	r3,r5,57
 40137e0:	18c7883a 	add	r3,r3,r3
 40137e4:	29400e04 	addi	r5,r5,56
 40137e8:	18c7883a 	add	r3,r3,r3
 40137ec:	18c7883a 	add	r3,r3,r3
 40137f0:	1909883a 	add	r4,r3,r4
 40137f4:	20c00017 	ldw	r3,0(r4)
 40137f8:	01c100f4 	movhi	r7,1027
 40137fc:	213ffe04 	addi	r4,r4,-8
 4013800:	39ed5e04 	addi	r7,r7,-19080
 4013804:	20c04426 	beq	r4,r3,4013918 <_free_r+0x258>
 4013808:	01ffff04 	movi	r7,-4
 401380c:	19400117 	ldw	r5,4(r3)
 4013810:	29ca703a 	and	r5,r5,r7
 4013814:	1140022e 	bgeu	r2,r5,4013820 <_free_r+0x160>
 4013818:	18c00217 	ldw	r3,8(r3)
 401381c:	20fffb1e 	bne	r4,r3,401380c <__alt_data_end+0xfc01380c>
 4013820:	19000317 	ldw	r4,12(r3)
 4013824:	31000315 	stw	r4,12(r6)
 4013828:	30c00215 	stw	r3,8(r6)
 401382c:	21800215 	stw	r6,8(r4)
 4013830:	19800315 	stw	r6,12(r3)
 4013834:	003fde06 	br	40137b0 <__alt_data_end+0xfc0137b0>
 4013838:	29c00217 	ldw	r7,8(r5)
 401383c:	10c5883a 	add	r2,r2,r3
 4013840:	00c100f4 	movhi	r3,1027
 4013844:	18ed6004 	addi	r3,r3,-19072
 4013848:	38c03b26 	beq	r7,r3,4013938 <_free_r+0x278>
 401384c:	2a000317 	ldw	r8,12(r5)
 4013850:	11400054 	ori	r5,r2,1
 4013854:	3087883a 	add	r3,r6,r2
 4013858:	3a000315 	stw	r8,12(r7)
 401385c:	41c00215 	stw	r7,8(r8)
 4013860:	31400115 	stw	r5,4(r6)
 4013864:	18800015 	stw	r2,0(r3)
 4013868:	003fbd06 	br	4013760 <__alt_data_end+0xfc013760>
 401386c:	39c0004c 	andi	r7,r7,1
 4013870:	10c5883a 	add	r2,r2,r3
 4013874:	3800071e 	bne	r7,zero,4013894 <_free_r+0x1d4>
 4013878:	81fffe17 	ldw	r7,-8(r16)
 401387c:	31cdc83a 	sub	r6,r6,r7
 4013880:	30c00317 	ldw	r3,12(r6)
 4013884:	31400217 	ldw	r5,8(r6)
 4013888:	11c5883a 	add	r2,r2,r7
 401388c:	28c00315 	stw	r3,12(r5)
 4013890:	19400215 	stw	r5,8(r3)
 4013894:	10c00054 	ori	r3,r2,1
 4013898:	30c00115 	stw	r3,4(r6)
 401389c:	00c100f4 	movhi	r3,1027
 40138a0:	18f31f04 	addi	r3,r3,-13188
 40138a4:	18c00017 	ldw	r3,0(r3)
 40138a8:	21800215 	stw	r6,8(r4)
 40138ac:	10ffc036 	bltu	r2,r3,40137b0 <__alt_data_end+0xfc0137b0>
 40138b0:	00810134 	movhi	r2,1028
 40138b4:	10a5e804 	addi	r2,r2,-26720
 40138b8:	11400017 	ldw	r5,0(r2)
 40138bc:	8809883a 	mov	r4,r17
 40138c0:	401359c0 	call	401359c <_malloc_trim_r>
 40138c4:	003fba06 	br	40137b0 <__alt_data_end+0xfc0137b0>
 40138c8:	28c9883a 	add	r4,r5,r3
 40138cc:	21000117 	ldw	r4,4(r4)
 40138d0:	2100004c 	andi	r4,r4,1
 40138d4:	2000391e 	bne	r4,zero,40139bc <_free_r+0x2fc>
 40138d8:	29c00217 	ldw	r7,8(r5)
 40138dc:	29000317 	ldw	r4,12(r5)
 40138e0:	1885883a 	add	r2,r3,r2
 40138e4:	10c00054 	ori	r3,r2,1
 40138e8:	39000315 	stw	r4,12(r7)
 40138ec:	21c00215 	stw	r7,8(r4)
 40138f0:	30c00115 	stw	r3,4(r6)
 40138f4:	308d883a 	add	r6,r6,r2
 40138f8:	30800015 	stw	r2,0(r6)
 40138fc:	003fac06 	br	40137b0 <__alt_data_end+0xfc0137b0>
 4013900:	00c00504 	movi	r3,20
 4013904:	19401536 	bltu	r3,r5,401395c <_free_r+0x29c>
 4013908:	28c01704 	addi	r3,r5,92
 401390c:	18c7883a 	add	r3,r3,r3
 4013910:	294016c4 	addi	r5,r5,91
 4013914:	003fb406 	br	40137e8 <__alt_data_end+0xfc0137e8>
 4013918:	280bd0ba 	srai	r5,r5,2
 401391c:	00c00044 	movi	r3,1
 4013920:	38800117 	ldw	r2,4(r7)
 4013924:	194a983a 	sll	r5,r3,r5
 4013928:	2007883a 	mov	r3,r4
 401392c:	2884b03a 	or	r2,r5,r2
 4013930:	38800115 	stw	r2,4(r7)
 4013934:	003fbb06 	br	4013824 <__alt_data_end+0xfc013824>
 4013938:	21800515 	stw	r6,20(r4)
 401393c:	21800415 	stw	r6,16(r4)
 4013940:	10c00054 	ori	r3,r2,1
 4013944:	31c00315 	stw	r7,12(r6)
 4013948:	31c00215 	stw	r7,8(r6)
 401394c:	30c00115 	stw	r3,4(r6)
 4013950:	308d883a 	add	r6,r6,r2
 4013954:	30800015 	stw	r2,0(r6)
 4013958:	003f9506 	br	40137b0 <__alt_data_end+0xfc0137b0>
 401395c:	00c01504 	movi	r3,84
 4013960:	19400536 	bltu	r3,r5,4013978 <_free_r+0x2b8>
 4013964:	100ad33a 	srli	r5,r2,12
 4013968:	28c01bc4 	addi	r3,r5,111
 401396c:	18c7883a 	add	r3,r3,r3
 4013970:	29401b84 	addi	r5,r5,110
 4013974:	003f9c06 	br	40137e8 <__alt_data_end+0xfc0137e8>
 4013978:	00c05504 	movi	r3,340
 401397c:	19400536 	bltu	r3,r5,4013994 <_free_r+0x2d4>
 4013980:	100ad3fa 	srli	r5,r2,15
 4013984:	28c01e04 	addi	r3,r5,120
 4013988:	18c7883a 	add	r3,r3,r3
 401398c:	29401dc4 	addi	r5,r5,119
 4013990:	003f9506 	br	40137e8 <__alt_data_end+0xfc0137e8>
 4013994:	00c15504 	movi	r3,1364
 4013998:	19400536 	bltu	r3,r5,40139b0 <_free_r+0x2f0>
 401399c:	100ad4ba 	srli	r5,r2,18
 40139a0:	28c01f44 	addi	r3,r5,125
 40139a4:	18c7883a 	add	r3,r3,r3
 40139a8:	29401f04 	addi	r5,r5,124
 40139ac:	003f8e06 	br	40137e8 <__alt_data_end+0xfc0137e8>
 40139b0:	00c03f84 	movi	r3,254
 40139b4:	01401f84 	movi	r5,126
 40139b8:	003f8b06 	br	40137e8 <__alt_data_end+0xfc0137e8>
 40139bc:	10c00054 	ori	r3,r2,1
 40139c0:	30c00115 	stw	r3,4(r6)
 40139c4:	308d883a 	add	r6,r6,r2
 40139c8:	30800015 	stw	r2,0(r6)
 40139cc:	003f7806 	br	40137b0 <__alt_data_end+0xfc0137b0>

040139d0 <__sfvwrite_r>:
 40139d0:	30800217 	ldw	r2,8(r6)
 40139d4:	10006726 	beq	r2,zero,4013b74 <__sfvwrite_r+0x1a4>
 40139d8:	28c0030b 	ldhu	r3,12(r5)
 40139dc:	defff404 	addi	sp,sp,-48
 40139e0:	dd400715 	stw	r21,28(sp)
 40139e4:	dd000615 	stw	r20,24(sp)
 40139e8:	dc000215 	stw	r16,8(sp)
 40139ec:	dfc00b15 	stw	ra,44(sp)
 40139f0:	df000a15 	stw	fp,40(sp)
 40139f4:	ddc00915 	stw	r23,36(sp)
 40139f8:	dd800815 	stw	r22,32(sp)
 40139fc:	dcc00515 	stw	r19,20(sp)
 4013a00:	dc800415 	stw	r18,16(sp)
 4013a04:	dc400315 	stw	r17,12(sp)
 4013a08:	1880020c 	andi	r2,r3,8
 4013a0c:	2821883a 	mov	r16,r5
 4013a10:	202b883a 	mov	r21,r4
 4013a14:	3029883a 	mov	r20,r6
 4013a18:	10002726 	beq	r2,zero,4013ab8 <__sfvwrite_r+0xe8>
 4013a1c:	28800417 	ldw	r2,16(r5)
 4013a20:	10002526 	beq	r2,zero,4013ab8 <__sfvwrite_r+0xe8>
 4013a24:	1880008c 	andi	r2,r3,2
 4013a28:	a4400017 	ldw	r17,0(r20)
 4013a2c:	10002a26 	beq	r2,zero,4013ad8 <__sfvwrite_r+0x108>
 4013a30:	05a00034 	movhi	r22,32768
 4013a34:	0027883a 	mov	r19,zero
 4013a38:	0025883a 	mov	r18,zero
 4013a3c:	b5bf0004 	addi	r22,r22,-1024
 4013a40:	980d883a 	mov	r6,r19
 4013a44:	a809883a 	mov	r4,r21
 4013a48:	90004626 	beq	r18,zero,4013b64 <__sfvwrite_r+0x194>
 4013a4c:	900f883a 	mov	r7,r18
 4013a50:	b480022e 	bgeu	r22,r18,4013a5c <__sfvwrite_r+0x8c>
 4013a54:	01e00034 	movhi	r7,32768
 4013a58:	39ff0004 	addi	r7,r7,-1024
 4013a5c:	80800917 	ldw	r2,36(r16)
 4013a60:	81400717 	ldw	r5,28(r16)
 4013a64:	103ee83a 	callr	r2
 4013a68:	0080570e 	bge	zero,r2,4013bc8 <__sfvwrite_r+0x1f8>
 4013a6c:	a0c00217 	ldw	r3,8(r20)
 4013a70:	98a7883a 	add	r19,r19,r2
 4013a74:	90a5c83a 	sub	r18,r18,r2
 4013a78:	1885c83a 	sub	r2,r3,r2
 4013a7c:	a0800215 	stw	r2,8(r20)
 4013a80:	103fef1e 	bne	r2,zero,4013a40 <__alt_data_end+0xfc013a40>
 4013a84:	0005883a 	mov	r2,zero
 4013a88:	dfc00b17 	ldw	ra,44(sp)
 4013a8c:	df000a17 	ldw	fp,40(sp)
 4013a90:	ddc00917 	ldw	r23,36(sp)
 4013a94:	dd800817 	ldw	r22,32(sp)
 4013a98:	dd400717 	ldw	r21,28(sp)
 4013a9c:	dd000617 	ldw	r20,24(sp)
 4013aa0:	dcc00517 	ldw	r19,20(sp)
 4013aa4:	dc800417 	ldw	r18,16(sp)
 4013aa8:	dc400317 	ldw	r17,12(sp)
 4013aac:	dc000217 	ldw	r16,8(sp)
 4013ab0:	dec00c04 	addi	sp,sp,48
 4013ab4:	f800283a 	ret
 4013ab8:	800b883a 	mov	r5,r16
 4013abc:	a809883a 	mov	r4,r21
 4013ac0:	40115780 	call	4011578 <__swsetup_r>
 4013ac4:	1000eb1e 	bne	r2,zero,4013e74 <__sfvwrite_r+0x4a4>
 4013ac8:	80c0030b 	ldhu	r3,12(r16)
 4013acc:	a4400017 	ldw	r17,0(r20)
 4013ad0:	1880008c 	andi	r2,r3,2
 4013ad4:	103fd61e 	bne	r2,zero,4013a30 <__alt_data_end+0xfc013a30>
 4013ad8:	1880004c 	andi	r2,r3,1
 4013adc:	10003f1e 	bne	r2,zero,4013bdc <__sfvwrite_r+0x20c>
 4013ae0:	0039883a 	mov	fp,zero
 4013ae4:	0025883a 	mov	r18,zero
 4013ae8:	90001a26 	beq	r18,zero,4013b54 <__sfvwrite_r+0x184>
 4013aec:	1880800c 	andi	r2,r3,512
 4013af0:	84c00217 	ldw	r19,8(r16)
 4013af4:	10002126 	beq	r2,zero,4013b7c <__sfvwrite_r+0x1ac>
 4013af8:	982f883a 	mov	r23,r19
 4013afc:	94c09336 	bltu	r18,r19,4013d4c <__sfvwrite_r+0x37c>
 4013b00:	1881200c 	andi	r2,r3,1152
 4013b04:	10009e1e 	bne	r2,zero,4013d80 <__sfvwrite_r+0x3b0>
 4013b08:	81000017 	ldw	r4,0(r16)
 4013b0c:	b80d883a 	mov	r6,r23
 4013b10:	e00b883a 	mov	r5,fp
 4013b14:	40143900 	call	4014390 <memmove>
 4013b18:	80c00217 	ldw	r3,8(r16)
 4013b1c:	81000017 	ldw	r4,0(r16)
 4013b20:	9005883a 	mov	r2,r18
 4013b24:	1ce7c83a 	sub	r19,r3,r19
 4013b28:	25cf883a 	add	r7,r4,r23
 4013b2c:	84c00215 	stw	r19,8(r16)
 4013b30:	81c00015 	stw	r7,0(r16)
 4013b34:	a0c00217 	ldw	r3,8(r20)
 4013b38:	e0b9883a 	add	fp,fp,r2
 4013b3c:	90a5c83a 	sub	r18,r18,r2
 4013b40:	18a7c83a 	sub	r19,r3,r2
 4013b44:	a4c00215 	stw	r19,8(r20)
 4013b48:	983fce26 	beq	r19,zero,4013a84 <__alt_data_end+0xfc013a84>
 4013b4c:	80c0030b 	ldhu	r3,12(r16)
 4013b50:	903fe61e 	bne	r18,zero,4013aec <__alt_data_end+0xfc013aec>
 4013b54:	8f000017 	ldw	fp,0(r17)
 4013b58:	8c800117 	ldw	r18,4(r17)
 4013b5c:	8c400204 	addi	r17,r17,8
 4013b60:	003fe106 	br	4013ae8 <__alt_data_end+0xfc013ae8>
 4013b64:	8cc00017 	ldw	r19,0(r17)
 4013b68:	8c800117 	ldw	r18,4(r17)
 4013b6c:	8c400204 	addi	r17,r17,8
 4013b70:	003fb306 	br	4013a40 <__alt_data_end+0xfc013a40>
 4013b74:	0005883a 	mov	r2,zero
 4013b78:	f800283a 	ret
 4013b7c:	81000017 	ldw	r4,0(r16)
 4013b80:	80800417 	ldw	r2,16(r16)
 4013b84:	11005736 	bltu	r2,r4,4013ce4 <__sfvwrite_r+0x314>
 4013b88:	85c00517 	ldw	r23,20(r16)
 4013b8c:	95c05536 	bltu	r18,r23,4013ce4 <__sfvwrite_r+0x314>
 4013b90:	00a00034 	movhi	r2,32768
 4013b94:	10bfffc4 	addi	r2,r2,-1
 4013b98:	9009883a 	mov	r4,r18
 4013b9c:	1480012e 	bgeu	r2,r18,4013ba4 <__sfvwrite_r+0x1d4>
 4013ba0:	1009883a 	mov	r4,r2
 4013ba4:	b80b883a 	mov	r5,r23
 4013ba8:	400b7800 	call	400b780 <__divsi3>
 4013bac:	15cf383a 	mul	r7,r2,r23
 4013bb0:	81400717 	ldw	r5,28(r16)
 4013bb4:	80800917 	ldw	r2,36(r16)
 4013bb8:	e00d883a 	mov	r6,fp
 4013bbc:	a809883a 	mov	r4,r21
 4013bc0:	103ee83a 	callr	r2
 4013bc4:	00bfdb16 	blt	zero,r2,4013b34 <__alt_data_end+0xfc013b34>
 4013bc8:	8080030b 	ldhu	r2,12(r16)
 4013bcc:	10801014 	ori	r2,r2,64
 4013bd0:	8080030d 	sth	r2,12(r16)
 4013bd4:	00bfffc4 	movi	r2,-1
 4013bd8:	003fab06 	br	4013a88 <__alt_data_end+0xfc013a88>
 4013bdc:	0027883a 	mov	r19,zero
 4013be0:	0011883a 	mov	r8,zero
 4013be4:	0039883a 	mov	fp,zero
 4013be8:	0025883a 	mov	r18,zero
 4013bec:	90001f26 	beq	r18,zero,4013c6c <__sfvwrite_r+0x29c>
 4013bf0:	40005a26 	beq	r8,zero,4013d5c <__sfvwrite_r+0x38c>
 4013bf4:	982d883a 	mov	r22,r19
 4013bf8:	94c0012e 	bgeu	r18,r19,4013c00 <__sfvwrite_r+0x230>
 4013bfc:	902d883a 	mov	r22,r18
 4013c00:	81000017 	ldw	r4,0(r16)
 4013c04:	80800417 	ldw	r2,16(r16)
 4013c08:	b02f883a 	mov	r23,r22
 4013c0c:	81c00517 	ldw	r7,20(r16)
 4013c10:	1100032e 	bgeu	r2,r4,4013c20 <__sfvwrite_r+0x250>
 4013c14:	80c00217 	ldw	r3,8(r16)
 4013c18:	38c7883a 	add	r3,r7,r3
 4013c1c:	1d801816 	blt	r3,r22,4013c80 <__sfvwrite_r+0x2b0>
 4013c20:	b1c03e16 	blt	r22,r7,4013d1c <__sfvwrite_r+0x34c>
 4013c24:	80800917 	ldw	r2,36(r16)
 4013c28:	81400717 	ldw	r5,28(r16)
 4013c2c:	e00d883a 	mov	r6,fp
 4013c30:	da000115 	stw	r8,4(sp)
 4013c34:	a809883a 	mov	r4,r21
 4013c38:	103ee83a 	callr	r2
 4013c3c:	102f883a 	mov	r23,r2
 4013c40:	da000117 	ldw	r8,4(sp)
 4013c44:	00bfe00e 	bge	zero,r2,4013bc8 <__alt_data_end+0xfc013bc8>
 4013c48:	9de7c83a 	sub	r19,r19,r23
 4013c4c:	98001f26 	beq	r19,zero,4013ccc <__sfvwrite_r+0x2fc>
 4013c50:	a0800217 	ldw	r2,8(r20)
 4013c54:	e5f9883a 	add	fp,fp,r23
 4013c58:	95e5c83a 	sub	r18,r18,r23
 4013c5c:	15efc83a 	sub	r23,r2,r23
 4013c60:	a5c00215 	stw	r23,8(r20)
 4013c64:	b83f8726 	beq	r23,zero,4013a84 <__alt_data_end+0xfc013a84>
 4013c68:	903fe11e 	bne	r18,zero,4013bf0 <__alt_data_end+0xfc013bf0>
 4013c6c:	8f000017 	ldw	fp,0(r17)
 4013c70:	8c800117 	ldw	r18,4(r17)
 4013c74:	0011883a 	mov	r8,zero
 4013c78:	8c400204 	addi	r17,r17,8
 4013c7c:	003fdb06 	br	4013bec <__alt_data_end+0xfc013bec>
 4013c80:	180d883a 	mov	r6,r3
 4013c84:	e00b883a 	mov	r5,fp
 4013c88:	da000115 	stw	r8,4(sp)
 4013c8c:	d8c00015 	stw	r3,0(sp)
 4013c90:	40143900 	call	4014390 <memmove>
 4013c94:	d8c00017 	ldw	r3,0(sp)
 4013c98:	80800017 	ldw	r2,0(r16)
 4013c9c:	800b883a 	mov	r5,r16
 4013ca0:	a809883a 	mov	r4,r21
 4013ca4:	10c5883a 	add	r2,r2,r3
 4013ca8:	80800015 	stw	r2,0(r16)
 4013cac:	d8c00015 	stw	r3,0(sp)
 4013cb0:	40131700 	call	4013170 <_fflush_r>
 4013cb4:	d8c00017 	ldw	r3,0(sp)
 4013cb8:	da000117 	ldw	r8,4(sp)
 4013cbc:	103fc21e 	bne	r2,zero,4013bc8 <__alt_data_end+0xfc013bc8>
 4013cc0:	182f883a 	mov	r23,r3
 4013cc4:	9de7c83a 	sub	r19,r19,r23
 4013cc8:	983fe11e 	bne	r19,zero,4013c50 <__alt_data_end+0xfc013c50>
 4013ccc:	800b883a 	mov	r5,r16
 4013cd0:	a809883a 	mov	r4,r21
 4013cd4:	40131700 	call	4013170 <_fflush_r>
 4013cd8:	103fbb1e 	bne	r2,zero,4013bc8 <__alt_data_end+0xfc013bc8>
 4013cdc:	0011883a 	mov	r8,zero
 4013ce0:	003fdb06 	br	4013c50 <__alt_data_end+0xfc013c50>
 4013ce4:	94c0012e 	bgeu	r18,r19,4013cec <__sfvwrite_r+0x31c>
 4013ce8:	9027883a 	mov	r19,r18
 4013cec:	980d883a 	mov	r6,r19
 4013cf0:	e00b883a 	mov	r5,fp
 4013cf4:	40143900 	call	4014390 <memmove>
 4013cf8:	80800217 	ldw	r2,8(r16)
 4013cfc:	80c00017 	ldw	r3,0(r16)
 4013d00:	14c5c83a 	sub	r2,r2,r19
 4013d04:	1cc7883a 	add	r3,r3,r19
 4013d08:	80800215 	stw	r2,8(r16)
 4013d0c:	80c00015 	stw	r3,0(r16)
 4013d10:	10004326 	beq	r2,zero,4013e20 <__sfvwrite_r+0x450>
 4013d14:	9805883a 	mov	r2,r19
 4013d18:	003f8606 	br	4013b34 <__alt_data_end+0xfc013b34>
 4013d1c:	b00d883a 	mov	r6,r22
 4013d20:	e00b883a 	mov	r5,fp
 4013d24:	da000115 	stw	r8,4(sp)
 4013d28:	40143900 	call	4014390 <memmove>
 4013d2c:	80800217 	ldw	r2,8(r16)
 4013d30:	80c00017 	ldw	r3,0(r16)
 4013d34:	da000117 	ldw	r8,4(sp)
 4013d38:	1585c83a 	sub	r2,r2,r22
 4013d3c:	1dad883a 	add	r22,r3,r22
 4013d40:	80800215 	stw	r2,8(r16)
 4013d44:	85800015 	stw	r22,0(r16)
 4013d48:	003fbf06 	br	4013c48 <__alt_data_end+0xfc013c48>
 4013d4c:	81000017 	ldw	r4,0(r16)
 4013d50:	9027883a 	mov	r19,r18
 4013d54:	902f883a 	mov	r23,r18
 4013d58:	003f6c06 	br	4013b0c <__alt_data_end+0xfc013b0c>
 4013d5c:	900d883a 	mov	r6,r18
 4013d60:	01400284 	movi	r5,10
 4013d64:	e009883a 	mov	r4,fp
 4013d68:	40142ac0 	call	40142ac <memchr>
 4013d6c:	10003e26 	beq	r2,zero,4013e68 <__sfvwrite_r+0x498>
 4013d70:	10800044 	addi	r2,r2,1
 4013d74:	1727c83a 	sub	r19,r2,fp
 4013d78:	02000044 	movi	r8,1
 4013d7c:	003f9d06 	br	4013bf4 <__alt_data_end+0xfc013bf4>
 4013d80:	80800517 	ldw	r2,20(r16)
 4013d84:	81400417 	ldw	r5,16(r16)
 4013d88:	81c00017 	ldw	r7,0(r16)
 4013d8c:	10a7883a 	add	r19,r2,r2
 4013d90:	9885883a 	add	r2,r19,r2
 4013d94:	1026d7fa 	srli	r19,r2,31
 4013d98:	396dc83a 	sub	r22,r7,r5
 4013d9c:	b1000044 	addi	r4,r22,1
 4013da0:	9885883a 	add	r2,r19,r2
 4013da4:	1027d07a 	srai	r19,r2,1
 4013da8:	2485883a 	add	r2,r4,r18
 4013dac:	980d883a 	mov	r6,r19
 4013db0:	9880022e 	bgeu	r19,r2,4013dbc <__sfvwrite_r+0x3ec>
 4013db4:	1027883a 	mov	r19,r2
 4013db8:	100d883a 	mov	r6,r2
 4013dbc:	18c1000c 	andi	r3,r3,1024
 4013dc0:	18001c26 	beq	r3,zero,4013e34 <__sfvwrite_r+0x464>
 4013dc4:	300b883a 	mov	r5,r6
 4013dc8:	a809883a 	mov	r4,r21
 4013dcc:	400bee00 	call	400bee0 <_malloc_r>
 4013dd0:	102f883a 	mov	r23,r2
 4013dd4:	10002926 	beq	r2,zero,4013e7c <__sfvwrite_r+0x4ac>
 4013dd8:	81400417 	ldw	r5,16(r16)
 4013ddc:	b00d883a 	mov	r6,r22
 4013de0:	1009883a 	mov	r4,r2
 4013de4:	400c7680 	call	400c768 <memcpy>
 4013de8:	8080030b 	ldhu	r2,12(r16)
 4013dec:	00fedfc4 	movi	r3,-1153
 4013df0:	10c4703a 	and	r2,r2,r3
 4013df4:	10802014 	ori	r2,r2,128
 4013df8:	8080030d 	sth	r2,12(r16)
 4013dfc:	bd89883a 	add	r4,r23,r22
 4013e00:	9d8fc83a 	sub	r7,r19,r22
 4013e04:	85c00415 	stw	r23,16(r16)
 4013e08:	84c00515 	stw	r19,20(r16)
 4013e0c:	81000015 	stw	r4,0(r16)
 4013e10:	9027883a 	mov	r19,r18
 4013e14:	81c00215 	stw	r7,8(r16)
 4013e18:	902f883a 	mov	r23,r18
 4013e1c:	003f3b06 	br	4013b0c <__alt_data_end+0xfc013b0c>
 4013e20:	800b883a 	mov	r5,r16
 4013e24:	a809883a 	mov	r4,r21
 4013e28:	40131700 	call	4013170 <_fflush_r>
 4013e2c:	103fb926 	beq	r2,zero,4013d14 <__alt_data_end+0xfc013d14>
 4013e30:	003f6506 	br	4013bc8 <__alt_data_end+0xfc013bc8>
 4013e34:	a809883a 	mov	r4,r21
 4013e38:	40156500 	call	4015650 <_realloc_r>
 4013e3c:	102f883a 	mov	r23,r2
 4013e40:	103fee1e 	bne	r2,zero,4013dfc <__alt_data_end+0xfc013dfc>
 4013e44:	81400417 	ldw	r5,16(r16)
 4013e48:	a809883a 	mov	r4,r21
 4013e4c:	40136c00 	call	40136c0 <_free_r>
 4013e50:	8080030b 	ldhu	r2,12(r16)
 4013e54:	00ffdfc4 	movi	r3,-129
 4013e58:	1884703a 	and	r2,r3,r2
 4013e5c:	00c00304 	movi	r3,12
 4013e60:	a8c00015 	stw	r3,0(r21)
 4013e64:	003f5906 	br	4013bcc <__alt_data_end+0xfc013bcc>
 4013e68:	94c00044 	addi	r19,r18,1
 4013e6c:	02000044 	movi	r8,1
 4013e70:	003f6006 	br	4013bf4 <__alt_data_end+0xfc013bf4>
 4013e74:	00bfffc4 	movi	r2,-1
 4013e78:	003f0306 	br	4013a88 <__alt_data_end+0xfc013a88>
 4013e7c:	00800304 	movi	r2,12
 4013e80:	a8800015 	stw	r2,0(r21)
 4013e84:	8080030b 	ldhu	r2,12(r16)
 4013e88:	003f5006 	br	4013bcc <__alt_data_end+0xfc013bcc>

04013e8c <_fwalk>:
 4013e8c:	defff704 	addi	sp,sp,-36
 4013e90:	dd000415 	stw	r20,16(sp)
 4013e94:	dfc00815 	stw	ra,32(sp)
 4013e98:	ddc00715 	stw	r23,28(sp)
 4013e9c:	dd800615 	stw	r22,24(sp)
 4013ea0:	dd400515 	stw	r21,20(sp)
 4013ea4:	dcc00315 	stw	r19,12(sp)
 4013ea8:	dc800215 	stw	r18,8(sp)
 4013eac:	dc400115 	stw	r17,4(sp)
 4013eb0:	dc000015 	stw	r16,0(sp)
 4013eb4:	2500b804 	addi	r20,r4,736
 4013eb8:	a0002326 	beq	r20,zero,4013f48 <_fwalk+0xbc>
 4013ebc:	282b883a 	mov	r21,r5
 4013ec0:	002f883a 	mov	r23,zero
 4013ec4:	05800044 	movi	r22,1
 4013ec8:	04ffffc4 	movi	r19,-1
 4013ecc:	a4400117 	ldw	r17,4(r20)
 4013ed0:	a4800217 	ldw	r18,8(r20)
 4013ed4:	8c7fffc4 	addi	r17,r17,-1
 4013ed8:	88000d16 	blt	r17,zero,4013f10 <_fwalk+0x84>
 4013edc:	94000304 	addi	r16,r18,12
 4013ee0:	94800384 	addi	r18,r18,14
 4013ee4:	8080000b 	ldhu	r2,0(r16)
 4013ee8:	8c7fffc4 	addi	r17,r17,-1
 4013eec:	813ffd04 	addi	r4,r16,-12
 4013ef0:	b080042e 	bgeu	r22,r2,4013f04 <_fwalk+0x78>
 4013ef4:	9080000f 	ldh	r2,0(r18)
 4013ef8:	14c00226 	beq	r2,r19,4013f04 <_fwalk+0x78>
 4013efc:	a83ee83a 	callr	r21
 4013f00:	b8aeb03a 	or	r23,r23,r2
 4013f04:	84001a04 	addi	r16,r16,104
 4013f08:	94801a04 	addi	r18,r18,104
 4013f0c:	8cfff51e 	bne	r17,r19,4013ee4 <__alt_data_end+0xfc013ee4>
 4013f10:	a5000017 	ldw	r20,0(r20)
 4013f14:	a03fed1e 	bne	r20,zero,4013ecc <__alt_data_end+0xfc013ecc>
 4013f18:	b805883a 	mov	r2,r23
 4013f1c:	dfc00817 	ldw	ra,32(sp)
 4013f20:	ddc00717 	ldw	r23,28(sp)
 4013f24:	dd800617 	ldw	r22,24(sp)
 4013f28:	dd400517 	ldw	r21,20(sp)
 4013f2c:	dd000417 	ldw	r20,16(sp)
 4013f30:	dcc00317 	ldw	r19,12(sp)
 4013f34:	dc800217 	ldw	r18,8(sp)
 4013f38:	dc400117 	ldw	r17,4(sp)
 4013f3c:	dc000017 	ldw	r16,0(sp)
 4013f40:	dec00904 	addi	sp,sp,36
 4013f44:	f800283a 	ret
 4013f48:	002f883a 	mov	r23,zero
 4013f4c:	003ff206 	br	4013f18 <__alt_data_end+0xfc013f18>

04013f50 <_fwalk_reent>:
 4013f50:	defff704 	addi	sp,sp,-36
 4013f54:	dd000415 	stw	r20,16(sp)
 4013f58:	dfc00815 	stw	ra,32(sp)
 4013f5c:	ddc00715 	stw	r23,28(sp)
 4013f60:	dd800615 	stw	r22,24(sp)
 4013f64:	dd400515 	stw	r21,20(sp)
 4013f68:	dcc00315 	stw	r19,12(sp)
 4013f6c:	dc800215 	stw	r18,8(sp)
 4013f70:	dc400115 	stw	r17,4(sp)
 4013f74:	dc000015 	stw	r16,0(sp)
 4013f78:	2500b804 	addi	r20,r4,736
 4013f7c:	a0002326 	beq	r20,zero,401400c <_fwalk_reent+0xbc>
 4013f80:	282b883a 	mov	r21,r5
 4013f84:	2027883a 	mov	r19,r4
 4013f88:	002f883a 	mov	r23,zero
 4013f8c:	05800044 	movi	r22,1
 4013f90:	04bfffc4 	movi	r18,-1
 4013f94:	a4400117 	ldw	r17,4(r20)
 4013f98:	a4000217 	ldw	r16,8(r20)
 4013f9c:	8c7fffc4 	addi	r17,r17,-1
 4013fa0:	88000c16 	blt	r17,zero,4013fd4 <_fwalk_reent+0x84>
 4013fa4:	84000304 	addi	r16,r16,12
 4013fa8:	8080000b 	ldhu	r2,0(r16)
 4013fac:	8c7fffc4 	addi	r17,r17,-1
 4013fb0:	817ffd04 	addi	r5,r16,-12
 4013fb4:	b080052e 	bgeu	r22,r2,4013fcc <_fwalk_reent+0x7c>
 4013fb8:	8080008f 	ldh	r2,2(r16)
 4013fbc:	9809883a 	mov	r4,r19
 4013fc0:	14800226 	beq	r2,r18,4013fcc <_fwalk_reent+0x7c>
 4013fc4:	a83ee83a 	callr	r21
 4013fc8:	b8aeb03a 	or	r23,r23,r2
 4013fcc:	84001a04 	addi	r16,r16,104
 4013fd0:	8cbff51e 	bne	r17,r18,4013fa8 <__alt_data_end+0xfc013fa8>
 4013fd4:	a5000017 	ldw	r20,0(r20)
 4013fd8:	a03fee1e 	bne	r20,zero,4013f94 <__alt_data_end+0xfc013f94>
 4013fdc:	b805883a 	mov	r2,r23
 4013fe0:	dfc00817 	ldw	ra,32(sp)
 4013fe4:	ddc00717 	ldw	r23,28(sp)
 4013fe8:	dd800617 	ldw	r22,24(sp)
 4013fec:	dd400517 	ldw	r21,20(sp)
 4013ff0:	dd000417 	ldw	r20,16(sp)
 4013ff4:	dcc00317 	ldw	r19,12(sp)
 4013ff8:	dc800217 	ldw	r18,8(sp)
 4013ffc:	dc400117 	ldw	r17,4(sp)
 4014000:	dc000017 	ldw	r16,0(sp)
 4014004:	dec00904 	addi	sp,sp,36
 4014008:	f800283a 	ret
 401400c:	002f883a 	mov	r23,zero
 4014010:	003ff206 	br	4013fdc <__alt_data_end+0xfc013fdc>

04014014 <_setlocale_r>:
 4014014:	30001b26 	beq	r6,zero,4014084 <_setlocale_r+0x70>
 4014018:	014100b4 	movhi	r5,1026
 401401c:	defffe04 	addi	sp,sp,-8
 4014020:	297fe004 	addi	r5,r5,-128
 4014024:	3009883a 	mov	r4,r6
 4014028:	dc000015 	stw	r16,0(sp)
 401402c:	dfc00115 	stw	ra,4(sp)
 4014030:	3021883a 	mov	r16,r6
 4014034:	400cf540 	call	400cf54 <strcmp>
 4014038:	1000061e 	bne	r2,zero,4014054 <_setlocale_r+0x40>
 401403c:	008100b4 	movhi	r2,1026
 4014040:	10bfb904 	addi	r2,r2,-284
 4014044:	dfc00117 	ldw	ra,4(sp)
 4014048:	dc000017 	ldw	r16,0(sp)
 401404c:	dec00204 	addi	sp,sp,8
 4014050:	f800283a 	ret
 4014054:	014100b4 	movhi	r5,1026
 4014058:	297fb904 	addi	r5,r5,-284
 401405c:	8009883a 	mov	r4,r16
 4014060:	400cf540 	call	400cf54 <strcmp>
 4014064:	103ff526 	beq	r2,zero,401403c <__alt_data_end+0xfc01403c>
 4014068:	014100b4 	movhi	r5,1026
 401406c:	297fc304 	addi	r5,r5,-244
 4014070:	8009883a 	mov	r4,r16
 4014074:	400cf540 	call	400cf54 <strcmp>
 4014078:	103ff026 	beq	r2,zero,401403c <__alt_data_end+0xfc01403c>
 401407c:	0005883a 	mov	r2,zero
 4014080:	003ff006 	br	4014044 <__alt_data_end+0xfc014044>
 4014084:	008100b4 	movhi	r2,1026
 4014088:	10bfb904 	addi	r2,r2,-284
 401408c:	f800283a 	ret

04014090 <__locale_charset>:
 4014090:	008100f4 	movhi	r2,1027
 4014094:	10ae6804 	addi	r2,r2,-18016
 4014098:	f800283a 	ret

0401409c <__locale_mb_cur_max>:
 401409c:	008100f4 	movhi	r2,1027
 40140a0:	10b32004 	addi	r2,r2,-13184
 40140a4:	10800017 	ldw	r2,0(r2)
 40140a8:	f800283a 	ret

040140ac <__locale_msgcharset>:
 40140ac:	008100f4 	movhi	r2,1027
 40140b0:	10ae6004 	addi	r2,r2,-18048
 40140b4:	f800283a 	ret

040140b8 <__locale_cjk_lang>:
 40140b8:	0005883a 	mov	r2,zero
 40140bc:	f800283a 	ret

040140c0 <_localeconv_r>:
 40140c0:	008100f4 	movhi	r2,1027
 40140c4:	10ae7004 	addi	r2,r2,-17984
 40140c8:	f800283a 	ret

040140cc <setlocale>:
 40140cc:	008100f4 	movhi	r2,1027
 40140d0:	10b31d04 	addi	r2,r2,-13196
 40140d4:	280d883a 	mov	r6,r5
 40140d8:	200b883a 	mov	r5,r4
 40140dc:	11000017 	ldw	r4,0(r2)
 40140e0:	40140141 	jmpi	4014014 <_setlocale_r>

040140e4 <localeconv>:
 40140e4:	008100f4 	movhi	r2,1027
 40140e8:	10ae7004 	addi	r2,r2,-17984
 40140ec:	f800283a 	ret

040140f0 <__smakebuf_r>:
 40140f0:	2880030b 	ldhu	r2,12(r5)
 40140f4:	10c0008c 	andi	r3,r2,2
 40140f8:	1800411e 	bne	r3,zero,4014200 <__smakebuf_r+0x110>
 40140fc:	deffec04 	addi	sp,sp,-80
 4014100:	dc000f15 	stw	r16,60(sp)
 4014104:	2821883a 	mov	r16,r5
 4014108:	2940038f 	ldh	r5,14(r5)
 401410c:	dc401015 	stw	r17,64(sp)
 4014110:	dfc01315 	stw	ra,76(sp)
 4014114:	dcc01215 	stw	r19,72(sp)
 4014118:	dc801115 	stw	r18,68(sp)
 401411c:	2023883a 	mov	r17,r4
 4014120:	28001c16 	blt	r5,zero,4014194 <__smakebuf_r+0xa4>
 4014124:	d80d883a 	mov	r6,sp
 4014128:	4018d940 	call	4018d94 <_fstat_r>
 401412c:	10001816 	blt	r2,zero,4014190 <__smakebuf_r+0xa0>
 4014130:	d8800117 	ldw	r2,4(sp)
 4014134:	00e00014 	movui	r3,32768
 4014138:	10bc000c 	andi	r2,r2,61440
 401413c:	14c80020 	cmpeqi	r19,r2,8192
 4014140:	10c03726 	beq	r2,r3,4014220 <__smakebuf_r+0x130>
 4014144:	80c0030b 	ldhu	r3,12(r16)
 4014148:	18c20014 	ori	r3,r3,2048
 401414c:	80c0030d 	sth	r3,12(r16)
 4014150:	00c80004 	movi	r3,8192
 4014154:	10c0521e 	bne	r2,r3,40142a0 <__smakebuf_r+0x1b0>
 4014158:	8140038f 	ldh	r5,14(r16)
 401415c:	8809883a 	mov	r4,r17
 4014160:	4018df00 	call	4018df0 <_isatty_r>
 4014164:	10004c26 	beq	r2,zero,4014298 <__smakebuf_r+0x1a8>
 4014168:	8080030b 	ldhu	r2,12(r16)
 401416c:	80c010c4 	addi	r3,r16,67
 4014170:	80c00015 	stw	r3,0(r16)
 4014174:	10800054 	ori	r2,r2,1
 4014178:	8080030d 	sth	r2,12(r16)
 401417c:	00800044 	movi	r2,1
 4014180:	80c00415 	stw	r3,16(r16)
 4014184:	80800515 	stw	r2,20(r16)
 4014188:	04810004 	movi	r18,1024
 401418c:	00000706 	br	40141ac <__smakebuf_r+0xbc>
 4014190:	8080030b 	ldhu	r2,12(r16)
 4014194:	10c0200c 	andi	r3,r2,128
 4014198:	18001f1e 	bne	r3,zero,4014218 <__smakebuf_r+0x128>
 401419c:	04810004 	movi	r18,1024
 40141a0:	10820014 	ori	r2,r2,2048
 40141a4:	8080030d 	sth	r2,12(r16)
 40141a8:	0027883a 	mov	r19,zero
 40141ac:	900b883a 	mov	r5,r18
 40141b0:	8809883a 	mov	r4,r17
 40141b4:	400bee00 	call	400bee0 <_malloc_r>
 40141b8:	10002c26 	beq	r2,zero,401426c <__smakebuf_r+0x17c>
 40141bc:	80c0030b 	ldhu	r3,12(r16)
 40141c0:	01010074 	movhi	r4,1025
 40141c4:	210c8104 	addi	r4,r4,12804
 40141c8:	89000f15 	stw	r4,60(r17)
 40141cc:	18c02014 	ori	r3,r3,128
 40141d0:	80c0030d 	sth	r3,12(r16)
 40141d4:	80800015 	stw	r2,0(r16)
 40141d8:	80800415 	stw	r2,16(r16)
 40141dc:	84800515 	stw	r18,20(r16)
 40141e0:	98001a1e 	bne	r19,zero,401424c <__smakebuf_r+0x15c>
 40141e4:	dfc01317 	ldw	ra,76(sp)
 40141e8:	dcc01217 	ldw	r19,72(sp)
 40141ec:	dc801117 	ldw	r18,68(sp)
 40141f0:	dc401017 	ldw	r17,64(sp)
 40141f4:	dc000f17 	ldw	r16,60(sp)
 40141f8:	dec01404 	addi	sp,sp,80
 40141fc:	f800283a 	ret
 4014200:	288010c4 	addi	r2,r5,67
 4014204:	28800015 	stw	r2,0(r5)
 4014208:	28800415 	stw	r2,16(r5)
 401420c:	00800044 	movi	r2,1
 4014210:	28800515 	stw	r2,20(r5)
 4014214:	f800283a 	ret
 4014218:	04801004 	movi	r18,64
 401421c:	003fe006 	br	40141a0 <__alt_data_end+0xfc0141a0>
 4014220:	81000a17 	ldw	r4,40(r16)
 4014224:	00c10074 	movhi	r3,1025
 4014228:	18d74004 	addi	r3,r3,23808
 401422c:	20ffc51e 	bne	r4,r3,4014144 <__alt_data_end+0xfc014144>
 4014230:	8080030b 	ldhu	r2,12(r16)
 4014234:	04810004 	movi	r18,1024
 4014238:	84801315 	stw	r18,76(r16)
 401423c:	1484b03a 	or	r2,r2,r18
 4014240:	8080030d 	sth	r2,12(r16)
 4014244:	0027883a 	mov	r19,zero
 4014248:	003fd806 	br	40141ac <__alt_data_end+0xfc0141ac>
 401424c:	8140038f 	ldh	r5,14(r16)
 4014250:	8809883a 	mov	r4,r17
 4014254:	4018df00 	call	4018df0 <_isatty_r>
 4014258:	103fe226 	beq	r2,zero,40141e4 <__alt_data_end+0xfc0141e4>
 401425c:	8080030b 	ldhu	r2,12(r16)
 4014260:	10800054 	ori	r2,r2,1
 4014264:	8080030d 	sth	r2,12(r16)
 4014268:	003fde06 	br	40141e4 <__alt_data_end+0xfc0141e4>
 401426c:	8080030b 	ldhu	r2,12(r16)
 4014270:	10c0800c 	andi	r3,r2,512
 4014274:	183fdb1e 	bne	r3,zero,40141e4 <__alt_data_end+0xfc0141e4>
 4014278:	10800094 	ori	r2,r2,2
 401427c:	80c010c4 	addi	r3,r16,67
 4014280:	8080030d 	sth	r2,12(r16)
 4014284:	00800044 	movi	r2,1
 4014288:	80c00015 	stw	r3,0(r16)
 401428c:	80c00415 	stw	r3,16(r16)
 4014290:	80800515 	stw	r2,20(r16)
 4014294:	003fd306 	br	40141e4 <__alt_data_end+0xfc0141e4>
 4014298:	04810004 	movi	r18,1024
 401429c:	003fc306 	br	40141ac <__alt_data_end+0xfc0141ac>
 40142a0:	0027883a 	mov	r19,zero
 40142a4:	04810004 	movi	r18,1024
 40142a8:	003fc006 	br	40141ac <__alt_data_end+0xfc0141ac>

040142ac <memchr>:
 40142ac:	208000cc 	andi	r2,r4,3
 40142b0:	280f883a 	mov	r7,r5
 40142b4:	10003426 	beq	r2,zero,4014388 <memchr+0xdc>
 40142b8:	30bfffc4 	addi	r2,r6,-1
 40142bc:	30001a26 	beq	r6,zero,4014328 <memchr+0x7c>
 40142c0:	20c00003 	ldbu	r3,0(r4)
 40142c4:	29803fcc 	andi	r6,r5,255
 40142c8:	30c0051e 	bne	r6,r3,40142e0 <memchr+0x34>
 40142cc:	00001806 	br	4014330 <memchr+0x84>
 40142d0:	10001526 	beq	r2,zero,4014328 <memchr+0x7c>
 40142d4:	20c00003 	ldbu	r3,0(r4)
 40142d8:	10bfffc4 	addi	r2,r2,-1
 40142dc:	30c01426 	beq	r6,r3,4014330 <memchr+0x84>
 40142e0:	21000044 	addi	r4,r4,1
 40142e4:	20c000cc 	andi	r3,r4,3
 40142e8:	183ff91e 	bne	r3,zero,40142d0 <__alt_data_end+0xfc0142d0>
 40142ec:	020000c4 	movi	r8,3
 40142f0:	40801136 	bltu	r8,r2,4014338 <memchr+0x8c>
 40142f4:	10000c26 	beq	r2,zero,4014328 <memchr+0x7c>
 40142f8:	20c00003 	ldbu	r3,0(r4)
 40142fc:	29403fcc 	andi	r5,r5,255
 4014300:	28c00b26 	beq	r5,r3,4014330 <memchr+0x84>
 4014304:	20c00044 	addi	r3,r4,1
 4014308:	39803fcc 	andi	r6,r7,255
 401430c:	2089883a 	add	r4,r4,r2
 4014310:	00000306 	br	4014320 <memchr+0x74>
 4014314:	18c00044 	addi	r3,r3,1
 4014318:	197fffc3 	ldbu	r5,-1(r3)
 401431c:	31400526 	beq	r6,r5,4014334 <memchr+0x88>
 4014320:	1805883a 	mov	r2,r3
 4014324:	20fffb1e 	bne	r4,r3,4014314 <__alt_data_end+0xfc014314>
 4014328:	0005883a 	mov	r2,zero
 401432c:	f800283a 	ret
 4014330:	2005883a 	mov	r2,r4
 4014334:	f800283a 	ret
 4014338:	28c03fcc 	andi	r3,r5,255
 401433c:	1812923a 	slli	r9,r3,8
 4014340:	02ffbff4 	movhi	r11,65279
 4014344:	02a02074 	movhi	r10,32897
 4014348:	48d2b03a 	or	r9,r9,r3
 401434c:	4806943a 	slli	r3,r9,16
 4014350:	5affbfc4 	addi	r11,r11,-257
 4014354:	52a02004 	addi	r10,r10,-32640
 4014358:	48d2b03a 	or	r9,r9,r3
 401435c:	20c00017 	ldw	r3,0(r4)
 4014360:	48c6f03a 	xor	r3,r9,r3
 4014364:	1acd883a 	add	r6,r3,r11
 4014368:	00c6303a 	nor	r3,zero,r3
 401436c:	30c6703a 	and	r3,r6,r3
 4014370:	1a86703a 	and	r3,r3,r10
 4014374:	183fe01e 	bne	r3,zero,40142f8 <__alt_data_end+0xfc0142f8>
 4014378:	10bfff04 	addi	r2,r2,-4
 401437c:	21000104 	addi	r4,r4,4
 4014380:	40bff636 	bltu	r8,r2,401435c <__alt_data_end+0xfc01435c>
 4014384:	003fdb06 	br	40142f4 <__alt_data_end+0xfc0142f4>
 4014388:	3005883a 	mov	r2,r6
 401438c:	003fd706 	br	40142ec <__alt_data_end+0xfc0142ec>

04014390 <memmove>:
 4014390:	2005883a 	mov	r2,r4
 4014394:	29000b2e 	bgeu	r5,r4,40143c4 <memmove+0x34>
 4014398:	298f883a 	add	r7,r5,r6
 401439c:	21c0092e 	bgeu	r4,r7,40143c4 <memmove+0x34>
 40143a0:	2187883a 	add	r3,r4,r6
 40143a4:	198bc83a 	sub	r5,r3,r6
 40143a8:	30004826 	beq	r6,zero,40144cc <memmove+0x13c>
 40143ac:	39ffffc4 	addi	r7,r7,-1
 40143b0:	39000003 	ldbu	r4,0(r7)
 40143b4:	18ffffc4 	addi	r3,r3,-1
 40143b8:	19000005 	stb	r4,0(r3)
 40143bc:	28fffb1e 	bne	r5,r3,40143ac <__alt_data_end+0xfc0143ac>
 40143c0:	f800283a 	ret
 40143c4:	00c003c4 	movi	r3,15
 40143c8:	1980412e 	bgeu	r3,r6,40144d0 <memmove+0x140>
 40143cc:	2886b03a 	or	r3,r5,r2
 40143d0:	18c000cc 	andi	r3,r3,3
 40143d4:	1800401e 	bne	r3,zero,40144d8 <memmove+0x148>
 40143d8:	33fffc04 	addi	r15,r6,-16
 40143dc:	781ed13a 	srli	r15,r15,4
 40143e0:	28c00104 	addi	r3,r5,4
 40143e4:	13400104 	addi	r13,r2,4
 40143e8:	781c913a 	slli	r14,r15,4
 40143ec:	2b000204 	addi	r12,r5,8
 40143f0:	12c00204 	addi	r11,r2,8
 40143f4:	73800504 	addi	r14,r14,20
 40143f8:	2a800304 	addi	r10,r5,12
 40143fc:	12400304 	addi	r9,r2,12
 4014400:	2b9d883a 	add	r14,r5,r14
 4014404:	2811883a 	mov	r8,r5
 4014408:	100f883a 	mov	r7,r2
 401440c:	41000017 	ldw	r4,0(r8)
 4014410:	39c00404 	addi	r7,r7,16
 4014414:	18c00404 	addi	r3,r3,16
 4014418:	393ffc15 	stw	r4,-16(r7)
 401441c:	193ffc17 	ldw	r4,-16(r3)
 4014420:	6b400404 	addi	r13,r13,16
 4014424:	5ac00404 	addi	r11,r11,16
 4014428:	693ffc15 	stw	r4,-16(r13)
 401442c:	61000017 	ldw	r4,0(r12)
 4014430:	4a400404 	addi	r9,r9,16
 4014434:	42000404 	addi	r8,r8,16
 4014438:	593ffc15 	stw	r4,-16(r11)
 401443c:	51000017 	ldw	r4,0(r10)
 4014440:	63000404 	addi	r12,r12,16
 4014444:	52800404 	addi	r10,r10,16
 4014448:	493ffc15 	stw	r4,-16(r9)
 401444c:	1bbfef1e 	bne	r3,r14,401440c <__alt_data_end+0xfc01440c>
 4014450:	79000044 	addi	r4,r15,1
 4014454:	2008913a 	slli	r4,r4,4
 4014458:	328003cc 	andi	r10,r6,15
 401445c:	02c000c4 	movi	r11,3
 4014460:	1107883a 	add	r3,r2,r4
 4014464:	290b883a 	add	r5,r5,r4
 4014468:	5a801e2e 	bgeu	r11,r10,40144e4 <memmove+0x154>
 401446c:	1813883a 	mov	r9,r3
 4014470:	2811883a 	mov	r8,r5
 4014474:	500f883a 	mov	r7,r10
 4014478:	41000017 	ldw	r4,0(r8)
 401447c:	4a400104 	addi	r9,r9,4
 4014480:	39ffff04 	addi	r7,r7,-4
 4014484:	493fff15 	stw	r4,-4(r9)
 4014488:	42000104 	addi	r8,r8,4
 401448c:	59fffa36 	bltu	r11,r7,4014478 <__alt_data_end+0xfc014478>
 4014490:	513fff04 	addi	r4,r10,-4
 4014494:	2008d0ba 	srli	r4,r4,2
 4014498:	318000cc 	andi	r6,r6,3
 401449c:	21000044 	addi	r4,r4,1
 40144a0:	2109883a 	add	r4,r4,r4
 40144a4:	2109883a 	add	r4,r4,r4
 40144a8:	1907883a 	add	r3,r3,r4
 40144ac:	290b883a 	add	r5,r5,r4
 40144b0:	30000b26 	beq	r6,zero,40144e0 <memmove+0x150>
 40144b4:	198d883a 	add	r6,r3,r6
 40144b8:	29c00003 	ldbu	r7,0(r5)
 40144bc:	18c00044 	addi	r3,r3,1
 40144c0:	29400044 	addi	r5,r5,1
 40144c4:	19ffffc5 	stb	r7,-1(r3)
 40144c8:	19bffb1e 	bne	r3,r6,40144b8 <__alt_data_end+0xfc0144b8>
 40144cc:	f800283a 	ret
 40144d0:	1007883a 	mov	r3,r2
 40144d4:	003ff606 	br	40144b0 <__alt_data_end+0xfc0144b0>
 40144d8:	1007883a 	mov	r3,r2
 40144dc:	003ff506 	br	40144b4 <__alt_data_end+0xfc0144b4>
 40144e0:	f800283a 	ret
 40144e4:	500d883a 	mov	r6,r10
 40144e8:	003ff106 	br	40144b0 <__alt_data_end+0xfc0144b0>

040144ec <_Balloc>:
 40144ec:	20801317 	ldw	r2,76(r4)
 40144f0:	defffc04 	addi	sp,sp,-16
 40144f4:	dc400115 	stw	r17,4(sp)
 40144f8:	dc000015 	stw	r16,0(sp)
 40144fc:	dfc00315 	stw	ra,12(sp)
 4014500:	dc800215 	stw	r18,8(sp)
 4014504:	2023883a 	mov	r17,r4
 4014508:	2821883a 	mov	r16,r5
 401450c:	10000f26 	beq	r2,zero,401454c <_Balloc+0x60>
 4014510:	8407883a 	add	r3,r16,r16
 4014514:	18c7883a 	add	r3,r3,r3
 4014518:	10c7883a 	add	r3,r2,r3
 401451c:	18800017 	ldw	r2,0(r3)
 4014520:	10001126 	beq	r2,zero,4014568 <_Balloc+0x7c>
 4014524:	11000017 	ldw	r4,0(r2)
 4014528:	19000015 	stw	r4,0(r3)
 401452c:	10000415 	stw	zero,16(r2)
 4014530:	10000315 	stw	zero,12(r2)
 4014534:	dfc00317 	ldw	ra,12(sp)
 4014538:	dc800217 	ldw	r18,8(sp)
 401453c:	dc400117 	ldw	r17,4(sp)
 4014540:	dc000017 	ldw	r16,0(sp)
 4014544:	dec00404 	addi	sp,sp,16
 4014548:	f800283a 	ret
 401454c:	01800844 	movi	r6,33
 4014550:	01400104 	movi	r5,4
 4014554:	40189c40 	call	40189c4 <_calloc_r>
 4014558:	88801315 	stw	r2,76(r17)
 401455c:	103fec1e 	bne	r2,zero,4014510 <__alt_data_end+0xfc014510>
 4014560:	0005883a 	mov	r2,zero
 4014564:	003ff306 	br	4014534 <__alt_data_end+0xfc014534>
 4014568:	01400044 	movi	r5,1
 401456c:	2c24983a 	sll	r18,r5,r16
 4014570:	8809883a 	mov	r4,r17
 4014574:	91800144 	addi	r6,r18,5
 4014578:	318d883a 	add	r6,r6,r6
 401457c:	318d883a 	add	r6,r6,r6
 4014580:	40189c40 	call	40189c4 <_calloc_r>
 4014584:	103ff626 	beq	r2,zero,4014560 <__alt_data_end+0xfc014560>
 4014588:	14000115 	stw	r16,4(r2)
 401458c:	14800215 	stw	r18,8(r2)
 4014590:	003fe606 	br	401452c <__alt_data_end+0xfc01452c>

04014594 <_Bfree>:
 4014594:	28000826 	beq	r5,zero,40145b8 <_Bfree+0x24>
 4014598:	28c00117 	ldw	r3,4(r5)
 401459c:	20801317 	ldw	r2,76(r4)
 40145a0:	18c7883a 	add	r3,r3,r3
 40145a4:	18c7883a 	add	r3,r3,r3
 40145a8:	10c5883a 	add	r2,r2,r3
 40145ac:	10c00017 	ldw	r3,0(r2)
 40145b0:	28c00015 	stw	r3,0(r5)
 40145b4:	11400015 	stw	r5,0(r2)
 40145b8:	f800283a 	ret

040145bc <__multadd>:
 40145bc:	defffa04 	addi	sp,sp,-24
 40145c0:	dc800315 	stw	r18,12(sp)
 40145c4:	dc400215 	stw	r17,8(sp)
 40145c8:	dc000115 	stw	r16,4(sp)
 40145cc:	2823883a 	mov	r17,r5
 40145d0:	2c000417 	ldw	r16,16(r5)
 40145d4:	dfc00515 	stw	ra,20(sp)
 40145d8:	dcc00415 	stw	r19,16(sp)
 40145dc:	2025883a 	mov	r18,r4
 40145e0:	29400504 	addi	r5,r5,20
 40145e4:	0011883a 	mov	r8,zero
 40145e8:	28c00017 	ldw	r3,0(r5)
 40145ec:	29400104 	addi	r5,r5,4
 40145f0:	42000044 	addi	r8,r8,1
 40145f4:	18bfffcc 	andi	r2,r3,65535
 40145f8:	1185383a 	mul	r2,r2,r6
 40145fc:	1806d43a 	srli	r3,r3,16
 4014600:	11cf883a 	add	r7,r2,r7
 4014604:	3808d43a 	srli	r4,r7,16
 4014608:	1987383a 	mul	r3,r3,r6
 401460c:	38bfffcc 	andi	r2,r7,65535
 4014610:	1907883a 	add	r3,r3,r4
 4014614:	1808943a 	slli	r4,r3,16
 4014618:	180ed43a 	srli	r7,r3,16
 401461c:	2085883a 	add	r2,r4,r2
 4014620:	28bfff15 	stw	r2,-4(r5)
 4014624:	443ff016 	blt	r8,r16,40145e8 <__alt_data_end+0xfc0145e8>
 4014628:	38000926 	beq	r7,zero,4014650 <__multadd+0x94>
 401462c:	88800217 	ldw	r2,8(r17)
 4014630:	80800f0e 	bge	r16,r2,4014670 <__multadd+0xb4>
 4014634:	80800144 	addi	r2,r16,5
 4014638:	1085883a 	add	r2,r2,r2
 401463c:	1085883a 	add	r2,r2,r2
 4014640:	8885883a 	add	r2,r17,r2
 4014644:	11c00015 	stw	r7,0(r2)
 4014648:	84000044 	addi	r16,r16,1
 401464c:	8c000415 	stw	r16,16(r17)
 4014650:	8805883a 	mov	r2,r17
 4014654:	dfc00517 	ldw	ra,20(sp)
 4014658:	dcc00417 	ldw	r19,16(sp)
 401465c:	dc800317 	ldw	r18,12(sp)
 4014660:	dc400217 	ldw	r17,8(sp)
 4014664:	dc000117 	ldw	r16,4(sp)
 4014668:	dec00604 	addi	sp,sp,24
 401466c:	f800283a 	ret
 4014670:	89400117 	ldw	r5,4(r17)
 4014674:	9009883a 	mov	r4,r18
 4014678:	d9c00015 	stw	r7,0(sp)
 401467c:	29400044 	addi	r5,r5,1
 4014680:	40144ec0 	call	40144ec <_Balloc>
 4014684:	89800417 	ldw	r6,16(r17)
 4014688:	89400304 	addi	r5,r17,12
 401468c:	11000304 	addi	r4,r2,12
 4014690:	31800084 	addi	r6,r6,2
 4014694:	318d883a 	add	r6,r6,r6
 4014698:	318d883a 	add	r6,r6,r6
 401469c:	1027883a 	mov	r19,r2
 40146a0:	400c7680 	call	400c768 <memcpy>
 40146a4:	d9c00017 	ldw	r7,0(sp)
 40146a8:	88000a26 	beq	r17,zero,40146d4 <__multadd+0x118>
 40146ac:	88c00117 	ldw	r3,4(r17)
 40146b0:	90801317 	ldw	r2,76(r18)
 40146b4:	18c7883a 	add	r3,r3,r3
 40146b8:	18c7883a 	add	r3,r3,r3
 40146bc:	10c5883a 	add	r2,r2,r3
 40146c0:	10c00017 	ldw	r3,0(r2)
 40146c4:	88c00015 	stw	r3,0(r17)
 40146c8:	14400015 	stw	r17,0(r2)
 40146cc:	9823883a 	mov	r17,r19
 40146d0:	003fd806 	br	4014634 <__alt_data_end+0xfc014634>
 40146d4:	9823883a 	mov	r17,r19
 40146d8:	003fd606 	br	4014634 <__alt_data_end+0xfc014634>

040146dc <__s2b>:
 40146dc:	defff904 	addi	sp,sp,-28
 40146e0:	dc400115 	stw	r17,4(sp)
 40146e4:	dc000015 	stw	r16,0(sp)
 40146e8:	2023883a 	mov	r17,r4
 40146ec:	2821883a 	mov	r16,r5
 40146f0:	39000204 	addi	r4,r7,8
 40146f4:	01400244 	movi	r5,9
 40146f8:	dcc00315 	stw	r19,12(sp)
 40146fc:	dc800215 	stw	r18,8(sp)
 4014700:	dfc00615 	stw	ra,24(sp)
 4014704:	dd400515 	stw	r21,20(sp)
 4014708:	dd000415 	stw	r20,16(sp)
 401470c:	3825883a 	mov	r18,r7
 4014710:	3027883a 	mov	r19,r6
 4014714:	400b7800 	call	400b780 <__divsi3>
 4014718:	00c00044 	movi	r3,1
 401471c:	000b883a 	mov	r5,zero
 4014720:	1880030e 	bge	r3,r2,4014730 <__s2b+0x54>
 4014724:	18c7883a 	add	r3,r3,r3
 4014728:	29400044 	addi	r5,r5,1
 401472c:	18bffd16 	blt	r3,r2,4014724 <__alt_data_end+0xfc014724>
 4014730:	8809883a 	mov	r4,r17
 4014734:	40144ec0 	call	40144ec <_Balloc>
 4014738:	d8c00717 	ldw	r3,28(sp)
 401473c:	10c00515 	stw	r3,20(r2)
 4014740:	00c00044 	movi	r3,1
 4014744:	10c00415 	stw	r3,16(r2)
 4014748:	00c00244 	movi	r3,9
 401474c:	1cc0210e 	bge	r3,r19,40147d4 <__s2b+0xf8>
 4014750:	80eb883a 	add	r21,r16,r3
 4014754:	a829883a 	mov	r20,r21
 4014758:	84e1883a 	add	r16,r16,r19
 401475c:	a1c00007 	ldb	r7,0(r20)
 4014760:	01800284 	movi	r6,10
 4014764:	a5000044 	addi	r20,r20,1
 4014768:	100b883a 	mov	r5,r2
 401476c:	39fff404 	addi	r7,r7,-48
 4014770:	8809883a 	mov	r4,r17
 4014774:	40145bc0 	call	40145bc <__multadd>
 4014778:	a43ff81e 	bne	r20,r16,401475c <__alt_data_end+0xfc01475c>
 401477c:	ace1883a 	add	r16,r21,r19
 4014780:	843ffe04 	addi	r16,r16,-8
 4014784:	9c800a0e 	bge	r19,r18,40147b0 <__s2b+0xd4>
 4014788:	94e5c83a 	sub	r18,r18,r19
 401478c:	84a5883a 	add	r18,r16,r18
 4014790:	81c00007 	ldb	r7,0(r16)
 4014794:	01800284 	movi	r6,10
 4014798:	84000044 	addi	r16,r16,1
 401479c:	100b883a 	mov	r5,r2
 40147a0:	39fff404 	addi	r7,r7,-48
 40147a4:	8809883a 	mov	r4,r17
 40147a8:	40145bc0 	call	40145bc <__multadd>
 40147ac:	84bff81e 	bne	r16,r18,4014790 <__alt_data_end+0xfc014790>
 40147b0:	dfc00617 	ldw	ra,24(sp)
 40147b4:	dd400517 	ldw	r21,20(sp)
 40147b8:	dd000417 	ldw	r20,16(sp)
 40147bc:	dcc00317 	ldw	r19,12(sp)
 40147c0:	dc800217 	ldw	r18,8(sp)
 40147c4:	dc400117 	ldw	r17,4(sp)
 40147c8:	dc000017 	ldw	r16,0(sp)
 40147cc:	dec00704 	addi	sp,sp,28
 40147d0:	f800283a 	ret
 40147d4:	84000284 	addi	r16,r16,10
 40147d8:	1827883a 	mov	r19,r3
 40147dc:	003fe906 	br	4014784 <__alt_data_end+0xfc014784>

040147e0 <__hi0bits>:
 40147e0:	20bfffec 	andhi	r2,r4,65535
 40147e4:	1000141e 	bne	r2,zero,4014838 <__hi0bits+0x58>
 40147e8:	2008943a 	slli	r4,r4,16
 40147ec:	00800404 	movi	r2,16
 40147f0:	20ffc02c 	andhi	r3,r4,65280
 40147f4:	1800021e 	bne	r3,zero,4014800 <__hi0bits+0x20>
 40147f8:	2008923a 	slli	r4,r4,8
 40147fc:	10800204 	addi	r2,r2,8
 4014800:	20fc002c 	andhi	r3,r4,61440
 4014804:	1800021e 	bne	r3,zero,4014810 <__hi0bits+0x30>
 4014808:	2008913a 	slli	r4,r4,4
 401480c:	10800104 	addi	r2,r2,4
 4014810:	20f0002c 	andhi	r3,r4,49152
 4014814:	1800031e 	bne	r3,zero,4014824 <__hi0bits+0x44>
 4014818:	2109883a 	add	r4,r4,r4
 401481c:	10800084 	addi	r2,r2,2
 4014820:	2109883a 	add	r4,r4,r4
 4014824:	20000316 	blt	r4,zero,4014834 <__hi0bits+0x54>
 4014828:	2110002c 	andhi	r4,r4,16384
 401482c:	2000041e 	bne	r4,zero,4014840 <__hi0bits+0x60>
 4014830:	00800804 	movi	r2,32
 4014834:	f800283a 	ret
 4014838:	0005883a 	mov	r2,zero
 401483c:	003fec06 	br	40147f0 <__alt_data_end+0xfc0147f0>
 4014840:	10800044 	addi	r2,r2,1
 4014844:	f800283a 	ret

04014848 <__lo0bits>:
 4014848:	20c00017 	ldw	r3,0(r4)
 401484c:	188001cc 	andi	r2,r3,7
 4014850:	10000826 	beq	r2,zero,4014874 <__lo0bits+0x2c>
 4014854:	1880004c 	andi	r2,r3,1
 4014858:	1000211e 	bne	r2,zero,40148e0 <__lo0bits+0x98>
 401485c:	1880008c 	andi	r2,r3,2
 4014860:	1000211e 	bne	r2,zero,40148e8 <__lo0bits+0xa0>
 4014864:	1806d0ba 	srli	r3,r3,2
 4014868:	00800084 	movi	r2,2
 401486c:	20c00015 	stw	r3,0(r4)
 4014870:	f800283a 	ret
 4014874:	18bfffcc 	andi	r2,r3,65535
 4014878:	10001326 	beq	r2,zero,40148c8 <__lo0bits+0x80>
 401487c:	0005883a 	mov	r2,zero
 4014880:	19403fcc 	andi	r5,r3,255
 4014884:	2800021e 	bne	r5,zero,4014890 <__lo0bits+0x48>
 4014888:	1806d23a 	srli	r3,r3,8
 401488c:	10800204 	addi	r2,r2,8
 4014890:	194003cc 	andi	r5,r3,15
 4014894:	2800021e 	bne	r5,zero,40148a0 <__lo0bits+0x58>
 4014898:	1806d13a 	srli	r3,r3,4
 401489c:	10800104 	addi	r2,r2,4
 40148a0:	194000cc 	andi	r5,r3,3
 40148a4:	2800021e 	bne	r5,zero,40148b0 <__lo0bits+0x68>
 40148a8:	1806d0ba 	srli	r3,r3,2
 40148ac:	10800084 	addi	r2,r2,2
 40148b0:	1940004c 	andi	r5,r3,1
 40148b4:	2800081e 	bne	r5,zero,40148d8 <__lo0bits+0x90>
 40148b8:	1806d07a 	srli	r3,r3,1
 40148bc:	1800051e 	bne	r3,zero,40148d4 <__lo0bits+0x8c>
 40148c0:	00800804 	movi	r2,32
 40148c4:	f800283a 	ret
 40148c8:	1806d43a 	srli	r3,r3,16
 40148cc:	00800404 	movi	r2,16
 40148d0:	003feb06 	br	4014880 <__alt_data_end+0xfc014880>
 40148d4:	10800044 	addi	r2,r2,1
 40148d8:	20c00015 	stw	r3,0(r4)
 40148dc:	f800283a 	ret
 40148e0:	0005883a 	mov	r2,zero
 40148e4:	f800283a 	ret
 40148e8:	1806d07a 	srli	r3,r3,1
 40148ec:	00800044 	movi	r2,1
 40148f0:	20c00015 	stw	r3,0(r4)
 40148f4:	f800283a 	ret

040148f8 <__i2b>:
 40148f8:	defffd04 	addi	sp,sp,-12
 40148fc:	dc000015 	stw	r16,0(sp)
 4014900:	04000044 	movi	r16,1
 4014904:	dc400115 	stw	r17,4(sp)
 4014908:	2823883a 	mov	r17,r5
 401490c:	800b883a 	mov	r5,r16
 4014910:	dfc00215 	stw	ra,8(sp)
 4014914:	40144ec0 	call	40144ec <_Balloc>
 4014918:	14400515 	stw	r17,20(r2)
 401491c:	14000415 	stw	r16,16(r2)
 4014920:	dfc00217 	ldw	ra,8(sp)
 4014924:	dc400117 	ldw	r17,4(sp)
 4014928:	dc000017 	ldw	r16,0(sp)
 401492c:	dec00304 	addi	sp,sp,12
 4014930:	f800283a 	ret

04014934 <__multiply>:
 4014934:	defffa04 	addi	sp,sp,-24
 4014938:	dcc00315 	stw	r19,12(sp)
 401493c:	dc800215 	stw	r18,8(sp)
 4014940:	34c00417 	ldw	r19,16(r6)
 4014944:	2c800417 	ldw	r18,16(r5)
 4014948:	dd000415 	stw	r20,16(sp)
 401494c:	dc400115 	stw	r17,4(sp)
 4014950:	dfc00515 	stw	ra,20(sp)
 4014954:	dc000015 	stw	r16,0(sp)
 4014958:	2829883a 	mov	r20,r5
 401495c:	3023883a 	mov	r17,r6
 4014960:	94c0050e 	bge	r18,r19,4014978 <__multiply+0x44>
 4014964:	9007883a 	mov	r3,r18
 4014968:	3029883a 	mov	r20,r6
 401496c:	9825883a 	mov	r18,r19
 4014970:	2823883a 	mov	r17,r5
 4014974:	1827883a 	mov	r19,r3
 4014978:	a0800217 	ldw	r2,8(r20)
 401497c:	94e1883a 	add	r16,r18,r19
 4014980:	a1400117 	ldw	r5,4(r20)
 4014984:	1400010e 	bge	r2,r16,401498c <__multiply+0x58>
 4014988:	29400044 	addi	r5,r5,1
 401498c:	40144ec0 	call	40144ec <_Balloc>
 4014990:	8415883a 	add	r10,r16,r16
 4014994:	12c00504 	addi	r11,r2,20
 4014998:	5295883a 	add	r10,r10,r10
 401499c:	5a95883a 	add	r10,r11,r10
 40149a0:	5807883a 	mov	r3,r11
 40149a4:	5a80032e 	bgeu	r11,r10,40149b4 <__multiply+0x80>
 40149a8:	18000015 	stw	zero,0(r3)
 40149ac:	18c00104 	addi	r3,r3,4
 40149b0:	1abffd36 	bltu	r3,r10,40149a8 <__alt_data_end+0xfc0149a8>
 40149b4:	9ce7883a 	add	r19,r19,r19
 40149b8:	94a5883a 	add	r18,r18,r18
 40149bc:	89800504 	addi	r6,r17,20
 40149c0:	9ce7883a 	add	r19,r19,r19
 40149c4:	a3400504 	addi	r13,r20,20
 40149c8:	94a5883a 	add	r18,r18,r18
 40149cc:	34d9883a 	add	r12,r6,r19
 40149d0:	6c93883a 	add	r9,r13,r18
 40149d4:	3300422e 	bgeu	r6,r12,4014ae0 <__multiply+0x1ac>
 40149d8:	37c00017 	ldw	ra,0(r6)
 40149dc:	fbffffcc 	andi	r15,ra,65535
 40149e0:	78001b26 	beq	r15,zero,4014a50 <__multiply+0x11c>
 40149e4:	5811883a 	mov	r8,r11
 40149e8:	681d883a 	mov	r14,r13
 40149ec:	000f883a 	mov	r7,zero
 40149f0:	71000017 	ldw	r4,0(r14)
 40149f4:	40c00017 	ldw	r3,0(r8)
 40149f8:	73800104 	addi	r14,r14,4
 40149fc:	217fffcc 	andi	r5,r4,65535
 4014a00:	2bcb383a 	mul	r5,r5,r15
 4014a04:	2008d43a 	srli	r4,r4,16
 4014a08:	1c7fffcc 	andi	r17,r3,65535
 4014a0c:	2c4b883a 	add	r5,r5,r17
 4014a10:	29cb883a 	add	r5,r5,r7
 4014a14:	23c9383a 	mul	r4,r4,r15
 4014a18:	1806d43a 	srli	r3,r3,16
 4014a1c:	280ed43a 	srli	r7,r5,16
 4014a20:	297fffcc 	andi	r5,r5,65535
 4014a24:	20c7883a 	add	r3,r4,r3
 4014a28:	19c7883a 	add	r3,r3,r7
 4014a2c:	1808943a 	slli	r4,r3,16
 4014a30:	4023883a 	mov	r17,r8
 4014a34:	180ed43a 	srli	r7,r3,16
 4014a38:	214ab03a 	or	r5,r4,r5
 4014a3c:	41400015 	stw	r5,0(r8)
 4014a40:	42000104 	addi	r8,r8,4
 4014a44:	727fea36 	bltu	r14,r9,40149f0 <__alt_data_end+0xfc0149f0>
 4014a48:	89c00115 	stw	r7,4(r17)
 4014a4c:	37c00017 	ldw	ra,0(r6)
 4014a50:	f83ed43a 	srli	ra,ra,16
 4014a54:	f8001f26 	beq	ra,zero,4014ad4 <__multiply+0x1a0>
 4014a58:	58c00017 	ldw	r3,0(r11)
 4014a5c:	681d883a 	mov	r14,r13
 4014a60:	581f883a 	mov	r15,r11
 4014a64:	1811883a 	mov	r8,r3
 4014a68:	5825883a 	mov	r18,r11
 4014a6c:	000f883a 	mov	r7,zero
 4014a70:	00000106 	br	4014a78 <__multiply+0x144>
 4014a74:	8825883a 	mov	r18,r17
 4014a78:	7140000b 	ldhu	r5,0(r14)
 4014a7c:	4010d43a 	srli	r8,r8,16
 4014a80:	193fffcc 	andi	r4,r3,65535
 4014a84:	2fcb383a 	mul	r5,r5,ra
 4014a88:	7bc00104 	addi	r15,r15,4
 4014a8c:	73800104 	addi	r14,r14,4
 4014a90:	2a0b883a 	add	r5,r5,r8
 4014a94:	29cb883a 	add	r5,r5,r7
 4014a98:	2806943a 	slli	r3,r5,16
 4014a9c:	94400104 	addi	r17,r18,4
 4014aa0:	280ad43a 	srli	r5,r5,16
 4014aa4:	1908b03a 	or	r4,r3,r4
 4014aa8:	793fff15 	stw	r4,-4(r15)
 4014aac:	70ffff17 	ldw	r3,-4(r14)
 4014ab0:	8a000017 	ldw	r8,0(r17)
 4014ab4:	1806d43a 	srli	r3,r3,16
 4014ab8:	413fffcc 	andi	r4,r8,65535
 4014abc:	1fc7383a 	mul	r3,r3,ra
 4014ac0:	1907883a 	add	r3,r3,r4
 4014ac4:	1947883a 	add	r3,r3,r5
 4014ac8:	180ed43a 	srli	r7,r3,16
 4014acc:	727fe936 	bltu	r14,r9,4014a74 <__alt_data_end+0xfc014a74>
 4014ad0:	90c00115 	stw	r3,4(r18)
 4014ad4:	31800104 	addi	r6,r6,4
 4014ad8:	5ac00104 	addi	r11,r11,4
 4014adc:	333fbe36 	bltu	r6,r12,40149d8 <__alt_data_end+0xfc0149d8>
 4014ae0:	0400090e 	bge	zero,r16,4014b08 <__multiply+0x1d4>
 4014ae4:	50ffff17 	ldw	r3,-4(r10)
 4014ae8:	52bfff04 	addi	r10,r10,-4
 4014aec:	18000326 	beq	r3,zero,4014afc <__multiply+0x1c8>
 4014af0:	00000506 	br	4014b08 <__multiply+0x1d4>
 4014af4:	50c00017 	ldw	r3,0(r10)
 4014af8:	1800031e 	bne	r3,zero,4014b08 <__multiply+0x1d4>
 4014afc:	843fffc4 	addi	r16,r16,-1
 4014b00:	52bfff04 	addi	r10,r10,-4
 4014b04:	803ffb1e 	bne	r16,zero,4014af4 <__alt_data_end+0xfc014af4>
 4014b08:	14000415 	stw	r16,16(r2)
 4014b0c:	dfc00517 	ldw	ra,20(sp)
 4014b10:	dd000417 	ldw	r20,16(sp)
 4014b14:	dcc00317 	ldw	r19,12(sp)
 4014b18:	dc800217 	ldw	r18,8(sp)
 4014b1c:	dc400117 	ldw	r17,4(sp)
 4014b20:	dc000017 	ldw	r16,0(sp)
 4014b24:	dec00604 	addi	sp,sp,24
 4014b28:	f800283a 	ret

04014b2c <__pow5mult>:
 4014b2c:	defffa04 	addi	sp,sp,-24
 4014b30:	dcc00315 	stw	r19,12(sp)
 4014b34:	dc000015 	stw	r16,0(sp)
 4014b38:	dfc00515 	stw	ra,20(sp)
 4014b3c:	dd000415 	stw	r20,16(sp)
 4014b40:	dc800215 	stw	r18,8(sp)
 4014b44:	dc400115 	stw	r17,4(sp)
 4014b48:	308000cc 	andi	r2,r6,3
 4014b4c:	3021883a 	mov	r16,r6
 4014b50:	2027883a 	mov	r19,r4
 4014b54:	10002f1e 	bne	r2,zero,4014c14 <__pow5mult+0xe8>
 4014b58:	2825883a 	mov	r18,r5
 4014b5c:	8021d0ba 	srai	r16,r16,2
 4014b60:	80001a26 	beq	r16,zero,4014bcc <__pow5mult+0xa0>
 4014b64:	9c401217 	ldw	r17,72(r19)
 4014b68:	8800061e 	bne	r17,zero,4014b84 <__pow5mult+0x58>
 4014b6c:	00003406 	br	4014c40 <__pow5mult+0x114>
 4014b70:	8021d07a 	srai	r16,r16,1
 4014b74:	80001526 	beq	r16,zero,4014bcc <__pow5mult+0xa0>
 4014b78:	88800017 	ldw	r2,0(r17)
 4014b7c:	10001c26 	beq	r2,zero,4014bf0 <__pow5mult+0xc4>
 4014b80:	1023883a 	mov	r17,r2
 4014b84:	8080004c 	andi	r2,r16,1
 4014b88:	103ff926 	beq	r2,zero,4014b70 <__alt_data_end+0xfc014b70>
 4014b8c:	880d883a 	mov	r6,r17
 4014b90:	900b883a 	mov	r5,r18
 4014b94:	9809883a 	mov	r4,r19
 4014b98:	40149340 	call	4014934 <__multiply>
 4014b9c:	90001b26 	beq	r18,zero,4014c0c <__pow5mult+0xe0>
 4014ba0:	91000117 	ldw	r4,4(r18)
 4014ba4:	98c01317 	ldw	r3,76(r19)
 4014ba8:	8021d07a 	srai	r16,r16,1
 4014bac:	2109883a 	add	r4,r4,r4
 4014bb0:	2109883a 	add	r4,r4,r4
 4014bb4:	1907883a 	add	r3,r3,r4
 4014bb8:	19000017 	ldw	r4,0(r3)
 4014bbc:	91000015 	stw	r4,0(r18)
 4014bc0:	1c800015 	stw	r18,0(r3)
 4014bc4:	1025883a 	mov	r18,r2
 4014bc8:	803feb1e 	bne	r16,zero,4014b78 <__alt_data_end+0xfc014b78>
 4014bcc:	9005883a 	mov	r2,r18
 4014bd0:	dfc00517 	ldw	ra,20(sp)
 4014bd4:	dd000417 	ldw	r20,16(sp)
 4014bd8:	dcc00317 	ldw	r19,12(sp)
 4014bdc:	dc800217 	ldw	r18,8(sp)
 4014be0:	dc400117 	ldw	r17,4(sp)
 4014be4:	dc000017 	ldw	r16,0(sp)
 4014be8:	dec00604 	addi	sp,sp,24
 4014bec:	f800283a 	ret
 4014bf0:	880d883a 	mov	r6,r17
 4014bf4:	880b883a 	mov	r5,r17
 4014bf8:	9809883a 	mov	r4,r19
 4014bfc:	40149340 	call	4014934 <__multiply>
 4014c00:	88800015 	stw	r2,0(r17)
 4014c04:	10000015 	stw	zero,0(r2)
 4014c08:	003fdd06 	br	4014b80 <__alt_data_end+0xfc014b80>
 4014c0c:	1025883a 	mov	r18,r2
 4014c10:	003fd706 	br	4014b70 <__alt_data_end+0xfc014b70>
 4014c14:	10bfffc4 	addi	r2,r2,-1
 4014c18:	1085883a 	add	r2,r2,r2
 4014c1c:	00c100b4 	movhi	r3,1026
 4014c20:	18ffe304 	addi	r3,r3,-116
 4014c24:	1085883a 	add	r2,r2,r2
 4014c28:	1885883a 	add	r2,r3,r2
 4014c2c:	11800017 	ldw	r6,0(r2)
 4014c30:	000f883a 	mov	r7,zero
 4014c34:	40145bc0 	call	40145bc <__multadd>
 4014c38:	1025883a 	mov	r18,r2
 4014c3c:	003fc706 	br	4014b5c <__alt_data_end+0xfc014b5c>
 4014c40:	05000044 	movi	r20,1
 4014c44:	a00b883a 	mov	r5,r20
 4014c48:	9809883a 	mov	r4,r19
 4014c4c:	40144ec0 	call	40144ec <_Balloc>
 4014c50:	1023883a 	mov	r17,r2
 4014c54:	00809c44 	movi	r2,625
 4014c58:	88800515 	stw	r2,20(r17)
 4014c5c:	8d000415 	stw	r20,16(r17)
 4014c60:	9c401215 	stw	r17,72(r19)
 4014c64:	88000015 	stw	zero,0(r17)
 4014c68:	003fc606 	br	4014b84 <__alt_data_end+0xfc014b84>

04014c6c <__lshift>:
 4014c6c:	defff904 	addi	sp,sp,-28
 4014c70:	dd400515 	stw	r21,20(sp)
 4014c74:	dcc00315 	stw	r19,12(sp)
 4014c78:	302bd17a 	srai	r21,r6,5
 4014c7c:	2cc00417 	ldw	r19,16(r5)
 4014c80:	28800217 	ldw	r2,8(r5)
 4014c84:	dd000415 	stw	r20,16(sp)
 4014c88:	ace7883a 	add	r19,r21,r19
 4014c8c:	dc800215 	stw	r18,8(sp)
 4014c90:	dc400115 	stw	r17,4(sp)
 4014c94:	dc000015 	stw	r16,0(sp)
 4014c98:	dfc00615 	stw	ra,24(sp)
 4014c9c:	9c000044 	addi	r16,r19,1
 4014ca0:	2823883a 	mov	r17,r5
 4014ca4:	3029883a 	mov	r20,r6
 4014ca8:	2025883a 	mov	r18,r4
 4014cac:	29400117 	ldw	r5,4(r5)
 4014cb0:	1400030e 	bge	r2,r16,4014cc0 <__lshift+0x54>
 4014cb4:	1085883a 	add	r2,r2,r2
 4014cb8:	29400044 	addi	r5,r5,1
 4014cbc:	143ffd16 	blt	r2,r16,4014cb4 <__alt_data_end+0xfc014cb4>
 4014cc0:	9009883a 	mov	r4,r18
 4014cc4:	40144ec0 	call	40144ec <_Balloc>
 4014cc8:	10c00504 	addi	r3,r2,20
 4014ccc:	0540070e 	bge	zero,r21,4014cec <__lshift+0x80>
 4014cd0:	ad6b883a 	add	r21,r21,r21
 4014cd4:	ad6b883a 	add	r21,r21,r21
 4014cd8:	1809883a 	mov	r4,r3
 4014cdc:	1d47883a 	add	r3,r3,r21
 4014ce0:	20000015 	stw	zero,0(r4)
 4014ce4:	21000104 	addi	r4,r4,4
 4014ce8:	193ffd1e 	bne	r3,r4,4014ce0 <__alt_data_end+0xfc014ce0>
 4014cec:	8a000417 	ldw	r8,16(r17)
 4014cf0:	89000504 	addi	r4,r17,20
 4014cf4:	a18007cc 	andi	r6,r20,31
 4014cf8:	4211883a 	add	r8,r8,r8
 4014cfc:	4211883a 	add	r8,r8,r8
 4014d00:	2211883a 	add	r8,r4,r8
 4014d04:	30002326 	beq	r6,zero,4014d94 <__lshift+0x128>
 4014d08:	02400804 	movi	r9,32
 4014d0c:	4993c83a 	sub	r9,r9,r6
 4014d10:	000b883a 	mov	r5,zero
 4014d14:	21c00017 	ldw	r7,0(r4)
 4014d18:	1815883a 	mov	r10,r3
 4014d1c:	18c00104 	addi	r3,r3,4
 4014d20:	398e983a 	sll	r7,r7,r6
 4014d24:	21000104 	addi	r4,r4,4
 4014d28:	394ab03a 	or	r5,r7,r5
 4014d2c:	197fff15 	stw	r5,-4(r3)
 4014d30:	217fff17 	ldw	r5,-4(r4)
 4014d34:	2a4ad83a 	srl	r5,r5,r9
 4014d38:	223ff636 	bltu	r4,r8,4014d14 <__alt_data_end+0xfc014d14>
 4014d3c:	51400115 	stw	r5,4(r10)
 4014d40:	28001a1e 	bne	r5,zero,4014dac <__lshift+0x140>
 4014d44:	843fffc4 	addi	r16,r16,-1
 4014d48:	14000415 	stw	r16,16(r2)
 4014d4c:	88000826 	beq	r17,zero,4014d70 <__lshift+0x104>
 4014d50:	89000117 	ldw	r4,4(r17)
 4014d54:	90c01317 	ldw	r3,76(r18)
 4014d58:	2109883a 	add	r4,r4,r4
 4014d5c:	2109883a 	add	r4,r4,r4
 4014d60:	1907883a 	add	r3,r3,r4
 4014d64:	19000017 	ldw	r4,0(r3)
 4014d68:	89000015 	stw	r4,0(r17)
 4014d6c:	1c400015 	stw	r17,0(r3)
 4014d70:	dfc00617 	ldw	ra,24(sp)
 4014d74:	dd400517 	ldw	r21,20(sp)
 4014d78:	dd000417 	ldw	r20,16(sp)
 4014d7c:	dcc00317 	ldw	r19,12(sp)
 4014d80:	dc800217 	ldw	r18,8(sp)
 4014d84:	dc400117 	ldw	r17,4(sp)
 4014d88:	dc000017 	ldw	r16,0(sp)
 4014d8c:	dec00704 	addi	sp,sp,28
 4014d90:	f800283a 	ret
 4014d94:	21400017 	ldw	r5,0(r4)
 4014d98:	18c00104 	addi	r3,r3,4
 4014d9c:	21000104 	addi	r4,r4,4
 4014da0:	197fff15 	stw	r5,-4(r3)
 4014da4:	223ffb36 	bltu	r4,r8,4014d94 <__alt_data_end+0xfc014d94>
 4014da8:	003fe606 	br	4014d44 <__alt_data_end+0xfc014d44>
 4014dac:	9c000084 	addi	r16,r19,2
 4014db0:	003fe406 	br	4014d44 <__alt_data_end+0xfc014d44>

04014db4 <__mcmp>:
 4014db4:	20800417 	ldw	r2,16(r4)
 4014db8:	28c00417 	ldw	r3,16(r5)
 4014dbc:	10c5c83a 	sub	r2,r2,r3
 4014dc0:	1000111e 	bne	r2,zero,4014e08 <__mcmp+0x54>
 4014dc4:	18c7883a 	add	r3,r3,r3
 4014dc8:	18c7883a 	add	r3,r3,r3
 4014dcc:	21000504 	addi	r4,r4,20
 4014dd0:	29400504 	addi	r5,r5,20
 4014dd4:	20c5883a 	add	r2,r4,r3
 4014dd8:	28cb883a 	add	r5,r5,r3
 4014ddc:	00000106 	br	4014de4 <__mcmp+0x30>
 4014de0:	20800a2e 	bgeu	r4,r2,4014e0c <__mcmp+0x58>
 4014de4:	10bfff04 	addi	r2,r2,-4
 4014de8:	297fff04 	addi	r5,r5,-4
 4014dec:	11800017 	ldw	r6,0(r2)
 4014df0:	28c00017 	ldw	r3,0(r5)
 4014df4:	30fffa26 	beq	r6,r3,4014de0 <__alt_data_end+0xfc014de0>
 4014df8:	30c00236 	bltu	r6,r3,4014e04 <__mcmp+0x50>
 4014dfc:	00800044 	movi	r2,1
 4014e00:	f800283a 	ret
 4014e04:	00bfffc4 	movi	r2,-1
 4014e08:	f800283a 	ret
 4014e0c:	0005883a 	mov	r2,zero
 4014e10:	f800283a 	ret

04014e14 <__mdiff>:
 4014e14:	28c00417 	ldw	r3,16(r5)
 4014e18:	30800417 	ldw	r2,16(r6)
 4014e1c:	defffa04 	addi	sp,sp,-24
 4014e20:	dcc00315 	stw	r19,12(sp)
 4014e24:	dc800215 	stw	r18,8(sp)
 4014e28:	dfc00515 	stw	ra,20(sp)
 4014e2c:	dd000415 	stw	r20,16(sp)
 4014e30:	dc400115 	stw	r17,4(sp)
 4014e34:	dc000015 	stw	r16,0(sp)
 4014e38:	1887c83a 	sub	r3,r3,r2
 4014e3c:	2825883a 	mov	r18,r5
 4014e40:	3027883a 	mov	r19,r6
 4014e44:	1800141e 	bne	r3,zero,4014e98 <__mdiff+0x84>
 4014e48:	1085883a 	add	r2,r2,r2
 4014e4c:	1085883a 	add	r2,r2,r2
 4014e50:	2a000504 	addi	r8,r5,20
 4014e54:	34000504 	addi	r16,r6,20
 4014e58:	4087883a 	add	r3,r8,r2
 4014e5c:	8085883a 	add	r2,r16,r2
 4014e60:	00000106 	br	4014e68 <__mdiff+0x54>
 4014e64:	40c0592e 	bgeu	r8,r3,4014fcc <__mdiff+0x1b8>
 4014e68:	18ffff04 	addi	r3,r3,-4
 4014e6c:	10bfff04 	addi	r2,r2,-4
 4014e70:	19c00017 	ldw	r7,0(r3)
 4014e74:	11400017 	ldw	r5,0(r2)
 4014e78:	397ffa26 	beq	r7,r5,4014e64 <__alt_data_end+0xfc014e64>
 4014e7c:	3940592e 	bgeu	r7,r5,4014fe4 <__mdiff+0x1d0>
 4014e80:	9005883a 	mov	r2,r18
 4014e84:	4023883a 	mov	r17,r8
 4014e88:	9825883a 	mov	r18,r19
 4014e8c:	05000044 	movi	r20,1
 4014e90:	1027883a 	mov	r19,r2
 4014e94:	00000406 	br	4014ea8 <__mdiff+0x94>
 4014e98:	18005616 	blt	r3,zero,4014ff4 <__mdiff+0x1e0>
 4014e9c:	34400504 	addi	r17,r6,20
 4014ea0:	2c000504 	addi	r16,r5,20
 4014ea4:	0029883a 	mov	r20,zero
 4014ea8:	91400117 	ldw	r5,4(r18)
 4014eac:	40144ec0 	call	40144ec <_Balloc>
 4014eb0:	92400417 	ldw	r9,16(r18)
 4014eb4:	9b000417 	ldw	r12,16(r19)
 4014eb8:	12c00504 	addi	r11,r2,20
 4014ebc:	4a51883a 	add	r8,r9,r9
 4014ec0:	6319883a 	add	r12,r12,r12
 4014ec4:	4211883a 	add	r8,r8,r8
 4014ec8:	6319883a 	add	r12,r12,r12
 4014ecc:	15000315 	stw	r20,12(r2)
 4014ed0:	8211883a 	add	r8,r16,r8
 4014ed4:	8b19883a 	add	r12,r17,r12
 4014ed8:	0007883a 	mov	r3,zero
 4014edc:	81400017 	ldw	r5,0(r16)
 4014ee0:	89c00017 	ldw	r7,0(r17)
 4014ee4:	59800104 	addi	r6,r11,4
 4014ee8:	293fffcc 	andi	r4,r5,65535
 4014eec:	20c7883a 	add	r3,r4,r3
 4014ef0:	393fffcc 	andi	r4,r7,65535
 4014ef4:	1909c83a 	sub	r4,r3,r4
 4014ef8:	280ad43a 	srli	r5,r5,16
 4014efc:	380ed43a 	srli	r7,r7,16
 4014f00:	2007d43a 	srai	r3,r4,16
 4014f04:	213fffcc 	andi	r4,r4,65535
 4014f08:	29cbc83a 	sub	r5,r5,r7
 4014f0c:	28c7883a 	add	r3,r5,r3
 4014f10:	180a943a 	slli	r5,r3,16
 4014f14:	8c400104 	addi	r17,r17,4
 4014f18:	84000104 	addi	r16,r16,4
 4014f1c:	2908b03a 	or	r4,r5,r4
 4014f20:	59000015 	stw	r4,0(r11)
 4014f24:	1807d43a 	srai	r3,r3,16
 4014f28:	3015883a 	mov	r10,r6
 4014f2c:	3017883a 	mov	r11,r6
 4014f30:	8b3fea36 	bltu	r17,r12,4014edc <__alt_data_end+0xfc014edc>
 4014f34:	8200162e 	bgeu	r16,r8,4014f90 <__mdiff+0x17c>
 4014f38:	8017883a 	mov	r11,r16
 4014f3c:	59400017 	ldw	r5,0(r11)
 4014f40:	31800104 	addi	r6,r6,4
 4014f44:	5ac00104 	addi	r11,r11,4
 4014f48:	293fffcc 	andi	r4,r5,65535
 4014f4c:	20c7883a 	add	r3,r4,r3
 4014f50:	280ed43a 	srli	r7,r5,16
 4014f54:	180bd43a 	srai	r5,r3,16
 4014f58:	193fffcc 	andi	r4,r3,65535
 4014f5c:	3947883a 	add	r3,r7,r5
 4014f60:	180a943a 	slli	r5,r3,16
 4014f64:	1807d43a 	srai	r3,r3,16
 4014f68:	2908b03a 	or	r4,r5,r4
 4014f6c:	313fff15 	stw	r4,-4(r6)
 4014f70:	5a3ff236 	bltu	r11,r8,4014f3c <__alt_data_end+0xfc014f3c>
 4014f74:	0406303a 	nor	r3,zero,r16
 4014f78:	1a07883a 	add	r3,r3,r8
 4014f7c:	1806d0ba 	srli	r3,r3,2
 4014f80:	18c00044 	addi	r3,r3,1
 4014f84:	18c7883a 	add	r3,r3,r3
 4014f88:	18c7883a 	add	r3,r3,r3
 4014f8c:	50d5883a 	add	r10,r10,r3
 4014f90:	50ffff04 	addi	r3,r10,-4
 4014f94:	2000041e 	bne	r4,zero,4014fa8 <__mdiff+0x194>
 4014f98:	18ffff04 	addi	r3,r3,-4
 4014f9c:	19000017 	ldw	r4,0(r3)
 4014fa0:	4a7fffc4 	addi	r9,r9,-1
 4014fa4:	203ffc26 	beq	r4,zero,4014f98 <__alt_data_end+0xfc014f98>
 4014fa8:	12400415 	stw	r9,16(r2)
 4014fac:	dfc00517 	ldw	ra,20(sp)
 4014fb0:	dd000417 	ldw	r20,16(sp)
 4014fb4:	dcc00317 	ldw	r19,12(sp)
 4014fb8:	dc800217 	ldw	r18,8(sp)
 4014fbc:	dc400117 	ldw	r17,4(sp)
 4014fc0:	dc000017 	ldw	r16,0(sp)
 4014fc4:	dec00604 	addi	sp,sp,24
 4014fc8:	f800283a 	ret
 4014fcc:	000b883a 	mov	r5,zero
 4014fd0:	40144ec0 	call	40144ec <_Balloc>
 4014fd4:	00c00044 	movi	r3,1
 4014fd8:	10c00415 	stw	r3,16(r2)
 4014fdc:	10000515 	stw	zero,20(r2)
 4014fe0:	003ff206 	br	4014fac <__alt_data_end+0xfc014fac>
 4014fe4:	8023883a 	mov	r17,r16
 4014fe8:	0029883a 	mov	r20,zero
 4014fec:	4021883a 	mov	r16,r8
 4014ff0:	003fad06 	br	4014ea8 <__alt_data_end+0xfc014ea8>
 4014ff4:	9005883a 	mov	r2,r18
 4014ff8:	94400504 	addi	r17,r18,20
 4014ffc:	9c000504 	addi	r16,r19,20
 4015000:	9825883a 	mov	r18,r19
 4015004:	05000044 	movi	r20,1
 4015008:	1027883a 	mov	r19,r2
 401500c:	003fa606 	br	4014ea8 <__alt_data_end+0xfc014ea8>

04015010 <__ulp>:
 4015010:	295ffc2c 	andhi	r5,r5,32752
 4015014:	00bf3034 	movhi	r2,64704
 4015018:	2887883a 	add	r3,r5,r2
 401501c:	00c0020e 	bge	zero,r3,4015028 <__ulp+0x18>
 4015020:	0005883a 	mov	r2,zero
 4015024:	f800283a 	ret
 4015028:	00c7c83a 	sub	r3,zero,r3
 401502c:	1807d53a 	srai	r3,r3,20
 4015030:	008004c4 	movi	r2,19
 4015034:	10c00b0e 	bge	r2,r3,4015064 <__ulp+0x54>
 4015038:	18bffb04 	addi	r2,r3,-20
 401503c:	01000784 	movi	r4,30
 4015040:	0007883a 	mov	r3,zero
 4015044:	20800516 	blt	r4,r2,401505c <__ulp+0x4c>
 4015048:	010007c4 	movi	r4,31
 401504c:	2089c83a 	sub	r4,r4,r2
 4015050:	00800044 	movi	r2,1
 4015054:	1104983a 	sll	r2,r2,r4
 4015058:	f800283a 	ret
 401505c:	00800044 	movi	r2,1
 4015060:	f800283a 	ret
 4015064:	01400234 	movhi	r5,8
 4015068:	28c7d83a 	sra	r3,r5,r3
 401506c:	0005883a 	mov	r2,zero
 4015070:	f800283a 	ret

04015074 <__b2d>:
 4015074:	defffa04 	addi	sp,sp,-24
 4015078:	dc000015 	stw	r16,0(sp)
 401507c:	24000417 	ldw	r16,16(r4)
 4015080:	dc400115 	stw	r17,4(sp)
 4015084:	24400504 	addi	r17,r4,20
 4015088:	8421883a 	add	r16,r16,r16
 401508c:	8421883a 	add	r16,r16,r16
 4015090:	8c21883a 	add	r16,r17,r16
 4015094:	dc800215 	stw	r18,8(sp)
 4015098:	84bfff17 	ldw	r18,-4(r16)
 401509c:	dd000415 	stw	r20,16(sp)
 40150a0:	dcc00315 	stw	r19,12(sp)
 40150a4:	9009883a 	mov	r4,r18
 40150a8:	2829883a 	mov	r20,r5
 40150ac:	dfc00515 	stw	ra,20(sp)
 40150b0:	40147e00 	call	40147e0 <__hi0bits>
 40150b4:	00c00804 	movi	r3,32
 40150b8:	1889c83a 	sub	r4,r3,r2
 40150bc:	a1000015 	stw	r4,0(r20)
 40150c0:	01000284 	movi	r4,10
 40150c4:	84ffff04 	addi	r19,r16,-4
 40150c8:	20801216 	blt	r4,r2,4015114 <__b2d+0xa0>
 40150cc:	018002c4 	movi	r6,11
 40150d0:	308dc83a 	sub	r6,r6,r2
 40150d4:	9186d83a 	srl	r3,r18,r6
 40150d8:	18cffc34 	orhi	r3,r3,16368
 40150dc:	8cc0212e 	bgeu	r17,r19,4015164 <__b2d+0xf0>
 40150e0:	813ffe17 	ldw	r4,-8(r16)
 40150e4:	218cd83a 	srl	r6,r4,r6
 40150e8:	10800544 	addi	r2,r2,21
 40150ec:	9084983a 	sll	r2,r18,r2
 40150f0:	1184b03a 	or	r2,r2,r6
 40150f4:	dfc00517 	ldw	ra,20(sp)
 40150f8:	dd000417 	ldw	r20,16(sp)
 40150fc:	dcc00317 	ldw	r19,12(sp)
 4015100:	dc800217 	ldw	r18,8(sp)
 4015104:	dc400117 	ldw	r17,4(sp)
 4015108:	dc000017 	ldw	r16,0(sp)
 401510c:	dec00604 	addi	sp,sp,24
 4015110:	f800283a 	ret
 4015114:	8cc00f2e 	bgeu	r17,r19,4015154 <__b2d+0xe0>
 4015118:	117ffd44 	addi	r5,r2,-11
 401511c:	80bffe17 	ldw	r2,-8(r16)
 4015120:	28000e26 	beq	r5,zero,401515c <__b2d+0xe8>
 4015124:	1949c83a 	sub	r4,r3,r5
 4015128:	9164983a 	sll	r18,r18,r5
 401512c:	1106d83a 	srl	r3,r2,r4
 4015130:	81bffe04 	addi	r6,r16,-8
 4015134:	948ffc34 	orhi	r18,r18,16368
 4015138:	90c6b03a 	or	r3,r18,r3
 401513c:	89800e2e 	bgeu	r17,r6,4015178 <__b2d+0x104>
 4015140:	81bffd17 	ldw	r6,-12(r16)
 4015144:	1144983a 	sll	r2,r2,r5
 4015148:	310ad83a 	srl	r5,r6,r4
 401514c:	2884b03a 	or	r2,r5,r2
 4015150:	003fe806 	br	40150f4 <__alt_data_end+0xfc0150f4>
 4015154:	10bffd44 	addi	r2,r2,-11
 4015158:	1000041e 	bne	r2,zero,401516c <__b2d+0xf8>
 401515c:	90cffc34 	orhi	r3,r18,16368
 4015160:	003fe406 	br	40150f4 <__alt_data_end+0xfc0150f4>
 4015164:	000d883a 	mov	r6,zero
 4015168:	003fdf06 	br	40150e8 <__alt_data_end+0xfc0150e8>
 401516c:	90a4983a 	sll	r18,r18,r2
 4015170:	0005883a 	mov	r2,zero
 4015174:	003ff906 	br	401515c <__alt_data_end+0xfc01515c>
 4015178:	1144983a 	sll	r2,r2,r5
 401517c:	003fdd06 	br	40150f4 <__alt_data_end+0xfc0150f4>

04015180 <__d2b>:
 4015180:	defff804 	addi	sp,sp,-32
 4015184:	dc000215 	stw	r16,8(sp)
 4015188:	3021883a 	mov	r16,r6
 401518c:	dc400315 	stw	r17,12(sp)
 4015190:	8022907a 	slli	r17,r16,1
 4015194:	dd000615 	stw	r20,24(sp)
 4015198:	2829883a 	mov	r20,r5
 401519c:	01400044 	movi	r5,1
 40151a0:	dcc00515 	stw	r19,20(sp)
 40151a4:	dc800415 	stw	r18,16(sp)
 40151a8:	dfc00715 	stw	ra,28(sp)
 40151ac:	3825883a 	mov	r18,r7
 40151b0:	8822d57a 	srli	r17,r17,21
 40151b4:	40144ec0 	call	40144ec <_Balloc>
 40151b8:	1027883a 	mov	r19,r2
 40151bc:	00800434 	movhi	r2,16
 40151c0:	10bfffc4 	addi	r2,r2,-1
 40151c4:	808c703a 	and	r6,r16,r2
 40151c8:	88000126 	beq	r17,zero,40151d0 <__d2b+0x50>
 40151cc:	31800434 	orhi	r6,r6,16
 40151d0:	d9800015 	stw	r6,0(sp)
 40151d4:	a0002426 	beq	r20,zero,4015268 <__d2b+0xe8>
 40151d8:	d9000104 	addi	r4,sp,4
 40151dc:	dd000115 	stw	r20,4(sp)
 40151e0:	40148480 	call	4014848 <__lo0bits>
 40151e4:	d8c00017 	ldw	r3,0(sp)
 40151e8:	10002f1e 	bne	r2,zero,40152a8 <__d2b+0x128>
 40151ec:	d9000117 	ldw	r4,4(sp)
 40151f0:	99000515 	stw	r4,20(r19)
 40151f4:	1821003a 	cmpeq	r16,r3,zero
 40151f8:	01000084 	movi	r4,2
 40151fc:	2421c83a 	sub	r16,r4,r16
 4015200:	98c00615 	stw	r3,24(r19)
 4015204:	9c000415 	stw	r16,16(r19)
 4015208:	88001f1e 	bne	r17,zero,4015288 <__d2b+0x108>
 401520c:	10bef384 	addi	r2,r2,-1074
 4015210:	90800015 	stw	r2,0(r18)
 4015214:	00900034 	movhi	r2,16384
 4015218:	10bfffc4 	addi	r2,r2,-1
 401521c:	8085883a 	add	r2,r16,r2
 4015220:	1085883a 	add	r2,r2,r2
 4015224:	1085883a 	add	r2,r2,r2
 4015228:	9885883a 	add	r2,r19,r2
 401522c:	11000517 	ldw	r4,20(r2)
 4015230:	8020917a 	slli	r16,r16,5
 4015234:	40147e00 	call	40147e0 <__hi0bits>
 4015238:	d8c00817 	ldw	r3,32(sp)
 401523c:	8085c83a 	sub	r2,r16,r2
 4015240:	18800015 	stw	r2,0(r3)
 4015244:	9805883a 	mov	r2,r19
 4015248:	dfc00717 	ldw	ra,28(sp)
 401524c:	dd000617 	ldw	r20,24(sp)
 4015250:	dcc00517 	ldw	r19,20(sp)
 4015254:	dc800417 	ldw	r18,16(sp)
 4015258:	dc400317 	ldw	r17,12(sp)
 401525c:	dc000217 	ldw	r16,8(sp)
 4015260:	dec00804 	addi	sp,sp,32
 4015264:	f800283a 	ret
 4015268:	d809883a 	mov	r4,sp
 401526c:	40148480 	call	4014848 <__lo0bits>
 4015270:	d8c00017 	ldw	r3,0(sp)
 4015274:	04000044 	movi	r16,1
 4015278:	9c000415 	stw	r16,16(r19)
 401527c:	98c00515 	stw	r3,20(r19)
 4015280:	10800804 	addi	r2,r2,32
 4015284:	883fe126 	beq	r17,zero,401520c <__alt_data_end+0xfc01520c>
 4015288:	00c00d44 	movi	r3,53
 401528c:	8c7ef344 	addi	r17,r17,-1075
 4015290:	88a3883a 	add	r17,r17,r2
 4015294:	1885c83a 	sub	r2,r3,r2
 4015298:	d8c00817 	ldw	r3,32(sp)
 401529c:	94400015 	stw	r17,0(r18)
 40152a0:	18800015 	stw	r2,0(r3)
 40152a4:	003fe706 	br	4015244 <__alt_data_end+0xfc015244>
 40152a8:	01000804 	movi	r4,32
 40152ac:	2089c83a 	sub	r4,r4,r2
 40152b0:	1908983a 	sll	r4,r3,r4
 40152b4:	d9400117 	ldw	r5,4(sp)
 40152b8:	1886d83a 	srl	r3,r3,r2
 40152bc:	2148b03a 	or	r4,r4,r5
 40152c0:	99000515 	stw	r4,20(r19)
 40152c4:	d8c00015 	stw	r3,0(sp)
 40152c8:	003fca06 	br	40151f4 <__alt_data_end+0xfc0151f4>

040152cc <__ratio>:
 40152cc:	defff904 	addi	sp,sp,-28
 40152d0:	dc400315 	stw	r17,12(sp)
 40152d4:	2823883a 	mov	r17,r5
 40152d8:	d9400104 	addi	r5,sp,4
 40152dc:	dfc00615 	stw	ra,24(sp)
 40152e0:	dcc00515 	stw	r19,20(sp)
 40152e4:	dc800415 	stw	r18,16(sp)
 40152e8:	2027883a 	mov	r19,r4
 40152ec:	dc000215 	stw	r16,8(sp)
 40152f0:	40150740 	call	4015074 <__b2d>
 40152f4:	d80b883a 	mov	r5,sp
 40152f8:	8809883a 	mov	r4,r17
 40152fc:	1025883a 	mov	r18,r2
 4015300:	1821883a 	mov	r16,r3
 4015304:	40150740 	call	4015074 <__b2d>
 4015308:	8a000417 	ldw	r8,16(r17)
 401530c:	99000417 	ldw	r4,16(r19)
 4015310:	d9400117 	ldw	r5,4(sp)
 4015314:	2209c83a 	sub	r4,r4,r8
 4015318:	2010917a 	slli	r8,r4,5
 401531c:	d9000017 	ldw	r4,0(sp)
 4015320:	2909c83a 	sub	r4,r5,r4
 4015324:	4109883a 	add	r4,r8,r4
 4015328:	01000e0e 	bge	zero,r4,4015364 <__ratio+0x98>
 401532c:	2008953a 	slli	r4,r4,20
 4015330:	2421883a 	add	r16,r4,r16
 4015334:	100d883a 	mov	r6,r2
 4015338:	180f883a 	mov	r7,r3
 401533c:	9009883a 	mov	r4,r18
 4015340:	800b883a 	mov	r5,r16
 4015344:	401a4480 	call	401a448 <__divdf3>
 4015348:	dfc00617 	ldw	ra,24(sp)
 401534c:	dcc00517 	ldw	r19,20(sp)
 4015350:	dc800417 	ldw	r18,16(sp)
 4015354:	dc400317 	ldw	r17,12(sp)
 4015358:	dc000217 	ldw	r16,8(sp)
 401535c:	dec00704 	addi	sp,sp,28
 4015360:	f800283a 	ret
 4015364:	2008953a 	slli	r4,r4,20
 4015368:	1907c83a 	sub	r3,r3,r4
 401536c:	003ff106 	br	4015334 <__alt_data_end+0xfc015334>

04015370 <_mprec_log10>:
 4015370:	defffe04 	addi	sp,sp,-8
 4015374:	dc000015 	stw	r16,0(sp)
 4015378:	dfc00115 	stw	ra,4(sp)
 401537c:	008005c4 	movi	r2,23
 4015380:	2021883a 	mov	r16,r4
 4015384:	11000d0e 	bge	r2,r4,40153bc <_mprec_log10+0x4c>
 4015388:	0005883a 	mov	r2,zero
 401538c:	00cffc34 	movhi	r3,16368
 4015390:	843fffc4 	addi	r16,r16,-1
 4015394:	000d883a 	mov	r6,zero
 4015398:	01d00934 	movhi	r7,16420
 401539c:	1009883a 	mov	r4,r2
 40153a0:	180b883a 	mov	r5,r3
 40153a4:	401af880 	call	401af88 <__muldf3>
 40153a8:	803ff91e 	bne	r16,zero,4015390 <__alt_data_end+0xfc015390>
 40153ac:	dfc00117 	ldw	ra,4(sp)
 40153b0:	dc000017 	ldw	r16,0(sp)
 40153b4:	dec00204 	addi	sp,sp,8
 40153b8:	f800283a 	ret
 40153bc:	202090fa 	slli	r16,r4,3
 40153c0:	008100b4 	movhi	r2,1026
 40153c4:	10bffa04 	addi	r2,r2,-24
 40153c8:	1421883a 	add	r16,r2,r16
 40153cc:	80800017 	ldw	r2,0(r16)
 40153d0:	80c00117 	ldw	r3,4(r16)
 40153d4:	dfc00117 	ldw	ra,4(sp)
 40153d8:	dc000017 	ldw	r16,0(sp)
 40153dc:	dec00204 	addi	sp,sp,8
 40153e0:	f800283a 	ret

040153e4 <__copybits>:
 40153e4:	297fffc4 	addi	r5,r5,-1
 40153e8:	280fd17a 	srai	r7,r5,5
 40153ec:	30c00417 	ldw	r3,16(r6)
 40153f0:	30800504 	addi	r2,r6,20
 40153f4:	39c00044 	addi	r7,r7,1
 40153f8:	18c7883a 	add	r3,r3,r3
 40153fc:	39cf883a 	add	r7,r7,r7
 4015400:	18c7883a 	add	r3,r3,r3
 4015404:	39cf883a 	add	r7,r7,r7
 4015408:	10c7883a 	add	r3,r2,r3
 401540c:	21cf883a 	add	r7,r4,r7
 4015410:	10c00d2e 	bgeu	r2,r3,4015448 <__copybits+0x64>
 4015414:	200b883a 	mov	r5,r4
 4015418:	12000017 	ldw	r8,0(r2)
 401541c:	29400104 	addi	r5,r5,4
 4015420:	10800104 	addi	r2,r2,4
 4015424:	2a3fff15 	stw	r8,-4(r5)
 4015428:	10fffb36 	bltu	r2,r3,4015418 <__alt_data_end+0xfc015418>
 401542c:	1985c83a 	sub	r2,r3,r6
 4015430:	10bffac4 	addi	r2,r2,-21
 4015434:	1004d0ba 	srli	r2,r2,2
 4015438:	10800044 	addi	r2,r2,1
 401543c:	1085883a 	add	r2,r2,r2
 4015440:	1085883a 	add	r2,r2,r2
 4015444:	2089883a 	add	r4,r4,r2
 4015448:	21c0032e 	bgeu	r4,r7,4015458 <__copybits+0x74>
 401544c:	20000015 	stw	zero,0(r4)
 4015450:	21000104 	addi	r4,r4,4
 4015454:	21fffd36 	bltu	r4,r7,401544c <__alt_data_end+0xfc01544c>
 4015458:	f800283a 	ret

0401545c <__any_on>:
 401545c:	20c00417 	ldw	r3,16(r4)
 4015460:	2805d17a 	srai	r2,r5,5
 4015464:	21000504 	addi	r4,r4,20
 4015468:	18800d0e 	bge	r3,r2,40154a0 <__any_on+0x44>
 401546c:	18c7883a 	add	r3,r3,r3
 4015470:	18c7883a 	add	r3,r3,r3
 4015474:	20c7883a 	add	r3,r4,r3
 4015478:	20c0192e 	bgeu	r4,r3,40154e0 <__any_on+0x84>
 401547c:	18bfff17 	ldw	r2,-4(r3)
 4015480:	18ffff04 	addi	r3,r3,-4
 4015484:	1000041e 	bne	r2,zero,4015498 <__any_on+0x3c>
 4015488:	20c0142e 	bgeu	r4,r3,40154dc <__any_on+0x80>
 401548c:	18ffff04 	addi	r3,r3,-4
 4015490:	19400017 	ldw	r5,0(r3)
 4015494:	283ffc26 	beq	r5,zero,4015488 <__alt_data_end+0xfc015488>
 4015498:	00800044 	movi	r2,1
 401549c:	f800283a 	ret
 40154a0:	10c00a0e 	bge	r2,r3,40154cc <__any_on+0x70>
 40154a4:	1085883a 	add	r2,r2,r2
 40154a8:	1085883a 	add	r2,r2,r2
 40154ac:	294007cc 	andi	r5,r5,31
 40154b0:	2087883a 	add	r3,r4,r2
 40154b4:	283ff026 	beq	r5,zero,4015478 <__alt_data_end+0xfc015478>
 40154b8:	19800017 	ldw	r6,0(r3)
 40154bc:	3144d83a 	srl	r2,r6,r5
 40154c0:	114a983a 	sll	r5,r2,r5
 40154c4:	317ff41e 	bne	r6,r5,4015498 <__alt_data_end+0xfc015498>
 40154c8:	003feb06 	br	4015478 <__alt_data_end+0xfc015478>
 40154cc:	1085883a 	add	r2,r2,r2
 40154d0:	1085883a 	add	r2,r2,r2
 40154d4:	2087883a 	add	r3,r4,r2
 40154d8:	003fe706 	br	4015478 <__alt_data_end+0xfc015478>
 40154dc:	f800283a 	ret
 40154e0:	0005883a 	mov	r2,zero
 40154e4:	f800283a 	ret

040154e8 <_putc_r>:
 40154e8:	defffc04 	addi	sp,sp,-16
 40154ec:	dc000215 	stw	r16,8(sp)
 40154f0:	dfc00315 	stw	ra,12(sp)
 40154f4:	2021883a 	mov	r16,r4
 40154f8:	20000226 	beq	r4,zero,4015504 <_putc_r+0x1c>
 40154fc:	20800e17 	ldw	r2,56(r4)
 4015500:	10001b26 	beq	r2,zero,4015570 <_putc_r+0x88>
 4015504:	30800217 	ldw	r2,8(r6)
 4015508:	10bfffc4 	addi	r2,r2,-1
 401550c:	30800215 	stw	r2,8(r6)
 4015510:	10000a16 	blt	r2,zero,401553c <_putc_r+0x54>
 4015514:	30800017 	ldw	r2,0(r6)
 4015518:	11400005 	stb	r5,0(r2)
 401551c:	30800017 	ldw	r2,0(r6)
 4015520:	10c00044 	addi	r3,r2,1
 4015524:	30c00015 	stw	r3,0(r6)
 4015528:	10800003 	ldbu	r2,0(r2)
 401552c:	dfc00317 	ldw	ra,12(sp)
 4015530:	dc000217 	ldw	r16,8(sp)
 4015534:	dec00404 	addi	sp,sp,16
 4015538:	f800283a 	ret
 401553c:	30c00617 	ldw	r3,24(r6)
 4015540:	10c00616 	blt	r2,r3,401555c <_putc_r+0x74>
 4015544:	30800017 	ldw	r2,0(r6)
 4015548:	00c00284 	movi	r3,10
 401554c:	11400005 	stb	r5,0(r2)
 4015550:	30800017 	ldw	r2,0(r6)
 4015554:	11400003 	ldbu	r5,0(r2)
 4015558:	28fff11e 	bne	r5,r3,4015520 <__alt_data_end+0xfc015520>
 401555c:	8009883a 	mov	r4,r16
 4015560:	dfc00317 	ldw	ra,12(sp)
 4015564:	dc000217 	ldw	r16,8(sp)
 4015568:	dec00404 	addi	sp,sp,16
 401556c:	40187b81 	jmpi	40187b8 <__swbuf_r>
 4015570:	d9400015 	stw	r5,0(sp)
 4015574:	d9800115 	stw	r6,4(sp)
 4015578:	401354c0 	call	401354c <__sinit>
 401557c:	d9800117 	ldw	r6,4(sp)
 4015580:	d9400017 	ldw	r5,0(sp)
 4015584:	003fdf06 	br	4015504 <__alt_data_end+0xfc015504>

04015588 <putc>:
 4015588:	008100f4 	movhi	r2,1027
 401558c:	defffc04 	addi	sp,sp,-16
 4015590:	10b31d04 	addi	r2,r2,-13196
 4015594:	dc000115 	stw	r16,4(sp)
 4015598:	14000017 	ldw	r16,0(r2)
 401559c:	dc400215 	stw	r17,8(sp)
 40155a0:	dfc00315 	stw	ra,12(sp)
 40155a4:	2023883a 	mov	r17,r4
 40155a8:	80000226 	beq	r16,zero,40155b4 <putc+0x2c>
 40155ac:	80800e17 	ldw	r2,56(r16)
 40155b0:	10001a26 	beq	r2,zero,401561c <putc+0x94>
 40155b4:	28800217 	ldw	r2,8(r5)
 40155b8:	10bfffc4 	addi	r2,r2,-1
 40155bc:	28800215 	stw	r2,8(r5)
 40155c0:	10000b16 	blt	r2,zero,40155f0 <putc+0x68>
 40155c4:	28800017 	ldw	r2,0(r5)
 40155c8:	14400005 	stb	r17,0(r2)
 40155cc:	28800017 	ldw	r2,0(r5)
 40155d0:	10c00044 	addi	r3,r2,1
 40155d4:	28c00015 	stw	r3,0(r5)
 40155d8:	10800003 	ldbu	r2,0(r2)
 40155dc:	dfc00317 	ldw	ra,12(sp)
 40155e0:	dc400217 	ldw	r17,8(sp)
 40155e4:	dc000117 	ldw	r16,4(sp)
 40155e8:	dec00404 	addi	sp,sp,16
 40155ec:	f800283a 	ret
 40155f0:	28c00617 	ldw	r3,24(r5)
 40155f4:	10c00e16 	blt	r2,r3,4015630 <putc+0xa8>
 40155f8:	28800017 	ldw	r2,0(r5)
 40155fc:	01000284 	movi	r4,10
 4015600:	14400005 	stb	r17,0(r2)
 4015604:	28800017 	ldw	r2,0(r5)
 4015608:	10c00003 	ldbu	r3,0(r2)
 401560c:	193ff01e 	bne	r3,r4,40155d0 <__alt_data_end+0xfc0155d0>
 4015610:	280d883a 	mov	r6,r5
 4015614:	180b883a 	mov	r5,r3
 4015618:	00000706 	br	4015638 <putc+0xb0>
 401561c:	8009883a 	mov	r4,r16
 4015620:	d9400015 	stw	r5,0(sp)
 4015624:	401354c0 	call	401354c <__sinit>
 4015628:	d9400017 	ldw	r5,0(sp)
 401562c:	003fe106 	br	40155b4 <__alt_data_end+0xfc0155b4>
 4015630:	280d883a 	mov	r6,r5
 4015634:	880b883a 	mov	r5,r17
 4015638:	8009883a 	mov	r4,r16
 401563c:	dfc00317 	ldw	ra,12(sp)
 4015640:	dc400217 	ldw	r17,8(sp)
 4015644:	dc000117 	ldw	r16,4(sp)
 4015648:	dec00404 	addi	sp,sp,16
 401564c:	40187b81 	jmpi	40187b8 <__swbuf_r>

04015650 <_realloc_r>:
 4015650:	defff604 	addi	sp,sp,-40
 4015654:	dc800215 	stw	r18,8(sp)
 4015658:	dfc00915 	stw	ra,36(sp)
 401565c:	df000815 	stw	fp,32(sp)
 4015660:	ddc00715 	stw	r23,28(sp)
 4015664:	dd800615 	stw	r22,24(sp)
 4015668:	dd400515 	stw	r21,20(sp)
 401566c:	dd000415 	stw	r20,16(sp)
 4015670:	dcc00315 	stw	r19,12(sp)
 4015674:	dc400115 	stw	r17,4(sp)
 4015678:	dc000015 	stw	r16,0(sp)
 401567c:	3025883a 	mov	r18,r6
 4015680:	2800b726 	beq	r5,zero,4015960 <_realloc_r+0x310>
 4015684:	282b883a 	mov	r21,r5
 4015688:	2029883a 	mov	r20,r4
 401568c:	401c9400 	call	401c940 <__malloc_lock>
 4015690:	a8bfff17 	ldw	r2,-4(r21)
 4015694:	043fff04 	movi	r16,-4
 4015698:	90c002c4 	addi	r3,r18,11
 401569c:	01000584 	movi	r4,22
 40156a0:	acfffe04 	addi	r19,r21,-8
 40156a4:	1420703a 	and	r16,r2,r16
 40156a8:	20c0332e 	bgeu	r4,r3,4015778 <_realloc_r+0x128>
 40156ac:	047ffe04 	movi	r17,-8
 40156b0:	1c62703a 	and	r17,r3,r17
 40156b4:	8807883a 	mov	r3,r17
 40156b8:	88005816 	blt	r17,zero,401581c <_realloc_r+0x1cc>
 40156bc:	8c805736 	bltu	r17,r18,401581c <_realloc_r+0x1cc>
 40156c0:	80c0300e 	bge	r16,r3,4015784 <_realloc_r+0x134>
 40156c4:	070100f4 	movhi	fp,1027
 40156c8:	e72d5e04 	addi	fp,fp,-19080
 40156cc:	e1c00217 	ldw	r7,8(fp)
 40156d0:	9c09883a 	add	r4,r19,r16
 40156d4:	22000117 	ldw	r8,4(r4)
 40156d8:	21c06326 	beq	r4,r7,4015868 <_realloc_r+0x218>
 40156dc:	017fff84 	movi	r5,-2
 40156e0:	414a703a 	and	r5,r8,r5
 40156e4:	214b883a 	add	r5,r4,r5
 40156e8:	29800117 	ldw	r6,4(r5)
 40156ec:	3180004c 	andi	r6,r6,1
 40156f0:	30003f26 	beq	r6,zero,40157f0 <_realloc_r+0x1a0>
 40156f4:	1080004c 	andi	r2,r2,1
 40156f8:	10008326 	beq	r2,zero,4015908 <_realloc_r+0x2b8>
 40156fc:	900b883a 	mov	r5,r18
 4015700:	a009883a 	mov	r4,r20
 4015704:	400bee00 	call	400bee0 <_malloc_r>
 4015708:	1025883a 	mov	r18,r2
 401570c:	10011e26 	beq	r2,zero,4015b88 <_realloc_r+0x538>
 4015710:	a93fff17 	ldw	r4,-4(r21)
 4015714:	10fffe04 	addi	r3,r2,-8
 4015718:	00bfff84 	movi	r2,-2
 401571c:	2084703a 	and	r2,r4,r2
 4015720:	9885883a 	add	r2,r19,r2
 4015724:	1880ee26 	beq	r3,r2,4015ae0 <_realloc_r+0x490>
 4015728:	81bfff04 	addi	r6,r16,-4
 401572c:	00800904 	movi	r2,36
 4015730:	1180b836 	bltu	r2,r6,4015a14 <_realloc_r+0x3c4>
 4015734:	00c004c4 	movi	r3,19
 4015738:	19809636 	bltu	r3,r6,4015994 <_realloc_r+0x344>
 401573c:	9005883a 	mov	r2,r18
 4015740:	a807883a 	mov	r3,r21
 4015744:	19000017 	ldw	r4,0(r3)
 4015748:	11000015 	stw	r4,0(r2)
 401574c:	19000117 	ldw	r4,4(r3)
 4015750:	11000115 	stw	r4,4(r2)
 4015754:	18c00217 	ldw	r3,8(r3)
 4015758:	10c00215 	stw	r3,8(r2)
 401575c:	a80b883a 	mov	r5,r21
 4015760:	a009883a 	mov	r4,r20
 4015764:	40136c00 	call	40136c0 <_free_r>
 4015768:	a009883a 	mov	r4,r20
 401576c:	401c9640 	call	401c964 <__malloc_unlock>
 4015770:	9005883a 	mov	r2,r18
 4015774:	00001206 	br	40157c0 <_realloc_r+0x170>
 4015778:	00c00404 	movi	r3,16
 401577c:	1823883a 	mov	r17,r3
 4015780:	003fce06 	br	40156bc <__alt_data_end+0xfc0156bc>
 4015784:	a825883a 	mov	r18,r21
 4015788:	8445c83a 	sub	r2,r16,r17
 401578c:	00c003c4 	movi	r3,15
 4015790:	18802636 	bltu	r3,r2,401582c <_realloc_r+0x1dc>
 4015794:	99800117 	ldw	r6,4(r19)
 4015798:	9c07883a 	add	r3,r19,r16
 401579c:	3180004c 	andi	r6,r6,1
 40157a0:	3420b03a 	or	r16,r6,r16
 40157a4:	9c000115 	stw	r16,4(r19)
 40157a8:	18800117 	ldw	r2,4(r3)
 40157ac:	10800054 	ori	r2,r2,1
 40157b0:	18800115 	stw	r2,4(r3)
 40157b4:	a009883a 	mov	r4,r20
 40157b8:	401c9640 	call	401c964 <__malloc_unlock>
 40157bc:	9005883a 	mov	r2,r18
 40157c0:	dfc00917 	ldw	ra,36(sp)
 40157c4:	df000817 	ldw	fp,32(sp)
 40157c8:	ddc00717 	ldw	r23,28(sp)
 40157cc:	dd800617 	ldw	r22,24(sp)
 40157d0:	dd400517 	ldw	r21,20(sp)
 40157d4:	dd000417 	ldw	r20,16(sp)
 40157d8:	dcc00317 	ldw	r19,12(sp)
 40157dc:	dc800217 	ldw	r18,8(sp)
 40157e0:	dc400117 	ldw	r17,4(sp)
 40157e4:	dc000017 	ldw	r16,0(sp)
 40157e8:	dec00a04 	addi	sp,sp,40
 40157ec:	f800283a 	ret
 40157f0:	017fff04 	movi	r5,-4
 40157f4:	414a703a 	and	r5,r8,r5
 40157f8:	814d883a 	add	r6,r16,r5
 40157fc:	30c01f16 	blt	r6,r3,401587c <_realloc_r+0x22c>
 4015800:	20800317 	ldw	r2,12(r4)
 4015804:	20c00217 	ldw	r3,8(r4)
 4015808:	a825883a 	mov	r18,r21
 401580c:	3021883a 	mov	r16,r6
 4015810:	18800315 	stw	r2,12(r3)
 4015814:	10c00215 	stw	r3,8(r2)
 4015818:	003fdb06 	br	4015788 <__alt_data_end+0xfc015788>
 401581c:	00800304 	movi	r2,12
 4015820:	a0800015 	stw	r2,0(r20)
 4015824:	0005883a 	mov	r2,zero
 4015828:	003fe506 	br	40157c0 <__alt_data_end+0xfc0157c0>
 401582c:	98c00117 	ldw	r3,4(r19)
 4015830:	9c4b883a 	add	r5,r19,r17
 4015834:	11000054 	ori	r4,r2,1
 4015838:	18c0004c 	andi	r3,r3,1
 401583c:	1c62b03a 	or	r17,r3,r17
 4015840:	9c400115 	stw	r17,4(r19)
 4015844:	29000115 	stw	r4,4(r5)
 4015848:	2885883a 	add	r2,r5,r2
 401584c:	10c00117 	ldw	r3,4(r2)
 4015850:	29400204 	addi	r5,r5,8
 4015854:	a009883a 	mov	r4,r20
 4015858:	18c00054 	ori	r3,r3,1
 401585c:	10c00115 	stw	r3,4(r2)
 4015860:	40136c00 	call	40136c0 <_free_r>
 4015864:	003fd306 	br	40157b4 <__alt_data_end+0xfc0157b4>
 4015868:	017fff04 	movi	r5,-4
 401586c:	414a703a 	and	r5,r8,r5
 4015870:	89800404 	addi	r6,r17,16
 4015874:	8151883a 	add	r8,r16,r5
 4015878:	4180590e 	bge	r8,r6,40159e0 <_realloc_r+0x390>
 401587c:	1080004c 	andi	r2,r2,1
 4015880:	103f9e1e 	bne	r2,zero,40156fc <__alt_data_end+0xfc0156fc>
 4015884:	adbffe17 	ldw	r22,-8(r21)
 4015888:	00bfff04 	movi	r2,-4
 401588c:	9dadc83a 	sub	r22,r19,r22
 4015890:	b1800117 	ldw	r6,4(r22)
 4015894:	3084703a 	and	r2,r6,r2
 4015898:	20002026 	beq	r4,zero,401591c <_realloc_r+0x2cc>
 401589c:	80af883a 	add	r23,r16,r2
 40158a0:	b96f883a 	add	r23,r23,r5
 40158a4:	21c05f26 	beq	r4,r7,4015a24 <_realloc_r+0x3d4>
 40158a8:	b8c01c16 	blt	r23,r3,401591c <_realloc_r+0x2cc>
 40158ac:	20800317 	ldw	r2,12(r4)
 40158b0:	20c00217 	ldw	r3,8(r4)
 40158b4:	81bfff04 	addi	r6,r16,-4
 40158b8:	01000904 	movi	r4,36
 40158bc:	18800315 	stw	r2,12(r3)
 40158c0:	10c00215 	stw	r3,8(r2)
 40158c4:	b0c00217 	ldw	r3,8(r22)
 40158c8:	b0800317 	ldw	r2,12(r22)
 40158cc:	b4800204 	addi	r18,r22,8
 40158d0:	18800315 	stw	r2,12(r3)
 40158d4:	10c00215 	stw	r3,8(r2)
 40158d8:	21801b36 	bltu	r4,r6,4015948 <_realloc_r+0x2f8>
 40158dc:	008004c4 	movi	r2,19
 40158e0:	1180352e 	bgeu	r2,r6,40159b8 <_realloc_r+0x368>
 40158e4:	a8800017 	ldw	r2,0(r21)
 40158e8:	b0800215 	stw	r2,8(r22)
 40158ec:	a8800117 	ldw	r2,4(r21)
 40158f0:	b0800315 	stw	r2,12(r22)
 40158f4:	008006c4 	movi	r2,27
 40158f8:	11807f36 	bltu	r2,r6,4015af8 <_realloc_r+0x4a8>
 40158fc:	b0800404 	addi	r2,r22,16
 4015900:	ad400204 	addi	r21,r21,8
 4015904:	00002d06 	br	40159bc <_realloc_r+0x36c>
 4015908:	adbffe17 	ldw	r22,-8(r21)
 401590c:	00bfff04 	movi	r2,-4
 4015910:	9dadc83a 	sub	r22,r19,r22
 4015914:	b1000117 	ldw	r4,4(r22)
 4015918:	2084703a 	and	r2,r4,r2
 401591c:	b03f7726 	beq	r22,zero,40156fc <__alt_data_end+0xfc0156fc>
 4015920:	80af883a 	add	r23,r16,r2
 4015924:	b8ff7516 	blt	r23,r3,40156fc <__alt_data_end+0xfc0156fc>
 4015928:	b0800317 	ldw	r2,12(r22)
 401592c:	b0c00217 	ldw	r3,8(r22)
 4015930:	81bfff04 	addi	r6,r16,-4
 4015934:	01000904 	movi	r4,36
 4015938:	18800315 	stw	r2,12(r3)
 401593c:	10c00215 	stw	r3,8(r2)
 4015940:	b4800204 	addi	r18,r22,8
 4015944:	21bfe52e 	bgeu	r4,r6,40158dc <__alt_data_end+0xfc0158dc>
 4015948:	a80b883a 	mov	r5,r21
 401594c:	9009883a 	mov	r4,r18
 4015950:	40143900 	call	4014390 <memmove>
 4015954:	b821883a 	mov	r16,r23
 4015958:	b027883a 	mov	r19,r22
 401595c:	003f8a06 	br	4015788 <__alt_data_end+0xfc015788>
 4015960:	300b883a 	mov	r5,r6
 4015964:	dfc00917 	ldw	ra,36(sp)
 4015968:	df000817 	ldw	fp,32(sp)
 401596c:	ddc00717 	ldw	r23,28(sp)
 4015970:	dd800617 	ldw	r22,24(sp)
 4015974:	dd400517 	ldw	r21,20(sp)
 4015978:	dd000417 	ldw	r20,16(sp)
 401597c:	dcc00317 	ldw	r19,12(sp)
 4015980:	dc800217 	ldw	r18,8(sp)
 4015984:	dc400117 	ldw	r17,4(sp)
 4015988:	dc000017 	ldw	r16,0(sp)
 401598c:	dec00a04 	addi	sp,sp,40
 4015990:	400bee01 	jmpi	400bee0 <_malloc_r>
 4015994:	a8c00017 	ldw	r3,0(r21)
 4015998:	90c00015 	stw	r3,0(r18)
 401599c:	a8c00117 	ldw	r3,4(r21)
 40159a0:	90c00115 	stw	r3,4(r18)
 40159a4:	00c006c4 	movi	r3,27
 40159a8:	19804536 	bltu	r3,r6,4015ac0 <_realloc_r+0x470>
 40159ac:	90800204 	addi	r2,r18,8
 40159b0:	a8c00204 	addi	r3,r21,8
 40159b4:	003f6306 	br	4015744 <__alt_data_end+0xfc015744>
 40159b8:	9005883a 	mov	r2,r18
 40159bc:	a8c00017 	ldw	r3,0(r21)
 40159c0:	b821883a 	mov	r16,r23
 40159c4:	b027883a 	mov	r19,r22
 40159c8:	10c00015 	stw	r3,0(r2)
 40159cc:	a8c00117 	ldw	r3,4(r21)
 40159d0:	10c00115 	stw	r3,4(r2)
 40159d4:	a8c00217 	ldw	r3,8(r21)
 40159d8:	10c00215 	stw	r3,8(r2)
 40159dc:	003f6a06 	br	4015788 <__alt_data_end+0xfc015788>
 40159e0:	9c67883a 	add	r19,r19,r17
 40159e4:	4445c83a 	sub	r2,r8,r17
 40159e8:	e4c00215 	stw	r19,8(fp)
 40159ec:	10800054 	ori	r2,r2,1
 40159f0:	98800115 	stw	r2,4(r19)
 40159f4:	a8bfff17 	ldw	r2,-4(r21)
 40159f8:	a009883a 	mov	r4,r20
 40159fc:	1080004c 	andi	r2,r2,1
 4015a00:	1462b03a 	or	r17,r2,r17
 4015a04:	ac7fff15 	stw	r17,-4(r21)
 4015a08:	401c9640 	call	401c964 <__malloc_unlock>
 4015a0c:	a805883a 	mov	r2,r21
 4015a10:	003f6b06 	br	40157c0 <__alt_data_end+0xfc0157c0>
 4015a14:	a80b883a 	mov	r5,r21
 4015a18:	9009883a 	mov	r4,r18
 4015a1c:	40143900 	call	4014390 <memmove>
 4015a20:	003f4e06 	br	401575c <__alt_data_end+0xfc01575c>
 4015a24:	89000404 	addi	r4,r17,16
 4015a28:	b93fbc16 	blt	r23,r4,401591c <__alt_data_end+0xfc01591c>
 4015a2c:	b0800317 	ldw	r2,12(r22)
 4015a30:	b0c00217 	ldw	r3,8(r22)
 4015a34:	81bfff04 	addi	r6,r16,-4
 4015a38:	01000904 	movi	r4,36
 4015a3c:	18800315 	stw	r2,12(r3)
 4015a40:	10c00215 	stw	r3,8(r2)
 4015a44:	b4800204 	addi	r18,r22,8
 4015a48:	21804336 	bltu	r4,r6,4015b58 <_realloc_r+0x508>
 4015a4c:	008004c4 	movi	r2,19
 4015a50:	11803f2e 	bgeu	r2,r6,4015b50 <_realloc_r+0x500>
 4015a54:	a8800017 	ldw	r2,0(r21)
 4015a58:	b0800215 	stw	r2,8(r22)
 4015a5c:	a8800117 	ldw	r2,4(r21)
 4015a60:	b0800315 	stw	r2,12(r22)
 4015a64:	008006c4 	movi	r2,27
 4015a68:	11803f36 	bltu	r2,r6,4015b68 <_realloc_r+0x518>
 4015a6c:	b0800404 	addi	r2,r22,16
 4015a70:	ad400204 	addi	r21,r21,8
 4015a74:	a8c00017 	ldw	r3,0(r21)
 4015a78:	10c00015 	stw	r3,0(r2)
 4015a7c:	a8c00117 	ldw	r3,4(r21)
 4015a80:	10c00115 	stw	r3,4(r2)
 4015a84:	a8c00217 	ldw	r3,8(r21)
 4015a88:	10c00215 	stw	r3,8(r2)
 4015a8c:	b447883a 	add	r3,r22,r17
 4015a90:	bc45c83a 	sub	r2,r23,r17
 4015a94:	e0c00215 	stw	r3,8(fp)
 4015a98:	10800054 	ori	r2,r2,1
 4015a9c:	18800115 	stw	r2,4(r3)
 4015aa0:	b0800117 	ldw	r2,4(r22)
 4015aa4:	a009883a 	mov	r4,r20
 4015aa8:	1080004c 	andi	r2,r2,1
 4015aac:	1462b03a 	or	r17,r2,r17
 4015ab0:	b4400115 	stw	r17,4(r22)
 4015ab4:	401c9640 	call	401c964 <__malloc_unlock>
 4015ab8:	9005883a 	mov	r2,r18
 4015abc:	003f4006 	br	40157c0 <__alt_data_end+0xfc0157c0>
 4015ac0:	a8c00217 	ldw	r3,8(r21)
 4015ac4:	90c00215 	stw	r3,8(r18)
 4015ac8:	a8c00317 	ldw	r3,12(r21)
 4015acc:	90c00315 	stw	r3,12(r18)
 4015ad0:	30801126 	beq	r6,r2,4015b18 <_realloc_r+0x4c8>
 4015ad4:	90800404 	addi	r2,r18,16
 4015ad8:	a8c00404 	addi	r3,r21,16
 4015adc:	003f1906 	br	4015744 <__alt_data_end+0xfc015744>
 4015ae0:	90ffff17 	ldw	r3,-4(r18)
 4015ae4:	00bfff04 	movi	r2,-4
 4015ae8:	a825883a 	mov	r18,r21
 4015aec:	1884703a 	and	r2,r3,r2
 4015af0:	80a1883a 	add	r16,r16,r2
 4015af4:	003f2406 	br	4015788 <__alt_data_end+0xfc015788>
 4015af8:	a8800217 	ldw	r2,8(r21)
 4015afc:	b0800415 	stw	r2,16(r22)
 4015b00:	a8800317 	ldw	r2,12(r21)
 4015b04:	b0800515 	stw	r2,20(r22)
 4015b08:	31000a26 	beq	r6,r4,4015b34 <_realloc_r+0x4e4>
 4015b0c:	b0800604 	addi	r2,r22,24
 4015b10:	ad400404 	addi	r21,r21,16
 4015b14:	003fa906 	br	40159bc <__alt_data_end+0xfc0159bc>
 4015b18:	a9000417 	ldw	r4,16(r21)
 4015b1c:	90800604 	addi	r2,r18,24
 4015b20:	a8c00604 	addi	r3,r21,24
 4015b24:	91000415 	stw	r4,16(r18)
 4015b28:	a9000517 	ldw	r4,20(r21)
 4015b2c:	91000515 	stw	r4,20(r18)
 4015b30:	003f0406 	br	4015744 <__alt_data_end+0xfc015744>
 4015b34:	a8c00417 	ldw	r3,16(r21)
 4015b38:	ad400604 	addi	r21,r21,24
 4015b3c:	b0800804 	addi	r2,r22,32
 4015b40:	b0c00615 	stw	r3,24(r22)
 4015b44:	a8ffff17 	ldw	r3,-4(r21)
 4015b48:	b0c00715 	stw	r3,28(r22)
 4015b4c:	003f9b06 	br	40159bc <__alt_data_end+0xfc0159bc>
 4015b50:	9005883a 	mov	r2,r18
 4015b54:	003fc706 	br	4015a74 <__alt_data_end+0xfc015a74>
 4015b58:	a80b883a 	mov	r5,r21
 4015b5c:	9009883a 	mov	r4,r18
 4015b60:	40143900 	call	4014390 <memmove>
 4015b64:	003fc906 	br	4015a8c <__alt_data_end+0xfc015a8c>
 4015b68:	a8800217 	ldw	r2,8(r21)
 4015b6c:	b0800415 	stw	r2,16(r22)
 4015b70:	a8800317 	ldw	r2,12(r21)
 4015b74:	b0800515 	stw	r2,20(r22)
 4015b78:	31000726 	beq	r6,r4,4015b98 <_realloc_r+0x548>
 4015b7c:	b0800604 	addi	r2,r22,24
 4015b80:	ad400404 	addi	r21,r21,16
 4015b84:	003fbb06 	br	4015a74 <__alt_data_end+0xfc015a74>
 4015b88:	a009883a 	mov	r4,r20
 4015b8c:	401c9640 	call	401c964 <__malloc_unlock>
 4015b90:	0005883a 	mov	r2,zero
 4015b94:	003f0a06 	br	40157c0 <__alt_data_end+0xfc0157c0>
 4015b98:	a8c00417 	ldw	r3,16(r21)
 4015b9c:	ad400604 	addi	r21,r21,24
 4015ba0:	b0800804 	addi	r2,r22,32
 4015ba4:	b0c00615 	stw	r3,24(r22)
 4015ba8:	a8ffff17 	ldw	r3,-4(r21)
 4015bac:	b0c00715 	stw	r3,28(r22)
 4015bb0:	003fb006 	br	4015a74 <__alt_data_end+0xfc015a74>

04015bb4 <__fpclassifyd>:
 4015bb4:	00a00034 	movhi	r2,32768
 4015bb8:	10bfffc4 	addi	r2,r2,-1
 4015bbc:	2884703a 	and	r2,r5,r2
 4015bc0:	10000726 	beq	r2,zero,4015be0 <__fpclassifyd+0x2c>
 4015bc4:	00fffc34 	movhi	r3,65520
 4015bc8:	019ff834 	movhi	r6,32736
 4015bcc:	28c7883a 	add	r3,r5,r3
 4015bd0:	31bfffc4 	addi	r6,r6,-1
 4015bd4:	30c00536 	bltu	r6,r3,4015bec <__fpclassifyd+0x38>
 4015bd8:	00800104 	movi	r2,4
 4015bdc:	f800283a 	ret
 4015be0:	2000021e 	bne	r4,zero,4015bec <__fpclassifyd+0x38>
 4015be4:	00800084 	movi	r2,2
 4015be8:	f800283a 	ret
 4015bec:	00dffc34 	movhi	r3,32752
 4015bf0:	019ff834 	movhi	r6,32736
 4015bf4:	28cb883a 	add	r5,r5,r3
 4015bf8:	31bfffc4 	addi	r6,r6,-1
 4015bfc:	317ff62e 	bgeu	r6,r5,4015bd8 <__alt_data_end+0xfc015bd8>
 4015c00:	01400434 	movhi	r5,16
 4015c04:	297fffc4 	addi	r5,r5,-1
 4015c08:	28800236 	bltu	r5,r2,4015c14 <__fpclassifyd+0x60>
 4015c0c:	008000c4 	movi	r2,3
 4015c10:	f800283a 	ret
 4015c14:	10c00226 	beq	r2,r3,4015c20 <__fpclassifyd+0x6c>
 4015c18:	0005883a 	mov	r2,zero
 4015c1c:	f800283a 	ret
 4015c20:	2005003a 	cmpeq	r2,r4,zero
 4015c24:	f800283a 	ret

04015c28 <__sread>:
 4015c28:	defffe04 	addi	sp,sp,-8
 4015c2c:	dc000015 	stw	r16,0(sp)
 4015c30:	2821883a 	mov	r16,r5
 4015c34:	2940038f 	ldh	r5,14(r5)
 4015c38:	dfc00115 	stw	ra,4(sp)
 4015c3c:	4018ea40 	call	4018ea4 <_read_r>
 4015c40:	10000716 	blt	r2,zero,4015c60 <__sread+0x38>
 4015c44:	80c01417 	ldw	r3,80(r16)
 4015c48:	1887883a 	add	r3,r3,r2
 4015c4c:	80c01415 	stw	r3,80(r16)
 4015c50:	dfc00117 	ldw	ra,4(sp)
 4015c54:	dc000017 	ldw	r16,0(sp)
 4015c58:	dec00204 	addi	sp,sp,8
 4015c5c:	f800283a 	ret
 4015c60:	80c0030b 	ldhu	r3,12(r16)
 4015c64:	18fbffcc 	andi	r3,r3,61439
 4015c68:	80c0030d 	sth	r3,12(r16)
 4015c6c:	dfc00117 	ldw	ra,4(sp)
 4015c70:	dc000017 	ldw	r16,0(sp)
 4015c74:	dec00204 	addi	sp,sp,8
 4015c78:	f800283a 	ret

04015c7c <__seofread>:
 4015c7c:	0005883a 	mov	r2,zero
 4015c80:	f800283a 	ret

04015c84 <__swrite>:
 4015c84:	2880030b 	ldhu	r2,12(r5)
 4015c88:	defffb04 	addi	sp,sp,-20
 4015c8c:	dcc00315 	stw	r19,12(sp)
 4015c90:	dc800215 	stw	r18,8(sp)
 4015c94:	dc400115 	stw	r17,4(sp)
 4015c98:	dc000015 	stw	r16,0(sp)
 4015c9c:	dfc00415 	stw	ra,16(sp)
 4015ca0:	10c0400c 	andi	r3,r2,256
 4015ca4:	2821883a 	mov	r16,r5
 4015ca8:	2023883a 	mov	r17,r4
 4015cac:	3025883a 	mov	r18,r6
 4015cb0:	3827883a 	mov	r19,r7
 4015cb4:	18000526 	beq	r3,zero,4015ccc <__swrite+0x48>
 4015cb8:	2940038f 	ldh	r5,14(r5)
 4015cbc:	01c00084 	movi	r7,2
 4015cc0:	000d883a 	mov	r6,zero
 4015cc4:	4018e440 	call	4018e44 <_lseek_r>
 4015cc8:	8080030b 	ldhu	r2,12(r16)
 4015ccc:	8140038f 	ldh	r5,14(r16)
 4015cd0:	10bbffcc 	andi	r2,r2,61439
 4015cd4:	980f883a 	mov	r7,r19
 4015cd8:	900d883a 	mov	r6,r18
 4015cdc:	8809883a 	mov	r4,r17
 4015ce0:	8080030d 	sth	r2,12(r16)
 4015ce4:	dfc00417 	ldw	ra,16(sp)
 4015ce8:	dcc00317 	ldw	r19,12(sp)
 4015cec:	dc800217 	ldw	r18,8(sp)
 4015cf0:	dc400117 	ldw	r17,4(sp)
 4015cf4:	dc000017 	ldw	r16,0(sp)
 4015cf8:	dec00504 	addi	sp,sp,20
 4015cfc:	40189101 	jmpi	4018910 <_write_r>

04015d00 <__sseek>:
 4015d00:	defffe04 	addi	sp,sp,-8
 4015d04:	dc000015 	stw	r16,0(sp)
 4015d08:	2821883a 	mov	r16,r5
 4015d0c:	2940038f 	ldh	r5,14(r5)
 4015d10:	dfc00115 	stw	ra,4(sp)
 4015d14:	4018e440 	call	4018e44 <_lseek_r>
 4015d18:	00ffffc4 	movi	r3,-1
 4015d1c:	10c00826 	beq	r2,r3,4015d40 <__sseek+0x40>
 4015d20:	80c0030b 	ldhu	r3,12(r16)
 4015d24:	80801415 	stw	r2,80(r16)
 4015d28:	18c40014 	ori	r3,r3,4096
 4015d2c:	80c0030d 	sth	r3,12(r16)
 4015d30:	dfc00117 	ldw	ra,4(sp)
 4015d34:	dc000017 	ldw	r16,0(sp)
 4015d38:	dec00204 	addi	sp,sp,8
 4015d3c:	f800283a 	ret
 4015d40:	80c0030b 	ldhu	r3,12(r16)
 4015d44:	18fbffcc 	andi	r3,r3,61439
 4015d48:	80c0030d 	sth	r3,12(r16)
 4015d4c:	dfc00117 	ldw	ra,4(sp)
 4015d50:	dc000017 	ldw	r16,0(sp)
 4015d54:	dec00204 	addi	sp,sp,8
 4015d58:	f800283a 	ret

04015d5c <__sclose>:
 4015d5c:	2940038f 	ldh	r5,14(r5)
 4015d60:	40189701 	jmpi	4018970 <_close_r>

04015d64 <__ssprint_r>:
 4015d64:	30800217 	ldw	r2,8(r6)
 4015d68:	defff604 	addi	sp,sp,-40
 4015d6c:	dc800215 	stw	r18,8(sp)
 4015d70:	dfc00915 	stw	ra,36(sp)
 4015d74:	df000815 	stw	fp,32(sp)
 4015d78:	ddc00715 	stw	r23,28(sp)
 4015d7c:	dd800615 	stw	r22,24(sp)
 4015d80:	dd400515 	stw	r21,20(sp)
 4015d84:	dd000415 	stw	r20,16(sp)
 4015d88:	dcc00315 	stw	r19,12(sp)
 4015d8c:	dc400115 	stw	r17,4(sp)
 4015d90:	dc000015 	stw	r16,0(sp)
 4015d94:	3025883a 	mov	r18,r6
 4015d98:	10005826 	beq	r2,zero,4015efc <__ssprint_r+0x198>
 4015d9c:	2027883a 	mov	r19,r4
 4015da0:	35c00017 	ldw	r23,0(r6)
 4015da4:	29000017 	ldw	r4,0(r5)
 4015da8:	28800217 	ldw	r2,8(r5)
 4015dac:	2823883a 	mov	r17,r5
 4015db0:	0039883a 	mov	fp,zero
 4015db4:	0021883a 	mov	r16,zero
 4015db8:	80003926 	beq	r16,zero,4015ea0 <__ssprint_r+0x13c>
 4015dbc:	102b883a 	mov	r21,r2
 4015dc0:	102d883a 	mov	r22,r2
 4015dc4:	80803a36 	bltu	r16,r2,4015eb0 <__ssprint_r+0x14c>
 4015dc8:	88c0030b 	ldhu	r3,12(r17)
 4015dcc:	1881200c 	andi	r2,r3,1152
 4015dd0:	10002626 	beq	r2,zero,4015e6c <__ssprint_r+0x108>
 4015dd4:	88800517 	ldw	r2,20(r17)
 4015dd8:	89400417 	ldw	r5,16(r17)
 4015ddc:	81800044 	addi	r6,r16,1
 4015de0:	108f883a 	add	r7,r2,r2
 4015de4:	3885883a 	add	r2,r7,r2
 4015de8:	100ed7fa 	srli	r7,r2,31
 4015dec:	216dc83a 	sub	r22,r4,r5
 4015df0:	3589883a 	add	r4,r6,r22
 4015df4:	3885883a 	add	r2,r7,r2
 4015df8:	102bd07a 	srai	r21,r2,1
 4015dfc:	a80d883a 	mov	r6,r21
 4015e00:	a900022e 	bgeu	r21,r4,4015e0c <__ssprint_r+0xa8>
 4015e04:	202b883a 	mov	r21,r4
 4015e08:	200d883a 	mov	r6,r4
 4015e0c:	18c1000c 	andi	r3,r3,1024
 4015e10:	18002a26 	beq	r3,zero,4015ebc <__ssprint_r+0x158>
 4015e14:	300b883a 	mov	r5,r6
 4015e18:	9809883a 	mov	r4,r19
 4015e1c:	400bee00 	call	400bee0 <_malloc_r>
 4015e20:	1029883a 	mov	r20,r2
 4015e24:	10002c26 	beq	r2,zero,4015ed8 <__ssprint_r+0x174>
 4015e28:	89400417 	ldw	r5,16(r17)
 4015e2c:	b00d883a 	mov	r6,r22
 4015e30:	1009883a 	mov	r4,r2
 4015e34:	400c7680 	call	400c768 <memcpy>
 4015e38:	8880030b 	ldhu	r2,12(r17)
 4015e3c:	00fedfc4 	movi	r3,-1153
 4015e40:	10c4703a 	and	r2,r2,r3
 4015e44:	10802014 	ori	r2,r2,128
 4015e48:	8880030d 	sth	r2,12(r17)
 4015e4c:	a589883a 	add	r4,r20,r22
 4015e50:	adadc83a 	sub	r22,r21,r22
 4015e54:	8d400515 	stw	r21,20(r17)
 4015e58:	8d800215 	stw	r22,8(r17)
 4015e5c:	8d000415 	stw	r20,16(r17)
 4015e60:	89000015 	stw	r4,0(r17)
 4015e64:	802b883a 	mov	r21,r16
 4015e68:	802d883a 	mov	r22,r16
 4015e6c:	b00d883a 	mov	r6,r22
 4015e70:	e00b883a 	mov	r5,fp
 4015e74:	40143900 	call	4014390 <memmove>
 4015e78:	88800217 	ldw	r2,8(r17)
 4015e7c:	89000017 	ldw	r4,0(r17)
 4015e80:	90c00217 	ldw	r3,8(r18)
 4015e84:	1545c83a 	sub	r2,r2,r21
 4015e88:	2589883a 	add	r4,r4,r22
 4015e8c:	88800215 	stw	r2,8(r17)
 4015e90:	89000015 	stw	r4,0(r17)
 4015e94:	1c21c83a 	sub	r16,r3,r16
 4015e98:	94000215 	stw	r16,8(r18)
 4015e9c:	80001726 	beq	r16,zero,4015efc <__ssprint_r+0x198>
 4015ea0:	bf000017 	ldw	fp,0(r23)
 4015ea4:	bc000117 	ldw	r16,4(r23)
 4015ea8:	bdc00204 	addi	r23,r23,8
 4015eac:	003fc206 	br	4015db8 <__alt_data_end+0xfc015db8>
 4015eb0:	802b883a 	mov	r21,r16
 4015eb4:	802d883a 	mov	r22,r16
 4015eb8:	003fec06 	br	4015e6c <__alt_data_end+0xfc015e6c>
 4015ebc:	9809883a 	mov	r4,r19
 4015ec0:	40156500 	call	4015650 <_realloc_r>
 4015ec4:	1029883a 	mov	r20,r2
 4015ec8:	103fe01e 	bne	r2,zero,4015e4c <__alt_data_end+0xfc015e4c>
 4015ecc:	89400417 	ldw	r5,16(r17)
 4015ed0:	9809883a 	mov	r4,r19
 4015ed4:	40136c00 	call	40136c0 <_free_r>
 4015ed8:	88c0030b 	ldhu	r3,12(r17)
 4015edc:	00800304 	movi	r2,12
 4015ee0:	98800015 	stw	r2,0(r19)
 4015ee4:	18c01014 	ori	r3,r3,64
 4015ee8:	88c0030d 	sth	r3,12(r17)
 4015eec:	00bfffc4 	movi	r2,-1
 4015ef0:	90000215 	stw	zero,8(r18)
 4015ef4:	90000115 	stw	zero,4(r18)
 4015ef8:	00000206 	br	4015f04 <__ssprint_r+0x1a0>
 4015efc:	90000115 	stw	zero,4(r18)
 4015f00:	0005883a 	mov	r2,zero
 4015f04:	dfc00917 	ldw	ra,36(sp)
 4015f08:	df000817 	ldw	fp,32(sp)
 4015f0c:	ddc00717 	ldw	r23,28(sp)
 4015f10:	dd800617 	ldw	r22,24(sp)
 4015f14:	dd400517 	ldw	r21,20(sp)
 4015f18:	dd000417 	ldw	r20,16(sp)
 4015f1c:	dcc00317 	ldw	r19,12(sp)
 4015f20:	dc800217 	ldw	r18,8(sp)
 4015f24:	dc400117 	ldw	r17,4(sp)
 4015f28:	dc000017 	ldw	r16,0(sp)
 4015f2c:	dec00a04 	addi	sp,sp,40
 4015f30:	f800283a 	ret

04015f34 <___svfiprintf_internal_r>:
 4015f34:	2880030b 	ldhu	r2,12(r5)
 4015f38:	deffc804 	addi	sp,sp,-224
 4015f3c:	dcc03115 	stw	r19,196(sp)
 4015f40:	dfc03715 	stw	ra,220(sp)
 4015f44:	df003615 	stw	fp,216(sp)
 4015f48:	ddc03515 	stw	r23,212(sp)
 4015f4c:	dd803415 	stw	r22,208(sp)
 4015f50:	dd403315 	stw	r21,204(sp)
 4015f54:	dd003215 	stw	r20,200(sp)
 4015f58:	dc803015 	stw	r18,192(sp)
 4015f5c:	dc402f15 	stw	r17,188(sp)
 4015f60:	dc002e15 	stw	r16,184(sp)
 4015f64:	d9402715 	stw	r5,156(sp)
 4015f68:	d9002a15 	stw	r4,168(sp)
 4015f6c:	1080200c 	andi	r2,r2,128
 4015f70:	d9c02315 	stw	r7,140(sp)
 4015f74:	3027883a 	mov	r19,r6
 4015f78:	10000226 	beq	r2,zero,4015f84 <___svfiprintf_internal_r+0x50>
 4015f7c:	28800417 	ldw	r2,16(r5)
 4015f80:	10041d26 	beq	r2,zero,4016ff8 <___svfiprintf_internal_r+0x10c4>
 4015f84:	dac01a04 	addi	r11,sp,104
 4015f88:	dac01e15 	stw	r11,120(sp)
 4015f8c:	d8801e17 	ldw	r2,120(sp)
 4015f90:	dac019c4 	addi	r11,sp,103
 4015f94:	dd402a17 	ldw	r21,168(sp)
 4015f98:	ddc02717 	ldw	r23,156(sp)
 4015f9c:	058100b4 	movhi	r22,1026
 4015fa0:	050100b4 	movhi	r20,1026
 4015fa4:	dac01f15 	stw	r11,124(sp)
 4015fa8:	12d7c83a 	sub	r11,r2,r11
 4015fac:	b5803004 	addi	r22,r22,192
 4015fb0:	a5002c04 	addi	r20,r20,176
 4015fb4:	dec01a15 	stw	sp,104(sp)
 4015fb8:	d8001c15 	stw	zero,112(sp)
 4015fbc:	d8001b15 	stw	zero,108(sp)
 4015fc0:	d811883a 	mov	r8,sp
 4015fc4:	d8002915 	stw	zero,164(sp)
 4015fc8:	d8002515 	stw	zero,148(sp)
 4015fcc:	dac02b15 	stw	r11,172(sp)
 4015fd0:	98800007 	ldb	r2,0(r19)
 4015fd4:	1002dd26 	beq	r2,zero,4016b4c <___svfiprintf_internal_r+0xc18>
 4015fd8:	00c00944 	movi	r3,37
 4015fdc:	9823883a 	mov	r17,r19
 4015fe0:	10c0021e 	bne	r2,r3,4015fec <___svfiprintf_internal_r+0xb8>
 4015fe4:	00001406 	br	4016038 <___svfiprintf_internal_r+0x104>
 4015fe8:	10c00326 	beq	r2,r3,4015ff8 <___svfiprintf_internal_r+0xc4>
 4015fec:	8c400044 	addi	r17,r17,1
 4015ff0:	88800007 	ldb	r2,0(r17)
 4015ff4:	103ffc1e 	bne	r2,zero,4015fe8 <__alt_data_end+0xfc015fe8>
 4015ff8:	8ce1c83a 	sub	r16,r17,r19
 4015ffc:	80000e26 	beq	r16,zero,4016038 <___svfiprintf_internal_r+0x104>
 4016000:	d8c01c17 	ldw	r3,112(sp)
 4016004:	d8801b17 	ldw	r2,108(sp)
 4016008:	44c00015 	stw	r19,0(r8)
 401600c:	1c07883a 	add	r3,r3,r16
 4016010:	10800044 	addi	r2,r2,1
 4016014:	d8c01c15 	stw	r3,112(sp)
 4016018:	44000115 	stw	r16,4(r8)
 401601c:	d8801b15 	stw	r2,108(sp)
 4016020:	00c001c4 	movi	r3,7
 4016024:	18831e16 	blt	r3,r2,4016ca0 <___svfiprintf_internal_r+0xd6c>
 4016028:	42000204 	addi	r8,r8,8
 401602c:	dac02517 	ldw	r11,148(sp)
 4016030:	5c17883a 	add	r11,r11,r16
 4016034:	dac02515 	stw	r11,148(sp)
 4016038:	88800007 	ldb	r2,0(r17)
 401603c:	1002c526 	beq	r2,zero,4016b54 <___svfiprintf_internal_r+0xc20>
 4016040:	88c00047 	ldb	r3,1(r17)
 4016044:	8cc00044 	addi	r19,r17,1
 4016048:	d8001d85 	stb	zero,118(sp)
 401604c:	0009883a 	mov	r4,zero
 4016050:	000f883a 	mov	r7,zero
 4016054:	043fffc4 	movi	r16,-1
 4016058:	d8002415 	stw	zero,144(sp)
 401605c:	0025883a 	mov	r18,zero
 4016060:	01401604 	movi	r5,88
 4016064:	01800244 	movi	r6,9
 4016068:	02800a84 	movi	r10,42
 401606c:	02401b04 	movi	r9,108
 4016070:	9cc00044 	addi	r19,r19,1
 4016074:	18bff804 	addi	r2,r3,-32
 4016078:	2881dd36 	bltu	r5,r2,40167f0 <___svfiprintf_internal_r+0x8bc>
 401607c:	100490ba 	slli	r2,r2,2
 4016080:	02c10074 	movhi	r11,1025
 4016084:	5ad82504 	addi	r11,r11,24724
 4016088:	12c5883a 	add	r2,r2,r11
 401608c:	10800017 	ldw	r2,0(r2)
 4016090:	1000683a 	jmp	r2
 4016094:	04016290 	cmplti	r16,zero,1418
 4016098:	040167f0 	cmpltui	r16,zero,1439
 401609c:	040167f0 	cmpltui	r16,zero,1439
 40160a0:	04016284 	movi	r16,1418
 40160a4:	040167f0 	cmpltui	r16,zero,1439
 40160a8:	040167f0 	cmpltui	r16,zero,1439
 40160ac:	040167f0 	cmpltui	r16,zero,1439
 40160b0:	040167f0 	cmpltui	r16,zero,1439
 40160b4:	040167f0 	cmpltui	r16,zero,1439
 40160b8:	040167f0 	cmpltui	r16,zero,1439
 40160bc:	040161f8 	rdprs	r16,zero,1415
 40160c0:	040163d4 	movui	r16,1423
 40160c4:	040167f0 	cmpltui	r16,zero,1439
 40160c8:	04016224 	muli	r16,zero,1416
 40160cc:	04016824 	muli	r16,zero,1440
 40160d0:	040167f0 	cmpltui	r16,zero,1439
 40160d4:	04016818 	cmpnei	r16,zero,1440
 40160d8:	040167b8 	rdprs	r16,zero,1438
 40160dc:	040167b8 	rdprs	r16,zero,1438
 40160e0:	040167b8 	rdprs	r16,zero,1438
 40160e4:	040167b8 	rdprs	r16,zero,1438
 40160e8:	040167b8 	rdprs	r16,zero,1438
 40160ec:	040167b8 	rdprs	r16,zero,1438
 40160f0:	040167b8 	rdprs	r16,zero,1438
 40160f4:	040167b8 	rdprs	r16,zero,1438
 40160f8:	040167b8 	rdprs	r16,zero,1438
 40160fc:	040167f0 	cmpltui	r16,zero,1439
 4016100:	040167f0 	cmpltui	r16,zero,1439
 4016104:	040167f0 	cmpltui	r16,zero,1439
 4016108:	040167f0 	cmpltui	r16,zero,1439
 401610c:	040167f0 	cmpltui	r16,zero,1439
 4016110:	040167f0 	cmpltui	r16,zero,1439
 4016114:	040167f0 	cmpltui	r16,zero,1439
 4016118:	040167f0 	cmpltui	r16,zero,1439
 401611c:	040167f0 	cmpltui	r16,zero,1439
 4016120:	040167f0 	cmpltui	r16,zero,1439
 4016124:	04016754 	movui	r16,1437
 4016128:	040167f0 	cmpltui	r16,zero,1439
 401612c:	040167f0 	cmpltui	r16,zero,1439
 4016130:	040167f0 	cmpltui	r16,zero,1439
 4016134:	040167f0 	cmpltui	r16,zero,1439
 4016138:	040167f0 	cmpltui	r16,zero,1439
 401613c:	040167f0 	cmpltui	r16,zero,1439
 4016140:	040167f0 	cmpltui	r16,zero,1439
 4016144:	040167f0 	cmpltui	r16,zero,1439
 4016148:	040167f0 	cmpltui	r16,zero,1439
 401614c:	040167f0 	cmpltui	r16,zero,1439
 4016150:	040168cc 	andi	r16,zero,1443
 4016154:	040167f0 	cmpltui	r16,zero,1439
 4016158:	040167f0 	cmpltui	r16,zero,1439
 401615c:	040167f0 	cmpltui	r16,zero,1439
 4016160:	040167f0 	cmpltui	r16,zero,1439
 4016164:	040167f0 	cmpltui	r16,zero,1439
 4016168:	04016864 	muli	r16,zero,1441
 401616c:	040167f0 	cmpltui	r16,zero,1439
 4016170:	040167f0 	cmpltui	r16,zero,1439
 4016174:	04016598 	cmpnei	r16,zero,1430
 4016178:	040167f0 	cmpltui	r16,zero,1439
 401617c:	040167f0 	cmpltui	r16,zero,1439
 4016180:	040167f0 	cmpltui	r16,zero,1439
 4016184:	040167f0 	cmpltui	r16,zero,1439
 4016188:	040167f0 	cmpltui	r16,zero,1439
 401618c:	040167f0 	cmpltui	r16,zero,1439
 4016190:	040167f0 	cmpltui	r16,zero,1439
 4016194:	040167f0 	cmpltui	r16,zero,1439
 4016198:	040167f0 	cmpltui	r16,zero,1439
 401619c:	040167f0 	cmpltui	r16,zero,1439
 40161a0:	04016488 	cmpgei	r16,zero,1426
 40161a4:	04016634 	movhi	r16,1432
 40161a8:	040167f0 	cmpltui	r16,zero,1439
 40161ac:	040167f0 	cmpltui	r16,zero,1439
 40161b0:	040167f0 	cmpltui	r16,zero,1439
 40161b4:	04016628 	cmpgeui	r16,zero,1432
 40161b8:	04016634 	movhi	r16,1432
 40161bc:	040167f0 	cmpltui	r16,zero,1439
 40161c0:	040167f0 	cmpltui	r16,zero,1439
 40161c4:	04016618 	cmpnei	r16,zero,1432
 40161c8:	040167f0 	cmpltui	r16,zero,1439
 40161cc:	040165dc 	xori	r16,zero,1431
 40161d0:	040163e4 	muli	r16,zero,1423
 40161d4:	04016230 	cmpltui	r16,zero,1416
 40161d8:	04016748 	cmpgei	r16,zero,1437
 40161dc:	040167f0 	cmpltui	r16,zero,1439
 40161e0:	040166fc 	xorhi	r16,zero,1435
 40161e4:	040167f0 	cmpltui	r16,zero,1439
 40161e8:	04016354 	movui	r16,1421
 40161ec:	040167f0 	cmpltui	r16,zero,1439
 40161f0:	040167f0 	cmpltui	r16,zero,1439
 40161f4:	040162b0 	cmpltui	r16,zero,1418
 40161f8:	dac02317 	ldw	r11,140(sp)
 40161fc:	5ac00017 	ldw	r11,0(r11)
 4016200:	dac02415 	stw	r11,144(sp)
 4016204:	dac02317 	ldw	r11,140(sp)
 4016208:	58800104 	addi	r2,r11,4
 401620c:	dac02417 	ldw	r11,144(sp)
 4016210:	5802e90e 	bge	r11,zero,4016db8 <___svfiprintf_internal_r+0xe84>
 4016214:	dac02417 	ldw	r11,144(sp)
 4016218:	d8802315 	stw	r2,140(sp)
 401621c:	02d7c83a 	sub	r11,zero,r11
 4016220:	dac02415 	stw	r11,144(sp)
 4016224:	94800114 	ori	r18,r18,4
 4016228:	98c00007 	ldb	r3,0(r19)
 401622c:	003f9006 	br	4016070 <__alt_data_end+0xfc016070>
 4016230:	00800c04 	movi	r2,48
 4016234:	dac02317 	ldw	r11,140(sp)
 4016238:	d8801d05 	stb	r2,116(sp)
 401623c:	00801e04 	movi	r2,120
 4016240:	d8801d45 	stb	r2,117(sp)
 4016244:	d8001d85 	stb	zero,118(sp)
 4016248:	58c00104 	addi	r3,r11,4
 401624c:	5f000017 	ldw	fp,0(r11)
 4016250:	0013883a 	mov	r9,zero
 4016254:	90800094 	ori	r2,r18,2
 4016258:	80032b16 	blt	r16,zero,4016f08 <___svfiprintf_internal_r+0xfd4>
 401625c:	00bfdfc4 	movi	r2,-129
 4016260:	90a4703a 	and	r18,r18,r2
 4016264:	d8c02315 	stw	r3,140(sp)
 4016268:	94800094 	ori	r18,r18,2
 401626c:	e002dc26 	beq	fp,zero,4016de0 <___svfiprintf_internal_r+0xeac>
 4016270:	010100b4 	movhi	r4,1026
 4016274:	213fc404 	addi	r4,r4,-240
 4016278:	0015883a 	mov	r10,zero
 401627c:	d9002915 	stw	r4,164(sp)
 4016280:	00002306 	br	4016310 <___svfiprintf_internal_r+0x3dc>
 4016284:	94800054 	ori	r18,r18,1
 4016288:	98c00007 	ldb	r3,0(r19)
 401628c:	003f7806 	br	4016070 <__alt_data_end+0xfc016070>
 4016290:	38803fcc 	andi	r2,r7,255
 4016294:	1080201c 	xori	r2,r2,128
 4016298:	10bfe004 	addi	r2,r2,-128
 401629c:	1002f31e 	bne	r2,zero,4016e6c <___svfiprintf_internal_r+0xf38>
 40162a0:	01000044 	movi	r4,1
 40162a4:	01c00804 	movi	r7,32
 40162a8:	98c00007 	ldb	r3,0(r19)
 40162ac:	003f7006 	br	4016070 <__alt_data_end+0xfc016070>
 40162b0:	21003fcc 	andi	r4,r4,255
 40162b4:	2003aa1e 	bne	r4,zero,4017160 <___svfiprintf_internal_r+0x122c>
 40162b8:	008100b4 	movhi	r2,1026
 40162bc:	10bfc404 	addi	r2,r2,-240
 40162c0:	d8802915 	stw	r2,164(sp)
 40162c4:	9080080c 	andi	r2,r18,32
 40162c8:	1000ba26 	beq	r2,zero,40165b4 <___svfiprintf_internal_r+0x680>
 40162cc:	dac02317 	ldw	r11,140(sp)
 40162d0:	5f000017 	ldw	fp,0(r11)
 40162d4:	5a400117 	ldw	r9,4(r11)
 40162d8:	5ac00204 	addi	r11,r11,8
 40162dc:	dac02315 	stw	r11,140(sp)
 40162e0:	9080004c 	andi	r2,r18,1
 40162e4:	10029026 	beq	r2,zero,4016d28 <___svfiprintf_internal_r+0xdf4>
 40162e8:	e244b03a 	or	r2,fp,r9
 40162ec:	1002d41e 	bne	r2,zero,4016e40 <___svfiprintf_internal_r+0xf0c>
 40162f0:	d8001d85 	stb	zero,118(sp)
 40162f4:	80030b16 	blt	r16,zero,4016f24 <___svfiprintf_internal_r+0xff0>
 40162f8:	00bfdfc4 	movi	r2,-129
 40162fc:	90a4703a 	and	r18,r18,r2
 4016300:	0015883a 	mov	r10,zero
 4016304:	80002426 	beq	r16,zero,4016398 <___svfiprintf_internal_r+0x464>
 4016308:	0039883a 	mov	fp,zero
 401630c:	0013883a 	mov	r9,zero
 4016310:	d9002917 	ldw	r4,164(sp)
 4016314:	dc401a04 	addi	r17,sp,104
 4016318:	e08003cc 	andi	r2,fp,15
 401631c:	4806973a 	slli	r3,r9,28
 4016320:	2085883a 	add	r2,r4,r2
 4016324:	e038d13a 	srli	fp,fp,4
 4016328:	10800003 	ldbu	r2,0(r2)
 401632c:	4812d13a 	srli	r9,r9,4
 4016330:	8c7fffc4 	addi	r17,r17,-1
 4016334:	1f38b03a 	or	fp,r3,fp
 4016338:	88800005 	stb	r2,0(r17)
 401633c:	e244b03a 	or	r2,fp,r9
 4016340:	103ff51e 	bne	r2,zero,4016318 <__alt_data_end+0xfc016318>
 4016344:	dac01e17 	ldw	r11,120(sp)
 4016348:	5c57c83a 	sub	r11,r11,r17
 401634c:	dac02115 	stw	r11,132(sp)
 4016350:	00001406 	br	40163a4 <___svfiprintf_internal_r+0x470>
 4016354:	21003fcc 	andi	r4,r4,255
 4016358:	2003741e 	bne	r4,zero,401712c <___svfiprintf_internal_r+0x11f8>
 401635c:	9080080c 	andi	r2,r18,32
 4016360:	10014526 	beq	r2,zero,4016878 <___svfiprintf_internal_r+0x944>
 4016364:	dac02317 	ldw	r11,140(sp)
 4016368:	d8001d85 	stb	zero,118(sp)
 401636c:	58c00204 	addi	r3,r11,8
 4016370:	5f000017 	ldw	fp,0(r11)
 4016374:	5a400117 	ldw	r9,4(r11)
 4016378:	8002d916 	blt	r16,zero,4016ee0 <___svfiprintf_internal_r+0xfac>
 401637c:	013fdfc4 	movi	r4,-129
 4016380:	e244b03a 	or	r2,fp,r9
 4016384:	d8c02315 	stw	r3,140(sp)
 4016388:	9124703a 	and	r18,r18,r4
 401638c:	0015883a 	mov	r10,zero
 4016390:	1000b91e 	bne	r2,zero,4016678 <___svfiprintf_internal_r+0x744>
 4016394:	8002e61e 	bne	r16,zero,4016f30 <___svfiprintf_internal_r+0xffc>
 4016398:	0021883a 	mov	r16,zero
 401639c:	d8002115 	stw	zero,132(sp)
 40163a0:	dc401a04 	addi	r17,sp,104
 40163a4:	d8c02117 	ldw	r3,132(sp)
 40163a8:	dc002015 	stw	r16,128(sp)
 40163ac:	80c0010e 	bge	r16,r3,40163b4 <___svfiprintf_internal_r+0x480>
 40163b0:	d8c02015 	stw	r3,128(sp)
 40163b4:	52803fcc 	andi	r10,r10,255
 40163b8:	5280201c 	xori	r10,r10,128
 40163bc:	52bfe004 	addi	r10,r10,-128
 40163c0:	50003c26 	beq	r10,zero,40164b4 <___svfiprintf_internal_r+0x580>
 40163c4:	dac02017 	ldw	r11,128(sp)
 40163c8:	5ac00044 	addi	r11,r11,1
 40163cc:	dac02015 	stw	r11,128(sp)
 40163d0:	00003806 	br	40164b4 <___svfiprintf_internal_r+0x580>
 40163d4:	01000044 	movi	r4,1
 40163d8:	01c00ac4 	movi	r7,43
 40163dc:	98c00007 	ldb	r3,0(r19)
 40163e0:	003f2306 	br	4016070 <__alt_data_end+0xfc016070>
 40163e4:	21003fcc 	andi	r4,r4,255
 40163e8:	2003481e 	bne	r4,zero,401710c <___svfiprintf_internal_r+0x11d8>
 40163ec:	9080080c 	andi	r2,r18,32
 40163f0:	10013b26 	beq	r2,zero,40168e0 <___svfiprintf_internal_r+0x9ac>
 40163f4:	dac02317 	ldw	r11,140(sp)
 40163f8:	d8001d85 	stb	zero,118(sp)
 40163fc:	58800204 	addi	r2,r11,8
 4016400:	5f000017 	ldw	fp,0(r11)
 4016404:	5a400117 	ldw	r9,4(r11)
 4016408:	8002a816 	blt	r16,zero,4016eac <___svfiprintf_internal_r+0xf78>
 401640c:	013fdfc4 	movi	r4,-129
 4016410:	e246b03a 	or	r3,fp,r9
 4016414:	d8802315 	stw	r2,140(sp)
 4016418:	9124703a 	and	r18,r18,r4
 401641c:	18013c26 	beq	r3,zero,4016910 <___svfiprintf_internal_r+0x9dc>
 4016420:	0015883a 	mov	r10,zero
 4016424:	dc401a04 	addi	r17,sp,104
 4016428:	e006d0fa 	srli	r3,fp,3
 401642c:	4808977a 	slli	r4,r9,29
 4016430:	4812d0fa 	srli	r9,r9,3
 4016434:	e70001cc 	andi	fp,fp,7
 4016438:	e0800c04 	addi	r2,fp,48
 401643c:	8c7fffc4 	addi	r17,r17,-1
 4016440:	20f8b03a 	or	fp,r4,r3
 4016444:	88800005 	stb	r2,0(r17)
 4016448:	e246b03a 	or	r3,fp,r9
 401644c:	183ff61e 	bne	r3,zero,4016428 <__alt_data_end+0xfc016428>
 4016450:	90c0004c 	andi	r3,r18,1
 4016454:	1800a526 	beq	r3,zero,40166ec <___svfiprintf_internal_r+0x7b8>
 4016458:	10803fcc 	andi	r2,r2,255
 401645c:	1080201c 	xori	r2,r2,128
 4016460:	10bfe004 	addi	r2,r2,-128
 4016464:	00c00c04 	movi	r3,48
 4016468:	10ffb626 	beq	r2,r3,4016344 <__alt_data_end+0xfc016344>
 401646c:	88ffffc5 	stb	r3,-1(r17)
 4016470:	d8c01e17 	ldw	r3,120(sp)
 4016474:	88bfffc4 	addi	r2,r17,-1
 4016478:	1023883a 	mov	r17,r2
 401647c:	1887c83a 	sub	r3,r3,r2
 4016480:	d8c02115 	stw	r3,132(sp)
 4016484:	003fc706 	br	40163a4 <__alt_data_end+0xfc0163a4>
 4016488:	dac02317 	ldw	r11,140(sp)
 401648c:	00c00044 	movi	r3,1
 4016490:	d8c02015 	stw	r3,128(sp)
 4016494:	58800017 	ldw	r2,0(r11)
 4016498:	5ac00104 	addi	r11,r11,4
 401649c:	d8001d85 	stb	zero,118(sp)
 40164a0:	d8801005 	stb	r2,64(sp)
 40164a4:	dac02315 	stw	r11,140(sp)
 40164a8:	d8c02115 	stw	r3,132(sp)
 40164ac:	dc401004 	addi	r17,sp,64
 40164b0:	0021883a 	mov	r16,zero
 40164b4:	90c0008c 	andi	r3,r18,2
 40164b8:	d8c02215 	stw	r3,136(sp)
 40164bc:	18000326 	beq	r3,zero,40164cc <___svfiprintf_internal_r+0x598>
 40164c0:	dac02017 	ldw	r11,128(sp)
 40164c4:	5ac00084 	addi	r11,r11,2
 40164c8:	dac02015 	stw	r11,128(sp)
 40164cc:	90c0210c 	andi	r3,r18,132
 40164d0:	d8c02615 	stw	r3,152(sp)
 40164d4:	1801131e 	bne	r3,zero,4016924 <___svfiprintf_internal_r+0x9f0>
 40164d8:	dac02417 	ldw	r11,144(sp)
 40164dc:	d8c02017 	ldw	r3,128(sp)
 40164e0:	58f9c83a 	sub	fp,r11,r3
 40164e4:	07010f0e 	bge	zero,fp,4016924 <___svfiprintf_internal_r+0x9f0>
 40164e8:	02400404 	movi	r9,16
 40164ec:	d8c01c17 	ldw	r3,112(sp)
 40164f0:	d8801b17 	ldw	r2,108(sp)
 40164f4:	4f02d60e 	bge	r9,fp,4017050 <___svfiprintf_internal_r+0x111c>
 40164f8:	014100b4 	movhi	r5,1026
 40164fc:	29403004 	addi	r5,r5,192
 4016500:	d9402815 	stw	r5,160(sp)
 4016504:	028001c4 	movi	r10,7
 4016508:	00000306 	br	4016518 <___svfiprintf_internal_r+0x5e4>
 401650c:	e73ffc04 	addi	fp,fp,-16
 4016510:	42000204 	addi	r8,r8,8
 4016514:	4f00150e 	bge	r9,fp,401656c <___svfiprintf_internal_r+0x638>
 4016518:	18c00404 	addi	r3,r3,16
 401651c:	10800044 	addi	r2,r2,1
 4016520:	45800015 	stw	r22,0(r8)
 4016524:	42400115 	stw	r9,4(r8)
 4016528:	d8c01c15 	stw	r3,112(sp)
 401652c:	d8801b15 	stw	r2,108(sp)
 4016530:	50bff60e 	bge	r10,r2,401650c <__alt_data_end+0xfc01650c>
 4016534:	d9801a04 	addi	r6,sp,104
 4016538:	b80b883a 	mov	r5,r23
 401653c:	a809883a 	mov	r4,r21
 4016540:	da402c15 	stw	r9,176(sp)
 4016544:	da802d15 	stw	r10,180(sp)
 4016548:	4015d640 	call	4015d64 <__ssprint_r>
 401654c:	da402c17 	ldw	r9,176(sp)
 4016550:	da802d17 	ldw	r10,180(sp)
 4016554:	1001851e 	bne	r2,zero,4016b6c <___svfiprintf_internal_r+0xc38>
 4016558:	e73ffc04 	addi	fp,fp,-16
 401655c:	d8c01c17 	ldw	r3,112(sp)
 4016560:	d8801b17 	ldw	r2,108(sp)
 4016564:	d811883a 	mov	r8,sp
 4016568:	4f3feb16 	blt	r9,fp,4016518 <__alt_data_end+0xfc016518>
 401656c:	dac02817 	ldw	r11,160(sp)
 4016570:	e0c7883a 	add	r3,fp,r3
 4016574:	10800044 	addi	r2,r2,1
 4016578:	42c00015 	stw	r11,0(r8)
 401657c:	47000115 	stw	fp,4(r8)
 4016580:	d8c01c15 	stw	r3,112(sp)
 4016584:	d8801b15 	stw	r2,108(sp)
 4016588:	010001c4 	movi	r4,7
 401658c:	2081ee16 	blt	r4,r2,4016d48 <___svfiprintf_internal_r+0xe14>
 4016590:	42000204 	addi	r8,r8,8
 4016594:	0000e506 	br	401692c <___svfiprintf_internal_r+0x9f8>
 4016598:	21003fcc 	andi	r4,r4,255
 401659c:	2002dd1e 	bne	r4,zero,4017114 <___svfiprintf_internal_r+0x11e0>
 40165a0:	008100b4 	movhi	r2,1026
 40165a4:	10bfbf04 	addi	r2,r2,-260
 40165a8:	d8802915 	stw	r2,164(sp)
 40165ac:	9080080c 	andi	r2,r18,32
 40165b0:	103f461e 	bne	r2,zero,40162cc <__alt_data_end+0xfc0162cc>
 40165b4:	9080040c 	andi	r2,r18,16
 40165b8:	10022e1e 	bne	r2,zero,4016e74 <___svfiprintf_internal_r+0xf40>
 40165bc:	9080100c 	andi	r2,r18,64
 40165c0:	dac02317 	ldw	r11,140(sp)
 40165c4:	10027326 	beq	r2,zero,4016f94 <___svfiprintf_internal_r+0x1060>
 40165c8:	5f00000b 	ldhu	fp,0(r11)
 40165cc:	5ac00104 	addi	r11,r11,4
 40165d0:	0013883a 	mov	r9,zero
 40165d4:	dac02315 	stw	r11,140(sp)
 40165d8:	003f4106 	br	40162e0 <__alt_data_end+0xfc0162e0>
 40165dc:	21003fcc 	andi	r4,r4,255
 40165e0:	2002e11e 	bne	r4,zero,4017168 <___svfiprintf_internal_r+0x1234>
 40165e4:	9080080c 	andi	r2,r18,32
 40165e8:	1002011e 	bne	r2,zero,4016df0 <___svfiprintf_internal_r+0xebc>
 40165ec:	9080040c 	andi	r2,r18,16
 40165f0:	10023e1e 	bne	r2,zero,4016eec <___svfiprintf_internal_r+0xfb8>
 40165f4:	9480100c 	andi	r18,r18,64
 40165f8:	90023c26 	beq	r18,zero,4016eec <___svfiprintf_internal_r+0xfb8>
 40165fc:	dac02317 	ldw	r11,140(sp)
 4016600:	58800017 	ldw	r2,0(r11)
 4016604:	5ac00104 	addi	r11,r11,4
 4016608:	dac02315 	stw	r11,140(sp)
 401660c:	dac02517 	ldw	r11,148(sp)
 4016610:	12c0000d 	sth	r11,0(r2)
 4016614:	003e6e06 	br	4015fd0 <__alt_data_end+0xfc015fd0>
 4016618:	98c00007 	ldb	r3,0(r19)
 401661c:	1a422926 	beq	r3,r9,4016ec4 <___svfiprintf_internal_r+0xf90>
 4016620:	94800414 	ori	r18,r18,16
 4016624:	003e9206 	br	4016070 <__alt_data_end+0xfc016070>
 4016628:	94801014 	ori	r18,r18,64
 401662c:	98c00007 	ldb	r3,0(r19)
 4016630:	003e8f06 	br	4016070 <__alt_data_end+0xfc016070>
 4016634:	21003fcc 	andi	r4,r4,255
 4016638:	2002c71e 	bne	r4,zero,4017158 <___svfiprintf_internal_r+0x1224>
 401663c:	9080080c 	andi	r2,r18,32
 4016640:	10004926 	beq	r2,zero,4016768 <___svfiprintf_internal_r+0x834>
 4016644:	dac02317 	ldw	r11,140(sp)
 4016648:	58800117 	ldw	r2,4(r11)
 401664c:	5f000017 	ldw	fp,0(r11)
 4016650:	5ac00204 	addi	r11,r11,8
 4016654:	dac02315 	stw	r11,140(sp)
 4016658:	1013883a 	mov	r9,r2
 401665c:	10004b16 	blt	r2,zero,401678c <___svfiprintf_internal_r+0x858>
 4016660:	da801d83 	ldbu	r10,118(sp)
 4016664:	8001cb16 	blt	r16,zero,4016d94 <___svfiprintf_internal_r+0xe60>
 4016668:	00ffdfc4 	movi	r3,-129
 401666c:	e244b03a 	or	r2,fp,r9
 4016670:	90e4703a 	and	r18,r18,r3
 4016674:	103f4726 	beq	r2,zero,4016394 <__alt_data_end+0xfc016394>
 4016678:	48008c26 	beq	r9,zero,40168ac <___svfiprintf_internal_r+0x978>
 401667c:	dc802015 	stw	r18,128(sp)
 4016680:	dc002115 	stw	r16,132(sp)
 4016684:	dc401a04 	addi	r17,sp,104
 4016688:	e021883a 	mov	r16,fp
 401668c:	da002215 	stw	r8,136(sp)
 4016690:	5039883a 	mov	fp,r10
 4016694:	4825883a 	mov	r18,r9
 4016698:	8009883a 	mov	r4,r16
 401669c:	900b883a 	mov	r5,r18
 40166a0:	01800284 	movi	r6,10
 40166a4:	000f883a 	mov	r7,zero
 40166a8:	40196640 	call	4019664 <__umoddi3>
 40166ac:	10800c04 	addi	r2,r2,48
 40166b0:	8c7fffc4 	addi	r17,r17,-1
 40166b4:	8009883a 	mov	r4,r16
 40166b8:	900b883a 	mov	r5,r18
 40166bc:	88800005 	stb	r2,0(r17)
 40166c0:	01800284 	movi	r6,10
 40166c4:	000f883a 	mov	r7,zero
 40166c8:	40190ec0 	call	40190ec <__udivdi3>
 40166cc:	1021883a 	mov	r16,r2
 40166d0:	10c4b03a 	or	r2,r2,r3
 40166d4:	1825883a 	mov	r18,r3
 40166d8:	103fef1e 	bne	r2,zero,4016698 <__alt_data_end+0xfc016698>
 40166dc:	dc802017 	ldw	r18,128(sp)
 40166e0:	dc002117 	ldw	r16,132(sp)
 40166e4:	da002217 	ldw	r8,136(sp)
 40166e8:	e015883a 	mov	r10,fp
 40166ec:	d8c01e17 	ldw	r3,120(sp)
 40166f0:	1c47c83a 	sub	r3,r3,r17
 40166f4:	d8c02115 	stw	r3,132(sp)
 40166f8:	003f2a06 	br	40163a4 <__alt_data_end+0xfc0163a4>
 40166fc:	dac02317 	ldw	r11,140(sp)
 4016700:	d8001d85 	stb	zero,118(sp)
 4016704:	5c400017 	ldw	r17,0(r11)
 4016708:	5f000104 	addi	fp,r11,4
 401670c:	88022f26 	beq	r17,zero,4016fcc <___svfiprintf_internal_r+0x1098>
 4016710:	80022516 	blt	r16,zero,4016fa8 <___svfiprintf_internal_r+0x1074>
 4016714:	800d883a 	mov	r6,r16
 4016718:	000b883a 	mov	r5,zero
 401671c:	8809883a 	mov	r4,r17
 4016720:	da002c15 	stw	r8,176(sp)
 4016724:	40142ac0 	call	40142ac <memchr>
 4016728:	da002c17 	ldw	r8,176(sp)
 401672c:	10026426 	beq	r2,zero,40170c0 <___svfiprintf_internal_r+0x118c>
 4016730:	1445c83a 	sub	r2,r2,r17
 4016734:	d8802115 	stw	r2,132(sp)
 4016738:	da801d83 	ldbu	r10,118(sp)
 401673c:	df002315 	stw	fp,140(sp)
 4016740:	0021883a 	mov	r16,zero
 4016744:	003f1706 	br	40163a4 <__alt_data_end+0xfc0163a4>
 4016748:	94800814 	ori	r18,r18,32
 401674c:	98c00007 	ldb	r3,0(r19)
 4016750:	003e4706 	br	4016070 <__alt_data_end+0xfc016070>
 4016754:	21003fcc 	andi	r4,r4,255
 4016758:	2002701e 	bne	r4,zero,401711c <___svfiprintf_internal_r+0x11e8>
 401675c:	94800414 	ori	r18,r18,16
 4016760:	9080080c 	andi	r2,r18,32
 4016764:	103fb71e 	bne	r2,zero,4016644 <__alt_data_end+0xfc016644>
 4016768:	9080040c 	andi	r2,r18,16
 401676c:	1001ab26 	beq	r2,zero,4016e1c <___svfiprintf_internal_r+0xee8>
 4016770:	dac02317 	ldw	r11,140(sp)
 4016774:	5f000017 	ldw	fp,0(r11)
 4016778:	5ac00104 	addi	r11,r11,4
 401677c:	dac02315 	stw	r11,140(sp)
 4016780:	e013d7fa 	srai	r9,fp,31
 4016784:	4805883a 	mov	r2,r9
 4016788:	103fb50e 	bge	r2,zero,4016660 <__alt_data_end+0xfc016660>
 401678c:	0739c83a 	sub	fp,zero,fp
 4016790:	02800b44 	movi	r10,45
 4016794:	e004c03a 	cmpne	r2,fp,zero
 4016798:	0253c83a 	sub	r9,zero,r9
 401679c:	da801d85 	stb	r10,118(sp)
 40167a0:	4893c83a 	sub	r9,r9,r2
 40167a4:	80023016 	blt	r16,zero,4017068 <___svfiprintf_internal_r+0x1134>
 40167a8:	00bfdfc4 	movi	r2,-129
 40167ac:	90a4703a 	and	r18,r18,r2
 40167b0:	483fb21e 	bne	r9,zero,401667c <__alt_data_end+0xfc01667c>
 40167b4:	00003d06 	br	40168ac <___svfiprintf_internal_r+0x978>
 40167b8:	9817883a 	mov	r11,r19
 40167bc:	d8002415 	stw	zero,144(sp)
 40167c0:	18bff404 	addi	r2,r3,-48
 40167c4:	0019883a 	mov	r12,zero
 40167c8:	58c00007 	ldb	r3,0(r11)
 40167cc:	630002a4 	muli	r12,r12,10
 40167d0:	9cc00044 	addi	r19,r19,1
 40167d4:	9817883a 	mov	r11,r19
 40167d8:	1319883a 	add	r12,r2,r12
 40167dc:	18bff404 	addi	r2,r3,-48
 40167e0:	30bff92e 	bgeu	r6,r2,40167c8 <__alt_data_end+0xfc0167c8>
 40167e4:	db002415 	stw	r12,144(sp)
 40167e8:	18bff804 	addi	r2,r3,-32
 40167ec:	28be232e 	bgeu	r5,r2,401607c <__alt_data_end+0xfc01607c>
 40167f0:	21003fcc 	andi	r4,r4,255
 40167f4:	20024b1e 	bne	r4,zero,4017124 <___svfiprintf_internal_r+0x11f0>
 40167f8:	1800d626 	beq	r3,zero,4016b54 <___svfiprintf_internal_r+0xc20>
 40167fc:	02c00044 	movi	r11,1
 4016800:	dac02015 	stw	r11,128(sp)
 4016804:	d8c01005 	stb	r3,64(sp)
 4016808:	d8001d85 	stb	zero,118(sp)
 401680c:	dac02115 	stw	r11,132(sp)
 4016810:	dc401004 	addi	r17,sp,64
 4016814:	003f2606 	br	40164b0 <__alt_data_end+0xfc0164b0>
 4016818:	94802014 	ori	r18,r18,128
 401681c:	98c00007 	ldb	r3,0(r19)
 4016820:	003e1306 	br	4016070 <__alt_data_end+0xfc016070>
 4016824:	98c00007 	ldb	r3,0(r19)
 4016828:	9ac00044 	addi	r11,r19,1
 401682c:	1a822b26 	beq	r3,r10,40170dc <___svfiprintf_internal_r+0x11a8>
 4016830:	18bff404 	addi	r2,r3,-48
 4016834:	0021883a 	mov	r16,zero
 4016838:	30821e36 	bltu	r6,r2,40170b4 <___svfiprintf_internal_r+0x1180>
 401683c:	58c00007 	ldb	r3,0(r11)
 4016840:	840002a4 	muli	r16,r16,10
 4016844:	5cc00044 	addi	r19,r11,1
 4016848:	9817883a 	mov	r11,r19
 401684c:	80a1883a 	add	r16,r16,r2
 4016850:	18bff404 	addi	r2,r3,-48
 4016854:	30bff92e 	bgeu	r6,r2,401683c <__alt_data_end+0xfc01683c>
 4016858:	803e060e 	bge	r16,zero,4016074 <__alt_data_end+0xfc016074>
 401685c:	043fffc4 	movi	r16,-1
 4016860:	003e0406 	br	4016074 <__alt_data_end+0xfc016074>
 4016864:	21003fcc 	andi	r4,r4,255
 4016868:	2002371e 	bne	r4,zero,4017148 <___svfiprintf_internal_r+0x1214>
 401686c:	94800414 	ori	r18,r18,16
 4016870:	9080080c 	andi	r2,r18,32
 4016874:	103ebb1e 	bne	r2,zero,4016364 <__alt_data_end+0xfc016364>
 4016878:	9080040c 	andi	r2,r18,16
 401687c:	10013b26 	beq	r2,zero,4016d6c <___svfiprintf_internal_r+0xe38>
 4016880:	dac02317 	ldw	r11,140(sp)
 4016884:	d8001d85 	stb	zero,118(sp)
 4016888:	0013883a 	mov	r9,zero
 401688c:	58800104 	addi	r2,r11,4
 4016890:	5f000017 	ldw	fp,0(r11)
 4016894:	80013d16 	blt	r16,zero,4016d8c <___svfiprintf_internal_r+0xe58>
 4016898:	00ffdfc4 	movi	r3,-129
 401689c:	d8802315 	stw	r2,140(sp)
 40168a0:	90e4703a 	and	r18,r18,r3
 40168a4:	0015883a 	mov	r10,zero
 40168a8:	e03eba26 	beq	fp,zero,4016394 <__alt_data_end+0xfc016394>
 40168ac:	00800244 	movi	r2,9
 40168b0:	173f7236 	bltu	r2,fp,401667c <__alt_data_end+0xfc01667c>
 40168b4:	dac02b17 	ldw	r11,172(sp)
 40168b8:	e7000c04 	addi	fp,fp,48
 40168bc:	df0019c5 	stb	fp,103(sp)
 40168c0:	dac02115 	stw	r11,132(sp)
 40168c4:	dc4019c4 	addi	r17,sp,103
 40168c8:	003eb606 	br	40163a4 <__alt_data_end+0xfc0163a4>
 40168cc:	21003fcc 	andi	r4,r4,255
 40168d0:	20021f1e 	bne	r4,zero,4017150 <___svfiprintf_internal_r+0x121c>
 40168d4:	94800414 	ori	r18,r18,16
 40168d8:	9080080c 	andi	r2,r18,32
 40168dc:	103ec51e 	bne	r2,zero,40163f4 <__alt_data_end+0xfc0163f4>
 40168e0:	9080040c 	andi	r2,r18,16
 40168e4:	10016926 	beq	r2,zero,4016e8c <___svfiprintf_internal_r+0xf58>
 40168e8:	dac02317 	ldw	r11,140(sp)
 40168ec:	d8001d85 	stb	zero,118(sp)
 40168f0:	0013883a 	mov	r9,zero
 40168f4:	58800104 	addi	r2,r11,4
 40168f8:	5f000017 	ldw	fp,0(r11)
 40168fc:	80016b16 	blt	r16,zero,4016eac <___svfiprintf_internal_r+0xf78>
 4016900:	00ffdfc4 	movi	r3,-129
 4016904:	d8802315 	stw	r2,140(sp)
 4016908:	90e4703a 	and	r18,r18,r3
 401690c:	e03ec41e 	bne	fp,zero,4016420 <__alt_data_end+0xfc016420>
 4016910:	0015883a 	mov	r10,zero
 4016914:	8001c226 	beq	r16,zero,4017020 <___svfiprintf_internal_r+0x10ec>
 4016918:	0039883a 	mov	fp,zero
 401691c:	0013883a 	mov	r9,zero
 4016920:	003ec006 	br	4016424 <__alt_data_end+0xfc016424>
 4016924:	d8c01c17 	ldw	r3,112(sp)
 4016928:	d8801b17 	ldw	r2,108(sp)
 401692c:	d9001d87 	ldb	r4,118(sp)
 4016930:	20000b26 	beq	r4,zero,4016960 <___svfiprintf_internal_r+0xa2c>
 4016934:	d9001d84 	addi	r4,sp,118
 4016938:	18c00044 	addi	r3,r3,1
 401693c:	10800044 	addi	r2,r2,1
 4016940:	41000015 	stw	r4,0(r8)
 4016944:	01000044 	movi	r4,1
 4016948:	41000115 	stw	r4,4(r8)
 401694c:	d8c01c15 	stw	r3,112(sp)
 4016950:	d8801b15 	stw	r2,108(sp)
 4016954:	010001c4 	movi	r4,7
 4016958:	2080e116 	blt	r4,r2,4016ce0 <___svfiprintf_internal_r+0xdac>
 401695c:	42000204 	addi	r8,r8,8
 4016960:	dac02217 	ldw	r11,136(sp)
 4016964:	58000b26 	beq	r11,zero,4016994 <___svfiprintf_internal_r+0xa60>
 4016968:	d9001d04 	addi	r4,sp,116
 401696c:	18c00084 	addi	r3,r3,2
 4016970:	10800044 	addi	r2,r2,1
 4016974:	41000015 	stw	r4,0(r8)
 4016978:	01000084 	movi	r4,2
 401697c:	41000115 	stw	r4,4(r8)
 4016980:	d8c01c15 	stw	r3,112(sp)
 4016984:	d8801b15 	stw	r2,108(sp)
 4016988:	010001c4 	movi	r4,7
 401698c:	2080dd16 	blt	r4,r2,4016d04 <___svfiprintf_internal_r+0xdd0>
 4016990:	42000204 	addi	r8,r8,8
 4016994:	dac02617 	ldw	r11,152(sp)
 4016998:	01002004 	movi	r4,128
 401699c:	59008426 	beq	r11,r4,4016bb0 <___svfiprintf_internal_r+0xc7c>
 40169a0:	dac02117 	ldw	r11,132(sp)
 40169a4:	82e1c83a 	sub	r16,r16,r11
 40169a8:	0400270e 	bge	zero,r16,4016a48 <___svfiprintf_internal_r+0xb14>
 40169ac:	01c00404 	movi	r7,16
 40169b0:	3c016a0e 	bge	r7,r16,4016f5c <___svfiprintf_internal_r+0x1028>
 40169b4:	014100b4 	movhi	r5,1026
 40169b8:	29402c04 	addi	r5,r5,176
 40169bc:	d9402215 	stw	r5,136(sp)
 40169c0:	070001c4 	movi	fp,7
 40169c4:	00000306 	br	40169d4 <___svfiprintf_internal_r+0xaa0>
 40169c8:	843ffc04 	addi	r16,r16,-16
 40169cc:	42000204 	addi	r8,r8,8
 40169d0:	3c00130e 	bge	r7,r16,4016a20 <___svfiprintf_internal_r+0xaec>
 40169d4:	18c00404 	addi	r3,r3,16
 40169d8:	10800044 	addi	r2,r2,1
 40169dc:	45000015 	stw	r20,0(r8)
 40169e0:	41c00115 	stw	r7,4(r8)
 40169e4:	d8c01c15 	stw	r3,112(sp)
 40169e8:	d8801b15 	stw	r2,108(sp)
 40169ec:	e0bff60e 	bge	fp,r2,40169c8 <__alt_data_end+0xfc0169c8>
 40169f0:	d9801a04 	addi	r6,sp,104
 40169f4:	b80b883a 	mov	r5,r23
 40169f8:	a809883a 	mov	r4,r21
 40169fc:	d9c02c15 	stw	r7,176(sp)
 4016a00:	4015d640 	call	4015d64 <__ssprint_r>
 4016a04:	d9c02c17 	ldw	r7,176(sp)
 4016a08:	1000581e 	bne	r2,zero,4016b6c <___svfiprintf_internal_r+0xc38>
 4016a0c:	843ffc04 	addi	r16,r16,-16
 4016a10:	d8c01c17 	ldw	r3,112(sp)
 4016a14:	d8801b17 	ldw	r2,108(sp)
 4016a18:	d811883a 	mov	r8,sp
 4016a1c:	3c3fed16 	blt	r7,r16,40169d4 <__alt_data_end+0xfc0169d4>
 4016a20:	dac02217 	ldw	r11,136(sp)
 4016a24:	1c07883a 	add	r3,r3,r16
 4016a28:	10800044 	addi	r2,r2,1
 4016a2c:	42c00015 	stw	r11,0(r8)
 4016a30:	44000115 	stw	r16,4(r8)
 4016a34:	d8c01c15 	stw	r3,112(sp)
 4016a38:	d8801b15 	stw	r2,108(sp)
 4016a3c:	010001c4 	movi	r4,7
 4016a40:	20809e16 	blt	r4,r2,4016cbc <___svfiprintf_internal_r+0xd88>
 4016a44:	42000204 	addi	r8,r8,8
 4016a48:	dac02117 	ldw	r11,132(sp)
 4016a4c:	10800044 	addi	r2,r2,1
 4016a50:	44400015 	stw	r17,0(r8)
 4016a54:	58c7883a 	add	r3,r11,r3
 4016a58:	42c00115 	stw	r11,4(r8)
 4016a5c:	d8c01c15 	stw	r3,112(sp)
 4016a60:	d8801b15 	stw	r2,108(sp)
 4016a64:	010001c4 	movi	r4,7
 4016a68:	20807f16 	blt	r4,r2,4016c68 <___svfiprintf_internal_r+0xd34>
 4016a6c:	42000204 	addi	r8,r8,8
 4016a70:	9480010c 	andi	r18,r18,4
 4016a74:	90002926 	beq	r18,zero,4016b1c <___svfiprintf_internal_r+0xbe8>
 4016a78:	dac02417 	ldw	r11,144(sp)
 4016a7c:	d8802017 	ldw	r2,128(sp)
 4016a80:	58a1c83a 	sub	r16,r11,r2
 4016a84:	0400250e 	bge	zero,r16,4016b1c <___svfiprintf_internal_r+0xbe8>
 4016a88:	04400404 	movi	r17,16
 4016a8c:	d8801b17 	ldw	r2,108(sp)
 4016a90:	8c017c0e 	bge	r17,r16,4017084 <___svfiprintf_internal_r+0x1150>
 4016a94:	014100b4 	movhi	r5,1026
 4016a98:	29403004 	addi	r5,r5,192
 4016a9c:	d9402815 	stw	r5,160(sp)
 4016aa0:	048001c4 	movi	r18,7
 4016aa4:	00000306 	br	4016ab4 <___svfiprintf_internal_r+0xb80>
 4016aa8:	843ffc04 	addi	r16,r16,-16
 4016aac:	42000204 	addi	r8,r8,8
 4016ab0:	8c00110e 	bge	r17,r16,4016af8 <___svfiprintf_internal_r+0xbc4>
 4016ab4:	18c00404 	addi	r3,r3,16
 4016ab8:	10800044 	addi	r2,r2,1
 4016abc:	45800015 	stw	r22,0(r8)
 4016ac0:	44400115 	stw	r17,4(r8)
 4016ac4:	d8c01c15 	stw	r3,112(sp)
 4016ac8:	d8801b15 	stw	r2,108(sp)
 4016acc:	90bff60e 	bge	r18,r2,4016aa8 <__alt_data_end+0xfc016aa8>
 4016ad0:	d9801a04 	addi	r6,sp,104
 4016ad4:	b80b883a 	mov	r5,r23
 4016ad8:	a809883a 	mov	r4,r21
 4016adc:	4015d640 	call	4015d64 <__ssprint_r>
 4016ae0:	1000221e 	bne	r2,zero,4016b6c <___svfiprintf_internal_r+0xc38>
 4016ae4:	843ffc04 	addi	r16,r16,-16
 4016ae8:	d8c01c17 	ldw	r3,112(sp)
 4016aec:	d8801b17 	ldw	r2,108(sp)
 4016af0:	d811883a 	mov	r8,sp
 4016af4:	8c3fef16 	blt	r17,r16,4016ab4 <__alt_data_end+0xfc016ab4>
 4016af8:	dac02817 	ldw	r11,160(sp)
 4016afc:	1c07883a 	add	r3,r3,r16
 4016b00:	10800044 	addi	r2,r2,1
 4016b04:	42c00015 	stw	r11,0(r8)
 4016b08:	44000115 	stw	r16,4(r8)
 4016b0c:	d8c01c15 	stw	r3,112(sp)
 4016b10:	d8801b15 	stw	r2,108(sp)
 4016b14:	010001c4 	movi	r4,7
 4016b18:	2080aa16 	blt	r4,r2,4016dc4 <___svfiprintf_internal_r+0xe90>
 4016b1c:	d8802417 	ldw	r2,144(sp)
 4016b20:	dac02017 	ldw	r11,128(sp)
 4016b24:	12c0010e 	bge	r2,r11,4016b2c <___svfiprintf_internal_r+0xbf8>
 4016b28:	5805883a 	mov	r2,r11
 4016b2c:	dac02517 	ldw	r11,148(sp)
 4016b30:	5897883a 	add	r11,r11,r2
 4016b34:	dac02515 	stw	r11,148(sp)
 4016b38:	1800531e 	bne	r3,zero,4016c88 <___svfiprintf_internal_r+0xd54>
 4016b3c:	98800007 	ldb	r2,0(r19)
 4016b40:	d8001b15 	stw	zero,108(sp)
 4016b44:	d811883a 	mov	r8,sp
 4016b48:	103d231e 	bne	r2,zero,4015fd8 <__alt_data_end+0xfc015fd8>
 4016b4c:	9823883a 	mov	r17,r19
 4016b50:	003d3906 	br	4016038 <__alt_data_end+0xfc016038>
 4016b54:	d8801c17 	ldw	r2,112(sp)
 4016b58:	10000426 	beq	r2,zero,4016b6c <___svfiprintf_internal_r+0xc38>
 4016b5c:	d9402717 	ldw	r5,156(sp)
 4016b60:	d9002a17 	ldw	r4,168(sp)
 4016b64:	d9801a04 	addi	r6,sp,104
 4016b68:	4015d640 	call	4015d64 <__ssprint_r>
 4016b6c:	dac02717 	ldw	r11,156(sp)
 4016b70:	d8802517 	ldw	r2,148(sp)
 4016b74:	58c0030b 	ldhu	r3,12(r11)
 4016b78:	18c0100c 	andi	r3,r3,64
 4016b7c:	1801381e 	bne	r3,zero,4017060 <___svfiprintf_internal_r+0x112c>
 4016b80:	dfc03717 	ldw	ra,220(sp)
 4016b84:	df003617 	ldw	fp,216(sp)
 4016b88:	ddc03517 	ldw	r23,212(sp)
 4016b8c:	dd803417 	ldw	r22,208(sp)
 4016b90:	dd403317 	ldw	r21,204(sp)
 4016b94:	dd003217 	ldw	r20,200(sp)
 4016b98:	dcc03117 	ldw	r19,196(sp)
 4016b9c:	dc803017 	ldw	r18,192(sp)
 4016ba0:	dc402f17 	ldw	r17,188(sp)
 4016ba4:	dc002e17 	ldw	r16,184(sp)
 4016ba8:	dec03804 	addi	sp,sp,224
 4016bac:	f800283a 	ret
 4016bb0:	dac02417 	ldw	r11,144(sp)
 4016bb4:	d9002017 	ldw	r4,128(sp)
 4016bb8:	5939c83a 	sub	fp,r11,r4
 4016bbc:	073f780e 	bge	zero,fp,40169a0 <__alt_data_end+0xfc0169a0>
 4016bc0:	02400404 	movi	r9,16
 4016bc4:	4f01370e 	bge	r9,fp,40170a4 <___svfiprintf_internal_r+0x1170>
 4016bc8:	02c100b4 	movhi	r11,1026
 4016bcc:	5ac02c04 	addi	r11,r11,176
 4016bd0:	dac02215 	stw	r11,136(sp)
 4016bd4:	028001c4 	movi	r10,7
 4016bd8:	00000306 	br	4016be8 <___svfiprintf_internal_r+0xcb4>
 4016bdc:	e73ffc04 	addi	fp,fp,-16
 4016be0:	42000204 	addi	r8,r8,8
 4016be4:	4f00150e 	bge	r9,fp,4016c3c <___svfiprintf_internal_r+0xd08>
 4016be8:	18c00404 	addi	r3,r3,16
 4016bec:	10800044 	addi	r2,r2,1
 4016bf0:	45000015 	stw	r20,0(r8)
 4016bf4:	42400115 	stw	r9,4(r8)
 4016bf8:	d8c01c15 	stw	r3,112(sp)
 4016bfc:	d8801b15 	stw	r2,108(sp)
 4016c00:	50bff60e 	bge	r10,r2,4016bdc <__alt_data_end+0xfc016bdc>
 4016c04:	d9801a04 	addi	r6,sp,104
 4016c08:	b80b883a 	mov	r5,r23
 4016c0c:	a809883a 	mov	r4,r21
 4016c10:	da402c15 	stw	r9,176(sp)
 4016c14:	da802d15 	stw	r10,180(sp)
 4016c18:	4015d640 	call	4015d64 <__ssprint_r>
 4016c1c:	da402c17 	ldw	r9,176(sp)
 4016c20:	da802d17 	ldw	r10,180(sp)
 4016c24:	103fd11e 	bne	r2,zero,4016b6c <__alt_data_end+0xfc016b6c>
 4016c28:	e73ffc04 	addi	fp,fp,-16
 4016c2c:	d8c01c17 	ldw	r3,112(sp)
 4016c30:	d8801b17 	ldw	r2,108(sp)
 4016c34:	d811883a 	mov	r8,sp
 4016c38:	4f3feb16 	blt	r9,fp,4016be8 <__alt_data_end+0xfc016be8>
 4016c3c:	dac02217 	ldw	r11,136(sp)
 4016c40:	1f07883a 	add	r3,r3,fp
 4016c44:	10800044 	addi	r2,r2,1
 4016c48:	42c00015 	stw	r11,0(r8)
 4016c4c:	47000115 	stw	fp,4(r8)
 4016c50:	d8c01c15 	stw	r3,112(sp)
 4016c54:	d8801b15 	stw	r2,108(sp)
 4016c58:	010001c4 	movi	r4,7
 4016c5c:	2080b616 	blt	r4,r2,4016f38 <___svfiprintf_internal_r+0x1004>
 4016c60:	42000204 	addi	r8,r8,8
 4016c64:	003f4e06 	br	40169a0 <__alt_data_end+0xfc0169a0>
 4016c68:	d9801a04 	addi	r6,sp,104
 4016c6c:	b80b883a 	mov	r5,r23
 4016c70:	a809883a 	mov	r4,r21
 4016c74:	4015d640 	call	4015d64 <__ssprint_r>
 4016c78:	103fbc1e 	bne	r2,zero,4016b6c <__alt_data_end+0xfc016b6c>
 4016c7c:	d8c01c17 	ldw	r3,112(sp)
 4016c80:	d811883a 	mov	r8,sp
 4016c84:	003f7a06 	br	4016a70 <__alt_data_end+0xfc016a70>
 4016c88:	d9801a04 	addi	r6,sp,104
 4016c8c:	b80b883a 	mov	r5,r23
 4016c90:	a809883a 	mov	r4,r21
 4016c94:	4015d640 	call	4015d64 <__ssprint_r>
 4016c98:	103fa826 	beq	r2,zero,4016b3c <__alt_data_end+0xfc016b3c>
 4016c9c:	003fb306 	br	4016b6c <__alt_data_end+0xfc016b6c>
 4016ca0:	d9801a04 	addi	r6,sp,104
 4016ca4:	b80b883a 	mov	r5,r23
 4016ca8:	a809883a 	mov	r4,r21
 4016cac:	4015d640 	call	4015d64 <__ssprint_r>
 4016cb0:	103fae1e 	bne	r2,zero,4016b6c <__alt_data_end+0xfc016b6c>
 4016cb4:	d811883a 	mov	r8,sp
 4016cb8:	003cdc06 	br	401602c <__alt_data_end+0xfc01602c>
 4016cbc:	d9801a04 	addi	r6,sp,104
 4016cc0:	b80b883a 	mov	r5,r23
 4016cc4:	a809883a 	mov	r4,r21
 4016cc8:	4015d640 	call	4015d64 <__ssprint_r>
 4016ccc:	103fa71e 	bne	r2,zero,4016b6c <__alt_data_end+0xfc016b6c>
 4016cd0:	d8c01c17 	ldw	r3,112(sp)
 4016cd4:	d8801b17 	ldw	r2,108(sp)
 4016cd8:	d811883a 	mov	r8,sp
 4016cdc:	003f5a06 	br	4016a48 <__alt_data_end+0xfc016a48>
 4016ce0:	d9801a04 	addi	r6,sp,104
 4016ce4:	b80b883a 	mov	r5,r23
 4016ce8:	a809883a 	mov	r4,r21
 4016cec:	4015d640 	call	4015d64 <__ssprint_r>
 4016cf0:	103f9e1e 	bne	r2,zero,4016b6c <__alt_data_end+0xfc016b6c>
 4016cf4:	d8c01c17 	ldw	r3,112(sp)
 4016cf8:	d8801b17 	ldw	r2,108(sp)
 4016cfc:	d811883a 	mov	r8,sp
 4016d00:	003f1706 	br	4016960 <__alt_data_end+0xfc016960>
 4016d04:	d9801a04 	addi	r6,sp,104
 4016d08:	b80b883a 	mov	r5,r23
 4016d0c:	a809883a 	mov	r4,r21
 4016d10:	4015d640 	call	4015d64 <__ssprint_r>
 4016d14:	103f951e 	bne	r2,zero,4016b6c <__alt_data_end+0xfc016b6c>
 4016d18:	d8c01c17 	ldw	r3,112(sp)
 4016d1c:	d8801b17 	ldw	r2,108(sp)
 4016d20:	d811883a 	mov	r8,sp
 4016d24:	003f1b06 	br	4016994 <__alt_data_end+0xfc016994>
 4016d28:	d8001d85 	stb	zero,118(sp)
 4016d2c:	80007b16 	blt	r16,zero,4016f1c <___svfiprintf_internal_r+0xfe8>
 4016d30:	00ffdfc4 	movi	r3,-129
 4016d34:	e244b03a 	or	r2,fp,r9
 4016d38:	90e4703a 	and	r18,r18,r3
 4016d3c:	103d7026 	beq	r2,zero,4016300 <__alt_data_end+0xfc016300>
 4016d40:	0015883a 	mov	r10,zero
 4016d44:	003d7206 	br	4016310 <__alt_data_end+0xfc016310>
 4016d48:	d9801a04 	addi	r6,sp,104
 4016d4c:	b80b883a 	mov	r5,r23
 4016d50:	a809883a 	mov	r4,r21
 4016d54:	4015d640 	call	4015d64 <__ssprint_r>
 4016d58:	103f841e 	bne	r2,zero,4016b6c <__alt_data_end+0xfc016b6c>
 4016d5c:	d8c01c17 	ldw	r3,112(sp)
 4016d60:	d8801b17 	ldw	r2,108(sp)
 4016d64:	d811883a 	mov	r8,sp
 4016d68:	003ef006 	br	401692c <__alt_data_end+0xfc01692c>
 4016d6c:	9080100c 	andi	r2,r18,64
 4016d70:	d8001d85 	stb	zero,118(sp)
 4016d74:	dac02317 	ldw	r11,140(sp)
 4016d78:	10008126 	beq	r2,zero,4016f80 <___svfiprintf_internal_r+0x104c>
 4016d7c:	58800104 	addi	r2,r11,4
 4016d80:	5f00000b 	ldhu	fp,0(r11)
 4016d84:	0013883a 	mov	r9,zero
 4016d88:	803ec30e 	bge	r16,zero,4016898 <__alt_data_end+0xfc016898>
 4016d8c:	d8802315 	stw	r2,140(sp)
 4016d90:	0015883a 	mov	r10,zero
 4016d94:	e244b03a 	or	r2,fp,r9
 4016d98:	103e371e 	bne	r2,zero,4016678 <__alt_data_end+0xfc016678>
 4016d9c:	00800044 	movi	r2,1
 4016da0:	10803fcc 	andi	r2,r2,255
 4016da4:	00c00044 	movi	r3,1
 4016da8:	10c06126 	beq	r2,r3,4016f30 <___svfiprintf_internal_r+0xffc>
 4016dac:	00c00084 	movi	r3,2
 4016db0:	10fd5526 	beq	r2,r3,4016308 <__alt_data_end+0xfc016308>
 4016db4:	003ed806 	br	4016918 <__alt_data_end+0xfc016918>
 4016db8:	d8802315 	stw	r2,140(sp)
 4016dbc:	98c00007 	ldb	r3,0(r19)
 4016dc0:	003cab06 	br	4016070 <__alt_data_end+0xfc016070>
 4016dc4:	d9801a04 	addi	r6,sp,104
 4016dc8:	b80b883a 	mov	r5,r23
 4016dcc:	a809883a 	mov	r4,r21
 4016dd0:	4015d640 	call	4015d64 <__ssprint_r>
 4016dd4:	103f651e 	bne	r2,zero,4016b6c <__alt_data_end+0xfc016b6c>
 4016dd8:	d8c01c17 	ldw	r3,112(sp)
 4016ddc:	003f4f06 	br	4016b1c <__alt_data_end+0xfc016b1c>
 4016de0:	008100b4 	movhi	r2,1026
 4016de4:	10bfc404 	addi	r2,r2,-240
 4016de8:	d8802915 	stw	r2,164(sp)
 4016dec:	003d4406 	br	4016300 <__alt_data_end+0xfc016300>
 4016df0:	dac02317 	ldw	r11,140(sp)
 4016df4:	58800017 	ldw	r2,0(r11)
 4016df8:	dac02517 	ldw	r11,148(sp)
 4016dfc:	5807d7fa 	srai	r3,r11,31
 4016e00:	dac02317 	ldw	r11,140(sp)
 4016e04:	10c00115 	stw	r3,4(r2)
 4016e08:	5ac00104 	addi	r11,r11,4
 4016e0c:	dac02315 	stw	r11,140(sp)
 4016e10:	dac02517 	ldw	r11,148(sp)
 4016e14:	12c00015 	stw	r11,0(r2)
 4016e18:	003c6d06 	br	4015fd0 <__alt_data_end+0xfc015fd0>
 4016e1c:	9080100c 	andi	r2,r18,64
 4016e20:	dac02317 	ldw	r11,140(sp)
 4016e24:	103e5326 	beq	r2,zero,4016774 <__alt_data_end+0xfc016774>
 4016e28:	5f00000f 	ldh	fp,0(r11)
 4016e2c:	5ac00104 	addi	r11,r11,4
 4016e30:	dac02315 	stw	r11,140(sp)
 4016e34:	e013d7fa 	srai	r9,fp,31
 4016e38:	4805883a 	mov	r2,r9
 4016e3c:	003e0706 	br	401665c <__alt_data_end+0xfc01665c>
 4016e40:	00800c04 	movi	r2,48
 4016e44:	d8801d05 	stb	r2,116(sp)
 4016e48:	d8c01d45 	stb	r3,117(sp)
 4016e4c:	d8001d85 	stb	zero,118(sp)
 4016e50:	90800094 	ori	r2,r18,2
 4016e54:	80008f16 	blt	r16,zero,4017094 <___svfiprintf_internal_r+0x1160>
 4016e58:	00bfdfc4 	movi	r2,-129
 4016e5c:	90a4703a 	and	r18,r18,r2
 4016e60:	94800094 	ori	r18,r18,2
 4016e64:	0015883a 	mov	r10,zero
 4016e68:	003d2906 	br	4016310 <__alt_data_end+0xfc016310>
 4016e6c:	98c00007 	ldb	r3,0(r19)
 4016e70:	003c7f06 	br	4016070 <__alt_data_end+0xfc016070>
 4016e74:	dac02317 	ldw	r11,140(sp)
 4016e78:	0013883a 	mov	r9,zero
 4016e7c:	5f000017 	ldw	fp,0(r11)
 4016e80:	5ac00104 	addi	r11,r11,4
 4016e84:	dac02315 	stw	r11,140(sp)
 4016e88:	003d1506 	br	40162e0 <__alt_data_end+0xfc0162e0>
 4016e8c:	9080100c 	andi	r2,r18,64
 4016e90:	d8001d85 	stb	zero,118(sp)
 4016e94:	dac02317 	ldw	r11,140(sp)
 4016e98:	10003426 	beq	r2,zero,4016f6c <___svfiprintf_internal_r+0x1038>
 4016e9c:	58800104 	addi	r2,r11,4
 4016ea0:	5f00000b 	ldhu	fp,0(r11)
 4016ea4:	0013883a 	mov	r9,zero
 4016ea8:	803e950e 	bge	r16,zero,4016900 <__alt_data_end+0xfc016900>
 4016eac:	e246b03a 	or	r3,fp,r9
 4016eb0:	d8802315 	stw	r2,140(sp)
 4016eb4:	183d5a1e 	bne	r3,zero,4016420 <__alt_data_end+0xfc016420>
 4016eb8:	0015883a 	mov	r10,zero
 4016ebc:	0005883a 	mov	r2,zero
 4016ec0:	003fb706 	br	4016da0 <__alt_data_end+0xfc016da0>
 4016ec4:	98c00043 	ldbu	r3,1(r19)
 4016ec8:	94800814 	ori	r18,r18,32
 4016ecc:	9cc00044 	addi	r19,r19,1
 4016ed0:	18c03fcc 	andi	r3,r3,255
 4016ed4:	18c0201c 	xori	r3,r3,128
 4016ed8:	18ffe004 	addi	r3,r3,-128
 4016edc:	003c6406 	br	4016070 <__alt_data_end+0xfc016070>
 4016ee0:	d8c02315 	stw	r3,140(sp)
 4016ee4:	0015883a 	mov	r10,zero
 4016ee8:	003faa06 	br	4016d94 <__alt_data_end+0xfc016d94>
 4016eec:	dac02317 	ldw	r11,140(sp)
 4016ef0:	58800017 	ldw	r2,0(r11)
 4016ef4:	5ac00104 	addi	r11,r11,4
 4016ef8:	dac02315 	stw	r11,140(sp)
 4016efc:	dac02517 	ldw	r11,148(sp)
 4016f00:	12c00015 	stw	r11,0(r2)
 4016f04:	003c3206 	br	4015fd0 <__alt_data_end+0xfc015fd0>
 4016f08:	010100b4 	movhi	r4,1026
 4016f0c:	213fc404 	addi	r4,r4,-240
 4016f10:	d9002915 	stw	r4,164(sp)
 4016f14:	d8c02315 	stw	r3,140(sp)
 4016f18:	1025883a 	mov	r18,r2
 4016f1c:	e244b03a 	or	r2,fp,r9
 4016f20:	103f871e 	bne	r2,zero,4016d40 <__alt_data_end+0xfc016d40>
 4016f24:	0015883a 	mov	r10,zero
 4016f28:	00800084 	movi	r2,2
 4016f2c:	003f9c06 	br	4016da0 <__alt_data_end+0xfc016da0>
 4016f30:	0039883a 	mov	fp,zero
 4016f34:	003e5f06 	br	40168b4 <__alt_data_end+0xfc0168b4>
 4016f38:	d9801a04 	addi	r6,sp,104
 4016f3c:	b80b883a 	mov	r5,r23
 4016f40:	a809883a 	mov	r4,r21
 4016f44:	4015d640 	call	4015d64 <__ssprint_r>
 4016f48:	103f081e 	bne	r2,zero,4016b6c <__alt_data_end+0xfc016b6c>
 4016f4c:	d8c01c17 	ldw	r3,112(sp)
 4016f50:	d8801b17 	ldw	r2,108(sp)
 4016f54:	d811883a 	mov	r8,sp
 4016f58:	003e9106 	br	40169a0 <__alt_data_end+0xfc0169a0>
 4016f5c:	010100b4 	movhi	r4,1026
 4016f60:	21002c04 	addi	r4,r4,176
 4016f64:	d9002215 	stw	r4,136(sp)
 4016f68:	003ead06 	br	4016a20 <__alt_data_end+0xfc016a20>
 4016f6c:	58800104 	addi	r2,r11,4
 4016f70:	5f000017 	ldw	fp,0(r11)
 4016f74:	0013883a 	mov	r9,zero
 4016f78:	803e610e 	bge	r16,zero,4016900 <__alt_data_end+0xfc016900>
 4016f7c:	003fcb06 	br	4016eac <__alt_data_end+0xfc016eac>
 4016f80:	58800104 	addi	r2,r11,4
 4016f84:	5f000017 	ldw	fp,0(r11)
 4016f88:	0013883a 	mov	r9,zero
 4016f8c:	803e420e 	bge	r16,zero,4016898 <__alt_data_end+0xfc016898>
 4016f90:	003f7e06 	br	4016d8c <__alt_data_end+0xfc016d8c>
 4016f94:	5f000017 	ldw	fp,0(r11)
 4016f98:	5ac00104 	addi	r11,r11,4
 4016f9c:	0013883a 	mov	r9,zero
 4016fa0:	dac02315 	stw	r11,140(sp)
 4016fa4:	003cce06 	br	40162e0 <__alt_data_end+0xfc0162e0>
 4016fa8:	8809883a 	mov	r4,r17
 4016fac:	da002c15 	stw	r8,176(sp)
 4016fb0:	400d0300 	call	400d030 <strlen>
 4016fb4:	d8802115 	stw	r2,132(sp)
 4016fb8:	da801d83 	ldbu	r10,118(sp)
 4016fbc:	df002315 	stw	fp,140(sp)
 4016fc0:	0021883a 	mov	r16,zero
 4016fc4:	da002c17 	ldw	r8,176(sp)
 4016fc8:	003cf606 	br	40163a4 <__alt_data_end+0xfc0163a4>
 4016fcc:	00800184 	movi	r2,6
 4016fd0:	1400012e 	bgeu	r2,r16,4016fd8 <___svfiprintf_internal_r+0x10a4>
 4016fd4:	1021883a 	mov	r16,r2
 4016fd8:	dc002115 	stw	r16,132(sp)
 4016fdc:	8005883a 	mov	r2,r16
 4016fe0:	80003c16 	blt	r16,zero,40170d4 <___svfiprintf_internal_r+0x11a0>
 4016fe4:	044100b4 	movhi	r17,1026
 4016fe8:	d8802015 	stw	r2,128(sp)
 4016fec:	df002315 	stw	fp,140(sp)
 4016ff0:	8c7fc904 	addi	r17,r17,-220
 4016ff4:	003d2e06 	br	40164b0 <__alt_data_end+0xfc0164b0>
 4016ff8:	04001004 	movi	r16,64
 4016ffc:	800b883a 	mov	r5,r16
 4017000:	400bee00 	call	400bee0 <_malloc_r>
 4017004:	dac02717 	ldw	r11,156(sp)
 4017008:	58800015 	stw	r2,0(r11)
 401700c:	58800415 	stw	r2,16(r11)
 4017010:	10004826 	beq	r2,zero,4017134 <___svfiprintf_internal_r+0x1200>
 4017014:	dac02717 	ldw	r11,156(sp)
 4017018:	5c000515 	stw	r16,20(r11)
 401701c:	003bd906 	br	4015f84 <__alt_data_end+0xfc015f84>
 4017020:	9080004c 	andi	r2,r18,1
 4017024:	0015883a 	mov	r10,zero
 4017028:	10000626 	beq	r2,zero,4017044 <___svfiprintf_internal_r+0x1110>
 401702c:	dac02b17 	ldw	r11,172(sp)
 4017030:	00800c04 	movi	r2,48
 4017034:	d88019c5 	stb	r2,103(sp)
 4017038:	dac02115 	stw	r11,132(sp)
 401703c:	dc4019c4 	addi	r17,sp,103
 4017040:	003cd806 	br	40163a4 <__alt_data_end+0xfc0163a4>
 4017044:	d8002115 	stw	zero,132(sp)
 4017048:	dc401a04 	addi	r17,sp,104
 401704c:	003cd506 	br	40163a4 <__alt_data_end+0xfc0163a4>
 4017050:	010100b4 	movhi	r4,1026
 4017054:	21003004 	addi	r4,r4,192
 4017058:	d9002815 	stw	r4,160(sp)
 401705c:	003d4306 	br	401656c <__alt_data_end+0xfc01656c>
 4017060:	00bfffc4 	movi	r2,-1
 4017064:	003ec606 	br	4016b80 <__alt_data_end+0xfc016b80>
 4017068:	00800044 	movi	r2,1
 401706c:	10803fcc 	andi	r2,r2,255
 4017070:	00c00044 	movi	r3,1
 4017074:	10fd8026 	beq	r2,r3,4016678 <__alt_data_end+0xfc016678>
 4017078:	00c00084 	movi	r3,2
 401707c:	10fca426 	beq	r2,r3,4016310 <__alt_data_end+0xfc016310>
 4017080:	003ce806 	br	4016424 <__alt_data_end+0xfc016424>
 4017084:	010100b4 	movhi	r4,1026
 4017088:	21003004 	addi	r4,r4,192
 401708c:	d9002815 	stw	r4,160(sp)
 4017090:	003e9906 	br	4016af8 <__alt_data_end+0xfc016af8>
 4017094:	1025883a 	mov	r18,r2
 4017098:	0015883a 	mov	r10,zero
 401709c:	00800084 	movi	r2,2
 40170a0:	003ff206 	br	401706c <__alt_data_end+0xfc01706c>
 40170a4:	014100b4 	movhi	r5,1026
 40170a8:	29402c04 	addi	r5,r5,176
 40170ac:	d9402215 	stw	r5,136(sp)
 40170b0:	003ee206 	br	4016c3c <__alt_data_end+0xfc016c3c>
 40170b4:	5827883a 	mov	r19,r11
 40170b8:	0021883a 	mov	r16,zero
 40170bc:	003bed06 	br	4016074 <__alt_data_end+0xfc016074>
 40170c0:	dc002115 	stw	r16,132(sp)
 40170c4:	da801d83 	ldbu	r10,118(sp)
 40170c8:	df002315 	stw	fp,140(sp)
 40170cc:	0021883a 	mov	r16,zero
 40170d0:	003cb406 	br	40163a4 <__alt_data_end+0xfc0163a4>
 40170d4:	0005883a 	mov	r2,zero
 40170d8:	003fc206 	br	4016fe4 <__alt_data_end+0xfc016fe4>
 40170dc:	d8802317 	ldw	r2,140(sp)
 40170e0:	98c00043 	ldbu	r3,1(r19)
 40170e4:	5827883a 	mov	r19,r11
 40170e8:	14000017 	ldw	r16,0(r2)
 40170ec:	10800104 	addi	r2,r2,4
 40170f0:	d8802315 	stw	r2,140(sp)
 40170f4:	803f760e 	bge	r16,zero,4016ed0 <__alt_data_end+0xfc016ed0>
 40170f8:	18c03fcc 	andi	r3,r3,255
 40170fc:	18c0201c 	xori	r3,r3,128
 4017100:	043fffc4 	movi	r16,-1
 4017104:	18ffe004 	addi	r3,r3,-128
 4017108:	003bd906 	br	4016070 <__alt_data_end+0xfc016070>
 401710c:	d9c01d85 	stb	r7,118(sp)
 4017110:	003cb606 	br	40163ec <__alt_data_end+0xfc0163ec>
 4017114:	d9c01d85 	stb	r7,118(sp)
 4017118:	003d2106 	br	40165a0 <__alt_data_end+0xfc0165a0>
 401711c:	d9c01d85 	stb	r7,118(sp)
 4017120:	003d8e06 	br	401675c <__alt_data_end+0xfc01675c>
 4017124:	d9c01d85 	stb	r7,118(sp)
 4017128:	003db306 	br	40167f8 <__alt_data_end+0xfc0167f8>
 401712c:	d9c01d85 	stb	r7,118(sp)
 4017130:	003c8a06 	br	401635c <__alt_data_end+0xfc01635c>
 4017134:	dac02a17 	ldw	r11,168(sp)
 4017138:	00800304 	movi	r2,12
 401713c:	58800015 	stw	r2,0(r11)
 4017140:	00bfffc4 	movi	r2,-1
 4017144:	003e8e06 	br	4016b80 <__alt_data_end+0xfc016b80>
 4017148:	d9c01d85 	stb	r7,118(sp)
 401714c:	003dc706 	br	401686c <__alt_data_end+0xfc01686c>
 4017150:	d9c01d85 	stb	r7,118(sp)
 4017154:	003ddf06 	br	40168d4 <__alt_data_end+0xfc0168d4>
 4017158:	d9c01d85 	stb	r7,118(sp)
 401715c:	003d3706 	br	401663c <__alt_data_end+0xfc01663c>
 4017160:	d9c01d85 	stb	r7,118(sp)
 4017164:	003c5406 	br	40162b8 <__alt_data_end+0xfc0162b8>
 4017168:	d9c01d85 	stb	r7,118(sp)
 401716c:	003d1d06 	br	40165e4 <__alt_data_end+0xfc0165e4>

04017170 <__sprint_r.part.0>:
 4017170:	28801917 	ldw	r2,100(r5)
 4017174:	defff604 	addi	sp,sp,-40
 4017178:	dd400515 	stw	r21,20(sp)
 401717c:	dfc00915 	stw	ra,36(sp)
 4017180:	df000815 	stw	fp,32(sp)
 4017184:	ddc00715 	stw	r23,28(sp)
 4017188:	dd800615 	stw	r22,24(sp)
 401718c:	dd000415 	stw	r20,16(sp)
 4017190:	dcc00315 	stw	r19,12(sp)
 4017194:	dc800215 	stw	r18,8(sp)
 4017198:	dc400115 	stw	r17,4(sp)
 401719c:	dc000015 	stw	r16,0(sp)
 40171a0:	1088000c 	andi	r2,r2,8192
 40171a4:	302b883a 	mov	r21,r6
 40171a8:	10002e26 	beq	r2,zero,4017264 <__sprint_r.part.0+0xf4>
 40171ac:	30800217 	ldw	r2,8(r6)
 40171b0:	35800017 	ldw	r22,0(r6)
 40171b4:	10002926 	beq	r2,zero,401725c <__sprint_r.part.0+0xec>
 40171b8:	2827883a 	mov	r19,r5
 40171bc:	2029883a 	mov	r20,r4
 40171c0:	b5c00104 	addi	r23,r22,4
 40171c4:	04bfffc4 	movi	r18,-1
 40171c8:	bc400017 	ldw	r17,0(r23)
 40171cc:	b4000017 	ldw	r16,0(r22)
 40171d0:	0039883a 	mov	fp,zero
 40171d4:	8822d0ba 	srli	r17,r17,2
 40171d8:	8800031e 	bne	r17,zero,40171e8 <__sprint_r.part.0+0x78>
 40171dc:	00001806 	br	4017240 <__sprint_r.part.0+0xd0>
 40171e0:	84000104 	addi	r16,r16,4
 40171e4:	8f001526 	beq	r17,fp,401723c <__sprint_r.part.0+0xcc>
 40171e8:	81400017 	ldw	r5,0(r16)
 40171ec:	980d883a 	mov	r6,r19
 40171f0:	a009883a 	mov	r4,r20
 40171f4:	4018cf00 	call	4018cf0 <_fputwc_r>
 40171f8:	e7000044 	addi	fp,fp,1
 40171fc:	14bff81e 	bne	r2,r18,40171e0 <__alt_data_end+0xfc0171e0>
 4017200:	9005883a 	mov	r2,r18
 4017204:	a8000215 	stw	zero,8(r21)
 4017208:	a8000115 	stw	zero,4(r21)
 401720c:	dfc00917 	ldw	ra,36(sp)
 4017210:	df000817 	ldw	fp,32(sp)
 4017214:	ddc00717 	ldw	r23,28(sp)
 4017218:	dd800617 	ldw	r22,24(sp)
 401721c:	dd400517 	ldw	r21,20(sp)
 4017220:	dd000417 	ldw	r20,16(sp)
 4017224:	dcc00317 	ldw	r19,12(sp)
 4017228:	dc800217 	ldw	r18,8(sp)
 401722c:	dc400117 	ldw	r17,4(sp)
 4017230:	dc000017 	ldw	r16,0(sp)
 4017234:	dec00a04 	addi	sp,sp,40
 4017238:	f800283a 	ret
 401723c:	a8800217 	ldw	r2,8(r21)
 4017240:	8c63883a 	add	r17,r17,r17
 4017244:	8c63883a 	add	r17,r17,r17
 4017248:	1445c83a 	sub	r2,r2,r17
 401724c:	a8800215 	stw	r2,8(r21)
 4017250:	b5800204 	addi	r22,r22,8
 4017254:	bdc00204 	addi	r23,r23,8
 4017258:	103fdb1e 	bne	r2,zero,40171c8 <__alt_data_end+0xfc0171c8>
 401725c:	0005883a 	mov	r2,zero
 4017260:	003fe806 	br	4017204 <__alt_data_end+0xfc017204>
 4017264:	40139d00 	call	40139d0 <__sfvwrite_r>
 4017268:	003fe606 	br	4017204 <__alt_data_end+0xfc017204>

0401726c <__sprint_r>:
 401726c:	30c00217 	ldw	r3,8(r6)
 4017270:	18000126 	beq	r3,zero,4017278 <__sprint_r+0xc>
 4017274:	40171701 	jmpi	4017170 <__sprint_r.part.0>
 4017278:	30000115 	stw	zero,4(r6)
 401727c:	0005883a 	mov	r2,zero
 4017280:	f800283a 	ret

04017284 <___vfiprintf_internal_r>:
 4017284:	deffc904 	addi	sp,sp,-220
 4017288:	df003515 	stw	fp,212(sp)
 401728c:	dd003115 	stw	r20,196(sp)
 4017290:	dfc03615 	stw	ra,216(sp)
 4017294:	ddc03415 	stw	r23,208(sp)
 4017298:	dd803315 	stw	r22,204(sp)
 401729c:	dd403215 	stw	r21,200(sp)
 40172a0:	dcc03015 	stw	r19,192(sp)
 40172a4:	dc802f15 	stw	r18,188(sp)
 40172a8:	dc402e15 	stw	r17,184(sp)
 40172ac:	dc002d15 	stw	r16,180(sp)
 40172b0:	d9002015 	stw	r4,128(sp)
 40172b4:	d9c02215 	stw	r7,136(sp)
 40172b8:	2829883a 	mov	r20,r5
 40172bc:	3039883a 	mov	fp,r6
 40172c0:	20000226 	beq	r4,zero,40172cc <___vfiprintf_internal_r+0x48>
 40172c4:	20800e17 	ldw	r2,56(r4)
 40172c8:	1000cf26 	beq	r2,zero,4017608 <___vfiprintf_internal_r+0x384>
 40172cc:	a080030b 	ldhu	r2,12(r20)
 40172d0:	10c8000c 	andi	r3,r2,8192
 40172d4:	1800061e 	bne	r3,zero,40172f0 <___vfiprintf_internal_r+0x6c>
 40172d8:	a1001917 	ldw	r4,100(r20)
 40172dc:	00f7ffc4 	movi	r3,-8193
 40172e0:	10880014 	ori	r2,r2,8192
 40172e4:	20c6703a 	and	r3,r4,r3
 40172e8:	a080030d 	sth	r2,12(r20)
 40172ec:	a0c01915 	stw	r3,100(r20)
 40172f0:	10c0020c 	andi	r3,r2,8
 40172f4:	1800a926 	beq	r3,zero,401759c <___vfiprintf_internal_r+0x318>
 40172f8:	a0c00417 	ldw	r3,16(r20)
 40172fc:	1800a726 	beq	r3,zero,401759c <___vfiprintf_internal_r+0x318>
 4017300:	1080068c 	andi	r2,r2,26
 4017304:	00c00284 	movi	r3,10
 4017308:	10c0ac26 	beq	r2,r3,40175bc <___vfiprintf_internal_r+0x338>
 401730c:	da801a04 	addi	r10,sp,104
 4017310:	da801e15 	stw	r10,120(sp)
 4017314:	d8801e17 	ldw	r2,120(sp)
 4017318:	da8019c4 	addi	r10,sp,103
 401731c:	058100b4 	movhi	r22,1026
 4017320:	05c100b4 	movhi	r23,1026
 4017324:	da801f15 	stw	r10,124(sp)
 4017328:	1295c83a 	sub	r10,r2,r10
 401732c:	b5803804 	addi	r22,r22,224
 4017330:	bdc03404 	addi	r23,r23,208
 4017334:	dec01a15 	stw	sp,104(sp)
 4017338:	d8001c15 	stw	zero,112(sp)
 401733c:	d8001b15 	stw	zero,108(sp)
 4017340:	d8002615 	stw	zero,152(sp)
 4017344:	d8002315 	stw	zero,140(sp)
 4017348:	da802715 	stw	r10,156(sp)
 401734c:	d811883a 	mov	r8,sp
 4017350:	dd002115 	stw	r20,132(sp)
 4017354:	e021883a 	mov	r16,fp
 4017358:	80800007 	ldb	r2,0(r16)
 401735c:	1003ea26 	beq	r2,zero,4018308 <___vfiprintf_internal_r+0x1084>
 4017360:	00c00944 	movi	r3,37
 4017364:	8025883a 	mov	r18,r16
 4017368:	10c0021e 	bne	r2,r3,4017374 <___vfiprintf_internal_r+0xf0>
 401736c:	00001606 	br	40173c8 <___vfiprintf_internal_r+0x144>
 4017370:	10c00326 	beq	r2,r3,4017380 <___vfiprintf_internal_r+0xfc>
 4017374:	94800044 	addi	r18,r18,1
 4017378:	90800007 	ldb	r2,0(r18)
 401737c:	103ffc1e 	bne	r2,zero,4017370 <__alt_data_end+0xfc017370>
 4017380:	9423c83a 	sub	r17,r18,r16
 4017384:	88001026 	beq	r17,zero,40173c8 <___vfiprintf_internal_r+0x144>
 4017388:	d8c01c17 	ldw	r3,112(sp)
 401738c:	d8801b17 	ldw	r2,108(sp)
 4017390:	44000015 	stw	r16,0(r8)
 4017394:	88c7883a 	add	r3,r17,r3
 4017398:	10800044 	addi	r2,r2,1
 401739c:	44400115 	stw	r17,4(r8)
 40173a0:	d8c01c15 	stw	r3,112(sp)
 40173a4:	d8801b15 	stw	r2,108(sp)
 40173a8:	010001c4 	movi	r4,7
 40173ac:	2080760e 	bge	r4,r2,4017588 <___vfiprintf_internal_r+0x304>
 40173b0:	1803821e 	bne	r3,zero,40181bc <___vfiprintf_internal_r+0xf38>
 40173b4:	da802317 	ldw	r10,140(sp)
 40173b8:	d8001b15 	stw	zero,108(sp)
 40173bc:	d811883a 	mov	r8,sp
 40173c0:	5455883a 	add	r10,r10,r17
 40173c4:	da802315 	stw	r10,140(sp)
 40173c8:	90800007 	ldb	r2,0(r18)
 40173cc:	10044626 	beq	r2,zero,40184e8 <___vfiprintf_internal_r+0x1264>
 40173d0:	90c00047 	ldb	r3,1(r18)
 40173d4:	94000044 	addi	r16,r18,1
 40173d8:	d8001d85 	stb	zero,118(sp)
 40173dc:	0009883a 	mov	r4,zero
 40173e0:	000f883a 	mov	r7,zero
 40173e4:	027fffc4 	movi	r9,-1
 40173e8:	0023883a 	mov	r17,zero
 40173ec:	0029883a 	mov	r20,zero
 40173f0:	01401604 	movi	r5,88
 40173f4:	01800244 	movi	r6,9
 40173f8:	03400a84 	movi	r13,42
 40173fc:	03001b04 	movi	r12,108
 4017400:	84000044 	addi	r16,r16,1
 4017404:	18bff804 	addi	r2,r3,-32
 4017408:	28827336 	bltu	r5,r2,4017dd8 <___vfiprintf_internal_r+0xb54>
 401740c:	100490ba 	slli	r2,r2,2
 4017410:	02810074 	movhi	r10,1025
 4017414:	529d0904 	addi	r10,r10,29732
 4017418:	1285883a 	add	r2,r2,r10
 401741c:	10800017 	ldw	r2,0(r2)
 4017420:	1000683a 	jmp	r2
 4017424:	04017b0c 	andi	r16,zero,1516
 4017428:	04017dd8 	cmpnei	r16,zero,1527
 401742c:	04017dd8 	cmpnei	r16,zero,1527
 4017430:	04017b2c 	andhi	r16,zero,1516
 4017434:	04017dd8 	cmpnei	r16,zero,1527
 4017438:	04017dd8 	cmpnei	r16,zero,1527
 401743c:	04017dd8 	cmpnei	r16,zero,1527
 4017440:	04017dd8 	cmpnei	r16,zero,1527
 4017444:	04017dd8 	cmpnei	r16,zero,1527
 4017448:	04017dd8 	cmpnei	r16,zero,1527
 401744c:	04017d14 	movui	r16,1524
 4017450:	04017d30 	cmpltui	r16,zero,1524
 4017454:	04017dd8 	cmpnei	r16,zero,1527
 4017458:	04017618 	cmpnei	r16,zero,1496
 401745c:	04017d40 	call	4017d4 <__reset-0x3bfe82c>
 4017460:	04017dd8 	cmpnei	r16,zero,1527
 4017464:	04017b38 	rdprs	r16,zero,1516
 4017468:	04017b44 	movi	r16,1517
 401746c:	04017b44 	movi	r16,1517
 4017470:	04017b44 	movi	r16,1517
 4017474:	04017b44 	movi	r16,1517
 4017478:	04017b44 	movi	r16,1517
 401747c:	04017b44 	movi	r16,1517
 4017480:	04017b44 	movi	r16,1517
 4017484:	04017b44 	movi	r16,1517
 4017488:	04017b44 	movi	r16,1517
 401748c:	04017dd8 	cmpnei	r16,zero,1527
 4017490:	04017dd8 	cmpnei	r16,zero,1527
 4017494:	04017dd8 	cmpnei	r16,zero,1527
 4017498:	04017dd8 	cmpnei	r16,zero,1527
 401749c:	04017dd8 	cmpnei	r16,zero,1527
 40174a0:	04017dd8 	cmpnei	r16,zero,1527
 40174a4:	04017dd8 	cmpnei	r16,zero,1527
 40174a8:	04017dd8 	cmpnei	r16,zero,1527
 40174ac:	04017dd8 	cmpnei	r16,zero,1527
 40174b0:	04017dd8 	cmpnei	r16,zero,1527
 40174b4:	04017b70 	cmpltui	r16,zero,1517
 40174b8:	04017dd8 	cmpnei	r16,zero,1527
 40174bc:	04017dd8 	cmpnei	r16,zero,1527
 40174c0:	04017dd8 	cmpnei	r16,zero,1527
 40174c4:	04017dd8 	cmpnei	r16,zero,1527
 40174c8:	04017dd8 	cmpnei	r16,zero,1527
 40174cc:	04017dd8 	cmpnei	r16,zero,1527
 40174d0:	04017dd8 	cmpnei	r16,zero,1527
 40174d4:	04017dd8 	cmpnei	r16,zero,1527
 40174d8:	04017dd8 	cmpnei	r16,zero,1527
 40174dc:	04017dd8 	cmpnei	r16,zero,1527
 40174e0:	04017ba8 	cmpgeui	r16,zero,1518
 40174e4:	04017dd8 	cmpnei	r16,zero,1527
 40174e8:	04017dd8 	cmpnei	r16,zero,1527
 40174ec:	04017dd8 	cmpnei	r16,zero,1527
 40174f0:	04017dd8 	cmpnei	r16,zero,1527
 40174f4:	04017dd8 	cmpnei	r16,zero,1527
 40174f8:	04017c00 	call	4017c0 <__reset-0x3bfe840>
 40174fc:	04017dd8 	cmpnei	r16,zero,1527
 4017500:	04017dd8 	cmpnei	r16,zero,1527
 4017504:	04017c70 	cmpltui	r16,zero,1521
 4017508:	04017dd8 	cmpnei	r16,zero,1527
 401750c:	04017dd8 	cmpnei	r16,zero,1527
 4017510:	04017dd8 	cmpnei	r16,zero,1527
 4017514:	04017dd8 	cmpnei	r16,zero,1527
 4017518:	04017dd8 	cmpnei	r16,zero,1527
 401751c:	04017dd8 	cmpnei	r16,zero,1527
 4017520:	04017dd8 	cmpnei	r16,zero,1527
 4017524:	04017dd8 	cmpnei	r16,zero,1527
 4017528:	04017dd8 	cmpnei	r16,zero,1527
 401752c:	04017dd8 	cmpnei	r16,zero,1527
 4017530:	04017a1c 	xori	r16,zero,1512
 4017534:	04017a48 	cmpgei	r16,zero,1513
 4017538:	04017dd8 	cmpnei	r16,zero,1527
 401753c:	04017dd8 	cmpnei	r16,zero,1527
 4017540:	04017dd8 	cmpnei	r16,zero,1527
 4017544:	04017d80 	call	4017d8 <__reset-0x3bfe828>
 4017548:	04017a48 	cmpgei	r16,zero,1513
 401754c:	04017dd8 	cmpnei	r16,zero,1527
 4017550:	04017dd8 	cmpnei	r16,zero,1527
 4017554:	040178dc 	xori	r16,zero,1507
 4017558:	04017dd8 	cmpnei	r16,zero,1527
 401755c:	040178ec 	andhi	r16,zero,1507
 4017560:	04017928 	cmpgeui	r16,zero,1508
 4017564:	04017624 	muli	r16,zero,1496
 4017568:	040178d0 	cmplti	r16,zero,1507
 401756c:	04017dd8 	cmpnei	r16,zero,1527
 4017570:	04017cac 	andhi	r16,zero,1522
 4017574:	04017dd8 	cmpnei	r16,zero,1527
 4017578:	04017d04 	movi	r16,1524
 401757c:	04017dd8 	cmpnei	r16,zero,1527
 4017580:	04017dd8 	cmpnei	r16,zero,1527
 4017584:	040179c8 	cmpgei	r16,zero,1511
 4017588:	42000204 	addi	r8,r8,8
 401758c:	da802317 	ldw	r10,140(sp)
 4017590:	5455883a 	add	r10,r10,r17
 4017594:	da802315 	stw	r10,140(sp)
 4017598:	003f8b06 	br	40173c8 <__alt_data_end+0xfc0173c8>
 401759c:	d9002017 	ldw	r4,128(sp)
 40175a0:	a00b883a 	mov	r5,r20
 40175a4:	40115780 	call	4011578 <__swsetup_r>
 40175a8:	1003b11e 	bne	r2,zero,4018470 <___vfiprintf_internal_r+0x11ec>
 40175ac:	a080030b 	ldhu	r2,12(r20)
 40175b0:	00c00284 	movi	r3,10
 40175b4:	1080068c 	andi	r2,r2,26
 40175b8:	10ff541e 	bne	r2,r3,401730c <__alt_data_end+0xfc01730c>
 40175bc:	a080038f 	ldh	r2,14(r20)
 40175c0:	103f5216 	blt	r2,zero,401730c <__alt_data_end+0xfc01730c>
 40175c4:	d9c02217 	ldw	r7,136(sp)
 40175c8:	d9002017 	ldw	r4,128(sp)
 40175cc:	e00d883a 	mov	r6,fp
 40175d0:	a00b883a 	mov	r5,r20
 40175d4:	40186fc0 	call	40186fc <__sbprintf>
 40175d8:	dfc03617 	ldw	ra,216(sp)
 40175dc:	df003517 	ldw	fp,212(sp)
 40175e0:	ddc03417 	ldw	r23,208(sp)
 40175e4:	dd803317 	ldw	r22,204(sp)
 40175e8:	dd403217 	ldw	r21,200(sp)
 40175ec:	dd003117 	ldw	r20,196(sp)
 40175f0:	dcc03017 	ldw	r19,192(sp)
 40175f4:	dc802f17 	ldw	r18,188(sp)
 40175f8:	dc402e17 	ldw	r17,184(sp)
 40175fc:	dc002d17 	ldw	r16,180(sp)
 4017600:	dec03704 	addi	sp,sp,220
 4017604:	f800283a 	ret
 4017608:	401354c0 	call	401354c <__sinit>
 401760c:	003f2f06 	br	40172cc <__alt_data_end+0xfc0172cc>
 4017610:	0463c83a 	sub	r17,zero,r17
 4017614:	d8802215 	stw	r2,136(sp)
 4017618:	a5000114 	ori	r20,r20,4
 401761c:	80c00007 	ldb	r3,0(r16)
 4017620:	003f7706 	br	4017400 <__alt_data_end+0xfc017400>
 4017624:	00800c04 	movi	r2,48
 4017628:	da802217 	ldw	r10,136(sp)
 401762c:	d8801d05 	stb	r2,116(sp)
 4017630:	00801e04 	movi	r2,120
 4017634:	d8801d45 	stb	r2,117(sp)
 4017638:	d8001d85 	stb	zero,118(sp)
 401763c:	50c00104 	addi	r3,r10,4
 4017640:	54800017 	ldw	r18,0(r10)
 4017644:	0027883a 	mov	r19,zero
 4017648:	a0800094 	ori	r2,r20,2
 401764c:	48030b16 	blt	r9,zero,401827c <___vfiprintf_internal_r+0xff8>
 4017650:	00bfdfc4 	movi	r2,-129
 4017654:	a096703a 	and	r11,r20,r2
 4017658:	d8c02215 	stw	r3,136(sp)
 401765c:	5d000094 	ori	r20,r11,2
 4017660:	90032b1e 	bne	r18,zero,4018310 <___vfiprintf_internal_r+0x108c>
 4017664:	008100b4 	movhi	r2,1026
 4017668:	10bfc404 	addi	r2,r2,-240
 401766c:	d8802615 	stw	r2,152(sp)
 4017670:	0039883a 	mov	fp,zero
 4017674:	48017b1e 	bne	r9,zero,4017c64 <___vfiprintf_internal_r+0x9e0>
 4017678:	0013883a 	mov	r9,zero
 401767c:	0027883a 	mov	r19,zero
 4017680:	dd401a04 	addi	r21,sp,104
 4017684:	4825883a 	mov	r18,r9
 4017688:	4cc0010e 	bge	r9,r19,4017690 <___vfiprintf_internal_r+0x40c>
 401768c:	9825883a 	mov	r18,r19
 4017690:	e7003fcc 	andi	fp,fp,255
 4017694:	e700201c 	xori	fp,fp,128
 4017698:	e73fe004 	addi	fp,fp,-128
 401769c:	e0000126 	beq	fp,zero,40176a4 <___vfiprintf_internal_r+0x420>
 40176a0:	94800044 	addi	r18,r18,1
 40176a4:	a380008c 	andi	r14,r20,2
 40176a8:	70000126 	beq	r14,zero,40176b0 <___vfiprintf_internal_r+0x42c>
 40176ac:	94800084 	addi	r18,r18,2
 40176b0:	a700210c 	andi	fp,r20,132
 40176b4:	e001df1e 	bne	fp,zero,4017e34 <___vfiprintf_internal_r+0xbb0>
 40176b8:	8c87c83a 	sub	r3,r17,r18
 40176bc:	00c1dd0e 	bge	zero,r3,4017e34 <___vfiprintf_internal_r+0xbb0>
 40176c0:	01c00404 	movi	r7,16
 40176c4:	d8801c17 	ldw	r2,112(sp)
 40176c8:	38c3ad0e 	bge	r7,r3,4018580 <___vfiprintf_internal_r+0x12fc>
 40176cc:	028100b4 	movhi	r10,1026
 40176d0:	52803804 	addi	r10,r10,224
 40176d4:	dc002915 	stw	r16,164(sp)
 40176d8:	d9801b17 	ldw	r6,108(sp)
 40176dc:	da802415 	stw	r10,144(sp)
 40176e0:	03c001c4 	movi	r15,7
 40176e4:	da402515 	stw	r9,148(sp)
 40176e8:	db802815 	stw	r14,160(sp)
 40176ec:	1821883a 	mov	r16,r3
 40176f0:	00000506 	br	4017708 <___vfiprintf_internal_r+0x484>
 40176f4:	31400084 	addi	r5,r6,2
 40176f8:	42000204 	addi	r8,r8,8
 40176fc:	200d883a 	mov	r6,r4
 4017700:	843ffc04 	addi	r16,r16,-16
 4017704:	3c000d0e 	bge	r7,r16,401773c <___vfiprintf_internal_r+0x4b8>
 4017708:	10800404 	addi	r2,r2,16
 401770c:	31000044 	addi	r4,r6,1
 4017710:	45800015 	stw	r22,0(r8)
 4017714:	41c00115 	stw	r7,4(r8)
 4017718:	d8801c15 	stw	r2,112(sp)
 401771c:	d9001b15 	stw	r4,108(sp)
 4017720:	793ff40e 	bge	r15,r4,40176f4 <__alt_data_end+0xfc0176f4>
 4017724:	1001b51e 	bne	r2,zero,4017dfc <___vfiprintf_internal_r+0xb78>
 4017728:	843ffc04 	addi	r16,r16,-16
 401772c:	000d883a 	mov	r6,zero
 4017730:	01400044 	movi	r5,1
 4017734:	d811883a 	mov	r8,sp
 4017738:	3c3ff316 	blt	r7,r16,4017708 <__alt_data_end+0xfc017708>
 401773c:	8007883a 	mov	r3,r16
 4017740:	da402517 	ldw	r9,148(sp)
 4017744:	db802817 	ldw	r14,160(sp)
 4017748:	dc002917 	ldw	r16,164(sp)
 401774c:	da802417 	ldw	r10,144(sp)
 4017750:	1885883a 	add	r2,r3,r2
 4017754:	40c00115 	stw	r3,4(r8)
 4017758:	42800015 	stw	r10,0(r8)
 401775c:	d8801c15 	stw	r2,112(sp)
 4017760:	d9401b15 	stw	r5,108(sp)
 4017764:	00c001c4 	movi	r3,7
 4017768:	19426016 	blt	r3,r5,40180ec <___vfiprintf_internal_r+0xe68>
 401776c:	d8c01d87 	ldb	r3,118(sp)
 4017770:	42000204 	addi	r8,r8,8
 4017774:	29000044 	addi	r4,r5,1
 4017778:	1801b31e 	bne	r3,zero,4017e48 <___vfiprintf_internal_r+0xbc4>
 401777c:	7001c026 	beq	r14,zero,4017e80 <___vfiprintf_internal_r+0xbfc>
 4017780:	d8c01d04 	addi	r3,sp,116
 4017784:	10800084 	addi	r2,r2,2
 4017788:	40c00015 	stw	r3,0(r8)
 401778c:	00c00084 	movi	r3,2
 4017790:	40c00115 	stw	r3,4(r8)
 4017794:	d8801c15 	stw	r2,112(sp)
 4017798:	d9001b15 	stw	r4,108(sp)
 401779c:	00c001c4 	movi	r3,7
 40177a0:	1902650e 	bge	r3,r4,4018138 <___vfiprintf_internal_r+0xeb4>
 40177a4:	10029a1e 	bne	r2,zero,4018210 <___vfiprintf_internal_r+0xf8c>
 40177a8:	00c02004 	movi	r3,128
 40177ac:	01000044 	movi	r4,1
 40177b0:	000b883a 	mov	r5,zero
 40177b4:	d811883a 	mov	r8,sp
 40177b8:	e0c1b31e 	bne	fp,r3,4017e88 <___vfiprintf_internal_r+0xc04>
 40177bc:	8cb9c83a 	sub	fp,r17,r18
 40177c0:	0701b10e 	bge	zero,fp,4017e88 <___vfiprintf_internal_r+0xc04>
 40177c4:	01c00404 	movi	r7,16
 40177c8:	3f03890e 	bge	r7,fp,40185f0 <___vfiprintf_internal_r+0x136c>
 40177cc:	00c100b4 	movhi	r3,1026
 40177d0:	18c03404 	addi	r3,r3,208
 40177d4:	d8c02415 	stw	r3,144(sp)
 40177d8:	8007883a 	mov	r3,r16
 40177dc:	034001c4 	movi	r13,7
 40177e0:	e021883a 	mov	r16,fp
 40177e4:	da402515 	stw	r9,148(sp)
 40177e8:	1839883a 	mov	fp,r3
 40177ec:	00000506 	br	4017804 <___vfiprintf_internal_r+0x580>
 40177f0:	29800084 	addi	r6,r5,2
 40177f4:	42000204 	addi	r8,r8,8
 40177f8:	180b883a 	mov	r5,r3
 40177fc:	843ffc04 	addi	r16,r16,-16
 4017800:	3c000d0e 	bge	r7,r16,4017838 <___vfiprintf_internal_r+0x5b4>
 4017804:	10800404 	addi	r2,r2,16
 4017808:	28c00044 	addi	r3,r5,1
 401780c:	45c00015 	stw	r23,0(r8)
 4017810:	41c00115 	stw	r7,4(r8)
 4017814:	d8801c15 	stw	r2,112(sp)
 4017818:	d8c01b15 	stw	r3,108(sp)
 401781c:	68fff40e 	bge	r13,r3,40177f0 <__alt_data_end+0xfc0177f0>
 4017820:	1002241e 	bne	r2,zero,40180b4 <___vfiprintf_internal_r+0xe30>
 4017824:	843ffc04 	addi	r16,r16,-16
 4017828:	01800044 	movi	r6,1
 401782c:	000b883a 	mov	r5,zero
 4017830:	d811883a 	mov	r8,sp
 4017834:	3c3ff316 	blt	r7,r16,4017804 <__alt_data_end+0xfc017804>
 4017838:	da402517 	ldw	r9,148(sp)
 401783c:	e007883a 	mov	r3,fp
 4017840:	8039883a 	mov	fp,r16
 4017844:	1821883a 	mov	r16,r3
 4017848:	d8c02417 	ldw	r3,144(sp)
 401784c:	1705883a 	add	r2,r2,fp
 4017850:	47000115 	stw	fp,4(r8)
 4017854:	40c00015 	stw	r3,0(r8)
 4017858:	d8801c15 	stw	r2,112(sp)
 401785c:	d9801b15 	stw	r6,108(sp)
 4017860:	00c001c4 	movi	r3,7
 4017864:	19827616 	blt	r3,r6,4018240 <___vfiprintf_internal_r+0xfbc>
 4017868:	4cf9c83a 	sub	fp,r9,r19
 401786c:	42000204 	addi	r8,r8,8
 4017870:	31000044 	addi	r4,r6,1
 4017874:	300b883a 	mov	r5,r6
 4017878:	07018516 	blt	zero,fp,4017e90 <___vfiprintf_internal_r+0xc0c>
 401787c:	9885883a 	add	r2,r19,r2
 4017880:	45400015 	stw	r21,0(r8)
 4017884:	44c00115 	stw	r19,4(r8)
 4017888:	d8801c15 	stw	r2,112(sp)
 401788c:	d9001b15 	stw	r4,108(sp)
 4017890:	00c001c4 	movi	r3,7
 4017894:	1901dd0e 	bge	r3,r4,401800c <___vfiprintf_internal_r+0xd88>
 4017898:	1002401e 	bne	r2,zero,401819c <___vfiprintf_internal_r+0xf18>
 401789c:	d8001b15 	stw	zero,108(sp)
 40178a0:	a2c0010c 	andi	r11,r20,4
 40178a4:	58000226 	beq	r11,zero,40178b0 <___vfiprintf_internal_r+0x62c>
 40178a8:	8ca7c83a 	sub	r19,r17,r18
 40178ac:	04c2f216 	blt	zero,r19,4018478 <___vfiprintf_internal_r+0x11f4>
 40178b0:	8c80010e 	bge	r17,r18,40178b8 <___vfiprintf_internal_r+0x634>
 40178b4:	9023883a 	mov	r17,r18
 40178b8:	da802317 	ldw	r10,140(sp)
 40178bc:	5455883a 	add	r10,r10,r17
 40178c0:	da802315 	stw	r10,140(sp)
 40178c4:	d8001b15 	stw	zero,108(sp)
 40178c8:	d811883a 	mov	r8,sp
 40178cc:	003ea206 	br	4017358 <__alt_data_end+0xfc017358>
 40178d0:	a5000814 	ori	r20,r20,32
 40178d4:	80c00007 	ldb	r3,0(r16)
 40178d8:	003ec906 	br	4017400 <__alt_data_end+0xfc017400>
 40178dc:	80c00007 	ldb	r3,0(r16)
 40178e0:	1b030926 	beq	r3,r12,4018508 <___vfiprintf_internal_r+0x1284>
 40178e4:	a5000414 	ori	r20,r20,16
 40178e8:	003ec506 	br	4017400 <__alt_data_end+0xfc017400>
 40178ec:	21003fcc 	andi	r4,r4,255
 40178f0:	20035e1e 	bne	r4,zero,401866c <___vfiprintf_internal_r+0x13e8>
 40178f4:	a080080c 	andi	r2,r20,32
 40178f8:	1002a526 	beq	r2,zero,4018390 <___vfiprintf_internal_r+0x110c>
 40178fc:	da802217 	ldw	r10,136(sp)
 4017900:	50800017 	ldw	r2,0(r10)
 4017904:	da802317 	ldw	r10,140(sp)
 4017908:	5007d7fa 	srai	r3,r10,31
 401790c:	da802217 	ldw	r10,136(sp)
 4017910:	10c00115 	stw	r3,4(r2)
 4017914:	52800104 	addi	r10,r10,4
 4017918:	da802215 	stw	r10,136(sp)
 401791c:	da802317 	ldw	r10,140(sp)
 4017920:	12800015 	stw	r10,0(r2)
 4017924:	003e8c06 	br	4017358 <__alt_data_end+0xfc017358>
 4017928:	21003fcc 	andi	r4,r4,255
 401792c:	2003511e 	bne	r4,zero,4018674 <___vfiprintf_internal_r+0x13f0>
 4017930:	a080080c 	andi	r2,r20,32
 4017934:	1000a126 	beq	r2,zero,4017bbc <___vfiprintf_internal_r+0x938>
 4017938:	da802217 	ldw	r10,136(sp)
 401793c:	d8001d85 	stb	zero,118(sp)
 4017940:	50800204 	addi	r2,r10,8
 4017944:	54800017 	ldw	r18,0(r10)
 4017948:	54c00117 	ldw	r19,4(r10)
 401794c:	4802b416 	blt	r9,zero,4018420 <___vfiprintf_internal_r+0x119c>
 4017950:	013fdfc4 	movi	r4,-129
 4017954:	94c6b03a 	or	r3,r18,r19
 4017958:	d8802215 	stw	r2,136(sp)
 401795c:	a128703a 	and	r20,r20,r4
 4017960:	1800a226 	beq	r3,zero,4017bec <___vfiprintf_internal_r+0x968>
 4017964:	0039883a 	mov	fp,zero
 4017968:	dd401a04 	addi	r21,sp,104
 401796c:	9006d0fa 	srli	r3,r18,3
 4017970:	9808977a 	slli	r4,r19,29
 4017974:	9826d0fa 	srli	r19,r19,3
 4017978:	948001cc 	andi	r18,r18,7
 401797c:	90800c04 	addi	r2,r18,48
 4017980:	ad7fffc4 	addi	r21,r21,-1
 4017984:	20e4b03a 	or	r18,r4,r3
 4017988:	a8800005 	stb	r2,0(r21)
 401798c:	94c6b03a 	or	r3,r18,r19
 4017990:	183ff61e 	bne	r3,zero,401796c <__alt_data_end+0xfc01796c>
 4017994:	a0c0004c 	andi	r3,r20,1
 4017998:	18005926 	beq	r3,zero,4017b00 <___vfiprintf_internal_r+0x87c>
 401799c:	10803fcc 	andi	r2,r2,255
 40179a0:	1080201c 	xori	r2,r2,128
 40179a4:	10bfe004 	addi	r2,r2,-128
 40179a8:	00c00c04 	movi	r3,48
 40179ac:	10c05426 	beq	r2,r3,4017b00 <___vfiprintf_internal_r+0x87c>
 40179b0:	da801e17 	ldw	r10,120(sp)
 40179b4:	a8bfffc4 	addi	r2,r21,-1
 40179b8:	a8ffffc5 	stb	r3,-1(r21)
 40179bc:	50a7c83a 	sub	r19,r10,r2
 40179c0:	102b883a 	mov	r21,r2
 40179c4:	003f2f06 	br	4017684 <__alt_data_end+0xfc017684>
 40179c8:	21003fcc 	andi	r4,r4,255
 40179cc:	2003421e 	bne	r4,zero,40186d8 <___vfiprintf_internal_r+0x1454>
 40179d0:	008100b4 	movhi	r2,1026
 40179d4:	10bfc404 	addi	r2,r2,-240
 40179d8:	d8802615 	stw	r2,152(sp)
 40179dc:	a080080c 	andi	r2,r20,32
 40179e0:	1000aa26 	beq	r2,zero,4017c8c <___vfiprintf_internal_r+0xa08>
 40179e4:	da802217 	ldw	r10,136(sp)
 40179e8:	54800017 	ldw	r18,0(r10)
 40179ec:	54c00117 	ldw	r19,4(r10)
 40179f0:	52800204 	addi	r10,r10,8
 40179f4:	da802215 	stw	r10,136(sp)
 40179f8:	a080004c 	andi	r2,r20,1
 40179fc:	1001d226 	beq	r2,zero,4018148 <___vfiprintf_internal_r+0xec4>
 4017a00:	94c4b03a 	or	r2,r18,r19
 4017a04:	1002351e 	bne	r2,zero,40182dc <___vfiprintf_internal_r+0x1058>
 4017a08:	d8001d85 	stb	zero,118(sp)
 4017a0c:	48022216 	blt	r9,zero,4018298 <___vfiprintf_internal_r+0x1014>
 4017a10:	00bfdfc4 	movi	r2,-129
 4017a14:	a0a8703a 	and	r20,r20,r2
 4017a18:	003f1506 	br	4017670 <__alt_data_end+0xfc017670>
 4017a1c:	da802217 	ldw	r10,136(sp)
 4017a20:	04800044 	movi	r18,1
 4017a24:	d8001d85 	stb	zero,118(sp)
 4017a28:	50800017 	ldw	r2,0(r10)
 4017a2c:	52800104 	addi	r10,r10,4
 4017a30:	da802215 	stw	r10,136(sp)
 4017a34:	d8801005 	stb	r2,64(sp)
 4017a38:	9027883a 	mov	r19,r18
 4017a3c:	dd401004 	addi	r21,sp,64
 4017a40:	0013883a 	mov	r9,zero
 4017a44:	003f1706 	br	40176a4 <__alt_data_end+0xfc0176a4>
 4017a48:	21003fcc 	andi	r4,r4,255
 4017a4c:	2003201e 	bne	r4,zero,40186d0 <___vfiprintf_internal_r+0x144c>
 4017a50:	a080080c 	andi	r2,r20,32
 4017a54:	10004b26 	beq	r2,zero,4017b84 <___vfiprintf_internal_r+0x900>
 4017a58:	da802217 	ldw	r10,136(sp)
 4017a5c:	50800117 	ldw	r2,4(r10)
 4017a60:	54800017 	ldw	r18,0(r10)
 4017a64:	52800204 	addi	r10,r10,8
 4017a68:	da802215 	stw	r10,136(sp)
 4017a6c:	1027883a 	mov	r19,r2
 4017a70:	10022c16 	blt	r2,zero,4018324 <___vfiprintf_internal_r+0x10a0>
 4017a74:	df001d83 	ldbu	fp,118(sp)
 4017a78:	48007216 	blt	r9,zero,4017c44 <___vfiprintf_internal_r+0x9c0>
 4017a7c:	00ffdfc4 	movi	r3,-129
 4017a80:	94c4b03a 	or	r2,r18,r19
 4017a84:	a0e8703a 	and	r20,r20,r3
 4017a88:	1000cc26 	beq	r2,zero,4017dbc <___vfiprintf_internal_r+0xb38>
 4017a8c:	98021026 	beq	r19,zero,40182d0 <___vfiprintf_internal_r+0x104c>
 4017a90:	dc402415 	stw	r17,144(sp)
 4017a94:	dc002515 	stw	r16,148(sp)
 4017a98:	9823883a 	mov	r17,r19
 4017a9c:	9021883a 	mov	r16,r18
 4017aa0:	dd401a04 	addi	r21,sp,104
 4017aa4:	4825883a 	mov	r18,r9
 4017aa8:	4027883a 	mov	r19,r8
 4017aac:	8009883a 	mov	r4,r16
 4017ab0:	880b883a 	mov	r5,r17
 4017ab4:	01800284 	movi	r6,10
 4017ab8:	000f883a 	mov	r7,zero
 4017abc:	40196640 	call	4019664 <__umoddi3>
 4017ac0:	10800c04 	addi	r2,r2,48
 4017ac4:	ad7fffc4 	addi	r21,r21,-1
 4017ac8:	8009883a 	mov	r4,r16
 4017acc:	880b883a 	mov	r5,r17
 4017ad0:	a8800005 	stb	r2,0(r21)
 4017ad4:	01800284 	movi	r6,10
 4017ad8:	000f883a 	mov	r7,zero
 4017adc:	40190ec0 	call	40190ec <__udivdi3>
 4017ae0:	1021883a 	mov	r16,r2
 4017ae4:	10c4b03a 	or	r2,r2,r3
 4017ae8:	1823883a 	mov	r17,r3
 4017aec:	103fef1e 	bne	r2,zero,4017aac <__alt_data_end+0xfc017aac>
 4017af0:	dc402417 	ldw	r17,144(sp)
 4017af4:	dc002517 	ldw	r16,148(sp)
 4017af8:	9013883a 	mov	r9,r18
 4017afc:	9811883a 	mov	r8,r19
 4017b00:	da801e17 	ldw	r10,120(sp)
 4017b04:	5567c83a 	sub	r19,r10,r21
 4017b08:	003ede06 	br	4017684 <__alt_data_end+0xfc017684>
 4017b0c:	38803fcc 	andi	r2,r7,255
 4017b10:	1080201c 	xori	r2,r2,128
 4017b14:	10bfe004 	addi	r2,r2,-128
 4017b18:	1002371e 	bne	r2,zero,40183f8 <___vfiprintf_internal_r+0x1174>
 4017b1c:	01000044 	movi	r4,1
 4017b20:	01c00804 	movi	r7,32
 4017b24:	80c00007 	ldb	r3,0(r16)
 4017b28:	003e3506 	br	4017400 <__alt_data_end+0xfc017400>
 4017b2c:	a5000054 	ori	r20,r20,1
 4017b30:	80c00007 	ldb	r3,0(r16)
 4017b34:	003e3206 	br	4017400 <__alt_data_end+0xfc017400>
 4017b38:	a5002014 	ori	r20,r20,128
 4017b3c:	80c00007 	ldb	r3,0(r16)
 4017b40:	003e2f06 	br	4017400 <__alt_data_end+0xfc017400>
 4017b44:	8015883a 	mov	r10,r16
 4017b48:	0023883a 	mov	r17,zero
 4017b4c:	18bff404 	addi	r2,r3,-48
 4017b50:	50c00007 	ldb	r3,0(r10)
 4017b54:	8c4002a4 	muli	r17,r17,10
 4017b58:	84000044 	addi	r16,r16,1
 4017b5c:	8015883a 	mov	r10,r16
 4017b60:	1463883a 	add	r17,r2,r17
 4017b64:	18bff404 	addi	r2,r3,-48
 4017b68:	30bff92e 	bgeu	r6,r2,4017b50 <__alt_data_end+0xfc017b50>
 4017b6c:	003e2506 	br	4017404 <__alt_data_end+0xfc017404>
 4017b70:	21003fcc 	andi	r4,r4,255
 4017b74:	2002d41e 	bne	r4,zero,40186c8 <___vfiprintf_internal_r+0x1444>
 4017b78:	a5000414 	ori	r20,r20,16
 4017b7c:	a080080c 	andi	r2,r20,32
 4017b80:	103fb51e 	bne	r2,zero,4017a58 <__alt_data_end+0xfc017a58>
 4017b84:	a080040c 	andi	r2,r20,16
 4017b88:	1001f826 	beq	r2,zero,401836c <___vfiprintf_internal_r+0x10e8>
 4017b8c:	da802217 	ldw	r10,136(sp)
 4017b90:	54800017 	ldw	r18,0(r10)
 4017b94:	52800104 	addi	r10,r10,4
 4017b98:	da802215 	stw	r10,136(sp)
 4017b9c:	9027d7fa 	srai	r19,r18,31
 4017ba0:	9805883a 	mov	r2,r19
 4017ba4:	003fb206 	br	4017a70 <__alt_data_end+0xfc017a70>
 4017ba8:	21003fcc 	andi	r4,r4,255
 4017bac:	2002c41e 	bne	r4,zero,40186c0 <___vfiprintf_internal_r+0x143c>
 4017bb0:	a5000414 	ori	r20,r20,16
 4017bb4:	a080080c 	andi	r2,r20,32
 4017bb8:	103f5f1e 	bne	r2,zero,4017938 <__alt_data_end+0xfc017938>
 4017bbc:	a080040c 	andi	r2,r20,16
 4017bc0:	10020f26 	beq	r2,zero,4018400 <___vfiprintf_internal_r+0x117c>
 4017bc4:	da802217 	ldw	r10,136(sp)
 4017bc8:	d8001d85 	stb	zero,118(sp)
 4017bcc:	0027883a 	mov	r19,zero
 4017bd0:	50800104 	addi	r2,r10,4
 4017bd4:	54800017 	ldw	r18,0(r10)
 4017bd8:	48021116 	blt	r9,zero,4018420 <___vfiprintf_internal_r+0x119c>
 4017bdc:	00ffdfc4 	movi	r3,-129
 4017be0:	d8802215 	stw	r2,136(sp)
 4017be4:	a0e8703a 	and	r20,r20,r3
 4017be8:	903f5e1e 	bne	r18,zero,4017964 <__alt_data_end+0xfc017964>
 4017bec:	0039883a 	mov	fp,zero
 4017bf0:	4802a626 	beq	r9,zero,401868c <___vfiprintf_internal_r+0x1408>
 4017bf4:	0025883a 	mov	r18,zero
 4017bf8:	0027883a 	mov	r19,zero
 4017bfc:	003f5a06 	br	4017968 <__alt_data_end+0xfc017968>
 4017c00:	21003fcc 	andi	r4,r4,255
 4017c04:	20029f1e 	bne	r4,zero,4018684 <___vfiprintf_internal_r+0x1400>
 4017c08:	a5000414 	ori	r20,r20,16
 4017c0c:	a080080c 	andi	r2,r20,32
 4017c10:	10005e1e 	bne	r2,zero,4017d8c <___vfiprintf_internal_r+0xb08>
 4017c14:	a080040c 	andi	r2,r20,16
 4017c18:	1001a21e 	bne	r2,zero,40182a4 <___vfiprintf_internal_r+0x1020>
 4017c1c:	a080100c 	andi	r2,r20,64
 4017c20:	d8001d85 	stb	zero,118(sp)
 4017c24:	da802217 	ldw	r10,136(sp)
 4017c28:	1002231e 	bne	r2,zero,40184b8 <___vfiprintf_internal_r+0x1234>
 4017c2c:	50800104 	addi	r2,r10,4
 4017c30:	54800017 	ldw	r18,0(r10)
 4017c34:	0027883a 	mov	r19,zero
 4017c38:	4801a00e 	bge	r9,zero,40182bc <___vfiprintf_internal_r+0x1038>
 4017c3c:	d8802215 	stw	r2,136(sp)
 4017c40:	0039883a 	mov	fp,zero
 4017c44:	94c4b03a 	or	r2,r18,r19
 4017c48:	103f901e 	bne	r2,zero,4017a8c <__alt_data_end+0xfc017a8c>
 4017c4c:	00800044 	movi	r2,1
 4017c50:	10803fcc 	andi	r2,r2,255
 4017c54:	00c00044 	movi	r3,1
 4017c58:	10c05926 	beq	r2,r3,4017dc0 <___vfiprintf_internal_r+0xb3c>
 4017c5c:	00c00084 	movi	r3,2
 4017c60:	10ffe41e 	bne	r2,r3,4017bf4 <__alt_data_end+0xfc017bf4>
 4017c64:	0025883a 	mov	r18,zero
 4017c68:	0027883a 	mov	r19,zero
 4017c6c:	00013d06 	br	4018164 <___vfiprintf_internal_r+0xee0>
 4017c70:	21003fcc 	andi	r4,r4,255
 4017c74:	2002811e 	bne	r4,zero,401867c <___vfiprintf_internal_r+0x13f8>
 4017c78:	008100b4 	movhi	r2,1026
 4017c7c:	10bfbf04 	addi	r2,r2,-260
 4017c80:	d8802615 	stw	r2,152(sp)
 4017c84:	a080080c 	andi	r2,r20,32
 4017c88:	103f561e 	bne	r2,zero,40179e4 <__alt_data_end+0xfc0179e4>
 4017c8c:	a080040c 	andi	r2,r20,16
 4017c90:	1001d126 	beq	r2,zero,40183d8 <___vfiprintf_internal_r+0x1154>
 4017c94:	da802217 	ldw	r10,136(sp)
 4017c98:	0027883a 	mov	r19,zero
 4017c9c:	54800017 	ldw	r18,0(r10)
 4017ca0:	52800104 	addi	r10,r10,4
 4017ca4:	da802215 	stw	r10,136(sp)
 4017ca8:	003f5306 	br	40179f8 <__alt_data_end+0xfc0179f8>
 4017cac:	da802217 	ldw	r10,136(sp)
 4017cb0:	d8001d85 	stb	zero,118(sp)
 4017cb4:	55400017 	ldw	r21,0(r10)
 4017cb8:	50c00104 	addi	r3,r10,4
 4017cbc:	a8024226 	beq	r21,zero,40185c8 <___vfiprintf_internal_r+0x1344>
 4017cc0:	48021816 	blt	r9,zero,4018524 <___vfiprintf_internal_r+0x12a0>
 4017cc4:	480d883a 	mov	r6,r9
 4017cc8:	000b883a 	mov	r5,zero
 4017ccc:	a809883a 	mov	r4,r21
 4017cd0:	d8c02a15 	stw	r3,168(sp)
 4017cd4:	da002b15 	stw	r8,172(sp)
 4017cd8:	da402c15 	stw	r9,176(sp)
 4017cdc:	40142ac0 	call	40142ac <memchr>
 4017ce0:	d8c02a17 	ldw	r3,168(sp)
 4017ce4:	da002b17 	ldw	r8,172(sp)
 4017ce8:	da402c17 	ldw	r9,176(sp)
 4017cec:	10024826 	beq	r2,zero,4018610 <___vfiprintf_internal_r+0x138c>
 4017cf0:	1567c83a 	sub	r19,r2,r21
 4017cf4:	df001d83 	ldbu	fp,118(sp)
 4017cf8:	d8c02215 	stw	r3,136(sp)
 4017cfc:	0013883a 	mov	r9,zero
 4017d00:	003e6006 	br	4017684 <__alt_data_end+0xfc017684>
 4017d04:	21003fcc 	andi	r4,r4,255
 4017d08:	203fc026 	beq	r4,zero,4017c0c <__alt_data_end+0xfc017c0c>
 4017d0c:	d9c01d85 	stb	r7,118(sp)
 4017d10:	003fbe06 	br	4017c0c <__alt_data_end+0xfc017c0c>
 4017d14:	da802217 	ldw	r10,136(sp)
 4017d18:	54400017 	ldw	r17,0(r10)
 4017d1c:	50800104 	addi	r2,r10,4
 4017d20:	883e3b16 	blt	r17,zero,4017610 <__alt_data_end+0xfc017610>
 4017d24:	d8802215 	stw	r2,136(sp)
 4017d28:	80c00007 	ldb	r3,0(r16)
 4017d2c:	003db406 	br	4017400 <__alt_data_end+0xfc017400>
 4017d30:	01000044 	movi	r4,1
 4017d34:	01c00ac4 	movi	r7,43
 4017d38:	80c00007 	ldb	r3,0(r16)
 4017d3c:	003db006 	br	4017400 <__alt_data_end+0xfc017400>
 4017d40:	80c00007 	ldb	r3,0(r16)
 4017d44:	82800044 	addi	r10,r16,1
 4017d48:	1b423c26 	beq	r3,r13,401863c <___vfiprintf_internal_r+0x13b8>
 4017d4c:	18bff404 	addi	r2,r3,-48
 4017d50:	0013883a 	mov	r9,zero
 4017d54:	30822b36 	bltu	r6,r2,4018604 <___vfiprintf_internal_r+0x1380>
 4017d58:	50c00007 	ldb	r3,0(r10)
 4017d5c:	4a4002a4 	muli	r9,r9,10
 4017d60:	54000044 	addi	r16,r10,1
 4017d64:	8015883a 	mov	r10,r16
 4017d68:	4893883a 	add	r9,r9,r2
 4017d6c:	18bff404 	addi	r2,r3,-48
 4017d70:	30bff92e 	bgeu	r6,r2,4017d58 <__alt_data_end+0xfc017d58>
 4017d74:	483da30e 	bge	r9,zero,4017404 <__alt_data_end+0xfc017404>
 4017d78:	027fffc4 	movi	r9,-1
 4017d7c:	003da106 	br	4017404 <__alt_data_end+0xfc017404>
 4017d80:	a5001014 	ori	r20,r20,64
 4017d84:	80c00007 	ldb	r3,0(r16)
 4017d88:	003d9d06 	br	4017400 <__alt_data_end+0xfc017400>
 4017d8c:	da802217 	ldw	r10,136(sp)
 4017d90:	d8001d85 	stb	zero,118(sp)
 4017d94:	50c00204 	addi	r3,r10,8
 4017d98:	54800017 	ldw	r18,0(r10)
 4017d9c:	54c00117 	ldw	r19,4(r10)
 4017da0:	4801ca16 	blt	r9,zero,40184cc <___vfiprintf_internal_r+0x1248>
 4017da4:	013fdfc4 	movi	r4,-129
 4017da8:	94c4b03a 	or	r2,r18,r19
 4017dac:	d8c02215 	stw	r3,136(sp)
 4017db0:	a128703a 	and	r20,r20,r4
 4017db4:	0039883a 	mov	fp,zero
 4017db8:	103f341e 	bne	r2,zero,4017a8c <__alt_data_end+0xfc017a8c>
 4017dbc:	483e2e26 	beq	r9,zero,4017678 <__alt_data_end+0xfc017678>
 4017dc0:	0025883a 	mov	r18,zero
 4017dc4:	94800c04 	addi	r18,r18,48
 4017dc8:	dc8019c5 	stb	r18,103(sp)
 4017dcc:	dcc02717 	ldw	r19,156(sp)
 4017dd0:	dd4019c4 	addi	r21,sp,103
 4017dd4:	003e2b06 	br	4017684 <__alt_data_end+0xfc017684>
 4017dd8:	21003fcc 	andi	r4,r4,255
 4017ddc:	2002361e 	bne	r4,zero,40186b8 <___vfiprintf_internal_r+0x1434>
 4017de0:	1801c126 	beq	r3,zero,40184e8 <___vfiprintf_internal_r+0x1264>
 4017de4:	04800044 	movi	r18,1
 4017de8:	d8c01005 	stb	r3,64(sp)
 4017dec:	d8001d85 	stb	zero,118(sp)
 4017df0:	9027883a 	mov	r19,r18
 4017df4:	dd401004 	addi	r21,sp,64
 4017df8:	003f1106 	br	4017a40 <__alt_data_end+0xfc017a40>
 4017dfc:	d9402117 	ldw	r5,132(sp)
 4017e00:	d9002017 	ldw	r4,128(sp)
 4017e04:	d9801a04 	addi	r6,sp,104
 4017e08:	d9c02b15 	stw	r7,172(sp)
 4017e0c:	dbc02a15 	stw	r15,168(sp)
 4017e10:	40171700 	call	4017170 <__sprint_r.part.0>
 4017e14:	d9c02b17 	ldw	r7,172(sp)
 4017e18:	dbc02a17 	ldw	r15,168(sp)
 4017e1c:	10006d1e 	bne	r2,zero,4017fd4 <___vfiprintf_internal_r+0xd50>
 4017e20:	d9801b17 	ldw	r6,108(sp)
 4017e24:	d8801c17 	ldw	r2,112(sp)
 4017e28:	d811883a 	mov	r8,sp
 4017e2c:	31400044 	addi	r5,r6,1
 4017e30:	003e3306 	br	4017700 <__alt_data_end+0xfc017700>
 4017e34:	d9401b17 	ldw	r5,108(sp)
 4017e38:	d8801c17 	ldw	r2,112(sp)
 4017e3c:	29000044 	addi	r4,r5,1
 4017e40:	d8c01d87 	ldb	r3,118(sp)
 4017e44:	183e4d26 	beq	r3,zero,401777c <__alt_data_end+0xfc01777c>
 4017e48:	00c00044 	movi	r3,1
 4017e4c:	d9401d84 	addi	r5,sp,118
 4017e50:	10c5883a 	add	r2,r2,r3
 4017e54:	41400015 	stw	r5,0(r8)
 4017e58:	40c00115 	stw	r3,4(r8)
 4017e5c:	d8801c15 	stw	r2,112(sp)
 4017e60:	d9001b15 	stw	r4,108(sp)
 4017e64:	014001c4 	movi	r5,7
 4017e68:	2900a90e 	bge	r5,r4,4018110 <___vfiprintf_internal_r+0xe8c>
 4017e6c:	1000da1e 	bne	r2,zero,40181d8 <___vfiprintf_internal_r+0xf54>
 4017e70:	7000ab1e 	bne	r14,zero,4018120 <___vfiprintf_internal_r+0xe9c>
 4017e74:	000b883a 	mov	r5,zero
 4017e78:	1809883a 	mov	r4,r3
 4017e7c:	d811883a 	mov	r8,sp
 4017e80:	00c02004 	movi	r3,128
 4017e84:	e0fe4d26 	beq	fp,r3,40177bc <__alt_data_end+0xfc0177bc>
 4017e88:	4cf9c83a 	sub	fp,r9,r19
 4017e8c:	073e7b0e 	bge	zero,fp,401787c <__alt_data_end+0xfc01787c>
 4017e90:	01c00404 	movi	r7,16
 4017e94:	3f01900e 	bge	r7,fp,40184d8 <___vfiprintf_internal_r+0x1254>
 4017e98:	00c100b4 	movhi	r3,1026
 4017e9c:	18c03404 	addi	r3,r3,208
 4017ea0:	d8c02415 	stw	r3,144(sp)
 4017ea4:	034001c4 	movi	r13,7
 4017ea8:	00000506 	br	4017ec0 <___vfiprintf_internal_r+0xc3c>
 4017eac:	29000084 	addi	r4,r5,2
 4017eb0:	42000204 	addi	r8,r8,8
 4017eb4:	180b883a 	mov	r5,r3
 4017eb8:	e73ffc04 	addi	fp,fp,-16
 4017ebc:	3f000d0e 	bge	r7,fp,4017ef4 <___vfiprintf_internal_r+0xc70>
 4017ec0:	10800404 	addi	r2,r2,16
 4017ec4:	28c00044 	addi	r3,r5,1
 4017ec8:	45c00015 	stw	r23,0(r8)
 4017ecc:	41c00115 	stw	r7,4(r8)
 4017ed0:	d8801c15 	stw	r2,112(sp)
 4017ed4:	d8c01b15 	stw	r3,108(sp)
 4017ed8:	68fff40e 	bge	r13,r3,4017eac <__alt_data_end+0xfc017eac>
 4017edc:	1000101e 	bne	r2,zero,4017f20 <___vfiprintf_internal_r+0xc9c>
 4017ee0:	e73ffc04 	addi	fp,fp,-16
 4017ee4:	01000044 	movi	r4,1
 4017ee8:	000b883a 	mov	r5,zero
 4017eec:	d811883a 	mov	r8,sp
 4017ef0:	3f3ff316 	blt	r7,fp,4017ec0 <__alt_data_end+0xfc017ec0>
 4017ef4:	da802417 	ldw	r10,144(sp)
 4017ef8:	1705883a 	add	r2,r2,fp
 4017efc:	47000115 	stw	fp,4(r8)
 4017f00:	42800015 	stw	r10,0(r8)
 4017f04:	d8801c15 	stw	r2,112(sp)
 4017f08:	d9001b15 	stw	r4,108(sp)
 4017f0c:	00c001c4 	movi	r3,7
 4017f10:	19003616 	blt	r3,r4,4017fec <___vfiprintf_internal_r+0xd68>
 4017f14:	42000204 	addi	r8,r8,8
 4017f18:	21000044 	addi	r4,r4,1
 4017f1c:	003e5706 	br	401787c <__alt_data_end+0xfc01787c>
 4017f20:	d9402117 	ldw	r5,132(sp)
 4017f24:	d9002017 	ldw	r4,128(sp)
 4017f28:	d9801a04 	addi	r6,sp,104
 4017f2c:	d9c02b15 	stw	r7,172(sp)
 4017f30:	db402a15 	stw	r13,168(sp)
 4017f34:	40171700 	call	4017170 <__sprint_r.part.0>
 4017f38:	d9c02b17 	ldw	r7,172(sp)
 4017f3c:	db402a17 	ldw	r13,168(sp)
 4017f40:	1000241e 	bne	r2,zero,4017fd4 <___vfiprintf_internal_r+0xd50>
 4017f44:	d9401b17 	ldw	r5,108(sp)
 4017f48:	d8801c17 	ldw	r2,112(sp)
 4017f4c:	d811883a 	mov	r8,sp
 4017f50:	29000044 	addi	r4,r5,1
 4017f54:	003fd806 	br	4017eb8 <__alt_data_end+0xfc017eb8>
 4017f58:	d9401b17 	ldw	r5,108(sp)
 4017f5c:	00c100b4 	movhi	r3,1026
 4017f60:	18c03804 	addi	r3,r3,224
 4017f64:	d8c02415 	stw	r3,144(sp)
 4017f68:	29400044 	addi	r5,r5,1
 4017f6c:	d8c02417 	ldw	r3,144(sp)
 4017f70:	14c5883a 	add	r2,r2,r19
 4017f74:	44c00115 	stw	r19,4(r8)
 4017f78:	40c00015 	stw	r3,0(r8)
 4017f7c:	d8801c15 	stw	r2,112(sp)
 4017f80:	d9401b15 	stw	r5,108(sp)
 4017f84:	00c001c4 	movi	r3,7
 4017f88:	1940070e 	bge	r3,r5,4017fa8 <___vfiprintf_internal_r+0xd24>
 4017f8c:	103e4826 	beq	r2,zero,40178b0 <__alt_data_end+0xfc0178b0>
 4017f90:	d9402117 	ldw	r5,132(sp)
 4017f94:	d9002017 	ldw	r4,128(sp)
 4017f98:	d9801a04 	addi	r6,sp,104
 4017f9c:	40171700 	call	4017170 <__sprint_r.part.0>
 4017fa0:	10000c1e 	bne	r2,zero,4017fd4 <___vfiprintf_internal_r+0xd50>
 4017fa4:	d8801c17 	ldw	r2,112(sp)
 4017fa8:	8c80010e 	bge	r17,r18,4017fb0 <___vfiprintf_internal_r+0xd2c>
 4017fac:	9023883a 	mov	r17,r18
 4017fb0:	da802317 	ldw	r10,140(sp)
 4017fb4:	5455883a 	add	r10,r10,r17
 4017fb8:	da802315 	stw	r10,140(sp)
 4017fbc:	103e4126 	beq	r2,zero,40178c4 <__alt_data_end+0xfc0178c4>
 4017fc0:	d9402117 	ldw	r5,132(sp)
 4017fc4:	d9002017 	ldw	r4,128(sp)
 4017fc8:	d9801a04 	addi	r6,sp,104
 4017fcc:	40171700 	call	4017170 <__sprint_r.part.0>
 4017fd0:	103e3c26 	beq	r2,zero,40178c4 <__alt_data_end+0xfc0178c4>
 4017fd4:	dd002117 	ldw	r20,132(sp)
 4017fd8:	a080030b 	ldhu	r2,12(r20)
 4017fdc:	1080100c 	andi	r2,r2,64
 4017fe0:	1001231e 	bne	r2,zero,4018470 <___vfiprintf_internal_r+0x11ec>
 4017fe4:	d8802317 	ldw	r2,140(sp)
 4017fe8:	003d7b06 	br	40175d8 <__alt_data_end+0xfc0175d8>
 4017fec:	1000991e 	bne	r2,zero,4018254 <___vfiprintf_internal_r+0xfd0>
 4017ff0:	00c00044 	movi	r3,1
 4017ff4:	9805883a 	mov	r2,r19
 4017ff8:	dd400015 	stw	r21,0(sp)
 4017ffc:	dcc00115 	stw	r19,4(sp)
 4018000:	dcc01c15 	stw	r19,112(sp)
 4018004:	d8c01b15 	stw	r3,108(sp)
 4018008:	d811883a 	mov	r8,sp
 401800c:	42000204 	addi	r8,r8,8
 4018010:	a2c0010c 	andi	r11,r20,4
 4018014:	583fe426 	beq	r11,zero,4017fa8 <__alt_data_end+0xfc017fa8>
 4018018:	8ca7c83a 	sub	r19,r17,r18
 401801c:	04ffe20e 	bge	zero,r19,4017fa8 <__alt_data_end+0xfc017fa8>
 4018020:	01c00404 	movi	r7,16
 4018024:	3cffcc0e 	bge	r7,r19,4017f58 <__alt_data_end+0xfc017f58>
 4018028:	028100b4 	movhi	r10,1026
 401802c:	52803804 	addi	r10,r10,224
 4018030:	d9001b17 	ldw	r4,108(sp)
 4018034:	da802415 	stw	r10,144(sp)
 4018038:	382b883a 	mov	r21,r7
 401803c:	050001c4 	movi	r20,7
 4018040:	df002017 	ldw	fp,128(sp)
 4018044:	00000506 	br	401805c <___vfiprintf_internal_r+0xdd8>
 4018048:	21400084 	addi	r5,r4,2
 401804c:	42000204 	addi	r8,r8,8
 4018050:	1809883a 	mov	r4,r3
 4018054:	9cfffc04 	addi	r19,r19,-16
 4018058:	acffc40e 	bge	r21,r19,4017f6c <__alt_data_end+0xfc017f6c>
 401805c:	10800404 	addi	r2,r2,16
 4018060:	20c00044 	addi	r3,r4,1
 4018064:	45800015 	stw	r22,0(r8)
 4018068:	45400115 	stw	r21,4(r8)
 401806c:	d8801c15 	stw	r2,112(sp)
 4018070:	d8c01b15 	stw	r3,108(sp)
 4018074:	a0fff40e 	bge	r20,r3,4018048 <__alt_data_end+0xfc018048>
 4018078:	1000041e 	bne	r2,zero,401808c <___vfiprintf_internal_r+0xe08>
 401807c:	01400044 	movi	r5,1
 4018080:	0009883a 	mov	r4,zero
 4018084:	d811883a 	mov	r8,sp
 4018088:	003ff206 	br	4018054 <__alt_data_end+0xfc018054>
 401808c:	d9402117 	ldw	r5,132(sp)
 4018090:	d9801a04 	addi	r6,sp,104
 4018094:	e009883a 	mov	r4,fp
 4018098:	40171700 	call	4017170 <__sprint_r.part.0>
 401809c:	103fcd1e 	bne	r2,zero,4017fd4 <__alt_data_end+0xfc017fd4>
 40180a0:	d9001b17 	ldw	r4,108(sp)
 40180a4:	d8801c17 	ldw	r2,112(sp)
 40180a8:	d811883a 	mov	r8,sp
 40180ac:	21400044 	addi	r5,r4,1
 40180b0:	003fe806 	br	4018054 <__alt_data_end+0xfc018054>
 40180b4:	d9402117 	ldw	r5,132(sp)
 40180b8:	d9002017 	ldw	r4,128(sp)
 40180bc:	d9801a04 	addi	r6,sp,104
 40180c0:	d9c02b15 	stw	r7,172(sp)
 40180c4:	db402a15 	stw	r13,168(sp)
 40180c8:	40171700 	call	4017170 <__sprint_r.part.0>
 40180cc:	d9c02b17 	ldw	r7,172(sp)
 40180d0:	db402a17 	ldw	r13,168(sp)
 40180d4:	103fbf1e 	bne	r2,zero,4017fd4 <__alt_data_end+0xfc017fd4>
 40180d8:	d9401b17 	ldw	r5,108(sp)
 40180dc:	d8801c17 	ldw	r2,112(sp)
 40180e0:	d811883a 	mov	r8,sp
 40180e4:	29800044 	addi	r6,r5,1
 40180e8:	003dc406 	br	40177fc <__alt_data_end+0xfc0177fc>
 40180ec:	1000d21e 	bne	r2,zero,4018438 <___vfiprintf_internal_r+0x11b4>
 40180f0:	d8c01d87 	ldb	r3,118(sp)
 40180f4:	18009526 	beq	r3,zero,401834c <___vfiprintf_internal_r+0x10c8>
 40180f8:	00800044 	movi	r2,1
 40180fc:	d8c01d84 	addi	r3,sp,118
 4018100:	1009883a 	mov	r4,r2
 4018104:	d8c00015 	stw	r3,0(sp)
 4018108:	d8800115 	stw	r2,4(sp)
 401810c:	d811883a 	mov	r8,sp
 4018110:	200b883a 	mov	r5,r4
 4018114:	42000204 	addi	r8,r8,8
 4018118:	21000044 	addi	r4,r4,1
 401811c:	003d9706 	br	401777c <__alt_data_end+0xfc01777c>
 4018120:	d9001d04 	addi	r4,sp,116
 4018124:	00800084 	movi	r2,2
 4018128:	d9000015 	stw	r4,0(sp)
 401812c:	d8800115 	stw	r2,4(sp)
 4018130:	1809883a 	mov	r4,r3
 4018134:	d811883a 	mov	r8,sp
 4018138:	200b883a 	mov	r5,r4
 401813c:	42000204 	addi	r8,r8,8
 4018140:	21000044 	addi	r4,r4,1
 4018144:	003f4e06 	br	4017e80 <__alt_data_end+0xfc017e80>
 4018148:	d8001d85 	stb	zero,118(sp)
 401814c:	48005016 	blt	r9,zero,4018290 <___vfiprintf_internal_r+0x100c>
 4018150:	00ffdfc4 	movi	r3,-129
 4018154:	94c4b03a 	or	r2,r18,r19
 4018158:	a0e8703a 	and	r20,r20,r3
 401815c:	103d4426 	beq	r2,zero,4017670 <__alt_data_end+0xfc017670>
 4018160:	0039883a 	mov	fp,zero
 4018164:	d9002617 	ldw	r4,152(sp)
 4018168:	dd401a04 	addi	r21,sp,104
 401816c:	908003cc 	andi	r2,r18,15
 4018170:	9806973a 	slli	r3,r19,28
 4018174:	2085883a 	add	r2,r4,r2
 4018178:	9024d13a 	srli	r18,r18,4
 401817c:	10800003 	ldbu	r2,0(r2)
 4018180:	9826d13a 	srli	r19,r19,4
 4018184:	ad7fffc4 	addi	r21,r21,-1
 4018188:	1ca4b03a 	or	r18,r3,r18
 401818c:	a8800005 	stb	r2,0(r21)
 4018190:	94c4b03a 	or	r2,r18,r19
 4018194:	103ff51e 	bne	r2,zero,401816c <__alt_data_end+0xfc01816c>
 4018198:	003e5906 	br	4017b00 <__alt_data_end+0xfc017b00>
 401819c:	d9402117 	ldw	r5,132(sp)
 40181a0:	d9002017 	ldw	r4,128(sp)
 40181a4:	d9801a04 	addi	r6,sp,104
 40181a8:	40171700 	call	4017170 <__sprint_r.part.0>
 40181ac:	103f891e 	bne	r2,zero,4017fd4 <__alt_data_end+0xfc017fd4>
 40181b0:	d8801c17 	ldw	r2,112(sp)
 40181b4:	d811883a 	mov	r8,sp
 40181b8:	003f9506 	br	4018010 <__alt_data_end+0xfc018010>
 40181bc:	d9402117 	ldw	r5,132(sp)
 40181c0:	d9002017 	ldw	r4,128(sp)
 40181c4:	d9801a04 	addi	r6,sp,104
 40181c8:	40171700 	call	4017170 <__sprint_r.part.0>
 40181cc:	103f811e 	bne	r2,zero,4017fd4 <__alt_data_end+0xfc017fd4>
 40181d0:	d811883a 	mov	r8,sp
 40181d4:	003ced06 	br	401758c <__alt_data_end+0xfc01758c>
 40181d8:	d9402117 	ldw	r5,132(sp)
 40181dc:	d9002017 	ldw	r4,128(sp)
 40181e0:	d9801a04 	addi	r6,sp,104
 40181e4:	da402c15 	stw	r9,176(sp)
 40181e8:	db802a15 	stw	r14,168(sp)
 40181ec:	40171700 	call	4017170 <__sprint_r.part.0>
 40181f0:	da402c17 	ldw	r9,176(sp)
 40181f4:	db802a17 	ldw	r14,168(sp)
 40181f8:	103f761e 	bne	r2,zero,4017fd4 <__alt_data_end+0xfc017fd4>
 40181fc:	d9401b17 	ldw	r5,108(sp)
 4018200:	d8801c17 	ldw	r2,112(sp)
 4018204:	d811883a 	mov	r8,sp
 4018208:	29000044 	addi	r4,r5,1
 401820c:	003d5b06 	br	401777c <__alt_data_end+0xfc01777c>
 4018210:	d9402117 	ldw	r5,132(sp)
 4018214:	d9002017 	ldw	r4,128(sp)
 4018218:	d9801a04 	addi	r6,sp,104
 401821c:	da402c15 	stw	r9,176(sp)
 4018220:	40171700 	call	4017170 <__sprint_r.part.0>
 4018224:	da402c17 	ldw	r9,176(sp)
 4018228:	103f6a1e 	bne	r2,zero,4017fd4 <__alt_data_end+0xfc017fd4>
 401822c:	d9401b17 	ldw	r5,108(sp)
 4018230:	d8801c17 	ldw	r2,112(sp)
 4018234:	d811883a 	mov	r8,sp
 4018238:	29000044 	addi	r4,r5,1
 401823c:	003f1006 	br	4017e80 <__alt_data_end+0xfc017e80>
 4018240:	1000c31e 	bne	r2,zero,4018550 <___vfiprintf_internal_r+0x12cc>
 4018244:	01000044 	movi	r4,1
 4018248:	000b883a 	mov	r5,zero
 401824c:	d811883a 	mov	r8,sp
 4018250:	003f0d06 	br	4017e88 <__alt_data_end+0xfc017e88>
 4018254:	d9402117 	ldw	r5,132(sp)
 4018258:	d9002017 	ldw	r4,128(sp)
 401825c:	d9801a04 	addi	r6,sp,104
 4018260:	40171700 	call	4017170 <__sprint_r.part.0>
 4018264:	103f5b1e 	bne	r2,zero,4017fd4 <__alt_data_end+0xfc017fd4>
 4018268:	d9001b17 	ldw	r4,108(sp)
 401826c:	d8801c17 	ldw	r2,112(sp)
 4018270:	d811883a 	mov	r8,sp
 4018274:	21000044 	addi	r4,r4,1
 4018278:	003d8006 	br	401787c <__alt_data_end+0xfc01787c>
 401827c:	010100b4 	movhi	r4,1026
 4018280:	213fc404 	addi	r4,r4,-240
 4018284:	d9002615 	stw	r4,152(sp)
 4018288:	d8c02215 	stw	r3,136(sp)
 401828c:	1029883a 	mov	r20,r2
 4018290:	94c4b03a 	or	r2,r18,r19
 4018294:	103fb21e 	bne	r2,zero,4018160 <__alt_data_end+0xfc018160>
 4018298:	0039883a 	mov	fp,zero
 401829c:	00800084 	movi	r2,2
 40182a0:	003e6b06 	br	4017c50 <__alt_data_end+0xfc017c50>
 40182a4:	da802217 	ldw	r10,136(sp)
 40182a8:	d8001d85 	stb	zero,118(sp)
 40182ac:	0027883a 	mov	r19,zero
 40182b0:	50800104 	addi	r2,r10,4
 40182b4:	54800017 	ldw	r18,0(r10)
 40182b8:	483e6016 	blt	r9,zero,4017c3c <__alt_data_end+0xfc017c3c>
 40182bc:	00ffdfc4 	movi	r3,-129
 40182c0:	d8802215 	stw	r2,136(sp)
 40182c4:	a0e8703a 	and	r20,r20,r3
 40182c8:	0039883a 	mov	fp,zero
 40182cc:	903ebb26 	beq	r18,zero,4017dbc <__alt_data_end+0xfc017dbc>
 40182d0:	00800244 	movi	r2,9
 40182d4:	14bdee36 	bltu	r2,r18,4017a90 <__alt_data_end+0xfc017a90>
 40182d8:	003eba06 	br	4017dc4 <__alt_data_end+0xfc017dc4>
 40182dc:	00800c04 	movi	r2,48
 40182e0:	d8c01d45 	stb	r3,117(sp)
 40182e4:	d8801d05 	stb	r2,116(sp)
 40182e8:	d8001d85 	stb	zero,118(sp)
 40182ec:	a0c00094 	ori	r3,r20,2
 40182f0:	4800a916 	blt	r9,zero,4018598 <___vfiprintf_internal_r+0x1314>
 40182f4:	00bfdfc4 	movi	r2,-129
 40182f8:	a096703a 	and	r11,r20,r2
 40182fc:	5d000094 	ori	r20,r11,2
 4018300:	0039883a 	mov	fp,zero
 4018304:	003f9706 	br	4018164 <__alt_data_end+0xfc018164>
 4018308:	8025883a 	mov	r18,r16
 401830c:	003c2e06 	br	40173c8 <__alt_data_end+0xfc0173c8>
 4018310:	008100b4 	movhi	r2,1026
 4018314:	10bfc404 	addi	r2,r2,-240
 4018318:	0039883a 	mov	fp,zero
 401831c:	d8802615 	stw	r2,152(sp)
 4018320:	003f9006 	br	4018164 <__alt_data_end+0xfc018164>
 4018324:	04a5c83a 	sub	r18,zero,r18
 4018328:	07000b44 	movi	fp,45
 401832c:	9004c03a 	cmpne	r2,r18,zero
 4018330:	04e7c83a 	sub	r19,zero,r19
 4018334:	df001d85 	stb	fp,118(sp)
 4018338:	98a7c83a 	sub	r19,r19,r2
 401833c:	48009f16 	blt	r9,zero,40185bc <___vfiprintf_internal_r+0x1338>
 4018340:	00bfdfc4 	movi	r2,-129
 4018344:	a0a8703a 	and	r20,r20,r2
 4018348:	003dd006 	br	4017a8c <__alt_data_end+0xfc017a8c>
 401834c:	70004c26 	beq	r14,zero,4018480 <___vfiprintf_internal_r+0x11fc>
 4018350:	00800084 	movi	r2,2
 4018354:	d8c01d04 	addi	r3,sp,116
 4018358:	d8c00015 	stw	r3,0(sp)
 401835c:	d8800115 	stw	r2,4(sp)
 4018360:	01000044 	movi	r4,1
 4018364:	d811883a 	mov	r8,sp
 4018368:	003f7306 	br	4018138 <__alt_data_end+0xfc018138>
 401836c:	a080100c 	andi	r2,r20,64
 4018370:	da802217 	ldw	r10,136(sp)
 4018374:	103e0626 	beq	r2,zero,4017b90 <__alt_data_end+0xfc017b90>
 4018378:	5480000f 	ldh	r18,0(r10)
 401837c:	52800104 	addi	r10,r10,4
 4018380:	da802215 	stw	r10,136(sp)
 4018384:	9027d7fa 	srai	r19,r18,31
 4018388:	9805883a 	mov	r2,r19
 401838c:	003db806 	br	4017a70 <__alt_data_end+0xfc017a70>
 4018390:	a080040c 	andi	r2,r20,16
 4018394:	1000091e 	bne	r2,zero,40183bc <___vfiprintf_internal_r+0x1138>
 4018398:	a2c0100c 	andi	r11,r20,64
 401839c:	58000726 	beq	r11,zero,40183bc <___vfiprintf_internal_r+0x1138>
 40183a0:	da802217 	ldw	r10,136(sp)
 40183a4:	50800017 	ldw	r2,0(r10)
 40183a8:	52800104 	addi	r10,r10,4
 40183ac:	da802215 	stw	r10,136(sp)
 40183b0:	da802317 	ldw	r10,140(sp)
 40183b4:	1280000d 	sth	r10,0(r2)
 40183b8:	003be706 	br	4017358 <__alt_data_end+0xfc017358>
 40183bc:	da802217 	ldw	r10,136(sp)
 40183c0:	50800017 	ldw	r2,0(r10)
 40183c4:	52800104 	addi	r10,r10,4
 40183c8:	da802215 	stw	r10,136(sp)
 40183cc:	da802317 	ldw	r10,140(sp)
 40183d0:	12800015 	stw	r10,0(r2)
 40183d4:	003be006 	br	4017358 <__alt_data_end+0xfc017358>
 40183d8:	a080100c 	andi	r2,r20,64
 40183dc:	da802217 	ldw	r10,136(sp)
 40183e0:	10003026 	beq	r2,zero,40184a4 <___vfiprintf_internal_r+0x1220>
 40183e4:	5480000b 	ldhu	r18,0(r10)
 40183e8:	52800104 	addi	r10,r10,4
 40183ec:	0027883a 	mov	r19,zero
 40183f0:	da802215 	stw	r10,136(sp)
 40183f4:	003d8006 	br	40179f8 <__alt_data_end+0xfc0179f8>
 40183f8:	80c00007 	ldb	r3,0(r16)
 40183fc:	003c0006 	br	4017400 <__alt_data_end+0xfc017400>
 4018400:	a080100c 	andi	r2,r20,64
 4018404:	d8001d85 	stb	zero,118(sp)
 4018408:	da802217 	ldw	r10,136(sp)
 401840c:	1000201e 	bne	r2,zero,4018490 <___vfiprintf_internal_r+0x120c>
 4018410:	50800104 	addi	r2,r10,4
 4018414:	54800017 	ldw	r18,0(r10)
 4018418:	0027883a 	mov	r19,zero
 401841c:	483def0e 	bge	r9,zero,4017bdc <__alt_data_end+0xfc017bdc>
 4018420:	94c6b03a 	or	r3,r18,r19
 4018424:	d8802215 	stw	r2,136(sp)
 4018428:	183d4e1e 	bne	r3,zero,4017964 <__alt_data_end+0xfc017964>
 401842c:	0039883a 	mov	fp,zero
 4018430:	0005883a 	mov	r2,zero
 4018434:	003e0606 	br	4017c50 <__alt_data_end+0xfc017c50>
 4018438:	d9402117 	ldw	r5,132(sp)
 401843c:	d9002017 	ldw	r4,128(sp)
 4018440:	d9801a04 	addi	r6,sp,104
 4018444:	da402c15 	stw	r9,176(sp)
 4018448:	db802a15 	stw	r14,168(sp)
 401844c:	40171700 	call	4017170 <__sprint_r.part.0>
 4018450:	da402c17 	ldw	r9,176(sp)
 4018454:	db802a17 	ldw	r14,168(sp)
 4018458:	103ede1e 	bne	r2,zero,4017fd4 <__alt_data_end+0xfc017fd4>
 401845c:	d9401b17 	ldw	r5,108(sp)
 4018460:	d8801c17 	ldw	r2,112(sp)
 4018464:	d811883a 	mov	r8,sp
 4018468:	29000044 	addi	r4,r5,1
 401846c:	003e7406 	br	4017e40 <__alt_data_end+0xfc017e40>
 4018470:	00bfffc4 	movi	r2,-1
 4018474:	003c5806 	br	40175d8 <__alt_data_end+0xfc0175d8>
 4018478:	d811883a 	mov	r8,sp
 401847c:	003ee806 	br	4018020 <__alt_data_end+0xfc018020>
 4018480:	000b883a 	mov	r5,zero
 4018484:	01000044 	movi	r4,1
 4018488:	d811883a 	mov	r8,sp
 401848c:	003e7c06 	br	4017e80 <__alt_data_end+0xfc017e80>
 4018490:	50800104 	addi	r2,r10,4
 4018494:	5480000b 	ldhu	r18,0(r10)
 4018498:	0027883a 	mov	r19,zero
 401849c:	483dcf0e 	bge	r9,zero,4017bdc <__alt_data_end+0xfc017bdc>
 40184a0:	003fdf06 	br	4018420 <__alt_data_end+0xfc018420>
 40184a4:	54800017 	ldw	r18,0(r10)
 40184a8:	52800104 	addi	r10,r10,4
 40184ac:	0027883a 	mov	r19,zero
 40184b0:	da802215 	stw	r10,136(sp)
 40184b4:	003d5006 	br	40179f8 <__alt_data_end+0xfc0179f8>
 40184b8:	50800104 	addi	r2,r10,4
 40184bc:	5480000b 	ldhu	r18,0(r10)
 40184c0:	0027883a 	mov	r19,zero
 40184c4:	483f7d0e 	bge	r9,zero,40182bc <__alt_data_end+0xfc0182bc>
 40184c8:	003ddc06 	br	4017c3c <__alt_data_end+0xfc017c3c>
 40184cc:	d8c02215 	stw	r3,136(sp)
 40184d0:	0039883a 	mov	fp,zero
 40184d4:	003ddb06 	br	4017c44 <__alt_data_end+0xfc017c44>
 40184d8:	028100b4 	movhi	r10,1026
 40184dc:	52803404 	addi	r10,r10,208
 40184e0:	da802415 	stw	r10,144(sp)
 40184e4:	003e8306 	br	4017ef4 <__alt_data_end+0xfc017ef4>
 40184e8:	d8801c17 	ldw	r2,112(sp)
 40184ec:	dd002117 	ldw	r20,132(sp)
 40184f0:	103eb926 	beq	r2,zero,4017fd8 <__alt_data_end+0xfc017fd8>
 40184f4:	d9002017 	ldw	r4,128(sp)
 40184f8:	d9801a04 	addi	r6,sp,104
 40184fc:	a00b883a 	mov	r5,r20
 4018500:	40171700 	call	4017170 <__sprint_r.part.0>
 4018504:	003eb406 	br	4017fd8 <__alt_data_end+0xfc017fd8>
 4018508:	80c00043 	ldbu	r3,1(r16)
 401850c:	a5000814 	ori	r20,r20,32
 4018510:	84000044 	addi	r16,r16,1
 4018514:	18c03fcc 	andi	r3,r3,255
 4018518:	18c0201c 	xori	r3,r3,128
 401851c:	18ffe004 	addi	r3,r3,-128
 4018520:	003bb706 	br	4017400 <__alt_data_end+0xfc017400>
 4018524:	a809883a 	mov	r4,r21
 4018528:	d8c02a15 	stw	r3,168(sp)
 401852c:	da002b15 	stw	r8,172(sp)
 4018530:	400d0300 	call	400d030 <strlen>
 4018534:	d8c02a17 	ldw	r3,168(sp)
 4018538:	1027883a 	mov	r19,r2
 401853c:	df001d83 	ldbu	fp,118(sp)
 4018540:	d8c02215 	stw	r3,136(sp)
 4018544:	0013883a 	mov	r9,zero
 4018548:	da002b17 	ldw	r8,172(sp)
 401854c:	003c4d06 	br	4017684 <__alt_data_end+0xfc017684>
 4018550:	d9402117 	ldw	r5,132(sp)
 4018554:	d9002017 	ldw	r4,128(sp)
 4018558:	d9801a04 	addi	r6,sp,104
 401855c:	da402c15 	stw	r9,176(sp)
 4018560:	40171700 	call	4017170 <__sprint_r.part.0>
 4018564:	da402c17 	ldw	r9,176(sp)
 4018568:	103e9a1e 	bne	r2,zero,4017fd4 <__alt_data_end+0xfc017fd4>
 401856c:	d9401b17 	ldw	r5,108(sp)
 4018570:	d8801c17 	ldw	r2,112(sp)
 4018574:	d811883a 	mov	r8,sp
 4018578:	29000044 	addi	r4,r5,1
 401857c:	003e4206 	br	4017e88 <__alt_data_end+0xfc017e88>
 4018580:	d9401b17 	ldw	r5,108(sp)
 4018584:	010100b4 	movhi	r4,1026
 4018588:	21003804 	addi	r4,r4,224
 401858c:	d9002415 	stw	r4,144(sp)
 4018590:	29400044 	addi	r5,r5,1
 4018594:	003c6d06 	br	401774c <__alt_data_end+0xfc01774c>
 4018598:	0039883a 	mov	fp,zero
 401859c:	00800084 	movi	r2,2
 40185a0:	10803fcc 	andi	r2,r2,255
 40185a4:	01000044 	movi	r4,1
 40185a8:	11001e26 	beq	r2,r4,4018624 <___vfiprintf_internal_r+0x13a0>
 40185ac:	01000084 	movi	r4,2
 40185b0:	11001e1e 	bne	r2,r4,401862c <___vfiprintf_internal_r+0x13a8>
 40185b4:	1829883a 	mov	r20,r3
 40185b8:	003eea06 	br	4018164 <__alt_data_end+0xfc018164>
 40185bc:	a007883a 	mov	r3,r20
 40185c0:	00800044 	movi	r2,1
 40185c4:	003ff606 	br	40185a0 <__alt_data_end+0xfc0185a0>
 40185c8:	00800184 	movi	r2,6
 40185cc:	1240012e 	bgeu	r2,r9,40185d4 <___vfiprintf_internal_r+0x1350>
 40185d0:	1013883a 	mov	r9,r2
 40185d4:	4827883a 	mov	r19,r9
 40185d8:	4825883a 	mov	r18,r9
 40185dc:	48001516 	blt	r9,zero,4018634 <___vfiprintf_internal_r+0x13b0>
 40185e0:	054100b4 	movhi	r21,1026
 40185e4:	d8c02215 	stw	r3,136(sp)
 40185e8:	ad7fc904 	addi	r21,r21,-220
 40185ec:	003d1406 	br	4017a40 <__alt_data_end+0xfc017a40>
 40185f0:	028100b4 	movhi	r10,1026
 40185f4:	52803404 	addi	r10,r10,208
 40185f8:	da802415 	stw	r10,144(sp)
 40185fc:	200d883a 	mov	r6,r4
 4018600:	003c9106 	br	4017848 <__alt_data_end+0xfc017848>
 4018604:	5021883a 	mov	r16,r10
 4018608:	0013883a 	mov	r9,zero
 401860c:	003b7d06 	br	4017404 <__alt_data_end+0xfc017404>
 4018610:	4827883a 	mov	r19,r9
 4018614:	df001d83 	ldbu	fp,118(sp)
 4018618:	d8c02215 	stw	r3,136(sp)
 401861c:	0013883a 	mov	r9,zero
 4018620:	003c1806 	br	4017684 <__alt_data_end+0xfc017684>
 4018624:	1829883a 	mov	r20,r3
 4018628:	003d1806 	br	4017a8c <__alt_data_end+0xfc017a8c>
 401862c:	1829883a 	mov	r20,r3
 4018630:	003ccd06 	br	4017968 <__alt_data_end+0xfc017968>
 4018634:	0025883a 	mov	r18,zero
 4018638:	003fe906 	br	40185e0 <__alt_data_end+0xfc0185e0>
 401863c:	d8802217 	ldw	r2,136(sp)
 4018640:	80c00043 	ldbu	r3,1(r16)
 4018644:	5021883a 	mov	r16,r10
 4018648:	12400017 	ldw	r9,0(r2)
 401864c:	10800104 	addi	r2,r2,4
 4018650:	d8802215 	stw	r2,136(sp)
 4018654:	483faf0e 	bge	r9,zero,4018514 <__alt_data_end+0xfc018514>
 4018658:	18c03fcc 	andi	r3,r3,255
 401865c:	18c0201c 	xori	r3,r3,128
 4018660:	027fffc4 	movi	r9,-1
 4018664:	18ffe004 	addi	r3,r3,-128
 4018668:	003b6506 	br	4017400 <__alt_data_end+0xfc017400>
 401866c:	d9c01d85 	stb	r7,118(sp)
 4018670:	003ca006 	br	40178f4 <__alt_data_end+0xfc0178f4>
 4018674:	d9c01d85 	stb	r7,118(sp)
 4018678:	003cad06 	br	4017930 <__alt_data_end+0xfc017930>
 401867c:	d9c01d85 	stb	r7,118(sp)
 4018680:	003d7d06 	br	4017c78 <__alt_data_end+0xfc017c78>
 4018684:	d9c01d85 	stb	r7,118(sp)
 4018688:	003d5f06 	br	4017c08 <__alt_data_end+0xfc017c08>
 401868c:	a080004c 	andi	r2,r20,1
 4018690:	0039883a 	mov	fp,zero
 4018694:	10000526 	beq	r2,zero,40186ac <___vfiprintf_internal_r+0x1428>
 4018698:	00800c04 	movi	r2,48
 401869c:	d88019c5 	stb	r2,103(sp)
 40186a0:	dcc02717 	ldw	r19,156(sp)
 40186a4:	dd4019c4 	addi	r21,sp,103
 40186a8:	003bf606 	br	4017684 <__alt_data_end+0xfc017684>
 40186ac:	0027883a 	mov	r19,zero
 40186b0:	dd401a04 	addi	r21,sp,104
 40186b4:	003bf306 	br	4017684 <__alt_data_end+0xfc017684>
 40186b8:	d9c01d85 	stb	r7,118(sp)
 40186bc:	003dc806 	br	4017de0 <__alt_data_end+0xfc017de0>
 40186c0:	d9c01d85 	stb	r7,118(sp)
 40186c4:	003d3a06 	br	4017bb0 <__alt_data_end+0xfc017bb0>
 40186c8:	d9c01d85 	stb	r7,118(sp)
 40186cc:	003d2a06 	br	4017b78 <__alt_data_end+0xfc017b78>
 40186d0:	d9c01d85 	stb	r7,118(sp)
 40186d4:	003cde06 	br	4017a50 <__alt_data_end+0xfc017a50>
 40186d8:	d9c01d85 	stb	r7,118(sp)
 40186dc:	003cbc06 	br	40179d0 <__alt_data_end+0xfc0179d0>

040186e0 <__vfiprintf_internal>:
 40186e0:	008100f4 	movhi	r2,1027
 40186e4:	10b31d04 	addi	r2,r2,-13196
 40186e8:	300f883a 	mov	r7,r6
 40186ec:	280d883a 	mov	r6,r5
 40186f0:	200b883a 	mov	r5,r4
 40186f4:	11000017 	ldw	r4,0(r2)
 40186f8:	40172841 	jmpi	4017284 <___vfiprintf_internal_r>

040186fc <__sbprintf>:
 40186fc:	2880030b 	ldhu	r2,12(r5)
 4018700:	2ac01917 	ldw	r11,100(r5)
 4018704:	2a80038b 	ldhu	r10,14(r5)
 4018708:	2a400717 	ldw	r9,28(r5)
 401870c:	2a000917 	ldw	r8,36(r5)
 4018710:	defee204 	addi	sp,sp,-1144
 4018714:	00c10004 	movi	r3,1024
 4018718:	dc011a15 	stw	r16,1128(sp)
 401871c:	10bfff4c 	andi	r2,r2,65533
 4018720:	2821883a 	mov	r16,r5
 4018724:	d8cb883a 	add	r5,sp,r3
 4018728:	dc811c15 	stw	r18,1136(sp)
 401872c:	dc411b15 	stw	r17,1132(sp)
 4018730:	dfc11d15 	stw	ra,1140(sp)
 4018734:	2025883a 	mov	r18,r4
 4018738:	d881030d 	sth	r2,1036(sp)
 401873c:	dac11915 	stw	r11,1124(sp)
 4018740:	da81038d 	sth	r10,1038(sp)
 4018744:	da410715 	stw	r9,1052(sp)
 4018748:	da010915 	stw	r8,1060(sp)
 401874c:	dec10015 	stw	sp,1024(sp)
 4018750:	dec10415 	stw	sp,1040(sp)
 4018754:	d8c10215 	stw	r3,1032(sp)
 4018758:	d8c10515 	stw	r3,1044(sp)
 401875c:	d8010615 	stw	zero,1048(sp)
 4018760:	40172840 	call	4017284 <___vfiprintf_internal_r>
 4018764:	1023883a 	mov	r17,r2
 4018768:	10000416 	blt	r2,zero,401877c <__sbprintf+0x80>
 401876c:	d9410004 	addi	r5,sp,1024
 4018770:	9009883a 	mov	r4,r18
 4018774:	40131700 	call	4013170 <_fflush_r>
 4018778:	10000d1e 	bne	r2,zero,40187b0 <__sbprintf+0xb4>
 401877c:	d881030b 	ldhu	r2,1036(sp)
 4018780:	1080100c 	andi	r2,r2,64
 4018784:	10000326 	beq	r2,zero,4018794 <__sbprintf+0x98>
 4018788:	8080030b 	ldhu	r2,12(r16)
 401878c:	10801014 	ori	r2,r2,64
 4018790:	8080030d 	sth	r2,12(r16)
 4018794:	8805883a 	mov	r2,r17
 4018798:	dfc11d17 	ldw	ra,1140(sp)
 401879c:	dc811c17 	ldw	r18,1136(sp)
 40187a0:	dc411b17 	ldw	r17,1132(sp)
 40187a4:	dc011a17 	ldw	r16,1128(sp)
 40187a8:	dec11e04 	addi	sp,sp,1144
 40187ac:	f800283a 	ret
 40187b0:	047fffc4 	movi	r17,-1
 40187b4:	003ff106 	br	401877c <__alt_data_end+0xfc01877c>

040187b8 <__swbuf_r>:
 40187b8:	defffb04 	addi	sp,sp,-20
 40187bc:	dcc00315 	stw	r19,12(sp)
 40187c0:	dc800215 	stw	r18,8(sp)
 40187c4:	dc000015 	stw	r16,0(sp)
 40187c8:	dfc00415 	stw	ra,16(sp)
 40187cc:	dc400115 	stw	r17,4(sp)
 40187d0:	2025883a 	mov	r18,r4
 40187d4:	2827883a 	mov	r19,r5
 40187d8:	3021883a 	mov	r16,r6
 40187dc:	20000226 	beq	r4,zero,40187e8 <__swbuf_r+0x30>
 40187e0:	20800e17 	ldw	r2,56(r4)
 40187e4:	10004226 	beq	r2,zero,40188f0 <__swbuf_r+0x138>
 40187e8:	80800617 	ldw	r2,24(r16)
 40187ec:	8100030b 	ldhu	r4,12(r16)
 40187f0:	80800215 	stw	r2,8(r16)
 40187f4:	2080020c 	andi	r2,r4,8
 40187f8:	10003626 	beq	r2,zero,40188d4 <__swbuf_r+0x11c>
 40187fc:	80c00417 	ldw	r3,16(r16)
 4018800:	18003426 	beq	r3,zero,40188d4 <__swbuf_r+0x11c>
 4018804:	2088000c 	andi	r2,r4,8192
 4018808:	9c403fcc 	andi	r17,r19,255
 401880c:	10001a26 	beq	r2,zero,4018878 <__swbuf_r+0xc0>
 4018810:	80800017 	ldw	r2,0(r16)
 4018814:	81000517 	ldw	r4,20(r16)
 4018818:	10c7c83a 	sub	r3,r2,r3
 401881c:	1900200e 	bge	r3,r4,40188a0 <__swbuf_r+0xe8>
 4018820:	18c00044 	addi	r3,r3,1
 4018824:	81000217 	ldw	r4,8(r16)
 4018828:	11400044 	addi	r5,r2,1
 401882c:	81400015 	stw	r5,0(r16)
 4018830:	213fffc4 	addi	r4,r4,-1
 4018834:	81000215 	stw	r4,8(r16)
 4018838:	14c00005 	stb	r19,0(r2)
 401883c:	80800517 	ldw	r2,20(r16)
 4018840:	10c01e26 	beq	r2,r3,40188bc <__swbuf_r+0x104>
 4018844:	8080030b 	ldhu	r2,12(r16)
 4018848:	1080004c 	andi	r2,r2,1
 401884c:	10000226 	beq	r2,zero,4018858 <__swbuf_r+0xa0>
 4018850:	00800284 	movi	r2,10
 4018854:	88801926 	beq	r17,r2,40188bc <__swbuf_r+0x104>
 4018858:	8805883a 	mov	r2,r17
 401885c:	dfc00417 	ldw	ra,16(sp)
 4018860:	dcc00317 	ldw	r19,12(sp)
 4018864:	dc800217 	ldw	r18,8(sp)
 4018868:	dc400117 	ldw	r17,4(sp)
 401886c:	dc000017 	ldw	r16,0(sp)
 4018870:	dec00504 	addi	sp,sp,20
 4018874:	f800283a 	ret
 4018878:	81401917 	ldw	r5,100(r16)
 401887c:	00b7ffc4 	movi	r2,-8193
 4018880:	21080014 	ori	r4,r4,8192
 4018884:	2884703a 	and	r2,r5,r2
 4018888:	80801915 	stw	r2,100(r16)
 401888c:	80800017 	ldw	r2,0(r16)
 4018890:	8100030d 	sth	r4,12(r16)
 4018894:	81000517 	ldw	r4,20(r16)
 4018898:	10c7c83a 	sub	r3,r2,r3
 401889c:	193fe016 	blt	r3,r4,4018820 <__alt_data_end+0xfc018820>
 40188a0:	800b883a 	mov	r5,r16
 40188a4:	9009883a 	mov	r4,r18
 40188a8:	40131700 	call	4013170 <_fflush_r>
 40188ac:	1000071e 	bne	r2,zero,40188cc <__swbuf_r+0x114>
 40188b0:	80800017 	ldw	r2,0(r16)
 40188b4:	00c00044 	movi	r3,1
 40188b8:	003fda06 	br	4018824 <__alt_data_end+0xfc018824>
 40188bc:	800b883a 	mov	r5,r16
 40188c0:	9009883a 	mov	r4,r18
 40188c4:	40131700 	call	4013170 <_fflush_r>
 40188c8:	103fe326 	beq	r2,zero,4018858 <__alt_data_end+0xfc018858>
 40188cc:	00bfffc4 	movi	r2,-1
 40188d0:	003fe206 	br	401885c <__alt_data_end+0xfc01885c>
 40188d4:	800b883a 	mov	r5,r16
 40188d8:	9009883a 	mov	r4,r18
 40188dc:	40115780 	call	4011578 <__swsetup_r>
 40188e0:	103ffa1e 	bne	r2,zero,40188cc <__alt_data_end+0xfc0188cc>
 40188e4:	8100030b 	ldhu	r4,12(r16)
 40188e8:	80c00417 	ldw	r3,16(r16)
 40188ec:	003fc506 	br	4018804 <__alt_data_end+0xfc018804>
 40188f0:	401354c0 	call	401354c <__sinit>
 40188f4:	003fbc06 	br	40187e8 <__alt_data_end+0xfc0187e8>

040188f8 <__swbuf>:
 40188f8:	008100f4 	movhi	r2,1027
 40188fc:	10b31d04 	addi	r2,r2,-13196
 4018900:	280d883a 	mov	r6,r5
 4018904:	200b883a 	mov	r5,r4
 4018908:	11000017 	ldw	r4,0(r2)
 401890c:	40187b81 	jmpi	40187b8 <__swbuf_r>

04018910 <_write_r>:
 4018910:	defffd04 	addi	sp,sp,-12
 4018914:	2805883a 	mov	r2,r5
 4018918:	dc000015 	stw	r16,0(sp)
 401891c:	04010134 	movhi	r16,1028
 4018920:	dc400115 	stw	r17,4(sp)
 4018924:	300b883a 	mov	r5,r6
 4018928:	8425e904 	addi	r16,r16,-26716
 401892c:	2023883a 	mov	r17,r4
 4018930:	380d883a 	mov	r6,r7
 4018934:	1009883a 	mov	r4,r2
 4018938:	dfc00215 	stw	ra,8(sp)
 401893c:	80000015 	stw	zero,0(r16)
 4018940:	401ccf40 	call	401ccf4 <write>
 4018944:	00ffffc4 	movi	r3,-1
 4018948:	10c00526 	beq	r2,r3,4018960 <_write_r+0x50>
 401894c:	dfc00217 	ldw	ra,8(sp)
 4018950:	dc400117 	ldw	r17,4(sp)
 4018954:	dc000017 	ldw	r16,0(sp)
 4018958:	dec00304 	addi	sp,sp,12
 401895c:	f800283a 	ret
 4018960:	80c00017 	ldw	r3,0(r16)
 4018964:	183ff926 	beq	r3,zero,401894c <__alt_data_end+0xfc01894c>
 4018968:	88c00015 	stw	r3,0(r17)
 401896c:	003ff706 	br	401894c <__alt_data_end+0xfc01894c>

04018970 <_close_r>:
 4018970:	defffd04 	addi	sp,sp,-12
 4018974:	dc000015 	stw	r16,0(sp)
 4018978:	04010134 	movhi	r16,1028
 401897c:	dc400115 	stw	r17,4(sp)
 4018980:	8425e904 	addi	r16,r16,-26716
 4018984:	2023883a 	mov	r17,r4
 4018988:	2809883a 	mov	r4,r5
 401898c:	dfc00215 	stw	ra,8(sp)
 4018990:	80000015 	stw	zero,0(r16)
 4018994:	401c2400 	call	401c240 <close>
 4018998:	00ffffc4 	movi	r3,-1
 401899c:	10c00526 	beq	r2,r3,40189b4 <_close_r+0x44>
 40189a0:	dfc00217 	ldw	ra,8(sp)
 40189a4:	dc400117 	ldw	r17,4(sp)
 40189a8:	dc000017 	ldw	r16,0(sp)
 40189ac:	dec00304 	addi	sp,sp,12
 40189b0:	f800283a 	ret
 40189b4:	80c00017 	ldw	r3,0(r16)
 40189b8:	183ff926 	beq	r3,zero,40189a0 <__alt_data_end+0xfc0189a0>
 40189bc:	88c00015 	stw	r3,0(r17)
 40189c0:	003ff706 	br	40189a0 <__alt_data_end+0xfc0189a0>

040189c4 <_calloc_r>:
 40189c4:	298b383a 	mul	r5,r5,r6
 40189c8:	defffe04 	addi	sp,sp,-8
 40189cc:	dfc00115 	stw	ra,4(sp)
 40189d0:	dc000015 	stw	r16,0(sp)
 40189d4:	400bee00 	call	400bee0 <_malloc_r>
 40189d8:	10002926 	beq	r2,zero,4018a80 <_calloc_r+0xbc>
 40189dc:	11bfff17 	ldw	r6,-4(r2)
 40189e0:	1021883a 	mov	r16,r2
 40189e4:	00bfff04 	movi	r2,-4
 40189e8:	308c703a 	and	r6,r6,r2
 40189ec:	00c00904 	movi	r3,36
 40189f0:	308d883a 	add	r6,r6,r2
 40189f4:	19801636 	bltu	r3,r6,4018a50 <_calloc_r+0x8c>
 40189f8:	008004c4 	movi	r2,19
 40189fc:	11800b2e 	bgeu	r2,r6,4018a2c <_calloc_r+0x68>
 4018a00:	80000015 	stw	zero,0(r16)
 4018a04:	80000115 	stw	zero,4(r16)
 4018a08:	008006c4 	movi	r2,27
 4018a0c:	11801a2e 	bgeu	r2,r6,4018a78 <_calloc_r+0xb4>
 4018a10:	80000215 	stw	zero,8(r16)
 4018a14:	80000315 	stw	zero,12(r16)
 4018a18:	30c0151e 	bne	r6,r3,4018a70 <_calloc_r+0xac>
 4018a1c:	80000415 	stw	zero,16(r16)
 4018a20:	80800604 	addi	r2,r16,24
 4018a24:	80000515 	stw	zero,20(r16)
 4018a28:	00000106 	br	4018a30 <_calloc_r+0x6c>
 4018a2c:	8005883a 	mov	r2,r16
 4018a30:	10000015 	stw	zero,0(r2)
 4018a34:	10000115 	stw	zero,4(r2)
 4018a38:	10000215 	stw	zero,8(r2)
 4018a3c:	8005883a 	mov	r2,r16
 4018a40:	dfc00117 	ldw	ra,4(sp)
 4018a44:	dc000017 	ldw	r16,0(sp)
 4018a48:	dec00204 	addi	sp,sp,8
 4018a4c:	f800283a 	ret
 4018a50:	000b883a 	mov	r5,zero
 4018a54:	8009883a 	mov	r4,r16
 4018a58:	400c8b00 	call	400c8b0 <memset>
 4018a5c:	8005883a 	mov	r2,r16
 4018a60:	dfc00117 	ldw	ra,4(sp)
 4018a64:	dc000017 	ldw	r16,0(sp)
 4018a68:	dec00204 	addi	sp,sp,8
 4018a6c:	f800283a 	ret
 4018a70:	80800404 	addi	r2,r16,16
 4018a74:	003fee06 	br	4018a30 <__alt_data_end+0xfc018a30>
 4018a78:	80800204 	addi	r2,r16,8
 4018a7c:	003fec06 	br	4018a30 <__alt_data_end+0xfc018a30>
 4018a80:	0005883a 	mov	r2,zero
 4018a84:	003fee06 	br	4018a40 <__alt_data_end+0xfc018a40>

04018a88 <_fclose_r>:
 4018a88:	28003926 	beq	r5,zero,4018b70 <_fclose_r+0xe8>
 4018a8c:	defffc04 	addi	sp,sp,-16
 4018a90:	dc400115 	stw	r17,4(sp)
 4018a94:	dc000015 	stw	r16,0(sp)
 4018a98:	dfc00315 	stw	ra,12(sp)
 4018a9c:	dc800215 	stw	r18,8(sp)
 4018aa0:	2023883a 	mov	r17,r4
 4018aa4:	2821883a 	mov	r16,r5
 4018aa8:	20000226 	beq	r4,zero,4018ab4 <_fclose_r+0x2c>
 4018aac:	20800e17 	ldw	r2,56(r4)
 4018ab0:	10002726 	beq	r2,zero,4018b50 <_fclose_r+0xc8>
 4018ab4:	8080030f 	ldh	r2,12(r16)
 4018ab8:	1000071e 	bne	r2,zero,4018ad8 <_fclose_r+0x50>
 4018abc:	0005883a 	mov	r2,zero
 4018ac0:	dfc00317 	ldw	ra,12(sp)
 4018ac4:	dc800217 	ldw	r18,8(sp)
 4018ac8:	dc400117 	ldw	r17,4(sp)
 4018acc:	dc000017 	ldw	r16,0(sp)
 4018ad0:	dec00404 	addi	sp,sp,16
 4018ad4:	f800283a 	ret
 4018ad8:	800b883a 	mov	r5,r16
 4018adc:	8809883a 	mov	r4,r17
 4018ae0:	4012f540 	call	4012f54 <__sflush_r>
 4018ae4:	1025883a 	mov	r18,r2
 4018ae8:	80800b17 	ldw	r2,44(r16)
 4018aec:	10000426 	beq	r2,zero,4018b00 <_fclose_r+0x78>
 4018af0:	81400717 	ldw	r5,28(r16)
 4018af4:	8809883a 	mov	r4,r17
 4018af8:	103ee83a 	callr	r2
 4018afc:	10001616 	blt	r2,zero,4018b58 <_fclose_r+0xd0>
 4018b00:	8080030b 	ldhu	r2,12(r16)
 4018b04:	1080200c 	andi	r2,r2,128
 4018b08:	1000151e 	bne	r2,zero,4018b60 <_fclose_r+0xd8>
 4018b0c:	81400c17 	ldw	r5,48(r16)
 4018b10:	28000526 	beq	r5,zero,4018b28 <_fclose_r+0xa0>
 4018b14:	80801004 	addi	r2,r16,64
 4018b18:	28800226 	beq	r5,r2,4018b24 <_fclose_r+0x9c>
 4018b1c:	8809883a 	mov	r4,r17
 4018b20:	40136c00 	call	40136c0 <_free_r>
 4018b24:	80000c15 	stw	zero,48(r16)
 4018b28:	81401117 	ldw	r5,68(r16)
 4018b2c:	28000326 	beq	r5,zero,4018b3c <_fclose_r+0xb4>
 4018b30:	8809883a 	mov	r4,r17
 4018b34:	40136c00 	call	40136c0 <_free_r>
 4018b38:	80001115 	stw	zero,68(r16)
 4018b3c:	401355c0 	call	401355c <__sfp_lock_acquire>
 4018b40:	8000030d 	sth	zero,12(r16)
 4018b44:	40135600 	call	4013560 <__sfp_lock_release>
 4018b48:	9005883a 	mov	r2,r18
 4018b4c:	003fdc06 	br	4018ac0 <__alt_data_end+0xfc018ac0>
 4018b50:	401354c0 	call	401354c <__sinit>
 4018b54:	003fd706 	br	4018ab4 <__alt_data_end+0xfc018ab4>
 4018b58:	04bfffc4 	movi	r18,-1
 4018b5c:	003fe806 	br	4018b00 <__alt_data_end+0xfc018b00>
 4018b60:	81400417 	ldw	r5,16(r16)
 4018b64:	8809883a 	mov	r4,r17
 4018b68:	40136c00 	call	40136c0 <_free_r>
 4018b6c:	003fe706 	br	4018b0c <__alt_data_end+0xfc018b0c>
 4018b70:	0005883a 	mov	r2,zero
 4018b74:	f800283a 	ret

04018b78 <fclose>:
 4018b78:	008100f4 	movhi	r2,1027
 4018b7c:	10b31d04 	addi	r2,r2,-13196
 4018b80:	200b883a 	mov	r5,r4
 4018b84:	11000017 	ldw	r4,0(r2)
 4018b88:	4018a881 	jmpi	4018a88 <_fclose_r>

04018b8c <__fputwc>:
 4018b8c:	defff804 	addi	sp,sp,-32
 4018b90:	dcc00415 	stw	r19,16(sp)
 4018b94:	dc800315 	stw	r18,12(sp)
 4018b98:	dc000115 	stw	r16,4(sp)
 4018b9c:	dfc00715 	stw	ra,28(sp)
 4018ba0:	dd400615 	stw	r21,24(sp)
 4018ba4:	dd000515 	stw	r20,20(sp)
 4018ba8:	dc400215 	stw	r17,8(sp)
 4018bac:	2027883a 	mov	r19,r4
 4018bb0:	2825883a 	mov	r18,r5
 4018bb4:	3021883a 	mov	r16,r6
 4018bb8:	401409c0 	call	401409c <__locale_mb_cur_max>
 4018bbc:	00c00044 	movi	r3,1
 4018bc0:	10c03e26 	beq	r2,r3,4018cbc <__fputwc+0x130>
 4018bc4:	81c01704 	addi	r7,r16,92
 4018bc8:	900d883a 	mov	r6,r18
 4018bcc:	d80b883a 	mov	r5,sp
 4018bd0:	9809883a 	mov	r4,r19
 4018bd4:	4018f040 	call	4018f04 <_wcrtomb_r>
 4018bd8:	1029883a 	mov	r20,r2
 4018bdc:	00bfffc4 	movi	r2,-1
 4018be0:	a0802026 	beq	r20,r2,4018c64 <__fputwc+0xd8>
 4018be4:	d9400003 	ldbu	r5,0(sp)
 4018be8:	a0001c26 	beq	r20,zero,4018c5c <__fputwc+0xd0>
 4018bec:	0023883a 	mov	r17,zero
 4018bf0:	05400284 	movi	r21,10
 4018bf4:	00000906 	br	4018c1c <__fputwc+0x90>
 4018bf8:	80800017 	ldw	r2,0(r16)
 4018bfc:	11400005 	stb	r5,0(r2)
 4018c00:	80c00017 	ldw	r3,0(r16)
 4018c04:	18c00044 	addi	r3,r3,1
 4018c08:	80c00015 	stw	r3,0(r16)
 4018c0c:	8c400044 	addi	r17,r17,1
 4018c10:	dc45883a 	add	r2,sp,r17
 4018c14:	8d00112e 	bgeu	r17,r20,4018c5c <__fputwc+0xd0>
 4018c18:	11400003 	ldbu	r5,0(r2)
 4018c1c:	80c00217 	ldw	r3,8(r16)
 4018c20:	18ffffc4 	addi	r3,r3,-1
 4018c24:	80c00215 	stw	r3,8(r16)
 4018c28:	183ff30e 	bge	r3,zero,4018bf8 <__alt_data_end+0xfc018bf8>
 4018c2c:	80800617 	ldw	r2,24(r16)
 4018c30:	18801916 	blt	r3,r2,4018c98 <__fputwc+0x10c>
 4018c34:	80800017 	ldw	r2,0(r16)
 4018c38:	11400005 	stb	r5,0(r2)
 4018c3c:	80800017 	ldw	r2,0(r16)
 4018c40:	10c00003 	ldbu	r3,0(r2)
 4018c44:	10800044 	addi	r2,r2,1
 4018c48:	1d402326 	beq	r3,r21,4018cd8 <__fputwc+0x14c>
 4018c4c:	80800015 	stw	r2,0(r16)
 4018c50:	8c400044 	addi	r17,r17,1
 4018c54:	dc45883a 	add	r2,sp,r17
 4018c58:	8d3fef36 	bltu	r17,r20,4018c18 <__alt_data_end+0xfc018c18>
 4018c5c:	9005883a 	mov	r2,r18
 4018c60:	00000406 	br	4018c74 <__fputwc+0xe8>
 4018c64:	80c0030b 	ldhu	r3,12(r16)
 4018c68:	a005883a 	mov	r2,r20
 4018c6c:	18c01014 	ori	r3,r3,64
 4018c70:	80c0030d 	sth	r3,12(r16)
 4018c74:	dfc00717 	ldw	ra,28(sp)
 4018c78:	dd400617 	ldw	r21,24(sp)
 4018c7c:	dd000517 	ldw	r20,20(sp)
 4018c80:	dcc00417 	ldw	r19,16(sp)
 4018c84:	dc800317 	ldw	r18,12(sp)
 4018c88:	dc400217 	ldw	r17,8(sp)
 4018c8c:	dc000117 	ldw	r16,4(sp)
 4018c90:	dec00804 	addi	sp,sp,32
 4018c94:	f800283a 	ret
 4018c98:	800d883a 	mov	r6,r16
 4018c9c:	29403fcc 	andi	r5,r5,255
 4018ca0:	9809883a 	mov	r4,r19
 4018ca4:	40187b80 	call	40187b8 <__swbuf_r>
 4018ca8:	10bfffe0 	cmpeqi	r2,r2,-1
 4018cac:	10803fcc 	andi	r2,r2,255
 4018cb0:	103fd626 	beq	r2,zero,4018c0c <__alt_data_end+0xfc018c0c>
 4018cb4:	00bfffc4 	movi	r2,-1
 4018cb8:	003fee06 	br	4018c74 <__alt_data_end+0xfc018c74>
 4018cbc:	90ffffc4 	addi	r3,r18,-1
 4018cc0:	01003f84 	movi	r4,254
 4018cc4:	20ffbf36 	bltu	r4,r3,4018bc4 <__alt_data_end+0xfc018bc4>
 4018cc8:	900b883a 	mov	r5,r18
 4018ccc:	dc800005 	stb	r18,0(sp)
 4018cd0:	1029883a 	mov	r20,r2
 4018cd4:	003fc506 	br	4018bec <__alt_data_end+0xfc018bec>
 4018cd8:	800d883a 	mov	r6,r16
 4018cdc:	a80b883a 	mov	r5,r21
 4018ce0:	9809883a 	mov	r4,r19
 4018ce4:	40187b80 	call	40187b8 <__swbuf_r>
 4018ce8:	10bfffe0 	cmpeqi	r2,r2,-1
 4018cec:	003fef06 	br	4018cac <__alt_data_end+0xfc018cac>

04018cf0 <_fputwc_r>:
 4018cf0:	3080030b 	ldhu	r2,12(r6)
 4018cf4:	10c8000c 	andi	r3,r2,8192
 4018cf8:	1800051e 	bne	r3,zero,4018d10 <_fputwc_r+0x20>
 4018cfc:	30c01917 	ldw	r3,100(r6)
 4018d00:	10880014 	ori	r2,r2,8192
 4018d04:	3080030d 	sth	r2,12(r6)
 4018d08:	18880014 	ori	r2,r3,8192
 4018d0c:	30801915 	stw	r2,100(r6)
 4018d10:	4018b8c1 	jmpi	4018b8c <__fputwc>

04018d14 <fputwc>:
 4018d14:	008100f4 	movhi	r2,1027
 4018d18:	defffc04 	addi	sp,sp,-16
 4018d1c:	10b31d04 	addi	r2,r2,-13196
 4018d20:	dc000115 	stw	r16,4(sp)
 4018d24:	14000017 	ldw	r16,0(r2)
 4018d28:	dc400215 	stw	r17,8(sp)
 4018d2c:	dfc00315 	stw	ra,12(sp)
 4018d30:	2023883a 	mov	r17,r4
 4018d34:	80000226 	beq	r16,zero,4018d40 <fputwc+0x2c>
 4018d38:	80800e17 	ldw	r2,56(r16)
 4018d3c:	10001026 	beq	r2,zero,4018d80 <fputwc+0x6c>
 4018d40:	2880030b 	ldhu	r2,12(r5)
 4018d44:	10c8000c 	andi	r3,r2,8192
 4018d48:	1800051e 	bne	r3,zero,4018d60 <fputwc+0x4c>
 4018d4c:	28c01917 	ldw	r3,100(r5)
 4018d50:	10880014 	ori	r2,r2,8192
 4018d54:	2880030d 	sth	r2,12(r5)
 4018d58:	18880014 	ori	r2,r3,8192
 4018d5c:	28801915 	stw	r2,100(r5)
 4018d60:	280d883a 	mov	r6,r5
 4018d64:	8009883a 	mov	r4,r16
 4018d68:	880b883a 	mov	r5,r17
 4018d6c:	dfc00317 	ldw	ra,12(sp)
 4018d70:	dc400217 	ldw	r17,8(sp)
 4018d74:	dc000117 	ldw	r16,4(sp)
 4018d78:	dec00404 	addi	sp,sp,16
 4018d7c:	4018b8c1 	jmpi	4018b8c <__fputwc>
 4018d80:	8009883a 	mov	r4,r16
 4018d84:	d9400015 	stw	r5,0(sp)
 4018d88:	401354c0 	call	401354c <__sinit>
 4018d8c:	d9400017 	ldw	r5,0(sp)
 4018d90:	003feb06 	br	4018d40 <__alt_data_end+0xfc018d40>

04018d94 <_fstat_r>:
 4018d94:	defffd04 	addi	sp,sp,-12
 4018d98:	2805883a 	mov	r2,r5
 4018d9c:	dc000015 	stw	r16,0(sp)
 4018da0:	04010134 	movhi	r16,1028
 4018da4:	dc400115 	stw	r17,4(sp)
 4018da8:	8425e904 	addi	r16,r16,-26716
 4018dac:	2023883a 	mov	r17,r4
 4018db0:	300b883a 	mov	r5,r6
 4018db4:	1009883a 	mov	r4,r2
 4018db8:	dfc00215 	stw	ra,8(sp)
 4018dbc:	80000015 	stw	zero,0(r16)
 4018dc0:	401c3ac0 	call	401c3ac <fstat>
 4018dc4:	00ffffc4 	movi	r3,-1
 4018dc8:	10c00526 	beq	r2,r3,4018de0 <_fstat_r+0x4c>
 4018dcc:	dfc00217 	ldw	ra,8(sp)
 4018dd0:	dc400117 	ldw	r17,4(sp)
 4018dd4:	dc000017 	ldw	r16,0(sp)
 4018dd8:	dec00304 	addi	sp,sp,12
 4018ddc:	f800283a 	ret
 4018de0:	80c00017 	ldw	r3,0(r16)
 4018de4:	183ff926 	beq	r3,zero,4018dcc <__alt_data_end+0xfc018dcc>
 4018de8:	88c00015 	stw	r3,0(r17)
 4018dec:	003ff706 	br	4018dcc <__alt_data_end+0xfc018dcc>

04018df0 <_isatty_r>:
 4018df0:	defffd04 	addi	sp,sp,-12
 4018df4:	dc000015 	stw	r16,0(sp)
 4018df8:	04010134 	movhi	r16,1028
 4018dfc:	dc400115 	stw	r17,4(sp)
 4018e00:	8425e904 	addi	r16,r16,-26716
 4018e04:	2023883a 	mov	r17,r4
 4018e08:	2809883a 	mov	r4,r5
 4018e0c:	dfc00215 	stw	ra,8(sp)
 4018e10:	80000015 	stw	zero,0(r16)
 4018e14:	401c4b80 	call	401c4b8 <isatty>
 4018e18:	00ffffc4 	movi	r3,-1
 4018e1c:	10c00526 	beq	r2,r3,4018e34 <_isatty_r+0x44>
 4018e20:	dfc00217 	ldw	ra,8(sp)
 4018e24:	dc400117 	ldw	r17,4(sp)
 4018e28:	dc000017 	ldw	r16,0(sp)
 4018e2c:	dec00304 	addi	sp,sp,12
 4018e30:	f800283a 	ret
 4018e34:	80c00017 	ldw	r3,0(r16)
 4018e38:	183ff926 	beq	r3,zero,4018e20 <__alt_data_end+0xfc018e20>
 4018e3c:	88c00015 	stw	r3,0(r17)
 4018e40:	003ff706 	br	4018e20 <__alt_data_end+0xfc018e20>

04018e44 <_lseek_r>:
 4018e44:	defffd04 	addi	sp,sp,-12
 4018e48:	2805883a 	mov	r2,r5
 4018e4c:	dc000015 	stw	r16,0(sp)
 4018e50:	04010134 	movhi	r16,1028
 4018e54:	dc400115 	stw	r17,4(sp)
 4018e58:	300b883a 	mov	r5,r6
 4018e5c:	8425e904 	addi	r16,r16,-26716
 4018e60:	2023883a 	mov	r17,r4
 4018e64:	380d883a 	mov	r6,r7
 4018e68:	1009883a 	mov	r4,r2
 4018e6c:	dfc00215 	stw	ra,8(sp)
 4018e70:	80000015 	stw	zero,0(r16)
 4018e74:	401c7f00 	call	401c7f0 <lseek>
 4018e78:	00ffffc4 	movi	r3,-1
 4018e7c:	10c00526 	beq	r2,r3,4018e94 <_lseek_r+0x50>
 4018e80:	dfc00217 	ldw	ra,8(sp)
 4018e84:	dc400117 	ldw	r17,4(sp)
 4018e88:	dc000017 	ldw	r16,0(sp)
 4018e8c:	dec00304 	addi	sp,sp,12
 4018e90:	f800283a 	ret
 4018e94:	80c00017 	ldw	r3,0(r16)
 4018e98:	183ff926 	beq	r3,zero,4018e80 <__alt_data_end+0xfc018e80>
 4018e9c:	88c00015 	stw	r3,0(r17)
 4018ea0:	003ff706 	br	4018e80 <__alt_data_end+0xfc018e80>

04018ea4 <_read_r>:
 4018ea4:	defffd04 	addi	sp,sp,-12
 4018ea8:	2805883a 	mov	r2,r5
 4018eac:	dc000015 	stw	r16,0(sp)
 4018eb0:	04010134 	movhi	r16,1028
 4018eb4:	dc400115 	stw	r17,4(sp)
 4018eb8:	300b883a 	mov	r5,r6
 4018ebc:	8425e904 	addi	r16,r16,-26716
 4018ec0:	2023883a 	mov	r17,r4
 4018ec4:	380d883a 	mov	r6,r7
 4018ec8:	1009883a 	mov	r4,r2
 4018ecc:	dfc00215 	stw	ra,8(sp)
 4018ed0:	80000015 	stw	zero,0(r16)
 4018ed4:	401c9c40 	call	401c9c4 <read>
 4018ed8:	00ffffc4 	movi	r3,-1
 4018edc:	10c00526 	beq	r2,r3,4018ef4 <_read_r+0x50>
 4018ee0:	dfc00217 	ldw	ra,8(sp)
 4018ee4:	dc400117 	ldw	r17,4(sp)
 4018ee8:	dc000017 	ldw	r16,0(sp)
 4018eec:	dec00304 	addi	sp,sp,12
 4018ef0:	f800283a 	ret
 4018ef4:	80c00017 	ldw	r3,0(r16)
 4018ef8:	183ff926 	beq	r3,zero,4018ee0 <__alt_data_end+0xfc018ee0>
 4018efc:	88c00015 	stw	r3,0(r17)
 4018f00:	003ff706 	br	4018ee0 <__alt_data_end+0xfc018ee0>

04018f04 <_wcrtomb_r>:
 4018f04:	defff604 	addi	sp,sp,-40
 4018f08:	008100f4 	movhi	r2,1027
 4018f0c:	dc800815 	stw	r18,32(sp)
 4018f10:	dc400715 	stw	r17,28(sp)
 4018f14:	dc000615 	stw	r16,24(sp)
 4018f18:	10b32104 	addi	r2,r2,-13180
 4018f1c:	dfc00915 	stw	ra,36(sp)
 4018f20:	2021883a 	mov	r16,r4
 4018f24:	3823883a 	mov	r17,r7
 4018f28:	14800017 	ldw	r18,0(r2)
 4018f2c:	28001426 	beq	r5,zero,4018f80 <_wcrtomb_r+0x7c>
 4018f30:	d9400415 	stw	r5,16(sp)
 4018f34:	d9800515 	stw	r6,20(sp)
 4018f38:	40140900 	call	4014090 <__locale_charset>
 4018f3c:	d9800517 	ldw	r6,20(sp)
 4018f40:	d9400417 	ldw	r5,16(sp)
 4018f44:	100f883a 	mov	r7,r2
 4018f48:	dc400015 	stw	r17,0(sp)
 4018f4c:	8009883a 	mov	r4,r16
 4018f50:	903ee83a 	callr	r18
 4018f54:	00ffffc4 	movi	r3,-1
 4018f58:	10c0031e 	bne	r2,r3,4018f68 <_wcrtomb_r+0x64>
 4018f5c:	88000015 	stw	zero,0(r17)
 4018f60:	00c02284 	movi	r3,138
 4018f64:	80c00015 	stw	r3,0(r16)
 4018f68:	dfc00917 	ldw	ra,36(sp)
 4018f6c:	dc800817 	ldw	r18,32(sp)
 4018f70:	dc400717 	ldw	r17,28(sp)
 4018f74:	dc000617 	ldw	r16,24(sp)
 4018f78:	dec00a04 	addi	sp,sp,40
 4018f7c:	f800283a 	ret
 4018f80:	40140900 	call	4014090 <__locale_charset>
 4018f84:	100f883a 	mov	r7,r2
 4018f88:	dc400015 	stw	r17,0(sp)
 4018f8c:	000d883a 	mov	r6,zero
 4018f90:	d9400104 	addi	r5,sp,4
 4018f94:	8009883a 	mov	r4,r16
 4018f98:	903ee83a 	callr	r18
 4018f9c:	003fed06 	br	4018f54 <__alt_data_end+0xfc018f54>

04018fa0 <wcrtomb>:
 4018fa0:	defff604 	addi	sp,sp,-40
 4018fa4:	008100f4 	movhi	r2,1027
 4018fa8:	dc800615 	stw	r18,24(sp)
 4018fac:	dc400515 	stw	r17,20(sp)
 4018fb0:	10b31d04 	addi	r2,r2,-13196
 4018fb4:	dfc00915 	stw	ra,36(sp)
 4018fb8:	dd000815 	stw	r20,32(sp)
 4018fbc:	dcc00715 	stw	r19,28(sp)
 4018fc0:	dc000415 	stw	r16,16(sp)
 4018fc4:	3025883a 	mov	r18,r6
 4018fc8:	14400017 	ldw	r17,0(r2)
 4018fcc:	20001926 	beq	r4,zero,4019034 <wcrtomb+0x94>
 4018fd0:	008100f4 	movhi	r2,1027
 4018fd4:	10b32104 	addi	r2,r2,-13180
 4018fd8:	15000017 	ldw	r20,0(r2)
 4018fdc:	2021883a 	mov	r16,r4
 4018fe0:	2827883a 	mov	r19,r5
 4018fe4:	40140900 	call	4014090 <__locale_charset>
 4018fe8:	100f883a 	mov	r7,r2
 4018fec:	dc800015 	stw	r18,0(sp)
 4018ff0:	980d883a 	mov	r6,r19
 4018ff4:	800b883a 	mov	r5,r16
 4018ff8:	8809883a 	mov	r4,r17
 4018ffc:	a03ee83a 	callr	r20
 4019000:	00ffffc4 	movi	r3,-1
 4019004:	10c0031e 	bne	r2,r3,4019014 <wcrtomb+0x74>
 4019008:	90000015 	stw	zero,0(r18)
 401900c:	00c02284 	movi	r3,138
 4019010:	88c00015 	stw	r3,0(r17)
 4019014:	dfc00917 	ldw	ra,36(sp)
 4019018:	dd000817 	ldw	r20,32(sp)
 401901c:	dcc00717 	ldw	r19,28(sp)
 4019020:	dc800617 	ldw	r18,24(sp)
 4019024:	dc400517 	ldw	r17,20(sp)
 4019028:	dc000417 	ldw	r16,16(sp)
 401902c:	dec00a04 	addi	sp,sp,40
 4019030:	f800283a 	ret
 4019034:	008100f4 	movhi	r2,1027
 4019038:	10b32104 	addi	r2,r2,-13180
 401903c:	14000017 	ldw	r16,0(r2)
 4019040:	40140900 	call	4014090 <__locale_charset>
 4019044:	100f883a 	mov	r7,r2
 4019048:	dc800015 	stw	r18,0(sp)
 401904c:	000d883a 	mov	r6,zero
 4019050:	d9400104 	addi	r5,sp,4
 4019054:	8809883a 	mov	r4,r17
 4019058:	803ee83a 	callr	r16
 401905c:	003fe806 	br	4019000 <__alt_data_end+0xfc019000>

04019060 <__ascii_wctomb>:
 4019060:	28000526 	beq	r5,zero,4019078 <__ascii_wctomb+0x18>
 4019064:	00803fc4 	movi	r2,255
 4019068:	11800536 	bltu	r2,r6,4019080 <__ascii_wctomb+0x20>
 401906c:	29800005 	stb	r6,0(r5)
 4019070:	00800044 	movi	r2,1
 4019074:	f800283a 	ret
 4019078:	0005883a 	mov	r2,zero
 401907c:	f800283a 	ret
 4019080:	00802284 	movi	r2,138
 4019084:	20800015 	stw	r2,0(r4)
 4019088:	00bfffc4 	movi	r2,-1
 401908c:	f800283a 	ret

04019090 <_wctomb_r>:
 4019090:	008100f4 	movhi	r2,1027
 4019094:	defff904 	addi	sp,sp,-28
 4019098:	10b32104 	addi	r2,r2,-13180
 401909c:	dfc00615 	stw	ra,24(sp)
 40190a0:	dc400515 	stw	r17,20(sp)
 40190a4:	dc000415 	stw	r16,16(sp)
 40190a8:	3823883a 	mov	r17,r7
 40190ac:	14000017 	ldw	r16,0(r2)
 40190b0:	d9000115 	stw	r4,4(sp)
 40190b4:	d9400215 	stw	r5,8(sp)
 40190b8:	d9800315 	stw	r6,12(sp)
 40190bc:	40140900 	call	4014090 <__locale_charset>
 40190c0:	d9800317 	ldw	r6,12(sp)
 40190c4:	d9400217 	ldw	r5,8(sp)
 40190c8:	d9000117 	ldw	r4,4(sp)
 40190cc:	100f883a 	mov	r7,r2
 40190d0:	dc400015 	stw	r17,0(sp)
 40190d4:	803ee83a 	callr	r16
 40190d8:	dfc00617 	ldw	ra,24(sp)
 40190dc:	dc400517 	ldw	r17,20(sp)
 40190e0:	dc000417 	ldw	r16,16(sp)
 40190e4:	dec00704 	addi	sp,sp,28
 40190e8:	f800283a 	ret

040190ec <__udivdi3>:
 40190ec:	defff504 	addi	sp,sp,-44
 40190f0:	dcc00415 	stw	r19,16(sp)
 40190f4:	dc000115 	stw	r16,4(sp)
 40190f8:	dfc00a15 	stw	ra,40(sp)
 40190fc:	df000915 	stw	fp,36(sp)
 4019100:	ddc00815 	stw	r23,32(sp)
 4019104:	dd800715 	stw	r22,28(sp)
 4019108:	dd400615 	stw	r21,24(sp)
 401910c:	dd000515 	stw	r20,20(sp)
 4019110:	dc800315 	stw	r18,12(sp)
 4019114:	dc400215 	stw	r17,8(sp)
 4019118:	2027883a 	mov	r19,r4
 401911c:	2821883a 	mov	r16,r5
 4019120:	3800411e 	bne	r7,zero,4019228 <__udivdi3+0x13c>
 4019124:	3023883a 	mov	r17,r6
 4019128:	2025883a 	mov	r18,r4
 401912c:	2980522e 	bgeu	r5,r6,4019278 <__udivdi3+0x18c>
 4019130:	00bfffd4 	movui	r2,65535
 4019134:	282d883a 	mov	r22,r5
 4019138:	1180a836 	bltu	r2,r6,40193dc <__udivdi3+0x2f0>
 401913c:	00803fc4 	movi	r2,255
 4019140:	1185803a 	cmpltu	r2,r2,r6
 4019144:	100490fa 	slli	r2,r2,3
 4019148:	3086d83a 	srl	r3,r6,r2
 401914c:	010100b4 	movhi	r4,1026
 4019150:	21003c04 	addi	r4,r4,240
 4019154:	20c7883a 	add	r3,r4,r3
 4019158:	18c00003 	ldbu	r3,0(r3)
 401915c:	1885883a 	add	r2,r3,r2
 4019160:	00c00804 	movi	r3,32
 4019164:	1887c83a 	sub	r3,r3,r2
 4019168:	18000526 	beq	r3,zero,4019180 <__udivdi3+0x94>
 401916c:	80e0983a 	sll	r16,r16,r3
 4019170:	9884d83a 	srl	r2,r19,r2
 4019174:	30e2983a 	sll	r17,r6,r3
 4019178:	98e4983a 	sll	r18,r19,r3
 401917c:	142cb03a 	or	r22,r2,r16
 4019180:	882ad43a 	srli	r21,r17,16
 4019184:	b009883a 	mov	r4,r22
 4019188:	8d3fffcc 	andi	r20,r17,65535
 401918c:	a80b883a 	mov	r5,r21
 4019190:	400b8dc0 	call	400b8dc <__umodsi3>
 4019194:	b009883a 	mov	r4,r22
 4019198:	a80b883a 	mov	r5,r21
 401919c:	1027883a 	mov	r19,r2
 40191a0:	400b8780 	call	400b878 <__udivsi3>
 40191a4:	102d883a 	mov	r22,r2
 40191a8:	9826943a 	slli	r19,r19,16
 40191ac:	9004d43a 	srli	r2,r18,16
 40191b0:	a5a1383a 	mul	r16,r20,r22
 40191b4:	14c4b03a 	or	r2,r2,r19
 40191b8:	1400052e 	bgeu	r2,r16,40191d0 <__udivdi3+0xe4>
 40191bc:	1445883a 	add	r2,r2,r17
 40191c0:	b0ffffc4 	addi	r3,r22,-1
 40191c4:	14400136 	bltu	r2,r17,40191cc <__udivdi3+0xe0>
 40191c8:	14012336 	bltu	r2,r16,4019658 <__udivdi3+0x56c>
 40191cc:	182d883a 	mov	r22,r3
 40191d0:	1421c83a 	sub	r16,r2,r16
 40191d4:	a80b883a 	mov	r5,r21
 40191d8:	8009883a 	mov	r4,r16
 40191dc:	400b8dc0 	call	400b8dc <__umodsi3>
 40191e0:	1027883a 	mov	r19,r2
 40191e4:	a80b883a 	mov	r5,r21
 40191e8:	8009883a 	mov	r4,r16
 40191ec:	400b8780 	call	400b878 <__udivsi3>
 40191f0:	9826943a 	slli	r19,r19,16
 40191f4:	a0a9383a 	mul	r20,r20,r2
 40191f8:	94bfffcc 	andi	r18,r18,65535
 40191fc:	94e4b03a 	or	r18,r18,r19
 4019200:	9500052e 	bgeu	r18,r20,4019218 <__udivdi3+0x12c>
 4019204:	8ca5883a 	add	r18,r17,r18
 4019208:	10ffffc4 	addi	r3,r2,-1
 401920c:	9440f136 	bltu	r18,r17,40195d4 <__udivdi3+0x4e8>
 4019210:	9500f02e 	bgeu	r18,r20,40195d4 <__udivdi3+0x4e8>
 4019214:	10bfff84 	addi	r2,r2,-2
 4019218:	b00c943a 	slli	r6,r22,16
 401921c:	0007883a 	mov	r3,zero
 4019220:	3084b03a 	or	r2,r6,r2
 4019224:	00005906 	br	401938c <__udivdi3+0x2a0>
 4019228:	29c05636 	bltu	r5,r7,4019384 <__udivdi3+0x298>
 401922c:	00bfffd4 	movui	r2,65535
 4019230:	11c0622e 	bgeu	r2,r7,40193bc <__udivdi3+0x2d0>
 4019234:	00804034 	movhi	r2,256
 4019238:	10bfffc4 	addi	r2,r2,-1
 401923c:	11c0ee36 	bltu	r2,r7,40195f8 <__udivdi3+0x50c>
 4019240:	00800404 	movi	r2,16
 4019244:	3886d83a 	srl	r3,r7,r2
 4019248:	010100b4 	movhi	r4,1026
 401924c:	21003c04 	addi	r4,r4,240
 4019250:	20c7883a 	add	r3,r4,r3
 4019254:	18c00003 	ldbu	r3,0(r3)
 4019258:	05400804 	movi	r21,32
 401925c:	1885883a 	add	r2,r3,r2
 4019260:	a8abc83a 	sub	r21,r21,r2
 4019264:	a800621e 	bne	r21,zero,40193f0 <__udivdi3+0x304>
 4019268:	3c00e936 	bltu	r7,r16,4019610 <__udivdi3+0x524>
 401926c:	9985403a 	cmpgeu	r2,r19,r6
 4019270:	0007883a 	mov	r3,zero
 4019274:	00004506 	br	401938c <__udivdi3+0x2a0>
 4019278:	3000041e 	bne	r6,zero,401928c <__udivdi3+0x1a0>
 401927c:	000b883a 	mov	r5,zero
 4019280:	01000044 	movi	r4,1
 4019284:	400b8780 	call	400b878 <__udivsi3>
 4019288:	1023883a 	mov	r17,r2
 401928c:	00bfffd4 	movui	r2,65535
 4019290:	14404e2e 	bgeu	r2,r17,40193cc <__udivdi3+0x2e0>
 4019294:	00804034 	movhi	r2,256
 4019298:	10bfffc4 	addi	r2,r2,-1
 401929c:	1440d836 	bltu	r2,r17,4019600 <__udivdi3+0x514>
 40192a0:	00800404 	movi	r2,16
 40192a4:	8886d83a 	srl	r3,r17,r2
 40192a8:	010100b4 	movhi	r4,1026
 40192ac:	21003c04 	addi	r4,r4,240
 40192b0:	20c7883a 	add	r3,r4,r3
 40192b4:	18c00003 	ldbu	r3,0(r3)
 40192b8:	1885883a 	add	r2,r3,r2
 40192bc:	00c00804 	movi	r3,32
 40192c0:	1887c83a 	sub	r3,r3,r2
 40192c4:	18008f1e 	bne	r3,zero,4019504 <__udivdi3+0x418>
 40192c8:	882ad43a 	srli	r21,r17,16
 40192cc:	8461c83a 	sub	r16,r16,r17
 40192d0:	8d3fffcc 	andi	r20,r17,65535
 40192d4:	00c00044 	movi	r3,1
 40192d8:	8009883a 	mov	r4,r16
 40192dc:	a80b883a 	mov	r5,r21
 40192e0:	d8c00015 	stw	r3,0(sp)
 40192e4:	400b8dc0 	call	400b8dc <__umodsi3>
 40192e8:	8009883a 	mov	r4,r16
 40192ec:	a80b883a 	mov	r5,r21
 40192f0:	1027883a 	mov	r19,r2
 40192f4:	400b8780 	call	400b878 <__udivsi3>
 40192f8:	9826943a 	slli	r19,r19,16
 40192fc:	9008d43a 	srli	r4,r18,16
 4019300:	1521383a 	mul	r16,r2,r20
 4019304:	102d883a 	mov	r22,r2
 4019308:	24c8b03a 	or	r4,r4,r19
 401930c:	d8c00017 	ldw	r3,0(sp)
 4019310:	2400052e 	bgeu	r4,r16,4019328 <__udivdi3+0x23c>
 4019314:	2449883a 	add	r4,r4,r17
 4019318:	b0bfffc4 	addi	r2,r22,-1
 401931c:	24400136 	bltu	r4,r17,4019324 <__udivdi3+0x238>
 4019320:	2400ca36 	bltu	r4,r16,401964c <__udivdi3+0x560>
 4019324:	102d883a 	mov	r22,r2
 4019328:	2421c83a 	sub	r16,r4,r16
 401932c:	a80b883a 	mov	r5,r21
 4019330:	8009883a 	mov	r4,r16
 4019334:	d8c00015 	stw	r3,0(sp)
 4019338:	400b8dc0 	call	400b8dc <__umodsi3>
 401933c:	1027883a 	mov	r19,r2
 4019340:	a80b883a 	mov	r5,r21
 4019344:	8009883a 	mov	r4,r16
 4019348:	400b8780 	call	400b878 <__udivsi3>
 401934c:	9826943a 	slli	r19,r19,16
 4019350:	1529383a 	mul	r20,r2,r20
 4019354:	94bfffcc 	andi	r18,r18,65535
 4019358:	94e4b03a 	or	r18,r18,r19
 401935c:	d8c00017 	ldw	r3,0(sp)
 4019360:	9500052e 	bgeu	r18,r20,4019378 <__udivdi3+0x28c>
 4019364:	8ca5883a 	add	r18,r17,r18
 4019368:	113fffc4 	addi	r4,r2,-1
 401936c:	94409736 	bltu	r18,r17,40195cc <__udivdi3+0x4e0>
 4019370:	9500962e 	bgeu	r18,r20,40195cc <__udivdi3+0x4e0>
 4019374:	10bfff84 	addi	r2,r2,-2
 4019378:	b00c943a 	slli	r6,r22,16
 401937c:	3084b03a 	or	r2,r6,r2
 4019380:	00000206 	br	401938c <__udivdi3+0x2a0>
 4019384:	0007883a 	mov	r3,zero
 4019388:	0005883a 	mov	r2,zero
 401938c:	dfc00a17 	ldw	ra,40(sp)
 4019390:	df000917 	ldw	fp,36(sp)
 4019394:	ddc00817 	ldw	r23,32(sp)
 4019398:	dd800717 	ldw	r22,28(sp)
 401939c:	dd400617 	ldw	r21,24(sp)
 40193a0:	dd000517 	ldw	r20,20(sp)
 40193a4:	dcc00417 	ldw	r19,16(sp)
 40193a8:	dc800317 	ldw	r18,12(sp)
 40193ac:	dc400217 	ldw	r17,8(sp)
 40193b0:	dc000117 	ldw	r16,4(sp)
 40193b4:	dec00b04 	addi	sp,sp,44
 40193b8:	f800283a 	ret
 40193bc:	00803fc4 	movi	r2,255
 40193c0:	11c5803a 	cmpltu	r2,r2,r7
 40193c4:	100490fa 	slli	r2,r2,3
 40193c8:	003f9e06 	br	4019244 <__alt_data_end+0xfc019244>
 40193cc:	00803fc4 	movi	r2,255
 40193d0:	1445803a 	cmpltu	r2,r2,r17
 40193d4:	100490fa 	slli	r2,r2,3
 40193d8:	003fb206 	br	40192a4 <__alt_data_end+0xfc0192a4>
 40193dc:	00804034 	movhi	r2,256
 40193e0:	10bfffc4 	addi	r2,r2,-1
 40193e4:	11808836 	bltu	r2,r6,4019608 <__udivdi3+0x51c>
 40193e8:	00800404 	movi	r2,16
 40193ec:	003f5606 	br	4019148 <__alt_data_end+0xfc019148>
 40193f0:	30aed83a 	srl	r23,r6,r2
 40193f4:	3d4e983a 	sll	r7,r7,r21
 40193f8:	80acd83a 	srl	r22,r16,r2
 40193fc:	9884d83a 	srl	r2,r19,r2
 4019400:	3deeb03a 	or	r23,r7,r23
 4019404:	b824d43a 	srli	r18,r23,16
 4019408:	8560983a 	sll	r16,r16,r21
 401940c:	b009883a 	mov	r4,r22
 4019410:	900b883a 	mov	r5,r18
 4019414:	3568983a 	sll	r20,r6,r21
 4019418:	1420b03a 	or	r16,r2,r16
 401941c:	400b8dc0 	call	400b8dc <__umodsi3>
 4019420:	b009883a 	mov	r4,r22
 4019424:	900b883a 	mov	r5,r18
 4019428:	1023883a 	mov	r17,r2
 401942c:	400b8780 	call	400b878 <__udivsi3>
 4019430:	8808943a 	slli	r4,r17,16
 4019434:	bf3fffcc 	andi	fp,r23,65535
 4019438:	8006d43a 	srli	r3,r16,16
 401943c:	e0a3383a 	mul	r17,fp,r2
 4019440:	100d883a 	mov	r6,r2
 4019444:	1906b03a 	or	r3,r3,r4
 4019448:	1c40042e 	bgeu	r3,r17,401945c <__udivdi3+0x370>
 401944c:	1dc7883a 	add	r3,r3,r23
 4019450:	10bfffc4 	addi	r2,r2,-1
 4019454:	1dc0752e 	bgeu	r3,r23,401962c <__udivdi3+0x540>
 4019458:	100d883a 	mov	r6,r2
 401945c:	1c63c83a 	sub	r17,r3,r17
 4019460:	900b883a 	mov	r5,r18
 4019464:	8809883a 	mov	r4,r17
 4019468:	d9800015 	stw	r6,0(sp)
 401946c:	400b8dc0 	call	400b8dc <__umodsi3>
 4019470:	102d883a 	mov	r22,r2
 4019474:	8809883a 	mov	r4,r17
 4019478:	900b883a 	mov	r5,r18
 401947c:	400b8780 	call	400b878 <__udivsi3>
 4019480:	b02c943a 	slli	r22,r22,16
 4019484:	e089383a 	mul	r4,fp,r2
 4019488:	843fffcc 	andi	r16,r16,65535
 401948c:	85a0b03a 	or	r16,r16,r22
 4019490:	d9800017 	ldw	r6,0(sp)
 4019494:	8100042e 	bgeu	r16,r4,40194a8 <__udivdi3+0x3bc>
 4019498:	85e1883a 	add	r16,r16,r23
 401949c:	10ffffc4 	addi	r3,r2,-1
 40194a0:	85c05e2e 	bgeu	r16,r23,401961c <__udivdi3+0x530>
 40194a4:	1805883a 	mov	r2,r3
 40194a8:	300c943a 	slli	r6,r6,16
 40194ac:	a17fffcc 	andi	r5,r20,65535
 40194b0:	a028d43a 	srli	r20,r20,16
 40194b4:	3084b03a 	or	r2,r6,r2
 40194b8:	10ffffcc 	andi	r3,r2,65535
 40194bc:	100cd43a 	srli	r6,r2,16
 40194c0:	194f383a 	mul	r7,r3,r5
 40194c4:	1d07383a 	mul	r3,r3,r20
 40194c8:	314b383a 	mul	r5,r6,r5
 40194cc:	3810d43a 	srli	r8,r7,16
 40194d0:	8121c83a 	sub	r16,r16,r4
 40194d4:	1947883a 	add	r3,r3,r5
 40194d8:	40c7883a 	add	r3,r8,r3
 40194dc:	350d383a 	mul	r6,r6,r20
 40194e0:	1940022e 	bgeu	r3,r5,40194ec <__udivdi3+0x400>
 40194e4:	01000074 	movhi	r4,1
 40194e8:	310d883a 	add	r6,r6,r4
 40194ec:	1828d43a 	srli	r20,r3,16
 40194f0:	a18d883a 	add	r6,r20,r6
 40194f4:	81803e36 	bltu	r16,r6,40195f0 <__udivdi3+0x504>
 40194f8:	81803826 	beq	r16,r6,40195dc <__udivdi3+0x4f0>
 40194fc:	0007883a 	mov	r3,zero
 4019500:	003fa206 	br	401938c <__alt_data_end+0xfc01938c>
 4019504:	88e2983a 	sll	r17,r17,r3
 4019508:	80a8d83a 	srl	r20,r16,r2
 401950c:	80e0983a 	sll	r16,r16,r3
 4019510:	882ad43a 	srli	r21,r17,16
 4019514:	9884d83a 	srl	r2,r19,r2
 4019518:	a009883a 	mov	r4,r20
 401951c:	a80b883a 	mov	r5,r21
 4019520:	142eb03a 	or	r23,r2,r16
 4019524:	98e4983a 	sll	r18,r19,r3
 4019528:	400b8dc0 	call	400b8dc <__umodsi3>
 401952c:	a009883a 	mov	r4,r20
 4019530:	a80b883a 	mov	r5,r21
 4019534:	1021883a 	mov	r16,r2
 4019538:	400b8780 	call	400b878 <__udivsi3>
 401953c:	1039883a 	mov	fp,r2
 4019540:	8d3fffcc 	andi	r20,r17,65535
 4019544:	8020943a 	slli	r16,r16,16
 4019548:	b804d43a 	srli	r2,r23,16
 401954c:	a72d383a 	mul	r22,r20,fp
 4019550:	1404b03a 	or	r2,r2,r16
 4019554:	1580062e 	bgeu	r2,r22,4019570 <__udivdi3+0x484>
 4019558:	1445883a 	add	r2,r2,r17
 401955c:	e0ffffc4 	addi	r3,fp,-1
 4019560:	14403836 	bltu	r2,r17,4019644 <__udivdi3+0x558>
 4019564:	1580372e 	bgeu	r2,r22,4019644 <__udivdi3+0x558>
 4019568:	e73fff84 	addi	fp,fp,-2
 401956c:	1445883a 	add	r2,r2,r17
 4019570:	15adc83a 	sub	r22,r2,r22
 4019574:	a80b883a 	mov	r5,r21
 4019578:	b009883a 	mov	r4,r22
 401957c:	400b8dc0 	call	400b8dc <__umodsi3>
 4019580:	1027883a 	mov	r19,r2
 4019584:	b009883a 	mov	r4,r22
 4019588:	a80b883a 	mov	r5,r21
 401958c:	400b8780 	call	400b878 <__udivsi3>
 4019590:	9826943a 	slli	r19,r19,16
 4019594:	a0a1383a 	mul	r16,r20,r2
 4019598:	b93fffcc 	andi	r4,r23,65535
 401959c:	24c8b03a 	or	r4,r4,r19
 40195a0:	2400062e 	bgeu	r4,r16,40195bc <__udivdi3+0x4d0>
 40195a4:	2449883a 	add	r4,r4,r17
 40195a8:	10ffffc4 	addi	r3,r2,-1
 40195ac:	24402336 	bltu	r4,r17,401963c <__udivdi3+0x550>
 40195b0:	2400222e 	bgeu	r4,r16,401963c <__udivdi3+0x550>
 40195b4:	10bfff84 	addi	r2,r2,-2
 40195b8:	2449883a 	add	r4,r4,r17
 40195bc:	e038943a 	slli	fp,fp,16
 40195c0:	2421c83a 	sub	r16,r4,r16
 40195c4:	e086b03a 	or	r3,fp,r2
 40195c8:	003f4306 	br	40192d8 <__alt_data_end+0xfc0192d8>
 40195cc:	2005883a 	mov	r2,r4
 40195d0:	003f6906 	br	4019378 <__alt_data_end+0xfc019378>
 40195d4:	1805883a 	mov	r2,r3
 40195d8:	003f0f06 	br	4019218 <__alt_data_end+0xfc019218>
 40195dc:	1806943a 	slli	r3,r3,16
 40195e0:	9d66983a 	sll	r19,r19,r21
 40195e4:	39ffffcc 	andi	r7,r7,65535
 40195e8:	19c7883a 	add	r3,r3,r7
 40195ec:	98ffc32e 	bgeu	r19,r3,40194fc <__alt_data_end+0xfc0194fc>
 40195f0:	10bfffc4 	addi	r2,r2,-1
 40195f4:	003fc106 	br	40194fc <__alt_data_end+0xfc0194fc>
 40195f8:	00800604 	movi	r2,24
 40195fc:	003f1106 	br	4019244 <__alt_data_end+0xfc019244>
 4019600:	00800604 	movi	r2,24
 4019604:	003f2706 	br	40192a4 <__alt_data_end+0xfc0192a4>
 4019608:	00800604 	movi	r2,24
 401960c:	003ece06 	br	4019148 <__alt_data_end+0xfc019148>
 4019610:	0007883a 	mov	r3,zero
 4019614:	00800044 	movi	r2,1
 4019618:	003f5c06 	br	401938c <__alt_data_end+0xfc01938c>
 401961c:	813fa12e 	bgeu	r16,r4,40194a4 <__alt_data_end+0xfc0194a4>
 4019620:	10bfff84 	addi	r2,r2,-2
 4019624:	85e1883a 	add	r16,r16,r23
 4019628:	003f9f06 	br	40194a8 <__alt_data_end+0xfc0194a8>
 401962c:	1c7f8a2e 	bgeu	r3,r17,4019458 <__alt_data_end+0xfc019458>
 4019630:	31bfff84 	addi	r6,r6,-2
 4019634:	1dc7883a 	add	r3,r3,r23
 4019638:	003f8806 	br	401945c <__alt_data_end+0xfc01945c>
 401963c:	1805883a 	mov	r2,r3
 4019640:	003fde06 	br	40195bc <__alt_data_end+0xfc0195bc>
 4019644:	1839883a 	mov	fp,r3
 4019648:	003fc906 	br	4019570 <__alt_data_end+0xfc019570>
 401964c:	b5bfff84 	addi	r22,r22,-2
 4019650:	2449883a 	add	r4,r4,r17
 4019654:	003f3406 	br	4019328 <__alt_data_end+0xfc019328>
 4019658:	b5bfff84 	addi	r22,r22,-2
 401965c:	1445883a 	add	r2,r2,r17
 4019660:	003edb06 	br	40191d0 <__alt_data_end+0xfc0191d0>

04019664 <__umoddi3>:
 4019664:	defff404 	addi	sp,sp,-48
 4019668:	df000a15 	stw	fp,40(sp)
 401966c:	dc400315 	stw	r17,12(sp)
 4019670:	dc000215 	stw	r16,8(sp)
 4019674:	dfc00b15 	stw	ra,44(sp)
 4019678:	ddc00915 	stw	r23,36(sp)
 401967c:	dd800815 	stw	r22,32(sp)
 4019680:	dd400715 	stw	r21,28(sp)
 4019684:	dd000615 	stw	r20,24(sp)
 4019688:	dcc00515 	stw	r19,20(sp)
 401968c:	dc800415 	stw	r18,16(sp)
 4019690:	2021883a 	mov	r16,r4
 4019694:	2823883a 	mov	r17,r5
 4019698:	2839883a 	mov	fp,r5
 401969c:	38003c1e 	bne	r7,zero,4019790 <__umoddi3+0x12c>
 40196a0:	3027883a 	mov	r19,r6
 40196a4:	2029883a 	mov	r20,r4
 40196a8:	2980512e 	bgeu	r5,r6,40197f0 <__umoddi3+0x18c>
 40196ac:	00bfffd4 	movui	r2,65535
 40196b0:	11809a36 	bltu	r2,r6,401991c <__umoddi3+0x2b8>
 40196b4:	01003fc4 	movi	r4,255
 40196b8:	2189803a 	cmpltu	r4,r4,r6
 40196bc:	200890fa 	slli	r4,r4,3
 40196c0:	3104d83a 	srl	r2,r6,r4
 40196c4:	00c100b4 	movhi	r3,1026
 40196c8:	18c03c04 	addi	r3,r3,240
 40196cc:	1885883a 	add	r2,r3,r2
 40196d0:	10c00003 	ldbu	r3,0(r2)
 40196d4:	00800804 	movi	r2,32
 40196d8:	1909883a 	add	r4,r3,r4
 40196dc:	1125c83a 	sub	r18,r2,r4
 40196e0:	90000526 	beq	r18,zero,40196f8 <__umoddi3+0x94>
 40196e4:	8ca2983a 	sll	r17,r17,r18
 40196e8:	8108d83a 	srl	r4,r16,r4
 40196ec:	34a6983a 	sll	r19,r6,r18
 40196f0:	84a8983a 	sll	r20,r16,r18
 40196f4:	2478b03a 	or	fp,r4,r17
 40196f8:	982ed43a 	srli	r23,r19,16
 40196fc:	e009883a 	mov	r4,fp
 4019700:	9dbfffcc 	andi	r22,r19,65535
 4019704:	b80b883a 	mov	r5,r23
 4019708:	400b8dc0 	call	400b8dc <__umodsi3>
 401970c:	e009883a 	mov	r4,fp
 4019710:	b80b883a 	mov	r5,r23
 4019714:	102b883a 	mov	r21,r2
 4019718:	400b8780 	call	400b878 <__udivsi3>
 401971c:	a806943a 	slli	r3,r21,16
 4019720:	a008d43a 	srli	r4,r20,16
 4019724:	b085383a 	mul	r2,r22,r2
 4019728:	20c8b03a 	or	r4,r4,r3
 401972c:	2080032e 	bgeu	r4,r2,401973c <__umoddi3+0xd8>
 4019730:	24c9883a 	add	r4,r4,r19
 4019734:	24c00136 	bltu	r4,r19,401973c <__umoddi3+0xd8>
 4019738:	20811036 	bltu	r4,r2,4019b7c <__umoddi3+0x518>
 401973c:	20abc83a 	sub	r21,r4,r2
 4019740:	b80b883a 	mov	r5,r23
 4019744:	a809883a 	mov	r4,r21
 4019748:	400b8dc0 	call	400b8dc <__umodsi3>
 401974c:	1023883a 	mov	r17,r2
 4019750:	b80b883a 	mov	r5,r23
 4019754:	a809883a 	mov	r4,r21
 4019758:	400b8780 	call	400b878 <__udivsi3>
 401975c:	8822943a 	slli	r17,r17,16
 4019760:	b085383a 	mul	r2,r22,r2
 4019764:	a0ffffcc 	andi	r3,r20,65535
 4019768:	1c46b03a 	or	r3,r3,r17
 401976c:	1880042e 	bgeu	r3,r2,4019780 <__umoddi3+0x11c>
 4019770:	1cc7883a 	add	r3,r3,r19
 4019774:	1cc00236 	bltu	r3,r19,4019780 <__umoddi3+0x11c>
 4019778:	1880012e 	bgeu	r3,r2,4019780 <__umoddi3+0x11c>
 401977c:	1cc7883a 	add	r3,r3,r19
 4019780:	1885c83a 	sub	r2,r3,r2
 4019784:	1484d83a 	srl	r2,r2,r18
 4019788:	0007883a 	mov	r3,zero
 401978c:	00004f06 	br	40198cc <__umoddi3+0x268>
 4019790:	29c04c36 	bltu	r5,r7,40198c4 <__umoddi3+0x260>
 4019794:	00bfffd4 	movui	r2,65535
 4019798:	11c0582e 	bgeu	r2,r7,40198fc <__umoddi3+0x298>
 401979c:	00804034 	movhi	r2,256
 40197a0:	10bfffc4 	addi	r2,r2,-1
 40197a4:	11c0e736 	bltu	r2,r7,4019b44 <__umoddi3+0x4e0>
 40197a8:	01000404 	movi	r4,16
 40197ac:	3904d83a 	srl	r2,r7,r4
 40197b0:	00c100b4 	movhi	r3,1026
 40197b4:	18c03c04 	addi	r3,r3,240
 40197b8:	1885883a 	add	r2,r3,r2
 40197bc:	14c00003 	ldbu	r19,0(r2)
 40197c0:	00c00804 	movi	r3,32
 40197c4:	9927883a 	add	r19,r19,r4
 40197c8:	1ce9c83a 	sub	r20,r3,r19
 40197cc:	a000581e 	bne	r20,zero,4019930 <__umoddi3+0x2cc>
 40197d0:	3c400136 	bltu	r7,r17,40197d8 <__umoddi3+0x174>
 40197d4:	8180eb36 	bltu	r16,r6,4019b84 <__umoddi3+0x520>
 40197d8:	8185c83a 	sub	r2,r16,r6
 40197dc:	89e3c83a 	sub	r17,r17,r7
 40197e0:	8089803a 	cmpltu	r4,r16,r2
 40197e4:	8939c83a 	sub	fp,r17,r4
 40197e8:	e007883a 	mov	r3,fp
 40197ec:	00003706 	br	40198cc <__umoddi3+0x268>
 40197f0:	3000041e 	bne	r6,zero,4019804 <__umoddi3+0x1a0>
 40197f4:	000b883a 	mov	r5,zero
 40197f8:	01000044 	movi	r4,1
 40197fc:	400b8780 	call	400b878 <__udivsi3>
 4019800:	1027883a 	mov	r19,r2
 4019804:	00bfffd4 	movui	r2,65535
 4019808:	14c0402e 	bgeu	r2,r19,401990c <__umoddi3+0x2a8>
 401980c:	00804034 	movhi	r2,256
 4019810:	10bfffc4 	addi	r2,r2,-1
 4019814:	14c0cd36 	bltu	r2,r19,4019b4c <__umoddi3+0x4e8>
 4019818:	00800404 	movi	r2,16
 401981c:	9886d83a 	srl	r3,r19,r2
 4019820:	010100b4 	movhi	r4,1026
 4019824:	21003c04 	addi	r4,r4,240
 4019828:	20c7883a 	add	r3,r4,r3
 401982c:	18c00003 	ldbu	r3,0(r3)
 4019830:	1887883a 	add	r3,r3,r2
 4019834:	00800804 	movi	r2,32
 4019838:	10e5c83a 	sub	r18,r2,r3
 401983c:	9000901e 	bne	r18,zero,4019a80 <__umoddi3+0x41c>
 4019840:	982cd43a 	srli	r22,r19,16
 4019844:	8ce3c83a 	sub	r17,r17,r19
 4019848:	9d7fffcc 	andi	r21,r19,65535
 401984c:	b00b883a 	mov	r5,r22
 4019850:	8809883a 	mov	r4,r17
 4019854:	400b8dc0 	call	400b8dc <__umodsi3>
 4019858:	8809883a 	mov	r4,r17
 401985c:	b00b883a 	mov	r5,r22
 4019860:	1021883a 	mov	r16,r2
 4019864:	400b8780 	call	400b878 <__udivsi3>
 4019868:	8006943a 	slli	r3,r16,16
 401986c:	a008d43a 	srli	r4,r20,16
 4019870:	1545383a 	mul	r2,r2,r21
 4019874:	20c8b03a 	or	r4,r4,r3
 4019878:	2080042e 	bgeu	r4,r2,401988c <__umoddi3+0x228>
 401987c:	24c9883a 	add	r4,r4,r19
 4019880:	24c00236 	bltu	r4,r19,401988c <__umoddi3+0x228>
 4019884:	2080012e 	bgeu	r4,r2,401988c <__umoddi3+0x228>
 4019888:	24c9883a 	add	r4,r4,r19
 401988c:	20a1c83a 	sub	r16,r4,r2
 4019890:	b00b883a 	mov	r5,r22
 4019894:	8009883a 	mov	r4,r16
 4019898:	400b8dc0 	call	400b8dc <__umodsi3>
 401989c:	1023883a 	mov	r17,r2
 40198a0:	b00b883a 	mov	r5,r22
 40198a4:	8009883a 	mov	r4,r16
 40198a8:	400b8780 	call	400b878 <__udivsi3>
 40198ac:	8822943a 	slli	r17,r17,16
 40198b0:	1545383a 	mul	r2,r2,r21
 40198b4:	a53fffcc 	andi	r20,r20,65535
 40198b8:	a446b03a 	or	r3,r20,r17
 40198bc:	18bfb02e 	bgeu	r3,r2,4019780 <__alt_data_end+0xfc019780>
 40198c0:	003fab06 	br	4019770 <__alt_data_end+0xfc019770>
 40198c4:	2005883a 	mov	r2,r4
 40198c8:	2807883a 	mov	r3,r5
 40198cc:	dfc00b17 	ldw	ra,44(sp)
 40198d0:	df000a17 	ldw	fp,40(sp)
 40198d4:	ddc00917 	ldw	r23,36(sp)
 40198d8:	dd800817 	ldw	r22,32(sp)
 40198dc:	dd400717 	ldw	r21,28(sp)
 40198e0:	dd000617 	ldw	r20,24(sp)
 40198e4:	dcc00517 	ldw	r19,20(sp)
 40198e8:	dc800417 	ldw	r18,16(sp)
 40198ec:	dc400317 	ldw	r17,12(sp)
 40198f0:	dc000217 	ldw	r16,8(sp)
 40198f4:	dec00c04 	addi	sp,sp,48
 40198f8:	f800283a 	ret
 40198fc:	04c03fc4 	movi	r19,255
 4019900:	99c9803a 	cmpltu	r4,r19,r7
 4019904:	200890fa 	slli	r4,r4,3
 4019908:	003fa806 	br	40197ac <__alt_data_end+0xfc0197ac>
 401990c:	00803fc4 	movi	r2,255
 4019910:	14c5803a 	cmpltu	r2,r2,r19
 4019914:	100490fa 	slli	r2,r2,3
 4019918:	003fc006 	br	401981c <__alt_data_end+0xfc01981c>
 401991c:	00804034 	movhi	r2,256
 4019920:	10bfffc4 	addi	r2,r2,-1
 4019924:	11808b36 	bltu	r2,r6,4019b54 <__umoddi3+0x4f0>
 4019928:	01000404 	movi	r4,16
 401992c:	003f6406 	br	40196c0 <__alt_data_end+0xfc0196c0>
 4019930:	34c4d83a 	srl	r2,r6,r19
 4019934:	3d0e983a 	sll	r7,r7,r20
 4019938:	8cf8d83a 	srl	fp,r17,r19
 401993c:	8d10983a 	sll	r8,r17,r20
 4019940:	38aab03a 	or	r21,r7,r2
 4019944:	a82cd43a 	srli	r22,r21,16
 4019948:	84e2d83a 	srl	r17,r16,r19
 401994c:	e009883a 	mov	r4,fp
 4019950:	b00b883a 	mov	r5,r22
 4019954:	8a22b03a 	or	r17,r17,r8
 4019958:	3524983a 	sll	r18,r6,r20
 401995c:	400b8dc0 	call	400b8dc <__umodsi3>
 4019960:	e009883a 	mov	r4,fp
 4019964:	b00b883a 	mov	r5,r22
 4019968:	102f883a 	mov	r23,r2
 401996c:	400b8780 	call	400b878 <__udivsi3>
 4019970:	100d883a 	mov	r6,r2
 4019974:	b808943a 	slli	r4,r23,16
 4019978:	aa3fffcc 	andi	r8,r21,65535
 401997c:	8804d43a 	srli	r2,r17,16
 4019980:	41af383a 	mul	r23,r8,r6
 4019984:	8520983a 	sll	r16,r16,r20
 4019988:	1104b03a 	or	r2,r2,r4
 401998c:	15c0042e 	bgeu	r2,r23,40199a0 <__umoddi3+0x33c>
 4019990:	1545883a 	add	r2,r2,r21
 4019994:	30ffffc4 	addi	r3,r6,-1
 4019998:	1540742e 	bgeu	r2,r21,4019b6c <__umoddi3+0x508>
 401999c:	180d883a 	mov	r6,r3
 40199a0:	15efc83a 	sub	r23,r2,r23
 40199a4:	b00b883a 	mov	r5,r22
 40199a8:	b809883a 	mov	r4,r23
 40199ac:	d9800115 	stw	r6,4(sp)
 40199b0:	da000015 	stw	r8,0(sp)
 40199b4:	400b8dc0 	call	400b8dc <__umodsi3>
 40199b8:	b00b883a 	mov	r5,r22
 40199bc:	b809883a 	mov	r4,r23
 40199c0:	1039883a 	mov	fp,r2
 40199c4:	400b8780 	call	400b878 <__udivsi3>
 40199c8:	da000017 	ldw	r8,0(sp)
 40199cc:	e038943a 	slli	fp,fp,16
 40199d0:	100b883a 	mov	r5,r2
 40199d4:	4089383a 	mul	r4,r8,r2
 40199d8:	8a3fffcc 	andi	r8,r17,65535
 40199dc:	4710b03a 	or	r8,r8,fp
 40199e0:	d9800117 	ldw	r6,4(sp)
 40199e4:	4100042e 	bgeu	r8,r4,40199f8 <__umoddi3+0x394>
 40199e8:	4551883a 	add	r8,r8,r21
 40199ec:	10bfffc4 	addi	r2,r2,-1
 40199f0:	45405a2e 	bgeu	r8,r21,4019b5c <__umoddi3+0x4f8>
 40199f4:	100b883a 	mov	r5,r2
 40199f8:	300c943a 	slli	r6,r6,16
 40199fc:	91ffffcc 	andi	r7,r18,65535
 4019a00:	9004d43a 	srli	r2,r18,16
 4019a04:	314cb03a 	or	r6,r6,r5
 4019a08:	317fffcc 	andi	r5,r6,65535
 4019a0c:	300cd43a 	srli	r6,r6,16
 4019a10:	29d3383a 	mul	r9,r5,r7
 4019a14:	288b383a 	mul	r5,r5,r2
 4019a18:	31cf383a 	mul	r7,r6,r7
 4019a1c:	4806d43a 	srli	r3,r9,16
 4019a20:	4111c83a 	sub	r8,r8,r4
 4019a24:	29cb883a 	add	r5,r5,r7
 4019a28:	194b883a 	add	r5,r3,r5
 4019a2c:	3085383a 	mul	r2,r6,r2
 4019a30:	29c0022e 	bgeu	r5,r7,4019a3c <__umoddi3+0x3d8>
 4019a34:	00c00074 	movhi	r3,1
 4019a38:	10c5883a 	add	r2,r2,r3
 4019a3c:	2808d43a 	srli	r4,r5,16
 4019a40:	280a943a 	slli	r5,r5,16
 4019a44:	4a7fffcc 	andi	r9,r9,65535
 4019a48:	2085883a 	add	r2,r4,r2
 4019a4c:	2a4b883a 	add	r5,r5,r9
 4019a50:	40803636 	bltu	r8,r2,4019b2c <__umoddi3+0x4c8>
 4019a54:	40804d26 	beq	r8,r2,4019b8c <__umoddi3+0x528>
 4019a58:	4089c83a 	sub	r4,r8,r2
 4019a5c:	280f883a 	mov	r7,r5
 4019a60:	81cfc83a 	sub	r7,r16,r7
 4019a64:	81c7803a 	cmpltu	r3,r16,r7
 4019a68:	20c7c83a 	sub	r3,r4,r3
 4019a6c:	1cc4983a 	sll	r2,r3,r19
 4019a70:	3d0ed83a 	srl	r7,r7,r20
 4019a74:	1d06d83a 	srl	r3,r3,r20
 4019a78:	11c4b03a 	or	r2,r2,r7
 4019a7c:	003f9306 	br	40198cc <__alt_data_end+0xfc0198cc>
 4019a80:	9ca6983a 	sll	r19,r19,r18
 4019a84:	88e8d83a 	srl	r20,r17,r3
 4019a88:	80c4d83a 	srl	r2,r16,r3
 4019a8c:	982cd43a 	srli	r22,r19,16
 4019a90:	8ca2983a 	sll	r17,r17,r18
 4019a94:	a009883a 	mov	r4,r20
 4019a98:	b00b883a 	mov	r5,r22
 4019a9c:	1478b03a 	or	fp,r2,r17
 4019aa0:	400b8dc0 	call	400b8dc <__umodsi3>
 4019aa4:	a009883a 	mov	r4,r20
 4019aa8:	b00b883a 	mov	r5,r22
 4019aac:	1023883a 	mov	r17,r2
 4019ab0:	400b8780 	call	400b878 <__udivsi3>
 4019ab4:	9d7fffcc 	andi	r21,r19,65535
 4019ab8:	880a943a 	slli	r5,r17,16
 4019abc:	e008d43a 	srli	r4,fp,16
 4019ac0:	a885383a 	mul	r2,r21,r2
 4019ac4:	84a8983a 	sll	r20,r16,r18
 4019ac8:	2148b03a 	or	r4,r4,r5
 4019acc:	2080042e 	bgeu	r4,r2,4019ae0 <__umoddi3+0x47c>
 4019ad0:	24c9883a 	add	r4,r4,r19
 4019ad4:	24c00236 	bltu	r4,r19,4019ae0 <__umoddi3+0x47c>
 4019ad8:	2080012e 	bgeu	r4,r2,4019ae0 <__umoddi3+0x47c>
 4019adc:	24c9883a 	add	r4,r4,r19
 4019ae0:	20a3c83a 	sub	r17,r4,r2
 4019ae4:	b00b883a 	mov	r5,r22
 4019ae8:	8809883a 	mov	r4,r17
 4019aec:	400b8dc0 	call	400b8dc <__umodsi3>
 4019af0:	102f883a 	mov	r23,r2
 4019af4:	8809883a 	mov	r4,r17
 4019af8:	b00b883a 	mov	r5,r22
 4019afc:	400b8780 	call	400b878 <__udivsi3>
 4019b00:	b82e943a 	slli	r23,r23,16
 4019b04:	a885383a 	mul	r2,r21,r2
 4019b08:	e13fffcc 	andi	r4,fp,65535
 4019b0c:	25c8b03a 	or	r4,r4,r23
 4019b10:	2080042e 	bgeu	r4,r2,4019b24 <__umoddi3+0x4c0>
 4019b14:	24c9883a 	add	r4,r4,r19
 4019b18:	24c00236 	bltu	r4,r19,4019b24 <__umoddi3+0x4c0>
 4019b1c:	2080012e 	bgeu	r4,r2,4019b24 <__umoddi3+0x4c0>
 4019b20:	24c9883a 	add	r4,r4,r19
 4019b24:	20a3c83a 	sub	r17,r4,r2
 4019b28:	003f4806 	br	401984c <__alt_data_end+0xfc01984c>
 4019b2c:	2c8fc83a 	sub	r7,r5,r18
 4019b30:	1545c83a 	sub	r2,r2,r21
 4019b34:	29cb803a 	cmpltu	r5,r5,r7
 4019b38:	1145c83a 	sub	r2,r2,r5
 4019b3c:	4089c83a 	sub	r4,r8,r2
 4019b40:	003fc706 	br	4019a60 <__alt_data_end+0xfc019a60>
 4019b44:	01000604 	movi	r4,24
 4019b48:	003f1806 	br	40197ac <__alt_data_end+0xfc0197ac>
 4019b4c:	00800604 	movi	r2,24
 4019b50:	003f3206 	br	401981c <__alt_data_end+0xfc01981c>
 4019b54:	01000604 	movi	r4,24
 4019b58:	003ed906 	br	40196c0 <__alt_data_end+0xfc0196c0>
 4019b5c:	413fa52e 	bgeu	r8,r4,40199f4 <__alt_data_end+0xfc0199f4>
 4019b60:	297fff84 	addi	r5,r5,-2
 4019b64:	4551883a 	add	r8,r8,r21
 4019b68:	003fa306 	br	40199f8 <__alt_data_end+0xfc0199f8>
 4019b6c:	15ff8b2e 	bgeu	r2,r23,401999c <__alt_data_end+0xfc01999c>
 4019b70:	31bfff84 	addi	r6,r6,-2
 4019b74:	1545883a 	add	r2,r2,r21
 4019b78:	003f8906 	br	40199a0 <__alt_data_end+0xfc0199a0>
 4019b7c:	24c9883a 	add	r4,r4,r19
 4019b80:	003eee06 	br	401973c <__alt_data_end+0xfc01973c>
 4019b84:	8005883a 	mov	r2,r16
 4019b88:	003f1706 	br	40197e8 <__alt_data_end+0xfc0197e8>
 4019b8c:	817fe736 	bltu	r16,r5,4019b2c <__alt_data_end+0xfc019b2c>
 4019b90:	280f883a 	mov	r7,r5
 4019b94:	0009883a 	mov	r4,zero
 4019b98:	003fb106 	br	4019a60 <__alt_data_end+0xfc019a60>

04019b9c <__adddf3>:
 4019b9c:	02c00434 	movhi	r11,16
 4019ba0:	5affffc4 	addi	r11,r11,-1
 4019ba4:	2806d7fa 	srli	r3,r5,31
 4019ba8:	2ad4703a 	and	r10,r5,r11
 4019bac:	3ad2703a 	and	r9,r7,r11
 4019bb0:	3804d53a 	srli	r2,r7,20
 4019bb4:	3018d77a 	srli	r12,r6,29
 4019bb8:	280ad53a 	srli	r5,r5,20
 4019bbc:	501490fa 	slli	r10,r10,3
 4019bc0:	2010d77a 	srli	r8,r4,29
 4019bc4:	481290fa 	slli	r9,r9,3
 4019bc8:	380ed7fa 	srli	r7,r7,31
 4019bcc:	defffb04 	addi	sp,sp,-20
 4019bd0:	dc800215 	stw	r18,8(sp)
 4019bd4:	dc400115 	stw	r17,4(sp)
 4019bd8:	dc000015 	stw	r16,0(sp)
 4019bdc:	dfc00415 	stw	ra,16(sp)
 4019be0:	dcc00315 	stw	r19,12(sp)
 4019be4:	1c803fcc 	andi	r18,r3,255
 4019be8:	2c01ffcc 	andi	r16,r5,2047
 4019bec:	5210b03a 	or	r8,r10,r8
 4019bf0:	202290fa 	slli	r17,r4,3
 4019bf4:	1081ffcc 	andi	r2,r2,2047
 4019bf8:	4b12b03a 	or	r9,r9,r12
 4019bfc:	300c90fa 	slli	r6,r6,3
 4019c00:	91c07526 	beq	r18,r7,4019dd8 <__adddf3+0x23c>
 4019c04:	8087c83a 	sub	r3,r16,r2
 4019c08:	00c0ab0e 	bge	zero,r3,4019eb8 <__adddf3+0x31c>
 4019c0c:	10002a1e 	bne	r2,zero,4019cb8 <__adddf3+0x11c>
 4019c10:	4984b03a 	or	r2,r9,r6
 4019c14:	1000961e 	bne	r2,zero,4019e70 <__adddf3+0x2d4>
 4019c18:	888001cc 	andi	r2,r17,7
 4019c1c:	10000726 	beq	r2,zero,4019c3c <__adddf3+0xa0>
 4019c20:	888003cc 	andi	r2,r17,15
 4019c24:	00c00104 	movi	r3,4
 4019c28:	10c00426 	beq	r2,r3,4019c3c <__adddf3+0xa0>
 4019c2c:	88c7883a 	add	r3,r17,r3
 4019c30:	1c63803a 	cmpltu	r17,r3,r17
 4019c34:	4451883a 	add	r8,r8,r17
 4019c38:	1823883a 	mov	r17,r3
 4019c3c:	4080202c 	andhi	r2,r8,128
 4019c40:	10005926 	beq	r2,zero,4019da8 <__adddf3+0x20c>
 4019c44:	84000044 	addi	r16,r16,1
 4019c48:	0081ffc4 	movi	r2,2047
 4019c4c:	8080ba26 	beq	r16,r2,4019f38 <__adddf3+0x39c>
 4019c50:	00bfe034 	movhi	r2,65408
 4019c54:	10bfffc4 	addi	r2,r2,-1
 4019c58:	4090703a 	and	r8,r8,r2
 4019c5c:	4004977a 	slli	r2,r8,29
 4019c60:	4010927a 	slli	r8,r8,9
 4019c64:	8822d0fa 	srli	r17,r17,3
 4019c68:	8401ffcc 	andi	r16,r16,2047
 4019c6c:	4010d33a 	srli	r8,r8,12
 4019c70:	9007883a 	mov	r3,r18
 4019c74:	1444b03a 	or	r2,r2,r17
 4019c78:	8401ffcc 	andi	r16,r16,2047
 4019c7c:	8020953a 	slli	r16,r16,20
 4019c80:	18c03fcc 	andi	r3,r3,255
 4019c84:	01000434 	movhi	r4,16
 4019c88:	213fffc4 	addi	r4,r4,-1
 4019c8c:	180697fa 	slli	r3,r3,31
 4019c90:	4110703a 	and	r8,r8,r4
 4019c94:	4410b03a 	or	r8,r8,r16
 4019c98:	40c6b03a 	or	r3,r8,r3
 4019c9c:	dfc00417 	ldw	ra,16(sp)
 4019ca0:	dcc00317 	ldw	r19,12(sp)
 4019ca4:	dc800217 	ldw	r18,8(sp)
 4019ca8:	dc400117 	ldw	r17,4(sp)
 4019cac:	dc000017 	ldw	r16,0(sp)
 4019cb0:	dec00504 	addi	sp,sp,20
 4019cb4:	f800283a 	ret
 4019cb8:	0081ffc4 	movi	r2,2047
 4019cbc:	80bfd626 	beq	r16,r2,4019c18 <__alt_data_end+0xfc019c18>
 4019cc0:	4a402034 	orhi	r9,r9,128
 4019cc4:	00800e04 	movi	r2,56
 4019cc8:	10c09f16 	blt	r2,r3,4019f48 <__adddf3+0x3ac>
 4019ccc:	008007c4 	movi	r2,31
 4019cd0:	10c0c216 	blt	r2,r3,4019fdc <__adddf3+0x440>
 4019cd4:	00800804 	movi	r2,32
 4019cd8:	10c5c83a 	sub	r2,r2,r3
 4019cdc:	488a983a 	sll	r5,r9,r2
 4019ce0:	30c8d83a 	srl	r4,r6,r3
 4019ce4:	3084983a 	sll	r2,r6,r2
 4019ce8:	48c6d83a 	srl	r3,r9,r3
 4019cec:	290cb03a 	or	r6,r5,r4
 4019cf0:	1004c03a 	cmpne	r2,r2,zero
 4019cf4:	308cb03a 	or	r6,r6,r2
 4019cf8:	898dc83a 	sub	r6,r17,r6
 4019cfc:	89a3803a 	cmpltu	r17,r17,r6
 4019d00:	40d1c83a 	sub	r8,r8,r3
 4019d04:	4451c83a 	sub	r8,r8,r17
 4019d08:	3023883a 	mov	r17,r6
 4019d0c:	4080202c 	andhi	r2,r8,128
 4019d10:	10002326 	beq	r2,zero,4019da0 <__adddf3+0x204>
 4019d14:	04c02034 	movhi	r19,128
 4019d18:	9cffffc4 	addi	r19,r19,-1
 4019d1c:	44e6703a 	and	r19,r8,r19
 4019d20:	98007626 	beq	r19,zero,4019efc <__adddf3+0x360>
 4019d24:	9809883a 	mov	r4,r19
 4019d28:	401c1a00 	call	401c1a0 <__clzsi2>
 4019d2c:	10fffe04 	addi	r3,r2,-8
 4019d30:	010007c4 	movi	r4,31
 4019d34:	20c07716 	blt	r4,r3,4019f14 <__adddf3+0x378>
 4019d38:	00800804 	movi	r2,32
 4019d3c:	10c5c83a 	sub	r2,r2,r3
 4019d40:	8884d83a 	srl	r2,r17,r2
 4019d44:	98d0983a 	sll	r8,r19,r3
 4019d48:	88e2983a 	sll	r17,r17,r3
 4019d4c:	1204b03a 	or	r2,r2,r8
 4019d50:	1c007416 	blt	r3,r16,4019f24 <__adddf3+0x388>
 4019d54:	1c21c83a 	sub	r16,r3,r16
 4019d58:	82000044 	addi	r8,r16,1
 4019d5c:	00c007c4 	movi	r3,31
 4019d60:	1a009116 	blt	r3,r8,4019fa8 <__adddf3+0x40c>
 4019d64:	00c00804 	movi	r3,32
 4019d68:	1a07c83a 	sub	r3,r3,r8
 4019d6c:	8a08d83a 	srl	r4,r17,r8
 4019d70:	88e2983a 	sll	r17,r17,r3
 4019d74:	10c6983a 	sll	r3,r2,r3
 4019d78:	1210d83a 	srl	r8,r2,r8
 4019d7c:	8804c03a 	cmpne	r2,r17,zero
 4019d80:	1906b03a 	or	r3,r3,r4
 4019d84:	18a2b03a 	or	r17,r3,r2
 4019d88:	0021883a 	mov	r16,zero
 4019d8c:	003fa206 	br	4019c18 <__alt_data_end+0xfc019c18>
 4019d90:	1890b03a 	or	r8,r3,r2
 4019d94:	40017d26 	beq	r8,zero,401a38c <__adddf3+0x7f0>
 4019d98:	1011883a 	mov	r8,r2
 4019d9c:	1823883a 	mov	r17,r3
 4019da0:	888001cc 	andi	r2,r17,7
 4019da4:	103f9e1e 	bne	r2,zero,4019c20 <__alt_data_end+0xfc019c20>
 4019da8:	4004977a 	slli	r2,r8,29
 4019dac:	8822d0fa 	srli	r17,r17,3
 4019db0:	4010d0fa 	srli	r8,r8,3
 4019db4:	9007883a 	mov	r3,r18
 4019db8:	1444b03a 	or	r2,r2,r17
 4019dbc:	0101ffc4 	movi	r4,2047
 4019dc0:	81002426 	beq	r16,r4,4019e54 <__adddf3+0x2b8>
 4019dc4:	8120703a 	and	r16,r16,r4
 4019dc8:	01000434 	movhi	r4,16
 4019dcc:	213fffc4 	addi	r4,r4,-1
 4019dd0:	4110703a 	and	r8,r8,r4
 4019dd4:	003fa806 	br	4019c78 <__alt_data_end+0xfc019c78>
 4019dd8:	8089c83a 	sub	r4,r16,r2
 4019ddc:	01005e0e 	bge	zero,r4,4019f58 <__adddf3+0x3bc>
 4019de0:	10002b26 	beq	r2,zero,4019e90 <__adddf3+0x2f4>
 4019de4:	0081ffc4 	movi	r2,2047
 4019de8:	80bf8b26 	beq	r16,r2,4019c18 <__alt_data_end+0xfc019c18>
 4019dec:	4a402034 	orhi	r9,r9,128
 4019df0:	00800e04 	movi	r2,56
 4019df4:	1100a40e 	bge	r2,r4,401a088 <__adddf3+0x4ec>
 4019df8:	498cb03a 	or	r6,r9,r6
 4019dfc:	300ac03a 	cmpne	r5,r6,zero
 4019e00:	0013883a 	mov	r9,zero
 4019e04:	2c4b883a 	add	r5,r5,r17
 4019e08:	2c63803a 	cmpltu	r17,r5,r17
 4019e0c:	4a11883a 	add	r8,r9,r8
 4019e10:	8a11883a 	add	r8,r17,r8
 4019e14:	2823883a 	mov	r17,r5
 4019e18:	4080202c 	andhi	r2,r8,128
 4019e1c:	103fe026 	beq	r2,zero,4019da0 <__alt_data_end+0xfc019da0>
 4019e20:	84000044 	addi	r16,r16,1
 4019e24:	0081ffc4 	movi	r2,2047
 4019e28:	8080d226 	beq	r16,r2,401a174 <__adddf3+0x5d8>
 4019e2c:	00bfe034 	movhi	r2,65408
 4019e30:	10bfffc4 	addi	r2,r2,-1
 4019e34:	4090703a 	and	r8,r8,r2
 4019e38:	880ad07a 	srli	r5,r17,1
 4019e3c:	400897fa 	slli	r4,r8,31
 4019e40:	88c0004c 	andi	r3,r17,1
 4019e44:	28e2b03a 	or	r17,r5,r3
 4019e48:	4010d07a 	srli	r8,r8,1
 4019e4c:	2462b03a 	or	r17,r4,r17
 4019e50:	003f7106 	br	4019c18 <__alt_data_end+0xfc019c18>
 4019e54:	4088b03a 	or	r4,r8,r2
 4019e58:	20014526 	beq	r4,zero,401a370 <__adddf3+0x7d4>
 4019e5c:	01000434 	movhi	r4,16
 4019e60:	42000234 	orhi	r8,r8,8
 4019e64:	213fffc4 	addi	r4,r4,-1
 4019e68:	4110703a 	and	r8,r8,r4
 4019e6c:	003f8206 	br	4019c78 <__alt_data_end+0xfc019c78>
 4019e70:	18ffffc4 	addi	r3,r3,-1
 4019e74:	1800491e 	bne	r3,zero,4019f9c <__adddf3+0x400>
 4019e78:	898bc83a 	sub	r5,r17,r6
 4019e7c:	8963803a 	cmpltu	r17,r17,r5
 4019e80:	4251c83a 	sub	r8,r8,r9
 4019e84:	4451c83a 	sub	r8,r8,r17
 4019e88:	2823883a 	mov	r17,r5
 4019e8c:	003f9f06 	br	4019d0c <__alt_data_end+0xfc019d0c>
 4019e90:	4984b03a 	or	r2,r9,r6
 4019e94:	103f6026 	beq	r2,zero,4019c18 <__alt_data_end+0xfc019c18>
 4019e98:	213fffc4 	addi	r4,r4,-1
 4019e9c:	2000931e 	bne	r4,zero,401a0ec <__adddf3+0x550>
 4019ea0:	898d883a 	add	r6,r17,r6
 4019ea4:	3463803a 	cmpltu	r17,r6,r17
 4019ea8:	4251883a 	add	r8,r8,r9
 4019eac:	8a11883a 	add	r8,r17,r8
 4019eb0:	3023883a 	mov	r17,r6
 4019eb4:	003fd806 	br	4019e18 <__alt_data_end+0xfc019e18>
 4019eb8:	1800541e 	bne	r3,zero,401a00c <__adddf3+0x470>
 4019ebc:	80800044 	addi	r2,r16,1
 4019ec0:	1081ffcc 	andi	r2,r2,2047
 4019ec4:	00c00044 	movi	r3,1
 4019ec8:	1880a00e 	bge	r3,r2,401a14c <__adddf3+0x5b0>
 4019ecc:	8989c83a 	sub	r4,r17,r6
 4019ed0:	8905803a 	cmpltu	r2,r17,r4
 4019ed4:	4267c83a 	sub	r19,r8,r9
 4019ed8:	98a7c83a 	sub	r19,r19,r2
 4019edc:	9880202c 	andhi	r2,r19,128
 4019ee0:	10006326 	beq	r2,zero,401a070 <__adddf3+0x4d4>
 4019ee4:	3463c83a 	sub	r17,r6,r17
 4019ee8:	4a07c83a 	sub	r3,r9,r8
 4019eec:	344d803a 	cmpltu	r6,r6,r17
 4019ef0:	19a7c83a 	sub	r19,r3,r6
 4019ef4:	3825883a 	mov	r18,r7
 4019ef8:	983f8a1e 	bne	r19,zero,4019d24 <__alt_data_end+0xfc019d24>
 4019efc:	8809883a 	mov	r4,r17
 4019f00:	401c1a00 	call	401c1a0 <__clzsi2>
 4019f04:	10800804 	addi	r2,r2,32
 4019f08:	10fffe04 	addi	r3,r2,-8
 4019f0c:	010007c4 	movi	r4,31
 4019f10:	20ff890e 	bge	r4,r3,4019d38 <__alt_data_end+0xfc019d38>
 4019f14:	10bff604 	addi	r2,r2,-40
 4019f18:	8884983a 	sll	r2,r17,r2
 4019f1c:	0023883a 	mov	r17,zero
 4019f20:	1c3f8c0e 	bge	r3,r16,4019d54 <__alt_data_end+0xfc019d54>
 4019f24:	023fe034 	movhi	r8,65408
 4019f28:	423fffc4 	addi	r8,r8,-1
 4019f2c:	80e1c83a 	sub	r16,r16,r3
 4019f30:	1210703a 	and	r8,r2,r8
 4019f34:	003f3806 	br	4019c18 <__alt_data_end+0xfc019c18>
 4019f38:	9007883a 	mov	r3,r18
 4019f3c:	0011883a 	mov	r8,zero
 4019f40:	0005883a 	mov	r2,zero
 4019f44:	003f4c06 	br	4019c78 <__alt_data_end+0xfc019c78>
 4019f48:	498cb03a 	or	r6,r9,r6
 4019f4c:	300cc03a 	cmpne	r6,r6,zero
 4019f50:	0007883a 	mov	r3,zero
 4019f54:	003f6806 	br	4019cf8 <__alt_data_end+0xfc019cf8>
 4019f58:	20009c1e 	bne	r4,zero,401a1cc <__adddf3+0x630>
 4019f5c:	80800044 	addi	r2,r16,1
 4019f60:	1141ffcc 	andi	r5,r2,2047
 4019f64:	01000044 	movi	r4,1
 4019f68:	2140670e 	bge	r4,r5,401a108 <__adddf3+0x56c>
 4019f6c:	0101ffc4 	movi	r4,2047
 4019f70:	11007f26 	beq	r2,r4,401a170 <__adddf3+0x5d4>
 4019f74:	898d883a 	add	r6,r17,r6
 4019f78:	4247883a 	add	r3,r8,r9
 4019f7c:	3451803a 	cmpltu	r8,r6,r17
 4019f80:	40d1883a 	add	r8,r8,r3
 4019f84:	402297fa 	slli	r17,r8,31
 4019f88:	300cd07a 	srli	r6,r6,1
 4019f8c:	4010d07a 	srli	r8,r8,1
 4019f90:	1021883a 	mov	r16,r2
 4019f94:	89a2b03a 	or	r17,r17,r6
 4019f98:	003f1f06 	br	4019c18 <__alt_data_end+0xfc019c18>
 4019f9c:	0081ffc4 	movi	r2,2047
 4019fa0:	80bf481e 	bne	r16,r2,4019cc4 <__alt_data_end+0xfc019cc4>
 4019fa4:	003f1c06 	br	4019c18 <__alt_data_end+0xfc019c18>
 4019fa8:	843ff844 	addi	r16,r16,-31
 4019fac:	01000804 	movi	r4,32
 4019fb0:	1406d83a 	srl	r3,r2,r16
 4019fb4:	41005026 	beq	r8,r4,401a0f8 <__adddf3+0x55c>
 4019fb8:	01001004 	movi	r4,64
 4019fbc:	2211c83a 	sub	r8,r4,r8
 4019fc0:	1204983a 	sll	r2,r2,r8
 4019fc4:	88a2b03a 	or	r17,r17,r2
 4019fc8:	8822c03a 	cmpne	r17,r17,zero
 4019fcc:	1c62b03a 	or	r17,r3,r17
 4019fd0:	0011883a 	mov	r8,zero
 4019fd4:	0021883a 	mov	r16,zero
 4019fd8:	003f7106 	br	4019da0 <__alt_data_end+0xfc019da0>
 4019fdc:	193ff804 	addi	r4,r3,-32
 4019fe0:	00800804 	movi	r2,32
 4019fe4:	4908d83a 	srl	r4,r9,r4
 4019fe8:	18804526 	beq	r3,r2,401a100 <__adddf3+0x564>
 4019fec:	00801004 	movi	r2,64
 4019ff0:	10c5c83a 	sub	r2,r2,r3
 4019ff4:	4886983a 	sll	r3,r9,r2
 4019ff8:	198cb03a 	or	r6,r3,r6
 4019ffc:	300cc03a 	cmpne	r6,r6,zero
 401a000:	218cb03a 	or	r6,r4,r6
 401a004:	0007883a 	mov	r3,zero
 401a008:	003f3b06 	br	4019cf8 <__alt_data_end+0xfc019cf8>
 401a00c:	80002a26 	beq	r16,zero,401a0b8 <__adddf3+0x51c>
 401a010:	0101ffc4 	movi	r4,2047
 401a014:	11006826 	beq	r2,r4,401a1b8 <__adddf3+0x61c>
 401a018:	00c7c83a 	sub	r3,zero,r3
 401a01c:	42002034 	orhi	r8,r8,128
 401a020:	01000e04 	movi	r4,56
 401a024:	20c07c16 	blt	r4,r3,401a218 <__adddf3+0x67c>
 401a028:	010007c4 	movi	r4,31
 401a02c:	20c0da16 	blt	r4,r3,401a398 <__adddf3+0x7fc>
 401a030:	01000804 	movi	r4,32
 401a034:	20c9c83a 	sub	r4,r4,r3
 401a038:	4114983a 	sll	r10,r8,r4
 401a03c:	88cad83a 	srl	r5,r17,r3
 401a040:	8908983a 	sll	r4,r17,r4
 401a044:	40c6d83a 	srl	r3,r8,r3
 401a048:	5162b03a 	or	r17,r10,r5
 401a04c:	2008c03a 	cmpne	r4,r4,zero
 401a050:	8922b03a 	or	r17,r17,r4
 401a054:	3463c83a 	sub	r17,r6,r17
 401a058:	48c7c83a 	sub	r3,r9,r3
 401a05c:	344d803a 	cmpltu	r6,r6,r17
 401a060:	1991c83a 	sub	r8,r3,r6
 401a064:	1021883a 	mov	r16,r2
 401a068:	3825883a 	mov	r18,r7
 401a06c:	003f2706 	br	4019d0c <__alt_data_end+0xfc019d0c>
 401a070:	24d0b03a 	or	r8,r4,r19
 401a074:	40001b1e 	bne	r8,zero,401a0e4 <__adddf3+0x548>
 401a078:	0005883a 	mov	r2,zero
 401a07c:	0007883a 	mov	r3,zero
 401a080:	0021883a 	mov	r16,zero
 401a084:	003f4d06 	br	4019dbc <__alt_data_end+0xfc019dbc>
 401a088:	008007c4 	movi	r2,31
 401a08c:	11003c16 	blt	r2,r4,401a180 <__adddf3+0x5e4>
 401a090:	00800804 	movi	r2,32
 401a094:	1105c83a 	sub	r2,r2,r4
 401a098:	488e983a 	sll	r7,r9,r2
 401a09c:	310ad83a 	srl	r5,r6,r4
 401a0a0:	3084983a 	sll	r2,r6,r2
 401a0a4:	4912d83a 	srl	r9,r9,r4
 401a0a8:	394ab03a 	or	r5,r7,r5
 401a0ac:	1004c03a 	cmpne	r2,r2,zero
 401a0b0:	288ab03a 	or	r5,r5,r2
 401a0b4:	003f5306 	br	4019e04 <__alt_data_end+0xfc019e04>
 401a0b8:	4448b03a 	or	r4,r8,r17
 401a0bc:	20003e26 	beq	r4,zero,401a1b8 <__adddf3+0x61c>
 401a0c0:	00c6303a 	nor	r3,zero,r3
 401a0c4:	18003a1e 	bne	r3,zero,401a1b0 <__adddf3+0x614>
 401a0c8:	3463c83a 	sub	r17,r6,r17
 401a0cc:	4a07c83a 	sub	r3,r9,r8
 401a0d0:	344d803a 	cmpltu	r6,r6,r17
 401a0d4:	1991c83a 	sub	r8,r3,r6
 401a0d8:	1021883a 	mov	r16,r2
 401a0dc:	3825883a 	mov	r18,r7
 401a0e0:	003f0a06 	br	4019d0c <__alt_data_end+0xfc019d0c>
 401a0e4:	2023883a 	mov	r17,r4
 401a0e8:	003f0d06 	br	4019d20 <__alt_data_end+0xfc019d20>
 401a0ec:	0081ffc4 	movi	r2,2047
 401a0f0:	80bf3f1e 	bne	r16,r2,4019df0 <__alt_data_end+0xfc019df0>
 401a0f4:	003ec806 	br	4019c18 <__alt_data_end+0xfc019c18>
 401a0f8:	0005883a 	mov	r2,zero
 401a0fc:	003fb106 	br	4019fc4 <__alt_data_end+0xfc019fc4>
 401a100:	0007883a 	mov	r3,zero
 401a104:	003fbc06 	br	4019ff8 <__alt_data_end+0xfc019ff8>
 401a108:	4444b03a 	or	r2,r8,r17
 401a10c:	8000871e 	bne	r16,zero,401a32c <__adddf3+0x790>
 401a110:	1000ba26 	beq	r2,zero,401a3fc <__adddf3+0x860>
 401a114:	4984b03a 	or	r2,r9,r6
 401a118:	103ebf26 	beq	r2,zero,4019c18 <__alt_data_end+0xfc019c18>
 401a11c:	8985883a 	add	r2,r17,r6
 401a120:	4247883a 	add	r3,r8,r9
 401a124:	1451803a 	cmpltu	r8,r2,r17
 401a128:	40d1883a 	add	r8,r8,r3
 401a12c:	40c0202c 	andhi	r3,r8,128
 401a130:	1023883a 	mov	r17,r2
 401a134:	183f1a26 	beq	r3,zero,4019da0 <__alt_data_end+0xfc019da0>
 401a138:	00bfe034 	movhi	r2,65408
 401a13c:	10bfffc4 	addi	r2,r2,-1
 401a140:	2021883a 	mov	r16,r4
 401a144:	4090703a 	and	r8,r8,r2
 401a148:	003eb306 	br	4019c18 <__alt_data_end+0xfc019c18>
 401a14c:	4444b03a 	or	r2,r8,r17
 401a150:	8000291e 	bne	r16,zero,401a1f8 <__adddf3+0x65c>
 401a154:	10004b1e 	bne	r2,zero,401a284 <__adddf3+0x6e8>
 401a158:	4990b03a 	or	r8,r9,r6
 401a15c:	40008b26 	beq	r8,zero,401a38c <__adddf3+0x7f0>
 401a160:	4811883a 	mov	r8,r9
 401a164:	3023883a 	mov	r17,r6
 401a168:	3825883a 	mov	r18,r7
 401a16c:	003eaa06 	br	4019c18 <__alt_data_end+0xfc019c18>
 401a170:	1021883a 	mov	r16,r2
 401a174:	0011883a 	mov	r8,zero
 401a178:	0005883a 	mov	r2,zero
 401a17c:	003f0f06 	br	4019dbc <__alt_data_end+0xfc019dbc>
 401a180:	217ff804 	addi	r5,r4,-32
 401a184:	00800804 	movi	r2,32
 401a188:	494ad83a 	srl	r5,r9,r5
 401a18c:	20807d26 	beq	r4,r2,401a384 <__adddf3+0x7e8>
 401a190:	00801004 	movi	r2,64
 401a194:	1109c83a 	sub	r4,r2,r4
 401a198:	4912983a 	sll	r9,r9,r4
 401a19c:	498cb03a 	or	r6,r9,r6
 401a1a0:	300cc03a 	cmpne	r6,r6,zero
 401a1a4:	298ab03a 	or	r5,r5,r6
 401a1a8:	0013883a 	mov	r9,zero
 401a1ac:	003f1506 	br	4019e04 <__alt_data_end+0xfc019e04>
 401a1b0:	0101ffc4 	movi	r4,2047
 401a1b4:	113f9a1e 	bne	r2,r4,401a020 <__alt_data_end+0xfc01a020>
 401a1b8:	4811883a 	mov	r8,r9
 401a1bc:	3023883a 	mov	r17,r6
 401a1c0:	1021883a 	mov	r16,r2
 401a1c4:	3825883a 	mov	r18,r7
 401a1c8:	003e9306 	br	4019c18 <__alt_data_end+0xfc019c18>
 401a1cc:	8000161e 	bne	r16,zero,401a228 <__adddf3+0x68c>
 401a1d0:	444ab03a 	or	r5,r8,r17
 401a1d4:	28005126 	beq	r5,zero,401a31c <__adddf3+0x780>
 401a1d8:	0108303a 	nor	r4,zero,r4
 401a1dc:	20004d1e 	bne	r4,zero,401a314 <__adddf3+0x778>
 401a1e0:	89a3883a 	add	r17,r17,r6
 401a1e4:	4253883a 	add	r9,r8,r9
 401a1e8:	898d803a 	cmpltu	r6,r17,r6
 401a1ec:	3251883a 	add	r8,r6,r9
 401a1f0:	1021883a 	mov	r16,r2
 401a1f4:	003f0806 	br	4019e18 <__alt_data_end+0xfc019e18>
 401a1f8:	1000301e 	bne	r2,zero,401a2bc <__adddf3+0x720>
 401a1fc:	4984b03a 	or	r2,r9,r6
 401a200:	10007126 	beq	r2,zero,401a3c8 <__adddf3+0x82c>
 401a204:	4811883a 	mov	r8,r9
 401a208:	3023883a 	mov	r17,r6
 401a20c:	3825883a 	mov	r18,r7
 401a210:	0401ffc4 	movi	r16,2047
 401a214:	003e8006 	br	4019c18 <__alt_data_end+0xfc019c18>
 401a218:	4462b03a 	or	r17,r8,r17
 401a21c:	8822c03a 	cmpne	r17,r17,zero
 401a220:	0007883a 	mov	r3,zero
 401a224:	003f8b06 	br	401a054 <__alt_data_end+0xfc01a054>
 401a228:	0141ffc4 	movi	r5,2047
 401a22c:	11403b26 	beq	r2,r5,401a31c <__adddf3+0x780>
 401a230:	0109c83a 	sub	r4,zero,r4
 401a234:	42002034 	orhi	r8,r8,128
 401a238:	01400e04 	movi	r5,56
 401a23c:	29006716 	blt	r5,r4,401a3dc <__adddf3+0x840>
 401a240:	014007c4 	movi	r5,31
 401a244:	29007016 	blt	r5,r4,401a408 <__adddf3+0x86c>
 401a248:	01400804 	movi	r5,32
 401a24c:	290bc83a 	sub	r5,r5,r4
 401a250:	4154983a 	sll	r10,r8,r5
 401a254:	890ed83a 	srl	r7,r17,r4
 401a258:	894a983a 	sll	r5,r17,r5
 401a25c:	4108d83a 	srl	r4,r8,r4
 401a260:	51e2b03a 	or	r17,r10,r7
 401a264:	280ac03a 	cmpne	r5,r5,zero
 401a268:	8962b03a 	or	r17,r17,r5
 401a26c:	89a3883a 	add	r17,r17,r6
 401a270:	2253883a 	add	r9,r4,r9
 401a274:	898d803a 	cmpltu	r6,r17,r6
 401a278:	3251883a 	add	r8,r6,r9
 401a27c:	1021883a 	mov	r16,r2
 401a280:	003ee506 	br	4019e18 <__alt_data_end+0xfc019e18>
 401a284:	4984b03a 	or	r2,r9,r6
 401a288:	103e6326 	beq	r2,zero,4019c18 <__alt_data_end+0xfc019c18>
 401a28c:	8987c83a 	sub	r3,r17,r6
 401a290:	88c9803a 	cmpltu	r4,r17,r3
 401a294:	4245c83a 	sub	r2,r8,r9
 401a298:	1105c83a 	sub	r2,r2,r4
 401a29c:	1100202c 	andhi	r4,r2,128
 401a2a0:	203ebb26 	beq	r4,zero,4019d90 <__alt_data_end+0xfc019d90>
 401a2a4:	3463c83a 	sub	r17,r6,r17
 401a2a8:	4a07c83a 	sub	r3,r9,r8
 401a2ac:	344d803a 	cmpltu	r6,r6,r17
 401a2b0:	1991c83a 	sub	r8,r3,r6
 401a2b4:	3825883a 	mov	r18,r7
 401a2b8:	003e5706 	br	4019c18 <__alt_data_end+0xfc019c18>
 401a2bc:	4984b03a 	or	r2,r9,r6
 401a2c0:	10002e26 	beq	r2,zero,401a37c <__adddf3+0x7e0>
 401a2c4:	4004d0fa 	srli	r2,r8,3
 401a2c8:	8822d0fa 	srli	r17,r17,3
 401a2cc:	4010977a 	slli	r8,r8,29
 401a2d0:	10c0022c 	andhi	r3,r2,8
 401a2d4:	4462b03a 	or	r17,r8,r17
 401a2d8:	18000826 	beq	r3,zero,401a2fc <__adddf3+0x760>
 401a2dc:	4808d0fa 	srli	r4,r9,3
 401a2e0:	20c0022c 	andhi	r3,r4,8
 401a2e4:	1800051e 	bne	r3,zero,401a2fc <__adddf3+0x760>
 401a2e8:	300cd0fa 	srli	r6,r6,3
 401a2ec:	4806977a 	slli	r3,r9,29
 401a2f0:	2005883a 	mov	r2,r4
 401a2f4:	3825883a 	mov	r18,r7
 401a2f8:	19a2b03a 	or	r17,r3,r6
 401a2fc:	8810d77a 	srli	r8,r17,29
 401a300:	100490fa 	slli	r2,r2,3
 401a304:	882290fa 	slli	r17,r17,3
 401a308:	0401ffc4 	movi	r16,2047
 401a30c:	4090b03a 	or	r8,r8,r2
 401a310:	003e4106 	br	4019c18 <__alt_data_end+0xfc019c18>
 401a314:	0141ffc4 	movi	r5,2047
 401a318:	117fc71e 	bne	r2,r5,401a238 <__alt_data_end+0xfc01a238>
 401a31c:	4811883a 	mov	r8,r9
 401a320:	3023883a 	mov	r17,r6
 401a324:	1021883a 	mov	r16,r2
 401a328:	003e3b06 	br	4019c18 <__alt_data_end+0xfc019c18>
 401a32c:	10002f26 	beq	r2,zero,401a3ec <__adddf3+0x850>
 401a330:	4984b03a 	or	r2,r9,r6
 401a334:	10001126 	beq	r2,zero,401a37c <__adddf3+0x7e0>
 401a338:	4004d0fa 	srli	r2,r8,3
 401a33c:	8822d0fa 	srli	r17,r17,3
 401a340:	4010977a 	slli	r8,r8,29
 401a344:	10c0022c 	andhi	r3,r2,8
 401a348:	4462b03a 	or	r17,r8,r17
 401a34c:	183feb26 	beq	r3,zero,401a2fc <__alt_data_end+0xfc01a2fc>
 401a350:	4808d0fa 	srli	r4,r9,3
 401a354:	20c0022c 	andhi	r3,r4,8
 401a358:	183fe81e 	bne	r3,zero,401a2fc <__alt_data_end+0xfc01a2fc>
 401a35c:	300cd0fa 	srli	r6,r6,3
 401a360:	4806977a 	slli	r3,r9,29
 401a364:	2005883a 	mov	r2,r4
 401a368:	19a2b03a 	or	r17,r3,r6
 401a36c:	003fe306 	br	401a2fc <__alt_data_end+0xfc01a2fc>
 401a370:	0011883a 	mov	r8,zero
 401a374:	0005883a 	mov	r2,zero
 401a378:	003e3f06 	br	4019c78 <__alt_data_end+0xfc019c78>
 401a37c:	0401ffc4 	movi	r16,2047
 401a380:	003e2506 	br	4019c18 <__alt_data_end+0xfc019c18>
 401a384:	0013883a 	mov	r9,zero
 401a388:	003f8406 	br	401a19c <__alt_data_end+0xfc01a19c>
 401a38c:	0005883a 	mov	r2,zero
 401a390:	0007883a 	mov	r3,zero
 401a394:	003e8906 	br	4019dbc <__alt_data_end+0xfc019dbc>
 401a398:	197ff804 	addi	r5,r3,-32
 401a39c:	01000804 	movi	r4,32
 401a3a0:	414ad83a 	srl	r5,r8,r5
 401a3a4:	19002426 	beq	r3,r4,401a438 <__adddf3+0x89c>
 401a3a8:	01001004 	movi	r4,64
 401a3ac:	20c7c83a 	sub	r3,r4,r3
 401a3b0:	40c6983a 	sll	r3,r8,r3
 401a3b4:	1c46b03a 	or	r3,r3,r17
 401a3b8:	1806c03a 	cmpne	r3,r3,zero
 401a3bc:	28e2b03a 	or	r17,r5,r3
 401a3c0:	0007883a 	mov	r3,zero
 401a3c4:	003f2306 	br	401a054 <__alt_data_end+0xfc01a054>
 401a3c8:	0007883a 	mov	r3,zero
 401a3cc:	5811883a 	mov	r8,r11
 401a3d0:	00bfffc4 	movi	r2,-1
 401a3d4:	0401ffc4 	movi	r16,2047
 401a3d8:	003e7806 	br	4019dbc <__alt_data_end+0xfc019dbc>
 401a3dc:	4462b03a 	or	r17,r8,r17
 401a3e0:	8822c03a 	cmpne	r17,r17,zero
 401a3e4:	0009883a 	mov	r4,zero
 401a3e8:	003fa006 	br	401a26c <__alt_data_end+0xfc01a26c>
 401a3ec:	4811883a 	mov	r8,r9
 401a3f0:	3023883a 	mov	r17,r6
 401a3f4:	0401ffc4 	movi	r16,2047
 401a3f8:	003e0706 	br	4019c18 <__alt_data_end+0xfc019c18>
 401a3fc:	4811883a 	mov	r8,r9
 401a400:	3023883a 	mov	r17,r6
 401a404:	003e0406 	br	4019c18 <__alt_data_end+0xfc019c18>
 401a408:	21fff804 	addi	r7,r4,-32
 401a40c:	01400804 	movi	r5,32
 401a410:	41ced83a 	srl	r7,r8,r7
 401a414:	21400a26 	beq	r4,r5,401a440 <__adddf3+0x8a4>
 401a418:	01401004 	movi	r5,64
 401a41c:	2909c83a 	sub	r4,r5,r4
 401a420:	4108983a 	sll	r4,r8,r4
 401a424:	2448b03a 	or	r4,r4,r17
 401a428:	2008c03a 	cmpne	r4,r4,zero
 401a42c:	3922b03a 	or	r17,r7,r4
 401a430:	0009883a 	mov	r4,zero
 401a434:	003f8d06 	br	401a26c <__alt_data_end+0xfc01a26c>
 401a438:	0007883a 	mov	r3,zero
 401a43c:	003fdd06 	br	401a3b4 <__alt_data_end+0xfc01a3b4>
 401a440:	0009883a 	mov	r4,zero
 401a444:	003ff706 	br	401a424 <__alt_data_end+0xfc01a424>

0401a448 <__divdf3>:
 401a448:	defff204 	addi	sp,sp,-56
 401a44c:	dd400915 	stw	r21,36(sp)
 401a450:	282ad53a 	srli	r21,r5,20
 401a454:	dd000815 	stw	r20,32(sp)
 401a458:	2828d7fa 	srli	r20,r5,31
 401a45c:	dc000415 	stw	r16,16(sp)
 401a460:	04000434 	movhi	r16,16
 401a464:	df000c15 	stw	fp,48(sp)
 401a468:	843fffc4 	addi	r16,r16,-1
 401a46c:	dfc00d15 	stw	ra,52(sp)
 401a470:	ddc00b15 	stw	r23,44(sp)
 401a474:	dd800a15 	stw	r22,40(sp)
 401a478:	dcc00715 	stw	r19,28(sp)
 401a47c:	dc800615 	stw	r18,24(sp)
 401a480:	dc400515 	stw	r17,20(sp)
 401a484:	ad41ffcc 	andi	r21,r21,2047
 401a488:	2c20703a 	and	r16,r5,r16
 401a48c:	a7003fcc 	andi	fp,r20,255
 401a490:	a8006126 	beq	r21,zero,401a618 <__divdf3+0x1d0>
 401a494:	0081ffc4 	movi	r2,2047
 401a498:	2025883a 	mov	r18,r4
 401a49c:	a8803726 	beq	r21,r2,401a57c <__divdf3+0x134>
 401a4a0:	80800434 	orhi	r2,r16,16
 401a4a4:	100490fa 	slli	r2,r2,3
 401a4a8:	2020d77a 	srli	r16,r4,29
 401a4ac:	202490fa 	slli	r18,r4,3
 401a4b0:	ad7f0044 	addi	r21,r21,-1023
 401a4b4:	80a0b03a 	or	r16,r16,r2
 401a4b8:	0027883a 	mov	r19,zero
 401a4bc:	0013883a 	mov	r9,zero
 401a4c0:	3804d53a 	srli	r2,r7,20
 401a4c4:	382cd7fa 	srli	r22,r7,31
 401a4c8:	04400434 	movhi	r17,16
 401a4cc:	8c7fffc4 	addi	r17,r17,-1
 401a4d0:	1081ffcc 	andi	r2,r2,2047
 401a4d4:	3011883a 	mov	r8,r6
 401a4d8:	3c62703a 	and	r17,r7,r17
 401a4dc:	b5c03fcc 	andi	r23,r22,255
 401a4e0:	10006c26 	beq	r2,zero,401a694 <__divdf3+0x24c>
 401a4e4:	00c1ffc4 	movi	r3,2047
 401a4e8:	10c06426 	beq	r2,r3,401a67c <__divdf3+0x234>
 401a4ec:	88c00434 	orhi	r3,r17,16
 401a4f0:	180690fa 	slli	r3,r3,3
 401a4f4:	3022d77a 	srli	r17,r6,29
 401a4f8:	301090fa 	slli	r8,r6,3
 401a4fc:	10bf0044 	addi	r2,r2,-1023
 401a500:	88e2b03a 	or	r17,r17,r3
 401a504:	000f883a 	mov	r7,zero
 401a508:	a58cf03a 	xor	r6,r20,r22
 401a50c:	3cc8b03a 	or	r4,r7,r19
 401a510:	a8abc83a 	sub	r21,r21,r2
 401a514:	008003c4 	movi	r2,15
 401a518:	3007883a 	mov	r3,r6
 401a51c:	34c03fcc 	andi	r19,r6,255
 401a520:	11009036 	bltu	r2,r4,401a764 <__divdf3+0x31c>
 401a524:	200890ba 	slli	r4,r4,2
 401a528:	008100b4 	movhi	r2,1026
 401a52c:	10a94f04 	addi	r2,r2,-23236
 401a530:	2089883a 	add	r4,r4,r2
 401a534:	20800017 	ldw	r2,0(r4)
 401a538:	1000683a 	jmp	r2
 401a53c:	0401a764 	muli	r16,zero,1693
 401a540:	0401a5b4 	movhi	r16,1686
 401a544:	0401a754 	movui	r16,1693
 401a548:	0401a5a8 	cmpgeui	r16,zero,1686
 401a54c:	0401a754 	movui	r16,1693
 401a550:	0401a728 	cmpgeui	r16,zero,1692
 401a554:	0401a754 	movui	r16,1693
 401a558:	0401a5a8 	cmpgeui	r16,zero,1686
 401a55c:	0401a5b4 	movhi	r16,1686
 401a560:	0401a5b4 	movhi	r16,1686
 401a564:	0401a728 	cmpgeui	r16,zero,1692
 401a568:	0401a5a8 	cmpgeui	r16,zero,1686
 401a56c:	0401a598 	cmpnei	r16,zero,1686
 401a570:	0401a598 	cmpnei	r16,zero,1686
 401a574:	0401a598 	cmpnei	r16,zero,1686
 401a578:	0401aa48 	cmpgei	r16,zero,1705
 401a57c:	2404b03a 	or	r2,r4,r16
 401a580:	1000661e 	bne	r2,zero,401a71c <__divdf3+0x2d4>
 401a584:	04c00204 	movi	r19,8
 401a588:	0021883a 	mov	r16,zero
 401a58c:	0025883a 	mov	r18,zero
 401a590:	02400084 	movi	r9,2
 401a594:	003fca06 	br	401a4c0 <__alt_data_end+0xfc01a4c0>
 401a598:	8023883a 	mov	r17,r16
 401a59c:	9011883a 	mov	r8,r18
 401a5a0:	e02f883a 	mov	r23,fp
 401a5a4:	480f883a 	mov	r7,r9
 401a5a8:	00800084 	movi	r2,2
 401a5ac:	3881311e 	bne	r7,r2,401aa74 <__divdf3+0x62c>
 401a5b0:	b827883a 	mov	r19,r23
 401a5b4:	98c0004c 	andi	r3,r19,1
 401a5b8:	0081ffc4 	movi	r2,2047
 401a5bc:	000b883a 	mov	r5,zero
 401a5c0:	0025883a 	mov	r18,zero
 401a5c4:	1004953a 	slli	r2,r2,20
 401a5c8:	18c03fcc 	andi	r3,r3,255
 401a5cc:	04400434 	movhi	r17,16
 401a5d0:	8c7fffc4 	addi	r17,r17,-1
 401a5d4:	180697fa 	slli	r3,r3,31
 401a5d8:	2c4a703a 	and	r5,r5,r17
 401a5dc:	288ab03a 	or	r5,r5,r2
 401a5e0:	28c6b03a 	or	r3,r5,r3
 401a5e4:	9005883a 	mov	r2,r18
 401a5e8:	dfc00d17 	ldw	ra,52(sp)
 401a5ec:	df000c17 	ldw	fp,48(sp)
 401a5f0:	ddc00b17 	ldw	r23,44(sp)
 401a5f4:	dd800a17 	ldw	r22,40(sp)
 401a5f8:	dd400917 	ldw	r21,36(sp)
 401a5fc:	dd000817 	ldw	r20,32(sp)
 401a600:	dcc00717 	ldw	r19,28(sp)
 401a604:	dc800617 	ldw	r18,24(sp)
 401a608:	dc400517 	ldw	r17,20(sp)
 401a60c:	dc000417 	ldw	r16,16(sp)
 401a610:	dec00e04 	addi	sp,sp,56
 401a614:	f800283a 	ret
 401a618:	2404b03a 	or	r2,r4,r16
 401a61c:	2027883a 	mov	r19,r4
 401a620:	10003926 	beq	r2,zero,401a708 <__divdf3+0x2c0>
 401a624:	80012e26 	beq	r16,zero,401aae0 <__divdf3+0x698>
 401a628:	8009883a 	mov	r4,r16
 401a62c:	d9800315 	stw	r6,12(sp)
 401a630:	d9c00215 	stw	r7,8(sp)
 401a634:	401c1a00 	call	401c1a0 <__clzsi2>
 401a638:	d9800317 	ldw	r6,12(sp)
 401a63c:	d9c00217 	ldw	r7,8(sp)
 401a640:	113ffd44 	addi	r4,r2,-11
 401a644:	00c00704 	movi	r3,28
 401a648:	19012116 	blt	r3,r4,401aad0 <__divdf3+0x688>
 401a64c:	00c00744 	movi	r3,29
 401a650:	147ffe04 	addi	r17,r2,-8
 401a654:	1907c83a 	sub	r3,r3,r4
 401a658:	8460983a 	sll	r16,r16,r17
 401a65c:	98c6d83a 	srl	r3,r19,r3
 401a660:	9c64983a 	sll	r18,r19,r17
 401a664:	1c20b03a 	or	r16,r3,r16
 401a668:	1080fcc4 	addi	r2,r2,1011
 401a66c:	00abc83a 	sub	r21,zero,r2
 401a670:	0027883a 	mov	r19,zero
 401a674:	0013883a 	mov	r9,zero
 401a678:	003f9106 	br	401a4c0 <__alt_data_end+0xfc01a4c0>
 401a67c:	3446b03a 	or	r3,r6,r17
 401a680:	18001f1e 	bne	r3,zero,401a700 <__divdf3+0x2b8>
 401a684:	0023883a 	mov	r17,zero
 401a688:	0011883a 	mov	r8,zero
 401a68c:	01c00084 	movi	r7,2
 401a690:	003f9d06 	br	401a508 <__alt_data_end+0xfc01a508>
 401a694:	3446b03a 	or	r3,r6,r17
 401a698:	18001526 	beq	r3,zero,401a6f0 <__divdf3+0x2a8>
 401a69c:	88011b26 	beq	r17,zero,401ab0c <__divdf3+0x6c4>
 401a6a0:	8809883a 	mov	r4,r17
 401a6a4:	d9800315 	stw	r6,12(sp)
 401a6a8:	da400115 	stw	r9,4(sp)
 401a6ac:	401c1a00 	call	401c1a0 <__clzsi2>
 401a6b0:	d9800317 	ldw	r6,12(sp)
 401a6b4:	da400117 	ldw	r9,4(sp)
 401a6b8:	113ffd44 	addi	r4,r2,-11
 401a6bc:	00c00704 	movi	r3,28
 401a6c0:	19010e16 	blt	r3,r4,401aafc <__divdf3+0x6b4>
 401a6c4:	00c00744 	movi	r3,29
 401a6c8:	123ffe04 	addi	r8,r2,-8
 401a6cc:	1907c83a 	sub	r3,r3,r4
 401a6d0:	8a22983a 	sll	r17,r17,r8
 401a6d4:	30c6d83a 	srl	r3,r6,r3
 401a6d8:	3210983a 	sll	r8,r6,r8
 401a6dc:	1c62b03a 	or	r17,r3,r17
 401a6e0:	1080fcc4 	addi	r2,r2,1011
 401a6e4:	0085c83a 	sub	r2,zero,r2
 401a6e8:	000f883a 	mov	r7,zero
 401a6ec:	003f8606 	br	401a508 <__alt_data_end+0xfc01a508>
 401a6f0:	0023883a 	mov	r17,zero
 401a6f4:	0011883a 	mov	r8,zero
 401a6f8:	01c00044 	movi	r7,1
 401a6fc:	003f8206 	br	401a508 <__alt_data_end+0xfc01a508>
 401a700:	01c000c4 	movi	r7,3
 401a704:	003f8006 	br	401a508 <__alt_data_end+0xfc01a508>
 401a708:	04c00104 	movi	r19,4
 401a70c:	0021883a 	mov	r16,zero
 401a710:	0025883a 	mov	r18,zero
 401a714:	02400044 	movi	r9,1
 401a718:	003f6906 	br	401a4c0 <__alt_data_end+0xfc01a4c0>
 401a71c:	04c00304 	movi	r19,12
 401a720:	024000c4 	movi	r9,3
 401a724:	003f6606 	br	401a4c0 <__alt_data_end+0xfc01a4c0>
 401a728:	01400434 	movhi	r5,16
 401a72c:	0007883a 	mov	r3,zero
 401a730:	297fffc4 	addi	r5,r5,-1
 401a734:	04bfffc4 	movi	r18,-1
 401a738:	0081ffc4 	movi	r2,2047
 401a73c:	003fa106 	br	401a5c4 <__alt_data_end+0xfc01a5c4>
 401a740:	00c00044 	movi	r3,1
 401a744:	1887c83a 	sub	r3,r3,r2
 401a748:	01000e04 	movi	r4,56
 401a74c:	20c1210e 	bge	r4,r3,401abd4 <__divdf3+0x78c>
 401a750:	98c0004c 	andi	r3,r19,1
 401a754:	0005883a 	mov	r2,zero
 401a758:	000b883a 	mov	r5,zero
 401a75c:	0025883a 	mov	r18,zero
 401a760:	003f9806 	br	401a5c4 <__alt_data_end+0xfc01a5c4>
 401a764:	8c00fd36 	bltu	r17,r16,401ab5c <__divdf3+0x714>
 401a768:	8440fb26 	beq	r16,r17,401ab58 <__divdf3+0x710>
 401a76c:	8007883a 	mov	r3,r16
 401a770:	ad7fffc4 	addi	r21,r21,-1
 401a774:	0021883a 	mov	r16,zero
 401a778:	4004d63a 	srli	r2,r8,24
 401a77c:	8822923a 	slli	r17,r17,8
 401a780:	1809883a 	mov	r4,r3
 401a784:	402c923a 	slli	r22,r8,8
 401a788:	88b8b03a 	or	fp,r17,r2
 401a78c:	e028d43a 	srli	r20,fp,16
 401a790:	d8c00015 	stw	r3,0(sp)
 401a794:	e5ffffcc 	andi	r23,fp,65535
 401a798:	a00b883a 	mov	r5,r20
 401a79c:	400b8780 	call	400b878 <__udivsi3>
 401a7a0:	d8c00017 	ldw	r3,0(sp)
 401a7a4:	a00b883a 	mov	r5,r20
 401a7a8:	d8800315 	stw	r2,12(sp)
 401a7ac:	1809883a 	mov	r4,r3
 401a7b0:	400b8dc0 	call	400b8dc <__umodsi3>
 401a7b4:	d9800317 	ldw	r6,12(sp)
 401a7b8:	1006943a 	slli	r3,r2,16
 401a7bc:	9004d43a 	srli	r2,r18,16
 401a7c0:	b9a3383a 	mul	r17,r23,r6
 401a7c4:	10c4b03a 	or	r2,r2,r3
 401a7c8:	1440062e 	bgeu	r2,r17,401a7e4 <__divdf3+0x39c>
 401a7cc:	1705883a 	add	r2,r2,fp
 401a7d0:	30ffffc4 	addi	r3,r6,-1
 401a7d4:	1700ee36 	bltu	r2,fp,401ab90 <__divdf3+0x748>
 401a7d8:	1440ed2e 	bgeu	r2,r17,401ab90 <__divdf3+0x748>
 401a7dc:	31bfff84 	addi	r6,r6,-2
 401a7e0:	1705883a 	add	r2,r2,fp
 401a7e4:	1463c83a 	sub	r17,r2,r17
 401a7e8:	a00b883a 	mov	r5,r20
 401a7ec:	8809883a 	mov	r4,r17
 401a7f0:	d9800315 	stw	r6,12(sp)
 401a7f4:	400b8780 	call	400b878 <__udivsi3>
 401a7f8:	a00b883a 	mov	r5,r20
 401a7fc:	8809883a 	mov	r4,r17
 401a800:	d8800215 	stw	r2,8(sp)
 401a804:	400b8dc0 	call	400b8dc <__umodsi3>
 401a808:	d9c00217 	ldw	r7,8(sp)
 401a80c:	1004943a 	slli	r2,r2,16
 401a810:	94bfffcc 	andi	r18,r18,65535
 401a814:	b9d1383a 	mul	r8,r23,r7
 401a818:	90a4b03a 	or	r18,r18,r2
 401a81c:	d9800317 	ldw	r6,12(sp)
 401a820:	9200062e 	bgeu	r18,r8,401a83c <__divdf3+0x3f4>
 401a824:	9725883a 	add	r18,r18,fp
 401a828:	38bfffc4 	addi	r2,r7,-1
 401a82c:	9700d636 	bltu	r18,fp,401ab88 <__divdf3+0x740>
 401a830:	9200d52e 	bgeu	r18,r8,401ab88 <__divdf3+0x740>
 401a834:	39ffff84 	addi	r7,r7,-2
 401a838:	9725883a 	add	r18,r18,fp
 401a83c:	3004943a 	slli	r2,r6,16
 401a840:	b012d43a 	srli	r9,r22,16
 401a844:	b1bfffcc 	andi	r6,r22,65535
 401a848:	11e2b03a 	or	r17,r2,r7
 401a84c:	8806d43a 	srli	r3,r17,16
 401a850:	893fffcc 	andi	r4,r17,65535
 401a854:	218b383a 	mul	r5,r4,r6
 401a858:	30c5383a 	mul	r2,r6,r3
 401a85c:	2249383a 	mul	r4,r4,r9
 401a860:	280ed43a 	srli	r7,r5,16
 401a864:	9225c83a 	sub	r18,r18,r8
 401a868:	2089883a 	add	r4,r4,r2
 401a86c:	3909883a 	add	r4,r7,r4
 401a870:	1a47383a 	mul	r3,r3,r9
 401a874:	2080022e 	bgeu	r4,r2,401a880 <__divdf3+0x438>
 401a878:	00800074 	movhi	r2,1
 401a87c:	1887883a 	add	r3,r3,r2
 401a880:	2004d43a 	srli	r2,r4,16
 401a884:	2008943a 	slli	r4,r4,16
 401a888:	297fffcc 	andi	r5,r5,65535
 401a88c:	10c7883a 	add	r3,r2,r3
 401a890:	2149883a 	add	r4,r4,r5
 401a894:	90c0a536 	bltu	r18,r3,401ab2c <__divdf3+0x6e4>
 401a898:	90c0bf26 	beq	r18,r3,401ab98 <__divdf3+0x750>
 401a89c:	90c7c83a 	sub	r3,r18,r3
 401a8a0:	810fc83a 	sub	r7,r16,r4
 401a8a4:	81e5803a 	cmpltu	r18,r16,r7
 401a8a8:	1ca5c83a 	sub	r18,r3,r18
 401a8ac:	e480c126 	beq	fp,r18,401abb4 <__divdf3+0x76c>
 401a8b0:	a00b883a 	mov	r5,r20
 401a8b4:	9009883a 	mov	r4,r18
 401a8b8:	d9800315 	stw	r6,12(sp)
 401a8bc:	d9c00215 	stw	r7,8(sp)
 401a8c0:	da400115 	stw	r9,4(sp)
 401a8c4:	400b8780 	call	400b878 <__udivsi3>
 401a8c8:	a00b883a 	mov	r5,r20
 401a8cc:	9009883a 	mov	r4,r18
 401a8d0:	d8800015 	stw	r2,0(sp)
 401a8d4:	400b8dc0 	call	400b8dc <__umodsi3>
 401a8d8:	d9c00217 	ldw	r7,8(sp)
 401a8dc:	da000017 	ldw	r8,0(sp)
 401a8e0:	1006943a 	slli	r3,r2,16
 401a8e4:	3804d43a 	srli	r2,r7,16
 401a8e8:	ba21383a 	mul	r16,r23,r8
 401a8ec:	d9800317 	ldw	r6,12(sp)
 401a8f0:	10c4b03a 	or	r2,r2,r3
 401a8f4:	da400117 	ldw	r9,4(sp)
 401a8f8:	1400062e 	bgeu	r2,r16,401a914 <__divdf3+0x4cc>
 401a8fc:	1705883a 	add	r2,r2,fp
 401a900:	40ffffc4 	addi	r3,r8,-1
 401a904:	1700ad36 	bltu	r2,fp,401abbc <__divdf3+0x774>
 401a908:	1400ac2e 	bgeu	r2,r16,401abbc <__divdf3+0x774>
 401a90c:	423fff84 	addi	r8,r8,-2
 401a910:	1705883a 	add	r2,r2,fp
 401a914:	1421c83a 	sub	r16,r2,r16
 401a918:	a00b883a 	mov	r5,r20
 401a91c:	8009883a 	mov	r4,r16
 401a920:	d9800315 	stw	r6,12(sp)
 401a924:	d9c00215 	stw	r7,8(sp)
 401a928:	da000015 	stw	r8,0(sp)
 401a92c:	da400115 	stw	r9,4(sp)
 401a930:	400b8780 	call	400b878 <__udivsi3>
 401a934:	8009883a 	mov	r4,r16
 401a938:	a00b883a 	mov	r5,r20
 401a93c:	1025883a 	mov	r18,r2
 401a940:	400b8dc0 	call	400b8dc <__umodsi3>
 401a944:	d9c00217 	ldw	r7,8(sp)
 401a948:	1004943a 	slli	r2,r2,16
 401a94c:	bcaf383a 	mul	r23,r23,r18
 401a950:	393fffcc 	andi	r4,r7,65535
 401a954:	2088b03a 	or	r4,r4,r2
 401a958:	d9800317 	ldw	r6,12(sp)
 401a95c:	da000017 	ldw	r8,0(sp)
 401a960:	da400117 	ldw	r9,4(sp)
 401a964:	25c0062e 	bgeu	r4,r23,401a980 <__divdf3+0x538>
 401a968:	2709883a 	add	r4,r4,fp
 401a96c:	90bfffc4 	addi	r2,r18,-1
 401a970:	27009436 	bltu	r4,fp,401abc4 <__divdf3+0x77c>
 401a974:	25c0932e 	bgeu	r4,r23,401abc4 <__divdf3+0x77c>
 401a978:	94bfff84 	addi	r18,r18,-2
 401a97c:	2709883a 	add	r4,r4,fp
 401a980:	4004943a 	slli	r2,r8,16
 401a984:	25efc83a 	sub	r23,r4,r23
 401a988:	1490b03a 	or	r8,r2,r18
 401a98c:	4008d43a 	srli	r4,r8,16
 401a990:	40ffffcc 	andi	r3,r8,65535
 401a994:	30c5383a 	mul	r2,r6,r3
 401a998:	1a47383a 	mul	r3,r3,r9
 401a99c:	310d383a 	mul	r6,r6,r4
 401a9a0:	100ad43a 	srli	r5,r2,16
 401a9a4:	4913383a 	mul	r9,r9,r4
 401a9a8:	1987883a 	add	r3,r3,r6
 401a9ac:	28c7883a 	add	r3,r5,r3
 401a9b0:	1980022e 	bgeu	r3,r6,401a9bc <__divdf3+0x574>
 401a9b4:	01000074 	movhi	r4,1
 401a9b8:	4913883a 	add	r9,r9,r4
 401a9bc:	1808d43a 	srli	r4,r3,16
 401a9c0:	1806943a 	slli	r3,r3,16
 401a9c4:	10bfffcc 	andi	r2,r2,65535
 401a9c8:	2253883a 	add	r9,r4,r9
 401a9cc:	1887883a 	add	r3,r3,r2
 401a9d0:	ba403836 	bltu	r23,r9,401aab4 <__divdf3+0x66c>
 401a9d4:	ba403626 	beq	r23,r9,401aab0 <__divdf3+0x668>
 401a9d8:	42000054 	ori	r8,r8,1
 401a9dc:	a880ffc4 	addi	r2,r21,1023
 401a9e0:	00bf570e 	bge	zero,r2,401a740 <__alt_data_end+0xfc01a740>
 401a9e4:	40c001cc 	andi	r3,r8,7
 401a9e8:	18000726 	beq	r3,zero,401aa08 <__divdf3+0x5c0>
 401a9ec:	40c003cc 	andi	r3,r8,15
 401a9f0:	01000104 	movi	r4,4
 401a9f4:	19000426 	beq	r3,r4,401aa08 <__divdf3+0x5c0>
 401a9f8:	4107883a 	add	r3,r8,r4
 401a9fc:	1a11803a 	cmpltu	r8,r3,r8
 401aa00:	8a23883a 	add	r17,r17,r8
 401aa04:	1811883a 	mov	r8,r3
 401aa08:	88c0402c 	andhi	r3,r17,256
 401aa0c:	18000426 	beq	r3,zero,401aa20 <__divdf3+0x5d8>
 401aa10:	00ffc034 	movhi	r3,65280
 401aa14:	18ffffc4 	addi	r3,r3,-1
 401aa18:	a8810004 	addi	r2,r21,1024
 401aa1c:	88e2703a 	and	r17,r17,r3
 401aa20:	00c1ff84 	movi	r3,2046
 401aa24:	18bee316 	blt	r3,r2,401a5b4 <__alt_data_end+0xfc01a5b4>
 401aa28:	8824977a 	slli	r18,r17,29
 401aa2c:	4010d0fa 	srli	r8,r8,3
 401aa30:	8822927a 	slli	r17,r17,9
 401aa34:	1081ffcc 	andi	r2,r2,2047
 401aa38:	9224b03a 	or	r18,r18,r8
 401aa3c:	880ad33a 	srli	r5,r17,12
 401aa40:	98c0004c 	andi	r3,r19,1
 401aa44:	003edf06 	br	401a5c4 <__alt_data_end+0xfc01a5c4>
 401aa48:	8080022c 	andhi	r2,r16,8
 401aa4c:	10001226 	beq	r2,zero,401aa98 <__divdf3+0x650>
 401aa50:	8880022c 	andhi	r2,r17,8
 401aa54:	1000101e 	bne	r2,zero,401aa98 <__divdf3+0x650>
 401aa58:	00800434 	movhi	r2,16
 401aa5c:	89400234 	orhi	r5,r17,8
 401aa60:	10bfffc4 	addi	r2,r2,-1
 401aa64:	b007883a 	mov	r3,r22
 401aa68:	288a703a 	and	r5,r5,r2
 401aa6c:	4025883a 	mov	r18,r8
 401aa70:	003f3106 	br	401a738 <__alt_data_end+0xfc01a738>
 401aa74:	008000c4 	movi	r2,3
 401aa78:	3880a626 	beq	r7,r2,401ad14 <__divdf3+0x8cc>
 401aa7c:	00800044 	movi	r2,1
 401aa80:	3880521e 	bne	r7,r2,401abcc <__divdf3+0x784>
 401aa84:	b807883a 	mov	r3,r23
 401aa88:	0005883a 	mov	r2,zero
 401aa8c:	000b883a 	mov	r5,zero
 401aa90:	0025883a 	mov	r18,zero
 401aa94:	003ecb06 	br	401a5c4 <__alt_data_end+0xfc01a5c4>
 401aa98:	00800434 	movhi	r2,16
 401aa9c:	81400234 	orhi	r5,r16,8
 401aaa0:	10bfffc4 	addi	r2,r2,-1
 401aaa4:	a007883a 	mov	r3,r20
 401aaa8:	288a703a 	and	r5,r5,r2
 401aaac:	003f2206 	br	401a738 <__alt_data_end+0xfc01a738>
 401aab0:	183fca26 	beq	r3,zero,401a9dc <__alt_data_end+0xfc01a9dc>
 401aab4:	e5ef883a 	add	r23,fp,r23
 401aab8:	40bfffc4 	addi	r2,r8,-1
 401aabc:	bf00392e 	bgeu	r23,fp,401aba4 <__divdf3+0x75c>
 401aac0:	1011883a 	mov	r8,r2
 401aac4:	ba7fc41e 	bne	r23,r9,401a9d8 <__alt_data_end+0xfc01a9d8>
 401aac8:	b0ffc31e 	bne	r22,r3,401a9d8 <__alt_data_end+0xfc01a9d8>
 401aacc:	003fc306 	br	401a9dc <__alt_data_end+0xfc01a9dc>
 401aad0:	143ff604 	addi	r16,r2,-40
 401aad4:	9c20983a 	sll	r16,r19,r16
 401aad8:	0025883a 	mov	r18,zero
 401aadc:	003ee206 	br	401a668 <__alt_data_end+0xfc01a668>
 401aae0:	d9800315 	stw	r6,12(sp)
 401aae4:	d9c00215 	stw	r7,8(sp)
 401aae8:	401c1a00 	call	401c1a0 <__clzsi2>
 401aaec:	10800804 	addi	r2,r2,32
 401aaf0:	d9c00217 	ldw	r7,8(sp)
 401aaf4:	d9800317 	ldw	r6,12(sp)
 401aaf8:	003ed106 	br	401a640 <__alt_data_end+0xfc01a640>
 401aafc:	147ff604 	addi	r17,r2,-40
 401ab00:	3462983a 	sll	r17,r6,r17
 401ab04:	0011883a 	mov	r8,zero
 401ab08:	003ef506 	br	401a6e0 <__alt_data_end+0xfc01a6e0>
 401ab0c:	3009883a 	mov	r4,r6
 401ab10:	d9800315 	stw	r6,12(sp)
 401ab14:	da400115 	stw	r9,4(sp)
 401ab18:	401c1a00 	call	401c1a0 <__clzsi2>
 401ab1c:	10800804 	addi	r2,r2,32
 401ab20:	da400117 	ldw	r9,4(sp)
 401ab24:	d9800317 	ldw	r6,12(sp)
 401ab28:	003ee306 	br	401a6b8 <__alt_data_end+0xfc01a6b8>
 401ab2c:	85a1883a 	add	r16,r16,r22
 401ab30:	8585803a 	cmpltu	r2,r16,r22
 401ab34:	1705883a 	add	r2,r2,fp
 401ab38:	14a5883a 	add	r18,r2,r18
 401ab3c:	88bfffc4 	addi	r2,r17,-1
 401ab40:	e4800c2e 	bgeu	fp,r18,401ab74 <__divdf3+0x72c>
 401ab44:	90c03e36 	bltu	r18,r3,401ac40 <__divdf3+0x7f8>
 401ab48:	1c806926 	beq	r3,r18,401acf0 <__divdf3+0x8a8>
 401ab4c:	90c7c83a 	sub	r3,r18,r3
 401ab50:	1023883a 	mov	r17,r2
 401ab54:	003f5206 	br	401a8a0 <__alt_data_end+0xfc01a8a0>
 401ab58:	923f0436 	bltu	r18,r8,401a76c <__alt_data_end+0xfc01a76c>
 401ab5c:	800897fa 	slli	r4,r16,31
 401ab60:	9004d07a 	srli	r2,r18,1
 401ab64:	8006d07a 	srli	r3,r16,1
 401ab68:	902097fa 	slli	r16,r18,31
 401ab6c:	20a4b03a 	or	r18,r4,r2
 401ab70:	003f0106 	br	401a778 <__alt_data_end+0xfc01a778>
 401ab74:	e4bff51e 	bne	fp,r18,401ab4c <__alt_data_end+0xfc01ab4c>
 401ab78:	85bff22e 	bgeu	r16,r22,401ab44 <__alt_data_end+0xfc01ab44>
 401ab7c:	e0c7c83a 	sub	r3,fp,r3
 401ab80:	1023883a 	mov	r17,r2
 401ab84:	003f4606 	br	401a8a0 <__alt_data_end+0xfc01a8a0>
 401ab88:	100f883a 	mov	r7,r2
 401ab8c:	003f2b06 	br	401a83c <__alt_data_end+0xfc01a83c>
 401ab90:	180d883a 	mov	r6,r3
 401ab94:	003f1306 	br	401a7e4 <__alt_data_end+0xfc01a7e4>
 401ab98:	813fe436 	bltu	r16,r4,401ab2c <__alt_data_end+0xfc01ab2c>
 401ab9c:	0007883a 	mov	r3,zero
 401aba0:	003f3f06 	br	401a8a0 <__alt_data_end+0xfc01a8a0>
 401aba4:	ba402c36 	bltu	r23,r9,401ac58 <__divdf3+0x810>
 401aba8:	4dc05426 	beq	r9,r23,401acfc <__divdf3+0x8b4>
 401abac:	1011883a 	mov	r8,r2
 401abb0:	003f8906 	br	401a9d8 <__alt_data_end+0xfc01a9d8>
 401abb4:	023fffc4 	movi	r8,-1
 401abb8:	003f8806 	br	401a9dc <__alt_data_end+0xfc01a9dc>
 401abbc:	1811883a 	mov	r8,r3
 401abc0:	003f5406 	br	401a914 <__alt_data_end+0xfc01a914>
 401abc4:	1025883a 	mov	r18,r2
 401abc8:	003f6d06 	br	401a980 <__alt_data_end+0xfc01a980>
 401abcc:	b827883a 	mov	r19,r23
 401abd0:	003f8206 	br	401a9dc <__alt_data_end+0xfc01a9dc>
 401abd4:	010007c4 	movi	r4,31
 401abd8:	20c02616 	blt	r4,r3,401ac74 <__divdf3+0x82c>
 401abdc:	00800804 	movi	r2,32
 401abe0:	10c5c83a 	sub	r2,r2,r3
 401abe4:	888a983a 	sll	r5,r17,r2
 401abe8:	40c8d83a 	srl	r4,r8,r3
 401abec:	4084983a 	sll	r2,r8,r2
 401abf0:	88e2d83a 	srl	r17,r17,r3
 401abf4:	2906b03a 	or	r3,r5,r4
 401abf8:	1004c03a 	cmpne	r2,r2,zero
 401abfc:	1886b03a 	or	r3,r3,r2
 401ac00:	188001cc 	andi	r2,r3,7
 401ac04:	10000726 	beq	r2,zero,401ac24 <__divdf3+0x7dc>
 401ac08:	188003cc 	andi	r2,r3,15
 401ac0c:	01000104 	movi	r4,4
 401ac10:	11000426 	beq	r2,r4,401ac24 <__divdf3+0x7dc>
 401ac14:	1805883a 	mov	r2,r3
 401ac18:	10c00104 	addi	r3,r2,4
 401ac1c:	1885803a 	cmpltu	r2,r3,r2
 401ac20:	88a3883a 	add	r17,r17,r2
 401ac24:	8880202c 	andhi	r2,r17,128
 401ac28:	10002726 	beq	r2,zero,401acc8 <__divdf3+0x880>
 401ac2c:	98c0004c 	andi	r3,r19,1
 401ac30:	00800044 	movi	r2,1
 401ac34:	000b883a 	mov	r5,zero
 401ac38:	0025883a 	mov	r18,zero
 401ac3c:	003e6106 	br	401a5c4 <__alt_data_end+0xfc01a5c4>
 401ac40:	85a1883a 	add	r16,r16,r22
 401ac44:	8585803a 	cmpltu	r2,r16,r22
 401ac48:	1705883a 	add	r2,r2,fp
 401ac4c:	14a5883a 	add	r18,r2,r18
 401ac50:	8c7fff84 	addi	r17,r17,-2
 401ac54:	003f1106 	br	401a89c <__alt_data_end+0xfc01a89c>
 401ac58:	b589883a 	add	r4,r22,r22
 401ac5c:	25ad803a 	cmpltu	r22,r4,r22
 401ac60:	b739883a 	add	fp,r22,fp
 401ac64:	40bfff84 	addi	r2,r8,-2
 401ac68:	bf2f883a 	add	r23,r23,fp
 401ac6c:	202d883a 	mov	r22,r4
 401ac70:	003f9306 	br	401aac0 <__alt_data_end+0xfc01aac0>
 401ac74:	013ff844 	movi	r4,-31
 401ac78:	2085c83a 	sub	r2,r4,r2
 401ac7c:	8888d83a 	srl	r4,r17,r2
 401ac80:	00800804 	movi	r2,32
 401ac84:	18802126 	beq	r3,r2,401ad0c <__divdf3+0x8c4>
 401ac88:	00801004 	movi	r2,64
 401ac8c:	10c5c83a 	sub	r2,r2,r3
 401ac90:	8884983a 	sll	r2,r17,r2
 401ac94:	1204b03a 	or	r2,r2,r8
 401ac98:	1004c03a 	cmpne	r2,r2,zero
 401ac9c:	2084b03a 	or	r2,r4,r2
 401aca0:	144001cc 	andi	r17,r2,7
 401aca4:	88000d1e 	bne	r17,zero,401acdc <__divdf3+0x894>
 401aca8:	000b883a 	mov	r5,zero
 401acac:	1024d0fa 	srli	r18,r2,3
 401acb0:	98c0004c 	andi	r3,r19,1
 401acb4:	0005883a 	mov	r2,zero
 401acb8:	9464b03a 	or	r18,r18,r17
 401acbc:	003e4106 	br	401a5c4 <__alt_data_end+0xfc01a5c4>
 401acc0:	1007883a 	mov	r3,r2
 401acc4:	0023883a 	mov	r17,zero
 401acc8:	880a927a 	slli	r5,r17,9
 401accc:	1805883a 	mov	r2,r3
 401acd0:	8822977a 	slli	r17,r17,29
 401acd4:	280ad33a 	srli	r5,r5,12
 401acd8:	003ff406 	br	401acac <__alt_data_end+0xfc01acac>
 401acdc:	10c003cc 	andi	r3,r2,15
 401ace0:	01000104 	movi	r4,4
 401ace4:	193ff626 	beq	r3,r4,401acc0 <__alt_data_end+0xfc01acc0>
 401ace8:	0023883a 	mov	r17,zero
 401acec:	003fca06 	br	401ac18 <__alt_data_end+0xfc01ac18>
 401acf0:	813fd336 	bltu	r16,r4,401ac40 <__alt_data_end+0xfc01ac40>
 401acf4:	1023883a 	mov	r17,r2
 401acf8:	003fa806 	br	401ab9c <__alt_data_end+0xfc01ab9c>
 401acfc:	b0ffd636 	bltu	r22,r3,401ac58 <__alt_data_end+0xfc01ac58>
 401ad00:	1011883a 	mov	r8,r2
 401ad04:	b0ff341e 	bne	r22,r3,401a9d8 <__alt_data_end+0xfc01a9d8>
 401ad08:	003f3406 	br	401a9dc <__alt_data_end+0xfc01a9dc>
 401ad0c:	0005883a 	mov	r2,zero
 401ad10:	003fe006 	br	401ac94 <__alt_data_end+0xfc01ac94>
 401ad14:	00800434 	movhi	r2,16
 401ad18:	89400234 	orhi	r5,r17,8
 401ad1c:	10bfffc4 	addi	r2,r2,-1
 401ad20:	b807883a 	mov	r3,r23
 401ad24:	288a703a 	and	r5,r5,r2
 401ad28:	4025883a 	mov	r18,r8
 401ad2c:	003e8206 	br	401a738 <__alt_data_end+0xfc01a738>

0401ad30 <__eqdf2>:
 401ad30:	2804d53a 	srli	r2,r5,20
 401ad34:	3806d53a 	srli	r3,r7,20
 401ad38:	02000434 	movhi	r8,16
 401ad3c:	423fffc4 	addi	r8,r8,-1
 401ad40:	1081ffcc 	andi	r2,r2,2047
 401ad44:	0281ffc4 	movi	r10,2047
 401ad48:	2a12703a 	and	r9,r5,r8
 401ad4c:	18c1ffcc 	andi	r3,r3,2047
 401ad50:	3a10703a 	and	r8,r7,r8
 401ad54:	280ad7fa 	srli	r5,r5,31
 401ad58:	380ed7fa 	srli	r7,r7,31
 401ad5c:	12801026 	beq	r2,r10,401ada0 <__eqdf2+0x70>
 401ad60:	0281ffc4 	movi	r10,2047
 401ad64:	1a800a26 	beq	r3,r10,401ad90 <__eqdf2+0x60>
 401ad68:	10c00226 	beq	r2,r3,401ad74 <__eqdf2+0x44>
 401ad6c:	00800044 	movi	r2,1
 401ad70:	f800283a 	ret
 401ad74:	4a3ffd1e 	bne	r9,r8,401ad6c <__alt_data_end+0xfc01ad6c>
 401ad78:	21bffc1e 	bne	r4,r6,401ad6c <__alt_data_end+0xfc01ad6c>
 401ad7c:	29c00c26 	beq	r5,r7,401adb0 <__eqdf2+0x80>
 401ad80:	103ffa1e 	bne	r2,zero,401ad6c <__alt_data_end+0xfc01ad6c>
 401ad84:	2244b03a 	or	r2,r4,r9
 401ad88:	1004c03a 	cmpne	r2,r2,zero
 401ad8c:	f800283a 	ret
 401ad90:	3214b03a 	or	r10,r6,r8
 401ad94:	503ff426 	beq	r10,zero,401ad68 <__alt_data_end+0xfc01ad68>
 401ad98:	00800044 	movi	r2,1
 401ad9c:	f800283a 	ret
 401ada0:	2254b03a 	or	r10,r4,r9
 401ada4:	503fee26 	beq	r10,zero,401ad60 <__alt_data_end+0xfc01ad60>
 401ada8:	00800044 	movi	r2,1
 401adac:	f800283a 	ret
 401adb0:	0005883a 	mov	r2,zero
 401adb4:	f800283a 	ret

0401adb8 <__gedf2>:
 401adb8:	2804d53a 	srli	r2,r5,20
 401adbc:	3806d53a 	srli	r3,r7,20
 401adc0:	02000434 	movhi	r8,16
 401adc4:	423fffc4 	addi	r8,r8,-1
 401adc8:	1081ffcc 	andi	r2,r2,2047
 401adcc:	0241ffc4 	movi	r9,2047
 401add0:	2a14703a 	and	r10,r5,r8
 401add4:	18c1ffcc 	andi	r3,r3,2047
 401add8:	3a10703a 	and	r8,r7,r8
 401addc:	280ad7fa 	srli	r5,r5,31
 401ade0:	380ed7fa 	srli	r7,r7,31
 401ade4:	12401d26 	beq	r2,r9,401ae5c <__gedf2+0xa4>
 401ade8:	0241ffc4 	movi	r9,2047
 401adec:	1a401226 	beq	r3,r9,401ae38 <__gedf2+0x80>
 401adf0:	1000081e 	bne	r2,zero,401ae14 <__gedf2+0x5c>
 401adf4:	2296b03a 	or	r11,r4,r10
 401adf8:	5813003a 	cmpeq	r9,r11,zero
 401adfc:	1800091e 	bne	r3,zero,401ae24 <__gedf2+0x6c>
 401ae00:	3218b03a 	or	r12,r6,r8
 401ae04:	6000071e 	bne	r12,zero,401ae24 <__gedf2+0x6c>
 401ae08:	0005883a 	mov	r2,zero
 401ae0c:	5800101e 	bne	r11,zero,401ae50 <__gedf2+0x98>
 401ae10:	f800283a 	ret
 401ae14:	18000c1e 	bne	r3,zero,401ae48 <__gedf2+0x90>
 401ae18:	3212b03a 	or	r9,r6,r8
 401ae1c:	48000c26 	beq	r9,zero,401ae50 <__gedf2+0x98>
 401ae20:	0013883a 	mov	r9,zero
 401ae24:	39c03fcc 	andi	r7,r7,255
 401ae28:	48000826 	beq	r9,zero,401ae4c <__gedf2+0x94>
 401ae2c:	38000926 	beq	r7,zero,401ae54 <__gedf2+0x9c>
 401ae30:	00800044 	movi	r2,1
 401ae34:	f800283a 	ret
 401ae38:	3212b03a 	or	r9,r6,r8
 401ae3c:	483fec26 	beq	r9,zero,401adf0 <__alt_data_end+0xfc01adf0>
 401ae40:	00bfff84 	movi	r2,-2
 401ae44:	f800283a 	ret
 401ae48:	39c03fcc 	andi	r7,r7,255
 401ae4c:	29c00626 	beq	r5,r7,401ae68 <__gedf2+0xb0>
 401ae50:	283ff726 	beq	r5,zero,401ae30 <__alt_data_end+0xfc01ae30>
 401ae54:	00bfffc4 	movi	r2,-1
 401ae58:	f800283a 	ret
 401ae5c:	2292b03a 	or	r9,r4,r10
 401ae60:	483fe126 	beq	r9,zero,401ade8 <__alt_data_end+0xfc01ade8>
 401ae64:	003ff606 	br	401ae40 <__alt_data_end+0xfc01ae40>
 401ae68:	18bff916 	blt	r3,r2,401ae50 <__alt_data_end+0xfc01ae50>
 401ae6c:	10c00316 	blt	r2,r3,401ae7c <__gedf2+0xc4>
 401ae70:	42bff736 	bltu	r8,r10,401ae50 <__alt_data_end+0xfc01ae50>
 401ae74:	52000326 	beq	r10,r8,401ae84 <__gedf2+0xcc>
 401ae78:	5200042e 	bgeu	r10,r8,401ae8c <__gedf2+0xd4>
 401ae7c:	283fec1e 	bne	r5,zero,401ae30 <__alt_data_end+0xfc01ae30>
 401ae80:	003ff406 	br	401ae54 <__alt_data_end+0xfc01ae54>
 401ae84:	313ff236 	bltu	r6,r4,401ae50 <__alt_data_end+0xfc01ae50>
 401ae88:	21bffc36 	bltu	r4,r6,401ae7c <__alt_data_end+0xfc01ae7c>
 401ae8c:	0005883a 	mov	r2,zero
 401ae90:	f800283a 	ret

0401ae94 <__ledf2>:
 401ae94:	2804d53a 	srli	r2,r5,20
 401ae98:	3810d53a 	srli	r8,r7,20
 401ae9c:	00c00434 	movhi	r3,16
 401aea0:	18ffffc4 	addi	r3,r3,-1
 401aea4:	1081ffcc 	andi	r2,r2,2047
 401aea8:	0241ffc4 	movi	r9,2047
 401aeac:	28d4703a 	and	r10,r5,r3
 401aeb0:	4201ffcc 	andi	r8,r8,2047
 401aeb4:	38c6703a 	and	r3,r7,r3
 401aeb8:	280ad7fa 	srli	r5,r5,31
 401aebc:	380ed7fa 	srli	r7,r7,31
 401aec0:	12401f26 	beq	r2,r9,401af40 <__ledf2+0xac>
 401aec4:	0241ffc4 	movi	r9,2047
 401aec8:	42401426 	beq	r8,r9,401af1c <__ledf2+0x88>
 401aecc:	1000091e 	bne	r2,zero,401aef4 <__ledf2+0x60>
 401aed0:	2296b03a 	or	r11,r4,r10
 401aed4:	5813003a 	cmpeq	r9,r11,zero
 401aed8:	29403fcc 	andi	r5,r5,255
 401aedc:	40000a1e 	bne	r8,zero,401af08 <__ledf2+0x74>
 401aee0:	30d8b03a 	or	r12,r6,r3
 401aee4:	6000081e 	bne	r12,zero,401af08 <__ledf2+0x74>
 401aee8:	0005883a 	mov	r2,zero
 401aeec:	5800111e 	bne	r11,zero,401af34 <__ledf2+0xa0>
 401aef0:	f800283a 	ret
 401aef4:	29403fcc 	andi	r5,r5,255
 401aef8:	40000c1e 	bne	r8,zero,401af2c <__ledf2+0x98>
 401aefc:	30d2b03a 	or	r9,r6,r3
 401af00:	48000c26 	beq	r9,zero,401af34 <__ledf2+0xa0>
 401af04:	0013883a 	mov	r9,zero
 401af08:	39c03fcc 	andi	r7,r7,255
 401af0c:	48000826 	beq	r9,zero,401af30 <__ledf2+0x9c>
 401af10:	38001126 	beq	r7,zero,401af58 <__ledf2+0xc4>
 401af14:	00800044 	movi	r2,1
 401af18:	f800283a 	ret
 401af1c:	30d2b03a 	or	r9,r6,r3
 401af20:	483fea26 	beq	r9,zero,401aecc <__alt_data_end+0xfc01aecc>
 401af24:	00800084 	movi	r2,2
 401af28:	f800283a 	ret
 401af2c:	39c03fcc 	andi	r7,r7,255
 401af30:	39400726 	beq	r7,r5,401af50 <__ledf2+0xbc>
 401af34:	2800081e 	bne	r5,zero,401af58 <__ledf2+0xc4>
 401af38:	00800044 	movi	r2,1
 401af3c:	f800283a 	ret
 401af40:	2292b03a 	or	r9,r4,r10
 401af44:	483fdf26 	beq	r9,zero,401aec4 <__alt_data_end+0xfc01aec4>
 401af48:	00800084 	movi	r2,2
 401af4c:	f800283a 	ret
 401af50:	4080030e 	bge	r8,r2,401af60 <__ledf2+0xcc>
 401af54:	383fef26 	beq	r7,zero,401af14 <__alt_data_end+0xfc01af14>
 401af58:	00bfffc4 	movi	r2,-1
 401af5c:	f800283a 	ret
 401af60:	123feb16 	blt	r2,r8,401af10 <__alt_data_end+0xfc01af10>
 401af64:	1abff336 	bltu	r3,r10,401af34 <__alt_data_end+0xfc01af34>
 401af68:	50c00326 	beq	r10,r3,401af78 <__ledf2+0xe4>
 401af6c:	50c0042e 	bgeu	r10,r3,401af80 <__ledf2+0xec>
 401af70:	283fe81e 	bne	r5,zero,401af14 <__alt_data_end+0xfc01af14>
 401af74:	003ff806 	br	401af58 <__alt_data_end+0xfc01af58>
 401af78:	313fee36 	bltu	r6,r4,401af34 <__alt_data_end+0xfc01af34>
 401af7c:	21bffc36 	bltu	r4,r6,401af70 <__alt_data_end+0xfc01af70>
 401af80:	0005883a 	mov	r2,zero
 401af84:	f800283a 	ret

0401af88 <__muldf3>:
 401af88:	defff304 	addi	sp,sp,-52
 401af8c:	2804d53a 	srli	r2,r5,20
 401af90:	dd800915 	stw	r22,36(sp)
 401af94:	282cd7fa 	srli	r22,r5,31
 401af98:	dc000315 	stw	r16,12(sp)
 401af9c:	04000434 	movhi	r16,16
 401afa0:	dd400815 	stw	r21,32(sp)
 401afa4:	dc800515 	stw	r18,20(sp)
 401afa8:	843fffc4 	addi	r16,r16,-1
 401afac:	dfc00c15 	stw	ra,48(sp)
 401afb0:	df000b15 	stw	fp,44(sp)
 401afb4:	ddc00a15 	stw	r23,40(sp)
 401afb8:	dd000715 	stw	r20,28(sp)
 401afbc:	dcc00615 	stw	r19,24(sp)
 401afc0:	dc400415 	stw	r17,16(sp)
 401afc4:	1481ffcc 	andi	r18,r2,2047
 401afc8:	2c20703a 	and	r16,r5,r16
 401afcc:	b02b883a 	mov	r21,r22
 401afd0:	b2403fcc 	andi	r9,r22,255
 401afd4:	90006026 	beq	r18,zero,401b158 <__muldf3+0x1d0>
 401afd8:	0081ffc4 	movi	r2,2047
 401afdc:	2029883a 	mov	r20,r4
 401afe0:	90803626 	beq	r18,r2,401b0bc <__muldf3+0x134>
 401afe4:	80800434 	orhi	r2,r16,16
 401afe8:	100490fa 	slli	r2,r2,3
 401afec:	2020d77a 	srli	r16,r4,29
 401aff0:	202890fa 	slli	r20,r4,3
 401aff4:	94bf0044 	addi	r18,r18,-1023
 401aff8:	80a0b03a 	or	r16,r16,r2
 401affc:	0027883a 	mov	r19,zero
 401b000:	0039883a 	mov	fp,zero
 401b004:	3804d53a 	srli	r2,r7,20
 401b008:	382ed7fa 	srli	r23,r7,31
 401b00c:	04400434 	movhi	r17,16
 401b010:	8c7fffc4 	addi	r17,r17,-1
 401b014:	1081ffcc 	andi	r2,r2,2047
 401b018:	3011883a 	mov	r8,r6
 401b01c:	3c62703a 	and	r17,r7,r17
 401b020:	ba803fcc 	andi	r10,r23,255
 401b024:	10006d26 	beq	r2,zero,401b1dc <__muldf3+0x254>
 401b028:	00c1ffc4 	movi	r3,2047
 401b02c:	10c06526 	beq	r2,r3,401b1c4 <__muldf3+0x23c>
 401b030:	88c00434 	orhi	r3,r17,16
 401b034:	180690fa 	slli	r3,r3,3
 401b038:	3022d77a 	srli	r17,r6,29
 401b03c:	301090fa 	slli	r8,r6,3
 401b040:	10bf0044 	addi	r2,r2,-1023
 401b044:	88e2b03a 	or	r17,r17,r3
 401b048:	000b883a 	mov	r5,zero
 401b04c:	9085883a 	add	r2,r18,r2
 401b050:	2cc8b03a 	or	r4,r5,r19
 401b054:	00c003c4 	movi	r3,15
 401b058:	bdacf03a 	xor	r22,r23,r22
 401b05c:	12c00044 	addi	r11,r2,1
 401b060:	19009936 	bltu	r3,r4,401b2c8 <__muldf3+0x340>
 401b064:	200890ba 	slli	r4,r4,2
 401b068:	00c100b4 	movhi	r3,1026
 401b06c:	18ec1f04 	addi	r3,r3,-20356
 401b070:	20c9883a 	add	r4,r4,r3
 401b074:	20c00017 	ldw	r3,0(r4)
 401b078:	1800683a 	jmp	r3
 401b07c:	0401b2c8 	cmpgei	r16,zero,1739
 401b080:	0401b0dc 	xori	r16,zero,1731
 401b084:	0401b0dc 	xori	r16,zero,1731
 401b088:	0401b0d8 	cmpnei	r16,zero,1731
 401b08c:	0401b2a4 	muli	r16,zero,1738
 401b090:	0401b2a4 	muli	r16,zero,1738
 401b094:	0401b28c 	andi	r16,zero,1738
 401b098:	0401b0d8 	cmpnei	r16,zero,1731
 401b09c:	0401b2a4 	muli	r16,zero,1738
 401b0a0:	0401b28c 	andi	r16,zero,1738
 401b0a4:	0401b2a4 	muli	r16,zero,1738
 401b0a8:	0401b0d8 	cmpnei	r16,zero,1731
 401b0ac:	0401b2b4 	movhi	r16,1738
 401b0b0:	0401b2b4 	movhi	r16,1738
 401b0b4:	0401b2b4 	movhi	r16,1738
 401b0b8:	0401b4d0 	cmplti	r16,zero,1747
 401b0bc:	2404b03a 	or	r2,r4,r16
 401b0c0:	10006f1e 	bne	r2,zero,401b280 <__muldf3+0x2f8>
 401b0c4:	04c00204 	movi	r19,8
 401b0c8:	0021883a 	mov	r16,zero
 401b0cc:	0029883a 	mov	r20,zero
 401b0d0:	07000084 	movi	fp,2
 401b0d4:	003fcb06 	br	401b004 <__alt_data_end+0xfc01b004>
 401b0d8:	502d883a 	mov	r22,r10
 401b0dc:	00800084 	movi	r2,2
 401b0e0:	28805726 	beq	r5,r2,401b240 <__muldf3+0x2b8>
 401b0e4:	008000c4 	movi	r2,3
 401b0e8:	28816626 	beq	r5,r2,401b684 <__muldf3+0x6fc>
 401b0ec:	00800044 	movi	r2,1
 401b0f0:	2881411e 	bne	r5,r2,401b5f8 <__muldf3+0x670>
 401b0f4:	b02b883a 	mov	r21,r22
 401b0f8:	0005883a 	mov	r2,zero
 401b0fc:	000b883a 	mov	r5,zero
 401b100:	0029883a 	mov	r20,zero
 401b104:	1004953a 	slli	r2,r2,20
 401b108:	a8c03fcc 	andi	r3,r21,255
 401b10c:	04400434 	movhi	r17,16
 401b110:	8c7fffc4 	addi	r17,r17,-1
 401b114:	180697fa 	slli	r3,r3,31
 401b118:	2c4a703a 	and	r5,r5,r17
 401b11c:	288ab03a 	or	r5,r5,r2
 401b120:	28c6b03a 	or	r3,r5,r3
 401b124:	a005883a 	mov	r2,r20
 401b128:	dfc00c17 	ldw	ra,48(sp)
 401b12c:	df000b17 	ldw	fp,44(sp)
 401b130:	ddc00a17 	ldw	r23,40(sp)
 401b134:	dd800917 	ldw	r22,36(sp)
 401b138:	dd400817 	ldw	r21,32(sp)
 401b13c:	dd000717 	ldw	r20,28(sp)
 401b140:	dcc00617 	ldw	r19,24(sp)
 401b144:	dc800517 	ldw	r18,20(sp)
 401b148:	dc400417 	ldw	r17,16(sp)
 401b14c:	dc000317 	ldw	r16,12(sp)
 401b150:	dec00d04 	addi	sp,sp,52
 401b154:	f800283a 	ret
 401b158:	2404b03a 	or	r2,r4,r16
 401b15c:	2027883a 	mov	r19,r4
 401b160:	10004226 	beq	r2,zero,401b26c <__muldf3+0x2e4>
 401b164:	8000fc26 	beq	r16,zero,401b558 <__muldf3+0x5d0>
 401b168:	8009883a 	mov	r4,r16
 401b16c:	d9800215 	stw	r6,8(sp)
 401b170:	d9c00015 	stw	r7,0(sp)
 401b174:	da400115 	stw	r9,4(sp)
 401b178:	401c1a00 	call	401c1a0 <__clzsi2>
 401b17c:	d9800217 	ldw	r6,8(sp)
 401b180:	d9c00017 	ldw	r7,0(sp)
 401b184:	da400117 	ldw	r9,4(sp)
 401b188:	113ffd44 	addi	r4,r2,-11
 401b18c:	00c00704 	movi	r3,28
 401b190:	1900ed16 	blt	r3,r4,401b548 <__muldf3+0x5c0>
 401b194:	00c00744 	movi	r3,29
 401b198:	147ffe04 	addi	r17,r2,-8
 401b19c:	1907c83a 	sub	r3,r3,r4
 401b1a0:	8460983a 	sll	r16,r16,r17
 401b1a4:	98c6d83a 	srl	r3,r19,r3
 401b1a8:	9c68983a 	sll	r20,r19,r17
 401b1ac:	1c20b03a 	or	r16,r3,r16
 401b1b0:	1080fcc4 	addi	r2,r2,1011
 401b1b4:	00a5c83a 	sub	r18,zero,r2
 401b1b8:	0027883a 	mov	r19,zero
 401b1bc:	0039883a 	mov	fp,zero
 401b1c0:	003f9006 	br	401b004 <__alt_data_end+0xfc01b004>
 401b1c4:	3446b03a 	or	r3,r6,r17
 401b1c8:	1800261e 	bne	r3,zero,401b264 <__muldf3+0x2dc>
 401b1cc:	0023883a 	mov	r17,zero
 401b1d0:	0011883a 	mov	r8,zero
 401b1d4:	01400084 	movi	r5,2
 401b1d8:	003f9c06 	br	401b04c <__alt_data_end+0xfc01b04c>
 401b1dc:	3446b03a 	or	r3,r6,r17
 401b1e0:	18001c26 	beq	r3,zero,401b254 <__muldf3+0x2cc>
 401b1e4:	8800ce26 	beq	r17,zero,401b520 <__muldf3+0x598>
 401b1e8:	8809883a 	mov	r4,r17
 401b1ec:	d9800215 	stw	r6,8(sp)
 401b1f0:	da400115 	stw	r9,4(sp)
 401b1f4:	da800015 	stw	r10,0(sp)
 401b1f8:	401c1a00 	call	401c1a0 <__clzsi2>
 401b1fc:	d9800217 	ldw	r6,8(sp)
 401b200:	da400117 	ldw	r9,4(sp)
 401b204:	da800017 	ldw	r10,0(sp)
 401b208:	113ffd44 	addi	r4,r2,-11
 401b20c:	00c00704 	movi	r3,28
 401b210:	1900bf16 	blt	r3,r4,401b510 <__muldf3+0x588>
 401b214:	00c00744 	movi	r3,29
 401b218:	123ffe04 	addi	r8,r2,-8
 401b21c:	1907c83a 	sub	r3,r3,r4
 401b220:	8a22983a 	sll	r17,r17,r8
 401b224:	30c6d83a 	srl	r3,r6,r3
 401b228:	3210983a 	sll	r8,r6,r8
 401b22c:	1c62b03a 	or	r17,r3,r17
 401b230:	1080fcc4 	addi	r2,r2,1011
 401b234:	0085c83a 	sub	r2,zero,r2
 401b238:	000b883a 	mov	r5,zero
 401b23c:	003f8306 	br	401b04c <__alt_data_end+0xfc01b04c>
 401b240:	b02b883a 	mov	r21,r22
 401b244:	0081ffc4 	movi	r2,2047
 401b248:	000b883a 	mov	r5,zero
 401b24c:	0029883a 	mov	r20,zero
 401b250:	003fac06 	br	401b104 <__alt_data_end+0xfc01b104>
 401b254:	0023883a 	mov	r17,zero
 401b258:	0011883a 	mov	r8,zero
 401b25c:	01400044 	movi	r5,1
 401b260:	003f7a06 	br	401b04c <__alt_data_end+0xfc01b04c>
 401b264:	014000c4 	movi	r5,3
 401b268:	003f7806 	br	401b04c <__alt_data_end+0xfc01b04c>
 401b26c:	04c00104 	movi	r19,4
 401b270:	0021883a 	mov	r16,zero
 401b274:	0029883a 	mov	r20,zero
 401b278:	07000044 	movi	fp,1
 401b27c:	003f6106 	br	401b004 <__alt_data_end+0xfc01b004>
 401b280:	04c00304 	movi	r19,12
 401b284:	070000c4 	movi	fp,3
 401b288:	003f5e06 	br	401b004 <__alt_data_end+0xfc01b004>
 401b28c:	01400434 	movhi	r5,16
 401b290:	002b883a 	mov	r21,zero
 401b294:	297fffc4 	addi	r5,r5,-1
 401b298:	053fffc4 	movi	r20,-1
 401b29c:	0081ffc4 	movi	r2,2047
 401b2a0:	003f9806 	br	401b104 <__alt_data_end+0xfc01b104>
 401b2a4:	8023883a 	mov	r17,r16
 401b2a8:	a011883a 	mov	r8,r20
 401b2ac:	e00b883a 	mov	r5,fp
 401b2b0:	003f8a06 	br	401b0dc <__alt_data_end+0xfc01b0dc>
 401b2b4:	8023883a 	mov	r17,r16
 401b2b8:	a011883a 	mov	r8,r20
 401b2bc:	482d883a 	mov	r22,r9
 401b2c0:	e00b883a 	mov	r5,fp
 401b2c4:	003f8506 	br	401b0dc <__alt_data_end+0xfc01b0dc>
 401b2c8:	a00ad43a 	srli	r5,r20,16
 401b2cc:	401ad43a 	srli	r13,r8,16
 401b2d0:	a53fffcc 	andi	r20,r20,65535
 401b2d4:	423fffcc 	andi	r8,r8,65535
 401b2d8:	4519383a 	mul	r12,r8,r20
 401b2dc:	4147383a 	mul	r3,r8,r5
 401b2e0:	6d09383a 	mul	r4,r13,r20
 401b2e4:	600cd43a 	srli	r6,r12,16
 401b2e8:	2b5d383a 	mul	r14,r5,r13
 401b2ec:	20c9883a 	add	r4,r4,r3
 401b2f0:	310d883a 	add	r6,r6,r4
 401b2f4:	30c0022e 	bgeu	r6,r3,401b300 <__muldf3+0x378>
 401b2f8:	00c00074 	movhi	r3,1
 401b2fc:	70dd883a 	add	r14,r14,r3
 401b300:	8826d43a 	srli	r19,r17,16
 401b304:	8bffffcc 	andi	r15,r17,65535
 401b308:	7d23383a 	mul	r17,r15,r20
 401b30c:	7949383a 	mul	r4,r15,r5
 401b310:	9d29383a 	mul	r20,r19,r20
 401b314:	8814d43a 	srli	r10,r17,16
 401b318:	3012943a 	slli	r9,r6,16
 401b31c:	a129883a 	add	r20,r20,r4
 401b320:	633fffcc 	andi	r12,r12,65535
 401b324:	5515883a 	add	r10,r10,r20
 401b328:	3006d43a 	srli	r3,r6,16
 401b32c:	4b13883a 	add	r9,r9,r12
 401b330:	2ccb383a 	mul	r5,r5,r19
 401b334:	5100022e 	bgeu	r10,r4,401b340 <__muldf3+0x3b8>
 401b338:	01000074 	movhi	r4,1
 401b33c:	290b883a 	add	r5,r5,r4
 401b340:	802ad43a 	srli	r21,r16,16
 401b344:	843fffcc 	andi	r16,r16,65535
 401b348:	440d383a 	mul	r6,r8,r16
 401b34c:	4565383a 	mul	r18,r8,r21
 401b350:	8349383a 	mul	r4,r16,r13
 401b354:	500e943a 	slli	r7,r10,16
 401b358:	3010d43a 	srli	r8,r6,16
 401b35c:	5028d43a 	srli	r20,r10,16
 401b360:	2489883a 	add	r4,r4,r18
 401b364:	8abfffcc 	andi	r10,r17,65535
 401b368:	3a95883a 	add	r10,r7,r10
 401b36c:	4119883a 	add	r12,r8,r4
 401b370:	a169883a 	add	r20,r20,r5
 401b374:	1a87883a 	add	r3,r3,r10
 401b378:	6d5b383a 	mul	r13,r13,r21
 401b37c:	6480022e 	bgeu	r12,r18,401b388 <__muldf3+0x400>
 401b380:	01000074 	movhi	r4,1
 401b384:	691b883a 	add	r13,r13,r4
 401b388:	7c25383a 	mul	r18,r15,r16
 401b38c:	7d4b383a 	mul	r5,r15,r21
 401b390:	84cf383a 	mul	r7,r16,r19
 401b394:	901ed43a 	srli	r15,r18,16
 401b398:	6008d43a 	srli	r4,r12,16
 401b39c:	6010943a 	slli	r8,r12,16
 401b3a0:	394f883a 	add	r7,r7,r5
 401b3a4:	333fffcc 	andi	r12,r6,65535
 401b3a8:	79df883a 	add	r15,r15,r7
 401b3ac:	235b883a 	add	r13,r4,r13
 401b3b0:	9d63383a 	mul	r17,r19,r21
 401b3b4:	4309883a 	add	r4,r8,r12
 401b3b8:	7940022e 	bgeu	r15,r5,401b3c4 <__muldf3+0x43c>
 401b3bc:	01400074 	movhi	r5,1
 401b3c0:	8963883a 	add	r17,r17,r5
 401b3c4:	780a943a 	slli	r5,r15,16
 401b3c8:	91bfffcc 	andi	r6,r18,65535
 401b3cc:	70c7883a 	add	r3,r14,r3
 401b3d0:	298d883a 	add	r6,r5,r6
 401b3d4:	1a8f803a 	cmpltu	r7,r3,r10
 401b3d8:	350b883a 	add	r5,r6,r20
 401b3dc:	20c7883a 	add	r3,r4,r3
 401b3e0:	3955883a 	add	r10,r7,r5
 401b3e4:	1909803a 	cmpltu	r4,r3,r4
 401b3e8:	6a91883a 	add	r8,r13,r10
 401b3ec:	780cd43a 	srli	r6,r15,16
 401b3f0:	2219883a 	add	r12,r4,r8
 401b3f4:	2d0b803a 	cmpltu	r5,r5,r20
 401b3f8:	51cf803a 	cmpltu	r7,r10,r7
 401b3fc:	29ceb03a 	or	r7,r5,r7
 401b400:	4351803a 	cmpltu	r8,r8,r13
 401b404:	610b803a 	cmpltu	r5,r12,r4
 401b408:	4148b03a 	or	r4,r8,r5
 401b40c:	398f883a 	add	r7,r7,r6
 401b410:	3909883a 	add	r4,r7,r4
 401b414:	1810927a 	slli	r8,r3,9
 401b418:	2449883a 	add	r4,r4,r17
 401b41c:	2008927a 	slli	r4,r4,9
 401b420:	6022d5fa 	srli	r17,r12,23
 401b424:	1806d5fa 	srli	r3,r3,23
 401b428:	4252b03a 	or	r9,r8,r9
 401b42c:	600a927a 	slli	r5,r12,9
 401b430:	4810c03a 	cmpne	r8,r9,zero
 401b434:	2462b03a 	or	r17,r4,r17
 401b438:	40c6b03a 	or	r3,r8,r3
 401b43c:	8900402c 	andhi	r4,r17,256
 401b440:	1950b03a 	or	r8,r3,r5
 401b444:	20000726 	beq	r4,zero,401b464 <__muldf3+0x4dc>
 401b448:	4006d07a 	srli	r3,r8,1
 401b44c:	880497fa 	slli	r2,r17,31
 401b450:	4200004c 	andi	r8,r8,1
 401b454:	8822d07a 	srli	r17,r17,1
 401b458:	1a10b03a 	or	r8,r3,r8
 401b45c:	1210b03a 	or	r8,r2,r8
 401b460:	5805883a 	mov	r2,r11
 401b464:	1140ffc4 	addi	r5,r2,1023
 401b468:	0140440e 	bge	zero,r5,401b57c <__muldf3+0x5f4>
 401b46c:	40c001cc 	andi	r3,r8,7
 401b470:	18000726 	beq	r3,zero,401b490 <__muldf3+0x508>
 401b474:	40c003cc 	andi	r3,r8,15
 401b478:	01000104 	movi	r4,4
 401b47c:	19000426 	beq	r3,r4,401b490 <__muldf3+0x508>
 401b480:	4107883a 	add	r3,r8,r4
 401b484:	1a11803a 	cmpltu	r8,r3,r8
 401b488:	8a23883a 	add	r17,r17,r8
 401b48c:	1811883a 	mov	r8,r3
 401b490:	88c0402c 	andhi	r3,r17,256
 401b494:	18000426 	beq	r3,zero,401b4a8 <__muldf3+0x520>
 401b498:	11410004 	addi	r5,r2,1024
 401b49c:	00bfc034 	movhi	r2,65280
 401b4a0:	10bfffc4 	addi	r2,r2,-1
 401b4a4:	88a2703a 	and	r17,r17,r2
 401b4a8:	0081ff84 	movi	r2,2046
 401b4ac:	117f6416 	blt	r2,r5,401b240 <__alt_data_end+0xfc01b240>
 401b4b0:	8828977a 	slli	r20,r17,29
 401b4b4:	4010d0fa 	srli	r8,r8,3
 401b4b8:	8822927a 	slli	r17,r17,9
 401b4bc:	2881ffcc 	andi	r2,r5,2047
 401b4c0:	a228b03a 	or	r20,r20,r8
 401b4c4:	880ad33a 	srli	r5,r17,12
 401b4c8:	b02b883a 	mov	r21,r22
 401b4cc:	003f0d06 	br	401b104 <__alt_data_end+0xfc01b104>
 401b4d0:	8080022c 	andhi	r2,r16,8
 401b4d4:	10000926 	beq	r2,zero,401b4fc <__muldf3+0x574>
 401b4d8:	8880022c 	andhi	r2,r17,8
 401b4dc:	1000071e 	bne	r2,zero,401b4fc <__muldf3+0x574>
 401b4e0:	00800434 	movhi	r2,16
 401b4e4:	89400234 	orhi	r5,r17,8
 401b4e8:	10bfffc4 	addi	r2,r2,-1
 401b4ec:	b82b883a 	mov	r21,r23
 401b4f0:	288a703a 	and	r5,r5,r2
 401b4f4:	4029883a 	mov	r20,r8
 401b4f8:	003f6806 	br	401b29c <__alt_data_end+0xfc01b29c>
 401b4fc:	00800434 	movhi	r2,16
 401b500:	81400234 	orhi	r5,r16,8
 401b504:	10bfffc4 	addi	r2,r2,-1
 401b508:	288a703a 	and	r5,r5,r2
 401b50c:	003f6306 	br	401b29c <__alt_data_end+0xfc01b29c>
 401b510:	147ff604 	addi	r17,r2,-40
 401b514:	3462983a 	sll	r17,r6,r17
 401b518:	0011883a 	mov	r8,zero
 401b51c:	003f4406 	br	401b230 <__alt_data_end+0xfc01b230>
 401b520:	3009883a 	mov	r4,r6
 401b524:	d9800215 	stw	r6,8(sp)
 401b528:	da400115 	stw	r9,4(sp)
 401b52c:	da800015 	stw	r10,0(sp)
 401b530:	401c1a00 	call	401c1a0 <__clzsi2>
 401b534:	10800804 	addi	r2,r2,32
 401b538:	da800017 	ldw	r10,0(sp)
 401b53c:	da400117 	ldw	r9,4(sp)
 401b540:	d9800217 	ldw	r6,8(sp)
 401b544:	003f3006 	br	401b208 <__alt_data_end+0xfc01b208>
 401b548:	143ff604 	addi	r16,r2,-40
 401b54c:	9c20983a 	sll	r16,r19,r16
 401b550:	0029883a 	mov	r20,zero
 401b554:	003f1606 	br	401b1b0 <__alt_data_end+0xfc01b1b0>
 401b558:	d9800215 	stw	r6,8(sp)
 401b55c:	d9c00015 	stw	r7,0(sp)
 401b560:	da400115 	stw	r9,4(sp)
 401b564:	401c1a00 	call	401c1a0 <__clzsi2>
 401b568:	10800804 	addi	r2,r2,32
 401b56c:	da400117 	ldw	r9,4(sp)
 401b570:	d9c00017 	ldw	r7,0(sp)
 401b574:	d9800217 	ldw	r6,8(sp)
 401b578:	003f0306 	br	401b188 <__alt_data_end+0xfc01b188>
 401b57c:	00c00044 	movi	r3,1
 401b580:	1947c83a 	sub	r3,r3,r5
 401b584:	00800e04 	movi	r2,56
 401b588:	10feda16 	blt	r2,r3,401b0f4 <__alt_data_end+0xfc01b0f4>
 401b58c:	008007c4 	movi	r2,31
 401b590:	10c01b16 	blt	r2,r3,401b600 <__muldf3+0x678>
 401b594:	00800804 	movi	r2,32
 401b598:	10c5c83a 	sub	r2,r2,r3
 401b59c:	888a983a 	sll	r5,r17,r2
 401b5a0:	40c8d83a 	srl	r4,r8,r3
 401b5a4:	4084983a 	sll	r2,r8,r2
 401b5a8:	88e2d83a 	srl	r17,r17,r3
 401b5ac:	2906b03a 	or	r3,r5,r4
 401b5b0:	1004c03a 	cmpne	r2,r2,zero
 401b5b4:	1886b03a 	or	r3,r3,r2
 401b5b8:	188001cc 	andi	r2,r3,7
 401b5bc:	10000726 	beq	r2,zero,401b5dc <__muldf3+0x654>
 401b5c0:	188003cc 	andi	r2,r3,15
 401b5c4:	01000104 	movi	r4,4
 401b5c8:	11000426 	beq	r2,r4,401b5dc <__muldf3+0x654>
 401b5cc:	1805883a 	mov	r2,r3
 401b5d0:	10c00104 	addi	r3,r2,4
 401b5d4:	1885803a 	cmpltu	r2,r3,r2
 401b5d8:	88a3883a 	add	r17,r17,r2
 401b5dc:	8880202c 	andhi	r2,r17,128
 401b5e0:	10001c26 	beq	r2,zero,401b654 <__muldf3+0x6cc>
 401b5e4:	b02b883a 	mov	r21,r22
 401b5e8:	00800044 	movi	r2,1
 401b5ec:	000b883a 	mov	r5,zero
 401b5f0:	0029883a 	mov	r20,zero
 401b5f4:	003ec306 	br	401b104 <__alt_data_end+0xfc01b104>
 401b5f8:	5805883a 	mov	r2,r11
 401b5fc:	003f9906 	br	401b464 <__alt_data_end+0xfc01b464>
 401b600:	00bff844 	movi	r2,-31
 401b604:	1145c83a 	sub	r2,r2,r5
 401b608:	8888d83a 	srl	r4,r17,r2
 401b60c:	00800804 	movi	r2,32
 401b610:	18801a26 	beq	r3,r2,401b67c <__muldf3+0x6f4>
 401b614:	00801004 	movi	r2,64
 401b618:	10c5c83a 	sub	r2,r2,r3
 401b61c:	8884983a 	sll	r2,r17,r2
 401b620:	1204b03a 	or	r2,r2,r8
 401b624:	1004c03a 	cmpne	r2,r2,zero
 401b628:	2084b03a 	or	r2,r4,r2
 401b62c:	144001cc 	andi	r17,r2,7
 401b630:	88000d1e 	bne	r17,zero,401b668 <__muldf3+0x6e0>
 401b634:	000b883a 	mov	r5,zero
 401b638:	1028d0fa 	srli	r20,r2,3
 401b63c:	b02b883a 	mov	r21,r22
 401b640:	0005883a 	mov	r2,zero
 401b644:	a468b03a 	or	r20,r20,r17
 401b648:	003eae06 	br	401b104 <__alt_data_end+0xfc01b104>
 401b64c:	1007883a 	mov	r3,r2
 401b650:	0023883a 	mov	r17,zero
 401b654:	880a927a 	slli	r5,r17,9
 401b658:	1805883a 	mov	r2,r3
 401b65c:	8822977a 	slli	r17,r17,29
 401b660:	280ad33a 	srli	r5,r5,12
 401b664:	003ff406 	br	401b638 <__alt_data_end+0xfc01b638>
 401b668:	10c003cc 	andi	r3,r2,15
 401b66c:	01000104 	movi	r4,4
 401b670:	193ff626 	beq	r3,r4,401b64c <__alt_data_end+0xfc01b64c>
 401b674:	0023883a 	mov	r17,zero
 401b678:	003fd506 	br	401b5d0 <__alt_data_end+0xfc01b5d0>
 401b67c:	0005883a 	mov	r2,zero
 401b680:	003fe706 	br	401b620 <__alt_data_end+0xfc01b620>
 401b684:	00800434 	movhi	r2,16
 401b688:	89400234 	orhi	r5,r17,8
 401b68c:	10bfffc4 	addi	r2,r2,-1
 401b690:	b02b883a 	mov	r21,r22
 401b694:	288a703a 	and	r5,r5,r2
 401b698:	4029883a 	mov	r20,r8
 401b69c:	003eff06 	br	401b29c <__alt_data_end+0xfc01b29c>

0401b6a0 <__subdf3>:
 401b6a0:	02000434 	movhi	r8,16
 401b6a4:	423fffc4 	addi	r8,r8,-1
 401b6a8:	defffb04 	addi	sp,sp,-20
 401b6ac:	2a14703a 	and	r10,r5,r8
 401b6b0:	3812d53a 	srli	r9,r7,20
 401b6b4:	3a10703a 	and	r8,r7,r8
 401b6b8:	2006d77a 	srli	r3,r4,29
 401b6bc:	3004d77a 	srli	r2,r6,29
 401b6c0:	dc000015 	stw	r16,0(sp)
 401b6c4:	501490fa 	slli	r10,r10,3
 401b6c8:	2820d53a 	srli	r16,r5,20
 401b6cc:	401090fa 	slli	r8,r8,3
 401b6d0:	dc800215 	stw	r18,8(sp)
 401b6d4:	dc400115 	stw	r17,4(sp)
 401b6d8:	dfc00415 	stw	ra,16(sp)
 401b6dc:	202290fa 	slli	r17,r4,3
 401b6e0:	dcc00315 	stw	r19,12(sp)
 401b6e4:	4a41ffcc 	andi	r9,r9,2047
 401b6e8:	0101ffc4 	movi	r4,2047
 401b6ec:	2824d7fa 	srli	r18,r5,31
 401b6f0:	8401ffcc 	andi	r16,r16,2047
 401b6f4:	50c6b03a 	or	r3,r10,r3
 401b6f8:	380ed7fa 	srli	r7,r7,31
 401b6fc:	408ab03a 	or	r5,r8,r2
 401b700:	300c90fa 	slli	r6,r6,3
 401b704:	49009626 	beq	r9,r4,401b960 <__subdf3+0x2c0>
 401b708:	39c0005c 	xori	r7,r7,1
 401b70c:	8245c83a 	sub	r2,r16,r9
 401b710:	3c807426 	beq	r7,r18,401b8e4 <__subdf3+0x244>
 401b714:	0080af0e 	bge	zero,r2,401b9d4 <__subdf3+0x334>
 401b718:	48002a1e 	bne	r9,zero,401b7c4 <__subdf3+0x124>
 401b71c:	2988b03a 	or	r4,r5,r6
 401b720:	20009a1e 	bne	r4,zero,401b98c <__subdf3+0x2ec>
 401b724:	888001cc 	andi	r2,r17,7
 401b728:	10000726 	beq	r2,zero,401b748 <__subdf3+0xa8>
 401b72c:	888003cc 	andi	r2,r17,15
 401b730:	01000104 	movi	r4,4
 401b734:	11000426 	beq	r2,r4,401b748 <__subdf3+0xa8>
 401b738:	890b883a 	add	r5,r17,r4
 401b73c:	2c63803a 	cmpltu	r17,r5,r17
 401b740:	1c47883a 	add	r3,r3,r17
 401b744:	2823883a 	mov	r17,r5
 401b748:	1880202c 	andhi	r2,r3,128
 401b74c:	10005926 	beq	r2,zero,401b8b4 <__subdf3+0x214>
 401b750:	84000044 	addi	r16,r16,1
 401b754:	0081ffc4 	movi	r2,2047
 401b758:	8080be26 	beq	r16,r2,401ba54 <__subdf3+0x3b4>
 401b75c:	017fe034 	movhi	r5,65408
 401b760:	297fffc4 	addi	r5,r5,-1
 401b764:	1946703a 	and	r3,r3,r5
 401b768:	1804977a 	slli	r2,r3,29
 401b76c:	1806927a 	slli	r3,r3,9
 401b770:	8822d0fa 	srli	r17,r17,3
 401b774:	8401ffcc 	andi	r16,r16,2047
 401b778:	180ad33a 	srli	r5,r3,12
 401b77c:	9100004c 	andi	r4,r18,1
 401b780:	1444b03a 	or	r2,r2,r17
 401b784:	80c1ffcc 	andi	r3,r16,2047
 401b788:	1820953a 	slli	r16,r3,20
 401b78c:	20c03fcc 	andi	r3,r4,255
 401b790:	180897fa 	slli	r4,r3,31
 401b794:	00c00434 	movhi	r3,16
 401b798:	18ffffc4 	addi	r3,r3,-1
 401b79c:	28c6703a 	and	r3,r5,r3
 401b7a0:	1c06b03a 	or	r3,r3,r16
 401b7a4:	1906b03a 	or	r3,r3,r4
 401b7a8:	dfc00417 	ldw	ra,16(sp)
 401b7ac:	dcc00317 	ldw	r19,12(sp)
 401b7b0:	dc800217 	ldw	r18,8(sp)
 401b7b4:	dc400117 	ldw	r17,4(sp)
 401b7b8:	dc000017 	ldw	r16,0(sp)
 401b7bc:	dec00504 	addi	sp,sp,20
 401b7c0:	f800283a 	ret
 401b7c4:	0101ffc4 	movi	r4,2047
 401b7c8:	813fd626 	beq	r16,r4,401b724 <__alt_data_end+0xfc01b724>
 401b7cc:	29402034 	orhi	r5,r5,128
 401b7d0:	01000e04 	movi	r4,56
 401b7d4:	2080a316 	blt	r4,r2,401ba64 <__subdf3+0x3c4>
 401b7d8:	010007c4 	movi	r4,31
 401b7dc:	2080c616 	blt	r4,r2,401baf8 <__subdf3+0x458>
 401b7e0:	01000804 	movi	r4,32
 401b7e4:	2089c83a 	sub	r4,r4,r2
 401b7e8:	2910983a 	sll	r8,r5,r4
 401b7ec:	308ed83a 	srl	r7,r6,r2
 401b7f0:	3108983a 	sll	r4,r6,r4
 401b7f4:	2884d83a 	srl	r2,r5,r2
 401b7f8:	41ccb03a 	or	r6,r8,r7
 401b7fc:	2008c03a 	cmpne	r4,r4,zero
 401b800:	310cb03a 	or	r6,r6,r4
 401b804:	898dc83a 	sub	r6,r17,r6
 401b808:	89a3803a 	cmpltu	r17,r17,r6
 401b80c:	1887c83a 	sub	r3,r3,r2
 401b810:	1c47c83a 	sub	r3,r3,r17
 401b814:	3023883a 	mov	r17,r6
 401b818:	1880202c 	andhi	r2,r3,128
 401b81c:	10002326 	beq	r2,zero,401b8ac <__subdf3+0x20c>
 401b820:	04c02034 	movhi	r19,128
 401b824:	9cffffc4 	addi	r19,r19,-1
 401b828:	1ce6703a 	and	r19,r3,r19
 401b82c:	98007a26 	beq	r19,zero,401ba18 <__subdf3+0x378>
 401b830:	9809883a 	mov	r4,r19
 401b834:	401c1a00 	call	401c1a0 <__clzsi2>
 401b838:	113ffe04 	addi	r4,r2,-8
 401b83c:	00c007c4 	movi	r3,31
 401b840:	19007b16 	blt	r3,r4,401ba30 <__subdf3+0x390>
 401b844:	00800804 	movi	r2,32
 401b848:	1105c83a 	sub	r2,r2,r4
 401b84c:	8884d83a 	srl	r2,r17,r2
 401b850:	9906983a 	sll	r3,r19,r4
 401b854:	8922983a 	sll	r17,r17,r4
 401b858:	10c4b03a 	or	r2,r2,r3
 401b85c:	24007816 	blt	r4,r16,401ba40 <__subdf3+0x3a0>
 401b860:	2421c83a 	sub	r16,r4,r16
 401b864:	80c00044 	addi	r3,r16,1
 401b868:	010007c4 	movi	r4,31
 401b86c:	20c09516 	blt	r4,r3,401bac4 <__subdf3+0x424>
 401b870:	01400804 	movi	r5,32
 401b874:	28cbc83a 	sub	r5,r5,r3
 401b878:	88c8d83a 	srl	r4,r17,r3
 401b87c:	8962983a 	sll	r17,r17,r5
 401b880:	114a983a 	sll	r5,r2,r5
 401b884:	10c6d83a 	srl	r3,r2,r3
 401b888:	8804c03a 	cmpne	r2,r17,zero
 401b88c:	290ab03a 	or	r5,r5,r4
 401b890:	28a2b03a 	or	r17,r5,r2
 401b894:	0021883a 	mov	r16,zero
 401b898:	003fa206 	br	401b724 <__alt_data_end+0xfc01b724>
 401b89c:	2090b03a 	or	r8,r4,r2
 401b8a0:	40018e26 	beq	r8,zero,401bedc <__subdf3+0x83c>
 401b8a4:	1007883a 	mov	r3,r2
 401b8a8:	2023883a 	mov	r17,r4
 401b8ac:	888001cc 	andi	r2,r17,7
 401b8b0:	103f9e1e 	bne	r2,zero,401b72c <__alt_data_end+0xfc01b72c>
 401b8b4:	1804977a 	slli	r2,r3,29
 401b8b8:	8822d0fa 	srli	r17,r17,3
 401b8bc:	1810d0fa 	srli	r8,r3,3
 401b8c0:	9100004c 	andi	r4,r18,1
 401b8c4:	1444b03a 	or	r2,r2,r17
 401b8c8:	00c1ffc4 	movi	r3,2047
 401b8cc:	80c02826 	beq	r16,r3,401b970 <__subdf3+0x2d0>
 401b8d0:	01400434 	movhi	r5,16
 401b8d4:	297fffc4 	addi	r5,r5,-1
 401b8d8:	80e0703a 	and	r16,r16,r3
 401b8dc:	414a703a 	and	r5,r8,r5
 401b8e0:	003fa806 	br	401b784 <__alt_data_end+0xfc01b784>
 401b8e4:	0080630e 	bge	zero,r2,401ba74 <__subdf3+0x3d4>
 401b8e8:	48003026 	beq	r9,zero,401b9ac <__subdf3+0x30c>
 401b8ec:	0101ffc4 	movi	r4,2047
 401b8f0:	813f8c26 	beq	r16,r4,401b724 <__alt_data_end+0xfc01b724>
 401b8f4:	29402034 	orhi	r5,r5,128
 401b8f8:	01000e04 	movi	r4,56
 401b8fc:	2080a90e 	bge	r4,r2,401bba4 <__subdf3+0x504>
 401b900:	298cb03a 	or	r6,r5,r6
 401b904:	3012c03a 	cmpne	r9,r6,zero
 401b908:	0005883a 	mov	r2,zero
 401b90c:	4c53883a 	add	r9,r9,r17
 401b910:	4c63803a 	cmpltu	r17,r9,r17
 401b914:	10c7883a 	add	r3,r2,r3
 401b918:	88c7883a 	add	r3,r17,r3
 401b91c:	4823883a 	mov	r17,r9
 401b920:	1880202c 	andhi	r2,r3,128
 401b924:	1000d026 	beq	r2,zero,401bc68 <__subdf3+0x5c8>
 401b928:	84000044 	addi	r16,r16,1
 401b92c:	0081ffc4 	movi	r2,2047
 401b930:	8080fe26 	beq	r16,r2,401bd2c <__subdf3+0x68c>
 401b934:	00bfe034 	movhi	r2,65408
 401b938:	10bfffc4 	addi	r2,r2,-1
 401b93c:	1886703a 	and	r3,r3,r2
 401b940:	880ad07a 	srli	r5,r17,1
 401b944:	180497fa 	slli	r2,r3,31
 401b948:	8900004c 	andi	r4,r17,1
 401b94c:	2922b03a 	or	r17,r5,r4
 401b950:	1806d07a 	srli	r3,r3,1
 401b954:	1462b03a 	or	r17,r2,r17
 401b958:	3825883a 	mov	r18,r7
 401b95c:	003f7106 	br	401b724 <__alt_data_end+0xfc01b724>
 401b960:	2984b03a 	or	r2,r5,r6
 401b964:	103f6826 	beq	r2,zero,401b708 <__alt_data_end+0xfc01b708>
 401b968:	39c03fcc 	andi	r7,r7,255
 401b96c:	003f6706 	br	401b70c <__alt_data_end+0xfc01b70c>
 401b970:	4086b03a 	or	r3,r8,r2
 401b974:	18015226 	beq	r3,zero,401bec0 <__subdf3+0x820>
 401b978:	00c00434 	movhi	r3,16
 401b97c:	41400234 	orhi	r5,r8,8
 401b980:	18ffffc4 	addi	r3,r3,-1
 401b984:	28ca703a 	and	r5,r5,r3
 401b988:	003f7e06 	br	401b784 <__alt_data_end+0xfc01b784>
 401b98c:	10bfffc4 	addi	r2,r2,-1
 401b990:	1000491e 	bne	r2,zero,401bab8 <__subdf3+0x418>
 401b994:	898fc83a 	sub	r7,r17,r6
 401b998:	89e3803a 	cmpltu	r17,r17,r7
 401b99c:	1947c83a 	sub	r3,r3,r5
 401b9a0:	1c47c83a 	sub	r3,r3,r17
 401b9a4:	3823883a 	mov	r17,r7
 401b9a8:	003f9b06 	br	401b818 <__alt_data_end+0xfc01b818>
 401b9ac:	2988b03a 	or	r4,r5,r6
 401b9b0:	203f5c26 	beq	r4,zero,401b724 <__alt_data_end+0xfc01b724>
 401b9b4:	10bfffc4 	addi	r2,r2,-1
 401b9b8:	1000931e 	bne	r2,zero,401bc08 <__subdf3+0x568>
 401b9bc:	898d883a 	add	r6,r17,r6
 401b9c0:	3463803a 	cmpltu	r17,r6,r17
 401b9c4:	1947883a 	add	r3,r3,r5
 401b9c8:	88c7883a 	add	r3,r17,r3
 401b9cc:	3023883a 	mov	r17,r6
 401b9d0:	003fd306 	br	401b920 <__alt_data_end+0xfc01b920>
 401b9d4:	1000541e 	bne	r2,zero,401bb28 <__subdf3+0x488>
 401b9d8:	80800044 	addi	r2,r16,1
 401b9dc:	1081ffcc 	andi	r2,r2,2047
 401b9e0:	01000044 	movi	r4,1
 401b9e4:	2080a20e 	bge	r4,r2,401bc70 <__subdf3+0x5d0>
 401b9e8:	8989c83a 	sub	r4,r17,r6
 401b9ec:	8905803a 	cmpltu	r2,r17,r4
 401b9f0:	1967c83a 	sub	r19,r3,r5
 401b9f4:	98a7c83a 	sub	r19,r19,r2
 401b9f8:	9880202c 	andhi	r2,r19,128
 401b9fc:	10006326 	beq	r2,zero,401bb8c <__subdf3+0x4ec>
 401ba00:	3463c83a 	sub	r17,r6,r17
 401ba04:	28c7c83a 	sub	r3,r5,r3
 401ba08:	344d803a 	cmpltu	r6,r6,r17
 401ba0c:	19a7c83a 	sub	r19,r3,r6
 401ba10:	3825883a 	mov	r18,r7
 401ba14:	983f861e 	bne	r19,zero,401b830 <__alt_data_end+0xfc01b830>
 401ba18:	8809883a 	mov	r4,r17
 401ba1c:	401c1a00 	call	401c1a0 <__clzsi2>
 401ba20:	10800804 	addi	r2,r2,32
 401ba24:	113ffe04 	addi	r4,r2,-8
 401ba28:	00c007c4 	movi	r3,31
 401ba2c:	193f850e 	bge	r3,r4,401b844 <__alt_data_end+0xfc01b844>
 401ba30:	10bff604 	addi	r2,r2,-40
 401ba34:	8884983a 	sll	r2,r17,r2
 401ba38:	0023883a 	mov	r17,zero
 401ba3c:	243f880e 	bge	r4,r16,401b860 <__alt_data_end+0xfc01b860>
 401ba40:	00ffe034 	movhi	r3,65408
 401ba44:	18ffffc4 	addi	r3,r3,-1
 401ba48:	8121c83a 	sub	r16,r16,r4
 401ba4c:	10c6703a 	and	r3,r2,r3
 401ba50:	003f3406 	br	401b724 <__alt_data_end+0xfc01b724>
 401ba54:	9100004c 	andi	r4,r18,1
 401ba58:	000b883a 	mov	r5,zero
 401ba5c:	0005883a 	mov	r2,zero
 401ba60:	003f4806 	br	401b784 <__alt_data_end+0xfc01b784>
 401ba64:	298cb03a 	or	r6,r5,r6
 401ba68:	300cc03a 	cmpne	r6,r6,zero
 401ba6c:	0005883a 	mov	r2,zero
 401ba70:	003f6406 	br	401b804 <__alt_data_end+0xfc01b804>
 401ba74:	10009a1e 	bne	r2,zero,401bce0 <__subdf3+0x640>
 401ba78:	82400044 	addi	r9,r16,1
 401ba7c:	4881ffcc 	andi	r2,r9,2047
 401ba80:	02800044 	movi	r10,1
 401ba84:	5080670e 	bge	r10,r2,401bc24 <__subdf3+0x584>
 401ba88:	0081ffc4 	movi	r2,2047
 401ba8c:	4880af26 	beq	r9,r2,401bd4c <__subdf3+0x6ac>
 401ba90:	898d883a 	add	r6,r17,r6
 401ba94:	1945883a 	add	r2,r3,r5
 401ba98:	3447803a 	cmpltu	r3,r6,r17
 401ba9c:	1887883a 	add	r3,r3,r2
 401baa0:	182297fa 	slli	r17,r3,31
 401baa4:	300cd07a 	srli	r6,r6,1
 401baa8:	1806d07a 	srli	r3,r3,1
 401baac:	4821883a 	mov	r16,r9
 401bab0:	89a2b03a 	or	r17,r17,r6
 401bab4:	003f1b06 	br	401b724 <__alt_data_end+0xfc01b724>
 401bab8:	0101ffc4 	movi	r4,2047
 401babc:	813f441e 	bne	r16,r4,401b7d0 <__alt_data_end+0xfc01b7d0>
 401bac0:	003f1806 	br	401b724 <__alt_data_end+0xfc01b724>
 401bac4:	843ff844 	addi	r16,r16,-31
 401bac8:	01400804 	movi	r5,32
 401bacc:	1408d83a 	srl	r4,r2,r16
 401bad0:	19405026 	beq	r3,r5,401bc14 <__subdf3+0x574>
 401bad4:	01401004 	movi	r5,64
 401bad8:	28c7c83a 	sub	r3,r5,r3
 401badc:	10c4983a 	sll	r2,r2,r3
 401bae0:	88a2b03a 	or	r17,r17,r2
 401bae4:	8822c03a 	cmpne	r17,r17,zero
 401bae8:	2462b03a 	or	r17,r4,r17
 401baec:	0007883a 	mov	r3,zero
 401baf0:	0021883a 	mov	r16,zero
 401baf4:	003f6d06 	br	401b8ac <__alt_data_end+0xfc01b8ac>
 401baf8:	11fff804 	addi	r7,r2,-32
 401bafc:	01000804 	movi	r4,32
 401bb00:	29ced83a 	srl	r7,r5,r7
 401bb04:	11004526 	beq	r2,r4,401bc1c <__subdf3+0x57c>
 401bb08:	01001004 	movi	r4,64
 401bb0c:	2089c83a 	sub	r4,r4,r2
 401bb10:	2904983a 	sll	r2,r5,r4
 401bb14:	118cb03a 	or	r6,r2,r6
 401bb18:	300cc03a 	cmpne	r6,r6,zero
 401bb1c:	398cb03a 	or	r6,r7,r6
 401bb20:	0005883a 	mov	r2,zero
 401bb24:	003f3706 	br	401b804 <__alt_data_end+0xfc01b804>
 401bb28:	80002a26 	beq	r16,zero,401bbd4 <__subdf3+0x534>
 401bb2c:	0101ffc4 	movi	r4,2047
 401bb30:	49006626 	beq	r9,r4,401bccc <__subdf3+0x62c>
 401bb34:	0085c83a 	sub	r2,zero,r2
 401bb38:	18c02034 	orhi	r3,r3,128
 401bb3c:	01000e04 	movi	r4,56
 401bb40:	20807e16 	blt	r4,r2,401bd3c <__subdf3+0x69c>
 401bb44:	010007c4 	movi	r4,31
 401bb48:	2080e716 	blt	r4,r2,401bee8 <__subdf3+0x848>
 401bb4c:	01000804 	movi	r4,32
 401bb50:	2089c83a 	sub	r4,r4,r2
 401bb54:	1914983a 	sll	r10,r3,r4
 401bb58:	8890d83a 	srl	r8,r17,r2
 401bb5c:	8908983a 	sll	r4,r17,r4
 401bb60:	1884d83a 	srl	r2,r3,r2
 401bb64:	5222b03a 	or	r17,r10,r8
 401bb68:	2006c03a 	cmpne	r3,r4,zero
 401bb6c:	88e2b03a 	or	r17,r17,r3
 401bb70:	3463c83a 	sub	r17,r6,r17
 401bb74:	2885c83a 	sub	r2,r5,r2
 401bb78:	344d803a 	cmpltu	r6,r6,r17
 401bb7c:	1187c83a 	sub	r3,r2,r6
 401bb80:	4821883a 	mov	r16,r9
 401bb84:	3825883a 	mov	r18,r7
 401bb88:	003f2306 	br	401b818 <__alt_data_end+0xfc01b818>
 401bb8c:	24d0b03a 	or	r8,r4,r19
 401bb90:	40001b1e 	bne	r8,zero,401bc00 <__subdf3+0x560>
 401bb94:	0005883a 	mov	r2,zero
 401bb98:	0009883a 	mov	r4,zero
 401bb9c:	0021883a 	mov	r16,zero
 401bba0:	003f4906 	br	401b8c8 <__alt_data_end+0xfc01b8c8>
 401bba4:	010007c4 	movi	r4,31
 401bba8:	20803a16 	blt	r4,r2,401bc94 <__subdf3+0x5f4>
 401bbac:	01000804 	movi	r4,32
 401bbb0:	2089c83a 	sub	r4,r4,r2
 401bbb4:	2912983a 	sll	r9,r5,r4
 401bbb8:	3090d83a 	srl	r8,r6,r2
 401bbbc:	3108983a 	sll	r4,r6,r4
 401bbc0:	2884d83a 	srl	r2,r5,r2
 401bbc4:	4a12b03a 	or	r9,r9,r8
 401bbc8:	2008c03a 	cmpne	r4,r4,zero
 401bbcc:	4912b03a 	or	r9,r9,r4
 401bbd0:	003f4e06 	br	401b90c <__alt_data_end+0xfc01b90c>
 401bbd4:	1c48b03a 	or	r4,r3,r17
 401bbd8:	20003c26 	beq	r4,zero,401bccc <__subdf3+0x62c>
 401bbdc:	0084303a 	nor	r2,zero,r2
 401bbe0:	1000381e 	bne	r2,zero,401bcc4 <__subdf3+0x624>
 401bbe4:	3463c83a 	sub	r17,r6,r17
 401bbe8:	28c5c83a 	sub	r2,r5,r3
 401bbec:	344d803a 	cmpltu	r6,r6,r17
 401bbf0:	1187c83a 	sub	r3,r2,r6
 401bbf4:	4821883a 	mov	r16,r9
 401bbf8:	3825883a 	mov	r18,r7
 401bbfc:	003f0606 	br	401b818 <__alt_data_end+0xfc01b818>
 401bc00:	2023883a 	mov	r17,r4
 401bc04:	003f0906 	br	401b82c <__alt_data_end+0xfc01b82c>
 401bc08:	0101ffc4 	movi	r4,2047
 401bc0c:	813f3a1e 	bne	r16,r4,401b8f8 <__alt_data_end+0xfc01b8f8>
 401bc10:	003ec406 	br	401b724 <__alt_data_end+0xfc01b724>
 401bc14:	0005883a 	mov	r2,zero
 401bc18:	003fb106 	br	401bae0 <__alt_data_end+0xfc01bae0>
 401bc1c:	0005883a 	mov	r2,zero
 401bc20:	003fbc06 	br	401bb14 <__alt_data_end+0xfc01bb14>
 401bc24:	1c44b03a 	or	r2,r3,r17
 401bc28:	80008e1e 	bne	r16,zero,401be64 <__subdf3+0x7c4>
 401bc2c:	1000c826 	beq	r2,zero,401bf50 <__subdf3+0x8b0>
 401bc30:	2984b03a 	or	r2,r5,r6
 401bc34:	103ebb26 	beq	r2,zero,401b724 <__alt_data_end+0xfc01b724>
 401bc38:	8989883a 	add	r4,r17,r6
 401bc3c:	1945883a 	add	r2,r3,r5
 401bc40:	2447803a 	cmpltu	r3,r4,r17
 401bc44:	1887883a 	add	r3,r3,r2
 401bc48:	1880202c 	andhi	r2,r3,128
 401bc4c:	2023883a 	mov	r17,r4
 401bc50:	103f1626 	beq	r2,zero,401b8ac <__alt_data_end+0xfc01b8ac>
 401bc54:	00bfe034 	movhi	r2,65408
 401bc58:	10bfffc4 	addi	r2,r2,-1
 401bc5c:	5021883a 	mov	r16,r10
 401bc60:	1886703a 	and	r3,r3,r2
 401bc64:	003eaf06 	br	401b724 <__alt_data_end+0xfc01b724>
 401bc68:	3825883a 	mov	r18,r7
 401bc6c:	003f0f06 	br	401b8ac <__alt_data_end+0xfc01b8ac>
 401bc70:	1c44b03a 	or	r2,r3,r17
 401bc74:	8000251e 	bne	r16,zero,401bd0c <__subdf3+0x66c>
 401bc78:	1000661e 	bne	r2,zero,401be14 <__subdf3+0x774>
 401bc7c:	2990b03a 	or	r8,r5,r6
 401bc80:	40009626 	beq	r8,zero,401bedc <__subdf3+0x83c>
 401bc84:	2807883a 	mov	r3,r5
 401bc88:	3023883a 	mov	r17,r6
 401bc8c:	3825883a 	mov	r18,r7
 401bc90:	003ea406 	br	401b724 <__alt_data_end+0xfc01b724>
 401bc94:	127ff804 	addi	r9,r2,-32
 401bc98:	01000804 	movi	r4,32
 401bc9c:	2a52d83a 	srl	r9,r5,r9
 401bca0:	11008c26 	beq	r2,r4,401bed4 <__subdf3+0x834>
 401bca4:	01001004 	movi	r4,64
 401bca8:	2085c83a 	sub	r2,r4,r2
 401bcac:	2884983a 	sll	r2,r5,r2
 401bcb0:	118cb03a 	or	r6,r2,r6
 401bcb4:	300cc03a 	cmpne	r6,r6,zero
 401bcb8:	4992b03a 	or	r9,r9,r6
 401bcbc:	0005883a 	mov	r2,zero
 401bcc0:	003f1206 	br	401b90c <__alt_data_end+0xfc01b90c>
 401bcc4:	0101ffc4 	movi	r4,2047
 401bcc8:	493f9c1e 	bne	r9,r4,401bb3c <__alt_data_end+0xfc01bb3c>
 401bccc:	2807883a 	mov	r3,r5
 401bcd0:	3023883a 	mov	r17,r6
 401bcd4:	4821883a 	mov	r16,r9
 401bcd8:	3825883a 	mov	r18,r7
 401bcdc:	003e9106 	br	401b724 <__alt_data_end+0xfc01b724>
 401bce0:	80001f1e 	bne	r16,zero,401bd60 <__subdf3+0x6c0>
 401bce4:	1c48b03a 	or	r4,r3,r17
 401bce8:	20005a26 	beq	r4,zero,401be54 <__subdf3+0x7b4>
 401bcec:	0084303a 	nor	r2,zero,r2
 401bcf0:	1000561e 	bne	r2,zero,401be4c <__subdf3+0x7ac>
 401bcf4:	89a3883a 	add	r17,r17,r6
 401bcf8:	1945883a 	add	r2,r3,r5
 401bcfc:	898d803a 	cmpltu	r6,r17,r6
 401bd00:	3087883a 	add	r3,r6,r2
 401bd04:	4821883a 	mov	r16,r9
 401bd08:	003f0506 	br	401b920 <__alt_data_end+0xfc01b920>
 401bd0c:	10002b1e 	bne	r2,zero,401bdbc <__subdf3+0x71c>
 401bd10:	2984b03a 	or	r2,r5,r6
 401bd14:	10008026 	beq	r2,zero,401bf18 <__subdf3+0x878>
 401bd18:	2807883a 	mov	r3,r5
 401bd1c:	3023883a 	mov	r17,r6
 401bd20:	3825883a 	mov	r18,r7
 401bd24:	0401ffc4 	movi	r16,2047
 401bd28:	003e7e06 	br	401b724 <__alt_data_end+0xfc01b724>
 401bd2c:	3809883a 	mov	r4,r7
 401bd30:	0011883a 	mov	r8,zero
 401bd34:	0005883a 	mov	r2,zero
 401bd38:	003ee306 	br	401b8c8 <__alt_data_end+0xfc01b8c8>
 401bd3c:	1c62b03a 	or	r17,r3,r17
 401bd40:	8822c03a 	cmpne	r17,r17,zero
 401bd44:	0005883a 	mov	r2,zero
 401bd48:	003f8906 	br	401bb70 <__alt_data_end+0xfc01bb70>
 401bd4c:	3809883a 	mov	r4,r7
 401bd50:	4821883a 	mov	r16,r9
 401bd54:	0011883a 	mov	r8,zero
 401bd58:	0005883a 	mov	r2,zero
 401bd5c:	003eda06 	br	401b8c8 <__alt_data_end+0xfc01b8c8>
 401bd60:	0101ffc4 	movi	r4,2047
 401bd64:	49003b26 	beq	r9,r4,401be54 <__subdf3+0x7b4>
 401bd68:	0085c83a 	sub	r2,zero,r2
 401bd6c:	18c02034 	orhi	r3,r3,128
 401bd70:	01000e04 	movi	r4,56
 401bd74:	20806e16 	blt	r4,r2,401bf30 <__subdf3+0x890>
 401bd78:	010007c4 	movi	r4,31
 401bd7c:	20807716 	blt	r4,r2,401bf5c <__subdf3+0x8bc>
 401bd80:	01000804 	movi	r4,32
 401bd84:	2089c83a 	sub	r4,r4,r2
 401bd88:	1914983a 	sll	r10,r3,r4
 401bd8c:	8890d83a 	srl	r8,r17,r2
 401bd90:	8908983a 	sll	r4,r17,r4
 401bd94:	1884d83a 	srl	r2,r3,r2
 401bd98:	5222b03a 	or	r17,r10,r8
 401bd9c:	2006c03a 	cmpne	r3,r4,zero
 401bda0:	88e2b03a 	or	r17,r17,r3
 401bda4:	89a3883a 	add	r17,r17,r6
 401bda8:	1145883a 	add	r2,r2,r5
 401bdac:	898d803a 	cmpltu	r6,r17,r6
 401bdb0:	3087883a 	add	r3,r6,r2
 401bdb4:	4821883a 	mov	r16,r9
 401bdb8:	003ed906 	br	401b920 <__alt_data_end+0xfc01b920>
 401bdbc:	2984b03a 	or	r2,r5,r6
 401bdc0:	10004226 	beq	r2,zero,401becc <__subdf3+0x82c>
 401bdc4:	1808d0fa 	srli	r4,r3,3
 401bdc8:	8822d0fa 	srli	r17,r17,3
 401bdcc:	1806977a 	slli	r3,r3,29
 401bdd0:	2080022c 	andhi	r2,r4,8
 401bdd4:	1c62b03a 	or	r17,r3,r17
 401bdd8:	10000826 	beq	r2,zero,401bdfc <__subdf3+0x75c>
 401bddc:	2812d0fa 	srli	r9,r5,3
 401bde0:	4880022c 	andhi	r2,r9,8
 401bde4:	1000051e 	bne	r2,zero,401bdfc <__subdf3+0x75c>
 401bde8:	300cd0fa 	srli	r6,r6,3
 401bdec:	2804977a 	slli	r2,r5,29
 401bdf0:	4809883a 	mov	r4,r9
 401bdf4:	3825883a 	mov	r18,r7
 401bdf8:	11a2b03a 	or	r17,r2,r6
 401bdfc:	8806d77a 	srli	r3,r17,29
 401be00:	200890fa 	slli	r4,r4,3
 401be04:	882290fa 	slli	r17,r17,3
 401be08:	0401ffc4 	movi	r16,2047
 401be0c:	1906b03a 	or	r3,r3,r4
 401be10:	003e4406 	br	401b724 <__alt_data_end+0xfc01b724>
 401be14:	2984b03a 	or	r2,r5,r6
 401be18:	103e4226 	beq	r2,zero,401b724 <__alt_data_end+0xfc01b724>
 401be1c:	8989c83a 	sub	r4,r17,r6
 401be20:	8911803a 	cmpltu	r8,r17,r4
 401be24:	1945c83a 	sub	r2,r3,r5
 401be28:	1205c83a 	sub	r2,r2,r8
 401be2c:	1200202c 	andhi	r8,r2,128
 401be30:	403e9a26 	beq	r8,zero,401b89c <__alt_data_end+0xfc01b89c>
 401be34:	3463c83a 	sub	r17,r6,r17
 401be38:	28c5c83a 	sub	r2,r5,r3
 401be3c:	344d803a 	cmpltu	r6,r6,r17
 401be40:	1187c83a 	sub	r3,r2,r6
 401be44:	3825883a 	mov	r18,r7
 401be48:	003e3606 	br	401b724 <__alt_data_end+0xfc01b724>
 401be4c:	0101ffc4 	movi	r4,2047
 401be50:	493fc71e 	bne	r9,r4,401bd70 <__alt_data_end+0xfc01bd70>
 401be54:	2807883a 	mov	r3,r5
 401be58:	3023883a 	mov	r17,r6
 401be5c:	4821883a 	mov	r16,r9
 401be60:	003e3006 	br	401b724 <__alt_data_end+0xfc01b724>
 401be64:	10003626 	beq	r2,zero,401bf40 <__subdf3+0x8a0>
 401be68:	2984b03a 	or	r2,r5,r6
 401be6c:	10001726 	beq	r2,zero,401becc <__subdf3+0x82c>
 401be70:	1808d0fa 	srli	r4,r3,3
 401be74:	8822d0fa 	srli	r17,r17,3
 401be78:	1806977a 	slli	r3,r3,29
 401be7c:	2080022c 	andhi	r2,r4,8
 401be80:	1c62b03a 	or	r17,r3,r17
 401be84:	10000726 	beq	r2,zero,401bea4 <__subdf3+0x804>
 401be88:	2812d0fa 	srli	r9,r5,3
 401be8c:	4880022c 	andhi	r2,r9,8
 401be90:	1000041e 	bne	r2,zero,401bea4 <__subdf3+0x804>
 401be94:	300cd0fa 	srli	r6,r6,3
 401be98:	2804977a 	slli	r2,r5,29
 401be9c:	4809883a 	mov	r4,r9
 401bea0:	11a2b03a 	or	r17,r2,r6
 401bea4:	8806d77a 	srli	r3,r17,29
 401bea8:	200890fa 	slli	r4,r4,3
 401beac:	882290fa 	slli	r17,r17,3
 401beb0:	3825883a 	mov	r18,r7
 401beb4:	1906b03a 	or	r3,r3,r4
 401beb8:	0401ffc4 	movi	r16,2047
 401bebc:	003e1906 	br	401b724 <__alt_data_end+0xfc01b724>
 401bec0:	000b883a 	mov	r5,zero
 401bec4:	0005883a 	mov	r2,zero
 401bec8:	003e2e06 	br	401b784 <__alt_data_end+0xfc01b784>
 401becc:	0401ffc4 	movi	r16,2047
 401bed0:	003e1406 	br	401b724 <__alt_data_end+0xfc01b724>
 401bed4:	0005883a 	mov	r2,zero
 401bed8:	003f7506 	br	401bcb0 <__alt_data_end+0xfc01bcb0>
 401bedc:	0005883a 	mov	r2,zero
 401bee0:	0009883a 	mov	r4,zero
 401bee4:	003e7806 	br	401b8c8 <__alt_data_end+0xfc01b8c8>
 401bee8:	123ff804 	addi	r8,r2,-32
 401beec:	01000804 	movi	r4,32
 401bef0:	1a10d83a 	srl	r8,r3,r8
 401bef4:	11002526 	beq	r2,r4,401bf8c <__subdf3+0x8ec>
 401bef8:	01001004 	movi	r4,64
 401befc:	2085c83a 	sub	r2,r4,r2
 401bf00:	1884983a 	sll	r2,r3,r2
 401bf04:	1444b03a 	or	r2,r2,r17
 401bf08:	1004c03a 	cmpne	r2,r2,zero
 401bf0c:	40a2b03a 	or	r17,r8,r2
 401bf10:	0005883a 	mov	r2,zero
 401bf14:	003f1606 	br	401bb70 <__alt_data_end+0xfc01bb70>
 401bf18:	02000434 	movhi	r8,16
 401bf1c:	0009883a 	mov	r4,zero
 401bf20:	423fffc4 	addi	r8,r8,-1
 401bf24:	00bfffc4 	movi	r2,-1
 401bf28:	0401ffc4 	movi	r16,2047
 401bf2c:	003e6606 	br	401b8c8 <__alt_data_end+0xfc01b8c8>
 401bf30:	1c62b03a 	or	r17,r3,r17
 401bf34:	8822c03a 	cmpne	r17,r17,zero
 401bf38:	0005883a 	mov	r2,zero
 401bf3c:	003f9906 	br	401bda4 <__alt_data_end+0xfc01bda4>
 401bf40:	2807883a 	mov	r3,r5
 401bf44:	3023883a 	mov	r17,r6
 401bf48:	0401ffc4 	movi	r16,2047
 401bf4c:	003df506 	br	401b724 <__alt_data_end+0xfc01b724>
 401bf50:	2807883a 	mov	r3,r5
 401bf54:	3023883a 	mov	r17,r6
 401bf58:	003df206 	br	401b724 <__alt_data_end+0xfc01b724>
 401bf5c:	123ff804 	addi	r8,r2,-32
 401bf60:	01000804 	movi	r4,32
 401bf64:	1a10d83a 	srl	r8,r3,r8
 401bf68:	11000a26 	beq	r2,r4,401bf94 <__subdf3+0x8f4>
 401bf6c:	01001004 	movi	r4,64
 401bf70:	2085c83a 	sub	r2,r4,r2
 401bf74:	1884983a 	sll	r2,r3,r2
 401bf78:	1444b03a 	or	r2,r2,r17
 401bf7c:	1004c03a 	cmpne	r2,r2,zero
 401bf80:	40a2b03a 	or	r17,r8,r2
 401bf84:	0005883a 	mov	r2,zero
 401bf88:	003f8606 	br	401bda4 <__alt_data_end+0xfc01bda4>
 401bf8c:	0005883a 	mov	r2,zero
 401bf90:	003fdc06 	br	401bf04 <__alt_data_end+0xfc01bf04>
 401bf94:	0005883a 	mov	r2,zero
 401bf98:	003ff706 	br	401bf78 <__alt_data_end+0xfc01bf78>

0401bf9c <__fixdfsi>:
 401bf9c:	280cd53a 	srli	r6,r5,20
 401bfa0:	00c00434 	movhi	r3,16
 401bfa4:	18ffffc4 	addi	r3,r3,-1
 401bfa8:	3181ffcc 	andi	r6,r6,2047
 401bfac:	01c0ff84 	movi	r7,1022
 401bfb0:	28c6703a 	and	r3,r5,r3
 401bfb4:	280ad7fa 	srli	r5,r5,31
 401bfb8:	3980120e 	bge	r7,r6,401c004 <__fixdfsi+0x68>
 401bfbc:	00810744 	movi	r2,1053
 401bfc0:	11800c16 	blt	r2,r6,401bff4 <__fixdfsi+0x58>
 401bfc4:	00810cc4 	movi	r2,1075
 401bfc8:	1185c83a 	sub	r2,r2,r6
 401bfcc:	01c007c4 	movi	r7,31
 401bfd0:	18c00434 	orhi	r3,r3,16
 401bfd4:	38800d16 	blt	r7,r2,401c00c <__fixdfsi+0x70>
 401bfd8:	31befb44 	addi	r6,r6,-1043
 401bfdc:	2084d83a 	srl	r2,r4,r2
 401bfe0:	1986983a 	sll	r3,r3,r6
 401bfe4:	1884b03a 	or	r2,r3,r2
 401bfe8:	28000726 	beq	r5,zero,401c008 <__fixdfsi+0x6c>
 401bfec:	0085c83a 	sub	r2,zero,r2
 401bff0:	f800283a 	ret
 401bff4:	00a00034 	movhi	r2,32768
 401bff8:	10bfffc4 	addi	r2,r2,-1
 401bffc:	2885883a 	add	r2,r5,r2
 401c000:	f800283a 	ret
 401c004:	0005883a 	mov	r2,zero
 401c008:	f800283a 	ret
 401c00c:	008104c4 	movi	r2,1043
 401c010:	1185c83a 	sub	r2,r2,r6
 401c014:	1884d83a 	srl	r2,r3,r2
 401c018:	003ff306 	br	401bfe8 <__alt_data_end+0xfc01bfe8>

0401c01c <__floatsidf>:
 401c01c:	defffd04 	addi	sp,sp,-12
 401c020:	dfc00215 	stw	ra,8(sp)
 401c024:	dc400115 	stw	r17,4(sp)
 401c028:	dc000015 	stw	r16,0(sp)
 401c02c:	20002b26 	beq	r4,zero,401c0dc <__floatsidf+0xc0>
 401c030:	2023883a 	mov	r17,r4
 401c034:	2020d7fa 	srli	r16,r4,31
 401c038:	20002d16 	blt	r4,zero,401c0f0 <__floatsidf+0xd4>
 401c03c:	8809883a 	mov	r4,r17
 401c040:	401c1a00 	call	401c1a0 <__clzsi2>
 401c044:	01410784 	movi	r5,1054
 401c048:	288bc83a 	sub	r5,r5,r2
 401c04c:	01010cc4 	movi	r4,1075
 401c050:	2149c83a 	sub	r4,r4,r5
 401c054:	00c007c4 	movi	r3,31
 401c058:	1900160e 	bge	r3,r4,401c0b4 <__floatsidf+0x98>
 401c05c:	00c104c4 	movi	r3,1043
 401c060:	1947c83a 	sub	r3,r3,r5
 401c064:	88c6983a 	sll	r3,r17,r3
 401c068:	00800434 	movhi	r2,16
 401c06c:	10bfffc4 	addi	r2,r2,-1
 401c070:	1886703a 	and	r3,r3,r2
 401c074:	2941ffcc 	andi	r5,r5,2047
 401c078:	800d883a 	mov	r6,r16
 401c07c:	0005883a 	mov	r2,zero
 401c080:	280a953a 	slli	r5,r5,20
 401c084:	31803fcc 	andi	r6,r6,255
 401c088:	01000434 	movhi	r4,16
 401c08c:	300c97fa 	slli	r6,r6,31
 401c090:	213fffc4 	addi	r4,r4,-1
 401c094:	1906703a 	and	r3,r3,r4
 401c098:	1946b03a 	or	r3,r3,r5
 401c09c:	1986b03a 	or	r3,r3,r6
 401c0a0:	dfc00217 	ldw	ra,8(sp)
 401c0a4:	dc400117 	ldw	r17,4(sp)
 401c0a8:	dc000017 	ldw	r16,0(sp)
 401c0ac:	dec00304 	addi	sp,sp,12
 401c0b0:	f800283a 	ret
 401c0b4:	00c002c4 	movi	r3,11
 401c0b8:	1887c83a 	sub	r3,r3,r2
 401c0bc:	88c6d83a 	srl	r3,r17,r3
 401c0c0:	8904983a 	sll	r2,r17,r4
 401c0c4:	01000434 	movhi	r4,16
 401c0c8:	213fffc4 	addi	r4,r4,-1
 401c0cc:	2941ffcc 	andi	r5,r5,2047
 401c0d0:	1906703a 	and	r3,r3,r4
 401c0d4:	800d883a 	mov	r6,r16
 401c0d8:	003fe906 	br	401c080 <__alt_data_end+0xfc01c080>
 401c0dc:	000d883a 	mov	r6,zero
 401c0e0:	000b883a 	mov	r5,zero
 401c0e4:	0007883a 	mov	r3,zero
 401c0e8:	0005883a 	mov	r2,zero
 401c0ec:	003fe406 	br	401c080 <__alt_data_end+0xfc01c080>
 401c0f0:	0123c83a 	sub	r17,zero,r4
 401c0f4:	003fd106 	br	401c03c <__alt_data_end+0xfc01c03c>

0401c0f8 <__floatunsidf>:
 401c0f8:	defffe04 	addi	sp,sp,-8
 401c0fc:	dc000015 	stw	r16,0(sp)
 401c100:	dfc00115 	stw	ra,4(sp)
 401c104:	2021883a 	mov	r16,r4
 401c108:	20002226 	beq	r4,zero,401c194 <__floatunsidf+0x9c>
 401c10c:	401c1a00 	call	401c1a0 <__clzsi2>
 401c110:	01010784 	movi	r4,1054
 401c114:	2089c83a 	sub	r4,r4,r2
 401c118:	01810cc4 	movi	r6,1075
 401c11c:	310dc83a 	sub	r6,r6,r4
 401c120:	00c007c4 	movi	r3,31
 401c124:	1980120e 	bge	r3,r6,401c170 <__floatunsidf+0x78>
 401c128:	00c104c4 	movi	r3,1043
 401c12c:	1907c83a 	sub	r3,r3,r4
 401c130:	80ca983a 	sll	r5,r16,r3
 401c134:	00800434 	movhi	r2,16
 401c138:	10bfffc4 	addi	r2,r2,-1
 401c13c:	2101ffcc 	andi	r4,r4,2047
 401c140:	0021883a 	mov	r16,zero
 401c144:	288a703a 	and	r5,r5,r2
 401c148:	2008953a 	slli	r4,r4,20
 401c14c:	00c00434 	movhi	r3,16
 401c150:	18ffffc4 	addi	r3,r3,-1
 401c154:	28c6703a 	and	r3,r5,r3
 401c158:	8005883a 	mov	r2,r16
 401c15c:	1906b03a 	or	r3,r3,r4
 401c160:	dfc00117 	ldw	ra,4(sp)
 401c164:	dc000017 	ldw	r16,0(sp)
 401c168:	dec00204 	addi	sp,sp,8
 401c16c:	f800283a 	ret
 401c170:	00c002c4 	movi	r3,11
 401c174:	188bc83a 	sub	r5,r3,r2
 401c178:	814ad83a 	srl	r5,r16,r5
 401c17c:	00c00434 	movhi	r3,16
 401c180:	18ffffc4 	addi	r3,r3,-1
 401c184:	81a0983a 	sll	r16,r16,r6
 401c188:	2101ffcc 	andi	r4,r4,2047
 401c18c:	28ca703a 	and	r5,r5,r3
 401c190:	003fed06 	br	401c148 <__alt_data_end+0xfc01c148>
 401c194:	0009883a 	mov	r4,zero
 401c198:	000b883a 	mov	r5,zero
 401c19c:	003fea06 	br	401c148 <__alt_data_end+0xfc01c148>

0401c1a0 <__clzsi2>:
 401c1a0:	00bfffd4 	movui	r2,65535
 401c1a4:	11000536 	bltu	r2,r4,401c1bc <__clzsi2+0x1c>
 401c1a8:	00803fc4 	movi	r2,255
 401c1ac:	11000f36 	bltu	r2,r4,401c1ec <__clzsi2+0x4c>
 401c1b0:	00800804 	movi	r2,32
 401c1b4:	0007883a 	mov	r3,zero
 401c1b8:	00000506 	br	401c1d0 <__clzsi2+0x30>
 401c1bc:	00804034 	movhi	r2,256
 401c1c0:	10bfffc4 	addi	r2,r2,-1
 401c1c4:	11000c2e 	bgeu	r2,r4,401c1f8 <__clzsi2+0x58>
 401c1c8:	00800204 	movi	r2,8
 401c1cc:	00c00604 	movi	r3,24
 401c1d0:	20c8d83a 	srl	r4,r4,r3
 401c1d4:	00c100b4 	movhi	r3,1026
 401c1d8:	18c03c04 	addi	r3,r3,240
 401c1dc:	1909883a 	add	r4,r3,r4
 401c1e0:	20c00003 	ldbu	r3,0(r4)
 401c1e4:	10c5c83a 	sub	r2,r2,r3
 401c1e8:	f800283a 	ret
 401c1ec:	00800604 	movi	r2,24
 401c1f0:	00c00204 	movi	r3,8
 401c1f4:	003ff606 	br	401c1d0 <__alt_data_end+0xfc01c1d0>
 401c1f8:	00800404 	movi	r2,16
 401c1fc:	1007883a 	mov	r3,r2
 401c200:	003ff306 	br	401c1d0 <__alt_data_end+0xfc01c1d0>

0401c204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c204:	defffe04 	addi	sp,sp,-8
 401c208:	dfc00115 	stw	ra,4(sp)
 401c20c:	df000015 	stw	fp,0(sp)
 401c210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c214:	d0a02717 	ldw	r2,-32612(gp)
 401c218:	10000326 	beq	r2,zero,401c228 <alt_get_errno+0x24>
 401c21c:	d0a02717 	ldw	r2,-32612(gp)
 401c220:	103ee83a 	callr	r2
 401c224:	00000106 	br	401c22c <alt_get_errno+0x28>
 401c228:	d092e904 	addi	r2,gp,19364
}
 401c22c:	e037883a 	mov	sp,fp
 401c230:	dfc00117 	ldw	ra,4(sp)
 401c234:	df000017 	ldw	fp,0(sp)
 401c238:	dec00204 	addi	sp,sp,8
 401c23c:	f800283a 	ret

0401c240 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401c240:	defffb04 	addi	sp,sp,-20
 401c244:	dfc00415 	stw	ra,16(sp)
 401c248:	df000315 	stw	fp,12(sp)
 401c24c:	df000304 	addi	fp,sp,12
 401c250:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 401c254:	e0bfff17 	ldw	r2,-4(fp)
 401c258:	10000616 	blt	r2,zero,401c274 <close+0x34>
 401c25c:	e0bfff17 	ldw	r2,-4(fp)
 401c260:	10c00324 	muli	r3,r2,12
 401c264:	008100f4 	movhi	r2,1027
 401c268:	10ae8804 	addi	r2,r2,-17888
 401c26c:	1885883a 	add	r2,r3,r2
 401c270:	00000106 	br	401c278 <close+0x38>
 401c274:	0005883a 	mov	r2,zero
 401c278:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 401c27c:	e0bffd17 	ldw	r2,-12(fp)
 401c280:	10001926 	beq	r2,zero,401c2e8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 401c284:	e0bffd17 	ldw	r2,-12(fp)
 401c288:	10800017 	ldw	r2,0(r2)
 401c28c:	10800417 	ldw	r2,16(r2)
 401c290:	10000626 	beq	r2,zero,401c2ac <close+0x6c>
 401c294:	e0bffd17 	ldw	r2,-12(fp)
 401c298:	10800017 	ldw	r2,0(r2)
 401c29c:	10800417 	ldw	r2,16(r2)
 401c2a0:	e13ffd17 	ldw	r4,-12(fp)
 401c2a4:	103ee83a 	callr	r2
 401c2a8:	00000106 	br	401c2b0 <close+0x70>
 401c2ac:	0005883a 	mov	r2,zero
 401c2b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 401c2b4:	e13fff17 	ldw	r4,-4(fp)
 401c2b8:	401cac00 	call	401cac0 <alt_release_fd>
    if (rval < 0)
 401c2bc:	e0bffe17 	ldw	r2,-8(fp)
 401c2c0:	1000070e 	bge	r2,zero,401c2e0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 401c2c4:	401c2040 	call	401c204 <alt_get_errno>
 401c2c8:	1007883a 	mov	r3,r2
 401c2cc:	e0bffe17 	ldw	r2,-8(fp)
 401c2d0:	0085c83a 	sub	r2,zero,r2
 401c2d4:	18800015 	stw	r2,0(r3)
      return -1;
 401c2d8:	00bfffc4 	movi	r2,-1
 401c2dc:	00000706 	br	401c2fc <close+0xbc>
    }
    return 0;
 401c2e0:	0005883a 	mov	r2,zero
 401c2e4:	00000506 	br	401c2fc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401c2e8:	401c2040 	call	401c204 <alt_get_errno>
 401c2ec:	1007883a 	mov	r3,r2
 401c2f0:	00801444 	movi	r2,81
 401c2f4:	18800015 	stw	r2,0(r3)
    return -1;
 401c2f8:	00bfffc4 	movi	r2,-1
  }
}
 401c2fc:	e037883a 	mov	sp,fp
 401c300:	dfc00117 	ldw	ra,4(sp)
 401c304:	df000017 	ldw	fp,0(sp)
 401c308:	dec00204 	addi	sp,sp,8
 401c30c:	f800283a 	ret

0401c310 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 401c310:	defffc04 	addi	sp,sp,-16
 401c314:	df000315 	stw	fp,12(sp)
 401c318:	df000304 	addi	fp,sp,12
 401c31c:	e13ffd15 	stw	r4,-12(fp)
 401c320:	e17ffe15 	stw	r5,-8(fp)
 401c324:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401c328:	e0bfff17 	ldw	r2,-4(fp)
}
 401c32c:	e037883a 	mov	sp,fp
 401c330:	df000017 	ldw	fp,0(sp)
 401c334:	dec00104 	addi	sp,sp,4
 401c338:	f800283a 	ret

0401c33c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401c33c:	defffd04 	addi	sp,sp,-12
 401c340:	df000215 	stw	fp,8(sp)
 401c344:	df000204 	addi	fp,sp,8
 401c348:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401c34c:	0001883a 	nop
 401c350:	e0bfff17 	ldw	r2,-4(fp)
 401c354:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401c358:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401c35c:	10000226 	beq	r2,zero,401c368 <_exit+0x2c>
    ALT_SIM_FAIL();
 401c360:	002af070 	cmpltui	zero,zero,43969
 401c364:	00000106 	br	401c36c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401c368:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401c36c:	003fff06 	br	401c36c <__alt_data_end+0xfc01c36c>

0401c370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c370:	defffe04 	addi	sp,sp,-8
 401c374:	dfc00115 	stw	ra,4(sp)
 401c378:	df000015 	stw	fp,0(sp)
 401c37c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c380:	d0a02717 	ldw	r2,-32612(gp)
 401c384:	10000326 	beq	r2,zero,401c394 <alt_get_errno+0x24>
 401c388:	d0a02717 	ldw	r2,-32612(gp)
 401c38c:	103ee83a 	callr	r2
 401c390:	00000106 	br	401c398 <alt_get_errno+0x28>
 401c394:	d092e904 	addi	r2,gp,19364
}
 401c398:	e037883a 	mov	sp,fp
 401c39c:	dfc00117 	ldw	ra,4(sp)
 401c3a0:	df000017 	ldw	fp,0(sp)
 401c3a4:	dec00204 	addi	sp,sp,8
 401c3a8:	f800283a 	ret

0401c3ac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 401c3ac:	defffb04 	addi	sp,sp,-20
 401c3b0:	dfc00415 	stw	ra,16(sp)
 401c3b4:	df000315 	stw	fp,12(sp)
 401c3b8:	df000304 	addi	fp,sp,12
 401c3bc:	e13ffe15 	stw	r4,-8(fp)
 401c3c0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c3c4:	e0bffe17 	ldw	r2,-8(fp)
 401c3c8:	10000616 	blt	r2,zero,401c3e4 <fstat+0x38>
 401c3cc:	e0bffe17 	ldw	r2,-8(fp)
 401c3d0:	10c00324 	muli	r3,r2,12
 401c3d4:	008100f4 	movhi	r2,1027
 401c3d8:	10ae8804 	addi	r2,r2,-17888
 401c3dc:	1885883a 	add	r2,r3,r2
 401c3e0:	00000106 	br	401c3e8 <fstat+0x3c>
 401c3e4:	0005883a 	mov	r2,zero
 401c3e8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 401c3ec:	e0bffd17 	ldw	r2,-12(fp)
 401c3f0:	10001026 	beq	r2,zero,401c434 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 401c3f4:	e0bffd17 	ldw	r2,-12(fp)
 401c3f8:	10800017 	ldw	r2,0(r2)
 401c3fc:	10800817 	ldw	r2,32(r2)
 401c400:	10000726 	beq	r2,zero,401c420 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 401c404:	e0bffd17 	ldw	r2,-12(fp)
 401c408:	10800017 	ldw	r2,0(r2)
 401c40c:	10800817 	ldw	r2,32(r2)
 401c410:	e17fff17 	ldw	r5,-4(fp)
 401c414:	e13ffd17 	ldw	r4,-12(fp)
 401c418:	103ee83a 	callr	r2
 401c41c:	00000a06 	br	401c448 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401c420:	e0bfff17 	ldw	r2,-4(fp)
 401c424:	00c80004 	movi	r3,8192
 401c428:	10c00115 	stw	r3,4(r2)
      return 0;
 401c42c:	0005883a 	mov	r2,zero
 401c430:	00000506 	br	401c448 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401c434:	401c3700 	call	401c370 <alt_get_errno>
 401c438:	1007883a 	mov	r3,r2
 401c43c:	00801444 	movi	r2,81
 401c440:	18800015 	stw	r2,0(r3)
    return -1;
 401c444:	00bfffc4 	movi	r2,-1
  }
}
 401c448:	e037883a 	mov	sp,fp
 401c44c:	dfc00117 	ldw	ra,4(sp)
 401c450:	df000017 	ldw	fp,0(sp)
 401c454:	dec00204 	addi	sp,sp,8
 401c458:	f800283a 	ret

0401c45c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 401c45c:	deffff04 	addi	sp,sp,-4
 401c460:	df000015 	stw	fp,0(sp)
 401c464:	d839883a 	mov	fp,sp
  return 0;
 401c468:	0005883a 	mov	r2,zero
}
 401c46c:	e037883a 	mov	sp,fp
 401c470:	df000017 	ldw	fp,0(sp)
 401c474:	dec00104 	addi	sp,sp,4
 401c478:	f800283a 	ret

0401c47c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c47c:	defffe04 	addi	sp,sp,-8
 401c480:	dfc00115 	stw	ra,4(sp)
 401c484:	df000015 	stw	fp,0(sp)
 401c488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c48c:	d0a02717 	ldw	r2,-32612(gp)
 401c490:	10000326 	beq	r2,zero,401c4a0 <alt_get_errno+0x24>
 401c494:	d0a02717 	ldw	r2,-32612(gp)
 401c498:	103ee83a 	callr	r2
 401c49c:	00000106 	br	401c4a4 <alt_get_errno+0x28>
 401c4a0:	d092e904 	addi	r2,gp,19364
}
 401c4a4:	e037883a 	mov	sp,fp
 401c4a8:	dfc00117 	ldw	ra,4(sp)
 401c4ac:	df000017 	ldw	fp,0(sp)
 401c4b0:	dec00204 	addi	sp,sp,8
 401c4b4:	f800283a 	ret

0401c4b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401c4b8:	deffed04 	addi	sp,sp,-76
 401c4bc:	dfc01215 	stw	ra,72(sp)
 401c4c0:	df001115 	stw	fp,68(sp)
 401c4c4:	df001104 	addi	fp,sp,68
 401c4c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c4cc:	e0bfff17 	ldw	r2,-4(fp)
 401c4d0:	10000616 	blt	r2,zero,401c4ec <isatty+0x34>
 401c4d4:	e0bfff17 	ldw	r2,-4(fp)
 401c4d8:	10c00324 	muli	r3,r2,12
 401c4dc:	008100f4 	movhi	r2,1027
 401c4e0:	10ae8804 	addi	r2,r2,-17888
 401c4e4:	1885883a 	add	r2,r3,r2
 401c4e8:	00000106 	br	401c4f0 <isatty+0x38>
 401c4ec:	0005883a 	mov	r2,zero
 401c4f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401c4f4:	e0bfef17 	ldw	r2,-68(fp)
 401c4f8:	10000e26 	beq	r2,zero,401c534 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 401c4fc:	e0bfef17 	ldw	r2,-68(fp)
 401c500:	10800017 	ldw	r2,0(r2)
 401c504:	10800817 	ldw	r2,32(r2)
 401c508:	1000021e 	bne	r2,zero,401c514 <isatty+0x5c>
    {
      return 1;
 401c50c:	00800044 	movi	r2,1
 401c510:	00000d06 	br	401c548 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401c514:	e0bff004 	addi	r2,fp,-64
 401c518:	100b883a 	mov	r5,r2
 401c51c:	e13fff17 	ldw	r4,-4(fp)
 401c520:	401c3ac0 	call	401c3ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401c524:	e0bff117 	ldw	r2,-60(fp)
 401c528:	10880020 	cmpeqi	r2,r2,8192
 401c52c:	10803fcc 	andi	r2,r2,255
 401c530:	00000506 	br	401c548 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401c534:	401c47c0 	call	401c47c <alt_get_errno>
 401c538:	1007883a 	mov	r3,r2
 401c53c:	00801444 	movi	r2,81
 401c540:	18800015 	stw	r2,0(r3)
    return 0;
 401c544:	0005883a 	mov	r2,zero
  }
}
 401c548:	e037883a 	mov	sp,fp
 401c54c:	dfc00117 	ldw	ra,4(sp)
 401c550:	df000017 	ldw	fp,0(sp)
 401c554:	dec00204 	addi	sp,sp,8
 401c558:	f800283a 	ret

0401c55c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c55c:	defffe04 	addi	sp,sp,-8
 401c560:	dfc00115 	stw	ra,4(sp)
 401c564:	df000015 	stw	fp,0(sp)
 401c568:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c56c:	d0a02717 	ldw	r2,-32612(gp)
 401c570:	10000326 	beq	r2,zero,401c580 <alt_get_errno+0x24>
 401c574:	d0a02717 	ldw	r2,-32612(gp)
 401c578:	103ee83a 	callr	r2
 401c57c:	00000106 	br	401c584 <alt_get_errno+0x28>
 401c580:	d092e904 	addi	r2,gp,19364
}
 401c584:	e037883a 	mov	sp,fp
 401c588:	dfc00117 	ldw	ra,4(sp)
 401c58c:	df000017 	ldw	fp,0(sp)
 401c590:	dec00204 	addi	sp,sp,8
 401c594:	f800283a 	ret

0401c598 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 401c598:	defffb04 	addi	sp,sp,-20
 401c59c:	dfc00415 	stw	ra,16(sp)
 401c5a0:	df000315 	stw	fp,12(sp)
 401c5a4:	df000304 	addi	fp,sp,12
 401c5a8:	e13ffe15 	stw	r4,-8(fp)
 401c5ac:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 401c5b0:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 401c5b4:	e0bffe17 	ldw	r2,-8(fp)
 401c5b8:	00802f16 	blt	zero,r2,401c678 <kill+0xe0>
  {
    switch (sig)
 401c5bc:	e0bfff17 	ldw	r2,-4(fp)
 401c5c0:	10800828 	cmpgeui	r2,r2,32
 401c5c4:	1000291e 	bne	r2,zero,401c66c <kill+0xd4>
 401c5c8:	e0bfff17 	ldw	r2,-4(fp)
 401c5cc:	100690ba 	slli	r3,r2,2
 401c5d0:	008100b4 	movhi	r2,1026
 401c5d4:	10b17904 	addi	r2,r2,-14876
 401c5d8:	1885883a 	add	r2,r3,r2
 401c5dc:	10800017 	ldw	r2,0(r2)
 401c5e0:	1000683a 	jmp	r2
 401c5e4:	0401c68c 	andi	r16,zero,1818
 401c5e8:	0401c66c 	andhi	r16,zero,1817
 401c5ec:	0401c66c 	andhi	r16,zero,1817
 401c5f0:	0401c664 	muli	r16,zero,1817
 401c5f4:	0401c664 	muli	r16,zero,1817
 401c5f8:	0401c664 	muli	r16,zero,1817
 401c5fc:	0401c664 	muli	r16,zero,1817
 401c600:	0401c66c 	andhi	r16,zero,1817
 401c604:	0401c664 	muli	r16,zero,1817
 401c608:	0401c664 	muli	r16,zero,1817
 401c60c:	0401c664 	muli	r16,zero,1817
 401c610:	0401c664 	muli	r16,zero,1817
 401c614:	0401c664 	muli	r16,zero,1817
 401c618:	0401c664 	muli	r16,zero,1817
 401c61c:	0401c664 	muli	r16,zero,1817
 401c620:	0401c664 	muli	r16,zero,1817
 401c624:	0401c68c 	andi	r16,zero,1818
 401c628:	0401c66c 	andhi	r16,zero,1817
 401c62c:	0401c66c 	andhi	r16,zero,1817
 401c630:	0401c66c 	andhi	r16,zero,1817
 401c634:	0401c68c 	andi	r16,zero,1818
 401c638:	0401c66c 	andhi	r16,zero,1817
 401c63c:	0401c66c 	andhi	r16,zero,1817
 401c640:	0401c664 	muli	r16,zero,1817
 401c644:	0401c664 	muli	r16,zero,1817
 401c648:	0401c664 	muli	r16,zero,1817
 401c64c:	0401c664 	muli	r16,zero,1817
 401c650:	0401c664 	muli	r16,zero,1817
 401c654:	0401c66c 	andhi	r16,zero,1817
 401c658:	0401c66c 	andhi	r16,zero,1817
 401c65c:	0401c664 	muli	r16,zero,1817
 401c660:	0401c664 	muli	r16,zero,1817
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 401c664:	0009883a 	mov	r4,zero
 401c668:	401c33c0 	call	401c33c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 401c66c:	00800584 	movi	r2,22
 401c670:	e0bffd15 	stw	r2,-12(fp)
 401c674:	00000606 	br	401c690 <kill+0xf8>
    }
  }

  else if (pid > 0)
 401c678:	e0bffe17 	ldw	r2,-8(fp)
 401c67c:	0080040e 	bge	zero,r2,401c690 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 401c680:	008000c4 	movi	r2,3
 401c684:	e0bffd15 	stw	r2,-12(fp)
 401c688:	00000106 	br	401c690 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 401c68c:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 401c690:	e0bffd17 	ldw	r2,-12(fp)
 401c694:	10000626 	beq	r2,zero,401c6b0 <kill+0x118>
  {
    ALT_ERRNO = status;
 401c698:	401c55c0 	call	401c55c <alt_get_errno>
 401c69c:	1007883a 	mov	r3,r2
 401c6a0:	e0bffd17 	ldw	r2,-12(fp)
 401c6a4:	18800015 	stw	r2,0(r3)
    return -1;
 401c6a8:	00bfffc4 	movi	r2,-1
 401c6ac:	00000106 	br	401c6b4 <kill+0x11c>
  }

  return 0;
 401c6b0:	0005883a 	mov	r2,zero
}
 401c6b4:	e037883a 	mov	sp,fp
 401c6b8:	dfc00117 	ldw	ra,4(sp)
 401c6bc:	df000017 	ldw	fp,0(sp)
 401c6c0:	dec00204 	addi	sp,sp,8
 401c6c4:	f800283a 	ret

0401c6c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 401c6c8:	defffc04 	addi	sp,sp,-16
 401c6cc:	df000315 	stw	fp,12(sp)
 401c6d0:	df000304 	addi	fp,sp,12
 401c6d4:	e13ffd15 	stw	r4,-12(fp)
 401c6d8:	e17ffe15 	stw	r5,-8(fp)
 401c6dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 401c6e0:	e0fffe17 	ldw	r3,-8(fp)
 401c6e4:	e0bffd17 	ldw	r2,-12(fp)
 401c6e8:	18800c26 	beq	r3,r2,401c71c <alt_load_section+0x54>
  {
    while( to != end )
 401c6ec:	00000806 	br	401c710 <alt_load_section+0x48>
    {
      *to++ = *from++;
 401c6f0:	e0bffe17 	ldw	r2,-8(fp)
 401c6f4:	10c00104 	addi	r3,r2,4
 401c6f8:	e0fffe15 	stw	r3,-8(fp)
 401c6fc:	e0fffd17 	ldw	r3,-12(fp)
 401c700:	19000104 	addi	r4,r3,4
 401c704:	e13ffd15 	stw	r4,-12(fp)
 401c708:	18c00017 	ldw	r3,0(r3)
 401c70c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 401c710:	e0fffe17 	ldw	r3,-8(fp)
 401c714:	e0bfff17 	ldw	r2,-4(fp)
 401c718:	18bff51e 	bne	r3,r2,401c6f0 <__alt_data_end+0xfc01c6f0>
    {
      *to++ = *from++;
    }
  }
}
 401c71c:	0001883a 	nop
 401c720:	e037883a 	mov	sp,fp
 401c724:	df000017 	ldw	fp,0(sp)
 401c728:	dec00104 	addi	sp,sp,4
 401c72c:	f800283a 	ret

0401c730 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 401c730:	defffe04 	addi	sp,sp,-8
 401c734:	dfc00115 	stw	ra,4(sp)
 401c738:	df000015 	stw	fp,0(sp)
 401c73c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 401c740:	018100f4 	movhi	r6,1027
 401c744:	31b32c04 	addi	r6,r6,-13136
 401c748:	014100b4 	movhi	r5,1026
 401c74c:	29408704 	addi	r5,r5,540
 401c750:	010100f4 	movhi	r4,1027
 401c754:	21332c04 	addi	r4,r4,-13136
 401c758:	401c6c80 	call	401c6c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 401c75c:	01810034 	movhi	r6,1024
 401c760:	31809104 	addi	r6,r6,580
 401c764:	01410034 	movhi	r5,1024
 401c768:	29400804 	addi	r5,r5,32
 401c76c:	01010034 	movhi	r4,1024
 401c770:	21000804 	addi	r4,r4,32
 401c774:	401c6c80 	call	401c6c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 401c778:	018100b4 	movhi	r6,1026
 401c77c:	31808704 	addi	r6,r6,540
 401c780:	014100b4 	movhi	r5,1026
 401c784:	297be004 	addi	r5,r5,-4224
 401c788:	010100b4 	movhi	r4,1026
 401c78c:	213be004 	addi	r4,r4,-4224
 401c790:	401c6c80 	call	401c6c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 401c794:	401de9c0 	call	401de9c <alt_dcache_flush_all>
  alt_icache_flush_all();
 401c798:	401e0840 	call	401e084 <alt_icache_flush_all>
}
 401c79c:	0001883a 	nop
 401c7a0:	e037883a 	mov	sp,fp
 401c7a4:	dfc00117 	ldw	ra,4(sp)
 401c7a8:	df000017 	ldw	fp,0(sp)
 401c7ac:	dec00204 	addi	sp,sp,8
 401c7b0:	f800283a 	ret

0401c7b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c7b4:	defffe04 	addi	sp,sp,-8
 401c7b8:	dfc00115 	stw	ra,4(sp)
 401c7bc:	df000015 	stw	fp,0(sp)
 401c7c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c7c4:	d0a02717 	ldw	r2,-32612(gp)
 401c7c8:	10000326 	beq	r2,zero,401c7d8 <alt_get_errno+0x24>
 401c7cc:	d0a02717 	ldw	r2,-32612(gp)
 401c7d0:	103ee83a 	callr	r2
 401c7d4:	00000106 	br	401c7dc <alt_get_errno+0x28>
 401c7d8:	d092e904 	addi	r2,gp,19364
}
 401c7dc:	e037883a 	mov	sp,fp
 401c7e0:	dfc00117 	ldw	ra,4(sp)
 401c7e4:	df000017 	ldw	fp,0(sp)
 401c7e8:	dec00204 	addi	sp,sp,8
 401c7ec:	f800283a 	ret

0401c7f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 401c7f0:	defff904 	addi	sp,sp,-28
 401c7f4:	dfc00615 	stw	ra,24(sp)
 401c7f8:	df000515 	stw	fp,20(sp)
 401c7fc:	df000504 	addi	fp,sp,20
 401c800:	e13ffd15 	stw	r4,-12(fp)
 401c804:	e17ffe15 	stw	r5,-8(fp)
 401c808:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401c80c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c810:	e0bffd17 	ldw	r2,-12(fp)
 401c814:	10000616 	blt	r2,zero,401c830 <lseek+0x40>
 401c818:	e0bffd17 	ldw	r2,-12(fp)
 401c81c:	10c00324 	muli	r3,r2,12
 401c820:	008100f4 	movhi	r2,1027
 401c824:	10ae8804 	addi	r2,r2,-17888
 401c828:	1885883a 	add	r2,r3,r2
 401c82c:	00000106 	br	401c834 <lseek+0x44>
 401c830:	0005883a 	mov	r2,zero
 401c834:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401c838:	e0bffc17 	ldw	r2,-16(fp)
 401c83c:	10001026 	beq	r2,zero,401c880 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401c840:	e0bffc17 	ldw	r2,-16(fp)
 401c844:	10800017 	ldw	r2,0(r2)
 401c848:	10800717 	ldw	r2,28(r2)
 401c84c:	10000926 	beq	r2,zero,401c874 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 401c850:	e0bffc17 	ldw	r2,-16(fp)
 401c854:	10800017 	ldw	r2,0(r2)
 401c858:	10800717 	ldw	r2,28(r2)
 401c85c:	e1bfff17 	ldw	r6,-4(fp)
 401c860:	e17ffe17 	ldw	r5,-8(fp)
 401c864:	e13ffc17 	ldw	r4,-16(fp)
 401c868:	103ee83a 	callr	r2
 401c86c:	e0bffb15 	stw	r2,-20(fp)
 401c870:	00000506 	br	401c888 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 401c874:	00bfde84 	movi	r2,-134
 401c878:	e0bffb15 	stw	r2,-20(fp)
 401c87c:	00000206 	br	401c888 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 401c880:	00bfebc4 	movi	r2,-81
 401c884:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401c888:	e0bffb17 	ldw	r2,-20(fp)
 401c88c:	1000070e 	bge	r2,zero,401c8ac <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 401c890:	401c7b40 	call	401c7b4 <alt_get_errno>
 401c894:	1007883a 	mov	r3,r2
 401c898:	e0bffb17 	ldw	r2,-20(fp)
 401c89c:	0085c83a 	sub	r2,zero,r2
 401c8a0:	18800015 	stw	r2,0(r3)
    rc = -1;
 401c8a4:	00bfffc4 	movi	r2,-1
 401c8a8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 401c8ac:	e0bffb17 	ldw	r2,-20(fp)
}
 401c8b0:	e037883a 	mov	sp,fp
 401c8b4:	dfc00117 	ldw	ra,4(sp)
 401c8b8:	df000017 	ldw	fp,0(sp)
 401c8bc:	dec00204 	addi	sp,sp,8
 401c8c0:	f800283a 	ret

0401c8c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 401c8c4:	defffd04 	addi	sp,sp,-12
 401c8c8:	dfc00215 	stw	ra,8(sp)
 401c8cc:	df000115 	stw	fp,4(sp)
 401c8d0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401c8d4:	0009883a 	mov	r4,zero
 401c8d8:	401ce200 	call	401ce20 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401c8dc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 401c8e0:	401ce580 	call	401ce58 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 401c8e4:	018100b4 	movhi	r6,1026
 401c8e8:	31807f04 	addi	r6,r6,508
 401c8ec:	014100b4 	movhi	r5,1026
 401c8f0:	29407f04 	addi	r5,r5,508
 401c8f4:	010100b4 	movhi	r4,1026
 401c8f8:	21007f04 	addi	r4,r4,508
 401c8fc:	401e41c0 	call	401e41c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 401c900:	401dfc40 	call	401dfc4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401c904:	010100b4 	movhi	r4,1026
 401c908:	21380904 	addi	r4,r4,-8156
 401c90c:	401ec1c0 	call	401ec1c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 401c910:	d092ed17 	ldw	r2,19380(gp)
 401c914:	d0d2ee17 	ldw	r3,19384(gp)
 401c918:	d112ef17 	ldw	r4,19388(gp)
 401c91c:	200d883a 	mov	r6,r4
 401c920:	180b883a 	mov	r5,r3
 401c924:	1009883a 	mov	r4,r2
 401c928:	40095c80 	call	40095c8 <main>
 401c92c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 401c930:	01000044 	movi	r4,1
 401c934:	401c2400 	call	401c240 <close>
  exit (result);
 401c938:	e13fff17 	ldw	r4,-4(fp)
 401c93c:	401ec300 	call	401ec30 <exit>

0401c940 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 401c940:	defffe04 	addi	sp,sp,-8
 401c944:	df000115 	stw	fp,4(sp)
 401c948:	df000104 	addi	fp,sp,4
 401c94c:	e13fff15 	stw	r4,-4(fp)
}
 401c950:	0001883a 	nop
 401c954:	e037883a 	mov	sp,fp
 401c958:	df000017 	ldw	fp,0(sp)
 401c95c:	dec00104 	addi	sp,sp,4
 401c960:	f800283a 	ret

0401c964 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 401c964:	defffe04 	addi	sp,sp,-8
 401c968:	df000115 	stw	fp,4(sp)
 401c96c:	df000104 	addi	fp,sp,4
 401c970:	e13fff15 	stw	r4,-4(fp)
}
 401c974:	0001883a 	nop
 401c978:	e037883a 	mov	sp,fp
 401c97c:	df000017 	ldw	fp,0(sp)
 401c980:	dec00104 	addi	sp,sp,4
 401c984:	f800283a 	ret

0401c988 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c988:	defffe04 	addi	sp,sp,-8
 401c98c:	dfc00115 	stw	ra,4(sp)
 401c990:	df000015 	stw	fp,0(sp)
 401c994:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c998:	d0a02717 	ldw	r2,-32612(gp)
 401c99c:	10000326 	beq	r2,zero,401c9ac <alt_get_errno+0x24>
 401c9a0:	d0a02717 	ldw	r2,-32612(gp)
 401c9a4:	103ee83a 	callr	r2
 401c9a8:	00000106 	br	401c9b0 <alt_get_errno+0x28>
 401c9ac:	d092e904 	addi	r2,gp,19364
}
 401c9b0:	e037883a 	mov	sp,fp
 401c9b4:	dfc00117 	ldw	ra,4(sp)
 401c9b8:	df000017 	ldw	fp,0(sp)
 401c9bc:	dec00204 	addi	sp,sp,8
 401c9c0:	f800283a 	ret

0401c9c4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 401c9c4:	defff904 	addi	sp,sp,-28
 401c9c8:	dfc00615 	stw	ra,24(sp)
 401c9cc:	df000515 	stw	fp,20(sp)
 401c9d0:	df000504 	addi	fp,sp,20
 401c9d4:	e13ffd15 	stw	r4,-12(fp)
 401c9d8:	e17ffe15 	stw	r5,-8(fp)
 401c9dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c9e0:	e0bffd17 	ldw	r2,-12(fp)
 401c9e4:	10000616 	blt	r2,zero,401ca00 <read+0x3c>
 401c9e8:	e0bffd17 	ldw	r2,-12(fp)
 401c9ec:	10c00324 	muli	r3,r2,12
 401c9f0:	008100f4 	movhi	r2,1027
 401c9f4:	10ae8804 	addi	r2,r2,-17888
 401c9f8:	1885883a 	add	r2,r3,r2
 401c9fc:	00000106 	br	401ca04 <read+0x40>
 401ca00:	0005883a 	mov	r2,zero
 401ca04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401ca08:	e0bffb17 	ldw	r2,-20(fp)
 401ca0c:	10002226 	beq	r2,zero,401ca98 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401ca10:	e0bffb17 	ldw	r2,-20(fp)
 401ca14:	10800217 	ldw	r2,8(r2)
 401ca18:	108000cc 	andi	r2,r2,3
 401ca1c:	10800060 	cmpeqi	r2,r2,1
 401ca20:	1000181e 	bne	r2,zero,401ca84 <read+0xc0>
        (fd->dev->read))
 401ca24:	e0bffb17 	ldw	r2,-20(fp)
 401ca28:	10800017 	ldw	r2,0(r2)
 401ca2c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401ca30:	10001426 	beq	r2,zero,401ca84 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401ca34:	e0bffb17 	ldw	r2,-20(fp)
 401ca38:	10800017 	ldw	r2,0(r2)
 401ca3c:	10800517 	ldw	r2,20(r2)
 401ca40:	e0ffff17 	ldw	r3,-4(fp)
 401ca44:	180d883a 	mov	r6,r3
 401ca48:	e17ffe17 	ldw	r5,-8(fp)
 401ca4c:	e13ffb17 	ldw	r4,-20(fp)
 401ca50:	103ee83a 	callr	r2
 401ca54:	e0bffc15 	stw	r2,-16(fp)
 401ca58:	e0bffc17 	ldw	r2,-16(fp)
 401ca5c:	1000070e 	bge	r2,zero,401ca7c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 401ca60:	401c9880 	call	401c988 <alt_get_errno>
 401ca64:	1007883a 	mov	r3,r2
 401ca68:	e0bffc17 	ldw	r2,-16(fp)
 401ca6c:	0085c83a 	sub	r2,zero,r2
 401ca70:	18800015 	stw	r2,0(r3)
          return -1;
 401ca74:	00bfffc4 	movi	r2,-1
 401ca78:	00000c06 	br	401caac <read+0xe8>
        }
        return rval;
 401ca7c:	e0bffc17 	ldw	r2,-16(fp)
 401ca80:	00000a06 	br	401caac <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 401ca84:	401c9880 	call	401c988 <alt_get_errno>
 401ca88:	1007883a 	mov	r3,r2
 401ca8c:	00800344 	movi	r2,13
 401ca90:	18800015 	stw	r2,0(r3)
 401ca94:	00000406 	br	401caa8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 401ca98:	401c9880 	call	401c988 <alt_get_errno>
 401ca9c:	1007883a 	mov	r3,r2
 401caa0:	00801444 	movi	r2,81
 401caa4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401caa8:	00bfffc4 	movi	r2,-1
}
 401caac:	e037883a 	mov	sp,fp
 401cab0:	dfc00117 	ldw	ra,4(sp)
 401cab4:	df000017 	ldw	fp,0(sp)
 401cab8:	dec00204 	addi	sp,sp,8
 401cabc:	f800283a 	ret

0401cac0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 401cac0:	defffe04 	addi	sp,sp,-8
 401cac4:	df000115 	stw	fp,4(sp)
 401cac8:	df000104 	addi	fp,sp,4
 401cacc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 401cad0:	e0bfff17 	ldw	r2,-4(fp)
 401cad4:	108000d0 	cmplti	r2,r2,3
 401cad8:	10000d1e 	bne	r2,zero,401cb10 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 401cadc:	008100f4 	movhi	r2,1027
 401cae0:	10ae8804 	addi	r2,r2,-17888
 401cae4:	e0ffff17 	ldw	r3,-4(fp)
 401cae8:	18c00324 	muli	r3,r3,12
 401caec:	10c5883a 	add	r2,r2,r3
 401caf0:	10800204 	addi	r2,r2,8
 401caf4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 401caf8:	008100f4 	movhi	r2,1027
 401cafc:	10ae8804 	addi	r2,r2,-17888
 401cb00:	e0ffff17 	ldw	r3,-4(fp)
 401cb04:	18c00324 	muli	r3,r3,12
 401cb08:	10c5883a 	add	r2,r2,r3
 401cb0c:	10000015 	stw	zero,0(r2)
  }
}
 401cb10:	0001883a 	nop
 401cb14:	e037883a 	mov	sp,fp
 401cb18:	df000017 	ldw	fp,0(sp)
 401cb1c:	dec00104 	addi	sp,sp,4
 401cb20:	f800283a 	ret

0401cb24 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401cb24:	defff904 	addi	sp,sp,-28
 401cb28:	df000615 	stw	fp,24(sp)
 401cb2c:	df000604 	addi	fp,sp,24
 401cb30:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401cb34:	0005303a 	rdctl	r2,status
 401cb38:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401cb3c:	e0fffe17 	ldw	r3,-8(fp)
 401cb40:	00bfff84 	movi	r2,-2
 401cb44:	1884703a 	and	r2,r3,r2
 401cb48:	1001703a 	wrctl	status,r2
  
  return context;
 401cb4c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 401cb50:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 401cb54:	d0a02817 	ldw	r2,-32608(gp)
 401cb58:	10c000c4 	addi	r3,r2,3
 401cb5c:	00bfff04 	movi	r2,-4
 401cb60:	1884703a 	and	r2,r3,r2
 401cb64:	d0a02815 	stw	r2,-32608(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 401cb68:	d0e02817 	ldw	r3,-32608(gp)
 401cb6c:	e0bfff17 	ldw	r2,-4(fp)
 401cb70:	1887883a 	add	r3,r3,r2
 401cb74:	00820034 	movhi	r2,2048
 401cb78:	10800004 	addi	r2,r2,0
 401cb7c:	10c0062e 	bgeu	r2,r3,401cb98 <sbrk+0x74>
 401cb80:	e0bffb17 	ldw	r2,-20(fp)
 401cb84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401cb88:	e0bffa17 	ldw	r2,-24(fp)
 401cb8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 401cb90:	00bfffc4 	movi	r2,-1
 401cb94:	00000b06 	br	401cbc4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 401cb98:	d0a02817 	ldw	r2,-32608(gp)
 401cb9c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 401cba0:	d0e02817 	ldw	r3,-32608(gp)
 401cba4:	e0bfff17 	ldw	r2,-4(fp)
 401cba8:	1885883a 	add	r2,r3,r2
 401cbac:	d0a02815 	stw	r2,-32608(gp)
 401cbb0:	e0bffb17 	ldw	r2,-20(fp)
 401cbb4:	e0bffc15 	stw	r2,-16(fp)
 401cbb8:	e0bffc17 	ldw	r2,-16(fp)
 401cbbc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 401cbc0:	e0bffd17 	ldw	r2,-12(fp)
} 
 401cbc4:	e037883a 	mov	sp,fp
 401cbc8:	df000017 	ldw	fp,0(sp)
 401cbcc:	dec00104 	addi	sp,sp,4
 401cbd0:	f800283a 	ret

0401cbd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401cbd4:	defffe04 	addi	sp,sp,-8
 401cbd8:	dfc00115 	stw	ra,4(sp)
 401cbdc:	df000015 	stw	fp,0(sp)
 401cbe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401cbe4:	d0a02717 	ldw	r2,-32612(gp)
 401cbe8:	10000326 	beq	r2,zero,401cbf8 <alt_get_errno+0x24>
 401cbec:	d0a02717 	ldw	r2,-32612(gp)
 401cbf0:	103ee83a 	callr	r2
 401cbf4:	00000106 	br	401cbfc <alt_get_errno+0x28>
 401cbf8:	d092e904 	addi	r2,gp,19364
}
 401cbfc:	e037883a 	mov	sp,fp
 401cc00:	dfc00117 	ldw	ra,4(sp)
 401cc04:	df000017 	ldw	fp,0(sp)
 401cc08:	dec00204 	addi	sp,sp,8
 401cc0c:	f800283a 	ret

0401cc10 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 401cc10:	defffc04 	addi	sp,sp,-16
 401cc14:	dfc00315 	stw	ra,12(sp)
 401cc18:	df000215 	stw	fp,8(sp)
 401cc1c:	df000204 	addi	fp,sp,8
 401cc20:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401cc24:	d092f217 	ldw	r2,19400(gp)
  clock_t ticks = alt_nticks(); 
 401cc28:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401cc2c:	d092f117 	ldw	r2,19396(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 401cc30:	1000061e 	bne	r2,zero,401cc4c <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 401cc34:	401cbd40 	call	401cbd4 <alt_get_errno>
 401cc38:	1007883a 	mov	r3,r2
 401cc3c:	00801604 	movi	r2,88
 401cc40:	18800015 	stw	r2,0(r3)
    return 0;
 401cc44:	0005883a 	mov	r2,zero
 401cc48:	00000a06 	br	401cc74 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 401cc4c:	e0bfff17 	ldw	r2,-4(fp)
 401cc50:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 401cc54:	e0bfff17 	ldw	r2,-4(fp)
 401cc58:	e0fffe17 	ldw	r3,-8(fp)
 401cc5c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 401cc60:	e0bfff17 	ldw	r2,-4(fp)
 401cc64:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 401cc68:	e0bfff17 	ldw	r2,-4(fp)
 401cc6c:	10000315 	stw	zero,12(r2)

  return ticks;
 401cc70:	e0bffe17 	ldw	r2,-8(fp)
}
 401cc74:	e037883a 	mov	sp,fp
 401cc78:	dfc00117 	ldw	ra,4(sp)
 401cc7c:	df000017 	ldw	fp,0(sp)
 401cc80:	dec00204 	addi	sp,sp,8
 401cc84:	f800283a 	ret

0401cc88 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 401cc88:	defffd04 	addi	sp,sp,-12
 401cc8c:	dfc00215 	stw	ra,8(sp)
 401cc90:	df000115 	stw	fp,4(sp)
 401cc94:	df000104 	addi	fp,sp,4
 401cc98:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 401cc9c:	e13fff17 	ldw	r4,-4(fp)
 401cca0:	401dd440 	call	401dd44 <alt_busy_sleep>
}
 401cca4:	e037883a 	mov	sp,fp
 401cca8:	dfc00117 	ldw	ra,4(sp)
 401ccac:	df000017 	ldw	fp,0(sp)
 401ccb0:	dec00204 	addi	sp,sp,8
 401ccb4:	f800283a 	ret

0401ccb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401ccb8:	defffe04 	addi	sp,sp,-8
 401ccbc:	dfc00115 	stw	ra,4(sp)
 401ccc0:	df000015 	stw	fp,0(sp)
 401ccc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401ccc8:	d0a02717 	ldw	r2,-32612(gp)
 401cccc:	10000326 	beq	r2,zero,401ccdc <alt_get_errno+0x24>
 401ccd0:	d0a02717 	ldw	r2,-32612(gp)
 401ccd4:	103ee83a 	callr	r2
 401ccd8:	00000106 	br	401cce0 <alt_get_errno+0x28>
 401ccdc:	d092e904 	addi	r2,gp,19364
}
 401cce0:	e037883a 	mov	sp,fp
 401cce4:	dfc00117 	ldw	ra,4(sp)
 401cce8:	df000017 	ldw	fp,0(sp)
 401ccec:	dec00204 	addi	sp,sp,8
 401ccf0:	f800283a 	ret

0401ccf4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401ccf4:	defff904 	addi	sp,sp,-28
 401ccf8:	dfc00615 	stw	ra,24(sp)
 401ccfc:	df000515 	stw	fp,20(sp)
 401cd00:	df000504 	addi	fp,sp,20
 401cd04:	e13ffd15 	stw	r4,-12(fp)
 401cd08:	e17ffe15 	stw	r5,-8(fp)
 401cd0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401cd10:	e0bffd17 	ldw	r2,-12(fp)
 401cd14:	10000616 	blt	r2,zero,401cd30 <write+0x3c>
 401cd18:	e0bffd17 	ldw	r2,-12(fp)
 401cd1c:	10c00324 	muli	r3,r2,12
 401cd20:	008100f4 	movhi	r2,1027
 401cd24:	10ae8804 	addi	r2,r2,-17888
 401cd28:	1885883a 	add	r2,r3,r2
 401cd2c:	00000106 	br	401cd34 <write+0x40>
 401cd30:	0005883a 	mov	r2,zero
 401cd34:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401cd38:	e0bffb17 	ldw	r2,-20(fp)
 401cd3c:	10002126 	beq	r2,zero,401cdc4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 401cd40:	e0bffb17 	ldw	r2,-20(fp)
 401cd44:	10800217 	ldw	r2,8(r2)
 401cd48:	108000cc 	andi	r2,r2,3
 401cd4c:	10001826 	beq	r2,zero,401cdb0 <write+0xbc>
 401cd50:	e0bffb17 	ldw	r2,-20(fp)
 401cd54:	10800017 	ldw	r2,0(r2)
 401cd58:	10800617 	ldw	r2,24(r2)
 401cd5c:	10001426 	beq	r2,zero,401cdb0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 401cd60:	e0bffb17 	ldw	r2,-20(fp)
 401cd64:	10800017 	ldw	r2,0(r2)
 401cd68:	10800617 	ldw	r2,24(r2)
 401cd6c:	e0ffff17 	ldw	r3,-4(fp)
 401cd70:	180d883a 	mov	r6,r3
 401cd74:	e17ffe17 	ldw	r5,-8(fp)
 401cd78:	e13ffb17 	ldw	r4,-20(fp)
 401cd7c:	103ee83a 	callr	r2
 401cd80:	e0bffc15 	stw	r2,-16(fp)
 401cd84:	e0bffc17 	ldw	r2,-16(fp)
 401cd88:	1000070e 	bge	r2,zero,401cda8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 401cd8c:	401ccb80 	call	401ccb8 <alt_get_errno>
 401cd90:	1007883a 	mov	r3,r2
 401cd94:	e0bffc17 	ldw	r2,-16(fp)
 401cd98:	0085c83a 	sub	r2,zero,r2
 401cd9c:	18800015 	stw	r2,0(r3)
        return -1;
 401cda0:	00bfffc4 	movi	r2,-1
 401cda4:	00000c06 	br	401cdd8 <write+0xe4>
      }
      return rval;
 401cda8:	e0bffc17 	ldw	r2,-16(fp)
 401cdac:	00000a06 	br	401cdd8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 401cdb0:	401ccb80 	call	401ccb8 <alt_get_errno>
 401cdb4:	1007883a 	mov	r3,r2
 401cdb8:	00800344 	movi	r2,13
 401cdbc:	18800015 	stw	r2,0(r3)
 401cdc0:	00000406 	br	401cdd4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 401cdc4:	401ccb80 	call	401ccb8 <alt_get_errno>
 401cdc8:	1007883a 	mov	r3,r2
 401cdcc:	00801444 	movi	r2,81
 401cdd0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401cdd4:	00bfffc4 	movi	r2,-1
}
 401cdd8:	e037883a 	mov	sp,fp
 401cddc:	dfc00117 	ldw	ra,4(sp)
 401cde0:	df000017 	ldw	fp,0(sp)
 401cde4:	dec00204 	addi	sp,sp,8
 401cde8:	f800283a 	ret

0401cdec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401cdec:	defffd04 	addi	sp,sp,-12
 401cdf0:	dfc00215 	stw	ra,8(sp)
 401cdf4:	df000115 	stw	fp,4(sp)
 401cdf8:	df000104 	addi	fp,sp,4
 401cdfc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 401ce00:	d1602404 	addi	r5,gp,-32624
 401ce04:	e13fff17 	ldw	r4,-4(fp)
 401ce08:	401df200 	call	401df20 <alt_dev_llist_insert>
}
 401ce0c:	e037883a 	mov	sp,fp
 401ce10:	dfc00117 	ldw	ra,4(sp)
 401ce14:	df000017 	ldw	fp,0(sp)
 401ce18:	dec00204 	addi	sp,sp,8
 401ce1c:	f800283a 	ret

0401ce20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 401ce20:	defffd04 	addi	sp,sp,-12
 401ce24:	dfc00215 	stw	ra,8(sp)
 401ce28:	df000115 	stw	fp,4(sp)
 401ce2c:	df000104 	addi	fp,sp,4
 401ce30:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 401ce34:	401e8900 	call	401e890 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 401ce38:	00800044 	movi	r2,1
 401ce3c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 401ce40:	0001883a 	nop
 401ce44:	e037883a 	mov	sp,fp
 401ce48:	dfc00117 	ldw	ra,4(sp)
 401ce4c:	df000017 	ldw	fp,0(sp)
 401ce50:	dec00204 	addi	sp,sp,8
 401ce54:	f800283a 	ret

0401ce58 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 401ce58:	defffe04 	addi	sp,sp,-8
 401ce5c:	dfc00115 	stw	ra,4(sp)
 401ce60:	df000015 	stw	fp,0(sp)
 401ce64:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 401ce68:	01c0fa04 	movi	r7,1000
 401ce6c:	01800084 	movi	r6,2
 401ce70:	000b883a 	mov	r5,zero
 401ce74:	01020034 	movhi	r4,2048
 401ce78:	21141004 	addi	r4,r4,20544
 401ce7c:	401db9c0 	call	401db9c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 401ce80:	01800044 	movi	r6,1
 401ce84:	000b883a 	mov	r5,zero
 401ce88:	010100f4 	movhi	r4,1027
 401ce8c:	212ef204 	addi	r4,r4,-17464
 401ce90:	401d0240 	call	401d024 <altera_avalon_jtag_uart_init>
 401ce94:	010100f4 	movhi	r4,1027
 401ce98:	212ee804 	addi	r4,r4,-17504
 401ce9c:	401cdec0 	call	401cdec <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 401cea0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 401cea4:	0001883a 	nop
}
 401cea8:	0001883a 	nop
 401ceac:	e037883a 	mov	sp,fp
 401ceb0:	dfc00117 	ldw	ra,4(sp)
 401ceb4:	df000017 	ldw	fp,0(sp)
 401ceb8:	dec00204 	addi	sp,sp,8
 401cebc:	f800283a 	ret

0401cec0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401cec0:	defffa04 	addi	sp,sp,-24
 401cec4:	dfc00515 	stw	ra,20(sp)
 401cec8:	df000415 	stw	fp,16(sp)
 401cecc:	df000404 	addi	fp,sp,16
 401ced0:	e13ffd15 	stw	r4,-12(fp)
 401ced4:	e17ffe15 	stw	r5,-8(fp)
 401ced8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401cedc:	e0bffd17 	ldw	r2,-12(fp)
 401cee0:	10800017 	ldw	r2,0(r2)
 401cee4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401cee8:	e0bffc17 	ldw	r2,-16(fp)
 401ceec:	10c00a04 	addi	r3,r2,40
 401cef0:	e0bffd17 	ldw	r2,-12(fp)
 401cef4:	10800217 	ldw	r2,8(r2)
 401cef8:	100f883a 	mov	r7,r2
 401cefc:	e1bfff17 	ldw	r6,-4(fp)
 401cf00:	e17ffe17 	ldw	r5,-8(fp)
 401cf04:	1809883a 	mov	r4,r3
 401cf08:	401d4e80 	call	401d4e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401cf0c:	e037883a 	mov	sp,fp
 401cf10:	dfc00117 	ldw	ra,4(sp)
 401cf14:	df000017 	ldw	fp,0(sp)
 401cf18:	dec00204 	addi	sp,sp,8
 401cf1c:	f800283a 	ret

0401cf20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401cf20:	defffa04 	addi	sp,sp,-24
 401cf24:	dfc00515 	stw	ra,20(sp)
 401cf28:	df000415 	stw	fp,16(sp)
 401cf2c:	df000404 	addi	fp,sp,16
 401cf30:	e13ffd15 	stw	r4,-12(fp)
 401cf34:	e17ffe15 	stw	r5,-8(fp)
 401cf38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401cf3c:	e0bffd17 	ldw	r2,-12(fp)
 401cf40:	10800017 	ldw	r2,0(r2)
 401cf44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 401cf48:	e0bffc17 	ldw	r2,-16(fp)
 401cf4c:	10c00a04 	addi	r3,r2,40
 401cf50:	e0bffd17 	ldw	r2,-12(fp)
 401cf54:	10800217 	ldw	r2,8(r2)
 401cf58:	100f883a 	mov	r7,r2
 401cf5c:	e1bfff17 	ldw	r6,-4(fp)
 401cf60:	e17ffe17 	ldw	r5,-8(fp)
 401cf64:	1809883a 	mov	r4,r3
 401cf68:	401d7040 	call	401d704 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401cf6c:	e037883a 	mov	sp,fp
 401cf70:	dfc00117 	ldw	ra,4(sp)
 401cf74:	df000017 	ldw	fp,0(sp)
 401cf78:	dec00204 	addi	sp,sp,8
 401cf7c:	f800283a 	ret

0401cf80 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 401cf80:	defffc04 	addi	sp,sp,-16
 401cf84:	dfc00315 	stw	ra,12(sp)
 401cf88:	df000215 	stw	fp,8(sp)
 401cf8c:	df000204 	addi	fp,sp,8
 401cf90:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401cf94:	e0bfff17 	ldw	r2,-4(fp)
 401cf98:	10800017 	ldw	r2,0(r2)
 401cf9c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401cfa0:	e0bffe17 	ldw	r2,-8(fp)
 401cfa4:	10c00a04 	addi	r3,r2,40
 401cfa8:	e0bfff17 	ldw	r2,-4(fp)
 401cfac:	10800217 	ldw	r2,8(r2)
 401cfb0:	100b883a 	mov	r5,r2
 401cfb4:	1809883a 	mov	r4,r3
 401cfb8:	401d3900 	call	401d390 <altera_avalon_jtag_uart_close>
}
 401cfbc:	e037883a 	mov	sp,fp
 401cfc0:	dfc00117 	ldw	ra,4(sp)
 401cfc4:	df000017 	ldw	fp,0(sp)
 401cfc8:	dec00204 	addi	sp,sp,8
 401cfcc:	f800283a 	ret

0401cfd0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 401cfd0:	defffa04 	addi	sp,sp,-24
 401cfd4:	dfc00515 	stw	ra,20(sp)
 401cfd8:	df000415 	stw	fp,16(sp)
 401cfdc:	df000404 	addi	fp,sp,16
 401cfe0:	e13ffd15 	stw	r4,-12(fp)
 401cfe4:	e17ffe15 	stw	r5,-8(fp)
 401cfe8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401cfec:	e0bffd17 	ldw	r2,-12(fp)
 401cff0:	10800017 	ldw	r2,0(r2)
 401cff4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401cff8:	e0bffc17 	ldw	r2,-16(fp)
 401cffc:	10800a04 	addi	r2,r2,40
 401d000:	e1bfff17 	ldw	r6,-4(fp)
 401d004:	e17ffe17 	ldw	r5,-8(fp)
 401d008:	1009883a 	mov	r4,r2
 401d00c:	401d3f80 	call	401d3f8 <altera_avalon_jtag_uart_ioctl>
}
 401d010:	e037883a 	mov	sp,fp
 401d014:	dfc00117 	ldw	ra,4(sp)
 401d018:	df000017 	ldw	fp,0(sp)
 401d01c:	dec00204 	addi	sp,sp,8
 401d020:	f800283a 	ret

0401d024 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401d024:	defffa04 	addi	sp,sp,-24
 401d028:	dfc00515 	stw	ra,20(sp)
 401d02c:	df000415 	stw	fp,16(sp)
 401d030:	df000404 	addi	fp,sp,16
 401d034:	e13ffd15 	stw	r4,-12(fp)
 401d038:	e17ffe15 	stw	r5,-8(fp)
 401d03c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401d040:	e0bffd17 	ldw	r2,-12(fp)
 401d044:	00c00044 	movi	r3,1
 401d048:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401d04c:	e0bffd17 	ldw	r2,-12(fp)
 401d050:	10800017 	ldw	r2,0(r2)
 401d054:	10800104 	addi	r2,r2,4
 401d058:	1007883a 	mov	r3,r2
 401d05c:	e0bffd17 	ldw	r2,-12(fp)
 401d060:	10800817 	ldw	r2,32(r2)
 401d064:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 401d068:	e0bffe17 	ldw	r2,-8(fp)
 401d06c:	e0ffff17 	ldw	r3,-4(fp)
 401d070:	d8000015 	stw	zero,0(sp)
 401d074:	e1fffd17 	ldw	r7,-12(fp)
 401d078:	018100b4 	movhi	r6,1026
 401d07c:	31b43904 	addi	r6,r6,-12060
 401d080:	180b883a 	mov	r5,r3
 401d084:	1009883a 	mov	r4,r2
 401d088:	401e0b80 	call	401e0b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401d08c:	e0bffd17 	ldw	r2,-12(fp)
 401d090:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401d094:	e0bffd17 	ldw	r2,-12(fp)
 401d098:	10800204 	addi	r2,r2,8
 401d09c:	d0d2f117 	ldw	r3,19396(gp)
 401d0a0:	e1fffd17 	ldw	r7,-12(fp)
 401d0a4:	018100b4 	movhi	r6,1026
 401d0a8:	31b4bc04 	addi	r6,r6,-11536
 401d0ac:	180b883a 	mov	r5,r3
 401d0b0:	1009883a 	mov	r4,r2
 401d0b4:	401dc180 	call	401dc18 <alt_alarm_start>
 401d0b8:	1000040e 	bge	r2,zero,401d0cc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401d0bc:	e0fffd17 	ldw	r3,-12(fp)
 401d0c0:	00a00034 	movhi	r2,32768
 401d0c4:	10bfffc4 	addi	r2,r2,-1
 401d0c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401d0cc:	0001883a 	nop
 401d0d0:	e037883a 	mov	sp,fp
 401d0d4:	dfc00117 	ldw	ra,4(sp)
 401d0d8:	df000017 	ldw	fp,0(sp)
 401d0dc:	dec00204 	addi	sp,sp,8
 401d0e0:	f800283a 	ret

0401d0e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401d0e4:	defff804 	addi	sp,sp,-32
 401d0e8:	df000715 	stw	fp,28(sp)
 401d0ec:	df000704 	addi	fp,sp,28
 401d0f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 401d0f4:	e0bfff17 	ldw	r2,-4(fp)
 401d0f8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401d0fc:	e0bffb17 	ldw	r2,-20(fp)
 401d100:	10800017 	ldw	r2,0(r2)
 401d104:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401d108:	e0bffc17 	ldw	r2,-16(fp)
 401d10c:	10800104 	addi	r2,r2,4
 401d110:	10800037 	ldwio	r2,0(r2)
 401d114:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 401d118:	e0bffd17 	ldw	r2,-12(fp)
 401d11c:	1080c00c 	andi	r2,r2,768
 401d120:	10006d26 	beq	r2,zero,401d2d8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401d124:	e0bffd17 	ldw	r2,-12(fp)
 401d128:	1080400c 	andi	r2,r2,256
 401d12c:	10003526 	beq	r2,zero,401d204 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 401d130:	00800074 	movhi	r2,1
 401d134:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401d138:	e0bffb17 	ldw	r2,-20(fp)
 401d13c:	10800a17 	ldw	r2,40(r2)
 401d140:	10800044 	addi	r2,r2,1
 401d144:	1081ffcc 	andi	r2,r2,2047
 401d148:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 401d14c:	e0bffb17 	ldw	r2,-20(fp)
 401d150:	10c00b17 	ldw	r3,44(r2)
 401d154:	e0bffe17 	ldw	r2,-8(fp)
 401d158:	18801526 	beq	r3,r2,401d1b0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401d15c:	e0bffc17 	ldw	r2,-16(fp)
 401d160:	10800037 	ldwio	r2,0(r2)
 401d164:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 401d168:	e0bff917 	ldw	r2,-28(fp)
 401d16c:	10a0000c 	andi	r2,r2,32768
 401d170:	10001126 	beq	r2,zero,401d1b8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401d174:	e0bffb17 	ldw	r2,-20(fp)
 401d178:	10800a17 	ldw	r2,40(r2)
 401d17c:	e0fff917 	ldw	r3,-28(fp)
 401d180:	1809883a 	mov	r4,r3
 401d184:	e0fffb17 	ldw	r3,-20(fp)
 401d188:	1885883a 	add	r2,r3,r2
 401d18c:	10800e04 	addi	r2,r2,56
 401d190:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401d194:	e0bffb17 	ldw	r2,-20(fp)
 401d198:	10800a17 	ldw	r2,40(r2)
 401d19c:	10800044 	addi	r2,r2,1
 401d1a0:	10c1ffcc 	andi	r3,r2,2047
 401d1a4:	e0bffb17 	ldw	r2,-20(fp)
 401d1a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401d1ac:	003fe206 	br	401d138 <__alt_data_end+0xfc01d138>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 401d1b0:	0001883a 	nop
 401d1b4:	00000106 	br	401d1bc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401d1b8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401d1bc:	e0bff917 	ldw	r2,-28(fp)
 401d1c0:	10bfffec 	andhi	r2,r2,65535
 401d1c4:	10000f26 	beq	r2,zero,401d204 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401d1c8:	e0bffb17 	ldw	r2,-20(fp)
 401d1cc:	10c00817 	ldw	r3,32(r2)
 401d1d0:	00bfff84 	movi	r2,-2
 401d1d4:	1886703a 	and	r3,r3,r2
 401d1d8:	e0bffb17 	ldw	r2,-20(fp)
 401d1dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401d1e0:	e0bffc17 	ldw	r2,-16(fp)
 401d1e4:	10800104 	addi	r2,r2,4
 401d1e8:	1007883a 	mov	r3,r2
 401d1ec:	e0bffb17 	ldw	r2,-20(fp)
 401d1f0:	10800817 	ldw	r2,32(r2)
 401d1f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401d1f8:	e0bffc17 	ldw	r2,-16(fp)
 401d1fc:	10800104 	addi	r2,r2,4
 401d200:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401d204:	e0bffd17 	ldw	r2,-12(fp)
 401d208:	1080800c 	andi	r2,r2,512
 401d20c:	103fbe26 	beq	r2,zero,401d108 <__alt_data_end+0xfc01d108>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401d210:	e0bffd17 	ldw	r2,-12(fp)
 401d214:	1004d43a 	srli	r2,r2,16
 401d218:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401d21c:	00001406 	br	401d270 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401d220:	e0bffc17 	ldw	r2,-16(fp)
 401d224:	e0fffb17 	ldw	r3,-20(fp)
 401d228:	18c00d17 	ldw	r3,52(r3)
 401d22c:	e13ffb17 	ldw	r4,-20(fp)
 401d230:	20c7883a 	add	r3,r4,r3
 401d234:	18c20e04 	addi	r3,r3,2104
 401d238:	18c00003 	ldbu	r3,0(r3)
 401d23c:	18c03fcc 	andi	r3,r3,255
 401d240:	18c0201c 	xori	r3,r3,128
 401d244:	18ffe004 	addi	r3,r3,-128
 401d248:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401d24c:	e0bffb17 	ldw	r2,-20(fp)
 401d250:	10800d17 	ldw	r2,52(r2)
 401d254:	10800044 	addi	r2,r2,1
 401d258:	10c1ffcc 	andi	r3,r2,2047
 401d25c:	e0bffb17 	ldw	r2,-20(fp)
 401d260:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401d264:	e0bffa17 	ldw	r2,-24(fp)
 401d268:	10bfffc4 	addi	r2,r2,-1
 401d26c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 401d270:	e0bffa17 	ldw	r2,-24(fp)
 401d274:	10000526 	beq	r2,zero,401d28c <altera_avalon_jtag_uart_irq+0x1a8>
 401d278:	e0bffb17 	ldw	r2,-20(fp)
 401d27c:	10c00d17 	ldw	r3,52(r2)
 401d280:	e0bffb17 	ldw	r2,-20(fp)
 401d284:	10800c17 	ldw	r2,48(r2)
 401d288:	18bfe51e 	bne	r3,r2,401d220 <__alt_data_end+0xfc01d220>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401d28c:	e0bffa17 	ldw	r2,-24(fp)
 401d290:	103f9d26 	beq	r2,zero,401d108 <__alt_data_end+0xfc01d108>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401d294:	e0bffb17 	ldw	r2,-20(fp)
 401d298:	10c00817 	ldw	r3,32(r2)
 401d29c:	00bfff44 	movi	r2,-3
 401d2a0:	1886703a 	and	r3,r3,r2
 401d2a4:	e0bffb17 	ldw	r2,-20(fp)
 401d2a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401d2ac:	e0bffb17 	ldw	r2,-20(fp)
 401d2b0:	10800017 	ldw	r2,0(r2)
 401d2b4:	10800104 	addi	r2,r2,4
 401d2b8:	1007883a 	mov	r3,r2
 401d2bc:	e0bffb17 	ldw	r2,-20(fp)
 401d2c0:	10800817 	ldw	r2,32(r2)
 401d2c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401d2c8:	e0bffc17 	ldw	r2,-16(fp)
 401d2cc:	10800104 	addi	r2,r2,4
 401d2d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401d2d4:	003f8c06 	br	401d108 <__alt_data_end+0xfc01d108>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401d2d8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401d2dc:	0001883a 	nop
 401d2e0:	e037883a 	mov	sp,fp
 401d2e4:	df000017 	ldw	fp,0(sp)
 401d2e8:	dec00104 	addi	sp,sp,4
 401d2ec:	f800283a 	ret

0401d2f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401d2f0:	defff804 	addi	sp,sp,-32
 401d2f4:	df000715 	stw	fp,28(sp)
 401d2f8:	df000704 	addi	fp,sp,28
 401d2fc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401d300:	e0bffb17 	ldw	r2,-20(fp)
 401d304:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 401d308:	e0bff917 	ldw	r2,-28(fp)
 401d30c:	10800017 	ldw	r2,0(r2)
 401d310:	10800104 	addi	r2,r2,4
 401d314:	10800037 	ldwio	r2,0(r2)
 401d318:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401d31c:	e0bffa17 	ldw	r2,-24(fp)
 401d320:	1081000c 	andi	r2,r2,1024
 401d324:	10000b26 	beq	r2,zero,401d354 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401d328:	e0bff917 	ldw	r2,-28(fp)
 401d32c:	10800017 	ldw	r2,0(r2)
 401d330:	10800104 	addi	r2,r2,4
 401d334:	1007883a 	mov	r3,r2
 401d338:	e0bff917 	ldw	r2,-28(fp)
 401d33c:	10800817 	ldw	r2,32(r2)
 401d340:	10810014 	ori	r2,r2,1024
 401d344:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 401d348:	e0bff917 	ldw	r2,-28(fp)
 401d34c:	10000915 	stw	zero,36(r2)
 401d350:	00000a06 	br	401d37c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401d354:	e0bff917 	ldw	r2,-28(fp)
 401d358:	10c00917 	ldw	r3,36(r2)
 401d35c:	00a00034 	movhi	r2,32768
 401d360:	10bfff04 	addi	r2,r2,-4
 401d364:	10c00536 	bltu	r2,r3,401d37c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 401d368:	e0bff917 	ldw	r2,-28(fp)
 401d36c:	10800917 	ldw	r2,36(r2)
 401d370:	10c00044 	addi	r3,r2,1
 401d374:	e0bff917 	ldw	r2,-28(fp)
 401d378:	10c00915 	stw	r3,36(r2)
 401d37c:	d092f117 	ldw	r2,19396(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 401d380:	e037883a 	mov	sp,fp
 401d384:	df000017 	ldw	fp,0(sp)
 401d388:	dec00104 	addi	sp,sp,4
 401d38c:	f800283a 	ret

0401d390 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401d390:	defffd04 	addi	sp,sp,-12
 401d394:	df000215 	stw	fp,8(sp)
 401d398:	df000204 	addi	fp,sp,8
 401d39c:	e13ffe15 	stw	r4,-8(fp)
 401d3a0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401d3a4:	00000506 	br	401d3bc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401d3a8:	e0bfff17 	ldw	r2,-4(fp)
 401d3ac:	1090000c 	andi	r2,r2,16384
 401d3b0:	10000226 	beq	r2,zero,401d3bc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401d3b4:	00bffd44 	movi	r2,-11
 401d3b8:	00000b06 	br	401d3e8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401d3bc:	e0bffe17 	ldw	r2,-8(fp)
 401d3c0:	10c00d17 	ldw	r3,52(r2)
 401d3c4:	e0bffe17 	ldw	r2,-8(fp)
 401d3c8:	10800c17 	ldw	r2,48(r2)
 401d3cc:	18800526 	beq	r3,r2,401d3e4 <altera_avalon_jtag_uart_close+0x54>
 401d3d0:	e0bffe17 	ldw	r2,-8(fp)
 401d3d4:	10c00917 	ldw	r3,36(r2)
 401d3d8:	e0bffe17 	ldw	r2,-8(fp)
 401d3dc:	10800117 	ldw	r2,4(r2)
 401d3e0:	18bff136 	bltu	r3,r2,401d3a8 <__alt_data_end+0xfc01d3a8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401d3e4:	0005883a 	mov	r2,zero
}
 401d3e8:	e037883a 	mov	sp,fp
 401d3ec:	df000017 	ldw	fp,0(sp)
 401d3f0:	dec00104 	addi	sp,sp,4
 401d3f4:	f800283a 	ret

0401d3f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401d3f8:	defffa04 	addi	sp,sp,-24
 401d3fc:	df000515 	stw	fp,20(sp)
 401d400:	df000504 	addi	fp,sp,20
 401d404:	e13ffd15 	stw	r4,-12(fp)
 401d408:	e17ffe15 	stw	r5,-8(fp)
 401d40c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 401d410:	00bff9c4 	movi	r2,-25
 401d414:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 401d418:	e0bffe17 	ldw	r2,-8(fp)
 401d41c:	10da8060 	cmpeqi	r3,r2,27137
 401d420:	1800031e 	bne	r3,zero,401d430 <altera_avalon_jtag_uart_ioctl+0x38>
 401d424:	109a80a0 	cmpeqi	r2,r2,27138
 401d428:	1000181e 	bne	r2,zero,401d48c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401d42c:	00002906 	br	401d4d4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 401d430:	e0bffd17 	ldw	r2,-12(fp)
 401d434:	10c00117 	ldw	r3,4(r2)
 401d438:	00a00034 	movhi	r2,32768
 401d43c:	10bfffc4 	addi	r2,r2,-1
 401d440:	18802126 	beq	r3,r2,401d4c8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401d444:	e0bfff17 	ldw	r2,-4(fp)
 401d448:	10800017 	ldw	r2,0(r2)
 401d44c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 401d450:	e0bffc17 	ldw	r2,-16(fp)
 401d454:	10800090 	cmplti	r2,r2,2
 401d458:	1000061e 	bne	r2,zero,401d474 <altera_avalon_jtag_uart_ioctl+0x7c>
 401d45c:	e0fffc17 	ldw	r3,-16(fp)
 401d460:	00a00034 	movhi	r2,32768
 401d464:	10bfffc4 	addi	r2,r2,-1
 401d468:	18800226 	beq	r3,r2,401d474 <altera_avalon_jtag_uart_ioctl+0x7c>
 401d46c:	e0bffc17 	ldw	r2,-16(fp)
 401d470:	00000206 	br	401d47c <altera_avalon_jtag_uart_ioctl+0x84>
 401d474:	00a00034 	movhi	r2,32768
 401d478:	10bfff84 	addi	r2,r2,-2
 401d47c:	e0fffd17 	ldw	r3,-12(fp)
 401d480:	18800115 	stw	r2,4(r3)
      rc = 0;
 401d484:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401d488:	00000f06 	br	401d4c8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401d48c:	e0bffd17 	ldw	r2,-12(fp)
 401d490:	10c00117 	ldw	r3,4(r2)
 401d494:	00a00034 	movhi	r2,32768
 401d498:	10bfffc4 	addi	r2,r2,-1
 401d49c:	18800c26 	beq	r3,r2,401d4d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401d4a0:	e0bffd17 	ldw	r2,-12(fp)
 401d4a4:	10c00917 	ldw	r3,36(r2)
 401d4a8:	e0bffd17 	ldw	r2,-12(fp)
 401d4ac:	10800117 	ldw	r2,4(r2)
 401d4b0:	1885803a 	cmpltu	r2,r3,r2
 401d4b4:	10c03fcc 	andi	r3,r2,255
 401d4b8:	e0bfff17 	ldw	r2,-4(fp)
 401d4bc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401d4c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401d4c4:	00000206 	br	401d4d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401d4c8:	0001883a 	nop
 401d4cc:	00000106 	br	401d4d4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 401d4d0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401d4d4:	e0bffb17 	ldw	r2,-20(fp)
}
 401d4d8:	e037883a 	mov	sp,fp
 401d4dc:	df000017 	ldw	fp,0(sp)
 401d4e0:	dec00104 	addi	sp,sp,4
 401d4e4:	f800283a 	ret

0401d4e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401d4e8:	defff304 	addi	sp,sp,-52
 401d4ec:	dfc00c15 	stw	ra,48(sp)
 401d4f0:	df000b15 	stw	fp,44(sp)
 401d4f4:	df000b04 	addi	fp,sp,44
 401d4f8:	e13ffc15 	stw	r4,-16(fp)
 401d4fc:	e17ffd15 	stw	r5,-12(fp)
 401d500:	e1bffe15 	stw	r6,-8(fp)
 401d504:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 401d508:	e0bffd17 	ldw	r2,-12(fp)
 401d50c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401d510:	00004706 	br	401d630 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401d514:	e0bffc17 	ldw	r2,-16(fp)
 401d518:	10800a17 	ldw	r2,40(r2)
 401d51c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 401d520:	e0bffc17 	ldw	r2,-16(fp)
 401d524:	10800b17 	ldw	r2,44(r2)
 401d528:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401d52c:	e0fff717 	ldw	r3,-36(fp)
 401d530:	e0bff817 	ldw	r2,-32(fp)
 401d534:	18800536 	bltu	r3,r2,401d54c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 401d538:	e0fff717 	ldw	r3,-36(fp)
 401d53c:	e0bff817 	ldw	r2,-32(fp)
 401d540:	1885c83a 	sub	r2,r3,r2
 401d544:	e0bff615 	stw	r2,-40(fp)
 401d548:	00000406 	br	401d55c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401d54c:	00c20004 	movi	r3,2048
 401d550:	e0bff817 	ldw	r2,-32(fp)
 401d554:	1885c83a 	sub	r2,r3,r2
 401d558:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401d55c:	e0bff617 	ldw	r2,-40(fp)
 401d560:	10001e26 	beq	r2,zero,401d5dc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401d564:	e0fffe17 	ldw	r3,-8(fp)
 401d568:	e0bff617 	ldw	r2,-40(fp)
 401d56c:	1880022e 	bgeu	r3,r2,401d578 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 401d570:	e0bffe17 	ldw	r2,-8(fp)
 401d574:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401d578:	e0bffc17 	ldw	r2,-16(fp)
 401d57c:	10c00e04 	addi	r3,r2,56
 401d580:	e0bff817 	ldw	r2,-32(fp)
 401d584:	1885883a 	add	r2,r3,r2
 401d588:	e1bff617 	ldw	r6,-40(fp)
 401d58c:	100b883a 	mov	r5,r2
 401d590:	e13ff517 	ldw	r4,-44(fp)
 401d594:	400c7680 	call	400c768 <memcpy>
      ptr   += n;
 401d598:	e0fff517 	ldw	r3,-44(fp)
 401d59c:	e0bff617 	ldw	r2,-40(fp)
 401d5a0:	1885883a 	add	r2,r3,r2
 401d5a4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 401d5a8:	e0fffe17 	ldw	r3,-8(fp)
 401d5ac:	e0bff617 	ldw	r2,-40(fp)
 401d5b0:	1885c83a 	sub	r2,r3,r2
 401d5b4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401d5b8:	e0fff817 	ldw	r3,-32(fp)
 401d5bc:	e0bff617 	ldw	r2,-40(fp)
 401d5c0:	1885883a 	add	r2,r3,r2
 401d5c4:	10c1ffcc 	andi	r3,r2,2047
 401d5c8:	e0bffc17 	ldw	r2,-16(fp)
 401d5cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 401d5d0:	e0bffe17 	ldw	r2,-8(fp)
 401d5d4:	00bfcf16 	blt	zero,r2,401d514 <__alt_data_end+0xfc01d514>
 401d5d8:	00000106 	br	401d5e0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401d5dc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401d5e0:	e0fff517 	ldw	r3,-44(fp)
 401d5e4:	e0bffd17 	ldw	r2,-12(fp)
 401d5e8:	1880141e 	bne	r3,r2,401d63c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401d5ec:	e0bfff17 	ldw	r2,-4(fp)
 401d5f0:	1090000c 	andi	r2,r2,16384
 401d5f4:	1000131e 	bne	r2,zero,401d644 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401d5f8:	0001883a 	nop
 401d5fc:	e0bffc17 	ldw	r2,-16(fp)
 401d600:	10c00a17 	ldw	r3,40(r2)
 401d604:	e0bff717 	ldw	r2,-36(fp)
 401d608:	1880051e 	bne	r3,r2,401d620 <altera_avalon_jtag_uart_read+0x138>
 401d60c:	e0bffc17 	ldw	r2,-16(fp)
 401d610:	10c00917 	ldw	r3,36(r2)
 401d614:	e0bffc17 	ldw	r2,-16(fp)
 401d618:	10800117 	ldw	r2,4(r2)
 401d61c:	18bff736 	bltu	r3,r2,401d5fc <__alt_data_end+0xfc01d5fc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401d620:	e0bffc17 	ldw	r2,-16(fp)
 401d624:	10c00a17 	ldw	r3,40(r2)
 401d628:	e0bff717 	ldw	r2,-36(fp)
 401d62c:	18800726 	beq	r3,r2,401d64c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401d630:	e0bffe17 	ldw	r2,-8(fp)
 401d634:	00bfb716 	blt	zero,r2,401d514 <__alt_data_end+0xfc01d514>
 401d638:	00000506 	br	401d650 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401d63c:	0001883a 	nop
 401d640:	00000306 	br	401d650 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401d644:	0001883a 	nop
 401d648:	00000106 	br	401d650 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401d64c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 401d650:	e0fff517 	ldw	r3,-44(fp)
 401d654:	e0bffd17 	ldw	r2,-12(fp)
 401d658:	18801826 	beq	r3,r2,401d6bc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401d65c:	0005303a 	rdctl	r2,status
 401d660:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401d664:	e0fffb17 	ldw	r3,-20(fp)
 401d668:	00bfff84 	movi	r2,-2
 401d66c:	1884703a 	and	r2,r3,r2
 401d670:	1001703a 	wrctl	status,r2
  
  return context;
 401d674:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 401d678:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401d67c:	e0bffc17 	ldw	r2,-16(fp)
 401d680:	10800817 	ldw	r2,32(r2)
 401d684:	10c00054 	ori	r3,r2,1
 401d688:	e0bffc17 	ldw	r2,-16(fp)
 401d68c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401d690:	e0bffc17 	ldw	r2,-16(fp)
 401d694:	10800017 	ldw	r2,0(r2)
 401d698:	10800104 	addi	r2,r2,4
 401d69c:	1007883a 	mov	r3,r2
 401d6a0:	e0bffc17 	ldw	r2,-16(fp)
 401d6a4:	10800817 	ldw	r2,32(r2)
 401d6a8:	18800035 	stwio	r2,0(r3)
 401d6ac:	e0bffa17 	ldw	r2,-24(fp)
 401d6b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401d6b4:	e0bff917 	ldw	r2,-28(fp)
 401d6b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401d6bc:	e0fff517 	ldw	r3,-44(fp)
 401d6c0:	e0bffd17 	ldw	r2,-12(fp)
 401d6c4:	18800426 	beq	r3,r2,401d6d8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 401d6c8:	e0fff517 	ldw	r3,-44(fp)
 401d6cc:	e0bffd17 	ldw	r2,-12(fp)
 401d6d0:	1885c83a 	sub	r2,r3,r2
 401d6d4:	00000606 	br	401d6f0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 401d6d8:	e0bfff17 	ldw	r2,-4(fp)
 401d6dc:	1090000c 	andi	r2,r2,16384
 401d6e0:	10000226 	beq	r2,zero,401d6ec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401d6e4:	00bffd44 	movi	r2,-11
 401d6e8:	00000106 	br	401d6f0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401d6ec:	00bffec4 	movi	r2,-5
}
 401d6f0:	e037883a 	mov	sp,fp
 401d6f4:	dfc00117 	ldw	ra,4(sp)
 401d6f8:	df000017 	ldw	fp,0(sp)
 401d6fc:	dec00204 	addi	sp,sp,8
 401d700:	f800283a 	ret

0401d704 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401d704:	defff304 	addi	sp,sp,-52
 401d708:	dfc00c15 	stw	ra,48(sp)
 401d70c:	df000b15 	stw	fp,44(sp)
 401d710:	df000b04 	addi	fp,sp,44
 401d714:	e13ffc15 	stw	r4,-16(fp)
 401d718:	e17ffd15 	stw	r5,-12(fp)
 401d71c:	e1bffe15 	stw	r6,-8(fp)
 401d720:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401d724:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 401d728:	e0bffd17 	ldw	r2,-12(fp)
 401d72c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401d730:	00003706 	br	401d810 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401d734:	e0bffc17 	ldw	r2,-16(fp)
 401d738:	10800c17 	ldw	r2,48(r2)
 401d73c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 401d740:	e0bffc17 	ldw	r2,-16(fp)
 401d744:	10800d17 	ldw	r2,52(r2)
 401d748:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 401d74c:	e0fff917 	ldw	r3,-28(fp)
 401d750:	e0bff517 	ldw	r2,-44(fp)
 401d754:	1880062e 	bgeu	r3,r2,401d770 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 401d758:	e0fff517 	ldw	r3,-44(fp)
 401d75c:	e0bff917 	ldw	r2,-28(fp)
 401d760:	1885c83a 	sub	r2,r3,r2
 401d764:	10bfffc4 	addi	r2,r2,-1
 401d768:	e0bff615 	stw	r2,-40(fp)
 401d76c:	00000b06 	br	401d79c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 401d770:	e0bff517 	ldw	r2,-44(fp)
 401d774:	10000526 	beq	r2,zero,401d78c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401d778:	00c20004 	movi	r3,2048
 401d77c:	e0bff917 	ldw	r2,-28(fp)
 401d780:	1885c83a 	sub	r2,r3,r2
 401d784:	e0bff615 	stw	r2,-40(fp)
 401d788:	00000406 	br	401d79c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401d78c:	00c1ffc4 	movi	r3,2047
 401d790:	e0bff917 	ldw	r2,-28(fp)
 401d794:	1885c83a 	sub	r2,r3,r2
 401d798:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401d79c:	e0bff617 	ldw	r2,-40(fp)
 401d7a0:	10001e26 	beq	r2,zero,401d81c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401d7a4:	e0fffe17 	ldw	r3,-8(fp)
 401d7a8:	e0bff617 	ldw	r2,-40(fp)
 401d7ac:	1880022e 	bgeu	r3,r2,401d7b8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401d7b0:	e0bffe17 	ldw	r2,-8(fp)
 401d7b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401d7b8:	e0bffc17 	ldw	r2,-16(fp)
 401d7bc:	10c20e04 	addi	r3,r2,2104
 401d7c0:	e0bff917 	ldw	r2,-28(fp)
 401d7c4:	1885883a 	add	r2,r3,r2
 401d7c8:	e1bff617 	ldw	r6,-40(fp)
 401d7cc:	e17ffd17 	ldw	r5,-12(fp)
 401d7d0:	1009883a 	mov	r4,r2
 401d7d4:	400c7680 	call	400c768 <memcpy>
      ptr   += n;
 401d7d8:	e0fffd17 	ldw	r3,-12(fp)
 401d7dc:	e0bff617 	ldw	r2,-40(fp)
 401d7e0:	1885883a 	add	r2,r3,r2
 401d7e4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401d7e8:	e0fffe17 	ldw	r3,-8(fp)
 401d7ec:	e0bff617 	ldw	r2,-40(fp)
 401d7f0:	1885c83a 	sub	r2,r3,r2
 401d7f4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401d7f8:	e0fff917 	ldw	r3,-28(fp)
 401d7fc:	e0bff617 	ldw	r2,-40(fp)
 401d800:	1885883a 	add	r2,r3,r2
 401d804:	10c1ffcc 	andi	r3,r2,2047
 401d808:	e0bffc17 	ldw	r2,-16(fp)
 401d80c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401d810:	e0bffe17 	ldw	r2,-8(fp)
 401d814:	00bfc716 	blt	zero,r2,401d734 <__alt_data_end+0xfc01d734>
 401d818:	00000106 	br	401d820 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401d81c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401d820:	0005303a 	rdctl	r2,status
 401d824:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401d828:	e0fffb17 	ldw	r3,-20(fp)
 401d82c:	00bfff84 	movi	r2,-2
 401d830:	1884703a 	and	r2,r3,r2
 401d834:	1001703a 	wrctl	status,r2
  
  return context;
 401d838:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401d83c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401d840:	e0bffc17 	ldw	r2,-16(fp)
 401d844:	10800817 	ldw	r2,32(r2)
 401d848:	10c00094 	ori	r3,r2,2
 401d84c:	e0bffc17 	ldw	r2,-16(fp)
 401d850:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401d854:	e0bffc17 	ldw	r2,-16(fp)
 401d858:	10800017 	ldw	r2,0(r2)
 401d85c:	10800104 	addi	r2,r2,4
 401d860:	1007883a 	mov	r3,r2
 401d864:	e0bffc17 	ldw	r2,-16(fp)
 401d868:	10800817 	ldw	r2,32(r2)
 401d86c:	18800035 	stwio	r2,0(r3)
 401d870:	e0bffa17 	ldw	r2,-24(fp)
 401d874:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401d878:	e0bff817 	ldw	r2,-32(fp)
 401d87c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401d880:	e0bffe17 	ldw	r2,-8(fp)
 401d884:	0080100e 	bge	zero,r2,401d8c8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401d888:	e0bfff17 	ldw	r2,-4(fp)
 401d88c:	1090000c 	andi	r2,r2,16384
 401d890:	1000101e 	bne	r2,zero,401d8d4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401d894:	0001883a 	nop
 401d898:	e0bffc17 	ldw	r2,-16(fp)
 401d89c:	10c00d17 	ldw	r3,52(r2)
 401d8a0:	e0bff517 	ldw	r2,-44(fp)
 401d8a4:	1880051e 	bne	r3,r2,401d8bc <altera_avalon_jtag_uart_write+0x1b8>
 401d8a8:	e0bffc17 	ldw	r2,-16(fp)
 401d8ac:	10c00917 	ldw	r3,36(r2)
 401d8b0:	e0bffc17 	ldw	r2,-16(fp)
 401d8b4:	10800117 	ldw	r2,4(r2)
 401d8b8:	18bff736 	bltu	r3,r2,401d898 <__alt_data_end+0xfc01d898>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401d8bc:	e0bffc17 	ldw	r2,-16(fp)
 401d8c0:	10800917 	ldw	r2,36(r2)
 401d8c4:	1000051e 	bne	r2,zero,401d8dc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401d8c8:	e0bffe17 	ldw	r2,-8(fp)
 401d8cc:	00bfd016 	blt	zero,r2,401d810 <__alt_data_end+0xfc01d810>
 401d8d0:	00000306 	br	401d8e0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401d8d4:	0001883a 	nop
 401d8d8:	00000106 	br	401d8e0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401d8dc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401d8e0:	e0fffd17 	ldw	r3,-12(fp)
 401d8e4:	e0bff717 	ldw	r2,-36(fp)
 401d8e8:	18800426 	beq	r3,r2,401d8fc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401d8ec:	e0fffd17 	ldw	r3,-12(fp)
 401d8f0:	e0bff717 	ldw	r2,-36(fp)
 401d8f4:	1885c83a 	sub	r2,r3,r2
 401d8f8:	00000606 	br	401d914 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401d8fc:	e0bfff17 	ldw	r2,-4(fp)
 401d900:	1090000c 	andi	r2,r2,16384
 401d904:	10000226 	beq	r2,zero,401d910 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 401d908:	00bffd44 	movi	r2,-11
 401d90c:	00000106 	br	401d914 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401d910:	00bffec4 	movi	r2,-5
}
 401d914:	e037883a 	mov	sp,fp
 401d918:	dfc00117 	ldw	ra,4(sp)
 401d91c:	df000017 	ldw	fp,0(sp)
 401d920:	dec00204 	addi	sp,sp,8
 401d924:	f800283a 	ret

0401d928 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401d928:	defff404 	addi	sp,sp,-48
 401d92c:	df000b15 	stw	fp,44(sp)
 401d930:	df000b04 	addi	fp,sp,44
 401d934:	e13ffc15 	stw	r4,-16(fp)
 401d938:	e17ffd15 	stw	r5,-12(fp)
 401d93c:	e1bffe15 	stw	r6,-8(fp)
 401d940:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 401d944:	e0ffff17 	ldw	r3,-4(fp)
 401d948:	e0bffe17 	ldw	r2,-8(fp)
 401d94c:	1885883a 	add	r2,r3,r2
 401d950:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 401d954:	e0c00217 	ldw	r3,8(fp)
 401d958:	e0800117 	ldw	r2,4(fp)
 401d95c:	1885883a 	add	r2,r3,r2
 401d960:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 401d964:	e0800117 	ldw	r2,4(fp)
 401d968:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 401d96c:	e0bffe17 	ldw	r2,-8(fp)
 401d970:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 401d974:	00800044 	movi	r2,1
 401d978:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401d97c:	e0bffc17 	ldw	r2,-16(fp)
 401d980:	10800504 	addi	r2,r2,20
 401d984:	1009883a 	mov	r4,r2
 401d988:	00c00044 	movi	r3,1
 401d98c:	e0bffd17 	ldw	r2,-12(fp)
 401d990:	1884983a 	sll	r2,r3,r2
 401d994:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401d998:	e0800317 	ldw	r2,12(fp)
 401d99c:	1080008c 	andi	r2,r2,2
 401d9a0:	1000051e 	bne	r2,zero,401d9b8 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 401d9a4:	e0bffc17 	ldw	r2,-16(fp)
 401d9a8:	10800304 	addi	r2,r2,12
 401d9ac:	1007883a 	mov	r3,r2
 401d9b0:	00810004 	movi	r2,1024
 401d9b4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401d9b8:	e0bffc17 	ldw	r2,-16(fp)
 401d9bc:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401d9c0:	e0bffc17 	ldw	r2,-16(fp)
 401d9c4:	10800204 	addi	r2,r2,8
 401d9c8:	10800037 	ldwio	r2,0(r2)
 401d9cc:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401d9d0:	e0bffa17 	ldw	r2,-24(fp)
 401d9d4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401d9d8:	10000226 	beq	r2,zero,401d9e4 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401d9dc:	e0bff717 	ldw	r2,-36(fp)
 401d9e0:	1000031e 	bne	r2,zero,401d9f0 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401d9e4:	e0bffa17 	ldw	r2,-24(fp)
 401d9e8:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401d9ec:	103ff426 	beq	r2,zero,401d9c0 <__alt_data_end+0xfc01d9c0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 401d9f0:	e0bffa17 	ldw	r2,-24(fp)
 401d9f4:	1080100c 	andi	r2,r2,64
 401d9f8:	10001e26 	beq	r2,zero,401da74 <alt_avalon_spi_command+0x14c>
 401d9fc:	e0bff717 	ldw	r2,-36(fp)
 401da00:	00801c0e 	bge	zero,r2,401da74 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 401da04:	e0bff717 	ldw	r2,-36(fp)
 401da08:	10bfffc4 	addi	r2,r2,-1
 401da0c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 401da10:	e0ffff17 	ldw	r3,-4(fp)
 401da14:	e0bff817 	ldw	r2,-32(fp)
 401da18:	18800a2e 	bgeu	r3,r2,401da44 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 401da1c:	e0bffc17 	ldw	r2,-16(fp)
 401da20:	10800104 	addi	r2,r2,4
 401da24:	1009883a 	mov	r4,r2
 401da28:	e0bfff17 	ldw	r2,-4(fp)
 401da2c:	10c00044 	addi	r3,r2,1
 401da30:	e0ffff15 	stw	r3,-4(fp)
 401da34:	10800003 	ldbu	r2,0(r2)
 401da38:	10803fcc 	andi	r2,r2,255
 401da3c:	20800035 	stwio	r2,0(r4)
 401da40:	00000c06 	br	401da74 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 401da44:	e0bff517 	ldw	r2,-44(fp)
 401da48:	10000826 	beq	r2,zero,401da6c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 401da4c:	e0bff517 	ldw	r2,-44(fp)
 401da50:	10bfffc4 	addi	r2,r2,-1
 401da54:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 401da58:	e0bffc17 	ldw	r2,-16(fp)
 401da5c:	10800104 	addi	r2,r2,4
 401da60:	0007883a 	mov	r3,zero
 401da64:	10c00035 	stwio	r3,0(r2)
 401da68:	00000206 	br	401da74 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 401da6c:	00bf0004 	movi	r2,-1024
 401da70:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401da74:	e0bffa17 	ldw	r2,-24(fp)
 401da78:	1080200c 	andi	r2,r2,128
 401da7c:	103fd026 	beq	r2,zero,401d9c0 <__alt_data_end+0xfc01d9c0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401da80:	e0bffc17 	ldw	r2,-16(fp)
 401da84:	10800037 	ldwio	r2,0(r2)
 401da88:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 401da8c:	e0bff617 	ldw	r2,-40(fp)
 401da90:	10000426 	beq	r2,zero,401daa4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 401da94:	e0bff617 	ldw	r2,-40(fp)
 401da98:	10bfffc4 	addi	r2,r2,-1
 401da9c:	e0bff615 	stw	r2,-40(fp)
 401daa0:	00000506 	br	401dab8 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 401daa4:	e0800217 	ldw	r2,8(fp)
 401daa8:	10c00044 	addi	r3,r2,1
 401daac:	e0c00215 	stw	r3,8(fp)
 401dab0:	e0fffb17 	ldw	r3,-20(fp)
 401dab4:	10c00005 	stb	r3,0(r2)
      credits++;
 401dab8:	e0bff717 	ldw	r2,-36(fp)
 401dabc:	10800044 	addi	r2,r2,1
 401dac0:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 401dac4:	e0bff617 	ldw	r2,-40(fp)
 401dac8:	103fbd1e 	bne	r2,zero,401d9c0 <__alt_data_end+0xfc01d9c0>
 401dacc:	e0c00217 	ldw	r3,8(fp)
 401dad0:	e0bff917 	ldw	r2,-28(fp)
 401dad4:	18bfba1e 	bne	r3,r2,401d9c0 <__alt_data_end+0xfc01d9c0>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401dad8:	e0bffc17 	ldw	r2,-16(fp)
 401dadc:	10800204 	addi	r2,r2,8
 401dae0:	10800037 	ldwio	r2,0(r2)
 401dae4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 401dae8:	e0bffa17 	ldw	r2,-24(fp)
 401daec:	1080080c 	andi	r2,r2,32
 401daf0:	103ff926 	beq	r2,zero,401dad8 <__alt_data_end+0xfc01dad8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 401daf4:	e0800317 	ldw	r2,12(fp)
 401daf8:	1080004c 	andi	r2,r2,1
 401dafc:	1000041e 	bne	r2,zero,401db10 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 401db00:	e0bffc17 	ldw	r2,-16(fp)
 401db04:	10800304 	addi	r2,r2,12
 401db08:	0007883a 	mov	r3,zero
 401db0c:	10c00035 	stwio	r3,0(r2)

  return read_length;
 401db10:	e0800117 	ldw	r2,4(fp)
}
 401db14:	e037883a 	mov	sp,fp
 401db18:	df000017 	ldw	fp,0(sp)
 401db1c:	dec00104 	addi	sp,sp,4
 401db20:	f800283a 	ret

0401db24 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401db24:	defffa04 	addi	sp,sp,-24
 401db28:	dfc00515 	stw	ra,20(sp)
 401db2c:	df000415 	stw	fp,16(sp)
 401db30:	df000404 	addi	fp,sp,16
 401db34:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401db38:	0007883a 	mov	r3,zero
 401db3c:	e0bfff17 	ldw	r2,-4(fp)
 401db40:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401db44:	e0bfff17 	ldw	r2,-4(fp)
 401db48:	10800104 	addi	r2,r2,4
 401db4c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401db50:	0005303a 	rdctl	r2,status
 401db54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401db58:	e0fffd17 	ldw	r3,-12(fp)
 401db5c:	00bfff84 	movi	r2,-2
 401db60:	1884703a 	and	r2,r3,r2
 401db64:	1001703a 	wrctl	status,r2
  
  return context;
 401db68:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 401db6c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401db70:	401e7880 	call	401e788 <alt_tick>
 401db74:	e0bffc17 	ldw	r2,-16(fp)
 401db78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401db7c:	e0bffe17 	ldw	r2,-8(fp)
 401db80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401db84:	0001883a 	nop
 401db88:	e037883a 	mov	sp,fp
 401db8c:	dfc00117 	ldw	ra,4(sp)
 401db90:	df000017 	ldw	fp,0(sp)
 401db94:	dec00204 	addi	sp,sp,8
 401db98:	f800283a 	ret

0401db9c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401db9c:	defff804 	addi	sp,sp,-32
 401dba0:	dfc00715 	stw	ra,28(sp)
 401dba4:	df000615 	stw	fp,24(sp)
 401dba8:	df000604 	addi	fp,sp,24
 401dbac:	e13ffc15 	stw	r4,-16(fp)
 401dbb0:	e17ffd15 	stw	r5,-12(fp)
 401dbb4:	e1bffe15 	stw	r6,-8(fp)
 401dbb8:	e1ffff15 	stw	r7,-4(fp)
 401dbbc:	e0bfff17 	ldw	r2,-4(fp)
 401dbc0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401dbc4:	d092f117 	ldw	r2,19396(gp)
 401dbc8:	1000021e 	bne	r2,zero,401dbd4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401dbcc:	e0bffb17 	ldw	r2,-20(fp)
 401dbd0:	d092f115 	stw	r2,19396(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401dbd4:	e0bffc17 	ldw	r2,-16(fp)
 401dbd8:	10800104 	addi	r2,r2,4
 401dbdc:	00c001c4 	movi	r3,7
 401dbe0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401dbe4:	d8000015 	stw	zero,0(sp)
 401dbe8:	e1fffc17 	ldw	r7,-16(fp)
 401dbec:	018100b4 	movhi	r6,1026
 401dbf0:	31b6c904 	addi	r6,r6,-9436
 401dbf4:	e17ffe17 	ldw	r5,-8(fp)
 401dbf8:	e13ffd17 	ldw	r4,-12(fp)
 401dbfc:	401e0b80 	call	401e0b8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401dc00:	0001883a 	nop
 401dc04:	e037883a 	mov	sp,fp
 401dc08:	dfc00117 	ldw	ra,4(sp)
 401dc0c:	df000017 	ldw	fp,0(sp)
 401dc10:	dec00204 	addi	sp,sp,8
 401dc14:	f800283a 	ret

0401dc18 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401dc18:	defff504 	addi	sp,sp,-44
 401dc1c:	df000a15 	stw	fp,40(sp)
 401dc20:	df000a04 	addi	fp,sp,40
 401dc24:	e13ffc15 	stw	r4,-16(fp)
 401dc28:	e17ffd15 	stw	r5,-12(fp)
 401dc2c:	e1bffe15 	stw	r6,-8(fp)
 401dc30:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401dc34:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401dc38:	d092f117 	ldw	r2,19396(gp)
  
  if (alt_ticks_per_second ())
 401dc3c:	10003c26 	beq	r2,zero,401dd30 <alt_alarm_start+0x118>
  {
    if (alarm)
 401dc40:	e0bffc17 	ldw	r2,-16(fp)
 401dc44:	10003826 	beq	r2,zero,401dd28 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 401dc48:	e0bffc17 	ldw	r2,-16(fp)
 401dc4c:	e0fffe17 	ldw	r3,-8(fp)
 401dc50:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401dc54:	e0bffc17 	ldw	r2,-16(fp)
 401dc58:	e0ffff17 	ldw	r3,-4(fp)
 401dc5c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401dc60:	0005303a 	rdctl	r2,status
 401dc64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401dc68:	e0fff917 	ldw	r3,-28(fp)
 401dc6c:	00bfff84 	movi	r2,-2
 401dc70:	1884703a 	and	r2,r3,r2
 401dc74:	1001703a 	wrctl	status,r2
  
  return context;
 401dc78:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401dc7c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401dc80:	d092f217 	ldw	r2,19400(gp)
      
      current_nticks = alt_nticks();
 401dc84:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 401dc88:	e0fffd17 	ldw	r3,-12(fp)
 401dc8c:	e0bff617 	ldw	r2,-40(fp)
 401dc90:	1885883a 	add	r2,r3,r2
 401dc94:	10c00044 	addi	r3,r2,1
 401dc98:	e0bffc17 	ldw	r2,-16(fp)
 401dc9c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401dca0:	e0bffc17 	ldw	r2,-16(fp)
 401dca4:	10c00217 	ldw	r3,8(r2)
 401dca8:	e0bff617 	ldw	r2,-40(fp)
 401dcac:	1880042e 	bgeu	r3,r2,401dcc0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401dcb0:	e0bffc17 	ldw	r2,-16(fp)
 401dcb4:	00c00044 	movi	r3,1
 401dcb8:	10c00405 	stb	r3,16(r2)
 401dcbc:	00000206 	br	401dcc8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401dcc0:	e0bffc17 	ldw	r2,-16(fp)
 401dcc4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401dcc8:	e0bffc17 	ldw	r2,-16(fp)
 401dccc:	d0e02a04 	addi	r3,gp,-32600
 401dcd0:	e0fffa15 	stw	r3,-24(fp)
 401dcd4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401dcd8:	e0bffb17 	ldw	r2,-20(fp)
 401dcdc:	e0fffa17 	ldw	r3,-24(fp)
 401dce0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401dce4:	e0bffa17 	ldw	r2,-24(fp)
 401dce8:	10c00017 	ldw	r3,0(r2)
 401dcec:	e0bffb17 	ldw	r2,-20(fp)
 401dcf0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401dcf4:	e0bffa17 	ldw	r2,-24(fp)
 401dcf8:	10800017 	ldw	r2,0(r2)
 401dcfc:	e0fffb17 	ldw	r3,-20(fp)
 401dd00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401dd04:	e0bffa17 	ldw	r2,-24(fp)
 401dd08:	e0fffb17 	ldw	r3,-20(fp)
 401dd0c:	10c00015 	stw	r3,0(r2)
 401dd10:	e0bff817 	ldw	r2,-32(fp)
 401dd14:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401dd18:	e0bff717 	ldw	r2,-36(fp)
 401dd1c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401dd20:	0005883a 	mov	r2,zero
 401dd24:	00000306 	br	401dd34 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 401dd28:	00bffa84 	movi	r2,-22
 401dd2c:	00000106 	br	401dd34 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401dd30:	00bfde84 	movi	r2,-134
  }
}
 401dd34:	e037883a 	mov	sp,fp
 401dd38:	df000017 	ldw	fp,0(sp)
 401dd3c:	dec00104 	addi	sp,sp,4
 401dd40:	f800283a 	ret

0401dd44 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401dd44:	defffa04 	addi	sp,sp,-24
 401dd48:	dfc00515 	stw	ra,20(sp)
 401dd4c:	df000415 	stw	fp,16(sp)
 401dd50:	df000404 	addi	fp,sp,16
 401dd54:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 401dd58:	008000c4 	movi	r2,3
 401dd5c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401dd60:	e0fffd17 	ldw	r3,-12(fp)
 401dd64:	008003f4 	movhi	r2,15
 401dd68:	10909004 	addi	r2,r2,16960
 401dd6c:	1885383a 	mul	r2,r3,r2
 401dd70:	100b883a 	mov	r5,r2
 401dd74:	0100bef4 	movhi	r4,763
 401dd78:	213c2004 	addi	r4,r4,-3968
 401dd7c:	400b8780 	call	400b878 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401dd80:	100b883a 	mov	r5,r2
 401dd84:	01200034 	movhi	r4,32768
 401dd88:	213fffc4 	addi	r4,r4,-1
 401dd8c:	400b8780 	call	400b878 <__udivsi3>
 401dd90:	100b883a 	mov	r5,r2
 401dd94:	e13fff17 	ldw	r4,-4(fp)
 401dd98:	400b8780 	call	400b878 <__udivsi3>
 401dd9c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401dda0:	e0bffe17 	ldw	r2,-8(fp)
 401dda4:	10002a26 	beq	r2,zero,401de50 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 401dda8:	e03ffc15 	stw	zero,-16(fp)
 401ddac:	00001706 	br	401de0c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401ddb0:	00a00034 	movhi	r2,32768
 401ddb4:	10bfffc4 	addi	r2,r2,-1
 401ddb8:	10bfffc4 	addi	r2,r2,-1
 401ddbc:	103ffe1e 	bne	r2,zero,401ddb8 <__alt_data_end+0xfc01ddb8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401ddc0:	e0fffd17 	ldw	r3,-12(fp)
 401ddc4:	008003f4 	movhi	r2,15
 401ddc8:	10909004 	addi	r2,r2,16960
 401ddcc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401ddd0:	100b883a 	mov	r5,r2
 401ddd4:	0100bef4 	movhi	r4,763
 401ddd8:	213c2004 	addi	r4,r4,-3968
 401dddc:	400b8780 	call	400b878 <__udivsi3>
 401dde0:	100b883a 	mov	r5,r2
 401dde4:	01200034 	movhi	r4,32768
 401dde8:	213fffc4 	addi	r4,r4,-1
 401ddec:	400b8780 	call	400b878 <__udivsi3>
 401ddf0:	1007883a 	mov	r3,r2
 401ddf4:	e0bfff17 	ldw	r2,-4(fp)
 401ddf8:	10c5c83a 	sub	r2,r2,r3
 401ddfc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401de00:	e0bffc17 	ldw	r2,-16(fp)
 401de04:	10800044 	addi	r2,r2,1
 401de08:	e0bffc15 	stw	r2,-16(fp)
 401de0c:	e0fffc17 	ldw	r3,-16(fp)
 401de10:	e0bffe17 	ldw	r2,-8(fp)
 401de14:	18bfe616 	blt	r3,r2,401ddb0 <__alt_data_end+0xfc01ddb0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401de18:	e0fffd17 	ldw	r3,-12(fp)
 401de1c:	008003f4 	movhi	r2,15
 401de20:	10909004 	addi	r2,r2,16960
 401de24:	1885383a 	mul	r2,r3,r2
 401de28:	100b883a 	mov	r5,r2
 401de2c:	0100bef4 	movhi	r4,763
 401de30:	213c2004 	addi	r4,r4,-3968
 401de34:	400b8780 	call	400b878 <__udivsi3>
 401de38:	1007883a 	mov	r3,r2
 401de3c:	e0bfff17 	ldw	r2,-4(fp)
 401de40:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401de44:	10bfffc4 	addi	r2,r2,-1
 401de48:	103ffe1e 	bne	r2,zero,401de44 <__alt_data_end+0xfc01de44>
 401de4c:	00000d06 	br	401de84 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401de50:	e0fffd17 	ldw	r3,-12(fp)
 401de54:	008003f4 	movhi	r2,15
 401de58:	10909004 	addi	r2,r2,16960
 401de5c:	1885383a 	mul	r2,r3,r2
 401de60:	100b883a 	mov	r5,r2
 401de64:	0100bef4 	movhi	r4,763
 401de68:	213c2004 	addi	r4,r4,-3968
 401de6c:	400b8780 	call	400b878 <__udivsi3>
 401de70:	1007883a 	mov	r3,r2
 401de74:	e0bfff17 	ldw	r2,-4(fp)
 401de78:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401de7c:	10bfffc4 	addi	r2,r2,-1
 401de80:	00bffe16 	blt	zero,r2,401de7c <__alt_data_end+0xfc01de7c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401de84:	0005883a 	mov	r2,zero
}
 401de88:	e037883a 	mov	sp,fp
 401de8c:	dfc00117 	ldw	ra,4(sp)
 401de90:	df000017 	ldw	fp,0(sp)
 401de94:	dec00204 	addi	sp,sp,8
 401de98:	f800283a 	ret

0401de9c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401de9c:	defffe04 	addi	sp,sp,-8
 401dea0:	df000115 	stw	fp,4(sp)
 401dea4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 401dea8:	e03fff15 	stw	zero,-4(fp)
 401deac:	00000506 	br	401dec4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 401deb0:	e0bfff17 	ldw	r2,-4(fp)
 401deb4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 401deb8:	e0bfff17 	ldw	r2,-4(fp)
 401debc:	10800804 	addi	r2,r2,32
 401dec0:	e0bfff15 	stw	r2,-4(fp)
 401dec4:	e0bfff17 	ldw	r2,-4(fp)
 401dec8:	10820030 	cmpltui	r2,r2,2048
 401decc:	103ff81e 	bne	r2,zero,401deb0 <__alt_data_end+0xfc01deb0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401ded0:	0001883a 	nop
 401ded4:	e037883a 	mov	sp,fp
 401ded8:	df000017 	ldw	fp,0(sp)
 401dedc:	dec00104 	addi	sp,sp,4
 401dee0:	f800283a 	ret

0401dee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401dee4:	defffe04 	addi	sp,sp,-8
 401dee8:	dfc00115 	stw	ra,4(sp)
 401deec:	df000015 	stw	fp,0(sp)
 401def0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401def4:	d0a02717 	ldw	r2,-32612(gp)
 401def8:	10000326 	beq	r2,zero,401df08 <alt_get_errno+0x24>
 401defc:	d0a02717 	ldw	r2,-32612(gp)
 401df00:	103ee83a 	callr	r2
 401df04:	00000106 	br	401df0c <alt_get_errno+0x28>
 401df08:	d092e904 	addi	r2,gp,19364
}
 401df0c:	e037883a 	mov	sp,fp
 401df10:	dfc00117 	ldw	ra,4(sp)
 401df14:	df000017 	ldw	fp,0(sp)
 401df18:	dec00204 	addi	sp,sp,8
 401df1c:	f800283a 	ret

0401df20 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401df20:	defffa04 	addi	sp,sp,-24
 401df24:	dfc00515 	stw	ra,20(sp)
 401df28:	df000415 	stw	fp,16(sp)
 401df2c:	df000404 	addi	fp,sp,16
 401df30:	e13ffe15 	stw	r4,-8(fp)
 401df34:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401df38:	e0bffe17 	ldw	r2,-8(fp)
 401df3c:	10000326 	beq	r2,zero,401df4c <alt_dev_llist_insert+0x2c>
 401df40:	e0bffe17 	ldw	r2,-8(fp)
 401df44:	10800217 	ldw	r2,8(r2)
 401df48:	1000061e 	bne	r2,zero,401df64 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 401df4c:	401dee40 	call	401dee4 <alt_get_errno>
 401df50:	1007883a 	mov	r3,r2
 401df54:	00800584 	movi	r2,22
 401df58:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 401df5c:	00bffa84 	movi	r2,-22
 401df60:	00001306 	br	401dfb0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 401df64:	e0bffe17 	ldw	r2,-8(fp)
 401df68:	e0ffff17 	ldw	r3,-4(fp)
 401df6c:	e0fffc15 	stw	r3,-16(fp)
 401df70:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401df74:	e0bffd17 	ldw	r2,-12(fp)
 401df78:	e0fffc17 	ldw	r3,-16(fp)
 401df7c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401df80:	e0bffc17 	ldw	r2,-16(fp)
 401df84:	10c00017 	ldw	r3,0(r2)
 401df88:	e0bffd17 	ldw	r2,-12(fp)
 401df8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401df90:	e0bffc17 	ldw	r2,-16(fp)
 401df94:	10800017 	ldw	r2,0(r2)
 401df98:	e0fffd17 	ldw	r3,-12(fp)
 401df9c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401dfa0:	e0bffc17 	ldw	r2,-16(fp)
 401dfa4:	e0fffd17 	ldw	r3,-12(fp)
 401dfa8:	10c00015 	stw	r3,0(r2)

  return 0;  
 401dfac:	0005883a 	mov	r2,zero
}
 401dfb0:	e037883a 	mov	sp,fp
 401dfb4:	dfc00117 	ldw	ra,4(sp)
 401dfb8:	df000017 	ldw	fp,0(sp)
 401dfbc:	dec00204 	addi	sp,sp,8
 401dfc0:	f800283a 	ret

0401dfc4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401dfc4:	defffd04 	addi	sp,sp,-12
 401dfc8:	dfc00215 	stw	ra,8(sp)
 401dfcc:	df000115 	stw	fp,4(sp)
 401dfd0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401dfd4:	008100b4 	movhi	r2,1026
 401dfd8:	10bbdf04 	addi	r2,r2,-4228
 401dfdc:	e0bfff15 	stw	r2,-4(fp)
 401dfe0:	00000606 	br	401dffc <_do_ctors+0x38>
        (*ctor) (); 
 401dfe4:	e0bfff17 	ldw	r2,-4(fp)
 401dfe8:	10800017 	ldw	r2,0(r2)
 401dfec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401dff0:	e0bfff17 	ldw	r2,-4(fp)
 401dff4:	10bfff04 	addi	r2,r2,-4
 401dff8:	e0bfff15 	stw	r2,-4(fp)
 401dffc:	e0ffff17 	ldw	r3,-4(fp)
 401e000:	008100b4 	movhi	r2,1026
 401e004:	10bbd344 	addi	r2,r2,-4275
 401e008:	18bff62e 	bgeu	r3,r2,401dfe4 <__alt_data_end+0xfc01dfe4>
        (*ctor) (); 
}
 401e00c:	0001883a 	nop
 401e010:	e037883a 	mov	sp,fp
 401e014:	dfc00117 	ldw	ra,4(sp)
 401e018:	df000017 	ldw	fp,0(sp)
 401e01c:	dec00204 	addi	sp,sp,8
 401e020:	f800283a 	ret

0401e024 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401e024:	defffd04 	addi	sp,sp,-12
 401e028:	dfc00215 	stw	ra,8(sp)
 401e02c:	df000115 	stw	fp,4(sp)
 401e030:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401e034:	008100b4 	movhi	r2,1026
 401e038:	10bbdf04 	addi	r2,r2,-4228
 401e03c:	e0bfff15 	stw	r2,-4(fp)
 401e040:	00000606 	br	401e05c <_do_dtors+0x38>
        (*dtor) (); 
 401e044:	e0bfff17 	ldw	r2,-4(fp)
 401e048:	10800017 	ldw	r2,0(r2)
 401e04c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401e050:	e0bfff17 	ldw	r2,-4(fp)
 401e054:	10bfff04 	addi	r2,r2,-4
 401e058:	e0bfff15 	stw	r2,-4(fp)
 401e05c:	e0ffff17 	ldw	r3,-4(fp)
 401e060:	008100b4 	movhi	r2,1026
 401e064:	10bbe004 	addi	r2,r2,-4224
 401e068:	18bff62e 	bgeu	r3,r2,401e044 <__alt_data_end+0xfc01e044>
        (*dtor) (); 
}
 401e06c:	0001883a 	nop
 401e070:	e037883a 	mov	sp,fp
 401e074:	dfc00117 	ldw	ra,4(sp)
 401e078:	df000017 	ldw	fp,0(sp)
 401e07c:	dec00204 	addi	sp,sp,8
 401e080:	f800283a 	ret

0401e084 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401e084:	defffe04 	addi	sp,sp,-8
 401e088:	dfc00115 	stw	ra,4(sp)
 401e08c:	df000015 	stw	fp,0(sp)
 401e090:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 401e094:	01440004 	movi	r5,4096
 401e098:	0009883a 	mov	r4,zero
 401e09c:	401eaf00 	call	401eaf0 <alt_icache_flush>
#endif
}
 401e0a0:	0001883a 	nop
 401e0a4:	e037883a 	mov	sp,fp
 401e0a8:	dfc00117 	ldw	ra,4(sp)
 401e0ac:	df000017 	ldw	fp,0(sp)
 401e0b0:	dec00204 	addi	sp,sp,8
 401e0b4:	f800283a 	ret

0401e0b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401e0b8:	defff904 	addi	sp,sp,-28
 401e0bc:	dfc00615 	stw	ra,24(sp)
 401e0c0:	df000515 	stw	fp,20(sp)
 401e0c4:	df000504 	addi	fp,sp,20
 401e0c8:	e13ffc15 	stw	r4,-16(fp)
 401e0cc:	e17ffd15 	stw	r5,-12(fp)
 401e0d0:	e1bffe15 	stw	r6,-8(fp)
 401e0d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401e0d8:	e0800217 	ldw	r2,8(fp)
 401e0dc:	d8800015 	stw	r2,0(sp)
 401e0e0:	e1ffff17 	ldw	r7,-4(fp)
 401e0e4:	e1bffe17 	ldw	r6,-8(fp)
 401e0e8:	e17ffd17 	ldw	r5,-12(fp)
 401e0ec:	e13ffc17 	ldw	r4,-16(fp)
 401e0f0:	401e2680 	call	401e268 <alt_iic_isr_register>
}  
 401e0f4:	e037883a 	mov	sp,fp
 401e0f8:	dfc00117 	ldw	ra,4(sp)
 401e0fc:	df000017 	ldw	fp,0(sp)
 401e100:	dec00204 	addi	sp,sp,8
 401e104:	f800283a 	ret

0401e108 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401e108:	defff904 	addi	sp,sp,-28
 401e10c:	df000615 	stw	fp,24(sp)
 401e110:	df000604 	addi	fp,sp,24
 401e114:	e13ffe15 	stw	r4,-8(fp)
 401e118:	e17fff15 	stw	r5,-4(fp)
 401e11c:	e0bfff17 	ldw	r2,-4(fp)
 401e120:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e124:	0005303a 	rdctl	r2,status
 401e128:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e12c:	e0fffb17 	ldw	r3,-20(fp)
 401e130:	00bfff84 	movi	r2,-2
 401e134:	1884703a 	and	r2,r3,r2
 401e138:	1001703a 	wrctl	status,r2
  
  return context;
 401e13c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401e140:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401e144:	00c00044 	movi	r3,1
 401e148:	e0bffa17 	ldw	r2,-24(fp)
 401e14c:	1884983a 	sll	r2,r3,r2
 401e150:	1007883a 	mov	r3,r2
 401e154:	d092f017 	ldw	r2,19392(gp)
 401e158:	1884b03a 	or	r2,r3,r2
 401e15c:	d092f015 	stw	r2,19392(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401e160:	d092f017 	ldw	r2,19392(gp)
 401e164:	100170fa 	wrctl	ienable,r2
 401e168:	e0bffc17 	ldw	r2,-16(fp)
 401e16c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e170:	e0bffd17 	ldw	r2,-12(fp)
 401e174:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401e178:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401e17c:	0001883a 	nop
}
 401e180:	e037883a 	mov	sp,fp
 401e184:	df000017 	ldw	fp,0(sp)
 401e188:	dec00104 	addi	sp,sp,4
 401e18c:	f800283a 	ret

0401e190 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401e190:	defff904 	addi	sp,sp,-28
 401e194:	df000615 	stw	fp,24(sp)
 401e198:	df000604 	addi	fp,sp,24
 401e19c:	e13ffe15 	stw	r4,-8(fp)
 401e1a0:	e17fff15 	stw	r5,-4(fp)
 401e1a4:	e0bfff17 	ldw	r2,-4(fp)
 401e1a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e1ac:	0005303a 	rdctl	r2,status
 401e1b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e1b4:	e0fffb17 	ldw	r3,-20(fp)
 401e1b8:	00bfff84 	movi	r2,-2
 401e1bc:	1884703a 	and	r2,r3,r2
 401e1c0:	1001703a 	wrctl	status,r2
  
  return context;
 401e1c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401e1c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401e1cc:	00c00044 	movi	r3,1
 401e1d0:	e0bffa17 	ldw	r2,-24(fp)
 401e1d4:	1884983a 	sll	r2,r3,r2
 401e1d8:	0084303a 	nor	r2,zero,r2
 401e1dc:	1007883a 	mov	r3,r2
 401e1e0:	d092f017 	ldw	r2,19392(gp)
 401e1e4:	1884703a 	and	r2,r3,r2
 401e1e8:	d092f015 	stw	r2,19392(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401e1ec:	d092f017 	ldw	r2,19392(gp)
 401e1f0:	100170fa 	wrctl	ienable,r2
 401e1f4:	e0bffc17 	ldw	r2,-16(fp)
 401e1f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e1fc:	e0bffd17 	ldw	r2,-12(fp)
 401e200:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401e204:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401e208:	0001883a 	nop
}
 401e20c:	e037883a 	mov	sp,fp
 401e210:	df000017 	ldw	fp,0(sp)
 401e214:	dec00104 	addi	sp,sp,4
 401e218:	f800283a 	ret

0401e21c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401e21c:	defffc04 	addi	sp,sp,-16
 401e220:	df000315 	stw	fp,12(sp)
 401e224:	df000304 	addi	fp,sp,12
 401e228:	e13ffe15 	stw	r4,-8(fp)
 401e22c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401e230:	000530fa 	rdctl	r2,ienable
 401e234:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401e238:	00c00044 	movi	r3,1
 401e23c:	e0bfff17 	ldw	r2,-4(fp)
 401e240:	1884983a 	sll	r2,r3,r2
 401e244:	1007883a 	mov	r3,r2
 401e248:	e0bffd17 	ldw	r2,-12(fp)
 401e24c:	1884703a 	and	r2,r3,r2
 401e250:	1004c03a 	cmpne	r2,r2,zero
 401e254:	10803fcc 	andi	r2,r2,255
}
 401e258:	e037883a 	mov	sp,fp
 401e25c:	df000017 	ldw	fp,0(sp)
 401e260:	dec00104 	addi	sp,sp,4
 401e264:	f800283a 	ret

0401e268 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401e268:	defff504 	addi	sp,sp,-44
 401e26c:	dfc00a15 	stw	ra,40(sp)
 401e270:	df000915 	stw	fp,36(sp)
 401e274:	df000904 	addi	fp,sp,36
 401e278:	e13ffc15 	stw	r4,-16(fp)
 401e27c:	e17ffd15 	stw	r5,-12(fp)
 401e280:	e1bffe15 	stw	r6,-8(fp)
 401e284:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401e288:	00bffa84 	movi	r2,-22
 401e28c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401e290:	e0bffd17 	ldw	r2,-12(fp)
 401e294:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401e298:	e0bff817 	ldw	r2,-32(fp)
 401e29c:	10800808 	cmpgei	r2,r2,32
 401e2a0:	1000271e 	bne	r2,zero,401e340 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e2a4:	0005303a 	rdctl	r2,status
 401e2a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e2ac:	e0fffb17 	ldw	r3,-20(fp)
 401e2b0:	00bfff84 	movi	r2,-2
 401e2b4:	1884703a 	and	r2,r3,r2
 401e2b8:	1001703a 	wrctl	status,r2
  
  return context;
 401e2bc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401e2c0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 401e2c4:	00810134 	movhi	r2,1028
 401e2c8:	10a62d04 	addi	r2,r2,-26444
 401e2cc:	e0fff817 	ldw	r3,-32(fp)
 401e2d0:	180690fa 	slli	r3,r3,3
 401e2d4:	10c5883a 	add	r2,r2,r3
 401e2d8:	e0fffe17 	ldw	r3,-8(fp)
 401e2dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401e2e0:	00810134 	movhi	r2,1028
 401e2e4:	10a62d04 	addi	r2,r2,-26444
 401e2e8:	e0fff817 	ldw	r3,-32(fp)
 401e2ec:	180690fa 	slli	r3,r3,3
 401e2f0:	10c5883a 	add	r2,r2,r3
 401e2f4:	10800104 	addi	r2,r2,4
 401e2f8:	e0ffff17 	ldw	r3,-4(fp)
 401e2fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401e300:	e0bffe17 	ldw	r2,-8(fp)
 401e304:	10000526 	beq	r2,zero,401e31c <alt_iic_isr_register+0xb4>
 401e308:	e0bff817 	ldw	r2,-32(fp)
 401e30c:	100b883a 	mov	r5,r2
 401e310:	e13ffc17 	ldw	r4,-16(fp)
 401e314:	401e1080 	call	401e108 <alt_ic_irq_enable>
 401e318:	00000406 	br	401e32c <alt_iic_isr_register+0xc4>
 401e31c:	e0bff817 	ldw	r2,-32(fp)
 401e320:	100b883a 	mov	r5,r2
 401e324:	e13ffc17 	ldw	r4,-16(fp)
 401e328:	401e1900 	call	401e190 <alt_ic_irq_disable>
 401e32c:	e0bff715 	stw	r2,-36(fp)
 401e330:	e0bffa17 	ldw	r2,-24(fp)
 401e334:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e338:	e0bff917 	ldw	r2,-28(fp)
 401e33c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401e340:	e0bff717 	ldw	r2,-36(fp)
}
 401e344:	e037883a 	mov	sp,fp
 401e348:	dfc00117 	ldw	ra,4(sp)
 401e34c:	df000017 	ldw	fp,0(sp)
 401e350:	dec00204 	addi	sp,sp,8
 401e354:	f800283a 	ret

0401e358 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401e358:	defff904 	addi	sp,sp,-28
 401e35c:	dfc00615 	stw	ra,24(sp)
 401e360:	df000515 	stw	fp,20(sp)
 401e364:	df000504 	addi	fp,sp,20
 401e368:	e13ffc15 	stw	r4,-16(fp)
 401e36c:	e17ffd15 	stw	r5,-12(fp)
 401e370:	e1bffe15 	stw	r6,-8(fp)
 401e374:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 401e378:	e1bfff17 	ldw	r6,-4(fp)
 401e37c:	e17ffe17 	ldw	r5,-8(fp)
 401e380:	e13ffd17 	ldw	r4,-12(fp)
 401e384:	401e5980 	call	401e598 <open>
 401e388:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 401e38c:	e0bffb17 	ldw	r2,-20(fp)
 401e390:	10001c16 	blt	r2,zero,401e404 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 401e394:	008100f4 	movhi	r2,1027
 401e398:	10ae8804 	addi	r2,r2,-17888
 401e39c:	e0fffb17 	ldw	r3,-20(fp)
 401e3a0:	18c00324 	muli	r3,r3,12
 401e3a4:	10c5883a 	add	r2,r2,r3
 401e3a8:	10c00017 	ldw	r3,0(r2)
 401e3ac:	e0bffc17 	ldw	r2,-16(fp)
 401e3b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401e3b4:	008100f4 	movhi	r2,1027
 401e3b8:	10ae8804 	addi	r2,r2,-17888
 401e3bc:	e0fffb17 	ldw	r3,-20(fp)
 401e3c0:	18c00324 	muli	r3,r3,12
 401e3c4:	10c5883a 	add	r2,r2,r3
 401e3c8:	10800104 	addi	r2,r2,4
 401e3cc:	10c00017 	ldw	r3,0(r2)
 401e3d0:	e0bffc17 	ldw	r2,-16(fp)
 401e3d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401e3d8:	008100f4 	movhi	r2,1027
 401e3dc:	10ae8804 	addi	r2,r2,-17888
 401e3e0:	e0fffb17 	ldw	r3,-20(fp)
 401e3e4:	18c00324 	muli	r3,r3,12
 401e3e8:	10c5883a 	add	r2,r2,r3
 401e3ec:	10800204 	addi	r2,r2,8
 401e3f0:	10c00017 	ldw	r3,0(r2)
 401e3f4:	e0bffc17 	ldw	r2,-16(fp)
 401e3f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401e3fc:	e13ffb17 	ldw	r4,-20(fp)
 401e400:	401cac00 	call	401cac0 <alt_release_fd>
  }
} 
 401e404:	0001883a 	nop
 401e408:	e037883a 	mov	sp,fp
 401e40c:	dfc00117 	ldw	ra,4(sp)
 401e410:	df000017 	ldw	fp,0(sp)
 401e414:	dec00204 	addi	sp,sp,8
 401e418:	f800283a 	ret

0401e41c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401e41c:	defffb04 	addi	sp,sp,-20
 401e420:	dfc00415 	stw	ra,16(sp)
 401e424:	df000315 	stw	fp,12(sp)
 401e428:	df000304 	addi	fp,sp,12
 401e42c:	e13ffd15 	stw	r4,-12(fp)
 401e430:	e17ffe15 	stw	r5,-8(fp)
 401e434:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401e438:	01c07fc4 	movi	r7,511
 401e43c:	01800044 	movi	r6,1
 401e440:	e17ffd17 	ldw	r5,-12(fp)
 401e444:	010100f4 	movhi	r4,1027
 401e448:	212e8b04 	addi	r4,r4,-17876
 401e44c:	401e3580 	call	401e358 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401e450:	01c07fc4 	movi	r7,511
 401e454:	000d883a 	mov	r6,zero
 401e458:	e17ffe17 	ldw	r5,-8(fp)
 401e45c:	010100f4 	movhi	r4,1027
 401e460:	212e8804 	addi	r4,r4,-17888
 401e464:	401e3580 	call	401e358 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401e468:	01c07fc4 	movi	r7,511
 401e46c:	01800044 	movi	r6,1
 401e470:	e17fff17 	ldw	r5,-4(fp)
 401e474:	010100f4 	movhi	r4,1027
 401e478:	212e8e04 	addi	r4,r4,-17864
 401e47c:	401e3580 	call	401e358 <alt_open_fd>
}  
 401e480:	0001883a 	nop
 401e484:	e037883a 	mov	sp,fp
 401e488:	dfc00117 	ldw	ra,4(sp)
 401e48c:	df000017 	ldw	fp,0(sp)
 401e490:	dec00204 	addi	sp,sp,8
 401e494:	f800283a 	ret

0401e498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401e498:	defffe04 	addi	sp,sp,-8
 401e49c:	dfc00115 	stw	ra,4(sp)
 401e4a0:	df000015 	stw	fp,0(sp)
 401e4a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401e4a8:	d0a02717 	ldw	r2,-32612(gp)
 401e4ac:	10000326 	beq	r2,zero,401e4bc <alt_get_errno+0x24>
 401e4b0:	d0a02717 	ldw	r2,-32612(gp)
 401e4b4:	103ee83a 	callr	r2
 401e4b8:	00000106 	br	401e4c0 <alt_get_errno+0x28>
 401e4bc:	d092e904 	addi	r2,gp,19364
}
 401e4c0:	e037883a 	mov	sp,fp
 401e4c4:	dfc00117 	ldw	ra,4(sp)
 401e4c8:	df000017 	ldw	fp,0(sp)
 401e4cc:	dec00204 	addi	sp,sp,8
 401e4d0:	f800283a 	ret

0401e4d4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401e4d4:	defffd04 	addi	sp,sp,-12
 401e4d8:	df000215 	stw	fp,8(sp)
 401e4dc:	df000204 	addi	fp,sp,8
 401e4e0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401e4e4:	e0bfff17 	ldw	r2,-4(fp)
 401e4e8:	10800217 	ldw	r2,8(r2)
 401e4ec:	10d00034 	orhi	r3,r2,16384
 401e4f0:	e0bfff17 	ldw	r2,-4(fp)
 401e4f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401e4f8:	e03ffe15 	stw	zero,-8(fp)
 401e4fc:	00001d06 	br	401e574 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401e500:	008100f4 	movhi	r2,1027
 401e504:	10ae8804 	addi	r2,r2,-17888
 401e508:	e0fffe17 	ldw	r3,-8(fp)
 401e50c:	18c00324 	muli	r3,r3,12
 401e510:	10c5883a 	add	r2,r2,r3
 401e514:	10c00017 	ldw	r3,0(r2)
 401e518:	e0bfff17 	ldw	r2,-4(fp)
 401e51c:	10800017 	ldw	r2,0(r2)
 401e520:	1880111e 	bne	r3,r2,401e568 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401e524:	008100f4 	movhi	r2,1027
 401e528:	10ae8804 	addi	r2,r2,-17888
 401e52c:	e0fffe17 	ldw	r3,-8(fp)
 401e530:	18c00324 	muli	r3,r3,12
 401e534:	10c5883a 	add	r2,r2,r3
 401e538:	10800204 	addi	r2,r2,8
 401e53c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401e540:	1000090e 	bge	r2,zero,401e568 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401e544:	e0bffe17 	ldw	r2,-8(fp)
 401e548:	10c00324 	muli	r3,r2,12
 401e54c:	008100f4 	movhi	r2,1027
 401e550:	10ae8804 	addi	r2,r2,-17888
 401e554:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401e558:	e0bfff17 	ldw	r2,-4(fp)
 401e55c:	18800226 	beq	r3,r2,401e568 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401e560:	00bffcc4 	movi	r2,-13
 401e564:	00000806 	br	401e588 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401e568:	e0bffe17 	ldw	r2,-8(fp)
 401e56c:	10800044 	addi	r2,r2,1
 401e570:	e0bffe15 	stw	r2,-8(fp)
 401e574:	d0a02617 	ldw	r2,-32616(gp)
 401e578:	1007883a 	mov	r3,r2
 401e57c:	e0bffe17 	ldw	r2,-8(fp)
 401e580:	18bfdf2e 	bgeu	r3,r2,401e500 <__alt_data_end+0xfc01e500>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401e584:	0005883a 	mov	r2,zero
}
 401e588:	e037883a 	mov	sp,fp
 401e58c:	df000017 	ldw	fp,0(sp)
 401e590:	dec00104 	addi	sp,sp,4
 401e594:	f800283a 	ret

0401e598 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401e598:	defff604 	addi	sp,sp,-40
 401e59c:	dfc00915 	stw	ra,36(sp)
 401e5a0:	df000815 	stw	fp,32(sp)
 401e5a4:	df000804 	addi	fp,sp,32
 401e5a8:	e13ffd15 	stw	r4,-12(fp)
 401e5ac:	e17ffe15 	stw	r5,-8(fp)
 401e5b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401e5b4:	00bfffc4 	movi	r2,-1
 401e5b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401e5bc:	00bffb44 	movi	r2,-19
 401e5c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401e5c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401e5c8:	d1602404 	addi	r5,gp,-32624
 401e5cc:	e13ffd17 	ldw	r4,-12(fp)
 401e5d0:	401e8b40 	call	401e8b4 <alt_find_dev>
 401e5d4:	e0bff815 	stw	r2,-32(fp)
 401e5d8:	e0bff817 	ldw	r2,-32(fp)
 401e5dc:	1000051e 	bne	r2,zero,401e5f4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401e5e0:	e13ffd17 	ldw	r4,-12(fp)
 401e5e4:	401e9440 	call	401e944 <alt_find_file>
 401e5e8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401e5ec:	00800044 	movi	r2,1
 401e5f0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401e5f4:	e0bff817 	ldw	r2,-32(fp)
 401e5f8:	10002926 	beq	r2,zero,401e6a0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401e5fc:	e13ff817 	ldw	r4,-32(fp)
 401e600:	401ea4c0 	call	401ea4c <alt_get_fd>
 401e604:	e0bff915 	stw	r2,-28(fp)
 401e608:	e0bff917 	ldw	r2,-28(fp)
 401e60c:	1000030e 	bge	r2,zero,401e61c <open+0x84>
    {
      status = index;
 401e610:	e0bff917 	ldw	r2,-28(fp)
 401e614:	e0bffa15 	stw	r2,-24(fp)
 401e618:	00002306 	br	401e6a8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 401e61c:	e0bff917 	ldw	r2,-28(fp)
 401e620:	10c00324 	muli	r3,r2,12
 401e624:	008100f4 	movhi	r2,1027
 401e628:	10ae8804 	addi	r2,r2,-17888
 401e62c:	1885883a 	add	r2,r3,r2
 401e630:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401e634:	e0fffe17 	ldw	r3,-8(fp)
 401e638:	00900034 	movhi	r2,16384
 401e63c:	10bfffc4 	addi	r2,r2,-1
 401e640:	1886703a 	and	r3,r3,r2
 401e644:	e0bffc17 	ldw	r2,-16(fp)
 401e648:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401e64c:	e0bffb17 	ldw	r2,-20(fp)
 401e650:	1000051e 	bne	r2,zero,401e668 <open+0xd0>
 401e654:	e13ffc17 	ldw	r4,-16(fp)
 401e658:	401e4d40 	call	401e4d4 <alt_file_locked>
 401e65c:	e0bffa15 	stw	r2,-24(fp)
 401e660:	e0bffa17 	ldw	r2,-24(fp)
 401e664:	10001016 	blt	r2,zero,401e6a8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401e668:	e0bff817 	ldw	r2,-32(fp)
 401e66c:	10800317 	ldw	r2,12(r2)
 401e670:	10000826 	beq	r2,zero,401e694 <open+0xfc>
 401e674:	e0bff817 	ldw	r2,-32(fp)
 401e678:	10800317 	ldw	r2,12(r2)
 401e67c:	e1ffff17 	ldw	r7,-4(fp)
 401e680:	e1bffe17 	ldw	r6,-8(fp)
 401e684:	e17ffd17 	ldw	r5,-12(fp)
 401e688:	e13ffc17 	ldw	r4,-16(fp)
 401e68c:	103ee83a 	callr	r2
 401e690:	00000106 	br	401e698 <open+0x100>
 401e694:	0005883a 	mov	r2,zero
 401e698:	e0bffa15 	stw	r2,-24(fp)
 401e69c:	00000206 	br	401e6a8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401e6a0:	00bffb44 	movi	r2,-19
 401e6a4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401e6a8:	e0bffa17 	ldw	r2,-24(fp)
 401e6ac:	1000090e 	bge	r2,zero,401e6d4 <open+0x13c>
  {
    alt_release_fd (index);  
 401e6b0:	e13ff917 	ldw	r4,-28(fp)
 401e6b4:	401cac00 	call	401cac0 <alt_release_fd>
    ALT_ERRNO = -status;
 401e6b8:	401e4980 	call	401e498 <alt_get_errno>
 401e6bc:	1007883a 	mov	r3,r2
 401e6c0:	e0bffa17 	ldw	r2,-24(fp)
 401e6c4:	0085c83a 	sub	r2,zero,r2
 401e6c8:	18800015 	stw	r2,0(r3)
    return -1;
 401e6cc:	00bfffc4 	movi	r2,-1
 401e6d0:	00000106 	br	401e6d8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 401e6d4:	e0bff917 	ldw	r2,-28(fp)
}
 401e6d8:	e037883a 	mov	sp,fp
 401e6dc:	dfc00117 	ldw	ra,4(sp)
 401e6e0:	df000017 	ldw	fp,0(sp)
 401e6e4:	dec00204 	addi	sp,sp,8
 401e6e8:	f800283a 	ret

0401e6ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401e6ec:	defffa04 	addi	sp,sp,-24
 401e6f0:	df000515 	stw	fp,20(sp)
 401e6f4:	df000504 	addi	fp,sp,20
 401e6f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e6fc:	0005303a 	rdctl	r2,status
 401e700:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e704:	e0fffc17 	ldw	r3,-16(fp)
 401e708:	00bfff84 	movi	r2,-2
 401e70c:	1884703a 	and	r2,r3,r2
 401e710:	1001703a 	wrctl	status,r2
  
  return context;
 401e714:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401e718:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401e71c:	e0bfff17 	ldw	r2,-4(fp)
 401e720:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401e724:	e0bffd17 	ldw	r2,-12(fp)
 401e728:	10800017 	ldw	r2,0(r2)
 401e72c:	e0fffd17 	ldw	r3,-12(fp)
 401e730:	18c00117 	ldw	r3,4(r3)
 401e734:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401e738:	e0bffd17 	ldw	r2,-12(fp)
 401e73c:	10800117 	ldw	r2,4(r2)
 401e740:	e0fffd17 	ldw	r3,-12(fp)
 401e744:	18c00017 	ldw	r3,0(r3)
 401e748:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401e74c:	e0bffd17 	ldw	r2,-12(fp)
 401e750:	e0fffd17 	ldw	r3,-12(fp)
 401e754:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401e758:	e0bffd17 	ldw	r2,-12(fp)
 401e75c:	e0fffd17 	ldw	r3,-12(fp)
 401e760:	10c00015 	stw	r3,0(r2)
 401e764:	e0bffb17 	ldw	r2,-20(fp)
 401e768:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e76c:	e0bffe17 	ldw	r2,-8(fp)
 401e770:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401e774:	0001883a 	nop
 401e778:	e037883a 	mov	sp,fp
 401e77c:	df000017 	ldw	fp,0(sp)
 401e780:	dec00104 	addi	sp,sp,4
 401e784:	f800283a 	ret

0401e788 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401e788:	defffb04 	addi	sp,sp,-20
 401e78c:	dfc00415 	stw	ra,16(sp)
 401e790:	df000315 	stw	fp,12(sp)
 401e794:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401e798:	d0a02a17 	ldw	r2,-32600(gp)
 401e79c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401e7a0:	d092f217 	ldw	r2,19400(gp)
 401e7a4:	10800044 	addi	r2,r2,1
 401e7a8:	d092f215 	stw	r2,19400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401e7ac:	00002e06 	br	401e868 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401e7b0:	e0bffd17 	ldw	r2,-12(fp)
 401e7b4:	10800017 	ldw	r2,0(r2)
 401e7b8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401e7bc:	e0bffd17 	ldw	r2,-12(fp)
 401e7c0:	10800403 	ldbu	r2,16(r2)
 401e7c4:	10803fcc 	andi	r2,r2,255
 401e7c8:	10000426 	beq	r2,zero,401e7dc <alt_tick+0x54>
 401e7cc:	d092f217 	ldw	r2,19400(gp)
 401e7d0:	1000021e 	bne	r2,zero,401e7dc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401e7d4:	e0bffd17 	ldw	r2,-12(fp)
 401e7d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401e7dc:	e0bffd17 	ldw	r2,-12(fp)
 401e7e0:	10800217 	ldw	r2,8(r2)
 401e7e4:	d0d2f217 	ldw	r3,19400(gp)
 401e7e8:	18801d36 	bltu	r3,r2,401e860 <alt_tick+0xd8>
 401e7ec:	e0bffd17 	ldw	r2,-12(fp)
 401e7f0:	10800403 	ldbu	r2,16(r2)
 401e7f4:	10803fcc 	andi	r2,r2,255
 401e7f8:	1000191e 	bne	r2,zero,401e860 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401e7fc:	e0bffd17 	ldw	r2,-12(fp)
 401e800:	10800317 	ldw	r2,12(r2)
 401e804:	e0fffd17 	ldw	r3,-12(fp)
 401e808:	18c00517 	ldw	r3,20(r3)
 401e80c:	1809883a 	mov	r4,r3
 401e810:	103ee83a 	callr	r2
 401e814:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401e818:	e0bfff17 	ldw	r2,-4(fp)
 401e81c:	1000031e 	bne	r2,zero,401e82c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401e820:	e13ffd17 	ldw	r4,-12(fp)
 401e824:	401e6ec0 	call	401e6ec <alt_alarm_stop>
 401e828:	00000d06 	br	401e860 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 401e82c:	e0bffd17 	ldw	r2,-12(fp)
 401e830:	10c00217 	ldw	r3,8(r2)
 401e834:	e0bfff17 	ldw	r2,-4(fp)
 401e838:	1887883a 	add	r3,r3,r2
 401e83c:	e0bffd17 	ldw	r2,-12(fp)
 401e840:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401e844:	e0bffd17 	ldw	r2,-12(fp)
 401e848:	10c00217 	ldw	r3,8(r2)
 401e84c:	d092f217 	ldw	r2,19400(gp)
 401e850:	1880032e 	bgeu	r3,r2,401e860 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 401e854:	e0bffd17 	ldw	r2,-12(fp)
 401e858:	00c00044 	movi	r3,1
 401e85c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 401e860:	e0bffe17 	ldw	r2,-8(fp)
 401e864:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401e868:	e0fffd17 	ldw	r3,-12(fp)
 401e86c:	d0a02a04 	addi	r2,gp,-32600
 401e870:	18bfcf1e 	bne	r3,r2,401e7b0 <__alt_data_end+0xfc01e7b0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401e874:	0001883a 	nop
}
 401e878:	0001883a 	nop
 401e87c:	e037883a 	mov	sp,fp
 401e880:	dfc00117 	ldw	ra,4(sp)
 401e884:	df000017 	ldw	fp,0(sp)
 401e888:	dec00204 	addi	sp,sp,8
 401e88c:	f800283a 	ret

0401e890 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401e890:	deffff04 	addi	sp,sp,-4
 401e894:	df000015 	stw	fp,0(sp)
 401e898:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401e89c:	000170fa 	wrctl	ienable,zero
}
 401e8a0:	0001883a 	nop
 401e8a4:	e037883a 	mov	sp,fp
 401e8a8:	df000017 	ldw	fp,0(sp)
 401e8ac:	dec00104 	addi	sp,sp,4
 401e8b0:	f800283a 	ret

0401e8b4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401e8b4:	defffa04 	addi	sp,sp,-24
 401e8b8:	dfc00515 	stw	ra,20(sp)
 401e8bc:	df000415 	stw	fp,16(sp)
 401e8c0:	df000404 	addi	fp,sp,16
 401e8c4:	e13ffe15 	stw	r4,-8(fp)
 401e8c8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401e8cc:	e0bfff17 	ldw	r2,-4(fp)
 401e8d0:	10800017 	ldw	r2,0(r2)
 401e8d4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401e8d8:	e13ffe17 	ldw	r4,-8(fp)
 401e8dc:	400d0300 	call	400d030 <strlen>
 401e8e0:	10800044 	addi	r2,r2,1
 401e8e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401e8e8:	00000d06 	br	401e920 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401e8ec:	e0bffc17 	ldw	r2,-16(fp)
 401e8f0:	10800217 	ldw	r2,8(r2)
 401e8f4:	e0fffd17 	ldw	r3,-12(fp)
 401e8f8:	180d883a 	mov	r6,r3
 401e8fc:	e17ffe17 	ldw	r5,-8(fp)
 401e900:	1009883a 	mov	r4,r2
 401e904:	400c6ec0 	call	400c6ec <memcmp>
 401e908:	1000021e 	bne	r2,zero,401e914 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401e90c:	e0bffc17 	ldw	r2,-16(fp)
 401e910:	00000706 	br	401e930 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401e914:	e0bffc17 	ldw	r2,-16(fp)
 401e918:	10800017 	ldw	r2,0(r2)
 401e91c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401e920:	e0fffc17 	ldw	r3,-16(fp)
 401e924:	e0bfff17 	ldw	r2,-4(fp)
 401e928:	18bff01e 	bne	r3,r2,401e8ec <__alt_data_end+0xfc01e8ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401e92c:	0005883a 	mov	r2,zero
}
 401e930:	e037883a 	mov	sp,fp
 401e934:	dfc00117 	ldw	ra,4(sp)
 401e938:	df000017 	ldw	fp,0(sp)
 401e93c:	dec00204 	addi	sp,sp,8
 401e940:	f800283a 	ret

0401e944 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401e944:	defffb04 	addi	sp,sp,-20
 401e948:	dfc00415 	stw	ra,16(sp)
 401e94c:	df000315 	stw	fp,12(sp)
 401e950:	df000304 	addi	fp,sp,12
 401e954:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401e958:	d0a02217 	ldw	r2,-32632(gp)
 401e95c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401e960:	00003106 	br	401ea28 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401e964:	e0bffd17 	ldw	r2,-12(fp)
 401e968:	10800217 	ldw	r2,8(r2)
 401e96c:	1009883a 	mov	r4,r2
 401e970:	400d0300 	call	400d030 <strlen>
 401e974:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 401e978:	e0bffd17 	ldw	r2,-12(fp)
 401e97c:	10c00217 	ldw	r3,8(r2)
 401e980:	e0bffe17 	ldw	r2,-8(fp)
 401e984:	10bfffc4 	addi	r2,r2,-1
 401e988:	1885883a 	add	r2,r3,r2
 401e98c:	10800003 	ldbu	r2,0(r2)
 401e990:	10803fcc 	andi	r2,r2,255
 401e994:	1080201c 	xori	r2,r2,128
 401e998:	10bfe004 	addi	r2,r2,-128
 401e99c:	10800bd8 	cmpnei	r2,r2,47
 401e9a0:	1000031e 	bne	r2,zero,401e9b0 <alt_find_file+0x6c>
    {
      len -= 1;
 401e9a4:	e0bffe17 	ldw	r2,-8(fp)
 401e9a8:	10bfffc4 	addi	r2,r2,-1
 401e9ac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401e9b0:	e0bffe17 	ldw	r2,-8(fp)
 401e9b4:	e0ffff17 	ldw	r3,-4(fp)
 401e9b8:	1885883a 	add	r2,r3,r2
 401e9bc:	10800003 	ldbu	r2,0(r2)
 401e9c0:	10803fcc 	andi	r2,r2,255
 401e9c4:	1080201c 	xori	r2,r2,128
 401e9c8:	10bfe004 	addi	r2,r2,-128
 401e9cc:	10800be0 	cmpeqi	r2,r2,47
 401e9d0:	1000081e 	bne	r2,zero,401e9f4 <alt_find_file+0xb0>
 401e9d4:	e0bffe17 	ldw	r2,-8(fp)
 401e9d8:	e0ffff17 	ldw	r3,-4(fp)
 401e9dc:	1885883a 	add	r2,r3,r2
 401e9e0:	10800003 	ldbu	r2,0(r2)
 401e9e4:	10803fcc 	andi	r2,r2,255
 401e9e8:	1080201c 	xori	r2,r2,128
 401e9ec:	10bfe004 	addi	r2,r2,-128
 401e9f0:	10000a1e 	bne	r2,zero,401ea1c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401e9f4:	e0bffd17 	ldw	r2,-12(fp)
 401e9f8:	10800217 	ldw	r2,8(r2)
 401e9fc:	e0fffe17 	ldw	r3,-8(fp)
 401ea00:	180d883a 	mov	r6,r3
 401ea04:	e17fff17 	ldw	r5,-4(fp)
 401ea08:	1009883a 	mov	r4,r2
 401ea0c:	400c6ec0 	call	400c6ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401ea10:	1000021e 	bne	r2,zero,401ea1c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401ea14:	e0bffd17 	ldw	r2,-12(fp)
 401ea18:	00000706 	br	401ea38 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401ea1c:	e0bffd17 	ldw	r2,-12(fp)
 401ea20:	10800017 	ldw	r2,0(r2)
 401ea24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401ea28:	e0fffd17 	ldw	r3,-12(fp)
 401ea2c:	d0a02204 	addi	r2,gp,-32632
 401ea30:	18bfcc1e 	bne	r3,r2,401e964 <__alt_data_end+0xfc01e964>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401ea34:	0005883a 	mov	r2,zero
}
 401ea38:	e037883a 	mov	sp,fp
 401ea3c:	dfc00117 	ldw	ra,4(sp)
 401ea40:	df000017 	ldw	fp,0(sp)
 401ea44:	dec00204 	addi	sp,sp,8
 401ea48:	f800283a 	ret

0401ea4c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401ea4c:	defffc04 	addi	sp,sp,-16
 401ea50:	df000315 	stw	fp,12(sp)
 401ea54:	df000304 	addi	fp,sp,12
 401ea58:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 401ea5c:	00bffa04 	movi	r2,-24
 401ea60:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401ea64:	e03ffd15 	stw	zero,-12(fp)
 401ea68:	00001906 	br	401ead0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 401ea6c:	008100f4 	movhi	r2,1027
 401ea70:	10ae8804 	addi	r2,r2,-17888
 401ea74:	e0fffd17 	ldw	r3,-12(fp)
 401ea78:	18c00324 	muli	r3,r3,12
 401ea7c:	10c5883a 	add	r2,r2,r3
 401ea80:	10800017 	ldw	r2,0(r2)
 401ea84:	10000f1e 	bne	r2,zero,401eac4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 401ea88:	008100f4 	movhi	r2,1027
 401ea8c:	10ae8804 	addi	r2,r2,-17888
 401ea90:	e0fffd17 	ldw	r3,-12(fp)
 401ea94:	18c00324 	muli	r3,r3,12
 401ea98:	10c5883a 	add	r2,r2,r3
 401ea9c:	e0ffff17 	ldw	r3,-4(fp)
 401eaa0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401eaa4:	d0e02617 	ldw	r3,-32616(gp)
 401eaa8:	e0bffd17 	ldw	r2,-12(fp)
 401eaac:	1880020e 	bge	r3,r2,401eab8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 401eab0:	e0bffd17 	ldw	r2,-12(fp)
 401eab4:	d0a02615 	stw	r2,-32616(gp)
      }
      rc = i;
 401eab8:	e0bffd17 	ldw	r2,-12(fp)
 401eabc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 401eac0:	00000606 	br	401eadc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401eac4:	e0bffd17 	ldw	r2,-12(fp)
 401eac8:	10800044 	addi	r2,r2,1
 401eacc:	e0bffd15 	stw	r2,-12(fp)
 401ead0:	e0bffd17 	ldw	r2,-12(fp)
 401ead4:	10800810 	cmplti	r2,r2,32
 401ead8:	103fe41e 	bne	r2,zero,401ea6c <__alt_data_end+0xfc01ea6c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401eadc:	e0bffe17 	ldw	r2,-8(fp)
}
 401eae0:	e037883a 	mov	sp,fp
 401eae4:	df000017 	ldw	fp,0(sp)
 401eae8:	dec00104 	addi	sp,sp,4
 401eaec:	f800283a 	ret

0401eaf0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 401eaf0:	defffb04 	addi	sp,sp,-20
 401eaf4:	df000415 	stw	fp,16(sp)
 401eaf8:	df000404 	addi	fp,sp,16
 401eafc:	e13ffe15 	stw	r4,-8(fp)
 401eb00:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 401eb04:	e0bfff17 	ldw	r2,-4(fp)
 401eb08:	10840070 	cmpltui	r2,r2,4097
 401eb0c:	1000021e 	bne	r2,zero,401eb18 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 401eb10:	00840004 	movi	r2,4096
 401eb14:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 401eb18:	e0fffe17 	ldw	r3,-8(fp)
 401eb1c:	e0bfff17 	ldw	r2,-4(fp)
 401eb20:	1885883a 	add	r2,r3,r2
 401eb24:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 401eb28:	e0bffe17 	ldw	r2,-8(fp)
 401eb2c:	e0bffc15 	stw	r2,-16(fp)
 401eb30:	00000506 	br	401eb48 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 401eb34:	e0bffc17 	ldw	r2,-16(fp)
 401eb38:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 401eb3c:	e0bffc17 	ldw	r2,-16(fp)
 401eb40:	10800804 	addi	r2,r2,32
 401eb44:	e0bffc15 	stw	r2,-16(fp)
 401eb48:	e0fffc17 	ldw	r3,-16(fp)
 401eb4c:	e0bffd17 	ldw	r2,-12(fp)
 401eb50:	18bff836 	bltu	r3,r2,401eb34 <__alt_data_end+0xfc01eb34>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 401eb54:	e0bffe17 	ldw	r2,-8(fp)
 401eb58:	108007cc 	andi	r2,r2,31
 401eb5c:	10000226 	beq	r2,zero,401eb68 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 401eb60:	e0bffc17 	ldw	r2,-16(fp)
 401eb64:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 401eb68:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 401eb6c:	0001883a 	nop
 401eb70:	e037883a 	mov	sp,fp
 401eb74:	df000017 	ldw	fp,0(sp)
 401eb78:	dec00104 	addi	sp,sp,4
 401eb7c:	f800283a 	ret

0401eb80 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401eb80:	defffe04 	addi	sp,sp,-8
 401eb84:	df000115 	stw	fp,4(sp)
 401eb88:	df000104 	addi	fp,sp,4
 401eb8c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401eb90:	e0bfff17 	ldw	r2,-4(fp)
 401eb94:	10bffe84 	addi	r2,r2,-6
 401eb98:	10c00428 	cmpgeui	r3,r2,16
 401eb9c:	18001a1e 	bne	r3,zero,401ec08 <alt_exception_cause_generated_bad_addr+0x88>
 401eba0:	100690ba 	slli	r3,r2,2
 401eba4:	008100b4 	movhi	r2,1026
 401eba8:	10baee04 	addi	r2,r2,-5192
 401ebac:	1885883a 	add	r2,r3,r2
 401ebb0:	10800017 	ldw	r2,0(r2)
 401ebb4:	1000683a 	jmp	r2
 401ebb8:	0401ebf8 	rdprs	r16,zero,1967
 401ebbc:	0401ebf8 	rdprs	r16,zero,1967
 401ebc0:	0401ec08 	cmpgei	r16,zero,1968
 401ebc4:	0401ec08 	cmpgei	r16,zero,1968
 401ebc8:	0401ec08 	cmpgei	r16,zero,1968
 401ebcc:	0401ebf8 	rdprs	r16,zero,1967
 401ebd0:	0401ec00 	call	401ec0 <__reset-0x3bfe140>
 401ebd4:	0401ec08 	cmpgei	r16,zero,1968
 401ebd8:	0401ebf8 	rdprs	r16,zero,1967
 401ebdc:	0401ebf8 	rdprs	r16,zero,1967
 401ebe0:	0401ec08 	cmpgei	r16,zero,1968
 401ebe4:	0401ebf8 	rdprs	r16,zero,1967
 401ebe8:	0401ec00 	call	401ec0 <__reset-0x3bfe140>
 401ebec:	0401ec08 	cmpgei	r16,zero,1968
 401ebf0:	0401ec08 	cmpgei	r16,zero,1968
 401ebf4:	0401ebf8 	rdprs	r16,zero,1967
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401ebf8:	00800044 	movi	r2,1
 401ebfc:	00000306 	br	401ec0c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401ec00:	0005883a 	mov	r2,zero
 401ec04:	00000106 	br	401ec0c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401ec08:	0005883a 	mov	r2,zero
  }
}
 401ec0c:	e037883a 	mov	sp,fp
 401ec10:	df000017 	ldw	fp,0(sp)
 401ec14:	dec00104 	addi	sp,sp,4
 401ec18:	f800283a 	ret

0401ec1c <atexit>:
 401ec1c:	200b883a 	mov	r5,r4
 401ec20:	000f883a 	mov	r7,zero
 401ec24:	000d883a 	mov	r6,zero
 401ec28:	0009883a 	mov	r4,zero
 401ec2c:	401ec681 	jmpi	401ec68 <__register_exitproc>

0401ec30 <exit>:
 401ec30:	defffe04 	addi	sp,sp,-8
 401ec34:	000b883a 	mov	r5,zero
 401ec38:	dc000015 	stw	r16,0(sp)
 401ec3c:	dfc00115 	stw	ra,4(sp)
 401ec40:	2021883a 	mov	r16,r4
 401ec44:	401ed800 	call	401ed80 <__call_exitprocs>
 401ec48:	008100f4 	movhi	r2,1027
 401ec4c:	10b31c04 	addi	r2,r2,-13200
 401ec50:	11000017 	ldw	r4,0(r2)
 401ec54:	20800f17 	ldw	r2,60(r4)
 401ec58:	10000126 	beq	r2,zero,401ec60 <exit+0x30>
 401ec5c:	103ee83a 	callr	r2
 401ec60:	8009883a 	mov	r4,r16
 401ec64:	401c33c0 	call	401c33c <_exit>

0401ec68 <__register_exitproc>:
 401ec68:	defffa04 	addi	sp,sp,-24
 401ec6c:	dc000315 	stw	r16,12(sp)
 401ec70:	040100f4 	movhi	r16,1027
 401ec74:	84331c04 	addi	r16,r16,-13200
 401ec78:	80c00017 	ldw	r3,0(r16)
 401ec7c:	dc400415 	stw	r17,16(sp)
 401ec80:	dfc00515 	stw	ra,20(sp)
 401ec84:	18805217 	ldw	r2,328(r3)
 401ec88:	2023883a 	mov	r17,r4
 401ec8c:	10003726 	beq	r2,zero,401ed6c <__register_exitproc+0x104>
 401ec90:	10c00117 	ldw	r3,4(r2)
 401ec94:	010007c4 	movi	r4,31
 401ec98:	20c00e16 	blt	r4,r3,401ecd4 <__register_exitproc+0x6c>
 401ec9c:	1a000044 	addi	r8,r3,1
 401eca0:	8800221e 	bne	r17,zero,401ed2c <__register_exitproc+0xc4>
 401eca4:	18c00084 	addi	r3,r3,2
 401eca8:	18c7883a 	add	r3,r3,r3
 401ecac:	18c7883a 	add	r3,r3,r3
 401ecb0:	12000115 	stw	r8,4(r2)
 401ecb4:	10c7883a 	add	r3,r2,r3
 401ecb8:	19400015 	stw	r5,0(r3)
 401ecbc:	0005883a 	mov	r2,zero
 401ecc0:	dfc00517 	ldw	ra,20(sp)
 401ecc4:	dc400417 	ldw	r17,16(sp)
 401ecc8:	dc000317 	ldw	r16,12(sp)
 401eccc:	dec00604 	addi	sp,sp,24
 401ecd0:	f800283a 	ret
 401ecd4:	00810074 	movhi	r2,1025
 401ecd8:	10afae04 	addi	r2,r2,-16712
 401ecdc:	10002626 	beq	r2,zero,401ed78 <__register_exitproc+0x110>
 401ece0:	01006404 	movi	r4,400
 401ece4:	d9400015 	stw	r5,0(sp)
 401ece8:	d9800115 	stw	r6,4(sp)
 401ecec:	d9c00215 	stw	r7,8(sp)
 401ecf0:	400beb80 	call	400beb8 <malloc>
 401ecf4:	d9400017 	ldw	r5,0(sp)
 401ecf8:	d9800117 	ldw	r6,4(sp)
 401ecfc:	d9c00217 	ldw	r7,8(sp)
 401ed00:	10001d26 	beq	r2,zero,401ed78 <__register_exitproc+0x110>
 401ed04:	81000017 	ldw	r4,0(r16)
 401ed08:	10000115 	stw	zero,4(r2)
 401ed0c:	02000044 	movi	r8,1
 401ed10:	22405217 	ldw	r9,328(r4)
 401ed14:	0007883a 	mov	r3,zero
 401ed18:	12400015 	stw	r9,0(r2)
 401ed1c:	20805215 	stw	r2,328(r4)
 401ed20:	10006215 	stw	zero,392(r2)
 401ed24:	10006315 	stw	zero,396(r2)
 401ed28:	883fde26 	beq	r17,zero,401eca4 <__alt_data_end+0xfc01eca4>
 401ed2c:	18c9883a 	add	r4,r3,r3
 401ed30:	2109883a 	add	r4,r4,r4
 401ed34:	1109883a 	add	r4,r2,r4
 401ed38:	21802215 	stw	r6,136(r4)
 401ed3c:	01800044 	movi	r6,1
 401ed40:	12406217 	ldw	r9,392(r2)
 401ed44:	30cc983a 	sll	r6,r6,r3
 401ed48:	4992b03a 	or	r9,r9,r6
 401ed4c:	12406215 	stw	r9,392(r2)
 401ed50:	21c04215 	stw	r7,264(r4)
 401ed54:	01000084 	movi	r4,2
 401ed58:	893fd21e 	bne	r17,r4,401eca4 <__alt_data_end+0xfc01eca4>
 401ed5c:	11006317 	ldw	r4,396(r2)
 401ed60:	218cb03a 	or	r6,r4,r6
 401ed64:	11806315 	stw	r6,396(r2)
 401ed68:	003fce06 	br	401eca4 <__alt_data_end+0xfc01eca4>
 401ed6c:	18805304 	addi	r2,r3,332
 401ed70:	18805215 	stw	r2,328(r3)
 401ed74:	003fc606 	br	401ec90 <__alt_data_end+0xfc01ec90>
 401ed78:	00bfffc4 	movi	r2,-1
 401ed7c:	003fd006 	br	401ecc0 <__alt_data_end+0xfc01ecc0>

0401ed80 <__call_exitprocs>:
 401ed80:	defff504 	addi	sp,sp,-44
 401ed84:	df000915 	stw	fp,36(sp)
 401ed88:	dd400615 	stw	r21,24(sp)
 401ed8c:	dc800315 	stw	r18,12(sp)
 401ed90:	dfc00a15 	stw	ra,40(sp)
 401ed94:	ddc00815 	stw	r23,32(sp)
 401ed98:	dd800715 	stw	r22,28(sp)
 401ed9c:	dd000515 	stw	r20,20(sp)
 401eda0:	dcc00415 	stw	r19,16(sp)
 401eda4:	dc400215 	stw	r17,8(sp)
 401eda8:	dc000115 	stw	r16,4(sp)
 401edac:	d9000015 	stw	r4,0(sp)
 401edb0:	2839883a 	mov	fp,r5
 401edb4:	04800044 	movi	r18,1
 401edb8:	057fffc4 	movi	r21,-1
 401edbc:	008100f4 	movhi	r2,1027
 401edc0:	10b31c04 	addi	r2,r2,-13200
 401edc4:	12000017 	ldw	r8,0(r2)
 401edc8:	45005217 	ldw	r20,328(r8)
 401edcc:	44c05204 	addi	r19,r8,328
 401edd0:	a0001c26 	beq	r20,zero,401ee44 <__call_exitprocs+0xc4>
 401edd4:	a0800117 	ldw	r2,4(r20)
 401edd8:	15ffffc4 	addi	r23,r2,-1
 401eddc:	b8000d16 	blt	r23,zero,401ee14 <__call_exitprocs+0x94>
 401ede0:	14000044 	addi	r16,r2,1
 401ede4:	8421883a 	add	r16,r16,r16
 401ede8:	8421883a 	add	r16,r16,r16
 401edec:	84402004 	addi	r17,r16,128
 401edf0:	a463883a 	add	r17,r20,r17
 401edf4:	a421883a 	add	r16,r20,r16
 401edf8:	e0001e26 	beq	fp,zero,401ee74 <__call_exitprocs+0xf4>
 401edfc:	80804017 	ldw	r2,256(r16)
 401ee00:	e0801c26 	beq	fp,r2,401ee74 <__call_exitprocs+0xf4>
 401ee04:	bdffffc4 	addi	r23,r23,-1
 401ee08:	843fff04 	addi	r16,r16,-4
 401ee0c:	8c7fff04 	addi	r17,r17,-4
 401ee10:	bd7ff91e 	bne	r23,r21,401edf8 <__alt_data_end+0xfc01edf8>
 401ee14:	00810074 	movhi	r2,1025
 401ee18:	10afb304 	addi	r2,r2,-16692
 401ee1c:	10000926 	beq	r2,zero,401ee44 <__call_exitprocs+0xc4>
 401ee20:	a0800117 	ldw	r2,4(r20)
 401ee24:	1000301e 	bne	r2,zero,401eee8 <__call_exitprocs+0x168>
 401ee28:	a0800017 	ldw	r2,0(r20)
 401ee2c:	10003226 	beq	r2,zero,401eef8 <__call_exitprocs+0x178>
 401ee30:	a009883a 	mov	r4,r20
 401ee34:	98800015 	stw	r2,0(r19)
 401ee38:	400becc0 	call	400becc <free>
 401ee3c:	9d000017 	ldw	r20,0(r19)
 401ee40:	a03fe41e 	bne	r20,zero,401edd4 <__alt_data_end+0xfc01edd4>
 401ee44:	dfc00a17 	ldw	ra,40(sp)
 401ee48:	df000917 	ldw	fp,36(sp)
 401ee4c:	ddc00817 	ldw	r23,32(sp)
 401ee50:	dd800717 	ldw	r22,28(sp)
 401ee54:	dd400617 	ldw	r21,24(sp)
 401ee58:	dd000517 	ldw	r20,20(sp)
 401ee5c:	dcc00417 	ldw	r19,16(sp)
 401ee60:	dc800317 	ldw	r18,12(sp)
 401ee64:	dc400217 	ldw	r17,8(sp)
 401ee68:	dc000117 	ldw	r16,4(sp)
 401ee6c:	dec00b04 	addi	sp,sp,44
 401ee70:	f800283a 	ret
 401ee74:	a0800117 	ldw	r2,4(r20)
 401ee78:	80c00017 	ldw	r3,0(r16)
 401ee7c:	10bfffc4 	addi	r2,r2,-1
 401ee80:	15c01426 	beq	r2,r23,401eed4 <__call_exitprocs+0x154>
 401ee84:	80000015 	stw	zero,0(r16)
 401ee88:	183fde26 	beq	r3,zero,401ee04 <__alt_data_end+0xfc01ee04>
 401ee8c:	95c8983a 	sll	r4,r18,r23
 401ee90:	a0806217 	ldw	r2,392(r20)
 401ee94:	a5800117 	ldw	r22,4(r20)
 401ee98:	2084703a 	and	r2,r4,r2
 401ee9c:	10000b26 	beq	r2,zero,401eecc <__call_exitprocs+0x14c>
 401eea0:	a0806317 	ldw	r2,396(r20)
 401eea4:	2088703a 	and	r4,r4,r2
 401eea8:	20000c1e 	bne	r4,zero,401eedc <__call_exitprocs+0x15c>
 401eeac:	89400017 	ldw	r5,0(r17)
 401eeb0:	d9000017 	ldw	r4,0(sp)
 401eeb4:	183ee83a 	callr	r3
 401eeb8:	a0800117 	ldw	r2,4(r20)
 401eebc:	15bfbf1e 	bne	r2,r22,401edbc <__alt_data_end+0xfc01edbc>
 401eec0:	98800017 	ldw	r2,0(r19)
 401eec4:	153fcf26 	beq	r2,r20,401ee04 <__alt_data_end+0xfc01ee04>
 401eec8:	003fbc06 	br	401edbc <__alt_data_end+0xfc01edbc>
 401eecc:	183ee83a 	callr	r3
 401eed0:	003ff906 	br	401eeb8 <__alt_data_end+0xfc01eeb8>
 401eed4:	a5c00115 	stw	r23,4(r20)
 401eed8:	003feb06 	br	401ee88 <__alt_data_end+0xfc01ee88>
 401eedc:	89000017 	ldw	r4,0(r17)
 401eee0:	183ee83a 	callr	r3
 401eee4:	003ff406 	br	401eeb8 <__alt_data_end+0xfc01eeb8>
 401eee8:	a0800017 	ldw	r2,0(r20)
 401eeec:	a027883a 	mov	r19,r20
 401eef0:	1029883a 	mov	r20,r2
 401eef4:	003fb606 	br	401edd0 <__alt_data_end+0xfc01edd0>
 401eef8:	0005883a 	mov	r2,zero
 401eefc:	003ffb06 	br	401eeec <__alt_data_end+0xfc01eeec>
 401ef00:	0201ffff 	0x201ffff
 401ef04:	ffff0000 	call	ffff000 <__alt_data_end+0x7fff000>
 401ef08:	00000201 	jmpi	20 <__reset-0x3ffffe0>
 401ef0c:	0201ffff 	0x201ffff
 401ef10:	ffff0000 	call	ffff000 <__alt_data_end+0x7fff000>
 401ef14:	00000201 	jmpi	20 <__reset-0x3ffffe0>
 401ef18:	010d0bff 	0x10d0bff
 401ef1c:	01010002 	0x1010002
	...
 401ef28:	010d0bff 	0x10d0bff
 401ef2c:	01010004 	movi	r4,1024
 401ef30:	00000100 	call	10 <__reset-0x3fffff0>
 401ef34:	00000000 	call	0 <__reset-0x4000000>
 401ef38:	01110bff 	0x1110bff
 401ef3c:	01010004 	movi	r4,1024
 401ef40:	7f000105 	stb	fp,4(r15)
 401ef44:	007d0000 	call	7d000 <__reset-0x3f83000>
 401ef48:	00000000 	call	0 <__reset-0x4000000>
 401ef4c:	01883a00 	call	1883a0 <__reset-0x3e77c60>
 401ef50:	0400196c 	andhi	r16,zero,101
 401ef54:	04002ec0 	call	4002ec <__reset-0x3bffd14>
 401ef58:	04003a18 	cmpnei	r16,zero,232
 401ef5c:	0400444c 	andi	r16,zero,273
 401ef60:	040057a4 	muli	r16,zero,350
 401ef64:	040061c4 	movi	r16,391
 401ef68:	04006a1c 	xori	r16,zero,424
 401ef6c:	04007e08 	cmpgei	r16,zero,504
 401ef70:	04008914 	movui	r16,548
 401ef74:	040092d0 	cmplti	r16,zero,587
 401ef78:	04009808 	cmpgei	r16,zero,608
 401ef7c:	0400b638 	rdprs	r16,zero,728
