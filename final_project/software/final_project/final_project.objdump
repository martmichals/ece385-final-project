
final_project.elf:     file format elf32-littlenios2
final_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0001c520 memsz 0x0001c520 flags r-x
    LOAD off    0x0001d540 vaddr 0x0401c540 paddr 0x04028fd0 align 2**12
         filesz 0x0000ca90 memsz 0x0000ca90 flags rw-
    LOAD off    0x0002aa60 vaddr 0x04035a60 paddr 0x04035a60 align 2**12
         filesz 0x00000000 memsz 0x00000268 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a96c  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001990  0401abb0  0401abb0  0001bbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000ca90  0401c540  04028fd0  0001d540  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000268  04035a60  04035a60  0002aa60  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04035cc8  04035cc8  00029fd0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00029fd0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001950  00000000  00000000  00029ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003e08f  00000000  00000000  0002b948  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000f619  00000000  00000000  000699d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00012682  00000000  00000000  00078ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005828  00000000  00000000  0008b674  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000a187  00000000  00000000  00090e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001bba2  00000000  00000000  0009b023  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000b6bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002530  00000000  00000000  000b6c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000c13a2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000c13a5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000c13b1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000c13b2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000c13b3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000c13b7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000c13bb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000c13bf  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000c13c8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000c13d1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  000c13da  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005a  00000000  00000000  000c13eb  2**0
                  CONTENTS, READONLY
 29 .jdi          0000618f  00000000  00000000  000c1445  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00080fd7  00000000  00000000  000c75d4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
0401abb0 l    d  .rodata	00000000 .rodata
0401c540 l    d  .rwdata	00000000 .rwdata
04035a60 l    d  .bss	00000000 .bss
04035cc8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 pixel_vga.c
0401c540 l     O .rwdata	00000c97 server_font_data
0401d1d8 l     O .rwdata	0000017c server_char_indices
0401d354 l     O .rwdata	0000005f server_widths
0401d3b3 l     O .rwdata	00000ed4 channel_font_data
0401e288 l     O .rwdata	0000017c channel_char_indices
0401e404 l     O .rwdata	0000005f channel_widths
0401e463 l     O .rwdata	00001ee3 title_font_data
04020348 l     O .rwdata	0000017c title_char_indices
040204c4 l     O .rwdata	0000005f title_widths
04020523 l     O .rwdata	00000980 uname_font_data
04020ea4 l     O .rwdata	0000017c uname_char_indices
04021020 l     O .rwdata	0000005f uname_widths
0402107f l     O .rwdata	00000925 message_font_data
040219a4 l     O .rwdata	0000017c message_char_indices
04021b20 l     O .rwdata	0000005f message_widths
04028f24 l     O .rwdata	00000004 VRAM
04021b7f l     O .rwdata	0000000c colors
04021b8c l     O .rwdata	00000050 fonts
04021bdc l     O .rwdata	00000100 decode_ascii
00000000 l    df *ABS*	00000000 Dhcp.cpp
04035a60 l     O .bss	00000004 _ZL11INADDR_NONE
04002558 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
040025b8 l     F .text	00000030 _GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm
00000000 l    df *ABS*	00000000 Dns.cpp
04035a64 l     O .bss	00000004 _ZL11INADDR_NONE
040030b0 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04003110 l     F .text	00000030 _GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress
00000000 l    df *ABS*	00000000 Ethernet.cpp
04035a68 l     O .bss	00000004 _ZL11INADDR_NONE
04035a74 l     O .bss	00000008 _ZGVZN13EthernetClass5beginEPhmmE6s_dhcp
04035ae4 l     O .bss	0000005c _ZZN13EthernetClass5beginEPhmmE6s_dhcp
04003adc l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
04003b44 l     F .text	00000030 _GLOBAL__sub_I__ZN13EthernetClass17_dnsServerAddressE
00000000 l    df *ABS*	00000000 EthernetClient.cpp
04035a80 l     O .bss	00000004 _ZL11INADDR_NONE
04004de0 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04004e40 l     F .text	00000030 _GLOBAL__sub_I__ZN14EthernetClient7connectEPKct
00000000 l    df *ABS*	00000000 EthernetServer.cpp
04035a84 l     O .bss	00000004 _ZL11INADDR_NONE
04005828 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04005888 l     F .text	00000030 _GLOBAL__sub_I__ZN14EthernetServer11server_portE
00000000 l    df *ABS*	00000000 EthernetUdp.cpp
04035a88 l     O .bss	00000004 _ZL11INADDR_NONE
040060b4 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04006114 l     F .text	00000030 _GLOBAL__sub_I__ZN11EthernetUDP5beginEt
00000000 l    df *ABS*	00000000 socket.cpp
04035a8c l     O .bss	00000004 _ZL11INADDR_NONE
04028f58 l     O .rwdata	00000002 _ZL10local_port
04035b50 l     O .bss	00000040 _ZL5state
040069b4 l     F .text	0000006c _ZL11getSnRX_RSRh
04006a20 l     F .text	0000011c _ZL9read_datahtPht
04006f14 l     F .text	0000008c _ZL11getSnTX_FSRh
04006fa0 l     F .text	00000158 _ZL10write_datahtPKht
040074a0 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04007500 l     F .text	00000030 _GLOBAL__sub_I__ZN13EthernetClass14socketPortRandEt
00000000 l    df *ABS*	00000000 IPAddress.cpp
04035a90 l     O .bss	00000004 _ZL11INADDR_NONE
04007fac l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
0400800c l     F .text	00000030 _GLOBAL__sub_I__ZN9IPAddressC2Ev
00000000 l    df *ABS*	00000000 w5100.cpp
04035a94 l     O .bss	00000004 _ZL11INADDR_NONE
04035a9b l     O .bss	00000001 _ZZN10W5100Class4initEvE11initialized
04008968 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
040089c8 l     F .text	00000030 _GLOBAL__sub_I__ZN10W5100Class4chipE
00000000 l    df *ABS*	00000000 main.cpp
04035a9c l     O .bss	00000004 _ZL11INADDR_NONE
04021cdc l     O .rwdata	00000c97 _ZL16server_font_data
04022974 l     O .rwdata	0000017c _ZL19server_char_indices
04022af0 l     O .rwdata	0000005f _ZL13server_widths
04022b4f l     O .rwdata	00000ed4 _ZL17channel_font_data
04023a24 l     O .rwdata	0000017c _ZL20channel_char_indices
04023ba0 l     O .rwdata	0000005f _ZL14channel_widths
04023bff l     O .rwdata	00001ee3 _ZL15title_font_data
04025ae4 l     O .rwdata	0000017c _ZL18title_char_indices
04025c60 l     O .rwdata	0000005f _ZL12title_widths
04025cbf l     O .rwdata	00000980 _ZL15uname_font_data
04026640 l     O .rwdata	0000017c _ZL18uname_char_indices
040267bc l     O .rwdata	0000005f _ZL12uname_widths
0402681b l     O .rwdata	00000925 _ZL17message_font_data
04027140 l     O .rwdata	0000017c _ZL20message_char_indices
040272bc l     O .rwdata	0000005f _ZL14message_widths
04028f5c l     O .rwdata	00000004 _ZL4VRAM
0402731b l     O .rwdata	0000000c _ZL6colors
04027328 l     O .rwdata	00000050 _ZL5fonts
04027378 l     O .rwdata	00000100 _ZL12decode_ascii
04008cf4 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04008d54 l     F .text	00000030 _GLOBAL__sub_I_mac
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
040090a4 l     F .text	000000a4 _ZL21size_of_encoded_valueh
04009148 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
04009354 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
040093a8 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
04009434 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
04009568 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
040095f0 l     F .text	000001c0 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
040097b0 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
0400a08c l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 guard.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0400a838 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
04035b90 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0400a8f0 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0400aaa0 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
04035aa0 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 guard_error.cc
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0400ad9c l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
04035aa8 l     O .bss	00000004 fc_static
0400aeb4 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0400af74 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
04027478 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401c292 l     O .rodata	00000010 zeroes.4404
0400e668 l     F .text	000000bc __sbprintf
0401c2a2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400e878 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040103a8 l     F .text	00000008 __fp_unlock
040103bc l     F .text	0000019c __sinit.part.1
04010558 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04027cc4 l     O .rwdata	00000020 lc_ctype_charset
04027ca4 l     O .rwdata	00000020 lc_message_charset
04027ce4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0401c2d0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
04012da8 l     F .text	000000fc __sprint_r.part.0
0401c404 l     O .rodata	00000010 blanks.4348
0401c3f4 l     O .rodata	00000010 zeroes.4349
04014334 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04017e3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04017f48 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04017fa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
040180b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
04018194 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04018300 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
040183ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
040185c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04028fc0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0401880c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
040188f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04018a24 l     F .text	00000034 alt_dev_reg
04027ec4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04018d1c l     F .text	0000020c altera_avalon_jtag_uart_irq
04018f28 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401975c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04019b1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04019f90 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401a0d0 l     F .text	0000003c alt_get_errno
0401a10c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04035ae0 g     O .bss	00000004 alt_instruction_exception_handler
0400a9f8 g     F .text	00000028 __cxa_free_exception
040051f8  w    F .text	00000048 _ZN9DNSClientC2Ev
04005198  w    F .text	00000060 _ZN10W5100Class11readSnDPORTEh
0400904c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
0401251c g     F .text	00000074 _mprec_log10
04002428 g     F .text	00000040 _ZN9DhcpClass15getDhcpServerIpEv
0400a7d8 g     F .text	00000018 _ZSt10unexpectedv
04012608 g     F .text	0000008c __any_on
04006820 g     F .text	00000040 _ZN13EthernetClass12socketStatusEh
040148d0 g     F .text	00000054 _isatty_r
0401c2dc g     O .rodata	00000028 __mprec_tinytens
040082ac g     F .text	000000d8 _ZN10W5100Class7isW5200Ev
040184fc g     F .text	0000007c alt_main
04003dfc  w    F .text	00000040 _ZN10W5100Class21setRetransmissionTimeEt
0400beac g     F .text	000000c0 _puts_r
040061c8  w    F .text	00000028 _ZN11EthernetUDP9localPortEv
04035bc8 g     O .bss	00000100 alt_irq
0400ab94 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0401becc  w    O .rodata	00000018 _ZTV14EthernetServer
04003ce4  w    F .text	00000038 _ZN10W5100Class13getSubnetMaskEPh
04007c70 g     F .text	00000070 _ZN9IPAddressC1Ehhhh
04014924 g     F .text	00000060 _lseek_r
0400b030 g     F .text	00000020 .hidden _Unwind_GetIPInfo
04002468 g     F .text	00000040 _ZN9DhcpClass14getDnsServerIpEv
04028fd0 g       *ABS*	00000000 __flash_rwdata_start
04004b10 g     F .text	000000b0 _ZN14EthernetClient9connectedEv
04008384 g     F .text	000000d8 _ZN10W5100Class7isW5500Ev
0400366c g     F .text	00000058 _ZN13EthernetClass10linkStatusEv
04016968 g     F .text	00000088 .hidden __eqdf2
04007c44 g     F .text	0000002c _ZN9IPAddressC2Ev
0400a160 g     F .text	00000084 __cxa_rethrow
040064d0 g     F .text	00000350 _ZN13EthernetClass20socketBeginMulticastEh9IPAddresst
04003bd8  w    F .text	00000064 _ZN11EthernetUDPC2Ev
0400afbc g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0400a814 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
04004c9c g     F .text	00000060 _ZN14EthernetClient9localPortEv
0400b020 g     F .text	00000010 .hidden _Unwind_GetIP
04035cc8 g       *ABS*	00000000 __alt_heap_start
0400c278 g     F .text	0000005c _kill_r
0400be70 g     F .text	0000003c printf
04014b3c g     F .text	0000009c _wcrtomb_r
04005240 g     F .text	000000a0 _ZN14EthernetServer5beginEv
0400c040 g     F .text	00000084 _signal_r
04003f38  w    F .text	00000038 _ZN10W5100Class9writeSUBREPKh
04012d44 g     F .text	0000005c __sseek
040106f8 g     F .text	00000010 __sinit
040149e4 g     F .text	00000140 __swbuf_r
04035a99 g     O .bss	00000001 _ZN10W5100Class11CH_BASE_MSBE
0400aa74 g     F .text	0000002c __cxa_free_dependent_exception
04008d84 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
040111c0 g     F .text	0000007c _setlocale_r
0401bff4  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
04010560 g     F .text	00000068 __sfmoreglue
040039a0 g     F .text	0000004c _ZN13EthernetClass13setSubnetMaskE9IPAddress
0401859c g     F .text	00000024 __malloc_unlock
0400ab94 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
04003d8c  w    F .text	00000038 _ZN10W5100Class12setIPAddressEPKh
0400a408 g     F .text	00000020 _ZSt18uncaught_exceptionv
0400a204 g     F .text	00000020 __cxa_deleted_virtual
0401153c g     F .text	0000015c memmove
0400ab6c g     F .text	00000004 _ZNSt9exceptionD2Ev
040106e0 g     F .text	00000018 _cleanup
04003e7c  w    F .text	0000004c _ZN10W5100Class5writeEth
04011698 g     F .text	000000a8 _Balloc
04000658 g     F .text	00000224 draw_char
0400507c  w    F .text	00000074 _ZN10W5100Class6readSnEhtPht
04000290 g     F .text	000000a4 set_color_palette
040169f0 g     F .text	000000dc .hidden __gtdf2
0401c1c8  w    O .rodata	00000014 _ZTVSt13bad_exception
0401a4c8 g     F .text	00000024 altera_nios2_gen2_irq_init
04005cc0 g     F .text	00000134 _ZN11EthernetUDP11parsePacketEv
04007924  w    F .text	00000060 _ZN10W5100Class12readSnTX_FSREh
04000000 g     F .entry	0000001c __reset
040015a0 g     F .text	00000024 _ZN9DhcpClass12presend_DHCPEv
04018848 g     F .text	00000078 times
040050f0  w    F .text	00000060 _ZN10W5100Class10readSnPORTEh
0400b06c g     F .text	00000008 .hidden _Unwind_GetRegionStart
040015c4 g     F .text	00000450 _ZN9DhcpClass17send_DHCP_MESSAGEEht
04000020 g       *ABS*	00000000 __flash_exceptions_start
04014874 g     F .text	0000005c _fstat_r
04035ab8 g     O .bss	00000004 errno
04002368 g     F .text	00000040 _ZN9DhcpClass10getLocalIpEv
04012cc0 g     F .text	00000008 __seofread
0400b248 g     F .text	00000074 .hidden _Unwind_Backtrace
04035acc g     O .bss	00000004 alt_argv
04030f24 g       *ABS*	00000000 _gp
040188c0 g     F .text	00000030 usleep
04018094 g     F .text	00000020 getpid
04009e58 g     F .text	00000230 __cxa_call_unexpected
04004e70  w    F .text	00000034 _ZN6Client12rawIPAddressER9IPAddress
0400a298 g     F .text	00000008 __cxa_get_exception_ptr
040058b8  w    F .text	00000034 _ZN6ClientC1Ev
04005484 g     F .text	00000188 _ZN14EthernetServer6acceptEv
04027d44 g     O .rwdata	00000180 alt_fd_list
0401beac  w    O .rodata	0000000c _ZTI14EthernetClient
0400b15c g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0400afec g     F .text	00000018 .hidden _Unwind_GetCFA
0400a7f0 g     F .text	00000014 _ZSt13set_terminatePFvvE
04004704 g     F .text	00000048 _ZN14EthernetClient7printlnEv
0401a4ec g     F .text	00000090 alt_find_dev
0400c44c g     F .text	00000008 _times_r
0400bbd0 g     F .text	00000148 memcpy
04003d54  w    F .text	00000038 _ZN10W5100Class13getMACAddressEPh
04007b0c  w    F .text	00000060 _ZN10W5100Class11readSnRX_RDEh
0400aa20 g     F .text	00000054 __cxa_allocate_dependent_exception
040103b0 g     F .text	0000000c _cleanup_r
04004828 g     F .text	00000078 _ZN14EthernetClient4readEPhj
0400a4a0 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
04017c54 g     F .text	000000dc .hidden __floatsidf
04001094 g     F .text	00000094 isDiscord
0401a054 g     F .text	0000007c alt_io_redirect
04007bbc  w    F .text	00000050 _ZN10W5100Class5RBASEEh
04016acc g     F .text	000000f4 .hidden __ltdf2
0401abb0 g       *ABS*	00000000 __DTOR_END__
040045c8 g     F .text	0000005c _ZN14EthernetClient17availableForWriteEv
0400a4b8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0400bf6c g     F .text	00000014 puts
0401a7b8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04012bf8 g     F .text	00000074 __fpclassifyd
04012478 g     F .text	000000a4 __ratio
04014318 g     F .text	0000001c __vfiprintf_internal
04019120 g     F .text	0000021c altera_avalon_jtag_uart_read
0400b320 g     F .text	00000014 malloc
0400be40 g     F .text	00000030 _printf_r
0400ace0 g     F .text	00000064 .hidden __udivsi3
040180f0 g     F .text	000000a4 isatty
040079e8  w    F .text	00000060 _ZN10W5100Class11readSnTX_WREh
0400c0c4 g     F .text	000000bc _raise_r
0401c32c g     O .rodata	000000c8 __mprec_tens
04004ec4  w    F .text	00000048 _ZN14EthernetClientD2Ev
040086a8 g     F .text	00000254 _ZN10W5100Class4readEtPht
04000e84 g     F .text	00000210 draw_sample
04003a38 g     F .text	00000060 _ZN13EthernetClass24setRetransmissionTimeoutEt
0401123c g     F .text	0000000c __locale_charset
040031bc g     F .text	0000028c _ZN13EthernetClass5beginEPhmm
04003c3c  w    F .text	00000038 _ZN10W5100Class12setGatewayIpEPKh
0401a728 g     F .text	00000090 alt_icache_flush
04035ab4 g     O .bss	00000004 __malloc_top_pad
0400c2d4 g     F .text	00000004 _getpid_r
04007704  w    F .text	00000050 _ZN10W5100Class9writeSnIREhh
04004018  w    F .text	00000038 _ZN10W5100Class9writeSIPREPKh
04028fa0 g     O .rwdata	00000004 __mb_cur_max
04007d14 g     F .text	00000044 _ZN9IPAddressC1EPKh
0401126c g     F .text	0000000c _localeconv_r
040068a0 g     F .text	00000064 _ZN13EthernetClass12socketListenEh
04011aa4 g     F .text	0000003c __i2b
04010b7c g     F .text	000004bc __sfvwrite_r
0400a638 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0400c180 g     F .text	000000a8 __sigtramp_r
0401bf98  w    O .rodata	0000000e _ZTS11EthernetUDP
0400bf80 g     F .text	00000054 _sbrk_r
04028f48  w    O .rwdata	00000008 _ZTI6Server
04002648  w    F .text	00000028 _ZN11EthernetUDP10remotePortEv
0401c064  w    O .rodata	00000020 _ZTVSt9type_info
04001128 g     F .text	000000ac _ZN9DhcpClass13beginWithDHCPEPhmm
04008a64  w    F .text	00000040 _ZN10W5100Class9writeRMSREh
04006b3c g     F .text	000002a0 _ZN13EthernetClass10socketRecvEhPhs
04004ea4  w    F .text	00000020 _ZN13EthernetClass11dnsServerIPEv
04014984 g     F .text	00000060 _read_r
0400ab74 g     F .text	0000000c _ZNKSt9exception4whatEv
04028fb8 g     O .rwdata	00000004 alt_max_fd
04003890 g     F .text	00000044 _ZN13EthernetClass10subnetMaskEv
04014568 g     F .text	000000f0 _fclose_r
04007984  w    F .text	00000064 _ZN10W5100Class12writeSnTX_WREht
040089f8  w    F .text	00000040 _ZN10W5100Class7writeMREh
04010378 g     F .text	00000030 fflush
04035ab0 g     O .bss	00000004 __malloc_max_sbrked_mem
04006144  w    F .text	00000034 _ZN3UDP12rawIPAddressER9IPAddress
04007d58 g     F .text	00000120 _ZN9IPAddress10fromStringEPKc
04006004 g     F .text	000000b0 _ZN11EthernetUDP14beginMulticastE9IPAddresst
0400053c g     F .text	000000c4 debug
04006e88 g     F .text	0000008c _ZN13EthernetClass10socketPeekEh
040157d4 g     F .text	000008ac .hidden __adddf3
04007f34 g     F .text	00000034 _ZN9IPAddressaSEm
0401c028  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0400474c g     F .text	00000080 _ZN14EthernetClient7printlnEPKc
0401bee4  w    O .rodata	00000038 _ZTV6Client
04012220 g     F .text	0000010c __b2d
0401529c g     F .text	00000538 .hidden __umoddi3
04018428 g     F .text	000000d4 lseek
04005c0c g     F .text	0000002c _ZN11EthernetUDP5writeEh
040023a8 g     F .text	00000040 _ZN9DhcpClass13getSubnetMaskEv
0400a4fc g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0400a088 g     F .text	00000004 _ZdlPv
0400aba4 g     F .text	00000010 _ZN9__gnu_cxx20recursive_init_errorD1Ev
04028f90 g     O .rwdata	00000004 _global_impure_ptr
04012694 g     F .text	00000564 _realloc_r
04035cc8 g       *ABS*	00000000 __bss_end
04019ea0 g     F .text	000000f0 alt_iic_isr_register
04004fd0  w    F .text	0000004c _ZN14EthernetClientneERKS_
04000600 g     F .text	00000058 draw_background
0401a3c0 g     F .text	00000108 alt_tick
040042b4 g     F .text	00000314 _ZN14EthernetClient7connectE9IPAddresst
0400afa4 g     F .text	00000018 .hidden _Unwind_SjLj_Register
04014d24 g     F .text	00000578 .hidden __udivdi3
040021dc g     F .text	0000018c _ZN9DhcpClass10checkLeaseEv
040147d0 g     F .text	00000024 _fputwc_r
0401c304 g     O .rodata	00000028 __mprec_bigtens
04004fa4  w    F .text	0000002c _ZN14EthernetClientneEb
04011888 g     F .text	00000104 __s2b
0400b2bc g     F .text	00000018 abort
04017d30 g     F .text	000000a8 .hidden __floatunsidf
04008be4  w    F .text	0000003c _ZN10W5100Class8readSnCREh
04011f60 g     F .text	00000060 __mcmp
0400a354 g     F .text	000000b4 __cxa_end_catch
04010718 g     F .text	00000018 __fp_lock_all
04019e54 g     F .text	0000004c alt_ic_irq_enabled
0400ab70 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
0401a324 g     F .text	0000009c alt_alarm_stop
04005c38 g     F .text	00000088 _ZN11EthernetUDP5writeEPKhj
0401bf3c  w    O .rodata	00000050 _ZTV11EthernetUDP
04007c44 g     F .text	0000002c _ZN9IPAddressC1Ev
0400384c g     F .text	00000044 _ZN13EthernetClass7localIPEv
04004f74  w    F .text	00000030 _ZN14EthernetClienteqEb
04035ad4 g     O .bss	00000004 alt_irq_active
04008b3c  w    F .text	0000002c _ZN10W5100Class17readPSTATUS_W5200Ev
0400a7b0 g     F .text	00000018 _ZSt9terminatev
040034a8 g     F .text	00000068 _ZN13EthernetClass5beginEPh9IPAddressS1_
040000fc g     F .exceptions	000000d4 alt_irq_handler
04027d1c g     O .rwdata	00000028 alt_dev_null
04028f60 g     O .rwdata	00000006 mac
0400411c  w    F .text	00000020 _ZN10W5100Class7getChipEv
04000400 g     F .text	0000013c draw_rectangle
0400ab9c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
040036c4 g     F .text	00000060 _ZN13EthernetClass14hardwareStatusEv
040058b8  w    F .text	00000034 _ZN6ClientC2Ev
04003ec8  w    F .text	00000038 _ZN10W5100Class8writeGAREPKh
0401c0c0  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
04019ad4 g     F .text	00000048 alt_dcache_flush_all
0401198c g     F .text	00000068 __hi0bits
04035a7c g     O .bss	00000001 Ethernet
04007f68 g     F .text	00000044 _ZNK9IPAddresseqEPKh
04028f74  w    O .rwdata	00000008 _ZTISt9exception
04028f38  w    O .rwdata	00000008 _ZTI6Client
04007aa8  w    F .text	00000064 _ZN10W5100Class12writeSnRX_RDEht
04017bd4 g     F .text	00000080 .hidden __fixdfsi
04006974 g     F .text	00000040 _ZN13EthernetClass16socketDisconnectEh
040075d4  w    F .text	0000006c _ZN10W5100Class7writeSnEhth
04007c70 g     F .text	00000070 _ZN9IPAddressC2Ehhhh
04005f74 g     F .text	0000006c _ZN11EthernetUDP4peekEv
040076b4  w    F .text	00000050 _ZN10W5100Class9writeSnMREhh
04028fd0 g       *ABS*	00000000 __ram_rwdata_end
04007ce0 g     F .text	00000034 _ZN9IPAddressC2Em
04003164  w    F .text	00000028 _ZNK9IPAddresscvmEv
04002bb8 g     F .text	000004f8 _ZN9DNSClient15ProcessResponseEtR9IPAddress
04009048 g     F .text	00000004 _ZNSt9type_infoD1Ev
04028fb0 g     O .rwdata	00000008 alt_dev_list
0400ab9c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
04007c0c  w    F .text	00000038 _ZN10W5100Class23hasOffsetAddressMappingEv
04007530  w    F .text	00000044 _ZN10W5100Class4readEt
0401892c g     F .text	000000f8 write
04007754  w    F .text	0000003c _ZN10W5100Class8readSnIREh
04035a70 g     O .bss	00000004 _ZN13EthernetClass5_dhcpE
0400905c g     F .text	00000004 _ZNSt9type_infoD0Ev
0401c540 g       *ABS*	00000000 __ram_rodata_end
04017fe4 g     F .text	000000b0 fstat
04005a88 g     F .text	000000c4 _ZN11EthernetUDP11beginPacketEPKct
04005954 g     F .text	000000a8 _ZN11EthernetUDP5beginEt
0401beb8  w    O .rodata	00000011 _ZTS14EthernetClient
0401c228  w    O .rodata	0000000c _ZTIN9__gnu_cxx20recursive_init_errorE
040181d0 g     F .text	00000130 kill
04016acc g     F .text	000000f4 .hidden __ledf2
04011cd8 g     F .text	00000140 __pow5mult
04012ebc g     F .text	0000145c ___vfiprintf_internal_r
04035ac4 g     O .bss	00000004 __nlocale_changed
0400ad44 g     F .text	00000058 .hidden __umodsi3
04009054 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
04007830  w    F .text	00000048 _ZN10W5100Class11writeSnDHAREhPh
0400a804 g     F .text	00000010 _ZSt13get_terminatev
04007878  w    F .text	00000048 _ZN10W5100Class11writeSnDIPREhPh
04035cc8 g       *ABS*	00000000 end
0401bf28  w    O .rodata	00000011 _ZTS14EthernetServer
040088fc g     F .text	0000006c _ZN10W5100Class9execCmdSnEh7SockCMD
04008180 g     F .text	00000074 _ZN10W5100Class9softResetEv
040061f0 g     F .text	00000044 _ZN13EthernetClass14socketPortRandEt
0400b230 g     F .text	00000018 .hidden _Unwind_DeleteException
0400845c g     F .text	000000a8 _ZN10W5100Class13getLinkStatusEv
040077cc  w    F .text	00000064 _ZN10W5100Class11writeSnPORTEht
04018c5c g     F .text	000000c0 altera_avalon_jtag_uart_init
040058ec  w    F .text	00000068 _ZN14EthernetClientC2Eh
040039ec g     F .text	0000004c _ZN13EthernetClass12setGatewayIPE9IPAddress
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04008b10  w    F .text	0000002c _ZN10W5100Class18readVERSIONR_W5500Ev
0400a568 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0401ab81 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
040197d4 g     F .text	0000007c alt_avalon_timer_sc_init
04017dd8 g     F .text	00000064 .hidden __clzsi2
04004088  w    F .text	00000054 _ZN10W5100Class8writeRTREt
0400a428 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
040048a0 g     F .text	00000088 _ZN14EthernetClient4peekEv
0401933c g     F .text	00000224 altera_avalon_jtag_uart_write
040058ec  w    F .text	00000068 _ZN14EthernetClientC1Eh
04010708 g     F .text	00000004 __sfp_lock_acquire
0401c150  w    O .rodata	00000012 _ZTSSt13bad_exception
04004bc0 g     F .text	00000058 _ZN14EthernetClient6statusEv
04011458 g     F .text	000000e4 memchr
0400c454 g     F .text	000021f8 ___vfprintf_internal_r
0400501c  w    F .text	00000038 _ZN14EthernetClient20setConnectionTimeoutEt
0401086c g     F .text	00000310 _free_r
04003630 g     F .text	0000003c _ZN13EthernetClass4initEh
04011248 g     F .text	00000010 __locale_mb_cur_max
040078c0  w    F .text	00000064 _ZN10W5100Class12writeSnDPORTEht
0401a9b8 g     F .text	00000180 __call_exitprocs
040073f8 g     F .text	000000a8 _ZN13EthernetClass13socketSendUDPEh
04035ac0 g     O .bss	00000004 __mlocale_changed
04028f98 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
04035ad8 g     O .bss	00000004 _alt_tick_rate
0401c054  w    O .rodata	0000000d _ZTSSt9type_info
0400087c g     F .text	00000608 draw_string
0400a1e4 g     F .text	00000020 __cxa_pure_virtual
04011e18 g     F .text	00000148 __lshift
04003bd8  w    F .text	00000064 _ZN11EthernetUDPC1Ev
04019560 g     F .text	000001fc alt_avalon_spi_command
04035adc g     O .bss	00000004 _alt_nticks
0400c23c g     F .text	00000018 signal
040185fc g     F .text	000000fc read
04018a90 g     F .text	00000068 alt_sys_init
04002670 g     F .text	00000040 _ZN9DNSClient5beginERK9IPAddress
0401a8a0 g     F .text	00000118 __register_exitproc
040025e8  w    F .text	00000038 _ZNK9IPAddresseqERKS_
04004f0c  w    F .text	00000038 _ZN14EthernetClientD0Ev
04008dc8 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
04004928 g     F .text	00000060 _ZN14EthernetClient4readEv
04011ae0 g     F .text	000001f8 __multiply
04018fc8 g     F .text	00000068 altera_avalon_jtag_uart_close
040059fc g     F .text	0000002c _ZN11EthernetUDP9availableEv
0401c540 g       *ABS*	00000000 __ram_rwdata_start
0400b08c g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0401abb0 g       *ABS*	00000000 __ram_rodata_start
04035ba0 g     O .bss	00000028 __malloc_current_mallinfo
0400b1a0 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
0401232c g     F .text	0000014c __d2b
0401c1f0  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
04009048 g     F .text	00000004 _ZNSt9type_infoD2Ev
04004ec4  w    F .text	00000048 _ZN14EthernetClientD1Ev
0400aba0 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
04035a9a g     O .bss	00000001 W5100
040052e0 g     F .text	000001a4 _ZN14EthernetServer9availableEv
040026b0 g     F .text	00000130 _ZN9DNSClient9inet_atonEPKcR9IPAddress
04003fa8  w    F .text	00000038 _ZN10W5100Class9writeSHAREPKh
04008fc4 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04003ba4  w    F .text	00000034 _ZN3UDPC1Ev
040040dc  w    F .text	00000040 _ZN10W5100Class8writeRCREh
04018af8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401a684 g     F .text	000000a4 alt_get_fd
04007640  w    F .text	00000074 _ZN10W5100Class7writeSnEhtPht
04004f44  w    F .text	00000030 _ZN14EthernetClientcvbEv
0401997c g     F .text	00000158 alt_busy_sleep
040070f8 g     F .text	00000138 _ZN13EthernetClass10socketSendEhPKht
04005df4 g     F .text	00000094 _ZN11EthernetUDP4readEv
04028f84  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
04008b94  w    F .text	00000050 _ZN10W5100Class9writeSnCREhh
04014450 g     F .text	00000054 _close_r
04003f70  w    F .text	00000038 _ZN10W5100Class8readSUBREPh
04004d80 g     F .text	00000060 _ZN14EthernetClient10remotePortEv
04003954 g     F .text	0000004c _ZN13EthernetClass10setLocalIPE9IPAddress
04002620  w    F .text	00000028 _ZN11EthernetUDP8remoteIPEv
04008b68  w    F .text	0000002c _ZN10W5100Class17readPHYCFGR_W5500Ev
0400bb54 g     F .text	0000007c memcmp
04018bb8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04035cc8 g       *ABS*	00000000 __alt_stack_base
04018c08 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0401c234  w    O .rodata	00000014 _ZTVN9__gnu_cxx20recursive_init_errorE
04008d84 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
0400e724 g     F .text	00000154 __swsetup_r
0400b1e4 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
04016080 g     F .text	000008e8 .hidden __divdf3
0400357c g     F .text	000000b4 _ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_
040105c8 g     F .text	00000118 __sfp
04012590 g     F .text	00000078 __copybits
04003dc4  w    F .text	00000038 _ZN10W5100Class12getIPAddressEPh
0400904c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0402789c g     O .rwdata	00000408 __malloc_av_
04010714 g     F .text	00000004 __sinit_lock_release
04016bc0 g     F .text	00000718 .hidden __muldf3
04012c6c g     F .text	00000054 __sread
0401c1b4  w    O .rodata	00000014 _ZTVSt9exception
0400ab98 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
0401a57c g     F .text	00000108 alt_find_file
04019b58 g     F .text	000000a4 alt_dev_llist_insert
04018578 g     F .text	00000024 __malloc_lock
0401875c g     F .text	000000b0 sbrk
0401c0f0  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
04004050  w    F .text	00000038 _ZN10W5100Class8readSIPREPh
0400a0d0 g     F .text	00000090 __cxa_throw
0401031c g     F .text	0000005c _fflush_r
0400b050 g     F .text	00000010 .hidden _Unwind_SetIP
040144a4 g     F .text	000000c4 _calloc_r
040024a8 g     F .text	000000b0 _ZN9DhcpClass9printByteEPch
04007ce0 g     F .text	00000034 _ZN9IPAddressC1Em
04035a60 g       *ABS*	00000000 __bss_start
0400bd18 g     F .text	00000128 memset
04003ba4  w    F .text	00000034 _ZN3UDPC2Ev
04008cc0 g     F .text	00000034 main
04006234 g     F .text	0000029c _ZN13EthernetClass11socketBeginEht
04035ad0 g     O .bss	00000004 alt_envp
04003724 g     F .text	000000f0 _ZN13EthernetClass8maintainEv
04035aac g     O .bss	00000004 __malloc_max_total_mem
040056cc g     F .text	00000054 _ZN14EthernetServer5writeEh
04018b58 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04014b24 g     F .text	00000018 __swbuf
0400ab54 g     F .text	0000000c __cxa_get_globals_fast
04003c74  w    F .text	00000038 _ZN10W5100Class12getGatewayIpEPh
04004c18 g     F .text	00000084 _ZN14EthernetClienteqERKS_
0400abb4 g     F .text	00000034 _ZN9__gnu_cxx20recursive_init_errorD0Ev
04006ddc g     F .text	000000ac _ZN13EthernetClass19socketRecvAvailableEh
04012da0 g     F .text	00000008 __sclose
04003918 g     F .text	0000003c _ZN13EthernetClass13setMACAddressEPKh
08000000 g       *ABS*	00000000 __alt_heap_limit
04014658 g     F .text	00000014 fclose
0400ea78 g     F .text	00001688 _dtoa_r
0400b348 g     F .text	0000080c _malloc_r
04014c98 g     F .text	00000030 __ascii_wctomb
0400ab80 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
04028fbc g     O .rwdata	00000004 alt_errno
0401bf1c  w    O .rodata	0000000c _ZTI14EthernetServer
0400c254 g     F .text	00000010 _init_signal
0401c0e4  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
04008ae4  w    F .text	0000002c _ZN10W5100Class18readVERSIONR_W5200Ev
04011038 g     F .text	000000c4 _fwalk
0400ab70 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
04028f28  w    O .rwdata	00000008 _ZTI3UDP
04006178  w    F .text	00000050 _ZN11EthernetUDP4readEPcj
0400abe8 g     F .text	00000084 .hidden __divsi3
04010748 g     F .text	00000124 _malloc_trim_r
0401abb0 g       *ABS*	00000000 __CTOR_END__
0400c2d8 g     F .text	000000dc strcmp
0401abb0 g       *ABS*	00000000 __flash_rodata_start
0401c1dc  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0401abb0 g       *ABS*	00000000 __DTOR_LIST__
04001a14 g     F .text	000007c8 _ZN9DhcpClass17parseDHCPResponseEmRm
04003a98 g     F .text	00000044 _ZN13EthernetClass22setRetransmissionCountEh
04016968 g     F .text	00000088 .hidden __nedf2
04003fe0  w    F .text	00000038 _ZN10W5100Class8readSHAREPh
04018a58 g     F .text	00000038 alt_irq_init
040072a8 g     F .text	00000094 _ZN13EthernetClass16socketBufferDataEhtPKht
040186f8 g     F .text	00000064 alt_release_fd
04008d94 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0401c414 g     O .rodata	00000100 .hidden __clz_tab
04035abc g     O .bss	00000004 _PathLocale
04007230 g     F .text	00000078 _ZN13EthernetClass19socketSendAvailableEh
0401a854 g     F .text	00000014 atexit
0400a288 g     F .text	00000010 __cxa_guard_release
040143f0 g     F .text	00000060 _write_r
04011278 g     F .text	00000018 setlocale
0400803c g     F .text	00000144 _ZN10W5100Class4initEv
0400b084 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0400aafc g     F .text	00000058 __cxa_call_terminate
04028f50  w    O .rwdata	00000008 _ZTS6Server
04028f94 g     O .rwdata	00000004 _impure_ptr
04028f7c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
04035ac8 g     O .bss	00000004 alt_argc
04010100 g     F .text	0000021c __sflush_r
04019c5c g     F .text	00000060 _do_dtors
04011264 g     F .text	00000008 __locale_cjk_lang
04008504 g     F .text	000001a4 _ZN10W5100Class5writeEtPKht
04028f30  w    O .rwdata	00000005 _ZTS3UDP
0400a828 g     F .text	00000010 _ZSt14get_unexpectedv
04000020 g       .exceptions	00000000 alt_irq_entry
040121bc g     F .text	00000064 __ulp
0400b074 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
04010730 g     F .text	00000018 __fp_unlock_all
04003814 g     F .text	00000038 _ZN13EthernetClass10MACAddressEPh
04028fa8 g     O .rwdata	00000008 alt_fs_list
0401c190  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
0401bdf0  w    O .rodata	0000004c _ZTV3UDP
0400416c  w    F .text	0000003c _ZN9DhcpClassC2Ev
0400b060 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
0400a280 g     F .text	00000008 __cxa_guard_abort
0400a2a0 g     F .text	000000b4 __cxa_begin_catch
040081f4 g     F .text	000000b8 _ZN10W5100Class7isW5100Ev
0400a4b8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0400a7c8 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
04035a6c g     O .bss	00000004 _ZN13EthernetClass17_dnsServerAddressE
04004a28 g     F .text	000000e8 _ZN14EthernetClient4stopEv
04000020 g       *ABS*	00000000 __ram_exceptions_start
04011290 g     F .text	0000000c localeconv
040038d4 g     F .text	00000044 _ZN13EthernetClass9gatewayIPEv
04007a48  w    F .text	00000060 _ZN10W5100Class12readSnRX_RSREh
0400ab90 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
04007790  w    F .text	0000003c _ZN10W5100Class8readSnSREh
04028f8c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
04007574  w    F .text	00000060 _ZN10W5100Class6readSnEht
04019cf0 g     F .text	00000050 alt_ic_isr_register
04004678 g     F .text	0000008c _ZN14EthernetClient5writeEPKhj
04000334 g     F .text	000000cc init_color_palette
0400a998 g     F .text	00000060 __cxa_allocate_exception
0401c01c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
04003140  w    F .text	00000024 _ZN9IPAddress11raw_addressEv
04028fd0 g       *ABS*	00000000 _edata
04035cc8 g       *ABS*	00000000 _end
04009858 g     F .text	00000600 __gxx_personality_sj0
04003b74  w    F .text	00000030 _ZN3UDP14beginMulticastE9IPAddresst
0401466c g     F .text	00000164 __fputwc
04005720 g     F .text	00000108 _ZN14EthernetServer5writeEPKhj
04028f40  w    O .rwdata	00000008 _ZTS6Client
04000244 g       *ABS*	00000000 __ram_exceptions_end
04019030 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04004988 g     F .text	000000a0 _ZN14EthernetClient5flushEv
0400413c  w    F .text	00000030 _ZN10W5100Class5setSSEh
04001218 g     F .text	00000388 _ZN9DhcpClass18request_DHCP_leaseEv
0400ab6c g     F .text	00000004 _ZNSt9exceptionD1Ev
04019dc8 g     F .text	0000008c alt_ic_irq_disable
04006904 g     F .text	00000070 _ZN13EthernetClass13socketConnectEhPht
04012cc8 g     F .text	0000007c __swrite
04005150  w    F .text	00000048 _ZN10W5100Class10readSnDIPREhPh
04028f9c g     O .rwdata	00000004 __malloc_trim_threshold
04011258 g     F .text	0000000c __locale_msgcharset
0401a868 g     F .text	00000038 exit
0400b004 g     F .text	0000001c .hidden _Unwind_SetGR
04005054  w    F .text	00000028 _ZN10W5100Class7CH_BASEEv
040110fc g     F .text	000000c4 _fwalk_reent
04008f28 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
04011fc0 g     F .text	000001fc __mdiff
04006860 g     F .text	00000040 _ZN13EthernetClass11socketCloseEh
0400a6f0 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
04005e88 g     F .text	000000ec _ZN11EthernetUDP4readEPhj
0400ac6c g     F .text	00000074 .hidden __modsi3
04004624 g     F .text	00000054 _ZN14EthernetClient5writeEh
04008c70  w    F .text	00000050 _ZN10W5100Class14writeSnTX_SIZEEhh
040011d4 g     F .text	00000044 _ZN9DhcpClass16reset_DHCP_leaseEv
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04005fe0 g     F .text	00000024 _ZN11EthernetUDP5flushEv
0401070c g     F .text	00000004 __sfp_lock_release
0401c164  w    O .rodata	0000000c _ZTISt13bad_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
04003448 g     F .text	00000060 _ZN13EthernetClass5beginEPh9IPAddress
04003e3c  w    F .text	00000040 _ZN10W5100Class22setRetransmissionCountEh
04008c20  w    F .text	00000050 _ZN10W5100Class14writeSnRX_SIZEEhh
04035b40 g     O .bss	00000010 _ZN14EthernetServer11server_portE
04017f74 g     F .text	00000034 _exit
04005b4c g     F .text	00000080 _ZN11EthernetUDP11beginPacketE9IPAddresst
04004cfc g     F .text	00000084 _ZN14EthernetClient8remoteIPEv
04019850 g     F .text	0000012c alt_alarm_start
04003cac  w    F .text	00000038 _ZN10W5100Class13setSubnetMaskEPKh
0400afd0 g     F .text	0000001c .hidden _Unwind_GetGR
0400ab60 g     F .text	0000000c __cxa_get_globals
0401129c g     F .text	000001bc __smakebuf_r
04028f70 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0400c3b4 g     F .text	00000098 strlen
0400bfd4 g     F .text	0000006c _init_signal_r
04028f68  w    O .rwdata	00000008 _ZTISt9type_info
0401a1d0 g     F .text	00000154 open
0401be40  w    O .rodata	0000006c _ZTV14EthernetClient
040169f0 g     F .text	000000dc .hidden __gedf2
04007b6c  w    F .text	00000050 _ZN10W5100Class5SBASEEh
04003d1c  w    F .text	00000038 _ZN10W5100Class13setMACAddressEPKh
0401c140  w    O .rodata	0000000d _ZTSSt9exception
04028f5a g     O .rwdata	00000001 _ZN10W5100Class6ss_pinE
0400b2d4 g     F .text	0000004c clock
040051f8  w    F .text	00000048 _ZN9DNSClientC1Ev
0401bf8c  w    O .rodata	0000000c _ZTI11EthernetUDP
04028fa4 g     O .rwdata	00000004 __wctomb
0400ab8c g     F .text	00000004 _ZNSt9exceptionD0Ev
04012ea4 g     F .text	00000018 __sprint_r
04019cbc g     F .text	00000034 alt_icache_flush_all
04002970 g     F .text	00000248 _ZN9DNSClient12BuildRequestEPKc
0401c204  w    O .rodata	00000023 _ZTSN9__gnu_cxx20recursive_init_errorE
0400b07c g     F .text	00000008 .hidden _Unwind_GetDataRelBase
04008a38  w    F .text	0000002c _ZN10W5100Class6readMREv
04028fc4 g     O .rwdata	00000004 alt_priority_mask
0400560c g     F .text	000000c0 _ZN14EthernetServercvbEv
04005bcc g     F .text	00000040 _ZN11EthernetUDP9endPacketEv
04019d40 g     F .text	00000088 alt_ic_irq_enable
0400e64c g     F .text	0000001c __vfprintf_internal
04014cc8 g     F .text	0000005c _wctomb_r
04007d14 g     F .text	00000044 _ZN9IPAddressC2EPKh
040172d8 g     F .text	000008fc .hidden __subdf3
04003510 g     F .text	0000006c _ZN13EthernetClass5beginEPh9IPAddressS1_S1_
0400416c  w    F .text	0000003c _ZN9DhcpClassC1Ev
0400318c  w    F .text	00000030 _ZN9IPAddressixEi
04007e78 g     F .text	00000078 _ZN9IPAddress5printEv
040119f4 g     F .text	000000b0 __lo0bits
04028fc8 g     O .rwdata	00000008 alt_alarm_list
04019bfc g     F .text	00000060 _do_ctors
0400c264 g     F .text	00000014 __sigtramp
0400a224 g     F .text	0000005c __cxa_guard_acquire
04014bd8 g     F .text	000000c0 wcrtomb
04008aa4  w    F .text	00000040 _ZN10W5100Class9writeTMSREh
040047cc g     F .text	0000005c _ZN14EthernetClient9availableEv
040023e8 g     F .text	00000040 _ZN9DhcpClass12getGatewayIpEv
04005a28 g     F .text	00000060 _ZN11EthernetUDP4stopEv
04017e78 g     F .text	000000d0 close
04007ef0 g     F .text	00000044 _ZN9IPAddressaSEPKh
040027e0 g     F .text	00000190 _ZN9DNSClient13getHostByNameEPKcR9IPAddresst
0400733c g     F .text	000000bc _ZN13EthernetClass14socketStartUDPEhPht
0401c170  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
04018368 g     F .text	00000084 alt_load
04009060 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0400aba4 g     F .text	00000010 _ZN9__gnu_cxx20recursive_init_errorD2Ev
04035a98 g     O .bss	00000001 _ZN10W5100Class4chipE
04003f00  w    F .text	00000038 _ZN10W5100Class7readGAREPh
040147f4 g     F .text	00000080 fputwc
0400c228 g     F .text	00000014 raise
0400b334 g     F .text	00000014 free
04010710 g     F .text	00000004 __sinit_lock_acquire
04011768 g     F .text	00000120 __multadd
0400a4c8 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
04011740 g     F .text	00000028 _Bfree
040041a8 g     F .text	0000010c _ZN14EthernetClient7connectEPKct



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__reset-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100f4 	movhi	r2,1027
 4000140:	1096f204 	addi	r2,r2,23496
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100f4 	movhi	r2,1027
 4000158:	1096f204 	addi	r2,r2,23496
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d092ef17 	ldw	r2,19388(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d092ef17 	ldw	r2,19388(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_data_end+0xfc000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 4000260:	d683c914 	ori	gp,gp,3876
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 4000268:	10969814 	ori	r2,r2,23136

    movhi r3, %hi(__bss_end)
 400026c:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 4000270:	18d73214 	ori	r3,r3,23752

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_data_end+0xfc000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	40183680 	call	4018368 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	40184fc0 	call	40184fc <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_data_end+0xfc00028c>

04000290 <set_color_palette>:
#include "pixel_vga.h"

void set_color_palette(alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue) {
 4000290:	defffa04 	addi	sp,sp,-24
 4000294:	df000515 	stw	fp,20(sp)
 4000298:	df000504 	addi	fp,sp,20
 400029c:	2011883a 	mov	r8,r4
 40002a0:	2809883a 	mov	r4,r5
 40002a4:	3007883a 	mov	r3,r6
 40002a8:	3805883a 	mov	r2,r7
 40002ac:	e23ffc05 	stb	r8,-16(fp)
 40002b0:	e13ffd05 	stb	r4,-12(fp)
 40002b4:	e0fffe05 	stb	r3,-8(fp)
 40002b8:	e0bfff05 	stb	r2,-4(fp)
	// Pointer to the beginning of VRAM
    volatile alt_u32* vram_32 = (alt_u32*) VRAM;
 40002bc:	d0a00017 	ldw	r2,-32768(gp)
 40002c0:	e0bffb15 	stw	r2,-20(fp)

    // Point to start of color palette
    vram_32 += PALETTE_OFFSET + color;
 40002c4:	e0bffc03 	ldbu	r2,-16(fp)
 40002c8:	1092c004 	addi	r2,r2,19200
 40002cc:	1085883a 	add	r2,r2,r2
 40002d0:	1085883a 	add	r2,r2,r2
 40002d4:	1007883a 	mov	r3,r2
 40002d8:	e0bffb17 	ldw	r2,-20(fp)
 40002dc:	10c5883a 	add	r2,r2,r3
 40002e0:	e0bffb15 	stw	r2,-20(fp)

    // Set the color
    *vram_32 = (((alt_u32)red / 16) << 8) + (((alt_u32)green / 16) << 4) + ((alt_u32)blue / 16);
 40002e4:	e0bffd03 	ldbu	r2,-12(fp)
 40002e8:	1004d13a 	srli	r2,r2,4
 40002ec:	10803fcc 	andi	r2,r2,255
 40002f0:	1006923a 	slli	r3,r2,8
 40002f4:	e0bffe03 	ldbu	r2,-8(fp)
 40002f8:	1004d13a 	srli	r2,r2,4
 40002fc:	10803fcc 	andi	r2,r2,255
 4000300:	1004913a 	slli	r2,r2,4
 4000304:	1887883a 	add	r3,r3,r2
 4000308:	e0bfff03 	ldbu	r2,-4(fp)
 400030c:	1004d13a 	srli	r2,r2,4
 4000310:	10803fcc 	andi	r2,r2,255
 4000314:	1887883a 	add	r3,r3,r2
 4000318:	e0bffb17 	ldw	r2,-20(fp)
 400031c:	10c00015 	stw	r3,0(r2)
}
 4000320:	0001883a 	nop
 4000324:	e037883a 	mov	sp,fp
 4000328:	df000017 	ldw	fp,0(sp)
 400032c:	dec00104 	addi	sp,sp,4
 4000330:	f800283a 	ret

04000334 <init_color_palette>:

void init_color_palette() {
 4000334:	defffd04 	addi	sp,sp,-12
 4000338:	dfc00215 	stw	ra,8(sp)
 400033c:	df000115 	stw	fp,4(sp)
 4000340:	df000104 	addi	fp,sp,4
    // Initialize the color palette with the colors declared in the struct header
    for(alt_u8 i=0; i<4; i++) {
 4000344:	e03fff05 	stb	zero,-4(fp)
 4000348:	00002406 	br	40003dc <init_color_palette+0xa8>
        set_color_palette(i, colors[i].red, colors[i].green, colors[i].blue);
 400034c:	e23fff03 	ldbu	r8,-4(fp)
 4000350:	e13fff03 	ldbu	r4,-4(fp)
 4000354:	00c100b4 	movhi	r3,1026
 4000358:	18c6dfc4 	addi	r3,r3,7039
 400035c:	2005883a 	mov	r2,r4
 4000360:	1085883a 	add	r2,r2,r2
 4000364:	1105883a 	add	r2,r2,r4
 4000368:	1885883a 	add	r2,r3,r2
 400036c:	10800003 	ldbu	r2,0(r2)
 4000370:	11403fcc 	andi	r5,r2,255
 4000374:	e13fff03 	ldbu	r4,-4(fp)
 4000378:	00c100b4 	movhi	r3,1026
 400037c:	18c6dfc4 	addi	r3,r3,7039
 4000380:	2005883a 	mov	r2,r4
 4000384:	1085883a 	add	r2,r2,r2
 4000388:	1105883a 	add	r2,r2,r4
 400038c:	1885883a 	add	r2,r3,r2
 4000390:	10800044 	addi	r2,r2,1
 4000394:	10800003 	ldbu	r2,0(r2)
 4000398:	11803fcc 	andi	r6,r2,255
 400039c:	e13fff03 	ldbu	r4,-4(fp)
 40003a0:	00c100b4 	movhi	r3,1026
 40003a4:	18c6dfc4 	addi	r3,r3,7039
 40003a8:	2005883a 	mov	r2,r4
 40003ac:	1085883a 	add	r2,r2,r2
 40003b0:	1105883a 	add	r2,r2,r4
 40003b4:	1885883a 	add	r2,r3,r2
 40003b8:	10800084 	addi	r2,r2,2
 40003bc:	10800003 	ldbu	r2,0(r2)
 40003c0:	10803fcc 	andi	r2,r2,255
 40003c4:	100f883a 	mov	r7,r2
 40003c8:	4009883a 	mov	r4,r8
 40003cc:	40002900 	call	4000290 <set_color_palette>
    *vram_32 = (((alt_u32)red / 16) << 8) + (((alt_u32)green / 16) << 4) + ((alt_u32)blue / 16);
}

void init_color_palette() {
    // Initialize the color palette with the colors declared in the struct header
    for(alt_u8 i=0; i<4; i++) {
 40003d0:	e0bfff03 	ldbu	r2,-4(fp)
 40003d4:	10800044 	addi	r2,r2,1
 40003d8:	e0bfff05 	stb	r2,-4(fp)
 40003dc:	e0bfff03 	ldbu	r2,-4(fp)
 40003e0:	10800130 	cmpltui	r2,r2,4
 40003e4:	103fd91e 	bne	r2,zero,400034c <__alt_data_end+0xfc00034c>
        set_color_palette(i, colors[i].red, colors[i].green, colors[i].blue);
    }
}
 40003e8:	0001883a 	nop
 40003ec:	e037883a 	mov	sp,fp
 40003f0:	dfc00117 	ldw	ra,4(sp)
 40003f4:	df000017 	ldw	fp,0(sp)
 40003f8:	dec00204 	addi	sp,sp,8
 40003fc:	f800283a 	ret

04000400 <draw_rectangle>:

void draw_rectangle(alt_u32 x, alt_u32 y, alt_u32 width, alt_u32 height, alt_u8 color){
 4000400:	defff504 	addi	sp,sp,-44
 4000404:	dfc00a15 	stw	ra,40(sp)
 4000408:	df000915 	stw	fp,36(sp)
 400040c:	df000904 	addi	fp,sp,36
 4000410:	e13ffb15 	stw	r4,-20(fp)
 4000414:	e17ffc15 	stw	r5,-16(fp)
 4000418:	e1bffd15 	stw	r6,-12(fp)
 400041c:	e1fffe15 	stw	r7,-8(fp)
 4000420:	e0800217 	ldw	r2,8(fp)
 4000424:	e0bfff05 	stb	r2,-4(fp)
    // Validate the arguments
    if (x%16 != 0 | width%16 != 0)
 4000428:	e0bffb17 	ldw	r2,-20(fp)
 400042c:	108003cc 	andi	r2,r2,15
 4000430:	1004c03a 	cmpne	r2,r2,zero
 4000434:	1007883a 	mov	r3,r2
 4000438:	e0bffd17 	ldw	r2,-12(fp)
 400043c:	108003cc 	andi	r2,r2,15
 4000440:	1004c03a 	cmpne	r2,r2,zero
 4000444:	1884b03a 	or	r2,r3,r2
 4000448:	10803fcc 	andi	r2,r2,255
 400044c:	10000326 	beq	r2,zero,400045c <draw_rectangle+0x5c>
        printf("Invalid arguments passed to draw_rectangle!\n");
 4000450:	010100b4 	movhi	r4,1026
 4000454:	212aec04 	addi	r4,r4,-21584
 4000458:	400bf6c0 	call	400bf6c <puts>

    // Initialize the color
    alt_u32 word = 0;
 400045c:	e03ff715 	stw	zero,-36(fp)
    for(alt_u8 p=0; p<16; p++) word += (color << (p*2));
 4000460:	e03ff805 	stb	zero,-32(fp)
 4000464:	00000b06 	br	4000494 <draw_rectangle+0x94>
 4000468:	e0ffff03 	ldbu	r3,-4(fp)
 400046c:	e0bff803 	ldbu	r2,-32(fp)
 4000470:	1085883a 	add	r2,r2,r2
 4000474:	1884983a 	sll	r2,r3,r2
 4000478:	1007883a 	mov	r3,r2
 400047c:	e0bff717 	ldw	r2,-36(fp)
 4000480:	10c5883a 	add	r2,r2,r3
 4000484:	e0bff715 	stw	r2,-36(fp)
 4000488:	e0bff803 	ldbu	r2,-32(fp)
 400048c:	10800044 	addi	r2,r2,1
 4000490:	e0bff805 	stb	r2,-32(fp)
 4000494:	e0bff803 	ldbu	r2,-32(fp)
 4000498:	10800430 	cmpltui	r2,r2,16
 400049c:	103ff21e 	bne	r2,zero,4000468 <__alt_data_end+0xfc000468>

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
 40004a0:	e0bffc17 	ldw	r2,-16(fp)
 40004a4:	e0bff915 	stw	r2,-28(fp)
 40004a8:	00001906 	br	4000510 <draw_rectangle+0x110>
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=16) {
 40004ac:	e0bffb17 	ldw	r2,-20(fp)
 40004b0:	e0bffa15 	stw	r2,-24(fp)
 40004b4:	00000e06 	br	40004f0 <draw_rectangle+0xf0>
            VRAM[(x_draw/16) + (y_draw*40)] = word;
 40004b8:	d0e00017 	ldw	r3,-32768(gp)
 40004bc:	e0bffa17 	ldw	r2,-24(fp)
 40004c0:	1008d13a 	srli	r4,r2,4
 40004c4:	e0bff917 	ldw	r2,-28(fp)
 40004c8:	10800a24 	muli	r2,r2,40
 40004cc:	2085883a 	add	r2,r4,r2
 40004d0:	1085883a 	add	r2,r2,r2
 40004d4:	1085883a 	add	r2,r2,r2
 40004d8:	1885883a 	add	r2,r3,r2
 40004dc:	e0fff717 	ldw	r3,-36(fp)
 40004e0:	10c00015 	stw	r3,0(r2)
    alt_u32 word = 0;
    for(alt_u8 p=0; p<16; p++) word += (color << (p*2));

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=16) {
 40004e4:	e0bffa17 	ldw	r2,-24(fp)
 40004e8:	10800404 	addi	r2,r2,16
 40004ec:	e0bffa15 	stw	r2,-24(fp)
 40004f0:	e0fffb17 	ldw	r3,-20(fp)
 40004f4:	e0bffd17 	ldw	r2,-12(fp)
 40004f8:	1885883a 	add	r2,r3,r2
 40004fc:	e0fffa17 	ldw	r3,-24(fp)
 4000500:	18bfed36 	bltu	r3,r2,40004b8 <__alt_data_end+0xfc0004b8>
    // Initialize the color
    alt_u32 word = 0;
    for(alt_u8 p=0; p<16; p++) word += (color << (p*2));

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
 4000504:	e0bff917 	ldw	r2,-28(fp)
 4000508:	10800044 	addi	r2,r2,1
 400050c:	e0bff915 	stw	r2,-28(fp)
 4000510:	e0fffc17 	ldw	r3,-16(fp)
 4000514:	e0bffe17 	ldw	r2,-8(fp)
 4000518:	1885883a 	add	r2,r3,r2
 400051c:	e0fff917 	ldw	r3,-28(fp)
 4000520:	18bfe236 	bltu	r3,r2,40004ac <__alt_data_end+0xfc0004ac>
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=16) {
            VRAM[(x_draw/16) + (y_draw*40)] = word;
        }
    }
}
 4000524:	0001883a 	nop
 4000528:	e037883a 	mov	sp,fp
 400052c:	dfc00117 	ldw	ra,4(sp)
 4000530:	df000017 	ldw	fp,0(sp)
 4000534:	dec00204 	addi	sp,sp,8
 4000538:	f800283a 	ret

0400053c <debug>:

void debug() {
 400053c:	defffa04 	addi	sp,sp,-24
 4000540:	dfc00515 	stw	ra,20(sp)
 4000544:	df000415 	stw	fp,16(sp)
 4000548:	df000404 	addi	fp,sp,16
    // Clear the screen
    draw_rectangle(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0);
 400054c:	d8000015 	stw	zero,0(sp)
 4000550:	01c07804 	movi	r7,480
 4000554:	0180a004 	movi	r6,640
 4000558:	000b883a 	mov	r5,zero
 400055c:	0009883a 	mov	r4,zero
 4000560:	40004000 	call	4000400 <draw_rectangle>

    // Set each word to a different color
    for(alt_u32 i=0; i < 100; i++){
 4000564:	e03ffd15 	stw	zero,-12(fp)
 4000568:	00001c06 	br	40005dc <debug+0xa0>
        alt_u32 word = 0;
 400056c:	e03ffe15 	stw	zero,-8(fp)
        for(alt_u8 p=0; p<8; p++) word += ((i%4) << (p*4));
 4000570:	e03fff05 	stb	zero,-4(fp)
 4000574:	00000c06 	br	40005a8 <debug+0x6c>
 4000578:	e0bffd17 	ldw	r2,-12(fp)
 400057c:	10c000cc 	andi	r3,r2,3
 4000580:	e0bfff03 	ldbu	r2,-4(fp)
 4000584:	1085883a 	add	r2,r2,r2
 4000588:	1085883a 	add	r2,r2,r2
 400058c:	1884983a 	sll	r2,r3,r2
 4000590:	e0fffe17 	ldw	r3,-8(fp)
 4000594:	1885883a 	add	r2,r3,r2
 4000598:	e0bffe15 	stw	r2,-8(fp)
 400059c:	e0bfff03 	ldbu	r2,-4(fp)
 40005a0:	10800044 	addi	r2,r2,1
 40005a4:	e0bfff05 	stb	r2,-4(fp)
 40005a8:	e0bfff03 	ldbu	r2,-4(fp)
 40005ac:	10800230 	cmpltui	r2,r2,8
 40005b0:	103ff11e 	bne	r2,zero,4000578 <__alt_data_end+0xfc000578>
        VRAM[i] = word;
 40005b4:	d0e00017 	ldw	r3,-32768(gp)
 40005b8:	e0bffd17 	ldw	r2,-12(fp)
 40005bc:	1085883a 	add	r2,r2,r2
 40005c0:	1085883a 	add	r2,r2,r2
 40005c4:	1885883a 	add	r2,r3,r2
 40005c8:	e0fffe17 	ldw	r3,-8(fp)
 40005cc:	10c00015 	stw	r3,0(r2)
void debug() {
    // Clear the screen
    draw_rectangle(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0);

    // Set each word to a different color
    for(alt_u32 i=0; i < 100; i++){
 40005d0:	e0bffd17 	ldw	r2,-12(fp)
 40005d4:	10800044 	addi	r2,r2,1
 40005d8:	e0bffd15 	stw	r2,-12(fp)
 40005dc:	e0bffd17 	ldw	r2,-12(fp)
 40005e0:	10801930 	cmpltui	r2,r2,100
 40005e4:	103fe11e 	bne	r2,zero,400056c <__alt_data_end+0xfc00056c>
        alt_u32 word = 0;
        for(alt_u8 p=0; p<8; p++) word += ((i%4) << (p*4));
        VRAM[i] = word;
    }
}
 40005e8:	0001883a 	nop
 40005ec:	e037883a 	mov	sp,fp
 40005f0:	dfc00117 	ldw	ra,4(sp)
 40005f4:	df000017 	ldw	fp,0(sp)
 40005f8:	dec00204 	addi	sp,sp,8
 40005fc:	f800283a 	ret

04000600 <draw_background>:

void draw_background() {
 4000600:	defffd04 	addi	sp,sp,-12
 4000604:	dfc00215 	stw	ra,8(sp)
 4000608:	df000115 	stw	fp,4(sp)
 400060c:	df000104 	addi	fp,sp,4
    // Draw the sidebar background
    draw_rectangle(0, 0, SIDEBAR_WIDTH, SCREEN_HEIGHT, 0);
 4000610:	d8000015 	stw	zero,0(sp)
 4000614:	01c07804 	movi	r7,480
 4000618:	01802004 	movi	r6,128
 400061c:	000b883a 	mov	r5,zero
 4000620:	0009883a 	mov	r4,zero
 4000624:	40004000 	call	4000400 <draw_rectangle>

    // Draw the messages background
    draw_rectangle(SIDEBAR_WIDTH, 0, SCREEN_WIDTH-SIDEBAR_WIDTH, SCREEN_HEIGHT, 0);
 4000628:	d8000015 	stw	zero,0(sp)
 400062c:	01c07804 	movi	r7,480
 4000630:	01808004 	movi	r6,512
 4000634:	000b883a 	mov	r5,zero
 4000638:	01002004 	movi	r4,128
 400063c:	40004000 	call	4000400 <draw_rectangle>
}
 4000640:	0001883a 	nop
 4000644:	e037883a 	mov	sp,fp
 4000648:	dfc00117 	ldw	ra,4(sp)
 400064c:	df000017 	ldw	fp,0(sp)
 4000650:	dec00204 	addi	sp,sp,8
 4000654:	f800283a 	ret

04000658 <draw_char>:

void draw_char(alt_u8 x, alt_u8 y, alt_u8 render_code, struct FONT* font) {
 4000658:	defff004 	addi	sp,sp,-64
 400065c:	df000f15 	stw	fp,60(sp)
 4000660:	df000f04 	addi	fp,sp,60
 4000664:	2807883a 	mov	r3,r5
 4000668:	3005883a 	mov	r2,r6
 400066c:	e1ffff15 	stw	r7,-4(fp)
 4000670:	e13ffc05 	stb	r4,-16(fp)
 4000674:	e0fffd05 	stb	r3,-12(fp)
 4000678:	e0bffe05 	stb	r2,-8(fp)
    // Get the character metadata
    alt_u8  char_width = font->widths[render_code];
 400067c:	e0bfff17 	ldw	r2,-4(fp)
 4000680:	10c00217 	ldw	r3,8(r2)
 4000684:	e0bffe03 	ldbu	r2,-8(fp)
 4000688:	1885883a 	add	r2,r3,r2
 400068c:	10800003 	ldbu	r2,0(r2)
 4000690:	e0bff705 	stb	r2,-36(fp)
    alt_u8  char_height = font->height;
 4000694:	e0bfff17 	ldw	r2,-4(fp)
 4000698:	10800003 	ldbu	r2,0(r2)
 400069c:	e0bff745 	stb	r2,-35(fp)
    alt_u32 font_outer = font->indices[render_code];
 40006a0:	e0bfff17 	ldw	r2,-4(fp)
 40006a4:	10c00317 	ldw	r3,12(r2)
 40006a8:	e0bffe03 	ldbu	r2,-8(fp)
 40006ac:	1085883a 	add	r2,r2,r2
 40006b0:	1085883a 	add	r2,r2,r2
 40006b4:	1885883a 	add	r2,r3,r2
 40006b8:	10800017 	ldw	r2,0(r2)
 40006bc:	e0bff115 	stw	r2,-60(fp)
    alt_u8  font_inner = 0;
 40006c0:	e03ff205 	stb	zero,-56(fp)

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
 40006c4:	e0fffc03 	ldbu	r3,-16(fp)
 40006c8:	00bffc04 	movi	r2,-16
 40006cc:	1884703a 	and	r2,r3,r2
 40006d0:	e0bff815 	stw	r2,-32(fp)
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 40006d4:	e0bffd03 	ldbu	r2,-12(fp)
 40006d8:	e0bff315 	stw	r2,-52(fp)
 40006dc:	00005c06 	br	4000850 <draw_char+0x1f8>
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+char_width); x_wb+=16) {
 40006e0:	e0bff817 	ldw	r2,-32(fp)
 40006e4:	e0bff415 	stw	r2,-48(fp)
 40006e8:	00005006 	br	400082c <draw_char+0x1d4>

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
 40006ec:	e0bff317 	ldw	r2,-52(fp)
 40006f0:	e0bff915 	stw	r2,-28(fp)
            alt_u32 word = 0;
 40006f4:	e03ff515 	stw	zero,-44(fp)
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 40006f8:	e0bff417 	ldw	r2,-48(fp)
 40006fc:	e0bff615 	stw	r2,-40(fp)
 4000700:	00004306 	br	4000810 <draw_char+0x1b8>
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 4000704:	e0bffc03 	ldbu	r2,-16(fp)
 4000708:	e0fff617 	ldw	r3,-40(fp)
 400070c:	18803a36 	bltu	r3,r2,40007f8 <draw_char+0x1a0>

                // Check if we are out of the width of the font
                if (wx-x >= char_width) continue;
 4000710:	e0bffc03 	ldbu	r2,-16(fp)
 4000714:	e0fff617 	ldw	r3,-40(fp)
 4000718:	1887c83a 	sub	r3,r3,r2
 400071c:	e0bff703 	ldbu	r2,-36(fp)
 4000720:	1880372e 	bgeu	r3,r2,4000800 <draw_char+0x1a8>

                // Get the relevant character from the font data
                alt_u8 font_data = font->data[font_outer];
 4000724:	e0bfff17 	ldw	r2,-4(fp)
 4000728:	10c00117 	ldw	r3,4(r2)
 400072c:	e0bff117 	ldw	r2,-60(fp)
 4000730:	1885883a 	add	r2,r3,r2
 4000734:	10800003 	ldbu	r2,0(r2)
 4000738:	e0bffa05 	stb	r2,-24(fp)

                // Extract the relevant pixel data
                alt_u32 pixel_data = (font_data >> ((3-font_inner)*2)) % 4;
 400073c:	e0fffa03 	ldbu	r3,-24(fp)
 4000740:	e0bff203 	ldbu	r2,-56(fp)
 4000744:	010000c4 	movi	r4,3
 4000748:	2085c83a 	sub	r2,r4,r2
 400074c:	1085883a 	add	r2,r2,r2
 4000750:	1887d83a 	sra	r3,r3,r2
 4000754:	00a00034 	movhi	r2,32768
 4000758:	108000c4 	addi	r2,r2,3
 400075c:	1884703a 	and	r2,r3,r2
 4000760:	1000040e 	bge	r2,zero,4000774 <draw_char+0x11c>
 4000764:	10bfffc4 	addi	r2,r2,-1
 4000768:	00ffff04 	movi	r3,-4
 400076c:	10c4b03a 	or	r2,r2,r3
 4000770:	10800044 	addi	r2,r2,1
 4000774:	e0bffb15 	stw	r2,-20(fp)

                // Write the pixel data to the word
                word += pixel_data << (15-(wx%16))*2;
 4000778:	e0bff617 	ldw	r2,-40(fp)
 400077c:	0084303a 	nor	r2,zero,r2
 4000780:	108003cc 	andi	r2,r2,15
 4000784:	1085883a 	add	r2,r2,r2
 4000788:	1007883a 	mov	r3,r2
 400078c:	e0bffb17 	ldw	r2,-20(fp)
 4000790:	10c4983a 	sll	r2,r2,r3
 4000794:	e0fff517 	ldw	r3,-44(fp)
 4000798:	1885883a 	add	r2,r3,r2
 400079c:	e0bff515 	stw	r2,-44(fp)

                // Increment the pixel counter for the font data
                if (++font_inner == 4){
 40007a0:	e0bff203 	ldbu	r2,-56(fp)
 40007a4:	10800044 	addi	r2,r2,1
 40007a8:	e0bff205 	stb	r2,-56(fp)
 40007ac:	e0bff203 	ldbu	r2,-56(fp)
 40007b0:	10800118 	cmpnei	r2,r2,4
 40007b4:	1000041e 	bne	r2,zero,40007c8 <draw_char+0x170>
                    font_inner = 0;
 40007b8:	e03ff205 	stb	zero,-56(fp)
                    font_outer++;
 40007bc:	e0bff117 	ldw	r2,-60(fp)
 40007c0:	10800044 	addi	r2,r2,1
 40007c4:	e0bff115 	stw	r2,-60(fp)
                }

            // Write the word to VRAM
            VRAM[(x_wb/16) + (y_wb*40)] = word;
 40007c8:	d0e00017 	ldw	r3,-32768(gp)
 40007cc:	e0bff417 	ldw	r2,-48(fp)
 40007d0:	1008d13a 	srli	r4,r2,4
 40007d4:	e0bff317 	ldw	r2,-52(fp)
 40007d8:	10800a24 	muli	r2,r2,40
 40007dc:	2085883a 	add	r2,r4,r2
 40007e0:	1085883a 	add	r2,r2,r2
 40007e4:	1085883a 	add	r2,r2,r2
 40007e8:	1885883a 	add	r2,r3,r2
 40007ec:	e0fff517 	ldw	r3,-44(fp)
 40007f0:	10c00015 	stw	r3,0(r2)
 40007f4:	00000306 	br	4000804 <draw_char+0x1ac>
            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 40007f8:	0001883a 	nop
 40007fc:	00000106 	br	4000804 <draw_char+0x1ac>

                // Check if we are out of the width of the font
                if (wx-x >= char_width) continue;
 4000800:	0001883a 	nop
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+char_width); x_wb+=16) {

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 4000804:	e0bff617 	ldw	r2,-40(fp)
 4000808:	10800044 	addi	r2,r2,1
 400080c:	e0bff615 	stw	r2,-40(fp)
 4000810:	e0bff417 	ldw	r2,-48(fp)
 4000814:	10800404 	addi	r2,r2,16
 4000818:	e0fff617 	ldw	r3,-40(fp)
 400081c:	18bfb936 	bltu	r3,r2,4000704 <__alt_data_end+0xfc000704>

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+char_width); x_wb+=16) {
 4000820:	e0bff417 	ldw	r2,-48(fp)
 4000824:	10800404 	addi	r2,r2,16
 4000828:	e0bff415 	stw	r2,-48(fp)
 400082c:	e0fffc03 	ldbu	r3,-16(fp)
 4000830:	e0bff703 	ldbu	r2,-36(fp)
 4000834:	1885883a 	add	r2,r3,r2
 4000838:	1007883a 	mov	r3,r2
 400083c:	e0bff417 	ldw	r2,-48(fp)
 4000840:	10ffaa36 	bltu	r2,r3,40006ec <__alt_data_end+0xfc0006ec>
    alt_u8  font_inner = 0;

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 4000844:	e0bff317 	ldw	r2,-52(fp)
 4000848:	10800044 	addi	r2,r2,1
 400084c:	e0bff315 	stw	r2,-52(fp)
 4000850:	e0fffd03 	ldbu	r3,-12(fp)
 4000854:	e0bff743 	ldbu	r2,-35(fp)
 4000858:	1885883a 	add	r2,r3,r2
 400085c:	1007883a 	mov	r3,r2
 4000860:	e0bff317 	ldw	r2,-52(fp)
 4000864:	10ff9e36 	bltu	r2,r3,40006e0 <__alt_data_end+0xfc0006e0>
            // Write the word to VRAM
            VRAM[(x_wb/16) + (y_wb*40)] = word;
            }
        }
    }
}
 4000868:	0001883a 	nop
 400086c:	e037883a 	mov	sp,fp
 4000870:	df000017 	ldw	fp,0(sp)
 4000874:	dec00104 	addi	sp,sp,4
 4000878:	f800283a 	ret

0400087c <draw_string>:

void draw_string(alt_u8 x, alt_u8 y, char* str, struct FONT* font) {
 400087c:	deffd704 	addi	sp,sp,-164
 4000880:	df002815 	stw	fp,160(sp)
 4000884:	ddc02715 	stw	r23,156(sp)
 4000888:	dd802615 	stw	r22,152(sp)
 400088c:	dd402515 	stw	r21,148(sp)
 4000890:	dd002415 	stw	r20,144(sp)
 4000894:	dcc02315 	stw	r19,140(sp)
 4000898:	dc802215 	stw	r18,136(sp)
 400089c:	dc402115 	stw	r17,132(sp)
 40008a0:	dc002015 	stw	r16,128(sp)
 40008a4:	df002804 	addi	fp,sp,160
 40008a8:	2007883a 	mov	r3,r4
 40008ac:	2805883a 	mov	r2,r5
 40008b0:	e1bfee15 	stw	r6,-72(fp)
 40008b4:	e1ffef15 	stw	r7,-68(fp)
 40008b8:	e0ffec05 	stb	r3,-80(fp)
 40008bc:	e0bfed05 	stb	r2,-76(fp)
    // Find the length of the string in pixels
    alt_u32 str_char_len = 0;
 40008c0:	e03fd815 	stw	zero,-160(fp)
    for (alt_u32 i=0; str[i] != '\0'; i++) str_char_len++;
 40008c4:	e03fd915 	stw	zero,-156(fp)
 40008c8:	00000606 	br	40008e4 <draw_string+0x68>
 40008cc:	e0bfd817 	ldw	r2,-160(fp)
 40008d0:	10800044 	addi	r2,r2,1
 40008d4:	e0bfd815 	stw	r2,-160(fp)
 40008d8:	e0bfd917 	ldw	r2,-156(fp)
 40008dc:	10800044 	addi	r2,r2,1
 40008e0:	e0bfd915 	stw	r2,-156(fp)
 40008e4:	e0ffee17 	ldw	r3,-72(fp)
 40008e8:	e0bfd917 	ldw	r2,-156(fp)
 40008ec:	1885883a 	add	r2,r3,r2
 40008f0:	10800003 	ldbu	r2,0(r2)
 40008f4:	10803fcc 	andi	r2,r2,255
 40008f8:	1080201c 	xori	r2,r2,128
 40008fc:	10bfe004 	addi	r2,r2,-128
 4000900:	103ff21e 	bne	r2,zero,40008cc <__alt_data_end+0xfc0008cc>

    // Character-relevant data
    alt_u32 font_outers[str_char_len];
 4000904:	e0ffd817 	ldw	r3,-160(fp)
 4000908:	d805883a 	mov	r2,sp
 400090c:	100b883a 	mov	r5,r2
 4000910:	1805883a 	mov	r2,r3
 4000914:	10bfffc4 	addi	r2,r2,-1
 4000918:	e0bfe215 	stw	r2,-120(fp)
 400091c:	e0fff015 	stw	r3,-64(fp)
 4000920:	e03ff115 	stw	zero,-60(fp)
 4000924:	e13ff017 	ldw	r4,-64(fp)
 4000928:	2004d6fa 	srli	r2,r4,27
 400092c:	e13ff117 	ldw	r4,-60(fp)
 4000930:	2026917a 	slli	r19,r4,5
 4000934:	14e6b03a 	or	r19,r2,r19
 4000938:	e0bff017 	ldw	r2,-64(fp)
 400093c:	1024917a 	slli	r18,r2,5
 4000940:	e0fff215 	stw	r3,-56(fp)
 4000944:	e03ff315 	stw	zero,-52(fp)
 4000948:	e13ff217 	ldw	r4,-56(fp)
 400094c:	2004d6fa 	srli	r2,r4,27
 4000950:	e13ff317 	ldw	r4,-52(fp)
 4000954:	2022917a 	slli	r17,r4,5
 4000958:	1462b03a 	or	r17,r2,r17
 400095c:	e0bff217 	ldw	r2,-56(fp)
 4000960:	1020917a 	slli	r16,r2,5
 4000964:	18c5883a 	add	r2,r3,r3
 4000968:	1085883a 	add	r2,r2,r2
 400096c:	108000c4 	addi	r2,r2,3
 4000970:	108000c4 	addi	r2,r2,3
 4000974:	1004d0ba 	srli	r2,r2,2
 4000978:	1085883a 	add	r2,r2,r2
 400097c:	1085883a 	add	r2,r2,r2
 4000980:	d8b7c83a 	sub	sp,sp,r2
 4000984:	d805883a 	mov	r2,sp
 4000988:	108000c4 	addi	r2,r2,3
 400098c:	1004d0ba 	srli	r2,r2,2
 4000990:	1085883a 	add	r2,r2,r2
 4000994:	1085883a 	add	r2,r2,r2
 4000998:	e0bfe315 	stw	r2,-116(fp)
    alt_u8  font_inners[str_char_len];
 400099c:	e0bfd817 	ldw	r2,-160(fp)
 40009a0:	1007883a 	mov	r3,r2
 40009a4:	18ffffc4 	addi	r3,r3,-1
 40009a8:	e0ffe415 	stw	r3,-112(fp)
 40009ac:	e0bff415 	stw	r2,-48(fp)
 40009b0:	e03ff515 	stw	zero,-44(fp)
 40009b4:	e13ff417 	ldw	r4,-48(fp)
 40009b8:	2006d77a 	srli	r3,r4,29
 40009bc:	e13ff517 	ldw	r4,-44(fp)
 40009c0:	201e90fa 	slli	r15,r4,3
 40009c4:	1bdeb03a 	or	r15,r3,r15
 40009c8:	e0fff417 	ldw	r3,-48(fp)
 40009cc:	181c90fa 	slli	r14,r3,3
 40009d0:	e0bff615 	stw	r2,-40(fp)
 40009d4:	e03ff715 	stw	zero,-36(fp)
 40009d8:	e13ff617 	ldw	r4,-40(fp)
 40009dc:	2006d77a 	srli	r3,r4,29
 40009e0:	e13ff717 	ldw	r4,-36(fp)
 40009e4:	201a90fa 	slli	r13,r4,3
 40009e8:	1b5ab03a 	or	r13,r3,r13
 40009ec:	e0fff617 	ldw	r3,-40(fp)
 40009f0:	181890fa 	slli	r12,r3,3
 40009f4:	108000c4 	addi	r2,r2,3
 40009f8:	1004d0ba 	srli	r2,r2,2
 40009fc:	1085883a 	add	r2,r2,r2
 4000a00:	1085883a 	add	r2,r2,r2
 4000a04:	d8b7c83a 	sub	sp,sp,r2
 4000a08:	d805883a 	mov	r2,sp
 4000a0c:	1005883a 	mov	r2,r2
 4000a10:	e0bfe515 	stw	r2,-108(fp)

    // Get pixel boundaries for the characters
    alt_u32 str_pxl_len = 0;
 4000a14:	e03fda15 	stw	zero,-152(fp)
    alt_u32 pxl_boundaries[str_char_len];
 4000a18:	e0bfd817 	ldw	r2,-160(fp)
 4000a1c:	1007883a 	mov	r3,r2
 4000a20:	18ffffc4 	addi	r3,r3,-1
 4000a24:	e0ffe615 	stw	r3,-104(fp)
 4000a28:	102d883a 	mov	r22,r2
 4000a2c:	002f883a 	mov	r23,zero
 4000a30:	b006d6fa 	srli	r3,r22,27
 4000a34:	b816917a 	slli	r11,r23,5
 4000a38:	1ad6b03a 	or	r11,r3,r11
 4000a3c:	b014917a 	slli	r10,r22,5
 4000a40:	1029883a 	mov	r20,r2
 4000a44:	002b883a 	mov	r21,zero
 4000a48:	a006d6fa 	srli	r3,r20,27
 4000a4c:	a812917a 	slli	r9,r21,5
 4000a50:	1a52b03a 	or	r9,r3,r9
 4000a54:	a010917a 	slli	r8,r20,5
 4000a58:	1085883a 	add	r2,r2,r2
 4000a5c:	1085883a 	add	r2,r2,r2
 4000a60:	108000c4 	addi	r2,r2,3
 4000a64:	108000c4 	addi	r2,r2,3
 4000a68:	1004d0ba 	srli	r2,r2,2
 4000a6c:	1085883a 	add	r2,r2,r2
 4000a70:	1085883a 	add	r2,r2,r2
 4000a74:	d8b7c83a 	sub	sp,sp,r2
 4000a78:	d805883a 	mov	r2,sp
 4000a7c:	108000c4 	addi	r2,r2,3
 4000a80:	1004d0ba 	srli	r2,r2,2
 4000a84:	1085883a 	add	r2,r2,r2
 4000a88:	1085883a 	add	r2,r2,r2
 4000a8c:	e0bfe715 	stw	r2,-100(fp)
    for (alt_u32 i=0; str[i] != '\0'; i++) {
 4000a90:	e03fdb15 	stw	zero,-148(fp)
 4000a94:	00004006 	br	4000b98 <draw_string+0x31c>
        alt_u8 render_code = decode_ascii[str[i]];
 4000a98:	e0ffee17 	ldw	r3,-72(fp)
 4000a9c:	e0bfdb17 	ldw	r2,-148(fp)
 4000aa0:	1885883a 	add	r2,r3,r2
 4000aa4:	10800003 	ldbu	r2,0(r2)
 4000aa8:	10c03fcc 	andi	r3,r2,255
 4000aac:	18c0201c 	xori	r3,r3,128
 4000ab0:	18ffe004 	addi	r3,r3,-128
 4000ab4:	008100b4 	movhi	r2,1026
 4000ab8:	1086f704 	addi	r2,r2,7132
 4000abc:	10c5883a 	add	r2,r2,r3
 4000ac0:	10800003 	ldbu	r2,0(r2)
 4000ac4:	e0bfe805 	stb	r2,-96(fp)

        // Set pixel boundaries
        if(str[i] == ' ') str_pxl_len += font->space_pxls;
 4000ac8:	e0ffee17 	ldw	r3,-72(fp)
 4000acc:	e0bfdb17 	ldw	r2,-148(fp)
 4000ad0:	1885883a 	add	r2,r3,r2
 4000ad4:	10800003 	ldbu	r2,0(r2)
 4000ad8:	10803fcc 	andi	r2,r2,255
 4000adc:	1080201c 	xori	r2,r2,128
 4000ae0:	10bfe004 	addi	r2,r2,-128
 4000ae4:	10800818 	cmpnei	r2,r2,32
 4000ae8:	1000071e 	bne	r2,zero,4000b08 <draw_string+0x28c>
 4000aec:	e0bfef17 	ldw	r2,-68(fp)
 4000af0:	10800043 	ldbu	r2,1(r2)
 4000af4:	10803fcc 	andi	r2,r2,255
 4000af8:	e0ffda17 	ldw	r3,-152(fp)
 4000afc:	1885883a 	add	r2,r3,r2
 4000b00:	e0bfda15 	stw	r2,-152(fp)
 4000b04:	00000906 	br	4000b2c <draw_string+0x2b0>
        else str_pxl_len += font->widths[render_code];
 4000b08:	e0bfef17 	ldw	r2,-68(fp)
 4000b0c:	10c00217 	ldw	r3,8(r2)
 4000b10:	e0bfe803 	ldbu	r2,-96(fp)
 4000b14:	1885883a 	add	r2,r3,r2
 4000b18:	10800003 	ldbu	r2,0(r2)
 4000b1c:	10803fcc 	andi	r2,r2,255
 4000b20:	e0ffda17 	ldw	r3,-152(fp)
 4000b24:	1885883a 	add	r2,r3,r2
 4000b28:	e0bfda15 	stw	r2,-152(fp)
        pxl_boundaries[i] = str_pxl_len;
 4000b2c:	e0ffe717 	ldw	r3,-100(fp)
 4000b30:	e0bfdb17 	ldw	r2,-148(fp)
 4000b34:	1085883a 	add	r2,r2,r2
 4000b38:	1085883a 	add	r2,r2,r2
 4000b3c:	1885883a 	add	r2,r3,r2
 4000b40:	e0ffda17 	ldw	r3,-152(fp)
 4000b44:	10c00015 	stw	r3,0(r2)

        // Set font pointers and metadata
        font_outers[i]    = font->indices[render_code];
 4000b48:	e0bfef17 	ldw	r2,-68(fp)
 4000b4c:	10c00317 	ldw	r3,12(r2)
 4000b50:	e0bfe803 	ldbu	r2,-96(fp)
 4000b54:	1085883a 	add	r2,r2,r2
 4000b58:	1085883a 	add	r2,r2,r2
 4000b5c:	1885883a 	add	r2,r3,r2
 4000b60:	10c00017 	ldw	r3,0(r2)
 4000b64:	e13fe317 	ldw	r4,-116(fp)
 4000b68:	e0bfdb17 	ldw	r2,-148(fp)
 4000b6c:	1085883a 	add	r2,r2,r2
 4000b70:	1085883a 	add	r2,r2,r2
 4000b74:	2085883a 	add	r2,r4,r2
 4000b78:	10c00015 	stw	r3,0(r2)
        font_inners[i]    = 0;
 4000b7c:	e0ffe517 	ldw	r3,-108(fp)
 4000b80:	e0bfdb17 	ldw	r2,-148(fp)
 4000b84:	1885883a 	add	r2,r3,r2
 4000b88:	10000005 	stb	zero,0(r2)
    alt_u8  font_inners[str_char_len];

    // Get pixel boundaries for the characters
    alt_u32 str_pxl_len = 0;
    alt_u32 pxl_boundaries[str_char_len];
    for (alt_u32 i=0; str[i] != '\0'; i++) {
 4000b8c:	e0bfdb17 	ldw	r2,-148(fp)
 4000b90:	10800044 	addi	r2,r2,1
 4000b94:	e0bfdb15 	stw	r2,-148(fp)
 4000b98:	e0ffee17 	ldw	r3,-72(fp)
 4000b9c:	e0bfdb17 	ldw	r2,-148(fp)
 4000ba0:	1885883a 	add	r2,r3,r2
 4000ba4:	10800003 	ldbu	r2,0(r2)
 4000ba8:	10803fcc 	andi	r2,r2,255
 4000bac:	1080201c 	xori	r2,r2,128
 4000bb0:	10bfe004 	addi	r2,r2,-128
 4000bb4:	103fb81e 	bne	r2,zero,4000a98 <__alt_data_end+0xfc000a98>
        font_outers[i]    = font->indices[render_code];
        font_inners[i]    = 0;
    }

    // Font metadata
    alt_u32 char_idx    = 0;
 4000bb8:	e03fdc15 	stw	zero,-144(fp)
    alt_u8  char_height = font->height;
 4000bbc:	e0bfef17 	ldw	r2,-68(fp)
 4000bc0:	10800003 	ldbu	r2,0(r2)
 4000bc4:	e0bfe845 	stb	r2,-95(fp)

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
 4000bc8:	e0ffec03 	ldbu	r3,-80(fp)
 4000bcc:	00bffc04 	movi	r2,-16
 4000bd0:	1884703a 	and	r2,r3,r2
 4000bd4:	e0bfe915 	stw	r2,-92(fp)
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 4000bd8:	e0bfed03 	ldbu	r2,-76(fp)
 4000bdc:	e0bfdd15 	stw	r2,-140(fp)
 4000be0:	00009406 	br	4000e34 <draw_string+0x5b8>
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+str_pxl_len); x_wb+=16) {
 4000be4:	e0bfe917 	ldw	r2,-92(fp)
 4000be8:	e0bfde15 	stw	r2,-136(fp)
 4000bec:	00008806 	br	4000e10 <draw_string+0x594>

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
 4000bf0:	e0bfdd17 	ldw	r2,-140(fp)
 4000bf4:	e0bfea15 	stw	r2,-88(fp)
            alt_u32 word = 0;
 4000bf8:	e03fdf15 	stw	zero,-132(fp)
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 4000bfc:	e0bfde17 	ldw	r2,-136(fp)
 4000c00:	e0bfe015 	stw	r2,-128(fp)
 4000c04:	00007b06 	br	4000df4 <draw_string+0x578>
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 4000c08:	e0bfec03 	ldbu	r2,-80(fp)
 4000c0c:	e0ffe017 	ldw	r3,-128(fp)
 4000c10:	18807236 	bltu	r3,r2,4000ddc <draw_string+0x560>

                // Check if we are out of the width of the string
                if (wx-x >= str_pxl_len) continue;
 4000c14:	e0bfec03 	ldbu	r2,-80(fp)
 4000c18:	e0ffe017 	ldw	r3,-128(fp)
 4000c1c:	1887c83a 	sub	r3,r3,r2
 4000c20:	e0bfda17 	ldw	r2,-152(fp)
 4000c24:	18806f2e 	bgeu	r3,r2,4000de4 <draw_string+0x568>

                // Figure out which character we are drawing
                if (wx-x >= pxl_boundaries[char_idx]) char_idx++;
 4000c28:	e0bfec03 	ldbu	r2,-80(fp)
 4000c2c:	e0ffe017 	ldw	r3,-128(fp)
 4000c30:	1887c83a 	sub	r3,r3,r2
 4000c34:	e13fe717 	ldw	r4,-100(fp)
 4000c38:	e0bfdc17 	ldw	r2,-144(fp)
 4000c3c:	1085883a 	add	r2,r2,r2
 4000c40:	1085883a 	add	r2,r2,r2
 4000c44:	2085883a 	add	r2,r4,r2
 4000c48:	10800017 	ldw	r2,0(r2)
 4000c4c:	18800336 	bltu	r3,r2,4000c5c <draw_string+0x3e0>
 4000c50:	e0bfdc17 	ldw	r2,-144(fp)
 4000c54:	10800044 	addi	r2,r2,1
 4000c58:	e0bfdc15 	stw	r2,-144(fp)

                // Get the relevant character from the font data
                alt_u8 font_data = font->data[font_outers[char_idx]];
 4000c5c:	e0bfef17 	ldw	r2,-68(fp)
 4000c60:	10c00117 	ldw	r3,4(r2)
 4000c64:	e13fe317 	ldw	r4,-116(fp)
 4000c68:	e0bfdc17 	ldw	r2,-144(fp)
 4000c6c:	1085883a 	add	r2,r2,r2
 4000c70:	1085883a 	add	r2,r2,r2
 4000c74:	2085883a 	add	r2,r4,r2
 4000c78:	10800017 	ldw	r2,0(r2)
 4000c7c:	1885883a 	add	r2,r3,r2
 4000c80:	10800003 	ldbu	r2,0(r2)
 4000c84:	e0bfeb05 	stb	r2,-84(fp)

                // Extract the relevant pixel data
                alt_u32 pixel_data = (font_data >> ((3-font_inners[char_idx])*2)) % 4;
 4000c88:	e0ffeb03 	ldbu	r3,-84(fp)
 4000c8c:	e13fe517 	ldw	r4,-108(fp)
 4000c90:	e0bfdc17 	ldw	r2,-144(fp)
 4000c94:	2085883a 	add	r2,r4,r2
 4000c98:	10800003 	ldbu	r2,0(r2)
 4000c9c:	10803fcc 	andi	r2,r2,255
 4000ca0:	010000c4 	movi	r4,3
 4000ca4:	2085c83a 	sub	r2,r4,r2
 4000ca8:	1085883a 	add	r2,r2,r2
 4000cac:	1887d83a 	sra	r3,r3,r2
 4000cb0:	00a00034 	movhi	r2,32768
 4000cb4:	108000c4 	addi	r2,r2,3
 4000cb8:	1884703a 	and	r2,r3,r2
 4000cbc:	1000040e 	bge	r2,zero,4000cd0 <draw_string+0x454>
 4000cc0:	10bfffc4 	addi	r2,r2,-1
 4000cc4:	00ffff04 	movi	r3,-4
 4000cc8:	10c4b03a 	or	r2,r2,r3
 4000ccc:	10800044 	addi	r2,r2,1
 4000cd0:	e0bfe115 	stw	r2,-124(fp)
                if (str[char_idx] == ' ') pixel_data = 0;
 4000cd4:	e0ffee17 	ldw	r3,-72(fp)
 4000cd8:	e0bfdc17 	ldw	r2,-144(fp)
 4000cdc:	1885883a 	add	r2,r3,r2
 4000ce0:	10800003 	ldbu	r2,0(r2)
 4000ce4:	10803fcc 	andi	r2,r2,255
 4000ce8:	1080201c 	xori	r2,r2,128
 4000cec:	10bfe004 	addi	r2,r2,-128
 4000cf0:	10800818 	cmpnei	r2,r2,32
 4000cf4:	1000011e 	bne	r2,zero,4000cfc <draw_string+0x480>
 4000cf8:	e03fe115 	stw	zero,-124(fp)

                // Write the pixel data to the word
                word += pixel_data << (15-(wx%16))*2;
 4000cfc:	e0bfe017 	ldw	r2,-128(fp)
 4000d00:	0084303a 	nor	r2,zero,r2
 4000d04:	108003cc 	andi	r2,r2,15
 4000d08:	1085883a 	add	r2,r2,r2
 4000d0c:	1007883a 	mov	r3,r2
 4000d10:	e0bfe117 	ldw	r2,-124(fp)
 4000d14:	10c4983a 	sll	r2,r2,r3
 4000d18:	e0ffdf17 	ldw	r3,-132(fp)
 4000d1c:	1885883a 	add	r2,r3,r2
 4000d20:	e0bfdf15 	stw	r2,-132(fp)

                // Increment the pixel counter for the font data
                if (++font_inners[char_idx] == 4){
 4000d24:	e0ffe517 	ldw	r3,-108(fp)
 4000d28:	e0bfdc17 	ldw	r2,-144(fp)
 4000d2c:	1885883a 	add	r2,r3,r2
 4000d30:	10800003 	ldbu	r2,0(r2)
 4000d34:	10800044 	addi	r2,r2,1
 4000d38:	1009883a 	mov	r4,r2
 4000d3c:	e0ffe517 	ldw	r3,-108(fp)
 4000d40:	e0bfdc17 	ldw	r2,-144(fp)
 4000d44:	1885883a 	add	r2,r3,r2
 4000d48:	11000005 	stb	r4,0(r2)
 4000d4c:	e0ffe517 	ldw	r3,-108(fp)
 4000d50:	e0bfdc17 	ldw	r2,-144(fp)
 4000d54:	1885883a 	add	r2,r3,r2
 4000d58:	10800003 	ldbu	r2,0(r2)
 4000d5c:	10803fcc 	andi	r2,r2,255
 4000d60:	10800118 	cmpnei	r2,r2,4
 4000d64:	1000111e 	bne	r2,zero,4000dac <draw_string+0x530>
                    font_inners[char_idx] = 0;
 4000d68:	e0ffe517 	ldw	r3,-108(fp)
 4000d6c:	e0bfdc17 	ldw	r2,-144(fp)
 4000d70:	1885883a 	add	r2,r3,r2
 4000d74:	10000005 	stb	zero,0(r2)
                    font_outers[char_idx]++;
 4000d78:	e0ffe317 	ldw	r3,-116(fp)
 4000d7c:	e0bfdc17 	ldw	r2,-144(fp)
 4000d80:	1085883a 	add	r2,r2,r2
 4000d84:	1085883a 	add	r2,r2,r2
 4000d88:	1885883a 	add	r2,r3,r2
 4000d8c:	10800017 	ldw	r2,0(r2)
 4000d90:	10c00044 	addi	r3,r2,1
 4000d94:	e13fe317 	ldw	r4,-116(fp)
 4000d98:	e0bfdc17 	ldw	r2,-144(fp)
 4000d9c:	1085883a 	add	r2,r2,r2
 4000da0:	1085883a 	add	r2,r2,r2
 4000da4:	2085883a 	add	r2,r4,r2
 4000da8:	10c00015 	stw	r3,0(r2)
                }

            // Write the word to VRAM
            VRAM[(x_wb/16) + (y_wb*40)] = word;
 4000dac:	d0e00017 	ldw	r3,-32768(gp)
 4000db0:	e0bfde17 	ldw	r2,-136(fp)
 4000db4:	1008d13a 	srli	r4,r2,4
 4000db8:	e0bfdd17 	ldw	r2,-140(fp)
 4000dbc:	10800a24 	muli	r2,r2,40
 4000dc0:	2085883a 	add	r2,r4,r2
 4000dc4:	1085883a 	add	r2,r2,r2
 4000dc8:	1085883a 	add	r2,r2,r2
 4000dcc:	1885883a 	add	r2,r3,r2
 4000dd0:	e0ffdf17 	ldw	r3,-132(fp)
 4000dd4:	10c00015 	stw	r3,0(r2)
 4000dd8:	00000306 	br	4000de8 <draw_string+0x56c>
            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 4000ddc:	0001883a 	nop
 4000de0:	00000106 	br	4000de8 <draw_string+0x56c>

                // Check if we are out of the width of the string
                if (wx-x >= str_pxl_len) continue;
 4000de4:	0001883a 	nop
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+str_pxl_len); x_wb+=16) {

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 4000de8:	e0bfe017 	ldw	r2,-128(fp)
 4000dec:	10800044 	addi	r2,r2,1
 4000df0:	e0bfe015 	stw	r2,-128(fp)
 4000df4:	e0bfde17 	ldw	r2,-136(fp)
 4000df8:	10800404 	addi	r2,r2,16
 4000dfc:	e0ffe017 	ldw	r3,-128(fp)
 4000e00:	18bf8136 	bltu	r3,r2,4000c08 <__alt_data_end+0xfc000c08>

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+str_pxl_len); x_wb+=16) {
 4000e04:	e0bfde17 	ldw	r2,-136(fp)
 4000e08:	10800404 	addi	r2,r2,16
 4000e0c:	e0bfde15 	stw	r2,-136(fp)
 4000e10:	e0ffec03 	ldbu	r3,-80(fp)
 4000e14:	e0bfda17 	ldw	r2,-152(fp)
 4000e18:	1885883a 	add	r2,r3,r2
 4000e1c:	e0ffde17 	ldw	r3,-136(fp)
 4000e20:	18bf7336 	bltu	r3,r2,4000bf0 <__alt_data_end+0xfc000bf0>
            VRAM[(x_wb/16) + (y_wb*40)] = word;

            }
        }
        // Reset the character index for the next row of pixels
        char_idx = 0;
 4000e24:	e03fdc15 	stw	zero,-144(fp)
    alt_u8  char_height = font->height;

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 4000e28:	e0bfdd17 	ldw	r2,-140(fp)
 4000e2c:	10800044 	addi	r2,r2,1
 4000e30:	e0bfdd15 	stw	r2,-140(fp)
 4000e34:	e0ffed03 	ldbu	r3,-76(fp)
 4000e38:	e0bfe843 	ldbu	r2,-95(fp)
 4000e3c:	1885883a 	add	r2,r3,r2
 4000e40:	1007883a 	mov	r3,r2
 4000e44:	e0bfdd17 	ldw	r2,-140(fp)
 4000e48:	10ff6636 	bltu	r2,r3,4000be4 <__alt_data_end+0xfc000be4>
 4000e4c:	2837883a 	mov	sp,r5
            }
        }
        // Reset the character index for the next row of pixels
        char_idx = 0;
    }
}
 4000e50:	0001883a 	nop
 4000e54:	e6fff804 	addi	sp,fp,-32
 4000e58:	df000817 	ldw	fp,32(sp)
 4000e5c:	ddc00717 	ldw	r23,28(sp)
 4000e60:	dd800617 	ldw	r22,24(sp)
 4000e64:	dd400517 	ldw	r21,20(sp)
 4000e68:	dd000417 	ldw	r20,16(sp)
 4000e6c:	dcc00317 	ldw	r19,12(sp)
 4000e70:	dc800217 	ldw	r18,8(sp)
 4000e74:	dc400117 	ldw	r17,4(sp)
 4000e78:	dc000017 	ldw	r16,0(sp)
 4000e7c:	dec00904 	addi	sp,sp,36
 4000e80:	f800283a 	ret

04000e84 <draw_sample>:

void draw_sample() {
 4000e84:	defb8004 	addi	sp,sp,-4608
 4000e88:	dfc47f15 	stw	ra,4604(sp)
 4000e8c:	df047e15 	stw	fp,4600(sp)
 4000e90:	df047e04 	addi	fp,sp,4600
    // Draw the server name
    draw_string(SIDEBAR_X_MARGIN, SERVER_Y, "ECE 385", &fonts[SERVER_FONT]);
 4000e94:	01c100b4 	movhi	r7,1026
 4000e98:	39c6e304 	addi	r7,r7,7052
 4000e9c:	018100b4 	movhi	r6,1026
 4000ea0:	31aaf704 	addi	r6,r6,-21540
 4000ea4:	014008c4 	movi	r5,35
 4000ea8:	01000144 	movi	r4,5
 4000eac:	400087c0 	call	400087c <draw_string>

    // Draw the channel names
    const char channels[8][255] = {
 4000eb0:	008100b4 	movhi	r2,1026
 4000eb4:	10aafb44 	addi	r2,r2,-21523
 4000eb8:	e0fb8444 	addi	r3,fp,-4591
 4000ebc:	1009883a 	mov	r4,r2
 4000ec0:	0081fe04 	movi	r2,2040
 4000ec4:	100d883a 	mov	r6,r2
 4000ec8:	200b883a 	mov	r5,r4
 4000ecc:	1809883a 	mov	r4,r3
 4000ed0:	400bbd00 	call	400bbd0 <memcpy>
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
 4000ed4:	e03b8205 	stb	zero,-4600(fp)
 4000ed8:	00001706 	br	4000f38 <draw_sample+0xb4>
        draw_string(
            SIDEBAR_X_MARGIN,
            (i*fonts[CHANNEL_FONT].height) + (i*CHANNEL_Y_MARGIN*2) + CHANNEL_Y_MARGIN + CHANNEL_Y,
 4000edc:	008100b4 	movhi	r2,1026
 4000ee0:	1086e304 	addi	r2,r2,7052
 4000ee4:	10800403 	ldbu	r2,16(r2)
 4000ee8:	10803fcc 	andi	r2,r2,255
 4000eec:	10800084 	addi	r2,r2,2
    const char channels[8][255] = {
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
        draw_string(
 4000ef0:	1007883a 	mov	r3,r2
 4000ef4:	e0bb8203 	ldbu	r2,-4600(fp)
 4000ef8:	1885383a 	mul	r2,r3,r2
 4000efc:	10800d44 	addi	r2,r2,53
 4000f00:	11003fcc 	andi	r4,r2,255
            SIDEBAR_X_MARGIN,
            (i*fonts[CHANNEL_FONT].height) + (i*CHANNEL_Y_MARGIN*2) + CHANNEL_Y_MARGIN + CHANNEL_Y,
            channels[i],
 4000f04:	e0bb8203 	ldbu	r2,-4600(fp)
 4000f08:	e0fb8444 	addi	r3,fp,-4591
 4000f0c:	10803fe4 	muli	r2,r2,255
 4000f10:	1885883a 	add	r2,r3,r2
    const char channels[8][255] = {
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
        draw_string(
 4000f14:	01c100b4 	movhi	r7,1026
 4000f18:	39c6e704 	addi	r7,r7,7068
 4000f1c:	100d883a 	mov	r6,r2
 4000f20:	200b883a 	mov	r5,r4
 4000f24:	01000144 	movi	r4,5
 4000f28:	400087c0 	call	400087c <draw_string>
    // Draw the channel names
    const char channels[8][255] = {
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
 4000f2c:	e0bb8203 	ldbu	r2,-4600(fp)
 4000f30:	10800044 	addi	r2,r2,1
 4000f34:	e0bb8205 	stb	r2,-4600(fp)
 4000f38:	e0bb8203 	ldbu	r2,-4600(fp)
 4000f3c:	10800230 	cmpltui	r2,r2,8
 4000f40:	103fe61e 	bne	r2,zero,4000edc <__alt_data_end+0xfc000edc>
            &fonts[CHANNEL_FONT]
        );
    }

    // Draw the title for the message board
    draw_string(MESSAGE_X_MARGIN, TITLE_Y, "#general", &fonts[TITLE_FONT]);
 4000f44:	01c100b4 	movhi	r7,1026
 4000f48:	39c6eb04 	addi	r7,r7,7084
 4000f4c:	018100b4 	movhi	r6,1026
 4000f50:	31aaf904 	addi	r6,r6,-21532
 4000f54:	01400144 	movi	r5,5
 4000f58:	01002504 	movi	r4,148
 4000f5c:	400087c0 	call	400087c <draw_string>

    // Usernames, messages
    const char unames[4][255] = {
 4000f60:	008100b4 	movhi	r2,1026
 4000f64:	10acf944 	addi	r2,r2,-19483
 4000f68:	e0fd8244 	addi	r3,fp,-2551
 4000f6c:	1009883a 	mov	r4,r2
 4000f70:	0080ff04 	movi	r2,1020
 4000f74:	100d883a 	mov	r6,r2
 4000f78:	200b883a 	mov	r5,r4
 4000f7c:	1809883a 	mov	r4,r3
 4000f80:	400bbd00 	call	400bbd0 <memcpy>
        "partymarty", "Captain_Sisko", "txwong2", "martinm6"
    };
    const char messages[6][255] = {
 4000f84:	008100b4 	movhi	r2,1026
 4000f88:	10adf844 	addi	r2,r2,-18463
 4000f8c:	e0fe8144 	addi	r3,fp,-1531
 4000f90:	1009883a 	mov	r4,r2
 4000f94:	00817e84 	movi	r2,1530
 4000f98:	100d883a 	mov	r6,r2
 4000f9c:	200b883a 	mov	r5,r4
 4000fa0:	1809883a 	mov	r4,r3
 4000fa4:	400bbd00 	call	400bbd0 <memcpy>
        "Why do so many people in this department just not shower?",
        "Who cares about the weather being nice? I'm inside all day anyway.",
        "Lol this is why I'm not an EE major.",
        "CS professors don't have the ability to break your soul like ECE professors"
    };
    alt_u32 y = MESSAGE_Y;
 4000fa8:	00800884 	movi	r2,34
 4000fac:	e0bb8315 	stw	r2,-4596(fp)
    for(alt_u8 i=0; i<6; i++) {
 4000fb0:	e03b8405 	stb	zero,-4592(fp)
 4000fb4:	00002e06 	br	4001070 <draw_sample+0x1ec>
        // Draw the uname
        draw_string(
 4000fb8:	e0bb8317 	ldw	r2,-4596(fp)
 4000fbc:	10800044 	addi	r2,r2,1
 4000fc0:	11003fcc 	andi	r4,r2,255
            MESSAGE_X_MARGIN,
            y + UNAME_Y_MARGIN,
            unames[i%4],
 4000fc4:	e0bb8403 	ldbu	r2,-4592(fp)
 4000fc8:	108000cc 	andi	r2,r2,3
 4000fcc:	e0fd8244 	addi	r3,fp,-2551
 4000fd0:	10803fe4 	muli	r2,r2,255
 4000fd4:	1885883a 	add	r2,r3,r2
        "CS professors don't have the ability to break your soul like ECE professors"
    };
    alt_u32 y = MESSAGE_Y;
    for(alt_u8 i=0; i<6; i++) {
        // Draw the uname
        draw_string(
 4000fd8:	01c100b4 	movhi	r7,1026
 4000fdc:	39c6ef04 	addi	r7,r7,7100
 4000fe0:	100d883a 	mov	r6,r2
 4000fe4:	200b883a 	mov	r5,r4
 4000fe8:	01002504 	movi	r4,148
 4000fec:	400087c0 	call	400087c <draw_string>
            MESSAGE_X_MARGIN,
            y + UNAME_Y_MARGIN,
            unames[i%4],
            &fonts[UNAME_FONT]
        );
        y += fonts[UNAME_FONT].height + 2*UNAME_Y_MARGIN;
 4000ff0:	008100b4 	movhi	r2,1026
 4000ff4:	1086e304 	addi	r2,r2,7052
 4000ff8:	10800c03 	ldbu	r2,48(r2)
 4000ffc:	10c03fcc 	andi	r3,r2,255
 4001000:	e0bb8317 	ldw	r2,-4596(fp)
 4001004:	1885883a 	add	r2,r3,r2
 4001008:	10800084 	addi	r2,r2,2
 400100c:	e0bb8315 	stw	r2,-4596(fp)

        // Draw the message
        draw_string(
 4001010:	e0bb8317 	ldw	r2,-4596(fp)
 4001014:	10800044 	addi	r2,r2,1
 4001018:	11003fcc 	andi	r4,r2,255
            MESSAGE_X_MARGIN,
            y + MESSAGE_Y_MARGIN,
            messages[i],
 400101c:	e0bb8403 	ldbu	r2,-4592(fp)
 4001020:	e0fe8144 	addi	r3,fp,-1531
 4001024:	10803fe4 	muli	r2,r2,255
 4001028:	1885883a 	add	r2,r3,r2
            &fonts[UNAME_FONT]
        );
        y += fonts[UNAME_FONT].height + 2*UNAME_Y_MARGIN;

        // Draw the message
        draw_string(
 400102c:	01c100b4 	movhi	r7,1026
 4001030:	39c6f304 	addi	r7,r7,7116
 4001034:	100d883a 	mov	r6,r2
 4001038:	200b883a 	mov	r5,r4
 400103c:	01002504 	movi	r4,148
 4001040:	400087c0 	call	400087c <draw_string>
            MESSAGE_X_MARGIN,
            y + MESSAGE_Y_MARGIN,
            messages[i],
            &fonts[MESSAGE_FONT]
        );
        y += fonts[MESSAGE_FONT].height + 2*MESSAGE_Y_MARGIN;
 4001044:	008100b4 	movhi	r2,1026
 4001048:	1086e304 	addi	r2,r2,7052
 400104c:	10801003 	ldbu	r2,64(r2)
 4001050:	10c03fcc 	andi	r3,r2,255
 4001054:	e0bb8317 	ldw	r2,-4596(fp)
 4001058:	1885883a 	add	r2,r3,r2
 400105c:	10800084 	addi	r2,r2,2
 4001060:	e0bb8315 	stw	r2,-4596(fp)
        "Who cares about the weather being nice? I'm inside all day anyway.",
        "Lol this is why I'm not an EE major.",
        "CS professors don't have the ability to break your soul like ECE professors"
    };
    alt_u32 y = MESSAGE_Y;
    for(alt_u8 i=0; i<6; i++) {
 4001064:	e0bb8403 	ldbu	r2,-4592(fp)
 4001068:	10800044 	addi	r2,r2,1
 400106c:	e0bb8405 	stb	r2,-4592(fp)
 4001070:	e0bb8403 	ldbu	r2,-4592(fp)
 4001074:	108001b0 	cmpltui	r2,r2,6
 4001078:	103fcf1e 	bne	r2,zero,4000fb8 <__alt_data_end+0xfc000fb8>
            messages[i],
            &fonts[MESSAGE_FONT]
        );
        y += fonts[MESSAGE_FONT].height + 2*MESSAGE_Y_MARGIN;
    }
}
 400107c:	0001883a 	nop
 4001080:	e037883a 	mov	sp,fp
 4001084:	dfc00117 	ldw	ra,4(sp)
 4001088:	df000017 	ldw	fp,0(sp)
 400108c:	dec00204 	addi	sp,sp,8
 4001090:	f800283a 	ret

04001094 <isDiscord>:

int isDiscord(const char* start) {
 4001094:	defffc04 	addi	sp,sp,-16
 4001098:	df000315 	stw	fp,12(sp)
 400109c:	df000304 	addi	fp,sp,12
 40010a0:	e13fff15 	stw	r4,-4(fp)
	const char* comp = "discord-message:";
 40010a4:	008100b4 	movhi	r2,1026
 40010a8:	10af7704 	addi	r2,r2,-16932
 40010ac:	e0bffe15 	stw	r2,-8(fp)
	for (int i = 0; i < 16; ++i) {
 40010b0:	e03ffd15 	stw	zero,-12(fp)
 40010b4:	00001406 	br	4001108 <isDiscord+0x74>
		if(comp[i] != start[i]) return 0;
 40010b8:	e0bffd17 	ldw	r2,-12(fp)
 40010bc:	e0fffe17 	ldw	r3,-8(fp)
 40010c0:	1885883a 	add	r2,r3,r2
 40010c4:	11000003 	ldbu	r4,0(r2)
 40010c8:	e0bffd17 	ldw	r2,-12(fp)
 40010cc:	e0ffff17 	ldw	r3,-4(fp)
 40010d0:	1885883a 	add	r2,r3,r2
 40010d4:	10800003 	ldbu	r2,0(r2)
 40010d8:	20c03fcc 	andi	r3,r4,255
 40010dc:	18c0201c 	xori	r3,r3,128
 40010e0:	18ffe004 	addi	r3,r3,-128
 40010e4:	10803fcc 	andi	r2,r2,255
 40010e8:	1080201c 	xori	r2,r2,128
 40010ec:	10bfe004 	addi	r2,r2,-128
 40010f0:	18800226 	beq	r3,r2,40010fc <isDiscord+0x68>
 40010f4:	0005883a 	mov	r2,zero
 40010f8:	00000706 	br	4001118 <isDiscord+0x84>
    }
}

int isDiscord(const char* start) {
	const char* comp = "discord-message:";
	for (int i = 0; i < 16; ++i) {
 40010fc:	e0bffd17 	ldw	r2,-12(fp)
 4001100:	10800044 	addi	r2,r2,1
 4001104:	e0bffd15 	stw	r2,-12(fp)
 4001108:	e0bffd17 	ldw	r2,-12(fp)
 400110c:	10800410 	cmplti	r2,r2,16
 4001110:	103fe91e 	bne	r2,zero,40010b8 <__alt_data_end+0xfc0010b8>
		if(comp[i] != start[i]) return 0;
	}
	return 1;
 4001114:	00800044 	movi	r2,1
}
 4001118:	e037883a 	mov	sp,fp
 400111c:	df000017 	ldw	fp,0(sp)
 4001120:	dec00104 	addi	sp,sp,4
 4001124:	f800283a 	ret

04001128 <_ZN9DhcpClass13beginWithDHCPEPhmm>:
#include "Ethernet.h"
#include "utility/w5100.h"
#include "utility/IPAddress.h"

int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
 4001128:	defffa04 	addi	sp,sp,-24
 400112c:	dfc00515 	stw	ra,20(sp)
 4001130:	df000415 	stw	fp,16(sp)
 4001134:	df000404 	addi	fp,sp,16
 4001138:	e13ffc15 	stw	r4,-16(fp)
 400113c:	e17ffd15 	stw	r5,-12(fp)
 4001140:	e1bffe15 	stw	r6,-8(fp)
 4001144:	e1ffff15 	stw	r7,-4(fp)
	_dhcpLeaseTime=0;
 4001148:	e0bffc17 	ldw	r2,-16(fp)
 400114c:	10000915 	stw	zero,36(r2)
	_dhcpT1=0;
 4001150:	e0bffc17 	ldw	r2,-16(fp)
 4001154:	10000a15 	stw	zero,40(r2)
	_dhcpT2=0;
 4001158:	e0bffc17 	ldw	r2,-16(fp)
 400115c:	10000b15 	stw	zero,44(r2)
	_timeout = timeout;
 4001160:	e0bffc17 	ldw	r2,-16(fp)
 4001164:	e0fffe17 	ldw	r3,-8(fp)
 4001168:	10c00e15 	stw	r3,56(r2)
	_responseTimeout = responseTimeout;
 400116c:	e0bffc17 	ldw	r2,-16(fp)
 4001170:	e0ffff17 	ldw	r3,-4(fp)
 4001174:	10c00f15 	stw	r3,60(r2)

	// zero out _dhcpMacAddr
	memset(_dhcpMacAddr, 0, 6);
 4001178:	e0bffc17 	ldw	r2,-16(fp)
 400117c:	10800204 	addi	r2,r2,8
 4001180:	01800184 	movi	r6,6
 4001184:	000b883a 	mov	r5,zero
 4001188:	1009883a 	mov	r4,r2
 400118c:	400bd180 	call	400bd18 <memset>
	reset_DHCP_lease();
 4001190:	e13ffc17 	ldw	r4,-16(fp)
 4001194:	40011d40 	call	40011d4 <_ZN9DhcpClass16reset_DHCP_leaseEv>

	memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
 4001198:	e0bffc17 	ldw	r2,-16(fp)
 400119c:	10800204 	addi	r2,r2,8
 40011a0:	01800184 	movi	r6,6
 40011a4:	e17ffd17 	ldw	r5,-12(fp)
 40011a8:	1009883a 	mov	r4,r2
 40011ac:	400bbd00 	call	400bbd0 <memcpy>
	_dhcp_state = STATE_DHCP_START;
 40011b0:	e0bffc17 	ldw	r2,-16(fp)
 40011b4:	10001105 	stb	zero,68(r2)
	return request_DHCP_lease();
 40011b8:	e13ffc17 	ldw	r4,-16(fp)
 40011bc:	40012180 	call	4001218 <_ZN9DhcpClass18request_DHCP_leaseEv>
}
 40011c0:	e037883a 	mov	sp,fp
 40011c4:	dfc00117 	ldw	ra,4(sp)
 40011c8:	df000017 	ldw	fp,0(sp)
 40011cc:	dec00204 	addi	sp,sp,8
 40011d0:	f800283a 	ret

040011d4 <_ZN9DhcpClass16reset_DHCP_leaseEv>:

void DhcpClass::reset_DHCP_lease()
{
 40011d4:	defffd04 	addi	sp,sp,-12
 40011d8:	dfc00215 	stw	ra,8(sp)
 40011dc:	df000115 	stw	fp,4(sp)
 40011e0:	df000104 	addi	fp,sp,4
 40011e4:	e13fff15 	stw	r4,-4(fp)
	// zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
	memset(_dhcpLocalIp, 0, 20);
 40011e8:	e0bfff17 	ldw	r2,-4(fp)
 40011ec:	10800384 	addi	r2,r2,14
 40011f0:	01800504 	movi	r6,20
 40011f4:	000b883a 	mov	r5,zero
 40011f8:	1009883a 	mov	r4,r2
 40011fc:	400bd180 	call	400bd18 <memset>
}
 4001200:	0001883a 	nop
 4001204:	e037883a 	mov	sp,fp
 4001208:	dfc00117 	ldw	ra,4(sp)
 400120c:	df000017 	ldw	fp,0(sp)
 4001210:	dec00204 	addi	sp,sp,8
 4001214:	f800283a 	ret

04001218 <_ZN9DhcpClass18request_DHCP_leaseEv>:

	//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease()
{
 4001218:	defff804 	addi	sp,sp,-32
 400121c:	dfc00715 	stw	ra,28(sp)
 4001220:	df000615 	stw	fp,24(sp)
 4001224:	df000604 	addi	fp,sp,24
 4001228:	e13fff15 	stw	r4,-4(fp)
	uint8_t messageType = 0;
 400122c:	e03ffa05 	stb	zero,-24(fp)

	// Pick an initial transaction ID
	//_dhcpTransactionId = random(1UL, 2000UL);
	_dhcpTransactionId = 1500UL;
 4001230:	e0bfff17 	ldw	r2,-4(fp)
 4001234:	00c17704 	movi	r3,1500
 4001238:	10c00115 	stw	r3,4(r2)
	_dhcpInitialTransactionId = _dhcpTransactionId;
 400123c:	e0bfff17 	ldw	r2,-4(fp)
 4001240:	10c00117 	ldw	r3,4(r2)
 4001244:	e0bfff17 	ldw	r2,-4(fp)
 4001248:	10c00015 	stw	r3,0(r2)

	_dhcpUdpSocket.stop();
 400124c:	e0bfff17 	ldw	r2,-4(fp)
 4001250:	10801204 	addi	r2,r2,72
 4001254:	1009883a 	mov	r4,r2
 4001258:	4005a280 	call	4005a28 <_ZN11EthernetUDP4stopEv>
	if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0) {
 400125c:	e0bfff17 	ldw	r2,-4(fp)
 4001260:	10801204 	addi	r2,r2,72
 4001264:	01401104 	movi	r5,68
 4001268:	1009883a 	mov	r4,r2
 400126c:	40059540 	call	4005954 <_ZN11EthernetUDP5beginEt>
 4001270:	10803fcc 	andi	r2,r2,255
 4001274:	1005003a 	cmpeq	r2,r2,zero
 4001278:	10803fcc 	andi	r2,r2,255
 400127c:	10000226 	beq	r2,zero,4001288 <_ZN9DhcpClass18request_DHCP_leaseEv+0x70>
		// Couldn't get a socket
		return 0;
 4001280:	0005883a 	mov	r2,zero
 4001284:	0000c106 	br	400158c <_ZN9DhcpClass18request_DHCP_leaseEv+0x374>
	}

	presend_DHCP();
 4001288:	e13fff17 	ldw	r4,-4(fp)
 400128c:	40015a00 	call	40015a0 <_ZN9DhcpClass12presend_DHCPEv>

	int result = 0;
 4001290:	e03ffb15 	stw	zero,-20(fp)

	unsigned long startTime = clock();
 4001294:	400b2d40 	call	400b2d4 <clock>
 4001298:	e0bffc15 	stw	r2,-16(fp)

	while (_dhcp_state != STATE_DHCP_LEASED) {
 400129c:	e0bfff17 	ldw	r2,-4(fp)
 40012a0:	10801103 	ldbu	r2,68(r2)
 40012a4:	10803fcc 	andi	r2,r2,255
 40012a8:	108000e0 	cmpeqi	r2,r2,3
 40012ac:	1000a91e 	bne	r2,zero,4001554 <_ZN9DhcpClass18request_DHCP_leaseEv+0x33c>
		if (_dhcp_state == STATE_DHCP_START) {
 40012b0:	e0bfff17 	ldw	r2,-4(fp)
 40012b4:	10801103 	ldbu	r2,68(r2)
 40012b8:	10803fcc 	andi	r2,r2,255
 40012bc:	1000151e 	bne	r2,zero,4001314 <_ZN9DhcpClass18request_DHCP_leaseEv+0xfc>
			_dhcpTransactionId++;
 40012c0:	e0bfff17 	ldw	r2,-4(fp)
 40012c4:	10800117 	ldw	r2,4(r2)
 40012c8:	10c00044 	addi	r3,r2,1
 40012cc:	e0bfff17 	ldw	r2,-4(fp)
 40012d0:	10c00115 	stw	r3,4(r2)
			send_DHCP_MESSAGE(DHCP_DISCOVER, ((clock() - startTime) / 1000));
 40012d4:	400b2d40 	call	400b2d4 <clock>
 40012d8:	1007883a 	mov	r3,r2
 40012dc:	e0bffc17 	ldw	r2,-16(fp)
 40012e0:	1885c83a 	sub	r2,r3,r2
 40012e4:	0140fa04 	movi	r5,1000
 40012e8:	1009883a 	mov	r4,r2
 40012ec:	400ace00 	call	400ace0 <__udivsi3>
 40012f0:	10bfffcc 	andi	r2,r2,65535
 40012f4:	100d883a 	mov	r6,r2
 40012f8:	01400044 	movi	r5,1
 40012fc:	e13fff17 	ldw	r4,-4(fp)
 4001300:	40015c40 	call	40015c4 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
			_dhcp_state = STATE_DHCP_DISCOVER;
 4001304:	e0bfff17 	ldw	r2,-4(fp)
 4001308:	00c00044 	movi	r3,1
 400130c:	10c01105 	stb	r3,68(r2)
 4001310:	00007906 	br	40014f8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
		} else if (_dhcp_state == STATE_DHCP_REREQUEST) {
 4001314:	e0bfff17 	ldw	r2,-4(fp)
 4001318:	10801103 	ldbu	r2,68(r2)
 400131c:	10803fcc 	andi	r2,r2,255
 4001320:	10800118 	cmpnei	r2,r2,4
 4001324:	1000151e 	bne	r2,zero,400137c <_ZN9DhcpClass18request_DHCP_leaseEv+0x164>
			_dhcpTransactionId++;
 4001328:	e0bfff17 	ldw	r2,-4(fp)
 400132c:	10800117 	ldw	r2,4(r2)
 4001330:	10c00044 	addi	r3,r2,1
 4001334:	e0bfff17 	ldw	r2,-4(fp)
 4001338:	10c00115 	stw	r3,4(r2)
			send_DHCP_MESSAGE(DHCP_REQUEST, ((clock() - startTime)/1000));
 400133c:	400b2d40 	call	400b2d4 <clock>
 4001340:	1007883a 	mov	r3,r2
 4001344:	e0bffc17 	ldw	r2,-16(fp)
 4001348:	1885c83a 	sub	r2,r3,r2
 400134c:	0140fa04 	movi	r5,1000
 4001350:	1009883a 	mov	r4,r2
 4001354:	400ace00 	call	400ace0 <__udivsi3>
 4001358:	10bfffcc 	andi	r2,r2,65535
 400135c:	100d883a 	mov	r6,r2
 4001360:	014000c4 	movi	r5,3
 4001364:	e13fff17 	ldw	r4,-4(fp)
 4001368:	40015c40 	call	40015c4 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
			_dhcp_state = STATE_DHCP_REQUEST;
 400136c:	e0bfff17 	ldw	r2,-4(fp)
 4001370:	00c00084 	movi	r3,2
 4001374:	10c01105 	stb	r3,68(r2)
 4001378:	00005f06 	br	40014f8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
		} else if (_dhcp_state == STATE_DHCP_DISCOVER) {
 400137c:	e0bfff17 	ldw	r2,-4(fp)
 4001380:	10801103 	ldbu	r2,68(r2)
 4001384:	10803fcc 	andi	r2,r2,255
 4001388:	10800058 	cmpnei	r2,r2,1
 400138c:	10001e1e 	bne	r2,zero,4001408 <_ZN9DhcpClass18request_DHCP_leaseEv+0x1f0>
			uint32_t respId;
			messageType = parseDHCPResponse(_responseTimeout, respId);
 4001390:	e0bfff17 	ldw	r2,-4(fp)
 4001394:	10800f17 	ldw	r2,60(r2)
 4001398:	e0fffd04 	addi	r3,fp,-12
 400139c:	180d883a 	mov	r6,r3
 40013a0:	100b883a 	mov	r5,r2
 40013a4:	e13fff17 	ldw	r4,-4(fp)
 40013a8:	4001a140 	call	4001a14 <_ZN9DhcpClass17parseDHCPResponseEmRm>
 40013ac:	e0bffa05 	stb	r2,-24(fp)
			if (messageType == DHCP_OFFER) {
 40013b0:	e0bffa03 	ldbu	r2,-24(fp)
 40013b4:	10800098 	cmpnei	r2,r2,2
 40013b8:	10004f1e 	bne	r2,zero,40014f8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
				// We'll use the transaction ID that the offer came with,
				// rather than the one we were up to
				_dhcpTransactionId = respId;
 40013bc:	e0fffd17 	ldw	r3,-12(fp)
 40013c0:	e0bfff17 	ldw	r2,-4(fp)
 40013c4:	10c00115 	stw	r3,4(r2)
				send_DHCP_MESSAGE(DHCP_REQUEST, ((clock() - startTime) / 1000));
 40013c8:	400b2d40 	call	400b2d4 <clock>
 40013cc:	1007883a 	mov	r3,r2
 40013d0:	e0bffc17 	ldw	r2,-16(fp)
 40013d4:	1885c83a 	sub	r2,r3,r2
 40013d8:	0140fa04 	movi	r5,1000
 40013dc:	1009883a 	mov	r4,r2
 40013e0:	400ace00 	call	400ace0 <__udivsi3>
 40013e4:	10bfffcc 	andi	r2,r2,65535
 40013e8:	100d883a 	mov	r6,r2
 40013ec:	014000c4 	movi	r5,3
 40013f0:	e13fff17 	ldw	r4,-4(fp)
 40013f4:	40015c40 	call	40015c4 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
				_dhcp_state = STATE_DHCP_REQUEST;
 40013f8:	e0bfff17 	ldw	r2,-4(fp)
 40013fc:	00c00084 	movi	r3,2
 4001400:	10c01105 	stb	r3,68(r2)
 4001404:	00003c06 	br	40014f8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			}
		} else if (_dhcp_state == STATE_DHCP_REQUEST) {
 4001408:	e0bfff17 	ldw	r2,-4(fp)
 400140c:	10801103 	ldbu	r2,68(r2)
 4001410:	10803fcc 	andi	r2,r2,255
 4001414:	10800098 	cmpnei	r2,r2,2
 4001418:	1000371e 	bne	r2,zero,40014f8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			uint32_t respId;
			messageType = parseDHCPResponse(_responseTimeout, respId);
 400141c:	e0bfff17 	ldw	r2,-4(fp)
 4001420:	10800f17 	ldw	r2,60(r2)
 4001424:	e0fffe04 	addi	r3,fp,-8
 4001428:	180d883a 	mov	r6,r3
 400142c:	100b883a 	mov	r5,r2
 4001430:	e13fff17 	ldw	r4,-4(fp)
 4001434:	4001a140 	call	4001a14 <_ZN9DhcpClass17parseDHCPResponseEmRm>
 4001438:	e0bffa05 	stb	r2,-24(fp)
			if (messageType == DHCP_ACK) {
 400143c:	e0bffa03 	ldbu	r2,-24(fp)
 4001440:	10800158 	cmpnei	r2,r2,5
 4001444:	1000271e 	bne	r2,zero,40014e4 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2cc>
				_dhcp_state = STATE_DHCP_LEASED;
 4001448:	e0bfff17 	ldw	r2,-4(fp)
 400144c:	00c000c4 	movi	r3,3
 4001450:	10c01105 	stb	r3,68(r2)
				result = 1;
 4001454:	00800044 	movi	r2,1
 4001458:	e0bffb15 	stw	r2,-20(fp)
				//use default lease time if we didn't get it
				if (_dhcpLeaseTime == 0) {
 400145c:	e0bfff17 	ldw	r2,-4(fp)
 4001460:	10800917 	ldw	r2,36(r2)
 4001464:	1000031e 	bne	r2,zero,4001474 <_ZN9DhcpClass18request_DHCP_leaseEv+0x25c>
					_dhcpLeaseTime = DEFAULT_LEASE;
 4001468:	e0bfff17 	ldw	r2,-4(fp)
 400146c:	00c0e104 	movi	r3,900
 4001470:	10c00915 	stw	r3,36(r2)
				}
				// Calculate T1 & T2 if we didn't get it
				if (_dhcpT1 == 0) {
 4001474:	e0bfff17 	ldw	r2,-4(fp)
 4001478:	10800a17 	ldw	r2,40(r2)
 400147c:	1000051e 	bne	r2,zero,4001494 <_ZN9DhcpClass18request_DHCP_leaseEv+0x27c>
					// T1 should be 50% of _dhcpLeaseTime
					_dhcpT1 = _dhcpLeaseTime >> 1;
 4001480:	e0bfff17 	ldw	r2,-4(fp)
 4001484:	10800917 	ldw	r2,36(r2)
 4001488:	1006d07a 	srli	r3,r2,1
 400148c:	e0bfff17 	ldw	r2,-4(fp)
 4001490:	10c00a15 	stw	r3,40(r2)
				}
				if (_dhcpT2 == 0) {
 4001494:	e0bfff17 	ldw	r2,-4(fp)
 4001498:	10800b17 	ldw	r2,44(r2)
 400149c:	1000081e 	bne	r2,zero,40014c0 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2a8>
					// T2 should be 87.5% (7/8ths) of _dhcpLeaseTime
					_dhcpT2 = _dhcpLeaseTime - (_dhcpLeaseTime >> 3);
 40014a0:	e0bfff17 	ldw	r2,-4(fp)
 40014a4:	10c00917 	ldw	r3,36(r2)
 40014a8:	e0bfff17 	ldw	r2,-4(fp)
 40014ac:	10800917 	ldw	r2,36(r2)
 40014b0:	1004d0fa 	srli	r2,r2,3
 40014b4:	1887c83a 	sub	r3,r3,r2
 40014b8:	e0bfff17 	ldw	r2,-4(fp)
 40014bc:	10c00b15 	stw	r3,44(r2)
				}
				_renewInSec = _dhcpT1;
 40014c0:	e0bfff17 	ldw	r2,-4(fp)
 40014c4:	10c00a17 	ldw	r3,40(r2)
 40014c8:	e0bfff17 	ldw	r2,-4(fp)
 40014cc:	10c00c15 	stw	r3,48(r2)
				_rebindInSec = _dhcpT2;
 40014d0:	e0bfff17 	ldw	r2,-4(fp)
 40014d4:	10c00b17 	ldw	r3,44(r2)
 40014d8:	e0bfff17 	ldw	r2,-4(fp)
 40014dc:	10c00d15 	stw	r3,52(r2)
 40014e0:	00000506 	br	40014f8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			} else if (messageType == DHCP_NAK) {
 40014e4:	e0bffa03 	ldbu	r2,-24(fp)
 40014e8:	10800198 	cmpnei	r2,r2,6
 40014ec:	1000021e 	bne	r2,zero,40014f8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
				_dhcp_state = STATE_DHCP_START;
 40014f0:	e0bfff17 	ldw	r2,-4(fp)
 40014f4:	10001105 	stb	zero,68(r2)
			}
		}

		if (messageType == 255) {
 40014f8:	e0bffa03 	ldbu	r2,-24(fp)
 40014fc:	10803fd8 	cmpnei	r2,r2,255
 4001500:	1000031e 	bne	r2,zero,4001510 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f8>
			messageType = 0;
 4001504:	e03ffa05 	stb	zero,-24(fp)
			_dhcp_state = STATE_DHCP_START;
 4001508:	e0bfff17 	ldw	r2,-4(fp)
 400150c:	10001105 	stb	zero,68(r2)
		}

		if (result != 1 && ((clock() - startTime) > _timeout))
 4001510:	e0bffb17 	ldw	r2,-20(fp)
 4001514:	10800060 	cmpeqi	r2,r2,1
 4001518:	1000091e 	bne	r2,zero,4001540 <_ZN9DhcpClass18request_DHCP_leaseEv+0x328>
 400151c:	400b2d40 	call	400b2d4 <clock>
 4001520:	1007883a 	mov	r3,r2
 4001524:	e0bffc17 	ldw	r2,-16(fp)
 4001528:	1885c83a 	sub	r2,r3,r2
 400152c:	e0ffff17 	ldw	r3,-4(fp)
 4001530:	18c00e17 	ldw	r3,56(r3)
 4001534:	1880022e 	bgeu	r3,r2,4001540 <_ZN9DhcpClass18request_DHCP_leaseEv+0x328>
 4001538:	00800044 	movi	r2,1
 400153c:	00000106 	br	4001544 <_ZN9DhcpClass18request_DHCP_leaseEv+0x32c>
 4001540:	0005883a 	mov	r2,zero
 4001544:	10803fcc 	andi	r2,r2,255
 4001548:	1000011e 	bne	r2,zero,4001550 <_ZN9DhcpClass18request_DHCP_leaseEv+0x338>

	int result = 0;

	unsigned long startTime = clock();

	while (_dhcp_state != STATE_DHCP_LEASED) {
 400154c:	003f5306 	br	400129c <__alt_data_end+0xfc00129c>
			messageType = 0;
			_dhcp_state = STATE_DHCP_START;
		}

		if (result != 1 && ((clock() - startTime) > _timeout))
			break;
 4001550:	0001883a 	nop
	}

	// We're done with the socket now
	_dhcpUdpSocket.stop();
 4001554:	e0bfff17 	ldw	r2,-4(fp)
 4001558:	10801204 	addi	r2,r2,72
 400155c:	1009883a 	mov	r4,r2
 4001560:	4005a280 	call	4005a28 <_ZN11EthernetUDP4stopEv>
	_dhcpTransactionId++;
 4001564:	e0bfff17 	ldw	r2,-4(fp)
 4001568:	10800117 	ldw	r2,4(r2)
 400156c:	10c00044 	addi	r3,r2,1
 4001570:	e0bfff17 	ldw	r2,-4(fp)
 4001574:	10c00115 	stw	r3,4(r2)

	_lastCheckLeaseMillis = clock();
 4001578:	400b2d40 	call	400b2d4 <clock>
 400157c:	1007883a 	mov	r3,r2
 4001580:	e0bfff17 	ldw	r2,-4(fp)
 4001584:	10c01015 	stw	r3,64(r2)
	return result;
 4001588:	e0bffb17 	ldw	r2,-20(fp)
}
 400158c:	e037883a 	mov	sp,fp
 4001590:	dfc00117 	ldw	ra,4(sp)
 4001594:	df000017 	ldw	fp,0(sp)
 4001598:	dec00204 	addi	sp,sp,8
 400159c:	f800283a 	ret

040015a0 <_ZN9DhcpClass12presend_DHCPEv>:

void DhcpClass::presend_DHCP()
{
 40015a0:	defffe04 	addi	sp,sp,-8
 40015a4:	df000115 	stw	fp,4(sp)
 40015a8:	df000104 	addi	fp,sp,4
 40015ac:	e13fff15 	stw	r4,-4(fp)
}
 40015b0:	0001883a 	nop
 40015b4:	e037883a 	mov	sp,fp
 40015b8:	df000017 	ldw	fp,0(sp)
 40015bc:	dec00104 	addi	sp,sp,4
 40015c0:	f800283a 	ret

040015c4 <_ZN9DhcpClass17send_DHCP_MESSAGEEht>:

void DhcpClass::send_DHCP_MESSAGE(uint8_t messageType, uint16_t secondsElapsed)
{
 40015c4:	deffee04 	addi	sp,sp,-72
 40015c8:	dfc01115 	stw	ra,68(sp)
 40015cc:	df001015 	stw	fp,64(sp)
 40015d0:	df001004 	addi	fp,sp,64
 40015d4:	e13ffd15 	stw	r4,-12(fp)
 40015d8:	2807883a 	mov	r3,r5
 40015dc:	3005883a 	mov	r2,r6
 40015e0:	e0fffe05 	stb	r3,-8(fp)
 40015e4:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t buffer[32];
	memset(buffer, 0, 32);
 40015e8:	e0bff204 	addi	r2,fp,-56
 40015ec:	01800804 	movi	r6,32
 40015f0:	000b883a 	mov	r5,zero
 40015f4:	1009883a 	mov	r4,r2
 40015f8:	400bd180 	call	400bd18 <memset>
	IPAddress dest_addr(255, 255, 255, 255); // Broadcast address
 40015fc:	e0fffa04 	addi	r3,fp,-24
 4001600:	00803fc4 	movi	r2,255
 4001604:	d8800015 	stw	r2,0(sp)
 4001608:	01c03fc4 	movi	r7,255
 400160c:	01803fc4 	movi	r6,255
 4001610:	01403fc4 	movi	r5,255
 4001614:	1809883a 	mov	r4,r3
 4001618:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>

	if (_dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT) == -1) {
 400161c:	e0bffd17 	ldw	r2,-12(fp)
 4001620:	10801204 	addi	r2,r2,72
 4001624:	018010c4 	movi	r6,67
 4001628:	e17ffa17 	ldw	r5,-24(fp)
 400162c:	1009883a 	mov	r4,r2
 4001630:	4005b4c0 	call	4005b4c <_ZN11EthernetUDP11beginPacketE9IPAddresst>
 4001634:	10bfffe0 	cmpeqi	r2,r2,-1
 4001638:	10803fcc 	andi	r2,r2,255
 400163c:	1000ef1e 	bne	r2,zero,40019fc <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x438>
		//Serial.printf("DHCP transmit error\n");
		// FIXME Need to return errors
		return;
	}

	buffer[0] = DHCP_BOOTREQUEST;   // op
 4001640:	00800044 	movi	r2,1
 4001644:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = DHCP_HTYPE10MB;     // htype
 4001648:	00800044 	movi	r2,1
 400164c:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = DHCP_HLENETHERNET;  // hlen
 4001650:	00800184 	movi	r2,6
 4001654:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = DHCP_HOPS;          // hops
 4001658:	e03ff2c5 	stb	zero,-53(fp)

	// xid
	unsigned long xid = htonl(_dhcpTransactionId);
 400165c:	e0bffd17 	ldw	r2,-12(fp)
 4001660:	10800117 	ldw	r2,4(r2)
 4001664:	1006963a 	slli	r3,r2,24
 4001668:	e0bffd17 	ldw	r2,-12(fp)
 400166c:	10800117 	ldw	r2,4(r2)
 4001670:	1004923a 	slli	r2,r2,8
 4001674:	10803fec 	andhi	r2,r2,255
 4001678:	1886b03a 	or	r3,r3,r2
 400167c:	e0bffd17 	ldw	r2,-12(fp)
 4001680:	10800117 	ldw	r2,4(r2)
 4001684:	1004d23a 	srli	r2,r2,8
 4001688:	10bfc00c 	andi	r2,r2,65280
 400168c:	1886b03a 	or	r3,r3,r2
 4001690:	e0bffd17 	ldw	r2,-12(fp)
 4001694:	10800117 	ldw	r2,4(r2)
 4001698:	1004d63a 	srli	r2,r2,24
 400169c:	1884b03a 	or	r2,r3,r2
 40016a0:	e0bffb15 	stw	r2,-20(fp)
	memcpy(buffer + 4, &(xid), 4);
 40016a4:	e0bff204 	addi	r2,fp,-56
 40016a8:	10800104 	addi	r2,r2,4
 40016ac:	e0fffb04 	addi	r3,fp,-20
 40016b0:	01800104 	movi	r6,4
 40016b4:	180b883a 	mov	r5,r3
 40016b8:	1009883a 	mov	r4,r2
 40016bc:	400bbd00 	call	400bbd0 <memcpy>

	// 8, 9 - seconds elapsed
	buffer[8] = ((secondsElapsed & 0xff00) >> 8);
 40016c0:	e0bfff0b 	ldhu	r2,-4(fp)
 40016c4:	1004d23a 	srli	r2,r2,8
 40016c8:	e0bff405 	stb	r2,-48(fp)
	buffer[9] = (secondsElapsed & 0x00ff);
 40016cc:	e0bfff0b 	ldhu	r2,-4(fp)
 40016d0:	e0bff445 	stb	r2,-47(fp)

	// flags
	unsigned short flags = htons(DHCP_FLAGSBROADCAST);
 40016d4:	00802004 	movi	r2,128
 40016d8:	e0bffc0d 	sth	r2,-16(fp)
	memcpy(buffer + 10, &(flags), 2);
 40016dc:	e0bff204 	addi	r2,fp,-56
 40016e0:	10800284 	addi	r2,r2,10
 40016e4:	e0fffc04 	addi	r3,fp,-16
 40016e8:	01800084 	movi	r6,2
 40016ec:	180b883a 	mov	r5,r3
 40016f0:	1009883a 	mov	r4,r2
 40016f4:	400bbd00 	call	400bbd0 <memcpy>
	// yiaddr: already zeroed
	// siaddr: already zeroed
	// giaddr: already zeroed

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 28);
 40016f8:	e0bffd17 	ldw	r2,-12(fp)
 40016fc:	10801204 	addi	r2,r2,72
 4001700:	e0fff204 	addi	r3,fp,-56
 4001704:	01800704 	movi	r6,28
 4001708:	180b883a 	mov	r5,r3
 400170c:	1009883a 	mov	r4,r2
 4001710:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>

	memset(buffer, 0, 32); // clear local buffer
 4001714:	e0bff204 	addi	r2,fp,-56
 4001718:	01800804 	movi	r6,32
 400171c:	000b883a 	mov	r5,zero
 4001720:	1009883a 	mov	r4,r2
 4001724:	400bd180 	call	400bd18 <memset>

	memcpy(buffer, _dhcpMacAddr, 6); // chaddr
 4001728:	e0bffd17 	ldw	r2,-12(fp)
 400172c:	10c00204 	addi	r3,r2,8
 4001730:	e0bff204 	addi	r2,fp,-56
 4001734:	01800184 	movi	r6,6
 4001738:	180b883a 	mov	r5,r3
 400173c:	1009883a 	mov	r4,r2
 4001740:	400bbd00 	call	400bbd0 <memcpy>

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 16);
 4001744:	e0bffd17 	ldw	r2,-12(fp)
 4001748:	10801204 	addi	r2,r2,72
 400174c:	e0fff204 	addi	r3,fp,-56
 4001750:	01800404 	movi	r6,16
 4001754:	180b883a 	mov	r5,r3
 4001758:	1009883a 	mov	r4,r2
 400175c:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>

	memset(buffer, 0, 32); // clear local buffer
 4001760:	e0bff204 	addi	r2,fp,-56
 4001764:	01800804 	movi	r6,32
 4001768:	000b883a 	mov	r5,zero
 400176c:	1009883a 	mov	r4,r2
 4001770:	400bd180 	call	400bd18 <memset>

	// leave zeroed out for sname && file
	// put in W5100 transmit buffer x 6 (192 bytes)

	for(int i = 0; i < 6; i++) {
 4001774:	e03ff115 	stw	zero,-60(fp)
 4001778:	e0bff117 	ldw	r2,-60(fp)
 400177c:	10800188 	cmpgei	r2,r2,6
 4001780:	10000b1e 	bne	r2,zero,40017b0 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x1ec>
		_dhcpUdpSocket.write(buffer, 32);
 4001784:	e0bffd17 	ldw	r2,-12(fp)
 4001788:	10801204 	addi	r2,r2,72
 400178c:	e0fff204 	addi	r3,fp,-56
 4001790:	01800804 	movi	r6,32
 4001794:	180b883a 	mov	r5,r3
 4001798:	1009883a 	mov	r4,r2
 400179c:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>
	memset(buffer, 0, 32); // clear local buffer

	// leave zeroed out for sname && file
	// put in W5100 transmit buffer x 6 (192 bytes)

	for(int i = 0; i < 6; i++) {
 40017a0:	e0bff117 	ldw	r2,-60(fp)
 40017a4:	10800044 	addi	r2,r2,1
 40017a8:	e0bff115 	stw	r2,-60(fp)
 40017ac:	003ff206 	br	4001778 <__alt_data_end+0xfc001778>
		_dhcpUdpSocket.write(buffer, 32);
	}

	// OPT - Magic Cookie
	buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
 40017b0:	008018c4 	movi	r2,99
 40017b4:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = (uint8_t)((MAGIC_COOKIE >> 16)& 0xFF);
 40017b8:	00bfe084 	movi	r2,-126
 40017bc:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = (uint8_t)((MAGIC_COOKIE >> 8)& 0xFF);
 40017c0:	008014c4 	movi	r2,83
 40017c4:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = (uint8_t)(MAGIC_COOKIE& 0xFF);
 40017c8:	008018c4 	movi	r2,99
 40017cc:	e0bff2c5 	stb	r2,-53(fp)

	// OPT - message type
	buffer[4] = dhcpMessageType;
 40017d0:	00800d44 	movi	r2,53
 40017d4:	e0bff305 	stb	r2,-52(fp)
	buffer[5] = 0x01;
 40017d8:	00800044 	movi	r2,1
 40017dc:	e0bff345 	stb	r2,-51(fp)
	buffer[6] = messageType; //DHCP_REQUEST;
 40017e0:	e0bffe03 	ldbu	r2,-8(fp)
 40017e4:	e0bff385 	stb	r2,-50(fp)

	// OPT - client identifier
	buffer[7] = dhcpClientIdentifier;
 40017e8:	00800f44 	movi	r2,61
 40017ec:	e0bff3c5 	stb	r2,-49(fp)
	buffer[8] = 0x07;
 40017f0:	008001c4 	movi	r2,7
 40017f4:	e0bff405 	stb	r2,-48(fp)
	buffer[9] = 0x01;
 40017f8:	00800044 	movi	r2,1
 40017fc:	e0bff445 	stb	r2,-47(fp)
	memcpy(buffer + 10, _dhcpMacAddr, 6);
 4001800:	e0bff204 	addi	r2,fp,-56
 4001804:	10800284 	addi	r2,r2,10
 4001808:	e0fffd17 	ldw	r3,-12(fp)
 400180c:	18c00204 	addi	r3,r3,8
 4001810:	01800184 	movi	r6,6
 4001814:	180b883a 	mov	r5,r3
 4001818:	1009883a 	mov	r4,r2
 400181c:	400bbd00 	call	400bbd0 <memcpy>

	// OPT - host name
	buffer[16] = hostName;
 4001820:	00800304 	movi	r2,12
 4001824:	e0bff605 	stb	r2,-40(fp)
	buffer[17] = strlen(HOST_NAME) + 6; // length of hostname + last 3 bytes of mac address
 4001828:	00800304 	movi	r2,12
 400182c:	e0bff645 	stb	r2,-39(fp)
	strcpy((char*)&(buffer[18]), HOST_NAME);
 4001830:	e0bff204 	addi	r2,fp,-56
 4001834:	10800484 	addi	r2,r2,18
 4001838:	00d255c4 	movi	r3,18775
 400183c:	10c0000d 	sth	r3,0(r2)
 4001840:	00db9684 	movi	r3,28250
 4001844:	10c0008d 	sth	r3,2(r2)
 4001848:	00dd1944 	movi	r3,29797
 400184c:	10c0010d 	sth	r3,4(r2)
 4001850:	10000185 	stb	zero,6(r2)

	printByte((char*)&(buffer[24]), _dhcpMacAddr[3]);
 4001854:	e0bffd17 	ldw	r2,-12(fp)
 4001858:	108002c3 	ldbu	r2,11(r2)
 400185c:	10c03fcc 	andi	r3,r2,255
 4001860:	e0bff204 	addi	r2,fp,-56
 4001864:	10800604 	addi	r2,r2,24
 4001868:	180d883a 	mov	r6,r3
 400186c:	100b883a 	mov	r5,r2
 4001870:	e13ffd17 	ldw	r4,-12(fp)
 4001874:	40024a80 	call	40024a8 <_ZN9DhcpClass9printByteEPch>
	printByte((char*)&(buffer[26]), _dhcpMacAddr[4]);
 4001878:	e0bffd17 	ldw	r2,-12(fp)
 400187c:	10800303 	ldbu	r2,12(r2)
 4001880:	10c03fcc 	andi	r3,r2,255
 4001884:	e0bff204 	addi	r2,fp,-56
 4001888:	10800684 	addi	r2,r2,26
 400188c:	180d883a 	mov	r6,r3
 4001890:	100b883a 	mov	r5,r2
 4001894:	e13ffd17 	ldw	r4,-12(fp)
 4001898:	40024a80 	call	40024a8 <_ZN9DhcpClass9printByteEPch>
	printByte((char*)&(buffer[28]), _dhcpMacAddr[5]);
 400189c:	e0bffd17 	ldw	r2,-12(fp)
 40018a0:	10800343 	ldbu	r2,13(r2)
 40018a4:	10c03fcc 	andi	r3,r2,255
 40018a8:	e0bff204 	addi	r2,fp,-56
 40018ac:	10800704 	addi	r2,r2,28
 40018b0:	180d883a 	mov	r6,r3
 40018b4:	100b883a 	mov	r5,r2
 40018b8:	e13ffd17 	ldw	r4,-12(fp)
 40018bc:	40024a80 	call	40024a8 <_ZN9DhcpClass9printByteEPch>

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 30);
 40018c0:	e0bffd17 	ldw	r2,-12(fp)
 40018c4:	10801204 	addi	r2,r2,72
 40018c8:	e0fff204 	addi	r3,fp,-56
 40018cc:	01800784 	movi	r6,30
 40018d0:	180b883a 	mov	r5,r3
 40018d4:	1009883a 	mov	r4,r2
 40018d8:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>

	if (messageType == DHCP_REQUEST) {
 40018dc:	e0bffe03 	ldbu	r2,-8(fp)
 40018e0:	108000d8 	cmpnei	r2,r2,3
 40018e4:	1000271e 	bne	r2,zero,4001984 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x3c0>
		buffer[0] = dhcpRequestedIPaddr;
 40018e8:	00800c84 	movi	r2,50
 40018ec:	e0bff205 	stb	r2,-56(fp)
		buffer[1] = 0x04;
 40018f0:	00800104 	movi	r2,4
 40018f4:	e0bff245 	stb	r2,-55(fp)
		buffer[2] = _dhcpLocalIp[0];
 40018f8:	e0bffd17 	ldw	r2,-12(fp)
 40018fc:	10800383 	ldbu	r2,14(r2)
 4001900:	e0bff285 	stb	r2,-54(fp)
		buffer[3] = _dhcpLocalIp[1];
 4001904:	e0bffd17 	ldw	r2,-12(fp)
 4001908:	108003c3 	ldbu	r2,15(r2)
 400190c:	e0bff2c5 	stb	r2,-53(fp)
		buffer[4] = _dhcpLocalIp[2];
 4001910:	e0bffd17 	ldw	r2,-12(fp)
 4001914:	10800403 	ldbu	r2,16(r2)
 4001918:	e0bff305 	stb	r2,-52(fp)
		buffer[5] = _dhcpLocalIp[3];
 400191c:	e0bffd17 	ldw	r2,-12(fp)
 4001920:	10800443 	ldbu	r2,17(r2)
 4001924:	e0bff345 	stb	r2,-51(fp)

		buffer[6] = dhcpServerIdentifier;
 4001928:	00800d84 	movi	r2,54
 400192c:	e0bff385 	stb	r2,-50(fp)
		buffer[7] = 0x04;
 4001930:	00800104 	movi	r2,4
 4001934:	e0bff3c5 	stb	r2,-49(fp)
		buffer[8] = _dhcpDhcpServerIp[0];
 4001938:	e0bffd17 	ldw	r2,-12(fp)
 400193c:	10800683 	ldbu	r2,26(r2)
 4001940:	e0bff405 	stb	r2,-48(fp)
		buffer[9] = _dhcpDhcpServerIp[1];
 4001944:	e0bffd17 	ldw	r2,-12(fp)
 4001948:	108006c3 	ldbu	r2,27(r2)
 400194c:	e0bff445 	stb	r2,-47(fp)
		buffer[10] = _dhcpDhcpServerIp[2];
 4001950:	e0bffd17 	ldw	r2,-12(fp)
 4001954:	10800703 	ldbu	r2,28(r2)
 4001958:	e0bff485 	stb	r2,-46(fp)
		buffer[11] = _dhcpDhcpServerIp[3];
 400195c:	e0bffd17 	ldw	r2,-12(fp)
 4001960:	10800743 	ldbu	r2,29(r2)
 4001964:	e0bff4c5 	stb	r2,-45(fp)

		//put data in W5100 transmit buffer
		_dhcpUdpSocket.write(buffer, 12);
 4001968:	e0bffd17 	ldw	r2,-12(fp)
 400196c:	10801204 	addi	r2,r2,72
 4001970:	e0fff204 	addi	r3,fp,-56
 4001974:	01800304 	movi	r6,12
 4001978:	180b883a 	mov	r5,r3
 400197c:	1009883a 	mov	r4,r2
 4001980:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>
	}

	buffer[0] = dhcpParamRequest;
 4001984:	00800dc4 	movi	r2,55
 4001988:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = 0x06;
 400198c:	00800184 	movi	r2,6
 4001990:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = subnetMask;
 4001994:	00800044 	movi	r2,1
 4001998:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = routersOnSubnet;
 400199c:	008000c4 	movi	r2,3
 40019a0:	e0bff2c5 	stb	r2,-53(fp)
	buffer[4] = dns;
 40019a4:	00800184 	movi	r2,6
 40019a8:	e0bff305 	stb	r2,-52(fp)
	buffer[5] = domainName;
 40019ac:	008003c4 	movi	r2,15
 40019b0:	e0bff345 	stb	r2,-51(fp)
	buffer[6] = dhcpT1value;
 40019b4:	00800e84 	movi	r2,58
 40019b8:	e0bff385 	stb	r2,-50(fp)
	buffer[7] = dhcpT2value;
 40019bc:	00800ec4 	movi	r2,59
 40019c0:	e0bff3c5 	stb	r2,-49(fp)
	buffer[8] = endOption;
 40019c4:	00bfffc4 	movi	r2,-1
 40019c8:	e0bff405 	stb	r2,-48(fp)

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 9);
 40019cc:	e0bffd17 	ldw	r2,-12(fp)
 40019d0:	10801204 	addi	r2,r2,72
 40019d4:	e0fff204 	addi	r3,fp,-56
 40019d8:	01800244 	movi	r6,9
 40019dc:	180b883a 	mov	r5,r3
 40019e0:	1009883a 	mov	r4,r2
 40019e4:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>

	_dhcpUdpSocket.endPacket();
 40019e8:	e0bffd17 	ldw	r2,-12(fp)
 40019ec:	10801204 	addi	r2,r2,72
 40019f0:	1009883a 	mov	r4,r2
 40019f4:	4005bcc0 	call	4005bcc <_ZN11EthernetUDP9endPacketEv>
 40019f8:	00000106 	br	4001a00 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x43c>
	IPAddress dest_addr(255, 255, 255, 255); // Broadcast address

	if (_dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT) == -1) {
		//Serial.printf("DHCP transmit error\n");
		// FIXME Need to return errors
		return;
 40019fc:	0001883a 	nop

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 9);

	_dhcpUdpSocket.endPacket();
}
 4001a00:	e037883a 	mov	sp,fp
 4001a04:	dfc00117 	ldw	ra,4(sp)
 4001a08:	df000017 	ldw	fp,0(sp)
 4001a0c:	dec00204 	addi	sp,sp,8
 4001a10:	f800283a 	ret

04001a14 <_ZN9DhcpClass17parseDHCPResponseEmRm>:

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
 4001a14:	deffd604 	addi	sp,sp,-168
 4001a18:	dfc02915 	stw	ra,164(sp)
 4001a1c:	df002815 	stw	fp,160(sp)
 4001a20:	ddc02715 	stw	r23,156(sp)
 4001a24:	dd802615 	stw	r22,152(sp)
 4001a28:	dd402515 	stw	r21,148(sp)
 4001a2c:	dd002415 	stw	r20,144(sp)
 4001a30:	dcc02315 	stw	r19,140(sp)
 4001a34:	dc802215 	stw	r18,136(sp)
 4001a38:	dc402115 	stw	r17,132(sp)
 4001a3c:	dc002015 	stw	r16,128(sp)
 4001a40:	df002804 	addi	fp,sp,160
 4001a44:	e13fe715 	stw	r4,-100(fp)
 4001a48:	e17fe815 	stw	r5,-96(fp)
 4001a4c:	e1bfe915 	stw	r6,-92(fp)
 4001a50:	00810074 	movhi	r2,1025
 4001a54:	10a61604 	addi	r2,r2,-26536
 4001a58:	e0bff015 	stw	r2,-64(fp)
 4001a5c:	008100b4 	movhi	r2,1026
 4001a60:	10aace04 	addi	r2,r2,-21704
 4001a64:	e0bff115 	stw	r2,-60(fp)
 4001a68:	e0bff204 	addi	r2,fp,-56
 4001a6c:	e0ffd804 	addi	r3,fp,-160
 4001a70:	10c00015 	stw	r3,0(r2)
 4001a74:	00c10034 	movhi	r3,1024
 4001a78:	18c85e04 	addi	r3,r3,8568
 4001a7c:	10c00115 	stw	r3,4(r2)
 4001a80:	16c00215 	stw	sp,8(r2)
 4001a84:	e0bfea04 	addi	r2,fp,-88
 4001a88:	1009883a 	mov	r4,r2
 4001a8c:	400afa40 	call	400afa4 <_Unwind_SjLj_Register>
	uint8_t type = 0;
 4001a90:	e03fd805 	stb	zero,-160(fp)
	uint8_t opt_len = 0;
 4001a94:	e03fd845 	stb	zero,-159(fp)

	unsigned long startTime = clock();
 4001a98:	400b2d40 	call	400b2d4 <clock>
 4001a9c:	e0bfd915 	stw	r2,-156(fp)

	while (_dhcpUdpSocket.parsePacket() <= 0) {
 4001aa0:	e0bfe717 	ldw	r2,-100(fp)
 4001aa4:	10c01204 	addi	r3,r2,72
 4001aa8:	00bfffc4 	movi	r2,-1
 4001aac:	e0bfeb15 	stw	r2,-84(fp)
 4001ab0:	1809883a 	mov	r4,r3
 4001ab4:	4005cc00 	call	4005cc0 <_ZN11EthernetUDP11parsePacketEv>
 4001ab8:	0084403a 	cmpge	r2,zero,r2
 4001abc:	10803fcc 	andi	r2,r2,255
 4001ac0:	10000f26 	beq	r2,zero,4001b00 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xec>
		if ((clock() - startTime) > responseTimeout) {
 4001ac4:	400b2d40 	call	400b2d4 <clock>
 4001ac8:	1007883a 	mov	r3,r2
 4001acc:	e0bfd917 	ldw	r2,-156(fp)
 4001ad0:	1885c83a 	sub	r2,r3,r2
 4001ad4:	e0ffe817 	ldw	r3,-96(fp)
 4001ad8:	1885803a 	cmpltu	r2,r3,r2
 4001adc:	10803fcc 	andi	r2,r2,255
 4001ae0:	10000226 	beq	r2,zero,4001aec <_ZN9DhcpClass17parseDHCPResponseEmRm+0xd8>
			return 255;
 4001ae4:	00bfffc4 	movi	r2,-1
 4001ae8:	0001a106 	br	4002170 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x75c>
		}
		usleep (50000);
 4001aec:	00bfffc4 	movi	r2,-1
 4001af0:	e0bfeb15 	stw	r2,-84(fp)
 4001af4:	0130d414 	movui	r4,50000
 4001af8:	40188c00 	call	40188c0 <usleep>
	uint8_t type = 0;
	uint8_t opt_len = 0;

	unsigned long startTime = clock();

	while (_dhcpUdpSocket.parsePacket() <= 0) {
 4001afc:	003fe806 	br	4001aa0 <__alt_data_end+0xfc001aa0>
		}
		usleep (50000);
	}
	// start reading in the packet
	RIP_MSG_FIXED fixedMsg;
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));
 4001b00:	e0bfe717 	ldw	r2,-100(fp)
 4001b04:	10c01204 	addi	r3,r2,72
 4001b08:	e13fde04 	addi	r4,fp,-136
 4001b0c:	00bfffc4 	movi	r2,-1
 4001b10:	e0bfeb15 	stw	r2,-84(fp)
 4001b14:	01800904 	movi	r6,36
 4001b18:	200b883a 	mov	r5,r4
 4001b1c:	1809883a 	mov	r4,r3
 4001b20:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
 4001b24:	e0bfde03 	ldbu	r2,-136(fp)
 4001b28:	10803fcc 	andi	r2,r2,255
 4001b2c:	10800098 	cmpnei	r2,r2,2
 4001b30:	1000091e 	bne	r2,zero,4001b58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x144>
 4001b34:	e0bfe717 	ldw	r2,-100(fp)
 4001b38:	10801204 	addi	r2,r2,72
 4001b3c:	1009883a 	mov	r4,r2
 4001b40:	40026480 	call	4002648 <_ZN11EthernetUDP10remotePortEv>
 4001b44:	10bfffcc 	andi	r2,r2,65535
 4001b48:	108010d8 	cmpnei	r2,r2,67
 4001b4c:	1000021e 	bne	r2,zero,4001b58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x144>
 4001b50:	00800044 	movi	r2,1
 4001b54:	00000106 	br	4001b5c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x148>
 4001b58:	0005883a 	mov	r2,zero
 4001b5c:	10803fcc 	andi	r2,r2,255
 4001b60:	10017c26 	beq	r2,zero,4002154 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x740>
		transactionId = ntohl(fixedMsg.xid);
 4001b64:	e0bfdf17 	ldw	r2,-132(fp)
 4001b68:	1006963a 	slli	r3,r2,24
 4001b6c:	e0bfdf17 	ldw	r2,-132(fp)
 4001b70:	1004923a 	slli	r2,r2,8
 4001b74:	10803fec 	andhi	r2,r2,255
 4001b78:	1886b03a 	or	r3,r3,r2
 4001b7c:	e0bfdf17 	ldw	r2,-132(fp)
 4001b80:	1004d23a 	srli	r2,r2,8
 4001b84:	10bfc00c 	andi	r2,r2,65280
 4001b88:	1886b03a 	or	r3,r3,r2
 4001b8c:	e0bfdf17 	ldw	r2,-132(fp)
 4001b90:	1004d63a 	srli	r2,r2,24
 4001b94:	1886b03a 	or	r3,r3,r2
 4001b98:	e0bfe917 	ldw	r2,-92(fp)
 4001b9c:	10c00015 	stw	r3,0(r2)
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
 4001ba0:	e0bfe717 	ldw	r2,-100(fp)
 4001ba4:	10c00204 	addi	r3,r2,8
 4001ba8:	e0bfde04 	addi	r2,fp,-136
 4001bac:	10800704 	addi	r2,r2,28
 4001bb0:	01800184 	movi	r6,6
 4001bb4:	180b883a 	mov	r5,r3
 4001bb8:	1009883a 	mov	r4,r2
 4001bbc:	400bb540 	call	400bb54 <memcmp>
 4001bc0:	10000a1e 	bne	r2,zero,4001bec <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1d8>
		  (transactionId < _dhcpInitialTransactionId) ||
 4001bc4:	e0bfe917 	ldw	r2,-92(fp)
 4001bc8:	10c00017 	ldw	r3,0(r2)
 4001bcc:	e0bfe717 	ldw	r2,-100(fp)
 4001bd0:	10800017 	ldw	r2,0(r2)
	RIP_MSG_FIXED fixedMsg;
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
		transactionId = ntohl(fixedMsg.xid);
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
 4001bd4:	18800536 	bltu	r3,r2,4001bec <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1d8>
		  (transactionId < _dhcpInitialTransactionId) ||
		  (transactionId > _dhcpTransactionId)) {
 4001bd8:	e0bfe917 	ldw	r2,-92(fp)
 4001bdc:	10800017 	ldw	r2,0(r2)
 4001be0:	e0ffe717 	ldw	r3,-100(fp)
 4001be4:	18c00117 	ldw	r3,4(r3)
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
		transactionId = ntohl(fixedMsg.xid);
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
		  (transactionId < _dhcpInitialTransactionId) ||
 4001be8:	1880082e 	bgeu	r3,r2,4001c0c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1f8>
		  (transactionId > _dhcpTransactionId)) {
			// Need to read the rest of the packet here regardless
			_dhcpUdpSocket.flush(); // FIXME
 4001bec:	e0bfe717 	ldw	r2,-100(fp)
 4001bf0:	10c01204 	addi	r3,r2,72
 4001bf4:	00bfffc4 	movi	r2,-1
 4001bf8:	e0bfeb15 	stw	r2,-84(fp)
 4001bfc:	1809883a 	mov	r4,r3
 4001c00:	4005fe00 	call	4005fe0 <_ZN11EthernetUDP5flushEv>
			return 0;
 4001c04:	0005883a 	mov	r2,zero
 4001c08:	00015906 	br	4002170 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x75c>
		}

		memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);
 4001c0c:	e0bfe717 	ldw	r2,-100(fp)
 4001c10:	10800384 	addi	r2,r2,14
 4001c14:	e0ffe203 	ldbu	r3,-120(fp)
 4001c18:	10c00005 	stb	r3,0(r2)
 4001c1c:	e0ffe243 	ldbu	r3,-119(fp)
 4001c20:	10c00045 	stb	r3,1(r2)
 4001c24:	e0ffe283 	ldbu	r3,-118(fp)
 4001c28:	10c00085 	stb	r3,2(r2)
 4001c2c:	e0ffe2c3 	ldbu	r3,-117(fp)
 4001c30:	10c000c5 	stb	r3,3(r2)

		// Skip to the option part
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));
 4001c34:	e0bfe717 	ldw	r2,-100(fp)
 4001c38:	11001204 	addi	r4,r2,72
 4001c3c:	00800904 	movi	r2,36
 4001c40:	00c03c04 	movi	r3,240
 4001c44:	1885c83a 	sub	r2,r3,r2
 4001c48:	1007883a 	mov	r3,r2
 4001c4c:	00bfffc4 	movi	r2,-1
 4001c50:	e0bfeb15 	stw	r2,-84(fp)
 4001c54:	180d883a 	mov	r6,r3
 4001c58:	000b883a 	mov	r5,zero
 4001c5c:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>

		while (_dhcpUdpSocket.available() > 0) {
 4001c60:	e0bfe717 	ldw	r2,-100(fp)
 4001c64:	10c01204 	addi	r3,r2,72
 4001c68:	00bfffc4 	movi	r2,-1
 4001c6c:	e0bfeb15 	stw	r2,-84(fp)
 4001c70:	1809883a 	mov	r4,r3
 4001c74:	40059fc0 	call	40059fc <_ZN11EthernetUDP9availableEv>
 4001c78:	0084803a 	cmplt	r2,zero,r2
 4001c7c:	10803fcc 	andi	r2,r2,255
 4001c80:	10013426 	beq	r2,zero,4002154 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x740>
			switch (_dhcpUdpSocket.read()) {
 4001c84:	e0bfe717 	ldw	r2,-100(fp)
 4001c88:	10801204 	addi	r2,r2,72
 4001c8c:	1009883a 	mov	r4,r2
 4001c90:	4005df40 	call	4005df4 <_ZN11EthernetUDP4readEv>
 4001c94:	10c00ce0 	cmpeqi	r3,r2,51
 4001c98:	1800f41e 	bne	r3,zero,400206c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x658>
 4001c9c:	10c00d08 	cmpgei	r3,r2,52
 4001ca0:	18000b1e 	bne	r3,zero,4001cd0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2bc>
 4001ca4:	10c00060 	cmpeqi	r3,r2,1
 4001ca8:	1800241e 	bne	r3,zero,4001d3c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x328>
 4001cac:	10c00088 	cmpgei	r3,r2,2
 4001cb0:	1800021e 	bne	r3,zero,4001cbc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2a8>
 4001cb4:	10012326 	beq	r2,zero,4002144 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x730>
 4001cb8:	00011306 	br	4002108 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>
 4001cbc:	10c000e0 	cmpeqi	r3,r2,3
 4001cc0:	18002e1e 	bne	r3,zero,4001d7c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x368>
 4001cc4:	108001a0 	cmpeqi	r2,r2,6
 4001cc8:	1000441e 	bne	r2,zero,4001ddc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x3c8>
 4001ccc:	00010e06 	br	4002108 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>
 4001cd0:	10c00ea0 	cmpeqi	r3,r2,58
 4001cd4:	18009f1e 	bne	r3,zero,4001f54 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x540>
 4001cd8:	10c00ec8 	cmpgei	r3,r2,59
 4001cdc:	1800051e 	bne	r3,zero,4001cf4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e0>
 4001ce0:	10c00d60 	cmpeqi	r3,r2,53
 4001ce4:	1800081e 	bne	r3,zero,4001d08 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2f4>
 4001ce8:	10800da0 	cmpeqi	r2,r2,54
 4001cec:	1000531e 	bne	r2,zero,4001e3c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x428>
 4001cf0:	00010506 	br	4002108 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>
 4001cf4:	10c00ee0 	cmpeqi	r3,r2,59
 4001cf8:	1800b91e 	bne	r3,zero,4001fe0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x5cc>
 4001cfc:	10803fe0 	cmpeqi	r2,r2,255
 4001d00:	1001121e 	bne	r2,zero,400214c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x738>
 4001d04:	00010006 	br	4002108 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>

			case padOption :
				break;

			case dhcpMessageType :
				opt_len = _dhcpUdpSocket.read();
 4001d08:	e0bfe717 	ldw	r2,-100(fp)
 4001d0c:	10c01204 	addi	r3,r2,72
 4001d10:	00bfffc4 	movi	r2,-1
 4001d14:	e0bfeb15 	stw	r2,-84(fp)
 4001d18:	1809883a 	mov	r4,r3
 4001d1c:	4005df40 	call	4005df4 <_ZN11EthernetUDP4readEv>
 4001d20:	e0bfd845 	stb	r2,-159(fp)
				type = _dhcpUdpSocket.read();
 4001d24:	e0bfe717 	ldw	r2,-100(fp)
 4001d28:	10801204 	addi	r2,r2,72
 4001d2c:	1009883a 	mov	r4,r2
 4001d30:	4005df40 	call	4005df4 <_ZN11EthernetUDP4readEv>
 4001d34:	e0bfd805 	stb	r2,-160(fp)
				break;
 4001d38:	00010506 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case subnetMask :
				opt_len = _dhcpUdpSocket.read();
 4001d3c:	e0bfe717 	ldw	r2,-100(fp)
 4001d40:	10c01204 	addi	r3,r2,72
 4001d44:	00bfffc4 	movi	r2,-1
 4001d48:	e0bfeb15 	stw	r2,-84(fp)
 4001d4c:	1809883a 	mov	r4,r3
 4001d50:	4005df40 	call	4005df4 <_ZN11EthernetUDP4readEv>
 4001d54:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpSubnetMask, 4);
 4001d58:	e0bfe717 	ldw	r2,-100(fp)
 4001d5c:	10c01204 	addi	r3,r2,72
 4001d60:	e0bfe717 	ldw	r2,-100(fp)
 4001d64:	10800484 	addi	r2,r2,18
 4001d68:	01800104 	movi	r6,4
 4001d6c:	100b883a 	mov	r5,r2
 4001d70:	1809883a 	mov	r4,r3
 4001d74:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				break;
 4001d78:	0000f506 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case routersOnSubnet :
				opt_len = _dhcpUdpSocket.read();
 4001d7c:	e0bfe717 	ldw	r2,-100(fp)
 4001d80:	10c01204 	addi	r3,r2,72
 4001d84:	00bfffc4 	movi	r2,-1
 4001d88:	e0bfeb15 	stw	r2,-84(fp)
 4001d8c:	1809883a 	mov	r4,r3
 4001d90:	4005df40 	call	4005df4 <_ZN11EthernetUDP4readEv>
 4001d94:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpGatewayIp, 4);
 4001d98:	e0bfe717 	ldw	r2,-100(fp)
 4001d9c:	10c01204 	addi	r3,r2,72
 4001da0:	e0bfe717 	ldw	r2,-100(fp)
 4001da4:	10800584 	addi	r2,r2,22
 4001da8:	01800104 	movi	r6,4
 4001dac:	100b883a 	mov	r5,r2
 4001db0:	1809883a 	mov	r4,r3
 4001db4:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
 4001db8:	e0bfe717 	ldw	r2,-100(fp)
 4001dbc:	10c01204 	addi	r3,r2,72
 4001dc0:	e0bfd843 	ldbu	r2,-159(fp)
 4001dc4:	10bfff04 	addi	r2,r2,-4
 4001dc8:	100d883a 	mov	r6,r2
 4001dcc:	000b883a 	mov	r5,zero
 4001dd0:	1809883a 	mov	r4,r3
 4001dd4:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				break;
 4001dd8:	0000dd06 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dns :
				opt_len = _dhcpUdpSocket.read();
 4001ddc:	e0bfe717 	ldw	r2,-100(fp)
 4001de0:	10c01204 	addi	r3,r2,72
 4001de4:	00bfffc4 	movi	r2,-1
 4001de8:	e0bfeb15 	stw	r2,-84(fp)
 4001dec:	1809883a 	mov	r4,r3
 4001df0:	4005df40 	call	4005df4 <_ZN11EthernetUDP4readEv>
 4001df4:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
 4001df8:	e0bfe717 	ldw	r2,-100(fp)
 4001dfc:	10c01204 	addi	r3,r2,72
 4001e00:	e0bfe717 	ldw	r2,-100(fp)
 4001e04:	10800784 	addi	r2,r2,30
 4001e08:	01800104 	movi	r6,4
 4001e0c:	100b883a 	mov	r5,r2
 4001e10:	1809883a 	mov	r4,r3
 4001e14:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
 4001e18:	e0bfe717 	ldw	r2,-100(fp)
 4001e1c:	10c01204 	addi	r3,r2,72
 4001e20:	e0bfd843 	ldbu	r2,-159(fp)
 4001e24:	10bfff04 	addi	r2,r2,-4
 4001e28:	100d883a 	mov	r6,r2
 4001e2c:	000b883a 	mov	r5,zero
 4001e30:	1809883a 	mov	r4,r3
 4001e34:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				break;
 4001e38:	0000c506 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
 4001e3c:	e0bfe717 	ldw	r2,-100(fp)
 4001e40:	10c01204 	addi	r3,r2,72
 4001e44:	00bfffc4 	movi	r2,-1
 4001e48:	e0bfeb15 	stw	r2,-84(fp)
 4001e4c:	1809883a 	mov	r4,r3
 4001e50:	4005df40 	call	4005df4 <_ZN11EthernetUDP4readEv>
 4001e54:	e0bfd845 	stb	r2,-159(fp)
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 4001e58:	e0bfe717 	ldw	r2,-100(fp)
 4001e5c:	11000684 	addi	r4,r2,26
 4001e60:	e0ffdd04 	addi	r3,fp,-140
 4001e64:	00800044 	movi	r2,1
 4001e68:	e0bfeb15 	stw	r2,-84(fp)
 4001e6c:	200b883a 	mov	r5,r4
 4001e70:	1809883a 	mov	r4,r3
 4001e74:	4007d140 	call	4007d14 <_ZN9IPAddressC1EPKh>
 4001e78:	e0bfdc04 	addi	r2,fp,-144
 4001e7c:	000b883a 	mov	r5,zero
 4001e80:	1009883a 	mov	r4,r2
 4001e84:	4007ce00 	call	4007ce0 <_ZN9IPAddressC1Em>
 4001e88:	e0ffdc04 	addi	r3,fp,-144
 4001e8c:	e0bfdd04 	addi	r2,fp,-140
 4001e90:	180b883a 	mov	r5,r3
 4001e94:	1009883a 	mov	r4,r2
 4001e98:	40025e80 	call	40025e8 <_ZNK9IPAddresseqERKS_>
 4001e9c:	10803fcc 	andi	r2,r2,255
 4001ea0:	1000121e 	bne	r2,zero,4001eec <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4d8>
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
 4001ea4:	e0bfe717 	ldw	r2,-100(fp)
 4001ea8:	10c00684 	addi	r3,r2,26
 4001eac:	e0bfdb04 	addi	r2,fp,-148
 4001eb0:	180b883a 	mov	r5,r3
 4001eb4:	1009883a 	mov	r4,r2
 4001eb8:	4007d140 	call	4007d14 <_ZN9IPAddressC1EPKh>
 4001ebc:	e0bfe717 	ldw	r2,-100(fp)
 4001ec0:	10801204 	addi	r2,r2,72
 4001ec4:	1009883a 	mov	r4,r2
 4001ec8:	40026200 	call	4002620 <_ZN11EthernetUDP8remoteIPEv>
 4001ecc:	e0bfda15 	stw	r2,-152(fp)
 4001ed0:	e0ffda04 	addi	r3,fp,-152
 4001ed4:	e0bfdb04 	addi	r2,fp,-148
 4001ed8:	180b883a 	mov	r5,r3
 4001edc:	1009883a 	mov	r4,r2
 4001ee0:	40025e80 	call	40025e8 <_ZNK9IPAddresseqERKS_>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
				break;

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 4001ee4:	10803fcc 	andi	r2,r2,255
 4001ee8:	10000226 	beq	r2,zero,4001ef4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e0>
 4001eec:	00800044 	movi	r2,1
 4001ef0:	00000106 	br	4001ef8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e4>
 4001ef4:	0005883a 	mov	r2,zero
 4001ef8:	10803fcc 	andi	r2,r2,255
 4001efc:	10000b26 	beq	r2,zero,4001f2c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x518>
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
					_dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
 4001f00:	e0bfe717 	ldw	r2,-100(fp)
 4001f04:	10c01204 	addi	r3,r2,72
 4001f08:	e0bfe717 	ldw	r2,-100(fp)
 4001f0c:	11000684 	addi	r4,r2,26
 4001f10:	00bfffc4 	movi	r2,-1
 4001f14:	e0bfeb15 	stw	r2,-84(fp)
 4001f18:	01800104 	movi	r6,4
 4001f1c:	200b883a 	mov	r5,r4
 4001f20:	1809883a 	mov	r4,r3
 4001f24:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				} else {
					// Skip over the rest of this option
					_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
				}
				break;
 4001f28:	00008906 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
					_dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
				} else {
					// Skip over the rest of this option
					_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
 4001f2c:	e0bfe717 	ldw	r2,-100(fp)
 4001f30:	10c01204 	addi	r3,r2,72
 4001f34:	e13fd843 	ldbu	r4,-159(fp)
 4001f38:	00bfffc4 	movi	r2,-1
 4001f3c:	e0bfeb15 	stw	r2,-84(fp)
 4001f40:	200d883a 	mov	r6,r4
 4001f44:	000b883a 	mov	r5,zero
 4001f48:	1809883a 	mov	r4,r3
 4001f4c:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				}
				break;
 4001f50:	00007f06 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpT1value :
				opt_len = _dhcpUdpSocket.read();
 4001f54:	e0bfe717 	ldw	r2,-100(fp)
 4001f58:	10c01204 	addi	r3,r2,72
 4001f5c:	00bfffc4 	movi	r2,-1
 4001f60:	e0bfeb15 	stw	r2,-84(fp)
 4001f64:	1809883a 	mov	r4,r3
 4001f68:	4005df40 	call	4005df4 <_ZN11EthernetUDP4readEv>
 4001f6c:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
 4001f70:	e0bfe717 	ldw	r2,-100(fp)
 4001f74:	10c01204 	addi	r3,r2,72
 4001f78:	e0bfe717 	ldw	r2,-100(fp)
 4001f7c:	10800a04 	addi	r2,r2,40
 4001f80:	01800104 	movi	r6,4
 4001f84:	100b883a 	mov	r5,r2
 4001f88:	1809883a 	mov	r4,r3
 4001f8c:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				_dhcpT1 = ntohl(_dhcpT1);
 4001f90:	e0bfe717 	ldw	r2,-100(fp)
 4001f94:	10800a17 	ldw	r2,40(r2)
 4001f98:	1006963a 	slli	r3,r2,24
 4001f9c:	e0bfe717 	ldw	r2,-100(fp)
 4001fa0:	10800a17 	ldw	r2,40(r2)
 4001fa4:	1004923a 	slli	r2,r2,8
 4001fa8:	10803fec 	andhi	r2,r2,255
 4001fac:	1886b03a 	or	r3,r3,r2
 4001fb0:	e0bfe717 	ldw	r2,-100(fp)
 4001fb4:	10800a17 	ldw	r2,40(r2)
 4001fb8:	1004d23a 	srli	r2,r2,8
 4001fbc:	10bfc00c 	andi	r2,r2,65280
 4001fc0:	1886b03a 	or	r3,r3,r2
 4001fc4:	e0bfe717 	ldw	r2,-100(fp)
 4001fc8:	10800a17 	ldw	r2,40(r2)
 4001fcc:	1004d63a 	srli	r2,r2,24
 4001fd0:	1886b03a 	or	r3,r3,r2
 4001fd4:	e0bfe717 	ldw	r2,-100(fp)
 4001fd8:	10c00a15 	stw	r3,40(r2)
				break;
 4001fdc:	00005c06 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpT2value :
				opt_len = _dhcpUdpSocket.read();
 4001fe0:	e0bfe717 	ldw	r2,-100(fp)
 4001fe4:	10c01204 	addi	r3,r2,72
 4001fe8:	00bfffc4 	movi	r2,-1
 4001fec:	e0bfeb15 	stw	r2,-84(fp)
 4001ff0:	1809883a 	mov	r4,r3
 4001ff4:	4005df40 	call	4005df4 <_ZN11EthernetUDP4readEv>
 4001ff8:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
 4001ffc:	e0bfe717 	ldw	r2,-100(fp)
 4002000:	10c01204 	addi	r3,r2,72
 4002004:	e0bfe717 	ldw	r2,-100(fp)
 4002008:	10800b04 	addi	r2,r2,44
 400200c:	01800104 	movi	r6,4
 4002010:	100b883a 	mov	r5,r2
 4002014:	1809883a 	mov	r4,r3
 4002018:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				_dhcpT2 = ntohl(_dhcpT2);
 400201c:	e0bfe717 	ldw	r2,-100(fp)
 4002020:	10800b17 	ldw	r2,44(r2)
 4002024:	1006963a 	slli	r3,r2,24
 4002028:	e0bfe717 	ldw	r2,-100(fp)
 400202c:	10800b17 	ldw	r2,44(r2)
 4002030:	1004923a 	slli	r2,r2,8
 4002034:	10803fec 	andhi	r2,r2,255
 4002038:	1886b03a 	or	r3,r3,r2
 400203c:	e0bfe717 	ldw	r2,-100(fp)
 4002040:	10800b17 	ldw	r2,44(r2)
 4002044:	1004d23a 	srli	r2,r2,8
 4002048:	10bfc00c 	andi	r2,r2,65280
 400204c:	1886b03a 	or	r3,r3,r2
 4002050:	e0bfe717 	ldw	r2,-100(fp)
 4002054:	10800b17 	ldw	r2,44(r2)
 4002058:	1004d63a 	srli	r2,r2,24
 400205c:	1886b03a 	or	r3,r3,r2
 4002060:	e0bfe717 	ldw	r2,-100(fp)
 4002064:	10c00b15 	stw	r3,44(r2)
				break;
 4002068:	00003906 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpIPaddrLeaseTime :
				opt_len = _dhcpUdpSocket.read();
 400206c:	e0bfe717 	ldw	r2,-100(fp)
 4002070:	10c01204 	addi	r3,r2,72
 4002074:	00bfffc4 	movi	r2,-1
 4002078:	e0bfeb15 	stw	r2,-84(fp)
 400207c:	1809883a 	mov	r4,r3
 4002080:	4005df40 	call	4005df4 <_ZN11EthernetUDP4readEv>
 4002084:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
 4002088:	e0bfe717 	ldw	r2,-100(fp)
 400208c:	10c01204 	addi	r3,r2,72
 4002090:	e0bfe717 	ldw	r2,-100(fp)
 4002094:	10800904 	addi	r2,r2,36
 4002098:	01800104 	movi	r6,4
 400209c:	100b883a 	mov	r5,r2
 40020a0:	1809883a 	mov	r4,r3
 40020a4:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				_dhcpLeaseTime = ntohl(_dhcpLeaseTime);
 40020a8:	e0bfe717 	ldw	r2,-100(fp)
 40020ac:	10800917 	ldw	r2,36(r2)
 40020b0:	1006963a 	slli	r3,r2,24
 40020b4:	e0bfe717 	ldw	r2,-100(fp)
 40020b8:	10800917 	ldw	r2,36(r2)
 40020bc:	1004923a 	slli	r2,r2,8
 40020c0:	10803fec 	andhi	r2,r2,255
 40020c4:	1886b03a 	or	r3,r3,r2
 40020c8:	e0bfe717 	ldw	r2,-100(fp)
 40020cc:	10800917 	ldw	r2,36(r2)
 40020d0:	1004d23a 	srli	r2,r2,8
 40020d4:	10bfc00c 	andi	r2,r2,65280
 40020d8:	1886b03a 	or	r3,r3,r2
 40020dc:	e0bfe717 	ldw	r2,-100(fp)
 40020e0:	10800917 	ldw	r2,36(r2)
 40020e4:	1004d63a 	srli	r2,r2,24
 40020e8:	1886b03a 	or	r3,r3,r2
 40020ec:	e0bfe717 	ldw	r2,-100(fp)
 40020f0:	10c00915 	stw	r3,36(r2)
				_renewInSec = _dhcpLeaseTime;
 40020f4:	e0bfe717 	ldw	r2,-100(fp)
 40020f8:	10c00917 	ldw	r3,36(r2)
 40020fc:	e0bfe717 	ldw	r2,-100(fp)
 4002100:	10c00c15 	stw	r3,48(r2)
				break;
 4002104:	00001206 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			default :
				opt_len = _dhcpUdpSocket.read();
 4002108:	e0bfe717 	ldw	r2,-100(fp)
 400210c:	10c01204 	addi	r3,r2,72
 4002110:	00bfffc4 	movi	r2,-1
 4002114:	e0bfeb15 	stw	r2,-84(fp)
 4002118:	1809883a 	mov	r4,r3
 400211c:	4005df40 	call	4005df4 <_ZN11EthernetUDP4readEv>
 4002120:	e0bfd845 	stb	r2,-159(fp)
				// Skip over the rest of this option
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
 4002124:	e0bfe717 	ldw	r2,-100(fp)
 4002128:	10801204 	addi	r2,r2,72
 400212c:	e0ffd843 	ldbu	r3,-159(fp)
 4002130:	180d883a 	mov	r6,r3
 4002134:	000b883a 	mov	r5,zero
 4002138:	1009883a 	mov	r4,r2
 400213c:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				break;
 4002140:	00000306 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>
			switch (_dhcpUdpSocket.read()) {
			case endOption :
				break;

			case padOption :
				break;
 4002144:	0001883a 	nop
 4002148:	003ec506 	br	4001c60 <__alt_data_end+0xfc001c60>
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));

		while (_dhcpUdpSocket.available() > 0) {
			switch (_dhcpUdpSocket.read()) {
			case endOption :
				break;
 400214c:	0001883a 	nop
		memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);

		// Skip to the option part
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));

		while (_dhcpUdpSocket.available() > 0) {
 4002150:	003ec306 	br	4001c60 <__alt_data_end+0xfc001c60>
			}
		}
	}

	// Need to skip to end of the packet regardless here
	_dhcpUdpSocket.flush(); // FIXME
 4002154:	e0bfe717 	ldw	r2,-100(fp)
 4002158:	10c01204 	addi	r3,r2,72
 400215c:	00bfffc4 	movi	r2,-1
 4002160:	e0bfeb15 	stw	r2,-84(fp)
 4002164:	1809883a 	mov	r4,r3
 4002168:	4005fe00 	call	4005fe0 <_ZN11EthernetUDP5flushEv>

	return type;
 400216c:	e0bfd803 	ldbu	r2,-160(fp)
 4002170:	e0bff705 	stb	r2,-36(fp)
 4002174:	00000806 	br	4002198 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x784>
 4002178:	e7002804 	addi	fp,fp,160
 400217c:	e0bfec17 	ldw	r2,-80(fp)
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
				break;

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 4002180:	0001883a 	nop
 4002184:	1007883a 	mov	r3,r2
 4002188:	00bfffc4 	movi	r2,-1
 400218c:	e0bfeb15 	stw	r2,-84(fp)
 4002190:	1809883a 	mov	r4,r3
 4002194:	400b1a00 	call	400b1a0 <_Unwind_SjLj_Resume>
 4002198:	e0bfea04 	addi	r2,fp,-88
 400219c:	1009883a 	mov	r4,r2
 40021a0:	400afbc0 	call	400afbc <_Unwind_SjLj_Unregister>

	// Need to skip to end of the packet regardless here
	_dhcpUdpSocket.flush(); // FIXME

	return type;
}
 40021a4:	e0bff703 	ldbu	r2,-36(fp)
 40021a8:	e6fff804 	addi	sp,fp,-32
 40021ac:	dfc00917 	ldw	ra,36(sp)
 40021b0:	df000817 	ldw	fp,32(sp)
 40021b4:	ddc00717 	ldw	r23,28(sp)
 40021b8:	dd800617 	ldw	r22,24(sp)
 40021bc:	dd400517 	ldw	r21,20(sp)
 40021c0:	dd000417 	ldw	r20,16(sp)
 40021c4:	dcc00317 	ldw	r19,12(sp)
 40021c8:	dc800217 	ldw	r18,8(sp)
 40021cc:	dc400117 	ldw	r17,4(sp)
 40021d0:	dc000017 	ldw	r16,0(sp)
 40021d4:	dec00a04 	addi	sp,sp,40
 40021d8:	f800283a 	ret

040021dc <_ZN9DhcpClass10checkLeaseEv>:
    2/DHCP_CHECK_RENEW_OK: renew success
    3/DHCP_CHECK_REBIND_FAIL: rebind fail
    4/DHCP_CHECK_REBIND_OK: rebind success
*/
int DhcpClass::checkLease()
{
 40021dc:	defffa04 	addi	sp,sp,-24
 40021e0:	dfc00515 	stw	ra,20(sp)
 40021e4:	df000415 	stw	fp,16(sp)
 40021e8:	df000404 	addi	fp,sp,16
 40021ec:	e13fff15 	stw	r4,-4(fp)
	int rc = DHCP_CHECK_NONE;
 40021f0:	e03ffc15 	stw	zero,-16(fp)

	unsigned long now = clock();
 40021f4:	400b2d40 	call	400b2d4 <clock>
 40021f8:	e0bffd15 	stw	r2,-12(fp)
	unsigned long elapsed = now - _lastCheckLeaseMillis;
 40021fc:	e0bfff17 	ldw	r2,-4(fp)
 4002200:	10801017 	ldw	r2,64(r2)
 4002204:	e0fffd17 	ldw	r3,-12(fp)
 4002208:	1885c83a 	sub	r2,r3,r2
 400220c:	e0bffe15 	stw	r2,-8(fp)

	// if more then one sec passed, reduce the counters accordingly
	if (elapsed >= 1000) {
 4002210:	e0bffe17 	ldw	r2,-8(fp)
 4002214:	1080fa30 	cmpltui	r2,r2,1000
 4002218:	10002a1e 	bne	r2,zero,40022c4 <_ZN9DhcpClass10checkLeaseEv+0xe8>
		// set the new timestamps
		_lastCheckLeaseMillis = now - (elapsed % 1000);
 400221c:	e0bffe17 	ldw	r2,-8(fp)
 4002220:	0140fa04 	movi	r5,1000
 4002224:	1009883a 	mov	r4,r2
 4002228:	400ad440 	call	400ad44 <__umodsi3>
 400222c:	1007883a 	mov	r3,r2
 4002230:	e0bffd17 	ldw	r2,-12(fp)
 4002234:	10c7c83a 	sub	r3,r2,r3
 4002238:	e0bfff17 	ldw	r2,-4(fp)
 400223c:	10c01015 	stw	r3,64(r2)
		elapsed = elapsed / 1000;
 4002240:	e0bffe17 	ldw	r2,-8(fp)
 4002244:	0140fa04 	movi	r5,1000
 4002248:	1009883a 	mov	r4,r2
 400224c:	400ace00 	call	400ace0 <__udivsi3>
 4002250:	e0bffe15 	stw	r2,-8(fp)

		// decrease the counters by elapsed seconds
		// we assume that the cycle time (elapsed) is fairly constant
		// if the remainder is less than cycle time * 2
		// do it early instead of late
		if (_renewInSec < elapsed * 2) {
 4002254:	e0bfff17 	ldw	r2,-4(fp)
 4002258:	10c00c17 	ldw	r3,48(r2)
 400225c:	e0bffe17 	ldw	r2,-8(fp)
 4002260:	1085883a 	add	r2,r2,r2
 4002264:	1880032e 	bgeu	r3,r2,4002274 <_ZN9DhcpClass10checkLeaseEv+0x98>
			_renewInSec = 0;
 4002268:	e0bfff17 	ldw	r2,-4(fp)
 400226c:	10000c15 	stw	zero,48(r2)
 4002270:	00000606 	br	400228c <_ZN9DhcpClass10checkLeaseEv+0xb0>
		} else {
			_renewInSec -= elapsed;
 4002274:	e0bfff17 	ldw	r2,-4(fp)
 4002278:	10c00c17 	ldw	r3,48(r2)
 400227c:	e0bffe17 	ldw	r2,-8(fp)
 4002280:	1887c83a 	sub	r3,r3,r2
 4002284:	e0bfff17 	ldw	r2,-4(fp)
 4002288:	10c00c15 	stw	r3,48(r2)
		}
		if (_rebindInSec < elapsed * 2) {
 400228c:	e0bfff17 	ldw	r2,-4(fp)
 4002290:	10c00d17 	ldw	r3,52(r2)
 4002294:	e0bffe17 	ldw	r2,-8(fp)
 4002298:	1085883a 	add	r2,r2,r2
 400229c:	1880032e 	bgeu	r3,r2,40022ac <_ZN9DhcpClass10checkLeaseEv+0xd0>
			_rebindInSec = 0;
 40022a0:	e0bfff17 	ldw	r2,-4(fp)
 40022a4:	10000d15 	stw	zero,52(r2)
 40022a8:	00000606 	br	40022c4 <_ZN9DhcpClass10checkLeaseEv+0xe8>
		} else {
			_rebindInSec -= elapsed;
 40022ac:	e0bfff17 	ldw	r2,-4(fp)
 40022b0:	10c00d17 	ldw	r3,52(r2)
 40022b4:	e0bffe17 	ldw	r2,-8(fp)
 40022b8:	1887c83a 	sub	r3,r3,r2
 40022bc:	e0bfff17 	ldw	r2,-4(fp)
 40022c0:	10c00d15 	stw	r3,52(r2)
		}
	}

	// if we have a lease but should renew, do it
	if (_renewInSec == 0 &&_dhcp_state == STATE_DHCP_LEASED) {
 40022c4:	e0bfff17 	ldw	r2,-4(fp)
 40022c8:	10800c17 	ldw	r2,48(r2)
 40022cc:	10000c1e 	bne	r2,zero,4002300 <_ZN9DhcpClass10checkLeaseEv+0x124>
 40022d0:	e0bfff17 	ldw	r2,-4(fp)
 40022d4:	10801103 	ldbu	r2,68(r2)
 40022d8:	10803fcc 	andi	r2,r2,255
 40022dc:	108000d8 	cmpnei	r2,r2,3
 40022e0:	1000071e 	bne	r2,zero,4002300 <_ZN9DhcpClass10checkLeaseEv+0x124>
		_dhcp_state = STATE_DHCP_REREQUEST;
 40022e4:	e0bfff17 	ldw	r2,-4(fp)
 40022e8:	00c00104 	movi	r3,4
 40022ec:	10c01105 	stb	r3,68(r2)
		rc = 1 + request_DHCP_lease();
 40022f0:	e13fff17 	ldw	r4,-4(fp)
 40022f4:	40012180 	call	4001218 <_ZN9DhcpClass18request_DHCP_leaseEv>
 40022f8:	10800044 	addi	r2,r2,1
 40022fc:	e0bffc15 	stw	r2,-16(fp)
	}

	// if we have a lease or is renewing but should bind, do it
	if (_rebindInSec == 0 && (_dhcp_state == STATE_DHCP_LEASED ||
 4002300:	e0bfff17 	ldw	r2,-4(fp)
 4002304:	10800d17 	ldw	r2,52(r2)
 4002308:	1000111e 	bne	r2,zero,4002350 <_ZN9DhcpClass10checkLeaseEv+0x174>
 400230c:	e0bfff17 	ldw	r2,-4(fp)
 4002310:	10801103 	ldbu	r2,68(r2)
 4002314:	10803fcc 	andi	r2,r2,255
 4002318:	108000e0 	cmpeqi	r2,r2,3
 400231c:	1000041e 	bne	r2,zero,4002330 <_ZN9DhcpClass10checkLeaseEv+0x154>
	  _dhcp_state == STATE_DHCP_START)) {
 4002320:	e0bfff17 	ldw	r2,-4(fp)
 4002324:	10801103 	ldbu	r2,68(r2)
		_dhcp_state = STATE_DHCP_REREQUEST;
		rc = 1 + request_DHCP_lease();
	}

	// if we have a lease or is renewing but should bind, do it
	if (_rebindInSec == 0 && (_dhcp_state == STATE_DHCP_LEASED ||
 4002328:	10803fcc 	andi	r2,r2,255
 400232c:	1000081e 	bne	r2,zero,4002350 <_ZN9DhcpClass10checkLeaseEv+0x174>
	  _dhcp_state == STATE_DHCP_START)) {
		// this should basically restart completely
		_dhcp_state = STATE_DHCP_START;
 4002330:	e0bfff17 	ldw	r2,-4(fp)
 4002334:	10001105 	stb	zero,68(r2)
		reset_DHCP_lease();
 4002338:	e13fff17 	ldw	r4,-4(fp)
 400233c:	40011d40 	call	40011d4 <_ZN9DhcpClass16reset_DHCP_leaseEv>
		rc = 3 + request_DHCP_lease();
 4002340:	e13fff17 	ldw	r4,-4(fp)
 4002344:	40012180 	call	4001218 <_ZN9DhcpClass18request_DHCP_leaseEv>
 4002348:	108000c4 	addi	r2,r2,3
 400234c:	e0bffc15 	stw	r2,-16(fp)
	}
	return rc;
 4002350:	e0bffc17 	ldw	r2,-16(fp)
}
 4002354:	e037883a 	mov	sp,fp
 4002358:	dfc00117 	ldw	ra,4(sp)
 400235c:	df000017 	ldw	fp,0(sp)
 4002360:	dec00204 	addi	sp,sp,8
 4002364:	f800283a 	ret

04002368 <_ZN9DhcpClass10getLocalIpEv>:

IPAddress DhcpClass::getLocalIp()
{
 4002368:	defffc04 	addi	sp,sp,-16
 400236c:	dfc00315 	stw	ra,12(sp)
 4002370:	df000215 	stw	fp,8(sp)
 4002374:	df000204 	addi	fp,sp,8
 4002378:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpLocalIp);
 400237c:	e0bfff17 	ldw	r2,-4(fp)
 4002380:	10800384 	addi	r2,r2,14
 4002384:	100b883a 	mov	r5,r2
 4002388:	e13ffe04 	addi	r4,fp,-8
 400238c:	4007d140 	call	4007d14 <_ZN9IPAddressC1EPKh>
 4002390:	e0bffe17 	ldw	r2,-8(fp)
}
 4002394:	e037883a 	mov	sp,fp
 4002398:	dfc00117 	ldw	ra,4(sp)
 400239c:	df000017 	ldw	fp,0(sp)
 40023a0:	dec00204 	addi	sp,sp,8
 40023a4:	f800283a 	ret

040023a8 <_ZN9DhcpClass13getSubnetMaskEv>:

IPAddress DhcpClass::getSubnetMask()
{
 40023a8:	defffc04 	addi	sp,sp,-16
 40023ac:	dfc00315 	stw	ra,12(sp)
 40023b0:	df000215 	stw	fp,8(sp)
 40023b4:	df000204 	addi	fp,sp,8
 40023b8:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpSubnetMask);
 40023bc:	e0bfff17 	ldw	r2,-4(fp)
 40023c0:	10800484 	addi	r2,r2,18
 40023c4:	100b883a 	mov	r5,r2
 40023c8:	e13ffe04 	addi	r4,fp,-8
 40023cc:	4007d140 	call	4007d14 <_ZN9IPAddressC1EPKh>
 40023d0:	e0bffe17 	ldw	r2,-8(fp)
}
 40023d4:	e037883a 	mov	sp,fp
 40023d8:	dfc00117 	ldw	ra,4(sp)
 40023dc:	df000017 	ldw	fp,0(sp)
 40023e0:	dec00204 	addi	sp,sp,8
 40023e4:	f800283a 	ret

040023e8 <_ZN9DhcpClass12getGatewayIpEv>:

IPAddress DhcpClass::getGatewayIp()
{
 40023e8:	defffc04 	addi	sp,sp,-16
 40023ec:	dfc00315 	stw	ra,12(sp)
 40023f0:	df000215 	stw	fp,8(sp)
 40023f4:	df000204 	addi	fp,sp,8
 40023f8:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpGatewayIp);
 40023fc:	e0bfff17 	ldw	r2,-4(fp)
 4002400:	10800584 	addi	r2,r2,22
 4002404:	100b883a 	mov	r5,r2
 4002408:	e13ffe04 	addi	r4,fp,-8
 400240c:	4007d140 	call	4007d14 <_ZN9IPAddressC1EPKh>
 4002410:	e0bffe17 	ldw	r2,-8(fp)
}
 4002414:	e037883a 	mov	sp,fp
 4002418:	dfc00117 	ldw	ra,4(sp)
 400241c:	df000017 	ldw	fp,0(sp)
 4002420:	dec00204 	addi	sp,sp,8
 4002424:	f800283a 	ret

04002428 <_ZN9DhcpClass15getDhcpServerIpEv>:

IPAddress DhcpClass::getDhcpServerIp()
{
 4002428:	defffc04 	addi	sp,sp,-16
 400242c:	dfc00315 	stw	ra,12(sp)
 4002430:	df000215 	stw	fp,8(sp)
 4002434:	df000204 	addi	fp,sp,8
 4002438:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpDhcpServerIp);
 400243c:	e0bfff17 	ldw	r2,-4(fp)
 4002440:	10800684 	addi	r2,r2,26
 4002444:	100b883a 	mov	r5,r2
 4002448:	e13ffe04 	addi	r4,fp,-8
 400244c:	4007d140 	call	4007d14 <_ZN9IPAddressC1EPKh>
 4002450:	e0bffe17 	ldw	r2,-8(fp)
}
 4002454:	e037883a 	mov	sp,fp
 4002458:	dfc00117 	ldw	ra,4(sp)
 400245c:	df000017 	ldw	fp,0(sp)
 4002460:	dec00204 	addi	sp,sp,8
 4002464:	f800283a 	ret

04002468 <_ZN9DhcpClass14getDnsServerIpEv>:

IPAddress DhcpClass::getDnsServerIp()
{
 4002468:	defffc04 	addi	sp,sp,-16
 400246c:	dfc00315 	stw	ra,12(sp)
 4002470:	df000215 	stw	fp,8(sp)
 4002474:	df000204 	addi	fp,sp,8
 4002478:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpDnsServerIp);
 400247c:	e0bfff17 	ldw	r2,-4(fp)
 4002480:	10800784 	addi	r2,r2,30
 4002484:	100b883a 	mov	r5,r2
 4002488:	e13ffe04 	addi	r4,fp,-8
 400248c:	4007d140 	call	4007d14 <_ZN9IPAddressC1EPKh>
 4002490:	e0bffe17 	ldw	r2,-8(fp)
}
 4002494:	e037883a 	mov	sp,fp
 4002498:	dfc00117 	ldw	ra,4(sp)
 400249c:	df000017 	ldw	fp,0(sp)
 40024a0:	dec00204 	addi	sp,sp,8
 40024a4:	f800283a 	ret

040024a8 <_ZN9DhcpClass9printByteEPch>:

void DhcpClass::printByte(char * buf, uint8_t n )
{
 40024a8:	defff904 	addi	sp,sp,-28
 40024ac:	df000615 	stw	fp,24(sp)
 40024b0:	df000604 	addi	fp,sp,24
 40024b4:	e13ffd15 	stw	r4,-12(fp)
 40024b8:	e17ffe15 	stw	r5,-8(fp)
 40024bc:	3005883a 	mov	r2,r6
 40024c0:	e0bfff05 	stb	r2,-4(fp)
	char *str = &buf[1];
 40024c4:	e0bffe17 	ldw	r2,-8(fp)
 40024c8:	10800044 	addi	r2,r2,1
 40024cc:	e0bffa15 	stw	r2,-24(fp)
	buf[0]='0';
 40024d0:	e0bffe17 	ldw	r2,-8(fp)
 40024d4:	00c00c04 	movi	r3,48
 40024d8:	10c00005 	stb	r3,0(r2)
	do {
		unsigned long m = n;
 40024dc:	e0bfff03 	ldbu	r2,-4(fp)
 40024e0:	e0bffb15 	stw	r2,-20(fp)
		n /= 16;
 40024e4:	e0bfff03 	ldbu	r2,-4(fp)
 40024e8:	1004d13a 	srli	r2,r2,4
 40024ec:	e0bfff05 	stb	r2,-4(fp)
		char c = m - 16 * n;
 40024f0:	e0bffb17 	ldw	r2,-20(fp)
 40024f4:	1007883a 	mov	r3,r2
 40024f8:	e0bfff03 	ldbu	r2,-4(fp)
 40024fc:	1004913a 	slli	r2,r2,4
 4002500:	1885c83a 	sub	r2,r3,r2
 4002504:	e0bffc05 	stb	r2,-16(fp)
		*str-- = c < 10 ? c + '0' : c + 'A' - 10;
 4002508:	e0bffa17 	ldw	r2,-24(fp)
 400250c:	10ffffc4 	addi	r3,r2,-1
 4002510:	e0fffa15 	stw	r3,-24(fp)
 4002514:	e0fffc07 	ldb	r3,-16(fp)
 4002518:	18c00288 	cmpgei	r3,r3,10
 400251c:	1800031e 	bne	r3,zero,400252c <_ZN9DhcpClass9printByteEPch+0x84>
 4002520:	e0fffc03 	ldbu	r3,-16(fp)
 4002524:	18c00c04 	addi	r3,r3,48
 4002528:	00000206 	br	4002534 <_ZN9DhcpClass9printByteEPch+0x8c>
 400252c:	e0fffc03 	ldbu	r3,-16(fp)
 4002530:	18c00dc4 	addi	r3,r3,55
 4002534:	10c00005 	stb	r3,0(r2)

void DhcpClass::printByte(char * buf, uint8_t n )
{
	char *str = &buf[1];
	buf[0]='0';
	do {
 4002538:	e0bfff03 	ldbu	r2,-4(fp)
 400253c:	10000126 	beq	r2,zero,4002544 <_ZN9DhcpClass9printByteEPch+0x9c>
 4002540:	003fe606 	br	40024dc <__alt_data_end+0xfc0024dc>
		unsigned long m = n;
		n /= 16;
		char c = m - 16 * n;
		*str-- = c < 10 ? c + '0' : c + 'A' - 10;
	} while(n);
}
 4002544:	0001883a 	nop
 4002548:	e037883a 	mov	sp,fp
 400254c:	df000017 	ldw	fp,0(sp)
 4002550:	dec00104 	addi	sp,sp,4
 4002554:	f800283a 	ret

04002558 <_Z41__static_initialization_and_destruction_0ii>:
 4002558:	defffb04 	addi	sp,sp,-20
 400255c:	dfc00415 	stw	ra,16(sp)
 4002560:	df000315 	stw	fp,12(sp)
 4002564:	df000304 	addi	fp,sp,12
 4002568:	e13ffe15 	stw	r4,-8(fp)
 400256c:	e17fff15 	stw	r5,-4(fp)
 4002570:	e0bffe17 	ldw	r2,-8(fp)
 4002574:	10800058 	cmpnei	r2,r2,1
 4002578:	1000091e 	bne	r2,zero,40025a0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 400257c:	e0ffff17 	ldw	r3,-4(fp)
 4002580:	00bfffd4 	movui	r2,65535
 4002584:	1880061e 	bne	r3,r2,40025a0 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4002588:	d8000015 	stw	zero,0(sp)
 400258c:	000f883a 	mov	r7,zero
 4002590:	000d883a 	mov	r6,zero
 4002594:	000b883a 	mov	r5,zero
 4002598:	d112cf04 	addi	r4,gp,19260
 400259c:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
 40025a0:	0001883a 	nop
 40025a4:	e037883a 	mov	sp,fp
 40025a8:	dfc00117 	ldw	ra,4(sp)
 40025ac:	df000017 	ldw	fp,0(sp)
 40025b0:	dec00204 	addi	sp,sp,8
 40025b4:	f800283a 	ret

040025b8 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
 40025b8:	defffe04 	addi	sp,sp,-8
 40025bc:	dfc00115 	stw	ra,4(sp)
 40025c0:	df000015 	stw	fp,0(sp)
 40025c4:	d839883a 	mov	fp,sp
 40025c8:	017fffd4 	movui	r5,65535
 40025cc:	01000044 	movi	r4,1
 40025d0:	40025580 	call	4002558 <_Z41__static_initialization_and_destruction_0ii>
 40025d4:	e037883a 	mov	sp,fp
 40025d8:	dfc00117 	ldw	ra,4(sp)
 40025dc:	df000017 	ldw	fp,0(sp)
 40025e0:	dec00204 	addi	sp,sp,8
 40025e4:	f800283a 	ret

040025e8 <_ZNK9IPAddresseqERKS_>:
    void print();

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() const { return _address.dword; };
    bool operator==(const IPAddress& addr) const { return _address.dword == addr._address.dword; };
 40025e8:	defffd04 	addi	sp,sp,-12
 40025ec:	df000215 	stw	fp,8(sp)
 40025f0:	df000204 	addi	fp,sp,8
 40025f4:	e13ffe15 	stw	r4,-8(fp)
 40025f8:	e17fff15 	stw	r5,-4(fp)
 40025fc:	e0bffe17 	ldw	r2,-8(fp)
 4002600:	10c00017 	ldw	r3,0(r2)
 4002604:	e0bfff17 	ldw	r2,-4(fp)
 4002608:	10800017 	ldw	r2,0(r2)
 400260c:	1885003a 	cmpeq	r2,r3,r2
 4002610:	e037883a 	mov	sp,fp
 4002614:	df000017 	ldw	fp,0(sp)
 4002618:	dec00104 	addi	sp,sp,4
 400261c:	f800283a 	ret

04002620 <_ZN11EthernetUDP8remoteIPEv>:
	// Return the next byte from the current packet without moving on to the next byte
	virtual int peek();
	virtual void flush(); // Finish reading the current packet

	// Return the IP address of the host who sent the current incoming packet
	virtual IPAddress remoteIP() { return _remoteIP; };
 4002620:	defffe04 	addi	sp,sp,-8
 4002624:	df000115 	stw	fp,4(sp)
 4002628:	df000104 	addi	fp,sp,4
 400262c:	e13fff15 	stw	r4,-4(fp)
 4002630:	e0bfff17 	ldw	r2,-4(fp)
 4002634:	10800217 	ldw	r2,8(r2)
 4002638:	e037883a 	mov	sp,fp
 400263c:	df000017 	ldw	fp,0(sp)
 4002640:	dec00104 	addi	sp,sp,4
 4002644:	f800283a 	ret

04002648 <_ZN11EthernetUDP10remotePortEv>:
	// Return the port of the host who sent the current incoming packet
	virtual uint16_t remotePort() { return _remotePort; };
 4002648:	defffe04 	addi	sp,sp,-8
 400264c:	df000115 	stw	fp,4(sp)
 4002650:	df000104 	addi	fp,sp,4
 4002654:	e13fff15 	stw	r4,-4(fp)
 4002658:	e0bfff17 	ldw	r2,-4(fp)
 400265c:	1080030b 	ldhu	r2,12(r2)
 4002660:	e037883a 	mov	sp,fp
 4002664:	df000017 	ldw	fp,0(sp)
 4002668:	dec00104 	addi	sp,sp,4
 400266c:	f800283a 	ret

04002670 <_ZN9DNSClient5beginERK9IPAddress>:
#define INVALID_SERVER   -2
#define TRUNCATED        -3
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
 4002670:	defffd04 	addi	sp,sp,-12
 4002674:	df000215 	stw	fp,8(sp)
 4002678:	df000204 	addi	fp,sp,8
 400267c:	e13ffe15 	stw	r4,-8(fp)
 4002680:	e17fff15 	stw	r5,-4(fp)
	iDNSServer = aDNSServer;
 4002684:	e0bffe17 	ldw	r2,-8(fp)
 4002688:	e0ffff17 	ldw	r3,-4(fp)
 400268c:	18c00017 	ldw	r3,0(r3)
 4002690:	10c00015 	stw	r3,0(r2)
	iRequestId = 0;
 4002694:	e0bffe17 	ldw	r2,-8(fp)
 4002698:	1000010d 	sth	zero,4(r2)
}
 400269c:	0001883a 	nop
 40026a0:	e037883a 	mov	sp,fp
 40026a4:	df000017 	ldw	fp,0(sp)
 40026a8:	dec00104 	addi	sp,sp,4
 40026ac:	f800283a 	ret

040026b0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:


int DNSClient::inet_aton(const char* address, IPAddress& result)
{
 40026b0:	defffa04 	addi	sp,sp,-24
 40026b4:	dfc00515 	stw	ra,20(sp)
 40026b8:	df000415 	stw	fp,16(sp)
 40026bc:	df000404 	addi	fp,sp,16
 40026c0:	e13ffd15 	stw	r4,-12(fp)
 40026c4:	e17ffe15 	stw	r5,-8(fp)
 40026c8:	e1bfff15 	stw	r6,-4(fp)
	uint16_t acc = 0; // Accumulator
 40026cc:	e03ffc0d 	sth	zero,-16(fp)
	uint8_t dots = 0;
 40026d0:	e03ffc85 	stb	zero,-14(fp)

	while (*address) {
 40026d4:	e0bffe17 	ldw	r2,-8(fp)
 40026d8:	10800003 	ldbu	r2,0(r2)
 40026dc:	10803fcc 	andi	r2,r2,255
 40026e0:	1080201c 	xori	r2,r2,128
 40026e4:	10bfe004 	addi	r2,r2,-128
 40026e8:	10002d26 	beq	r2,zero,40027a0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xf0>
		char c = *address++;
 40026ec:	e0bffe17 	ldw	r2,-8(fp)
 40026f0:	10c00044 	addi	r3,r2,1
 40026f4:	e0fffe15 	stw	r3,-8(fp)
 40026f8:	10800003 	ldbu	r2,0(r2)
 40026fc:	e0bffcc5 	stb	r2,-13(fp)
		if (c >= '0' && c <= '9') {
 4002700:	e0bffcc7 	ldb	r2,-13(fp)
 4002704:	10800c10 	cmplti	r2,r2,48
 4002708:	10000f1e 	bne	r2,zero,4002748 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x98>
 400270c:	e0bffcc7 	ldb	r2,-13(fp)
 4002710:	10800e88 	cmpgei	r2,r2,58
 4002714:	10000c1e 	bne	r2,zero,4002748 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x98>
			acc = acc * 10 + (c - '0');
 4002718:	e0bffc0b 	ldhu	r2,-16(fp)
 400271c:	108002a4 	muli	r2,r2,10
 4002720:	1007883a 	mov	r3,r2
 4002724:	e0bffcc7 	ldb	r2,-13(fp)
 4002728:	1885883a 	add	r2,r3,r2
 400272c:	10bff404 	addi	r2,r2,-48
 4002730:	e0bffc0d 	sth	r2,-16(fp)
			if (acc > 255) {
 4002734:	e0bffc0b 	ldhu	r2,-16(fp)
 4002738:	10804030 	cmpltui	r2,r2,256
 400273c:	1000171e 	bne	r2,zero,400279c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xec>
				// Value out of [0..255] range
				return 0;
 4002740:	0005883a 	mov	r2,zero
 4002744:	00002106 	br	40027cc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
			}
		} else if (c == '.') {
 4002748:	e0bffcc7 	ldb	r2,-13(fp)
 400274c:	10800b98 	cmpnei	r2,r2,46
 4002750:	1000101e 	bne	r2,zero,4002794 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xe4>
			if (dots == 3) {
 4002754:	e0bffc83 	ldbu	r2,-14(fp)
 4002758:	108000d8 	cmpnei	r2,r2,3
 400275c:	1000021e 	bne	r2,zero,4002768 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xb8>
				// Too much dots (there must be 3 dots)
				return 0;
 4002760:	0005883a 	mov	r2,zero
 4002764:	00001906 	br	40027cc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
			}
			result[dots++] = acc;
 4002768:	e0bffc83 	ldbu	r2,-14(fp)
 400276c:	10c00044 	addi	r3,r2,1
 4002770:	e0fffc85 	stb	r3,-14(fp)
 4002774:	10803fcc 	andi	r2,r2,255
 4002778:	100b883a 	mov	r5,r2
 400277c:	e13fff17 	ldw	r4,-4(fp)
 4002780:	400318c0 	call	400318c <_ZN9IPAddressixEi>
 4002784:	e0fffc0b 	ldhu	r3,-16(fp)
 4002788:	10c00005 	stb	r3,0(r2)
			acc = 0;
 400278c:	e03ffc0d 	sth	zero,-16(fp)
 4002790:	003fd006 	br	40026d4 <__alt_data_end+0xfc0026d4>
		} else {
			// Invalid char
			return 0;
 4002794:	0005883a 	mov	r2,zero
 4002798:	00000c06 	br	40027cc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
int DNSClient::inet_aton(const char* address, IPAddress& result)
{
	uint16_t acc = 0; // Accumulator
	uint8_t dots = 0;

	while (*address) {
 400279c:	003fcd06 	br	40026d4 <__alt_data_end+0xfc0026d4>
			// Invalid char
			return 0;
		}
	}

	if (dots != 3) {
 40027a0:	e0bffc83 	ldbu	r2,-14(fp)
 40027a4:	108000e0 	cmpeqi	r2,r2,3
 40027a8:	1000021e 	bne	r2,zero,40027b4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x104>
		// Too few dots (there must be 3 dots)
		return 0;
 40027ac:	0005883a 	mov	r2,zero
 40027b0:	00000606 	br	40027cc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x11c>
	}
	result[3] = acc;
 40027b4:	014000c4 	movi	r5,3
 40027b8:	e13fff17 	ldw	r4,-4(fp)
 40027bc:	400318c0 	call	400318c <_ZN9IPAddressixEi>
 40027c0:	e0fffc0b 	ldhu	r3,-16(fp)
 40027c4:	10c00005 	stb	r3,0(r2)
	return 1;
 40027c8:	00800044 	movi	r2,1
}
 40027cc:	e037883a 	mov	sp,fp
 40027d0:	dfc00117 	ldw	ra,4(sp)
 40027d4:	df000017 	ldw	fp,0(sp)
 40027d8:	dec00204 	addi	sp,sp,8
 40027dc:	f800283a 	ret

040027e0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>:

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult, uint16_t timeout)
{
 40027e0:	defff604 	addi	sp,sp,-40
 40027e4:	dfc00915 	stw	ra,36(sp)
 40027e8:	df000815 	stw	fp,32(sp)
 40027ec:	dc000715 	stw	r16,28(sp)
 40027f0:	df000804 	addi	fp,sp,32
 40027f4:	e13ffb15 	stw	r4,-20(fp)
 40027f8:	e17ffc15 	stw	r5,-16(fp)
 40027fc:	e1bffd15 	stw	r6,-12(fp)
 4002800:	3805883a 	mov	r2,r7
 4002804:	e0bffe0d 	sth	r2,-8(fp)
	int ret = 0;
 4002808:	e03ff815 	stw	zero,-32(fp)

	// See if it's a numeric IP address
	if (inet_aton(aHostname, aResult)) {
 400280c:	e1bffd17 	ldw	r6,-12(fp)
 4002810:	e17ffc17 	ldw	r5,-16(fp)
 4002814:	e13ffb17 	ldw	r4,-20(fp)
 4002818:	40026b00 	call	40026b0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
 400281c:	1004c03a 	cmpne	r2,r2,zero
 4002820:	10803fcc 	andi	r2,r2,255
 4002824:	10000226 	beq	r2,zero,4002830 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x50>
		// It is, our work here is done
		return 1;
 4002828:	00800044 	movi	r2,1
 400282c:	00004a06 	br	4002958 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x178>
	}

	// Check we've got a valid DNS server to use
	if (iDNSServer == INADDR_NONE) {
 4002830:	e0bffb17 	ldw	r2,-20(fp)
 4002834:	d152d004 	addi	r5,gp,19264
 4002838:	1009883a 	mov	r4,r2
 400283c:	40025e80 	call	40025e8 <_ZNK9IPAddresseqERKS_>
 4002840:	10803fcc 	andi	r2,r2,255
 4002844:	10000226 	beq	r2,zero,4002850 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x70>
		return INVALID_SERVER;
 4002848:	00bfff84 	movi	r2,-2
 400284c:	00004206 	br	4002958 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x178>
	}
	
	// Find a socket to use
	if (iUdp.begin(1024+(clock() & 0xF)) == 1) {
 4002850:	e0bffb17 	ldw	r2,-20(fp)
 4002854:	14000204 	addi	r16,r2,8
 4002858:	400b2d40 	call	400b2d4 <clock>
 400285c:	108003cc 	andi	r2,r2,15
 4002860:	10810004 	addi	r2,r2,1024
 4002864:	10bfffcc 	andi	r2,r2,65535
 4002868:	100b883a 	mov	r5,r2
 400286c:	8009883a 	mov	r4,r16
 4002870:	40059540 	call	4005954 <_ZN11EthernetUDP5beginEt>
 4002874:	10803fcc 	andi	r2,r2,255
 4002878:	10800060 	cmpeqi	r2,r2,1
 400287c:	10803fcc 	andi	r2,r2,255
 4002880:	10003426 	beq	r2,zero,4002954 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x174>
		// Try up to three times
		int retries = 0;
 4002884:	e03ffa15 	stw	zero,-24(fp)
		// while ((retries < 3) && (ret <= 0)) {
		// Send DNS request
		ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
 4002888:	e0bffb17 	ldw	r2,-20(fp)
 400288c:	10c00204 	addi	r3,r2,8
 4002890:	e0bffb17 	ldw	r2,-20(fp)
 4002894:	01800d44 	movi	r6,53
 4002898:	11400017 	ldw	r5,0(r2)
 400289c:	1809883a 	mov	r4,r3
 40028a0:	4005b4c0 	call	4005b4c <_ZN11EthernetUDP11beginPacketE9IPAddresst>
 40028a4:	e0bff815 	stw	r2,-32(fp)
		if (ret != 0) {
 40028a8:	e0bff817 	ldw	r2,-32(fp)
 40028ac:	10002226 	beq	r2,zero,4002938 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
			// Now output the request data
			ret = BuildRequest(aHostname);
 40028b0:	e17ffc17 	ldw	r5,-16(fp)
 40028b4:	e13ffb17 	ldw	r4,-20(fp)
 40028b8:	40029700 	call	4002970 <_ZN9DNSClient12BuildRequestEPKc>
 40028bc:	10bfffcc 	andi	r2,r2,65535
 40028c0:	e0bff815 	stw	r2,-32(fp)
			if (ret != 0) {
 40028c4:	e0bff817 	ldw	r2,-32(fp)
 40028c8:	10001b26 	beq	r2,zero,4002938 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
				// And finally send the request
				ret = iUdp.endPacket();
 40028cc:	e0bffb17 	ldw	r2,-20(fp)
 40028d0:	10800204 	addi	r2,r2,8
 40028d4:	1009883a 	mov	r4,r2
 40028d8:	4005bcc0 	call	4005bcc <_ZN11EthernetUDP9endPacketEv>
 40028dc:	e0bff815 	stw	r2,-32(fp)
				if (ret != 0) {
 40028e0:	e0bff817 	ldw	r2,-32(fp)
 40028e4:	10001426 	beq	r2,zero,4002938 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
					// Now wait for a response
					int wait_retries = 0;
 40028e8:	e03ff915 	stw	zero,-28(fp)
					ret = TIMED_OUT;
 40028ec:	00bfffc4 	movi	r2,-1
 40028f0:	e0bff815 	stw	r2,-32(fp)
					while ((wait_retries < 3) && (ret == TIMED_OUT)) {
 40028f4:	e0bff917 	ldw	r2,-28(fp)
 40028f8:	108000c8 	cmpgei	r2,r2,3
 40028fc:	10000e1e 	bne	r2,zero,4002938 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
 4002900:	e0bff817 	ldw	r2,-32(fp)
 4002904:	10bfffd8 	cmpnei	r2,r2,-1
 4002908:	10000b1e 	bne	r2,zero,4002938 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
						ret = ProcessResponse(timeout, aResult);
 400290c:	e0bffe0b 	ldhu	r2,-8(fp)
 4002910:	e1bffd17 	ldw	r6,-12(fp)
 4002914:	100b883a 	mov	r5,r2
 4002918:	e13ffb17 	ldw	r4,-20(fp)
 400291c:	4002bb80 	call	4002bb8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress>
 4002920:	10bfffcc 	andi	r2,r2,65535
 4002924:	e0bff815 	stw	r2,-32(fp)
						wait_retries++;
 4002928:	e0bff917 	ldw	r2,-28(fp)
 400292c:	10800044 	addi	r2,r2,1
 4002930:	e0bff915 	stw	r2,-28(fp)
				ret = iUdp.endPacket();
				if (ret != 0) {
					// Now wait for a response
					int wait_retries = 0;
					ret = TIMED_OUT;
					while ((wait_retries < 3) && (ret == TIMED_OUT)) {
 4002934:	003fef06 	br	40028f4 <__alt_data_end+0xfc0028f4>
						wait_retries++;
					}
				}
			}
		}
		retries++;
 4002938:	e0bffa17 	ldw	r2,-24(fp)
 400293c:	10800044 	addi	r2,r2,1
 4002940:	e0bffa15 	stw	r2,-24(fp)
		//}

		// We're done with the socket now
		iUdp.stop();
 4002944:	e0bffb17 	ldw	r2,-20(fp)
 4002948:	10800204 	addi	r2,r2,8
 400294c:	1009883a 	mov	r4,r2
 4002950:	4005a280 	call	4005a28 <_ZN11EthernetUDP4stopEv>
	}

	return ret;
 4002954:	e0bff817 	ldw	r2,-32(fp)
}
 4002958:	e6ffff04 	addi	sp,fp,-4
 400295c:	dfc00217 	ldw	ra,8(sp)
 4002960:	df000117 	ldw	fp,4(sp)
 4002964:	dc000017 	ldw	r16,0(sp)
 4002968:	dec00304 	addi	sp,sp,12
 400296c:	f800283a 	ret

04002970 <_ZN9DNSClient12BuildRequestEPKc>:

uint16_t DNSClient::BuildRequest(const char* aName)
{
 4002970:	defff904 	addi	sp,sp,-28
 4002974:	dfc00615 	stw	ra,24(sp)
 4002978:	df000515 	stw	fp,20(sp)
 400297c:	df000504 	addi	fp,sp,20
 4002980:	e13ffe15 	stw	r4,-8(fp)
 4002984:	e17fff15 	stw	r5,-4(fp)
	//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	//    |                    ARCOUNT                    |
	//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// As we only support one request at a time at present, we can simplify
	// some of this header
	iRequestId = clock(); // generate a random ID
 4002988:	400b2d40 	call	400b2d4 <clock>
 400298c:	1007883a 	mov	r3,r2
 4002990:	e0bffe17 	ldw	r2,-8(fp)
 4002994:	10c0010d 	sth	r3,4(r2)
	uint16_t twoByteBuffer;

	// FIXME We should also check that there's enough space available to write to, rather
	// FIXME than assume there's enough space (as the code does at present)
	iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
 4002998:	e0bffe17 	ldw	r2,-8(fp)
 400299c:	10c00204 	addi	r3,r2,8
 40029a0:	e0bffe17 	ldw	r2,-8(fp)
 40029a4:	10800104 	addi	r2,r2,4
 40029a8:	01800084 	movi	r6,2
 40029ac:	100b883a 	mov	r5,r2
 40029b0:	1809883a 	mov	r4,r3
 40029b4:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
 40029b8:	00800044 	movi	r2,1
 40029bc:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 40029c0:	e0bffe17 	ldw	r2,-8(fp)
 40029c4:	10800204 	addi	r2,r2,8
 40029c8:	e0fffd04 	addi	r3,fp,-12
 40029cc:	01800084 	movi	r6,2
 40029d0:	180b883a 	mov	r5,r3
 40029d4:	1009883a 	mov	r4,r2
 40029d8:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(1);  // One question record
 40029dc:	00804004 	movi	r2,256
 40029e0:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 40029e4:	e0bffe17 	ldw	r2,-8(fp)
 40029e8:	10800204 	addi	r2,r2,8
 40029ec:	e0fffd04 	addi	r3,fp,-12
 40029f0:	01800084 	movi	r6,2
 40029f4:	180b883a 	mov	r5,r3
 40029f8:	1009883a 	mov	r4,r2
 40029fc:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = 0;  // Zero answer records
 4002a00:	e03ffd0d 	sth	zero,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002a04:	e0bffe17 	ldw	r2,-8(fp)
 4002a08:	10800204 	addi	r2,r2,8
 4002a0c:	e0fffd04 	addi	r3,fp,-12
 4002a10:	01800084 	movi	r6,2
 4002a14:	180b883a 	mov	r5,r3
 4002a18:	1009883a 	mov	r4,r2
 4002a1c:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>

	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002a20:	e0bffe17 	ldw	r2,-8(fp)
 4002a24:	10800204 	addi	r2,r2,8
 4002a28:	e0fffd04 	addi	r3,fp,-12
 4002a2c:	01800084 	movi	r6,2
 4002a30:	180b883a 	mov	r5,r3
 4002a34:	1009883a 	mov	r4,r2
 4002a38:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>
	// and zero additional records
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002a3c:	e0bffe17 	ldw	r2,-8(fp)
 4002a40:	10800204 	addi	r2,r2,8
 4002a44:	e0fffd04 	addi	r3,fp,-12
 4002a48:	01800084 	movi	r6,2
 4002a4c:	180b883a 	mov	r5,r3
 4002a50:	1009883a 	mov	r4,r2
 4002a54:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>

	// Build question
	const char* start =aName;
 4002a58:	e0bfff17 	ldw	r2,-4(fp)
 4002a5c:	e0bffb15 	stw	r2,-20(fp)
	const char* end =start;
 4002a60:	e0bffb17 	ldw	r2,-20(fp)
 4002a64:	e0bffc15 	stw	r2,-16(fp)
	uint8_t len;
	// Run through the name being requested
	while (*end) {
 4002a68:	e0bffc17 	ldw	r2,-16(fp)
 4002a6c:	10800003 	ldbu	r2,0(r2)
 4002a70:	10803fcc 	andi	r2,r2,255
 4002a74:	1080201c 	xori	r2,r2,128
 4002a78:	10bfe004 	addi	r2,r2,-128
 4002a7c:	10002e26 	beq	r2,zero,4002b38 <_ZN9DNSClient12BuildRequestEPKc+0x1c8>
		// Find out how long this section of the name is
		end = start;
 4002a80:	e0bffb17 	ldw	r2,-20(fp)
 4002a84:	e0bffc15 	stw	r2,-16(fp)
		while (*end && (*end != '.') ) {
 4002a88:	e0bffc17 	ldw	r2,-16(fp)
 4002a8c:	10800003 	ldbu	r2,0(r2)
 4002a90:	10803fcc 	andi	r2,r2,255
 4002a94:	1080201c 	xori	r2,r2,128
 4002a98:	10bfe004 	addi	r2,r2,-128
 4002a9c:	10000b26 	beq	r2,zero,4002acc <_ZN9DNSClient12BuildRequestEPKc+0x15c>
 4002aa0:	e0bffc17 	ldw	r2,-16(fp)
 4002aa4:	10800003 	ldbu	r2,0(r2)
 4002aa8:	10803fcc 	andi	r2,r2,255
 4002aac:	1080201c 	xori	r2,r2,128
 4002ab0:	10bfe004 	addi	r2,r2,-128
 4002ab4:	10800ba0 	cmpeqi	r2,r2,46
 4002ab8:	1000041e 	bne	r2,zero,4002acc <_ZN9DNSClient12BuildRequestEPKc+0x15c>
			end++;
 4002abc:	e0bffc17 	ldw	r2,-16(fp)
 4002ac0:	10800044 	addi	r2,r2,1
 4002ac4:	e0bffc15 	stw	r2,-16(fp)
	uint8_t len;
	// Run through the name being requested
	while (*end) {
		// Find out how long this section of the name is
		end = start;
		while (*end && (*end != '.') ) {
 4002ac8:	003fef06 	br	4002a88 <__alt_data_end+0xfc002a88>
			end++;
		}

		if (end-start > 0) {
 4002acc:	e0fffc17 	ldw	r3,-16(fp)
 4002ad0:	e0bffb17 	ldw	r2,-20(fp)
 4002ad4:	1885c83a 	sub	r2,r3,r2
 4002ad8:	0080130e 	bge	zero,r2,4002b28 <_ZN9DNSClient12BuildRequestEPKc+0x1b8>
			// Write out the size of this section
			len = end-start;
 4002adc:	e0fffc17 	ldw	r3,-16(fp)
 4002ae0:	e0bffb17 	ldw	r2,-20(fp)
 4002ae4:	1885c83a 	sub	r2,r3,r2
 4002ae8:	e0bffd85 	stb	r2,-10(fp)
			iUdp.write(&len, sizeof(len));
 4002aec:	e0bffe17 	ldw	r2,-8(fp)
 4002af0:	10800204 	addi	r2,r2,8
 4002af4:	e0fffd84 	addi	r3,fp,-10
 4002af8:	01800044 	movi	r6,1
 4002afc:	180b883a 	mov	r5,r3
 4002b00:	1009883a 	mov	r4,r2
 4002b04:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>
			// And then write out the section
			iUdp.write((uint8_t*)start, end-start);
 4002b08:	e0bffe17 	ldw	r2,-8(fp)
 4002b0c:	11000204 	addi	r4,r2,8
 4002b10:	e0fffc17 	ldw	r3,-16(fp)
 4002b14:	e0bffb17 	ldw	r2,-20(fp)
 4002b18:	1885c83a 	sub	r2,r3,r2
 4002b1c:	100d883a 	mov	r6,r2
 4002b20:	e17ffb17 	ldw	r5,-20(fp)
 4002b24:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>
		}
		start = end+1;
 4002b28:	e0bffc17 	ldw	r2,-16(fp)
 4002b2c:	10800044 	addi	r2,r2,1
 4002b30:	e0bffb15 	stw	r2,-20(fp)
	// Build question
	const char* start =aName;
	const char* end =start;
	uint8_t len;
	// Run through the name being requested
	while (*end) {
 4002b34:	003fcc06 	br	4002a68 <__alt_data_end+0xfc002a68>
		start = end+1;
	}

	// We've got to the end of the question name, so
	// terminate it with a zero-length section
	len = 0;
 4002b38:	e03ffd85 	stb	zero,-10(fp)
	iUdp.write(&len, sizeof(len));
 4002b3c:	e0bffe17 	ldw	r2,-8(fp)
 4002b40:	10800204 	addi	r2,r2,8
 4002b44:	e0fffd84 	addi	r3,fp,-10
 4002b48:	01800044 	movi	r6,1
 4002b4c:	180b883a 	mov	r5,r3
 4002b50:	1009883a 	mov	r4,r2
 4002b54:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>
	// Finally the type and class of question
	twoByteBuffer = htons(TYPE_A);
 4002b58:	00804004 	movi	r2,256
 4002b5c:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002b60:	e0bffe17 	ldw	r2,-8(fp)
 4002b64:	10800204 	addi	r2,r2,8
 4002b68:	e0fffd04 	addi	r3,fp,-12
 4002b6c:	01800084 	movi	r6,2
 4002b70:	180b883a 	mov	r5,r3
 4002b74:	1009883a 	mov	r4,r2
 4002b78:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(CLASS_IN);  // Internet class of question
 4002b7c:	00804004 	movi	r2,256
 4002b80:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002b84:	e0bffe17 	ldw	r2,-8(fp)
 4002b88:	10800204 	addi	r2,r2,8
 4002b8c:	e0fffd04 	addi	r3,fp,-12
 4002b90:	01800084 	movi	r6,2
 4002b94:	180b883a 	mov	r5,r3
 4002b98:	1009883a 	mov	r4,r2
 4002b9c:	4005c380 	call	4005c38 <_ZN11EthernetUDP5writeEPKhj>
	// Success!  Everything buffered okay
	return 1;
 4002ba0:	00800044 	movi	r2,1
}
 4002ba4:	e037883a 	mov	sp,fp
 4002ba8:	dfc00117 	ldw	ra,4(sp)
 4002bac:	df000017 	ldw	fp,0(sp)
 4002bb0:	dec00204 	addi	sp,sp,8
 4002bb4:	f800283a 	ret

04002bb8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
 4002bb8:	defff104 	addi	sp,sp,-60
 4002bbc:	dfc00e15 	stw	ra,56(sp)
 4002bc0:	df000d15 	stw	fp,52(sp)
 4002bc4:	dc000c15 	stw	r16,48(sp)
 4002bc8:	df000d04 	addi	fp,sp,52
 4002bcc:	e13ffc15 	stw	r4,-16(fp)
 4002bd0:	2805883a 	mov	r2,r5
 4002bd4:	e1bffe15 	stw	r6,-8(fp)
 4002bd8:	e0bffd0d 	sth	r2,-12(fp)
	uint32_t startTime = clock();
 4002bdc:	400b2d40 	call	400b2d4 <clock>
 4002be0:	e0bff415 	stw	r2,-48(fp)

	// Wait for a response packet
	while (iUdp.parsePacket() <= 0) {
 4002be4:	e0bffc17 	ldw	r2,-16(fp)
 4002be8:	10800204 	addi	r2,r2,8
 4002bec:	1009883a 	mov	r4,r2
 4002bf0:	4005cc00 	call	4005cc0 <_ZN11EthernetUDP11parsePacketEv>
 4002bf4:	0084403a 	cmpge	r2,zero,r2
 4002bf8:	10803fcc 	andi	r2,r2,255
 4002bfc:	10000d26 	beq	r2,zero,4002c34 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x7c>
		if ((clock() - startTime) > aTimeout) {
 4002c00:	400b2d40 	call	400b2d4 <clock>
 4002c04:	1007883a 	mov	r3,r2
 4002c08:	e0bff417 	ldw	r2,-48(fp)
 4002c0c:	1885c83a 	sub	r2,r3,r2
 4002c10:	e0fffd0b 	ldhu	r3,-12(fp)
 4002c14:	1885803a 	cmpltu	r2,r3,r2
 4002c18:	10803fcc 	andi	r2,r2,255
 4002c1c:	10000226 	beq	r2,zero,4002c28 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x70>
			return TIMED_OUT;
 4002c20:	00bfffc4 	movi	r2,-1
 4002c24:	00011c06 	br	4003098 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
		}
		usleep(50000);
 4002c28:	0130d414 	movui	r4,50000
 4002c2c:	40188c00 	call	40188c0 <usleep>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
	uint32_t startTime = clock();

	// Wait for a response packet
	while (iUdp.parsePacket() <= 0) {
 4002c30:	003fec06 	br	4002be4 <__alt_data_end+0xfc002be4>
		uint8_t  byte[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
		uint16_t word[DNS_HEADER_SIZE/2];
	} header;

	// Check that it's a response from the right server and the right port
	if ( (iDNSServer != iUdp.remoteIP()) || (iUdp.remotePort() != DNS_PORT) ) {
 4002c34:	e0bffc17 	ldw	r2,-16(fp)
 4002c38:	1009883a 	mov	r4,r2
 4002c3c:	40031640 	call	4003164 <_ZNK9IPAddresscvmEv>
 4002c40:	1021883a 	mov	r16,r2
 4002c44:	e0bffc17 	ldw	r2,-16(fp)
 4002c48:	10800204 	addi	r2,r2,8
 4002c4c:	1009883a 	mov	r4,r2
 4002c50:	40026200 	call	4002620 <_ZN11EthernetUDP8remoteIPEv>
 4002c54:	e0bff615 	stw	r2,-40(fp)
 4002c58:	e0bff604 	addi	r2,fp,-40
 4002c5c:	1009883a 	mov	r4,r2
 4002c60:	40031640 	call	4003164 <_ZNK9IPAddresscvmEv>
 4002c64:	8080071e 	bne	r16,r2,4002c84 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xcc>
 4002c68:	e0bffc17 	ldw	r2,-16(fp)
 4002c6c:	10800204 	addi	r2,r2,8
 4002c70:	1009883a 	mov	r4,r2
 4002c74:	40026480 	call	4002648 <_ZN11EthernetUDP10remotePortEv>
 4002c78:	10bfffcc 	andi	r2,r2,65535
 4002c7c:	10800d60 	cmpeqi	r2,r2,53
 4002c80:	1000021e 	bne	r2,zero,4002c8c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xd4>
 4002c84:	00800044 	movi	r2,1
 4002c88:	00000106 	br	4002c90 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xd8>
 4002c8c:	0005883a 	mov	r2,zero
 4002c90:	10803fcc 	andi	r2,r2,255
 4002c94:	10000226 	beq	r2,zero,4002ca0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xe8>
		// It's not from who we expected
		return INVALID_SERVER;
 4002c98:	00bfff84 	movi	r2,-2
 4002c9c:	0000fe06 	br	4003098 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// Read through the rest of the response
	if (iUdp.available() < DNS_HEADER_SIZE) {
 4002ca0:	e0bffc17 	ldw	r2,-16(fp)
 4002ca4:	10800204 	addi	r2,r2,8
 4002ca8:	1009883a 	mov	r4,r2
 4002cac:	40059fc0 	call	40059fc <_ZN11EthernetUDP9availableEv>
 4002cb0:	10800310 	cmplti	r2,r2,12
 4002cb4:	10803fcc 	andi	r2,r2,255
 4002cb8:	10000226 	beq	r2,zero,4002cc4 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x10c>
		return TRUNCATED;
 4002cbc:	00bfff44 	movi	r2,-3
 4002cc0:	0000f506 	br	4003098 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}
	iUdp.read(header.byte, DNS_HEADER_SIZE);
 4002cc4:	e0bffc17 	ldw	r2,-16(fp)
 4002cc8:	10800204 	addi	r2,r2,8
 4002ccc:	e0fff704 	addi	r3,fp,-36
 4002cd0:	01800304 	movi	r6,12
 4002cd4:	180b883a 	mov	r5,r3
 4002cd8:	1009883a 	mov	r4,r2
 4002cdc:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>

	uint16_t header_flags = htons(header.word[1]);
 4002ce0:	e0bff78b 	ldhu	r2,-34(fp)
 4002ce4:	10bfffcc 	andi	r2,r2,65535
 4002ce8:	1004923a 	slli	r2,r2,8
 4002cec:	1007883a 	mov	r3,r2
 4002cf0:	e0bff78b 	ldhu	r2,-34(fp)
 4002cf4:	10bfffcc 	andi	r2,r2,65535
 4002cf8:	1004d23a 	srli	r2,r2,8
 4002cfc:	1884b03a 	or	r2,r3,r2
 4002d00:	e0bffa0d 	sth	r2,-24(fp)
	// Check that it's a response to this request
	if ((iRequestId != (header.word[0])) ||
 4002d04:	e0bffc17 	ldw	r2,-16(fp)
 4002d08:	10c0010b 	ldhu	r3,4(r2)
 4002d0c:	e0bff70b 	ldhu	r2,-36(fp)
 4002d10:	18ffffcc 	andi	r3,r3,65535
 4002d14:	10bfffcc 	andi	r2,r2,65535
 4002d18:	1880051e 	bne	r3,r2,4002d30 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x178>
	  ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) ) {
 4002d1c:	e0bffa0b 	ldhu	r2,-24(fp)
	}
	iUdp.read(header.byte, DNS_HEADER_SIZE);

	uint16_t header_flags = htons(header.word[1]);
	// Check that it's a response to this request
	if ((iRequestId != (header.word[0])) ||
 4002d20:	10bfffcc 	andi	r2,r2,65535
 4002d24:	10a0001c 	xori	r2,r2,32768
 4002d28:	10a00004 	addi	r2,r2,-32768
 4002d2c:	10000616 	blt	r2,zero,4002d48 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x190>
	  ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) ) {
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 4002d30:	e0bffc17 	ldw	r2,-16(fp)
 4002d34:	10800204 	addi	r2,r2,8
 4002d38:	1009883a 	mov	r4,r2
 4002d3c:	4005fe00 	call	4005fe0 <_ZN11EthernetUDP5flushEv>
		return INVALID_RESPONSE;
 4002d40:	00bfff04 	movi	r2,-4
 4002d44:	0000d406 	br	4003098 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}
	// Check for any errors in the response (or in our request)
	// although we don't do anything to get round these
	if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) ) {
 4002d48:	e0bffa0b 	ldhu	r2,-24(fp)
 4002d4c:	10bfffcc 	andi	r2,r2,65535
 4002d50:	1080800c 	andi	r2,r2,512
 4002d54:	1000041e 	bne	r2,zero,4002d68 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1b0>
 4002d58:	e0bffa0b 	ldhu	r2,-24(fp)
 4002d5c:	10bfffcc 	andi	r2,r2,65535
 4002d60:	108003cc 	andi	r2,r2,15
 4002d64:	10000626 	beq	r2,zero,4002d80 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1c8>
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 4002d68:	e0bffc17 	ldw	r2,-16(fp)
 4002d6c:	10800204 	addi	r2,r2,8
 4002d70:	1009883a 	mov	r4,r2
 4002d74:	4005fe00 	call	4005fe0 <_ZN11EthernetUDP5flushEv>
		return -5; //INVALID_RESPONSE;
 4002d78:	00bffec4 	movi	r2,-5
 4002d7c:	0000c606 	br	4003098 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// And make sure we've got (at least) one answer
	uint16_t answerCount = htons(header.word[3]);
 4002d80:	e0bff88b 	ldhu	r2,-30(fp)
 4002d84:	10bfffcc 	andi	r2,r2,65535
 4002d88:	1004923a 	slli	r2,r2,8
 4002d8c:	1007883a 	mov	r3,r2
 4002d90:	e0bff88b 	ldhu	r2,-30(fp)
 4002d94:	10bfffcc 	andi	r2,r2,65535
 4002d98:	1004d23a 	srli	r2,r2,8
 4002d9c:	1884b03a 	or	r2,r3,r2
 4002da0:	e0bff50d 	sth	r2,-44(fp)
	if (answerCount == 0) {
 4002da4:	e0bff50b 	ldhu	r2,-44(fp)
 4002da8:	1000061e 	bne	r2,zero,4002dc4 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x20c>
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 4002dac:	e0bffc17 	ldw	r2,-16(fp)
 4002db0:	10800204 	addi	r2,r2,8
 4002db4:	1009883a 	mov	r4,r2
 4002db8:	4005fe00 	call	4005fe0 <_ZN11EthernetUDP5flushEv>
		return -6; //INVALID_RESPONSE;
 4002dbc:	00bffe84 	movi	r2,-6
 4002dc0:	0000b506 	br	4003098 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
 4002dc4:	e03ff30d 	sth	zero,-52(fp)
 4002dc8:	e0fff30b 	ldhu	r3,-52(fp)
 4002dcc:	e0bff80b 	ldhu	r2,-32(fp)
 4002dd0:	10bfffcc 	andi	r2,r2,65535
 4002dd4:	1004923a 	slli	r2,r2,8
 4002dd8:	113fffcc 	andi	r4,r2,65535
 4002ddc:	e0bff80b 	ldhu	r2,-32(fp)
 4002de0:	10bfffcc 	andi	r2,r2,65535
 4002de4:	1004d23a 	srli	r2,r2,8
 4002de8:	10bfffcc 	andi	r2,r2,65535
 4002dec:	2084b03a 	or	r2,r4,r2
 4002df0:	1880200e 	bge	r3,r2,4002e74 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x2bc>
		// Skip over the name
		uint8_t len;
		do {
			iUdp.read(&len, sizeof(len));
 4002df4:	e0bffc17 	ldw	r2,-16(fp)
 4002df8:	10800204 	addi	r2,r2,8
 4002dfc:	e0fffa84 	addi	r3,fp,-22
 4002e00:	01800044 	movi	r6,1
 4002e04:	180b883a 	mov	r5,r3
 4002e08:	1009883a 	mov	r4,r2
 4002e0c:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
			if (len > 0) {
 4002e10:	e0bffa83 	ldbu	r2,-22(fp)
 4002e14:	10803fcc 	andi	r2,r2,255
 4002e18:	10000826 	beq	r2,zero,4002e3c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x284>
				// Don't need to actually read the data out for the string, just
				// advance ptr to beyond it
				iUdp.read((uint8_t *)NULL, (size_t)len);
 4002e1c:	e0bffc17 	ldw	r2,-16(fp)
 4002e20:	10800204 	addi	r2,r2,8
 4002e24:	e0fffa83 	ldbu	r3,-22(fp)
 4002e28:	18c03fcc 	andi	r3,r3,255
 4002e2c:	180d883a 	mov	r6,r3
 4002e30:	000b883a 	mov	r5,zero
 4002e34:	1009883a 	mov	r4,r2
 4002e38:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
			}
		} while (len != 0);
 4002e3c:	e0bffa83 	ldbu	r2,-22(fp)
 4002e40:	10803fcc 	andi	r2,r2,255
 4002e44:	10000126 	beq	r2,zero,4002e4c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x294>

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
		// Skip over the name
		uint8_t len;
		do {
 4002e48:	003fea06 	br	4002df4 <__alt_data_end+0xfc002df4>
				iUdp.read((uint8_t *)NULL, (size_t)len);
			}
		} while (len != 0);

		// Now jump over the type and class
		iUdp.read((uint8_t *)NULL, 4);
 4002e4c:	e0bffc17 	ldw	r2,-16(fp)
 4002e50:	10800204 	addi	r2,r2,8
 4002e54:	01800104 	movi	r6,4
 4002e58:	000b883a 	mov	r5,zero
 4002e5c:	1009883a 	mov	r4,r2
 4002e60:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
		iUdp.flush(); // FIXME
		return -6; //INVALID_RESPONSE;
	}

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
 4002e64:	e0bff30b 	ldhu	r2,-52(fp)
 4002e68:	10800044 	addi	r2,r2,1
 4002e6c:	e0bff30d 	sth	r2,-52(fp)
 4002e70:	003fd506 	br	4002dc8 <__alt_data_end+0xfc002dc8>
	// Now we're up to the bit we're interested in, the answer
	// There might be more than one answer (although we'll just use the first
	// type A answer) and some authority and additional resource records but
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
 4002e74:	e03ff38d 	sth	zero,-50(fp)
 4002e78:	e0fff38b 	ldhu	r3,-50(fp)
 4002e7c:	e0bff50b 	ldhu	r2,-44(fp)
 4002e80:	1880802e 	bgeu	r3,r2,4003084 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4cc>
		// Skip the name
		uint8_t len;
		do {
			iUdp.read(&len, sizeof(len));
 4002e84:	e0bffc17 	ldw	r2,-16(fp)
 4002e88:	10800204 	addi	r2,r2,8
 4002e8c:	e0fffac4 	addi	r3,fp,-21
 4002e90:	01800044 	movi	r6,1
 4002e94:	180b883a 	mov	r5,r3
 4002e98:	1009883a 	mov	r4,r2
 4002e9c:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
			if ((len & LABEL_COMPRESSION_MASK) == 0) {
 4002ea0:	e0bffac3 	ldbu	r2,-21(fp)
 4002ea4:	10803fcc 	andi	r2,r2,255
 4002ea8:	1080300c 	andi	r2,r2,192
 4002eac:	10000c1e 	bne	r2,zero,4002ee0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x328>
				// It's just a normal label
				if (len > 0) {
 4002eb0:	e0bffac3 	ldbu	r2,-21(fp)
 4002eb4:	10803fcc 	andi	r2,r2,255
 4002eb8:	10001026 	beq	r2,zero,4002efc <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x344>
					// And it's got a length
					// Don't need to actually read the data out for the string,
					// just advance ptr to beyond it
					iUdp.read((uint8_t *)NULL, len);
 4002ebc:	e0bffc17 	ldw	r2,-16(fp)
 4002ec0:	10800204 	addi	r2,r2,8
 4002ec4:	e0fffac3 	ldbu	r3,-21(fp)
 4002ec8:	18c03fcc 	andi	r3,r3,255
 4002ecc:	180d883a 	mov	r6,r3
 4002ed0:	000b883a 	mov	r5,zero
 4002ed4:	1009883a 	mov	r4,r2
 4002ed8:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
 4002edc:	00000706 	br	4002efc <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x344>
				// says that a name is either a sequence of labels ended with a
				// 0 length octet or a pointer or a sequence of labels ending in
				// a pointer.  Either way, when we get here we're at the end of
				// the name
				// Skip over the pointer
				iUdp.read((uint8_t *)NULL, 1); // we don't care about the byte
 4002ee0:	e0bffc17 	ldw	r2,-16(fp)
 4002ee4:	10800204 	addi	r2,r2,8
 4002ee8:	01800044 	movi	r6,1
 4002eec:	000b883a 	mov	r5,zero
 4002ef0:	1009883a 	mov	r4,r2
 4002ef4:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
				// And set len so that we drop out of the name loop
				len = 0;
 4002ef8:	e03ffac5 	stb	zero,-21(fp)
			}
		} while (len != 0);
 4002efc:	e0bffac3 	ldbu	r2,-21(fp)
 4002f00:	10803fcc 	andi	r2,r2,255
 4002f04:	10000126 	beq	r2,zero,4002f0c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x354>
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
		// Skip the name
		uint8_t len;
		do {
 4002f08:	003fde06 	br	4002e84 <__alt_data_end+0xfc002e84>
		} while (len != 0);

		// Check the type and class
		uint16_t answerType;
		uint16_t answerClass;
		iUdp.read((uint8_t*)&answerType, sizeof(answerType));
 4002f0c:	e0bffc17 	ldw	r2,-16(fp)
 4002f10:	10800204 	addi	r2,r2,8
 4002f14:	e0fffb04 	addi	r3,fp,-20
 4002f18:	01800084 	movi	r6,2
 4002f1c:	180b883a 	mov	r5,r3
 4002f20:	1009883a 	mov	r4,r2
 4002f24:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
		iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
 4002f28:	e0bffc17 	ldw	r2,-16(fp)
 4002f2c:	10800204 	addi	r2,r2,8
 4002f30:	e0fffb84 	addi	r3,fp,-18
 4002f34:	01800084 	movi	r6,2
 4002f38:	180b883a 	mov	r5,r3
 4002f3c:	1009883a 	mov	r4,r2
 4002f40:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>

		// Ignore the Time-To-Live as we don't do any caching
		iUdp.read((uint8_t *)NULL, TTL_SIZE); // don't care about the returned bytes
 4002f44:	e0bffc17 	ldw	r2,-16(fp)
 4002f48:	10800204 	addi	r2,r2,8
 4002f4c:	01800104 	movi	r6,4
 4002f50:	000b883a 	mov	r5,zero
 4002f54:	1009883a 	mov	r4,r2
 4002f58:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>

		// And read out the length of this answer
		// Don't need header_flags anymore, so we can reuse it here
		iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
 4002f5c:	e0bffc17 	ldw	r2,-16(fp)
 4002f60:	10800204 	addi	r2,r2,8
 4002f64:	e0fffa04 	addi	r3,fp,-24
 4002f68:	01800084 	movi	r6,2
 4002f6c:	180b883a 	mov	r5,r3
 4002f70:	1009883a 	mov	r4,r2
 4002f74:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>

		if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) ) {
 4002f78:	e0bffb0b 	ldhu	r2,-20(fp)
 4002f7c:	10bfffcc 	andi	r2,r2,65535
 4002f80:	1004923a 	slli	r2,r2,8
 4002f84:	10ffffcc 	andi	r3,r2,65535
 4002f88:	e0bffb0b 	ldhu	r2,-20(fp)
 4002f8c:	10bfffcc 	andi	r2,r2,65535
 4002f90:	1004d23a 	srli	r2,r2,8
 4002f94:	10bfffcc 	andi	r2,r2,65535
 4002f98:	1884b03a 	or	r2,r3,r2
 4002f9c:	10800058 	cmpnei	r2,r2,1
 4002fa0:	1000261e 	bne	r2,zero,400303c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x484>
 4002fa4:	e0bffb8b 	ldhu	r2,-18(fp)
 4002fa8:	10bfffcc 	andi	r2,r2,65535
 4002fac:	1004923a 	slli	r2,r2,8
 4002fb0:	10ffffcc 	andi	r3,r2,65535
 4002fb4:	e0bffb8b 	ldhu	r2,-18(fp)
 4002fb8:	10bfffcc 	andi	r2,r2,65535
 4002fbc:	1004d23a 	srli	r2,r2,8
 4002fc0:	10bfffcc 	andi	r2,r2,65535
 4002fc4:	1884b03a 	or	r2,r3,r2
 4002fc8:	10800058 	cmpnei	r2,r2,1
 4002fcc:	10001b1e 	bne	r2,zero,400303c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x484>
			if (htons(header_flags) != 4) {
 4002fd0:	e0bffa0b 	ldhu	r2,-24(fp)
 4002fd4:	10bfffcc 	andi	r2,r2,65535
 4002fd8:	1004923a 	slli	r2,r2,8
 4002fdc:	10ffffcc 	andi	r3,r2,65535
 4002fe0:	e0bffa0b 	ldhu	r2,-24(fp)
 4002fe4:	10bfffcc 	andi	r2,r2,65535
 4002fe8:	1004d23a 	srli	r2,r2,8
 4002fec:	10bfffcc 	andi	r2,r2,65535
 4002ff0:	1884b03a 	or	r2,r3,r2
 4002ff4:	10800120 	cmpeqi	r2,r2,4
 4002ff8:	1000061e 	bne	r2,zero,4003014 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x45c>
				// It's a weird size
				// Mark the entire packet as read
				iUdp.flush(); // FIXME
 4002ffc:	e0bffc17 	ldw	r2,-16(fp)
 4003000:	10800204 	addi	r2,r2,8
 4003004:	1009883a 	mov	r4,r2
 4003008:	4005fe00 	call	4005fe0 <_ZN11EthernetUDP5flushEv>
				return -9;//INVALID_RESPONSE;
 400300c:	00bffdc4 	movi	r2,-9
 4003010:	00002106 	br	4003098 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
			}
			// FIXME: seems to lock up here on ESP8266, but why??
			iUdp.read(aAddress.raw_address(), 4);
 4003014:	e0bffc17 	ldw	r2,-16(fp)
 4003018:	14000204 	addi	r16,r2,8
 400301c:	e13ffe17 	ldw	r4,-8(fp)
 4003020:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 4003024:	01800104 	movi	r6,4
 4003028:	100b883a 	mov	r5,r2
 400302c:	8009883a 	mov	r4,r16
 4003030:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
			return SUCCESS;
 4003034:	00800044 	movi	r2,1
 4003038:	00001706 	br	4003098 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
		} else {
			// This isn't an answer type we're after, move onto the next one
			iUdp.read((uint8_t *)NULL, htons(header_flags));
 400303c:	e0bffc17 	ldw	r2,-16(fp)
 4003040:	11000204 	addi	r4,r2,8
 4003044:	e0bffa0b 	ldhu	r2,-24(fp)
 4003048:	10bfffcc 	andi	r2,r2,65535
 400304c:	1004923a 	slli	r2,r2,8
 4003050:	10ffffcc 	andi	r3,r2,65535
 4003054:	e0bffa0b 	ldhu	r2,-24(fp)
 4003058:	10bfffcc 	andi	r2,r2,65535
 400305c:	1004d23a 	srli	r2,r2,8
 4003060:	10bfffcc 	andi	r2,r2,65535
 4003064:	1884b03a 	or	r2,r3,r2
 4003068:	100d883a 	mov	r6,r2
 400306c:	000b883a 	mov	r5,zero
 4003070:	4005e880 	call	4005e88 <_ZN11EthernetUDP4readEPhj>
	// Now we're up to the bit we're interested in, the answer
	// There might be more than one answer (although we'll just use the first
	// type A answer) and some authority and additional resource records but
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
 4003074:	e0bff38b 	ldhu	r2,-50(fp)
 4003078:	10800044 	addi	r2,r2,1
 400307c:	e0bff38d 	sth	r2,-50(fp)
 4003080:	003f7d06 	br	4002e78 <__alt_data_end+0xfc002e78>
			iUdp.read((uint8_t *)NULL, htons(header_flags));
		}
	}

	// Mark the entire packet as read
	iUdp.flush(); // FIXME
 4003084:	e0bffc17 	ldw	r2,-16(fp)
 4003088:	10800204 	addi	r2,r2,8
 400308c:	1009883a 	mov	r4,r2
 4003090:	4005fe00 	call	4005fe0 <_ZN11EthernetUDP5flushEv>

	// If we get here then we haven't found an answer
	return -10; //INVALID_RESPONSE;
 4003094:	00bffd84 	movi	r2,-10
}
 4003098:	e6ffff04 	addi	sp,fp,-4
 400309c:	dfc00217 	ldw	ra,8(sp)
 40030a0:	df000117 	ldw	fp,4(sp)
 40030a4:	dc000017 	ldw	r16,0(sp)
 40030a8:	dec00304 	addi	sp,sp,12
 40030ac:	f800283a 	ret

040030b0 <_Z41__static_initialization_and_destruction_0ii>:
 40030b0:	defffb04 	addi	sp,sp,-20
 40030b4:	dfc00415 	stw	ra,16(sp)
 40030b8:	df000315 	stw	fp,12(sp)
 40030bc:	df000304 	addi	fp,sp,12
 40030c0:	e13ffe15 	stw	r4,-8(fp)
 40030c4:	e17fff15 	stw	r5,-4(fp)
 40030c8:	e0bffe17 	ldw	r2,-8(fp)
 40030cc:	10800058 	cmpnei	r2,r2,1
 40030d0:	1000091e 	bne	r2,zero,40030f8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40030d4:	e0ffff17 	ldw	r3,-4(fp)
 40030d8:	00bfffd4 	movui	r2,65535
 40030dc:	1880061e 	bne	r3,r2,40030f8 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 40030e0:	d8000015 	stw	zero,0(sp)
 40030e4:	000f883a 	mov	r7,zero
 40030e8:	000d883a 	mov	r6,zero
 40030ec:	000b883a 	mov	r5,zero
 40030f0:	d112d004 	addi	r4,gp,19264
 40030f4:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
 40030f8:	0001883a 	nop
 40030fc:	e037883a 	mov	sp,fp
 4003100:	dfc00117 	ldw	ra,4(sp)
 4003104:	df000017 	ldw	fp,0(sp)
 4003108:	dec00204 	addi	sp,sp,8
 400310c:	f800283a 	ret

04003110 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
 4003110:	defffe04 	addi	sp,sp,-8
 4003114:	dfc00115 	stw	ra,4(sp)
 4003118:	df000015 	stw	fp,0(sp)
 400311c:	d839883a 	mov	fp,sp
 4003120:	017fffd4 	movui	r5,65535
 4003124:	01000044 	movi	r4,1
 4003128:	40030b00 	call	40030b0 <_Z41__static_initialization_and_destruction_0ii>
 400312c:	e037883a 	mov	sp,fp
 4003130:	dfc00117 	ldw	ra,4(sp)
 4003134:	df000017 	ldw	fp,0(sp)
 4003138:	dec00204 	addi	sp,sp,8
 400313c:	f800283a 	ret

04003140 <_ZN9IPAddress11raw_addressEv>:

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
 4003140:	defffe04 	addi	sp,sp,-8
 4003144:	df000115 	stw	fp,4(sp)
 4003148:	df000104 	addi	fp,sp,4
 400314c:	e13fff15 	stw	r4,-4(fp)
 4003150:	e0bfff17 	ldw	r2,-4(fp)
 4003154:	e037883a 	mov	sp,fp
 4003158:	df000017 	ldw	fp,0(sp)
 400315c:	dec00104 	addi	sp,sp,4
 4003160:	f800283a 	ret

04003164 <_ZNK9IPAddresscvmEv>:
    bool fromString(const char *address);
    void print();

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() const { return _address.dword; };
 4003164:	defffe04 	addi	sp,sp,-8
 4003168:	df000115 	stw	fp,4(sp)
 400316c:	df000104 	addi	fp,sp,4
 4003170:	e13fff15 	stw	r4,-4(fp)
 4003174:	e0bfff17 	ldw	r2,-4(fp)
 4003178:	10800017 	ldw	r2,0(r2)
 400317c:	e037883a 	mov	sp,fp
 4003180:	df000017 	ldw	fp,0(sp)
 4003184:	dec00104 	addi	sp,sp,4
 4003188:	f800283a 	ret

0400318c <_ZN9IPAddressixEi>:
    bool operator==(const IPAddress& addr) const { return _address.dword == addr._address.dword; };
    bool operator==(const uint8_t* addr) const;

    // Overloaded index operator to allow getting and setting individual octets of the address
    uint8_t operator[](int index) const { return _address.bytes[index]; };
    uint8_t& operator[](int index) { return _address.bytes[index]; };
 400318c:	defffd04 	addi	sp,sp,-12
 4003190:	df000215 	stw	fp,8(sp)
 4003194:	df000204 	addi	fp,sp,8
 4003198:	e13ffe15 	stw	r4,-8(fp)
 400319c:	e17fff15 	stw	r5,-4(fp)
 40031a0:	e0fffe17 	ldw	r3,-8(fp)
 40031a4:	e0bfff17 	ldw	r2,-4(fp)
 40031a8:	1885883a 	add	r2,r3,r2
 40031ac:	e037883a 	mov	sp,fp
 40031b0:	df000017 	ldw	fp,0(sp)
 40031b4:	dec00104 	addi	sp,sp,4
 40031b8:	f800283a 	ret

040031bc <_ZN13EthernetClass5beginEPhmm>:

IPAddress EthernetClass::_dnsServerAddress;
DhcpClass* EthernetClass::_dhcp = NULL;

int EthernetClass::begin(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
 40031bc:	deffdd04 	addi	sp,sp,-140
 40031c0:	dfc02215 	stw	ra,136(sp)
 40031c4:	df002115 	stw	fp,132(sp)
 40031c8:	ddc02015 	stw	r23,128(sp)
 40031cc:	dd801f15 	stw	r22,124(sp)
 40031d0:	dd401e15 	stw	r21,120(sp)
 40031d4:	dd001d15 	stw	r20,116(sp)
 40031d8:	dcc01c15 	stw	r19,112(sp)
 40031dc:	dc801b15 	stw	r18,108(sp)
 40031e0:	dc401a15 	stw	r17,104(sp)
 40031e4:	dc001915 	stw	r16,100(sp)
 40031e8:	df002104 	addi	fp,sp,132
 40031ec:	e13fe515 	stw	r4,-108(fp)
 40031f0:	e17fe615 	stw	r5,-104(fp)
 40031f4:	e1bfe715 	stw	r6,-100(fp)
 40031f8:	00810074 	movhi	r2,1025
 40031fc:	10a61604 	addi	r2,r2,-26536
 4003200:	e0bfee15 	stw	r2,-72(fp)
 4003204:	008100b4 	movhi	r2,1026
 4003208:	10aacf84 	addi	r2,r2,-21698
 400320c:	e0bfef15 	stw	r2,-68(fp)
 4003210:	e0bff004 	addi	r2,fp,-64
 4003214:	e0ffe004 	addi	r3,fp,-128
 4003218:	10c00015 	stw	r3,0(r2)
 400321c:	00c10034 	movhi	r3,1024
 4003220:	18ccf504 	addi	r3,r3,13268
 4003224:	10c00115 	stw	r3,4(r2)
 4003228:	16c00215 	stw	sp,8(r2)
 400322c:	e0bfe804 	addi	r2,fp,-96
 4003230:	1009883a 	mov	r4,r2
 4003234:	400afa40 	call	400afa4 <_Unwind_SjLj_Register>
	static DhcpClass s_dhcp;
 4003238:	d092d404 	addi	r2,gp,19280
 400323c:	10800003 	ldbu	r2,0(r2)
 4003240:	10803fcc 	andi	r2,r2,255
 4003244:	1080201c 	xori	r2,r2,128
 4003248:	10bfe004 	addi	r2,r2,-128
 400324c:	10000d1e 	bne	r2,zero,4003284 <_ZN13EthernetClass5beginEPhmm+0xc8>
 4003250:	d112d404 	addi	r4,gp,19280
 4003254:	400a2240 	call	400a224 <__cxa_guard_acquire>
 4003258:	1004c03a 	cmpne	r2,r2,zero
 400325c:	10803fcc 	andi	r2,r2,255
 4003260:	10000826 	beq	r2,zero,4003284 <_ZN13EthernetClass5beginEPhmm+0xc8>
 4003264:	e03ff505 	stb	zero,-44(fp)
 4003268:	010100f4 	movhi	r4,1027
 400326c:	00800044 	movi	r2,1
 4003270:	e0bfe915 	stw	r2,-92(fp)
 4003274:	2116b904 	addi	r4,r4,23268
 4003278:	400416c0 	call	400416c <_ZN9DhcpClassC1Ev>
 400327c:	d112d404 	addi	r4,gp,19280
 4003280:	400a2880 	call	400a288 <__cxa_guard_release>
	_dhcp = &s_dhcp;
 4003284:	008100f4 	movhi	r2,1027
 4003288:	1096b904 	addi	r2,r2,23268
 400328c:	d092d315 	stw	r2,19276(gp)

	// Initialise the basic info
	if (W5100.init() == 0) return 0;
 4003290:	00bfffc4 	movi	r2,-1
 4003294:	e0bfe915 	stw	r2,-92(fp)
 4003298:	400803c0 	call	400803c <_ZN10W5100Class4initEv>
 400329c:	10803fcc 	andi	r2,r2,255
 40032a0:	1005003a 	cmpeq	r2,r2,zero
 40032a4:	10803fcc 	andi	r2,r2,255
 40032a8:	10000226 	beq	r2,zero,40032b4 <_ZN13EthernetClass5beginEPhmm+0xf8>
 40032ac:	0005883a 	mov	r2,zero
 40032b0:	00004606 	br	40033cc <_ZN13EthernetClass5beginEPhmm+0x210>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setMACAddress(mac);
 40032b4:	00bfffc4 	movi	r2,-1
 40032b8:	e0bfe915 	stw	r2,-92(fp)
 40032bc:	e17fe517 	ldw	r5,-108(fp)
 40032c0:	d112dd84 	addi	r4,gp,19318
 40032c4:	4003d1c0 	call	4003d1c <_ZN10W5100Class13setMACAddressEPKh>
	W5100.setIPAddress(IPAddress(0,0,0,0).raw_address());
 40032c8:	e0bfe404 	addi	r2,fp,-112
 40032cc:	d8000015 	stw	zero,0(sp)
 40032d0:	000f883a 	mov	r7,zero
 40032d4:	000d883a 	mov	r6,zero
 40032d8:	000b883a 	mov	r5,zero
 40032dc:	1009883a 	mov	r4,r2
 40032e0:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
 40032e4:	e0bfe404 	addi	r2,fp,-112
 40032e8:	1009883a 	mov	r4,r2
 40032ec:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 40032f0:	100b883a 	mov	r5,r2
 40032f4:	d112dd84 	addi	r4,gp,19318
 40032f8:	4003d8c0 	call	4003d8c <_ZN10W5100Class12setIPAddressEPKh>
//	SPI_endTransaction();

	// Now try to get our config info from a DHCP server
	int ret = _dhcp->beginWithDHCP(mac, timeout, responseTimeout);
 40032fc:	d092d317 	ldw	r2,19276(gp)
 4003300:	e1ffe717 	ldw	r7,-100(fp)
 4003304:	e1bfe617 	ldw	r6,-104(fp)
 4003308:	e17fe517 	ldw	r5,-108(fp)
 400330c:	1009883a 	mov	r4,r2
 4003310:	40011280 	call	4001128 <_ZN9DhcpClass13beginWithDHCPEPhmm>
 4003314:	e0bfe015 	stw	r2,-128(fp)
	if (ret == 1) {
 4003318:	e0bfe017 	ldw	r2,-128(fp)
 400331c:	10800058 	cmpnei	r2,r2,1
 4003320:	1000291e 	bne	r2,zero,40033c8 <_ZN13EthernetClass5beginEPhmm+0x20c>
		// We've successfully found a DHCP server and got our configuration
		// info, so set things accordingly
//		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
		W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
 4003324:	d092d317 	ldw	r2,19276(gp)
 4003328:	1009883a 	mov	r4,r2
 400332c:	40023680 	call	4002368 <_ZN9DhcpClass10getLocalIpEv>
 4003330:	e0bfe315 	stw	r2,-116(fp)
 4003334:	e0bfe304 	addi	r2,fp,-116
 4003338:	1009883a 	mov	r4,r2
 400333c:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 4003340:	100b883a 	mov	r5,r2
 4003344:	d112dd84 	addi	r4,gp,19318
 4003348:	4003d8c0 	call	4003d8c <_ZN10W5100Class12setIPAddressEPKh>
		W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
 400334c:	d092d317 	ldw	r2,19276(gp)
 4003350:	1009883a 	mov	r4,r2
 4003354:	40023e80 	call	40023e8 <_ZN9DhcpClass12getGatewayIpEv>
 4003358:	e0bfe215 	stw	r2,-120(fp)
 400335c:	e0bfe204 	addi	r2,fp,-120
 4003360:	1009883a 	mov	r4,r2
 4003364:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 4003368:	100b883a 	mov	r5,r2
 400336c:	d112dd84 	addi	r4,gp,19318
 4003370:	4003c3c0 	call	4003c3c <_ZN10W5100Class12setGatewayIpEPKh>
		W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
 4003374:	d092d317 	ldw	r2,19276(gp)
 4003378:	1009883a 	mov	r4,r2
 400337c:	40023a80 	call	40023a8 <_ZN9DhcpClass13getSubnetMaskEv>
 4003380:	e0bfe115 	stw	r2,-124(fp)
 4003384:	e0bfe104 	addi	r2,fp,-124
 4003388:	1009883a 	mov	r4,r2
 400338c:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 4003390:	100b883a 	mov	r5,r2
 4003394:	d112dd84 	addi	r4,gp,19318
 4003398:	4003cac0 	call	4003cac <_ZN10W5100Class13setSubnetMaskEPKh>
//		SPI_endTransaction();
		_dnsServerAddress = _dhcp->getDnsServerIp();
 400339c:	d092d317 	ldw	r2,19276(gp)
 40033a0:	1009883a 	mov	r4,r2
 40033a4:	40024680 	call	4002468 <_ZN9DhcpClass14getDnsServerIpEv>
 40033a8:	d092d215 	stw	r2,19272(gp)
		socketPortRand(clock()/1000);
 40033ac:	400b2d40 	call	400b2d4 <clock>
 40033b0:	0140fa04 	movi	r5,1000
 40033b4:	1009883a 	mov	r4,r2
 40033b8:	400ace00 	call	400ace0 <__udivsi3>
 40033bc:	10bfffcc 	andi	r2,r2,65535
 40033c0:	1009883a 	mov	r4,r2
 40033c4:	40061f00 	call	40061f0 <_ZN13EthernetClass14socketPortRandEt>
	}
	return ret;
 40033c8:	e0bfe017 	ldw	r2,-128(fp)
 40033cc:	e0bff615 	stw	r2,-40(fp)
 40033d0:	00000c06 	br	4003404 <_ZN13EthernetClass5beginEPhmm+0x248>
 40033d4:	e7002004 	addi	fp,fp,128
 40033d8:	e0bfea17 	ldw	r2,-88(fp)
 40033dc:	e0bff715 	stw	r2,-36(fp)
IPAddress EthernetClass::_dnsServerAddress;
DhcpClass* EthernetClass::_dhcp = NULL;

int EthernetClass::begin(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
	static DhcpClass s_dhcp;
 40033e0:	e0bff503 	ldbu	r2,-44(fp)
 40033e4:	1000021e 	bne	r2,zero,40033f0 <_ZN13EthernetClass5beginEPhmm+0x234>
 40033e8:	d112d404 	addi	r4,gp,19280
 40033ec:	400a2800 	call	400a280 <__cxa_guard_abort>
 40033f0:	e0fff717 	ldw	r3,-36(fp)
 40033f4:	00bfffc4 	movi	r2,-1
 40033f8:	e0bfe915 	stw	r2,-92(fp)
 40033fc:	1809883a 	mov	r4,r3
 4003400:	400b1a00 	call	400b1a0 <_Unwind_SjLj_Resume>
 4003404:	e0bfe804 	addi	r2,fp,-96
 4003408:	1009883a 	mov	r4,r2
 400340c:	400afbc0 	call	400afbc <_Unwind_SjLj_Unregister>
//		SPI_endTransaction();
		_dnsServerAddress = _dhcp->getDnsServerIp();
		socketPortRand(clock()/1000);
	}
	return ret;
}
 4003410:	e0bff617 	ldw	r2,-40(fp)
 4003414:	e6fff804 	addi	sp,fp,-32
 4003418:	dfc00917 	ldw	ra,36(sp)
 400341c:	df000817 	ldw	fp,32(sp)
 4003420:	ddc00717 	ldw	r23,28(sp)
 4003424:	dd800617 	ldw	r22,24(sp)
 4003428:	dd400517 	ldw	r21,20(sp)
 400342c:	dd000417 	ldw	r20,16(sp)
 4003430:	dcc00317 	ldw	r19,12(sp)
 4003434:	dc800217 	ldw	r18,8(sp)
 4003438:	dc400117 	ldw	r17,4(sp)
 400343c:	dc000017 	ldw	r16,0(sp)
 4003440:	dec00a04 	addi	sp,sp,40
 4003444:	f800283a 	ret

04003448 <_ZN13EthernetClass5beginEPh9IPAddress>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip)
{
 4003448:	defffb04 	addi	sp,sp,-20
 400344c:	dfc00415 	stw	ra,16(sp)
 4003450:	df000315 	stw	fp,12(sp)
 4003454:	df000304 	addi	fp,sp,12
 4003458:	e13ffe15 	stw	r4,-8(fp)
 400345c:	e17fff15 	stw	r5,-4(fp)
	// Assume the DNS server will be the machine on the same network as the local IP
	// but with last octet being '1'
	IPAddress dns = ip;
 4003460:	e0bfff17 	ldw	r2,-4(fp)
 4003464:	e0bffd15 	stw	r2,-12(fp)
	dns[3] = 1;
 4003468:	014000c4 	movi	r5,3
 400346c:	e13ffd04 	addi	r4,fp,-12
 4003470:	400318c0 	call	400318c <_ZN9IPAddressixEi>
 4003474:	1007883a 	mov	r3,r2
 4003478:	00800044 	movi	r2,1
 400347c:	18800005 	stb	r2,0(r3)
	begin(mac, ip, dns);
 4003480:	e1bffd17 	ldw	r6,-12(fp)
 4003484:	e17fff17 	ldw	r5,-4(fp)
 4003488:	e13ffe17 	ldw	r4,-8(fp)
 400348c:	40034a80 	call	40034a8 <_ZN13EthernetClass5beginEPh9IPAddressS1_>
}
 4003490:	0001883a 	nop
 4003494:	e037883a 	mov	sp,fp
 4003498:	dfc00117 	ldw	ra,4(sp)
 400349c:	df000017 	ldw	fp,0(sp)
 40034a0:	dec00204 	addi	sp,sp,8
 40034a4:	f800283a 	ret

040034a8 <_ZN13EthernetClass5beginEPh9IPAddressS1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns)
{
 40034a8:	defffa04 	addi	sp,sp,-24
 40034ac:	dfc00515 	stw	ra,20(sp)
 40034b0:	df000415 	stw	fp,16(sp)
 40034b4:	df000404 	addi	fp,sp,16
 40034b8:	e13ffd15 	stw	r4,-12(fp)
 40034bc:	e17ffe15 	stw	r5,-8(fp)
 40034c0:	e1bfff15 	stw	r6,-4(fp)
	// Assume the gateway will be the machine on the same network as the local IP
	// but with last octet being '1'
	IPAddress gateway = ip;
 40034c4:	e0bffe17 	ldw	r2,-8(fp)
 40034c8:	e0bffc15 	stw	r2,-16(fp)
	gateway[3] = 1;
 40034cc:	014000c4 	movi	r5,3
 40034d0:	e13ffc04 	addi	r4,fp,-16
 40034d4:	400318c0 	call	400318c <_ZN9IPAddressixEi>
 40034d8:	1007883a 	mov	r3,r2
 40034dc:	00800044 	movi	r2,1
 40034e0:	18800005 	stb	r2,0(r3)
	begin(mac, ip, dns, gateway);
 40034e4:	e1fffc17 	ldw	r7,-16(fp)
 40034e8:	e1bfff17 	ldw	r6,-4(fp)
 40034ec:	e17ffe17 	ldw	r5,-8(fp)
 40034f0:	e13ffd17 	ldw	r4,-12(fp)
 40034f4:	40035100 	call	4003510 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>
}
 40034f8:	0001883a 	nop
 40034fc:	e037883a 	mov	sp,fp
 4003500:	dfc00117 	ldw	ra,4(sp)
 4003504:	df000017 	ldw	fp,0(sp)
 4003508:	dec00204 	addi	sp,sp,8
 400350c:	f800283a 	ret

04003510 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway)
{
 4003510:	defff804 	addi	sp,sp,-32
 4003514:	dfc00715 	stw	ra,28(sp)
 4003518:	df000615 	stw	fp,24(sp)
 400351c:	df000604 	addi	fp,sp,24
 4003520:	e13ffc15 	stw	r4,-16(fp)
 4003524:	e17ffd15 	stw	r5,-12(fp)
 4003528:	e1bffe15 	stw	r6,-8(fp)
 400352c:	e1ffff15 	stw	r7,-4(fp)
	IPAddress subnet(255, 255, 255, 0);
 4003530:	d8000015 	stw	zero,0(sp)
 4003534:	01c03fc4 	movi	r7,255
 4003538:	01803fc4 	movi	r6,255
 400353c:	01403fc4 	movi	r5,255
 4003540:	e13ffb04 	addi	r4,fp,-20
 4003544:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
	begin(mac, ip, dns, gateway, subnet);
 4003548:	e0bffb17 	ldw	r2,-20(fp)
 400354c:	d8800015 	stw	r2,0(sp)
 4003550:	e1ffff17 	ldw	r7,-4(fp)
 4003554:	e1bffe17 	ldw	r6,-8(fp)
 4003558:	e17ffd17 	ldw	r5,-12(fp)
 400355c:	e13ffc17 	ldw	r4,-16(fp)
 4003560:	400357c0 	call	400357c <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
}
 4003564:	0001883a 	nop
 4003568:	e037883a 	mov	sp,fp
 400356c:	dfc00117 	ldw	ra,4(sp)
 4003570:	df000017 	ldw	fp,0(sp)
 4003574:	dec00204 	addi	sp,sp,8
 4003578:	f800283a 	ret

0400357c <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway, IPAddress subnet)
{
 400357c:	defffa04 	addi	sp,sp,-24
 4003580:	dfc00515 	stw	ra,20(sp)
 4003584:	df000415 	stw	fp,16(sp)
 4003588:	df000404 	addi	fp,sp,16
 400358c:	e13ffc15 	stw	r4,-16(fp)
 4003590:	e17ffd15 	stw	r5,-12(fp)
 4003594:	e1bffe15 	stw	r6,-8(fp)
 4003598:	e1ffff15 	stw	r7,-4(fp)
	if (W5100.init() == 0) return;
 400359c:	400803c0 	call	400803c <_ZN10W5100Class4initEv>
 40035a0:	10803fcc 	andi	r2,r2,255
 40035a4:	1005003a 	cmpeq	r2,r2,zero
 40035a8:	10803fcc 	andi	r2,r2,255
 40035ac:	10001a1e 	bne	r2,zero,4003618 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0x9c>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setMACAddress(mac);
 40035b0:	e17ffc17 	ldw	r5,-16(fp)
 40035b4:	d112dd84 	addi	r4,gp,19318
 40035b8:	4003d1c0 	call	4003d1c <_ZN10W5100Class13setMACAddressEPKh>
//#ifdef ESP8266
	W5100.setIPAddress(&ip[0]);
 40035bc:	e0bffd04 	addi	r2,fp,-12
 40035c0:	000b883a 	mov	r5,zero
 40035c4:	1009883a 	mov	r4,r2
 40035c8:	400318c0 	call	400318c <_ZN9IPAddressixEi>
 40035cc:	100b883a 	mov	r5,r2
 40035d0:	d112dd84 	addi	r4,gp,19318
 40035d4:	4003d8c0 	call	4003d8c <_ZN10W5100Class12setIPAddressEPKh>
	W5100.setGatewayIp(&gateway[0]);
 40035d8:	e0bfff04 	addi	r2,fp,-4
 40035dc:	000b883a 	mov	r5,zero
 40035e0:	1009883a 	mov	r4,r2
 40035e4:	400318c0 	call	400318c <_ZN9IPAddressixEi>
 40035e8:	100b883a 	mov	r5,r2
 40035ec:	d112dd84 	addi	r4,gp,19318
 40035f0:	4003c3c0 	call	4003c3c <_ZN10W5100Class12setGatewayIpEPKh>
	W5100.setSubnetMask(&subnet[0]);
 40035f4:	000b883a 	mov	r5,zero
 40035f8:	e1000204 	addi	r4,fp,8
 40035fc:	400318c0 	call	400318c <_ZN9IPAddressixEi>
 4003600:	100b883a 	mov	r5,r2
 4003604:	d112dd84 	addi	r4,gp,19318
 4003608:	4003cac0 	call	4003cac <_ZN10W5100Class13setSubnetMaskEPKh>
//	W5100.setIPAddress(ip._address);
//	W5100.setGatewayIp(gateway._address);
//	W5100.setSubnetMask(subnet._address);
//#endif
//	SPI_endTransaction();
	_dnsServerAddress = dns;
 400360c:	e0bffe17 	ldw	r2,-8(fp)
 4003610:	d092d215 	stw	r2,19272(gp)
 4003614:	00000106 	br	400361c <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0xa0>
	begin(mac, ip, dns, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway, IPAddress subnet)
{
	if (W5100.init() == 0) return;
 4003618:	0001883a 	nop
//	W5100.setGatewayIp(gateway._address);
//	W5100.setSubnetMask(subnet._address);
//#endif
//	SPI_endTransaction();
	_dnsServerAddress = dns;
}
 400361c:	e037883a 	mov	sp,fp
 4003620:	dfc00117 	ldw	ra,4(sp)
 4003624:	df000017 	ldw	fp,0(sp)
 4003628:	dec00204 	addi	sp,sp,8
 400362c:	f800283a 	ret

04003630 <_ZN13EthernetClass4initEh>:

void EthernetClass::init(uint8_t sspin)
{
 4003630:	defffd04 	addi	sp,sp,-12
 4003634:	dfc00215 	stw	ra,8(sp)
 4003638:	df000115 	stw	fp,4(sp)
 400363c:	df000104 	addi	fp,sp,4
 4003640:	2005883a 	mov	r2,r4
 4003644:	e0bfff05 	stb	r2,-4(fp)
	W5100.setSS(sspin);
 4003648:	e0bfff03 	ldbu	r2,-4(fp)
 400364c:	1009883a 	mov	r4,r2
 4003650:	400413c0 	call	400413c <_ZN10W5100Class5setSSEh>
}
 4003654:	0001883a 	nop
 4003658:	e037883a 	mov	sp,fp
 400365c:	dfc00117 	ldw	ra,4(sp)
 4003660:	df000017 	ldw	fp,0(sp)
 4003664:	dec00204 	addi	sp,sp,8
 4003668:	f800283a 	ret

0400366c <_ZN13EthernetClass10linkStatusEv>:

EthernetLinkStatus EthernetClass::linkStatus()
{
 400366c:	defffe04 	addi	sp,sp,-8
 4003670:	dfc00115 	stw	ra,4(sp)
 4003674:	df000015 	stw	fp,0(sp)
 4003678:	d839883a 	mov	fp,sp
	switch (W5100.getLinkStatus()) {
 400367c:	400845c0 	call	400845c <_ZN10W5100Class13getLinkStatusEv>
 4003680:	10c00060 	cmpeqi	r3,r2,1
 4003684:	1800051e 	bne	r3,zero,400369c <_ZN13EthernetClass10linkStatusEv+0x30>
 4003688:	10c000a0 	cmpeqi	r3,r2,2
 400368c:	1800051e 	bne	r3,zero,40036a4 <_ZN13EthernetClass10linkStatusEv+0x38>
 4003690:	1000061e 	bne	r2,zero,40036ac <_ZN13EthernetClass10linkStatusEv+0x40>
		case UNKNOWN:  return Unknown;
 4003694:	0005883a 	mov	r2,zero
 4003698:	00000506 	br	40036b0 <_ZN13EthernetClass10linkStatusEv+0x44>
		case LINK_ON:  return LinkON;
 400369c:	00800044 	movi	r2,1
 40036a0:	00000306 	br	40036b0 <_ZN13EthernetClass10linkStatusEv+0x44>
		case LINK_OFF: return LinkOFF;
 40036a4:	00800084 	movi	r2,2
 40036a8:	00000106 	br	40036b0 <_ZN13EthernetClass10linkStatusEv+0x44>
		default:       return Unknown;
 40036ac:	0005883a 	mov	r2,zero
	}
}
 40036b0:	e037883a 	mov	sp,fp
 40036b4:	dfc00117 	ldw	ra,4(sp)
 40036b8:	df000017 	ldw	fp,0(sp)
 40036bc:	dec00204 	addi	sp,sp,8
 40036c0:	f800283a 	ret

040036c4 <_ZN13EthernetClass14hardwareStatusEv>:

EthernetHardwareStatus EthernetClass::hardwareStatus()
{
 40036c4:	defffe04 	addi	sp,sp,-8
 40036c8:	dfc00115 	stw	ra,4(sp)
 40036cc:	df000015 	stw	fp,0(sp)
 40036d0:	d839883a 	mov	fp,sp
	switch (W5100.getChip()) {
 40036d4:	400411c0 	call	400411c <_ZN10W5100Class7getChipEv>
 40036d8:	10803fcc 	andi	r2,r2,255
 40036dc:	10c00d20 	cmpeqi	r3,r2,52
 40036e0:	1800061e 	bne	r3,zero,40036fc <_ZN13EthernetClass14hardwareStatusEv+0x38>
 40036e4:	10c00de0 	cmpeqi	r3,r2,55
 40036e8:	1800061e 	bne	r3,zero,4003704 <_ZN13EthernetClass14hardwareStatusEv+0x40>
 40036ec:	10800ce0 	cmpeqi	r2,r2,51
 40036f0:	10000626 	beq	r2,zero,400370c <_ZN13EthernetClass14hardwareStatusEv+0x48>
		case 51: return EthernetW5100;
 40036f4:	00800044 	movi	r2,1
 40036f8:	00000506 	br	4003710 <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		case 52: return EthernetW5200;
 40036fc:	00800084 	movi	r2,2
 4003700:	00000306 	br	4003710 <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		case 55: return EthernetW5500;
 4003704:	008000c4 	movi	r2,3
 4003708:	00000106 	br	4003710 <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		default: return EthernetNoHardware;
 400370c:	0005883a 	mov	r2,zero
	}
}
 4003710:	e037883a 	mov	sp,fp
 4003714:	dfc00117 	ldw	ra,4(sp)
 4003718:	df000017 	ldw	fp,0(sp)
 400371c:	dec00204 	addi	sp,sp,8
 4003720:	f800283a 	ret

04003724 <_ZN13EthernetClass8maintainEv>:

int EthernetClass::maintain()
{
 4003724:	defffa04 	addi	sp,sp,-24
 4003728:	dfc00515 	stw	ra,20(sp)
 400372c:	df000415 	stw	fp,16(sp)
 4003730:	df000404 	addi	fp,sp,16
	int rc = DHCP_CHECK_NONE;
 4003734:	e03ffc15 	stw	zero,-16(fp)
	if (_dhcp != NULL) {
 4003738:	d092d317 	ldw	r2,19276(gp)
 400373c:	10002f26 	beq	r2,zero,40037fc <_ZN13EthernetClass8maintainEv+0xd8>
		// we have a pointer to dhcp, use it
		rc = _dhcp->checkLease();
 4003740:	d092d317 	ldw	r2,19276(gp)
 4003744:	1009883a 	mov	r4,r2
 4003748:	40021dc0 	call	40021dc <_ZN9DhcpClass10checkLeaseEv>
 400374c:	e0bffc15 	stw	r2,-16(fp)
		switch (rc) {
 4003750:	e0bffc17 	ldw	r2,-16(fp)
 4003754:	10c000a0 	cmpeqi	r3,r2,2
 4003758:	1800041e 	bne	r3,zero,400376c <_ZN13EthernetClass8maintainEv+0x48>
 400375c:	10c00120 	cmpeqi	r3,r2,4
 4003760:	1800021e 	bne	r3,zero,400376c <_ZN13EthernetClass8maintainEv+0x48>
 4003764:	10002426 	beq	r2,zero,40037f8 <_ZN13EthernetClass8maintainEv+0xd4>
//			SPI_endTransaction();
			_dnsServerAddress = _dhcp->getDnsServerIp();
			break;
		default:
			//this is actually an error, it will retry though
			break;
 4003768:	00002406 	br	40037fc <_ZN13EthernetClass8maintainEv+0xd8>
			break;
		case DHCP_CHECK_RENEW_OK:
		case DHCP_CHECK_REBIND_OK:
			//we might have got a new IP.
//			SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
			W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
 400376c:	d092d317 	ldw	r2,19276(gp)
 4003770:	1009883a 	mov	r4,r2
 4003774:	40023680 	call	4002368 <_ZN9DhcpClass10getLocalIpEv>
 4003778:	e0bfff15 	stw	r2,-4(fp)
 400377c:	e0bfff04 	addi	r2,fp,-4
 4003780:	1009883a 	mov	r4,r2
 4003784:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 4003788:	100b883a 	mov	r5,r2
 400378c:	d112dd84 	addi	r4,gp,19318
 4003790:	4003d8c0 	call	4003d8c <_ZN10W5100Class12setIPAddressEPKh>
			W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
 4003794:	d092d317 	ldw	r2,19276(gp)
 4003798:	1009883a 	mov	r4,r2
 400379c:	40023e80 	call	40023e8 <_ZN9DhcpClass12getGatewayIpEv>
 40037a0:	e0bffe15 	stw	r2,-8(fp)
 40037a4:	e0bffe04 	addi	r2,fp,-8
 40037a8:	1009883a 	mov	r4,r2
 40037ac:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 40037b0:	100b883a 	mov	r5,r2
 40037b4:	d112dd84 	addi	r4,gp,19318
 40037b8:	4003c3c0 	call	4003c3c <_ZN10W5100Class12setGatewayIpEPKh>
			W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
 40037bc:	d092d317 	ldw	r2,19276(gp)
 40037c0:	1009883a 	mov	r4,r2
 40037c4:	40023a80 	call	40023a8 <_ZN9DhcpClass13getSubnetMaskEv>
 40037c8:	e0bffd15 	stw	r2,-12(fp)
 40037cc:	e0bffd04 	addi	r2,fp,-12
 40037d0:	1009883a 	mov	r4,r2
 40037d4:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 40037d8:	100b883a 	mov	r5,r2
 40037dc:	d112dd84 	addi	r4,gp,19318
 40037e0:	4003cac0 	call	4003cac <_ZN10W5100Class13setSubnetMaskEPKh>
//			SPI_endTransaction();
			_dnsServerAddress = _dhcp->getDnsServerIp();
 40037e4:	d092d317 	ldw	r2,19276(gp)
 40037e8:	1009883a 	mov	r4,r2
 40037ec:	40024680 	call	4002468 <_ZN9DhcpClass14getDnsServerIpEv>
 40037f0:	d092d215 	stw	r2,19272(gp)
			break;
 40037f4:	00000106 	br	40037fc <_ZN13EthernetClass8maintainEv+0xd8>
		// we have a pointer to dhcp, use it
		rc = _dhcp->checkLease();
		switch (rc) {
		case DHCP_CHECK_NONE:
			//nothing done
			break;
 40037f8:	0001883a 	nop
		default:
			//this is actually an error, it will retry though
			break;
		}
	}
	return rc;
 40037fc:	e0bffc17 	ldw	r2,-16(fp)
}
 4003800:	e037883a 	mov	sp,fp
 4003804:	dfc00117 	ldw	ra,4(sp)
 4003808:	df000017 	ldw	fp,0(sp)
 400380c:	dec00204 	addi	sp,sp,8
 4003810:	f800283a 	ret

04003814 <_ZN13EthernetClass10MACAddressEPh>:


void EthernetClass::MACAddress(uint8_t *mac_address)
{
 4003814:	defffd04 	addi	sp,sp,-12
 4003818:	dfc00215 	stw	ra,8(sp)
 400381c:	df000115 	stw	fp,4(sp)
 4003820:	df000104 	addi	fp,sp,4
 4003824:	e13fff15 	stw	r4,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getMACAddress(mac_address);
 4003828:	e17fff17 	ldw	r5,-4(fp)
 400382c:	d112dd84 	addi	r4,gp,19318
 4003830:	4003d540 	call	4003d54 <_ZN10W5100Class13getMACAddressEPh>
//	SPI_endTransaction();
}
 4003834:	0001883a 	nop
 4003838:	e037883a 	mov	sp,fp
 400383c:	dfc00117 	ldw	ra,4(sp)
 4003840:	df000017 	ldw	fp,0(sp)
 4003844:	dec00204 	addi	sp,sp,8
 4003848:	f800283a 	ret

0400384c <_ZN13EthernetClass7localIPEv>:

IPAddress EthernetClass::localIP()
{
 400384c:	defffd04 	addi	sp,sp,-12
 4003850:	dfc00215 	stw	ra,8(sp)
 4003854:	df000115 	stw	fp,4(sp)
 4003858:	df000104 	addi	fp,sp,4
	IPAddress ret;
 400385c:	e13fff04 	addi	r4,fp,-4
 4003860:	4007c440 	call	4007c44 <_ZN9IPAddressC1Ev>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getIPAddress(ret.raw_address());
 4003864:	e13fff04 	addi	r4,fp,-4
 4003868:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 400386c:	100b883a 	mov	r5,r2
 4003870:	d112dd84 	addi	r4,gp,19318
 4003874:	4003dc40 	call	4003dc4 <_ZN10W5100Class12getIPAddressEPh>
//	SPI_endTransaction();
	return ret;
 4003878:	e0bfff17 	ldw	r2,-4(fp)
}
 400387c:	e037883a 	mov	sp,fp
 4003880:	dfc00117 	ldw	ra,4(sp)
 4003884:	df000017 	ldw	fp,0(sp)
 4003888:	dec00204 	addi	sp,sp,8
 400388c:	f800283a 	ret

04003890 <_ZN13EthernetClass10subnetMaskEv>:

IPAddress EthernetClass::subnetMask()
{
 4003890:	defffd04 	addi	sp,sp,-12
 4003894:	dfc00215 	stw	ra,8(sp)
 4003898:	df000115 	stw	fp,4(sp)
 400389c:	df000104 	addi	fp,sp,4
	IPAddress ret;
 40038a0:	e13fff04 	addi	r4,fp,-4
 40038a4:	4007c440 	call	4007c44 <_ZN9IPAddressC1Ev>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getSubnetMask(ret.raw_address());
 40038a8:	e13fff04 	addi	r4,fp,-4
 40038ac:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 40038b0:	100b883a 	mov	r5,r2
 40038b4:	d112dd84 	addi	r4,gp,19318
 40038b8:	4003ce40 	call	4003ce4 <_ZN10W5100Class13getSubnetMaskEPh>
//	SPI_endTransaction();
	return ret;
 40038bc:	e0bfff17 	ldw	r2,-4(fp)
}
 40038c0:	e037883a 	mov	sp,fp
 40038c4:	dfc00117 	ldw	ra,4(sp)
 40038c8:	df000017 	ldw	fp,0(sp)
 40038cc:	dec00204 	addi	sp,sp,8
 40038d0:	f800283a 	ret

040038d4 <_ZN13EthernetClass9gatewayIPEv>:

IPAddress EthernetClass::gatewayIP()
{
 40038d4:	defffd04 	addi	sp,sp,-12
 40038d8:	dfc00215 	stw	ra,8(sp)
 40038dc:	df000115 	stw	fp,4(sp)
 40038e0:	df000104 	addi	fp,sp,4
	IPAddress ret;
 40038e4:	e13fff04 	addi	r4,fp,-4
 40038e8:	4007c440 	call	4007c44 <_ZN9IPAddressC1Ev>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getGatewayIp(ret.raw_address());
 40038ec:	e13fff04 	addi	r4,fp,-4
 40038f0:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 40038f4:	100b883a 	mov	r5,r2
 40038f8:	d112dd84 	addi	r4,gp,19318
 40038fc:	4003c740 	call	4003c74 <_ZN10W5100Class12getGatewayIpEPh>
//	SPI_endTransaction();
	return ret;
 4003900:	e0bfff17 	ldw	r2,-4(fp)
}
 4003904:	e037883a 	mov	sp,fp
 4003908:	dfc00117 	ldw	ra,4(sp)
 400390c:	df000017 	ldw	fp,0(sp)
 4003910:	dec00204 	addi	sp,sp,8
 4003914:	f800283a 	ret

04003918 <_ZN13EthernetClass13setMACAddressEPKh>:

void EthernetClass::setMACAddress(const uint8_t *mac_address)
{
 4003918:	defffc04 	addi	sp,sp,-16
 400391c:	dfc00315 	stw	ra,12(sp)
 4003920:	df000215 	stw	fp,8(sp)
 4003924:	df000204 	addi	fp,sp,8
 4003928:	e13ffe15 	stw	r4,-8(fp)
 400392c:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setMACAddress(mac_address);
 4003930:	e17fff17 	ldw	r5,-4(fp)
 4003934:	d112dd84 	addi	r4,gp,19318
 4003938:	4003d1c0 	call	4003d1c <_ZN10W5100Class13setMACAddressEPKh>
//	SPI_endTransaction();
}
 400393c:	0001883a 	nop
 4003940:	e037883a 	mov	sp,fp
 4003944:	dfc00117 	ldw	ra,4(sp)
 4003948:	df000017 	ldw	fp,0(sp)
 400394c:	dec00204 	addi	sp,sp,8
 4003950:	f800283a 	ret

04003954 <_ZN13EthernetClass10setLocalIPE9IPAddress>:

void EthernetClass::setLocalIP(const IPAddress local_ip)
{
 4003954:	defffb04 	addi	sp,sp,-20
 4003958:	dfc00415 	stw	ra,16(sp)
 400395c:	df000315 	stw	fp,12(sp)
 4003960:	df000304 	addi	fp,sp,12
 4003964:	e13ffe15 	stw	r4,-8(fp)
 4003968:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	IPAddress ip = local_ip;
 400396c:	e0bfff17 	ldw	r2,-4(fp)
 4003970:	e0bffd15 	stw	r2,-12(fp)
	W5100.setIPAddress(ip.raw_address());
 4003974:	e13ffd04 	addi	r4,fp,-12
 4003978:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 400397c:	100b883a 	mov	r5,r2
 4003980:	d112dd84 	addi	r4,gp,19318
 4003984:	4003d8c0 	call	4003d8c <_ZN10W5100Class12setIPAddressEPKh>
//	SPI_endTransaction();
}
 4003988:	0001883a 	nop
 400398c:	e037883a 	mov	sp,fp
 4003990:	dfc00117 	ldw	ra,4(sp)
 4003994:	df000017 	ldw	fp,0(sp)
 4003998:	dec00204 	addi	sp,sp,8
 400399c:	f800283a 	ret

040039a0 <_ZN13EthernetClass13setSubnetMaskE9IPAddress>:

void EthernetClass::setSubnetMask(const IPAddress subnet)
{
 40039a0:	defffb04 	addi	sp,sp,-20
 40039a4:	dfc00415 	stw	ra,16(sp)
 40039a8:	df000315 	stw	fp,12(sp)
 40039ac:	df000304 	addi	fp,sp,12
 40039b0:	e13ffe15 	stw	r4,-8(fp)
 40039b4:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	IPAddress ip = subnet;
 40039b8:	e0bfff17 	ldw	r2,-4(fp)
 40039bc:	e0bffd15 	stw	r2,-12(fp)
	W5100.setSubnetMask(ip.raw_address());
 40039c0:	e13ffd04 	addi	r4,fp,-12
 40039c4:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 40039c8:	100b883a 	mov	r5,r2
 40039cc:	d112dd84 	addi	r4,gp,19318
 40039d0:	4003cac0 	call	4003cac <_ZN10W5100Class13setSubnetMaskEPKh>
//	SPI_endTransaction();
}
 40039d4:	0001883a 	nop
 40039d8:	e037883a 	mov	sp,fp
 40039dc:	dfc00117 	ldw	ra,4(sp)
 40039e0:	df000017 	ldw	fp,0(sp)
 40039e4:	dec00204 	addi	sp,sp,8
 40039e8:	f800283a 	ret

040039ec <_ZN13EthernetClass12setGatewayIPE9IPAddress>:

void EthernetClass::setGatewayIP(const IPAddress gateway)
{
 40039ec:	defffb04 	addi	sp,sp,-20
 40039f0:	dfc00415 	stw	ra,16(sp)
 40039f4:	df000315 	stw	fp,12(sp)
 40039f8:	df000304 	addi	fp,sp,12
 40039fc:	e13ffe15 	stw	r4,-8(fp)
 4003a00:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	IPAddress ip = gateway;
 4003a04:	e0bfff17 	ldw	r2,-4(fp)
 4003a08:	e0bffd15 	stw	r2,-12(fp)
	W5100.setGatewayIp(ip.raw_address());
 4003a0c:	e13ffd04 	addi	r4,fp,-12
 4003a10:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 4003a14:	100b883a 	mov	r5,r2
 4003a18:	d112dd84 	addi	r4,gp,19318
 4003a1c:	4003c3c0 	call	4003c3c <_ZN10W5100Class12setGatewayIpEPKh>
//	SPI_endTransaction();
}
 4003a20:	0001883a 	nop
 4003a24:	e037883a 	mov	sp,fp
 4003a28:	dfc00117 	ldw	ra,4(sp)
 4003a2c:	df000017 	ldw	fp,0(sp)
 4003a30:	dec00204 	addi	sp,sp,8
 4003a34:	f800283a 	ret

04003a38 <_ZN13EthernetClass24setRetransmissionTimeoutEt>:

void EthernetClass::setRetransmissionTimeout(uint16_t milliseconds)
{
 4003a38:	defffc04 	addi	sp,sp,-16
 4003a3c:	dfc00315 	stw	ra,12(sp)
 4003a40:	df000215 	stw	fp,8(sp)
 4003a44:	df000204 	addi	fp,sp,8
 4003a48:	e13ffe15 	stw	r4,-8(fp)
 4003a4c:	2805883a 	mov	r2,r5
 4003a50:	e0bfff0d 	sth	r2,-4(fp)
	if (milliseconds > 6553) milliseconds = 6553;
 4003a54:	e0bfff0b 	ldhu	r2,-4(fp)
 4003a58:	108666b0 	cmpltui	r2,r2,6554
 4003a5c:	1000021e 	bne	r2,zero,4003a68 <_ZN13EthernetClass24setRetransmissionTimeoutEt+0x30>
 4003a60:	00866644 	movi	r2,6553
 4003a64:	e0bfff0d 	sth	r2,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setRetransmissionTime(milliseconds * 10);
 4003a68:	e0bfff0b 	ldhu	r2,-4(fp)
 4003a6c:	108002a4 	muli	r2,r2,10
 4003a70:	10bfffcc 	andi	r2,r2,65535
 4003a74:	100b883a 	mov	r5,r2
 4003a78:	d112dd84 	addi	r4,gp,19318
 4003a7c:	4003dfc0 	call	4003dfc <_ZN10W5100Class21setRetransmissionTimeEt>
//	SPI_endTransaction();
}
 4003a80:	0001883a 	nop
 4003a84:	e037883a 	mov	sp,fp
 4003a88:	dfc00117 	ldw	ra,4(sp)
 4003a8c:	df000017 	ldw	fp,0(sp)
 4003a90:	dec00204 	addi	sp,sp,8
 4003a94:	f800283a 	ret

04003a98 <_ZN13EthernetClass22setRetransmissionCountEh>:

void EthernetClass::setRetransmissionCount(uint8_t num)
{
 4003a98:	defffc04 	addi	sp,sp,-16
 4003a9c:	dfc00315 	stw	ra,12(sp)
 4003aa0:	df000215 	stw	fp,8(sp)
 4003aa4:	df000204 	addi	fp,sp,8
 4003aa8:	e13ffe15 	stw	r4,-8(fp)
 4003aac:	2805883a 	mov	r2,r5
 4003ab0:	e0bfff05 	stb	r2,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setRetransmissionCount(num);
 4003ab4:	e0bfff03 	ldbu	r2,-4(fp)
 4003ab8:	100b883a 	mov	r5,r2
 4003abc:	d112dd84 	addi	r4,gp,19318
 4003ac0:	4003e3c0 	call	4003e3c <_ZN10W5100Class22setRetransmissionCountEh>
//	SPI_endTransaction();
}
 4003ac4:	0001883a 	nop
 4003ac8:	e037883a 	mov	sp,fp
 4003acc:	dfc00117 	ldw	ra,4(sp)
 4003ad0:	df000017 	ldw	fp,0(sp)
 4003ad4:	dec00204 	addi	sp,sp,8
 4003ad8:	f800283a 	ret

04003adc <_Z41__static_initialization_and_destruction_0ii>:





EthernetClass Ethernet;
 4003adc:	defffb04 	addi	sp,sp,-20
 4003ae0:	dfc00415 	stw	ra,16(sp)
 4003ae4:	df000315 	stw	fp,12(sp)
 4003ae8:	df000304 	addi	fp,sp,12
 4003aec:	e13ffe15 	stw	r4,-8(fp)
 4003af0:	e17fff15 	stw	r5,-4(fp)
 4003af4:	e0bffe17 	ldw	r2,-8(fp)
 4003af8:	10800058 	cmpnei	r2,r2,1
 4003afc:	10000b1e 	bne	r2,zero,4003b2c <_Z41__static_initialization_and_destruction_0ii+0x50>
 4003b00:	e0ffff17 	ldw	r3,-4(fp)
 4003b04:	00bfffd4 	movui	r2,65535
 4003b08:	1880081e 	bne	r3,r2,4003b2c <_Z41__static_initialization_and_destruction_0ii+0x50>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4003b0c:	d8000015 	stw	zero,0(sp)
 4003b10:	000f883a 	mov	r7,zero
 4003b14:	000d883a 	mov	r6,zero
 4003b18:	000b883a 	mov	r5,zero
 4003b1c:	d112d104 	addi	r4,gp,19268
 4003b20:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
#include "time.h"

#include "Dhcp.h"
#include "utility/w5100.h"

IPAddress EthernetClass::_dnsServerAddress;
 4003b24:	d112d204 	addi	r4,gp,19272
 4003b28:	4007c440 	call	4007c44 <_ZN9IPAddressC1Ev>





EthernetClass Ethernet;
 4003b2c:	0001883a 	nop
 4003b30:	e037883a 	mov	sp,fp
 4003b34:	dfc00117 	ldw	ra,4(sp)
 4003b38:	df000017 	ldw	fp,0(sp)
 4003b3c:	dec00204 	addi	sp,sp,8
 4003b40:	f800283a 	ret

04003b44 <_GLOBAL__sub_I__ZN13EthernetClass17_dnsServerAddressE>:
 4003b44:	defffe04 	addi	sp,sp,-8
 4003b48:	dfc00115 	stw	ra,4(sp)
 4003b4c:	df000015 	stw	fp,0(sp)
 4003b50:	d839883a 	mov	fp,sp
 4003b54:	017fffd4 	movui	r5,65535
 4003b58:	01000044 	movi	r4,1
 4003b5c:	4003adc0 	call	4003adc <_Z41__static_initialization_and_destruction_0ii>
 4003b60:	e037883a 	mov	sp,fp
 4003b64:	dfc00117 	ldw	ra,4(sp)
 4003b68:	df000017 	ldw	fp,0(sp)
 4003b6c:	dec00204 	addi	sp,sp,8
 4003b70:	f800283a 	ret

04003b74 <_ZN3UDP14beginMulticastE9IPAddresst>:
#include "utility/IPAddress.h"

class UDP  {
public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
 4003b74:	defffc04 	addi	sp,sp,-16
 4003b78:	df000315 	stw	fp,12(sp)
 4003b7c:	df000304 	addi	fp,sp,12
 4003b80:	e13ffd15 	stw	r4,-12(fp)
 4003b84:	e17ffe15 	stw	r5,-8(fp)
 4003b88:	3005883a 	mov	r2,r6
 4003b8c:	e0bfff0d 	sth	r2,-4(fp)
 4003b90:	0005883a 	mov	r2,zero
 4003b94:	e037883a 	mov	sp,fp
 4003b98:	df000017 	ldw	fp,0(sp)
 4003b9c:	dec00104 	addi	sp,sp,4
 4003ba0:	f800283a 	ret

04003ba4 <_ZN3UDPC1Ev>:
#ifndef udp_h
#define udp_h

#include "utility/IPAddress.h"

class UDP  {
 4003ba4:	defffe04 	addi	sp,sp,-8
 4003ba8:	df000115 	stw	fp,4(sp)
 4003bac:	df000104 	addi	fp,sp,4
 4003bb0:	e13fff15 	stw	r4,-4(fp)
 4003bb4:	008100b4 	movhi	r2,1026
 4003bb8:	10af7e04 	addi	r2,r2,-16904
 4003bbc:	e0ffff17 	ldw	r3,-4(fp)
 4003bc0:	18800015 	stw	r2,0(r3)
 4003bc4:	0001883a 	nop
 4003bc8:	e037883a 	mov	sp,fp
 4003bcc:	df000017 	ldw	fp,0(sp)
 4003bd0:	dec00104 	addi	sp,sp,4
 4003bd4:	f800283a 	ret

04003bd8 <_ZN11EthernetUDPC1Ev>:
protected:
	uint8_t sockindex;
	uint16_t _remaining; // remaining bytes of incoming packet yet to be processed

public:
	EthernetUDP() : sockindex(MAX_SOCK_NUM) {}  // Constructor
 4003bd8:	defffd04 	addi	sp,sp,-12
 4003bdc:	dfc00215 	stw	ra,8(sp)
 4003be0:	df000115 	stw	fp,4(sp)
 4003be4:	df000104 	addi	fp,sp,4
 4003be8:	e13fff15 	stw	r4,-4(fp)
 4003bec:	e0bfff17 	ldw	r2,-4(fp)
 4003bf0:	1009883a 	mov	r4,r2
 4003bf4:	4003ba40 	call	4003ba4 <_ZN3UDPC1Ev>
 4003bf8:	008100b4 	movhi	r2,1026
 4003bfc:	10afd104 	addi	r2,r2,-16572
 4003c00:	e0ffff17 	ldw	r3,-4(fp)
 4003c04:	18800015 	stw	r2,0(r3)
 4003c08:	e0bfff17 	ldw	r2,-4(fp)
 4003c0c:	10800204 	addi	r2,r2,8
 4003c10:	1009883a 	mov	r4,r2
 4003c14:	4007c440 	call	4007c44 <_ZN9IPAddressC1Ev>
 4003c18:	e0bfff17 	ldw	r2,-4(fp)
 4003c1c:	00c00204 	movi	r3,8
 4003c20:	10c00405 	stb	r3,16(r2)
 4003c24:	0001883a 	nop
 4003c28:	e037883a 	mov	sp,fp
 4003c2c:	dfc00117 	ldw	ra,4(sp)
 4003c30:	df000017 	ldw	fp,0(sp)
 4003c34:	dec00204 	addi	sp,sp,8
 4003c38:	f800283a 	ret

04003c3c <_ZN10W5100Class12setGatewayIpEPKh>:
class W5100Class {

public:
  static uint8_t init(void);

  inline void setGatewayIp(const uint8_t * addr) { writeGAR(addr); }
 4003c3c:	defffc04 	addi	sp,sp,-16
 4003c40:	dfc00315 	stw	ra,12(sp)
 4003c44:	df000215 	stw	fp,8(sp)
 4003c48:	df000204 	addi	fp,sp,8
 4003c4c:	e13ffe15 	stw	r4,-8(fp)
 4003c50:	e17fff15 	stw	r5,-4(fp)
 4003c54:	e13fff17 	ldw	r4,-4(fp)
 4003c58:	4003ec80 	call	4003ec8 <_ZN10W5100Class8writeGAREPKh>
 4003c5c:	0001883a 	nop
 4003c60:	e037883a 	mov	sp,fp
 4003c64:	dfc00117 	ldw	ra,4(sp)
 4003c68:	df000017 	ldw	fp,0(sp)
 4003c6c:	dec00204 	addi	sp,sp,8
 4003c70:	f800283a 	ret

04003c74 <_ZN10W5100Class12getGatewayIpEPh>:
  inline void getGatewayIp(uint8_t * addr) { readGAR(addr); }
 4003c74:	defffc04 	addi	sp,sp,-16
 4003c78:	dfc00315 	stw	ra,12(sp)
 4003c7c:	df000215 	stw	fp,8(sp)
 4003c80:	df000204 	addi	fp,sp,8
 4003c84:	e13ffe15 	stw	r4,-8(fp)
 4003c88:	e17fff15 	stw	r5,-4(fp)
 4003c8c:	e13fff17 	ldw	r4,-4(fp)
 4003c90:	4003f000 	call	4003f00 <_ZN10W5100Class7readGAREPh>
 4003c94:	0001883a 	nop
 4003c98:	e037883a 	mov	sp,fp
 4003c9c:	dfc00117 	ldw	ra,4(sp)
 4003ca0:	df000017 	ldw	fp,0(sp)
 4003ca4:	dec00204 	addi	sp,sp,8
 4003ca8:	f800283a 	ret

04003cac <_ZN10W5100Class13setSubnetMaskEPKh>:

  inline void setSubnetMask(const uint8_t * addr) { writeSUBR(addr); }
 4003cac:	defffc04 	addi	sp,sp,-16
 4003cb0:	dfc00315 	stw	ra,12(sp)
 4003cb4:	df000215 	stw	fp,8(sp)
 4003cb8:	df000204 	addi	fp,sp,8
 4003cbc:	e13ffe15 	stw	r4,-8(fp)
 4003cc0:	e17fff15 	stw	r5,-4(fp)
 4003cc4:	e13fff17 	ldw	r4,-4(fp)
 4003cc8:	4003f380 	call	4003f38 <_ZN10W5100Class9writeSUBREPKh>
 4003ccc:	0001883a 	nop
 4003cd0:	e037883a 	mov	sp,fp
 4003cd4:	dfc00117 	ldw	ra,4(sp)
 4003cd8:	df000017 	ldw	fp,0(sp)
 4003cdc:	dec00204 	addi	sp,sp,8
 4003ce0:	f800283a 	ret

04003ce4 <_ZN10W5100Class13getSubnetMaskEPh>:
  inline void getSubnetMask(uint8_t * addr) { readSUBR(addr); }
 4003ce4:	defffc04 	addi	sp,sp,-16
 4003ce8:	dfc00315 	stw	ra,12(sp)
 4003cec:	df000215 	stw	fp,8(sp)
 4003cf0:	df000204 	addi	fp,sp,8
 4003cf4:	e13ffe15 	stw	r4,-8(fp)
 4003cf8:	e17fff15 	stw	r5,-4(fp)
 4003cfc:	e13fff17 	ldw	r4,-4(fp)
 4003d00:	4003f700 	call	4003f70 <_ZN10W5100Class8readSUBREPh>
 4003d04:	0001883a 	nop
 4003d08:	e037883a 	mov	sp,fp
 4003d0c:	dfc00117 	ldw	ra,4(sp)
 4003d10:	df000017 	ldw	fp,0(sp)
 4003d14:	dec00204 	addi	sp,sp,8
 4003d18:	f800283a 	ret

04003d1c <_ZN10W5100Class13setMACAddressEPKh>:

  inline void setMACAddress(const uint8_t * addr) { writeSHAR(addr); }
 4003d1c:	defffc04 	addi	sp,sp,-16
 4003d20:	dfc00315 	stw	ra,12(sp)
 4003d24:	df000215 	stw	fp,8(sp)
 4003d28:	df000204 	addi	fp,sp,8
 4003d2c:	e13ffe15 	stw	r4,-8(fp)
 4003d30:	e17fff15 	stw	r5,-4(fp)
 4003d34:	e13fff17 	ldw	r4,-4(fp)
 4003d38:	4003fa80 	call	4003fa8 <_ZN10W5100Class9writeSHAREPKh>
 4003d3c:	0001883a 	nop
 4003d40:	e037883a 	mov	sp,fp
 4003d44:	dfc00117 	ldw	ra,4(sp)
 4003d48:	df000017 	ldw	fp,0(sp)
 4003d4c:	dec00204 	addi	sp,sp,8
 4003d50:	f800283a 	ret

04003d54 <_ZN10W5100Class13getMACAddressEPh>:
  inline void getMACAddress(uint8_t * addr) { readSHAR(addr); }
 4003d54:	defffc04 	addi	sp,sp,-16
 4003d58:	dfc00315 	stw	ra,12(sp)
 4003d5c:	df000215 	stw	fp,8(sp)
 4003d60:	df000204 	addi	fp,sp,8
 4003d64:	e13ffe15 	stw	r4,-8(fp)
 4003d68:	e17fff15 	stw	r5,-4(fp)
 4003d6c:	e13fff17 	ldw	r4,-4(fp)
 4003d70:	4003fe00 	call	4003fe0 <_ZN10W5100Class8readSHAREPh>
 4003d74:	0001883a 	nop
 4003d78:	e037883a 	mov	sp,fp
 4003d7c:	dfc00117 	ldw	ra,4(sp)
 4003d80:	df000017 	ldw	fp,0(sp)
 4003d84:	dec00204 	addi	sp,sp,8
 4003d88:	f800283a 	ret

04003d8c <_ZN10W5100Class12setIPAddressEPKh>:

  inline void setIPAddress(const uint8_t * addr) { writeSIPR(addr); }
 4003d8c:	defffc04 	addi	sp,sp,-16
 4003d90:	dfc00315 	stw	ra,12(sp)
 4003d94:	df000215 	stw	fp,8(sp)
 4003d98:	df000204 	addi	fp,sp,8
 4003d9c:	e13ffe15 	stw	r4,-8(fp)
 4003da0:	e17fff15 	stw	r5,-4(fp)
 4003da4:	e13fff17 	ldw	r4,-4(fp)
 4003da8:	40040180 	call	4004018 <_ZN10W5100Class9writeSIPREPKh>
 4003dac:	0001883a 	nop
 4003db0:	e037883a 	mov	sp,fp
 4003db4:	dfc00117 	ldw	ra,4(sp)
 4003db8:	df000017 	ldw	fp,0(sp)
 4003dbc:	dec00204 	addi	sp,sp,8
 4003dc0:	f800283a 	ret

04003dc4 <_ZN10W5100Class12getIPAddressEPh>:
  inline void getIPAddress(uint8_t * addr) { readSIPR(addr); }
 4003dc4:	defffc04 	addi	sp,sp,-16
 4003dc8:	dfc00315 	stw	ra,12(sp)
 4003dcc:	df000215 	stw	fp,8(sp)
 4003dd0:	df000204 	addi	fp,sp,8
 4003dd4:	e13ffe15 	stw	r4,-8(fp)
 4003dd8:	e17fff15 	stw	r5,-4(fp)
 4003ddc:	e13fff17 	ldw	r4,-4(fp)
 4003de0:	40040500 	call	4004050 <_ZN10W5100Class8readSIPREPh>
 4003de4:	0001883a 	nop
 4003de8:	e037883a 	mov	sp,fp
 4003dec:	dfc00117 	ldw	ra,4(sp)
 4003df0:	df000017 	ldw	fp,0(sp)
 4003df4:	dec00204 	addi	sp,sp,8
 4003df8:	f800283a 	ret

04003dfc <_ZN10W5100Class21setRetransmissionTimeEt>:

  inline void setRetransmissionTime(uint16_t timeout) { writeRTR(timeout); }
 4003dfc:	defffc04 	addi	sp,sp,-16
 4003e00:	dfc00315 	stw	ra,12(sp)
 4003e04:	df000215 	stw	fp,8(sp)
 4003e08:	df000204 	addi	fp,sp,8
 4003e0c:	e13ffe15 	stw	r4,-8(fp)
 4003e10:	2805883a 	mov	r2,r5
 4003e14:	e0bfff0d 	sth	r2,-4(fp)
 4003e18:	e0bfff0b 	ldhu	r2,-4(fp)
 4003e1c:	1009883a 	mov	r4,r2
 4003e20:	40040880 	call	4004088 <_ZN10W5100Class8writeRTREt>
 4003e24:	0001883a 	nop
 4003e28:	e037883a 	mov	sp,fp
 4003e2c:	dfc00117 	ldw	ra,4(sp)
 4003e30:	df000017 	ldw	fp,0(sp)
 4003e34:	dec00204 	addi	sp,sp,8
 4003e38:	f800283a 	ret

04003e3c <_ZN10W5100Class22setRetransmissionCountEh>:
  inline void setRetransmissionCount(uint8_t retry) { writeRCR(retry); }
 4003e3c:	defffc04 	addi	sp,sp,-16
 4003e40:	dfc00315 	stw	ra,12(sp)
 4003e44:	df000215 	stw	fp,8(sp)
 4003e48:	df000204 	addi	fp,sp,8
 4003e4c:	e13ffe15 	stw	r4,-8(fp)
 4003e50:	2805883a 	mov	r2,r5
 4003e54:	e0bfff05 	stb	r2,-4(fp)
 4003e58:	e0bfff03 	ldbu	r2,-4(fp)
 4003e5c:	1009883a 	mov	r4,r2
 4003e60:	40040dc0 	call	40040dc <_ZN10W5100Class8writeRCREh>
 4003e64:	0001883a 	nop
 4003e68:	e037883a 	mov	sp,fp
 4003e6c:	dfc00117 	ldw	ra,4(sp)
 4003e70:	df000017 	ldw	fp,0(sp)
 4003e74:	dec00204 	addi	sp,sp,8
 4003e78:	f800283a 	ret

04003e7c <_ZN10W5100Class5writeEth>:
  // W5100 Registers
  // ---------------
//private:
public:
  static uint16_t write(uint16_t addr, const uint8_t *buf, uint16_t len);
  static uint8_t write(uint16_t addr, uint8_t data) {
 4003e7c:	defffc04 	addi	sp,sp,-16
 4003e80:	dfc00315 	stw	ra,12(sp)
 4003e84:	df000215 	stw	fp,8(sp)
 4003e88:	df000204 	addi	fp,sp,8
 4003e8c:	2007883a 	mov	r3,r4
 4003e90:	2805883a 	mov	r2,r5
 4003e94:	e0fffe0d 	sth	r3,-8(fp)
 4003e98:	e0bfff05 	stb	r2,-4(fp)
    return write(addr, &data, 1);
 4003e9c:	e0bffe0b 	ldhu	r2,-8(fp)
 4003ea0:	e0ffff04 	addi	r3,fp,-4
 4003ea4:	01800044 	movi	r6,1
 4003ea8:	180b883a 	mov	r5,r3
 4003eac:	1009883a 	mov	r4,r2
 4003eb0:	40085040 	call	4008504 <_ZN10W5100Class5writeEtPKht>
  }
 4003eb4:	e037883a 	mov	sp,fp
 4003eb8:	dfc00117 	ldw	ra,4(sp)
 4003ebc:	df000017 	ldw	fp,0(sp)
 4003ec0:	dec00204 	addi	sp,sp,8
 4003ec4:	f800283a 	ret

04003ec8 <_ZN10W5100Class8writeGAREPKh>:
  }
  static W5100Linkstatus getLinkStatus();

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
 4003ec8:	defffd04 	addi	sp,sp,-12
 4003ecc:	dfc00215 	stw	ra,8(sp)
 4003ed0:	df000115 	stw	fp,4(sp)
 4003ed4:	df000104 	addi	fp,sp,4
 4003ed8:	e13fff15 	stw	r4,-4(fp)
 4003edc:	01800104 	movi	r6,4
 4003ee0:	e17fff17 	ldw	r5,-4(fp)
 4003ee4:	01000044 	movi	r4,1
 4003ee8:	40085040 	call	4008504 <_ZN10W5100Class5writeEtPKht>
 4003eec:	e037883a 	mov	sp,fp
 4003ef0:	dfc00117 	ldw	ra,4(sp)
 4003ef4:	df000017 	ldw	fp,0(sp)
 4003ef8:	dec00204 	addi	sp,sp,8
 4003efc:	f800283a 	ret

04003f00 <_ZN10W5100Class7readGAREPh>:
 4003f00:	defffd04 	addi	sp,sp,-12
 4003f04:	dfc00215 	stw	ra,8(sp)
 4003f08:	df000115 	stw	fp,4(sp)
 4003f0c:	df000104 	addi	fp,sp,4
 4003f10:	e13fff15 	stw	r4,-4(fp)
 4003f14:	01800104 	movi	r6,4
 4003f18:	e17fff17 	ldw	r5,-4(fp)
 4003f1c:	01000044 	movi	r4,1
 4003f20:	40086a80 	call	40086a8 <_ZN10W5100Class4readEtPht>
 4003f24:	e037883a 	mov	sp,fp
 4003f28:	dfc00117 	ldw	ra,4(sp)
 4003f2c:	df000017 	ldw	fp,0(sp)
 4003f30:	dec00204 	addi	sp,sp,8
 4003f34:	f800283a 	ret

04003f38 <_ZN10W5100Class9writeSUBREPKh>:
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
 4003f38:	defffd04 	addi	sp,sp,-12
 4003f3c:	dfc00215 	stw	ra,8(sp)
 4003f40:	df000115 	stw	fp,4(sp)
 4003f44:	df000104 	addi	fp,sp,4
 4003f48:	e13fff15 	stw	r4,-4(fp)
 4003f4c:	01800104 	movi	r6,4
 4003f50:	e17fff17 	ldw	r5,-4(fp)
 4003f54:	01000144 	movi	r4,5
 4003f58:	40085040 	call	4008504 <_ZN10W5100Class5writeEtPKht>
 4003f5c:	e037883a 	mov	sp,fp
 4003f60:	dfc00117 	ldw	ra,4(sp)
 4003f64:	df000017 	ldw	fp,0(sp)
 4003f68:	dec00204 	addi	sp,sp,8
 4003f6c:	f800283a 	ret

04003f70 <_ZN10W5100Class8readSUBREPh>:
 4003f70:	defffd04 	addi	sp,sp,-12
 4003f74:	dfc00215 	stw	ra,8(sp)
 4003f78:	df000115 	stw	fp,4(sp)
 4003f7c:	df000104 	addi	fp,sp,4
 4003f80:	e13fff15 	stw	r4,-4(fp)
 4003f84:	01800104 	movi	r6,4
 4003f88:	e17fff17 	ldw	r5,-4(fp)
 4003f8c:	01000144 	movi	r4,5
 4003f90:	40086a80 	call	40086a8 <_ZN10W5100Class4readEtPht>
 4003f94:	e037883a 	mov	sp,fp
 4003f98:	dfc00117 	ldw	ra,4(sp)
 4003f9c:	df000017 	ldw	fp,0(sp)
 4003fa0:	dec00204 	addi	sp,sp,8
 4003fa4:	f800283a 	ret

04003fa8 <_ZN10W5100Class9writeSHAREPKh>:
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
 4003fa8:	defffd04 	addi	sp,sp,-12
 4003fac:	dfc00215 	stw	ra,8(sp)
 4003fb0:	df000115 	stw	fp,4(sp)
 4003fb4:	df000104 	addi	fp,sp,4
 4003fb8:	e13fff15 	stw	r4,-4(fp)
 4003fbc:	01800184 	movi	r6,6
 4003fc0:	e17fff17 	ldw	r5,-4(fp)
 4003fc4:	01000244 	movi	r4,9
 4003fc8:	40085040 	call	4008504 <_ZN10W5100Class5writeEtPKht>
 4003fcc:	e037883a 	mov	sp,fp
 4003fd0:	dfc00117 	ldw	ra,4(sp)
 4003fd4:	df000017 	ldw	fp,0(sp)
 4003fd8:	dec00204 	addi	sp,sp,8
 4003fdc:	f800283a 	ret

04003fe0 <_ZN10W5100Class8readSHAREPh>:
 4003fe0:	defffd04 	addi	sp,sp,-12
 4003fe4:	dfc00215 	stw	ra,8(sp)
 4003fe8:	df000115 	stw	fp,4(sp)
 4003fec:	df000104 	addi	fp,sp,4
 4003ff0:	e13fff15 	stw	r4,-4(fp)
 4003ff4:	01800184 	movi	r6,6
 4003ff8:	e17fff17 	ldw	r5,-4(fp)
 4003ffc:	01000244 	movi	r4,9
 4004000:	40086a80 	call	40086a8 <_ZN10W5100Class4readEtPht>
 4004004:	e037883a 	mov	sp,fp
 4004008:	dfc00117 	ldw	ra,4(sp)
 400400c:	df000017 	ldw	fp,0(sp)
 4004010:	dec00204 	addi	sp,sp,8
 4004014:	f800283a 	ret

04004018 <_ZN10W5100Class9writeSIPREPKh>:
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
 4004018:	defffd04 	addi	sp,sp,-12
 400401c:	dfc00215 	stw	ra,8(sp)
 4004020:	df000115 	stw	fp,4(sp)
 4004024:	df000104 	addi	fp,sp,4
 4004028:	e13fff15 	stw	r4,-4(fp)
 400402c:	01800104 	movi	r6,4
 4004030:	e17fff17 	ldw	r5,-4(fp)
 4004034:	010003c4 	movi	r4,15
 4004038:	40085040 	call	4008504 <_ZN10W5100Class5writeEtPKht>
 400403c:	e037883a 	mov	sp,fp
 4004040:	dfc00117 	ldw	ra,4(sp)
 4004044:	df000017 	ldw	fp,0(sp)
 4004048:	dec00204 	addi	sp,sp,8
 400404c:	f800283a 	ret

04004050 <_ZN10W5100Class8readSIPREPh>:
 4004050:	defffd04 	addi	sp,sp,-12
 4004054:	dfc00215 	stw	ra,8(sp)
 4004058:	df000115 	stw	fp,4(sp)
 400405c:	df000104 	addi	fp,sp,4
 4004060:	e13fff15 	stw	r4,-4(fp)
 4004064:	01800104 	movi	r6,4
 4004068:	e17fff17 	ldw	r5,-4(fp)
 400406c:	010003c4 	movi	r4,15
 4004070:	40086a80 	call	40086a8 <_ZN10W5100Class4readEtPht>
 4004074:	e037883a 	mov	sp,fp
 4004078:	dfc00117 	ldw	ra,4(sp)
 400407c:	df000017 	ldw	fp,0(sp)
 4004080:	dec00204 	addi	sp,sp,8
 4004084:	f800283a 	ret

04004088 <_ZN10W5100Class8writeRTREt>:
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
 4004088:	defffc04 	addi	sp,sp,-16
 400408c:	dfc00315 	stw	ra,12(sp)
 4004090:	df000215 	stw	fp,8(sp)
 4004094:	df000204 	addi	fp,sp,8
 4004098:	2005883a 	mov	r2,r4
 400409c:	e0bfff0d 	sth	r2,-4(fp)
 40040a0:	e0bfff0b 	ldhu	r2,-4(fp)
 40040a4:	1005d23a 	srai	r2,r2,8
 40040a8:	e0bffe05 	stb	r2,-8(fp)
 40040ac:	e0bfff0b 	ldhu	r2,-4(fp)
 40040b0:	e0bffe45 	stb	r2,-7(fp)
 40040b4:	01800084 	movi	r6,2
 40040b8:	e17ffe04 	addi	r5,fp,-8
 40040bc:	010005c4 	movi	r4,23
 40040c0:	40085040 	call	4008504 <_ZN10W5100Class5writeEtPKht>
 40040c4:	0001883a 	nop
 40040c8:	e037883a 	mov	sp,fp
 40040cc:	dfc00117 	ldw	ra,4(sp)
 40040d0:	df000017 	ldw	fp,0(sp)
 40040d4:	dec00204 	addi	sp,sp,8
 40040d8:	f800283a 	ret

040040dc <_ZN10W5100Class8writeRCREh>:
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
 40040dc:	defffd04 	addi	sp,sp,-12
 40040e0:	dfc00215 	stw	ra,8(sp)
 40040e4:	df000115 	stw	fp,4(sp)
 40040e8:	df000104 	addi	fp,sp,4
 40040ec:	2005883a 	mov	r2,r4
 40040f0:	e0bfff05 	stb	r2,-4(fp)
 40040f4:	e0bfff03 	ldbu	r2,-4(fp)
 40040f8:	100b883a 	mov	r5,r2
 40040fc:	01000644 	movi	r4,25
 4004100:	4003e7c0 	call	4003e7c <_ZN10W5100Class5writeEth>
 4004104:	0001883a 	nop
 4004108:	e037883a 	mov	sp,fp
 400410c:	dfc00117 	ldw	ra,4(sp)
 4004110:	df000017 	ldw	fp,0(sp)
 4004114:	dec00204 	addi	sp,sp,8
 4004118:	f800283a 	ret

0400411c <_ZN10W5100Class7getChipEv>:
  static uint8_t isW5100(void);
  static uint8_t isW5200(void);
  static uint8_t isW5500(void);

public:
  static uint8_t getChip(void) { return chip; }
 400411c:	deffff04 	addi	sp,sp,-4
 4004120:	df000015 	stw	fp,0(sp)
 4004124:	d839883a 	mov	fp,sp
 4004128:	d092dd03 	ldbu	r2,19316(gp)
 400412c:	e037883a 	mov	sp,fp
 4004130:	df000017 	ldw	fp,0(sp)
 4004134:	dec00104 	addi	sp,sp,4
 4004138:	f800283a 	ret

0400413c <_ZN10W5100Class5setSSEh>:

  static bool hasOffsetAddressMapping(void) {
    if (chip == 55) return true;
    return false;
  }
  static void setSS(uint8_t pin) { ss_pin = pin; }
 400413c:	defffe04 	addi	sp,sp,-8
 4004140:	df000115 	stw	fp,4(sp)
 4004144:	df000104 	addi	fp,sp,4
 4004148:	2005883a 	mov	r2,r4
 400414c:	e0bfff05 	stb	r2,-4(fp)
 4004150:	e0bfff03 	ldbu	r2,-4(fp)
 4004154:	d0a00d85 	stb	r2,-32714(gp)
 4004158:	0001883a 	nop
 400415c:	e037883a 	mov	sp,fp
 4004160:	df000017 	ldw	fp,0(sp)
 4004164:	dec00104 	addi	sp,sp,4
 4004168:	f800283a 	ret

0400416c <_ZN9DhcpClassC1Ev>:
	// TODO: make private when socket allocation moves to EthernetClass
	static uint16_t server_port[MAX_SOCK_NUM];
};


class DhcpClass {
 400416c:	defffd04 	addi	sp,sp,-12
 4004170:	dfc00215 	stw	ra,8(sp)
 4004174:	df000115 	stw	fp,4(sp)
 4004178:	df000104 	addi	fp,sp,4
 400417c:	e13fff15 	stw	r4,-4(fp)
 4004180:	e0bfff17 	ldw	r2,-4(fp)
 4004184:	10801204 	addi	r2,r2,72
 4004188:	1009883a 	mov	r4,r2
 400418c:	4003bd80 	call	4003bd8 <_ZN11EthernetUDPC1Ev>
 4004190:	0001883a 	nop
 4004194:	e037883a 	mov	sp,fp
 4004198:	dfc00117 	ldw	ra,4(sp)
 400419c:	df000017 	ldw	fp,0(sp)
 40041a0:	dec00204 	addi	sp,sp,8
 40041a4:	f800283a 	ret

040041a8 <_ZN14EthernetClient7connectEPKct>:
#include <string.h>
#include "EthernetClient.h"
#include "utility/w5100.h"

int EthernetClient::connect(const char * host, uint16_t port)
{
 40041a8:	defff204 	addi	sp,sp,-56
 40041ac:	dfc00d15 	stw	ra,52(sp)
 40041b0:	df000c15 	stw	fp,48(sp)
 40041b4:	df000c04 	addi	fp,sp,48
 40041b8:	e13ffd15 	stw	r4,-12(fp)
 40041bc:	e17ffe15 	stw	r5,-8(fp)
 40041c0:	3005883a 	mov	r2,r6
 40041c4:	e0bfff0d 	sth	r2,-4(fp)
	DNSClient dns; // Look up the host first
 40041c8:	e0bff504 	addi	r2,fp,-44
 40041cc:	1009883a 	mov	r4,r2
 40041d0:	40051f80 	call	40051f8 <_ZN9DNSClientC1Ev>
	IPAddress remote_addr;
 40041d4:	e0bffc04 	addi	r2,fp,-16
 40041d8:	1009883a 	mov	r4,r2
 40041dc:	4007c440 	call	4007c44 <_ZN9IPAddressC1Ev>

	if (_sockindex < MAX_SOCK_NUM) {
 40041e0:	e0bffd17 	ldw	r2,-12(fp)
 40041e4:	10800103 	ldbu	r2,4(r2)
 40041e8:	10803fcc 	andi	r2,r2,255
 40041ec:	10800228 	cmpgeui	r2,r2,8
 40041f0:	1000111e 	bne	r2,zero,4004238 <_ZN14EthernetClient7connectEPKct+0x90>
		if (Ethernet.socketStatus(_sockindex) != SnSR::CLOSED) {
 40041f4:	e0bffd17 	ldw	r2,-12(fp)
 40041f8:	10800103 	ldbu	r2,4(r2)
 40041fc:	10803fcc 	andi	r2,r2,255
 4004200:	1009883a 	mov	r4,r2
 4004204:	40068200 	call	4006820 <_ZN13EthernetClass12socketStatusEh>
 4004208:	10803fcc 	andi	r2,r2,255
 400420c:	1004c03a 	cmpne	r2,r2,zero
 4004210:	10803fcc 	andi	r2,r2,255
 4004214:	10000526 	beq	r2,zero,400422c <_ZN14EthernetClient7connectEPKct+0x84>
			Ethernet.socketDisconnect(_sockindex); // TODO: should we call stop()?
 4004218:	e0bffd17 	ldw	r2,-12(fp)
 400421c:	10800103 	ldbu	r2,4(r2)
 4004220:	10803fcc 	andi	r2,r2,255
 4004224:	1009883a 	mov	r4,r2
 4004228:	40069740 	call	4006974 <_ZN13EthernetClass16socketDisconnectEh>
		}
		_sockindex = MAX_SOCK_NUM;
 400422c:	e0bffd17 	ldw	r2,-12(fp)
 4004230:	00c00204 	movi	r3,8
 4004234:	10c00105 	stb	r3,4(r2)
	}
	dns.begin(Ethernet.dnsServerIP());
 4004238:	4004ea40 	call	4004ea4 <_ZN13EthernetClass11dnsServerIPEv>
 400423c:	e0bff415 	stw	r2,-48(fp)
 4004240:	e0bff504 	addi	r2,fp,-44
 4004244:	e17ff404 	addi	r5,fp,-48
 4004248:	1009883a 	mov	r4,r2
 400424c:	40026700 	call	4002670 <_ZN9DNSClient5beginERK9IPAddress>
	if (!dns.getHostByName(host, remote_addr)) return 0; // TODO: use _timeout
 4004250:	e0fffc04 	addi	r3,fp,-16
 4004254:	e0bff504 	addi	r2,fp,-44
 4004258:	01c4e204 	movi	r7,5000
 400425c:	180d883a 	mov	r6,r3
 4004260:	e17ffe17 	ldw	r5,-8(fp)
 4004264:	1009883a 	mov	r4,r2
 4004268:	40027e00 	call	40027e0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>
 400426c:	1005003a 	cmpeq	r2,r2,zero
 4004270:	10803fcc 	andi	r2,r2,255
 4004274:	10000226 	beq	r2,zero,4004280 <_ZN14EthernetClient7connectEPKct+0xd8>
 4004278:	0005883a 	mov	r2,zero
 400427c:	00000806 	br	40042a0 <_ZN14EthernetClient7connectEPKct+0xf8>
	return connect(remote_addr, port);
 4004280:	e0bffd17 	ldw	r2,-12(fp)
 4004284:	10800017 	ldw	r2,0(r2)
 4004288:	10800017 	ldw	r2,0(r2)
 400428c:	e0ffff0b 	ldhu	r3,-4(fp)
 4004290:	180d883a 	mov	r6,r3
 4004294:	e17ffc17 	ldw	r5,-16(fp)
 4004298:	e13ffd17 	ldw	r4,-12(fp)
 400429c:	103ee83a 	callr	r2
}
 40042a0:	e037883a 	mov	sp,fp
 40042a4:	dfc00117 	ldw	ra,4(sp)
 40042a8:	df000017 	ldw	fp,0(sp)
 40042ac:	dec00204 	addi	sp,sp,8
 40042b0:	f800283a 	ret

040042b4 <_ZN14EthernetClient7connectE9IPAddresst>:

int EthernetClient::connect(IPAddress ip, uint16_t port)
{
 40042b4:	deffe004 	addi	sp,sp,-128
 40042b8:	dfc01f15 	stw	ra,124(sp)
 40042bc:	df001e15 	stw	fp,120(sp)
 40042c0:	ddc01d15 	stw	r23,116(sp)
 40042c4:	dd801c15 	stw	r22,112(sp)
 40042c8:	dd401b15 	stw	r21,108(sp)
 40042cc:	dd001a15 	stw	r20,104(sp)
 40042d0:	dcc01915 	stw	r19,100(sp)
 40042d4:	dc801815 	stw	r18,96(sp)
 40042d8:	dc401715 	stw	r17,92(sp)
 40042dc:	dc001615 	stw	r16,88(sp)
 40042e0:	df001e04 	addi	fp,sp,120
 40042e4:	e13fe615 	stw	r4,-104(fp)
 40042e8:	e17fe715 	stw	r5,-100(fp)
 40042ec:	3005883a 	mov	r2,r6
 40042f0:	e0bfe80d 	sth	r2,-96(fp)
 40042f4:	00810074 	movhi	r2,1025
 40042f8:	10a61604 	addi	r2,r2,-26536
 40042fc:	e0bfef15 	stw	r2,-68(fp)
 4004300:	008100b4 	movhi	r2,1026
 4004304:	10aad104 	addi	r2,r2,-21692
 4004308:	e0bff015 	stw	r2,-64(fp)
 400430c:	e0bff104 	addi	r2,fp,-60
 4004310:	e0ffe204 	addi	r3,fp,-120
 4004314:	10c00015 	stw	r3,0(r2)
 4004318:	00c10034 	movhi	r3,1024
 400431c:	18d15904 	addi	r3,r3,17764
 4004320:	10c00115 	stw	r3,4(r2)
 4004324:	16c00215 	stw	sp,8(r2)
 4004328:	e0bfe904 	addi	r2,fp,-92
 400432c:	1009883a 	mov	r4,r2
 4004330:	400afa40 	call	400afa4 <_Unwind_SjLj_Register>
	if (_sockindex < MAX_SOCK_NUM) {
 4004334:	e0bfe617 	ldw	r2,-104(fp)
 4004338:	10800103 	ldbu	r2,4(r2)
 400433c:	10803fcc 	andi	r2,r2,255
 4004340:	10800228 	cmpgeui	r2,r2,8
 4004344:	1000131e 	bne	r2,zero,4004394 <_ZN14EthernetClient7connectE9IPAddresst+0xe0>
		if (Ethernet.socketStatus(_sockindex) != SnSR::CLOSED) {
 4004348:	e0bfe617 	ldw	r2,-104(fp)
 400434c:	10800103 	ldbu	r2,4(r2)
 4004350:	10c03fcc 	andi	r3,r2,255
 4004354:	00bfffc4 	movi	r2,-1
 4004358:	e0bfea15 	stw	r2,-88(fp)
 400435c:	1809883a 	mov	r4,r3
 4004360:	40068200 	call	4006820 <_ZN13EthernetClass12socketStatusEh>
 4004364:	10803fcc 	andi	r2,r2,255
 4004368:	1004c03a 	cmpne	r2,r2,zero
 400436c:	10803fcc 	andi	r2,r2,255
 4004370:	10000526 	beq	r2,zero,4004388 <_ZN14EthernetClient7connectE9IPAddresst+0xd4>
			Ethernet.socketDisconnect(_sockindex); // TODO: should we call stop()?
 4004374:	e0bfe617 	ldw	r2,-104(fp)
 4004378:	10800103 	ldbu	r2,4(r2)
 400437c:	10803fcc 	andi	r2,r2,255
 4004380:	1009883a 	mov	r4,r2
 4004384:	40069740 	call	4006974 <_ZN13EthernetClass16socketDisconnectEh>
		}
		_sockindex = MAX_SOCK_NUM;
 4004388:	e0bfe617 	ldw	r2,-104(fp)
 400438c:	00c00204 	movi	r3,8
 4004390:	10c00105 	stb	r3,4(r2)
	}
#if defined(ESP8266) || defined(ESP32)
	if (ip == IPAddress((uint32_t)0) || ip == IPAddress(0xFFFFFFFFul)) return 0;
#else
	if (ip == IPAddress(0ul) || ip == IPAddress(0xFFFFFFFFul)) return 0;
 4004394:	e0ffe504 	addi	r3,fp,-108
 4004398:	00800044 	movi	r2,1
 400439c:	e0bfea15 	stw	r2,-88(fp)
 40043a0:	000b883a 	mov	r5,zero
 40043a4:	1809883a 	mov	r4,r3
 40043a8:	4007ce00 	call	4007ce0 <_ZN9IPAddressC1Em>
 40043ac:	e0ffe504 	addi	r3,fp,-108
 40043b0:	e0bfe704 	addi	r2,fp,-100
 40043b4:	180b883a 	mov	r5,r3
 40043b8:	1009883a 	mov	r4,r2
 40043bc:	40025e80 	call	40025e8 <_ZNK9IPAddresseqERKS_>
 40043c0:	10803fcc 	andi	r2,r2,255
 40043c4:	10000b1e 	bne	r2,zero,40043f4 <_ZN14EthernetClient7connectE9IPAddresst+0x140>
 40043c8:	e0bfe404 	addi	r2,fp,-112
 40043cc:	017fffc4 	movi	r5,-1
 40043d0:	1009883a 	mov	r4,r2
 40043d4:	4007ce00 	call	4007ce0 <_ZN9IPAddressC1Em>
 40043d8:	e0ffe404 	addi	r3,fp,-112
 40043dc:	e0bfe704 	addi	r2,fp,-100
 40043e0:	180b883a 	mov	r5,r3
 40043e4:	1009883a 	mov	r4,r2
 40043e8:	40025e80 	call	40025e8 <_ZNK9IPAddresseqERKS_>
 40043ec:	10803fcc 	andi	r2,r2,255
 40043f0:	10000226 	beq	r2,zero,40043fc <_ZN14EthernetClient7connectE9IPAddresst+0x148>
 40043f4:	00800044 	movi	r2,1
 40043f8:	00000106 	br	4004400 <_ZN14EthernetClient7connectE9IPAddresst+0x14c>
 40043fc:	0005883a 	mov	r2,zero
 4004400:	10803fcc 	andi	r2,r2,255
 4004404:	10000226 	beq	r2,zero,4004410 <_ZN14EthernetClient7connectE9IPAddresst+0x15c>
 4004408:	0005883a 	mov	r2,zero
 400440c:	00005306 	br	400455c <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
#endif
	_sockindex = Ethernet.socketBegin(SnMR::TCP, 0);
 4004410:	00bfffc4 	movi	r2,-1
 4004414:	e0bfea15 	stw	r2,-88(fp)
 4004418:	000b883a 	mov	r5,zero
 400441c:	01000844 	movi	r4,33
 4004420:	40062340 	call	4006234 <_ZN13EthernetClass11socketBeginEht>
 4004424:	1007883a 	mov	r3,r2
 4004428:	e0bfe617 	ldw	r2,-104(fp)
 400442c:	10c00105 	stb	r3,4(r2)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004430:	e0bfe617 	ldw	r2,-104(fp)
 4004434:	10800103 	ldbu	r2,4(r2)
 4004438:	10803fcc 	andi	r2,r2,255
 400443c:	10800230 	cmpltui	r2,r2,8
 4004440:	1000021e 	bne	r2,zero,400444c <_ZN14EthernetClient7connectE9IPAddresst+0x198>
 4004444:	0005883a 	mov	r2,zero
 4004448:	00004406 	br	400455c <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
	Ethernet.socketConnect(_sockindex, rawIPAddress(ip), port);
 400444c:	e0bfe617 	ldw	r2,-104(fp)
 4004450:	10800103 	ldbu	r2,4(r2)
 4004454:	10803fcc 	andi	r2,r2,255
 4004458:	e0bff615 	stw	r2,-40(fp)
 400445c:	e0bfe617 	ldw	r2,-104(fp)
 4004460:	e0ffe704 	addi	r3,fp,-100
 4004464:	180b883a 	mov	r5,r3
 4004468:	1009883a 	mov	r4,r2
 400446c:	4004e700 	call	4004e70 <_ZN6Client12rawIPAddressER9IPAddress>
 4004470:	1009883a 	mov	r4,r2
 4004474:	e0ffe80b 	ldhu	r3,-96(fp)
 4004478:	00bfffc4 	movi	r2,-1
 400447c:	e0bfea15 	stw	r2,-88(fp)
 4004480:	180d883a 	mov	r6,r3
 4004484:	200b883a 	mov	r5,r4
 4004488:	e13ff617 	ldw	r4,-40(fp)
 400448c:	40069040 	call	4006904 <_ZN13EthernetClass13socketConnectEhPht>
	uint32_t start = clock();
 4004490:	400b2d40 	call	400b2d4 <clock>
 4004494:	e0bfe215 	stw	r2,-120(fp)
	while (1) {
		uint8_t stat = Ethernet.socketStatus(_sockindex);
 4004498:	e0bfe617 	ldw	r2,-104(fp)
 400449c:	10800103 	ldbu	r2,4(r2)
 40044a0:	10c03fcc 	andi	r3,r2,255
 40044a4:	00bfffc4 	movi	r2,-1
 40044a8:	e0bfea15 	stw	r2,-88(fp)
 40044ac:	1809883a 	mov	r4,r3
 40044b0:	40068200 	call	4006820 <_ZN13EthernetClass12socketStatusEh>
 40044b4:	e0bfe305 	stb	r2,-116(fp)
		if (stat == SnSR::ESTABLISHED) return 1;
 40044b8:	e0bfe303 	ldbu	r2,-116(fp)
 40044bc:	108005d8 	cmpnei	r2,r2,23
 40044c0:	1000021e 	bne	r2,zero,40044cc <_ZN14EthernetClient7connectE9IPAddresst+0x218>
 40044c4:	00800044 	movi	r2,1
 40044c8:	00002406 	br	400455c <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
		if (stat == SnSR::CLOSE_WAIT) return 1;
 40044cc:	e0bfe303 	ldbu	r2,-116(fp)
 40044d0:	10800718 	cmpnei	r2,r2,28
 40044d4:	1000021e 	bne	r2,zero,40044e0 <_ZN14EthernetClient7connectE9IPAddresst+0x22c>
 40044d8:	00800044 	movi	r2,1
 40044dc:	00001f06 	br	400455c <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
		if (stat == SnSR::CLOSED) return 0;
 40044e0:	e0bfe303 	ldbu	r2,-116(fp)
 40044e4:	1000021e 	bne	r2,zero,40044f0 <_ZN14EthernetClient7connectE9IPAddresst+0x23c>
 40044e8:	0005883a 	mov	r2,zero
 40044ec:	00001b06 	br	400455c <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
		if (clock() - start > _timeout) break;
 40044f0:	400b2d40 	call	400b2d4 <clock>
 40044f4:	1007883a 	mov	r3,r2
 40044f8:	e0bfe217 	ldw	r2,-120(fp)
 40044fc:	1885c83a 	sub	r2,r3,r2
 4004500:	e0ffe617 	ldw	r3,-104(fp)
 4004504:	18c0018b 	ldhu	r3,6(r3)
 4004508:	18ffffcc 	andi	r3,r3,65535
 400450c:	1885803a 	cmpltu	r2,r3,r2
 4004510:	10803fcc 	andi	r2,r2,255
 4004514:	1000051e 	bne	r2,zero,400452c <_ZN14EthernetClient7connectE9IPAddresst+0x278>
		usleep(1000);
 4004518:	00bfffc4 	movi	r2,-1
 400451c:	e0bfea15 	stw	r2,-88(fp)
 4004520:	0100fa04 	movi	r4,1000
 4004524:	40188c00 	call	40188c0 <usleep>
#endif
	_sockindex = Ethernet.socketBegin(SnMR::TCP, 0);
	if (_sockindex >= MAX_SOCK_NUM) return 0;
	Ethernet.socketConnect(_sockindex, rawIPAddress(ip), port);
	uint32_t start = clock();
	while (1) {
 4004528:	003fdb06 	br	4004498 <__alt_data_end+0xfc004498>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
		if (stat == SnSR::ESTABLISHED) return 1;
		if (stat == SnSR::CLOSE_WAIT) return 1;
		if (stat == SnSR::CLOSED) return 0;
		if (clock() - start > _timeout) break;
 400452c:	0001883a 	nop
		usleep(1000);
	}
	Ethernet.socketClose(_sockindex);
 4004530:	e0bfe617 	ldw	r2,-104(fp)
 4004534:	10800103 	ldbu	r2,4(r2)
 4004538:	10c03fcc 	andi	r3,r2,255
 400453c:	00bfffc4 	movi	r2,-1
 4004540:	e0bfea15 	stw	r2,-88(fp)
 4004544:	1809883a 	mov	r4,r3
 4004548:	40068600 	call	4006860 <_ZN13EthernetClass11socketCloseEh>
	_sockindex = MAX_SOCK_NUM;
 400454c:	e0bfe617 	ldw	r2,-104(fp)
 4004550:	00c00204 	movi	r3,8
 4004554:	10c00105 	stb	r3,4(r2)
	return 0;
 4004558:	0005883a 	mov	r2,zero
 400455c:	e0bff715 	stw	r2,-36(fp)
 4004560:	00000806 	br	4004584 <_ZN14EthernetClient7connectE9IPAddresst+0x2d0>
 4004564:	e7001e04 	addi	fp,fp,120
 4004568:	e0bfeb17 	ldw	r2,-84(fp)
		_sockindex = MAX_SOCK_NUM;
	}
#if defined(ESP8266) || defined(ESP32)
	if (ip == IPAddress((uint32_t)0) || ip == IPAddress(0xFFFFFFFFul)) return 0;
#else
	if (ip == IPAddress(0ul) || ip == IPAddress(0xFFFFFFFFul)) return 0;
 400456c:	0001883a 	nop
 4004570:	1007883a 	mov	r3,r2
 4004574:	00bfffc4 	movi	r2,-1
 4004578:	e0bfea15 	stw	r2,-88(fp)
 400457c:	1809883a 	mov	r4,r3
 4004580:	400b1a00 	call	400b1a0 <_Unwind_SjLj_Resume>
 4004584:	e0bfe904 	addi	r2,fp,-92
 4004588:	1009883a 	mov	r4,r2
 400458c:	400afbc0 	call	400afbc <_Unwind_SjLj_Unregister>
		usleep(1000);
	}
	Ethernet.socketClose(_sockindex);
	_sockindex = MAX_SOCK_NUM;
	return 0;
}
 4004590:	e0bff717 	ldw	r2,-36(fp)
 4004594:	e6fff804 	addi	sp,fp,-32
 4004598:	dfc00917 	ldw	ra,36(sp)
 400459c:	df000817 	ldw	fp,32(sp)
 40045a0:	ddc00717 	ldw	r23,28(sp)
 40045a4:	dd800617 	ldw	r22,24(sp)
 40045a8:	dd400517 	ldw	r21,20(sp)
 40045ac:	dd000417 	ldw	r20,16(sp)
 40045b0:	dcc00317 	ldw	r19,12(sp)
 40045b4:	dc800217 	ldw	r18,8(sp)
 40045b8:	dc400117 	ldw	r17,4(sp)
 40045bc:	dc000017 	ldw	r16,0(sp)
 40045c0:	dec00a04 	addi	sp,sp,40
 40045c4:	f800283a 	ret

040045c8 <_ZN14EthernetClient17availableForWriteEv>:

int EthernetClient::availableForWrite(void)
{
 40045c8:	defffd04 	addi	sp,sp,-12
 40045cc:	dfc00215 	stw	ra,8(sp)
 40045d0:	df000115 	stw	fp,4(sp)
 40045d4:	df000104 	addi	fp,sp,4
 40045d8:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 40045dc:	e0bfff17 	ldw	r2,-4(fp)
 40045e0:	10800103 	ldbu	r2,4(r2)
 40045e4:	10803fcc 	andi	r2,r2,255
 40045e8:	10800230 	cmpltui	r2,r2,8
 40045ec:	1000021e 	bne	r2,zero,40045f8 <_ZN14EthernetClient17availableForWriteEv+0x30>
 40045f0:	0005883a 	mov	r2,zero
 40045f4:	00000606 	br	4004610 <_ZN14EthernetClient17availableForWriteEv+0x48>
	return Ethernet.socketSendAvailable(_sockindex);
 40045f8:	e0bfff17 	ldw	r2,-4(fp)
 40045fc:	10800103 	ldbu	r2,4(r2)
 4004600:	10803fcc 	andi	r2,r2,255
 4004604:	1009883a 	mov	r4,r2
 4004608:	40072300 	call	4007230 <_ZN13EthernetClass19socketSendAvailableEh>
 400460c:	10bfffcc 	andi	r2,r2,65535
}
 4004610:	e037883a 	mov	sp,fp
 4004614:	dfc00117 	ldw	ra,4(sp)
 4004618:	df000017 	ldw	fp,0(sp)
 400461c:	dec00204 	addi	sp,sp,8
 4004620:	f800283a 	ret

04004624 <_ZN14EthernetClient5writeEh>:

size_t EthernetClient::write(uint8_t b)
{
 4004624:	defffc04 	addi	sp,sp,-16
 4004628:	dfc00315 	stw	ra,12(sp)
 400462c:	df000215 	stw	fp,8(sp)
 4004630:	df000204 	addi	fp,sp,8
 4004634:	e13ffe15 	stw	r4,-8(fp)
 4004638:	2805883a 	mov	r2,r5
 400463c:	e0bfff05 	stb	r2,-4(fp)
	return write(&b, 1);
 4004640:	e0bffe17 	ldw	r2,-8(fp)
 4004644:	10800017 	ldw	r2,0(r2)
 4004648:	10800304 	addi	r2,r2,12
 400464c:	10800017 	ldw	r2,0(r2)
 4004650:	e0ffff04 	addi	r3,fp,-4
 4004654:	01800044 	movi	r6,1
 4004658:	180b883a 	mov	r5,r3
 400465c:	e13ffe17 	ldw	r4,-8(fp)
 4004660:	103ee83a 	callr	r2
}
 4004664:	e037883a 	mov	sp,fp
 4004668:	dfc00117 	ldw	ra,4(sp)
 400466c:	df000017 	ldw	fp,0(sp)
 4004670:	dec00204 	addi	sp,sp,8
 4004674:	f800283a 	ret

04004678 <_ZN14EthernetClient5writeEPKhj>:

size_t EthernetClient::write(const uint8_t *buf, size_t size)
{
 4004678:	defffb04 	addi	sp,sp,-20
 400467c:	dfc00415 	stw	ra,16(sp)
 4004680:	df000315 	stw	fp,12(sp)
 4004684:	df000304 	addi	fp,sp,12
 4004688:	e13ffd15 	stw	r4,-12(fp)
 400468c:	e17ffe15 	stw	r5,-8(fp)
 4004690:	e1bfff15 	stw	r6,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004694:	e0bffd17 	ldw	r2,-12(fp)
 4004698:	10800103 	ldbu	r2,4(r2)
 400469c:	10803fcc 	andi	r2,r2,255
 40046a0:	10800230 	cmpltui	r2,r2,8
 40046a4:	1000021e 	bne	r2,zero,40046b0 <_ZN14EthernetClient5writeEPKhj+0x38>
 40046a8:	0005883a 	mov	r2,zero
 40046ac:	00001006 	br	40046f0 <_ZN14EthernetClient5writeEPKhj+0x78>
	if (Ethernet.socketSend(_sockindex, buf, size)) return size;
 40046b0:	e0bffd17 	ldw	r2,-12(fp)
 40046b4:	10800103 	ldbu	r2,4(r2)
 40046b8:	10c03fcc 	andi	r3,r2,255
 40046bc:	e0bfff17 	ldw	r2,-4(fp)
 40046c0:	10bfffcc 	andi	r2,r2,65535
 40046c4:	100d883a 	mov	r6,r2
 40046c8:	e17ffe17 	ldw	r5,-8(fp)
 40046cc:	1809883a 	mov	r4,r3
 40046d0:	40070f80 	call	40070f8 <_ZN13EthernetClass10socketSendEhPKht>
 40046d4:	10bfffcc 	andi	r2,r2,65535
 40046d8:	1004c03a 	cmpne	r2,r2,zero
 40046dc:	10803fcc 	andi	r2,r2,255
 40046e0:	10000226 	beq	r2,zero,40046ec <_ZN14EthernetClient5writeEPKhj+0x74>
 40046e4:	e0bfff17 	ldw	r2,-4(fp)
 40046e8:	00000106 	br	40046f0 <_ZN14EthernetClient5writeEPKhj+0x78>
	// setWriteError();
	return 0;
 40046ec:	0005883a 	mov	r2,zero
}
 40046f0:	e037883a 	mov	sp,fp
 40046f4:	dfc00117 	ldw	ra,4(sp)
 40046f8:	df000017 	ldw	fp,0(sp)
 40046fc:	dec00204 	addi	sp,sp,8
 4004700:	f800283a 	ret

04004704 <_ZN14EthernetClient7printlnEv>:

size_t EthernetClient::println()
{
 4004704:	defffd04 	addi	sp,sp,-12
 4004708:	dfc00215 	stw	ra,8(sp)
 400470c:	df000115 	stw	fp,4(sp)
 4004710:	df000104 	addi	fp,sp,4
 4004714:	e13fff15 	stw	r4,-4(fp)
	return println("\n");
 4004718:	e0bfff17 	ldw	r2,-4(fp)
 400471c:	10800017 	ldw	r2,0(r2)
 4004720:	10801004 	addi	r2,r2,64
 4004724:	10800017 	ldw	r2,0(r2)
 4004728:	014100b4 	movhi	r5,1026
 400472c:	296f8f04 	addi	r5,r5,-16836
 4004730:	e13fff17 	ldw	r4,-4(fp)
 4004734:	103ee83a 	callr	r2
}
 4004738:	e037883a 	mov	sp,fp
 400473c:	dfc00117 	ldw	ra,4(sp)
 4004740:	df000017 	ldw	fp,0(sp)
 4004744:	dec00204 	addi	sp,sp,8
 4004748:	f800283a 	ret

0400474c <_ZN14EthernetClient7printlnEPKc>:

size_t EthernetClient::println(const char *buf)
{
 400474c:	defffb04 	addi	sp,sp,-20
 4004750:	dfc00415 	stw	ra,16(sp)
 4004754:	df000315 	stw	fp,12(sp)
 4004758:	df000304 	addi	fp,sp,12
 400475c:	e13ffe15 	stw	r4,-8(fp)
 4004760:	e17fff15 	stw	r5,-4(fp)
	size_t len = strlen(buf);
 4004764:	e13fff17 	ldw	r4,-4(fp)
 4004768:	400c3b40 	call	400c3b4 <strlen>
 400476c:	e0bffd15 	stw	r2,-12(fp)
	write((uint8_t*)buf, len);
 4004770:	e0bffe17 	ldw	r2,-8(fp)
 4004774:	10800017 	ldw	r2,0(r2)
 4004778:	10800304 	addi	r2,r2,12
 400477c:	10800017 	ldw	r2,0(r2)
 4004780:	e1bffd17 	ldw	r6,-12(fp)
 4004784:	e17fff17 	ldw	r5,-4(fp)
 4004788:	e13ffe17 	ldw	r4,-8(fp)
 400478c:	103ee83a 	callr	r2
	write((uint8_t*)"\n", 1);
 4004790:	e0bffe17 	ldw	r2,-8(fp)
 4004794:	10800017 	ldw	r2,0(r2)
 4004798:	10800304 	addi	r2,r2,12
 400479c:	10800017 	ldw	r2,0(r2)
 40047a0:	01800044 	movi	r6,1
 40047a4:	014100b4 	movhi	r5,1026
 40047a8:	296f8f04 	addi	r5,r5,-16836
 40047ac:	e13ffe17 	ldw	r4,-8(fp)
 40047b0:	103ee83a 	callr	r2
	return 0;
 40047b4:	0005883a 	mov	r2,zero
}
 40047b8:	e037883a 	mov	sp,fp
 40047bc:	dfc00117 	ldw	ra,4(sp)
 40047c0:	df000017 	ldw	fp,0(sp)
 40047c4:	dec00204 	addi	sp,sp,8
 40047c8:	f800283a 	ret

040047cc <_ZN14EthernetClient9availableEv>:

int EthernetClient::available()
{
 40047cc:	defffd04 	addi	sp,sp,-12
 40047d0:	dfc00215 	stw	ra,8(sp)
 40047d4:	df000115 	stw	fp,4(sp)
 40047d8:	df000104 	addi	fp,sp,4
 40047dc:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 40047e0:	e0bfff17 	ldw	r2,-4(fp)
 40047e4:	10800103 	ldbu	r2,4(r2)
 40047e8:	10803fcc 	andi	r2,r2,255
 40047ec:	10800230 	cmpltui	r2,r2,8
 40047f0:	1000021e 	bne	r2,zero,40047fc <_ZN14EthernetClient9availableEv+0x30>
 40047f4:	0005883a 	mov	r2,zero
 40047f8:	00000606 	br	4004814 <_ZN14EthernetClient9availableEv+0x48>
	return Ethernet.socketRecvAvailable(_sockindex);
 40047fc:	e0bfff17 	ldw	r2,-4(fp)
 4004800:	10800103 	ldbu	r2,4(r2)
 4004804:	10803fcc 	andi	r2,r2,255
 4004808:	1009883a 	mov	r4,r2
 400480c:	4006ddc0 	call	4006ddc <_ZN13EthernetClass19socketRecvAvailableEh>
 4004810:	10bfffcc 	andi	r2,r2,65535
	// packets if they are lost by the network?  Someday this should
	// be checked by a man-in-the-middle test which discards certain
	// packets.  If ACKs aren't resent, we would need to check for
	// returning 0 here and after a timeout do another Sock_RECV
	// command to cause the WIZnet chip to resend the ACK packet.
}
 4004814:	e037883a 	mov	sp,fp
 4004818:	dfc00117 	ldw	ra,4(sp)
 400481c:	df000017 	ldw	fp,0(sp)
 4004820:	dec00204 	addi	sp,sp,8
 4004824:	f800283a 	ret

04004828 <_ZN14EthernetClient4readEPhj>:

int EthernetClient::read(uint8_t *buf, size_t size)
{
 4004828:	defffb04 	addi	sp,sp,-20
 400482c:	dfc00415 	stw	ra,16(sp)
 4004830:	df000315 	stw	fp,12(sp)
 4004834:	df000304 	addi	fp,sp,12
 4004838:	e13ffd15 	stw	r4,-12(fp)
 400483c:	e17ffe15 	stw	r5,-8(fp)
 4004840:	e1bfff15 	stw	r6,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004844:	e0bffd17 	ldw	r2,-12(fp)
 4004848:	10800103 	ldbu	r2,4(r2)
 400484c:	10803fcc 	andi	r2,r2,255
 4004850:	10800230 	cmpltui	r2,r2,8
 4004854:	1000021e 	bne	r2,zero,4004860 <_ZN14EthernetClient4readEPhj+0x38>
 4004858:	0005883a 	mov	r2,zero
 400485c:	00000b06 	br	400488c <_ZN14EthernetClient4readEPhj+0x64>
	return Ethernet.socketRecv(_sockindex, buf, size);
 4004860:	e0bffd17 	ldw	r2,-12(fp)
 4004864:	10800103 	ldbu	r2,4(r2)
 4004868:	10803fcc 	andi	r2,r2,255
 400486c:	e0ffff17 	ldw	r3,-4(fp)
 4004870:	18ffffcc 	andi	r3,r3,65535
 4004874:	18e0001c 	xori	r3,r3,32768
 4004878:	18e00004 	addi	r3,r3,-32768
 400487c:	180d883a 	mov	r6,r3
 4004880:	e17ffe17 	ldw	r5,-8(fp)
 4004884:	1009883a 	mov	r4,r2
 4004888:	4006b3c0 	call	4006b3c <_ZN13EthernetClass10socketRecvEhPhs>
}
 400488c:	e037883a 	mov	sp,fp
 4004890:	dfc00117 	ldw	ra,4(sp)
 4004894:	df000017 	ldw	fp,0(sp)
 4004898:	dec00204 	addi	sp,sp,8
 400489c:	f800283a 	ret

040048a0 <_ZN14EthernetClient4peekEv>:

int EthernetClient::peek()
{
 40048a0:	defffd04 	addi	sp,sp,-12
 40048a4:	dfc00215 	stw	ra,8(sp)
 40048a8:	df000115 	stw	fp,4(sp)
 40048ac:	df000104 	addi	fp,sp,4
 40048b0:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return -1;
 40048b4:	e0bfff17 	ldw	r2,-4(fp)
 40048b8:	10800103 	ldbu	r2,4(r2)
 40048bc:	10803fcc 	andi	r2,r2,255
 40048c0:	10800230 	cmpltui	r2,r2,8
 40048c4:	1000021e 	bne	r2,zero,40048d0 <_ZN14EthernetClient4peekEv+0x30>
 40048c8:	00bfffc4 	movi	r2,-1
 40048cc:	00001106 	br	4004914 <_ZN14EthernetClient4peekEv+0x74>
	if (!available()) return -1;
 40048d0:	e0bfff17 	ldw	r2,-4(fp)
 40048d4:	10800017 	ldw	r2,0(r2)
 40048d8:	10800404 	addi	r2,r2,16
 40048dc:	10800017 	ldw	r2,0(r2)
 40048e0:	e13fff17 	ldw	r4,-4(fp)
 40048e4:	103ee83a 	callr	r2
 40048e8:	1005003a 	cmpeq	r2,r2,zero
 40048ec:	10803fcc 	andi	r2,r2,255
 40048f0:	10000226 	beq	r2,zero,40048fc <_ZN14EthernetClient4peekEv+0x5c>
 40048f4:	00bfffc4 	movi	r2,-1
 40048f8:	00000606 	br	4004914 <_ZN14EthernetClient4peekEv+0x74>
	return Ethernet.socketPeek(_sockindex);
 40048fc:	e0bfff17 	ldw	r2,-4(fp)
 4004900:	10800103 	ldbu	r2,4(r2)
 4004904:	10803fcc 	andi	r2,r2,255
 4004908:	1009883a 	mov	r4,r2
 400490c:	4006e880 	call	4006e88 <_ZN13EthernetClass10socketPeekEh>
 4004910:	10803fcc 	andi	r2,r2,255
}
 4004914:	e037883a 	mov	sp,fp
 4004918:	dfc00117 	ldw	ra,4(sp)
 400491c:	df000017 	ldw	fp,0(sp)
 4004920:	dec00204 	addi	sp,sp,8
 4004924:	f800283a 	ret

04004928 <_ZN14EthernetClient4readEv>:

int EthernetClient::read()
{
 4004928:	defffc04 	addi	sp,sp,-16
 400492c:	dfc00315 	stw	ra,12(sp)
 4004930:	df000215 	stw	fp,8(sp)
 4004934:	df000204 	addi	fp,sp,8
 4004938:	e13fff15 	stw	r4,-4(fp)
	uint8_t b;
	if (Ethernet.socketRecv(_sockindex, &b, 1) > 0) return b;
 400493c:	e0bfff17 	ldw	r2,-4(fp)
 4004940:	10800103 	ldbu	r2,4(r2)
 4004944:	10803fcc 	andi	r2,r2,255
 4004948:	01800044 	movi	r6,1
 400494c:	e17ffe04 	addi	r5,fp,-8
 4004950:	1009883a 	mov	r4,r2
 4004954:	4006b3c0 	call	4006b3c <_ZN13EthernetClass10socketRecvEhPhs>
 4004958:	0084803a 	cmplt	r2,zero,r2
 400495c:	10803fcc 	andi	r2,r2,255
 4004960:	10000326 	beq	r2,zero,4004970 <_ZN14EthernetClient4readEv+0x48>
 4004964:	e0bffe03 	ldbu	r2,-8(fp)
 4004968:	10803fcc 	andi	r2,r2,255
 400496c:	00000106 	br	4004974 <_ZN14EthernetClient4readEv+0x4c>
	return -1;
 4004970:	00bfffc4 	movi	r2,-1
}
 4004974:	e037883a 	mov	sp,fp
 4004978:	dfc00117 	ldw	ra,4(sp)
 400497c:	df000017 	ldw	fp,0(sp)
 4004980:	dec00204 	addi	sp,sp,8
 4004984:	f800283a 	ret

04004988 <_ZN14EthernetClient5flushEv>:

void EthernetClient::flush()
{
 4004988:	defffc04 	addi	sp,sp,-16
 400498c:	dfc00315 	stw	ra,12(sp)
 4004990:	df000215 	stw	fp,8(sp)
 4004994:	df000204 	addi	fp,sp,8
 4004998:	e13fff15 	stw	r4,-4(fp)
	while (_sockindex < MAX_SOCK_NUM) {
 400499c:	e0bfff17 	ldw	r2,-4(fp)
 40049a0:	10800103 	ldbu	r2,4(r2)
 40049a4:	10803fcc 	andi	r2,r2,255
 40049a8:	10800228 	cmpgeui	r2,r2,8
 40049ac:	1000191e 	bne	r2,zero,4004a14 <_ZN14EthernetClient5flushEv+0x8c>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
 40049b0:	e0bfff17 	ldw	r2,-4(fp)
 40049b4:	10800103 	ldbu	r2,4(r2)
 40049b8:	10803fcc 	andi	r2,r2,255
 40049bc:	1009883a 	mov	r4,r2
 40049c0:	40068200 	call	4006820 <_ZN13EthernetClass12socketStatusEh>
 40049c4:	e0bffe05 	stb	r2,-8(fp)
		if (stat != SnSR::ESTABLISHED && stat != SnSR::CLOSE_WAIT) return;
 40049c8:	e0bffe03 	ldbu	r2,-8(fp)
 40049cc:	108005e0 	cmpeqi	r2,r2,23
 40049d0:	1000031e 	bne	r2,zero,40049e0 <_ZN14EthernetClient5flushEv+0x58>
 40049d4:	e0bffe03 	ldbu	r2,-8(fp)
 40049d8:	10800720 	cmpeqi	r2,r2,28
 40049dc:	10000a26 	beq	r2,zero,4004a08 <_ZN14EthernetClient5flushEv+0x80>
		if (Ethernet.socketSendAvailable(_sockindex) >= W5100.SSIZE) return;
 40049e0:	e0bfff17 	ldw	r2,-4(fp)
 40049e4:	10800103 	ldbu	r2,4(r2)
 40049e8:	10803fcc 	andi	r2,r2,255
 40049ec:	1009883a 	mov	r4,r2
 40049f0:	40072300 	call	4007230 <_ZN13EthernetClass19socketSendAvailableEh>
 40049f4:	10bfffcc 	andi	r2,r2,65535
 40049f8:	10820028 	cmpgeui	r2,r2,2048
 40049fc:	10803fcc 	andi	r2,r2,255
 4004a00:	1000031e 	bne	r2,zero,4004a10 <_ZN14EthernetClient5flushEv+0x88>
	return -1;
}

void EthernetClient::flush()
{
	while (_sockindex < MAX_SOCK_NUM) {
 4004a04:	003fe506 	br	400499c <__alt_data_end+0xfc00499c>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
		if (stat != SnSR::ESTABLISHED && stat != SnSR::CLOSE_WAIT) return;
 4004a08:	0001883a 	nop
 4004a0c:	00000106 	br	4004a14 <_ZN14EthernetClient5flushEv+0x8c>
		if (Ethernet.socketSendAvailable(_sockindex) >= W5100.SSIZE) return;
 4004a10:	0001883a 	nop
	}
}
 4004a14:	e037883a 	mov	sp,fp
 4004a18:	dfc00117 	ldw	ra,4(sp)
 4004a1c:	df000017 	ldw	fp,0(sp)
 4004a20:	dec00204 	addi	sp,sp,8
 4004a24:	f800283a 	ret

04004a28 <_ZN14EthernetClient4stopEv>:

void EthernetClient::stop()
{
 4004a28:	defffc04 	addi	sp,sp,-16
 4004a2c:	dfc00315 	stw	ra,12(sp)
 4004a30:	df000215 	stw	fp,8(sp)
 4004a34:	df000204 	addi	fp,sp,8
 4004a38:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return;
 4004a3c:	e0bfff17 	ldw	r2,-4(fp)
 4004a40:	10800103 	ldbu	r2,4(r2)
 4004a44:	10803fcc 	andi	r2,r2,255
 4004a48:	10800230 	cmpltui	r2,r2,8
 4004a4c:	10002a26 	beq	r2,zero,4004af8 <_ZN14EthernetClient4stopEv+0xd0>

	// attempt to close the connection gracefully (send a FIN to other side)
	Ethernet.socketDisconnect(_sockindex);
 4004a50:	e0bfff17 	ldw	r2,-4(fp)
 4004a54:	10800103 	ldbu	r2,4(r2)
 4004a58:	10803fcc 	andi	r2,r2,255
 4004a5c:	1009883a 	mov	r4,r2
 4004a60:	40069740 	call	4006974 <_ZN13EthernetClass16socketDisconnectEh>
	unsigned long start = clock();
 4004a64:	400b2d40 	call	400b2d4 <clock>
 4004a68:	e0bffe15 	stw	r2,-8(fp)

	// wait up to a second for the connection to close
	do {
		if (Ethernet.socketStatus(_sockindex) == SnSR::CLOSED) {
 4004a6c:	e0bfff17 	ldw	r2,-4(fp)
 4004a70:	10800103 	ldbu	r2,4(r2)
 4004a74:	10803fcc 	andi	r2,r2,255
 4004a78:	1009883a 	mov	r4,r2
 4004a7c:	40068200 	call	4006820 <_ZN13EthernetClass12socketStatusEh>
 4004a80:	10803fcc 	andi	r2,r2,255
 4004a84:	1005003a 	cmpeq	r2,r2,zero
 4004a88:	10803fcc 	andi	r2,r2,255
 4004a8c:	10000426 	beq	r2,zero,4004aa0 <_ZN14EthernetClient4stopEv+0x78>
			_sockindex = MAX_SOCK_NUM;
 4004a90:	e0bfff17 	ldw	r2,-4(fp)
 4004a94:	00c00204 	movi	r3,8
 4004a98:	10c00105 	stb	r3,4(r2)
			return; // exit the loop
 4004a9c:	00001706 	br	4004afc <_ZN14EthernetClient4stopEv+0xd4>
		}
		usleep(1000);
 4004aa0:	0100fa04 	movi	r4,1000
 4004aa4:	40188c00 	call	40188c0 <usleep>
	} while (clock() - start < _timeout);
 4004aa8:	400b2d40 	call	400b2d4 <clock>
 4004aac:	1007883a 	mov	r3,r2
 4004ab0:	e0bffe17 	ldw	r2,-8(fp)
 4004ab4:	1887c83a 	sub	r3,r3,r2
 4004ab8:	e0bfff17 	ldw	r2,-4(fp)
 4004abc:	1080018b 	ldhu	r2,6(r2)
 4004ac0:	10bfffcc 	andi	r2,r2,65535
	// attempt to close the connection gracefully (send a FIN to other side)
	Ethernet.socketDisconnect(_sockindex);
	unsigned long start = clock();

	// wait up to a second for the connection to close
	do {
 4004ac4:	1885803a 	cmpltu	r2,r3,r2
 4004ac8:	10803fcc 	andi	r2,r2,255
 4004acc:	10000126 	beq	r2,zero,4004ad4 <_ZN14EthernetClient4stopEv+0xac>
 4004ad0:	003fe606 	br	4004a6c <__alt_data_end+0xfc004a6c>
		}
		usleep(1000);
	} while (clock() - start < _timeout);

	// if it hasn't closed, close it forcefully
	Ethernet.socketClose(_sockindex);
 4004ad4:	e0bfff17 	ldw	r2,-4(fp)
 4004ad8:	10800103 	ldbu	r2,4(r2)
 4004adc:	10803fcc 	andi	r2,r2,255
 4004ae0:	1009883a 	mov	r4,r2
 4004ae4:	40068600 	call	4006860 <_ZN13EthernetClass11socketCloseEh>
	_sockindex = MAX_SOCK_NUM;
 4004ae8:	e0bfff17 	ldw	r2,-4(fp)
 4004aec:	00c00204 	movi	r3,8
 4004af0:	10c00105 	stb	r3,4(r2)
 4004af4:	00000106 	br	4004afc <_ZN14EthernetClient4stopEv+0xd4>
	}
}

void EthernetClient::stop()
{
	if (_sockindex >= MAX_SOCK_NUM) return;
 4004af8:	0001883a 	nop
	} while (clock() - start < _timeout);

	// if it hasn't closed, close it forcefully
	Ethernet.socketClose(_sockindex);
	_sockindex = MAX_SOCK_NUM;
}
 4004afc:	e037883a 	mov	sp,fp
 4004b00:	dfc00117 	ldw	ra,4(sp)
 4004b04:	df000017 	ldw	fp,0(sp)
 4004b08:	dec00204 	addi	sp,sp,8
 4004b0c:	f800283a 	ret

04004b10 <_ZN14EthernetClient9connectedEv>:

uint8_t EthernetClient::connected()
{
 4004b10:	defffc04 	addi	sp,sp,-16
 4004b14:	dfc00315 	stw	ra,12(sp)
 4004b18:	df000215 	stw	fp,8(sp)
 4004b1c:	df000204 	addi	fp,sp,8
 4004b20:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004b24:	e0bfff17 	ldw	r2,-4(fp)
 4004b28:	10800103 	ldbu	r2,4(r2)
 4004b2c:	10803fcc 	andi	r2,r2,255
 4004b30:	10800230 	cmpltui	r2,r2,8
 4004b34:	1000021e 	bne	r2,zero,4004b40 <_ZN14EthernetClient9connectedEv+0x30>
 4004b38:	0005883a 	mov	r2,zero
 4004b3c:	00001b06 	br	4004bac <_ZN14EthernetClient9connectedEv+0x9c>

	uint8_t s = Ethernet.socketStatus(_sockindex);
 4004b40:	e0bfff17 	ldw	r2,-4(fp)
 4004b44:	10800103 	ldbu	r2,4(r2)
 4004b48:	10803fcc 	andi	r2,r2,255
 4004b4c:	1009883a 	mov	r4,r2
 4004b50:	40068200 	call	4006820 <_ZN13EthernetClass12socketStatusEh>
 4004b54:	e0bffe05 	stb	r2,-8(fp)
	return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
		(s == SnSR::CLOSE_WAIT && !available()));
 4004b58:	e0bffe03 	ldbu	r2,-8(fp)
 4004b5c:	10800520 	cmpeqi	r2,r2,20
 4004b60:	1000111e 	bne	r2,zero,4004ba8 <_ZN14EthernetClient9connectedEv+0x98>
uint8_t EthernetClient::connected()
{
	if (_sockindex >= MAX_SOCK_NUM) return 0;

	uint8_t s = Ethernet.socketStatus(_sockindex);
	return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
 4004b64:	e0bffe03 	ldbu	r2,-8(fp)
 4004b68:	10000f26 	beq	r2,zero,4004ba8 <_ZN14EthernetClient9connectedEv+0x98>
 4004b6c:	e0bffe03 	ldbu	r2,-8(fp)
 4004b70:	10800620 	cmpeqi	r2,r2,24
 4004b74:	10000c1e 	bne	r2,zero,4004ba8 <_ZN14EthernetClient9connectedEv+0x98>
		(s == SnSR::CLOSE_WAIT && !available()));
 4004b78:	e0bffe03 	ldbu	r2,-8(fp)
 4004b7c:	10800718 	cmpnei	r2,r2,28
 4004b80:	1000071e 	bne	r2,zero,4004ba0 <_ZN14EthernetClient9connectedEv+0x90>
 4004b84:	e0bfff17 	ldw	r2,-4(fp)
 4004b88:	10800017 	ldw	r2,0(r2)
 4004b8c:	10800404 	addi	r2,r2,16
 4004b90:	10800017 	ldw	r2,0(r2)
 4004b94:	e13fff17 	ldw	r4,-4(fp)
 4004b98:	103ee83a 	callr	r2
 4004b9c:	10000226 	beq	r2,zero,4004ba8 <_ZN14EthernetClient9connectedEv+0x98>
 4004ba0:	00800044 	movi	r2,1
 4004ba4:	00000106 	br	4004bac <_ZN14EthernetClient9connectedEv+0x9c>
 4004ba8:	0005883a 	mov	r2,zero
}
 4004bac:	e037883a 	mov	sp,fp
 4004bb0:	dfc00117 	ldw	ra,4(sp)
 4004bb4:	df000017 	ldw	fp,0(sp)
 4004bb8:	dec00204 	addi	sp,sp,8
 4004bbc:	f800283a 	ret

04004bc0 <_ZN14EthernetClient6statusEv>:

uint8_t EthernetClient::status()
{
 4004bc0:	defffd04 	addi	sp,sp,-12
 4004bc4:	dfc00215 	stw	ra,8(sp)
 4004bc8:	df000115 	stw	fp,4(sp)
 4004bcc:	df000104 	addi	fp,sp,4
 4004bd0:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return SnSR::CLOSED;
 4004bd4:	e0bfff17 	ldw	r2,-4(fp)
 4004bd8:	10800103 	ldbu	r2,4(r2)
 4004bdc:	10803fcc 	andi	r2,r2,255
 4004be0:	10800230 	cmpltui	r2,r2,8
 4004be4:	1000021e 	bne	r2,zero,4004bf0 <_ZN14EthernetClient6statusEv+0x30>
 4004be8:	0005883a 	mov	r2,zero
 4004bec:	00000506 	br	4004c04 <_ZN14EthernetClient6statusEv+0x44>
	return Ethernet.socketStatus(_sockindex);
 4004bf0:	e0bfff17 	ldw	r2,-4(fp)
 4004bf4:	10800103 	ldbu	r2,4(r2)
 4004bf8:	10803fcc 	andi	r2,r2,255
 4004bfc:	1009883a 	mov	r4,r2
 4004c00:	40068200 	call	4006820 <_ZN13EthernetClass12socketStatusEh>
}
 4004c04:	e037883a 	mov	sp,fp
 4004c08:	dfc00117 	ldw	ra,4(sp)
 4004c0c:	df000017 	ldw	fp,0(sp)
 4004c10:	dec00204 	addi	sp,sp,8
 4004c14:	f800283a 	ret

04004c18 <_ZN14EthernetClienteqERKS_>:

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.
bool EthernetClient::operator==(const EthernetClient& rhs)
{
 4004c18:	defffd04 	addi	sp,sp,-12
 4004c1c:	df000215 	stw	fp,8(sp)
 4004c20:	df000204 	addi	fp,sp,8
 4004c24:	e13ffe15 	stw	r4,-8(fp)
 4004c28:	e17fff15 	stw	r5,-4(fp)
	if (_sockindex != rhs._sockindex) return false;
 4004c2c:	e0bffe17 	ldw	r2,-8(fp)
 4004c30:	10c00103 	ldbu	r3,4(r2)
 4004c34:	e0bfff17 	ldw	r2,-4(fp)
 4004c38:	10800103 	ldbu	r2,4(r2)
 4004c3c:	18c03fcc 	andi	r3,r3,255
 4004c40:	10803fcc 	andi	r2,r2,255
 4004c44:	18800226 	beq	r3,r2,4004c50 <_ZN14EthernetClienteqERKS_+0x38>
 4004c48:	0005883a 	mov	r2,zero
 4004c4c:	00000f06 	br	4004c8c <_ZN14EthernetClienteqERKS_+0x74>
	if (_sockindex >= MAX_SOCK_NUM) return false;
 4004c50:	e0bffe17 	ldw	r2,-8(fp)
 4004c54:	10800103 	ldbu	r2,4(r2)
 4004c58:	10803fcc 	andi	r2,r2,255
 4004c5c:	10800230 	cmpltui	r2,r2,8
 4004c60:	1000021e 	bne	r2,zero,4004c6c <_ZN14EthernetClienteqERKS_+0x54>
 4004c64:	0005883a 	mov	r2,zero
 4004c68:	00000806 	br	4004c8c <_ZN14EthernetClienteqERKS_+0x74>
	if (rhs._sockindex >= MAX_SOCK_NUM) return false;
 4004c6c:	e0bfff17 	ldw	r2,-4(fp)
 4004c70:	10800103 	ldbu	r2,4(r2)
 4004c74:	10803fcc 	andi	r2,r2,255
 4004c78:	10800230 	cmpltui	r2,r2,8
 4004c7c:	1000021e 	bne	r2,zero,4004c88 <_ZN14EthernetClienteqERKS_+0x70>
 4004c80:	0005883a 	mov	r2,zero
 4004c84:	00000106 	br	4004c8c <_ZN14EthernetClienteqERKS_+0x74>
	return true;
 4004c88:	00800044 	movi	r2,1
}
 4004c8c:	e037883a 	mov	sp,fp
 4004c90:	df000017 	ldw	fp,0(sp)
 4004c94:	dec00104 	addi	sp,sp,4
 4004c98:	f800283a 	ret

04004c9c <_ZN14EthernetClient9localPortEv>:

// https://github.com/per1234/EthernetMod
// from: https://github.com/ntruchsess/Arduino-1/commit/937bce1a0bb2567f6d03b15df79525569377dabd
uint16_t EthernetClient::localPort()
{
 4004c9c:	defffc04 	addi	sp,sp,-16
 4004ca0:	dfc00315 	stw	ra,12(sp)
 4004ca4:	df000215 	stw	fp,8(sp)
 4004ca8:	df000204 	addi	fp,sp,8
 4004cac:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004cb0:	e0bfff17 	ldw	r2,-4(fp)
 4004cb4:	10800103 	ldbu	r2,4(r2)
 4004cb8:	10803fcc 	andi	r2,r2,255
 4004cbc:	10800230 	cmpltui	r2,r2,8
 4004cc0:	1000021e 	bne	r2,zero,4004ccc <_ZN14EthernetClient9localPortEv+0x30>
 4004cc4:	0005883a 	mov	r2,zero
 4004cc8:	00000706 	br	4004ce8 <_ZN14EthernetClient9localPortEv+0x4c>
	uint16_t port;
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	port = W5100.readSnPORT(_sockindex);
 4004ccc:	e0bfff17 	ldw	r2,-4(fp)
 4004cd0:	10800103 	ldbu	r2,4(r2)
 4004cd4:	10803fcc 	andi	r2,r2,255
 4004cd8:	1009883a 	mov	r4,r2
 4004cdc:	40050f00 	call	40050f0 <_ZN10W5100Class10readSnPORTEh>
 4004ce0:	e0bffe0d 	sth	r2,-8(fp)
//	SPI_endTransaction();
	return port;
 4004ce4:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4004ce8:	e037883a 	mov	sp,fp
 4004cec:	dfc00117 	ldw	ra,4(sp)
 4004cf0:	df000017 	ldw	fp,0(sp)
 4004cf4:	dec00204 	addi	sp,sp,8
 4004cf8:	f800283a 	ret

04004cfc <_ZN14EthernetClient8remoteIPEv>:

// https://github.com/per1234/EthernetMod
// returns the remote IP address: https://forum.arduino.cc/index.php?topic=82416.0
IPAddress EthernetClient::remoteIP()
{
 4004cfc:	defffa04 	addi	sp,sp,-24
 4004d00:	dfc00515 	stw	ra,20(sp)
 4004d04:	df000415 	stw	fp,16(sp)
 4004d08:	df000404 	addi	fp,sp,16
 4004d0c:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return IPAddress((uint32_t)0);
 4004d10:	e0bfff17 	ldw	r2,-4(fp)
 4004d14:	10800103 	ldbu	r2,4(r2)
 4004d18:	10803fcc 	andi	r2,r2,255
 4004d1c:	10800230 	cmpltui	r2,r2,8
 4004d20:	1000061e 	bne	r2,zero,4004d3c <_ZN14EthernetClient8remoteIPEv+0x40>
 4004d24:	e0bffd04 	addi	r2,fp,-12
 4004d28:	000b883a 	mov	r5,zero
 4004d2c:	1009883a 	mov	r4,r2
 4004d30:	4007ce00 	call	4007ce0 <_ZN9IPAddressC1Em>
 4004d34:	e0bffd17 	ldw	r2,-12(fp)
 4004d38:	00000c06 	br	4004d6c <_ZN14EthernetClient8remoteIPEv+0x70>
	uint8_t remoteIParray[4];
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.readSnDIPR(_sockindex, remoteIParray);
 4004d3c:	e0bfff17 	ldw	r2,-4(fp)
 4004d40:	10800103 	ldbu	r2,4(r2)
 4004d44:	10803fcc 	andi	r2,r2,255
 4004d48:	e0fffe04 	addi	r3,fp,-8
 4004d4c:	180b883a 	mov	r5,r3
 4004d50:	1009883a 	mov	r4,r2
 4004d54:	40051500 	call	4005150 <_ZN10W5100Class10readSnDIPREhPh>
//	SPI_endTransaction();
	return IPAddress(remoteIParray);
 4004d58:	e0bffe04 	addi	r2,fp,-8
 4004d5c:	100b883a 	mov	r5,r2
 4004d60:	e13ffc04 	addi	r4,fp,-16
 4004d64:	4007d140 	call	4007d14 <_ZN9IPAddressC1EPKh>
 4004d68:	e0bffc17 	ldw	r2,-16(fp)
}
 4004d6c:	e037883a 	mov	sp,fp
 4004d70:	dfc00117 	ldw	ra,4(sp)
 4004d74:	df000017 	ldw	fp,0(sp)
 4004d78:	dec00204 	addi	sp,sp,8
 4004d7c:	f800283a 	ret

04004d80 <_ZN14EthernetClient10remotePortEv>:

// https://github.com/per1234/EthernetMod
// from: https://github.com/ntruchsess/Arduino-1/commit/ca37de4ba4ecbdb941f14ac1fe7dd40f3008af75
uint16_t EthernetClient::remotePort()
{
 4004d80:	defffc04 	addi	sp,sp,-16
 4004d84:	dfc00315 	stw	ra,12(sp)
 4004d88:	df000215 	stw	fp,8(sp)
 4004d8c:	df000204 	addi	fp,sp,8
 4004d90:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004d94:	e0bfff17 	ldw	r2,-4(fp)
 4004d98:	10800103 	ldbu	r2,4(r2)
 4004d9c:	10803fcc 	andi	r2,r2,255
 4004da0:	10800230 	cmpltui	r2,r2,8
 4004da4:	1000021e 	bne	r2,zero,4004db0 <_ZN14EthernetClient10remotePortEv+0x30>
 4004da8:	0005883a 	mov	r2,zero
 4004dac:	00000706 	br	4004dcc <_ZN14EthernetClient10remotePortEv+0x4c>
	uint16_t port;
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	port = W5100.readSnDPORT(_sockindex);
 4004db0:	e0bfff17 	ldw	r2,-4(fp)
 4004db4:	10800103 	ldbu	r2,4(r2)
 4004db8:	10803fcc 	andi	r2,r2,255
 4004dbc:	1009883a 	mov	r4,r2
 4004dc0:	40051980 	call	4005198 <_ZN10W5100Class11readSnDPORTEh>
 4004dc4:	e0bffe0d 	sth	r2,-8(fp)
//	SPI_endTransaction();
	return port;
 4004dc8:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4004dcc:	e037883a 	mov	sp,fp
 4004dd0:	dfc00117 	ldw	ra,4(sp)
 4004dd4:	df000017 	ldw	fp,0(sp)
 4004dd8:	dec00204 	addi	sp,sp,8
 4004ddc:	f800283a 	ret

04004de0 <_Z41__static_initialization_and_destruction_0ii>:
 4004de0:	defffb04 	addi	sp,sp,-20
 4004de4:	dfc00415 	stw	ra,16(sp)
 4004de8:	df000315 	stw	fp,12(sp)
 4004dec:	df000304 	addi	fp,sp,12
 4004df0:	e13ffe15 	stw	r4,-8(fp)
 4004df4:	e17fff15 	stw	r5,-4(fp)
 4004df8:	e0bffe17 	ldw	r2,-8(fp)
 4004dfc:	10800058 	cmpnei	r2,r2,1
 4004e00:	1000091e 	bne	r2,zero,4004e28 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4004e04:	e0ffff17 	ldw	r3,-4(fp)
 4004e08:	00bfffd4 	movui	r2,65535
 4004e0c:	1880061e 	bne	r3,r2,4004e28 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4004e10:	d8000015 	stw	zero,0(sp)
 4004e14:	000f883a 	mov	r7,zero
 4004e18:	000d883a 	mov	r6,zero
 4004e1c:	000b883a 	mov	r5,zero
 4004e20:	d112d704 	addi	r4,gp,19292
 4004e24:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
 4004e28:	0001883a 	nop
 4004e2c:	e037883a 	mov	sp,fp
 4004e30:	dfc00117 	ldw	ra,4(sp)
 4004e34:	df000017 	ldw	fp,0(sp)
 4004e38:	dec00204 	addi	sp,sp,8
 4004e3c:	f800283a 	ret

04004e40 <_GLOBAL__sub_I__ZN14EthernetClient7connectEPKct>:
 4004e40:	defffe04 	addi	sp,sp,-8
 4004e44:	dfc00115 	stw	ra,4(sp)
 4004e48:	df000015 	stw	fp,0(sp)
 4004e4c:	d839883a 	mov	fp,sp
 4004e50:	017fffd4 	movui	r5,65535
 4004e54:	01000044 	movi	r4,1
 4004e58:	4004de00 	call	4004de0 <_Z41__static_initialization_and_destruction_0ii>
 4004e5c:	e037883a 	mov	sp,fp
 4004e60:	dfc00117 	ldw	ra,4(sp)
 4004e64:	df000017 	ldw	fp,0(sp)
 4004e68:	dec00204 	addi	sp,sp,8
 4004e6c:	f800283a 	ret

04004e70 <_ZN6Client12rawIPAddressER9IPAddress>:
  virtual void flush() = 0;
  virtual void stop() = 0;
  virtual uint8_t connected() = 0;
  virtual operator bool() = 0;
protected:
  uint8_t* rawIPAddress(IPAddress& addr) { return addr.raw_address(); };
 4004e70:	defffc04 	addi	sp,sp,-16
 4004e74:	dfc00315 	stw	ra,12(sp)
 4004e78:	df000215 	stw	fp,8(sp)
 4004e7c:	df000204 	addi	fp,sp,8
 4004e80:	e13ffe15 	stw	r4,-8(fp)
 4004e84:	e17fff15 	stw	r5,-4(fp)
 4004e88:	e13fff17 	ldw	r4,-4(fp)
 4004e8c:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 4004e90:	e037883a 	mov	sp,fp
 4004e94:	dfc00117 	ldw	ra,4(sp)
 4004e98:	df000017 	ldw	fp,0(sp)
 4004e9c:	dec00204 	addi	sp,sp,8
 4004ea0:	f800283a 	ret

04004ea4 <_ZN13EthernetClass11dnsServerIPEv>:

	static void MACAddress(uint8_t *mac_address);
	static IPAddress localIP();
	static IPAddress subnetMask();
	static IPAddress gatewayIP();
	static IPAddress dnsServerIP() { return _dnsServerAddress; }
 4004ea4:	deffff04 	addi	sp,sp,-4
 4004ea8:	df000015 	stw	fp,0(sp)
 4004eac:	d839883a 	mov	fp,sp
 4004eb0:	d092d217 	ldw	r2,19272(gp)
 4004eb4:	e037883a 	mov	sp,fp
 4004eb8:	df000017 	ldw	fp,0(sp)
 4004ebc:	dec00104 	addi	sp,sp,4
 4004ec0:	f800283a 	ret

04004ec4 <_ZN14EthernetClientD1Ev>:

class EthernetClient : public Client {
public:
	EthernetClient() : _sockindex(MAX_SOCK_NUM), _timeout(1000) { }
	EthernetClient(uint8_t s) : _sockindex(s), _timeout(1000) { }
	virtual ~EthernetClient() {};
 4004ec4:	defffd04 	addi	sp,sp,-12
 4004ec8:	dfc00215 	stw	ra,8(sp)
 4004ecc:	df000115 	stw	fp,4(sp)
 4004ed0:	df000104 	addi	fp,sp,4
 4004ed4:	e13fff15 	stw	r4,-4(fp)
 4004ed8:	008100b4 	movhi	r2,1026
 4004edc:	10af9204 	addi	r2,r2,-16824
 4004ee0:	e0ffff17 	ldw	r3,-4(fp)
 4004ee4:	18800015 	stw	r2,0(r3)
 4004ee8:	0005883a 	mov	r2,zero
 4004eec:	10000226 	beq	r2,zero,4004ef8 <_ZN14EthernetClientD1Ev+0x34>
 4004ef0:	e13fff17 	ldw	r4,-4(fp)
 4004ef4:	400a0880 	call	400a088 <_ZdlPv>
 4004ef8:	e037883a 	mov	sp,fp
 4004efc:	dfc00117 	ldw	ra,4(sp)
 4004f00:	df000017 	ldw	fp,0(sp)
 4004f04:	dec00204 	addi	sp,sp,8
 4004f08:	f800283a 	ret

04004f0c <_ZN14EthernetClientD0Ev>:
 4004f0c:	defffd04 	addi	sp,sp,-12
 4004f10:	dfc00215 	stw	ra,8(sp)
 4004f14:	df000115 	stw	fp,4(sp)
 4004f18:	df000104 	addi	fp,sp,4
 4004f1c:	e13fff15 	stw	r4,-4(fp)
 4004f20:	e13fff17 	ldw	r4,-4(fp)
 4004f24:	4004ec40 	call	4004ec4 <_ZN14EthernetClientD1Ev>
 4004f28:	e13fff17 	ldw	r4,-4(fp)
 4004f2c:	400a0880 	call	400a088 <_ZdlPv>
 4004f30:	e037883a 	mov	sp,fp
 4004f34:	dfc00117 	ldw	ra,4(sp)
 4004f38:	df000017 	ldw	fp,0(sp)
 4004f3c:	dec00204 	addi	sp,sp,8
 4004f40:	f800283a 	ret

04004f44 <_ZN14EthernetClientcvbEv>:
	virtual int read(uint8_t *buf, size_t size);
	virtual int peek();
	virtual void flush();
	virtual void stop();
	virtual uint8_t connected();
	virtual operator bool() { return _sockindex < MAX_SOCK_NUM; }
 4004f44:	defffe04 	addi	sp,sp,-8
 4004f48:	df000115 	stw	fp,4(sp)
 4004f4c:	df000104 	addi	fp,sp,4
 4004f50:	e13fff15 	stw	r4,-4(fp)
 4004f54:	e0bfff17 	ldw	r2,-4(fp)
 4004f58:	10800103 	ldbu	r2,4(r2)
 4004f5c:	10803fcc 	andi	r2,r2,255
 4004f60:	10800230 	cmpltui	r2,r2,8
 4004f64:	e037883a 	mov	sp,fp
 4004f68:	df000017 	ldw	fp,0(sp)
 4004f6c:	dec00104 	addi	sp,sp,4
 4004f70:	f800283a 	ret

04004f74 <_ZN14EthernetClienteqEb>:
	virtual bool operator==(const bool value) { return bool() == value; }
 4004f74:	defffd04 	addi	sp,sp,-12
 4004f78:	df000215 	stw	fp,8(sp)
 4004f7c:	df000204 	addi	fp,sp,8
 4004f80:	e13ffe15 	stw	r4,-8(fp)
 4004f84:	2805883a 	mov	r2,r5
 4004f88:	e0bfff05 	stb	r2,-4(fp)
 4004f8c:	e0bfff03 	ldbu	r2,-4(fp)
 4004f90:	1080005c 	xori	r2,r2,1
 4004f94:	e037883a 	mov	sp,fp
 4004f98:	df000017 	ldw	fp,0(sp)
 4004f9c:	dec00104 	addi	sp,sp,4
 4004fa0:	f800283a 	ret

04004fa4 <_ZN14EthernetClientneEb>:
	virtual bool operator!=(const bool value) { return bool() != value; }
 4004fa4:	defffd04 	addi	sp,sp,-12
 4004fa8:	df000215 	stw	fp,8(sp)
 4004fac:	df000204 	addi	fp,sp,8
 4004fb0:	e13ffe15 	stw	r4,-8(fp)
 4004fb4:	2805883a 	mov	r2,r5
 4004fb8:	e0bfff05 	stb	r2,-4(fp)
 4004fbc:	e0bfff03 	ldbu	r2,-4(fp)
 4004fc0:	e037883a 	mov	sp,fp
 4004fc4:	df000017 	ldw	fp,0(sp)
 4004fc8:	dec00104 	addi	sp,sp,4
 4004fcc:	f800283a 	ret

04004fd0 <_ZN14EthernetClientneERKS_>:
	virtual bool operator==(const EthernetClient&);
	virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); }
 4004fd0:	defffc04 	addi	sp,sp,-16
 4004fd4:	dfc00315 	stw	ra,12(sp)
 4004fd8:	df000215 	stw	fp,8(sp)
 4004fdc:	df000204 	addi	fp,sp,8
 4004fe0:	e13ffe15 	stw	r4,-8(fp)
 4004fe4:	e17fff15 	stw	r5,-4(fp)
 4004fe8:	e0bffe17 	ldw	r2,-8(fp)
 4004fec:	10800017 	ldw	r2,0(r2)
 4004ff0:	10801304 	addi	r2,r2,76
 4004ff4:	10800017 	ldw	r2,0(r2)
 4004ff8:	e17fff17 	ldw	r5,-4(fp)
 4004ffc:	e13ffe17 	ldw	r4,-8(fp)
 4005000:	103ee83a 	callr	r2
 4005004:	1080005c 	xori	r2,r2,1
 4005008:	e037883a 	mov	sp,fp
 400500c:	dfc00117 	ldw	ra,4(sp)
 4005010:	df000017 	ldw	fp,0(sp)
 4005014:	dec00204 	addi	sp,sp,8
 4005018:	f800283a 	ret

0400501c <_ZN14EthernetClient20setConnectionTimeoutEt>:
	uint8_t getSocketNumber() const { return _sockindex; }
	virtual uint16_t localPort();
	virtual IPAddress remoteIP();
	virtual uint16_t remotePort();
	virtual void setConnectionTimeout(uint16_t timeout) { _timeout = timeout; }
 400501c:	defffd04 	addi	sp,sp,-12
 4005020:	df000215 	stw	fp,8(sp)
 4005024:	df000204 	addi	fp,sp,8
 4005028:	e13ffe15 	stw	r4,-8(fp)
 400502c:	2805883a 	mov	r2,r5
 4005030:	e0bfff0d 	sth	r2,-4(fp)
 4005034:	e0bffe17 	ldw	r2,-8(fp)
 4005038:	e0ffff0b 	ldhu	r3,-4(fp)
 400503c:	10c0018d 	sth	r3,6(r2)
 4005040:	0001883a 	nop
 4005044:	e037883a 	mov	sp,fp
 4005048:	df000017 	ldw	fp,0(sp)
 400504c:	dec00104 	addi	sp,sp,4
 4005050:	f800283a 	ret

04005054 <_ZN10W5100Class7CH_BASEEv>:
#undef __GP_REGISTER_N

  // W5100 Socket registers
  // ----------------------
private:
  static uint16_t CH_BASE(void) {
 4005054:	deffff04 	addi	sp,sp,-4
 4005058:	df000015 	stw	fp,0(sp)
 400505c:	d839883a 	mov	fp,sp
    //if (chip == 55) return 0x1000;
    //if (chip == 52) return 0x4000;
    //return 0x0400;
    return CH_BASE_MSB << 8;
 4005060:	d092dd43 	ldbu	r2,19317(gp)
 4005064:	10803fcc 	andi	r2,r2,255
 4005068:	1004923a 	slli	r2,r2,8
  }
 400506c:	e037883a 	mov	sp,fp
 4005070:	df000017 	ldw	fp,0(sp)
 4005074:	dec00104 	addi	sp,sp,4
 4005078:	f800283a 	ret

0400507c <_ZN10W5100Class6readSnEhtPht>:
    return read(CH_BASE() + s * CH_SIZE + addr);
  }
  static inline uint8_t writeSn(SOCKET s, uint16_t addr, uint8_t data) {
    return write(CH_BASE() + s * CH_SIZE + addr, data);
  }
  static inline uint16_t readSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
 400507c:	defffa04 	addi	sp,sp,-24
 4005080:	dfc00515 	stw	ra,20(sp)
 4005084:	df000415 	stw	fp,16(sp)
 4005088:	df000404 	addi	fp,sp,16
 400508c:	2807883a 	mov	r3,r5
 4005090:	e1bffe15 	stw	r6,-8(fp)
 4005094:	3805883a 	mov	r2,r7
 4005098:	e13ffc05 	stb	r4,-16(fp)
 400509c:	e0fffd0d 	sth	r3,-12(fp)
 40050a0:	e0bfff0d 	sth	r2,-4(fp)
    return read(CH_BASE() + s * CH_SIZE + addr, buf, len);
 40050a4:	40050540 	call	4005054 <_ZN10W5100Class7CH_BASEEv>
 40050a8:	1007883a 	mov	r3,r2
 40050ac:	e0bffc03 	ldbu	r2,-16(fp)
 40050b0:	1004923a 	slli	r2,r2,8
 40050b4:	1885883a 	add	r2,r3,r2
 40050b8:	1007883a 	mov	r3,r2
 40050bc:	e0bffd0b 	ldhu	r2,-12(fp)
 40050c0:	1885883a 	add	r2,r3,r2
 40050c4:	10bfffcc 	andi	r2,r2,65535
 40050c8:	e0ffff0b 	ldhu	r3,-4(fp)
 40050cc:	180d883a 	mov	r6,r3
 40050d0:	e17ffe17 	ldw	r5,-8(fp)
 40050d4:	1009883a 	mov	r4,r2
 40050d8:	40086a80 	call	40086a8 <_ZN10W5100Class4readEtPht>
  }
 40050dc:	e037883a 	mov	sp,fp
 40050e0:	dfc00117 	ldw	ra,4(sp)
 40050e4:	df000017 	ldw	fp,0(sp)
 40050e8:	dec00204 	addi	sp,sp,8
 40050ec:	f800283a 	ret

040050f0 <_ZN10W5100Class10readSnPORTEh>:
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
 40050f0:	defffc04 	addi	sp,sp,-16
 40050f4:	dfc00315 	stw	ra,12(sp)
 40050f8:	df000215 	stw	fp,8(sp)
 40050fc:	df000204 	addi	fp,sp,8
 4005100:	2005883a 	mov	r2,r4
 4005104:	e0bfff05 	stb	r2,-4(fp)
 4005108:	e0bfff03 	ldbu	r2,-4(fp)
 400510c:	01c00084 	movi	r7,2
 4005110:	e1bffe04 	addi	r6,fp,-8
 4005114:	01400104 	movi	r5,4
 4005118:	1009883a 	mov	r4,r2
 400511c:	400507c0 	call	400507c <_ZN10W5100Class6readSnEhtPht>
 4005120:	e0bffe03 	ldbu	r2,-8(fp)
 4005124:	10803fcc 	andi	r2,r2,255
 4005128:	1004923a 	slli	r2,r2,8
 400512c:	1007883a 	mov	r3,r2
 4005130:	e0bffe43 	ldbu	r2,-7(fp)
 4005134:	10803fcc 	andi	r2,r2,255
 4005138:	1884b03a 	or	r2,r3,r2
 400513c:	e037883a 	mov	sp,fp
 4005140:	dfc00117 	ldw	ra,4(sp)
 4005144:	df000017 	ldw	fp,0(sp)
 4005148:	dec00204 	addi	sp,sp,8
 400514c:	f800283a 	ret

04005150 <_ZN10W5100Class10readSnDIPREhPh>:
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
 4005150:	defffc04 	addi	sp,sp,-16
 4005154:	dfc00315 	stw	ra,12(sp)
 4005158:	df000215 	stw	fp,8(sp)
 400515c:	df000204 	addi	fp,sp,8
 4005160:	2005883a 	mov	r2,r4
 4005164:	e17fff15 	stw	r5,-4(fp)
 4005168:	e0bffe05 	stb	r2,-8(fp)
 400516c:	e0bffe03 	ldbu	r2,-8(fp)
 4005170:	01c00104 	movi	r7,4
 4005174:	e1bfff17 	ldw	r6,-4(fp)
 4005178:	01400304 	movi	r5,12
 400517c:	1009883a 	mov	r4,r2
 4005180:	400507c0 	call	400507c <_ZN10W5100Class6readSnEhtPht>
 4005184:	e037883a 	mov	sp,fp
 4005188:	dfc00117 	ldw	ra,4(sp)
 400518c:	df000017 	ldw	fp,0(sp)
 4005190:	dec00204 	addi	sp,sp,8
 4005194:	f800283a 	ret

04005198 <_ZN10W5100Class11readSnDPORTEh>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
 4005198:	defffc04 	addi	sp,sp,-16
 400519c:	dfc00315 	stw	ra,12(sp)
 40051a0:	df000215 	stw	fp,8(sp)
 40051a4:	df000204 	addi	fp,sp,8
 40051a8:	2005883a 	mov	r2,r4
 40051ac:	e0bfff05 	stb	r2,-4(fp)
 40051b0:	e0bfff03 	ldbu	r2,-4(fp)
 40051b4:	01c00084 	movi	r7,2
 40051b8:	e1bffe04 	addi	r6,fp,-8
 40051bc:	01400404 	movi	r5,16
 40051c0:	1009883a 	mov	r4,r2
 40051c4:	400507c0 	call	400507c <_ZN10W5100Class6readSnEhtPht>
 40051c8:	e0bffe03 	ldbu	r2,-8(fp)
 40051cc:	10803fcc 	andi	r2,r2,255
 40051d0:	1004923a 	slli	r2,r2,8
 40051d4:	1007883a 	mov	r3,r2
 40051d8:	e0bffe43 	ldbu	r2,-7(fp)
 40051dc:	10803fcc 	andi	r2,r2,255
 40051e0:	1884b03a 	or	r2,r3,r2
 40051e4:	e037883a 	mov	sp,fp
 40051e8:	dfc00117 	ldw	ra,4(sp)
 40051ec:	df000017 	ldw	fp,0(sp)
 40051f0:	dec00204 	addi	sp,sp,8
 40051f4:	f800283a 	ret

040051f8 <_ZN9DNSClientC1Ev>:
#ifndef DNSClient_h
#define DNSClient_h

#include "Ethernet.h"

class DNSClient
 40051f8:	defffd04 	addi	sp,sp,-12
 40051fc:	dfc00215 	stw	ra,8(sp)
 4005200:	df000115 	stw	fp,4(sp)
 4005204:	df000104 	addi	fp,sp,4
 4005208:	e13fff15 	stw	r4,-4(fp)
 400520c:	e0bfff17 	ldw	r2,-4(fp)
 4005210:	1009883a 	mov	r4,r2
 4005214:	4007c440 	call	4007c44 <_ZN9IPAddressC1Ev>
 4005218:	e0bfff17 	ldw	r2,-4(fp)
 400521c:	10800204 	addi	r2,r2,8
 4005220:	1009883a 	mov	r4,r2
 4005224:	4003bd80 	call	4003bd8 <_ZN11EthernetUDPC1Ev>
 4005228:	0001883a 	nop
 400522c:	e037883a 	mov	sp,fp
 4005230:	dfc00117 	ldw	ra,4(sp)
 4005234:	df000017 	ldw	fp,0(sp)
 4005238:	dec00204 	addi	sp,sp,8
 400523c:	f800283a 	ret

04005240 <_ZN14EthernetServer5beginEv>:

uint16_t EthernetServer::server_port[MAX_SOCK_NUM];


void EthernetServer::begin()
{
 4005240:	defffc04 	addi	sp,sp,-16
 4005244:	dfc00315 	stw	ra,12(sp)
 4005248:	df000215 	stw	fp,8(sp)
 400524c:	df000204 	addi	fp,sp,8
 4005250:	e13fff15 	stw	r4,-4(fp)
	uint8_t sockindex = Ethernet.socketBegin(SnMR::TCP, _port);
 4005254:	e0bfff17 	ldw	r2,-4(fp)
 4005258:	1080010b 	ldhu	r2,4(r2)
 400525c:	10bfffcc 	andi	r2,r2,65535
 4005260:	100b883a 	mov	r5,r2
 4005264:	01000844 	movi	r4,33
 4005268:	40062340 	call	4006234 <_ZN13EthernetClass11socketBeginEht>
 400526c:	e0bffe05 	stb	r2,-8(fp)
	if (sockindex < MAX_SOCK_NUM) {
 4005270:	e0bffe03 	ldbu	r2,-8(fp)
 4005274:	10800228 	cmpgeui	r2,r2,8
 4005278:	1000131e 	bne	r2,zero,40052c8 <_ZN14EthernetServer5beginEv+0x88>
		if (Ethernet.socketListen(sockindex)) {
 400527c:	e0bffe03 	ldbu	r2,-8(fp)
 4005280:	1009883a 	mov	r4,r2
 4005284:	40068a00 	call	40068a0 <_ZN13EthernetClass12socketListenEh>
 4005288:	10803fcc 	andi	r2,r2,255
 400528c:	1004c03a 	cmpne	r2,r2,zero
 4005290:	10803fcc 	andi	r2,r2,255
 4005294:	10000926 	beq	r2,zero,40052bc <_ZN14EthernetServer5beginEv+0x7c>
			server_port[sockindex] = _port;
 4005298:	e0fffe03 	ldbu	r3,-8(fp)
 400529c:	e0bfff17 	ldw	r2,-4(fp)
 40052a0:	1100010b 	ldhu	r4,4(r2)
 40052a4:	008100f4 	movhi	r2,1027
 40052a8:	1096d004 	addi	r2,r2,23360
 40052ac:	18c7883a 	add	r3,r3,r3
 40052b0:	10c5883a 	add	r2,r2,r3
 40052b4:	1100000d 	sth	r4,0(r2)
		} else {
			Ethernet.socketDisconnect(sockindex);
		}
	}
}
 40052b8:	00000306 	br	40052c8 <_ZN14EthernetServer5beginEv+0x88>
	uint8_t sockindex = Ethernet.socketBegin(SnMR::TCP, _port);
	if (sockindex < MAX_SOCK_NUM) {
		if (Ethernet.socketListen(sockindex)) {
			server_port[sockindex] = _port;
		} else {
			Ethernet.socketDisconnect(sockindex);
 40052bc:	e0bffe03 	ldbu	r2,-8(fp)
 40052c0:	1009883a 	mov	r4,r2
 40052c4:	40069740 	call	4006974 <_ZN13EthernetClass16socketDisconnectEh>
		}
	}
}
 40052c8:	0001883a 	nop
 40052cc:	e037883a 	mov	sp,fp
 40052d0:	dfc00117 	ldw	ra,4(sp)
 40052d4:	df000017 	ldw	fp,0(sp)
 40052d8:	dec00204 	addi	sp,sp,8
 40052dc:	f800283a 	ret

040052e0 <_ZN14EthernetServer9availableEv>:

EthernetClient EthernetServer::available()
{
 40052e0:	defffa04 	addi	sp,sp,-24
 40052e4:	dfc00515 	stw	ra,20(sp)
 40052e8:	df000415 	stw	fp,16(sp)
 40052ec:	df000404 	addi	fp,sp,16
 40052f0:	e13ffe15 	stw	r4,-8(fp)
 40052f4:	e17fff15 	stw	r5,-4(fp)
	bool listening = false;
 40052f8:	e03ffc05 	stb	zero,-16(fp)
	uint8_t sockindex = MAX_SOCK_NUM;
 40052fc:	00800204 	movi	r2,8
 4005300:	e0bffc45 	stb	r2,-15(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 4005304:	00800204 	movi	r2,8
 4005308:	e0bffc85 	stb	r2,-14(fp)

	chip = W5100.getChip();
 400530c:	400411c0 	call	400411c <_ZN10W5100Class7getChipEv>
 4005310:	e0bffd05 	stb	r2,-12(fp)
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
 4005314:	e0bffd03 	ldbu	r2,-12(fp)
 4005318:	1000041e 	bne	r2,zero,400532c <_ZN14EthernetServer9availableEv+0x4c>
 400531c:	01400204 	movi	r5,8
 4005320:	e13ffe17 	ldw	r4,-8(fp)
 4005324:	40058ec0 	call	40058ec <_ZN14EthernetClientC1Eh>
 4005328:	00005006 	br	400546c <_ZN14EthernetServer9availableEv+0x18c>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 400532c:	e0bffd03 	ldbu	r2,-12(fp)
 4005330:	10800cd8 	cmpnei	r2,r2,51
 4005334:	1000021e 	bne	r2,zero,4005340 <_ZN14EthernetServer9availableEv+0x60>
 4005338:	00800104 	movi	r2,4
 400533c:	e0bffc85 	stb	r2,-14(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4005340:	e03ffcc5 	stb	zero,-13(fp)
 4005344:	e0fffcc3 	ldbu	r3,-13(fp)
 4005348:	e0bffc83 	ldbu	r2,-14(fp)
 400534c:	18803a2e 	bgeu	r3,r2,4005438 <_ZN14EthernetServer9availableEv+0x158>
		if (server_port[i] == _port) {
 4005350:	e0fffcc3 	ldbu	r3,-13(fp)
 4005354:	008100f4 	movhi	r2,1027
 4005358:	1096d004 	addi	r2,r2,23360
 400535c:	18c7883a 	add	r3,r3,r3
 4005360:	10c5883a 	add	r2,r2,r3
 4005364:	10c0000b 	ldhu	r3,0(r2)
 4005368:	e0bfff17 	ldw	r2,-4(fp)
 400536c:	1080010b 	ldhu	r2,4(r2)
 4005370:	18ffffcc 	andi	r3,r3,65535
 4005374:	10bfffcc 	andi	r2,r2,65535
 4005378:	18802b1e 	bne	r3,r2,4005428 <_ZN14EthernetServer9availableEv+0x148>
			uint8_t stat = Ethernet.socketStatus(i);
 400537c:	e0bffcc3 	ldbu	r2,-13(fp)
 4005380:	1009883a 	mov	r4,r2
 4005384:	40068200 	call	4006820 <_ZN13EthernetClass12socketStatusEh>
 4005388:	e0bffd45 	stb	r2,-11(fp)
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
 400538c:	e0bffd43 	ldbu	r2,-11(fp)
 4005390:	108005e0 	cmpeqi	r2,r2,23
 4005394:	1000031e 	bne	r2,zero,40053a4 <_ZN14EthernetServer9availableEv+0xc4>
 4005398:	e0bffd43 	ldbu	r2,-11(fp)
 400539c:	10800718 	cmpnei	r2,r2,28
 40053a0:	1000111e 	bne	r2,zero,40053e8 <_ZN14EthernetServer9availableEv+0x108>
				if (Ethernet.socketRecvAvailable(i) > 0) {
 40053a4:	e0bffcc3 	ldbu	r2,-13(fp)
 40053a8:	1009883a 	mov	r4,r2
 40053ac:	4006ddc0 	call	4006ddc <_ZN13EthernetClass19socketRecvAvailableEh>
 40053b0:	10bfffcc 	andi	r2,r2,65535
 40053b4:	1004c03a 	cmpne	r2,r2,zero
 40053b8:	10803fcc 	andi	r2,r2,255
 40053bc:	10000326 	beq	r2,zero,40053cc <_ZN14EthernetServer9availableEv+0xec>
					sockindex = i;
 40053c0:	e0bffcc3 	ldbu	r2,-13(fp)
 40053c4:	e0bffc45 	stb	r2,-15(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 40053c8:	00001606 	br	4005424 <_ZN14EthernetServer9availableEv+0x144>
					sockindex = i;
				} else {
					// remote host closed connection, our end still open
					if (stat == SnSR::CLOSE_WAIT) {
 40053cc:	e0bffd43 	ldbu	r2,-11(fp)
 40053d0:	10800718 	cmpnei	r2,r2,28
 40053d4:	1000131e 	bne	r2,zero,4005424 <_ZN14EthernetServer9availableEv+0x144>
						Ethernet.socketDisconnect(i);
 40053d8:	e0bffcc3 	ldbu	r2,-13(fp)
 40053dc:	1009883a 	mov	r4,r2
 40053e0:	40069740 	call	4006974 <_ZN13EthernetClass16socketDisconnectEh>
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 40053e4:	00000f06 	br	4005424 <_ZN14EthernetServer9availableEv+0x144>
					if (stat == SnSR::CLOSE_WAIT) {
						Ethernet.socketDisconnect(i);
						// status becomes LAST_ACK for short time
					}
				}
			} else if (stat == SnSR::LISTEN) {
 40053e8:	e0bffd43 	ldbu	r2,-11(fp)
 40053ec:	10800518 	cmpnei	r2,r2,20
 40053f0:	1000031e 	bne	r2,zero,4005400 <_ZN14EthernetServer9availableEv+0x120>
				listening = true;
 40053f4:	00800044 	movi	r2,1
 40053f8:	e0bffc05 	stb	r2,-16(fp)
 40053fc:	00000a06 	br	4005428 <_ZN14EthernetServer9availableEv+0x148>
			} else if (stat == SnSR::CLOSED) {
 4005400:	e0bffd43 	ldbu	r2,-11(fp)
 4005404:	1000081e 	bne	r2,zero,4005428 <_ZN14EthernetServer9availableEv+0x148>
				server_port[i] = 0;
 4005408:	e0fffcc3 	ldbu	r3,-13(fp)
 400540c:	008100f4 	movhi	r2,1027
 4005410:	1096d004 	addi	r2,r2,23360
 4005414:	18c7883a 	add	r3,r3,r3
 4005418:	10c5883a 	add	r2,r2,r3
 400541c:	1000000d 	sth	zero,0(r2)
 4005420:	00000106 	br	4005428 <_ZN14EthernetServer9availableEv+0x148>
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 4005424:	0001883a 	nop
	chip = W5100.getChip();
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4005428:	e0bffcc3 	ldbu	r2,-13(fp)
 400542c:	10800044 	addi	r2,r2,1
 4005430:	e0bffcc5 	stb	r2,-13(fp)
 4005434:	003fc306 	br	4005344 <__alt_data_end+0xfc005344>
			} else if (stat == SnSR::CLOSED) {
				server_port[i] = 0;
			}
		}
	}
	if (!listening) begin();
 4005438:	e0bffc03 	ldbu	r2,-16(fp)
 400543c:	1080005c 	xori	r2,r2,1
 4005440:	10803fcc 	andi	r2,r2,255
 4005444:	10000526 	beq	r2,zero,400545c <_ZN14EthernetServer9availableEv+0x17c>
 4005448:	e0bfff17 	ldw	r2,-4(fp)
 400544c:	10800017 	ldw	r2,0(r2)
 4005450:	10800017 	ldw	r2,0(r2)
 4005454:	e13fff17 	ldw	r4,-4(fp)
 4005458:	103ee83a 	callr	r2
	return EthernetClient(sockindex);
 400545c:	e0bffc43 	ldbu	r2,-15(fp)
 4005460:	100b883a 	mov	r5,r2
 4005464:	e13ffe17 	ldw	r4,-8(fp)
 4005468:	40058ec0 	call	40058ec <_ZN14EthernetClientC1Eh>
}
 400546c:	e0bffe17 	ldw	r2,-8(fp)
 4005470:	e037883a 	mov	sp,fp
 4005474:	dfc00117 	ldw	ra,4(sp)
 4005478:	df000017 	ldw	fp,0(sp)
 400547c:	dec00204 	addi	sp,sp,8
 4005480:	f800283a 	ret

04005484 <_ZN14EthernetServer6acceptEv>:

EthernetClient EthernetServer::accept()
{
 4005484:	defffa04 	addi	sp,sp,-24
 4005488:	dfc00515 	stw	ra,20(sp)
 400548c:	df000415 	stw	fp,16(sp)
 4005490:	df000404 	addi	fp,sp,16
 4005494:	e13ffe15 	stw	r4,-8(fp)
 4005498:	e17fff15 	stw	r5,-4(fp)
	bool listening = false;
 400549c:	e03ffc05 	stb	zero,-16(fp)
	uint8_t sockindex = MAX_SOCK_NUM;
 40054a0:	00800204 	movi	r2,8
 40054a4:	e0bffc45 	stb	r2,-15(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 40054a8:	00800204 	movi	r2,8
 40054ac:	e0bffc85 	stb	r2,-14(fp)

	chip = W5100.getChip();
 40054b0:	400411c0 	call	400411c <_ZN10W5100Class7getChipEv>
 40054b4:	e0bffd05 	stb	r2,-12(fp)
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
 40054b8:	e0bffd03 	ldbu	r2,-12(fp)
 40054bc:	1000041e 	bne	r2,zero,40054d0 <_ZN14EthernetServer6acceptEv+0x4c>
 40054c0:	01400204 	movi	r5,8
 40054c4:	e13ffe17 	ldw	r4,-8(fp)
 40054c8:	40058ec0 	call	40058ec <_ZN14EthernetClientC1Eh>
 40054cc:	00004906 	br	40055f4 <_ZN14EthernetServer6acceptEv+0x170>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 40054d0:	e0bffd03 	ldbu	r2,-12(fp)
 40054d4:	10800cd8 	cmpnei	r2,r2,51
 40054d8:	1000021e 	bne	r2,zero,40054e4 <_ZN14EthernetServer6acceptEv+0x60>
 40054dc:	00800104 	movi	r2,4
 40054e0:	e0bffc85 	stb	r2,-14(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 40054e4:	e03ffcc5 	stb	zero,-13(fp)
 40054e8:	e0fffcc3 	ldbu	r3,-13(fp)
 40054ec:	e0bffc83 	ldbu	r2,-14(fp)
 40054f0:	1880332e 	bgeu	r3,r2,40055c0 <_ZN14EthernetServer6acceptEv+0x13c>
		if (server_port[i] == _port) {
 40054f4:	e0fffcc3 	ldbu	r3,-13(fp)
 40054f8:	008100f4 	movhi	r2,1027
 40054fc:	1096d004 	addi	r2,r2,23360
 4005500:	18c7883a 	add	r3,r3,r3
 4005504:	10c5883a 	add	r2,r2,r3
 4005508:	10c0000b 	ldhu	r3,0(r2)
 400550c:	e0bfff17 	ldw	r2,-4(fp)
 4005510:	1080010b 	ldhu	r2,4(r2)
 4005514:	18ffffcc 	andi	r3,r3,65535
 4005518:	10bfffcc 	andi	r2,r2,65535
 400551c:	1880241e 	bne	r3,r2,40055b0 <_ZN14EthernetServer6acceptEv+0x12c>
			uint8_t stat = Ethernet.socketStatus(i);
 4005520:	e0bffcc3 	ldbu	r2,-13(fp)
 4005524:	1009883a 	mov	r4,r2
 4005528:	40068200 	call	4006820 <_ZN13EthernetClass12socketStatusEh>
 400552c:	e0bffd45 	stb	r2,-11(fp)
			if (sockindex == MAX_SOCK_NUM &&
 4005530:	e0bffc43 	ldbu	r2,-15(fp)
 4005534:	10800218 	cmpnei	r2,r2,8
 4005538:	10000f1e 	bne	r2,zero,4005578 <_ZN14EthernetServer6acceptEv+0xf4>
 400553c:	e0bffd43 	ldbu	r2,-11(fp)
 4005540:	108005e0 	cmpeqi	r2,r2,23
 4005544:	1000031e 	bne	r2,zero,4005554 <_ZN14EthernetServer6acceptEv+0xd0>
			  (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT)) {
 4005548:	e0bffd43 	ldbu	r2,-11(fp)
 400554c:	10800718 	cmpnei	r2,r2,28
 4005550:	1000091e 	bne	r2,zero,4005578 <_ZN14EthernetServer6acceptEv+0xf4>
				// Return the connected client even if no data received.
				// Some protocols like FTP expect the server to send the
				// first data.
				sockindex = i;
 4005554:	e0bffcc3 	ldbu	r2,-13(fp)
 4005558:	e0bffc45 	stb	r2,-15(fp)
				server_port[i] = 0; // only return the client once
 400555c:	e0fffcc3 	ldbu	r3,-13(fp)
 4005560:	008100f4 	movhi	r2,1027
 4005564:	1096d004 	addi	r2,r2,23360
 4005568:	18c7883a 	add	r3,r3,r3
 400556c:	10c5883a 	add	r2,r2,r3
 4005570:	1000000d 	sth	zero,0(r2)
 4005574:	00000e06 	br	40055b0 <_ZN14EthernetServer6acceptEv+0x12c>
			} else if (stat == SnSR::LISTEN) {
 4005578:	e0bffd43 	ldbu	r2,-11(fp)
 400557c:	10800518 	cmpnei	r2,r2,20
 4005580:	1000031e 	bne	r2,zero,4005590 <_ZN14EthernetServer6acceptEv+0x10c>
				listening = true;
 4005584:	00800044 	movi	r2,1
 4005588:	e0bffc05 	stb	r2,-16(fp)
 400558c:	00000806 	br	40055b0 <_ZN14EthernetServer6acceptEv+0x12c>
			} else if (stat == SnSR::CLOSED) {
 4005590:	e0bffd43 	ldbu	r2,-11(fp)
 4005594:	1000061e 	bne	r2,zero,40055b0 <_ZN14EthernetServer6acceptEv+0x12c>
				server_port[i] = 0;
 4005598:	e0fffcc3 	ldbu	r3,-13(fp)
 400559c:	008100f4 	movhi	r2,1027
 40055a0:	1096d004 	addi	r2,r2,23360
 40055a4:	18c7883a 	add	r3,r3,r3
 40055a8:	10c5883a 	add	r2,r2,r3
 40055ac:	1000000d 	sth	zero,0(r2)
	chip = W5100.getChip();
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 40055b0:	e0bffcc3 	ldbu	r2,-13(fp)
 40055b4:	10800044 	addi	r2,r2,1
 40055b8:	e0bffcc5 	stb	r2,-13(fp)
 40055bc:	003fca06 	br	40054e8 <__alt_data_end+0xfc0054e8>
			} else if (stat == SnSR::CLOSED) {
				server_port[i] = 0;
			}
		}
	}
	if (!listening) begin();
 40055c0:	e0bffc03 	ldbu	r2,-16(fp)
 40055c4:	1080005c 	xori	r2,r2,1
 40055c8:	10803fcc 	andi	r2,r2,255
 40055cc:	10000526 	beq	r2,zero,40055e4 <_ZN14EthernetServer6acceptEv+0x160>
 40055d0:	e0bfff17 	ldw	r2,-4(fp)
 40055d4:	10800017 	ldw	r2,0(r2)
 40055d8:	10800017 	ldw	r2,0(r2)
 40055dc:	e13fff17 	ldw	r4,-4(fp)
 40055e0:	103ee83a 	callr	r2
	return EthernetClient(sockindex);
 40055e4:	e0bffc43 	ldbu	r2,-15(fp)
 40055e8:	100b883a 	mov	r5,r2
 40055ec:	e13ffe17 	ldw	r4,-8(fp)
 40055f0:	40058ec0 	call	40058ec <_ZN14EthernetClientC1Eh>
}
 40055f4:	e0bffe17 	ldw	r2,-8(fp)
 40055f8:	e037883a 	mov	sp,fp
 40055fc:	dfc00117 	ldw	ra,4(sp)
 4005600:	df000017 	ldw	fp,0(sp)
 4005604:	dec00204 	addi	sp,sp,8
 4005608:	f800283a 	ret

0400560c <_ZN14EthernetServercvbEv>:

EthernetServer::operator bool()
{
 400560c:	defffc04 	addi	sp,sp,-16
 4005610:	dfc00315 	stw	ra,12(sp)
 4005614:	df000215 	stw	fp,8(sp)
 4005618:	df000204 	addi	fp,sp,8
 400561c:	e13fff15 	stw	r4,-4(fp)
	uint8_t maxindex=MAX_SOCK_NUM;
 4005620:	00800204 	movi	r2,8
 4005624:	e0bffe05 	stb	r2,-8(fp)
#if MAX_SOCK_NUM > 4
	if (W5100.getChip() == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4005628:	400411c0 	call	400411c <_ZN10W5100Class7getChipEv>
 400562c:	10803fcc 	andi	r2,r2,255
 4005630:	10800ce0 	cmpeqi	r2,r2,51
 4005634:	10803fcc 	andi	r2,r2,255
 4005638:	10000226 	beq	r2,zero,4005644 <_ZN14EthernetServercvbEv+0x38>
 400563c:	00800104 	movi	r2,4
 4005640:	e0bffe05 	stb	r2,-8(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4005644:	e03ffe45 	stb	zero,-7(fp)
 4005648:	e0fffe43 	ldbu	r3,-7(fp)
 400564c:	e0bffe03 	ldbu	r2,-8(fp)
 4005650:	1880182e 	bgeu	r3,r2,40056b4 <_ZN14EthernetServercvbEv+0xa8>
		if (server_port[i] == _port) {
 4005654:	e0fffe43 	ldbu	r3,-7(fp)
 4005658:	008100f4 	movhi	r2,1027
 400565c:	1096d004 	addi	r2,r2,23360
 4005660:	18c7883a 	add	r3,r3,r3
 4005664:	10c5883a 	add	r2,r2,r3
 4005668:	10c0000b 	ldhu	r3,0(r2)
 400566c:	e0bfff17 	ldw	r2,-4(fp)
 4005670:	1080010b 	ldhu	r2,4(r2)
 4005674:	18ffffcc 	andi	r3,r3,65535
 4005678:	10bfffcc 	andi	r2,r2,65535
 400567c:	1880091e 	bne	r3,r2,40056a4 <_ZN14EthernetServercvbEv+0x98>
			if (Ethernet.socketStatus(i) == SnSR::LISTEN) {
 4005680:	e0bffe43 	ldbu	r2,-7(fp)
 4005684:	1009883a 	mov	r4,r2
 4005688:	40068200 	call	4006820 <_ZN13EthernetClass12socketStatusEh>
 400568c:	10803fcc 	andi	r2,r2,255
 4005690:	10800520 	cmpeqi	r2,r2,20
 4005694:	10803fcc 	andi	r2,r2,255
 4005698:	10000226 	beq	r2,zero,40056a4 <_ZN14EthernetServercvbEv+0x98>
				return true; // server is listening for incoming clients
 400569c:	00800044 	movi	r2,1
 40056a0:	00000506 	br	40056b8 <_ZN14EthernetServercvbEv+0xac>
{
	uint8_t maxindex=MAX_SOCK_NUM;
#if MAX_SOCK_NUM > 4
	if (W5100.getChip() == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 40056a4:	e0bffe43 	ldbu	r2,-7(fp)
 40056a8:	10800044 	addi	r2,r2,1
 40056ac:	e0bffe45 	stb	r2,-7(fp)
 40056b0:	003fe506 	br	4005648 <__alt_data_end+0xfc005648>
			if (Ethernet.socketStatus(i) == SnSR::LISTEN) {
				return true; // server is listening for incoming clients
			}
		}
	}
	return false;
 40056b4:	0005883a 	mov	r2,zero
}
 40056b8:	e037883a 	mov	sp,fp
 40056bc:	dfc00117 	ldw	ra,4(sp)
 40056c0:	df000017 	ldw	fp,0(sp)
 40056c4:	dec00204 	addi	sp,sp,8
 40056c8:	f800283a 	ret

040056cc <_ZN14EthernetServer5writeEh>:
	}
}
#endif

size_t EthernetServer::write(uint8_t b)
{
 40056cc:	defffc04 	addi	sp,sp,-16
 40056d0:	dfc00315 	stw	ra,12(sp)
 40056d4:	df000215 	stw	fp,8(sp)
 40056d8:	df000204 	addi	fp,sp,8
 40056dc:	e13ffe15 	stw	r4,-8(fp)
 40056e0:	2805883a 	mov	r2,r5
 40056e4:	e0bfff05 	stb	r2,-4(fp)
	return write(&b, 1);
 40056e8:	e0bffe17 	ldw	r2,-8(fp)
 40056ec:	10800017 	ldw	r2,0(r2)
 40056f0:	10800204 	addi	r2,r2,8
 40056f4:	10800017 	ldw	r2,0(r2)
 40056f8:	e0ffff04 	addi	r3,fp,-4
 40056fc:	01800044 	movi	r6,1
 4005700:	180b883a 	mov	r5,r3
 4005704:	e13ffe17 	ldw	r4,-8(fp)
 4005708:	103ee83a 	callr	r2
}
 400570c:	e037883a 	mov	sp,fp
 4005710:	dfc00117 	ldw	ra,4(sp)
 4005714:	df000017 	ldw	fp,0(sp)
 4005718:	dec00204 	addi	sp,sp,8
 400571c:	f800283a 	ret

04005720 <_ZN14EthernetServer5writeEPKhj>:

size_t EthernetServer::write(const uint8_t *buffer, size_t size)
{
 4005720:	defff804 	addi	sp,sp,-32
 4005724:	dfc00715 	stw	ra,28(sp)
 4005728:	df000615 	stw	fp,24(sp)
 400572c:	df000604 	addi	fp,sp,24
 4005730:	e13ffd15 	stw	r4,-12(fp)
 4005734:	e17ffe15 	stw	r5,-8(fp)
 4005738:	e1bfff15 	stw	r6,-4(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 400573c:	00800204 	movi	r2,8
 4005740:	e0bffa05 	stb	r2,-24(fp)

	chip = W5100.getChip();
 4005744:	400411c0 	call	400411c <_ZN10W5100Class7getChipEv>
 4005748:	e0bffa85 	stb	r2,-22(fp)
	if (!chip) return 0;
 400574c:	e0bffa83 	ldbu	r2,-22(fp)
 4005750:	1000021e 	bne	r2,zero,400575c <_ZN14EthernetServer5writeEPKhj+0x3c>
 4005754:	0005883a 	mov	r2,zero
 4005758:	00002e06 	br	4005814 <_ZN14EthernetServer5writeEPKhj+0xf4>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 400575c:	e0bffa83 	ldbu	r2,-22(fp)
 4005760:	10800cd8 	cmpnei	r2,r2,51
 4005764:	1000021e 	bne	r2,zero,4005770 <_ZN14EthernetServer5writeEPKhj+0x50>
 4005768:	00800104 	movi	r2,4
 400576c:	e0bffa05 	stb	r2,-24(fp)
#endif
	available();
 4005770:	e0bffb04 	addi	r2,fp,-20
 4005774:	e17ffd17 	ldw	r5,-12(fp)
 4005778:	1009883a 	mov	r4,r2
 400577c:	40052e00 	call	40052e0 <_ZN14EthernetServer9availableEv>
 4005780:	e0bffb04 	addi	r2,fp,-20
 4005784:	1009883a 	mov	r4,r2
 4005788:	4004ec40 	call	4004ec4 <_ZN14EthernetClientD1Ev>
	for (uint8_t i=0; i < maxindex; i++) {
 400578c:	e03ffa45 	stb	zero,-23(fp)
 4005790:	e0fffa43 	ldbu	r3,-23(fp)
 4005794:	e0bffa03 	ldbu	r2,-24(fp)
 4005798:	18801d2e 	bgeu	r3,r2,4005810 <_ZN14EthernetServer5writeEPKhj+0xf0>
		if (server_port[i] == _port) {
 400579c:	e0fffa43 	ldbu	r3,-23(fp)
 40057a0:	008100f4 	movhi	r2,1027
 40057a4:	1096d004 	addi	r2,r2,23360
 40057a8:	18c7883a 	add	r3,r3,r3
 40057ac:	10c5883a 	add	r2,r2,r3
 40057b0:	10c0000b 	ldhu	r3,0(r2)
 40057b4:	e0bffd17 	ldw	r2,-12(fp)
 40057b8:	1080010b 	ldhu	r2,4(r2)
 40057bc:	18ffffcc 	andi	r3,r3,65535
 40057c0:	10bfffcc 	andi	r2,r2,65535
 40057c4:	18800e1e 	bne	r3,r2,4005800 <_ZN14EthernetServer5writeEPKhj+0xe0>
			if (Ethernet.socketStatus(i) == SnSR::ESTABLISHED) {
 40057c8:	e0bffa43 	ldbu	r2,-23(fp)
 40057cc:	1009883a 	mov	r4,r2
 40057d0:	40068200 	call	4006820 <_ZN13EthernetClass12socketStatusEh>
 40057d4:	10803fcc 	andi	r2,r2,255
 40057d8:	108005e0 	cmpeqi	r2,r2,23
 40057dc:	10803fcc 	andi	r2,r2,255
 40057e0:	10000726 	beq	r2,zero,4005800 <_ZN14EthernetServer5writeEPKhj+0xe0>
				Ethernet.socketSend(i, buffer, size);
 40057e4:	e0fffa43 	ldbu	r3,-23(fp)
 40057e8:	e0bfff17 	ldw	r2,-4(fp)
 40057ec:	10bfffcc 	andi	r2,r2,65535
 40057f0:	100d883a 	mov	r6,r2
 40057f4:	e17ffe17 	ldw	r5,-8(fp)
 40057f8:	1809883a 	mov	r4,r3
 40057fc:	40070f80 	call	40070f8 <_ZN13EthernetClass10socketSendEhPKht>
	if (!chip) return 0;
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	available();
	for (uint8_t i=0; i < maxindex; i++) {
 4005800:	e0bffa43 	ldbu	r2,-23(fp)
 4005804:	10800044 	addi	r2,r2,1
 4005808:	e0bffa45 	stb	r2,-23(fp)
 400580c:	003fe006 	br	4005790 <__alt_data_end+0xfc005790>
			if (Ethernet.socketStatus(i) == SnSR::ESTABLISHED) {
				Ethernet.socketSend(i, buffer, size);
			}
		}
	}
	return size;
 4005810:	e0bfff17 	ldw	r2,-4(fp)
}
 4005814:	e037883a 	mov	sp,fp
 4005818:	dfc00117 	ldw	ra,4(sp)
 400581c:	df000017 	ldw	fp,0(sp)
 4005820:	dec00204 	addi	sp,sp,8
 4005824:	f800283a 	ret

04005828 <_Z41__static_initialization_and_destruction_0ii>:
 4005828:	defffb04 	addi	sp,sp,-20
 400582c:	dfc00415 	stw	ra,16(sp)
 4005830:	df000315 	stw	fp,12(sp)
 4005834:	df000304 	addi	fp,sp,12
 4005838:	e13ffe15 	stw	r4,-8(fp)
 400583c:	e17fff15 	stw	r5,-4(fp)
 4005840:	e0bffe17 	ldw	r2,-8(fp)
 4005844:	10800058 	cmpnei	r2,r2,1
 4005848:	1000091e 	bne	r2,zero,4005870 <_Z41__static_initialization_and_destruction_0ii+0x48>
 400584c:	e0ffff17 	ldw	r3,-4(fp)
 4005850:	00bfffd4 	movui	r2,65535
 4005854:	1880061e 	bne	r3,r2,4005870 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4005858:	d8000015 	stw	zero,0(sp)
 400585c:	000f883a 	mov	r7,zero
 4005860:	000d883a 	mov	r6,zero
 4005864:	000b883a 	mov	r5,zero
 4005868:	d112d804 	addi	r4,gp,19296
 400586c:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
 4005870:	0001883a 	nop
 4005874:	e037883a 	mov	sp,fp
 4005878:	dfc00117 	ldw	ra,4(sp)
 400587c:	df000017 	ldw	fp,0(sp)
 4005880:	dec00204 	addi	sp,sp,8
 4005884:	f800283a 	ret

04005888 <_GLOBAL__sub_I__ZN14EthernetServer11server_portE>:
 4005888:	defffe04 	addi	sp,sp,-8
 400588c:	dfc00115 	stw	ra,4(sp)
 4005890:	df000015 	stw	fp,0(sp)
 4005894:	d839883a 	mov	fp,sp
 4005898:	017fffd4 	movui	r5,65535
 400589c:	01000044 	movi	r4,1
 40058a0:	40058280 	call	4005828 <_Z41__static_initialization_and_destruction_0ii>
 40058a4:	e037883a 	mov	sp,fp
 40058a8:	dfc00117 	ldw	ra,4(sp)
 40058ac:	df000017 	ldw	fp,0(sp)
 40058b0:	dec00204 	addi	sp,sp,8
 40058b4:	f800283a 	ret

040058b8 <_ZN6ClientC1Ev>:
#ifndef client_h
#define client_h

#include "utility/IPAddress.h"

class Client {
 40058b8:	defffe04 	addi	sp,sp,-8
 40058bc:	df000115 	stw	fp,4(sp)
 40058c0:	df000104 	addi	fp,sp,4
 40058c4:	e13fff15 	stw	r4,-4(fp)
 40058c8:	008100b4 	movhi	r2,1026
 40058cc:	10afbb04 	addi	r2,r2,-16660
 40058d0:	e0ffff17 	ldw	r3,-4(fp)
 40058d4:	18800015 	stw	r2,0(r3)
 40058d8:	0001883a 	nop
 40058dc:	e037883a 	mov	sp,fp
 40058e0:	df000017 	ldw	fp,0(sp)
 40058e4:	dec00104 	addi	sp,sp,4
 40058e8:	f800283a 	ret

040058ec <_ZN14EthernetClientC1Eh>:


class EthernetClient : public Client {
public:
	EthernetClient() : _sockindex(MAX_SOCK_NUM), _timeout(1000) { }
	EthernetClient(uint8_t s) : _sockindex(s), _timeout(1000) { }
 40058ec:	defffc04 	addi	sp,sp,-16
 40058f0:	dfc00315 	stw	ra,12(sp)
 40058f4:	df000215 	stw	fp,8(sp)
 40058f8:	df000204 	addi	fp,sp,8
 40058fc:	e13ffe15 	stw	r4,-8(fp)
 4005900:	2805883a 	mov	r2,r5
 4005904:	e0bfff05 	stb	r2,-4(fp)
 4005908:	e0bffe17 	ldw	r2,-8(fp)
 400590c:	1009883a 	mov	r4,r2
 4005910:	40058b80 	call	40058b8 <_ZN6ClientC1Ev>
 4005914:	008100b4 	movhi	r2,1026
 4005918:	10af9204 	addi	r2,r2,-16824
 400591c:	e0fffe17 	ldw	r3,-8(fp)
 4005920:	18800015 	stw	r2,0(r3)
 4005924:	e0bffe17 	ldw	r2,-8(fp)
 4005928:	e0ffff03 	ldbu	r3,-4(fp)
 400592c:	10c00105 	stb	r3,4(r2)
 4005930:	e0bffe17 	ldw	r2,-8(fp)
 4005934:	00c0fa04 	movi	r3,1000
 4005938:	10c0018d 	sth	r3,6(r2)
 400593c:	0001883a 	nop
 4005940:	e037883a 	mov	sp,fp
 4005944:	dfc00117 	ldw	ra,4(sp)
 4005948:	df000017 	ldw	fp,0(sp)
 400594c:	dec00204 	addi	sp,sp,8
 4005950:	f800283a 	ret

04005954 <_ZN11EthernetUDP5beginEt>:
#include "Ethernet.h"
#include "utility/w5100.h"

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port)
{
 4005954:	defffc04 	addi	sp,sp,-16
 4005958:	dfc00315 	stw	ra,12(sp)
 400595c:	df000215 	stw	fp,8(sp)
 4005960:	df000204 	addi	fp,sp,8
 4005964:	e13ffe15 	stw	r4,-8(fp)
 4005968:	2805883a 	mov	r2,r5
 400596c:	e0bfff0d 	sth	r2,-4(fp)
	if (sockindex < MAX_SOCK_NUM) Ethernet.socketClose(sockindex);
 4005970:	e0bffe17 	ldw	r2,-8(fp)
 4005974:	10800403 	ldbu	r2,16(r2)
 4005978:	10803fcc 	andi	r2,r2,255
 400597c:	10800228 	cmpgeui	r2,r2,8
 4005980:	1000051e 	bne	r2,zero,4005998 <_ZN11EthernetUDP5beginEt+0x44>
 4005984:	e0bffe17 	ldw	r2,-8(fp)
 4005988:	10800403 	ldbu	r2,16(r2)
 400598c:	10803fcc 	andi	r2,r2,255
 4005990:	1009883a 	mov	r4,r2
 4005994:	40068600 	call	4006860 <_ZN13EthernetClass11socketCloseEh>
	sockindex = Ethernet.socketBegin(SnMR::UDP, port);
 4005998:	e0bfff0b 	ldhu	r2,-4(fp)
 400599c:	100b883a 	mov	r5,r2
 40059a0:	01000084 	movi	r4,2
 40059a4:	40062340 	call	4006234 <_ZN13EthernetClass11socketBeginEht>
 40059a8:	1007883a 	mov	r3,r2
 40059ac:	e0bffe17 	ldw	r2,-8(fp)
 40059b0:	10c00405 	stb	r3,16(r2)
	if (sockindex >= MAX_SOCK_NUM) return 0;
 40059b4:	e0bffe17 	ldw	r2,-8(fp)
 40059b8:	10800403 	ldbu	r2,16(r2)
 40059bc:	10803fcc 	andi	r2,r2,255
 40059c0:	10800230 	cmpltui	r2,r2,8
 40059c4:	1000021e 	bne	r2,zero,40059d0 <_ZN11EthernetUDP5beginEt+0x7c>
 40059c8:	0005883a 	mov	r2,zero
 40059cc:	00000606 	br	40059e8 <_ZN11EthernetUDP5beginEt+0x94>
	_port = port;
 40059d0:	e0bffe17 	ldw	r2,-8(fp)
 40059d4:	e0ffff0b 	ldhu	r3,-4(fp)
 40059d8:	10c0010d 	sth	r3,4(r2)
	_remaining = 0;
 40059dc:	e0bffe17 	ldw	r2,-8(fp)
 40059e0:	1000048d 	sth	zero,18(r2)
	return 1;
 40059e4:	00800044 	movi	r2,1
}
 40059e8:	e037883a 	mov	sp,fp
 40059ec:	dfc00117 	ldw	ra,4(sp)
 40059f0:	df000017 	ldw	fp,0(sp)
 40059f4:	dec00204 	addi	sp,sp,8
 40059f8:	f800283a 	ret

040059fc <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available()
{
 40059fc:	defffe04 	addi	sp,sp,-8
 4005a00:	df000115 	stw	fp,4(sp)
 4005a04:	df000104 	addi	fp,sp,4
 4005a08:	e13fff15 	stw	r4,-4(fp)
	return _remaining;
 4005a0c:	e0bfff17 	ldw	r2,-4(fp)
 4005a10:	1080048b 	ldhu	r2,18(r2)
 4005a14:	10bfffcc 	andi	r2,r2,65535
}
 4005a18:	e037883a 	mov	sp,fp
 4005a1c:	df000017 	ldw	fp,0(sp)
 4005a20:	dec00104 	addi	sp,sp,4
 4005a24:	f800283a 	ret

04005a28 <_ZN11EthernetUDP4stopEv>:

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
 4005a28:	defffd04 	addi	sp,sp,-12
 4005a2c:	dfc00215 	stw	ra,8(sp)
 4005a30:	df000115 	stw	fp,4(sp)
 4005a34:	df000104 	addi	fp,sp,4
 4005a38:	e13fff15 	stw	r4,-4(fp)
	if (sockindex < MAX_SOCK_NUM) {
 4005a3c:	e0bfff17 	ldw	r2,-4(fp)
 4005a40:	10800403 	ldbu	r2,16(r2)
 4005a44:	10803fcc 	andi	r2,r2,255
 4005a48:	10800228 	cmpgeui	r2,r2,8
 4005a4c:	1000081e 	bne	r2,zero,4005a70 <_ZN11EthernetUDP4stopEv+0x48>
		Ethernet.socketClose(sockindex);
 4005a50:	e0bfff17 	ldw	r2,-4(fp)
 4005a54:	10800403 	ldbu	r2,16(r2)
 4005a58:	10803fcc 	andi	r2,r2,255
 4005a5c:	1009883a 	mov	r4,r2
 4005a60:	40068600 	call	4006860 <_ZN13EthernetClass11socketCloseEh>
		sockindex = MAX_SOCK_NUM;
 4005a64:	e0bfff17 	ldw	r2,-4(fp)
 4005a68:	00c00204 	movi	r3,8
 4005a6c:	10c00405 	stb	r3,16(r2)
	}
}
 4005a70:	0001883a 	nop
 4005a74:	e037883a 	mov	sp,fp
 4005a78:	dfc00117 	ldw	ra,4(sp)
 4005a7c:	df000017 	ldw	fp,0(sp)
 4005a80:	dec00204 	addi	sp,sp,8
 4005a84:	f800283a 	ret

04005a88 <_ZN11EthernetUDP11beginPacketEPKct>:

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
 4005a88:	defff104 	addi	sp,sp,-60
 4005a8c:	dfc00e15 	stw	ra,56(sp)
 4005a90:	df000d15 	stw	fp,52(sp)
 4005a94:	df000d04 	addi	fp,sp,52
 4005a98:	e13ffd15 	stw	r4,-12(fp)
 4005a9c:	e17ffe15 	stw	r5,-8(fp)
 4005aa0:	3005883a 	mov	r2,r6
 4005aa4:	e0bfff0d 	sth	r2,-4(fp)
	// Look up the host first
	int ret = 0;
 4005aa8:	e03ff315 	stw	zero,-52(fp)
	DNSClient dns;
 4005aac:	e0bff504 	addi	r2,fp,-44
 4005ab0:	1009883a 	mov	r4,r2
 4005ab4:	40051f80 	call	40051f8 <_ZN9DNSClientC1Ev>
	IPAddress remote_addr;
 4005ab8:	e0bffc04 	addi	r2,fp,-16
 4005abc:	1009883a 	mov	r4,r2
 4005ac0:	4007c440 	call	4007c44 <_ZN9IPAddressC1Ev>

	dns.begin(Ethernet.dnsServerIP());
 4005ac4:	4004ea40 	call	4004ea4 <_ZN13EthernetClass11dnsServerIPEv>
 4005ac8:	e0bff415 	stw	r2,-48(fp)
 4005acc:	e0fff404 	addi	r3,fp,-48
 4005ad0:	e0bff504 	addi	r2,fp,-44
 4005ad4:	180b883a 	mov	r5,r3
 4005ad8:	1009883a 	mov	r4,r2
 4005adc:	40026700 	call	4002670 <_ZN9DNSClient5beginERK9IPAddress>
	ret = dns.getHostByName(host, remote_addr);
 4005ae0:	e0fffc04 	addi	r3,fp,-16
 4005ae4:	e0bff504 	addi	r2,fp,-44
 4005ae8:	01c4e204 	movi	r7,5000
 4005aec:	180d883a 	mov	r6,r3
 4005af0:	e17ffe17 	ldw	r5,-8(fp)
 4005af4:	1009883a 	mov	r4,r2
 4005af8:	40027e00 	call	40027e0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>
 4005afc:	e0bff315 	stw	r2,-52(fp)
	if (ret != 1) return ret;
 4005b00:	e0bff317 	ldw	r2,-52(fp)
 4005b04:	10800060 	cmpeqi	r2,r2,1
 4005b08:	1000021e 	bne	r2,zero,4005b14 <_ZN11EthernetUDP11beginPacketEPKct+0x8c>
 4005b0c:	e0bff317 	ldw	r2,-52(fp)
 4005b10:	00000906 	br	4005b38 <_ZN11EthernetUDP11beginPacketEPKct+0xb0>
	return beginPacket(remote_addr, port);
 4005b14:	e0bffd17 	ldw	r2,-12(fp)
 4005b18:	10800017 	ldw	r2,0(r2)
 4005b1c:	10800304 	addi	r2,r2,12
 4005b20:	10800017 	ldw	r2,0(r2)
 4005b24:	e0ffff0b 	ldhu	r3,-4(fp)
 4005b28:	180d883a 	mov	r6,r3
 4005b2c:	e17ffc17 	ldw	r5,-16(fp)
 4005b30:	e13ffd17 	ldw	r4,-12(fp)
 4005b34:	103ee83a 	callr	r2
}
 4005b38:	e037883a 	mov	sp,fp
 4005b3c:	dfc00117 	ldw	ra,4(sp)
 4005b40:	df000017 	ldw	fp,0(sp)
 4005b44:	dec00204 	addi	sp,sp,8
 4005b48:	f800283a 	ret

04005b4c <_ZN11EthernetUDP11beginPacketE9IPAddresst>:

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
 4005b4c:	defffa04 	addi	sp,sp,-24
 4005b50:	dfc00515 	stw	ra,20(sp)
 4005b54:	df000415 	stw	fp,16(sp)
 4005b58:	dc000315 	stw	r16,12(sp)
 4005b5c:	df000404 	addi	fp,sp,16
 4005b60:	e13ffc15 	stw	r4,-16(fp)
 4005b64:	e17ffd15 	stw	r5,-12(fp)
 4005b68:	3005883a 	mov	r2,r6
 4005b6c:	e0bffe0d 	sth	r2,-8(fp)
	_offset = 0;
 4005b70:	e0bffc17 	ldw	r2,-16(fp)
 4005b74:	1000038d 	sth	zero,14(r2)
	//Serial.printf("UDP beginPacket\n");
	return Ethernet.socketStartUDP(sockindex, rawIPAddress(ip), port);
 4005b78:	e0bffc17 	ldw	r2,-16(fp)
 4005b7c:	10800403 	ldbu	r2,16(r2)
 4005b80:	14003fcc 	andi	r16,r2,255
 4005b84:	e0bffc17 	ldw	r2,-16(fp)
 4005b88:	e0fffd04 	addi	r3,fp,-12
 4005b8c:	180b883a 	mov	r5,r3
 4005b90:	1009883a 	mov	r4,r2
 4005b94:	40061440 	call	4006144 <_ZN3UDP12rawIPAddressER9IPAddress>
 4005b98:	1007883a 	mov	r3,r2
 4005b9c:	e0bffe0b 	ldhu	r2,-8(fp)
 4005ba0:	100d883a 	mov	r6,r2
 4005ba4:	180b883a 	mov	r5,r3
 4005ba8:	8009883a 	mov	r4,r16
 4005bac:	400733c0 	call	400733c <_ZN13EthernetClass14socketStartUDPEhPht>
 4005bb0:	10803fcc 	andi	r2,r2,255
}
 4005bb4:	e6ffff04 	addi	sp,fp,-4
 4005bb8:	dfc00217 	ldw	ra,8(sp)
 4005bbc:	df000117 	ldw	fp,4(sp)
 4005bc0:	dc000017 	ldw	r16,0(sp)
 4005bc4:	dec00304 	addi	sp,sp,12
 4005bc8:	f800283a 	ret

04005bcc <_ZN11EthernetUDP9endPacketEv>:

int EthernetUDP::endPacket()
{
 4005bcc:	defffd04 	addi	sp,sp,-12
 4005bd0:	dfc00215 	stw	ra,8(sp)
 4005bd4:	df000115 	stw	fp,4(sp)
 4005bd8:	df000104 	addi	fp,sp,4
 4005bdc:	e13fff15 	stw	r4,-4(fp)
	return Ethernet.socketSendUDP(sockindex);
 4005be0:	e0bfff17 	ldw	r2,-4(fp)
 4005be4:	10800403 	ldbu	r2,16(r2)
 4005be8:	10803fcc 	andi	r2,r2,255
 4005bec:	1009883a 	mov	r4,r2
 4005bf0:	40073f80 	call	40073f8 <_ZN13EthernetClass13socketSendUDPEh>
 4005bf4:	10803fcc 	andi	r2,r2,255
}
 4005bf8:	e037883a 	mov	sp,fp
 4005bfc:	dfc00117 	ldw	ra,4(sp)
 4005c00:	df000017 	ldw	fp,0(sp)
 4005c04:	dec00204 	addi	sp,sp,8
 4005c08:	f800283a 	ret

04005c0c <_ZN11EthernetUDP5writeEh>:

size_t EthernetUDP::write(uint8_t byte)
{
 4005c0c:	defffd04 	addi	sp,sp,-12
 4005c10:	df000215 	stw	fp,8(sp)
 4005c14:	df000204 	addi	fp,sp,8
 4005c18:	e13ffe15 	stw	r4,-8(fp)
 4005c1c:	2805883a 	mov	r2,r5
 4005c20:	e0bfff05 	stb	r2,-4(fp)
	// TODO fix
	//return write(&byte, 1);
}
 4005c24:	0001883a 	nop
 4005c28:	e037883a 	mov	sp,fp
 4005c2c:	df000017 	ldw	fp,0(sp)
 4005c30:	dec00104 	addi	sp,sp,4
 4005c34:	f800283a 	ret

04005c38 <_ZN11EthernetUDP5writeEPKhj>:

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
 4005c38:	defffa04 	addi	sp,sp,-24
 4005c3c:	dfc00515 	stw	ra,20(sp)
 4005c40:	df000415 	stw	fp,16(sp)
 4005c44:	df000404 	addi	fp,sp,16
 4005c48:	e13ffd15 	stw	r4,-12(fp)
 4005c4c:	e17ffe15 	stw	r5,-8(fp)
 4005c50:	e1bfff15 	stw	r6,-4(fp)
	//Serial.printf("UDP write %d\n", size);
	uint16_t bytes_written = Ethernet.socketBufferData(sockindex, _offset, buffer, size);
 4005c54:	e0bffd17 	ldw	r2,-12(fp)
 4005c58:	10800403 	ldbu	r2,16(r2)
 4005c5c:	10c03fcc 	andi	r3,r2,255
 4005c60:	e0bffd17 	ldw	r2,-12(fp)
 4005c64:	1080038b 	ldhu	r2,14(r2)
 4005c68:	113fffcc 	andi	r4,r2,65535
 4005c6c:	e0bfff17 	ldw	r2,-4(fp)
 4005c70:	10bfffcc 	andi	r2,r2,65535
 4005c74:	100f883a 	mov	r7,r2
 4005c78:	e1bffe17 	ldw	r6,-8(fp)
 4005c7c:	200b883a 	mov	r5,r4
 4005c80:	1809883a 	mov	r4,r3
 4005c84:	40072a80 	call	40072a8 <_ZN13EthernetClass16socketBufferDataEhtPKht>
 4005c88:	e0bffc0d 	sth	r2,-16(fp)
	_offset += bytes_written;
 4005c8c:	e0bffd17 	ldw	r2,-12(fp)
 4005c90:	10c0038b 	ldhu	r3,14(r2)
 4005c94:	e0bffc0b 	ldhu	r2,-16(fp)
 4005c98:	1885883a 	add	r2,r3,r2
 4005c9c:	1007883a 	mov	r3,r2
 4005ca0:	e0bffd17 	ldw	r2,-12(fp)
 4005ca4:	10c0038d 	sth	r3,14(r2)
	return bytes_written;
 4005ca8:	e0bffc0b 	ldhu	r2,-16(fp)
}
 4005cac:	e037883a 	mov	sp,fp
 4005cb0:	dfc00117 	ldw	ra,4(sp)
 4005cb4:	df000017 	ldw	fp,0(sp)
 4005cb8:	dec00204 	addi	sp,sp,8
 4005cbc:	f800283a 	ret

04005cc0 <_ZN11EthernetUDP11parsePacketEv>:

int EthernetUDP::parsePacket()
{
 4005cc0:	defffa04 	addi	sp,sp,-24
 4005cc4:	dfc00515 	stw	ra,20(sp)
 4005cc8:	df000415 	stw	fp,16(sp)
 4005ccc:	df000404 	addi	fp,sp,16
 4005cd0:	e13fff15 	stw	r4,-4(fp)
	// discard any remaining bytes in the last packet
	while (_remaining) {
 4005cd4:	e0bfff17 	ldw	r2,-4(fp)
 4005cd8:	1080048b 	ldhu	r2,18(r2)
 4005cdc:	10bfffcc 	andi	r2,r2,65535
 4005ce0:	10000126 	beq	r2,zero,4005ce8 <_ZN11EthernetUDP11parsePacketEv+0x28>
 4005ce4:	003ffb06 	br	4005cd4 <__alt_data_end+0xfc005cd4>

		// TODO fix
		//read((uint8_t *)NULL, _remaining);
	}

	if (Ethernet.socketRecvAvailable(sockindex) > 0) {
 4005ce8:	e0bfff17 	ldw	r2,-4(fp)
 4005cec:	10800403 	ldbu	r2,16(r2)
 4005cf0:	10803fcc 	andi	r2,r2,255
 4005cf4:	1009883a 	mov	r4,r2
 4005cf8:	4006ddc0 	call	4006ddc <_ZN13EthernetClass19socketRecvAvailableEh>
 4005cfc:	10bfffcc 	andi	r2,r2,65535
 4005d00:	1004c03a 	cmpne	r2,r2,zero
 4005d04:	10803fcc 	andi	r2,r2,255
 4005d08:	10003426 	beq	r2,zero,4005ddc <_ZN11EthernetUDP11parsePacketEv+0x11c>
		//HACK - hand-parse the UDP packet using TCP recv method
		uint8_t tmpBuf[8];
		int ret=0;
 4005d0c:	e03ffc15 	stw	zero,-16(fp)
		//read 8 header bytes and get IP and port from it
		ret = Ethernet.socketRecv(sockindex, tmpBuf, 8);
 4005d10:	e0bfff17 	ldw	r2,-4(fp)
 4005d14:	10800403 	ldbu	r2,16(r2)
 4005d18:	10803fcc 	andi	r2,r2,255
 4005d1c:	e0fffd04 	addi	r3,fp,-12
 4005d20:	01800204 	movi	r6,8
 4005d24:	180b883a 	mov	r5,r3
 4005d28:	1009883a 	mov	r4,r2
 4005d2c:	4006b3c0 	call	4006b3c <_ZN13EthernetClass10socketRecvEhPhs>
 4005d30:	e0bffc15 	stw	r2,-16(fp)
		if (ret > 0) {
 4005d34:	e0bffc17 	ldw	r2,-16(fp)
 4005d38:	0080260e 	bge	zero,r2,4005dd4 <_ZN11EthernetUDP11parsePacketEv+0x114>
			_remoteIP = tmpBuf;
 4005d3c:	e0bfff17 	ldw	r2,-4(fp)
 4005d40:	10800204 	addi	r2,r2,8
 4005d44:	e0fffd04 	addi	r3,fp,-12
 4005d48:	180b883a 	mov	r5,r3
 4005d4c:	1009883a 	mov	r4,r2
 4005d50:	4007ef00 	call	4007ef0 <_ZN9IPAddressaSEPKh>
			_remotePort = tmpBuf[4];
 4005d54:	e0bffe03 	ldbu	r2,-8(fp)
 4005d58:	10c03fcc 	andi	r3,r2,255
 4005d5c:	e0bfff17 	ldw	r2,-4(fp)
 4005d60:	10c0030d 	sth	r3,12(r2)
			_remotePort = (_remotePort << 8) + tmpBuf[5];
 4005d64:	e0bfff17 	ldw	r2,-4(fp)
 4005d68:	1080030b 	ldhu	r2,12(r2)
 4005d6c:	1004923a 	slli	r2,r2,8
 4005d70:	1007883a 	mov	r3,r2
 4005d74:	e0bffe43 	ldbu	r2,-7(fp)
 4005d78:	10803fcc 	andi	r2,r2,255
 4005d7c:	1885883a 	add	r2,r3,r2
 4005d80:	1007883a 	mov	r3,r2
 4005d84:	e0bfff17 	ldw	r2,-4(fp)
 4005d88:	10c0030d 	sth	r3,12(r2)
			_remaining = tmpBuf[6];
 4005d8c:	e0bffe83 	ldbu	r2,-6(fp)
 4005d90:	10c03fcc 	andi	r3,r2,255
 4005d94:	e0bfff17 	ldw	r2,-4(fp)
 4005d98:	10c0048d 	sth	r3,18(r2)
			_remaining = (_remaining << 8) + tmpBuf[7];
 4005d9c:	e0bfff17 	ldw	r2,-4(fp)
 4005da0:	1080048b 	ldhu	r2,18(r2)
 4005da4:	1004923a 	slli	r2,r2,8
 4005da8:	1007883a 	mov	r3,r2
 4005dac:	e0bffec3 	ldbu	r2,-5(fp)
 4005db0:	10803fcc 	andi	r2,r2,255
 4005db4:	1885883a 	add	r2,r3,r2
 4005db8:	1007883a 	mov	r3,r2
 4005dbc:	e0bfff17 	ldw	r2,-4(fp)
 4005dc0:	10c0048d 	sth	r3,18(r2)

			// When we get here, any remaining bytes are the data
			ret = _remaining;
 4005dc4:	e0bfff17 	ldw	r2,-4(fp)
 4005dc8:	1080048b 	ldhu	r2,18(r2)
 4005dcc:	10bfffcc 	andi	r2,r2,65535
 4005dd0:	e0bffc15 	stw	r2,-16(fp)
		}
		return ret;
 4005dd4:	e0bffc17 	ldw	r2,-16(fp)
 4005dd8:	00000106 	br	4005de0 <_ZN11EthernetUDP11parsePacketEv+0x120>
	}
	// There aren't any packets available
	return 0;
 4005ddc:	0005883a 	mov	r2,zero
}
 4005de0:	e037883a 	mov	sp,fp
 4005de4:	dfc00117 	ldw	ra,4(sp)
 4005de8:	df000017 	ldw	fp,0(sp)
 4005dec:	dec00204 	addi	sp,sp,8
 4005df0:	f800283a 	ret

04005df4 <_ZN11EthernetUDP4readEv>:

int EthernetUDP::read()
{
 4005df4:	defffc04 	addi	sp,sp,-16
 4005df8:	dfc00315 	stw	ra,12(sp)
 4005dfc:	df000215 	stw	fp,8(sp)
 4005e00:	df000204 	addi	fp,sp,8
 4005e04:	e13fff15 	stw	r4,-4(fp)
	uint8_t byte;

	if ((_remaining > 0) && (Ethernet.socketRecv(sockindex, &byte, 1) > 0)) {
 4005e08:	e0bfff17 	ldw	r2,-4(fp)
 4005e0c:	1080048b 	ldhu	r2,18(r2)
 4005e10:	10bfffcc 	andi	r2,r2,65535
 4005e14:	10000a26 	beq	r2,zero,4005e40 <_ZN11EthernetUDP4readEv+0x4c>
 4005e18:	e0bfff17 	ldw	r2,-4(fp)
 4005e1c:	10800403 	ldbu	r2,16(r2)
 4005e20:	10803fcc 	andi	r2,r2,255
 4005e24:	01800044 	movi	r6,1
 4005e28:	e17ffe04 	addi	r5,fp,-8
 4005e2c:	1009883a 	mov	r4,r2
 4005e30:	4006b3c0 	call	4006b3c <_ZN13EthernetClass10socketRecvEhPhs>
 4005e34:	0080020e 	bge	zero,r2,4005e40 <_ZN11EthernetUDP4readEv+0x4c>
 4005e38:	00800044 	movi	r2,1
 4005e3c:	00000106 	br	4005e44 <_ZN11EthernetUDP4readEv+0x50>
 4005e40:	0005883a 	mov	r2,zero
 4005e44:	10803fcc 	andi	r2,r2,255
 4005e48:	10000926 	beq	r2,zero,4005e70 <_ZN11EthernetUDP4readEv+0x7c>
		// We read things without any problems
		_remaining--;
 4005e4c:	e0bfff17 	ldw	r2,-4(fp)
 4005e50:	1080048b 	ldhu	r2,18(r2)
 4005e54:	10bfffc4 	addi	r2,r2,-1
 4005e58:	1007883a 	mov	r3,r2
 4005e5c:	e0bfff17 	ldw	r2,-4(fp)
 4005e60:	10c0048d 	sth	r3,18(r2)
		return byte;
 4005e64:	e0bffe03 	ldbu	r2,-8(fp)
 4005e68:	10803fcc 	andi	r2,r2,255
 4005e6c:	00000106 	br	4005e74 <_ZN11EthernetUDP4readEv+0x80>
	}

	// If we get here, there's no data available
	return -1;
 4005e70:	00bfffc4 	movi	r2,-1
}
 4005e74:	e037883a 	mov	sp,fp
 4005e78:	dfc00117 	ldw	ra,4(sp)
 4005e7c:	df000017 	ldw	fp,0(sp)
 4005e80:	dec00204 	addi	sp,sp,8
 4005e84:	f800283a 	ret

04005e88 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char *buffer, size_t len)
{
 4005e88:	defffa04 	addi	sp,sp,-24
 4005e8c:	dfc00515 	stw	ra,20(sp)
 4005e90:	df000415 	stw	fp,16(sp)
 4005e94:	df000404 	addi	fp,sp,16
 4005e98:	e13ffd15 	stw	r4,-12(fp)
 4005e9c:	e17ffe15 	stw	r5,-8(fp)
 4005ea0:	e1bfff15 	stw	r6,-4(fp)
	if (_remaining > 0) {
 4005ea4:	e0bffd17 	ldw	r2,-12(fp)
 4005ea8:	1080048b 	ldhu	r2,18(r2)
 4005eac:	10bfffcc 	andi	r2,r2,65535
 4005eb0:	10002a26 	beq	r2,zero,4005f5c <_ZN11EthernetUDP4readEPhj+0xd4>
		int got;
		if (_remaining <= len) {
 4005eb4:	e0bffd17 	ldw	r2,-12(fp)
 4005eb8:	1080048b 	ldhu	r2,18(r2)
 4005ebc:	10bfffcc 	andi	r2,r2,65535
 4005ec0:	e0ffff17 	ldw	r3,-4(fp)
 4005ec4:	18800e36 	bltu	r3,r2,4005f00 <_ZN11EthernetUDP4readEPhj+0x78>
			// data should fit in the buffer
			got = Ethernet.socketRecv(sockindex, buffer, _remaining);
 4005ec8:	e0bffd17 	ldw	r2,-12(fp)
 4005ecc:	10800403 	ldbu	r2,16(r2)
 4005ed0:	10c03fcc 	andi	r3,r2,255
 4005ed4:	e0bffd17 	ldw	r2,-12(fp)
 4005ed8:	1080048b 	ldhu	r2,18(r2)
 4005edc:	10bfffcc 	andi	r2,r2,65535
 4005ee0:	10a0001c 	xori	r2,r2,32768
 4005ee4:	10a00004 	addi	r2,r2,-32768
 4005ee8:	100d883a 	mov	r6,r2
 4005eec:	e17ffe17 	ldw	r5,-8(fp)
 4005ef0:	1809883a 	mov	r4,r3
 4005ef4:	4006b3c0 	call	4006b3c <_ZN13EthernetClass10socketRecvEhPhs>
 4005ef8:	e0bffc15 	stw	r2,-16(fp)
 4005efc:	00000c06 	br	4005f30 <_ZN11EthernetUDP4readEPhj+0xa8>
		} else {
			// too much data for the buffer,
			// grab as much as will fit
			got = Ethernet.socketRecv(sockindex, buffer, len);
 4005f00:	e0bffd17 	ldw	r2,-12(fp)
 4005f04:	10800403 	ldbu	r2,16(r2)
 4005f08:	10803fcc 	andi	r2,r2,255
 4005f0c:	e0ffff17 	ldw	r3,-4(fp)
 4005f10:	18ffffcc 	andi	r3,r3,65535
 4005f14:	18e0001c 	xori	r3,r3,32768
 4005f18:	18e00004 	addi	r3,r3,-32768
 4005f1c:	180d883a 	mov	r6,r3
 4005f20:	e17ffe17 	ldw	r5,-8(fp)
 4005f24:	1009883a 	mov	r4,r2
 4005f28:	4006b3c0 	call	4006b3c <_ZN13EthernetClass10socketRecvEhPhs>
 4005f2c:	e0bffc15 	stw	r2,-16(fp)
		}
		if (got > 0) {
 4005f30:	e0bffc17 	ldw	r2,-16(fp)
 4005f34:	0080090e 	bge	zero,r2,4005f5c <_ZN11EthernetUDP4readEPhj+0xd4>
			_remaining -= got;
 4005f38:	e0bffd17 	ldw	r2,-12(fp)
 4005f3c:	1080048b 	ldhu	r2,18(r2)
 4005f40:	e0fffc17 	ldw	r3,-16(fp)
 4005f44:	10c5c83a 	sub	r2,r2,r3
 4005f48:	1007883a 	mov	r3,r2
 4005f4c:	e0bffd17 	ldw	r2,-12(fp)
 4005f50:	10c0048d 	sth	r3,18(r2)
			//Serial.printf("UDP read %d\n", got);
			return got;
 4005f54:	e0bffc17 	ldw	r2,-16(fp)
 4005f58:	00000106 	br	4005f60 <_ZN11EthernetUDP4readEPhj+0xd8>
		}
	}
	// If we get here, there's no data available or recv failed
	return -1;
 4005f5c:	00bfffc4 	movi	r2,-1
}
 4005f60:	e037883a 	mov	sp,fp
 4005f64:	dfc00117 	ldw	ra,4(sp)
 4005f68:	df000017 	ldw	fp,0(sp)
 4005f6c:	dec00204 	addi	sp,sp,8
 4005f70:	f800283a 	ret

04005f74 <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
 4005f74:	defffd04 	addi	sp,sp,-12
 4005f78:	dfc00215 	stw	ra,8(sp)
 4005f7c:	df000115 	stw	fp,4(sp)
 4005f80:	df000104 	addi	fp,sp,4
 4005f84:	e13fff15 	stw	r4,-4(fp)
	// Unlike recv, peek doesn't check to see if there's any data available, so we must.
	// If the user hasn't called parsePacket yet then return nothing otherwise they
	// may get the UDP header
	if (sockindex >= MAX_SOCK_NUM || _remaining == 0) return -1;
 4005f88:	e0bfff17 	ldw	r2,-4(fp)
 4005f8c:	10800403 	ldbu	r2,16(r2)
 4005f90:	10803fcc 	andi	r2,r2,255
 4005f94:	10800228 	cmpgeui	r2,r2,8
 4005f98:	1000041e 	bne	r2,zero,4005fac <_ZN11EthernetUDP4peekEv+0x38>
 4005f9c:	e0bfff17 	ldw	r2,-4(fp)
 4005fa0:	1080048b 	ldhu	r2,18(r2)
 4005fa4:	10bfffcc 	andi	r2,r2,65535
 4005fa8:	1000021e 	bne	r2,zero,4005fb4 <_ZN11EthernetUDP4peekEv+0x40>
 4005fac:	00bfffc4 	movi	r2,-1
 4005fb0:	00000606 	br	4005fcc <_ZN11EthernetUDP4peekEv+0x58>
	return Ethernet.socketPeek(sockindex);
 4005fb4:	e0bfff17 	ldw	r2,-4(fp)
 4005fb8:	10800403 	ldbu	r2,16(r2)
 4005fbc:	10803fcc 	andi	r2,r2,255
 4005fc0:	1009883a 	mov	r4,r2
 4005fc4:	4006e880 	call	4006e88 <_ZN13EthernetClass10socketPeekEh>
 4005fc8:	10803fcc 	andi	r2,r2,255
}
 4005fcc:	e037883a 	mov	sp,fp
 4005fd0:	dfc00117 	ldw	ra,4(sp)
 4005fd4:	df000017 	ldw	fp,0(sp)
 4005fd8:	dec00204 	addi	sp,sp,8
 4005fdc:	f800283a 	ret

04005fe0 <_ZN11EthernetUDP5flushEv>:

void EthernetUDP::flush()
{
 4005fe0:	defffe04 	addi	sp,sp,-8
 4005fe4:	df000115 	stw	fp,4(sp)
 4005fe8:	df000104 	addi	fp,sp,4
 4005fec:	e13fff15 	stw	r4,-4(fp)
	// TODO: we should wait for TX buffer to be emptied
}
 4005ff0:	0001883a 	nop
 4005ff4:	e037883a 	mov	sp,fp
 4005ff8:	df000017 	ldw	fp,0(sp)
 4005ffc:	dec00104 	addi	sp,sp,4
 4006000:	f800283a 	ret

04006004 <_ZN11EthernetUDP14beginMulticastE9IPAddresst>:

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::beginMulticast(IPAddress ip, uint16_t port)
{
 4006004:	defffb04 	addi	sp,sp,-20
 4006008:	dfc00415 	stw	ra,16(sp)
 400600c:	df000315 	stw	fp,12(sp)
 4006010:	df000304 	addi	fp,sp,12
 4006014:	e13ffd15 	stw	r4,-12(fp)
 4006018:	e17ffe15 	stw	r5,-8(fp)
 400601c:	3005883a 	mov	r2,r6
 4006020:	e0bfff0d 	sth	r2,-4(fp)
	if (sockindex < MAX_SOCK_NUM) Ethernet.socketClose(sockindex);
 4006024:	e0bffd17 	ldw	r2,-12(fp)
 4006028:	10800403 	ldbu	r2,16(r2)
 400602c:	10803fcc 	andi	r2,r2,255
 4006030:	10800228 	cmpgeui	r2,r2,8
 4006034:	1000051e 	bne	r2,zero,400604c <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x48>
 4006038:	e0bffd17 	ldw	r2,-12(fp)
 400603c:	10800403 	ldbu	r2,16(r2)
 4006040:	10803fcc 	andi	r2,r2,255
 4006044:	1009883a 	mov	r4,r2
 4006048:	40068600 	call	4006860 <_ZN13EthernetClass11socketCloseEh>
	sockindex = Ethernet.socketBeginMulticast(SnMR::UDP | SnMR::MULTI, ip, port);
 400604c:	e0bfff0b 	ldhu	r2,-4(fp)
 4006050:	100d883a 	mov	r6,r2
 4006054:	e17ffe17 	ldw	r5,-8(fp)
 4006058:	01002084 	movi	r4,130
 400605c:	40064d00 	call	40064d0 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst>
 4006060:	1007883a 	mov	r3,r2
 4006064:	e0bffd17 	ldw	r2,-12(fp)
 4006068:	10c00405 	stb	r3,16(r2)
	if (sockindex >= MAX_SOCK_NUM) return 0;
 400606c:	e0bffd17 	ldw	r2,-12(fp)
 4006070:	10800403 	ldbu	r2,16(r2)
 4006074:	10803fcc 	andi	r2,r2,255
 4006078:	10800230 	cmpltui	r2,r2,8
 400607c:	1000021e 	bne	r2,zero,4006088 <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x84>
 4006080:	0005883a 	mov	r2,zero
 4006084:	00000606 	br	40060a0 <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x9c>
	_port = port;
 4006088:	e0bffd17 	ldw	r2,-12(fp)
 400608c:	e0ffff0b 	ldhu	r3,-4(fp)
 4006090:	10c0010d 	sth	r3,4(r2)
	_remaining = 0;
 4006094:	e0bffd17 	ldw	r2,-12(fp)
 4006098:	1000048d 	sth	zero,18(r2)
	return 1;
 400609c:	00800044 	movi	r2,1
}
 40060a0:	e037883a 	mov	sp,fp
 40060a4:	dfc00117 	ldw	ra,4(sp)
 40060a8:	df000017 	ldw	fp,0(sp)
 40060ac:	dec00204 	addi	sp,sp,8
 40060b0:	f800283a 	ret

040060b4 <_Z41__static_initialization_and_destruction_0ii>:
 40060b4:	defffb04 	addi	sp,sp,-20
 40060b8:	dfc00415 	stw	ra,16(sp)
 40060bc:	df000315 	stw	fp,12(sp)
 40060c0:	df000304 	addi	fp,sp,12
 40060c4:	e13ffe15 	stw	r4,-8(fp)
 40060c8:	e17fff15 	stw	r5,-4(fp)
 40060cc:	e0bffe17 	ldw	r2,-8(fp)
 40060d0:	10800058 	cmpnei	r2,r2,1
 40060d4:	1000091e 	bne	r2,zero,40060fc <_Z41__static_initialization_and_destruction_0ii+0x48>
 40060d8:	e0ffff17 	ldw	r3,-4(fp)
 40060dc:	00bfffd4 	movui	r2,65535
 40060e0:	1880061e 	bne	r3,r2,40060fc <_Z41__static_initialization_and_destruction_0ii+0x48>
 40060e4:	d8000015 	stw	zero,0(sp)
 40060e8:	000f883a 	mov	r7,zero
 40060ec:	000d883a 	mov	r6,zero
 40060f0:	000b883a 	mov	r5,zero
 40060f4:	d112d904 	addi	r4,gp,19300
 40060f8:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
 40060fc:	0001883a 	nop
 4006100:	e037883a 	mov	sp,fp
 4006104:	dfc00117 	ldw	ra,4(sp)
 4006108:	df000017 	ldw	fp,0(sp)
 400610c:	dec00204 	addi	sp,sp,8
 4006110:	f800283a 	ret

04006114 <_GLOBAL__sub_I__ZN11EthernetUDP5beginEt>:
 4006114:	defffe04 	addi	sp,sp,-8
 4006118:	dfc00115 	stw	ra,4(sp)
 400611c:	df000015 	stw	fp,0(sp)
 4006120:	d839883a 	mov	fp,sp
 4006124:	017fffd4 	movui	r5,65535
 4006128:	01000044 	movi	r4,1
 400612c:	40060b40 	call	40060b4 <_Z41__static_initialization_and_destruction_0ii>
 4006130:	e037883a 	mov	sp,fp
 4006134:	dfc00117 	ldw	ra,4(sp)
 4006138:	df000017 	ldw	fp,0(sp)
 400613c:	dec00204 	addi	sp,sp,8
 4006140:	f800283a 	ret

04006144 <_ZN3UDP12rawIPAddressER9IPAddress>:
  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() =0;
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() =0;
protected:
  uint8_t* rawIPAddress(IPAddress& addr) { return addr.raw_address(); };
 4006144:	defffc04 	addi	sp,sp,-16
 4006148:	dfc00315 	stw	ra,12(sp)
 400614c:	df000215 	stw	fp,8(sp)
 4006150:	df000204 	addi	fp,sp,8
 4006154:	e13ffe15 	stw	r4,-8(fp)
 4006158:	e17fff15 	stw	r5,-4(fp)
 400615c:	e13fff17 	ldw	r4,-4(fp)
 4006160:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 4006164:	e037883a 	mov	sp,fp
 4006168:	dfc00117 	ldw	ra,4(sp)
 400616c:	df000017 	ldw	fp,0(sp)
 4006170:	dec00204 	addi	sp,sp,8
 4006174:	f800283a 	ret

04006178 <_ZN11EthernetUDP4readEPcj>:
	// Read up to len bytes from the current packet and place them into buffer
	// Returns the number of bytes read, or 0 if none are available
	virtual int read(unsigned char* buffer, size_t len);
	// Read up to len characters from the current packet and place them into buffer
	// Returns the number of characters read, or 0 if none are available
	virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 4006178:	defffb04 	addi	sp,sp,-20
 400617c:	dfc00415 	stw	ra,16(sp)
 4006180:	df000315 	stw	fp,12(sp)
 4006184:	df000304 	addi	fp,sp,12
 4006188:	e13ffd15 	stw	r4,-12(fp)
 400618c:	e17ffe15 	stw	r5,-8(fp)
 4006190:	e1bfff15 	stw	r6,-4(fp)
 4006194:	e0bffd17 	ldw	r2,-12(fp)
 4006198:	10800017 	ldw	r2,0(r2)
 400619c:	10800b04 	addi	r2,r2,44
 40061a0:	10800017 	ldw	r2,0(r2)
 40061a4:	e1bfff17 	ldw	r6,-4(fp)
 40061a8:	e17ffe17 	ldw	r5,-8(fp)
 40061ac:	e13ffd17 	ldw	r4,-12(fp)
 40061b0:	103ee83a 	callr	r2
 40061b4:	e037883a 	mov	sp,fp
 40061b8:	dfc00117 	ldw	ra,4(sp)
 40061bc:	df000017 	ldw	fp,0(sp)
 40061c0:	dec00204 	addi	sp,sp,8
 40061c4:	f800283a 	ret

040061c8 <_ZN11EthernetUDP9localPortEv>:

	// Return the IP address of the host who sent the current incoming packet
	virtual IPAddress remoteIP() { return _remoteIP; };
	// Return the port of the host who sent the current incoming packet
	virtual uint16_t remotePort() { return _remotePort; };
	virtual uint16_t localPort() { return _port; }
 40061c8:	defffe04 	addi	sp,sp,-8
 40061cc:	df000115 	stw	fp,4(sp)
 40061d0:	df000104 	addi	fp,sp,4
 40061d4:	e13fff15 	stw	r4,-4(fp)
 40061d8:	e0bfff17 	ldw	r2,-4(fp)
 40061dc:	1080010b 	ldhu	r2,4(r2)
 40061e0:	e037883a 	mov	sp,fp
 40061e4:	df000017 	ldw	fp,0(sp)
 40061e8:	dec00104 	addi	sp,sp,4
 40061ec:	f800283a 	ret

040061f0 <_ZN13EthernetClass14socketPortRandEt>:
/*          Socket management            */
/*****************************************/


void EthernetClass::socketPortRand(uint16_t n)
{
 40061f0:	defffe04 	addi	sp,sp,-8
 40061f4:	df000115 	stw	fp,4(sp)
 40061f8:	df000104 	addi	fp,sp,4
 40061fc:	2005883a 	mov	r2,r4
 4006200:	e0bfff0d 	sth	r2,-4(fp)
	n &= 0x3FFF;
 4006204:	e0bfff0b 	ldhu	r2,-4(fp)
 4006208:	108fffcc 	andi	r2,r2,16383
 400620c:	e0bfff0d 	sth	r2,-4(fp)
	local_port ^= n;
 4006210:	d0e00d0b 	ldhu	r3,-32716(gp)
 4006214:	e0bfff0b 	ldhu	r2,-4(fp)
 4006218:	1884f03a 	xor	r2,r3,r2
 400621c:	d0a00d0d 	sth	r2,-32716(gp)
	//Serial.printf("socketPortRand %d, srcport=%d\n", n, local_port);
}
 4006220:	0001883a 	nop
 4006224:	e037883a 	mov	sp,fp
 4006228:	df000017 	ldw	fp,0(sp)
 400622c:	dec00104 	addi	sp,sp,4
 4006230:	f800283a 	ret

04006234 <_ZN13EthernetClass11socketBeginEht>:

uint8_t EthernetClass::socketBegin(uint8_t protocol, uint16_t port)
{
 4006234:	defff804 	addi	sp,sp,-32
 4006238:	dfc00715 	stw	ra,28(sp)
 400623c:	df000615 	stw	fp,24(sp)
 4006240:	dc000515 	stw	r16,20(sp)
 4006244:	df000604 	addi	fp,sp,24
 4006248:	2007883a 	mov	r3,r4
 400624c:	2805883a 	mov	r2,r5
 4006250:	e0fffd05 	stb	r3,-12(fp)
 4006254:	e0bffe0d 	sth	r2,-8(fp)
	uint8_t s, status[MAX_SOCK_NUM], chip, maxindex=MAX_SOCK_NUM;
 4006258:	00800204 	movi	r2,8
 400625c:	e0bffa45 	stb	r2,-23(fp)

	// first check hardware compatibility
	chip = W5100.getChip();
 4006260:	400411c0 	call	400411c <_ZN10W5100Class7getChipEv>
 4006264:	e0bffa85 	stb	r2,-22(fp)
	if (!chip) return MAX_SOCK_NUM; // immediate error if no hardware detected
 4006268:	e0bffa83 	ldbu	r2,-22(fp)
 400626c:	1000021e 	bne	r2,zero,4006278 <_ZN13EthernetClass11socketBeginEht+0x44>
 4006270:	00800204 	movi	r2,8
 4006274:	00009006 	br	40064b8 <_ZN13EthernetClass11socketBeginEht+0x284>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4006278:	e0bffa83 	ldbu	r2,-22(fp)
 400627c:	10800cd8 	cmpnei	r2,r2,51
 4006280:	1000021e 	bne	r2,zero,400628c <_ZN13EthernetClass11socketBeginEht+0x58>
 4006284:	00800104 	movi	r2,4
 4006288:	e0bffa45 	stb	r2,-23(fp)
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 400628c:	e03ffa05 	stb	zero,-24(fp)
 4006290:	e0fffa03 	ldbu	r3,-24(fp)
 4006294:	e0bffa43 	ldbu	r2,-23(fp)
 4006298:	1880122e 	bgeu	r3,r2,40062e4 <_ZN13EthernetClass11socketBeginEht+0xb0>
		status[s] = W5100.readSnSR(s);
 400629c:	e43ffa03 	ldbu	r16,-24(fp)
 40062a0:	e0bffa03 	ldbu	r2,-24(fp)
 40062a4:	1009883a 	mov	r4,r2
 40062a8:	40077900 	call	4007790 <_ZN10W5100Class8readSnSREh>
 40062ac:	1007883a 	mov	r3,r2
 40062b0:	e0bffb04 	addi	r2,fp,-20
 40062b4:	1405883a 	add	r2,r2,r16
 40062b8:	10c00005 	stb	r3,0(r2)
		if (status[s] == SnSR::CLOSED) goto makesocket;
 40062bc:	e0bffa03 	ldbu	r2,-24(fp)
 40062c0:	e0fffb04 	addi	r3,fp,-20
 40062c4:	1885883a 	add	r2,r3,r2
 40062c8:	10800003 	ldbu	r2,0(r2)
 40062cc:	10803fcc 	andi	r2,r2,255
 40062d0:	10002b26 	beq	r2,zero,4006380 <_ZN13EthernetClass11socketBeginEht+0x14c>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 40062d4:	e0bffa03 	ldbu	r2,-24(fp)
 40062d8:	10800044 	addi	r2,r2,1
 40062dc:	e0bffa05 	stb	r2,-24(fp)
 40062e0:	003feb06 	br	4006290 <__alt_data_end+0xfc006290>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 40062e4:	e03ffa05 	stb	zero,-24(fp)
 40062e8:	e0fffa03 	ldbu	r3,-24(fp)
 40062ec:	e0bffa43 	ldbu	r2,-23(fp)
 40062f0:	1880152e 	bgeu	r3,r2,4006348 <_ZN13EthernetClass11socketBeginEht+0x114>
		uint8_t stat = status[s];
 40062f4:	e0bffa03 	ldbu	r2,-24(fp)
 40062f8:	e0fffb04 	addi	r3,fp,-20
 40062fc:	1885883a 	add	r2,r3,r2
 4006300:	10800003 	ldbu	r2,0(r2)
 4006304:	e0bffac5 	stb	r2,-21(fp)
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4006308:	e0bffac3 	ldbu	r2,-21(fp)
 400630c:	10800758 	cmpnei	r2,r2,29
 4006310:	10000f26 	beq	r2,zero,4006350 <_ZN13EthernetClass11socketBeginEht+0x11c>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 4006314:	e0bffac3 	ldbu	r2,-21(fp)
 4006318:	108006d8 	cmpnei	r2,r2,27
 400631c:	10000e26 	beq	r2,zero,4006358 <_ZN13EthernetClass11socketBeginEht+0x124>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4006320:	e0bffac3 	ldbu	r2,-21(fp)
 4006324:	10800618 	cmpnei	r2,r2,24
 4006328:	10000d26 	beq	r2,zero,4006360 <_ZN13EthernetClass11socketBeginEht+0x12c>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 400632c:	e0bffac3 	ldbu	r2,-21(fp)
 4006330:	10800698 	cmpnei	r2,r2,26
 4006334:	10000c26 	beq	r2,zero,4006368 <_ZN13EthernetClass11socketBeginEht+0x134>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 4006338:	e0bffa03 	ldbu	r2,-24(fp)
 400633c:	10800044 	addi	r2,r2,1
 4006340:	e0bffa05 	stb	r2,-24(fp)
 4006344:	003fe806 	br	40062e8 <__alt_data_end+0xfc0062e8>
		uint8_t stat = status[s];
		// TODO: this also needs to check if no more data
		if (stat == SnSR::CLOSE_WAIT) goto closemakesocket;
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
 4006348:	00800204 	movi	r2,8
 400634c:	00005a06 	br	40064b8 <_ZN13EthernetClass11socketBeginEht+0x284>
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
		uint8_t stat = status[s];
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4006350:	0001883a 	nop
 4006354:	00000506 	br	400636c <_ZN13EthernetClass11socketBeginEht+0x138>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 4006358:	0001883a 	nop
 400635c:	00000306 	br	400636c <_ZN13EthernetClass11socketBeginEht+0x138>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4006360:	0001883a 	nop
 4006364:	00000106 	br	400636c <_ZN13EthernetClass11socketBeginEht+0x138>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4006368:	0001883a 	nop
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
 400636c:	e0bffa03 	ldbu	r2,-24(fp)
 4006370:	01400404 	movi	r5,16
 4006374:	1009883a 	mov	r4,r2
 4006378:	40088fc0 	call	40088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>
 400637c:	00000106 	br	4006384 <_ZN13EthernetClass11socketBeginEht+0x150>
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
 4006380:	0001883a 	nop
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
makesocket:
	//Serial.printf("W5000socket %d\n", s);
	EthernetServer::server_port[s] = 0;
 4006384:	e0fffa03 	ldbu	r3,-24(fp)
 4006388:	008100f4 	movhi	r2,1027
 400638c:	1096d004 	addi	r2,r2,23360
 4006390:	18c7883a 	add	r3,r3,r3
 4006394:	10c5883a 	add	r2,r2,r3
 4006398:	1000000d 	sth	zero,0(r2)
	usleep (250); // TODO: is this needed??
 400639c:	01003e84 	movi	r4,250
 40063a0:	40188c00 	call	40188c0 <usleep>
	W5100.writeSnMR(s, protocol);
 40063a4:	e0bffa03 	ldbu	r2,-24(fp)
 40063a8:	e0fffd03 	ldbu	r3,-12(fp)
 40063ac:	180b883a 	mov	r5,r3
 40063b0:	1009883a 	mov	r4,r2
 40063b4:	40076b40 	call	40076b4 <_ZN10W5100Class9writeSnMREhh>
	W5100.writeSnIR(s, 0xFF);
 40063b8:	e0bffa03 	ldbu	r2,-24(fp)
 40063bc:	01403fc4 	movi	r5,255
 40063c0:	1009883a 	mov	r4,r2
 40063c4:	40077040 	call	4007704 <_ZN10W5100Class9writeSnIREhh>
	if (port > 0) {
 40063c8:	e0bffe0b 	ldhu	r2,-8(fp)
 40063cc:	10000626 	beq	r2,zero,40063e8 <_ZN13EthernetClass11socketBeginEht+0x1b4>
		W5100.writeSnPORT(s, port);
 40063d0:	e0bffa03 	ldbu	r2,-24(fp)
 40063d4:	e0fffe0b 	ldhu	r3,-8(fp)
 40063d8:	180b883a 	mov	r5,r3
 40063dc:	1009883a 	mov	r4,r2
 40063e0:	40077cc0 	call	40077cc <_ZN10W5100Class11writeSnPORTEht>
 40063e4:	00001006 	br	4006428 <_ZN13EthernetClass11socketBeginEht+0x1f4>
	} else {
		// if don't set the source port, set local_port number.
		if (++local_port < 49152) local_port = 49152;
 40063e8:	d0a00d0b 	ldhu	r2,-32716(gp)
 40063ec:	10800044 	addi	r2,r2,1
 40063f0:	d0a00d0d 	sth	r2,-32716(gp)
 40063f4:	d0a00d0b 	ldhu	r2,-32716(gp)
 40063f8:	10bfffcc 	andi	r2,r2,65535
 40063fc:	10b00030 	cmpltui	r2,r2,49152
 4006400:	10803fcc 	andi	r2,r2,255
 4006404:	10000226 	beq	r2,zero,4006410 <_ZN13EthernetClass11socketBeginEht+0x1dc>
 4006408:	00b00004 	movi	r2,-16384
 400640c:	d0a00d0d 	sth	r2,-32716(gp)
		W5100.writeSnPORT(s, local_port);
 4006410:	e0bffa03 	ldbu	r2,-24(fp)
 4006414:	d0e00d0b 	ldhu	r3,-32716(gp)
 4006418:	18ffffcc 	andi	r3,r3,65535
 400641c:	180b883a 	mov	r5,r3
 4006420:	1009883a 	mov	r4,r2
 4006424:	40077cc0 	call	40077cc <_ZN10W5100Class11writeSnPORTEht>
	}
	W5100.execCmdSn(s, Sock_OPEN);
 4006428:	e0bffa03 	ldbu	r2,-24(fp)
 400642c:	01400044 	movi	r5,1
 4006430:	1009883a 	mov	r4,r2
 4006434:	40088fc0 	call	40088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>
	state[s].RX_RSR = 0;
 4006438:	e0fffa03 	ldbu	r3,-24(fp)
 400643c:	008100f4 	movhi	r2,1027
 4006440:	1096d404 	addi	r2,r2,23376
 4006444:	180690fa 	slli	r3,r3,3
 4006448:	10c5883a 	add	r2,r2,r3
 400644c:	1000000d 	sth	zero,0(r2)
	state[s].RX_RD  = W5100.readSnRX_RD(s); // always zero?
 4006450:	e43ffa03 	ldbu	r16,-24(fp)
 4006454:	e0bffa03 	ldbu	r2,-24(fp)
 4006458:	1009883a 	mov	r4,r2
 400645c:	4007b0c0 	call	4007b0c <_ZN10W5100Class11readSnRX_RDEh>
 4006460:	1009883a 	mov	r4,r2
 4006464:	008100f4 	movhi	r2,1027
 4006468:	1096d404 	addi	r2,r2,23376
 400646c:	800690fa 	slli	r3,r16,3
 4006470:	10c5883a 	add	r2,r2,r3
 4006474:	10800084 	addi	r2,r2,2
 4006478:	1100000d 	sth	r4,0(r2)
	state[s].RX_inc = 0;
 400647c:	e0fffa03 	ldbu	r3,-24(fp)
 4006480:	008100f4 	movhi	r2,1027
 4006484:	1096d404 	addi	r2,r2,23376
 4006488:	180690fa 	slli	r3,r3,3
 400648c:	10c5883a 	add	r2,r2,r3
 4006490:	10800184 	addi	r2,r2,6
 4006494:	10000005 	stb	zero,0(r2)
	state[s].TX_FSR = 0;
 4006498:	e0fffa03 	ldbu	r3,-24(fp)
 400649c:	008100f4 	movhi	r2,1027
 40064a0:	1096d404 	addi	r2,r2,23376
 40064a4:	180690fa 	slli	r3,r3,3
 40064a8:	10c5883a 	add	r2,r2,r3
 40064ac:	10800104 	addi	r2,r2,4
 40064b0:	1000000d 	sth	zero,0(r2)
	//Serial.printf("W5000socket prot=%d, RX_RD=%d\n", W5100.readSnMR(s), state[s].RX_RD);
	return s;
 40064b4:	e0bffa03 	ldbu	r2,-24(fp)
}
 40064b8:	e6ffff04 	addi	sp,fp,-4
 40064bc:	dfc00217 	ldw	ra,8(sp)
 40064c0:	df000117 	ldw	fp,4(sp)
 40064c4:	dc000017 	ldw	r16,0(sp)
 40064c8:	dec00304 	addi	sp,sp,12
 40064cc:	f800283a 	ret

040064d0 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst>:

// multicast version to set fields before open  thd
uint8_t EthernetClass::socketBeginMulticast(uint8_t protocol, IPAddress ip, uint16_t port)
{
 40064d0:	defff504 	addi	sp,sp,-44
 40064d4:	dfc00a15 	stw	ra,40(sp)
 40064d8:	df000915 	stw	fp,36(sp)
 40064dc:	dc000815 	stw	r16,32(sp)
 40064e0:	df000904 	addi	fp,sp,36
 40064e4:	2007883a 	mov	r3,r4
 40064e8:	e17ffd15 	stw	r5,-12(fp)
 40064ec:	3005883a 	mov	r2,r6
 40064f0:	e0fffc05 	stb	r3,-16(fp)
 40064f4:	e0bffe0d 	sth	r2,-8(fp)
	uint8_t s, status[MAX_SOCK_NUM], chip, maxindex=MAX_SOCK_NUM;
 40064f8:	00800204 	movi	r2,8
 40064fc:	e0bff745 	stb	r2,-35(fp)

	// first check hardware compatibility
	chip = W5100.getChip();
 4006500:	400411c0 	call	400411c <_ZN10W5100Class7getChipEv>
 4006504:	e0bff785 	stb	r2,-34(fp)
	if (!chip) return MAX_SOCK_NUM; // immediate error if no hardware detected
 4006508:	e0bff783 	ldbu	r2,-34(fp)
 400650c:	1000021e 	bne	r2,zero,4006518 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x48>
 4006510:	00800204 	movi	r2,8
 4006514:	0000bc06 	br	4006808 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x338>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4006518:	e0bff783 	ldbu	r2,-34(fp)
 400651c:	10800cd8 	cmpnei	r2,r2,51
 4006520:	1000021e 	bne	r2,zero,400652c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x5c>
 4006524:	00800104 	movi	r2,4
 4006528:	e0bff745 	stb	r2,-35(fp)
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 400652c:	e03ff705 	stb	zero,-36(fp)
 4006530:	e0fff703 	ldbu	r3,-36(fp)
 4006534:	e0bff743 	ldbu	r2,-35(fp)
 4006538:	1880122e 	bgeu	r3,r2,4006584 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0xb4>
		status[s] = W5100.readSnSR(s);
 400653c:	e43ff703 	ldbu	r16,-36(fp)
 4006540:	e0bff703 	ldbu	r2,-36(fp)
 4006544:	1009883a 	mov	r4,r2
 4006548:	40077900 	call	4007790 <_ZN10W5100Class8readSnSREh>
 400654c:	1007883a 	mov	r3,r2
 4006550:	e0bff804 	addi	r2,fp,-32
 4006554:	1405883a 	add	r2,r2,r16
 4006558:	10c00005 	stb	r3,0(r2)
		if (status[s] == SnSR::CLOSED) goto makesocket;
 400655c:	e0bff703 	ldbu	r2,-36(fp)
 4006560:	e0fff804 	addi	r3,fp,-32
 4006564:	1885883a 	add	r2,r3,r2
 4006568:	10800003 	ldbu	r2,0(r2)
 400656c:	10803fcc 	andi	r2,r2,255
 4006570:	10002b26 	beq	r2,zero,4006620 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x150>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 4006574:	e0bff703 	ldbu	r2,-36(fp)
 4006578:	10800044 	addi	r2,r2,1
 400657c:	e0bff705 	stb	r2,-36(fp)
 4006580:	003feb06 	br	4006530 <__alt_data_end+0xfc006530>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 4006584:	e03ff705 	stb	zero,-36(fp)
 4006588:	e0fff703 	ldbu	r3,-36(fp)
 400658c:	e0bff743 	ldbu	r2,-35(fp)
 4006590:	1880152e 	bgeu	r3,r2,40065e8 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x118>
		uint8_t stat = status[s];
 4006594:	e0bff703 	ldbu	r2,-36(fp)
 4006598:	e0fff804 	addi	r3,fp,-32
 400659c:	1885883a 	add	r2,r3,r2
 40065a0:	10800003 	ldbu	r2,0(r2)
 40065a4:	e0bff7c5 	stb	r2,-33(fp)
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 40065a8:	e0bff7c3 	ldbu	r2,-33(fp)
 40065ac:	10800758 	cmpnei	r2,r2,29
 40065b0:	10000f26 	beq	r2,zero,40065f0 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x120>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 40065b4:	e0bff7c3 	ldbu	r2,-33(fp)
 40065b8:	108006d8 	cmpnei	r2,r2,27
 40065bc:	10000e26 	beq	r2,zero,40065f8 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x128>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 40065c0:	e0bff7c3 	ldbu	r2,-33(fp)
 40065c4:	10800618 	cmpnei	r2,r2,24
 40065c8:	10000d26 	beq	r2,zero,4006600 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x130>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 40065cc:	e0bff7c3 	ldbu	r2,-33(fp)
 40065d0:	10800698 	cmpnei	r2,r2,26
 40065d4:	10000c26 	beq	r2,zero,4006608 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x138>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 40065d8:	e0bff703 	ldbu	r2,-36(fp)
 40065dc:	10800044 	addi	r2,r2,1
 40065e0:	e0bff705 	stb	r2,-36(fp)
 40065e4:	003fe806 	br	4006588 <__alt_data_end+0xfc006588>
		uint8_t stat = status[s];
		// TODO: this also needs to check if no more data
		if (stat == SnSR::CLOSE_WAIT) goto closemakesocket;
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
 40065e8:	00800204 	movi	r2,8
 40065ec:	00008606 	br	4006808 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x338>
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
		uint8_t stat = status[s];
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 40065f0:	0001883a 	nop
 40065f4:	00000506 	br	400660c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x13c>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 40065f8:	0001883a 	nop
 40065fc:	00000306 	br	400660c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x13c>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4006600:	0001883a 	nop
 4006604:	00000106 	br	400660c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x13c>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4006608:	0001883a 	nop
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
 400660c:	e0bff703 	ldbu	r2,-36(fp)
 4006610:	01400404 	movi	r5,16
 4006614:	1009883a 	mov	r4,r2
 4006618:	40088fc0 	call	40088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>
 400661c:	00000106 	br	4006624 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x154>
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
 4006620:	0001883a 	nop
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
makesocket:
	//Serial.printf("W5000socket %d\n", s);
	EthernetServer::server_port[s] = 0;
 4006624:	e0fff703 	ldbu	r3,-36(fp)
 4006628:	008100f4 	movhi	r2,1027
 400662c:	1096d004 	addi	r2,r2,23360
 4006630:	18c7883a 	add	r3,r3,r3
 4006634:	10c5883a 	add	r2,r2,r3
 4006638:	1000000d 	sth	zero,0(r2)
	usleep (250); // TODO: is this needed??
 400663c:	01003e84 	movi	r4,250
 4006640:	40188c00 	call	40188c0 <usleep>
	W5100.writeSnMR(s, protocol);
 4006644:	e0bff703 	ldbu	r2,-36(fp)
 4006648:	e0fffc03 	ldbu	r3,-16(fp)
 400664c:	180b883a 	mov	r5,r3
 4006650:	1009883a 	mov	r4,r2
 4006654:	40076b40 	call	40076b4 <_ZN10W5100Class9writeSnMREhh>
	W5100.writeSnIR(s, 0xFF);
 4006658:	e0bff703 	ldbu	r2,-36(fp)
 400665c:	01403fc4 	movi	r5,255
 4006660:	1009883a 	mov	r4,r2
 4006664:	40077040 	call	4007704 <_ZN10W5100Class9writeSnIREhh>
	if (port > 0) {
 4006668:	e0bffe0b 	ldhu	r2,-8(fp)
 400666c:	10000626 	beq	r2,zero,4006688 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x1b8>
		W5100.writeSnPORT(s, port);
 4006670:	e0bff703 	ldbu	r2,-36(fp)
 4006674:	e0fffe0b 	ldhu	r3,-8(fp)
 4006678:	180b883a 	mov	r5,r3
 400667c:	1009883a 	mov	r4,r2
 4006680:	40077cc0 	call	40077cc <_ZN10W5100Class11writeSnPORTEht>
 4006684:	00001006 	br	40066c8 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x1f8>
	} else {
		// if don't set the source port, set local_port number.
		if (++local_port < 49152) local_port = 49152;
 4006688:	d0a00d0b 	ldhu	r2,-32716(gp)
 400668c:	10800044 	addi	r2,r2,1
 4006690:	d0a00d0d 	sth	r2,-32716(gp)
 4006694:	d0a00d0b 	ldhu	r2,-32716(gp)
 4006698:	10bfffcc 	andi	r2,r2,65535
 400669c:	10b00030 	cmpltui	r2,r2,49152
 40066a0:	10803fcc 	andi	r2,r2,255
 40066a4:	10000226 	beq	r2,zero,40066b0 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x1e0>
 40066a8:	00b00004 	movi	r2,-16384
 40066ac:	d0a00d0d 	sth	r2,-32716(gp)
		W5100.writeSnPORT(s, local_port);
 40066b0:	e0bff703 	ldbu	r2,-36(fp)
 40066b4:	d0e00d0b 	ldhu	r3,-32716(gp)
 40066b8:	18ffffcc 	andi	r3,r3,65535
 40066bc:	180b883a 	mov	r5,r3
 40066c0:	1009883a 	mov	r4,r2
 40066c4:	40077cc0 	call	40077cc <_ZN10W5100Class11writeSnPORTEht>
	}
	// Calculate MAC address from Multicast IP Address
    	unsigned char mac[] = {  0x01, 0x00, 0x5E, 0x00, 0x00, 0x00 };
 40066c8:	00800044 	movi	r2,1
 40066cc:	e0bffa05 	stb	r2,-24(fp)
 40066d0:	e03ffa45 	stb	zero,-23(fp)
 40066d4:	00801784 	movi	r2,94
 40066d8:	e0bffa85 	stb	r2,-22(fp)
 40066dc:	e03ffac5 	stb	zero,-21(fp)
 40066e0:	e03ffb05 	stb	zero,-20(fp)
 40066e4:	e03ffb45 	stb	zero,-19(fp)
    	mac[3] = ip[1] & 0x7F;
 40066e8:	e0bffd04 	addi	r2,fp,-12
 40066ec:	01400044 	movi	r5,1
 40066f0:	1009883a 	mov	r4,r2
 40066f4:	400318c0 	call	400318c <_ZN9IPAddressixEi>
 40066f8:	10800003 	ldbu	r2,0(r2)
 40066fc:	10801fcc 	andi	r2,r2,127
 4006700:	e0bffac5 	stb	r2,-21(fp)
    	mac[4] = ip[2];
 4006704:	e0bffd04 	addi	r2,fp,-12
 4006708:	01400084 	movi	r5,2
 400670c:	1009883a 	mov	r4,r2
 4006710:	400318c0 	call	400318c <_ZN9IPAddressixEi>
 4006714:	10800003 	ldbu	r2,0(r2)
 4006718:	e0bffb05 	stb	r2,-20(fp)
    	mac[5] = ip[3];
 400671c:	e0bffd04 	addi	r2,fp,-12
 4006720:	014000c4 	movi	r5,3
 4006724:	1009883a 	mov	r4,r2
 4006728:	400318c0 	call	400318c <_ZN9IPAddressixEi>
 400672c:	10800003 	ldbu	r2,0(r2)
 4006730:	e0bffb45 	stb	r2,-19(fp)
    	W5100.writeSnDIPR(s, ip.raw_address());   //239.255.0.1
 4006734:	e43ff703 	ldbu	r16,-36(fp)
 4006738:	e0bffd04 	addi	r2,fp,-12
 400673c:	1009883a 	mov	r4,r2
 4006740:	40031400 	call	4003140 <_ZN9IPAddress11raw_addressEv>
 4006744:	100b883a 	mov	r5,r2
 4006748:	8009883a 	mov	r4,r16
 400674c:	40078780 	call	4007878 <_ZN10W5100Class11writeSnDIPREhPh>
    	W5100.writeSnDPORT(s, port);
 4006750:	e0bff703 	ldbu	r2,-36(fp)
 4006754:	e0fffe0b 	ldhu	r3,-8(fp)
 4006758:	180b883a 	mov	r5,r3
 400675c:	1009883a 	mov	r4,r2
 4006760:	40078c00 	call	40078c0 <_ZN10W5100Class12writeSnDPORTEht>
    	W5100.writeSnDHAR(s, mac);
 4006764:	e0bff703 	ldbu	r2,-36(fp)
 4006768:	e0fffa04 	addi	r3,fp,-24
 400676c:	180b883a 	mov	r5,r3
 4006770:	1009883a 	mov	r4,r2
 4006774:	40078300 	call	4007830 <_ZN10W5100Class11writeSnDHAREhPh>
	W5100.execCmdSn(s, Sock_OPEN);
 4006778:	e0bff703 	ldbu	r2,-36(fp)
 400677c:	01400044 	movi	r5,1
 4006780:	1009883a 	mov	r4,r2
 4006784:	40088fc0 	call	40088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>
	state[s].RX_RSR = 0;
 4006788:	e0fff703 	ldbu	r3,-36(fp)
 400678c:	008100f4 	movhi	r2,1027
 4006790:	1096d404 	addi	r2,r2,23376
 4006794:	180690fa 	slli	r3,r3,3
 4006798:	10c5883a 	add	r2,r2,r3
 400679c:	1000000d 	sth	zero,0(r2)
	state[s].RX_RD  = W5100.readSnRX_RD(s); // always zero?
 40067a0:	e43ff703 	ldbu	r16,-36(fp)
 40067a4:	e0bff703 	ldbu	r2,-36(fp)
 40067a8:	1009883a 	mov	r4,r2
 40067ac:	4007b0c0 	call	4007b0c <_ZN10W5100Class11readSnRX_RDEh>
 40067b0:	1009883a 	mov	r4,r2
 40067b4:	008100f4 	movhi	r2,1027
 40067b8:	1096d404 	addi	r2,r2,23376
 40067bc:	800690fa 	slli	r3,r16,3
 40067c0:	10c5883a 	add	r2,r2,r3
 40067c4:	10800084 	addi	r2,r2,2
 40067c8:	1100000d 	sth	r4,0(r2)
	state[s].RX_inc = 0;
 40067cc:	e0fff703 	ldbu	r3,-36(fp)
 40067d0:	008100f4 	movhi	r2,1027
 40067d4:	1096d404 	addi	r2,r2,23376
 40067d8:	180690fa 	slli	r3,r3,3
 40067dc:	10c5883a 	add	r2,r2,r3
 40067e0:	10800184 	addi	r2,r2,6
 40067e4:	10000005 	stb	zero,0(r2)
	state[s].TX_FSR = 0;
 40067e8:	e0fff703 	ldbu	r3,-36(fp)
 40067ec:	008100f4 	movhi	r2,1027
 40067f0:	1096d404 	addi	r2,r2,23376
 40067f4:	180690fa 	slli	r3,r3,3
 40067f8:	10c5883a 	add	r2,r2,r3
 40067fc:	10800104 	addi	r2,r2,4
 4006800:	1000000d 	sth	zero,0(r2)
	//Serial.printf("W5000socket prot=%d, RX_RD=%d\n", W5100.readSnMR(s), state[s].RX_RD);
	return s;
 4006804:	e0bff703 	ldbu	r2,-36(fp)
}
 4006808:	e6ffff04 	addi	sp,fp,-4
 400680c:	dfc00217 	ldw	ra,8(sp)
 4006810:	df000117 	ldw	fp,4(sp)
 4006814:	dc000017 	ldw	r16,0(sp)
 4006818:	dec00304 	addi	sp,sp,12
 400681c:	f800283a 	ret

04006820 <_ZN13EthernetClass12socketStatusEh>:
// Return the socket's status
//
uint8_t EthernetClass::socketStatus(uint8_t s)
{
 4006820:	defffc04 	addi	sp,sp,-16
 4006824:	dfc00315 	stw	ra,12(sp)
 4006828:	df000215 	stw	fp,8(sp)
 400682c:	df000204 	addi	fp,sp,8
 4006830:	2005883a 	mov	r2,r4
 4006834:	e0bfff05 	stb	r2,-4(fp)
	uint8_t status = W5100.readSnSR(s);
 4006838:	e0bfff03 	ldbu	r2,-4(fp)
 400683c:	1009883a 	mov	r4,r2
 4006840:	40077900 	call	4007790 <_ZN10W5100Class8readSnSREh>
 4006844:	e0bffe05 	stb	r2,-8(fp)
	return status;
 4006848:	e0bffe03 	ldbu	r2,-8(fp)
}
 400684c:	e037883a 	mov	sp,fp
 4006850:	dfc00117 	ldw	ra,4(sp)
 4006854:	df000017 	ldw	fp,0(sp)
 4006858:	dec00204 	addi	sp,sp,8
 400685c:	f800283a 	ret

04006860 <_ZN13EthernetClass11socketCloseEh>:

// Immediately close.  If a TCP connection is established, the
// remote host is left unaware we closed.
//
void EthernetClass::socketClose(uint8_t s)
{
 4006860:	defffd04 	addi	sp,sp,-12
 4006864:	dfc00215 	stw	ra,8(sp)
 4006868:	df000115 	stw	fp,4(sp)
 400686c:	df000104 	addi	fp,sp,4
 4006870:	2005883a 	mov	r2,r4
 4006874:	e0bfff05 	stb	r2,-4(fp)
	W5100.execCmdSn(s, Sock_CLOSE);
 4006878:	e0bfff03 	ldbu	r2,-4(fp)
 400687c:	01400404 	movi	r5,16
 4006880:	1009883a 	mov	r4,r2
 4006884:	40088fc0 	call	40088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
 4006888:	0001883a 	nop
 400688c:	e037883a 	mov	sp,fp
 4006890:	dfc00117 	ldw	ra,4(sp)
 4006894:	df000017 	ldw	fp,0(sp)
 4006898:	dec00204 	addi	sp,sp,8
 400689c:	f800283a 	ret

040068a0 <_ZN13EthernetClass12socketListenEh>:


// Place the socket in listening (server) mode
//
uint8_t EthernetClass::socketListen(uint8_t s)
{
 40068a0:	defffd04 	addi	sp,sp,-12
 40068a4:	dfc00215 	stw	ra,8(sp)
 40068a8:	df000115 	stw	fp,4(sp)
 40068ac:	df000104 	addi	fp,sp,4
 40068b0:	2005883a 	mov	r2,r4
 40068b4:	e0bfff05 	stb	r2,-4(fp)
	if (W5100.readSnSR(s) != SnSR::INIT) {
 40068b8:	e0bfff03 	ldbu	r2,-4(fp)
 40068bc:	1009883a 	mov	r4,r2
 40068c0:	40077900 	call	4007790 <_ZN10W5100Class8readSnSREh>
 40068c4:	10803fcc 	andi	r2,r2,255
 40068c8:	108004d8 	cmpnei	r2,r2,19
 40068cc:	10803fcc 	andi	r2,r2,255
 40068d0:	10000226 	beq	r2,zero,40068dc <_ZN13EthernetClass12socketListenEh+0x3c>
		return 0;
 40068d4:	0005883a 	mov	r2,zero
 40068d8:	00000506 	br	40068f0 <_ZN13EthernetClass12socketListenEh+0x50>
	}
	W5100.execCmdSn(s, Sock_LISTEN);
 40068dc:	e0bfff03 	ldbu	r2,-4(fp)
 40068e0:	01400084 	movi	r5,2
 40068e4:	1009883a 	mov	r4,r2
 40068e8:	40088fc0 	call	40088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>
	return 1;
 40068ec:	00800044 	movi	r2,1
}
 40068f0:	e037883a 	mov	sp,fp
 40068f4:	dfc00117 	ldw	ra,4(sp)
 40068f8:	df000017 	ldw	fp,0(sp)
 40068fc:	dec00204 	addi	sp,sp,8
 4006900:	f800283a 	ret

04006904 <_ZN13EthernetClass13socketConnectEhPht>:


// establish a TCP connection in Active (client) mode.
//
void EthernetClass::socketConnect(uint8_t s, uint8_t * addr, uint16_t port)
{
 4006904:	defffb04 	addi	sp,sp,-20
 4006908:	dfc00415 	stw	ra,16(sp)
 400690c:	df000315 	stw	fp,12(sp)
 4006910:	df000304 	addi	fp,sp,12
 4006914:	2007883a 	mov	r3,r4
 4006918:	e17ffe15 	stw	r5,-8(fp)
 400691c:	3005883a 	mov	r2,r6
 4006920:	e0fffd05 	stb	r3,-12(fp)
 4006924:	e0bfff0d 	sth	r2,-4(fp)
	// set destination IP
	W5100.writeSnDIPR(s, addr);
 4006928:	e0bffd03 	ldbu	r2,-12(fp)
 400692c:	e17ffe17 	ldw	r5,-8(fp)
 4006930:	1009883a 	mov	r4,r2
 4006934:	40078780 	call	4007878 <_ZN10W5100Class11writeSnDIPREhPh>
	W5100.writeSnDPORT(s, port);
 4006938:	e0bffd03 	ldbu	r2,-12(fp)
 400693c:	e0ffff0b 	ldhu	r3,-4(fp)
 4006940:	180b883a 	mov	r5,r3
 4006944:	1009883a 	mov	r4,r2
 4006948:	40078c00 	call	40078c0 <_ZN10W5100Class12writeSnDPORTEht>
	W5100.execCmdSn(s, Sock_CONNECT);
 400694c:	e0bffd03 	ldbu	r2,-12(fp)
 4006950:	01400104 	movi	r5,4
 4006954:	1009883a 	mov	r4,r2
 4006958:	40088fc0 	call	40088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
 400695c:	0001883a 	nop
 4006960:	e037883a 	mov	sp,fp
 4006964:	dfc00117 	ldw	ra,4(sp)
 4006968:	df000017 	ldw	fp,0(sp)
 400696c:	dec00204 	addi	sp,sp,8
 4006970:	f800283a 	ret

04006974 <_ZN13EthernetClass16socketDisconnectEh>:


// Gracefully disconnect a TCP connection.
//
void EthernetClass::socketDisconnect(uint8_t s)
{
 4006974:	defffd04 	addi	sp,sp,-12
 4006978:	dfc00215 	stw	ra,8(sp)
 400697c:	df000115 	stw	fp,4(sp)
 4006980:	df000104 	addi	fp,sp,4
 4006984:	2005883a 	mov	r2,r4
 4006988:	e0bfff05 	stb	r2,-4(fp)
	W5100.execCmdSn(s, Sock_DISCON);
 400698c:	e0bfff03 	ldbu	r2,-4(fp)
 4006990:	01400204 	movi	r5,8
 4006994:	1009883a 	mov	r4,r2
 4006998:	40088fc0 	call	40088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
 400699c:	0001883a 	nop
 40069a0:	e037883a 	mov	sp,fp
 40069a4:	dfc00117 	ldw	ra,4(sp)
 40069a8:	df000017 	ldw	fp,0(sp)
 40069ac:	dec00204 	addi	sp,sp,8
 40069b0:	f800283a 	ret

040069b4 <_ZL11getSnRX_RSRh>:
/*    Socket Data Receive Functions      */
/*****************************************/


static uint16_t getSnRX_RSR(uint8_t s)
{
 40069b4:	defffc04 	addi	sp,sp,-16
 40069b8:	dfc00315 	stw	ra,12(sp)
 40069bc:	df000215 	stw	fp,8(sp)
 40069c0:	df000204 	addi	fp,sp,8
 40069c4:	2005883a 	mov	r2,r4
 40069c8:	e0bfff05 	stb	r2,-4(fp)
#if 1
        uint16_t val, prev;

        prev = W5100.readSnRX_RSR(s);
 40069cc:	e0bfff03 	ldbu	r2,-4(fp)
 40069d0:	1009883a 	mov	r4,r2
 40069d4:	4007a480 	call	4007a48 <_ZN10W5100Class12readSnRX_RSREh>
 40069d8:	e0bffe0d 	sth	r2,-8(fp)
        while (1) {
                val = W5100.readSnRX_RSR(s);
 40069dc:	e0bfff03 	ldbu	r2,-4(fp)
 40069e0:	1009883a 	mov	r4,r2
 40069e4:	4007a480 	call	4007a48 <_ZN10W5100Class12readSnRX_RSREh>
 40069e8:	e0bffe8d 	sth	r2,-6(fp)
                if (val == prev) {
 40069ec:	e0fffe8b 	ldhu	r3,-6(fp)
 40069f0:	e0bffe0b 	ldhu	r2,-8(fp)
 40069f4:	1880021e 	bne	r3,r2,4006a00 <_ZL11getSnRX_RSRh+0x4c>
			return val;
 40069f8:	e0bffe8b 	ldhu	r2,-6(fp)
 40069fc:	00000306 	br	4006a0c <_ZL11getSnRX_RSRh+0x58>
		}
                prev = val;
 4006a00:	e0bffe8b 	ldhu	r2,-6(fp)
 4006a04:	e0bffe0d 	sth	r2,-8(fp)
{
#if 1
        uint16_t val, prev;

        prev = W5100.readSnRX_RSR(s);
        while (1) {
 4006a08:	003ff406 	br	40069dc <__alt_data_end+0xfc0069dc>
        }
#else
	uint16_t val = W5100.readSnRX_RSR(s);
	return val;
#endif
}
 4006a0c:	e037883a 	mov	sp,fp
 4006a10:	dfc00117 	ldw	ra,4(sp)
 4006a14:	df000017 	ldw	fp,0(sp)
 4006a18:	dec00204 	addi	sp,sp,8
 4006a1c:	f800283a 	ret

04006a20 <_ZL9read_datahtPht>:

static void read_data(uint8_t s, uint16_t src, uint8_t *dst, uint16_t len)
{
 4006a20:	defff804 	addi	sp,sp,-32
 4006a24:	dfc00715 	stw	ra,28(sp)
 4006a28:	df000615 	stw	fp,24(sp)
 4006a2c:	df000604 	addi	fp,sp,24
 4006a30:	2807883a 	mov	r3,r5
 4006a34:	e1bffe15 	stw	r6,-8(fp)
 4006a38:	3805883a 	mov	r2,r7
 4006a3c:	e13ffc05 	stb	r4,-16(fp)
 4006a40:	e0fffd0d 	sth	r3,-12(fp)
 4006a44:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t size;
	uint16_t src_mask;
	uint16_t src_ptr;

	//Serial.printf("read_data, len=%d, at:%d\n", len, src);
	src_mask = (uint16_t)src & W5100.SMASK;
 4006a48:	e0bffd0b 	ldhu	r2,-12(fp)
 4006a4c:	1081ffcc 	andi	r2,r2,2047
 4006a50:	e0bffa0d 	sth	r2,-24(fp)
	src_ptr = W5100.RBASE(s) + src_mask;
 4006a54:	e0bffc03 	ldbu	r2,-16(fp)
 4006a58:	1009883a 	mov	r4,r2
 4006a5c:	4007bbc0 	call	4007bbc <_ZN10W5100Class5RBASEEh>
 4006a60:	1007883a 	mov	r3,r2
 4006a64:	e0bffa0b 	ldhu	r2,-24(fp)
 4006a68:	1885883a 	add	r2,r3,r2
 4006a6c:	e0bffa8d 	sth	r2,-22(fp)

	if (W5100.hasOffsetAddressMapping() || src_mask + len <= W5100.SSIZE) {
 4006a70:	4007c0c0 	call	4007c0c <_ZN10W5100Class23hasOffsetAddressMappingEv>
 4006a74:	10803fcc 	andi	r2,r2,255
 4006a78:	1000051e 	bne	r2,zero,4006a90 <_ZL9read_datahtPht+0x70>
 4006a7c:	e0fffa0b 	ldhu	r3,-24(fp)
 4006a80:	e0bfff0b 	ldhu	r2,-4(fp)
 4006a84:	1885883a 	add	r2,r3,r2
 4006a88:	10820048 	cmpgei	r2,r2,2049
 4006a8c:	1000021e 	bne	r2,zero,4006a98 <_ZL9read_datahtPht+0x78>
 4006a90:	00800044 	movi	r2,1
 4006a94:	00000106 	br	4006a9c <_ZL9read_datahtPht+0x7c>
 4006a98:	0005883a 	mov	r2,zero
 4006a9c:	10803fcc 	andi	r2,r2,255
 4006aa0:	10000726 	beq	r2,zero,4006ac0 <_ZL9read_datahtPht+0xa0>
		W5100.read(src_ptr, dst, len);
 4006aa4:	e0bffa8b 	ldhu	r2,-22(fp)
 4006aa8:	e0ffff0b 	ldhu	r3,-4(fp)
 4006aac:	180d883a 	mov	r6,r3
 4006ab0:	e17ffe17 	ldw	r5,-8(fp)
 4006ab4:	1009883a 	mov	r4,r2
 4006ab8:	40086a80 	call	40086a8 <_ZN10W5100Class4readEtPht>
		size = W5100.SSIZE - src_mask;
		W5100.read(src_ptr, dst, size);
		dst += size;
		W5100.read(W5100.RBASE(s), dst, len - size);
	}
}
 4006abc:	00001906 	br	4006b24 <_ZL9read_datahtPht+0x104>
	src_ptr = W5100.RBASE(s) + src_mask;

	if (W5100.hasOffsetAddressMapping() || src_mask + len <= W5100.SSIZE) {
		W5100.read(src_ptr, dst, len);
	} else {
		size = W5100.SSIZE - src_mask;
 4006ac0:	e0bffa0b 	ldhu	r2,-24(fp)
 4006ac4:	00c20004 	movi	r3,2048
 4006ac8:	1885c83a 	sub	r2,r3,r2
 4006acc:	e0bffb0d 	sth	r2,-20(fp)
		W5100.read(src_ptr, dst, size);
 4006ad0:	e0bffa8b 	ldhu	r2,-22(fp)
 4006ad4:	e0fffb0b 	ldhu	r3,-20(fp)
 4006ad8:	180d883a 	mov	r6,r3
 4006adc:	e17ffe17 	ldw	r5,-8(fp)
 4006ae0:	1009883a 	mov	r4,r2
 4006ae4:	40086a80 	call	40086a8 <_ZN10W5100Class4readEtPht>
		dst += size;
 4006ae8:	e0bffb0b 	ldhu	r2,-20(fp)
 4006aec:	e0fffe17 	ldw	r3,-8(fp)
 4006af0:	1885883a 	add	r2,r3,r2
 4006af4:	e0bffe15 	stw	r2,-8(fp)
		W5100.read(W5100.RBASE(s), dst, len - size);
 4006af8:	e0bffc03 	ldbu	r2,-16(fp)
 4006afc:	1009883a 	mov	r4,r2
 4006b00:	4007bbc0 	call	4007bbc <_ZN10W5100Class5RBASEEh>
 4006b04:	113fffcc 	andi	r4,r2,65535
 4006b08:	e0ffff0b 	ldhu	r3,-4(fp)
 4006b0c:	e0bffb0b 	ldhu	r2,-20(fp)
 4006b10:	1885c83a 	sub	r2,r3,r2
 4006b14:	10bfffcc 	andi	r2,r2,65535
 4006b18:	100d883a 	mov	r6,r2
 4006b1c:	e17ffe17 	ldw	r5,-8(fp)
 4006b20:	40086a80 	call	40086a8 <_ZN10W5100Class4readEtPht>
	}
}
 4006b24:	0001883a 	nop
 4006b28:	e037883a 	mov	sp,fp
 4006b2c:	dfc00117 	ldw	ra,4(sp)
 4006b30:	df000017 	ldw	fp,0(sp)
 4006b34:	dec00204 	addi	sp,sp,8
 4006b38:	f800283a 	ret

04006b3c <_ZN13EthernetClass10socketRecvEhPhs>:

// Receive data.  Returns size, or -1 for no data, or 0 if connection closed
//
int EthernetClass::socketRecv(uint8_t s, uint8_t *buf, int16_t len)
{
 4006b3c:	defff804 	addi	sp,sp,-32
 4006b40:	dfc00715 	stw	ra,28(sp)
 4006b44:	df000615 	stw	fp,24(sp)
 4006b48:	df000604 	addi	fp,sp,24
 4006b4c:	2007883a 	mov	r3,r4
 4006b50:	e17ffe15 	stw	r5,-8(fp)
 4006b54:	3005883a 	mov	r2,r6
 4006b58:	e0fffd05 	stb	r3,-12(fp)
 4006b5c:	e0bfff0d 	sth	r2,-4(fp)
	// Check how much data is available
	int ret = state[s].RX_RSR;
 4006b60:	e0fffd03 	ldbu	r3,-12(fp)
 4006b64:	008100f4 	movhi	r2,1027
 4006b68:	1096d404 	addi	r2,r2,23376
 4006b6c:	180690fa 	slli	r3,r3,3
 4006b70:	10c5883a 	add	r2,r2,r3
 4006b74:	1080000b 	ldhu	r2,0(r2)
 4006b78:	10bfffcc 	andi	r2,r2,65535
 4006b7c:	e0bffa15 	stw	r2,-24(fp)
	if (ret < len) {
 4006b80:	e0bfff0f 	ldh	r2,-4(fp)
 4006b84:	e0fffa17 	ldw	r3,-24(fp)
 4006b88:	1880170e 	bge	r3,r2,4006be8 <_ZN13EthernetClass10socketRecvEhPhs+0xac>
		uint16_t rsr = getSnRX_RSR(s);
 4006b8c:	e0bffd03 	ldbu	r2,-12(fp)
 4006b90:	1009883a 	mov	r4,r2
 4006b94:	40069b40 	call	40069b4 <_ZL11getSnRX_RSRh>
 4006b98:	e0bffb0d 	sth	r2,-20(fp)
		ret = rsr - state[s].RX_inc;
 4006b9c:	e0fffb0b 	ldhu	r3,-20(fp)
 4006ba0:	e13ffd03 	ldbu	r4,-12(fp)
 4006ba4:	008100f4 	movhi	r2,1027
 4006ba8:	1096d404 	addi	r2,r2,23376
 4006bac:	200890fa 	slli	r4,r4,3
 4006bb0:	1105883a 	add	r2,r2,r4
 4006bb4:	10800184 	addi	r2,r2,6
 4006bb8:	10800003 	ldbu	r2,0(r2)
 4006bbc:	10803fcc 	andi	r2,r2,255
 4006bc0:	1885c83a 	sub	r2,r3,r2
 4006bc4:	e0bffa15 	stw	r2,-24(fp)
		state[s].RX_RSR = ret;
 4006bc8:	e0fffd03 	ldbu	r3,-12(fp)
 4006bcc:	e0bffa17 	ldw	r2,-24(fp)
 4006bd0:	1009883a 	mov	r4,r2
 4006bd4:	008100f4 	movhi	r2,1027
 4006bd8:	1096d404 	addi	r2,r2,23376
 4006bdc:	180690fa 	slli	r3,r3,3
 4006be0:	10c5883a 	add	r2,r2,r3
 4006be4:	1100000d 	sth	r4,0(r2)
		//Serial.printf("Sock_RECV, RX_RSR=%d, RX_inc=%d\n", ret, state[s].RX_inc);
	}
	if (ret == 0) {
 4006be8:	e0bffa17 	ldw	r2,-24(fp)
 4006bec:	1000111e 	bne	r2,zero,4006c34 <_ZN13EthernetClass10socketRecvEhPhs+0xf8>
		// No data available.
		uint8_t status = W5100.readSnSR(s);
 4006bf0:	e0bffd03 	ldbu	r2,-12(fp)
 4006bf4:	1009883a 	mov	r4,r2
 4006bf8:	40077900 	call	4007790 <_ZN10W5100Class8readSnSREh>
 4006bfc:	e0bffb85 	stb	r2,-18(fp)
		if ( status == SnSR::LISTEN || status == SnSR::CLOSED ||
 4006c00:	e0bffb83 	ldbu	r2,-18(fp)
 4006c04:	10800520 	cmpeqi	r2,r2,20
 4006c08:	1000051e 	bne	r2,zero,4006c20 <_ZN13EthernetClass10socketRecvEhPhs+0xe4>
 4006c0c:	e0bffb83 	ldbu	r2,-18(fp)
 4006c10:	10000326 	beq	r2,zero,4006c20 <_ZN13EthernetClass10socketRecvEhPhs+0xe4>
 4006c14:	e0bffb83 	ldbu	r2,-18(fp)
 4006c18:	10800718 	cmpnei	r2,r2,28
 4006c1c:	1000021e 	bne	r2,zero,4006c28 <_ZN13EthernetClass10socketRecvEhPhs+0xec>
		  status == SnSR::CLOSE_WAIT ) {
			// The remote end has closed its side of the connection,
			// so this is the eof state
			ret = 0;
 4006c20:	e03ffa15 	stw	zero,-24(fp)
 4006c24:	00006706 	br	4006dc4 <_ZN13EthernetClass10socketRecvEhPhs+0x288>
		} else {
			// The connection is still up, but there's no data waiting to be read
			ret = -1;
 4006c28:	00bfffc4 	movi	r2,-1
 4006c2c:	e0bffa15 	stw	r2,-24(fp)
 4006c30:	00006406 	br	4006dc4 <_ZN13EthernetClass10socketRecvEhPhs+0x288>
		}
	} else {
		if (ret > len) ret = len; // more data available than buffer length
 4006c34:	e0ffff0f 	ldh	r3,-4(fp)
 4006c38:	e0bffa17 	ldw	r2,-24(fp)
 4006c3c:	1880020e 	bge	r3,r2,4006c48 <_ZN13EthernetClass10socketRecvEhPhs+0x10c>
 4006c40:	e0bfff0f 	ldh	r2,-4(fp)
 4006c44:	e0bffa15 	stw	r2,-24(fp)
		uint16_t ptr = state[s].RX_RD;
 4006c48:	e0fffd03 	ldbu	r3,-12(fp)
 4006c4c:	008100f4 	movhi	r2,1027
 4006c50:	1096d404 	addi	r2,r2,23376
 4006c54:	180690fa 	slli	r3,r3,3
 4006c58:	10c5883a 	add	r2,r2,r3
 4006c5c:	10800084 	addi	r2,r2,2
 4006c60:	1080000b 	ldhu	r2,0(r2)
 4006c64:	e0bffc0d 	sth	r2,-16(fp)
		if (buf) read_data(s, ptr, buf, ret);
 4006c68:	e0bffe17 	ldw	r2,-8(fp)
 4006c6c:	10000926 	beq	r2,zero,4006c94 <_ZN13EthernetClass10socketRecvEhPhs+0x158>
 4006c70:	e0fffd03 	ldbu	r3,-12(fp)
 4006c74:	e13ffc0b 	ldhu	r4,-16(fp)
 4006c78:	e0bffa17 	ldw	r2,-24(fp)
 4006c7c:	10bfffcc 	andi	r2,r2,65535
 4006c80:	100f883a 	mov	r7,r2
 4006c84:	e1bffe17 	ldw	r6,-8(fp)
 4006c88:	200b883a 	mov	r5,r4
 4006c8c:	1809883a 	mov	r4,r3
 4006c90:	4006a200 	call	4006a20 <_ZL9read_datahtPht>
		ptr += ret;
 4006c94:	e0bffa17 	ldw	r2,-24(fp)
 4006c98:	1007883a 	mov	r3,r2
 4006c9c:	e0bffc0b 	ldhu	r2,-16(fp)
 4006ca0:	1885883a 	add	r2,r3,r2
 4006ca4:	e0bffc0d 	sth	r2,-16(fp)
		state[s].RX_RD = ptr;
 4006ca8:	e0fffd03 	ldbu	r3,-12(fp)
 4006cac:	008100f4 	movhi	r2,1027
 4006cb0:	1096d404 	addi	r2,r2,23376
 4006cb4:	180690fa 	slli	r3,r3,3
 4006cb8:	10c5883a 	add	r2,r2,r3
 4006cbc:	10800084 	addi	r2,r2,2
 4006cc0:	e0fffc0b 	ldhu	r3,-16(fp)
 4006cc4:	10c0000d 	sth	r3,0(r2)
		state[s].RX_RSR -= ret;
 4006cc8:	e0fffd03 	ldbu	r3,-12(fp)
 4006ccc:	e13ffd03 	ldbu	r4,-12(fp)
 4006cd0:	008100f4 	movhi	r2,1027
 4006cd4:	1096d404 	addi	r2,r2,23376
 4006cd8:	200890fa 	slli	r4,r4,3
 4006cdc:	1105883a 	add	r2,r2,r4
 4006ce0:	1080000b 	ldhu	r2,0(r2)
 4006ce4:	e13ffa17 	ldw	r4,-24(fp)
 4006ce8:	1105c83a 	sub	r2,r2,r4
 4006cec:	1009883a 	mov	r4,r2
 4006cf0:	008100f4 	movhi	r2,1027
 4006cf4:	1096d404 	addi	r2,r2,23376
 4006cf8:	180690fa 	slli	r3,r3,3
 4006cfc:	10c5883a 	add	r2,r2,r3
 4006d00:	1100000d 	sth	r4,0(r2)
		uint16_t inc = state[s].RX_inc + ret;
 4006d04:	e0fffd03 	ldbu	r3,-12(fp)
 4006d08:	008100f4 	movhi	r2,1027
 4006d0c:	1096d404 	addi	r2,r2,23376
 4006d10:	180690fa 	slli	r3,r3,3
 4006d14:	10c5883a 	add	r2,r2,r3
 4006d18:	10800184 	addi	r2,r2,6
 4006d1c:	10800003 	ldbu	r2,0(r2)
 4006d20:	10803fcc 	andi	r2,r2,255
 4006d24:	e0fffa17 	ldw	r3,-24(fp)
 4006d28:	10c5883a 	add	r2,r2,r3
 4006d2c:	e0bffc8d 	sth	r2,-14(fp)
		if (inc >= 250 || state[s].RX_RSR == 0) {
 4006d30:	e0bffc8b 	ldhu	r2,-14(fp)
 4006d34:	10803ea8 	cmpgeui	r2,r2,250
 4006d38:	1000081e 	bne	r2,zero,4006d5c <_ZN13EthernetClass10socketRecvEhPhs+0x220>
 4006d3c:	e0fffd03 	ldbu	r3,-12(fp)
 4006d40:	008100f4 	movhi	r2,1027
 4006d44:	1096d404 	addi	r2,r2,23376
 4006d48:	180690fa 	slli	r3,r3,3
 4006d4c:	10c5883a 	add	r2,r2,r3
 4006d50:	1080000b 	ldhu	r2,0(r2)
 4006d54:	10bfffcc 	andi	r2,r2,65535
 4006d58:	1000111e 	bne	r2,zero,4006da0 <_ZN13EthernetClass10socketRecvEhPhs+0x264>
			state[s].RX_inc = 0;
 4006d5c:	e0fffd03 	ldbu	r3,-12(fp)
 4006d60:	008100f4 	movhi	r2,1027
 4006d64:	1096d404 	addi	r2,r2,23376
 4006d68:	180690fa 	slli	r3,r3,3
 4006d6c:	10c5883a 	add	r2,r2,r3
 4006d70:	10800184 	addi	r2,r2,6
 4006d74:	10000005 	stb	zero,0(r2)
			W5100.writeSnRX_RD(s, ptr);
 4006d78:	e0bffd03 	ldbu	r2,-12(fp)
 4006d7c:	e0fffc0b 	ldhu	r3,-16(fp)
 4006d80:	180b883a 	mov	r5,r3
 4006d84:	1009883a 	mov	r4,r2
 4006d88:	4007aa80 	call	4007aa8 <_ZN10W5100Class12writeSnRX_RDEht>
			W5100.execCmdSn(s, Sock_RECV);
 4006d8c:	e0bffd03 	ldbu	r2,-12(fp)
 4006d90:	01401004 	movi	r5,64
 4006d94:	1009883a 	mov	r4,r2
 4006d98:	40088fc0 	call	40088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>
 4006d9c:	00000906 	br	4006dc4 <_ZN13EthernetClass10socketRecvEhPhs+0x288>
			//Serial.printf("Sock_RECV cmd, RX_RD=%d, RX_RSR=%d\n",
			//  state[s].RX_RD, state[s].RX_RSR);
		} else {
			state[s].RX_inc = inc;
 4006da0:	e0fffd03 	ldbu	r3,-12(fp)
 4006da4:	e0bffc8b 	ldhu	r2,-14(fp)
 4006da8:	1009883a 	mov	r4,r2
 4006dac:	008100f4 	movhi	r2,1027
 4006db0:	1096d404 	addi	r2,r2,23376
 4006db4:	180690fa 	slli	r3,r3,3
 4006db8:	10c5883a 	add	r2,r2,r3
 4006dbc:	10800184 	addi	r2,r2,6
 4006dc0:	11000005 	stb	r4,0(r2)
		}
	}
	//Serial.printf("socketRecv, ret=%d\n", ret);
	return ret;
 4006dc4:	e0bffa17 	ldw	r2,-24(fp)
}
 4006dc8:	e037883a 	mov	sp,fp
 4006dcc:	dfc00117 	ldw	ra,4(sp)
 4006dd0:	df000017 	ldw	fp,0(sp)
 4006dd4:	dec00204 	addi	sp,sp,8
 4006dd8:	f800283a 	ret

04006ddc <_ZN13EthernetClass19socketRecvAvailableEh>:

uint16_t EthernetClass::socketRecvAvailable(uint8_t s)
{
 4006ddc:	defffc04 	addi	sp,sp,-16
 4006de0:	dfc00315 	stw	ra,12(sp)
 4006de4:	df000215 	stw	fp,8(sp)
 4006de8:	df000204 	addi	fp,sp,8
 4006dec:	2005883a 	mov	r2,r4
 4006df0:	e0bfff05 	stb	r2,-4(fp)
	uint16_t ret = state[s].RX_RSR;
 4006df4:	e0ffff03 	ldbu	r3,-4(fp)
 4006df8:	008100f4 	movhi	r2,1027
 4006dfc:	1096d404 	addi	r2,r2,23376
 4006e00:	180690fa 	slli	r3,r3,3
 4006e04:	10c5883a 	add	r2,r2,r3
 4006e08:	1080000b 	ldhu	r2,0(r2)
 4006e0c:	e0bffe0d 	sth	r2,-8(fp)
	if (ret == 0) {
 4006e10:	e0bffe0b 	ldhu	r2,-8(fp)
 4006e14:	1000161e 	bne	r2,zero,4006e70 <_ZN13EthernetClass19socketRecvAvailableEh+0x94>
		uint16_t rsr = getSnRX_RSR(s);
 4006e18:	e0bfff03 	ldbu	r2,-4(fp)
 4006e1c:	1009883a 	mov	r4,r2
 4006e20:	40069b40 	call	40069b4 <_ZL11getSnRX_RSRh>
 4006e24:	e0bffe8d 	sth	r2,-6(fp)
		ret = rsr - state[s].RX_inc;
 4006e28:	e0ffff03 	ldbu	r3,-4(fp)
 4006e2c:	008100f4 	movhi	r2,1027
 4006e30:	1096d404 	addi	r2,r2,23376
 4006e34:	180690fa 	slli	r3,r3,3
 4006e38:	10c5883a 	add	r2,r2,r3
 4006e3c:	10800184 	addi	r2,r2,6
 4006e40:	10800003 	ldbu	r2,0(r2)
 4006e44:	10803fcc 	andi	r2,r2,255
 4006e48:	e0fffe8b 	ldhu	r3,-6(fp)
 4006e4c:	1885c83a 	sub	r2,r3,r2
 4006e50:	e0bffe0d 	sth	r2,-8(fp)
		state[s].RX_RSR = ret;
 4006e54:	e0ffff03 	ldbu	r3,-4(fp)
 4006e58:	008100f4 	movhi	r2,1027
 4006e5c:	1096d404 	addi	r2,r2,23376
 4006e60:	180690fa 	slli	r3,r3,3
 4006e64:	10c5883a 	add	r2,r2,r3
 4006e68:	e0fffe0b 	ldhu	r3,-8(fp)
 4006e6c:	10c0000d 	sth	r3,0(r2)
		//Serial.printf("sockRecvAvailable s=%d, RX_RSR=%d\n", s, ret);
	}
	return ret;
 4006e70:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4006e74:	e037883a 	mov	sp,fp
 4006e78:	dfc00117 	ldw	ra,4(sp)
 4006e7c:	df000017 	ldw	fp,0(sp)
 4006e80:	dec00204 	addi	sp,sp,8
 4006e84:	f800283a 	ret

04006e88 <_ZN13EthernetClass10socketPeekEh>:

// get the first byte in the receive queue (no checking)
//
uint8_t EthernetClass::socketPeek(uint8_t s)
{
 4006e88:	defffb04 	addi	sp,sp,-20
 4006e8c:	dfc00415 	stw	ra,16(sp)
 4006e90:	df000315 	stw	fp,12(sp)
 4006e94:	dc000215 	stw	r16,8(sp)
 4006e98:	df000304 	addi	fp,sp,12
 4006e9c:	2005883a 	mov	r2,r4
 4006ea0:	e0bffe05 	stb	r2,-8(fp)
	uint8_t b;
	uint16_t ptr = state[s].RX_RD;
 4006ea4:	e0fffe03 	ldbu	r3,-8(fp)
 4006ea8:	008100f4 	movhi	r2,1027
 4006eac:	1096d404 	addi	r2,r2,23376
 4006eb0:	180690fa 	slli	r3,r3,3
 4006eb4:	10c5883a 	add	r2,r2,r3
 4006eb8:	10800084 	addi	r2,r2,2
 4006ebc:	1080000b 	ldhu	r2,0(r2)
 4006ec0:	e0bffd0d 	sth	r2,-12(fp)
	W5100.read((ptr & W5100.SMASK) + W5100.RBASE(s), &b, 1);
 4006ec4:	e0bffd0b 	ldhu	r2,-12(fp)
 4006ec8:	1081ffcc 	andi	r2,r2,2047
 4006ecc:	1021883a 	mov	r16,r2
 4006ed0:	e0bffe03 	ldbu	r2,-8(fp)
 4006ed4:	1009883a 	mov	r4,r2
 4006ed8:	4007bbc0 	call	4007bbc <_ZN10W5100Class5RBASEEh>
 4006edc:	8085883a 	add	r2,r16,r2
 4006ee0:	10bfffcc 	andi	r2,r2,65535
 4006ee4:	e0fffd84 	addi	r3,fp,-10
 4006ee8:	01800044 	movi	r6,1
 4006eec:	180b883a 	mov	r5,r3
 4006ef0:	1009883a 	mov	r4,r2
 4006ef4:	40086a80 	call	40086a8 <_ZN10W5100Class4readEtPht>
	return b;
 4006ef8:	e0bffd83 	ldbu	r2,-10(fp)
}
 4006efc:	e6ffff04 	addi	sp,fp,-4
 4006f00:	dfc00217 	ldw	ra,8(sp)
 4006f04:	df000117 	ldw	fp,4(sp)
 4006f08:	dc000017 	ldw	r16,0(sp)
 4006f0c:	dec00304 	addi	sp,sp,12
 4006f10:	f800283a 	ret

04006f14 <_ZL11getSnTX_FSRh>:
/*****************************************/
/*    Socket Data Transmit Functions     */
/*****************************************/

static uint16_t getSnTX_FSR(uint8_t s)
{
 4006f14:	defffc04 	addi	sp,sp,-16
 4006f18:	dfc00315 	stw	ra,12(sp)
 4006f1c:	df000215 	stw	fp,8(sp)
 4006f20:	df000204 	addi	fp,sp,8
 4006f24:	2005883a 	mov	r2,r4
 4006f28:	e0bfff05 	stb	r2,-4(fp)
        uint16_t val, prev;

        prev = W5100.readSnTX_FSR(s);
 4006f2c:	e0bfff03 	ldbu	r2,-4(fp)
 4006f30:	1009883a 	mov	r4,r2
 4006f34:	40079240 	call	4007924 <_ZN10W5100Class12readSnTX_FSREh>
 4006f38:	e0bffe0d 	sth	r2,-8(fp)
        while (1) {
                val = W5100.readSnTX_FSR(s);
 4006f3c:	e0bfff03 	ldbu	r2,-4(fp)
 4006f40:	1009883a 	mov	r4,r2
 4006f44:	40079240 	call	4007924 <_ZN10W5100Class12readSnTX_FSREh>
 4006f48:	e0bffe8d 	sth	r2,-6(fp)
                if (val == prev) {
 4006f4c:	e0fffe8b 	ldhu	r3,-6(fp)
 4006f50:	e0bffe0b 	ldhu	r2,-8(fp)
 4006f54:	18800a1e 	bne	r3,r2,4006f80 <_ZL11getSnTX_FSRh+0x6c>
			state[s].TX_FSR = val;
 4006f58:	e0ffff03 	ldbu	r3,-4(fp)
 4006f5c:	008100f4 	movhi	r2,1027
 4006f60:	1096d404 	addi	r2,r2,23376
 4006f64:	180690fa 	slli	r3,r3,3
 4006f68:	10c5883a 	add	r2,r2,r3
 4006f6c:	10800104 	addi	r2,r2,4
 4006f70:	e0fffe8b 	ldhu	r3,-6(fp)
 4006f74:	10c0000d 	sth	r3,0(r2)
			return val;
 4006f78:	e0bffe8b 	ldhu	r2,-6(fp)
 4006f7c:	00000306 	br	4006f8c <_ZL11getSnTX_FSRh+0x78>
		}
                prev = val;
 4006f80:	e0bffe8b 	ldhu	r2,-6(fp)
 4006f84:	e0bffe0d 	sth	r2,-8(fp)
static uint16_t getSnTX_FSR(uint8_t s)
{
        uint16_t val, prev;

        prev = W5100.readSnTX_FSR(s);
        while (1) {
 4006f88:	003fec06 	br	4006f3c <__alt_data_end+0xfc006f3c>
			state[s].TX_FSR = val;
			return val;
		}
                prev = val;
        }
}
 4006f8c:	e037883a 	mov	sp,fp
 4006f90:	dfc00117 	ldw	ra,4(sp)
 4006f94:	df000017 	ldw	fp,0(sp)
 4006f98:	dec00204 	addi	sp,sp,8
 4006f9c:	f800283a 	ret

04006fa0 <_ZL10write_datahtPKht>:


static void write_data(uint8_t s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
 4006fa0:	defff804 	addi	sp,sp,-32
 4006fa4:	dfc00715 	stw	ra,28(sp)
 4006fa8:	df000615 	stw	fp,24(sp)
 4006fac:	df000604 	addi	fp,sp,24
 4006fb0:	2807883a 	mov	r3,r5
 4006fb4:	e1bffe15 	stw	r6,-8(fp)
 4006fb8:	3805883a 	mov	r2,r7
 4006fbc:	e13ffc05 	stb	r4,-16(fp)
 4006fc0:	e0fffd0d 	sth	r3,-12(fp)
 4006fc4:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t ptr = W5100.readSnTX_WR(s);
 4006fc8:	e0bffc03 	ldbu	r2,-16(fp)
 4006fcc:	1009883a 	mov	r4,r2
 4006fd0:	40079e80 	call	40079e8 <_ZN10W5100Class11readSnTX_WREh>
 4006fd4:	e0bffa0d 	sth	r2,-24(fp)
	ptr += data_offset;
 4006fd8:	e0fffa0b 	ldhu	r3,-24(fp)
 4006fdc:	e0bffd0b 	ldhu	r2,-12(fp)
 4006fe0:	1885883a 	add	r2,r3,r2
 4006fe4:	e0bffa0d 	sth	r2,-24(fp)
	uint16_t offset = ptr & W5100.SMASK;
 4006fe8:	e0bffa0b 	ldhu	r2,-24(fp)
 4006fec:	1081ffcc 	andi	r2,r2,2047
 4006ff0:	e0bffa8d 	sth	r2,-22(fp)
	uint16_t dstAddr = offset + W5100.SBASE(s);
 4006ff4:	e0bffc03 	ldbu	r2,-16(fp)
 4006ff8:	1009883a 	mov	r4,r2
 4006ffc:	4007b6c0 	call	4007b6c <_ZN10W5100Class5SBASEEh>
 4007000:	1007883a 	mov	r3,r2
 4007004:	e0bffa8b 	ldhu	r2,-22(fp)
 4007008:	1885883a 	add	r2,r3,r2
 400700c:	e0bffb0d 	sth	r2,-20(fp)

	if (W5100.hasOffsetAddressMapping() || offset + len <= W5100.SSIZE) {
 4007010:	4007c0c0 	call	4007c0c <_ZN10W5100Class23hasOffsetAddressMappingEv>
 4007014:	10803fcc 	andi	r2,r2,255
 4007018:	1000051e 	bne	r2,zero,4007030 <_ZL10write_datahtPKht+0x90>
 400701c:	e0fffa8b 	ldhu	r3,-22(fp)
 4007020:	e0bfff0b 	ldhu	r2,-4(fp)
 4007024:	1885883a 	add	r2,r3,r2
 4007028:	10820048 	cmpgei	r2,r2,2049
 400702c:	1000021e 	bne	r2,zero,4007038 <_ZL10write_datahtPKht+0x98>
 4007030:	00800044 	movi	r2,1
 4007034:	00000106 	br	400703c <_ZL10write_datahtPKht+0x9c>
 4007038:	0005883a 	mov	r2,zero
 400703c:	10803fcc 	andi	r2,r2,255
 4007040:	10000726 	beq	r2,zero,4007060 <_ZL10write_datahtPKht+0xc0>
		W5100.write(dstAddr, data, len);
 4007044:	e0bffb0b 	ldhu	r2,-20(fp)
 4007048:	e0ffff0b 	ldhu	r3,-4(fp)
 400704c:	180d883a 	mov	r6,r3
 4007050:	e17ffe17 	ldw	r5,-8(fp)
 4007054:	1009883a 	mov	r4,r2
 4007058:	40085040 	call	4008504 <_ZN10W5100Class5writeEtPKht>
 400705c:	00001706 	br	40070bc <_ZL10write_datahtPKht+0x11c>
	} else {
		// Wrap around circular buffer
		uint16_t size = W5100.SSIZE - offset;
 4007060:	e0bffa8b 	ldhu	r2,-22(fp)
 4007064:	00c20004 	movi	r3,2048
 4007068:	1885c83a 	sub	r2,r3,r2
 400706c:	e0bffb8d 	sth	r2,-18(fp)
		W5100.write(dstAddr, data, size);
 4007070:	e0bffb0b 	ldhu	r2,-20(fp)
 4007074:	e0fffb8b 	ldhu	r3,-18(fp)
 4007078:	180d883a 	mov	r6,r3
 400707c:	e17ffe17 	ldw	r5,-8(fp)
 4007080:	1009883a 	mov	r4,r2
 4007084:	40085040 	call	4008504 <_ZN10W5100Class5writeEtPKht>
		W5100.write(W5100.SBASE(s), data + size, len - size);
 4007088:	e0bffc03 	ldbu	r2,-16(fp)
 400708c:	1009883a 	mov	r4,r2
 4007090:	4007b6c0 	call	4007b6c <_ZN10W5100Class5SBASEEh>
 4007094:	113fffcc 	andi	r4,r2,65535
 4007098:	e0bffb8b 	ldhu	r2,-18(fp)
 400709c:	e0fffe17 	ldw	r3,-8(fp)
 40070a0:	188b883a 	add	r5,r3,r2
 40070a4:	e0ffff0b 	ldhu	r3,-4(fp)
 40070a8:	e0bffb8b 	ldhu	r2,-18(fp)
 40070ac:	1885c83a 	sub	r2,r3,r2
 40070b0:	10bfffcc 	andi	r2,r2,65535
 40070b4:	100d883a 	mov	r6,r2
 40070b8:	40085040 	call	4008504 <_ZN10W5100Class5writeEtPKht>
	}
	ptr += len;
 40070bc:	e0fffa0b 	ldhu	r3,-24(fp)
 40070c0:	e0bfff0b 	ldhu	r2,-4(fp)
 40070c4:	1885883a 	add	r2,r3,r2
 40070c8:	e0bffa0d 	sth	r2,-24(fp)
	W5100.writeSnTX_WR(s, ptr);
 40070cc:	e0bffc03 	ldbu	r2,-16(fp)
 40070d0:	e0fffa0b 	ldhu	r3,-24(fp)
 40070d4:	180b883a 	mov	r5,r3
 40070d8:	1009883a 	mov	r4,r2
 40070dc:	40079840 	call	4007984 <_ZN10W5100Class12writeSnTX_WREht>
}
 40070e0:	0001883a 	nop
 40070e4:	e037883a 	mov	sp,fp
 40070e8:	dfc00117 	ldw	ra,4(sp)
 40070ec:	df000017 	ldw	fp,0(sp)
 40070f0:	dec00204 	addi	sp,sp,8
 40070f4:	f800283a 	ret

040070f8 <_ZN13EthernetClass10socketSendEhPKht>:
/**
 * @brief	This function used to send the data in TCP mode
 * @return	1 for success else 0.
 */
uint16_t EthernetClass::socketSend(uint8_t s, const uint8_t * buf, uint16_t len)
{
 40070f8:	defff904 	addi	sp,sp,-28
 40070fc:	dfc00615 	stw	ra,24(sp)
 4007100:	df000515 	stw	fp,20(sp)
 4007104:	df000504 	addi	fp,sp,20
 4007108:	2007883a 	mov	r3,r4
 400710c:	e17ffe15 	stw	r5,-8(fp)
 4007110:	3005883a 	mov	r2,r6
 4007114:	e0fffd05 	stb	r3,-12(fp)
 4007118:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t status=0;
 400711c:	e03ffb85 	stb	zero,-18(fp)
	uint16_t ret=0;
 4007120:	e03ffb0d 	sth	zero,-20(fp)
	uint16_t freesize=0;
 4007124:	e03ffc0d 	sth	zero,-16(fp)

	if (len > W5100.SSIZE) {
 4007128:	e0bfff0b 	ldhu	r2,-4(fp)
 400712c:	10820070 	cmpltui	r2,r2,2049
 4007130:	1000031e 	bne	r2,zero,4007140 <_ZN13EthernetClass10socketSendEhPKht+0x48>
		ret = W5100.SSIZE; // check size not to exceed MAX size.
 4007134:	00820004 	movi	r2,2048
 4007138:	e0bffb0d 	sth	r2,-20(fp)
 400713c:	00000206 	br	4007148 <_ZN13EthernetClass10socketSendEhPKht+0x50>
	} else {
		ret = len;
 4007140:	e0bfff0b 	ldhu	r2,-4(fp)
 4007144:	e0bffb0d 	sth	r2,-20(fp)
	}

	// if freebuf is available, start.
	do {
		freesize = getSnTX_FSR(s);
 4007148:	e0bffd03 	ldbu	r2,-12(fp)
 400714c:	1009883a 	mov	r4,r2
 4007150:	4006f140 	call	4006f14 <_ZL11getSnTX_FSRh>
 4007154:	e0bffc0d 	sth	r2,-16(fp)
		status = W5100.readSnSR(s);
 4007158:	e0bffd03 	ldbu	r2,-12(fp)
 400715c:	1009883a 	mov	r4,r2
 4007160:	40077900 	call	4007790 <_ZN10W5100Class8readSnSREh>
 4007164:	e0bffb85 	stb	r2,-18(fp)
		if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT)) {
 4007168:	e0bffb83 	ldbu	r2,-18(fp)
 400716c:	108005e0 	cmpeqi	r2,r2,23
 4007170:	1000051e 	bne	r2,zero,4007188 <_ZN13EthernetClass10socketSendEhPKht+0x90>
 4007174:	e0bffb83 	ldbu	r2,-18(fp)
 4007178:	10800720 	cmpeqi	r2,r2,28
 400717c:	1000021e 	bne	r2,zero,4007188 <_ZN13EthernetClass10socketSendEhPKht+0x90>
			ret = 0;
 4007180:	e03ffb0d 	sth	zero,-20(fp)
			break;
 4007184:	00000406 	br	4007198 <_ZN13EthernetClass10socketSendEhPKht+0xa0>
		}
		yield();
	} while (freesize < ret);
 4007188:	e0fffc0b 	ldhu	r3,-16(fp)
 400718c:	e0bffb0b 	ldhu	r2,-20(fp)
 4007190:	1880012e 	bgeu	r3,r2,4007198 <_ZN13EthernetClass10socketSendEhPKht+0xa0>
	} else {
		ret = len;
	}

	// if freebuf is available, start.
	do {
 4007194:	003fec06 	br	4007148 <__alt_data_end+0xfc007148>
		}
		yield();
	} while (freesize < ret);

	// copy data
	write_data(s, 0, (uint8_t *)buf, ret);
 4007198:	e0bffd03 	ldbu	r2,-12(fp)
 400719c:	e0fffb0b 	ldhu	r3,-20(fp)
 40071a0:	180f883a 	mov	r7,r3
 40071a4:	e1bffe17 	ldw	r6,-8(fp)
 40071a8:	000b883a 	mov	r5,zero
 40071ac:	1009883a 	mov	r4,r2
 40071b0:	4006fa00 	call	4006fa0 <_ZL10write_datahtPKht>
	W5100.execCmdSn(s, Sock_SEND);
 40071b4:	e0bffd03 	ldbu	r2,-12(fp)
 40071b8:	01400804 	movi	r5,32
 40071bc:	1009883a 	mov	r4,r2
 40071c0:	40088fc0 	call	40088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>

	/* +2008.01 bj */
	while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) {
 40071c4:	e0bffd03 	ldbu	r2,-12(fp)
 40071c8:	1009883a 	mov	r4,r2
 40071cc:	40077540 	call	4007754 <_ZN10W5100Class8readSnIREh>
 40071d0:	10803fcc 	andi	r2,r2,255
 40071d4:	1080040c 	andi	r2,r2,16
 40071d8:	1005003a 	cmpeq	r2,r2,zero
 40071dc:	10803fcc 	andi	r2,r2,255
 40071e0:	10000926 	beq	r2,zero,4007208 <_ZN13EthernetClass10socketSendEhPKht+0x110>
		/* m2008.01 [bj] : reduce code */
		if ( W5100.readSnSR(s) == SnSR::CLOSED ) {
 40071e4:	e0bffd03 	ldbu	r2,-12(fp)
 40071e8:	1009883a 	mov	r4,r2
 40071ec:	40077900 	call	4007790 <_ZN10W5100Class8readSnSREh>
 40071f0:	10803fcc 	andi	r2,r2,255
 40071f4:	1005003a 	cmpeq	r2,r2,zero
 40071f8:	10803fcc 	andi	r2,r2,255
 40071fc:	103ff126 	beq	r2,zero,40071c4 <__alt_data_end+0xfc0071c4>
			return 0;
 4007200:	0005883a 	mov	r2,zero
 4007204:	00000506 	br	400721c <_ZN13EthernetClass10socketSendEhPKht+0x124>
		}
		yield();
	}
	/* +2008.01 bj */
	W5100.writeSnIR(s, SnIR::SEND_OK);
 4007208:	e0bffd03 	ldbu	r2,-12(fp)
 400720c:	01400404 	movi	r5,16
 4007210:	1009883a 	mov	r4,r2
 4007214:	40077040 	call	4007704 <_ZN10W5100Class9writeSnIREhh>
	return ret;
 4007218:	e0bffb0b 	ldhu	r2,-20(fp)
}
 400721c:	e037883a 	mov	sp,fp
 4007220:	dfc00117 	ldw	ra,4(sp)
 4007224:	df000017 	ldw	fp,0(sp)
 4007228:	dec00204 	addi	sp,sp,8
 400722c:	f800283a 	ret

04007230 <_ZN13EthernetClass19socketSendAvailableEh>:

uint16_t EthernetClass::socketSendAvailable(uint8_t s)
{
 4007230:	defffc04 	addi	sp,sp,-16
 4007234:	dfc00315 	stw	ra,12(sp)
 4007238:	df000215 	stw	fp,8(sp)
 400723c:	df000204 	addi	fp,sp,8
 4007240:	2005883a 	mov	r2,r4
 4007244:	e0bfff05 	stb	r2,-4(fp)
	uint8_t status=0;
 4007248:	e03ffe05 	stb	zero,-8(fp)
	uint16_t freesize=0;
 400724c:	e03ffe8d 	sth	zero,-6(fp)
	freesize = getSnTX_FSR(s);
 4007250:	e0bfff03 	ldbu	r2,-4(fp)
 4007254:	1009883a 	mov	r4,r2
 4007258:	4006f140 	call	4006f14 <_ZL11getSnTX_FSRh>
 400725c:	e0bffe8d 	sth	r2,-6(fp)
	status = W5100.readSnSR(s);
 4007260:	e0bfff03 	ldbu	r2,-4(fp)
 4007264:	1009883a 	mov	r4,r2
 4007268:	40077900 	call	4007790 <_ZN10W5100Class8readSnSREh>
 400726c:	e0bffe05 	stb	r2,-8(fp)
	if ((status == SnSR::ESTABLISHED) || (status == SnSR::CLOSE_WAIT)) {
 4007270:	e0bffe03 	ldbu	r2,-8(fp)
 4007274:	108005e0 	cmpeqi	r2,r2,23
 4007278:	1000031e 	bne	r2,zero,4007288 <_ZN13EthernetClass19socketSendAvailableEh+0x58>
 400727c:	e0bffe03 	ldbu	r2,-8(fp)
 4007280:	10800718 	cmpnei	r2,r2,28
 4007284:	1000021e 	bne	r2,zero,4007290 <_ZN13EthernetClass19socketSendAvailableEh+0x60>
		return freesize;
 4007288:	e0bffe8b 	ldhu	r2,-6(fp)
 400728c:	00000106 	br	4007294 <_ZN13EthernetClass19socketSendAvailableEh+0x64>
	}
	return 0;
 4007290:	0005883a 	mov	r2,zero
}
 4007294:	e037883a 	mov	sp,fp
 4007298:	dfc00117 	ldw	ra,4(sp)
 400729c:	df000017 	ldw	fp,0(sp)
 40072a0:	dec00204 	addi	sp,sp,8
 40072a4:	f800283a 	ret

040072a8 <_ZN13EthernetClass16socketBufferDataEhtPKht>:

uint16_t EthernetClass::socketBufferData(uint8_t s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
 40072a8:	defff904 	addi	sp,sp,-28
 40072ac:	dfc00615 	stw	ra,24(sp)
 40072b0:	df000515 	stw	fp,20(sp)
 40072b4:	df000504 	addi	fp,sp,20
 40072b8:	2807883a 	mov	r3,r5
 40072bc:	e1bffe15 	stw	r6,-8(fp)
 40072c0:	3805883a 	mov	r2,r7
 40072c4:	e13ffc05 	stb	r4,-16(fp)
 40072c8:	e0fffd0d 	sth	r3,-12(fp)
 40072cc:	e0bfff0d 	sth	r2,-4(fp)
	//Serial.printf("  bufferData, offset=%d, len=%d\n", offset, len);
	uint16_t ret =0;
 40072d0:	e03ffb0d 	sth	zero,-20(fp)
	uint16_t txfree = getSnTX_FSR(s);
 40072d4:	e0bffc03 	ldbu	r2,-16(fp)
 40072d8:	1009883a 	mov	r4,r2
 40072dc:	4006f140 	call	4006f14 <_ZL11getSnTX_FSRh>
 40072e0:	e0bffb8d 	sth	r2,-18(fp)
	if (len > txfree) {
 40072e4:	e0bfff0b 	ldhu	r2,-4(fp)
 40072e8:	e0fffb8b 	ldhu	r3,-18(fp)
 40072ec:	1880032e 	bgeu	r3,r2,40072fc <_ZN13EthernetClass16socketBufferDataEhtPKht+0x54>
		ret = txfree; // check size not to exceed MAX size.
 40072f0:	e0bffb8b 	ldhu	r2,-18(fp)
 40072f4:	e0bffb0d 	sth	r2,-20(fp)
 40072f8:	00000206 	br	4007304 <_ZN13EthernetClass16socketBufferDataEhtPKht+0x5c>
	} else {
		ret = len;
 40072fc:	e0bfff0b 	ldhu	r2,-4(fp)
 4007300:	e0bffb0d 	sth	r2,-20(fp)
	}
	write_data(s, offset, buf, ret);
 4007304:	e0bffc03 	ldbu	r2,-16(fp)
 4007308:	e0fffd0b 	ldhu	r3,-12(fp)
 400730c:	e13ffb0b 	ldhu	r4,-20(fp)
 4007310:	200f883a 	mov	r7,r4
 4007314:	e1bffe17 	ldw	r6,-8(fp)
 4007318:	180b883a 	mov	r5,r3
 400731c:	1009883a 	mov	r4,r2
 4007320:	4006fa00 	call	4006fa0 <_ZL10write_datahtPKht>
	return ret;
 4007324:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4007328:	e037883a 	mov	sp,fp
 400732c:	dfc00117 	ldw	ra,4(sp)
 4007330:	df000017 	ldw	fp,0(sp)
 4007334:	dec00204 	addi	sp,sp,8
 4007338:	f800283a 	ret

0400733c <_ZN13EthernetClass14socketStartUDPEhPht>:

bool EthernetClass::socketStartUDP(uint8_t s, uint8_t* addr, uint16_t port)
{
 400733c:	defffb04 	addi	sp,sp,-20
 4007340:	dfc00415 	stw	ra,16(sp)
 4007344:	df000315 	stw	fp,12(sp)
 4007348:	df000304 	addi	fp,sp,12
 400734c:	2007883a 	mov	r3,r4
 4007350:	e17ffe15 	stw	r5,-8(fp)
 4007354:	3005883a 	mov	r2,r6
 4007358:	e0fffd05 	stb	r3,-12(fp)
 400735c:	e0bfff0d 	sth	r2,-4(fp)
	if ( ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
 4007360:	e0bffe17 	ldw	r2,-8(fp)
 4007364:	10800003 	ldbu	r2,0(r2)
 4007368:	10803fcc 	andi	r2,r2,255
 400736c:	10000f1e 	bne	r2,zero,40073ac <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 4007370:	e0bffe17 	ldw	r2,-8(fp)
 4007374:	10800044 	addi	r2,r2,1
 4007378:	10800003 	ldbu	r2,0(r2)
 400737c:	10803fcc 	andi	r2,r2,255
 4007380:	10000a1e 	bne	r2,zero,40073ac <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 4007384:	e0bffe17 	ldw	r2,-8(fp)
 4007388:	10800084 	addi	r2,r2,2
 400738c:	10800003 	ldbu	r2,0(r2)
 4007390:	10803fcc 	andi	r2,r2,255
 4007394:	1000051e 	bne	r2,zero,40073ac <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 4007398:	e0bffe17 	ldw	r2,-8(fp)
 400739c:	108000c4 	addi	r2,r2,3
 40073a0:	10800003 	ldbu	r2,0(r2)
 40073a4:	10803fcc 	andi	r2,r2,255
 40073a8:	10000226 	beq	r2,zero,40073b4 <_ZN13EthernetClass14socketStartUDPEhPht+0x78>
 40073ac:	e0bfff0b 	ldhu	r2,-4(fp)
 40073b0:	1000021e 	bne	r2,zero,40073bc <_ZN13EthernetClass14socketStartUDPEhPht+0x80>
	  ((port == 0x00)) ) {
		return false;
 40073b4:	0005883a 	mov	r2,zero
 40073b8:	00000a06 	br	40073e4 <_ZN13EthernetClass14socketStartUDPEhPht+0xa8>
	}
	W5100.writeSnDIPR(s, addr);
 40073bc:	e0bffd03 	ldbu	r2,-12(fp)
 40073c0:	e17ffe17 	ldw	r5,-8(fp)
 40073c4:	1009883a 	mov	r4,r2
 40073c8:	40078780 	call	4007878 <_ZN10W5100Class11writeSnDIPREhPh>
	W5100.writeSnDPORT(s, port);
 40073cc:	e0bffd03 	ldbu	r2,-12(fp)
 40073d0:	e0ffff0b 	ldhu	r3,-4(fp)
 40073d4:	180b883a 	mov	r5,r3
 40073d8:	1009883a 	mov	r4,r2
 40073dc:	40078c00 	call	40078c0 <_ZN10W5100Class12writeSnDPORTEht>
	return true;
 40073e0:	00800044 	movi	r2,1
}
 40073e4:	e037883a 	mov	sp,fp
 40073e8:	dfc00117 	ldw	ra,4(sp)
 40073ec:	df000017 	ldw	fp,0(sp)
 40073f0:	dec00204 	addi	sp,sp,8
 40073f4:	f800283a 	ret

040073f8 <_ZN13EthernetClass13socketSendUDPEh>:

bool EthernetClass::socketSendUDP(uint8_t s)
{
 40073f8:	defffd04 	addi	sp,sp,-12
 40073fc:	dfc00215 	stw	ra,8(sp)
 4007400:	df000115 	stw	fp,4(sp)
 4007404:	df000104 	addi	fp,sp,4
 4007408:	2005883a 	mov	r2,r4
 400740c:	e0bfff05 	stb	r2,-4(fp)
	W5100.execCmdSn(s, Sock_SEND);
 4007410:	e0bfff03 	ldbu	r2,-4(fp)
 4007414:	01400804 	movi	r5,32
 4007418:	1009883a 	mov	r4,r2
 400741c:	40088fc0 	call	40088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>

	/* +2008.01 bj */
	while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) {
 4007420:	e0bfff03 	ldbu	r2,-4(fp)
 4007424:	1009883a 	mov	r4,r2
 4007428:	40077540 	call	4007754 <_ZN10W5100Class8readSnIREh>
 400742c:	10803fcc 	andi	r2,r2,255
 4007430:	1080040c 	andi	r2,r2,16
 4007434:	1005003a 	cmpeq	r2,r2,zero
 4007438:	10803fcc 	andi	r2,r2,255
 400743c:	10000e26 	beq	r2,zero,4007478 <_ZN13EthernetClass13socketSendUDPEh+0x80>
		if (W5100.readSnIR(s) & SnIR::TIMEOUT) {
 4007440:	e0bfff03 	ldbu	r2,-4(fp)
 4007444:	1009883a 	mov	r4,r2
 4007448:	40077540 	call	4007754 <_ZN10W5100Class8readSnIREh>
 400744c:	10803fcc 	andi	r2,r2,255
 4007450:	1080020c 	andi	r2,r2,8
 4007454:	1004c03a 	cmpne	r2,r2,zero
 4007458:	10803fcc 	andi	r2,r2,255
 400745c:	103ff026 	beq	r2,zero,4007420 <__alt_data_end+0xfc007420>
			/* +2008.01 [bj]: clear interrupt */
			W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
 4007460:	e0bfff03 	ldbu	r2,-4(fp)
 4007464:	01400604 	movi	r5,24
 4007468:	1009883a 	mov	r4,r2
 400746c:	40077040 	call	4007704 <_ZN10W5100Class9writeSnIREhh>
			//Serial.printf("sendUDP timeout\n");
			return false;
 4007470:	0005883a 	mov	r2,zero
 4007474:	00000506 	br	400748c <_ZN13EthernetClass13socketSendUDPEh+0x94>
		}
		yield();
	}

	/* +2008.01 bj */
	W5100.writeSnIR(s, SnIR::SEND_OK);
 4007478:	e0bfff03 	ldbu	r2,-4(fp)
 400747c:	01400404 	movi	r5,16
 4007480:	1009883a 	mov	r4,r2
 4007484:	40077040 	call	4007704 <_ZN10W5100Class9writeSnIREhh>

	//Serial.printf("sendUDP ok\n");
	/* Sent ok */
	return true;
 4007488:	00800044 	movi	r2,1
}
 400748c:	e037883a 	mov	sp,fp
 4007490:	dfc00117 	ldw	ra,4(sp)
 4007494:	df000017 	ldw	fp,0(sp)
 4007498:	dec00204 	addi	sp,sp,8
 400749c:	f800283a 	ret

040074a0 <_Z41__static_initialization_and_destruction_0ii>:
 40074a0:	defffb04 	addi	sp,sp,-20
 40074a4:	dfc00415 	stw	ra,16(sp)
 40074a8:	df000315 	stw	fp,12(sp)
 40074ac:	df000304 	addi	fp,sp,12
 40074b0:	e13ffe15 	stw	r4,-8(fp)
 40074b4:	e17fff15 	stw	r5,-4(fp)
 40074b8:	e0bffe17 	ldw	r2,-8(fp)
 40074bc:	10800058 	cmpnei	r2,r2,1
 40074c0:	1000091e 	bne	r2,zero,40074e8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40074c4:	e0ffff17 	ldw	r3,-4(fp)
 40074c8:	00bfffd4 	movui	r2,65535
 40074cc:	1880061e 	bne	r3,r2,40074e8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40074d0:	d8000015 	stw	zero,0(sp)
 40074d4:	000f883a 	mov	r7,zero
 40074d8:	000d883a 	mov	r6,zero
 40074dc:	000b883a 	mov	r5,zero
 40074e0:	d112da04 	addi	r4,gp,19304
 40074e4:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
 40074e8:	0001883a 	nop
 40074ec:	e037883a 	mov	sp,fp
 40074f0:	dfc00117 	ldw	ra,4(sp)
 40074f4:	df000017 	ldw	fp,0(sp)
 40074f8:	dec00204 	addi	sp,sp,8
 40074fc:	f800283a 	ret

04007500 <_GLOBAL__sub_I__ZN13EthernetClass14socketPortRandEt>:
 4007500:	defffe04 	addi	sp,sp,-8
 4007504:	dfc00115 	stw	ra,4(sp)
 4007508:	df000015 	stw	fp,0(sp)
 400750c:	d839883a 	mov	fp,sp
 4007510:	017fffd4 	movui	r5,65535
 4007514:	01000044 	movi	r4,1
 4007518:	40074a00 	call	40074a0 <_Z41__static_initialization_and_destruction_0ii>
 400751c:	e037883a 	mov	sp,fp
 4007520:	dfc00117 	ldw	ra,4(sp)
 4007524:	df000017 	ldw	fp,0(sp)
 4007528:	dec00204 	addi	sp,sp,8
 400752c:	f800283a 	ret

04007530 <_ZN10W5100Class4readEt>:
  static uint16_t write(uint16_t addr, const uint8_t *buf, uint16_t len);
  static uint8_t write(uint16_t addr, uint8_t data) {
    return write(addr, &data, 1);
  }
  static uint16_t read(uint16_t addr, uint8_t *buf, uint16_t len);
  static uint8_t read(uint16_t addr) {
 4007530:	defffc04 	addi	sp,sp,-16
 4007534:	dfc00315 	stw	ra,12(sp)
 4007538:	df000215 	stw	fp,8(sp)
 400753c:	df000204 	addi	fp,sp,8
 4007540:	2005883a 	mov	r2,r4
 4007544:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t data;
    read(addr, &data, 1);
 4007548:	e0bfff0b 	ldhu	r2,-4(fp)
 400754c:	01800044 	movi	r6,1
 4007550:	e17ffe04 	addi	r5,fp,-8
 4007554:	1009883a 	mov	r4,r2
 4007558:	40086a80 	call	40086a8 <_ZN10W5100Class4readEtPht>
    return data;
 400755c:	e0bffe03 	ldbu	r2,-8(fp)
  }
 4007560:	e037883a 	mov	sp,fp
 4007564:	dfc00117 	ldw	ra,4(sp)
 4007568:	df000017 	ldw	fp,0(sp)
 400756c:	dec00204 	addi	sp,sp,8
 4007570:	f800283a 	ret

04007574 <_ZN10W5100Class6readSnEht>:
    return CH_BASE_MSB << 8;
  }
  static uint8_t CH_BASE_MSB; // 1 redundant byte, saves ~80 bytes code on AVR
  static const uint16_t CH_SIZE = 0x0100;

  static inline uint8_t readSn(SOCKET s, uint16_t addr) {
 4007574:	defffc04 	addi	sp,sp,-16
 4007578:	dfc00315 	stw	ra,12(sp)
 400757c:	df000215 	stw	fp,8(sp)
 4007580:	df000204 	addi	fp,sp,8
 4007584:	2007883a 	mov	r3,r4
 4007588:	2805883a 	mov	r2,r5
 400758c:	e0fffe05 	stb	r3,-8(fp)
 4007590:	e0bfff0d 	sth	r2,-4(fp)
    return read(CH_BASE() + s * CH_SIZE + addr);
 4007594:	40050540 	call	4005054 <_ZN10W5100Class7CH_BASEEv>
 4007598:	1007883a 	mov	r3,r2
 400759c:	e0bffe03 	ldbu	r2,-8(fp)
 40075a0:	1004923a 	slli	r2,r2,8
 40075a4:	1885883a 	add	r2,r3,r2
 40075a8:	1007883a 	mov	r3,r2
 40075ac:	e0bfff0b 	ldhu	r2,-4(fp)
 40075b0:	1885883a 	add	r2,r3,r2
 40075b4:	10bfffcc 	andi	r2,r2,65535
 40075b8:	1009883a 	mov	r4,r2
 40075bc:	40075300 	call	4007530 <_ZN10W5100Class4readEt>
  }
 40075c0:	e037883a 	mov	sp,fp
 40075c4:	dfc00117 	ldw	ra,4(sp)
 40075c8:	df000017 	ldw	fp,0(sp)
 40075cc:	dec00204 	addi	sp,sp,8
 40075d0:	f800283a 	ret

040075d4 <_ZN10W5100Class7writeSnEhth>:
  static inline uint8_t writeSn(SOCKET s, uint16_t addr, uint8_t data) {
 40075d4:	defffb04 	addi	sp,sp,-20
 40075d8:	dfc00415 	stw	ra,16(sp)
 40075dc:	df000315 	stw	fp,12(sp)
 40075e0:	df000304 	addi	fp,sp,12
 40075e4:	2807883a 	mov	r3,r5
 40075e8:	3005883a 	mov	r2,r6
 40075ec:	e13ffd05 	stb	r4,-12(fp)
 40075f0:	e0fffe0d 	sth	r3,-8(fp)
 40075f4:	e0bfff05 	stb	r2,-4(fp)
    return write(CH_BASE() + s * CH_SIZE + addr, data);
 40075f8:	40050540 	call	4005054 <_ZN10W5100Class7CH_BASEEv>
 40075fc:	1007883a 	mov	r3,r2
 4007600:	e0bffd03 	ldbu	r2,-12(fp)
 4007604:	1004923a 	slli	r2,r2,8
 4007608:	1885883a 	add	r2,r3,r2
 400760c:	1007883a 	mov	r3,r2
 4007610:	e0bffe0b 	ldhu	r2,-8(fp)
 4007614:	1885883a 	add	r2,r3,r2
 4007618:	10bfffcc 	andi	r2,r2,65535
 400761c:	e0ffff03 	ldbu	r3,-4(fp)
 4007620:	180b883a 	mov	r5,r3
 4007624:	1009883a 	mov	r4,r2
 4007628:	4003e7c0 	call	4003e7c <_ZN10W5100Class5writeEth>
  }
 400762c:	e037883a 	mov	sp,fp
 4007630:	dfc00117 	ldw	ra,4(sp)
 4007634:	df000017 	ldw	fp,0(sp)
 4007638:	dec00204 	addi	sp,sp,8
 400763c:	f800283a 	ret

04007640 <_ZN10W5100Class7writeSnEhtPht>:
  static inline uint16_t readSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
    return read(CH_BASE() + s * CH_SIZE + addr, buf, len);
  }
  static inline uint16_t writeSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
 4007640:	defffa04 	addi	sp,sp,-24
 4007644:	dfc00515 	stw	ra,20(sp)
 4007648:	df000415 	stw	fp,16(sp)
 400764c:	df000404 	addi	fp,sp,16
 4007650:	2807883a 	mov	r3,r5
 4007654:	e1bffe15 	stw	r6,-8(fp)
 4007658:	3805883a 	mov	r2,r7
 400765c:	e13ffc05 	stb	r4,-16(fp)
 4007660:	e0fffd0d 	sth	r3,-12(fp)
 4007664:	e0bfff0d 	sth	r2,-4(fp)
    return write(CH_BASE() + s * CH_SIZE + addr, buf, len);
 4007668:	40050540 	call	4005054 <_ZN10W5100Class7CH_BASEEv>
 400766c:	1007883a 	mov	r3,r2
 4007670:	e0bffc03 	ldbu	r2,-16(fp)
 4007674:	1004923a 	slli	r2,r2,8
 4007678:	1885883a 	add	r2,r3,r2
 400767c:	1007883a 	mov	r3,r2
 4007680:	e0bffd0b 	ldhu	r2,-12(fp)
 4007684:	1885883a 	add	r2,r3,r2
 4007688:	10bfffcc 	andi	r2,r2,65535
 400768c:	e0ffff0b 	ldhu	r3,-4(fp)
 4007690:	180d883a 	mov	r6,r3
 4007694:	e17ffe17 	ldw	r5,-8(fp)
 4007698:	1009883a 	mov	r4,r2
 400769c:	40085040 	call	4008504 <_ZN10W5100Class5writeEtPKht>
  }
 40076a0:	e037883a 	mov	sp,fp
 40076a4:	dfc00117 	ldw	ra,4(sp)
 40076a8:	df000017 	ldw	fp,0(sp)
 40076ac:	dec00204 	addi	sp,sp,8
 40076b0:	f800283a 	ret

040076b4 <_ZN10W5100Class9writeSnMREhh>:
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }

public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
 40076b4:	defffc04 	addi	sp,sp,-16
 40076b8:	dfc00315 	stw	ra,12(sp)
 40076bc:	df000215 	stw	fp,8(sp)
 40076c0:	df000204 	addi	fp,sp,8
 40076c4:	2007883a 	mov	r3,r4
 40076c8:	2805883a 	mov	r2,r5
 40076cc:	e0fffe05 	stb	r3,-8(fp)
 40076d0:	e0bfff05 	stb	r2,-4(fp)
 40076d4:	e0bffe03 	ldbu	r2,-8(fp)
 40076d8:	e0ffff03 	ldbu	r3,-4(fp)
 40076dc:	180d883a 	mov	r6,r3
 40076e0:	000b883a 	mov	r5,zero
 40076e4:	1009883a 	mov	r4,r2
 40076e8:	40075d40 	call	40075d4 <_ZN10W5100Class7writeSnEhth>
 40076ec:	0001883a 	nop
 40076f0:	e037883a 	mov	sp,fp
 40076f4:	dfc00117 	ldw	ra,4(sp)
 40076f8:	df000017 	ldw	fp,0(sp)
 40076fc:	dec00204 	addi	sp,sp,8
 4007700:	f800283a 	ret

04007704 <_ZN10W5100Class9writeSnIREhh>:
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
 4007704:	defffc04 	addi	sp,sp,-16
 4007708:	dfc00315 	stw	ra,12(sp)
 400770c:	df000215 	stw	fp,8(sp)
 4007710:	df000204 	addi	fp,sp,8
 4007714:	2007883a 	mov	r3,r4
 4007718:	2805883a 	mov	r2,r5
 400771c:	e0fffe05 	stb	r3,-8(fp)
 4007720:	e0bfff05 	stb	r2,-4(fp)
 4007724:	e0bffe03 	ldbu	r2,-8(fp)
 4007728:	e0ffff03 	ldbu	r3,-4(fp)
 400772c:	180d883a 	mov	r6,r3
 4007730:	01400084 	movi	r5,2
 4007734:	1009883a 	mov	r4,r2
 4007738:	40075d40 	call	40075d4 <_ZN10W5100Class7writeSnEhth>
 400773c:	0001883a 	nop
 4007740:	e037883a 	mov	sp,fp
 4007744:	dfc00117 	ldw	ra,4(sp)
 4007748:	df000017 	ldw	fp,0(sp)
 400774c:	dec00204 	addi	sp,sp,8
 4007750:	f800283a 	ret

04007754 <_ZN10W5100Class8readSnIREh>:
 4007754:	defffd04 	addi	sp,sp,-12
 4007758:	dfc00215 	stw	ra,8(sp)
 400775c:	df000115 	stw	fp,4(sp)
 4007760:	df000104 	addi	fp,sp,4
 4007764:	2005883a 	mov	r2,r4
 4007768:	e0bfff05 	stb	r2,-4(fp)
 400776c:	e0bfff03 	ldbu	r2,-4(fp)
 4007770:	01400084 	movi	r5,2
 4007774:	1009883a 	mov	r4,r2
 4007778:	40075740 	call	4007574 <_ZN10W5100Class6readSnEht>
 400777c:	e037883a 	mov	sp,fp
 4007780:	dfc00117 	ldw	ra,4(sp)
 4007784:	df000017 	ldw	fp,0(sp)
 4007788:	dec00204 	addi	sp,sp,8
 400778c:	f800283a 	ret

04007790 <_ZN10W5100Class8readSnSREh>:
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
 4007790:	defffd04 	addi	sp,sp,-12
 4007794:	dfc00215 	stw	ra,8(sp)
 4007798:	df000115 	stw	fp,4(sp)
 400779c:	df000104 	addi	fp,sp,4
 40077a0:	2005883a 	mov	r2,r4
 40077a4:	e0bfff05 	stb	r2,-4(fp)
 40077a8:	e0bfff03 	ldbu	r2,-4(fp)
 40077ac:	014000c4 	movi	r5,3
 40077b0:	1009883a 	mov	r4,r2
 40077b4:	40075740 	call	4007574 <_ZN10W5100Class6readSnEht>
 40077b8:	e037883a 	mov	sp,fp
 40077bc:	dfc00117 	ldw	ra,4(sp)
 40077c0:	df000017 	ldw	fp,0(sp)
 40077c4:	dec00204 	addi	sp,sp,8
 40077c8:	f800283a 	ret

040077cc <_ZN10W5100Class11writeSnPORTEht>:
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
 40077cc:	defffb04 	addi	sp,sp,-20
 40077d0:	dfc00415 	stw	ra,16(sp)
 40077d4:	df000315 	stw	fp,12(sp)
 40077d8:	df000304 	addi	fp,sp,12
 40077dc:	2007883a 	mov	r3,r4
 40077e0:	2805883a 	mov	r2,r5
 40077e4:	e0fffe05 	stb	r3,-8(fp)
 40077e8:	e0bfff0d 	sth	r2,-4(fp)
 40077ec:	e0bfff0b 	ldhu	r2,-4(fp)
 40077f0:	1005d23a 	srai	r2,r2,8
 40077f4:	e0bffd05 	stb	r2,-12(fp)
 40077f8:	e0bfff0b 	ldhu	r2,-4(fp)
 40077fc:	e0bffd45 	stb	r2,-11(fp)
 4007800:	e0bffe03 	ldbu	r2,-8(fp)
 4007804:	01c00084 	movi	r7,2
 4007808:	e1bffd04 	addi	r6,fp,-12
 400780c:	01400104 	movi	r5,4
 4007810:	1009883a 	mov	r4,r2
 4007814:	40076400 	call	4007640 <_ZN10W5100Class7writeSnEhtPht>
 4007818:	0001883a 	nop
 400781c:	e037883a 	mov	sp,fp
 4007820:	dfc00117 	ldw	ra,4(sp)
 4007824:	df000017 	ldw	fp,0(sp)
 4007828:	dec00204 	addi	sp,sp,8
 400782c:	f800283a 	ret

04007830 <_ZN10W5100Class11writeSnDHAREhPh>:
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
 4007830:	defffc04 	addi	sp,sp,-16
 4007834:	dfc00315 	stw	ra,12(sp)
 4007838:	df000215 	stw	fp,8(sp)
 400783c:	df000204 	addi	fp,sp,8
 4007840:	2005883a 	mov	r2,r4
 4007844:	e17fff15 	stw	r5,-4(fp)
 4007848:	e0bffe05 	stb	r2,-8(fp)
 400784c:	e0bffe03 	ldbu	r2,-8(fp)
 4007850:	01c00184 	movi	r7,6
 4007854:	e1bfff17 	ldw	r6,-4(fp)
 4007858:	01400184 	movi	r5,6
 400785c:	1009883a 	mov	r4,r2
 4007860:	40076400 	call	4007640 <_ZN10W5100Class7writeSnEhtPht>
 4007864:	e037883a 	mov	sp,fp
 4007868:	dfc00117 	ldw	ra,4(sp)
 400786c:	df000017 	ldw	fp,0(sp)
 4007870:	dec00204 	addi	sp,sp,8
 4007874:	f800283a 	ret

04007878 <_ZN10W5100Class11writeSnDIPREhPh>:
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
 4007878:	defffc04 	addi	sp,sp,-16
 400787c:	dfc00315 	stw	ra,12(sp)
 4007880:	df000215 	stw	fp,8(sp)
 4007884:	df000204 	addi	fp,sp,8
 4007888:	2005883a 	mov	r2,r4
 400788c:	e17fff15 	stw	r5,-4(fp)
 4007890:	e0bffe05 	stb	r2,-8(fp)
 4007894:	e0bffe03 	ldbu	r2,-8(fp)
 4007898:	01c00104 	movi	r7,4
 400789c:	e1bfff17 	ldw	r6,-4(fp)
 40078a0:	01400304 	movi	r5,12
 40078a4:	1009883a 	mov	r4,r2
 40078a8:	40076400 	call	4007640 <_ZN10W5100Class7writeSnEhtPht>
 40078ac:	e037883a 	mov	sp,fp
 40078b0:	dfc00117 	ldw	ra,4(sp)
 40078b4:	df000017 	ldw	fp,0(sp)
 40078b8:	dec00204 	addi	sp,sp,8
 40078bc:	f800283a 	ret

040078c0 <_ZN10W5100Class12writeSnDPORTEht>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
 40078c0:	defffb04 	addi	sp,sp,-20
 40078c4:	dfc00415 	stw	ra,16(sp)
 40078c8:	df000315 	stw	fp,12(sp)
 40078cc:	df000304 	addi	fp,sp,12
 40078d0:	2007883a 	mov	r3,r4
 40078d4:	2805883a 	mov	r2,r5
 40078d8:	e0fffe05 	stb	r3,-8(fp)
 40078dc:	e0bfff0d 	sth	r2,-4(fp)
 40078e0:	e0bfff0b 	ldhu	r2,-4(fp)
 40078e4:	1005d23a 	srai	r2,r2,8
 40078e8:	e0bffd05 	stb	r2,-12(fp)
 40078ec:	e0bfff0b 	ldhu	r2,-4(fp)
 40078f0:	e0bffd45 	stb	r2,-11(fp)
 40078f4:	e0bffe03 	ldbu	r2,-8(fp)
 40078f8:	01c00084 	movi	r7,2
 40078fc:	e1bffd04 	addi	r6,fp,-12
 4007900:	01400404 	movi	r5,16
 4007904:	1009883a 	mov	r4,r2
 4007908:	40076400 	call	4007640 <_ZN10W5100Class7writeSnEhtPht>
 400790c:	0001883a 	nop
 4007910:	e037883a 	mov	sp,fp
 4007914:	dfc00117 	ldw	ra,4(sp)
 4007918:	df000017 	ldw	fp,0(sp)
 400791c:	dec00204 	addi	sp,sp,8
 4007920:	f800283a 	ret

04007924 <_ZN10W5100Class12readSnTX_FSREh>:
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER8(SnRX_SIZE,   0x001E)        // RX Memory Size (W5200 only)
  __SOCKET_REGISTER8(SnTX_SIZE,   0x001F)        // RX Memory Size (W5200 only)
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
 4007924:	defffc04 	addi	sp,sp,-16
 4007928:	dfc00315 	stw	ra,12(sp)
 400792c:	df000215 	stw	fp,8(sp)
 4007930:	df000204 	addi	fp,sp,8
 4007934:	2005883a 	mov	r2,r4
 4007938:	e0bfff05 	stb	r2,-4(fp)
 400793c:	e0bfff03 	ldbu	r2,-4(fp)
 4007940:	01c00084 	movi	r7,2
 4007944:	e1bffe04 	addi	r6,fp,-8
 4007948:	01400804 	movi	r5,32
 400794c:	1009883a 	mov	r4,r2
 4007950:	400507c0 	call	400507c <_ZN10W5100Class6readSnEhtPht>
 4007954:	e0bffe03 	ldbu	r2,-8(fp)
 4007958:	10803fcc 	andi	r2,r2,255
 400795c:	1004923a 	slli	r2,r2,8
 4007960:	1007883a 	mov	r3,r2
 4007964:	e0bffe43 	ldbu	r2,-7(fp)
 4007968:	10803fcc 	andi	r2,r2,255
 400796c:	1884b03a 	or	r2,r3,r2
 4007970:	e037883a 	mov	sp,fp
 4007974:	dfc00117 	ldw	ra,4(sp)
 4007978:	df000017 	ldw	fp,0(sp)
 400797c:	dec00204 	addi	sp,sp,8
 4007980:	f800283a 	ret

04007984 <_ZN10W5100Class12writeSnTX_WREht>:
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
 4007984:	defffb04 	addi	sp,sp,-20
 4007988:	dfc00415 	stw	ra,16(sp)
 400798c:	df000315 	stw	fp,12(sp)
 4007990:	df000304 	addi	fp,sp,12
 4007994:	2007883a 	mov	r3,r4
 4007998:	2805883a 	mov	r2,r5
 400799c:	e0fffe05 	stb	r3,-8(fp)
 40079a0:	e0bfff0d 	sth	r2,-4(fp)
 40079a4:	e0bfff0b 	ldhu	r2,-4(fp)
 40079a8:	1005d23a 	srai	r2,r2,8
 40079ac:	e0bffd05 	stb	r2,-12(fp)
 40079b0:	e0bfff0b 	ldhu	r2,-4(fp)
 40079b4:	e0bffd45 	stb	r2,-11(fp)
 40079b8:	e0bffe03 	ldbu	r2,-8(fp)
 40079bc:	01c00084 	movi	r7,2
 40079c0:	e1bffd04 	addi	r6,fp,-12
 40079c4:	01400904 	movi	r5,36
 40079c8:	1009883a 	mov	r4,r2
 40079cc:	40076400 	call	4007640 <_ZN10W5100Class7writeSnEhtPht>
 40079d0:	0001883a 	nop
 40079d4:	e037883a 	mov	sp,fp
 40079d8:	dfc00117 	ldw	ra,4(sp)
 40079dc:	df000017 	ldw	fp,0(sp)
 40079e0:	dec00204 	addi	sp,sp,8
 40079e4:	f800283a 	ret

040079e8 <_ZN10W5100Class11readSnTX_WREh>:
 40079e8:	defffc04 	addi	sp,sp,-16
 40079ec:	dfc00315 	stw	ra,12(sp)
 40079f0:	df000215 	stw	fp,8(sp)
 40079f4:	df000204 	addi	fp,sp,8
 40079f8:	2005883a 	mov	r2,r4
 40079fc:	e0bfff05 	stb	r2,-4(fp)
 4007a00:	e0bfff03 	ldbu	r2,-4(fp)
 4007a04:	01c00084 	movi	r7,2
 4007a08:	e1bffe04 	addi	r6,fp,-8
 4007a0c:	01400904 	movi	r5,36
 4007a10:	1009883a 	mov	r4,r2
 4007a14:	400507c0 	call	400507c <_ZN10W5100Class6readSnEhtPht>
 4007a18:	e0bffe03 	ldbu	r2,-8(fp)
 4007a1c:	10803fcc 	andi	r2,r2,255
 4007a20:	1004923a 	slli	r2,r2,8
 4007a24:	1007883a 	mov	r3,r2
 4007a28:	e0bffe43 	ldbu	r2,-7(fp)
 4007a2c:	10803fcc 	andi	r2,r2,255
 4007a30:	1884b03a 	or	r2,r3,r2
 4007a34:	e037883a 	mov	sp,fp
 4007a38:	dfc00117 	ldw	ra,4(sp)
 4007a3c:	df000017 	ldw	fp,0(sp)
 4007a40:	dec00204 	addi	sp,sp,8
 4007a44:	f800283a 	ret

04007a48 <_ZN10W5100Class12readSnRX_RSREh>:
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
 4007a48:	defffc04 	addi	sp,sp,-16
 4007a4c:	dfc00315 	stw	ra,12(sp)
 4007a50:	df000215 	stw	fp,8(sp)
 4007a54:	df000204 	addi	fp,sp,8
 4007a58:	2005883a 	mov	r2,r4
 4007a5c:	e0bfff05 	stb	r2,-4(fp)
 4007a60:	e0bfff03 	ldbu	r2,-4(fp)
 4007a64:	01c00084 	movi	r7,2
 4007a68:	e1bffe04 	addi	r6,fp,-8
 4007a6c:	01400984 	movi	r5,38
 4007a70:	1009883a 	mov	r4,r2
 4007a74:	400507c0 	call	400507c <_ZN10W5100Class6readSnEhtPht>
 4007a78:	e0bffe03 	ldbu	r2,-8(fp)
 4007a7c:	10803fcc 	andi	r2,r2,255
 4007a80:	1004923a 	slli	r2,r2,8
 4007a84:	1007883a 	mov	r3,r2
 4007a88:	e0bffe43 	ldbu	r2,-7(fp)
 4007a8c:	10803fcc 	andi	r2,r2,255
 4007a90:	1884b03a 	or	r2,r3,r2
 4007a94:	e037883a 	mov	sp,fp
 4007a98:	dfc00117 	ldw	ra,4(sp)
 4007a9c:	df000017 	ldw	fp,0(sp)
 4007aa0:	dec00204 	addi	sp,sp,8
 4007aa4:	f800283a 	ret

04007aa8 <_ZN10W5100Class12writeSnRX_RDEht>:
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
 4007aa8:	defffb04 	addi	sp,sp,-20
 4007aac:	dfc00415 	stw	ra,16(sp)
 4007ab0:	df000315 	stw	fp,12(sp)
 4007ab4:	df000304 	addi	fp,sp,12
 4007ab8:	2007883a 	mov	r3,r4
 4007abc:	2805883a 	mov	r2,r5
 4007ac0:	e0fffe05 	stb	r3,-8(fp)
 4007ac4:	e0bfff0d 	sth	r2,-4(fp)
 4007ac8:	e0bfff0b 	ldhu	r2,-4(fp)
 4007acc:	1005d23a 	srai	r2,r2,8
 4007ad0:	e0bffd05 	stb	r2,-12(fp)
 4007ad4:	e0bfff0b 	ldhu	r2,-4(fp)
 4007ad8:	e0bffd45 	stb	r2,-11(fp)
 4007adc:	e0bffe03 	ldbu	r2,-8(fp)
 4007ae0:	01c00084 	movi	r7,2
 4007ae4:	e1bffd04 	addi	r6,fp,-12
 4007ae8:	01400a04 	movi	r5,40
 4007aec:	1009883a 	mov	r4,r2
 4007af0:	40076400 	call	4007640 <_ZN10W5100Class7writeSnEhtPht>
 4007af4:	0001883a 	nop
 4007af8:	e037883a 	mov	sp,fp
 4007afc:	dfc00117 	ldw	ra,4(sp)
 4007b00:	df000017 	ldw	fp,0(sp)
 4007b04:	dec00204 	addi	sp,sp,8
 4007b08:	f800283a 	ret

04007b0c <_ZN10W5100Class11readSnRX_RDEh>:
 4007b0c:	defffc04 	addi	sp,sp,-16
 4007b10:	dfc00315 	stw	ra,12(sp)
 4007b14:	df000215 	stw	fp,8(sp)
 4007b18:	df000204 	addi	fp,sp,8
 4007b1c:	2005883a 	mov	r2,r4
 4007b20:	e0bfff05 	stb	r2,-4(fp)
 4007b24:	e0bfff03 	ldbu	r2,-4(fp)
 4007b28:	01c00084 	movi	r7,2
 4007b2c:	e1bffe04 	addi	r6,fp,-8
 4007b30:	01400a04 	movi	r5,40
 4007b34:	1009883a 	mov	r4,r2
 4007b38:	400507c0 	call	400507c <_ZN10W5100Class6readSnEhtPht>
 4007b3c:	e0bffe03 	ldbu	r2,-8(fp)
 4007b40:	10803fcc 	andi	r2,r2,255
 4007b44:	1004923a 	slli	r2,r2,8
 4007b48:	1007883a 	mov	r3,r2
 4007b4c:	e0bffe43 	ldbu	r2,-7(fp)
 4007b50:	10803fcc 	andi	r2,r2,255
 4007b54:	1884b03a 	or	r2,r3,r2
 4007b58:	e037883a 	mov	sp,fp
 4007b5c:	dfc00117 	ldw	ra,4(sp)
 4007b60:	df000017 	ldw	fp,0(sp)
 4007b64:	dec00204 	addi	sp,sp,8
 4007b68:	f800283a 	ret

04007b6c <_ZN10W5100Class5SBASEEh>:
  static uint16_t SMASK;
#else
  static const uint16_t SSIZE = 2048;
  static const uint16_t SMASK = 0x07FF;
#endif
  static uint16_t SBASE(uint8_t socknum) {
 4007b6c:	defffe04 	addi	sp,sp,-8
 4007b70:	df000115 	stw	fp,4(sp)
 4007b74:	df000104 	addi	fp,sp,4
 4007b78:	2005883a 	mov	r2,r4
 4007b7c:	e0bfff05 	stb	r2,-4(fp)
    if (chip == 51) {
 4007b80:	d092dd03 	ldbu	r2,19316(gp)
 4007b84:	10803fcc 	andi	r2,r2,255
 4007b88:	10800cd8 	cmpnei	r2,r2,51
 4007b8c:	1000041e 	bne	r2,zero,4007ba0 <_ZN10W5100Class5SBASEEh+0x34>
      return socknum * SSIZE + 0x4000;
 4007b90:	e0bfff03 	ldbu	r2,-4(fp)
 4007b94:	10800204 	addi	r2,r2,8
 4007b98:	100492fa 	slli	r2,r2,11
 4007b9c:	00000306 	br	4007bac <_ZN10W5100Class5SBASEEh+0x40>
    } else {
      return socknum * SSIZE + 0x8000;
 4007ba0:	e0bfff03 	ldbu	r2,-4(fp)
 4007ba4:	10800404 	addi	r2,r2,16
 4007ba8:	100492fa 	slli	r2,r2,11
    }
  }
 4007bac:	e037883a 	mov	sp,fp
 4007bb0:	df000017 	ldw	fp,0(sp)
 4007bb4:	dec00104 	addi	sp,sp,4
 4007bb8:	f800283a 	ret

04007bbc <_ZN10W5100Class5RBASEEh>:
  static uint16_t RBASE(uint8_t socknum) {
 4007bbc:	defffe04 	addi	sp,sp,-8
 4007bc0:	df000115 	stw	fp,4(sp)
 4007bc4:	df000104 	addi	fp,sp,4
 4007bc8:	2005883a 	mov	r2,r4
 4007bcc:	e0bfff05 	stb	r2,-4(fp)
    if (chip == 51) {
 4007bd0:	d092dd03 	ldbu	r2,19316(gp)
 4007bd4:	10803fcc 	andi	r2,r2,255
 4007bd8:	10800cd8 	cmpnei	r2,r2,51
 4007bdc:	1000041e 	bne	r2,zero,4007bf0 <_ZN10W5100Class5RBASEEh+0x34>
      return socknum * SSIZE + 0x6000;
 4007be0:	e0bfff03 	ldbu	r2,-4(fp)
 4007be4:	10800304 	addi	r2,r2,12
 4007be8:	100492fa 	slli	r2,r2,11
 4007bec:	00000306 	br	4007bfc <_ZN10W5100Class5RBASEEh+0x40>
    } else {
      return socknum * SSIZE + 0xC000;
 4007bf0:	e0bfff03 	ldbu	r2,-4(fp)
 4007bf4:	10800604 	addi	r2,r2,24
 4007bf8:	100492fa 	slli	r2,r2,11
    }
  }
 4007bfc:	e037883a 	mov	sp,fp
 4007c00:	df000017 	ldw	fp,0(sp)
 4007c04:	dec00104 	addi	sp,sp,4
 4007c08:	f800283a 	ret

04007c0c <_ZN10W5100Class23hasOffsetAddressMappingEv>:

  static bool hasOffsetAddressMapping(void) {
 4007c0c:	deffff04 	addi	sp,sp,-4
 4007c10:	df000015 	stw	fp,0(sp)
 4007c14:	d839883a 	mov	fp,sp
    if (chip == 55) return true;
 4007c18:	d092dd03 	ldbu	r2,19316(gp)
 4007c1c:	10803fcc 	andi	r2,r2,255
 4007c20:	10800dd8 	cmpnei	r2,r2,55
 4007c24:	1000021e 	bne	r2,zero,4007c30 <_ZN10W5100Class23hasOffsetAddressMappingEv+0x24>
 4007c28:	00800044 	movi	r2,1
 4007c2c:	00000106 	br	4007c34 <_ZN10W5100Class23hasOffsetAddressMappingEv+0x28>
    return false;
 4007c30:	0005883a 	mov	r2,zero
  }
 4007c34:	e037883a 	mov	sp,fp
 4007c38:	df000017 	ldw	fp,0(sp)
 4007c3c:	dec00104 	addi	sp,sp,4
 4007c40:	f800283a 	ret

04007c44 <_ZN9IPAddressC1Ev>:

#include "IPAddress.h"
#include <cstring>
#include <stdio.h>

IPAddress::IPAddress()
 4007c44:	defffe04 	addi	sp,sp,-8
 4007c48:	df000115 	stw	fp,4(sp)
 4007c4c:	df000104 	addi	fp,sp,4
 4007c50:	e13fff15 	stw	r4,-4(fp)
{
    _address.dword = 0;
 4007c54:	e0bfff17 	ldw	r2,-4(fp)
 4007c58:	10000015 	stw	zero,0(r2)
}
 4007c5c:	0001883a 	nop
 4007c60:	e037883a 	mov	sp,fp
 4007c64:	df000017 	ldw	fp,0(sp)
 4007c68:	dec00104 	addi	sp,sp,4
 4007c6c:	f800283a 	ret

04007c70 <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 4007c70:	defffa04 	addi	sp,sp,-24
 4007c74:	df000515 	stw	fp,20(sp)
 4007c78:	df000504 	addi	fp,sp,20
 4007c7c:	e13ffb15 	stw	r4,-20(fp)
 4007c80:	3009883a 	mov	r4,r6
 4007c84:	3807883a 	mov	r3,r7
 4007c88:	e0800117 	ldw	r2,4(fp)
 4007c8c:	e17ffc05 	stb	r5,-16(fp)
 4007c90:	e13ffd05 	stb	r4,-12(fp)
 4007c94:	e0fffe05 	stb	r3,-8(fp)
 4007c98:	e0bfff05 	stb	r2,-4(fp)
{
    _address.bytes[0] = first_octet;
 4007c9c:	e0bffb17 	ldw	r2,-20(fp)
 4007ca0:	e0fffc03 	ldbu	r3,-16(fp)
 4007ca4:	10c00005 	stb	r3,0(r2)
    _address.bytes[1] = second_octet;
 4007ca8:	e0bffb17 	ldw	r2,-20(fp)
 4007cac:	e0fffd03 	ldbu	r3,-12(fp)
 4007cb0:	10c00045 	stb	r3,1(r2)
    _address.bytes[2] = third_octet;
 4007cb4:	e0bffb17 	ldw	r2,-20(fp)
 4007cb8:	e0fffe03 	ldbu	r3,-8(fp)
 4007cbc:	10c00085 	stb	r3,2(r2)
    _address.bytes[3] = fourth_octet;
 4007cc0:	e0bffb17 	ldw	r2,-20(fp)
 4007cc4:	e0ffff03 	ldbu	r3,-4(fp)
 4007cc8:	10c000c5 	stb	r3,3(r2)
}
 4007ccc:	0001883a 	nop
 4007cd0:	e037883a 	mov	sp,fp
 4007cd4:	df000017 	ldw	fp,0(sp)
 4007cd8:	dec00104 	addi	sp,sp,4
 4007cdc:	f800283a 	ret

04007ce0 <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
 4007ce0:	defffd04 	addi	sp,sp,-12
 4007ce4:	df000215 	stw	fp,8(sp)
 4007ce8:	df000204 	addi	fp,sp,8
 4007cec:	e13ffe15 	stw	r4,-8(fp)
 4007cf0:	e17fff15 	stw	r5,-4(fp)
{
    _address.dword = address;
 4007cf4:	e0bffe17 	ldw	r2,-8(fp)
 4007cf8:	e0ffff17 	ldw	r3,-4(fp)
 4007cfc:	10c00015 	stw	r3,0(r2)
}
 4007d00:	0001883a 	nop
 4007d04:	e037883a 	mov	sp,fp
 4007d08:	df000017 	ldw	fp,0(sp)
 4007d0c:	dec00104 	addi	sp,sp,4
 4007d10:	f800283a 	ret

04007d14 <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
 4007d14:	defffc04 	addi	sp,sp,-16
 4007d18:	dfc00315 	stw	ra,12(sp)
 4007d1c:	df000215 	stw	fp,8(sp)
 4007d20:	df000204 	addi	fp,sp,8
 4007d24:	e13ffe15 	stw	r4,-8(fp)
 4007d28:	e17fff15 	stw	r5,-4(fp)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
 4007d2c:	e0bffe17 	ldw	r2,-8(fp)
 4007d30:	01800104 	movi	r6,4
 4007d34:	e17fff17 	ldw	r5,-4(fp)
 4007d38:	1009883a 	mov	r4,r2
 4007d3c:	400bbd00 	call	400bbd0 <memcpy>
}
 4007d40:	0001883a 	nop
 4007d44:	e037883a 	mov	sp,fp
 4007d48:	dfc00117 	ldw	ra,4(sp)
 4007d4c:	df000017 	ldw	fp,0(sp)
 4007d50:	dec00204 	addi	sp,sp,8
 4007d54:	f800283a 	ret

04007d58 <_ZN9IPAddress10fromStringEPKc>:

bool IPAddress::fromString(const char *address)
{
 4007d58:	defffc04 	addi	sp,sp,-16
 4007d5c:	df000315 	stw	fp,12(sp)
 4007d60:	df000304 	addi	fp,sp,12
 4007d64:	e13ffe15 	stw	r4,-8(fp)
 4007d68:	e17fff15 	stw	r5,-4(fp)
    uint16_t acc = 0; // Accumulator
 4007d6c:	e03ffd0d 	sth	zero,-12(fp)
    uint8_t dots = 0;
 4007d70:	e03ffd85 	stb	zero,-10(fp)

    while (*address)
 4007d74:	e0bfff17 	ldw	r2,-4(fp)
 4007d78:	10800003 	ldbu	r2,0(r2)
 4007d7c:	10803fcc 	andi	r2,r2,255
 4007d80:	1080201c 	xori	r2,r2,128
 4007d84:	10bfe004 	addi	r2,r2,-128
 4007d88:	10002d26 	beq	r2,zero,4007e40 <_ZN9IPAddress10fromStringEPKc+0xe8>
    {
        char c = *address++;
 4007d8c:	e0bfff17 	ldw	r2,-4(fp)
 4007d90:	10c00044 	addi	r3,r2,1
 4007d94:	e0ffff15 	stw	r3,-4(fp)
 4007d98:	10800003 	ldbu	r2,0(r2)
 4007d9c:	e0bffdc5 	stb	r2,-9(fp)
        if (c >= '0' && c <= '9')
 4007da0:	e0bffdc7 	ldb	r2,-9(fp)
 4007da4:	10800c10 	cmplti	r2,r2,48
 4007da8:	10000f1e 	bne	r2,zero,4007de8 <_ZN9IPAddress10fromStringEPKc+0x90>
 4007dac:	e0bffdc7 	ldb	r2,-9(fp)
 4007db0:	10800e88 	cmpgei	r2,r2,58
 4007db4:	10000c1e 	bne	r2,zero,4007de8 <_ZN9IPAddress10fromStringEPKc+0x90>
        {
            acc = acc * 10 + (c - '0');
 4007db8:	e0bffd0b 	ldhu	r2,-12(fp)
 4007dbc:	108002a4 	muli	r2,r2,10
 4007dc0:	1007883a 	mov	r3,r2
 4007dc4:	e0bffdc7 	ldb	r2,-9(fp)
 4007dc8:	1885883a 	add	r2,r3,r2
 4007dcc:	10bff404 	addi	r2,r2,-48
 4007dd0:	e0bffd0d 	sth	r2,-12(fp)
            if (acc > 255) {
 4007dd4:	e0bffd0b 	ldhu	r2,-12(fp)
 4007dd8:	10804030 	cmpltui	r2,r2,256
 4007ddc:	1000171e 	bne	r2,zero,4007e3c <_ZN9IPAddress10fromStringEPKc+0xe4>
                // Value out of [0..255] range
                return false;
 4007de0:	0005883a 	mov	r2,zero
 4007de4:	00002006 	br	4007e68 <_ZN9IPAddress10fromStringEPKc+0x110>
            }
        }
        else if (c == '.')
 4007de8:	e0bffdc7 	ldb	r2,-9(fp)
 4007dec:	10800b98 	cmpnei	r2,r2,46
 4007df0:	1000101e 	bne	r2,zero,4007e34 <_ZN9IPAddress10fromStringEPKc+0xdc>
        {
            if (dots == 3) {
 4007df4:	e0bffd83 	ldbu	r2,-10(fp)
 4007df8:	108000d8 	cmpnei	r2,r2,3
 4007dfc:	1000021e 	bne	r2,zero,4007e08 <_ZN9IPAddress10fromStringEPKc+0xb0>
                // Too much dots (there must be 3 dots)
                return false;
 4007e00:	0005883a 	mov	r2,zero
 4007e04:	00001806 	br	4007e68 <_ZN9IPAddress10fromStringEPKc+0x110>
            }
            _address.bytes[dots++] = acc;
 4007e08:	e0bffd83 	ldbu	r2,-10(fp)
 4007e0c:	10c00044 	addi	r3,r2,1
 4007e10:	e0fffd85 	stb	r3,-10(fp)
 4007e14:	10803fcc 	andi	r2,r2,255
 4007e18:	e0fffd0b 	ldhu	r3,-12(fp)
 4007e1c:	1809883a 	mov	r4,r3
 4007e20:	e0fffe17 	ldw	r3,-8(fp)
 4007e24:	1885883a 	add	r2,r3,r2
 4007e28:	11000005 	stb	r4,0(r2)
            acc = 0;
 4007e2c:	e03ffd0d 	sth	zero,-12(fp)
 4007e30:	003fd006 	br	4007d74 <__alt_data_end+0xfc007d74>
        }
        else
        {
            // Invalid char
            return false;
 4007e34:	0005883a 	mov	r2,zero
 4007e38:	00000b06 	br	4007e68 <_ZN9IPAddress10fromStringEPKc+0x110>
bool IPAddress::fromString(const char *address)
{
    uint16_t acc = 0; // Accumulator
    uint8_t dots = 0;

    while (*address)
 4007e3c:	003fcd06 	br	4007d74 <__alt_data_end+0xfc007d74>
            // Invalid char
            return false;
        }
    }

    if (dots != 3) {
 4007e40:	e0bffd83 	ldbu	r2,-10(fp)
 4007e44:	108000e0 	cmpeqi	r2,r2,3
 4007e48:	1000021e 	bne	r2,zero,4007e54 <_ZN9IPAddress10fromStringEPKc+0xfc>
        // Too few dots (there must be 3 dots)
        return false;
 4007e4c:	0005883a 	mov	r2,zero
 4007e50:	00000506 	br	4007e68 <_ZN9IPAddress10fromStringEPKc+0x110>
    }
    _address.bytes[3] = acc;
 4007e54:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e58:	1007883a 	mov	r3,r2
 4007e5c:	e0bffe17 	ldw	r2,-8(fp)
 4007e60:	10c000c5 	stb	r3,3(r2)
    return true;
 4007e64:	00800044 	movi	r2,1
}
 4007e68:	e037883a 	mov	sp,fp
 4007e6c:	df000017 	ldw	fp,0(sp)
 4007e70:	dec00104 	addi	sp,sp,4
 4007e74:	f800283a 	ret

04007e78 <_ZN9IPAddress5printEv>:

void IPAddress::print() {
 4007e78:	defffc04 	addi	sp,sp,-16
 4007e7c:	dfc00315 	stw	ra,12(sp)
 4007e80:	df000215 	stw	fp,8(sp)
 4007e84:	df000204 	addi	fp,sp,8
 4007e88:	e13fff15 	stw	r4,-4(fp)
	printf("%u.%u.%u.%u", _address.bytes[0], _address.bytes[1], _address.bytes[2], _address.bytes[3]);
 4007e8c:	e0bfff17 	ldw	r2,-4(fp)
 4007e90:	10800003 	ldbu	r2,0(r2)
 4007e94:	10c03fcc 	andi	r3,r2,255
 4007e98:	e0bfff17 	ldw	r2,-4(fp)
 4007e9c:	10800043 	ldbu	r2,1(r2)
 4007ea0:	11003fcc 	andi	r4,r2,255
 4007ea4:	e0bfff17 	ldw	r2,-4(fp)
 4007ea8:	10800083 	ldbu	r2,2(r2)
 4007eac:	11403fcc 	andi	r5,r2,255
 4007eb0:	e0bfff17 	ldw	r2,-4(fp)
 4007eb4:	108000c3 	ldbu	r2,3(r2)
 4007eb8:	10803fcc 	andi	r2,r2,255
 4007ebc:	d8800015 	stw	r2,0(sp)
 4007ec0:	280f883a 	mov	r7,r5
 4007ec4:	200d883a 	mov	r6,r4
 4007ec8:	180b883a 	mov	r5,r3
 4007ecc:	010100b4 	movhi	r4,1026
 4007ed0:	212fea04 	addi	r4,r4,-16472
 4007ed4:	400be700 	call	400be70 <printf>
}
 4007ed8:	0001883a 	nop
 4007edc:	e037883a 	mov	sp,fp
 4007ee0:	dfc00117 	ldw	ra,4(sp)
 4007ee4:	df000017 	ldw	fp,0(sp)
 4007ee8:	dec00204 	addi	sp,sp,8
 4007eec:	f800283a 	ret

04007ef0 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
 4007ef0:	defffc04 	addi	sp,sp,-16
 4007ef4:	dfc00315 	stw	ra,12(sp)
 4007ef8:	df000215 	stw	fp,8(sp)
 4007efc:	df000204 	addi	fp,sp,8
 4007f00:	e13ffe15 	stw	r4,-8(fp)
 4007f04:	e17fff15 	stw	r5,-4(fp)
    memcpy(_address.bytes, address, sizeof(_address.bytes));
 4007f08:	e0bffe17 	ldw	r2,-8(fp)
 4007f0c:	01800104 	movi	r6,4
 4007f10:	e17fff17 	ldw	r5,-4(fp)
 4007f14:	1009883a 	mov	r4,r2
 4007f18:	400bbd00 	call	400bbd0 <memcpy>
    return *this;
 4007f1c:	e0bffe17 	ldw	r2,-8(fp)
}
 4007f20:	e037883a 	mov	sp,fp
 4007f24:	dfc00117 	ldw	ra,4(sp)
 4007f28:	df000017 	ldw	fp,0(sp)
 4007f2c:	dec00204 	addi	sp,sp,8
 4007f30:	f800283a 	ret

04007f34 <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
 4007f34:	defffd04 	addi	sp,sp,-12
 4007f38:	df000215 	stw	fp,8(sp)
 4007f3c:	df000204 	addi	fp,sp,8
 4007f40:	e13ffe15 	stw	r4,-8(fp)
 4007f44:	e17fff15 	stw	r5,-4(fp)
    _address.dword = address;
 4007f48:	e0bffe17 	ldw	r2,-8(fp)
 4007f4c:	e0ffff17 	ldw	r3,-4(fp)
 4007f50:	10c00015 	stw	r3,0(r2)
    return *this;
 4007f54:	e0bffe17 	ldw	r2,-8(fp)
}
 4007f58:	e037883a 	mov	sp,fp
 4007f5c:	df000017 	ldw	fp,0(sp)
 4007f60:	dec00104 	addi	sp,sp,4
 4007f64:	f800283a 	ret

04007f68 <_ZNK9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr) const
{
 4007f68:	defffc04 	addi	sp,sp,-16
 4007f6c:	dfc00315 	stw	ra,12(sp)
 4007f70:	df000215 	stw	fp,8(sp)
 4007f74:	df000204 	addi	fp,sp,8
 4007f78:	e13ffe15 	stw	r4,-8(fp)
 4007f7c:	e17fff15 	stw	r5,-4(fp)
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
 4007f80:	e0bffe17 	ldw	r2,-8(fp)
 4007f84:	01800104 	movi	r6,4
 4007f88:	100b883a 	mov	r5,r2
 4007f8c:	e13fff17 	ldw	r4,-4(fp)
 4007f90:	400bb540 	call	400bb54 <memcmp>
 4007f94:	1005003a 	cmpeq	r2,r2,zero
}
 4007f98:	e037883a 	mov	sp,fp
 4007f9c:	dfc00117 	ldw	ra,4(sp)
 4007fa0:	df000017 	ldw	fp,0(sp)
 4007fa4:	dec00204 	addi	sp,sp,8
 4007fa8:	f800283a 	ret

04007fac <_Z41__static_initialization_and_destruction_0ii>:
 4007fac:	defffb04 	addi	sp,sp,-20
 4007fb0:	dfc00415 	stw	ra,16(sp)
 4007fb4:	df000315 	stw	fp,12(sp)
 4007fb8:	df000304 	addi	fp,sp,12
 4007fbc:	e13ffe15 	stw	r4,-8(fp)
 4007fc0:	e17fff15 	stw	r5,-4(fp)
 4007fc4:	e0bffe17 	ldw	r2,-8(fp)
 4007fc8:	10800058 	cmpnei	r2,r2,1
 4007fcc:	1000091e 	bne	r2,zero,4007ff4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4007fd0:	e0ffff17 	ldw	r3,-4(fp)
 4007fd4:	00bfffd4 	movui	r2,65535
 4007fd8:	1880061e 	bne	r3,r2,4007ff4 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4007fdc:	d8000015 	stw	zero,0(sp)
 4007fe0:	000f883a 	mov	r7,zero
 4007fe4:	000d883a 	mov	r6,zero
 4007fe8:	000b883a 	mov	r5,zero
 4007fec:	d112db04 	addi	r4,gp,19308
 4007ff0:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
 4007ff4:	0001883a 	nop
 4007ff8:	e037883a 	mov	sp,fp
 4007ffc:	dfc00117 	ldw	ra,4(sp)
 4008000:	df000017 	ldw	fp,0(sp)
 4008004:	dec00204 	addi	sp,sp,8
 4008008:	f800283a 	ret

0400800c <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
 400800c:	defffe04 	addi	sp,sp,-8
 4008010:	dfc00115 	stw	ra,4(sp)
 4008014:	df000015 	stw	fp,0(sp)
 4008018:	d839883a 	mov	fp,sp
 400801c:	017fffd4 	movui	r5,65535
 4008020:	01000044 	movi	r4,1
 4008024:	4007fac0 	call	4007fac <_Z41__static_initialization_and_destruction_0ii>
 4008028:	e037883a 	mov	sp,fp
 400802c:	dfc00117 	ldw	ra,4(sp)
 4008030:	df000017 	ldw	fp,0(sp)
 4008034:	dec00204 	addi	sp,sp,8
 4008038:	f800283a 	ret

0400803c <_ZN10W5100Class4initEv>:
  uint32_t W5100Class::ss_pin_mask;
#endif


uint8_t W5100Class::init(void)
{
 400803c:	defffd04 	addi	sp,sp,-12
 4008040:	dfc00215 	stw	ra,8(sp)
 4008044:	df000115 	stw	fp,4(sp)
 4008048:	df000104 	addi	fp,sp,4
	static bool initialized = false;
	uint8_t i;

	if (initialized) return 1;
 400804c:	d092ddc3 	ldbu	r2,19319(gp)
 4008050:	10803fcc 	andi	r2,r2,255
 4008054:	10000226 	beq	r2,zero,4008060 <_ZN10W5100Class4initEv+0x24>
 4008058:	00800044 	movi	r2,1
 400805c:	00004306 	br	400816c <_ZN10W5100Class4initEv+0x130>
	// reset pulse!  The CAT811 has a 240 ms typical pulse length, and
	// a 400 ms worst case maximum pulse length.  MAX811 has a worst
	// case maximum 560 ms pulse length.  This delay is meant to wait
	// until the reset pulse is ended.  If your hardware has a shorter
	// reset time, this can be edited or removed.
	usleep (560000);
 4008060:	01000274 	movhi	r4,9
 4008064:	2122e004 	addi	r4,r4,-29824
 4008068:	40188c00 	call	40188c0 <usleep>

	// Attempt W5200 detection first, because W5200 does not properly
	// reset its SPI state when CS goes high (inactive).  Communication
	// from detecting the other chips can leave the W5200 in a state
	// where it won't recover, unless given a reset pulse.
	if (isW5200()) {
 400806c:	40082ac0 	call	40082ac <_ZN10W5100Class7isW5200Ev>
 4008070:	10803fcc 	andi	r2,r2,255
 4008074:	1004c03a 	cmpne	r2,r2,zero
 4008078:	10803fcc 	andi	r2,r2,255
 400807c:	10002126 	beq	r2,zero,4008104 <_ZN10W5100Class4initEv+0xc8>
		CH_BASE_MSB = 0x40;
 4008080:	00801004 	movi	r2,64
 4008084:	d092dd45 	stb	r2,19317(gp)
#else
		SSIZE = 2048;
#endif
		SMASK = SSIZE - 1;
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
 4008088:	e03fff05 	stb	zero,-4(fp)
 400808c:	e0bfff03 	ldbu	r2,-4(fp)
 4008090:	10800228 	cmpgeui	r2,r2,8
 4008094:	10000c1e 	bne	r2,zero,40080c8 <_ZN10W5100Class4initEv+0x8c>
			writeSnRX_SIZE(i, SSIZE >> 10);
 4008098:	e0bfff03 	ldbu	r2,-4(fp)
 400809c:	01400084 	movi	r5,2
 40080a0:	1009883a 	mov	r4,r2
 40080a4:	4008c200 	call	4008c20 <_ZN10W5100Class14writeSnRX_SIZEEhh>
			writeSnTX_SIZE(i, SSIZE >> 10);
 40080a8:	e0bfff03 	ldbu	r2,-4(fp)
 40080ac:	01400084 	movi	r5,2
 40080b0:	1009883a 	mov	r4,r2
 40080b4:	4008c700 	call	4008c70 <_ZN10W5100Class14writeSnTX_SIZEEhh>
#else
		SSIZE = 2048;
#endif
		SMASK = SSIZE - 1;
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
 40080b8:	e0bfff03 	ldbu	r2,-4(fp)
 40080bc:	10800044 	addi	r2,r2,1
 40080c0:	e0bfff05 	stb	r2,-4(fp)
 40080c4:	003ff106 	br	400808c <__alt_data_end+0xfc00808c>
			writeSnRX_SIZE(i, SSIZE >> 10);
			writeSnTX_SIZE(i, SSIZE >> 10);
		}
		for (; i<8; i++) {
 40080c8:	e0bfff03 	ldbu	r2,-4(fp)
 40080cc:	10800228 	cmpgeui	r2,r2,8
 40080d0:	1000231e 	bne	r2,zero,4008160 <_ZN10W5100Class4initEv+0x124>
			writeSnRX_SIZE(i, 0);
 40080d4:	e0bfff03 	ldbu	r2,-4(fp)
 40080d8:	000b883a 	mov	r5,zero
 40080dc:	1009883a 	mov	r4,r2
 40080e0:	4008c200 	call	4008c20 <_ZN10W5100Class14writeSnRX_SIZEEhh>
			writeSnTX_SIZE(i, 0);
 40080e4:	e0bfff03 	ldbu	r2,-4(fp)
 40080e8:	000b883a 	mov	r5,zero
 40080ec:	1009883a 	mov	r4,r2
 40080f0:	4008c700 	call	4008c70 <_ZN10W5100Class14writeSnTX_SIZEEhh>
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
			writeSnRX_SIZE(i, SSIZE >> 10);
			writeSnTX_SIZE(i, SSIZE >> 10);
		}
		for (; i<8; i++) {
 40080f4:	e0bfff03 	ldbu	r2,-4(fp)
 40080f8:	10800044 	addi	r2,r2,1
 40080fc:	e0bfff05 	stb	r2,-4(fp)
 4008100:	003ff106 	br	40080c8 <__alt_data_end+0xfc0080c8>
			writeSnTX_SIZE(i, 0);
		}
	// Try W5500 next.  WIZnet finally seems to have implemented
	// SPI well with this chip.  It appears to be very resilient,
	// so try it after the fragile W5200
	} else if (isW5500()) {
 4008104:	40083840 	call	4008384 <_ZN10W5100Class7isW5500Ev>
 4008108:	10803fcc 	andi	r2,r2,255
 400810c:	1004c03a 	cmpne	r2,r2,zero
 4008110:	10803fcc 	andi	r2,r2,255
 4008114:	10000326 	beq	r2,zero,4008124 <_ZN10W5100Class4initEv+0xe8>
		CH_BASE_MSB = 0x10;
 4008118:	00800404 	movi	r2,16
 400811c:	d092dd45 	stb	r2,19317(gp)
 4008120:	00000f06 	br	4008160 <_ZN10W5100Class4initEv+0x124>
	// Try W5100 last.  This simple chip uses fixed 4 byte frames
	// for every 8 bit access.  Terribly inefficient, but so simple
	// it recovers from "hearing" unsuccessful W5100 or W5200
	// communication.  W5100 is also the only chip without a VERSIONR
	// register for identification, so we check this last.
	} else if (isW5100()) {
 4008124:	40081f40 	call	40081f4 <_ZN10W5100Class7isW5100Ev>
 4008128:	10803fcc 	andi	r2,r2,255
 400812c:	1004c03a 	cmpne	r2,r2,zero
 4008130:	10803fcc 	andi	r2,r2,255
 4008134:	10000726 	beq	r2,zero,4008154 <_ZN10W5100Class4initEv+0x118>
		CH_BASE_MSB = 0x04;
 4008138:	00800104 	movi	r2,4
 400813c:	d092dd45 	stb	r2,19317(gp)
		writeTMSR(0x55);
		writeRMSR(0x55);
#endif
		SMASK = SSIZE - 1;
#else
		writeTMSR(0x55);
 4008140:	01001544 	movi	r4,85
 4008144:	4008aa40 	call	4008aa4 <_ZN10W5100Class9writeTMSREh>
		writeRMSR(0x55);
 4008148:	01001544 	movi	r4,85
 400814c:	4008a640 	call	4008a64 <_ZN10W5100Class9writeRMSREh>
 4008150:	00000306 	br	4008160 <_ZN10W5100Class4initEv+0x124>
	// No hardware seems to be present.  Or it could be a W5200
	// that's heard other SPI communication if its chip select
	// pin wasn't high when a SD card or other SPI chip was used.
	} else {
		//Serial.println("no chip :-(");
		chip = 0;
 4008154:	d012dd05 	stb	zero,19316(gp)
		return 0; // no known chip is responding :-(
 4008158:	0005883a 	mov	r2,zero
 400815c:	00000306 	br	400816c <_ZN10W5100Class4initEv+0x130>
	}
	initialized = true;
 4008160:	00800044 	movi	r2,1
 4008164:	d092ddc5 	stb	r2,19319(gp)
	return 1; // successful init
 4008168:	00800044 	movi	r2,1
}
 400816c:	e037883a 	mov	sp,fp
 4008170:	dfc00117 	ldw	ra,4(sp)
 4008174:	df000017 	ldw	fp,0(sp)
 4008178:	dec00204 	addi	sp,sp,8
 400817c:	f800283a 	ret

04008180 <_ZN10W5100Class9softResetEv>:

// Soft reset the WIZnet chip, by writing to its MR register reset bit
uint8_t W5100Class::softReset(void)
{
 4008180:	defffd04 	addi	sp,sp,-12
 4008184:	dfc00215 	stw	ra,8(sp)
 4008188:	df000115 	stw	fp,4(sp)
 400818c:	df000104 	addi	fp,sp,4
	uint16_t count=0;
 4008190:	e03fff0d 	sth	zero,-4(fp)

	//Serial.println("WIZnet soft reset");
	// write to reset bit
	writeMR(0x80);
 4008194:	01002004 	movi	r4,128
 4008198:	40089f80 	call	40089f8 <_ZN10W5100Class7writeMREh>
	// then wait for soft reset to complete
	do {
		uint8_t mr = readMR();
 400819c:	4008a380 	call	4008a38 <_ZN10W5100Class6readMREv>
 40081a0:	e0bfff85 	stb	r2,-2(fp)
		//Serial.print("mr=");
		//Serial.println(mr, HEX);
		if (mr == 0) return 1;
 40081a4:	e0bfff83 	ldbu	r2,-2(fp)
 40081a8:	1000021e 	bne	r2,zero,40081b4 <_ZN10W5100Class9softResetEv+0x34>
 40081ac:	00800044 	movi	r2,1
 40081b0:	00000b06 	br	40081e0 <_ZN10W5100Class9softResetEv+0x60>
		usleep (1000);
 40081b4:	0100fa04 	movi	r4,1000
 40081b8:	40188c00 	call	40188c0 <usleep>

	//Serial.println("WIZnet soft reset");
	// write to reset bit
	writeMR(0x80);
	// then wait for soft reset to complete
	do {
 40081bc:	e0bfff0b 	ldhu	r2,-4(fp)
 40081c0:	10800044 	addi	r2,r2,1
 40081c4:	e0bfff0d 	sth	r2,-4(fp)
 40081c8:	e0bfff0b 	ldhu	r2,-4(fp)
 40081cc:	10800530 	cmpltui	r2,r2,20
 40081d0:	10803fcc 	andi	r2,r2,255
 40081d4:	10000126 	beq	r2,zero,40081dc <_ZN10W5100Class9softResetEv+0x5c>
 40081d8:	003ff006 	br	400819c <__alt_data_end+0xfc00819c>
		//Serial.print("mr=");
		//Serial.println(mr, HEX);
		if (mr == 0) return 1;
		usleep (1000);
	} while (++count < 20);
	return 0;
 40081dc:	0005883a 	mov	r2,zero
}
 40081e0:	e037883a 	mov	sp,fp
 40081e4:	dfc00117 	ldw	ra,4(sp)
 40081e8:	df000017 	ldw	fp,0(sp)
 40081ec:	dec00204 	addi	sp,sp,8
 40081f0:	f800283a 	ret

040081f4 <_ZN10W5100Class7isW5100Ev>:

uint8_t W5100Class::isW5100(void)
{
 40081f4:	defffe04 	addi	sp,sp,-8
 40081f8:	dfc00115 	stw	ra,4(sp)
 40081fc:	df000015 	stw	fp,0(sp)
 4008200:	d839883a 	mov	fp,sp
	chip = 51;
 4008204:	00800cc4 	movi	r2,51
 4008208:	d092dd05 	stb	r2,19316(gp)
	//Serial.println("w5100.cpp: detect W5100 chip");
	if (!softReset()) return 0;
 400820c:	40081800 	call	4008180 <_ZN10W5100Class9softResetEv>
 4008210:	10803fcc 	andi	r2,r2,255
 4008214:	1005003a 	cmpeq	r2,r2,zero
 4008218:	10803fcc 	andi	r2,r2,255
 400821c:	10000226 	beq	r2,zero,4008228 <_ZN10W5100Class7isW5100Ev+0x34>
 4008220:	0005883a 	mov	r2,zero
 4008224:	00001c06 	br	4008298 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x10);
 4008228:	01000404 	movi	r4,16
 400822c:	40089f80 	call	40089f8 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 4008230:	4008a380 	call	4008a38 <_ZN10W5100Class6readMREv>
 4008234:	10803fcc 	andi	r2,r2,255
 4008238:	10800418 	cmpnei	r2,r2,16
 400823c:	10803fcc 	andi	r2,r2,255
 4008240:	10000226 	beq	r2,zero,400824c <_ZN10W5100Class7isW5100Ev+0x58>
 4008244:	0005883a 	mov	r2,zero
 4008248:	00001306 	br	4008298 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x12);
 400824c:	01000484 	movi	r4,18
 4008250:	40089f80 	call	40089f8 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x12) return 0;
 4008254:	4008a380 	call	4008a38 <_ZN10W5100Class6readMREv>
 4008258:	10803fcc 	andi	r2,r2,255
 400825c:	10800498 	cmpnei	r2,r2,18
 4008260:	10803fcc 	andi	r2,r2,255
 4008264:	10000226 	beq	r2,zero,4008270 <_ZN10W5100Class7isW5100Ev+0x7c>
 4008268:	0005883a 	mov	r2,zero
 400826c:	00000a06 	br	4008298 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x00);
 4008270:	0009883a 	mov	r4,zero
 4008274:	40089f80 	call	40089f8 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 4008278:	4008a380 	call	4008a38 <_ZN10W5100Class6readMREv>
 400827c:	10803fcc 	andi	r2,r2,255
 4008280:	1004c03a 	cmpne	r2,r2,zero
 4008284:	10803fcc 	andi	r2,r2,255
 4008288:	10000226 	beq	r2,zero,4008294 <_ZN10W5100Class7isW5100Ev+0xa0>
 400828c:	0005883a 	mov	r2,zero
 4008290:	00000106 	br	4008298 <_ZN10W5100Class7isW5100Ev+0xa4>
	//Serial.println("chip is W5100");
	return 1;
 4008294:	00800044 	movi	r2,1
}
 4008298:	e037883a 	mov	sp,fp
 400829c:	dfc00117 	ldw	ra,4(sp)
 40082a0:	df000017 	ldw	fp,0(sp)
 40082a4:	dec00204 	addi	sp,sp,8
 40082a8:	f800283a 	ret

040082ac <_ZN10W5100Class7isW5200Ev>:

uint8_t W5100Class::isW5200(void)
{
 40082ac:	defffd04 	addi	sp,sp,-12
 40082b0:	dfc00215 	stw	ra,8(sp)
 40082b4:	df000115 	stw	fp,4(sp)
 40082b8:	df000104 	addi	fp,sp,4
	chip = 52;
 40082bc:	00800d04 	movi	r2,52
 40082c0:	d092dd05 	stb	r2,19316(gp)
	//Serial.println("w5100.cpp: detect W5200 chip");
	if (!softReset()) return 0;
 40082c4:	40081800 	call	4008180 <_ZN10W5100Class9softResetEv>
 40082c8:	10803fcc 	andi	r2,r2,255
 40082cc:	1005003a 	cmpeq	r2,r2,zero
 40082d0:	10803fcc 	andi	r2,r2,255
 40082d4:	10000226 	beq	r2,zero,40082e0 <_ZN10W5100Class7isW5200Ev+0x34>
 40082d8:	0005883a 	mov	r2,zero
 40082dc:	00002406 	br	4008370 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x08);
 40082e0:	01000204 	movi	r4,8
 40082e4:	40089f80 	call	40089f8 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x08) return 0;
 40082e8:	4008a380 	call	4008a38 <_ZN10W5100Class6readMREv>
 40082ec:	10803fcc 	andi	r2,r2,255
 40082f0:	10800218 	cmpnei	r2,r2,8
 40082f4:	10803fcc 	andi	r2,r2,255
 40082f8:	10000226 	beq	r2,zero,4008304 <_ZN10W5100Class7isW5200Ev+0x58>
 40082fc:	0005883a 	mov	r2,zero
 4008300:	00001b06 	br	4008370 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x10);
 4008304:	01000404 	movi	r4,16
 4008308:	40089f80 	call	40089f8 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 400830c:	4008a380 	call	4008a38 <_ZN10W5100Class6readMREv>
 4008310:	10803fcc 	andi	r2,r2,255
 4008314:	10800418 	cmpnei	r2,r2,16
 4008318:	10803fcc 	andi	r2,r2,255
 400831c:	10000226 	beq	r2,zero,4008328 <_ZN10W5100Class7isW5200Ev+0x7c>
 4008320:	0005883a 	mov	r2,zero
 4008324:	00001206 	br	4008370 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x00);
 4008328:	0009883a 	mov	r4,zero
 400832c:	40089f80 	call	40089f8 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 4008330:	4008a380 	call	4008a38 <_ZN10W5100Class6readMREv>
 4008334:	10803fcc 	andi	r2,r2,255
 4008338:	1004c03a 	cmpne	r2,r2,zero
 400833c:	10803fcc 	andi	r2,r2,255
 4008340:	10000226 	beq	r2,zero,400834c <_ZN10W5100Class7isW5200Ev+0xa0>
 4008344:	0005883a 	mov	r2,zero
 4008348:	00000906 	br	4008370 <_ZN10W5100Class7isW5200Ev+0xc4>
	int ver = readVERSIONR_W5200();
 400834c:	4008ae40 	call	4008ae4 <_ZN10W5100Class18readVERSIONR_W5200Ev>
 4008350:	10803fcc 	andi	r2,r2,255
 4008354:	e0bfff15 	stw	r2,-4(fp)
	//Serial.print("version=");
	//Serial.println(ver);
	if (ver != 3) return 0;
 4008358:	e0bfff17 	ldw	r2,-4(fp)
 400835c:	108000e0 	cmpeqi	r2,r2,3
 4008360:	1000021e 	bne	r2,zero,400836c <_ZN10W5100Class7isW5200Ev+0xc0>
 4008364:	0005883a 	mov	r2,zero
 4008368:	00000106 	br	4008370 <_ZN10W5100Class7isW5200Ev+0xc4>
	//Serial.println("chip is W5200");
	return 1;
 400836c:	00800044 	movi	r2,1
}
 4008370:	e037883a 	mov	sp,fp
 4008374:	dfc00117 	ldw	ra,4(sp)
 4008378:	df000017 	ldw	fp,0(sp)
 400837c:	dec00204 	addi	sp,sp,8
 4008380:	f800283a 	ret

04008384 <_ZN10W5100Class7isW5500Ev>:

uint8_t W5100Class::isW5500(void)
{
 4008384:	defffd04 	addi	sp,sp,-12
 4008388:	dfc00215 	stw	ra,8(sp)
 400838c:	df000115 	stw	fp,4(sp)
 4008390:	df000104 	addi	fp,sp,4
	chip = 55;
 4008394:	00800dc4 	movi	r2,55
 4008398:	d092dd05 	stb	r2,19316(gp)
	//Serial.println("w5100.cpp: detect W5500 chip");
	if (!softReset()) return 0;
 400839c:	40081800 	call	4008180 <_ZN10W5100Class9softResetEv>
 40083a0:	10803fcc 	andi	r2,r2,255
 40083a4:	1005003a 	cmpeq	r2,r2,zero
 40083a8:	10803fcc 	andi	r2,r2,255
 40083ac:	10000226 	beq	r2,zero,40083b8 <_ZN10W5100Class7isW5500Ev+0x34>
 40083b0:	0005883a 	mov	r2,zero
 40083b4:	00002406 	br	4008448 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x08);
 40083b8:	01000204 	movi	r4,8
 40083bc:	40089f80 	call	40089f8 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x08) return 0;
 40083c0:	4008a380 	call	4008a38 <_ZN10W5100Class6readMREv>
 40083c4:	10803fcc 	andi	r2,r2,255
 40083c8:	10800218 	cmpnei	r2,r2,8
 40083cc:	10803fcc 	andi	r2,r2,255
 40083d0:	10000226 	beq	r2,zero,40083dc <_ZN10W5100Class7isW5500Ev+0x58>
 40083d4:	0005883a 	mov	r2,zero
 40083d8:	00001b06 	br	4008448 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x10);
 40083dc:	01000404 	movi	r4,16
 40083e0:	40089f80 	call	40089f8 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 40083e4:	4008a380 	call	4008a38 <_ZN10W5100Class6readMREv>
 40083e8:	10803fcc 	andi	r2,r2,255
 40083ec:	10800418 	cmpnei	r2,r2,16
 40083f0:	10803fcc 	andi	r2,r2,255
 40083f4:	10000226 	beq	r2,zero,4008400 <_ZN10W5100Class7isW5500Ev+0x7c>
 40083f8:	0005883a 	mov	r2,zero
 40083fc:	00001206 	br	4008448 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x00);
 4008400:	0009883a 	mov	r4,zero
 4008404:	40089f80 	call	40089f8 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 4008408:	4008a380 	call	4008a38 <_ZN10W5100Class6readMREv>
 400840c:	10803fcc 	andi	r2,r2,255
 4008410:	1004c03a 	cmpne	r2,r2,zero
 4008414:	10803fcc 	andi	r2,r2,255
 4008418:	10000226 	beq	r2,zero,4008424 <_ZN10W5100Class7isW5500Ev+0xa0>
 400841c:	0005883a 	mov	r2,zero
 4008420:	00000906 	br	4008448 <_ZN10W5100Class7isW5500Ev+0xc4>
	int ver = readVERSIONR_W5500();
 4008424:	4008b100 	call	4008b10 <_ZN10W5100Class18readVERSIONR_W5500Ev>
 4008428:	10803fcc 	andi	r2,r2,255
 400842c:	e0bfff15 	stw	r2,-4(fp)
	//Serial.print("version=");
	//Serial.println(ver);
	if (ver != 4) return 0;
 4008430:	e0bfff17 	ldw	r2,-4(fp)
 4008434:	10800120 	cmpeqi	r2,r2,4
 4008438:	1000021e 	bne	r2,zero,4008444 <_ZN10W5100Class7isW5500Ev+0xc0>
 400843c:	0005883a 	mov	r2,zero
 4008440:	00000106 	br	4008448 <_ZN10W5100Class7isW5500Ev+0xc4>
	//Serial.println("chip is W5500");
	return 1;
 4008444:	00800044 	movi	r2,1
}
 4008448:	e037883a 	mov	sp,fp
 400844c:	dfc00117 	ldw	ra,4(sp)
 4008450:	df000017 	ldw	fp,0(sp)
 4008454:	dec00204 	addi	sp,sp,8
 4008458:	f800283a 	ret

0400845c <_ZN10W5100Class13getLinkStatusEv>:

W5100Linkstatus W5100Class::getLinkStatus()
{
 400845c:	defffd04 	addi	sp,sp,-12
 4008460:	dfc00215 	stw	ra,8(sp)
 4008464:	df000115 	stw	fp,4(sp)
 4008468:	df000104 	addi	fp,sp,4
	uint8_t phystatus;

	if (!init()) return UNKNOWN;
 400846c:	400803c0 	call	400803c <_ZN10W5100Class4initEv>
 4008470:	10803fcc 	andi	r2,r2,255
 4008474:	1005003a 	cmpeq	r2,r2,zero
 4008478:	10803fcc 	andi	r2,r2,255
 400847c:	10000226 	beq	r2,zero,4008488 <_ZN10W5100Class13getLinkStatusEv+0x2c>
 4008480:	0005883a 	mov	r2,zero
 4008484:	00001a06 	br	40084f0 <_ZN10W5100Class13getLinkStatusEv+0x94>
	switch (chip) {
 4008488:	d092dd03 	ldbu	r2,19316(gp)
 400848c:	10803fcc 	andi	r2,r2,255
 4008490:	10c00d20 	cmpeqi	r3,r2,52
 4008494:	1800031e 	bne	r3,zero,40084a4 <_ZN10W5100Class13getLinkStatusEv+0x48>
 4008498:	10800de0 	cmpeqi	r2,r2,55
 400849c:	10000a1e 	bne	r2,zero,40084c8 <_ZN10W5100Class13getLinkStatusEv+0x6c>
 40084a0:	00001206 	br	40084ec <_ZN10W5100Class13getLinkStatusEv+0x90>
	  case 52:
		phystatus = readPSTATUS_W5200();
 40084a4:	4008b3c0 	call	4008b3c <_ZN10W5100Class17readPSTATUS_W5200Ev>
 40084a8:	e0bfff05 	stb	r2,-4(fp)
		if (phystatus & 0x20) return LINK_ON;
 40084ac:	e0bfff03 	ldbu	r2,-4(fp)
 40084b0:	1080080c 	andi	r2,r2,32
 40084b4:	10000226 	beq	r2,zero,40084c0 <_ZN10W5100Class13getLinkStatusEv+0x64>
 40084b8:	00800044 	movi	r2,1
 40084bc:	00000c06 	br	40084f0 <_ZN10W5100Class13getLinkStatusEv+0x94>
		return LINK_OFF;
 40084c0:	00800084 	movi	r2,2
 40084c4:	00000a06 	br	40084f0 <_ZN10W5100Class13getLinkStatusEv+0x94>
	  case 55:
		phystatus = readPHYCFGR_W5500();
 40084c8:	4008b680 	call	4008b68 <_ZN10W5100Class17readPHYCFGR_W5500Ev>
 40084cc:	e0bfff05 	stb	r2,-4(fp)
		if (phystatus & 0x01) return LINK_ON;
 40084d0:	e0bfff03 	ldbu	r2,-4(fp)
 40084d4:	1080004c 	andi	r2,r2,1
 40084d8:	10000226 	beq	r2,zero,40084e4 <_ZN10W5100Class13getLinkStatusEv+0x88>
 40084dc:	00800044 	movi	r2,1
 40084e0:	00000306 	br	40084f0 <_ZN10W5100Class13getLinkStatusEv+0x94>
		return LINK_OFF;
 40084e4:	00800084 	movi	r2,2
 40084e8:	00000106 	br	40084f0 <_ZN10W5100Class13getLinkStatusEv+0x94>
	  default:
		return UNKNOWN;
 40084ec:	0005883a 	mov	r2,zero
	}
}
 40084f0:	e037883a 	mov	sp,fp
 40084f4:	dfc00117 	ldw	ra,4(sp)
 40084f8:	df000017 	ldw	fp,0(sp)
 40084fc:	dec00204 	addi	sp,sp,8
 4008500:	f800283a 	ret

04008504 <_ZN10W5100Class5writeEtPKht>:

uint16_t W5100Class::write(uint16_t addr, const uint8_t *buf, uint16_t len)
{
 4008504:	deffeb04 	addi	sp,sp,-84
 4008508:	dfc01415 	stw	ra,80(sp)
 400850c:	df001315 	stw	fp,76(sp)
 4008510:	df001304 	addi	fp,sp,76
 4008514:	2007883a 	mov	r3,r4
 4008518:	e17ffe15 	stw	r5,-8(fp)
 400851c:	3005883a 	mov	r2,r6
 4008520:	e0fffd0d 	sth	r3,-12(fp)
 4008524:	e0bfff0d 	sth	r2,-4(fp)
	if(len > 50) printf("WARNING: W5100Class::write called with a buffer that's too big!\n");
 4008528:	e0bfff0b 	ldhu	r2,-4(fp)
 400852c:	10800cf0 	cmpltui	r2,r2,51
 4008530:	1000031e 	bne	r2,zero,4008540 <_ZN10W5100Class5writeEtPKht+0x3c>
 4008534:	010100b4 	movhi	r4,1026
 4008538:	212fed04 	addi	r4,r4,-16460
 400853c:	400bf6c0 	call	400bf6c <puts>

	// buffer holds command and data
	uint8_t cmd[50];

		if (addr < 0x100) {
 4008540:	e0bffd0b 	ldhu	r2,-12(fp)
 4008544:	10804028 	cmpgeui	r2,r2,256
 4008548:	1000061e 	bne	r2,zero,4008564 <_ZN10W5100Class5writeEtPKht+0x60>
			// common registers 00nn
			cmd[0] = 0;
 400854c:	e03ff045 	stb	zero,-63(fp)
			cmd[1] = addr & 0xFF;
 4008550:	e0bffd0b 	ldhu	r2,-12(fp)
 4008554:	e0bff085 	stb	r2,-62(fp)
			cmd[2] = 0x04;
 4008558:	00800104 	movi	r2,4
 400855c:	e0bff0c5 	stb	r2,-61(fp)
 4008560:	00002c06 	br	4008614 <_ZN10W5100Class5writeEtPKht+0x110>
		} else if (addr < 0x8000) {
 4008564:	e0bffd0b 	ldhu	r2,-12(fp)
 4008568:	10bfffcc 	andi	r2,r2,65535
 400856c:	10a0001c 	xori	r2,r2,32768
 4008570:	10a00004 	addi	r2,r2,-32768
 4008574:	10000b16 	blt	r2,zero,40085a4 <_ZN10W5100Class5writeEtPKht+0xa0>
			// socket registers  10nn, 11nn, 12nn, 13nn, etc
			cmd[0] = 0;
 4008578:	e03ff045 	stb	zero,-63(fp)
			cmd[1] = addr & 0xFF;
 400857c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008580:	e0bff085 	stb	r2,-62(fp)
			cmd[2] = ((addr >> 3) & 0xE0) | 0x0C;
 4008584:	e0bffd0b 	ldhu	r2,-12(fp)
 4008588:	1005d0fa 	srai	r2,r2,3
 400858c:	1007883a 	mov	r3,r2
 4008590:	00bff804 	movi	r2,-32
 4008594:	1884703a 	and	r2,r3,r2
 4008598:	10800314 	ori	r2,r2,12
 400859c:	e0bff0c5 	stb	r2,-61(fp)
 40085a0:	00001c06 	br	4008614 <_ZN10W5100Class5writeEtPKht+0x110>
		} else if (addr < 0xC000) {
 40085a4:	e0bffd0b 	ldhu	r2,-12(fp)
 40085a8:	10b00028 	cmpgeui	r2,r2,49152
 40085ac:	10000d1e 	bne	r2,zero,40085e4 <_ZN10W5100Class5writeEtPKht+0xe0>
			// transmit buffers  8000-87FF, 8800-8FFF, 9000-97FF, etc
			//  10## #nnn nnnn nnnn
			cmd[0] = addr >> 8;
 40085b0:	e0bffd0b 	ldhu	r2,-12(fp)
 40085b4:	1005d23a 	srai	r2,r2,8
 40085b8:	e0bff045 	stb	r2,-63(fp)
			cmd[1] = addr & 0xFF;
 40085bc:	e0bffd0b 	ldhu	r2,-12(fp)
 40085c0:	e0bff085 	stb	r2,-62(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x14; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x14; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x14; // 2K buffers
 40085c4:	e0bffd0b 	ldhu	r2,-12(fp)
 40085c8:	1005d1ba 	srai	r2,r2,6
 40085cc:	1007883a 	mov	r3,r2
 40085d0:	00bff804 	movi	r2,-32
 40085d4:	1884703a 	and	r2,r3,r2
 40085d8:	10800514 	ori	r2,r2,20
 40085dc:	e0bff0c5 	stb	r2,-61(fp)
 40085e0:	00000c06 	br	4008614 <_ZN10W5100Class5writeEtPKht+0x110>
			#endif
		} else {
			// receive buffers
			cmd[0] = addr >> 8;
 40085e4:	e0bffd0b 	ldhu	r2,-12(fp)
 40085e8:	1005d23a 	srai	r2,r2,8
 40085ec:	e0bff045 	stb	r2,-63(fp)
			cmd[1] = addr & 0xFF;
 40085f0:	e0bffd0b 	ldhu	r2,-12(fp)
 40085f4:	e0bff085 	stb	r2,-62(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x1C; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x1C; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x1C; // 2K buffers
 40085f8:	e0bffd0b 	ldhu	r2,-12(fp)
 40085fc:	1005d1ba 	srai	r2,r2,6
 4008600:	1007883a 	mov	r3,r2
 4008604:	00bff804 	movi	r2,-32
 4008608:	1884703a 	and	r2,r3,r2
 400860c:	10800714 	ori	r2,r2,28
 4008610:	e0bff0c5 	stb	r2,-61(fp)
			#endif
		}
		for (uint8_t i=0; i < len; i++) {
 4008614:	e03ff005 	stb	zero,-64(fp)
 4008618:	e0bff003 	ldbu	r2,-64(fp)
 400861c:	10ffffcc 	andi	r3,r2,65535
 4008620:	e0bfff0b 	ldhu	r2,-4(fp)
 4008624:	18800d2e 	bgeu	r3,r2,400865c <_ZN10W5100Class5writeEtPKht+0x158>
			cmd[i + 3] = buf[i];
 4008628:	e0bff003 	ldbu	r2,-64(fp)
 400862c:	108000c4 	addi	r2,r2,3
 4008630:	e0fff003 	ldbu	r3,-64(fp)
 4008634:	e13ffe17 	ldw	r4,-8(fp)
 4008638:	20c7883a 	add	r3,r4,r3
 400863c:	18c00003 	ldbu	r3,0(r3)
 4008640:	e13ff044 	addi	r4,fp,-63
 4008644:	2085883a 	add	r2,r4,r2
 4008648:	10c00005 	stb	r3,0(r2)
			cmd[2] = ((addr >> 7) & 0x60) | 0x1C; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x1C; // 2K buffers
			#endif
		}
		for (uint8_t i=0; i < len; i++) {
 400864c:	e0bff003 	ldbu	r2,-64(fp)
 4008650:	10800044 	addi	r2,r2,1
 4008654:	e0bff005 	stb	r2,-64(fp)
 4008658:	003fef06 	br	4008618 <__alt_data_end+0xfc008618>
			cmd[i + 3] = buf[i];
		}
		alt_avalon_spi_command(
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			len+3, cmd,            // Write length, write data pointer
 400865c:	e0bfff0b 	ldhu	r2,-4(fp)
 4008660:	108000c4 	addi	r2,r2,3
			#endif
		}
		for (uint8_t i=0; i < len; i++) {
			cmd[i + 3] = buf[i];
		}
		alt_avalon_spi_command(
 4008664:	1007883a 	mov	r3,r2
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			len+3, cmd,            // Write length, write data pointer
			0, NULL,       // Read data, read buffer pointer
			0                   // Flags
		);
 4008668:	e0bff044 	addi	r2,fp,-63
 400866c:	d8000215 	stw	zero,8(sp)
 4008670:	d8000115 	stw	zero,4(sp)
 4008674:	d8000015 	stw	zero,0(sp)
 4008678:	100f883a 	mov	r7,r2
 400867c:	180d883a 	mov	r6,r3
 4008680:	000b883a 	mov	r5,zero
 4008684:	01020034 	movhi	r4,2048
 4008688:	21142804 	addi	r4,r4,20640
 400868c:	40195600 	call	4019560 <alt_avalon_spi_command>
	return len;
 4008690:	e0bfff0b 	ldhu	r2,-4(fp)
}
 4008694:	e037883a 	mov	sp,fp
 4008698:	dfc00117 	ldw	ra,4(sp)
 400869c:	df000017 	ldw	fp,0(sp)
 40086a0:	dec00204 	addi	sp,sp,8
 40086a4:	f800283a 	ret

040086a8 <_ZN10W5100Class4readEtPht>:

uint16_t W5100Class::read(uint16_t addr, uint8_t *buf, uint16_t len)
{
 40086a8:	defff604 	addi	sp,sp,-40
 40086ac:	dfc00915 	stw	ra,36(sp)
 40086b0:	df000815 	stw	fp,32(sp)
 40086b4:	df000804 	addi	fp,sp,32
 40086b8:	2007883a 	mov	r3,r4
 40086bc:	e17ffe15 	stw	r5,-8(fp)
 40086c0:	3005883a 	mov	r2,r6
 40086c4:	e0fffd0d 	sth	r3,-12(fp)
 40086c8:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t cmd[4];

	// TODO test W5100 and 5200 support
	// this function is completely untested for those chips
	if (chip == 51) {
 40086cc:	d092dd03 	ldbu	r2,19316(gp)
 40086d0:	10803fcc 	andi	r2,r2,255
 40086d4:	10800cd8 	cmpnei	r2,r2,51
 40086d8:	1000211e 	bne	r2,zero,4008760 <_ZN10W5100Class4readEtPht+0xb8>
		// WARNING: COMPLETELY UNTESTED
		for (uint16_t i=0; i < len; i++) {
 40086dc:	e03ffb0d 	sth	zero,-20(fp)
 40086e0:	e0fffb0b 	ldhu	r3,-20(fp)
 40086e4:	e0bfff0b 	ldhu	r2,-4(fp)
 40086e8:	18807e2e 	bgeu	r3,r2,40088e4 <_ZN10W5100Class4readEtPht+0x23c>
//			#if 1
			cmd[0] = 0x0F;
 40086ec:	008003c4 	movi	r2,15
 40086f0:	e0bffb85 	stb	r2,-18(fp)
			cmd[1] = addr >> 8;
 40086f4:	e0bffd0b 	ldhu	r2,-12(fp)
 40086f8:	1005d23a 	srai	r2,r2,8
 40086fc:	e0bffbc5 	stb	r2,-17(fp)
			cmd[2] = addr & 0xFF;
 4008700:	e0bffd0b 	ldhu	r2,-12(fp)
 4008704:	e0bffc05 	stb	r2,-16(fp)

			alt_avalon_spi_command(
 4008708:	e0bffb0b 	ldhu	r2,-20(fp)
 400870c:	e0fffe17 	ldw	r3,-8(fp)
 4008710:	1885883a 	add	r2,r3,r2
				SPI_0_BASE, 0,      // SPI_0 base address, slave address
				3, cmd,            // Write length, write data pointer
				1, buf + i,       // Read data, read buffer pointer
				ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N      // Flags (toggle slave select each time...? that's what the old driver did)
			);
 4008714:	e13ffb84 	addi	r4,fp,-18
 4008718:	00c00084 	movi	r3,2
 400871c:	d8c00215 	stw	r3,8(sp)
 4008720:	d8800115 	stw	r2,4(sp)
 4008724:	00800044 	movi	r2,1
 4008728:	d8800015 	stw	r2,0(sp)
 400872c:	200f883a 	mov	r7,r4
 4008730:	018000c4 	movi	r6,3
 4008734:	000b883a 	mov	r5,zero
 4008738:	01020034 	movhi	r4,2048
 400873c:	21142804 	addi	r4,r4,20640
 4008740:	40195600 	call	4019560 <alt_avalon_spi_command>
			addr++;
 4008744:	e0bffd0b 	ldhu	r2,-12(fp)
 4008748:	10800044 	addi	r2,r2,1
 400874c:	e0bffd0d 	sth	r2,-12(fp)

	// TODO test W5100 and 5200 support
	// this function is completely untested for those chips
	if (chip == 51) {
		// WARNING: COMPLETELY UNTESTED
		for (uint16_t i=0; i < len; i++) {
 4008750:	e0bffb0b 	ldhu	r2,-20(fp)
 4008754:	10800044 	addi	r2,r2,1
 4008758:	e0bffb0d 	sth	r2,-20(fp)
 400875c:	003fe006 	br	40086e0 <__alt_data_end+0xfc0086e0>
//			SPI.transfer(cmd, 4); // TODO: why doesn't this work?
//			buf[i] = cmd[3];
//			addr++;
//			#endif
		}
	} else if (chip == 52) {
 4008760:	d092dd03 	ldbu	r2,19316(gp)
 4008764:	10803fcc 	andi	r2,r2,255
 4008768:	10800d18 	cmpnei	r2,r2,52
 400876c:	10001d1e 	bne	r2,zero,40087e4 <_ZN10W5100Class4readEtPht+0x13c>
		// WARNING: COMPLETELY UNTESTED
		memset(buf, 0, len);
 4008770:	e0bfff0b 	ldhu	r2,-4(fp)
 4008774:	100d883a 	mov	r6,r2
 4008778:	000b883a 	mov	r5,zero
 400877c:	e13ffe17 	ldw	r4,-8(fp)
 4008780:	400bd180 	call	400bd18 <memset>

		cmd[0] = addr >> 8;
 4008784:	e0bffd0b 	ldhu	r2,-12(fp)
 4008788:	1005d23a 	srai	r2,r2,8
 400878c:	e0bffb85 	stb	r2,-18(fp)
		cmd[1] = addr & 0xFF;
 4008790:	e0bffd0b 	ldhu	r2,-12(fp)
 4008794:	e0bffbc5 	stb	r2,-17(fp)
		cmd[2] = (len >> 8) & 0x7F;
 4008798:	e0bfff0b 	ldhu	r2,-4(fp)
 400879c:	1005d23a 	srai	r2,r2,8
 40087a0:	10801fcc 	andi	r2,r2,127
 40087a4:	e0bffc05 	stb	r2,-16(fp)
		cmd[3] = len & 0xFF;
 40087a8:	e0bfff0b 	ldhu	r2,-4(fp)
 40087ac:	e0bffc45 	stb	r2,-15(fp)
		alt_avalon_spi_command(
 40087b0:	e0bfff0b 	ldhu	r2,-4(fp)
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			4, cmd,            // Write length, write data pointer
			len, buf,       // Read data, read buffer pointer
			0                   // Flags
		);
 40087b4:	e13ffb84 	addi	r4,fp,-18
 40087b8:	d8000215 	stw	zero,8(sp)
 40087bc:	e0fffe17 	ldw	r3,-8(fp)
 40087c0:	d8c00115 	stw	r3,4(sp)
 40087c4:	d8800015 	stw	r2,0(sp)
 40087c8:	200f883a 	mov	r7,r4
 40087cc:	01800104 	movi	r6,4
 40087d0:	000b883a 	mov	r5,zero
 40087d4:	01020034 	movhi	r4,2048
 40087d8:	21142804 	addi	r4,r4,20640
 40087dc:	40195600 	call	4019560 <alt_avalon_spi_command>
 40087e0:	00004006 	br	40088e4 <_ZN10W5100Class4readEtPht+0x23c>
	} else { // chip == 55
		if (addr < 0x100) {
 40087e4:	e0bffd0b 	ldhu	r2,-12(fp)
 40087e8:	10804028 	cmpgeui	r2,r2,256
 40087ec:	1000051e 	bne	r2,zero,4008804 <_ZN10W5100Class4readEtPht+0x15c>
			// common registers 00nn
			cmd[0] = 0;
 40087f0:	e03ffb85 	stb	zero,-18(fp)
			cmd[1] = addr & 0xFF;
 40087f4:	e0bffd0b 	ldhu	r2,-12(fp)
 40087f8:	e0bffbc5 	stb	r2,-17(fp)
			cmd[2] = 0x00;
 40087fc:	e03ffc05 	stb	zero,-16(fp)
 4008800:	00002c06 	br	40088b4 <_ZN10W5100Class4readEtPht+0x20c>
		} else if (addr < 0x8000) {
 4008804:	e0bffd0b 	ldhu	r2,-12(fp)
 4008808:	10bfffcc 	andi	r2,r2,65535
 400880c:	10a0001c 	xori	r2,r2,32768
 4008810:	10a00004 	addi	r2,r2,-32768
 4008814:	10000b16 	blt	r2,zero,4008844 <_ZN10W5100Class4readEtPht+0x19c>
			// socket registers  10nn, 11nn, 12nn, 13nn, etc
			cmd[0] = 0;
 4008818:	e03ffb85 	stb	zero,-18(fp)
			cmd[1] = addr & 0xFF;
 400881c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008820:	e0bffbc5 	stb	r2,-17(fp)
			cmd[2] = ((addr >> 3) & 0xE0) | 0x08;
 4008824:	e0bffd0b 	ldhu	r2,-12(fp)
 4008828:	1005d0fa 	srai	r2,r2,3
 400882c:	1007883a 	mov	r3,r2
 4008830:	00bff804 	movi	r2,-32
 4008834:	1884703a 	and	r2,r3,r2
 4008838:	10800214 	ori	r2,r2,8
 400883c:	e0bffc05 	stb	r2,-16(fp)
 4008840:	00001c06 	br	40088b4 <_ZN10W5100Class4readEtPht+0x20c>
		} else if (addr < 0xC000) {
 4008844:	e0bffd0b 	ldhu	r2,-12(fp)
 4008848:	10b00028 	cmpgeui	r2,r2,49152
 400884c:	10000d1e 	bne	r2,zero,4008884 <_ZN10W5100Class4readEtPht+0x1dc>
			// transmit buffers  8000-87FF, 8800-8FFF, 9000-97FF, etc
			//  10## #nnn nnnn nnnn
			cmd[0] = addr >> 8;
 4008850:	e0bffd0b 	ldhu	r2,-12(fp)
 4008854:	1005d23a 	srai	r2,r2,8
 4008858:	e0bffb85 	stb	r2,-18(fp)
			cmd[1] = addr & 0xFF;
 400885c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008860:	e0bffbc5 	stb	r2,-17(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x10; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x10; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x10; // 2K buffers
 4008864:	e0bffd0b 	ldhu	r2,-12(fp)
 4008868:	1005d1ba 	srai	r2,r2,6
 400886c:	1007883a 	mov	r3,r2
 4008870:	00bff804 	movi	r2,-32
 4008874:	1884703a 	and	r2,r3,r2
 4008878:	10800414 	ori	r2,r2,16
 400887c:	e0bffc05 	stb	r2,-16(fp)
 4008880:	00000c06 	br	40088b4 <_ZN10W5100Class4readEtPht+0x20c>
			#endif
		} else {
			// receive buffers
			cmd[0] = addr >> 8;
 4008884:	e0bffd0b 	ldhu	r2,-12(fp)
 4008888:	1005d23a 	srai	r2,r2,8
 400888c:	e0bffb85 	stb	r2,-18(fp)
			cmd[1] = addr & 0xFF;
 4008890:	e0bffd0b 	ldhu	r2,-12(fp)
 4008894:	e0bffbc5 	stb	r2,-17(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x18; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x18; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x18; // 2K buffers
 4008898:	e0bffd0b 	ldhu	r2,-12(fp)
 400889c:	1005d1ba 	srai	r2,r2,6
 40088a0:	1007883a 	mov	r3,r2
 40088a4:	00bff804 	movi	r2,-32
 40088a8:	1884703a 	and	r2,r3,r2
 40088ac:	10800614 	ori	r2,r2,24
 40088b0:	e0bffc05 	stb	r2,-16(fp)
			#endif
		}

		alt_avalon_spi_command(
 40088b4:	e0bfff0b 	ldhu	r2,-4(fp)
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			3, cmd,            // Write length, write data pointer
			len, buf,       // Read data, read buffer pointer
			0                   // Flags
		);
 40088b8:	e13ffb84 	addi	r4,fp,-18
 40088bc:	d8000215 	stw	zero,8(sp)
 40088c0:	e0fffe17 	ldw	r3,-8(fp)
 40088c4:	d8c00115 	stw	r3,4(sp)
 40088c8:	d8800015 	stw	r2,0(sp)
 40088cc:	200f883a 	mov	r7,r4
 40088d0:	018000c4 	movi	r6,3
 40088d4:	000b883a 	mov	r5,zero
 40088d8:	01020034 	movhi	r4,2048
 40088dc:	21142804 	addi	r4,r4,20640
 40088e0:	40195600 	call	4019560 <alt_avalon_spi_command>
	}
	return len;
 40088e4:	e0bfff0b 	ldhu	r2,-4(fp)
}
 40088e8:	e037883a 	mov	sp,fp
 40088ec:	dfc00117 	ldw	ra,4(sp)
 40088f0:	df000017 	ldw	fp,0(sp)
 40088f4:	dec00204 	addi	sp,sp,8
 40088f8:	f800283a 	ret

040088fc <_ZN10W5100Class9execCmdSnEh7SockCMD>:

void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd)
{
 40088fc:	defffc04 	addi	sp,sp,-16
 4008900:	dfc00315 	stw	ra,12(sp)
 4008904:	df000215 	stw	fp,8(sp)
 4008908:	df000204 	addi	fp,sp,8
 400890c:	2005883a 	mov	r2,r4
 4008910:	e17fff15 	stw	r5,-4(fp)
 4008914:	e0bffe05 	stb	r2,-8(fp)
	// Send command to socket
	writeSnCR(s, _cmd);
 4008918:	e0fffe03 	ldbu	r3,-8(fp)
 400891c:	e0bfff17 	ldw	r2,-4(fp)
 4008920:	10803fcc 	andi	r2,r2,255
 4008924:	100b883a 	mov	r5,r2
 4008928:	1809883a 	mov	r4,r3
 400892c:	4008b940 	call	4008b94 <_ZN10W5100Class9writeSnCREhh>
	// Wait for command to complete
	while (readSnCR(s)) ;
 4008930:	e0bffe03 	ldbu	r2,-8(fp)
 4008934:	1009883a 	mov	r4,r2
 4008938:	4008be40 	call	4008be4 <_ZN10W5100Class8readSnCREh>
 400893c:	10803fcc 	andi	r2,r2,255
 4008940:	1004c03a 	cmpne	r2,r2,zero
 4008944:	10803fcc 	andi	r2,r2,255
 4008948:	10000126 	beq	r2,zero,4008950 <_ZN10W5100Class9execCmdSnEh7SockCMD+0x54>
 400894c:	003ff806 	br	4008930 <__alt_data_end+0xfc008930>
}
 4008950:	0001883a 	nop
 4008954:	e037883a 	mov	sp,fp
 4008958:	dfc00117 	ldw	ra,4(sp)
 400895c:	df000017 	ldw	fp,0(sp)
 4008960:	dec00204 	addi	sp,sp,8
 4008964:	f800283a 	ret

04008968 <_Z41__static_initialization_and_destruction_0ii>:
 4008968:	defffb04 	addi	sp,sp,-20
 400896c:	dfc00415 	stw	ra,16(sp)
 4008970:	df000315 	stw	fp,12(sp)
 4008974:	df000304 	addi	fp,sp,12
 4008978:	e13ffe15 	stw	r4,-8(fp)
 400897c:	e17fff15 	stw	r5,-4(fp)
 4008980:	e0bffe17 	ldw	r2,-8(fp)
 4008984:	10800058 	cmpnei	r2,r2,1
 4008988:	1000091e 	bne	r2,zero,40089b0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 400898c:	e0ffff17 	ldw	r3,-4(fp)
 4008990:	00bfffd4 	movui	r2,65535
 4008994:	1880061e 	bne	r3,r2,40089b0 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4008998:	d8000015 	stw	zero,0(sp)
 400899c:	000f883a 	mov	r7,zero
 40089a0:	000d883a 	mov	r6,zero
 40089a4:	000b883a 	mov	r5,zero
 40089a8:	d112dc04 	addi	r4,gp,19312
 40089ac:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
 40089b0:	0001883a 	nop
 40089b4:	e037883a 	mov	sp,fp
 40089b8:	dfc00117 	ldw	ra,4(sp)
 40089bc:	df000017 	ldw	fp,0(sp)
 40089c0:	dec00204 	addi	sp,sp,8
 40089c4:	f800283a 	ret

040089c8 <_GLOBAL__sub_I__ZN10W5100Class4chipE>:
 40089c8:	defffe04 	addi	sp,sp,-8
 40089cc:	dfc00115 	stw	ra,4(sp)
 40089d0:	df000015 	stw	fp,0(sp)
 40089d4:	d839883a 	mov	fp,sp
 40089d8:	017fffd4 	movui	r5,65535
 40089dc:	01000044 	movi	r4,1
 40089e0:	40089680 	call	4008968 <_Z41__static_initialization_and_destruction_0ii>
 40089e4:	e037883a 	mov	sp,fp
 40089e8:	dfc00117 	ldw	ra,4(sp)
 40089ec:	df000017 	ldw	fp,0(sp)
 40089f0:	dec00204 	addi	sp,sp,8
 40089f4:	f800283a 	ret

040089f8 <_ZN10W5100Class7writeMREh>:
    return read(address, _buff, size);            \
  }
  static W5100Linkstatus getLinkStatus();

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
 40089f8:	defffd04 	addi	sp,sp,-12
 40089fc:	dfc00215 	stw	ra,8(sp)
 4008a00:	df000115 	stw	fp,4(sp)
 4008a04:	df000104 	addi	fp,sp,4
 4008a08:	2005883a 	mov	r2,r4
 4008a0c:	e0bfff05 	stb	r2,-4(fp)
 4008a10:	e0bfff03 	ldbu	r2,-4(fp)
 4008a14:	100b883a 	mov	r5,r2
 4008a18:	0009883a 	mov	r4,zero
 4008a1c:	4003e7c0 	call	4003e7c <_ZN10W5100Class5writeEth>
 4008a20:	0001883a 	nop
 4008a24:	e037883a 	mov	sp,fp
 4008a28:	dfc00117 	ldw	ra,4(sp)
 4008a2c:	df000017 	ldw	fp,0(sp)
 4008a30:	dec00204 	addi	sp,sp,8
 4008a34:	f800283a 	ret

04008a38 <_ZN10W5100Class6readMREv>:
 4008a38:	defffe04 	addi	sp,sp,-8
 4008a3c:	dfc00115 	stw	ra,4(sp)
 4008a40:	df000015 	stw	fp,0(sp)
 4008a44:	d839883a 	mov	fp,sp
 4008a48:	0009883a 	mov	r4,zero
 4008a4c:	40075300 	call	4007530 <_ZN10W5100Class4readEt>
 4008a50:	e037883a 	mov	sp,fp
 4008a54:	dfc00117 	ldw	ra,4(sp)
 4008a58:	df000017 	ldw	fp,0(sp)
 4008a5c:	dec00204 	addi	sp,sp,8
 4008a60:	f800283a 	ret

04008a64 <_ZN10W5100Class9writeRMSREh>:
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size (W5100 only)
 4008a64:	defffd04 	addi	sp,sp,-12
 4008a68:	dfc00215 	stw	ra,8(sp)
 4008a6c:	df000115 	stw	fp,4(sp)
 4008a70:	df000104 	addi	fp,sp,4
 4008a74:	2005883a 	mov	r2,r4
 4008a78:	e0bfff05 	stb	r2,-4(fp)
 4008a7c:	e0bfff03 	ldbu	r2,-4(fp)
 4008a80:	100b883a 	mov	r5,r2
 4008a84:	01000684 	movi	r4,26
 4008a88:	4003e7c0 	call	4003e7c <_ZN10W5100Class5writeEth>
 4008a8c:	0001883a 	nop
 4008a90:	e037883a 	mov	sp,fp
 4008a94:	dfc00117 	ldw	ra,4(sp)
 4008a98:	df000017 	ldw	fp,0(sp)
 4008a9c:	dec00204 	addi	sp,sp,8
 4008aa0:	f800283a 	ret

04008aa4 <_ZN10W5100Class9writeTMSREh>:
  __GP_REGISTER8 (TMSR,   0x001B);    // Transmit memory size (W5100 only)
 4008aa4:	defffd04 	addi	sp,sp,-12
 4008aa8:	dfc00215 	stw	ra,8(sp)
 4008aac:	df000115 	stw	fp,4(sp)
 4008ab0:	df000104 	addi	fp,sp,4
 4008ab4:	2005883a 	mov	r2,r4
 4008ab8:	e0bfff05 	stb	r2,-4(fp)
 4008abc:	e0bfff03 	ldbu	r2,-4(fp)
 4008ac0:	100b883a 	mov	r5,r2
 4008ac4:	010006c4 	movi	r4,27
 4008ac8:	4003e7c0 	call	4003e7c <_ZN10W5100Class5writeEth>
 4008acc:	0001883a 	nop
 4008ad0:	e037883a 	mov	sp,fp
 4008ad4:	dfc00117 	ldw	ra,4(sp)
 4008ad8:	df000017 	ldw	fp,0(sp)
 4008adc:	dec00204 	addi	sp,sp,8
 4008ae0:	f800283a 	ret

04008ae4 <_ZN10W5100Class18readVERSIONR_W5200Ev>:
  __GP_REGISTER8 (PATR,   0x001C);    // Authentication type address in PPPoE mode
  __GP_REGISTER8 (PTIMER, 0x0028);    // PPP LCP Request Timer
  __GP_REGISTER8 (PMAGIC, 0x0029);    // PPP LCP Magic Number
  __GP_REGISTER_N(UIPR,   0x002A, 4); // Unreachable IP address in UDP mode (W5100 only)
  __GP_REGISTER16(UPORT,  0x002E);    // Unreachable Port address in UDP mode (W5100 only)
  __GP_REGISTER8 (VERSIONR_W5200,0x001F);   // Chip Version Register (W5200 only)
 4008ae4:	defffe04 	addi	sp,sp,-8
 4008ae8:	dfc00115 	stw	ra,4(sp)
 4008aec:	df000015 	stw	fp,0(sp)
 4008af0:	d839883a 	mov	fp,sp
 4008af4:	010007c4 	movi	r4,31
 4008af8:	40075300 	call	4007530 <_ZN10W5100Class4readEt>
 4008afc:	e037883a 	mov	sp,fp
 4008b00:	dfc00117 	ldw	ra,4(sp)
 4008b04:	df000017 	ldw	fp,0(sp)
 4008b08:	dec00204 	addi	sp,sp,8
 4008b0c:	f800283a 	ret

04008b10 <_ZN10W5100Class18readVERSIONR_W5500Ev>:
  __GP_REGISTER8 (VERSIONR_W5500,0x0039);   // Chip Version Register (W5500 only)
 4008b10:	defffe04 	addi	sp,sp,-8
 4008b14:	dfc00115 	stw	ra,4(sp)
 4008b18:	df000015 	stw	fp,0(sp)
 4008b1c:	d839883a 	mov	fp,sp
 4008b20:	01000e44 	movi	r4,57
 4008b24:	40075300 	call	4007530 <_ZN10W5100Class4readEt>
 4008b28:	e037883a 	mov	sp,fp
 4008b2c:	dfc00117 	ldw	ra,4(sp)
 4008b30:	df000017 	ldw	fp,0(sp)
 4008b34:	dec00204 	addi	sp,sp,8
 4008b38:	f800283a 	ret

04008b3c <_ZN10W5100Class17readPSTATUS_W5200Ev>:
  __GP_REGISTER8 (PSTATUS_W5200,     0x0035);    // PHY Status
 4008b3c:	defffe04 	addi	sp,sp,-8
 4008b40:	dfc00115 	stw	ra,4(sp)
 4008b44:	df000015 	stw	fp,0(sp)
 4008b48:	d839883a 	mov	fp,sp
 4008b4c:	01000d44 	movi	r4,53
 4008b50:	40075300 	call	4007530 <_ZN10W5100Class4readEt>
 4008b54:	e037883a 	mov	sp,fp
 4008b58:	dfc00117 	ldw	ra,4(sp)
 4008b5c:	df000017 	ldw	fp,0(sp)
 4008b60:	dec00204 	addi	sp,sp,8
 4008b64:	f800283a 	ret

04008b68 <_ZN10W5100Class17readPHYCFGR_W5500Ev>:
  __GP_REGISTER8 (PHYCFGR_W5500,     0x002E);    // PHY Configuration register, default: 10111xxx
 4008b68:	defffe04 	addi	sp,sp,-8
 4008b6c:	dfc00115 	stw	ra,4(sp)
 4008b70:	df000015 	stw	fp,0(sp)
 4008b74:	d839883a 	mov	fp,sp
 4008b78:	01000b84 	movi	r4,46
 4008b7c:	40075300 	call	4007530 <_ZN10W5100Class4readEt>
 4008b80:	e037883a 	mov	sp,fp
 4008b84:	dfc00117 	ldw	ra,4(sp)
 4008b88:	df000017 	ldw	fp,0(sp)
 4008b8c:	dec00204 	addi	sp,sp,8
 4008b90:	f800283a 	ret

04008b94 <_ZN10W5100Class9writeSnCREhh>:
    return readSn(_s, address, _buff, size);                 \
  }

public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
 4008b94:	defffc04 	addi	sp,sp,-16
 4008b98:	dfc00315 	stw	ra,12(sp)
 4008b9c:	df000215 	stw	fp,8(sp)
 4008ba0:	df000204 	addi	fp,sp,8
 4008ba4:	2007883a 	mov	r3,r4
 4008ba8:	2805883a 	mov	r2,r5
 4008bac:	e0fffe05 	stb	r3,-8(fp)
 4008bb0:	e0bfff05 	stb	r2,-4(fp)
 4008bb4:	e0bffe03 	ldbu	r2,-8(fp)
 4008bb8:	e0ffff03 	ldbu	r3,-4(fp)
 4008bbc:	180d883a 	mov	r6,r3
 4008bc0:	01400044 	movi	r5,1
 4008bc4:	1009883a 	mov	r4,r2
 4008bc8:	40075d40 	call	40075d4 <_ZN10W5100Class7writeSnEhth>
 4008bcc:	0001883a 	nop
 4008bd0:	e037883a 	mov	sp,fp
 4008bd4:	dfc00117 	ldw	ra,4(sp)
 4008bd8:	df000017 	ldw	fp,0(sp)
 4008bdc:	dec00204 	addi	sp,sp,8
 4008be0:	f800283a 	ret

04008be4 <_ZN10W5100Class8readSnCREh>:
 4008be4:	defffd04 	addi	sp,sp,-12
 4008be8:	dfc00215 	stw	ra,8(sp)
 4008bec:	df000115 	stw	fp,4(sp)
 4008bf0:	df000104 	addi	fp,sp,4
 4008bf4:	2005883a 	mov	r2,r4
 4008bf8:	e0bfff05 	stb	r2,-4(fp)
 4008bfc:	e0bfff03 	ldbu	r2,-4(fp)
 4008c00:	01400044 	movi	r5,1
 4008c04:	1009883a 	mov	r4,r2
 4008c08:	40075740 	call	4007574 <_ZN10W5100Class6readSnEht>
 4008c0c:	e037883a 	mov	sp,fp
 4008c10:	dfc00117 	ldw	ra,4(sp)
 4008c14:	df000017 	ldw	fp,0(sp)
 4008c18:	dec00204 	addi	sp,sp,8
 4008c1c:	f800283a 	ret

04008c20 <_ZN10W5100Class14writeSnRX_SIZEEhh>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER8(SnRX_SIZE,   0x001E)        // RX Memory Size (W5200 only)
 4008c20:	defffc04 	addi	sp,sp,-16
 4008c24:	dfc00315 	stw	ra,12(sp)
 4008c28:	df000215 	stw	fp,8(sp)
 4008c2c:	df000204 	addi	fp,sp,8
 4008c30:	2007883a 	mov	r3,r4
 4008c34:	2805883a 	mov	r2,r5
 4008c38:	e0fffe05 	stb	r3,-8(fp)
 4008c3c:	e0bfff05 	stb	r2,-4(fp)
 4008c40:	e0bffe03 	ldbu	r2,-8(fp)
 4008c44:	e0ffff03 	ldbu	r3,-4(fp)
 4008c48:	180d883a 	mov	r6,r3
 4008c4c:	01400784 	movi	r5,30
 4008c50:	1009883a 	mov	r4,r2
 4008c54:	40075d40 	call	40075d4 <_ZN10W5100Class7writeSnEhth>
 4008c58:	0001883a 	nop
 4008c5c:	e037883a 	mov	sp,fp
 4008c60:	dfc00117 	ldw	ra,4(sp)
 4008c64:	df000017 	ldw	fp,0(sp)
 4008c68:	dec00204 	addi	sp,sp,8
 4008c6c:	f800283a 	ret

04008c70 <_ZN10W5100Class14writeSnTX_SIZEEhh>:
  __SOCKET_REGISTER8(SnTX_SIZE,   0x001F)        // RX Memory Size (W5200 only)
 4008c70:	defffc04 	addi	sp,sp,-16
 4008c74:	dfc00315 	stw	ra,12(sp)
 4008c78:	df000215 	stw	fp,8(sp)
 4008c7c:	df000204 	addi	fp,sp,8
 4008c80:	2007883a 	mov	r3,r4
 4008c84:	2805883a 	mov	r2,r5
 4008c88:	e0fffe05 	stb	r3,-8(fp)
 4008c8c:	e0bfff05 	stb	r2,-4(fp)
 4008c90:	e0bffe03 	ldbu	r2,-8(fp)
 4008c94:	e0ffff03 	ldbu	r3,-4(fp)
 4008c98:	180d883a 	mov	r6,r3
 4008c9c:	014007c4 	movi	r5,31
 4008ca0:	1009883a 	mov	r4,r2
 4008ca4:	40075d40 	call	40075d4 <_ZN10W5100Class7writeSnEhth>
 4008ca8:	0001883a 	nop
 4008cac:	e037883a 	mov	sp,fp
 4008cb0:	dfc00117 	ldw	ra,4(sp)
 4008cb4:	df000017 	ldw	fp,0(sp)
 4008cb8:	dec00204 	addi	sp,sp,8
 4008cbc:	f800283a 	ret

04008cc0 <main>:
//}




int main() {
 4008cc0:	defffe04 	addi	sp,sp,-8
 4008cc4:	dfc00115 	stw	ra,4(sp)
 4008cc8:	df000015 	stw	fp,0(sp)
 4008ccc:	d839883a 	mov	fp,sp
	init_color_palette();
 4008cd0:	40003340 	call	4000334 <init_color_palette>
	draw_background();
 4008cd4:	40006000 	call	4000600 <draw_background>
	draw_sample();
 4008cd8:	4000e840 	call	4000e84 <draw_sample>
	return 1;
 4008cdc:	00800044 	movi	r2,1
}
 4008ce0:	e037883a 	mov	sp,fp
 4008ce4:	dfc00117 	ldw	ra,4(sp)
 4008ce8:	df000017 	ldw	fp,0(sp)
 4008cec:	dec00204 	addi	sp,sp,8
 4008cf0:	f800283a 	ret

04008cf4 <_Z41__static_initialization_and_destruction_0ii>:
 4008cf4:	defffb04 	addi	sp,sp,-20
 4008cf8:	dfc00415 	stw	ra,16(sp)
 4008cfc:	df000315 	stw	fp,12(sp)
 4008d00:	df000304 	addi	fp,sp,12
 4008d04:	e13ffe15 	stw	r4,-8(fp)
 4008d08:	e17fff15 	stw	r5,-4(fp)
 4008d0c:	e0bffe17 	ldw	r2,-8(fp)
 4008d10:	10800058 	cmpnei	r2,r2,1
 4008d14:	1000091e 	bne	r2,zero,4008d3c <_Z41__static_initialization_and_destruction_0ii+0x48>
 4008d18:	e0ffff17 	ldw	r3,-4(fp)
 4008d1c:	00bfffd4 	movui	r2,65535
 4008d20:	1880061e 	bne	r3,r2,4008d3c <_Z41__static_initialization_and_destruction_0ii+0x48>
 4008d24:	d8000015 	stw	zero,0(sp)
 4008d28:	000f883a 	mov	r7,zero
 4008d2c:	000d883a 	mov	r6,zero
 4008d30:	000b883a 	mov	r5,zero
 4008d34:	d112de04 	addi	r4,gp,19320
 4008d38:	4007c700 	call	4007c70 <_ZN9IPAddressC1Ehhhh>
 4008d3c:	0001883a 	nop
 4008d40:	e037883a 	mov	sp,fp
 4008d44:	dfc00117 	ldw	ra,4(sp)
 4008d48:	df000017 	ldw	fp,0(sp)
 4008d4c:	dec00204 	addi	sp,sp,8
 4008d50:	f800283a 	ret

04008d54 <_GLOBAL__sub_I_mac>:
 4008d54:	defffe04 	addi	sp,sp,-8
 4008d58:	dfc00115 	stw	ra,4(sp)
 4008d5c:	df000015 	stw	fp,0(sp)
 4008d60:	d839883a 	mov	fp,sp
 4008d64:	017fffd4 	movui	r5,65535
 4008d68:	01000044 	movi	r4,1
 4008d6c:	4008cf40 	call	4008cf4 <_Z41__static_initialization_and_destruction_0ii>
 4008d70:	e037883a 	mov	sp,fp
 4008d74:	dfc00117 	ldw	ra,4(sp)
 4008d78:	df000017 	ldw	fp,0(sp)
 4008d7c:	dec00204 	addi	sp,sp,8
 4008d80:	f800283a 	ret

04008d84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 4008d84:	008100b4 	movhi	r2,1026
 4008d88:	10b00c04 	addi	r2,r2,-16336
 4008d8c:	20800015 	stw	r2,0(r4)
 4008d90:	400a4b81 	jmpi	400a4b8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

04008d94 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 4008d94:	defffe04 	addi	sp,sp,-8
 4008d98:	008100b4 	movhi	r2,1026
 4008d9c:	dc000015 	stw	r16,0(sp)
 4008da0:	dfc00115 	stw	ra,4(sp)
 4008da4:	10b00c04 	addi	r2,r2,-16336
 4008da8:	20800015 	stw	r2,0(r4)
 4008dac:	2021883a 	mov	r16,r4
 4008db0:	400a4b80 	call	400a4b8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 4008db4:	8009883a 	mov	r4,r16
 4008db8:	dfc00117 	ldw	ra,4(sp)
 4008dbc:	dc000017 	ldw	r16,0(sp)
 4008dc0:	dec00204 	addi	sp,sp,8
 4008dc4:	400a0881 	jmpi	400a088 <_ZdlPv>

04008dc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 4008dc8:	defff504 	addi	sp,sp,-44
 4008dcc:	dc000115 	stw	r16,4(sp)
 4008dd0:	38800117 	ldw	r2,4(r7)
 4008dd4:	24000117 	ldw	r16,4(r4)
 4008dd8:	df000915 	stw	fp,36(sp)
 4008ddc:	ddc00815 	stw	r23,32(sp)
 4008de0:	dd800715 	stw	r22,28(sp)
 4008de4:	dcc00415 	stw	r19,16(sp)
 4008de8:	dc800315 	stw	r18,12(sp)
 4008dec:	dc400215 	stw	r17,8(sp)
 4008df0:	dfc00a15 	stw	ra,40(sp)
 4008df4:	dd400615 	stw	r21,24(sp)
 4008df8:	dd000515 	stw	r20,20(sp)
 4008dfc:	2823883a 	mov	r17,r5
 4008e00:	3039883a 	mov	fp,r6
 4008e04:	dcc00b17 	ldw	r19,44(sp)
 4008e08:	ddc00c17 	ldw	r23,48(sp)
 4008e0c:	dd800d17 	ldw	r22,52(sp)
 4008e10:	dc800e17 	ldw	r18,56(sp)
 4008e14:	80800b26 	beq	r16,r2,4008e44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 4008e18:	80c00007 	ldb	r3,0(r16)
 4008e1c:	2029883a 	mov	r20,r4
 4008e20:	01000a84 	movi	r4,42
 4008e24:	382b883a 	mov	r21,r7
 4008e28:	19001a26 	beq	r3,r4,4008e94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 4008e2c:	100b883a 	mov	r5,r2
 4008e30:	8009883a 	mov	r4,r16
 4008e34:	d8c00015 	stw	r3,0(sp)
 4008e38:	400c2d80 	call	400c2d8 <strcmp>
 4008e3c:	d8c00017 	ldw	r3,0(sp)
 4008e40:	1000141e 	bne	r2,zero,4008e94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 4008e44:	94c00015 	stw	r19,0(r18)
 4008e48:	97000115 	stw	fp,4(r18)
 4008e4c:	88002816 	blt	r17,zero,4008ef0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 4008e50:	9c63883a 	add	r17,r19,r17
 4008e54:	b4403226 	beq	r22,r17,4008f20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 4008e58:	00800044 	movi	r2,1
 4008e5c:	90800315 	stw	r2,12(r18)
 4008e60:	0005883a 	mov	r2,zero
 4008e64:	dfc00a17 	ldw	ra,40(sp)
 4008e68:	df000917 	ldw	fp,36(sp)
 4008e6c:	ddc00817 	ldw	r23,32(sp)
 4008e70:	dd800717 	ldw	r22,28(sp)
 4008e74:	dd400617 	ldw	r21,24(sp)
 4008e78:	dd000517 	ldw	r20,20(sp)
 4008e7c:	dcc00417 	ldw	r19,16(sp)
 4008e80:	dc800317 	ldw	r18,12(sp)
 4008e84:	dc400217 	ldw	r17,8(sp)
 4008e88:	dc000117 	ldw	r16,4(sp)
 4008e8c:	dec00b04 	addi	sp,sp,44
 4008e90:	f800283a 	ret
 4008e94:	9d801926 	beq	r19,r22,4008efc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 4008e98:	a1000217 	ldw	r4,8(r20)
 4008e9c:	a80f883a 	mov	r7,r21
 4008ea0:	e00d883a 	mov	r6,fp
 4008ea4:	20800017 	ldw	r2,0(r4)
 4008ea8:	dc800e15 	stw	r18,56(sp)
 4008eac:	dd800d15 	stw	r22,52(sp)
 4008eb0:	ddc00c15 	stw	r23,48(sp)
 4008eb4:	dcc00b15 	stw	r19,44(sp)
 4008eb8:	10800717 	ldw	r2,28(r2)
 4008ebc:	880b883a 	mov	r5,r17
 4008ec0:	dfc00a17 	ldw	ra,40(sp)
 4008ec4:	df000917 	ldw	fp,36(sp)
 4008ec8:	ddc00817 	ldw	r23,32(sp)
 4008ecc:	dd800717 	ldw	r22,28(sp)
 4008ed0:	dd400617 	ldw	r21,24(sp)
 4008ed4:	dd000517 	ldw	r20,20(sp)
 4008ed8:	dcc00417 	ldw	r19,16(sp)
 4008edc:	dc800317 	ldw	r18,12(sp)
 4008ee0:	dc400217 	ldw	r17,8(sp)
 4008ee4:	dc000117 	ldw	r16,4(sp)
 4008ee8:	dec00b04 	addi	sp,sp,44
 4008eec:	1000683a 	jmp	r2
 4008ef0:	00bfff84 	movi	r2,-2
 4008ef4:	88bfda1e 	bne	r17,r2,4008e60 <__alt_data_end+0xfc008e60>
 4008ef8:	003fd706 	br	4008e58 <__alt_data_end+0xfc008e58>
 4008efc:	b9400117 	ldw	r5,4(r23)
 4008f00:	81400526 	beq	r16,r5,4008f18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 4008f04:	00800a84 	movi	r2,42
 4008f08:	18bfe326 	beq	r3,r2,4008e98 <__alt_data_end+0xfc008e98>
 4008f0c:	8009883a 	mov	r4,r16
 4008f10:	400c2d80 	call	400c2d8 <strcmp>
 4008f14:	103fe01e 	bne	r2,zero,4008e98 <__alt_data_end+0xfc008e98>
 4008f18:	97000215 	stw	fp,8(r18)
 4008f1c:	003fd006 	br	4008e60 <__alt_data_end+0xfc008e60>
 4008f20:	00800184 	movi	r2,6
 4008f24:	003fcd06 	br	4008e5c <__alt_data_end+0xfc008e5c>

04008f28 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 4008f28:	defffa04 	addi	sp,sp,-24
 4008f2c:	dc000215 	stw	r16,8(sp)
 4008f30:	dc000617 	ldw	r16,24(sp)
 4008f34:	dc800415 	stw	r18,16(sp)
 4008f38:	dc400315 	stw	r17,12(sp)
 4008f3c:	dfc00515 	stw	ra,20(sp)
 4008f40:	2023883a 	mov	r17,r4
 4008f44:	2825883a 	mov	r18,r5
 4008f48:	81800b26 	beq	r16,r6,4008f78 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 4008f4c:	89000217 	ldw	r4,8(r17)
 4008f50:	900b883a 	mov	r5,r18
 4008f54:	20800017 	ldw	r2,0(r4)
 4008f58:	dc000615 	stw	r16,24(sp)
 4008f5c:	10800817 	ldw	r2,32(r2)
 4008f60:	dfc00517 	ldw	ra,20(sp)
 4008f64:	dc800417 	ldw	r18,16(sp)
 4008f68:	dc400317 	ldw	r17,12(sp)
 4008f6c:	dc000217 	ldw	r16,8(sp)
 4008f70:	dec00604 	addi	sp,sp,24
 4008f74:	1000683a 	jmp	r2
 4008f78:	21000117 	ldw	r4,4(r4)
 4008f7c:	39400117 	ldw	r5,4(r7)
 4008f80:	21400926 	beq	r4,r5,4008fa8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 4008f84:	20c00007 	ldb	r3,0(r4)
 4008f88:	00800a84 	movi	r2,42
 4008f8c:	18bfef26 	beq	r3,r2,4008f4c <__alt_data_end+0xfc008f4c>
 4008f90:	d9800015 	stw	r6,0(sp)
 4008f94:	d9c00115 	stw	r7,4(sp)
 4008f98:	400c2d80 	call	400c2d8 <strcmp>
 4008f9c:	d9800017 	ldw	r6,0(sp)
 4008fa0:	d9c00117 	ldw	r7,4(sp)
 4008fa4:	103fe91e 	bne	r2,zero,4008f4c <__alt_data_end+0xfc008f4c>
 4008fa8:	00800184 	movi	r2,6
 4008fac:	dfc00517 	ldw	ra,20(sp)
 4008fb0:	dc800417 	ldw	r18,16(sp)
 4008fb4:	dc400317 	ldw	r17,12(sp)
 4008fb8:	dc000217 	ldw	r16,8(sp)
 4008fbc:	dec00604 	addi	sp,sp,24
 4008fc0:	f800283a 	ret

04008fc4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 4008fc4:	defffb04 	addi	sp,sp,-20
 4008fc8:	dcc00315 	stw	r19,12(sp)
 4008fcc:	dc800215 	stw	r18,8(sp)
 4008fd0:	dc400115 	stw	r17,4(sp)
 4008fd4:	dc000015 	stw	r16,0(sp)
 4008fd8:	dfc00415 	stw	ra,16(sp)
 4008fdc:	2027883a 	mov	r19,r4
 4008fe0:	2821883a 	mov	r16,r5
 4008fe4:	3023883a 	mov	r17,r6
 4008fe8:	3825883a 	mov	r18,r7
 4008fec:	400a4fc0 	call	400a4fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 4008ff0:	10c03fcc 	andi	r3,r2,255
 4008ff4:	18000726 	beq	r3,zero,4009014 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 4008ff8:	dfc00417 	ldw	ra,16(sp)
 4008ffc:	dcc00317 	ldw	r19,12(sp)
 4009000:	dc800217 	ldw	r18,8(sp)
 4009004:	dc400117 	ldw	r17,4(sp)
 4009008:	dc000017 	ldw	r16,0(sp)
 400900c:	dec00504 	addi	sp,sp,20
 4009010:	f800283a 	ret
 4009014:	99000217 	ldw	r4,8(r19)
 4009018:	900f883a 	mov	r7,r18
 400901c:	880d883a 	mov	r6,r17
 4009020:	20800017 	ldw	r2,0(r4)
 4009024:	800b883a 	mov	r5,r16
 4009028:	10800617 	ldw	r2,24(r2)
 400902c:	dfc00417 	ldw	ra,16(sp)
 4009030:	dcc00317 	ldw	r19,12(sp)
 4009034:	dc800217 	ldw	r18,8(sp)
 4009038:	dc400117 	ldw	r17,4(sp)
 400903c:	dc000017 	ldw	r16,0(sp)
 4009040:	dec00504 	addi	sp,sp,20
 4009044:	1000683a 	jmp	r2

04009048 <_ZNSt9type_infoD1Ev>:
 4009048:	f800283a 	ret

0400904c <_ZNKSt9type_info14__is_pointer_pEv>:
 400904c:	0005883a 	mov	r2,zero
 4009050:	f800283a 	ret

04009054 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 4009054:	0005883a 	mov	r2,zero
 4009058:	f800283a 	ret

0400905c <_ZNSt9type_infoD0Ev>:
 400905c:	400a0881 	jmpi	400a088 <_ZdlPv>

04009060 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 4009060:	21000117 	ldw	r4,4(r4)
 4009064:	29400117 	ldw	r5,4(r5)
 4009068:	21400c26 	beq	r4,r5,400909c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 400906c:	20c00007 	ldb	r3,0(r4)
 4009070:	00800a84 	movi	r2,42
 4009074:	18800726 	beq	r3,r2,4009094 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 4009078:	deffff04 	addi	sp,sp,-4
 400907c:	dfc00015 	stw	ra,0(sp)
 4009080:	400c2d80 	call	400c2d8 <strcmp>
 4009084:	1005003a 	cmpeq	r2,r2,zero
 4009088:	dfc00017 	ldw	ra,0(sp)
 400908c:	dec00104 	addi	sp,sp,4
 4009090:	f800283a 	ret
 4009094:	0005883a 	mov	r2,zero
 4009098:	f800283a 	ret
 400909c:	00800044 	movi	r2,1
 40090a0:	f800283a 	ret

040090a4 <_ZL21size_of_encoded_valueh>:
 40090a4:	deffff04 	addi	sp,sp,-4
 40090a8:	dfc00015 	stw	ra,0(sp)
 40090ac:	20c03fcc 	andi	r3,r4,255
 40090b0:	00803fc4 	movi	r2,255
 40090b4:	18802026 	beq	r3,r2,4009138 <_ZL21size_of_encoded_valueh+0x94>
 40090b8:	210001cc 	andi	r4,r4,7
 40090bc:	00800144 	movi	r2,5
 40090c0:	11001c36 	bltu	r2,r4,4009134 <_ZL21size_of_encoded_valueh+0x90>
 40090c4:	200890ba 	slli	r4,r4,2
 40090c8:	00810074 	movhi	r2,1025
 40090cc:	10a43704 	addi	r2,r2,-28452
 40090d0:	2089883a 	add	r4,r4,r2
 40090d4:	20800017 	ldw	r2,0(r4)
 40090d8:	1000683a 	jmp	r2
 40090dc:	040090f4 	movhi	r16,579
 40090e0:	04009134 	movhi	r16,580
 40090e4:	04009104 	movi	r16,580
 40090e8:	040090f4 	movhi	r16,579
 40090ec:	04009124 	muli	r16,zero,580
 40090f0:	04009114 	movui	r16,580
 40090f4:	00800104 	movi	r2,4
 40090f8:	dfc00017 	ldw	ra,0(sp)
 40090fc:	dec00104 	addi	sp,sp,4
 4009100:	f800283a 	ret
 4009104:	00800084 	movi	r2,2
 4009108:	dfc00017 	ldw	ra,0(sp)
 400910c:	dec00104 	addi	sp,sp,4
 4009110:	f800283a 	ret
 4009114:	00800044 	movi	r2,1
 4009118:	dfc00017 	ldw	ra,0(sp)
 400911c:	dec00104 	addi	sp,sp,4
 4009120:	f800283a 	ret
 4009124:	00800204 	movi	r2,8
 4009128:	dfc00017 	ldw	ra,0(sp)
 400912c:	dec00104 	addi	sp,sp,4
 4009130:	f800283a 	ret
 4009134:	400b2bc0 	call	400b2bc <abort>
 4009138:	0005883a 	mov	r2,zero
 400913c:	dfc00017 	ldw	ra,0(sp)
 4009140:	dec00104 	addi	sp,sp,4
 4009144:	f800283a 	ret

04009148 <_ZL28read_encoded_value_with_basehjPKhPj>:
 4009148:	deffff04 	addi	sp,sp,-4
 400914c:	dfc00015 	stw	ra,0(sp)
 4009150:	20c03fcc 	andi	r3,r4,255
 4009154:	00801404 	movi	r2,80
 4009158:	18807326 	beq	r3,r2,4009328 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
 400915c:	20c003cc 	andi	r3,r4,15
 4009160:	00800304 	movi	r2,12
 4009164:	10c06f36 	bltu	r2,r3,4009324 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
 4009168:	180690ba 	slli	r3,r3,2
 400916c:	02010074 	movhi	r8,1025
 4009170:	42246004 	addi	r8,r8,-28288
 4009174:	1a07883a 	add	r3,r3,r8
 4009178:	18800017 	ldw	r2,0(r3)
 400917c:	1000683a 	jmp	r2
 4009180:	040091b4 	movhi	r16,582
 4009184:	040092d0 	cmplti	r16,zero,587
 4009188:	0400930c 	andi	r16,zero,588
 400918c:	040091b4 	movhi	r16,582
 4009190:	04009218 	cmpnei	r16,zero,584
 4009194:	0400926c 	andhi	r16,zero,585
 4009198:	04009324 	muli	r16,zero,588
 400919c:	04009324 	muli	r16,zero,588
 40091a0:	04009324 	muli	r16,zero,588
 40091a4:	04009278 	rdprs	r16,zero,585
 40091a8:	04009248 	cmpgei	r16,zero,585
 40091ac:	040091b4 	movhi	r16,582
 40091b0:	04009218 	cmpnei	r16,zero,584
 40091b4:	30800043 	ldbu	r2,1(r6)
 40091b8:	30c00083 	ldbu	r3,2(r6)
 40091bc:	324000c3 	ldbu	r9,3(r6)
 40091c0:	32000003 	ldbu	r8,0(r6)
 40091c4:	1004923a 	slli	r2,r2,8
 40091c8:	1806943a 	slli	r3,r3,16
 40091cc:	4812963a 	slli	r9,r9,24
 40091d0:	1204b03a 	or	r2,r2,r8
 40091d4:	1884b03a 	or	r2,r3,r2
 40091d8:	4886b03a 	or	r3,r9,r2
 40091dc:	30800104 	addi	r2,r6,4
 40091e0:	18000926 	beq	r3,zero,4009208 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 40091e4:	22001c0c 	andi	r8,r4,112
 40091e8:	02400404 	movi	r9,16
 40091ec:	42405726 	beq	r8,r9,400934c <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
 40091f0:	21003fcc 	andi	r4,r4,255
 40091f4:	2100201c 	xori	r4,r4,128
 40091f8:	213fe004 	addi	r4,r4,-128
 40091fc:	1947883a 	add	r3,r3,r5
 4009200:	2000010e 	bge	r4,zero,4009208 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 4009204:	18c00017 	ldw	r3,0(r3)
 4009208:	38c00015 	stw	r3,0(r7)
 400920c:	dfc00017 	ldw	ra,0(sp)
 4009210:	dec00104 	addi	sp,sp,4
 4009214:	f800283a 	ret
 4009218:	30800043 	ldbu	r2,1(r6)
 400921c:	30c00083 	ldbu	r3,2(r6)
 4009220:	324000c3 	ldbu	r9,3(r6)
 4009224:	32000003 	ldbu	r8,0(r6)
 4009228:	1004923a 	slli	r2,r2,8
 400922c:	1806943a 	slli	r3,r3,16
 4009230:	4812963a 	slli	r9,r9,24
 4009234:	1204b03a 	or	r2,r2,r8
 4009238:	1884b03a 	or	r2,r3,r2
 400923c:	4886b03a 	or	r3,r9,r2
 4009240:	30800204 	addi	r2,r6,8
 4009244:	003fe606 	br	40091e0 <__alt_data_end+0xfc0091e0>
 4009248:	30c00043 	ldbu	r3,1(r6)
 400924c:	32000003 	ldbu	r8,0(r6)
 4009250:	30800084 	addi	r2,r6,2
 4009254:	1806923a 	slli	r3,r3,8
 4009258:	1a06b03a 	or	r3,r3,r8
 400925c:	18ffffcc 	andi	r3,r3,65535
 4009260:	18e0001c 	xori	r3,r3,32768
 4009264:	18e00004 	addi	r3,r3,-32768
 4009268:	003fdd06 	br	40091e0 <__alt_data_end+0xfc0091e0>
 400926c:	30c00003 	ldbu	r3,0(r6)
 4009270:	30800044 	addi	r2,r6,1
 4009274:	003fda06 	br	40091e0 <__alt_data_end+0xfc0091e0>
 4009278:	3017883a 	mov	r11,r6
 400927c:	0007883a 	mov	r3,zero
 4009280:	0013883a 	mov	r9,zero
 4009284:	5a800003 	ldbu	r10,0(r11)
 4009288:	58800044 	addi	r2,r11,1
 400928c:	1017883a 	mov	r11,r2
 4009290:	52001fcc 	andi	r8,r10,127
 4009294:	4250983a 	sll	r8,r8,r9
 4009298:	53003fcc 	andi	r12,r10,255
 400929c:	6300201c 	xori	r12,r12,128
 40092a0:	633fe004 	addi	r12,r12,-128
 40092a4:	1a06b03a 	or	r3,r3,r8
 40092a8:	4a4001c4 	addi	r9,r9,7
 40092ac:	603ff516 	blt	r12,zero,4009284 <__alt_data_end+0xfc009284>
 40092b0:	020007c4 	movi	r8,31
 40092b4:	427fca36 	bltu	r8,r9,40091e0 <__alt_data_end+0xfc0091e0>
 40092b8:	5280100c 	andi	r10,r10,64
 40092bc:	503fc826 	beq	r10,zero,40091e0 <__alt_data_end+0xfc0091e0>
 40092c0:	023fffc4 	movi	r8,-1
 40092c4:	4252983a 	sll	r9,r8,r9
 40092c8:	1a46b03a 	or	r3,r3,r9
 40092cc:	003fc506 	br	40091e4 <__alt_data_end+0xfc0091e4>
 40092d0:	3017883a 	mov	r11,r6
 40092d4:	0007883a 	mov	r3,zero
 40092d8:	0015883a 	mov	r10,zero
 40092dc:	5a000003 	ldbu	r8,0(r11)
 40092e0:	58800044 	addi	r2,r11,1
 40092e4:	1017883a 	mov	r11,r2
 40092e8:	42401fcc 	andi	r9,r8,127
 40092ec:	4a92983a 	sll	r9,r9,r10
 40092f0:	42003fcc 	andi	r8,r8,255
 40092f4:	4200201c 	xori	r8,r8,128
 40092f8:	423fe004 	addi	r8,r8,-128
 40092fc:	1a46b03a 	or	r3,r3,r9
 4009300:	528001c4 	addi	r10,r10,7
 4009304:	403ff516 	blt	r8,zero,40092dc <__alt_data_end+0xfc0092dc>
 4009308:	003fb506 	br	40091e0 <__alt_data_end+0xfc0091e0>
 400930c:	30c00043 	ldbu	r3,1(r6)
 4009310:	32000003 	ldbu	r8,0(r6)
 4009314:	30800084 	addi	r2,r6,2
 4009318:	1806923a 	slli	r3,r3,8
 400931c:	1a06b03a 	or	r3,r3,r8
 4009320:	003faf06 	br	40091e0 <__alt_data_end+0xfc0091e0>
 4009324:	400b2bc0 	call	400b2bc <abort>
 4009328:	308000c4 	addi	r2,r6,3
 400932c:	00ffff04 	movi	r3,-4
 4009330:	10c4703a 	and	r2,r2,r3
 4009334:	10c00017 	ldw	r3,0(r2)
 4009338:	10800104 	addi	r2,r2,4
 400933c:	38c00015 	stw	r3,0(r7)
 4009340:	dfc00017 	ldw	ra,0(sp)
 4009344:	dec00104 	addi	sp,sp,4
 4009348:	f800283a 	ret
 400934c:	300b883a 	mov	r5,r6
 4009350:	003fa706 	br	40091f0 <__alt_data_end+0xfc0091f0>

04009354 <_ZL15get_ttype_entryP16lsda_header_infom>:
 4009354:	defffc04 	addi	sp,sp,-16
 4009358:	dfc00315 	stw	ra,12(sp)
 400935c:	dc400215 	stw	r17,8(sp)
 4009360:	dc000115 	stw	r16,4(sp)
 4009364:	2021883a 	mov	r16,r4
 4009368:	21000503 	ldbu	r4,20(r4)
 400936c:	2823883a 	mov	r17,r5
 4009370:	40090a40 	call	40090a4 <_ZL21size_of_encoded_valueh>
 4009374:	1445383a 	mul	r2,r2,r17
 4009378:	81800317 	ldw	r6,12(r16)
 400937c:	81400217 	ldw	r5,8(r16)
 4009380:	81000503 	ldbu	r4,20(r16)
 4009384:	d80f883a 	mov	r7,sp
 4009388:	308dc83a 	sub	r6,r6,r2
 400938c:	40091480 	call	4009148 <_ZL28read_encoded_value_with_basehjPKhPj>
 4009390:	d8800017 	ldw	r2,0(sp)
 4009394:	dfc00317 	ldw	ra,12(sp)
 4009398:	dc400217 	ldw	r17,8(sp)
 400939c:	dc000117 	ldw	r16,4(sp)
 40093a0:	dec00404 	addi	sp,sp,16
 40093a4:	f800283a 	ret

040093a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 40093a8:	deffff04 	addi	sp,sp,-4
 40093ac:	dfc00015 	stw	ra,0(sp)
 40093b0:	20c03fcc 	andi	r3,r4,255
 40093b4:	00803fc4 	movi	r2,255
 40093b8:	18800e26 	beq	r3,r2,40093f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 40093bc:	20801c0c 	andi	r2,r4,112
 40093c0:	00c00804 	movi	r3,32
 40093c4:	10c01726 	beq	r2,r3,4009424 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
 40093c8:	18800e2e 	bgeu	r3,r2,4009404 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
 40093cc:	00c01004 	movi	r3,64
 40093d0:	10c01026 	beq	r2,r3,4009414 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
 40093d4:	00c01404 	movi	r3,80
 40093d8:	10c00626 	beq	r2,r3,40093f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 40093dc:	00c00c04 	movi	r3,48
 40093e0:	10c00b1e 	bne	r2,r3,4009410 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 40093e4:	2809883a 	mov	r4,r5
 40093e8:	dfc00017 	ldw	ra,0(sp)
 40093ec:	dec00104 	addi	sp,sp,4
 40093f0:	400b07c1 	jmpi	400b07c <_Unwind_GetDataRelBase>
 40093f4:	0005883a 	mov	r2,zero
 40093f8:	dfc00017 	ldw	ra,0(sp)
 40093fc:	dec00104 	addi	sp,sp,4
 4009400:	f800283a 	ret
 4009404:	103ffb26 	beq	r2,zero,40093f4 <__alt_data_end+0xfc0093f4>
 4009408:	00c00404 	movi	r3,16
 400940c:	10fff926 	beq	r2,r3,40093f4 <__alt_data_end+0xfc0093f4>
 4009410:	400b2bc0 	call	400b2bc <abort>
 4009414:	2809883a 	mov	r4,r5
 4009418:	dfc00017 	ldw	ra,0(sp)
 400941c:	dec00104 	addi	sp,sp,4
 4009420:	400b06c1 	jmpi	400b06c <_Unwind_GetRegionStart>
 4009424:	2809883a 	mov	r4,r5
 4009428:	dfc00017 	ldw	ra,0(sp)
 400942c:	dec00104 	addi	sp,sp,4
 4009430:	400b0841 	jmpi	400b084 <_Unwind_GetTextRelBase>

04009434 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 4009434:	defffb04 	addi	sp,sp,-20
 4009438:	dcc00315 	stw	r19,12(sp)
 400943c:	dc400115 	stw	r17,4(sp)
 4009440:	dc000015 	stw	r16,0(sp)
 4009444:	dfc00415 	stw	ra,16(sp)
 4009448:	dc800215 	stw	r18,8(sp)
 400944c:	2027883a 	mov	r19,r4
 4009450:	2821883a 	mov	r16,r5
 4009454:	3023883a 	mov	r17,r6
 4009458:	20003f26 	beq	r4,zero,4009558 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 400945c:	400b06c0 	call	400b06c <_Unwind_GetRegionStart>
 4009460:	88800015 	stw	r2,0(r17)
 4009464:	84800003 	ldbu	r18,0(r16)
 4009468:	00c03fc4 	movi	r3,255
 400946c:	84000044 	addi	r16,r16,1
 4009470:	90c03726 	beq	r18,r3,4009550 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 4009474:	980b883a 	mov	r5,r19
 4009478:	9009883a 	mov	r4,r18
 400947c:	40093a80 	call	40093a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009480:	800d883a 	mov	r6,r16
 4009484:	89c00104 	addi	r7,r17,4
 4009488:	100b883a 	mov	r5,r2
 400948c:	9009883a 	mov	r4,r18
 4009490:	40091480 	call	4009148 <_ZL28read_encoded_value_with_basehjPKhPj>
 4009494:	1021883a 	mov	r16,r2
 4009498:	80c00003 	ldbu	r3,0(r16)
 400949c:	01003fc4 	movi	r4,255
 40094a0:	80800044 	addi	r2,r16,1
 40094a4:	88c00505 	stb	r3,20(r17)
 40094a8:	18c03fcc 	andi	r3,r3,255
 40094ac:	19002c26 	beq	r3,r4,4009560 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 40094b0:	100f883a 	mov	r7,r2
 40094b4:	000d883a 	mov	r6,zero
 40094b8:	000b883a 	mov	r5,zero
 40094bc:	38c00003 	ldbu	r3,0(r7)
 40094c0:	10800044 	addi	r2,r2,1
 40094c4:	100f883a 	mov	r7,r2
 40094c8:	19001fcc 	andi	r4,r3,127
 40094cc:	2148983a 	sll	r4,r4,r5
 40094d0:	18c03fcc 	andi	r3,r3,255
 40094d4:	18c0201c 	xori	r3,r3,128
 40094d8:	18ffe004 	addi	r3,r3,-128
 40094dc:	310cb03a 	or	r6,r6,r4
 40094e0:	294001c4 	addi	r5,r5,7
 40094e4:	183ff516 	blt	r3,zero,40094bc <__alt_data_end+0xfc0094bc>
 40094e8:	118d883a 	add	r6,r2,r6
 40094ec:	89800315 	stw	r6,12(r17)
 40094f0:	10c00003 	ldbu	r3,0(r2)
 40094f4:	000d883a 	mov	r6,zero
 40094f8:	10800044 	addi	r2,r2,1
 40094fc:	88c00545 	stb	r3,21(r17)
 4009500:	000b883a 	mov	r5,zero
 4009504:	10c00003 	ldbu	r3,0(r2)
 4009508:	10800044 	addi	r2,r2,1
 400950c:	19001fcc 	andi	r4,r3,127
 4009510:	2148983a 	sll	r4,r4,r5
 4009514:	18c03fcc 	andi	r3,r3,255
 4009518:	18c0201c 	xori	r3,r3,128
 400951c:	18ffe004 	addi	r3,r3,-128
 4009520:	310cb03a 	or	r6,r6,r4
 4009524:	294001c4 	addi	r5,r5,7
 4009528:	183ff616 	blt	r3,zero,4009504 <__alt_data_end+0xfc009504>
 400952c:	118d883a 	add	r6,r2,r6
 4009530:	89800415 	stw	r6,16(r17)
 4009534:	dfc00417 	ldw	ra,16(sp)
 4009538:	dcc00317 	ldw	r19,12(sp)
 400953c:	dc800217 	ldw	r18,8(sp)
 4009540:	dc400117 	ldw	r17,4(sp)
 4009544:	dc000017 	ldw	r16,0(sp)
 4009548:	dec00504 	addi	sp,sp,20
 400954c:	f800283a 	ret
 4009550:	88800115 	stw	r2,4(r17)
 4009554:	003fd006 	br	4009498 <__alt_data_end+0xfc009498>
 4009558:	0005883a 	mov	r2,zero
 400955c:	003fc006 	br	4009460 <__alt_data_end+0xfc009460>
 4009560:	88000315 	stw	zero,12(r17)
 4009564:	003fe206 	br	40094f0 <__alt_data_end+0xfc0094f0>

04009568 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 4009568:	28800017 	ldw	r2,0(r5)
 400956c:	30c00017 	ldw	r3,0(r6)
 4009570:	defffb04 	addi	sp,sp,-20
 4009574:	10800217 	ldw	r2,8(r2)
 4009578:	dc400315 	stw	r17,12(sp)
 400957c:	dc000215 	stw	r16,8(sp)
 4009580:	d9400115 	stw	r5,4(sp)
 4009584:	dfc00415 	stw	ra,16(sp)
 4009588:	2021883a 	mov	r16,r4
 400958c:	d8c00015 	stw	r3,0(sp)
 4009590:	2809883a 	mov	r4,r5
 4009594:	3023883a 	mov	r17,r6
 4009598:	103ee83a 	callr	r2
 400959c:	10803fcc 	andi	r2,r2,255
 40095a0:	d9400117 	ldw	r5,4(sp)
 40095a4:	10000326 	beq	r2,zero,40095b4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
 40095a8:	d8800017 	ldw	r2,0(sp)
 40095ac:	10800017 	ldw	r2,0(r2)
 40095b0:	d8800015 	stw	r2,0(sp)
 40095b4:	80800017 	ldw	r2,0(r16)
 40095b8:	01c00044 	movi	r7,1
 40095bc:	d80d883a 	mov	r6,sp
 40095c0:	10800417 	ldw	r2,16(r2)
 40095c4:	8009883a 	mov	r4,r16
 40095c8:	103ee83a 	callr	r2
 40095cc:	10c03fcc 	andi	r3,r2,255
 40095d0:	18000226 	beq	r3,zero,40095dc <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
 40095d4:	d8c00017 	ldw	r3,0(sp)
 40095d8:	88c00015 	stw	r3,0(r17)
 40095dc:	dfc00417 	ldw	ra,16(sp)
 40095e0:	dc400317 	ldw	r17,12(sp)
 40095e4:	dc000217 	ldw	r16,8(sp)
 40095e8:	dec00504 	addi	sp,sp,20
 40095ec:	f800283a 	ret

040095f0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 40095f0:	defff604 	addi	sp,sp,-40
 40095f4:	dc000415 	stw	r16,16(sp)
 40095f8:	3821d23a 	srai	r16,r7,8
 40095fc:	dc800615 	stw	r18,24(sp)
 4009600:	dc400515 	stw	r17,20(sp)
 4009604:	dfc00915 	stw	ra,36(sp)
 4009608:	dd000815 	stw	r20,32(sp)
 400960c:	dcc00715 	stw	r19,28(sp)
 4009610:	d9400215 	stw	r5,8(sp)
 4009614:	3825883a 	mov	r18,r7
 4009618:	2023883a 	mov	r17,r4
 400961c:	8000010e 	bge	r16,zero,4009624 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x34>
 4009620:	0421c83a 	sub	r16,zero,r16
 4009624:	000b883a 	mov	r5,zero
 4009628:	01000144 	movi	r4,5
 400962c:	d9800315 	stw	r6,12(sp)
 4009630:	40093a80 	call	40093a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009634:	d9800317 	ldw	r6,12(sp)
 4009638:	d9c00104 	addi	r7,sp,4
 400963c:	100b883a 	mov	r5,r2
 4009640:	01000144 	movi	r4,5
 4009644:	40091480 	call	4009148 <_ZL28read_encoded_value_with_basehjPKhPj>
 4009648:	11fffe64 	muli	r7,r2,-7
 400964c:	0007883a 	mov	r3,zero
 4009650:	11400003 	ldbu	r5,0(r2)
 4009654:	110001e4 	muli	r4,r2,7
 4009658:	10800044 	addi	r2,r2,1
 400965c:	29801fcc 	andi	r6,r5,127
 4009660:	21c9883a 	add	r4,r4,r7
 4009664:	3108983a 	sll	r4,r6,r4
 4009668:	29403fcc 	andi	r5,r5,255
 400966c:	2940201c 	xori	r5,r5,128
 4009670:	297fe004 	addi	r5,r5,-128
 4009674:	1906b03a 	or	r3,r3,r4
 4009678:	283ff516 	blt	r5,zero,4009650 <__alt_data_end+0xfc009650>
 400967c:	10c5883a 	add	r2,r2,r3
 4009680:	11fffe64 	muli	r7,r2,-7
 4009684:	0009883a 	mov	r4,zero
 4009688:	11400003 	ldbu	r5,0(r2)
 400968c:	10c001e4 	muli	r3,r2,7
 4009690:	10800044 	addi	r2,r2,1
 4009694:	29801fcc 	andi	r6,r5,127
 4009698:	19c7883a 	add	r3,r3,r7
 400969c:	30c6983a 	sll	r3,r6,r3
 40096a0:	29403fcc 	andi	r5,r5,255
 40096a4:	2940201c 	xori	r5,r5,128
 40096a8:	297fe004 	addi	r5,r5,-128
 40096ac:	20c8b03a 	or	r4,r4,r3
 40096b0:	283ff516 	blt	r5,zero,4009688 <__alt_data_end+0xfc009688>
 40096b4:	80c03fcc 	andi	r3,r16,255
 40096b8:	18ffffc4 	addi	r3,r3,-1
 40096bc:	10c7883a 	add	r3,r2,r3
 40096c0:	210000c4 	addi	r4,r4,3
 40096c4:	197ffe64 	muli	r5,r3,-7
 40096c8:	2085883a 	add	r2,r4,r2
 40096cc:	04ffff04 	movi	r19,-4
 40096d0:	14e6703a 	and	r19,r2,r19
 40096d4:	0021883a 	mov	r16,zero
 40096d8:	18800003 	ldbu	r2,0(r3)
 40096dc:	190001e4 	muli	r4,r3,7
 40096e0:	1d000044 	addi	r20,r3,1
 40096e4:	10c01fcc 	andi	r3,r2,127
 40096e8:	2149883a 	add	r4,r4,r5
 40096ec:	1908983a 	sll	r4,r3,r4
 40096f0:	10803fcc 	andi	r2,r2,255
 40096f4:	1080201c 	xori	r2,r2,128
 40096f8:	10bfe004 	addi	r2,r2,-128
 40096fc:	a007883a 	mov	r3,r20
 4009700:	8120b03a 	or	r16,r16,r4
 4009704:	103ff416 	blt	r2,zero,40096d8 <__alt_data_end+0xfc0096d8>
 4009708:	94803fcc 	andi	r18,r18,255
 400970c:	80001f26 	beq	r16,zero,400978c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x19c>
 4009710:	9009883a 	mov	r4,r18
 4009714:	40090a40 	call	40090a4 <_ZL21size_of_encoded_valueh>
 4009718:	81bfffc4 	addi	r6,r16,-1
 400971c:	308d383a 	mul	r6,r6,r2
 4009720:	d9400a17 	ldw	r5,40(sp)
 4009724:	d80f883a 	mov	r7,sp
 4009728:	9009883a 	mov	r4,r18
 400972c:	34cd883a 	add	r6,r6,r19
 4009730:	40091480 	call	4009148 <_ZL28read_encoded_value_with_basehjPKhPj>
 4009734:	d9000017 	ldw	r4,0(sp)
 4009738:	d9800204 	addi	r6,sp,8
 400973c:	880b883a 	mov	r5,r17
 4009740:	40095680 	call	4009568 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 4009744:	10c03fcc 	andi	r3,r2,255
 4009748:	1800111e 	bne	r3,zero,4009790 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1a0>
 400974c:	a17ffe64 	muli	r5,r20,-7
 4009750:	a007883a 	mov	r3,r20
 4009754:	0021883a 	mov	r16,zero
 4009758:	19000003 	ldbu	r4,0(r3)
 400975c:	18c001e4 	muli	r3,r3,7
 4009760:	a5000044 	addi	r20,r20,1
 4009764:	20801fcc 	andi	r2,r4,127
 4009768:	1947883a 	add	r3,r3,r5
 400976c:	10c4983a 	sll	r2,r2,r3
 4009770:	21003fcc 	andi	r4,r4,255
 4009774:	2100201c 	xori	r4,r4,128
 4009778:	213fe004 	addi	r4,r4,-128
 400977c:	a007883a 	mov	r3,r20
 4009780:	80a0b03a 	or	r16,r16,r2
 4009784:	203ff416 	blt	r4,zero,4009758 <__alt_data_end+0xfc009758>
 4009788:	003fe006 	br	400970c <__alt_data_end+0xfc00970c>
 400978c:	0005883a 	mov	r2,zero
 4009790:	dfc00917 	ldw	ra,36(sp)
 4009794:	dd000817 	ldw	r20,32(sp)
 4009798:	dcc00717 	ldw	r19,28(sp)
 400979c:	dc800617 	ldw	r18,24(sp)
 40097a0:	dc400517 	ldw	r17,20(sp)
 40097a4:	dc000417 	ldw	r16,16(sp)
 40097a8:	dec00a04 	addi	sp,sp,40
 40097ac:	f800283a 	ret

040097b0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 40097b0:	defffb04 	addi	sp,sp,-20
 40097b4:	dc000115 	stw	r16,4(sp)
 40097b8:	24000317 	ldw	r16,12(r4)
 40097bc:	01ce303a 	nor	r7,zero,r7
 40097c0:	dc800315 	stw	r18,12(sp)
 40097c4:	dc400215 	stw	r17,8(sp)
 40097c8:	dfc00415 	stw	ra,16(sp)
 40097cc:	2023883a 	mov	r17,r4
 40097d0:	2825883a 	mov	r18,r5
 40097d4:	d9800015 	stw	r6,0(sp)
 40097d8:	81e1883a 	add	r16,r16,r7
 40097dc:	800d883a 	mov	r6,r16
 40097e0:	000b883a 	mov	r5,zero
 40097e4:	0009883a 	mov	r4,zero
 40097e8:	30800003 	ldbu	r2,0(r6)
 40097ec:	84000044 	addi	r16,r16,1
 40097f0:	800d883a 	mov	r6,r16
 40097f4:	10c01fcc 	andi	r3,r2,127
 40097f8:	1906983a 	sll	r3,r3,r4
 40097fc:	10803fcc 	andi	r2,r2,255
 4009800:	1080201c 	xori	r2,r2,128
 4009804:	10bfe004 	addi	r2,r2,-128
 4009808:	28cab03a 	or	r5,r5,r3
 400980c:	210001c4 	addi	r4,r4,7
 4009810:	103ff516 	blt	r2,zero,40097e8 <__alt_data_end+0xfc0097e8>
 4009814:	28000e26 	beq	r5,zero,4009850 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 4009818:	8809883a 	mov	r4,r17
 400981c:	40093540 	call	4009354 <_ZL15get_ttype_entryP16lsda_header_infom>
 4009820:	d80d883a 	mov	r6,sp
 4009824:	900b883a 	mov	r5,r18
 4009828:	1009883a 	mov	r4,r2
 400982c:	40095680 	call	4009568 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 4009830:	10c03fcc 	andi	r3,r2,255
 4009834:	183fe926 	beq	r3,zero,40097dc <__alt_data_end+0xfc0097dc>
 4009838:	dfc00417 	ldw	ra,16(sp)
 400983c:	dc800317 	ldw	r18,12(sp)
 4009840:	dc400217 	ldw	r17,8(sp)
 4009844:	dc000117 	ldw	r16,4(sp)
 4009848:	dec00504 	addi	sp,sp,20
 400984c:	f800283a 	ret
 4009850:	0005883a 	mov	r2,zero
 4009854:	003ff806 	br	4009838 <__alt_data_end+0xfc009838>

04009858 <__gxx_personality_sj0>:
 4009858:	00810074 	movhi	r2,1025
 400985c:	deffdd04 	addi	sp,sp,-140
 4009860:	10a61604 	addi	r2,r2,-26536
 4009864:	d8800e15 	stw	r2,56(sp)
 4009868:	008100b4 	movhi	r2,1026
 400986c:	10aad304 	addi	r2,r2,-21684
 4009870:	d8800f15 	stw	r2,60(sp)
 4009874:	00810074 	movhi	r2,1025
 4009878:	10a78c04 	addi	r2,r2,-25040
 400987c:	d9001515 	stw	r4,84(sp)
 4009880:	d9000804 	addi	r4,sp,32
 4009884:	d8801115 	stw	r2,68(sp)
 4009888:	dfc02215 	stw	ra,136(sp)
 400988c:	df002115 	stw	fp,132(sp)
 4009890:	dec01015 	stw	sp,64(sp)
 4009894:	dec01215 	stw	sp,72(sp)
 4009898:	d9401915 	stw	r5,100(sp)
 400989c:	d9801615 	stw	r6,88(sp)
 40098a0:	d9c01715 	stw	r7,92(sp)
 40098a4:	400afa40 	call	400afa4 <_Unwind_SjLj_Register>
 40098a8:	d8c01517 	ldw	r3,84(sp)
 40098ac:	d8000715 	stw	zero,28(sp)
 40098b0:	d8000615 	stw	zero,24(sp)
 40098b4:	00800044 	movi	r2,1
 40098b8:	18800926 	beq	r3,r2,40098e0 <__gxx_personality_sj0+0x88>
 40098bc:	01c000c4 	movi	r7,3
 40098c0:	d9c01515 	stw	r7,84(sp)
 40098c4:	d9000804 	addi	r4,sp,32
 40098c8:	400afbc0 	call	400afbc <_Unwind_SjLj_Unregister>
 40098cc:	d8801517 	ldw	r2,84(sp)
 40098d0:	dfc02217 	ldw	ra,136(sp)
 40098d4:	df002117 	ldw	fp,132(sp)
 40098d8:	dec02304 	addi	sp,sp,140
 40098dc:	f800283a 	ret
 40098e0:	d9001617 	ldw	r4,88(sp)
 40098e4:	00af3574 	movhi	r2,48341
 40098e8:	d9c01717 	ldw	r7,92(sp)
 40098ec:	10b54004 	addi	r2,r2,-11008
 40098f0:	00ee2cb4 	movhi	r3,47282
 40098f4:	2085883a 	add	r2,r4,r2
 40098f8:	18eaaf04 	addi	r3,r3,-21828
 40098fc:	d8801b15 	stw	r2,108(sp)
 4009900:	38c7883a 	add	r3,r7,r3
 4009904:	1105803a 	cmpltu	r2,r2,r4
 4009908:	10c7883a 	add	r3,r2,r3
 400990c:	d8c01c15 	stw	r3,112(sp)
 4009910:	d8c01917 	ldw	r3,100(sp)
 4009914:	00800184 	movi	r2,6
 4009918:	18805426 	beq	r3,r2,4009a6c <__gxx_personality_sj0+0x214>
 400991c:	d9002417 	ldw	r4,144(sp)
 4009920:	00bfffc4 	movi	r2,-1
 4009924:	d8800915 	stw	r2,36(sp)
 4009928:	400b0600 	call	400b060 <_Unwind_GetLanguageSpecificData>
 400992c:	d8801a15 	stw	r2,104(sp)
 4009930:	1000c926 	beq	r2,zero,4009c58 <__gxx_personality_sj0+0x400>
 4009934:	d9002417 	ldw	r4,144(sp)
 4009938:	d80d883a 	mov	r6,sp
 400993c:	100b883a 	mov	r5,r2
 4009940:	40094340 	call	4009434 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 4009944:	d9402417 	ldw	r5,144(sp)
 4009948:	d9000503 	ldbu	r4,20(sp)
 400994c:	d8801515 	stw	r2,84(sp)
 4009950:	40093a80 	call	40093a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009954:	d9002417 	ldw	r4,144(sp)
 4009958:	d9400604 	addi	r5,sp,24
 400995c:	d8800215 	stw	r2,8(sp)
 4009960:	400b0300 	call	400b030 <_Unwind_GetIPInfo>
 4009964:	d8c00617 	ldw	r3,24(sp)
 4009968:	18006126 	beq	r3,zero,4009af0 <__gxx_personality_sj0+0x298>
 400996c:	1000ba16 	blt	r2,zero,4009c58 <__gxx_personality_sj0+0x400>
 4009970:	10002f1e 	bne	r2,zero,4009a30 <__gxx_personality_sj0+0x1d8>
 4009974:	d8001515 	stw	zero,84(sp)
 4009978:	d8001f15 	stw	zero,124(sp)
 400997c:	d8001815 	stw	zero,96(sp)
 4009980:	00c00044 	movi	r3,1
 4009984:	d9001917 	ldw	r4,100(sp)
 4009988:	2080004c 	andi	r2,r4,1
 400998c:	1000b51e 	bne	r2,zero,4009c64 <__gxx_personality_sj0+0x40c>
 4009990:	d9001917 	ldw	r4,100(sp)
 4009994:	2080020c 	andi	r2,r4,8
 4009998:	1000b71e 	bne	r2,zero,4009c78 <__gxx_personality_sj0+0x420>
 400999c:	d9c01c17 	ldw	r7,112(sp)
 40099a0:	3800b826 	beq	r7,zero,4009c84 <__gxx_personality_sj0+0x42c>
 40099a4:	00800044 	movi	r2,1
 40099a8:	1880b526 	beq	r3,r2,4009c80 <__gxx_personality_sj0+0x428>
 40099ac:	d9c01517 	ldw	r7,84(sp)
 40099b0:	3800f516 	blt	r7,zero,4009d88 <__gxx_personality_sj0+0x530>
 40099b4:	d9002417 	ldw	r4,144(sp)
 40099b8:	d9802317 	ldw	r6,140(sp)
 40099bc:	00bfffc4 	movi	r2,-1
 40099c0:	000b883a 	mov	r5,zero
 40099c4:	d8800915 	stw	r2,36(sp)
 40099c8:	400b0040 	call	400b004 <_Unwind_SetGR>
 40099cc:	d9801517 	ldw	r6,84(sp)
 40099d0:	d9002417 	ldw	r4,144(sp)
 40099d4:	01400044 	movi	r5,1
 40099d8:	400b0040 	call	400b004 <_Unwind_SetGR>
 40099dc:	d9002417 	ldw	r4,144(sp)
 40099e0:	d9401f17 	ldw	r5,124(sp)
 40099e4:	400b0500 	call	400b050 <_Unwind_SetIP>
 40099e8:	010001c4 	movi	r4,7
 40099ec:	d9001515 	stw	r4,84(sp)
 40099f0:	003fb406 	br	40098c4 <__alt_data_end+0xfc0098c4>
 40099f4:	000f883a 	mov	r7,zero
 40099f8:	000d883a 	mov	r6,zero
 40099fc:	19000003 	ldbu	r4,0(r3)
 4009a00:	18c00044 	addi	r3,r3,1
 4009a04:	d8c01515 	stw	r3,84(sp)
 4009a08:	21401fcc 	andi	r5,r4,127
 4009a0c:	298a983a 	sll	r5,r5,r6
 4009a10:	21003fcc 	andi	r4,r4,255
 4009a14:	2100201c 	xori	r4,r4,128
 4009a18:	213fe004 	addi	r4,r4,-128
 4009a1c:	394eb03a 	or	r7,r7,r5
 4009a20:	318001c4 	addi	r6,r6,7
 4009a24:	203ff516 	blt	r4,zero,40099fc <__alt_data_end+0xfc0099fc>
 4009a28:	10bfffc4 	addi	r2,r2,-1
 4009a2c:	10003226 	beq	r2,zero,4009af8 <__gxx_personality_sj0+0x2a0>
 4009a30:	d9c01517 	ldw	r7,84(sp)
 4009a34:	0011883a 	mov	r8,zero
 4009a38:	000d883a 	mov	r6,zero
 4009a3c:	39000003 	ldbu	r4,0(r7)
 4009a40:	38c00044 	addi	r3,r7,1
 4009a44:	180f883a 	mov	r7,r3
 4009a48:	21401fcc 	andi	r5,r4,127
 4009a4c:	298a983a 	sll	r5,r5,r6
 4009a50:	21003fcc 	andi	r4,r4,255
 4009a54:	2100201c 	xori	r4,r4,128
 4009a58:	213fe004 	addi	r4,r4,-128
 4009a5c:	4150b03a 	or	r8,r8,r5
 4009a60:	318001c4 	addi	r6,r6,7
 4009a64:	203ff516 	blt	r4,zero,4009a3c <__alt_data_end+0xfc009a3c>
 4009a68:	003fe206 	br	40099f4 <__alt_data_end+0xfc0099f4>
 4009a6c:	d9001c17 	ldw	r4,112(sp)
 4009a70:	203faa1e 	bne	r4,zero,400991c <__alt_data_end+0xfc00991c>
 4009a74:	d9c01517 	ldw	r7,84(sp)
 4009a78:	d8801b17 	ldw	r2,108(sp)
 4009a7c:	38bfa736 	bltu	r7,r2,400991c <__alt_data_end+0xfc00991c>
 4009a80:	d8c02317 	ldw	r3,140(sp)
 4009a84:	18fffe17 	ldw	r3,-8(r3)
 4009a88:	d8c01f15 	stw	r3,124(sp)
 4009a8c:	18008226 	beq	r3,zero,4009c98 <__gxx_personality_sj0+0x440>
 4009a90:	d9002317 	ldw	r4,140(sp)
 4009a94:	d9c02317 	ldw	r7,140(sp)
 4009a98:	213ffb17 	ldw	r4,-20(r4)
 4009a9c:	39fffd17 	ldw	r7,-12(r7)
 4009aa0:	d9001515 	stw	r4,84(sp)
 4009aa4:	d9c01a15 	stw	r7,104(sp)
 4009aa8:	d8801517 	ldw	r2,84(sp)
 4009aac:	103fc10e 	bge	r2,zero,40099b4 <__alt_data_end+0xfc0099b4>
 4009ab0:	d9002417 	ldw	r4,144(sp)
 4009ab4:	d9401a17 	ldw	r5,104(sp)
 4009ab8:	d80d883a 	mov	r6,sp
 4009abc:	00bfffc4 	movi	r2,-1
 4009ac0:	d8800915 	stw	r2,36(sp)
 4009ac4:	40094340 	call	4009434 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 4009ac8:	d9402417 	ldw	r5,144(sp)
 4009acc:	d9000503 	ldbu	r4,20(sp)
 4009ad0:	40093a80 	call	40093a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009ad4:	d9000503 	ldbu	r4,20(sp)
 4009ad8:	d9402417 	ldw	r5,144(sp)
 4009adc:	d8800215 	stw	r2,8(sp)
 4009ae0:	40093a80 	call	40093a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009ae4:	d8c02317 	ldw	r3,140(sp)
 4009ae8:	18bffe15 	stw	r2,-8(r3)
 4009aec:	003fb106 	br	40099b4 <__alt_data_end+0xfc0099b4>
 4009af0:	10bfffc4 	addi	r2,r2,-1
 4009af4:	003f9d06 	br	400996c <__alt_data_end+0xfc00996c>
 4009af8:	42000044 	addi	r8,r8,1
 4009afc:	da001f15 	stw	r8,124(sp)
 4009b00:	38005326 	beq	r7,zero,4009c50 <__gxx_personality_sj0+0x3f8>
 4009b04:	d8800417 	ldw	r2,16(sp)
 4009b08:	39ffffc4 	addi	r7,r7,-1
 4009b0c:	11c5883a 	add	r2,r2,r7
 4009b10:	d8801815 	stw	r2,96(sp)
 4009b14:	40005026 	beq	r8,zero,4009c58 <__gxx_personality_sj0+0x400>
 4009b18:	10007426 	beq	r2,zero,4009cec <__gxx_personality_sj0+0x494>
 4009b1c:	d8801917 	ldw	r2,100(sp)
 4009b20:	1080020c 	andi	r2,r2,8
 4009b24:	d8802015 	stw	r2,128(sp)
 4009b28:	1000a21e 	bne	r2,zero,4009db4 <__gxx_personality_sj0+0x55c>
 4009b2c:	d8c01c17 	ldw	r3,112(sp)
 4009b30:	1800b026 	beq	r3,zero,4009df4 <__gxx_personality_sj0+0x59c>
 4009b34:	01c100f4 	movhi	r7,1027
 4009b38:	39e3e104 	addi	r7,r7,-28796
 4009b3c:	d9c01e15 	stw	r7,120(sp)
 4009b40:	d8001d05 	stb	zero,116(sp)
 4009b44:	d8c01817 	ldw	r3,96(sp)
 4009b48:	d8001515 	stw	zero,84(sp)
 4009b4c:	0009883a 	mov	r4,zero
 4009b50:	19400003 	ldbu	r5,0(r3)
 4009b54:	18800044 	addi	r2,r3,1
 4009b58:	d9c01517 	ldw	r7,84(sp)
 4009b5c:	28c01fcc 	andi	r3,r5,127
 4009b60:	1906983a 	sll	r3,r3,r4
 4009b64:	29803fcc 	andi	r6,r5,255
 4009b68:	3180201c 	xori	r6,r6,128
 4009b6c:	38ceb03a 	or	r7,r7,r3
 4009b70:	d8801715 	stw	r2,92(sp)
 4009b74:	31bfe004 	addi	r6,r6,-128
 4009b78:	d9c01515 	stw	r7,84(sp)
 4009b7c:	210001c4 	addi	r4,r4,7
 4009b80:	1007883a 	mov	r3,r2
 4009b84:	303ff216 	blt	r6,zero,4009b50 <__alt_data_end+0xfc009b50>
 4009b88:	00c007c4 	movi	r3,31
 4009b8c:	19000836 	bltu	r3,r4,4009bb0 <__gxx_personality_sj0+0x358>
 4009b90:	2940100c 	andi	r5,r5,64
 4009b94:	28000626 	beq	r5,zero,4009bb0 <__gxx_personality_sj0+0x358>
 4009b98:	01c00044 	movi	r7,1
 4009b9c:	3908983a 	sll	r4,r7,r4
 4009ba0:	d8c01517 	ldw	r3,84(sp)
 4009ba4:	0109c83a 	sub	r4,zero,r4
 4009ba8:	1906b03a 	or	r3,r3,r4
 4009bac:	d8c01515 	stw	r3,84(sp)
 4009bb0:	d8001615 	stw	zero,88(sp)
 4009bb4:	0009883a 	mov	r4,zero
 4009bb8:	11400003 	ldbu	r5,0(r2)
 4009bbc:	d9c01617 	ldw	r7,88(sp)
 4009bc0:	10800044 	addi	r2,r2,1
 4009bc4:	28c01fcc 	andi	r3,r5,127
 4009bc8:	1906983a 	sll	r3,r3,r4
 4009bcc:	29803fcc 	andi	r6,r5,255
 4009bd0:	3180201c 	xori	r6,r6,128
 4009bd4:	38ceb03a 	or	r7,r7,r3
 4009bd8:	31bfe004 	addi	r6,r6,-128
 4009bdc:	d9c01615 	stw	r7,88(sp)
 4009be0:	210001c4 	addi	r4,r4,7
 4009be4:	303ff416 	blt	r6,zero,4009bb8 <__alt_data_end+0xfc009bb8>
 4009be8:	008007c4 	movi	r2,31
 4009bec:	11000736 	bltu	r2,r4,4009c0c <__gxx_personality_sj0+0x3b4>
 4009bf0:	2940100c 	andi	r5,r5,64
 4009bf4:	28000526 	beq	r5,zero,4009c0c <__gxx_personality_sj0+0x3b4>
 4009bf8:	00c00044 	movi	r3,1
 4009bfc:	1908983a 	sll	r4,r3,r4
 4009c00:	0109c83a 	sub	r4,zero,r4
 4009c04:	390eb03a 	or	r7,r7,r4
 4009c08:	d9c01615 	stw	r7,88(sp)
 4009c0c:	d9001517 	ldw	r4,84(sp)
 4009c10:	20003c26 	beq	r4,zero,4009d04 <__gxx_personality_sj0+0x4ac>
 4009c14:	01003e0e 	bge	zero,r4,4009d10 <__gxx_personality_sj0+0x4b8>
 4009c18:	01ffffc4 	movi	r7,-1
 4009c1c:	200b883a 	mov	r5,r4
 4009c20:	d809883a 	mov	r4,sp
 4009c24:	d9c00915 	stw	r7,36(sp)
 4009c28:	40093540 	call	4009354 <_ZL15get_ttype_entryP16lsda_header_infom>
 4009c2c:	10005f26 	beq	r2,zero,4009dac <__gxx_personality_sj0+0x554>
 4009c30:	d8c01e17 	ldw	r3,120(sp)
 4009c34:	1800571e 	bne	r3,zero,4009d94 <__gxx_personality_sj0+0x53c>
 4009c38:	d9001617 	ldw	r4,88(sp)
 4009c3c:	20002926 	beq	r4,zero,4009ce4 <__gxx_personality_sj0+0x48c>
 4009c40:	d9c01717 	ldw	r7,92(sp)
 4009c44:	390f883a 	add	r7,r7,r4
 4009c48:	d9c01815 	stw	r7,96(sp)
 4009c4c:	003fbd06 	br	4009b44 <__alt_data_end+0xfc009b44>
 4009c50:	d8c01f17 	ldw	r3,124(sp)
 4009c54:	1800251e 	bne	r3,zero,4009cec <__gxx_personality_sj0+0x494>
 4009c58:	01000204 	movi	r4,8
 4009c5c:	d9001515 	stw	r4,84(sp)
 4009c60:	003f1806 	br	40098c4 <__alt_data_end+0xfc0098c4>
 4009c64:	d8801c17 	ldw	r2,112(sp)
 4009c68:	10000d26 	beq	r2,zero,4009ca0 <__gxx_personality_sj0+0x448>
 4009c6c:	00800184 	movi	r2,6
 4009c70:	d8801515 	stw	r2,84(sp)
 4009c74:	003f1306 	br	40098c4 <__alt_data_end+0xfc0098c4>
 4009c78:	00800044 	movi	r2,1
 4009c7c:	18bf4d1e 	bne	r3,r2,40099b4 <__alt_data_end+0xfc0099b4>
 4009c80:	400a7b00 	call	400a7b0 <_ZSt9terminatev>
 4009c84:	d9001b17 	ldw	r4,108(sp)
 4009c88:	00800044 	movi	r2,1
 4009c8c:	113f4536 	bltu	r2,r4,40099a4 <__alt_data_end+0xfc0099a4>
 4009c90:	00800044 	movi	r2,1
 4009c94:	18bf841e 	bne	r3,r2,4009aa8 <__alt_data_end+0xfc009aa8>
 4009c98:	d9002317 	ldw	r4,140(sp)
 4009c9c:	400aafc0 	call	400aafc <__cxa_call_terminate>
 4009ca0:	d8c01b17 	ldw	r3,108(sp)
 4009ca4:	00800044 	movi	r2,1
 4009ca8:	10fff036 	bltu	r2,r3,4009c6c <__alt_data_end+0xfc009c6c>
 4009cac:	d9002317 	ldw	r4,140(sp)
 4009cb0:	d8801817 	ldw	r2,96(sp)
 4009cb4:	d9c01517 	ldw	r7,84(sp)
 4009cb8:	d8c01a17 	ldw	r3,104(sp)
 4009cbc:	20bffc15 	stw	r2,-16(r4)
 4009cc0:	d8800717 	ldw	r2,28(sp)
 4009cc4:	21fffb15 	stw	r7,-20(r4)
 4009cc8:	d9c01f17 	ldw	r7,124(sp)
 4009ccc:	20bfff15 	stw	r2,-4(r4)
 4009cd0:	00800184 	movi	r2,6
 4009cd4:	20fffd15 	stw	r3,-12(r4)
 4009cd8:	21fffe15 	stw	r7,-8(r4)
 4009cdc:	d8801515 	stw	r2,84(sp)
 4009ce0:	003ef806 	br	40098c4 <__alt_data_end+0xfc0098c4>
 4009ce4:	d8801d03 	ldbu	r2,116(sp)
 4009ce8:	103fdb26 	beq	r2,zero,4009c58 <__alt_data_end+0xfc009c58>
 4009cec:	d8c01917 	ldw	r3,100(sp)
 4009cf0:	1880004c 	andi	r2,r3,1
 4009cf4:	103fd81e 	bne	r2,zero,4009c58 <__alt_data_end+0xfc009c58>
 4009cf8:	d8001515 	stw	zero,84(sp)
 4009cfc:	00c00084 	movi	r3,2
 4009d00:	003f2306 	br	4009990 <__alt_data_end+0xfc009990>
 4009d04:	00c00044 	movi	r3,1
 4009d08:	d8c01d05 	stb	r3,116(sp)
 4009d0c:	003fca06 	br	4009c38 <__alt_data_end+0xfc009c38>
 4009d10:	d9001e17 	ldw	r4,120(sp)
 4009d14:	20000426 	beq	r4,zero,4009d28 <__gxx_personality_sj0+0x4d0>
 4009d18:	d9c02017 	ldw	r7,128(sp)
 4009d1c:	3800021e 	bne	r7,zero,4009d28 <__gxx_personality_sj0+0x4d0>
 4009d20:	d8801c17 	ldw	r2,112(sp)
 4009d24:	10002726 	beq	r2,zero,4009dc4 <__gxx_personality_sj0+0x56c>
 4009d28:	d8801517 	ldw	r2,84(sp)
 4009d2c:	000d883a 	mov	r6,zero
 4009d30:	000b883a 	mov	r5,zero
 4009d34:	0088303a 	nor	r4,zero,r2
 4009d38:	d8800317 	ldw	r2,12(sp)
 4009d3c:	1109883a 	add	r4,r2,r4
 4009d40:	20800003 	ldbu	r2,0(r4)
 4009d44:	21000044 	addi	r4,r4,1
 4009d48:	10c01fcc 	andi	r3,r2,127
 4009d4c:	1946983a 	sll	r3,r3,r5
 4009d50:	10803fcc 	andi	r2,r2,255
 4009d54:	1080201c 	xori	r2,r2,128
 4009d58:	10bfe004 	addi	r2,r2,-128
 4009d5c:	30ccb03a 	or	r6,r6,r3
 4009d60:	294001c4 	addi	r5,r5,7
 4009d64:	103ff616 	blt	r2,zero,4009d40 <__alt_data_end+0xfc009d40>
 4009d68:	3005003a 	cmpeq	r2,r6,zero
 4009d6c:	10803fcc 	andi	r2,r2,255
 4009d70:	103fb126 	beq	r2,zero,4009c38 <__alt_data_end+0xfc009c38>
 4009d74:	d9c01917 	ldw	r7,100(sp)
 4009d78:	3880004c 	andi	r2,r7,1
 4009d7c:	103fb91e 	bne	r2,zero,4009c64 <__alt_data_end+0xfc009c64>
 4009d80:	d8802017 	ldw	r2,128(sp)
 4009d84:	10002d26 	beq	r2,zero,4009e3c <__gxx_personality_sj0+0x5e4>
 4009d88:	00800044 	movi	r2,1
 4009d8c:	d8800915 	stw	r2,36(sp)
 4009d90:	400a7d80 	call	400a7d8 <_ZSt10unexpectedv>
 4009d94:	d9800704 	addi	r6,sp,28
 4009d98:	180b883a 	mov	r5,r3
 4009d9c:	1009883a 	mov	r4,r2
 4009da0:	40095680 	call	4009568 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 4009da4:	10803fcc 	andi	r2,r2,255
 4009da8:	103fa326 	beq	r2,zero,4009c38 <__alt_data_end+0xfc009c38>
 4009dac:	00c000c4 	movi	r3,3
 4009db0:	003ef406 	br	4009984 <__alt_data_end+0xfc009984>
 4009db4:	010100f4 	movhi	r4,1027
 4009db8:	2123df04 	addi	r4,r4,-28804
 4009dbc:	d9001e15 	stw	r4,120(sp)
 4009dc0:	003f5f06 	br	4009b40 <__alt_data_end+0xfc009b40>
 4009dc4:	d9001b17 	ldw	r4,108(sp)
 4009dc8:	00c00044 	movi	r3,1
 4009dcc:	193fd636 	bltu	r3,r4,4009d28 <__alt_data_end+0xfc009d28>
 4009dd0:	01ffffc4 	movi	r7,-1
 4009dd4:	d9c00915 	stw	r7,36(sp)
 4009dd8:	d9800717 	ldw	r6,28(sp)
 4009ddc:	d9c01517 	ldw	r7,84(sp)
 4009de0:	d9401e17 	ldw	r5,120(sp)
 4009de4:	d809883a 	mov	r4,sp
 4009de8:	40097b00 	call	40097b0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 4009dec:	1080005c 	xori	r2,r2,1
 4009df0:	003fde06 	br	4009d6c <__alt_data_end+0xfc009d6c>
 4009df4:	d9001b17 	ldw	r4,108(sp)
 4009df8:	00800044 	movi	r2,1
 4009dfc:	113f4d36 	bltu	r2,r4,4009b34 <__alt_data_end+0xfc009b34>
 4009e00:	d9c02317 	ldw	r7,140(sp)
 4009e04:	38800017 	ldw	r2,0(r7)
 4009e08:	1080004c 	andi	r2,r2,1
 4009e0c:	1000061e 	bne	r2,zero,4009e28 <__gxx_personality_sj0+0x5d0>
 4009e10:	d8c02317 	ldw	r3,140(sp)
 4009e14:	18800504 	addi	r2,r3,20
 4009e18:	d8800715 	stw	r2,28(sp)
 4009e1c:	10bff017 	ldw	r2,-64(r2)
 4009e20:	d8801e15 	stw	r2,120(sp)
 4009e24:	003f4606 	br	4009b40 <__alt_data_end+0xfc009b40>
 4009e28:	38bff517 	ldw	r2,-44(r7)
 4009e2c:	003ffa06 	br	4009e18 <__alt_data_end+0xfc009e18>
 4009e30:	d9000a17 	ldw	r4,40(sp)
 4009e34:	400a2a00 	call	400a2a0 <__cxa_begin_catch>
 4009e38:	003f9106 	br	4009c80 <__alt_data_end+0xfc009c80>
 4009e3c:	d9c01c17 	ldw	r7,112(sp)
 4009e40:	383eda1e 	bne	r7,zero,40099ac <__alt_data_end+0xfc0099ac>
 4009e44:	d8c01b17 	ldw	r3,108(sp)
 4009e48:	00800044 	movi	r2,1
 4009e4c:	10fed736 	bltu	r2,r3,40099ac <__alt_data_end+0xfc0099ac>
 4009e50:	00c000c4 	movi	r3,3
 4009e54:	003f8e06 	br	4009c90 <__alt_data_end+0xfc009c90>

04009e58 <__cxa_call_unexpected>:
 4009e58:	00810074 	movhi	r2,1025
 4009e5c:	deffe604 	addi	sp,sp,-104
 4009e60:	10a61604 	addi	r2,r2,-26536
 4009e64:	d8800d15 	stw	r2,52(sp)
 4009e68:	008100b4 	movhi	r2,1026
 4009e6c:	10aad704 	addi	r2,r2,-21668
 4009e70:	d8800e15 	stw	r2,56(sp)
 4009e74:	d8800104 	addi	r2,sp,4
 4009e78:	d8800f15 	stw	r2,60(sp)
 4009e7c:	00810074 	movhi	r2,1025
 4009e80:	10a7b904 	addi	r2,r2,-24860
 4009e84:	d9001415 	stw	r4,80(sp)
 4009e88:	d9000704 	addi	r4,sp,28
 4009e8c:	dfc01915 	stw	ra,100(sp)
 4009e90:	d8801015 	stw	r2,64(sp)
 4009e94:	df001815 	stw	fp,96(sp)
 4009e98:	dec01115 	stw	sp,68(sp)
 4009e9c:	400afa40 	call	400afa4 <_Unwind_SjLj_Register>
 4009ea0:	d9001417 	ldw	r4,80(sp)
 4009ea4:	400a2a00 	call	400a2a0 <__cxa_begin_catch>
 4009ea8:	d8c01417 	ldw	r3,80(sp)
 4009eac:	18bffe17 	ldw	r2,-8(r3)
 4009eb0:	193ff717 	ldw	r4,-36(r3)
 4009eb4:	18fffd17 	ldw	r3,-12(r3)
 4009eb8:	d8800315 	stw	r2,12(sp)
 4009ebc:	d8c01615 	stw	r3,88(sp)
 4009ec0:	d8c01417 	ldw	r3,80(sp)
 4009ec4:	18fffb17 	ldw	r3,-20(r3)
 4009ec8:	d8c01515 	stw	r3,84(sp)
 4009ecc:	d8c01417 	ldw	r3,80(sp)
 4009ed0:	18fff817 	ldw	r3,-32(r3)
 4009ed4:	d8c01415 	stw	r3,80(sp)
 4009ed8:	00c00044 	movi	r3,1
 4009edc:	d8c00815 	stw	r3,32(sp)
 4009ee0:	400a7c80 	call	400a7c8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 4009ee4:	d8c00917 	ldw	r3,36(sp)
 4009ee8:	d8800817 	ldw	r2,32(sp)
 4009eec:	d8c01715 	stw	r3,92(sp)
 4009ef0:	10000a26 	beq	r2,zero,4009f1c <__cxa_call_unexpected+0xc4>
 4009ef4:	10bfffc4 	addi	r2,r2,-1
 4009ef8:	10000126 	beq	r2,zero,4009f00 <__cxa_call_unexpected+0xa8>
 4009efc:	003b68fa 	trap	3
 4009f00:	d8000815 	stw	zero,32(sp)
 4009f04:	400a3540 	call	400a354 <__cxa_end_catch>
 4009f08:	400a3540 	call	400a354 <__cxa_end_catch>
 4009f0c:	d9001717 	ldw	r4,92(sp)
 4009f10:	00bfffc4 	movi	r2,-1
 4009f14:	d8800815 	stw	r2,32(sp)
 4009f18:	400b1a00 	call	400b1a0 <_Unwind_SjLj_Resume>
 4009f1c:	d9001717 	ldw	r4,92(sp)
 4009f20:	400a2a00 	call	400a2a0 <__cxa_begin_catch>
 4009f24:	400ab540 	call	400ab54 <__cxa_get_globals_fast>
 4009f28:	10800017 	ldw	r2,0(r2)
 4009f2c:	10c00b17 	ldw	r3,44(r2)
 4009f30:	18c0004c 	andi	r3,r3,1
 4009f34:	18001e26 	beq	r3,zero,4009fb0 <__cxa_call_unexpected+0x158>
 4009f38:	10800017 	ldw	r2,0(r2)
 4009f3c:	d8801715 	stw	r2,92(sp)
 4009f40:	d8801517 	ldw	r2,84(sp)
 4009f44:	00802b0e 	bge	zero,r2,4009ff4 <__cxa_call_unexpected+0x19c>
 4009f48:	d8c01717 	ldw	r3,92(sp)
 4009f4c:	d8800317 	ldw	r2,12(sp)
 4009f50:	d9c01517 	ldw	r7,84(sp)
 4009f54:	193ff017 	ldw	r4,-64(r3)
 4009f58:	d9801617 	ldw	r6,88(sp)
 4009f5c:	d8800015 	stw	r2,0(sp)
 4009f60:	180b883a 	mov	r5,r3
 4009f64:	00800084 	movi	r2,2
 4009f68:	d8800815 	stw	r2,32(sp)
 4009f6c:	40095f00 	call	40095f0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 4009f70:	10803fcc 	andi	r2,r2,255
 4009f74:	10001e1e 	bne	r2,zero,4009ff0 <__cxa_call_unexpected+0x198>
 4009f78:	d8800317 	ldw	r2,12(sp)
 4009f7c:	d9c01517 	ldw	r7,84(sp)
 4009f80:	d9801617 	ldw	r6,88(sp)
 4009f84:	010100b4 	movhi	r4,1026
 4009f88:	d8800015 	stw	r2,0(sp)
 4009f8c:	21305904 	addi	r4,r4,-16028
 4009f90:	00800084 	movi	r2,2
 4009f94:	000b883a 	mov	r5,zero
 4009f98:	d8800815 	stw	r2,32(sp)
 4009f9c:	40095f00 	call	40095f0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 4009fa0:	10803fcc 	andi	r2,r2,255
 4009fa4:	1000051e 	bne	r2,zero,4009fbc <__cxa_call_unexpected+0x164>
 4009fa8:	d9001417 	ldw	r4,80(sp)
 4009fac:	400a6f00 	call	400a6f0 <_ZN10__cxxabiv111__terminateEPFvvE>
 4009fb0:	10801004 	addi	r2,r2,64
 4009fb4:	d8801715 	stw	r2,92(sp)
 4009fb8:	003fe106 	br	4009f40 <__alt_data_end+0xfc009f40>
 4009fbc:	01000104 	movi	r4,4
 4009fc0:	400a9980 	call	400a998 <__cxa_allocate_exception>
 4009fc4:	00c100b4 	movhi	r3,1026
 4009fc8:	18f07404 	addi	r3,r3,-15920
 4009fcc:	01810074 	movhi	r6,1025
 4009fd0:	014100b4 	movhi	r5,1026
 4009fd4:	10c00015 	stw	r3,0(r2)
 4009fd8:	31aadc04 	addi	r6,r6,-21648
 4009fdc:	00c00084 	movi	r3,2
 4009fe0:	29705904 	addi	r5,r5,-16028
 4009fe4:	1009883a 	mov	r4,r2
 4009fe8:	d8c00815 	stw	r3,32(sp)
 4009fec:	400a0d00 	call	400a0d0 <__cxa_throw>
 4009ff0:	400a1600 	call	400a160 <__cxa_rethrow>
 4009ff4:	d9401617 	ldw	r5,88(sp)
 4009ff8:	00800084 	movi	r2,2
 4009ffc:	d9800104 	addi	r6,sp,4
 400a000:	0009883a 	mov	r4,zero
 400a004:	d8800815 	stw	r2,32(sp)
 400a008:	40094340 	call	4009434 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400a00c:	d9801717 	ldw	r6,92(sp)
 400a010:	d9c01517 	ldw	r7,84(sp)
 400a014:	d9000104 	addi	r4,sp,4
 400a018:	317ff017 	ldw	r5,-64(r6)
 400a01c:	40097b00 	call	40097b0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400a020:	10803fcc 	andi	r2,r2,255
 400a024:	1000171e 	bne	r2,zero,400a084 <__cxa_call_unexpected+0x22c>
 400a028:	d9c01517 	ldw	r7,84(sp)
 400a02c:	014100b4 	movhi	r5,1026
 400a030:	00800084 	movi	r2,2
 400a034:	29705904 	addi	r5,r5,-16028
 400a038:	000d883a 	mov	r6,zero
 400a03c:	d9000104 	addi	r4,sp,4
 400a040:	d8800815 	stw	r2,32(sp)
 400a044:	40097b00 	call	40097b0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400a048:	10803fcc 	andi	r2,r2,255
 400a04c:	103fd626 	beq	r2,zero,4009fa8 <__alt_data_end+0xfc009fa8>
 400a050:	01000104 	movi	r4,4
 400a054:	400a9980 	call	400a998 <__cxa_allocate_exception>
 400a058:	00c100b4 	movhi	r3,1026
 400a05c:	18f07404 	addi	r3,r3,-15920
 400a060:	01810074 	movhi	r6,1025
 400a064:	014100b4 	movhi	r5,1026
 400a068:	10c00015 	stw	r3,0(r2)
 400a06c:	31aadc04 	addi	r6,r6,-21648
 400a070:	00c00084 	movi	r3,2
 400a074:	29705904 	addi	r5,r5,-16028
 400a078:	1009883a 	mov	r4,r2
 400a07c:	d8c00815 	stw	r3,32(sp)
 400a080:	400a0d00 	call	400a0d0 <__cxa_throw>
 400a084:	400a1600 	call	400a160 <__cxa_rethrow>

0400a088 <_ZdlPv>:
 400a088:	400b3341 	jmpi	400b334 <free>

0400a08c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 400a08c:	defffe04 	addi	sp,sp,-8
 400a090:	dfc00115 	stw	ra,4(sp)
 400a094:	dc000015 	stw	r16,0(sp)
 400a098:	00800044 	movi	r2,1
 400a09c:	11000a36 	bltu	r2,r4,400a0c8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 400a0a0:	28bff617 	ldw	r2,-40(r5)
 400a0a4:	2c000504 	addi	r16,r5,20
 400a0a8:	10000226 	beq	r2,zero,400a0b4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 400a0ac:	8009883a 	mov	r4,r16
 400a0b0:	103ee83a 	callr	r2
 400a0b4:	8009883a 	mov	r4,r16
 400a0b8:	dfc00117 	ldw	ra,4(sp)
 400a0bc:	dc000017 	ldw	r16,0(sp)
 400a0c0:	dec00204 	addi	sp,sp,8
 400a0c4:	400a9f81 	jmpi	400a9f8 <__cxa_free_exception>
 400a0c8:	293ff817 	ldw	r4,-32(r5)
 400a0cc:	400a6f00 	call	400a6f0 <_ZN10__cxxabiv111__terminateEPFvvE>

0400a0d0 <__cxa_throw>:
 400a0d0:	defffb04 	addi	sp,sp,-20
 400a0d4:	dfc00415 	stw	ra,16(sp)
 400a0d8:	dcc00315 	stw	r19,12(sp)
 400a0dc:	dc800215 	stw	r18,8(sp)
 400a0e0:	2827883a 	mov	r19,r5
 400a0e4:	3025883a 	mov	r18,r6
 400a0e8:	dc400115 	stw	r17,4(sp)
 400a0ec:	dc000015 	stw	r16,0(sp)
 400a0f0:	2021883a 	mov	r16,r4
 400a0f4:	400ab600 	call	400ab60 <__cxa_get_globals>
 400a0f8:	10c00117 	ldw	r3,4(r2)
 400a0fc:	847ffb04 	addi	r17,r16,-20
 400a100:	18c00044 	addi	r3,r3,1
 400a104:	10c00115 	stw	r3,4(r2)
 400a108:	00800044 	movi	r2,1
 400a10c:	80bfef15 	stw	r2,-68(r16)
 400a110:	84fff015 	stw	r19,-64(r16)
 400a114:	84bff115 	stw	r18,-60(r16)
 400a118:	400a8280 	call	400a828 <_ZSt14get_unexpectedv>
 400a11c:	80bff215 	stw	r2,-56(r16)
 400a120:	400a8040 	call	400a804 <_ZSt13get_terminatev>
 400a124:	80bff315 	stw	r2,-52(r16)
 400a128:	0090caf4 	movhi	r2,17195
 400a12c:	108ac004 	addi	r2,r2,11008
 400a130:	80bffb15 	stw	r2,-20(r16)
 400a134:	0091d3b4 	movhi	r2,18254
 400a138:	109550c4 	addi	r2,r2,21827
 400a13c:	80bffc15 	stw	r2,-16(r16)
 400a140:	00810074 	movhi	r2,1025
 400a144:	10a82304 	addi	r2,r2,-24436
 400a148:	8809883a 	mov	r4,r17
 400a14c:	80bffd15 	stw	r2,-12(r16)
 400a150:	400b08c0 	call	400b08c <_Unwind_SjLj_RaiseException>
 400a154:	8809883a 	mov	r4,r17
 400a158:	400a2a00 	call	400a2a0 <__cxa_begin_catch>
 400a15c:	400a7b00 	call	400a7b0 <_ZSt9terminatev>

0400a160 <__cxa_rethrow>:
 400a160:	defffe04 	addi	sp,sp,-8
 400a164:	dfc00115 	stw	ra,4(sp)
 400a168:	dc000015 	stw	r16,0(sp)
 400a16c:	400ab600 	call	400ab60 <__cxa_get_globals>
 400a170:	10c00117 	ldw	r3,4(r2)
 400a174:	11000017 	ldw	r4,0(r2)
 400a178:	18c00044 	addi	r3,r3,1
 400a17c:	10c00115 	stw	r3,4(r2)
 400a180:	20001126 	beq	r4,zero,400a1c8 <__cxa_rethrow+0x68>
 400a184:	21400b17 	ldw	r5,44(r4)
 400a188:	01ef3574 	movhi	r7,48341
 400a18c:	39f54004 	addi	r7,r7,-11008
 400a190:	29cf883a 	add	r7,r5,r7
 400a194:	20c00c17 	ldw	r3,48(r4)
 400a198:	394d803a 	cmpltu	r6,r7,r5
 400a19c:	016e2cb4 	movhi	r5,47282
 400a1a0:	296aaf04 	addi	r5,r5,-21828
 400a1a4:	1947883a 	add	r3,r3,r5
 400a1a8:	30c7883a 	add	r3,r6,r3
 400a1ac:	18000726 	beq	r3,zero,400a1cc <__cxa_rethrow+0x6c>
 400a1b0:	10000015 	stw	zero,0(r2)
 400a1b4:	24000b04 	addi	r16,r4,44
 400a1b8:	8009883a 	mov	r4,r16
 400a1bc:	400b1e40 	call	400b1e4 <_Unwind_SjLj_Resume_or_Rethrow>
 400a1c0:	8009883a 	mov	r4,r16
 400a1c4:	400a2a00 	call	400a2a0 <__cxa_begin_catch>
 400a1c8:	400a7b00 	call	400a7b0 <_ZSt9terminatev>
 400a1cc:	00c00044 	movi	r3,1
 400a1d0:	19fff736 	bltu	r3,r7,400a1b0 <__alt_data_end+0xfc00a1b0>
 400a1d4:	20800517 	ldw	r2,20(r4)
 400a1d8:	0085c83a 	sub	r2,zero,r2
 400a1dc:	20800515 	stw	r2,20(r4)
 400a1e0:	003ff406 	br	400a1b4 <__alt_data_end+0xfc00a1b4>

0400a1e4 <__cxa_pure_virtual>:
 400a1e4:	014100b4 	movhi	r5,1026
 400a1e8:	deffff04 	addi	sp,sp,-4
 400a1ec:	29702104 	addi	r5,r5,-16252
 400a1f0:	018006c4 	movi	r6,27
 400a1f4:	01000084 	movi	r4,2
 400a1f8:	dfc00015 	stw	ra,0(sp)
 400a1fc:	401892c0 	call	401892c <write>
 400a200:	400a7b00 	call	400a7b0 <_ZSt9terminatev>

0400a204 <__cxa_deleted_virtual>:
 400a204:	014100b4 	movhi	r5,1026
 400a208:	deffff04 	addi	sp,sp,-4
 400a20c:	29702804 	addi	r5,r5,-16224
 400a210:	01800784 	movi	r6,30
 400a214:	01000084 	movi	r4,2
 400a218:	dfc00015 	stw	ra,0(sp)
 400a21c:	401892c0 	call	401892c <write>
 400a220:	400a7b00 	call	400a7b0 <_ZSt9terminatev>

0400a224 <__cxa_guard_acquire>:
 400a224:	20800007 	ldb	r2,0(r4)
 400a228:	1000061e 	bne	r2,zero,400a244 <__cxa_guard_acquire+0x20>
 400a22c:	20800047 	ldb	r2,1(r4)
 400a230:	1000061e 	bne	r2,zero,400a24c <__cxa_guard_acquire+0x28>
 400a234:	00800044 	movi	r2,1
 400a238:	20800045 	stb	r2,1(r4)
 400a23c:	00800044 	movi	r2,1
 400a240:	f800283a 	ret
 400a244:	0005883a 	mov	r2,zero
 400a248:	f800283a 	ret
 400a24c:	deffff04 	addi	sp,sp,-4
 400a250:	01000104 	movi	r4,4
 400a254:	dfc00015 	stw	ra,0(sp)
 400a258:	400a9980 	call	400a998 <__cxa_allocate_exception>
 400a25c:	00c100b4 	movhi	r3,1026
 400a260:	01810074 	movhi	r6,1025
 400a264:	014100b4 	movhi	r5,1026
 400a268:	18f08f04 	addi	r3,r3,-15812
 400a26c:	31aae904 	addi	r6,r6,-21596
 400a270:	29708a04 	addi	r5,r5,-15832
 400a274:	1009883a 	mov	r4,r2
 400a278:	10c00015 	stw	r3,0(r2)
 400a27c:	400a0d00 	call	400a0d0 <__cxa_throw>

0400a280 <__cxa_guard_abort>:
 400a280:	20000045 	stb	zero,1(r4)
 400a284:	f800283a 	ret

0400a288 <__cxa_guard_release>:
 400a288:	00800044 	movi	r2,1
 400a28c:	20000045 	stb	zero,1(r4)
 400a290:	20800005 	stb	r2,0(r4)
 400a294:	f800283a 	ret

0400a298 <__cxa_get_exception_ptr>:
 400a298:	20bfff17 	ldw	r2,-4(r4)
 400a29c:	f800283a 	ret

0400a2a0 <__cxa_begin_catch>:
 400a2a0:	defffe04 	addi	sp,sp,-8
 400a2a4:	dc000015 	stw	r16,0(sp)
 400a2a8:	dfc00115 	stw	ra,4(sp)
 400a2ac:	2021883a 	mov	r16,r4
 400a2b0:	400ab600 	call	400ab60 <__cxa_get_globals>
 400a2b4:	81000017 	ldw	r4,0(r16)
 400a2b8:	80c00117 	ldw	r3,4(r16)
 400a2bc:	01af3574 	movhi	r6,48341
 400a2c0:	31b54004 	addi	r6,r6,-11008
 400a2c4:	016e2cb4 	movhi	r5,47282
 400a2c8:	296aaf04 	addi	r5,r5,-21828
 400a2cc:	218d883a 	add	r6,r4,r6
 400a2d0:	3109803a 	cmpltu	r4,r6,r4
 400a2d4:	1947883a 	add	r3,r3,r5
 400a2d8:	20c7883a 	add	r3,r4,r3
 400a2dc:	817ff504 	addi	r5,r16,-44
 400a2e0:	11000017 	ldw	r4,0(r2)
 400a2e4:	18000726 	beq	r3,zero,400a304 <__cxa_begin_catch+0x64>
 400a2e8:	2000191e 	bne	r4,zero,400a350 <__cxa_begin_catch+0xb0>
 400a2ec:	11400015 	stw	r5,0(r2)
 400a2f0:	0005883a 	mov	r2,zero
 400a2f4:	dfc00117 	ldw	ra,4(sp)
 400a2f8:	dc000017 	ldw	r16,0(sp)
 400a2fc:	dec00204 	addi	sp,sp,8
 400a300:	f800283a 	ret
 400a304:	01c00044 	movi	r7,1
 400a308:	39bff736 	bltu	r7,r6,400a2e8 <__alt_data_end+0xfc00a2e8>
 400a30c:	80fffa17 	ldw	r3,-24(r16)
 400a310:	18000d16 	blt	r3,zero,400a348 <__cxa_begin_catch+0xa8>
 400a314:	18c00044 	addi	r3,r3,1
 400a318:	11800117 	ldw	r6,4(r2)
 400a31c:	80fffa15 	stw	r3,-24(r16)
 400a320:	30ffffc4 	addi	r3,r6,-1
 400a324:	10c00115 	stw	r3,4(r2)
 400a328:	21400226 	beq	r4,r5,400a334 <__cxa_begin_catch+0x94>
 400a32c:	813ff915 	stw	r4,-28(r16)
 400a330:	11400015 	stw	r5,0(r2)
 400a334:	80bfff17 	ldw	r2,-4(r16)
 400a338:	dfc00117 	ldw	ra,4(sp)
 400a33c:	dc000017 	ldw	r16,0(sp)
 400a340:	dec00204 	addi	sp,sp,8
 400a344:	f800283a 	ret
 400a348:	38c7c83a 	sub	r3,r7,r3
 400a34c:	003ff206 	br	400a318 <__alt_data_end+0xfc00a318>
 400a350:	400a7b00 	call	400a7b0 <_ZSt9terminatev>

0400a354 <__cxa_end_catch>:
 400a354:	deffff04 	addi	sp,sp,-4
 400a358:	dfc00015 	stw	ra,0(sp)
 400a35c:	400ab540 	call	400ab54 <__cxa_get_globals_fast>
 400a360:	11000017 	ldw	r4,0(r2)
 400a364:	20001426 	beq	r4,zero,400a3b8 <__cxa_end_catch+0x64>
 400a368:	21400b17 	ldw	r5,44(r4)
 400a36c:	01ef3574 	movhi	r7,48341
 400a370:	39f54004 	addi	r7,r7,-11008
 400a374:	29cf883a 	add	r7,r5,r7
 400a378:	20c00c17 	ldw	r3,48(r4)
 400a37c:	394d803a 	cmpltu	r6,r7,r5
 400a380:	016e2cb4 	movhi	r5,47282
 400a384:	296aaf04 	addi	r5,r5,-21828
 400a388:	1947883a 	add	r3,r3,r5
 400a38c:	30c7883a 	add	r3,r6,r3
 400a390:	18000c1e 	bne	r3,zero,400a3c4 <__cxa_end_catch+0x70>
 400a394:	00c00044 	movi	r3,1
 400a398:	19c00a36 	bltu	r3,r7,400a3c4 <__cxa_end_catch+0x70>
 400a39c:	20c00517 	ldw	r3,20(r4)
 400a3a0:	18000d16 	blt	r3,zero,400a3d8 <__cxa_end_catch+0x84>
 400a3a4:	18ffffc4 	addi	r3,r3,-1
 400a3a8:	18001026 	beq	r3,zero,400a3ec <__cxa_end_catch+0x98>
 400a3ac:	00bfffc4 	movi	r2,-1
 400a3b0:	18801426 	beq	r3,r2,400a404 <__cxa_end_catch+0xb0>
 400a3b4:	20c00515 	stw	r3,20(r4)
 400a3b8:	dfc00017 	ldw	ra,0(sp)
 400a3bc:	dec00104 	addi	sp,sp,4
 400a3c0:	f800283a 	ret
 400a3c4:	21000b04 	addi	r4,r4,44
 400a3c8:	10000015 	stw	zero,0(r2)
 400a3cc:	dfc00017 	ldw	ra,0(sp)
 400a3d0:	dec00104 	addi	sp,sp,4
 400a3d4:	400b2301 	jmpi	400b230 <_Unwind_DeleteException>
 400a3d8:	18c00044 	addi	r3,r3,1
 400a3dc:	183ff51e 	bne	r3,zero,400a3b4 <__alt_data_end+0xfc00a3b4>
 400a3e0:	21400417 	ldw	r5,16(r4)
 400a3e4:	11400015 	stw	r5,0(r2)
 400a3e8:	003ff206 	br	400a3b4 <__alt_data_end+0xfc00a3b4>
 400a3ec:	20c00417 	ldw	r3,16(r4)
 400a3f0:	21000b04 	addi	r4,r4,44
 400a3f4:	10c00015 	stw	r3,0(r2)
 400a3f8:	dfc00017 	ldw	ra,0(sp)
 400a3fc:	dec00104 	addi	sp,sp,4
 400a400:	400b2301 	jmpi	400b230 <_Unwind_DeleteException>
 400a404:	400a7b00 	call	400a7b0 <_ZSt9terminatev>

0400a408 <_ZSt18uncaught_exceptionv>:
 400a408:	deffff04 	addi	sp,sp,-4
 400a40c:	dfc00015 	stw	ra,0(sp)
 400a410:	400ab600 	call	400ab60 <__cxa_get_globals>
 400a414:	10800117 	ldw	r2,4(r2)
 400a418:	1004c03a 	cmpne	r2,r2,zero
 400a41c:	dfc00017 	ldw	ra,0(sp)
 400a420:	dec00104 	addi	sp,sp,4
 400a424:	f800283a 	ret

0400a428 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 400a428:	20800017 	ldw	r2,0(r4)
 400a42c:	defffa04 	addi	sp,sp,-24
 400a430:	dc000415 	stw	r16,16(sp)
 400a434:	10800617 	ldw	r2,24(r2)
 400a438:	3021883a 	mov	r16,r6
 400a43c:	31800017 	ldw	r6,0(r6)
 400a440:	00c00404 	movi	r3,16
 400a444:	d8c00215 	stw	r3,8(sp)
 400a448:	dfc00515 	stw	ra,20(sp)
 400a44c:	d8000015 	stw	zero,0(sp)
 400a450:	d8000115 	stw	zero,4(sp)
 400a454:	d8000315 	stw	zero,12(sp)
 400a458:	d80f883a 	mov	r7,sp
 400a45c:	103ee83a 	callr	r2
 400a460:	d8800117 	ldw	r2,4(sp)
 400a464:	00c00184 	movi	r3,6
 400a468:	1080018c 	andi	r2,r2,6
 400a46c:	10c00526 	beq	r2,r3,400a484 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 400a470:	0005883a 	mov	r2,zero
 400a474:	dfc00517 	ldw	ra,20(sp)
 400a478:	dc000417 	ldw	r16,16(sp)
 400a47c:	dec00604 	addi	sp,sp,24
 400a480:	f800283a 	ret
 400a484:	d8c00017 	ldw	r3,0(sp)
 400a488:	00800044 	movi	r2,1
 400a48c:	80c00015 	stw	r3,0(r16)
 400a490:	dfc00517 	ldw	ra,20(sp)
 400a494:	dc000417 	ldw	r16,16(sp)
 400a498:	dec00604 	addi	sp,sp,24
 400a49c:	f800283a 	ret

0400a4a0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 400a4a0:	d8800017 	ldw	r2,0(sp)
 400a4a4:	11800226 	beq	r2,r6,400a4b0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 400a4a8:	00800044 	movi	r2,1
 400a4ac:	f800283a 	ret
 400a4b0:	00800184 	movi	r2,6
 400a4b4:	f800283a 	ret

0400a4b8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 400a4b8:	008100b4 	movhi	r2,1026
 400a4bc:	10b03e04 	addi	r2,r2,-16136
 400a4c0:	20800015 	stw	r2,0(r4)
 400a4c4:	40090481 	jmpi	4009048 <_ZNSt9type_infoD1Ev>

0400a4c8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 400a4c8:	defffe04 	addi	sp,sp,-8
 400a4cc:	008100b4 	movhi	r2,1026
 400a4d0:	dc000015 	stw	r16,0(sp)
 400a4d4:	dfc00115 	stw	ra,4(sp)
 400a4d8:	10b03e04 	addi	r2,r2,-16136
 400a4dc:	20800015 	stw	r2,0(r4)
 400a4e0:	2021883a 	mov	r16,r4
 400a4e4:	40090480 	call	4009048 <_ZNSt9type_infoD1Ev>
 400a4e8:	8009883a 	mov	r4,r16
 400a4ec:	dfc00117 	ldw	ra,4(sp)
 400a4f0:	dc000017 	ldw	r16,0(sp)
 400a4f4:	dec00204 	addi	sp,sp,8
 400a4f8:	400a0881 	jmpi	400a088 <_ZdlPv>

0400a4fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 400a4fc:	21000117 	ldw	r4,4(r4)
 400a500:	29400117 	ldw	r5,4(r5)
 400a504:	defffd04 	addi	sp,sp,-12
 400a508:	dc400115 	stw	r17,4(sp)
 400a50c:	dc000015 	stw	r16,0(sp)
 400a510:	dfc00215 	stw	ra,8(sp)
 400a514:	3023883a 	mov	r17,r6
 400a518:	3821883a 	mov	r16,r7
 400a51c:	21400526 	beq	r4,r5,400a534 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 400a520:	20c00007 	ldb	r3,0(r4)
 400a524:	00800a84 	movi	r2,42
 400a528:	18800d26 	beq	r3,r2,400a560 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400a52c:	400c2d80 	call	400c2d8 <strcmp>
 400a530:	10000b1e 	bne	r2,zero,400a560 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400a534:	00800204 	movi	r2,8
 400a538:	80800315 	stw	r2,12(r16)
 400a53c:	00800184 	movi	r2,6
 400a540:	80800115 	stw	r2,4(r16)
 400a544:	84400015 	stw	r17,0(r16)
 400a548:	00800044 	movi	r2,1
 400a54c:	dfc00217 	ldw	ra,8(sp)
 400a550:	dc400117 	ldw	r17,4(sp)
 400a554:	dc000017 	ldw	r16,0(sp)
 400a558:	dec00304 	addi	sp,sp,12
 400a55c:	f800283a 	ret
 400a560:	0005883a 	mov	r2,zero
 400a564:	003ff906 	br	400a54c <__alt_data_end+0xfc00a54c>

0400a568 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 400a568:	defffa04 	addi	sp,sp,-24
 400a56c:	dc800415 	stw	r18,16(sp)
 400a570:	d8800817 	ldw	r2,32(sp)
 400a574:	dc800617 	ldw	r18,24(sp)
 400a578:	dc400315 	stw	r17,12(sp)
 400a57c:	dc000215 	stw	r16,8(sp)
 400a580:	dfc00515 	stw	ra,20(sp)
 400a584:	dc400917 	ldw	r17,36(sp)
 400a588:	24000117 	ldw	r16,4(r4)
 400a58c:	90801526 	beq	r18,r2,400a5e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 400a590:	39400117 	ldw	r5,4(r7)
 400a594:	2c000826 	beq	r5,r16,400a5b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 400a598:	80c00007 	ldb	r3,0(r16)
 400a59c:	00800a84 	movi	r2,42
 400a5a0:	18800926 	beq	r3,r2,400a5c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400a5a4:	8009883a 	mov	r4,r16
 400a5a8:	d9800115 	stw	r6,4(sp)
 400a5ac:	400c2d80 	call	400c2d8 <strcmp>
 400a5b0:	d9800117 	ldw	r6,4(sp)
 400a5b4:	1000041e 	bne	r2,zero,400a5c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400a5b8:	00800044 	movi	r2,1
 400a5bc:	8c800015 	stw	r18,0(r17)
 400a5c0:	89800115 	stw	r6,4(r17)
 400a5c4:	88800315 	stw	r2,12(r17)
 400a5c8:	0005883a 	mov	r2,zero
 400a5cc:	dfc00517 	ldw	ra,20(sp)
 400a5d0:	dc800417 	ldw	r18,16(sp)
 400a5d4:	dc400317 	ldw	r17,12(sp)
 400a5d8:	dc000217 	ldw	r16,8(sp)
 400a5dc:	dec00604 	addi	sp,sp,24
 400a5e0:	f800283a 	ret
 400a5e4:	d8800717 	ldw	r2,28(sp)
 400a5e8:	11400117 	ldw	r5,4(r2)
 400a5ec:	81400a26 	beq	r16,r5,400a618 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 400a5f0:	80c00007 	ldb	r3,0(r16)
 400a5f4:	00800a84 	movi	r2,42
 400a5f8:	18800c26 	beq	r3,r2,400a62c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 400a5fc:	8009883a 	mov	r4,r16
 400a600:	d9800115 	stw	r6,4(sp)
 400a604:	d9c00015 	stw	r7,0(sp)
 400a608:	400c2d80 	call	400c2d8 <strcmp>
 400a60c:	d9800117 	ldw	r6,4(sp)
 400a610:	d9c00017 	ldw	r7,0(sp)
 400a614:	1000021e 	bne	r2,zero,400a620 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 400a618:	89800215 	stw	r6,8(r17)
 400a61c:	003fea06 	br	400a5c8 <__alt_data_end+0xfc00a5c8>
 400a620:	39400117 	ldw	r5,4(r7)
 400a624:	817fdf1e 	bne	r16,r5,400a5a4 <__alt_data_end+0xfc00a5a4>
 400a628:	003fe306 	br	400a5b8 <__alt_data_end+0xfc00a5b8>
 400a62c:	38800117 	ldw	r2,4(r7)
 400a630:	80bfe51e 	bne	r16,r2,400a5c8 <__alt_data_end+0xfc00a5c8>
 400a634:	003fe006 	br	400a5b8 <__alt_data_end+0xfc00a5b8>

0400a638 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 400a638:	20800117 	ldw	r2,4(r4)
 400a63c:	28c00117 	ldw	r3,4(r5)
 400a640:	10c02926 	beq	r2,r3,400a6e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 400a644:	defffb04 	addi	sp,sp,-20
 400a648:	dcc00315 	stw	r19,12(sp)
 400a64c:	dc800215 	stw	r18,8(sp)
 400a650:	dc400115 	stw	r17,4(sp)
 400a654:	dc000015 	stw	r16,0(sp)
 400a658:	dfc00415 	stw	ra,16(sp)
 400a65c:	2821883a 	mov	r16,r5
 400a660:	11400007 	ldb	r5,0(r2)
 400a664:	2025883a 	mov	r18,r4
 400a668:	01000a84 	movi	r4,42
 400a66c:	3823883a 	mov	r17,r7
 400a670:	3027883a 	mov	r19,r6
 400a674:	29000626 	beq	r5,r4,400a690 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400a678:	180b883a 	mov	r5,r3
 400a67c:	1009883a 	mov	r4,r2
 400a680:	400c2d80 	call	400c2d8 <strcmp>
 400a684:	1000021e 	bne	r2,zero,400a690 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400a688:	00800044 	movi	r2,1
 400a68c:	00000306 	br	400a69c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 400a690:	008000c4 	movi	r2,3
 400a694:	1440082e 	bgeu	r2,r17,400a6b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 400a698:	0005883a 	mov	r2,zero
 400a69c:	dfc00417 	ldw	ra,16(sp)
 400a6a0:	dcc00317 	ldw	r19,12(sp)
 400a6a4:	dc800217 	ldw	r18,8(sp)
 400a6a8:	dc400117 	ldw	r17,4(sp)
 400a6ac:	dc000017 	ldw	r16,0(sp)
 400a6b0:	dec00504 	addi	sp,sp,20
 400a6b4:	f800283a 	ret
 400a6b8:	80800017 	ldw	r2,0(r16)
 400a6bc:	980d883a 	mov	r6,r19
 400a6c0:	900b883a 	mov	r5,r18
 400a6c4:	10800517 	ldw	r2,20(r2)
 400a6c8:	8009883a 	mov	r4,r16
 400a6cc:	dfc00417 	ldw	ra,16(sp)
 400a6d0:	dcc00317 	ldw	r19,12(sp)
 400a6d4:	dc800217 	ldw	r18,8(sp)
 400a6d8:	dc400117 	ldw	r17,4(sp)
 400a6dc:	dc000017 	ldw	r16,0(sp)
 400a6e0:	dec00504 	addi	sp,sp,20
 400a6e4:	1000683a 	jmp	r2
 400a6e8:	00800044 	movi	r2,1
 400a6ec:	f800283a 	ret

0400a6f0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 400a6f0:	00810074 	movhi	r2,1025
 400a6f4:	deffef04 	addi	sp,sp,-68
 400a6f8:	10a61604 	addi	r2,r2,-26536
 400a6fc:	d8800615 	stw	r2,24(sp)
 400a700:	008100b4 	movhi	r2,1026
 400a704:	10aadb04 	addi	r2,r2,-21652
 400a708:	d8800715 	stw	r2,28(sp)
 400a70c:	00810074 	movhi	r2,1025
 400a710:	10a9d204 	addi	r2,r2,-22712
 400a714:	d9000d15 	stw	r4,52(sp)
 400a718:	d809883a 	mov	r4,sp
 400a71c:	d8800915 	stw	r2,36(sp)
 400a720:	dfc01015 	stw	ra,64(sp)
 400a724:	df000f15 	stw	fp,60(sp)
 400a728:	dec00815 	stw	sp,32(sp)
 400a72c:	dec00a15 	stw	sp,40(sp)
 400a730:	400afa40 	call	400afa4 <_Unwind_SjLj_Register>
 400a734:	00800044 	movi	r2,1
 400a738:	d8800115 	stw	r2,4(sp)
 400a73c:	d8800d17 	ldw	r2,52(sp)
 400a740:	103ee83a 	callr	r2
 400a744:	400b2bc0 	call	400b2bc <abort>
 400a748:	d8c00217 	ldw	r3,8(sp)
 400a74c:	d8800117 	ldw	r2,4(sp)
 400a750:	d8c00d15 	stw	r3,52(sp)
 400a754:	d8c00317 	ldw	r3,12(sp)
 400a758:	d8c00e15 	stw	r3,56(sp)
 400a75c:	10000b26 	beq	r2,zero,400a78c <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 400a760:	10bfffc4 	addi	r2,r2,-1
 400a764:	10000126 	beq	r2,zero,400a76c <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 400a768:	003b68fa 	trap	3
 400a76c:	d8000115 	stw	zero,4(sp)
 400a770:	400a3540 	call	400a354 <__cxa_end_catch>
 400a774:	d8c00e17 	ldw	r3,56(sp)
 400a778:	00bfffc4 	movi	r2,-1
 400a77c:	18800826 	beq	r3,r2,400a7a0 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 400a780:	d9000d17 	ldw	r4,52(sp)
 400a784:	d8800115 	stw	r2,4(sp)
 400a788:	400b1a00 	call	400b1a0 <_Unwind_SjLj_Resume>
 400a78c:	d9000d17 	ldw	r4,52(sp)
 400a790:	400a2a00 	call	400a2a0 <__cxa_begin_catch>
 400a794:	00800084 	movi	r2,2
 400a798:	d8800115 	stw	r2,4(sp)
 400a79c:	400b2bc0 	call	400b2bc <abort>
 400a7a0:	d8800e17 	ldw	r2,56(sp)
 400a7a4:	d9000d17 	ldw	r4,52(sp)
 400a7a8:	d8800115 	stw	r2,4(sp)
 400a7ac:	4009e580 	call	4009e58 <__cxa_call_unexpected>

0400a7b0 <_ZSt9terminatev>:
 400a7b0:	008100f4 	movhi	r2,1027
 400a7b4:	10a3e304 	addi	r2,r2,-28788
 400a7b8:	11000017 	ldw	r4,0(r2)
 400a7bc:	deffff04 	addi	sp,sp,-4
 400a7c0:	dfc00015 	stw	ra,0(sp)
 400a7c4:	400a6f00 	call	400a6f0 <_ZN10__cxxabiv111__terminateEPFvvE>

0400a7c8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 400a7c8:	deffff04 	addi	sp,sp,-4
 400a7cc:	dfc00015 	stw	ra,0(sp)
 400a7d0:	203ee83a 	callr	r4
 400a7d4:	400a7b00 	call	400a7b0 <_ZSt9terminatev>

0400a7d8 <_ZSt10unexpectedv>:
 400a7d8:	008100f4 	movhi	r2,1027
 400a7dc:	10a3dc04 	addi	r2,r2,-28816
 400a7e0:	11000017 	ldw	r4,0(r2)
 400a7e4:	deffff04 	addi	sp,sp,-4
 400a7e8:	dfc00015 	stw	ra,0(sp)
 400a7ec:	400a7c80 	call	400a7c8 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0400a7f0 <_ZSt13set_terminatePFvvE>:
 400a7f0:	00c100f4 	movhi	r3,1027
 400a7f4:	18e3e304 	addi	r3,r3,-28788
 400a7f8:	18800017 	ldw	r2,0(r3)
 400a7fc:	19000015 	stw	r4,0(r3)
 400a800:	f800283a 	ret

0400a804 <_ZSt13get_terminatev>:
 400a804:	008100f4 	movhi	r2,1027
 400a808:	10a3e304 	addi	r2,r2,-28788
 400a80c:	10800017 	ldw	r2,0(r2)
 400a810:	f800283a 	ret

0400a814 <_ZSt14set_unexpectedPFvvE>:
 400a814:	00c100f4 	movhi	r3,1027
 400a818:	18e3dc04 	addi	r3,r3,-28816
 400a81c:	18800017 	ldw	r2,0(r3)
 400a820:	19000015 	stw	r4,0(r3)
 400a824:	f800283a 	ret

0400a828 <_ZSt14get_unexpectedv>:
 400a828:	008100f4 	movhi	r2,1027
 400a82c:	10a3dc04 	addi	r2,r2,-28816
 400a830:	10800017 	ldw	r2,0(r2)
 400a834:	f800283a 	ret

0400a838 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 400a838:	018100f4 	movhi	r6,1027
 400a83c:	3196e404 	addi	r6,r6,23440
 400a840:	31400117 	ldw	r5,4(r6)
 400a844:	223fff04 	addi	r8,r4,-4
 400a848:	227fff17 	ldw	r9,-4(r4)
 400a84c:	28001326 	beq	r5,zero,400a89c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
 400a850:	424f883a 	add	r7,r8,r9
 400a854:	29c01426 	beq	r5,r7,400a8a8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 400a858:	28c00117 	ldw	r3,4(r5)
 400a85c:	18001c26 	beq	r3,zero,400a8d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 400a860:	38c00336 	bltu	r7,r3,400a870 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 400a864:	00001e06 	br	400a8e0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
 400a868:	3880052e 	bgeu	r7,r2,400a880 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
 400a86c:	1007883a 	mov	r3,r2
 400a870:	18800117 	ldw	r2,4(r3)
 400a874:	29800104 	addi	r6,r5,4
 400a878:	180b883a 	mov	r5,r3
 400a87c:	103ffa1e 	bne	r2,zero,400a868 <__alt_data_end+0xfc00a868>
 400a880:	19400017 	ldw	r5,0(r3)
 400a884:	194f883a 	add	r7,r3,r5
 400a888:	41c00e26 	beq	r8,r7,400a8c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
 400a88c:	20800015 	stw	r2,0(r4)
 400a890:	30800017 	ldw	r2,0(r6)
 400a894:	12000115 	stw	r8,4(r2)
 400a898:	f800283a 	ret
 400a89c:	20000015 	stw	zero,0(r4)
 400a8a0:	32000115 	stw	r8,4(r6)
 400a8a4:	f800283a 	ret
 400a8a8:	28c00017 	ldw	r3,0(r5)
 400a8ac:	28800117 	ldw	r2,4(r5)
 400a8b0:	1a53883a 	add	r9,r3,r9
 400a8b4:	227fff15 	stw	r9,-4(r4)
 400a8b8:	20800015 	stw	r2,0(r4)
 400a8bc:	32000115 	stw	r8,4(r6)
 400a8c0:	f800283a 	ret
 400a8c4:	494b883a 	add	r5,r9,r5
 400a8c8:	19400015 	stw	r5,0(r3)
 400a8cc:	f800283a 	ret
 400a8d0:	0005883a 	mov	r2,zero
 400a8d4:	2807883a 	mov	r3,r5
 400a8d8:	31800104 	addi	r6,r6,4
 400a8dc:	003fe806 	br	400a880 <__alt_data_end+0xfc00a880>
 400a8e0:	1805883a 	mov	r2,r3
 400a8e4:	31800104 	addi	r6,r6,4
 400a8e8:	2807883a 	mov	r3,r5
 400a8ec:	003fe406 	br	400a880 <__alt_data_end+0xfc00a880>

0400a8f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 400a8f0:	20800104 	addi	r2,r4,4
 400a8f4:	00c001c4 	movi	r3,7
 400a8f8:	1880112e 	bgeu	r3,r2,400a940 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 400a8fc:	20c9883a 	add	r4,r4,r3
 400a900:	00bfff04 	movi	r2,-4
 400a904:	208a703a 	and	r5,r4,r2
 400a908:	018100f4 	movhi	r6,1027
 400a90c:	3196e404 	addi	r6,r6,23440
 400a910:	30c00117 	ldw	r3,4(r6)
 400a914:	18000826 	beq	r3,zero,400a938 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 400a918:	19000017 	ldw	r4,0(r3)
 400a91c:	21400436 	bltu	r4,r5,400a930 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
 400a920:	00001a06 	br	400a98c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
 400a924:	11000017 	ldw	r4,0(r2)
 400a928:	2140072e 	bgeu	r4,r5,400a948 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 400a92c:	1007883a 	mov	r3,r2
 400a930:	18800117 	ldw	r2,4(r3)
 400a934:	103ffb1e 	bne	r2,zero,400a924 <__alt_data_end+0xfc00a924>
 400a938:	0005883a 	mov	r2,zero
 400a93c:	f800283a 	ret
 400a940:	01400204 	movi	r5,8
 400a944:	003ff006 	br	400a908 <__alt_data_end+0xfc00a908>
 400a948:	18c00104 	addi	r3,r3,4
 400a94c:	2149c83a 	sub	r4,r4,r5
 400a950:	018001c4 	movi	r6,7
 400a954:	3100092e 	bgeu	r6,r4,400a97c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
 400a958:	11c00117 	ldw	r7,4(r2)
 400a95c:	114d883a 	add	r6,r2,r5
 400a960:	31000015 	stw	r4,0(r6)
 400a964:	31c00115 	stw	r7,4(r6)
 400a968:	18800017 	ldw	r2,0(r3)
 400a96c:	11400015 	stw	r5,0(r2)
 400a970:	19800015 	stw	r6,0(r3)
 400a974:	10800104 	addi	r2,r2,4
 400a978:	f800283a 	ret
 400a97c:	11000117 	ldw	r4,4(r2)
 400a980:	10800104 	addi	r2,r2,4
 400a984:	19000015 	stw	r4,0(r3)
 400a988:	f800283a 	ret
 400a98c:	1805883a 	mov	r2,r3
 400a990:	30c00104 	addi	r3,r6,4
 400a994:	003fed06 	br	400a94c <__alt_data_end+0xfc00a94c>

0400a998 <__cxa_allocate_exception>:
 400a998:	defffd04 	addi	sp,sp,-12
 400a99c:	dc400115 	stw	r17,4(sp)
 400a9a0:	24401104 	addi	r17,r4,68
 400a9a4:	8809883a 	mov	r4,r17
 400a9a8:	dc000015 	stw	r16,0(sp)
 400a9ac:	dfc00215 	stw	ra,8(sp)
 400a9b0:	400b3200 	call	400b320 <malloc>
 400a9b4:	1021883a 	mov	r16,r2
 400a9b8:	10000a26 	beq	r2,zero,400a9e4 <__cxa_allocate_exception+0x4c>
 400a9bc:	01801104 	movi	r6,68
 400a9c0:	000b883a 	mov	r5,zero
 400a9c4:	8009883a 	mov	r4,r16
 400a9c8:	400bd180 	call	400bd18 <memset>
 400a9cc:	80801104 	addi	r2,r16,68
 400a9d0:	dfc00217 	ldw	ra,8(sp)
 400a9d4:	dc400117 	ldw	r17,4(sp)
 400a9d8:	dc000017 	ldw	r16,0(sp)
 400a9dc:	dec00304 	addi	sp,sp,12
 400a9e0:	f800283a 	ret
 400a9e4:	8809883a 	mov	r4,r17
 400a9e8:	400a8f00 	call	400a8f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400a9ec:	1021883a 	mov	r16,r2
 400a9f0:	103ff21e 	bne	r2,zero,400a9bc <__alt_data_end+0xfc00a9bc>
 400a9f4:	400a7b00 	call	400a7b0 <_ZSt9terminatev>

0400a9f8 <__cxa_free_exception>:
 400a9f8:	00c100f4 	movhi	r3,1027
 400a9fc:	18d6e404 	addi	r3,r3,23440
 400aa00:	18800217 	ldw	r2,8(r3)
 400aa04:	213fef04 	addi	r4,r4,-68
 400aa08:	1100042e 	bgeu	r2,r4,400aa1c <__cxa_free_exception+0x24>
 400aa0c:	18c00317 	ldw	r3,12(r3)
 400aa10:	10c5883a 	add	r2,r2,r3
 400aa14:	2080012e 	bgeu	r4,r2,400aa1c <__cxa_free_exception+0x24>
 400aa18:	400a8381 	jmpi	400a838 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400aa1c:	400b3341 	jmpi	400b334 <free>

0400aa20 <__cxa_allocate_dependent_exception>:
 400aa20:	defffe04 	addi	sp,sp,-8
 400aa24:	01001004 	movi	r4,64
 400aa28:	dc000015 	stw	r16,0(sp)
 400aa2c:	dfc00115 	stw	ra,4(sp)
 400aa30:	400b3200 	call	400b320 <malloc>
 400aa34:	1021883a 	mov	r16,r2
 400aa38:	10000926 	beq	r2,zero,400aa60 <__cxa_allocate_dependent_exception+0x40>
 400aa3c:	01801004 	movi	r6,64
 400aa40:	000b883a 	mov	r5,zero
 400aa44:	8009883a 	mov	r4,r16
 400aa48:	400bd180 	call	400bd18 <memset>
 400aa4c:	8005883a 	mov	r2,r16
 400aa50:	dfc00117 	ldw	ra,4(sp)
 400aa54:	dc000017 	ldw	r16,0(sp)
 400aa58:	dec00204 	addi	sp,sp,8
 400aa5c:	f800283a 	ret
 400aa60:	01001004 	movi	r4,64
 400aa64:	400a8f00 	call	400a8f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400aa68:	1021883a 	mov	r16,r2
 400aa6c:	103ff31e 	bne	r2,zero,400aa3c <__alt_data_end+0xfc00aa3c>
 400aa70:	400a7b00 	call	400a7b0 <_ZSt9terminatev>

0400aa74 <__cxa_free_dependent_exception>:
 400aa74:	014100f4 	movhi	r5,1027
 400aa78:	2956e404 	addi	r5,r5,23440
 400aa7c:	28c00217 	ldw	r3,8(r5)
 400aa80:	2005883a 	mov	r2,r4
 400aa84:	1900042e 	bgeu	r3,r4,400aa98 <__cxa_free_dependent_exception+0x24>
 400aa88:	29400317 	ldw	r5,12(r5)
 400aa8c:	1947883a 	add	r3,r3,r5
 400aa90:	20c0012e 	bgeu	r4,r3,400aa98 <__cxa_free_dependent_exception+0x24>
 400aa94:	400a8381 	jmpi	400a838 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400aa98:	1009883a 	mov	r4,r2
 400aa9c:	400b3341 	jmpi	400b334 <free>

0400aaa0 <_GLOBAL__sub_I___cxa_allocate_exception>:
 400aaa0:	defffd04 	addi	sp,sp,-12
 400aaa4:	dc400115 	stw	r17,4(sp)
 400aaa8:	dc000015 	stw	r16,0(sp)
 400aaac:	04424004 	movi	r17,2304
 400aab0:	040100f4 	movhi	r16,1027
 400aab4:	8416e404 	addi	r16,r16,23440
 400aab8:	8809883a 	mov	r4,r17
 400aabc:	dfc00215 	stw	ra,8(sp)
 400aac0:	84400315 	stw	r17,12(r16)
 400aac4:	400b3200 	call	400b320 <malloc>
 400aac8:	80800215 	stw	r2,8(r16)
 400aacc:	10000826 	beq	r2,zero,400aaf0 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
 400aad0:	80800115 	stw	r2,4(r16)
 400aad4:	14400015 	stw	r17,0(r2)
 400aad8:	10000115 	stw	zero,4(r2)
 400aadc:	dfc00217 	ldw	ra,8(sp)
 400aae0:	dc400117 	ldw	r17,4(sp)
 400aae4:	dc000017 	ldw	r16,0(sp)
 400aae8:	dec00304 	addi	sp,sp,12
 400aaec:	f800283a 	ret
 400aaf0:	80000315 	stw	zero,12(r16)
 400aaf4:	80000115 	stw	zero,4(r16)
 400aaf8:	003ff806 	br	400aadc <__alt_data_end+0xfc00aadc>

0400aafc <__cxa_call_terminate>:
 400aafc:	defffe04 	addi	sp,sp,-8
 400ab00:	dfc00115 	stw	ra,4(sp)
 400ab04:	dc000015 	stw	r16,0(sp)
 400ab08:	20000d26 	beq	r4,zero,400ab40 <__cxa_call_terminate+0x44>
 400ab0c:	2021883a 	mov	r16,r4
 400ab10:	400a2a00 	call	400a2a0 <__cxa_begin_catch>
 400ab14:	80c00017 	ldw	r3,0(r16)
 400ab18:	016f3574 	movhi	r5,48341
 400ab1c:	29754004 	addi	r5,r5,-11008
 400ab20:	194b883a 	add	r5,r3,r5
 400ab24:	80800117 	ldw	r2,4(r16)
 400ab28:	28c9803a 	cmpltu	r4,r5,r3
 400ab2c:	00ee2cb4 	movhi	r3,47282
 400ab30:	18eaaf04 	addi	r3,r3,-21828
 400ab34:	10c5883a 	add	r2,r2,r3
 400ab38:	2085883a 	add	r2,r4,r2
 400ab3c:	10000126 	beq	r2,zero,400ab44 <__cxa_call_terminate+0x48>
 400ab40:	400a7b00 	call	400a7b0 <_ZSt9terminatev>
 400ab44:	00800044 	movi	r2,1
 400ab48:	117ffd36 	bltu	r2,r5,400ab40 <__alt_data_end+0xfc00ab40>
 400ab4c:	813ff817 	ldw	r4,-32(r16)
 400ab50:	400a6f00 	call	400a6f0 <_ZN10__cxxabiv111__terminateEPFvvE>

0400ab54 <__cxa_get_globals_fast>:
 400ab54:	008100f4 	movhi	r2,1027
 400ab58:	1096a804 	addi	r2,r2,23200
 400ab5c:	f800283a 	ret

0400ab60 <__cxa_get_globals>:
 400ab60:	008100f4 	movhi	r2,1027
 400ab64:	1096a804 	addi	r2,r2,23200
 400ab68:	f800283a 	ret

0400ab6c <_ZNSt9exceptionD1Ev>:
 400ab6c:	f800283a 	ret

0400ab70 <_ZNSt13bad_exceptionD1Ev>:
 400ab70:	f800283a 	ret

0400ab74 <_ZNKSt9exception4whatEv>:
 400ab74:	008100b4 	movhi	r2,1026
 400ab78:	10b04704 	addi	r2,r2,-16100
 400ab7c:	f800283a 	ret

0400ab80 <_ZNKSt13bad_exception4whatEv>:
 400ab80:	008100b4 	movhi	r2,1026
 400ab84:	10b04b04 	addi	r2,r2,-16084
 400ab88:	f800283a 	ret

0400ab8c <_ZNSt9exceptionD0Ev>:
 400ab8c:	400a0881 	jmpi	400a088 <_ZdlPv>

0400ab90 <_ZNSt13bad_exceptionD0Ev>:
 400ab90:	400a0881 	jmpi	400a088 <_ZdlPv>

0400ab94 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 400ab94:	f800283a 	ret

0400ab98 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 400ab98:	400a0881 	jmpi	400a088 <_ZdlPv>

0400ab9c <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 400ab9c:	f800283a 	ret

0400aba0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 400aba0:	400a0881 	jmpi	400a088 <_ZdlPv>

0400aba4 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
 400aba4:	008100b4 	movhi	r2,1026
 400aba8:	10b08f04 	addi	r2,r2,-15812
 400abac:	20800015 	stw	r2,0(r4)
 400abb0:	400ab6c1 	jmpi	400ab6c <_ZNSt9exceptionD1Ev>

0400abb4 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
 400abb4:	defffe04 	addi	sp,sp,-8
 400abb8:	008100b4 	movhi	r2,1026
 400abbc:	dc000015 	stw	r16,0(sp)
 400abc0:	dfc00115 	stw	ra,4(sp)
 400abc4:	10b08f04 	addi	r2,r2,-15812
 400abc8:	20800015 	stw	r2,0(r4)
 400abcc:	2021883a 	mov	r16,r4
 400abd0:	400ab6c0 	call	400ab6c <_ZNSt9exceptionD1Ev>
 400abd4:	8009883a 	mov	r4,r16
 400abd8:	dfc00117 	ldw	ra,4(sp)
 400abdc:	dc000017 	ldw	r16,0(sp)
 400abe0:	dec00204 	addi	sp,sp,8
 400abe4:	400a0881 	jmpi	400a088 <_ZdlPv>

0400abe8 <__divsi3>:
 400abe8:	20001b16 	blt	r4,zero,400ac58 <__divsi3+0x70>
 400abec:	000f883a 	mov	r7,zero
 400abf0:	28001616 	blt	r5,zero,400ac4c <__divsi3+0x64>
 400abf4:	200d883a 	mov	r6,r4
 400abf8:	29001a2e 	bgeu	r5,r4,400ac64 <__divsi3+0x7c>
 400abfc:	00800804 	movi	r2,32
 400ac00:	00c00044 	movi	r3,1
 400ac04:	00000106 	br	400ac0c <__divsi3+0x24>
 400ac08:	10000d26 	beq	r2,zero,400ac40 <__divsi3+0x58>
 400ac0c:	294b883a 	add	r5,r5,r5
 400ac10:	10bfffc4 	addi	r2,r2,-1
 400ac14:	18c7883a 	add	r3,r3,r3
 400ac18:	293ffb36 	bltu	r5,r4,400ac08 <__alt_data_end+0xfc00ac08>
 400ac1c:	0005883a 	mov	r2,zero
 400ac20:	18000726 	beq	r3,zero,400ac40 <__divsi3+0x58>
 400ac24:	0005883a 	mov	r2,zero
 400ac28:	31400236 	bltu	r6,r5,400ac34 <__divsi3+0x4c>
 400ac2c:	314dc83a 	sub	r6,r6,r5
 400ac30:	10c4b03a 	or	r2,r2,r3
 400ac34:	1806d07a 	srli	r3,r3,1
 400ac38:	280ad07a 	srli	r5,r5,1
 400ac3c:	183ffa1e 	bne	r3,zero,400ac28 <__alt_data_end+0xfc00ac28>
 400ac40:	38000126 	beq	r7,zero,400ac48 <__divsi3+0x60>
 400ac44:	0085c83a 	sub	r2,zero,r2
 400ac48:	f800283a 	ret
 400ac4c:	014bc83a 	sub	r5,zero,r5
 400ac50:	39c0005c 	xori	r7,r7,1
 400ac54:	003fe706 	br	400abf4 <__alt_data_end+0xfc00abf4>
 400ac58:	0109c83a 	sub	r4,zero,r4
 400ac5c:	01c00044 	movi	r7,1
 400ac60:	003fe306 	br	400abf0 <__alt_data_end+0xfc00abf0>
 400ac64:	00c00044 	movi	r3,1
 400ac68:	003fee06 	br	400ac24 <__alt_data_end+0xfc00ac24>

0400ac6c <__modsi3>:
 400ac6c:	20001716 	blt	r4,zero,400accc <__modsi3+0x60>
 400ac70:	000f883a 	mov	r7,zero
 400ac74:	2005883a 	mov	r2,r4
 400ac78:	28001216 	blt	r5,zero,400acc4 <__modsi3+0x58>
 400ac7c:	2900162e 	bgeu	r5,r4,400acd8 <__modsi3+0x6c>
 400ac80:	01800804 	movi	r6,32
 400ac84:	00c00044 	movi	r3,1
 400ac88:	00000106 	br	400ac90 <__modsi3+0x24>
 400ac8c:	30000a26 	beq	r6,zero,400acb8 <__modsi3+0x4c>
 400ac90:	294b883a 	add	r5,r5,r5
 400ac94:	31bfffc4 	addi	r6,r6,-1
 400ac98:	18c7883a 	add	r3,r3,r3
 400ac9c:	293ffb36 	bltu	r5,r4,400ac8c <__alt_data_end+0xfc00ac8c>
 400aca0:	18000526 	beq	r3,zero,400acb8 <__modsi3+0x4c>
 400aca4:	1806d07a 	srli	r3,r3,1
 400aca8:	11400136 	bltu	r2,r5,400acb0 <__modsi3+0x44>
 400acac:	1145c83a 	sub	r2,r2,r5
 400acb0:	280ad07a 	srli	r5,r5,1
 400acb4:	183ffb1e 	bne	r3,zero,400aca4 <__alt_data_end+0xfc00aca4>
 400acb8:	38000126 	beq	r7,zero,400acc0 <__modsi3+0x54>
 400acbc:	0085c83a 	sub	r2,zero,r2
 400acc0:	f800283a 	ret
 400acc4:	014bc83a 	sub	r5,zero,r5
 400acc8:	003fec06 	br	400ac7c <__alt_data_end+0xfc00ac7c>
 400accc:	0109c83a 	sub	r4,zero,r4
 400acd0:	01c00044 	movi	r7,1
 400acd4:	003fe706 	br	400ac74 <__alt_data_end+0xfc00ac74>
 400acd8:	00c00044 	movi	r3,1
 400acdc:	003ff106 	br	400aca4 <__alt_data_end+0xfc00aca4>

0400ace0 <__udivsi3>:
 400ace0:	200d883a 	mov	r6,r4
 400ace4:	2900152e 	bgeu	r5,r4,400ad3c <__udivsi3+0x5c>
 400ace8:	28001416 	blt	r5,zero,400ad3c <__udivsi3+0x5c>
 400acec:	00800804 	movi	r2,32
 400acf0:	00c00044 	movi	r3,1
 400acf4:	00000206 	br	400ad00 <__udivsi3+0x20>
 400acf8:	10000e26 	beq	r2,zero,400ad34 <__udivsi3+0x54>
 400acfc:	28000516 	blt	r5,zero,400ad14 <__udivsi3+0x34>
 400ad00:	294b883a 	add	r5,r5,r5
 400ad04:	10bfffc4 	addi	r2,r2,-1
 400ad08:	18c7883a 	add	r3,r3,r3
 400ad0c:	293ffa36 	bltu	r5,r4,400acf8 <__alt_data_end+0xfc00acf8>
 400ad10:	18000826 	beq	r3,zero,400ad34 <__udivsi3+0x54>
 400ad14:	0005883a 	mov	r2,zero
 400ad18:	31400236 	bltu	r6,r5,400ad24 <__udivsi3+0x44>
 400ad1c:	314dc83a 	sub	r6,r6,r5
 400ad20:	10c4b03a 	or	r2,r2,r3
 400ad24:	1806d07a 	srli	r3,r3,1
 400ad28:	280ad07a 	srli	r5,r5,1
 400ad2c:	183ffa1e 	bne	r3,zero,400ad18 <__alt_data_end+0xfc00ad18>
 400ad30:	f800283a 	ret
 400ad34:	0005883a 	mov	r2,zero
 400ad38:	f800283a 	ret
 400ad3c:	00c00044 	movi	r3,1
 400ad40:	003ff406 	br	400ad14 <__alt_data_end+0xfc00ad14>

0400ad44 <__umodsi3>:
 400ad44:	2005883a 	mov	r2,r4
 400ad48:	2900122e 	bgeu	r5,r4,400ad94 <__umodsi3+0x50>
 400ad4c:	28001116 	blt	r5,zero,400ad94 <__umodsi3+0x50>
 400ad50:	01800804 	movi	r6,32
 400ad54:	00c00044 	movi	r3,1
 400ad58:	00000206 	br	400ad64 <__umodsi3+0x20>
 400ad5c:	30000c26 	beq	r6,zero,400ad90 <__umodsi3+0x4c>
 400ad60:	28000516 	blt	r5,zero,400ad78 <__umodsi3+0x34>
 400ad64:	294b883a 	add	r5,r5,r5
 400ad68:	31bfffc4 	addi	r6,r6,-1
 400ad6c:	18c7883a 	add	r3,r3,r3
 400ad70:	293ffa36 	bltu	r5,r4,400ad5c <__alt_data_end+0xfc00ad5c>
 400ad74:	18000626 	beq	r3,zero,400ad90 <__umodsi3+0x4c>
 400ad78:	1806d07a 	srli	r3,r3,1
 400ad7c:	11400136 	bltu	r2,r5,400ad84 <__umodsi3+0x40>
 400ad80:	1145c83a 	sub	r2,r2,r5
 400ad84:	280ad07a 	srli	r5,r5,1
 400ad88:	183ffb1e 	bne	r3,zero,400ad78 <__alt_data_end+0xfc00ad78>
 400ad8c:	f800283a 	ret
 400ad90:	f800283a 	ret
 400ad94:	00c00044 	movi	r3,1
 400ad98:	003ff706 	br	400ad78 <__alt_data_end+0xfc00ad78>

0400ad9c <_Unwind_ForcedUnwind_Phase2>:
 400ad9c:	defff404 	addi	sp,sp,-48
 400ada0:	dd800915 	stw	r22,36(sp)
 400ada4:	058100f4 	movhi	r22,1027
 400ada8:	ddc00a15 	stw	r23,40(sp)
 400adac:	dd400815 	stw	r21,32(sp)
 400adb0:	dd000715 	stw	r20,28(sp)
 400adb4:	dcc00615 	stw	r19,24(sp)
 400adb8:	dc400415 	stw	r17,16(sp)
 400adbc:	dc000315 	stw	r16,12(sp)
 400adc0:	dfc00b15 	stw	ra,44(sp)
 400adc4:	dc800515 	stw	r18,20(sp)
 400adc8:	2021883a 	mov	r16,r4
 400adcc:	2823883a 	mov	r17,r5
 400add0:	24c00317 	ldw	r19,12(r4)
 400add4:	25000417 	ldw	r20,16(r4)
 400add8:	28c00017 	ldw	r3,0(r5)
 400addc:	b596aa04 	addi	r22,r22,23208
 400ade0:	054001c4 	movi	r21,7
 400ade4:	05c00204 	movi	r23,8
 400ade8:	00001606 	br	400ae44 <_Unwind_ForcedUnwind_Phase2+0xa8>
 400adec:	81800017 	ldw	r6,0(r16)
 400adf0:	81c00117 	ldw	r7,4(r16)
 400adf4:	1c800617 	ldw	r18,24(r3)
 400adf8:	dd000215 	stw	r20,8(sp)
 400adfc:	dc400115 	stw	r17,4(sp)
 400ae00:	dc000015 	stw	r16,0(sp)
 400ae04:	983ee83a 	callr	r19
 400ae08:	01400284 	movi	r5,10
 400ae0c:	01000044 	movi	r4,1
 400ae10:	1000241e 	bne	r2,zero,400aea4 <_Unwind_ForcedUnwind_Phase2+0x108>
 400ae14:	90000726 	beq	r18,zero,400ae34 <_Unwind_ForcedUnwind_Phase2+0x98>
 400ae18:	81800017 	ldw	r6,0(r16)
 400ae1c:	81c00117 	ldw	r7,4(r16)
 400ae20:	dc400115 	stw	r17,4(sp)
 400ae24:	dc000015 	stw	r16,0(sp)
 400ae28:	903ee83a 	callr	r18
 400ae2c:	15401f26 	beq	r2,r21,400aeac <_Unwind_ForcedUnwind_Phase2+0x110>
 400ae30:	15c01c1e 	bne	r2,r23,400aea4 <_Unwind_ForcedUnwind_Phase2+0x108>
 400ae34:	88800017 	ldw	r2,0(r17)
 400ae38:	10c00017 	ldw	r3,0(r2)
 400ae3c:	b0c00015 	stw	r3,0(r22)
 400ae40:	88c00015 	stw	r3,0(r17)
 400ae44:	01400284 	movi	r5,10
 400ae48:	01000044 	movi	r4,1
 400ae4c:	183fe71e 	bne	r3,zero,400adec <__alt_data_end+0xfc00adec>
 400ae50:	81800017 	ldw	r6,0(r16)
 400ae54:	81c00117 	ldw	r7,4(r16)
 400ae58:	01400684 	movi	r5,26
 400ae5c:	dd000215 	stw	r20,8(sp)
 400ae60:	dc400115 	stw	r17,4(sp)
 400ae64:	dc000015 	stw	r16,0(sp)
 400ae68:	01000044 	movi	r4,1
 400ae6c:	983ee83a 	callr	r19
 400ae70:	10000c1e 	bne	r2,zero,400aea4 <_Unwind_ForcedUnwind_Phase2+0x108>
 400ae74:	00800144 	movi	r2,5
 400ae78:	dfc00b17 	ldw	ra,44(sp)
 400ae7c:	ddc00a17 	ldw	r23,40(sp)
 400ae80:	dd800917 	ldw	r22,36(sp)
 400ae84:	dd400817 	ldw	r21,32(sp)
 400ae88:	dd000717 	ldw	r20,28(sp)
 400ae8c:	dcc00617 	ldw	r19,24(sp)
 400ae90:	dc800517 	ldw	r18,20(sp)
 400ae94:	dc400417 	ldw	r17,16(sp)
 400ae98:	dc000317 	ldw	r16,12(sp)
 400ae9c:	dec00c04 	addi	sp,sp,48
 400aea0:	f800283a 	ret
 400aea4:	00800084 	movi	r2,2
 400aea8:	003ff306 	br	400ae78 <__alt_data_end+0xfc00ae78>
 400aeac:	a805883a 	mov	r2,r21
 400aeb0:	003ff106 	br	400ae78 <__alt_data_end+0xfc00ae78>

0400aeb4 <_Unwind_RaiseException_Phase2>:
 400aeb4:	28c00017 	ldw	r3,0(r5)
 400aeb8:	defff804 	addi	sp,sp,-32
 400aebc:	dcc00515 	stw	r19,20(sp)
 400aec0:	dc800415 	stw	r18,16(sp)
 400aec4:	dc400315 	stw	r17,12(sp)
 400aec8:	dc000215 	stw	r16,8(sp)
 400aecc:	dfc00715 	stw	ra,28(sp)
 400aed0:	dd000615 	stw	r20,24(sp)
 400aed4:	2823883a 	mov	r17,r5
 400aed8:	2021883a 	mov	r16,r4
 400aedc:	048001c4 	movi	r18,7
 400aee0:	04c00204 	movi	r19,8
 400aee4:	18001326 	beq	r3,zero,400af34 <_Unwind_RaiseException_Phase2+0x80>
 400aee8:	81000417 	ldw	r4,16(r16)
 400aeec:	1a000617 	ldw	r8,24(r3)
 400aef0:	19001926 	beq	r3,r4,400af58 <_Unwind_RaiseException_Phase2+0xa4>
 400aef4:	40000c26 	beq	r8,zero,400af28 <_Unwind_RaiseException_Phase2+0x74>
 400aef8:	01400084 	movi	r5,2
 400aefc:	0029883a 	mov	r20,zero
 400af00:	81800017 	ldw	r6,0(r16)
 400af04:	81c00117 	ldw	r7,4(r16)
 400af08:	01000044 	movi	r4,1
 400af0c:	dc400115 	stw	r17,4(sp)
 400af10:	dc000015 	stw	r16,0(sp)
 400af14:	403ee83a 	callr	r8
 400af18:	14801326 	beq	r2,r18,400af68 <_Unwind_RaiseException_Phase2+0xb4>
 400af1c:	14c0051e 	bne	r2,r19,400af34 <_Unwind_RaiseException_Phase2+0x80>
 400af20:	a000131e 	bne	r20,zero,400af70 <_Unwind_RaiseException_Phase2+0xbc>
 400af24:	88c00017 	ldw	r3,0(r17)
 400af28:	18c00017 	ldw	r3,0(r3)
 400af2c:	88c00015 	stw	r3,0(r17)
 400af30:	183fed1e 	bne	r3,zero,400aee8 <__alt_data_end+0xfc00aee8>
 400af34:	00800084 	movi	r2,2
 400af38:	dfc00717 	ldw	ra,28(sp)
 400af3c:	dd000617 	ldw	r20,24(sp)
 400af40:	dcc00517 	ldw	r19,20(sp)
 400af44:	dc800417 	ldw	r18,16(sp)
 400af48:	dc400317 	ldw	r17,12(sp)
 400af4c:	dc000217 	ldw	r16,8(sp)
 400af50:	dec00804 	addi	sp,sp,32
 400af54:	f800283a 	ret
 400af58:	40000526 	beq	r8,zero,400af70 <_Unwind_RaiseException_Phase2+0xbc>
 400af5c:	01400184 	movi	r5,6
 400af60:	05000104 	movi	r20,4
 400af64:	003fe606 	br	400af00 <__alt_data_end+0xfc00af00>
 400af68:	9005883a 	mov	r2,r18
 400af6c:	003ff206 	br	400af38 <__alt_data_end+0xfc00af38>
 400af70:	400b2bc0 	call	400b2bc <abort>

0400af74 <uw_install_context.isra.1>:
 400af74:	20c00017 	ldw	r3,0(r4)
 400af78:	deffff04 	addi	sp,sp,-4
 400af7c:	014100f4 	movhi	r5,1027
 400af80:	19000917 	ldw	r4,36(r3)
 400af84:	df000015 	stw	fp,0(sp)
 400af88:	18800804 	addi	r2,r3,32
 400af8c:	d839883a 	mov	fp,sp
 400af90:	2956aa04 	addi	r5,r5,23208
 400af94:	28c00015 	stw	r3,0(r5)
 400af98:	17000017 	ldw	fp,0(r2)
 400af9c:	1ec00a17 	ldw	sp,40(r3)
 400afa0:	2000683a 	jmp	r4

0400afa4 <_Unwind_SjLj_Register>:
 400afa4:	008100f4 	movhi	r2,1027
 400afa8:	1096aa04 	addi	r2,r2,23208
 400afac:	10c00017 	ldw	r3,0(r2)
 400afb0:	11000015 	stw	r4,0(r2)
 400afb4:	20c00015 	stw	r3,0(r4)
 400afb8:	f800283a 	ret

0400afbc <_Unwind_SjLj_Unregister>:
 400afbc:	20c00017 	ldw	r3,0(r4)
 400afc0:	008100f4 	movhi	r2,1027
 400afc4:	1096aa04 	addi	r2,r2,23208
 400afc8:	10c00015 	stw	r3,0(r2)
 400afcc:	f800283a 	ret

0400afd0 <_Unwind_GetGR>:
 400afd0:	20800017 	ldw	r2,0(r4)
 400afd4:	29400084 	addi	r5,r5,2
 400afd8:	294b883a 	add	r5,r5,r5
 400afdc:	294b883a 	add	r5,r5,r5
 400afe0:	114b883a 	add	r5,r2,r5
 400afe4:	28800017 	ldw	r2,0(r5)
 400afe8:	f800283a 	ret

0400afec <_Unwind_GetCFA>:
 400afec:	20800017 	ldw	r2,0(r4)
 400aff0:	10000226 	beq	r2,zero,400affc <_Unwind_GetCFA+0x10>
 400aff4:	10800a17 	ldw	r2,40(r2)
 400aff8:	f800283a 	ret
 400affc:	0005883a 	mov	r2,zero
 400b000:	f800283a 	ret

0400b004 <_Unwind_SetGR>:
 400b004:	20800017 	ldw	r2,0(r4)
 400b008:	29400084 	addi	r5,r5,2
 400b00c:	294b883a 	add	r5,r5,r5
 400b010:	294b883a 	add	r5,r5,r5
 400b014:	114b883a 	add	r5,r2,r5
 400b018:	29800015 	stw	r6,0(r5)
 400b01c:	f800283a 	ret

0400b020 <_Unwind_GetIP>:
 400b020:	20800017 	ldw	r2,0(r4)
 400b024:	10800117 	ldw	r2,4(r2)
 400b028:	10800044 	addi	r2,r2,1
 400b02c:	f800283a 	ret

0400b030 <_Unwind_GetIPInfo>:
 400b030:	20800017 	ldw	r2,0(r4)
 400b034:	28000015 	stw	zero,0(r5)
 400b038:	10000326 	beq	r2,zero,400b048 <_Unwind_GetIPInfo+0x18>
 400b03c:	10800117 	ldw	r2,4(r2)
 400b040:	10800044 	addi	r2,r2,1
 400b044:	f800283a 	ret
 400b048:	0005883a 	mov	r2,zero
 400b04c:	f800283a 	ret

0400b050 <_Unwind_SetIP>:
 400b050:	20800017 	ldw	r2,0(r4)
 400b054:	297fffc4 	addi	r5,r5,-1
 400b058:	11400115 	stw	r5,4(r2)
 400b05c:	f800283a 	ret

0400b060 <_Unwind_GetLanguageSpecificData>:
 400b060:	20800017 	ldw	r2,0(r4)
 400b064:	10800717 	ldw	r2,28(r2)
 400b068:	f800283a 	ret

0400b06c <_Unwind_GetRegionStart>:
 400b06c:	0005883a 	mov	r2,zero
 400b070:	f800283a 	ret

0400b074 <_Unwind_FindEnclosingFunction>:
 400b074:	0005883a 	mov	r2,zero
 400b078:	f800283a 	ret

0400b07c <_Unwind_GetDataRelBase>:
 400b07c:	0005883a 	mov	r2,zero
 400b080:	f800283a 	ret

0400b084 <_Unwind_GetTextRelBase>:
 400b084:	0005883a 	mov	r2,zero
 400b088:	f800283a 	ret

0400b08c <_Unwind_SjLj_RaiseException>:
 400b08c:	008100f4 	movhi	r2,1027
 400b090:	defff804 	addi	sp,sp,-32
 400b094:	1096aa04 	addi	r2,r2,23208
 400b098:	dc800515 	stw	r18,20(sp)
 400b09c:	14800017 	ldw	r18,0(r2)
 400b0a0:	dfc00715 	stw	ra,28(sp)
 400b0a4:	dcc00615 	stw	r19,24(sp)
 400b0a8:	dc400415 	stw	r17,16(sp)
 400b0ac:	dc000315 	stw	r16,12(sp)
 400b0b0:	dc800215 	stw	r18,8(sp)
 400b0b4:	90001426 	beq	r18,zero,400b108 <_Unwind_SjLj_RaiseException+0x7c>
 400b0b8:	2021883a 	mov	r16,r4
 400b0bc:	9005883a 	mov	r2,r18
 400b0c0:	04400184 	movi	r17,6
 400b0c4:	04c00204 	movi	r19,8
 400b0c8:	10800617 	ldw	r2,24(r2)
 400b0cc:	10000a26 	beq	r2,zero,400b0f8 <_Unwind_SjLj_RaiseException+0x6c>
 400b0d0:	81800017 	ldw	r6,0(r16)
 400b0d4:	81c00117 	ldw	r7,4(r16)
 400b0d8:	01400044 	movi	r5,1
 400b0dc:	d8c00204 	addi	r3,sp,8
 400b0e0:	d8c00115 	stw	r3,4(sp)
 400b0e4:	dc000015 	stw	r16,0(sp)
 400b0e8:	2809883a 	mov	r4,r5
 400b0ec:	103ee83a 	callr	r2
 400b0f0:	14400d26 	beq	r2,r17,400b128 <_Unwind_SjLj_RaiseException+0x9c>
 400b0f4:	14c0171e 	bne	r2,r19,400b154 <_Unwind_SjLj_RaiseException+0xc8>
 400b0f8:	d8800217 	ldw	r2,8(sp)
 400b0fc:	10800017 	ldw	r2,0(r2)
 400b100:	d8800215 	stw	r2,8(sp)
 400b104:	103ff01e 	bne	r2,zero,400b0c8 <__alt_data_end+0xfc00b0c8>
 400b108:	00800144 	movi	r2,5
 400b10c:	dfc00717 	ldw	ra,28(sp)
 400b110:	dcc00617 	ldw	r19,24(sp)
 400b114:	dc800517 	ldw	r18,20(sp)
 400b118:	dc400417 	ldw	r17,16(sp)
 400b11c:	dc000317 	ldw	r16,12(sp)
 400b120:	dec00804 	addi	sp,sp,32
 400b124:	f800283a 	ret
 400b128:	d8800217 	ldw	r2,8(sp)
 400b12c:	80000315 	stw	zero,12(r16)
 400b130:	d9400204 	addi	r5,sp,8
 400b134:	80800415 	stw	r2,16(r16)
 400b138:	8009883a 	mov	r4,r16
 400b13c:	dc800215 	stw	r18,8(sp)
 400b140:	400aeb40 	call	400aeb4 <_Unwind_RaiseException_Phase2>
 400b144:	00c001c4 	movi	r3,7
 400b148:	10fff01e 	bne	r2,r3,400b10c <__alt_data_end+0xfc00b10c>
 400b14c:	d9000204 	addi	r4,sp,8
 400b150:	400af740 	call	400af74 <uw_install_context.isra.1>
 400b154:	008000c4 	movi	r2,3
 400b158:	003fec06 	br	400b10c <__alt_data_end+0xfc00b10c>

0400b15c <_Unwind_SjLj_ForcedUnwind>:
 400b15c:	00c100f4 	movhi	r3,1027
 400b160:	18d6aa04 	addi	r3,r3,23208
 400b164:	defffe04 	addi	sp,sp,-8
 400b168:	18c00017 	ldw	r3,0(r3)
 400b16c:	dfc00115 	stw	ra,4(sp)
 400b170:	21400315 	stw	r5,12(r4)
 400b174:	21800415 	stw	r6,16(r4)
 400b178:	d80b883a 	mov	r5,sp
 400b17c:	d8c00015 	stw	r3,0(sp)
 400b180:	400ad9c0 	call	400ad9c <_Unwind_ForcedUnwind_Phase2>
 400b184:	00c001c4 	movi	r3,7
 400b188:	10c00326 	beq	r2,r3,400b198 <_Unwind_SjLj_ForcedUnwind+0x3c>
 400b18c:	dfc00117 	ldw	ra,4(sp)
 400b190:	dec00204 	addi	sp,sp,8
 400b194:	f800283a 	ret
 400b198:	d809883a 	mov	r4,sp
 400b19c:	400af740 	call	400af74 <uw_install_context.isra.1>

0400b1a0 <_Unwind_SjLj_Resume>:
 400b1a0:	00c100f4 	movhi	r3,1027
 400b1a4:	18d6aa04 	addi	r3,r3,23208
 400b1a8:	18c00017 	ldw	r3,0(r3)
 400b1ac:	20800317 	ldw	r2,12(r4)
 400b1b0:	defffe04 	addi	sp,sp,-8
 400b1b4:	dfc00115 	stw	ra,4(sp)
 400b1b8:	d8c00015 	stw	r3,0(sp)
 400b1bc:	d80b883a 	mov	r5,sp
 400b1c0:	1000041e 	bne	r2,zero,400b1d4 <_Unwind_SjLj_Resume+0x34>
 400b1c4:	400aeb40 	call	400aeb4 <_Unwind_RaiseException_Phase2>
 400b1c8:	00c001c4 	movi	r3,7
 400b1cc:	10c00326 	beq	r2,r3,400b1dc <_Unwind_SjLj_Resume+0x3c>
 400b1d0:	400b2bc0 	call	400b2bc <abort>
 400b1d4:	400ad9c0 	call	400ad9c <_Unwind_ForcedUnwind_Phase2>
 400b1d8:	003ffb06 	br	400b1c8 <__alt_data_end+0xfc00b1c8>
 400b1dc:	d809883a 	mov	r4,sp
 400b1e0:	400af740 	call	400af74 <uw_install_context.isra.1>

0400b1e4 <_Unwind_SjLj_Resume_or_Rethrow>:
 400b1e4:	20800317 	ldw	r2,12(r4)
 400b1e8:	defffe04 	addi	sp,sp,-8
 400b1ec:	dfc00115 	stw	ra,4(sp)
 400b1f0:	1000041e 	bne	r2,zero,400b204 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 400b1f4:	400b08c0 	call	400b08c <_Unwind_SjLj_RaiseException>
 400b1f8:	dfc00117 	ldw	ra,4(sp)
 400b1fc:	dec00204 	addi	sp,sp,8
 400b200:	f800283a 	ret
 400b204:	008100f4 	movhi	r2,1027
 400b208:	1096aa04 	addi	r2,r2,23208
 400b20c:	10800017 	ldw	r2,0(r2)
 400b210:	d80b883a 	mov	r5,sp
 400b214:	d8800015 	stw	r2,0(sp)
 400b218:	400ad9c0 	call	400ad9c <_Unwind_ForcedUnwind_Phase2>
 400b21c:	00c001c4 	movi	r3,7
 400b220:	10c00126 	beq	r2,r3,400b228 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 400b224:	400b2bc0 	call	400b2bc <abort>
 400b228:	d809883a 	mov	r4,sp
 400b22c:	400af740 	call	400af74 <uw_install_context.isra.1>

0400b230 <_Unwind_DeleteException>:
 400b230:	20800217 	ldw	r2,8(r4)
 400b234:	10000326 	beq	r2,zero,400b244 <_Unwind_DeleteException+0x14>
 400b238:	200b883a 	mov	r5,r4
 400b23c:	01000044 	movi	r4,1
 400b240:	1000683a 	jmp	r2
 400b244:	f800283a 	ret

0400b248 <_Unwind_Backtrace>:
 400b248:	008100f4 	movhi	r2,1027
 400b24c:	1096aa04 	addi	r2,r2,23208
 400b250:	10800017 	ldw	r2,0(r2)
 400b254:	defffc04 	addi	sp,sp,-16
 400b258:	dc400215 	stw	r17,8(sp)
 400b25c:	dc000115 	stw	r16,4(sp)
 400b260:	dfc00315 	stw	ra,12(sp)
 400b264:	2023883a 	mov	r17,r4
 400b268:	2821883a 	mov	r16,r5
 400b26c:	d8800015 	stw	r2,0(sp)
 400b270:	00000506 	br	400b288 <_Unwind_Backtrace+0x40>
 400b274:	883ee83a 	callr	r17
 400b278:	10000e1e 	bne	r2,zero,400b2b4 <_Unwind_Backtrace+0x6c>
 400b27c:	d8800017 	ldw	r2,0(sp)
 400b280:	10800017 	ldw	r2,0(r2)
 400b284:	d8800015 	stw	r2,0(sp)
 400b288:	800b883a 	mov	r5,r16
 400b28c:	d809883a 	mov	r4,sp
 400b290:	103ff81e 	bne	r2,zero,400b274 <__alt_data_end+0xfc00b274>
 400b294:	883ee83a 	callr	r17
 400b298:	1000061e 	bne	r2,zero,400b2b4 <_Unwind_Backtrace+0x6c>
 400b29c:	00800144 	movi	r2,5
 400b2a0:	dfc00317 	ldw	ra,12(sp)
 400b2a4:	dc400217 	ldw	r17,8(sp)
 400b2a8:	dc000117 	ldw	r16,4(sp)
 400b2ac:	dec00404 	addi	sp,sp,16
 400b2b0:	f800283a 	ret
 400b2b4:	008000c4 	movi	r2,3
 400b2b8:	003ff906 	br	400b2a0 <__alt_data_end+0xfc00b2a0>

0400b2bc <abort>:
 400b2bc:	deffff04 	addi	sp,sp,-4
 400b2c0:	01000184 	movi	r4,6
 400b2c4:	dfc00015 	stw	ra,0(sp)
 400b2c8:	400c2280 	call	400c228 <raise>
 400b2cc:	01000044 	movi	r4,1
 400b2d0:	4017f740 	call	4017f74 <_exit>

0400b2d4 <clock>:
 400b2d4:	008100f4 	movhi	r2,1027
 400b2d8:	10a3e504 	addi	r2,r2,-28780
 400b2dc:	11000017 	ldw	r4,0(r2)
 400b2e0:	defffb04 	addi	sp,sp,-20
 400b2e4:	d80b883a 	mov	r5,sp
 400b2e8:	dfc00415 	stw	ra,16(sp)
 400b2ec:	400c44c0 	call	400c44c <_times_r>
 400b2f0:	00ffffc4 	movi	r3,-1
 400b2f4:	10c00726 	beq	r2,r3,400b314 <clock+0x40>
 400b2f8:	d8c00017 	ldw	r3,0(sp)
 400b2fc:	d8800117 	ldw	r2,4(sp)
 400b300:	1885883a 	add	r2,r3,r2
 400b304:	d8c00217 	ldw	r3,8(sp)
 400b308:	10c7883a 	add	r3,r2,r3
 400b30c:	d8800317 	ldw	r2,12(sp)
 400b310:	1885883a 	add	r2,r3,r2
 400b314:	dfc00417 	ldw	ra,16(sp)
 400b318:	dec00504 	addi	sp,sp,20
 400b31c:	f800283a 	ret

0400b320 <malloc>:
 400b320:	008100f4 	movhi	r2,1027
 400b324:	10a3e504 	addi	r2,r2,-28780
 400b328:	200b883a 	mov	r5,r4
 400b32c:	11000017 	ldw	r4,0(r2)
 400b330:	400b3481 	jmpi	400b348 <_malloc_r>

0400b334 <free>:
 400b334:	008100f4 	movhi	r2,1027
 400b338:	10a3e504 	addi	r2,r2,-28780
 400b33c:	200b883a 	mov	r5,r4
 400b340:	11000017 	ldw	r4,0(r2)
 400b344:	401086c1 	jmpi	401086c <_free_r>

0400b348 <_malloc_r>:
 400b348:	defff504 	addi	sp,sp,-44
 400b34c:	dc800315 	stw	r18,12(sp)
 400b350:	dfc00a15 	stw	ra,40(sp)
 400b354:	df000915 	stw	fp,36(sp)
 400b358:	ddc00815 	stw	r23,32(sp)
 400b35c:	dd800715 	stw	r22,28(sp)
 400b360:	dd400615 	stw	r21,24(sp)
 400b364:	dd000515 	stw	r20,20(sp)
 400b368:	dcc00415 	stw	r19,16(sp)
 400b36c:	dc400215 	stw	r17,8(sp)
 400b370:	dc000115 	stw	r16,4(sp)
 400b374:	288002c4 	addi	r2,r5,11
 400b378:	00c00584 	movi	r3,22
 400b37c:	2025883a 	mov	r18,r4
 400b380:	18807f2e 	bgeu	r3,r2,400b580 <_malloc_r+0x238>
 400b384:	047ffe04 	movi	r17,-8
 400b388:	1462703a 	and	r17,r2,r17
 400b38c:	8800a316 	blt	r17,zero,400b61c <_malloc_r+0x2d4>
 400b390:	8940a236 	bltu	r17,r5,400b61c <_malloc_r+0x2d4>
 400b394:	40185780 	call	4018578 <__malloc_lock>
 400b398:	00807dc4 	movi	r2,503
 400b39c:	1441e92e 	bgeu	r2,r17,400bb44 <_malloc_r+0x7fc>
 400b3a0:	8804d27a 	srli	r2,r17,9
 400b3a4:	1000a126 	beq	r2,zero,400b62c <_malloc_r+0x2e4>
 400b3a8:	00c00104 	movi	r3,4
 400b3ac:	18811e36 	bltu	r3,r2,400b828 <_malloc_r+0x4e0>
 400b3b0:	8804d1ba 	srli	r2,r17,6
 400b3b4:	12000e44 	addi	r8,r2,57
 400b3b8:	11c00e04 	addi	r7,r2,56
 400b3bc:	4209883a 	add	r4,r8,r8
 400b3c0:	04c100b4 	movhi	r19,1026
 400b3c4:	2109883a 	add	r4,r4,r4
 400b3c8:	9cde2704 	addi	r19,r19,30876
 400b3cc:	2109883a 	add	r4,r4,r4
 400b3d0:	9909883a 	add	r4,r19,r4
 400b3d4:	24000117 	ldw	r16,4(r4)
 400b3d8:	213ffe04 	addi	r4,r4,-8
 400b3dc:	24009726 	beq	r4,r16,400b63c <_malloc_r+0x2f4>
 400b3e0:	80800117 	ldw	r2,4(r16)
 400b3e4:	01bfff04 	movi	r6,-4
 400b3e8:	014003c4 	movi	r5,15
 400b3ec:	1184703a 	and	r2,r2,r6
 400b3f0:	1447c83a 	sub	r3,r2,r17
 400b3f4:	28c00716 	blt	r5,r3,400b414 <_malloc_r+0xcc>
 400b3f8:	1800920e 	bge	r3,zero,400b644 <_malloc_r+0x2fc>
 400b3fc:	84000317 	ldw	r16,12(r16)
 400b400:	24008e26 	beq	r4,r16,400b63c <_malloc_r+0x2f4>
 400b404:	80800117 	ldw	r2,4(r16)
 400b408:	1184703a 	and	r2,r2,r6
 400b40c:	1447c83a 	sub	r3,r2,r17
 400b410:	28fff90e 	bge	r5,r3,400b3f8 <__alt_data_end+0xfc00b3f8>
 400b414:	3809883a 	mov	r4,r7
 400b418:	018100b4 	movhi	r6,1026
 400b41c:	9c000417 	ldw	r16,16(r19)
 400b420:	319e2704 	addi	r6,r6,30876
 400b424:	32000204 	addi	r8,r6,8
 400b428:	82013426 	beq	r16,r8,400b8fc <_malloc_r+0x5b4>
 400b42c:	80c00117 	ldw	r3,4(r16)
 400b430:	00bfff04 	movi	r2,-4
 400b434:	188e703a 	and	r7,r3,r2
 400b438:	3c45c83a 	sub	r2,r7,r17
 400b43c:	00c003c4 	movi	r3,15
 400b440:	18811f16 	blt	r3,r2,400b8c0 <_malloc_r+0x578>
 400b444:	32000515 	stw	r8,20(r6)
 400b448:	32000415 	stw	r8,16(r6)
 400b44c:	10007f0e 	bge	r2,zero,400b64c <_malloc_r+0x304>
 400b450:	00807fc4 	movi	r2,511
 400b454:	11c0fd36 	bltu	r2,r7,400b84c <_malloc_r+0x504>
 400b458:	3806d0fa 	srli	r3,r7,3
 400b45c:	01c00044 	movi	r7,1
 400b460:	30800117 	ldw	r2,4(r6)
 400b464:	19400044 	addi	r5,r3,1
 400b468:	294b883a 	add	r5,r5,r5
 400b46c:	1807d0ba 	srai	r3,r3,2
 400b470:	294b883a 	add	r5,r5,r5
 400b474:	294b883a 	add	r5,r5,r5
 400b478:	298b883a 	add	r5,r5,r6
 400b47c:	38c6983a 	sll	r3,r7,r3
 400b480:	29c00017 	ldw	r7,0(r5)
 400b484:	2a7ffe04 	addi	r9,r5,-8
 400b488:	1886b03a 	or	r3,r3,r2
 400b48c:	82400315 	stw	r9,12(r16)
 400b490:	81c00215 	stw	r7,8(r16)
 400b494:	30c00115 	stw	r3,4(r6)
 400b498:	2c000015 	stw	r16,0(r5)
 400b49c:	3c000315 	stw	r16,12(r7)
 400b4a0:	2005d0ba 	srai	r2,r4,2
 400b4a4:	01400044 	movi	r5,1
 400b4a8:	288a983a 	sll	r5,r5,r2
 400b4ac:	19406f36 	bltu	r3,r5,400b66c <_malloc_r+0x324>
 400b4b0:	28c4703a 	and	r2,r5,r3
 400b4b4:	10000a1e 	bne	r2,zero,400b4e0 <_malloc_r+0x198>
 400b4b8:	00bfff04 	movi	r2,-4
 400b4bc:	294b883a 	add	r5,r5,r5
 400b4c0:	2088703a 	and	r4,r4,r2
 400b4c4:	28c4703a 	and	r2,r5,r3
 400b4c8:	21000104 	addi	r4,r4,4
 400b4cc:	1000041e 	bne	r2,zero,400b4e0 <_malloc_r+0x198>
 400b4d0:	294b883a 	add	r5,r5,r5
 400b4d4:	28c4703a 	and	r2,r5,r3
 400b4d8:	21000104 	addi	r4,r4,4
 400b4dc:	103ffc26 	beq	r2,zero,400b4d0 <__alt_data_end+0xfc00b4d0>
 400b4e0:	02bfff04 	movi	r10,-4
 400b4e4:	024003c4 	movi	r9,15
 400b4e8:	21800044 	addi	r6,r4,1
 400b4ec:	318d883a 	add	r6,r6,r6
 400b4f0:	318d883a 	add	r6,r6,r6
 400b4f4:	318d883a 	add	r6,r6,r6
 400b4f8:	998d883a 	add	r6,r19,r6
 400b4fc:	333ffe04 	addi	r12,r6,-8
 400b500:	2017883a 	mov	r11,r4
 400b504:	31800104 	addi	r6,r6,4
 400b508:	34000017 	ldw	r16,0(r6)
 400b50c:	31fffd04 	addi	r7,r6,-12
 400b510:	81c0041e 	bne	r16,r7,400b524 <_malloc_r+0x1dc>
 400b514:	0000fb06 	br	400b904 <_malloc_r+0x5bc>
 400b518:	1801030e 	bge	r3,zero,400b928 <_malloc_r+0x5e0>
 400b51c:	84000317 	ldw	r16,12(r16)
 400b520:	81c0f826 	beq	r16,r7,400b904 <_malloc_r+0x5bc>
 400b524:	80800117 	ldw	r2,4(r16)
 400b528:	1284703a 	and	r2,r2,r10
 400b52c:	1447c83a 	sub	r3,r2,r17
 400b530:	48fff90e 	bge	r9,r3,400b518 <__alt_data_end+0xfc00b518>
 400b534:	80800317 	ldw	r2,12(r16)
 400b538:	81000217 	ldw	r4,8(r16)
 400b53c:	89400054 	ori	r5,r17,1
 400b540:	81400115 	stw	r5,4(r16)
 400b544:	20800315 	stw	r2,12(r4)
 400b548:	11000215 	stw	r4,8(r2)
 400b54c:	8463883a 	add	r17,r16,r17
 400b550:	9c400515 	stw	r17,20(r19)
 400b554:	9c400415 	stw	r17,16(r19)
 400b558:	18800054 	ori	r2,r3,1
 400b55c:	88800115 	stw	r2,4(r17)
 400b560:	8a000315 	stw	r8,12(r17)
 400b564:	8a000215 	stw	r8,8(r17)
 400b568:	88e3883a 	add	r17,r17,r3
 400b56c:	88c00015 	stw	r3,0(r17)
 400b570:	9009883a 	mov	r4,r18
 400b574:	401859c0 	call	401859c <__malloc_unlock>
 400b578:	80800204 	addi	r2,r16,8
 400b57c:	00001b06 	br	400b5ec <_malloc_r+0x2a4>
 400b580:	04400404 	movi	r17,16
 400b584:	89402536 	bltu	r17,r5,400b61c <_malloc_r+0x2d4>
 400b588:	40185780 	call	4018578 <__malloc_lock>
 400b58c:	00800184 	movi	r2,6
 400b590:	01000084 	movi	r4,2
 400b594:	04c100b4 	movhi	r19,1026
 400b598:	1085883a 	add	r2,r2,r2
 400b59c:	9cde2704 	addi	r19,r19,30876
 400b5a0:	1085883a 	add	r2,r2,r2
 400b5a4:	9885883a 	add	r2,r19,r2
 400b5a8:	14000117 	ldw	r16,4(r2)
 400b5ac:	10fffe04 	addi	r3,r2,-8
 400b5b0:	80c0d926 	beq	r16,r3,400b918 <_malloc_r+0x5d0>
 400b5b4:	80c00117 	ldw	r3,4(r16)
 400b5b8:	81000317 	ldw	r4,12(r16)
 400b5bc:	00bfff04 	movi	r2,-4
 400b5c0:	1884703a 	and	r2,r3,r2
 400b5c4:	81400217 	ldw	r5,8(r16)
 400b5c8:	8085883a 	add	r2,r16,r2
 400b5cc:	10c00117 	ldw	r3,4(r2)
 400b5d0:	29000315 	stw	r4,12(r5)
 400b5d4:	21400215 	stw	r5,8(r4)
 400b5d8:	18c00054 	ori	r3,r3,1
 400b5dc:	10c00115 	stw	r3,4(r2)
 400b5e0:	9009883a 	mov	r4,r18
 400b5e4:	401859c0 	call	401859c <__malloc_unlock>
 400b5e8:	80800204 	addi	r2,r16,8
 400b5ec:	dfc00a17 	ldw	ra,40(sp)
 400b5f0:	df000917 	ldw	fp,36(sp)
 400b5f4:	ddc00817 	ldw	r23,32(sp)
 400b5f8:	dd800717 	ldw	r22,28(sp)
 400b5fc:	dd400617 	ldw	r21,24(sp)
 400b600:	dd000517 	ldw	r20,20(sp)
 400b604:	dcc00417 	ldw	r19,16(sp)
 400b608:	dc800317 	ldw	r18,12(sp)
 400b60c:	dc400217 	ldw	r17,8(sp)
 400b610:	dc000117 	ldw	r16,4(sp)
 400b614:	dec00b04 	addi	sp,sp,44
 400b618:	f800283a 	ret
 400b61c:	00800304 	movi	r2,12
 400b620:	90800015 	stw	r2,0(r18)
 400b624:	0005883a 	mov	r2,zero
 400b628:	003ff006 	br	400b5ec <__alt_data_end+0xfc00b5ec>
 400b62c:	01002004 	movi	r4,128
 400b630:	02001004 	movi	r8,64
 400b634:	01c00fc4 	movi	r7,63
 400b638:	003f6106 	br	400b3c0 <__alt_data_end+0xfc00b3c0>
 400b63c:	4009883a 	mov	r4,r8
 400b640:	003f7506 	br	400b418 <__alt_data_end+0xfc00b418>
 400b644:	81000317 	ldw	r4,12(r16)
 400b648:	003fde06 	br	400b5c4 <__alt_data_end+0xfc00b5c4>
 400b64c:	81c5883a 	add	r2,r16,r7
 400b650:	11400117 	ldw	r5,4(r2)
 400b654:	9009883a 	mov	r4,r18
 400b658:	29400054 	ori	r5,r5,1
 400b65c:	11400115 	stw	r5,4(r2)
 400b660:	401859c0 	call	401859c <__malloc_unlock>
 400b664:	80800204 	addi	r2,r16,8
 400b668:	003fe006 	br	400b5ec <__alt_data_end+0xfc00b5ec>
 400b66c:	9c000217 	ldw	r16,8(r19)
 400b670:	00bfff04 	movi	r2,-4
 400b674:	85800117 	ldw	r22,4(r16)
 400b678:	b0ac703a 	and	r22,r22,r2
 400b67c:	b4400336 	bltu	r22,r17,400b68c <_malloc_r+0x344>
 400b680:	b445c83a 	sub	r2,r22,r17
 400b684:	00c003c4 	movi	r3,15
 400b688:	18805d16 	blt	r3,r2,400b800 <_malloc_r+0x4b8>
 400b68c:	05c100f4 	movhi	r23,1027
 400b690:	008100f4 	movhi	r2,1027
 400b694:	1096ad04 	addi	r2,r2,23220
 400b698:	bde3e604 	addi	r23,r23,-28776
 400b69c:	15400017 	ldw	r21,0(r2)
 400b6a0:	b8c00017 	ldw	r3,0(r23)
 400b6a4:	00bfffc4 	movi	r2,-1
 400b6a8:	858d883a 	add	r6,r16,r22
 400b6ac:	8d6b883a 	add	r21,r17,r21
 400b6b0:	1880ea26 	beq	r3,r2,400ba5c <_malloc_r+0x714>
 400b6b4:	ad4403c4 	addi	r21,r21,4111
 400b6b8:	00bc0004 	movi	r2,-4096
 400b6bc:	a8aa703a 	and	r21,r21,r2
 400b6c0:	a80b883a 	mov	r5,r21
 400b6c4:	9009883a 	mov	r4,r18
 400b6c8:	d9800015 	stw	r6,0(sp)
 400b6cc:	400bf800 	call	400bf80 <_sbrk_r>
 400b6d0:	1029883a 	mov	r20,r2
 400b6d4:	00bfffc4 	movi	r2,-1
 400b6d8:	d9800017 	ldw	r6,0(sp)
 400b6dc:	a080e826 	beq	r20,r2,400ba80 <_malloc_r+0x738>
 400b6e0:	a180a636 	bltu	r20,r6,400b97c <_malloc_r+0x634>
 400b6e4:	070100f4 	movhi	fp,1027
 400b6e8:	e716e804 	addi	fp,fp,23456
 400b6ec:	e0800017 	ldw	r2,0(fp)
 400b6f0:	a887883a 	add	r3,r21,r2
 400b6f4:	e0c00015 	stw	r3,0(fp)
 400b6f8:	3500e626 	beq	r6,r20,400ba94 <_malloc_r+0x74c>
 400b6fc:	b9000017 	ldw	r4,0(r23)
 400b700:	00bfffc4 	movi	r2,-1
 400b704:	2080ee26 	beq	r4,r2,400bac0 <_malloc_r+0x778>
 400b708:	a185c83a 	sub	r2,r20,r6
 400b70c:	10c5883a 	add	r2,r2,r3
 400b710:	e0800015 	stw	r2,0(fp)
 400b714:	a0c001cc 	andi	r3,r20,7
 400b718:	1800bc26 	beq	r3,zero,400ba0c <_malloc_r+0x6c4>
 400b71c:	a0e9c83a 	sub	r20,r20,r3
 400b720:	00840204 	movi	r2,4104
 400b724:	a5000204 	addi	r20,r20,8
 400b728:	10c7c83a 	sub	r3,r2,r3
 400b72c:	a545883a 	add	r2,r20,r21
 400b730:	1083ffcc 	andi	r2,r2,4095
 400b734:	18abc83a 	sub	r21,r3,r2
 400b738:	a80b883a 	mov	r5,r21
 400b73c:	9009883a 	mov	r4,r18
 400b740:	400bf800 	call	400bf80 <_sbrk_r>
 400b744:	00ffffc4 	movi	r3,-1
 400b748:	10c0e126 	beq	r2,r3,400bad0 <_malloc_r+0x788>
 400b74c:	1505c83a 	sub	r2,r2,r20
 400b750:	1545883a 	add	r2,r2,r21
 400b754:	10800054 	ori	r2,r2,1
 400b758:	e0c00017 	ldw	r3,0(fp)
 400b75c:	9d000215 	stw	r20,8(r19)
 400b760:	a0800115 	stw	r2,4(r20)
 400b764:	a8c7883a 	add	r3,r21,r3
 400b768:	e0c00015 	stw	r3,0(fp)
 400b76c:	84c00e26 	beq	r16,r19,400b7a8 <_malloc_r+0x460>
 400b770:	018003c4 	movi	r6,15
 400b774:	3580a72e 	bgeu	r6,r22,400ba14 <_malloc_r+0x6cc>
 400b778:	81400117 	ldw	r5,4(r16)
 400b77c:	013ffe04 	movi	r4,-8
 400b780:	b0bffd04 	addi	r2,r22,-12
 400b784:	1104703a 	and	r2,r2,r4
 400b788:	2900004c 	andi	r4,r5,1
 400b78c:	2088b03a 	or	r4,r4,r2
 400b790:	81000115 	stw	r4,4(r16)
 400b794:	01400144 	movi	r5,5
 400b798:	8089883a 	add	r4,r16,r2
 400b79c:	21400115 	stw	r5,4(r4)
 400b7a0:	21400215 	stw	r5,8(r4)
 400b7a4:	3080cd36 	bltu	r6,r2,400badc <_malloc_r+0x794>
 400b7a8:	008100f4 	movhi	r2,1027
 400b7ac:	1096ac04 	addi	r2,r2,23216
 400b7b0:	11000017 	ldw	r4,0(r2)
 400b7b4:	20c0012e 	bgeu	r4,r3,400b7bc <_malloc_r+0x474>
 400b7b8:	10c00015 	stw	r3,0(r2)
 400b7bc:	008100f4 	movhi	r2,1027
 400b7c0:	1096ab04 	addi	r2,r2,23212
 400b7c4:	11000017 	ldw	r4,0(r2)
 400b7c8:	9c000217 	ldw	r16,8(r19)
 400b7cc:	20c0012e 	bgeu	r4,r3,400b7d4 <_malloc_r+0x48c>
 400b7d0:	10c00015 	stw	r3,0(r2)
 400b7d4:	80c00117 	ldw	r3,4(r16)
 400b7d8:	00bfff04 	movi	r2,-4
 400b7dc:	1886703a 	and	r3,r3,r2
 400b7e0:	1c45c83a 	sub	r2,r3,r17
 400b7e4:	1c400236 	bltu	r3,r17,400b7f0 <_malloc_r+0x4a8>
 400b7e8:	00c003c4 	movi	r3,15
 400b7ec:	18800416 	blt	r3,r2,400b800 <_malloc_r+0x4b8>
 400b7f0:	9009883a 	mov	r4,r18
 400b7f4:	401859c0 	call	401859c <__malloc_unlock>
 400b7f8:	0005883a 	mov	r2,zero
 400b7fc:	003f7b06 	br	400b5ec <__alt_data_end+0xfc00b5ec>
 400b800:	88c00054 	ori	r3,r17,1
 400b804:	80c00115 	stw	r3,4(r16)
 400b808:	8463883a 	add	r17,r16,r17
 400b80c:	10800054 	ori	r2,r2,1
 400b810:	9c400215 	stw	r17,8(r19)
 400b814:	88800115 	stw	r2,4(r17)
 400b818:	9009883a 	mov	r4,r18
 400b81c:	401859c0 	call	401859c <__malloc_unlock>
 400b820:	80800204 	addi	r2,r16,8
 400b824:	003f7106 	br	400b5ec <__alt_data_end+0xfc00b5ec>
 400b828:	00c00504 	movi	r3,20
 400b82c:	18804a2e 	bgeu	r3,r2,400b958 <_malloc_r+0x610>
 400b830:	00c01504 	movi	r3,84
 400b834:	18806e36 	bltu	r3,r2,400b9f0 <_malloc_r+0x6a8>
 400b838:	8804d33a 	srli	r2,r17,12
 400b83c:	12001bc4 	addi	r8,r2,111
 400b840:	11c01b84 	addi	r7,r2,110
 400b844:	4209883a 	add	r4,r8,r8
 400b848:	003edd06 	br	400b3c0 <__alt_data_end+0xfc00b3c0>
 400b84c:	3804d27a 	srli	r2,r7,9
 400b850:	00c00104 	movi	r3,4
 400b854:	1880442e 	bgeu	r3,r2,400b968 <_malloc_r+0x620>
 400b858:	00c00504 	movi	r3,20
 400b85c:	18808136 	bltu	r3,r2,400ba64 <_malloc_r+0x71c>
 400b860:	11401704 	addi	r5,r2,92
 400b864:	10c016c4 	addi	r3,r2,91
 400b868:	294b883a 	add	r5,r5,r5
 400b86c:	294b883a 	add	r5,r5,r5
 400b870:	294b883a 	add	r5,r5,r5
 400b874:	994b883a 	add	r5,r19,r5
 400b878:	28800017 	ldw	r2,0(r5)
 400b87c:	018100b4 	movhi	r6,1026
 400b880:	297ffe04 	addi	r5,r5,-8
 400b884:	319e2704 	addi	r6,r6,30876
 400b888:	28806526 	beq	r5,r2,400ba20 <_malloc_r+0x6d8>
 400b88c:	01bfff04 	movi	r6,-4
 400b890:	10c00117 	ldw	r3,4(r2)
 400b894:	1986703a 	and	r3,r3,r6
 400b898:	38c0022e 	bgeu	r7,r3,400b8a4 <_malloc_r+0x55c>
 400b89c:	10800217 	ldw	r2,8(r2)
 400b8a0:	28bffb1e 	bne	r5,r2,400b890 <__alt_data_end+0xfc00b890>
 400b8a4:	11400317 	ldw	r5,12(r2)
 400b8a8:	98c00117 	ldw	r3,4(r19)
 400b8ac:	81400315 	stw	r5,12(r16)
 400b8b0:	80800215 	stw	r2,8(r16)
 400b8b4:	2c000215 	stw	r16,8(r5)
 400b8b8:	14000315 	stw	r16,12(r2)
 400b8bc:	003ef806 	br	400b4a0 <__alt_data_end+0xfc00b4a0>
 400b8c0:	88c00054 	ori	r3,r17,1
 400b8c4:	80c00115 	stw	r3,4(r16)
 400b8c8:	8463883a 	add	r17,r16,r17
 400b8cc:	34400515 	stw	r17,20(r6)
 400b8d0:	34400415 	stw	r17,16(r6)
 400b8d4:	10c00054 	ori	r3,r2,1
 400b8d8:	8a000315 	stw	r8,12(r17)
 400b8dc:	8a000215 	stw	r8,8(r17)
 400b8e0:	88c00115 	stw	r3,4(r17)
 400b8e4:	88a3883a 	add	r17,r17,r2
 400b8e8:	88800015 	stw	r2,0(r17)
 400b8ec:	9009883a 	mov	r4,r18
 400b8f0:	401859c0 	call	401859c <__malloc_unlock>
 400b8f4:	80800204 	addi	r2,r16,8
 400b8f8:	003f3c06 	br	400b5ec <__alt_data_end+0xfc00b5ec>
 400b8fc:	30c00117 	ldw	r3,4(r6)
 400b900:	003ee706 	br	400b4a0 <__alt_data_end+0xfc00b4a0>
 400b904:	5ac00044 	addi	r11,r11,1
 400b908:	588000cc 	andi	r2,r11,3
 400b90c:	31800204 	addi	r6,r6,8
 400b910:	103efd1e 	bne	r2,zero,400b508 <__alt_data_end+0xfc00b508>
 400b914:	00002406 	br	400b9a8 <_malloc_r+0x660>
 400b918:	14000317 	ldw	r16,12(r2)
 400b91c:	143f251e 	bne	r2,r16,400b5b4 <__alt_data_end+0xfc00b5b4>
 400b920:	21000084 	addi	r4,r4,2
 400b924:	003ebc06 	br	400b418 <__alt_data_end+0xfc00b418>
 400b928:	8085883a 	add	r2,r16,r2
 400b92c:	10c00117 	ldw	r3,4(r2)
 400b930:	81000317 	ldw	r4,12(r16)
 400b934:	81400217 	ldw	r5,8(r16)
 400b938:	18c00054 	ori	r3,r3,1
 400b93c:	10c00115 	stw	r3,4(r2)
 400b940:	29000315 	stw	r4,12(r5)
 400b944:	21400215 	stw	r5,8(r4)
 400b948:	9009883a 	mov	r4,r18
 400b94c:	401859c0 	call	401859c <__malloc_unlock>
 400b950:	80800204 	addi	r2,r16,8
 400b954:	003f2506 	br	400b5ec <__alt_data_end+0xfc00b5ec>
 400b958:	12001704 	addi	r8,r2,92
 400b95c:	11c016c4 	addi	r7,r2,91
 400b960:	4209883a 	add	r4,r8,r8
 400b964:	003e9606 	br	400b3c0 <__alt_data_end+0xfc00b3c0>
 400b968:	3804d1ba 	srli	r2,r7,6
 400b96c:	11400e44 	addi	r5,r2,57
 400b970:	10c00e04 	addi	r3,r2,56
 400b974:	294b883a 	add	r5,r5,r5
 400b978:	003fbc06 	br	400b86c <__alt_data_end+0xfc00b86c>
 400b97c:	84ff5926 	beq	r16,r19,400b6e4 <__alt_data_end+0xfc00b6e4>
 400b980:	008100b4 	movhi	r2,1026
 400b984:	109e2704 	addi	r2,r2,30876
 400b988:	14000217 	ldw	r16,8(r2)
 400b98c:	00bfff04 	movi	r2,-4
 400b990:	80c00117 	ldw	r3,4(r16)
 400b994:	1886703a 	and	r3,r3,r2
 400b998:	003f9106 	br	400b7e0 <__alt_data_end+0xfc00b7e0>
 400b99c:	60800217 	ldw	r2,8(r12)
 400b9a0:	213fffc4 	addi	r4,r4,-1
 400b9a4:	1300651e 	bne	r2,r12,400bb3c <_malloc_r+0x7f4>
 400b9a8:	208000cc 	andi	r2,r4,3
 400b9ac:	633ffe04 	addi	r12,r12,-8
 400b9b0:	103ffa1e 	bne	r2,zero,400b99c <__alt_data_end+0xfc00b99c>
 400b9b4:	98800117 	ldw	r2,4(r19)
 400b9b8:	0146303a 	nor	r3,zero,r5
 400b9bc:	1884703a 	and	r2,r3,r2
 400b9c0:	98800115 	stw	r2,4(r19)
 400b9c4:	294b883a 	add	r5,r5,r5
 400b9c8:	117f2836 	bltu	r2,r5,400b66c <__alt_data_end+0xfc00b66c>
 400b9cc:	283f2726 	beq	r5,zero,400b66c <__alt_data_end+0xfc00b66c>
 400b9d0:	2886703a 	and	r3,r5,r2
 400b9d4:	5809883a 	mov	r4,r11
 400b9d8:	183ec31e 	bne	r3,zero,400b4e8 <__alt_data_end+0xfc00b4e8>
 400b9dc:	294b883a 	add	r5,r5,r5
 400b9e0:	2886703a 	and	r3,r5,r2
 400b9e4:	21000104 	addi	r4,r4,4
 400b9e8:	183ffc26 	beq	r3,zero,400b9dc <__alt_data_end+0xfc00b9dc>
 400b9ec:	003ebe06 	br	400b4e8 <__alt_data_end+0xfc00b4e8>
 400b9f0:	00c05504 	movi	r3,340
 400b9f4:	18801236 	bltu	r3,r2,400ba40 <_malloc_r+0x6f8>
 400b9f8:	8804d3fa 	srli	r2,r17,15
 400b9fc:	12001e04 	addi	r8,r2,120
 400ba00:	11c01dc4 	addi	r7,r2,119
 400ba04:	4209883a 	add	r4,r8,r8
 400ba08:	003e6d06 	br	400b3c0 <__alt_data_end+0xfc00b3c0>
 400ba0c:	00c40004 	movi	r3,4096
 400ba10:	003f4606 	br	400b72c <__alt_data_end+0xfc00b72c>
 400ba14:	00800044 	movi	r2,1
 400ba18:	a0800115 	stw	r2,4(r20)
 400ba1c:	003f7406 	br	400b7f0 <__alt_data_end+0xfc00b7f0>
 400ba20:	1805d0ba 	srai	r2,r3,2
 400ba24:	01c00044 	movi	r7,1
 400ba28:	30c00117 	ldw	r3,4(r6)
 400ba2c:	388e983a 	sll	r7,r7,r2
 400ba30:	2805883a 	mov	r2,r5
 400ba34:	38c6b03a 	or	r3,r7,r3
 400ba38:	30c00115 	stw	r3,4(r6)
 400ba3c:	003f9b06 	br	400b8ac <__alt_data_end+0xfc00b8ac>
 400ba40:	00c15504 	movi	r3,1364
 400ba44:	18801a36 	bltu	r3,r2,400bab0 <_malloc_r+0x768>
 400ba48:	8804d4ba 	srli	r2,r17,18
 400ba4c:	12001f44 	addi	r8,r2,125
 400ba50:	11c01f04 	addi	r7,r2,124
 400ba54:	4209883a 	add	r4,r8,r8
 400ba58:	003e5906 	br	400b3c0 <__alt_data_end+0xfc00b3c0>
 400ba5c:	ad400404 	addi	r21,r21,16
 400ba60:	003f1706 	br	400b6c0 <__alt_data_end+0xfc00b6c0>
 400ba64:	00c01504 	movi	r3,84
 400ba68:	18802336 	bltu	r3,r2,400baf8 <_malloc_r+0x7b0>
 400ba6c:	3804d33a 	srli	r2,r7,12
 400ba70:	11401bc4 	addi	r5,r2,111
 400ba74:	10c01b84 	addi	r3,r2,110
 400ba78:	294b883a 	add	r5,r5,r5
 400ba7c:	003f7b06 	br	400b86c <__alt_data_end+0xfc00b86c>
 400ba80:	9c000217 	ldw	r16,8(r19)
 400ba84:	00bfff04 	movi	r2,-4
 400ba88:	80c00117 	ldw	r3,4(r16)
 400ba8c:	1886703a 	and	r3,r3,r2
 400ba90:	003f5306 	br	400b7e0 <__alt_data_end+0xfc00b7e0>
 400ba94:	3083ffcc 	andi	r2,r6,4095
 400ba98:	103f181e 	bne	r2,zero,400b6fc <__alt_data_end+0xfc00b6fc>
 400ba9c:	99000217 	ldw	r4,8(r19)
 400baa0:	b545883a 	add	r2,r22,r21
 400baa4:	10800054 	ori	r2,r2,1
 400baa8:	20800115 	stw	r2,4(r4)
 400baac:	003f3e06 	br	400b7a8 <__alt_data_end+0xfc00b7a8>
 400bab0:	01003f84 	movi	r4,254
 400bab4:	02001fc4 	movi	r8,127
 400bab8:	01c01f84 	movi	r7,126
 400babc:	003e4006 	br	400b3c0 <__alt_data_end+0xfc00b3c0>
 400bac0:	008100f4 	movhi	r2,1027
 400bac4:	10a3e604 	addi	r2,r2,-28776
 400bac8:	15000015 	stw	r20,0(r2)
 400bacc:	003f1106 	br	400b714 <__alt_data_end+0xfc00b714>
 400bad0:	00800044 	movi	r2,1
 400bad4:	002b883a 	mov	r21,zero
 400bad8:	003f1f06 	br	400b758 <__alt_data_end+0xfc00b758>
 400badc:	81400204 	addi	r5,r16,8
 400bae0:	9009883a 	mov	r4,r18
 400bae4:	401086c0 	call	401086c <_free_r>
 400bae8:	008100f4 	movhi	r2,1027
 400baec:	1096e804 	addi	r2,r2,23456
 400baf0:	10c00017 	ldw	r3,0(r2)
 400baf4:	003f2c06 	br	400b7a8 <__alt_data_end+0xfc00b7a8>
 400baf8:	00c05504 	movi	r3,340
 400bafc:	18800536 	bltu	r3,r2,400bb14 <_malloc_r+0x7cc>
 400bb00:	3804d3fa 	srli	r2,r7,15
 400bb04:	11401e04 	addi	r5,r2,120
 400bb08:	10c01dc4 	addi	r3,r2,119
 400bb0c:	294b883a 	add	r5,r5,r5
 400bb10:	003f5606 	br	400b86c <__alt_data_end+0xfc00b86c>
 400bb14:	00c15504 	movi	r3,1364
 400bb18:	18800536 	bltu	r3,r2,400bb30 <_malloc_r+0x7e8>
 400bb1c:	3804d4ba 	srli	r2,r7,18
 400bb20:	11401f44 	addi	r5,r2,125
 400bb24:	10c01f04 	addi	r3,r2,124
 400bb28:	294b883a 	add	r5,r5,r5
 400bb2c:	003f4f06 	br	400b86c <__alt_data_end+0xfc00b86c>
 400bb30:	01403f84 	movi	r5,254
 400bb34:	00c01f84 	movi	r3,126
 400bb38:	003f4c06 	br	400b86c <__alt_data_end+0xfc00b86c>
 400bb3c:	98800117 	ldw	r2,4(r19)
 400bb40:	003fa006 	br	400b9c4 <__alt_data_end+0xfc00b9c4>
 400bb44:	8808d0fa 	srli	r4,r17,3
 400bb48:	20800044 	addi	r2,r4,1
 400bb4c:	1085883a 	add	r2,r2,r2
 400bb50:	003e9006 	br	400b594 <__alt_data_end+0xfc00b594>

0400bb54 <memcmp>:
 400bb54:	01c000c4 	movi	r7,3
 400bb58:	3980192e 	bgeu	r7,r6,400bbc0 <memcmp+0x6c>
 400bb5c:	2144b03a 	or	r2,r4,r5
 400bb60:	11c4703a 	and	r2,r2,r7
 400bb64:	10000f26 	beq	r2,zero,400bba4 <memcmp+0x50>
 400bb68:	20800003 	ldbu	r2,0(r4)
 400bb6c:	28c00003 	ldbu	r3,0(r5)
 400bb70:	10c0151e 	bne	r2,r3,400bbc8 <memcmp+0x74>
 400bb74:	31bfff84 	addi	r6,r6,-2
 400bb78:	01ffffc4 	movi	r7,-1
 400bb7c:	00000406 	br	400bb90 <memcmp+0x3c>
 400bb80:	20800003 	ldbu	r2,0(r4)
 400bb84:	28c00003 	ldbu	r3,0(r5)
 400bb88:	31bfffc4 	addi	r6,r6,-1
 400bb8c:	10c00e1e 	bne	r2,r3,400bbc8 <memcmp+0x74>
 400bb90:	21000044 	addi	r4,r4,1
 400bb94:	29400044 	addi	r5,r5,1
 400bb98:	31fff91e 	bne	r6,r7,400bb80 <__alt_data_end+0xfc00bb80>
 400bb9c:	0005883a 	mov	r2,zero
 400bba0:	f800283a 	ret
 400bba4:	20c00017 	ldw	r3,0(r4)
 400bba8:	28800017 	ldw	r2,0(r5)
 400bbac:	18bfee1e 	bne	r3,r2,400bb68 <__alt_data_end+0xfc00bb68>
 400bbb0:	31bfff04 	addi	r6,r6,-4
 400bbb4:	21000104 	addi	r4,r4,4
 400bbb8:	29400104 	addi	r5,r5,4
 400bbbc:	39bff936 	bltu	r7,r6,400bba4 <__alt_data_end+0xfc00bba4>
 400bbc0:	303fe91e 	bne	r6,zero,400bb68 <__alt_data_end+0xfc00bb68>
 400bbc4:	003ff506 	br	400bb9c <__alt_data_end+0xfc00bb9c>
 400bbc8:	10c5c83a 	sub	r2,r2,r3
 400bbcc:	f800283a 	ret

0400bbd0 <memcpy>:
 400bbd0:	defffd04 	addi	sp,sp,-12
 400bbd4:	dfc00215 	stw	ra,8(sp)
 400bbd8:	dc400115 	stw	r17,4(sp)
 400bbdc:	dc000015 	stw	r16,0(sp)
 400bbe0:	00c003c4 	movi	r3,15
 400bbe4:	2005883a 	mov	r2,r4
 400bbe8:	1980452e 	bgeu	r3,r6,400bd00 <memcpy+0x130>
 400bbec:	2906b03a 	or	r3,r5,r4
 400bbf0:	18c000cc 	andi	r3,r3,3
 400bbf4:	1800441e 	bne	r3,zero,400bd08 <memcpy+0x138>
 400bbf8:	347ffc04 	addi	r17,r6,-16
 400bbfc:	8822d13a 	srli	r17,r17,4
 400bc00:	28c00104 	addi	r3,r5,4
 400bc04:	23400104 	addi	r13,r4,4
 400bc08:	8820913a 	slli	r16,r17,4
 400bc0c:	2b000204 	addi	r12,r5,8
 400bc10:	22c00204 	addi	r11,r4,8
 400bc14:	84000504 	addi	r16,r16,20
 400bc18:	2a800304 	addi	r10,r5,12
 400bc1c:	22400304 	addi	r9,r4,12
 400bc20:	2c21883a 	add	r16,r5,r16
 400bc24:	2811883a 	mov	r8,r5
 400bc28:	200f883a 	mov	r7,r4
 400bc2c:	41000017 	ldw	r4,0(r8)
 400bc30:	1fc00017 	ldw	ra,0(r3)
 400bc34:	63c00017 	ldw	r15,0(r12)
 400bc38:	39000015 	stw	r4,0(r7)
 400bc3c:	53800017 	ldw	r14,0(r10)
 400bc40:	6fc00015 	stw	ra,0(r13)
 400bc44:	5bc00015 	stw	r15,0(r11)
 400bc48:	4b800015 	stw	r14,0(r9)
 400bc4c:	18c00404 	addi	r3,r3,16
 400bc50:	39c00404 	addi	r7,r7,16
 400bc54:	42000404 	addi	r8,r8,16
 400bc58:	6b400404 	addi	r13,r13,16
 400bc5c:	63000404 	addi	r12,r12,16
 400bc60:	5ac00404 	addi	r11,r11,16
 400bc64:	52800404 	addi	r10,r10,16
 400bc68:	4a400404 	addi	r9,r9,16
 400bc6c:	1c3fef1e 	bne	r3,r16,400bc2c <__alt_data_end+0xfc00bc2c>
 400bc70:	89c00044 	addi	r7,r17,1
 400bc74:	380e913a 	slli	r7,r7,4
 400bc78:	310003cc 	andi	r4,r6,15
 400bc7c:	02c000c4 	movi	r11,3
 400bc80:	11c7883a 	add	r3,r2,r7
 400bc84:	29cb883a 	add	r5,r5,r7
 400bc88:	5900212e 	bgeu	r11,r4,400bd10 <memcpy+0x140>
 400bc8c:	1813883a 	mov	r9,r3
 400bc90:	2811883a 	mov	r8,r5
 400bc94:	200f883a 	mov	r7,r4
 400bc98:	42800017 	ldw	r10,0(r8)
 400bc9c:	4a400104 	addi	r9,r9,4
 400bca0:	39ffff04 	addi	r7,r7,-4
 400bca4:	4abfff15 	stw	r10,-4(r9)
 400bca8:	42000104 	addi	r8,r8,4
 400bcac:	59fffa36 	bltu	r11,r7,400bc98 <__alt_data_end+0xfc00bc98>
 400bcb0:	213fff04 	addi	r4,r4,-4
 400bcb4:	2008d0ba 	srli	r4,r4,2
 400bcb8:	318000cc 	andi	r6,r6,3
 400bcbc:	21000044 	addi	r4,r4,1
 400bcc0:	2109883a 	add	r4,r4,r4
 400bcc4:	2109883a 	add	r4,r4,r4
 400bcc8:	1907883a 	add	r3,r3,r4
 400bccc:	290b883a 	add	r5,r5,r4
 400bcd0:	30000626 	beq	r6,zero,400bcec <memcpy+0x11c>
 400bcd4:	198d883a 	add	r6,r3,r6
 400bcd8:	29c00003 	ldbu	r7,0(r5)
 400bcdc:	18c00044 	addi	r3,r3,1
 400bce0:	29400044 	addi	r5,r5,1
 400bce4:	19ffffc5 	stb	r7,-1(r3)
 400bce8:	19bffb1e 	bne	r3,r6,400bcd8 <__alt_data_end+0xfc00bcd8>
 400bcec:	dfc00217 	ldw	ra,8(sp)
 400bcf0:	dc400117 	ldw	r17,4(sp)
 400bcf4:	dc000017 	ldw	r16,0(sp)
 400bcf8:	dec00304 	addi	sp,sp,12
 400bcfc:	f800283a 	ret
 400bd00:	2007883a 	mov	r3,r4
 400bd04:	003ff206 	br	400bcd0 <__alt_data_end+0xfc00bcd0>
 400bd08:	2007883a 	mov	r3,r4
 400bd0c:	003ff106 	br	400bcd4 <__alt_data_end+0xfc00bcd4>
 400bd10:	200d883a 	mov	r6,r4
 400bd14:	003fee06 	br	400bcd0 <__alt_data_end+0xfc00bcd0>

0400bd18 <memset>:
 400bd18:	20c000cc 	andi	r3,r4,3
 400bd1c:	2005883a 	mov	r2,r4
 400bd20:	18004426 	beq	r3,zero,400be34 <memset+0x11c>
 400bd24:	31ffffc4 	addi	r7,r6,-1
 400bd28:	30004026 	beq	r6,zero,400be2c <memset+0x114>
 400bd2c:	2813883a 	mov	r9,r5
 400bd30:	200d883a 	mov	r6,r4
 400bd34:	2007883a 	mov	r3,r4
 400bd38:	00000406 	br	400bd4c <memset+0x34>
 400bd3c:	3a3fffc4 	addi	r8,r7,-1
 400bd40:	31800044 	addi	r6,r6,1
 400bd44:	38003926 	beq	r7,zero,400be2c <memset+0x114>
 400bd48:	400f883a 	mov	r7,r8
 400bd4c:	18c00044 	addi	r3,r3,1
 400bd50:	32400005 	stb	r9,0(r6)
 400bd54:	1a0000cc 	andi	r8,r3,3
 400bd58:	403ff81e 	bne	r8,zero,400bd3c <__alt_data_end+0xfc00bd3c>
 400bd5c:	010000c4 	movi	r4,3
 400bd60:	21c02d2e 	bgeu	r4,r7,400be18 <memset+0x100>
 400bd64:	29003fcc 	andi	r4,r5,255
 400bd68:	200c923a 	slli	r6,r4,8
 400bd6c:	3108b03a 	or	r4,r6,r4
 400bd70:	200c943a 	slli	r6,r4,16
 400bd74:	218cb03a 	or	r6,r4,r6
 400bd78:	010003c4 	movi	r4,15
 400bd7c:	21c0182e 	bgeu	r4,r7,400bde0 <memset+0xc8>
 400bd80:	3b3ffc04 	addi	r12,r7,-16
 400bd84:	6018d13a 	srli	r12,r12,4
 400bd88:	1a000104 	addi	r8,r3,4
 400bd8c:	1ac00204 	addi	r11,r3,8
 400bd90:	6008913a 	slli	r4,r12,4
 400bd94:	1a800304 	addi	r10,r3,12
 400bd98:	1813883a 	mov	r9,r3
 400bd9c:	21000504 	addi	r4,r4,20
 400bda0:	1909883a 	add	r4,r3,r4
 400bda4:	49800015 	stw	r6,0(r9)
 400bda8:	41800015 	stw	r6,0(r8)
 400bdac:	59800015 	stw	r6,0(r11)
 400bdb0:	51800015 	stw	r6,0(r10)
 400bdb4:	42000404 	addi	r8,r8,16
 400bdb8:	4a400404 	addi	r9,r9,16
 400bdbc:	5ac00404 	addi	r11,r11,16
 400bdc0:	52800404 	addi	r10,r10,16
 400bdc4:	413ff71e 	bne	r8,r4,400bda4 <__alt_data_end+0xfc00bda4>
 400bdc8:	63000044 	addi	r12,r12,1
 400bdcc:	6018913a 	slli	r12,r12,4
 400bdd0:	39c003cc 	andi	r7,r7,15
 400bdd4:	010000c4 	movi	r4,3
 400bdd8:	1b07883a 	add	r3,r3,r12
 400bddc:	21c00e2e 	bgeu	r4,r7,400be18 <memset+0x100>
 400bde0:	1813883a 	mov	r9,r3
 400bde4:	3811883a 	mov	r8,r7
 400bde8:	010000c4 	movi	r4,3
 400bdec:	49800015 	stw	r6,0(r9)
 400bdf0:	423fff04 	addi	r8,r8,-4
 400bdf4:	4a400104 	addi	r9,r9,4
 400bdf8:	223ffc36 	bltu	r4,r8,400bdec <__alt_data_end+0xfc00bdec>
 400bdfc:	393fff04 	addi	r4,r7,-4
 400be00:	2008d0ba 	srli	r4,r4,2
 400be04:	39c000cc 	andi	r7,r7,3
 400be08:	21000044 	addi	r4,r4,1
 400be0c:	2109883a 	add	r4,r4,r4
 400be10:	2109883a 	add	r4,r4,r4
 400be14:	1907883a 	add	r3,r3,r4
 400be18:	38000526 	beq	r7,zero,400be30 <memset+0x118>
 400be1c:	19cf883a 	add	r7,r3,r7
 400be20:	19400005 	stb	r5,0(r3)
 400be24:	18c00044 	addi	r3,r3,1
 400be28:	38fffd1e 	bne	r7,r3,400be20 <__alt_data_end+0xfc00be20>
 400be2c:	f800283a 	ret
 400be30:	f800283a 	ret
 400be34:	2007883a 	mov	r3,r4
 400be38:	300f883a 	mov	r7,r6
 400be3c:	003fc706 	br	400bd5c <__alt_data_end+0xfc00bd5c>

0400be40 <_printf_r>:
 400be40:	defffd04 	addi	sp,sp,-12
 400be44:	2805883a 	mov	r2,r5
 400be48:	dfc00015 	stw	ra,0(sp)
 400be4c:	d9800115 	stw	r6,4(sp)
 400be50:	d9c00215 	stw	r7,8(sp)
 400be54:	21400217 	ldw	r5,8(r4)
 400be58:	d9c00104 	addi	r7,sp,4
 400be5c:	100d883a 	mov	r6,r2
 400be60:	400c4540 	call	400c454 <___vfprintf_internal_r>
 400be64:	dfc00017 	ldw	ra,0(sp)
 400be68:	dec00304 	addi	sp,sp,12
 400be6c:	f800283a 	ret

0400be70 <printf>:
 400be70:	defffc04 	addi	sp,sp,-16
 400be74:	dfc00015 	stw	ra,0(sp)
 400be78:	d9400115 	stw	r5,4(sp)
 400be7c:	d9800215 	stw	r6,8(sp)
 400be80:	d9c00315 	stw	r7,12(sp)
 400be84:	008100f4 	movhi	r2,1027
 400be88:	10a3e504 	addi	r2,r2,-28780
 400be8c:	10800017 	ldw	r2,0(r2)
 400be90:	200b883a 	mov	r5,r4
 400be94:	d9800104 	addi	r6,sp,4
 400be98:	11000217 	ldw	r4,8(r2)
 400be9c:	400e64c0 	call	400e64c <__vfprintf_internal>
 400bea0:	dfc00017 	ldw	ra,0(sp)
 400bea4:	dec00404 	addi	sp,sp,16
 400bea8:	f800283a 	ret

0400beac <_puts_r>:
 400beac:	defff604 	addi	sp,sp,-40
 400beb0:	dc000715 	stw	r16,28(sp)
 400beb4:	2021883a 	mov	r16,r4
 400beb8:	2809883a 	mov	r4,r5
 400bebc:	dc400815 	stw	r17,32(sp)
 400bec0:	dfc00915 	stw	ra,36(sp)
 400bec4:	2823883a 	mov	r17,r5
 400bec8:	400c3b40 	call	400c3b4 <strlen>
 400becc:	10c00044 	addi	r3,r2,1
 400bed0:	d8800115 	stw	r2,4(sp)
 400bed4:	008100b4 	movhi	r2,1026
 400bed8:	10b09304 	addi	r2,r2,-15796
 400bedc:	d8800215 	stw	r2,8(sp)
 400bee0:	00800044 	movi	r2,1
 400bee4:	d8800315 	stw	r2,12(sp)
 400bee8:	00800084 	movi	r2,2
 400beec:	dc400015 	stw	r17,0(sp)
 400bef0:	d8c00615 	stw	r3,24(sp)
 400bef4:	dec00415 	stw	sp,16(sp)
 400bef8:	d8800515 	stw	r2,20(sp)
 400befc:	80000226 	beq	r16,zero,400bf08 <_puts_r+0x5c>
 400bf00:	80800e17 	ldw	r2,56(r16)
 400bf04:	10001426 	beq	r2,zero,400bf58 <_puts_r+0xac>
 400bf08:	81400217 	ldw	r5,8(r16)
 400bf0c:	2880030b 	ldhu	r2,12(r5)
 400bf10:	10c8000c 	andi	r3,r2,8192
 400bf14:	1800061e 	bne	r3,zero,400bf30 <_puts_r+0x84>
 400bf18:	29001917 	ldw	r4,100(r5)
 400bf1c:	00f7ffc4 	movi	r3,-8193
 400bf20:	10880014 	ori	r2,r2,8192
 400bf24:	20c6703a 	and	r3,r4,r3
 400bf28:	2880030d 	sth	r2,12(r5)
 400bf2c:	28c01915 	stw	r3,100(r5)
 400bf30:	d9800404 	addi	r6,sp,16
 400bf34:	8009883a 	mov	r4,r16
 400bf38:	4010b7c0 	call	4010b7c <__sfvwrite_r>
 400bf3c:	1000091e 	bne	r2,zero,400bf64 <_puts_r+0xb8>
 400bf40:	00800284 	movi	r2,10
 400bf44:	dfc00917 	ldw	ra,36(sp)
 400bf48:	dc400817 	ldw	r17,32(sp)
 400bf4c:	dc000717 	ldw	r16,28(sp)
 400bf50:	dec00a04 	addi	sp,sp,40
 400bf54:	f800283a 	ret
 400bf58:	8009883a 	mov	r4,r16
 400bf5c:	40106f80 	call	40106f8 <__sinit>
 400bf60:	003fe906 	br	400bf08 <__alt_data_end+0xfc00bf08>
 400bf64:	00bfffc4 	movi	r2,-1
 400bf68:	003ff606 	br	400bf44 <__alt_data_end+0xfc00bf44>

0400bf6c <puts>:
 400bf6c:	008100f4 	movhi	r2,1027
 400bf70:	10a3e504 	addi	r2,r2,-28780
 400bf74:	200b883a 	mov	r5,r4
 400bf78:	11000017 	ldw	r4,0(r2)
 400bf7c:	400beac1 	jmpi	400beac <_puts_r>

0400bf80 <_sbrk_r>:
 400bf80:	defffd04 	addi	sp,sp,-12
 400bf84:	dc000015 	stw	r16,0(sp)
 400bf88:	040100f4 	movhi	r16,1027
 400bf8c:	dc400115 	stw	r17,4(sp)
 400bf90:	8416ae04 	addi	r16,r16,23224
 400bf94:	2023883a 	mov	r17,r4
 400bf98:	2809883a 	mov	r4,r5
 400bf9c:	dfc00215 	stw	ra,8(sp)
 400bfa0:	80000015 	stw	zero,0(r16)
 400bfa4:	401875c0 	call	401875c <sbrk>
 400bfa8:	00ffffc4 	movi	r3,-1
 400bfac:	10c00526 	beq	r2,r3,400bfc4 <_sbrk_r+0x44>
 400bfb0:	dfc00217 	ldw	ra,8(sp)
 400bfb4:	dc400117 	ldw	r17,4(sp)
 400bfb8:	dc000017 	ldw	r16,0(sp)
 400bfbc:	dec00304 	addi	sp,sp,12
 400bfc0:	f800283a 	ret
 400bfc4:	80c00017 	ldw	r3,0(r16)
 400bfc8:	183ff926 	beq	r3,zero,400bfb0 <__alt_data_end+0xfc00bfb0>
 400bfcc:	88c00015 	stw	r3,0(r17)
 400bfd0:	003ff706 	br	400bfb0 <__alt_data_end+0xfc00bfb0>

0400bfd4 <_init_signal_r>:
 400bfd4:	2080b717 	ldw	r2,732(r4)
 400bfd8:	10000226 	beq	r2,zero,400bfe4 <_init_signal_r+0x10>
 400bfdc:	0005883a 	mov	r2,zero
 400bfe0:	f800283a 	ret
 400bfe4:	defffe04 	addi	sp,sp,-8
 400bfe8:	01402004 	movi	r5,128
 400bfec:	dc000015 	stw	r16,0(sp)
 400bff0:	dfc00115 	stw	ra,4(sp)
 400bff4:	2021883a 	mov	r16,r4
 400bff8:	400b3480 	call	400b348 <_malloc_r>
 400bffc:	8080b715 	stw	r2,732(r16)
 400c000:	10000d26 	beq	r2,zero,400c038 <_init_signal_r+0x64>
 400c004:	0007883a 	mov	r3,zero
 400c008:	01002004 	movi	r4,128
 400c00c:	00000106 	br	400c014 <_init_signal_r+0x40>
 400c010:	8080b717 	ldw	r2,732(r16)
 400c014:	10c5883a 	add	r2,r2,r3
 400c018:	10000015 	stw	zero,0(r2)
 400c01c:	18c00104 	addi	r3,r3,4
 400c020:	193ffb1e 	bne	r3,r4,400c010 <__alt_data_end+0xfc00c010>
 400c024:	0005883a 	mov	r2,zero
 400c028:	dfc00117 	ldw	ra,4(sp)
 400c02c:	dc000017 	ldw	r16,0(sp)
 400c030:	dec00204 	addi	sp,sp,8
 400c034:	f800283a 	ret
 400c038:	00bfffc4 	movi	r2,-1
 400c03c:	003ffa06 	br	400c028 <__alt_data_end+0xfc00c028>

0400c040 <_signal_r>:
 400c040:	00c007c4 	movi	r3,31
 400c044:	19401536 	bltu	r3,r5,400c09c <_signal_r+0x5c>
 400c048:	2080b717 	ldw	r2,732(r4)
 400c04c:	defffc04 	addi	sp,sp,-16
 400c050:	dc800215 	stw	r18,8(sp)
 400c054:	dc400115 	stw	r17,4(sp)
 400c058:	dc000015 	stw	r16,0(sp)
 400c05c:	dfc00315 	stw	ra,12(sp)
 400c060:	3023883a 	mov	r17,r6
 400c064:	2021883a 	mov	r16,r4
 400c068:	2825883a 	mov	r18,r5
 400c06c:	10000f26 	beq	r2,zero,400c0ac <_signal_r+0x6c>
 400c070:	948b883a 	add	r5,r18,r18
 400c074:	294b883a 	add	r5,r5,r5
 400c078:	114b883a 	add	r5,r2,r5
 400c07c:	28800017 	ldw	r2,0(r5)
 400c080:	2c400015 	stw	r17,0(r5)
 400c084:	dfc00317 	ldw	ra,12(sp)
 400c088:	dc800217 	ldw	r18,8(sp)
 400c08c:	dc400117 	ldw	r17,4(sp)
 400c090:	dc000017 	ldw	r16,0(sp)
 400c094:	dec00404 	addi	sp,sp,16
 400c098:	f800283a 	ret
 400c09c:	00c00584 	movi	r3,22
 400c0a0:	20c00015 	stw	r3,0(r4)
 400c0a4:	00bfffc4 	movi	r2,-1
 400c0a8:	f800283a 	ret
 400c0ac:	400bfd40 	call	400bfd4 <_init_signal_r>
 400c0b0:	1000021e 	bne	r2,zero,400c0bc <_signal_r+0x7c>
 400c0b4:	8080b717 	ldw	r2,732(r16)
 400c0b8:	003fed06 	br	400c070 <__alt_data_end+0xfc00c070>
 400c0bc:	00bfffc4 	movi	r2,-1
 400c0c0:	003ff006 	br	400c084 <__alt_data_end+0xfc00c084>

0400c0c4 <_raise_r>:
 400c0c4:	008007c4 	movi	r2,31
 400c0c8:	11402936 	bltu	r2,r5,400c170 <_raise_r+0xac>
 400c0cc:	20c0b717 	ldw	r3,732(r4)
 400c0d0:	defffd04 	addi	sp,sp,-12
 400c0d4:	dc400115 	stw	r17,4(sp)
 400c0d8:	dc000015 	stw	r16,0(sp)
 400c0dc:	dfc00215 	stw	ra,8(sp)
 400c0e0:	2021883a 	mov	r16,r4
 400c0e4:	2823883a 	mov	r17,r5
 400c0e8:	18001726 	beq	r3,zero,400c148 <_raise_r+0x84>
 400c0ec:	2945883a 	add	r2,r5,r5
 400c0f0:	1085883a 	add	r2,r2,r2
 400c0f4:	1887883a 	add	r3,r3,r2
 400c0f8:	19800017 	ldw	r6,0(r3)
 400c0fc:	30001226 	beq	r6,zero,400c148 <_raise_r+0x84>
 400c100:	00800044 	movi	r2,1
 400c104:	30800e26 	beq	r6,r2,400c140 <_raise_r+0x7c>
 400c108:	013fffc4 	movi	r4,-1
 400c10c:	31000926 	beq	r6,r4,400c134 <_raise_r+0x70>
 400c110:	18000015 	stw	zero,0(r3)
 400c114:	2809883a 	mov	r4,r5
 400c118:	303ee83a 	callr	r6
 400c11c:	0005883a 	mov	r2,zero
 400c120:	dfc00217 	ldw	ra,8(sp)
 400c124:	dc400117 	ldw	r17,4(sp)
 400c128:	dc000017 	ldw	r16,0(sp)
 400c12c:	dec00304 	addi	sp,sp,12
 400c130:	f800283a 	ret
 400c134:	00c00584 	movi	r3,22
 400c138:	80c00015 	stw	r3,0(r16)
 400c13c:	003ff806 	br	400c120 <__alt_data_end+0xfc00c120>
 400c140:	0005883a 	mov	r2,zero
 400c144:	003ff606 	br	400c120 <__alt_data_end+0xfc00c120>
 400c148:	8009883a 	mov	r4,r16
 400c14c:	400c2d40 	call	400c2d4 <_getpid_r>
 400c150:	880d883a 	mov	r6,r17
 400c154:	100b883a 	mov	r5,r2
 400c158:	8009883a 	mov	r4,r16
 400c15c:	dfc00217 	ldw	ra,8(sp)
 400c160:	dc400117 	ldw	r17,4(sp)
 400c164:	dc000017 	ldw	r16,0(sp)
 400c168:	dec00304 	addi	sp,sp,12
 400c16c:	400c2781 	jmpi	400c278 <_kill_r>
 400c170:	00800584 	movi	r2,22
 400c174:	20800015 	stw	r2,0(r4)
 400c178:	00bfffc4 	movi	r2,-1
 400c17c:	f800283a 	ret

0400c180 <__sigtramp_r>:
 400c180:	008007c4 	movi	r2,31
 400c184:	11402436 	bltu	r2,r5,400c218 <__sigtramp_r+0x98>
 400c188:	20c0b717 	ldw	r3,732(r4)
 400c18c:	defffd04 	addi	sp,sp,-12
 400c190:	dc400115 	stw	r17,4(sp)
 400c194:	dc000015 	stw	r16,0(sp)
 400c198:	dfc00215 	stw	ra,8(sp)
 400c19c:	2021883a 	mov	r16,r4
 400c1a0:	2823883a 	mov	r17,r5
 400c1a4:	18001826 	beq	r3,zero,400c208 <__sigtramp_r+0x88>
 400c1a8:	8c45883a 	add	r2,r17,r17
 400c1ac:	1085883a 	add	r2,r2,r2
 400c1b0:	1885883a 	add	r2,r3,r2
 400c1b4:	10c00017 	ldw	r3,0(r2)
 400c1b8:	18001126 	beq	r3,zero,400c200 <__sigtramp_r+0x80>
 400c1bc:	013fffc4 	movi	r4,-1
 400c1c0:	19000d26 	beq	r3,r4,400c1f8 <__sigtramp_r+0x78>
 400c1c4:	01000044 	movi	r4,1
 400c1c8:	19000926 	beq	r3,r4,400c1f0 <__sigtramp_r+0x70>
 400c1cc:	10000015 	stw	zero,0(r2)
 400c1d0:	8809883a 	mov	r4,r17
 400c1d4:	183ee83a 	callr	r3
 400c1d8:	0005883a 	mov	r2,zero
 400c1dc:	dfc00217 	ldw	ra,8(sp)
 400c1e0:	dc400117 	ldw	r17,4(sp)
 400c1e4:	dc000017 	ldw	r16,0(sp)
 400c1e8:	dec00304 	addi	sp,sp,12
 400c1ec:	f800283a 	ret
 400c1f0:	008000c4 	movi	r2,3
 400c1f4:	003ff906 	br	400c1dc <__alt_data_end+0xfc00c1dc>
 400c1f8:	00800084 	movi	r2,2
 400c1fc:	003ff706 	br	400c1dc <__alt_data_end+0xfc00c1dc>
 400c200:	00800044 	movi	r2,1
 400c204:	003ff506 	br	400c1dc <__alt_data_end+0xfc00c1dc>
 400c208:	400bfd40 	call	400bfd4 <_init_signal_r>
 400c20c:	1000041e 	bne	r2,zero,400c220 <__sigtramp_r+0xa0>
 400c210:	80c0b717 	ldw	r3,732(r16)
 400c214:	003fe406 	br	400c1a8 <__alt_data_end+0xfc00c1a8>
 400c218:	00bfffc4 	movi	r2,-1
 400c21c:	f800283a 	ret
 400c220:	00bfffc4 	movi	r2,-1
 400c224:	003fed06 	br	400c1dc <__alt_data_end+0xfc00c1dc>

0400c228 <raise>:
 400c228:	008100f4 	movhi	r2,1027
 400c22c:	10a3e504 	addi	r2,r2,-28780
 400c230:	200b883a 	mov	r5,r4
 400c234:	11000017 	ldw	r4,0(r2)
 400c238:	400c0c41 	jmpi	400c0c4 <_raise_r>

0400c23c <signal>:
 400c23c:	008100f4 	movhi	r2,1027
 400c240:	10a3e504 	addi	r2,r2,-28780
 400c244:	280d883a 	mov	r6,r5
 400c248:	200b883a 	mov	r5,r4
 400c24c:	11000017 	ldw	r4,0(r2)
 400c250:	400c0401 	jmpi	400c040 <_signal_r>

0400c254 <_init_signal>:
 400c254:	008100f4 	movhi	r2,1027
 400c258:	10a3e504 	addi	r2,r2,-28780
 400c25c:	11000017 	ldw	r4,0(r2)
 400c260:	400bfd41 	jmpi	400bfd4 <_init_signal_r>

0400c264 <__sigtramp>:
 400c264:	008100f4 	movhi	r2,1027
 400c268:	10a3e504 	addi	r2,r2,-28780
 400c26c:	200b883a 	mov	r5,r4
 400c270:	11000017 	ldw	r4,0(r2)
 400c274:	400c1801 	jmpi	400c180 <__sigtramp_r>

0400c278 <_kill_r>:
 400c278:	defffd04 	addi	sp,sp,-12
 400c27c:	2805883a 	mov	r2,r5
 400c280:	dc000015 	stw	r16,0(sp)
 400c284:	040100f4 	movhi	r16,1027
 400c288:	dc400115 	stw	r17,4(sp)
 400c28c:	8416ae04 	addi	r16,r16,23224
 400c290:	2023883a 	mov	r17,r4
 400c294:	300b883a 	mov	r5,r6
 400c298:	1009883a 	mov	r4,r2
 400c29c:	dfc00215 	stw	ra,8(sp)
 400c2a0:	80000015 	stw	zero,0(r16)
 400c2a4:	40181d00 	call	40181d0 <kill>
 400c2a8:	00ffffc4 	movi	r3,-1
 400c2ac:	10c00526 	beq	r2,r3,400c2c4 <_kill_r+0x4c>
 400c2b0:	dfc00217 	ldw	ra,8(sp)
 400c2b4:	dc400117 	ldw	r17,4(sp)
 400c2b8:	dc000017 	ldw	r16,0(sp)
 400c2bc:	dec00304 	addi	sp,sp,12
 400c2c0:	f800283a 	ret
 400c2c4:	80c00017 	ldw	r3,0(r16)
 400c2c8:	183ff926 	beq	r3,zero,400c2b0 <__alt_data_end+0xfc00c2b0>
 400c2cc:	88c00015 	stw	r3,0(r17)
 400c2d0:	003ff706 	br	400c2b0 <__alt_data_end+0xfc00c2b0>

0400c2d4 <_getpid_r>:
 400c2d4:	40180941 	jmpi	4018094 <getpid>

0400c2d8 <strcmp>:
 400c2d8:	2144b03a 	or	r2,r4,r5
 400c2dc:	108000cc 	andi	r2,r2,3
 400c2e0:	1000171e 	bne	r2,zero,400c340 <strcmp+0x68>
 400c2e4:	20800017 	ldw	r2,0(r4)
 400c2e8:	28c00017 	ldw	r3,0(r5)
 400c2ec:	10c0141e 	bne	r2,r3,400c340 <strcmp+0x68>
 400c2f0:	027fbff4 	movhi	r9,65279
 400c2f4:	4a7fbfc4 	addi	r9,r9,-257
 400c2f8:	0086303a 	nor	r3,zero,r2
 400c2fc:	02202074 	movhi	r8,32897
 400c300:	1245883a 	add	r2,r2,r9
 400c304:	42202004 	addi	r8,r8,-32640
 400c308:	10c4703a 	and	r2,r2,r3
 400c30c:	1204703a 	and	r2,r2,r8
 400c310:	10000226 	beq	r2,zero,400c31c <strcmp+0x44>
 400c314:	00002306 	br	400c3a4 <strcmp+0xcc>
 400c318:	1000221e 	bne	r2,zero,400c3a4 <strcmp+0xcc>
 400c31c:	21000104 	addi	r4,r4,4
 400c320:	20c00017 	ldw	r3,0(r4)
 400c324:	29400104 	addi	r5,r5,4
 400c328:	29800017 	ldw	r6,0(r5)
 400c32c:	1a4f883a 	add	r7,r3,r9
 400c330:	00c4303a 	nor	r2,zero,r3
 400c334:	3884703a 	and	r2,r7,r2
 400c338:	1204703a 	and	r2,r2,r8
 400c33c:	19bff626 	beq	r3,r6,400c318 <__alt_data_end+0xfc00c318>
 400c340:	20800003 	ldbu	r2,0(r4)
 400c344:	10c03fcc 	andi	r3,r2,255
 400c348:	18c0201c 	xori	r3,r3,128
 400c34c:	18ffe004 	addi	r3,r3,-128
 400c350:	18000c26 	beq	r3,zero,400c384 <strcmp+0xac>
 400c354:	29800007 	ldb	r6,0(r5)
 400c358:	19800326 	beq	r3,r6,400c368 <strcmp+0x90>
 400c35c:	00001306 	br	400c3ac <strcmp+0xd4>
 400c360:	29800007 	ldb	r6,0(r5)
 400c364:	11800b1e 	bne	r2,r6,400c394 <strcmp+0xbc>
 400c368:	21000044 	addi	r4,r4,1
 400c36c:	20c00003 	ldbu	r3,0(r4)
 400c370:	29400044 	addi	r5,r5,1
 400c374:	18803fcc 	andi	r2,r3,255
 400c378:	1080201c 	xori	r2,r2,128
 400c37c:	10bfe004 	addi	r2,r2,-128
 400c380:	103ff71e 	bne	r2,zero,400c360 <__alt_data_end+0xfc00c360>
 400c384:	0007883a 	mov	r3,zero
 400c388:	28800003 	ldbu	r2,0(r5)
 400c38c:	1885c83a 	sub	r2,r3,r2
 400c390:	f800283a 	ret
 400c394:	28800003 	ldbu	r2,0(r5)
 400c398:	18c03fcc 	andi	r3,r3,255
 400c39c:	1885c83a 	sub	r2,r3,r2
 400c3a0:	f800283a 	ret
 400c3a4:	0005883a 	mov	r2,zero
 400c3a8:	f800283a 	ret
 400c3ac:	10c03fcc 	andi	r3,r2,255
 400c3b0:	003ff506 	br	400c388 <__alt_data_end+0xfc00c388>

0400c3b4 <strlen>:
 400c3b4:	208000cc 	andi	r2,r4,3
 400c3b8:	10002026 	beq	r2,zero,400c43c <strlen+0x88>
 400c3bc:	20800007 	ldb	r2,0(r4)
 400c3c0:	10002026 	beq	r2,zero,400c444 <strlen+0x90>
 400c3c4:	2005883a 	mov	r2,r4
 400c3c8:	00000206 	br	400c3d4 <strlen+0x20>
 400c3cc:	10c00007 	ldb	r3,0(r2)
 400c3d0:	18001826 	beq	r3,zero,400c434 <strlen+0x80>
 400c3d4:	10800044 	addi	r2,r2,1
 400c3d8:	10c000cc 	andi	r3,r2,3
 400c3dc:	183ffb1e 	bne	r3,zero,400c3cc <__alt_data_end+0xfc00c3cc>
 400c3e0:	10c00017 	ldw	r3,0(r2)
 400c3e4:	01ffbff4 	movhi	r7,65279
 400c3e8:	39ffbfc4 	addi	r7,r7,-257
 400c3ec:	00ca303a 	nor	r5,zero,r3
 400c3f0:	01a02074 	movhi	r6,32897
 400c3f4:	19c7883a 	add	r3,r3,r7
 400c3f8:	31a02004 	addi	r6,r6,-32640
 400c3fc:	1946703a 	and	r3,r3,r5
 400c400:	1986703a 	and	r3,r3,r6
 400c404:	1800091e 	bne	r3,zero,400c42c <strlen+0x78>
 400c408:	10800104 	addi	r2,r2,4
 400c40c:	10c00017 	ldw	r3,0(r2)
 400c410:	19cb883a 	add	r5,r3,r7
 400c414:	00c6303a 	nor	r3,zero,r3
 400c418:	28c6703a 	and	r3,r5,r3
 400c41c:	1986703a 	and	r3,r3,r6
 400c420:	183ff926 	beq	r3,zero,400c408 <__alt_data_end+0xfc00c408>
 400c424:	00000106 	br	400c42c <strlen+0x78>
 400c428:	10800044 	addi	r2,r2,1
 400c42c:	10c00007 	ldb	r3,0(r2)
 400c430:	183ffd1e 	bne	r3,zero,400c428 <__alt_data_end+0xfc00c428>
 400c434:	1105c83a 	sub	r2,r2,r4
 400c438:	f800283a 	ret
 400c43c:	2005883a 	mov	r2,r4
 400c440:	003fe706 	br	400c3e0 <__alt_data_end+0xfc00c3e0>
 400c444:	0005883a 	mov	r2,zero
 400c448:	f800283a 	ret

0400c44c <_times_r>:
 400c44c:	2809883a 	mov	r4,r5
 400c450:	40188481 	jmpi	4018848 <times>

0400c454 <___vfprintf_internal_r>:
 400c454:	deffb804 	addi	sp,sp,-288
 400c458:	dfc04715 	stw	ra,284(sp)
 400c45c:	ddc04515 	stw	r23,276(sp)
 400c460:	dd404315 	stw	r21,268(sp)
 400c464:	d9002c15 	stw	r4,176(sp)
 400c468:	282f883a 	mov	r23,r5
 400c46c:	302b883a 	mov	r21,r6
 400c470:	d9c02d15 	stw	r7,180(sp)
 400c474:	df004615 	stw	fp,280(sp)
 400c478:	dd804415 	stw	r22,272(sp)
 400c47c:	dd004215 	stw	r20,264(sp)
 400c480:	dcc04115 	stw	r19,260(sp)
 400c484:	dc804015 	stw	r18,256(sp)
 400c488:	dc403f15 	stw	r17,252(sp)
 400c48c:	dc003e15 	stw	r16,248(sp)
 400c490:	401126c0 	call	401126c <_localeconv_r>
 400c494:	10800017 	ldw	r2,0(r2)
 400c498:	1009883a 	mov	r4,r2
 400c49c:	d8803415 	stw	r2,208(sp)
 400c4a0:	400c3b40 	call	400c3b4 <strlen>
 400c4a4:	d8803715 	stw	r2,220(sp)
 400c4a8:	d8802c17 	ldw	r2,176(sp)
 400c4ac:	10000226 	beq	r2,zero,400c4b8 <___vfprintf_internal_r+0x64>
 400c4b0:	10800e17 	ldw	r2,56(r2)
 400c4b4:	1000f926 	beq	r2,zero,400c89c <___vfprintf_internal_r+0x448>
 400c4b8:	b880030b 	ldhu	r2,12(r23)
 400c4bc:	10c8000c 	andi	r3,r2,8192
 400c4c0:	1800061e 	bne	r3,zero,400c4dc <___vfprintf_internal_r+0x88>
 400c4c4:	b9001917 	ldw	r4,100(r23)
 400c4c8:	00f7ffc4 	movi	r3,-8193
 400c4cc:	10880014 	ori	r2,r2,8192
 400c4d0:	20c6703a 	and	r3,r4,r3
 400c4d4:	b880030d 	sth	r2,12(r23)
 400c4d8:	b8c01915 	stw	r3,100(r23)
 400c4dc:	10c0020c 	andi	r3,r2,8
 400c4e0:	1800c126 	beq	r3,zero,400c7e8 <___vfprintf_internal_r+0x394>
 400c4e4:	b8c00417 	ldw	r3,16(r23)
 400c4e8:	1800bf26 	beq	r3,zero,400c7e8 <___vfprintf_internal_r+0x394>
 400c4ec:	1080068c 	andi	r2,r2,26
 400c4f0:	00c00284 	movi	r3,10
 400c4f4:	10c0c426 	beq	r2,r3,400c808 <___vfprintf_internal_r+0x3b4>
 400c4f8:	d8c00404 	addi	r3,sp,16
 400c4fc:	050100b4 	movhi	r20,1026
 400c500:	d9001e04 	addi	r4,sp,120
 400c504:	a530a484 	addi	r20,r20,-15726
 400c508:	d8c01e15 	stw	r3,120(sp)
 400c50c:	d8002015 	stw	zero,128(sp)
 400c510:	d8001f15 	stw	zero,124(sp)
 400c514:	d8003315 	stw	zero,204(sp)
 400c518:	d8003615 	stw	zero,216(sp)
 400c51c:	d8003815 	stw	zero,224(sp)
 400c520:	1811883a 	mov	r8,r3
 400c524:	d8003915 	stw	zero,228(sp)
 400c528:	d8003a15 	stw	zero,232(sp)
 400c52c:	d8002f15 	stw	zero,188(sp)
 400c530:	d9002815 	stw	r4,160(sp)
 400c534:	a8800007 	ldb	r2,0(r21)
 400c538:	10027b26 	beq	r2,zero,400cf28 <___vfprintf_internal_r+0xad4>
 400c53c:	00c00944 	movi	r3,37
 400c540:	a821883a 	mov	r16,r21
 400c544:	10c0021e 	bne	r2,r3,400c550 <___vfprintf_internal_r+0xfc>
 400c548:	00001406 	br	400c59c <___vfprintf_internal_r+0x148>
 400c54c:	10c00326 	beq	r2,r3,400c55c <___vfprintf_internal_r+0x108>
 400c550:	84000044 	addi	r16,r16,1
 400c554:	80800007 	ldb	r2,0(r16)
 400c558:	103ffc1e 	bne	r2,zero,400c54c <__alt_data_end+0xfc00c54c>
 400c55c:	8563c83a 	sub	r17,r16,r21
 400c560:	88000e26 	beq	r17,zero,400c59c <___vfprintf_internal_r+0x148>
 400c564:	d8c02017 	ldw	r3,128(sp)
 400c568:	d8801f17 	ldw	r2,124(sp)
 400c56c:	45400015 	stw	r21,0(r8)
 400c570:	1c47883a 	add	r3,r3,r17
 400c574:	10800044 	addi	r2,r2,1
 400c578:	d8c02015 	stw	r3,128(sp)
 400c57c:	44400115 	stw	r17,4(r8)
 400c580:	d8801f15 	stw	r2,124(sp)
 400c584:	00c001c4 	movi	r3,7
 400c588:	1880a716 	blt	r3,r2,400c828 <___vfprintf_internal_r+0x3d4>
 400c58c:	42000204 	addi	r8,r8,8
 400c590:	d9402f17 	ldw	r5,188(sp)
 400c594:	2c4b883a 	add	r5,r5,r17
 400c598:	d9402f15 	stw	r5,188(sp)
 400c59c:	80800007 	ldb	r2,0(r16)
 400c5a0:	1000a826 	beq	r2,zero,400c844 <___vfprintf_internal_r+0x3f0>
 400c5a4:	84400047 	ldb	r17,1(r16)
 400c5a8:	00bfffc4 	movi	r2,-1
 400c5ac:	85400044 	addi	r21,r16,1
 400c5b0:	d8002785 	stb	zero,158(sp)
 400c5b4:	0007883a 	mov	r3,zero
 400c5b8:	000f883a 	mov	r7,zero
 400c5bc:	d8802915 	stw	r2,164(sp)
 400c5c0:	d8003115 	stw	zero,196(sp)
 400c5c4:	0025883a 	mov	r18,zero
 400c5c8:	01401604 	movi	r5,88
 400c5cc:	01800244 	movi	r6,9
 400c5d0:	02800a84 	movi	r10,42
 400c5d4:	02401b04 	movi	r9,108
 400c5d8:	ad400044 	addi	r21,r21,1
 400c5dc:	88bff804 	addi	r2,r17,-32
 400c5e0:	28830436 	bltu	r5,r2,400d1f4 <___vfprintf_internal_r+0xda0>
 400c5e4:	100490ba 	slli	r2,r2,2
 400c5e8:	01010074 	movhi	r4,1025
 400c5ec:	21317f04 	addi	r4,r4,-14852
 400c5f0:	1105883a 	add	r2,r2,r4
 400c5f4:	10800017 	ldw	r2,0(r2)
 400c5f8:	1000683a 	jmp	r2
 400c5fc:	0400d114 	movui	r16,836
 400c600:	0400d1f4 	movhi	r16,839
 400c604:	0400d1f4 	movhi	r16,839
 400c608:	0400d134 	movhi	r16,836
 400c60c:	0400d1f4 	movhi	r16,839
 400c610:	0400d1f4 	movhi	r16,839
 400c614:	0400d1f4 	movhi	r16,839
 400c618:	0400d1f4 	movhi	r16,839
 400c61c:	0400d1f4 	movhi	r16,839
 400c620:	0400d1f4 	movhi	r16,839
 400c624:	0400c8a8 	cmpgeui	r16,zero,802
 400c628:	0400d050 	cmplti	r16,zero,833
 400c62c:	0400d1f4 	movhi	r16,839
 400c630:	0400c770 	cmpltui	r16,zero,797
 400c634:	0400c8d0 	cmplti	r16,zero,803
 400c638:	0400d1f4 	movhi	r16,839
 400c63c:	0400c910 	cmplti	r16,zero,804
 400c640:	0400c91c 	xori	r16,zero,804
 400c644:	0400c91c 	xori	r16,zero,804
 400c648:	0400c91c 	xori	r16,zero,804
 400c64c:	0400c91c 	xori	r16,zero,804
 400c650:	0400c91c 	xori	r16,zero,804
 400c654:	0400c91c 	xori	r16,zero,804
 400c658:	0400c91c 	xori	r16,zero,804
 400c65c:	0400c91c 	xori	r16,zero,804
 400c660:	0400c91c 	xori	r16,zero,804
 400c664:	0400d1f4 	movhi	r16,839
 400c668:	0400d1f4 	movhi	r16,839
 400c66c:	0400d1f4 	movhi	r16,839
 400c670:	0400d1f4 	movhi	r16,839
 400c674:	0400d1f4 	movhi	r16,839
 400c678:	0400d1f4 	movhi	r16,839
 400c67c:	0400d1f4 	movhi	r16,839
 400c680:	0400d1f4 	movhi	r16,839
 400c684:	0400d1f4 	movhi	r16,839
 400c688:	0400d1f4 	movhi	r16,839
 400c68c:	0400c950 	cmplti	r16,zero,805
 400c690:	0400ca0c 	andi	r16,zero,808
 400c694:	0400d1f4 	movhi	r16,839
 400c698:	0400ca0c 	andi	r16,zero,808
 400c69c:	0400d1f4 	movhi	r16,839
 400c6a0:	0400d1f4 	movhi	r16,839
 400c6a4:	0400d1f4 	movhi	r16,839
 400c6a8:	0400d1f4 	movhi	r16,839
 400c6ac:	0400caac 	andhi	r16,zero,810
 400c6b0:	0400d1f4 	movhi	r16,839
 400c6b4:	0400d1f4 	movhi	r16,839
 400c6b8:	0400cab8 	rdprs	r16,zero,810
 400c6bc:	0400d1f4 	movhi	r16,839
 400c6c0:	0400d1f4 	movhi	r16,839
 400c6c4:	0400d1f4 	movhi	r16,839
 400c6c8:	0400d1f4 	movhi	r16,839
 400c6cc:	0400d1f4 	movhi	r16,839
 400c6d0:	0400cf30 	cmpltui	r16,zero,828
 400c6d4:	0400d1f4 	movhi	r16,839
 400c6d8:	0400d1f4 	movhi	r16,839
 400c6dc:	0400cf90 	cmplti	r16,zero,830
 400c6e0:	0400d1f4 	movhi	r16,839
 400c6e4:	0400d1f4 	movhi	r16,839
 400c6e8:	0400d1f4 	movhi	r16,839
 400c6ec:	0400d1f4 	movhi	r16,839
 400c6f0:	0400d1f4 	movhi	r16,839
 400c6f4:	0400d1f4 	movhi	r16,839
 400c6f8:	0400d1f4 	movhi	r16,839
 400c6fc:	0400d1f4 	movhi	r16,839
 400c700:	0400d1f4 	movhi	r16,839
 400c704:	0400d1f4 	movhi	r16,839
 400c708:	0400d1a0 	cmpeqi	r16,zero,838
 400c70c:	0400d140 	call	400d14 <__reset-0x3bff2ec>
 400c710:	0400ca0c 	andi	r16,zero,808
 400c714:	0400ca0c 	andi	r16,zero,808
 400c718:	0400ca0c 	andi	r16,zero,808
 400c71c:	0400d150 	cmplti	r16,zero,837
 400c720:	0400d140 	call	400d14 <__reset-0x3bff2ec>
 400c724:	0400d1f4 	movhi	r16,839
 400c728:	0400d1f4 	movhi	r16,839
 400c72c:	0400d15c 	xori	r16,zero,837
 400c730:	0400d1f4 	movhi	r16,839
 400c734:	0400d16c 	andhi	r16,zero,837
 400c738:	0400d040 	call	400d04 <__reset-0x3bff2fc>
 400c73c:	0400c77c 	xorhi	r16,zero,797
 400c740:	0400d060 	cmpeqi	r16,zero,833
 400c744:	0400d1f4 	movhi	r16,839
 400c748:	0400d06c 	andhi	r16,zero,833
 400c74c:	0400d1f4 	movhi	r16,839
 400c750:	0400d0c8 	cmpgei	r16,zero,835
 400c754:	0400d1f4 	movhi	r16,839
 400c758:	0400d1f4 	movhi	r16,839
 400c75c:	0400d0d8 	cmpnei	r16,zero,835
 400c760:	d9003117 	ldw	r4,196(sp)
 400c764:	d8802d15 	stw	r2,180(sp)
 400c768:	0109c83a 	sub	r4,zero,r4
 400c76c:	d9003115 	stw	r4,196(sp)
 400c770:	94800114 	ori	r18,r18,4
 400c774:	ac400007 	ldb	r17,0(r21)
 400c778:	003f9706 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400c77c:	00800c04 	movi	r2,48
 400c780:	d9002d17 	ldw	r4,180(sp)
 400c784:	d9402917 	ldw	r5,164(sp)
 400c788:	d8802705 	stb	r2,156(sp)
 400c78c:	00801e04 	movi	r2,120
 400c790:	d8802745 	stb	r2,157(sp)
 400c794:	d8002785 	stb	zero,158(sp)
 400c798:	20c00104 	addi	r3,r4,4
 400c79c:	24c00017 	ldw	r19,0(r4)
 400c7a0:	002d883a 	mov	r22,zero
 400c7a4:	90800094 	ori	r2,r18,2
 400c7a8:	28029a16 	blt	r5,zero,400d214 <___vfprintf_internal_r+0xdc0>
 400c7ac:	00bfdfc4 	movi	r2,-129
 400c7b0:	90a4703a 	and	r18,r18,r2
 400c7b4:	d8c02d15 	stw	r3,180(sp)
 400c7b8:	94800094 	ori	r18,r18,2
 400c7bc:	9802871e 	bne	r19,zero,400d1dc <___vfprintf_internal_r+0xd88>
 400c7c0:	008100b4 	movhi	r2,1026
 400c7c4:	10b09d04 	addi	r2,r2,-15756
 400c7c8:	d8803915 	stw	r2,228(sp)
 400c7cc:	04401e04 	movi	r17,120
 400c7d0:	d8802917 	ldw	r2,164(sp)
 400c7d4:	0039883a 	mov	fp,zero
 400c7d8:	1001e926 	beq	r2,zero,400cf80 <___vfprintf_internal_r+0xb2c>
 400c7dc:	0027883a 	mov	r19,zero
 400c7e0:	002d883a 	mov	r22,zero
 400c7e4:	00020506 	br	400cffc <___vfprintf_internal_r+0xba8>
 400c7e8:	d9002c17 	ldw	r4,176(sp)
 400c7ec:	b80b883a 	mov	r5,r23
 400c7f0:	400e7240 	call	400e724 <__swsetup_r>
 400c7f4:	1005ac1e 	bne	r2,zero,400dea8 <___vfprintf_internal_r+0x1a54>
 400c7f8:	b880030b 	ldhu	r2,12(r23)
 400c7fc:	00c00284 	movi	r3,10
 400c800:	1080068c 	andi	r2,r2,26
 400c804:	10ff3c1e 	bne	r2,r3,400c4f8 <__alt_data_end+0xfc00c4f8>
 400c808:	b880038f 	ldh	r2,14(r23)
 400c80c:	103f3a16 	blt	r2,zero,400c4f8 <__alt_data_end+0xfc00c4f8>
 400c810:	d9c02d17 	ldw	r7,180(sp)
 400c814:	d9002c17 	ldw	r4,176(sp)
 400c818:	a80d883a 	mov	r6,r21
 400c81c:	b80b883a 	mov	r5,r23
 400c820:	400e6680 	call	400e668 <__sbprintf>
 400c824:	00001106 	br	400c86c <___vfprintf_internal_r+0x418>
 400c828:	d9002c17 	ldw	r4,176(sp)
 400c82c:	d9801e04 	addi	r6,sp,120
 400c830:	b80b883a 	mov	r5,r23
 400c834:	4012ea40 	call	4012ea4 <__sprint_r>
 400c838:	1000081e 	bne	r2,zero,400c85c <___vfprintf_internal_r+0x408>
 400c83c:	da000404 	addi	r8,sp,16
 400c840:	003f5306 	br	400c590 <__alt_data_end+0xfc00c590>
 400c844:	d8802017 	ldw	r2,128(sp)
 400c848:	10000426 	beq	r2,zero,400c85c <___vfprintf_internal_r+0x408>
 400c84c:	d9002c17 	ldw	r4,176(sp)
 400c850:	d9801e04 	addi	r6,sp,120
 400c854:	b80b883a 	mov	r5,r23
 400c858:	4012ea40 	call	4012ea4 <__sprint_r>
 400c85c:	b880030b 	ldhu	r2,12(r23)
 400c860:	1080100c 	andi	r2,r2,64
 400c864:	1005901e 	bne	r2,zero,400dea8 <___vfprintf_internal_r+0x1a54>
 400c868:	d8802f17 	ldw	r2,188(sp)
 400c86c:	dfc04717 	ldw	ra,284(sp)
 400c870:	df004617 	ldw	fp,280(sp)
 400c874:	ddc04517 	ldw	r23,276(sp)
 400c878:	dd804417 	ldw	r22,272(sp)
 400c87c:	dd404317 	ldw	r21,268(sp)
 400c880:	dd004217 	ldw	r20,264(sp)
 400c884:	dcc04117 	ldw	r19,260(sp)
 400c888:	dc804017 	ldw	r18,256(sp)
 400c88c:	dc403f17 	ldw	r17,252(sp)
 400c890:	dc003e17 	ldw	r16,248(sp)
 400c894:	dec04804 	addi	sp,sp,288
 400c898:	f800283a 	ret
 400c89c:	d9002c17 	ldw	r4,176(sp)
 400c8a0:	40106f80 	call	40106f8 <__sinit>
 400c8a4:	003f0406 	br	400c4b8 <__alt_data_end+0xfc00c4b8>
 400c8a8:	d8802d17 	ldw	r2,180(sp)
 400c8ac:	d9002d17 	ldw	r4,180(sp)
 400c8b0:	10800017 	ldw	r2,0(r2)
 400c8b4:	d8803115 	stw	r2,196(sp)
 400c8b8:	20800104 	addi	r2,r4,4
 400c8bc:	d9003117 	ldw	r4,196(sp)
 400c8c0:	203fa716 	blt	r4,zero,400c760 <__alt_data_end+0xfc00c760>
 400c8c4:	d8802d15 	stw	r2,180(sp)
 400c8c8:	ac400007 	ldb	r17,0(r21)
 400c8cc:	003f4206 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400c8d0:	ac400007 	ldb	r17,0(r21)
 400c8d4:	aac00044 	addi	r11,r21,1
 400c8d8:	8a872826 	beq	r17,r10,400e57c <___vfprintf_internal_r+0x2128>
 400c8dc:	88bff404 	addi	r2,r17,-48
 400c8e0:	0009883a 	mov	r4,zero
 400c8e4:	30867d36 	bltu	r6,r2,400e2dc <___vfprintf_internal_r+0x1e88>
 400c8e8:	5c400007 	ldb	r17,0(r11)
 400c8ec:	210002a4 	muli	r4,r4,10
 400c8f0:	5d400044 	addi	r21,r11,1
 400c8f4:	a817883a 	mov	r11,r21
 400c8f8:	2089883a 	add	r4,r4,r2
 400c8fc:	88bff404 	addi	r2,r17,-48
 400c900:	30bff92e 	bgeu	r6,r2,400c8e8 <__alt_data_end+0xfc00c8e8>
 400c904:	2005c916 	blt	r4,zero,400e02c <___vfprintf_internal_r+0x1bd8>
 400c908:	d9002915 	stw	r4,164(sp)
 400c90c:	003f3306 	br	400c5dc <__alt_data_end+0xfc00c5dc>
 400c910:	94802014 	ori	r18,r18,128
 400c914:	ac400007 	ldb	r17,0(r21)
 400c918:	003f2f06 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400c91c:	a809883a 	mov	r4,r21
 400c920:	d8003115 	stw	zero,196(sp)
 400c924:	88bff404 	addi	r2,r17,-48
 400c928:	0017883a 	mov	r11,zero
 400c92c:	24400007 	ldb	r17,0(r4)
 400c930:	5ac002a4 	muli	r11,r11,10
 400c934:	ad400044 	addi	r21,r21,1
 400c938:	a809883a 	mov	r4,r21
 400c93c:	12d7883a 	add	r11,r2,r11
 400c940:	88bff404 	addi	r2,r17,-48
 400c944:	30bff92e 	bgeu	r6,r2,400c92c <__alt_data_end+0xfc00c92c>
 400c948:	dac03115 	stw	r11,196(sp)
 400c94c:	003f2306 	br	400c5dc <__alt_data_end+0xfc00c5dc>
 400c950:	18c03fcc 	andi	r3,r3,255
 400c954:	18072b1e 	bne	r3,zero,400e604 <___vfprintf_internal_r+0x21b0>
 400c958:	94800414 	ori	r18,r18,16
 400c95c:	9080080c 	andi	r2,r18,32
 400c960:	10037b26 	beq	r2,zero,400d750 <___vfprintf_internal_r+0x12fc>
 400c964:	d9402d17 	ldw	r5,180(sp)
 400c968:	28800117 	ldw	r2,4(r5)
 400c96c:	2cc00017 	ldw	r19,0(r5)
 400c970:	29400204 	addi	r5,r5,8
 400c974:	d9402d15 	stw	r5,180(sp)
 400c978:	102d883a 	mov	r22,r2
 400c97c:	10044b16 	blt	r2,zero,400daac <___vfprintf_internal_r+0x1658>
 400c980:	d9402917 	ldw	r5,164(sp)
 400c984:	df002783 	ldbu	fp,158(sp)
 400c988:	2803bc16 	blt	r5,zero,400d87c <___vfprintf_internal_r+0x1428>
 400c98c:	00ffdfc4 	movi	r3,-129
 400c990:	9d84b03a 	or	r2,r19,r22
 400c994:	90e4703a 	and	r18,r18,r3
 400c998:	10017726 	beq	r2,zero,400cf78 <___vfprintf_internal_r+0xb24>
 400c99c:	b0038326 	beq	r22,zero,400d7ac <___vfprintf_internal_r+0x1358>
 400c9a0:	dc402a15 	stw	r17,168(sp)
 400c9a4:	dc001e04 	addi	r16,sp,120
 400c9a8:	b023883a 	mov	r17,r22
 400c9ac:	402d883a 	mov	r22,r8
 400c9b0:	9809883a 	mov	r4,r19
 400c9b4:	880b883a 	mov	r5,r17
 400c9b8:	01800284 	movi	r6,10
 400c9bc:	000f883a 	mov	r7,zero
 400c9c0:	401529c0 	call	401529c <__umoddi3>
 400c9c4:	10800c04 	addi	r2,r2,48
 400c9c8:	843fffc4 	addi	r16,r16,-1
 400c9cc:	9809883a 	mov	r4,r19
 400c9d0:	880b883a 	mov	r5,r17
 400c9d4:	80800005 	stb	r2,0(r16)
 400c9d8:	01800284 	movi	r6,10
 400c9dc:	000f883a 	mov	r7,zero
 400c9e0:	4014d240 	call	4014d24 <__udivdi3>
 400c9e4:	1027883a 	mov	r19,r2
 400c9e8:	10c4b03a 	or	r2,r2,r3
 400c9ec:	1823883a 	mov	r17,r3
 400c9f0:	103fef1e 	bne	r2,zero,400c9b0 <__alt_data_end+0xfc00c9b0>
 400c9f4:	d8c02817 	ldw	r3,160(sp)
 400c9f8:	dc402a17 	ldw	r17,168(sp)
 400c9fc:	b011883a 	mov	r8,r22
 400ca00:	1c07c83a 	sub	r3,r3,r16
 400ca04:	d8c02e15 	stw	r3,184(sp)
 400ca08:	00005906 	br	400cb70 <___vfprintf_internal_r+0x71c>
 400ca0c:	18c03fcc 	andi	r3,r3,255
 400ca10:	1806fa1e 	bne	r3,zero,400e5fc <___vfprintf_internal_r+0x21a8>
 400ca14:	9080020c 	andi	r2,r18,8
 400ca18:	10048a26 	beq	r2,zero,400dc44 <___vfprintf_internal_r+0x17f0>
 400ca1c:	d8c02d17 	ldw	r3,180(sp)
 400ca20:	d9002d17 	ldw	r4,180(sp)
 400ca24:	d9402d17 	ldw	r5,180(sp)
 400ca28:	18c00017 	ldw	r3,0(r3)
 400ca2c:	21000117 	ldw	r4,4(r4)
 400ca30:	29400204 	addi	r5,r5,8
 400ca34:	d8c03615 	stw	r3,216(sp)
 400ca38:	d9003815 	stw	r4,224(sp)
 400ca3c:	d9402d15 	stw	r5,180(sp)
 400ca40:	d9003617 	ldw	r4,216(sp)
 400ca44:	d9403817 	ldw	r5,224(sp)
 400ca48:	da003d15 	stw	r8,244(sp)
 400ca4c:	04000044 	movi	r16,1
 400ca50:	4012bf80 	call	4012bf8 <__fpclassifyd>
 400ca54:	da003d17 	ldw	r8,244(sp)
 400ca58:	14041f1e 	bne	r2,r16,400dad8 <___vfprintf_internal_r+0x1684>
 400ca5c:	d9003617 	ldw	r4,216(sp)
 400ca60:	d9403817 	ldw	r5,224(sp)
 400ca64:	000d883a 	mov	r6,zero
 400ca68:	000f883a 	mov	r7,zero
 400ca6c:	4016acc0 	call	4016acc <__ledf2>
 400ca70:	da003d17 	ldw	r8,244(sp)
 400ca74:	1005be16 	blt	r2,zero,400e170 <___vfprintf_internal_r+0x1d1c>
 400ca78:	df002783 	ldbu	fp,158(sp)
 400ca7c:	008011c4 	movi	r2,71
 400ca80:	1445330e 	bge	r2,r17,400df50 <___vfprintf_internal_r+0x1afc>
 400ca84:	040100b4 	movhi	r16,1026
 400ca88:	84309504 	addi	r16,r16,-15788
 400ca8c:	00c000c4 	movi	r3,3
 400ca90:	00bfdfc4 	movi	r2,-129
 400ca94:	d8c02a15 	stw	r3,168(sp)
 400ca98:	90a4703a 	and	r18,r18,r2
 400ca9c:	d8c02e15 	stw	r3,184(sp)
 400caa0:	d8002915 	stw	zero,164(sp)
 400caa4:	d8003215 	stw	zero,200(sp)
 400caa8:	00003706 	br	400cb88 <___vfprintf_internal_r+0x734>
 400caac:	94800214 	ori	r18,r18,8
 400cab0:	ac400007 	ldb	r17,0(r21)
 400cab4:	003ec806 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400cab8:	18c03fcc 	andi	r3,r3,255
 400cabc:	1806db1e 	bne	r3,zero,400e62c <___vfprintf_internal_r+0x21d8>
 400cac0:	94800414 	ori	r18,r18,16
 400cac4:	9080080c 	andi	r2,r18,32
 400cac8:	1002d826 	beq	r2,zero,400d62c <___vfprintf_internal_r+0x11d8>
 400cacc:	d9402d17 	ldw	r5,180(sp)
 400cad0:	d8c02917 	ldw	r3,164(sp)
 400cad4:	d8002785 	stb	zero,158(sp)
 400cad8:	28800204 	addi	r2,r5,8
 400cadc:	2cc00017 	ldw	r19,0(r5)
 400cae0:	2d800117 	ldw	r22,4(r5)
 400cae4:	18048f16 	blt	r3,zero,400dd24 <___vfprintf_internal_r+0x18d0>
 400cae8:	013fdfc4 	movi	r4,-129
 400caec:	9d86b03a 	or	r3,r19,r22
 400caf0:	d8802d15 	stw	r2,180(sp)
 400caf4:	9124703a 	and	r18,r18,r4
 400caf8:	1802d91e 	bne	r3,zero,400d660 <___vfprintf_internal_r+0x120c>
 400cafc:	d8c02917 	ldw	r3,164(sp)
 400cb00:	0039883a 	mov	fp,zero
 400cb04:	1805c326 	beq	r3,zero,400e214 <___vfprintf_internal_r+0x1dc0>
 400cb08:	0027883a 	mov	r19,zero
 400cb0c:	002d883a 	mov	r22,zero
 400cb10:	dc001e04 	addi	r16,sp,120
 400cb14:	9806d0fa 	srli	r3,r19,3
 400cb18:	b008977a 	slli	r4,r22,29
 400cb1c:	b02cd0fa 	srli	r22,r22,3
 400cb20:	9cc001cc 	andi	r19,r19,7
 400cb24:	98800c04 	addi	r2,r19,48
 400cb28:	843fffc4 	addi	r16,r16,-1
 400cb2c:	20e6b03a 	or	r19,r4,r3
 400cb30:	80800005 	stb	r2,0(r16)
 400cb34:	9d86b03a 	or	r3,r19,r22
 400cb38:	183ff61e 	bne	r3,zero,400cb14 <__alt_data_end+0xfc00cb14>
 400cb3c:	90c0004c 	andi	r3,r18,1
 400cb40:	18013b26 	beq	r3,zero,400d030 <___vfprintf_internal_r+0xbdc>
 400cb44:	10803fcc 	andi	r2,r2,255
 400cb48:	1080201c 	xori	r2,r2,128
 400cb4c:	10bfe004 	addi	r2,r2,-128
 400cb50:	00c00c04 	movi	r3,48
 400cb54:	10c13626 	beq	r2,r3,400d030 <___vfprintf_internal_r+0xbdc>
 400cb58:	80ffffc5 	stb	r3,-1(r16)
 400cb5c:	d8c02817 	ldw	r3,160(sp)
 400cb60:	80bfffc4 	addi	r2,r16,-1
 400cb64:	1021883a 	mov	r16,r2
 400cb68:	1887c83a 	sub	r3,r3,r2
 400cb6c:	d8c02e15 	stw	r3,184(sp)
 400cb70:	d8802e17 	ldw	r2,184(sp)
 400cb74:	d9002917 	ldw	r4,164(sp)
 400cb78:	1100010e 	bge	r2,r4,400cb80 <___vfprintf_internal_r+0x72c>
 400cb7c:	2005883a 	mov	r2,r4
 400cb80:	d8802a15 	stw	r2,168(sp)
 400cb84:	d8003215 	stw	zero,200(sp)
 400cb88:	e7003fcc 	andi	fp,fp,255
 400cb8c:	e700201c 	xori	fp,fp,128
 400cb90:	e73fe004 	addi	fp,fp,-128
 400cb94:	e0000326 	beq	fp,zero,400cba4 <___vfprintf_internal_r+0x750>
 400cb98:	d8c02a17 	ldw	r3,168(sp)
 400cb9c:	18c00044 	addi	r3,r3,1
 400cba0:	d8c02a15 	stw	r3,168(sp)
 400cba4:	90c0008c 	andi	r3,r18,2
 400cba8:	d8c02b15 	stw	r3,172(sp)
 400cbac:	18000326 	beq	r3,zero,400cbbc <___vfprintf_internal_r+0x768>
 400cbb0:	d8c02a17 	ldw	r3,168(sp)
 400cbb4:	18c00084 	addi	r3,r3,2
 400cbb8:	d8c02a15 	stw	r3,168(sp)
 400cbbc:	90c0210c 	andi	r3,r18,132
 400cbc0:	d8c03015 	stw	r3,192(sp)
 400cbc4:	1801a31e 	bne	r3,zero,400d254 <___vfprintf_internal_r+0xe00>
 400cbc8:	d9003117 	ldw	r4,196(sp)
 400cbcc:	d8c02a17 	ldw	r3,168(sp)
 400cbd0:	20e7c83a 	sub	r19,r4,r3
 400cbd4:	04c19f0e 	bge	zero,r19,400d254 <___vfprintf_internal_r+0xe00>
 400cbd8:	02400404 	movi	r9,16
 400cbdc:	d8c02017 	ldw	r3,128(sp)
 400cbe0:	d8801f17 	ldw	r2,124(sp)
 400cbe4:	4cc50d0e 	bge	r9,r19,400e01c <___vfprintf_internal_r+0x1bc8>
 400cbe8:	014100b4 	movhi	r5,1026
 400cbec:	2970a884 	addi	r5,r5,-15710
 400cbf0:	dc403b15 	stw	r17,236(sp)
 400cbf4:	d9403515 	stw	r5,212(sp)
 400cbf8:	9823883a 	mov	r17,r19
 400cbfc:	482d883a 	mov	r22,r9
 400cc00:	9027883a 	mov	r19,r18
 400cc04:	070001c4 	movi	fp,7
 400cc08:	8025883a 	mov	r18,r16
 400cc0c:	dc002c17 	ldw	r16,176(sp)
 400cc10:	00000306 	br	400cc20 <___vfprintf_internal_r+0x7cc>
 400cc14:	8c7ffc04 	addi	r17,r17,-16
 400cc18:	42000204 	addi	r8,r8,8
 400cc1c:	b440130e 	bge	r22,r17,400cc6c <___vfprintf_internal_r+0x818>
 400cc20:	010100b4 	movhi	r4,1026
 400cc24:	18c00404 	addi	r3,r3,16
 400cc28:	10800044 	addi	r2,r2,1
 400cc2c:	2130a884 	addi	r4,r4,-15710
 400cc30:	41000015 	stw	r4,0(r8)
 400cc34:	45800115 	stw	r22,4(r8)
 400cc38:	d8c02015 	stw	r3,128(sp)
 400cc3c:	d8801f15 	stw	r2,124(sp)
 400cc40:	e0bff40e 	bge	fp,r2,400cc14 <__alt_data_end+0xfc00cc14>
 400cc44:	d9801e04 	addi	r6,sp,120
 400cc48:	b80b883a 	mov	r5,r23
 400cc4c:	8009883a 	mov	r4,r16
 400cc50:	4012ea40 	call	4012ea4 <__sprint_r>
 400cc54:	103f011e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400cc58:	8c7ffc04 	addi	r17,r17,-16
 400cc5c:	d8c02017 	ldw	r3,128(sp)
 400cc60:	d8801f17 	ldw	r2,124(sp)
 400cc64:	da000404 	addi	r8,sp,16
 400cc68:	b47fed16 	blt	r22,r17,400cc20 <__alt_data_end+0xfc00cc20>
 400cc6c:	9021883a 	mov	r16,r18
 400cc70:	9825883a 	mov	r18,r19
 400cc74:	8827883a 	mov	r19,r17
 400cc78:	dc403b17 	ldw	r17,236(sp)
 400cc7c:	d9403517 	ldw	r5,212(sp)
 400cc80:	98c7883a 	add	r3,r19,r3
 400cc84:	10800044 	addi	r2,r2,1
 400cc88:	41400015 	stw	r5,0(r8)
 400cc8c:	44c00115 	stw	r19,4(r8)
 400cc90:	d8c02015 	stw	r3,128(sp)
 400cc94:	d8801f15 	stw	r2,124(sp)
 400cc98:	010001c4 	movi	r4,7
 400cc9c:	2082a316 	blt	r4,r2,400d72c <___vfprintf_internal_r+0x12d8>
 400cca0:	df002787 	ldb	fp,158(sp)
 400cca4:	42000204 	addi	r8,r8,8
 400cca8:	e0000c26 	beq	fp,zero,400ccdc <___vfprintf_internal_r+0x888>
 400ccac:	d8801f17 	ldw	r2,124(sp)
 400ccb0:	d9002784 	addi	r4,sp,158
 400ccb4:	18c00044 	addi	r3,r3,1
 400ccb8:	10800044 	addi	r2,r2,1
 400ccbc:	41000015 	stw	r4,0(r8)
 400ccc0:	01000044 	movi	r4,1
 400ccc4:	41000115 	stw	r4,4(r8)
 400ccc8:	d8c02015 	stw	r3,128(sp)
 400cccc:	d8801f15 	stw	r2,124(sp)
 400ccd0:	010001c4 	movi	r4,7
 400ccd4:	20823c16 	blt	r4,r2,400d5c8 <___vfprintf_internal_r+0x1174>
 400ccd8:	42000204 	addi	r8,r8,8
 400ccdc:	d8802b17 	ldw	r2,172(sp)
 400cce0:	10000c26 	beq	r2,zero,400cd14 <___vfprintf_internal_r+0x8c0>
 400cce4:	d8801f17 	ldw	r2,124(sp)
 400cce8:	d9002704 	addi	r4,sp,156
 400ccec:	18c00084 	addi	r3,r3,2
 400ccf0:	10800044 	addi	r2,r2,1
 400ccf4:	41000015 	stw	r4,0(r8)
 400ccf8:	01000084 	movi	r4,2
 400ccfc:	41000115 	stw	r4,4(r8)
 400cd00:	d8c02015 	stw	r3,128(sp)
 400cd04:	d8801f15 	stw	r2,124(sp)
 400cd08:	010001c4 	movi	r4,7
 400cd0c:	20823616 	blt	r4,r2,400d5e8 <___vfprintf_internal_r+0x1194>
 400cd10:	42000204 	addi	r8,r8,8
 400cd14:	d9003017 	ldw	r4,192(sp)
 400cd18:	00802004 	movi	r2,128
 400cd1c:	20819926 	beq	r4,r2,400d384 <___vfprintf_internal_r+0xf30>
 400cd20:	d9402917 	ldw	r5,164(sp)
 400cd24:	d8802e17 	ldw	r2,184(sp)
 400cd28:	28adc83a 	sub	r22,r5,r2
 400cd2c:	0580310e 	bge	zero,r22,400cdf4 <___vfprintf_internal_r+0x9a0>
 400cd30:	07000404 	movi	fp,16
 400cd34:	d8801f17 	ldw	r2,124(sp)
 400cd38:	e584140e 	bge	fp,r22,400dd8c <___vfprintf_internal_r+0x1938>
 400cd3c:	014100b4 	movhi	r5,1026
 400cd40:	2970a484 	addi	r5,r5,-15726
 400cd44:	dc402915 	stw	r17,164(sp)
 400cd48:	d9402b15 	stw	r5,172(sp)
 400cd4c:	b023883a 	mov	r17,r22
 400cd50:	04c001c4 	movi	r19,7
 400cd54:	a82d883a 	mov	r22,r21
 400cd58:	902b883a 	mov	r21,r18
 400cd5c:	8025883a 	mov	r18,r16
 400cd60:	dc002c17 	ldw	r16,176(sp)
 400cd64:	00000306 	br	400cd74 <___vfprintf_internal_r+0x920>
 400cd68:	8c7ffc04 	addi	r17,r17,-16
 400cd6c:	42000204 	addi	r8,r8,8
 400cd70:	e440110e 	bge	fp,r17,400cdb8 <___vfprintf_internal_r+0x964>
 400cd74:	18c00404 	addi	r3,r3,16
 400cd78:	10800044 	addi	r2,r2,1
 400cd7c:	45000015 	stw	r20,0(r8)
 400cd80:	47000115 	stw	fp,4(r8)
 400cd84:	d8c02015 	stw	r3,128(sp)
 400cd88:	d8801f15 	stw	r2,124(sp)
 400cd8c:	98bff60e 	bge	r19,r2,400cd68 <__alt_data_end+0xfc00cd68>
 400cd90:	d9801e04 	addi	r6,sp,120
 400cd94:	b80b883a 	mov	r5,r23
 400cd98:	8009883a 	mov	r4,r16
 400cd9c:	4012ea40 	call	4012ea4 <__sprint_r>
 400cda0:	103eae1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400cda4:	8c7ffc04 	addi	r17,r17,-16
 400cda8:	d8c02017 	ldw	r3,128(sp)
 400cdac:	d8801f17 	ldw	r2,124(sp)
 400cdb0:	da000404 	addi	r8,sp,16
 400cdb4:	e47fef16 	blt	fp,r17,400cd74 <__alt_data_end+0xfc00cd74>
 400cdb8:	9021883a 	mov	r16,r18
 400cdbc:	a825883a 	mov	r18,r21
 400cdc0:	b02b883a 	mov	r21,r22
 400cdc4:	882d883a 	mov	r22,r17
 400cdc8:	dc402917 	ldw	r17,164(sp)
 400cdcc:	d9002b17 	ldw	r4,172(sp)
 400cdd0:	1d87883a 	add	r3,r3,r22
 400cdd4:	10800044 	addi	r2,r2,1
 400cdd8:	41000015 	stw	r4,0(r8)
 400cddc:	45800115 	stw	r22,4(r8)
 400cde0:	d8c02015 	stw	r3,128(sp)
 400cde4:	d8801f15 	stw	r2,124(sp)
 400cde8:	010001c4 	movi	r4,7
 400cdec:	2081ee16 	blt	r4,r2,400d5a8 <___vfprintf_internal_r+0x1154>
 400cdf0:	42000204 	addi	r8,r8,8
 400cdf4:	9080400c 	andi	r2,r18,256
 400cdf8:	1001181e 	bne	r2,zero,400d25c <___vfprintf_internal_r+0xe08>
 400cdfc:	d9402e17 	ldw	r5,184(sp)
 400ce00:	d8801f17 	ldw	r2,124(sp)
 400ce04:	44000015 	stw	r16,0(r8)
 400ce08:	1947883a 	add	r3,r3,r5
 400ce0c:	10800044 	addi	r2,r2,1
 400ce10:	41400115 	stw	r5,4(r8)
 400ce14:	d8c02015 	stw	r3,128(sp)
 400ce18:	d8801f15 	stw	r2,124(sp)
 400ce1c:	010001c4 	movi	r4,7
 400ce20:	2081d316 	blt	r4,r2,400d570 <___vfprintf_internal_r+0x111c>
 400ce24:	42000204 	addi	r8,r8,8
 400ce28:	9480010c 	andi	r18,r18,4
 400ce2c:	90003226 	beq	r18,zero,400cef8 <___vfprintf_internal_r+0xaa4>
 400ce30:	d9403117 	ldw	r5,196(sp)
 400ce34:	d8802a17 	ldw	r2,168(sp)
 400ce38:	28a1c83a 	sub	r16,r5,r2
 400ce3c:	04002e0e 	bge	zero,r16,400cef8 <___vfprintf_internal_r+0xaa4>
 400ce40:	04400404 	movi	r17,16
 400ce44:	d8801f17 	ldw	r2,124(sp)
 400ce48:	8c04a20e 	bge	r17,r16,400e0d4 <___vfprintf_internal_r+0x1c80>
 400ce4c:	014100b4 	movhi	r5,1026
 400ce50:	2970a884 	addi	r5,r5,-15710
 400ce54:	d9403515 	stw	r5,212(sp)
 400ce58:	048001c4 	movi	r18,7
 400ce5c:	dcc02c17 	ldw	r19,176(sp)
 400ce60:	00000306 	br	400ce70 <___vfprintf_internal_r+0xa1c>
 400ce64:	843ffc04 	addi	r16,r16,-16
 400ce68:	42000204 	addi	r8,r8,8
 400ce6c:	8c00130e 	bge	r17,r16,400cebc <___vfprintf_internal_r+0xa68>
 400ce70:	010100b4 	movhi	r4,1026
 400ce74:	18c00404 	addi	r3,r3,16
 400ce78:	10800044 	addi	r2,r2,1
 400ce7c:	2130a884 	addi	r4,r4,-15710
 400ce80:	41000015 	stw	r4,0(r8)
 400ce84:	44400115 	stw	r17,4(r8)
 400ce88:	d8c02015 	stw	r3,128(sp)
 400ce8c:	d8801f15 	stw	r2,124(sp)
 400ce90:	90bff40e 	bge	r18,r2,400ce64 <__alt_data_end+0xfc00ce64>
 400ce94:	d9801e04 	addi	r6,sp,120
 400ce98:	b80b883a 	mov	r5,r23
 400ce9c:	9809883a 	mov	r4,r19
 400cea0:	4012ea40 	call	4012ea4 <__sprint_r>
 400cea4:	103e6d1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400cea8:	843ffc04 	addi	r16,r16,-16
 400ceac:	d8c02017 	ldw	r3,128(sp)
 400ceb0:	d8801f17 	ldw	r2,124(sp)
 400ceb4:	da000404 	addi	r8,sp,16
 400ceb8:	8c3fed16 	blt	r17,r16,400ce70 <__alt_data_end+0xfc00ce70>
 400cebc:	d9403517 	ldw	r5,212(sp)
 400cec0:	1c07883a 	add	r3,r3,r16
 400cec4:	10800044 	addi	r2,r2,1
 400cec8:	41400015 	stw	r5,0(r8)
 400cecc:	44000115 	stw	r16,4(r8)
 400ced0:	d8c02015 	stw	r3,128(sp)
 400ced4:	d8801f15 	stw	r2,124(sp)
 400ced8:	010001c4 	movi	r4,7
 400cedc:	2080060e 	bge	r4,r2,400cef8 <___vfprintf_internal_r+0xaa4>
 400cee0:	d9002c17 	ldw	r4,176(sp)
 400cee4:	d9801e04 	addi	r6,sp,120
 400cee8:	b80b883a 	mov	r5,r23
 400ceec:	4012ea40 	call	4012ea4 <__sprint_r>
 400cef0:	103e5a1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400cef4:	d8c02017 	ldw	r3,128(sp)
 400cef8:	d8803117 	ldw	r2,196(sp)
 400cefc:	d9002a17 	ldw	r4,168(sp)
 400cf00:	1100010e 	bge	r2,r4,400cf08 <___vfprintf_internal_r+0xab4>
 400cf04:	2005883a 	mov	r2,r4
 400cf08:	d9402f17 	ldw	r5,188(sp)
 400cf0c:	288b883a 	add	r5,r5,r2
 400cf10:	d9402f15 	stw	r5,188(sp)
 400cf14:	18019e1e 	bne	r3,zero,400d590 <___vfprintf_internal_r+0x113c>
 400cf18:	a8800007 	ldb	r2,0(r21)
 400cf1c:	d8001f15 	stw	zero,124(sp)
 400cf20:	da000404 	addi	r8,sp,16
 400cf24:	103d851e 	bne	r2,zero,400c53c <__alt_data_end+0xfc00c53c>
 400cf28:	a821883a 	mov	r16,r21
 400cf2c:	003d9b06 	br	400c59c <__alt_data_end+0xfc00c59c>
 400cf30:	18c03fcc 	andi	r3,r3,255
 400cf34:	1805c11e 	bne	r3,zero,400e63c <___vfprintf_internal_r+0x21e8>
 400cf38:	94800414 	ori	r18,r18,16
 400cf3c:	9080080c 	andi	r2,r18,32
 400cf40:	10020c26 	beq	r2,zero,400d774 <___vfprintf_internal_r+0x1320>
 400cf44:	d8802d17 	ldw	r2,180(sp)
 400cf48:	d9002917 	ldw	r4,164(sp)
 400cf4c:	d8002785 	stb	zero,158(sp)
 400cf50:	10c00204 	addi	r3,r2,8
 400cf54:	14c00017 	ldw	r19,0(r2)
 400cf58:	15800117 	ldw	r22,4(r2)
 400cf5c:	20040f16 	blt	r4,zero,400df9c <___vfprintf_internal_r+0x1b48>
 400cf60:	013fdfc4 	movi	r4,-129
 400cf64:	9d84b03a 	or	r2,r19,r22
 400cf68:	d8c02d15 	stw	r3,180(sp)
 400cf6c:	9124703a 	and	r18,r18,r4
 400cf70:	0039883a 	mov	fp,zero
 400cf74:	103e891e 	bne	r2,zero,400c99c <__alt_data_end+0xfc00c99c>
 400cf78:	d9002917 	ldw	r4,164(sp)
 400cf7c:	2002c11e 	bne	r4,zero,400da84 <___vfprintf_internal_r+0x1630>
 400cf80:	d8002915 	stw	zero,164(sp)
 400cf84:	d8002e15 	stw	zero,184(sp)
 400cf88:	dc001e04 	addi	r16,sp,120
 400cf8c:	003ef806 	br	400cb70 <__alt_data_end+0xfc00cb70>
 400cf90:	18c03fcc 	andi	r3,r3,255
 400cf94:	18059d1e 	bne	r3,zero,400e60c <___vfprintf_internal_r+0x21b8>
 400cf98:	014100b4 	movhi	r5,1026
 400cf9c:	29709804 	addi	r5,r5,-15776
 400cfa0:	d9403915 	stw	r5,228(sp)
 400cfa4:	9080080c 	andi	r2,r18,32
 400cfa8:	10005226 	beq	r2,zero,400d0f4 <___vfprintf_internal_r+0xca0>
 400cfac:	d8802d17 	ldw	r2,180(sp)
 400cfb0:	14c00017 	ldw	r19,0(r2)
 400cfb4:	15800117 	ldw	r22,4(r2)
 400cfb8:	10800204 	addi	r2,r2,8
 400cfbc:	d8802d15 	stw	r2,180(sp)
 400cfc0:	9080004c 	andi	r2,r18,1
 400cfc4:	10019026 	beq	r2,zero,400d608 <___vfprintf_internal_r+0x11b4>
 400cfc8:	9d84b03a 	or	r2,r19,r22
 400cfcc:	10036926 	beq	r2,zero,400dd74 <___vfprintf_internal_r+0x1920>
 400cfd0:	d8c02917 	ldw	r3,164(sp)
 400cfd4:	00800c04 	movi	r2,48
 400cfd8:	d8802705 	stb	r2,156(sp)
 400cfdc:	dc402745 	stb	r17,157(sp)
 400cfe0:	d8002785 	stb	zero,158(sp)
 400cfe4:	90800094 	ori	r2,r18,2
 400cfe8:	18045d16 	blt	r3,zero,400e160 <___vfprintf_internal_r+0x1d0c>
 400cfec:	00bfdfc4 	movi	r2,-129
 400cff0:	90a4703a 	and	r18,r18,r2
 400cff4:	94800094 	ori	r18,r18,2
 400cff8:	0039883a 	mov	fp,zero
 400cffc:	d9003917 	ldw	r4,228(sp)
 400d000:	dc001e04 	addi	r16,sp,120
 400d004:	988003cc 	andi	r2,r19,15
 400d008:	b006973a 	slli	r3,r22,28
 400d00c:	2085883a 	add	r2,r4,r2
 400d010:	9826d13a 	srli	r19,r19,4
 400d014:	10800003 	ldbu	r2,0(r2)
 400d018:	b02cd13a 	srli	r22,r22,4
 400d01c:	843fffc4 	addi	r16,r16,-1
 400d020:	1ce6b03a 	or	r19,r3,r19
 400d024:	80800005 	stb	r2,0(r16)
 400d028:	9d84b03a 	or	r2,r19,r22
 400d02c:	103ff51e 	bne	r2,zero,400d004 <__alt_data_end+0xfc00d004>
 400d030:	d8c02817 	ldw	r3,160(sp)
 400d034:	1c07c83a 	sub	r3,r3,r16
 400d038:	d8c02e15 	stw	r3,184(sp)
 400d03c:	003ecc06 	br	400cb70 <__alt_data_end+0xfc00cb70>
 400d040:	18c03fcc 	andi	r3,r3,255
 400d044:	183e9f26 	beq	r3,zero,400cac4 <__alt_data_end+0xfc00cac4>
 400d048:	d9c02785 	stb	r7,158(sp)
 400d04c:	003e9d06 	br	400cac4 <__alt_data_end+0xfc00cac4>
 400d050:	00c00044 	movi	r3,1
 400d054:	01c00ac4 	movi	r7,43
 400d058:	ac400007 	ldb	r17,0(r21)
 400d05c:	003d5e06 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400d060:	94800814 	ori	r18,r18,32
 400d064:	ac400007 	ldb	r17,0(r21)
 400d068:	003d5b06 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400d06c:	d8c02d17 	ldw	r3,180(sp)
 400d070:	d8002785 	stb	zero,158(sp)
 400d074:	1c000017 	ldw	r16,0(r3)
 400d078:	1cc00104 	addi	r19,r3,4
 400d07c:	80041926 	beq	r16,zero,400e0e4 <___vfprintf_internal_r+0x1c90>
 400d080:	d9002917 	ldw	r4,164(sp)
 400d084:	2003d016 	blt	r4,zero,400dfc8 <___vfprintf_internal_r+0x1b74>
 400d088:	200d883a 	mov	r6,r4
 400d08c:	000b883a 	mov	r5,zero
 400d090:	8009883a 	mov	r4,r16
 400d094:	da003d15 	stw	r8,244(sp)
 400d098:	40114580 	call	4011458 <memchr>
 400d09c:	da003d17 	ldw	r8,244(sp)
 400d0a0:	10045426 	beq	r2,zero,400e1f4 <___vfprintf_internal_r+0x1da0>
 400d0a4:	1405c83a 	sub	r2,r2,r16
 400d0a8:	d8802e15 	stw	r2,184(sp)
 400d0ac:	1003cc16 	blt	r2,zero,400dfe0 <___vfprintf_internal_r+0x1b8c>
 400d0b0:	df002783 	ldbu	fp,158(sp)
 400d0b4:	d8802a15 	stw	r2,168(sp)
 400d0b8:	dcc02d15 	stw	r19,180(sp)
 400d0bc:	d8002915 	stw	zero,164(sp)
 400d0c0:	d8003215 	stw	zero,200(sp)
 400d0c4:	003eb006 	br	400cb88 <__alt_data_end+0xfc00cb88>
 400d0c8:	18c03fcc 	andi	r3,r3,255
 400d0cc:	183f9b26 	beq	r3,zero,400cf3c <__alt_data_end+0xfc00cf3c>
 400d0d0:	d9c02785 	stb	r7,158(sp)
 400d0d4:	003f9906 	br	400cf3c <__alt_data_end+0xfc00cf3c>
 400d0d8:	18c03fcc 	andi	r3,r3,255
 400d0dc:	1805551e 	bne	r3,zero,400e634 <___vfprintf_internal_r+0x21e0>
 400d0e0:	014100b4 	movhi	r5,1026
 400d0e4:	29709d04 	addi	r5,r5,-15756
 400d0e8:	d9403915 	stw	r5,228(sp)
 400d0ec:	9080080c 	andi	r2,r18,32
 400d0f0:	103fae1e 	bne	r2,zero,400cfac <__alt_data_end+0xfc00cfac>
 400d0f4:	9080040c 	andi	r2,r18,16
 400d0f8:	1002de26 	beq	r2,zero,400dc74 <___vfprintf_internal_r+0x1820>
 400d0fc:	d8c02d17 	ldw	r3,180(sp)
 400d100:	002d883a 	mov	r22,zero
 400d104:	1cc00017 	ldw	r19,0(r3)
 400d108:	18c00104 	addi	r3,r3,4
 400d10c:	d8c02d15 	stw	r3,180(sp)
 400d110:	003fab06 	br	400cfc0 <__alt_data_end+0xfc00cfc0>
 400d114:	38803fcc 	andi	r2,r7,255
 400d118:	1080201c 	xori	r2,r2,128
 400d11c:	10bfe004 	addi	r2,r2,-128
 400d120:	1002d21e 	bne	r2,zero,400dc6c <___vfprintf_internal_r+0x1818>
 400d124:	00c00044 	movi	r3,1
 400d128:	01c00804 	movi	r7,32
 400d12c:	ac400007 	ldb	r17,0(r21)
 400d130:	003d2906 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400d134:	94800054 	ori	r18,r18,1
 400d138:	ac400007 	ldb	r17,0(r21)
 400d13c:	003d2606 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400d140:	18c03fcc 	andi	r3,r3,255
 400d144:	183e0526 	beq	r3,zero,400c95c <__alt_data_end+0xfc00c95c>
 400d148:	d9c02785 	stb	r7,158(sp)
 400d14c:	003e0306 	br	400c95c <__alt_data_end+0xfc00c95c>
 400d150:	94801014 	ori	r18,r18,64
 400d154:	ac400007 	ldb	r17,0(r21)
 400d158:	003d1f06 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400d15c:	ac400007 	ldb	r17,0(r21)
 400d160:	8a438726 	beq	r17,r9,400df80 <___vfprintf_internal_r+0x1b2c>
 400d164:	94800414 	ori	r18,r18,16
 400d168:	003d1b06 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400d16c:	18c03fcc 	andi	r3,r3,255
 400d170:	1805341e 	bne	r3,zero,400e644 <___vfprintf_internal_r+0x21f0>
 400d174:	9080080c 	andi	r2,r18,32
 400d178:	1002cd26 	beq	r2,zero,400dcb0 <___vfprintf_internal_r+0x185c>
 400d17c:	d9402d17 	ldw	r5,180(sp)
 400d180:	d9002f17 	ldw	r4,188(sp)
 400d184:	28800017 	ldw	r2,0(r5)
 400d188:	2007d7fa 	srai	r3,r4,31
 400d18c:	29400104 	addi	r5,r5,4
 400d190:	d9402d15 	stw	r5,180(sp)
 400d194:	11000015 	stw	r4,0(r2)
 400d198:	10c00115 	stw	r3,4(r2)
 400d19c:	003ce506 	br	400c534 <__alt_data_end+0xfc00c534>
 400d1a0:	d8c02d17 	ldw	r3,180(sp)
 400d1a4:	d9002d17 	ldw	r4,180(sp)
 400d1a8:	d8002785 	stb	zero,158(sp)
 400d1ac:	18800017 	ldw	r2,0(r3)
 400d1b0:	21000104 	addi	r4,r4,4
 400d1b4:	00c00044 	movi	r3,1
 400d1b8:	d8c02a15 	stw	r3,168(sp)
 400d1bc:	d8801405 	stb	r2,80(sp)
 400d1c0:	d9002d15 	stw	r4,180(sp)
 400d1c4:	d8c02e15 	stw	r3,184(sp)
 400d1c8:	d8002915 	stw	zero,164(sp)
 400d1cc:	d8003215 	stw	zero,200(sp)
 400d1d0:	dc001404 	addi	r16,sp,80
 400d1d4:	0039883a 	mov	fp,zero
 400d1d8:	003e7206 	br	400cba4 <__alt_data_end+0xfc00cba4>
 400d1dc:	010100b4 	movhi	r4,1026
 400d1e0:	21309d04 	addi	r4,r4,-15756
 400d1e4:	0039883a 	mov	fp,zero
 400d1e8:	d9003915 	stw	r4,228(sp)
 400d1ec:	04401e04 	movi	r17,120
 400d1f0:	003f8206 	br	400cffc <__alt_data_end+0xfc00cffc>
 400d1f4:	18c03fcc 	andi	r3,r3,255
 400d1f8:	1805061e 	bne	r3,zero,400e614 <___vfprintf_internal_r+0x21c0>
 400d1fc:	883d9126 	beq	r17,zero,400c844 <__alt_data_end+0xfc00c844>
 400d200:	00c00044 	movi	r3,1
 400d204:	d8c02a15 	stw	r3,168(sp)
 400d208:	dc401405 	stb	r17,80(sp)
 400d20c:	d8002785 	stb	zero,158(sp)
 400d210:	003fec06 	br	400d1c4 <__alt_data_end+0xfc00d1c4>
 400d214:	014100b4 	movhi	r5,1026
 400d218:	29709d04 	addi	r5,r5,-15756
 400d21c:	d9403915 	stw	r5,228(sp)
 400d220:	d8c02d15 	stw	r3,180(sp)
 400d224:	1025883a 	mov	r18,r2
 400d228:	04401e04 	movi	r17,120
 400d22c:	9d84b03a 	or	r2,r19,r22
 400d230:	1000fc1e 	bne	r2,zero,400d624 <___vfprintf_internal_r+0x11d0>
 400d234:	0039883a 	mov	fp,zero
 400d238:	00800084 	movi	r2,2
 400d23c:	10803fcc 	andi	r2,r2,255
 400d240:	00c00044 	movi	r3,1
 400d244:	10c20f26 	beq	r2,r3,400da84 <___vfprintf_internal_r+0x1630>
 400d248:	00c00084 	movi	r3,2
 400d24c:	10fd6326 	beq	r2,r3,400c7dc <__alt_data_end+0xfc00c7dc>
 400d250:	003e2d06 	br	400cb08 <__alt_data_end+0xfc00cb08>
 400d254:	d8c02017 	ldw	r3,128(sp)
 400d258:	003e9306 	br	400cca8 <__alt_data_end+0xfc00cca8>
 400d25c:	00801944 	movi	r2,101
 400d260:	14407e0e 	bge	r2,r17,400d45c <___vfprintf_internal_r+0x1008>
 400d264:	d9003617 	ldw	r4,216(sp)
 400d268:	d9403817 	ldw	r5,224(sp)
 400d26c:	000d883a 	mov	r6,zero
 400d270:	000f883a 	mov	r7,zero
 400d274:	d8c03c15 	stw	r3,240(sp)
 400d278:	da003d15 	stw	r8,244(sp)
 400d27c:	40169680 	call	4016968 <__eqdf2>
 400d280:	d8c03c17 	ldw	r3,240(sp)
 400d284:	da003d17 	ldw	r8,244(sp)
 400d288:	1000f71e 	bne	r2,zero,400d668 <___vfprintf_internal_r+0x1214>
 400d28c:	d8801f17 	ldw	r2,124(sp)
 400d290:	010100b4 	movhi	r4,1026
 400d294:	2130a404 	addi	r4,r4,-15728
 400d298:	18c00044 	addi	r3,r3,1
 400d29c:	10800044 	addi	r2,r2,1
 400d2a0:	41000015 	stw	r4,0(r8)
 400d2a4:	01000044 	movi	r4,1
 400d2a8:	41000115 	stw	r4,4(r8)
 400d2ac:	d8c02015 	stw	r3,128(sp)
 400d2b0:	d8801f15 	stw	r2,124(sp)
 400d2b4:	010001c4 	movi	r4,7
 400d2b8:	2082b816 	blt	r4,r2,400dd9c <___vfprintf_internal_r+0x1948>
 400d2bc:	42000204 	addi	r8,r8,8
 400d2c0:	d8802617 	ldw	r2,152(sp)
 400d2c4:	d9403317 	ldw	r5,204(sp)
 400d2c8:	11400216 	blt	r2,r5,400d2d4 <___vfprintf_internal_r+0xe80>
 400d2cc:	9080004c 	andi	r2,r18,1
 400d2d0:	103ed526 	beq	r2,zero,400ce28 <__alt_data_end+0xfc00ce28>
 400d2d4:	d8803717 	ldw	r2,220(sp)
 400d2d8:	d9003417 	ldw	r4,208(sp)
 400d2dc:	d9403717 	ldw	r5,220(sp)
 400d2e0:	1887883a 	add	r3,r3,r2
 400d2e4:	d8801f17 	ldw	r2,124(sp)
 400d2e8:	41000015 	stw	r4,0(r8)
 400d2ec:	41400115 	stw	r5,4(r8)
 400d2f0:	10800044 	addi	r2,r2,1
 400d2f4:	d8c02015 	stw	r3,128(sp)
 400d2f8:	d8801f15 	stw	r2,124(sp)
 400d2fc:	010001c4 	movi	r4,7
 400d300:	20832916 	blt	r4,r2,400dfa8 <___vfprintf_internal_r+0x1b54>
 400d304:	42000204 	addi	r8,r8,8
 400d308:	d8803317 	ldw	r2,204(sp)
 400d30c:	143fffc4 	addi	r16,r2,-1
 400d310:	043ec50e 	bge	zero,r16,400ce28 <__alt_data_end+0xfc00ce28>
 400d314:	04400404 	movi	r17,16
 400d318:	d8801f17 	ldw	r2,124(sp)
 400d31c:	8c00880e 	bge	r17,r16,400d540 <___vfprintf_internal_r+0x10ec>
 400d320:	014100b4 	movhi	r5,1026
 400d324:	2970a484 	addi	r5,r5,-15726
 400d328:	d9402b15 	stw	r5,172(sp)
 400d32c:	058001c4 	movi	r22,7
 400d330:	dcc02c17 	ldw	r19,176(sp)
 400d334:	00000306 	br	400d344 <___vfprintf_internal_r+0xef0>
 400d338:	42000204 	addi	r8,r8,8
 400d33c:	843ffc04 	addi	r16,r16,-16
 400d340:	8c00820e 	bge	r17,r16,400d54c <___vfprintf_internal_r+0x10f8>
 400d344:	18c00404 	addi	r3,r3,16
 400d348:	10800044 	addi	r2,r2,1
 400d34c:	45000015 	stw	r20,0(r8)
 400d350:	44400115 	stw	r17,4(r8)
 400d354:	d8c02015 	stw	r3,128(sp)
 400d358:	d8801f15 	stw	r2,124(sp)
 400d35c:	b0bff60e 	bge	r22,r2,400d338 <__alt_data_end+0xfc00d338>
 400d360:	d9801e04 	addi	r6,sp,120
 400d364:	b80b883a 	mov	r5,r23
 400d368:	9809883a 	mov	r4,r19
 400d36c:	4012ea40 	call	4012ea4 <__sprint_r>
 400d370:	103d3a1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400d374:	d8c02017 	ldw	r3,128(sp)
 400d378:	d8801f17 	ldw	r2,124(sp)
 400d37c:	da000404 	addi	r8,sp,16
 400d380:	003fee06 	br	400d33c <__alt_data_end+0xfc00d33c>
 400d384:	d9403117 	ldw	r5,196(sp)
 400d388:	d8802a17 	ldw	r2,168(sp)
 400d38c:	28adc83a 	sub	r22,r5,r2
 400d390:	05be630e 	bge	zero,r22,400cd20 <__alt_data_end+0xfc00cd20>
 400d394:	07000404 	movi	fp,16
 400d398:	d8801f17 	ldw	r2,124(sp)
 400d39c:	e5838f0e 	bge	fp,r22,400e1dc <___vfprintf_internal_r+0x1d88>
 400d3a0:	014100b4 	movhi	r5,1026
 400d3a4:	2970a484 	addi	r5,r5,-15726
 400d3a8:	dc403015 	stw	r17,192(sp)
 400d3ac:	d9402b15 	stw	r5,172(sp)
 400d3b0:	b023883a 	mov	r17,r22
 400d3b4:	04c001c4 	movi	r19,7
 400d3b8:	a82d883a 	mov	r22,r21
 400d3bc:	902b883a 	mov	r21,r18
 400d3c0:	8025883a 	mov	r18,r16
 400d3c4:	dc002c17 	ldw	r16,176(sp)
 400d3c8:	00000306 	br	400d3d8 <___vfprintf_internal_r+0xf84>
 400d3cc:	8c7ffc04 	addi	r17,r17,-16
 400d3d0:	42000204 	addi	r8,r8,8
 400d3d4:	e440110e 	bge	fp,r17,400d41c <___vfprintf_internal_r+0xfc8>
 400d3d8:	18c00404 	addi	r3,r3,16
 400d3dc:	10800044 	addi	r2,r2,1
 400d3e0:	45000015 	stw	r20,0(r8)
 400d3e4:	47000115 	stw	fp,4(r8)
 400d3e8:	d8c02015 	stw	r3,128(sp)
 400d3ec:	d8801f15 	stw	r2,124(sp)
 400d3f0:	98bff60e 	bge	r19,r2,400d3cc <__alt_data_end+0xfc00d3cc>
 400d3f4:	d9801e04 	addi	r6,sp,120
 400d3f8:	b80b883a 	mov	r5,r23
 400d3fc:	8009883a 	mov	r4,r16
 400d400:	4012ea40 	call	4012ea4 <__sprint_r>
 400d404:	103d151e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400d408:	8c7ffc04 	addi	r17,r17,-16
 400d40c:	d8c02017 	ldw	r3,128(sp)
 400d410:	d8801f17 	ldw	r2,124(sp)
 400d414:	da000404 	addi	r8,sp,16
 400d418:	e47fef16 	blt	fp,r17,400d3d8 <__alt_data_end+0xfc00d3d8>
 400d41c:	9021883a 	mov	r16,r18
 400d420:	a825883a 	mov	r18,r21
 400d424:	b02b883a 	mov	r21,r22
 400d428:	882d883a 	mov	r22,r17
 400d42c:	dc403017 	ldw	r17,192(sp)
 400d430:	d9002b17 	ldw	r4,172(sp)
 400d434:	1d87883a 	add	r3,r3,r22
 400d438:	10800044 	addi	r2,r2,1
 400d43c:	41000015 	stw	r4,0(r8)
 400d440:	45800115 	stw	r22,4(r8)
 400d444:	d8c02015 	stw	r3,128(sp)
 400d448:	d8801f15 	stw	r2,124(sp)
 400d44c:	010001c4 	movi	r4,7
 400d450:	20818e16 	blt	r4,r2,400da8c <___vfprintf_internal_r+0x1638>
 400d454:	42000204 	addi	r8,r8,8
 400d458:	003e3106 	br	400cd20 <__alt_data_end+0xfc00cd20>
 400d45c:	d9403317 	ldw	r5,204(sp)
 400d460:	00800044 	movi	r2,1
 400d464:	18c00044 	addi	r3,r3,1
 400d468:	1141530e 	bge	r2,r5,400d9b8 <___vfprintf_internal_r+0x1564>
 400d46c:	dc401f17 	ldw	r17,124(sp)
 400d470:	00800044 	movi	r2,1
 400d474:	40800115 	stw	r2,4(r8)
 400d478:	8c400044 	addi	r17,r17,1
 400d47c:	44000015 	stw	r16,0(r8)
 400d480:	d8c02015 	stw	r3,128(sp)
 400d484:	dc401f15 	stw	r17,124(sp)
 400d488:	008001c4 	movi	r2,7
 400d48c:	14416b16 	blt	r2,r17,400da3c <___vfprintf_internal_r+0x15e8>
 400d490:	42000204 	addi	r8,r8,8
 400d494:	d8803717 	ldw	r2,220(sp)
 400d498:	d9003417 	ldw	r4,208(sp)
 400d49c:	8c400044 	addi	r17,r17,1
 400d4a0:	10c7883a 	add	r3,r2,r3
 400d4a4:	40800115 	stw	r2,4(r8)
 400d4a8:	41000015 	stw	r4,0(r8)
 400d4ac:	d8c02015 	stw	r3,128(sp)
 400d4b0:	dc401f15 	stw	r17,124(sp)
 400d4b4:	008001c4 	movi	r2,7
 400d4b8:	14416916 	blt	r2,r17,400da60 <___vfprintf_internal_r+0x160c>
 400d4bc:	45800204 	addi	r22,r8,8
 400d4c0:	d9003617 	ldw	r4,216(sp)
 400d4c4:	d9403817 	ldw	r5,224(sp)
 400d4c8:	000d883a 	mov	r6,zero
 400d4cc:	000f883a 	mov	r7,zero
 400d4d0:	d8c03c15 	stw	r3,240(sp)
 400d4d4:	40169680 	call	4016968 <__eqdf2>
 400d4d8:	d8c03c17 	ldw	r3,240(sp)
 400d4dc:	1000bc26 	beq	r2,zero,400d7d0 <___vfprintf_internal_r+0x137c>
 400d4e0:	d9403317 	ldw	r5,204(sp)
 400d4e4:	84000044 	addi	r16,r16,1
 400d4e8:	8c400044 	addi	r17,r17,1
 400d4ec:	28bfffc4 	addi	r2,r5,-1
 400d4f0:	1887883a 	add	r3,r3,r2
 400d4f4:	b0800115 	stw	r2,4(r22)
 400d4f8:	b4000015 	stw	r16,0(r22)
 400d4fc:	d8c02015 	stw	r3,128(sp)
 400d500:	dc401f15 	stw	r17,124(sp)
 400d504:	008001c4 	movi	r2,7
 400d508:	14414316 	blt	r2,r17,400da18 <___vfprintf_internal_r+0x15c4>
 400d50c:	b5800204 	addi	r22,r22,8
 400d510:	d9003a17 	ldw	r4,232(sp)
 400d514:	df0022c4 	addi	fp,sp,139
 400d518:	8c400044 	addi	r17,r17,1
 400d51c:	20c7883a 	add	r3,r4,r3
 400d520:	b7000015 	stw	fp,0(r22)
 400d524:	b1000115 	stw	r4,4(r22)
 400d528:	d8c02015 	stw	r3,128(sp)
 400d52c:	dc401f15 	stw	r17,124(sp)
 400d530:	008001c4 	movi	r2,7
 400d534:	14400e16 	blt	r2,r17,400d570 <___vfprintf_internal_r+0x111c>
 400d538:	b2000204 	addi	r8,r22,8
 400d53c:	003e3a06 	br	400ce28 <__alt_data_end+0xfc00ce28>
 400d540:	010100b4 	movhi	r4,1026
 400d544:	2130a484 	addi	r4,r4,-15726
 400d548:	d9002b15 	stw	r4,172(sp)
 400d54c:	d9002b17 	ldw	r4,172(sp)
 400d550:	1c07883a 	add	r3,r3,r16
 400d554:	44000115 	stw	r16,4(r8)
 400d558:	41000015 	stw	r4,0(r8)
 400d55c:	10800044 	addi	r2,r2,1
 400d560:	d8c02015 	stw	r3,128(sp)
 400d564:	d8801f15 	stw	r2,124(sp)
 400d568:	010001c4 	movi	r4,7
 400d56c:	20be2d0e 	bge	r4,r2,400ce24 <__alt_data_end+0xfc00ce24>
 400d570:	d9002c17 	ldw	r4,176(sp)
 400d574:	d9801e04 	addi	r6,sp,120
 400d578:	b80b883a 	mov	r5,r23
 400d57c:	4012ea40 	call	4012ea4 <__sprint_r>
 400d580:	103cb61e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400d584:	d8c02017 	ldw	r3,128(sp)
 400d588:	da000404 	addi	r8,sp,16
 400d58c:	003e2606 	br	400ce28 <__alt_data_end+0xfc00ce28>
 400d590:	d9002c17 	ldw	r4,176(sp)
 400d594:	d9801e04 	addi	r6,sp,120
 400d598:	b80b883a 	mov	r5,r23
 400d59c:	4012ea40 	call	4012ea4 <__sprint_r>
 400d5a0:	103e5d26 	beq	r2,zero,400cf18 <__alt_data_end+0xfc00cf18>
 400d5a4:	003cad06 	br	400c85c <__alt_data_end+0xfc00c85c>
 400d5a8:	d9002c17 	ldw	r4,176(sp)
 400d5ac:	d9801e04 	addi	r6,sp,120
 400d5b0:	b80b883a 	mov	r5,r23
 400d5b4:	4012ea40 	call	4012ea4 <__sprint_r>
 400d5b8:	103ca81e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400d5bc:	d8c02017 	ldw	r3,128(sp)
 400d5c0:	da000404 	addi	r8,sp,16
 400d5c4:	003e0b06 	br	400cdf4 <__alt_data_end+0xfc00cdf4>
 400d5c8:	d9002c17 	ldw	r4,176(sp)
 400d5cc:	d9801e04 	addi	r6,sp,120
 400d5d0:	b80b883a 	mov	r5,r23
 400d5d4:	4012ea40 	call	4012ea4 <__sprint_r>
 400d5d8:	103ca01e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400d5dc:	d8c02017 	ldw	r3,128(sp)
 400d5e0:	da000404 	addi	r8,sp,16
 400d5e4:	003dbd06 	br	400ccdc <__alt_data_end+0xfc00ccdc>
 400d5e8:	d9002c17 	ldw	r4,176(sp)
 400d5ec:	d9801e04 	addi	r6,sp,120
 400d5f0:	b80b883a 	mov	r5,r23
 400d5f4:	4012ea40 	call	4012ea4 <__sprint_r>
 400d5f8:	103c981e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400d5fc:	d8c02017 	ldw	r3,128(sp)
 400d600:	da000404 	addi	r8,sp,16
 400d604:	003dc306 	br	400cd14 <__alt_data_end+0xfc00cd14>
 400d608:	d8802917 	ldw	r2,164(sp)
 400d60c:	d8002785 	stb	zero,158(sp)
 400d610:	103f0616 	blt	r2,zero,400d22c <__alt_data_end+0xfc00d22c>
 400d614:	00ffdfc4 	movi	r3,-129
 400d618:	9d84b03a 	or	r2,r19,r22
 400d61c:	90e4703a 	and	r18,r18,r3
 400d620:	103c6b26 	beq	r2,zero,400c7d0 <__alt_data_end+0xfc00c7d0>
 400d624:	0039883a 	mov	fp,zero
 400d628:	003e7406 	br	400cffc <__alt_data_end+0xfc00cffc>
 400d62c:	9080040c 	andi	r2,r18,16
 400d630:	1001b326 	beq	r2,zero,400dd00 <___vfprintf_internal_r+0x18ac>
 400d634:	d9002d17 	ldw	r4,180(sp)
 400d638:	d9402917 	ldw	r5,164(sp)
 400d63c:	d8002785 	stb	zero,158(sp)
 400d640:	20800104 	addi	r2,r4,4
 400d644:	24c00017 	ldw	r19,0(r4)
 400d648:	002d883a 	mov	r22,zero
 400d64c:	2801b516 	blt	r5,zero,400dd24 <___vfprintf_internal_r+0x18d0>
 400d650:	00ffdfc4 	movi	r3,-129
 400d654:	d8802d15 	stw	r2,180(sp)
 400d658:	90e4703a 	and	r18,r18,r3
 400d65c:	983d2726 	beq	r19,zero,400cafc <__alt_data_end+0xfc00cafc>
 400d660:	0039883a 	mov	fp,zero
 400d664:	003d2a06 	br	400cb10 <__alt_data_end+0xfc00cb10>
 400d668:	dc402617 	ldw	r17,152(sp)
 400d66c:	0441d30e 	bge	zero,r17,400ddbc <___vfprintf_internal_r+0x1968>
 400d670:	dc403217 	ldw	r17,200(sp)
 400d674:	d8803317 	ldw	r2,204(sp)
 400d678:	1440010e 	bge	r2,r17,400d680 <___vfprintf_internal_r+0x122c>
 400d67c:	1023883a 	mov	r17,r2
 400d680:	04400a0e 	bge	zero,r17,400d6ac <___vfprintf_internal_r+0x1258>
 400d684:	d8801f17 	ldw	r2,124(sp)
 400d688:	1c47883a 	add	r3,r3,r17
 400d68c:	44000015 	stw	r16,0(r8)
 400d690:	10800044 	addi	r2,r2,1
 400d694:	44400115 	stw	r17,4(r8)
 400d698:	d8c02015 	stw	r3,128(sp)
 400d69c:	d8801f15 	stw	r2,124(sp)
 400d6a0:	010001c4 	movi	r4,7
 400d6a4:	20826516 	blt	r4,r2,400e03c <___vfprintf_internal_r+0x1be8>
 400d6a8:	42000204 	addi	r8,r8,8
 400d6ac:	88026116 	blt	r17,zero,400e034 <___vfprintf_internal_r+0x1be0>
 400d6b0:	d9003217 	ldw	r4,200(sp)
 400d6b4:	2463c83a 	sub	r17,r4,r17
 400d6b8:	04407b0e 	bge	zero,r17,400d8a8 <___vfprintf_internal_r+0x1454>
 400d6bc:	05800404 	movi	r22,16
 400d6c0:	d8801f17 	ldw	r2,124(sp)
 400d6c4:	b4419d0e 	bge	r22,r17,400dd3c <___vfprintf_internal_r+0x18e8>
 400d6c8:	010100b4 	movhi	r4,1026
 400d6cc:	2130a484 	addi	r4,r4,-15726
 400d6d0:	d9002b15 	stw	r4,172(sp)
 400d6d4:	070001c4 	movi	fp,7
 400d6d8:	dcc02c17 	ldw	r19,176(sp)
 400d6dc:	00000306 	br	400d6ec <___vfprintf_internal_r+0x1298>
 400d6e0:	42000204 	addi	r8,r8,8
 400d6e4:	8c7ffc04 	addi	r17,r17,-16
 400d6e8:	b441970e 	bge	r22,r17,400dd48 <___vfprintf_internal_r+0x18f4>
 400d6ec:	18c00404 	addi	r3,r3,16
 400d6f0:	10800044 	addi	r2,r2,1
 400d6f4:	45000015 	stw	r20,0(r8)
 400d6f8:	45800115 	stw	r22,4(r8)
 400d6fc:	d8c02015 	stw	r3,128(sp)
 400d700:	d8801f15 	stw	r2,124(sp)
 400d704:	e0bff60e 	bge	fp,r2,400d6e0 <__alt_data_end+0xfc00d6e0>
 400d708:	d9801e04 	addi	r6,sp,120
 400d70c:	b80b883a 	mov	r5,r23
 400d710:	9809883a 	mov	r4,r19
 400d714:	4012ea40 	call	4012ea4 <__sprint_r>
 400d718:	103c501e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400d71c:	d8c02017 	ldw	r3,128(sp)
 400d720:	d8801f17 	ldw	r2,124(sp)
 400d724:	da000404 	addi	r8,sp,16
 400d728:	003fee06 	br	400d6e4 <__alt_data_end+0xfc00d6e4>
 400d72c:	d9002c17 	ldw	r4,176(sp)
 400d730:	d9801e04 	addi	r6,sp,120
 400d734:	b80b883a 	mov	r5,r23
 400d738:	4012ea40 	call	4012ea4 <__sprint_r>
 400d73c:	103c471e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400d740:	d8c02017 	ldw	r3,128(sp)
 400d744:	df002787 	ldb	fp,158(sp)
 400d748:	da000404 	addi	r8,sp,16
 400d74c:	003d5606 	br	400cca8 <__alt_data_end+0xfc00cca8>
 400d750:	9080040c 	andi	r2,r18,16
 400d754:	10016126 	beq	r2,zero,400dcdc <___vfprintf_internal_r+0x1888>
 400d758:	d8802d17 	ldw	r2,180(sp)
 400d75c:	14c00017 	ldw	r19,0(r2)
 400d760:	10800104 	addi	r2,r2,4
 400d764:	d8802d15 	stw	r2,180(sp)
 400d768:	982dd7fa 	srai	r22,r19,31
 400d76c:	b005883a 	mov	r2,r22
 400d770:	003c8206 	br	400c97c <__alt_data_end+0xfc00c97c>
 400d774:	9080040c 	andi	r2,r18,16
 400d778:	10003526 	beq	r2,zero,400d850 <___vfprintf_internal_r+0x13fc>
 400d77c:	d9402d17 	ldw	r5,180(sp)
 400d780:	d8c02917 	ldw	r3,164(sp)
 400d784:	d8002785 	stb	zero,158(sp)
 400d788:	28800104 	addi	r2,r5,4
 400d78c:	2cc00017 	ldw	r19,0(r5)
 400d790:	002d883a 	mov	r22,zero
 400d794:	18003716 	blt	r3,zero,400d874 <___vfprintf_internal_r+0x1420>
 400d798:	00ffdfc4 	movi	r3,-129
 400d79c:	d8802d15 	stw	r2,180(sp)
 400d7a0:	90e4703a 	and	r18,r18,r3
 400d7a4:	0039883a 	mov	fp,zero
 400d7a8:	983df326 	beq	r19,zero,400cf78 <__alt_data_end+0xfc00cf78>
 400d7ac:	00800244 	movi	r2,9
 400d7b0:	14fc7b36 	bltu	r2,r19,400c9a0 <__alt_data_end+0xfc00c9a0>
 400d7b4:	d8c02817 	ldw	r3,160(sp)
 400d7b8:	dc001dc4 	addi	r16,sp,119
 400d7bc:	9cc00c04 	addi	r19,r19,48
 400d7c0:	1c07c83a 	sub	r3,r3,r16
 400d7c4:	dcc01dc5 	stb	r19,119(sp)
 400d7c8:	d8c02e15 	stw	r3,184(sp)
 400d7cc:	003ce806 	br	400cb70 <__alt_data_end+0xfc00cb70>
 400d7d0:	d8803317 	ldw	r2,204(sp)
 400d7d4:	143fffc4 	addi	r16,r2,-1
 400d7d8:	043f4d0e 	bge	zero,r16,400d510 <__alt_data_end+0xfc00d510>
 400d7dc:	07000404 	movi	fp,16
 400d7e0:	e400810e 	bge	fp,r16,400d9e8 <___vfprintf_internal_r+0x1594>
 400d7e4:	014100b4 	movhi	r5,1026
 400d7e8:	2970a484 	addi	r5,r5,-15726
 400d7ec:	d9402b15 	stw	r5,172(sp)
 400d7f0:	01c001c4 	movi	r7,7
 400d7f4:	dcc02c17 	ldw	r19,176(sp)
 400d7f8:	00000306 	br	400d808 <___vfprintf_internal_r+0x13b4>
 400d7fc:	b5800204 	addi	r22,r22,8
 400d800:	843ffc04 	addi	r16,r16,-16
 400d804:	e4007b0e 	bge	fp,r16,400d9f4 <___vfprintf_internal_r+0x15a0>
 400d808:	18c00404 	addi	r3,r3,16
 400d80c:	8c400044 	addi	r17,r17,1
 400d810:	b5000015 	stw	r20,0(r22)
 400d814:	b7000115 	stw	fp,4(r22)
 400d818:	d8c02015 	stw	r3,128(sp)
 400d81c:	dc401f15 	stw	r17,124(sp)
 400d820:	3c7ff60e 	bge	r7,r17,400d7fc <__alt_data_end+0xfc00d7fc>
 400d824:	d9801e04 	addi	r6,sp,120
 400d828:	b80b883a 	mov	r5,r23
 400d82c:	9809883a 	mov	r4,r19
 400d830:	d9c03c15 	stw	r7,240(sp)
 400d834:	4012ea40 	call	4012ea4 <__sprint_r>
 400d838:	d9c03c17 	ldw	r7,240(sp)
 400d83c:	103c071e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400d840:	d8c02017 	ldw	r3,128(sp)
 400d844:	dc401f17 	ldw	r17,124(sp)
 400d848:	dd800404 	addi	r22,sp,16
 400d84c:	003fec06 	br	400d800 <__alt_data_end+0xfc00d800>
 400d850:	9080100c 	andi	r2,r18,64
 400d854:	d8002785 	stb	zero,158(sp)
 400d858:	10010e26 	beq	r2,zero,400dc94 <___vfprintf_internal_r+0x1840>
 400d85c:	d9002d17 	ldw	r4,180(sp)
 400d860:	d9402917 	ldw	r5,164(sp)
 400d864:	002d883a 	mov	r22,zero
 400d868:	20800104 	addi	r2,r4,4
 400d86c:	24c0000b 	ldhu	r19,0(r4)
 400d870:	283fc90e 	bge	r5,zero,400d798 <__alt_data_end+0xfc00d798>
 400d874:	d8802d15 	stw	r2,180(sp)
 400d878:	0039883a 	mov	fp,zero
 400d87c:	9d84b03a 	or	r2,r19,r22
 400d880:	103c461e 	bne	r2,zero,400c99c <__alt_data_end+0xfc00c99c>
 400d884:	00800044 	movi	r2,1
 400d888:	003e6c06 	br	400d23c <__alt_data_end+0xfc00d23c>
 400d88c:	d9002c17 	ldw	r4,176(sp)
 400d890:	d9801e04 	addi	r6,sp,120
 400d894:	b80b883a 	mov	r5,r23
 400d898:	4012ea40 	call	4012ea4 <__sprint_r>
 400d89c:	103bef1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400d8a0:	d8c02017 	ldw	r3,128(sp)
 400d8a4:	da000404 	addi	r8,sp,16
 400d8a8:	d9003217 	ldw	r4,200(sp)
 400d8ac:	d8802617 	ldw	r2,152(sp)
 400d8b0:	d9403317 	ldw	r5,204(sp)
 400d8b4:	8123883a 	add	r17,r16,r4
 400d8b8:	11400216 	blt	r2,r5,400d8c4 <___vfprintf_internal_r+0x1470>
 400d8bc:	9100004c 	andi	r4,r18,1
 400d8c0:	20000d26 	beq	r4,zero,400d8f8 <___vfprintf_internal_r+0x14a4>
 400d8c4:	d9003717 	ldw	r4,220(sp)
 400d8c8:	d9403417 	ldw	r5,208(sp)
 400d8cc:	1907883a 	add	r3,r3,r4
 400d8d0:	d9001f17 	ldw	r4,124(sp)
 400d8d4:	41400015 	stw	r5,0(r8)
 400d8d8:	d9403717 	ldw	r5,220(sp)
 400d8dc:	21000044 	addi	r4,r4,1
 400d8e0:	d8c02015 	stw	r3,128(sp)
 400d8e4:	41400115 	stw	r5,4(r8)
 400d8e8:	d9001f15 	stw	r4,124(sp)
 400d8ec:	014001c4 	movi	r5,7
 400d8f0:	2901e816 	blt	r5,r4,400e094 <___vfprintf_internal_r+0x1c40>
 400d8f4:	42000204 	addi	r8,r8,8
 400d8f8:	d9003317 	ldw	r4,204(sp)
 400d8fc:	8121883a 	add	r16,r16,r4
 400d900:	2085c83a 	sub	r2,r4,r2
 400d904:	8461c83a 	sub	r16,r16,r17
 400d908:	1400010e 	bge	r2,r16,400d910 <___vfprintf_internal_r+0x14bc>
 400d90c:	1021883a 	mov	r16,r2
 400d910:	04000a0e 	bge	zero,r16,400d93c <___vfprintf_internal_r+0x14e8>
 400d914:	d9001f17 	ldw	r4,124(sp)
 400d918:	1c07883a 	add	r3,r3,r16
 400d91c:	44400015 	stw	r17,0(r8)
 400d920:	21000044 	addi	r4,r4,1
 400d924:	44000115 	stw	r16,4(r8)
 400d928:	d8c02015 	stw	r3,128(sp)
 400d92c:	d9001f15 	stw	r4,124(sp)
 400d930:	014001c4 	movi	r5,7
 400d934:	2901fb16 	blt	r5,r4,400e124 <___vfprintf_internal_r+0x1cd0>
 400d938:	42000204 	addi	r8,r8,8
 400d93c:	8001f716 	blt	r16,zero,400e11c <___vfprintf_internal_r+0x1cc8>
 400d940:	1421c83a 	sub	r16,r2,r16
 400d944:	043d380e 	bge	zero,r16,400ce28 <__alt_data_end+0xfc00ce28>
 400d948:	04400404 	movi	r17,16
 400d94c:	d8801f17 	ldw	r2,124(sp)
 400d950:	8c3efb0e 	bge	r17,r16,400d540 <__alt_data_end+0xfc00d540>
 400d954:	014100b4 	movhi	r5,1026
 400d958:	2970a484 	addi	r5,r5,-15726
 400d95c:	d9402b15 	stw	r5,172(sp)
 400d960:	058001c4 	movi	r22,7
 400d964:	dcc02c17 	ldw	r19,176(sp)
 400d968:	00000306 	br	400d978 <___vfprintf_internal_r+0x1524>
 400d96c:	42000204 	addi	r8,r8,8
 400d970:	843ffc04 	addi	r16,r16,-16
 400d974:	8c3ef50e 	bge	r17,r16,400d54c <__alt_data_end+0xfc00d54c>
 400d978:	18c00404 	addi	r3,r3,16
 400d97c:	10800044 	addi	r2,r2,1
 400d980:	45000015 	stw	r20,0(r8)
 400d984:	44400115 	stw	r17,4(r8)
 400d988:	d8c02015 	stw	r3,128(sp)
 400d98c:	d8801f15 	stw	r2,124(sp)
 400d990:	b0bff60e 	bge	r22,r2,400d96c <__alt_data_end+0xfc00d96c>
 400d994:	d9801e04 	addi	r6,sp,120
 400d998:	b80b883a 	mov	r5,r23
 400d99c:	9809883a 	mov	r4,r19
 400d9a0:	4012ea40 	call	4012ea4 <__sprint_r>
 400d9a4:	103bad1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400d9a8:	d8c02017 	ldw	r3,128(sp)
 400d9ac:	d8801f17 	ldw	r2,124(sp)
 400d9b0:	da000404 	addi	r8,sp,16
 400d9b4:	003fee06 	br	400d970 <__alt_data_end+0xfc00d970>
 400d9b8:	9088703a 	and	r4,r18,r2
 400d9bc:	203eab1e 	bne	r4,zero,400d46c <__alt_data_end+0xfc00d46c>
 400d9c0:	dc401f17 	ldw	r17,124(sp)
 400d9c4:	40800115 	stw	r2,4(r8)
 400d9c8:	44000015 	stw	r16,0(r8)
 400d9cc:	8c400044 	addi	r17,r17,1
 400d9d0:	d8c02015 	stw	r3,128(sp)
 400d9d4:	dc401f15 	stw	r17,124(sp)
 400d9d8:	008001c4 	movi	r2,7
 400d9dc:	14400e16 	blt	r2,r17,400da18 <___vfprintf_internal_r+0x15c4>
 400d9e0:	45800204 	addi	r22,r8,8
 400d9e4:	003eca06 	br	400d510 <__alt_data_end+0xfc00d510>
 400d9e8:	010100b4 	movhi	r4,1026
 400d9ec:	2130a484 	addi	r4,r4,-15726
 400d9f0:	d9002b15 	stw	r4,172(sp)
 400d9f4:	d8802b17 	ldw	r2,172(sp)
 400d9f8:	1c07883a 	add	r3,r3,r16
 400d9fc:	8c400044 	addi	r17,r17,1
 400da00:	b0800015 	stw	r2,0(r22)
 400da04:	b4000115 	stw	r16,4(r22)
 400da08:	d8c02015 	stw	r3,128(sp)
 400da0c:	dc401f15 	stw	r17,124(sp)
 400da10:	008001c4 	movi	r2,7
 400da14:	147ebd0e 	bge	r2,r17,400d50c <__alt_data_end+0xfc00d50c>
 400da18:	d9002c17 	ldw	r4,176(sp)
 400da1c:	d9801e04 	addi	r6,sp,120
 400da20:	b80b883a 	mov	r5,r23
 400da24:	4012ea40 	call	4012ea4 <__sprint_r>
 400da28:	103b8c1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400da2c:	d8c02017 	ldw	r3,128(sp)
 400da30:	dc401f17 	ldw	r17,124(sp)
 400da34:	dd800404 	addi	r22,sp,16
 400da38:	003eb506 	br	400d510 <__alt_data_end+0xfc00d510>
 400da3c:	d9002c17 	ldw	r4,176(sp)
 400da40:	d9801e04 	addi	r6,sp,120
 400da44:	b80b883a 	mov	r5,r23
 400da48:	4012ea40 	call	4012ea4 <__sprint_r>
 400da4c:	103b831e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400da50:	d8c02017 	ldw	r3,128(sp)
 400da54:	dc401f17 	ldw	r17,124(sp)
 400da58:	da000404 	addi	r8,sp,16
 400da5c:	003e8d06 	br	400d494 <__alt_data_end+0xfc00d494>
 400da60:	d9002c17 	ldw	r4,176(sp)
 400da64:	d9801e04 	addi	r6,sp,120
 400da68:	b80b883a 	mov	r5,r23
 400da6c:	4012ea40 	call	4012ea4 <__sprint_r>
 400da70:	103b7a1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400da74:	d8c02017 	ldw	r3,128(sp)
 400da78:	dc401f17 	ldw	r17,124(sp)
 400da7c:	dd800404 	addi	r22,sp,16
 400da80:	003e8f06 	br	400d4c0 <__alt_data_end+0xfc00d4c0>
 400da84:	0027883a 	mov	r19,zero
 400da88:	003f4a06 	br	400d7b4 <__alt_data_end+0xfc00d7b4>
 400da8c:	d9002c17 	ldw	r4,176(sp)
 400da90:	d9801e04 	addi	r6,sp,120
 400da94:	b80b883a 	mov	r5,r23
 400da98:	4012ea40 	call	4012ea4 <__sprint_r>
 400da9c:	103b6f1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400daa0:	d8c02017 	ldw	r3,128(sp)
 400daa4:	da000404 	addi	r8,sp,16
 400daa8:	003c9d06 	br	400cd20 <__alt_data_end+0xfc00cd20>
 400daac:	04e7c83a 	sub	r19,zero,r19
 400dab0:	9804c03a 	cmpne	r2,r19,zero
 400dab4:	05adc83a 	sub	r22,zero,r22
 400dab8:	b0adc83a 	sub	r22,r22,r2
 400dabc:	d8802917 	ldw	r2,164(sp)
 400dac0:	07000b44 	movi	fp,45
 400dac4:	df002785 	stb	fp,158(sp)
 400dac8:	10017b16 	blt	r2,zero,400e0b8 <___vfprintf_internal_r+0x1c64>
 400dacc:	00bfdfc4 	movi	r2,-129
 400dad0:	90a4703a 	and	r18,r18,r2
 400dad4:	003bb106 	br	400c99c <__alt_data_end+0xfc00c99c>
 400dad8:	d9003617 	ldw	r4,216(sp)
 400dadc:	d9403817 	ldw	r5,224(sp)
 400dae0:	da003d15 	stw	r8,244(sp)
 400dae4:	4012bf80 	call	4012bf8 <__fpclassifyd>
 400dae8:	da003d17 	ldw	r8,244(sp)
 400daec:	1000f026 	beq	r2,zero,400deb0 <___vfprintf_internal_r+0x1a5c>
 400daf0:	d9002917 	ldw	r4,164(sp)
 400daf4:	05bff7c4 	movi	r22,-33
 400daf8:	00bfffc4 	movi	r2,-1
 400dafc:	8dac703a 	and	r22,r17,r22
 400db00:	20820026 	beq	r4,r2,400e304 <___vfprintf_internal_r+0x1eb0>
 400db04:	008011c4 	movi	r2,71
 400db08:	b081f726 	beq	r22,r2,400e2e8 <___vfprintf_internal_r+0x1e94>
 400db0c:	d9003817 	ldw	r4,224(sp)
 400db10:	90c04014 	ori	r3,r18,256
 400db14:	d8c02b15 	stw	r3,172(sp)
 400db18:	20021516 	blt	r4,zero,400e370 <___vfprintf_internal_r+0x1f1c>
 400db1c:	dcc03817 	ldw	r19,224(sp)
 400db20:	d8002a05 	stb	zero,168(sp)
 400db24:	00801984 	movi	r2,102
 400db28:	8881f926 	beq	r17,r2,400e310 <___vfprintf_internal_r+0x1ebc>
 400db2c:	00801184 	movi	r2,70
 400db30:	88821c26 	beq	r17,r2,400e3a4 <___vfprintf_internal_r+0x1f50>
 400db34:	00801144 	movi	r2,69
 400db38:	b081ef26 	beq	r22,r2,400e2f8 <___vfprintf_internal_r+0x1ea4>
 400db3c:	d8c02917 	ldw	r3,164(sp)
 400db40:	d8802104 	addi	r2,sp,132
 400db44:	d8800315 	stw	r2,12(sp)
 400db48:	d9403617 	ldw	r5,216(sp)
 400db4c:	d8802504 	addi	r2,sp,148
 400db50:	d9002c17 	ldw	r4,176(sp)
 400db54:	d8800215 	stw	r2,8(sp)
 400db58:	d8802604 	addi	r2,sp,152
 400db5c:	d8c00015 	stw	r3,0(sp)
 400db60:	d8800115 	stw	r2,4(sp)
 400db64:	01c00084 	movi	r7,2
 400db68:	980d883a 	mov	r6,r19
 400db6c:	d8c03c15 	stw	r3,240(sp)
 400db70:	da003d15 	stw	r8,244(sp)
 400db74:	400ea780 	call	400ea78 <_dtoa_r>
 400db78:	1021883a 	mov	r16,r2
 400db7c:	008019c4 	movi	r2,103
 400db80:	d8c03c17 	ldw	r3,240(sp)
 400db84:	da003d17 	ldw	r8,244(sp)
 400db88:	88817126 	beq	r17,r2,400e150 <___vfprintf_internal_r+0x1cfc>
 400db8c:	008011c4 	movi	r2,71
 400db90:	88829226 	beq	r17,r2,400e5dc <___vfprintf_internal_r+0x2188>
 400db94:	80f9883a 	add	fp,r16,r3
 400db98:	d9003617 	ldw	r4,216(sp)
 400db9c:	000d883a 	mov	r6,zero
 400dba0:	000f883a 	mov	r7,zero
 400dba4:	980b883a 	mov	r5,r19
 400dba8:	da003d15 	stw	r8,244(sp)
 400dbac:	40169680 	call	4016968 <__eqdf2>
 400dbb0:	da003d17 	ldw	r8,244(sp)
 400dbb4:	10018d26 	beq	r2,zero,400e1ec <___vfprintf_internal_r+0x1d98>
 400dbb8:	d8802117 	ldw	r2,132(sp)
 400dbbc:	1700062e 	bgeu	r2,fp,400dbd8 <___vfprintf_internal_r+0x1784>
 400dbc0:	01000c04 	movi	r4,48
 400dbc4:	10c00044 	addi	r3,r2,1
 400dbc8:	d8c02115 	stw	r3,132(sp)
 400dbcc:	11000005 	stb	r4,0(r2)
 400dbd0:	d8802117 	ldw	r2,132(sp)
 400dbd4:	173ffb36 	bltu	r2,fp,400dbc4 <__alt_data_end+0xfc00dbc4>
 400dbd8:	1405c83a 	sub	r2,r2,r16
 400dbdc:	d8803315 	stw	r2,204(sp)
 400dbe0:	008011c4 	movi	r2,71
 400dbe4:	b0817626 	beq	r22,r2,400e1c0 <___vfprintf_internal_r+0x1d6c>
 400dbe8:	00801944 	movi	r2,101
 400dbec:	1442810e 	bge	r2,r17,400e5f4 <___vfprintf_internal_r+0x21a0>
 400dbf0:	d8c02617 	ldw	r3,152(sp)
 400dbf4:	00801984 	movi	r2,102
 400dbf8:	d8c03215 	stw	r3,200(sp)
 400dbfc:	8881fe26 	beq	r17,r2,400e3f8 <___vfprintf_internal_r+0x1fa4>
 400dc00:	d8c03217 	ldw	r3,200(sp)
 400dc04:	d9003317 	ldw	r4,204(sp)
 400dc08:	1901dd16 	blt	r3,r4,400e380 <___vfprintf_internal_r+0x1f2c>
 400dc0c:	9480004c 	andi	r18,r18,1
 400dc10:	90022b1e 	bne	r18,zero,400e4c0 <___vfprintf_internal_r+0x206c>
 400dc14:	1805883a 	mov	r2,r3
 400dc18:	18028016 	blt	r3,zero,400e61c <___vfprintf_internal_r+0x21c8>
 400dc1c:	d8c03217 	ldw	r3,200(sp)
 400dc20:	044019c4 	movi	r17,103
 400dc24:	d8c02e15 	stw	r3,184(sp)
 400dc28:	df002a07 	ldb	fp,168(sp)
 400dc2c:	e001531e 	bne	fp,zero,400e17c <___vfprintf_internal_r+0x1d28>
 400dc30:	df002783 	ldbu	fp,158(sp)
 400dc34:	d8802a15 	stw	r2,168(sp)
 400dc38:	dc802b17 	ldw	r18,172(sp)
 400dc3c:	d8002915 	stw	zero,164(sp)
 400dc40:	003bd106 	br	400cb88 <__alt_data_end+0xfc00cb88>
 400dc44:	d8802d17 	ldw	r2,180(sp)
 400dc48:	d8c02d17 	ldw	r3,180(sp)
 400dc4c:	d9002d17 	ldw	r4,180(sp)
 400dc50:	10800017 	ldw	r2,0(r2)
 400dc54:	18c00117 	ldw	r3,4(r3)
 400dc58:	21000204 	addi	r4,r4,8
 400dc5c:	d8803615 	stw	r2,216(sp)
 400dc60:	d8c03815 	stw	r3,224(sp)
 400dc64:	d9002d15 	stw	r4,180(sp)
 400dc68:	003b7506 	br	400ca40 <__alt_data_end+0xfc00ca40>
 400dc6c:	ac400007 	ldb	r17,0(r21)
 400dc70:	003a5906 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400dc74:	9080100c 	andi	r2,r18,64
 400dc78:	1000a826 	beq	r2,zero,400df1c <___vfprintf_internal_r+0x1ac8>
 400dc7c:	d9002d17 	ldw	r4,180(sp)
 400dc80:	002d883a 	mov	r22,zero
 400dc84:	24c0000b 	ldhu	r19,0(r4)
 400dc88:	21000104 	addi	r4,r4,4
 400dc8c:	d9002d15 	stw	r4,180(sp)
 400dc90:	003ccb06 	br	400cfc0 <__alt_data_end+0xfc00cfc0>
 400dc94:	d8c02d17 	ldw	r3,180(sp)
 400dc98:	d9002917 	ldw	r4,164(sp)
 400dc9c:	002d883a 	mov	r22,zero
 400dca0:	18800104 	addi	r2,r3,4
 400dca4:	1cc00017 	ldw	r19,0(r3)
 400dca8:	203ebb0e 	bge	r4,zero,400d798 <__alt_data_end+0xfc00d798>
 400dcac:	003ef106 	br	400d874 <__alt_data_end+0xfc00d874>
 400dcb0:	9080040c 	andi	r2,r18,16
 400dcb4:	1000921e 	bne	r2,zero,400df00 <___vfprintf_internal_r+0x1aac>
 400dcb8:	9480100c 	andi	r18,r18,64
 400dcbc:	90013926 	beq	r18,zero,400e1a4 <___vfprintf_internal_r+0x1d50>
 400dcc0:	d9002d17 	ldw	r4,180(sp)
 400dcc4:	d9402f17 	ldw	r5,188(sp)
 400dcc8:	20800017 	ldw	r2,0(r4)
 400dccc:	21000104 	addi	r4,r4,4
 400dcd0:	d9002d15 	stw	r4,180(sp)
 400dcd4:	1140000d 	sth	r5,0(r2)
 400dcd8:	003a1606 	br	400c534 <__alt_data_end+0xfc00c534>
 400dcdc:	9080100c 	andi	r2,r18,64
 400dce0:	10008026 	beq	r2,zero,400dee4 <___vfprintf_internal_r+0x1a90>
 400dce4:	d8c02d17 	ldw	r3,180(sp)
 400dce8:	1cc0000f 	ldh	r19,0(r3)
 400dcec:	18c00104 	addi	r3,r3,4
 400dcf0:	d8c02d15 	stw	r3,180(sp)
 400dcf4:	982dd7fa 	srai	r22,r19,31
 400dcf8:	b005883a 	mov	r2,r22
 400dcfc:	003b1f06 	br	400c97c <__alt_data_end+0xfc00c97c>
 400dd00:	9080100c 	andi	r2,r18,64
 400dd04:	d8002785 	stb	zero,158(sp)
 400dd08:	10008a1e 	bne	r2,zero,400df34 <___vfprintf_internal_r+0x1ae0>
 400dd0c:	d9402d17 	ldw	r5,180(sp)
 400dd10:	d8c02917 	ldw	r3,164(sp)
 400dd14:	002d883a 	mov	r22,zero
 400dd18:	28800104 	addi	r2,r5,4
 400dd1c:	2cc00017 	ldw	r19,0(r5)
 400dd20:	183e4b0e 	bge	r3,zero,400d650 <__alt_data_end+0xfc00d650>
 400dd24:	9d86b03a 	or	r3,r19,r22
 400dd28:	d8802d15 	stw	r2,180(sp)
 400dd2c:	183e4c1e 	bne	r3,zero,400d660 <__alt_data_end+0xfc00d660>
 400dd30:	0039883a 	mov	fp,zero
 400dd34:	0005883a 	mov	r2,zero
 400dd38:	003d4006 	br	400d23c <__alt_data_end+0xfc00d23c>
 400dd3c:	014100b4 	movhi	r5,1026
 400dd40:	2970a484 	addi	r5,r5,-15726
 400dd44:	d9402b15 	stw	r5,172(sp)
 400dd48:	d9402b17 	ldw	r5,172(sp)
 400dd4c:	1c47883a 	add	r3,r3,r17
 400dd50:	10800044 	addi	r2,r2,1
 400dd54:	41400015 	stw	r5,0(r8)
 400dd58:	44400115 	stw	r17,4(r8)
 400dd5c:	d8c02015 	stw	r3,128(sp)
 400dd60:	d8801f15 	stw	r2,124(sp)
 400dd64:	010001c4 	movi	r4,7
 400dd68:	20bec816 	blt	r4,r2,400d88c <__alt_data_end+0xfc00d88c>
 400dd6c:	42000204 	addi	r8,r8,8
 400dd70:	003ecd06 	br	400d8a8 <__alt_data_end+0xfc00d8a8>
 400dd74:	d9002917 	ldw	r4,164(sp)
 400dd78:	d8002785 	stb	zero,158(sp)
 400dd7c:	203d2d16 	blt	r4,zero,400d234 <__alt_data_end+0xfc00d234>
 400dd80:	00bfdfc4 	movi	r2,-129
 400dd84:	90a4703a 	and	r18,r18,r2
 400dd88:	003a9106 	br	400c7d0 <__alt_data_end+0xfc00c7d0>
 400dd8c:	010100b4 	movhi	r4,1026
 400dd90:	2130a484 	addi	r4,r4,-15726
 400dd94:	d9002b15 	stw	r4,172(sp)
 400dd98:	003c0c06 	br	400cdcc <__alt_data_end+0xfc00cdcc>
 400dd9c:	d9002c17 	ldw	r4,176(sp)
 400dda0:	d9801e04 	addi	r6,sp,120
 400dda4:	b80b883a 	mov	r5,r23
 400dda8:	4012ea40 	call	4012ea4 <__sprint_r>
 400ddac:	103aab1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400ddb0:	d8c02017 	ldw	r3,128(sp)
 400ddb4:	da000404 	addi	r8,sp,16
 400ddb8:	003d4106 	br	400d2c0 <__alt_data_end+0xfc00d2c0>
 400ddbc:	d8801f17 	ldw	r2,124(sp)
 400ddc0:	014100b4 	movhi	r5,1026
 400ddc4:	01000044 	movi	r4,1
 400ddc8:	18c00044 	addi	r3,r3,1
 400ddcc:	10800044 	addi	r2,r2,1
 400ddd0:	2970a404 	addi	r5,r5,-15728
 400ddd4:	41000115 	stw	r4,4(r8)
 400ddd8:	41400015 	stw	r5,0(r8)
 400dddc:	d8c02015 	stw	r3,128(sp)
 400dde0:	d8801f15 	stw	r2,124(sp)
 400dde4:	010001c4 	movi	r4,7
 400dde8:	20805c16 	blt	r4,r2,400df5c <___vfprintf_internal_r+0x1b08>
 400ddec:	42000204 	addi	r8,r8,8
 400ddf0:	8800041e 	bne	r17,zero,400de04 <___vfprintf_internal_r+0x19b0>
 400ddf4:	d8803317 	ldw	r2,204(sp)
 400ddf8:	1000021e 	bne	r2,zero,400de04 <___vfprintf_internal_r+0x19b0>
 400ddfc:	9080004c 	andi	r2,r18,1
 400de00:	103c0926 	beq	r2,zero,400ce28 <__alt_data_end+0xfc00ce28>
 400de04:	d9003717 	ldw	r4,220(sp)
 400de08:	d8801f17 	ldw	r2,124(sp)
 400de0c:	d9403417 	ldw	r5,208(sp)
 400de10:	20c7883a 	add	r3,r4,r3
 400de14:	10800044 	addi	r2,r2,1
 400de18:	41000115 	stw	r4,4(r8)
 400de1c:	41400015 	stw	r5,0(r8)
 400de20:	d8c02015 	stw	r3,128(sp)
 400de24:	d8801f15 	stw	r2,124(sp)
 400de28:	010001c4 	movi	r4,7
 400de2c:	20812116 	blt	r4,r2,400e2b4 <___vfprintf_internal_r+0x1e60>
 400de30:	42000204 	addi	r8,r8,8
 400de34:	0463c83a 	sub	r17,zero,r17
 400de38:	0440730e 	bge	zero,r17,400e008 <___vfprintf_internal_r+0x1bb4>
 400de3c:	05800404 	movi	r22,16
 400de40:	b440860e 	bge	r22,r17,400e05c <___vfprintf_internal_r+0x1c08>
 400de44:	014100b4 	movhi	r5,1026
 400de48:	2970a484 	addi	r5,r5,-15726
 400de4c:	d9402b15 	stw	r5,172(sp)
 400de50:	070001c4 	movi	fp,7
 400de54:	dcc02c17 	ldw	r19,176(sp)
 400de58:	00000306 	br	400de68 <___vfprintf_internal_r+0x1a14>
 400de5c:	42000204 	addi	r8,r8,8
 400de60:	8c7ffc04 	addi	r17,r17,-16
 400de64:	b440800e 	bge	r22,r17,400e068 <___vfprintf_internal_r+0x1c14>
 400de68:	18c00404 	addi	r3,r3,16
 400de6c:	10800044 	addi	r2,r2,1
 400de70:	45000015 	stw	r20,0(r8)
 400de74:	45800115 	stw	r22,4(r8)
 400de78:	d8c02015 	stw	r3,128(sp)
 400de7c:	d8801f15 	stw	r2,124(sp)
 400de80:	e0bff60e 	bge	fp,r2,400de5c <__alt_data_end+0xfc00de5c>
 400de84:	d9801e04 	addi	r6,sp,120
 400de88:	b80b883a 	mov	r5,r23
 400de8c:	9809883a 	mov	r4,r19
 400de90:	4012ea40 	call	4012ea4 <__sprint_r>
 400de94:	103a711e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400de98:	d8c02017 	ldw	r3,128(sp)
 400de9c:	d8801f17 	ldw	r2,124(sp)
 400dea0:	da000404 	addi	r8,sp,16
 400dea4:	003fee06 	br	400de60 <__alt_data_end+0xfc00de60>
 400dea8:	00bfffc4 	movi	r2,-1
 400deac:	003a6f06 	br	400c86c <__alt_data_end+0xfc00c86c>
 400deb0:	008011c4 	movi	r2,71
 400deb4:	1440b816 	blt	r2,r17,400e198 <___vfprintf_internal_r+0x1d44>
 400deb8:	040100b4 	movhi	r16,1026
 400debc:	84309604 	addi	r16,r16,-15784
 400dec0:	00c000c4 	movi	r3,3
 400dec4:	00bfdfc4 	movi	r2,-129
 400dec8:	d8c02a15 	stw	r3,168(sp)
 400decc:	90a4703a 	and	r18,r18,r2
 400ded0:	df002783 	ldbu	fp,158(sp)
 400ded4:	d8c02e15 	stw	r3,184(sp)
 400ded8:	d8002915 	stw	zero,164(sp)
 400dedc:	d8003215 	stw	zero,200(sp)
 400dee0:	003b2906 	br	400cb88 <__alt_data_end+0xfc00cb88>
 400dee4:	d9002d17 	ldw	r4,180(sp)
 400dee8:	24c00017 	ldw	r19,0(r4)
 400deec:	21000104 	addi	r4,r4,4
 400def0:	d9002d15 	stw	r4,180(sp)
 400def4:	982dd7fa 	srai	r22,r19,31
 400def8:	b005883a 	mov	r2,r22
 400defc:	003a9f06 	br	400c97c <__alt_data_end+0xfc00c97c>
 400df00:	d9402d17 	ldw	r5,180(sp)
 400df04:	d8c02f17 	ldw	r3,188(sp)
 400df08:	28800017 	ldw	r2,0(r5)
 400df0c:	29400104 	addi	r5,r5,4
 400df10:	d9402d15 	stw	r5,180(sp)
 400df14:	10c00015 	stw	r3,0(r2)
 400df18:	00398606 	br	400c534 <__alt_data_end+0xfc00c534>
 400df1c:	d9402d17 	ldw	r5,180(sp)
 400df20:	002d883a 	mov	r22,zero
 400df24:	2cc00017 	ldw	r19,0(r5)
 400df28:	29400104 	addi	r5,r5,4
 400df2c:	d9402d15 	stw	r5,180(sp)
 400df30:	003c2306 	br	400cfc0 <__alt_data_end+0xfc00cfc0>
 400df34:	d8c02d17 	ldw	r3,180(sp)
 400df38:	d9002917 	ldw	r4,164(sp)
 400df3c:	002d883a 	mov	r22,zero
 400df40:	18800104 	addi	r2,r3,4
 400df44:	1cc0000b 	ldhu	r19,0(r3)
 400df48:	203dc10e 	bge	r4,zero,400d650 <__alt_data_end+0xfc00d650>
 400df4c:	003f7506 	br	400dd24 <__alt_data_end+0xfc00dd24>
 400df50:	040100b4 	movhi	r16,1026
 400df54:	84309404 	addi	r16,r16,-15792
 400df58:	003acc06 	br	400ca8c <__alt_data_end+0xfc00ca8c>
 400df5c:	d9002c17 	ldw	r4,176(sp)
 400df60:	d9801e04 	addi	r6,sp,120
 400df64:	b80b883a 	mov	r5,r23
 400df68:	4012ea40 	call	4012ea4 <__sprint_r>
 400df6c:	103a3b1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400df70:	dc402617 	ldw	r17,152(sp)
 400df74:	d8c02017 	ldw	r3,128(sp)
 400df78:	da000404 	addi	r8,sp,16
 400df7c:	003f9c06 	br	400ddf0 <__alt_data_end+0xfc00ddf0>
 400df80:	ac400043 	ldbu	r17,1(r21)
 400df84:	94800814 	ori	r18,r18,32
 400df88:	ad400044 	addi	r21,r21,1
 400df8c:	8c403fcc 	andi	r17,r17,255
 400df90:	8c40201c 	xori	r17,r17,128
 400df94:	8c7fe004 	addi	r17,r17,-128
 400df98:	00398f06 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400df9c:	d8c02d15 	stw	r3,180(sp)
 400dfa0:	0039883a 	mov	fp,zero
 400dfa4:	003e3506 	br	400d87c <__alt_data_end+0xfc00d87c>
 400dfa8:	d9002c17 	ldw	r4,176(sp)
 400dfac:	d9801e04 	addi	r6,sp,120
 400dfb0:	b80b883a 	mov	r5,r23
 400dfb4:	4012ea40 	call	4012ea4 <__sprint_r>
 400dfb8:	103a281e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400dfbc:	d8c02017 	ldw	r3,128(sp)
 400dfc0:	da000404 	addi	r8,sp,16
 400dfc4:	003cd006 	br	400d308 <__alt_data_end+0xfc00d308>
 400dfc8:	8009883a 	mov	r4,r16
 400dfcc:	da003d15 	stw	r8,244(sp)
 400dfd0:	400c3b40 	call	400c3b4 <strlen>
 400dfd4:	d8802e15 	stw	r2,184(sp)
 400dfd8:	da003d17 	ldw	r8,244(sp)
 400dfdc:	103c340e 	bge	r2,zero,400d0b0 <__alt_data_end+0xfc00d0b0>
 400dfe0:	0005883a 	mov	r2,zero
 400dfe4:	003c3206 	br	400d0b0 <__alt_data_end+0xfc00d0b0>
 400dfe8:	d9002c17 	ldw	r4,176(sp)
 400dfec:	d9801e04 	addi	r6,sp,120
 400dff0:	b80b883a 	mov	r5,r23
 400dff4:	4012ea40 	call	4012ea4 <__sprint_r>
 400dff8:	103a181e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400dffc:	d8c02017 	ldw	r3,128(sp)
 400e000:	d8801f17 	ldw	r2,124(sp)
 400e004:	da000404 	addi	r8,sp,16
 400e008:	d9403317 	ldw	r5,204(sp)
 400e00c:	10800044 	addi	r2,r2,1
 400e010:	44000015 	stw	r16,0(r8)
 400e014:	28c7883a 	add	r3,r5,r3
 400e018:	003b7d06 	br	400ce10 <__alt_data_end+0xfc00ce10>
 400e01c:	010100b4 	movhi	r4,1026
 400e020:	2130a884 	addi	r4,r4,-15710
 400e024:	d9003515 	stw	r4,212(sp)
 400e028:	003b1406 	br	400cc7c <__alt_data_end+0xfc00cc7c>
 400e02c:	013fffc4 	movi	r4,-1
 400e030:	003a3506 	br	400c908 <__alt_data_end+0xfc00c908>
 400e034:	0023883a 	mov	r17,zero
 400e038:	003d9d06 	br	400d6b0 <__alt_data_end+0xfc00d6b0>
 400e03c:	d9002c17 	ldw	r4,176(sp)
 400e040:	d9801e04 	addi	r6,sp,120
 400e044:	b80b883a 	mov	r5,r23
 400e048:	4012ea40 	call	4012ea4 <__sprint_r>
 400e04c:	103a031e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400e050:	d8c02017 	ldw	r3,128(sp)
 400e054:	da000404 	addi	r8,sp,16
 400e058:	003d9406 	br	400d6ac <__alt_data_end+0xfc00d6ac>
 400e05c:	010100b4 	movhi	r4,1026
 400e060:	2130a484 	addi	r4,r4,-15726
 400e064:	d9002b15 	stw	r4,172(sp)
 400e068:	d9002b17 	ldw	r4,172(sp)
 400e06c:	1c47883a 	add	r3,r3,r17
 400e070:	10800044 	addi	r2,r2,1
 400e074:	41000015 	stw	r4,0(r8)
 400e078:	44400115 	stw	r17,4(r8)
 400e07c:	d8c02015 	stw	r3,128(sp)
 400e080:	d8801f15 	stw	r2,124(sp)
 400e084:	010001c4 	movi	r4,7
 400e088:	20bfd716 	blt	r4,r2,400dfe8 <__alt_data_end+0xfc00dfe8>
 400e08c:	42000204 	addi	r8,r8,8
 400e090:	003fdd06 	br	400e008 <__alt_data_end+0xfc00e008>
 400e094:	d9002c17 	ldw	r4,176(sp)
 400e098:	d9801e04 	addi	r6,sp,120
 400e09c:	b80b883a 	mov	r5,r23
 400e0a0:	4012ea40 	call	4012ea4 <__sprint_r>
 400e0a4:	1039ed1e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400e0a8:	d8802617 	ldw	r2,152(sp)
 400e0ac:	d8c02017 	ldw	r3,128(sp)
 400e0b0:	da000404 	addi	r8,sp,16
 400e0b4:	003e1006 	br	400d8f8 <__alt_data_end+0xfc00d8f8>
 400e0b8:	00800044 	movi	r2,1
 400e0bc:	10803fcc 	andi	r2,r2,255
 400e0c0:	00c00044 	movi	r3,1
 400e0c4:	10fa3526 	beq	r2,r3,400c99c <__alt_data_end+0xfc00c99c>
 400e0c8:	00c00084 	movi	r3,2
 400e0cc:	10fbcb26 	beq	r2,r3,400cffc <__alt_data_end+0xfc00cffc>
 400e0d0:	003a8f06 	br	400cb10 <__alt_data_end+0xfc00cb10>
 400e0d4:	010100b4 	movhi	r4,1026
 400e0d8:	2130a884 	addi	r4,r4,-15710
 400e0dc:	d9003515 	stw	r4,212(sp)
 400e0e0:	003b7606 	br	400cebc <__alt_data_end+0xfc00cebc>
 400e0e4:	d8802917 	ldw	r2,164(sp)
 400e0e8:	00c00184 	movi	r3,6
 400e0ec:	1880012e 	bgeu	r3,r2,400e0f4 <___vfprintf_internal_r+0x1ca0>
 400e0f0:	1805883a 	mov	r2,r3
 400e0f4:	d8802e15 	stw	r2,184(sp)
 400e0f8:	1000ef16 	blt	r2,zero,400e4b8 <___vfprintf_internal_r+0x2064>
 400e0fc:	040100b4 	movhi	r16,1026
 400e100:	d8802a15 	stw	r2,168(sp)
 400e104:	dcc02d15 	stw	r19,180(sp)
 400e108:	d8002915 	stw	zero,164(sp)
 400e10c:	d8003215 	stw	zero,200(sp)
 400e110:	8430a204 	addi	r16,r16,-15736
 400e114:	0039883a 	mov	fp,zero
 400e118:	003aa206 	br	400cba4 <__alt_data_end+0xfc00cba4>
 400e11c:	0021883a 	mov	r16,zero
 400e120:	003e0706 	br	400d940 <__alt_data_end+0xfc00d940>
 400e124:	d9002c17 	ldw	r4,176(sp)
 400e128:	d9801e04 	addi	r6,sp,120
 400e12c:	b80b883a 	mov	r5,r23
 400e130:	4012ea40 	call	4012ea4 <__sprint_r>
 400e134:	1039c91e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400e138:	d8802617 	ldw	r2,152(sp)
 400e13c:	d9403317 	ldw	r5,204(sp)
 400e140:	d8c02017 	ldw	r3,128(sp)
 400e144:	da000404 	addi	r8,sp,16
 400e148:	2885c83a 	sub	r2,r5,r2
 400e14c:	003dfb06 	br	400d93c <__alt_data_end+0xfc00d93c>
 400e150:	9080004c 	andi	r2,r18,1
 400e154:	103e8f1e 	bne	r2,zero,400db94 <__alt_data_end+0xfc00db94>
 400e158:	d8802117 	ldw	r2,132(sp)
 400e15c:	003e9e06 	br	400dbd8 <__alt_data_end+0xfc00dbd8>
 400e160:	1025883a 	mov	r18,r2
 400e164:	0039883a 	mov	fp,zero
 400e168:	00800084 	movi	r2,2
 400e16c:	003fd306 	br	400e0bc <__alt_data_end+0xfc00e0bc>
 400e170:	07000b44 	movi	fp,45
 400e174:	df002785 	stb	fp,158(sp)
 400e178:	003a4006 	br	400ca7c <__alt_data_end+0xfc00ca7c>
 400e17c:	00c00b44 	movi	r3,45
 400e180:	d8c02785 	stb	r3,158(sp)
 400e184:	d8802a15 	stw	r2,168(sp)
 400e188:	dc802b17 	ldw	r18,172(sp)
 400e18c:	d8002915 	stw	zero,164(sp)
 400e190:	07000b44 	movi	fp,45
 400e194:	003a8006 	br	400cb98 <__alt_data_end+0xfc00cb98>
 400e198:	040100b4 	movhi	r16,1026
 400e19c:	84309704 	addi	r16,r16,-15780
 400e1a0:	003f4706 	br	400dec0 <__alt_data_end+0xfc00dec0>
 400e1a4:	d8c02d17 	ldw	r3,180(sp)
 400e1a8:	d9002f17 	ldw	r4,188(sp)
 400e1ac:	18800017 	ldw	r2,0(r3)
 400e1b0:	18c00104 	addi	r3,r3,4
 400e1b4:	d8c02d15 	stw	r3,180(sp)
 400e1b8:	11000015 	stw	r4,0(r2)
 400e1bc:	0038dd06 	br	400c534 <__alt_data_end+0xfc00c534>
 400e1c0:	dd802617 	ldw	r22,152(sp)
 400e1c4:	00bfff44 	movi	r2,-3
 400e1c8:	b0801c16 	blt	r22,r2,400e23c <___vfprintf_internal_r+0x1de8>
 400e1cc:	d9402917 	ldw	r5,164(sp)
 400e1d0:	2d801a16 	blt	r5,r22,400e23c <___vfprintf_internal_r+0x1de8>
 400e1d4:	dd803215 	stw	r22,200(sp)
 400e1d8:	003e8906 	br	400dc00 <__alt_data_end+0xfc00dc00>
 400e1dc:	010100b4 	movhi	r4,1026
 400e1e0:	2130a484 	addi	r4,r4,-15726
 400e1e4:	d9002b15 	stw	r4,172(sp)
 400e1e8:	003c9106 	br	400d430 <__alt_data_end+0xfc00d430>
 400e1ec:	e005883a 	mov	r2,fp
 400e1f0:	003e7906 	br	400dbd8 <__alt_data_end+0xfc00dbd8>
 400e1f4:	d9402917 	ldw	r5,164(sp)
 400e1f8:	df002783 	ldbu	fp,158(sp)
 400e1fc:	dcc02d15 	stw	r19,180(sp)
 400e200:	d9402a15 	stw	r5,168(sp)
 400e204:	d9402e15 	stw	r5,184(sp)
 400e208:	d8002915 	stw	zero,164(sp)
 400e20c:	d8003215 	stw	zero,200(sp)
 400e210:	003a5d06 	br	400cb88 <__alt_data_end+0xfc00cb88>
 400e214:	9080004c 	andi	r2,r18,1
 400e218:	0039883a 	mov	fp,zero
 400e21c:	10000426 	beq	r2,zero,400e230 <___vfprintf_internal_r+0x1ddc>
 400e220:	00800c04 	movi	r2,48
 400e224:	dc001dc4 	addi	r16,sp,119
 400e228:	d8801dc5 	stb	r2,119(sp)
 400e22c:	003b8006 	br	400d030 <__alt_data_end+0xfc00d030>
 400e230:	d8002e15 	stw	zero,184(sp)
 400e234:	dc001e04 	addi	r16,sp,120
 400e238:	003a4d06 	br	400cb70 <__alt_data_end+0xfc00cb70>
 400e23c:	8c7fff84 	addi	r17,r17,-2
 400e240:	b5bfffc4 	addi	r22,r22,-1
 400e244:	dd802615 	stw	r22,152(sp)
 400e248:	dc4022c5 	stb	r17,139(sp)
 400e24c:	b000bf16 	blt	r22,zero,400e54c <___vfprintf_internal_r+0x20f8>
 400e250:	00800ac4 	movi	r2,43
 400e254:	d8802305 	stb	r2,140(sp)
 400e258:	00800244 	movi	r2,9
 400e25c:	15807016 	blt	r2,r22,400e420 <___vfprintf_internal_r+0x1fcc>
 400e260:	00800c04 	movi	r2,48
 400e264:	b5800c04 	addi	r22,r22,48
 400e268:	d8802345 	stb	r2,141(sp)
 400e26c:	dd802385 	stb	r22,142(sp)
 400e270:	d88023c4 	addi	r2,sp,143
 400e274:	df0022c4 	addi	fp,sp,139
 400e278:	d8c03317 	ldw	r3,204(sp)
 400e27c:	1739c83a 	sub	fp,r2,fp
 400e280:	d9003317 	ldw	r4,204(sp)
 400e284:	e0c7883a 	add	r3,fp,r3
 400e288:	df003a15 	stw	fp,232(sp)
 400e28c:	d8c02e15 	stw	r3,184(sp)
 400e290:	00800044 	movi	r2,1
 400e294:	1100b30e 	bge	r2,r4,400e564 <___vfprintf_internal_r+0x2110>
 400e298:	d8c02e17 	ldw	r3,184(sp)
 400e29c:	18c00044 	addi	r3,r3,1
 400e2a0:	d8c02e15 	stw	r3,184(sp)
 400e2a4:	1805883a 	mov	r2,r3
 400e2a8:	1800ac16 	blt	r3,zero,400e55c <___vfprintf_internal_r+0x2108>
 400e2ac:	d8003215 	stw	zero,200(sp)
 400e2b0:	003e5d06 	br	400dc28 <__alt_data_end+0xfc00dc28>
 400e2b4:	d9002c17 	ldw	r4,176(sp)
 400e2b8:	d9801e04 	addi	r6,sp,120
 400e2bc:	b80b883a 	mov	r5,r23
 400e2c0:	4012ea40 	call	4012ea4 <__sprint_r>
 400e2c4:	1039651e 	bne	r2,zero,400c85c <__alt_data_end+0xfc00c85c>
 400e2c8:	dc402617 	ldw	r17,152(sp)
 400e2cc:	d8c02017 	ldw	r3,128(sp)
 400e2d0:	d8801f17 	ldw	r2,124(sp)
 400e2d4:	da000404 	addi	r8,sp,16
 400e2d8:	003ed606 	br	400de34 <__alt_data_end+0xfc00de34>
 400e2dc:	582b883a 	mov	r21,r11
 400e2e0:	d8002915 	stw	zero,164(sp)
 400e2e4:	0038bd06 	br	400c5dc <__alt_data_end+0xfc00c5dc>
 400e2e8:	d8802917 	ldw	r2,164(sp)
 400e2ec:	103e071e 	bne	r2,zero,400db0c <__alt_data_end+0xfc00db0c>
 400e2f0:	dc002915 	stw	r16,164(sp)
 400e2f4:	003e0506 	br	400db0c <__alt_data_end+0xfc00db0c>
 400e2f8:	d9002917 	ldw	r4,164(sp)
 400e2fc:	20c00044 	addi	r3,r4,1
 400e300:	003e0f06 	br	400db40 <__alt_data_end+0xfc00db40>
 400e304:	01400184 	movi	r5,6
 400e308:	d9402915 	stw	r5,164(sp)
 400e30c:	003dff06 	br	400db0c <__alt_data_end+0xfc00db0c>
 400e310:	d8802104 	addi	r2,sp,132
 400e314:	d8800315 	stw	r2,12(sp)
 400e318:	d8802504 	addi	r2,sp,148
 400e31c:	d8800215 	stw	r2,8(sp)
 400e320:	d8802604 	addi	r2,sp,152
 400e324:	d8800115 	stw	r2,4(sp)
 400e328:	d8802917 	ldw	r2,164(sp)
 400e32c:	d9403617 	ldw	r5,216(sp)
 400e330:	d9002c17 	ldw	r4,176(sp)
 400e334:	d8800015 	stw	r2,0(sp)
 400e338:	01c000c4 	movi	r7,3
 400e33c:	980d883a 	mov	r6,r19
 400e340:	da003d15 	stw	r8,244(sp)
 400e344:	400ea780 	call	400ea78 <_dtoa_r>
 400e348:	d8c02917 	ldw	r3,164(sp)
 400e34c:	da003d17 	ldw	r8,244(sp)
 400e350:	1021883a 	mov	r16,r2
 400e354:	10f9883a 	add	fp,r2,r3
 400e358:	81000007 	ldb	r4,0(r16)
 400e35c:	00800c04 	movi	r2,48
 400e360:	20805e26 	beq	r4,r2,400e4dc <___vfprintf_internal_r+0x2088>
 400e364:	d8c02617 	ldw	r3,152(sp)
 400e368:	e0f9883a 	add	fp,fp,r3
 400e36c:	003e0a06 	br	400db98 <__alt_data_end+0xfc00db98>
 400e370:	00c00b44 	movi	r3,45
 400e374:	24e0003c 	xorhi	r19,r4,32768
 400e378:	d8c02a05 	stb	r3,168(sp)
 400e37c:	003de906 	br	400db24 <__alt_data_end+0xfc00db24>
 400e380:	d8c03217 	ldw	r3,200(sp)
 400e384:	00c07a0e 	bge	zero,r3,400e570 <___vfprintf_internal_r+0x211c>
 400e388:	00800044 	movi	r2,1
 400e38c:	d9003317 	ldw	r4,204(sp)
 400e390:	1105883a 	add	r2,r2,r4
 400e394:	d8802e15 	stw	r2,184(sp)
 400e398:	10004e16 	blt	r2,zero,400e4d4 <___vfprintf_internal_r+0x2080>
 400e39c:	044019c4 	movi	r17,103
 400e3a0:	003e2106 	br	400dc28 <__alt_data_end+0xfc00dc28>
 400e3a4:	d9002917 	ldw	r4,164(sp)
 400e3a8:	d8802104 	addi	r2,sp,132
 400e3ac:	d8800315 	stw	r2,12(sp)
 400e3b0:	d9000015 	stw	r4,0(sp)
 400e3b4:	d8802504 	addi	r2,sp,148
 400e3b8:	d9403617 	ldw	r5,216(sp)
 400e3bc:	d9002c17 	ldw	r4,176(sp)
 400e3c0:	d8800215 	stw	r2,8(sp)
 400e3c4:	d8802604 	addi	r2,sp,152
 400e3c8:	d8800115 	stw	r2,4(sp)
 400e3cc:	01c000c4 	movi	r7,3
 400e3d0:	980d883a 	mov	r6,r19
 400e3d4:	da003d15 	stw	r8,244(sp)
 400e3d8:	400ea780 	call	400ea78 <_dtoa_r>
 400e3dc:	d8c02917 	ldw	r3,164(sp)
 400e3e0:	da003d17 	ldw	r8,244(sp)
 400e3e4:	1021883a 	mov	r16,r2
 400e3e8:	00801184 	movi	r2,70
 400e3ec:	80f9883a 	add	fp,r16,r3
 400e3f0:	88bfd926 	beq	r17,r2,400e358 <__alt_data_end+0xfc00e358>
 400e3f4:	003de806 	br	400db98 <__alt_data_end+0xfc00db98>
 400e3f8:	d9002917 	ldw	r4,164(sp)
 400e3fc:	00c04d0e 	bge	zero,r3,400e534 <___vfprintf_internal_r+0x20e0>
 400e400:	2000441e 	bne	r4,zero,400e514 <___vfprintf_internal_r+0x20c0>
 400e404:	9480004c 	andi	r18,r18,1
 400e408:	9000421e 	bne	r18,zero,400e514 <___vfprintf_internal_r+0x20c0>
 400e40c:	1805883a 	mov	r2,r3
 400e410:	18007016 	blt	r3,zero,400e5d4 <___vfprintf_internal_r+0x2180>
 400e414:	d8c03217 	ldw	r3,200(sp)
 400e418:	d8c02e15 	stw	r3,184(sp)
 400e41c:	003e0206 	br	400dc28 <__alt_data_end+0xfc00dc28>
 400e420:	df0022c4 	addi	fp,sp,139
 400e424:	dc002915 	stw	r16,164(sp)
 400e428:	4027883a 	mov	r19,r8
 400e42c:	e021883a 	mov	r16,fp
 400e430:	b009883a 	mov	r4,r22
 400e434:	01400284 	movi	r5,10
 400e438:	400ac6c0 	call	400ac6c <__modsi3>
 400e43c:	10800c04 	addi	r2,r2,48
 400e440:	843fffc4 	addi	r16,r16,-1
 400e444:	b009883a 	mov	r4,r22
 400e448:	01400284 	movi	r5,10
 400e44c:	80800005 	stb	r2,0(r16)
 400e450:	400abe80 	call	400abe8 <__divsi3>
 400e454:	102d883a 	mov	r22,r2
 400e458:	00800244 	movi	r2,9
 400e45c:	15bff416 	blt	r2,r22,400e430 <__alt_data_end+0xfc00e430>
 400e460:	9811883a 	mov	r8,r19
 400e464:	b0800c04 	addi	r2,r22,48
 400e468:	8027883a 	mov	r19,r16
 400e46c:	997fffc4 	addi	r5,r19,-1
 400e470:	98bfffc5 	stb	r2,-1(r19)
 400e474:	dc002917 	ldw	r16,164(sp)
 400e478:	2f006a2e 	bgeu	r5,fp,400e624 <___vfprintf_internal_r+0x21d0>
 400e47c:	d9c02384 	addi	r7,sp,142
 400e480:	3ccfc83a 	sub	r7,r7,r19
 400e484:	d9002344 	addi	r4,sp,141
 400e488:	e1cf883a 	add	r7,fp,r7
 400e48c:	00000106 	br	400e494 <___vfprintf_internal_r+0x2040>
 400e490:	28800003 	ldbu	r2,0(r5)
 400e494:	20800005 	stb	r2,0(r4)
 400e498:	21000044 	addi	r4,r4,1
 400e49c:	29400044 	addi	r5,r5,1
 400e4a0:	393ffb1e 	bne	r7,r4,400e490 <__alt_data_end+0xfc00e490>
 400e4a4:	d8802304 	addi	r2,sp,140
 400e4a8:	14c5c83a 	sub	r2,r2,r19
 400e4ac:	d8c02344 	addi	r3,sp,141
 400e4b0:	1885883a 	add	r2,r3,r2
 400e4b4:	003f7006 	br	400e278 <__alt_data_end+0xfc00e278>
 400e4b8:	0005883a 	mov	r2,zero
 400e4bc:	003f0f06 	br	400e0fc <__alt_data_end+0xfc00e0fc>
 400e4c0:	d8c03217 	ldw	r3,200(sp)
 400e4c4:	18c00044 	addi	r3,r3,1
 400e4c8:	d8c02e15 	stw	r3,184(sp)
 400e4cc:	1805883a 	mov	r2,r3
 400e4d0:	183fb20e 	bge	r3,zero,400e39c <__alt_data_end+0xfc00e39c>
 400e4d4:	0005883a 	mov	r2,zero
 400e4d8:	003fb006 	br	400e39c <__alt_data_end+0xfc00e39c>
 400e4dc:	d9003617 	ldw	r4,216(sp)
 400e4e0:	000d883a 	mov	r6,zero
 400e4e4:	000f883a 	mov	r7,zero
 400e4e8:	980b883a 	mov	r5,r19
 400e4ec:	d8c03c15 	stw	r3,240(sp)
 400e4f0:	da003d15 	stw	r8,244(sp)
 400e4f4:	40169680 	call	4016968 <__eqdf2>
 400e4f8:	d8c03c17 	ldw	r3,240(sp)
 400e4fc:	da003d17 	ldw	r8,244(sp)
 400e500:	103f9826 	beq	r2,zero,400e364 <__alt_data_end+0xfc00e364>
 400e504:	00800044 	movi	r2,1
 400e508:	10c7c83a 	sub	r3,r2,r3
 400e50c:	d8c02615 	stw	r3,152(sp)
 400e510:	003f9506 	br	400e368 <__alt_data_end+0xfc00e368>
 400e514:	d9002917 	ldw	r4,164(sp)
 400e518:	d8c03217 	ldw	r3,200(sp)
 400e51c:	20800044 	addi	r2,r4,1
 400e520:	1885883a 	add	r2,r3,r2
 400e524:	d8802e15 	stw	r2,184(sp)
 400e528:	103dbf0e 	bge	r2,zero,400dc28 <__alt_data_end+0xfc00dc28>
 400e52c:	0005883a 	mov	r2,zero
 400e530:	003dbd06 	br	400dc28 <__alt_data_end+0xfc00dc28>
 400e534:	2000211e 	bne	r4,zero,400e5bc <___vfprintf_internal_r+0x2168>
 400e538:	9480004c 	andi	r18,r18,1
 400e53c:	90001f1e 	bne	r18,zero,400e5bc <___vfprintf_internal_r+0x2168>
 400e540:	00800044 	movi	r2,1
 400e544:	d8802e15 	stw	r2,184(sp)
 400e548:	003db706 	br	400dc28 <__alt_data_end+0xfc00dc28>
 400e54c:	00800b44 	movi	r2,45
 400e550:	05adc83a 	sub	r22,zero,r22
 400e554:	d8802305 	stb	r2,140(sp)
 400e558:	003f3f06 	br	400e258 <__alt_data_end+0xfc00e258>
 400e55c:	0005883a 	mov	r2,zero
 400e560:	003f5206 	br	400e2ac <__alt_data_end+0xfc00e2ac>
 400e564:	90a4703a 	and	r18,r18,r2
 400e568:	903f4e26 	beq	r18,zero,400e2a4 <__alt_data_end+0xfc00e2a4>
 400e56c:	003f4a06 	br	400e298 <__alt_data_end+0xfc00e298>
 400e570:	00800084 	movi	r2,2
 400e574:	10c5c83a 	sub	r2,r2,r3
 400e578:	003f8406 	br	400e38c <__alt_data_end+0xfc00e38c>
 400e57c:	d8802d17 	ldw	r2,180(sp)
 400e580:	d9002d17 	ldw	r4,180(sp)
 400e584:	ac400043 	ldbu	r17,1(r21)
 400e588:	10800017 	ldw	r2,0(r2)
 400e58c:	582b883a 	mov	r21,r11
 400e590:	d8802915 	stw	r2,164(sp)
 400e594:	20800104 	addi	r2,r4,4
 400e598:	d9002917 	ldw	r4,164(sp)
 400e59c:	d8802d15 	stw	r2,180(sp)
 400e5a0:	203e7a0e 	bge	r4,zero,400df8c <__alt_data_end+0xfc00df8c>
 400e5a4:	8c403fcc 	andi	r17,r17,255
 400e5a8:	00bfffc4 	movi	r2,-1
 400e5ac:	8c40201c 	xori	r17,r17,128
 400e5b0:	d8802915 	stw	r2,164(sp)
 400e5b4:	8c7fe004 	addi	r17,r17,-128
 400e5b8:	00380706 	br	400c5d8 <__alt_data_end+0xfc00c5d8>
 400e5bc:	d8c02917 	ldw	r3,164(sp)
 400e5c0:	18c00084 	addi	r3,r3,2
 400e5c4:	d8c02e15 	stw	r3,184(sp)
 400e5c8:	1805883a 	mov	r2,r3
 400e5cc:	183d960e 	bge	r3,zero,400dc28 <__alt_data_end+0xfc00dc28>
 400e5d0:	003fd606 	br	400e52c <__alt_data_end+0xfc00e52c>
 400e5d4:	0005883a 	mov	r2,zero
 400e5d8:	003f8e06 	br	400e414 <__alt_data_end+0xfc00e414>
 400e5dc:	9080004c 	andi	r2,r18,1
 400e5e0:	103f811e 	bne	r2,zero,400e3e8 <__alt_data_end+0xfc00e3e8>
 400e5e4:	d8802117 	ldw	r2,132(sp)
 400e5e8:	1405c83a 	sub	r2,r2,r16
 400e5ec:	d8803315 	stw	r2,204(sp)
 400e5f0:	b47ef326 	beq	r22,r17,400e1c0 <__alt_data_end+0xfc00e1c0>
 400e5f4:	dd802617 	ldw	r22,152(sp)
 400e5f8:	003f1106 	br	400e240 <__alt_data_end+0xfc00e240>
 400e5fc:	d9c02785 	stb	r7,158(sp)
 400e600:	00390406 	br	400ca14 <__alt_data_end+0xfc00ca14>
 400e604:	d9c02785 	stb	r7,158(sp)
 400e608:	0038d306 	br	400c958 <__alt_data_end+0xfc00c958>
 400e60c:	d9c02785 	stb	r7,158(sp)
 400e610:	003a6106 	br	400cf98 <__alt_data_end+0xfc00cf98>
 400e614:	d9c02785 	stb	r7,158(sp)
 400e618:	003af806 	br	400d1fc <__alt_data_end+0xfc00d1fc>
 400e61c:	0005883a 	mov	r2,zero
 400e620:	003d7e06 	br	400dc1c <__alt_data_end+0xfc00dc1c>
 400e624:	d8802344 	addi	r2,sp,141
 400e628:	003f1306 	br	400e278 <__alt_data_end+0xfc00e278>
 400e62c:	d9c02785 	stb	r7,158(sp)
 400e630:	00392306 	br	400cac0 <__alt_data_end+0xfc00cac0>
 400e634:	d9c02785 	stb	r7,158(sp)
 400e638:	003aa906 	br	400d0e0 <__alt_data_end+0xfc00d0e0>
 400e63c:	d9c02785 	stb	r7,158(sp)
 400e640:	003a3d06 	br	400cf38 <__alt_data_end+0xfc00cf38>
 400e644:	d9c02785 	stb	r7,158(sp)
 400e648:	003aca06 	br	400d174 <__alt_data_end+0xfc00d174>

0400e64c <__vfprintf_internal>:
 400e64c:	008100f4 	movhi	r2,1027
 400e650:	10a3e504 	addi	r2,r2,-28780
 400e654:	300f883a 	mov	r7,r6
 400e658:	280d883a 	mov	r6,r5
 400e65c:	200b883a 	mov	r5,r4
 400e660:	11000017 	ldw	r4,0(r2)
 400e664:	400c4541 	jmpi	400c454 <___vfprintf_internal_r>

0400e668 <__sbprintf>:
 400e668:	2880030b 	ldhu	r2,12(r5)
 400e66c:	2ac01917 	ldw	r11,100(r5)
 400e670:	2a80038b 	ldhu	r10,14(r5)
 400e674:	2a400717 	ldw	r9,28(r5)
 400e678:	2a000917 	ldw	r8,36(r5)
 400e67c:	defee204 	addi	sp,sp,-1144
 400e680:	00c10004 	movi	r3,1024
 400e684:	dc011a15 	stw	r16,1128(sp)
 400e688:	10bfff4c 	andi	r2,r2,65533
 400e68c:	2821883a 	mov	r16,r5
 400e690:	d8cb883a 	add	r5,sp,r3
 400e694:	dc811c15 	stw	r18,1136(sp)
 400e698:	dc411b15 	stw	r17,1132(sp)
 400e69c:	dfc11d15 	stw	ra,1140(sp)
 400e6a0:	2025883a 	mov	r18,r4
 400e6a4:	d881030d 	sth	r2,1036(sp)
 400e6a8:	dac11915 	stw	r11,1124(sp)
 400e6ac:	da81038d 	sth	r10,1038(sp)
 400e6b0:	da410715 	stw	r9,1052(sp)
 400e6b4:	da010915 	stw	r8,1060(sp)
 400e6b8:	dec10015 	stw	sp,1024(sp)
 400e6bc:	dec10415 	stw	sp,1040(sp)
 400e6c0:	d8c10215 	stw	r3,1032(sp)
 400e6c4:	d8c10515 	stw	r3,1044(sp)
 400e6c8:	d8010615 	stw	zero,1048(sp)
 400e6cc:	400c4540 	call	400c454 <___vfprintf_internal_r>
 400e6d0:	1023883a 	mov	r17,r2
 400e6d4:	10000416 	blt	r2,zero,400e6e8 <__sbprintf+0x80>
 400e6d8:	d9410004 	addi	r5,sp,1024
 400e6dc:	9009883a 	mov	r4,r18
 400e6e0:	401031c0 	call	401031c <_fflush_r>
 400e6e4:	10000d1e 	bne	r2,zero,400e71c <__sbprintf+0xb4>
 400e6e8:	d881030b 	ldhu	r2,1036(sp)
 400e6ec:	1080100c 	andi	r2,r2,64
 400e6f0:	10000326 	beq	r2,zero,400e700 <__sbprintf+0x98>
 400e6f4:	8080030b 	ldhu	r2,12(r16)
 400e6f8:	10801014 	ori	r2,r2,64
 400e6fc:	8080030d 	sth	r2,12(r16)
 400e700:	8805883a 	mov	r2,r17
 400e704:	dfc11d17 	ldw	ra,1140(sp)
 400e708:	dc811c17 	ldw	r18,1136(sp)
 400e70c:	dc411b17 	ldw	r17,1132(sp)
 400e710:	dc011a17 	ldw	r16,1128(sp)
 400e714:	dec11e04 	addi	sp,sp,1144
 400e718:	f800283a 	ret
 400e71c:	047fffc4 	movi	r17,-1
 400e720:	003ff106 	br	400e6e8 <__alt_data_end+0xfc00e6e8>

0400e724 <__swsetup_r>:
 400e724:	008100f4 	movhi	r2,1027
 400e728:	defffd04 	addi	sp,sp,-12
 400e72c:	10a3e504 	addi	r2,r2,-28780
 400e730:	dc400115 	stw	r17,4(sp)
 400e734:	2023883a 	mov	r17,r4
 400e738:	11000017 	ldw	r4,0(r2)
 400e73c:	dc000015 	stw	r16,0(sp)
 400e740:	dfc00215 	stw	ra,8(sp)
 400e744:	2821883a 	mov	r16,r5
 400e748:	20000226 	beq	r4,zero,400e754 <__swsetup_r+0x30>
 400e74c:	20800e17 	ldw	r2,56(r4)
 400e750:	10003126 	beq	r2,zero,400e818 <__swsetup_r+0xf4>
 400e754:	8080030b 	ldhu	r2,12(r16)
 400e758:	10c0020c 	andi	r3,r2,8
 400e75c:	1009883a 	mov	r4,r2
 400e760:	18000f26 	beq	r3,zero,400e7a0 <__swsetup_r+0x7c>
 400e764:	80c00417 	ldw	r3,16(r16)
 400e768:	18001526 	beq	r3,zero,400e7c0 <__swsetup_r+0x9c>
 400e76c:	1100004c 	andi	r4,r2,1
 400e770:	20001c1e 	bne	r4,zero,400e7e4 <__swsetup_r+0xc0>
 400e774:	1080008c 	andi	r2,r2,2
 400e778:	1000291e 	bne	r2,zero,400e820 <__swsetup_r+0xfc>
 400e77c:	80800517 	ldw	r2,20(r16)
 400e780:	80800215 	stw	r2,8(r16)
 400e784:	18001c26 	beq	r3,zero,400e7f8 <__swsetup_r+0xd4>
 400e788:	0005883a 	mov	r2,zero
 400e78c:	dfc00217 	ldw	ra,8(sp)
 400e790:	dc400117 	ldw	r17,4(sp)
 400e794:	dc000017 	ldw	r16,0(sp)
 400e798:	dec00304 	addi	sp,sp,12
 400e79c:	f800283a 	ret
 400e7a0:	2080040c 	andi	r2,r4,16
 400e7a4:	10002e26 	beq	r2,zero,400e860 <__swsetup_r+0x13c>
 400e7a8:	2080010c 	andi	r2,r4,4
 400e7ac:	10001e1e 	bne	r2,zero,400e828 <__swsetup_r+0x104>
 400e7b0:	80c00417 	ldw	r3,16(r16)
 400e7b4:	20800214 	ori	r2,r4,8
 400e7b8:	8080030d 	sth	r2,12(r16)
 400e7bc:	183feb1e 	bne	r3,zero,400e76c <__alt_data_end+0xfc00e76c>
 400e7c0:	1100a00c 	andi	r4,r2,640
 400e7c4:	01408004 	movi	r5,512
 400e7c8:	217fe826 	beq	r4,r5,400e76c <__alt_data_end+0xfc00e76c>
 400e7cc:	800b883a 	mov	r5,r16
 400e7d0:	8809883a 	mov	r4,r17
 400e7d4:	401129c0 	call	401129c <__smakebuf_r>
 400e7d8:	8080030b 	ldhu	r2,12(r16)
 400e7dc:	80c00417 	ldw	r3,16(r16)
 400e7e0:	003fe206 	br	400e76c <__alt_data_end+0xfc00e76c>
 400e7e4:	80800517 	ldw	r2,20(r16)
 400e7e8:	80000215 	stw	zero,8(r16)
 400e7ec:	0085c83a 	sub	r2,zero,r2
 400e7f0:	80800615 	stw	r2,24(r16)
 400e7f4:	183fe41e 	bne	r3,zero,400e788 <__alt_data_end+0xfc00e788>
 400e7f8:	80c0030b 	ldhu	r3,12(r16)
 400e7fc:	0005883a 	mov	r2,zero
 400e800:	1900200c 	andi	r4,r3,128
 400e804:	203fe126 	beq	r4,zero,400e78c <__alt_data_end+0xfc00e78c>
 400e808:	18c01014 	ori	r3,r3,64
 400e80c:	80c0030d 	sth	r3,12(r16)
 400e810:	00bfffc4 	movi	r2,-1
 400e814:	003fdd06 	br	400e78c <__alt_data_end+0xfc00e78c>
 400e818:	40106f80 	call	40106f8 <__sinit>
 400e81c:	003fcd06 	br	400e754 <__alt_data_end+0xfc00e754>
 400e820:	0005883a 	mov	r2,zero
 400e824:	003fd606 	br	400e780 <__alt_data_end+0xfc00e780>
 400e828:	81400c17 	ldw	r5,48(r16)
 400e82c:	28000626 	beq	r5,zero,400e848 <__swsetup_r+0x124>
 400e830:	80801004 	addi	r2,r16,64
 400e834:	28800326 	beq	r5,r2,400e844 <__swsetup_r+0x120>
 400e838:	8809883a 	mov	r4,r17
 400e83c:	401086c0 	call	401086c <_free_r>
 400e840:	8100030b 	ldhu	r4,12(r16)
 400e844:	80000c15 	stw	zero,48(r16)
 400e848:	80c00417 	ldw	r3,16(r16)
 400e84c:	00bff6c4 	movi	r2,-37
 400e850:	1108703a 	and	r4,r2,r4
 400e854:	80000115 	stw	zero,4(r16)
 400e858:	80c00015 	stw	r3,0(r16)
 400e85c:	003fd506 	br	400e7b4 <__alt_data_end+0xfc00e7b4>
 400e860:	00800244 	movi	r2,9
 400e864:	88800015 	stw	r2,0(r17)
 400e868:	20801014 	ori	r2,r4,64
 400e86c:	8080030d 	sth	r2,12(r16)
 400e870:	00bfffc4 	movi	r2,-1
 400e874:	003fc506 	br	400e78c <__alt_data_end+0xfc00e78c>

0400e878 <quorem>:
 400e878:	defff704 	addi	sp,sp,-36
 400e87c:	dc800215 	stw	r18,8(sp)
 400e880:	20800417 	ldw	r2,16(r4)
 400e884:	2c800417 	ldw	r18,16(r5)
 400e888:	dfc00815 	stw	ra,32(sp)
 400e88c:	ddc00715 	stw	r23,28(sp)
 400e890:	dd800615 	stw	r22,24(sp)
 400e894:	dd400515 	stw	r21,20(sp)
 400e898:	dd000415 	stw	r20,16(sp)
 400e89c:	dcc00315 	stw	r19,12(sp)
 400e8a0:	dc400115 	stw	r17,4(sp)
 400e8a4:	dc000015 	stw	r16,0(sp)
 400e8a8:	14807116 	blt	r2,r18,400ea70 <quorem+0x1f8>
 400e8ac:	94bfffc4 	addi	r18,r18,-1
 400e8b0:	94ad883a 	add	r22,r18,r18
 400e8b4:	b5ad883a 	add	r22,r22,r22
 400e8b8:	2c400504 	addi	r17,r5,20
 400e8bc:	8da9883a 	add	r20,r17,r22
 400e8c0:	25400504 	addi	r21,r4,20
 400e8c4:	282f883a 	mov	r23,r5
 400e8c8:	adad883a 	add	r22,r21,r22
 400e8cc:	a1400017 	ldw	r5,0(r20)
 400e8d0:	2021883a 	mov	r16,r4
 400e8d4:	b1000017 	ldw	r4,0(r22)
 400e8d8:	29400044 	addi	r5,r5,1
 400e8dc:	400ace00 	call	400ace0 <__udivsi3>
 400e8e0:	1027883a 	mov	r19,r2
 400e8e4:	10002c26 	beq	r2,zero,400e998 <quorem+0x120>
 400e8e8:	a813883a 	mov	r9,r21
 400e8ec:	880b883a 	mov	r5,r17
 400e8f0:	0009883a 	mov	r4,zero
 400e8f4:	000d883a 	mov	r6,zero
 400e8f8:	2a000017 	ldw	r8,0(r5)
 400e8fc:	49c00017 	ldw	r7,0(r9)
 400e900:	29400104 	addi	r5,r5,4
 400e904:	40bfffcc 	andi	r2,r8,65535
 400e908:	14c5383a 	mul	r2,r2,r19
 400e90c:	4010d43a 	srli	r8,r8,16
 400e910:	38ffffcc 	andi	r3,r7,65535
 400e914:	1105883a 	add	r2,r2,r4
 400e918:	1008d43a 	srli	r4,r2,16
 400e91c:	44d1383a 	mul	r8,r8,r19
 400e920:	198d883a 	add	r6,r3,r6
 400e924:	10ffffcc 	andi	r3,r2,65535
 400e928:	30c7c83a 	sub	r3,r6,r3
 400e92c:	380ed43a 	srli	r7,r7,16
 400e930:	4105883a 	add	r2,r8,r4
 400e934:	180dd43a 	srai	r6,r3,16
 400e938:	113fffcc 	andi	r4,r2,65535
 400e93c:	390fc83a 	sub	r7,r7,r4
 400e940:	398d883a 	add	r6,r7,r6
 400e944:	300e943a 	slli	r7,r6,16
 400e948:	18ffffcc 	andi	r3,r3,65535
 400e94c:	1008d43a 	srli	r4,r2,16
 400e950:	38ceb03a 	or	r7,r7,r3
 400e954:	49c00015 	stw	r7,0(r9)
 400e958:	300dd43a 	srai	r6,r6,16
 400e95c:	4a400104 	addi	r9,r9,4
 400e960:	a17fe52e 	bgeu	r20,r5,400e8f8 <__alt_data_end+0xfc00e8f8>
 400e964:	b0800017 	ldw	r2,0(r22)
 400e968:	10000b1e 	bne	r2,zero,400e998 <quorem+0x120>
 400e96c:	b0bfff04 	addi	r2,r22,-4
 400e970:	a880082e 	bgeu	r21,r2,400e994 <quorem+0x11c>
 400e974:	b0ffff17 	ldw	r3,-4(r22)
 400e978:	18000326 	beq	r3,zero,400e988 <quorem+0x110>
 400e97c:	00000506 	br	400e994 <quorem+0x11c>
 400e980:	10c00017 	ldw	r3,0(r2)
 400e984:	1800031e 	bne	r3,zero,400e994 <quorem+0x11c>
 400e988:	10bfff04 	addi	r2,r2,-4
 400e98c:	94bfffc4 	addi	r18,r18,-1
 400e990:	a8bffb36 	bltu	r21,r2,400e980 <__alt_data_end+0xfc00e980>
 400e994:	84800415 	stw	r18,16(r16)
 400e998:	b80b883a 	mov	r5,r23
 400e99c:	8009883a 	mov	r4,r16
 400e9a0:	4011f600 	call	4011f60 <__mcmp>
 400e9a4:	10002616 	blt	r2,zero,400ea40 <quorem+0x1c8>
 400e9a8:	9cc00044 	addi	r19,r19,1
 400e9ac:	a805883a 	mov	r2,r21
 400e9b0:	000b883a 	mov	r5,zero
 400e9b4:	11000017 	ldw	r4,0(r2)
 400e9b8:	89800017 	ldw	r6,0(r17)
 400e9bc:	10800104 	addi	r2,r2,4
 400e9c0:	20ffffcc 	andi	r3,r4,65535
 400e9c4:	194b883a 	add	r5,r3,r5
 400e9c8:	30ffffcc 	andi	r3,r6,65535
 400e9cc:	28c7c83a 	sub	r3,r5,r3
 400e9d0:	300cd43a 	srli	r6,r6,16
 400e9d4:	2008d43a 	srli	r4,r4,16
 400e9d8:	180bd43a 	srai	r5,r3,16
 400e9dc:	18ffffcc 	andi	r3,r3,65535
 400e9e0:	2189c83a 	sub	r4,r4,r6
 400e9e4:	2149883a 	add	r4,r4,r5
 400e9e8:	200c943a 	slli	r6,r4,16
 400e9ec:	8c400104 	addi	r17,r17,4
 400e9f0:	200bd43a 	srai	r5,r4,16
 400e9f4:	30c6b03a 	or	r3,r6,r3
 400e9f8:	10ffff15 	stw	r3,-4(r2)
 400e9fc:	a47fed2e 	bgeu	r20,r17,400e9b4 <__alt_data_end+0xfc00e9b4>
 400ea00:	9485883a 	add	r2,r18,r18
 400ea04:	1085883a 	add	r2,r2,r2
 400ea08:	a887883a 	add	r3,r21,r2
 400ea0c:	18800017 	ldw	r2,0(r3)
 400ea10:	10000b1e 	bne	r2,zero,400ea40 <quorem+0x1c8>
 400ea14:	18bfff04 	addi	r2,r3,-4
 400ea18:	a880082e 	bgeu	r21,r2,400ea3c <quorem+0x1c4>
 400ea1c:	18ffff17 	ldw	r3,-4(r3)
 400ea20:	18000326 	beq	r3,zero,400ea30 <quorem+0x1b8>
 400ea24:	00000506 	br	400ea3c <quorem+0x1c4>
 400ea28:	10c00017 	ldw	r3,0(r2)
 400ea2c:	1800031e 	bne	r3,zero,400ea3c <quorem+0x1c4>
 400ea30:	10bfff04 	addi	r2,r2,-4
 400ea34:	94bfffc4 	addi	r18,r18,-1
 400ea38:	a8bffb36 	bltu	r21,r2,400ea28 <__alt_data_end+0xfc00ea28>
 400ea3c:	84800415 	stw	r18,16(r16)
 400ea40:	9805883a 	mov	r2,r19
 400ea44:	dfc00817 	ldw	ra,32(sp)
 400ea48:	ddc00717 	ldw	r23,28(sp)
 400ea4c:	dd800617 	ldw	r22,24(sp)
 400ea50:	dd400517 	ldw	r21,20(sp)
 400ea54:	dd000417 	ldw	r20,16(sp)
 400ea58:	dcc00317 	ldw	r19,12(sp)
 400ea5c:	dc800217 	ldw	r18,8(sp)
 400ea60:	dc400117 	ldw	r17,4(sp)
 400ea64:	dc000017 	ldw	r16,0(sp)
 400ea68:	dec00904 	addi	sp,sp,36
 400ea6c:	f800283a 	ret
 400ea70:	0005883a 	mov	r2,zero
 400ea74:	003ff306 	br	400ea44 <__alt_data_end+0xfc00ea44>

0400ea78 <_dtoa_r>:
 400ea78:	20801017 	ldw	r2,64(r4)
 400ea7c:	deffde04 	addi	sp,sp,-136
 400ea80:	df002015 	stw	fp,128(sp)
 400ea84:	dcc01b15 	stw	r19,108(sp)
 400ea88:	dc801a15 	stw	r18,104(sp)
 400ea8c:	dc401915 	stw	r17,100(sp)
 400ea90:	dc001815 	stw	r16,96(sp)
 400ea94:	dfc02115 	stw	ra,132(sp)
 400ea98:	ddc01f15 	stw	r23,124(sp)
 400ea9c:	dd801e15 	stw	r22,120(sp)
 400eaa0:	dd401d15 	stw	r21,116(sp)
 400eaa4:	dd001c15 	stw	r20,112(sp)
 400eaa8:	d9c00315 	stw	r7,12(sp)
 400eaac:	2039883a 	mov	fp,r4
 400eab0:	3023883a 	mov	r17,r6
 400eab4:	2825883a 	mov	r18,r5
 400eab8:	dc002417 	ldw	r16,144(sp)
 400eabc:	3027883a 	mov	r19,r6
 400eac0:	10000826 	beq	r2,zero,400eae4 <_dtoa_r+0x6c>
 400eac4:	21801117 	ldw	r6,68(r4)
 400eac8:	00c00044 	movi	r3,1
 400eacc:	100b883a 	mov	r5,r2
 400ead0:	1986983a 	sll	r3,r3,r6
 400ead4:	11800115 	stw	r6,4(r2)
 400ead8:	10c00215 	stw	r3,8(r2)
 400eadc:	40117400 	call	4011740 <_Bfree>
 400eae0:	e0001015 	stw	zero,64(fp)
 400eae4:	88002e16 	blt	r17,zero,400eba0 <_dtoa_r+0x128>
 400eae8:	80000015 	stw	zero,0(r16)
 400eaec:	889ffc2c 	andhi	r2,r17,32752
 400eaf0:	00dffc34 	movhi	r3,32752
 400eaf4:	10c01c26 	beq	r2,r3,400eb68 <_dtoa_r+0xf0>
 400eaf8:	000d883a 	mov	r6,zero
 400eafc:	000f883a 	mov	r7,zero
 400eb00:	9009883a 	mov	r4,r18
 400eb04:	980b883a 	mov	r5,r19
 400eb08:	40169680 	call	4016968 <__eqdf2>
 400eb0c:	10002b1e 	bne	r2,zero,400ebbc <_dtoa_r+0x144>
 400eb10:	d9c02317 	ldw	r7,140(sp)
 400eb14:	00800044 	movi	r2,1
 400eb18:	38800015 	stw	r2,0(r7)
 400eb1c:	d8802517 	ldw	r2,148(sp)
 400eb20:	10019e26 	beq	r2,zero,400f19c <_dtoa_r+0x724>
 400eb24:	d8c02517 	ldw	r3,148(sp)
 400eb28:	008100b4 	movhi	r2,1026
 400eb2c:	10b0a444 	addi	r2,r2,-15727
 400eb30:	18800015 	stw	r2,0(r3)
 400eb34:	10bfffc4 	addi	r2,r2,-1
 400eb38:	dfc02117 	ldw	ra,132(sp)
 400eb3c:	df002017 	ldw	fp,128(sp)
 400eb40:	ddc01f17 	ldw	r23,124(sp)
 400eb44:	dd801e17 	ldw	r22,120(sp)
 400eb48:	dd401d17 	ldw	r21,116(sp)
 400eb4c:	dd001c17 	ldw	r20,112(sp)
 400eb50:	dcc01b17 	ldw	r19,108(sp)
 400eb54:	dc801a17 	ldw	r18,104(sp)
 400eb58:	dc401917 	ldw	r17,100(sp)
 400eb5c:	dc001817 	ldw	r16,96(sp)
 400eb60:	dec02204 	addi	sp,sp,136
 400eb64:	f800283a 	ret
 400eb68:	d8c02317 	ldw	r3,140(sp)
 400eb6c:	0089c3c4 	movi	r2,9999
 400eb70:	18800015 	stw	r2,0(r3)
 400eb74:	90017726 	beq	r18,zero,400f154 <_dtoa_r+0x6dc>
 400eb78:	008100b4 	movhi	r2,1026
 400eb7c:	10b0b004 	addi	r2,r2,-15680
 400eb80:	d9002517 	ldw	r4,148(sp)
 400eb84:	203fec26 	beq	r4,zero,400eb38 <__alt_data_end+0xfc00eb38>
 400eb88:	10c000c7 	ldb	r3,3(r2)
 400eb8c:	1801781e 	bne	r3,zero,400f170 <_dtoa_r+0x6f8>
 400eb90:	10c000c4 	addi	r3,r2,3
 400eb94:	d9802517 	ldw	r6,148(sp)
 400eb98:	30c00015 	stw	r3,0(r6)
 400eb9c:	003fe606 	br	400eb38 <__alt_data_end+0xfc00eb38>
 400eba0:	04e00034 	movhi	r19,32768
 400eba4:	9cffffc4 	addi	r19,r19,-1
 400eba8:	00800044 	movi	r2,1
 400ebac:	8ce6703a 	and	r19,r17,r19
 400ebb0:	80800015 	stw	r2,0(r16)
 400ebb4:	9823883a 	mov	r17,r19
 400ebb8:	003fcc06 	br	400eaec <__alt_data_end+0xfc00eaec>
 400ebbc:	d8800204 	addi	r2,sp,8
 400ebc0:	d8800015 	stw	r2,0(sp)
 400ebc4:	d9c00104 	addi	r7,sp,4
 400ebc8:	900b883a 	mov	r5,r18
 400ebcc:	980d883a 	mov	r6,r19
 400ebd0:	e009883a 	mov	r4,fp
 400ebd4:	8820d53a 	srli	r16,r17,20
 400ebd8:	401232c0 	call	401232c <__d2b>
 400ebdc:	d8800915 	stw	r2,36(sp)
 400ebe0:	8001651e 	bne	r16,zero,400f178 <_dtoa_r+0x700>
 400ebe4:	dd800217 	ldw	r22,8(sp)
 400ebe8:	dc000117 	ldw	r16,4(sp)
 400ebec:	00800804 	movi	r2,32
 400ebf0:	b421883a 	add	r16,r22,r16
 400ebf4:	80c10c84 	addi	r3,r16,1074
 400ebf8:	10c2d10e 	bge	r2,r3,400f740 <_dtoa_r+0xcc8>
 400ebfc:	00801004 	movi	r2,64
 400ec00:	81010484 	addi	r4,r16,1042
 400ec04:	10c7c83a 	sub	r3,r2,r3
 400ec08:	9108d83a 	srl	r4,r18,r4
 400ec0c:	88e2983a 	sll	r17,r17,r3
 400ec10:	2448b03a 	or	r4,r4,r17
 400ec14:	4017d300 	call	4017d30 <__floatunsidf>
 400ec18:	017f8434 	movhi	r5,65040
 400ec1c:	01800044 	movi	r6,1
 400ec20:	1009883a 	mov	r4,r2
 400ec24:	194b883a 	add	r5,r3,r5
 400ec28:	843fffc4 	addi	r16,r16,-1
 400ec2c:	d9801115 	stw	r6,68(sp)
 400ec30:	000d883a 	mov	r6,zero
 400ec34:	01cffe34 	movhi	r7,16376
 400ec38:	40172d80 	call	40172d8 <__subdf3>
 400ec3c:	0198dbf4 	movhi	r6,25455
 400ec40:	01cff4f4 	movhi	r7,16339
 400ec44:	3190d844 	addi	r6,r6,17249
 400ec48:	39e1e9c4 	addi	r7,r7,-30809
 400ec4c:	1009883a 	mov	r4,r2
 400ec50:	180b883a 	mov	r5,r3
 400ec54:	4016bc00 	call	4016bc0 <__muldf3>
 400ec58:	01a2d874 	movhi	r6,35681
 400ec5c:	01cff1f4 	movhi	r7,16327
 400ec60:	31b22cc4 	addi	r6,r6,-14157
 400ec64:	39e28a04 	addi	r7,r7,-30168
 400ec68:	180b883a 	mov	r5,r3
 400ec6c:	1009883a 	mov	r4,r2
 400ec70:	40157d40 	call	40157d4 <__adddf3>
 400ec74:	8009883a 	mov	r4,r16
 400ec78:	1029883a 	mov	r20,r2
 400ec7c:	1823883a 	mov	r17,r3
 400ec80:	4017c540 	call	4017c54 <__floatsidf>
 400ec84:	019427f4 	movhi	r6,20639
 400ec88:	01cff4f4 	movhi	r7,16339
 400ec8c:	319e7ec4 	addi	r6,r6,31227
 400ec90:	39d104c4 	addi	r7,r7,17427
 400ec94:	1009883a 	mov	r4,r2
 400ec98:	180b883a 	mov	r5,r3
 400ec9c:	4016bc00 	call	4016bc0 <__muldf3>
 400eca0:	100d883a 	mov	r6,r2
 400eca4:	180f883a 	mov	r7,r3
 400eca8:	a009883a 	mov	r4,r20
 400ecac:	880b883a 	mov	r5,r17
 400ecb0:	40157d40 	call	40157d4 <__adddf3>
 400ecb4:	1009883a 	mov	r4,r2
 400ecb8:	180b883a 	mov	r5,r3
 400ecbc:	1029883a 	mov	r20,r2
 400ecc0:	1823883a 	mov	r17,r3
 400ecc4:	4017bd40 	call	4017bd4 <__fixdfsi>
 400ecc8:	000d883a 	mov	r6,zero
 400eccc:	000f883a 	mov	r7,zero
 400ecd0:	a009883a 	mov	r4,r20
 400ecd4:	880b883a 	mov	r5,r17
 400ecd8:	d8800515 	stw	r2,20(sp)
 400ecdc:	4016acc0 	call	4016acc <__ledf2>
 400ece0:	10028716 	blt	r2,zero,400f700 <_dtoa_r+0xc88>
 400ece4:	d8c00517 	ldw	r3,20(sp)
 400ece8:	00800584 	movi	r2,22
 400ecec:	10c27536 	bltu	r2,r3,400f6c4 <_dtoa_r+0xc4c>
 400ecf0:	180490fa 	slli	r2,r3,3
 400ecf4:	00c100b4 	movhi	r3,1026
 400ecf8:	18f0cb04 	addi	r3,r3,-15572
 400ecfc:	1885883a 	add	r2,r3,r2
 400ed00:	11000017 	ldw	r4,0(r2)
 400ed04:	11400117 	ldw	r5,4(r2)
 400ed08:	900d883a 	mov	r6,r18
 400ed0c:	980f883a 	mov	r7,r19
 400ed10:	40169f00 	call	40169f0 <__gedf2>
 400ed14:	00828d0e 	bge	zero,r2,400f74c <_dtoa_r+0xcd4>
 400ed18:	d9000517 	ldw	r4,20(sp)
 400ed1c:	d8000e15 	stw	zero,56(sp)
 400ed20:	213fffc4 	addi	r4,r4,-1
 400ed24:	d9000515 	stw	r4,20(sp)
 400ed28:	b42dc83a 	sub	r22,r22,r16
 400ed2c:	b5bfffc4 	addi	r22,r22,-1
 400ed30:	b0026f16 	blt	r22,zero,400f6f0 <_dtoa_r+0xc78>
 400ed34:	d8000815 	stw	zero,32(sp)
 400ed38:	d9c00517 	ldw	r7,20(sp)
 400ed3c:	38026416 	blt	r7,zero,400f6d0 <_dtoa_r+0xc58>
 400ed40:	b1ed883a 	add	r22,r22,r7
 400ed44:	d9c00d15 	stw	r7,52(sp)
 400ed48:	d8000a15 	stw	zero,40(sp)
 400ed4c:	d9800317 	ldw	r6,12(sp)
 400ed50:	00800244 	movi	r2,9
 400ed54:	11811436 	bltu	r2,r6,400f1a8 <_dtoa_r+0x730>
 400ed58:	00800144 	movi	r2,5
 400ed5c:	1184e10e 	bge	r2,r6,40100e4 <_dtoa_r+0x166c>
 400ed60:	31bfff04 	addi	r6,r6,-4
 400ed64:	d9800315 	stw	r6,12(sp)
 400ed68:	0023883a 	mov	r17,zero
 400ed6c:	d9800317 	ldw	r6,12(sp)
 400ed70:	008000c4 	movi	r2,3
 400ed74:	30836726 	beq	r6,r2,400fb14 <_dtoa_r+0x109c>
 400ed78:	1183410e 	bge	r2,r6,400fa80 <_dtoa_r+0x1008>
 400ed7c:	d9c00317 	ldw	r7,12(sp)
 400ed80:	00800104 	movi	r2,4
 400ed84:	38827c26 	beq	r7,r2,400f778 <_dtoa_r+0xd00>
 400ed88:	00800144 	movi	r2,5
 400ed8c:	3884c41e 	bne	r7,r2,40100a0 <_dtoa_r+0x1628>
 400ed90:	00800044 	movi	r2,1
 400ed94:	d8800b15 	stw	r2,44(sp)
 400ed98:	d8c00517 	ldw	r3,20(sp)
 400ed9c:	d9002217 	ldw	r4,136(sp)
 400eda0:	1907883a 	add	r3,r3,r4
 400eda4:	19800044 	addi	r6,r3,1
 400eda8:	d8c00c15 	stw	r3,48(sp)
 400edac:	d9800615 	stw	r6,24(sp)
 400edb0:	0183a40e 	bge	zero,r6,400fc44 <_dtoa_r+0x11cc>
 400edb4:	d9800617 	ldw	r6,24(sp)
 400edb8:	3021883a 	mov	r16,r6
 400edbc:	e0001115 	stw	zero,68(fp)
 400edc0:	008005c4 	movi	r2,23
 400edc4:	1184c92e 	bgeu	r2,r6,40100ec <_dtoa_r+0x1674>
 400edc8:	00c00044 	movi	r3,1
 400edcc:	00800104 	movi	r2,4
 400edd0:	1085883a 	add	r2,r2,r2
 400edd4:	11000504 	addi	r4,r2,20
 400edd8:	180b883a 	mov	r5,r3
 400eddc:	18c00044 	addi	r3,r3,1
 400ede0:	313ffb2e 	bgeu	r6,r4,400edd0 <__alt_data_end+0xfc00edd0>
 400ede4:	e1401115 	stw	r5,68(fp)
 400ede8:	e009883a 	mov	r4,fp
 400edec:	40116980 	call	4011698 <_Balloc>
 400edf0:	d8800715 	stw	r2,28(sp)
 400edf4:	e0801015 	stw	r2,64(fp)
 400edf8:	00800384 	movi	r2,14
 400edfc:	1400f736 	bltu	r2,r16,400f1dc <_dtoa_r+0x764>
 400ee00:	8800f626 	beq	r17,zero,400f1dc <_dtoa_r+0x764>
 400ee04:	d9c00517 	ldw	r7,20(sp)
 400ee08:	01c39a0e 	bge	zero,r7,400fc74 <_dtoa_r+0x11fc>
 400ee0c:	388003cc 	andi	r2,r7,15
 400ee10:	100490fa 	slli	r2,r2,3
 400ee14:	382bd13a 	srai	r21,r7,4
 400ee18:	00c100b4 	movhi	r3,1026
 400ee1c:	18f0cb04 	addi	r3,r3,-15572
 400ee20:	1885883a 	add	r2,r3,r2
 400ee24:	a8c0040c 	andi	r3,r21,16
 400ee28:	12400017 	ldw	r9,0(r2)
 400ee2c:	12000117 	ldw	r8,4(r2)
 400ee30:	18037926 	beq	r3,zero,400fc18 <_dtoa_r+0x11a0>
 400ee34:	008100b4 	movhi	r2,1026
 400ee38:	10b0c104 	addi	r2,r2,-15612
 400ee3c:	11800817 	ldw	r6,32(r2)
 400ee40:	11c00917 	ldw	r7,36(r2)
 400ee44:	9009883a 	mov	r4,r18
 400ee48:	980b883a 	mov	r5,r19
 400ee4c:	da001715 	stw	r8,92(sp)
 400ee50:	da401615 	stw	r9,88(sp)
 400ee54:	40160800 	call	4016080 <__divdf3>
 400ee58:	da001717 	ldw	r8,92(sp)
 400ee5c:	da401617 	ldw	r9,88(sp)
 400ee60:	ad4003cc 	andi	r21,r21,15
 400ee64:	040000c4 	movi	r16,3
 400ee68:	1023883a 	mov	r17,r2
 400ee6c:	1829883a 	mov	r20,r3
 400ee70:	a8001126 	beq	r21,zero,400eeb8 <_dtoa_r+0x440>
 400ee74:	05c100b4 	movhi	r23,1026
 400ee78:	bdf0c104 	addi	r23,r23,-15612
 400ee7c:	4805883a 	mov	r2,r9
 400ee80:	4007883a 	mov	r3,r8
 400ee84:	a980004c 	andi	r6,r21,1
 400ee88:	1009883a 	mov	r4,r2
 400ee8c:	a82bd07a 	srai	r21,r21,1
 400ee90:	180b883a 	mov	r5,r3
 400ee94:	30000426 	beq	r6,zero,400eea8 <_dtoa_r+0x430>
 400ee98:	b9800017 	ldw	r6,0(r23)
 400ee9c:	b9c00117 	ldw	r7,4(r23)
 400eea0:	84000044 	addi	r16,r16,1
 400eea4:	4016bc00 	call	4016bc0 <__muldf3>
 400eea8:	bdc00204 	addi	r23,r23,8
 400eeac:	a83ff51e 	bne	r21,zero,400ee84 <__alt_data_end+0xfc00ee84>
 400eeb0:	1013883a 	mov	r9,r2
 400eeb4:	1811883a 	mov	r8,r3
 400eeb8:	480d883a 	mov	r6,r9
 400eebc:	400f883a 	mov	r7,r8
 400eec0:	8809883a 	mov	r4,r17
 400eec4:	a00b883a 	mov	r5,r20
 400eec8:	40160800 	call	4016080 <__divdf3>
 400eecc:	d8800f15 	stw	r2,60(sp)
 400eed0:	d8c01015 	stw	r3,64(sp)
 400eed4:	d8c00e17 	ldw	r3,56(sp)
 400eed8:	18000626 	beq	r3,zero,400eef4 <_dtoa_r+0x47c>
 400eedc:	d9000f17 	ldw	r4,60(sp)
 400eee0:	d9401017 	ldw	r5,64(sp)
 400eee4:	000d883a 	mov	r6,zero
 400eee8:	01cffc34 	movhi	r7,16368
 400eeec:	4016acc0 	call	4016acc <__ledf2>
 400eef0:	10040b16 	blt	r2,zero,400ff20 <_dtoa_r+0x14a8>
 400eef4:	8009883a 	mov	r4,r16
 400eef8:	4017c540 	call	4017c54 <__floatsidf>
 400eefc:	d9800f17 	ldw	r6,60(sp)
 400ef00:	d9c01017 	ldw	r7,64(sp)
 400ef04:	1009883a 	mov	r4,r2
 400ef08:	180b883a 	mov	r5,r3
 400ef0c:	4016bc00 	call	4016bc0 <__muldf3>
 400ef10:	000d883a 	mov	r6,zero
 400ef14:	01d00734 	movhi	r7,16412
 400ef18:	1009883a 	mov	r4,r2
 400ef1c:	180b883a 	mov	r5,r3
 400ef20:	40157d40 	call	40157d4 <__adddf3>
 400ef24:	1021883a 	mov	r16,r2
 400ef28:	d8800617 	ldw	r2,24(sp)
 400ef2c:	047f3034 	movhi	r17,64704
 400ef30:	1c63883a 	add	r17,r3,r17
 400ef34:	10031826 	beq	r2,zero,400fb98 <_dtoa_r+0x1120>
 400ef38:	d8c00517 	ldw	r3,20(sp)
 400ef3c:	db000617 	ldw	r12,24(sp)
 400ef40:	d8c01315 	stw	r3,76(sp)
 400ef44:	d9000b17 	ldw	r4,44(sp)
 400ef48:	20038f26 	beq	r4,zero,400fd88 <_dtoa_r+0x1310>
 400ef4c:	60bfffc4 	addi	r2,r12,-1
 400ef50:	100490fa 	slli	r2,r2,3
 400ef54:	00c100b4 	movhi	r3,1026
 400ef58:	18f0cb04 	addi	r3,r3,-15572
 400ef5c:	1885883a 	add	r2,r3,r2
 400ef60:	11800017 	ldw	r6,0(r2)
 400ef64:	11c00117 	ldw	r7,4(r2)
 400ef68:	d8800717 	ldw	r2,28(sp)
 400ef6c:	0009883a 	mov	r4,zero
 400ef70:	014ff834 	movhi	r5,16352
 400ef74:	db001615 	stw	r12,88(sp)
 400ef78:	15c00044 	addi	r23,r2,1
 400ef7c:	40160800 	call	4016080 <__divdf3>
 400ef80:	800d883a 	mov	r6,r16
 400ef84:	880f883a 	mov	r7,r17
 400ef88:	1009883a 	mov	r4,r2
 400ef8c:	180b883a 	mov	r5,r3
 400ef90:	40172d80 	call	40172d8 <__subdf3>
 400ef94:	d9401017 	ldw	r5,64(sp)
 400ef98:	d9000f17 	ldw	r4,60(sp)
 400ef9c:	102b883a 	mov	r21,r2
 400efa0:	d8c01215 	stw	r3,72(sp)
 400efa4:	4017bd40 	call	4017bd4 <__fixdfsi>
 400efa8:	1009883a 	mov	r4,r2
 400efac:	1029883a 	mov	r20,r2
 400efb0:	4017c540 	call	4017c54 <__floatsidf>
 400efb4:	d9000f17 	ldw	r4,60(sp)
 400efb8:	d9401017 	ldw	r5,64(sp)
 400efbc:	100d883a 	mov	r6,r2
 400efc0:	180f883a 	mov	r7,r3
 400efc4:	40172d80 	call	40172d8 <__subdf3>
 400efc8:	1823883a 	mov	r17,r3
 400efcc:	d8c00717 	ldw	r3,28(sp)
 400efd0:	d9401217 	ldw	r5,72(sp)
 400efd4:	a2000c04 	addi	r8,r20,48
 400efd8:	1021883a 	mov	r16,r2
 400efdc:	1a000005 	stb	r8,0(r3)
 400efe0:	800d883a 	mov	r6,r16
 400efe4:	880f883a 	mov	r7,r17
 400efe8:	a809883a 	mov	r4,r21
 400efec:	4029883a 	mov	r20,r8
 400eff0:	40169f00 	call	40169f0 <__gedf2>
 400eff4:	00841d16 	blt	zero,r2,401006c <_dtoa_r+0x15f4>
 400eff8:	800d883a 	mov	r6,r16
 400effc:	880f883a 	mov	r7,r17
 400f000:	0009883a 	mov	r4,zero
 400f004:	014ffc34 	movhi	r5,16368
 400f008:	40172d80 	call	40172d8 <__subdf3>
 400f00c:	d9401217 	ldw	r5,72(sp)
 400f010:	100d883a 	mov	r6,r2
 400f014:	180f883a 	mov	r7,r3
 400f018:	a809883a 	mov	r4,r21
 400f01c:	40169f00 	call	40169f0 <__gedf2>
 400f020:	db001617 	ldw	r12,88(sp)
 400f024:	00840e16 	blt	zero,r2,4010060 <_dtoa_r+0x15e8>
 400f028:	00800044 	movi	r2,1
 400f02c:	13006b0e 	bge	r2,r12,400f1dc <_dtoa_r+0x764>
 400f030:	d9000717 	ldw	r4,28(sp)
 400f034:	dd800f15 	stw	r22,60(sp)
 400f038:	dcc01015 	stw	r19,64(sp)
 400f03c:	2319883a 	add	r12,r4,r12
 400f040:	dcc01217 	ldw	r19,72(sp)
 400f044:	602d883a 	mov	r22,r12
 400f048:	dc801215 	stw	r18,72(sp)
 400f04c:	b825883a 	mov	r18,r23
 400f050:	00000906 	br	400f078 <_dtoa_r+0x600>
 400f054:	40172d80 	call	40172d8 <__subdf3>
 400f058:	a80d883a 	mov	r6,r21
 400f05c:	980f883a 	mov	r7,r19
 400f060:	1009883a 	mov	r4,r2
 400f064:	180b883a 	mov	r5,r3
 400f068:	4016acc0 	call	4016acc <__ledf2>
 400f06c:	1003e816 	blt	r2,zero,4010010 <_dtoa_r+0x1598>
 400f070:	b825883a 	mov	r18,r23
 400f074:	bd83e926 	beq	r23,r22,401001c <_dtoa_r+0x15a4>
 400f078:	a809883a 	mov	r4,r21
 400f07c:	980b883a 	mov	r5,r19
 400f080:	000d883a 	mov	r6,zero
 400f084:	01d00934 	movhi	r7,16420
 400f088:	4016bc00 	call	4016bc0 <__muldf3>
 400f08c:	000d883a 	mov	r6,zero
 400f090:	01d00934 	movhi	r7,16420
 400f094:	8009883a 	mov	r4,r16
 400f098:	880b883a 	mov	r5,r17
 400f09c:	102b883a 	mov	r21,r2
 400f0a0:	1827883a 	mov	r19,r3
 400f0a4:	4016bc00 	call	4016bc0 <__muldf3>
 400f0a8:	180b883a 	mov	r5,r3
 400f0ac:	1009883a 	mov	r4,r2
 400f0b0:	1821883a 	mov	r16,r3
 400f0b4:	1023883a 	mov	r17,r2
 400f0b8:	4017bd40 	call	4017bd4 <__fixdfsi>
 400f0bc:	1009883a 	mov	r4,r2
 400f0c0:	1029883a 	mov	r20,r2
 400f0c4:	4017c540 	call	4017c54 <__floatsidf>
 400f0c8:	8809883a 	mov	r4,r17
 400f0cc:	800b883a 	mov	r5,r16
 400f0d0:	100d883a 	mov	r6,r2
 400f0d4:	180f883a 	mov	r7,r3
 400f0d8:	40172d80 	call	40172d8 <__subdf3>
 400f0dc:	a5000c04 	addi	r20,r20,48
 400f0e0:	a80d883a 	mov	r6,r21
 400f0e4:	980f883a 	mov	r7,r19
 400f0e8:	1009883a 	mov	r4,r2
 400f0ec:	180b883a 	mov	r5,r3
 400f0f0:	95000005 	stb	r20,0(r18)
 400f0f4:	1021883a 	mov	r16,r2
 400f0f8:	1823883a 	mov	r17,r3
 400f0fc:	4016acc0 	call	4016acc <__ledf2>
 400f100:	bdc00044 	addi	r23,r23,1
 400f104:	800d883a 	mov	r6,r16
 400f108:	880f883a 	mov	r7,r17
 400f10c:	0009883a 	mov	r4,zero
 400f110:	014ffc34 	movhi	r5,16368
 400f114:	103fcf0e 	bge	r2,zero,400f054 <__alt_data_end+0xfc00f054>
 400f118:	d8c01317 	ldw	r3,76(sp)
 400f11c:	d8c00515 	stw	r3,20(sp)
 400f120:	d9400917 	ldw	r5,36(sp)
 400f124:	e009883a 	mov	r4,fp
 400f128:	40117400 	call	4011740 <_Bfree>
 400f12c:	d9000517 	ldw	r4,20(sp)
 400f130:	d9802317 	ldw	r6,140(sp)
 400f134:	d9c02517 	ldw	r7,148(sp)
 400f138:	b8000005 	stb	zero,0(r23)
 400f13c:	20800044 	addi	r2,r4,1
 400f140:	30800015 	stw	r2,0(r6)
 400f144:	3802aa26 	beq	r7,zero,400fbf0 <_dtoa_r+0x1178>
 400f148:	3dc00015 	stw	r23,0(r7)
 400f14c:	d8800717 	ldw	r2,28(sp)
 400f150:	003e7906 	br	400eb38 <__alt_data_end+0xfc00eb38>
 400f154:	00800434 	movhi	r2,16
 400f158:	10bfffc4 	addi	r2,r2,-1
 400f15c:	88a2703a 	and	r17,r17,r2
 400f160:	883e851e 	bne	r17,zero,400eb78 <__alt_data_end+0xfc00eb78>
 400f164:	008100b4 	movhi	r2,1026
 400f168:	10b0ad04 	addi	r2,r2,-15692
 400f16c:	003e8406 	br	400eb80 <__alt_data_end+0xfc00eb80>
 400f170:	10c00204 	addi	r3,r2,8
 400f174:	003e8706 	br	400eb94 <__alt_data_end+0xfc00eb94>
 400f178:	01400434 	movhi	r5,16
 400f17c:	297fffc4 	addi	r5,r5,-1
 400f180:	994a703a 	and	r5,r19,r5
 400f184:	9009883a 	mov	r4,r18
 400f188:	843f0044 	addi	r16,r16,-1023
 400f18c:	294ffc34 	orhi	r5,r5,16368
 400f190:	dd800217 	ldw	r22,8(sp)
 400f194:	d8001115 	stw	zero,68(sp)
 400f198:	003ea506 	br	400ec30 <__alt_data_end+0xfc00ec30>
 400f19c:	008100b4 	movhi	r2,1026
 400f1a0:	10b0a404 	addi	r2,r2,-15728
 400f1a4:	003e6406 	br	400eb38 <__alt_data_end+0xfc00eb38>
 400f1a8:	e0001115 	stw	zero,68(fp)
 400f1ac:	000b883a 	mov	r5,zero
 400f1b0:	e009883a 	mov	r4,fp
 400f1b4:	40116980 	call	4011698 <_Balloc>
 400f1b8:	01bfffc4 	movi	r6,-1
 400f1bc:	01c00044 	movi	r7,1
 400f1c0:	d8800715 	stw	r2,28(sp)
 400f1c4:	d9800c15 	stw	r6,48(sp)
 400f1c8:	e0801015 	stw	r2,64(fp)
 400f1cc:	d8000315 	stw	zero,12(sp)
 400f1d0:	d9c00b15 	stw	r7,44(sp)
 400f1d4:	d9800615 	stw	r6,24(sp)
 400f1d8:	d8002215 	stw	zero,136(sp)
 400f1dc:	d8800117 	ldw	r2,4(sp)
 400f1e0:	10008916 	blt	r2,zero,400f408 <_dtoa_r+0x990>
 400f1e4:	d9000517 	ldw	r4,20(sp)
 400f1e8:	00c00384 	movi	r3,14
 400f1ec:	19008616 	blt	r3,r4,400f408 <_dtoa_r+0x990>
 400f1f0:	200490fa 	slli	r2,r4,3
 400f1f4:	00c100b4 	movhi	r3,1026
 400f1f8:	d9802217 	ldw	r6,136(sp)
 400f1fc:	18f0cb04 	addi	r3,r3,-15572
 400f200:	1885883a 	add	r2,r3,r2
 400f204:	14000017 	ldw	r16,0(r2)
 400f208:	14400117 	ldw	r17,4(r2)
 400f20c:	30016316 	blt	r6,zero,400f79c <_dtoa_r+0xd24>
 400f210:	800d883a 	mov	r6,r16
 400f214:	880f883a 	mov	r7,r17
 400f218:	9009883a 	mov	r4,r18
 400f21c:	980b883a 	mov	r5,r19
 400f220:	40160800 	call	4016080 <__divdf3>
 400f224:	180b883a 	mov	r5,r3
 400f228:	1009883a 	mov	r4,r2
 400f22c:	4017bd40 	call	4017bd4 <__fixdfsi>
 400f230:	1009883a 	mov	r4,r2
 400f234:	102b883a 	mov	r21,r2
 400f238:	4017c540 	call	4017c54 <__floatsidf>
 400f23c:	800d883a 	mov	r6,r16
 400f240:	880f883a 	mov	r7,r17
 400f244:	1009883a 	mov	r4,r2
 400f248:	180b883a 	mov	r5,r3
 400f24c:	4016bc00 	call	4016bc0 <__muldf3>
 400f250:	100d883a 	mov	r6,r2
 400f254:	180f883a 	mov	r7,r3
 400f258:	9009883a 	mov	r4,r18
 400f25c:	980b883a 	mov	r5,r19
 400f260:	40172d80 	call	40172d8 <__subdf3>
 400f264:	d9c00717 	ldw	r7,28(sp)
 400f268:	1009883a 	mov	r4,r2
 400f26c:	a8800c04 	addi	r2,r21,48
 400f270:	38800005 	stb	r2,0(r7)
 400f274:	3dc00044 	addi	r23,r7,1
 400f278:	d9c00617 	ldw	r7,24(sp)
 400f27c:	01800044 	movi	r6,1
 400f280:	180b883a 	mov	r5,r3
 400f284:	2005883a 	mov	r2,r4
 400f288:	39803826 	beq	r7,r6,400f36c <_dtoa_r+0x8f4>
 400f28c:	000d883a 	mov	r6,zero
 400f290:	01d00934 	movhi	r7,16420
 400f294:	4016bc00 	call	4016bc0 <__muldf3>
 400f298:	000d883a 	mov	r6,zero
 400f29c:	000f883a 	mov	r7,zero
 400f2a0:	1009883a 	mov	r4,r2
 400f2a4:	180b883a 	mov	r5,r3
 400f2a8:	1025883a 	mov	r18,r2
 400f2ac:	1827883a 	mov	r19,r3
 400f2b0:	40169680 	call	4016968 <__eqdf2>
 400f2b4:	103f9a26 	beq	r2,zero,400f120 <__alt_data_end+0xfc00f120>
 400f2b8:	d9c00617 	ldw	r7,24(sp)
 400f2bc:	d8c00717 	ldw	r3,28(sp)
 400f2c0:	b829883a 	mov	r20,r23
 400f2c4:	38bfffc4 	addi	r2,r7,-1
 400f2c8:	18ad883a 	add	r22,r3,r2
 400f2cc:	00000a06 	br	400f2f8 <_dtoa_r+0x880>
 400f2d0:	4016bc00 	call	4016bc0 <__muldf3>
 400f2d4:	000d883a 	mov	r6,zero
 400f2d8:	000f883a 	mov	r7,zero
 400f2dc:	1009883a 	mov	r4,r2
 400f2e0:	180b883a 	mov	r5,r3
 400f2e4:	1025883a 	mov	r18,r2
 400f2e8:	1827883a 	mov	r19,r3
 400f2ec:	b829883a 	mov	r20,r23
 400f2f0:	40169680 	call	4016968 <__eqdf2>
 400f2f4:	103f8a26 	beq	r2,zero,400f120 <__alt_data_end+0xfc00f120>
 400f2f8:	800d883a 	mov	r6,r16
 400f2fc:	880f883a 	mov	r7,r17
 400f300:	9009883a 	mov	r4,r18
 400f304:	980b883a 	mov	r5,r19
 400f308:	40160800 	call	4016080 <__divdf3>
 400f30c:	180b883a 	mov	r5,r3
 400f310:	1009883a 	mov	r4,r2
 400f314:	4017bd40 	call	4017bd4 <__fixdfsi>
 400f318:	1009883a 	mov	r4,r2
 400f31c:	102b883a 	mov	r21,r2
 400f320:	4017c540 	call	4017c54 <__floatsidf>
 400f324:	800d883a 	mov	r6,r16
 400f328:	880f883a 	mov	r7,r17
 400f32c:	1009883a 	mov	r4,r2
 400f330:	180b883a 	mov	r5,r3
 400f334:	4016bc00 	call	4016bc0 <__muldf3>
 400f338:	100d883a 	mov	r6,r2
 400f33c:	180f883a 	mov	r7,r3
 400f340:	9009883a 	mov	r4,r18
 400f344:	980b883a 	mov	r5,r19
 400f348:	40172d80 	call	40172d8 <__subdf3>
 400f34c:	aa000c04 	addi	r8,r21,48
 400f350:	a2000005 	stb	r8,0(r20)
 400f354:	000d883a 	mov	r6,zero
 400f358:	01d00934 	movhi	r7,16420
 400f35c:	1009883a 	mov	r4,r2
 400f360:	180b883a 	mov	r5,r3
 400f364:	a5c00044 	addi	r23,r20,1
 400f368:	b53fd91e 	bne	r22,r20,400f2d0 <__alt_data_end+0xfc00f2d0>
 400f36c:	100d883a 	mov	r6,r2
 400f370:	180f883a 	mov	r7,r3
 400f374:	1009883a 	mov	r4,r2
 400f378:	180b883a 	mov	r5,r3
 400f37c:	40157d40 	call	40157d4 <__adddf3>
 400f380:	100d883a 	mov	r6,r2
 400f384:	180f883a 	mov	r7,r3
 400f388:	8009883a 	mov	r4,r16
 400f38c:	880b883a 	mov	r5,r17
 400f390:	1027883a 	mov	r19,r2
 400f394:	1825883a 	mov	r18,r3
 400f398:	4016acc0 	call	4016acc <__ledf2>
 400f39c:	10000816 	blt	r2,zero,400f3c0 <_dtoa_r+0x948>
 400f3a0:	980d883a 	mov	r6,r19
 400f3a4:	900f883a 	mov	r7,r18
 400f3a8:	8009883a 	mov	r4,r16
 400f3ac:	880b883a 	mov	r5,r17
 400f3b0:	40169680 	call	4016968 <__eqdf2>
 400f3b4:	103f5a1e 	bne	r2,zero,400f120 <__alt_data_end+0xfc00f120>
 400f3b8:	ad40004c 	andi	r21,r21,1
 400f3bc:	a83f5826 	beq	r21,zero,400f120 <__alt_data_end+0xfc00f120>
 400f3c0:	bd3fffc3 	ldbu	r20,-1(r23)
 400f3c4:	b8bfffc4 	addi	r2,r23,-1
 400f3c8:	1007883a 	mov	r3,r2
 400f3cc:	01400e44 	movi	r5,57
 400f3d0:	d9800717 	ldw	r6,28(sp)
 400f3d4:	00000506 	br	400f3ec <_dtoa_r+0x974>
 400f3d8:	18ffffc4 	addi	r3,r3,-1
 400f3dc:	11824726 	beq	r2,r6,400fcfc <_dtoa_r+0x1284>
 400f3e0:	1d000003 	ldbu	r20,0(r3)
 400f3e4:	102f883a 	mov	r23,r2
 400f3e8:	10bfffc4 	addi	r2,r2,-1
 400f3ec:	a1003fcc 	andi	r4,r20,255
 400f3f0:	2100201c 	xori	r4,r4,128
 400f3f4:	213fe004 	addi	r4,r4,-128
 400f3f8:	217ff726 	beq	r4,r5,400f3d8 <__alt_data_end+0xfc00f3d8>
 400f3fc:	a2000044 	addi	r8,r20,1
 400f400:	12000005 	stb	r8,0(r2)
 400f404:	003f4606 	br	400f120 <__alt_data_end+0xfc00f120>
 400f408:	d9000b17 	ldw	r4,44(sp)
 400f40c:	2000c826 	beq	r4,zero,400f730 <_dtoa_r+0xcb8>
 400f410:	d9800317 	ldw	r6,12(sp)
 400f414:	00c00044 	movi	r3,1
 400f418:	1980f90e 	bge	r3,r6,400f800 <_dtoa_r+0xd88>
 400f41c:	d8800617 	ldw	r2,24(sp)
 400f420:	d8c00a17 	ldw	r3,40(sp)
 400f424:	157fffc4 	addi	r21,r2,-1
 400f428:	1d41f316 	blt	r3,r21,400fbf8 <_dtoa_r+0x1180>
 400f42c:	1d6bc83a 	sub	r21,r3,r21
 400f430:	d9c00617 	ldw	r7,24(sp)
 400f434:	3802aa16 	blt	r7,zero,400fee0 <_dtoa_r+0x1468>
 400f438:	dd000817 	ldw	r20,32(sp)
 400f43c:	d8800617 	ldw	r2,24(sp)
 400f440:	d8c00817 	ldw	r3,32(sp)
 400f444:	01400044 	movi	r5,1
 400f448:	e009883a 	mov	r4,fp
 400f44c:	1887883a 	add	r3,r3,r2
 400f450:	d8c00815 	stw	r3,32(sp)
 400f454:	b0ad883a 	add	r22,r22,r2
 400f458:	4011aa40 	call	4011aa4 <__i2b>
 400f45c:	1023883a 	mov	r17,r2
 400f460:	a0000826 	beq	r20,zero,400f484 <_dtoa_r+0xa0c>
 400f464:	0580070e 	bge	zero,r22,400f484 <_dtoa_r+0xa0c>
 400f468:	a005883a 	mov	r2,r20
 400f46c:	b500b916 	blt	r22,r20,400f754 <_dtoa_r+0xcdc>
 400f470:	d9000817 	ldw	r4,32(sp)
 400f474:	a0a9c83a 	sub	r20,r20,r2
 400f478:	b0adc83a 	sub	r22,r22,r2
 400f47c:	2089c83a 	sub	r4,r4,r2
 400f480:	d9000815 	stw	r4,32(sp)
 400f484:	d9800a17 	ldw	r6,40(sp)
 400f488:	0181810e 	bge	zero,r6,400fa90 <_dtoa_r+0x1018>
 400f48c:	d9c00b17 	ldw	r7,44(sp)
 400f490:	3800b326 	beq	r7,zero,400f760 <_dtoa_r+0xce8>
 400f494:	a800b226 	beq	r21,zero,400f760 <_dtoa_r+0xce8>
 400f498:	880b883a 	mov	r5,r17
 400f49c:	a80d883a 	mov	r6,r21
 400f4a0:	e009883a 	mov	r4,fp
 400f4a4:	4011cd80 	call	4011cd8 <__pow5mult>
 400f4a8:	d9800917 	ldw	r6,36(sp)
 400f4ac:	100b883a 	mov	r5,r2
 400f4b0:	e009883a 	mov	r4,fp
 400f4b4:	1023883a 	mov	r17,r2
 400f4b8:	4011ae00 	call	4011ae0 <__multiply>
 400f4bc:	1021883a 	mov	r16,r2
 400f4c0:	d8800a17 	ldw	r2,40(sp)
 400f4c4:	d9400917 	ldw	r5,36(sp)
 400f4c8:	e009883a 	mov	r4,fp
 400f4cc:	1545c83a 	sub	r2,r2,r21
 400f4d0:	d8800a15 	stw	r2,40(sp)
 400f4d4:	40117400 	call	4011740 <_Bfree>
 400f4d8:	d8c00a17 	ldw	r3,40(sp)
 400f4dc:	18009f1e 	bne	r3,zero,400f75c <_dtoa_r+0xce4>
 400f4e0:	05c00044 	movi	r23,1
 400f4e4:	e009883a 	mov	r4,fp
 400f4e8:	b80b883a 	mov	r5,r23
 400f4ec:	4011aa40 	call	4011aa4 <__i2b>
 400f4f0:	d9000d17 	ldw	r4,52(sp)
 400f4f4:	102b883a 	mov	r21,r2
 400f4f8:	2000ce26 	beq	r4,zero,400f834 <_dtoa_r+0xdbc>
 400f4fc:	200d883a 	mov	r6,r4
 400f500:	100b883a 	mov	r5,r2
 400f504:	e009883a 	mov	r4,fp
 400f508:	4011cd80 	call	4011cd8 <__pow5mult>
 400f50c:	d9800317 	ldw	r6,12(sp)
 400f510:	102b883a 	mov	r21,r2
 400f514:	b981810e 	bge	r23,r6,400fb1c <_dtoa_r+0x10a4>
 400f518:	0027883a 	mov	r19,zero
 400f51c:	a8800417 	ldw	r2,16(r21)
 400f520:	05c00804 	movi	r23,32
 400f524:	10800104 	addi	r2,r2,4
 400f528:	1085883a 	add	r2,r2,r2
 400f52c:	1085883a 	add	r2,r2,r2
 400f530:	a885883a 	add	r2,r21,r2
 400f534:	11000017 	ldw	r4,0(r2)
 400f538:	401198c0 	call	401198c <__hi0bits>
 400f53c:	b885c83a 	sub	r2,r23,r2
 400f540:	1585883a 	add	r2,r2,r22
 400f544:	108007cc 	andi	r2,r2,31
 400f548:	1000b326 	beq	r2,zero,400f818 <_dtoa_r+0xda0>
 400f54c:	00c00804 	movi	r3,32
 400f550:	1887c83a 	sub	r3,r3,r2
 400f554:	01000104 	movi	r4,4
 400f558:	20c2cd0e 	bge	r4,r3,4010090 <_dtoa_r+0x1618>
 400f55c:	00c00704 	movi	r3,28
 400f560:	1885c83a 	sub	r2,r3,r2
 400f564:	d8c00817 	ldw	r3,32(sp)
 400f568:	a0a9883a 	add	r20,r20,r2
 400f56c:	b0ad883a 	add	r22,r22,r2
 400f570:	1887883a 	add	r3,r3,r2
 400f574:	d8c00815 	stw	r3,32(sp)
 400f578:	d9800817 	ldw	r6,32(sp)
 400f57c:	0180040e 	bge	zero,r6,400f590 <_dtoa_r+0xb18>
 400f580:	800b883a 	mov	r5,r16
 400f584:	e009883a 	mov	r4,fp
 400f588:	4011e180 	call	4011e18 <__lshift>
 400f58c:	1021883a 	mov	r16,r2
 400f590:	0580050e 	bge	zero,r22,400f5a8 <_dtoa_r+0xb30>
 400f594:	a80b883a 	mov	r5,r21
 400f598:	b00d883a 	mov	r6,r22
 400f59c:	e009883a 	mov	r4,fp
 400f5a0:	4011e180 	call	4011e18 <__lshift>
 400f5a4:	102b883a 	mov	r21,r2
 400f5a8:	d9c00e17 	ldw	r7,56(sp)
 400f5ac:	3801211e 	bne	r7,zero,400fa34 <_dtoa_r+0xfbc>
 400f5b0:	d9800617 	ldw	r6,24(sp)
 400f5b4:	0181380e 	bge	zero,r6,400fa98 <_dtoa_r+0x1020>
 400f5b8:	d8c00b17 	ldw	r3,44(sp)
 400f5bc:	1800ab1e 	bne	r3,zero,400f86c <_dtoa_r+0xdf4>
 400f5c0:	dc800717 	ldw	r18,28(sp)
 400f5c4:	dcc00617 	ldw	r19,24(sp)
 400f5c8:	9029883a 	mov	r20,r18
 400f5cc:	00000206 	br	400f5d8 <_dtoa_r+0xb60>
 400f5d0:	40117680 	call	4011768 <__multadd>
 400f5d4:	1021883a 	mov	r16,r2
 400f5d8:	a80b883a 	mov	r5,r21
 400f5dc:	8009883a 	mov	r4,r16
 400f5e0:	400e8780 	call	400e878 <quorem>
 400f5e4:	10800c04 	addi	r2,r2,48
 400f5e8:	90800005 	stb	r2,0(r18)
 400f5ec:	94800044 	addi	r18,r18,1
 400f5f0:	9507c83a 	sub	r3,r18,r20
 400f5f4:	000f883a 	mov	r7,zero
 400f5f8:	01800284 	movi	r6,10
 400f5fc:	800b883a 	mov	r5,r16
 400f600:	e009883a 	mov	r4,fp
 400f604:	1cfff216 	blt	r3,r19,400f5d0 <__alt_data_end+0xfc00f5d0>
 400f608:	1011883a 	mov	r8,r2
 400f60c:	d8800617 	ldw	r2,24(sp)
 400f610:	0082370e 	bge	zero,r2,400fef0 <_dtoa_r+0x1478>
 400f614:	d9000717 	ldw	r4,28(sp)
 400f618:	0025883a 	mov	r18,zero
 400f61c:	20af883a 	add	r23,r4,r2
 400f620:	01800044 	movi	r6,1
 400f624:	800b883a 	mov	r5,r16
 400f628:	e009883a 	mov	r4,fp
 400f62c:	da001715 	stw	r8,92(sp)
 400f630:	4011e180 	call	4011e18 <__lshift>
 400f634:	a80b883a 	mov	r5,r21
 400f638:	1009883a 	mov	r4,r2
 400f63c:	d8800915 	stw	r2,36(sp)
 400f640:	4011f600 	call	4011f60 <__mcmp>
 400f644:	da001717 	ldw	r8,92(sp)
 400f648:	0081800e 	bge	zero,r2,400fc4c <_dtoa_r+0x11d4>
 400f64c:	b93fffc3 	ldbu	r4,-1(r23)
 400f650:	b8bfffc4 	addi	r2,r23,-1
 400f654:	1007883a 	mov	r3,r2
 400f658:	01800e44 	movi	r6,57
 400f65c:	d9c00717 	ldw	r7,28(sp)
 400f660:	00000506 	br	400f678 <_dtoa_r+0xc00>
 400f664:	18ffffc4 	addi	r3,r3,-1
 400f668:	11c12326 	beq	r2,r7,400faf8 <_dtoa_r+0x1080>
 400f66c:	19000003 	ldbu	r4,0(r3)
 400f670:	102f883a 	mov	r23,r2
 400f674:	10bfffc4 	addi	r2,r2,-1
 400f678:	21403fcc 	andi	r5,r4,255
 400f67c:	2940201c 	xori	r5,r5,128
 400f680:	297fe004 	addi	r5,r5,-128
 400f684:	29bff726 	beq	r5,r6,400f664 <__alt_data_end+0xfc00f664>
 400f688:	21000044 	addi	r4,r4,1
 400f68c:	11000005 	stb	r4,0(r2)
 400f690:	a80b883a 	mov	r5,r21
 400f694:	e009883a 	mov	r4,fp
 400f698:	40117400 	call	4011740 <_Bfree>
 400f69c:	883ea026 	beq	r17,zero,400f120 <__alt_data_end+0xfc00f120>
 400f6a0:	90000426 	beq	r18,zero,400f6b4 <_dtoa_r+0xc3c>
 400f6a4:	94400326 	beq	r18,r17,400f6b4 <_dtoa_r+0xc3c>
 400f6a8:	900b883a 	mov	r5,r18
 400f6ac:	e009883a 	mov	r4,fp
 400f6b0:	40117400 	call	4011740 <_Bfree>
 400f6b4:	880b883a 	mov	r5,r17
 400f6b8:	e009883a 	mov	r4,fp
 400f6bc:	40117400 	call	4011740 <_Bfree>
 400f6c0:	003e9706 	br	400f120 <__alt_data_end+0xfc00f120>
 400f6c4:	01800044 	movi	r6,1
 400f6c8:	d9800e15 	stw	r6,56(sp)
 400f6cc:	003d9606 	br	400ed28 <__alt_data_end+0xfc00ed28>
 400f6d0:	d8800817 	ldw	r2,32(sp)
 400f6d4:	d8c00517 	ldw	r3,20(sp)
 400f6d8:	d8000d15 	stw	zero,52(sp)
 400f6dc:	10c5c83a 	sub	r2,r2,r3
 400f6e0:	00c9c83a 	sub	r4,zero,r3
 400f6e4:	d8800815 	stw	r2,32(sp)
 400f6e8:	d9000a15 	stw	r4,40(sp)
 400f6ec:	003d9706 	br	400ed4c <__alt_data_end+0xfc00ed4c>
 400f6f0:	05adc83a 	sub	r22,zero,r22
 400f6f4:	dd800815 	stw	r22,32(sp)
 400f6f8:	002d883a 	mov	r22,zero
 400f6fc:	003d8e06 	br	400ed38 <__alt_data_end+0xfc00ed38>
 400f700:	d9000517 	ldw	r4,20(sp)
 400f704:	4017c540 	call	4017c54 <__floatsidf>
 400f708:	100d883a 	mov	r6,r2
 400f70c:	180f883a 	mov	r7,r3
 400f710:	a009883a 	mov	r4,r20
 400f714:	880b883a 	mov	r5,r17
 400f718:	40169680 	call	4016968 <__eqdf2>
 400f71c:	103d7126 	beq	r2,zero,400ece4 <__alt_data_end+0xfc00ece4>
 400f720:	d9c00517 	ldw	r7,20(sp)
 400f724:	39ffffc4 	addi	r7,r7,-1
 400f728:	d9c00515 	stw	r7,20(sp)
 400f72c:	003d6d06 	br	400ece4 <__alt_data_end+0xfc00ece4>
 400f730:	dd400a17 	ldw	r21,40(sp)
 400f734:	dd000817 	ldw	r20,32(sp)
 400f738:	0023883a 	mov	r17,zero
 400f73c:	003f4806 	br	400f460 <__alt_data_end+0xfc00f460>
 400f740:	10e3c83a 	sub	r17,r2,r3
 400f744:	9448983a 	sll	r4,r18,r17
 400f748:	003d3206 	br	400ec14 <__alt_data_end+0xfc00ec14>
 400f74c:	d8000e15 	stw	zero,56(sp)
 400f750:	003d7506 	br	400ed28 <__alt_data_end+0xfc00ed28>
 400f754:	b005883a 	mov	r2,r22
 400f758:	003f4506 	br	400f470 <__alt_data_end+0xfc00f470>
 400f75c:	dc000915 	stw	r16,36(sp)
 400f760:	d9800a17 	ldw	r6,40(sp)
 400f764:	d9400917 	ldw	r5,36(sp)
 400f768:	e009883a 	mov	r4,fp
 400f76c:	4011cd80 	call	4011cd8 <__pow5mult>
 400f770:	1021883a 	mov	r16,r2
 400f774:	003f5a06 	br	400f4e0 <__alt_data_end+0xfc00f4e0>
 400f778:	01c00044 	movi	r7,1
 400f77c:	d9c00b15 	stw	r7,44(sp)
 400f780:	d8802217 	ldw	r2,136(sp)
 400f784:	0081280e 	bge	zero,r2,400fc28 <_dtoa_r+0x11b0>
 400f788:	100d883a 	mov	r6,r2
 400f78c:	1021883a 	mov	r16,r2
 400f790:	d8800c15 	stw	r2,48(sp)
 400f794:	d8800615 	stw	r2,24(sp)
 400f798:	003d8806 	br	400edbc <__alt_data_end+0xfc00edbc>
 400f79c:	d8800617 	ldw	r2,24(sp)
 400f7a0:	00be9b16 	blt	zero,r2,400f210 <__alt_data_end+0xfc00f210>
 400f7a4:	10010f1e 	bne	r2,zero,400fbe4 <_dtoa_r+0x116c>
 400f7a8:	880b883a 	mov	r5,r17
 400f7ac:	000d883a 	mov	r6,zero
 400f7b0:	01d00534 	movhi	r7,16404
 400f7b4:	8009883a 	mov	r4,r16
 400f7b8:	4016bc00 	call	4016bc0 <__muldf3>
 400f7bc:	900d883a 	mov	r6,r18
 400f7c0:	980f883a 	mov	r7,r19
 400f7c4:	1009883a 	mov	r4,r2
 400f7c8:	180b883a 	mov	r5,r3
 400f7cc:	40169f00 	call	40169f0 <__gedf2>
 400f7d0:	002b883a 	mov	r21,zero
 400f7d4:	0023883a 	mov	r17,zero
 400f7d8:	1000bf16 	blt	r2,zero,400fad8 <_dtoa_r+0x1060>
 400f7dc:	d9802217 	ldw	r6,136(sp)
 400f7e0:	ddc00717 	ldw	r23,28(sp)
 400f7e4:	018c303a 	nor	r6,zero,r6
 400f7e8:	d9800515 	stw	r6,20(sp)
 400f7ec:	a80b883a 	mov	r5,r21
 400f7f0:	e009883a 	mov	r4,fp
 400f7f4:	40117400 	call	4011740 <_Bfree>
 400f7f8:	883e4926 	beq	r17,zero,400f120 <__alt_data_end+0xfc00f120>
 400f7fc:	003fad06 	br	400f6b4 <__alt_data_end+0xfc00f6b4>
 400f800:	d9c01117 	ldw	r7,68(sp)
 400f804:	3801bc26 	beq	r7,zero,400fef8 <_dtoa_r+0x1480>
 400f808:	10810cc4 	addi	r2,r2,1075
 400f80c:	dd400a17 	ldw	r21,40(sp)
 400f810:	dd000817 	ldw	r20,32(sp)
 400f814:	003f0a06 	br	400f440 <__alt_data_end+0xfc00f440>
 400f818:	00800704 	movi	r2,28
 400f81c:	d9000817 	ldw	r4,32(sp)
 400f820:	a0a9883a 	add	r20,r20,r2
 400f824:	b0ad883a 	add	r22,r22,r2
 400f828:	2089883a 	add	r4,r4,r2
 400f82c:	d9000815 	stw	r4,32(sp)
 400f830:	003f5106 	br	400f578 <__alt_data_end+0xfc00f578>
 400f834:	d8c00317 	ldw	r3,12(sp)
 400f838:	b8c1fc0e 	bge	r23,r3,401002c <_dtoa_r+0x15b4>
 400f83c:	0027883a 	mov	r19,zero
 400f840:	b805883a 	mov	r2,r23
 400f844:	003f3e06 	br	400f540 <__alt_data_end+0xfc00f540>
 400f848:	880b883a 	mov	r5,r17
 400f84c:	e009883a 	mov	r4,fp
 400f850:	000f883a 	mov	r7,zero
 400f854:	01800284 	movi	r6,10
 400f858:	40117680 	call	4011768 <__multadd>
 400f85c:	d9000c17 	ldw	r4,48(sp)
 400f860:	1023883a 	mov	r17,r2
 400f864:	0102040e 	bge	zero,r4,4010078 <_dtoa_r+0x1600>
 400f868:	d9000615 	stw	r4,24(sp)
 400f86c:	0500050e 	bge	zero,r20,400f884 <_dtoa_r+0xe0c>
 400f870:	880b883a 	mov	r5,r17
 400f874:	a00d883a 	mov	r6,r20
 400f878:	e009883a 	mov	r4,fp
 400f87c:	4011e180 	call	4011e18 <__lshift>
 400f880:	1023883a 	mov	r17,r2
 400f884:	9801241e 	bne	r19,zero,400fd18 <_dtoa_r+0x12a0>
 400f888:	8829883a 	mov	r20,r17
 400f88c:	d9000617 	ldw	r4,24(sp)
 400f890:	dcc00717 	ldw	r19,28(sp)
 400f894:	9480004c 	andi	r18,r18,1
 400f898:	20bfffc4 	addi	r2,r4,-1
 400f89c:	9885883a 	add	r2,r19,r2
 400f8a0:	d8800415 	stw	r2,16(sp)
 400f8a4:	dc800615 	stw	r18,24(sp)
 400f8a8:	a80b883a 	mov	r5,r21
 400f8ac:	8009883a 	mov	r4,r16
 400f8b0:	400e8780 	call	400e878 <quorem>
 400f8b4:	880b883a 	mov	r5,r17
 400f8b8:	8009883a 	mov	r4,r16
 400f8bc:	102f883a 	mov	r23,r2
 400f8c0:	4011f600 	call	4011f60 <__mcmp>
 400f8c4:	a80b883a 	mov	r5,r21
 400f8c8:	a00d883a 	mov	r6,r20
 400f8cc:	e009883a 	mov	r4,fp
 400f8d0:	102d883a 	mov	r22,r2
 400f8d4:	4011fc00 	call	4011fc0 <__mdiff>
 400f8d8:	1007883a 	mov	r3,r2
 400f8dc:	10800317 	ldw	r2,12(r2)
 400f8e0:	bc800c04 	addi	r18,r23,48
 400f8e4:	180b883a 	mov	r5,r3
 400f8e8:	10004e1e 	bne	r2,zero,400fa24 <_dtoa_r+0xfac>
 400f8ec:	8009883a 	mov	r4,r16
 400f8f0:	d8c01615 	stw	r3,88(sp)
 400f8f4:	4011f600 	call	4011f60 <__mcmp>
 400f8f8:	d8c01617 	ldw	r3,88(sp)
 400f8fc:	e009883a 	mov	r4,fp
 400f900:	d8801615 	stw	r2,88(sp)
 400f904:	180b883a 	mov	r5,r3
 400f908:	40117400 	call	4011740 <_Bfree>
 400f90c:	d8801617 	ldw	r2,88(sp)
 400f910:	1000041e 	bne	r2,zero,400f924 <_dtoa_r+0xeac>
 400f914:	d9800317 	ldw	r6,12(sp)
 400f918:	3000021e 	bne	r6,zero,400f924 <_dtoa_r+0xeac>
 400f91c:	d8c00617 	ldw	r3,24(sp)
 400f920:	18003726 	beq	r3,zero,400fa00 <_dtoa_r+0xf88>
 400f924:	b0002016 	blt	r22,zero,400f9a8 <_dtoa_r+0xf30>
 400f928:	b000041e 	bne	r22,zero,400f93c <_dtoa_r+0xec4>
 400f92c:	d9000317 	ldw	r4,12(sp)
 400f930:	2000021e 	bne	r4,zero,400f93c <_dtoa_r+0xec4>
 400f934:	d8c00617 	ldw	r3,24(sp)
 400f938:	18001b26 	beq	r3,zero,400f9a8 <_dtoa_r+0xf30>
 400f93c:	00810716 	blt	zero,r2,400fd5c <_dtoa_r+0x12e4>
 400f940:	d8c00417 	ldw	r3,16(sp)
 400f944:	9d800044 	addi	r22,r19,1
 400f948:	9c800005 	stb	r18,0(r19)
 400f94c:	b02f883a 	mov	r23,r22
 400f950:	98c10626 	beq	r19,r3,400fd6c <_dtoa_r+0x12f4>
 400f954:	800b883a 	mov	r5,r16
 400f958:	000f883a 	mov	r7,zero
 400f95c:	01800284 	movi	r6,10
 400f960:	e009883a 	mov	r4,fp
 400f964:	40117680 	call	4011768 <__multadd>
 400f968:	1021883a 	mov	r16,r2
 400f96c:	000f883a 	mov	r7,zero
 400f970:	01800284 	movi	r6,10
 400f974:	880b883a 	mov	r5,r17
 400f978:	e009883a 	mov	r4,fp
 400f97c:	8d002526 	beq	r17,r20,400fa14 <_dtoa_r+0xf9c>
 400f980:	40117680 	call	4011768 <__multadd>
 400f984:	a00b883a 	mov	r5,r20
 400f988:	000f883a 	mov	r7,zero
 400f98c:	01800284 	movi	r6,10
 400f990:	e009883a 	mov	r4,fp
 400f994:	1023883a 	mov	r17,r2
 400f998:	40117680 	call	4011768 <__multadd>
 400f99c:	1029883a 	mov	r20,r2
 400f9a0:	b027883a 	mov	r19,r22
 400f9a4:	003fc006 	br	400f8a8 <__alt_data_end+0xfc00f8a8>
 400f9a8:	9011883a 	mov	r8,r18
 400f9ac:	00800e0e 	bge	zero,r2,400f9e8 <_dtoa_r+0xf70>
 400f9b0:	800b883a 	mov	r5,r16
 400f9b4:	01800044 	movi	r6,1
 400f9b8:	e009883a 	mov	r4,fp
 400f9bc:	da001715 	stw	r8,92(sp)
 400f9c0:	4011e180 	call	4011e18 <__lshift>
 400f9c4:	a80b883a 	mov	r5,r21
 400f9c8:	1009883a 	mov	r4,r2
 400f9cc:	1021883a 	mov	r16,r2
 400f9d0:	4011f600 	call	4011f60 <__mcmp>
 400f9d4:	da001717 	ldw	r8,92(sp)
 400f9d8:	0081960e 	bge	zero,r2,4010034 <_dtoa_r+0x15bc>
 400f9dc:	00800e44 	movi	r2,57
 400f9e0:	40817026 	beq	r8,r2,400ffa4 <_dtoa_r+0x152c>
 400f9e4:	ba000c44 	addi	r8,r23,49
 400f9e8:	8825883a 	mov	r18,r17
 400f9ec:	9dc00044 	addi	r23,r19,1
 400f9f0:	9a000005 	stb	r8,0(r19)
 400f9f4:	a023883a 	mov	r17,r20
 400f9f8:	dc000915 	stw	r16,36(sp)
 400f9fc:	003f2406 	br	400f690 <__alt_data_end+0xfc00f690>
 400fa00:	00800e44 	movi	r2,57
 400fa04:	9011883a 	mov	r8,r18
 400fa08:	90816626 	beq	r18,r2,400ffa4 <_dtoa_r+0x152c>
 400fa0c:	05bff516 	blt	zero,r22,400f9e4 <__alt_data_end+0xfc00f9e4>
 400fa10:	003ff506 	br	400f9e8 <__alt_data_end+0xfc00f9e8>
 400fa14:	40117680 	call	4011768 <__multadd>
 400fa18:	1023883a 	mov	r17,r2
 400fa1c:	1029883a 	mov	r20,r2
 400fa20:	003fdf06 	br	400f9a0 <__alt_data_end+0xfc00f9a0>
 400fa24:	e009883a 	mov	r4,fp
 400fa28:	40117400 	call	4011740 <_Bfree>
 400fa2c:	00800044 	movi	r2,1
 400fa30:	003fbc06 	br	400f924 <__alt_data_end+0xfc00f924>
 400fa34:	a80b883a 	mov	r5,r21
 400fa38:	8009883a 	mov	r4,r16
 400fa3c:	4011f600 	call	4011f60 <__mcmp>
 400fa40:	103edb0e 	bge	r2,zero,400f5b0 <__alt_data_end+0xfc00f5b0>
 400fa44:	800b883a 	mov	r5,r16
 400fa48:	000f883a 	mov	r7,zero
 400fa4c:	01800284 	movi	r6,10
 400fa50:	e009883a 	mov	r4,fp
 400fa54:	40117680 	call	4011768 <__multadd>
 400fa58:	1021883a 	mov	r16,r2
 400fa5c:	d8800517 	ldw	r2,20(sp)
 400fa60:	d8c00b17 	ldw	r3,44(sp)
 400fa64:	10bfffc4 	addi	r2,r2,-1
 400fa68:	d8800515 	stw	r2,20(sp)
 400fa6c:	183f761e 	bne	r3,zero,400f848 <__alt_data_end+0xfc00f848>
 400fa70:	d9000c17 	ldw	r4,48(sp)
 400fa74:	0101730e 	bge	zero,r4,4010044 <_dtoa_r+0x15cc>
 400fa78:	d9000615 	stw	r4,24(sp)
 400fa7c:	003ed006 	br	400f5c0 <__alt_data_end+0xfc00f5c0>
 400fa80:	00800084 	movi	r2,2
 400fa84:	3081861e 	bne	r6,r2,40100a0 <_dtoa_r+0x1628>
 400fa88:	d8000b15 	stw	zero,44(sp)
 400fa8c:	003f3c06 	br	400f780 <__alt_data_end+0xfc00f780>
 400fa90:	dc000917 	ldw	r16,36(sp)
 400fa94:	003e9206 	br	400f4e0 <__alt_data_end+0xfc00f4e0>
 400fa98:	d9c00317 	ldw	r7,12(sp)
 400fa9c:	00800084 	movi	r2,2
 400faa0:	11fec50e 	bge	r2,r7,400f5b8 <__alt_data_end+0xfc00f5b8>
 400faa4:	d9000617 	ldw	r4,24(sp)
 400faa8:	20013c1e 	bne	r4,zero,400ff9c <_dtoa_r+0x1524>
 400faac:	a80b883a 	mov	r5,r21
 400fab0:	000f883a 	mov	r7,zero
 400fab4:	01800144 	movi	r6,5
 400fab8:	e009883a 	mov	r4,fp
 400fabc:	40117680 	call	4011768 <__multadd>
 400fac0:	100b883a 	mov	r5,r2
 400fac4:	8009883a 	mov	r4,r16
 400fac8:	102b883a 	mov	r21,r2
 400facc:	4011f600 	call	4011f60 <__mcmp>
 400fad0:	dc000915 	stw	r16,36(sp)
 400fad4:	00bf410e 	bge	zero,r2,400f7dc <__alt_data_end+0xfc00f7dc>
 400fad8:	d9c00717 	ldw	r7,28(sp)
 400fadc:	00800c44 	movi	r2,49
 400fae0:	38800005 	stb	r2,0(r7)
 400fae4:	d8800517 	ldw	r2,20(sp)
 400fae8:	3dc00044 	addi	r23,r7,1
 400faec:	10800044 	addi	r2,r2,1
 400faf0:	d8800515 	stw	r2,20(sp)
 400faf4:	003f3d06 	br	400f7ec <__alt_data_end+0xfc00f7ec>
 400faf8:	d9800517 	ldw	r6,20(sp)
 400fafc:	d9c00717 	ldw	r7,28(sp)
 400fb00:	00800c44 	movi	r2,49
 400fb04:	31800044 	addi	r6,r6,1
 400fb08:	d9800515 	stw	r6,20(sp)
 400fb0c:	38800005 	stb	r2,0(r7)
 400fb10:	003edf06 	br	400f690 <__alt_data_end+0xfc00f690>
 400fb14:	d8000b15 	stw	zero,44(sp)
 400fb18:	003c9f06 	br	400ed98 <__alt_data_end+0xfc00ed98>
 400fb1c:	903e7e1e 	bne	r18,zero,400f518 <__alt_data_end+0xfc00f518>
 400fb20:	00800434 	movhi	r2,16
 400fb24:	10bfffc4 	addi	r2,r2,-1
 400fb28:	9884703a 	and	r2,r19,r2
 400fb2c:	1000ea1e 	bne	r2,zero,400fed8 <_dtoa_r+0x1460>
 400fb30:	9cdffc2c 	andhi	r19,r19,32752
 400fb34:	9800e826 	beq	r19,zero,400fed8 <_dtoa_r+0x1460>
 400fb38:	d9c00817 	ldw	r7,32(sp)
 400fb3c:	b5800044 	addi	r22,r22,1
 400fb40:	04c00044 	movi	r19,1
 400fb44:	39c00044 	addi	r7,r7,1
 400fb48:	d9c00815 	stw	r7,32(sp)
 400fb4c:	d8800d17 	ldw	r2,52(sp)
 400fb50:	103e721e 	bne	r2,zero,400f51c <__alt_data_end+0xfc00f51c>
 400fb54:	00800044 	movi	r2,1
 400fb58:	003e7906 	br	400f540 <__alt_data_end+0xfc00f540>
 400fb5c:	8009883a 	mov	r4,r16
 400fb60:	4017c540 	call	4017c54 <__floatsidf>
 400fb64:	d9800f17 	ldw	r6,60(sp)
 400fb68:	d9c01017 	ldw	r7,64(sp)
 400fb6c:	1009883a 	mov	r4,r2
 400fb70:	180b883a 	mov	r5,r3
 400fb74:	4016bc00 	call	4016bc0 <__muldf3>
 400fb78:	000d883a 	mov	r6,zero
 400fb7c:	01d00734 	movhi	r7,16412
 400fb80:	1009883a 	mov	r4,r2
 400fb84:	180b883a 	mov	r5,r3
 400fb88:	40157d40 	call	40157d4 <__adddf3>
 400fb8c:	047f3034 	movhi	r17,64704
 400fb90:	1021883a 	mov	r16,r2
 400fb94:	1c63883a 	add	r17,r3,r17
 400fb98:	d9000f17 	ldw	r4,60(sp)
 400fb9c:	d9401017 	ldw	r5,64(sp)
 400fba0:	000d883a 	mov	r6,zero
 400fba4:	01d00534 	movhi	r7,16404
 400fba8:	40172d80 	call	40172d8 <__subdf3>
 400fbac:	800d883a 	mov	r6,r16
 400fbb0:	880f883a 	mov	r7,r17
 400fbb4:	1009883a 	mov	r4,r2
 400fbb8:	180b883a 	mov	r5,r3
 400fbbc:	102b883a 	mov	r21,r2
 400fbc0:	1829883a 	mov	r20,r3
 400fbc4:	40169f00 	call	40169f0 <__gedf2>
 400fbc8:	00806c16 	blt	zero,r2,400fd7c <_dtoa_r+0x1304>
 400fbcc:	89e0003c 	xorhi	r7,r17,32768
 400fbd0:	800d883a 	mov	r6,r16
 400fbd4:	a809883a 	mov	r4,r21
 400fbd8:	a00b883a 	mov	r5,r20
 400fbdc:	4016acc0 	call	4016acc <__ledf2>
 400fbe0:	103d7e0e 	bge	r2,zero,400f1dc <__alt_data_end+0xfc00f1dc>
 400fbe4:	002b883a 	mov	r21,zero
 400fbe8:	0023883a 	mov	r17,zero
 400fbec:	003efb06 	br	400f7dc <__alt_data_end+0xfc00f7dc>
 400fbf0:	d8800717 	ldw	r2,28(sp)
 400fbf4:	003bd006 	br	400eb38 <__alt_data_end+0xfc00eb38>
 400fbf8:	d9000a17 	ldw	r4,40(sp)
 400fbfc:	d9800d17 	ldw	r6,52(sp)
 400fc00:	dd400a15 	stw	r21,40(sp)
 400fc04:	a905c83a 	sub	r2,r21,r4
 400fc08:	308d883a 	add	r6,r6,r2
 400fc0c:	d9800d15 	stw	r6,52(sp)
 400fc10:	002b883a 	mov	r21,zero
 400fc14:	003e0606 	br	400f430 <__alt_data_end+0xfc00f430>
 400fc18:	9023883a 	mov	r17,r18
 400fc1c:	9829883a 	mov	r20,r19
 400fc20:	04000084 	movi	r16,2
 400fc24:	003c9206 	br	400ee70 <__alt_data_end+0xfc00ee70>
 400fc28:	04000044 	movi	r16,1
 400fc2c:	dc000c15 	stw	r16,48(sp)
 400fc30:	dc000615 	stw	r16,24(sp)
 400fc34:	dc002215 	stw	r16,136(sp)
 400fc38:	e0001115 	stw	zero,68(fp)
 400fc3c:	000b883a 	mov	r5,zero
 400fc40:	003c6906 	br	400ede8 <__alt_data_end+0xfc00ede8>
 400fc44:	3021883a 	mov	r16,r6
 400fc48:	003ffb06 	br	400fc38 <__alt_data_end+0xfc00fc38>
 400fc4c:	1000021e 	bne	r2,zero,400fc58 <_dtoa_r+0x11e0>
 400fc50:	4200004c 	andi	r8,r8,1
 400fc54:	403e7d1e 	bne	r8,zero,400f64c <__alt_data_end+0xfc00f64c>
 400fc58:	01000c04 	movi	r4,48
 400fc5c:	00000106 	br	400fc64 <_dtoa_r+0x11ec>
 400fc60:	102f883a 	mov	r23,r2
 400fc64:	b8bfffc4 	addi	r2,r23,-1
 400fc68:	10c00007 	ldb	r3,0(r2)
 400fc6c:	193ffc26 	beq	r3,r4,400fc60 <__alt_data_end+0xfc00fc60>
 400fc70:	003e8706 	br	400f690 <__alt_data_end+0xfc00f690>
 400fc74:	d8800517 	ldw	r2,20(sp)
 400fc78:	00a3c83a 	sub	r17,zero,r2
 400fc7c:	8800a426 	beq	r17,zero,400ff10 <_dtoa_r+0x1498>
 400fc80:	888003cc 	andi	r2,r17,15
 400fc84:	100490fa 	slli	r2,r2,3
 400fc88:	00c100b4 	movhi	r3,1026
 400fc8c:	18f0cb04 	addi	r3,r3,-15572
 400fc90:	1885883a 	add	r2,r3,r2
 400fc94:	11800017 	ldw	r6,0(r2)
 400fc98:	11c00117 	ldw	r7,4(r2)
 400fc9c:	9009883a 	mov	r4,r18
 400fca0:	980b883a 	mov	r5,r19
 400fca4:	8823d13a 	srai	r17,r17,4
 400fca8:	4016bc00 	call	4016bc0 <__muldf3>
 400fcac:	d8800f15 	stw	r2,60(sp)
 400fcb0:	d8c01015 	stw	r3,64(sp)
 400fcb4:	8800e826 	beq	r17,zero,4010058 <_dtoa_r+0x15e0>
 400fcb8:	050100b4 	movhi	r20,1026
 400fcbc:	a530c104 	addi	r20,r20,-15612
 400fcc0:	04000084 	movi	r16,2
 400fcc4:	8980004c 	andi	r6,r17,1
 400fcc8:	1009883a 	mov	r4,r2
 400fccc:	8823d07a 	srai	r17,r17,1
 400fcd0:	180b883a 	mov	r5,r3
 400fcd4:	30000426 	beq	r6,zero,400fce8 <_dtoa_r+0x1270>
 400fcd8:	a1800017 	ldw	r6,0(r20)
 400fcdc:	a1c00117 	ldw	r7,4(r20)
 400fce0:	84000044 	addi	r16,r16,1
 400fce4:	4016bc00 	call	4016bc0 <__muldf3>
 400fce8:	a5000204 	addi	r20,r20,8
 400fcec:	883ff51e 	bne	r17,zero,400fcc4 <__alt_data_end+0xfc00fcc4>
 400fcf0:	d8800f15 	stw	r2,60(sp)
 400fcf4:	d8c01015 	stw	r3,64(sp)
 400fcf8:	003c7606 	br	400eed4 <__alt_data_end+0xfc00eed4>
 400fcfc:	00c00c04 	movi	r3,48
 400fd00:	10c00005 	stb	r3,0(r2)
 400fd04:	d8c00517 	ldw	r3,20(sp)
 400fd08:	bd3fffc3 	ldbu	r20,-1(r23)
 400fd0c:	18c00044 	addi	r3,r3,1
 400fd10:	d8c00515 	stw	r3,20(sp)
 400fd14:	003db906 	br	400f3fc <__alt_data_end+0xfc00f3fc>
 400fd18:	89400117 	ldw	r5,4(r17)
 400fd1c:	e009883a 	mov	r4,fp
 400fd20:	40116980 	call	4011698 <_Balloc>
 400fd24:	89800417 	ldw	r6,16(r17)
 400fd28:	89400304 	addi	r5,r17,12
 400fd2c:	11000304 	addi	r4,r2,12
 400fd30:	31800084 	addi	r6,r6,2
 400fd34:	318d883a 	add	r6,r6,r6
 400fd38:	318d883a 	add	r6,r6,r6
 400fd3c:	1027883a 	mov	r19,r2
 400fd40:	400bbd00 	call	400bbd0 <memcpy>
 400fd44:	01800044 	movi	r6,1
 400fd48:	980b883a 	mov	r5,r19
 400fd4c:	e009883a 	mov	r4,fp
 400fd50:	4011e180 	call	4011e18 <__lshift>
 400fd54:	1029883a 	mov	r20,r2
 400fd58:	003ecc06 	br	400f88c <__alt_data_end+0xfc00f88c>
 400fd5c:	00800e44 	movi	r2,57
 400fd60:	90809026 	beq	r18,r2,400ffa4 <_dtoa_r+0x152c>
 400fd64:	92000044 	addi	r8,r18,1
 400fd68:	003f1f06 	br	400f9e8 <__alt_data_end+0xfc00f9e8>
 400fd6c:	9011883a 	mov	r8,r18
 400fd70:	8825883a 	mov	r18,r17
 400fd74:	a023883a 	mov	r17,r20
 400fd78:	003e2906 	br	400f620 <__alt_data_end+0xfc00f620>
 400fd7c:	002b883a 	mov	r21,zero
 400fd80:	0023883a 	mov	r17,zero
 400fd84:	003f5406 	br	400fad8 <__alt_data_end+0xfc00fad8>
 400fd88:	61bfffc4 	addi	r6,r12,-1
 400fd8c:	300490fa 	slli	r2,r6,3
 400fd90:	00c100b4 	movhi	r3,1026
 400fd94:	18f0cb04 	addi	r3,r3,-15572
 400fd98:	1885883a 	add	r2,r3,r2
 400fd9c:	11000017 	ldw	r4,0(r2)
 400fda0:	11400117 	ldw	r5,4(r2)
 400fda4:	d8800717 	ldw	r2,28(sp)
 400fda8:	880f883a 	mov	r7,r17
 400fdac:	d9801215 	stw	r6,72(sp)
 400fdb0:	800d883a 	mov	r6,r16
 400fdb4:	db001615 	stw	r12,88(sp)
 400fdb8:	15c00044 	addi	r23,r2,1
 400fdbc:	4016bc00 	call	4016bc0 <__muldf3>
 400fdc0:	d9401017 	ldw	r5,64(sp)
 400fdc4:	d9000f17 	ldw	r4,60(sp)
 400fdc8:	d8c01515 	stw	r3,84(sp)
 400fdcc:	d8801415 	stw	r2,80(sp)
 400fdd0:	4017bd40 	call	4017bd4 <__fixdfsi>
 400fdd4:	1009883a 	mov	r4,r2
 400fdd8:	1021883a 	mov	r16,r2
 400fddc:	4017c540 	call	4017c54 <__floatsidf>
 400fde0:	d9000f17 	ldw	r4,60(sp)
 400fde4:	d9401017 	ldw	r5,64(sp)
 400fde8:	100d883a 	mov	r6,r2
 400fdec:	180f883a 	mov	r7,r3
 400fdf0:	40172d80 	call	40172d8 <__subdf3>
 400fdf4:	1829883a 	mov	r20,r3
 400fdf8:	d8c00717 	ldw	r3,28(sp)
 400fdfc:	84000c04 	addi	r16,r16,48
 400fe00:	1023883a 	mov	r17,r2
 400fe04:	1c000005 	stb	r16,0(r3)
 400fe08:	db001617 	ldw	r12,88(sp)
 400fe0c:	00800044 	movi	r2,1
 400fe10:	60802226 	beq	r12,r2,400fe9c <_dtoa_r+0x1424>
 400fe14:	d9c00717 	ldw	r7,28(sp)
 400fe18:	8805883a 	mov	r2,r17
 400fe1c:	b82b883a 	mov	r21,r23
 400fe20:	3b19883a 	add	r12,r7,r12
 400fe24:	6023883a 	mov	r17,r12
 400fe28:	a007883a 	mov	r3,r20
 400fe2c:	dc800f15 	stw	r18,60(sp)
 400fe30:	000d883a 	mov	r6,zero
 400fe34:	01d00934 	movhi	r7,16420
 400fe38:	1009883a 	mov	r4,r2
 400fe3c:	180b883a 	mov	r5,r3
 400fe40:	4016bc00 	call	4016bc0 <__muldf3>
 400fe44:	180b883a 	mov	r5,r3
 400fe48:	1009883a 	mov	r4,r2
 400fe4c:	1829883a 	mov	r20,r3
 400fe50:	1025883a 	mov	r18,r2
 400fe54:	4017bd40 	call	4017bd4 <__fixdfsi>
 400fe58:	1009883a 	mov	r4,r2
 400fe5c:	1021883a 	mov	r16,r2
 400fe60:	4017c540 	call	4017c54 <__floatsidf>
 400fe64:	100d883a 	mov	r6,r2
 400fe68:	180f883a 	mov	r7,r3
 400fe6c:	9009883a 	mov	r4,r18
 400fe70:	a00b883a 	mov	r5,r20
 400fe74:	84000c04 	addi	r16,r16,48
 400fe78:	40172d80 	call	40172d8 <__subdf3>
 400fe7c:	ad400044 	addi	r21,r21,1
 400fe80:	ac3fffc5 	stb	r16,-1(r21)
 400fe84:	ac7fea1e 	bne	r21,r17,400fe30 <__alt_data_end+0xfc00fe30>
 400fe88:	1023883a 	mov	r17,r2
 400fe8c:	d8801217 	ldw	r2,72(sp)
 400fe90:	dc800f17 	ldw	r18,60(sp)
 400fe94:	1829883a 	mov	r20,r3
 400fe98:	b8af883a 	add	r23,r23,r2
 400fe9c:	d9001417 	ldw	r4,80(sp)
 400fea0:	d9401517 	ldw	r5,84(sp)
 400fea4:	000d883a 	mov	r6,zero
 400fea8:	01cff834 	movhi	r7,16352
 400feac:	40157d40 	call	40157d4 <__adddf3>
 400feb0:	880d883a 	mov	r6,r17
 400feb4:	a00f883a 	mov	r7,r20
 400feb8:	1009883a 	mov	r4,r2
 400febc:	180b883a 	mov	r5,r3
 400fec0:	4016acc0 	call	4016acc <__ledf2>
 400fec4:	10003e0e 	bge	r2,zero,400ffc0 <_dtoa_r+0x1548>
 400fec8:	d9001317 	ldw	r4,76(sp)
 400fecc:	bd3fffc3 	ldbu	r20,-1(r23)
 400fed0:	d9000515 	stw	r4,20(sp)
 400fed4:	003d3b06 	br	400f3c4 <__alt_data_end+0xfc00f3c4>
 400fed8:	0027883a 	mov	r19,zero
 400fedc:	003f1b06 	br	400fb4c <__alt_data_end+0xfc00fb4c>
 400fee0:	d8800817 	ldw	r2,32(sp)
 400fee4:	11e9c83a 	sub	r20,r2,r7
 400fee8:	0005883a 	mov	r2,zero
 400feec:	003d5406 	br	400f440 <__alt_data_end+0xfc00f440>
 400fef0:	00800044 	movi	r2,1
 400fef4:	003dc706 	br	400f614 <__alt_data_end+0xfc00f614>
 400fef8:	d8c00217 	ldw	r3,8(sp)
 400fefc:	00800d84 	movi	r2,54
 400ff00:	dd400a17 	ldw	r21,40(sp)
 400ff04:	10c5c83a 	sub	r2,r2,r3
 400ff08:	dd000817 	ldw	r20,32(sp)
 400ff0c:	003d4c06 	br	400f440 <__alt_data_end+0xfc00f440>
 400ff10:	dc800f15 	stw	r18,60(sp)
 400ff14:	dcc01015 	stw	r19,64(sp)
 400ff18:	04000084 	movi	r16,2
 400ff1c:	003bed06 	br	400eed4 <__alt_data_end+0xfc00eed4>
 400ff20:	d9000617 	ldw	r4,24(sp)
 400ff24:	203f0d26 	beq	r4,zero,400fb5c <__alt_data_end+0xfc00fb5c>
 400ff28:	d9800c17 	ldw	r6,48(sp)
 400ff2c:	01bcab0e 	bge	zero,r6,400f1dc <__alt_data_end+0xfc00f1dc>
 400ff30:	d9401017 	ldw	r5,64(sp)
 400ff34:	d9000f17 	ldw	r4,60(sp)
 400ff38:	000d883a 	mov	r6,zero
 400ff3c:	01d00934 	movhi	r7,16420
 400ff40:	4016bc00 	call	4016bc0 <__muldf3>
 400ff44:	81000044 	addi	r4,r16,1
 400ff48:	d8800f15 	stw	r2,60(sp)
 400ff4c:	d8c01015 	stw	r3,64(sp)
 400ff50:	4017c540 	call	4017c54 <__floatsidf>
 400ff54:	d9800f17 	ldw	r6,60(sp)
 400ff58:	d9c01017 	ldw	r7,64(sp)
 400ff5c:	1009883a 	mov	r4,r2
 400ff60:	180b883a 	mov	r5,r3
 400ff64:	4016bc00 	call	4016bc0 <__muldf3>
 400ff68:	01d00734 	movhi	r7,16412
 400ff6c:	000d883a 	mov	r6,zero
 400ff70:	1009883a 	mov	r4,r2
 400ff74:	180b883a 	mov	r5,r3
 400ff78:	40157d40 	call	40157d4 <__adddf3>
 400ff7c:	d9c00517 	ldw	r7,20(sp)
 400ff80:	047f3034 	movhi	r17,64704
 400ff84:	1021883a 	mov	r16,r2
 400ff88:	39ffffc4 	addi	r7,r7,-1
 400ff8c:	d9c01315 	stw	r7,76(sp)
 400ff90:	1c63883a 	add	r17,r3,r17
 400ff94:	db000c17 	ldw	r12,48(sp)
 400ff98:	003bea06 	br	400ef44 <__alt_data_end+0xfc00ef44>
 400ff9c:	dc000915 	stw	r16,36(sp)
 400ffa0:	003e0e06 	br	400f7dc <__alt_data_end+0xfc00f7dc>
 400ffa4:	01000e44 	movi	r4,57
 400ffa8:	8825883a 	mov	r18,r17
 400ffac:	9dc00044 	addi	r23,r19,1
 400ffb0:	99000005 	stb	r4,0(r19)
 400ffb4:	a023883a 	mov	r17,r20
 400ffb8:	dc000915 	stw	r16,36(sp)
 400ffbc:	003da406 	br	400f650 <__alt_data_end+0xfc00f650>
 400ffc0:	d9801417 	ldw	r6,80(sp)
 400ffc4:	d9c01517 	ldw	r7,84(sp)
 400ffc8:	0009883a 	mov	r4,zero
 400ffcc:	014ff834 	movhi	r5,16352
 400ffd0:	40172d80 	call	40172d8 <__subdf3>
 400ffd4:	880d883a 	mov	r6,r17
 400ffd8:	a00f883a 	mov	r7,r20
 400ffdc:	1009883a 	mov	r4,r2
 400ffe0:	180b883a 	mov	r5,r3
 400ffe4:	40169f00 	call	40169f0 <__gedf2>
 400ffe8:	00bc7c0e 	bge	zero,r2,400f1dc <__alt_data_end+0xfc00f1dc>
 400ffec:	01000c04 	movi	r4,48
 400fff0:	00000106 	br	400fff8 <_dtoa_r+0x1580>
 400fff4:	102f883a 	mov	r23,r2
 400fff8:	b8bfffc4 	addi	r2,r23,-1
 400fffc:	10c00007 	ldb	r3,0(r2)
 4010000:	193ffc26 	beq	r3,r4,400fff4 <__alt_data_end+0xfc00fff4>
 4010004:	d9801317 	ldw	r6,76(sp)
 4010008:	d9800515 	stw	r6,20(sp)
 401000c:	003c4406 	br	400f120 <__alt_data_end+0xfc00f120>
 4010010:	d9801317 	ldw	r6,76(sp)
 4010014:	d9800515 	stw	r6,20(sp)
 4010018:	003cea06 	br	400f3c4 <__alt_data_end+0xfc00f3c4>
 401001c:	dd800f17 	ldw	r22,60(sp)
 4010020:	dcc01017 	ldw	r19,64(sp)
 4010024:	dc801217 	ldw	r18,72(sp)
 4010028:	003c6c06 	br	400f1dc <__alt_data_end+0xfc00f1dc>
 401002c:	903e031e 	bne	r18,zero,400f83c <__alt_data_end+0xfc00f83c>
 4010030:	003ebb06 	br	400fb20 <__alt_data_end+0xfc00fb20>
 4010034:	103e6c1e 	bne	r2,zero,400f9e8 <__alt_data_end+0xfc00f9e8>
 4010038:	4080004c 	andi	r2,r8,1
 401003c:	103e6a26 	beq	r2,zero,400f9e8 <__alt_data_end+0xfc00f9e8>
 4010040:	003e6606 	br	400f9dc <__alt_data_end+0xfc00f9dc>
 4010044:	d8c00317 	ldw	r3,12(sp)
 4010048:	00800084 	movi	r2,2
 401004c:	10c02916 	blt	r2,r3,40100f4 <_dtoa_r+0x167c>
 4010050:	d9000c17 	ldw	r4,48(sp)
 4010054:	003e8806 	br	400fa78 <__alt_data_end+0xfc00fa78>
 4010058:	04000084 	movi	r16,2
 401005c:	003b9d06 	br	400eed4 <__alt_data_end+0xfc00eed4>
 4010060:	d9001317 	ldw	r4,76(sp)
 4010064:	d9000515 	stw	r4,20(sp)
 4010068:	003cd606 	br	400f3c4 <__alt_data_end+0xfc00f3c4>
 401006c:	d8801317 	ldw	r2,76(sp)
 4010070:	d8800515 	stw	r2,20(sp)
 4010074:	003c2a06 	br	400f120 <__alt_data_end+0xfc00f120>
 4010078:	d9800317 	ldw	r6,12(sp)
 401007c:	00800084 	movi	r2,2
 4010080:	11801516 	blt	r2,r6,40100d8 <_dtoa_r+0x1660>
 4010084:	d9c00c17 	ldw	r7,48(sp)
 4010088:	d9c00615 	stw	r7,24(sp)
 401008c:	003df706 	br	400f86c <__alt_data_end+0xfc00f86c>
 4010090:	193d3926 	beq	r3,r4,400f578 <__alt_data_end+0xfc00f578>
 4010094:	00c00f04 	movi	r3,60
 4010098:	1885c83a 	sub	r2,r3,r2
 401009c:	003ddf06 	br	400f81c <__alt_data_end+0xfc00f81c>
 40100a0:	e009883a 	mov	r4,fp
 40100a4:	e0001115 	stw	zero,68(fp)
 40100a8:	000b883a 	mov	r5,zero
 40100ac:	40116980 	call	4011698 <_Balloc>
 40100b0:	d8800715 	stw	r2,28(sp)
 40100b4:	d8c00717 	ldw	r3,28(sp)
 40100b8:	00bfffc4 	movi	r2,-1
 40100bc:	01000044 	movi	r4,1
 40100c0:	d8800c15 	stw	r2,48(sp)
 40100c4:	e0c01015 	stw	r3,64(fp)
 40100c8:	d9000b15 	stw	r4,44(sp)
 40100cc:	d8800615 	stw	r2,24(sp)
 40100d0:	d8002215 	stw	zero,136(sp)
 40100d4:	003c4106 	br	400f1dc <__alt_data_end+0xfc00f1dc>
 40100d8:	d8c00c17 	ldw	r3,48(sp)
 40100dc:	d8c00615 	stw	r3,24(sp)
 40100e0:	003e7006 	br	400faa4 <__alt_data_end+0xfc00faa4>
 40100e4:	04400044 	movi	r17,1
 40100e8:	003b2006 	br	400ed6c <__alt_data_end+0xfc00ed6c>
 40100ec:	000b883a 	mov	r5,zero
 40100f0:	003b3d06 	br	400ede8 <__alt_data_end+0xfc00ede8>
 40100f4:	d8800c17 	ldw	r2,48(sp)
 40100f8:	d8800615 	stw	r2,24(sp)
 40100fc:	003e6906 	br	400faa4 <__alt_data_end+0xfc00faa4>

04010100 <__sflush_r>:
 4010100:	2880030b 	ldhu	r2,12(r5)
 4010104:	defffb04 	addi	sp,sp,-20
 4010108:	dcc00315 	stw	r19,12(sp)
 401010c:	dc400115 	stw	r17,4(sp)
 4010110:	dfc00415 	stw	ra,16(sp)
 4010114:	dc800215 	stw	r18,8(sp)
 4010118:	dc000015 	stw	r16,0(sp)
 401011c:	10c0020c 	andi	r3,r2,8
 4010120:	2823883a 	mov	r17,r5
 4010124:	2027883a 	mov	r19,r4
 4010128:	1800311e 	bne	r3,zero,40101f0 <__sflush_r+0xf0>
 401012c:	28c00117 	ldw	r3,4(r5)
 4010130:	10820014 	ori	r2,r2,2048
 4010134:	2880030d 	sth	r2,12(r5)
 4010138:	00c04b0e 	bge	zero,r3,4010268 <__sflush_r+0x168>
 401013c:	8a000a17 	ldw	r8,40(r17)
 4010140:	40002326 	beq	r8,zero,40101d0 <__sflush_r+0xd0>
 4010144:	9c000017 	ldw	r16,0(r19)
 4010148:	10c4000c 	andi	r3,r2,4096
 401014c:	98000015 	stw	zero,0(r19)
 4010150:	18004826 	beq	r3,zero,4010274 <__sflush_r+0x174>
 4010154:	89801417 	ldw	r6,80(r17)
 4010158:	10c0010c 	andi	r3,r2,4
 401015c:	18000626 	beq	r3,zero,4010178 <__sflush_r+0x78>
 4010160:	88c00117 	ldw	r3,4(r17)
 4010164:	88800c17 	ldw	r2,48(r17)
 4010168:	30cdc83a 	sub	r6,r6,r3
 401016c:	10000226 	beq	r2,zero,4010178 <__sflush_r+0x78>
 4010170:	88800f17 	ldw	r2,60(r17)
 4010174:	308dc83a 	sub	r6,r6,r2
 4010178:	89400717 	ldw	r5,28(r17)
 401017c:	000f883a 	mov	r7,zero
 4010180:	9809883a 	mov	r4,r19
 4010184:	403ee83a 	callr	r8
 4010188:	00ffffc4 	movi	r3,-1
 401018c:	10c04426 	beq	r2,r3,40102a0 <__sflush_r+0x1a0>
 4010190:	88c0030b 	ldhu	r3,12(r17)
 4010194:	89000417 	ldw	r4,16(r17)
 4010198:	88000115 	stw	zero,4(r17)
 401019c:	197dffcc 	andi	r5,r3,63487
 40101a0:	8940030d 	sth	r5,12(r17)
 40101a4:	89000015 	stw	r4,0(r17)
 40101a8:	18c4000c 	andi	r3,r3,4096
 40101ac:	18002c1e 	bne	r3,zero,4010260 <__sflush_r+0x160>
 40101b0:	89400c17 	ldw	r5,48(r17)
 40101b4:	9c000015 	stw	r16,0(r19)
 40101b8:	28000526 	beq	r5,zero,40101d0 <__sflush_r+0xd0>
 40101bc:	88801004 	addi	r2,r17,64
 40101c0:	28800226 	beq	r5,r2,40101cc <__sflush_r+0xcc>
 40101c4:	9809883a 	mov	r4,r19
 40101c8:	401086c0 	call	401086c <_free_r>
 40101cc:	88000c15 	stw	zero,48(r17)
 40101d0:	0005883a 	mov	r2,zero
 40101d4:	dfc00417 	ldw	ra,16(sp)
 40101d8:	dcc00317 	ldw	r19,12(sp)
 40101dc:	dc800217 	ldw	r18,8(sp)
 40101e0:	dc400117 	ldw	r17,4(sp)
 40101e4:	dc000017 	ldw	r16,0(sp)
 40101e8:	dec00504 	addi	sp,sp,20
 40101ec:	f800283a 	ret
 40101f0:	2c800417 	ldw	r18,16(r5)
 40101f4:	903ff626 	beq	r18,zero,40101d0 <__alt_data_end+0xfc0101d0>
 40101f8:	2c000017 	ldw	r16,0(r5)
 40101fc:	108000cc 	andi	r2,r2,3
 4010200:	2c800015 	stw	r18,0(r5)
 4010204:	84a1c83a 	sub	r16,r16,r18
 4010208:	1000131e 	bne	r2,zero,4010258 <__sflush_r+0x158>
 401020c:	28800517 	ldw	r2,20(r5)
 4010210:	88800215 	stw	r2,8(r17)
 4010214:	04000316 	blt	zero,r16,4010224 <__sflush_r+0x124>
 4010218:	003fed06 	br	40101d0 <__alt_data_end+0xfc0101d0>
 401021c:	90a5883a 	add	r18,r18,r2
 4010220:	043feb0e 	bge	zero,r16,40101d0 <__alt_data_end+0xfc0101d0>
 4010224:	88800917 	ldw	r2,36(r17)
 4010228:	89400717 	ldw	r5,28(r17)
 401022c:	800f883a 	mov	r7,r16
 4010230:	900d883a 	mov	r6,r18
 4010234:	9809883a 	mov	r4,r19
 4010238:	103ee83a 	callr	r2
 401023c:	80a1c83a 	sub	r16,r16,r2
 4010240:	00bff616 	blt	zero,r2,401021c <__alt_data_end+0xfc01021c>
 4010244:	88c0030b 	ldhu	r3,12(r17)
 4010248:	00bfffc4 	movi	r2,-1
 401024c:	18c01014 	ori	r3,r3,64
 4010250:	88c0030d 	sth	r3,12(r17)
 4010254:	003fdf06 	br	40101d4 <__alt_data_end+0xfc0101d4>
 4010258:	0005883a 	mov	r2,zero
 401025c:	003fec06 	br	4010210 <__alt_data_end+0xfc010210>
 4010260:	88801415 	stw	r2,80(r17)
 4010264:	003fd206 	br	40101b0 <__alt_data_end+0xfc0101b0>
 4010268:	28c00f17 	ldw	r3,60(r5)
 401026c:	00ffb316 	blt	zero,r3,401013c <__alt_data_end+0xfc01013c>
 4010270:	003fd706 	br	40101d0 <__alt_data_end+0xfc0101d0>
 4010274:	89400717 	ldw	r5,28(r17)
 4010278:	000d883a 	mov	r6,zero
 401027c:	01c00044 	movi	r7,1
 4010280:	9809883a 	mov	r4,r19
 4010284:	403ee83a 	callr	r8
 4010288:	100d883a 	mov	r6,r2
 401028c:	00bfffc4 	movi	r2,-1
 4010290:	30801426 	beq	r6,r2,40102e4 <__sflush_r+0x1e4>
 4010294:	8880030b 	ldhu	r2,12(r17)
 4010298:	8a000a17 	ldw	r8,40(r17)
 401029c:	003fae06 	br	4010158 <__alt_data_end+0xfc010158>
 40102a0:	98c00017 	ldw	r3,0(r19)
 40102a4:	183fba26 	beq	r3,zero,4010190 <__alt_data_end+0xfc010190>
 40102a8:	01000744 	movi	r4,29
 40102ac:	19000626 	beq	r3,r4,40102c8 <__sflush_r+0x1c8>
 40102b0:	01000584 	movi	r4,22
 40102b4:	19000426 	beq	r3,r4,40102c8 <__sflush_r+0x1c8>
 40102b8:	88c0030b 	ldhu	r3,12(r17)
 40102bc:	18c01014 	ori	r3,r3,64
 40102c0:	88c0030d 	sth	r3,12(r17)
 40102c4:	003fc306 	br	40101d4 <__alt_data_end+0xfc0101d4>
 40102c8:	8880030b 	ldhu	r2,12(r17)
 40102cc:	88c00417 	ldw	r3,16(r17)
 40102d0:	88000115 	stw	zero,4(r17)
 40102d4:	10bdffcc 	andi	r2,r2,63487
 40102d8:	8880030d 	sth	r2,12(r17)
 40102dc:	88c00015 	stw	r3,0(r17)
 40102e0:	003fb306 	br	40101b0 <__alt_data_end+0xfc0101b0>
 40102e4:	98800017 	ldw	r2,0(r19)
 40102e8:	103fea26 	beq	r2,zero,4010294 <__alt_data_end+0xfc010294>
 40102ec:	00c00744 	movi	r3,29
 40102f0:	10c00226 	beq	r2,r3,40102fc <__sflush_r+0x1fc>
 40102f4:	00c00584 	movi	r3,22
 40102f8:	10c0031e 	bne	r2,r3,4010308 <__sflush_r+0x208>
 40102fc:	9c000015 	stw	r16,0(r19)
 4010300:	0005883a 	mov	r2,zero
 4010304:	003fb306 	br	40101d4 <__alt_data_end+0xfc0101d4>
 4010308:	88c0030b 	ldhu	r3,12(r17)
 401030c:	3005883a 	mov	r2,r6
 4010310:	18c01014 	ori	r3,r3,64
 4010314:	88c0030d 	sth	r3,12(r17)
 4010318:	003fae06 	br	40101d4 <__alt_data_end+0xfc0101d4>

0401031c <_fflush_r>:
 401031c:	defffd04 	addi	sp,sp,-12
 4010320:	dc000115 	stw	r16,4(sp)
 4010324:	dfc00215 	stw	ra,8(sp)
 4010328:	2021883a 	mov	r16,r4
 401032c:	20000226 	beq	r4,zero,4010338 <_fflush_r+0x1c>
 4010330:	20800e17 	ldw	r2,56(r4)
 4010334:	10000c26 	beq	r2,zero,4010368 <_fflush_r+0x4c>
 4010338:	2880030f 	ldh	r2,12(r5)
 401033c:	1000051e 	bne	r2,zero,4010354 <_fflush_r+0x38>
 4010340:	0005883a 	mov	r2,zero
 4010344:	dfc00217 	ldw	ra,8(sp)
 4010348:	dc000117 	ldw	r16,4(sp)
 401034c:	dec00304 	addi	sp,sp,12
 4010350:	f800283a 	ret
 4010354:	8009883a 	mov	r4,r16
 4010358:	dfc00217 	ldw	ra,8(sp)
 401035c:	dc000117 	ldw	r16,4(sp)
 4010360:	dec00304 	addi	sp,sp,12
 4010364:	40101001 	jmpi	4010100 <__sflush_r>
 4010368:	d9400015 	stw	r5,0(sp)
 401036c:	40106f80 	call	40106f8 <__sinit>
 4010370:	d9400017 	ldw	r5,0(sp)
 4010374:	003ff006 	br	4010338 <__alt_data_end+0xfc010338>

04010378 <fflush>:
 4010378:	20000526 	beq	r4,zero,4010390 <fflush+0x18>
 401037c:	008100f4 	movhi	r2,1027
 4010380:	10a3e504 	addi	r2,r2,-28780
 4010384:	200b883a 	mov	r5,r4
 4010388:	11000017 	ldw	r4,0(r2)
 401038c:	401031c1 	jmpi	401031c <_fflush_r>
 4010390:	008100f4 	movhi	r2,1027
 4010394:	10a3e404 	addi	r2,r2,-28784
 4010398:	11000017 	ldw	r4,0(r2)
 401039c:	01410074 	movhi	r5,1025
 40103a0:	2940c704 	addi	r5,r5,796
 40103a4:	40110fc1 	jmpi	40110fc <_fwalk_reent>

040103a8 <__fp_unlock>:
 40103a8:	0005883a 	mov	r2,zero
 40103ac:	f800283a 	ret

040103b0 <_cleanup_r>:
 40103b0:	01410074 	movhi	r5,1025
 40103b4:	29515a04 	addi	r5,r5,17768
 40103b8:	40110fc1 	jmpi	40110fc <_fwalk_reent>

040103bc <__sinit.part.1>:
 40103bc:	defff704 	addi	sp,sp,-36
 40103c0:	00c10074 	movhi	r3,1025
 40103c4:	dfc00815 	stw	ra,32(sp)
 40103c8:	ddc00715 	stw	r23,28(sp)
 40103cc:	dd800615 	stw	r22,24(sp)
 40103d0:	dd400515 	stw	r21,20(sp)
 40103d4:	dd000415 	stw	r20,16(sp)
 40103d8:	dcc00315 	stw	r19,12(sp)
 40103dc:	dc800215 	stw	r18,8(sp)
 40103e0:	dc400115 	stw	r17,4(sp)
 40103e4:	dc000015 	stw	r16,0(sp)
 40103e8:	18c0ec04 	addi	r3,r3,944
 40103ec:	24000117 	ldw	r16,4(r4)
 40103f0:	20c00f15 	stw	r3,60(r4)
 40103f4:	2080bb04 	addi	r2,r4,748
 40103f8:	00c000c4 	movi	r3,3
 40103fc:	20c0b915 	stw	r3,740(r4)
 4010400:	2080ba15 	stw	r2,744(r4)
 4010404:	2000b815 	stw	zero,736(r4)
 4010408:	05c00204 	movi	r23,8
 401040c:	00800104 	movi	r2,4
 4010410:	2025883a 	mov	r18,r4
 4010414:	b80d883a 	mov	r6,r23
 4010418:	81001704 	addi	r4,r16,92
 401041c:	000b883a 	mov	r5,zero
 4010420:	80000015 	stw	zero,0(r16)
 4010424:	80000115 	stw	zero,4(r16)
 4010428:	80000215 	stw	zero,8(r16)
 401042c:	8080030d 	sth	r2,12(r16)
 4010430:	80001915 	stw	zero,100(r16)
 4010434:	8000038d 	sth	zero,14(r16)
 4010438:	80000415 	stw	zero,16(r16)
 401043c:	80000515 	stw	zero,20(r16)
 4010440:	80000615 	stw	zero,24(r16)
 4010444:	400bd180 	call	400bd18 <memset>
 4010448:	05810074 	movhi	r22,1025
 401044c:	94400217 	ldw	r17,8(r18)
 4010450:	05410074 	movhi	r21,1025
 4010454:	05010074 	movhi	r20,1025
 4010458:	04c10074 	movhi	r19,1025
 401045c:	b58b1b04 	addi	r22,r22,11372
 4010460:	ad4b3204 	addi	r21,r21,11464
 4010464:	a50b5104 	addi	r20,r20,11588
 4010468:	9ccb6804 	addi	r19,r19,11680
 401046c:	85800815 	stw	r22,32(r16)
 4010470:	85400915 	stw	r21,36(r16)
 4010474:	85000a15 	stw	r20,40(r16)
 4010478:	84c00b15 	stw	r19,44(r16)
 401047c:	84000715 	stw	r16,28(r16)
 4010480:	00800284 	movi	r2,10
 4010484:	8880030d 	sth	r2,12(r17)
 4010488:	00800044 	movi	r2,1
 401048c:	b80d883a 	mov	r6,r23
 4010490:	89001704 	addi	r4,r17,92
 4010494:	000b883a 	mov	r5,zero
 4010498:	88000015 	stw	zero,0(r17)
 401049c:	88000115 	stw	zero,4(r17)
 40104a0:	88000215 	stw	zero,8(r17)
 40104a4:	88001915 	stw	zero,100(r17)
 40104a8:	8880038d 	sth	r2,14(r17)
 40104ac:	88000415 	stw	zero,16(r17)
 40104b0:	88000515 	stw	zero,20(r17)
 40104b4:	88000615 	stw	zero,24(r17)
 40104b8:	400bd180 	call	400bd18 <memset>
 40104bc:	94000317 	ldw	r16,12(r18)
 40104c0:	00800484 	movi	r2,18
 40104c4:	8c400715 	stw	r17,28(r17)
 40104c8:	8d800815 	stw	r22,32(r17)
 40104cc:	8d400915 	stw	r21,36(r17)
 40104d0:	8d000a15 	stw	r20,40(r17)
 40104d4:	8cc00b15 	stw	r19,44(r17)
 40104d8:	8080030d 	sth	r2,12(r16)
 40104dc:	00800084 	movi	r2,2
 40104e0:	80000015 	stw	zero,0(r16)
 40104e4:	80000115 	stw	zero,4(r16)
 40104e8:	80000215 	stw	zero,8(r16)
 40104ec:	80001915 	stw	zero,100(r16)
 40104f0:	8080038d 	sth	r2,14(r16)
 40104f4:	80000415 	stw	zero,16(r16)
 40104f8:	80000515 	stw	zero,20(r16)
 40104fc:	80000615 	stw	zero,24(r16)
 4010500:	b80d883a 	mov	r6,r23
 4010504:	000b883a 	mov	r5,zero
 4010508:	81001704 	addi	r4,r16,92
 401050c:	400bd180 	call	400bd18 <memset>
 4010510:	00800044 	movi	r2,1
 4010514:	84000715 	stw	r16,28(r16)
 4010518:	85800815 	stw	r22,32(r16)
 401051c:	85400915 	stw	r21,36(r16)
 4010520:	85000a15 	stw	r20,40(r16)
 4010524:	84c00b15 	stw	r19,44(r16)
 4010528:	90800e15 	stw	r2,56(r18)
 401052c:	dfc00817 	ldw	ra,32(sp)
 4010530:	ddc00717 	ldw	r23,28(sp)
 4010534:	dd800617 	ldw	r22,24(sp)
 4010538:	dd400517 	ldw	r21,20(sp)
 401053c:	dd000417 	ldw	r20,16(sp)
 4010540:	dcc00317 	ldw	r19,12(sp)
 4010544:	dc800217 	ldw	r18,8(sp)
 4010548:	dc400117 	ldw	r17,4(sp)
 401054c:	dc000017 	ldw	r16,0(sp)
 4010550:	dec00904 	addi	sp,sp,36
 4010554:	f800283a 	ret

04010558 <__fp_lock>:
 4010558:	0005883a 	mov	r2,zero
 401055c:	f800283a 	ret

04010560 <__sfmoreglue>:
 4010560:	defffc04 	addi	sp,sp,-16
 4010564:	dc400115 	stw	r17,4(sp)
 4010568:	2c7fffc4 	addi	r17,r5,-1
 401056c:	8c401a24 	muli	r17,r17,104
 4010570:	dc800215 	stw	r18,8(sp)
 4010574:	2825883a 	mov	r18,r5
 4010578:	89401d04 	addi	r5,r17,116
 401057c:	dc000015 	stw	r16,0(sp)
 4010580:	dfc00315 	stw	ra,12(sp)
 4010584:	400b3480 	call	400b348 <_malloc_r>
 4010588:	1021883a 	mov	r16,r2
 401058c:	10000726 	beq	r2,zero,40105ac <__sfmoreglue+0x4c>
 4010590:	11000304 	addi	r4,r2,12
 4010594:	10000015 	stw	zero,0(r2)
 4010598:	14800115 	stw	r18,4(r2)
 401059c:	11000215 	stw	r4,8(r2)
 40105a0:	89801a04 	addi	r6,r17,104
 40105a4:	000b883a 	mov	r5,zero
 40105a8:	400bd180 	call	400bd18 <memset>
 40105ac:	8005883a 	mov	r2,r16
 40105b0:	dfc00317 	ldw	ra,12(sp)
 40105b4:	dc800217 	ldw	r18,8(sp)
 40105b8:	dc400117 	ldw	r17,4(sp)
 40105bc:	dc000017 	ldw	r16,0(sp)
 40105c0:	dec00404 	addi	sp,sp,16
 40105c4:	f800283a 	ret

040105c8 <__sfp>:
 40105c8:	defffb04 	addi	sp,sp,-20
 40105cc:	dc000015 	stw	r16,0(sp)
 40105d0:	040100f4 	movhi	r16,1027
 40105d4:	8423e404 	addi	r16,r16,-28784
 40105d8:	dcc00315 	stw	r19,12(sp)
 40105dc:	2027883a 	mov	r19,r4
 40105e0:	81000017 	ldw	r4,0(r16)
 40105e4:	dfc00415 	stw	ra,16(sp)
 40105e8:	dc800215 	stw	r18,8(sp)
 40105ec:	20800e17 	ldw	r2,56(r4)
 40105f0:	dc400115 	stw	r17,4(sp)
 40105f4:	1000021e 	bne	r2,zero,4010600 <__sfp+0x38>
 40105f8:	40103bc0 	call	40103bc <__sinit.part.1>
 40105fc:	81000017 	ldw	r4,0(r16)
 4010600:	2480b804 	addi	r18,r4,736
 4010604:	047fffc4 	movi	r17,-1
 4010608:	91000117 	ldw	r4,4(r18)
 401060c:	94000217 	ldw	r16,8(r18)
 4010610:	213fffc4 	addi	r4,r4,-1
 4010614:	20000a16 	blt	r4,zero,4010640 <__sfp+0x78>
 4010618:	8080030f 	ldh	r2,12(r16)
 401061c:	10000c26 	beq	r2,zero,4010650 <__sfp+0x88>
 4010620:	80c01d04 	addi	r3,r16,116
 4010624:	00000206 	br	4010630 <__sfp+0x68>
 4010628:	18bfe60f 	ldh	r2,-104(r3)
 401062c:	10000826 	beq	r2,zero,4010650 <__sfp+0x88>
 4010630:	213fffc4 	addi	r4,r4,-1
 4010634:	1c3ffd04 	addi	r16,r3,-12
 4010638:	18c01a04 	addi	r3,r3,104
 401063c:	247ffa1e 	bne	r4,r17,4010628 <__alt_data_end+0xfc010628>
 4010640:	90800017 	ldw	r2,0(r18)
 4010644:	10001d26 	beq	r2,zero,40106bc <__sfp+0xf4>
 4010648:	1025883a 	mov	r18,r2
 401064c:	003fee06 	br	4010608 <__alt_data_end+0xfc010608>
 4010650:	00bfffc4 	movi	r2,-1
 4010654:	8080038d 	sth	r2,14(r16)
 4010658:	00800044 	movi	r2,1
 401065c:	8080030d 	sth	r2,12(r16)
 4010660:	80001915 	stw	zero,100(r16)
 4010664:	80000015 	stw	zero,0(r16)
 4010668:	80000215 	stw	zero,8(r16)
 401066c:	80000115 	stw	zero,4(r16)
 4010670:	80000415 	stw	zero,16(r16)
 4010674:	80000515 	stw	zero,20(r16)
 4010678:	80000615 	stw	zero,24(r16)
 401067c:	01800204 	movi	r6,8
 4010680:	000b883a 	mov	r5,zero
 4010684:	81001704 	addi	r4,r16,92
 4010688:	400bd180 	call	400bd18 <memset>
 401068c:	8005883a 	mov	r2,r16
 4010690:	80000c15 	stw	zero,48(r16)
 4010694:	80000d15 	stw	zero,52(r16)
 4010698:	80001115 	stw	zero,68(r16)
 401069c:	80001215 	stw	zero,72(r16)
 40106a0:	dfc00417 	ldw	ra,16(sp)
 40106a4:	dcc00317 	ldw	r19,12(sp)
 40106a8:	dc800217 	ldw	r18,8(sp)
 40106ac:	dc400117 	ldw	r17,4(sp)
 40106b0:	dc000017 	ldw	r16,0(sp)
 40106b4:	dec00504 	addi	sp,sp,20
 40106b8:	f800283a 	ret
 40106bc:	01400104 	movi	r5,4
 40106c0:	9809883a 	mov	r4,r19
 40106c4:	40105600 	call	4010560 <__sfmoreglue>
 40106c8:	90800015 	stw	r2,0(r18)
 40106cc:	103fde1e 	bne	r2,zero,4010648 <__alt_data_end+0xfc010648>
 40106d0:	00800304 	movi	r2,12
 40106d4:	98800015 	stw	r2,0(r19)
 40106d8:	0005883a 	mov	r2,zero
 40106dc:	003ff006 	br	40106a0 <__alt_data_end+0xfc0106a0>

040106e0 <_cleanup>:
 40106e0:	008100f4 	movhi	r2,1027
 40106e4:	10a3e404 	addi	r2,r2,-28784
 40106e8:	11000017 	ldw	r4,0(r2)
 40106ec:	01410074 	movhi	r5,1025
 40106f0:	29515a04 	addi	r5,r5,17768
 40106f4:	40110fc1 	jmpi	40110fc <_fwalk_reent>

040106f8 <__sinit>:
 40106f8:	20800e17 	ldw	r2,56(r4)
 40106fc:	10000126 	beq	r2,zero,4010704 <__sinit+0xc>
 4010700:	f800283a 	ret
 4010704:	40103bc1 	jmpi	40103bc <__sinit.part.1>

04010708 <__sfp_lock_acquire>:
 4010708:	f800283a 	ret

0401070c <__sfp_lock_release>:
 401070c:	f800283a 	ret

04010710 <__sinit_lock_acquire>:
 4010710:	f800283a 	ret

04010714 <__sinit_lock_release>:
 4010714:	f800283a 	ret

04010718 <__fp_lock_all>:
 4010718:	008100f4 	movhi	r2,1027
 401071c:	10a3e504 	addi	r2,r2,-28780
 4010720:	11000017 	ldw	r4,0(r2)
 4010724:	01410074 	movhi	r5,1025
 4010728:	29415604 	addi	r5,r5,1368
 401072c:	40110381 	jmpi	4011038 <_fwalk>

04010730 <__fp_unlock_all>:
 4010730:	008100f4 	movhi	r2,1027
 4010734:	10a3e504 	addi	r2,r2,-28780
 4010738:	11000017 	ldw	r4,0(r2)
 401073c:	01410074 	movhi	r5,1025
 4010740:	2940ea04 	addi	r5,r5,936
 4010744:	40110381 	jmpi	4011038 <_fwalk>

04010748 <_malloc_trim_r>:
 4010748:	defffb04 	addi	sp,sp,-20
 401074c:	dcc00315 	stw	r19,12(sp)
 4010750:	04c100b4 	movhi	r19,1026
 4010754:	dc800215 	stw	r18,8(sp)
 4010758:	dc400115 	stw	r17,4(sp)
 401075c:	dc000015 	stw	r16,0(sp)
 4010760:	dfc00415 	stw	ra,16(sp)
 4010764:	2821883a 	mov	r16,r5
 4010768:	9cde2704 	addi	r19,r19,30876
 401076c:	2025883a 	mov	r18,r4
 4010770:	40185780 	call	4018578 <__malloc_lock>
 4010774:	98800217 	ldw	r2,8(r19)
 4010778:	14400117 	ldw	r17,4(r2)
 401077c:	00bfff04 	movi	r2,-4
 4010780:	88a2703a 	and	r17,r17,r2
 4010784:	8c21c83a 	sub	r16,r17,r16
 4010788:	8403fbc4 	addi	r16,r16,4079
 401078c:	8020d33a 	srli	r16,r16,12
 4010790:	0083ffc4 	movi	r2,4095
 4010794:	843fffc4 	addi	r16,r16,-1
 4010798:	8020933a 	slli	r16,r16,12
 401079c:	1400060e 	bge	r2,r16,40107b8 <_malloc_trim_r+0x70>
 40107a0:	000b883a 	mov	r5,zero
 40107a4:	9009883a 	mov	r4,r18
 40107a8:	400bf800 	call	400bf80 <_sbrk_r>
 40107ac:	98c00217 	ldw	r3,8(r19)
 40107b0:	1c47883a 	add	r3,r3,r17
 40107b4:	10c00a26 	beq	r2,r3,40107e0 <_malloc_trim_r+0x98>
 40107b8:	9009883a 	mov	r4,r18
 40107bc:	401859c0 	call	401859c <__malloc_unlock>
 40107c0:	0005883a 	mov	r2,zero
 40107c4:	dfc00417 	ldw	ra,16(sp)
 40107c8:	dcc00317 	ldw	r19,12(sp)
 40107cc:	dc800217 	ldw	r18,8(sp)
 40107d0:	dc400117 	ldw	r17,4(sp)
 40107d4:	dc000017 	ldw	r16,0(sp)
 40107d8:	dec00504 	addi	sp,sp,20
 40107dc:	f800283a 	ret
 40107e0:	040bc83a 	sub	r5,zero,r16
 40107e4:	9009883a 	mov	r4,r18
 40107e8:	400bf800 	call	400bf80 <_sbrk_r>
 40107ec:	00ffffc4 	movi	r3,-1
 40107f0:	10c00d26 	beq	r2,r3,4010828 <_malloc_trim_r+0xe0>
 40107f4:	00c100f4 	movhi	r3,1027
 40107f8:	18d6e804 	addi	r3,r3,23456
 40107fc:	18800017 	ldw	r2,0(r3)
 4010800:	99000217 	ldw	r4,8(r19)
 4010804:	8c23c83a 	sub	r17,r17,r16
 4010808:	8c400054 	ori	r17,r17,1
 401080c:	1421c83a 	sub	r16,r2,r16
 4010810:	24400115 	stw	r17,4(r4)
 4010814:	9009883a 	mov	r4,r18
 4010818:	1c000015 	stw	r16,0(r3)
 401081c:	401859c0 	call	401859c <__malloc_unlock>
 4010820:	00800044 	movi	r2,1
 4010824:	003fe706 	br	40107c4 <__alt_data_end+0xfc0107c4>
 4010828:	000b883a 	mov	r5,zero
 401082c:	9009883a 	mov	r4,r18
 4010830:	400bf800 	call	400bf80 <_sbrk_r>
 4010834:	99000217 	ldw	r4,8(r19)
 4010838:	014003c4 	movi	r5,15
 401083c:	1107c83a 	sub	r3,r2,r4
 4010840:	28ffdd0e 	bge	r5,r3,40107b8 <__alt_data_end+0xfc0107b8>
 4010844:	014100f4 	movhi	r5,1027
 4010848:	2963e604 	addi	r5,r5,-28776
 401084c:	29400017 	ldw	r5,0(r5)
 4010850:	18c00054 	ori	r3,r3,1
 4010854:	20c00115 	stw	r3,4(r4)
 4010858:	00c100f4 	movhi	r3,1027
 401085c:	1145c83a 	sub	r2,r2,r5
 4010860:	18d6e804 	addi	r3,r3,23456
 4010864:	18800015 	stw	r2,0(r3)
 4010868:	003fd306 	br	40107b8 <__alt_data_end+0xfc0107b8>

0401086c <_free_r>:
 401086c:	28004126 	beq	r5,zero,4010974 <_free_r+0x108>
 4010870:	defffd04 	addi	sp,sp,-12
 4010874:	dc400115 	stw	r17,4(sp)
 4010878:	dc000015 	stw	r16,0(sp)
 401087c:	2023883a 	mov	r17,r4
 4010880:	2821883a 	mov	r16,r5
 4010884:	dfc00215 	stw	ra,8(sp)
 4010888:	40185780 	call	4018578 <__malloc_lock>
 401088c:	81ffff17 	ldw	r7,-4(r16)
 4010890:	00bfff84 	movi	r2,-2
 4010894:	010100b4 	movhi	r4,1026
 4010898:	81bffe04 	addi	r6,r16,-8
 401089c:	3884703a 	and	r2,r7,r2
 40108a0:	211e2704 	addi	r4,r4,30876
 40108a4:	308b883a 	add	r5,r6,r2
 40108a8:	2a400117 	ldw	r9,4(r5)
 40108ac:	22000217 	ldw	r8,8(r4)
 40108b0:	00ffff04 	movi	r3,-4
 40108b4:	48c6703a 	and	r3,r9,r3
 40108b8:	2a005726 	beq	r5,r8,4010a18 <_free_r+0x1ac>
 40108bc:	28c00115 	stw	r3,4(r5)
 40108c0:	39c0004c 	andi	r7,r7,1
 40108c4:	3800091e 	bne	r7,zero,40108ec <_free_r+0x80>
 40108c8:	823ffe17 	ldw	r8,-8(r16)
 40108cc:	22400204 	addi	r9,r4,8
 40108d0:	320dc83a 	sub	r6,r6,r8
 40108d4:	31c00217 	ldw	r7,8(r6)
 40108d8:	1205883a 	add	r2,r2,r8
 40108dc:	3a406526 	beq	r7,r9,4010a74 <_free_r+0x208>
 40108e0:	32000317 	ldw	r8,12(r6)
 40108e4:	3a000315 	stw	r8,12(r7)
 40108e8:	41c00215 	stw	r7,8(r8)
 40108ec:	28cf883a 	add	r7,r5,r3
 40108f0:	39c00117 	ldw	r7,4(r7)
 40108f4:	39c0004c 	andi	r7,r7,1
 40108f8:	38003a26 	beq	r7,zero,40109e4 <_free_r+0x178>
 40108fc:	10c00054 	ori	r3,r2,1
 4010900:	30c00115 	stw	r3,4(r6)
 4010904:	3087883a 	add	r3,r6,r2
 4010908:	18800015 	stw	r2,0(r3)
 401090c:	00c07fc4 	movi	r3,511
 4010910:	18801936 	bltu	r3,r2,4010978 <_free_r+0x10c>
 4010914:	1004d0fa 	srli	r2,r2,3
 4010918:	01c00044 	movi	r7,1
 401091c:	21400117 	ldw	r5,4(r4)
 4010920:	10c00044 	addi	r3,r2,1
 4010924:	18c7883a 	add	r3,r3,r3
 4010928:	1005d0ba 	srai	r2,r2,2
 401092c:	18c7883a 	add	r3,r3,r3
 4010930:	18c7883a 	add	r3,r3,r3
 4010934:	1907883a 	add	r3,r3,r4
 4010938:	3884983a 	sll	r2,r7,r2
 401093c:	19c00017 	ldw	r7,0(r3)
 4010940:	1a3ffe04 	addi	r8,r3,-8
 4010944:	1144b03a 	or	r2,r2,r5
 4010948:	32000315 	stw	r8,12(r6)
 401094c:	31c00215 	stw	r7,8(r6)
 4010950:	20800115 	stw	r2,4(r4)
 4010954:	19800015 	stw	r6,0(r3)
 4010958:	39800315 	stw	r6,12(r7)
 401095c:	8809883a 	mov	r4,r17
 4010960:	dfc00217 	ldw	ra,8(sp)
 4010964:	dc400117 	ldw	r17,4(sp)
 4010968:	dc000017 	ldw	r16,0(sp)
 401096c:	dec00304 	addi	sp,sp,12
 4010970:	401859c1 	jmpi	401859c <__malloc_unlock>
 4010974:	f800283a 	ret
 4010978:	100ad27a 	srli	r5,r2,9
 401097c:	00c00104 	movi	r3,4
 4010980:	19404a36 	bltu	r3,r5,4010aac <_free_r+0x240>
 4010984:	100ad1ba 	srli	r5,r2,6
 4010988:	28c00e44 	addi	r3,r5,57
 401098c:	18c7883a 	add	r3,r3,r3
 4010990:	29400e04 	addi	r5,r5,56
 4010994:	18c7883a 	add	r3,r3,r3
 4010998:	18c7883a 	add	r3,r3,r3
 401099c:	1909883a 	add	r4,r3,r4
 40109a0:	20c00017 	ldw	r3,0(r4)
 40109a4:	01c100b4 	movhi	r7,1026
 40109a8:	213ffe04 	addi	r4,r4,-8
 40109ac:	39de2704 	addi	r7,r7,30876
 40109b0:	20c04426 	beq	r4,r3,4010ac4 <_free_r+0x258>
 40109b4:	01ffff04 	movi	r7,-4
 40109b8:	19400117 	ldw	r5,4(r3)
 40109bc:	29ca703a 	and	r5,r5,r7
 40109c0:	1140022e 	bgeu	r2,r5,40109cc <_free_r+0x160>
 40109c4:	18c00217 	ldw	r3,8(r3)
 40109c8:	20fffb1e 	bne	r4,r3,40109b8 <__alt_data_end+0xfc0109b8>
 40109cc:	19000317 	ldw	r4,12(r3)
 40109d0:	31000315 	stw	r4,12(r6)
 40109d4:	30c00215 	stw	r3,8(r6)
 40109d8:	21800215 	stw	r6,8(r4)
 40109dc:	19800315 	stw	r6,12(r3)
 40109e0:	003fde06 	br	401095c <__alt_data_end+0xfc01095c>
 40109e4:	29c00217 	ldw	r7,8(r5)
 40109e8:	10c5883a 	add	r2,r2,r3
 40109ec:	00c100b4 	movhi	r3,1026
 40109f0:	18de2904 	addi	r3,r3,30884
 40109f4:	38c03b26 	beq	r7,r3,4010ae4 <_free_r+0x278>
 40109f8:	2a000317 	ldw	r8,12(r5)
 40109fc:	11400054 	ori	r5,r2,1
 4010a00:	3087883a 	add	r3,r6,r2
 4010a04:	3a000315 	stw	r8,12(r7)
 4010a08:	41c00215 	stw	r7,8(r8)
 4010a0c:	31400115 	stw	r5,4(r6)
 4010a10:	18800015 	stw	r2,0(r3)
 4010a14:	003fbd06 	br	401090c <__alt_data_end+0xfc01090c>
 4010a18:	39c0004c 	andi	r7,r7,1
 4010a1c:	10c5883a 	add	r2,r2,r3
 4010a20:	3800071e 	bne	r7,zero,4010a40 <_free_r+0x1d4>
 4010a24:	81fffe17 	ldw	r7,-8(r16)
 4010a28:	31cdc83a 	sub	r6,r6,r7
 4010a2c:	30c00317 	ldw	r3,12(r6)
 4010a30:	31400217 	ldw	r5,8(r6)
 4010a34:	11c5883a 	add	r2,r2,r7
 4010a38:	28c00315 	stw	r3,12(r5)
 4010a3c:	19400215 	stw	r5,8(r3)
 4010a40:	10c00054 	ori	r3,r2,1
 4010a44:	30c00115 	stw	r3,4(r6)
 4010a48:	00c100f4 	movhi	r3,1027
 4010a4c:	18e3e704 	addi	r3,r3,-28772
 4010a50:	18c00017 	ldw	r3,0(r3)
 4010a54:	21800215 	stw	r6,8(r4)
 4010a58:	10ffc036 	bltu	r2,r3,401095c <__alt_data_end+0xfc01095c>
 4010a5c:	008100f4 	movhi	r2,1027
 4010a60:	1096ad04 	addi	r2,r2,23220
 4010a64:	11400017 	ldw	r5,0(r2)
 4010a68:	8809883a 	mov	r4,r17
 4010a6c:	40107480 	call	4010748 <_malloc_trim_r>
 4010a70:	003fba06 	br	401095c <__alt_data_end+0xfc01095c>
 4010a74:	28c9883a 	add	r4,r5,r3
 4010a78:	21000117 	ldw	r4,4(r4)
 4010a7c:	2100004c 	andi	r4,r4,1
 4010a80:	2000391e 	bne	r4,zero,4010b68 <_free_r+0x2fc>
 4010a84:	29c00217 	ldw	r7,8(r5)
 4010a88:	29000317 	ldw	r4,12(r5)
 4010a8c:	1885883a 	add	r2,r3,r2
 4010a90:	10c00054 	ori	r3,r2,1
 4010a94:	39000315 	stw	r4,12(r7)
 4010a98:	21c00215 	stw	r7,8(r4)
 4010a9c:	30c00115 	stw	r3,4(r6)
 4010aa0:	308d883a 	add	r6,r6,r2
 4010aa4:	30800015 	stw	r2,0(r6)
 4010aa8:	003fac06 	br	401095c <__alt_data_end+0xfc01095c>
 4010aac:	00c00504 	movi	r3,20
 4010ab0:	19401536 	bltu	r3,r5,4010b08 <_free_r+0x29c>
 4010ab4:	28c01704 	addi	r3,r5,92
 4010ab8:	18c7883a 	add	r3,r3,r3
 4010abc:	294016c4 	addi	r5,r5,91
 4010ac0:	003fb406 	br	4010994 <__alt_data_end+0xfc010994>
 4010ac4:	280bd0ba 	srai	r5,r5,2
 4010ac8:	00c00044 	movi	r3,1
 4010acc:	38800117 	ldw	r2,4(r7)
 4010ad0:	194a983a 	sll	r5,r3,r5
 4010ad4:	2007883a 	mov	r3,r4
 4010ad8:	2884b03a 	or	r2,r5,r2
 4010adc:	38800115 	stw	r2,4(r7)
 4010ae0:	003fbb06 	br	40109d0 <__alt_data_end+0xfc0109d0>
 4010ae4:	21800515 	stw	r6,20(r4)
 4010ae8:	21800415 	stw	r6,16(r4)
 4010aec:	10c00054 	ori	r3,r2,1
 4010af0:	31c00315 	stw	r7,12(r6)
 4010af4:	31c00215 	stw	r7,8(r6)
 4010af8:	30c00115 	stw	r3,4(r6)
 4010afc:	308d883a 	add	r6,r6,r2
 4010b00:	30800015 	stw	r2,0(r6)
 4010b04:	003f9506 	br	401095c <__alt_data_end+0xfc01095c>
 4010b08:	00c01504 	movi	r3,84
 4010b0c:	19400536 	bltu	r3,r5,4010b24 <_free_r+0x2b8>
 4010b10:	100ad33a 	srli	r5,r2,12
 4010b14:	28c01bc4 	addi	r3,r5,111
 4010b18:	18c7883a 	add	r3,r3,r3
 4010b1c:	29401b84 	addi	r5,r5,110
 4010b20:	003f9c06 	br	4010994 <__alt_data_end+0xfc010994>
 4010b24:	00c05504 	movi	r3,340
 4010b28:	19400536 	bltu	r3,r5,4010b40 <_free_r+0x2d4>
 4010b2c:	100ad3fa 	srli	r5,r2,15
 4010b30:	28c01e04 	addi	r3,r5,120
 4010b34:	18c7883a 	add	r3,r3,r3
 4010b38:	29401dc4 	addi	r5,r5,119
 4010b3c:	003f9506 	br	4010994 <__alt_data_end+0xfc010994>
 4010b40:	00c15504 	movi	r3,1364
 4010b44:	19400536 	bltu	r3,r5,4010b5c <_free_r+0x2f0>
 4010b48:	100ad4ba 	srli	r5,r2,18
 4010b4c:	28c01f44 	addi	r3,r5,125
 4010b50:	18c7883a 	add	r3,r3,r3
 4010b54:	29401f04 	addi	r5,r5,124
 4010b58:	003f8e06 	br	4010994 <__alt_data_end+0xfc010994>
 4010b5c:	00c03f84 	movi	r3,254
 4010b60:	01401f84 	movi	r5,126
 4010b64:	003f8b06 	br	4010994 <__alt_data_end+0xfc010994>
 4010b68:	10c00054 	ori	r3,r2,1
 4010b6c:	30c00115 	stw	r3,4(r6)
 4010b70:	308d883a 	add	r6,r6,r2
 4010b74:	30800015 	stw	r2,0(r6)
 4010b78:	003f7806 	br	401095c <__alt_data_end+0xfc01095c>

04010b7c <__sfvwrite_r>:
 4010b7c:	30800217 	ldw	r2,8(r6)
 4010b80:	10006726 	beq	r2,zero,4010d20 <__sfvwrite_r+0x1a4>
 4010b84:	28c0030b 	ldhu	r3,12(r5)
 4010b88:	defff404 	addi	sp,sp,-48
 4010b8c:	dd400715 	stw	r21,28(sp)
 4010b90:	dd000615 	stw	r20,24(sp)
 4010b94:	dc000215 	stw	r16,8(sp)
 4010b98:	dfc00b15 	stw	ra,44(sp)
 4010b9c:	df000a15 	stw	fp,40(sp)
 4010ba0:	ddc00915 	stw	r23,36(sp)
 4010ba4:	dd800815 	stw	r22,32(sp)
 4010ba8:	dcc00515 	stw	r19,20(sp)
 4010bac:	dc800415 	stw	r18,16(sp)
 4010bb0:	dc400315 	stw	r17,12(sp)
 4010bb4:	1880020c 	andi	r2,r3,8
 4010bb8:	2821883a 	mov	r16,r5
 4010bbc:	202b883a 	mov	r21,r4
 4010bc0:	3029883a 	mov	r20,r6
 4010bc4:	10002726 	beq	r2,zero,4010c64 <__sfvwrite_r+0xe8>
 4010bc8:	28800417 	ldw	r2,16(r5)
 4010bcc:	10002526 	beq	r2,zero,4010c64 <__sfvwrite_r+0xe8>
 4010bd0:	1880008c 	andi	r2,r3,2
 4010bd4:	a4400017 	ldw	r17,0(r20)
 4010bd8:	10002a26 	beq	r2,zero,4010c84 <__sfvwrite_r+0x108>
 4010bdc:	05a00034 	movhi	r22,32768
 4010be0:	0027883a 	mov	r19,zero
 4010be4:	0025883a 	mov	r18,zero
 4010be8:	b5bf0004 	addi	r22,r22,-1024
 4010bec:	980d883a 	mov	r6,r19
 4010bf0:	a809883a 	mov	r4,r21
 4010bf4:	90004626 	beq	r18,zero,4010d10 <__sfvwrite_r+0x194>
 4010bf8:	900f883a 	mov	r7,r18
 4010bfc:	b480022e 	bgeu	r22,r18,4010c08 <__sfvwrite_r+0x8c>
 4010c00:	01e00034 	movhi	r7,32768
 4010c04:	39ff0004 	addi	r7,r7,-1024
 4010c08:	80800917 	ldw	r2,36(r16)
 4010c0c:	81400717 	ldw	r5,28(r16)
 4010c10:	103ee83a 	callr	r2
 4010c14:	0080570e 	bge	zero,r2,4010d74 <__sfvwrite_r+0x1f8>
 4010c18:	a0c00217 	ldw	r3,8(r20)
 4010c1c:	98a7883a 	add	r19,r19,r2
 4010c20:	90a5c83a 	sub	r18,r18,r2
 4010c24:	1885c83a 	sub	r2,r3,r2
 4010c28:	a0800215 	stw	r2,8(r20)
 4010c2c:	103fef1e 	bne	r2,zero,4010bec <__alt_data_end+0xfc010bec>
 4010c30:	0005883a 	mov	r2,zero
 4010c34:	dfc00b17 	ldw	ra,44(sp)
 4010c38:	df000a17 	ldw	fp,40(sp)
 4010c3c:	ddc00917 	ldw	r23,36(sp)
 4010c40:	dd800817 	ldw	r22,32(sp)
 4010c44:	dd400717 	ldw	r21,28(sp)
 4010c48:	dd000617 	ldw	r20,24(sp)
 4010c4c:	dcc00517 	ldw	r19,20(sp)
 4010c50:	dc800417 	ldw	r18,16(sp)
 4010c54:	dc400317 	ldw	r17,12(sp)
 4010c58:	dc000217 	ldw	r16,8(sp)
 4010c5c:	dec00c04 	addi	sp,sp,48
 4010c60:	f800283a 	ret
 4010c64:	800b883a 	mov	r5,r16
 4010c68:	a809883a 	mov	r4,r21
 4010c6c:	400e7240 	call	400e724 <__swsetup_r>
 4010c70:	1000eb1e 	bne	r2,zero,4011020 <__sfvwrite_r+0x4a4>
 4010c74:	80c0030b 	ldhu	r3,12(r16)
 4010c78:	a4400017 	ldw	r17,0(r20)
 4010c7c:	1880008c 	andi	r2,r3,2
 4010c80:	103fd61e 	bne	r2,zero,4010bdc <__alt_data_end+0xfc010bdc>
 4010c84:	1880004c 	andi	r2,r3,1
 4010c88:	10003f1e 	bne	r2,zero,4010d88 <__sfvwrite_r+0x20c>
 4010c8c:	0039883a 	mov	fp,zero
 4010c90:	0025883a 	mov	r18,zero
 4010c94:	90001a26 	beq	r18,zero,4010d00 <__sfvwrite_r+0x184>
 4010c98:	1880800c 	andi	r2,r3,512
 4010c9c:	84c00217 	ldw	r19,8(r16)
 4010ca0:	10002126 	beq	r2,zero,4010d28 <__sfvwrite_r+0x1ac>
 4010ca4:	982f883a 	mov	r23,r19
 4010ca8:	94c09336 	bltu	r18,r19,4010ef8 <__sfvwrite_r+0x37c>
 4010cac:	1881200c 	andi	r2,r3,1152
 4010cb0:	10009e1e 	bne	r2,zero,4010f2c <__sfvwrite_r+0x3b0>
 4010cb4:	81000017 	ldw	r4,0(r16)
 4010cb8:	b80d883a 	mov	r6,r23
 4010cbc:	e00b883a 	mov	r5,fp
 4010cc0:	401153c0 	call	401153c <memmove>
 4010cc4:	80c00217 	ldw	r3,8(r16)
 4010cc8:	81000017 	ldw	r4,0(r16)
 4010ccc:	9005883a 	mov	r2,r18
 4010cd0:	1ce7c83a 	sub	r19,r3,r19
 4010cd4:	25cf883a 	add	r7,r4,r23
 4010cd8:	84c00215 	stw	r19,8(r16)
 4010cdc:	81c00015 	stw	r7,0(r16)
 4010ce0:	a0c00217 	ldw	r3,8(r20)
 4010ce4:	e0b9883a 	add	fp,fp,r2
 4010ce8:	90a5c83a 	sub	r18,r18,r2
 4010cec:	18a7c83a 	sub	r19,r3,r2
 4010cf0:	a4c00215 	stw	r19,8(r20)
 4010cf4:	983fce26 	beq	r19,zero,4010c30 <__alt_data_end+0xfc010c30>
 4010cf8:	80c0030b 	ldhu	r3,12(r16)
 4010cfc:	903fe61e 	bne	r18,zero,4010c98 <__alt_data_end+0xfc010c98>
 4010d00:	8f000017 	ldw	fp,0(r17)
 4010d04:	8c800117 	ldw	r18,4(r17)
 4010d08:	8c400204 	addi	r17,r17,8
 4010d0c:	003fe106 	br	4010c94 <__alt_data_end+0xfc010c94>
 4010d10:	8cc00017 	ldw	r19,0(r17)
 4010d14:	8c800117 	ldw	r18,4(r17)
 4010d18:	8c400204 	addi	r17,r17,8
 4010d1c:	003fb306 	br	4010bec <__alt_data_end+0xfc010bec>
 4010d20:	0005883a 	mov	r2,zero
 4010d24:	f800283a 	ret
 4010d28:	81000017 	ldw	r4,0(r16)
 4010d2c:	80800417 	ldw	r2,16(r16)
 4010d30:	11005736 	bltu	r2,r4,4010e90 <__sfvwrite_r+0x314>
 4010d34:	85c00517 	ldw	r23,20(r16)
 4010d38:	95c05536 	bltu	r18,r23,4010e90 <__sfvwrite_r+0x314>
 4010d3c:	00a00034 	movhi	r2,32768
 4010d40:	10bfffc4 	addi	r2,r2,-1
 4010d44:	9009883a 	mov	r4,r18
 4010d48:	1480012e 	bgeu	r2,r18,4010d50 <__sfvwrite_r+0x1d4>
 4010d4c:	1009883a 	mov	r4,r2
 4010d50:	b80b883a 	mov	r5,r23
 4010d54:	400abe80 	call	400abe8 <__divsi3>
 4010d58:	15cf383a 	mul	r7,r2,r23
 4010d5c:	81400717 	ldw	r5,28(r16)
 4010d60:	80800917 	ldw	r2,36(r16)
 4010d64:	e00d883a 	mov	r6,fp
 4010d68:	a809883a 	mov	r4,r21
 4010d6c:	103ee83a 	callr	r2
 4010d70:	00bfdb16 	blt	zero,r2,4010ce0 <__alt_data_end+0xfc010ce0>
 4010d74:	8080030b 	ldhu	r2,12(r16)
 4010d78:	10801014 	ori	r2,r2,64
 4010d7c:	8080030d 	sth	r2,12(r16)
 4010d80:	00bfffc4 	movi	r2,-1
 4010d84:	003fab06 	br	4010c34 <__alt_data_end+0xfc010c34>
 4010d88:	0027883a 	mov	r19,zero
 4010d8c:	0011883a 	mov	r8,zero
 4010d90:	0039883a 	mov	fp,zero
 4010d94:	0025883a 	mov	r18,zero
 4010d98:	90001f26 	beq	r18,zero,4010e18 <__sfvwrite_r+0x29c>
 4010d9c:	40005a26 	beq	r8,zero,4010f08 <__sfvwrite_r+0x38c>
 4010da0:	982d883a 	mov	r22,r19
 4010da4:	94c0012e 	bgeu	r18,r19,4010dac <__sfvwrite_r+0x230>
 4010da8:	902d883a 	mov	r22,r18
 4010dac:	81000017 	ldw	r4,0(r16)
 4010db0:	80800417 	ldw	r2,16(r16)
 4010db4:	b02f883a 	mov	r23,r22
 4010db8:	81c00517 	ldw	r7,20(r16)
 4010dbc:	1100032e 	bgeu	r2,r4,4010dcc <__sfvwrite_r+0x250>
 4010dc0:	80c00217 	ldw	r3,8(r16)
 4010dc4:	38c7883a 	add	r3,r7,r3
 4010dc8:	1d801816 	blt	r3,r22,4010e2c <__sfvwrite_r+0x2b0>
 4010dcc:	b1c03e16 	blt	r22,r7,4010ec8 <__sfvwrite_r+0x34c>
 4010dd0:	80800917 	ldw	r2,36(r16)
 4010dd4:	81400717 	ldw	r5,28(r16)
 4010dd8:	e00d883a 	mov	r6,fp
 4010ddc:	da000115 	stw	r8,4(sp)
 4010de0:	a809883a 	mov	r4,r21
 4010de4:	103ee83a 	callr	r2
 4010de8:	102f883a 	mov	r23,r2
 4010dec:	da000117 	ldw	r8,4(sp)
 4010df0:	00bfe00e 	bge	zero,r2,4010d74 <__alt_data_end+0xfc010d74>
 4010df4:	9de7c83a 	sub	r19,r19,r23
 4010df8:	98001f26 	beq	r19,zero,4010e78 <__sfvwrite_r+0x2fc>
 4010dfc:	a0800217 	ldw	r2,8(r20)
 4010e00:	e5f9883a 	add	fp,fp,r23
 4010e04:	95e5c83a 	sub	r18,r18,r23
 4010e08:	15efc83a 	sub	r23,r2,r23
 4010e0c:	a5c00215 	stw	r23,8(r20)
 4010e10:	b83f8726 	beq	r23,zero,4010c30 <__alt_data_end+0xfc010c30>
 4010e14:	903fe11e 	bne	r18,zero,4010d9c <__alt_data_end+0xfc010d9c>
 4010e18:	8f000017 	ldw	fp,0(r17)
 4010e1c:	8c800117 	ldw	r18,4(r17)
 4010e20:	0011883a 	mov	r8,zero
 4010e24:	8c400204 	addi	r17,r17,8
 4010e28:	003fdb06 	br	4010d98 <__alt_data_end+0xfc010d98>
 4010e2c:	180d883a 	mov	r6,r3
 4010e30:	e00b883a 	mov	r5,fp
 4010e34:	da000115 	stw	r8,4(sp)
 4010e38:	d8c00015 	stw	r3,0(sp)
 4010e3c:	401153c0 	call	401153c <memmove>
 4010e40:	d8c00017 	ldw	r3,0(sp)
 4010e44:	80800017 	ldw	r2,0(r16)
 4010e48:	800b883a 	mov	r5,r16
 4010e4c:	a809883a 	mov	r4,r21
 4010e50:	10c5883a 	add	r2,r2,r3
 4010e54:	80800015 	stw	r2,0(r16)
 4010e58:	d8c00015 	stw	r3,0(sp)
 4010e5c:	401031c0 	call	401031c <_fflush_r>
 4010e60:	d8c00017 	ldw	r3,0(sp)
 4010e64:	da000117 	ldw	r8,4(sp)
 4010e68:	103fc21e 	bne	r2,zero,4010d74 <__alt_data_end+0xfc010d74>
 4010e6c:	182f883a 	mov	r23,r3
 4010e70:	9de7c83a 	sub	r19,r19,r23
 4010e74:	983fe11e 	bne	r19,zero,4010dfc <__alt_data_end+0xfc010dfc>
 4010e78:	800b883a 	mov	r5,r16
 4010e7c:	a809883a 	mov	r4,r21
 4010e80:	401031c0 	call	401031c <_fflush_r>
 4010e84:	103fbb1e 	bne	r2,zero,4010d74 <__alt_data_end+0xfc010d74>
 4010e88:	0011883a 	mov	r8,zero
 4010e8c:	003fdb06 	br	4010dfc <__alt_data_end+0xfc010dfc>
 4010e90:	94c0012e 	bgeu	r18,r19,4010e98 <__sfvwrite_r+0x31c>
 4010e94:	9027883a 	mov	r19,r18
 4010e98:	980d883a 	mov	r6,r19
 4010e9c:	e00b883a 	mov	r5,fp
 4010ea0:	401153c0 	call	401153c <memmove>
 4010ea4:	80800217 	ldw	r2,8(r16)
 4010ea8:	80c00017 	ldw	r3,0(r16)
 4010eac:	14c5c83a 	sub	r2,r2,r19
 4010eb0:	1cc7883a 	add	r3,r3,r19
 4010eb4:	80800215 	stw	r2,8(r16)
 4010eb8:	80c00015 	stw	r3,0(r16)
 4010ebc:	10004326 	beq	r2,zero,4010fcc <__sfvwrite_r+0x450>
 4010ec0:	9805883a 	mov	r2,r19
 4010ec4:	003f8606 	br	4010ce0 <__alt_data_end+0xfc010ce0>
 4010ec8:	b00d883a 	mov	r6,r22
 4010ecc:	e00b883a 	mov	r5,fp
 4010ed0:	da000115 	stw	r8,4(sp)
 4010ed4:	401153c0 	call	401153c <memmove>
 4010ed8:	80800217 	ldw	r2,8(r16)
 4010edc:	80c00017 	ldw	r3,0(r16)
 4010ee0:	da000117 	ldw	r8,4(sp)
 4010ee4:	1585c83a 	sub	r2,r2,r22
 4010ee8:	1dad883a 	add	r22,r3,r22
 4010eec:	80800215 	stw	r2,8(r16)
 4010ef0:	85800015 	stw	r22,0(r16)
 4010ef4:	003fbf06 	br	4010df4 <__alt_data_end+0xfc010df4>
 4010ef8:	81000017 	ldw	r4,0(r16)
 4010efc:	9027883a 	mov	r19,r18
 4010f00:	902f883a 	mov	r23,r18
 4010f04:	003f6c06 	br	4010cb8 <__alt_data_end+0xfc010cb8>
 4010f08:	900d883a 	mov	r6,r18
 4010f0c:	01400284 	movi	r5,10
 4010f10:	e009883a 	mov	r4,fp
 4010f14:	40114580 	call	4011458 <memchr>
 4010f18:	10003e26 	beq	r2,zero,4011014 <__sfvwrite_r+0x498>
 4010f1c:	10800044 	addi	r2,r2,1
 4010f20:	1727c83a 	sub	r19,r2,fp
 4010f24:	02000044 	movi	r8,1
 4010f28:	003f9d06 	br	4010da0 <__alt_data_end+0xfc010da0>
 4010f2c:	80800517 	ldw	r2,20(r16)
 4010f30:	81400417 	ldw	r5,16(r16)
 4010f34:	81c00017 	ldw	r7,0(r16)
 4010f38:	10a7883a 	add	r19,r2,r2
 4010f3c:	9885883a 	add	r2,r19,r2
 4010f40:	1026d7fa 	srli	r19,r2,31
 4010f44:	396dc83a 	sub	r22,r7,r5
 4010f48:	b1000044 	addi	r4,r22,1
 4010f4c:	9885883a 	add	r2,r19,r2
 4010f50:	1027d07a 	srai	r19,r2,1
 4010f54:	2485883a 	add	r2,r4,r18
 4010f58:	980d883a 	mov	r6,r19
 4010f5c:	9880022e 	bgeu	r19,r2,4010f68 <__sfvwrite_r+0x3ec>
 4010f60:	1027883a 	mov	r19,r2
 4010f64:	100d883a 	mov	r6,r2
 4010f68:	18c1000c 	andi	r3,r3,1024
 4010f6c:	18001c26 	beq	r3,zero,4010fe0 <__sfvwrite_r+0x464>
 4010f70:	300b883a 	mov	r5,r6
 4010f74:	a809883a 	mov	r4,r21
 4010f78:	400b3480 	call	400b348 <_malloc_r>
 4010f7c:	102f883a 	mov	r23,r2
 4010f80:	10002926 	beq	r2,zero,4011028 <__sfvwrite_r+0x4ac>
 4010f84:	81400417 	ldw	r5,16(r16)
 4010f88:	b00d883a 	mov	r6,r22
 4010f8c:	1009883a 	mov	r4,r2
 4010f90:	400bbd00 	call	400bbd0 <memcpy>
 4010f94:	8080030b 	ldhu	r2,12(r16)
 4010f98:	00fedfc4 	movi	r3,-1153
 4010f9c:	10c4703a 	and	r2,r2,r3
 4010fa0:	10802014 	ori	r2,r2,128
 4010fa4:	8080030d 	sth	r2,12(r16)
 4010fa8:	bd89883a 	add	r4,r23,r22
 4010fac:	9d8fc83a 	sub	r7,r19,r22
 4010fb0:	85c00415 	stw	r23,16(r16)
 4010fb4:	84c00515 	stw	r19,20(r16)
 4010fb8:	81000015 	stw	r4,0(r16)
 4010fbc:	9027883a 	mov	r19,r18
 4010fc0:	81c00215 	stw	r7,8(r16)
 4010fc4:	902f883a 	mov	r23,r18
 4010fc8:	003f3b06 	br	4010cb8 <__alt_data_end+0xfc010cb8>
 4010fcc:	800b883a 	mov	r5,r16
 4010fd0:	a809883a 	mov	r4,r21
 4010fd4:	401031c0 	call	401031c <_fflush_r>
 4010fd8:	103fb926 	beq	r2,zero,4010ec0 <__alt_data_end+0xfc010ec0>
 4010fdc:	003f6506 	br	4010d74 <__alt_data_end+0xfc010d74>
 4010fe0:	a809883a 	mov	r4,r21
 4010fe4:	40126940 	call	4012694 <_realloc_r>
 4010fe8:	102f883a 	mov	r23,r2
 4010fec:	103fee1e 	bne	r2,zero,4010fa8 <__alt_data_end+0xfc010fa8>
 4010ff0:	81400417 	ldw	r5,16(r16)
 4010ff4:	a809883a 	mov	r4,r21
 4010ff8:	401086c0 	call	401086c <_free_r>
 4010ffc:	8080030b 	ldhu	r2,12(r16)
 4011000:	00ffdfc4 	movi	r3,-129
 4011004:	1884703a 	and	r2,r3,r2
 4011008:	00c00304 	movi	r3,12
 401100c:	a8c00015 	stw	r3,0(r21)
 4011010:	003f5906 	br	4010d78 <__alt_data_end+0xfc010d78>
 4011014:	94c00044 	addi	r19,r18,1
 4011018:	02000044 	movi	r8,1
 401101c:	003f6006 	br	4010da0 <__alt_data_end+0xfc010da0>
 4011020:	00bfffc4 	movi	r2,-1
 4011024:	003f0306 	br	4010c34 <__alt_data_end+0xfc010c34>
 4011028:	00800304 	movi	r2,12
 401102c:	a8800015 	stw	r2,0(r21)
 4011030:	8080030b 	ldhu	r2,12(r16)
 4011034:	003f5006 	br	4010d78 <__alt_data_end+0xfc010d78>

04011038 <_fwalk>:
 4011038:	defff704 	addi	sp,sp,-36
 401103c:	dd000415 	stw	r20,16(sp)
 4011040:	dfc00815 	stw	ra,32(sp)
 4011044:	ddc00715 	stw	r23,28(sp)
 4011048:	dd800615 	stw	r22,24(sp)
 401104c:	dd400515 	stw	r21,20(sp)
 4011050:	dcc00315 	stw	r19,12(sp)
 4011054:	dc800215 	stw	r18,8(sp)
 4011058:	dc400115 	stw	r17,4(sp)
 401105c:	dc000015 	stw	r16,0(sp)
 4011060:	2500b804 	addi	r20,r4,736
 4011064:	a0002326 	beq	r20,zero,40110f4 <_fwalk+0xbc>
 4011068:	282b883a 	mov	r21,r5
 401106c:	002f883a 	mov	r23,zero
 4011070:	05800044 	movi	r22,1
 4011074:	04ffffc4 	movi	r19,-1
 4011078:	a4400117 	ldw	r17,4(r20)
 401107c:	a4800217 	ldw	r18,8(r20)
 4011080:	8c7fffc4 	addi	r17,r17,-1
 4011084:	88000d16 	blt	r17,zero,40110bc <_fwalk+0x84>
 4011088:	94000304 	addi	r16,r18,12
 401108c:	94800384 	addi	r18,r18,14
 4011090:	8080000b 	ldhu	r2,0(r16)
 4011094:	8c7fffc4 	addi	r17,r17,-1
 4011098:	813ffd04 	addi	r4,r16,-12
 401109c:	b080042e 	bgeu	r22,r2,40110b0 <_fwalk+0x78>
 40110a0:	9080000f 	ldh	r2,0(r18)
 40110a4:	14c00226 	beq	r2,r19,40110b0 <_fwalk+0x78>
 40110a8:	a83ee83a 	callr	r21
 40110ac:	b8aeb03a 	or	r23,r23,r2
 40110b0:	84001a04 	addi	r16,r16,104
 40110b4:	94801a04 	addi	r18,r18,104
 40110b8:	8cfff51e 	bne	r17,r19,4011090 <__alt_data_end+0xfc011090>
 40110bc:	a5000017 	ldw	r20,0(r20)
 40110c0:	a03fed1e 	bne	r20,zero,4011078 <__alt_data_end+0xfc011078>
 40110c4:	b805883a 	mov	r2,r23
 40110c8:	dfc00817 	ldw	ra,32(sp)
 40110cc:	ddc00717 	ldw	r23,28(sp)
 40110d0:	dd800617 	ldw	r22,24(sp)
 40110d4:	dd400517 	ldw	r21,20(sp)
 40110d8:	dd000417 	ldw	r20,16(sp)
 40110dc:	dcc00317 	ldw	r19,12(sp)
 40110e0:	dc800217 	ldw	r18,8(sp)
 40110e4:	dc400117 	ldw	r17,4(sp)
 40110e8:	dc000017 	ldw	r16,0(sp)
 40110ec:	dec00904 	addi	sp,sp,36
 40110f0:	f800283a 	ret
 40110f4:	002f883a 	mov	r23,zero
 40110f8:	003ff206 	br	40110c4 <__alt_data_end+0xfc0110c4>

040110fc <_fwalk_reent>:
 40110fc:	defff704 	addi	sp,sp,-36
 4011100:	dd000415 	stw	r20,16(sp)
 4011104:	dfc00815 	stw	ra,32(sp)
 4011108:	ddc00715 	stw	r23,28(sp)
 401110c:	dd800615 	stw	r22,24(sp)
 4011110:	dd400515 	stw	r21,20(sp)
 4011114:	dcc00315 	stw	r19,12(sp)
 4011118:	dc800215 	stw	r18,8(sp)
 401111c:	dc400115 	stw	r17,4(sp)
 4011120:	dc000015 	stw	r16,0(sp)
 4011124:	2500b804 	addi	r20,r4,736
 4011128:	a0002326 	beq	r20,zero,40111b8 <_fwalk_reent+0xbc>
 401112c:	282b883a 	mov	r21,r5
 4011130:	2027883a 	mov	r19,r4
 4011134:	002f883a 	mov	r23,zero
 4011138:	05800044 	movi	r22,1
 401113c:	04bfffc4 	movi	r18,-1
 4011140:	a4400117 	ldw	r17,4(r20)
 4011144:	a4000217 	ldw	r16,8(r20)
 4011148:	8c7fffc4 	addi	r17,r17,-1
 401114c:	88000c16 	blt	r17,zero,4011180 <_fwalk_reent+0x84>
 4011150:	84000304 	addi	r16,r16,12
 4011154:	8080000b 	ldhu	r2,0(r16)
 4011158:	8c7fffc4 	addi	r17,r17,-1
 401115c:	817ffd04 	addi	r5,r16,-12
 4011160:	b080052e 	bgeu	r22,r2,4011178 <_fwalk_reent+0x7c>
 4011164:	8080008f 	ldh	r2,2(r16)
 4011168:	9809883a 	mov	r4,r19
 401116c:	14800226 	beq	r2,r18,4011178 <_fwalk_reent+0x7c>
 4011170:	a83ee83a 	callr	r21
 4011174:	b8aeb03a 	or	r23,r23,r2
 4011178:	84001a04 	addi	r16,r16,104
 401117c:	8cbff51e 	bne	r17,r18,4011154 <__alt_data_end+0xfc011154>
 4011180:	a5000017 	ldw	r20,0(r20)
 4011184:	a03fee1e 	bne	r20,zero,4011140 <__alt_data_end+0xfc011140>
 4011188:	b805883a 	mov	r2,r23
 401118c:	dfc00817 	ldw	ra,32(sp)
 4011190:	ddc00717 	ldw	r23,28(sp)
 4011194:	dd800617 	ldw	r22,24(sp)
 4011198:	dd400517 	ldw	r21,20(sp)
 401119c:	dd000417 	ldw	r20,16(sp)
 40111a0:	dcc00317 	ldw	r19,12(sp)
 40111a4:	dc800217 	ldw	r18,8(sp)
 40111a8:	dc400117 	ldw	r17,4(sp)
 40111ac:	dc000017 	ldw	r16,0(sp)
 40111b0:	dec00904 	addi	sp,sp,36
 40111b4:	f800283a 	ret
 40111b8:	002f883a 	mov	r23,zero
 40111bc:	003ff206 	br	4011188 <__alt_data_end+0xfc011188>

040111c0 <_setlocale_r>:
 40111c0:	30001b26 	beq	r6,zero,4011230 <_setlocale_r+0x70>
 40111c4:	014100b4 	movhi	r5,1026
 40111c8:	defffe04 	addi	sp,sp,-8
 40111cc:	2970b104 	addi	r5,r5,-15676
 40111d0:	3009883a 	mov	r4,r6
 40111d4:	dc000015 	stw	r16,0(sp)
 40111d8:	dfc00115 	stw	ra,4(sp)
 40111dc:	3021883a 	mov	r16,r6
 40111e0:	400c2d80 	call	400c2d8 <strcmp>
 40111e4:	1000061e 	bne	r2,zero,4011200 <_setlocale_r+0x40>
 40111e8:	008100b4 	movhi	r2,1026
 40111ec:	10b09204 	addi	r2,r2,-15800
 40111f0:	dfc00117 	ldw	ra,4(sp)
 40111f4:	dc000017 	ldw	r16,0(sp)
 40111f8:	dec00204 	addi	sp,sp,8
 40111fc:	f800283a 	ret
 4011200:	014100b4 	movhi	r5,1026
 4011204:	29709204 	addi	r5,r5,-15800
 4011208:	8009883a 	mov	r4,r16
 401120c:	400c2d80 	call	400c2d8 <strcmp>
 4011210:	103ff526 	beq	r2,zero,40111e8 <__alt_data_end+0xfc0111e8>
 4011214:	014100b4 	movhi	r5,1026
 4011218:	29709c04 	addi	r5,r5,-15760
 401121c:	8009883a 	mov	r4,r16
 4011220:	400c2d80 	call	400c2d8 <strcmp>
 4011224:	103ff026 	beq	r2,zero,40111e8 <__alt_data_end+0xfc0111e8>
 4011228:	0005883a 	mov	r2,zero
 401122c:	003ff006 	br	40111f0 <__alt_data_end+0xfc0111f0>
 4011230:	008100b4 	movhi	r2,1026
 4011234:	10b09204 	addi	r2,r2,-15800
 4011238:	f800283a 	ret

0401123c <__locale_charset>:
 401123c:	008100b4 	movhi	r2,1026
 4011240:	109f3104 	addi	r2,r2,31940
 4011244:	f800283a 	ret

04011248 <__locale_mb_cur_max>:
 4011248:	008100f4 	movhi	r2,1027
 401124c:	10a3e804 	addi	r2,r2,-28768
 4011250:	10800017 	ldw	r2,0(r2)
 4011254:	f800283a 	ret

04011258 <__locale_msgcharset>:
 4011258:	008100b4 	movhi	r2,1026
 401125c:	109f2904 	addi	r2,r2,31908
 4011260:	f800283a 	ret

04011264 <__locale_cjk_lang>:
 4011264:	0005883a 	mov	r2,zero
 4011268:	f800283a 	ret

0401126c <_localeconv_r>:
 401126c:	008100b4 	movhi	r2,1026
 4011270:	109f3904 	addi	r2,r2,31972
 4011274:	f800283a 	ret

04011278 <setlocale>:
 4011278:	008100f4 	movhi	r2,1027
 401127c:	10a3e504 	addi	r2,r2,-28780
 4011280:	280d883a 	mov	r6,r5
 4011284:	200b883a 	mov	r5,r4
 4011288:	11000017 	ldw	r4,0(r2)
 401128c:	40111c01 	jmpi	40111c0 <_setlocale_r>

04011290 <localeconv>:
 4011290:	008100b4 	movhi	r2,1026
 4011294:	109f3904 	addi	r2,r2,31972
 4011298:	f800283a 	ret

0401129c <__smakebuf_r>:
 401129c:	2880030b 	ldhu	r2,12(r5)
 40112a0:	10c0008c 	andi	r3,r2,2
 40112a4:	1800411e 	bne	r3,zero,40113ac <__smakebuf_r+0x110>
 40112a8:	deffec04 	addi	sp,sp,-80
 40112ac:	dc000f15 	stw	r16,60(sp)
 40112b0:	2821883a 	mov	r16,r5
 40112b4:	2940038f 	ldh	r5,14(r5)
 40112b8:	dc401015 	stw	r17,64(sp)
 40112bc:	dfc01315 	stw	ra,76(sp)
 40112c0:	dcc01215 	stw	r19,72(sp)
 40112c4:	dc801115 	stw	r18,68(sp)
 40112c8:	2023883a 	mov	r17,r4
 40112cc:	28001c16 	blt	r5,zero,4011340 <__smakebuf_r+0xa4>
 40112d0:	d80d883a 	mov	r6,sp
 40112d4:	40148740 	call	4014874 <_fstat_r>
 40112d8:	10001816 	blt	r2,zero,401133c <__smakebuf_r+0xa0>
 40112dc:	d8800117 	ldw	r2,4(sp)
 40112e0:	00e00014 	movui	r3,32768
 40112e4:	10bc000c 	andi	r2,r2,61440
 40112e8:	14c80020 	cmpeqi	r19,r2,8192
 40112ec:	10c03726 	beq	r2,r3,40113cc <__smakebuf_r+0x130>
 40112f0:	80c0030b 	ldhu	r3,12(r16)
 40112f4:	18c20014 	ori	r3,r3,2048
 40112f8:	80c0030d 	sth	r3,12(r16)
 40112fc:	00c80004 	movi	r3,8192
 4011300:	10c0521e 	bne	r2,r3,401144c <__smakebuf_r+0x1b0>
 4011304:	8140038f 	ldh	r5,14(r16)
 4011308:	8809883a 	mov	r4,r17
 401130c:	40148d00 	call	40148d0 <_isatty_r>
 4011310:	10004c26 	beq	r2,zero,4011444 <__smakebuf_r+0x1a8>
 4011314:	8080030b 	ldhu	r2,12(r16)
 4011318:	80c010c4 	addi	r3,r16,67
 401131c:	80c00015 	stw	r3,0(r16)
 4011320:	10800054 	ori	r2,r2,1
 4011324:	8080030d 	sth	r2,12(r16)
 4011328:	00800044 	movi	r2,1
 401132c:	80c00415 	stw	r3,16(r16)
 4011330:	80800515 	stw	r2,20(r16)
 4011334:	04810004 	movi	r18,1024
 4011338:	00000706 	br	4011358 <__smakebuf_r+0xbc>
 401133c:	8080030b 	ldhu	r2,12(r16)
 4011340:	10c0200c 	andi	r3,r2,128
 4011344:	18001f1e 	bne	r3,zero,40113c4 <__smakebuf_r+0x128>
 4011348:	04810004 	movi	r18,1024
 401134c:	10820014 	ori	r2,r2,2048
 4011350:	8080030d 	sth	r2,12(r16)
 4011354:	0027883a 	mov	r19,zero
 4011358:	900b883a 	mov	r5,r18
 401135c:	8809883a 	mov	r4,r17
 4011360:	400b3480 	call	400b348 <_malloc_r>
 4011364:	10002c26 	beq	r2,zero,4011418 <__smakebuf_r+0x17c>
 4011368:	80c0030b 	ldhu	r3,12(r16)
 401136c:	01010074 	movhi	r4,1025
 4011370:	2100ec04 	addi	r4,r4,944
 4011374:	89000f15 	stw	r4,60(r17)
 4011378:	18c02014 	ori	r3,r3,128
 401137c:	80c0030d 	sth	r3,12(r16)
 4011380:	80800015 	stw	r2,0(r16)
 4011384:	80800415 	stw	r2,16(r16)
 4011388:	84800515 	stw	r18,20(r16)
 401138c:	98001a1e 	bne	r19,zero,40113f8 <__smakebuf_r+0x15c>
 4011390:	dfc01317 	ldw	ra,76(sp)
 4011394:	dcc01217 	ldw	r19,72(sp)
 4011398:	dc801117 	ldw	r18,68(sp)
 401139c:	dc401017 	ldw	r17,64(sp)
 40113a0:	dc000f17 	ldw	r16,60(sp)
 40113a4:	dec01404 	addi	sp,sp,80
 40113a8:	f800283a 	ret
 40113ac:	288010c4 	addi	r2,r5,67
 40113b0:	28800015 	stw	r2,0(r5)
 40113b4:	28800415 	stw	r2,16(r5)
 40113b8:	00800044 	movi	r2,1
 40113bc:	28800515 	stw	r2,20(r5)
 40113c0:	f800283a 	ret
 40113c4:	04801004 	movi	r18,64
 40113c8:	003fe006 	br	401134c <__alt_data_end+0xfc01134c>
 40113cc:	81000a17 	ldw	r4,40(r16)
 40113d0:	00c10074 	movhi	r3,1025
 40113d4:	18cb5104 	addi	r3,r3,11588
 40113d8:	20ffc51e 	bne	r4,r3,40112f0 <__alt_data_end+0xfc0112f0>
 40113dc:	8080030b 	ldhu	r2,12(r16)
 40113e0:	04810004 	movi	r18,1024
 40113e4:	84801315 	stw	r18,76(r16)
 40113e8:	1484b03a 	or	r2,r2,r18
 40113ec:	8080030d 	sth	r2,12(r16)
 40113f0:	0027883a 	mov	r19,zero
 40113f4:	003fd806 	br	4011358 <__alt_data_end+0xfc011358>
 40113f8:	8140038f 	ldh	r5,14(r16)
 40113fc:	8809883a 	mov	r4,r17
 4011400:	40148d00 	call	40148d0 <_isatty_r>
 4011404:	103fe226 	beq	r2,zero,4011390 <__alt_data_end+0xfc011390>
 4011408:	8080030b 	ldhu	r2,12(r16)
 401140c:	10800054 	ori	r2,r2,1
 4011410:	8080030d 	sth	r2,12(r16)
 4011414:	003fde06 	br	4011390 <__alt_data_end+0xfc011390>
 4011418:	8080030b 	ldhu	r2,12(r16)
 401141c:	10c0800c 	andi	r3,r2,512
 4011420:	183fdb1e 	bne	r3,zero,4011390 <__alt_data_end+0xfc011390>
 4011424:	10800094 	ori	r2,r2,2
 4011428:	80c010c4 	addi	r3,r16,67
 401142c:	8080030d 	sth	r2,12(r16)
 4011430:	00800044 	movi	r2,1
 4011434:	80c00015 	stw	r3,0(r16)
 4011438:	80c00415 	stw	r3,16(r16)
 401143c:	80800515 	stw	r2,20(r16)
 4011440:	003fd306 	br	4011390 <__alt_data_end+0xfc011390>
 4011444:	04810004 	movi	r18,1024
 4011448:	003fc306 	br	4011358 <__alt_data_end+0xfc011358>
 401144c:	0027883a 	mov	r19,zero
 4011450:	04810004 	movi	r18,1024
 4011454:	003fc006 	br	4011358 <__alt_data_end+0xfc011358>

04011458 <memchr>:
 4011458:	208000cc 	andi	r2,r4,3
 401145c:	280f883a 	mov	r7,r5
 4011460:	10003426 	beq	r2,zero,4011534 <memchr+0xdc>
 4011464:	30bfffc4 	addi	r2,r6,-1
 4011468:	30001a26 	beq	r6,zero,40114d4 <memchr+0x7c>
 401146c:	20c00003 	ldbu	r3,0(r4)
 4011470:	29803fcc 	andi	r6,r5,255
 4011474:	30c0051e 	bne	r6,r3,401148c <memchr+0x34>
 4011478:	00001806 	br	40114dc <memchr+0x84>
 401147c:	10001526 	beq	r2,zero,40114d4 <memchr+0x7c>
 4011480:	20c00003 	ldbu	r3,0(r4)
 4011484:	10bfffc4 	addi	r2,r2,-1
 4011488:	30c01426 	beq	r6,r3,40114dc <memchr+0x84>
 401148c:	21000044 	addi	r4,r4,1
 4011490:	20c000cc 	andi	r3,r4,3
 4011494:	183ff91e 	bne	r3,zero,401147c <__alt_data_end+0xfc01147c>
 4011498:	020000c4 	movi	r8,3
 401149c:	40801136 	bltu	r8,r2,40114e4 <memchr+0x8c>
 40114a0:	10000c26 	beq	r2,zero,40114d4 <memchr+0x7c>
 40114a4:	20c00003 	ldbu	r3,0(r4)
 40114a8:	29403fcc 	andi	r5,r5,255
 40114ac:	28c00b26 	beq	r5,r3,40114dc <memchr+0x84>
 40114b0:	20c00044 	addi	r3,r4,1
 40114b4:	39803fcc 	andi	r6,r7,255
 40114b8:	2089883a 	add	r4,r4,r2
 40114bc:	00000306 	br	40114cc <memchr+0x74>
 40114c0:	18c00044 	addi	r3,r3,1
 40114c4:	197fffc3 	ldbu	r5,-1(r3)
 40114c8:	31400526 	beq	r6,r5,40114e0 <memchr+0x88>
 40114cc:	1805883a 	mov	r2,r3
 40114d0:	20fffb1e 	bne	r4,r3,40114c0 <__alt_data_end+0xfc0114c0>
 40114d4:	0005883a 	mov	r2,zero
 40114d8:	f800283a 	ret
 40114dc:	2005883a 	mov	r2,r4
 40114e0:	f800283a 	ret
 40114e4:	28c03fcc 	andi	r3,r5,255
 40114e8:	1812923a 	slli	r9,r3,8
 40114ec:	02ffbff4 	movhi	r11,65279
 40114f0:	02a02074 	movhi	r10,32897
 40114f4:	48d2b03a 	or	r9,r9,r3
 40114f8:	4806943a 	slli	r3,r9,16
 40114fc:	5affbfc4 	addi	r11,r11,-257
 4011500:	52a02004 	addi	r10,r10,-32640
 4011504:	48d2b03a 	or	r9,r9,r3
 4011508:	20c00017 	ldw	r3,0(r4)
 401150c:	48c6f03a 	xor	r3,r9,r3
 4011510:	1acd883a 	add	r6,r3,r11
 4011514:	00c6303a 	nor	r3,zero,r3
 4011518:	30c6703a 	and	r3,r6,r3
 401151c:	1a86703a 	and	r3,r3,r10
 4011520:	183fe01e 	bne	r3,zero,40114a4 <__alt_data_end+0xfc0114a4>
 4011524:	10bfff04 	addi	r2,r2,-4
 4011528:	21000104 	addi	r4,r4,4
 401152c:	40bff636 	bltu	r8,r2,4011508 <__alt_data_end+0xfc011508>
 4011530:	003fdb06 	br	40114a0 <__alt_data_end+0xfc0114a0>
 4011534:	3005883a 	mov	r2,r6
 4011538:	003fd706 	br	4011498 <__alt_data_end+0xfc011498>

0401153c <memmove>:
 401153c:	2005883a 	mov	r2,r4
 4011540:	29000b2e 	bgeu	r5,r4,4011570 <memmove+0x34>
 4011544:	298f883a 	add	r7,r5,r6
 4011548:	21c0092e 	bgeu	r4,r7,4011570 <memmove+0x34>
 401154c:	2187883a 	add	r3,r4,r6
 4011550:	198bc83a 	sub	r5,r3,r6
 4011554:	30004826 	beq	r6,zero,4011678 <memmove+0x13c>
 4011558:	39ffffc4 	addi	r7,r7,-1
 401155c:	39000003 	ldbu	r4,0(r7)
 4011560:	18ffffc4 	addi	r3,r3,-1
 4011564:	19000005 	stb	r4,0(r3)
 4011568:	28fffb1e 	bne	r5,r3,4011558 <__alt_data_end+0xfc011558>
 401156c:	f800283a 	ret
 4011570:	00c003c4 	movi	r3,15
 4011574:	1980412e 	bgeu	r3,r6,401167c <memmove+0x140>
 4011578:	2886b03a 	or	r3,r5,r2
 401157c:	18c000cc 	andi	r3,r3,3
 4011580:	1800401e 	bne	r3,zero,4011684 <memmove+0x148>
 4011584:	33fffc04 	addi	r15,r6,-16
 4011588:	781ed13a 	srli	r15,r15,4
 401158c:	28c00104 	addi	r3,r5,4
 4011590:	13400104 	addi	r13,r2,4
 4011594:	781c913a 	slli	r14,r15,4
 4011598:	2b000204 	addi	r12,r5,8
 401159c:	12c00204 	addi	r11,r2,8
 40115a0:	73800504 	addi	r14,r14,20
 40115a4:	2a800304 	addi	r10,r5,12
 40115a8:	12400304 	addi	r9,r2,12
 40115ac:	2b9d883a 	add	r14,r5,r14
 40115b0:	2811883a 	mov	r8,r5
 40115b4:	100f883a 	mov	r7,r2
 40115b8:	41000017 	ldw	r4,0(r8)
 40115bc:	39c00404 	addi	r7,r7,16
 40115c0:	18c00404 	addi	r3,r3,16
 40115c4:	393ffc15 	stw	r4,-16(r7)
 40115c8:	193ffc17 	ldw	r4,-16(r3)
 40115cc:	6b400404 	addi	r13,r13,16
 40115d0:	5ac00404 	addi	r11,r11,16
 40115d4:	693ffc15 	stw	r4,-16(r13)
 40115d8:	61000017 	ldw	r4,0(r12)
 40115dc:	4a400404 	addi	r9,r9,16
 40115e0:	42000404 	addi	r8,r8,16
 40115e4:	593ffc15 	stw	r4,-16(r11)
 40115e8:	51000017 	ldw	r4,0(r10)
 40115ec:	63000404 	addi	r12,r12,16
 40115f0:	52800404 	addi	r10,r10,16
 40115f4:	493ffc15 	stw	r4,-16(r9)
 40115f8:	1bbfef1e 	bne	r3,r14,40115b8 <__alt_data_end+0xfc0115b8>
 40115fc:	79000044 	addi	r4,r15,1
 4011600:	2008913a 	slli	r4,r4,4
 4011604:	328003cc 	andi	r10,r6,15
 4011608:	02c000c4 	movi	r11,3
 401160c:	1107883a 	add	r3,r2,r4
 4011610:	290b883a 	add	r5,r5,r4
 4011614:	5a801e2e 	bgeu	r11,r10,4011690 <memmove+0x154>
 4011618:	1813883a 	mov	r9,r3
 401161c:	2811883a 	mov	r8,r5
 4011620:	500f883a 	mov	r7,r10
 4011624:	41000017 	ldw	r4,0(r8)
 4011628:	4a400104 	addi	r9,r9,4
 401162c:	39ffff04 	addi	r7,r7,-4
 4011630:	493fff15 	stw	r4,-4(r9)
 4011634:	42000104 	addi	r8,r8,4
 4011638:	59fffa36 	bltu	r11,r7,4011624 <__alt_data_end+0xfc011624>
 401163c:	513fff04 	addi	r4,r10,-4
 4011640:	2008d0ba 	srli	r4,r4,2
 4011644:	318000cc 	andi	r6,r6,3
 4011648:	21000044 	addi	r4,r4,1
 401164c:	2109883a 	add	r4,r4,r4
 4011650:	2109883a 	add	r4,r4,r4
 4011654:	1907883a 	add	r3,r3,r4
 4011658:	290b883a 	add	r5,r5,r4
 401165c:	30000b26 	beq	r6,zero,401168c <memmove+0x150>
 4011660:	198d883a 	add	r6,r3,r6
 4011664:	29c00003 	ldbu	r7,0(r5)
 4011668:	18c00044 	addi	r3,r3,1
 401166c:	29400044 	addi	r5,r5,1
 4011670:	19ffffc5 	stb	r7,-1(r3)
 4011674:	19bffb1e 	bne	r3,r6,4011664 <__alt_data_end+0xfc011664>
 4011678:	f800283a 	ret
 401167c:	1007883a 	mov	r3,r2
 4011680:	003ff606 	br	401165c <__alt_data_end+0xfc01165c>
 4011684:	1007883a 	mov	r3,r2
 4011688:	003ff506 	br	4011660 <__alt_data_end+0xfc011660>
 401168c:	f800283a 	ret
 4011690:	500d883a 	mov	r6,r10
 4011694:	003ff106 	br	401165c <__alt_data_end+0xfc01165c>

04011698 <_Balloc>:
 4011698:	20801317 	ldw	r2,76(r4)
 401169c:	defffc04 	addi	sp,sp,-16
 40116a0:	dc400115 	stw	r17,4(sp)
 40116a4:	dc000015 	stw	r16,0(sp)
 40116a8:	dfc00315 	stw	ra,12(sp)
 40116ac:	dc800215 	stw	r18,8(sp)
 40116b0:	2023883a 	mov	r17,r4
 40116b4:	2821883a 	mov	r16,r5
 40116b8:	10000f26 	beq	r2,zero,40116f8 <_Balloc+0x60>
 40116bc:	8407883a 	add	r3,r16,r16
 40116c0:	18c7883a 	add	r3,r3,r3
 40116c4:	10c7883a 	add	r3,r2,r3
 40116c8:	18800017 	ldw	r2,0(r3)
 40116cc:	10001126 	beq	r2,zero,4011714 <_Balloc+0x7c>
 40116d0:	11000017 	ldw	r4,0(r2)
 40116d4:	19000015 	stw	r4,0(r3)
 40116d8:	10000415 	stw	zero,16(r2)
 40116dc:	10000315 	stw	zero,12(r2)
 40116e0:	dfc00317 	ldw	ra,12(sp)
 40116e4:	dc800217 	ldw	r18,8(sp)
 40116e8:	dc400117 	ldw	r17,4(sp)
 40116ec:	dc000017 	ldw	r16,0(sp)
 40116f0:	dec00404 	addi	sp,sp,16
 40116f4:	f800283a 	ret
 40116f8:	01800844 	movi	r6,33
 40116fc:	01400104 	movi	r5,4
 4011700:	40144a40 	call	40144a4 <_calloc_r>
 4011704:	88801315 	stw	r2,76(r17)
 4011708:	103fec1e 	bne	r2,zero,40116bc <__alt_data_end+0xfc0116bc>
 401170c:	0005883a 	mov	r2,zero
 4011710:	003ff306 	br	40116e0 <__alt_data_end+0xfc0116e0>
 4011714:	01400044 	movi	r5,1
 4011718:	2c24983a 	sll	r18,r5,r16
 401171c:	8809883a 	mov	r4,r17
 4011720:	91800144 	addi	r6,r18,5
 4011724:	318d883a 	add	r6,r6,r6
 4011728:	318d883a 	add	r6,r6,r6
 401172c:	40144a40 	call	40144a4 <_calloc_r>
 4011730:	103ff626 	beq	r2,zero,401170c <__alt_data_end+0xfc01170c>
 4011734:	14000115 	stw	r16,4(r2)
 4011738:	14800215 	stw	r18,8(r2)
 401173c:	003fe606 	br	40116d8 <__alt_data_end+0xfc0116d8>

04011740 <_Bfree>:
 4011740:	28000826 	beq	r5,zero,4011764 <_Bfree+0x24>
 4011744:	28c00117 	ldw	r3,4(r5)
 4011748:	20801317 	ldw	r2,76(r4)
 401174c:	18c7883a 	add	r3,r3,r3
 4011750:	18c7883a 	add	r3,r3,r3
 4011754:	10c5883a 	add	r2,r2,r3
 4011758:	10c00017 	ldw	r3,0(r2)
 401175c:	28c00015 	stw	r3,0(r5)
 4011760:	11400015 	stw	r5,0(r2)
 4011764:	f800283a 	ret

04011768 <__multadd>:
 4011768:	defffa04 	addi	sp,sp,-24
 401176c:	dc800315 	stw	r18,12(sp)
 4011770:	dc400215 	stw	r17,8(sp)
 4011774:	dc000115 	stw	r16,4(sp)
 4011778:	2823883a 	mov	r17,r5
 401177c:	2c000417 	ldw	r16,16(r5)
 4011780:	dfc00515 	stw	ra,20(sp)
 4011784:	dcc00415 	stw	r19,16(sp)
 4011788:	2025883a 	mov	r18,r4
 401178c:	29400504 	addi	r5,r5,20
 4011790:	0011883a 	mov	r8,zero
 4011794:	28c00017 	ldw	r3,0(r5)
 4011798:	29400104 	addi	r5,r5,4
 401179c:	42000044 	addi	r8,r8,1
 40117a0:	18bfffcc 	andi	r2,r3,65535
 40117a4:	1185383a 	mul	r2,r2,r6
 40117a8:	1806d43a 	srli	r3,r3,16
 40117ac:	11cf883a 	add	r7,r2,r7
 40117b0:	3808d43a 	srli	r4,r7,16
 40117b4:	1987383a 	mul	r3,r3,r6
 40117b8:	38bfffcc 	andi	r2,r7,65535
 40117bc:	1907883a 	add	r3,r3,r4
 40117c0:	1808943a 	slli	r4,r3,16
 40117c4:	180ed43a 	srli	r7,r3,16
 40117c8:	2085883a 	add	r2,r4,r2
 40117cc:	28bfff15 	stw	r2,-4(r5)
 40117d0:	443ff016 	blt	r8,r16,4011794 <__alt_data_end+0xfc011794>
 40117d4:	38000926 	beq	r7,zero,40117fc <__multadd+0x94>
 40117d8:	88800217 	ldw	r2,8(r17)
 40117dc:	80800f0e 	bge	r16,r2,401181c <__multadd+0xb4>
 40117e0:	80800144 	addi	r2,r16,5
 40117e4:	1085883a 	add	r2,r2,r2
 40117e8:	1085883a 	add	r2,r2,r2
 40117ec:	8885883a 	add	r2,r17,r2
 40117f0:	11c00015 	stw	r7,0(r2)
 40117f4:	84000044 	addi	r16,r16,1
 40117f8:	8c000415 	stw	r16,16(r17)
 40117fc:	8805883a 	mov	r2,r17
 4011800:	dfc00517 	ldw	ra,20(sp)
 4011804:	dcc00417 	ldw	r19,16(sp)
 4011808:	dc800317 	ldw	r18,12(sp)
 401180c:	dc400217 	ldw	r17,8(sp)
 4011810:	dc000117 	ldw	r16,4(sp)
 4011814:	dec00604 	addi	sp,sp,24
 4011818:	f800283a 	ret
 401181c:	89400117 	ldw	r5,4(r17)
 4011820:	9009883a 	mov	r4,r18
 4011824:	d9c00015 	stw	r7,0(sp)
 4011828:	29400044 	addi	r5,r5,1
 401182c:	40116980 	call	4011698 <_Balloc>
 4011830:	89800417 	ldw	r6,16(r17)
 4011834:	89400304 	addi	r5,r17,12
 4011838:	11000304 	addi	r4,r2,12
 401183c:	31800084 	addi	r6,r6,2
 4011840:	318d883a 	add	r6,r6,r6
 4011844:	318d883a 	add	r6,r6,r6
 4011848:	1027883a 	mov	r19,r2
 401184c:	400bbd00 	call	400bbd0 <memcpy>
 4011850:	d9c00017 	ldw	r7,0(sp)
 4011854:	88000a26 	beq	r17,zero,4011880 <__multadd+0x118>
 4011858:	88c00117 	ldw	r3,4(r17)
 401185c:	90801317 	ldw	r2,76(r18)
 4011860:	18c7883a 	add	r3,r3,r3
 4011864:	18c7883a 	add	r3,r3,r3
 4011868:	10c5883a 	add	r2,r2,r3
 401186c:	10c00017 	ldw	r3,0(r2)
 4011870:	88c00015 	stw	r3,0(r17)
 4011874:	14400015 	stw	r17,0(r2)
 4011878:	9823883a 	mov	r17,r19
 401187c:	003fd806 	br	40117e0 <__alt_data_end+0xfc0117e0>
 4011880:	9823883a 	mov	r17,r19
 4011884:	003fd606 	br	40117e0 <__alt_data_end+0xfc0117e0>

04011888 <__s2b>:
 4011888:	defff904 	addi	sp,sp,-28
 401188c:	dc400115 	stw	r17,4(sp)
 4011890:	dc000015 	stw	r16,0(sp)
 4011894:	2023883a 	mov	r17,r4
 4011898:	2821883a 	mov	r16,r5
 401189c:	39000204 	addi	r4,r7,8
 40118a0:	01400244 	movi	r5,9
 40118a4:	dcc00315 	stw	r19,12(sp)
 40118a8:	dc800215 	stw	r18,8(sp)
 40118ac:	dfc00615 	stw	ra,24(sp)
 40118b0:	dd400515 	stw	r21,20(sp)
 40118b4:	dd000415 	stw	r20,16(sp)
 40118b8:	3825883a 	mov	r18,r7
 40118bc:	3027883a 	mov	r19,r6
 40118c0:	400abe80 	call	400abe8 <__divsi3>
 40118c4:	00c00044 	movi	r3,1
 40118c8:	000b883a 	mov	r5,zero
 40118cc:	1880030e 	bge	r3,r2,40118dc <__s2b+0x54>
 40118d0:	18c7883a 	add	r3,r3,r3
 40118d4:	29400044 	addi	r5,r5,1
 40118d8:	18bffd16 	blt	r3,r2,40118d0 <__alt_data_end+0xfc0118d0>
 40118dc:	8809883a 	mov	r4,r17
 40118e0:	40116980 	call	4011698 <_Balloc>
 40118e4:	d8c00717 	ldw	r3,28(sp)
 40118e8:	10c00515 	stw	r3,20(r2)
 40118ec:	00c00044 	movi	r3,1
 40118f0:	10c00415 	stw	r3,16(r2)
 40118f4:	00c00244 	movi	r3,9
 40118f8:	1cc0210e 	bge	r3,r19,4011980 <__s2b+0xf8>
 40118fc:	80eb883a 	add	r21,r16,r3
 4011900:	a829883a 	mov	r20,r21
 4011904:	84e1883a 	add	r16,r16,r19
 4011908:	a1c00007 	ldb	r7,0(r20)
 401190c:	01800284 	movi	r6,10
 4011910:	a5000044 	addi	r20,r20,1
 4011914:	100b883a 	mov	r5,r2
 4011918:	39fff404 	addi	r7,r7,-48
 401191c:	8809883a 	mov	r4,r17
 4011920:	40117680 	call	4011768 <__multadd>
 4011924:	a43ff81e 	bne	r20,r16,4011908 <__alt_data_end+0xfc011908>
 4011928:	ace1883a 	add	r16,r21,r19
 401192c:	843ffe04 	addi	r16,r16,-8
 4011930:	9c800a0e 	bge	r19,r18,401195c <__s2b+0xd4>
 4011934:	94e5c83a 	sub	r18,r18,r19
 4011938:	84a5883a 	add	r18,r16,r18
 401193c:	81c00007 	ldb	r7,0(r16)
 4011940:	01800284 	movi	r6,10
 4011944:	84000044 	addi	r16,r16,1
 4011948:	100b883a 	mov	r5,r2
 401194c:	39fff404 	addi	r7,r7,-48
 4011950:	8809883a 	mov	r4,r17
 4011954:	40117680 	call	4011768 <__multadd>
 4011958:	84bff81e 	bne	r16,r18,401193c <__alt_data_end+0xfc01193c>
 401195c:	dfc00617 	ldw	ra,24(sp)
 4011960:	dd400517 	ldw	r21,20(sp)
 4011964:	dd000417 	ldw	r20,16(sp)
 4011968:	dcc00317 	ldw	r19,12(sp)
 401196c:	dc800217 	ldw	r18,8(sp)
 4011970:	dc400117 	ldw	r17,4(sp)
 4011974:	dc000017 	ldw	r16,0(sp)
 4011978:	dec00704 	addi	sp,sp,28
 401197c:	f800283a 	ret
 4011980:	84000284 	addi	r16,r16,10
 4011984:	1827883a 	mov	r19,r3
 4011988:	003fe906 	br	4011930 <__alt_data_end+0xfc011930>

0401198c <__hi0bits>:
 401198c:	20bfffec 	andhi	r2,r4,65535
 4011990:	1000141e 	bne	r2,zero,40119e4 <__hi0bits+0x58>
 4011994:	2008943a 	slli	r4,r4,16
 4011998:	00800404 	movi	r2,16
 401199c:	20ffc02c 	andhi	r3,r4,65280
 40119a0:	1800021e 	bne	r3,zero,40119ac <__hi0bits+0x20>
 40119a4:	2008923a 	slli	r4,r4,8
 40119a8:	10800204 	addi	r2,r2,8
 40119ac:	20fc002c 	andhi	r3,r4,61440
 40119b0:	1800021e 	bne	r3,zero,40119bc <__hi0bits+0x30>
 40119b4:	2008913a 	slli	r4,r4,4
 40119b8:	10800104 	addi	r2,r2,4
 40119bc:	20f0002c 	andhi	r3,r4,49152
 40119c0:	1800031e 	bne	r3,zero,40119d0 <__hi0bits+0x44>
 40119c4:	2109883a 	add	r4,r4,r4
 40119c8:	10800084 	addi	r2,r2,2
 40119cc:	2109883a 	add	r4,r4,r4
 40119d0:	20000316 	blt	r4,zero,40119e0 <__hi0bits+0x54>
 40119d4:	2110002c 	andhi	r4,r4,16384
 40119d8:	2000041e 	bne	r4,zero,40119ec <__hi0bits+0x60>
 40119dc:	00800804 	movi	r2,32
 40119e0:	f800283a 	ret
 40119e4:	0005883a 	mov	r2,zero
 40119e8:	003fec06 	br	401199c <__alt_data_end+0xfc01199c>
 40119ec:	10800044 	addi	r2,r2,1
 40119f0:	f800283a 	ret

040119f4 <__lo0bits>:
 40119f4:	20c00017 	ldw	r3,0(r4)
 40119f8:	188001cc 	andi	r2,r3,7
 40119fc:	10000826 	beq	r2,zero,4011a20 <__lo0bits+0x2c>
 4011a00:	1880004c 	andi	r2,r3,1
 4011a04:	1000211e 	bne	r2,zero,4011a8c <__lo0bits+0x98>
 4011a08:	1880008c 	andi	r2,r3,2
 4011a0c:	1000211e 	bne	r2,zero,4011a94 <__lo0bits+0xa0>
 4011a10:	1806d0ba 	srli	r3,r3,2
 4011a14:	00800084 	movi	r2,2
 4011a18:	20c00015 	stw	r3,0(r4)
 4011a1c:	f800283a 	ret
 4011a20:	18bfffcc 	andi	r2,r3,65535
 4011a24:	10001326 	beq	r2,zero,4011a74 <__lo0bits+0x80>
 4011a28:	0005883a 	mov	r2,zero
 4011a2c:	19403fcc 	andi	r5,r3,255
 4011a30:	2800021e 	bne	r5,zero,4011a3c <__lo0bits+0x48>
 4011a34:	1806d23a 	srli	r3,r3,8
 4011a38:	10800204 	addi	r2,r2,8
 4011a3c:	194003cc 	andi	r5,r3,15
 4011a40:	2800021e 	bne	r5,zero,4011a4c <__lo0bits+0x58>
 4011a44:	1806d13a 	srli	r3,r3,4
 4011a48:	10800104 	addi	r2,r2,4
 4011a4c:	194000cc 	andi	r5,r3,3
 4011a50:	2800021e 	bne	r5,zero,4011a5c <__lo0bits+0x68>
 4011a54:	1806d0ba 	srli	r3,r3,2
 4011a58:	10800084 	addi	r2,r2,2
 4011a5c:	1940004c 	andi	r5,r3,1
 4011a60:	2800081e 	bne	r5,zero,4011a84 <__lo0bits+0x90>
 4011a64:	1806d07a 	srli	r3,r3,1
 4011a68:	1800051e 	bne	r3,zero,4011a80 <__lo0bits+0x8c>
 4011a6c:	00800804 	movi	r2,32
 4011a70:	f800283a 	ret
 4011a74:	1806d43a 	srli	r3,r3,16
 4011a78:	00800404 	movi	r2,16
 4011a7c:	003feb06 	br	4011a2c <__alt_data_end+0xfc011a2c>
 4011a80:	10800044 	addi	r2,r2,1
 4011a84:	20c00015 	stw	r3,0(r4)
 4011a88:	f800283a 	ret
 4011a8c:	0005883a 	mov	r2,zero
 4011a90:	f800283a 	ret
 4011a94:	1806d07a 	srli	r3,r3,1
 4011a98:	00800044 	movi	r2,1
 4011a9c:	20c00015 	stw	r3,0(r4)
 4011aa0:	f800283a 	ret

04011aa4 <__i2b>:
 4011aa4:	defffd04 	addi	sp,sp,-12
 4011aa8:	dc000015 	stw	r16,0(sp)
 4011aac:	04000044 	movi	r16,1
 4011ab0:	dc400115 	stw	r17,4(sp)
 4011ab4:	2823883a 	mov	r17,r5
 4011ab8:	800b883a 	mov	r5,r16
 4011abc:	dfc00215 	stw	ra,8(sp)
 4011ac0:	40116980 	call	4011698 <_Balloc>
 4011ac4:	14400515 	stw	r17,20(r2)
 4011ac8:	14000415 	stw	r16,16(r2)
 4011acc:	dfc00217 	ldw	ra,8(sp)
 4011ad0:	dc400117 	ldw	r17,4(sp)
 4011ad4:	dc000017 	ldw	r16,0(sp)
 4011ad8:	dec00304 	addi	sp,sp,12
 4011adc:	f800283a 	ret

04011ae0 <__multiply>:
 4011ae0:	defffa04 	addi	sp,sp,-24
 4011ae4:	dcc00315 	stw	r19,12(sp)
 4011ae8:	dc800215 	stw	r18,8(sp)
 4011aec:	34c00417 	ldw	r19,16(r6)
 4011af0:	2c800417 	ldw	r18,16(r5)
 4011af4:	dd000415 	stw	r20,16(sp)
 4011af8:	dc400115 	stw	r17,4(sp)
 4011afc:	dfc00515 	stw	ra,20(sp)
 4011b00:	dc000015 	stw	r16,0(sp)
 4011b04:	2829883a 	mov	r20,r5
 4011b08:	3023883a 	mov	r17,r6
 4011b0c:	94c0050e 	bge	r18,r19,4011b24 <__multiply+0x44>
 4011b10:	9007883a 	mov	r3,r18
 4011b14:	3029883a 	mov	r20,r6
 4011b18:	9825883a 	mov	r18,r19
 4011b1c:	2823883a 	mov	r17,r5
 4011b20:	1827883a 	mov	r19,r3
 4011b24:	a0800217 	ldw	r2,8(r20)
 4011b28:	94e1883a 	add	r16,r18,r19
 4011b2c:	a1400117 	ldw	r5,4(r20)
 4011b30:	1400010e 	bge	r2,r16,4011b38 <__multiply+0x58>
 4011b34:	29400044 	addi	r5,r5,1
 4011b38:	40116980 	call	4011698 <_Balloc>
 4011b3c:	8415883a 	add	r10,r16,r16
 4011b40:	12c00504 	addi	r11,r2,20
 4011b44:	5295883a 	add	r10,r10,r10
 4011b48:	5a95883a 	add	r10,r11,r10
 4011b4c:	5807883a 	mov	r3,r11
 4011b50:	5a80032e 	bgeu	r11,r10,4011b60 <__multiply+0x80>
 4011b54:	18000015 	stw	zero,0(r3)
 4011b58:	18c00104 	addi	r3,r3,4
 4011b5c:	1abffd36 	bltu	r3,r10,4011b54 <__alt_data_end+0xfc011b54>
 4011b60:	9ce7883a 	add	r19,r19,r19
 4011b64:	94a5883a 	add	r18,r18,r18
 4011b68:	89800504 	addi	r6,r17,20
 4011b6c:	9ce7883a 	add	r19,r19,r19
 4011b70:	a3400504 	addi	r13,r20,20
 4011b74:	94a5883a 	add	r18,r18,r18
 4011b78:	34d9883a 	add	r12,r6,r19
 4011b7c:	6c93883a 	add	r9,r13,r18
 4011b80:	3300422e 	bgeu	r6,r12,4011c8c <__multiply+0x1ac>
 4011b84:	37c00017 	ldw	ra,0(r6)
 4011b88:	fbffffcc 	andi	r15,ra,65535
 4011b8c:	78001b26 	beq	r15,zero,4011bfc <__multiply+0x11c>
 4011b90:	5811883a 	mov	r8,r11
 4011b94:	681d883a 	mov	r14,r13
 4011b98:	000f883a 	mov	r7,zero
 4011b9c:	71000017 	ldw	r4,0(r14)
 4011ba0:	40c00017 	ldw	r3,0(r8)
 4011ba4:	73800104 	addi	r14,r14,4
 4011ba8:	217fffcc 	andi	r5,r4,65535
 4011bac:	2bcb383a 	mul	r5,r5,r15
 4011bb0:	2008d43a 	srli	r4,r4,16
 4011bb4:	1c7fffcc 	andi	r17,r3,65535
 4011bb8:	2c4b883a 	add	r5,r5,r17
 4011bbc:	29cb883a 	add	r5,r5,r7
 4011bc0:	23c9383a 	mul	r4,r4,r15
 4011bc4:	1806d43a 	srli	r3,r3,16
 4011bc8:	280ed43a 	srli	r7,r5,16
 4011bcc:	297fffcc 	andi	r5,r5,65535
 4011bd0:	20c7883a 	add	r3,r4,r3
 4011bd4:	19c7883a 	add	r3,r3,r7
 4011bd8:	1808943a 	slli	r4,r3,16
 4011bdc:	4023883a 	mov	r17,r8
 4011be0:	180ed43a 	srli	r7,r3,16
 4011be4:	214ab03a 	or	r5,r4,r5
 4011be8:	41400015 	stw	r5,0(r8)
 4011bec:	42000104 	addi	r8,r8,4
 4011bf0:	727fea36 	bltu	r14,r9,4011b9c <__alt_data_end+0xfc011b9c>
 4011bf4:	89c00115 	stw	r7,4(r17)
 4011bf8:	37c00017 	ldw	ra,0(r6)
 4011bfc:	f83ed43a 	srli	ra,ra,16
 4011c00:	f8001f26 	beq	ra,zero,4011c80 <__multiply+0x1a0>
 4011c04:	58c00017 	ldw	r3,0(r11)
 4011c08:	681d883a 	mov	r14,r13
 4011c0c:	581f883a 	mov	r15,r11
 4011c10:	1811883a 	mov	r8,r3
 4011c14:	5825883a 	mov	r18,r11
 4011c18:	000f883a 	mov	r7,zero
 4011c1c:	00000106 	br	4011c24 <__multiply+0x144>
 4011c20:	8825883a 	mov	r18,r17
 4011c24:	7140000b 	ldhu	r5,0(r14)
 4011c28:	4010d43a 	srli	r8,r8,16
 4011c2c:	193fffcc 	andi	r4,r3,65535
 4011c30:	2fcb383a 	mul	r5,r5,ra
 4011c34:	7bc00104 	addi	r15,r15,4
 4011c38:	73800104 	addi	r14,r14,4
 4011c3c:	2a0b883a 	add	r5,r5,r8
 4011c40:	29cb883a 	add	r5,r5,r7
 4011c44:	2806943a 	slli	r3,r5,16
 4011c48:	94400104 	addi	r17,r18,4
 4011c4c:	280ad43a 	srli	r5,r5,16
 4011c50:	1908b03a 	or	r4,r3,r4
 4011c54:	793fff15 	stw	r4,-4(r15)
 4011c58:	70ffff17 	ldw	r3,-4(r14)
 4011c5c:	8a000017 	ldw	r8,0(r17)
 4011c60:	1806d43a 	srli	r3,r3,16
 4011c64:	413fffcc 	andi	r4,r8,65535
 4011c68:	1fc7383a 	mul	r3,r3,ra
 4011c6c:	1907883a 	add	r3,r3,r4
 4011c70:	1947883a 	add	r3,r3,r5
 4011c74:	180ed43a 	srli	r7,r3,16
 4011c78:	727fe936 	bltu	r14,r9,4011c20 <__alt_data_end+0xfc011c20>
 4011c7c:	90c00115 	stw	r3,4(r18)
 4011c80:	31800104 	addi	r6,r6,4
 4011c84:	5ac00104 	addi	r11,r11,4
 4011c88:	333fbe36 	bltu	r6,r12,4011b84 <__alt_data_end+0xfc011b84>
 4011c8c:	0400090e 	bge	zero,r16,4011cb4 <__multiply+0x1d4>
 4011c90:	50ffff17 	ldw	r3,-4(r10)
 4011c94:	52bfff04 	addi	r10,r10,-4
 4011c98:	18000326 	beq	r3,zero,4011ca8 <__multiply+0x1c8>
 4011c9c:	00000506 	br	4011cb4 <__multiply+0x1d4>
 4011ca0:	50c00017 	ldw	r3,0(r10)
 4011ca4:	1800031e 	bne	r3,zero,4011cb4 <__multiply+0x1d4>
 4011ca8:	843fffc4 	addi	r16,r16,-1
 4011cac:	52bfff04 	addi	r10,r10,-4
 4011cb0:	803ffb1e 	bne	r16,zero,4011ca0 <__alt_data_end+0xfc011ca0>
 4011cb4:	14000415 	stw	r16,16(r2)
 4011cb8:	dfc00517 	ldw	ra,20(sp)
 4011cbc:	dd000417 	ldw	r20,16(sp)
 4011cc0:	dcc00317 	ldw	r19,12(sp)
 4011cc4:	dc800217 	ldw	r18,8(sp)
 4011cc8:	dc400117 	ldw	r17,4(sp)
 4011ccc:	dc000017 	ldw	r16,0(sp)
 4011cd0:	dec00604 	addi	sp,sp,24
 4011cd4:	f800283a 	ret

04011cd8 <__pow5mult>:
 4011cd8:	defffa04 	addi	sp,sp,-24
 4011cdc:	dcc00315 	stw	r19,12(sp)
 4011ce0:	dc000015 	stw	r16,0(sp)
 4011ce4:	dfc00515 	stw	ra,20(sp)
 4011ce8:	dd000415 	stw	r20,16(sp)
 4011cec:	dc800215 	stw	r18,8(sp)
 4011cf0:	dc400115 	stw	r17,4(sp)
 4011cf4:	308000cc 	andi	r2,r6,3
 4011cf8:	3021883a 	mov	r16,r6
 4011cfc:	2027883a 	mov	r19,r4
 4011d00:	10002f1e 	bne	r2,zero,4011dc0 <__pow5mult+0xe8>
 4011d04:	2825883a 	mov	r18,r5
 4011d08:	8021d0ba 	srai	r16,r16,2
 4011d0c:	80001a26 	beq	r16,zero,4011d78 <__pow5mult+0xa0>
 4011d10:	9c401217 	ldw	r17,72(r19)
 4011d14:	8800061e 	bne	r17,zero,4011d30 <__pow5mult+0x58>
 4011d18:	00003406 	br	4011dec <__pow5mult+0x114>
 4011d1c:	8021d07a 	srai	r16,r16,1
 4011d20:	80001526 	beq	r16,zero,4011d78 <__pow5mult+0xa0>
 4011d24:	88800017 	ldw	r2,0(r17)
 4011d28:	10001c26 	beq	r2,zero,4011d9c <__pow5mult+0xc4>
 4011d2c:	1023883a 	mov	r17,r2
 4011d30:	8080004c 	andi	r2,r16,1
 4011d34:	103ff926 	beq	r2,zero,4011d1c <__alt_data_end+0xfc011d1c>
 4011d38:	880d883a 	mov	r6,r17
 4011d3c:	900b883a 	mov	r5,r18
 4011d40:	9809883a 	mov	r4,r19
 4011d44:	4011ae00 	call	4011ae0 <__multiply>
 4011d48:	90001b26 	beq	r18,zero,4011db8 <__pow5mult+0xe0>
 4011d4c:	91000117 	ldw	r4,4(r18)
 4011d50:	98c01317 	ldw	r3,76(r19)
 4011d54:	8021d07a 	srai	r16,r16,1
 4011d58:	2109883a 	add	r4,r4,r4
 4011d5c:	2109883a 	add	r4,r4,r4
 4011d60:	1907883a 	add	r3,r3,r4
 4011d64:	19000017 	ldw	r4,0(r3)
 4011d68:	91000015 	stw	r4,0(r18)
 4011d6c:	1c800015 	stw	r18,0(r3)
 4011d70:	1025883a 	mov	r18,r2
 4011d74:	803feb1e 	bne	r16,zero,4011d24 <__alt_data_end+0xfc011d24>
 4011d78:	9005883a 	mov	r2,r18
 4011d7c:	dfc00517 	ldw	ra,20(sp)
 4011d80:	dd000417 	ldw	r20,16(sp)
 4011d84:	dcc00317 	ldw	r19,12(sp)
 4011d88:	dc800217 	ldw	r18,8(sp)
 4011d8c:	dc400117 	ldw	r17,4(sp)
 4011d90:	dc000017 	ldw	r16,0(sp)
 4011d94:	dec00604 	addi	sp,sp,24
 4011d98:	f800283a 	ret
 4011d9c:	880d883a 	mov	r6,r17
 4011da0:	880b883a 	mov	r5,r17
 4011da4:	9809883a 	mov	r4,r19
 4011da8:	4011ae00 	call	4011ae0 <__multiply>
 4011dac:	88800015 	stw	r2,0(r17)
 4011db0:	10000015 	stw	zero,0(r2)
 4011db4:	003fdd06 	br	4011d2c <__alt_data_end+0xfc011d2c>
 4011db8:	1025883a 	mov	r18,r2
 4011dbc:	003fd706 	br	4011d1c <__alt_data_end+0xfc011d1c>
 4011dc0:	10bfffc4 	addi	r2,r2,-1
 4011dc4:	1085883a 	add	r2,r2,r2
 4011dc8:	00c100b4 	movhi	r3,1026
 4011dcc:	18f0b404 	addi	r3,r3,-15664
 4011dd0:	1085883a 	add	r2,r2,r2
 4011dd4:	1885883a 	add	r2,r3,r2
 4011dd8:	11800017 	ldw	r6,0(r2)
 4011ddc:	000f883a 	mov	r7,zero
 4011de0:	40117680 	call	4011768 <__multadd>
 4011de4:	1025883a 	mov	r18,r2
 4011de8:	003fc706 	br	4011d08 <__alt_data_end+0xfc011d08>
 4011dec:	05000044 	movi	r20,1
 4011df0:	a00b883a 	mov	r5,r20
 4011df4:	9809883a 	mov	r4,r19
 4011df8:	40116980 	call	4011698 <_Balloc>
 4011dfc:	1023883a 	mov	r17,r2
 4011e00:	00809c44 	movi	r2,625
 4011e04:	88800515 	stw	r2,20(r17)
 4011e08:	8d000415 	stw	r20,16(r17)
 4011e0c:	9c401215 	stw	r17,72(r19)
 4011e10:	88000015 	stw	zero,0(r17)
 4011e14:	003fc606 	br	4011d30 <__alt_data_end+0xfc011d30>

04011e18 <__lshift>:
 4011e18:	defff904 	addi	sp,sp,-28
 4011e1c:	dd400515 	stw	r21,20(sp)
 4011e20:	dcc00315 	stw	r19,12(sp)
 4011e24:	302bd17a 	srai	r21,r6,5
 4011e28:	2cc00417 	ldw	r19,16(r5)
 4011e2c:	28800217 	ldw	r2,8(r5)
 4011e30:	dd000415 	stw	r20,16(sp)
 4011e34:	ace7883a 	add	r19,r21,r19
 4011e38:	dc800215 	stw	r18,8(sp)
 4011e3c:	dc400115 	stw	r17,4(sp)
 4011e40:	dc000015 	stw	r16,0(sp)
 4011e44:	dfc00615 	stw	ra,24(sp)
 4011e48:	9c000044 	addi	r16,r19,1
 4011e4c:	2823883a 	mov	r17,r5
 4011e50:	3029883a 	mov	r20,r6
 4011e54:	2025883a 	mov	r18,r4
 4011e58:	29400117 	ldw	r5,4(r5)
 4011e5c:	1400030e 	bge	r2,r16,4011e6c <__lshift+0x54>
 4011e60:	1085883a 	add	r2,r2,r2
 4011e64:	29400044 	addi	r5,r5,1
 4011e68:	143ffd16 	blt	r2,r16,4011e60 <__alt_data_end+0xfc011e60>
 4011e6c:	9009883a 	mov	r4,r18
 4011e70:	40116980 	call	4011698 <_Balloc>
 4011e74:	10c00504 	addi	r3,r2,20
 4011e78:	0540070e 	bge	zero,r21,4011e98 <__lshift+0x80>
 4011e7c:	ad6b883a 	add	r21,r21,r21
 4011e80:	ad6b883a 	add	r21,r21,r21
 4011e84:	1809883a 	mov	r4,r3
 4011e88:	1d47883a 	add	r3,r3,r21
 4011e8c:	20000015 	stw	zero,0(r4)
 4011e90:	21000104 	addi	r4,r4,4
 4011e94:	193ffd1e 	bne	r3,r4,4011e8c <__alt_data_end+0xfc011e8c>
 4011e98:	8a000417 	ldw	r8,16(r17)
 4011e9c:	89000504 	addi	r4,r17,20
 4011ea0:	a18007cc 	andi	r6,r20,31
 4011ea4:	4211883a 	add	r8,r8,r8
 4011ea8:	4211883a 	add	r8,r8,r8
 4011eac:	2211883a 	add	r8,r4,r8
 4011eb0:	30002326 	beq	r6,zero,4011f40 <__lshift+0x128>
 4011eb4:	02400804 	movi	r9,32
 4011eb8:	4993c83a 	sub	r9,r9,r6
 4011ebc:	000b883a 	mov	r5,zero
 4011ec0:	21c00017 	ldw	r7,0(r4)
 4011ec4:	1815883a 	mov	r10,r3
 4011ec8:	18c00104 	addi	r3,r3,4
 4011ecc:	398e983a 	sll	r7,r7,r6
 4011ed0:	21000104 	addi	r4,r4,4
 4011ed4:	394ab03a 	or	r5,r7,r5
 4011ed8:	197fff15 	stw	r5,-4(r3)
 4011edc:	217fff17 	ldw	r5,-4(r4)
 4011ee0:	2a4ad83a 	srl	r5,r5,r9
 4011ee4:	223ff636 	bltu	r4,r8,4011ec0 <__alt_data_end+0xfc011ec0>
 4011ee8:	51400115 	stw	r5,4(r10)
 4011eec:	28001a1e 	bne	r5,zero,4011f58 <__lshift+0x140>
 4011ef0:	843fffc4 	addi	r16,r16,-1
 4011ef4:	14000415 	stw	r16,16(r2)
 4011ef8:	88000826 	beq	r17,zero,4011f1c <__lshift+0x104>
 4011efc:	89000117 	ldw	r4,4(r17)
 4011f00:	90c01317 	ldw	r3,76(r18)
 4011f04:	2109883a 	add	r4,r4,r4
 4011f08:	2109883a 	add	r4,r4,r4
 4011f0c:	1907883a 	add	r3,r3,r4
 4011f10:	19000017 	ldw	r4,0(r3)
 4011f14:	89000015 	stw	r4,0(r17)
 4011f18:	1c400015 	stw	r17,0(r3)
 4011f1c:	dfc00617 	ldw	ra,24(sp)
 4011f20:	dd400517 	ldw	r21,20(sp)
 4011f24:	dd000417 	ldw	r20,16(sp)
 4011f28:	dcc00317 	ldw	r19,12(sp)
 4011f2c:	dc800217 	ldw	r18,8(sp)
 4011f30:	dc400117 	ldw	r17,4(sp)
 4011f34:	dc000017 	ldw	r16,0(sp)
 4011f38:	dec00704 	addi	sp,sp,28
 4011f3c:	f800283a 	ret
 4011f40:	21400017 	ldw	r5,0(r4)
 4011f44:	18c00104 	addi	r3,r3,4
 4011f48:	21000104 	addi	r4,r4,4
 4011f4c:	197fff15 	stw	r5,-4(r3)
 4011f50:	223ffb36 	bltu	r4,r8,4011f40 <__alt_data_end+0xfc011f40>
 4011f54:	003fe606 	br	4011ef0 <__alt_data_end+0xfc011ef0>
 4011f58:	9c000084 	addi	r16,r19,2
 4011f5c:	003fe406 	br	4011ef0 <__alt_data_end+0xfc011ef0>

04011f60 <__mcmp>:
 4011f60:	20800417 	ldw	r2,16(r4)
 4011f64:	28c00417 	ldw	r3,16(r5)
 4011f68:	10c5c83a 	sub	r2,r2,r3
 4011f6c:	1000111e 	bne	r2,zero,4011fb4 <__mcmp+0x54>
 4011f70:	18c7883a 	add	r3,r3,r3
 4011f74:	18c7883a 	add	r3,r3,r3
 4011f78:	21000504 	addi	r4,r4,20
 4011f7c:	29400504 	addi	r5,r5,20
 4011f80:	20c5883a 	add	r2,r4,r3
 4011f84:	28cb883a 	add	r5,r5,r3
 4011f88:	00000106 	br	4011f90 <__mcmp+0x30>
 4011f8c:	20800a2e 	bgeu	r4,r2,4011fb8 <__mcmp+0x58>
 4011f90:	10bfff04 	addi	r2,r2,-4
 4011f94:	297fff04 	addi	r5,r5,-4
 4011f98:	11800017 	ldw	r6,0(r2)
 4011f9c:	28c00017 	ldw	r3,0(r5)
 4011fa0:	30fffa26 	beq	r6,r3,4011f8c <__alt_data_end+0xfc011f8c>
 4011fa4:	30c00236 	bltu	r6,r3,4011fb0 <__mcmp+0x50>
 4011fa8:	00800044 	movi	r2,1
 4011fac:	f800283a 	ret
 4011fb0:	00bfffc4 	movi	r2,-1
 4011fb4:	f800283a 	ret
 4011fb8:	0005883a 	mov	r2,zero
 4011fbc:	f800283a 	ret

04011fc0 <__mdiff>:
 4011fc0:	28c00417 	ldw	r3,16(r5)
 4011fc4:	30800417 	ldw	r2,16(r6)
 4011fc8:	defffa04 	addi	sp,sp,-24
 4011fcc:	dcc00315 	stw	r19,12(sp)
 4011fd0:	dc800215 	stw	r18,8(sp)
 4011fd4:	dfc00515 	stw	ra,20(sp)
 4011fd8:	dd000415 	stw	r20,16(sp)
 4011fdc:	dc400115 	stw	r17,4(sp)
 4011fe0:	dc000015 	stw	r16,0(sp)
 4011fe4:	1887c83a 	sub	r3,r3,r2
 4011fe8:	2825883a 	mov	r18,r5
 4011fec:	3027883a 	mov	r19,r6
 4011ff0:	1800141e 	bne	r3,zero,4012044 <__mdiff+0x84>
 4011ff4:	1085883a 	add	r2,r2,r2
 4011ff8:	1085883a 	add	r2,r2,r2
 4011ffc:	2a000504 	addi	r8,r5,20
 4012000:	34000504 	addi	r16,r6,20
 4012004:	4087883a 	add	r3,r8,r2
 4012008:	8085883a 	add	r2,r16,r2
 401200c:	00000106 	br	4012014 <__mdiff+0x54>
 4012010:	40c0592e 	bgeu	r8,r3,4012178 <__mdiff+0x1b8>
 4012014:	18ffff04 	addi	r3,r3,-4
 4012018:	10bfff04 	addi	r2,r2,-4
 401201c:	19c00017 	ldw	r7,0(r3)
 4012020:	11400017 	ldw	r5,0(r2)
 4012024:	397ffa26 	beq	r7,r5,4012010 <__alt_data_end+0xfc012010>
 4012028:	3940592e 	bgeu	r7,r5,4012190 <__mdiff+0x1d0>
 401202c:	9005883a 	mov	r2,r18
 4012030:	4023883a 	mov	r17,r8
 4012034:	9825883a 	mov	r18,r19
 4012038:	05000044 	movi	r20,1
 401203c:	1027883a 	mov	r19,r2
 4012040:	00000406 	br	4012054 <__mdiff+0x94>
 4012044:	18005616 	blt	r3,zero,40121a0 <__mdiff+0x1e0>
 4012048:	34400504 	addi	r17,r6,20
 401204c:	2c000504 	addi	r16,r5,20
 4012050:	0029883a 	mov	r20,zero
 4012054:	91400117 	ldw	r5,4(r18)
 4012058:	40116980 	call	4011698 <_Balloc>
 401205c:	92400417 	ldw	r9,16(r18)
 4012060:	9b000417 	ldw	r12,16(r19)
 4012064:	12c00504 	addi	r11,r2,20
 4012068:	4a51883a 	add	r8,r9,r9
 401206c:	6319883a 	add	r12,r12,r12
 4012070:	4211883a 	add	r8,r8,r8
 4012074:	6319883a 	add	r12,r12,r12
 4012078:	15000315 	stw	r20,12(r2)
 401207c:	8211883a 	add	r8,r16,r8
 4012080:	8b19883a 	add	r12,r17,r12
 4012084:	0007883a 	mov	r3,zero
 4012088:	81400017 	ldw	r5,0(r16)
 401208c:	89c00017 	ldw	r7,0(r17)
 4012090:	59800104 	addi	r6,r11,4
 4012094:	293fffcc 	andi	r4,r5,65535
 4012098:	20c7883a 	add	r3,r4,r3
 401209c:	393fffcc 	andi	r4,r7,65535
 40120a0:	1909c83a 	sub	r4,r3,r4
 40120a4:	280ad43a 	srli	r5,r5,16
 40120a8:	380ed43a 	srli	r7,r7,16
 40120ac:	2007d43a 	srai	r3,r4,16
 40120b0:	213fffcc 	andi	r4,r4,65535
 40120b4:	29cbc83a 	sub	r5,r5,r7
 40120b8:	28c7883a 	add	r3,r5,r3
 40120bc:	180a943a 	slli	r5,r3,16
 40120c0:	8c400104 	addi	r17,r17,4
 40120c4:	84000104 	addi	r16,r16,4
 40120c8:	2908b03a 	or	r4,r5,r4
 40120cc:	59000015 	stw	r4,0(r11)
 40120d0:	1807d43a 	srai	r3,r3,16
 40120d4:	3015883a 	mov	r10,r6
 40120d8:	3017883a 	mov	r11,r6
 40120dc:	8b3fea36 	bltu	r17,r12,4012088 <__alt_data_end+0xfc012088>
 40120e0:	8200162e 	bgeu	r16,r8,401213c <__mdiff+0x17c>
 40120e4:	8017883a 	mov	r11,r16
 40120e8:	59400017 	ldw	r5,0(r11)
 40120ec:	31800104 	addi	r6,r6,4
 40120f0:	5ac00104 	addi	r11,r11,4
 40120f4:	293fffcc 	andi	r4,r5,65535
 40120f8:	20c7883a 	add	r3,r4,r3
 40120fc:	280ed43a 	srli	r7,r5,16
 4012100:	180bd43a 	srai	r5,r3,16
 4012104:	193fffcc 	andi	r4,r3,65535
 4012108:	3947883a 	add	r3,r7,r5
 401210c:	180a943a 	slli	r5,r3,16
 4012110:	1807d43a 	srai	r3,r3,16
 4012114:	2908b03a 	or	r4,r5,r4
 4012118:	313fff15 	stw	r4,-4(r6)
 401211c:	5a3ff236 	bltu	r11,r8,40120e8 <__alt_data_end+0xfc0120e8>
 4012120:	0406303a 	nor	r3,zero,r16
 4012124:	1a07883a 	add	r3,r3,r8
 4012128:	1806d0ba 	srli	r3,r3,2
 401212c:	18c00044 	addi	r3,r3,1
 4012130:	18c7883a 	add	r3,r3,r3
 4012134:	18c7883a 	add	r3,r3,r3
 4012138:	50d5883a 	add	r10,r10,r3
 401213c:	50ffff04 	addi	r3,r10,-4
 4012140:	2000041e 	bne	r4,zero,4012154 <__mdiff+0x194>
 4012144:	18ffff04 	addi	r3,r3,-4
 4012148:	19000017 	ldw	r4,0(r3)
 401214c:	4a7fffc4 	addi	r9,r9,-1
 4012150:	203ffc26 	beq	r4,zero,4012144 <__alt_data_end+0xfc012144>
 4012154:	12400415 	stw	r9,16(r2)
 4012158:	dfc00517 	ldw	ra,20(sp)
 401215c:	dd000417 	ldw	r20,16(sp)
 4012160:	dcc00317 	ldw	r19,12(sp)
 4012164:	dc800217 	ldw	r18,8(sp)
 4012168:	dc400117 	ldw	r17,4(sp)
 401216c:	dc000017 	ldw	r16,0(sp)
 4012170:	dec00604 	addi	sp,sp,24
 4012174:	f800283a 	ret
 4012178:	000b883a 	mov	r5,zero
 401217c:	40116980 	call	4011698 <_Balloc>
 4012180:	00c00044 	movi	r3,1
 4012184:	10c00415 	stw	r3,16(r2)
 4012188:	10000515 	stw	zero,20(r2)
 401218c:	003ff206 	br	4012158 <__alt_data_end+0xfc012158>
 4012190:	8023883a 	mov	r17,r16
 4012194:	0029883a 	mov	r20,zero
 4012198:	4021883a 	mov	r16,r8
 401219c:	003fad06 	br	4012054 <__alt_data_end+0xfc012054>
 40121a0:	9005883a 	mov	r2,r18
 40121a4:	94400504 	addi	r17,r18,20
 40121a8:	9c000504 	addi	r16,r19,20
 40121ac:	9825883a 	mov	r18,r19
 40121b0:	05000044 	movi	r20,1
 40121b4:	1027883a 	mov	r19,r2
 40121b8:	003fa606 	br	4012054 <__alt_data_end+0xfc012054>

040121bc <__ulp>:
 40121bc:	295ffc2c 	andhi	r5,r5,32752
 40121c0:	00bf3034 	movhi	r2,64704
 40121c4:	2887883a 	add	r3,r5,r2
 40121c8:	00c0020e 	bge	zero,r3,40121d4 <__ulp+0x18>
 40121cc:	0005883a 	mov	r2,zero
 40121d0:	f800283a 	ret
 40121d4:	00c7c83a 	sub	r3,zero,r3
 40121d8:	1807d53a 	srai	r3,r3,20
 40121dc:	008004c4 	movi	r2,19
 40121e0:	10c00b0e 	bge	r2,r3,4012210 <__ulp+0x54>
 40121e4:	18bffb04 	addi	r2,r3,-20
 40121e8:	01000784 	movi	r4,30
 40121ec:	0007883a 	mov	r3,zero
 40121f0:	20800516 	blt	r4,r2,4012208 <__ulp+0x4c>
 40121f4:	010007c4 	movi	r4,31
 40121f8:	2089c83a 	sub	r4,r4,r2
 40121fc:	00800044 	movi	r2,1
 4012200:	1104983a 	sll	r2,r2,r4
 4012204:	f800283a 	ret
 4012208:	00800044 	movi	r2,1
 401220c:	f800283a 	ret
 4012210:	01400234 	movhi	r5,8
 4012214:	28c7d83a 	sra	r3,r5,r3
 4012218:	0005883a 	mov	r2,zero
 401221c:	f800283a 	ret

04012220 <__b2d>:
 4012220:	defffa04 	addi	sp,sp,-24
 4012224:	dc000015 	stw	r16,0(sp)
 4012228:	24000417 	ldw	r16,16(r4)
 401222c:	dc400115 	stw	r17,4(sp)
 4012230:	24400504 	addi	r17,r4,20
 4012234:	8421883a 	add	r16,r16,r16
 4012238:	8421883a 	add	r16,r16,r16
 401223c:	8c21883a 	add	r16,r17,r16
 4012240:	dc800215 	stw	r18,8(sp)
 4012244:	84bfff17 	ldw	r18,-4(r16)
 4012248:	dd000415 	stw	r20,16(sp)
 401224c:	dcc00315 	stw	r19,12(sp)
 4012250:	9009883a 	mov	r4,r18
 4012254:	2829883a 	mov	r20,r5
 4012258:	dfc00515 	stw	ra,20(sp)
 401225c:	401198c0 	call	401198c <__hi0bits>
 4012260:	00c00804 	movi	r3,32
 4012264:	1889c83a 	sub	r4,r3,r2
 4012268:	a1000015 	stw	r4,0(r20)
 401226c:	01000284 	movi	r4,10
 4012270:	84ffff04 	addi	r19,r16,-4
 4012274:	20801216 	blt	r4,r2,40122c0 <__b2d+0xa0>
 4012278:	018002c4 	movi	r6,11
 401227c:	308dc83a 	sub	r6,r6,r2
 4012280:	9186d83a 	srl	r3,r18,r6
 4012284:	18cffc34 	orhi	r3,r3,16368
 4012288:	8cc0212e 	bgeu	r17,r19,4012310 <__b2d+0xf0>
 401228c:	813ffe17 	ldw	r4,-8(r16)
 4012290:	218cd83a 	srl	r6,r4,r6
 4012294:	10800544 	addi	r2,r2,21
 4012298:	9084983a 	sll	r2,r18,r2
 401229c:	1184b03a 	or	r2,r2,r6
 40122a0:	dfc00517 	ldw	ra,20(sp)
 40122a4:	dd000417 	ldw	r20,16(sp)
 40122a8:	dcc00317 	ldw	r19,12(sp)
 40122ac:	dc800217 	ldw	r18,8(sp)
 40122b0:	dc400117 	ldw	r17,4(sp)
 40122b4:	dc000017 	ldw	r16,0(sp)
 40122b8:	dec00604 	addi	sp,sp,24
 40122bc:	f800283a 	ret
 40122c0:	8cc00f2e 	bgeu	r17,r19,4012300 <__b2d+0xe0>
 40122c4:	117ffd44 	addi	r5,r2,-11
 40122c8:	80bffe17 	ldw	r2,-8(r16)
 40122cc:	28000e26 	beq	r5,zero,4012308 <__b2d+0xe8>
 40122d0:	1949c83a 	sub	r4,r3,r5
 40122d4:	9164983a 	sll	r18,r18,r5
 40122d8:	1106d83a 	srl	r3,r2,r4
 40122dc:	81bffe04 	addi	r6,r16,-8
 40122e0:	948ffc34 	orhi	r18,r18,16368
 40122e4:	90c6b03a 	or	r3,r18,r3
 40122e8:	89800e2e 	bgeu	r17,r6,4012324 <__b2d+0x104>
 40122ec:	81bffd17 	ldw	r6,-12(r16)
 40122f0:	1144983a 	sll	r2,r2,r5
 40122f4:	310ad83a 	srl	r5,r6,r4
 40122f8:	2884b03a 	or	r2,r5,r2
 40122fc:	003fe806 	br	40122a0 <__alt_data_end+0xfc0122a0>
 4012300:	10bffd44 	addi	r2,r2,-11
 4012304:	1000041e 	bne	r2,zero,4012318 <__b2d+0xf8>
 4012308:	90cffc34 	orhi	r3,r18,16368
 401230c:	003fe406 	br	40122a0 <__alt_data_end+0xfc0122a0>
 4012310:	000d883a 	mov	r6,zero
 4012314:	003fdf06 	br	4012294 <__alt_data_end+0xfc012294>
 4012318:	90a4983a 	sll	r18,r18,r2
 401231c:	0005883a 	mov	r2,zero
 4012320:	003ff906 	br	4012308 <__alt_data_end+0xfc012308>
 4012324:	1144983a 	sll	r2,r2,r5
 4012328:	003fdd06 	br	40122a0 <__alt_data_end+0xfc0122a0>

0401232c <__d2b>:
 401232c:	defff804 	addi	sp,sp,-32
 4012330:	dc000215 	stw	r16,8(sp)
 4012334:	3021883a 	mov	r16,r6
 4012338:	dc400315 	stw	r17,12(sp)
 401233c:	8022907a 	slli	r17,r16,1
 4012340:	dd000615 	stw	r20,24(sp)
 4012344:	2829883a 	mov	r20,r5
 4012348:	01400044 	movi	r5,1
 401234c:	dcc00515 	stw	r19,20(sp)
 4012350:	dc800415 	stw	r18,16(sp)
 4012354:	dfc00715 	stw	ra,28(sp)
 4012358:	3825883a 	mov	r18,r7
 401235c:	8822d57a 	srli	r17,r17,21
 4012360:	40116980 	call	4011698 <_Balloc>
 4012364:	1027883a 	mov	r19,r2
 4012368:	00800434 	movhi	r2,16
 401236c:	10bfffc4 	addi	r2,r2,-1
 4012370:	808c703a 	and	r6,r16,r2
 4012374:	88000126 	beq	r17,zero,401237c <__d2b+0x50>
 4012378:	31800434 	orhi	r6,r6,16
 401237c:	d9800015 	stw	r6,0(sp)
 4012380:	a0002426 	beq	r20,zero,4012414 <__d2b+0xe8>
 4012384:	d9000104 	addi	r4,sp,4
 4012388:	dd000115 	stw	r20,4(sp)
 401238c:	40119f40 	call	40119f4 <__lo0bits>
 4012390:	d8c00017 	ldw	r3,0(sp)
 4012394:	10002f1e 	bne	r2,zero,4012454 <__d2b+0x128>
 4012398:	d9000117 	ldw	r4,4(sp)
 401239c:	99000515 	stw	r4,20(r19)
 40123a0:	1821003a 	cmpeq	r16,r3,zero
 40123a4:	01000084 	movi	r4,2
 40123a8:	2421c83a 	sub	r16,r4,r16
 40123ac:	98c00615 	stw	r3,24(r19)
 40123b0:	9c000415 	stw	r16,16(r19)
 40123b4:	88001f1e 	bne	r17,zero,4012434 <__d2b+0x108>
 40123b8:	10bef384 	addi	r2,r2,-1074
 40123bc:	90800015 	stw	r2,0(r18)
 40123c0:	00900034 	movhi	r2,16384
 40123c4:	10bfffc4 	addi	r2,r2,-1
 40123c8:	8085883a 	add	r2,r16,r2
 40123cc:	1085883a 	add	r2,r2,r2
 40123d0:	1085883a 	add	r2,r2,r2
 40123d4:	9885883a 	add	r2,r19,r2
 40123d8:	11000517 	ldw	r4,20(r2)
 40123dc:	8020917a 	slli	r16,r16,5
 40123e0:	401198c0 	call	401198c <__hi0bits>
 40123e4:	d8c00817 	ldw	r3,32(sp)
 40123e8:	8085c83a 	sub	r2,r16,r2
 40123ec:	18800015 	stw	r2,0(r3)
 40123f0:	9805883a 	mov	r2,r19
 40123f4:	dfc00717 	ldw	ra,28(sp)
 40123f8:	dd000617 	ldw	r20,24(sp)
 40123fc:	dcc00517 	ldw	r19,20(sp)
 4012400:	dc800417 	ldw	r18,16(sp)
 4012404:	dc400317 	ldw	r17,12(sp)
 4012408:	dc000217 	ldw	r16,8(sp)
 401240c:	dec00804 	addi	sp,sp,32
 4012410:	f800283a 	ret
 4012414:	d809883a 	mov	r4,sp
 4012418:	40119f40 	call	40119f4 <__lo0bits>
 401241c:	d8c00017 	ldw	r3,0(sp)
 4012420:	04000044 	movi	r16,1
 4012424:	9c000415 	stw	r16,16(r19)
 4012428:	98c00515 	stw	r3,20(r19)
 401242c:	10800804 	addi	r2,r2,32
 4012430:	883fe126 	beq	r17,zero,40123b8 <__alt_data_end+0xfc0123b8>
 4012434:	00c00d44 	movi	r3,53
 4012438:	8c7ef344 	addi	r17,r17,-1075
 401243c:	88a3883a 	add	r17,r17,r2
 4012440:	1885c83a 	sub	r2,r3,r2
 4012444:	d8c00817 	ldw	r3,32(sp)
 4012448:	94400015 	stw	r17,0(r18)
 401244c:	18800015 	stw	r2,0(r3)
 4012450:	003fe706 	br	40123f0 <__alt_data_end+0xfc0123f0>
 4012454:	01000804 	movi	r4,32
 4012458:	2089c83a 	sub	r4,r4,r2
 401245c:	1908983a 	sll	r4,r3,r4
 4012460:	d9400117 	ldw	r5,4(sp)
 4012464:	1886d83a 	srl	r3,r3,r2
 4012468:	2148b03a 	or	r4,r4,r5
 401246c:	99000515 	stw	r4,20(r19)
 4012470:	d8c00015 	stw	r3,0(sp)
 4012474:	003fca06 	br	40123a0 <__alt_data_end+0xfc0123a0>

04012478 <__ratio>:
 4012478:	defff904 	addi	sp,sp,-28
 401247c:	dc400315 	stw	r17,12(sp)
 4012480:	2823883a 	mov	r17,r5
 4012484:	d9400104 	addi	r5,sp,4
 4012488:	dfc00615 	stw	ra,24(sp)
 401248c:	dcc00515 	stw	r19,20(sp)
 4012490:	dc800415 	stw	r18,16(sp)
 4012494:	2027883a 	mov	r19,r4
 4012498:	dc000215 	stw	r16,8(sp)
 401249c:	40122200 	call	4012220 <__b2d>
 40124a0:	d80b883a 	mov	r5,sp
 40124a4:	8809883a 	mov	r4,r17
 40124a8:	1025883a 	mov	r18,r2
 40124ac:	1821883a 	mov	r16,r3
 40124b0:	40122200 	call	4012220 <__b2d>
 40124b4:	8a000417 	ldw	r8,16(r17)
 40124b8:	99000417 	ldw	r4,16(r19)
 40124bc:	d9400117 	ldw	r5,4(sp)
 40124c0:	2209c83a 	sub	r4,r4,r8
 40124c4:	2010917a 	slli	r8,r4,5
 40124c8:	d9000017 	ldw	r4,0(sp)
 40124cc:	2909c83a 	sub	r4,r5,r4
 40124d0:	4109883a 	add	r4,r8,r4
 40124d4:	01000e0e 	bge	zero,r4,4012510 <__ratio+0x98>
 40124d8:	2008953a 	slli	r4,r4,20
 40124dc:	2421883a 	add	r16,r4,r16
 40124e0:	100d883a 	mov	r6,r2
 40124e4:	180f883a 	mov	r7,r3
 40124e8:	9009883a 	mov	r4,r18
 40124ec:	800b883a 	mov	r5,r16
 40124f0:	40160800 	call	4016080 <__divdf3>
 40124f4:	dfc00617 	ldw	ra,24(sp)
 40124f8:	dcc00517 	ldw	r19,20(sp)
 40124fc:	dc800417 	ldw	r18,16(sp)
 4012500:	dc400317 	ldw	r17,12(sp)
 4012504:	dc000217 	ldw	r16,8(sp)
 4012508:	dec00704 	addi	sp,sp,28
 401250c:	f800283a 	ret
 4012510:	2008953a 	slli	r4,r4,20
 4012514:	1907c83a 	sub	r3,r3,r4
 4012518:	003ff106 	br	40124e0 <__alt_data_end+0xfc0124e0>

0401251c <_mprec_log10>:
 401251c:	defffe04 	addi	sp,sp,-8
 4012520:	dc000015 	stw	r16,0(sp)
 4012524:	dfc00115 	stw	ra,4(sp)
 4012528:	008005c4 	movi	r2,23
 401252c:	2021883a 	mov	r16,r4
 4012530:	11000d0e 	bge	r2,r4,4012568 <_mprec_log10+0x4c>
 4012534:	0005883a 	mov	r2,zero
 4012538:	00cffc34 	movhi	r3,16368
 401253c:	843fffc4 	addi	r16,r16,-1
 4012540:	000d883a 	mov	r6,zero
 4012544:	01d00934 	movhi	r7,16420
 4012548:	1009883a 	mov	r4,r2
 401254c:	180b883a 	mov	r5,r3
 4012550:	4016bc00 	call	4016bc0 <__muldf3>
 4012554:	803ff91e 	bne	r16,zero,401253c <__alt_data_end+0xfc01253c>
 4012558:	dfc00117 	ldw	ra,4(sp)
 401255c:	dc000017 	ldw	r16,0(sp)
 4012560:	dec00204 	addi	sp,sp,8
 4012564:	f800283a 	ret
 4012568:	202090fa 	slli	r16,r4,3
 401256c:	008100b4 	movhi	r2,1026
 4012570:	10b0cb04 	addi	r2,r2,-15572
 4012574:	1421883a 	add	r16,r2,r16
 4012578:	80800017 	ldw	r2,0(r16)
 401257c:	80c00117 	ldw	r3,4(r16)
 4012580:	dfc00117 	ldw	ra,4(sp)
 4012584:	dc000017 	ldw	r16,0(sp)
 4012588:	dec00204 	addi	sp,sp,8
 401258c:	f800283a 	ret

04012590 <__copybits>:
 4012590:	297fffc4 	addi	r5,r5,-1
 4012594:	280fd17a 	srai	r7,r5,5
 4012598:	30c00417 	ldw	r3,16(r6)
 401259c:	30800504 	addi	r2,r6,20
 40125a0:	39c00044 	addi	r7,r7,1
 40125a4:	18c7883a 	add	r3,r3,r3
 40125a8:	39cf883a 	add	r7,r7,r7
 40125ac:	18c7883a 	add	r3,r3,r3
 40125b0:	39cf883a 	add	r7,r7,r7
 40125b4:	10c7883a 	add	r3,r2,r3
 40125b8:	21cf883a 	add	r7,r4,r7
 40125bc:	10c00d2e 	bgeu	r2,r3,40125f4 <__copybits+0x64>
 40125c0:	200b883a 	mov	r5,r4
 40125c4:	12000017 	ldw	r8,0(r2)
 40125c8:	29400104 	addi	r5,r5,4
 40125cc:	10800104 	addi	r2,r2,4
 40125d0:	2a3fff15 	stw	r8,-4(r5)
 40125d4:	10fffb36 	bltu	r2,r3,40125c4 <__alt_data_end+0xfc0125c4>
 40125d8:	1985c83a 	sub	r2,r3,r6
 40125dc:	10bffac4 	addi	r2,r2,-21
 40125e0:	1004d0ba 	srli	r2,r2,2
 40125e4:	10800044 	addi	r2,r2,1
 40125e8:	1085883a 	add	r2,r2,r2
 40125ec:	1085883a 	add	r2,r2,r2
 40125f0:	2089883a 	add	r4,r4,r2
 40125f4:	21c0032e 	bgeu	r4,r7,4012604 <__copybits+0x74>
 40125f8:	20000015 	stw	zero,0(r4)
 40125fc:	21000104 	addi	r4,r4,4
 4012600:	21fffd36 	bltu	r4,r7,40125f8 <__alt_data_end+0xfc0125f8>
 4012604:	f800283a 	ret

04012608 <__any_on>:
 4012608:	20c00417 	ldw	r3,16(r4)
 401260c:	2805d17a 	srai	r2,r5,5
 4012610:	21000504 	addi	r4,r4,20
 4012614:	18800d0e 	bge	r3,r2,401264c <__any_on+0x44>
 4012618:	18c7883a 	add	r3,r3,r3
 401261c:	18c7883a 	add	r3,r3,r3
 4012620:	20c7883a 	add	r3,r4,r3
 4012624:	20c0192e 	bgeu	r4,r3,401268c <__any_on+0x84>
 4012628:	18bfff17 	ldw	r2,-4(r3)
 401262c:	18ffff04 	addi	r3,r3,-4
 4012630:	1000041e 	bne	r2,zero,4012644 <__any_on+0x3c>
 4012634:	20c0142e 	bgeu	r4,r3,4012688 <__any_on+0x80>
 4012638:	18ffff04 	addi	r3,r3,-4
 401263c:	19400017 	ldw	r5,0(r3)
 4012640:	283ffc26 	beq	r5,zero,4012634 <__alt_data_end+0xfc012634>
 4012644:	00800044 	movi	r2,1
 4012648:	f800283a 	ret
 401264c:	10c00a0e 	bge	r2,r3,4012678 <__any_on+0x70>
 4012650:	1085883a 	add	r2,r2,r2
 4012654:	1085883a 	add	r2,r2,r2
 4012658:	294007cc 	andi	r5,r5,31
 401265c:	2087883a 	add	r3,r4,r2
 4012660:	283ff026 	beq	r5,zero,4012624 <__alt_data_end+0xfc012624>
 4012664:	19800017 	ldw	r6,0(r3)
 4012668:	3144d83a 	srl	r2,r6,r5
 401266c:	114a983a 	sll	r5,r2,r5
 4012670:	317ff41e 	bne	r6,r5,4012644 <__alt_data_end+0xfc012644>
 4012674:	003feb06 	br	4012624 <__alt_data_end+0xfc012624>
 4012678:	1085883a 	add	r2,r2,r2
 401267c:	1085883a 	add	r2,r2,r2
 4012680:	2087883a 	add	r3,r4,r2
 4012684:	003fe706 	br	4012624 <__alt_data_end+0xfc012624>
 4012688:	f800283a 	ret
 401268c:	0005883a 	mov	r2,zero
 4012690:	f800283a 	ret

04012694 <_realloc_r>:
 4012694:	defff604 	addi	sp,sp,-40
 4012698:	dc800215 	stw	r18,8(sp)
 401269c:	dfc00915 	stw	ra,36(sp)
 40126a0:	df000815 	stw	fp,32(sp)
 40126a4:	ddc00715 	stw	r23,28(sp)
 40126a8:	dd800615 	stw	r22,24(sp)
 40126ac:	dd400515 	stw	r21,20(sp)
 40126b0:	dd000415 	stw	r20,16(sp)
 40126b4:	dcc00315 	stw	r19,12(sp)
 40126b8:	dc400115 	stw	r17,4(sp)
 40126bc:	dc000015 	stw	r16,0(sp)
 40126c0:	3025883a 	mov	r18,r6
 40126c4:	2800b726 	beq	r5,zero,40129a4 <_realloc_r+0x310>
 40126c8:	282b883a 	mov	r21,r5
 40126cc:	2029883a 	mov	r20,r4
 40126d0:	40185780 	call	4018578 <__malloc_lock>
 40126d4:	a8bfff17 	ldw	r2,-4(r21)
 40126d8:	043fff04 	movi	r16,-4
 40126dc:	90c002c4 	addi	r3,r18,11
 40126e0:	01000584 	movi	r4,22
 40126e4:	acfffe04 	addi	r19,r21,-8
 40126e8:	1420703a 	and	r16,r2,r16
 40126ec:	20c0332e 	bgeu	r4,r3,40127bc <_realloc_r+0x128>
 40126f0:	047ffe04 	movi	r17,-8
 40126f4:	1c62703a 	and	r17,r3,r17
 40126f8:	8807883a 	mov	r3,r17
 40126fc:	88005816 	blt	r17,zero,4012860 <_realloc_r+0x1cc>
 4012700:	8c805736 	bltu	r17,r18,4012860 <_realloc_r+0x1cc>
 4012704:	80c0300e 	bge	r16,r3,40127c8 <_realloc_r+0x134>
 4012708:	070100b4 	movhi	fp,1026
 401270c:	e71e2704 	addi	fp,fp,30876
 4012710:	e1c00217 	ldw	r7,8(fp)
 4012714:	9c09883a 	add	r4,r19,r16
 4012718:	22000117 	ldw	r8,4(r4)
 401271c:	21c06326 	beq	r4,r7,40128ac <_realloc_r+0x218>
 4012720:	017fff84 	movi	r5,-2
 4012724:	414a703a 	and	r5,r8,r5
 4012728:	214b883a 	add	r5,r4,r5
 401272c:	29800117 	ldw	r6,4(r5)
 4012730:	3180004c 	andi	r6,r6,1
 4012734:	30003f26 	beq	r6,zero,4012834 <_realloc_r+0x1a0>
 4012738:	1080004c 	andi	r2,r2,1
 401273c:	10008326 	beq	r2,zero,401294c <_realloc_r+0x2b8>
 4012740:	900b883a 	mov	r5,r18
 4012744:	a009883a 	mov	r4,r20
 4012748:	400b3480 	call	400b348 <_malloc_r>
 401274c:	1025883a 	mov	r18,r2
 4012750:	10011e26 	beq	r2,zero,4012bcc <_realloc_r+0x538>
 4012754:	a93fff17 	ldw	r4,-4(r21)
 4012758:	10fffe04 	addi	r3,r2,-8
 401275c:	00bfff84 	movi	r2,-2
 4012760:	2084703a 	and	r2,r4,r2
 4012764:	9885883a 	add	r2,r19,r2
 4012768:	1880ee26 	beq	r3,r2,4012b24 <_realloc_r+0x490>
 401276c:	81bfff04 	addi	r6,r16,-4
 4012770:	00800904 	movi	r2,36
 4012774:	1180b836 	bltu	r2,r6,4012a58 <_realloc_r+0x3c4>
 4012778:	00c004c4 	movi	r3,19
 401277c:	19809636 	bltu	r3,r6,40129d8 <_realloc_r+0x344>
 4012780:	9005883a 	mov	r2,r18
 4012784:	a807883a 	mov	r3,r21
 4012788:	19000017 	ldw	r4,0(r3)
 401278c:	11000015 	stw	r4,0(r2)
 4012790:	19000117 	ldw	r4,4(r3)
 4012794:	11000115 	stw	r4,4(r2)
 4012798:	18c00217 	ldw	r3,8(r3)
 401279c:	10c00215 	stw	r3,8(r2)
 40127a0:	a80b883a 	mov	r5,r21
 40127a4:	a009883a 	mov	r4,r20
 40127a8:	401086c0 	call	401086c <_free_r>
 40127ac:	a009883a 	mov	r4,r20
 40127b0:	401859c0 	call	401859c <__malloc_unlock>
 40127b4:	9005883a 	mov	r2,r18
 40127b8:	00001206 	br	4012804 <_realloc_r+0x170>
 40127bc:	00c00404 	movi	r3,16
 40127c0:	1823883a 	mov	r17,r3
 40127c4:	003fce06 	br	4012700 <__alt_data_end+0xfc012700>
 40127c8:	a825883a 	mov	r18,r21
 40127cc:	8445c83a 	sub	r2,r16,r17
 40127d0:	00c003c4 	movi	r3,15
 40127d4:	18802636 	bltu	r3,r2,4012870 <_realloc_r+0x1dc>
 40127d8:	99800117 	ldw	r6,4(r19)
 40127dc:	9c07883a 	add	r3,r19,r16
 40127e0:	3180004c 	andi	r6,r6,1
 40127e4:	3420b03a 	or	r16,r6,r16
 40127e8:	9c000115 	stw	r16,4(r19)
 40127ec:	18800117 	ldw	r2,4(r3)
 40127f0:	10800054 	ori	r2,r2,1
 40127f4:	18800115 	stw	r2,4(r3)
 40127f8:	a009883a 	mov	r4,r20
 40127fc:	401859c0 	call	401859c <__malloc_unlock>
 4012800:	9005883a 	mov	r2,r18
 4012804:	dfc00917 	ldw	ra,36(sp)
 4012808:	df000817 	ldw	fp,32(sp)
 401280c:	ddc00717 	ldw	r23,28(sp)
 4012810:	dd800617 	ldw	r22,24(sp)
 4012814:	dd400517 	ldw	r21,20(sp)
 4012818:	dd000417 	ldw	r20,16(sp)
 401281c:	dcc00317 	ldw	r19,12(sp)
 4012820:	dc800217 	ldw	r18,8(sp)
 4012824:	dc400117 	ldw	r17,4(sp)
 4012828:	dc000017 	ldw	r16,0(sp)
 401282c:	dec00a04 	addi	sp,sp,40
 4012830:	f800283a 	ret
 4012834:	017fff04 	movi	r5,-4
 4012838:	414a703a 	and	r5,r8,r5
 401283c:	814d883a 	add	r6,r16,r5
 4012840:	30c01f16 	blt	r6,r3,40128c0 <_realloc_r+0x22c>
 4012844:	20800317 	ldw	r2,12(r4)
 4012848:	20c00217 	ldw	r3,8(r4)
 401284c:	a825883a 	mov	r18,r21
 4012850:	3021883a 	mov	r16,r6
 4012854:	18800315 	stw	r2,12(r3)
 4012858:	10c00215 	stw	r3,8(r2)
 401285c:	003fdb06 	br	40127cc <__alt_data_end+0xfc0127cc>
 4012860:	00800304 	movi	r2,12
 4012864:	a0800015 	stw	r2,0(r20)
 4012868:	0005883a 	mov	r2,zero
 401286c:	003fe506 	br	4012804 <__alt_data_end+0xfc012804>
 4012870:	98c00117 	ldw	r3,4(r19)
 4012874:	9c4b883a 	add	r5,r19,r17
 4012878:	11000054 	ori	r4,r2,1
 401287c:	18c0004c 	andi	r3,r3,1
 4012880:	1c62b03a 	or	r17,r3,r17
 4012884:	9c400115 	stw	r17,4(r19)
 4012888:	29000115 	stw	r4,4(r5)
 401288c:	2885883a 	add	r2,r5,r2
 4012890:	10c00117 	ldw	r3,4(r2)
 4012894:	29400204 	addi	r5,r5,8
 4012898:	a009883a 	mov	r4,r20
 401289c:	18c00054 	ori	r3,r3,1
 40128a0:	10c00115 	stw	r3,4(r2)
 40128a4:	401086c0 	call	401086c <_free_r>
 40128a8:	003fd306 	br	40127f8 <__alt_data_end+0xfc0127f8>
 40128ac:	017fff04 	movi	r5,-4
 40128b0:	414a703a 	and	r5,r8,r5
 40128b4:	89800404 	addi	r6,r17,16
 40128b8:	8151883a 	add	r8,r16,r5
 40128bc:	4180590e 	bge	r8,r6,4012a24 <_realloc_r+0x390>
 40128c0:	1080004c 	andi	r2,r2,1
 40128c4:	103f9e1e 	bne	r2,zero,4012740 <__alt_data_end+0xfc012740>
 40128c8:	adbffe17 	ldw	r22,-8(r21)
 40128cc:	00bfff04 	movi	r2,-4
 40128d0:	9dadc83a 	sub	r22,r19,r22
 40128d4:	b1800117 	ldw	r6,4(r22)
 40128d8:	3084703a 	and	r2,r6,r2
 40128dc:	20002026 	beq	r4,zero,4012960 <_realloc_r+0x2cc>
 40128e0:	80af883a 	add	r23,r16,r2
 40128e4:	b96f883a 	add	r23,r23,r5
 40128e8:	21c05f26 	beq	r4,r7,4012a68 <_realloc_r+0x3d4>
 40128ec:	b8c01c16 	blt	r23,r3,4012960 <_realloc_r+0x2cc>
 40128f0:	20800317 	ldw	r2,12(r4)
 40128f4:	20c00217 	ldw	r3,8(r4)
 40128f8:	81bfff04 	addi	r6,r16,-4
 40128fc:	01000904 	movi	r4,36
 4012900:	18800315 	stw	r2,12(r3)
 4012904:	10c00215 	stw	r3,8(r2)
 4012908:	b0c00217 	ldw	r3,8(r22)
 401290c:	b0800317 	ldw	r2,12(r22)
 4012910:	b4800204 	addi	r18,r22,8
 4012914:	18800315 	stw	r2,12(r3)
 4012918:	10c00215 	stw	r3,8(r2)
 401291c:	21801b36 	bltu	r4,r6,401298c <_realloc_r+0x2f8>
 4012920:	008004c4 	movi	r2,19
 4012924:	1180352e 	bgeu	r2,r6,40129fc <_realloc_r+0x368>
 4012928:	a8800017 	ldw	r2,0(r21)
 401292c:	b0800215 	stw	r2,8(r22)
 4012930:	a8800117 	ldw	r2,4(r21)
 4012934:	b0800315 	stw	r2,12(r22)
 4012938:	008006c4 	movi	r2,27
 401293c:	11807f36 	bltu	r2,r6,4012b3c <_realloc_r+0x4a8>
 4012940:	b0800404 	addi	r2,r22,16
 4012944:	ad400204 	addi	r21,r21,8
 4012948:	00002d06 	br	4012a00 <_realloc_r+0x36c>
 401294c:	adbffe17 	ldw	r22,-8(r21)
 4012950:	00bfff04 	movi	r2,-4
 4012954:	9dadc83a 	sub	r22,r19,r22
 4012958:	b1000117 	ldw	r4,4(r22)
 401295c:	2084703a 	and	r2,r4,r2
 4012960:	b03f7726 	beq	r22,zero,4012740 <__alt_data_end+0xfc012740>
 4012964:	80af883a 	add	r23,r16,r2
 4012968:	b8ff7516 	blt	r23,r3,4012740 <__alt_data_end+0xfc012740>
 401296c:	b0800317 	ldw	r2,12(r22)
 4012970:	b0c00217 	ldw	r3,8(r22)
 4012974:	81bfff04 	addi	r6,r16,-4
 4012978:	01000904 	movi	r4,36
 401297c:	18800315 	stw	r2,12(r3)
 4012980:	10c00215 	stw	r3,8(r2)
 4012984:	b4800204 	addi	r18,r22,8
 4012988:	21bfe52e 	bgeu	r4,r6,4012920 <__alt_data_end+0xfc012920>
 401298c:	a80b883a 	mov	r5,r21
 4012990:	9009883a 	mov	r4,r18
 4012994:	401153c0 	call	401153c <memmove>
 4012998:	b821883a 	mov	r16,r23
 401299c:	b027883a 	mov	r19,r22
 40129a0:	003f8a06 	br	40127cc <__alt_data_end+0xfc0127cc>
 40129a4:	300b883a 	mov	r5,r6
 40129a8:	dfc00917 	ldw	ra,36(sp)
 40129ac:	df000817 	ldw	fp,32(sp)
 40129b0:	ddc00717 	ldw	r23,28(sp)
 40129b4:	dd800617 	ldw	r22,24(sp)
 40129b8:	dd400517 	ldw	r21,20(sp)
 40129bc:	dd000417 	ldw	r20,16(sp)
 40129c0:	dcc00317 	ldw	r19,12(sp)
 40129c4:	dc800217 	ldw	r18,8(sp)
 40129c8:	dc400117 	ldw	r17,4(sp)
 40129cc:	dc000017 	ldw	r16,0(sp)
 40129d0:	dec00a04 	addi	sp,sp,40
 40129d4:	400b3481 	jmpi	400b348 <_malloc_r>
 40129d8:	a8c00017 	ldw	r3,0(r21)
 40129dc:	90c00015 	stw	r3,0(r18)
 40129e0:	a8c00117 	ldw	r3,4(r21)
 40129e4:	90c00115 	stw	r3,4(r18)
 40129e8:	00c006c4 	movi	r3,27
 40129ec:	19804536 	bltu	r3,r6,4012b04 <_realloc_r+0x470>
 40129f0:	90800204 	addi	r2,r18,8
 40129f4:	a8c00204 	addi	r3,r21,8
 40129f8:	003f6306 	br	4012788 <__alt_data_end+0xfc012788>
 40129fc:	9005883a 	mov	r2,r18
 4012a00:	a8c00017 	ldw	r3,0(r21)
 4012a04:	b821883a 	mov	r16,r23
 4012a08:	b027883a 	mov	r19,r22
 4012a0c:	10c00015 	stw	r3,0(r2)
 4012a10:	a8c00117 	ldw	r3,4(r21)
 4012a14:	10c00115 	stw	r3,4(r2)
 4012a18:	a8c00217 	ldw	r3,8(r21)
 4012a1c:	10c00215 	stw	r3,8(r2)
 4012a20:	003f6a06 	br	40127cc <__alt_data_end+0xfc0127cc>
 4012a24:	9c67883a 	add	r19,r19,r17
 4012a28:	4445c83a 	sub	r2,r8,r17
 4012a2c:	e4c00215 	stw	r19,8(fp)
 4012a30:	10800054 	ori	r2,r2,1
 4012a34:	98800115 	stw	r2,4(r19)
 4012a38:	a8bfff17 	ldw	r2,-4(r21)
 4012a3c:	a009883a 	mov	r4,r20
 4012a40:	1080004c 	andi	r2,r2,1
 4012a44:	1462b03a 	or	r17,r2,r17
 4012a48:	ac7fff15 	stw	r17,-4(r21)
 4012a4c:	401859c0 	call	401859c <__malloc_unlock>
 4012a50:	a805883a 	mov	r2,r21
 4012a54:	003f6b06 	br	4012804 <__alt_data_end+0xfc012804>
 4012a58:	a80b883a 	mov	r5,r21
 4012a5c:	9009883a 	mov	r4,r18
 4012a60:	401153c0 	call	401153c <memmove>
 4012a64:	003f4e06 	br	40127a0 <__alt_data_end+0xfc0127a0>
 4012a68:	89000404 	addi	r4,r17,16
 4012a6c:	b93fbc16 	blt	r23,r4,4012960 <__alt_data_end+0xfc012960>
 4012a70:	b0800317 	ldw	r2,12(r22)
 4012a74:	b0c00217 	ldw	r3,8(r22)
 4012a78:	81bfff04 	addi	r6,r16,-4
 4012a7c:	01000904 	movi	r4,36
 4012a80:	18800315 	stw	r2,12(r3)
 4012a84:	10c00215 	stw	r3,8(r2)
 4012a88:	b4800204 	addi	r18,r22,8
 4012a8c:	21804336 	bltu	r4,r6,4012b9c <_realloc_r+0x508>
 4012a90:	008004c4 	movi	r2,19
 4012a94:	11803f2e 	bgeu	r2,r6,4012b94 <_realloc_r+0x500>
 4012a98:	a8800017 	ldw	r2,0(r21)
 4012a9c:	b0800215 	stw	r2,8(r22)
 4012aa0:	a8800117 	ldw	r2,4(r21)
 4012aa4:	b0800315 	stw	r2,12(r22)
 4012aa8:	008006c4 	movi	r2,27
 4012aac:	11803f36 	bltu	r2,r6,4012bac <_realloc_r+0x518>
 4012ab0:	b0800404 	addi	r2,r22,16
 4012ab4:	ad400204 	addi	r21,r21,8
 4012ab8:	a8c00017 	ldw	r3,0(r21)
 4012abc:	10c00015 	stw	r3,0(r2)
 4012ac0:	a8c00117 	ldw	r3,4(r21)
 4012ac4:	10c00115 	stw	r3,4(r2)
 4012ac8:	a8c00217 	ldw	r3,8(r21)
 4012acc:	10c00215 	stw	r3,8(r2)
 4012ad0:	b447883a 	add	r3,r22,r17
 4012ad4:	bc45c83a 	sub	r2,r23,r17
 4012ad8:	e0c00215 	stw	r3,8(fp)
 4012adc:	10800054 	ori	r2,r2,1
 4012ae0:	18800115 	stw	r2,4(r3)
 4012ae4:	b0800117 	ldw	r2,4(r22)
 4012ae8:	a009883a 	mov	r4,r20
 4012aec:	1080004c 	andi	r2,r2,1
 4012af0:	1462b03a 	or	r17,r2,r17
 4012af4:	b4400115 	stw	r17,4(r22)
 4012af8:	401859c0 	call	401859c <__malloc_unlock>
 4012afc:	9005883a 	mov	r2,r18
 4012b00:	003f4006 	br	4012804 <__alt_data_end+0xfc012804>
 4012b04:	a8c00217 	ldw	r3,8(r21)
 4012b08:	90c00215 	stw	r3,8(r18)
 4012b0c:	a8c00317 	ldw	r3,12(r21)
 4012b10:	90c00315 	stw	r3,12(r18)
 4012b14:	30801126 	beq	r6,r2,4012b5c <_realloc_r+0x4c8>
 4012b18:	90800404 	addi	r2,r18,16
 4012b1c:	a8c00404 	addi	r3,r21,16
 4012b20:	003f1906 	br	4012788 <__alt_data_end+0xfc012788>
 4012b24:	90ffff17 	ldw	r3,-4(r18)
 4012b28:	00bfff04 	movi	r2,-4
 4012b2c:	a825883a 	mov	r18,r21
 4012b30:	1884703a 	and	r2,r3,r2
 4012b34:	80a1883a 	add	r16,r16,r2
 4012b38:	003f2406 	br	40127cc <__alt_data_end+0xfc0127cc>
 4012b3c:	a8800217 	ldw	r2,8(r21)
 4012b40:	b0800415 	stw	r2,16(r22)
 4012b44:	a8800317 	ldw	r2,12(r21)
 4012b48:	b0800515 	stw	r2,20(r22)
 4012b4c:	31000a26 	beq	r6,r4,4012b78 <_realloc_r+0x4e4>
 4012b50:	b0800604 	addi	r2,r22,24
 4012b54:	ad400404 	addi	r21,r21,16
 4012b58:	003fa906 	br	4012a00 <__alt_data_end+0xfc012a00>
 4012b5c:	a9000417 	ldw	r4,16(r21)
 4012b60:	90800604 	addi	r2,r18,24
 4012b64:	a8c00604 	addi	r3,r21,24
 4012b68:	91000415 	stw	r4,16(r18)
 4012b6c:	a9000517 	ldw	r4,20(r21)
 4012b70:	91000515 	stw	r4,20(r18)
 4012b74:	003f0406 	br	4012788 <__alt_data_end+0xfc012788>
 4012b78:	a8c00417 	ldw	r3,16(r21)
 4012b7c:	ad400604 	addi	r21,r21,24
 4012b80:	b0800804 	addi	r2,r22,32
 4012b84:	b0c00615 	stw	r3,24(r22)
 4012b88:	a8ffff17 	ldw	r3,-4(r21)
 4012b8c:	b0c00715 	stw	r3,28(r22)
 4012b90:	003f9b06 	br	4012a00 <__alt_data_end+0xfc012a00>
 4012b94:	9005883a 	mov	r2,r18
 4012b98:	003fc706 	br	4012ab8 <__alt_data_end+0xfc012ab8>
 4012b9c:	a80b883a 	mov	r5,r21
 4012ba0:	9009883a 	mov	r4,r18
 4012ba4:	401153c0 	call	401153c <memmove>
 4012ba8:	003fc906 	br	4012ad0 <__alt_data_end+0xfc012ad0>
 4012bac:	a8800217 	ldw	r2,8(r21)
 4012bb0:	b0800415 	stw	r2,16(r22)
 4012bb4:	a8800317 	ldw	r2,12(r21)
 4012bb8:	b0800515 	stw	r2,20(r22)
 4012bbc:	31000726 	beq	r6,r4,4012bdc <_realloc_r+0x548>
 4012bc0:	b0800604 	addi	r2,r22,24
 4012bc4:	ad400404 	addi	r21,r21,16
 4012bc8:	003fbb06 	br	4012ab8 <__alt_data_end+0xfc012ab8>
 4012bcc:	a009883a 	mov	r4,r20
 4012bd0:	401859c0 	call	401859c <__malloc_unlock>
 4012bd4:	0005883a 	mov	r2,zero
 4012bd8:	003f0a06 	br	4012804 <__alt_data_end+0xfc012804>
 4012bdc:	a8c00417 	ldw	r3,16(r21)
 4012be0:	ad400604 	addi	r21,r21,24
 4012be4:	b0800804 	addi	r2,r22,32
 4012be8:	b0c00615 	stw	r3,24(r22)
 4012bec:	a8ffff17 	ldw	r3,-4(r21)
 4012bf0:	b0c00715 	stw	r3,28(r22)
 4012bf4:	003fb006 	br	4012ab8 <__alt_data_end+0xfc012ab8>

04012bf8 <__fpclassifyd>:
 4012bf8:	00a00034 	movhi	r2,32768
 4012bfc:	10bfffc4 	addi	r2,r2,-1
 4012c00:	2884703a 	and	r2,r5,r2
 4012c04:	10000726 	beq	r2,zero,4012c24 <__fpclassifyd+0x2c>
 4012c08:	00fffc34 	movhi	r3,65520
 4012c0c:	019ff834 	movhi	r6,32736
 4012c10:	28c7883a 	add	r3,r5,r3
 4012c14:	31bfffc4 	addi	r6,r6,-1
 4012c18:	30c00536 	bltu	r6,r3,4012c30 <__fpclassifyd+0x38>
 4012c1c:	00800104 	movi	r2,4
 4012c20:	f800283a 	ret
 4012c24:	2000021e 	bne	r4,zero,4012c30 <__fpclassifyd+0x38>
 4012c28:	00800084 	movi	r2,2
 4012c2c:	f800283a 	ret
 4012c30:	00dffc34 	movhi	r3,32752
 4012c34:	019ff834 	movhi	r6,32736
 4012c38:	28cb883a 	add	r5,r5,r3
 4012c3c:	31bfffc4 	addi	r6,r6,-1
 4012c40:	317ff62e 	bgeu	r6,r5,4012c1c <__alt_data_end+0xfc012c1c>
 4012c44:	01400434 	movhi	r5,16
 4012c48:	297fffc4 	addi	r5,r5,-1
 4012c4c:	28800236 	bltu	r5,r2,4012c58 <__fpclassifyd+0x60>
 4012c50:	008000c4 	movi	r2,3
 4012c54:	f800283a 	ret
 4012c58:	10c00226 	beq	r2,r3,4012c64 <__fpclassifyd+0x6c>
 4012c5c:	0005883a 	mov	r2,zero
 4012c60:	f800283a 	ret
 4012c64:	2005003a 	cmpeq	r2,r4,zero
 4012c68:	f800283a 	ret

04012c6c <__sread>:
 4012c6c:	defffe04 	addi	sp,sp,-8
 4012c70:	dc000015 	stw	r16,0(sp)
 4012c74:	2821883a 	mov	r16,r5
 4012c78:	2940038f 	ldh	r5,14(r5)
 4012c7c:	dfc00115 	stw	ra,4(sp)
 4012c80:	40149840 	call	4014984 <_read_r>
 4012c84:	10000716 	blt	r2,zero,4012ca4 <__sread+0x38>
 4012c88:	80c01417 	ldw	r3,80(r16)
 4012c8c:	1887883a 	add	r3,r3,r2
 4012c90:	80c01415 	stw	r3,80(r16)
 4012c94:	dfc00117 	ldw	ra,4(sp)
 4012c98:	dc000017 	ldw	r16,0(sp)
 4012c9c:	dec00204 	addi	sp,sp,8
 4012ca0:	f800283a 	ret
 4012ca4:	80c0030b 	ldhu	r3,12(r16)
 4012ca8:	18fbffcc 	andi	r3,r3,61439
 4012cac:	80c0030d 	sth	r3,12(r16)
 4012cb0:	dfc00117 	ldw	ra,4(sp)
 4012cb4:	dc000017 	ldw	r16,0(sp)
 4012cb8:	dec00204 	addi	sp,sp,8
 4012cbc:	f800283a 	ret

04012cc0 <__seofread>:
 4012cc0:	0005883a 	mov	r2,zero
 4012cc4:	f800283a 	ret

04012cc8 <__swrite>:
 4012cc8:	2880030b 	ldhu	r2,12(r5)
 4012ccc:	defffb04 	addi	sp,sp,-20
 4012cd0:	dcc00315 	stw	r19,12(sp)
 4012cd4:	dc800215 	stw	r18,8(sp)
 4012cd8:	dc400115 	stw	r17,4(sp)
 4012cdc:	dc000015 	stw	r16,0(sp)
 4012ce0:	dfc00415 	stw	ra,16(sp)
 4012ce4:	10c0400c 	andi	r3,r2,256
 4012ce8:	2821883a 	mov	r16,r5
 4012cec:	2023883a 	mov	r17,r4
 4012cf0:	3025883a 	mov	r18,r6
 4012cf4:	3827883a 	mov	r19,r7
 4012cf8:	18000526 	beq	r3,zero,4012d10 <__swrite+0x48>
 4012cfc:	2940038f 	ldh	r5,14(r5)
 4012d00:	01c00084 	movi	r7,2
 4012d04:	000d883a 	mov	r6,zero
 4012d08:	40149240 	call	4014924 <_lseek_r>
 4012d0c:	8080030b 	ldhu	r2,12(r16)
 4012d10:	8140038f 	ldh	r5,14(r16)
 4012d14:	10bbffcc 	andi	r2,r2,61439
 4012d18:	980f883a 	mov	r7,r19
 4012d1c:	900d883a 	mov	r6,r18
 4012d20:	8809883a 	mov	r4,r17
 4012d24:	8080030d 	sth	r2,12(r16)
 4012d28:	dfc00417 	ldw	ra,16(sp)
 4012d2c:	dcc00317 	ldw	r19,12(sp)
 4012d30:	dc800217 	ldw	r18,8(sp)
 4012d34:	dc400117 	ldw	r17,4(sp)
 4012d38:	dc000017 	ldw	r16,0(sp)
 4012d3c:	dec00504 	addi	sp,sp,20
 4012d40:	40143f01 	jmpi	40143f0 <_write_r>

04012d44 <__sseek>:
 4012d44:	defffe04 	addi	sp,sp,-8
 4012d48:	dc000015 	stw	r16,0(sp)
 4012d4c:	2821883a 	mov	r16,r5
 4012d50:	2940038f 	ldh	r5,14(r5)
 4012d54:	dfc00115 	stw	ra,4(sp)
 4012d58:	40149240 	call	4014924 <_lseek_r>
 4012d5c:	00ffffc4 	movi	r3,-1
 4012d60:	10c00826 	beq	r2,r3,4012d84 <__sseek+0x40>
 4012d64:	80c0030b 	ldhu	r3,12(r16)
 4012d68:	80801415 	stw	r2,80(r16)
 4012d6c:	18c40014 	ori	r3,r3,4096
 4012d70:	80c0030d 	sth	r3,12(r16)
 4012d74:	dfc00117 	ldw	ra,4(sp)
 4012d78:	dc000017 	ldw	r16,0(sp)
 4012d7c:	dec00204 	addi	sp,sp,8
 4012d80:	f800283a 	ret
 4012d84:	80c0030b 	ldhu	r3,12(r16)
 4012d88:	18fbffcc 	andi	r3,r3,61439
 4012d8c:	80c0030d 	sth	r3,12(r16)
 4012d90:	dfc00117 	ldw	ra,4(sp)
 4012d94:	dc000017 	ldw	r16,0(sp)
 4012d98:	dec00204 	addi	sp,sp,8
 4012d9c:	f800283a 	ret

04012da0 <__sclose>:
 4012da0:	2940038f 	ldh	r5,14(r5)
 4012da4:	40144501 	jmpi	4014450 <_close_r>

04012da8 <__sprint_r.part.0>:
 4012da8:	28801917 	ldw	r2,100(r5)
 4012dac:	defff604 	addi	sp,sp,-40
 4012db0:	dd400515 	stw	r21,20(sp)
 4012db4:	dfc00915 	stw	ra,36(sp)
 4012db8:	df000815 	stw	fp,32(sp)
 4012dbc:	ddc00715 	stw	r23,28(sp)
 4012dc0:	dd800615 	stw	r22,24(sp)
 4012dc4:	dd000415 	stw	r20,16(sp)
 4012dc8:	dcc00315 	stw	r19,12(sp)
 4012dcc:	dc800215 	stw	r18,8(sp)
 4012dd0:	dc400115 	stw	r17,4(sp)
 4012dd4:	dc000015 	stw	r16,0(sp)
 4012dd8:	1088000c 	andi	r2,r2,8192
 4012ddc:	302b883a 	mov	r21,r6
 4012de0:	10002e26 	beq	r2,zero,4012e9c <__sprint_r.part.0+0xf4>
 4012de4:	30800217 	ldw	r2,8(r6)
 4012de8:	35800017 	ldw	r22,0(r6)
 4012dec:	10002926 	beq	r2,zero,4012e94 <__sprint_r.part.0+0xec>
 4012df0:	2827883a 	mov	r19,r5
 4012df4:	2029883a 	mov	r20,r4
 4012df8:	b5c00104 	addi	r23,r22,4
 4012dfc:	04bfffc4 	movi	r18,-1
 4012e00:	bc400017 	ldw	r17,0(r23)
 4012e04:	b4000017 	ldw	r16,0(r22)
 4012e08:	0039883a 	mov	fp,zero
 4012e0c:	8822d0ba 	srli	r17,r17,2
 4012e10:	8800031e 	bne	r17,zero,4012e20 <__sprint_r.part.0+0x78>
 4012e14:	00001806 	br	4012e78 <__sprint_r.part.0+0xd0>
 4012e18:	84000104 	addi	r16,r16,4
 4012e1c:	8f001526 	beq	r17,fp,4012e74 <__sprint_r.part.0+0xcc>
 4012e20:	81400017 	ldw	r5,0(r16)
 4012e24:	980d883a 	mov	r6,r19
 4012e28:	a009883a 	mov	r4,r20
 4012e2c:	40147d00 	call	40147d0 <_fputwc_r>
 4012e30:	e7000044 	addi	fp,fp,1
 4012e34:	14bff81e 	bne	r2,r18,4012e18 <__alt_data_end+0xfc012e18>
 4012e38:	9005883a 	mov	r2,r18
 4012e3c:	a8000215 	stw	zero,8(r21)
 4012e40:	a8000115 	stw	zero,4(r21)
 4012e44:	dfc00917 	ldw	ra,36(sp)
 4012e48:	df000817 	ldw	fp,32(sp)
 4012e4c:	ddc00717 	ldw	r23,28(sp)
 4012e50:	dd800617 	ldw	r22,24(sp)
 4012e54:	dd400517 	ldw	r21,20(sp)
 4012e58:	dd000417 	ldw	r20,16(sp)
 4012e5c:	dcc00317 	ldw	r19,12(sp)
 4012e60:	dc800217 	ldw	r18,8(sp)
 4012e64:	dc400117 	ldw	r17,4(sp)
 4012e68:	dc000017 	ldw	r16,0(sp)
 4012e6c:	dec00a04 	addi	sp,sp,40
 4012e70:	f800283a 	ret
 4012e74:	a8800217 	ldw	r2,8(r21)
 4012e78:	8c63883a 	add	r17,r17,r17
 4012e7c:	8c63883a 	add	r17,r17,r17
 4012e80:	1445c83a 	sub	r2,r2,r17
 4012e84:	a8800215 	stw	r2,8(r21)
 4012e88:	b5800204 	addi	r22,r22,8
 4012e8c:	bdc00204 	addi	r23,r23,8
 4012e90:	103fdb1e 	bne	r2,zero,4012e00 <__alt_data_end+0xfc012e00>
 4012e94:	0005883a 	mov	r2,zero
 4012e98:	003fe806 	br	4012e3c <__alt_data_end+0xfc012e3c>
 4012e9c:	4010b7c0 	call	4010b7c <__sfvwrite_r>
 4012ea0:	003fe606 	br	4012e3c <__alt_data_end+0xfc012e3c>

04012ea4 <__sprint_r>:
 4012ea4:	30c00217 	ldw	r3,8(r6)
 4012ea8:	18000126 	beq	r3,zero,4012eb0 <__sprint_r+0xc>
 4012eac:	4012da81 	jmpi	4012da8 <__sprint_r.part.0>
 4012eb0:	30000115 	stw	zero,4(r6)
 4012eb4:	0005883a 	mov	r2,zero
 4012eb8:	f800283a 	ret

04012ebc <___vfiprintf_internal_r>:
 4012ebc:	deffc904 	addi	sp,sp,-220
 4012ec0:	df003515 	stw	fp,212(sp)
 4012ec4:	dd003115 	stw	r20,196(sp)
 4012ec8:	dfc03615 	stw	ra,216(sp)
 4012ecc:	ddc03415 	stw	r23,208(sp)
 4012ed0:	dd803315 	stw	r22,204(sp)
 4012ed4:	dd403215 	stw	r21,200(sp)
 4012ed8:	dcc03015 	stw	r19,192(sp)
 4012edc:	dc802f15 	stw	r18,188(sp)
 4012ee0:	dc402e15 	stw	r17,184(sp)
 4012ee4:	dc002d15 	stw	r16,180(sp)
 4012ee8:	d9002015 	stw	r4,128(sp)
 4012eec:	d9c02215 	stw	r7,136(sp)
 4012ef0:	2829883a 	mov	r20,r5
 4012ef4:	3039883a 	mov	fp,r6
 4012ef8:	20000226 	beq	r4,zero,4012f04 <___vfiprintf_internal_r+0x48>
 4012efc:	20800e17 	ldw	r2,56(r4)
 4012f00:	1000cf26 	beq	r2,zero,4013240 <___vfiprintf_internal_r+0x384>
 4012f04:	a080030b 	ldhu	r2,12(r20)
 4012f08:	10c8000c 	andi	r3,r2,8192
 4012f0c:	1800061e 	bne	r3,zero,4012f28 <___vfiprintf_internal_r+0x6c>
 4012f10:	a1001917 	ldw	r4,100(r20)
 4012f14:	00f7ffc4 	movi	r3,-8193
 4012f18:	10880014 	ori	r2,r2,8192
 4012f1c:	20c6703a 	and	r3,r4,r3
 4012f20:	a080030d 	sth	r2,12(r20)
 4012f24:	a0c01915 	stw	r3,100(r20)
 4012f28:	10c0020c 	andi	r3,r2,8
 4012f2c:	1800a926 	beq	r3,zero,40131d4 <___vfiprintf_internal_r+0x318>
 4012f30:	a0c00417 	ldw	r3,16(r20)
 4012f34:	1800a726 	beq	r3,zero,40131d4 <___vfiprintf_internal_r+0x318>
 4012f38:	1080068c 	andi	r2,r2,26
 4012f3c:	00c00284 	movi	r3,10
 4012f40:	10c0ac26 	beq	r2,r3,40131f4 <___vfiprintf_internal_r+0x338>
 4012f44:	da801a04 	addi	r10,sp,104
 4012f48:	da801e15 	stw	r10,120(sp)
 4012f4c:	d8801e17 	ldw	r2,120(sp)
 4012f50:	da8019c4 	addi	r10,sp,103
 4012f54:	058100b4 	movhi	r22,1026
 4012f58:	05c100b4 	movhi	r23,1026
 4012f5c:	da801f15 	stw	r10,124(sp)
 4012f60:	1295c83a 	sub	r10,r2,r10
 4012f64:	b5b10104 	addi	r22,r22,-15356
 4012f68:	bdf0fd04 	addi	r23,r23,-15372
 4012f6c:	dec01a15 	stw	sp,104(sp)
 4012f70:	d8001c15 	stw	zero,112(sp)
 4012f74:	d8001b15 	stw	zero,108(sp)
 4012f78:	d8002615 	stw	zero,152(sp)
 4012f7c:	d8002315 	stw	zero,140(sp)
 4012f80:	da802715 	stw	r10,156(sp)
 4012f84:	d811883a 	mov	r8,sp
 4012f88:	dd002115 	stw	r20,132(sp)
 4012f8c:	e021883a 	mov	r16,fp
 4012f90:	80800007 	ldb	r2,0(r16)
 4012f94:	1003ea26 	beq	r2,zero,4013f40 <___vfiprintf_internal_r+0x1084>
 4012f98:	00c00944 	movi	r3,37
 4012f9c:	8025883a 	mov	r18,r16
 4012fa0:	10c0021e 	bne	r2,r3,4012fac <___vfiprintf_internal_r+0xf0>
 4012fa4:	00001606 	br	4013000 <___vfiprintf_internal_r+0x144>
 4012fa8:	10c00326 	beq	r2,r3,4012fb8 <___vfiprintf_internal_r+0xfc>
 4012fac:	94800044 	addi	r18,r18,1
 4012fb0:	90800007 	ldb	r2,0(r18)
 4012fb4:	103ffc1e 	bne	r2,zero,4012fa8 <__alt_data_end+0xfc012fa8>
 4012fb8:	9423c83a 	sub	r17,r18,r16
 4012fbc:	88001026 	beq	r17,zero,4013000 <___vfiprintf_internal_r+0x144>
 4012fc0:	d8c01c17 	ldw	r3,112(sp)
 4012fc4:	d8801b17 	ldw	r2,108(sp)
 4012fc8:	44000015 	stw	r16,0(r8)
 4012fcc:	88c7883a 	add	r3,r17,r3
 4012fd0:	10800044 	addi	r2,r2,1
 4012fd4:	44400115 	stw	r17,4(r8)
 4012fd8:	d8c01c15 	stw	r3,112(sp)
 4012fdc:	d8801b15 	stw	r2,108(sp)
 4012fe0:	010001c4 	movi	r4,7
 4012fe4:	2080760e 	bge	r4,r2,40131c0 <___vfiprintf_internal_r+0x304>
 4012fe8:	1803821e 	bne	r3,zero,4013df4 <___vfiprintf_internal_r+0xf38>
 4012fec:	da802317 	ldw	r10,140(sp)
 4012ff0:	d8001b15 	stw	zero,108(sp)
 4012ff4:	d811883a 	mov	r8,sp
 4012ff8:	5455883a 	add	r10,r10,r17
 4012ffc:	da802315 	stw	r10,140(sp)
 4013000:	90800007 	ldb	r2,0(r18)
 4013004:	10044626 	beq	r2,zero,4014120 <___vfiprintf_internal_r+0x1264>
 4013008:	90c00047 	ldb	r3,1(r18)
 401300c:	94000044 	addi	r16,r18,1
 4013010:	d8001d85 	stb	zero,118(sp)
 4013014:	0009883a 	mov	r4,zero
 4013018:	000f883a 	mov	r7,zero
 401301c:	027fffc4 	movi	r9,-1
 4013020:	0023883a 	mov	r17,zero
 4013024:	0029883a 	mov	r20,zero
 4013028:	01401604 	movi	r5,88
 401302c:	01800244 	movi	r6,9
 4013030:	03400a84 	movi	r13,42
 4013034:	03001b04 	movi	r12,108
 4013038:	84000044 	addi	r16,r16,1
 401303c:	18bff804 	addi	r2,r3,-32
 4013040:	28827336 	bltu	r5,r2,4013a10 <___vfiprintf_internal_r+0xb54>
 4013044:	100490ba 	slli	r2,r2,2
 4013048:	02810074 	movhi	r10,1025
 401304c:	528c1704 	addi	r10,r10,12380
 4013050:	1285883a 	add	r2,r2,r10
 4013054:	10800017 	ldw	r2,0(r2)
 4013058:	1000683a 	jmp	r2
 401305c:	04013744 	movi	r16,1245
 4013060:	04013a10 	cmplti	r16,zero,1256
 4013064:	04013a10 	cmplti	r16,zero,1256
 4013068:	04013764 	muli	r16,zero,1245
 401306c:	04013a10 	cmplti	r16,zero,1256
 4013070:	04013a10 	cmplti	r16,zero,1256
 4013074:	04013a10 	cmplti	r16,zero,1256
 4013078:	04013a10 	cmplti	r16,zero,1256
 401307c:	04013a10 	cmplti	r16,zero,1256
 4013080:	04013a10 	cmplti	r16,zero,1256
 4013084:	0401394c 	andi	r16,zero,1253
 4013088:	04013968 	cmpgeui	r16,zero,1253
 401308c:	04013a10 	cmplti	r16,zero,1256
 4013090:	04013250 	cmplti	r16,zero,1225
 4013094:	04013978 	rdprs	r16,zero,1253
 4013098:	04013a10 	cmplti	r16,zero,1256
 401309c:	04013770 	cmpltui	r16,zero,1245
 40130a0:	0401377c 	xorhi	r16,zero,1245
 40130a4:	0401377c 	xorhi	r16,zero,1245
 40130a8:	0401377c 	xorhi	r16,zero,1245
 40130ac:	0401377c 	xorhi	r16,zero,1245
 40130b0:	0401377c 	xorhi	r16,zero,1245
 40130b4:	0401377c 	xorhi	r16,zero,1245
 40130b8:	0401377c 	xorhi	r16,zero,1245
 40130bc:	0401377c 	xorhi	r16,zero,1245
 40130c0:	0401377c 	xorhi	r16,zero,1245
 40130c4:	04013a10 	cmplti	r16,zero,1256
 40130c8:	04013a10 	cmplti	r16,zero,1256
 40130cc:	04013a10 	cmplti	r16,zero,1256
 40130d0:	04013a10 	cmplti	r16,zero,1256
 40130d4:	04013a10 	cmplti	r16,zero,1256
 40130d8:	04013a10 	cmplti	r16,zero,1256
 40130dc:	04013a10 	cmplti	r16,zero,1256
 40130e0:	04013a10 	cmplti	r16,zero,1256
 40130e4:	04013a10 	cmplti	r16,zero,1256
 40130e8:	04013a10 	cmplti	r16,zero,1256
 40130ec:	040137a8 	cmpgeui	r16,zero,1246
 40130f0:	04013a10 	cmplti	r16,zero,1256
 40130f4:	04013a10 	cmplti	r16,zero,1256
 40130f8:	04013a10 	cmplti	r16,zero,1256
 40130fc:	04013a10 	cmplti	r16,zero,1256
 4013100:	04013a10 	cmplti	r16,zero,1256
 4013104:	04013a10 	cmplti	r16,zero,1256
 4013108:	04013a10 	cmplti	r16,zero,1256
 401310c:	04013a10 	cmplti	r16,zero,1256
 4013110:	04013a10 	cmplti	r16,zero,1256
 4013114:	04013a10 	cmplti	r16,zero,1256
 4013118:	040137e0 	cmpeqi	r16,zero,1247
 401311c:	04013a10 	cmplti	r16,zero,1256
 4013120:	04013a10 	cmplti	r16,zero,1256
 4013124:	04013a10 	cmplti	r16,zero,1256
 4013128:	04013a10 	cmplti	r16,zero,1256
 401312c:	04013a10 	cmplti	r16,zero,1256
 4013130:	04013838 	rdprs	r16,zero,1248
 4013134:	04013a10 	cmplti	r16,zero,1256
 4013138:	04013a10 	cmplti	r16,zero,1256
 401313c:	040138a8 	cmpgeui	r16,zero,1250
 4013140:	04013a10 	cmplti	r16,zero,1256
 4013144:	04013a10 	cmplti	r16,zero,1256
 4013148:	04013a10 	cmplti	r16,zero,1256
 401314c:	04013a10 	cmplti	r16,zero,1256
 4013150:	04013a10 	cmplti	r16,zero,1256
 4013154:	04013a10 	cmplti	r16,zero,1256
 4013158:	04013a10 	cmplti	r16,zero,1256
 401315c:	04013a10 	cmplti	r16,zero,1256
 4013160:	04013a10 	cmplti	r16,zero,1256
 4013164:	04013a10 	cmplti	r16,zero,1256
 4013168:	04013654 	movui	r16,1241
 401316c:	04013680 	call	401368 <__reset-0x3bfec98>
 4013170:	04013a10 	cmplti	r16,zero,1256
 4013174:	04013a10 	cmplti	r16,zero,1256
 4013178:	04013a10 	cmplti	r16,zero,1256
 401317c:	040139b8 	rdprs	r16,zero,1254
 4013180:	04013680 	call	401368 <__reset-0x3bfec98>
 4013184:	04013a10 	cmplti	r16,zero,1256
 4013188:	04013a10 	cmplti	r16,zero,1256
 401318c:	04013514 	movui	r16,1236
 4013190:	04013a10 	cmplti	r16,zero,1256
 4013194:	04013524 	muli	r16,zero,1236
 4013198:	04013560 	cmpeqi	r16,zero,1237
 401319c:	0401325c 	xori	r16,zero,1225
 40131a0:	04013508 	cmpgei	r16,zero,1236
 40131a4:	04013a10 	cmplti	r16,zero,1256
 40131a8:	040138e4 	muli	r16,zero,1251
 40131ac:	04013a10 	cmplti	r16,zero,1256
 40131b0:	0401393c 	xorhi	r16,zero,1252
 40131b4:	04013a10 	cmplti	r16,zero,1256
 40131b8:	04013a10 	cmplti	r16,zero,1256
 40131bc:	04013600 	call	401360 <__reset-0x3bfeca0>
 40131c0:	42000204 	addi	r8,r8,8
 40131c4:	da802317 	ldw	r10,140(sp)
 40131c8:	5455883a 	add	r10,r10,r17
 40131cc:	da802315 	stw	r10,140(sp)
 40131d0:	003f8b06 	br	4013000 <__alt_data_end+0xfc013000>
 40131d4:	d9002017 	ldw	r4,128(sp)
 40131d8:	a00b883a 	mov	r5,r20
 40131dc:	400e7240 	call	400e724 <__swsetup_r>
 40131e0:	1003b11e 	bne	r2,zero,40140a8 <___vfiprintf_internal_r+0x11ec>
 40131e4:	a080030b 	ldhu	r2,12(r20)
 40131e8:	00c00284 	movi	r3,10
 40131ec:	1080068c 	andi	r2,r2,26
 40131f0:	10ff541e 	bne	r2,r3,4012f44 <__alt_data_end+0xfc012f44>
 40131f4:	a080038f 	ldh	r2,14(r20)
 40131f8:	103f5216 	blt	r2,zero,4012f44 <__alt_data_end+0xfc012f44>
 40131fc:	d9c02217 	ldw	r7,136(sp)
 4013200:	d9002017 	ldw	r4,128(sp)
 4013204:	e00d883a 	mov	r6,fp
 4013208:	a00b883a 	mov	r5,r20
 401320c:	40143340 	call	4014334 <__sbprintf>
 4013210:	dfc03617 	ldw	ra,216(sp)
 4013214:	df003517 	ldw	fp,212(sp)
 4013218:	ddc03417 	ldw	r23,208(sp)
 401321c:	dd803317 	ldw	r22,204(sp)
 4013220:	dd403217 	ldw	r21,200(sp)
 4013224:	dd003117 	ldw	r20,196(sp)
 4013228:	dcc03017 	ldw	r19,192(sp)
 401322c:	dc802f17 	ldw	r18,188(sp)
 4013230:	dc402e17 	ldw	r17,184(sp)
 4013234:	dc002d17 	ldw	r16,180(sp)
 4013238:	dec03704 	addi	sp,sp,220
 401323c:	f800283a 	ret
 4013240:	40106f80 	call	40106f8 <__sinit>
 4013244:	003f2f06 	br	4012f04 <__alt_data_end+0xfc012f04>
 4013248:	0463c83a 	sub	r17,zero,r17
 401324c:	d8802215 	stw	r2,136(sp)
 4013250:	a5000114 	ori	r20,r20,4
 4013254:	80c00007 	ldb	r3,0(r16)
 4013258:	003f7706 	br	4013038 <__alt_data_end+0xfc013038>
 401325c:	00800c04 	movi	r2,48
 4013260:	da802217 	ldw	r10,136(sp)
 4013264:	d8801d05 	stb	r2,116(sp)
 4013268:	00801e04 	movi	r2,120
 401326c:	d8801d45 	stb	r2,117(sp)
 4013270:	d8001d85 	stb	zero,118(sp)
 4013274:	50c00104 	addi	r3,r10,4
 4013278:	54800017 	ldw	r18,0(r10)
 401327c:	0027883a 	mov	r19,zero
 4013280:	a0800094 	ori	r2,r20,2
 4013284:	48030b16 	blt	r9,zero,4013eb4 <___vfiprintf_internal_r+0xff8>
 4013288:	00bfdfc4 	movi	r2,-129
 401328c:	a096703a 	and	r11,r20,r2
 4013290:	d8c02215 	stw	r3,136(sp)
 4013294:	5d000094 	ori	r20,r11,2
 4013298:	90032b1e 	bne	r18,zero,4013f48 <___vfiprintf_internal_r+0x108c>
 401329c:	008100b4 	movhi	r2,1026
 40132a0:	10b09d04 	addi	r2,r2,-15756
 40132a4:	d8802615 	stw	r2,152(sp)
 40132a8:	0039883a 	mov	fp,zero
 40132ac:	48017b1e 	bne	r9,zero,401389c <___vfiprintf_internal_r+0x9e0>
 40132b0:	0013883a 	mov	r9,zero
 40132b4:	0027883a 	mov	r19,zero
 40132b8:	dd401a04 	addi	r21,sp,104
 40132bc:	4825883a 	mov	r18,r9
 40132c0:	4cc0010e 	bge	r9,r19,40132c8 <___vfiprintf_internal_r+0x40c>
 40132c4:	9825883a 	mov	r18,r19
 40132c8:	e7003fcc 	andi	fp,fp,255
 40132cc:	e700201c 	xori	fp,fp,128
 40132d0:	e73fe004 	addi	fp,fp,-128
 40132d4:	e0000126 	beq	fp,zero,40132dc <___vfiprintf_internal_r+0x420>
 40132d8:	94800044 	addi	r18,r18,1
 40132dc:	a380008c 	andi	r14,r20,2
 40132e0:	70000126 	beq	r14,zero,40132e8 <___vfiprintf_internal_r+0x42c>
 40132e4:	94800084 	addi	r18,r18,2
 40132e8:	a700210c 	andi	fp,r20,132
 40132ec:	e001df1e 	bne	fp,zero,4013a6c <___vfiprintf_internal_r+0xbb0>
 40132f0:	8c87c83a 	sub	r3,r17,r18
 40132f4:	00c1dd0e 	bge	zero,r3,4013a6c <___vfiprintf_internal_r+0xbb0>
 40132f8:	01c00404 	movi	r7,16
 40132fc:	d8801c17 	ldw	r2,112(sp)
 4013300:	38c3ad0e 	bge	r7,r3,40141b8 <___vfiprintf_internal_r+0x12fc>
 4013304:	028100b4 	movhi	r10,1026
 4013308:	52b10104 	addi	r10,r10,-15356
 401330c:	dc002915 	stw	r16,164(sp)
 4013310:	d9801b17 	ldw	r6,108(sp)
 4013314:	da802415 	stw	r10,144(sp)
 4013318:	03c001c4 	movi	r15,7
 401331c:	da402515 	stw	r9,148(sp)
 4013320:	db802815 	stw	r14,160(sp)
 4013324:	1821883a 	mov	r16,r3
 4013328:	00000506 	br	4013340 <___vfiprintf_internal_r+0x484>
 401332c:	31400084 	addi	r5,r6,2
 4013330:	42000204 	addi	r8,r8,8
 4013334:	200d883a 	mov	r6,r4
 4013338:	843ffc04 	addi	r16,r16,-16
 401333c:	3c000d0e 	bge	r7,r16,4013374 <___vfiprintf_internal_r+0x4b8>
 4013340:	10800404 	addi	r2,r2,16
 4013344:	31000044 	addi	r4,r6,1
 4013348:	45800015 	stw	r22,0(r8)
 401334c:	41c00115 	stw	r7,4(r8)
 4013350:	d8801c15 	stw	r2,112(sp)
 4013354:	d9001b15 	stw	r4,108(sp)
 4013358:	793ff40e 	bge	r15,r4,401332c <__alt_data_end+0xfc01332c>
 401335c:	1001b51e 	bne	r2,zero,4013a34 <___vfiprintf_internal_r+0xb78>
 4013360:	843ffc04 	addi	r16,r16,-16
 4013364:	000d883a 	mov	r6,zero
 4013368:	01400044 	movi	r5,1
 401336c:	d811883a 	mov	r8,sp
 4013370:	3c3ff316 	blt	r7,r16,4013340 <__alt_data_end+0xfc013340>
 4013374:	8007883a 	mov	r3,r16
 4013378:	da402517 	ldw	r9,148(sp)
 401337c:	db802817 	ldw	r14,160(sp)
 4013380:	dc002917 	ldw	r16,164(sp)
 4013384:	da802417 	ldw	r10,144(sp)
 4013388:	1885883a 	add	r2,r3,r2
 401338c:	40c00115 	stw	r3,4(r8)
 4013390:	42800015 	stw	r10,0(r8)
 4013394:	d8801c15 	stw	r2,112(sp)
 4013398:	d9401b15 	stw	r5,108(sp)
 401339c:	00c001c4 	movi	r3,7
 40133a0:	19426016 	blt	r3,r5,4013d24 <___vfiprintf_internal_r+0xe68>
 40133a4:	d8c01d87 	ldb	r3,118(sp)
 40133a8:	42000204 	addi	r8,r8,8
 40133ac:	29000044 	addi	r4,r5,1
 40133b0:	1801b31e 	bne	r3,zero,4013a80 <___vfiprintf_internal_r+0xbc4>
 40133b4:	7001c026 	beq	r14,zero,4013ab8 <___vfiprintf_internal_r+0xbfc>
 40133b8:	d8c01d04 	addi	r3,sp,116
 40133bc:	10800084 	addi	r2,r2,2
 40133c0:	40c00015 	stw	r3,0(r8)
 40133c4:	00c00084 	movi	r3,2
 40133c8:	40c00115 	stw	r3,4(r8)
 40133cc:	d8801c15 	stw	r2,112(sp)
 40133d0:	d9001b15 	stw	r4,108(sp)
 40133d4:	00c001c4 	movi	r3,7
 40133d8:	1902650e 	bge	r3,r4,4013d70 <___vfiprintf_internal_r+0xeb4>
 40133dc:	10029a1e 	bne	r2,zero,4013e48 <___vfiprintf_internal_r+0xf8c>
 40133e0:	00c02004 	movi	r3,128
 40133e4:	01000044 	movi	r4,1
 40133e8:	000b883a 	mov	r5,zero
 40133ec:	d811883a 	mov	r8,sp
 40133f0:	e0c1b31e 	bne	fp,r3,4013ac0 <___vfiprintf_internal_r+0xc04>
 40133f4:	8cb9c83a 	sub	fp,r17,r18
 40133f8:	0701b10e 	bge	zero,fp,4013ac0 <___vfiprintf_internal_r+0xc04>
 40133fc:	01c00404 	movi	r7,16
 4013400:	3f03890e 	bge	r7,fp,4014228 <___vfiprintf_internal_r+0x136c>
 4013404:	00c100b4 	movhi	r3,1026
 4013408:	18f0fd04 	addi	r3,r3,-15372
 401340c:	d8c02415 	stw	r3,144(sp)
 4013410:	8007883a 	mov	r3,r16
 4013414:	034001c4 	movi	r13,7
 4013418:	e021883a 	mov	r16,fp
 401341c:	da402515 	stw	r9,148(sp)
 4013420:	1839883a 	mov	fp,r3
 4013424:	00000506 	br	401343c <___vfiprintf_internal_r+0x580>
 4013428:	29800084 	addi	r6,r5,2
 401342c:	42000204 	addi	r8,r8,8
 4013430:	180b883a 	mov	r5,r3
 4013434:	843ffc04 	addi	r16,r16,-16
 4013438:	3c000d0e 	bge	r7,r16,4013470 <___vfiprintf_internal_r+0x5b4>
 401343c:	10800404 	addi	r2,r2,16
 4013440:	28c00044 	addi	r3,r5,1
 4013444:	45c00015 	stw	r23,0(r8)
 4013448:	41c00115 	stw	r7,4(r8)
 401344c:	d8801c15 	stw	r2,112(sp)
 4013450:	d8c01b15 	stw	r3,108(sp)
 4013454:	68fff40e 	bge	r13,r3,4013428 <__alt_data_end+0xfc013428>
 4013458:	1002241e 	bne	r2,zero,4013cec <___vfiprintf_internal_r+0xe30>
 401345c:	843ffc04 	addi	r16,r16,-16
 4013460:	01800044 	movi	r6,1
 4013464:	000b883a 	mov	r5,zero
 4013468:	d811883a 	mov	r8,sp
 401346c:	3c3ff316 	blt	r7,r16,401343c <__alt_data_end+0xfc01343c>
 4013470:	da402517 	ldw	r9,148(sp)
 4013474:	e007883a 	mov	r3,fp
 4013478:	8039883a 	mov	fp,r16
 401347c:	1821883a 	mov	r16,r3
 4013480:	d8c02417 	ldw	r3,144(sp)
 4013484:	1705883a 	add	r2,r2,fp
 4013488:	47000115 	stw	fp,4(r8)
 401348c:	40c00015 	stw	r3,0(r8)
 4013490:	d8801c15 	stw	r2,112(sp)
 4013494:	d9801b15 	stw	r6,108(sp)
 4013498:	00c001c4 	movi	r3,7
 401349c:	19827616 	blt	r3,r6,4013e78 <___vfiprintf_internal_r+0xfbc>
 40134a0:	4cf9c83a 	sub	fp,r9,r19
 40134a4:	42000204 	addi	r8,r8,8
 40134a8:	31000044 	addi	r4,r6,1
 40134ac:	300b883a 	mov	r5,r6
 40134b0:	07018516 	blt	zero,fp,4013ac8 <___vfiprintf_internal_r+0xc0c>
 40134b4:	9885883a 	add	r2,r19,r2
 40134b8:	45400015 	stw	r21,0(r8)
 40134bc:	44c00115 	stw	r19,4(r8)
 40134c0:	d8801c15 	stw	r2,112(sp)
 40134c4:	d9001b15 	stw	r4,108(sp)
 40134c8:	00c001c4 	movi	r3,7
 40134cc:	1901dd0e 	bge	r3,r4,4013c44 <___vfiprintf_internal_r+0xd88>
 40134d0:	1002401e 	bne	r2,zero,4013dd4 <___vfiprintf_internal_r+0xf18>
 40134d4:	d8001b15 	stw	zero,108(sp)
 40134d8:	a2c0010c 	andi	r11,r20,4
 40134dc:	58000226 	beq	r11,zero,40134e8 <___vfiprintf_internal_r+0x62c>
 40134e0:	8ca7c83a 	sub	r19,r17,r18
 40134e4:	04c2f216 	blt	zero,r19,40140b0 <___vfiprintf_internal_r+0x11f4>
 40134e8:	8c80010e 	bge	r17,r18,40134f0 <___vfiprintf_internal_r+0x634>
 40134ec:	9023883a 	mov	r17,r18
 40134f0:	da802317 	ldw	r10,140(sp)
 40134f4:	5455883a 	add	r10,r10,r17
 40134f8:	da802315 	stw	r10,140(sp)
 40134fc:	d8001b15 	stw	zero,108(sp)
 4013500:	d811883a 	mov	r8,sp
 4013504:	003ea206 	br	4012f90 <__alt_data_end+0xfc012f90>
 4013508:	a5000814 	ori	r20,r20,32
 401350c:	80c00007 	ldb	r3,0(r16)
 4013510:	003ec906 	br	4013038 <__alt_data_end+0xfc013038>
 4013514:	80c00007 	ldb	r3,0(r16)
 4013518:	1b030926 	beq	r3,r12,4014140 <___vfiprintf_internal_r+0x1284>
 401351c:	a5000414 	ori	r20,r20,16
 4013520:	003ec506 	br	4013038 <__alt_data_end+0xfc013038>
 4013524:	21003fcc 	andi	r4,r4,255
 4013528:	20035e1e 	bne	r4,zero,40142a4 <___vfiprintf_internal_r+0x13e8>
 401352c:	a080080c 	andi	r2,r20,32
 4013530:	1002a526 	beq	r2,zero,4013fc8 <___vfiprintf_internal_r+0x110c>
 4013534:	da802217 	ldw	r10,136(sp)
 4013538:	50800017 	ldw	r2,0(r10)
 401353c:	da802317 	ldw	r10,140(sp)
 4013540:	5007d7fa 	srai	r3,r10,31
 4013544:	da802217 	ldw	r10,136(sp)
 4013548:	10c00115 	stw	r3,4(r2)
 401354c:	52800104 	addi	r10,r10,4
 4013550:	da802215 	stw	r10,136(sp)
 4013554:	da802317 	ldw	r10,140(sp)
 4013558:	12800015 	stw	r10,0(r2)
 401355c:	003e8c06 	br	4012f90 <__alt_data_end+0xfc012f90>
 4013560:	21003fcc 	andi	r4,r4,255
 4013564:	2003511e 	bne	r4,zero,40142ac <___vfiprintf_internal_r+0x13f0>
 4013568:	a080080c 	andi	r2,r20,32
 401356c:	1000a126 	beq	r2,zero,40137f4 <___vfiprintf_internal_r+0x938>
 4013570:	da802217 	ldw	r10,136(sp)
 4013574:	d8001d85 	stb	zero,118(sp)
 4013578:	50800204 	addi	r2,r10,8
 401357c:	54800017 	ldw	r18,0(r10)
 4013580:	54c00117 	ldw	r19,4(r10)
 4013584:	4802b416 	blt	r9,zero,4014058 <___vfiprintf_internal_r+0x119c>
 4013588:	013fdfc4 	movi	r4,-129
 401358c:	94c6b03a 	or	r3,r18,r19
 4013590:	d8802215 	stw	r2,136(sp)
 4013594:	a128703a 	and	r20,r20,r4
 4013598:	1800a226 	beq	r3,zero,4013824 <___vfiprintf_internal_r+0x968>
 401359c:	0039883a 	mov	fp,zero
 40135a0:	dd401a04 	addi	r21,sp,104
 40135a4:	9006d0fa 	srli	r3,r18,3
 40135a8:	9808977a 	slli	r4,r19,29
 40135ac:	9826d0fa 	srli	r19,r19,3
 40135b0:	948001cc 	andi	r18,r18,7
 40135b4:	90800c04 	addi	r2,r18,48
 40135b8:	ad7fffc4 	addi	r21,r21,-1
 40135bc:	20e4b03a 	or	r18,r4,r3
 40135c0:	a8800005 	stb	r2,0(r21)
 40135c4:	94c6b03a 	or	r3,r18,r19
 40135c8:	183ff61e 	bne	r3,zero,40135a4 <__alt_data_end+0xfc0135a4>
 40135cc:	a0c0004c 	andi	r3,r20,1
 40135d0:	18005926 	beq	r3,zero,4013738 <___vfiprintf_internal_r+0x87c>
 40135d4:	10803fcc 	andi	r2,r2,255
 40135d8:	1080201c 	xori	r2,r2,128
 40135dc:	10bfe004 	addi	r2,r2,-128
 40135e0:	00c00c04 	movi	r3,48
 40135e4:	10c05426 	beq	r2,r3,4013738 <___vfiprintf_internal_r+0x87c>
 40135e8:	da801e17 	ldw	r10,120(sp)
 40135ec:	a8bfffc4 	addi	r2,r21,-1
 40135f0:	a8ffffc5 	stb	r3,-1(r21)
 40135f4:	50a7c83a 	sub	r19,r10,r2
 40135f8:	102b883a 	mov	r21,r2
 40135fc:	003f2f06 	br	40132bc <__alt_data_end+0xfc0132bc>
 4013600:	21003fcc 	andi	r4,r4,255
 4013604:	2003421e 	bne	r4,zero,4014310 <___vfiprintf_internal_r+0x1454>
 4013608:	008100b4 	movhi	r2,1026
 401360c:	10b09d04 	addi	r2,r2,-15756
 4013610:	d8802615 	stw	r2,152(sp)
 4013614:	a080080c 	andi	r2,r20,32
 4013618:	1000aa26 	beq	r2,zero,40138c4 <___vfiprintf_internal_r+0xa08>
 401361c:	da802217 	ldw	r10,136(sp)
 4013620:	54800017 	ldw	r18,0(r10)
 4013624:	54c00117 	ldw	r19,4(r10)
 4013628:	52800204 	addi	r10,r10,8
 401362c:	da802215 	stw	r10,136(sp)
 4013630:	a080004c 	andi	r2,r20,1
 4013634:	1001d226 	beq	r2,zero,4013d80 <___vfiprintf_internal_r+0xec4>
 4013638:	94c4b03a 	or	r2,r18,r19
 401363c:	1002351e 	bne	r2,zero,4013f14 <___vfiprintf_internal_r+0x1058>
 4013640:	d8001d85 	stb	zero,118(sp)
 4013644:	48022216 	blt	r9,zero,4013ed0 <___vfiprintf_internal_r+0x1014>
 4013648:	00bfdfc4 	movi	r2,-129
 401364c:	a0a8703a 	and	r20,r20,r2
 4013650:	003f1506 	br	40132a8 <__alt_data_end+0xfc0132a8>
 4013654:	da802217 	ldw	r10,136(sp)
 4013658:	04800044 	movi	r18,1
 401365c:	d8001d85 	stb	zero,118(sp)
 4013660:	50800017 	ldw	r2,0(r10)
 4013664:	52800104 	addi	r10,r10,4
 4013668:	da802215 	stw	r10,136(sp)
 401366c:	d8801005 	stb	r2,64(sp)
 4013670:	9027883a 	mov	r19,r18
 4013674:	dd401004 	addi	r21,sp,64
 4013678:	0013883a 	mov	r9,zero
 401367c:	003f1706 	br	40132dc <__alt_data_end+0xfc0132dc>
 4013680:	21003fcc 	andi	r4,r4,255
 4013684:	2003201e 	bne	r4,zero,4014308 <___vfiprintf_internal_r+0x144c>
 4013688:	a080080c 	andi	r2,r20,32
 401368c:	10004b26 	beq	r2,zero,40137bc <___vfiprintf_internal_r+0x900>
 4013690:	da802217 	ldw	r10,136(sp)
 4013694:	50800117 	ldw	r2,4(r10)
 4013698:	54800017 	ldw	r18,0(r10)
 401369c:	52800204 	addi	r10,r10,8
 40136a0:	da802215 	stw	r10,136(sp)
 40136a4:	1027883a 	mov	r19,r2
 40136a8:	10022c16 	blt	r2,zero,4013f5c <___vfiprintf_internal_r+0x10a0>
 40136ac:	df001d83 	ldbu	fp,118(sp)
 40136b0:	48007216 	blt	r9,zero,401387c <___vfiprintf_internal_r+0x9c0>
 40136b4:	00ffdfc4 	movi	r3,-129
 40136b8:	94c4b03a 	or	r2,r18,r19
 40136bc:	a0e8703a 	and	r20,r20,r3
 40136c0:	1000cc26 	beq	r2,zero,40139f4 <___vfiprintf_internal_r+0xb38>
 40136c4:	98021026 	beq	r19,zero,4013f08 <___vfiprintf_internal_r+0x104c>
 40136c8:	dc402415 	stw	r17,144(sp)
 40136cc:	dc002515 	stw	r16,148(sp)
 40136d0:	9823883a 	mov	r17,r19
 40136d4:	9021883a 	mov	r16,r18
 40136d8:	dd401a04 	addi	r21,sp,104
 40136dc:	4825883a 	mov	r18,r9
 40136e0:	4027883a 	mov	r19,r8
 40136e4:	8009883a 	mov	r4,r16
 40136e8:	880b883a 	mov	r5,r17
 40136ec:	01800284 	movi	r6,10
 40136f0:	000f883a 	mov	r7,zero
 40136f4:	401529c0 	call	401529c <__umoddi3>
 40136f8:	10800c04 	addi	r2,r2,48
 40136fc:	ad7fffc4 	addi	r21,r21,-1
 4013700:	8009883a 	mov	r4,r16
 4013704:	880b883a 	mov	r5,r17
 4013708:	a8800005 	stb	r2,0(r21)
 401370c:	01800284 	movi	r6,10
 4013710:	000f883a 	mov	r7,zero
 4013714:	4014d240 	call	4014d24 <__udivdi3>
 4013718:	1021883a 	mov	r16,r2
 401371c:	10c4b03a 	or	r2,r2,r3
 4013720:	1823883a 	mov	r17,r3
 4013724:	103fef1e 	bne	r2,zero,40136e4 <__alt_data_end+0xfc0136e4>
 4013728:	dc402417 	ldw	r17,144(sp)
 401372c:	dc002517 	ldw	r16,148(sp)
 4013730:	9013883a 	mov	r9,r18
 4013734:	9811883a 	mov	r8,r19
 4013738:	da801e17 	ldw	r10,120(sp)
 401373c:	5567c83a 	sub	r19,r10,r21
 4013740:	003ede06 	br	40132bc <__alt_data_end+0xfc0132bc>
 4013744:	38803fcc 	andi	r2,r7,255
 4013748:	1080201c 	xori	r2,r2,128
 401374c:	10bfe004 	addi	r2,r2,-128
 4013750:	1002371e 	bne	r2,zero,4014030 <___vfiprintf_internal_r+0x1174>
 4013754:	01000044 	movi	r4,1
 4013758:	01c00804 	movi	r7,32
 401375c:	80c00007 	ldb	r3,0(r16)
 4013760:	003e3506 	br	4013038 <__alt_data_end+0xfc013038>
 4013764:	a5000054 	ori	r20,r20,1
 4013768:	80c00007 	ldb	r3,0(r16)
 401376c:	003e3206 	br	4013038 <__alt_data_end+0xfc013038>
 4013770:	a5002014 	ori	r20,r20,128
 4013774:	80c00007 	ldb	r3,0(r16)
 4013778:	003e2f06 	br	4013038 <__alt_data_end+0xfc013038>
 401377c:	8015883a 	mov	r10,r16
 4013780:	0023883a 	mov	r17,zero
 4013784:	18bff404 	addi	r2,r3,-48
 4013788:	50c00007 	ldb	r3,0(r10)
 401378c:	8c4002a4 	muli	r17,r17,10
 4013790:	84000044 	addi	r16,r16,1
 4013794:	8015883a 	mov	r10,r16
 4013798:	1463883a 	add	r17,r2,r17
 401379c:	18bff404 	addi	r2,r3,-48
 40137a0:	30bff92e 	bgeu	r6,r2,4013788 <__alt_data_end+0xfc013788>
 40137a4:	003e2506 	br	401303c <__alt_data_end+0xfc01303c>
 40137a8:	21003fcc 	andi	r4,r4,255
 40137ac:	2002d41e 	bne	r4,zero,4014300 <___vfiprintf_internal_r+0x1444>
 40137b0:	a5000414 	ori	r20,r20,16
 40137b4:	a080080c 	andi	r2,r20,32
 40137b8:	103fb51e 	bne	r2,zero,4013690 <__alt_data_end+0xfc013690>
 40137bc:	a080040c 	andi	r2,r20,16
 40137c0:	1001f826 	beq	r2,zero,4013fa4 <___vfiprintf_internal_r+0x10e8>
 40137c4:	da802217 	ldw	r10,136(sp)
 40137c8:	54800017 	ldw	r18,0(r10)
 40137cc:	52800104 	addi	r10,r10,4
 40137d0:	da802215 	stw	r10,136(sp)
 40137d4:	9027d7fa 	srai	r19,r18,31
 40137d8:	9805883a 	mov	r2,r19
 40137dc:	003fb206 	br	40136a8 <__alt_data_end+0xfc0136a8>
 40137e0:	21003fcc 	andi	r4,r4,255
 40137e4:	2002c41e 	bne	r4,zero,40142f8 <___vfiprintf_internal_r+0x143c>
 40137e8:	a5000414 	ori	r20,r20,16
 40137ec:	a080080c 	andi	r2,r20,32
 40137f0:	103f5f1e 	bne	r2,zero,4013570 <__alt_data_end+0xfc013570>
 40137f4:	a080040c 	andi	r2,r20,16
 40137f8:	10020f26 	beq	r2,zero,4014038 <___vfiprintf_internal_r+0x117c>
 40137fc:	da802217 	ldw	r10,136(sp)
 4013800:	d8001d85 	stb	zero,118(sp)
 4013804:	0027883a 	mov	r19,zero
 4013808:	50800104 	addi	r2,r10,4
 401380c:	54800017 	ldw	r18,0(r10)
 4013810:	48021116 	blt	r9,zero,4014058 <___vfiprintf_internal_r+0x119c>
 4013814:	00ffdfc4 	movi	r3,-129
 4013818:	d8802215 	stw	r2,136(sp)
 401381c:	a0e8703a 	and	r20,r20,r3
 4013820:	903f5e1e 	bne	r18,zero,401359c <__alt_data_end+0xfc01359c>
 4013824:	0039883a 	mov	fp,zero
 4013828:	4802a626 	beq	r9,zero,40142c4 <___vfiprintf_internal_r+0x1408>
 401382c:	0025883a 	mov	r18,zero
 4013830:	0027883a 	mov	r19,zero
 4013834:	003f5a06 	br	40135a0 <__alt_data_end+0xfc0135a0>
 4013838:	21003fcc 	andi	r4,r4,255
 401383c:	20029f1e 	bne	r4,zero,40142bc <___vfiprintf_internal_r+0x1400>
 4013840:	a5000414 	ori	r20,r20,16
 4013844:	a080080c 	andi	r2,r20,32
 4013848:	10005e1e 	bne	r2,zero,40139c4 <___vfiprintf_internal_r+0xb08>
 401384c:	a080040c 	andi	r2,r20,16
 4013850:	1001a21e 	bne	r2,zero,4013edc <___vfiprintf_internal_r+0x1020>
 4013854:	a080100c 	andi	r2,r20,64
 4013858:	d8001d85 	stb	zero,118(sp)
 401385c:	da802217 	ldw	r10,136(sp)
 4013860:	1002231e 	bne	r2,zero,40140f0 <___vfiprintf_internal_r+0x1234>
 4013864:	50800104 	addi	r2,r10,4
 4013868:	54800017 	ldw	r18,0(r10)
 401386c:	0027883a 	mov	r19,zero
 4013870:	4801a00e 	bge	r9,zero,4013ef4 <___vfiprintf_internal_r+0x1038>
 4013874:	d8802215 	stw	r2,136(sp)
 4013878:	0039883a 	mov	fp,zero
 401387c:	94c4b03a 	or	r2,r18,r19
 4013880:	103f901e 	bne	r2,zero,40136c4 <__alt_data_end+0xfc0136c4>
 4013884:	00800044 	movi	r2,1
 4013888:	10803fcc 	andi	r2,r2,255
 401388c:	00c00044 	movi	r3,1
 4013890:	10c05926 	beq	r2,r3,40139f8 <___vfiprintf_internal_r+0xb3c>
 4013894:	00c00084 	movi	r3,2
 4013898:	10ffe41e 	bne	r2,r3,401382c <__alt_data_end+0xfc01382c>
 401389c:	0025883a 	mov	r18,zero
 40138a0:	0027883a 	mov	r19,zero
 40138a4:	00013d06 	br	4013d9c <___vfiprintf_internal_r+0xee0>
 40138a8:	21003fcc 	andi	r4,r4,255
 40138ac:	2002811e 	bne	r4,zero,40142b4 <___vfiprintf_internal_r+0x13f8>
 40138b0:	008100b4 	movhi	r2,1026
 40138b4:	10b09804 	addi	r2,r2,-15776
 40138b8:	d8802615 	stw	r2,152(sp)
 40138bc:	a080080c 	andi	r2,r20,32
 40138c0:	103f561e 	bne	r2,zero,401361c <__alt_data_end+0xfc01361c>
 40138c4:	a080040c 	andi	r2,r20,16
 40138c8:	1001d126 	beq	r2,zero,4014010 <___vfiprintf_internal_r+0x1154>
 40138cc:	da802217 	ldw	r10,136(sp)
 40138d0:	0027883a 	mov	r19,zero
 40138d4:	54800017 	ldw	r18,0(r10)
 40138d8:	52800104 	addi	r10,r10,4
 40138dc:	da802215 	stw	r10,136(sp)
 40138e0:	003f5306 	br	4013630 <__alt_data_end+0xfc013630>
 40138e4:	da802217 	ldw	r10,136(sp)
 40138e8:	d8001d85 	stb	zero,118(sp)
 40138ec:	55400017 	ldw	r21,0(r10)
 40138f0:	50c00104 	addi	r3,r10,4
 40138f4:	a8024226 	beq	r21,zero,4014200 <___vfiprintf_internal_r+0x1344>
 40138f8:	48021816 	blt	r9,zero,401415c <___vfiprintf_internal_r+0x12a0>
 40138fc:	480d883a 	mov	r6,r9
 4013900:	000b883a 	mov	r5,zero
 4013904:	a809883a 	mov	r4,r21
 4013908:	d8c02a15 	stw	r3,168(sp)
 401390c:	da002b15 	stw	r8,172(sp)
 4013910:	da402c15 	stw	r9,176(sp)
 4013914:	40114580 	call	4011458 <memchr>
 4013918:	d8c02a17 	ldw	r3,168(sp)
 401391c:	da002b17 	ldw	r8,172(sp)
 4013920:	da402c17 	ldw	r9,176(sp)
 4013924:	10024826 	beq	r2,zero,4014248 <___vfiprintf_internal_r+0x138c>
 4013928:	1567c83a 	sub	r19,r2,r21
 401392c:	df001d83 	ldbu	fp,118(sp)
 4013930:	d8c02215 	stw	r3,136(sp)
 4013934:	0013883a 	mov	r9,zero
 4013938:	003e6006 	br	40132bc <__alt_data_end+0xfc0132bc>
 401393c:	21003fcc 	andi	r4,r4,255
 4013940:	203fc026 	beq	r4,zero,4013844 <__alt_data_end+0xfc013844>
 4013944:	d9c01d85 	stb	r7,118(sp)
 4013948:	003fbe06 	br	4013844 <__alt_data_end+0xfc013844>
 401394c:	da802217 	ldw	r10,136(sp)
 4013950:	54400017 	ldw	r17,0(r10)
 4013954:	50800104 	addi	r2,r10,4
 4013958:	883e3b16 	blt	r17,zero,4013248 <__alt_data_end+0xfc013248>
 401395c:	d8802215 	stw	r2,136(sp)
 4013960:	80c00007 	ldb	r3,0(r16)
 4013964:	003db406 	br	4013038 <__alt_data_end+0xfc013038>
 4013968:	01000044 	movi	r4,1
 401396c:	01c00ac4 	movi	r7,43
 4013970:	80c00007 	ldb	r3,0(r16)
 4013974:	003db006 	br	4013038 <__alt_data_end+0xfc013038>
 4013978:	80c00007 	ldb	r3,0(r16)
 401397c:	82800044 	addi	r10,r16,1
 4013980:	1b423c26 	beq	r3,r13,4014274 <___vfiprintf_internal_r+0x13b8>
 4013984:	18bff404 	addi	r2,r3,-48
 4013988:	0013883a 	mov	r9,zero
 401398c:	30822b36 	bltu	r6,r2,401423c <___vfiprintf_internal_r+0x1380>
 4013990:	50c00007 	ldb	r3,0(r10)
 4013994:	4a4002a4 	muli	r9,r9,10
 4013998:	54000044 	addi	r16,r10,1
 401399c:	8015883a 	mov	r10,r16
 40139a0:	4893883a 	add	r9,r9,r2
 40139a4:	18bff404 	addi	r2,r3,-48
 40139a8:	30bff92e 	bgeu	r6,r2,4013990 <__alt_data_end+0xfc013990>
 40139ac:	483da30e 	bge	r9,zero,401303c <__alt_data_end+0xfc01303c>
 40139b0:	027fffc4 	movi	r9,-1
 40139b4:	003da106 	br	401303c <__alt_data_end+0xfc01303c>
 40139b8:	a5001014 	ori	r20,r20,64
 40139bc:	80c00007 	ldb	r3,0(r16)
 40139c0:	003d9d06 	br	4013038 <__alt_data_end+0xfc013038>
 40139c4:	da802217 	ldw	r10,136(sp)
 40139c8:	d8001d85 	stb	zero,118(sp)
 40139cc:	50c00204 	addi	r3,r10,8
 40139d0:	54800017 	ldw	r18,0(r10)
 40139d4:	54c00117 	ldw	r19,4(r10)
 40139d8:	4801ca16 	blt	r9,zero,4014104 <___vfiprintf_internal_r+0x1248>
 40139dc:	013fdfc4 	movi	r4,-129
 40139e0:	94c4b03a 	or	r2,r18,r19
 40139e4:	d8c02215 	stw	r3,136(sp)
 40139e8:	a128703a 	and	r20,r20,r4
 40139ec:	0039883a 	mov	fp,zero
 40139f0:	103f341e 	bne	r2,zero,40136c4 <__alt_data_end+0xfc0136c4>
 40139f4:	483e2e26 	beq	r9,zero,40132b0 <__alt_data_end+0xfc0132b0>
 40139f8:	0025883a 	mov	r18,zero
 40139fc:	94800c04 	addi	r18,r18,48
 4013a00:	dc8019c5 	stb	r18,103(sp)
 4013a04:	dcc02717 	ldw	r19,156(sp)
 4013a08:	dd4019c4 	addi	r21,sp,103
 4013a0c:	003e2b06 	br	40132bc <__alt_data_end+0xfc0132bc>
 4013a10:	21003fcc 	andi	r4,r4,255
 4013a14:	2002361e 	bne	r4,zero,40142f0 <___vfiprintf_internal_r+0x1434>
 4013a18:	1801c126 	beq	r3,zero,4014120 <___vfiprintf_internal_r+0x1264>
 4013a1c:	04800044 	movi	r18,1
 4013a20:	d8c01005 	stb	r3,64(sp)
 4013a24:	d8001d85 	stb	zero,118(sp)
 4013a28:	9027883a 	mov	r19,r18
 4013a2c:	dd401004 	addi	r21,sp,64
 4013a30:	003f1106 	br	4013678 <__alt_data_end+0xfc013678>
 4013a34:	d9402117 	ldw	r5,132(sp)
 4013a38:	d9002017 	ldw	r4,128(sp)
 4013a3c:	d9801a04 	addi	r6,sp,104
 4013a40:	d9c02b15 	stw	r7,172(sp)
 4013a44:	dbc02a15 	stw	r15,168(sp)
 4013a48:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4013a4c:	d9c02b17 	ldw	r7,172(sp)
 4013a50:	dbc02a17 	ldw	r15,168(sp)
 4013a54:	10006d1e 	bne	r2,zero,4013c0c <___vfiprintf_internal_r+0xd50>
 4013a58:	d9801b17 	ldw	r6,108(sp)
 4013a5c:	d8801c17 	ldw	r2,112(sp)
 4013a60:	d811883a 	mov	r8,sp
 4013a64:	31400044 	addi	r5,r6,1
 4013a68:	003e3306 	br	4013338 <__alt_data_end+0xfc013338>
 4013a6c:	d9401b17 	ldw	r5,108(sp)
 4013a70:	d8801c17 	ldw	r2,112(sp)
 4013a74:	29000044 	addi	r4,r5,1
 4013a78:	d8c01d87 	ldb	r3,118(sp)
 4013a7c:	183e4d26 	beq	r3,zero,40133b4 <__alt_data_end+0xfc0133b4>
 4013a80:	00c00044 	movi	r3,1
 4013a84:	d9401d84 	addi	r5,sp,118
 4013a88:	10c5883a 	add	r2,r2,r3
 4013a8c:	41400015 	stw	r5,0(r8)
 4013a90:	40c00115 	stw	r3,4(r8)
 4013a94:	d8801c15 	stw	r2,112(sp)
 4013a98:	d9001b15 	stw	r4,108(sp)
 4013a9c:	014001c4 	movi	r5,7
 4013aa0:	2900a90e 	bge	r5,r4,4013d48 <___vfiprintf_internal_r+0xe8c>
 4013aa4:	1000da1e 	bne	r2,zero,4013e10 <___vfiprintf_internal_r+0xf54>
 4013aa8:	7000ab1e 	bne	r14,zero,4013d58 <___vfiprintf_internal_r+0xe9c>
 4013aac:	000b883a 	mov	r5,zero
 4013ab0:	1809883a 	mov	r4,r3
 4013ab4:	d811883a 	mov	r8,sp
 4013ab8:	00c02004 	movi	r3,128
 4013abc:	e0fe4d26 	beq	fp,r3,40133f4 <__alt_data_end+0xfc0133f4>
 4013ac0:	4cf9c83a 	sub	fp,r9,r19
 4013ac4:	073e7b0e 	bge	zero,fp,40134b4 <__alt_data_end+0xfc0134b4>
 4013ac8:	01c00404 	movi	r7,16
 4013acc:	3f01900e 	bge	r7,fp,4014110 <___vfiprintf_internal_r+0x1254>
 4013ad0:	00c100b4 	movhi	r3,1026
 4013ad4:	18f0fd04 	addi	r3,r3,-15372
 4013ad8:	d8c02415 	stw	r3,144(sp)
 4013adc:	034001c4 	movi	r13,7
 4013ae0:	00000506 	br	4013af8 <___vfiprintf_internal_r+0xc3c>
 4013ae4:	29000084 	addi	r4,r5,2
 4013ae8:	42000204 	addi	r8,r8,8
 4013aec:	180b883a 	mov	r5,r3
 4013af0:	e73ffc04 	addi	fp,fp,-16
 4013af4:	3f000d0e 	bge	r7,fp,4013b2c <___vfiprintf_internal_r+0xc70>
 4013af8:	10800404 	addi	r2,r2,16
 4013afc:	28c00044 	addi	r3,r5,1
 4013b00:	45c00015 	stw	r23,0(r8)
 4013b04:	41c00115 	stw	r7,4(r8)
 4013b08:	d8801c15 	stw	r2,112(sp)
 4013b0c:	d8c01b15 	stw	r3,108(sp)
 4013b10:	68fff40e 	bge	r13,r3,4013ae4 <__alt_data_end+0xfc013ae4>
 4013b14:	1000101e 	bne	r2,zero,4013b58 <___vfiprintf_internal_r+0xc9c>
 4013b18:	e73ffc04 	addi	fp,fp,-16
 4013b1c:	01000044 	movi	r4,1
 4013b20:	000b883a 	mov	r5,zero
 4013b24:	d811883a 	mov	r8,sp
 4013b28:	3f3ff316 	blt	r7,fp,4013af8 <__alt_data_end+0xfc013af8>
 4013b2c:	da802417 	ldw	r10,144(sp)
 4013b30:	1705883a 	add	r2,r2,fp
 4013b34:	47000115 	stw	fp,4(r8)
 4013b38:	42800015 	stw	r10,0(r8)
 4013b3c:	d8801c15 	stw	r2,112(sp)
 4013b40:	d9001b15 	stw	r4,108(sp)
 4013b44:	00c001c4 	movi	r3,7
 4013b48:	19003616 	blt	r3,r4,4013c24 <___vfiprintf_internal_r+0xd68>
 4013b4c:	42000204 	addi	r8,r8,8
 4013b50:	21000044 	addi	r4,r4,1
 4013b54:	003e5706 	br	40134b4 <__alt_data_end+0xfc0134b4>
 4013b58:	d9402117 	ldw	r5,132(sp)
 4013b5c:	d9002017 	ldw	r4,128(sp)
 4013b60:	d9801a04 	addi	r6,sp,104
 4013b64:	d9c02b15 	stw	r7,172(sp)
 4013b68:	db402a15 	stw	r13,168(sp)
 4013b6c:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4013b70:	d9c02b17 	ldw	r7,172(sp)
 4013b74:	db402a17 	ldw	r13,168(sp)
 4013b78:	1000241e 	bne	r2,zero,4013c0c <___vfiprintf_internal_r+0xd50>
 4013b7c:	d9401b17 	ldw	r5,108(sp)
 4013b80:	d8801c17 	ldw	r2,112(sp)
 4013b84:	d811883a 	mov	r8,sp
 4013b88:	29000044 	addi	r4,r5,1
 4013b8c:	003fd806 	br	4013af0 <__alt_data_end+0xfc013af0>
 4013b90:	d9401b17 	ldw	r5,108(sp)
 4013b94:	00c100b4 	movhi	r3,1026
 4013b98:	18f10104 	addi	r3,r3,-15356
 4013b9c:	d8c02415 	stw	r3,144(sp)
 4013ba0:	29400044 	addi	r5,r5,1
 4013ba4:	d8c02417 	ldw	r3,144(sp)
 4013ba8:	14c5883a 	add	r2,r2,r19
 4013bac:	44c00115 	stw	r19,4(r8)
 4013bb0:	40c00015 	stw	r3,0(r8)
 4013bb4:	d8801c15 	stw	r2,112(sp)
 4013bb8:	d9401b15 	stw	r5,108(sp)
 4013bbc:	00c001c4 	movi	r3,7
 4013bc0:	1940070e 	bge	r3,r5,4013be0 <___vfiprintf_internal_r+0xd24>
 4013bc4:	103e4826 	beq	r2,zero,40134e8 <__alt_data_end+0xfc0134e8>
 4013bc8:	d9402117 	ldw	r5,132(sp)
 4013bcc:	d9002017 	ldw	r4,128(sp)
 4013bd0:	d9801a04 	addi	r6,sp,104
 4013bd4:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4013bd8:	10000c1e 	bne	r2,zero,4013c0c <___vfiprintf_internal_r+0xd50>
 4013bdc:	d8801c17 	ldw	r2,112(sp)
 4013be0:	8c80010e 	bge	r17,r18,4013be8 <___vfiprintf_internal_r+0xd2c>
 4013be4:	9023883a 	mov	r17,r18
 4013be8:	da802317 	ldw	r10,140(sp)
 4013bec:	5455883a 	add	r10,r10,r17
 4013bf0:	da802315 	stw	r10,140(sp)
 4013bf4:	103e4126 	beq	r2,zero,40134fc <__alt_data_end+0xfc0134fc>
 4013bf8:	d9402117 	ldw	r5,132(sp)
 4013bfc:	d9002017 	ldw	r4,128(sp)
 4013c00:	d9801a04 	addi	r6,sp,104
 4013c04:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4013c08:	103e3c26 	beq	r2,zero,40134fc <__alt_data_end+0xfc0134fc>
 4013c0c:	dd002117 	ldw	r20,132(sp)
 4013c10:	a080030b 	ldhu	r2,12(r20)
 4013c14:	1080100c 	andi	r2,r2,64
 4013c18:	1001231e 	bne	r2,zero,40140a8 <___vfiprintf_internal_r+0x11ec>
 4013c1c:	d8802317 	ldw	r2,140(sp)
 4013c20:	003d7b06 	br	4013210 <__alt_data_end+0xfc013210>
 4013c24:	1000991e 	bne	r2,zero,4013e8c <___vfiprintf_internal_r+0xfd0>
 4013c28:	00c00044 	movi	r3,1
 4013c2c:	9805883a 	mov	r2,r19
 4013c30:	dd400015 	stw	r21,0(sp)
 4013c34:	dcc00115 	stw	r19,4(sp)
 4013c38:	dcc01c15 	stw	r19,112(sp)
 4013c3c:	d8c01b15 	stw	r3,108(sp)
 4013c40:	d811883a 	mov	r8,sp
 4013c44:	42000204 	addi	r8,r8,8
 4013c48:	a2c0010c 	andi	r11,r20,4
 4013c4c:	583fe426 	beq	r11,zero,4013be0 <__alt_data_end+0xfc013be0>
 4013c50:	8ca7c83a 	sub	r19,r17,r18
 4013c54:	04ffe20e 	bge	zero,r19,4013be0 <__alt_data_end+0xfc013be0>
 4013c58:	01c00404 	movi	r7,16
 4013c5c:	3cffcc0e 	bge	r7,r19,4013b90 <__alt_data_end+0xfc013b90>
 4013c60:	028100b4 	movhi	r10,1026
 4013c64:	52b10104 	addi	r10,r10,-15356
 4013c68:	d9001b17 	ldw	r4,108(sp)
 4013c6c:	da802415 	stw	r10,144(sp)
 4013c70:	382b883a 	mov	r21,r7
 4013c74:	050001c4 	movi	r20,7
 4013c78:	df002017 	ldw	fp,128(sp)
 4013c7c:	00000506 	br	4013c94 <___vfiprintf_internal_r+0xdd8>
 4013c80:	21400084 	addi	r5,r4,2
 4013c84:	42000204 	addi	r8,r8,8
 4013c88:	1809883a 	mov	r4,r3
 4013c8c:	9cfffc04 	addi	r19,r19,-16
 4013c90:	acffc40e 	bge	r21,r19,4013ba4 <__alt_data_end+0xfc013ba4>
 4013c94:	10800404 	addi	r2,r2,16
 4013c98:	20c00044 	addi	r3,r4,1
 4013c9c:	45800015 	stw	r22,0(r8)
 4013ca0:	45400115 	stw	r21,4(r8)
 4013ca4:	d8801c15 	stw	r2,112(sp)
 4013ca8:	d8c01b15 	stw	r3,108(sp)
 4013cac:	a0fff40e 	bge	r20,r3,4013c80 <__alt_data_end+0xfc013c80>
 4013cb0:	1000041e 	bne	r2,zero,4013cc4 <___vfiprintf_internal_r+0xe08>
 4013cb4:	01400044 	movi	r5,1
 4013cb8:	0009883a 	mov	r4,zero
 4013cbc:	d811883a 	mov	r8,sp
 4013cc0:	003ff206 	br	4013c8c <__alt_data_end+0xfc013c8c>
 4013cc4:	d9402117 	ldw	r5,132(sp)
 4013cc8:	d9801a04 	addi	r6,sp,104
 4013ccc:	e009883a 	mov	r4,fp
 4013cd0:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4013cd4:	103fcd1e 	bne	r2,zero,4013c0c <__alt_data_end+0xfc013c0c>
 4013cd8:	d9001b17 	ldw	r4,108(sp)
 4013cdc:	d8801c17 	ldw	r2,112(sp)
 4013ce0:	d811883a 	mov	r8,sp
 4013ce4:	21400044 	addi	r5,r4,1
 4013ce8:	003fe806 	br	4013c8c <__alt_data_end+0xfc013c8c>
 4013cec:	d9402117 	ldw	r5,132(sp)
 4013cf0:	d9002017 	ldw	r4,128(sp)
 4013cf4:	d9801a04 	addi	r6,sp,104
 4013cf8:	d9c02b15 	stw	r7,172(sp)
 4013cfc:	db402a15 	stw	r13,168(sp)
 4013d00:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4013d04:	d9c02b17 	ldw	r7,172(sp)
 4013d08:	db402a17 	ldw	r13,168(sp)
 4013d0c:	103fbf1e 	bne	r2,zero,4013c0c <__alt_data_end+0xfc013c0c>
 4013d10:	d9401b17 	ldw	r5,108(sp)
 4013d14:	d8801c17 	ldw	r2,112(sp)
 4013d18:	d811883a 	mov	r8,sp
 4013d1c:	29800044 	addi	r6,r5,1
 4013d20:	003dc406 	br	4013434 <__alt_data_end+0xfc013434>
 4013d24:	1000d21e 	bne	r2,zero,4014070 <___vfiprintf_internal_r+0x11b4>
 4013d28:	d8c01d87 	ldb	r3,118(sp)
 4013d2c:	18009526 	beq	r3,zero,4013f84 <___vfiprintf_internal_r+0x10c8>
 4013d30:	00800044 	movi	r2,1
 4013d34:	d8c01d84 	addi	r3,sp,118
 4013d38:	1009883a 	mov	r4,r2
 4013d3c:	d8c00015 	stw	r3,0(sp)
 4013d40:	d8800115 	stw	r2,4(sp)
 4013d44:	d811883a 	mov	r8,sp
 4013d48:	200b883a 	mov	r5,r4
 4013d4c:	42000204 	addi	r8,r8,8
 4013d50:	21000044 	addi	r4,r4,1
 4013d54:	003d9706 	br	40133b4 <__alt_data_end+0xfc0133b4>
 4013d58:	d9001d04 	addi	r4,sp,116
 4013d5c:	00800084 	movi	r2,2
 4013d60:	d9000015 	stw	r4,0(sp)
 4013d64:	d8800115 	stw	r2,4(sp)
 4013d68:	1809883a 	mov	r4,r3
 4013d6c:	d811883a 	mov	r8,sp
 4013d70:	200b883a 	mov	r5,r4
 4013d74:	42000204 	addi	r8,r8,8
 4013d78:	21000044 	addi	r4,r4,1
 4013d7c:	003f4e06 	br	4013ab8 <__alt_data_end+0xfc013ab8>
 4013d80:	d8001d85 	stb	zero,118(sp)
 4013d84:	48005016 	blt	r9,zero,4013ec8 <___vfiprintf_internal_r+0x100c>
 4013d88:	00ffdfc4 	movi	r3,-129
 4013d8c:	94c4b03a 	or	r2,r18,r19
 4013d90:	a0e8703a 	and	r20,r20,r3
 4013d94:	103d4426 	beq	r2,zero,40132a8 <__alt_data_end+0xfc0132a8>
 4013d98:	0039883a 	mov	fp,zero
 4013d9c:	d9002617 	ldw	r4,152(sp)
 4013da0:	dd401a04 	addi	r21,sp,104
 4013da4:	908003cc 	andi	r2,r18,15
 4013da8:	9806973a 	slli	r3,r19,28
 4013dac:	2085883a 	add	r2,r4,r2
 4013db0:	9024d13a 	srli	r18,r18,4
 4013db4:	10800003 	ldbu	r2,0(r2)
 4013db8:	9826d13a 	srli	r19,r19,4
 4013dbc:	ad7fffc4 	addi	r21,r21,-1
 4013dc0:	1ca4b03a 	or	r18,r3,r18
 4013dc4:	a8800005 	stb	r2,0(r21)
 4013dc8:	94c4b03a 	or	r2,r18,r19
 4013dcc:	103ff51e 	bne	r2,zero,4013da4 <__alt_data_end+0xfc013da4>
 4013dd0:	003e5906 	br	4013738 <__alt_data_end+0xfc013738>
 4013dd4:	d9402117 	ldw	r5,132(sp)
 4013dd8:	d9002017 	ldw	r4,128(sp)
 4013ddc:	d9801a04 	addi	r6,sp,104
 4013de0:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4013de4:	103f891e 	bne	r2,zero,4013c0c <__alt_data_end+0xfc013c0c>
 4013de8:	d8801c17 	ldw	r2,112(sp)
 4013dec:	d811883a 	mov	r8,sp
 4013df0:	003f9506 	br	4013c48 <__alt_data_end+0xfc013c48>
 4013df4:	d9402117 	ldw	r5,132(sp)
 4013df8:	d9002017 	ldw	r4,128(sp)
 4013dfc:	d9801a04 	addi	r6,sp,104
 4013e00:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4013e04:	103f811e 	bne	r2,zero,4013c0c <__alt_data_end+0xfc013c0c>
 4013e08:	d811883a 	mov	r8,sp
 4013e0c:	003ced06 	br	40131c4 <__alt_data_end+0xfc0131c4>
 4013e10:	d9402117 	ldw	r5,132(sp)
 4013e14:	d9002017 	ldw	r4,128(sp)
 4013e18:	d9801a04 	addi	r6,sp,104
 4013e1c:	da402c15 	stw	r9,176(sp)
 4013e20:	db802a15 	stw	r14,168(sp)
 4013e24:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4013e28:	da402c17 	ldw	r9,176(sp)
 4013e2c:	db802a17 	ldw	r14,168(sp)
 4013e30:	103f761e 	bne	r2,zero,4013c0c <__alt_data_end+0xfc013c0c>
 4013e34:	d9401b17 	ldw	r5,108(sp)
 4013e38:	d8801c17 	ldw	r2,112(sp)
 4013e3c:	d811883a 	mov	r8,sp
 4013e40:	29000044 	addi	r4,r5,1
 4013e44:	003d5b06 	br	40133b4 <__alt_data_end+0xfc0133b4>
 4013e48:	d9402117 	ldw	r5,132(sp)
 4013e4c:	d9002017 	ldw	r4,128(sp)
 4013e50:	d9801a04 	addi	r6,sp,104
 4013e54:	da402c15 	stw	r9,176(sp)
 4013e58:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4013e5c:	da402c17 	ldw	r9,176(sp)
 4013e60:	103f6a1e 	bne	r2,zero,4013c0c <__alt_data_end+0xfc013c0c>
 4013e64:	d9401b17 	ldw	r5,108(sp)
 4013e68:	d8801c17 	ldw	r2,112(sp)
 4013e6c:	d811883a 	mov	r8,sp
 4013e70:	29000044 	addi	r4,r5,1
 4013e74:	003f1006 	br	4013ab8 <__alt_data_end+0xfc013ab8>
 4013e78:	1000c31e 	bne	r2,zero,4014188 <___vfiprintf_internal_r+0x12cc>
 4013e7c:	01000044 	movi	r4,1
 4013e80:	000b883a 	mov	r5,zero
 4013e84:	d811883a 	mov	r8,sp
 4013e88:	003f0d06 	br	4013ac0 <__alt_data_end+0xfc013ac0>
 4013e8c:	d9402117 	ldw	r5,132(sp)
 4013e90:	d9002017 	ldw	r4,128(sp)
 4013e94:	d9801a04 	addi	r6,sp,104
 4013e98:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4013e9c:	103f5b1e 	bne	r2,zero,4013c0c <__alt_data_end+0xfc013c0c>
 4013ea0:	d9001b17 	ldw	r4,108(sp)
 4013ea4:	d8801c17 	ldw	r2,112(sp)
 4013ea8:	d811883a 	mov	r8,sp
 4013eac:	21000044 	addi	r4,r4,1
 4013eb0:	003d8006 	br	40134b4 <__alt_data_end+0xfc0134b4>
 4013eb4:	010100b4 	movhi	r4,1026
 4013eb8:	21309d04 	addi	r4,r4,-15756
 4013ebc:	d9002615 	stw	r4,152(sp)
 4013ec0:	d8c02215 	stw	r3,136(sp)
 4013ec4:	1029883a 	mov	r20,r2
 4013ec8:	94c4b03a 	or	r2,r18,r19
 4013ecc:	103fb21e 	bne	r2,zero,4013d98 <__alt_data_end+0xfc013d98>
 4013ed0:	0039883a 	mov	fp,zero
 4013ed4:	00800084 	movi	r2,2
 4013ed8:	003e6b06 	br	4013888 <__alt_data_end+0xfc013888>
 4013edc:	da802217 	ldw	r10,136(sp)
 4013ee0:	d8001d85 	stb	zero,118(sp)
 4013ee4:	0027883a 	mov	r19,zero
 4013ee8:	50800104 	addi	r2,r10,4
 4013eec:	54800017 	ldw	r18,0(r10)
 4013ef0:	483e6016 	blt	r9,zero,4013874 <__alt_data_end+0xfc013874>
 4013ef4:	00ffdfc4 	movi	r3,-129
 4013ef8:	d8802215 	stw	r2,136(sp)
 4013efc:	a0e8703a 	and	r20,r20,r3
 4013f00:	0039883a 	mov	fp,zero
 4013f04:	903ebb26 	beq	r18,zero,40139f4 <__alt_data_end+0xfc0139f4>
 4013f08:	00800244 	movi	r2,9
 4013f0c:	14bdee36 	bltu	r2,r18,40136c8 <__alt_data_end+0xfc0136c8>
 4013f10:	003eba06 	br	40139fc <__alt_data_end+0xfc0139fc>
 4013f14:	00800c04 	movi	r2,48
 4013f18:	d8c01d45 	stb	r3,117(sp)
 4013f1c:	d8801d05 	stb	r2,116(sp)
 4013f20:	d8001d85 	stb	zero,118(sp)
 4013f24:	a0c00094 	ori	r3,r20,2
 4013f28:	4800a916 	blt	r9,zero,40141d0 <___vfiprintf_internal_r+0x1314>
 4013f2c:	00bfdfc4 	movi	r2,-129
 4013f30:	a096703a 	and	r11,r20,r2
 4013f34:	5d000094 	ori	r20,r11,2
 4013f38:	0039883a 	mov	fp,zero
 4013f3c:	003f9706 	br	4013d9c <__alt_data_end+0xfc013d9c>
 4013f40:	8025883a 	mov	r18,r16
 4013f44:	003c2e06 	br	4013000 <__alt_data_end+0xfc013000>
 4013f48:	008100b4 	movhi	r2,1026
 4013f4c:	10b09d04 	addi	r2,r2,-15756
 4013f50:	0039883a 	mov	fp,zero
 4013f54:	d8802615 	stw	r2,152(sp)
 4013f58:	003f9006 	br	4013d9c <__alt_data_end+0xfc013d9c>
 4013f5c:	04a5c83a 	sub	r18,zero,r18
 4013f60:	07000b44 	movi	fp,45
 4013f64:	9004c03a 	cmpne	r2,r18,zero
 4013f68:	04e7c83a 	sub	r19,zero,r19
 4013f6c:	df001d85 	stb	fp,118(sp)
 4013f70:	98a7c83a 	sub	r19,r19,r2
 4013f74:	48009f16 	blt	r9,zero,40141f4 <___vfiprintf_internal_r+0x1338>
 4013f78:	00bfdfc4 	movi	r2,-129
 4013f7c:	a0a8703a 	and	r20,r20,r2
 4013f80:	003dd006 	br	40136c4 <__alt_data_end+0xfc0136c4>
 4013f84:	70004c26 	beq	r14,zero,40140b8 <___vfiprintf_internal_r+0x11fc>
 4013f88:	00800084 	movi	r2,2
 4013f8c:	d8c01d04 	addi	r3,sp,116
 4013f90:	d8c00015 	stw	r3,0(sp)
 4013f94:	d8800115 	stw	r2,4(sp)
 4013f98:	01000044 	movi	r4,1
 4013f9c:	d811883a 	mov	r8,sp
 4013fa0:	003f7306 	br	4013d70 <__alt_data_end+0xfc013d70>
 4013fa4:	a080100c 	andi	r2,r20,64
 4013fa8:	da802217 	ldw	r10,136(sp)
 4013fac:	103e0626 	beq	r2,zero,40137c8 <__alt_data_end+0xfc0137c8>
 4013fb0:	5480000f 	ldh	r18,0(r10)
 4013fb4:	52800104 	addi	r10,r10,4
 4013fb8:	da802215 	stw	r10,136(sp)
 4013fbc:	9027d7fa 	srai	r19,r18,31
 4013fc0:	9805883a 	mov	r2,r19
 4013fc4:	003db806 	br	40136a8 <__alt_data_end+0xfc0136a8>
 4013fc8:	a080040c 	andi	r2,r20,16
 4013fcc:	1000091e 	bne	r2,zero,4013ff4 <___vfiprintf_internal_r+0x1138>
 4013fd0:	a2c0100c 	andi	r11,r20,64
 4013fd4:	58000726 	beq	r11,zero,4013ff4 <___vfiprintf_internal_r+0x1138>
 4013fd8:	da802217 	ldw	r10,136(sp)
 4013fdc:	50800017 	ldw	r2,0(r10)
 4013fe0:	52800104 	addi	r10,r10,4
 4013fe4:	da802215 	stw	r10,136(sp)
 4013fe8:	da802317 	ldw	r10,140(sp)
 4013fec:	1280000d 	sth	r10,0(r2)
 4013ff0:	003be706 	br	4012f90 <__alt_data_end+0xfc012f90>
 4013ff4:	da802217 	ldw	r10,136(sp)
 4013ff8:	50800017 	ldw	r2,0(r10)
 4013ffc:	52800104 	addi	r10,r10,4
 4014000:	da802215 	stw	r10,136(sp)
 4014004:	da802317 	ldw	r10,140(sp)
 4014008:	12800015 	stw	r10,0(r2)
 401400c:	003be006 	br	4012f90 <__alt_data_end+0xfc012f90>
 4014010:	a080100c 	andi	r2,r20,64
 4014014:	da802217 	ldw	r10,136(sp)
 4014018:	10003026 	beq	r2,zero,40140dc <___vfiprintf_internal_r+0x1220>
 401401c:	5480000b 	ldhu	r18,0(r10)
 4014020:	52800104 	addi	r10,r10,4
 4014024:	0027883a 	mov	r19,zero
 4014028:	da802215 	stw	r10,136(sp)
 401402c:	003d8006 	br	4013630 <__alt_data_end+0xfc013630>
 4014030:	80c00007 	ldb	r3,0(r16)
 4014034:	003c0006 	br	4013038 <__alt_data_end+0xfc013038>
 4014038:	a080100c 	andi	r2,r20,64
 401403c:	d8001d85 	stb	zero,118(sp)
 4014040:	da802217 	ldw	r10,136(sp)
 4014044:	1000201e 	bne	r2,zero,40140c8 <___vfiprintf_internal_r+0x120c>
 4014048:	50800104 	addi	r2,r10,4
 401404c:	54800017 	ldw	r18,0(r10)
 4014050:	0027883a 	mov	r19,zero
 4014054:	483def0e 	bge	r9,zero,4013814 <__alt_data_end+0xfc013814>
 4014058:	94c6b03a 	or	r3,r18,r19
 401405c:	d8802215 	stw	r2,136(sp)
 4014060:	183d4e1e 	bne	r3,zero,401359c <__alt_data_end+0xfc01359c>
 4014064:	0039883a 	mov	fp,zero
 4014068:	0005883a 	mov	r2,zero
 401406c:	003e0606 	br	4013888 <__alt_data_end+0xfc013888>
 4014070:	d9402117 	ldw	r5,132(sp)
 4014074:	d9002017 	ldw	r4,128(sp)
 4014078:	d9801a04 	addi	r6,sp,104
 401407c:	da402c15 	stw	r9,176(sp)
 4014080:	db802a15 	stw	r14,168(sp)
 4014084:	4012da80 	call	4012da8 <__sprint_r.part.0>
 4014088:	da402c17 	ldw	r9,176(sp)
 401408c:	db802a17 	ldw	r14,168(sp)
 4014090:	103ede1e 	bne	r2,zero,4013c0c <__alt_data_end+0xfc013c0c>
 4014094:	d9401b17 	ldw	r5,108(sp)
 4014098:	d8801c17 	ldw	r2,112(sp)
 401409c:	d811883a 	mov	r8,sp
 40140a0:	29000044 	addi	r4,r5,1
 40140a4:	003e7406 	br	4013a78 <__alt_data_end+0xfc013a78>
 40140a8:	00bfffc4 	movi	r2,-1
 40140ac:	003c5806 	br	4013210 <__alt_data_end+0xfc013210>
 40140b0:	d811883a 	mov	r8,sp
 40140b4:	003ee806 	br	4013c58 <__alt_data_end+0xfc013c58>
 40140b8:	000b883a 	mov	r5,zero
 40140bc:	01000044 	movi	r4,1
 40140c0:	d811883a 	mov	r8,sp
 40140c4:	003e7c06 	br	4013ab8 <__alt_data_end+0xfc013ab8>
 40140c8:	50800104 	addi	r2,r10,4
 40140cc:	5480000b 	ldhu	r18,0(r10)
 40140d0:	0027883a 	mov	r19,zero
 40140d4:	483dcf0e 	bge	r9,zero,4013814 <__alt_data_end+0xfc013814>
 40140d8:	003fdf06 	br	4014058 <__alt_data_end+0xfc014058>
 40140dc:	54800017 	ldw	r18,0(r10)
 40140e0:	52800104 	addi	r10,r10,4
 40140e4:	0027883a 	mov	r19,zero
 40140e8:	da802215 	stw	r10,136(sp)
 40140ec:	003d5006 	br	4013630 <__alt_data_end+0xfc013630>
 40140f0:	50800104 	addi	r2,r10,4
 40140f4:	5480000b 	ldhu	r18,0(r10)
 40140f8:	0027883a 	mov	r19,zero
 40140fc:	483f7d0e 	bge	r9,zero,4013ef4 <__alt_data_end+0xfc013ef4>
 4014100:	003ddc06 	br	4013874 <__alt_data_end+0xfc013874>
 4014104:	d8c02215 	stw	r3,136(sp)
 4014108:	0039883a 	mov	fp,zero
 401410c:	003ddb06 	br	401387c <__alt_data_end+0xfc01387c>
 4014110:	028100b4 	movhi	r10,1026
 4014114:	52b0fd04 	addi	r10,r10,-15372
 4014118:	da802415 	stw	r10,144(sp)
 401411c:	003e8306 	br	4013b2c <__alt_data_end+0xfc013b2c>
 4014120:	d8801c17 	ldw	r2,112(sp)
 4014124:	dd002117 	ldw	r20,132(sp)
 4014128:	103eb926 	beq	r2,zero,4013c10 <__alt_data_end+0xfc013c10>
 401412c:	d9002017 	ldw	r4,128(sp)
 4014130:	d9801a04 	addi	r6,sp,104
 4014134:	a00b883a 	mov	r5,r20
 4014138:	4012da80 	call	4012da8 <__sprint_r.part.0>
 401413c:	003eb406 	br	4013c10 <__alt_data_end+0xfc013c10>
 4014140:	80c00043 	ldbu	r3,1(r16)
 4014144:	a5000814 	ori	r20,r20,32
 4014148:	84000044 	addi	r16,r16,1
 401414c:	18c03fcc 	andi	r3,r3,255
 4014150:	18c0201c 	xori	r3,r3,128
 4014154:	18ffe004 	addi	r3,r3,-128
 4014158:	003bb706 	br	4013038 <__alt_data_end+0xfc013038>
 401415c:	a809883a 	mov	r4,r21
 4014160:	d8c02a15 	stw	r3,168(sp)
 4014164:	da002b15 	stw	r8,172(sp)
 4014168:	400c3b40 	call	400c3b4 <strlen>
 401416c:	d8c02a17 	ldw	r3,168(sp)
 4014170:	1027883a 	mov	r19,r2
 4014174:	df001d83 	ldbu	fp,118(sp)
 4014178:	d8c02215 	stw	r3,136(sp)
 401417c:	0013883a 	mov	r9,zero
 4014180:	da002b17 	ldw	r8,172(sp)
 4014184:	003c4d06 	br	40132bc <__alt_data_end+0xfc0132bc>
 4014188:	d9402117 	ldw	r5,132(sp)
 401418c:	d9002017 	ldw	r4,128(sp)
 4014190:	d9801a04 	addi	r6,sp,104
 4014194:	da402c15 	stw	r9,176(sp)
 4014198:	4012da80 	call	4012da8 <__sprint_r.part.0>
 401419c:	da402c17 	ldw	r9,176(sp)
 40141a0:	103e9a1e 	bne	r2,zero,4013c0c <__alt_data_end+0xfc013c0c>
 40141a4:	d9401b17 	ldw	r5,108(sp)
 40141a8:	d8801c17 	ldw	r2,112(sp)
 40141ac:	d811883a 	mov	r8,sp
 40141b0:	29000044 	addi	r4,r5,1
 40141b4:	003e4206 	br	4013ac0 <__alt_data_end+0xfc013ac0>
 40141b8:	d9401b17 	ldw	r5,108(sp)
 40141bc:	010100b4 	movhi	r4,1026
 40141c0:	21310104 	addi	r4,r4,-15356
 40141c4:	d9002415 	stw	r4,144(sp)
 40141c8:	29400044 	addi	r5,r5,1
 40141cc:	003c6d06 	br	4013384 <__alt_data_end+0xfc013384>
 40141d0:	0039883a 	mov	fp,zero
 40141d4:	00800084 	movi	r2,2
 40141d8:	10803fcc 	andi	r2,r2,255
 40141dc:	01000044 	movi	r4,1
 40141e0:	11001e26 	beq	r2,r4,401425c <___vfiprintf_internal_r+0x13a0>
 40141e4:	01000084 	movi	r4,2
 40141e8:	11001e1e 	bne	r2,r4,4014264 <___vfiprintf_internal_r+0x13a8>
 40141ec:	1829883a 	mov	r20,r3
 40141f0:	003eea06 	br	4013d9c <__alt_data_end+0xfc013d9c>
 40141f4:	a007883a 	mov	r3,r20
 40141f8:	00800044 	movi	r2,1
 40141fc:	003ff606 	br	40141d8 <__alt_data_end+0xfc0141d8>
 4014200:	00800184 	movi	r2,6
 4014204:	1240012e 	bgeu	r2,r9,401420c <___vfiprintf_internal_r+0x1350>
 4014208:	1013883a 	mov	r9,r2
 401420c:	4827883a 	mov	r19,r9
 4014210:	4825883a 	mov	r18,r9
 4014214:	48001516 	blt	r9,zero,401426c <___vfiprintf_internal_r+0x13b0>
 4014218:	054100b4 	movhi	r21,1026
 401421c:	d8c02215 	stw	r3,136(sp)
 4014220:	ad70a204 	addi	r21,r21,-15736
 4014224:	003d1406 	br	4013678 <__alt_data_end+0xfc013678>
 4014228:	028100b4 	movhi	r10,1026
 401422c:	52b0fd04 	addi	r10,r10,-15372
 4014230:	da802415 	stw	r10,144(sp)
 4014234:	200d883a 	mov	r6,r4
 4014238:	003c9106 	br	4013480 <__alt_data_end+0xfc013480>
 401423c:	5021883a 	mov	r16,r10
 4014240:	0013883a 	mov	r9,zero
 4014244:	003b7d06 	br	401303c <__alt_data_end+0xfc01303c>
 4014248:	4827883a 	mov	r19,r9
 401424c:	df001d83 	ldbu	fp,118(sp)
 4014250:	d8c02215 	stw	r3,136(sp)
 4014254:	0013883a 	mov	r9,zero
 4014258:	003c1806 	br	40132bc <__alt_data_end+0xfc0132bc>
 401425c:	1829883a 	mov	r20,r3
 4014260:	003d1806 	br	40136c4 <__alt_data_end+0xfc0136c4>
 4014264:	1829883a 	mov	r20,r3
 4014268:	003ccd06 	br	40135a0 <__alt_data_end+0xfc0135a0>
 401426c:	0025883a 	mov	r18,zero
 4014270:	003fe906 	br	4014218 <__alt_data_end+0xfc014218>
 4014274:	d8802217 	ldw	r2,136(sp)
 4014278:	80c00043 	ldbu	r3,1(r16)
 401427c:	5021883a 	mov	r16,r10
 4014280:	12400017 	ldw	r9,0(r2)
 4014284:	10800104 	addi	r2,r2,4
 4014288:	d8802215 	stw	r2,136(sp)
 401428c:	483faf0e 	bge	r9,zero,401414c <__alt_data_end+0xfc01414c>
 4014290:	18c03fcc 	andi	r3,r3,255
 4014294:	18c0201c 	xori	r3,r3,128
 4014298:	027fffc4 	movi	r9,-1
 401429c:	18ffe004 	addi	r3,r3,-128
 40142a0:	003b6506 	br	4013038 <__alt_data_end+0xfc013038>
 40142a4:	d9c01d85 	stb	r7,118(sp)
 40142a8:	003ca006 	br	401352c <__alt_data_end+0xfc01352c>
 40142ac:	d9c01d85 	stb	r7,118(sp)
 40142b0:	003cad06 	br	4013568 <__alt_data_end+0xfc013568>
 40142b4:	d9c01d85 	stb	r7,118(sp)
 40142b8:	003d7d06 	br	40138b0 <__alt_data_end+0xfc0138b0>
 40142bc:	d9c01d85 	stb	r7,118(sp)
 40142c0:	003d5f06 	br	4013840 <__alt_data_end+0xfc013840>
 40142c4:	a080004c 	andi	r2,r20,1
 40142c8:	0039883a 	mov	fp,zero
 40142cc:	10000526 	beq	r2,zero,40142e4 <___vfiprintf_internal_r+0x1428>
 40142d0:	00800c04 	movi	r2,48
 40142d4:	d88019c5 	stb	r2,103(sp)
 40142d8:	dcc02717 	ldw	r19,156(sp)
 40142dc:	dd4019c4 	addi	r21,sp,103
 40142e0:	003bf606 	br	40132bc <__alt_data_end+0xfc0132bc>
 40142e4:	0027883a 	mov	r19,zero
 40142e8:	dd401a04 	addi	r21,sp,104
 40142ec:	003bf306 	br	40132bc <__alt_data_end+0xfc0132bc>
 40142f0:	d9c01d85 	stb	r7,118(sp)
 40142f4:	003dc806 	br	4013a18 <__alt_data_end+0xfc013a18>
 40142f8:	d9c01d85 	stb	r7,118(sp)
 40142fc:	003d3a06 	br	40137e8 <__alt_data_end+0xfc0137e8>
 4014300:	d9c01d85 	stb	r7,118(sp)
 4014304:	003d2a06 	br	40137b0 <__alt_data_end+0xfc0137b0>
 4014308:	d9c01d85 	stb	r7,118(sp)
 401430c:	003cde06 	br	4013688 <__alt_data_end+0xfc013688>
 4014310:	d9c01d85 	stb	r7,118(sp)
 4014314:	003cbc06 	br	4013608 <__alt_data_end+0xfc013608>

04014318 <__vfiprintf_internal>:
 4014318:	008100f4 	movhi	r2,1027
 401431c:	10a3e504 	addi	r2,r2,-28780
 4014320:	300f883a 	mov	r7,r6
 4014324:	280d883a 	mov	r6,r5
 4014328:	200b883a 	mov	r5,r4
 401432c:	11000017 	ldw	r4,0(r2)
 4014330:	4012ebc1 	jmpi	4012ebc <___vfiprintf_internal_r>

04014334 <__sbprintf>:
 4014334:	2880030b 	ldhu	r2,12(r5)
 4014338:	2ac01917 	ldw	r11,100(r5)
 401433c:	2a80038b 	ldhu	r10,14(r5)
 4014340:	2a400717 	ldw	r9,28(r5)
 4014344:	2a000917 	ldw	r8,36(r5)
 4014348:	defee204 	addi	sp,sp,-1144
 401434c:	00c10004 	movi	r3,1024
 4014350:	dc011a15 	stw	r16,1128(sp)
 4014354:	10bfff4c 	andi	r2,r2,65533
 4014358:	2821883a 	mov	r16,r5
 401435c:	d8cb883a 	add	r5,sp,r3
 4014360:	dc811c15 	stw	r18,1136(sp)
 4014364:	dc411b15 	stw	r17,1132(sp)
 4014368:	dfc11d15 	stw	ra,1140(sp)
 401436c:	2025883a 	mov	r18,r4
 4014370:	d881030d 	sth	r2,1036(sp)
 4014374:	dac11915 	stw	r11,1124(sp)
 4014378:	da81038d 	sth	r10,1038(sp)
 401437c:	da410715 	stw	r9,1052(sp)
 4014380:	da010915 	stw	r8,1060(sp)
 4014384:	dec10015 	stw	sp,1024(sp)
 4014388:	dec10415 	stw	sp,1040(sp)
 401438c:	d8c10215 	stw	r3,1032(sp)
 4014390:	d8c10515 	stw	r3,1044(sp)
 4014394:	d8010615 	stw	zero,1048(sp)
 4014398:	4012ebc0 	call	4012ebc <___vfiprintf_internal_r>
 401439c:	1023883a 	mov	r17,r2
 40143a0:	10000416 	blt	r2,zero,40143b4 <__sbprintf+0x80>
 40143a4:	d9410004 	addi	r5,sp,1024
 40143a8:	9009883a 	mov	r4,r18
 40143ac:	401031c0 	call	401031c <_fflush_r>
 40143b0:	10000d1e 	bne	r2,zero,40143e8 <__sbprintf+0xb4>
 40143b4:	d881030b 	ldhu	r2,1036(sp)
 40143b8:	1080100c 	andi	r2,r2,64
 40143bc:	10000326 	beq	r2,zero,40143cc <__sbprintf+0x98>
 40143c0:	8080030b 	ldhu	r2,12(r16)
 40143c4:	10801014 	ori	r2,r2,64
 40143c8:	8080030d 	sth	r2,12(r16)
 40143cc:	8805883a 	mov	r2,r17
 40143d0:	dfc11d17 	ldw	ra,1140(sp)
 40143d4:	dc811c17 	ldw	r18,1136(sp)
 40143d8:	dc411b17 	ldw	r17,1132(sp)
 40143dc:	dc011a17 	ldw	r16,1128(sp)
 40143e0:	dec11e04 	addi	sp,sp,1144
 40143e4:	f800283a 	ret
 40143e8:	047fffc4 	movi	r17,-1
 40143ec:	003ff106 	br	40143b4 <__alt_data_end+0xfc0143b4>

040143f0 <_write_r>:
 40143f0:	defffd04 	addi	sp,sp,-12
 40143f4:	2805883a 	mov	r2,r5
 40143f8:	dc000015 	stw	r16,0(sp)
 40143fc:	040100f4 	movhi	r16,1027
 4014400:	dc400115 	stw	r17,4(sp)
 4014404:	300b883a 	mov	r5,r6
 4014408:	8416ae04 	addi	r16,r16,23224
 401440c:	2023883a 	mov	r17,r4
 4014410:	380d883a 	mov	r6,r7
 4014414:	1009883a 	mov	r4,r2
 4014418:	dfc00215 	stw	ra,8(sp)
 401441c:	80000015 	stw	zero,0(r16)
 4014420:	401892c0 	call	401892c <write>
 4014424:	00ffffc4 	movi	r3,-1
 4014428:	10c00526 	beq	r2,r3,4014440 <_write_r+0x50>
 401442c:	dfc00217 	ldw	ra,8(sp)
 4014430:	dc400117 	ldw	r17,4(sp)
 4014434:	dc000017 	ldw	r16,0(sp)
 4014438:	dec00304 	addi	sp,sp,12
 401443c:	f800283a 	ret
 4014440:	80c00017 	ldw	r3,0(r16)
 4014444:	183ff926 	beq	r3,zero,401442c <__alt_data_end+0xfc01442c>
 4014448:	88c00015 	stw	r3,0(r17)
 401444c:	003ff706 	br	401442c <__alt_data_end+0xfc01442c>

04014450 <_close_r>:
 4014450:	defffd04 	addi	sp,sp,-12
 4014454:	dc000015 	stw	r16,0(sp)
 4014458:	040100f4 	movhi	r16,1027
 401445c:	dc400115 	stw	r17,4(sp)
 4014460:	8416ae04 	addi	r16,r16,23224
 4014464:	2023883a 	mov	r17,r4
 4014468:	2809883a 	mov	r4,r5
 401446c:	dfc00215 	stw	ra,8(sp)
 4014470:	80000015 	stw	zero,0(r16)
 4014474:	4017e780 	call	4017e78 <close>
 4014478:	00ffffc4 	movi	r3,-1
 401447c:	10c00526 	beq	r2,r3,4014494 <_close_r+0x44>
 4014480:	dfc00217 	ldw	ra,8(sp)
 4014484:	dc400117 	ldw	r17,4(sp)
 4014488:	dc000017 	ldw	r16,0(sp)
 401448c:	dec00304 	addi	sp,sp,12
 4014490:	f800283a 	ret
 4014494:	80c00017 	ldw	r3,0(r16)
 4014498:	183ff926 	beq	r3,zero,4014480 <__alt_data_end+0xfc014480>
 401449c:	88c00015 	stw	r3,0(r17)
 40144a0:	003ff706 	br	4014480 <__alt_data_end+0xfc014480>

040144a4 <_calloc_r>:
 40144a4:	298b383a 	mul	r5,r5,r6
 40144a8:	defffe04 	addi	sp,sp,-8
 40144ac:	dfc00115 	stw	ra,4(sp)
 40144b0:	dc000015 	stw	r16,0(sp)
 40144b4:	400b3480 	call	400b348 <_malloc_r>
 40144b8:	10002926 	beq	r2,zero,4014560 <_calloc_r+0xbc>
 40144bc:	11bfff17 	ldw	r6,-4(r2)
 40144c0:	1021883a 	mov	r16,r2
 40144c4:	00bfff04 	movi	r2,-4
 40144c8:	308c703a 	and	r6,r6,r2
 40144cc:	00c00904 	movi	r3,36
 40144d0:	308d883a 	add	r6,r6,r2
 40144d4:	19801636 	bltu	r3,r6,4014530 <_calloc_r+0x8c>
 40144d8:	008004c4 	movi	r2,19
 40144dc:	11800b2e 	bgeu	r2,r6,401450c <_calloc_r+0x68>
 40144e0:	80000015 	stw	zero,0(r16)
 40144e4:	80000115 	stw	zero,4(r16)
 40144e8:	008006c4 	movi	r2,27
 40144ec:	11801a2e 	bgeu	r2,r6,4014558 <_calloc_r+0xb4>
 40144f0:	80000215 	stw	zero,8(r16)
 40144f4:	80000315 	stw	zero,12(r16)
 40144f8:	30c0151e 	bne	r6,r3,4014550 <_calloc_r+0xac>
 40144fc:	80000415 	stw	zero,16(r16)
 4014500:	80800604 	addi	r2,r16,24
 4014504:	80000515 	stw	zero,20(r16)
 4014508:	00000106 	br	4014510 <_calloc_r+0x6c>
 401450c:	8005883a 	mov	r2,r16
 4014510:	10000015 	stw	zero,0(r2)
 4014514:	10000115 	stw	zero,4(r2)
 4014518:	10000215 	stw	zero,8(r2)
 401451c:	8005883a 	mov	r2,r16
 4014520:	dfc00117 	ldw	ra,4(sp)
 4014524:	dc000017 	ldw	r16,0(sp)
 4014528:	dec00204 	addi	sp,sp,8
 401452c:	f800283a 	ret
 4014530:	000b883a 	mov	r5,zero
 4014534:	8009883a 	mov	r4,r16
 4014538:	400bd180 	call	400bd18 <memset>
 401453c:	8005883a 	mov	r2,r16
 4014540:	dfc00117 	ldw	ra,4(sp)
 4014544:	dc000017 	ldw	r16,0(sp)
 4014548:	dec00204 	addi	sp,sp,8
 401454c:	f800283a 	ret
 4014550:	80800404 	addi	r2,r16,16
 4014554:	003fee06 	br	4014510 <__alt_data_end+0xfc014510>
 4014558:	80800204 	addi	r2,r16,8
 401455c:	003fec06 	br	4014510 <__alt_data_end+0xfc014510>
 4014560:	0005883a 	mov	r2,zero
 4014564:	003fee06 	br	4014520 <__alt_data_end+0xfc014520>

04014568 <_fclose_r>:
 4014568:	28003926 	beq	r5,zero,4014650 <_fclose_r+0xe8>
 401456c:	defffc04 	addi	sp,sp,-16
 4014570:	dc400115 	stw	r17,4(sp)
 4014574:	dc000015 	stw	r16,0(sp)
 4014578:	dfc00315 	stw	ra,12(sp)
 401457c:	dc800215 	stw	r18,8(sp)
 4014580:	2023883a 	mov	r17,r4
 4014584:	2821883a 	mov	r16,r5
 4014588:	20000226 	beq	r4,zero,4014594 <_fclose_r+0x2c>
 401458c:	20800e17 	ldw	r2,56(r4)
 4014590:	10002726 	beq	r2,zero,4014630 <_fclose_r+0xc8>
 4014594:	8080030f 	ldh	r2,12(r16)
 4014598:	1000071e 	bne	r2,zero,40145b8 <_fclose_r+0x50>
 401459c:	0005883a 	mov	r2,zero
 40145a0:	dfc00317 	ldw	ra,12(sp)
 40145a4:	dc800217 	ldw	r18,8(sp)
 40145a8:	dc400117 	ldw	r17,4(sp)
 40145ac:	dc000017 	ldw	r16,0(sp)
 40145b0:	dec00404 	addi	sp,sp,16
 40145b4:	f800283a 	ret
 40145b8:	800b883a 	mov	r5,r16
 40145bc:	8809883a 	mov	r4,r17
 40145c0:	40101000 	call	4010100 <__sflush_r>
 40145c4:	1025883a 	mov	r18,r2
 40145c8:	80800b17 	ldw	r2,44(r16)
 40145cc:	10000426 	beq	r2,zero,40145e0 <_fclose_r+0x78>
 40145d0:	81400717 	ldw	r5,28(r16)
 40145d4:	8809883a 	mov	r4,r17
 40145d8:	103ee83a 	callr	r2
 40145dc:	10001616 	blt	r2,zero,4014638 <_fclose_r+0xd0>
 40145e0:	8080030b 	ldhu	r2,12(r16)
 40145e4:	1080200c 	andi	r2,r2,128
 40145e8:	1000151e 	bne	r2,zero,4014640 <_fclose_r+0xd8>
 40145ec:	81400c17 	ldw	r5,48(r16)
 40145f0:	28000526 	beq	r5,zero,4014608 <_fclose_r+0xa0>
 40145f4:	80801004 	addi	r2,r16,64
 40145f8:	28800226 	beq	r5,r2,4014604 <_fclose_r+0x9c>
 40145fc:	8809883a 	mov	r4,r17
 4014600:	401086c0 	call	401086c <_free_r>
 4014604:	80000c15 	stw	zero,48(r16)
 4014608:	81401117 	ldw	r5,68(r16)
 401460c:	28000326 	beq	r5,zero,401461c <_fclose_r+0xb4>
 4014610:	8809883a 	mov	r4,r17
 4014614:	401086c0 	call	401086c <_free_r>
 4014618:	80001115 	stw	zero,68(r16)
 401461c:	40107080 	call	4010708 <__sfp_lock_acquire>
 4014620:	8000030d 	sth	zero,12(r16)
 4014624:	401070c0 	call	401070c <__sfp_lock_release>
 4014628:	9005883a 	mov	r2,r18
 401462c:	003fdc06 	br	40145a0 <__alt_data_end+0xfc0145a0>
 4014630:	40106f80 	call	40106f8 <__sinit>
 4014634:	003fd706 	br	4014594 <__alt_data_end+0xfc014594>
 4014638:	04bfffc4 	movi	r18,-1
 401463c:	003fe806 	br	40145e0 <__alt_data_end+0xfc0145e0>
 4014640:	81400417 	ldw	r5,16(r16)
 4014644:	8809883a 	mov	r4,r17
 4014648:	401086c0 	call	401086c <_free_r>
 401464c:	003fe706 	br	40145ec <__alt_data_end+0xfc0145ec>
 4014650:	0005883a 	mov	r2,zero
 4014654:	f800283a 	ret

04014658 <fclose>:
 4014658:	008100f4 	movhi	r2,1027
 401465c:	10a3e504 	addi	r2,r2,-28780
 4014660:	200b883a 	mov	r5,r4
 4014664:	11000017 	ldw	r4,0(r2)
 4014668:	40145681 	jmpi	4014568 <_fclose_r>

0401466c <__fputwc>:
 401466c:	defff804 	addi	sp,sp,-32
 4014670:	dcc00415 	stw	r19,16(sp)
 4014674:	dc800315 	stw	r18,12(sp)
 4014678:	dc000115 	stw	r16,4(sp)
 401467c:	dfc00715 	stw	ra,28(sp)
 4014680:	dd400615 	stw	r21,24(sp)
 4014684:	dd000515 	stw	r20,20(sp)
 4014688:	dc400215 	stw	r17,8(sp)
 401468c:	2027883a 	mov	r19,r4
 4014690:	2825883a 	mov	r18,r5
 4014694:	3021883a 	mov	r16,r6
 4014698:	40112480 	call	4011248 <__locale_mb_cur_max>
 401469c:	00c00044 	movi	r3,1
 40146a0:	10c03e26 	beq	r2,r3,401479c <__fputwc+0x130>
 40146a4:	81c01704 	addi	r7,r16,92
 40146a8:	900d883a 	mov	r6,r18
 40146ac:	d80b883a 	mov	r5,sp
 40146b0:	9809883a 	mov	r4,r19
 40146b4:	4014b3c0 	call	4014b3c <_wcrtomb_r>
 40146b8:	1029883a 	mov	r20,r2
 40146bc:	00bfffc4 	movi	r2,-1
 40146c0:	a0802026 	beq	r20,r2,4014744 <__fputwc+0xd8>
 40146c4:	d9400003 	ldbu	r5,0(sp)
 40146c8:	a0001c26 	beq	r20,zero,401473c <__fputwc+0xd0>
 40146cc:	0023883a 	mov	r17,zero
 40146d0:	05400284 	movi	r21,10
 40146d4:	00000906 	br	40146fc <__fputwc+0x90>
 40146d8:	80800017 	ldw	r2,0(r16)
 40146dc:	11400005 	stb	r5,0(r2)
 40146e0:	80c00017 	ldw	r3,0(r16)
 40146e4:	18c00044 	addi	r3,r3,1
 40146e8:	80c00015 	stw	r3,0(r16)
 40146ec:	8c400044 	addi	r17,r17,1
 40146f0:	dc45883a 	add	r2,sp,r17
 40146f4:	8d00112e 	bgeu	r17,r20,401473c <__fputwc+0xd0>
 40146f8:	11400003 	ldbu	r5,0(r2)
 40146fc:	80c00217 	ldw	r3,8(r16)
 4014700:	18ffffc4 	addi	r3,r3,-1
 4014704:	80c00215 	stw	r3,8(r16)
 4014708:	183ff30e 	bge	r3,zero,40146d8 <__alt_data_end+0xfc0146d8>
 401470c:	80800617 	ldw	r2,24(r16)
 4014710:	18801916 	blt	r3,r2,4014778 <__fputwc+0x10c>
 4014714:	80800017 	ldw	r2,0(r16)
 4014718:	11400005 	stb	r5,0(r2)
 401471c:	80800017 	ldw	r2,0(r16)
 4014720:	10c00003 	ldbu	r3,0(r2)
 4014724:	10800044 	addi	r2,r2,1
 4014728:	1d402326 	beq	r3,r21,40147b8 <__fputwc+0x14c>
 401472c:	80800015 	stw	r2,0(r16)
 4014730:	8c400044 	addi	r17,r17,1
 4014734:	dc45883a 	add	r2,sp,r17
 4014738:	8d3fef36 	bltu	r17,r20,40146f8 <__alt_data_end+0xfc0146f8>
 401473c:	9005883a 	mov	r2,r18
 4014740:	00000406 	br	4014754 <__fputwc+0xe8>
 4014744:	80c0030b 	ldhu	r3,12(r16)
 4014748:	a005883a 	mov	r2,r20
 401474c:	18c01014 	ori	r3,r3,64
 4014750:	80c0030d 	sth	r3,12(r16)
 4014754:	dfc00717 	ldw	ra,28(sp)
 4014758:	dd400617 	ldw	r21,24(sp)
 401475c:	dd000517 	ldw	r20,20(sp)
 4014760:	dcc00417 	ldw	r19,16(sp)
 4014764:	dc800317 	ldw	r18,12(sp)
 4014768:	dc400217 	ldw	r17,8(sp)
 401476c:	dc000117 	ldw	r16,4(sp)
 4014770:	dec00804 	addi	sp,sp,32
 4014774:	f800283a 	ret
 4014778:	800d883a 	mov	r6,r16
 401477c:	29403fcc 	andi	r5,r5,255
 4014780:	9809883a 	mov	r4,r19
 4014784:	40149e40 	call	40149e4 <__swbuf_r>
 4014788:	10bfffe0 	cmpeqi	r2,r2,-1
 401478c:	10803fcc 	andi	r2,r2,255
 4014790:	103fd626 	beq	r2,zero,40146ec <__alt_data_end+0xfc0146ec>
 4014794:	00bfffc4 	movi	r2,-1
 4014798:	003fee06 	br	4014754 <__alt_data_end+0xfc014754>
 401479c:	90ffffc4 	addi	r3,r18,-1
 40147a0:	01003f84 	movi	r4,254
 40147a4:	20ffbf36 	bltu	r4,r3,40146a4 <__alt_data_end+0xfc0146a4>
 40147a8:	900b883a 	mov	r5,r18
 40147ac:	dc800005 	stb	r18,0(sp)
 40147b0:	1029883a 	mov	r20,r2
 40147b4:	003fc506 	br	40146cc <__alt_data_end+0xfc0146cc>
 40147b8:	800d883a 	mov	r6,r16
 40147bc:	a80b883a 	mov	r5,r21
 40147c0:	9809883a 	mov	r4,r19
 40147c4:	40149e40 	call	40149e4 <__swbuf_r>
 40147c8:	10bfffe0 	cmpeqi	r2,r2,-1
 40147cc:	003fef06 	br	401478c <__alt_data_end+0xfc01478c>

040147d0 <_fputwc_r>:
 40147d0:	3080030b 	ldhu	r2,12(r6)
 40147d4:	10c8000c 	andi	r3,r2,8192
 40147d8:	1800051e 	bne	r3,zero,40147f0 <_fputwc_r+0x20>
 40147dc:	30c01917 	ldw	r3,100(r6)
 40147e0:	10880014 	ori	r2,r2,8192
 40147e4:	3080030d 	sth	r2,12(r6)
 40147e8:	18880014 	ori	r2,r3,8192
 40147ec:	30801915 	stw	r2,100(r6)
 40147f0:	401466c1 	jmpi	401466c <__fputwc>

040147f4 <fputwc>:
 40147f4:	008100f4 	movhi	r2,1027
 40147f8:	defffc04 	addi	sp,sp,-16
 40147fc:	10a3e504 	addi	r2,r2,-28780
 4014800:	dc000115 	stw	r16,4(sp)
 4014804:	14000017 	ldw	r16,0(r2)
 4014808:	dc400215 	stw	r17,8(sp)
 401480c:	dfc00315 	stw	ra,12(sp)
 4014810:	2023883a 	mov	r17,r4
 4014814:	80000226 	beq	r16,zero,4014820 <fputwc+0x2c>
 4014818:	80800e17 	ldw	r2,56(r16)
 401481c:	10001026 	beq	r2,zero,4014860 <fputwc+0x6c>
 4014820:	2880030b 	ldhu	r2,12(r5)
 4014824:	10c8000c 	andi	r3,r2,8192
 4014828:	1800051e 	bne	r3,zero,4014840 <fputwc+0x4c>
 401482c:	28c01917 	ldw	r3,100(r5)
 4014830:	10880014 	ori	r2,r2,8192
 4014834:	2880030d 	sth	r2,12(r5)
 4014838:	18880014 	ori	r2,r3,8192
 401483c:	28801915 	stw	r2,100(r5)
 4014840:	280d883a 	mov	r6,r5
 4014844:	8009883a 	mov	r4,r16
 4014848:	880b883a 	mov	r5,r17
 401484c:	dfc00317 	ldw	ra,12(sp)
 4014850:	dc400217 	ldw	r17,8(sp)
 4014854:	dc000117 	ldw	r16,4(sp)
 4014858:	dec00404 	addi	sp,sp,16
 401485c:	401466c1 	jmpi	401466c <__fputwc>
 4014860:	8009883a 	mov	r4,r16
 4014864:	d9400015 	stw	r5,0(sp)
 4014868:	40106f80 	call	40106f8 <__sinit>
 401486c:	d9400017 	ldw	r5,0(sp)
 4014870:	003feb06 	br	4014820 <__alt_data_end+0xfc014820>

04014874 <_fstat_r>:
 4014874:	defffd04 	addi	sp,sp,-12
 4014878:	2805883a 	mov	r2,r5
 401487c:	dc000015 	stw	r16,0(sp)
 4014880:	040100f4 	movhi	r16,1027
 4014884:	dc400115 	stw	r17,4(sp)
 4014888:	8416ae04 	addi	r16,r16,23224
 401488c:	2023883a 	mov	r17,r4
 4014890:	300b883a 	mov	r5,r6
 4014894:	1009883a 	mov	r4,r2
 4014898:	dfc00215 	stw	ra,8(sp)
 401489c:	80000015 	stw	zero,0(r16)
 40148a0:	4017fe40 	call	4017fe4 <fstat>
 40148a4:	00ffffc4 	movi	r3,-1
 40148a8:	10c00526 	beq	r2,r3,40148c0 <_fstat_r+0x4c>
 40148ac:	dfc00217 	ldw	ra,8(sp)
 40148b0:	dc400117 	ldw	r17,4(sp)
 40148b4:	dc000017 	ldw	r16,0(sp)
 40148b8:	dec00304 	addi	sp,sp,12
 40148bc:	f800283a 	ret
 40148c0:	80c00017 	ldw	r3,0(r16)
 40148c4:	183ff926 	beq	r3,zero,40148ac <__alt_data_end+0xfc0148ac>
 40148c8:	88c00015 	stw	r3,0(r17)
 40148cc:	003ff706 	br	40148ac <__alt_data_end+0xfc0148ac>

040148d0 <_isatty_r>:
 40148d0:	defffd04 	addi	sp,sp,-12
 40148d4:	dc000015 	stw	r16,0(sp)
 40148d8:	040100f4 	movhi	r16,1027
 40148dc:	dc400115 	stw	r17,4(sp)
 40148e0:	8416ae04 	addi	r16,r16,23224
 40148e4:	2023883a 	mov	r17,r4
 40148e8:	2809883a 	mov	r4,r5
 40148ec:	dfc00215 	stw	ra,8(sp)
 40148f0:	80000015 	stw	zero,0(r16)
 40148f4:	40180f00 	call	40180f0 <isatty>
 40148f8:	00ffffc4 	movi	r3,-1
 40148fc:	10c00526 	beq	r2,r3,4014914 <_isatty_r+0x44>
 4014900:	dfc00217 	ldw	ra,8(sp)
 4014904:	dc400117 	ldw	r17,4(sp)
 4014908:	dc000017 	ldw	r16,0(sp)
 401490c:	dec00304 	addi	sp,sp,12
 4014910:	f800283a 	ret
 4014914:	80c00017 	ldw	r3,0(r16)
 4014918:	183ff926 	beq	r3,zero,4014900 <__alt_data_end+0xfc014900>
 401491c:	88c00015 	stw	r3,0(r17)
 4014920:	003ff706 	br	4014900 <__alt_data_end+0xfc014900>

04014924 <_lseek_r>:
 4014924:	defffd04 	addi	sp,sp,-12
 4014928:	2805883a 	mov	r2,r5
 401492c:	dc000015 	stw	r16,0(sp)
 4014930:	040100f4 	movhi	r16,1027
 4014934:	dc400115 	stw	r17,4(sp)
 4014938:	300b883a 	mov	r5,r6
 401493c:	8416ae04 	addi	r16,r16,23224
 4014940:	2023883a 	mov	r17,r4
 4014944:	380d883a 	mov	r6,r7
 4014948:	1009883a 	mov	r4,r2
 401494c:	dfc00215 	stw	ra,8(sp)
 4014950:	80000015 	stw	zero,0(r16)
 4014954:	40184280 	call	4018428 <lseek>
 4014958:	00ffffc4 	movi	r3,-1
 401495c:	10c00526 	beq	r2,r3,4014974 <_lseek_r+0x50>
 4014960:	dfc00217 	ldw	ra,8(sp)
 4014964:	dc400117 	ldw	r17,4(sp)
 4014968:	dc000017 	ldw	r16,0(sp)
 401496c:	dec00304 	addi	sp,sp,12
 4014970:	f800283a 	ret
 4014974:	80c00017 	ldw	r3,0(r16)
 4014978:	183ff926 	beq	r3,zero,4014960 <__alt_data_end+0xfc014960>
 401497c:	88c00015 	stw	r3,0(r17)
 4014980:	003ff706 	br	4014960 <__alt_data_end+0xfc014960>

04014984 <_read_r>:
 4014984:	defffd04 	addi	sp,sp,-12
 4014988:	2805883a 	mov	r2,r5
 401498c:	dc000015 	stw	r16,0(sp)
 4014990:	040100f4 	movhi	r16,1027
 4014994:	dc400115 	stw	r17,4(sp)
 4014998:	300b883a 	mov	r5,r6
 401499c:	8416ae04 	addi	r16,r16,23224
 40149a0:	2023883a 	mov	r17,r4
 40149a4:	380d883a 	mov	r6,r7
 40149a8:	1009883a 	mov	r4,r2
 40149ac:	dfc00215 	stw	ra,8(sp)
 40149b0:	80000015 	stw	zero,0(r16)
 40149b4:	40185fc0 	call	40185fc <read>
 40149b8:	00ffffc4 	movi	r3,-1
 40149bc:	10c00526 	beq	r2,r3,40149d4 <_read_r+0x50>
 40149c0:	dfc00217 	ldw	ra,8(sp)
 40149c4:	dc400117 	ldw	r17,4(sp)
 40149c8:	dc000017 	ldw	r16,0(sp)
 40149cc:	dec00304 	addi	sp,sp,12
 40149d0:	f800283a 	ret
 40149d4:	80c00017 	ldw	r3,0(r16)
 40149d8:	183ff926 	beq	r3,zero,40149c0 <__alt_data_end+0xfc0149c0>
 40149dc:	88c00015 	stw	r3,0(r17)
 40149e0:	003ff706 	br	40149c0 <__alt_data_end+0xfc0149c0>

040149e4 <__swbuf_r>:
 40149e4:	defffb04 	addi	sp,sp,-20
 40149e8:	dcc00315 	stw	r19,12(sp)
 40149ec:	dc800215 	stw	r18,8(sp)
 40149f0:	dc000015 	stw	r16,0(sp)
 40149f4:	dfc00415 	stw	ra,16(sp)
 40149f8:	dc400115 	stw	r17,4(sp)
 40149fc:	2025883a 	mov	r18,r4
 4014a00:	2827883a 	mov	r19,r5
 4014a04:	3021883a 	mov	r16,r6
 4014a08:	20000226 	beq	r4,zero,4014a14 <__swbuf_r+0x30>
 4014a0c:	20800e17 	ldw	r2,56(r4)
 4014a10:	10004226 	beq	r2,zero,4014b1c <__swbuf_r+0x138>
 4014a14:	80800617 	ldw	r2,24(r16)
 4014a18:	8100030b 	ldhu	r4,12(r16)
 4014a1c:	80800215 	stw	r2,8(r16)
 4014a20:	2080020c 	andi	r2,r4,8
 4014a24:	10003626 	beq	r2,zero,4014b00 <__swbuf_r+0x11c>
 4014a28:	80c00417 	ldw	r3,16(r16)
 4014a2c:	18003426 	beq	r3,zero,4014b00 <__swbuf_r+0x11c>
 4014a30:	2088000c 	andi	r2,r4,8192
 4014a34:	9c403fcc 	andi	r17,r19,255
 4014a38:	10001a26 	beq	r2,zero,4014aa4 <__swbuf_r+0xc0>
 4014a3c:	80800017 	ldw	r2,0(r16)
 4014a40:	81000517 	ldw	r4,20(r16)
 4014a44:	10c7c83a 	sub	r3,r2,r3
 4014a48:	1900200e 	bge	r3,r4,4014acc <__swbuf_r+0xe8>
 4014a4c:	18c00044 	addi	r3,r3,1
 4014a50:	81000217 	ldw	r4,8(r16)
 4014a54:	11400044 	addi	r5,r2,1
 4014a58:	81400015 	stw	r5,0(r16)
 4014a5c:	213fffc4 	addi	r4,r4,-1
 4014a60:	81000215 	stw	r4,8(r16)
 4014a64:	14c00005 	stb	r19,0(r2)
 4014a68:	80800517 	ldw	r2,20(r16)
 4014a6c:	10c01e26 	beq	r2,r3,4014ae8 <__swbuf_r+0x104>
 4014a70:	8080030b 	ldhu	r2,12(r16)
 4014a74:	1080004c 	andi	r2,r2,1
 4014a78:	10000226 	beq	r2,zero,4014a84 <__swbuf_r+0xa0>
 4014a7c:	00800284 	movi	r2,10
 4014a80:	88801926 	beq	r17,r2,4014ae8 <__swbuf_r+0x104>
 4014a84:	8805883a 	mov	r2,r17
 4014a88:	dfc00417 	ldw	ra,16(sp)
 4014a8c:	dcc00317 	ldw	r19,12(sp)
 4014a90:	dc800217 	ldw	r18,8(sp)
 4014a94:	dc400117 	ldw	r17,4(sp)
 4014a98:	dc000017 	ldw	r16,0(sp)
 4014a9c:	dec00504 	addi	sp,sp,20
 4014aa0:	f800283a 	ret
 4014aa4:	81401917 	ldw	r5,100(r16)
 4014aa8:	00b7ffc4 	movi	r2,-8193
 4014aac:	21080014 	ori	r4,r4,8192
 4014ab0:	2884703a 	and	r2,r5,r2
 4014ab4:	80801915 	stw	r2,100(r16)
 4014ab8:	80800017 	ldw	r2,0(r16)
 4014abc:	8100030d 	sth	r4,12(r16)
 4014ac0:	81000517 	ldw	r4,20(r16)
 4014ac4:	10c7c83a 	sub	r3,r2,r3
 4014ac8:	193fe016 	blt	r3,r4,4014a4c <__alt_data_end+0xfc014a4c>
 4014acc:	800b883a 	mov	r5,r16
 4014ad0:	9009883a 	mov	r4,r18
 4014ad4:	401031c0 	call	401031c <_fflush_r>
 4014ad8:	1000071e 	bne	r2,zero,4014af8 <__swbuf_r+0x114>
 4014adc:	80800017 	ldw	r2,0(r16)
 4014ae0:	00c00044 	movi	r3,1
 4014ae4:	003fda06 	br	4014a50 <__alt_data_end+0xfc014a50>
 4014ae8:	800b883a 	mov	r5,r16
 4014aec:	9009883a 	mov	r4,r18
 4014af0:	401031c0 	call	401031c <_fflush_r>
 4014af4:	103fe326 	beq	r2,zero,4014a84 <__alt_data_end+0xfc014a84>
 4014af8:	00bfffc4 	movi	r2,-1
 4014afc:	003fe206 	br	4014a88 <__alt_data_end+0xfc014a88>
 4014b00:	800b883a 	mov	r5,r16
 4014b04:	9009883a 	mov	r4,r18
 4014b08:	400e7240 	call	400e724 <__swsetup_r>
 4014b0c:	103ffa1e 	bne	r2,zero,4014af8 <__alt_data_end+0xfc014af8>
 4014b10:	8100030b 	ldhu	r4,12(r16)
 4014b14:	80c00417 	ldw	r3,16(r16)
 4014b18:	003fc506 	br	4014a30 <__alt_data_end+0xfc014a30>
 4014b1c:	40106f80 	call	40106f8 <__sinit>
 4014b20:	003fbc06 	br	4014a14 <__alt_data_end+0xfc014a14>

04014b24 <__swbuf>:
 4014b24:	008100f4 	movhi	r2,1027
 4014b28:	10a3e504 	addi	r2,r2,-28780
 4014b2c:	280d883a 	mov	r6,r5
 4014b30:	200b883a 	mov	r5,r4
 4014b34:	11000017 	ldw	r4,0(r2)
 4014b38:	40149e41 	jmpi	40149e4 <__swbuf_r>

04014b3c <_wcrtomb_r>:
 4014b3c:	defff604 	addi	sp,sp,-40
 4014b40:	008100f4 	movhi	r2,1027
 4014b44:	dc800815 	stw	r18,32(sp)
 4014b48:	dc400715 	stw	r17,28(sp)
 4014b4c:	dc000615 	stw	r16,24(sp)
 4014b50:	10a3e904 	addi	r2,r2,-28764
 4014b54:	dfc00915 	stw	ra,36(sp)
 4014b58:	2021883a 	mov	r16,r4
 4014b5c:	3823883a 	mov	r17,r7
 4014b60:	14800017 	ldw	r18,0(r2)
 4014b64:	28001426 	beq	r5,zero,4014bb8 <_wcrtomb_r+0x7c>
 4014b68:	d9400415 	stw	r5,16(sp)
 4014b6c:	d9800515 	stw	r6,20(sp)
 4014b70:	401123c0 	call	401123c <__locale_charset>
 4014b74:	d9800517 	ldw	r6,20(sp)
 4014b78:	d9400417 	ldw	r5,16(sp)
 4014b7c:	100f883a 	mov	r7,r2
 4014b80:	dc400015 	stw	r17,0(sp)
 4014b84:	8009883a 	mov	r4,r16
 4014b88:	903ee83a 	callr	r18
 4014b8c:	00ffffc4 	movi	r3,-1
 4014b90:	10c0031e 	bne	r2,r3,4014ba0 <_wcrtomb_r+0x64>
 4014b94:	88000015 	stw	zero,0(r17)
 4014b98:	00c02284 	movi	r3,138
 4014b9c:	80c00015 	stw	r3,0(r16)
 4014ba0:	dfc00917 	ldw	ra,36(sp)
 4014ba4:	dc800817 	ldw	r18,32(sp)
 4014ba8:	dc400717 	ldw	r17,28(sp)
 4014bac:	dc000617 	ldw	r16,24(sp)
 4014bb0:	dec00a04 	addi	sp,sp,40
 4014bb4:	f800283a 	ret
 4014bb8:	401123c0 	call	401123c <__locale_charset>
 4014bbc:	100f883a 	mov	r7,r2
 4014bc0:	dc400015 	stw	r17,0(sp)
 4014bc4:	000d883a 	mov	r6,zero
 4014bc8:	d9400104 	addi	r5,sp,4
 4014bcc:	8009883a 	mov	r4,r16
 4014bd0:	903ee83a 	callr	r18
 4014bd4:	003fed06 	br	4014b8c <__alt_data_end+0xfc014b8c>

04014bd8 <wcrtomb>:
 4014bd8:	defff604 	addi	sp,sp,-40
 4014bdc:	008100f4 	movhi	r2,1027
 4014be0:	dc800615 	stw	r18,24(sp)
 4014be4:	dc400515 	stw	r17,20(sp)
 4014be8:	10a3e504 	addi	r2,r2,-28780
 4014bec:	dfc00915 	stw	ra,36(sp)
 4014bf0:	dd000815 	stw	r20,32(sp)
 4014bf4:	dcc00715 	stw	r19,28(sp)
 4014bf8:	dc000415 	stw	r16,16(sp)
 4014bfc:	3025883a 	mov	r18,r6
 4014c00:	14400017 	ldw	r17,0(r2)
 4014c04:	20001926 	beq	r4,zero,4014c6c <wcrtomb+0x94>
 4014c08:	008100f4 	movhi	r2,1027
 4014c0c:	10a3e904 	addi	r2,r2,-28764
 4014c10:	15000017 	ldw	r20,0(r2)
 4014c14:	2021883a 	mov	r16,r4
 4014c18:	2827883a 	mov	r19,r5
 4014c1c:	401123c0 	call	401123c <__locale_charset>
 4014c20:	100f883a 	mov	r7,r2
 4014c24:	dc800015 	stw	r18,0(sp)
 4014c28:	980d883a 	mov	r6,r19
 4014c2c:	800b883a 	mov	r5,r16
 4014c30:	8809883a 	mov	r4,r17
 4014c34:	a03ee83a 	callr	r20
 4014c38:	00ffffc4 	movi	r3,-1
 4014c3c:	10c0031e 	bne	r2,r3,4014c4c <wcrtomb+0x74>
 4014c40:	90000015 	stw	zero,0(r18)
 4014c44:	00c02284 	movi	r3,138
 4014c48:	88c00015 	stw	r3,0(r17)
 4014c4c:	dfc00917 	ldw	ra,36(sp)
 4014c50:	dd000817 	ldw	r20,32(sp)
 4014c54:	dcc00717 	ldw	r19,28(sp)
 4014c58:	dc800617 	ldw	r18,24(sp)
 4014c5c:	dc400517 	ldw	r17,20(sp)
 4014c60:	dc000417 	ldw	r16,16(sp)
 4014c64:	dec00a04 	addi	sp,sp,40
 4014c68:	f800283a 	ret
 4014c6c:	008100f4 	movhi	r2,1027
 4014c70:	10a3e904 	addi	r2,r2,-28764
 4014c74:	14000017 	ldw	r16,0(r2)
 4014c78:	401123c0 	call	401123c <__locale_charset>
 4014c7c:	100f883a 	mov	r7,r2
 4014c80:	dc800015 	stw	r18,0(sp)
 4014c84:	000d883a 	mov	r6,zero
 4014c88:	d9400104 	addi	r5,sp,4
 4014c8c:	8809883a 	mov	r4,r17
 4014c90:	803ee83a 	callr	r16
 4014c94:	003fe806 	br	4014c38 <__alt_data_end+0xfc014c38>

04014c98 <__ascii_wctomb>:
 4014c98:	28000526 	beq	r5,zero,4014cb0 <__ascii_wctomb+0x18>
 4014c9c:	00803fc4 	movi	r2,255
 4014ca0:	11800536 	bltu	r2,r6,4014cb8 <__ascii_wctomb+0x20>
 4014ca4:	29800005 	stb	r6,0(r5)
 4014ca8:	00800044 	movi	r2,1
 4014cac:	f800283a 	ret
 4014cb0:	0005883a 	mov	r2,zero
 4014cb4:	f800283a 	ret
 4014cb8:	00802284 	movi	r2,138
 4014cbc:	20800015 	stw	r2,0(r4)
 4014cc0:	00bfffc4 	movi	r2,-1
 4014cc4:	f800283a 	ret

04014cc8 <_wctomb_r>:
 4014cc8:	008100f4 	movhi	r2,1027
 4014ccc:	defff904 	addi	sp,sp,-28
 4014cd0:	10a3e904 	addi	r2,r2,-28764
 4014cd4:	dfc00615 	stw	ra,24(sp)
 4014cd8:	dc400515 	stw	r17,20(sp)
 4014cdc:	dc000415 	stw	r16,16(sp)
 4014ce0:	3823883a 	mov	r17,r7
 4014ce4:	14000017 	ldw	r16,0(r2)
 4014ce8:	d9000115 	stw	r4,4(sp)
 4014cec:	d9400215 	stw	r5,8(sp)
 4014cf0:	d9800315 	stw	r6,12(sp)
 4014cf4:	401123c0 	call	401123c <__locale_charset>
 4014cf8:	d9800317 	ldw	r6,12(sp)
 4014cfc:	d9400217 	ldw	r5,8(sp)
 4014d00:	d9000117 	ldw	r4,4(sp)
 4014d04:	100f883a 	mov	r7,r2
 4014d08:	dc400015 	stw	r17,0(sp)
 4014d0c:	803ee83a 	callr	r16
 4014d10:	dfc00617 	ldw	ra,24(sp)
 4014d14:	dc400517 	ldw	r17,20(sp)
 4014d18:	dc000417 	ldw	r16,16(sp)
 4014d1c:	dec00704 	addi	sp,sp,28
 4014d20:	f800283a 	ret

04014d24 <__udivdi3>:
 4014d24:	defff504 	addi	sp,sp,-44
 4014d28:	dcc00415 	stw	r19,16(sp)
 4014d2c:	dc000115 	stw	r16,4(sp)
 4014d30:	dfc00a15 	stw	ra,40(sp)
 4014d34:	df000915 	stw	fp,36(sp)
 4014d38:	ddc00815 	stw	r23,32(sp)
 4014d3c:	dd800715 	stw	r22,28(sp)
 4014d40:	dd400615 	stw	r21,24(sp)
 4014d44:	dd000515 	stw	r20,20(sp)
 4014d48:	dc800315 	stw	r18,12(sp)
 4014d4c:	dc400215 	stw	r17,8(sp)
 4014d50:	2027883a 	mov	r19,r4
 4014d54:	2821883a 	mov	r16,r5
 4014d58:	3800411e 	bne	r7,zero,4014e60 <__udivdi3+0x13c>
 4014d5c:	3023883a 	mov	r17,r6
 4014d60:	2025883a 	mov	r18,r4
 4014d64:	2980522e 	bgeu	r5,r6,4014eb0 <__udivdi3+0x18c>
 4014d68:	00bfffd4 	movui	r2,65535
 4014d6c:	282d883a 	mov	r22,r5
 4014d70:	1180a836 	bltu	r2,r6,4015014 <__udivdi3+0x2f0>
 4014d74:	00803fc4 	movi	r2,255
 4014d78:	1185803a 	cmpltu	r2,r2,r6
 4014d7c:	100490fa 	slli	r2,r2,3
 4014d80:	3086d83a 	srl	r3,r6,r2
 4014d84:	010100b4 	movhi	r4,1026
 4014d88:	21310504 	addi	r4,r4,-15340
 4014d8c:	20c7883a 	add	r3,r4,r3
 4014d90:	18c00003 	ldbu	r3,0(r3)
 4014d94:	1885883a 	add	r2,r3,r2
 4014d98:	00c00804 	movi	r3,32
 4014d9c:	1887c83a 	sub	r3,r3,r2
 4014da0:	18000526 	beq	r3,zero,4014db8 <__udivdi3+0x94>
 4014da4:	80e0983a 	sll	r16,r16,r3
 4014da8:	9884d83a 	srl	r2,r19,r2
 4014dac:	30e2983a 	sll	r17,r6,r3
 4014db0:	98e4983a 	sll	r18,r19,r3
 4014db4:	142cb03a 	or	r22,r2,r16
 4014db8:	882ad43a 	srli	r21,r17,16
 4014dbc:	b009883a 	mov	r4,r22
 4014dc0:	8d3fffcc 	andi	r20,r17,65535
 4014dc4:	a80b883a 	mov	r5,r21
 4014dc8:	400ad440 	call	400ad44 <__umodsi3>
 4014dcc:	b009883a 	mov	r4,r22
 4014dd0:	a80b883a 	mov	r5,r21
 4014dd4:	1027883a 	mov	r19,r2
 4014dd8:	400ace00 	call	400ace0 <__udivsi3>
 4014ddc:	102d883a 	mov	r22,r2
 4014de0:	9826943a 	slli	r19,r19,16
 4014de4:	9004d43a 	srli	r2,r18,16
 4014de8:	a5a1383a 	mul	r16,r20,r22
 4014dec:	14c4b03a 	or	r2,r2,r19
 4014df0:	1400052e 	bgeu	r2,r16,4014e08 <__udivdi3+0xe4>
 4014df4:	1445883a 	add	r2,r2,r17
 4014df8:	b0ffffc4 	addi	r3,r22,-1
 4014dfc:	14400136 	bltu	r2,r17,4014e04 <__udivdi3+0xe0>
 4014e00:	14012336 	bltu	r2,r16,4015290 <__udivdi3+0x56c>
 4014e04:	182d883a 	mov	r22,r3
 4014e08:	1421c83a 	sub	r16,r2,r16
 4014e0c:	a80b883a 	mov	r5,r21
 4014e10:	8009883a 	mov	r4,r16
 4014e14:	400ad440 	call	400ad44 <__umodsi3>
 4014e18:	1027883a 	mov	r19,r2
 4014e1c:	a80b883a 	mov	r5,r21
 4014e20:	8009883a 	mov	r4,r16
 4014e24:	400ace00 	call	400ace0 <__udivsi3>
 4014e28:	9826943a 	slli	r19,r19,16
 4014e2c:	a0a9383a 	mul	r20,r20,r2
 4014e30:	94bfffcc 	andi	r18,r18,65535
 4014e34:	94e4b03a 	or	r18,r18,r19
 4014e38:	9500052e 	bgeu	r18,r20,4014e50 <__udivdi3+0x12c>
 4014e3c:	8ca5883a 	add	r18,r17,r18
 4014e40:	10ffffc4 	addi	r3,r2,-1
 4014e44:	9440f136 	bltu	r18,r17,401520c <__udivdi3+0x4e8>
 4014e48:	9500f02e 	bgeu	r18,r20,401520c <__udivdi3+0x4e8>
 4014e4c:	10bfff84 	addi	r2,r2,-2
 4014e50:	b00c943a 	slli	r6,r22,16
 4014e54:	0007883a 	mov	r3,zero
 4014e58:	3084b03a 	or	r2,r6,r2
 4014e5c:	00005906 	br	4014fc4 <__udivdi3+0x2a0>
 4014e60:	29c05636 	bltu	r5,r7,4014fbc <__udivdi3+0x298>
 4014e64:	00bfffd4 	movui	r2,65535
 4014e68:	11c0622e 	bgeu	r2,r7,4014ff4 <__udivdi3+0x2d0>
 4014e6c:	00804034 	movhi	r2,256
 4014e70:	10bfffc4 	addi	r2,r2,-1
 4014e74:	11c0ee36 	bltu	r2,r7,4015230 <__udivdi3+0x50c>
 4014e78:	00800404 	movi	r2,16
 4014e7c:	3886d83a 	srl	r3,r7,r2
 4014e80:	010100b4 	movhi	r4,1026
 4014e84:	21310504 	addi	r4,r4,-15340
 4014e88:	20c7883a 	add	r3,r4,r3
 4014e8c:	18c00003 	ldbu	r3,0(r3)
 4014e90:	05400804 	movi	r21,32
 4014e94:	1885883a 	add	r2,r3,r2
 4014e98:	a8abc83a 	sub	r21,r21,r2
 4014e9c:	a800621e 	bne	r21,zero,4015028 <__udivdi3+0x304>
 4014ea0:	3c00e936 	bltu	r7,r16,4015248 <__udivdi3+0x524>
 4014ea4:	9985403a 	cmpgeu	r2,r19,r6
 4014ea8:	0007883a 	mov	r3,zero
 4014eac:	00004506 	br	4014fc4 <__udivdi3+0x2a0>
 4014eb0:	3000041e 	bne	r6,zero,4014ec4 <__udivdi3+0x1a0>
 4014eb4:	000b883a 	mov	r5,zero
 4014eb8:	01000044 	movi	r4,1
 4014ebc:	400ace00 	call	400ace0 <__udivsi3>
 4014ec0:	1023883a 	mov	r17,r2
 4014ec4:	00bfffd4 	movui	r2,65535
 4014ec8:	14404e2e 	bgeu	r2,r17,4015004 <__udivdi3+0x2e0>
 4014ecc:	00804034 	movhi	r2,256
 4014ed0:	10bfffc4 	addi	r2,r2,-1
 4014ed4:	1440d836 	bltu	r2,r17,4015238 <__udivdi3+0x514>
 4014ed8:	00800404 	movi	r2,16
 4014edc:	8886d83a 	srl	r3,r17,r2
 4014ee0:	010100b4 	movhi	r4,1026
 4014ee4:	21310504 	addi	r4,r4,-15340
 4014ee8:	20c7883a 	add	r3,r4,r3
 4014eec:	18c00003 	ldbu	r3,0(r3)
 4014ef0:	1885883a 	add	r2,r3,r2
 4014ef4:	00c00804 	movi	r3,32
 4014ef8:	1887c83a 	sub	r3,r3,r2
 4014efc:	18008f1e 	bne	r3,zero,401513c <__udivdi3+0x418>
 4014f00:	882ad43a 	srli	r21,r17,16
 4014f04:	8461c83a 	sub	r16,r16,r17
 4014f08:	8d3fffcc 	andi	r20,r17,65535
 4014f0c:	00c00044 	movi	r3,1
 4014f10:	8009883a 	mov	r4,r16
 4014f14:	a80b883a 	mov	r5,r21
 4014f18:	d8c00015 	stw	r3,0(sp)
 4014f1c:	400ad440 	call	400ad44 <__umodsi3>
 4014f20:	8009883a 	mov	r4,r16
 4014f24:	a80b883a 	mov	r5,r21
 4014f28:	1027883a 	mov	r19,r2
 4014f2c:	400ace00 	call	400ace0 <__udivsi3>
 4014f30:	9826943a 	slli	r19,r19,16
 4014f34:	9008d43a 	srli	r4,r18,16
 4014f38:	1521383a 	mul	r16,r2,r20
 4014f3c:	102d883a 	mov	r22,r2
 4014f40:	24c8b03a 	or	r4,r4,r19
 4014f44:	d8c00017 	ldw	r3,0(sp)
 4014f48:	2400052e 	bgeu	r4,r16,4014f60 <__udivdi3+0x23c>
 4014f4c:	2449883a 	add	r4,r4,r17
 4014f50:	b0bfffc4 	addi	r2,r22,-1
 4014f54:	24400136 	bltu	r4,r17,4014f5c <__udivdi3+0x238>
 4014f58:	2400ca36 	bltu	r4,r16,4015284 <__udivdi3+0x560>
 4014f5c:	102d883a 	mov	r22,r2
 4014f60:	2421c83a 	sub	r16,r4,r16
 4014f64:	a80b883a 	mov	r5,r21
 4014f68:	8009883a 	mov	r4,r16
 4014f6c:	d8c00015 	stw	r3,0(sp)
 4014f70:	400ad440 	call	400ad44 <__umodsi3>
 4014f74:	1027883a 	mov	r19,r2
 4014f78:	a80b883a 	mov	r5,r21
 4014f7c:	8009883a 	mov	r4,r16
 4014f80:	400ace00 	call	400ace0 <__udivsi3>
 4014f84:	9826943a 	slli	r19,r19,16
 4014f88:	1529383a 	mul	r20,r2,r20
 4014f8c:	94bfffcc 	andi	r18,r18,65535
 4014f90:	94e4b03a 	or	r18,r18,r19
 4014f94:	d8c00017 	ldw	r3,0(sp)
 4014f98:	9500052e 	bgeu	r18,r20,4014fb0 <__udivdi3+0x28c>
 4014f9c:	8ca5883a 	add	r18,r17,r18
 4014fa0:	113fffc4 	addi	r4,r2,-1
 4014fa4:	94409736 	bltu	r18,r17,4015204 <__udivdi3+0x4e0>
 4014fa8:	9500962e 	bgeu	r18,r20,4015204 <__udivdi3+0x4e0>
 4014fac:	10bfff84 	addi	r2,r2,-2
 4014fb0:	b00c943a 	slli	r6,r22,16
 4014fb4:	3084b03a 	or	r2,r6,r2
 4014fb8:	00000206 	br	4014fc4 <__udivdi3+0x2a0>
 4014fbc:	0007883a 	mov	r3,zero
 4014fc0:	0005883a 	mov	r2,zero
 4014fc4:	dfc00a17 	ldw	ra,40(sp)
 4014fc8:	df000917 	ldw	fp,36(sp)
 4014fcc:	ddc00817 	ldw	r23,32(sp)
 4014fd0:	dd800717 	ldw	r22,28(sp)
 4014fd4:	dd400617 	ldw	r21,24(sp)
 4014fd8:	dd000517 	ldw	r20,20(sp)
 4014fdc:	dcc00417 	ldw	r19,16(sp)
 4014fe0:	dc800317 	ldw	r18,12(sp)
 4014fe4:	dc400217 	ldw	r17,8(sp)
 4014fe8:	dc000117 	ldw	r16,4(sp)
 4014fec:	dec00b04 	addi	sp,sp,44
 4014ff0:	f800283a 	ret
 4014ff4:	00803fc4 	movi	r2,255
 4014ff8:	11c5803a 	cmpltu	r2,r2,r7
 4014ffc:	100490fa 	slli	r2,r2,3
 4015000:	003f9e06 	br	4014e7c <__alt_data_end+0xfc014e7c>
 4015004:	00803fc4 	movi	r2,255
 4015008:	1445803a 	cmpltu	r2,r2,r17
 401500c:	100490fa 	slli	r2,r2,3
 4015010:	003fb206 	br	4014edc <__alt_data_end+0xfc014edc>
 4015014:	00804034 	movhi	r2,256
 4015018:	10bfffc4 	addi	r2,r2,-1
 401501c:	11808836 	bltu	r2,r6,4015240 <__udivdi3+0x51c>
 4015020:	00800404 	movi	r2,16
 4015024:	003f5606 	br	4014d80 <__alt_data_end+0xfc014d80>
 4015028:	30aed83a 	srl	r23,r6,r2
 401502c:	3d4e983a 	sll	r7,r7,r21
 4015030:	80acd83a 	srl	r22,r16,r2
 4015034:	9884d83a 	srl	r2,r19,r2
 4015038:	3deeb03a 	or	r23,r7,r23
 401503c:	b824d43a 	srli	r18,r23,16
 4015040:	8560983a 	sll	r16,r16,r21
 4015044:	b009883a 	mov	r4,r22
 4015048:	900b883a 	mov	r5,r18
 401504c:	3568983a 	sll	r20,r6,r21
 4015050:	1420b03a 	or	r16,r2,r16
 4015054:	400ad440 	call	400ad44 <__umodsi3>
 4015058:	b009883a 	mov	r4,r22
 401505c:	900b883a 	mov	r5,r18
 4015060:	1023883a 	mov	r17,r2
 4015064:	400ace00 	call	400ace0 <__udivsi3>
 4015068:	8808943a 	slli	r4,r17,16
 401506c:	bf3fffcc 	andi	fp,r23,65535
 4015070:	8006d43a 	srli	r3,r16,16
 4015074:	e0a3383a 	mul	r17,fp,r2
 4015078:	100d883a 	mov	r6,r2
 401507c:	1906b03a 	or	r3,r3,r4
 4015080:	1c40042e 	bgeu	r3,r17,4015094 <__udivdi3+0x370>
 4015084:	1dc7883a 	add	r3,r3,r23
 4015088:	10bfffc4 	addi	r2,r2,-1
 401508c:	1dc0752e 	bgeu	r3,r23,4015264 <__udivdi3+0x540>
 4015090:	100d883a 	mov	r6,r2
 4015094:	1c63c83a 	sub	r17,r3,r17
 4015098:	900b883a 	mov	r5,r18
 401509c:	8809883a 	mov	r4,r17
 40150a0:	d9800015 	stw	r6,0(sp)
 40150a4:	400ad440 	call	400ad44 <__umodsi3>
 40150a8:	102d883a 	mov	r22,r2
 40150ac:	8809883a 	mov	r4,r17
 40150b0:	900b883a 	mov	r5,r18
 40150b4:	400ace00 	call	400ace0 <__udivsi3>
 40150b8:	b02c943a 	slli	r22,r22,16
 40150bc:	e089383a 	mul	r4,fp,r2
 40150c0:	843fffcc 	andi	r16,r16,65535
 40150c4:	85a0b03a 	or	r16,r16,r22
 40150c8:	d9800017 	ldw	r6,0(sp)
 40150cc:	8100042e 	bgeu	r16,r4,40150e0 <__udivdi3+0x3bc>
 40150d0:	85e1883a 	add	r16,r16,r23
 40150d4:	10ffffc4 	addi	r3,r2,-1
 40150d8:	85c05e2e 	bgeu	r16,r23,4015254 <__udivdi3+0x530>
 40150dc:	1805883a 	mov	r2,r3
 40150e0:	300c943a 	slli	r6,r6,16
 40150e4:	a17fffcc 	andi	r5,r20,65535
 40150e8:	a028d43a 	srli	r20,r20,16
 40150ec:	3084b03a 	or	r2,r6,r2
 40150f0:	10ffffcc 	andi	r3,r2,65535
 40150f4:	100cd43a 	srli	r6,r2,16
 40150f8:	194f383a 	mul	r7,r3,r5
 40150fc:	1d07383a 	mul	r3,r3,r20
 4015100:	314b383a 	mul	r5,r6,r5
 4015104:	3810d43a 	srli	r8,r7,16
 4015108:	8121c83a 	sub	r16,r16,r4
 401510c:	1947883a 	add	r3,r3,r5
 4015110:	40c7883a 	add	r3,r8,r3
 4015114:	350d383a 	mul	r6,r6,r20
 4015118:	1940022e 	bgeu	r3,r5,4015124 <__udivdi3+0x400>
 401511c:	01000074 	movhi	r4,1
 4015120:	310d883a 	add	r6,r6,r4
 4015124:	1828d43a 	srli	r20,r3,16
 4015128:	a18d883a 	add	r6,r20,r6
 401512c:	81803e36 	bltu	r16,r6,4015228 <__udivdi3+0x504>
 4015130:	81803826 	beq	r16,r6,4015214 <__udivdi3+0x4f0>
 4015134:	0007883a 	mov	r3,zero
 4015138:	003fa206 	br	4014fc4 <__alt_data_end+0xfc014fc4>
 401513c:	88e2983a 	sll	r17,r17,r3
 4015140:	80a8d83a 	srl	r20,r16,r2
 4015144:	80e0983a 	sll	r16,r16,r3
 4015148:	882ad43a 	srli	r21,r17,16
 401514c:	9884d83a 	srl	r2,r19,r2
 4015150:	a009883a 	mov	r4,r20
 4015154:	a80b883a 	mov	r5,r21
 4015158:	142eb03a 	or	r23,r2,r16
 401515c:	98e4983a 	sll	r18,r19,r3
 4015160:	400ad440 	call	400ad44 <__umodsi3>
 4015164:	a009883a 	mov	r4,r20
 4015168:	a80b883a 	mov	r5,r21
 401516c:	1021883a 	mov	r16,r2
 4015170:	400ace00 	call	400ace0 <__udivsi3>
 4015174:	1039883a 	mov	fp,r2
 4015178:	8d3fffcc 	andi	r20,r17,65535
 401517c:	8020943a 	slli	r16,r16,16
 4015180:	b804d43a 	srli	r2,r23,16
 4015184:	a72d383a 	mul	r22,r20,fp
 4015188:	1404b03a 	or	r2,r2,r16
 401518c:	1580062e 	bgeu	r2,r22,40151a8 <__udivdi3+0x484>
 4015190:	1445883a 	add	r2,r2,r17
 4015194:	e0ffffc4 	addi	r3,fp,-1
 4015198:	14403836 	bltu	r2,r17,401527c <__udivdi3+0x558>
 401519c:	1580372e 	bgeu	r2,r22,401527c <__udivdi3+0x558>
 40151a0:	e73fff84 	addi	fp,fp,-2
 40151a4:	1445883a 	add	r2,r2,r17
 40151a8:	15adc83a 	sub	r22,r2,r22
 40151ac:	a80b883a 	mov	r5,r21
 40151b0:	b009883a 	mov	r4,r22
 40151b4:	400ad440 	call	400ad44 <__umodsi3>
 40151b8:	1027883a 	mov	r19,r2
 40151bc:	b009883a 	mov	r4,r22
 40151c0:	a80b883a 	mov	r5,r21
 40151c4:	400ace00 	call	400ace0 <__udivsi3>
 40151c8:	9826943a 	slli	r19,r19,16
 40151cc:	a0a1383a 	mul	r16,r20,r2
 40151d0:	b93fffcc 	andi	r4,r23,65535
 40151d4:	24c8b03a 	or	r4,r4,r19
 40151d8:	2400062e 	bgeu	r4,r16,40151f4 <__udivdi3+0x4d0>
 40151dc:	2449883a 	add	r4,r4,r17
 40151e0:	10ffffc4 	addi	r3,r2,-1
 40151e4:	24402336 	bltu	r4,r17,4015274 <__udivdi3+0x550>
 40151e8:	2400222e 	bgeu	r4,r16,4015274 <__udivdi3+0x550>
 40151ec:	10bfff84 	addi	r2,r2,-2
 40151f0:	2449883a 	add	r4,r4,r17
 40151f4:	e038943a 	slli	fp,fp,16
 40151f8:	2421c83a 	sub	r16,r4,r16
 40151fc:	e086b03a 	or	r3,fp,r2
 4015200:	003f4306 	br	4014f10 <__alt_data_end+0xfc014f10>
 4015204:	2005883a 	mov	r2,r4
 4015208:	003f6906 	br	4014fb0 <__alt_data_end+0xfc014fb0>
 401520c:	1805883a 	mov	r2,r3
 4015210:	003f0f06 	br	4014e50 <__alt_data_end+0xfc014e50>
 4015214:	1806943a 	slli	r3,r3,16
 4015218:	9d66983a 	sll	r19,r19,r21
 401521c:	39ffffcc 	andi	r7,r7,65535
 4015220:	19c7883a 	add	r3,r3,r7
 4015224:	98ffc32e 	bgeu	r19,r3,4015134 <__alt_data_end+0xfc015134>
 4015228:	10bfffc4 	addi	r2,r2,-1
 401522c:	003fc106 	br	4015134 <__alt_data_end+0xfc015134>
 4015230:	00800604 	movi	r2,24
 4015234:	003f1106 	br	4014e7c <__alt_data_end+0xfc014e7c>
 4015238:	00800604 	movi	r2,24
 401523c:	003f2706 	br	4014edc <__alt_data_end+0xfc014edc>
 4015240:	00800604 	movi	r2,24
 4015244:	003ece06 	br	4014d80 <__alt_data_end+0xfc014d80>
 4015248:	0007883a 	mov	r3,zero
 401524c:	00800044 	movi	r2,1
 4015250:	003f5c06 	br	4014fc4 <__alt_data_end+0xfc014fc4>
 4015254:	813fa12e 	bgeu	r16,r4,40150dc <__alt_data_end+0xfc0150dc>
 4015258:	10bfff84 	addi	r2,r2,-2
 401525c:	85e1883a 	add	r16,r16,r23
 4015260:	003f9f06 	br	40150e0 <__alt_data_end+0xfc0150e0>
 4015264:	1c7f8a2e 	bgeu	r3,r17,4015090 <__alt_data_end+0xfc015090>
 4015268:	31bfff84 	addi	r6,r6,-2
 401526c:	1dc7883a 	add	r3,r3,r23
 4015270:	003f8806 	br	4015094 <__alt_data_end+0xfc015094>
 4015274:	1805883a 	mov	r2,r3
 4015278:	003fde06 	br	40151f4 <__alt_data_end+0xfc0151f4>
 401527c:	1839883a 	mov	fp,r3
 4015280:	003fc906 	br	40151a8 <__alt_data_end+0xfc0151a8>
 4015284:	b5bfff84 	addi	r22,r22,-2
 4015288:	2449883a 	add	r4,r4,r17
 401528c:	003f3406 	br	4014f60 <__alt_data_end+0xfc014f60>
 4015290:	b5bfff84 	addi	r22,r22,-2
 4015294:	1445883a 	add	r2,r2,r17
 4015298:	003edb06 	br	4014e08 <__alt_data_end+0xfc014e08>

0401529c <__umoddi3>:
 401529c:	defff404 	addi	sp,sp,-48
 40152a0:	df000a15 	stw	fp,40(sp)
 40152a4:	dc400315 	stw	r17,12(sp)
 40152a8:	dc000215 	stw	r16,8(sp)
 40152ac:	dfc00b15 	stw	ra,44(sp)
 40152b0:	ddc00915 	stw	r23,36(sp)
 40152b4:	dd800815 	stw	r22,32(sp)
 40152b8:	dd400715 	stw	r21,28(sp)
 40152bc:	dd000615 	stw	r20,24(sp)
 40152c0:	dcc00515 	stw	r19,20(sp)
 40152c4:	dc800415 	stw	r18,16(sp)
 40152c8:	2021883a 	mov	r16,r4
 40152cc:	2823883a 	mov	r17,r5
 40152d0:	2839883a 	mov	fp,r5
 40152d4:	38003c1e 	bne	r7,zero,40153c8 <__umoddi3+0x12c>
 40152d8:	3027883a 	mov	r19,r6
 40152dc:	2029883a 	mov	r20,r4
 40152e0:	2980512e 	bgeu	r5,r6,4015428 <__umoddi3+0x18c>
 40152e4:	00bfffd4 	movui	r2,65535
 40152e8:	11809a36 	bltu	r2,r6,4015554 <__umoddi3+0x2b8>
 40152ec:	01003fc4 	movi	r4,255
 40152f0:	2189803a 	cmpltu	r4,r4,r6
 40152f4:	200890fa 	slli	r4,r4,3
 40152f8:	3104d83a 	srl	r2,r6,r4
 40152fc:	00c100b4 	movhi	r3,1026
 4015300:	18f10504 	addi	r3,r3,-15340
 4015304:	1885883a 	add	r2,r3,r2
 4015308:	10c00003 	ldbu	r3,0(r2)
 401530c:	00800804 	movi	r2,32
 4015310:	1909883a 	add	r4,r3,r4
 4015314:	1125c83a 	sub	r18,r2,r4
 4015318:	90000526 	beq	r18,zero,4015330 <__umoddi3+0x94>
 401531c:	8ca2983a 	sll	r17,r17,r18
 4015320:	8108d83a 	srl	r4,r16,r4
 4015324:	34a6983a 	sll	r19,r6,r18
 4015328:	84a8983a 	sll	r20,r16,r18
 401532c:	2478b03a 	or	fp,r4,r17
 4015330:	982ed43a 	srli	r23,r19,16
 4015334:	e009883a 	mov	r4,fp
 4015338:	9dbfffcc 	andi	r22,r19,65535
 401533c:	b80b883a 	mov	r5,r23
 4015340:	400ad440 	call	400ad44 <__umodsi3>
 4015344:	e009883a 	mov	r4,fp
 4015348:	b80b883a 	mov	r5,r23
 401534c:	102b883a 	mov	r21,r2
 4015350:	400ace00 	call	400ace0 <__udivsi3>
 4015354:	a806943a 	slli	r3,r21,16
 4015358:	a008d43a 	srli	r4,r20,16
 401535c:	b085383a 	mul	r2,r22,r2
 4015360:	20c8b03a 	or	r4,r4,r3
 4015364:	2080032e 	bgeu	r4,r2,4015374 <__umoddi3+0xd8>
 4015368:	24c9883a 	add	r4,r4,r19
 401536c:	24c00136 	bltu	r4,r19,4015374 <__umoddi3+0xd8>
 4015370:	20811036 	bltu	r4,r2,40157b4 <__umoddi3+0x518>
 4015374:	20abc83a 	sub	r21,r4,r2
 4015378:	b80b883a 	mov	r5,r23
 401537c:	a809883a 	mov	r4,r21
 4015380:	400ad440 	call	400ad44 <__umodsi3>
 4015384:	1023883a 	mov	r17,r2
 4015388:	b80b883a 	mov	r5,r23
 401538c:	a809883a 	mov	r4,r21
 4015390:	400ace00 	call	400ace0 <__udivsi3>
 4015394:	8822943a 	slli	r17,r17,16
 4015398:	b085383a 	mul	r2,r22,r2
 401539c:	a0ffffcc 	andi	r3,r20,65535
 40153a0:	1c46b03a 	or	r3,r3,r17
 40153a4:	1880042e 	bgeu	r3,r2,40153b8 <__umoddi3+0x11c>
 40153a8:	1cc7883a 	add	r3,r3,r19
 40153ac:	1cc00236 	bltu	r3,r19,40153b8 <__umoddi3+0x11c>
 40153b0:	1880012e 	bgeu	r3,r2,40153b8 <__umoddi3+0x11c>
 40153b4:	1cc7883a 	add	r3,r3,r19
 40153b8:	1885c83a 	sub	r2,r3,r2
 40153bc:	1484d83a 	srl	r2,r2,r18
 40153c0:	0007883a 	mov	r3,zero
 40153c4:	00004f06 	br	4015504 <__umoddi3+0x268>
 40153c8:	29c04c36 	bltu	r5,r7,40154fc <__umoddi3+0x260>
 40153cc:	00bfffd4 	movui	r2,65535
 40153d0:	11c0582e 	bgeu	r2,r7,4015534 <__umoddi3+0x298>
 40153d4:	00804034 	movhi	r2,256
 40153d8:	10bfffc4 	addi	r2,r2,-1
 40153dc:	11c0e736 	bltu	r2,r7,401577c <__umoddi3+0x4e0>
 40153e0:	01000404 	movi	r4,16
 40153e4:	3904d83a 	srl	r2,r7,r4
 40153e8:	00c100b4 	movhi	r3,1026
 40153ec:	18f10504 	addi	r3,r3,-15340
 40153f0:	1885883a 	add	r2,r3,r2
 40153f4:	14c00003 	ldbu	r19,0(r2)
 40153f8:	00c00804 	movi	r3,32
 40153fc:	9927883a 	add	r19,r19,r4
 4015400:	1ce9c83a 	sub	r20,r3,r19
 4015404:	a000581e 	bne	r20,zero,4015568 <__umoddi3+0x2cc>
 4015408:	3c400136 	bltu	r7,r17,4015410 <__umoddi3+0x174>
 401540c:	8180eb36 	bltu	r16,r6,40157bc <__umoddi3+0x520>
 4015410:	8185c83a 	sub	r2,r16,r6
 4015414:	89e3c83a 	sub	r17,r17,r7
 4015418:	8089803a 	cmpltu	r4,r16,r2
 401541c:	8939c83a 	sub	fp,r17,r4
 4015420:	e007883a 	mov	r3,fp
 4015424:	00003706 	br	4015504 <__umoddi3+0x268>
 4015428:	3000041e 	bne	r6,zero,401543c <__umoddi3+0x1a0>
 401542c:	000b883a 	mov	r5,zero
 4015430:	01000044 	movi	r4,1
 4015434:	400ace00 	call	400ace0 <__udivsi3>
 4015438:	1027883a 	mov	r19,r2
 401543c:	00bfffd4 	movui	r2,65535
 4015440:	14c0402e 	bgeu	r2,r19,4015544 <__umoddi3+0x2a8>
 4015444:	00804034 	movhi	r2,256
 4015448:	10bfffc4 	addi	r2,r2,-1
 401544c:	14c0cd36 	bltu	r2,r19,4015784 <__umoddi3+0x4e8>
 4015450:	00800404 	movi	r2,16
 4015454:	9886d83a 	srl	r3,r19,r2
 4015458:	010100b4 	movhi	r4,1026
 401545c:	21310504 	addi	r4,r4,-15340
 4015460:	20c7883a 	add	r3,r4,r3
 4015464:	18c00003 	ldbu	r3,0(r3)
 4015468:	1887883a 	add	r3,r3,r2
 401546c:	00800804 	movi	r2,32
 4015470:	10e5c83a 	sub	r18,r2,r3
 4015474:	9000901e 	bne	r18,zero,40156b8 <__umoddi3+0x41c>
 4015478:	982cd43a 	srli	r22,r19,16
 401547c:	8ce3c83a 	sub	r17,r17,r19
 4015480:	9d7fffcc 	andi	r21,r19,65535
 4015484:	b00b883a 	mov	r5,r22
 4015488:	8809883a 	mov	r4,r17
 401548c:	400ad440 	call	400ad44 <__umodsi3>
 4015490:	8809883a 	mov	r4,r17
 4015494:	b00b883a 	mov	r5,r22
 4015498:	1021883a 	mov	r16,r2
 401549c:	400ace00 	call	400ace0 <__udivsi3>
 40154a0:	8006943a 	slli	r3,r16,16
 40154a4:	a008d43a 	srli	r4,r20,16
 40154a8:	1545383a 	mul	r2,r2,r21
 40154ac:	20c8b03a 	or	r4,r4,r3
 40154b0:	2080042e 	bgeu	r4,r2,40154c4 <__umoddi3+0x228>
 40154b4:	24c9883a 	add	r4,r4,r19
 40154b8:	24c00236 	bltu	r4,r19,40154c4 <__umoddi3+0x228>
 40154bc:	2080012e 	bgeu	r4,r2,40154c4 <__umoddi3+0x228>
 40154c0:	24c9883a 	add	r4,r4,r19
 40154c4:	20a1c83a 	sub	r16,r4,r2
 40154c8:	b00b883a 	mov	r5,r22
 40154cc:	8009883a 	mov	r4,r16
 40154d0:	400ad440 	call	400ad44 <__umodsi3>
 40154d4:	1023883a 	mov	r17,r2
 40154d8:	b00b883a 	mov	r5,r22
 40154dc:	8009883a 	mov	r4,r16
 40154e0:	400ace00 	call	400ace0 <__udivsi3>
 40154e4:	8822943a 	slli	r17,r17,16
 40154e8:	1545383a 	mul	r2,r2,r21
 40154ec:	a53fffcc 	andi	r20,r20,65535
 40154f0:	a446b03a 	or	r3,r20,r17
 40154f4:	18bfb02e 	bgeu	r3,r2,40153b8 <__alt_data_end+0xfc0153b8>
 40154f8:	003fab06 	br	40153a8 <__alt_data_end+0xfc0153a8>
 40154fc:	2005883a 	mov	r2,r4
 4015500:	2807883a 	mov	r3,r5
 4015504:	dfc00b17 	ldw	ra,44(sp)
 4015508:	df000a17 	ldw	fp,40(sp)
 401550c:	ddc00917 	ldw	r23,36(sp)
 4015510:	dd800817 	ldw	r22,32(sp)
 4015514:	dd400717 	ldw	r21,28(sp)
 4015518:	dd000617 	ldw	r20,24(sp)
 401551c:	dcc00517 	ldw	r19,20(sp)
 4015520:	dc800417 	ldw	r18,16(sp)
 4015524:	dc400317 	ldw	r17,12(sp)
 4015528:	dc000217 	ldw	r16,8(sp)
 401552c:	dec00c04 	addi	sp,sp,48
 4015530:	f800283a 	ret
 4015534:	04c03fc4 	movi	r19,255
 4015538:	99c9803a 	cmpltu	r4,r19,r7
 401553c:	200890fa 	slli	r4,r4,3
 4015540:	003fa806 	br	40153e4 <__alt_data_end+0xfc0153e4>
 4015544:	00803fc4 	movi	r2,255
 4015548:	14c5803a 	cmpltu	r2,r2,r19
 401554c:	100490fa 	slli	r2,r2,3
 4015550:	003fc006 	br	4015454 <__alt_data_end+0xfc015454>
 4015554:	00804034 	movhi	r2,256
 4015558:	10bfffc4 	addi	r2,r2,-1
 401555c:	11808b36 	bltu	r2,r6,401578c <__umoddi3+0x4f0>
 4015560:	01000404 	movi	r4,16
 4015564:	003f6406 	br	40152f8 <__alt_data_end+0xfc0152f8>
 4015568:	34c4d83a 	srl	r2,r6,r19
 401556c:	3d0e983a 	sll	r7,r7,r20
 4015570:	8cf8d83a 	srl	fp,r17,r19
 4015574:	8d10983a 	sll	r8,r17,r20
 4015578:	38aab03a 	or	r21,r7,r2
 401557c:	a82cd43a 	srli	r22,r21,16
 4015580:	84e2d83a 	srl	r17,r16,r19
 4015584:	e009883a 	mov	r4,fp
 4015588:	b00b883a 	mov	r5,r22
 401558c:	8a22b03a 	or	r17,r17,r8
 4015590:	3524983a 	sll	r18,r6,r20
 4015594:	400ad440 	call	400ad44 <__umodsi3>
 4015598:	e009883a 	mov	r4,fp
 401559c:	b00b883a 	mov	r5,r22
 40155a0:	102f883a 	mov	r23,r2
 40155a4:	400ace00 	call	400ace0 <__udivsi3>
 40155a8:	100d883a 	mov	r6,r2
 40155ac:	b808943a 	slli	r4,r23,16
 40155b0:	aa3fffcc 	andi	r8,r21,65535
 40155b4:	8804d43a 	srli	r2,r17,16
 40155b8:	41af383a 	mul	r23,r8,r6
 40155bc:	8520983a 	sll	r16,r16,r20
 40155c0:	1104b03a 	or	r2,r2,r4
 40155c4:	15c0042e 	bgeu	r2,r23,40155d8 <__umoddi3+0x33c>
 40155c8:	1545883a 	add	r2,r2,r21
 40155cc:	30ffffc4 	addi	r3,r6,-1
 40155d0:	1540742e 	bgeu	r2,r21,40157a4 <__umoddi3+0x508>
 40155d4:	180d883a 	mov	r6,r3
 40155d8:	15efc83a 	sub	r23,r2,r23
 40155dc:	b00b883a 	mov	r5,r22
 40155e0:	b809883a 	mov	r4,r23
 40155e4:	d9800115 	stw	r6,4(sp)
 40155e8:	da000015 	stw	r8,0(sp)
 40155ec:	400ad440 	call	400ad44 <__umodsi3>
 40155f0:	b00b883a 	mov	r5,r22
 40155f4:	b809883a 	mov	r4,r23
 40155f8:	1039883a 	mov	fp,r2
 40155fc:	400ace00 	call	400ace0 <__udivsi3>
 4015600:	da000017 	ldw	r8,0(sp)
 4015604:	e038943a 	slli	fp,fp,16
 4015608:	100b883a 	mov	r5,r2
 401560c:	4089383a 	mul	r4,r8,r2
 4015610:	8a3fffcc 	andi	r8,r17,65535
 4015614:	4710b03a 	or	r8,r8,fp
 4015618:	d9800117 	ldw	r6,4(sp)
 401561c:	4100042e 	bgeu	r8,r4,4015630 <__umoddi3+0x394>
 4015620:	4551883a 	add	r8,r8,r21
 4015624:	10bfffc4 	addi	r2,r2,-1
 4015628:	45405a2e 	bgeu	r8,r21,4015794 <__umoddi3+0x4f8>
 401562c:	100b883a 	mov	r5,r2
 4015630:	300c943a 	slli	r6,r6,16
 4015634:	91ffffcc 	andi	r7,r18,65535
 4015638:	9004d43a 	srli	r2,r18,16
 401563c:	314cb03a 	or	r6,r6,r5
 4015640:	317fffcc 	andi	r5,r6,65535
 4015644:	300cd43a 	srli	r6,r6,16
 4015648:	29d3383a 	mul	r9,r5,r7
 401564c:	288b383a 	mul	r5,r5,r2
 4015650:	31cf383a 	mul	r7,r6,r7
 4015654:	4806d43a 	srli	r3,r9,16
 4015658:	4111c83a 	sub	r8,r8,r4
 401565c:	29cb883a 	add	r5,r5,r7
 4015660:	194b883a 	add	r5,r3,r5
 4015664:	3085383a 	mul	r2,r6,r2
 4015668:	29c0022e 	bgeu	r5,r7,4015674 <__umoddi3+0x3d8>
 401566c:	00c00074 	movhi	r3,1
 4015670:	10c5883a 	add	r2,r2,r3
 4015674:	2808d43a 	srli	r4,r5,16
 4015678:	280a943a 	slli	r5,r5,16
 401567c:	4a7fffcc 	andi	r9,r9,65535
 4015680:	2085883a 	add	r2,r4,r2
 4015684:	2a4b883a 	add	r5,r5,r9
 4015688:	40803636 	bltu	r8,r2,4015764 <__umoddi3+0x4c8>
 401568c:	40804d26 	beq	r8,r2,40157c4 <__umoddi3+0x528>
 4015690:	4089c83a 	sub	r4,r8,r2
 4015694:	280f883a 	mov	r7,r5
 4015698:	81cfc83a 	sub	r7,r16,r7
 401569c:	81c7803a 	cmpltu	r3,r16,r7
 40156a0:	20c7c83a 	sub	r3,r4,r3
 40156a4:	1cc4983a 	sll	r2,r3,r19
 40156a8:	3d0ed83a 	srl	r7,r7,r20
 40156ac:	1d06d83a 	srl	r3,r3,r20
 40156b0:	11c4b03a 	or	r2,r2,r7
 40156b4:	003f9306 	br	4015504 <__alt_data_end+0xfc015504>
 40156b8:	9ca6983a 	sll	r19,r19,r18
 40156bc:	88e8d83a 	srl	r20,r17,r3
 40156c0:	80c4d83a 	srl	r2,r16,r3
 40156c4:	982cd43a 	srli	r22,r19,16
 40156c8:	8ca2983a 	sll	r17,r17,r18
 40156cc:	a009883a 	mov	r4,r20
 40156d0:	b00b883a 	mov	r5,r22
 40156d4:	1478b03a 	or	fp,r2,r17
 40156d8:	400ad440 	call	400ad44 <__umodsi3>
 40156dc:	a009883a 	mov	r4,r20
 40156e0:	b00b883a 	mov	r5,r22
 40156e4:	1023883a 	mov	r17,r2
 40156e8:	400ace00 	call	400ace0 <__udivsi3>
 40156ec:	9d7fffcc 	andi	r21,r19,65535
 40156f0:	880a943a 	slli	r5,r17,16
 40156f4:	e008d43a 	srli	r4,fp,16
 40156f8:	a885383a 	mul	r2,r21,r2
 40156fc:	84a8983a 	sll	r20,r16,r18
 4015700:	2148b03a 	or	r4,r4,r5
 4015704:	2080042e 	bgeu	r4,r2,4015718 <__umoddi3+0x47c>
 4015708:	24c9883a 	add	r4,r4,r19
 401570c:	24c00236 	bltu	r4,r19,4015718 <__umoddi3+0x47c>
 4015710:	2080012e 	bgeu	r4,r2,4015718 <__umoddi3+0x47c>
 4015714:	24c9883a 	add	r4,r4,r19
 4015718:	20a3c83a 	sub	r17,r4,r2
 401571c:	b00b883a 	mov	r5,r22
 4015720:	8809883a 	mov	r4,r17
 4015724:	400ad440 	call	400ad44 <__umodsi3>
 4015728:	102f883a 	mov	r23,r2
 401572c:	8809883a 	mov	r4,r17
 4015730:	b00b883a 	mov	r5,r22
 4015734:	400ace00 	call	400ace0 <__udivsi3>
 4015738:	b82e943a 	slli	r23,r23,16
 401573c:	a885383a 	mul	r2,r21,r2
 4015740:	e13fffcc 	andi	r4,fp,65535
 4015744:	25c8b03a 	or	r4,r4,r23
 4015748:	2080042e 	bgeu	r4,r2,401575c <__umoddi3+0x4c0>
 401574c:	24c9883a 	add	r4,r4,r19
 4015750:	24c00236 	bltu	r4,r19,401575c <__umoddi3+0x4c0>
 4015754:	2080012e 	bgeu	r4,r2,401575c <__umoddi3+0x4c0>
 4015758:	24c9883a 	add	r4,r4,r19
 401575c:	20a3c83a 	sub	r17,r4,r2
 4015760:	003f4806 	br	4015484 <__alt_data_end+0xfc015484>
 4015764:	2c8fc83a 	sub	r7,r5,r18
 4015768:	1545c83a 	sub	r2,r2,r21
 401576c:	29cb803a 	cmpltu	r5,r5,r7
 4015770:	1145c83a 	sub	r2,r2,r5
 4015774:	4089c83a 	sub	r4,r8,r2
 4015778:	003fc706 	br	4015698 <__alt_data_end+0xfc015698>
 401577c:	01000604 	movi	r4,24
 4015780:	003f1806 	br	40153e4 <__alt_data_end+0xfc0153e4>
 4015784:	00800604 	movi	r2,24
 4015788:	003f3206 	br	4015454 <__alt_data_end+0xfc015454>
 401578c:	01000604 	movi	r4,24
 4015790:	003ed906 	br	40152f8 <__alt_data_end+0xfc0152f8>
 4015794:	413fa52e 	bgeu	r8,r4,401562c <__alt_data_end+0xfc01562c>
 4015798:	297fff84 	addi	r5,r5,-2
 401579c:	4551883a 	add	r8,r8,r21
 40157a0:	003fa306 	br	4015630 <__alt_data_end+0xfc015630>
 40157a4:	15ff8b2e 	bgeu	r2,r23,40155d4 <__alt_data_end+0xfc0155d4>
 40157a8:	31bfff84 	addi	r6,r6,-2
 40157ac:	1545883a 	add	r2,r2,r21
 40157b0:	003f8906 	br	40155d8 <__alt_data_end+0xfc0155d8>
 40157b4:	24c9883a 	add	r4,r4,r19
 40157b8:	003eee06 	br	4015374 <__alt_data_end+0xfc015374>
 40157bc:	8005883a 	mov	r2,r16
 40157c0:	003f1706 	br	4015420 <__alt_data_end+0xfc015420>
 40157c4:	817fe736 	bltu	r16,r5,4015764 <__alt_data_end+0xfc015764>
 40157c8:	280f883a 	mov	r7,r5
 40157cc:	0009883a 	mov	r4,zero
 40157d0:	003fb106 	br	4015698 <__alt_data_end+0xfc015698>

040157d4 <__adddf3>:
 40157d4:	02c00434 	movhi	r11,16
 40157d8:	5affffc4 	addi	r11,r11,-1
 40157dc:	2806d7fa 	srli	r3,r5,31
 40157e0:	2ad4703a 	and	r10,r5,r11
 40157e4:	3ad2703a 	and	r9,r7,r11
 40157e8:	3804d53a 	srli	r2,r7,20
 40157ec:	3018d77a 	srli	r12,r6,29
 40157f0:	280ad53a 	srli	r5,r5,20
 40157f4:	501490fa 	slli	r10,r10,3
 40157f8:	2010d77a 	srli	r8,r4,29
 40157fc:	481290fa 	slli	r9,r9,3
 4015800:	380ed7fa 	srli	r7,r7,31
 4015804:	defffb04 	addi	sp,sp,-20
 4015808:	dc800215 	stw	r18,8(sp)
 401580c:	dc400115 	stw	r17,4(sp)
 4015810:	dc000015 	stw	r16,0(sp)
 4015814:	dfc00415 	stw	ra,16(sp)
 4015818:	dcc00315 	stw	r19,12(sp)
 401581c:	1c803fcc 	andi	r18,r3,255
 4015820:	2c01ffcc 	andi	r16,r5,2047
 4015824:	5210b03a 	or	r8,r10,r8
 4015828:	202290fa 	slli	r17,r4,3
 401582c:	1081ffcc 	andi	r2,r2,2047
 4015830:	4b12b03a 	or	r9,r9,r12
 4015834:	300c90fa 	slli	r6,r6,3
 4015838:	91c07526 	beq	r18,r7,4015a10 <__adddf3+0x23c>
 401583c:	8087c83a 	sub	r3,r16,r2
 4015840:	00c0ab0e 	bge	zero,r3,4015af0 <__adddf3+0x31c>
 4015844:	10002a1e 	bne	r2,zero,40158f0 <__adddf3+0x11c>
 4015848:	4984b03a 	or	r2,r9,r6
 401584c:	1000961e 	bne	r2,zero,4015aa8 <__adddf3+0x2d4>
 4015850:	888001cc 	andi	r2,r17,7
 4015854:	10000726 	beq	r2,zero,4015874 <__adddf3+0xa0>
 4015858:	888003cc 	andi	r2,r17,15
 401585c:	00c00104 	movi	r3,4
 4015860:	10c00426 	beq	r2,r3,4015874 <__adddf3+0xa0>
 4015864:	88c7883a 	add	r3,r17,r3
 4015868:	1c63803a 	cmpltu	r17,r3,r17
 401586c:	4451883a 	add	r8,r8,r17
 4015870:	1823883a 	mov	r17,r3
 4015874:	4080202c 	andhi	r2,r8,128
 4015878:	10005926 	beq	r2,zero,40159e0 <__adddf3+0x20c>
 401587c:	84000044 	addi	r16,r16,1
 4015880:	0081ffc4 	movi	r2,2047
 4015884:	8080ba26 	beq	r16,r2,4015b70 <__adddf3+0x39c>
 4015888:	00bfe034 	movhi	r2,65408
 401588c:	10bfffc4 	addi	r2,r2,-1
 4015890:	4090703a 	and	r8,r8,r2
 4015894:	4004977a 	slli	r2,r8,29
 4015898:	4010927a 	slli	r8,r8,9
 401589c:	8822d0fa 	srli	r17,r17,3
 40158a0:	8401ffcc 	andi	r16,r16,2047
 40158a4:	4010d33a 	srli	r8,r8,12
 40158a8:	9007883a 	mov	r3,r18
 40158ac:	1444b03a 	or	r2,r2,r17
 40158b0:	8401ffcc 	andi	r16,r16,2047
 40158b4:	8020953a 	slli	r16,r16,20
 40158b8:	18c03fcc 	andi	r3,r3,255
 40158bc:	01000434 	movhi	r4,16
 40158c0:	213fffc4 	addi	r4,r4,-1
 40158c4:	180697fa 	slli	r3,r3,31
 40158c8:	4110703a 	and	r8,r8,r4
 40158cc:	4410b03a 	or	r8,r8,r16
 40158d0:	40c6b03a 	or	r3,r8,r3
 40158d4:	dfc00417 	ldw	ra,16(sp)
 40158d8:	dcc00317 	ldw	r19,12(sp)
 40158dc:	dc800217 	ldw	r18,8(sp)
 40158e0:	dc400117 	ldw	r17,4(sp)
 40158e4:	dc000017 	ldw	r16,0(sp)
 40158e8:	dec00504 	addi	sp,sp,20
 40158ec:	f800283a 	ret
 40158f0:	0081ffc4 	movi	r2,2047
 40158f4:	80bfd626 	beq	r16,r2,4015850 <__alt_data_end+0xfc015850>
 40158f8:	4a402034 	orhi	r9,r9,128
 40158fc:	00800e04 	movi	r2,56
 4015900:	10c09f16 	blt	r2,r3,4015b80 <__adddf3+0x3ac>
 4015904:	008007c4 	movi	r2,31
 4015908:	10c0c216 	blt	r2,r3,4015c14 <__adddf3+0x440>
 401590c:	00800804 	movi	r2,32
 4015910:	10c5c83a 	sub	r2,r2,r3
 4015914:	488a983a 	sll	r5,r9,r2
 4015918:	30c8d83a 	srl	r4,r6,r3
 401591c:	3084983a 	sll	r2,r6,r2
 4015920:	48c6d83a 	srl	r3,r9,r3
 4015924:	290cb03a 	or	r6,r5,r4
 4015928:	1004c03a 	cmpne	r2,r2,zero
 401592c:	308cb03a 	or	r6,r6,r2
 4015930:	898dc83a 	sub	r6,r17,r6
 4015934:	89a3803a 	cmpltu	r17,r17,r6
 4015938:	40d1c83a 	sub	r8,r8,r3
 401593c:	4451c83a 	sub	r8,r8,r17
 4015940:	3023883a 	mov	r17,r6
 4015944:	4080202c 	andhi	r2,r8,128
 4015948:	10002326 	beq	r2,zero,40159d8 <__adddf3+0x204>
 401594c:	04c02034 	movhi	r19,128
 4015950:	9cffffc4 	addi	r19,r19,-1
 4015954:	44e6703a 	and	r19,r8,r19
 4015958:	98007626 	beq	r19,zero,4015b34 <__adddf3+0x360>
 401595c:	9809883a 	mov	r4,r19
 4015960:	4017dd80 	call	4017dd8 <__clzsi2>
 4015964:	10fffe04 	addi	r3,r2,-8
 4015968:	010007c4 	movi	r4,31
 401596c:	20c07716 	blt	r4,r3,4015b4c <__adddf3+0x378>
 4015970:	00800804 	movi	r2,32
 4015974:	10c5c83a 	sub	r2,r2,r3
 4015978:	8884d83a 	srl	r2,r17,r2
 401597c:	98d0983a 	sll	r8,r19,r3
 4015980:	88e2983a 	sll	r17,r17,r3
 4015984:	1204b03a 	or	r2,r2,r8
 4015988:	1c007416 	blt	r3,r16,4015b5c <__adddf3+0x388>
 401598c:	1c21c83a 	sub	r16,r3,r16
 4015990:	82000044 	addi	r8,r16,1
 4015994:	00c007c4 	movi	r3,31
 4015998:	1a009116 	blt	r3,r8,4015be0 <__adddf3+0x40c>
 401599c:	00c00804 	movi	r3,32
 40159a0:	1a07c83a 	sub	r3,r3,r8
 40159a4:	8a08d83a 	srl	r4,r17,r8
 40159a8:	88e2983a 	sll	r17,r17,r3
 40159ac:	10c6983a 	sll	r3,r2,r3
 40159b0:	1210d83a 	srl	r8,r2,r8
 40159b4:	8804c03a 	cmpne	r2,r17,zero
 40159b8:	1906b03a 	or	r3,r3,r4
 40159bc:	18a2b03a 	or	r17,r3,r2
 40159c0:	0021883a 	mov	r16,zero
 40159c4:	003fa206 	br	4015850 <__alt_data_end+0xfc015850>
 40159c8:	1890b03a 	or	r8,r3,r2
 40159cc:	40017d26 	beq	r8,zero,4015fc4 <__adddf3+0x7f0>
 40159d0:	1011883a 	mov	r8,r2
 40159d4:	1823883a 	mov	r17,r3
 40159d8:	888001cc 	andi	r2,r17,7
 40159dc:	103f9e1e 	bne	r2,zero,4015858 <__alt_data_end+0xfc015858>
 40159e0:	4004977a 	slli	r2,r8,29
 40159e4:	8822d0fa 	srli	r17,r17,3
 40159e8:	4010d0fa 	srli	r8,r8,3
 40159ec:	9007883a 	mov	r3,r18
 40159f0:	1444b03a 	or	r2,r2,r17
 40159f4:	0101ffc4 	movi	r4,2047
 40159f8:	81002426 	beq	r16,r4,4015a8c <__adddf3+0x2b8>
 40159fc:	8120703a 	and	r16,r16,r4
 4015a00:	01000434 	movhi	r4,16
 4015a04:	213fffc4 	addi	r4,r4,-1
 4015a08:	4110703a 	and	r8,r8,r4
 4015a0c:	003fa806 	br	40158b0 <__alt_data_end+0xfc0158b0>
 4015a10:	8089c83a 	sub	r4,r16,r2
 4015a14:	01005e0e 	bge	zero,r4,4015b90 <__adddf3+0x3bc>
 4015a18:	10002b26 	beq	r2,zero,4015ac8 <__adddf3+0x2f4>
 4015a1c:	0081ffc4 	movi	r2,2047
 4015a20:	80bf8b26 	beq	r16,r2,4015850 <__alt_data_end+0xfc015850>
 4015a24:	4a402034 	orhi	r9,r9,128
 4015a28:	00800e04 	movi	r2,56
 4015a2c:	1100a40e 	bge	r2,r4,4015cc0 <__adddf3+0x4ec>
 4015a30:	498cb03a 	or	r6,r9,r6
 4015a34:	300ac03a 	cmpne	r5,r6,zero
 4015a38:	0013883a 	mov	r9,zero
 4015a3c:	2c4b883a 	add	r5,r5,r17
 4015a40:	2c63803a 	cmpltu	r17,r5,r17
 4015a44:	4a11883a 	add	r8,r9,r8
 4015a48:	8a11883a 	add	r8,r17,r8
 4015a4c:	2823883a 	mov	r17,r5
 4015a50:	4080202c 	andhi	r2,r8,128
 4015a54:	103fe026 	beq	r2,zero,40159d8 <__alt_data_end+0xfc0159d8>
 4015a58:	84000044 	addi	r16,r16,1
 4015a5c:	0081ffc4 	movi	r2,2047
 4015a60:	8080d226 	beq	r16,r2,4015dac <__adddf3+0x5d8>
 4015a64:	00bfe034 	movhi	r2,65408
 4015a68:	10bfffc4 	addi	r2,r2,-1
 4015a6c:	4090703a 	and	r8,r8,r2
 4015a70:	880ad07a 	srli	r5,r17,1
 4015a74:	400897fa 	slli	r4,r8,31
 4015a78:	88c0004c 	andi	r3,r17,1
 4015a7c:	28e2b03a 	or	r17,r5,r3
 4015a80:	4010d07a 	srli	r8,r8,1
 4015a84:	2462b03a 	or	r17,r4,r17
 4015a88:	003f7106 	br	4015850 <__alt_data_end+0xfc015850>
 4015a8c:	4088b03a 	or	r4,r8,r2
 4015a90:	20014526 	beq	r4,zero,4015fa8 <__adddf3+0x7d4>
 4015a94:	01000434 	movhi	r4,16
 4015a98:	42000234 	orhi	r8,r8,8
 4015a9c:	213fffc4 	addi	r4,r4,-1
 4015aa0:	4110703a 	and	r8,r8,r4
 4015aa4:	003f8206 	br	40158b0 <__alt_data_end+0xfc0158b0>
 4015aa8:	18ffffc4 	addi	r3,r3,-1
 4015aac:	1800491e 	bne	r3,zero,4015bd4 <__adddf3+0x400>
 4015ab0:	898bc83a 	sub	r5,r17,r6
 4015ab4:	8963803a 	cmpltu	r17,r17,r5
 4015ab8:	4251c83a 	sub	r8,r8,r9
 4015abc:	4451c83a 	sub	r8,r8,r17
 4015ac0:	2823883a 	mov	r17,r5
 4015ac4:	003f9f06 	br	4015944 <__alt_data_end+0xfc015944>
 4015ac8:	4984b03a 	or	r2,r9,r6
 4015acc:	103f6026 	beq	r2,zero,4015850 <__alt_data_end+0xfc015850>
 4015ad0:	213fffc4 	addi	r4,r4,-1
 4015ad4:	2000931e 	bne	r4,zero,4015d24 <__adddf3+0x550>
 4015ad8:	898d883a 	add	r6,r17,r6
 4015adc:	3463803a 	cmpltu	r17,r6,r17
 4015ae0:	4251883a 	add	r8,r8,r9
 4015ae4:	8a11883a 	add	r8,r17,r8
 4015ae8:	3023883a 	mov	r17,r6
 4015aec:	003fd806 	br	4015a50 <__alt_data_end+0xfc015a50>
 4015af0:	1800541e 	bne	r3,zero,4015c44 <__adddf3+0x470>
 4015af4:	80800044 	addi	r2,r16,1
 4015af8:	1081ffcc 	andi	r2,r2,2047
 4015afc:	00c00044 	movi	r3,1
 4015b00:	1880a00e 	bge	r3,r2,4015d84 <__adddf3+0x5b0>
 4015b04:	8989c83a 	sub	r4,r17,r6
 4015b08:	8905803a 	cmpltu	r2,r17,r4
 4015b0c:	4267c83a 	sub	r19,r8,r9
 4015b10:	98a7c83a 	sub	r19,r19,r2
 4015b14:	9880202c 	andhi	r2,r19,128
 4015b18:	10006326 	beq	r2,zero,4015ca8 <__adddf3+0x4d4>
 4015b1c:	3463c83a 	sub	r17,r6,r17
 4015b20:	4a07c83a 	sub	r3,r9,r8
 4015b24:	344d803a 	cmpltu	r6,r6,r17
 4015b28:	19a7c83a 	sub	r19,r3,r6
 4015b2c:	3825883a 	mov	r18,r7
 4015b30:	983f8a1e 	bne	r19,zero,401595c <__alt_data_end+0xfc01595c>
 4015b34:	8809883a 	mov	r4,r17
 4015b38:	4017dd80 	call	4017dd8 <__clzsi2>
 4015b3c:	10800804 	addi	r2,r2,32
 4015b40:	10fffe04 	addi	r3,r2,-8
 4015b44:	010007c4 	movi	r4,31
 4015b48:	20ff890e 	bge	r4,r3,4015970 <__alt_data_end+0xfc015970>
 4015b4c:	10bff604 	addi	r2,r2,-40
 4015b50:	8884983a 	sll	r2,r17,r2
 4015b54:	0023883a 	mov	r17,zero
 4015b58:	1c3f8c0e 	bge	r3,r16,401598c <__alt_data_end+0xfc01598c>
 4015b5c:	023fe034 	movhi	r8,65408
 4015b60:	423fffc4 	addi	r8,r8,-1
 4015b64:	80e1c83a 	sub	r16,r16,r3
 4015b68:	1210703a 	and	r8,r2,r8
 4015b6c:	003f3806 	br	4015850 <__alt_data_end+0xfc015850>
 4015b70:	9007883a 	mov	r3,r18
 4015b74:	0011883a 	mov	r8,zero
 4015b78:	0005883a 	mov	r2,zero
 4015b7c:	003f4c06 	br	40158b0 <__alt_data_end+0xfc0158b0>
 4015b80:	498cb03a 	or	r6,r9,r6
 4015b84:	300cc03a 	cmpne	r6,r6,zero
 4015b88:	0007883a 	mov	r3,zero
 4015b8c:	003f6806 	br	4015930 <__alt_data_end+0xfc015930>
 4015b90:	20009c1e 	bne	r4,zero,4015e04 <__adddf3+0x630>
 4015b94:	80800044 	addi	r2,r16,1
 4015b98:	1141ffcc 	andi	r5,r2,2047
 4015b9c:	01000044 	movi	r4,1
 4015ba0:	2140670e 	bge	r4,r5,4015d40 <__adddf3+0x56c>
 4015ba4:	0101ffc4 	movi	r4,2047
 4015ba8:	11007f26 	beq	r2,r4,4015da8 <__adddf3+0x5d4>
 4015bac:	898d883a 	add	r6,r17,r6
 4015bb0:	4247883a 	add	r3,r8,r9
 4015bb4:	3451803a 	cmpltu	r8,r6,r17
 4015bb8:	40d1883a 	add	r8,r8,r3
 4015bbc:	402297fa 	slli	r17,r8,31
 4015bc0:	300cd07a 	srli	r6,r6,1
 4015bc4:	4010d07a 	srli	r8,r8,1
 4015bc8:	1021883a 	mov	r16,r2
 4015bcc:	89a2b03a 	or	r17,r17,r6
 4015bd0:	003f1f06 	br	4015850 <__alt_data_end+0xfc015850>
 4015bd4:	0081ffc4 	movi	r2,2047
 4015bd8:	80bf481e 	bne	r16,r2,40158fc <__alt_data_end+0xfc0158fc>
 4015bdc:	003f1c06 	br	4015850 <__alt_data_end+0xfc015850>
 4015be0:	843ff844 	addi	r16,r16,-31
 4015be4:	01000804 	movi	r4,32
 4015be8:	1406d83a 	srl	r3,r2,r16
 4015bec:	41005026 	beq	r8,r4,4015d30 <__adddf3+0x55c>
 4015bf0:	01001004 	movi	r4,64
 4015bf4:	2211c83a 	sub	r8,r4,r8
 4015bf8:	1204983a 	sll	r2,r2,r8
 4015bfc:	88a2b03a 	or	r17,r17,r2
 4015c00:	8822c03a 	cmpne	r17,r17,zero
 4015c04:	1c62b03a 	or	r17,r3,r17
 4015c08:	0011883a 	mov	r8,zero
 4015c0c:	0021883a 	mov	r16,zero
 4015c10:	003f7106 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4015c14:	193ff804 	addi	r4,r3,-32
 4015c18:	00800804 	movi	r2,32
 4015c1c:	4908d83a 	srl	r4,r9,r4
 4015c20:	18804526 	beq	r3,r2,4015d38 <__adddf3+0x564>
 4015c24:	00801004 	movi	r2,64
 4015c28:	10c5c83a 	sub	r2,r2,r3
 4015c2c:	4886983a 	sll	r3,r9,r2
 4015c30:	198cb03a 	or	r6,r3,r6
 4015c34:	300cc03a 	cmpne	r6,r6,zero
 4015c38:	218cb03a 	or	r6,r4,r6
 4015c3c:	0007883a 	mov	r3,zero
 4015c40:	003f3b06 	br	4015930 <__alt_data_end+0xfc015930>
 4015c44:	80002a26 	beq	r16,zero,4015cf0 <__adddf3+0x51c>
 4015c48:	0101ffc4 	movi	r4,2047
 4015c4c:	11006826 	beq	r2,r4,4015df0 <__adddf3+0x61c>
 4015c50:	00c7c83a 	sub	r3,zero,r3
 4015c54:	42002034 	orhi	r8,r8,128
 4015c58:	01000e04 	movi	r4,56
 4015c5c:	20c07c16 	blt	r4,r3,4015e50 <__adddf3+0x67c>
 4015c60:	010007c4 	movi	r4,31
 4015c64:	20c0da16 	blt	r4,r3,4015fd0 <__adddf3+0x7fc>
 4015c68:	01000804 	movi	r4,32
 4015c6c:	20c9c83a 	sub	r4,r4,r3
 4015c70:	4114983a 	sll	r10,r8,r4
 4015c74:	88cad83a 	srl	r5,r17,r3
 4015c78:	8908983a 	sll	r4,r17,r4
 4015c7c:	40c6d83a 	srl	r3,r8,r3
 4015c80:	5162b03a 	or	r17,r10,r5
 4015c84:	2008c03a 	cmpne	r4,r4,zero
 4015c88:	8922b03a 	or	r17,r17,r4
 4015c8c:	3463c83a 	sub	r17,r6,r17
 4015c90:	48c7c83a 	sub	r3,r9,r3
 4015c94:	344d803a 	cmpltu	r6,r6,r17
 4015c98:	1991c83a 	sub	r8,r3,r6
 4015c9c:	1021883a 	mov	r16,r2
 4015ca0:	3825883a 	mov	r18,r7
 4015ca4:	003f2706 	br	4015944 <__alt_data_end+0xfc015944>
 4015ca8:	24d0b03a 	or	r8,r4,r19
 4015cac:	40001b1e 	bne	r8,zero,4015d1c <__adddf3+0x548>
 4015cb0:	0005883a 	mov	r2,zero
 4015cb4:	0007883a 	mov	r3,zero
 4015cb8:	0021883a 	mov	r16,zero
 4015cbc:	003f4d06 	br	40159f4 <__alt_data_end+0xfc0159f4>
 4015cc0:	008007c4 	movi	r2,31
 4015cc4:	11003c16 	blt	r2,r4,4015db8 <__adddf3+0x5e4>
 4015cc8:	00800804 	movi	r2,32
 4015ccc:	1105c83a 	sub	r2,r2,r4
 4015cd0:	488e983a 	sll	r7,r9,r2
 4015cd4:	310ad83a 	srl	r5,r6,r4
 4015cd8:	3084983a 	sll	r2,r6,r2
 4015cdc:	4912d83a 	srl	r9,r9,r4
 4015ce0:	394ab03a 	or	r5,r7,r5
 4015ce4:	1004c03a 	cmpne	r2,r2,zero
 4015ce8:	288ab03a 	or	r5,r5,r2
 4015cec:	003f5306 	br	4015a3c <__alt_data_end+0xfc015a3c>
 4015cf0:	4448b03a 	or	r4,r8,r17
 4015cf4:	20003e26 	beq	r4,zero,4015df0 <__adddf3+0x61c>
 4015cf8:	00c6303a 	nor	r3,zero,r3
 4015cfc:	18003a1e 	bne	r3,zero,4015de8 <__adddf3+0x614>
 4015d00:	3463c83a 	sub	r17,r6,r17
 4015d04:	4a07c83a 	sub	r3,r9,r8
 4015d08:	344d803a 	cmpltu	r6,r6,r17
 4015d0c:	1991c83a 	sub	r8,r3,r6
 4015d10:	1021883a 	mov	r16,r2
 4015d14:	3825883a 	mov	r18,r7
 4015d18:	003f0a06 	br	4015944 <__alt_data_end+0xfc015944>
 4015d1c:	2023883a 	mov	r17,r4
 4015d20:	003f0d06 	br	4015958 <__alt_data_end+0xfc015958>
 4015d24:	0081ffc4 	movi	r2,2047
 4015d28:	80bf3f1e 	bne	r16,r2,4015a28 <__alt_data_end+0xfc015a28>
 4015d2c:	003ec806 	br	4015850 <__alt_data_end+0xfc015850>
 4015d30:	0005883a 	mov	r2,zero
 4015d34:	003fb106 	br	4015bfc <__alt_data_end+0xfc015bfc>
 4015d38:	0007883a 	mov	r3,zero
 4015d3c:	003fbc06 	br	4015c30 <__alt_data_end+0xfc015c30>
 4015d40:	4444b03a 	or	r2,r8,r17
 4015d44:	8000871e 	bne	r16,zero,4015f64 <__adddf3+0x790>
 4015d48:	1000ba26 	beq	r2,zero,4016034 <__adddf3+0x860>
 4015d4c:	4984b03a 	or	r2,r9,r6
 4015d50:	103ebf26 	beq	r2,zero,4015850 <__alt_data_end+0xfc015850>
 4015d54:	8985883a 	add	r2,r17,r6
 4015d58:	4247883a 	add	r3,r8,r9
 4015d5c:	1451803a 	cmpltu	r8,r2,r17
 4015d60:	40d1883a 	add	r8,r8,r3
 4015d64:	40c0202c 	andhi	r3,r8,128
 4015d68:	1023883a 	mov	r17,r2
 4015d6c:	183f1a26 	beq	r3,zero,40159d8 <__alt_data_end+0xfc0159d8>
 4015d70:	00bfe034 	movhi	r2,65408
 4015d74:	10bfffc4 	addi	r2,r2,-1
 4015d78:	2021883a 	mov	r16,r4
 4015d7c:	4090703a 	and	r8,r8,r2
 4015d80:	003eb306 	br	4015850 <__alt_data_end+0xfc015850>
 4015d84:	4444b03a 	or	r2,r8,r17
 4015d88:	8000291e 	bne	r16,zero,4015e30 <__adddf3+0x65c>
 4015d8c:	10004b1e 	bne	r2,zero,4015ebc <__adddf3+0x6e8>
 4015d90:	4990b03a 	or	r8,r9,r6
 4015d94:	40008b26 	beq	r8,zero,4015fc4 <__adddf3+0x7f0>
 4015d98:	4811883a 	mov	r8,r9
 4015d9c:	3023883a 	mov	r17,r6
 4015da0:	3825883a 	mov	r18,r7
 4015da4:	003eaa06 	br	4015850 <__alt_data_end+0xfc015850>
 4015da8:	1021883a 	mov	r16,r2
 4015dac:	0011883a 	mov	r8,zero
 4015db0:	0005883a 	mov	r2,zero
 4015db4:	003f0f06 	br	40159f4 <__alt_data_end+0xfc0159f4>
 4015db8:	217ff804 	addi	r5,r4,-32
 4015dbc:	00800804 	movi	r2,32
 4015dc0:	494ad83a 	srl	r5,r9,r5
 4015dc4:	20807d26 	beq	r4,r2,4015fbc <__adddf3+0x7e8>
 4015dc8:	00801004 	movi	r2,64
 4015dcc:	1109c83a 	sub	r4,r2,r4
 4015dd0:	4912983a 	sll	r9,r9,r4
 4015dd4:	498cb03a 	or	r6,r9,r6
 4015dd8:	300cc03a 	cmpne	r6,r6,zero
 4015ddc:	298ab03a 	or	r5,r5,r6
 4015de0:	0013883a 	mov	r9,zero
 4015de4:	003f1506 	br	4015a3c <__alt_data_end+0xfc015a3c>
 4015de8:	0101ffc4 	movi	r4,2047
 4015dec:	113f9a1e 	bne	r2,r4,4015c58 <__alt_data_end+0xfc015c58>
 4015df0:	4811883a 	mov	r8,r9
 4015df4:	3023883a 	mov	r17,r6
 4015df8:	1021883a 	mov	r16,r2
 4015dfc:	3825883a 	mov	r18,r7
 4015e00:	003e9306 	br	4015850 <__alt_data_end+0xfc015850>
 4015e04:	8000161e 	bne	r16,zero,4015e60 <__adddf3+0x68c>
 4015e08:	444ab03a 	or	r5,r8,r17
 4015e0c:	28005126 	beq	r5,zero,4015f54 <__adddf3+0x780>
 4015e10:	0108303a 	nor	r4,zero,r4
 4015e14:	20004d1e 	bne	r4,zero,4015f4c <__adddf3+0x778>
 4015e18:	89a3883a 	add	r17,r17,r6
 4015e1c:	4253883a 	add	r9,r8,r9
 4015e20:	898d803a 	cmpltu	r6,r17,r6
 4015e24:	3251883a 	add	r8,r6,r9
 4015e28:	1021883a 	mov	r16,r2
 4015e2c:	003f0806 	br	4015a50 <__alt_data_end+0xfc015a50>
 4015e30:	1000301e 	bne	r2,zero,4015ef4 <__adddf3+0x720>
 4015e34:	4984b03a 	or	r2,r9,r6
 4015e38:	10007126 	beq	r2,zero,4016000 <__adddf3+0x82c>
 4015e3c:	4811883a 	mov	r8,r9
 4015e40:	3023883a 	mov	r17,r6
 4015e44:	3825883a 	mov	r18,r7
 4015e48:	0401ffc4 	movi	r16,2047
 4015e4c:	003e8006 	br	4015850 <__alt_data_end+0xfc015850>
 4015e50:	4462b03a 	or	r17,r8,r17
 4015e54:	8822c03a 	cmpne	r17,r17,zero
 4015e58:	0007883a 	mov	r3,zero
 4015e5c:	003f8b06 	br	4015c8c <__alt_data_end+0xfc015c8c>
 4015e60:	0141ffc4 	movi	r5,2047
 4015e64:	11403b26 	beq	r2,r5,4015f54 <__adddf3+0x780>
 4015e68:	0109c83a 	sub	r4,zero,r4
 4015e6c:	42002034 	orhi	r8,r8,128
 4015e70:	01400e04 	movi	r5,56
 4015e74:	29006716 	blt	r5,r4,4016014 <__adddf3+0x840>
 4015e78:	014007c4 	movi	r5,31
 4015e7c:	29007016 	blt	r5,r4,4016040 <__adddf3+0x86c>
 4015e80:	01400804 	movi	r5,32
 4015e84:	290bc83a 	sub	r5,r5,r4
 4015e88:	4154983a 	sll	r10,r8,r5
 4015e8c:	890ed83a 	srl	r7,r17,r4
 4015e90:	894a983a 	sll	r5,r17,r5
 4015e94:	4108d83a 	srl	r4,r8,r4
 4015e98:	51e2b03a 	or	r17,r10,r7
 4015e9c:	280ac03a 	cmpne	r5,r5,zero
 4015ea0:	8962b03a 	or	r17,r17,r5
 4015ea4:	89a3883a 	add	r17,r17,r6
 4015ea8:	2253883a 	add	r9,r4,r9
 4015eac:	898d803a 	cmpltu	r6,r17,r6
 4015eb0:	3251883a 	add	r8,r6,r9
 4015eb4:	1021883a 	mov	r16,r2
 4015eb8:	003ee506 	br	4015a50 <__alt_data_end+0xfc015a50>
 4015ebc:	4984b03a 	or	r2,r9,r6
 4015ec0:	103e6326 	beq	r2,zero,4015850 <__alt_data_end+0xfc015850>
 4015ec4:	8987c83a 	sub	r3,r17,r6
 4015ec8:	88c9803a 	cmpltu	r4,r17,r3
 4015ecc:	4245c83a 	sub	r2,r8,r9
 4015ed0:	1105c83a 	sub	r2,r2,r4
 4015ed4:	1100202c 	andhi	r4,r2,128
 4015ed8:	203ebb26 	beq	r4,zero,40159c8 <__alt_data_end+0xfc0159c8>
 4015edc:	3463c83a 	sub	r17,r6,r17
 4015ee0:	4a07c83a 	sub	r3,r9,r8
 4015ee4:	344d803a 	cmpltu	r6,r6,r17
 4015ee8:	1991c83a 	sub	r8,r3,r6
 4015eec:	3825883a 	mov	r18,r7
 4015ef0:	003e5706 	br	4015850 <__alt_data_end+0xfc015850>
 4015ef4:	4984b03a 	or	r2,r9,r6
 4015ef8:	10002e26 	beq	r2,zero,4015fb4 <__adddf3+0x7e0>
 4015efc:	4004d0fa 	srli	r2,r8,3
 4015f00:	8822d0fa 	srli	r17,r17,3
 4015f04:	4010977a 	slli	r8,r8,29
 4015f08:	10c0022c 	andhi	r3,r2,8
 4015f0c:	4462b03a 	or	r17,r8,r17
 4015f10:	18000826 	beq	r3,zero,4015f34 <__adddf3+0x760>
 4015f14:	4808d0fa 	srli	r4,r9,3
 4015f18:	20c0022c 	andhi	r3,r4,8
 4015f1c:	1800051e 	bne	r3,zero,4015f34 <__adddf3+0x760>
 4015f20:	300cd0fa 	srli	r6,r6,3
 4015f24:	4806977a 	slli	r3,r9,29
 4015f28:	2005883a 	mov	r2,r4
 4015f2c:	3825883a 	mov	r18,r7
 4015f30:	19a2b03a 	or	r17,r3,r6
 4015f34:	8810d77a 	srli	r8,r17,29
 4015f38:	100490fa 	slli	r2,r2,3
 4015f3c:	882290fa 	slli	r17,r17,3
 4015f40:	0401ffc4 	movi	r16,2047
 4015f44:	4090b03a 	or	r8,r8,r2
 4015f48:	003e4106 	br	4015850 <__alt_data_end+0xfc015850>
 4015f4c:	0141ffc4 	movi	r5,2047
 4015f50:	117fc71e 	bne	r2,r5,4015e70 <__alt_data_end+0xfc015e70>
 4015f54:	4811883a 	mov	r8,r9
 4015f58:	3023883a 	mov	r17,r6
 4015f5c:	1021883a 	mov	r16,r2
 4015f60:	003e3b06 	br	4015850 <__alt_data_end+0xfc015850>
 4015f64:	10002f26 	beq	r2,zero,4016024 <__adddf3+0x850>
 4015f68:	4984b03a 	or	r2,r9,r6
 4015f6c:	10001126 	beq	r2,zero,4015fb4 <__adddf3+0x7e0>
 4015f70:	4004d0fa 	srli	r2,r8,3
 4015f74:	8822d0fa 	srli	r17,r17,3
 4015f78:	4010977a 	slli	r8,r8,29
 4015f7c:	10c0022c 	andhi	r3,r2,8
 4015f80:	4462b03a 	or	r17,r8,r17
 4015f84:	183feb26 	beq	r3,zero,4015f34 <__alt_data_end+0xfc015f34>
 4015f88:	4808d0fa 	srli	r4,r9,3
 4015f8c:	20c0022c 	andhi	r3,r4,8
 4015f90:	183fe81e 	bne	r3,zero,4015f34 <__alt_data_end+0xfc015f34>
 4015f94:	300cd0fa 	srli	r6,r6,3
 4015f98:	4806977a 	slli	r3,r9,29
 4015f9c:	2005883a 	mov	r2,r4
 4015fa0:	19a2b03a 	or	r17,r3,r6
 4015fa4:	003fe306 	br	4015f34 <__alt_data_end+0xfc015f34>
 4015fa8:	0011883a 	mov	r8,zero
 4015fac:	0005883a 	mov	r2,zero
 4015fb0:	003e3f06 	br	40158b0 <__alt_data_end+0xfc0158b0>
 4015fb4:	0401ffc4 	movi	r16,2047
 4015fb8:	003e2506 	br	4015850 <__alt_data_end+0xfc015850>
 4015fbc:	0013883a 	mov	r9,zero
 4015fc0:	003f8406 	br	4015dd4 <__alt_data_end+0xfc015dd4>
 4015fc4:	0005883a 	mov	r2,zero
 4015fc8:	0007883a 	mov	r3,zero
 4015fcc:	003e8906 	br	40159f4 <__alt_data_end+0xfc0159f4>
 4015fd0:	197ff804 	addi	r5,r3,-32
 4015fd4:	01000804 	movi	r4,32
 4015fd8:	414ad83a 	srl	r5,r8,r5
 4015fdc:	19002426 	beq	r3,r4,4016070 <__adddf3+0x89c>
 4015fe0:	01001004 	movi	r4,64
 4015fe4:	20c7c83a 	sub	r3,r4,r3
 4015fe8:	40c6983a 	sll	r3,r8,r3
 4015fec:	1c46b03a 	or	r3,r3,r17
 4015ff0:	1806c03a 	cmpne	r3,r3,zero
 4015ff4:	28e2b03a 	or	r17,r5,r3
 4015ff8:	0007883a 	mov	r3,zero
 4015ffc:	003f2306 	br	4015c8c <__alt_data_end+0xfc015c8c>
 4016000:	0007883a 	mov	r3,zero
 4016004:	5811883a 	mov	r8,r11
 4016008:	00bfffc4 	movi	r2,-1
 401600c:	0401ffc4 	movi	r16,2047
 4016010:	003e7806 	br	40159f4 <__alt_data_end+0xfc0159f4>
 4016014:	4462b03a 	or	r17,r8,r17
 4016018:	8822c03a 	cmpne	r17,r17,zero
 401601c:	0009883a 	mov	r4,zero
 4016020:	003fa006 	br	4015ea4 <__alt_data_end+0xfc015ea4>
 4016024:	4811883a 	mov	r8,r9
 4016028:	3023883a 	mov	r17,r6
 401602c:	0401ffc4 	movi	r16,2047
 4016030:	003e0706 	br	4015850 <__alt_data_end+0xfc015850>
 4016034:	4811883a 	mov	r8,r9
 4016038:	3023883a 	mov	r17,r6
 401603c:	003e0406 	br	4015850 <__alt_data_end+0xfc015850>
 4016040:	21fff804 	addi	r7,r4,-32
 4016044:	01400804 	movi	r5,32
 4016048:	41ced83a 	srl	r7,r8,r7
 401604c:	21400a26 	beq	r4,r5,4016078 <__adddf3+0x8a4>
 4016050:	01401004 	movi	r5,64
 4016054:	2909c83a 	sub	r4,r5,r4
 4016058:	4108983a 	sll	r4,r8,r4
 401605c:	2448b03a 	or	r4,r4,r17
 4016060:	2008c03a 	cmpne	r4,r4,zero
 4016064:	3922b03a 	or	r17,r7,r4
 4016068:	0009883a 	mov	r4,zero
 401606c:	003f8d06 	br	4015ea4 <__alt_data_end+0xfc015ea4>
 4016070:	0007883a 	mov	r3,zero
 4016074:	003fdd06 	br	4015fec <__alt_data_end+0xfc015fec>
 4016078:	0009883a 	mov	r4,zero
 401607c:	003ff706 	br	401605c <__alt_data_end+0xfc01605c>

04016080 <__divdf3>:
 4016080:	defff204 	addi	sp,sp,-56
 4016084:	dd400915 	stw	r21,36(sp)
 4016088:	282ad53a 	srli	r21,r5,20
 401608c:	dd000815 	stw	r20,32(sp)
 4016090:	2828d7fa 	srli	r20,r5,31
 4016094:	dc000415 	stw	r16,16(sp)
 4016098:	04000434 	movhi	r16,16
 401609c:	df000c15 	stw	fp,48(sp)
 40160a0:	843fffc4 	addi	r16,r16,-1
 40160a4:	dfc00d15 	stw	ra,52(sp)
 40160a8:	ddc00b15 	stw	r23,44(sp)
 40160ac:	dd800a15 	stw	r22,40(sp)
 40160b0:	dcc00715 	stw	r19,28(sp)
 40160b4:	dc800615 	stw	r18,24(sp)
 40160b8:	dc400515 	stw	r17,20(sp)
 40160bc:	ad41ffcc 	andi	r21,r21,2047
 40160c0:	2c20703a 	and	r16,r5,r16
 40160c4:	a7003fcc 	andi	fp,r20,255
 40160c8:	a8006126 	beq	r21,zero,4016250 <__divdf3+0x1d0>
 40160cc:	0081ffc4 	movi	r2,2047
 40160d0:	2025883a 	mov	r18,r4
 40160d4:	a8803726 	beq	r21,r2,40161b4 <__divdf3+0x134>
 40160d8:	80800434 	orhi	r2,r16,16
 40160dc:	100490fa 	slli	r2,r2,3
 40160e0:	2020d77a 	srli	r16,r4,29
 40160e4:	202490fa 	slli	r18,r4,3
 40160e8:	ad7f0044 	addi	r21,r21,-1023
 40160ec:	80a0b03a 	or	r16,r16,r2
 40160f0:	0027883a 	mov	r19,zero
 40160f4:	0013883a 	mov	r9,zero
 40160f8:	3804d53a 	srli	r2,r7,20
 40160fc:	382cd7fa 	srli	r22,r7,31
 4016100:	04400434 	movhi	r17,16
 4016104:	8c7fffc4 	addi	r17,r17,-1
 4016108:	1081ffcc 	andi	r2,r2,2047
 401610c:	3011883a 	mov	r8,r6
 4016110:	3c62703a 	and	r17,r7,r17
 4016114:	b5c03fcc 	andi	r23,r22,255
 4016118:	10006c26 	beq	r2,zero,40162cc <__divdf3+0x24c>
 401611c:	00c1ffc4 	movi	r3,2047
 4016120:	10c06426 	beq	r2,r3,40162b4 <__divdf3+0x234>
 4016124:	88c00434 	orhi	r3,r17,16
 4016128:	180690fa 	slli	r3,r3,3
 401612c:	3022d77a 	srli	r17,r6,29
 4016130:	301090fa 	slli	r8,r6,3
 4016134:	10bf0044 	addi	r2,r2,-1023
 4016138:	88e2b03a 	or	r17,r17,r3
 401613c:	000f883a 	mov	r7,zero
 4016140:	a58cf03a 	xor	r6,r20,r22
 4016144:	3cc8b03a 	or	r4,r7,r19
 4016148:	a8abc83a 	sub	r21,r21,r2
 401614c:	008003c4 	movi	r2,15
 4016150:	3007883a 	mov	r3,r6
 4016154:	34c03fcc 	andi	r19,r6,255
 4016158:	11009036 	bltu	r2,r4,401639c <__divdf3+0x31c>
 401615c:	200890ba 	slli	r4,r4,2
 4016160:	00810074 	movhi	r2,1025
 4016164:	10985d04 	addi	r2,r2,24948
 4016168:	2089883a 	add	r4,r4,r2
 401616c:	20800017 	ldw	r2,0(r4)
 4016170:	1000683a 	jmp	r2
 4016174:	0401639c 	xori	r16,zero,1422
 4016178:	040161ec 	andhi	r16,zero,1415
 401617c:	0401638c 	andi	r16,zero,1422
 4016180:	040161e0 	cmpeqi	r16,zero,1415
 4016184:	0401638c 	andi	r16,zero,1422
 4016188:	04016360 	cmpeqi	r16,zero,1421
 401618c:	0401638c 	andi	r16,zero,1422
 4016190:	040161e0 	cmpeqi	r16,zero,1415
 4016194:	040161ec 	andhi	r16,zero,1415
 4016198:	040161ec 	andhi	r16,zero,1415
 401619c:	04016360 	cmpeqi	r16,zero,1421
 40161a0:	040161e0 	cmpeqi	r16,zero,1415
 40161a4:	040161d0 	cmplti	r16,zero,1415
 40161a8:	040161d0 	cmplti	r16,zero,1415
 40161ac:	040161d0 	cmplti	r16,zero,1415
 40161b0:	04016680 	call	401668 <__reset-0x3bfe998>
 40161b4:	2404b03a 	or	r2,r4,r16
 40161b8:	1000661e 	bne	r2,zero,4016354 <__divdf3+0x2d4>
 40161bc:	04c00204 	movi	r19,8
 40161c0:	0021883a 	mov	r16,zero
 40161c4:	0025883a 	mov	r18,zero
 40161c8:	02400084 	movi	r9,2
 40161cc:	003fca06 	br	40160f8 <__alt_data_end+0xfc0160f8>
 40161d0:	8023883a 	mov	r17,r16
 40161d4:	9011883a 	mov	r8,r18
 40161d8:	e02f883a 	mov	r23,fp
 40161dc:	480f883a 	mov	r7,r9
 40161e0:	00800084 	movi	r2,2
 40161e4:	3881311e 	bne	r7,r2,40166ac <__divdf3+0x62c>
 40161e8:	b827883a 	mov	r19,r23
 40161ec:	98c0004c 	andi	r3,r19,1
 40161f0:	0081ffc4 	movi	r2,2047
 40161f4:	000b883a 	mov	r5,zero
 40161f8:	0025883a 	mov	r18,zero
 40161fc:	1004953a 	slli	r2,r2,20
 4016200:	18c03fcc 	andi	r3,r3,255
 4016204:	04400434 	movhi	r17,16
 4016208:	8c7fffc4 	addi	r17,r17,-1
 401620c:	180697fa 	slli	r3,r3,31
 4016210:	2c4a703a 	and	r5,r5,r17
 4016214:	288ab03a 	or	r5,r5,r2
 4016218:	28c6b03a 	or	r3,r5,r3
 401621c:	9005883a 	mov	r2,r18
 4016220:	dfc00d17 	ldw	ra,52(sp)
 4016224:	df000c17 	ldw	fp,48(sp)
 4016228:	ddc00b17 	ldw	r23,44(sp)
 401622c:	dd800a17 	ldw	r22,40(sp)
 4016230:	dd400917 	ldw	r21,36(sp)
 4016234:	dd000817 	ldw	r20,32(sp)
 4016238:	dcc00717 	ldw	r19,28(sp)
 401623c:	dc800617 	ldw	r18,24(sp)
 4016240:	dc400517 	ldw	r17,20(sp)
 4016244:	dc000417 	ldw	r16,16(sp)
 4016248:	dec00e04 	addi	sp,sp,56
 401624c:	f800283a 	ret
 4016250:	2404b03a 	or	r2,r4,r16
 4016254:	2027883a 	mov	r19,r4
 4016258:	10003926 	beq	r2,zero,4016340 <__divdf3+0x2c0>
 401625c:	80012e26 	beq	r16,zero,4016718 <__divdf3+0x698>
 4016260:	8009883a 	mov	r4,r16
 4016264:	d9800315 	stw	r6,12(sp)
 4016268:	d9c00215 	stw	r7,8(sp)
 401626c:	4017dd80 	call	4017dd8 <__clzsi2>
 4016270:	d9800317 	ldw	r6,12(sp)
 4016274:	d9c00217 	ldw	r7,8(sp)
 4016278:	113ffd44 	addi	r4,r2,-11
 401627c:	00c00704 	movi	r3,28
 4016280:	19012116 	blt	r3,r4,4016708 <__divdf3+0x688>
 4016284:	00c00744 	movi	r3,29
 4016288:	147ffe04 	addi	r17,r2,-8
 401628c:	1907c83a 	sub	r3,r3,r4
 4016290:	8460983a 	sll	r16,r16,r17
 4016294:	98c6d83a 	srl	r3,r19,r3
 4016298:	9c64983a 	sll	r18,r19,r17
 401629c:	1c20b03a 	or	r16,r3,r16
 40162a0:	1080fcc4 	addi	r2,r2,1011
 40162a4:	00abc83a 	sub	r21,zero,r2
 40162a8:	0027883a 	mov	r19,zero
 40162ac:	0013883a 	mov	r9,zero
 40162b0:	003f9106 	br	40160f8 <__alt_data_end+0xfc0160f8>
 40162b4:	3446b03a 	or	r3,r6,r17
 40162b8:	18001f1e 	bne	r3,zero,4016338 <__divdf3+0x2b8>
 40162bc:	0023883a 	mov	r17,zero
 40162c0:	0011883a 	mov	r8,zero
 40162c4:	01c00084 	movi	r7,2
 40162c8:	003f9d06 	br	4016140 <__alt_data_end+0xfc016140>
 40162cc:	3446b03a 	or	r3,r6,r17
 40162d0:	18001526 	beq	r3,zero,4016328 <__divdf3+0x2a8>
 40162d4:	88011b26 	beq	r17,zero,4016744 <__divdf3+0x6c4>
 40162d8:	8809883a 	mov	r4,r17
 40162dc:	d9800315 	stw	r6,12(sp)
 40162e0:	da400115 	stw	r9,4(sp)
 40162e4:	4017dd80 	call	4017dd8 <__clzsi2>
 40162e8:	d9800317 	ldw	r6,12(sp)
 40162ec:	da400117 	ldw	r9,4(sp)
 40162f0:	113ffd44 	addi	r4,r2,-11
 40162f4:	00c00704 	movi	r3,28
 40162f8:	19010e16 	blt	r3,r4,4016734 <__divdf3+0x6b4>
 40162fc:	00c00744 	movi	r3,29
 4016300:	123ffe04 	addi	r8,r2,-8
 4016304:	1907c83a 	sub	r3,r3,r4
 4016308:	8a22983a 	sll	r17,r17,r8
 401630c:	30c6d83a 	srl	r3,r6,r3
 4016310:	3210983a 	sll	r8,r6,r8
 4016314:	1c62b03a 	or	r17,r3,r17
 4016318:	1080fcc4 	addi	r2,r2,1011
 401631c:	0085c83a 	sub	r2,zero,r2
 4016320:	000f883a 	mov	r7,zero
 4016324:	003f8606 	br	4016140 <__alt_data_end+0xfc016140>
 4016328:	0023883a 	mov	r17,zero
 401632c:	0011883a 	mov	r8,zero
 4016330:	01c00044 	movi	r7,1
 4016334:	003f8206 	br	4016140 <__alt_data_end+0xfc016140>
 4016338:	01c000c4 	movi	r7,3
 401633c:	003f8006 	br	4016140 <__alt_data_end+0xfc016140>
 4016340:	04c00104 	movi	r19,4
 4016344:	0021883a 	mov	r16,zero
 4016348:	0025883a 	mov	r18,zero
 401634c:	02400044 	movi	r9,1
 4016350:	003f6906 	br	40160f8 <__alt_data_end+0xfc0160f8>
 4016354:	04c00304 	movi	r19,12
 4016358:	024000c4 	movi	r9,3
 401635c:	003f6606 	br	40160f8 <__alt_data_end+0xfc0160f8>
 4016360:	01400434 	movhi	r5,16
 4016364:	0007883a 	mov	r3,zero
 4016368:	297fffc4 	addi	r5,r5,-1
 401636c:	04bfffc4 	movi	r18,-1
 4016370:	0081ffc4 	movi	r2,2047
 4016374:	003fa106 	br	40161fc <__alt_data_end+0xfc0161fc>
 4016378:	00c00044 	movi	r3,1
 401637c:	1887c83a 	sub	r3,r3,r2
 4016380:	01000e04 	movi	r4,56
 4016384:	20c1210e 	bge	r4,r3,401680c <__divdf3+0x78c>
 4016388:	98c0004c 	andi	r3,r19,1
 401638c:	0005883a 	mov	r2,zero
 4016390:	000b883a 	mov	r5,zero
 4016394:	0025883a 	mov	r18,zero
 4016398:	003f9806 	br	40161fc <__alt_data_end+0xfc0161fc>
 401639c:	8c00fd36 	bltu	r17,r16,4016794 <__divdf3+0x714>
 40163a0:	8440fb26 	beq	r16,r17,4016790 <__divdf3+0x710>
 40163a4:	8007883a 	mov	r3,r16
 40163a8:	ad7fffc4 	addi	r21,r21,-1
 40163ac:	0021883a 	mov	r16,zero
 40163b0:	4004d63a 	srli	r2,r8,24
 40163b4:	8822923a 	slli	r17,r17,8
 40163b8:	1809883a 	mov	r4,r3
 40163bc:	402c923a 	slli	r22,r8,8
 40163c0:	88b8b03a 	or	fp,r17,r2
 40163c4:	e028d43a 	srli	r20,fp,16
 40163c8:	d8c00015 	stw	r3,0(sp)
 40163cc:	e5ffffcc 	andi	r23,fp,65535
 40163d0:	a00b883a 	mov	r5,r20
 40163d4:	400ace00 	call	400ace0 <__udivsi3>
 40163d8:	d8c00017 	ldw	r3,0(sp)
 40163dc:	a00b883a 	mov	r5,r20
 40163e0:	d8800315 	stw	r2,12(sp)
 40163e4:	1809883a 	mov	r4,r3
 40163e8:	400ad440 	call	400ad44 <__umodsi3>
 40163ec:	d9800317 	ldw	r6,12(sp)
 40163f0:	1006943a 	slli	r3,r2,16
 40163f4:	9004d43a 	srli	r2,r18,16
 40163f8:	b9a3383a 	mul	r17,r23,r6
 40163fc:	10c4b03a 	or	r2,r2,r3
 4016400:	1440062e 	bgeu	r2,r17,401641c <__divdf3+0x39c>
 4016404:	1705883a 	add	r2,r2,fp
 4016408:	30ffffc4 	addi	r3,r6,-1
 401640c:	1700ee36 	bltu	r2,fp,40167c8 <__divdf3+0x748>
 4016410:	1440ed2e 	bgeu	r2,r17,40167c8 <__divdf3+0x748>
 4016414:	31bfff84 	addi	r6,r6,-2
 4016418:	1705883a 	add	r2,r2,fp
 401641c:	1463c83a 	sub	r17,r2,r17
 4016420:	a00b883a 	mov	r5,r20
 4016424:	8809883a 	mov	r4,r17
 4016428:	d9800315 	stw	r6,12(sp)
 401642c:	400ace00 	call	400ace0 <__udivsi3>
 4016430:	a00b883a 	mov	r5,r20
 4016434:	8809883a 	mov	r4,r17
 4016438:	d8800215 	stw	r2,8(sp)
 401643c:	400ad440 	call	400ad44 <__umodsi3>
 4016440:	d9c00217 	ldw	r7,8(sp)
 4016444:	1004943a 	slli	r2,r2,16
 4016448:	94bfffcc 	andi	r18,r18,65535
 401644c:	b9d1383a 	mul	r8,r23,r7
 4016450:	90a4b03a 	or	r18,r18,r2
 4016454:	d9800317 	ldw	r6,12(sp)
 4016458:	9200062e 	bgeu	r18,r8,4016474 <__divdf3+0x3f4>
 401645c:	9725883a 	add	r18,r18,fp
 4016460:	38bfffc4 	addi	r2,r7,-1
 4016464:	9700d636 	bltu	r18,fp,40167c0 <__divdf3+0x740>
 4016468:	9200d52e 	bgeu	r18,r8,40167c0 <__divdf3+0x740>
 401646c:	39ffff84 	addi	r7,r7,-2
 4016470:	9725883a 	add	r18,r18,fp
 4016474:	3004943a 	slli	r2,r6,16
 4016478:	b012d43a 	srli	r9,r22,16
 401647c:	b1bfffcc 	andi	r6,r22,65535
 4016480:	11e2b03a 	or	r17,r2,r7
 4016484:	8806d43a 	srli	r3,r17,16
 4016488:	893fffcc 	andi	r4,r17,65535
 401648c:	218b383a 	mul	r5,r4,r6
 4016490:	30c5383a 	mul	r2,r6,r3
 4016494:	2249383a 	mul	r4,r4,r9
 4016498:	280ed43a 	srli	r7,r5,16
 401649c:	9225c83a 	sub	r18,r18,r8
 40164a0:	2089883a 	add	r4,r4,r2
 40164a4:	3909883a 	add	r4,r7,r4
 40164a8:	1a47383a 	mul	r3,r3,r9
 40164ac:	2080022e 	bgeu	r4,r2,40164b8 <__divdf3+0x438>
 40164b0:	00800074 	movhi	r2,1
 40164b4:	1887883a 	add	r3,r3,r2
 40164b8:	2004d43a 	srli	r2,r4,16
 40164bc:	2008943a 	slli	r4,r4,16
 40164c0:	297fffcc 	andi	r5,r5,65535
 40164c4:	10c7883a 	add	r3,r2,r3
 40164c8:	2149883a 	add	r4,r4,r5
 40164cc:	90c0a536 	bltu	r18,r3,4016764 <__divdf3+0x6e4>
 40164d0:	90c0bf26 	beq	r18,r3,40167d0 <__divdf3+0x750>
 40164d4:	90c7c83a 	sub	r3,r18,r3
 40164d8:	810fc83a 	sub	r7,r16,r4
 40164dc:	81e5803a 	cmpltu	r18,r16,r7
 40164e0:	1ca5c83a 	sub	r18,r3,r18
 40164e4:	e480c126 	beq	fp,r18,40167ec <__divdf3+0x76c>
 40164e8:	a00b883a 	mov	r5,r20
 40164ec:	9009883a 	mov	r4,r18
 40164f0:	d9800315 	stw	r6,12(sp)
 40164f4:	d9c00215 	stw	r7,8(sp)
 40164f8:	da400115 	stw	r9,4(sp)
 40164fc:	400ace00 	call	400ace0 <__udivsi3>
 4016500:	a00b883a 	mov	r5,r20
 4016504:	9009883a 	mov	r4,r18
 4016508:	d8800015 	stw	r2,0(sp)
 401650c:	400ad440 	call	400ad44 <__umodsi3>
 4016510:	d9c00217 	ldw	r7,8(sp)
 4016514:	da000017 	ldw	r8,0(sp)
 4016518:	1006943a 	slli	r3,r2,16
 401651c:	3804d43a 	srli	r2,r7,16
 4016520:	ba21383a 	mul	r16,r23,r8
 4016524:	d9800317 	ldw	r6,12(sp)
 4016528:	10c4b03a 	or	r2,r2,r3
 401652c:	da400117 	ldw	r9,4(sp)
 4016530:	1400062e 	bgeu	r2,r16,401654c <__divdf3+0x4cc>
 4016534:	1705883a 	add	r2,r2,fp
 4016538:	40ffffc4 	addi	r3,r8,-1
 401653c:	1700ad36 	bltu	r2,fp,40167f4 <__divdf3+0x774>
 4016540:	1400ac2e 	bgeu	r2,r16,40167f4 <__divdf3+0x774>
 4016544:	423fff84 	addi	r8,r8,-2
 4016548:	1705883a 	add	r2,r2,fp
 401654c:	1421c83a 	sub	r16,r2,r16
 4016550:	a00b883a 	mov	r5,r20
 4016554:	8009883a 	mov	r4,r16
 4016558:	d9800315 	stw	r6,12(sp)
 401655c:	d9c00215 	stw	r7,8(sp)
 4016560:	da000015 	stw	r8,0(sp)
 4016564:	da400115 	stw	r9,4(sp)
 4016568:	400ace00 	call	400ace0 <__udivsi3>
 401656c:	8009883a 	mov	r4,r16
 4016570:	a00b883a 	mov	r5,r20
 4016574:	1025883a 	mov	r18,r2
 4016578:	400ad440 	call	400ad44 <__umodsi3>
 401657c:	d9c00217 	ldw	r7,8(sp)
 4016580:	1004943a 	slli	r2,r2,16
 4016584:	bcaf383a 	mul	r23,r23,r18
 4016588:	393fffcc 	andi	r4,r7,65535
 401658c:	2088b03a 	or	r4,r4,r2
 4016590:	d9800317 	ldw	r6,12(sp)
 4016594:	da000017 	ldw	r8,0(sp)
 4016598:	da400117 	ldw	r9,4(sp)
 401659c:	25c0062e 	bgeu	r4,r23,40165b8 <__divdf3+0x538>
 40165a0:	2709883a 	add	r4,r4,fp
 40165a4:	90bfffc4 	addi	r2,r18,-1
 40165a8:	27009436 	bltu	r4,fp,40167fc <__divdf3+0x77c>
 40165ac:	25c0932e 	bgeu	r4,r23,40167fc <__divdf3+0x77c>
 40165b0:	94bfff84 	addi	r18,r18,-2
 40165b4:	2709883a 	add	r4,r4,fp
 40165b8:	4004943a 	slli	r2,r8,16
 40165bc:	25efc83a 	sub	r23,r4,r23
 40165c0:	1490b03a 	or	r8,r2,r18
 40165c4:	4008d43a 	srli	r4,r8,16
 40165c8:	40ffffcc 	andi	r3,r8,65535
 40165cc:	30c5383a 	mul	r2,r6,r3
 40165d0:	1a47383a 	mul	r3,r3,r9
 40165d4:	310d383a 	mul	r6,r6,r4
 40165d8:	100ad43a 	srli	r5,r2,16
 40165dc:	4913383a 	mul	r9,r9,r4
 40165e0:	1987883a 	add	r3,r3,r6
 40165e4:	28c7883a 	add	r3,r5,r3
 40165e8:	1980022e 	bgeu	r3,r6,40165f4 <__divdf3+0x574>
 40165ec:	01000074 	movhi	r4,1
 40165f0:	4913883a 	add	r9,r9,r4
 40165f4:	1808d43a 	srli	r4,r3,16
 40165f8:	1806943a 	slli	r3,r3,16
 40165fc:	10bfffcc 	andi	r2,r2,65535
 4016600:	2253883a 	add	r9,r4,r9
 4016604:	1887883a 	add	r3,r3,r2
 4016608:	ba403836 	bltu	r23,r9,40166ec <__divdf3+0x66c>
 401660c:	ba403626 	beq	r23,r9,40166e8 <__divdf3+0x668>
 4016610:	42000054 	ori	r8,r8,1
 4016614:	a880ffc4 	addi	r2,r21,1023
 4016618:	00bf570e 	bge	zero,r2,4016378 <__alt_data_end+0xfc016378>
 401661c:	40c001cc 	andi	r3,r8,7
 4016620:	18000726 	beq	r3,zero,4016640 <__divdf3+0x5c0>
 4016624:	40c003cc 	andi	r3,r8,15
 4016628:	01000104 	movi	r4,4
 401662c:	19000426 	beq	r3,r4,4016640 <__divdf3+0x5c0>
 4016630:	4107883a 	add	r3,r8,r4
 4016634:	1a11803a 	cmpltu	r8,r3,r8
 4016638:	8a23883a 	add	r17,r17,r8
 401663c:	1811883a 	mov	r8,r3
 4016640:	88c0402c 	andhi	r3,r17,256
 4016644:	18000426 	beq	r3,zero,4016658 <__divdf3+0x5d8>
 4016648:	00ffc034 	movhi	r3,65280
 401664c:	18ffffc4 	addi	r3,r3,-1
 4016650:	a8810004 	addi	r2,r21,1024
 4016654:	88e2703a 	and	r17,r17,r3
 4016658:	00c1ff84 	movi	r3,2046
 401665c:	18bee316 	blt	r3,r2,40161ec <__alt_data_end+0xfc0161ec>
 4016660:	8824977a 	slli	r18,r17,29
 4016664:	4010d0fa 	srli	r8,r8,3
 4016668:	8822927a 	slli	r17,r17,9
 401666c:	1081ffcc 	andi	r2,r2,2047
 4016670:	9224b03a 	or	r18,r18,r8
 4016674:	880ad33a 	srli	r5,r17,12
 4016678:	98c0004c 	andi	r3,r19,1
 401667c:	003edf06 	br	40161fc <__alt_data_end+0xfc0161fc>
 4016680:	8080022c 	andhi	r2,r16,8
 4016684:	10001226 	beq	r2,zero,40166d0 <__divdf3+0x650>
 4016688:	8880022c 	andhi	r2,r17,8
 401668c:	1000101e 	bne	r2,zero,40166d0 <__divdf3+0x650>
 4016690:	00800434 	movhi	r2,16
 4016694:	89400234 	orhi	r5,r17,8
 4016698:	10bfffc4 	addi	r2,r2,-1
 401669c:	b007883a 	mov	r3,r22
 40166a0:	288a703a 	and	r5,r5,r2
 40166a4:	4025883a 	mov	r18,r8
 40166a8:	003f3106 	br	4016370 <__alt_data_end+0xfc016370>
 40166ac:	008000c4 	movi	r2,3
 40166b0:	3880a626 	beq	r7,r2,401694c <__divdf3+0x8cc>
 40166b4:	00800044 	movi	r2,1
 40166b8:	3880521e 	bne	r7,r2,4016804 <__divdf3+0x784>
 40166bc:	b807883a 	mov	r3,r23
 40166c0:	0005883a 	mov	r2,zero
 40166c4:	000b883a 	mov	r5,zero
 40166c8:	0025883a 	mov	r18,zero
 40166cc:	003ecb06 	br	40161fc <__alt_data_end+0xfc0161fc>
 40166d0:	00800434 	movhi	r2,16
 40166d4:	81400234 	orhi	r5,r16,8
 40166d8:	10bfffc4 	addi	r2,r2,-1
 40166dc:	a007883a 	mov	r3,r20
 40166e0:	288a703a 	and	r5,r5,r2
 40166e4:	003f2206 	br	4016370 <__alt_data_end+0xfc016370>
 40166e8:	183fca26 	beq	r3,zero,4016614 <__alt_data_end+0xfc016614>
 40166ec:	e5ef883a 	add	r23,fp,r23
 40166f0:	40bfffc4 	addi	r2,r8,-1
 40166f4:	bf00392e 	bgeu	r23,fp,40167dc <__divdf3+0x75c>
 40166f8:	1011883a 	mov	r8,r2
 40166fc:	ba7fc41e 	bne	r23,r9,4016610 <__alt_data_end+0xfc016610>
 4016700:	b0ffc31e 	bne	r22,r3,4016610 <__alt_data_end+0xfc016610>
 4016704:	003fc306 	br	4016614 <__alt_data_end+0xfc016614>
 4016708:	143ff604 	addi	r16,r2,-40
 401670c:	9c20983a 	sll	r16,r19,r16
 4016710:	0025883a 	mov	r18,zero
 4016714:	003ee206 	br	40162a0 <__alt_data_end+0xfc0162a0>
 4016718:	d9800315 	stw	r6,12(sp)
 401671c:	d9c00215 	stw	r7,8(sp)
 4016720:	4017dd80 	call	4017dd8 <__clzsi2>
 4016724:	10800804 	addi	r2,r2,32
 4016728:	d9c00217 	ldw	r7,8(sp)
 401672c:	d9800317 	ldw	r6,12(sp)
 4016730:	003ed106 	br	4016278 <__alt_data_end+0xfc016278>
 4016734:	147ff604 	addi	r17,r2,-40
 4016738:	3462983a 	sll	r17,r6,r17
 401673c:	0011883a 	mov	r8,zero
 4016740:	003ef506 	br	4016318 <__alt_data_end+0xfc016318>
 4016744:	3009883a 	mov	r4,r6
 4016748:	d9800315 	stw	r6,12(sp)
 401674c:	da400115 	stw	r9,4(sp)
 4016750:	4017dd80 	call	4017dd8 <__clzsi2>
 4016754:	10800804 	addi	r2,r2,32
 4016758:	da400117 	ldw	r9,4(sp)
 401675c:	d9800317 	ldw	r6,12(sp)
 4016760:	003ee306 	br	40162f0 <__alt_data_end+0xfc0162f0>
 4016764:	85a1883a 	add	r16,r16,r22
 4016768:	8585803a 	cmpltu	r2,r16,r22
 401676c:	1705883a 	add	r2,r2,fp
 4016770:	14a5883a 	add	r18,r2,r18
 4016774:	88bfffc4 	addi	r2,r17,-1
 4016778:	e4800c2e 	bgeu	fp,r18,40167ac <__divdf3+0x72c>
 401677c:	90c03e36 	bltu	r18,r3,4016878 <__divdf3+0x7f8>
 4016780:	1c806926 	beq	r3,r18,4016928 <__divdf3+0x8a8>
 4016784:	90c7c83a 	sub	r3,r18,r3
 4016788:	1023883a 	mov	r17,r2
 401678c:	003f5206 	br	40164d8 <__alt_data_end+0xfc0164d8>
 4016790:	923f0436 	bltu	r18,r8,40163a4 <__alt_data_end+0xfc0163a4>
 4016794:	800897fa 	slli	r4,r16,31
 4016798:	9004d07a 	srli	r2,r18,1
 401679c:	8006d07a 	srli	r3,r16,1
 40167a0:	902097fa 	slli	r16,r18,31
 40167a4:	20a4b03a 	or	r18,r4,r2
 40167a8:	003f0106 	br	40163b0 <__alt_data_end+0xfc0163b0>
 40167ac:	e4bff51e 	bne	fp,r18,4016784 <__alt_data_end+0xfc016784>
 40167b0:	85bff22e 	bgeu	r16,r22,401677c <__alt_data_end+0xfc01677c>
 40167b4:	e0c7c83a 	sub	r3,fp,r3
 40167b8:	1023883a 	mov	r17,r2
 40167bc:	003f4606 	br	40164d8 <__alt_data_end+0xfc0164d8>
 40167c0:	100f883a 	mov	r7,r2
 40167c4:	003f2b06 	br	4016474 <__alt_data_end+0xfc016474>
 40167c8:	180d883a 	mov	r6,r3
 40167cc:	003f1306 	br	401641c <__alt_data_end+0xfc01641c>
 40167d0:	813fe436 	bltu	r16,r4,4016764 <__alt_data_end+0xfc016764>
 40167d4:	0007883a 	mov	r3,zero
 40167d8:	003f3f06 	br	40164d8 <__alt_data_end+0xfc0164d8>
 40167dc:	ba402c36 	bltu	r23,r9,4016890 <__divdf3+0x810>
 40167e0:	4dc05426 	beq	r9,r23,4016934 <__divdf3+0x8b4>
 40167e4:	1011883a 	mov	r8,r2
 40167e8:	003f8906 	br	4016610 <__alt_data_end+0xfc016610>
 40167ec:	023fffc4 	movi	r8,-1
 40167f0:	003f8806 	br	4016614 <__alt_data_end+0xfc016614>
 40167f4:	1811883a 	mov	r8,r3
 40167f8:	003f5406 	br	401654c <__alt_data_end+0xfc01654c>
 40167fc:	1025883a 	mov	r18,r2
 4016800:	003f6d06 	br	40165b8 <__alt_data_end+0xfc0165b8>
 4016804:	b827883a 	mov	r19,r23
 4016808:	003f8206 	br	4016614 <__alt_data_end+0xfc016614>
 401680c:	010007c4 	movi	r4,31
 4016810:	20c02616 	blt	r4,r3,40168ac <__divdf3+0x82c>
 4016814:	00800804 	movi	r2,32
 4016818:	10c5c83a 	sub	r2,r2,r3
 401681c:	888a983a 	sll	r5,r17,r2
 4016820:	40c8d83a 	srl	r4,r8,r3
 4016824:	4084983a 	sll	r2,r8,r2
 4016828:	88e2d83a 	srl	r17,r17,r3
 401682c:	2906b03a 	or	r3,r5,r4
 4016830:	1004c03a 	cmpne	r2,r2,zero
 4016834:	1886b03a 	or	r3,r3,r2
 4016838:	188001cc 	andi	r2,r3,7
 401683c:	10000726 	beq	r2,zero,401685c <__divdf3+0x7dc>
 4016840:	188003cc 	andi	r2,r3,15
 4016844:	01000104 	movi	r4,4
 4016848:	11000426 	beq	r2,r4,401685c <__divdf3+0x7dc>
 401684c:	1805883a 	mov	r2,r3
 4016850:	10c00104 	addi	r3,r2,4
 4016854:	1885803a 	cmpltu	r2,r3,r2
 4016858:	88a3883a 	add	r17,r17,r2
 401685c:	8880202c 	andhi	r2,r17,128
 4016860:	10002726 	beq	r2,zero,4016900 <__divdf3+0x880>
 4016864:	98c0004c 	andi	r3,r19,1
 4016868:	00800044 	movi	r2,1
 401686c:	000b883a 	mov	r5,zero
 4016870:	0025883a 	mov	r18,zero
 4016874:	003e6106 	br	40161fc <__alt_data_end+0xfc0161fc>
 4016878:	85a1883a 	add	r16,r16,r22
 401687c:	8585803a 	cmpltu	r2,r16,r22
 4016880:	1705883a 	add	r2,r2,fp
 4016884:	14a5883a 	add	r18,r2,r18
 4016888:	8c7fff84 	addi	r17,r17,-2
 401688c:	003f1106 	br	40164d4 <__alt_data_end+0xfc0164d4>
 4016890:	b589883a 	add	r4,r22,r22
 4016894:	25ad803a 	cmpltu	r22,r4,r22
 4016898:	b739883a 	add	fp,r22,fp
 401689c:	40bfff84 	addi	r2,r8,-2
 40168a0:	bf2f883a 	add	r23,r23,fp
 40168a4:	202d883a 	mov	r22,r4
 40168a8:	003f9306 	br	40166f8 <__alt_data_end+0xfc0166f8>
 40168ac:	013ff844 	movi	r4,-31
 40168b0:	2085c83a 	sub	r2,r4,r2
 40168b4:	8888d83a 	srl	r4,r17,r2
 40168b8:	00800804 	movi	r2,32
 40168bc:	18802126 	beq	r3,r2,4016944 <__divdf3+0x8c4>
 40168c0:	00801004 	movi	r2,64
 40168c4:	10c5c83a 	sub	r2,r2,r3
 40168c8:	8884983a 	sll	r2,r17,r2
 40168cc:	1204b03a 	or	r2,r2,r8
 40168d0:	1004c03a 	cmpne	r2,r2,zero
 40168d4:	2084b03a 	or	r2,r4,r2
 40168d8:	144001cc 	andi	r17,r2,7
 40168dc:	88000d1e 	bne	r17,zero,4016914 <__divdf3+0x894>
 40168e0:	000b883a 	mov	r5,zero
 40168e4:	1024d0fa 	srli	r18,r2,3
 40168e8:	98c0004c 	andi	r3,r19,1
 40168ec:	0005883a 	mov	r2,zero
 40168f0:	9464b03a 	or	r18,r18,r17
 40168f4:	003e4106 	br	40161fc <__alt_data_end+0xfc0161fc>
 40168f8:	1007883a 	mov	r3,r2
 40168fc:	0023883a 	mov	r17,zero
 4016900:	880a927a 	slli	r5,r17,9
 4016904:	1805883a 	mov	r2,r3
 4016908:	8822977a 	slli	r17,r17,29
 401690c:	280ad33a 	srli	r5,r5,12
 4016910:	003ff406 	br	40168e4 <__alt_data_end+0xfc0168e4>
 4016914:	10c003cc 	andi	r3,r2,15
 4016918:	01000104 	movi	r4,4
 401691c:	193ff626 	beq	r3,r4,40168f8 <__alt_data_end+0xfc0168f8>
 4016920:	0023883a 	mov	r17,zero
 4016924:	003fca06 	br	4016850 <__alt_data_end+0xfc016850>
 4016928:	813fd336 	bltu	r16,r4,4016878 <__alt_data_end+0xfc016878>
 401692c:	1023883a 	mov	r17,r2
 4016930:	003fa806 	br	40167d4 <__alt_data_end+0xfc0167d4>
 4016934:	b0ffd636 	bltu	r22,r3,4016890 <__alt_data_end+0xfc016890>
 4016938:	1011883a 	mov	r8,r2
 401693c:	b0ff341e 	bne	r22,r3,4016610 <__alt_data_end+0xfc016610>
 4016940:	003f3406 	br	4016614 <__alt_data_end+0xfc016614>
 4016944:	0005883a 	mov	r2,zero
 4016948:	003fe006 	br	40168cc <__alt_data_end+0xfc0168cc>
 401694c:	00800434 	movhi	r2,16
 4016950:	89400234 	orhi	r5,r17,8
 4016954:	10bfffc4 	addi	r2,r2,-1
 4016958:	b807883a 	mov	r3,r23
 401695c:	288a703a 	and	r5,r5,r2
 4016960:	4025883a 	mov	r18,r8
 4016964:	003e8206 	br	4016370 <__alt_data_end+0xfc016370>

04016968 <__eqdf2>:
 4016968:	2804d53a 	srli	r2,r5,20
 401696c:	3806d53a 	srli	r3,r7,20
 4016970:	02000434 	movhi	r8,16
 4016974:	423fffc4 	addi	r8,r8,-1
 4016978:	1081ffcc 	andi	r2,r2,2047
 401697c:	0281ffc4 	movi	r10,2047
 4016980:	2a12703a 	and	r9,r5,r8
 4016984:	18c1ffcc 	andi	r3,r3,2047
 4016988:	3a10703a 	and	r8,r7,r8
 401698c:	280ad7fa 	srli	r5,r5,31
 4016990:	380ed7fa 	srli	r7,r7,31
 4016994:	12801026 	beq	r2,r10,40169d8 <__eqdf2+0x70>
 4016998:	0281ffc4 	movi	r10,2047
 401699c:	1a800a26 	beq	r3,r10,40169c8 <__eqdf2+0x60>
 40169a0:	10c00226 	beq	r2,r3,40169ac <__eqdf2+0x44>
 40169a4:	00800044 	movi	r2,1
 40169a8:	f800283a 	ret
 40169ac:	4a3ffd1e 	bne	r9,r8,40169a4 <__alt_data_end+0xfc0169a4>
 40169b0:	21bffc1e 	bne	r4,r6,40169a4 <__alt_data_end+0xfc0169a4>
 40169b4:	29c00c26 	beq	r5,r7,40169e8 <__eqdf2+0x80>
 40169b8:	103ffa1e 	bne	r2,zero,40169a4 <__alt_data_end+0xfc0169a4>
 40169bc:	2244b03a 	or	r2,r4,r9
 40169c0:	1004c03a 	cmpne	r2,r2,zero
 40169c4:	f800283a 	ret
 40169c8:	3214b03a 	or	r10,r6,r8
 40169cc:	503ff426 	beq	r10,zero,40169a0 <__alt_data_end+0xfc0169a0>
 40169d0:	00800044 	movi	r2,1
 40169d4:	f800283a 	ret
 40169d8:	2254b03a 	or	r10,r4,r9
 40169dc:	503fee26 	beq	r10,zero,4016998 <__alt_data_end+0xfc016998>
 40169e0:	00800044 	movi	r2,1
 40169e4:	f800283a 	ret
 40169e8:	0005883a 	mov	r2,zero
 40169ec:	f800283a 	ret

040169f0 <__gedf2>:
 40169f0:	2804d53a 	srli	r2,r5,20
 40169f4:	3806d53a 	srli	r3,r7,20
 40169f8:	02000434 	movhi	r8,16
 40169fc:	423fffc4 	addi	r8,r8,-1
 4016a00:	1081ffcc 	andi	r2,r2,2047
 4016a04:	0241ffc4 	movi	r9,2047
 4016a08:	2a14703a 	and	r10,r5,r8
 4016a0c:	18c1ffcc 	andi	r3,r3,2047
 4016a10:	3a10703a 	and	r8,r7,r8
 4016a14:	280ad7fa 	srli	r5,r5,31
 4016a18:	380ed7fa 	srli	r7,r7,31
 4016a1c:	12401d26 	beq	r2,r9,4016a94 <__gedf2+0xa4>
 4016a20:	0241ffc4 	movi	r9,2047
 4016a24:	1a401226 	beq	r3,r9,4016a70 <__gedf2+0x80>
 4016a28:	1000081e 	bne	r2,zero,4016a4c <__gedf2+0x5c>
 4016a2c:	2296b03a 	or	r11,r4,r10
 4016a30:	5813003a 	cmpeq	r9,r11,zero
 4016a34:	1800091e 	bne	r3,zero,4016a5c <__gedf2+0x6c>
 4016a38:	3218b03a 	or	r12,r6,r8
 4016a3c:	6000071e 	bne	r12,zero,4016a5c <__gedf2+0x6c>
 4016a40:	0005883a 	mov	r2,zero
 4016a44:	5800101e 	bne	r11,zero,4016a88 <__gedf2+0x98>
 4016a48:	f800283a 	ret
 4016a4c:	18000c1e 	bne	r3,zero,4016a80 <__gedf2+0x90>
 4016a50:	3212b03a 	or	r9,r6,r8
 4016a54:	48000c26 	beq	r9,zero,4016a88 <__gedf2+0x98>
 4016a58:	0013883a 	mov	r9,zero
 4016a5c:	39c03fcc 	andi	r7,r7,255
 4016a60:	48000826 	beq	r9,zero,4016a84 <__gedf2+0x94>
 4016a64:	38000926 	beq	r7,zero,4016a8c <__gedf2+0x9c>
 4016a68:	00800044 	movi	r2,1
 4016a6c:	f800283a 	ret
 4016a70:	3212b03a 	or	r9,r6,r8
 4016a74:	483fec26 	beq	r9,zero,4016a28 <__alt_data_end+0xfc016a28>
 4016a78:	00bfff84 	movi	r2,-2
 4016a7c:	f800283a 	ret
 4016a80:	39c03fcc 	andi	r7,r7,255
 4016a84:	29c00626 	beq	r5,r7,4016aa0 <__gedf2+0xb0>
 4016a88:	283ff726 	beq	r5,zero,4016a68 <__alt_data_end+0xfc016a68>
 4016a8c:	00bfffc4 	movi	r2,-1
 4016a90:	f800283a 	ret
 4016a94:	2292b03a 	or	r9,r4,r10
 4016a98:	483fe126 	beq	r9,zero,4016a20 <__alt_data_end+0xfc016a20>
 4016a9c:	003ff606 	br	4016a78 <__alt_data_end+0xfc016a78>
 4016aa0:	18bff916 	blt	r3,r2,4016a88 <__alt_data_end+0xfc016a88>
 4016aa4:	10c00316 	blt	r2,r3,4016ab4 <__gedf2+0xc4>
 4016aa8:	42bff736 	bltu	r8,r10,4016a88 <__alt_data_end+0xfc016a88>
 4016aac:	52000326 	beq	r10,r8,4016abc <__gedf2+0xcc>
 4016ab0:	5200042e 	bgeu	r10,r8,4016ac4 <__gedf2+0xd4>
 4016ab4:	283fec1e 	bne	r5,zero,4016a68 <__alt_data_end+0xfc016a68>
 4016ab8:	003ff406 	br	4016a8c <__alt_data_end+0xfc016a8c>
 4016abc:	313ff236 	bltu	r6,r4,4016a88 <__alt_data_end+0xfc016a88>
 4016ac0:	21bffc36 	bltu	r4,r6,4016ab4 <__alt_data_end+0xfc016ab4>
 4016ac4:	0005883a 	mov	r2,zero
 4016ac8:	f800283a 	ret

04016acc <__ledf2>:
 4016acc:	2804d53a 	srli	r2,r5,20
 4016ad0:	3810d53a 	srli	r8,r7,20
 4016ad4:	00c00434 	movhi	r3,16
 4016ad8:	18ffffc4 	addi	r3,r3,-1
 4016adc:	1081ffcc 	andi	r2,r2,2047
 4016ae0:	0241ffc4 	movi	r9,2047
 4016ae4:	28d4703a 	and	r10,r5,r3
 4016ae8:	4201ffcc 	andi	r8,r8,2047
 4016aec:	38c6703a 	and	r3,r7,r3
 4016af0:	280ad7fa 	srli	r5,r5,31
 4016af4:	380ed7fa 	srli	r7,r7,31
 4016af8:	12401f26 	beq	r2,r9,4016b78 <__ledf2+0xac>
 4016afc:	0241ffc4 	movi	r9,2047
 4016b00:	42401426 	beq	r8,r9,4016b54 <__ledf2+0x88>
 4016b04:	1000091e 	bne	r2,zero,4016b2c <__ledf2+0x60>
 4016b08:	2296b03a 	or	r11,r4,r10
 4016b0c:	5813003a 	cmpeq	r9,r11,zero
 4016b10:	29403fcc 	andi	r5,r5,255
 4016b14:	40000a1e 	bne	r8,zero,4016b40 <__ledf2+0x74>
 4016b18:	30d8b03a 	or	r12,r6,r3
 4016b1c:	6000081e 	bne	r12,zero,4016b40 <__ledf2+0x74>
 4016b20:	0005883a 	mov	r2,zero
 4016b24:	5800111e 	bne	r11,zero,4016b6c <__ledf2+0xa0>
 4016b28:	f800283a 	ret
 4016b2c:	29403fcc 	andi	r5,r5,255
 4016b30:	40000c1e 	bne	r8,zero,4016b64 <__ledf2+0x98>
 4016b34:	30d2b03a 	or	r9,r6,r3
 4016b38:	48000c26 	beq	r9,zero,4016b6c <__ledf2+0xa0>
 4016b3c:	0013883a 	mov	r9,zero
 4016b40:	39c03fcc 	andi	r7,r7,255
 4016b44:	48000826 	beq	r9,zero,4016b68 <__ledf2+0x9c>
 4016b48:	38001126 	beq	r7,zero,4016b90 <__ledf2+0xc4>
 4016b4c:	00800044 	movi	r2,1
 4016b50:	f800283a 	ret
 4016b54:	30d2b03a 	or	r9,r6,r3
 4016b58:	483fea26 	beq	r9,zero,4016b04 <__alt_data_end+0xfc016b04>
 4016b5c:	00800084 	movi	r2,2
 4016b60:	f800283a 	ret
 4016b64:	39c03fcc 	andi	r7,r7,255
 4016b68:	39400726 	beq	r7,r5,4016b88 <__ledf2+0xbc>
 4016b6c:	2800081e 	bne	r5,zero,4016b90 <__ledf2+0xc4>
 4016b70:	00800044 	movi	r2,1
 4016b74:	f800283a 	ret
 4016b78:	2292b03a 	or	r9,r4,r10
 4016b7c:	483fdf26 	beq	r9,zero,4016afc <__alt_data_end+0xfc016afc>
 4016b80:	00800084 	movi	r2,2
 4016b84:	f800283a 	ret
 4016b88:	4080030e 	bge	r8,r2,4016b98 <__ledf2+0xcc>
 4016b8c:	383fef26 	beq	r7,zero,4016b4c <__alt_data_end+0xfc016b4c>
 4016b90:	00bfffc4 	movi	r2,-1
 4016b94:	f800283a 	ret
 4016b98:	123feb16 	blt	r2,r8,4016b48 <__alt_data_end+0xfc016b48>
 4016b9c:	1abff336 	bltu	r3,r10,4016b6c <__alt_data_end+0xfc016b6c>
 4016ba0:	50c00326 	beq	r10,r3,4016bb0 <__ledf2+0xe4>
 4016ba4:	50c0042e 	bgeu	r10,r3,4016bb8 <__ledf2+0xec>
 4016ba8:	283fe81e 	bne	r5,zero,4016b4c <__alt_data_end+0xfc016b4c>
 4016bac:	003ff806 	br	4016b90 <__alt_data_end+0xfc016b90>
 4016bb0:	313fee36 	bltu	r6,r4,4016b6c <__alt_data_end+0xfc016b6c>
 4016bb4:	21bffc36 	bltu	r4,r6,4016ba8 <__alt_data_end+0xfc016ba8>
 4016bb8:	0005883a 	mov	r2,zero
 4016bbc:	f800283a 	ret

04016bc0 <__muldf3>:
 4016bc0:	defff304 	addi	sp,sp,-52
 4016bc4:	2804d53a 	srli	r2,r5,20
 4016bc8:	dd800915 	stw	r22,36(sp)
 4016bcc:	282cd7fa 	srli	r22,r5,31
 4016bd0:	dc000315 	stw	r16,12(sp)
 4016bd4:	04000434 	movhi	r16,16
 4016bd8:	dd400815 	stw	r21,32(sp)
 4016bdc:	dc800515 	stw	r18,20(sp)
 4016be0:	843fffc4 	addi	r16,r16,-1
 4016be4:	dfc00c15 	stw	ra,48(sp)
 4016be8:	df000b15 	stw	fp,44(sp)
 4016bec:	ddc00a15 	stw	r23,40(sp)
 4016bf0:	dd000715 	stw	r20,28(sp)
 4016bf4:	dcc00615 	stw	r19,24(sp)
 4016bf8:	dc400415 	stw	r17,16(sp)
 4016bfc:	1481ffcc 	andi	r18,r2,2047
 4016c00:	2c20703a 	and	r16,r5,r16
 4016c04:	b02b883a 	mov	r21,r22
 4016c08:	b2403fcc 	andi	r9,r22,255
 4016c0c:	90006026 	beq	r18,zero,4016d90 <__muldf3+0x1d0>
 4016c10:	0081ffc4 	movi	r2,2047
 4016c14:	2029883a 	mov	r20,r4
 4016c18:	90803626 	beq	r18,r2,4016cf4 <__muldf3+0x134>
 4016c1c:	80800434 	orhi	r2,r16,16
 4016c20:	100490fa 	slli	r2,r2,3
 4016c24:	2020d77a 	srli	r16,r4,29
 4016c28:	202890fa 	slli	r20,r4,3
 4016c2c:	94bf0044 	addi	r18,r18,-1023
 4016c30:	80a0b03a 	or	r16,r16,r2
 4016c34:	0027883a 	mov	r19,zero
 4016c38:	0039883a 	mov	fp,zero
 4016c3c:	3804d53a 	srli	r2,r7,20
 4016c40:	382ed7fa 	srli	r23,r7,31
 4016c44:	04400434 	movhi	r17,16
 4016c48:	8c7fffc4 	addi	r17,r17,-1
 4016c4c:	1081ffcc 	andi	r2,r2,2047
 4016c50:	3011883a 	mov	r8,r6
 4016c54:	3c62703a 	and	r17,r7,r17
 4016c58:	ba803fcc 	andi	r10,r23,255
 4016c5c:	10006d26 	beq	r2,zero,4016e14 <__muldf3+0x254>
 4016c60:	00c1ffc4 	movi	r3,2047
 4016c64:	10c06526 	beq	r2,r3,4016dfc <__muldf3+0x23c>
 4016c68:	88c00434 	orhi	r3,r17,16
 4016c6c:	180690fa 	slli	r3,r3,3
 4016c70:	3022d77a 	srli	r17,r6,29
 4016c74:	301090fa 	slli	r8,r6,3
 4016c78:	10bf0044 	addi	r2,r2,-1023
 4016c7c:	88e2b03a 	or	r17,r17,r3
 4016c80:	000b883a 	mov	r5,zero
 4016c84:	9085883a 	add	r2,r18,r2
 4016c88:	2cc8b03a 	or	r4,r5,r19
 4016c8c:	00c003c4 	movi	r3,15
 4016c90:	bdacf03a 	xor	r22,r23,r22
 4016c94:	12c00044 	addi	r11,r2,1
 4016c98:	19009936 	bltu	r3,r4,4016f00 <__muldf3+0x340>
 4016c9c:	200890ba 	slli	r4,r4,2
 4016ca0:	00c10074 	movhi	r3,1025
 4016ca4:	18db2d04 	addi	r3,r3,27828
 4016ca8:	20c9883a 	add	r4,r4,r3
 4016cac:	20c00017 	ldw	r3,0(r4)
 4016cb0:	1800683a 	jmp	r3
 4016cb4:	04016f00 	call	4016f0 <__reset-0x3bfe910>
 4016cb8:	04016d14 	movui	r16,1460
 4016cbc:	04016d14 	movui	r16,1460
 4016cc0:	04016d10 	cmplti	r16,zero,1460
 4016cc4:	04016edc 	xori	r16,zero,1467
 4016cc8:	04016edc 	xori	r16,zero,1467
 4016ccc:	04016ec4 	movi	r16,1467
 4016cd0:	04016d10 	cmplti	r16,zero,1460
 4016cd4:	04016edc 	xori	r16,zero,1467
 4016cd8:	04016ec4 	movi	r16,1467
 4016cdc:	04016edc 	xori	r16,zero,1467
 4016ce0:	04016d10 	cmplti	r16,zero,1460
 4016ce4:	04016eec 	andhi	r16,zero,1467
 4016ce8:	04016eec 	andhi	r16,zero,1467
 4016cec:	04016eec 	andhi	r16,zero,1467
 4016cf0:	04017108 	cmpgei	r16,zero,1476
 4016cf4:	2404b03a 	or	r2,r4,r16
 4016cf8:	10006f1e 	bne	r2,zero,4016eb8 <__muldf3+0x2f8>
 4016cfc:	04c00204 	movi	r19,8
 4016d00:	0021883a 	mov	r16,zero
 4016d04:	0029883a 	mov	r20,zero
 4016d08:	07000084 	movi	fp,2
 4016d0c:	003fcb06 	br	4016c3c <__alt_data_end+0xfc016c3c>
 4016d10:	502d883a 	mov	r22,r10
 4016d14:	00800084 	movi	r2,2
 4016d18:	28805726 	beq	r5,r2,4016e78 <__muldf3+0x2b8>
 4016d1c:	008000c4 	movi	r2,3
 4016d20:	28816626 	beq	r5,r2,40172bc <__muldf3+0x6fc>
 4016d24:	00800044 	movi	r2,1
 4016d28:	2881411e 	bne	r5,r2,4017230 <__muldf3+0x670>
 4016d2c:	b02b883a 	mov	r21,r22
 4016d30:	0005883a 	mov	r2,zero
 4016d34:	000b883a 	mov	r5,zero
 4016d38:	0029883a 	mov	r20,zero
 4016d3c:	1004953a 	slli	r2,r2,20
 4016d40:	a8c03fcc 	andi	r3,r21,255
 4016d44:	04400434 	movhi	r17,16
 4016d48:	8c7fffc4 	addi	r17,r17,-1
 4016d4c:	180697fa 	slli	r3,r3,31
 4016d50:	2c4a703a 	and	r5,r5,r17
 4016d54:	288ab03a 	or	r5,r5,r2
 4016d58:	28c6b03a 	or	r3,r5,r3
 4016d5c:	a005883a 	mov	r2,r20
 4016d60:	dfc00c17 	ldw	ra,48(sp)
 4016d64:	df000b17 	ldw	fp,44(sp)
 4016d68:	ddc00a17 	ldw	r23,40(sp)
 4016d6c:	dd800917 	ldw	r22,36(sp)
 4016d70:	dd400817 	ldw	r21,32(sp)
 4016d74:	dd000717 	ldw	r20,28(sp)
 4016d78:	dcc00617 	ldw	r19,24(sp)
 4016d7c:	dc800517 	ldw	r18,20(sp)
 4016d80:	dc400417 	ldw	r17,16(sp)
 4016d84:	dc000317 	ldw	r16,12(sp)
 4016d88:	dec00d04 	addi	sp,sp,52
 4016d8c:	f800283a 	ret
 4016d90:	2404b03a 	or	r2,r4,r16
 4016d94:	2027883a 	mov	r19,r4
 4016d98:	10004226 	beq	r2,zero,4016ea4 <__muldf3+0x2e4>
 4016d9c:	8000fc26 	beq	r16,zero,4017190 <__muldf3+0x5d0>
 4016da0:	8009883a 	mov	r4,r16
 4016da4:	d9800215 	stw	r6,8(sp)
 4016da8:	d9c00015 	stw	r7,0(sp)
 4016dac:	da400115 	stw	r9,4(sp)
 4016db0:	4017dd80 	call	4017dd8 <__clzsi2>
 4016db4:	d9800217 	ldw	r6,8(sp)
 4016db8:	d9c00017 	ldw	r7,0(sp)
 4016dbc:	da400117 	ldw	r9,4(sp)
 4016dc0:	113ffd44 	addi	r4,r2,-11
 4016dc4:	00c00704 	movi	r3,28
 4016dc8:	1900ed16 	blt	r3,r4,4017180 <__muldf3+0x5c0>
 4016dcc:	00c00744 	movi	r3,29
 4016dd0:	147ffe04 	addi	r17,r2,-8
 4016dd4:	1907c83a 	sub	r3,r3,r4
 4016dd8:	8460983a 	sll	r16,r16,r17
 4016ddc:	98c6d83a 	srl	r3,r19,r3
 4016de0:	9c68983a 	sll	r20,r19,r17
 4016de4:	1c20b03a 	or	r16,r3,r16
 4016de8:	1080fcc4 	addi	r2,r2,1011
 4016dec:	00a5c83a 	sub	r18,zero,r2
 4016df0:	0027883a 	mov	r19,zero
 4016df4:	0039883a 	mov	fp,zero
 4016df8:	003f9006 	br	4016c3c <__alt_data_end+0xfc016c3c>
 4016dfc:	3446b03a 	or	r3,r6,r17
 4016e00:	1800261e 	bne	r3,zero,4016e9c <__muldf3+0x2dc>
 4016e04:	0023883a 	mov	r17,zero
 4016e08:	0011883a 	mov	r8,zero
 4016e0c:	01400084 	movi	r5,2
 4016e10:	003f9c06 	br	4016c84 <__alt_data_end+0xfc016c84>
 4016e14:	3446b03a 	or	r3,r6,r17
 4016e18:	18001c26 	beq	r3,zero,4016e8c <__muldf3+0x2cc>
 4016e1c:	8800ce26 	beq	r17,zero,4017158 <__muldf3+0x598>
 4016e20:	8809883a 	mov	r4,r17
 4016e24:	d9800215 	stw	r6,8(sp)
 4016e28:	da400115 	stw	r9,4(sp)
 4016e2c:	da800015 	stw	r10,0(sp)
 4016e30:	4017dd80 	call	4017dd8 <__clzsi2>
 4016e34:	d9800217 	ldw	r6,8(sp)
 4016e38:	da400117 	ldw	r9,4(sp)
 4016e3c:	da800017 	ldw	r10,0(sp)
 4016e40:	113ffd44 	addi	r4,r2,-11
 4016e44:	00c00704 	movi	r3,28
 4016e48:	1900bf16 	blt	r3,r4,4017148 <__muldf3+0x588>
 4016e4c:	00c00744 	movi	r3,29
 4016e50:	123ffe04 	addi	r8,r2,-8
 4016e54:	1907c83a 	sub	r3,r3,r4
 4016e58:	8a22983a 	sll	r17,r17,r8
 4016e5c:	30c6d83a 	srl	r3,r6,r3
 4016e60:	3210983a 	sll	r8,r6,r8
 4016e64:	1c62b03a 	or	r17,r3,r17
 4016e68:	1080fcc4 	addi	r2,r2,1011
 4016e6c:	0085c83a 	sub	r2,zero,r2
 4016e70:	000b883a 	mov	r5,zero
 4016e74:	003f8306 	br	4016c84 <__alt_data_end+0xfc016c84>
 4016e78:	b02b883a 	mov	r21,r22
 4016e7c:	0081ffc4 	movi	r2,2047
 4016e80:	000b883a 	mov	r5,zero
 4016e84:	0029883a 	mov	r20,zero
 4016e88:	003fac06 	br	4016d3c <__alt_data_end+0xfc016d3c>
 4016e8c:	0023883a 	mov	r17,zero
 4016e90:	0011883a 	mov	r8,zero
 4016e94:	01400044 	movi	r5,1
 4016e98:	003f7a06 	br	4016c84 <__alt_data_end+0xfc016c84>
 4016e9c:	014000c4 	movi	r5,3
 4016ea0:	003f7806 	br	4016c84 <__alt_data_end+0xfc016c84>
 4016ea4:	04c00104 	movi	r19,4
 4016ea8:	0021883a 	mov	r16,zero
 4016eac:	0029883a 	mov	r20,zero
 4016eb0:	07000044 	movi	fp,1
 4016eb4:	003f6106 	br	4016c3c <__alt_data_end+0xfc016c3c>
 4016eb8:	04c00304 	movi	r19,12
 4016ebc:	070000c4 	movi	fp,3
 4016ec0:	003f5e06 	br	4016c3c <__alt_data_end+0xfc016c3c>
 4016ec4:	01400434 	movhi	r5,16
 4016ec8:	002b883a 	mov	r21,zero
 4016ecc:	297fffc4 	addi	r5,r5,-1
 4016ed0:	053fffc4 	movi	r20,-1
 4016ed4:	0081ffc4 	movi	r2,2047
 4016ed8:	003f9806 	br	4016d3c <__alt_data_end+0xfc016d3c>
 4016edc:	8023883a 	mov	r17,r16
 4016ee0:	a011883a 	mov	r8,r20
 4016ee4:	e00b883a 	mov	r5,fp
 4016ee8:	003f8a06 	br	4016d14 <__alt_data_end+0xfc016d14>
 4016eec:	8023883a 	mov	r17,r16
 4016ef0:	a011883a 	mov	r8,r20
 4016ef4:	482d883a 	mov	r22,r9
 4016ef8:	e00b883a 	mov	r5,fp
 4016efc:	003f8506 	br	4016d14 <__alt_data_end+0xfc016d14>
 4016f00:	a00ad43a 	srli	r5,r20,16
 4016f04:	401ad43a 	srli	r13,r8,16
 4016f08:	a53fffcc 	andi	r20,r20,65535
 4016f0c:	423fffcc 	andi	r8,r8,65535
 4016f10:	4519383a 	mul	r12,r8,r20
 4016f14:	4147383a 	mul	r3,r8,r5
 4016f18:	6d09383a 	mul	r4,r13,r20
 4016f1c:	600cd43a 	srli	r6,r12,16
 4016f20:	2b5d383a 	mul	r14,r5,r13
 4016f24:	20c9883a 	add	r4,r4,r3
 4016f28:	310d883a 	add	r6,r6,r4
 4016f2c:	30c0022e 	bgeu	r6,r3,4016f38 <__muldf3+0x378>
 4016f30:	00c00074 	movhi	r3,1
 4016f34:	70dd883a 	add	r14,r14,r3
 4016f38:	8826d43a 	srli	r19,r17,16
 4016f3c:	8bffffcc 	andi	r15,r17,65535
 4016f40:	7d23383a 	mul	r17,r15,r20
 4016f44:	7949383a 	mul	r4,r15,r5
 4016f48:	9d29383a 	mul	r20,r19,r20
 4016f4c:	8814d43a 	srli	r10,r17,16
 4016f50:	3012943a 	slli	r9,r6,16
 4016f54:	a129883a 	add	r20,r20,r4
 4016f58:	633fffcc 	andi	r12,r12,65535
 4016f5c:	5515883a 	add	r10,r10,r20
 4016f60:	3006d43a 	srli	r3,r6,16
 4016f64:	4b13883a 	add	r9,r9,r12
 4016f68:	2ccb383a 	mul	r5,r5,r19
 4016f6c:	5100022e 	bgeu	r10,r4,4016f78 <__muldf3+0x3b8>
 4016f70:	01000074 	movhi	r4,1
 4016f74:	290b883a 	add	r5,r5,r4
 4016f78:	802ad43a 	srli	r21,r16,16
 4016f7c:	843fffcc 	andi	r16,r16,65535
 4016f80:	440d383a 	mul	r6,r8,r16
 4016f84:	4565383a 	mul	r18,r8,r21
 4016f88:	8349383a 	mul	r4,r16,r13
 4016f8c:	500e943a 	slli	r7,r10,16
 4016f90:	3010d43a 	srli	r8,r6,16
 4016f94:	5028d43a 	srli	r20,r10,16
 4016f98:	2489883a 	add	r4,r4,r18
 4016f9c:	8abfffcc 	andi	r10,r17,65535
 4016fa0:	3a95883a 	add	r10,r7,r10
 4016fa4:	4119883a 	add	r12,r8,r4
 4016fa8:	a169883a 	add	r20,r20,r5
 4016fac:	1a87883a 	add	r3,r3,r10
 4016fb0:	6d5b383a 	mul	r13,r13,r21
 4016fb4:	6480022e 	bgeu	r12,r18,4016fc0 <__muldf3+0x400>
 4016fb8:	01000074 	movhi	r4,1
 4016fbc:	691b883a 	add	r13,r13,r4
 4016fc0:	7c25383a 	mul	r18,r15,r16
 4016fc4:	7d4b383a 	mul	r5,r15,r21
 4016fc8:	84cf383a 	mul	r7,r16,r19
 4016fcc:	901ed43a 	srli	r15,r18,16
 4016fd0:	6008d43a 	srli	r4,r12,16
 4016fd4:	6010943a 	slli	r8,r12,16
 4016fd8:	394f883a 	add	r7,r7,r5
 4016fdc:	333fffcc 	andi	r12,r6,65535
 4016fe0:	79df883a 	add	r15,r15,r7
 4016fe4:	235b883a 	add	r13,r4,r13
 4016fe8:	9d63383a 	mul	r17,r19,r21
 4016fec:	4309883a 	add	r4,r8,r12
 4016ff0:	7940022e 	bgeu	r15,r5,4016ffc <__muldf3+0x43c>
 4016ff4:	01400074 	movhi	r5,1
 4016ff8:	8963883a 	add	r17,r17,r5
 4016ffc:	780a943a 	slli	r5,r15,16
 4017000:	91bfffcc 	andi	r6,r18,65535
 4017004:	70c7883a 	add	r3,r14,r3
 4017008:	298d883a 	add	r6,r5,r6
 401700c:	1a8f803a 	cmpltu	r7,r3,r10
 4017010:	350b883a 	add	r5,r6,r20
 4017014:	20c7883a 	add	r3,r4,r3
 4017018:	3955883a 	add	r10,r7,r5
 401701c:	1909803a 	cmpltu	r4,r3,r4
 4017020:	6a91883a 	add	r8,r13,r10
 4017024:	780cd43a 	srli	r6,r15,16
 4017028:	2219883a 	add	r12,r4,r8
 401702c:	2d0b803a 	cmpltu	r5,r5,r20
 4017030:	51cf803a 	cmpltu	r7,r10,r7
 4017034:	29ceb03a 	or	r7,r5,r7
 4017038:	4351803a 	cmpltu	r8,r8,r13
 401703c:	610b803a 	cmpltu	r5,r12,r4
 4017040:	4148b03a 	or	r4,r8,r5
 4017044:	398f883a 	add	r7,r7,r6
 4017048:	3909883a 	add	r4,r7,r4
 401704c:	1810927a 	slli	r8,r3,9
 4017050:	2449883a 	add	r4,r4,r17
 4017054:	2008927a 	slli	r4,r4,9
 4017058:	6022d5fa 	srli	r17,r12,23
 401705c:	1806d5fa 	srli	r3,r3,23
 4017060:	4252b03a 	or	r9,r8,r9
 4017064:	600a927a 	slli	r5,r12,9
 4017068:	4810c03a 	cmpne	r8,r9,zero
 401706c:	2462b03a 	or	r17,r4,r17
 4017070:	40c6b03a 	or	r3,r8,r3
 4017074:	8900402c 	andhi	r4,r17,256
 4017078:	1950b03a 	or	r8,r3,r5
 401707c:	20000726 	beq	r4,zero,401709c <__muldf3+0x4dc>
 4017080:	4006d07a 	srli	r3,r8,1
 4017084:	880497fa 	slli	r2,r17,31
 4017088:	4200004c 	andi	r8,r8,1
 401708c:	8822d07a 	srli	r17,r17,1
 4017090:	1a10b03a 	or	r8,r3,r8
 4017094:	1210b03a 	or	r8,r2,r8
 4017098:	5805883a 	mov	r2,r11
 401709c:	1140ffc4 	addi	r5,r2,1023
 40170a0:	0140440e 	bge	zero,r5,40171b4 <__muldf3+0x5f4>
 40170a4:	40c001cc 	andi	r3,r8,7
 40170a8:	18000726 	beq	r3,zero,40170c8 <__muldf3+0x508>
 40170ac:	40c003cc 	andi	r3,r8,15
 40170b0:	01000104 	movi	r4,4
 40170b4:	19000426 	beq	r3,r4,40170c8 <__muldf3+0x508>
 40170b8:	4107883a 	add	r3,r8,r4
 40170bc:	1a11803a 	cmpltu	r8,r3,r8
 40170c0:	8a23883a 	add	r17,r17,r8
 40170c4:	1811883a 	mov	r8,r3
 40170c8:	88c0402c 	andhi	r3,r17,256
 40170cc:	18000426 	beq	r3,zero,40170e0 <__muldf3+0x520>
 40170d0:	11410004 	addi	r5,r2,1024
 40170d4:	00bfc034 	movhi	r2,65280
 40170d8:	10bfffc4 	addi	r2,r2,-1
 40170dc:	88a2703a 	and	r17,r17,r2
 40170e0:	0081ff84 	movi	r2,2046
 40170e4:	117f6416 	blt	r2,r5,4016e78 <__alt_data_end+0xfc016e78>
 40170e8:	8828977a 	slli	r20,r17,29
 40170ec:	4010d0fa 	srli	r8,r8,3
 40170f0:	8822927a 	slli	r17,r17,9
 40170f4:	2881ffcc 	andi	r2,r5,2047
 40170f8:	a228b03a 	or	r20,r20,r8
 40170fc:	880ad33a 	srli	r5,r17,12
 4017100:	b02b883a 	mov	r21,r22
 4017104:	003f0d06 	br	4016d3c <__alt_data_end+0xfc016d3c>
 4017108:	8080022c 	andhi	r2,r16,8
 401710c:	10000926 	beq	r2,zero,4017134 <__muldf3+0x574>
 4017110:	8880022c 	andhi	r2,r17,8
 4017114:	1000071e 	bne	r2,zero,4017134 <__muldf3+0x574>
 4017118:	00800434 	movhi	r2,16
 401711c:	89400234 	orhi	r5,r17,8
 4017120:	10bfffc4 	addi	r2,r2,-1
 4017124:	b82b883a 	mov	r21,r23
 4017128:	288a703a 	and	r5,r5,r2
 401712c:	4029883a 	mov	r20,r8
 4017130:	003f6806 	br	4016ed4 <__alt_data_end+0xfc016ed4>
 4017134:	00800434 	movhi	r2,16
 4017138:	81400234 	orhi	r5,r16,8
 401713c:	10bfffc4 	addi	r2,r2,-1
 4017140:	288a703a 	and	r5,r5,r2
 4017144:	003f6306 	br	4016ed4 <__alt_data_end+0xfc016ed4>
 4017148:	147ff604 	addi	r17,r2,-40
 401714c:	3462983a 	sll	r17,r6,r17
 4017150:	0011883a 	mov	r8,zero
 4017154:	003f4406 	br	4016e68 <__alt_data_end+0xfc016e68>
 4017158:	3009883a 	mov	r4,r6
 401715c:	d9800215 	stw	r6,8(sp)
 4017160:	da400115 	stw	r9,4(sp)
 4017164:	da800015 	stw	r10,0(sp)
 4017168:	4017dd80 	call	4017dd8 <__clzsi2>
 401716c:	10800804 	addi	r2,r2,32
 4017170:	da800017 	ldw	r10,0(sp)
 4017174:	da400117 	ldw	r9,4(sp)
 4017178:	d9800217 	ldw	r6,8(sp)
 401717c:	003f3006 	br	4016e40 <__alt_data_end+0xfc016e40>
 4017180:	143ff604 	addi	r16,r2,-40
 4017184:	9c20983a 	sll	r16,r19,r16
 4017188:	0029883a 	mov	r20,zero
 401718c:	003f1606 	br	4016de8 <__alt_data_end+0xfc016de8>
 4017190:	d9800215 	stw	r6,8(sp)
 4017194:	d9c00015 	stw	r7,0(sp)
 4017198:	da400115 	stw	r9,4(sp)
 401719c:	4017dd80 	call	4017dd8 <__clzsi2>
 40171a0:	10800804 	addi	r2,r2,32
 40171a4:	da400117 	ldw	r9,4(sp)
 40171a8:	d9c00017 	ldw	r7,0(sp)
 40171ac:	d9800217 	ldw	r6,8(sp)
 40171b0:	003f0306 	br	4016dc0 <__alt_data_end+0xfc016dc0>
 40171b4:	00c00044 	movi	r3,1
 40171b8:	1947c83a 	sub	r3,r3,r5
 40171bc:	00800e04 	movi	r2,56
 40171c0:	10feda16 	blt	r2,r3,4016d2c <__alt_data_end+0xfc016d2c>
 40171c4:	008007c4 	movi	r2,31
 40171c8:	10c01b16 	blt	r2,r3,4017238 <__muldf3+0x678>
 40171cc:	00800804 	movi	r2,32
 40171d0:	10c5c83a 	sub	r2,r2,r3
 40171d4:	888a983a 	sll	r5,r17,r2
 40171d8:	40c8d83a 	srl	r4,r8,r3
 40171dc:	4084983a 	sll	r2,r8,r2
 40171e0:	88e2d83a 	srl	r17,r17,r3
 40171e4:	2906b03a 	or	r3,r5,r4
 40171e8:	1004c03a 	cmpne	r2,r2,zero
 40171ec:	1886b03a 	or	r3,r3,r2
 40171f0:	188001cc 	andi	r2,r3,7
 40171f4:	10000726 	beq	r2,zero,4017214 <__muldf3+0x654>
 40171f8:	188003cc 	andi	r2,r3,15
 40171fc:	01000104 	movi	r4,4
 4017200:	11000426 	beq	r2,r4,4017214 <__muldf3+0x654>
 4017204:	1805883a 	mov	r2,r3
 4017208:	10c00104 	addi	r3,r2,4
 401720c:	1885803a 	cmpltu	r2,r3,r2
 4017210:	88a3883a 	add	r17,r17,r2
 4017214:	8880202c 	andhi	r2,r17,128
 4017218:	10001c26 	beq	r2,zero,401728c <__muldf3+0x6cc>
 401721c:	b02b883a 	mov	r21,r22
 4017220:	00800044 	movi	r2,1
 4017224:	000b883a 	mov	r5,zero
 4017228:	0029883a 	mov	r20,zero
 401722c:	003ec306 	br	4016d3c <__alt_data_end+0xfc016d3c>
 4017230:	5805883a 	mov	r2,r11
 4017234:	003f9906 	br	401709c <__alt_data_end+0xfc01709c>
 4017238:	00bff844 	movi	r2,-31
 401723c:	1145c83a 	sub	r2,r2,r5
 4017240:	8888d83a 	srl	r4,r17,r2
 4017244:	00800804 	movi	r2,32
 4017248:	18801a26 	beq	r3,r2,40172b4 <__muldf3+0x6f4>
 401724c:	00801004 	movi	r2,64
 4017250:	10c5c83a 	sub	r2,r2,r3
 4017254:	8884983a 	sll	r2,r17,r2
 4017258:	1204b03a 	or	r2,r2,r8
 401725c:	1004c03a 	cmpne	r2,r2,zero
 4017260:	2084b03a 	or	r2,r4,r2
 4017264:	144001cc 	andi	r17,r2,7
 4017268:	88000d1e 	bne	r17,zero,40172a0 <__muldf3+0x6e0>
 401726c:	000b883a 	mov	r5,zero
 4017270:	1028d0fa 	srli	r20,r2,3
 4017274:	b02b883a 	mov	r21,r22
 4017278:	0005883a 	mov	r2,zero
 401727c:	a468b03a 	or	r20,r20,r17
 4017280:	003eae06 	br	4016d3c <__alt_data_end+0xfc016d3c>
 4017284:	1007883a 	mov	r3,r2
 4017288:	0023883a 	mov	r17,zero
 401728c:	880a927a 	slli	r5,r17,9
 4017290:	1805883a 	mov	r2,r3
 4017294:	8822977a 	slli	r17,r17,29
 4017298:	280ad33a 	srli	r5,r5,12
 401729c:	003ff406 	br	4017270 <__alt_data_end+0xfc017270>
 40172a0:	10c003cc 	andi	r3,r2,15
 40172a4:	01000104 	movi	r4,4
 40172a8:	193ff626 	beq	r3,r4,4017284 <__alt_data_end+0xfc017284>
 40172ac:	0023883a 	mov	r17,zero
 40172b0:	003fd506 	br	4017208 <__alt_data_end+0xfc017208>
 40172b4:	0005883a 	mov	r2,zero
 40172b8:	003fe706 	br	4017258 <__alt_data_end+0xfc017258>
 40172bc:	00800434 	movhi	r2,16
 40172c0:	89400234 	orhi	r5,r17,8
 40172c4:	10bfffc4 	addi	r2,r2,-1
 40172c8:	b02b883a 	mov	r21,r22
 40172cc:	288a703a 	and	r5,r5,r2
 40172d0:	4029883a 	mov	r20,r8
 40172d4:	003eff06 	br	4016ed4 <__alt_data_end+0xfc016ed4>

040172d8 <__subdf3>:
 40172d8:	02000434 	movhi	r8,16
 40172dc:	423fffc4 	addi	r8,r8,-1
 40172e0:	defffb04 	addi	sp,sp,-20
 40172e4:	2a14703a 	and	r10,r5,r8
 40172e8:	3812d53a 	srli	r9,r7,20
 40172ec:	3a10703a 	and	r8,r7,r8
 40172f0:	2006d77a 	srli	r3,r4,29
 40172f4:	3004d77a 	srli	r2,r6,29
 40172f8:	dc000015 	stw	r16,0(sp)
 40172fc:	501490fa 	slli	r10,r10,3
 4017300:	2820d53a 	srli	r16,r5,20
 4017304:	401090fa 	slli	r8,r8,3
 4017308:	dc800215 	stw	r18,8(sp)
 401730c:	dc400115 	stw	r17,4(sp)
 4017310:	dfc00415 	stw	ra,16(sp)
 4017314:	202290fa 	slli	r17,r4,3
 4017318:	dcc00315 	stw	r19,12(sp)
 401731c:	4a41ffcc 	andi	r9,r9,2047
 4017320:	0101ffc4 	movi	r4,2047
 4017324:	2824d7fa 	srli	r18,r5,31
 4017328:	8401ffcc 	andi	r16,r16,2047
 401732c:	50c6b03a 	or	r3,r10,r3
 4017330:	380ed7fa 	srli	r7,r7,31
 4017334:	408ab03a 	or	r5,r8,r2
 4017338:	300c90fa 	slli	r6,r6,3
 401733c:	49009626 	beq	r9,r4,4017598 <__subdf3+0x2c0>
 4017340:	39c0005c 	xori	r7,r7,1
 4017344:	8245c83a 	sub	r2,r16,r9
 4017348:	3c807426 	beq	r7,r18,401751c <__subdf3+0x244>
 401734c:	0080af0e 	bge	zero,r2,401760c <__subdf3+0x334>
 4017350:	48002a1e 	bne	r9,zero,40173fc <__subdf3+0x124>
 4017354:	2988b03a 	or	r4,r5,r6
 4017358:	20009a1e 	bne	r4,zero,40175c4 <__subdf3+0x2ec>
 401735c:	888001cc 	andi	r2,r17,7
 4017360:	10000726 	beq	r2,zero,4017380 <__subdf3+0xa8>
 4017364:	888003cc 	andi	r2,r17,15
 4017368:	01000104 	movi	r4,4
 401736c:	11000426 	beq	r2,r4,4017380 <__subdf3+0xa8>
 4017370:	890b883a 	add	r5,r17,r4
 4017374:	2c63803a 	cmpltu	r17,r5,r17
 4017378:	1c47883a 	add	r3,r3,r17
 401737c:	2823883a 	mov	r17,r5
 4017380:	1880202c 	andhi	r2,r3,128
 4017384:	10005926 	beq	r2,zero,40174ec <__subdf3+0x214>
 4017388:	84000044 	addi	r16,r16,1
 401738c:	0081ffc4 	movi	r2,2047
 4017390:	8080be26 	beq	r16,r2,401768c <__subdf3+0x3b4>
 4017394:	017fe034 	movhi	r5,65408
 4017398:	297fffc4 	addi	r5,r5,-1
 401739c:	1946703a 	and	r3,r3,r5
 40173a0:	1804977a 	slli	r2,r3,29
 40173a4:	1806927a 	slli	r3,r3,9
 40173a8:	8822d0fa 	srli	r17,r17,3
 40173ac:	8401ffcc 	andi	r16,r16,2047
 40173b0:	180ad33a 	srli	r5,r3,12
 40173b4:	9100004c 	andi	r4,r18,1
 40173b8:	1444b03a 	or	r2,r2,r17
 40173bc:	80c1ffcc 	andi	r3,r16,2047
 40173c0:	1820953a 	slli	r16,r3,20
 40173c4:	20c03fcc 	andi	r3,r4,255
 40173c8:	180897fa 	slli	r4,r3,31
 40173cc:	00c00434 	movhi	r3,16
 40173d0:	18ffffc4 	addi	r3,r3,-1
 40173d4:	28c6703a 	and	r3,r5,r3
 40173d8:	1c06b03a 	or	r3,r3,r16
 40173dc:	1906b03a 	or	r3,r3,r4
 40173e0:	dfc00417 	ldw	ra,16(sp)
 40173e4:	dcc00317 	ldw	r19,12(sp)
 40173e8:	dc800217 	ldw	r18,8(sp)
 40173ec:	dc400117 	ldw	r17,4(sp)
 40173f0:	dc000017 	ldw	r16,0(sp)
 40173f4:	dec00504 	addi	sp,sp,20
 40173f8:	f800283a 	ret
 40173fc:	0101ffc4 	movi	r4,2047
 4017400:	813fd626 	beq	r16,r4,401735c <__alt_data_end+0xfc01735c>
 4017404:	29402034 	orhi	r5,r5,128
 4017408:	01000e04 	movi	r4,56
 401740c:	2080a316 	blt	r4,r2,401769c <__subdf3+0x3c4>
 4017410:	010007c4 	movi	r4,31
 4017414:	2080c616 	blt	r4,r2,4017730 <__subdf3+0x458>
 4017418:	01000804 	movi	r4,32
 401741c:	2089c83a 	sub	r4,r4,r2
 4017420:	2910983a 	sll	r8,r5,r4
 4017424:	308ed83a 	srl	r7,r6,r2
 4017428:	3108983a 	sll	r4,r6,r4
 401742c:	2884d83a 	srl	r2,r5,r2
 4017430:	41ccb03a 	or	r6,r8,r7
 4017434:	2008c03a 	cmpne	r4,r4,zero
 4017438:	310cb03a 	or	r6,r6,r4
 401743c:	898dc83a 	sub	r6,r17,r6
 4017440:	89a3803a 	cmpltu	r17,r17,r6
 4017444:	1887c83a 	sub	r3,r3,r2
 4017448:	1c47c83a 	sub	r3,r3,r17
 401744c:	3023883a 	mov	r17,r6
 4017450:	1880202c 	andhi	r2,r3,128
 4017454:	10002326 	beq	r2,zero,40174e4 <__subdf3+0x20c>
 4017458:	04c02034 	movhi	r19,128
 401745c:	9cffffc4 	addi	r19,r19,-1
 4017460:	1ce6703a 	and	r19,r3,r19
 4017464:	98007a26 	beq	r19,zero,4017650 <__subdf3+0x378>
 4017468:	9809883a 	mov	r4,r19
 401746c:	4017dd80 	call	4017dd8 <__clzsi2>
 4017470:	113ffe04 	addi	r4,r2,-8
 4017474:	00c007c4 	movi	r3,31
 4017478:	19007b16 	blt	r3,r4,4017668 <__subdf3+0x390>
 401747c:	00800804 	movi	r2,32
 4017480:	1105c83a 	sub	r2,r2,r4
 4017484:	8884d83a 	srl	r2,r17,r2
 4017488:	9906983a 	sll	r3,r19,r4
 401748c:	8922983a 	sll	r17,r17,r4
 4017490:	10c4b03a 	or	r2,r2,r3
 4017494:	24007816 	blt	r4,r16,4017678 <__subdf3+0x3a0>
 4017498:	2421c83a 	sub	r16,r4,r16
 401749c:	80c00044 	addi	r3,r16,1
 40174a0:	010007c4 	movi	r4,31
 40174a4:	20c09516 	blt	r4,r3,40176fc <__subdf3+0x424>
 40174a8:	01400804 	movi	r5,32
 40174ac:	28cbc83a 	sub	r5,r5,r3
 40174b0:	88c8d83a 	srl	r4,r17,r3
 40174b4:	8962983a 	sll	r17,r17,r5
 40174b8:	114a983a 	sll	r5,r2,r5
 40174bc:	10c6d83a 	srl	r3,r2,r3
 40174c0:	8804c03a 	cmpne	r2,r17,zero
 40174c4:	290ab03a 	or	r5,r5,r4
 40174c8:	28a2b03a 	or	r17,r5,r2
 40174cc:	0021883a 	mov	r16,zero
 40174d0:	003fa206 	br	401735c <__alt_data_end+0xfc01735c>
 40174d4:	2090b03a 	or	r8,r4,r2
 40174d8:	40018e26 	beq	r8,zero,4017b14 <__subdf3+0x83c>
 40174dc:	1007883a 	mov	r3,r2
 40174e0:	2023883a 	mov	r17,r4
 40174e4:	888001cc 	andi	r2,r17,7
 40174e8:	103f9e1e 	bne	r2,zero,4017364 <__alt_data_end+0xfc017364>
 40174ec:	1804977a 	slli	r2,r3,29
 40174f0:	8822d0fa 	srli	r17,r17,3
 40174f4:	1810d0fa 	srli	r8,r3,3
 40174f8:	9100004c 	andi	r4,r18,1
 40174fc:	1444b03a 	or	r2,r2,r17
 4017500:	00c1ffc4 	movi	r3,2047
 4017504:	80c02826 	beq	r16,r3,40175a8 <__subdf3+0x2d0>
 4017508:	01400434 	movhi	r5,16
 401750c:	297fffc4 	addi	r5,r5,-1
 4017510:	80e0703a 	and	r16,r16,r3
 4017514:	414a703a 	and	r5,r8,r5
 4017518:	003fa806 	br	40173bc <__alt_data_end+0xfc0173bc>
 401751c:	0080630e 	bge	zero,r2,40176ac <__subdf3+0x3d4>
 4017520:	48003026 	beq	r9,zero,40175e4 <__subdf3+0x30c>
 4017524:	0101ffc4 	movi	r4,2047
 4017528:	813f8c26 	beq	r16,r4,401735c <__alt_data_end+0xfc01735c>
 401752c:	29402034 	orhi	r5,r5,128
 4017530:	01000e04 	movi	r4,56
 4017534:	2080a90e 	bge	r4,r2,40177dc <__subdf3+0x504>
 4017538:	298cb03a 	or	r6,r5,r6
 401753c:	3012c03a 	cmpne	r9,r6,zero
 4017540:	0005883a 	mov	r2,zero
 4017544:	4c53883a 	add	r9,r9,r17
 4017548:	4c63803a 	cmpltu	r17,r9,r17
 401754c:	10c7883a 	add	r3,r2,r3
 4017550:	88c7883a 	add	r3,r17,r3
 4017554:	4823883a 	mov	r17,r9
 4017558:	1880202c 	andhi	r2,r3,128
 401755c:	1000d026 	beq	r2,zero,40178a0 <__subdf3+0x5c8>
 4017560:	84000044 	addi	r16,r16,1
 4017564:	0081ffc4 	movi	r2,2047
 4017568:	8080fe26 	beq	r16,r2,4017964 <__subdf3+0x68c>
 401756c:	00bfe034 	movhi	r2,65408
 4017570:	10bfffc4 	addi	r2,r2,-1
 4017574:	1886703a 	and	r3,r3,r2
 4017578:	880ad07a 	srli	r5,r17,1
 401757c:	180497fa 	slli	r2,r3,31
 4017580:	8900004c 	andi	r4,r17,1
 4017584:	2922b03a 	or	r17,r5,r4
 4017588:	1806d07a 	srli	r3,r3,1
 401758c:	1462b03a 	or	r17,r2,r17
 4017590:	3825883a 	mov	r18,r7
 4017594:	003f7106 	br	401735c <__alt_data_end+0xfc01735c>
 4017598:	2984b03a 	or	r2,r5,r6
 401759c:	103f6826 	beq	r2,zero,4017340 <__alt_data_end+0xfc017340>
 40175a0:	39c03fcc 	andi	r7,r7,255
 40175a4:	003f6706 	br	4017344 <__alt_data_end+0xfc017344>
 40175a8:	4086b03a 	or	r3,r8,r2
 40175ac:	18015226 	beq	r3,zero,4017af8 <__subdf3+0x820>
 40175b0:	00c00434 	movhi	r3,16
 40175b4:	41400234 	orhi	r5,r8,8
 40175b8:	18ffffc4 	addi	r3,r3,-1
 40175bc:	28ca703a 	and	r5,r5,r3
 40175c0:	003f7e06 	br	40173bc <__alt_data_end+0xfc0173bc>
 40175c4:	10bfffc4 	addi	r2,r2,-1
 40175c8:	1000491e 	bne	r2,zero,40176f0 <__subdf3+0x418>
 40175cc:	898fc83a 	sub	r7,r17,r6
 40175d0:	89e3803a 	cmpltu	r17,r17,r7
 40175d4:	1947c83a 	sub	r3,r3,r5
 40175d8:	1c47c83a 	sub	r3,r3,r17
 40175dc:	3823883a 	mov	r17,r7
 40175e0:	003f9b06 	br	4017450 <__alt_data_end+0xfc017450>
 40175e4:	2988b03a 	or	r4,r5,r6
 40175e8:	203f5c26 	beq	r4,zero,401735c <__alt_data_end+0xfc01735c>
 40175ec:	10bfffc4 	addi	r2,r2,-1
 40175f0:	1000931e 	bne	r2,zero,4017840 <__subdf3+0x568>
 40175f4:	898d883a 	add	r6,r17,r6
 40175f8:	3463803a 	cmpltu	r17,r6,r17
 40175fc:	1947883a 	add	r3,r3,r5
 4017600:	88c7883a 	add	r3,r17,r3
 4017604:	3023883a 	mov	r17,r6
 4017608:	003fd306 	br	4017558 <__alt_data_end+0xfc017558>
 401760c:	1000541e 	bne	r2,zero,4017760 <__subdf3+0x488>
 4017610:	80800044 	addi	r2,r16,1
 4017614:	1081ffcc 	andi	r2,r2,2047
 4017618:	01000044 	movi	r4,1
 401761c:	2080a20e 	bge	r4,r2,40178a8 <__subdf3+0x5d0>
 4017620:	8989c83a 	sub	r4,r17,r6
 4017624:	8905803a 	cmpltu	r2,r17,r4
 4017628:	1967c83a 	sub	r19,r3,r5
 401762c:	98a7c83a 	sub	r19,r19,r2
 4017630:	9880202c 	andhi	r2,r19,128
 4017634:	10006326 	beq	r2,zero,40177c4 <__subdf3+0x4ec>
 4017638:	3463c83a 	sub	r17,r6,r17
 401763c:	28c7c83a 	sub	r3,r5,r3
 4017640:	344d803a 	cmpltu	r6,r6,r17
 4017644:	19a7c83a 	sub	r19,r3,r6
 4017648:	3825883a 	mov	r18,r7
 401764c:	983f861e 	bne	r19,zero,4017468 <__alt_data_end+0xfc017468>
 4017650:	8809883a 	mov	r4,r17
 4017654:	4017dd80 	call	4017dd8 <__clzsi2>
 4017658:	10800804 	addi	r2,r2,32
 401765c:	113ffe04 	addi	r4,r2,-8
 4017660:	00c007c4 	movi	r3,31
 4017664:	193f850e 	bge	r3,r4,401747c <__alt_data_end+0xfc01747c>
 4017668:	10bff604 	addi	r2,r2,-40
 401766c:	8884983a 	sll	r2,r17,r2
 4017670:	0023883a 	mov	r17,zero
 4017674:	243f880e 	bge	r4,r16,4017498 <__alt_data_end+0xfc017498>
 4017678:	00ffe034 	movhi	r3,65408
 401767c:	18ffffc4 	addi	r3,r3,-1
 4017680:	8121c83a 	sub	r16,r16,r4
 4017684:	10c6703a 	and	r3,r2,r3
 4017688:	003f3406 	br	401735c <__alt_data_end+0xfc01735c>
 401768c:	9100004c 	andi	r4,r18,1
 4017690:	000b883a 	mov	r5,zero
 4017694:	0005883a 	mov	r2,zero
 4017698:	003f4806 	br	40173bc <__alt_data_end+0xfc0173bc>
 401769c:	298cb03a 	or	r6,r5,r6
 40176a0:	300cc03a 	cmpne	r6,r6,zero
 40176a4:	0005883a 	mov	r2,zero
 40176a8:	003f6406 	br	401743c <__alt_data_end+0xfc01743c>
 40176ac:	10009a1e 	bne	r2,zero,4017918 <__subdf3+0x640>
 40176b0:	82400044 	addi	r9,r16,1
 40176b4:	4881ffcc 	andi	r2,r9,2047
 40176b8:	02800044 	movi	r10,1
 40176bc:	5080670e 	bge	r10,r2,401785c <__subdf3+0x584>
 40176c0:	0081ffc4 	movi	r2,2047
 40176c4:	4880af26 	beq	r9,r2,4017984 <__subdf3+0x6ac>
 40176c8:	898d883a 	add	r6,r17,r6
 40176cc:	1945883a 	add	r2,r3,r5
 40176d0:	3447803a 	cmpltu	r3,r6,r17
 40176d4:	1887883a 	add	r3,r3,r2
 40176d8:	182297fa 	slli	r17,r3,31
 40176dc:	300cd07a 	srli	r6,r6,1
 40176e0:	1806d07a 	srli	r3,r3,1
 40176e4:	4821883a 	mov	r16,r9
 40176e8:	89a2b03a 	or	r17,r17,r6
 40176ec:	003f1b06 	br	401735c <__alt_data_end+0xfc01735c>
 40176f0:	0101ffc4 	movi	r4,2047
 40176f4:	813f441e 	bne	r16,r4,4017408 <__alt_data_end+0xfc017408>
 40176f8:	003f1806 	br	401735c <__alt_data_end+0xfc01735c>
 40176fc:	843ff844 	addi	r16,r16,-31
 4017700:	01400804 	movi	r5,32
 4017704:	1408d83a 	srl	r4,r2,r16
 4017708:	19405026 	beq	r3,r5,401784c <__subdf3+0x574>
 401770c:	01401004 	movi	r5,64
 4017710:	28c7c83a 	sub	r3,r5,r3
 4017714:	10c4983a 	sll	r2,r2,r3
 4017718:	88a2b03a 	or	r17,r17,r2
 401771c:	8822c03a 	cmpne	r17,r17,zero
 4017720:	2462b03a 	or	r17,r4,r17
 4017724:	0007883a 	mov	r3,zero
 4017728:	0021883a 	mov	r16,zero
 401772c:	003f6d06 	br	40174e4 <__alt_data_end+0xfc0174e4>
 4017730:	11fff804 	addi	r7,r2,-32
 4017734:	01000804 	movi	r4,32
 4017738:	29ced83a 	srl	r7,r5,r7
 401773c:	11004526 	beq	r2,r4,4017854 <__subdf3+0x57c>
 4017740:	01001004 	movi	r4,64
 4017744:	2089c83a 	sub	r4,r4,r2
 4017748:	2904983a 	sll	r2,r5,r4
 401774c:	118cb03a 	or	r6,r2,r6
 4017750:	300cc03a 	cmpne	r6,r6,zero
 4017754:	398cb03a 	or	r6,r7,r6
 4017758:	0005883a 	mov	r2,zero
 401775c:	003f3706 	br	401743c <__alt_data_end+0xfc01743c>
 4017760:	80002a26 	beq	r16,zero,401780c <__subdf3+0x534>
 4017764:	0101ffc4 	movi	r4,2047
 4017768:	49006626 	beq	r9,r4,4017904 <__subdf3+0x62c>
 401776c:	0085c83a 	sub	r2,zero,r2
 4017770:	18c02034 	orhi	r3,r3,128
 4017774:	01000e04 	movi	r4,56
 4017778:	20807e16 	blt	r4,r2,4017974 <__subdf3+0x69c>
 401777c:	010007c4 	movi	r4,31
 4017780:	2080e716 	blt	r4,r2,4017b20 <__subdf3+0x848>
 4017784:	01000804 	movi	r4,32
 4017788:	2089c83a 	sub	r4,r4,r2
 401778c:	1914983a 	sll	r10,r3,r4
 4017790:	8890d83a 	srl	r8,r17,r2
 4017794:	8908983a 	sll	r4,r17,r4
 4017798:	1884d83a 	srl	r2,r3,r2
 401779c:	5222b03a 	or	r17,r10,r8
 40177a0:	2006c03a 	cmpne	r3,r4,zero
 40177a4:	88e2b03a 	or	r17,r17,r3
 40177a8:	3463c83a 	sub	r17,r6,r17
 40177ac:	2885c83a 	sub	r2,r5,r2
 40177b0:	344d803a 	cmpltu	r6,r6,r17
 40177b4:	1187c83a 	sub	r3,r2,r6
 40177b8:	4821883a 	mov	r16,r9
 40177bc:	3825883a 	mov	r18,r7
 40177c0:	003f2306 	br	4017450 <__alt_data_end+0xfc017450>
 40177c4:	24d0b03a 	or	r8,r4,r19
 40177c8:	40001b1e 	bne	r8,zero,4017838 <__subdf3+0x560>
 40177cc:	0005883a 	mov	r2,zero
 40177d0:	0009883a 	mov	r4,zero
 40177d4:	0021883a 	mov	r16,zero
 40177d8:	003f4906 	br	4017500 <__alt_data_end+0xfc017500>
 40177dc:	010007c4 	movi	r4,31
 40177e0:	20803a16 	blt	r4,r2,40178cc <__subdf3+0x5f4>
 40177e4:	01000804 	movi	r4,32
 40177e8:	2089c83a 	sub	r4,r4,r2
 40177ec:	2912983a 	sll	r9,r5,r4
 40177f0:	3090d83a 	srl	r8,r6,r2
 40177f4:	3108983a 	sll	r4,r6,r4
 40177f8:	2884d83a 	srl	r2,r5,r2
 40177fc:	4a12b03a 	or	r9,r9,r8
 4017800:	2008c03a 	cmpne	r4,r4,zero
 4017804:	4912b03a 	or	r9,r9,r4
 4017808:	003f4e06 	br	4017544 <__alt_data_end+0xfc017544>
 401780c:	1c48b03a 	or	r4,r3,r17
 4017810:	20003c26 	beq	r4,zero,4017904 <__subdf3+0x62c>
 4017814:	0084303a 	nor	r2,zero,r2
 4017818:	1000381e 	bne	r2,zero,40178fc <__subdf3+0x624>
 401781c:	3463c83a 	sub	r17,r6,r17
 4017820:	28c5c83a 	sub	r2,r5,r3
 4017824:	344d803a 	cmpltu	r6,r6,r17
 4017828:	1187c83a 	sub	r3,r2,r6
 401782c:	4821883a 	mov	r16,r9
 4017830:	3825883a 	mov	r18,r7
 4017834:	003f0606 	br	4017450 <__alt_data_end+0xfc017450>
 4017838:	2023883a 	mov	r17,r4
 401783c:	003f0906 	br	4017464 <__alt_data_end+0xfc017464>
 4017840:	0101ffc4 	movi	r4,2047
 4017844:	813f3a1e 	bne	r16,r4,4017530 <__alt_data_end+0xfc017530>
 4017848:	003ec406 	br	401735c <__alt_data_end+0xfc01735c>
 401784c:	0005883a 	mov	r2,zero
 4017850:	003fb106 	br	4017718 <__alt_data_end+0xfc017718>
 4017854:	0005883a 	mov	r2,zero
 4017858:	003fbc06 	br	401774c <__alt_data_end+0xfc01774c>
 401785c:	1c44b03a 	or	r2,r3,r17
 4017860:	80008e1e 	bne	r16,zero,4017a9c <__subdf3+0x7c4>
 4017864:	1000c826 	beq	r2,zero,4017b88 <__subdf3+0x8b0>
 4017868:	2984b03a 	or	r2,r5,r6
 401786c:	103ebb26 	beq	r2,zero,401735c <__alt_data_end+0xfc01735c>
 4017870:	8989883a 	add	r4,r17,r6
 4017874:	1945883a 	add	r2,r3,r5
 4017878:	2447803a 	cmpltu	r3,r4,r17
 401787c:	1887883a 	add	r3,r3,r2
 4017880:	1880202c 	andhi	r2,r3,128
 4017884:	2023883a 	mov	r17,r4
 4017888:	103f1626 	beq	r2,zero,40174e4 <__alt_data_end+0xfc0174e4>
 401788c:	00bfe034 	movhi	r2,65408
 4017890:	10bfffc4 	addi	r2,r2,-1
 4017894:	5021883a 	mov	r16,r10
 4017898:	1886703a 	and	r3,r3,r2
 401789c:	003eaf06 	br	401735c <__alt_data_end+0xfc01735c>
 40178a0:	3825883a 	mov	r18,r7
 40178a4:	003f0f06 	br	40174e4 <__alt_data_end+0xfc0174e4>
 40178a8:	1c44b03a 	or	r2,r3,r17
 40178ac:	8000251e 	bne	r16,zero,4017944 <__subdf3+0x66c>
 40178b0:	1000661e 	bne	r2,zero,4017a4c <__subdf3+0x774>
 40178b4:	2990b03a 	or	r8,r5,r6
 40178b8:	40009626 	beq	r8,zero,4017b14 <__subdf3+0x83c>
 40178bc:	2807883a 	mov	r3,r5
 40178c0:	3023883a 	mov	r17,r6
 40178c4:	3825883a 	mov	r18,r7
 40178c8:	003ea406 	br	401735c <__alt_data_end+0xfc01735c>
 40178cc:	127ff804 	addi	r9,r2,-32
 40178d0:	01000804 	movi	r4,32
 40178d4:	2a52d83a 	srl	r9,r5,r9
 40178d8:	11008c26 	beq	r2,r4,4017b0c <__subdf3+0x834>
 40178dc:	01001004 	movi	r4,64
 40178e0:	2085c83a 	sub	r2,r4,r2
 40178e4:	2884983a 	sll	r2,r5,r2
 40178e8:	118cb03a 	or	r6,r2,r6
 40178ec:	300cc03a 	cmpne	r6,r6,zero
 40178f0:	4992b03a 	or	r9,r9,r6
 40178f4:	0005883a 	mov	r2,zero
 40178f8:	003f1206 	br	4017544 <__alt_data_end+0xfc017544>
 40178fc:	0101ffc4 	movi	r4,2047
 4017900:	493f9c1e 	bne	r9,r4,4017774 <__alt_data_end+0xfc017774>
 4017904:	2807883a 	mov	r3,r5
 4017908:	3023883a 	mov	r17,r6
 401790c:	4821883a 	mov	r16,r9
 4017910:	3825883a 	mov	r18,r7
 4017914:	003e9106 	br	401735c <__alt_data_end+0xfc01735c>
 4017918:	80001f1e 	bne	r16,zero,4017998 <__subdf3+0x6c0>
 401791c:	1c48b03a 	or	r4,r3,r17
 4017920:	20005a26 	beq	r4,zero,4017a8c <__subdf3+0x7b4>
 4017924:	0084303a 	nor	r2,zero,r2
 4017928:	1000561e 	bne	r2,zero,4017a84 <__subdf3+0x7ac>
 401792c:	89a3883a 	add	r17,r17,r6
 4017930:	1945883a 	add	r2,r3,r5
 4017934:	898d803a 	cmpltu	r6,r17,r6
 4017938:	3087883a 	add	r3,r6,r2
 401793c:	4821883a 	mov	r16,r9
 4017940:	003f0506 	br	4017558 <__alt_data_end+0xfc017558>
 4017944:	10002b1e 	bne	r2,zero,40179f4 <__subdf3+0x71c>
 4017948:	2984b03a 	or	r2,r5,r6
 401794c:	10008026 	beq	r2,zero,4017b50 <__subdf3+0x878>
 4017950:	2807883a 	mov	r3,r5
 4017954:	3023883a 	mov	r17,r6
 4017958:	3825883a 	mov	r18,r7
 401795c:	0401ffc4 	movi	r16,2047
 4017960:	003e7e06 	br	401735c <__alt_data_end+0xfc01735c>
 4017964:	3809883a 	mov	r4,r7
 4017968:	0011883a 	mov	r8,zero
 401796c:	0005883a 	mov	r2,zero
 4017970:	003ee306 	br	4017500 <__alt_data_end+0xfc017500>
 4017974:	1c62b03a 	or	r17,r3,r17
 4017978:	8822c03a 	cmpne	r17,r17,zero
 401797c:	0005883a 	mov	r2,zero
 4017980:	003f8906 	br	40177a8 <__alt_data_end+0xfc0177a8>
 4017984:	3809883a 	mov	r4,r7
 4017988:	4821883a 	mov	r16,r9
 401798c:	0011883a 	mov	r8,zero
 4017990:	0005883a 	mov	r2,zero
 4017994:	003eda06 	br	4017500 <__alt_data_end+0xfc017500>
 4017998:	0101ffc4 	movi	r4,2047
 401799c:	49003b26 	beq	r9,r4,4017a8c <__subdf3+0x7b4>
 40179a0:	0085c83a 	sub	r2,zero,r2
 40179a4:	18c02034 	orhi	r3,r3,128
 40179a8:	01000e04 	movi	r4,56
 40179ac:	20806e16 	blt	r4,r2,4017b68 <__subdf3+0x890>
 40179b0:	010007c4 	movi	r4,31
 40179b4:	20807716 	blt	r4,r2,4017b94 <__subdf3+0x8bc>
 40179b8:	01000804 	movi	r4,32
 40179bc:	2089c83a 	sub	r4,r4,r2
 40179c0:	1914983a 	sll	r10,r3,r4
 40179c4:	8890d83a 	srl	r8,r17,r2
 40179c8:	8908983a 	sll	r4,r17,r4
 40179cc:	1884d83a 	srl	r2,r3,r2
 40179d0:	5222b03a 	or	r17,r10,r8
 40179d4:	2006c03a 	cmpne	r3,r4,zero
 40179d8:	88e2b03a 	or	r17,r17,r3
 40179dc:	89a3883a 	add	r17,r17,r6
 40179e0:	1145883a 	add	r2,r2,r5
 40179e4:	898d803a 	cmpltu	r6,r17,r6
 40179e8:	3087883a 	add	r3,r6,r2
 40179ec:	4821883a 	mov	r16,r9
 40179f0:	003ed906 	br	4017558 <__alt_data_end+0xfc017558>
 40179f4:	2984b03a 	or	r2,r5,r6
 40179f8:	10004226 	beq	r2,zero,4017b04 <__subdf3+0x82c>
 40179fc:	1808d0fa 	srli	r4,r3,3
 4017a00:	8822d0fa 	srli	r17,r17,3
 4017a04:	1806977a 	slli	r3,r3,29
 4017a08:	2080022c 	andhi	r2,r4,8
 4017a0c:	1c62b03a 	or	r17,r3,r17
 4017a10:	10000826 	beq	r2,zero,4017a34 <__subdf3+0x75c>
 4017a14:	2812d0fa 	srli	r9,r5,3
 4017a18:	4880022c 	andhi	r2,r9,8
 4017a1c:	1000051e 	bne	r2,zero,4017a34 <__subdf3+0x75c>
 4017a20:	300cd0fa 	srli	r6,r6,3
 4017a24:	2804977a 	slli	r2,r5,29
 4017a28:	4809883a 	mov	r4,r9
 4017a2c:	3825883a 	mov	r18,r7
 4017a30:	11a2b03a 	or	r17,r2,r6
 4017a34:	8806d77a 	srli	r3,r17,29
 4017a38:	200890fa 	slli	r4,r4,3
 4017a3c:	882290fa 	slli	r17,r17,3
 4017a40:	0401ffc4 	movi	r16,2047
 4017a44:	1906b03a 	or	r3,r3,r4
 4017a48:	003e4406 	br	401735c <__alt_data_end+0xfc01735c>
 4017a4c:	2984b03a 	or	r2,r5,r6
 4017a50:	103e4226 	beq	r2,zero,401735c <__alt_data_end+0xfc01735c>
 4017a54:	8989c83a 	sub	r4,r17,r6
 4017a58:	8911803a 	cmpltu	r8,r17,r4
 4017a5c:	1945c83a 	sub	r2,r3,r5
 4017a60:	1205c83a 	sub	r2,r2,r8
 4017a64:	1200202c 	andhi	r8,r2,128
 4017a68:	403e9a26 	beq	r8,zero,40174d4 <__alt_data_end+0xfc0174d4>
 4017a6c:	3463c83a 	sub	r17,r6,r17
 4017a70:	28c5c83a 	sub	r2,r5,r3
 4017a74:	344d803a 	cmpltu	r6,r6,r17
 4017a78:	1187c83a 	sub	r3,r2,r6
 4017a7c:	3825883a 	mov	r18,r7
 4017a80:	003e3606 	br	401735c <__alt_data_end+0xfc01735c>
 4017a84:	0101ffc4 	movi	r4,2047
 4017a88:	493fc71e 	bne	r9,r4,40179a8 <__alt_data_end+0xfc0179a8>
 4017a8c:	2807883a 	mov	r3,r5
 4017a90:	3023883a 	mov	r17,r6
 4017a94:	4821883a 	mov	r16,r9
 4017a98:	003e3006 	br	401735c <__alt_data_end+0xfc01735c>
 4017a9c:	10003626 	beq	r2,zero,4017b78 <__subdf3+0x8a0>
 4017aa0:	2984b03a 	or	r2,r5,r6
 4017aa4:	10001726 	beq	r2,zero,4017b04 <__subdf3+0x82c>
 4017aa8:	1808d0fa 	srli	r4,r3,3
 4017aac:	8822d0fa 	srli	r17,r17,3
 4017ab0:	1806977a 	slli	r3,r3,29
 4017ab4:	2080022c 	andhi	r2,r4,8
 4017ab8:	1c62b03a 	or	r17,r3,r17
 4017abc:	10000726 	beq	r2,zero,4017adc <__subdf3+0x804>
 4017ac0:	2812d0fa 	srli	r9,r5,3
 4017ac4:	4880022c 	andhi	r2,r9,8
 4017ac8:	1000041e 	bne	r2,zero,4017adc <__subdf3+0x804>
 4017acc:	300cd0fa 	srli	r6,r6,3
 4017ad0:	2804977a 	slli	r2,r5,29
 4017ad4:	4809883a 	mov	r4,r9
 4017ad8:	11a2b03a 	or	r17,r2,r6
 4017adc:	8806d77a 	srli	r3,r17,29
 4017ae0:	200890fa 	slli	r4,r4,3
 4017ae4:	882290fa 	slli	r17,r17,3
 4017ae8:	3825883a 	mov	r18,r7
 4017aec:	1906b03a 	or	r3,r3,r4
 4017af0:	0401ffc4 	movi	r16,2047
 4017af4:	003e1906 	br	401735c <__alt_data_end+0xfc01735c>
 4017af8:	000b883a 	mov	r5,zero
 4017afc:	0005883a 	mov	r2,zero
 4017b00:	003e2e06 	br	40173bc <__alt_data_end+0xfc0173bc>
 4017b04:	0401ffc4 	movi	r16,2047
 4017b08:	003e1406 	br	401735c <__alt_data_end+0xfc01735c>
 4017b0c:	0005883a 	mov	r2,zero
 4017b10:	003f7506 	br	40178e8 <__alt_data_end+0xfc0178e8>
 4017b14:	0005883a 	mov	r2,zero
 4017b18:	0009883a 	mov	r4,zero
 4017b1c:	003e7806 	br	4017500 <__alt_data_end+0xfc017500>
 4017b20:	123ff804 	addi	r8,r2,-32
 4017b24:	01000804 	movi	r4,32
 4017b28:	1a10d83a 	srl	r8,r3,r8
 4017b2c:	11002526 	beq	r2,r4,4017bc4 <__subdf3+0x8ec>
 4017b30:	01001004 	movi	r4,64
 4017b34:	2085c83a 	sub	r2,r4,r2
 4017b38:	1884983a 	sll	r2,r3,r2
 4017b3c:	1444b03a 	or	r2,r2,r17
 4017b40:	1004c03a 	cmpne	r2,r2,zero
 4017b44:	40a2b03a 	or	r17,r8,r2
 4017b48:	0005883a 	mov	r2,zero
 4017b4c:	003f1606 	br	40177a8 <__alt_data_end+0xfc0177a8>
 4017b50:	02000434 	movhi	r8,16
 4017b54:	0009883a 	mov	r4,zero
 4017b58:	423fffc4 	addi	r8,r8,-1
 4017b5c:	00bfffc4 	movi	r2,-1
 4017b60:	0401ffc4 	movi	r16,2047
 4017b64:	003e6606 	br	4017500 <__alt_data_end+0xfc017500>
 4017b68:	1c62b03a 	or	r17,r3,r17
 4017b6c:	8822c03a 	cmpne	r17,r17,zero
 4017b70:	0005883a 	mov	r2,zero
 4017b74:	003f9906 	br	40179dc <__alt_data_end+0xfc0179dc>
 4017b78:	2807883a 	mov	r3,r5
 4017b7c:	3023883a 	mov	r17,r6
 4017b80:	0401ffc4 	movi	r16,2047
 4017b84:	003df506 	br	401735c <__alt_data_end+0xfc01735c>
 4017b88:	2807883a 	mov	r3,r5
 4017b8c:	3023883a 	mov	r17,r6
 4017b90:	003df206 	br	401735c <__alt_data_end+0xfc01735c>
 4017b94:	123ff804 	addi	r8,r2,-32
 4017b98:	01000804 	movi	r4,32
 4017b9c:	1a10d83a 	srl	r8,r3,r8
 4017ba0:	11000a26 	beq	r2,r4,4017bcc <__subdf3+0x8f4>
 4017ba4:	01001004 	movi	r4,64
 4017ba8:	2085c83a 	sub	r2,r4,r2
 4017bac:	1884983a 	sll	r2,r3,r2
 4017bb0:	1444b03a 	or	r2,r2,r17
 4017bb4:	1004c03a 	cmpne	r2,r2,zero
 4017bb8:	40a2b03a 	or	r17,r8,r2
 4017bbc:	0005883a 	mov	r2,zero
 4017bc0:	003f8606 	br	40179dc <__alt_data_end+0xfc0179dc>
 4017bc4:	0005883a 	mov	r2,zero
 4017bc8:	003fdc06 	br	4017b3c <__alt_data_end+0xfc017b3c>
 4017bcc:	0005883a 	mov	r2,zero
 4017bd0:	003ff706 	br	4017bb0 <__alt_data_end+0xfc017bb0>

04017bd4 <__fixdfsi>:
 4017bd4:	280cd53a 	srli	r6,r5,20
 4017bd8:	00c00434 	movhi	r3,16
 4017bdc:	18ffffc4 	addi	r3,r3,-1
 4017be0:	3181ffcc 	andi	r6,r6,2047
 4017be4:	01c0ff84 	movi	r7,1022
 4017be8:	28c6703a 	and	r3,r5,r3
 4017bec:	280ad7fa 	srli	r5,r5,31
 4017bf0:	3980120e 	bge	r7,r6,4017c3c <__fixdfsi+0x68>
 4017bf4:	00810744 	movi	r2,1053
 4017bf8:	11800c16 	blt	r2,r6,4017c2c <__fixdfsi+0x58>
 4017bfc:	00810cc4 	movi	r2,1075
 4017c00:	1185c83a 	sub	r2,r2,r6
 4017c04:	01c007c4 	movi	r7,31
 4017c08:	18c00434 	orhi	r3,r3,16
 4017c0c:	38800d16 	blt	r7,r2,4017c44 <__fixdfsi+0x70>
 4017c10:	31befb44 	addi	r6,r6,-1043
 4017c14:	2084d83a 	srl	r2,r4,r2
 4017c18:	1986983a 	sll	r3,r3,r6
 4017c1c:	1884b03a 	or	r2,r3,r2
 4017c20:	28000726 	beq	r5,zero,4017c40 <__fixdfsi+0x6c>
 4017c24:	0085c83a 	sub	r2,zero,r2
 4017c28:	f800283a 	ret
 4017c2c:	00a00034 	movhi	r2,32768
 4017c30:	10bfffc4 	addi	r2,r2,-1
 4017c34:	2885883a 	add	r2,r5,r2
 4017c38:	f800283a 	ret
 4017c3c:	0005883a 	mov	r2,zero
 4017c40:	f800283a 	ret
 4017c44:	008104c4 	movi	r2,1043
 4017c48:	1185c83a 	sub	r2,r2,r6
 4017c4c:	1884d83a 	srl	r2,r3,r2
 4017c50:	003ff306 	br	4017c20 <__alt_data_end+0xfc017c20>

04017c54 <__floatsidf>:
 4017c54:	defffd04 	addi	sp,sp,-12
 4017c58:	dfc00215 	stw	ra,8(sp)
 4017c5c:	dc400115 	stw	r17,4(sp)
 4017c60:	dc000015 	stw	r16,0(sp)
 4017c64:	20002b26 	beq	r4,zero,4017d14 <__floatsidf+0xc0>
 4017c68:	2023883a 	mov	r17,r4
 4017c6c:	2020d7fa 	srli	r16,r4,31
 4017c70:	20002d16 	blt	r4,zero,4017d28 <__floatsidf+0xd4>
 4017c74:	8809883a 	mov	r4,r17
 4017c78:	4017dd80 	call	4017dd8 <__clzsi2>
 4017c7c:	01410784 	movi	r5,1054
 4017c80:	288bc83a 	sub	r5,r5,r2
 4017c84:	01010cc4 	movi	r4,1075
 4017c88:	2149c83a 	sub	r4,r4,r5
 4017c8c:	00c007c4 	movi	r3,31
 4017c90:	1900160e 	bge	r3,r4,4017cec <__floatsidf+0x98>
 4017c94:	00c104c4 	movi	r3,1043
 4017c98:	1947c83a 	sub	r3,r3,r5
 4017c9c:	88c6983a 	sll	r3,r17,r3
 4017ca0:	00800434 	movhi	r2,16
 4017ca4:	10bfffc4 	addi	r2,r2,-1
 4017ca8:	1886703a 	and	r3,r3,r2
 4017cac:	2941ffcc 	andi	r5,r5,2047
 4017cb0:	800d883a 	mov	r6,r16
 4017cb4:	0005883a 	mov	r2,zero
 4017cb8:	280a953a 	slli	r5,r5,20
 4017cbc:	31803fcc 	andi	r6,r6,255
 4017cc0:	01000434 	movhi	r4,16
 4017cc4:	300c97fa 	slli	r6,r6,31
 4017cc8:	213fffc4 	addi	r4,r4,-1
 4017ccc:	1906703a 	and	r3,r3,r4
 4017cd0:	1946b03a 	or	r3,r3,r5
 4017cd4:	1986b03a 	or	r3,r3,r6
 4017cd8:	dfc00217 	ldw	ra,8(sp)
 4017cdc:	dc400117 	ldw	r17,4(sp)
 4017ce0:	dc000017 	ldw	r16,0(sp)
 4017ce4:	dec00304 	addi	sp,sp,12
 4017ce8:	f800283a 	ret
 4017cec:	00c002c4 	movi	r3,11
 4017cf0:	1887c83a 	sub	r3,r3,r2
 4017cf4:	88c6d83a 	srl	r3,r17,r3
 4017cf8:	8904983a 	sll	r2,r17,r4
 4017cfc:	01000434 	movhi	r4,16
 4017d00:	213fffc4 	addi	r4,r4,-1
 4017d04:	2941ffcc 	andi	r5,r5,2047
 4017d08:	1906703a 	and	r3,r3,r4
 4017d0c:	800d883a 	mov	r6,r16
 4017d10:	003fe906 	br	4017cb8 <__alt_data_end+0xfc017cb8>
 4017d14:	000d883a 	mov	r6,zero
 4017d18:	000b883a 	mov	r5,zero
 4017d1c:	0007883a 	mov	r3,zero
 4017d20:	0005883a 	mov	r2,zero
 4017d24:	003fe406 	br	4017cb8 <__alt_data_end+0xfc017cb8>
 4017d28:	0123c83a 	sub	r17,zero,r4
 4017d2c:	003fd106 	br	4017c74 <__alt_data_end+0xfc017c74>

04017d30 <__floatunsidf>:
 4017d30:	defffe04 	addi	sp,sp,-8
 4017d34:	dc000015 	stw	r16,0(sp)
 4017d38:	dfc00115 	stw	ra,4(sp)
 4017d3c:	2021883a 	mov	r16,r4
 4017d40:	20002226 	beq	r4,zero,4017dcc <__floatunsidf+0x9c>
 4017d44:	4017dd80 	call	4017dd8 <__clzsi2>
 4017d48:	01010784 	movi	r4,1054
 4017d4c:	2089c83a 	sub	r4,r4,r2
 4017d50:	01810cc4 	movi	r6,1075
 4017d54:	310dc83a 	sub	r6,r6,r4
 4017d58:	00c007c4 	movi	r3,31
 4017d5c:	1980120e 	bge	r3,r6,4017da8 <__floatunsidf+0x78>
 4017d60:	00c104c4 	movi	r3,1043
 4017d64:	1907c83a 	sub	r3,r3,r4
 4017d68:	80ca983a 	sll	r5,r16,r3
 4017d6c:	00800434 	movhi	r2,16
 4017d70:	10bfffc4 	addi	r2,r2,-1
 4017d74:	2101ffcc 	andi	r4,r4,2047
 4017d78:	0021883a 	mov	r16,zero
 4017d7c:	288a703a 	and	r5,r5,r2
 4017d80:	2008953a 	slli	r4,r4,20
 4017d84:	00c00434 	movhi	r3,16
 4017d88:	18ffffc4 	addi	r3,r3,-1
 4017d8c:	28c6703a 	and	r3,r5,r3
 4017d90:	8005883a 	mov	r2,r16
 4017d94:	1906b03a 	or	r3,r3,r4
 4017d98:	dfc00117 	ldw	ra,4(sp)
 4017d9c:	dc000017 	ldw	r16,0(sp)
 4017da0:	dec00204 	addi	sp,sp,8
 4017da4:	f800283a 	ret
 4017da8:	00c002c4 	movi	r3,11
 4017dac:	188bc83a 	sub	r5,r3,r2
 4017db0:	814ad83a 	srl	r5,r16,r5
 4017db4:	00c00434 	movhi	r3,16
 4017db8:	18ffffc4 	addi	r3,r3,-1
 4017dbc:	81a0983a 	sll	r16,r16,r6
 4017dc0:	2101ffcc 	andi	r4,r4,2047
 4017dc4:	28ca703a 	and	r5,r5,r3
 4017dc8:	003fed06 	br	4017d80 <__alt_data_end+0xfc017d80>
 4017dcc:	0009883a 	mov	r4,zero
 4017dd0:	000b883a 	mov	r5,zero
 4017dd4:	003fea06 	br	4017d80 <__alt_data_end+0xfc017d80>

04017dd8 <__clzsi2>:
 4017dd8:	00bfffd4 	movui	r2,65535
 4017ddc:	11000536 	bltu	r2,r4,4017df4 <__clzsi2+0x1c>
 4017de0:	00803fc4 	movi	r2,255
 4017de4:	11000f36 	bltu	r2,r4,4017e24 <__clzsi2+0x4c>
 4017de8:	00800804 	movi	r2,32
 4017dec:	0007883a 	mov	r3,zero
 4017df0:	00000506 	br	4017e08 <__clzsi2+0x30>
 4017df4:	00804034 	movhi	r2,256
 4017df8:	10bfffc4 	addi	r2,r2,-1
 4017dfc:	11000c2e 	bgeu	r2,r4,4017e30 <__clzsi2+0x58>
 4017e00:	00800204 	movi	r2,8
 4017e04:	00c00604 	movi	r3,24
 4017e08:	20c8d83a 	srl	r4,r4,r3
 4017e0c:	00c100b4 	movhi	r3,1026
 4017e10:	18f10504 	addi	r3,r3,-15340
 4017e14:	1909883a 	add	r4,r3,r4
 4017e18:	20c00003 	ldbu	r3,0(r4)
 4017e1c:	10c5c83a 	sub	r2,r2,r3
 4017e20:	f800283a 	ret
 4017e24:	00800604 	movi	r2,24
 4017e28:	00c00204 	movi	r3,8
 4017e2c:	003ff606 	br	4017e08 <__alt_data_end+0xfc017e08>
 4017e30:	00800404 	movi	r2,16
 4017e34:	1007883a 	mov	r3,r2
 4017e38:	003ff306 	br	4017e08 <__alt_data_end+0xfc017e08>

04017e3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017e3c:	defffe04 	addi	sp,sp,-8
 4017e40:	dfc00115 	stw	ra,4(sp)
 4017e44:	df000015 	stw	fp,0(sp)
 4017e48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4017e4c:	d0a02617 	ldw	r2,-32616(gp)
 4017e50:	10000326 	beq	r2,zero,4017e60 <alt_get_errno+0x24>
 4017e54:	d0a02617 	ldw	r2,-32616(gp)
 4017e58:	103ee83a 	callr	r2
 4017e5c:	00000106 	br	4017e64 <alt_get_errno+0x28>
 4017e60:	d092e504 	addi	r2,gp,19348
}
 4017e64:	e037883a 	mov	sp,fp
 4017e68:	dfc00117 	ldw	ra,4(sp)
 4017e6c:	df000017 	ldw	fp,0(sp)
 4017e70:	dec00204 	addi	sp,sp,8
 4017e74:	f800283a 	ret

04017e78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4017e78:	defffb04 	addi	sp,sp,-20
 4017e7c:	dfc00415 	stw	ra,16(sp)
 4017e80:	df000315 	stw	fp,12(sp)
 4017e84:	df000304 	addi	fp,sp,12
 4017e88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4017e8c:	e0bfff17 	ldw	r2,-4(fp)
 4017e90:	10000616 	blt	r2,zero,4017eac <close+0x34>
 4017e94:	e0bfff17 	ldw	r2,-4(fp)
 4017e98:	10c00324 	muli	r3,r2,12
 4017e9c:	008100b4 	movhi	r2,1026
 4017ea0:	109f5104 	addi	r2,r2,32068
 4017ea4:	1885883a 	add	r2,r3,r2
 4017ea8:	00000106 	br	4017eb0 <close+0x38>
 4017eac:	0005883a 	mov	r2,zero
 4017eb0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4017eb4:	e0bffd17 	ldw	r2,-12(fp)
 4017eb8:	10001926 	beq	r2,zero,4017f20 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4017ebc:	e0bffd17 	ldw	r2,-12(fp)
 4017ec0:	10800017 	ldw	r2,0(r2)
 4017ec4:	10800417 	ldw	r2,16(r2)
 4017ec8:	10000626 	beq	r2,zero,4017ee4 <close+0x6c>
 4017ecc:	e0bffd17 	ldw	r2,-12(fp)
 4017ed0:	10800017 	ldw	r2,0(r2)
 4017ed4:	10800417 	ldw	r2,16(r2)
 4017ed8:	e13ffd17 	ldw	r4,-12(fp)
 4017edc:	103ee83a 	callr	r2
 4017ee0:	00000106 	br	4017ee8 <close+0x70>
 4017ee4:	0005883a 	mov	r2,zero
 4017ee8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4017eec:	e13fff17 	ldw	r4,-4(fp)
 4017ef0:	40186f80 	call	40186f8 <alt_release_fd>
    if (rval < 0)
 4017ef4:	e0bffe17 	ldw	r2,-8(fp)
 4017ef8:	1000070e 	bge	r2,zero,4017f18 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4017efc:	4017e3c0 	call	4017e3c <alt_get_errno>
 4017f00:	1007883a 	mov	r3,r2
 4017f04:	e0bffe17 	ldw	r2,-8(fp)
 4017f08:	0085c83a 	sub	r2,zero,r2
 4017f0c:	18800015 	stw	r2,0(r3)
      return -1;
 4017f10:	00bfffc4 	movi	r2,-1
 4017f14:	00000706 	br	4017f34 <close+0xbc>
    }
    return 0;
 4017f18:	0005883a 	mov	r2,zero
 4017f1c:	00000506 	br	4017f34 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4017f20:	4017e3c0 	call	4017e3c <alt_get_errno>
 4017f24:	1007883a 	mov	r3,r2
 4017f28:	00801444 	movi	r2,81
 4017f2c:	18800015 	stw	r2,0(r3)
    return -1;
 4017f30:	00bfffc4 	movi	r2,-1
  }
}
 4017f34:	e037883a 	mov	sp,fp
 4017f38:	dfc00117 	ldw	ra,4(sp)
 4017f3c:	df000017 	ldw	fp,0(sp)
 4017f40:	dec00204 	addi	sp,sp,8
 4017f44:	f800283a 	ret

04017f48 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4017f48:	defffc04 	addi	sp,sp,-16
 4017f4c:	df000315 	stw	fp,12(sp)
 4017f50:	df000304 	addi	fp,sp,12
 4017f54:	e13ffd15 	stw	r4,-12(fp)
 4017f58:	e17ffe15 	stw	r5,-8(fp)
 4017f5c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4017f60:	e0bfff17 	ldw	r2,-4(fp)
}
 4017f64:	e037883a 	mov	sp,fp
 4017f68:	df000017 	ldw	fp,0(sp)
 4017f6c:	dec00104 	addi	sp,sp,4
 4017f70:	f800283a 	ret

04017f74 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4017f74:	defffd04 	addi	sp,sp,-12
 4017f78:	df000215 	stw	fp,8(sp)
 4017f7c:	df000204 	addi	fp,sp,8
 4017f80:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4017f84:	0001883a 	nop
 4017f88:	e0bfff17 	ldw	r2,-4(fp)
 4017f8c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4017f90:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4017f94:	10000226 	beq	r2,zero,4017fa0 <_exit+0x2c>
    ALT_SIM_FAIL();
 4017f98:	002af070 	cmpltui	zero,zero,43969
 4017f9c:	00000106 	br	4017fa4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4017fa0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4017fa4:	003fff06 	br	4017fa4 <__alt_data_end+0xfc017fa4>

04017fa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017fa8:	defffe04 	addi	sp,sp,-8
 4017fac:	dfc00115 	stw	ra,4(sp)
 4017fb0:	df000015 	stw	fp,0(sp)
 4017fb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4017fb8:	d0a02617 	ldw	r2,-32616(gp)
 4017fbc:	10000326 	beq	r2,zero,4017fcc <alt_get_errno+0x24>
 4017fc0:	d0a02617 	ldw	r2,-32616(gp)
 4017fc4:	103ee83a 	callr	r2
 4017fc8:	00000106 	br	4017fd0 <alt_get_errno+0x28>
 4017fcc:	d092e504 	addi	r2,gp,19348
}
 4017fd0:	e037883a 	mov	sp,fp
 4017fd4:	dfc00117 	ldw	ra,4(sp)
 4017fd8:	df000017 	ldw	fp,0(sp)
 4017fdc:	dec00204 	addi	sp,sp,8
 4017fe0:	f800283a 	ret

04017fe4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4017fe4:	defffb04 	addi	sp,sp,-20
 4017fe8:	dfc00415 	stw	ra,16(sp)
 4017fec:	df000315 	stw	fp,12(sp)
 4017ff0:	df000304 	addi	fp,sp,12
 4017ff4:	e13ffe15 	stw	r4,-8(fp)
 4017ff8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4017ffc:	e0bffe17 	ldw	r2,-8(fp)
 4018000:	10000616 	blt	r2,zero,401801c <fstat+0x38>
 4018004:	e0bffe17 	ldw	r2,-8(fp)
 4018008:	10c00324 	muli	r3,r2,12
 401800c:	008100b4 	movhi	r2,1026
 4018010:	109f5104 	addi	r2,r2,32068
 4018014:	1885883a 	add	r2,r3,r2
 4018018:	00000106 	br	4018020 <fstat+0x3c>
 401801c:	0005883a 	mov	r2,zero
 4018020:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4018024:	e0bffd17 	ldw	r2,-12(fp)
 4018028:	10001026 	beq	r2,zero,401806c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 401802c:	e0bffd17 	ldw	r2,-12(fp)
 4018030:	10800017 	ldw	r2,0(r2)
 4018034:	10800817 	ldw	r2,32(r2)
 4018038:	10000726 	beq	r2,zero,4018058 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 401803c:	e0bffd17 	ldw	r2,-12(fp)
 4018040:	10800017 	ldw	r2,0(r2)
 4018044:	10800817 	ldw	r2,32(r2)
 4018048:	e17fff17 	ldw	r5,-4(fp)
 401804c:	e13ffd17 	ldw	r4,-12(fp)
 4018050:	103ee83a 	callr	r2
 4018054:	00000a06 	br	4018080 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4018058:	e0bfff17 	ldw	r2,-4(fp)
 401805c:	00c80004 	movi	r3,8192
 4018060:	10c00115 	stw	r3,4(r2)
      return 0;
 4018064:	0005883a 	mov	r2,zero
 4018068:	00000506 	br	4018080 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401806c:	4017fa80 	call	4017fa8 <alt_get_errno>
 4018070:	1007883a 	mov	r3,r2
 4018074:	00801444 	movi	r2,81
 4018078:	18800015 	stw	r2,0(r3)
    return -1;
 401807c:	00bfffc4 	movi	r2,-1
  }
}
 4018080:	e037883a 	mov	sp,fp
 4018084:	dfc00117 	ldw	ra,4(sp)
 4018088:	df000017 	ldw	fp,0(sp)
 401808c:	dec00204 	addi	sp,sp,8
 4018090:	f800283a 	ret

04018094 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 4018094:	deffff04 	addi	sp,sp,-4
 4018098:	df000015 	stw	fp,0(sp)
 401809c:	d839883a 	mov	fp,sp
  return 0;
 40180a0:	0005883a 	mov	r2,zero
}
 40180a4:	e037883a 	mov	sp,fp
 40180a8:	df000017 	ldw	fp,0(sp)
 40180ac:	dec00104 	addi	sp,sp,4
 40180b0:	f800283a 	ret

040180b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40180b4:	defffe04 	addi	sp,sp,-8
 40180b8:	dfc00115 	stw	ra,4(sp)
 40180bc:	df000015 	stw	fp,0(sp)
 40180c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40180c4:	d0a02617 	ldw	r2,-32616(gp)
 40180c8:	10000326 	beq	r2,zero,40180d8 <alt_get_errno+0x24>
 40180cc:	d0a02617 	ldw	r2,-32616(gp)
 40180d0:	103ee83a 	callr	r2
 40180d4:	00000106 	br	40180dc <alt_get_errno+0x28>
 40180d8:	d092e504 	addi	r2,gp,19348
}
 40180dc:	e037883a 	mov	sp,fp
 40180e0:	dfc00117 	ldw	ra,4(sp)
 40180e4:	df000017 	ldw	fp,0(sp)
 40180e8:	dec00204 	addi	sp,sp,8
 40180ec:	f800283a 	ret

040180f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 40180f0:	deffed04 	addi	sp,sp,-76
 40180f4:	dfc01215 	stw	ra,72(sp)
 40180f8:	df001115 	stw	fp,68(sp)
 40180fc:	df001104 	addi	fp,sp,68
 4018100:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4018104:	e0bfff17 	ldw	r2,-4(fp)
 4018108:	10000616 	blt	r2,zero,4018124 <isatty+0x34>
 401810c:	e0bfff17 	ldw	r2,-4(fp)
 4018110:	10c00324 	muli	r3,r2,12
 4018114:	008100b4 	movhi	r2,1026
 4018118:	109f5104 	addi	r2,r2,32068
 401811c:	1885883a 	add	r2,r3,r2
 4018120:	00000106 	br	4018128 <isatty+0x38>
 4018124:	0005883a 	mov	r2,zero
 4018128:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401812c:	e0bfef17 	ldw	r2,-68(fp)
 4018130:	10000e26 	beq	r2,zero,401816c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4018134:	e0bfef17 	ldw	r2,-68(fp)
 4018138:	10800017 	ldw	r2,0(r2)
 401813c:	10800817 	ldw	r2,32(r2)
 4018140:	1000021e 	bne	r2,zero,401814c <isatty+0x5c>
    {
      return 1;
 4018144:	00800044 	movi	r2,1
 4018148:	00000d06 	br	4018180 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401814c:	e0bff004 	addi	r2,fp,-64
 4018150:	100b883a 	mov	r5,r2
 4018154:	e13fff17 	ldw	r4,-4(fp)
 4018158:	4017fe40 	call	4017fe4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401815c:	e0bff117 	ldw	r2,-60(fp)
 4018160:	10880020 	cmpeqi	r2,r2,8192
 4018164:	10803fcc 	andi	r2,r2,255
 4018168:	00000506 	br	4018180 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401816c:	40180b40 	call	40180b4 <alt_get_errno>
 4018170:	1007883a 	mov	r3,r2
 4018174:	00801444 	movi	r2,81
 4018178:	18800015 	stw	r2,0(r3)
    return 0;
 401817c:	0005883a 	mov	r2,zero
  }
}
 4018180:	e037883a 	mov	sp,fp
 4018184:	dfc00117 	ldw	ra,4(sp)
 4018188:	df000017 	ldw	fp,0(sp)
 401818c:	dec00204 	addi	sp,sp,8
 4018190:	f800283a 	ret

04018194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4018194:	defffe04 	addi	sp,sp,-8
 4018198:	dfc00115 	stw	ra,4(sp)
 401819c:	df000015 	stw	fp,0(sp)
 40181a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40181a4:	d0a02617 	ldw	r2,-32616(gp)
 40181a8:	10000326 	beq	r2,zero,40181b8 <alt_get_errno+0x24>
 40181ac:	d0a02617 	ldw	r2,-32616(gp)
 40181b0:	103ee83a 	callr	r2
 40181b4:	00000106 	br	40181bc <alt_get_errno+0x28>
 40181b8:	d092e504 	addi	r2,gp,19348
}
 40181bc:	e037883a 	mov	sp,fp
 40181c0:	dfc00117 	ldw	ra,4(sp)
 40181c4:	df000017 	ldw	fp,0(sp)
 40181c8:	dec00204 	addi	sp,sp,8
 40181cc:	f800283a 	ret

040181d0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 40181d0:	defffb04 	addi	sp,sp,-20
 40181d4:	dfc00415 	stw	ra,16(sp)
 40181d8:	df000315 	stw	fp,12(sp)
 40181dc:	df000304 	addi	fp,sp,12
 40181e0:	e13ffe15 	stw	r4,-8(fp)
 40181e4:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 40181e8:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 40181ec:	e0bffe17 	ldw	r2,-8(fp)
 40181f0:	00802f16 	blt	zero,r2,40182b0 <kill+0xe0>
  {
    switch (sig)
 40181f4:	e0bfff17 	ldw	r2,-4(fp)
 40181f8:	10800828 	cmpgeui	r2,r2,32
 40181fc:	1000291e 	bne	r2,zero,40182a4 <kill+0xd4>
 4018200:	e0bfff17 	ldw	r2,-4(fp)
 4018204:	100690ba 	slli	r3,r2,2
 4018208:	008100b4 	movhi	r2,1026
 401820c:	10a08704 	addi	r2,r2,-32228
 4018210:	1885883a 	add	r2,r3,r2
 4018214:	10800017 	ldw	r2,0(r2)
 4018218:	1000683a 	jmp	r2
 401821c:	040182c4 	movi	r16,1547
 4018220:	040182a4 	muli	r16,zero,1546
 4018224:	040182a4 	muli	r16,zero,1546
 4018228:	0401829c 	xori	r16,zero,1546
 401822c:	0401829c 	xori	r16,zero,1546
 4018230:	0401829c 	xori	r16,zero,1546
 4018234:	0401829c 	xori	r16,zero,1546
 4018238:	040182a4 	muli	r16,zero,1546
 401823c:	0401829c 	xori	r16,zero,1546
 4018240:	0401829c 	xori	r16,zero,1546
 4018244:	0401829c 	xori	r16,zero,1546
 4018248:	0401829c 	xori	r16,zero,1546
 401824c:	0401829c 	xori	r16,zero,1546
 4018250:	0401829c 	xori	r16,zero,1546
 4018254:	0401829c 	xori	r16,zero,1546
 4018258:	0401829c 	xori	r16,zero,1546
 401825c:	040182c4 	movi	r16,1547
 4018260:	040182a4 	muli	r16,zero,1546
 4018264:	040182a4 	muli	r16,zero,1546
 4018268:	040182a4 	muli	r16,zero,1546
 401826c:	040182c4 	movi	r16,1547
 4018270:	040182a4 	muli	r16,zero,1546
 4018274:	040182a4 	muli	r16,zero,1546
 4018278:	0401829c 	xori	r16,zero,1546
 401827c:	0401829c 	xori	r16,zero,1546
 4018280:	0401829c 	xori	r16,zero,1546
 4018284:	0401829c 	xori	r16,zero,1546
 4018288:	0401829c 	xori	r16,zero,1546
 401828c:	040182a4 	muli	r16,zero,1546
 4018290:	040182a4 	muli	r16,zero,1546
 4018294:	0401829c 	xori	r16,zero,1546
 4018298:	0401829c 	xori	r16,zero,1546
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 401829c:	0009883a 	mov	r4,zero
 40182a0:	4017f740 	call	4017f74 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 40182a4:	00800584 	movi	r2,22
 40182a8:	e0bffd15 	stw	r2,-12(fp)
 40182ac:	00000606 	br	40182c8 <kill+0xf8>
    }
  }

  else if (pid > 0)
 40182b0:	e0bffe17 	ldw	r2,-8(fp)
 40182b4:	0080040e 	bge	zero,r2,40182c8 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 40182b8:	008000c4 	movi	r2,3
 40182bc:	e0bffd15 	stw	r2,-12(fp)
 40182c0:	00000106 	br	40182c8 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 40182c4:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 40182c8:	e0bffd17 	ldw	r2,-12(fp)
 40182cc:	10000626 	beq	r2,zero,40182e8 <kill+0x118>
  {
    ALT_ERRNO = status;
 40182d0:	40181940 	call	4018194 <alt_get_errno>
 40182d4:	1007883a 	mov	r3,r2
 40182d8:	e0bffd17 	ldw	r2,-12(fp)
 40182dc:	18800015 	stw	r2,0(r3)
    return -1;
 40182e0:	00bfffc4 	movi	r2,-1
 40182e4:	00000106 	br	40182ec <kill+0x11c>
  }

  return 0;
 40182e8:	0005883a 	mov	r2,zero
}
 40182ec:	e037883a 	mov	sp,fp
 40182f0:	dfc00117 	ldw	ra,4(sp)
 40182f4:	df000017 	ldw	fp,0(sp)
 40182f8:	dec00204 	addi	sp,sp,8
 40182fc:	f800283a 	ret

04018300 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4018300:	defffc04 	addi	sp,sp,-16
 4018304:	df000315 	stw	fp,12(sp)
 4018308:	df000304 	addi	fp,sp,12
 401830c:	e13ffd15 	stw	r4,-12(fp)
 4018310:	e17ffe15 	stw	r5,-8(fp)
 4018314:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4018318:	e0fffe17 	ldw	r3,-8(fp)
 401831c:	e0bffd17 	ldw	r2,-12(fp)
 4018320:	18800c26 	beq	r3,r2,4018354 <alt_load_section+0x54>
  {
    while( to != end )
 4018324:	00000806 	br	4018348 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4018328:	e0bffe17 	ldw	r2,-8(fp)
 401832c:	10c00104 	addi	r3,r2,4
 4018330:	e0fffe15 	stw	r3,-8(fp)
 4018334:	e0fffd17 	ldw	r3,-12(fp)
 4018338:	19000104 	addi	r4,r3,4
 401833c:	e13ffd15 	stw	r4,-12(fp)
 4018340:	18c00017 	ldw	r3,0(r3)
 4018344:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4018348:	e0fffe17 	ldw	r3,-8(fp)
 401834c:	e0bfff17 	ldw	r2,-4(fp)
 4018350:	18bff51e 	bne	r3,r2,4018328 <__alt_data_end+0xfc018328>
    {
      *to++ = *from++;
    }
  }
}
 4018354:	0001883a 	nop
 4018358:	e037883a 	mov	sp,fp
 401835c:	df000017 	ldw	fp,0(sp)
 4018360:	dec00104 	addi	sp,sp,4
 4018364:	f800283a 	ret

04018368 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4018368:	defffe04 	addi	sp,sp,-8
 401836c:	dfc00115 	stw	ra,4(sp)
 4018370:	df000015 	stw	fp,0(sp)
 4018374:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4018378:	018100f4 	movhi	r6,1027
 401837c:	31a3f404 	addi	r6,r6,-28720
 4018380:	014100b4 	movhi	r5,1026
 4018384:	29715004 	addi	r5,r5,-15040
 4018388:	010100f4 	movhi	r4,1027
 401838c:	2123f404 	addi	r4,r4,-28720
 4018390:	40183000 	call	4018300 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4018394:	01810034 	movhi	r6,1024
 4018398:	31809104 	addi	r6,r6,580
 401839c:	01410034 	movhi	r5,1024
 40183a0:	29400804 	addi	r5,r5,32
 40183a4:	01010034 	movhi	r4,1024
 40183a8:	21000804 	addi	r4,r4,32
 40183ac:	40183000 	call	4018300 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40183b0:	018100b4 	movhi	r6,1026
 40183b4:	31b15004 	addi	r6,r6,-15040
 40183b8:	014100b4 	movhi	r5,1026
 40183bc:	296aec04 	addi	r5,r5,-21584
 40183c0:	010100b4 	movhi	r4,1026
 40183c4:	212aec04 	addi	r4,r4,-21584
 40183c8:	40183000 	call	4018300 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40183cc:	4019ad40 	call	4019ad4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40183d0:	4019cbc0 	call	4019cbc <alt_icache_flush_all>
}
 40183d4:	0001883a 	nop
 40183d8:	e037883a 	mov	sp,fp
 40183dc:	dfc00117 	ldw	ra,4(sp)
 40183e0:	df000017 	ldw	fp,0(sp)
 40183e4:	dec00204 	addi	sp,sp,8
 40183e8:	f800283a 	ret

040183ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40183ec:	defffe04 	addi	sp,sp,-8
 40183f0:	dfc00115 	stw	ra,4(sp)
 40183f4:	df000015 	stw	fp,0(sp)
 40183f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40183fc:	d0a02617 	ldw	r2,-32616(gp)
 4018400:	10000326 	beq	r2,zero,4018410 <alt_get_errno+0x24>
 4018404:	d0a02617 	ldw	r2,-32616(gp)
 4018408:	103ee83a 	callr	r2
 401840c:	00000106 	br	4018414 <alt_get_errno+0x28>
 4018410:	d092e504 	addi	r2,gp,19348
}
 4018414:	e037883a 	mov	sp,fp
 4018418:	dfc00117 	ldw	ra,4(sp)
 401841c:	df000017 	ldw	fp,0(sp)
 4018420:	dec00204 	addi	sp,sp,8
 4018424:	f800283a 	ret

04018428 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4018428:	defff904 	addi	sp,sp,-28
 401842c:	dfc00615 	stw	ra,24(sp)
 4018430:	df000515 	stw	fp,20(sp)
 4018434:	df000504 	addi	fp,sp,20
 4018438:	e13ffd15 	stw	r4,-12(fp)
 401843c:	e17ffe15 	stw	r5,-8(fp)
 4018440:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4018444:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4018448:	e0bffd17 	ldw	r2,-12(fp)
 401844c:	10000616 	blt	r2,zero,4018468 <lseek+0x40>
 4018450:	e0bffd17 	ldw	r2,-12(fp)
 4018454:	10c00324 	muli	r3,r2,12
 4018458:	008100b4 	movhi	r2,1026
 401845c:	109f5104 	addi	r2,r2,32068
 4018460:	1885883a 	add	r2,r3,r2
 4018464:	00000106 	br	401846c <lseek+0x44>
 4018468:	0005883a 	mov	r2,zero
 401846c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4018470:	e0bffc17 	ldw	r2,-16(fp)
 4018474:	10001026 	beq	r2,zero,40184b8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4018478:	e0bffc17 	ldw	r2,-16(fp)
 401847c:	10800017 	ldw	r2,0(r2)
 4018480:	10800717 	ldw	r2,28(r2)
 4018484:	10000926 	beq	r2,zero,40184ac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4018488:	e0bffc17 	ldw	r2,-16(fp)
 401848c:	10800017 	ldw	r2,0(r2)
 4018490:	10800717 	ldw	r2,28(r2)
 4018494:	e1bfff17 	ldw	r6,-4(fp)
 4018498:	e17ffe17 	ldw	r5,-8(fp)
 401849c:	e13ffc17 	ldw	r4,-16(fp)
 40184a0:	103ee83a 	callr	r2
 40184a4:	e0bffb15 	stw	r2,-20(fp)
 40184a8:	00000506 	br	40184c0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40184ac:	00bfde84 	movi	r2,-134
 40184b0:	e0bffb15 	stw	r2,-20(fp)
 40184b4:	00000206 	br	40184c0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 40184b8:	00bfebc4 	movi	r2,-81
 40184bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 40184c0:	e0bffb17 	ldw	r2,-20(fp)
 40184c4:	1000070e 	bge	r2,zero,40184e4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 40184c8:	40183ec0 	call	40183ec <alt_get_errno>
 40184cc:	1007883a 	mov	r3,r2
 40184d0:	e0bffb17 	ldw	r2,-20(fp)
 40184d4:	0085c83a 	sub	r2,zero,r2
 40184d8:	18800015 	stw	r2,0(r3)
    rc = -1;
 40184dc:	00bfffc4 	movi	r2,-1
 40184e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 40184e4:	e0bffb17 	ldw	r2,-20(fp)
}
 40184e8:	e037883a 	mov	sp,fp
 40184ec:	dfc00117 	ldw	ra,4(sp)
 40184f0:	df000017 	ldw	fp,0(sp)
 40184f4:	dec00204 	addi	sp,sp,8
 40184f8:	f800283a 	ret

040184fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40184fc:	defffd04 	addi	sp,sp,-12
 4018500:	dfc00215 	stw	ra,8(sp)
 4018504:	df000115 	stw	fp,4(sp)
 4018508:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401850c:	0009883a 	mov	r4,zero
 4018510:	4018a580 	call	4018a58 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4018514:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4018518:	4018a900 	call	4018a90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 401851c:	018100b4 	movhi	r6,1026
 4018520:	31b14804 	addi	r6,r6,-15072
 4018524:	014100b4 	movhi	r5,1026
 4018528:	29714804 	addi	r5,r5,-15072
 401852c:	010100b4 	movhi	r4,1026
 4018530:	21314804 	addi	r4,r4,-15072
 4018534:	401a0540 	call	401a054 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4018538:	4019bfc0 	call	4019bfc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401853c:	010100b4 	movhi	r4,1026
 4018540:	21271704 	addi	r4,r4,-25508
 4018544:	401a8540 	call	401a854 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4018548:	d092e917 	ldw	r2,19364(gp)
 401854c:	d0d2ea17 	ldw	r3,19368(gp)
 4018550:	d112eb17 	ldw	r4,19372(gp)
 4018554:	200d883a 	mov	r6,r4
 4018558:	180b883a 	mov	r5,r3
 401855c:	1009883a 	mov	r4,r2
 4018560:	4008cc00 	call	4008cc0 <main>
 4018564:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4018568:	01000044 	movi	r4,1
 401856c:	4017e780 	call	4017e78 <close>
  exit (result);
 4018570:	e13fff17 	ldw	r4,-4(fp)
 4018574:	401a8680 	call	401a868 <exit>

04018578 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4018578:	defffe04 	addi	sp,sp,-8
 401857c:	df000115 	stw	fp,4(sp)
 4018580:	df000104 	addi	fp,sp,4
 4018584:	e13fff15 	stw	r4,-4(fp)
}
 4018588:	0001883a 	nop
 401858c:	e037883a 	mov	sp,fp
 4018590:	df000017 	ldw	fp,0(sp)
 4018594:	dec00104 	addi	sp,sp,4
 4018598:	f800283a 	ret

0401859c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 401859c:	defffe04 	addi	sp,sp,-8
 40185a0:	df000115 	stw	fp,4(sp)
 40185a4:	df000104 	addi	fp,sp,4
 40185a8:	e13fff15 	stw	r4,-4(fp)
}
 40185ac:	0001883a 	nop
 40185b0:	e037883a 	mov	sp,fp
 40185b4:	df000017 	ldw	fp,0(sp)
 40185b8:	dec00104 	addi	sp,sp,4
 40185bc:	f800283a 	ret

040185c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40185c0:	defffe04 	addi	sp,sp,-8
 40185c4:	dfc00115 	stw	ra,4(sp)
 40185c8:	df000015 	stw	fp,0(sp)
 40185cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40185d0:	d0a02617 	ldw	r2,-32616(gp)
 40185d4:	10000326 	beq	r2,zero,40185e4 <alt_get_errno+0x24>
 40185d8:	d0a02617 	ldw	r2,-32616(gp)
 40185dc:	103ee83a 	callr	r2
 40185e0:	00000106 	br	40185e8 <alt_get_errno+0x28>
 40185e4:	d092e504 	addi	r2,gp,19348
}
 40185e8:	e037883a 	mov	sp,fp
 40185ec:	dfc00117 	ldw	ra,4(sp)
 40185f0:	df000017 	ldw	fp,0(sp)
 40185f4:	dec00204 	addi	sp,sp,8
 40185f8:	f800283a 	ret

040185fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40185fc:	defff904 	addi	sp,sp,-28
 4018600:	dfc00615 	stw	ra,24(sp)
 4018604:	df000515 	stw	fp,20(sp)
 4018608:	df000504 	addi	fp,sp,20
 401860c:	e13ffd15 	stw	r4,-12(fp)
 4018610:	e17ffe15 	stw	r5,-8(fp)
 4018614:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4018618:	e0bffd17 	ldw	r2,-12(fp)
 401861c:	10000616 	blt	r2,zero,4018638 <read+0x3c>
 4018620:	e0bffd17 	ldw	r2,-12(fp)
 4018624:	10c00324 	muli	r3,r2,12
 4018628:	008100b4 	movhi	r2,1026
 401862c:	109f5104 	addi	r2,r2,32068
 4018630:	1885883a 	add	r2,r3,r2
 4018634:	00000106 	br	401863c <read+0x40>
 4018638:	0005883a 	mov	r2,zero
 401863c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4018640:	e0bffb17 	ldw	r2,-20(fp)
 4018644:	10002226 	beq	r2,zero,40186d0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4018648:	e0bffb17 	ldw	r2,-20(fp)
 401864c:	10800217 	ldw	r2,8(r2)
 4018650:	108000cc 	andi	r2,r2,3
 4018654:	10800060 	cmpeqi	r2,r2,1
 4018658:	1000181e 	bne	r2,zero,40186bc <read+0xc0>
        (fd->dev->read))
 401865c:	e0bffb17 	ldw	r2,-20(fp)
 4018660:	10800017 	ldw	r2,0(r2)
 4018664:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4018668:	10001426 	beq	r2,zero,40186bc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401866c:	e0bffb17 	ldw	r2,-20(fp)
 4018670:	10800017 	ldw	r2,0(r2)
 4018674:	10800517 	ldw	r2,20(r2)
 4018678:	e0ffff17 	ldw	r3,-4(fp)
 401867c:	180d883a 	mov	r6,r3
 4018680:	e17ffe17 	ldw	r5,-8(fp)
 4018684:	e13ffb17 	ldw	r4,-20(fp)
 4018688:	103ee83a 	callr	r2
 401868c:	e0bffc15 	stw	r2,-16(fp)
 4018690:	e0bffc17 	ldw	r2,-16(fp)
 4018694:	1000070e 	bge	r2,zero,40186b4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4018698:	40185c00 	call	40185c0 <alt_get_errno>
 401869c:	1007883a 	mov	r3,r2
 40186a0:	e0bffc17 	ldw	r2,-16(fp)
 40186a4:	0085c83a 	sub	r2,zero,r2
 40186a8:	18800015 	stw	r2,0(r3)
          return -1;
 40186ac:	00bfffc4 	movi	r2,-1
 40186b0:	00000c06 	br	40186e4 <read+0xe8>
        }
        return rval;
 40186b4:	e0bffc17 	ldw	r2,-16(fp)
 40186b8:	00000a06 	br	40186e4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40186bc:	40185c00 	call	40185c0 <alt_get_errno>
 40186c0:	1007883a 	mov	r3,r2
 40186c4:	00800344 	movi	r2,13
 40186c8:	18800015 	stw	r2,0(r3)
 40186cc:	00000406 	br	40186e0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40186d0:	40185c00 	call	40185c0 <alt_get_errno>
 40186d4:	1007883a 	mov	r3,r2
 40186d8:	00801444 	movi	r2,81
 40186dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40186e0:	00bfffc4 	movi	r2,-1
}
 40186e4:	e037883a 	mov	sp,fp
 40186e8:	dfc00117 	ldw	ra,4(sp)
 40186ec:	df000017 	ldw	fp,0(sp)
 40186f0:	dec00204 	addi	sp,sp,8
 40186f4:	f800283a 	ret

040186f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40186f8:	defffe04 	addi	sp,sp,-8
 40186fc:	df000115 	stw	fp,4(sp)
 4018700:	df000104 	addi	fp,sp,4
 4018704:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4018708:	e0bfff17 	ldw	r2,-4(fp)
 401870c:	108000d0 	cmplti	r2,r2,3
 4018710:	10000d1e 	bne	r2,zero,4018748 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4018714:	008100b4 	movhi	r2,1026
 4018718:	109f5104 	addi	r2,r2,32068
 401871c:	e0ffff17 	ldw	r3,-4(fp)
 4018720:	18c00324 	muli	r3,r3,12
 4018724:	10c5883a 	add	r2,r2,r3
 4018728:	10800204 	addi	r2,r2,8
 401872c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4018730:	008100b4 	movhi	r2,1026
 4018734:	109f5104 	addi	r2,r2,32068
 4018738:	e0ffff17 	ldw	r3,-4(fp)
 401873c:	18c00324 	muli	r3,r3,12
 4018740:	10c5883a 	add	r2,r2,r3
 4018744:	10000015 	stw	zero,0(r2)
  }
}
 4018748:	0001883a 	nop
 401874c:	e037883a 	mov	sp,fp
 4018750:	df000017 	ldw	fp,0(sp)
 4018754:	dec00104 	addi	sp,sp,4
 4018758:	f800283a 	ret

0401875c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401875c:	defff904 	addi	sp,sp,-28
 4018760:	df000615 	stw	fp,24(sp)
 4018764:	df000604 	addi	fp,sp,24
 4018768:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401876c:	0005303a 	rdctl	r2,status
 4018770:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018774:	e0fffe17 	ldw	r3,-8(fp)
 4018778:	00bfff84 	movi	r2,-2
 401877c:	1884703a 	and	r2,r3,r2
 4018780:	1001703a 	wrctl	status,r2
  
  return context;
 4018784:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4018788:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 401878c:	d0a02717 	ldw	r2,-32612(gp)
 4018790:	10c000c4 	addi	r3,r2,3
 4018794:	00bfff04 	movi	r2,-4
 4018798:	1884703a 	and	r2,r3,r2
 401879c:	d0a02715 	stw	r2,-32612(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40187a0:	d0e02717 	ldw	r3,-32612(gp)
 40187a4:	e0bfff17 	ldw	r2,-4(fp)
 40187a8:	1887883a 	add	r3,r3,r2
 40187ac:	00820034 	movhi	r2,2048
 40187b0:	10800004 	addi	r2,r2,0
 40187b4:	10c0062e 	bgeu	r2,r3,40187d0 <sbrk+0x74>
 40187b8:	e0bffb17 	ldw	r2,-20(fp)
 40187bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40187c0:	e0bffa17 	ldw	r2,-24(fp)
 40187c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 40187c8:	00bfffc4 	movi	r2,-1
 40187cc:	00000b06 	br	40187fc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 40187d0:	d0a02717 	ldw	r2,-32612(gp)
 40187d4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 40187d8:	d0e02717 	ldw	r3,-32612(gp)
 40187dc:	e0bfff17 	ldw	r2,-4(fp)
 40187e0:	1885883a 	add	r2,r3,r2
 40187e4:	d0a02715 	stw	r2,-32612(gp)
 40187e8:	e0bffb17 	ldw	r2,-20(fp)
 40187ec:	e0bffc15 	stw	r2,-16(fp)
 40187f0:	e0bffc17 	ldw	r2,-16(fp)
 40187f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 40187f8:	e0bffd17 	ldw	r2,-12(fp)
} 
 40187fc:	e037883a 	mov	sp,fp
 4018800:	df000017 	ldw	fp,0(sp)
 4018804:	dec00104 	addi	sp,sp,4
 4018808:	f800283a 	ret

0401880c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401880c:	defffe04 	addi	sp,sp,-8
 4018810:	dfc00115 	stw	ra,4(sp)
 4018814:	df000015 	stw	fp,0(sp)
 4018818:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401881c:	d0a02617 	ldw	r2,-32616(gp)
 4018820:	10000326 	beq	r2,zero,4018830 <alt_get_errno+0x24>
 4018824:	d0a02617 	ldw	r2,-32616(gp)
 4018828:	103ee83a 	callr	r2
 401882c:	00000106 	br	4018834 <alt_get_errno+0x28>
 4018830:	d092e504 	addi	r2,gp,19348
}
 4018834:	e037883a 	mov	sp,fp
 4018838:	dfc00117 	ldw	ra,4(sp)
 401883c:	df000017 	ldw	fp,0(sp)
 4018840:	dec00204 	addi	sp,sp,8
 4018844:	f800283a 	ret

04018848 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 4018848:	defffc04 	addi	sp,sp,-16
 401884c:	dfc00315 	stw	ra,12(sp)
 4018850:	df000215 	stw	fp,8(sp)
 4018854:	df000204 	addi	fp,sp,8
 4018858:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401885c:	d092ee17 	ldw	r2,19384(gp)
  clock_t ticks = alt_nticks(); 
 4018860:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4018864:	d092ed17 	ldw	r2,19380(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 4018868:	1000061e 	bne	r2,zero,4018884 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 401886c:	401880c0 	call	401880c <alt_get_errno>
 4018870:	1007883a 	mov	r3,r2
 4018874:	00801604 	movi	r2,88
 4018878:	18800015 	stw	r2,0(r3)
    return 0;
 401887c:	0005883a 	mov	r2,zero
 4018880:	00000a06 	br	40188ac <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 4018884:	e0bfff17 	ldw	r2,-4(fp)
 4018888:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 401888c:	e0bfff17 	ldw	r2,-4(fp)
 4018890:	e0fffe17 	ldw	r3,-8(fp)
 4018894:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 4018898:	e0bfff17 	ldw	r2,-4(fp)
 401889c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 40188a0:	e0bfff17 	ldw	r2,-4(fp)
 40188a4:	10000315 	stw	zero,12(r2)

  return ticks;
 40188a8:	e0bffe17 	ldw	r2,-8(fp)
}
 40188ac:	e037883a 	mov	sp,fp
 40188b0:	dfc00117 	ldw	ra,4(sp)
 40188b4:	df000017 	ldw	fp,0(sp)
 40188b8:	dec00204 	addi	sp,sp,8
 40188bc:	f800283a 	ret

040188c0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 40188c0:	defffd04 	addi	sp,sp,-12
 40188c4:	dfc00215 	stw	ra,8(sp)
 40188c8:	df000115 	stw	fp,4(sp)
 40188cc:	df000104 	addi	fp,sp,4
 40188d0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 40188d4:	e13fff17 	ldw	r4,-4(fp)
 40188d8:	401997c0 	call	401997c <alt_busy_sleep>
}
 40188dc:	e037883a 	mov	sp,fp
 40188e0:	dfc00117 	ldw	ra,4(sp)
 40188e4:	df000017 	ldw	fp,0(sp)
 40188e8:	dec00204 	addi	sp,sp,8
 40188ec:	f800283a 	ret

040188f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40188f0:	defffe04 	addi	sp,sp,-8
 40188f4:	dfc00115 	stw	ra,4(sp)
 40188f8:	df000015 	stw	fp,0(sp)
 40188fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4018900:	d0a02617 	ldw	r2,-32616(gp)
 4018904:	10000326 	beq	r2,zero,4018914 <alt_get_errno+0x24>
 4018908:	d0a02617 	ldw	r2,-32616(gp)
 401890c:	103ee83a 	callr	r2
 4018910:	00000106 	br	4018918 <alt_get_errno+0x28>
 4018914:	d092e504 	addi	r2,gp,19348
}
 4018918:	e037883a 	mov	sp,fp
 401891c:	dfc00117 	ldw	ra,4(sp)
 4018920:	df000017 	ldw	fp,0(sp)
 4018924:	dec00204 	addi	sp,sp,8
 4018928:	f800283a 	ret

0401892c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401892c:	defff904 	addi	sp,sp,-28
 4018930:	dfc00615 	stw	ra,24(sp)
 4018934:	df000515 	stw	fp,20(sp)
 4018938:	df000504 	addi	fp,sp,20
 401893c:	e13ffd15 	stw	r4,-12(fp)
 4018940:	e17ffe15 	stw	r5,-8(fp)
 4018944:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4018948:	e0bffd17 	ldw	r2,-12(fp)
 401894c:	10000616 	blt	r2,zero,4018968 <write+0x3c>
 4018950:	e0bffd17 	ldw	r2,-12(fp)
 4018954:	10c00324 	muli	r3,r2,12
 4018958:	008100b4 	movhi	r2,1026
 401895c:	109f5104 	addi	r2,r2,32068
 4018960:	1885883a 	add	r2,r3,r2
 4018964:	00000106 	br	401896c <write+0x40>
 4018968:	0005883a 	mov	r2,zero
 401896c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4018970:	e0bffb17 	ldw	r2,-20(fp)
 4018974:	10002126 	beq	r2,zero,40189fc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4018978:	e0bffb17 	ldw	r2,-20(fp)
 401897c:	10800217 	ldw	r2,8(r2)
 4018980:	108000cc 	andi	r2,r2,3
 4018984:	10001826 	beq	r2,zero,40189e8 <write+0xbc>
 4018988:	e0bffb17 	ldw	r2,-20(fp)
 401898c:	10800017 	ldw	r2,0(r2)
 4018990:	10800617 	ldw	r2,24(r2)
 4018994:	10001426 	beq	r2,zero,40189e8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4018998:	e0bffb17 	ldw	r2,-20(fp)
 401899c:	10800017 	ldw	r2,0(r2)
 40189a0:	10800617 	ldw	r2,24(r2)
 40189a4:	e0ffff17 	ldw	r3,-4(fp)
 40189a8:	180d883a 	mov	r6,r3
 40189ac:	e17ffe17 	ldw	r5,-8(fp)
 40189b0:	e13ffb17 	ldw	r4,-20(fp)
 40189b4:	103ee83a 	callr	r2
 40189b8:	e0bffc15 	stw	r2,-16(fp)
 40189bc:	e0bffc17 	ldw	r2,-16(fp)
 40189c0:	1000070e 	bge	r2,zero,40189e0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 40189c4:	40188f00 	call	40188f0 <alt_get_errno>
 40189c8:	1007883a 	mov	r3,r2
 40189cc:	e0bffc17 	ldw	r2,-16(fp)
 40189d0:	0085c83a 	sub	r2,zero,r2
 40189d4:	18800015 	stw	r2,0(r3)
        return -1;
 40189d8:	00bfffc4 	movi	r2,-1
 40189dc:	00000c06 	br	4018a10 <write+0xe4>
      }
      return rval;
 40189e0:	e0bffc17 	ldw	r2,-16(fp)
 40189e4:	00000a06 	br	4018a10 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 40189e8:	40188f00 	call	40188f0 <alt_get_errno>
 40189ec:	1007883a 	mov	r3,r2
 40189f0:	00800344 	movi	r2,13
 40189f4:	18800015 	stw	r2,0(r3)
 40189f8:	00000406 	br	4018a0c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40189fc:	40188f00 	call	40188f0 <alt_get_errno>
 4018a00:	1007883a 	mov	r3,r2
 4018a04:	00801444 	movi	r2,81
 4018a08:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4018a0c:	00bfffc4 	movi	r2,-1
}
 4018a10:	e037883a 	mov	sp,fp
 4018a14:	dfc00117 	ldw	ra,4(sp)
 4018a18:	df000017 	ldw	fp,0(sp)
 4018a1c:	dec00204 	addi	sp,sp,8
 4018a20:	f800283a 	ret

04018a24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4018a24:	defffd04 	addi	sp,sp,-12
 4018a28:	dfc00215 	stw	ra,8(sp)
 4018a2c:	df000115 	stw	fp,4(sp)
 4018a30:	df000104 	addi	fp,sp,4
 4018a34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4018a38:	d1602304 	addi	r5,gp,-32628
 4018a3c:	e13fff17 	ldw	r4,-4(fp)
 4018a40:	4019b580 	call	4019b58 <alt_dev_llist_insert>
}
 4018a44:	e037883a 	mov	sp,fp
 4018a48:	dfc00117 	ldw	ra,4(sp)
 4018a4c:	df000017 	ldw	fp,0(sp)
 4018a50:	dec00204 	addi	sp,sp,8
 4018a54:	f800283a 	ret

04018a58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4018a58:	defffd04 	addi	sp,sp,-12
 4018a5c:	dfc00215 	stw	ra,8(sp)
 4018a60:	df000115 	stw	fp,4(sp)
 4018a64:	df000104 	addi	fp,sp,4
 4018a68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4018a6c:	401a4c80 	call	401a4c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4018a70:	00800044 	movi	r2,1
 4018a74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4018a78:	0001883a 	nop
 4018a7c:	e037883a 	mov	sp,fp
 4018a80:	dfc00117 	ldw	ra,4(sp)
 4018a84:	df000017 	ldw	fp,0(sp)
 4018a88:	dec00204 	addi	sp,sp,8
 4018a8c:	f800283a 	ret

04018a90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4018a90:	defffe04 	addi	sp,sp,-8
 4018a94:	dfc00115 	stw	ra,4(sp)
 4018a98:	df000015 	stw	fp,0(sp)
 4018a9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4018aa0:	01c0fa04 	movi	r7,1000
 4018aa4:	01800084 	movi	r6,2
 4018aa8:	000b883a 	mov	r5,zero
 4018aac:	01020034 	movhi	r4,2048
 4018ab0:	21141004 	addi	r4,r4,20544
 4018ab4:	40197d40 	call	40197d4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4018ab8:	01800044 	movi	r6,1
 4018abc:	000b883a 	mov	r5,zero
 4018ac0:	010100b4 	movhi	r4,1026
 4018ac4:	211fbb04 	addi	r4,r4,32492
 4018ac8:	4018c5c0 	call	4018c5c <altera_avalon_jtag_uart_init>
 4018acc:	010100b4 	movhi	r4,1026
 4018ad0:	211fb104 	addi	r4,r4,32452
 4018ad4:	4018a240 	call	4018a24 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 4018ad8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4018adc:	0001883a 	nop
}
 4018ae0:	0001883a 	nop
 4018ae4:	e037883a 	mov	sp,fp
 4018ae8:	dfc00117 	ldw	ra,4(sp)
 4018aec:	df000017 	ldw	fp,0(sp)
 4018af0:	dec00204 	addi	sp,sp,8
 4018af4:	f800283a 	ret

04018af8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4018af8:	defffa04 	addi	sp,sp,-24
 4018afc:	dfc00515 	stw	ra,20(sp)
 4018b00:	df000415 	stw	fp,16(sp)
 4018b04:	df000404 	addi	fp,sp,16
 4018b08:	e13ffd15 	stw	r4,-12(fp)
 4018b0c:	e17ffe15 	stw	r5,-8(fp)
 4018b10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4018b14:	e0bffd17 	ldw	r2,-12(fp)
 4018b18:	10800017 	ldw	r2,0(r2)
 4018b1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4018b20:	e0bffc17 	ldw	r2,-16(fp)
 4018b24:	10c00a04 	addi	r3,r2,40
 4018b28:	e0bffd17 	ldw	r2,-12(fp)
 4018b2c:	10800217 	ldw	r2,8(r2)
 4018b30:	100f883a 	mov	r7,r2
 4018b34:	e1bfff17 	ldw	r6,-4(fp)
 4018b38:	e17ffe17 	ldw	r5,-8(fp)
 4018b3c:	1809883a 	mov	r4,r3
 4018b40:	40191200 	call	4019120 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4018b44:	e037883a 	mov	sp,fp
 4018b48:	dfc00117 	ldw	ra,4(sp)
 4018b4c:	df000017 	ldw	fp,0(sp)
 4018b50:	dec00204 	addi	sp,sp,8
 4018b54:	f800283a 	ret

04018b58 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4018b58:	defffa04 	addi	sp,sp,-24
 4018b5c:	dfc00515 	stw	ra,20(sp)
 4018b60:	df000415 	stw	fp,16(sp)
 4018b64:	df000404 	addi	fp,sp,16
 4018b68:	e13ffd15 	stw	r4,-12(fp)
 4018b6c:	e17ffe15 	stw	r5,-8(fp)
 4018b70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4018b74:	e0bffd17 	ldw	r2,-12(fp)
 4018b78:	10800017 	ldw	r2,0(r2)
 4018b7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4018b80:	e0bffc17 	ldw	r2,-16(fp)
 4018b84:	10c00a04 	addi	r3,r2,40
 4018b88:	e0bffd17 	ldw	r2,-12(fp)
 4018b8c:	10800217 	ldw	r2,8(r2)
 4018b90:	100f883a 	mov	r7,r2
 4018b94:	e1bfff17 	ldw	r6,-4(fp)
 4018b98:	e17ffe17 	ldw	r5,-8(fp)
 4018b9c:	1809883a 	mov	r4,r3
 4018ba0:	401933c0 	call	401933c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4018ba4:	e037883a 	mov	sp,fp
 4018ba8:	dfc00117 	ldw	ra,4(sp)
 4018bac:	df000017 	ldw	fp,0(sp)
 4018bb0:	dec00204 	addi	sp,sp,8
 4018bb4:	f800283a 	ret

04018bb8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4018bb8:	defffc04 	addi	sp,sp,-16
 4018bbc:	dfc00315 	stw	ra,12(sp)
 4018bc0:	df000215 	stw	fp,8(sp)
 4018bc4:	df000204 	addi	fp,sp,8
 4018bc8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4018bcc:	e0bfff17 	ldw	r2,-4(fp)
 4018bd0:	10800017 	ldw	r2,0(r2)
 4018bd4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4018bd8:	e0bffe17 	ldw	r2,-8(fp)
 4018bdc:	10c00a04 	addi	r3,r2,40
 4018be0:	e0bfff17 	ldw	r2,-4(fp)
 4018be4:	10800217 	ldw	r2,8(r2)
 4018be8:	100b883a 	mov	r5,r2
 4018bec:	1809883a 	mov	r4,r3
 4018bf0:	4018fc80 	call	4018fc8 <altera_avalon_jtag_uart_close>
}
 4018bf4:	e037883a 	mov	sp,fp
 4018bf8:	dfc00117 	ldw	ra,4(sp)
 4018bfc:	df000017 	ldw	fp,0(sp)
 4018c00:	dec00204 	addi	sp,sp,8
 4018c04:	f800283a 	ret

04018c08 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4018c08:	defffa04 	addi	sp,sp,-24
 4018c0c:	dfc00515 	stw	ra,20(sp)
 4018c10:	df000415 	stw	fp,16(sp)
 4018c14:	df000404 	addi	fp,sp,16
 4018c18:	e13ffd15 	stw	r4,-12(fp)
 4018c1c:	e17ffe15 	stw	r5,-8(fp)
 4018c20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4018c24:	e0bffd17 	ldw	r2,-12(fp)
 4018c28:	10800017 	ldw	r2,0(r2)
 4018c2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4018c30:	e0bffc17 	ldw	r2,-16(fp)
 4018c34:	10800a04 	addi	r2,r2,40
 4018c38:	e1bfff17 	ldw	r6,-4(fp)
 4018c3c:	e17ffe17 	ldw	r5,-8(fp)
 4018c40:	1009883a 	mov	r4,r2
 4018c44:	40190300 	call	4019030 <altera_avalon_jtag_uart_ioctl>
}
 4018c48:	e037883a 	mov	sp,fp
 4018c4c:	dfc00117 	ldw	ra,4(sp)
 4018c50:	df000017 	ldw	fp,0(sp)
 4018c54:	dec00204 	addi	sp,sp,8
 4018c58:	f800283a 	ret

04018c5c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4018c5c:	defffa04 	addi	sp,sp,-24
 4018c60:	dfc00515 	stw	ra,20(sp)
 4018c64:	df000415 	stw	fp,16(sp)
 4018c68:	df000404 	addi	fp,sp,16
 4018c6c:	e13ffd15 	stw	r4,-12(fp)
 4018c70:	e17ffe15 	stw	r5,-8(fp)
 4018c74:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4018c78:	e0bffd17 	ldw	r2,-12(fp)
 4018c7c:	00c00044 	movi	r3,1
 4018c80:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4018c84:	e0bffd17 	ldw	r2,-12(fp)
 4018c88:	10800017 	ldw	r2,0(r2)
 4018c8c:	10800104 	addi	r2,r2,4
 4018c90:	1007883a 	mov	r3,r2
 4018c94:	e0bffd17 	ldw	r2,-12(fp)
 4018c98:	10800817 	ldw	r2,32(r2)
 4018c9c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4018ca0:	e0bffe17 	ldw	r2,-8(fp)
 4018ca4:	e0ffff17 	ldw	r3,-4(fp)
 4018ca8:	d8000015 	stw	zero,0(sp)
 4018cac:	e1fffd17 	ldw	r7,-12(fp)
 4018cb0:	018100b4 	movhi	r6,1026
 4018cb4:	31a34704 	addi	r6,r6,-29412
 4018cb8:	180b883a 	mov	r5,r3
 4018cbc:	1009883a 	mov	r4,r2
 4018cc0:	4019cf00 	call	4019cf0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4018cc4:	e0bffd17 	ldw	r2,-12(fp)
 4018cc8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4018ccc:	e0bffd17 	ldw	r2,-12(fp)
 4018cd0:	10800204 	addi	r2,r2,8
 4018cd4:	d0d2ed17 	ldw	r3,19380(gp)
 4018cd8:	e1fffd17 	ldw	r7,-12(fp)
 4018cdc:	018100b4 	movhi	r6,1026
 4018ce0:	31a3ca04 	addi	r6,r6,-28888
 4018ce4:	180b883a 	mov	r5,r3
 4018ce8:	1009883a 	mov	r4,r2
 4018cec:	40198500 	call	4019850 <alt_alarm_start>
 4018cf0:	1000040e 	bge	r2,zero,4018d04 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4018cf4:	e0fffd17 	ldw	r3,-12(fp)
 4018cf8:	00a00034 	movhi	r2,32768
 4018cfc:	10bfffc4 	addi	r2,r2,-1
 4018d00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4018d04:	0001883a 	nop
 4018d08:	e037883a 	mov	sp,fp
 4018d0c:	dfc00117 	ldw	ra,4(sp)
 4018d10:	df000017 	ldw	fp,0(sp)
 4018d14:	dec00204 	addi	sp,sp,8
 4018d18:	f800283a 	ret

04018d1c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4018d1c:	defff804 	addi	sp,sp,-32
 4018d20:	df000715 	stw	fp,28(sp)
 4018d24:	df000704 	addi	fp,sp,28
 4018d28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4018d2c:	e0bfff17 	ldw	r2,-4(fp)
 4018d30:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4018d34:	e0bffb17 	ldw	r2,-20(fp)
 4018d38:	10800017 	ldw	r2,0(r2)
 4018d3c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4018d40:	e0bffc17 	ldw	r2,-16(fp)
 4018d44:	10800104 	addi	r2,r2,4
 4018d48:	10800037 	ldwio	r2,0(r2)
 4018d4c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4018d50:	e0bffd17 	ldw	r2,-12(fp)
 4018d54:	1080c00c 	andi	r2,r2,768
 4018d58:	10006d26 	beq	r2,zero,4018f10 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4018d5c:	e0bffd17 	ldw	r2,-12(fp)
 4018d60:	1080400c 	andi	r2,r2,256
 4018d64:	10003526 	beq	r2,zero,4018e3c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4018d68:	00800074 	movhi	r2,1
 4018d6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4018d70:	e0bffb17 	ldw	r2,-20(fp)
 4018d74:	10800a17 	ldw	r2,40(r2)
 4018d78:	10800044 	addi	r2,r2,1
 4018d7c:	1081ffcc 	andi	r2,r2,2047
 4018d80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4018d84:	e0bffb17 	ldw	r2,-20(fp)
 4018d88:	10c00b17 	ldw	r3,44(r2)
 4018d8c:	e0bffe17 	ldw	r2,-8(fp)
 4018d90:	18801526 	beq	r3,r2,4018de8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4018d94:	e0bffc17 	ldw	r2,-16(fp)
 4018d98:	10800037 	ldwio	r2,0(r2)
 4018d9c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4018da0:	e0bff917 	ldw	r2,-28(fp)
 4018da4:	10a0000c 	andi	r2,r2,32768
 4018da8:	10001126 	beq	r2,zero,4018df0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4018dac:	e0bffb17 	ldw	r2,-20(fp)
 4018db0:	10800a17 	ldw	r2,40(r2)
 4018db4:	e0fff917 	ldw	r3,-28(fp)
 4018db8:	1809883a 	mov	r4,r3
 4018dbc:	e0fffb17 	ldw	r3,-20(fp)
 4018dc0:	1885883a 	add	r2,r3,r2
 4018dc4:	10800e04 	addi	r2,r2,56
 4018dc8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4018dcc:	e0bffb17 	ldw	r2,-20(fp)
 4018dd0:	10800a17 	ldw	r2,40(r2)
 4018dd4:	10800044 	addi	r2,r2,1
 4018dd8:	10c1ffcc 	andi	r3,r2,2047
 4018ddc:	e0bffb17 	ldw	r2,-20(fp)
 4018de0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4018de4:	003fe206 	br	4018d70 <__alt_data_end+0xfc018d70>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4018de8:	0001883a 	nop
 4018dec:	00000106 	br	4018df4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4018df0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4018df4:	e0bff917 	ldw	r2,-28(fp)
 4018df8:	10bfffec 	andhi	r2,r2,65535
 4018dfc:	10000f26 	beq	r2,zero,4018e3c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4018e00:	e0bffb17 	ldw	r2,-20(fp)
 4018e04:	10c00817 	ldw	r3,32(r2)
 4018e08:	00bfff84 	movi	r2,-2
 4018e0c:	1886703a 	and	r3,r3,r2
 4018e10:	e0bffb17 	ldw	r2,-20(fp)
 4018e14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4018e18:	e0bffc17 	ldw	r2,-16(fp)
 4018e1c:	10800104 	addi	r2,r2,4
 4018e20:	1007883a 	mov	r3,r2
 4018e24:	e0bffb17 	ldw	r2,-20(fp)
 4018e28:	10800817 	ldw	r2,32(r2)
 4018e2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4018e30:	e0bffc17 	ldw	r2,-16(fp)
 4018e34:	10800104 	addi	r2,r2,4
 4018e38:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4018e3c:	e0bffd17 	ldw	r2,-12(fp)
 4018e40:	1080800c 	andi	r2,r2,512
 4018e44:	103fbe26 	beq	r2,zero,4018d40 <__alt_data_end+0xfc018d40>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4018e48:	e0bffd17 	ldw	r2,-12(fp)
 4018e4c:	1004d43a 	srli	r2,r2,16
 4018e50:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4018e54:	00001406 	br	4018ea8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4018e58:	e0bffc17 	ldw	r2,-16(fp)
 4018e5c:	e0fffb17 	ldw	r3,-20(fp)
 4018e60:	18c00d17 	ldw	r3,52(r3)
 4018e64:	e13ffb17 	ldw	r4,-20(fp)
 4018e68:	20c7883a 	add	r3,r4,r3
 4018e6c:	18c20e04 	addi	r3,r3,2104
 4018e70:	18c00003 	ldbu	r3,0(r3)
 4018e74:	18c03fcc 	andi	r3,r3,255
 4018e78:	18c0201c 	xori	r3,r3,128
 4018e7c:	18ffe004 	addi	r3,r3,-128
 4018e80:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4018e84:	e0bffb17 	ldw	r2,-20(fp)
 4018e88:	10800d17 	ldw	r2,52(r2)
 4018e8c:	10800044 	addi	r2,r2,1
 4018e90:	10c1ffcc 	andi	r3,r2,2047
 4018e94:	e0bffb17 	ldw	r2,-20(fp)
 4018e98:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4018e9c:	e0bffa17 	ldw	r2,-24(fp)
 4018ea0:	10bfffc4 	addi	r2,r2,-1
 4018ea4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4018ea8:	e0bffa17 	ldw	r2,-24(fp)
 4018eac:	10000526 	beq	r2,zero,4018ec4 <altera_avalon_jtag_uart_irq+0x1a8>
 4018eb0:	e0bffb17 	ldw	r2,-20(fp)
 4018eb4:	10c00d17 	ldw	r3,52(r2)
 4018eb8:	e0bffb17 	ldw	r2,-20(fp)
 4018ebc:	10800c17 	ldw	r2,48(r2)
 4018ec0:	18bfe51e 	bne	r3,r2,4018e58 <__alt_data_end+0xfc018e58>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4018ec4:	e0bffa17 	ldw	r2,-24(fp)
 4018ec8:	103f9d26 	beq	r2,zero,4018d40 <__alt_data_end+0xfc018d40>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4018ecc:	e0bffb17 	ldw	r2,-20(fp)
 4018ed0:	10c00817 	ldw	r3,32(r2)
 4018ed4:	00bfff44 	movi	r2,-3
 4018ed8:	1886703a 	and	r3,r3,r2
 4018edc:	e0bffb17 	ldw	r2,-20(fp)
 4018ee0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4018ee4:	e0bffb17 	ldw	r2,-20(fp)
 4018ee8:	10800017 	ldw	r2,0(r2)
 4018eec:	10800104 	addi	r2,r2,4
 4018ef0:	1007883a 	mov	r3,r2
 4018ef4:	e0bffb17 	ldw	r2,-20(fp)
 4018ef8:	10800817 	ldw	r2,32(r2)
 4018efc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4018f00:	e0bffc17 	ldw	r2,-16(fp)
 4018f04:	10800104 	addi	r2,r2,4
 4018f08:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4018f0c:	003f8c06 	br	4018d40 <__alt_data_end+0xfc018d40>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4018f10:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4018f14:	0001883a 	nop
 4018f18:	e037883a 	mov	sp,fp
 4018f1c:	df000017 	ldw	fp,0(sp)
 4018f20:	dec00104 	addi	sp,sp,4
 4018f24:	f800283a 	ret

04018f28 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4018f28:	defff804 	addi	sp,sp,-32
 4018f2c:	df000715 	stw	fp,28(sp)
 4018f30:	df000704 	addi	fp,sp,28
 4018f34:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4018f38:	e0bffb17 	ldw	r2,-20(fp)
 4018f3c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4018f40:	e0bff917 	ldw	r2,-28(fp)
 4018f44:	10800017 	ldw	r2,0(r2)
 4018f48:	10800104 	addi	r2,r2,4
 4018f4c:	10800037 	ldwio	r2,0(r2)
 4018f50:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4018f54:	e0bffa17 	ldw	r2,-24(fp)
 4018f58:	1081000c 	andi	r2,r2,1024
 4018f5c:	10000b26 	beq	r2,zero,4018f8c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4018f60:	e0bff917 	ldw	r2,-28(fp)
 4018f64:	10800017 	ldw	r2,0(r2)
 4018f68:	10800104 	addi	r2,r2,4
 4018f6c:	1007883a 	mov	r3,r2
 4018f70:	e0bff917 	ldw	r2,-28(fp)
 4018f74:	10800817 	ldw	r2,32(r2)
 4018f78:	10810014 	ori	r2,r2,1024
 4018f7c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4018f80:	e0bff917 	ldw	r2,-28(fp)
 4018f84:	10000915 	stw	zero,36(r2)
 4018f88:	00000a06 	br	4018fb4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4018f8c:	e0bff917 	ldw	r2,-28(fp)
 4018f90:	10c00917 	ldw	r3,36(r2)
 4018f94:	00a00034 	movhi	r2,32768
 4018f98:	10bfff04 	addi	r2,r2,-4
 4018f9c:	10c00536 	bltu	r2,r3,4018fb4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4018fa0:	e0bff917 	ldw	r2,-28(fp)
 4018fa4:	10800917 	ldw	r2,36(r2)
 4018fa8:	10c00044 	addi	r3,r2,1
 4018fac:	e0bff917 	ldw	r2,-28(fp)
 4018fb0:	10c00915 	stw	r3,36(r2)
 4018fb4:	d092ed17 	ldw	r2,19380(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4018fb8:	e037883a 	mov	sp,fp
 4018fbc:	df000017 	ldw	fp,0(sp)
 4018fc0:	dec00104 	addi	sp,sp,4
 4018fc4:	f800283a 	ret

04018fc8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4018fc8:	defffd04 	addi	sp,sp,-12
 4018fcc:	df000215 	stw	fp,8(sp)
 4018fd0:	df000204 	addi	fp,sp,8
 4018fd4:	e13ffe15 	stw	r4,-8(fp)
 4018fd8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4018fdc:	00000506 	br	4018ff4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4018fe0:	e0bfff17 	ldw	r2,-4(fp)
 4018fe4:	1090000c 	andi	r2,r2,16384
 4018fe8:	10000226 	beq	r2,zero,4018ff4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4018fec:	00bffd44 	movi	r2,-11
 4018ff0:	00000b06 	br	4019020 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4018ff4:	e0bffe17 	ldw	r2,-8(fp)
 4018ff8:	10c00d17 	ldw	r3,52(r2)
 4018ffc:	e0bffe17 	ldw	r2,-8(fp)
 4019000:	10800c17 	ldw	r2,48(r2)
 4019004:	18800526 	beq	r3,r2,401901c <altera_avalon_jtag_uart_close+0x54>
 4019008:	e0bffe17 	ldw	r2,-8(fp)
 401900c:	10c00917 	ldw	r3,36(r2)
 4019010:	e0bffe17 	ldw	r2,-8(fp)
 4019014:	10800117 	ldw	r2,4(r2)
 4019018:	18bff136 	bltu	r3,r2,4018fe0 <__alt_data_end+0xfc018fe0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401901c:	0005883a 	mov	r2,zero
}
 4019020:	e037883a 	mov	sp,fp
 4019024:	df000017 	ldw	fp,0(sp)
 4019028:	dec00104 	addi	sp,sp,4
 401902c:	f800283a 	ret

04019030 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4019030:	defffa04 	addi	sp,sp,-24
 4019034:	df000515 	stw	fp,20(sp)
 4019038:	df000504 	addi	fp,sp,20
 401903c:	e13ffd15 	stw	r4,-12(fp)
 4019040:	e17ffe15 	stw	r5,-8(fp)
 4019044:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4019048:	00bff9c4 	movi	r2,-25
 401904c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4019050:	e0bffe17 	ldw	r2,-8(fp)
 4019054:	10da8060 	cmpeqi	r3,r2,27137
 4019058:	1800031e 	bne	r3,zero,4019068 <altera_avalon_jtag_uart_ioctl+0x38>
 401905c:	109a80a0 	cmpeqi	r2,r2,27138
 4019060:	1000181e 	bne	r2,zero,40190c4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4019064:	00002906 	br	401910c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4019068:	e0bffd17 	ldw	r2,-12(fp)
 401906c:	10c00117 	ldw	r3,4(r2)
 4019070:	00a00034 	movhi	r2,32768
 4019074:	10bfffc4 	addi	r2,r2,-1
 4019078:	18802126 	beq	r3,r2,4019100 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401907c:	e0bfff17 	ldw	r2,-4(fp)
 4019080:	10800017 	ldw	r2,0(r2)
 4019084:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4019088:	e0bffc17 	ldw	r2,-16(fp)
 401908c:	10800090 	cmplti	r2,r2,2
 4019090:	1000061e 	bne	r2,zero,40190ac <altera_avalon_jtag_uart_ioctl+0x7c>
 4019094:	e0fffc17 	ldw	r3,-16(fp)
 4019098:	00a00034 	movhi	r2,32768
 401909c:	10bfffc4 	addi	r2,r2,-1
 40190a0:	18800226 	beq	r3,r2,40190ac <altera_avalon_jtag_uart_ioctl+0x7c>
 40190a4:	e0bffc17 	ldw	r2,-16(fp)
 40190a8:	00000206 	br	40190b4 <altera_avalon_jtag_uart_ioctl+0x84>
 40190ac:	00a00034 	movhi	r2,32768
 40190b0:	10bfff84 	addi	r2,r2,-2
 40190b4:	e0fffd17 	ldw	r3,-12(fp)
 40190b8:	18800115 	stw	r2,4(r3)
      rc = 0;
 40190bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40190c0:	00000f06 	br	4019100 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40190c4:	e0bffd17 	ldw	r2,-12(fp)
 40190c8:	10c00117 	ldw	r3,4(r2)
 40190cc:	00a00034 	movhi	r2,32768
 40190d0:	10bfffc4 	addi	r2,r2,-1
 40190d4:	18800c26 	beq	r3,r2,4019108 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40190d8:	e0bffd17 	ldw	r2,-12(fp)
 40190dc:	10c00917 	ldw	r3,36(r2)
 40190e0:	e0bffd17 	ldw	r2,-12(fp)
 40190e4:	10800117 	ldw	r2,4(r2)
 40190e8:	1885803a 	cmpltu	r2,r3,r2
 40190ec:	10c03fcc 	andi	r3,r2,255
 40190f0:	e0bfff17 	ldw	r2,-4(fp)
 40190f4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40190f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40190fc:	00000206 	br	4019108 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4019100:	0001883a 	nop
 4019104:	00000106 	br	401910c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4019108:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401910c:	e0bffb17 	ldw	r2,-20(fp)
}
 4019110:	e037883a 	mov	sp,fp
 4019114:	df000017 	ldw	fp,0(sp)
 4019118:	dec00104 	addi	sp,sp,4
 401911c:	f800283a 	ret

04019120 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4019120:	defff304 	addi	sp,sp,-52
 4019124:	dfc00c15 	stw	ra,48(sp)
 4019128:	df000b15 	stw	fp,44(sp)
 401912c:	df000b04 	addi	fp,sp,44
 4019130:	e13ffc15 	stw	r4,-16(fp)
 4019134:	e17ffd15 	stw	r5,-12(fp)
 4019138:	e1bffe15 	stw	r6,-8(fp)
 401913c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4019140:	e0bffd17 	ldw	r2,-12(fp)
 4019144:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4019148:	00004706 	br	4019268 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401914c:	e0bffc17 	ldw	r2,-16(fp)
 4019150:	10800a17 	ldw	r2,40(r2)
 4019154:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4019158:	e0bffc17 	ldw	r2,-16(fp)
 401915c:	10800b17 	ldw	r2,44(r2)
 4019160:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4019164:	e0fff717 	ldw	r3,-36(fp)
 4019168:	e0bff817 	ldw	r2,-32(fp)
 401916c:	18800536 	bltu	r3,r2,4019184 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4019170:	e0fff717 	ldw	r3,-36(fp)
 4019174:	e0bff817 	ldw	r2,-32(fp)
 4019178:	1885c83a 	sub	r2,r3,r2
 401917c:	e0bff615 	stw	r2,-40(fp)
 4019180:	00000406 	br	4019194 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4019184:	00c20004 	movi	r3,2048
 4019188:	e0bff817 	ldw	r2,-32(fp)
 401918c:	1885c83a 	sub	r2,r3,r2
 4019190:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4019194:	e0bff617 	ldw	r2,-40(fp)
 4019198:	10001e26 	beq	r2,zero,4019214 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401919c:	e0fffe17 	ldw	r3,-8(fp)
 40191a0:	e0bff617 	ldw	r2,-40(fp)
 40191a4:	1880022e 	bgeu	r3,r2,40191b0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40191a8:	e0bffe17 	ldw	r2,-8(fp)
 40191ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40191b0:	e0bffc17 	ldw	r2,-16(fp)
 40191b4:	10c00e04 	addi	r3,r2,56
 40191b8:	e0bff817 	ldw	r2,-32(fp)
 40191bc:	1885883a 	add	r2,r3,r2
 40191c0:	e1bff617 	ldw	r6,-40(fp)
 40191c4:	100b883a 	mov	r5,r2
 40191c8:	e13ff517 	ldw	r4,-44(fp)
 40191cc:	400bbd00 	call	400bbd0 <memcpy>
      ptr   += n;
 40191d0:	e0fff517 	ldw	r3,-44(fp)
 40191d4:	e0bff617 	ldw	r2,-40(fp)
 40191d8:	1885883a 	add	r2,r3,r2
 40191dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40191e0:	e0fffe17 	ldw	r3,-8(fp)
 40191e4:	e0bff617 	ldw	r2,-40(fp)
 40191e8:	1885c83a 	sub	r2,r3,r2
 40191ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40191f0:	e0fff817 	ldw	r3,-32(fp)
 40191f4:	e0bff617 	ldw	r2,-40(fp)
 40191f8:	1885883a 	add	r2,r3,r2
 40191fc:	10c1ffcc 	andi	r3,r2,2047
 4019200:	e0bffc17 	ldw	r2,-16(fp)
 4019204:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4019208:	e0bffe17 	ldw	r2,-8(fp)
 401920c:	00bfcf16 	blt	zero,r2,401914c <__alt_data_end+0xfc01914c>
 4019210:	00000106 	br	4019218 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4019214:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4019218:	e0fff517 	ldw	r3,-44(fp)
 401921c:	e0bffd17 	ldw	r2,-12(fp)
 4019220:	1880141e 	bne	r3,r2,4019274 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4019224:	e0bfff17 	ldw	r2,-4(fp)
 4019228:	1090000c 	andi	r2,r2,16384
 401922c:	1000131e 	bne	r2,zero,401927c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4019230:	0001883a 	nop
 4019234:	e0bffc17 	ldw	r2,-16(fp)
 4019238:	10c00a17 	ldw	r3,40(r2)
 401923c:	e0bff717 	ldw	r2,-36(fp)
 4019240:	1880051e 	bne	r3,r2,4019258 <altera_avalon_jtag_uart_read+0x138>
 4019244:	e0bffc17 	ldw	r2,-16(fp)
 4019248:	10c00917 	ldw	r3,36(r2)
 401924c:	e0bffc17 	ldw	r2,-16(fp)
 4019250:	10800117 	ldw	r2,4(r2)
 4019254:	18bff736 	bltu	r3,r2,4019234 <__alt_data_end+0xfc019234>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4019258:	e0bffc17 	ldw	r2,-16(fp)
 401925c:	10c00a17 	ldw	r3,40(r2)
 4019260:	e0bff717 	ldw	r2,-36(fp)
 4019264:	18800726 	beq	r3,r2,4019284 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4019268:	e0bffe17 	ldw	r2,-8(fp)
 401926c:	00bfb716 	blt	zero,r2,401914c <__alt_data_end+0xfc01914c>
 4019270:	00000506 	br	4019288 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4019274:	0001883a 	nop
 4019278:	00000306 	br	4019288 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401927c:	0001883a 	nop
 4019280:	00000106 	br	4019288 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4019284:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4019288:	e0fff517 	ldw	r3,-44(fp)
 401928c:	e0bffd17 	ldw	r2,-12(fp)
 4019290:	18801826 	beq	r3,r2,40192f4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019294:	0005303a 	rdctl	r2,status
 4019298:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401929c:	e0fffb17 	ldw	r3,-20(fp)
 40192a0:	00bfff84 	movi	r2,-2
 40192a4:	1884703a 	and	r2,r3,r2
 40192a8:	1001703a 	wrctl	status,r2
  
  return context;
 40192ac:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40192b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40192b4:	e0bffc17 	ldw	r2,-16(fp)
 40192b8:	10800817 	ldw	r2,32(r2)
 40192bc:	10c00054 	ori	r3,r2,1
 40192c0:	e0bffc17 	ldw	r2,-16(fp)
 40192c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40192c8:	e0bffc17 	ldw	r2,-16(fp)
 40192cc:	10800017 	ldw	r2,0(r2)
 40192d0:	10800104 	addi	r2,r2,4
 40192d4:	1007883a 	mov	r3,r2
 40192d8:	e0bffc17 	ldw	r2,-16(fp)
 40192dc:	10800817 	ldw	r2,32(r2)
 40192e0:	18800035 	stwio	r2,0(r3)
 40192e4:	e0bffa17 	ldw	r2,-24(fp)
 40192e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40192ec:	e0bff917 	ldw	r2,-28(fp)
 40192f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40192f4:	e0fff517 	ldw	r3,-44(fp)
 40192f8:	e0bffd17 	ldw	r2,-12(fp)
 40192fc:	18800426 	beq	r3,r2,4019310 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4019300:	e0fff517 	ldw	r3,-44(fp)
 4019304:	e0bffd17 	ldw	r2,-12(fp)
 4019308:	1885c83a 	sub	r2,r3,r2
 401930c:	00000606 	br	4019328 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4019310:	e0bfff17 	ldw	r2,-4(fp)
 4019314:	1090000c 	andi	r2,r2,16384
 4019318:	10000226 	beq	r2,zero,4019324 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401931c:	00bffd44 	movi	r2,-11
 4019320:	00000106 	br	4019328 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4019324:	00bffec4 	movi	r2,-5
}
 4019328:	e037883a 	mov	sp,fp
 401932c:	dfc00117 	ldw	ra,4(sp)
 4019330:	df000017 	ldw	fp,0(sp)
 4019334:	dec00204 	addi	sp,sp,8
 4019338:	f800283a 	ret

0401933c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401933c:	defff304 	addi	sp,sp,-52
 4019340:	dfc00c15 	stw	ra,48(sp)
 4019344:	df000b15 	stw	fp,44(sp)
 4019348:	df000b04 	addi	fp,sp,44
 401934c:	e13ffc15 	stw	r4,-16(fp)
 4019350:	e17ffd15 	stw	r5,-12(fp)
 4019354:	e1bffe15 	stw	r6,-8(fp)
 4019358:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401935c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4019360:	e0bffd17 	ldw	r2,-12(fp)
 4019364:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4019368:	00003706 	br	4019448 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401936c:	e0bffc17 	ldw	r2,-16(fp)
 4019370:	10800c17 	ldw	r2,48(r2)
 4019374:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4019378:	e0bffc17 	ldw	r2,-16(fp)
 401937c:	10800d17 	ldw	r2,52(r2)
 4019380:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4019384:	e0fff917 	ldw	r3,-28(fp)
 4019388:	e0bff517 	ldw	r2,-44(fp)
 401938c:	1880062e 	bgeu	r3,r2,40193a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4019390:	e0fff517 	ldw	r3,-44(fp)
 4019394:	e0bff917 	ldw	r2,-28(fp)
 4019398:	1885c83a 	sub	r2,r3,r2
 401939c:	10bfffc4 	addi	r2,r2,-1
 40193a0:	e0bff615 	stw	r2,-40(fp)
 40193a4:	00000b06 	br	40193d4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40193a8:	e0bff517 	ldw	r2,-44(fp)
 40193ac:	10000526 	beq	r2,zero,40193c4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40193b0:	00c20004 	movi	r3,2048
 40193b4:	e0bff917 	ldw	r2,-28(fp)
 40193b8:	1885c83a 	sub	r2,r3,r2
 40193bc:	e0bff615 	stw	r2,-40(fp)
 40193c0:	00000406 	br	40193d4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 40193c4:	00c1ffc4 	movi	r3,2047
 40193c8:	e0bff917 	ldw	r2,-28(fp)
 40193cc:	1885c83a 	sub	r2,r3,r2
 40193d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40193d4:	e0bff617 	ldw	r2,-40(fp)
 40193d8:	10001e26 	beq	r2,zero,4019454 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40193dc:	e0fffe17 	ldw	r3,-8(fp)
 40193e0:	e0bff617 	ldw	r2,-40(fp)
 40193e4:	1880022e 	bgeu	r3,r2,40193f0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 40193e8:	e0bffe17 	ldw	r2,-8(fp)
 40193ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40193f0:	e0bffc17 	ldw	r2,-16(fp)
 40193f4:	10c20e04 	addi	r3,r2,2104
 40193f8:	e0bff917 	ldw	r2,-28(fp)
 40193fc:	1885883a 	add	r2,r3,r2
 4019400:	e1bff617 	ldw	r6,-40(fp)
 4019404:	e17ffd17 	ldw	r5,-12(fp)
 4019408:	1009883a 	mov	r4,r2
 401940c:	400bbd00 	call	400bbd0 <memcpy>
      ptr   += n;
 4019410:	e0fffd17 	ldw	r3,-12(fp)
 4019414:	e0bff617 	ldw	r2,-40(fp)
 4019418:	1885883a 	add	r2,r3,r2
 401941c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4019420:	e0fffe17 	ldw	r3,-8(fp)
 4019424:	e0bff617 	ldw	r2,-40(fp)
 4019428:	1885c83a 	sub	r2,r3,r2
 401942c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4019430:	e0fff917 	ldw	r3,-28(fp)
 4019434:	e0bff617 	ldw	r2,-40(fp)
 4019438:	1885883a 	add	r2,r3,r2
 401943c:	10c1ffcc 	andi	r3,r2,2047
 4019440:	e0bffc17 	ldw	r2,-16(fp)
 4019444:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4019448:	e0bffe17 	ldw	r2,-8(fp)
 401944c:	00bfc716 	blt	zero,r2,401936c <__alt_data_end+0xfc01936c>
 4019450:	00000106 	br	4019458 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4019454:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019458:	0005303a 	rdctl	r2,status
 401945c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019460:	e0fffb17 	ldw	r3,-20(fp)
 4019464:	00bfff84 	movi	r2,-2
 4019468:	1884703a 	and	r2,r3,r2
 401946c:	1001703a 	wrctl	status,r2
  
  return context;
 4019470:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4019474:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4019478:	e0bffc17 	ldw	r2,-16(fp)
 401947c:	10800817 	ldw	r2,32(r2)
 4019480:	10c00094 	ori	r3,r2,2
 4019484:	e0bffc17 	ldw	r2,-16(fp)
 4019488:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401948c:	e0bffc17 	ldw	r2,-16(fp)
 4019490:	10800017 	ldw	r2,0(r2)
 4019494:	10800104 	addi	r2,r2,4
 4019498:	1007883a 	mov	r3,r2
 401949c:	e0bffc17 	ldw	r2,-16(fp)
 40194a0:	10800817 	ldw	r2,32(r2)
 40194a4:	18800035 	stwio	r2,0(r3)
 40194a8:	e0bffa17 	ldw	r2,-24(fp)
 40194ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40194b0:	e0bff817 	ldw	r2,-32(fp)
 40194b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40194b8:	e0bffe17 	ldw	r2,-8(fp)
 40194bc:	0080100e 	bge	zero,r2,4019500 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 40194c0:	e0bfff17 	ldw	r2,-4(fp)
 40194c4:	1090000c 	andi	r2,r2,16384
 40194c8:	1000101e 	bne	r2,zero,401950c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40194cc:	0001883a 	nop
 40194d0:	e0bffc17 	ldw	r2,-16(fp)
 40194d4:	10c00d17 	ldw	r3,52(r2)
 40194d8:	e0bff517 	ldw	r2,-44(fp)
 40194dc:	1880051e 	bne	r3,r2,40194f4 <altera_avalon_jtag_uart_write+0x1b8>
 40194e0:	e0bffc17 	ldw	r2,-16(fp)
 40194e4:	10c00917 	ldw	r3,36(r2)
 40194e8:	e0bffc17 	ldw	r2,-16(fp)
 40194ec:	10800117 	ldw	r2,4(r2)
 40194f0:	18bff736 	bltu	r3,r2,40194d0 <__alt_data_end+0xfc0194d0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40194f4:	e0bffc17 	ldw	r2,-16(fp)
 40194f8:	10800917 	ldw	r2,36(r2)
 40194fc:	1000051e 	bne	r2,zero,4019514 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4019500:	e0bffe17 	ldw	r2,-8(fp)
 4019504:	00bfd016 	blt	zero,r2,4019448 <__alt_data_end+0xfc019448>
 4019508:	00000306 	br	4019518 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401950c:	0001883a 	nop
 4019510:	00000106 	br	4019518 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4019514:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4019518:	e0fffd17 	ldw	r3,-12(fp)
 401951c:	e0bff717 	ldw	r2,-36(fp)
 4019520:	18800426 	beq	r3,r2,4019534 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4019524:	e0fffd17 	ldw	r3,-12(fp)
 4019528:	e0bff717 	ldw	r2,-36(fp)
 401952c:	1885c83a 	sub	r2,r3,r2
 4019530:	00000606 	br	401954c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4019534:	e0bfff17 	ldw	r2,-4(fp)
 4019538:	1090000c 	andi	r2,r2,16384
 401953c:	10000226 	beq	r2,zero,4019548 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4019540:	00bffd44 	movi	r2,-11
 4019544:	00000106 	br	401954c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4019548:	00bffec4 	movi	r2,-5
}
 401954c:	e037883a 	mov	sp,fp
 4019550:	dfc00117 	ldw	ra,4(sp)
 4019554:	df000017 	ldw	fp,0(sp)
 4019558:	dec00204 	addi	sp,sp,8
 401955c:	f800283a 	ret

04019560 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4019560:	defff404 	addi	sp,sp,-48
 4019564:	df000b15 	stw	fp,44(sp)
 4019568:	df000b04 	addi	fp,sp,44
 401956c:	e13ffc15 	stw	r4,-16(fp)
 4019570:	e17ffd15 	stw	r5,-12(fp)
 4019574:	e1bffe15 	stw	r6,-8(fp)
 4019578:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 401957c:	e0ffff17 	ldw	r3,-4(fp)
 4019580:	e0bffe17 	ldw	r2,-8(fp)
 4019584:	1885883a 	add	r2,r3,r2
 4019588:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 401958c:	e0c00217 	ldw	r3,8(fp)
 4019590:	e0800117 	ldw	r2,4(fp)
 4019594:	1885883a 	add	r2,r3,r2
 4019598:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 401959c:	e0800117 	ldw	r2,4(fp)
 40195a0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 40195a4:	e0bffe17 	ldw	r2,-8(fp)
 40195a8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 40195ac:	00800044 	movi	r2,1
 40195b0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 40195b4:	e0bffc17 	ldw	r2,-16(fp)
 40195b8:	10800504 	addi	r2,r2,20
 40195bc:	1009883a 	mov	r4,r2
 40195c0:	00c00044 	movi	r3,1
 40195c4:	e0bffd17 	ldw	r2,-12(fp)
 40195c8:	1884983a 	sll	r2,r3,r2
 40195cc:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 40195d0:	e0800317 	ldw	r2,12(fp)
 40195d4:	1080008c 	andi	r2,r2,2
 40195d8:	1000051e 	bne	r2,zero,40195f0 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 40195dc:	e0bffc17 	ldw	r2,-16(fp)
 40195e0:	10800304 	addi	r2,r2,12
 40195e4:	1007883a 	mov	r3,r2
 40195e8:	00810004 	movi	r2,1024
 40195ec:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 40195f0:	e0bffc17 	ldw	r2,-16(fp)
 40195f4:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 40195f8:	e0bffc17 	ldw	r2,-16(fp)
 40195fc:	10800204 	addi	r2,r2,8
 4019600:	10800037 	ldwio	r2,0(r2)
 4019604:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4019608:	e0bffa17 	ldw	r2,-24(fp)
 401960c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4019610:	10000226 	beq	r2,zero,401961c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4019614:	e0bff717 	ldw	r2,-36(fp)
 4019618:	1000031e 	bne	r2,zero,4019628 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401961c:	e0bffa17 	ldw	r2,-24(fp)
 4019620:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4019624:	103ff426 	beq	r2,zero,40195f8 <__alt_data_end+0xfc0195f8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4019628:	e0bffa17 	ldw	r2,-24(fp)
 401962c:	1080100c 	andi	r2,r2,64
 4019630:	10001e26 	beq	r2,zero,40196ac <alt_avalon_spi_command+0x14c>
 4019634:	e0bff717 	ldw	r2,-36(fp)
 4019638:	00801c0e 	bge	zero,r2,40196ac <alt_avalon_spi_command+0x14c>
    {
      credits--;
 401963c:	e0bff717 	ldw	r2,-36(fp)
 4019640:	10bfffc4 	addi	r2,r2,-1
 4019644:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 4019648:	e0ffff17 	ldw	r3,-4(fp)
 401964c:	e0bff817 	ldw	r2,-32(fp)
 4019650:	18800a2e 	bgeu	r3,r2,401967c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4019654:	e0bffc17 	ldw	r2,-16(fp)
 4019658:	10800104 	addi	r2,r2,4
 401965c:	1009883a 	mov	r4,r2
 4019660:	e0bfff17 	ldw	r2,-4(fp)
 4019664:	10c00044 	addi	r3,r2,1
 4019668:	e0ffff15 	stw	r3,-4(fp)
 401966c:	10800003 	ldbu	r2,0(r2)
 4019670:	10803fcc 	andi	r2,r2,255
 4019674:	20800035 	stwio	r2,0(r4)
 4019678:	00000c06 	br	40196ac <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 401967c:	e0bff517 	ldw	r2,-44(fp)
 4019680:	10000826 	beq	r2,zero,40196a4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 4019684:	e0bff517 	ldw	r2,-44(fp)
 4019688:	10bfffc4 	addi	r2,r2,-1
 401968c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4019690:	e0bffc17 	ldw	r2,-16(fp)
 4019694:	10800104 	addi	r2,r2,4
 4019698:	0007883a 	mov	r3,zero
 401969c:	10c00035 	stwio	r3,0(r2)
 40196a0:	00000206 	br	40196ac <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 40196a4:	00bf0004 	movi	r2,-1024
 40196a8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 40196ac:	e0bffa17 	ldw	r2,-24(fp)
 40196b0:	1080200c 	andi	r2,r2,128
 40196b4:	103fd026 	beq	r2,zero,40195f8 <__alt_data_end+0xfc0195f8>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 40196b8:	e0bffc17 	ldw	r2,-16(fp)
 40196bc:	10800037 	ldwio	r2,0(r2)
 40196c0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 40196c4:	e0bff617 	ldw	r2,-40(fp)
 40196c8:	10000426 	beq	r2,zero,40196dc <alt_avalon_spi_command+0x17c>
        read_ignore--;
 40196cc:	e0bff617 	ldw	r2,-40(fp)
 40196d0:	10bfffc4 	addi	r2,r2,-1
 40196d4:	e0bff615 	stw	r2,-40(fp)
 40196d8:	00000506 	br	40196f0 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 40196dc:	e0800217 	ldw	r2,8(fp)
 40196e0:	10c00044 	addi	r3,r2,1
 40196e4:	e0c00215 	stw	r3,8(fp)
 40196e8:	e0fffb17 	ldw	r3,-20(fp)
 40196ec:	10c00005 	stb	r3,0(r2)
      credits++;
 40196f0:	e0bff717 	ldw	r2,-36(fp)
 40196f4:	10800044 	addi	r2,r2,1
 40196f8:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 40196fc:	e0bff617 	ldw	r2,-40(fp)
 4019700:	103fbd1e 	bne	r2,zero,40195f8 <__alt_data_end+0xfc0195f8>
 4019704:	e0c00217 	ldw	r3,8(fp)
 4019708:	e0bff917 	ldw	r2,-28(fp)
 401970c:	18bfba1e 	bne	r3,r2,40195f8 <__alt_data_end+0xfc0195f8>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4019710:	e0bffc17 	ldw	r2,-16(fp)
 4019714:	10800204 	addi	r2,r2,8
 4019718:	10800037 	ldwio	r2,0(r2)
 401971c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4019720:	e0bffa17 	ldw	r2,-24(fp)
 4019724:	1080080c 	andi	r2,r2,32
 4019728:	103ff926 	beq	r2,zero,4019710 <__alt_data_end+0xfc019710>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 401972c:	e0800317 	ldw	r2,12(fp)
 4019730:	1080004c 	andi	r2,r2,1
 4019734:	1000041e 	bne	r2,zero,4019748 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4019738:	e0bffc17 	ldw	r2,-16(fp)
 401973c:	10800304 	addi	r2,r2,12
 4019740:	0007883a 	mov	r3,zero
 4019744:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4019748:	e0800117 	ldw	r2,4(fp)
}
 401974c:	e037883a 	mov	sp,fp
 4019750:	df000017 	ldw	fp,0(sp)
 4019754:	dec00104 	addi	sp,sp,4
 4019758:	f800283a 	ret

0401975c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401975c:	defffa04 	addi	sp,sp,-24
 4019760:	dfc00515 	stw	ra,20(sp)
 4019764:	df000415 	stw	fp,16(sp)
 4019768:	df000404 	addi	fp,sp,16
 401976c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4019770:	0007883a 	mov	r3,zero
 4019774:	e0bfff17 	ldw	r2,-4(fp)
 4019778:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401977c:	e0bfff17 	ldw	r2,-4(fp)
 4019780:	10800104 	addi	r2,r2,4
 4019784:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019788:	0005303a 	rdctl	r2,status
 401978c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019790:	e0fffd17 	ldw	r3,-12(fp)
 4019794:	00bfff84 	movi	r2,-2
 4019798:	1884703a 	and	r2,r3,r2
 401979c:	1001703a 	wrctl	status,r2
  
  return context;
 40197a0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40197a4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40197a8:	401a3c00 	call	401a3c0 <alt_tick>
 40197ac:	e0bffc17 	ldw	r2,-16(fp)
 40197b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40197b4:	e0bffe17 	ldw	r2,-8(fp)
 40197b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40197bc:	0001883a 	nop
 40197c0:	e037883a 	mov	sp,fp
 40197c4:	dfc00117 	ldw	ra,4(sp)
 40197c8:	df000017 	ldw	fp,0(sp)
 40197cc:	dec00204 	addi	sp,sp,8
 40197d0:	f800283a 	ret

040197d4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40197d4:	defff804 	addi	sp,sp,-32
 40197d8:	dfc00715 	stw	ra,28(sp)
 40197dc:	df000615 	stw	fp,24(sp)
 40197e0:	df000604 	addi	fp,sp,24
 40197e4:	e13ffc15 	stw	r4,-16(fp)
 40197e8:	e17ffd15 	stw	r5,-12(fp)
 40197ec:	e1bffe15 	stw	r6,-8(fp)
 40197f0:	e1ffff15 	stw	r7,-4(fp)
 40197f4:	e0bfff17 	ldw	r2,-4(fp)
 40197f8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 40197fc:	d092ed17 	ldw	r2,19380(gp)
 4019800:	1000021e 	bne	r2,zero,401980c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4019804:	e0bffb17 	ldw	r2,-20(fp)
 4019808:	d092ed15 	stw	r2,19380(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401980c:	e0bffc17 	ldw	r2,-16(fp)
 4019810:	10800104 	addi	r2,r2,4
 4019814:	00c001c4 	movi	r3,7
 4019818:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401981c:	d8000015 	stw	zero,0(sp)
 4019820:	e1fffc17 	ldw	r7,-16(fp)
 4019824:	018100b4 	movhi	r6,1026
 4019828:	31a5d704 	addi	r6,r6,-26788
 401982c:	e17ffe17 	ldw	r5,-8(fp)
 4019830:	e13ffd17 	ldw	r4,-12(fp)
 4019834:	4019cf00 	call	4019cf0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4019838:	0001883a 	nop
 401983c:	e037883a 	mov	sp,fp
 4019840:	dfc00117 	ldw	ra,4(sp)
 4019844:	df000017 	ldw	fp,0(sp)
 4019848:	dec00204 	addi	sp,sp,8
 401984c:	f800283a 	ret

04019850 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4019850:	defff504 	addi	sp,sp,-44
 4019854:	df000a15 	stw	fp,40(sp)
 4019858:	df000a04 	addi	fp,sp,40
 401985c:	e13ffc15 	stw	r4,-16(fp)
 4019860:	e17ffd15 	stw	r5,-12(fp)
 4019864:	e1bffe15 	stw	r6,-8(fp)
 4019868:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401986c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4019870:	d092ed17 	ldw	r2,19380(gp)
  
  if (alt_ticks_per_second ())
 4019874:	10003c26 	beq	r2,zero,4019968 <alt_alarm_start+0x118>
  {
    if (alarm)
 4019878:	e0bffc17 	ldw	r2,-16(fp)
 401987c:	10003826 	beq	r2,zero,4019960 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4019880:	e0bffc17 	ldw	r2,-16(fp)
 4019884:	e0fffe17 	ldw	r3,-8(fp)
 4019888:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401988c:	e0bffc17 	ldw	r2,-16(fp)
 4019890:	e0ffff17 	ldw	r3,-4(fp)
 4019894:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019898:	0005303a 	rdctl	r2,status
 401989c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40198a0:	e0fff917 	ldw	r3,-28(fp)
 40198a4:	00bfff84 	movi	r2,-2
 40198a8:	1884703a 	and	r2,r3,r2
 40198ac:	1001703a 	wrctl	status,r2
  
  return context;
 40198b0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 40198b4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40198b8:	d092ee17 	ldw	r2,19384(gp)
      
      current_nticks = alt_nticks();
 40198bc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 40198c0:	e0fffd17 	ldw	r3,-12(fp)
 40198c4:	e0bff617 	ldw	r2,-40(fp)
 40198c8:	1885883a 	add	r2,r3,r2
 40198cc:	10c00044 	addi	r3,r2,1
 40198d0:	e0bffc17 	ldw	r2,-16(fp)
 40198d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 40198d8:	e0bffc17 	ldw	r2,-16(fp)
 40198dc:	10c00217 	ldw	r3,8(r2)
 40198e0:	e0bff617 	ldw	r2,-40(fp)
 40198e4:	1880042e 	bgeu	r3,r2,40198f8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 40198e8:	e0bffc17 	ldw	r2,-16(fp)
 40198ec:	00c00044 	movi	r3,1
 40198f0:	10c00405 	stb	r3,16(r2)
 40198f4:	00000206 	br	4019900 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 40198f8:	e0bffc17 	ldw	r2,-16(fp)
 40198fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4019900:	e0bffc17 	ldw	r2,-16(fp)
 4019904:	d0e02904 	addi	r3,gp,-32604
 4019908:	e0fffa15 	stw	r3,-24(fp)
 401990c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4019910:	e0bffb17 	ldw	r2,-20(fp)
 4019914:	e0fffa17 	ldw	r3,-24(fp)
 4019918:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401991c:	e0bffa17 	ldw	r2,-24(fp)
 4019920:	10c00017 	ldw	r3,0(r2)
 4019924:	e0bffb17 	ldw	r2,-20(fp)
 4019928:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401992c:	e0bffa17 	ldw	r2,-24(fp)
 4019930:	10800017 	ldw	r2,0(r2)
 4019934:	e0fffb17 	ldw	r3,-20(fp)
 4019938:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401993c:	e0bffa17 	ldw	r2,-24(fp)
 4019940:	e0fffb17 	ldw	r3,-20(fp)
 4019944:	10c00015 	stw	r3,0(r2)
 4019948:	e0bff817 	ldw	r2,-32(fp)
 401994c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019950:	e0bff717 	ldw	r2,-36(fp)
 4019954:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4019958:	0005883a 	mov	r2,zero
 401995c:	00000306 	br	401996c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4019960:	00bffa84 	movi	r2,-22
 4019964:	00000106 	br	401996c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4019968:	00bfde84 	movi	r2,-134
  }
}
 401996c:	e037883a 	mov	sp,fp
 4019970:	df000017 	ldw	fp,0(sp)
 4019974:	dec00104 	addi	sp,sp,4
 4019978:	f800283a 	ret

0401997c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401997c:	defffa04 	addi	sp,sp,-24
 4019980:	dfc00515 	stw	ra,20(sp)
 4019984:	df000415 	stw	fp,16(sp)
 4019988:	df000404 	addi	fp,sp,16
 401998c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4019990:	008000c4 	movi	r2,3
 4019994:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4019998:	e0fffd17 	ldw	r3,-12(fp)
 401999c:	008003f4 	movhi	r2,15
 40199a0:	10909004 	addi	r2,r2,16960
 40199a4:	1885383a 	mul	r2,r3,r2
 40199a8:	100b883a 	mov	r5,r2
 40199ac:	0100bef4 	movhi	r4,763
 40199b0:	213c2004 	addi	r4,r4,-3968
 40199b4:	400ace00 	call	400ace0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 40199b8:	100b883a 	mov	r5,r2
 40199bc:	01200034 	movhi	r4,32768
 40199c0:	213fffc4 	addi	r4,r4,-1
 40199c4:	400ace00 	call	400ace0 <__udivsi3>
 40199c8:	100b883a 	mov	r5,r2
 40199cc:	e13fff17 	ldw	r4,-4(fp)
 40199d0:	400ace00 	call	400ace0 <__udivsi3>
 40199d4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 40199d8:	e0bffe17 	ldw	r2,-8(fp)
 40199dc:	10002a26 	beq	r2,zero,4019a88 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 40199e0:	e03ffc15 	stw	zero,-16(fp)
 40199e4:	00001706 	br	4019a44 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40199e8:	00a00034 	movhi	r2,32768
 40199ec:	10bfffc4 	addi	r2,r2,-1
 40199f0:	10bfffc4 	addi	r2,r2,-1
 40199f4:	103ffe1e 	bne	r2,zero,40199f0 <__alt_data_end+0xfc0199f0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40199f8:	e0fffd17 	ldw	r3,-12(fp)
 40199fc:	008003f4 	movhi	r2,15
 4019a00:	10909004 	addi	r2,r2,16960
 4019a04:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4019a08:	100b883a 	mov	r5,r2
 4019a0c:	0100bef4 	movhi	r4,763
 4019a10:	213c2004 	addi	r4,r4,-3968
 4019a14:	400ace00 	call	400ace0 <__udivsi3>
 4019a18:	100b883a 	mov	r5,r2
 4019a1c:	01200034 	movhi	r4,32768
 4019a20:	213fffc4 	addi	r4,r4,-1
 4019a24:	400ace00 	call	400ace0 <__udivsi3>
 4019a28:	1007883a 	mov	r3,r2
 4019a2c:	e0bfff17 	ldw	r2,-4(fp)
 4019a30:	10c5c83a 	sub	r2,r2,r3
 4019a34:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4019a38:	e0bffc17 	ldw	r2,-16(fp)
 4019a3c:	10800044 	addi	r2,r2,1
 4019a40:	e0bffc15 	stw	r2,-16(fp)
 4019a44:	e0fffc17 	ldw	r3,-16(fp)
 4019a48:	e0bffe17 	ldw	r2,-8(fp)
 4019a4c:	18bfe616 	blt	r3,r2,40199e8 <__alt_data_end+0xfc0199e8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4019a50:	e0fffd17 	ldw	r3,-12(fp)
 4019a54:	008003f4 	movhi	r2,15
 4019a58:	10909004 	addi	r2,r2,16960
 4019a5c:	1885383a 	mul	r2,r3,r2
 4019a60:	100b883a 	mov	r5,r2
 4019a64:	0100bef4 	movhi	r4,763
 4019a68:	213c2004 	addi	r4,r4,-3968
 4019a6c:	400ace00 	call	400ace0 <__udivsi3>
 4019a70:	1007883a 	mov	r3,r2
 4019a74:	e0bfff17 	ldw	r2,-4(fp)
 4019a78:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4019a7c:	10bfffc4 	addi	r2,r2,-1
 4019a80:	103ffe1e 	bne	r2,zero,4019a7c <__alt_data_end+0xfc019a7c>
 4019a84:	00000d06 	br	4019abc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4019a88:	e0fffd17 	ldw	r3,-12(fp)
 4019a8c:	008003f4 	movhi	r2,15
 4019a90:	10909004 	addi	r2,r2,16960
 4019a94:	1885383a 	mul	r2,r3,r2
 4019a98:	100b883a 	mov	r5,r2
 4019a9c:	0100bef4 	movhi	r4,763
 4019aa0:	213c2004 	addi	r4,r4,-3968
 4019aa4:	400ace00 	call	400ace0 <__udivsi3>
 4019aa8:	1007883a 	mov	r3,r2
 4019aac:	e0bfff17 	ldw	r2,-4(fp)
 4019ab0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4019ab4:	10bfffc4 	addi	r2,r2,-1
 4019ab8:	00bffe16 	blt	zero,r2,4019ab4 <__alt_data_end+0xfc019ab4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4019abc:	0005883a 	mov	r2,zero
}
 4019ac0:	e037883a 	mov	sp,fp
 4019ac4:	dfc00117 	ldw	ra,4(sp)
 4019ac8:	df000017 	ldw	fp,0(sp)
 4019acc:	dec00204 	addi	sp,sp,8
 4019ad0:	f800283a 	ret

04019ad4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4019ad4:	defffe04 	addi	sp,sp,-8
 4019ad8:	df000115 	stw	fp,4(sp)
 4019adc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4019ae0:	e03fff15 	stw	zero,-4(fp)
 4019ae4:	00000506 	br	4019afc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4019ae8:	e0bfff17 	ldw	r2,-4(fp)
 4019aec:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4019af0:	e0bfff17 	ldw	r2,-4(fp)
 4019af4:	10800804 	addi	r2,r2,32
 4019af8:	e0bfff15 	stw	r2,-4(fp)
 4019afc:	e0bfff17 	ldw	r2,-4(fp)
 4019b00:	10820030 	cmpltui	r2,r2,2048
 4019b04:	103ff81e 	bne	r2,zero,4019ae8 <__alt_data_end+0xfc019ae8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4019b08:	0001883a 	nop
 4019b0c:	e037883a 	mov	sp,fp
 4019b10:	df000017 	ldw	fp,0(sp)
 4019b14:	dec00104 	addi	sp,sp,4
 4019b18:	f800283a 	ret

04019b1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4019b1c:	defffe04 	addi	sp,sp,-8
 4019b20:	dfc00115 	stw	ra,4(sp)
 4019b24:	df000015 	stw	fp,0(sp)
 4019b28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4019b2c:	d0a02617 	ldw	r2,-32616(gp)
 4019b30:	10000326 	beq	r2,zero,4019b40 <alt_get_errno+0x24>
 4019b34:	d0a02617 	ldw	r2,-32616(gp)
 4019b38:	103ee83a 	callr	r2
 4019b3c:	00000106 	br	4019b44 <alt_get_errno+0x28>
 4019b40:	d092e504 	addi	r2,gp,19348
}
 4019b44:	e037883a 	mov	sp,fp
 4019b48:	dfc00117 	ldw	ra,4(sp)
 4019b4c:	df000017 	ldw	fp,0(sp)
 4019b50:	dec00204 	addi	sp,sp,8
 4019b54:	f800283a 	ret

04019b58 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4019b58:	defffa04 	addi	sp,sp,-24
 4019b5c:	dfc00515 	stw	ra,20(sp)
 4019b60:	df000415 	stw	fp,16(sp)
 4019b64:	df000404 	addi	fp,sp,16
 4019b68:	e13ffe15 	stw	r4,-8(fp)
 4019b6c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4019b70:	e0bffe17 	ldw	r2,-8(fp)
 4019b74:	10000326 	beq	r2,zero,4019b84 <alt_dev_llist_insert+0x2c>
 4019b78:	e0bffe17 	ldw	r2,-8(fp)
 4019b7c:	10800217 	ldw	r2,8(r2)
 4019b80:	1000061e 	bne	r2,zero,4019b9c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4019b84:	4019b1c0 	call	4019b1c <alt_get_errno>
 4019b88:	1007883a 	mov	r3,r2
 4019b8c:	00800584 	movi	r2,22
 4019b90:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4019b94:	00bffa84 	movi	r2,-22
 4019b98:	00001306 	br	4019be8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4019b9c:	e0bffe17 	ldw	r2,-8(fp)
 4019ba0:	e0ffff17 	ldw	r3,-4(fp)
 4019ba4:	e0fffc15 	stw	r3,-16(fp)
 4019ba8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4019bac:	e0bffd17 	ldw	r2,-12(fp)
 4019bb0:	e0fffc17 	ldw	r3,-16(fp)
 4019bb4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4019bb8:	e0bffc17 	ldw	r2,-16(fp)
 4019bbc:	10c00017 	ldw	r3,0(r2)
 4019bc0:	e0bffd17 	ldw	r2,-12(fp)
 4019bc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4019bc8:	e0bffc17 	ldw	r2,-16(fp)
 4019bcc:	10800017 	ldw	r2,0(r2)
 4019bd0:	e0fffd17 	ldw	r3,-12(fp)
 4019bd4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4019bd8:	e0bffc17 	ldw	r2,-16(fp)
 4019bdc:	e0fffd17 	ldw	r3,-12(fp)
 4019be0:	10c00015 	stw	r3,0(r2)

  return 0;  
 4019be4:	0005883a 	mov	r2,zero
}
 4019be8:	e037883a 	mov	sp,fp
 4019bec:	dfc00117 	ldw	ra,4(sp)
 4019bf0:	df000017 	ldw	fp,0(sp)
 4019bf4:	dec00204 	addi	sp,sp,8
 4019bf8:	f800283a 	ret

04019bfc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4019bfc:	defffd04 	addi	sp,sp,-12
 4019c00:	dfc00215 	stw	ra,8(sp)
 4019c04:	df000115 	stw	fp,4(sp)
 4019c08:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4019c0c:	008100b4 	movhi	r2,1026
 4019c10:	10aaeb04 	addi	r2,r2,-21588
 4019c14:	e0bfff15 	stw	r2,-4(fp)
 4019c18:	00000606 	br	4019c34 <_do_ctors+0x38>
        (*ctor) (); 
 4019c1c:	e0bfff17 	ldw	r2,-4(fp)
 4019c20:	10800017 	ldw	r2,0(r2)
 4019c24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4019c28:	e0bfff17 	ldw	r2,-4(fp)
 4019c2c:	10bfff04 	addi	r2,r2,-4
 4019c30:	e0bfff15 	stw	r2,-4(fp)
 4019c34:	e0ffff17 	ldw	r3,-4(fp)
 4019c38:	008100b4 	movhi	r2,1026
 4019c3c:	10aae044 	addi	r2,r2,-21631
 4019c40:	18bff62e 	bgeu	r3,r2,4019c1c <__alt_data_end+0xfc019c1c>
        (*ctor) (); 
}
 4019c44:	0001883a 	nop
 4019c48:	e037883a 	mov	sp,fp
 4019c4c:	dfc00117 	ldw	ra,4(sp)
 4019c50:	df000017 	ldw	fp,0(sp)
 4019c54:	dec00204 	addi	sp,sp,8
 4019c58:	f800283a 	ret

04019c5c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4019c5c:	defffd04 	addi	sp,sp,-12
 4019c60:	dfc00215 	stw	ra,8(sp)
 4019c64:	df000115 	stw	fp,4(sp)
 4019c68:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4019c6c:	008100b4 	movhi	r2,1026
 4019c70:	10aaeb04 	addi	r2,r2,-21588
 4019c74:	e0bfff15 	stw	r2,-4(fp)
 4019c78:	00000606 	br	4019c94 <_do_dtors+0x38>
        (*dtor) (); 
 4019c7c:	e0bfff17 	ldw	r2,-4(fp)
 4019c80:	10800017 	ldw	r2,0(r2)
 4019c84:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4019c88:	e0bfff17 	ldw	r2,-4(fp)
 4019c8c:	10bfff04 	addi	r2,r2,-4
 4019c90:	e0bfff15 	stw	r2,-4(fp)
 4019c94:	e0ffff17 	ldw	r3,-4(fp)
 4019c98:	008100b4 	movhi	r2,1026
 4019c9c:	10aaec04 	addi	r2,r2,-21584
 4019ca0:	18bff62e 	bgeu	r3,r2,4019c7c <__alt_data_end+0xfc019c7c>
        (*dtor) (); 
}
 4019ca4:	0001883a 	nop
 4019ca8:	e037883a 	mov	sp,fp
 4019cac:	dfc00117 	ldw	ra,4(sp)
 4019cb0:	df000017 	ldw	fp,0(sp)
 4019cb4:	dec00204 	addi	sp,sp,8
 4019cb8:	f800283a 	ret

04019cbc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4019cbc:	defffe04 	addi	sp,sp,-8
 4019cc0:	dfc00115 	stw	ra,4(sp)
 4019cc4:	df000015 	stw	fp,0(sp)
 4019cc8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4019ccc:	01440004 	movi	r5,4096
 4019cd0:	0009883a 	mov	r4,zero
 4019cd4:	401a7280 	call	401a728 <alt_icache_flush>
#endif
}
 4019cd8:	0001883a 	nop
 4019cdc:	e037883a 	mov	sp,fp
 4019ce0:	dfc00117 	ldw	ra,4(sp)
 4019ce4:	df000017 	ldw	fp,0(sp)
 4019ce8:	dec00204 	addi	sp,sp,8
 4019cec:	f800283a 	ret

04019cf0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4019cf0:	defff904 	addi	sp,sp,-28
 4019cf4:	dfc00615 	stw	ra,24(sp)
 4019cf8:	df000515 	stw	fp,20(sp)
 4019cfc:	df000504 	addi	fp,sp,20
 4019d00:	e13ffc15 	stw	r4,-16(fp)
 4019d04:	e17ffd15 	stw	r5,-12(fp)
 4019d08:	e1bffe15 	stw	r6,-8(fp)
 4019d0c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4019d10:	e0800217 	ldw	r2,8(fp)
 4019d14:	d8800015 	stw	r2,0(sp)
 4019d18:	e1ffff17 	ldw	r7,-4(fp)
 4019d1c:	e1bffe17 	ldw	r6,-8(fp)
 4019d20:	e17ffd17 	ldw	r5,-12(fp)
 4019d24:	e13ffc17 	ldw	r4,-16(fp)
 4019d28:	4019ea00 	call	4019ea0 <alt_iic_isr_register>
}  
 4019d2c:	e037883a 	mov	sp,fp
 4019d30:	dfc00117 	ldw	ra,4(sp)
 4019d34:	df000017 	ldw	fp,0(sp)
 4019d38:	dec00204 	addi	sp,sp,8
 4019d3c:	f800283a 	ret

04019d40 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4019d40:	defff904 	addi	sp,sp,-28
 4019d44:	df000615 	stw	fp,24(sp)
 4019d48:	df000604 	addi	fp,sp,24
 4019d4c:	e13ffe15 	stw	r4,-8(fp)
 4019d50:	e17fff15 	stw	r5,-4(fp)
 4019d54:	e0bfff17 	ldw	r2,-4(fp)
 4019d58:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019d5c:	0005303a 	rdctl	r2,status
 4019d60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019d64:	e0fffb17 	ldw	r3,-20(fp)
 4019d68:	00bfff84 	movi	r2,-2
 4019d6c:	1884703a 	and	r2,r3,r2
 4019d70:	1001703a 	wrctl	status,r2
  
  return context;
 4019d74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4019d78:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4019d7c:	00c00044 	movi	r3,1
 4019d80:	e0bffa17 	ldw	r2,-24(fp)
 4019d84:	1884983a 	sll	r2,r3,r2
 4019d88:	1007883a 	mov	r3,r2
 4019d8c:	d092ec17 	ldw	r2,19376(gp)
 4019d90:	1884b03a 	or	r2,r3,r2
 4019d94:	d092ec15 	stw	r2,19376(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4019d98:	d092ec17 	ldw	r2,19376(gp)
 4019d9c:	100170fa 	wrctl	ienable,r2
 4019da0:	e0bffc17 	ldw	r2,-16(fp)
 4019da4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019da8:	e0bffd17 	ldw	r2,-12(fp)
 4019dac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4019db0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4019db4:	0001883a 	nop
}
 4019db8:	e037883a 	mov	sp,fp
 4019dbc:	df000017 	ldw	fp,0(sp)
 4019dc0:	dec00104 	addi	sp,sp,4
 4019dc4:	f800283a 	ret

04019dc8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4019dc8:	defff904 	addi	sp,sp,-28
 4019dcc:	df000615 	stw	fp,24(sp)
 4019dd0:	df000604 	addi	fp,sp,24
 4019dd4:	e13ffe15 	stw	r4,-8(fp)
 4019dd8:	e17fff15 	stw	r5,-4(fp)
 4019ddc:	e0bfff17 	ldw	r2,-4(fp)
 4019de0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019de4:	0005303a 	rdctl	r2,status
 4019de8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019dec:	e0fffb17 	ldw	r3,-20(fp)
 4019df0:	00bfff84 	movi	r2,-2
 4019df4:	1884703a 	and	r2,r3,r2
 4019df8:	1001703a 	wrctl	status,r2
  
  return context;
 4019dfc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4019e00:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4019e04:	00c00044 	movi	r3,1
 4019e08:	e0bffa17 	ldw	r2,-24(fp)
 4019e0c:	1884983a 	sll	r2,r3,r2
 4019e10:	0084303a 	nor	r2,zero,r2
 4019e14:	1007883a 	mov	r3,r2
 4019e18:	d092ec17 	ldw	r2,19376(gp)
 4019e1c:	1884703a 	and	r2,r3,r2
 4019e20:	d092ec15 	stw	r2,19376(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4019e24:	d092ec17 	ldw	r2,19376(gp)
 4019e28:	100170fa 	wrctl	ienable,r2
 4019e2c:	e0bffc17 	ldw	r2,-16(fp)
 4019e30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019e34:	e0bffd17 	ldw	r2,-12(fp)
 4019e38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4019e3c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4019e40:	0001883a 	nop
}
 4019e44:	e037883a 	mov	sp,fp
 4019e48:	df000017 	ldw	fp,0(sp)
 4019e4c:	dec00104 	addi	sp,sp,4
 4019e50:	f800283a 	ret

04019e54 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4019e54:	defffc04 	addi	sp,sp,-16
 4019e58:	df000315 	stw	fp,12(sp)
 4019e5c:	df000304 	addi	fp,sp,12
 4019e60:	e13ffe15 	stw	r4,-8(fp)
 4019e64:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4019e68:	000530fa 	rdctl	r2,ienable
 4019e6c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4019e70:	00c00044 	movi	r3,1
 4019e74:	e0bfff17 	ldw	r2,-4(fp)
 4019e78:	1884983a 	sll	r2,r3,r2
 4019e7c:	1007883a 	mov	r3,r2
 4019e80:	e0bffd17 	ldw	r2,-12(fp)
 4019e84:	1884703a 	and	r2,r3,r2
 4019e88:	1004c03a 	cmpne	r2,r2,zero
 4019e8c:	10803fcc 	andi	r2,r2,255
}
 4019e90:	e037883a 	mov	sp,fp
 4019e94:	df000017 	ldw	fp,0(sp)
 4019e98:	dec00104 	addi	sp,sp,4
 4019e9c:	f800283a 	ret

04019ea0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4019ea0:	defff504 	addi	sp,sp,-44
 4019ea4:	dfc00a15 	stw	ra,40(sp)
 4019ea8:	df000915 	stw	fp,36(sp)
 4019eac:	df000904 	addi	fp,sp,36
 4019eb0:	e13ffc15 	stw	r4,-16(fp)
 4019eb4:	e17ffd15 	stw	r5,-12(fp)
 4019eb8:	e1bffe15 	stw	r6,-8(fp)
 4019ebc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4019ec0:	00bffa84 	movi	r2,-22
 4019ec4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4019ec8:	e0bffd17 	ldw	r2,-12(fp)
 4019ecc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4019ed0:	e0bff817 	ldw	r2,-32(fp)
 4019ed4:	10800808 	cmpgei	r2,r2,32
 4019ed8:	1000271e 	bne	r2,zero,4019f78 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019edc:	0005303a 	rdctl	r2,status
 4019ee0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019ee4:	e0fffb17 	ldw	r3,-20(fp)
 4019ee8:	00bfff84 	movi	r2,-2
 4019eec:	1884703a 	and	r2,r3,r2
 4019ef0:	1001703a 	wrctl	status,r2
  
  return context;
 4019ef4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4019ef8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4019efc:	008100f4 	movhi	r2,1027
 4019f00:	1096f204 	addi	r2,r2,23496
 4019f04:	e0fff817 	ldw	r3,-32(fp)
 4019f08:	180690fa 	slli	r3,r3,3
 4019f0c:	10c5883a 	add	r2,r2,r3
 4019f10:	e0fffe17 	ldw	r3,-8(fp)
 4019f14:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4019f18:	008100f4 	movhi	r2,1027
 4019f1c:	1096f204 	addi	r2,r2,23496
 4019f20:	e0fff817 	ldw	r3,-32(fp)
 4019f24:	180690fa 	slli	r3,r3,3
 4019f28:	10c5883a 	add	r2,r2,r3
 4019f2c:	10800104 	addi	r2,r2,4
 4019f30:	e0ffff17 	ldw	r3,-4(fp)
 4019f34:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4019f38:	e0bffe17 	ldw	r2,-8(fp)
 4019f3c:	10000526 	beq	r2,zero,4019f54 <alt_iic_isr_register+0xb4>
 4019f40:	e0bff817 	ldw	r2,-32(fp)
 4019f44:	100b883a 	mov	r5,r2
 4019f48:	e13ffc17 	ldw	r4,-16(fp)
 4019f4c:	4019d400 	call	4019d40 <alt_ic_irq_enable>
 4019f50:	00000406 	br	4019f64 <alt_iic_isr_register+0xc4>
 4019f54:	e0bff817 	ldw	r2,-32(fp)
 4019f58:	100b883a 	mov	r5,r2
 4019f5c:	e13ffc17 	ldw	r4,-16(fp)
 4019f60:	4019dc80 	call	4019dc8 <alt_ic_irq_disable>
 4019f64:	e0bff715 	stw	r2,-36(fp)
 4019f68:	e0bffa17 	ldw	r2,-24(fp)
 4019f6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019f70:	e0bff917 	ldw	r2,-28(fp)
 4019f74:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4019f78:	e0bff717 	ldw	r2,-36(fp)
}
 4019f7c:	e037883a 	mov	sp,fp
 4019f80:	dfc00117 	ldw	ra,4(sp)
 4019f84:	df000017 	ldw	fp,0(sp)
 4019f88:	dec00204 	addi	sp,sp,8
 4019f8c:	f800283a 	ret

04019f90 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4019f90:	defff904 	addi	sp,sp,-28
 4019f94:	dfc00615 	stw	ra,24(sp)
 4019f98:	df000515 	stw	fp,20(sp)
 4019f9c:	df000504 	addi	fp,sp,20
 4019fa0:	e13ffc15 	stw	r4,-16(fp)
 4019fa4:	e17ffd15 	stw	r5,-12(fp)
 4019fa8:	e1bffe15 	stw	r6,-8(fp)
 4019fac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4019fb0:	e1bfff17 	ldw	r6,-4(fp)
 4019fb4:	e17ffe17 	ldw	r5,-8(fp)
 4019fb8:	e13ffd17 	ldw	r4,-12(fp)
 4019fbc:	401a1d00 	call	401a1d0 <open>
 4019fc0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4019fc4:	e0bffb17 	ldw	r2,-20(fp)
 4019fc8:	10001c16 	blt	r2,zero,401a03c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4019fcc:	008100b4 	movhi	r2,1026
 4019fd0:	109f5104 	addi	r2,r2,32068
 4019fd4:	e0fffb17 	ldw	r3,-20(fp)
 4019fd8:	18c00324 	muli	r3,r3,12
 4019fdc:	10c5883a 	add	r2,r2,r3
 4019fe0:	10c00017 	ldw	r3,0(r2)
 4019fe4:	e0bffc17 	ldw	r2,-16(fp)
 4019fe8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4019fec:	008100b4 	movhi	r2,1026
 4019ff0:	109f5104 	addi	r2,r2,32068
 4019ff4:	e0fffb17 	ldw	r3,-20(fp)
 4019ff8:	18c00324 	muli	r3,r3,12
 4019ffc:	10c5883a 	add	r2,r2,r3
 401a000:	10800104 	addi	r2,r2,4
 401a004:	10c00017 	ldw	r3,0(r2)
 401a008:	e0bffc17 	ldw	r2,-16(fp)
 401a00c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401a010:	008100b4 	movhi	r2,1026
 401a014:	109f5104 	addi	r2,r2,32068
 401a018:	e0fffb17 	ldw	r3,-20(fp)
 401a01c:	18c00324 	muli	r3,r3,12
 401a020:	10c5883a 	add	r2,r2,r3
 401a024:	10800204 	addi	r2,r2,8
 401a028:	10c00017 	ldw	r3,0(r2)
 401a02c:	e0bffc17 	ldw	r2,-16(fp)
 401a030:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401a034:	e13ffb17 	ldw	r4,-20(fp)
 401a038:	40186f80 	call	40186f8 <alt_release_fd>
  }
} 
 401a03c:	0001883a 	nop
 401a040:	e037883a 	mov	sp,fp
 401a044:	dfc00117 	ldw	ra,4(sp)
 401a048:	df000017 	ldw	fp,0(sp)
 401a04c:	dec00204 	addi	sp,sp,8
 401a050:	f800283a 	ret

0401a054 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401a054:	defffb04 	addi	sp,sp,-20
 401a058:	dfc00415 	stw	ra,16(sp)
 401a05c:	df000315 	stw	fp,12(sp)
 401a060:	df000304 	addi	fp,sp,12
 401a064:	e13ffd15 	stw	r4,-12(fp)
 401a068:	e17ffe15 	stw	r5,-8(fp)
 401a06c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401a070:	01c07fc4 	movi	r7,511
 401a074:	01800044 	movi	r6,1
 401a078:	e17ffd17 	ldw	r5,-12(fp)
 401a07c:	010100b4 	movhi	r4,1026
 401a080:	211f5404 	addi	r4,r4,32080
 401a084:	4019f900 	call	4019f90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401a088:	01c07fc4 	movi	r7,511
 401a08c:	000d883a 	mov	r6,zero
 401a090:	e17ffe17 	ldw	r5,-8(fp)
 401a094:	010100b4 	movhi	r4,1026
 401a098:	211f5104 	addi	r4,r4,32068
 401a09c:	4019f900 	call	4019f90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401a0a0:	01c07fc4 	movi	r7,511
 401a0a4:	01800044 	movi	r6,1
 401a0a8:	e17fff17 	ldw	r5,-4(fp)
 401a0ac:	010100b4 	movhi	r4,1026
 401a0b0:	211f5704 	addi	r4,r4,32092
 401a0b4:	4019f900 	call	4019f90 <alt_open_fd>
}  
 401a0b8:	0001883a 	nop
 401a0bc:	e037883a 	mov	sp,fp
 401a0c0:	dfc00117 	ldw	ra,4(sp)
 401a0c4:	df000017 	ldw	fp,0(sp)
 401a0c8:	dec00204 	addi	sp,sp,8
 401a0cc:	f800283a 	ret

0401a0d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401a0d0:	defffe04 	addi	sp,sp,-8
 401a0d4:	dfc00115 	stw	ra,4(sp)
 401a0d8:	df000015 	stw	fp,0(sp)
 401a0dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401a0e0:	d0a02617 	ldw	r2,-32616(gp)
 401a0e4:	10000326 	beq	r2,zero,401a0f4 <alt_get_errno+0x24>
 401a0e8:	d0a02617 	ldw	r2,-32616(gp)
 401a0ec:	103ee83a 	callr	r2
 401a0f0:	00000106 	br	401a0f8 <alt_get_errno+0x28>
 401a0f4:	d092e504 	addi	r2,gp,19348
}
 401a0f8:	e037883a 	mov	sp,fp
 401a0fc:	dfc00117 	ldw	ra,4(sp)
 401a100:	df000017 	ldw	fp,0(sp)
 401a104:	dec00204 	addi	sp,sp,8
 401a108:	f800283a 	ret

0401a10c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401a10c:	defffd04 	addi	sp,sp,-12
 401a110:	df000215 	stw	fp,8(sp)
 401a114:	df000204 	addi	fp,sp,8
 401a118:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401a11c:	e0bfff17 	ldw	r2,-4(fp)
 401a120:	10800217 	ldw	r2,8(r2)
 401a124:	10d00034 	orhi	r3,r2,16384
 401a128:	e0bfff17 	ldw	r2,-4(fp)
 401a12c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401a130:	e03ffe15 	stw	zero,-8(fp)
 401a134:	00001d06 	br	401a1ac <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401a138:	008100b4 	movhi	r2,1026
 401a13c:	109f5104 	addi	r2,r2,32068
 401a140:	e0fffe17 	ldw	r3,-8(fp)
 401a144:	18c00324 	muli	r3,r3,12
 401a148:	10c5883a 	add	r2,r2,r3
 401a14c:	10c00017 	ldw	r3,0(r2)
 401a150:	e0bfff17 	ldw	r2,-4(fp)
 401a154:	10800017 	ldw	r2,0(r2)
 401a158:	1880111e 	bne	r3,r2,401a1a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401a15c:	008100b4 	movhi	r2,1026
 401a160:	109f5104 	addi	r2,r2,32068
 401a164:	e0fffe17 	ldw	r3,-8(fp)
 401a168:	18c00324 	muli	r3,r3,12
 401a16c:	10c5883a 	add	r2,r2,r3
 401a170:	10800204 	addi	r2,r2,8
 401a174:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401a178:	1000090e 	bge	r2,zero,401a1a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401a17c:	e0bffe17 	ldw	r2,-8(fp)
 401a180:	10c00324 	muli	r3,r2,12
 401a184:	008100b4 	movhi	r2,1026
 401a188:	109f5104 	addi	r2,r2,32068
 401a18c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401a190:	e0bfff17 	ldw	r2,-4(fp)
 401a194:	18800226 	beq	r3,r2,401a1a0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401a198:	00bffcc4 	movi	r2,-13
 401a19c:	00000806 	br	401a1c0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401a1a0:	e0bffe17 	ldw	r2,-8(fp)
 401a1a4:	10800044 	addi	r2,r2,1
 401a1a8:	e0bffe15 	stw	r2,-8(fp)
 401a1ac:	d0a02517 	ldw	r2,-32620(gp)
 401a1b0:	1007883a 	mov	r3,r2
 401a1b4:	e0bffe17 	ldw	r2,-8(fp)
 401a1b8:	18bfdf2e 	bgeu	r3,r2,401a138 <__alt_data_end+0xfc01a138>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401a1bc:	0005883a 	mov	r2,zero
}
 401a1c0:	e037883a 	mov	sp,fp
 401a1c4:	df000017 	ldw	fp,0(sp)
 401a1c8:	dec00104 	addi	sp,sp,4
 401a1cc:	f800283a 	ret

0401a1d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401a1d0:	defff604 	addi	sp,sp,-40
 401a1d4:	dfc00915 	stw	ra,36(sp)
 401a1d8:	df000815 	stw	fp,32(sp)
 401a1dc:	df000804 	addi	fp,sp,32
 401a1e0:	e13ffd15 	stw	r4,-12(fp)
 401a1e4:	e17ffe15 	stw	r5,-8(fp)
 401a1e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401a1ec:	00bfffc4 	movi	r2,-1
 401a1f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401a1f4:	00bffb44 	movi	r2,-19
 401a1f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401a1fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401a200:	d1602304 	addi	r5,gp,-32628
 401a204:	e13ffd17 	ldw	r4,-12(fp)
 401a208:	401a4ec0 	call	401a4ec <alt_find_dev>
 401a20c:	e0bff815 	stw	r2,-32(fp)
 401a210:	e0bff817 	ldw	r2,-32(fp)
 401a214:	1000051e 	bne	r2,zero,401a22c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401a218:	e13ffd17 	ldw	r4,-12(fp)
 401a21c:	401a57c0 	call	401a57c <alt_find_file>
 401a220:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401a224:	00800044 	movi	r2,1
 401a228:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401a22c:	e0bff817 	ldw	r2,-32(fp)
 401a230:	10002926 	beq	r2,zero,401a2d8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401a234:	e13ff817 	ldw	r4,-32(fp)
 401a238:	401a6840 	call	401a684 <alt_get_fd>
 401a23c:	e0bff915 	stw	r2,-28(fp)
 401a240:	e0bff917 	ldw	r2,-28(fp)
 401a244:	1000030e 	bge	r2,zero,401a254 <open+0x84>
    {
      status = index;
 401a248:	e0bff917 	ldw	r2,-28(fp)
 401a24c:	e0bffa15 	stw	r2,-24(fp)
 401a250:	00002306 	br	401a2e0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 401a254:	e0bff917 	ldw	r2,-28(fp)
 401a258:	10c00324 	muli	r3,r2,12
 401a25c:	008100b4 	movhi	r2,1026
 401a260:	109f5104 	addi	r2,r2,32068
 401a264:	1885883a 	add	r2,r3,r2
 401a268:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401a26c:	e0fffe17 	ldw	r3,-8(fp)
 401a270:	00900034 	movhi	r2,16384
 401a274:	10bfffc4 	addi	r2,r2,-1
 401a278:	1886703a 	and	r3,r3,r2
 401a27c:	e0bffc17 	ldw	r2,-16(fp)
 401a280:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401a284:	e0bffb17 	ldw	r2,-20(fp)
 401a288:	1000051e 	bne	r2,zero,401a2a0 <open+0xd0>
 401a28c:	e13ffc17 	ldw	r4,-16(fp)
 401a290:	401a10c0 	call	401a10c <alt_file_locked>
 401a294:	e0bffa15 	stw	r2,-24(fp)
 401a298:	e0bffa17 	ldw	r2,-24(fp)
 401a29c:	10001016 	blt	r2,zero,401a2e0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401a2a0:	e0bff817 	ldw	r2,-32(fp)
 401a2a4:	10800317 	ldw	r2,12(r2)
 401a2a8:	10000826 	beq	r2,zero,401a2cc <open+0xfc>
 401a2ac:	e0bff817 	ldw	r2,-32(fp)
 401a2b0:	10800317 	ldw	r2,12(r2)
 401a2b4:	e1ffff17 	ldw	r7,-4(fp)
 401a2b8:	e1bffe17 	ldw	r6,-8(fp)
 401a2bc:	e17ffd17 	ldw	r5,-12(fp)
 401a2c0:	e13ffc17 	ldw	r4,-16(fp)
 401a2c4:	103ee83a 	callr	r2
 401a2c8:	00000106 	br	401a2d0 <open+0x100>
 401a2cc:	0005883a 	mov	r2,zero
 401a2d0:	e0bffa15 	stw	r2,-24(fp)
 401a2d4:	00000206 	br	401a2e0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401a2d8:	00bffb44 	movi	r2,-19
 401a2dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401a2e0:	e0bffa17 	ldw	r2,-24(fp)
 401a2e4:	1000090e 	bge	r2,zero,401a30c <open+0x13c>
  {
    alt_release_fd (index);  
 401a2e8:	e13ff917 	ldw	r4,-28(fp)
 401a2ec:	40186f80 	call	40186f8 <alt_release_fd>
    ALT_ERRNO = -status;
 401a2f0:	401a0d00 	call	401a0d0 <alt_get_errno>
 401a2f4:	1007883a 	mov	r3,r2
 401a2f8:	e0bffa17 	ldw	r2,-24(fp)
 401a2fc:	0085c83a 	sub	r2,zero,r2
 401a300:	18800015 	stw	r2,0(r3)
    return -1;
 401a304:	00bfffc4 	movi	r2,-1
 401a308:	00000106 	br	401a310 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 401a30c:	e0bff917 	ldw	r2,-28(fp)
}
 401a310:	e037883a 	mov	sp,fp
 401a314:	dfc00117 	ldw	ra,4(sp)
 401a318:	df000017 	ldw	fp,0(sp)
 401a31c:	dec00204 	addi	sp,sp,8
 401a320:	f800283a 	ret

0401a324 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401a324:	defffa04 	addi	sp,sp,-24
 401a328:	df000515 	stw	fp,20(sp)
 401a32c:	df000504 	addi	fp,sp,20
 401a330:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a334:	0005303a 	rdctl	r2,status
 401a338:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a33c:	e0fffc17 	ldw	r3,-16(fp)
 401a340:	00bfff84 	movi	r2,-2
 401a344:	1884703a 	and	r2,r3,r2
 401a348:	1001703a 	wrctl	status,r2
  
  return context;
 401a34c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401a350:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401a354:	e0bfff17 	ldw	r2,-4(fp)
 401a358:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401a35c:	e0bffd17 	ldw	r2,-12(fp)
 401a360:	10800017 	ldw	r2,0(r2)
 401a364:	e0fffd17 	ldw	r3,-12(fp)
 401a368:	18c00117 	ldw	r3,4(r3)
 401a36c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401a370:	e0bffd17 	ldw	r2,-12(fp)
 401a374:	10800117 	ldw	r2,4(r2)
 401a378:	e0fffd17 	ldw	r3,-12(fp)
 401a37c:	18c00017 	ldw	r3,0(r3)
 401a380:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401a384:	e0bffd17 	ldw	r2,-12(fp)
 401a388:	e0fffd17 	ldw	r3,-12(fp)
 401a38c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401a390:	e0bffd17 	ldw	r2,-12(fp)
 401a394:	e0fffd17 	ldw	r3,-12(fp)
 401a398:	10c00015 	stw	r3,0(r2)
 401a39c:	e0bffb17 	ldw	r2,-20(fp)
 401a3a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a3a4:	e0bffe17 	ldw	r2,-8(fp)
 401a3a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401a3ac:	0001883a 	nop
 401a3b0:	e037883a 	mov	sp,fp
 401a3b4:	df000017 	ldw	fp,0(sp)
 401a3b8:	dec00104 	addi	sp,sp,4
 401a3bc:	f800283a 	ret

0401a3c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401a3c0:	defffb04 	addi	sp,sp,-20
 401a3c4:	dfc00415 	stw	ra,16(sp)
 401a3c8:	df000315 	stw	fp,12(sp)
 401a3cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401a3d0:	d0a02917 	ldw	r2,-32604(gp)
 401a3d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401a3d8:	d092ee17 	ldw	r2,19384(gp)
 401a3dc:	10800044 	addi	r2,r2,1
 401a3e0:	d092ee15 	stw	r2,19384(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401a3e4:	00002e06 	br	401a4a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401a3e8:	e0bffd17 	ldw	r2,-12(fp)
 401a3ec:	10800017 	ldw	r2,0(r2)
 401a3f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401a3f4:	e0bffd17 	ldw	r2,-12(fp)
 401a3f8:	10800403 	ldbu	r2,16(r2)
 401a3fc:	10803fcc 	andi	r2,r2,255
 401a400:	10000426 	beq	r2,zero,401a414 <alt_tick+0x54>
 401a404:	d092ee17 	ldw	r2,19384(gp)
 401a408:	1000021e 	bne	r2,zero,401a414 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401a40c:	e0bffd17 	ldw	r2,-12(fp)
 401a410:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401a414:	e0bffd17 	ldw	r2,-12(fp)
 401a418:	10800217 	ldw	r2,8(r2)
 401a41c:	d0d2ee17 	ldw	r3,19384(gp)
 401a420:	18801d36 	bltu	r3,r2,401a498 <alt_tick+0xd8>
 401a424:	e0bffd17 	ldw	r2,-12(fp)
 401a428:	10800403 	ldbu	r2,16(r2)
 401a42c:	10803fcc 	andi	r2,r2,255
 401a430:	1000191e 	bne	r2,zero,401a498 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401a434:	e0bffd17 	ldw	r2,-12(fp)
 401a438:	10800317 	ldw	r2,12(r2)
 401a43c:	e0fffd17 	ldw	r3,-12(fp)
 401a440:	18c00517 	ldw	r3,20(r3)
 401a444:	1809883a 	mov	r4,r3
 401a448:	103ee83a 	callr	r2
 401a44c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401a450:	e0bfff17 	ldw	r2,-4(fp)
 401a454:	1000031e 	bne	r2,zero,401a464 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401a458:	e13ffd17 	ldw	r4,-12(fp)
 401a45c:	401a3240 	call	401a324 <alt_alarm_stop>
 401a460:	00000d06 	br	401a498 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 401a464:	e0bffd17 	ldw	r2,-12(fp)
 401a468:	10c00217 	ldw	r3,8(r2)
 401a46c:	e0bfff17 	ldw	r2,-4(fp)
 401a470:	1887883a 	add	r3,r3,r2
 401a474:	e0bffd17 	ldw	r2,-12(fp)
 401a478:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401a47c:	e0bffd17 	ldw	r2,-12(fp)
 401a480:	10c00217 	ldw	r3,8(r2)
 401a484:	d092ee17 	ldw	r2,19384(gp)
 401a488:	1880032e 	bgeu	r3,r2,401a498 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 401a48c:	e0bffd17 	ldw	r2,-12(fp)
 401a490:	00c00044 	movi	r3,1
 401a494:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 401a498:	e0bffe17 	ldw	r2,-8(fp)
 401a49c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401a4a0:	e0fffd17 	ldw	r3,-12(fp)
 401a4a4:	d0a02904 	addi	r2,gp,-32604
 401a4a8:	18bfcf1e 	bne	r3,r2,401a3e8 <__alt_data_end+0xfc01a3e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401a4ac:	0001883a 	nop
}
 401a4b0:	0001883a 	nop
 401a4b4:	e037883a 	mov	sp,fp
 401a4b8:	dfc00117 	ldw	ra,4(sp)
 401a4bc:	df000017 	ldw	fp,0(sp)
 401a4c0:	dec00204 	addi	sp,sp,8
 401a4c4:	f800283a 	ret

0401a4c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401a4c8:	deffff04 	addi	sp,sp,-4
 401a4cc:	df000015 	stw	fp,0(sp)
 401a4d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401a4d4:	000170fa 	wrctl	ienable,zero
}
 401a4d8:	0001883a 	nop
 401a4dc:	e037883a 	mov	sp,fp
 401a4e0:	df000017 	ldw	fp,0(sp)
 401a4e4:	dec00104 	addi	sp,sp,4
 401a4e8:	f800283a 	ret

0401a4ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401a4ec:	defffa04 	addi	sp,sp,-24
 401a4f0:	dfc00515 	stw	ra,20(sp)
 401a4f4:	df000415 	stw	fp,16(sp)
 401a4f8:	df000404 	addi	fp,sp,16
 401a4fc:	e13ffe15 	stw	r4,-8(fp)
 401a500:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401a504:	e0bfff17 	ldw	r2,-4(fp)
 401a508:	10800017 	ldw	r2,0(r2)
 401a50c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401a510:	e13ffe17 	ldw	r4,-8(fp)
 401a514:	400c3b40 	call	400c3b4 <strlen>
 401a518:	10800044 	addi	r2,r2,1
 401a51c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401a520:	00000d06 	br	401a558 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401a524:	e0bffc17 	ldw	r2,-16(fp)
 401a528:	10800217 	ldw	r2,8(r2)
 401a52c:	e0fffd17 	ldw	r3,-12(fp)
 401a530:	180d883a 	mov	r6,r3
 401a534:	e17ffe17 	ldw	r5,-8(fp)
 401a538:	1009883a 	mov	r4,r2
 401a53c:	400bb540 	call	400bb54 <memcmp>
 401a540:	1000021e 	bne	r2,zero,401a54c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401a544:	e0bffc17 	ldw	r2,-16(fp)
 401a548:	00000706 	br	401a568 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401a54c:	e0bffc17 	ldw	r2,-16(fp)
 401a550:	10800017 	ldw	r2,0(r2)
 401a554:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401a558:	e0fffc17 	ldw	r3,-16(fp)
 401a55c:	e0bfff17 	ldw	r2,-4(fp)
 401a560:	18bff01e 	bne	r3,r2,401a524 <__alt_data_end+0xfc01a524>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401a564:	0005883a 	mov	r2,zero
}
 401a568:	e037883a 	mov	sp,fp
 401a56c:	dfc00117 	ldw	ra,4(sp)
 401a570:	df000017 	ldw	fp,0(sp)
 401a574:	dec00204 	addi	sp,sp,8
 401a578:	f800283a 	ret

0401a57c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401a57c:	defffb04 	addi	sp,sp,-20
 401a580:	dfc00415 	stw	ra,16(sp)
 401a584:	df000315 	stw	fp,12(sp)
 401a588:	df000304 	addi	fp,sp,12
 401a58c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401a590:	d0a02117 	ldw	r2,-32636(gp)
 401a594:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401a598:	00003106 	br	401a660 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401a59c:	e0bffd17 	ldw	r2,-12(fp)
 401a5a0:	10800217 	ldw	r2,8(r2)
 401a5a4:	1009883a 	mov	r4,r2
 401a5a8:	400c3b40 	call	400c3b4 <strlen>
 401a5ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 401a5b0:	e0bffd17 	ldw	r2,-12(fp)
 401a5b4:	10c00217 	ldw	r3,8(r2)
 401a5b8:	e0bffe17 	ldw	r2,-8(fp)
 401a5bc:	10bfffc4 	addi	r2,r2,-1
 401a5c0:	1885883a 	add	r2,r3,r2
 401a5c4:	10800003 	ldbu	r2,0(r2)
 401a5c8:	10803fcc 	andi	r2,r2,255
 401a5cc:	1080201c 	xori	r2,r2,128
 401a5d0:	10bfe004 	addi	r2,r2,-128
 401a5d4:	10800bd8 	cmpnei	r2,r2,47
 401a5d8:	1000031e 	bne	r2,zero,401a5e8 <alt_find_file+0x6c>
    {
      len -= 1;
 401a5dc:	e0bffe17 	ldw	r2,-8(fp)
 401a5e0:	10bfffc4 	addi	r2,r2,-1
 401a5e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401a5e8:	e0bffe17 	ldw	r2,-8(fp)
 401a5ec:	e0ffff17 	ldw	r3,-4(fp)
 401a5f0:	1885883a 	add	r2,r3,r2
 401a5f4:	10800003 	ldbu	r2,0(r2)
 401a5f8:	10803fcc 	andi	r2,r2,255
 401a5fc:	1080201c 	xori	r2,r2,128
 401a600:	10bfe004 	addi	r2,r2,-128
 401a604:	10800be0 	cmpeqi	r2,r2,47
 401a608:	1000081e 	bne	r2,zero,401a62c <alt_find_file+0xb0>
 401a60c:	e0bffe17 	ldw	r2,-8(fp)
 401a610:	e0ffff17 	ldw	r3,-4(fp)
 401a614:	1885883a 	add	r2,r3,r2
 401a618:	10800003 	ldbu	r2,0(r2)
 401a61c:	10803fcc 	andi	r2,r2,255
 401a620:	1080201c 	xori	r2,r2,128
 401a624:	10bfe004 	addi	r2,r2,-128
 401a628:	10000a1e 	bne	r2,zero,401a654 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401a62c:	e0bffd17 	ldw	r2,-12(fp)
 401a630:	10800217 	ldw	r2,8(r2)
 401a634:	e0fffe17 	ldw	r3,-8(fp)
 401a638:	180d883a 	mov	r6,r3
 401a63c:	e17fff17 	ldw	r5,-4(fp)
 401a640:	1009883a 	mov	r4,r2
 401a644:	400bb540 	call	400bb54 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401a648:	1000021e 	bne	r2,zero,401a654 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401a64c:	e0bffd17 	ldw	r2,-12(fp)
 401a650:	00000706 	br	401a670 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401a654:	e0bffd17 	ldw	r2,-12(fp)
 401a658:	10800017 	ldw	r2,0(r2)
 401a65c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401a660:	e0fffd17 	ldw	r3,-12(fp)
 401a664:	d0a02104 	addi	r2,gp,-32636
 401a668:	18bfcc1e 	bne	r3,r2,401a59c <__alt_data_end+0xfc01a59c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401a66c:	0005883a 	mov	r2,zero
}
 401a670:	e037883a 	mov	sp,fp
 401a674:	dfc00117 	ldw	ra,4(sp)
 401a678:	df000017 	ldw	fp,0(sp)
 401a67c:	dec00204 	addi	sp,sp,8
 401a680:	f800283a 	ret

0401a684 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401a684:	defffc04 	addi	sp,sp,-16
 401a688:	df000315 	stw	fp,12(sp)
 401a68c:	df000304 	addi	fp,sp,12
 401a690:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 401a694:	00bffa04 	movi	r2,-24
 401a698:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401a69c:	e03ffd15 	stw	zero,-12(fp)
 401a6a0:	00001906 	br	401a708 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 401a6a4:	008100b4 	movhi	r2,1026
 401a6a8:	109f5104 	addi	r2,r2,32068
 401a6ac:	e0fffd17 	ldw	r3,-12(fp)
 401a6b0:	18c00324 	muli	r3,r3,12
 401a6b4:	10c5883a 	add	r2,r2,r3
 401a6b8:	10800017 	ldw	r2,0(r2)
 401a6bc:	10000f1e 	bne	r2,zero,401a6fc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 401a6c0:	008100b4 	movhi	r2,1026
 401a6c4:	109f5104 	addi	r2,r2,32068
 401a6c8:	e0fffd17 	ldw	r3,-12(fp)
 401a6cc:	18c00324 	muli	r3,r3,12
 401a6d0:	10c5883a 	add	r2,r2,r3
 401a6d4:	e0ffff17 	ldw	r3,-4(fp)
 401a6d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401a6dc:	d0e02517 	ldw	r3,-32620(gp)
 401a6e0:	e0bffd17 	ldw	r2,-12(fp)
 401a6e4:	1880020e 	bge	r3,r2,401a6f0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 401a6e8:	e0bffd17 	ldw	r2,-12(fp)
 401a6ec:	d0a02515 	stw	r2,-32620(gp)
      }
      rc = i;
 401a6f0:	e0bffd17 	ldw	r2,-12(fp)
 401a6f4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 401a6f8:	00000606 	br	401a714 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401a6fc:	e0bffd17 	ldw	r2,-12(fp)
 401a700:	10800044 	addi	r2,r2,1
 401a704:	e0bffd15 	stw	r2,-12(fp)
 401a708:	e0bffd17 	ldw	r2,-12(fp)
 401a70c:	10800810 	cmplti	r2,r2,32
 401a710:	103fe41e 	bne	r2,zero,401a6a4 <__alt_data_end+0xfc01a6a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401a714:	e0bffe17 	ldw	r2,-8(fp)
}
 401a718:	e037883a 	mov	sp,fp
 401a71c:	df000017 	ldw	fp,0(sp)
 401a720:	dec00104 	addi	sp,sp,4
 401a724:	f800283a 	ret

0401a728 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 401a728:	defffb04 	addi	sp,sp,-20
 401a72c:	df000415 	stw	fp,16(sp)
 401a730:	df000404 	addi	fp,sp,16
 401a734:	e13ffe15 	stw	r4,-8(fp)
 401a738:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 401a73c:	e0bfff17 	ldw	r2,-4(fp)
 401a740:	10840070 	cmpltui	r2,r2,4097
 401a744:	1000021e 	bne	r2,zero,401a750 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 401a748:	00840004 	movi	r2,4096
 401a74c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 401a750:	e0fffe17 	ldw	r3,-8(fp)
 401a754:	e0bfff17 	ldw	r2,-4(fp)
 401a758:	1885883a 	add	r2,r3,r2
 401a75c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 401a760:	e0bffe17 	ldw	r2,-8(fp)
 401a764:	e0bffc15 	stw	r2,-16(fp)
 401a768:	00000506 	br	401a780 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 401a76c:	e0bffc17 	ldw	r2,-16(fp)
 401a770:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 401a774:	e0bffc17 	ldw	r2,-16(fp)
 401a778:	10800804 	addi	r2,r2,32
 401a77c:	e0bffc15 	stw	r2,-16(fp)
 401a780:	e0fffc17 	ldw	r3,-16(fp)
 401a784:	e0bffd17 	ldw	r2,-12(fp)
 401a788:	18bff836 	bltu	r3,r2,401a76c <__alt_data_end+0xfc01a76c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 401a78c:	e0bffe17 	ldw	r2,-8(fp)
 401a790:	108007cc 	andi	r2,r2,31
 401a794:	10000226 	beq	r2,zero,401a7a0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 401a798:	e0bffc17 	ldw	r2,-16(fp)
 401a79c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 401a7a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 401a7a4:	0001883a 	nop
 401a7a8:	e037883a 	mov	sp,fp
 401a7ac:	df000017 	ldw	fp,0(sp)
 401a7b0:	dec00104 	addi	sp,sp,4
 401a7b4:	f800283a 	ret

0401a7b8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401a7b8:	defffe04 	addi	sp,sp,-8
 401a7bc:	df000115 	stw	fp,4(sp)
 401a7c0:	df000104 	addi	fp,sp,4
 401a7c4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401a7c8:	e0bfff17 	ldw	r2,-4(fp)
 401a7cc:	10bffe84 	addi	r2,r2,-6
 401a7d0:	10c00428 	cmpgeui	r3,r2,16
 401a7d4:	18001a1e 	bne	r3,zero,401a840 <alt_exception_cause_generated_bad_addr+0x88>
 401a7d8:	100690ba 	slli	r3,r2,2
 401a7dc:	008100b4 	movhi	r2,1026
 401a7e0:	10a9fc04 	addi	r2,r2,-22544
 401a7e4:	1885883a 	add	r2,r3,r2
 401a7e8:	10800017 	ldw	r2,0(r2)
 401a7ec:	1000683a 	jmp	r2
 401a7f0:	0401a830 	cmpltui	r16,zero,1696
 401a7f4:	0401a830 	cmpltui	r16,zero,1696
 401a7f8:	0401a840 	call	401a84 <__reset-0x3bfe57c>
 401a7fc:	0401a840 	call	401a84 <__reset-0x3bfe57c>
 401a800:	0401a840 	call	401a84 <__reset-0x3bfe57c>
 401a804:	0401a830 	cmpltui	r16,zero,1696
 401a808:	0401a838 	rdprs	r16,zero,1696
 401a80c:	0401a840 	call	401a84 <__reset-0x3bfe57c>
 401a810:	0401a830 	cmpltui	r16,zero,1696
 401a814:	0401a830 	cmpltui	r16,zero,1696
 401a818:	0401a840 	call	401a84 <__reset-0x3bfe57c>
 401a81c:	0401a830 	cmpltui	r16,zero,1696
 401a820:	0401a838 	rdprs	r16,zero,1696
 401a824:	0401a840 	call	401a84 <__reset-0x3bfe57c>
 401a828:	0401a840 	call	401a84 <__reset-0x3bfe57c>
 401a82c:	0401a830 	cmpltui	r16,zero,1696
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401a830:	00800044 	movi	r2,1
 401a834:	00000306 	br	401a844 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401a838:	0005883a 	mov	r2,zero
 401a83c:	00000106 	br	401a844 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401a840:	0005883a 	mov	r2,zero
  }
}
 401a844:	e037883a 	mov	sp,fp
 401a848:	df000017 	ldw	fp,0(sp)
 401a84c:	dec00104 	addi	sp,sp,4
 401a850:	f800283a 	ret

0401a854 <atexit>:
 401a854:	200b883a 	mov	r5,r4
 401a858:	000f883a 	mov	r7,zero
 401a85c:	000d883a 	mov	r6,zero
 401a860:	0009883a 	mov	r4,zero
 401a864:	401a8a01 	jmpi	401a8a0 <__register_exitproc>

0401a868 <exit>:
 401a868:	defffe04 	addi	sp,sp,-8
 401a86c:	000b883a 	mov	r5,zero
 401a870:	dc000015 	stw	r16,0(sp)
 401a874:	dfc00115 	stw	ra,4(sp)
 401a878:	2021883a 	mov	r16,r4
 401a87c:	401a9b80 	call	401a9b8 <__call_exitprocs>
 401a880:	008100f4 	movhi	r2,1027
 401a884:	10a3e404 	addi	r2,r2,-28784
 401a888:	11000017 	ldw	r4,0(r2)
 401a88c:	20800f17 	ldw	r2,60(r4)
 401a890:	10000126 	beq	r2,zero,401a898 <exit+0x30>
 401a894:	103ee83a 	callr	r2
 401a898:	8009883a 	mov	r4,r16
 401a89c:	4017f740 	call	4017f74 <_exit>

0401a8a0 <__register_exitproc>:
 401a8a0:	defffa04 	addi	sp,sp,-24
 401a8a4:	dc000315 	stw	r16,12(sp)
 401a8a8:	040100f4 	movhi	r16,1027
 401a8ac:	8423e404 	addi	r16,r16,-28784
 401a8b0:	80c00017 	ldw	r3,0(r16)
 401a8b4:	dc400415 	stw	r17,16(sp)
 401a8b8:	dfc00515 	stw	ra,20(sp)
 401a8bc:	18805217 	ldw	r2,328(r3)
 401a8c0:	2023883a 	mov	r17,r4
 401a8c4:	10003726 	beq	r2,zero,401a9a4 <__register_exitproc+0x104>
 401a8c8:	10c00117 	ldw	r3,4(r2)
 401a8cc:	010007c4 	movi	r4,31
 401a8d0:	20c00e16 	blt	r4,r3,401a90c <__register_exitproc+0x6c>
 401a8d4:	1a000044 	addi	r8,r3,1
 401a8d8:	8800221e 	bne	r17,zero,401a964 <__register_exitproc+0xc4>
 401a8dc:	18c00084 	addi	r3,r3,2
 401a8e0:	18c7883a 	add	r3,r3,r3
 401a8e4:	18c7883a 	add	r3,r3,r3
 401a8e8:	12000115 	stw	r8,4(r2)
 401a8ec:	10c7883a 	add	r3,r2,r3
 401a8f0:	19400015 	stw	r5,0(r3)
 401a8f4:	0005883a 	mov	r2,zero
 401a8f8:	dfc00517 	ldw	ra,20(sp)
 401a8fc:	dc400417 	ldw	r17,16(sp)
 401a900:	dc000317 	ldw	r16,12(sp)
 401a904:	dec00604 	addi	sp,sp,24
 401a908:	f800283a 	ret
 401a90c:	00810074 	movhi	r2,1025
 401a910:	10acc804 	addi	r2,r2,-19680
 401a914:	10002626 	beq	r2,zero,401a9b0 <__register_exitproc+0x110>
 401a918:	01006404 	movi	r4,400
 401a91c:	d9400015 	stw	r5,0(sp)
 401a920:	d9800115 	stw	r6,4(sp)
 401a924:	d9c00215 	stw	r7,8(sp)
 401a928:	400b3200 	call	400b320 <malloc>
 401a92c:	d9400017 	ldw	r5,0(sp)
 401a930:	d9800117 	ldw	r6,4(sp)
 401a934:	d9c00217 	ldw	r7,8(sp)
 401a938:	10001d26 	beq	r2,zero,401a9b0 <__register_exitproc+0x110>
 401a93c:	81000017 	ldw	r4,0(r16)
 401a940:	10000115 	stw	zero,4(r2)
 401a944:	02000044 	movi	r8,1
 401a948:	22405217 	ldw	r9,328(r4)
 401a94c:	0007883a 	mov	r3,zero
 401a950:	12400015 	stw	r9,0(r2)
 401a954:	20805215 	stw	r2,328(r4)
 401a958:	10006215 	stw	zero,392(r2)
 401a95c:	10006315 	stw	zero,396(r2)
 401a960:	883fde26 	beq	r17,zero,401a8dc <__alt_data_end+0xfc01a8dc>
 401a964:	18c9883a 	add	r4,r3,r3
 401a968:	2109883a 	add	r4,r4,r4
 401a96c:	1109883a 	add	r4,r2,r4
 401a970:	21802215 	stw	r6,136(r4)
 401a974:	01800044 	movi	r6,1
 401a978:	12406217 	ldw	r9,392(r2)
 401a97c:	30cc983a 	sll	r6,r6,r3
 401a980:	4992b03a 	or	r9,r9,r6
 401a984:	12406215 	stw	r9,392(r2)
 401a988:	21c04215 	stw	r7,264(r4)
 401a98c:	01000084 	movi	r4,2
 401a990:	893fd21e 	bne	r17,r4,401a8dc <__alt_data_end+0xfc01a8dc>
 401a994:	11006317 	ldw	r4,396(r2)
 401a998:	218cb03a 	or	r6,r4,r6
 401a99c:	11806315 	stw	r6,396(r2)
 401a9a0:	003fce06 	br	401a8dc <__alt_data_end+0xfc01a8dc>
 401a9a4:	18805304 	addi	r2,r3,332
 401a9a8:	18805215 	stw	r2,328(r3)
 401a9ac:	003fc606 	br	401a8c8 <__alt_data_end+0xfc01a8c8>
 401a9b0:	00bfffc4 	movi	r2,-1
 401a9b4:	003fd006 	br	401a8f8 <__alt_data_end+0xfc01a8f8>

0401a9b8 <__call_exitprocs>:
 401a9b8:	defff504 	addi	sp,sp,-44
 401a9bc:	df000915 	stw	fp,36(sp)
 401a9c0:	dd400615 	stw	r21,24(sp)
 401a9c4:	dc800315 	stw	r18,12(sp)
 401a9c8:	dfc00a15 	stw	ra,40(sp)
 401a9cc:	ddc00815 	stw	r23,32(sp)
 401a9d0:	dd800715 	stw	r22,28(sp)
 401a9d4:	dd000515 	stw	r20,20(sp)
 401a9d8:	dcc00415 	stw	r19,16(sp)
 401a9dc:	dc400215 	stw	r17,8(sp)
 401a9e0:	dc000115 	stw	r16,4(sp)
 401a9e4:	d9000015 	stw	r4,0(sp)
 401a9e8:	2839883a 	mov	fp,r5
 401a9ec:	04800044 	movi	r18,1
 401a9f0:	057fffc4 	movi	r21,-1
 401a9f4:	008100f4 	movhi	r2,1027
 401a9f8:	10a3e404 	addi	r2,r2,-28784
 401a9fc:	12000017 	ldw	r8,0(r2)
 401aa00:	45005217 	ldw	r20,328(r8)
 401aa04:	44c05204 	addi	r19,r8,328
 401aa08:	a0001c26 	beq	r20,zero,401aa7c <__call_exitprocs+0xc4>
 401aa0c:	a0800117 	ldw	r2,4(r20)
 401aa10:	15ffffc4 	addi	r23,r2,-1
 401aa14:	b8000d16 	blt	r23,zero,401aa4c <__call_exitprocs+0x94>
 401aa18:	14000044 	addi	r16,r2,1
 401aa1c:	8421883a 	add	r16,r16,r16
 401aa20:	8421883a 	add	r16,r16,r16
 401aa24:	84402004 	addi	r17,r16,128
 401aa28:	a463883a 	add	r17,r20,r17
 401aa2c:	a421883a 	add	r16,r20,r16
 401aa30:	e0001e26 	beq	fp,zero,401aaac <__call_exitprocs+0xf4>
 401aa34:	80804017 	ldw	r2,256(r16)
 401aa38:	e0801c26 	beq	fp,r2,401aaac <__call_exitprocs+0xf4>
 401aa3c:	bdffffc4 	addi	r23,r23,-1
 401aa40:	843fff04 	addi	r16,r16,-4
 401aa44:	8c7fff04 	addi	r17,r17,-4
 401aa48:	bd7ff91e 	bne	r23,r21,401aa30 <__alt_data_end+0xfc01aa30>
 401aa4c:	00810074 	movhi	r2,1025
 401aa50:	10accd04 	addi	r2,r2,-19660
 401aa54:	10000926 	beq	r2,zero,401aa7c <__call_exitprocs+0xc4>
 401aa58:	a0800117 	ldw	r2,4(r20)
 401aa5c:	1000301e 	bne	r2,zero,401ab20 <__call_exitprocs+0x168>
 401aa60:	a0800017 	ldw	r2,0(r20)
 401aa64:	10003226 	beq	r2,zero,401ab30 <__call_exitprocs+0x178>
 401aa68:	a009883a 	mov	r4,r20
 401aa6c:	98800015 	stw	r2,0(r19)
 401aa70:	400b3340 	call	400b334 <free>
 401aa74:	9d000017 	ldw	r20,0(r19)
 401aa78:	a03fe41e 	bne	r20,zero,401aa0c <__alt_data_end+0xfc01aa0c>
 401aa7c:	dfc00a17 	ldw	ra,40(sp)
 401aa80:	df000917 	ldw	fp,36(sp)
 401aa84:	ddc00817 	ldw	r23,32(sp)
 401aa88:	dd800717 	ldw	r22,28(sp)
 401aa8c:	dd400617 	ldw	r21,24(sp)
 401aa90:	dd000517 	ldw	r20,20(sp)
 401aa94:	dcc00417 	ldw	r19,16(sp)
 401aa98:	dc800317 	ldw	r18,12(sp)
 401aa9c:	dc400217 	ldw	r17,8(sp)
 401aaa0:	dc000117 	ldw	r16,4(sp)
 401aaa4:	dec00b04 	addi	sp,sp,44
 401aaa8:	f800283a 	ret
 401aaac:	a0800117 	ldw	r2,4(r20)
 401aab0:	80c00017 	ldw	r3,0(r16)
 401aab4:	10bfffc4 	addi	r2,r2,-1
 401aab8:	15c01426 	beq	r2,r23,401ab0c <__call_exitprocs+0x154>
 401aabc:	80000015 	stw	zero,0(r16)
 401aac0:	183fde26 	beq	r3,zero,401aa3c <__alt_data_end+0xfc01aa3c>
 401aac4:	95c8983a 	sll	r4,r18,r23
 401aac8:	a0806217 	ldw	r2,392(r20)
 401aacc:	a5800117 	ldw	r22,4(r20)
 401aad0:	2084703a 	and	r2,r4,r2
 401aad4:	10000b26 	beq	r2,zero,401ab04 <__call_exitprocs+0x14c>
 401aad8:	a0806317 	ldw	r2,396(r20)
 401aadc:	2088703a 	and	r4,r4,r2
 401aae0:	20000c1e 	bne	r4,zero,401ab14 <__call_exitprocs+0x15c>
 401aae4:	89400017 	ldw	r5,0(r17)
 401aae8:	d9000017 	ldw	r4,0(sp)
 401aaec:	183ee83a 	callr	r3
 401aaf0:	a0800117 	ldw	r2,4(r20)
 401aaf4:	15bfbf1e 	bne	r2,r22,401a9f4 <__alt_data_end+0xfc01a9f4>
 401aaf8:	98800017 	ldw	r2,0(r19)
 401aafc:	153fcf26 	beq	r2,r20,401aa3c <__alt_data_end+0xfc01aa3c>
 401ab00:	003fbc06 	br	401a9f4 <__alt_data_end+0xfc01a9f4>
 401ab04:	183ee83a 	callr	r3
 401ab08:	003ff906 	br	401aaf0 <__alt_data_end+0xfc01aaf0>
 401ab0c:	a5c00115 	stw	r23,4(r20)
 401ab10:	003feb06 	br	401aac0 <__alt_data_end+0xfc01aac0>
 401ab14:	89000017 	ldw	r4,0(r17)
 401ab18:	183ee83a 	callr	r3
 401ab1c:	003ff406 	br	401aaf0 <__alt_data_end+0xfc01aaf0>
 401ab20:	a0800017 	ldw	r2,0(r20)
 401ab24:	a027883a 	mov	r19,r20
 401ab28:	1029883a 	mov	r20,r2
 401ab2c:	003fb606 	br	401aa08 <__alt_data_end+0xfc01aa08>
 401ab30:	0005883a 	mov	r2,zero
 401ab34:	003ffb06 	br	401ab24 <__alt_data_end+0xfc01ab24>
 401ab38:	0201ffff 	0x201ffff
 401ab3c:	ffff0000 	call	ffff000 <__alt_data_end+0x7fff000>
 401ab40:	00000201 	jmpi	20 <__reset-0x3ffffe0>
 401ab44:	0201ffff 	0x201ffff
 401ab48:	883a0000 	call	883a000 <__alt_data_end+0x83a000>
 401ab4c:	010d0bff 	0x10d0bff
 401ab50:	01010002 	0x1010002
	...
 401ab5c:	010d0bff 	0x10d0bff
 401ab60:	01010004 	movi	r4,1024
 401ab64:	00000100 	call	10 <__reset-0x3fffff0>
 401ab68:	00000000 	call	0 <__reset-0x4000000>
 401ab6c:	01110bff 	0x1110bff
 401ab70:	01010004 	movi	r4,1024
 401ab74:	7f000105 	stb	fp,4(r15)
 401ab78:	007d0000 	call	7d000 <__reset-0x3f83000>
 401ab7c:	00000000 	call	0 <__reset-0x4000000>
 401ab80:	01883a00 	call	1883a0 <__reset-0x3e77c60>
 401ab84:	040025b8 	rdprs	r16,zero,150
 401ab88:	04003110 	cmplti	r16,zero,196
 401ab8c:	04003b44 	movi	r16,237
 401ab90:	04004e40 	call	4004e4 <__reset-0x3bffb1c>
 401ab94:	04005888 	cmpgei	r16,zero,354
 401ab98:	04006114 	movui	r16,388
 401ab9c:	04007500 	call	400750 <__reset-0x3bff8b0>
 401aba0:	0400800c 	andi	r16,zero,512
 401aba4:	040089c8 	cmpgei	r16,zero,551
 401aba8:	04008d54 	movui	r16,565
 401abac:	0400aaa0 	cmpeqi	r16,zero,682
