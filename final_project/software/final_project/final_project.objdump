
final_project.elf:     file format elf32-littlenios2
final_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0001d1f8 memsz 0x0001d1f8 flags r-x
    LOAD off    0x0001e218 vaddr 0x0401d218 paddr 0x04029ca0 align 2**12
         filesz 0x0000ca88 memsz 0x0000ca88 flags rw-
    LOAD off    0x0002b728 vaddr 0x04036728 paddr 0x04036728 align 2**12
         filesz 0x00000000 memsz 0x00000270 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b560  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001a88  0401b790  0401b790  0001c790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000ca88  0401d218  04029ca0  0001e218  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000270  04036728  04036728  0002b728  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04036998  04036998  0002aca0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002aca0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000019c0  00000000  00000000  0002acc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003ff70  00000000  00000000  0002c688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000fcf1  00000000  00000000  0006c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00012e8d  00000000  00000000  0007c2e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000059c8  00000000  00000000  0008f178  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000a4dc  00000000  00000000  00094b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001bdb4  00000000  00000000  0009f01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000badd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000025d0  00000000  00000000  000bae10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000c56fe  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000c5701  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000c570d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000c570e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000c570f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000c5713  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000c5717  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000c571b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000c5724  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000c572d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  000c5736  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005a  00000000  00000000  000c5747  2**0
                  CONTENTS, READONLY
 29 .jdi          00005752  00000000  00000000  000c57a1  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00080c48  00000000  00000000  000caef3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
0401b790 l    d  .rodata	00000000 .rodata
0401d218 l    d  .rwdata	00000000 .rwdata
04036728 l    d  .bss	00000000 .bss
04036998 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 pixel_vga.c
0401d218 l     O .rwdata	00000c97 server_font_data
0401deb0 l     O .rwdata	0000017c server_char_indices
0401e02c l     O .rwdata	0000005f server_widths
0401e08b l     O .rwdata	00000ed4 channel_font_data
0401ef60 l     O .rwdata	0000017c channel_char_indices
0401f0dc l     O .rwdata	0000005f channel_widths
0401f13b l     O .rwdata	00001ee3 title_font_data
04021020 l     O .rwdata	0000017c title_char_indices
0402119c l     O .rwdata	0000005f title_widths
040211fb l     O .rwdata	00000980 uname_font_data
04021b7c l     O .rwdata	0000017c uname_char_indices
04021cf8 l     O .rwdata	0000005f uname_widths
04021d57 l     O .rwdata	00000925 message_font_data
0402267c l     O .rwdata	0000017c message_char_indices
040227f8 l     O .rwdata	0000005f message_widths
04036728 l     O .bss	00000004 vga_ctrl
04022857 l     O .rwdata	0000000c colors
04022864 l     O .rwdata	00000050 fonts
040228b4 l     O .rwdata	00000100 decode_ascii
00000000 l    df *ABS*	00000000 Dhcp.cpp
0403672c l     O .bss	00000004 _ZL11INADDR_NONE
040025a0 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04002600 l     F .text	00000030 _GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm
00000000 l    df *ABS*	00000000 Dns.cpp
04036730 l     O .bss	00000004 _ZL11INADDR_NONE
04003100 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04003160 l     F .text	00000030 _GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress
00000000 l    df *ABS*	00000000 Ethernet.cpp
04036734 l     O .bss	00000004 _ZL11INADDR_NONE
04036740 l     O .bss	00000008 _ZGVZN13EthernetClass5beginEPhmmE6s_dhcp
040367b4 l     O .bss	0000005c _ZZN13EthernetClass5beginEPhmmE6s_dhcp
04003b34 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
04003b9c l     F .text	00000030 _GLOBAL__sub_I__ZN13EthernetClass17_dnsServerAddressE
00000000 l    df *ABS*	00000000 EthernetClient.cpp
0403674c l     O .bss	00000004 _ZL11INADDR_NONE
04004e38 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04004e98 l     F .text	00000030 _GLOBAL__sub_I__ZN14EthernetClient7connectEPKct
00000000 l    df *ABS*	00000000 EthernetServer.cpp
04036750 l     O .bss	00000004 _ZL11INADDR_NONE
04005880 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
040058e0 l     F .text	00000030 _GLOBAL__sub_I__ZN14EthernetServer11server_portE
00000000 l    df *ABS*	00000000 EthernetUdp.cpp
04036754 l     O .bss	00000004 _ZL11INADDR_NONE
0400610c l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
0400616c l     F .text	00000030 _GLOBAL__sub_I__ZN11EthernetUDP5beginEt
00000000 l    df *ABS*	00000000 socket.cpp
04036758 l     O .bss	00000004 _ZL11INADDR_NONE
04029c2c l     O .rwdata	00000002 _ZL10local_port
04036820 l     O .bss	00000040 _ZL5state
04006a0c l     F .text	0000006c _ZL11getSnRX_RSRh
04006a78 l     F .text	0000011c _ZL9read_datahtPht
04006f6c l     F .text	0000008c _ZL11getSnTX_FSRh
04006ff8 l     F .text	00000158 _ZL10write_datahtPKht
040074f8 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04007558 l     F .text	00000030 _GLOBAL__sub_I__ZN13EthernetClass14socketPortRandEt
00000000 l    df *ABS*	00000000 IPAddress.cpp
0403675c l     O .bss	00000004 _ZL11INADDR_NONE
04008014 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04008074 l     F .text	00000030 _GLOBAL__sub_I__ZN9IPAddressC2Ev
00000000 l    df *ABS*	00000000 w5100.cpp
04036760 l     O .bss	00000004 _ZL11INADDR_NONE
04036767 l     O .bss	00000001 _ZZN10W5100Class4initEvE11initialized
040089d0 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
04008a30 l     F .text	00000030 _GLOBAL__sub_I__ZN10W5100Class4chipE
00000000 l    df *ABS*	00000000 main.cpp
04036768 l     O .bss	00000004 _ZL11INADDR_NONE
040229b4 l     O .rwdata	00000c97 _ZL16server_font_data
0402364c l     O .rwdata	0000017c _ZL19server_char_indices
040237c8 l     O .rwdata	0000005f _ZL13server_widths
04023827 l     O .rwdata	00000ed4 _ZL17channel_font_data
040246fc l     O .rwdata	0000017c _ZL20channel_char_indices
04024878 l     O .rwdata	0000005f _ZL14channel_widths
040248d7 l     O .rwdata	00001ee3 _ZL15title_font_data
040267bc l     O .rwdata	0000017c _ZL18title_char_indices
04026938 l     O .rwdata	0000005f _ZL12title_widths
04026997 l     O .rwdata	00000980 _ZL15uname_font_data
04027318 l     O .rwdata	0000017c _ZL18uname_char_indices
04027494 l     O .rwdata	0000005f _ZL12uname_widths
040274f3 l     O .rwdata	00000925 _ZL17message_font_data
04027e18 l     O .rwdata	0000017c _ZL20message_char_indices
04027f94 l     O .rwdata	0000005f _ZL14message_widths
0403676c l     O .bss	00000004 _ZL8vga_ctrl
04027ff3 l     O .rwdata	0000000c _ZL6colors
04028000 l     O .rwdata	00000050 _ZL5fonts
04028050 l     O .rwdata	00000100 _ZL12decode_ascii
04009068 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
040090c8 l     F .text	00000030 _GLOBAL__sub_I_mac
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
04009478 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0400951c l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
04009728 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0400977c l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
04009808 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0400993c l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
040099c4 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
04009bf0 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
0400a4cc l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 guard.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0400ac78 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
04036860 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0400ad30 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0400aee0 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
04036770 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 guard_error.cc
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0400b204 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
04036778 l     O .bss	00000004 fc_static
0400b31c l     F .text	000000c0 _Unwind_RaiseException_Phase2
0400b3dc l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
04028150 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401cf6a l     O .rodata	00000010 zeroes.4404
0400ebd4 l     F .text	000000bc __sbprintf
0401cf7a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400ede4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0401093c l     F .text	00000008 __fp_unlock
04010950 l     F .text	0000019c __sinit.part.1
04010aec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0402899c l     O .rwdata	00000020 lc_ctype_charset
0402897c l     O .rwdata	00000020 lc_message_charset
040289bc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0401cfa8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401357c l     F .text	000000fc __sprint_r.part.0
0401d0cc l     O .rodata	00000010 zeroes.4349
04014bb8 l     F .text	000000bc __sbprintf
0401d0dc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04018a24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04018b38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04018b98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
04018cac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
04018d94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04018f00 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04018fec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
040191c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04029c90 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0401943c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04019520 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401965c l     F .text	00000034 alt_dev_reg
04028b9c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04019954 l     F .text	0000020c altera_avalon_jtag_uart_irq
04019b60 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401a394 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401a72c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401ab8c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401acec l     F .text	0000003c alt_get_errno
0401ad28 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
040367b0 g     O .bss	00000004 alt_instruction_exception_handler
0400ae38 g     F .text	00000028 __cxa_free_exception
04005250  w    F .text	00000048 _ZN9DNSClientC2Ev
040051f0  w    F .text	00000060 _ZN10W5100Class11readSnDPORTEh
0400c31c g     F .text	00000018 putchar
04009420 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
04012b88 g     F .text	00000074 _mprec_log10
04002470 g     F .text	00000040 _ZN9DhcpClass15getDhcpServerIpEv
0400ac18 g     F .text	00000018 _ZSt10unexpectedv
04012c74 g     F .text	0000008c __any_on
04006878 g     F .text	00000040 _ZN13EthernetClass12socketStatusEh
040152c4 g     F .text	00000054 _isatty_r
0401cfb4 g     O .rodata	00000028 __mprec_tinytens
04008314 g     F .text	000000d8 _ZN10W5100Class7isW5200Ev
04019104 g     F .text	0000007c alt_main
04003e54  w    F .text	00000040 _ZN10W5100Class21setRetransmissionTimeEt
0400c334 g     F .text	000000c0 _puts_r
04006220  w    F .text	00000028 _ZN11EthernetUDP9localPortEv
04036898 g     O .bss	00000100 alt_irq
0400afd4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0401caac  w    O .rodata	00000018 _ZTV14EthernetServer
04003d3c  w    F .text	00000038 _ZN10W5100Class13getSubnetMaskEPh
04007cc8 g     F .text	00000070 _ZN9IPAddressC1Ehhhh
04015318 g     F .text	00000060 _lseek_r
0400b498 g     F .text	00000020 .hidden _Unwind_GetIPInfo
040024b0 g     F .text	00000040 _ZN9DhcpClass14getDnsServerIpEv
04029ca0 g       *ABS*	00000000 __flash_rwdata_start
04004b68 g     F .text	000000b0 _ZN14EthernetClient9connectedEv
040083ec g     F .text	000000d8 _ZN10W5100Class7isW5500Ev
040036bc g     F .text	00000058 _ZN13EthernetClass10linkStatusEv
040173fc g     F .text	00000088 .hidden __eqdf2
04007c9c g     F .text	0000002c _ZN9IPAddressC2Ev
0400a5a0 g     F .text	00000084 __cxa_rethrow
04006528 g     F .text	00000350 _ZN13EthernetClass20socketBeginMulticastEh9IPAddresst
04003c30  w    F .text	00000064 _ZN11EthernetUDPC2Ev
0400b424 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0400ac54 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
04004cf4 g     F .text	00000060 _ZN14EthernetClient9localPortEv
0400b488 g     F .text	00000010 .hidden _Unwind_GetIP
04036998 g       *ABS*	00000000 __alt_heap_start
0400c700 g     F .text	0000005c _kill_r
0400c2d8 g     F .text	0000003c printf
040153d8 g     F .text	0000009c _wcrtomb_r
04005298 g     F .text	000000a0 _ZN14EthernetServer5beginEv
0400c4c8 g     F .text	00000084 _signal_r
04003f90  w    F .text	00000038 _ZN10W5100Class9writeSUBREPKh
04013518 g     F .text	0000005c __sseek
04010c9c g     F .text	00000010 __sinit
04014c74 g     F .text	00000140 __swbuf_r
04036765 g     O .bss	00000001 _ZN10W5100Class11CH_BASE_MSBE
0400aeb4 g     F .text	0000002c __cxa_free_dependent_exception
040090f8  w    F .text	00000060 _ZN14EthernetClientC1Ev
04009158 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
04011770 g     F .text	0000007c _setlocale_r
0401cccc  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
04010af4 g     F .text	00000078 __sfmoreglue
040039f0 g     F .text	0000004c _ZN13EthernetClass13setSubnetMaskE9IPAddress
040191a4 g     F .text	00000024 __malloc_unlock
0400afd4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
04003de4  w    F .text	00000038 _ZN10W5100Class12setIPAddressEPKh
0400a848 g     F .text	00000020 _ZSt18uncaught_exceptionv
0400a644 g     F .text	00000020 __cxa_deleted_virtual
04011aec g     F .text	0000015c memmove
0400afac g     F .text	00000004 _ZNSt9exceptionD2Ev
04010c84 g     F .text	00000018 _cleanup
04003ed4  w    F .text	0000004c _ZN10W5100Class5writeEth
04011c48 g     F .text	000000a8 _Balloc
04000648 g     F .text	00000240 draw_char
040050d4  w    F .text	00000074 _ZN10W5100Class6readSnEhtPht
0400026c g     F .text	000000a4 set_color_palette
04017484 g     F .text	000000dc .hidden __gtdf2
0401cea0  w    O .rodata	00000014 _ZTVSt13bad_exception
0401b114 g     F .text	00000024 altera_nios2_gen2_irq_init
04005d18 g     F .text	00000134 _ZN11EthernetUDP11parsePacketEv
0400797c  w    F .text	00000060 _ZN10W5100Class12readSnTX_FSREh
04000000 g     F .entry	0000000c __reset
040015e8 g     F .text	00000024 _ZN9DhcpClass12presend_DHCPEv
04019478 g     F .text	00000078 times
04005148  w    F .text	00000060 _ZN10W5100Class10readSnPORTEh
0400b4d4 g     F .text	00000008 .hidden _Unwind_GetRegionStart
0400160c g     F .text	00000450 _ZN9DhcpClass17send_DHCP_MESSAGEEht
04000020 g       *ABS*	00000000 __flash_exceptions_start
04015268 g     F .text	0000005c _fstat_r
04036788 g     O .bss	00000004 errno
040023b0 g     F .text	00000040 _ZN9DhcpClass10getLocalIpEv
04013494 g     F .text	00000008 __seofread
0400b6b0 g     F .text	00000074 .hidden _Unwind_Backtrace
0403679c g     O .bss	00000004 alt_argv
04031bfc g       *ABS*	00000000 _gp
040194f0 g     F .text	00000030 usleep
04018c8c g     F .text	00000020 getpid
0400a298 g     F .text	00000230 __cxa_call_unexpected
04004ec8  w    F .text	00000034 _ZN6Client12rawIPAddressER9IPAddress
0400a6d8 g     F .text	00000008 __cxa_get_exception_ptr
04005910  w    F .text	00000034 _ZN6ClientC1Ev
040054dc g     F .text	00000188 _ZN14EthernetServer6acceptEv
04028a1c g     O .rwdata	00000180 alt_fd_list
0401ca8c  w    O .rodata	0000000c _ZTI14EthernetClient
0400c314 g     F .text	00000008 _putchar_r
0400b5c4 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0400b454 g     F .text	00000018 .hidden _Unwind_GetCFA
0400ac30 g     F .text	00000014 _ZSt13set_terminatePFvvE
0400475c g     F .text	00000048 _ZN14EthernetClient7printlnEv
0401b138 g     F .text	00000090 alt_find_dev
0400c8d4 g     F .text	00000008 _times_r
0400c038 g     F .text	00000148 memcpy
04003dac  w    F .text	00000038 _ZN10W5100Class13getMACAddressEPh
04007b64  w    F .text	00000060 _ZN10W5100Class11readSnRX_RDEh
0400ae60 g     F .text	00000054 __cxa_allocate_dependent_exception
04010944 g     F .text	0000000c _cleanup_r
04004880 g     F .text	00000078 _ZN14EthernetClient4readEPhj
0400a8e0 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0401883c g     F .text	000000dc .hidden __floatsidf
040010dc g     F .text	00000094 isDiscord
0401ac70 g     F .text	0000007c alt_io_redirect
04007c14  w    F .text	00000050 _ZN10W5100Class5RBASEEh
04017560 g     F .text	000000f4 .hidden __ltdf2
0401b790 g       *ABS*	00000000 __DTOR_END__
04004620 g     F .text	0000005c _ZN14EthernetClient17availableForWriteEv
0400a8f8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0400c3f4 g     F .text	00000014 puts
0401b394 g     F .text	0000009c alt_exception_cause_generated_bad_addr
040133cc g     F .text	00000074 __fpclassifyd
04012ae4 g     F .text	000000a4 __ratio
04014b9c g     F .text	0000001c __vfiprintf_internal
04019d58 g     F .text	0000021c altera_avalon_jtag_uart_read
0400b788 g     F .text	00000014 malloc
0400c2a8 g     F .text	00000030 _printf_r
0400b120 g     F .text	00000064 .hidden __udivsi3
04018ce8 g     F .text	000000ac isatty
04007a40  w    F .text	00000060 _ZN10W5100Class11readSnTX_WREh
0400c54c g     F .text	000000bc _raise_r
0401d004 g     O .rodata	000000c8 __mprec_tens
04004f1c  w    F .text	00000048 _ZN14EthernetClientD2Ev
04008710 g     F .text	00000254 _ZN10W5100Class4readEtPht
04000e9c g     F .text	00000240 draw_sample
04003a88 g     F .text	00000068 _ZN13EthernetClass24setRetransmissionTimeoutEt
040117ec g     F .text	0000000c __locale_charset
0400320c g     F .text	0000028c _ZN13EthernetClass5beginEPhmm
04003c94  w    F .text	00000038 _ZN10W5100Class12setGatewayIpEPKh
04036784 g     O .bss	00000004 __malloc_top_pad
0400c75c g     F .text	00000004 _getpid_r
0400775c  w    F .text	00000050 _ZN10W5100Class9writeSnIREhh
04004070  w    F .text	00000038 _ZN10W5100Class9writeSIPREPKh
04029c70 g     O .rwdata	00000004 __mb_cur_max
04007d6c g     F .text	00000044 _ZN9IPAddressC1EPKh
0401181c g     F .text	0000000c _localeconv_r
040068f8 g     F .text	00000064 _ZN13EthernetClass12socketListenEh
0401207c g     F .text	0000003c __i2b
04011120 g     F .text	000004c8 __sfvwrite_r
0400aa78 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0400c608 g     F .text	000000a8 __sigtramp_r
0401cb78  w    O .rodata	0000000e _ZTS11EthernetUDP
0400c408 g     F .text	00000054 _sbrk_r
04029c1c  w    O .rwdata	00000008 _ZTI6Server
04002690  w    F .text	00000028 _ZN11EthernetUDP10remotePortEv
0401cd3c  w    O .rodata	00000020 _ZTVSt9type_info
04001170 g     F .text	000000ac _ZN9DhcpClass13beginWithDHCPEPhmm
04008acc  w    F .text	00000040 _ZN10W5100Class9writeRMSREh
04006b94 g     F .text	000002a0 _ZN13EthernetClass10socketRecvEhPhs
04004efc  w    F .text	00000020 _ZN13EthernetClass11dnsServerIPEv
04015378 g     F .text	00000060 _read_r
0400afb4 g     F .text	0000000c _ZNKSt9exception4whatEv
04029c88 g     O .rwdata	00000004 alt_max_fd
040038e0 g     F .text	00000044 _ZN13EthernetClass10subnetMaskEv
04014f5c g     F .text	000000f0 _fclose_r
040079dc  w    F .text	00000064 _ZN10W5100Class12writeSnTX_WREht
04008a60  w    F .text	00000040 _ZN10W5100Class7writeMREh
0401090c g     F .text	00000030 fflush
04036780 g     O .bss	00000004 __malloc_max_sbrked_mem
0400619c  w    F .text	00000034 _ZN3UDP12rawIPAddressER9IPAddress
04007db0 g     F .text	00000130 _ZN9IPAddress10fromStringEPKc
0400605c g     F .text	000000b0 _ZN11EthernetUDP14beginMulticastE9IPAddresst
0400052c g     F .text	000000c4 debug
04006ee0 g     F .text	0000008c _ZN13EthernetClass10socketPeekEh
04016180 g     F .text	000008ac .hidden __adddf3
04007f9c g     F .text	00000034 _ZN9IPAddressaSEm
0401cd00  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
040047a4 g     F .text	00000080 _ZN14EthernetClient7printlnEPKc
0401cac4  w    O .rodata	00000038 _ZTV6Client
0401288c g     F .text	0000010c __b2d
04015bbc g     F .text	000005c4 .hidden __umoddi3
04019028 g     F .text	000000dc lseek
04005c64 g     F .text	0000002c _ZN11EthernetUDP5writeEh
040023f0 g     F .text	00000040 _ZN9DhcpClass13getSubnetMaskEv
0400a93c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0400a4c8 g     F .text	00000004 _ZdlPv
0400afe4 g     F .text	00000010 _ZN9__gnu_cxx20recursive_init_errorD1Ev
04029c60 g     O .rwdata	00000004 _global_impure_ptr
04012e68 g     F .text	00000564 _realloc_r
04036998 g       *ABS*	00000000 __bss_end
0401aa9c g     F .text	000000f0 alt_iic_isr_register
04005028  w    F .text	0000004c _ZN14EthernetClientneERKS_
040005f0 g     F .text	00000058 draw_background
0401b00c g     F .text	00000108 alt_tick
0400430c g     F .text	00000314 _ZN14EthernetClient7connectE9IPAddresst
0400b40c g     F .text	00000018 .hidden _Unwind_SjLj_Register
040155c0 g     F .text	000005fc .hidden __udivdi3
04002224 g     F .text	0000018c _ZN9DhcpClass10checkLeaseEv
040151c4 g     F .text	00000024 _fputwc_r
0401cfdc g     O .rodata	00000028 __mprec_bigtens
04004ffc  w    F .text	0000002c _ZN14EthernetClientneEb
04011e60 g     F .text	00000104 __s2b
0400b724 g     F .text	00000018 abort
04018918 g     F .text	000000a8 .hidden __floatunsidf
04008c4c  w    F .text	0000003c _ZN10W5100Class8readSnCREh
040125cc g     F .text	00000060 __mcmp
0400a794 g     F .text	000000b4 __cxa_end_catch
04010cbc g     F .text	00000018 __fp_lock_all
0401aa50 g     F .text	0000004c alt_ic_irq_enabled
0400afb0 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
0401af70 g     F .text	0000009c alt_alarm_stop
04005c90 g     F .text	00000088 _ZN11EthernetUDP5writeEPKhj
0401cb1c  w    O .rodata	00000050 _ZTV11EthernetUDP
04007c9c g     F .text	0000002c _ZN9IPAddressC1Ev
0400389c g     F .text	00000044 _ZN13EthernetClass7localIPEv
04004fcc  w    F .text	00000030 _ZN14EthernetClienteqEb
040367a4 g     O .bss	00000004 alt_irq_active
04008ba4  w    F .text	0000002c _ZN10W5100Class17readPSTATUS_W5200Ev
0400abf0 g     F .text	00000018 _ZSt9terminatev
040034f8 g     F .text	00000068 _ZN13EthernetClass5beginEPh9IPAddressS1_
040000fc g     F .exceptions	000000d4 alt_irq_handler
040289f4 g     O .rwdata	00000028 alt_dev_null
04029c2f g     O .rwdata	00000006 mac
04004174  w    F .text	00000020 _ZN10W5100Class7getChipEv
040003dc g     F .text	00000150 draw_rectangle
0400afdc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
04003714 g     F .text	00000060 _ZN13EthernetClass14hardwareStatusEv
04005910  w    F .text	00000034 _ZN6ClientC2Ev
04003f20  w    F .text	00000038 _ZN10W5100Class8writeGAREPKh
0401cd98  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
0401a70c g     F .text	00000020 alt_dcache_flush_all
04011f64 g     F .text	00000068 __hi0bits
04036748 g     O .bss	00000001 Ethernet
04007fd0 g     F .text	00000044 _ZNK9IPAddresseqEPKh
04029c44  w    O .rwdata	00000008 _ZTISt9exception
04029c0c  w    O .rwdata	00000008 _ZTI6Client
04007b00  w    F .text	00000064 _ZN10W5100Class12writeSnRX_RDEht
040187bc g     F .text	00000080 .hidden __fixdfsi
040069cc g     F .text	00000040 _ZN13EthernetClass16socketDisconnectEh
0400762c  w    F .text	0000006c _ZN10W5100Class7writeSnEhth
04007cc8 g     F .text	00000070 _ZN9IPAddressC2Ehhhh
04005fcc g     F .text	0000006c _ZN11EthernetUDP4peekEv
0400770c  w    F .text	00000050 _ZN10W5100Class9writeSnMREhh
04029ca0 g       *ABS*	00000000 __ram_rwdata_end
04007d38 g     F .text	00000034 _ZN9IPAddressC2Em
040031b4  w    F .text	00000028 _ZNK9IPAddresscvmEv
04002c08 g     F .text	000004f8 _ZN9DNSClient15ProcessResponseEtR9IPAddress
0400941c g     F .text	00000004 _ZNSt9type_infoD1Ev
04029c80 g     O .rwdata	00000008 alt_dev_list
0400afdc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
04007c64  w    F .text	00000038 _ZN10W5100Class23hasOffsetAddressMappingEv
04007588  w    F .text	00000044 _ZN10W5100Class4readEt
0401955c g     F .text	00000100 write
040077ac  w    F .text	0000003c _ZN10W5100Class8readSnIREh
04012d00 g     F .text	000000a0 _putc_r
0403673c g     O .bss	00000004 _ZN13EthernetClass5_dhcpE
04009430 g     F .text	00000004 _ZNSt9type_infoD0Ev
0401d218 g       *ABS*	00000000 __ram_rodata_end
04018bd4 g     F .text	000000b8 fstat
04005ae0 g     F .text	000000c4 _ZN11EthernetUDP11beginPacketEPKct
040059ac g     F .text	000000a8 _ZN11EthernetUDP5beginEt
0401ca98  w    O .rodata	00000011 _ZTS14EthernetClient
0401cf00  w    O .rodata	0000000c _ZTIN9__gnu_cxx20recursive_init_errorE
04018dd0 g     F .text	00000130 kill
04017560 g     F .text	000000f4 .hidden __ledf2
04012344 g     F .text	00000140 __pow5mult
04013690 g     F .text	0000150c ___vfiprintf_internal_r
04036794 g     O .bss	00000004 __nlocale_changed
0400b184 g     F .text	00000058 .hidden __umodsi3
04009428 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
04007888  w    F .text	00000048 _ZN10W5100Class11writeSnDHAREhPh
0400ac44 g     F .text	00000010 _ZSt13get_terminatev
040078d0  w    F .text	00000048 _ZN10W5100Class11writeSnDIPREhPh
04036998 g       *ABS*	00000000 end
0401cb08  w    O .rodata	00000011 _ZTS14EthernetServer
04008964 g     F .text	0000006c _ZN10W5100Class9execCmdSnEh7SockCMD
040081e8 g     F .text	00000074 _ZN10W5100Class9softResetEv
04006248 g     F .text	00000044 _ZN13EthernetClass14socketPortRandEt
0400b698 g     F .text	00000018 .hidden _Unwind_DeleteException
040084c4 g     F .text	000000a8 _ZN10W5100Class13getLinkStatusEv
04007824  w    F .text	00000064 _ZN10W5100Class11writeSnPORTEht
04019894 g     F .text	000000c0 altera_avalon_jtag_uart_init
04005944  w    F .text	00000068 _ZN14EthernetClientC2Eh
04003a3c g     F .text	0000004c _ZN13EthernetClass12setGatewayIPE9IPAddress
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04008b78  w    F .text	0000002c _ZN10W5100Class18readVERSIONR_W5500Ev
0400a9a8 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0401b761 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401a40c g     F .text	0000007c alt_avalon_timer_sc_init
040189c0 g     F .text	00000064 .hidden __clzsi2
040040e0  w    F .text	00000054 _ZN10W5100Class8writeRTREt
0400a868 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
040048f8 g     F .text	00000088 _ZN14EthernetClient4peekEv
04019f74 g     F .text	00000224 altera_avalon_jtag_uart_write
04005944  w    F .text	00000068 _ZN14EthernetClientC1Eh
04010cac g     F .text	00000004 __sfp_lock_acquire
0401ce28  w    O .rodata	00000012 _ZTSSt13bad_exception
04004c18 g     F .text	00000058 _ZN14EthernetClient6statusEv
04011a08 g     F .text	000000e4 memchr
0400c8dc g     F .text	000022dc ___vfprintf_internal_r
04005074  w    F .text	00000038 _ZN14EthernetClient20setConnectionTimeoutEt
04010e10 g     F .text	00000310 _free_r
04003680 g     F .text	0000003c _ZN13EthernetClass4initEh
040117f8 g     F .text	00000010 __locale_mb_cur_max
04007918  w    F .text	00000064 _ZN10W5100Class12writeSnDPORTEht
0401b594 g     F .text	00000180 __call_exitprocs
04007450 g     F .text	000000a8 _ZN13EthernetClass13socketSendUDPEh
04036790 g     O .bss	00000004 __mlocale_changed
04029c68 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
040367a8 g     O .bss	00000004 _alt_tick_rate
0401cd2c  w    O .rodata	0000000d _ZTSSt9type_info
04000888 g     F .text	00000614 draw_string
0400a624 g     F .text	00000020 __cxa_pure_virtual
04012484 g     F .text	00000148 __lshift
04003c30  w    F .text	00000064 _ZN11EthernetUDPC1Ev
0401a198 g     F .text	000001fc alt_avalon_spi_command
040367ac g     O .bss	00000004 _alt_nticks
0400c6c4 g     F .text	00000018 signal
04019204 g     F .text	00000104 read
040196c8 g     F .text	00000068 alt_sys_init
040026b8 g     F .text	00000040 _ZN9DNSClient5beginERK9IPAddress
0401b47c g     F .text	00000118 __register_exitproc
04002630  w    F .text	00000038 _ZNK9IPAddresseqERKS_
04004f64  w    F .text	00000038 _ZN14EthernetClientD0Ev
0400919c g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
04004980 g     F .text	00000060 _ZN14EthernetClient4readEv
040120b8 g     F .text	0000028c __multiply
04019c00 g     F .text	00000068 altera_avalon_jtag_uart_close
04005a54 g     F .text	0000002c _ZN11EthernetUDP9availableEv
0400b1dc g     F .text	00000028 .hidden __mulsi3
0401d218 g       *ABS*	00000000 __ram_rwdata_start
0400b4f4 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0401b790 g       *ABS*	00000000 __ram_rodata_start
04036870 g     O .bss	00000028 __malloc_current_mallinfo
0400b608 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
04012998 g     F .text	0000014c __d2b
0401cec8  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0400941c g     F .text	00000004 _ZNSt9type_infoD2Ev
04004f1c  w    F .text	00000048 _ZN14EthernetClientD1Ev
0400afe0 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
04036766 g     O .bss	00000001 W5100
04005338 g     F .text	000001a4 _ZN14EthernetServer9availableEv
040026f8 g     F .text	00000138 _ZN9DNSClient9inet_atonEPKcR9IPAddress
04004000  w    F .text	00000038 _ZN10W5100Class9writeSHAREPKh
04009398 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04003bfc  w    F .text	00000034 _ZN3UDPC1Ev
04004134  w    F .text	00000040 _ZN10W5100Class8writeRCREh
04019730 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401b2d0 g     F .text	000000c4 alt_get_fd
04007698  w    F .text	00000074 _ZN10W5100Class7writeSnEhtPht
04004f9c  w    F .text	00000030 _ZN14EthernetClientcvbEv
0401a5b4 g     F .text	00000158 alt_busy_sleep
04007150 g     F .text	00000138 _ZN13EthernetClass10socketSendEhPKht
04005e4c g     F .text	00000094 _ZN11EthernetUDP4readEv
04029c54  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
04008bfc  w    F .text	00000050 _ZN10W5100Class9writeSnCREhh
04014e2c g     F .text	00000054 _close_r
04003fc8  w    F .text	00000038 _ZN10W5100Class8readSUBREPh
04004dd8 g     F .text	00000060 _ZN14EthernetClient10remotePortEv
040039a4 g     F .text	0000004c _ZN13EthernetClass10setLocalIPE9IPAddress
04002668  w    F .text	00000028 _ZN11EthernetUDP8remoteIPEv
04008bd0  w    F .text	0000002c _ZN10W5100Class17readPHYCFGR_W5500Ev
0400bfbc g     F .text	0000007c memcmp
040197f0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04036998 g       *ABS*	00000000 __alt_stack_base
04019840 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0401cf0c  w    O .rodata	00000014 _ZTVN9__gnu_cxx20recursive_init_errorE
04009158 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
040090f8  w    F .text	00000060 _ZN14EthernetClientC2Ev
0400ec90 g     F .text	00000154 __swsetup_r
0400b64c g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
04016a2c g     F .text	000009d0 .hidden __divdf3
040035cc g     F .text	000000b4 _ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_
04010b6c g     F .text	00000118 __sfp
04012bfc g     F .text	00000078 __copybits
04003e1c  w    F .text	00000038 _ZN10W5100Class12getIPAddressEPh
04009420 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
04028574 g     O .rwdata	00000408 __malloc_av_
04010cb8 g     F .text	00000004 __sinit_lock_release
04017654 g     F .text	0000086c .hidden __muldf3
04013440 g     F .text	00000054 __sread
0401ce8c  w    O .rodata	00000014 _ZTVSt9exception
0400afd8 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
0401b1c8 g     F .text	00000108 alt_find_file
0401a768 g     F .text	000000a4 alt_dev_llist_insert
04019180 g     F .text	00000024 __malloc_lock
0401938c g     F .text	000000b0 sbrk
0401cdc8  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
040040a8  w    F .text	00000038 _ZN10W5100Class8readSIPREPh
0400a510 g     F .text	00000090 __cxa_throw
040108b0 g     F .text	0000005c _fflush_r
0400b4b8 g     F .text	00000010 .hidden _Unwind_SetIP
04014e80 g     F .text	000000dc _calloc_r
040024f0 g     F .text	000000b0 _ZN9DhcpClass9printByteEPch
04007d38 g     F .text	00000034 _ZN9IPAddressC1Em
04036728 g       *ABS*	00000000 __bss_start
0400c180 g     F .text	00000128 memset
04003bfc  w    F .text	00000034 _ZN3UDPC2Ev
04008d28 g     F .text	00000340 main
0400628c g     F .text	0000029c _ZN13EthernetClass11socketBeginEht
040367a0 g     O .bss	00000004 alt_envp
04003774 g     F .text	000000f0 _ZN13EthernetClass8maintainEv
0403677c g     O .bss	00000004 __malloc_max_total_mem
04005724 g     F .text	00000054 _ZN14EthernetServer5writeEh
04019790 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04014db4 g     F .text	00000018 __swbuf
0400af94 g     F .text	0000000c __cxa_get_globals_fast
04003ccc  w    F .text	00000038 _ZN10W5100Class12getGatewayIpEPh
04004c70 g     F .text	00000084 _ZN14EthernetClienteqERKS_
0400aff4 g     F .text	00000034 _ZN9__gnu_cxx20recursive_init_errorD0Ev
04006e34 g     F .text	000000ac _ZN13EthernetClass19socketRecvAvailableEh
04013574 g     F .text	00000008 __sclose
04003968 g     F .text	0000003c _ZN13EthernetClass13setMACAddressEPKh
08000000 g       *ABS*	00000000 __alt_heap_limit
0401504c g     F .text	00000014 fclose
0400f00c g     F .text	00001688 _dtoa_r
0400b7b0 g     F .text	0000080c _malloc_r
04015534 g     F .text	00000030 __ascii_wctomb
0400afc0 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
04029c8c g     O .rwdata	00000004 alt_errno
0401cafc  w    O .rodata	0000000c _ZTI14EthernetServer
0400c6dc g     F .text	00000010 _init_signal
0401cdbc  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
04008b4c  w    F .text	0000002c _ZN10W5100Class18readVERSIONR_W5200Ev
040115e8 g     F .text	000000c4 _fwalk
0400afb0 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
04029bfc  w    O .rwdata	00000008 _ZTI3UDP
040061d0  w    F .text	00000050 _ZN11EthernetUDP4readEPcj
04012da0 g     F .text	000000c8 putc
0400b028 g     F .text	00000084 .hidden __divsi3
04010cec g     F .text	00000124 _malloc_trim_r
0401b790 g       *ABS*	00000000 __CTOR_END__
0400c760 g     F .text	000000dc strcmp
0401b790 g       *ABS*	00000000 __flash_rodata_start
0401ceb4  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0401b790 g       *ABS*	00000000 __DTOR_LIST__
04001a5c g     F .text	000007c8 _ZN9DhcpClass17parseDHCPResponseEmRm
04003af0 g     F .text	00000044 _ZN13EthernetClass22setRetransmissionCountEh
040173fc g     F .text	00000088 .hidden __nedf2
04004038  w    F .text	00000038 _ZN10W5100Class8readSHAREPh
04019690 g     F .text	00000038 alt_irq_init
04007300 g     F .text	00000094 _ZN13EthernetClass16socketBufferDataEhtPKht
04019308 g     F .text	00000084 alt_release_fd
04009168 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0401d0ec g     O .rodata	00000100 .hidden __clz_tab
0403678c g     O .bss	00000004 _PathLocale
04007288 g     F .text	00000078 _ZN13EthernetClass19socketSendAvailableEh
0401b430 g     F .text	00000014 atexit
0400a6c8 g     F .text	00000010 __cxa_guard_release
04014dcc g     F .text	00000060 _write_r
04011828 g     F .text	00000018 setlocale
040080a4 g     F .text	00000144 _ZN10W5100Class4initEv
0400b4ec g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0400af3c g     F .text	00000058 __cxa_call_terminate
04029c24  w    O .rwdata	00000008 _ZTS6Server
04029c64 g     O .rwdata	00000004 _impure_ptr
04029c4c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
04036798 g     O .bss	00000004 alt_argc
04010694 g     F .text	0000021c __sflush_r
0401a86c g     F .text	00000060 _do_dtors
04011814 g     F .text	00000008 __locale_cjk_lang
0400856c g     F .text	000001a4 _ZN10W5100Class5writeEtPKht
04029c04  w    O .rwdata	00000005 _ZTS3UDP
0400ac68 g     F .text	00000010 _ZSt14get_unexpectedv
04000020 g       .exceptions	00000000 alt_irq_entry
04012828 g     F .text	00000064 __ulp
0400b4dc g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
04010cd4 g     F .text	00000018 __fp_unlock_all
04003864 g     F .text	00000038 _ZN13EthernetClass10MACAddressEPh
04029c78 g     O .rwdata	00000008 alt_fs_list
0401ce68  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
0401c9d0  w    O .rodata	0000004c _ZTV3UDP
040041c4  w    F .text	0000003c _ZN9DhcpClassC2Ev
0400b4c8 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
0400a6c0 g     F .text	00000008 __cxa_guard_abort
0400a6e0 g     F .text	000000b4 __cxa_begin_catch
0400825c g     F .text	000000b8 _ZN10W5100Class7isW5100Ev
0400a8f8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0400ac08 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
04036738 g     O .bss	00000004 _ZN13EthernetClass17_dnsServerAddressE
04004a80 g     F .text	000000e8 _ZN14EthernetClient4stopEv
04000020 g       *ABS*	00000000 __ram_exceptions_start
04011840 g     F .text	0000000c localeconv
04003924 g     F .text	00000044 _ZN13EthernetClass9gatewayIPEv
04007aa0  w    F .text	00000060 _ZN10W5100Class12readSnRX_RSREh
0400afd0 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
040077e8  w    F .text	0000003c _ZN10W5100Class8readSnSREh
04029c5c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
040075cc  w    F .text	00000060 _ZN10W5100Class6readSnEht
0401a8ec g     F .text	00000050 alt_ic_isr_register
040046d0 g     F .text	0000008c _ZN14EthernetClient5writeEPKhj
04000310 g     F .text	000000cc init_color_palette
0400add8 g     F .text	00000060 __cxa_allocate_exception
0401ccf4  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
04003190  w    F .text	00000024 _ZN9IPAddress11raw_addressEv
04029ca0 g       *ABS*	00000000 _edata
04036998 g       *ABS*	00000000 _end
04009c98 g     F .text	00000600 __gxx_personality_sj0
04003bcc  w    F .text	00000030 _ZN3UDP14beginMulticastE9IPAddresst
04015060 g     F .text	00000164 __fputwc
04005778 g     F .text	00000108 _ZN14EthernetServer5writeEPKhj
04029c14  w    O .rwdata	00000008 _ZTS6Client
04000230 g       *ABS*	00000000 __ram_exceptions_end
04019c68 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040049e0 g     F .text	000000a0 _ZN14EthernetClient5flushEv
04004194  w    F .text	00000030 _ZN10W5100Class5setSSEh
04001260 g     F .text	00000388 _ZN9DhcpClass18request_DHCP_leaseEv
0400afac g     F .text	00000004 _ZNSt9exceptionD1Ev
0401a9c4 g     F .text	0000008c alt_ic_irq_disable
0400695c g     F .text	00000070 _ZN13EthernetClass13socketConnectEhPht
0401349c g     F .text	0000007c __swrite
040051a8  w    F .text	00000048 _ZN10W5100Class10readSnDIPREhPh
04029c6c g     O .rwdata	00000004 __malloc_trim_threshold
04011808 g     F .text	0000000c __locale_msgcharset
0401b444 g     F .text	00000038 exit
0400b46c g     F .text	0000001c .hidden _Unwind_SetGR
040050ac  w    F .text	00000028 _ZN10W5100Class7CH_BASEEv
040116ac g     F .text	000000c4 _fwalk_reent
040092fc g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0401262c g     F .text	000001fc __mdiff
040068b8 g     F .text	00000040 _ZN13EthernetClass11socketCloseEh
0400ab30 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
04005ee0 g     F .text	000000ec _ZN11EthernetUDP4readEPhj
0400b0ac g     F .text	00000074 .hidden __modsi3
0400467c g     F .text	00000054 _ZN14EthernetClient5writeEh
04008cd8  w    F .text	00000050 _ZN10W5100Class14writeSnTX_SIZEEhh
0400121c g     F .text	00000044 _ZN9DhcpClass16reset_DHCP_leaseEv
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04006038 g     F .text	00000024 _ZN11EthernetUDP5flushEv
04010cb0 g     F .text	00000004 __sfp_lock_release
0401ce3c  w    O .rodata	0000000c _ZTISt13bad_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
04003498 g     F .text	00000060 _ZN13EthernetClass5beginEPh9IPAddress
04003e94  w    F .text	00000040 _ZN10W5100Class22setRetransmissionCountEh
04008c88  w    F .text	00000050 _ZN10W5100Class14writeSnRX_SIZEEhh
04036810 g     O .bss	00000010 _ZN14EthernetServer11server_portE
04018b64 g     F .text	00000034 _exit
04005ba4 g     F .text	00000080 _ZN11EthernetUDP11beginPacketE9IPAddresst
04004d54 g     F .text	00000084 _ZN14EthernetClient8remoteIPEv
0401a488 g     F .text	0000012c alt_alarm_start
04003d04  w    F .text	00000038 _ZN10W5100Class13setSubnetMaskEPKh
0400b438 g     F .text	0000001c .hidden _Unwind_GetGR
0400afa0 g     F .text	0000000c __cxa_get_globals
0401184c g     F .text	000001bc __smakebuf_r
04029c40 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0400c83c g     F .text	00000098 strlen
0400c45c g     F .text	0000006c _init_signal_r
04029c38  w    O .rwdata	00000008 _ZTISt9type_info
0401ae14 g     F .text	0000015c open
0401ca20  w    O .rodata	0000006c _ZTV14EthernetClient
04017484 g     F .text	000000dc .hidden __gedf2
04007bc4  w    F .text	00000050 _ZN10W5100Class5SBASEEh
04003d74  w    F .text	00000038 _ZN10W5100Class13setMACAddressEPKh
0401ce18  w    O .rodata	0000000d _ZTSSt9exception
04029c2e g     O .rwdata	00000001 _ZN10W5100Class6ss_pinE
0400b73c g     F .text	0000004c clock
04005250  w    F .text	00000048 _ZN9DNSClientC1Ev
0401cb6c  w    O .rodata	0000000c _ZTI11EthernetUDP
04029c74 g     O .rwdata	00000004 __wctomb
0400afcc g     F .text	00000004 _ZNSt9exceptionD0Ev
04013678 g     F .text	00000018 __sprint_r
0401a8cc g     F .text	00000020 alt_icache_flush_all
040029c0 g     F .text	00000248 _ZN9DNSClient12BuildRequestEPKc
0401cedc  w    O .rodata	00000023 _ZTSN9__gnu_cxx20recursive_init_errorE
0400b4e4 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
04008aa0  w    F .text	0000002c _ZN10W5100Class6readMREv
04029c94 g     O .rwdata	00000004 alt_priority_mask
04005664 g     F .text	000000c0 _ZN14EthernetServercvbEv
04005c24 g     F .text	00000040 _ZN11EthernetUDP9endPacketEv
0401a93c g     F .text	00000088 alt_ic_irq_enable
0400ebb8 g     F .text	0000001c __vfprintf_internal
04015564 g     F .text	0000005c _wctomb_r
04007d6c g     F .text	00000044 _ZN9IPAddressC2EPKh
04017ec0 g     F .text	000008fc .hidden __subdf3
04003560 g     F .text	0000006c _ZN13EthernetClass5beginEPh9IPAddressS1_S1_
040041c4  w    F .text	0000003c _ZN9DhcpClassC1Ev
040031dc  w    F .text	00000030 _ZN9IPAddressixEi
04007ee0 g     F .text	00000078 _ZN9IPAddress5printEv
04011fcc g     F .text	000000b0 __lo0bits
04029c98 g     O .rwdata	00000008 alt_alarm_list
0401a80c g     F .text	00000060 _do_ctors
0400c6ec g     F .text	00000014 __sigtramp
0400a664 g     F .text	0000005c __cxa_guard_acquire
04015474 g     F .text	000000c0 wcrtomb
04008b0c  w    F .text	00000040 _ZN10W5100Class9writeTMSREh
04004824 g     F .text	0000005c _ZN14EthernetClient9availableEv
04002430 g     F .text	00000040 _ZN9DhcpClass12getGatewayIpEv
04005a80 g     F .text	00000060 _ZN11EthernetUDP4stopEv
04018a60 g     F .text	000000d8 close
04007f58 g     F .text	00000044 _ZN9IPAddressaSEPKh
04002830 g     F .text	00000190 _ZN9DNSClient13getHostByNameEPKcR9IPAddresst
04007394 g     F .text	000000bc _ZN13EthernetClass14socketStartUDPEhPht
0401ce48  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
04018f68 g     F .text	00000084 alt_load
04009434 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0400afe4 g     F .text	00000010 _ZN9__gnu_cxx20recursive_init_errorD2Ev
04036764 g     O .bss	00000001 _ZN10W5100Class4chipE
04003f58  w    F .text	00000038 _ZN10W5100Class7readGAREPh
040151e8 g     F .text	00000080 fputwc
0400c6b0 g     F .text	00000014 raise
0400b79c g     F .text	00000014 free
04010cb4 g     F .text	00000004 __sinit_lock_acquire
04011d18 g     F .text	00000148 __multadd
0400a908 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
04011cf0 g     F .text	00000028 _Bfree
04004200 g     F .text	0000010c _ZN14EthernetClient7connectEPKct



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100f4 	movhi	r2,1027
 4000140:	109a2604 	addi	r2,r2,26776
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100f4 	movhi	r2,1027
 4000158:	109a2604 	addi	r2,r2,26776
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d092ed17 	ldw	r2,19380(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d092ed17 	ldw	r2,19380(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 400023c:	d686ff14 	ori	gp,gp,7164
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 4000244:	1099ca14 	ori	r2,r2,26408

    movhi r3, %hi(__bss_end)
 4000248:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 400024c:	18da6614 	ori	r3,r3,27032

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	4018f680 	call	4018f68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	40191040 	call	4019104 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <set_color_palette>:
#include "pixel_vga.h"

void set_color_palette(alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue) {
 400026c:	defffa04 	addi	sp,sp,-24
 4000270:	df000515 	stw	fp,20(sp)
 4000274:	df000504 	addi	fp,sp,20
 4000278:	2011883a 	mov	r8,r4
 400027c:	2809883a 	mov	r4,r5
 4000280:	3007883a 	mov	r3,r6
 4000284:	3805883a 	mov	r2,r7
 4000288:	e23ffc05 	stb	r8,-16(fp)
 400028c:	e13ffd05 	stb	r4,-12(fp)
 4000290:	e0fffe05 	stb	r3,-8(fp)
 4000294:	e0bfff05 	stb	r2,-4(fp)
	// Pointer to the beginning of VRAM
    volatile alt_u32* vram_32 = (alt_u32*) vga_ctrl->VRAM;
 4000298:	d092cb17 	ldw	r2,19244(gp)
 400029c:	e0bffb15 	stw	r2,-20(fp)

    // Point to start of color palette
    vram_32 += PALETTE_OFFSET + color;
 40002a0:	e0bffc03 	ldbu	r2,-16(fp)
 40002a4:	1092c004 	addi	r2,r2,19200
 40002a8:	1085883a 	add	r2,r2,r2
 40002ac:	1085883a 	add	r2,r2,r2
 40002b0:	1007883a 	mov	r3,r2
 40002b4:	e0bffb17 	ldw	r2,-20(fp)
 40002b8:	10c5883a 	add	r2,r2,r3
 40002bc:	e0bffb15 	stw	r2,-20(fp)

    // Set the color
    *vram_32 = (((alt_u32)red / 16) << 8) + (((alt_u32)green / 16) << 4) + ((alt_u32)blue / 16);
 40002c0:	e0bffd03 	ldbu	r2,-12(fp)
 40002c4:	1004d13a 	srli	r2,r2,4
 40002c8:	10803fcc 	andi	r2,r2,255
 40002cc:	1006923a 	slli	r3,r2,8
 40002d0:	e0bffe03 	ldbu	r2,-8(fp)
 40002d4:	1004d13a 	srli	r2,r2,4
 40002d8:	10803fcc 	andi	r2,r2,255
 40002dc:	1004913a 	slli	r2,r2,4
 40002e0:	1887883a 	add	r3,r3,r2
 40002e4:	e0bfff03 	ldbu	r2,-4(fp)
 40002e8:	1004d13a 	srli	r2,r2,4
 40002ec:	10803fcc 	andi	r2,r2,255
 40002f0:	1887883a 	add	r3,r3,r2
 40002f4:	e0bffb17 	ldw	r2,-20(fp)
 40002f8:	10c00015 	stw	r3,0(r2)
}
 40002fc:	0001883a 	nop
 4000300:	e037883a 	mov	sp,fp
 4000304:	df000017 	ldw	fp,0(sp)
 4000308:	dec00104 	addi	sp,sp,4
 400030c:	f800283a 	ret

04000310 <init_color_palette>:

void init_color_palette() {
 4000310:	defffd04 	addi	sp,sp,-12
 4000314:	dfc00215 	stw	ra,8(sp)
 4000318:	df000115 	stw	fp,4(sp)
 400031c:	df000104 	addi	fp,sp,4
    // Initialize the color palette with the colors declared in the struct header
    for(alt_u8 i=0; i<4; i++) {
 4000320:	e03fff05 	stb	zero,-4(fp)
 4000324:	00002406 	br	40003b8 <init_color_palette+0xa8>
        set_color_palette(i, colors[i].red, colors[i].green, colors[i].blue);
 4000328:	e23fff03 	ldbu	r8,-4(fp)
 400032c:	e13fff03 	ldbu	r4,-4(fp)
 4000330:	00c100b4 	movhi	r3,1026
 4000334:	18ca15c4 	addi	r3,r3,10327
 4000338:	2005883a 	mov	r2,r4
 400033c:	1085883a 	add	r2,r2,r2
 4000340:	1105883a 	add	r2,r2,r4
 4000344:	1885883a 	add	r2,r3,r2
 4000348:	10800003 	ldbu	r2,0(r2)
 400034c:	11403fcc 	andi	r5,r2,255
 4000350:	e13fff03 	ldbu	r4,-4(fp)
 4000354:	00c100b4 	movhi	r3,1026
 4000358:	18ca15c4 	addi	r3,r3,10327
 400035c:	2005883a 	mov	r2,r4
 4000360:	1085883a 	add	r2,r2,r2
 4000364:	1105883a 	add	r2,r2,r4
 4000368:	1885883a 	add	r2,r3,r2
 400036c:	10800044 	addi	r2,r2,1
 4000370:	10800003 	ldbu	r2,0(r2)
 4000374:	11803fcc 	andi	r6,r2,255
 4000378:	e13fff03 	ldbu	r4,-4(fp)
 400037c:	00c100b4 	movhi	r3,1026
 4000380:	18ca15c4 	addi	r3,r3,10327
 4000384:	2005883a 	mov	r2,r4
 4000388:	1085883a 	add	r2,r2,r2
 400038c:	1105883a 	add	r2,r2,r4
 4000390:	1885883a 	add	r2,r3,r2
 4000394:	10800084 	addi	r2,r2,2
 4000398:	10800003 	ldbu	r2,0(r2)
 400039c:	10803fcc 	andi	r2,r2,255
 40003a0:	100f883a 	mov	r7,r2
 40003a4:	4009883a 	mov	r4,r8
 40003a8:	400026c0 	call	400026c <set_color_palette>
    *vram_32 = (((alt_u32)red / 16) << 8) + (((alt_u32)green / 16) << 4) + ((alt_u32)blue / 16);
}

void init_color_palette() {
    // Initialize the color palette with the colors declared in the struct header
    for(alt_u8 i=0; i<4; i++) {
 40003ac:	e0bfff03 	ldbu	r2,-4(fp)
 40003b0:	10800044 	addi	r2,r2,1
 40003b4:	e0bfff05 	stb	r2,-4(fp)
 40003b8:	e0bfff03 	ldbu	r2,-4(fp)
 40003bc:	10800130 	cmpltui	r2,r2,4
 40003c0:	103fd91e 	bne	r2,zero,4000328 <__alt_data_end+0xfc000328>
        set_color_palette(i, colors[i].red, colors[i].green, colors[i].blue);
    }
}
 40003c4:	0001883a 	nop
 40003c8:	e037883a 	mov	sp,fp
 40003cc:	dfc00117 	ldw	ra,4(sp)
 40003d0:	df000017 	ldw	fp,0(sp)
 40003d4:	dec00204 	addi	sp,sp,8
 40003d8:	f800283a 	ret

040003dc <draw_rectangle>:

void draw_rectangle(alt_u32 x, alt_u32 y, alt_u32 width, alt_u32 height, alt_u8 color){
 40003dc:	defff304 	addi	sp,sp,-52
 40003e0:	dfc00c15 	stw	ra,48(sp)
 40003e4:	df000b15 	stw	fp,44(sp)
 40003e8:	dc400a15 	stw	r17,40(sp)
 40003ec:	dc000915 	stw	r16,36(sp)
 40003f0:	df000b04 	addi	fp,sp,44
 40003f4:	e13ff915 	stw	r4,-28(fp)
 40003f8:	e17ffa15 	stw	r5,-24(fp)
 40003fc:	e1bffb15 	stw	r6,-20(fp)
 4000400:	e1fffc15 	stw	r7,-16(fp)
 4000404:	e0800217 	ldw	r2,8(fp)
 4000408:	e0bffd05 	stb	r2,-12(fp)
    // Validate the arguments
    if (x%16 != 0 | width%16 != 0)
 400040c:	e0bff917 	ldw	r2,-28(fp)
 4000410:	108003cc 	andi	r2,r2,15
 4000414:	1004c03a 	cmpne	r2,r2,zero
 4000418:	1007883a 	mov	r3,r2
 400041c:	e0bffb17 	ldw	r2,-20(fp)
 4000420:	108003cc 	andi	r2,r2,15
 4000424:	1004c03a 	cmpne	r2,r2,zero
 4000428:	1884b03a 	or	r2,r3,r2
 400042c:	10803fcc 	andi	r2,r2,255
 4000430:	10000326 	beq	r2,zero,4000440 <draw_rectangle+0x64>
        printf("Invalid arguments passed to draw_rectangle!\n");
 4000434:	010100b4 	movhi	r4,1026
 4000438:	212de404 	addi	r4,r4,-18544
 400043c:	400c3f40 	call	400c3f4 <puts>

    // Initialize the color
    alt_u32 word = 0;
 4000440:	e03ff515 	stw	zero,-44(fp)
    for(alt_u8 p=0; p<16; p++) word += (color << (p*2));
 4000444:	e03ff605 	stb	zero,-40(fp)
 4000448:	00000b06 	br	4000478 <draw_rectangle+0x9c>
 400044c:	e0fffd03 	ldbu	r3,-12(fp)
 4000450:	e0bff603 	ldbu	r2,-40(fp)
 4000454:	1085883a 	add	r2,r2,r2
 4000458:	1884983a 	sll	r2,r3,r2
 400045c:	1007883a 	mov	r3,r2
 4000460:	e0bff517 	ldw	r2,-44(fp)
 4000464:	10c5883a 	add	r2,r2,r3
 4000468:	e0bff515 	stw	r2,-44(fp)
 400046c:	e0bff603 	ldbu	r2,-40(fp)
 4000470:	10800044 	addi	r2,r2,1
 4000474:	e0bff605 	stb	r2,-40(fp)
 4000478:	e0bff603 	ldbu	r2,-40(fp)
 400047c:	10800430 	cmpltui	r2,r2,16
 4000480:	103ff21e 	bne	r2,zero,400044c <__alt_data_end+0xfc00044c>

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
 4000484:	e0bffa17 	ldw	r2,-24(fp)
 4000488:	e0bff715 	stw	r2,-36(fp)
 400048c:	00001a06 	br	40004f8 <draw_rectangle+0x11c>
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=16) {
 4000490:	e0bff917 	ldw	r2,-28(fp)
 4000494:	e0bff815 	stw	r2,-32(fp)
 4000498:	00000f06 	br	40004d8 <draw_rectangle+0xfc>
            vga_ctrl->VRAM[(x_draw/16) + (y_draw*40)] = word;
 400049c:	d412cb17 	ldw	r16,19244(gp)
 40004a0:	e0bff817 	ldw	r2,-32(fp)
 40004a4:	1022d13a 	srli	r17,r2,4
 40004a8:	01400a04 	movi	r5,40
 40004ac:	e13ff717 	ldw	r4,-36(fp)
 40004b0:	400b1dc0 	call	400b1dc <__mulsi3>
 40004b4:	8885883a 	add	r2,r17,r2
 40004b8:	1085883a 	add	r2,r2,r2
 40004bc:	1085883a 	add	r2,r2,r2
 40004c0:	8085883a 	add	r2,r16,r2
 40004c4:	e0fff517 	ldw	r3,-44(fp)
 40004c8:	10c00015 	stw	r3,0(r2)
    alt_u32 word = 0;
    for(alt_u8 p=0; p<16; p++) word += (color << (p*2));

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=16) {
 40004cc:	e0bff817 	ldw	r2,-32(fp)
 40004d0:	10800404 	addi	r2,r2,16
 40004d4:	e0bff815 	stw	r2,-32(fp)
 40004d8:	e0fff917 	ldw	r3,-28(fp)
 40004dc:	e0bffb17 	ldw	r2,-20(fp)
 40004e0:	1885883a 	add	r2,r3,r2
 40004e4:	e0fff817 	ldw	r3,-32(fp)
 40004e8:	18bfec36 	bltu	r3,r2,400049c <__alt_data_end+0xfc00049c>
    // Initialize the color
    alt_u32 word = 0;
    for(alt_u8 p=0; p<16; p++) word += (color << (p*2));

    // Iterate over the relevant words, set their color
    for(alt_u32 y_draw=y; y_draw<(y+height); y_draw++) {
 40004ec:	e0bff717 	ldw	r2,-36(fp)
 40004f0:	10800044 	addi	r2,r2,1
 40004f4:	e0bff715 	stw	r2,-36(fp)
 40004f8:	e0fffa17 	ldw	r3,-24(fp)
 40004fc:	e0bffc17 	ldw	r2,-16(fp)
 4000500:	1885883a 	add	r2,r3,r2
 4000504:	e0fff717 	ldw	r3,-36(fp)
 4000508:	18bfe136 	bltu	r3,r2,4000490 <__alt_data_end+0xfc000490>
        for(alt_u32 x_draw=x; x_draw<(x+width); x_draw+=16) {
            vga_ctrl->VRAM[(x_draw/16) + (y_draw*40)] = word;
        }
    }
}
 400050c:	0001883a 	nop
 4000510:	e6fffe04 	addi	sp,fp,-8
 4000514:	dfc00317 	ldw	ra,12(sp)
 4000518:	df000217 	ldw	fp,8(sp)
 400051c:	dc400117 	ldw	r17,4(sp)
 4000520:	dc000017 	ldw	r16,0(sp)
 4000524:	dec00404 	addi	sp,sp,16
 4000528:	f800283a 	ret

0400052c <debug>:

void debug() {
 400052c:	defffa04 	addi	sp,sp,-24
 4000530:	dfc00515 	stw	ra,20(sp)
 4000534:	df000415 	stw	fp,16(sp)
 4000538:	df000404 	addi	fp,sp,16
    // Clear the screen
    draw_rectangle(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0);
 400053c:	d8000015 	stw	zero,0(sp)
 4000540:	01c07804 	movi	r7,480
 4000544:	0180a004 	movi	r6,640
 4000548:	000b883a 	mov	r5,zero
 400054c:	0009883a 	mov	r4,zero
 4000550:	40003dc0 	call	40003dc <draw_rectangle>

    // Set each word to a different color
    for(alt_u32 i=0; i < 100; i++){
 4000554:	e03ffd15 	stw	zero,-12(fp)
 4000558:	00001c06 	br	40005cc <debug+0xa0>
        alt_u32 word = 0;
 400055c:	e03ffe15 	stw	zero,-8(fp)
        for(alt_u8 p=0; p<8; p++) word += ((i%4) << (p*4));
 4000560:	e03fff05 	stb	zero,-4(fp)
 4000564:	00000c06 	br	4000598 <debug+0x6c>
 4000568:	e0bffd17 	ldw	r2,-12(fp)
 400056c:	10c000cc 	andi	r3,r2,3
 4000570:	e0bfff03 	ldbu	r2,-4(fp)
 4000574:	1085883a 	add	r2,r2,r2
 4000578:	1085883a 	add	r2,r2,r2
 400057c:	1884983a 	sll	r2,r3,r2
 4000580:	e0fffe17 	ldw	r3,-8(fp)
 4000584:	1885883a 	add	r2,r3,r2
 4000588:	e0bffe15 	stw	r2,-8(fp)
 400058c:	e0bfff03 	ldbu	r2,-4(fp)
 4000590:	10800044 	addi	r2,r2,1
 4000594:	e0bfff05 	stb	r2,-4(fp)
 4000598:	e0bfff03 	ldbu	r2,-4(fp)
 400059c:	10800230 	cmpltui	r2,r2,8
 40005a0:	103ff11e 	bne	r2,zero,4000568 <__alt_data_end+0xfc000568>
        vga_ctrl->VRAM[i] = word;
 40005a4:	d0d2cb17 	ldw	r3,19244(gp)
 40005a8:	e0bffd17 	ldw	r2,-12(fp)
 40005ac:	1085883a 	add	r2,r2,r2
 40005b0:	1085883a 	add	r2,r2,r2
 40005b4:	1885883a 	add	r2,r3,r2
 40005b8:	e0fffe17 	ldw	r3,-8(fp)
 40005bc:	10c00015 	stw	r3,0(r2)
void debug() {
    // Clear the screen
    draw_rectangle(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0);

    // Set each word to a different color
    for(alt_u32 i=0; i < 100; i++){
 40005c0:	e0bffd17 	ldw	r2,-12(fp)
 40005c4:	10800044 	addi	r2,r2,1
 40005c8:	e0bffd15 	stw	r2,-12(fp)
 40005cc:	e0bffd17 	ldw	r2,-12(fp)
 40005d0:	10801930 	cmpltui	r2,r2,100
 40005d4:	103fe11e 	bne	r2,zero,400055c <__alt_data_end+0xfc00055c>
        alt_u32 word = 0;
        for(alt_u8 p=0; p<8; p++) word += ((i%4) << (p*4));
        vga_ctrl->VRAM[i] = word;
    }
}
 40005d8:	0001883a 	nop
 40005dc:	e037883a 	mov	sp,fp
 40005e0:	dfc00117 	ldw	ra,4(sp)
 40005e4:	df000017 	ldw	fp,0(sp)
 40005e8:	dec00204 	addi	sp,sp,8
 40005ec:	f800283a 	ret

040005f0 <draw_background>:

void draw_background() {
 40005f0:	defffd04 	addi	sp,sp,-12
 40005f4:	dfc00215 	stw	ra,8(sp)
 40005f8:	df000115 	stw	fp,4(sp)
 40005fc:	df000104 	addi	fp,sp,4
    // Draw the sidebar background
    draw_rectangle(0, 0, SIDEBAR_WIDTH, SCREEN_HEIGHT, 0);
 4000600:	d8000015 	stw	zero,0(sp)
 4000604:	01c07804 	movi	r7,480
 4000608:	01802004 	movi	r6,128
 400060c:	000b883a 	mov	r5,zero
 4000610:	0009883a 	mov	r4,zero
 4000614:	40003dc0 	call	40003dc <draw_rectangle>

    // Draw the messages background
    draw_rectangle(SIDEBAR_WIDTH, 0, SCREEN_WIDTH-SIDEBAR_WIDTH, SCREEN_HEIGHT, 0);
 4000618:	d8000015 	stw	zero,0(sp)
 400061c:	01c07804 	movi	r7,480
 4000620:	01808004 	movi	r6,512
 4000624:	000b883a 	mov	r5,zero
 4000628:	01002004 	movi	r4,128
 400062c:	40003dc0 	call	40003dc <draw_rectangle>
}
 4000630:	0001883a 	nop
 4000634:	e037883a 	mov	sp,fp
 4000638:	dfc00117 	ldw	ra,4(sp)
 400063c:	df000017 	ldw	fp,0(sp)
 4000640:	dec00204 	addi	sp,sp,8
 4000644:	f800283a 	ret

04000648 <draw_char>:

void draw_char(alt_u8 x, alt_u8 y, alt_u8 render_code, struct FONT* font) {
 4000648:	deffed04 	addi	sp,sp,-76
 400064c:	dfc01215 	stw	ra,72(sp)
 4000650:	df001115 	stw	fp,68(sp)
 4000654:	dc401015 	stw	r17,64(sp)
 4000658:	dc000f15 	stw	r16,60(sp)
 400065c:	df001104 	addi	fp,sp,68
 4000660:	2807883a 	mov	r3,r5
 4000664:	3005883a 	mov	r2,r6
 4000668:	e1fffd15 	stw	r7,-12(fp)
 400066c:	e13ffa05 	stb	r4,-24(fp)
 4000670:	e0fffb05 	stb	r3,-20(fp)
 4000674:	e0bffc05 	stb	r2,-16(fp)
    // Get the character metadata
    alt_u8  char_width = font->widths[render_code];
 4000678:	e0bffd17 	ldw	r2,-12(fp)
 400067c:	10c00217 	ldw	r3,8(r2)
 4000680:	e0bffc03 	ldbu	r2,-16(fp)
 4000684:	1885883a 	add	r2,r3,r2
 4000688:	10800003 	ldbu	r2,0(r2)
 400068c:	e0bff505 	stb	r2,-44(fp)
    alt_u8  char_height = font->height;
 4000690:	e0bffd17 	ldw	r2,-12(fp)
 4000694:	10800003 	ldbu	r2,0(r2)
 4000698:	e0bff545 	stb	r2,-43(fp)
    alt_u32 font_outer = font->indices[render_code];
 400069c:	e0bffd17 	ldw	r2,-12(fp)
 40006a0:	10c00317 	ldw	r3,12(r2)
 40006a4:	e0bffc03 	ldbu	r2,-16(fp)
 40006a8:	1085883a 	add	r2,r2,r2
 40006ac:	1085883a 	add	r2,r2,r2
 40006b0:	1885883a 	add	r2,r3,r2
 40006b4:	10800017 	ldw	r2,0(r2)
 40006b8:	e0bfef15 	stw	r2,-68(fp)
    alt_u8  font_inner = 0;
 40006bc:	e03ff005 	stb	zero,-64(fp)

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
 40006c0:	e0fffa03 	ldbu	r3,-24(fp)
 40006c4:	00bffc04 	movi	r2,-16
 40006c8:	1884703a 	and	r2,r3,r2
 40006cc:	e0bff615 	stw	r2,-40(fp)
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 40006d0:	e0bffb03 	ldbu	r2,-20(fp)
 40006d4:	e0bff115 	stw	r2,-60(fp)
 40006d8:	00005d06 	br	4000850 <draw_char+0x208>
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+char_width); x_wb+=16) {
 40006dc:	e0bff617 	ldw	r2,-40(fp)
 40006e0:	e0bff215 	stw	r2,-56(fp)
 40006e4:	00005106 	br	400082c <draw_char+0x1e4>

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
 40006e8:	e0bff117 	ldw	r2,-60(fp)
 40006ec:	e0bff715 	stw	r2,-36(fp)
            alt_u32 word = 0;
 40006f0:	e03ff315 	stw	zero,-52(fp)
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 40006f4:	e0bff217 	ldw	r2,-56(fp)
 40006f8:	e0bff415 	stw	r2,-48(fp)
 40006fc:	00004406 	br	4000810 <draw_char+0x1c8>
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 4000700:	e0bffa03 	ldbu	r2,-24(fp)
 4000704:	e0fff417 	ldw	r3,-48(fp)
 4000708:	18803b36 	bltu	r3,r2,40007f8 <draw_char+0x1b0>

                // Check if we are out of the width of the font
                if (wx-x >= char_width) continue;
 400070c:	e0bffa03 	ldbu	r2,-24(fp)
 4000710:	e0fff417 	ldw	r3,-48(fp)
 4000714:	1887c83a 	sub	r3,r3,r2
 4000718:	e0bff503 	ldbu	r2,-44(fp)
 400071c:	1880382e 	bgeu	r3,r2,4000800 <draw_char+0x1b8>

                // Get the relevant character from the font data
                alt_u8 font_data = font->data[font_outer];
 4000720:	e0bffd17 	ldw	r2,-12(fp)
 4000724:	10c00117 	ldw	r3,4(r2)
 4000728:	e0bfef17 	ldw	r2,-68(fp)
 400072c:	1885883a 	add	r2,r3,r2
 4000730:	10800003 	ldbu	r2,0(r2)
 4000734:	e0bff805 	stb	r2,-32(fp)

                // Extract the relevant pixel data
                alt_u32 pixel_data = (font_data >> ((3-font_inner)*2)) % 4;
 4000738:	e0fff803 	ldbu	r3,-32(fp)
 400073c:	e0bff003 	ldbu	r2,-64(fp)
 4000740:	010000c4 	movi	r4,3
 4000744:	2085c83a 	sub	r2,r4,r2
 4000748:	1085883a 	add	r2,r2,r2
 400074c:	1887d83a 	sra	r3,r3,r2
 4000750:	00a00034 	movhi	r2,32768
 4000754:	108000c4 	addi	r2,r2,3
 4000758:	1884703a 	and	r2,r3,r2
 400075c:	1000040e 	bge	r2,zero,4000770 <draw_char+0x128>
 4000760:	10bfffc4 	addi	r2,r2,-1
 4000764:	00ffff04 	movi	r3,-4
 4000768:	10c4b03a 	or	r2,r2,r3
 400076c:	10800044 	addi	r2,r2,1
 4000770:	e0bff915 	stw	r2,-28(fp)

                // Write the pixel data to the word
                word += pixel_data << (15-(wx%16))*2;
 4000774:	e0bff417 	ldw	r2,-48(fp)
 4000778:	0084303a 	nor	r2,zero,r2
 400077c:	108003cc 	andi	r2,r2,15
 4000780:	1085883a 	add	r2,r2,r2
 4000784:	1007883a 	mov	r3,r2
 4000788:	e0bff917 	ldw	r2,-28(fp)
 400078c:	10c4983a 	sll	r2,r2,r3
 4000790:	e0fff317 	ldw	r3,-52(fp)
 4000794:	1885883a 	add	r2,r3,r2
 4000798:	e0bff315 	stw	r2,-52(fp)

                // Increment the pixel counter for the font data
                if (++font_inner == 4){
 400079c:	e0bff003 	ldbu	r2,-64(fp)
 40007a0:	10800044 	addi	r2,r2,1
 40007a4:	e0bff005 	stb	r2,-64(fp)
 40007a8:	e0bff003 	ldbu	r2,-64(fp)
 40007ac:	10800118 	cmpnei	r2,r2,4
 40007b0:	1000041e 	bne	r2,zero,40007c4 <draw_char+0x17c>
                    font_inner = 0;
 40007b4:	e03ff005 	stb	zero,-64(fp)
                    font_outer++;
 40007b8:	e0bfef17 	ldw	r2,-68(fp)
 40007bc:	10800044 	addi	r2,r2,1
 40007c0:	e0bfef15 	stw	r2,-68(fp)
                }

            // Write the word to VRAM
            vga_ctrl->VRAM[(x_wb/16) + (y_wb*40)] = word;
 40007c4:	d412cb17 	ldw	r16,19244(gp)
 40007c8:	e0bff217 	ldw	r2,-56(fp)
 40007cc:	1022d13a 	srli	r17,r2,4
 40007d0:	01400a04 	movi	r5,40
 40007d4:	e13ff117 	ldw	r4,-60(fp)
 40007d8:	400b1dc0 	call	400b1dc <__mulsi3>
 40007dc:	8885883a 	add	r2,r17,r2
 40007e0:	1085883a 	add	r2,r2,r2
 40007e4:	1085883a 	add	r2,r2,r2
 40007e8:	8085883a 	add	r2,r16,r2
 40007ec:	e0fff317 	ldw	r3,-52(fp)
 40007f0:	10c00015 	stw	r3,0(r2)
 40007f4:	00000306 	br	4000804 <draw_char+0x1bc>
            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 40007f8:	0001883a 	nop
 40007fc:	00000106 	br	4000804 <draw_char+0x1bc>

                // Check if we are out of the width of the font
                if (wx-x >= char_width) continue;
 4000800:	0001883a 	nop
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+char_width); x_wb+=16) {

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 4000804:	e0bff417 	ldw	r2,-48(fp)
 4000808:	10800044 	addi	r2,r2,1
 400080c:	e0bff415 	stw	r2,-48(fp)
 4000810:	e0bff217 	ldw	r2,-56(fp)
 4000814:	10800404 	addi	r2,r2,16
 4000818:	e0fff417 	ldw	r3,-48(fp)
 400081c:	18bfb836 	bltu	r3,r2,4000700 <__alt_data_end+0xfc000700>

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+char_width); x_wb+=16) {
 4000820:	e0bff217 	ldw	r2,-56(fp)
 4000824:	10800404 	addi	r2,r2,16
 4000828:	e0bff215 	stw	r2,-56(fp)
 400082c:	e0fffa03 	ldbu	r3,-24(fp)
 4000830:	e0bff503 	ldbu	r2,-44(fp)
 4000834:	1885883a 	add	r2,r3,r2
 4000838:	1007883a 	mov	r3,r2
 400083c:	e0bff217 	ldw	r2,-56(fp)
 4000840:	10ffa936 	bltu	r2,r3,40006e8 <__alt_data_end+0xfc0006e8>
    alt_u8  font_inner = 0;

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 4000844:	e0bff117 	ldw	r2,-60(fp)
 4000848:	10800044 	addi	r2,r2,1
 400084c:	e0bff115 	stw	r2,-60(fp)
 4000850:	e0fffb03 	ldbu	r3,-20(fp)
 4000854:	e0bff543 	ldbu	r2,-43(fp)
 4000858:	1885883a 	add	r2,r3,r2
 400085c:	1007883a 	mov	r3,r2
 4000860:	e0bff117 	ldw	r2,-60(fp)
 4000864:	10ff9d36 	bltu	r2,r3,40006dc <__alt_data_end+0xfc0006dc>
            // Write the word to VRAM
            vga_ctrl->VRAM[(x_wb/16) + (y_wb*40)] = word;
            }
        }
    }
}
 4000868:	0001883a 	nop
 400086c:	e6fffe04 	addi	sp,fp,-8
 4000870:	dfc00317 	ldw	ra,12(sp)
 4000874:	df000217 	ldw	fp,8(sp)
 4000878:	dc400117 	ldw	r17,4(sp)
 400087c:	dc000017 	ldw	r16,0(sp)
 4000880:	dec00404 	addi	sp,sp,16
 4000884:	f800283a 	ret

04000888 <draw_string>:

void draw_string(alt_u8 x, alt_u8 y, char* str, struct FONT* font) {
 4000888:	deffd504 	addi	sp,sp,-172
 400088c:	dfc02a15 	stw	ra,168(sp)
 4000890:	df002915 	stw	fp,164(sp)
 4000894:	ddc02815 	stw	r23,160(sp)
 4000898:	dd802715 	stw	r22,156(sp)
 400089c:	dd402615 	stw	r21,152(sp)
 40008a0:	dd002515 	stw	r20,148(sp)
 40008a4:	dcc02415 	stw	r19,144(sp)
 40008a8:	dc802315 	stw	r18,140(sp)
 40008ac:	dc402215 	stw	r17,136(sp)
 40008b0:	dc002115 	stw	r16,132(sp)
 40008b4:	df002904 	addi	fp,sp,164
 40008b8:	2007883a 	mov	r3,r4
 40008bc:	2805883a 	mov	r2,r5
 40008c0:	e1bfed15 	stw	r6,-76(fp)
 40008c4:	e1ffee15 	stw	r7,-72(fp)
 40008c8:	e0ffeb05 	stb	r3,-84(fp)
 40008cc:	e0bfec05 	stb	r2,-80(fp)
    // Find the length of the string in pixels
    alt_u32 str_char_len = 0;
 40008d0:	e03fd715 	stw	zero,-164(fp)
    for (alt_u32 i=0; str[i] != '\0'; i++) str_char_len++;
 40008d4:	e03fd815 	stw	zero,-160(fp)
 40008d8:	00000606 	br	40008f4 <draw_string+0x6c>
 40008dc:	e0bfd717 	ldw	r2,-164(fp)
 40008e0:	10800044 	addi	r2,r2,1
 40008e4:	e0bfd715 	stw	r2,-164(fp)
 40008e8:	e0bfd817 	ldw	r2,-160(fp)
 40008ec:	10800044 	addi	r2,r2,1
 40008f0:	e0bfd815 	stw	r2,-160(fp)
 40008f4:	e0ffed17 	ldw	r3,-76(fp)
 40008f8:	e0bfd817 	ldw	r2,-160(fp)
 40008fc:	1885883a 	add	r2,r3,r2
 4000900:	10800003 	ldbu	r2,0(r2)
 4000904:	10803fcc 	andi	r2,r2,255
 4000908:	1080201c 	xori	r2,r2,128
 400090c:	10bfe004 	addi	r2,r2,-128
 4000910:	103ff21e 	bne	r2,zero,40008dc <__alt_data_end+0xfc0008dc>

    // Character-relevant data
    alt_u32 font_outers[str_char_len];
 4000914:	e0ffd717 	ldw	r3,-164(fp)
 4000918:	d805883a 	mov	r2,sp
 400091c:	e0bfef15 	stw	r2,-68(fp)
 4000920:	1805883a 	mov	r2,r3
 4000924:	10bfffc4 	addi	r2,r2,-1
 4000928:	e0bfe115 	stw	r2,-124(fp)
 400092c:	e0fff015 	stw	r3,-64(fp)
 4000930:	e03ff115 	stw	zero,-60(fp)
 4000934:	e13ff017 	ldw	r4,-64(fp)
 4000938:	2004d6fa 	srli	r2,r4,27
 400093c:	e13ff117 	ldw	r4,-60(fp)
 4000940:	2026917a 	slli	r19,r4,5
 4000944:	14e6b03a 	or	r19,r2,r19
 4000948:	e0bff017 	ldw	r2,-64(fp)
 400094c:	1024917a 	slli	r18,r2,5
 4000950:	e0fff215 	stw	r3,-56(fp)
 4000954:	e03ff315 	stw	zero,-52(fp)
 4000958:	e13ff217 	ldw	r4,-56(fp)
 400095c:	2004d6fa 	srli	r2,r4,27
 4000960:	e13ff317 	ldw	r4,-52(fp)
 4000964:	2022917a 	slli	r17,r4,5
 4000968:	1462b03a 	or	r17,r2,r17
 400096c:	e0bff217 	ldw	r2,-56(fp)
 4000970:	1020917a 	slli	r16,r2,5
 4000974:	18c5883a 	add	r2,r3,r3
 4000978:	1085883a 	add	r2,r2,r2
 400097c:	108000c4 	addi	r2,r2,3
 4000980:	108000c4 	addi	r2,r2,3
 4000984:	1004d0ba 	srli	r2,r2,2
 4000988:	1085883a 	add	r2,r2,r2
 400098c:	1085883a 	add	r2,r2,r2
 4000990:	d8b7c83a 	sub	sp,sp,r2
 4000994:	d805883a 	mov	r2,sp
 4000998:	108000c4 	addi	r2,r2,3
 400099c:	1004d0ba 	srli	r2,r2,2
 40009a0:	1085883a 	add	r2,r2,r2
 40009a4:	1085883a 	add	r2,r2,r2
 40009a8:	e0bfe215 	stw	r2,-120(fp)
    alt_u8  font_inners[str_char_len];
 40009ac:	e0bfd717 	ldw	r2,-164(fp)
 40009b0:	1007883a 	mov	r3,r2
 40009b4:	18ffffc4 	addi	r3,r3,-1
 40009b8:	e0ffe315 	stw	r3,-116(fp)
 40009bc:	e0bff415 	stw	r2,-48(fp)
 40009c0:	e03ff515 	stw	zero,-44(fp)
 40009c4:	e13ff417 	ldw	r4,-48(fp)
 40009c8:	2006d77a 	srli	r3,r4,29
 40009cc:	e13ff517 	ldw	r4,-44(fp)
 40009d0:	201e90fa 	slli	r15,r4,3
 40009d4:	1bdeb03a 	or	r15,r3,r15
 40009d8:	e0fff417 	ldw	r3,-48(fp)
 40009dc:	181c90fa 	slli	r14,r3,3
 40009e0:	e0bff615 	stw	r2,-40(fp)
 40009e4:	e03ff715 	stw	zero,-36(fp)
 40009e8:	e13ff617 	ldw	r4,-40(fp)
 40009ec:	2006d77a 	srli	r3,r4,29
 40009f0:	e13ff717 	ldw	r4,-36(fp)
 40009f4:	201a90fa 	slli	r13,r4,3
 40009f8:	1b5ab03a 	or	r13,r3,r13
 40009fc:	e0fff617 	ldw	r3,-40(fp)
 4000a00:	181890fa 	slli	r12,r3,3
 4000a04:	108000c4 	addi	r2,r2,3
 4000a08:	1004d0ba 	srli	r2,r2,2
 4000a0c:	1085883a 	add	r2,r2,r2
 4000a10:	1085883a 	add	r2,r2,r2
 4000a14:	d8b7c83a 	sub	sp,sp,r2
 4000a18:	d805883a 	mov	r2,sp
 4000a1c:	1005883a 	mov	r2,r2
 4000a20:	e0bfe415 	stw	r2,-112(fp)

    // Get pixel boundaries for the characters
    alt_u32 str_pxl_len = 0;
 4000a24:	e03fd915 	stw	zero,-156(fp)
    alt_u32 pxl_boundaries[str_char_len];
 4000a28:	e0bfd717 	ldw	r2,-164(fp)
 4000a2c:	1007883a 	mov	r3,r2
 4000a30:	18ffffc4 	addi	r3,r3,-1
 4000a34:	e0ffe515 	stw	r3,-108(fp)
 4000a38:	102d883a 	mov	r22,r2
 4000a3c:	002f883a 	mov	r23,zero
 4000a40:	b006d6fa 	srli	r3,r22,27
 4000a44:	b816917a 	slli	r11,r23,5
 4000a48:	1ad6b03a 	or	r11,r3,r11
 4000a4c:	b014917a 	slli	r10,r22,5
 4000a50:	1029883a 	mov	r20,r2
 4000a54:	002b883a 	mov	r21,zero
 4000a58:	a006d6fa 	srli	r3,r20,27
 4000a5c:	a812917a 	slli	r9,r21,5
 4000a60:	1a52b03a 	or	r9,r3,r9
 4000a64:	a010917a 	slli	r8,r20,5
 4000a68:	1085883a 	add	r2,r2,r2
 4000a6c:	1085883a 	add	r2,r2,r2
 4000a70:	108000c4 	addi	r2,r2,3
 4000a74:	108000c4 	addi	r2,r2,3
 4000a78:	1004d0ba 	srli	r2,r2,2
 4000a7c:	1085883a 	add	r2,r2,r2
 4000a80:	1085883a 	add	r2,r2,r2
 4000a84:	d8b7c83a 	sub	sp,sp,r2
 4000a88:	d805883a 	mov	r2,sp
 4000a8c:	108000c4 	addi	r2,r2,3
 4000a90:	1004d0ba 	srli	r2,r2,2
 4000a94:	1085883a 	add	r2,r2,r2
 4000a98:	1085883a 	add	r2,r2,r2
 4000a9c:	e0bfe615 	stw	r2,-104(fp)
    for (alt_u32 i=0; str[i] != '\0'; i++) {
 4000aa0:	e03fda15 	stw	zero,-152(fp)
 4000aa4:	00004006 	br	4000ba8 <draw_string+0x320>
        alt_u8 render_code = decode_ascii[str[i]];
 4000aa8:	e0ffed17 	ldw	r3,-76(fp)
 4000aac:	e0bfda17 	ldw	r2,-152(fp)
 4000ab0:	1885883a 	add	r2,r3,r2
 4000ab4:	10800003 	ldbu	r2,0(r2)
 4000ab8:	10c03fcc 	andi	r3,r2,255
 4000abc:	18c0201c 	xori	r3,r3,128
 4000ac0:	18ffe004 	addi	r3,r3,-128
 4000ac4:	008100b4 	movhi	r2,1026
 4000ac8:	108a2d04 	addi	r2,r2,10420
 4000acc:	10c5883a 	add	r2,r2,r3
 4000ad0:	10800003 	ldbu	r2,0(r2)
 4000ad4:	e0bfe705 	stb	r2,-100(fp)

        // Set pixel boundaries
        if(str[i] == ' ') str_pxl_len += font->space_pxls;
 4000ad8:	e0ffed17 	ldw	r3,-76(fp)
 4000adc:	e0bfda17 	ldw	r2,-152(fp)
 4000ae0:	1885883a 	add	r2,r3,r2
 4000ae4:	10800003 	ldbu	r2,0(r2)
 4000ae8:	10803fcc 	andi	r2,r2,255
 4000aec:	1080201c 	xori	r2,r2,128
 4000af0:	10bfe004 	addi	r2,r2,-128
 4000af4:	10800818 	cmpnei	r2,r2,32
 4000af8:	1000071e 	bne	r2,zero,4000b18 <draw_string+0x290>
 4000afc:	e0bfee17 	ldw	r2,-72(fp)
 4000b00:	10800043 	ldbu	r2,1(r2)
 4000b04:	10803fcc 	andi	r2,r2,255
 4000b08:	e0ffd917 	ldw	r3,-156(fp)
 4000b0c:	1885883a 	add	r2,r3,r2
 4000b10:	e0bfd915 	stw	r2,-156(fp)
 4000b14:	00000906 	br	4000b3c <draw_string+0x2b4>
        else str_pxl_len += font->widths[render_code];
 4000b18:	e0bfee17 	ldw	r2,-72(fp)
 4000b1c:	10c00217 	ldw	r3,8(r2)
 4000b20:	e0bfe703 	ldbu	r2,-100(fp)
 4000b24:	1885883a 	add	r2,r3,r2
 4000b28:	10800003 	ldbu	r2,0(r2)
 4000b2c:	10803fcc 	andi	r2,r2,255
 4000b30:	e0ffd917 	ldw	r3,-156(fp)
 4000b34:	1885883a 	add	r2,r3,r2
 4000b38:	e0bfd915 	stw	r2,-156(fp)
        pxl_boundaries[i] = str_pxl_len;
 4000b3c:	e0ffe617 	ldw	r3,-104(fp)
 4000b40:	e0bfda17 	ldw	r2,-152(fp)
 4000b44:	1085883a 	add	r2,r2,r2
 4000b48:	1085883a 	add	r2,r2,r2
 4000b4c:	1885883a 	add	r2,r3,r2
 4000b50:	e0ffd917 	ldw	r3,-156(fp)
 4000b54:	10c00015 	stw	r3,0(r2)

        // Set font pointers and metadata
        font_outers[i]    = font->indices[render_code];
 4000b58:	e0bfee17 	ldw	r2,-72(fp)
 4000b5c:	10c00317 	ldw	r3,12(r2)
 4000b60:	e0bfe703 	ldbu	r2,-100(fp)
 4000b64:	1085883a 	add	r2,r2,r2
 4000b68:	1085883a 	add	r2,r2,r2
 4000b6c:	1885883a 	add	r2,r3,r2
 4000b70:	10c00017 	ldw	r3,0(r2)
 4000b74:	e13fe217 	ldw	r4,-120(fp)
 4000b78:	e0bfda17 	ldw	r2,-152(fp)
 4000b7c:	1085883a 	add	r2,r2,r2
 4000b80:	1085883a 	add	r2,r2,r2
 4000b84:	2085883a 	add	r2,r4,r2
 4000b88:	10c00015 	stw	r3,0(r2)
        font_inners[i]    = 0;
 4000b8c:	e0ffe417 	ldw	r3,-112(fp)
 4000b90:	e0bfda17 	ldw	r2,-152(fp)
 4000b94:	1885883a 	add	r2,r3,r2
 4000b98:	10000005 	stb	zero,0(r2)
    alt_u8  font_inners[str_char_len];

    // Get pixel boundaries for the characters
    alt_u32 str_pxl_len = 0;
    alt_u32 pxl_boundaries[str_char_len];
    for (alt_u32 i=0; str[i] != '\0'; i++) {
 4000b9c:	e0bfda17 	ldw	r2,-152(fp)
 4000ba0:	10800044 	addi	r2,r2,1
 4000ba4:	e0bfda15 	stw	r2,-152(fp)
 4000ba8:	e0ffed17 	ldw	r3,-76(fp)
 4000bac:	e0bfda17 	ldw	r2,-152(fp)
 4000bb0:	1885883a 	add	r2,r3,r2
 4000bb4:	10800003 	ldbu	r2,0(r2)
 4000bb8:	10803fcc 	andi	r2,r2,255
 4000bbc:	1080201c 	xori	r2,r2,128
 4000bc0:	10bfe004 	addi	r2,r2,-128
 4000bc4:	103fb81e 	bne	r2,zero,4000aa8 <__alt_data_end+0xfc000aa8>
        font_outers[i]    = font->indices[render_code];
        font_inners[i]    = 0;
    }

    // Font metadata
    alt_u32 char_idx    = 0;
 4000bc8:	e03fdb15 	stw	zero,-148(fp)
    alt_u8  char_height = font->height;
 4000bcc:	e0bfee17 	ldw	r2,-72(fp)
 4000bd0:	10800003 	ldbu	r2,0(r2)
 4000bd4:	e0bfe745 	stb	r2,-99(fp)

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
 4000bd8:	e0ffeb03 	ldbu	r3,-84(fp)
 4000bdc:	00bffc04 	movi	r2,-16
 4000be0:	1884703a 	and	r2,r3,r2
 4000be4:	e0bfe815 	stw	r2,-96(fp)
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 4000be8:	e0bfec03 	ldbu	r2,-80(fp)
 4000bec:	e0bfdc15 	stw	r2,-144(fp)
 4000bf0:	00009506 	br	4000e48 <draw_string+0x5c0>
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+str_pxl_len); x_wb+=16) {
 4000bf4:	e0bfe817 	ldw	r2,-96(fp)
 4000bf8:	e0bfdd15 	stw	r2,-140(fp)
 4000bfc:	00008906 	br	4000e24 <draw_string+0x59c>

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
 4000c00:	e0bfdc17 	ldw	r2,-144(fp)
 4000c04:	e0bfe915 	stw	r2,-92(fp)
            alt_u32 word = 0;
 4000c08:	e03fde15 	stw	zero,-136(fp)
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 4000c0c:	e0bfdd17 	ldw	r2,-140(fp)
 4000c10:	e0bfdf15 	stw	r2,-132(fp)
 4000c14:	00007c06 	br	4000e08 <draw_string+0x580>
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 4000c18:	e0bfeb03 	ldbu	r2,-84(fp)
 4000c1c:	e0ffdf17 	ldw	r3,-132(fp)
 4000c20:	18807336 	bltu	r3,r2,4000df0 <draw_string+0x568>

                // Check if we are out of the width of the string
                if (wx-x >= str_pxl_len) continue;
 4000c24:	e0bfeb03 	ldbu	r2,-84(fp)
 4000c28:	e0ffdf17 	ldw	r3,-132(fp)
 4000c2c:	1887c83a 	sub	r3,r3,r2
 4000c30:	e0bfd917 	ldw	r2,-156(fp)
 4000c34:	1880702e 	bgeu	r3,r2,4000df8 <draw_string+0x570>

                // Figure out which character we are drawing
                if (wx-x >= pxl_boundaries[char_idx]) char_idx++;
 4000c38:	e0bfeb03 	ldbu	r2,-84(fp)
 4000c3c:	e0ffdf17 	ldw	r3,-132(fp)
 4000c40:	1887c83a 	sub	r3,r3,r2
 4000c44:	e13fe617 	ldw	r4,-104(fp)
 4000c48:	e0bfdb17 	ldw	r2,-148(fp)
 4000c4c:	1085883a 	add	r2,r2,r2
 4000c50:	1085883a 	add	r2,r2,r2
 4000c54:	2085883a 	add	r2,r4,r2
 4000c58:	10800017 	ldw	r2,0(r2)
 4000c5c:	18800336 	bltu	r3,r2,4000c6c <draw_string+0x3e4>
 4000c60:	e0bfdb17 	ldw	r2,-148(fp)
 4000c64:	10800044 	addi	r2,r2,1
 4000c68:	e0bfdb15 	stw	r2,-148(fp)

                // Get the relevant character from the font data
                alt_u8 font_data = font->data[font_outers[char_idx]];
 4000c6c:	e0bfee17 	ldw	r2,-72(fp)
 4000c70:	10c00117 	ldw	r3,4(r2)
 4000c74:	e13fe217 	ldw	r4,-120(fp)
 4000c78:	e0bfdb17 	ldw	r2,-148(fp)
 4000c7c:	1085883a 	add	r2,r2,r2
 4000c80:	1085883a 	add	r2,r2,r2
 4000c84:	2085883a 	add	r2,r4,r2
 4000c88:	10800017 	ldw	r2,0(r2)
 4000c8c:	1885883a 	add	r2,r3,r2
 4000c90:	10800003 	ldbu	r2,0(r2)
 4000c94:	e0bfea05 	stb	r2,-88(fp)

                // Extract the relevant pixel data
                alt_u32 pixel_data = (font_data >> ((3-font_inners[char_idx])*2)) % 4;
 4000c98:	e0ffea03 	ldbu	r3,-88(fp)
 4000c9c:	e13fe417 	ldw	r4,-112(fp)
 4000ca0:	e0bfdb17 	ldw	r2,-148(fp)
 4000ca4:	2085883a 	add	r2,r4,r2
 4000ca8:	10800003 	ldbu	r2,0(r2)
 4000cac:	10803fcc 	andi	r2,r2,255
 4000cb0:	010000c4 	movi	r4,3
 4000cb4:	2085c83a 	sub	r2,r4,r2
 4000cb8:	1085883a 	add	r2,r2,r2
 4000cbc:	1887d83a 	sra	r3,r3,r2
 4000cc0:	00a00034 	movhi	r2,32768
 4000cc4:	108000c4 	addi	r2,r2,3
 4000cc8:	1884703a 	and	r2,r3,r2
 4000ccc:	1000040e 	bge	r2,zero,4000ce0 <draw_string+0x458>
 4000cd0:	10bfffc4 	addi	r2,r2,-1
 4000cd4:	00ffff04 	movi	r3,-4
 4000cd8:	10c4b03a 	or	r2,r2,r3
 4000cdc:	10800044 	addi	r2,r2,1
 4000ce0:	e0bfe015 	stw	r2,-128(fp)
                if (str[char_idx] == ' ') pixel_data = 0;
 4000ce4:	e0ffed17 	ldw	r3,-76(fp)
 4000ce8:	e0bfdb17 	ldw	r2,-148(fp)
 4000cec:	1885883a 	add	r2,r3,r2
 4000cf0:	10800003 	ldbu	r2,0(r2)
 4000cf4:	10803fcc 	andi	r2,r2,255
 4000cf8:	1080201c 	xori	r2,r2,128
 4000cfc:	10bfe004 	addi	r2,r2,-128
 4000d00:	10800818 	cmpnei	r2,r2,32
 4000d04:	1000011e 	bne	r2,zero,4000d0c <draw_string+0x484>
 4000d08:	e03fe015 	stw	zero,-128(fp)

                // Write the pixel data to the word
                word += pixel_data << (15-(wx%16))*2;
 4000d0c:	e0bfdf17 	ldw	r2,-132(fp)
 4000d10:	0084303a 	nor	r2,zero,r2
 4000d14:	108003cc 	andi	r2,r2,15
 4000d18:	1085883a 	add	r2,r2,r2
 4000d1c:	1007883a 	mov	r3,r2
 4000d20:	e0bfe017 	ldw	r2,-128(fp)
 4000d24:	10c4983a 	sll	r2,r2,r3
 4000d28:	e0ffde17 	ldw	r3,-136(fp)
 4000d2c:	1885883a 	add	r2,r3,r2
 4000d30:	e0bfde15 	stw	r2,-136(fp)

                // Increment the pixel counter for the font data
                if (++font_inners[char_idx] == 4){
 4000d34:	e0ffe417 	ldw	r3,-112(fp)
 4000d38:	e0bfdb17 	ldw	r2,-148(fp)
 4000d3c:	1885883a 	add	r2,r3,r2
 4000d40:	10800003 	ldbu	r2,0(r2)
 4000d44:	10800044 	addi	r2,r2,1
 4000d48:	1009883a 	mov	r4,r2
 4000d4c:	e0ffe417 	ldw	r3,-112(fp)
 4000d50:	e0bfdb17 	ldw	r2,-148(fp)
 4000d54:	1885883a 	add	r2,r3,r2
 4000d58:	11000005 	stb	r4,0(r2)
 4000d5c:	e0ffe417 	ldw	r3,-112(fp)
 4000d60:	e0bfdb17 	ldw	r2,-148(fp)
 4000d64:	1885883a 	add	r2,r3,r2
 4000d68:	10800003 	ldbu	r2,0(r2)
 4000d6c:	10803fcc 	andi	r2,r2,255
 4000d70:	10800118 	cmpnei	r2,r2,4
 4000d74:	1000111e 	bne	r2,zero,4000dbc <draw_string+0x534>
                    font_inners[char_idx] = 0;
 4000d78:	e0ffe417 	ldw	r3,-112(fp)
 4000d7c:	e0bfdb17 	ldw	r2,-148(fp)
 4000d80:	1885883a 	add	r2,r3,r2
 4000d84:	10000005 	stb	zero,0(r2)
                    font_outers[char_idx]++;
 4000d88:	e0ffe217 	ldw	r3,-120(fp)
 4000d8c:	e0bfdb17 	ldw	r2,-148(fp)
 4000d90:	1085883a 	add	r2,r2,r2
 4000d94:	1085883a 	add	r2,r2,r2
 4000d98:	1885883a 	add	r2,r3,r2
 4000d9c:	10800017 	ldw	r2,0(r2)
 4000da0:	10c00044 	addi	r3,r2,1
 4000da4:	e13fe217 	ldw	r4,-120(fp)
 4000da8:	e0bfdb17 	ldw	r2,-148(fp)
 4000dac:	1085883a 	add	r2,r2,r2
 4000db0:	1085883a 	add	r2,r2,r2
 4000db4:	2085883a 	add	r2,r4,r2
 4000db8:	10c00015 	stw	r3,0(r2)
                }

            // Write the word to VRAM
            vga_ctrl->VRAM[(x_wb/16) + (y_wb*40)] = word;
 4000dbc:	d412cb17 	ldw	r16,19244(gp)
 4000dc0:	e0bfdd17 	ldw	r2,-140(fp)
 4000dc4:	1022d13a 	srli	r17,r2,4
 4000dc8:	01400a04 	movi	r5,40
 4000dcc:	e13fdc17 	ldw	r4,-144(fp)
 4000dd0:	400b1dc0 	call	400b1dc <__mulsi3>
 4000dd4:	8885883a 	add	r2,r17,r2
 4000dd8:	1085883a 	add	r2,r2,r2
 4000ddc:	1085883a 	add	r2,r2,r2
 4000de0:	8085883a 	add	r2,r16,r2
 4000de4:	e0ffde17 	ldw	r3,-136(fp)
 4000de8:	10c00015 	stw	r3,0(r2)
 4000dec:	00000306 	br	4000dfc <draw_string+0x574>
            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
                // Check if the pixel is outside the character to be drawn
                if (wx < x) continue;
 4000df0:	0001883a 	nop
 4000df4:	00000106 	br	4000dfc <draw_string+0x574>

                // Check if we are out of the width of the string
                if (wx-x >= str_pxl_len) continue;
 4000df8:	0001883a 	nop
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+str_pxl_len); x_wb+=16) {

            // Iterate through all of the pixels in the word
            alt_u32 wy = y_wb;
            alt_u32 word = 0;
            for(alt_u32 wx=x_wb; wx < x_wb+16; wx++) {
 4000dfc:	e0bfdf17 	ldw	r2,-132(fp)
 4000e00:	10800044 	addi	r2,r2,1
 4000e04:	e0bfdf15 	stw	r2,-132(fp)
 4000e08:	e0bfdd17 	ldw	r2,-140(fp)
 4000e0c:	10800404 	addi	r2,r2,16
 4000e10:	e0ffdf17 	ldw	r3,-132(fp)
 4000e14:	18bf8036 	bltu	r3,r2,4000c18 <__alt_data_end+0xfc000c18>

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
        for(alt_u32 x_wb=start_wb_x; x_wb<(x+str_pxl_len); x_wb+=16) {
 4000e18:	e0bfdd17 	ldw	r2,-140(fp)
 4000e1c:	10800404 	addi	r2,r2,16
 4000e20:	e0bfdd15 	stw	r2,-140(fp)
 4000e24:	e0ffeb03 	ldbu	r3,-84(fp)
 4000e28:	e0bfd917 	ldw	r2,-156(fp)
 4000e2c:	1885883a 	add	r2,r3,r2
 4000e30:	e0ffdd17 	ldw	r3,-140(fp)
 4000e34:	18bf7236 	bltu	r3,r2,4000c00 <__alt_data_end+0xfc000c00>
            // Write the word to VRAM
            vga_ctrl->VRAM[(x_wb/16) + (y_wb*40)] = word;
            }
        }
        // Reset the character index for the next row of pixels
        char_idx = 0;
 4000e38:	e03fdb15 	stw	zero,-148(fp)
    alt_u8  char_height = font->height;

    // Iterate over the relevant VRAM words
    // x_wb, y_wb are guaranteed to point to the beginning of a relevant word of memory
    alt_u32 start_wb_x = x-(x%16);
    for(alt_u32 y_wb=y; y_wb<(y+char_height); y_wb++) {
 4000e3c:	e0bfdc17 	ldw	r2,-144(fp)
 4000e40:	10800044 	addi	r2,r2,1
 4000e44:	e0bfdc15 	stw	r2,-144(fp)
 4000e48:	e0ffec03 	ldbu	r3,-80(fp)
 4000e4c:	e0bfe743 	ldbu	r2,-99(fp)
 4000e50:	1885883a 	add	r2,r3,r2
 4000e54:	1007883a 	mov	r3,r2
 4000e58:	e0bfdc17 	ldw	r2,-144(fp)
 4000e5c:	10ff6536 	bltu	r2,r3,4000bf4 <__alt_data_end+0xfc000bf4>
 4000e60:	e6ffef17 	ldw	sp,-68(fp)
            }
        }
        // Reset the character index for the next row of pixels
        char_idx = 0;
    }
}
 4000e64:	0001883a 	nop
 4000e68:	e6fff804 	addi	sp,fp,-32
 4000e6c:	dfc00917 	ldw	ra,36(sp)
 4000e70:	df000817 	ldw	fp,32(sp)
 4000e74:	ddc00717 	ldw	r23,28(sp)
 4000e78:	dd800617 	ldw	r22,24(sp)
 4000e7c:	dd400517 	ldw	r21,20(sp)
 4000e80:	dd000417 	ldw	r20,16(sp)
 4000e84:	dcc00317 	ldw	r19,12(sp)
 4000e88:	dc800217 	ldw	r18,8(sp)
 4000e8c:	dc400117 	ldw	r17,4(sp)
 4000e90:	dc000017 	ldw	r16,0(sp)
 4000e94:	dec00a04 	addi	sp,sp,40
 4000e98:	f800283a 	ret

04000e9c <draw_sample>:

void draw_sample() {
 4000e9c:	defb7e04 	addi	sp,sp,-4616
 4000ea0:	dfc48115 	stw	ra,4612(sp)
 4000ea4:	df048015 	stw	fp,4608(sp)
 4000ea8:	dc447f15 	stw	r17,4604(sp)
 4000eac:	dc047e15 	stw	r16,4600(sp)
 4000eb0:	df048004 	addi	fp,sp,4608
    // Draw the server name
    draw_string(SIDEBAR_X_MARGIN, SERVER_Y, "ECE 385", &fonts[SERVER_FONT]);
 4000eb4:	01c100b4 	movhi	r7,1026
 4000eb8:	39ca1904 	addi	r7,r7,10340
 4000ebc:	018100b4 	movhi	r6,1026
 4000ec0:	31adef04 	addi	r6,r6,-18500
 4000ec4:	014008c4 	movi	r5,35
 4000ec8:	01000144 	movi	r4,5
 4000ecc:	40008880 	call	4000888 <draw_string>

    // Draw the channel names
    const char channels[8][255] = {
 4000ed0:	008100b4 	movhi	r2,1026
 4000ed4:	10adf344 	addi	r2,r2,-18483
 4000ed8:	e0fb8244 	addi	r3,fp,-4599
 4000edc:	1009883a 	mov	r4,r2
 4000ee0:	0081fe04 	movi	r2,2040
 4000ee4:	100d883a 	mov	r6,r2
 4000ee8:	200b883a 	mov	r5,r4
 4000eec:	1809883a 	mov	r4,r3
 4000ef0:	400c0380 	call	400c038 <memcpy>
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
 4000ef4:	e03b8005 	stb	zero,-4608(fp)
 4000ef8:	00001b06 	br	4000f68 <draw_sample+0xcc>
        draw_string(
            SIDEBAR_X_MARGIN,
            (i*fonts[CHANNEL_FONT].height) + (i*CHANNEL_Y_MARGIN*2) + CHANNEL_Y_MARGIN + CHANNEL_Y,
 4000efc:	008100b4 	movhi	r2,1026
 4000f00:	108a1904 	addi	r2,r2,10340
 4000f04:	10800403 	ldbu	r2,16(r2)
 4000f08:	10803fcc 	andi	r2,r2,255
 4000f0c:	10800084 	addi	r2,r2,2
    const char channels[8][255] = {
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
        draw_string(
 4000f10:	1007883a 	mov	r3,r2
 4000f14:	e0bb8003 	ldbu	r2,-4608(fp)
 4000f18:	100b883a 	mov	r5,r2
 4000f1c:	1809883a 	mov	r4,r3
 4000f20:	400b1dc0 	call	400b1dc <__mulsi3>
 4000f24:	10800d44 	addi	r2,r2,53
 4000f28:	14403fcc 	andi	r17,r2,255
            SIDEBAR_X_MARGIN,
            (i*fonts[CHANNEL_FONT].height) + (i*CHANNEL_Y_MARGIN*2) + CHANNEL_Y_MARGIN + CHANNEL_Y,
            channels[i],
 4000f2c:	e0bb8003 	ldbu	r2,-4608(fp)
 4000f30:	e43b8244 	addi	r16,fp,-4599
 4000f34:	01403fc4 	movi	r5,255
 4000f38:	1009883a 	mov	r4,r2
 4000f3c:	400b1dc0 	call	400b1dc <__mulsi3>
 4000f40:	8085883a 	add	r2,r16,r2
    const char channels[8][255] = {
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
        draw_string(
 4000f44:	01c100b4 	movhi	r7,1026
 4000f48:	39ca1d04 	addi	r7,r7,10356
 4000f4c:	100d883a 	mov	r6,r2
 4000f50:	880b883a 	mov	r5,r17
 4000f54:	01000144 	movi	r4,5
 4000f58:	40008880 	call	4000888 <draw_string>
    // Draw the channel names
    const char channels[8][255] = {
        "#welcome", "#news", "#rules", "#get-roles",
        "#general", "#memes", "#quizzes", "#final-project"
    };
    for(alt_u8 i=0; i<8; i++) {
 4000f5c:	e0bb8003 	ldbu	r2,-4608(fp)
 4000f60:	10800044 	addi	r2,r2,1
 4000f64:	e0bb8005 	stb	r2,-4608(fp)
 4000f68:	e0bb8003 	ldbu	r2,-4608(fp)
 4000f6c:	10800230 	cmpltui	r2,r2,8
 4000f70:	103fe21e 	bne	r2,zero,4000efc <__alt_data_end+0xfc000efc>
            &fonts[CHANNEL_FONT]
        );
    }

    // Draw the title for the message board
    draw_string(MESSAGE_X_MARGIN, TITLE_Y, "#general", &fonts[TITLE_FONT]);
 4000f74:	01c100b4 	movhi	r7,1026
 4000f78:	39ca2104 	addi	r7,r7,10372
 4000f7c:	018100b4 	movhi	r6,1026
 4000f80:	31adf104 	addi	r6,r6,-18492
 4000f84:	01400144 	movi	r5,5
 4000f88:	01002504 	movi	r4,148
 4000f8c:	40008880 	call	4000888 <draw_string>

    // Usernames, messages
    const char unames[4][255] = {
 4000f90:	008100b4 	movhi	r2,1026
 4000f94:	10aff144 	addi	r2,r2,-16443
 4000f98:	e0fd8044 	addi	r3,fp,-2559
 4000f9c:	1009883a 	mov	r4,r2
 4000fa0:	0080ff04 	movi	r2,1020
 4000fa4:	100d883a 	mov	r6,r2
 4000fa8:	200b883a 	mov	r5,r4
 4000fac:	1809883a 	mov	r4,r3
 4000fb0:	400c0380 	call	400c038 <memcpy>
        "partymarty", "Captain_Sisko", "txwong2", "martinm6"
    };
    const char messages[6][255] = {
 4000fb4:	008100b4 	movhi	r2,1026
 4000fb8:	10b0f044 	addi	r2,r2,-15423
 4000fbc:	e0fe7f44 	addi	r3,fp,-1539
 4000fc0:	1009883a 	mov	r4,r2
 4000fc4:	00817e84 	movi	r2,1530
 4000fc8:	100d883a 	mov	r6,r2
 4000fcc:	200b883a 	mov	r5,r4
 4000fd0:	1809883a 	mov	r4,r3
 4000fd4:	400c0380 	call	400c038 <memcpy>
        "Why do so many people in this department just not shower?",
        "Who cares about the weather being nice? I'm inside all day anyway.",
        "Lol this is why I'm not an EE major.",
        "CS professors don't have the ability to break your soul like ECE professors"
    };
    alt_u32 y = MESSAGE_Y;
 4000fd8:	00800884 	movi	r2,34
 4000fdc:	e0bb8115 	stw	r2,-4604(fp)
    for(alt_u8 i=0; i<6; i++) {
 4000fe0:	e03b8205 	stb	zero,-4600(fp)
 4000fe4:	00003206 	br	40010b0 <draw_sample+0x214>
        // Draw the uname
        draw_string(
 4000fe8:	e0bb8117 	ldw	r2,-4604(fp)
 4000fec:	10800044 	addi	r2,r2,1
 4000ff0:	14403fcc 	andi	r17,r2,255
            MESSAGE_X_MARGIN,
            y + UNAME_Y_MARGIN,
            unames[i%4],
 4000ff4:	e0bb8203 	ldbu	r2,-4600(fp)
 4000ff8:	108000cc 	andi	r2,r2,3
 4000ffc:	e43d8044 	addi	r16,fp,-2559
 4001000:	01403fc4 	movi	r5,255
 4001004:	1009883a 	mov	r4,r2
 4001008:	400b1dc0 	call	400b1dc <__mulsi3>
 400100c:	8085883a 	add	r2,r16,r2
        "CS professors don't have the ability to break your soul like ECE professors"
    };
    alt_u32 y = MESSAGE_Y;
    for(alt_u8 i=0; i<6; i++) {
        // Draw the uname
        draw_string(
 4001010:	01c100b4 	movhi	r7,1026
 4001014:	39ca2504 	addi	r7,r7,10388
 4001018:	100d883a 	mov	r6,r2
 400101c:	880b883a 	mov	r5,r17
 4001020:	01002504 	movi	r4,148
 4001024:	40008880 	call	4000888 <draw_string>
            MESSAGE_X_MARGIN,
            y + UNAME_Y_MARGIN,
            unames[i%4],
            &fonts[UNAME_FONT]
        );
        y += fonts[UNAME_FONT].height + 2*UNAME_Y_MARGIN;
 4001028:	008100b4 	movhi	r2,1026
 400102c:	108a1904 	addi	r2,r2,10340
 4001030:	10800c03 	ldbu	r2,48(r2)
 4001034:	10c03fcc 	andi	r3,r2,255
 4001038:	e0bb8117 	ldw	r2,-4604(fp)
 400103c:	1885883a 	add	r2,r3,r2
 4001040:	10800084 	addi	r2,r2,2
 4001044:	e0bb8115 	stw	r2,-4604(fp)

        // Draw the message
        draw_string(
 4001048:	e0bb8117 	ldw	r2,-4604(fp)
 400104c:	10800044 	addi	r2,r2,1
 4001050:	14403fcc 	andi	r17,r2,255
            MESSAGE_X_MARGIN,
            y + MESSAGE_Y_MARGIN,
            messages[i],
 4001054:	e0bb8203 	ldbu	r2,-4600(fp)
 4001058:	e43e7f44 	addi	r16,fp,-1539
 400105c:	01403fc4 	movi	r5,255
 4001060:	1009883a 	mov	r4,r2
 4001064:	400b1dc0 	call	400b1dc <__mulsi3>
 4001068:	8085883a 	add	r2,r16,r2
            &fonts[UNAME_FONT]
        );
        y += fonts[UNAME_FONT].height + 2*UNAME_Y_MARGIN;

        // Draw the message
        draw_string(
 400106c:	01c100b4 	movhi	r7,1026
 4001070:	39ca2904 	addi	r7,r7,10404
 4001074:	100d883a 	mov	r6,r2
 4001078:	880b883a 	mov	r5,r17
 400107c:	01002504 	movi	r4,148
 4001080:	40008880 	call	4000888 <draw_string>
            MESSAGE_X_MARGIN,
            y + MESSAGE_Y_MARGIN,
            messages[i],
            &fonts[MESSAGE_FONT]
        );
        y += fonts[MESSAGE_FONT].height + 2*MESSAGE_Y_MARGIN;
 4001084:	008100b4 	movhi	r2,1026
 4001088:	108a1904 	addi	r2,r2,10340
 400108c:	10801003 	ldbu	r2,64(r2)
 4001090:	10c03fcc 	andi	r3,r2,255
 4001094:	e0bb8117 	ldw	r2,-4604(fp)
 4001098:	1885883a 	add	r2,r3,r2
 400109c:	10800084 	addi	r2,r2,2
 40010a0:	e0bb8115 	stw	r2,-4604(fp)
        "Who cares about the weather being nice? I'm inside all day anyway.",
        "Lol this is why I'm not an EE major.",
        "CS professors don't have the ability to break your soul like ECE professors"
    };
    alt_u32 y = MESSAGE_Y;
    for(alt_u8 i=0; i<6; i++) {
 40010a4:	e0bb8203 	ldbu	r2,-4600(fp)
 40010a8:	10800044 	addi	r2,r2,1
 40010ac:	e0bb8205 	stb	r2,-4600(fp)
 40010b0:	e0bb8203 	ldbu	r2,-4600(fp)
 40010b4:	108001b0 	cmpltui	r2,r2,6
 40010b8:	103fcb1e 	bne	r2,zero,4000fe8 <__alt_data_end+0xfc000fe8>
            messages[i],
            &fonts[MESSAGE_FONT]
        );
        y += fonts[MESSAGE_FONT].height + 2*MESSAGE_Y_MARGIN;
    }
}
 40010bc:	0001883a 	nop
 40010c0:	e6fffe04 	addi	sp,fp,-8
 40010c4:	dfc00317 	ldw	ra,12(sp)
 40010c8:	df000217 	ldw	fp,8(sp)
 40010cc:	dc400117 	ldw	r17,4(sp)
 40010d0:	dc000017 	ldw	r16,0(sp)
 40010d4:	dec00404 	addi	sp,sp,16
 40010d8:	f800283a 	ret

040010dc <isDiscord>:

int isDiscord(const char* start) {
 40010dc:	defffc04 	addi	sp,sp,-16
 40010e0:	df000315 	stw	fp,12(sp)
 40010e4:	df000304 	addi	fp,sp,12
 40010e8:	e13fff15 	stw	r4,-4(fp)
	const char* comp = "discord-message:";
 40010ec:	008100b4 	movhi	r2,1026
 40010f0:	10b26f04 	addi	r2,r2,-13892
 40010f4:	e0bffe15 	stw	r2,-8(fp)
	for (int i = 0; i < 16; ++i) {
 40010f8:	e03ffd15 	stw	zero,-12(fp)
 40010fc:	00001406 	br	4001150 <isDiscord+0x74>
		if(comp[i] != start[i]) return 0;
 4001100:	e0bffd17 	ldw	r2,-12(fp)
 4001104:	e0fffe17 	ldw	r3,-8(fp)
 4001108:	1885883a 	add	r2,r3,r2
 400110c:	11000003 	ldbu	r4,0(r2)
 4001110:	e0bffd17 	ldw	r2,-12(fp)
 4001114:	e0ffff17 	ldw	r3,-4(fp)
 4001118:	1885883a 	add	r2,r3,r2
 400111c:	10800003 	ldbu	r2,0(r2)
 4001120:	20c03fcc 	andi	r3,r4,255
 4001124:	18c0201c 	xori	r3,r3,128
 4001128:	18ffe004 	addi	r3,r3,-128
 400112c:	10803fcc 	andi	r2,r2,255
 4001130:	1080201c 	xori	r2,r2,128
 4001134:	10bfe004 	addi	r2,r2,-128
 4001138:	18800226 	beq	r3,r2,4001144 <isDiscord+0x68>
 400113c:	0005883a 	mov	r2,zero
 4001140:	00000706 	br	4001160 <isDiscord+0x84>
    }
}

int isDiscord(const char* start) {
	const char* comp = "discord-message:";
	for (int i = 0; i < 16; ++i) {
 4001144:	e0bffd17 	ldw	r2,-12(fp)
 4001148:	10800044 	addi	r2,r2,1
 400114c:	e0bffd15 	stw	r2,-12(fp)
 4001150:	e0bffd17 	ldw	r2,-12(fp)
 4001154:	10800410 	cmplti	r2,r2,16
 4001158:	103fe91e 	bne	r2,zero,4001100 <__alt_data_end+0xfc001100>
		if(comp[i] != start[i]) return 0;
	}
	return 1;
 400115c:	00800044 	movi	r2,1
}
 4001160:	e037883a 	mov	sp,fp
 4001164:	df000017 	ldw	fp,0(sp)
 4001168:	dec00104 	addi	sp,sp,4
 400116c:	f800283a 	ret

04001170 <_ZN9DhcpClass13beginWithDHCPEPhmm>:
#include "Ethernet.h"
#include "utility/w5100.h"
#include "utility/IPAddress.h"

int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
 4001170:	defffa04 	addi	sp,sp,-24
 4001174:	dfc00515 	stw	ra,20(sp)
 4001178:	df000415 	stw	fp,16(sp)
 400117c:	df000404 	addi	fp,sp,16
 4001180:	e13ffc15 	stw	r4,-16(fp)
 4001184:	e17ffd15 	stw	r5,-12(fp)
 4001188:	e1bffe15 	stw	r6,-8(fp)
 400118c:	e1ffff15 	stw	r7,-4(fp)
	_dhcpLeaseTime=0;
 4001190:	e0bffc17 	ldw	r2,-16(fp)
 4001194:	10000915 	stw	zero,36(r2)
	_dhcpT1=0;
 4001198:	e0bffc17 	ldw	r2,-16(fp)
 400119c:	10000a15 	stw	zero,40(r2)
	_dhcpT2=0;
 40011a0:	e0bffc17 	ldw	r2,-16(fp)
 40011a4:	10000b15 	stw	zero,44(r2)
	_timeout = timeout;
 40011a8:	e0bffc17 	ldw	r2,-16(fp)
 40011ac:	e0fffe17 	ldw	r3,-8(fp)
 40011b0:	10c00e15 	stw	r3,56(r2)
	_responseTimeout = responseTimeout;
 40011b4:	e0bffc17 	ldw	r2,-16(fp)
 40011b8:	e0ffff17 	ldw	r3,-4(fp)
 40011bc:	10c00f15 	stw	r3,60(r2)

	// zero out _dhcpMacAddr
	memset(_dhcpMacAddr, 0, 6);
 40011c0:	e0bffc17 	ldw	r2,-16(fp)
 40011c4:	10800204 	addi	r2,r2,8
 40011c8:	01800184 	movi	r6,6
 40011cc:	000b883a 	mov	r5,zero
 40011d0:	1009883a 	mov	r4,r2
 40011d4:	400c1800 	call	400c180 <memset>
	reset_DHCP_lease();
 40011d8:	e13ffc17 	ldw	r4,-16(fp)
 40011dc:	400121c0 	call	400121c <_ZN9DhcpClass16reset_DHCP_leaseEv>

	memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
 40011e0:	e0bffc17 	ldw	r2,-16(fp)
 40011e4:	10800204 	addi	r2,r2,8
 40011e8:	01800184 	movi	r6,6
 40011ec:	e17ffd17 	ldw	r5,-12(fp)
 40011f0:	1009883a 	mov	r4,r2
 40011f4:	400c0380 	call	400c038 <memcpy>
	_dhcp_state = STATE_DHCP_START;
 40011f8:	e0bffc17 	ldw	r2,-16(fp)
 40011fc:	10001105 	stb	zero,68(r2)
	return request_DHCP_lease();
 4001200:	e13ffc17 	ldw	r4,-16(fp)
 4001204:	40012600 	call	4001260 <_ZN9DhcpClass18request_DHCP_leaseEv>
}
 4001208:	e037883a 	mov	sp,fp
 400120c:	dfc00117 	ldw	ra,4(sp)
 4001210:	df000017 	ldw	fp,0(sp)
 4001214:	dec00204 	addi	sp,sp,8
 4001218:	f800283a 	ret

0400121c <_ZN9DhcpClass16reset_DHCP_leaseEv>:

void DhcpClass::reset_DHCP_lease()
{
 400121c:	defffd04 	addi	sp,sp,-12
 4001220:	dfc00215 	stw	ra,8(sp)
 4001224:	df000115 	stw	fp,4(sp)
 4001228:	df000104 	addi	fp,sp,4
 400122c:	e13fff15 	stw	r4,-4(fp)
	// zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
	memset(_dhcpLocalIp, 0, 20);
 4001230:	e0bfff17 	ldw	r2,-4(fp)
 4001234:	10800384 	addi	r2,r2,14
 4001238:	01800504 	movi	r6,20
 400123c:	000b883a 	mov	r5,zero
 4001240:	1009883a 	mov	r4,r2
 4001244:	400c1800 	call	400c180 <memset>
}
 4001248:	0001883a 	nop
 400124c:	e037883a 	mov	sp,fp
 4001250:	dfc00117 	ldw	ra,4(sp)
 4001254:	df000017 	ldw	fp,0(sp)
 4001258:	dec00204 	addi	sp,sp,8
 400125c:	f800283a 	ret

04001260 <_ZN9DhcpClass18request_DHCP_leaseEv>:

	//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease()
{
 4001260:	defff804 	addi	sp,sp,-32
 4001264:	dfc00715 	stw	ra,28(sp)
 4001268:	df000615 	stw	fp,24(sp)
 400126c:	df000604 	addi	fp,sp,24
 4001270:	e13fff15 	stw	r4,-4(fp)
	uint8_t messageType = 0;
 4001274:	e03ffa05 	stb	zero,-24(fp)

	// Pick an initial transaction ID
	//_dhcpTransactionId = random(1UL, 2000UL);
	_dhcpTransactionId = 1500UL;
 4001278:	e0bfff17 	ldw	r2,-4(fp)
 400127c:	00c17704 	movi	r3,1500
 4001280:	10c00115 	stw	r3,4(r2)
	_dhcpInitialTransactionId = _dhcpTransactionId;
 4001284:	e0bfff17 	ldw	r2,-4(fp)
 4001288:	10c00117 	ldw	r3,4(r2)
 400128c:	e0bfff17 	ldw	r2,-4(fp)
 4001290:	10c00015 	stw	r3,0(r2)

	_dhcpUdpSocket.stop();
 4001294:	e0bfff17 	ldw	r2,-4(fp)
 4001298:	10801204 	addi	r2,r2,72
 400129c:	1009883a 	mov	r4,r2
 40012a0:	4005a800 	call	4005a80 <_ZN11EthernetUDP4stopEv>
	if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0) {
 40012a4:	e0bfff17 	ldw	r2,-4(fp)
 40012a8:	10801204 	addi	r2,r2,72
 40012ac:	01401104 	movi	r5,68
 40012b0:	1009883a 	mov	r4,r2
 40012b4:	40059ac0 	call	40059ac <_ZN11EthernetUDP5beginEt>
 40012b8:	10803fcc 	andi	r2,r2,255
 40012bc:	1005003a 	cmpeq	r2,r2,zero
 40012c0:	10803fcc 	andi	r2,r2,255
 40012c4:	10000226 	beq	r2,zero,40012d0 <_ZN9DhcpClass18request_DHCP_leaseEv+0x70>
		// Couldn't get a socket
		return 0;
 40012c8:	0005883a 	mov	r2,zero
 40012cc:	0000c106 	br	40015d4 <_ZN9DhcpClass18request_DHCP_leaseEv+0x374>
	}

	presend_DHCP();
 40012d0:	e13fff17 	ldw	r4,-4(fp)
 40012d4:	40015e80 	call	40015e8 <_ZN9DhcpClass12presend_DHCPEv>

	int result = 0;
 40012d8:	e03ffb15 	stw	zero,-20(fp)

	unsigned long startTime = clock();
 40012dc:	400b73c0 	call	400b73c <clock>
 40012e0:	e0bffc15 	stw	r2,-16(fp)

	while (_dhcp_state != STATE_DHCP_LEASED) {
 40012e4:	e0bfff17 	ldw	r2,-4(fp)
 40012e8:	10801103 	ldbu	r2,68(r2)
 40012ec:	10803fcc 	andi	r2,r2,255
 40012f0:	108000e0 	cmpeqi	r2,r2,3
 40012f4:	1000a91e 	bne	r2,zero,400159c <_ZN9DhcpClass18request_DHCP_leaseEv+0x33c>
		if (_dhcp_state == STATE_DHCP_START) {
 40012f8:	e0bfff17 	ldw	r2,-4(fp)
 40012fc:	10801103 	ldbu	r2,68(r2)
 4001300:	10803fcc 	andi	r2,r2,255
 4001304:	1000151e 	bne	r2,zero,400135c <_ZN9DhcpClass18request_DHCP_leaseEv+0xfc>
			_dhcpTransactionId++;
 4001308:	e0bfff17 	ldw	r2,-4(fp)
 400130c:	10800117 	ldw	r2,4(r2)
 4001310:	10c00044 	addi	r3,r2,1
 4001314:	e0bfff17 	ldw	r2,-4(fp)
 4001318:	10c00115 	stw	r3,4(r2)
			send_DHCP_MESSAGE(DHCP_DISCOVER, ((clock() - startTime) / 1000));
 400131c:	400b73c0 	call	400b73c <clock>
 4001320:	1007883a 	mov	r3,r2
 4001324:	e0bffc17 	ldw	r2,-16(fp)
 4001328:	1885c83a 	sub	r2,r3,r2
 400132c:	0140fa04 	movi	r5,1000
 4001330:	1009883a 	mov	r4,r2
 4001334:	400b1200 	call	400b120 <__udivsi3>
 4001338:	10bfffcc 	andi	r2,r2,65535
 400133c:	100d883a 	mov	r6,r2
 4001340:	01400044 	movi	r5,1
 4001344:	e13fff17 	ldw	r4,-4(fp)
 4001348:	400160c0 	call	400160c <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
			_dhcp_state = STATE_DHCP_DISCOVER;
 400134c:	e0bfff17 	ldw	r2,-4(fp)
 4001350:	00c00044 	movi	r3,1
 4001354:	10c01105 	stb	r3,68(r2)
 4001358:	00007906 	br	4001540 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
		} else if (_dhcp_state == STATE_DHCP_REREQUEST) {
 400135c:	e0bfff17 	ldw	r2,-4(fp)
 4001360:	10801103 	ldbu	r2,68(r2)
 4001364:	10803fcc 	andi	r2,r2,255
 4001368:	10800118 	cmpnei	r2,r2,4
 400136c:	1000151e 	bne	r2,zero,40013c4 <_ZN9DhcpClass18request_DHCP_leaseEv+0x164>
			_dhcpTransactionId++;
 4001370:	e0bfff17 	ldw	r2,-4(fp)
 4001374:	10800117 	ldw	r2,4(r2)
 4001378:	10c00044 	addi	r3,r2,1
 400137c:	e0bfff17 	ldw	r2,-4(fp)
 4001380:	10c00115 	stw	r3,4(r2)
			send_DHCP_MESSAGE(DHCP_REQUEST, ((clock() - startTime)/1000));
 4001384:	400b73c0 	call	400b73c <clock>
 4001388:	1007883a 	mov	r3,r2
 400138c:	e0bffc17 	ldw	r2,-16(fp)
 4001390:	1885c83a 	sub	r2,r3,r2
 4001394:	0140fa04 	movi	r5,1000
 4001398:	1009883a 	mov	r4,r2
 400139c:	400b1200 	call	400b120 <__udivsi3>
 40013a0:	10bfffcc 	andi	r2,r2,65535
 40013a4:	100d883a 	mov	r6,r2
 40013a8:	014000c4 	movi	r5,3
 40013ac:	e13fff17 	ldw	r4,-4(fp)
 40013b0:	400160c0 	call	400160c <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
			_dhcp_state = STATE_DHCP_REQUEST;
 40013b4:	e0bfff17 	ldw	r2,-4(fp)
 40013b8:	00c00084 	movi	r3,2
 40013bc:	10c01105 	stb	r3,68(r2)
 40013c0:	00005f06 	br	4001540 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
		} else if (_dhcp_state == STATE_DHCP_DISCOVER) {
 40013c4:	e0bfff17 	ldw	r2,-4(fp)
 40013c8:	10801103 	ldbu	r2,68(r2)
 40013cc:	10803fcc 	andi	r2,r2,255
 40013d0:	10800058 	cmpnei	r2,r2,1
 40013d4:	10001e1e 	bne	r2,zero,4001450 <_ZN9DhcpClass18request_DHCP_leaseEv+0x1f0>
			uint32_t respId;
			messageType = parseDHCPResponse(_responseTimeout, respId);
 40013d8:	e0bfff17 	ldw	r2,-4(fp)
 40013dc:	10800f17 	ldw	r2,60(r2)
 40013e0:	e0fffd04 	addi	r3,fp,-12
 40013e4:	180d883a 	mov	r6,r3
 40013e8:	100b883a 	mov	r5,r2
 40013ec:	e13fff17 	ldw	r4,-4(fp)
 40013f0:	4001a5c0 	call	4001a5c <_ZN9DhcpClass17parseDHCPResponseEmRm>
 40013f4:	e0bffa05 	stb	r2,-24(fp)
			if (messageType == DHCP_OFFER) {
 40013f8:	e0bffa03 	ldbu	r2,-24(fp)
 40013fc:	10800098 	cmpnei	r2,r2,2
 4001400:	10004f1e 	bne	r2,zero,4001540 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
				// We'll use the transaction ID that the offer came with,
				// rather than the one we were up to
				_dhcpTransactionId = respId;
 4001404:	e0fffd17 	ldw	r3,-12(fp)
 4001408:	e0bfff17 	ldw	r2,-4(fp)
 400140c:	10c00115 	stw	r3,4(r2)
				send_DHCP_MESSAGE(DHCP_REQUEST, ((clock() - startTime) / 1000));
 4001410:	400b73c0 	call	400b73c <clock>
 4001414:	1007883a 	mov	r3,r2
 4001418:	e0bffc17 	ldw	r2,-16(fp)
 400141c:	1885c83a 	sub	r2,r3,r2
 4001420:	0140fa04 	movi	r5,1000
 4001424:	1009883a 	mov	r4,r2
 4001428:	400b1200 	call	400b120 <__udivsi3>
 400142c:	10bfffcc 	andi	r2,r2,65535
 4001430:	100d883a 	mov	r6,r2
 4001434:	014000c4 	movi	r5,3
 4001438:	e13fff17 	ldw	r4,-4(fp)
 400143c:	400160c0 	call	400160c <_ZN9DhcpClass17send_DHCP_MESSAGEEht>
				_dhcp_state = STATE_DHCP_REQUEST;
 4001440:	e0bfff17 	ldw	r2,-4(fp)
 4001444:	00c00084 	movi	r3,2
 4001448:	10c01105 	stb	r3,68(r2)
 400144c:	00003c06 	br	4001540 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			}
		} else if (_dhcp_state == STATE_DHCP_REQUEST) {
 4001450:	e0bfff17 	ldw	r2,-4(fp)
 4001454:	10801103 	ldbu	r2,68(r2)
 4001458:	10803fcc 	andi	r2,r2,255
 400145c:	10800098 	cmpnei	r2,r2,2
 4001460:	1000371e 	bne	r2,zero,4001540 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			uint32_t respId;
			messageType = parseDHCPResponse(_responseTimeout, respId);
 4001464:	e0bfff17 	ldw	r2,-4(fp)
 4001468:	10800f17 	ldw	r2,60(r2)
 400146c:	e0fffe04 	addi	r3,fp,-8
 4001470:	180d883a 	mov	r6,r3
 4001474:	100b883a 	mov	r5,r2
 4001478:	e13fff17 	ldw	r4,-4(fp)
 400147c:	4001a5c0 	call	4001a5c <_ZN9DhcpClass17parseDHCPResponseEmRm>
 4001480:	e0bffa05 	stb	r2,-24(fp)
			if (messageType == DHCP_ACK) {
 4001484:	e0bffa03 	ldbu	r2,-24(fp)
 4001488:	10800158 	cmpnei	r2,r2,5
 400148c:	1000271e 	bne	r2,zero,400152c <_ZN9DhcpClass18request_DHCP_leaseEv+0x2cc>
				_dhcp_state = STATE_DHCP_LEASED;
 4001490:	e0bfff17 	ldw	r2,-4(fp)
 4001494:	00c000c4 	movi	r3,3
 4001498:	10c01105 	stb	r3,68(r2)
				result = 1;
 400149c:	00800044 	movi	r2,1
 40014a0:	e0bffb15 	stw	r2,-20(fp)
				//use default lease time if we didn't get it
				if (_dhcpLeaseTime == 0) {
 40014a4:	e0bfff17 	ldw	r2,-4(fp)
 40014a8:	10800917 	ldw	r2,36(r2)
 40014ac:	1000031e 	bne	r2,zero,40014bc <_ZN9DhcpClass18request_DHCP_leaseEv+0x25c>
					_dhcpLeaseTime = DEFAULT_LEASE;
 40014b0:	e0bfff17 	ldw	r2,-4(fp)
 40014b4:	00c0e104 	movi	r3,900
 40014b8:	10c00915 	stw	r3,36(r2)
				}
				// Calculate T1 & T2 if we didn't get it
				if (_dhcpT1 == 0) {
 40014bc:	e0bfff17 	ldw	r2,-4(fp)
 40014c0:	10800a17 	ldw	r2,40(r2)
 40014c4:	1000051e 	bne	r2,zero,40014dc <_ZN9DhcpClass18request_DHCP_leaseEv+0x27c>
					// T1 should be 50% of _dhcpLeaseTime
					_dhcpT1 = _dhcpLeaseTime >> 1;
 40014c8:	e0bfff17 	ldw	r2,-4(fp)
 40014cc:	10800917 	ldw	r2,36(r2)
 40014d0:	1006d07a 	srli	r3,r2,1
 40014d4:	e0bfff17 	ldw	r2,-4(fp)
 40014d8:	10c00a15 	stw	r3,40(r2)
				}
				if (_dhcpT2 == 0) {
 40014dc:	e0bfff17 	ldw	r2,-4(fp)
 40014e0:	10800b17 	ldw	r2,44(r2)
 40014e4:	1000081e 	bne	r2,zero,4001508 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2a8>
					// T2 should be 87.5% (7/8ths) of _dhcpLeaseTime
					_dhcpT2 = _dhcpLeaseTime - (_dhcpLeaseTime >> 3);
 40014e8:	e0bfff17 	ldw	r2,-4(fp)
 40014ec:	10c00917 	ldw	r3,36(r2)
 40014f0:	e0bfff17 	ldw	r2,-4(fp)
 40014f4:	10800917 	ldw	r2,36(r2)
 40014f8:	1004d0fa 	srli	r2,r2,3
 40014fc:	1887c83a 	sub	r3,r3,r2
 4001500:	e0bfff17 	ldw	r2,-4(fp)
 4001504:	10c00b15 	stw	r3,44(r2)
				}
				_renewInSec = _dhcpT1;
 4001508:	e0bfff17 	ldw	r2,-4(fp)
 400150c:	10c00a17 	ldw	r3,40(r2)
 4001510:	e0bfff17 	ldw	r2,-4(fp)
 4001514:	10c00c15 	stw	r3,48(r2)
				_rebindInSec = _dhcpT2;
 4001518:	e0bfff17 	ldw	r2,-4(fp)
 400151c:	10c00b17 	ldw	r3,44(r2)
 4001520:	e0bfff17 	ldw	r2,-4(fp)
 4001524:	10c00d15 	stw	r3,52(r2)
 4001528:	00000506 	br	4001540 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
			} else if (messageType == DHCP_NAK) {
 400152c:	e0bffa03 	ldbu	r2,-24(fp)
 4001530:	10800198 	cmpnei	r2,r2,6
 4001534:	1000021e 	bne	r2,zero,4001540 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e0>
				_dhcp_state = STATE_DHCP_START;
 4001538:	e0bfff17 	ldw	r2,-4(fp)
 400153c:	10001105 	stb	zero,68(r2)
			}
		}

		if (messageType == 255) {
 4001540:	e0bffa03 	ldbu	r2,-24(fp)
 4001544:	10803fd8 	cmpnei	r2,r2,255
 4001548:	1000031e 	bne	r2,zero,4001558 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f8>
			messageType = 0;
 400154c:	e03ffa05 	stb	zero,-24(fp)
			_dhcp_state = STATE_DHCP_START;
 4001550:	e0bfff17 	ldw	r2,-4(fp)
 4001554:	10001105 	stb	zero,68(r2)
		}

		if (result != 1 && ((clock() - startTime) > _timeout))
 4001558:	e0bffb17 	ldw	r2,-20(fp)
 400155c:	10800060 	cmpeqi	r2,r2,1
 4001560:	1000091e 	bne	r2,zero,4001588 <_ZN9DhcpClass18request_DHCP_leaseEv+0x328>
 4001564:	400b73c0 	call	400b73c <clock>
 4001568:	1007883a 	mov	r3,r2
 400156c:	e0bffc17 	ldw	r2,-16(fp)
 4001570:	1885c83a 	sub	r2,r3,r2
 4001574:	e0ffff17 	ldw	r3,-4(fp)
 4001578:	18c00e17 	ldw	r3,56(r3)
 400157c:	1880022e 	bgeu	r3,r2,4001588 <_ZN9DhcpClass18request_DHCP_leaseEv+0x328>
 4001580:	00800044 	movi	r2,1
 4001584:	00000106 	br	400158c <_ZN9DhcpClass18request_DHCP_leaseEv+0x32c>
 4001588:	0005883a 	mov	r2,zero
 400158c:	10803fcc 	andi	r2,r2,255
 4001590:	1000011e 	bne	r2,zero,4001598 <_ZN9DhcpClass18request_DHCP_leaseEv+0x338>

	int result = 0;

	unsigned long startTime = clock();

	while (_dhcp_state != STATE_DHCP_LEASED) {
 4001594:	003f5306 	br	40012e4 <__alt_data_end+0xfc0012e4>
			messageType = 0;
			_dhcp_state = STATE_DHCP_START;
		}

		if (result != 1 && ((clock() - startTime) > _timeout))
			break;
 4001598:	0001883a 	nop
	}

	// We're done with the socket now
	_dhcpUdpSocket.stop();
 400159c:	e0bfff17 	ldw	r2,-4(fp)
 40015a0:	10801204 	addi	r2,r2,72
 40015a4:	1009883a 	mov	r4,r2
 40015a8:	4005a800 	call	4005a80 <_ZN11EthernetUDP4stopEv>
	_dhcpTransactionId++;
 40015ac:	e0bfff17 	ldw	r2,-4(fp)
 40015b0:	10800117 	ldw	r2,4(r2)
 40015b4:	10c00044 	addi	r3,r2,1
 40015b8:	e0bfff17 	ldw	r2,-4(fp)
 40015bc:	10c00115 	stw	r3,4(r2)

	_lastCheckLeaseMillis = clock();
 40015c0:	400b73c0 	call	400b73c <clock>
 40015c4:	1007883a 	mov	r3,r2
 40015c8:	e0bfff17 	ldw	r2,-4(fp)
 40015cc:	10c01015 	stw	r3,64(r2)
	return result;
 40015d0:	e0bffb17 	ldw	r2,-20(fp)
}
 40015d4:	e037883a 	mov	sp,fp
 40015d8:	dfc00117 	ldw	ra,4(sp)
 40015dc:	df000017 	ldw	fp,0(sp)
 40015e0:	dec00204 	addi	sp,sp,8
 40015e4:	f800283a 	ret

040015e8 <_ZN9DhcpClass12presend_DHCPEv>:

void DhcpClass::presend_DHCP()
{
 40015e8:	defffe04 	addi	sp,sp,-8
 40015ec:	df000115 	stw	fp,4(sp)
 40015f0:	df000104 	addi	fp,sp,4
 40015f4:	e13fff15 	stw	r4,-4(fp)
}
 40015f8:	0001883a 	nop
 40015fc:	e037883a 	mov	sp,fp
 4001600:	df000017 	ldw	fp,0(sp)
 4001604:	dec00104 	addi	sp,sp,4
 4001608:	f800283a 	ret

0400160c <_ZN9DhcpClass17send_DHCP_MESSAGEEht>:

void DhcpClass::send_DHCP_MESSAGE(uint8_t messageType, uint16_t secondsElapsed)
{
 400160c:	deffee04 	addi	sp,sp,-72
 4001610:	dfc01115 	stw	ra,68(sp)
 4001614:	df001015 	stw	fp,64(sp)
 4001618:	df001004 	addi	fp,sp,64
 400161c:	e13ffd15 	stw	r4,-12(fp)
 4001620:	2807883a 	mov	r3,r5
 4001624:	3005883a 	mov	r2,r6
 4001628:	e0fffe05 	stb	r3,-8(fp)
 400162c:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t buffer[32];
	memset(buffer, 0, 32);
 4001630:	e0bff204 	addi	r2,fp,-56
 4001634:	01800804 	movi	r6,32
 4001638:	000b883a 	mov	r5,zero
 400163c:	1009883a 	mov	r4,r2
 4001640:	400c1800 	call	400c180 <memset>
	IPAddress dest_addr(255, 255, 255, 255); // Broadcast address
 4001644:	e0fffa04 	addi	r3,fp,-24
 4001648:	00803fc4 	movi	r2,255
 400164c:	d8800015 	stw	r2,0(sp)
 4001650:	01c03fc4 	movi	r7,255
 4001654:	01803fc4 	movi	r6,255
 4001658:	01403fc4 	movi	r5,255
 400165c:	1809883a 	mov	r4,r3
 4001660:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>

	if (_dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT) == -1) {
 4001664:	e0bffd17 	ldw	r2,-12(fp)
 4001668:	10801204 	addi	r2,r2,72
 400166c:	018010c4 	movi	r6,67
 4001670:	e17ffa17 	ldw	r5,-24(fp)
 4001674:	1009883a 	mov	r4,r2
 4001678:	4005ba40 	call	4005ba4 <_ZN11EthernetUDP11beginPacketE9IPAddresst>
 400167c:	10bfffe0 	cmpeqi	r2,r2,-1
 4001680:	10803fcc 	andi	r2,r2,255
 4001684:	1000ef1e 	bne	r2,zero,4001a44 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x438>
		//Serial.printf("DHCP transmit error\n");
		// FIXME Need to return errors
		return;
	}

	buffer[0] = DHCP_BOOTREQUEST;   // op
 4001688:	00800044 	movi	r2,1
 400168c:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = DHCP_HTYPE10MB;     // htype
 4001690:	00800044 	movi	r2,1
 4001694:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = DHCP_HLENETHERNET;  // hlen
 4001698:	00800184 	movi	r2,6
 400169c:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = DHCP_HOPS;          // hops
 40016a0:	e03ff2c5 	stb	zero,-53(fp)

	// xid
	unsigned long xid = htonl(_dhcpTransactionId);
 40016a4:	e0bffd17 	ldw	r2,-12(fp)
 40016a8:	10800117 	ldw	r2,4(r2)
 40016ac:	1006963a 	slli	r3,r2,24
 40016b0:	e0bffd17 	ldw	r2,-12(fp)
 40016b4:	10800117 	ldw	r2,4(r2)
 40016b8:	1004923a 	slli	r2,r2,8
 40016bc:	10803fec 	andhi	r2,r2,255
 40016c0:	1886b03a 	or	r3,r3,r2
 40016c4:	e0bffd17 	ldw	r2,-12(fp)
 40016c8:	10800117 	ldw	r2,4(r2)
 40016cc:	1004d23a 	srli	r2,r2,8
 40016d0:	10bfc00c 	andi	r2,r2,65280
 40016d4:	1886b03a 	or	r3,r3,r2
 40016d8:	e0bffd17 	ldw	r2,-12(fp)
 40016dc:	10800117 	ldw	r2,4(r2)
 40016e0:	1004d63a 	srli	r2,r2,24
 40016e4:	1884b03a 	or	r2,r3,r2
 40016e8:	e0bffb15 	stw	r2,-20(fp)
	memcpy(buffer + 4, &(xid), 4);
 40016ec:	e0bff204 	addi	r2,fp,-56
 40016f0:	10800104 	addi	r2,r2,4
 40016f4:	e0fffb04 	addi	r3,fp,-20
 40016f8:	01800104 	movi	r6,4
 40016fc:	180b883a 	mov	r5,r3
 4001700:	1009883a 	mov	r4,r2
 4001704:	400c0380 	call	400c038 <memcpy>

	// 8, 9 - seconds elapsed
	buffer[8] = ((secondsElapsed & 0xff00) >> 8);
 4001708:	e0bfff0b 	ldhu	r2,-4(fp)
 400170c:	1004d23a 	srli	r2,r2,8
 4001710:	e0bff405 	stb	r2,-48(fp)
	buffer[9] = (secondsElapsed & 0x00ff);
 4001714:	e0bfff0b 	ldhu	r2,-4(fp)
 4001718:	e0bff445 	stb	r2,-47(fp)

	// flags
	unsigned short flags = htons(DHCP_FLAGSBROADCAST);
 400171c:	00802004 	movi	r2,128
 4001720:	e0bffc0d 	sth	r2,-16(fp)
	memcpy(buffer + 10, &(flags), 2);
 4001724:	e0bff204 	addi	r2,fp,-56
 4001728:	10800284 	addi	r2,r2,10
 400172c:	e0fffc04 	addi	r3,fp,-16
 4001730:	01800084 	movi	r6,2
 4001734:	180b883a 	mov	r5,r3
 4001738:	1009883a 	mov	r4,r2
 400173c:	400c0380 	call	400c038 <memcpy>
	// yiaddr: already zeroed
	// siaddr: already zeroed
	// giaddr: already zeroed

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 28);
 4001740:	e0bffd17 	ldw	r2,-12(fp)
 4001744:	10801204 	addi	r2,r2,72
 4001748:	e0fff204 	addi	r3,fp,-56
 400174c:	01800704 	movi	r6,28
 4001750:	180b883a 	mov	r5,r3
 4001754:	1009883a 	mov	r4,r2
 4001758:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>

	memset(buffer, 0, 32); // clear local buffer
 400175c:	e0bff204 	addi	r2,fp,-56
 4001760:	01800804 	movi	r6,32
 4001764:	000b883a 	mov	r5,zero
 4001768:	1009883a 	mov	r4,r2
 400176c:	400c1800 	call	400c180 <memset>

	memcpy(buffer, _dhcpMacAddr, 6); // chaddr
 4001770:	e0bffd17 	ldw	r2,-12(fp)
 4001774:	10c00204 	addi	r3,r2,8
 4001778:	e0bff204 	addi	r2,fp,-56
 400177c:	01800184 	movi	r6,6
 4001780:	180b883a 	mov	r5,r3
 4001784:	1009883a 	mov	r4,r2
 4001788:	400c0380 	call	400c038 <memcpy>

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 16);
 400178c:	e0bffd17 	ldw	r2,-12(fp)
 4001790:	10801204 	addi	r2,r2,72
 4001794:	e0fff204 	addi	r3,fp,-56
 4001798:	01800404 	movi	r6,16
 400179c:	180b883a 	mov	r5,r3
 40017a0:	1009883a 	mov	r4,r2
 40017a4:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>

	memset(buffer, 0, 32); // clear local buffer
 40017a8:	e0bff204 	addi	r2,fp,-56
 40017ac:	01800804 	movi	r6,32
 40017b0:	000b883a 	mov	r5,zero
 40017b4:	1009883a 	mov	r4,r2
 40017b8:	400c1800 	call	400c180 <memset>

	// leave zeroed out for sname && file
	// put in W5100 transmit buffer x 6 (192 bytes)

	for(int i = 0; i < 6; i++) {
 40017bc:	e03ff115 	stw	zero,-60(fp)
 40017c0:	e0bff117 	ldw	r2,-60(fp)
 40017c4:	10800188 	cmpgei	r2,r2,6
 40017c8:	10000b1e 	bne	r2,zero,40017f8 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x1ec>
		_dhcpUdpSocket.write(buffer, 32);
 40017cc:	e0bffd17 	ldw	r2,-12(fp)
 40017d0:	10801204 	addi	r2,r2,72
 40017d4:	e0fff204 	addi	r3,fp,-56
 40017d8:	01800804 	movi	r6,32
 40017dc:	180b883a 	mov	r5,r3
 40017e0:	1009883a 	mov	r4,r2
 40017e4:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>
	memset(buffer, 0, 32); // clear local buffer

	// leave zeroed out for sname && file
	// put in W5100 transmit buffer x 6 (192 bytes)

	for(int i = 0; i < 6; i++) {
 40017e8:	e0bff117 	ldw	r2,-60(fp)
 40017ec:	10800044 	addi	r2,r2,1
 40017f0:	e0bff115 	stw	r2,-60(fp)
 40017f4:	003ff206 	br	40017c0 <__alt_data_end+0xfc0017c0>
		_dhcpUdpSocket.write(buffer, 32);
	}

	// OPT - Magic Cookie
	buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
 40017f8:	008018c4 	movi	r2,99
 40017fc:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = (uint8_t)((MAGIC_COOKIE >> 16)& 0xFF);
 4001800:	00bfe084 	movi	r2,-126
 4001804:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = (uint8_t)((MAGIC_COOKIE >> 8)& 0xFF);
 4001808:	008014c4 	movi	r2,83
 400180c:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = (uint8_t)(MAGIC_COOKIE& 0xFF);
 4001810:	008018c4 	movi	r2,99
 4001814:	e0bff2c5 	stb	r2,-53(fp)

	// OPT - message type
	buffer[4] = dhcpMessageType;
 4001818:	00800d44 	movi	r2,53
 400181c:	e0bff305 	stb	r2,-52(fp)
	buffer[5] = 0x01;
 4001820:	00800044 	movi	r2,1
 4001824:	e0bff345 	stb	r2,-51(fp)
	buffer[6] = messageType; //DHCP_REQUEST;
 4001828:	e0bffe03 	ldbu	r2,-8(fp)
 400182c:	e0bff385 	stb	r2,-50(fp)

	// OPT - client identifier
	buffer[7] = dhcpClientIdentifier;
 4001830:	00800f44 	movi	r2,61
 4001834:	e0bff3c5 	stb	r2,-49(fp)
	buffer[8] = 0x07;
 4001838:	008001c4 	movi	r2,7
 400183c:	e0bff405 	stb	r2,-48(fp)
	buffer[9] = 0x01;
 4001840:	00800044 	movi	r2,1
 4001844:	e0bff445 	stb	r2,-47(fp)
	memcpy(buffer + 10, _dhcpMacAddr, 6);
 4001848:	e0bff204 	addi	r2,fp,-56
 400184c:	10800284 	addi	r2,r2,10
 4001850:	e0fffd17 	ldw	r3,-12(fp)
 4001854:	18c00204 	addi	r3,r3,8
 4001858:	01800184 	movi	r6,6
 400185c:	180b883a 	mov	r5,r3
 4001860:	1009883a 	mov	r4,r2
 4001864:	400c0380 	call	400c038 <memcpy>

	// OPT - host name
	buffer[16] = hostName;
 4001868:	00800304 	movi	r2,12
 400186c:	e0bff605 	stb	r2,-40(fp)
	buffer[17] = strlen(HOST_NAME) + 6; // length of hostname + last 3 bytes of mac address
 4001870:	00800304 	movi	r2,12
 4001874:	e0bff645 	stb	r2,-39(fp)
	strcpy((char*)&(buffer[18]), HOST_NAME);
 4001878:	e0bff204 	addi	r2,fp,-56
 400187c:	10800484 	addi	r2,r2,18
 4001880:	00d255c4 	movi	r3,18775
 4001884:	10c0000d 	sth	r3,0(r2)
 4001888:	00db9684 	movi	r3,28250
 400188c:	10c0008d 	sth	r3,2(r2)
 4001890:	00dd1944 	movi	r3,29797
 4001894:	10c0010d 	sth	r3,4(r2)
 4001898:	10000185 	stb	zero,6(r2)

	printByte((char*)&(buffer[24]), _dhcpMacAddr[3]);
 400189c:	e0bffd17 	ldw	r2,-12(fp)
 40018a0:	108002c3 	ldbu	r2,11(r2)
 40018a4:	10c03fcc 	andi	r3,r2,255
 40018a8:	e0bff204 	addi	r2,fp,-56
 40018ac:	10800604 	addi	r2,r2,24
 40018b0:	180d883a 	mov	r6,r3
 40018b4:	100b883a 	mov	r5,r2
 40018b8:	e13ffd17 	ldw	r4,-12(fp)
 40018bc:	40024f00 	call	40024f0 <_ZN9DhcpClass9printByteEPch>
	printByte((char*)&(buffer[26]), _dhcpMacAddr[4]);
 40018c0:	e0bffd17 	ldw	r2,-12(fp)
 40018c4:	10800303 	ldbu	r2,12(r2)
 40018c8:	10c03fcc 	andi	r3,r2,255
 40018cc:	e0bff204 	addi	r2,fp,-56
 40018d0:	10800684 	addi	r2,r2,26
 40018d4:	180d883a 	mov	r6,r3
 40018d8:	100b883a 	mov	r5,r2
 40018dc:	e13ffd17 	ldw	r4,-12(fp)
 40018e0:	40024f00 	call	40024f0 <_ZN9DhcpClass9printByteEPch>
	printByte((char*)&(buffer[28]), _dhcpMacAddr[5]);
 40018e4:	e0bffd17 	ldw	r2,-12(fp)
 40018e8:	10800343 	ldbu	r2,13(r2)
 40018ec:	10c03fcc 	andi	r3,r2,255
 40018f0:	e0bff204 	addi	r2,fp,-56
 40018f4:	10800704 	addi	r2,r2,28
 40018f8:	180d883a 	mov	r6,r3
 40018fc:	100b883a 	mov	r5,r2
 4001900:	e13ffd17 	ldw	r4,-12(fp)
 4001904:	40024f00 	call	40024f0 <_ZN9DhcpClass9printByteEPch>

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 30);
 4001908:	e0bffd17 	ldw	r2,-12(fp)
 400190c:	10801204 	addi	r2,r2,72
 4001910:	e0fff204 	addi	r3,fp,-56
 4001914:	01800784 	movi	r6,30
 4001918:	180b883a 	mov	r5,r3
 400191c:	1009883a 	mov	r4,r2
 4001920:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>

	if (messageType == DHCP_REQUEST) {
 4001924:	e0bffe03 	ldbu	r2,-8(fp)
 4001928:	108000d8 	cmpnei	r2,r2,3
 400192c:	1000271e 	bne	r2,zero,40019cc <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x3c0>
		buffer[0] = dhcpRequestedIPaddr;
 4001930:	00800c84 	movi	r2,50
 4001934:	e0bff205 	stb	r2,-56(fp)
		buffer[1] = 0x04;
 4001938:	00800104 	movi	r2,4
 400193c:	e0bff245 	stb	r2,-55(fp)
		buffer[2] = _dhcpLocalIp[0];
 4001940:	e0bffd17 	ldw	r2,-12(fp)
 4001944:	10800383 	ldbu	r2,14(r2)
 4001948:	e0bff285 	stb	r2,-54(fp)
		buffer[3] = _dhcpLocalIp[1];
 400194c:	e0bffd17 	ldw	r2,-12(fp)
 4001950:	108003c3 	ldbu	r2,15(r2)
 4001954:	e0bff2c5 	stb	r2,-53(fp)
		buffer[4] = _dhcpLocalIp[2];
 4001958:	e0bffd17 	ldw	r2,-12(fp)
 400195c:	10800403 	ldbu	r2,16(r2)
 4001960:	e0bff305 	stb	r2,-52(fp)
		buffer[5] = _dhcpLocalIp[3];
 4001964:	e0bffd17 	ldw	r2,-12(fp)
 4001968:	10800443 	ldbu	r2,17(r2)
 400196c:	e0bff345 	stb	r2,-51(fp)

		buffer[6] = dhcpServerIdentifier;
 4001970:	00800d84 	movi	r2,54
 4001974:	e0bff385 	stb	r2,-50(fp)
		buffer[7] = 0x04;
 4001978:	00800104 	movi	r2,4
 400197c:	e0bff3c5 	stb	r2,-49(fp)
		buffer[8] = _dhcpDhcpServerIp[0];
 4001980:	e0bffd17 	ldw	r2,-12(fp)
 4001984:	10800683 	ldbu	r2,26(r2)
 4001988:	e0bff405 	stb	r2,-48(fp)
		buffer[9] = _dhcpDhcpServerIp[1];
 400198c:	e0bffd17 	ldw	r2,-12(fp)
 4001990:	108006c3 	ldbu	r2,27(r2)
 4001994:	e0bff445 	stb	r2,-47(fp)
		buffer[10] = _dhcpDhcpServerIp[2];
 4001998:	e0bffd17 	ldw	r2,-12(fp)
 400199c:	10800703 	ldbu	r2,28(r2)
 40019a0:	e0bff485 	stb	r2,-46(fp)
		buffer[11] = _dhcpDhcpServerIp[3];
 40019a4:	e0bffd17 	ldw	r2,-12(fp)
 40019a8:	10800743 	ldbu	r2,29(r2)
 40019ac:	e0bff4c5 	stb	r2,-45(fp)

		//put data in W5100 transmit buffer
		_dhcpUdpSocket.write(buffer, 12);
 40019b0:	e0bffd17 	ldw	r2,-12(fp)
 40019b4:	10801204 	addi	r2,r2,72
 40019b8:	e0fff204 	addi	r3,fp,-56
 40019bc:	01800304 	movi	r6,12
 40019c0:	180b883a 	mov	r5,r3
 40019c4:	1009883a 	mov	r4,r2
 40019c8:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>
	}

	buffer[0] = dhcpParamRequest;
 40019cc:	00800dc4 	movi	r2,55
 40019d0:	e0bff205 	stb	r2,-56(fp)
	buffer[1] = 0x06;
 40019d4:	00800184 	movi	r2,6
 40019d8:	e0bff245 	stb	r2,-55(fp)
	buffer[2] = subnetMask;
 40019dc:	00800044 	movi	r2,1
 40019e0:	e0bff285 	stb	r2,-54(fp)
	buffer[3] = routersOnSubnet;
 40019e4:	008000c4 	movi	r2,3
 40019e8:	e0bff2c5 	stb	r2,-53(fp)
	buffer[4] = dns;
 40019ec:	00800184 	movi	r2,6
 40019f0:	e0bff305 	stb	r2,-52(fp)
	buffer[5] = domainName;
 40019f4:	008003c4 	movi	r2,15
 40019f8:	e0bff345 	stb	r2,-51(fp)
	buffer[6] = dhcpT1value;
 40019fc:	00800e84 	movi	r2,58
 4001a00:	e0bff385 	stb	r2,-50(fp)
	buffer[7] = dhcpT2value;
 4001a04:	00800ec4 	movi	r2,59
 4001a08:	e0bff3c5 	stb	r2,-49(fp)
	buffer[8] = endOption;
 4001a0c:	00bfffc4 	movi	r2,-1
 4001a10:	e0bff405 	stb	r2,-48(fp)

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 9);
 4001a14:	e0bffd17 	ldw	r2,-12(fp)
 4001a18:	10801204 	addi	r2,r2,72
 4001a1c:	e0fff204 	addi	r3,fp,-56
 4001a20:	01800244 	movi	r6,9
 4001a24:	180b883a 	mov	r5,r3
 4001a28:	1009883a 	mov	r4,r2
 4001a2c:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>

	_dhcpUdpSocket.endPacket();
 4001a30:	e0bffd17 	ldw	r2,-12(fp)
 4001a34:	10801204 	addi	r2,r2,72
 4001a38:	1009883a 	mov	r4,r2
 4001a3c:	4005c240 	call	4005c24 <_ZN11EthernetUDP9endPacketEv>
 4001a40:	00000106 	br	4001a48 <_ZN9DhcpClass17send_DHCP_MESSAGEEht+0x43c>
	IPAddress dest_addr(255, 255, 255, 255); // Broadcast address

	if (_dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT) == -1) {
		//Serial.printf("DHCP transmit error\n");
		// FIXME Need to return errors
		return;
 4001a44:	0001883a 	nop

	//put data in W5100 transmit buffer
	_dhcpUdpSocket.write(buffer, 9);

	_dhcpUdpSocket.endPacket();
}
 4001a48:	e037883a 	mov	sp,fp
 4001a4c:	dfc00117 	ldw	ra,4(sp)
 4001a50:	df000017 	ldw	fp,0(sp)
 4001a54:	dec00204 	addi	sp,sp,8
 4001a58:	f800283a 	ret

04001a5c <_ZN9DhcpClass17parseDHCPResponseEmRm>:

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
 4001a5c:	deffd604 	addi	sp,sp,-168
 4001a60:	dfc02915 	stw	ra,164(sp)
 4001a64:	df002815 	stw	fp,160(sp)
 4001a68:	ddc02715 	stw	r23,156(sp)
 4001a6c:	dd802615 	stw	r22,152(sp)
 4001a70:	dd402515 	stw	r21,148(sp)
 4001a74:	dd002415 	stw	r20,144(sp)
 4001a78:	dcc02315 	stw	r19,140(sp)
 4001a7c:	dc802215 	stw	r18,136(sp)
 4001a80:	dc402115 	stw	r17,132(sp)
 4001a84:	dc002015 	stw	r16,128(sp)
 4001a88:	df002804 	addi	fp,sp,160
 4001a8c:	e13fe715 	stw	r4,-100(fp)
 4001a90:	e17fe815 	stw	r5,-96(fp)
 4001a94:	e1bfe915 	stw	r6,-92(fp)
 4001a98:	00810074 	movhi	r2,1025
 4001a9c:	10a72604 	addi	r2,r2,-25448
 4001aa0:	e0bff015 	stw	r2,-64(fp)
 4001aa4:	008100b4 	movhi	r2,1026
 4001aa8:	10adc504 	addi	r2,r2,-18668
 4001aac:	e0bff115 	stw	r2,-60(fp)
 4001ab0:	e0bff204 	addi	r2,fp,-56
 4001ab4:	e0ffd804 	addi	r3,fp,-160
 4001ab8:	10c00015 	stw	r3,0(r2)
 4001abc:	00c10034 	movhi	r3,1024
 4001ac0:	18c87004 	addi	r3,r3,8640
 4001ac4:	10c00115 	stw	r3,4(r2)
 4001ac8:	16c00215 	stw	sp,8(r2)
 4001acc:	e0bfea04 	addi	r2,fp,-88
 4001ad0:	1009883a 	mov	r4,r2
 4001ad4:	400b40c0 	call	400b40c <_Unwind_SjLj_Register>
	uint8_t type = 0;
 4001ad8:	e03fd805 	stb	zero,-160(fp)
	uint8_t opt_len = 0;
 4001adc:	e03fd845 	stb	zero,-159(fp)

	unsigned long startTime = clock();
 4001ae0:	400b73c0 	call	400b73c <clock>
 4001ae4:	e0bfd915 	stw	r2,-156(fp)

	while (_dhcpUdpSocket.parsePacket() <= 0) {
 4001ae8:	e0bfe717 	ldw	r2,-100(fp)
 4001aec:	10c01204 	addi	r3,r2,72
 4001af0:	00bfffc4 	movi	r2,-1
 4001af4:	e0bfeb15 	stw	r2,-84(fp)
 4001af8:	1809883a 	mov	r4,r3
 4001afc:	4005d180 	call	4005d18 <_ZN11EthernetUDP11parsePacketEv>
 4001b00:	0084403a 	cmpge	r2,zero,r2
 4001b04:	10803fcc 	andi	r2,r2,255
 4001b08:	10000f26 	beq	r2,zero,4001b48 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xec>
		if ((clock() - startTime) > responseTimeout) {
 4001b0c:	400b73c0 	call	400b73c <clock>
 4001b10:	1007883a 	mov	r3,r2
 4001b14:	e0bfd917 	ldw	r2,-156(fp)
 4001b18:	1885c83a 	sub	r2,r3,r2
 4001b1c:	e0ffe817 	ldw	r3,-96(fp)
 4001b20:	1885803a 	cmpltu	r2,r3,r2
 4001b24:	10803fcc 	andi	r2,r2,255
 4001b28:	10000226 	beq	r2,zero,4001b34 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xd8>
			return 255;
 4001b2c:	00bfffc4 	movi	r2,-1
 4001b30:	0001a106 	br	40021b8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x75c>
		}
		usleep (50000);
 4001b34:	00bfffc4 	movi	r2,-1
 4001b38:	e0bfeb15 	stw	r2,-84(fp)
 4001b3c:	0130d414 	movui	r4,50000
 4001b40:	40194f00 	call	40194f0 <usleep>
	uint8_t type = 0;
	uint8_t opt_len = 0;

	unsigned long startTime = clock();

	while (_dhcpUdpSocket.parsePacket() <= 0) {
 4001b44:	003fe806 	br	4001ae8 <__alt_data_end+0xfc001ae8>
		}
		usleep (50000);
	}
	// start reading in the packet
	RIP_MSG_FIXED fixedMsg;
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));
 4001b48:	e0bfe717 	ldw	r2,-100(fp)
 4001b4c:	10c01204 	addi	r3,r2,72
 4001b50:	e13fde04 	addi	r4,fp,-136
 4001b54:	00bfffc4 	movi	r2,-1
 4001b58:	e0bfeb15 	stw	r2,-84(fp)
 4001b5c:	01800904 	movi	r6,36
 4001b60:	200b883a 	mov	r5,r4
 4001b64:	1809883a 	mov	r4,r3
 4001b68:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
 4001b6c:	e0bfde03 	ldbu	r2,-136(fp)
 4001b70:	10803fcc 	andi	r2,r2,255
 4001b74:	10800098 	cmpnei	r2,r2,2
 4001b78:	1000091e 	bne	r2,zero,4001ba0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x144>
 4001b7c:	e0bfe717 	ldw	r2,-100(fp)
 4001b80:	10801204 	addi	r2,r2,72
 4001b84:	1009883a 	mov	r4,r2
 4001b88:	40026900 	call	4002690 <_ZN11EthernetUDP10remotePortEv>
 4001b8c:	10bfffcc 	andi	r2,r2,65535
 4001b90:	108010d8 	cmpnei	r2,r2,67
 4001b94:	1000021e 	bne	r2,zero,4001ba0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x144>
 4001b98:	00800044 	movi	r2,1
 4001b9c:	00000106 	br	4001ba4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x148>
 4001ba0:	0005883a 	mov	r2,zero
 4001ba4:	10803fcc 	andi	r2,r2,255
 4001ba8:	10017c26 	beq	r2,zero,400219c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x740>
		transactionId = ntohl(fixedMsg.xid);
 4001bac:	e0bfdf17 	ldw	r2,-132(fp)
 4001bb0:	1006963a 	slli	r3,r2,24
 4001bb4:	e0bfdf17 	ldw	r2,-132(fp)
 4001bb8:	1004923a 	slli	r2,r2,8
 4001bbc:	10803fec 	andhi	r2,r2,255
 4001bc0:	1886b03a 	or	r3,r3,r2
 4001bc4:	e0bfdf17 	ldw	r2,-132(fp)
 4001bc8:	1004d23a 	srli	r2,r2,8
 4001bcc:	10bfc00c 	andi	r2,r2,65280
 4001bd0:	1886b03a 	or	r3,r3,r2
 4001bd4:	e0bfdf17 	ldw	r2,-132(fp)
 4001bd8:	1004d63a 	srli	r2,r2,24
 4001bdc:	1886b03a 	or	r3,r3,r2
 4001be0:	e0bfe917 	ldw	r2,-92(fp)
 4001be4:	10c00015 	stw	r3,0(r2)
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
 4001be8:	e0bfe717 	ldw	r2,-100(fp)
 4001bec:	10c00204 	addi	r3,r2,8
 4001bf0:	e0bfde04 	addi	r2,fp,-136
 4001bf4:	10800704 	addi	r2,r2,28
 4001bf8:	01800184 	movi	r6,6
 4001bfc:	180b883a 	mov	r5,r3
 4001c00:	1009883a 	mov	r4,r2
 4001c04:	400bfbc0 	call	400bfbc <memcmp>
 4001c08:	10000a1e 	bne	r2,zero,4001c34 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1d8>
		  (transactionId < _dhcpInitialTransactionId) ||
 4001c0c:	e0bfe917 	ldw	r2,-92(fp)
 4001c10:	10c00017 	ldw	r3,0(r2)
 4001c14:	e0bfe717 	ldw	r2,-100(fp)
 4001c18:	10800017 	ldw	r2,0(r2)
	RIP_MSG_FIXED fixedMsg;
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
		transactionId = ntohl(fixedMsg.xid);
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
 4001c1c:	18800536 	bltu	r3,r2,4001c34 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1d8>
		  (transactionId < _dhcpInitialTransactionId) ||
		  (transactionId > _dhcpTransactionId)) {
 4001c20:	e0bfe917 	ldw	r2,-92(fp)
 4001c24:	10800017 	ldw	r2,0(r2)
 4001c28:	e0ffe717 	ldw	r3,-100(fp)
 4001c2c:	18c00117 	ldw	r3,4(r3)
	_dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));

	if (fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT) {
		transactionId = ntohl(fixedMsg.xid);
		if (memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 ||
		  (transactionId < _dhcpInitialTransactionId) ||
 4001c30:	1880082e 	bgeu	r3,r2,4001c54 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1f8>
		  (transactionId > _dhcpTransactionId)) {
			// Need to read the rest of the packet here regardless
			_dhcpUdpSocket.flush(); // FIXME
 4001c34:	e0bfe717 	ldw	r2,-100(fp)
 4001c38:	10c01204 	addi	r3,r2,72
 4001c3c:	00bfffc4 	movi	r2,-1
 4001c40:	e0bfeb15 	stw	r2,-84(fp)
 4001c44:	1809883a 	mov	r4,r3
 4001c48:	40060380 	call	4006038 <_ZN11EthernetUDP5flushEv>
			return 0;
 4001c4c:	0005883a 	mov	r2,zero
 4001c50:	00015906 	br	40021b8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x75c>
		}

		memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);
 4001c54:	e0bfe717 	ldw	r2,-100(fp)
 4001c58:	10800384 	addi	r2,r2,14
 4001c5c:	e0ffe203 	ldbu	r3,-120(fp)
 4001c60:	10c00005 	stb	r3,0(r2)
 4001c64:	e0ffe243 	ldbu	r3,-119(fp)
 4001c68:	10c00045 	stb	r3,1(r2)
 4001c6c:	e0ffe283 	ldbu	r3,-118(fp)
 4001c70:	10c00085 	stb	r3,2(r2)
 4001c74:	e0ffe2c3 	ldbu	r3,-117(fp)
 4001c78:	10c000c5 	stb	r3,3(r2)

		// Skip to the option part
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));
 4001c7c:	e0bfe717 	ldw	r2,-100(fp)
 4001c80:	11001204 	addi	r4,r2,72
 4001c84:	00800904 	movi	r2,36
 4001c88:	00c03c04 	movi	r3,240
 4001c8c:	1885c83a 	sub	r2,r3,r2
 4001c90:	1007883a 	mov	r3,r2
 4001c94:	00bfffc4 	movi	r2,-1
 4001c98:	e0bfeb15 	stw	r2,-84(fp)
 4001c9c:	180d883a 	mov	r6,r3
 4001ca0:	000b883a 	mov	r5,zero
 4001ca4:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>

		while (_dhcpUdpSocket.available() > 0) {
 4001ca8:	e0bfe717 	ldw	r2,-100(fp)
 4001cac:	10c01204 	addi	r3,r2,72
 4001cb0:	00bfffc4 	movi	r2,-1
 4001cb4:	e0bfeb15 	stw	r2,-84(fp)
 4001cb8:	1809883a 	mov	r4,r3
 4001cbc:	4005a540 	call	4005a54 <_ZN11EthernetUDP9availableEv>
 4001cc0:	0084803a 	cmplt	r2,zero,r2
 4001cc4:	10803fcc 	andi	r2,r2,255
 4001cc8:	10013426 	beq	r2,zero,400219c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x740>
			switch (_dhcpUdpSocket.read()) {
 4001ccc:	e0bfe717 	ldw	r2,-100(fp)
 4001cd0:	10801204 	addi	r2,r2,72
 4001cd4:	1009883a 	mov	r4,r2
 4001cd8:	4005e4c0 	call	4005e4c <_ZN11EthernetUDP4readEv>
 4001cdc:	10c00ce0 	cmpeqi	r3,r2,51
 4001ce0:	1800f41e 	bne	r3,zero,40020b4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x658>
 4001ce4:	10c00d08 	cmpgei	r3,r2,52
 4001ce8:	18000b1e 	bne	r3,zero,4001d18 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2bc>
 4001cec:	10c00060 	cmpeqi	r3,r2,1
 4001cf0:	1800241e 	bne	r3,zero,4001d84 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x328>
 4001cf4:	10c00088 	cmpgei	r3,r2,2
 4001cf8:	1800021e 	bne	r3,zero,4001d04 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2a8>
 4001cfc:	10012326 	beq	r2,zero,400218c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x730>
 4001d00:	00011306 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>
 4001d04:	10c000e0 	cmpeqi	r3,r2,3
 4001d08:	18002e1e 	bne	r3,zero,4001dc4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x368>
 4001d0c:	108001a0 	cmpeqi	r2,r2,6
 4001d10:	1000441e 	bne	r2,zero,4001e24 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x3c8>
 4001d14:	00010e06 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>
 4001d18:	10c00ea0 	cmpeqi	r3,r2,58
 4001d1c:	18009f1e 	bne	r3,zero,4001f9c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x540>
 4001d20:	10c00ec8 	cmpgei	r3,r2,59
 4001d24:	1800051e 	bne	r3,zero,4001d3c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e0>
 4001d28:	10c00d60 	cmpeqi	r3,r2,53
 4001d2c:	1800081e 	bne	r3,zero,4001d50 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2f4>
 4001d30:	10800da0 	cmpeqi	r2,r2,54
 4001d34:	1000531e 	bne	r2,zero,4001e84 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x428>
 4001d38:	00010506 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>
 4001d3c:	10c00ee0 	cmpeqi	r3,r2,59
 4001d40:	1800b91e 	bne	r3,zero,4002028 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x5cc>
 4001d44:	10803fe0 	cmpeqi	r2,r2,255
 4001d48:	1001121e 	bne	r2,zero,4002194 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x738>
 4001d4c:	00010006 	br	4002150 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6f4>

			case padOption :
				break;

			case dhcpMessageType :
				opt_len = _dhcpUdpSocket.read();
 4001d50:	e0bfe717 	ldw	r2,-100(fp)
 4001d54:	10c01204 	addi	r3,r2,72
 4001d58:	00bfffc4 	movi	r2,-1
 4001d5c:	e0bfeb15 	stw	r2,-84(fp)
 4001d60:	1809883a 	mov	r4,r3
 4001d64:	4005e4c0 	call	4005e4c <_ZN11EthernetUDP4readEv>
 4001d68:	e0bfd845 	stb	r2,-159(fp)
				type = _dhcpUdpSocket.read();
 4001d6c:	e0bfe717 	ldw	r2,-100(fp)
 4001d70:	10801204 	addi	r2,r2,72
 4001d74:	1009883a 	mov	r4,r2
 4001d78:	4005e4c0 	call	4005e4c <_ZN11EthernetUDP4readEv>
 4001d7c:	e0bfd805 	stb	r2,-160(fp)
				break;
 4001d80:	00010506 	br	4002198 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case subnetMask :
				opt_len = _dhcpUdpSocket.read();
 4001d84:	e0bfe717 	ldw	r2,-100(fp)
 4001d88:	10c01204 	addi	r3,r2,72
 4001d8c:	00bfffc4 	movi	r2,-1
 4001d90:	e0bfeb15 	stw	r2,-84(fp)
 4001d94:	1809883a 	mov	r4,r3
 4001d98:	4005e4c0 	call	4005e4c <_ZN11EthernetUDP4readEv>
 4001d9c:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpSubnetMask, 4);
 4001da0:	e0bfe717 	ldw	r2,-100(fp)
 4001da4:	10c01204 	addi	r3,r2,72
 4001da8:	e0bfe717 	ldw	r2,-100(fp)
 4001dac:	10800484 	addi	r2,r2,18
 4001db0:	01800104 	movi	r6,4
 4001db4:	100b883a 	mov	r5,r2
 4001db8:	1809883a 	mov	r4,r3
 4001dbc:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				break;
 4001dc0:	0000f506 	br	4002198 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case routersOnSubnet :
				opt_len = _dhcpUdpSocket.read();
 4001dc4:	e0bfe717 	ldw	r2,-100(fp)
 4001dc8:	10c01204 	addi	r3,r2,72
 4001dcc:	00bfffc4 	movi	r2,-1
 4001dd0:	e0bfeb15 	stw	r2,-84(fp)
 4001dd4:	1809883a 	mov	r4,r3
 4001dd8:	4005e4c0 	call	4005e4c <_ZN11EthernetUDP4readEv>
 4001ddc:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpGatewayIp, 4);
 4001de0:	e0bfe717 	ldw	r2,-100(fp)
 4001de4:	10c01204 	addi	r3,r2,72
 4001de8:	e0bfe717 	ldw	r2,-100(fp)
 4001dec:	10800584 	addi	r2,r2,22
 4001df0:	01800104 	movi	r6,4
 4001df4:	100b883a 	mov	r5,r2
 4001df8:	1809883a 	mov	r4,r3
 4001dfc:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
 4001e00:	e0bfe717 	ldw	r2,-100(fp)
 4001e04:	10c01204 	addi	r3,r2,72
 4001e08:	e0bfd843 	ldbu	r2,-159(fp)
 4001e0c:	10bfff04 	addi	r2,r2,-4
 4001e10:	100d883a 	mov	r6,r2
 4001e14:	000b883a 	mov	r5,zero
 4001e18:	1809883a 	mov	r4,r3
 4001e1c:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				break;
 4001e20:	0000dd06 	br	4002198 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dns :
				opt_len = _dhcpUdpSocket.read();
 4001e24:	e0bfe717 	ldw	r2,-100(fp)
 4001e28:	10c01204 	addi	r3,r2,72
 4001e2c:	00bfffc4 	movi	r2,-1
 4001e30:	e0bfeb15 	stw	r2,-84(fp)
 4001e34:	1809883a 	mov	r4,r3
 4001e38:	4005e4c0 	call	4005e4c <_ZN11EthernetUDP4readEv>
 4001e3c:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
 4001e40:	e0bfe717 	ldw	r2,-100(fp)
 4001e44:	10c01204 	addi	r3,r2,72
 4001e48:	e0bfe717 	ldw	r2,-100(fp)
 4001e4c:	10800784 	addi	r2,r2,30
 4001e50:	01800104 	movi	r6,4
 4001e54:	100b883a 	mov	r5,r2
 4001e58:	1809883a 	mov	r4,r3
 4001e5c:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
 4001e60:	e0bfe717 	ldw	r2,-100(fp)
 4001e64:	10c01204 	addi	r3,r2,72
 4001e68:	e0bfd843 	ldbu	r2,-159(fp)
 4001e6c:	10bfff04 	addi	r2,r2,-4
 4001e70:	100d883a 	mov	r6,r2
 4001e74:	000b883a 	mov	r5,zero
 4001e78:	1809883a 	mov	r4,r3
 4001e7c:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				break;
 4001e80:	0000c506 	br	4002198 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
 4001e84:	e0bfe717 	ldw	r2,-100(fp)
 4001e88:	10c01204 	addi	r3,r2,72
 4001e8c:	00bfffc4 	movi	r2,-1
 4001e90:	e0bfeb15 	stw	r2,-84(fp)
 4001e94:	1809883a 	mov	r4,r3
 4001e98:	4005e4c0 	call	4005e4c <_ZN11EthernetUDP4readEv>
 4001e9c:	e0bfd845 	stb	r2,-159(fp)
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 4001ea0:	e0bfe717 	ldw	r2,-100(fp)
 4001ea4:	11000684 	addi	r4,r2,26
 4001ea8:	e0ffdd04 	addi	r3,fp,-140
 4001eac:	00800044 	movi	r2,1
 4001eb0:	e0bfeb15 	stw	r2,-84(fp)
 4001eb4:	200b883a 	mov	r5,r4
 4001eb8:	1809883a 	mov	r4,r3
 4001ebc:	4007d6c0 	call	4007d6c <_ZN9IPAddressC1EPKh>
 4001ec0:	e0bfdc04 	addi	r2,fp,-144
 4001ec4:	000b883a 	mov	r5,zero
 4001ec8:	1009883a 	mov	r4,r2
 4001ecc:	4007d380 	call	4007d38 <_ZN9IPAddressC1Em>
 4001ed0:	e0ffdc04 	addi	r3,fp,-144
 4001ed4:	e0bfdd04 	addi	r2,fp,-140
 4001ed8:	180b883a 	mov	r5,r3
 4001edc:	1009883a 	mov	r4,r2
 4001ee0:	40026300 	call	4002630 <_ZNK9IPAddresseqERKS_>
 4001ee4:	10803fcc 	andi	r2,r2,255
 4001ee8:	1000121e 	bne	r2,zero,4001f34 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4d8>
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
 4001eec:	e0bfe717 	ldw	r2,-100(fp)
 4001ef0:	10c00684 	addi	r3,r2,26
 4001ef4:	e0bfdb04 	addi	r2,fp,-148
 4001ef8:	180b883a 	mov	r5,r3
 4001efc:	1009883a 	mov	r4,r2
 4001f00:	4007d6c0 	call	4007d6c <_ZN9IPAddressC1EPKh>
 4001f04:	e0bfe717 	ldw	r2,-100(fp)
 4001f08:	10801204 	addi	r2,r2,72
 4001f0c:	1009883a 	mov	r4,r2
 4001f10:	40026680 	call	4002668 <_ZN11EthernetUDP8remoteIPEv>
 4001f14:	e0bfda15 	stw	r2,-152(fp)
 4001f18:	e0ffda04 	addi	r3,fp,-152
 4001f1c:	e0bfdb04 	addi	r2,fp,-148
 4001f20:	180b883a 	mov	r5,r3
 4001f24:	1009883a 	mov	r4,r2
 4001f28:	40026300 	call	4002630 <_ZNK9IPAddresseqERKS_>
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
				break;

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 4001f2c:	10803fcc 	andi	r2,r2,255
 4001f30:	10000226 	beq	r2,zero,4001f3c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e0>
 4001f34:	00800044 	movi	r2,1
 4001f38:	00000106 	br	4001f40 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e4>
 4001f3c:	0005883a 	mov	r2,zero
 4001f40:	10803fcc 	andi	r2,r2,255
 4001f44:	10000b26 	beq	r2,zero,4001f74 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x518>
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
					_dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
 4001f48:	e0bfe717 	ldw	r2,-100(fp)
 4001f4c:	10c01204 	addi	r3,r2,72
 4001f50:	e0bfe717 	ldw	r2,-100(fp)
 4001f54:	11000684 	addi	r4,r2,26
 4001f58:	00bfffc4 	movi	r2,-1
 4001f5c:	e0bfeb15 	stw	r2,-84(fp)
 4001f60:	01800104 	movi	r6,4
 4001f64:	200b883a 	mov	r5,r4
 4001f68:	1809883a 	mov	r4,r3
 4001f6c:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				} else {
					// Skip over the rest of this option
					_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
				}
				break;
 4001f70:	00008906 	br	4002198 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
				  IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() ) {
					_dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
				} else {
					// Skip over the rest of this option
					_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
 4001f74:	e0bfe717 	ldw	r2,-100(fp)
 4001f78:	10c01204 	addi	r3,r2,72
 4001f7c:	e13fd843 	ldbu	r4,-159(fp)
 4001f80:	00bfffc4 	movi	r2,-1
 4001f84:	e0bfeb15 	stw	r2,-84(fp)
 4001f88:	200d883a 	mov	r6,r4
 4001f8c:	000b883a 	mov	r5,zero
 4001f90:	1809883a 	mov	r4,r3
 4001f94:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				}
				break;
 4001f98:	00007f06 	br	4002198 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpT1value :
				opt_len = _dhcpUdpSocket.read();
 4001f9c:	e0bfe717 	ldw	r2,-100(fp)
 4001fa0:	10c01204 	addi	r3,r2,72
 4001fa4:	00bfffc4 	movi	r2,-1
 4001fa8:	e0bfeb15 	stw	r2,-84(fp)
 4001fac:	1809883a 	mov	r4,r3
 4001fb0:	4005e4c0 	call	4005e4c <_ZN11EthernetUDP4readEv>
 4001fb4:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
 4001fb8:	e0bfe717 	ldw	r2,-100(fp)
 4001fbc:	10c01204 	addi	r3,r2,72
 4001fc0:	e0bfe717 	ldw	r2,-100(fp)
 4001fc4:	10800a04 	addi	r2,r2,40
 4001fc8:	01800104 	movi	r6,4
 4001fcc:	100b883a 	mov	r5,r2
 4001fd0:	1809883a 	mov	r4,r3
 4001fd4:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				_dhcpT1 = ntohl(_dhcpT1);
 4001fd8:	e0bfe717 	ldw	r2,-100(fp)
 4001fdc:	10800a17 	ldw	r2,40(r2)
 4001fe0:	1006963a 	slli	r3,r2,24
 4001fe4:	e0bfe717 	ldw	r2,-100(fp)
 4001fe8:	10800a17 	ldw	r2,40(r2)
 4001fec:	1004923a 	slli	r2,r2,8
 4001ff0:	10803fec 	andhi	r2,r2,255
 4001ff4:	1886b03a 	or	r3,r3,r2
 4001ff8:	e0bfe717 	ldw	r2,-100(fp)
 4001ffc:	10800a17 	ldw	r2,40(r2)
 4002000:	1004d23a 	srli	r2,r2,8
 4002004:	10bfc00c 	andi	r2,r2,65280
 4002008:	1886b03a 	or	r3,r3,r2
 400200c:	e0bfe717 	ldw	r2,-100(fp)
 4002010:	10800a17 	ldw	r2,40(r2)
 4002014:	1004d63a 	srli	r2,r2,24
 4002018:	1886b03a 	or	r3,r3,r2
 400201c:	e0bfe717 	ldw	r2,-100(fp)
 4002020:	10c00a15 	stw	r3,40(r2)
				break;
 4002024:	00005c06 	br	4002198 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpT2value :
				opt_len = _dhcpUdpSocket.read();
 4002028:	e0bfe717 	ldw	r2,-100(fp)
 400202c:	10c01204 	addi	r3,r2,72
 4002030:	00bfffc4 	movi	r2,-1
 4002034:	e0bfeb15 	stw	r2,-84(fp)
 4002038:	1809883a 	mov	r4,r3
 400203c:	4005e4c0 	call	4005e4c <_ZN11EthernetUDP4readEv>
 4002040:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
 4002044:	e0bfe717 	ldw	r2,-100(fp)
 4002048:	10c01204 	addi	r3,r2,72
 400204c:	e0bfe717 	ldw	r2,-100(fp)
 4002050:	10800b04 	addi	r2,r2,44
 4002054:	01800104 	movi	r6,4
 4002058:	100b883a 	mov	r5,r2
 400205c:	1809883a 	mov	r4,r3
 4002060:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				_dhcpT2 = ntohl(_dhcpT2);
 4002064:	e0bfe717 	ldw	r2,-100(fp)
 4002068:	10800b17 	ldw	r2,44(r2)
 400206c:	1006963a 	slli	r3,r2,24
 4002070:	e0bfe717 	ldw	r2,-100(fp)
 4002074:	10800b17 	ldw	r2,44(r2)
 4002078:	1004923a 	slli	r2,r2,8
 400207c:	10803fec 	andhi	r2,r2,255
 4002080:	1886b03a 	or	r3,r3,r2
 4002084:	e0bfe717 	ldw	r2,-100(fp)
 4002088:	10800b17 	ldw	r2,44(r2)
 400208c:	1004d23a 	srli	r2,r2,8
 4002090:	10bfc00c 	andi	r2,r2,65280
 4002094:	1886b03a 	or	r3,r3,r2
 4002098:	e0bfe717 	ldw	r2,-100(fp)
 400209c:	10800b17 	ldw	r2,44(r2)
 40020a0:	1004d63a 	srli	r2,r2,24
 40020a4:	1886b03a 	or	r3,r3,r2
 40020a8:	e0bfe717 	ldw	r2,-100(fp)
 40020ac:	10c00b15 	stw	r3,44(r2)
				break;
 40020b0:	00003906 	br	4002198 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			case dhcpIPaddrLeaseTime :
				opt_len = _dhcpUdpSocket.read();
 40020b4:	e0bfe717 	ldw	r2,-100(fp)
 40020b8:	10c01204 	addi	r3,r2,72
 40020bc:	00bfffc4 	movi	r2,-1
 40020c0:	e0bfeb15 	stw	r2,-84(fp)
 40020c4:	1809883a 	mov	r4,r3
 40020c8:	4005e4c0 	call	4005e4c <_ZN11EthernetUDP4readEv>
 40020cc:	e0bfd845 	stb	r2,-159(fp)
				_dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
 40020d0:	e0bfe717 	ldw	r2,-100(fp)
 40020d4:	10c01204 	addi	r3,r2,72
 40020d8:	e0bfe717 	ldw	r2,-100(fp)
 40020dc:	10800904 	addi	r2,r2,36
 40020e0:	01800104 	movi	r6,4
 40020e4:	100b883a 	mov	r5,r2
 40020e8:	1809883a 	mov	r4,r3
 40020ec:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				_dhcpLeaseTime = ntohl(_dhcpLeaseTime);
 40020f0:	e0bfe717 	ldw	r2,-100(fp)
 40020f4:	10800917 	ldw	r2,36(r2)
 40020f8:	1006963a 	slli	r3,r2,24
 40020fc:	e0bfe717 	ldw	r2,-100(fp)
 4002100:	10800917 	ldw	r2,36(r2)
 4002104:	1004923a 	slli	r2,r2,8
 4002108:	10803fec 	andhi	r2,r2,255
 400210c:	1886b03a 	or	r3,r3,r2
 4002110:	e0bfe717 	ldw	r2,-100(fp)
 4002114:	10800917 	ldw	r2,36(r2)
 4002118:	1004d23a 	srli	r2,r2,8
 400211c:	10bfc00c 	andi	r2,r2,65280
 4002120:	1886b03a 	or	r3,r3,r2
 4002124:	e0bfe717 	ldw	r2,-100(fp)
 4002128:	10800917 	ldw	r2,36(r2)
 400212c:	1004d63a 	srli	r2,r2,24
 4002130:	1886b03a 	or	r3,r3,r2
 4002134:	e0bfe717 	ldw	r2,-100(fp)
 4002138:	10c00915 	stw	r3,36(r2)
				_renewInSec = _dhcpLeaseTime;
 400213c:	e0bfe717 	ldw	r2,-100(fp)
 4002140:	10c00917 	ldw	r3,36(r2)
 4002144:	e0bfe717 	ldw	r2,-100(fp)
 4002148:	10c00c15 	stw	r3,48(r2)
				break;
 400214c:	00001206 	br	4002198 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>

			default :
				opt_len = _dhcpUdpSocket.read();
 4002150:	e0bfe717 	ldw	r2,-100(fp)
 4002154:	10c01204 	addi	r3,r2,72
 4002158:	00bfffc4 	movi	r2,-1
 400215c:	e0bfeb15 	stw	r2,-84(fp)
 4002160:	1809883a 	mov	r4,r3
 4002164:	4005e4c0 	call	4005e4c <_ZN11EthernetUDP4readEv>
 4002168:	e0bfd845 	stb	r2,-159(fp)
				// Skip over the rest of this option
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len);
 400216c:	e0bfe717 	ldw	r2,-100(fp)
 4002170:	10801204 	addi	r2,r2,72
 4002174:	e0ffd843 	ldbu	r3,-159(fp)
 4002178:	180d883a 	mov	r6,r3
 400217c:	000b883a 	mov	r5,zero
 4002180:	1009883a 	mov	r4,r2
 4002184:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				break;
 4002188:	00000306 	br	4002198 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x73c>
			switch (_dhcpUdpSocket.read()) {
			case endOption :
				break;

			case padOption :
				break;
 400218c:	0001883a 	nop
 4002190:	003ec506 	br	4001ca8 <__alt_data_end+0xfc001ca8>
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));

		while (_dhcpUdpSocket.available() > 0) {
			switch (_dhcpUdpSocket.read()) {
			case endOption :
				break;
 4002194:	0001883a 	nop
		memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);

		// Skip to the option part
		_dhcpUdpSocket.read((uint8_t *)NULL, 240 - (int)sizeof(RIP_MSG_FIXED));

		while (_dhcpUdpSocket.available() > 0) {
 4002198:	003ec306 	br	4001ca8 <__alt_data_end+0xfc001ca8>
			}
		}
	}

	// Need to skip to end of the packet regardless here
	_dhcpUdpSocket.flush(); // FIXME
 400219c:	e0bfe717 	ldw	r2,-100(fp)
 40021a0:	10c01204 	addi	r3,r2,72
 40021a4:	00bfffc4 	movi	r2,-1
 40021a8:	e0bfeb15 	stw	r2,-84(fp)
 40021ac:	1809883a 	mov	r4,r3
 40021b0:	40060380 	call	4006038 <_ZN11EthernetUDP5flushEv>

	return type;
 40021b4:	e0bfd803 	ldbu	r2,-160(fp)
 40021b8:	e0bff705 	stb	r2,-36(fp)
 40021bc:	00000806 	br	40021e0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x784>
 40021c0:	e7002804 	addi	fp,fp,160
 40021c4:	e0bfec17 	ldw	r2,-80(fp)
				_dhcpUdpSocket.read((uint8_t *)NULL, opt_len - 4);
				break;

			case dhcpServerIdentifier :
				opt_len = _dhcpUdpSocket.read();
				if ( IPAddress(_dhcpDhcpServerIp) == IPAddress((uint32_t)0) ||
 40021c8:	0001883a 	nop
 40021cc:	1007883a 	mov	r3,r2
 40021d0:	00bfffc4 	movi	r2,-1
 40021d4:	e0bfeb15 	stw	r2,-84(fp)
 40021d8:	1809883a 	mov	r4,r3
 40021dc:	400b6080 	call	400b608 <_Unwind_SjLj_Resume>
 40021e0:	e0bfea04 	addi	r2,fp,-88
 40021e4:	1009883a 	mov	r4,r2
 40021e8:	400b4240 	call	400b424 <_Unwind_SjLj_Unregister>

	// Need to skip to end of the packet regardless here
	_dhcpUdpSocket.flush(); // FIXME

	return type;
}
 40021ec:	e0bff703 	ldbu	r2,-36(fp)
 40021f0:	e6fff804 	addi	sp,fp,-32
 40021f4:	dfc00917 	ldw	ra,36(sp)
 40021f8:	df000817 	ldw	fp,32(sp)
 40021fc:	ddc00717 	ldw	r23,28(sp)
 4002200:	dd800617 	ldw	r22,24(sp)
 4002204:	dd400517 	ldw	r21,20(sp)
 4002208:	dd000417 	ldw	r20,16(sp)
 400220c:	dcc00317 	ldw	r19,12(sp)
 4002210:	dc800217 	ldw	r18,8(sp)
 4002214:	dc400117 	ldw	r17,4(sp)
 4002218:	dc000017 	ldw	r16,0(sp)
 400221c:	dec00a04 	addi	sp,sp,40
 4002220:	f800283a 	ret

04002224 <_ZN9DhcpClass10checkLeaseEv>:
    2/DHCP_CHECK_RENEW_OK: renew success
    3/DHCP_CHECK_REBIND_FAIL: rebind fail
    4/DHCP_CHECK_REBIND_OK: rebind success
*/
int DhcpClass::checkLease()
{
 4002224:	defffa04 	addi	sp,sp,-24
 4002228:	dfc00515 	stw	ra,20(sp)
 400222c:	df000415 	stw	fp,16(sp)
 4002230:	df000404 	addi	fp,sp,16
 4002234:	e13fff15 	stw	r4,-4(fp)
	int rc = DHCP_CHECK_NONE;
 4002238:	e03ffc15 	stw	zero,-16(fp)

	unsigned long now = clock();
 400223c:	400b73c0 	call	400b73c <clock>
 4002240:	e0bffd15 	stw	r2,-12(fp)
	unsigned long elapsed = now - _lastCheckLeaseMillis;
 4002244:	e0bfff17 	ldw	r2,-4(fp)
 4002248:	10801017 	ldw	r2,64(r2)
 400224c:	e0fffd17 	ldw	r3,-12(fp)
 4002250:	1885c83a 	sub	r2,r3,r2
 4002254:	e0bffe15 	stw	r2,-8(fp)

	// if more then one sec passed, reduce the counters accordingly
	if (elapsed >= 1000) {
 4002258:	e0bffe17 	ldw	r2,-8(fp)
 400225c:	1080fa30 	cmpltui	r2,r2,1000
 4002260:	10002a1e 	bne	r2,zero,400230c <_ZN9DhcpClass10checkLeaseEv+0xe8>
		// set the new timestamps
		_lastCheckLeaseMillis = now - (elapsed % 1000);
 4002264:	e0bffe17 	ldw	r2,-8(fp)
 4002268:	0140fa04 	movi	r5,1000
 400226c:	1009883a 	mov	r4,r2
 4002270:	400b1840 	call	400b184 <__umodsi3>
 4002274:	1007883a 	mov	r3,r2
 4002278:	e0bffd17 	ldw	r2,-12(fp)
 400227c:	10c7c83a 	sub	r3,r2,r3
 4002280:	e0bfff17 	ldw	r2,-4(fp)
 4002284:	10c01015 	stw	r3,64(r2)
		elapsed = elapsed / 1000;
 4002288:	e0bffe17 	ldw	r2,-8(fp)
 400228c:	0140fa04 	movi	r5,1000
 4002290:	1009883a 	mov	r4,r2
 4002294:	400b1200 	call	400b120 <__udivsi3>
 4002298:	e0bffe15 	stw	r2,-8(fp)

		// decrease the counters by elapsed seconds
		// we assume that the cycle time (elapsed) is fairly constant
		// if the remainder is less than cycle time * 2
		// do it early instead of late
		if (_renewInSec < elapsed * 2) {
 400229c:	e0bfff17 	ldw	r2,-4(fp)
 40022a0:	10c00c17 	ldw	r3,48(r2)
 40022a4:	e0bffe17 	ldw	r2,-8(fp)
 40022a8:	1085883a 	add	r2,r2,r2
 40022ac:	1880032e 	bgeu	r3,r2,40022bc <_ZN9DhcpClass10checkLeaseEv+0x98>
			_renewInSec = 0;
 40022b0:	e0bfff17 	ldw	r2,-4(fp)
 40022b4:	10000c15 	stw	zero,48(r2)
 40022b8:	00000606 	br	40022d4 <_ZN9DhcpClass10checkLeaseEv+0xb0>
		} else {
			_renewInSec -= elapsed;
 40022bc:	e0bfff17 	ldw	r2,-4(fp)
 40022c0:	10c00c17 	ldw	r3,48(r2)
 40022c4:	e0bffe17 	ldw	r2,-8(fp)
 40022c8:	1887c83a 	sub	r3,r3,r2
 40022cc:	e0bfff17 	ldw	r2,-4(fp)
 40022d0:	10c00c15 	stw	r3,48(r2)
		}
		if (_rebindInSec < elapsed * 2) {
 40022d4:	e0bfff17 	ldw	r2,-4(fp)
 40022d8:	10c00d17 	ldw	r3,52(r2)
 40022dc:	e0bffe17 	ldw	r2,-8(fp)
 40022e0:	1085883a 	add	r2,r2,r2
 40022e4:	1880032e 	bgeu	r3,r2,40022f4 <_ZN9DhcpClass10checkLeaseEv+0xd0>
			_rebindInSec = 0;
 40022e8:	e0bfff17 	ldw	r2,-4(fp)
 40022ec:	10000d15 	stw	zero,52(r2)
 40022f0:	00000606 	br	400230c <_ZN9DhcpClass10checkLeaseEv+0xe8>
		} else {
			_rebindInSec -= elapsed;
 40022f4:	e0bfff17 	ldw	r2,-4(fp)
 40022f8:	10c00d17 	ldw	r3,52(r2)
 40022fc:	e0bffe17 	ldw	r2,-8(fp)
 4002300:	1887c83a 	sub	r3,r3,r2
 4002304:	e0bfff17 	ldw	r2,-4(fp)
 4002308:	10c00d15 	stw	r3,52(r2)
		}
	}

	// if we have a lease but should renew, do it
	if (_renewInSec == 0 &&_dhcp_state == STATE_DHCP_LEASED) {
 400230c:	e0bfff17 	ldw	r2,-4(fp)
 4002310:	10800c17 	ldw	r2,48(r2)
 4002314:	10000c1e 	bne	r2,zero,4002348 <_ZN9DhcpClass10checkLeaseEv+0x124>
 4002318:	e0bfff17 	ldw	r2,-4(fp)
 400231c:	10801103 	ldbu	r2,68(r2)
 4002320:	10803fcc 	andi	r2,r2,255
 4002324:	108000d8 	cmpnei	r2,r2,3
 4002328:	1000071e 	bne	r2,zero,4002348 <_ZN9DhcpClass10checkLeaseEv+0x124>
		_dhcp_state = STATE_DHCP_REREQUEST;
 400232c:	e0bfff17 	ldw	r2,-4(fp)
 4002330:	00c00104 	movi	r3,4
 4002334:	10c01105 	stb	r3,68(r2)
		rc = 1 + request_DHCP_lease();
 4002338:	e13fff17 	ldw	r4,-4(fp)
 400233c:	40012600 	call	4001260 <_ZN9DhcpClass18request_DHCP_leaseEv>
 4002340:	10800044 	addi	r2,r2,1
 4002344:	e0bffc15 	stw	r2,-16(fp)
	}

	// if we have a lease or is renewing but should bind, do it
	if (_rebindInSec == 0 && (_dhcp_state == STATE_DHCP_LEASED ||
 4002348:	e0bfff17 	ldw	r2,-4(fp)
 400234c:	10800d17 	ldw	r2,52(r2)
 4002350:	1000111e 	bne	r2,zero,4002398 <_ZN9DhcpClass10checkLeaseEv+0x174>
 4002354:	e0bfff17 	ldw	r2,-4(fp)
 4002358:	10801103 	ldbu	r2,68(r2)
 400235c:	10803fcc 	andi	r2,r2,255
 4002360:	108000e0 	cmpeqi	r2,r2,3
 4002364:	1000041e 	bne	r2,zero,4002378 <_ZN9DhcpClass10checkLeaseEv+0x154>
	  _dhcp_state == STATE_DHCP_START)) {
 4002368:	e0bfff17 	ldw	r2,-4(fp)
 400236c:	10801103 	ldbu	r2,68(r2)
		_dhcp_state = STATE_DHCP_REREQUEST;
		rc = 1 + request_DHCP_lease();
	}

	// if we have a lease or is renewing but should bind, do it
	if (_rebindInSec == 0 && (_dhcp_state == STATE_DHCP_LEASED ||
 4002370:	10803fcc 	andi	r2,r2,255
 4002374:	1000081e 	bne	r2,zero,4002398 <_ZN9DhcpClass10checkLeaseEv+0x174>
	  _dhcp_state == STATE_DHCP_START)) {
		// this should basically restart completely
		_dhcp_state = STATE_DHCP_START;
 4002378:	e0bfff17 	ldw	r2,-4(fp)
 400237c:	10001105 	stb	zero,68(r2)
		reset_DHCP_lease();
 4002380:	e13fff17 	ldw	r4,-4(fp)
 4002384:	400121c0 	call	400121c <_ZN9DhcpClass16reset_DHCP_leaseEv>
		rc = 3 + request_DHCP_lease();
 4002388:	e13fff17 	ldw	r4,-4(fp)
 400238c:	40012600 	call	4001260 <_ZN9DhcpClass18request_DHCP_leaseEv>
 4002390:	108000c4 	addi	r2,r2,3
 4002394:	e0bffc15 	stw	r2,-16(fp)
	}
	return rc;
 4002398:	e0bffc17 	ldw	r2,-16(fp)
}
 400239c:	e037883a 	mov	sp,fp
 40023a0:	dfc00117 	ldw	ra,4(sp)
 40023a4:	df000017 	ldw	fp,0(sp)
 40023a8:	dec00204 	addi	sp,sp,8
 40023ac:	f800283a 	ret

040023b0 <_ZN9DhcpClass10getLocalIpEv>:

IPAddress DhcpClass::getLocalIp()
{
 40023b0:	defffc04 	addi	sp,sp,-16
 40023b4:	dfc00315 	stw	ra,12(sp)
 40023b8:	df000215 	stw	fp,8(sp)
 40023bc:	df000204 	addi	fp,sp,8
 40023c0:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpLocalIp);
 40023c4:	e0bfff17 	ldw	r2,-4(fp)
 40023c8:	10800384 	addi	r2,r2,14
 40023cc:	100b883a 	mov	r5,r2
 40023d0:	e13ffe04 	addi	r4,fp,-8
 40023d4:	4007d6c0 	call	4007d6c <_ZN9IPAddressC1EPKh>
 40023d8:	e0bffe17 	ldw	r2,-8(fp)
}
 40023dc:	e037883a 	mov	sp,fp
 40023e0:	dfc00117 	ldw	ra,4(sp)
 40023e4:	df000017 	ldw	fp,0(sp)
 40023e8:	dec00204 	addi	sp,sp,8
 40023ec:	f800283a 	ret

040023f0 <_ZN9DhcpClass13getSubnetMaskEv>:

IPAddress DhcpClass::getSubnetMask()
{
 40023f0:	defffc04 	addi	sp,sp,-16
 40023f4:	dfc00315 	stw	ra,12(sp)
 40023f8:	df000215 	stw	fp,8(sp)
 40023fc:	df000204 	addi	fp,sp,8
 4002400:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpSubnetMask);
 4002404:	e0bfff17 	ldw	r2,-4(fp)
 4002408:	10800484 	addi	r2,r2,18
 400240c:	100b883a 	mov	r5,r2
 4002410:	e13ffe04 	addi	r4,fp,-8
 4002414:	4007d6c0 	call	4007d6c <_ZN9IPAddressC1EPKh>
 4002418:	e0bffe17 	ldw	r2,-8(fp)
}
 400241c:	e037883a 	mov	sp,fp
 4002420:	dfc00117 	ldw	ra,4(sp)
 4002424:	df000017 	ldw	fp,0(sp)
 4002428:	dec00204 	addi	sp,sp,8
 400242c:	f800283a 	ret

04002430 <_ZN9DhcpClass12getGatewayIpEv>:

IPAddress DhcpClass::getGatewayIp()
{
 4002430:	defffc04 	addi	sp,sp,-16
 4002434:	dfc00315 	stw	ra,12(sp)
 4002438:	df000215 	stw	fp,8(sp)
 400243c:	df000204 	addi	fp,sp,8
 4002440:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpGatewayIp);
 4002444:	e0bfff17 	ldw	r2,-4(fp)
 4002448:	10800584 	addi	r2,r2,22
 400244c:	100b883a 	mov	r5,r2
 4002450:	e13ffe04 	addi	r4,fp,-8
 4002454:	4007d6c0 	call	4007d6c <_ZN9IPAddressC1EPKh>
 4002458:	e0bffe17 	ldw	r2,-8(fp)
}
 400245c:	e037883a 	mov	sp,fp
 4002460:	dfc00117 	ldw	ra,4(sp)
 4002464:	df000017 	ldw	fp,0(sp)
 4002468:	dec00204 	addi	sp,sp,8
 400246c:	f800283a 	ret

04002470 <_ZN9DhcpClass15getDhcpServerIpEv>:

IPAddress DhcpClass::getDhcpServerIp()
{
 4002470:	defffc04 	addi	sp,sp,-16
 4002474:	dfc00315 	stw	ra,12(sp)
 4002478:	df000215 	stw	fp,8(sp)
 400247c:	df000204 	addi	fp,sp,8
 4002480:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpDhcpServerIp);
 4002484:	e0bfff17 	ldw	r2,-4(fp)
 4002488:	10800684 	addi	r2,r2,26
 400248c:	100b883a 	mov	r5,r2
 4002490:	e13ffe04 	addi	r4,fp,-8
 4002494:	4007d6c0 	call	4007d6c <_ZN9IPAddressC1EPKh>
 4002498:	e0bffe17 	ldw	r2,-8(fp)
}
 400249c:	e037883a 	mov	sp,fp
 40024a0:	dfc00117 	ldw	ra,4(sp)
 40024a4:	df000017 	ldw	fp,0(sp)
 40024a8:	dec00204 	addi	sp,sp,8
 40024ac:	f800283a 	ret

040024b0 <_ZN9DhcpClass14getDnsServerIpEv>:

IPAddress DhcpClass::getDnsServerIp()
{
 40024b0:	defffc04 	addi	sp,sp,-16
 40024b4:	dfc00315 	stw	ra,12(sp)
 40024b8:	df000215 	stw	fp,8(sp)
 40024bc:	df000204 	addi	fp,sp,8
 40024c0:	e13fff15 	stw	r4,-4(fp)
	return IPAddress(_dhcpDnsServerIp);
 40024c4:	e0bfff17 	ldw	r2,-4(fp)
 40024c8:	10800784 	addi	r2,r2,30
 40024cc:	100b883a 	mov	r5,r2
 40024d0:	e13ffe04 	addi	r4,fp,-8
 40024d4:	4007d6c0 	call	4007d6c <_ZN9IPAddressC1EPKh>
 40024d8:	e0bffe17 	ldw	r2,-8(fp)
}
 40024dc:	e037883a 	mov	sp,fp
 40024e0:	dfc00117 	ldw	ra,4(sp)
 40024e4:	df000017 	ldw	fp,0(sp)
 40024e8:	dec00204 	addi	sp,sp,8
 40024ec:	f800283a 	ret

040024f0 <_ZN9DhcpClass9printByteEPch>:

void DhcpClass::printByte(char * buf, uint8_t n )
{
 40024f0:	defff904 	addi	sp,sp,-28
 40024f4:	df000615 	stw	fp,24(sp)
 40024f8:	df000604 	addi	fp,sp,24
 40024fc:	e13ffd15 	stw	r4,-12(fp)
 4002500:	e17ffe15 	stw	r5,-8(fp)
 4002504:	3005883a 	mov	r2,r6
 4002508:	e0bfff05 	stb	r2,-4(fp)
	char *str = &buf[1];
 400250c:	e0bffe17 	ldw	r2,-8(fp)
 4002510:	10800044 	addi	r2,r2,1
 4002514:	e0bffa15 	stw	r2,-24(fp)
	buf[0]='0';
 4002518:	e0bffe17 	ldw	r2,-8(fp)
 400251c:	00c00c04 	movi	r3,48
 4002520:	10c00005 	stb	r3,0(r2)
	do {
		unsigned long m = n;
 4002524:	e0bfff03 	ldbu	r2,-4(fp)
 4002528:	e0bffb15 	stw	r2,-20(fp)
		n /= 16;
 400252c:	e0bfff03 	ldbu	r2,-4(fp)
 4002530:	1004d13a 	srli	r2,r2,4
 4002534:	e0bfff05 	stb	r2,-4(fp)
		char c = m - 16 * n;
 4002538:	e0bffb17 	ldw	r2,-20(fp)
 400253c:	1007883a 	mov	r3,r2
 4002540:	e0bfff03 	ldbu	r2,-4(fp)
 4002544:	1004913a 	slli	r2,r2,4
 4002548:	1885c83a 	sub	r2,r3,r2
 400254c:	e0bffc05 	stb	r2,-16(fp)
		*str-- = c < 10 ? c + '0' : c + 'A' - 10;
 4002550:	e0bffa17 	ldw	r2,-24(fp)
 4002554:	10ffffc4 	addi	r3,r2,-1
 4002558:	e0fffa15 	stw	r3,-24(fp)
 400255c:	e0fffc07 	ldb	r3,-16(fp)
 4002560:	18c00288 	cmpgei	r3,r3,10
 4002564:	1800031e 	bne	r3,zero,4002574 <_ZN9DhcpClass9printByteEPch+0x84>
 4002568:	e0fffc03 	ldbu	r3,-16(fp)
 400256c:	18c00c04 	addi	r3,r3,48
 4002570:	00000206 	br	400257c <_ZN9DhcpClass9printByteEPch+0x8c>
 4002574:	e0fffc03 	ldbu	r3,-16(fp)
 4002578:	18c00dc4 	addi	r3,r3,55
 400257c:	10c00005 	stb	r3,0(r2)

void DhcpClass::printByte(char * buf, uint8_t n )
{
	char *str = &buf[1];
	buf[0]='0';
	do {
 4002580:	e0bfff03 	ldbu	r2,-4(fp)
 4002584:	10000126 	beq	r2,zero,400258c <_ZN9DhcpClass9printByteEPch+0x9c>
 4002588:	003fe606 	br	4002524 <__alt_data_end+0xfc002524>
		unsigned long m = n;
		n /= 16;
		char c = m - 16 * n;
		*str-- = c < 10 ? c + '0' : c + 'A' - 10;
	} while(n);
}
 400258c:	0001883a 	nop
 4002590:	e037883a 	mov	sp,fp
 4002594:	df000017 	ldw	fp,0(sp)
 4002598:	dec00104 	addi	sp,sp,4
 400259c:	f800283a 	ret

040025a0 <_Z41__static_initialization_and_destruction_0ii>:
 40025a0:	defffb04 	addi	sp,sp,-20
 40025a4:	dfc00415 	stw	ra,16(sp)
 40025a8:	df000315 	stw	fp,12(sp)
 40025ac:	df000304 	addi	fp,sp,12
 40025b0:	e13ffe15 	stw	r4,-8(fp)
 40025b4:	e17fff15 	stw	r5,-4(fp)
 40025b8:	e0bffe17 	ldw	r2,-8(fp)
 40025bc:	10800058 	cmpnei	r2,r2,1
 40025c0:	1000091e 	bne	r2,zero,40025e8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40025c4:	e0ffff17 	ldw	r3,-4(fp)
 40025c8:	00bfffd4 	movui	r2,65535
 40025cc:	1880061e 	bne	r3,r2,40025e8 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 40025d0:	d8000015 	stw	zero,0(sp)
 40025d4:	000f883a 	mov	r7,zero
 40025d8:	000d883a 	mov	r6,zero
 40025dc:	000b883a 	mov	r5,zero
 40025e0:	d112cc04 	addi	r4,gp,19248
 40025e4:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
 40025e8:	0001883a 	nop
 40025ec:	e037883a 	mov	sp,fp
 40025f0:	dfc00117 	ldw	ra,4(sp)
 40025f4:	df000017 	ldw	fp,0(sp)
 40025f8:	dec00204 	addi	sp,sp,8
 40025fc:	f800283a 	ret

04002600 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
 4002600:	defffe04 	addi	sp,sp,-8
 4002604:	dfc00115 	stw	ra,4(sp)
 4002608:	df000015 	stw	fp,0(sp)
 400260c:	d839883a 	mov	fp,sp
 4002610:	017fffd4 	movui	r5,65535
 4002614:	01000044 	movi	r4,1
 4002618:	40025a00 	call	40025a0 <_Z41__static_initialization_and_destruction_0ii>
 400261c:	e037883a 	mov	sp,fp
 4002620:	dfc00117 	ldw	ra,4(sp)
 4002624:	df000017 	ldw	fp,0(sp)
 4002628:	dec00204 	addi	sp,sp,8
 400262c:	f800283a 	ret

04002630 <_ZNK9IPAddresseqERKS_>:
    void print();

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() const { return _address.dword; };
    bool operator==(const IPAddress& addr) const { return _address.dword == addr._address.dword; };
 4002630:	defffd04 	addi	sp,sp,-12
 4002634:	df000215 	stw	fp,8(sp)
 4002638:	df000204 	addi	fp,sp,8
 400263c:	e13ffe15 	stw	r4,-8(fp)
 4002640:	e17fff15 	stw	r5,-4(fp)
 4002644:	e0bffe17 	ldw	r2,-8(fp)
 4002648:	10c00017 	ldw	r3,0(r2)
 400264c:	e0bfff17 	ldw	r2,-4(fp)
 4002650:	10800017 	ldw	r2,0(r2)
 4002654:	1885003a 	cmpeq	r2,r3,r2
 4002658:	e037883a 	mov	sp,fp
 400265c:	df000017 	ldw	fp,0(sp)
 4002660:	dec00104 	addi	sp,sp,4
 4002664:	f800283a 	ret

04002668 <_ZN11EthernetUDP8remoteIPEv>:
	// Return the next byte from the current packet without moving on to the next byte
	virtual int peek();
	virtual void flush(); // Finish reading the current packet

	// Return the IP address of the host who sent the current incoming packet
	virtual IPAddress remoteIP() { return _remoteIP; };
 4002668:	defffe04 	addi	sp,sp,-8
 400266c:	df000115 	stw	fp,4(sp)
 4002670:	df000104 	addi	fp,sp,4
 4002674:	e13fff15 	stw	r4,-4(fp)
 4002678:	e0bfff17 	ldw	r2,-4(fp)
 400267c:	10800217 	ldw	r2,8(r2)
 4002680:	e037883a 	mov	sp,fp
 4002684:	df000017 	ldw	fp,0(sp)
 4002688:	dec00104 	addi	sp,sp,4
 400268c:	f800283a 	ret

04002690 <_ZN11EthernetUDP10remotePortEv>:
	// Return the port of the host who sent the current incoming packet
	virtual uint16_t remotePort() { return _remotePort; };
 4002690:	defffe04 	addi	sp,sp,-8
 4002694:	df000115 	stw	fp,4(sp)
 4002698:	df000104 	addi	fp,sp,4
 400269c:	e13fff15 	stw	r4,-4(fp)
 40026a0:	e0bfff17 	ldw	r2,-4(fp)
 40026a4:	1080030b 	ldhu	r2,12(r2)
 40026a8:	e037883a 	mov	sp,fp
 40026ac:	df000017 	ldw	fp,0(sp)
 40026b0:	dec00104 	addi	sp,sp,4
 40026b4:	f800283a 	ret

040026b8 <_ZN9DNSClient5beginERK9IPAddress>:
#define INVALID_SERVER   -2
#define TRUNCATED        -3
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
 40026b8:	defffd04 	addi	sp,sp,-12
 40026bc:	df000215 	stw	fp,8(sp)
 40026c0:	df000204 	addi	fp,sp,8
 40026c4:	e13ffe15 	stw	r4,-8(fp)
 40026c8:	e17fff15 	stw	r5,-4(fp)
	iDNSServer = aDNSServer;
 40026cc:	e0bffe17 	ldw	r2,-8(fp)
 40026d0:	e0ffff17 	ldw	r3,-4(fp)
 40026d4:	18c00017 	ldw	r3,0(r3)
 40026d8:	10c00015 	stw	r3,0(r2)
	iRequestId = 0;
 40026dc:	e0bffe17 	ldw	r2,-8(fp)
 40026e0:	1000010d 	sth	zero,4(r2)
}
 40026e4:	0001883a 	nop
 40026e8:	e037883a 	mov	sp,fp
 40026ec:	df000017 	ldw	fp,0(sp)
 40026f0:	dec00104 	addi	sp,sp,4
 40026f4:	f800283a 	ret

040026f8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:


int DNSClient::inet_aton(const char* address, IPAddress& result)
{
 40026f8:	defffa04 	addi	sp,sp,-24
 40026fc:	dfc00515 	stw	ra,20(sp)
 4002700:	df000415 	stw	fp,16(sp)
 4002704:	df000404 	addi	fp,sp,16
 4002708:	e13ffd15 	stw	r4,-12(fp)
 400270c:	e17ffe15 	stw	r5,-8(fp)
 4002710:	e1bfff15 	stw	r6,-4(fp)
	uint16_t acc = 0; // Accumulator
 4002714:	e03ffc0d 	sth	zero,-16(fp)
	uint8_t dots = 0;
 4002718:	e03ffc85 	stb	zero,-14(fp)

	while (*address) {
 400271c:	e0bffe17 	ldw	r2,-8(fp)
 4002720:	10800003 	ldbu	r2,0(r2)
 4002724:	10803fcc 	andi	r2,r2,255
 4002728:	1080201c 	xori	r2,r2,128
 400272c:	10bfe004 	addi	r2,r2,-128
 4002730:	10002f26 	beq	r2,zero,40027f0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xf8>
		char c = *address++;
 4002734:	e0bffe17 	ldw	r2,-8(fp)
 4002738:	10c00044 	addi	r3,r2,1
 400273c:	e0fffe15 	stw	r3,-8(fp)
 4002740:	10800003 	ldbu	r2,0(r2)
 4002744:	e0bffcc5 	stb	r2,-13(fp)
		if (c >= '0' && c <= '9') {
 4002748:	e0bffcc7 	ldb	r2,-13(fp)
 400274c:	10800c10 	cmplti	r2,r2,48
 4002750:	1000111e 	bne	r2,zero,4002798 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa0>
 4002754:	e0bffcc7 	ldb	r2,-13(fp)
 4002758:	10800e88 	cmpgei	r2,r2,58
 400275c:	10000e1e 	bne	r2,zero,4002798 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa0>
			acc = acc * 10 + (c - '0');
 4002760:	e0bffc0b 	ldhu	r2,-16(fp)
 4002764:	01400284 	movi	r5,10
 4002768:	1009883a 	mov	r4,r2
 400276c:	400b1dc0 	call	400b1dc <__mulsi3>
 4002770:	1007883a 	mov	r3,r2
 4002774:	e0bffcc7 	ldb	r2,-13(fp)
 4002778:	1885883a 	add	r2,r3,r2
 400277c:	10bff404 	addi	r2,r2,-48
 4002780:	e0bffc0d 	sth	r2,-16(fp)
			if (acc > 255) {
 4002784:	e0bffc0b 	ldhu	r2,-16(fp)
 4002788:	10804030 	cmpltui	r2,r2,256
 400278c:	1000171e 	bne	r2,zero,40027ec <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xf4>
				// Value out of [0..255] range
				return 0;
 4002790:	0005883a 	mov	r2,zero
 4002794:	00002106 	br	400281c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x124>
			}
		} else if (c == '.') {
 4002798:	e0bffcc7 	ldb	r2,-13(fp)
 400279c:	10800b98 	cmpnei	r2,r2,46
 40027a0:	1000101e 	bne	r2,zero,40027e4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xec>
			if (dots == 3) {
 40027a4:	e0bffc83 	ldbu	r2,-14(fp)
 40027a8:	108000d8 	cmpnei	r2,r2,3
 40027ac:	1000021e 	bne	r2,zero,40027b8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xc0>
				// Too much dots (there must be 3 dots)
				return 0;
 40027b0:	0005883a 	mov	r2,zero
 40027b4:	00001906 	br	400281c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x124>
			}
			result[dots++] = acc;
 40027b8:	e0bffc83 	ldbu	r2,-14(fp)
 40027bc:	10c00044 	addi	r3,r2,1
 40027c0:	e0fffc85 	stb	r3,-14(fp)
 40027c4:	10803fcc 	andi	r2,r2,255
 40027c8:	100b883a 	mov	r5,r2
 40027cc:	e13fff17 	ldw	r4,-4(fp)
 40027d0:	40031dc0 	call	40031dc <_ZN9IPAddressixEi>
 40027d4:	e0fffc0b 	ldhu	r3,-16(fp)
 40027d8:	10c00005 	stb	r3,0(r2)
			acc = 0;
 40027dc:	e03ffc0d 	sth	zero,-16(fp)
 40027e0:	003fce06 	br	400271c <__alt_data_end+0xfc00271c>
		} else {
			// Invalid char
			return 0;
 40027e4:	0005883a 	mov	r2,zero
 40027e8:	00000c06 	br	400281c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x124>
int DNSClient::inet_aton(const char* address, IPAddress& result)
{
	uint16_t acc = 0; // Accumulator
	uint8_t dots = 0;

	while (*address) {
 40027ec:	003fcb06 	br	400271c <__alt_data_end+0xfc00271c>
			// Invalid char
			return 0;
		}
	}

	if (dots != 3) {
 40027f0:	e0bffc83 	ldbu	r2,-14(fp)
 40027f4:	108000e0 	cmpeqi	r2,r2,3
 40027f8:	1000021e 	bne	r2,zero,4002804 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x10c>
		// Too few dots (there must be 3 dots)
		return 0;
 40027fc:	0005883a 	mov	r2,zero
 4002800:	00000606 	br	400281c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x124>
	}
	result[3] = acc;
 4002804:	014000c4 	movi	r5,3
 4002808:	e13fff17 	ldw	r4,-4(fp)
 400280c:	40031dc0 	call	40031dc <_ZN9IPAddressixEi>
 4002810:	e0fffc0b 	ldhu	r3,-16(fp)
 4002814:	10c00005 	stb	r3,0(r2)
	return 1;
 4002818:	00800044 	movi	r2,1
}
 400281c:	e037883a 	mov	sp,fp
 4002820:	dfc00117 	ldw	ra,4(sp)
 4002824:	df000017 	ldw	fp,0(sp)
 4002828:	dec00204 	addi	sp,sp,8
 400282c:	f800283a 	ret

04002830 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>:

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult, uint16_t timeout)
{
 4002830:	defff604 	addi	sp,sp,-40
 4002834:	dfc00915 	stw	ra,36(sp)
 4002838:	df000815 	stw	fp,32(sp)
 400283c:	dc000715 	stw	r16,28(sp)
 4002840:	df000804 	addi	fp,sp,32
 4002844:	e13ffb15 	stw	r4,-20(fp)
 4002848:	e17ffc15 	stw	r5,-16(fp)
 400284c:	e1bffd15 	stw	r6,-12(fp)
 4002850:	3805883a 	mov	r2,r7
 4002854:	e0bffe0d 	sth	r2,-8(fp)
	int ret = 0;
 4002858:	e03ff815 	stw	zero,-32(fp)

	// See if it's a numeric IP address
	if (inet_aton(aHostname, aResult)) {
 400285c:	e1bffd17 	ldw	r6,-12(fp)
 4002860:	e17ffc17 	ldw	r5,-16(fp)
 4002864:	e13ffb17 	ldw	r4,-20(fp)
 4002868:	40026f80 	call	40026f8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
 400286c:	1004c03a 	cmpne	r2,r2,zero
 4002870:	10803fcc 	andi	r2,r2,255
 4002874:	10000226 	beq	r2,zero,4002880 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x50>
		// It is, our work here is done
		return 1;
 4002878:	00800044 	movi	r2,1
 400287c:	00004a06 	br	40029a8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x178>
	}

	// Check we've got a valid DNS server to use
	if (iDNSServer == INADDR_NONE) {
 4002880:	e0bffb17 	ldw	r2,-20(fp)
 4002884:	d152cd04 	addi	r5,gp,19252
 4002888:	1009883a 	mov	r4,r2
 400288c:	40026300 	call	4002630 <_ZNK9IPAddresseqERKS_>
 4002890:	10803fcc 	andi	r2,r2,255
 4002894:	10000226 	beq	r2,zero,40028a0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x70>
		return INVALID_SERVER;
 4002898:	00bfff84 	movi	r2,-2
 400289c:	00004206 	br	40029a8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x178>
	}
	
	// Find a socket to use
	if (iUdp.begin(1024+(clock() & 0xF)) == 1) {
 40028a0:	e0bffb17 	ldw	r2,-20(fp)
 40028a4:	14000204 	addi	r16,r2,8
 40028a8:	400b73c0 	call	400b73c <clock>
 40028ac:	108003cc 	andi	r2,r2,15
 40028b0:	10810004 	addi	r2,r2,1024
 40028b4:	10bfffcc 	andi	r2,r2,65535
 40028b8:	100b883a 	mov	r5,r2
 40028bc:	8009883a 	mov	r4,r16
 40028c0:	40059ac0 	call	40059ac <_ZN11EthernetUDP5beginEt>
 40028c4:	10803fcc 	andi	r2,r2,255
 40028c8:	10800060 	cmpeqi	r2,r2,1
 40028cc:	10803fcc 	andi	r2,r2,255
 40028d0:	10003426 	beq	r2,zero,40029a4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x174>
		// Try up to three times
		int retries = 0;
 40028d4:	e03ffa15 	stw	zero,-24(fp)
		// while ((retries < 3) && (ret <= 0)) {
		// Send DNS request
		ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
 40028d8:	e0bffb17 	ldw	r2,-20(fp)
 40028dc:	10c00204 	addi	r3,r2,8
 40028e0:	e0bffb17 	ldw	r2,-20(fp)
 40028e4:	01800d44 	movi	r6,53
 40028e8:	11400017 	ldw	r5,0(r2)
 40028ec:	1809883a 	mov	r4,r3
 40028f0:	4005ba40 	call	4005ba4 <_ZN11EthernetUDP11beginPacketE9IPAddresst>
 40028f4:	e0bff815 	stw	r2,-32(fp)
		if (ret != 0) {
 40028f8:	e0bff817 	ldw	r2,-32(fp)
 40028fc:	10002226 	beq	r2,zero,4002988 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
			// Now output the request data
			ret = BuildRequest(aHostname);
 4002900:	e17ffc17 	ldw	r5,-16(fp)
 4002904:	e13ffb17 	ldw	r4,-20(fp)
 4002908:	40029c00 	call	40029c0 <_ZN9DNSClient12BuildRequestEPKc>
 400290c:	10bfffcc 	andi	r2,r2,65535
 4002910:	e0bff815 	stw	r2,-32(fp)
			if (ret != 0) {
 4002914:	e0bff817 	ldw	r2,-32(fp)
 4002918:	10001b26 	beq	r2,zero,4002988 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
				// And finally send the request
				ret = iUdp.endPacket();
 400291c:	e0bffb17 	ldw	r2,-20(fp)
 4002920:	10800204 	addi	r2,r2,8
 4002924:	1009883a 	mov	r4,r2
 4002928:	4005c240 	call	4005c24 <_ZN11EthernetUDP9endPacketEv>
 400292c:	e0bff815 	stw	r2,-32(fp)
				if (ret != 0) {
 4002930:	e0bff817 	ldw	r2,-32(fp)
 4002934:	10001426 	beq	r2,zero,4002988 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
					// Now wait for a response
					int wait_retries = 0;
 4002938:	e03ff915 	stw	zero,-28(fp)
					ret = TIMED_OUT;
 400293c:	00bfffc4 	movi	r2,-1
 4002940:	e0bff815 	stw	r2,-32(fp)
					while ((wait_retries < 3) && (ret == TIMED_OUT)) {
 4002944:	e0bff917 	ldw	r2,-28(fp)
 4002948:	108000c8 	cmpgei	r2,r2,3
 400294c:	10000e1e 	bne	r2,zero,4002988 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
 4002950:	e0bff817 	ldw	r2,-32(fp)
 4002954:	10bfffd8 	cmpnei	r2,r2,-1
 4002958:	10000b1e 	bne	r2,zero,4002988 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst+0x158>
						ret = ProcessResponse(timeout, aResult);
 400295c:	e0bffe0b 	ldhu	r2,-8(fp)
 4002960:	e1bffd17 	ldw	r6,-12(fp)
 4002964:	100b883a 	mov	r5,r2
 4002968:	e13ffb17 	ldw	r4,-20(fp)
 400296c:	4002c080 	call	4002c08 <_ZN9DNSClient15ProcessResponseEtR9IPAddress>
 4002970:	10bfffcc 	andi	r2,r2,65535
 4002974:	e0bff815 	stw	r2,-32(fp)
						wait_retries++;
 4002978:	e0bff917 	ldw	r2,-28(fp)
 400297c:	10800044 	addi	r2,r2,1
 4002980:	e0bff915 	stw	r2,-28(fp)
				ret = iUdp.endPacket();
				if (ret != 0) {
					// Now wait for a response
					int wait_retries = 0;
					ret = TIMED_OUT;
					while ((wait_retries < 3) && (ret == TIMED_OUT)) {
 4002984:	003fef06 	br	4002944 <__alt_data_end+0xfc002944>
						wait_retries++;
					}
				}
			}
		}
		retries++;
 4002988:	e0bffa17 	ldw	r2,-24(fp)
 400298c:	10800044 	addi	r2,r2,1
 4002990:	e0bffa15 	stw	r2,-24(fp)
		//}

		// We're done with the socket now
		iUdp.stop();
 4002994:	e0bffb17 	ldw	r2,-20(fp)
 4002998:	10800204 	addi	r2,r2,8
 400299c:	1009883a 	mov	r4,r2
 40029a0:	4005a800 	call	4005a80 <_ZN11EthernetUDP4stopEv>
	}

	return ret;
 40029a4:	e0bff817 	ldw	r2,-32(fp)
}
 40029a8:	e6ffff04 	addi	sp,fp,-4
 40029ac:	dfc00217 	ldw	ra,8(sp)
 40029b0:	df000117 	ldw	fp,4(sp)
 40029b4:	dc000017 	ldw	r16,0(sp)
 40029b8:	dec00304 	addi	sp,sp,12
 40029bc:	f800283a 	ret

040029c0 <_ZN9DNSClient12BuildRequestEPKc>:

uint16_t DNSClient::BuildRequest(const char* aName)
{
 40029c0:	defff904 	addi	sp,sp,-28
 40029c4:	dfc00615 	stw	ra,24(sp)
 40029c8:	df000515 	stw	fp,20(sp)
 40029cc:	df000504 	addi	fp,sp,20
 40029d0:	e13ffe15 	stw	r4,-8(fp)
 40029d4:	e17fff15 	stw	r5,-4(fp)
	//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	//    |                    ARCOUNT                    |
	//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// As we only support one request at a time at present, we can simplify
	// some of this header
	iRequestId = clock(); // generate a random ID
 40029d8:	400b73c0 	call	400b73c <clock>
 40029dc:	1007883a 	mov	r3,r2
 40029e0:	e0bffe17 	ldw	r2,-8(fp)
 40029e4:	10c0010d 	sth	r3,4(r2)
	uint16_t twoByteBuffer;

	// FIXME We should also check that there's enough space available to write to, rather
	// FIXME than assume there's enough space (as the code does at present)
	iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
 40029e8:	e0bffe17 	ldw	r2,-8(fp)
 40029ec:	10c00204 	addi	r3,r2,8
 40029f0:	e0bffe17 	ldw	r2,-8(fp)
 40029f4:	10800104 	addi	r2,r2,4
 40029f8:	01800084 	movi	r6,2
 40029fc:	100b883a 	mov	r5,r2
 4002a00:	1809883a 	mov	r4,r3
 4002a04:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
 4002a08:	00800044 	movi	r2,1
 4002a0c:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002a10:	e0bffe17 	ldw	r2,-8(fp)
 4002a14:	10800204 	addi	r2,r2,8
 4002a18:	e0fffd04 	addi	r3,fp,-12
 4002a1c:	01800084 	movi	r6,2
 4002a20:	180b883a 	mov	r5,r3
 4002a24:	1009883a 	mov	r4,r2
 4002a28:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(1);  // One question record
 4002a2c:	00804004 	movi	r2,256
 4002a30:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002a34:	e0bffe17 	ldw	r2,-8(fp)
 4002a38:	10800204 	addi	r2,r2,8
 4002a3c:	e0fffd04 	addi	r3,fp,-12
 4002a40:	01800084 	movi	r6,2
 4002a44:	180b883a 	mov	r5,r3
 4002a48:	1009883a 	mov	r4,r2
 4002a4c:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = 0;  // Zero answer records
 4002a50:	e03ffd0d 	sth	zero,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002a54:	e0bffe17 	ldw	r2,-8(fp)
 4002a58:	10800204 	addi	r2,r2,8
 4002a5c:	e0fffd04 	addi	r3,fp,-12
 4002a60:	01800084 	movi	r6,2
 4002a64:	180b883a 	mov	r5,r3
 4002a68:	1009883a 	mov	r4,r2
 4002a6c:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>

	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002a70:	e0bffe17 	ldw	r2,-8(fp)
 4002a74:	10800204 	addi	r2,r2,8
 4002a78:	e0fffd04 	addi	r3,fp,-12
 4002a7c:	01800084 	movi	r6,2
 4002a80:	180b883a 	mov	r5,r3
 4002a84:	1009883a 	mov	r4,r2
 4002a88:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>
	// and zero additional records
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002a8c:	e0bffe17 	ldw	r2,-8(fp)
 4002a90:	10800204 	addi	r2,r2,8
 4002a94:	e0fffd04 	addi	r3,fp,-12
 4002a98:	01800084 	movi	r6,2
 4002a9c:	180b883a 	mov	r5,r3
 4002aa0:	1009883a 	mov	r4,r2
 4002aa4:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>

	// Build question
	const char* start =aName;
 4002aa8:	e0bfff17 	ldw	r2,-4(fp)
 4002aac:	e0bffb15 	stw	r2,-20(fp)
	const char* end =start;
 4002ab0:	e0bffb17 	ldw	r2,-20(fp)
 4002ab4:	e0bffc15 	stw	r2,-16(fp)
	uint8_t len;
	// Run through the name being requested
	while (*end) {
 4002ab8:	e0bffc17 	ldw	r2,-16(fp)
 4002abc:	10800003 	ldbu	r2,0(r2)
 4002ac0:	10803fcc 	andi	r2,r2,255
 4002ac4:	1080201c 	xori	r2,r2,128
 4002ac8:	10bfe004 	addi	r2,r2,-128
 4002acc:	10002e26 	beq	r2,zero,4002b88 <_ZN9DNSClient12BuildRequestEPKc+0x1c8>
		// Find out how long this section of the name is
		end = start;
 4002ad0:	e0bffb17 	ldw	r2,-20(fp)
 4002ad4:	e0bffc15 	stw	r2,-16(fp)
		while (*end && (*end != '.') ) {
 4002ad8:	e0bffc17 	ldw	r2,-16(fp)
 4002adc:	10800003 	ldbu	r2,0(r2)
 4002ae0:	10803fcc 	andi	r2,r2,255
 4002ae4:	1080201c 	xori	r2,r2,128
 4002ae8:	10bfe004 	addi	r2,r2,-128
 4002aec:	10000b26 	beq	r2,zero,4002b1c <_ZN9DNSClient12BuildRequestEPKc+0x15c>
 4002af0:	e0bffc17 	ldw	r2,-16(fp)
 4002af4:	10800003 	ldbu	r2,0(r2)
 4002af8:	10803fcc 	andi	r2,r2,255
 4002afc:	1080201c 	xori	r2,r2,128
 4002b00:	10bfe004 	addi	r2,r2,-128
 4002b04:	10800ba0 	cmpeqi	r2,r2,46
 4002b08:	1000041e 	bne	r2,zero,4002b1c <_ZN9DNSClient12BuildRequestEPKc+0x15c>
			end++;
 4002b0c:	e0bffc17 	ldw	r2,-16(fp)
 4002b10:	10800044 	addi	r2,r2,1
 4002b14:	e0bffc15 	stw	r2,-16(fp)
	uint8_t len;
	// Run through the name being requested
	while (*end) {
		// Find out how long this section of the name is
		end = start;
		while (*end && (*end != '.') ) {
 4002b18:	003fef06 	br	4002ad8 <__alt_data_end+0xfc002ad8>
			end++;
		}

		if (end-start > 0) {
 4002b1c:	e0fffc17 	ldw	r3,-16(fp)
 4002b20:	e0bffb17 	ldw	r2,-20(fp)
 4002b24:	1885c83a 	sub	r2,r3,r2
 4002b28:	0080130e 	bge	zero,r2,4002b78 <_ZN9DNSClient12BuildRequestEPKc+0x1b8>
			// Write out the size of this section
			len = end-start;
 4002b2c:	e0fffc17 	ldw	r3,-16(fp)
 4002b30:	e0bffb17 	ldw	r2,-20(fp)
 4002b34:	1885c83a 	sub	r2,r3,r2
 4002b38:	e0bffd85 	stb	r2,-10(fp)
			iUdp.write(&len, sizeof(len));
 4002b3c:	e0bffe17 	ldw	r2,-8(fp)
 4002b40:	10800204 	addi	r2,r2,8
 4002b44:	e0fffd84 	addi	r3,fp,-10
 4002b48:	01800044 	movi	r6,1
 4002b4c:	180b883a 	mov	r5,r3
 4002b50:	1009883a 	mov	r4,r2
 4002b54:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>
			// And then write out the section
			iUdp.write((uint8_t*)start, end-start);
 4002b58:	e0bffe17 	ldw	r2,-8(fp)
 4002b5c:	11000204 	addi	r4,r2,8
 4002b60:	e0fffc17 	ldw	r3,-16(fp)
 4002b64:	e0bffb17 	ldw	r2,-20(fp)
 4002b68:	1885c83a 	sub	r2,r3,r2
 4002b6c:	100d883a 	mov	r6,r2
 4002b70:	e17ffb17 	ldw	r5,-20(fp)
 4002b74:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>
		}
		start = end+1;
 4002b78:	e0bffc17 	ldw	r2,-16(fp)
 4002b7c:	10800044 	addi	r2,r2,1
 4002b80:	e0bffb15 	stw	r2,-20(fp)
	// Build question
	const char* start =aName;
	const char* end =start;
	uint8_t len;
	// Run through the name being requested
	while (*end) {
 4002b84:	003fcc06 	br	4002ab8 <__alt_data_end+0xfc002ab8>
		start = end+1;
	}

	// We've got to the end of the question name, so
	// terminate it with a zero-length section
	len = 0;
 4002b88:	e03ffd85 	stb	zero,-10(fp)
	iUdp.write(&len, sizeof(len));
 4002b8c:	e0bffe17 	ldw	r2,-8(fp)
 4002b90:	10800204 	addi	r2,r2,8
 4002b94:	e0fffd84 	addi	r3,fp,-10
 4002b98:	01800044 	movi	r6,1
 4002b9c:	180b883a 	mov	r5,r3
 4002ba0:	1009883a 	mov	r4,r2
 4002ba4:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>
	// Finally the type and class of question
	twoByteBuffer = htons(TYPE_A);
 4002ba8:	00804004 	movi	r2,256
 4002bac:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002bb0:	e0bffe17 	ldw	r2,-8(fp)
 4002bb4:	10800204 	addi	r2,r2,8
 4002bb8:	e0fffd04 	addi	r3,fp,-12
 4002bbc:	01800084 	movi	r6,2
 4002bc0:	180b883a 	mov	r5,r3
 4002bc4:	1009883a 	mov	r4,r2
 4002bc8:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>

	twoByteBuffer = htons(CLASS_IN);  // Internet class of question
 4002bcc:	00804004 	movi	r2,256
 4002bd0:	e0bffd0d 	sth	r2,-12(fp)
	iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
 4002bd4:	e0bffe17 	ldw	r2,-8(fp)
 4002bd8:	10800204 	addi	r2,r2,8
 4002bdc:	e0fffd04 	addi	r3,fp,-12
 4002be0:	01800084 	movi	r6,2
 4002be4:	180b883a 	mov	r5,r3
 4002be8:	1009883a 	mov	r4,r2
 4002bec:	4005c900 	call	4005c90 <_ZN11EthernetUDP5writeEPKhj>
	// Success!  Everything buffered okay
	return 1;
 4002bf0:	00800044 	movi	r2,1
}
 4002bf4:	e037883a 	mov	sp,fp
 4002bf8:	dfc00117 	ldw	ra,4(sp)
 4002bfc:	df000017 	ldw	fp,0(sp)
 4002c00:	dec00204 	addi	sp,sp,8
 4002c04:	f800283a 	ret

04002c08 <_ZN9DNSClient15ProcessResponseEtR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
 4002c08:	defff104 	addi	sp,sp,-60
 4002c0c:	dfc00e15 	stw	ra,56(sp)
 4002c10:	df000d15 	stw	fp,52(sp)
 4002c14:	dc000c15 	stw	r16,48(sp)
 4002c18:	df000d04 	addi	fp,sp,52
 4002c1c:	e13ffc15 	stw	r4,-16(fp)
 4002c20:	2805883a 	mov	r2,r5
 4002c24:	e1bffe15 	stw	r6,-8(fp)
 4002c28:	e0bffd0d 	sth	r2,-12(fp)
	uint32_t startTime = clock();
 4002c2c:	400b73c0 	call	400b73c <clock>
 4002c30:	e0bff415 	stw	r2,-48(fp)

	// Wait for a response packet
	while (iUdp.parsePacket() <= 0) {
 4002c34:	e0bffc17 	ldw	r2,-16(fp)
 4002c38:	10800204 	addi	r2,r2,8
 4002c3c:	1009883a 	mov	r4,r2
 4002c40:	4005d180 	call	4005d18 <_ZN11EthernetUDP11parsePacketEv>
 4002c44:	0084403a 	cmpge	r2,zero,r2
 4002c48:	10803fcc 	andi	r2,r2,255
 4002c4c:	10000d26 	beq	r2,zero,4002c84 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x7c>
		if ((clock() - startTime) > aTimeout) {
 4002c50:	400b73c0 	call	400b73c <clock>
 4002c54:	1007883a 	mov	r3,r2
 4002c58:	e0bff417 	ldw	r2,-48(fp)
 4002c5c:	1885c83a 	sub	r2,r3,r2
 4002c60:	e0fffd0b 	ldhu	r3,-12(fp)
 4002c64:	1885803a 	cmpltu	r2,r3,r2
 4002c68:	10803fcc 	andi	r2,r2,255
 4002c6c:	10000226 	beq	r2,zero,4002c78 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x70>
			return TIMED_OUT;
 4002c70:	00bfffc4 	movi	r2,-1
 4002c74:	00011c06 	br	40030e8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
		}
		usleep(50000);
 4002c78:	0130d414 	movui	r4,50000
 4002c7c:	40194f00 	call	40194f0 <usleep>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
	uint32_t startTime = clock();

	// Wait for a response packet
	while (iUdp.parsePacket() <= 0) {
 4002c80:	003fec06 	br	4002c34 <__alt_data_end+0xfc002c34>
		uint8_t  byte[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
		uint16_t word[DNS_HEADER_SIZE/2];
	} header;

	// Check that it's a response from the right server and the right port
	if ( (iDNSServer != iUdp.remoteIP()) || (iUdp.remotePort() != DNS_PORT) ) {
 4002c84:	e0bffc17 	ldw	r2,-16(fp)
 4002c88:	1009883a 	mov	r4,r2
 4002c8c:	40031b40 	call	40031b4 <_ZNK9IPAddresscvmEv>
 4002c90:	1021883a 	mov	r16,r2
 4002c94:	e0bffc17 	ldw	r2,-16(fp)
 4002c98:	10800204 	addi	r2,r2,8
 4002c9c:	1009883a 	mov	r4,r2
 4002ca0:	40026680 	call	4002668 <_ZN11EthernetUDP8remoteIPEv>
 4002ca4:	e0bff615 	stw	r2,-40(fp)
 4002ca8:	e0bff604 	addi	r2,fp,-40
 4002cac:	1009883a 	mov	r4,r2
 4002cb0:	40031b40 	call	40031b4 <_ZNK9IPAddresscvmEv>
 4002cb4:	8080071e 	bne	r16,r2,4002cd4 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xcc>
 4002cb8:	e0bffc17 	ldw	r2,-16(fp)
 4002cbc:	10800204 	addi	r2,r2,8
 4002cc0:	1009883a 	mov	r4,r2
 4002cc4:	40026900 	call	4002690 <_ZN11EthernetUDP10remotePortEv>
 4002cc8:	10bfffcc 	andi	r2,r2,65535
 4002ccc:	10800d60 	cmpeqi	r2,r2,53
 4002cd0:	1000021e 	bne	r2,zero,4002cdc <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xd4>
 4002cd4:	00800044 	movi	r2,1
 4002cd8:	00000106 	br	4002ce0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xd8>
 4002cdc:	0005883a 	mov	r2,zero
 4002ce0:	10803fcc 	andi	r2,r2,255
 4002ce4:	10000226 	beq	r2,zero,4002cf0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0xe8>
		// It's not from who we expected
		return INVALID_SERVER;
 4002ce8:	00bfff84 	movi	r2,-2
 4002cec:	0000fe06 	br	40030e8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// Read through the rest of the response
	if (iUdp.available() < DNS_HEADER_SIZE) {
 4002cf0:	e0bffc17 	ldw	r2,-16(fp)
 4002cf4:	10800204 	addi	r2,r2,8
 4002cf8:	1009883a 	mov	r4,r2
 4002cfc:	4005a540 	call	4005a54 <_ZN11EthernetUDP9availableEv>
 4002d00:	10800310 	cmplti	r2,r2,12
 4002d04:	10803fcc 	andi	r2,r2,255
 4002d08:	10000226 	beq	r2,zero,4002d14 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x10c>
		return TRUNCATED;
 4002d0c:	00bfff44 	movi	r2,-3
 4002d10:	0000f506 	br	40030e8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}
	iUdp.read(header.byte, DNS_HEADER_SIZE);
 4002d14:	e0bffc17 	ldw	r2,-16(fp)
 4002d18:	10800204 	addi	r2,r2,8
 4002d1c:	e0fff704 	addi	r3,fp,-36
 4002d20:	01800304 	movi	r6,12
 4002d24:	180b883a 	mov	r5,r3
 4002d28:	1009883a 	mov	r4,r2
 4002d2c:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>

	uint16_t header_flags = htons(header.word[1]);
 4002d30:	e0bff78b 	ldhu	r2,-34(fp)
 4002d34:	10bfffcc 	andi	r2,r2,65535
 4002d38:	1004923a 	slli	r2,r2,8
 4002d3c:	1007883a 	mov	r3,r2
 4002d40:	e0bff78b 	ldhu	r2,-34(fp)
 4002d44:	10bfffcc 	andi	r2,r2,65535
 4002d48:	1004d23a 	srli	r2,r2,8
 4002d4c:	1884b03a 	or	r2,r3,r2
 4002d50:	e0bffa0d 	sth	r2,-24(fp)
	// Check that it's a response to this request
	if ((iRequestId != (header.word[0])) ||
 4002d54:	e0bffc17 	ldw	r2,-16(fp)
 4002d58:	10c0010b 	ldhu	r3,4(r2)
 4002d5c:	e0bff70b 	ldhu	r2,-36(fp)
 4002d60:	18ffffcc 	andi	r3,r3,65535
 4002d64:	10bfffcc 	andi	r2,r2,65535
 4002d68:	1880051e 	bne	r3,r2,4002d80 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x178>
	  ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) ) {
 4002d6c:	e0bffa0b 	ldhu	r2,-24(fp)
	}
	iUdp.read(header.byte, DNS_HEADER_SIZE);

	uint16_t header_flags = htons(header.word[1]);
	// Check that it's a response to this request
	if ((iRequestId != (header.word[0])) ||
 4002d70:	10bfffcc 	andi	r2,r2,65535
 4002d74:	10a0001c 	xori	r2,r2,32768
 4002d78:	10a00004 	addi	r2,r2,-32768
 4002d7c:	10000616 	blt	r2,zero,4002d98 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x190>
	  ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) ) {
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 4002d80:	e0bffc17 	ldw	r2,-16(fp)
 4002d84:	10800204 	addi	r2,r2,8
 4002d88:	1009883a 	mov	r4,r2
 4002d8c:	40060380 	call	4006038 <_ZN11EthernetUDP5flushEv>
		return INVALID_RESPONSE;
 4002d90:	00bfff04 	movi	r2,-4
 4002d94:	0000d406 	br	40030e8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}
	// Check for any errors in the response (or in our request)
	// although we don't do anything to get round these
	if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) ) {
 4002d98:	e0bffa0b 	ldhu	r2,-24(fp)
 4002d9c:	10bfffcc 	andi	r2,r2,65535
 4002da0:	1080800c 	andi	r2,r2,512
 4002da4:	1000041e 	bne	r2,zero,4002db8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1b0>
 4002da8:	e0bffa0b 	ldhu	r2,-24(fp)
 4002dac:	10bfffcc 	andi	r2,r2,65535
 4002db0:	108003cc 	andi	r2,r2,15
 4002db4:	10000626 	beq	r2,zero,4002dd0 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x1c8>
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 4002db8:	e0bffc17 	ldw	r2,-16(fp)
 4002dbc:	10800204 	addi	r2,r2,8
 4002dc0:	1009883a 	mov	r4,r2
 4002dc4:	40060380 	call	4006038 <_ZN11EthernetUDP5flushEv>
		return -5; //INVALID_RESPONSE;
 4002dc8:	00bffec4 	movi	r2,-5
 4002dcc:	0000c606 	br	40030e8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// And make sure we've got (at least) one answer
	uint16_t answerCount = htons(header.word[3]);
 4002dd0:	e0bff88b 	ldhu	r2,-30(fp)
 4002dd4:	10bfffcc 	andi	r2,r2,65535
 4002dd8:	1004923a 	slli	r2,r2,8
 4002ddc:	1007883a 	mov	r3,r2
 4002de0:	e0bff88b 	ldhu	r2,-30(fp)
 4002de4:	10bfffcc 	andi	r2,r2,65535
 4002de8:	1004d23a 	srli	r2,r2,8
 4002dec:	1884b03a 	or	r2,r3,r2
 4002df0:	e0bff50d 	sth	r2,-44(fp)
	if (answerCount == 0) {
 4002df4:	e0bff50b 	ldhu	r2,-44(fp)
 4002df8:	1000061e 	bne	r2,zero,4002e14 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x20c>
		// Mark the entire packet as read
		iUdp.flush(); // FIXME
 4002dfc:	e0bffc17 	ldw	r2,-16(fp)
 4002e00:	10800204 	addi	r2,r2,8
 4002e04:	1009883a 	mov	r4,r2
 4002e08:	40060380 	call	4006038 <_ZN11EthernetUDP5flushEv>
		return -6; //INVALID_RESPONSE;
 4002e0c:	00bffe84 	movi	r2,-6
 4002e10:	0000b506 	br	40030e8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
	}

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
 4002e14:	e03ff30d 	sth	zero,-52(fp)
 4002e18:	e0fff30b 	ldhu	r3,-52(fp)
 4002e1c:	e0bff80b 	ldhu	r2,-32(fp)
 4002e20:	10bfffcc 	andi	r2,r2,65535
 4002e24:	1004923a 	slli	r2,r2,8
 4002e28:	113fffcc 	andi	r4,r2,65535
 4002e2c:	e0bff80b 	ldhu	r2,-32(fp)
 4002e30:	10bfffcc 	andi	r2,r2,65535
 4002e34:	1004d23a 	srli	r2,r2,8
 4002e38:	10bfffcc 	andi	r2,r2,65535
 4002e3c:	2084b03a 	or	r2,r4,r2
 4002e40:	1880200e 	bge	r3,r2,4002ec4 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x2bc>
		// Skip over the name
		uint8_t len;
		do {
			iUdp.read(&len, sizeof(len));
 4002e44:	e0bffc17 	ldw	r2,-16(fp)
 4002e48:	10800204 	addi	r2,r2,8
 4002e4c:	e0fffa84 	addi	r3,fp,-22
 4002e50:	01800044 	movi	r6,1
 4002e54:	180b883a 	mov	r5,r3
 4002e58:	1009883a 	mov	r4,r2
 4002e5c:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
			if (len > 0) {
 4002e60:	e0bffa83 	ldbu	r2,-22(fp)
 4002e64:	10803fcc 	andi	r2,r2,255
 4002e68:	10000826 	beq	r2,zero,4002e8c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x284>
				// Don't need to actually read the data out for the string, just
				// advance ptr to beyond it
				iUdp.read((uint8_t *)NULL, (size_t)len);
 4002e6c:	e0bffc17 	ldw	r2,-16(fp)
 4002e70:	10800204 	addi	r2,r2,8
 4002e74:	e0fffa83 	ldbu	r3,-22(fp)
 4002e78:	18c03fcc 	andi	r3,r3,255
 4002e7c:	180d883a 	mov	r6,r3
 4002e80:	000b883a 	mov	r5,zero
 4002e84:	1009883a 	mov	r4,r2
 4002e88:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
			}
		} while (len != 0);
 4002e8c:	e0bffa83 	ldbu	r2,-22(fp)
 4002e90:	10803fcc 	andi	r2,r2,255
 4002e94:	10000126 	beq	r2,zero,4002e9c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x294>

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
		// Skip over the name
		uint8_t len;
		do {
 4002e98:	003fea06 	br	4002e44 <__alt_data_end+0xfc002e44>
				iUdp.read((uint8_t *)NULL, (size_t)len);
			}
		} while (len != 0);

		// Now jump over the type and class
		iUdp.read((uint8_t *)NULL, 4);
 4002e9c:	e0bffc17 	ldw	r2,-16(fp)
 4002ea0:	10800204 	addi	r2,r2,8
 4002ea4:	01800104 	movi	r6,4
 4002ea8:	000b883a 	mov	r5,zero
 4002eac:	1009883a 	mov	r4,r2
 4002eb0:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
		iUdp.flush(); // FIXME
		return -6; //INVALID_RESPONSE;
	}

	// Skip over any questions
	for (uint16_t i=0; i < htons(header.word[2]); i++) {
 4002eb4:	e0bff30b 	ldhu	r2,-52(fp)
 4002eb8:	10800044 	addi	r2,r2,1
 4002ebc:	e0bff30d 	sth	r2,-52(fp)
 4002ec0:	003fd506 	br	4002e18 <__alt_data_end+0xfc002e18>
	// Now we're up to the bit we're interested in, the answer
	// There might be more than one answer (although we'll just use the first
	// type A answer) and some authority and additional resource records but
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
 4002ec4:	e03ff38d 	sth	zero,-50(fp)
 4002ec8:	e0fff38b 	ldhu	r3,-50(fp)
 4002ecc:	e0bff50b 	ldhu	r2,-44(fp)
 4002ed0:	1880802e 	bgeu	r3,r2,40030d4 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4cc>
		// Skip the name
		uint8_t len;
		do {
			iUdp.read(&len, sizeof(len));
 4002ed4:	e0bffc17 	ldw	r2,-16(fp)
 4002ed8:	10800204 	addi	r2,r2,8
 4002edc:	e0fffac4 	addi	r3,fp,-21
 4002ee0:	01800044 	movi	r6,1
 4002ee4:	180b883a 	mov	r5,r3
 4002ee8:	1009883a 	mov	r4,r2
 4002eec:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
			if ((len & LABEL_COMPRESSION_MASK) == 0) {
 4002ef0:	e0bffac3 	ldbu	r2,-21(fp)
 4002ef4:	10803fcc 	andi	r2,r2,255
 4002ef8:	1080300c 	andi	r2,r2,192
 4002efc:	10000c1e 	bne	r2,zero,4002f30 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x328>
				// It's just a normal label
				if (len > 0) {
 4002f00:	e0bffac3 	ldbu	r2,-21(fp)
 4002f04:	10803fcc 	andi	r2,r2,255
 4002f08:	10001026 	beq	r2,zero,4002f4c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x344>
					// And it's got a length
					// Don't need to actually read the data out for the string,
					// just advance ptr to beyond it
					iUdp.read((uint8_t *)NULL, len);
 4002f0c:	e0bffc17 	ldw	r2,-16(fp)
 4002f10:	10800204 	addi	r2,r2,8
 4002f14:	e0fffac3 	ldbu	r3,-21(fp)
 4002f18:	18c03fcc 	andi	r3,r3,255
 4002f1c:	180d883a 	mov	r6,r3
 4002f20:	000b883a 	mov	r5,zero
 4002f24:	1009883a 	mov	r4,r2
 4002f28:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
 4002f2c:	00000706 	br	4002f4c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x344>
				// says that a name is either a sequence of labels ended with a
				// 0 length octet or a pointer or a sequence of labels ending in
				// a pointer.  Either way, when we get here we're at the end of
				// the name
				// Skip over the pointer
				iUdp.read((uint8_t *)NULL, 1); // we don't care about the byte
 4002f30:	e0bffc17 	ldw	r2,-16(fp)
 4002f34:	10800204 	addi	r2,r2,8
 4002f38:	01800044 	movi	r6,1
 4002f3c:	000b883a 	mov	r5,zero
 4002f40:	1009883a 	mov	r4,r2
 4002f44:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
				// And set len so that we drop out of the name loop
				len = 0;
 4002f48:	e03ffac5 	stb	zero,-21(fp)
			}
		} while (len != 0);
 4002f4c:	e0bffac3 	ldbu	r2,-21(fp)
 4002f50:	10803fcc 	andi	r2,r2,255
 4002f54:	10000126 	beq	r2,zero,4002f5c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x354>
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
		// Skip the name
		uint8_t len;
		do {
 4002f58:	003fde06 	br	4002ed4 <__alt_data_end+0xfc002ed4>
		} while (len != 0);

		// Check the type and class
		uint16_t answerType;
		uint16_t answerClass;
		iUdp.read((uint8_t*)&answerType, sizeof(answerType));
 4002f5c:	e0bffc17 	ldw	r2,-16(fp)
 4002f60:	10800204 	addi	r2,r2,8
 4002f64:	e0fffb04 	addi	r3,fp,-20
 4002f68:	01800084 	movi	r6,2
 4002f6c:	180b883a 	mov	r5,r3
 4002f70:	1009883a 	mov	r4,r2
 4002f74:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
		iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
 4002f78:	e0bffc17 	ldw	r2,-16(fp)
 4002f7c:	10800204 	addi	r2,r2,8
 4002f80:	e0fffb84 	addi	r3,fp,-18
 4002f84:	01800084 	movi	r6,2
 4002f88:	180b883a 	mov	r5,r3
 4002f8c:	1009883a 	mov	r4,r2
 4002f90:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>

		// Ignore the Time-To-Live as we don't do any caching
		iUdp.read((uint8_t *)NULL, TTL_SIZE); // don't care about the returned bytes
 4002f94:	e0bffc17 	ldw	r2,-16(fp)
 4002f98:	10800204 	addi	r2,r2,8
 4002f9c:	01800104 	movi	r6,4
 4002fa0:	000b883a 	mov	r5,zero
 4002fa4:	1009883a 	mov	r4,r2
 4002fa8:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>

		// And read out the length of this answer
		// Don't need header_flags anymore, so we can reuse it here
		iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
 4002fac:	e0bffc17 	ldw	r2,-16(fp)
 4002fb0:	10800204 	addi	r2,r2,8
 4002fb4:	e0fffa04 	addi	r3,fp,-24
 4002fb8:	01800084 	movi	r6,2
 4002fbc:	180b883a 	mov	r5,r3
 4002fc0:	1009883a 	mov	r4,r2
 4002fc4:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>

		if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) ) {
 4002fc8:	e0bffb0b 	ldhu	r2,-20(fp)
 4002fcc:	10bfffcc 	andi	r2,r2,65535
 4002fd0:	1004923a 	slli	r2,r2,8
 4002fd4:	10ffffcc 	andi	r3,r2,65535
 4002fd8:	e0bffb0b 	ldhu	r2,-20(fp)
 4002fdc:	10bfffcc 	andi	r2,r2,65535
 4002fe0:	1004d23a 	srli	r2,r2,8
 4002fe4:	10bfffcc 	andi	r2,r2,65535
 4002fe8:	1884b03a 	or	r2,r3,r2
 4002fec:	10800058 	cmpnei	r2,r2,1
 4002ff0:	1000261e 	bne	r2,zero,400308c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x484>
 4002ff4:	e0bffb8b 	ldhu	r2,-18(fp)
 4002ff8:	10bfffcc 	andi	r2,r2,65535
 4002ffc:	1004923a 	slli	r2,r2,8
 4003000:	10ffffcc 	andi	r3,r2,65535
 4003004:	e0bffb8b 	ldhu	r2,-18(fp)
 4003008:	10bfffcc 	andi	r2,r2,65535
 400300c:	1004d23a 	srli	r2,r2,8
 4003010:	10bfffcc 	andi	r2,r2,65535
 4003014:	1884b03a 	or	r2,r3,r2
 4003018:	10800058 	cmpnei	r2,r2,1
 400301c:	10001b1e 	bne	r2,zero,400308c <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x484>
			if (htons(header_flags) != 4) {
 4003020:	e0bffa0b 	ldhu	r2,-24(fp)
 4003024:	10bfffcc 	andi	r2,r2,65535
 4003028:	1004923a 	slli	r2,r2,8
 400302c:	10ffffcc 	andi	r3,r2,65535
 4003030:	e0bffa0b 	ldhu	r2,-24(fp)
 4003034:	10bfffcc 	andi	r2,r2,65535
 4003038:	1004d23a 	srli	r2,r2,8
 400303c:	10bfffcc 	andi	r2,r2,65535
 4003040:	1884b03a 	or	r2,r3,r2
 4003044:	10800120 	cmpeqi	r2,r2,4
 4003048:	1000061e 	bne	r2,zero,4003064 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x45c>
				// It's a weird size
				// Mark the entire packet as read
				iUdp.flush(); // FIXME
 400304c:	e0bffc17 	ldw	r2,-16(fp)
 4003050:	10800204 	addi	r2,r2,8
 4003054:	1009883a 	mov	r4,r2
 4003058:	40060380 	call	4006038 <_ZN11EthernetUDP5flushEv>
				return -9;//INVALID_RESPONSE;
 400305c:	00bffdc4 	movi	r2,-9
 4003060:	00002106 	br	40030e8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
			}
			// FIXME: seems to lock up here on ESP8266, but why??
			iUdp.read(aAddress.raw_address(), 4);
 4003064:	e0bffc17 	ldw	r2,-16(fp)
 4003068:	14000204 	addi	r16,r2,8
 400306c:	e13ffe17 	ldw	r4,-8(fp)
 4003070:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 4003074:	01800104 	movi	r6,4
 4003078:	100b883a 	mov	r5,r2
 400307c:	8009883a 	mov	r4,r16
 4003080:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
			return SUCCESS;
 4003084:	00800044 	movi	r2,1
 4003088:	00001706 	br	40030e8 <_ZN9DNSClient15ProcessResponseEtR9IPAddress+0x4e0>
		} else {
			// This isn't an answer type we're after, move onto the next one
			iUdp.read((uint8_t *)NULL, htons(header_flags));
 400308c:	e0bffc17 	ldw	r2,-16(fp)
 4003090:	11000204 	addi	r4,r2,8
 4003094:	e0bffa0b 	ldhu	r2,-24(fp)
 4003098:	10bfffcc 	andi	r2,r2,65535
 400309c:	1004923a 	slli	r2,r2,8
 40030a0:	10ffffcc 	andi	r3,r2,65535
 40030a4:	e0bffa0b 	ldhu	r2,-24(fp)
 40030a8:	10bfffcc 	andi	r2,r2,65535
 40030ac:	1004d23a 	srli	r2,r2,8
 40030b0:	10bfffcc 	andi	r2,r2,65535
 40030b4:	1884b03a 	or	r2,r3,r2
 40030b8:	100d883a 	mov	r6,r2
 40030bc:	000b883a 	mov	r5,zero
 40030c0:	4005ee00 	call	4005ee0 <_ZN11EthernetUDP4readEPhj>
	// Now we're up to the bit we're interested in, the answer
	// There might be more than one answer (although we'll just use the first
	// type A answer) and some authority and additional resource records but
	// we're going to ignore all of them.

	for (uint16_t i=0; i < answerCount; i++) {
 40030c4:	e0bff38b 	ldhu	r2,-50(fp)
 40030c8:	10800044 	addi	r2,r2,1
 40030cc:	e0bff38d 	sth	r2,-50(fp)
 40030d0:	003f7d06 	br	4002ec8 <__alt_data_end+0xfc002ec8>
			iUdp.read((uint8_t *)NULL, htons(header_flags));
		}
	}

	// Mark the entire packet as read
	iUdp.flush(); // FIXME
 40030d4:	e0bffc17 	ldw	r2,-16(fp)
 40030d8:	10800204 	addi	r2,r2,8
 40030dc:	1009883a 	mov	r4,r2
 40030e0:	40060380 	call	4006038 <_ZN11EthernetUDP5flushEv>

	// If we get here then we haven't found an answer
	return -10; //INVALID_RESPONSE;
 40030e4:	00bffd84 	movi	r2,-10
}
 40030e8:	e6ffff04 	addi	sp,fp,-4
 40030ec:	dfc00217 	ldw	ra,8(sp)
 40030f0:	df000117 	ldw	fp,4(sp)
 40030f4:	dc000017 	ldw	r16,0(sp)
 40030f8:	dec00304 	addi	sp,sp,12
 40030fc:	f800283a 	ret

04003100 <_Z41__static_initialization_and_destruction_0ii>:
 4003100:	defffb04 	addi	sp,sp,-20
 4003104:	dfc00415 	stw	ra,16(sp)
 4003108:	df000315 	stw	fp,12(sp)
 400310c:	df000304 	addi	fp,sp,12
 4003110:	e13ffe15 	stw	r4,-8(fp)
 4003114:	e17fff15 	stw	r5,-4(fp)
 4003118:	e0bffe17 	ldw	r2,-8(fp)
 400311c:	10800058 	cmpnei	r2,r2,1
 4003120:	1000091e 	bne	r2,zero,4003148 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4003124:	e0ffff17 	ldw	r3,-4(fp)
 4003128:	00bfffd4 	movui	r2,65535
 400312c:	1880061e 	bne	r3,r2,4003148 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4003130:	d8000015 	stw	zero,0(sp)
 4003134:	000f883a 	mov	r7,zero
 4003138:	000d883a 	mov	r6,zero
 400313c:	000b883a 	mov	r5,zero
 4003140:	d112cd04 	addi	r4,gp,19252
 4003144:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
 4003148:	0001883a 	nop
 400314c:	e037883a 	mov	sp,fp
 4003150:	dfc00117 	ldw	ra,4(sp)
 4003154:	df000017 	ldw	fp,0(sp)
 4003158:	dec00204 	addi	sp,sp,8
 400315c:	f800283a 	ret

04003160 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
 4003160:	defffe04 	addi	sp,sp,-8
 4003164:	dfc00115 	stw	ra,4(sp)
 4003168:	df000015 	stw	fp,0(sp)
 400316c:	d839883a 	mov	fp,sp
 4003170:	017fffd4 	movui	r5,65535
 4003174:	01000044 	movi	r4,1
 4003178:	40031000 	call	4003100 <_Z41__static_initialization_and_destruction_0ii>
 400317c:	e037883a 	mov	sp,fp
 4003180:	dfc00117 	ldw	ra,4(sp)
 4003184:	df000017 	ldw	fp,0(sp)
 4003188:	dec00204 	addi	sp,sp,8
 400318c:	f800283a 	ret

04003190 <_ZN9IPAddress11raw_addressEv>:

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
 4003190:	defffe04 	addi	sp,sp,-8
 4003194:	df000115 	stw	fp,4(sp)
 4003198:	df000104 	addi	fp,sp,4
 400319c:	e13fff15 	stw	r4,-4(fp)
 40031a0:	e0bfff17 	ldw	r2,-4(fp)
 40031a4:	e037883a 	mov	sp,fp
 40031a8:	df000017 	ldw	fp,0(sp)
 40031ac:	dec00104 	addi	sp,sp,4
 40031b0:	f800283a 	ret

040031b4 <_ZNK9IPAddresscvmEv>:
    bool fromString(const char *address);
    void print();

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() const { return _address.dword; };
 40031b4:	defffe04 	addi	sp,sp,-8
 40031b8:	df000115 	stw	fp,4(sp)
 40031bc:	df000104 	addi	fp,sp,4
 40031c0:	e13fff15 	stw	r4,-4(fp)
 40031c4:	e0bfff17 	ldw	r2,-4(fp)
 40031c8:	10800017 	ldw	r2,0(r2)
 40031cc:	e037883a 	mov	sp,fp
 40031d0:	df000017 	ldw	fp,0(sp)
 40031d4:	dec00104 	addi	sp,sp,4
 40031d8:	f800283a 	ret

040031dc <_ZN9IPAddressixEi>:
    bool operator==(const IPAddress& addr) const { return _address.dword == addr._address.dword; };
    bool operator==(const uint8_t* addr) const;

    // Overloaded index operator to allow getting and setting individual octets of the address
    uint8_t operator[](int index) const { return _address.bytes[index]; };
    uint8_t& operator[](int index) { return _address.bytes[index]; };
 40031dc:	defffd04 	addi	sp,sp,-12
 40031e0:	df000215 	stw	fp,8(sp)
 40031e4:	df000204 	addi	fp,sp,8
 40031e8:	e13ffe15 	stw	r4,-8(fp)
 40031ec:	e17fff15 	stw	r5,-4(fp)
 40031f0:	e0fffe17 	ldw	r3,-8(fp)
 40031f4:	e0bfff17 	ldw	r2,-4(fp)
 40031f8:	1885883a 	add	r2,r3,r2
 40031fc:	e037883a 	mov	sp,fp
 4003200:	df000017 	ldw	fp,0(sp)
 4003204:	dec00104 	addi	sp,sp,4
 4003208:	f800283a 	ret

0400320c <_ZN13EthernetClass5beginEPhmm>:

IPAddress EthernetClass::_dnsServerAddress;
DhcpClass* EthernetClass::_dhcp = NULL;

int EthernetClass::begin(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
 400320c:	deffdd04 	addi	sp,sp,-140
 4003210:	dfc02215 	stw	ra,136(sp)
 4003214:	df002115 	stw	fp,132(sp)
 4003218:	ddc02015 	stw	r23,128(sp)
 400321c:	dd801f15 	stw	r22,124(sp)
 4003220:	dd401e15 	stw	r21,120(sp)
 4003224:	dd001d15 	stw	r20,116(sp)
 4003228:	dcc01c15 	stw	r19,112(sp)
 400322c:	dc801b15 	stw	r18,108(sp)
 4003230:	dc401a15 	stw	r17,104(sp)
 4003234:	dc001915 	stw	r16,100(sp)
 4003238:	df002104 	addi	fp,sp,132
 400323c:	e13fe515 	stw	r4,-108(fp)
 4003240:	e17fe615 	stw	r5,-104(fp)
 4003244:	e1bfe715 	stw	r6,-100(fp)
 4003248:	00810074 	movhi	r2,1025
 400324c:	10a72604 	addi	r2,r2,-25448
 4003250:	e0bfee15 	stw	r2,-72(fp)
 4003254:	008100b4 	movhi	r2,1026
 4003258:	10adc684 	addi	r2,r2,-18662
 400325c:	e0bfef15 	stw	r2,-68(fp)
 4003260:	e0bff004 	addi	r2,fp,-64
 4003264:	e0ffe004 	addi	r3,fp,-128
 4003268:	10c00015 	stw	r3,0(r2)
 400326c:	00c10034 	movhi	r3,1024
 4003270:	18cd0904 	addi	r3,r3,13348
 4003274:	10c00115 	stw	r3,4(r2)
 4003278:	16c00215 	stw	sp,8(r2)
 400327c:	e0bfe804 	addi	r2,fp,-96
 4003280:	1009883a 	mov	r4,r2
 4003284:	400b40c0 	call	400b40c <_Unwind_SjLj_Register>
	static DhcpClass s_dhcp;
 4003288:	d092d104 	addi	r2,gp,19268
 400328c:	10800003 	ldbu	r2,0(r2)
 4003290:	10803fcc 	andi	r2,r2,255
 4003294:	1080201c 	xori	r2,r2,128
 4003298:	10bfe004 	addi	r2,r2,-128
 400329c:	10000d1e 	bne	r2,zero,40032d4 <_ZN13EthernetClass5beginEPhmm+0xc8>
 40032a0:	d112d104 	addi	r4,gp,19268
 40032a4:	400a6640 	call	400a664 <__cxa_guard_acquire>
 40032a8:	1004c03a 	cmpne	r2,r2,zero
 40032ac:	10803fcc 	andi	r2,r2,255
 40032b0:	10000826 	beq	r2,zero,40032d4 <_ZN13EthernetClass5beginEPhmm+0xc8>
 40032b4:	e03ff505 	stb	zero,-44(fp)
 40032b8:	010100f4 	movhi	r4,1027
 40032bc:	00800044 	movi	r2,1
 40032c0:	e0bfe915 	stw	r2,-92(fp)
 40032c4:	2119ed04 	addi	r4,r4,26548
 40032c8:	40041c40 	call	40041c4 <_ZN9DhcpClassC1Ev>
 40032cc:	d112d104 	addi	r4,gp,19268
 40032d0:	400a6c80 	call	400a6c8 <__cxa_guard_release>
	_dhcp = &s_dhcp;
 40032d4:	008100f4 	movhi	r2,1027
 40032d8:	1099ed04 	addi	r2,r2,26548
 40032dc:	d092d015 	stw	r2,19264(gp)

	// Initialise the basic info
	if (W5100.init() == 0) return 0;
 40032e0:	00bfffc4 	movi	r2,-1
 40032e4:	e0bfe915 	stw	r2,-92(fp)
 40032e8:	40080a40 	call	40080a4 <_ZN10W5100Class4initEv>
 40032ec:	10803fcc 	andi	r2,r2,255
 40032f0:	1005003a 	cmpeq	r2,r2,zero
 40032f4:	10803fcc 	andi	r2,r2,255
 40032f8:	10000226 	beq	r2,zero,4003304 <_ZN13EthernetClass5beginEPhmm+0xf8>
 40032fc:	0005883a 	mov	r2,zero
 4003300:	00004606 	br	400341c <_ZN13EthernetClass5beginEPhmm+0x210>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setMACAddress(mac);
 4003304:	00bfffc4 	movi	r2,-1
 4003308:	e0bfe915 	stw	r2,-92(fp)
 400330c:	e17fe517 	ldw	r5,-108(fp)
 4003310:	d112da84 	addi	r4,gp,19306
 4003314:	4003d740 	call	4003d74 <_ZN10W5100Class13setMACAddressEPKh>
	W5100.setIPAddress(IPAddress(0,0,0,0).raw_address());
 4003318:	e0bfe404 	addi	r2,fp,-112
 400331c:	d8000015 	stw	zero,0(sp)
 4003320:	000f883a 	mov	r7,zero
 4003324:	000d883a 	mov	r6,zero
 4003328:	000b883a 	mov	r5,zero
 400332c:	1009883a 	mov	r4,r2
 4003330:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
 4003334:	e0bfe404 	addi	r2,fp,-112
 4003338:	1009883a 	mov	r4,r2
 400333c:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 4003340:	100b883a 	mov	r5,r2
 4003344:	d112da84 	addi	r4,gp,19306
 4003348:	4003de40 	call	4003de4 <_ZN10W5100Class12setIPAddressEPKh>
//	SPI_endTransaction();

	// Now try to get our config info from a DHCP server
	int ret = _dhcp->beginWithDHCP(mac, timeout, responseTimeout);
 400334c:	d092d017 	ldw	r2,19264(gp)
 4003350:	e1ffe717 	ldw	r7,-100(fp)
 4003354:	e1bfe617 	ldw	r6,-104(fp)
 4003358:	e17fe517 	ldw	r5,-108(fp)
 400335c:	1009883a 	mov	r4,r2
 4003360:	40011700 	call	4001170 <_ZN9DhcpClass13beginWithDHCPEPhmm>
 4003364:	e0bfe015 	stw	r2,-128(fp)
	if (ret == 1) {
 4003368:	e0bfe017 	ldw	r2,-128(fp)
 400336c:	10800058 	cmpnei	r2,r2,1
 4003370:	1000291e 	bne	r2,zero,4003418 <_ZN13EthernetClass5beginEPhmm+0x20c>
		// We've successfully found a DHCP server and got our configuration
		// info, so set things accordingly
//		SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
		W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
 4003374:	d092d017 	ldw	r2,19264(gp)
 4003378:	1009883a 	mov	r4,r2
 400337c:	40023b00 	call	40023b0 <_ZN9DhcpClass10getLocalIpEv>
 4003380:	e0bfe315 	stw	r2,-116(fp)
 4003384:	e0bfe304 	addi	r2,fp,-116
 4003388:	1009883a 	mov	r4,r2
 400338c:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 4003390:	100b883a 	mov	r5,r2
 4003394:	d112da84 	addi	r4,gp,19306
 4003398:	4003de40 	call	4003de4 <_ZN10W5100Class12setIPAddressEPKh>
		W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
 400339c:	d092d017 	ldw	r2,19264(gp)
 40033a0:	1009883a 	mov	r4,r2
 40033a4:	40024300 	call	4002430 <_ZN9DhcpClass12getGatewayIpEv>
 40033a8:	e0bfe215 	stw	r2,-120(fp)
 40033ac:	e0bfe204 	addi	r2,fp,-120
 40033b0:	1009883a 	mov	r4,r2
 40033b4:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 40033b8:	100b883a 	mov	r5,r2
 40033bc:	d112da84 	addi	r4,gp,19306
 40033c0:	4003c940 	call	4003c94 <_ZN10W5100Class12setGatewayIpEPKh>
		W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
 40033c4:	d092d017 	ldw	r2,19264(gp)
 40033c8:	1009883a 	mov	r4,r2
 40033cc:	40023f00 	call	40023f0 <_ZN9DhcpClass13getSubnetMaskEv>
 40033d0:	e0bfe115 	stw	r2,-124(fp)
 40033d4:	e0bfe104 	addi	r2,fp,-124
 40033d8:	1009883a 	mov	r4,r2
 40033dc:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 40033e0:	100b883a 	mov	r5,r2
 40033e4:	d112da84 	addi	r4,gp,19306
 40033e8:	4003d040 	call	4003d04 <_ZN10W5100Class13setSubnetMaskEPKh>
//		SPI_endTransaction();
		_dnsServerAddress = _dhcp->getDnsServerIp();
 40033ec:	d092d017 	ldw	r2,19264(gp)
 40033f0:	1009883a 	mov	r4,r2
 40033f4:	40024b00 	call	40024b0 <_ZN9DhcpClass14getDnsServerIpEv>
 40033f8:	d092cf15 	stw	r2,19260(gp)
		socketPortRand(clock()/1000);
 40033fc:	400b73c0 	call	400b73c <clock>
 4003400:	0140fa04 	movi	r5,1000
 4003404:	1009883a 	mov	r4,r2
 4003408:	400b1200 	call	400b120 <__udivsi3>
 400340c:	10bfffcc 	andi	r2,r2,65535
 4003410:	1009883a 	mov	r4,r2
 4003414:	40062480 	call	4006248 <_ZN13EthernetClass14socketPortRandEt>
	}
	return ret;
 4003418:	e0bfe017 	ldw	r2,-128(fp)
 400341c:	e0bff615 	stw	r2,-40(fp)
 4003420:	00000c06 	br	4003454 <_ZN13EthernetClass5beginEPhmm+0x248>
 4003424:	e7002004 	addi	fp,fp,128
 4003428:	e0bfea17 	ldw	r2,-88(fp)
 400342c:	e0bff715 	stw	r2,-36(fp)
IPAddress EthernetClass::_dnsServerAddress;
DhcpClass* EthernetClass::_dhcp = NULL;

int EthernetClass::begin(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
	static DhcpClass s_dhcp;
 4003430:	e0bff503 	ldbu	r2,-44(fp)
 4003434:	1000021e 	bne	r2,zero,4003440 <_ZN13EthernetClass5beginEPhmm+0x234>
 4003438:	d112d104 	addi	r4,gp,19268
 400343c:	400a6c00 	call	400a6c0 <__cxa_guard_abort>
 4003440:	e0fff717 	ldw	r3,-36(fp)
 4003444:	00bfffc4 	movi	r2,-1
 4003448:	e0bfe915 	stw	r2,-92(fp)
 400344c:	1809883a 	mov	r4,r3
 4003450:	400b6080 	call	400b608 <_Unwind_SjLj_Resume>
 4003454:	e0bfe804 	addi	r2,fp,-96
 4003458:	1009883a 	mov	r4,r2
 400345c:	400b4240 	call	400b424 <_Unwind_SjLj_Unregister>
//		SPI_endTransaction();
		_dnsServerAddress = _dhcp->getDnsServerIp();
		socketPortRand(clock()/1000);
	}
	return ret;
}
 4003460:	e0bff617 	ldw	r2,-40(fp)
 4003464:	e6fff804 	addi	sp,fp,-32
 4003468:	dfc00917 	ldw	ra,36(sp)
 400346c:	df000817 	ldw	fp,32(sp)
 4003470:	ddc00717 	ldw	r23,28(sp)
 4003474:	dd800617 	ldw	r22,24(sp)
 4003478:	dd400517 	ldw	r21,20(sp)
 400347c:	dd000417 	ldw	r20,16(sp)
 4003480:	dcc00317 	ldw	r19,12(sp)
 4003484:	dc800217 	ldw	r18,8(sp)
 4003488:	dc400117 	ldw	r17,4(sp)
 400348c:	dc000017 	ldw	r16,0(sp)
 4003490:	dec00a04 	addi	sp,sp,40
 4003494:	f800283a 	ret

04003498 <_ZN13EthernetClass5beginEPh9IPAddress>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip)
{
 4003498:	defffb04 	addi	sp,sp,-20
 400349c:	dfc00415 	stw	ra,16(sp)
 40034a0:	df000315 	stw	fp,12(sp)
 40034a4:	df000304 	addi	fp,sp,12
 40034a8:	e13ffe15 	stw	r4,-8(fp)
 40034ac:	e17fff15 	stw	r5,-4(fp)
	// Assume the DNS server will be the machine on the same network as the local IP
	// but with last octet being '1'
	IPAddress dns = ip;
 40034b0:	e0bfff17 	ldw	r2,-4(fp)
 40034b4:	e0bffd15 	stw	r2,-12(fp)
	dns[3] = 1;
 40034b8:	014000c4 	movi	r5,3
 40034bc:	e13ffd04 	addi	r4,fp,-12
 40034c0:	40031dc0 	call	40031dc <_ZN9IPAddressixEi>
 40034c4:	1007883a 	mov	r3,r2
 40034c8:	00800044 	movi	r2,1
 40034cc:	18800005 	stb	r2,0(r3)
	begin(mac, ip, dns);
 40034d0:	e1bffd17 	ldw	r6,-12(fp)
 40034d4:	e17fff17 	ldw	r5,-4(fp)
 40034d8:	e13ffe17 	ldw	r4,-8(fp)
 40034dc:	40034f80 	call	40034f8 <_ZN13EthernetClass5beginEPh9IPAddressS1_>
}
 40034e0:	0001883a 	nop
 40034e4:	e037883a 	mov	sp,fp
 40034e8:	dfc00117 	ldw	ra,4(sp)
 40034ec:	df000017 	ldw	fp,0(sp)
 40034f0:	dec00204 	addi	sp,sp,8
 40034f4:	f800283a 	ret

040034f8 <_ZN13EthernetClass5beginEPh9IPAddressS1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns)
{
 40034f8:	defffa04 	addi	sp,sp,-24
 40034fc:	dfc00515 	stw	ra,20(sp)
 4003500:	df000415 	stw	fp,16(sp)
 4003504:	df000404 	addi	fp,sp,16
 4003508:	e13ffd15 	stw	r4,-12(fp)
 400350c:	e17ffe15 	stw	r5,-8(fp)
 4003510:	e1bfff15 	stw	r6,-4(fp)
	// Assume the gateway will be the machine on the same network as the local IP
	// but with last octet being '1'
	IPAddress gateway = ip;
 4003514:	e0bffe17 	ldw	r2,-8(fp)
 4003518:	e0bffc15 	stw	r2,-16(fp)
	gateway[3] = 1;
 400351c:	014000c4 	movi	r5,3
 4003520:	e13ffc04 	addi	r4,fp,-16
 4003524:	40031dc0 	call	40031dc <_ZN9IPAddressixEi>
 4003528:	1007883a 	mov	r3,r2
 400352c:	00800044 	movi	r2,1
 4003530:	18800005 	stb	r2,0(r3)
	begin(mac, ip, dns, gateway);
 4003534:	e1fffc17 	ldw	r7,-16(fp)
 4003538:	e1bfff17 	ldw	r6,-4(fp)
 400353c:	e17ffe17 	ldw	r5,-8(fp)
 4003540:	e13ffd17 	ldw	r4,-12(fp)
 4003544:	40035600 	call	4003560 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>
}
 4003548:	0001883a 	nop
 400354c:	e037883a 	mov	sp,fp
 4003550:	dfc00117 	ldw	ra,4(sp)
 4003554:	df000017 	ldw	fp,0(sp)
 4003558:	dec00204 	addi	sp,sp,8
 400355c:	f800283a 	ret

04003560 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway)
{
 4003560:	defff804 	addi	sp,sp,-32
 4003564:	dfc00715 	stw	ra,28(sp)
 4003568:	df000615 	stw	fp,24(sp)
 400356c:	df000604 	addi	fp,sp,24
 4003570:	e13ffc15 	stw	r4,-16(fp)
 4003574:	e17ffd15 	stw	r5,-12(fp)
 4003578:	e1bffe15 	stw	r6,-8(fp)
 400357c:	e1ffff15 	stw	r7,-4(fp)
	IPAddress subnet(255, 255, 255, 0);
 4003580:	d8000015 	stw	zero,0(sp)
 4003584:	01c03fc4 	movi	r7,255
 4003588:	01803fc4 	movi	r6,255
 400358c:	01403fc4 	movi	r5,255
 4003590:	e13ffb04 	addi	r4,fp,-20
 4003594:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
	begin(mac, ip, dns, gateway, subnet);
 4003598:	e0bffb17 	ldw	r2,-20(fp)
 400359c:	d8800015 	stw	r2,0(sp)
 40035a0:	e1ffff17 	ldw	r7,-4(fp)
 40035a4:	e1bffe17 	ldw	r6,-8(fp)
 40035a8:	e17ffd17 	ldw	r5,-12(fp)
 40035ac:	e13ffc17 	ldw	r4,-16(fp)
 40035b0:	40035cc0 	call	40035cc <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
}
 40035b4:	0001883a 	nop
 40035b8:	e037883a 	mov	sp,fp
 40035bc:	dfc00117 	ldw	ra,4(sp)
 40035c0:	df000017 	ldw	fp,0(sp)
 40035c4:	dec00204 	addi	sp,sp,8
 40035c8:	f800283a 	ret

040035cc <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway, IPAddress subnet)
{
 40035cc:	defffa04 	addi	sp,sp,-24
 40035d0:	dfc00515 	stw	ra,20(sp)
 40035d4:	df000415 	stw	fp,16(sp)
 40035d8:	df000404 	addi	fp,sp,16
 40035dc:	e13ffc15 	stw	r4,-16(fp)
 40035e0:	e17ffd15 	stw	r5,-12(fp)
 40035e4:	e1bffe15 	stw	r6,-8(fp)
 40035e8:	e1ffff15 	stw	r7,-4(fp)
	if (W5100.init() == 0) return;
 40035ec:	40080a40 	call	40080a4 <_ZN10W5100Class4initEv>
 40035f0:	10803fcc 	andi	r2,r2,255
 40035f4:	1005003a 	cmpeq	r2,r2,zero
 40035f8:	10803fcc 	andi	r2,r2,255
 40035fc:	10001a1e 	bne	r2,zero,4003668 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0x9c>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setMACAddress(mac);
 4003600:	e17ffc17 	ldw	r5,-16(fp)
 4003604:	d112da84 	addi	r4,gp,19306
 4003608:	4003d740 	call	4003d74 <_ZN10W5100Class13setMACAddressEPKh>
//#ifdef ESP8266
	W5100.setIPAddress(&ip[0]);
 400360c:	e0bffd04 	addi	r2,fp,-12
 4003610:	000b883a 	mov	r5,zero
 4003614:	1009883a 	mov	r4,r2
 4003618:	40031dc0 	call	40031dc <_ZN9IPAddressixEi>
 400361c:	100b883a 	mov	r5,r2
 4003620:	d112da84 	addi	r4,gp,19306
 4003624:	4003de40 	call	4003de4 <_ZN10W5100Class12setIPAddressEPKh>
	W5100.setGatewayIp(&gateway[0]);
 4003628:	e0bfff04 	addi	r2,fp,-4
 400362c:	000b883a 	mov	r5,zero
 4003630:	1009883a 	mov	r4,r2
 4003634:	40031dc0 	call	40031dc <_ZN9IPAddressixEi>
 4003638:	100b883a 	mov	r5,r2
 400363c:	d112da84 	addi	r4,gp,19306
 4003640:	4003c940 	call	4003c94 <_ZN10W5100Class12setGatewayIpEPKh>
	W5100.setSubnetMask(&subnet[0]);
 4003644:	000b883a 	mov	r5,zero
 4003648:	e1000204 	addi	r4,fp,8
 400364c:	40031dc0 	call	40031dc <_ZN9IPAddressixEi>
 4003650:	100b883a 	mov	r5,r2
 4003654:	d112da84 	addi	r4,gp,19306
 4003658:	4003d040 	call	4003d04 <_ZN10W5100Class13setSubnetMaskEPKh>
//	W5100.setIPAddress(ip._address);
//	W5100.setGatewayIp(gateway._address);
//	W5100.setSubnetMask(subnet._address);
//#endif
//	SPI_endTransaction();
	_dnsServerAddress = dns;
 400365c:	e0bffe17 	ldw	r2,-8(fp)
 4003660:	d092cf15 	stw	r2,19260(gp)
 4003664:	00000106 	br	400366c <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_+0xa0>
	begin(mac, ip, dns, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress ip, IPAddress dns, IPAddress gateway, IPAddress subnet)
{
	if (W5100.init() == 0) return;
 4003668:	0001883a 	nop
//	W5100.setGatewayIp(gateway._address);
//	W5100.setSubnetMask(subnet._address);
//#endif
//	SPI_endTransaction();
	_dnsServerAddress = dns;
}
 400366c:	e037883a 	mov	sp,fp
 4003670:	dfc00117 	ldw	ra,4(sp)
 4003674:	df000017 	ldw	fp,0(sp)
 4003678:	dec00204 	addi	sp,sp,8
 400367c:	f800283a 	ret

04003680 <_ZN13EthernetClass4initEh>:

void EthernetClass::init(uint8_t sspin)
{
 4003680:	defffd04 	addi	sp,sp,-12
 4003684:	dfc00215 	stw	ra,8(sp)
 4003688:	df000115 	stw	fp,4(sp)
 400368c:	df000104 	addi	fp,sp,4
 4003690:	2005883a 	mov	r2,r4
 4003694:	e0bfff05 	stb	r2,-4(fp)
	W5100.setSS(sspin);
 4003698:	e0bfff03 	ldbu	r2,-4(fp)
 400369c:	1009883a 	mov	r4,r2
 40036a0:	40041940 	call	4004194 <_ZN10W5100Class5setSSEh>
}
 40036a4:	0001883a 	nop
 40036a8:	e037883a 	mov	sp,fp
 40036ac:	dfc00117 	ldw	ra,4(sp)
 40036b0:	df000017 	ldw	fp,0(sp)
 40036b4:	dec00204 	addi	sp,sp,8
 40036b8:	f800283a 	ret

040036bc <_ZN13EthernetClass10linkStatusEv>:

EthernetLinkStatus EthernetClass::linkStatus()
{
 40036bc:	defffe04 	addi	sp,sp,-8
 40036c0:	dfc00115 	stw	ra,4(sp)
 40036c4:	df000015 	stw	fp,0(sp)
 40036c8:	d839883a 	mov	fp,sp
	switch (W5100.getLinkStatus()) {
 40036cc:	40084c40 	call	40084c4 <_ZN10W5100Class13getLinkStatusEv>
 40036d0:	10c00060 	cmpeqi	r3,r2,1
 40036d4:	1800051e 	bne	r3,zero,40036ec <_ZN13EthernetClass10linkStatusEv+0x30>
 40036d8:	10c000a0 	cmpeqi	r3,r2,2
 40036dc:	1800051e 	bne	r3,zero,40036f4 <_ZN13EthernetClass10linkStatusEv+0x38>
 40036e0:	1000061e 	bne	r2,zero,40036fc <_ZN13EthernetClass10linkStatusEv+0x40>
		case UNKNOWN:  return Unknown;
 40036e4:	0005883a 	mov	r2,zero
 40036e8:	00000506 	br	4003700 <_ZN13EthernetClass10linkStatusEv+0x44>
		case LINK_ON:  return LinkON;
 40036ec:	00800044 	movi	r2,1
 40036f0:	00000306 	br	4003700 <_ZN13EthernetClass10linkStatusEv+0x44>
		case LINK_OFF: return LinkOFF;
 40036f4:	00800084 	movi	r2,2
 40036f8:	00000106 	br	4003700 <_ZN13EthernetClass10linkStatusEv+0x44>
		default:       return Unknown;
 40036fc:	0005883a 	mov	r2,zero
	}
}
 4003700:	e037883a 	mov	sp,fp
 4003704:	dfc00117 	ldw	ra,4(sp)
 4003708:	df000017 	ldw	fp,0(sp)
 400370c:	dec00204 	addi	sp,sp,8
 4003710:	f800283a 	ret

04003714 <_ZN13EthernetClass14hardwareStatusEv>:

EthernetHardwareStatus EthernetClass::hardwareStatus()
{
 4003714:	defffe04 	addi	sp,sp,-8
 4003718:	dfc00115 	stw	ra,4(sp)
 400371c:	df000015 	stw	fp,0(sp)
 4003720:	d839883a 	mov	fp,sp
	switch (W5100.getChip()) {
 4003724:	40041740 	call	4004174 <_ZN10W5100Class7getChipEv>
 4003728:	10803fcc 	andi	r2,r2,255
 400372c:	10c00d20 	cmpeqi	r3,r2,52
 4003730:	1800061e 	bne	r3,zero,400374c <_ZN13EthernetClass14hardwareStatusEv+0x38>
 4003734:	10c00de0 	cmpeqi	r3,r2,55
 4003738:	1800061e 	bne	r3,zero,4003754 <_ZN13EthernetClass14hardwareStatusEv+0x40>
 400373c:	10800ce0 	cmpeqi	r2,r2,51
 4003740:	10000626 	beq	r2,zero,400375c <_ZN13EthernetClass14hardwareStatusEv+0x48>
		case 51: return EthernetW5100;
 4003744:	00800044 	movi	r2,1
 4003748:	00000506 	br	4003760 <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		case 52: return EthernetW5200;
 400374c:	00800084 	movi	r2,2
 4003750:	00000306 	br	4003760 <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		case 55: return EthernetW5500;
 4003754:	008000c4 	movi	r2,3
 4003758:	00000106 	br	4003760 <_ZN13EthernetClass14hardwareStatusEv+0x4c>
		default: return EthernetNoHardware;
 400375c:	0005883a 	mov	r2,zero
	}
}
 4003760:	e037883a 	mov	sp,fp
 4003764:	dfc00117 	ldw	ra,4(sp)
 4003768:	df000017 	ldw	fp,0(sp)
 400376c:	dec00204 	addi	sp,sp,8
 4003770:	f800283a 	ret

04003774 <_ZN13EthernetClass8maintainEv>:

int EthernetClass::maintain()
{
 4003774:	defffa04 	addi	sp,sp,-24
 4003778:	dfc00515 	stw	ra,20(sp)
 400377c:	df000415 	stw	fp,16(sp)
 4003780:	df000404 	addi	fp,sp,16
	int rc = DHCP_CHECK_NONE;
 4003784:	e03ffc15 	stw	zero,-16(fp)
	if (_dhcp != NULL) {
 4003788:	d092d017 	ldw	r2,19264(gp)
 400378c:	10002f26 	beq	r2,zero,400384c <_ZN13EthernetClass8maintainEv+0xd8>
		// we have a pointer to dhcp, use it
		rc = _dhcp->checkLease();
 4003790:	d092d017 	ldw	r2,19264(gp)
 4003794:	1009883a 	mov	r4,r2
 4003798:	40022240 	call	4002224 <_ZN9DhcpClass10checkLeaseEv>
 400379c:	e0bffc15 	stw	r2,-16(fp)
		switch (rc) {
 40037a0:	e0bffc17 	ldw	r2,-16(fp)
 40037a4:	10c000a0 	cmpeqi	r3,r2,2
 40037a8:	1800041e 	bne	r3,zero,40037bc <_ZN13EthernetClass8maintainEv+0x48>
 40037ac:	10c00120 	cmpeqi	r3,r2,4
 40037b0:	1800021e 	bne	r3,zero,40037bc <_ZN13EthernetClass8maintainEv+0x48>
 40037b4:	10002426 	beq	r2,zero,4003848 <_ZN13EthernetClass8maintainEv+0xd4>
//			SPI_endTransaction();
			_dnsServerAddress = _dhcp->getDnsServerIp();
			break;
		default:
			//this is actually an error, it will retry though
			break;
 40037b8:	00002406 	br	400384c <_ZN13EthernetClass8maintainEv+0xd8>
			break;
		case DHCP_CHECK_RENEW_OK:
		case DHCP_CHECK_REBIND_OK:
			//we might have got a new IP.
//			SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
			W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
 40037bc:	d092d017 	ldw	r2,19264(gp)
 40037c0:	1009883a 	mov	r4,r2
 40037c4:	40023b00 	call	40023b0 <_ZN9DhcpClass10getLocalIpEv>
 40037c8:	e0bfff15 	stw	r2,-4(fp)
 40037cc:	e0bfff04 	addi	r2,fp,-4
 40037d0:	1009883a 	mov	r4,r2
 40037d4:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 40037d8:	100b883a 	mov	r5,r2
 40037dc:	d112da84 	addi	r4,gp,19306
 40037e0:	4003de40 	call	4003de4 <_ZN10W5100Class12setIPAddressEPKh>
			W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
 40037e4:	d092d017 	ldw	r2,19264(gp)
 40037e8:	1009883a 	mov	r4,r2
 40037ec:	40024300 	call	4002430 <_ZN9DhcpClass12getGatewayIpEv>
 40037f0:	e0bffe15 	stw	r2,-8(fp)
 40037f4:	e0bffe04 	addi	r2,fp,-8
 40037f8:	1009883a 	mov	r4,r2
 40037fc:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 4003800:	100b883a 	mov	r5,r2
 4003804:	d112da84 	addi	r4,gp,19306
 4003808:	4003c940 	call	4003c94 <_ZN10W5100Class12setGatewayIpEPKh>
			W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
 400380c:	d092d017 	ldw	r2,19264(gp)
 4003810:	1009883a 	mov	r4,r2
 4003814:	40023f00 	call	40023f0 <_ZN9DhcpClass13getSubnetMaskEv>
 4003818:	e0bffd15 	stw	r2,-12(fp)
 400381c:	e0bffd04 	addi	r2,fp,-12
 4003820:	1009883a 	mov	r4,r2
 4003824:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 4003828:	100b883a 	mov	r5,r2
 400382c:	d112da84 	addi	r4,gp,19306
 4003830:	4003d040 	call	4003d04 <_ZN10W5100Class13setSubnetMaskEPKh>
//			SPI_endTransaction();
			_dnsServerAddress = _dhcp->getDnsServerIp();
 4003834:	d092d017 	ldw	r2,19264(gp)
 4003838:	1009883a 	mov	r4,r2
 400383c:	40024b00 	call	40024b0 <_ZN9DhcpClass14getDnsServerIpEv>
 4003840:	d092cf15 	stw	r2,19260(gp)
			break;
 4003844:	00000106 	br	400384c <_ZN13EthernetClass8maintainEv+0xd8>
		// we have a pointer to dhcp, use it
		rc = _dhcp->checkLease();
		switch (rc) {
		case DHCP_CHECK_NONE:
			//nothing done
			break;
 4003848:	0001883a 	nop
		default:
			//this is actually an error, it will retry though
			break;
		}
	}
	return rc;
 400384c:	e0bffc17 	ldw	r2,-16(fp)
}
 4003850:	e037883a 	mov	sp,fp
 4003854:	dfc00117 	ldw	ra,4(sp)
 4003858:	df000017 	ldw	fp,0(sp)
 400385c:	dec00204 	addi	sp,sp,8
 4003860:	f800283a 	ret

04003864 <_ZN13EthernetClass10MACAddressEPh>:


void EthernetClass::MACAddress(uint8_t *mac_address)
{
 4003864:	defffd04 	addi	sp,sp,-12
 4003868:	dfc00215 	stw	ra,8(sp)
 400386c:	df000115 	stw	fp,4(sp)
 4003870:	df000104 	addi	fp,sp,4
 4003874:	e13fff15 	stw	r4,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getMACAddress(mac_address);
 4003878:	e17fff17 	ldw	r5,-4(fp)
 400387c:	d112da84 	addi	r4,gp,19306
 4003880:	4003dac0 	call	4003dac <_ZN10W5100Class13getMACAddressEPh>
//	SPI_endTransaction();
}
 4003884:	0001883a 	nop
 4003888:	e037883a 	mov	sp,fp
 400388c:	dfc00117 	ldw	ra,4(sp)
 4003890:	df000017 	ldw	fp,0(sp)
 4003894:	dec00204 	addi	sp,sp,8
 4003898:	f800283a 	ret

0400389c <_ZN13EthernetClass7localIPEv>:

IPAddress EthernetClass::localIP()
{
 400389c:	defffd04 	addi	sp,sp,-12
 40038a0:	dfc00215 	stw	ra,8(sp)
 40038a4:	df000115 	stw	fp,4(sp)
 40038a8:	df000104 	addi	fp,sp,4
	IPAddress ret;
 40038ac:	e13fff04 	addi	r4,fp,-4
 40038b0:	4007c9c0 	call	4007c9c <_ZN9IPAddressC1Ev>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getIPAddress(ret.raw_address());
 40038b4:	e13fff04 	addi	r4,fp,-4
 40038b8:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 40038bc:	100b883a 	mov	r5,r2
 40038c0:	d112da84 	addi	r4,gp,19306
 40038c4:	4003e1c0 	call	4003e1c <_ZN10W5100Class12getIPAddressEPh>
//	SPI_endTransaction();
	return ret;
 40038c8:	e0bfff17 	ldw	r2,-4(fp)
}
 40038cc:	e037883a 	mov	sp,fp
 40038d0:	dfc00117 	ldw	ra,4(sp)
 40038d4:	df000017 	ldw	fp,0(sp)
 40038d8:	dec00204 	addi	sp,sp,8
 40038dc:	f800283a 	ret

040038e0 <_ZN13EthernetClass10subnetMaskEv>:

IPAddress EthernetClass::subnetMask()
{
 40038e0:	defffd04 	addi	sp,sp,-12
 40038e4:	dfc00215 	stw	ra,8(sp)
 40038e8:	df000115 	stw	fp,4(sp)
 40038ec:	df000104 	addi	fp,sp,4
	IPAddress ret;
 40038f0:	e13fff04 	addi	r4,fp,-4
 40038f4:	4007c9c0 	call	4007c9c <_ZN9IPAddressC1Ev>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getSubnetMask(ret.raw_address());
 40038f8:	e13fff04 	addi	r4,fp,-4
 40038fc:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 4003900:	100b883a 	mov	r5,r2
 4003904:	d112da84 	addi	r4,gp,19306
 4003908:	4003d3c0 	call	4003d3c <_ZN10W5100Class13getSubnetMaskEPh>
//	SPI_endTransaction();
	return ret;
 400390c:	e0bfff17 	ldw	r2,-4(fp)
}
 4003910:	e037883a 	mov	sp,fp
 4003914:	dfc00117 	ldw	ra,4(sp)
 4003918:	df000017 	ldw	fp,0(sp)
 400391c:	dec00204 	addi	sp,sp,8
 4003920:	f800283a 	ret

04003924 <_ZN13EthernetClass9gatewayIPEv>:

IPAddress EthernetClass::gatewayIP()
{
 4003924:	defffd04 	addi	sp,sp,-12
 4003928:	dfc00215 	stw	ra,8(sp)
 400392c:	df000115 	stw	fp,4(sp)
 4003930:	df000104 	addi	fp,sp,4
	IPAddress ret;
 4003934:	e13fff04 	addi	r4,fp,-4
 4003938:	4007c9c0 	call	4007c9c <_ZN9IPAddressC1Ev>
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.getGatewayIp(ret.raw_address());
 400393c:	e13fff04 	addi	r4,fp,-4
 4003940:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 4003944:	100b883a 	mov	r5,r2
 4003948:	d112da84 	addi	r4,gp,19306
 400394c:	4003ccc0 	call	4003ccc <_ZN10W5100Class12getGatewayIpEPh>
//	SPI_endTransaction();
	return ret;
 4003950:	e0bfff17 	ldw	r2,-4(fp)
}
 4003954:	e037883a 	mov	sp,fp
 4003958:	dfc00117 	ldw	ra,4(sp)
 400395c:	df000017 	ldw	fp,0(sp)
 4003960:	dec00204 	addi	sp,sp,8
 4003964:	f800283a 	ret

04003968 <_ZN13EthernetClass13setMACAddressEPKh>:

void EthernetClass::setMACAddress(const uint8_t *mac_address)
{
 4003968:	defffc04 	addi	sp,sp,-16
 400396c:	dfc00315 	stw	ra,12(sp)
 4003970:	df000215 	stw	fp,8(sp)
 4003974:	df000204 	addi	fp,sp,8
 4003978:	e13ffe15 	stw	r4,-8(fp)
 400397c:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setMACAddress(mac_address);
 4003980:	e17fff17 	ldw	r5,-4(fp)
 4003984:	d112da84 	addi	r4,gp,19306
 4003988:	4003d740 	call	4003d74 <_ZN10W5100Class13setMACAddressEPKh>
//	SPI_endTransaction();
}
 400398c:	0001883a 	nop
 4003990:	e037883a 	mov	sp,fp
 4003994:	dfc00117 	ldw	ra,4(sp)
 4003998:	df000017 	ldw	fp,0(sp)
 400399c:	dec00204 	addi	sp,sp,8
 40039a0:	f800283a 	ret

040039a4 <_ZN13EthernetClass10setLocalIPE9IPAddress>:

void EthernetClass::setLocalIP(const IPAddress local_ip)
{
 40039a4:	defffb04 	addi	sp,sp,-20
 40039a8:	dfc00415 	stw	ra,16(sp)
 40039ac:	df000315 	stw	fp,12(sp)
 40039b0:	df000304 	addi	fp,sp,12
 40039b4:	e13ffe15 	stw	r4,-8(fp)
 40039b8:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	IPAddress ip = local_ip;
 40039bc:	e0bfff17 	ldw	r2,-4(fp)
 40039c0:	e0bffd15 	stw	r2,-12(fp)
	W5100.setIPAddress(ip.raw_address());
 40039c4:	e13ffd04 	addi	r4,fp,-12
 40039c8:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 40039cc:	100b883a 	mov	r5,r2
 40039d0:	d112da84 	addi	r4,gp,19306
 40039d4:	4003de40 	call	4003de4 <_ZN10W5100Class12setIPAddressEPKh>
//	SPI_endTransaction();
}
 40039d8:	0001883a 	nop
 40039dc:	e037883a 	mov	sp,fp
 40039e0:	dfc00117 	ldw	ra,4(sp)
 40039e4:	df000017 	ldw	fp,0(sp)
 40039e8:	dec00204 	addi	sp,sp,8
 40039ec:	f800283a 	ret

040039f0 <_ZN13EthernetClass13setSubnetMaskE9IPAddress>:

void EthernetClass::setSubnetMask(const IPAddress subnet)
{
 40039f0:	defffb04 	addi	sp,sp,-20
 40039f4:	dfc00415 	stw	ra,16(sp)
 40039f8:	df000315 	stw	fp,12(sp)
 40039fc:	df000304 	addi	fp,sp,12
 4003a00:	e13ffe15 	stw	r4,-8(fp)
 4003a04:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	IPAddress ip = subnet;
 4003a08:	e0bfff17 	ldw	r2,-4(fp)
 4003a0c:	e0bffd15 	stw	r2,-12(fp)
	W5100.setSubnetMask(ip.raw_address());
 4003a10:	e13ffd04 	addi	r4,fp,-12
 4003a14:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 4003a18:	100b883a 	mov	r5,r2
 4003a1c:	d112da84 	addi	r4,gp,19306
 4003a20:	4003d040 	call	4003d04 <_ZN10W5100Class13setSubnetMaskEPKh>
//	SPI_endTransaction();
}
 4003a24:	0001883a 	nop
 4003a28:	e037883a 	mov	sp,fp
 4003a2c:	dfc00117 	ldw	ra,4(sp)
 4003a30:	df000017 	ldw	fp,0(sp)
 4003a34:	dec00204 	addi	sp,sp,8
 4003a38:	f800283a 	ret

04003a3c <_ZN13EthernetClass12setGatewayIPE9IPAddress>:

void EthernetClass::setGatewayIP(const IPAddress gateway)
{
 4003a3c:	defffb04 	addi	sp,sp,-20
 4003a40:	dfc00415 	stw	ra,16(sp)
 4003a44:	df000315 	stw	fp,12(sp)
 4003a48:	df000304 	addi	fp,sp,12
 4003a4c:	e13ffe15 	stw	r4,-8(fp)
 4003a50:	e17fff15 	stw	r5,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	IPAddress ip = gateway;
 4003a54:	e0bfff17 	ldw	r2,-4(fp)
 4003a58:	e0bffd15 	stw	r2,-12(fp)
	W5100.setGatewayIp(ip.raw_address());
 4003a5c:	e13ffd04 	addi	r4,fp,-12
 4003a60:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 4003a64:	100b883a 	mov	r5,r2
 4003a68:	d112da84 	addi	r4,gp,19306
 4003a6c:	4003c940 	call	4003c94 <_ZN10W5100Class12setGatewayIpEPKh>
//	SPI_endTransaction();
}
 4003a70:	0001883a 	nop
 4003a74:	e037883a 	mov	sp,fp
 4003a78:	dfc00117 	ldw	ra,4(sp)
 4003a7c:	df000017 	ldw	fp,0(sp)
 4003a80:	dec00204 	addi	sp,sp,8
 4003a84:	f800283a 	ret

04003a88 <_ZN13EthernetClass24setRetransmissionTimeoutEt>:

void EthernetClass::setRetransmissionTimeout(uint16_t milliseconds)
{
 4003a88:	defffc04 	addi	sp,sp,-16
 4003a8c:	dfc00315 	stw	ra,12(sp)
 4003a90:	df000215 	stw	fp,8(sp)
 4003a94:	df000204 	addi	fp,sp,8
 4003a98:	e13ffe15 	stw	r4,-8(fp)
 4003a9c:	2805883a 	mov	r2,r5
 4003aa0:	e0bfff0d 	sth	r2,-4(fp)
	if (milliseconds > 6553) milliseconds = 6553;
 4003aa4:	e0bfff0b 	ldhu	r2,-4(fp)
 4003aa8:	108666b0 	cmpltui	r2,r2,6554
 4003aac:	1000021e 	bne	r2,zero,4003ab8 <_ZN13EthernetClass24setRetransmissionTimeoutEt+0x30>
 4003ab0:	00866644 	movi	r2,6553
 4003ab4:	e0bfff0d 	sth	r2,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setRetransmissionTime(milliseconds * 10);
 4003ab8:	e0bfff0b 	ldhu	r2,-4(fp)
 4003abc:	01400284 	movi	r5,10
 4003ac0:	1009883a 	mov	r4,r2
 4003ac4:	400b1dc0 	call	400b1dc <__mulsi3>
 4003ac8:	10bfffcc 	andi	r2,r2,65535
 4003acc:	100b883a 	mov	r5,r2
 4003ad0:	d112da84 	addi	r4,gp,19306
 4003ad4:	4003e540 	call	4003e54 <_ZN10W5100Class21setRetransmissionTimeEt>
//	SPI_endTransaction();
}
 4003ad8:	0001883a 	nop
 4003adc:	e037883a 	mov	sp,fp
 4003ae0:	dfc00117 	ldw	ra,4(sp)
 4003ae4:	df000017 	ldw	fp,0(sp)
 4003ae8:	dec00204 	addi	sp,sp,8
 4003aec:	f800283a 	ret

04003af0 <_ZN13EthernetClass22setRetransmissionCountEh>:

void EthernetClass::setRetransmissionCount(uint8_t num)
{
 4003af0:	defffc04 	addi	sp,sp,-16
 4003af4:	dfc00315 	stw	ra,12(sp)
 4003af8:	df000215 	stw	fp,8(sp)
 4003afc:	df000204 	addi	fp,sp,8
 4003b00:	e13ffe15 	stw	r4,-8(fp)
 4003b04:	2805883a 	mov	r2,r5
 4003b08:	e0bfff05 	stb	r2,-4(fp)
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.setRetransmissionCount(num);
 4003b0c:	e0bfff03 	ldbu	r2,-4(fp)
 4003b10:	100b883a 	mov	r5,r2
 4003b14:	d112da84 	addi	r4,gp,19306
 4003b18:	4003e940 	call	4003e94 <_ZN10W5100Class22setRetransmissionCountEh>
//	SPI_endTransaction();
}
 4003b1c:	0001883a 	nop
 4003b20:	e037883a 	mov	sp,fp
 4003b24:	dfc00117 	ldw	ra,4(sp)
 4003b28:	df000017 	ldw	fp,0(sp)
 4003b2c:	dec00204 	addi	sp,sp,8
 4003b30:	f800283a 	ret

04003b34 <_Z41__static_initialization_and_destruction_0ii>:





EthernetClass Ethernet;
 4003b34:	defffb04 	addi	sp,sp,-20
 4003b38:	dfc00415 	stw	ra,16(sp)
 4003b3c:	df000315 	stw	fp,12(sp)
 4003b40:	df000304 	addi	fp,sp,12
 4003b44:	e13ffe15 	stw	r4,-8(fp)
 4003b48:	e17fff15 	stw	r5,-4(fp)
 4003b4c:	e0bffe17 	ldw	r2,-8(fp)
 4003b50:	10800058 	cmpnei	r2,r2,1
 4003b54:	10000b1e 	bne	r2,zero,4003b84 <_Z41__static_initialization_and_destruction_0ii+0x50>
 4003b58:	e0ffff17 	ldw	r3,-4(fp)
 4003b5c:	00bfffd4 	movui	r2,65535
 4003b60:	1880081e 	bne	r3,r2,4003b84 <_Z41__static_initialization_and_destruction_0ii+0x50>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4003b64:	d8000015 	stw	zero,0(sp)
 4003b68:	000f883a 	mov	r7,zero
 4003b6c:	000d883a 	mov	r6,zero
 4003b70:	000b883a 	mov	r5,zero
 4003b74:	d112ce04 	addi	r4,gp,19256
 4003b78:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
#include "time.h"

#include "Dhcp.h"
#include "utility/w5100.h"

IPAddress EthernetClass::_dnsServerAddress;
 4003b7c:	d112cf04 	addi	r4,gp,19260
 4003b80:	4007c9c0 	call	4007c9c <_ZN9IPAddressC1Ev>





EthernetClass Ethernet;
 4003b84:	0001883a 	nop
 4003b88:	e037883a 	mov	sp,fp
 4003b8c:	dfc00117 	ldw	ra,4(sp)
 4003b90:	df000017 	ldw	fp,0(sp)
 4003b94:	dec00204 	addi	sp,sp,8
 4003b98:	f800283a 	ret

04003b9c <_GLOBAL__sub_I__ZN13EthernetClass17_dnsServerAddressE>:
 4003b9c:	defffe04 	addi	sp,sp,-8
 4003ba0:	dfc00115 	stw	ra,4(sp)
 4003ba4:	df000015 	stw	fp,0(sp)
 4003ba8:	d839883a 	mov	fp,sp
 4003bac:	017fffd4 	movui	r5,65535
 4003bb0:	01000044 	movi	r4,1
 4003bb4:	4003b340 	call	4003b34 <_Z41__static_initialization_and_destruction_0ii>
 4003bb8:	e037883a 	mov	sp,fp
 4003bbc:	dfc00117 	ldw	ra,4(sp)
 4003bc0:	df000017 	ldw	fp,0(sp)
 4003bc4:	dec00204 	addi	sp,sp,8
 4003bc8:	f800283a 	ret

04003bcc <_ZN3UDP14beginMulticastE9IPAddresst>:
#include "utility/IPAddress.h"

class UDP  {
public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
 4003bcc:	defffc04 	addi	sp,sp,-16
 4003bd0:	df000315 	stw	fp,12(sp)
 4003bd4:	df000304 	addi	fp,sp,12
 4003bd8:	e13ffd15 	stw	r4,-12(fp)
 4003bdc:	e17ffe15 	stw	r5,-8(fp)
 4003be0:	3005883a 	mov	r2,r6
 4003be4:	e0bfff0d 	sth	r2,-4(fp)
 4003be8:	0005883a 	mov	r2,zero
 4003bec:	e037883a 	mov	sp,fp
 4003bf0:	df000017 	ldw	fp,0(sp)
 4003bf4:	dec00104 	addi	sp,sp,4
 4003bf8:	f800283a 	ret

04003bfc <_ZN3UDPC1Ev>:
#ifndef udp_h
#define udp_h

#include "utility/IPAddress.h"

class UDP  {
 4003bfc:	defffe04 	addi	sp,sp,-8
 4003c00:	df000115 	stw	fp,4(sp)
 4003c04:	df000104 	addi	fp,sp,4
 4003c08:	e13fff15 	stw	r4,-4(fp)
 4003c0c:	008100b4 	movhi	r2,1026
 4003c10:	10b27604 	addi	r2,r2,-13864
 4003c14:	e0ffff17 	ldw	r3,-4(fp)
 4003c18:	18800015 	stw	r2,0(r3)
 4003c1c:	0001883a 	nop
 4003c20:	e037883a 	mov	sp,fp
 4003c24:	df000017 	ldw	fp,0(sp)
 4003c28:	dec00104 	addi	sp,sp,4
 4003c2c:	f800283a 	ret

04003c30 <_ZN11EthernetUDPC1Ev>:
protected:
	uint8_t sockindex;
	uint16_t _remaining; // remaining bytes of incoming packet yet to be processed

public:
	EthernetUDP() : sockindex(MAX_SOCK_NUM) {}  // Constructor
 4003c30:	defffd04 	addi	sp,sp,-12
 4003c34:	dfc00215 	stw	ra,8(sp)
 4003c38:	df000115 	stw	fp,4(sp)
 4003c3c:	df000104 	addi	fp,sp,4
 4003c40:	e13fff15 	stw	r4,-4(fp)
 4003c44:	e0bfff17 	ldw	r2,-4(fp)
 4003c48:	1009883a 	mov	r4,r2
 4003c4c:	4003bfc0 	call	4003bfc <_ZN3UDPC1Ev>
 4003c50:	008100b4 	movhi	r2,1026
 4003c54:	10b2c904 	addi	r2,r2,-13532
 4003c58:	e0ffff17 	ldw	r3,-4(fp)
 4003c5c:	18800015 	stw	r2,0(r3)
 4003c60:	e0bfff17 	ldw	r2,-4(fp)
 4003c64:	10800204 	addi	r2,r2,8
 4003c68:	1009883a 	mov	r4,r2
 4003c6c:	4007c9c0 	call	4007c9c <_ZN9IPAddressC1Ev>
 4003c70:	e0bfff17 	ldw	r2,-4(fp)
 4003c74:	00c00204 	movi	r3,8
 4003c78:	10c00405 	stb	r3,16(r2)
 4003c7c:	0001883a 	nop
 4003c80:	e037883a 	mov	sp,fp
 4003c84:	dfc00117 	ldw	ra,4(sp)
 4003c88:	df000017 	ldw	fp,0(sp)
 4003c8c:	dec00204 	addi	sp,sp,8
 4003c90:	f800283a 	ret

04003c94 <_ZN10W5100Class12setGatewayIpEPKh>:
class W5100Class {

public:
  static uint8_t init(void);

  inline void setGatewayIp(const uint8_t * addr) { writeGAR(addr); }
 4003c94:	defffc04 	addi	sp,sp,-16
 4003c98:	dfc00315 	stw	ra,12(sp)
 4003c9c:	df000215 	stw	fp,8(sp)
 4003ca0:	df000204 	addi	fp,sp,8
 4003ca4:	e13ffe15 	stw	r4,-8(fp)
 4003ca8:	e17fff15 	stw	r5,-4(fp)
 4003cac:	e13fff17 	ldw	r4,-4(fp)
 4003cb0:	4003f200 	call	4003f20 <_ZN10W5100Class8writeGAREPKh>
 4003cb4:	0001883a 	nop
 4003cb8:	e037883a 	mov	sp,fp
 4003cbc:	dfc00117 	ldw	ra,4(sp)
 4003cc0:	df000017 	ldw	fp,0(sp)
 4003cc4:	dec00204 	addi	sp,sp,8
 4003cc8:	f800283a 	ret

04003ccc <_ZN10W5100Class12getGatewayIpEPh>:
  inline void getGatewayIp(uint8_t * addr) { readGAR(addr); }
 4003ccc:	defffc04 	addi	sp,sp,-16
 4003cd0:	dfc00315 	stw	ra,12(sp)
 4003cd4:	df000215 	stw	fp,8(sp)
 4003cd8:	df000204 	addi	fp,sp,8
 4003cdc:	e13ffe15 	stw	r4,-8(fp)
 4003ce0:	e17fff15 	stw	r5,-4(fp)
 4003ce4:	e13fff17 	ldw	r4,-4(fp)
 4003ce8:	4003f580 	call	4003f58 <_ZN10W5100Class7readGAREPh>
 4003cec:	0001883a 	nop
 4003cf0:	e037883a 	mov	sp,fp
 4003cf4:	dfc00117 	ldw	ra,4(sp)
 4003cf8:	df000017 	ldw	fp,0(sp)
 4003cfc:	dec00204 	addi	sp,sp,8
 4003d00:	f800283a 	ret

04003d04 <_ZN10W5100Class13setSubnetMaskEPKh>:

  inline void setSubnetMask(const uint8_t * addr) { writeSUBR(addr); }
 4003d04:	defffc04 	addi	sp,sp,-16
 4003d08:	dfc00315 	stw	ra,12(sp)
 4003d0c:	df000215 	stw	fp,8(sp)
 4003d10:	df000204 	addi	fp,sp,8
 4003d14:	e13ffe15 	stw	r4,-8(fp)
 4003d18:	e17fff15 	stw	r5,-4(fp)
 4003d1c:	e13fff17 	ldw	r4,-4(fp)
 4003d20:	4003f900 	call	4003f90 <_ZN10W5100Class9writeSUBREPKh>
 4003d24:	0001883a 	nop
 4003d28:	e037883a 	mov	sp,fp
 4003d2c:	dfc00117 	ldw	ra,4(sp)
 4003d30:	df000017 	ldw	fp,0(sp)
 4003d34:	dec00204 	addi	sp,sp,8
 4003d38:	f800283a 	ret

04003d3c <_ZN10W5100Class13getSubnetMaskEPh>:
  inline void getSubnetMask(uint8_t * addr) { readSUBR(addr); }
 4003d3c:	defffc04 	addi	sp,sp,-16
 4003d40:	dfc00315 	stw	ra,12(sp)
 4003d44:	df000215 	stw	fp,8(sp)
 4003d48:	df000204 	addi	fp,sp,8
 4003d4c:	e13ffe15 	stw	r4,-8(fp)
 4003d50:	e17fff15 	stw	r5,-4(fp)
 4003d54:	e13fff17 	ldw	r4,-4(fp)
 4003d58:	4003fc80 	call	4003fc8 <_ZN10W5100Class8readSUBREPh>
 4003d5c:	0001883a 	nop
 4003d60:	e037883a 	mov	sp,fp
 4003d64:	dfc00117 	ldw	ra,4(sp)
 4003d68:	df000017 	ldw	fp,0(sp)
 4003d6c:	dec00204 	addi	sp,sp,8
 4003d70:	f800283a 	ret

04003d74 <_ZN10W5100Class13setMACAddressEPKh>:

  inline void setMACAddress(const uint8_t * addr) { writeSHAR(addr); }
 4003d74:	defffc04 	addi	sp,sp,-16
 4003d78:	dfc00315 	stw	ra,12(sp)
 4003d7c:	df000215 	stw	fp,8(sp)
 4003d80:	df000204 	addi	fp,sp,8
 4003d84:	e13ffe15 	stw	r4,-8(fp)
 4003d88:	e17fff15 	stw	r5,-4(fp)
 4003d8c:	e13fff17 	ldw	r4,-4(fp)
 4003d90:	40040000 	call	4004000 <_ZN10W5100Class9writeSHAREPKh>
 4003d94:	0001883a 	nop
 4003d98:	e037883a 	mov	sp,fp
 4003d9c:	dfc00117 	ldw	ra,4(sp)
 4003da0:	df000017 	ldw	fp,0(sp)
 4003da4:	dec00204 	addi	sp,sp,8
 4003da8:	f800283a 	ret

04003dac <_ZN10W5100Class13getMACAddressEPh>:
  inline void getMACAddress(uint8_t * addr) { readSHAR(addr); }
 4003dac:	defffc04 	addi	sp,sp,-16
 4003db0:	dfc00315 	stw	ra,12(sp)
 4003db4:	df000215 	stw	fp,8(sp)
 4003db8:	df000204 	addi	fp,sp,8
 4003dbc:	e13ffe15 	stw	r4,-8(fp)
 4003dc0:	e17fff15 	stw	r5,-4(fp)
 4003dc4:	e13fff17 	ldw	r4,-4(fp)
 4003dc8:	40040380 	call	4004038 <_ZN10W5100Class8readSHAREPh>
 4003dcc:	0001883a 	nop
 4003dd0:	e037883a 	mov	sp,fp
 4003dd4:	dfc00117 	ldw	ra,4(sp)
 4003dd8:	df000017 	ldw	fp,0(sp)
 4003ddc:	dec00204 	addi	sp,sp,8
 4003de0:	f800283a 	ret

04003de4 <_ZN10W5100Class12setIPAddressEPKh>:

  inline void setIPAddress(const uint8_t * addr) { writeSIPR(addr); }
 4003de4:	defffc04 	addi	sp,sp,-16
 4003de8:	dfc00315 	stw	ra,12(sp)
 4003dec:	df000215 	stw	fp,8(sp)
 4003df0:	df000204 	addi	fp,sp,8
 4003df4:	e13ffe15 	stw	r4,-8(fp)
 4003df8:	e17fff15 	stw	r5,-4(fp)
 4003dfc:	e13fff17 	ldw	r4,-4(fp)
 4003e00:	40040700 	call	4004070 <_ZN10W5100Class9writeSIPREPKh>
 4003e04:	0001883a 	nop
 4003e08:	e037883a 	mov	sp,fp
 4003e0c:	dfc00117 	ldw	ra,4(sp)
 4003e10:	df000017 	ldw	fp,0(sp)
 4003e14:	dec00204 	addi	sp,sp,8
 4003e18:	f800283a 	ret

04003e1c <_ZN10W5100Class12getIPAddressEPh>:
  inline void getIPAddress(uint8_t * addr) { readSIPR(addr); }
 4003e1c:	defffc04 	addi	sp,sp,-16
 4003e20:	dfc00315 	stw	ra,12(sp)
 4003e24:	df000215 	stw	fp,8(sp)
 4003e28:	df000204 	addi	fp,sp,8
 4003e2c:	e13ffe15 	stw	r4,-8(fp)
 4003e30:	e17fff15 	stw	r5,-4(fp)
 4003e34:	e13fff17 	ldw	r4,-4(fp)
 4003e38:	40040a80 	call	40040a8 <_ZN10W5100Class8readSIPREPh>
 4003e3c:	0001883a 	nop
 4003e40:	e037883a 	mov	sp,fp
 4003e44:	dfc00117 	ldw	ra,4(sp)
 4003e48:	df000017 	ldw	fp,0(sp)
 4003e4c:	dec00204 	addi	sp,sp,8
 4003e50:	f800283a 	ret

04003e54 <_ZN10W5100Class21setRetransmissionTimeEt>:

  inline void setRetransmissionTime(uint16_t timeout) { writeRTR(timeout); }
 4003e54:	defffc04 	addi	sp,sp,-16
 4003e58:	dfc00315 	stw	ra,12(sp)
 4003e5c:	df000215 	stw	fp,8(sp)
 4003e60:	df000204 	addi	fp,sp,8
 4003e64:	e13ffe15 	stw	r4,-8(fp)
 4003e68:	2805883a 	mov	r2,r5
 4003e6c:	e0bfff0d 	sth	r2,-4(fp)
 4003e70:	e0bfff0b 	ldhu	r2,-4(fp)
 4003e74:	1009883a 	mov	r4,r2
 4003e78:	40040e00 	call	40040e0 <_ZN10W5100Class8writeRTREt>
 4003e7c:	0001883a 	nop
 4003e80:	e037883a 	mov	sp,fp
 4003e84:	dfc00117 	ldw	ra,4(sp)
 4003e88:	df000017 	ldw	fp,0(sp)
 4003e8c:	dec00204 	addi	sp,sp,8
 4003e90:	f800283a 	ret

04003e94 <_ZN10W5100Class22setRetransmissionCountEh>:
  inline void setRetransmissionCount(uint8_t retry) { writeRCR(retry); }
 4003e94:	defffc04 	addi	sp,sp,-16
 4003e98:	dfc00315 	stw	ra,12(sp)
 4003e9c:	df000215 	stw	fp,8(sp)
 4003ea0:	df000204 	addi	fp,sp,8
 4003ea4:	e13ffe15 	stw	r4,-8(fp)
 4003ea8:	2805883a 	mov	r2,r5
 4003eac:	e0bfff05 	stb	r2,-4(fp)
 4003eb0:	e0bfff03 	ldbu	r2,-4(fp)
 4003eb4:	1009883a 	mov	r4,r2
 4003eb8:	40041340 	call	4004134 <_ZN10W5100Class8writeRCREh>
 4003ebc:	0001883a 	nop
 4003ec0:	e037883a 	mov	sp,fp
 4003ec4:	dfc00117 	ldw	ra,4(sp)
 4003ec8:	df000017 	ldw	fp,0(sp)
 4003ecc:	dec00204 	addi	sp,sp,8
 4003ed0:	f800283a 	ret

04003ed4 <_ZN10W5100Class5writeEth>:
  // W5100 Registers
  // ---------------
//private:
public:
  static uint16_t write(uint16_t addr, const uint8_t *buf, uint16_t len);
  static uint8_t write(uint16_t addr, uint8_t data) {
 4003ed4:	defffc04 	addi	sp,sp,-16
 4003ed8:	dfc00315 	stw	ra,12(sp)
 4003edc:	df000215 	stw	fp,8(sp)
 4003ee0:	df000204 	addi	fp,sp,8
 4003ee4:	2007883a 	mov	r3,r4
 4003ee8:	2805883a 	mov	r2,r5
 4003eec:	e0fffe0d 	sth	r3,-8(fp)
 4003ef0:	e0bfff05 	stb	r2,-4(fp)
    return write(addr, &data, 1);
 4003ef4:	e0bffe0b 	ldhu	r2,-8(fp)
 4003ef8:	e0ffff04 	addi	r3,fp,-4
 4003efc:	01800044 	movi	r6,1
 4003f00:	180b883a 	mov	r5,r3
 4003f04:	1009883a 	mov	r4,r2
 4003f08:	400856c0 	call	400856c <_ZN10W5100Class5writeEtPKht>
  }
 4003f0c:	e037883a 	mov	sp,fp
 4003f10:	dfc00117 	ldw	ra,4(sp)
 4003f14:	df000017 	ldw	fp,0(sp)
 4003f18:	dec00204 	addi	sp,sp,8
 4003f1c:	f800283a 	ret

04003f20 <_ZN10W5100Class8writeGAREPKh>:
  }
  static W5100Linkstatus getLinkStatus();

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
 4003f20:	defffd04 	addi	sp,sp,-12
 4003f24:	dfc00215 	stw	ra,8(sp)
 4003f28:	df000115 	stw	fp,4(sp)
 4003f2c:	df000104 	addi	fp,sp,4
 4003f30:	e13fff15 	stw	r4,-4(fp)
 4003f34:	01800104 	movi	r6,4
 4003f38:	e17fff17 	ldw	r5,-4(fp)
 4003f3c:	01000044 	movi	r4,1
 4003f40:	400856c0 	call	400856c <_ZN10W5100Class5writeEtPKht>
 4003f44:	e037883a 	mov	sp,fp
 4003f48:	dfc00117 	ldw	ra,4(sp)
 4003f4c:	df000017 	ldw	fp,0(sp)
 4003f50:	dec00204 	addi	sp,sp,8
 4003f54:	f800283a 	ret

04003f58 <_ZN10W5100Class7readGAREPh>:
 4003f58:	defffd04 	addi	sp,sp,-12
 4003f5c:	dfc00215 	stw	ra,8(sp)
 4003f60:	df000115 	stw	fp,4(sp)
 4003f64:	df000104 	addi	fp,sp,4
 4003f68:	e13fff15 	stw	r4,-4(fp)
 4003f6c:	01800104 	movi	r6,4
 4003f70:	e17fff17 	ldw	r5,-4(fp)
 4003f74:	01000044 	movi	r4,1
 4003f78:	40087100 	call	4008710 <_ZN10W5100Class4readEtPht>
 4003f7c:	e037883a 	mov	sp,fp
 4003f80:	dfc00117 	ldw	ra,4(sp)
 4003f84:	df000017 	ldw	fp,0(sp)
 4003f88:	dec00204 	addi	sp,sp,8
 4003f8c:	f800283a 	ret

04003f90 <_ZN10W5100Class9writeSUBREPKh>:
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
 4003f90:	defffd04 	addi	sp,sp,-12
 4003f94:	dfc00215 	stw	ra,8(sp)
 4003f98:	df000115 	stw	fp,4(sp)
 4003f9c:	df000104 	addi	fp,sp,4
 4003fa0:	e13fff15 	stw	r4,-4(fp)
 4003fa4:	01800104 	movi	r6,4
 4003fa8:	e17fff17 	ldw	r5,-4(fp)
 4003fac:	01000144 	movi	r4,5
 4003fb0:	400856c0 	call	400856c <_ZN10W5100Class5writeEtPKht>
 4003fb4:	e037883a 	mov	sp,fp
 4003fb8:	dfc00117 	ldw	ra,4(sp)
 4003fbc:	df000017 	ldw	fp,0(sp)
 4003fc0:	dec00204 	addi	sp,sp,8
 4003fc4:	f800283a 	ret

04003fc8 <_ZN10W5100Class8readSUBREPh>:
 4003fc8:	defffd04 	addi	sp,sp,-12
 4003fcc:	dfc00215 	stw	ra,8(sp)
 4003fd0:	df000115 	stw	fp,4(sp)
 4003fd4:	df000104 	addi	fp,sp,4
 4003fd8:	e13fff15 	stw	r4,-4(fp)
 4003fdc:	01800104 	movi	r6,4
 4003fe0:	e17fff17 	ldw	r5,-4(fp)
 4003fe4:	01000144 	movi	r4,5
 4003fe8:	40087100 	call	4008710 <_ZN10W5100Class4readEtPht>
 4003fec:	e037883a 	mov	sp,fp
 4003ff0:	dfc00117 	ldw	ra,4(sp)
 4003ff4:	df000017 	ldw	fp,0(sp)
 4003ff8:	dec00204 	addi	sp,sp,8
 4003ffc:	f800283a 	ret

04004000 <_ZN10W5100Class9writeSHAREPKh>:
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
 4004000:	defffd04 	addi	sp,sp,-12
 4004004:	dfc00215 	stw	ra,8(sp)
 4004008:	df000115 	stw	fp,4(sp)
 400400c:	df000104 	addi	fp,sp,4
 4004010:	e13fff15 	stw	r4,-4(fp)
 4004014:	01800184 	movi	r6,6
 4004018:	e17fff17 	ldw	r5,-4(fp)
 400401c:	01000244 	movi	r4,9
 4004020:	400856c0 	call	400856c <_ZN10W5100Class5writeEtPKht>
 4004024:	e037883a 	mov	sp,fp
 4004028:	dfc00117 	ldw	ra,4(sp)
 400402c:	df000017 	ldw	fp,0(sp)
 4004030:	dec00204 	addi	sp,sp,8
 4004034:	f800283a 	ret

04004038 <_ZN10W5100Class8readSHAREPh>:
 4004038:	defffd04 	addi	sp,sp,-12
 400403c:	dfc00215 	stw	ra,8(sp)
 4004040:	df000115 	stw	fp,4(sp)
 4004044:	df000104 	addi	fp,sp,4
 4004048:	e13fff15 	stw	r4,-4(fp)
 400404c:	01800184 	movi	r6,6
 4004050:	e17fff17 	ldw	r5,-4(fp)
 4004054:	01000244 	movi	r4,9
 4004058:	40087100 	call	4008710 <_ZN10W5100Class4readEtPht>
 400405c:	e037883a 	mov	sp,fp
 4004060:	dfc00117 	ldw	ra,4(sp)
 4004064:	df000017 	ldw	fp,0(sp)
 4004068:	dec00204 	addi	sp,sp,8
 400406c:	f800283a 	ret

04004070 <_ZN10W5100Class9writeSIPREPKh>:
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
 4004070:	defffd04 	addi	sp,sp,-12
 4004074:	dfc00215 	stw	ra,8(sp)
 4004078:	df000115 	stw	fp,4(sp)
 400407c:	df000104 	addi	fp,sp,4
 4004080:	e13fff15 	stw	r4,-4(fp)
 4004084:	01800104 	movi	r6,4
 4004088:	e17fff17 	ldw	r5,-4(fp)
 400408c:	010003c4 	movi	r4,15
 4004090:	400856c0 	call	400856c <_ZN10W5100Class5writeEtPKht>
 4004094:	e037883a 	mov	sp,fp
 4004098:	dfc00117 	ldw	ra,4(sp)
 400409c:	df000017 	ldw	fp,0(sp)
 40040a0:	dec00204 	addi	sp,sp,8
 40040a4:	f800283a 	ret

040040a8 <_ZN10W5100Class8readSIPREPh>:
 40040a8:	defffd04 	addi	sp,sp,-12
 40040ac:	dfc00215 	stw	ra,8(sp)
 40040b0:	df000115 	stw	fp,4(sp)
 40040b4:	df000104 	addi	fp,sp,4
 40040b8:	e13fff15 	stw	r4,-4(fp)
 40040bc:	01800104 	movi	r6,4
 40040c0:	e17fff17 	ldw	r5,-4(fp)
 40040c4:	010003c4 	movi	r4,15
 40040c8:	40087100 	call	4008710 <_ZN10W5100Class4readEtPht>
 40040cc:	e037883a 	mov	sp,fp
 40040d0:	dfc00117 	ldw	ra,4(sp)
 40040d4:	df000017 	ldw	fp,0(sp)
 40040d8:	dec00204 	addi	sp,sp,8
 40040dc:	f800283a 	ret

040040e0 <_ZN10W5100Class8writeRTREt>:
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
 40040e0:	defffc04 	addi	sp,sp,-16
 40040e4:	dfc00315 	stw	ra,12(sp)
 40040e8:	df000215 	stw	fp,8(sp)
 40040ec:	df000204 	addi	fp,sp,8
 40040f0:	2005883a 	mov	r2,r4
 40040f4:	e0bfff0d 	sth	r2,-4(fp)
 40040f8:	e0bfff0b 	ldhu	r2,-4(fp)
 40040fc:	1005d23a 	srai	r2,r2,8
 4004100:	e0bffe05 	stb	r2,-8(fp)
 4004104:	e0bfff0b 	ldhu	r2,-4(fp)
 4004108:	e0bffe45 	stb	r2,-7(fp)
 400410c:	01800084 	movi	r6,2
 4004110:	e17ffe04 	addi	r5,fp,-8
 4004114:	010005c4 	movi	r4,23
 4004118:	400856c0 	call	400856c <_ZN10W5100Class5writeEtPKht>
 400411c:	0001883a 	nop
 4004120:	e037883a 	mov	sp,fp
 4004124:	dfc00117 	ldw	ra,4(sp)
 4004128:	df000017 	ldw	fp,0(sp)
 400412c:	dec00204 	addi	sp,sp,8
 4004130:	f800283a 	ret

04004134 <_ZN10W5100Class8writeRCREh>:
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
 4004134:	defffd04 	addi	sp,sp,-12
 4004138:	dfc00215 	stw	ra,8(sp)
 400413c:	df000115 	stw	fp,4(sp)
 4004140:	df000104 	addi	fp,sp,4
 4004144:	2005883a 	mov	r2,r4
 4004148:	e0bfff05 	stb	r2,-4(fp)
 400414c:	e0bfff03 	ldbu	r2,-4(fp)
 4004150:	100b883a 	mov	r5,r2
 4004154:	01000644 	movi	r4,25
 4004158:	4003ed40 	call	4003ed4 <_ZN10W5100Class5writeEth>
 400415c:	0001883a 	nop
 4004160:	e037883a 	mov	sp,fp
 4004164:	dfc00117 	ldw	ra,4(sp)
 4004168:	df000017 	ldw	fp,0(sp)
 400416c:	dec00204 	addi	sp,sp,8
 4004170:	f800283a 	ret

04004174 <_ZN10W5100Class7getChipEv>:
  static uint8_t isW5100(void);
  static uint8_t isW5200(void);
  static uint8_t isW5500(void);

public:
  static uint8_t getChip(void) { return chip; }
 4004174:	deffff04 	addi	sp,sp,-4
 4004178:	df000015 	stw	fp,0(sp)
 400417c:	d839883a 	mov	fp,sp
 4004180:	d092da03 	ldbu	r2,19304(gp)
 4004184:	e037883a 	mov	sp,fp
 4004188:	df000017 	ldw	fp,0(sp)
 400418c:	dec00104 	addi	sp,sp,4
 4004190:	f800283a 	ret

04004194 <_ZN10W5100Class5setSSEh>:

  static bool hasOffsetAddressMapping(void) {
    if (chip == 55) return true;
    return false;
  }
  static void setSS(uint8_t pin) { ss_pin = pin; }
 4004194:	defffe04 	addi	sp,sp,-8
 4004198:	df000115 	stw	fp,4(sp)
 400419c:	df000104 	addi	fp,sp,4
 40041a0:	2005883a 	mov	r2,r4
 40041a4:	e0bfff05 	stb	r2,-4(fp)
 40041a8:	e0bfff03 	ldbu	r2,-4(fp)
 40041ac:	d0a00c85 	stb	r2,-32718(gp)
 40041b0:	0001883a 	nop
 40041b4:	e037883a 	mov	sp,fp
 40041b8:	df000017 	ldw	fp,0(sp)
 40041bc:	dec00104 	addi	sp,sp,4
 40041c0:	f800283a 	ret

040041c4 <_ZN9DhcpClassC1Ev>:
	// TODO: make private when socket allocation moves to EthernetClass
	static uint16_t server_port[MAX_SOCK_NUM];
};


class DhcpClass {
 40041c4:	defffd04 	addi	sp,sp,-12
 40041c8:	dfc00215 	stw	ra,8(sp)
 40041cc:	df000115 	stw	fp,4(sp)
 40041d0:	df000104 	addi	fp,sp,4
 40041d4:	e13fff15 	stw	r4,-4(fp)
 40041d8:	e0bfff17 	ldw	r2,-4(fp)
 40041dc:	10801204 	addi	r2,r2,72
 40041e0:	1009883a 	mov	r4,r2
 40041e4:	4003c300 	call	4003c30 <_ZN11EthernetUDPC1Ev>
 40041e8:	0001883a 	nop
 40041ec:	e037883a 	mov	sp,fp
 40041f0:	dfc00117 	ldw	ra,4(sp)
 40041f4:	df000017 	ldw	fp,0(sp)
 40041f8:	dec00204 	addi	sp,sp,8
 40041fc:	f800283a 	ret

04004200 <_ZN14EthernetClient7connectEPKct>:
#include <string.h>
#include "EthernetClient.h"
#include "utility/w5100.h"

int EthernetClient::connect(const char * host, uint16_t port)
{
 4004200:	defff204 	addi	sp,sp,-56
 4004204:	dfc00d15 	stw	ra,52(sp)
 4004208:	df000c15 	stw	fp,48(sp)
 400420c:	df000c04 	addi	fp,sp,48
 4004210:	e13ffd15 	stw	r4,-12(fp)
 4004214:	e17ffe15 	stw	r5,-8(fp)
 4004218:	3005883a 	mov	r2,r6
 400421c:	e0bfff0d 	sth	r2,-4(fp)
	DNSClient dns; // Look up the host first
 4004220:	e0bff504 	addi	r2,fp,-44
 4004224:	1009883a 	mov	r4,r2
 4004228:	40052500 	call	4005250 <_ZN9DNSClientC1Ev>
	IPAddress remote_addr;
 400422c:	e0bffc04 	addi	r2,fp,-16
 4004230:	1009883a 	mov	r4,r2
 4004234:	4007c9c0 	call	4007c9c <_ZN9IPAddressC1Ev>

	if (_sockindex < MAX_SOCK_NUM) {
 4004238:	e0bffd17 	ldw	r2,-12(fp)
 400423c:	10800103 	ldbu	r2,4(r2)
 4004240:	10803fcc 	andi	r2,r2,255
 4004244:	10800228 	cmpgeui	r2,r2,8
 4004248:	1000111e 	bne	r2,zero,4004290 <_ZN14EthernetClient7connectEPKct+0x90>
		if (Ethernet.socketStatus(_sockindex) != SnSR::CLOSED) {
 400424c:	e0bffd17 	ldw	r2,-12(fp)
 4004250:	10800103 	ldbu	r2,4(r2)
 4004254:	10803fcc 	andi	r2,r2,255
 4004258:	1009883a 	mov	r4,r2
 400425c:	40068780 	call	4006878 <_ZN13EthernetClass12socketStatusEh>
 4004260:	10803fcc 	andi	r2,r2,255
 4004264:	1004c03a 	cmpne	r2,r2,zero
 4004268:	10803fcc 	andi	r2,r2,255
 400426c:	10000526 	beq	r2,zero,4004284 <_ZN14EthernetClient7connectEPKct+0x84>
			Ethernet.socketDisconnect(_sockindex); // TODO: should we call stop()?
 4004270:	e0bffd17 	ldw	r2,-12(fp)
 4004274:	10800103 	ldbu	r2,4(r2)
 4004278:	10803fcc 	andi	r2,r2,255
 400427c:	1009883a 	mov	r4,r2
 4004280:	40069cc0 	call	40069cc <_ZN13EthernetClass16socketDisconnectEh>
		}
		_sockindex = MAX_SOCK_NUM;
 4004284:	e0bffd17 	ldw	r2,-12(fp)
 4004288:	00c00204 	movi	r3,8
 400428c:	10c00105 	stb	r3,4(r2)
	}
	dns.begin(Ethernet.dnsServerIP());
 4004290:	4004efc0 	call	4004efc <_ZN13EthernetClass11dnsServerIPEv>
 4004294:	e0bff415 	stw	r2,-48(fp)
 4004298:	e0bff504 	addi	r2,fp,-44
 400429c:	e17ff404 	addi	r5,fp,-48
 40042a0:	1009883a 	mov	r4,r2
 40042a4:	40026b80 	call	40026b8 <_ZN9DNSClient5beginERK9IPAddress>
	if (!dns.getHostByName(host, remote_addr)) return 0; // TODO: use _timeout
 40042a8:	e0fffc04 	addi	r3,fp,-16
 40042ac:	e0bff504 	addi	r2,fp,-44
 40042b0:	01c4e204 	movi	r7,5000
 40042b4:	180d883a 	mov	r6,r3
 40042b8:	e17ffe17 	ldw	r5,-8(fp)
 40042bc:	1009883a 	mov	r4,r2
 40042c0:	40028300 	call	4002830 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>
 40042c4:	1005003a 	cmpeq	r2,r2,zero
 40042c8:	10803fcc 	andi	r2,r2,255
 40042cc:	10000226 	beq	r2,zero,40042d8 <_ZN14EthernetClient7connectEPKct+0xd8>
 40042d0:	0005883a 	mov	r2,zero
 40042d4:	00000806 	br	40042f8 <_ZN14EthernetClient7connectEPKct+0xf8>
	return connect(remote_addr, port);
 40042d8:	e0bffd17 	ldw	r2,-12(fp)
 40042dc:	10800017 	ldw	r2,0(r2)
 40042e0:	10800017 	ldw	r2,0(r2)
 40042e4:	e0ffff0b 	ldhu	r3,-4(fp)
 40042e8:	180d883a 	mov	r6,r3
 40042ec:	e17ffc17 	ldw	r5,-16(fp)
 40042f0:	e13ffd17 	ldw	r4,-12(fp)
 40042f4:	103ee83a 	callr	r2
}
 40042f8:	e037883a 	mov	sp,fp
 40042fc:	dfc00117 	ldw	ra,4(sp)
 4004300:	df000017 	ldw	fp,0(sp)
 4004304:	dec00204 	addi	sp,sp,8
 4004308:	f800283a 	ret

0400430c <_ZN14EthernetClient7connectE9IPAddresst>:

int EthernetClient::connect(IPAddress ip, uint16_t port)
{
 400430c:	deffe004 	addi	sp,sp,-128
 4004310:	dfc01f15 	stw	ra,124(sp)
 4004314:	df001e15 	stw	fp,120(sp)
 4004318:	ddc01d15 	stw	r23,116(sp)
 400431c:	dd801c15 	stw	r22,112(sp)
 4004320:	dd401b15 	stw	r21,108(sp)
 4004324:	dd001a15 	stw	r20,104(sp)
 4004328:	dcc01915 	stw	r19,100(sp)
 400432c:	dc801815 	stw	r18,96(sp)
 4004330:	dc401715 	stw	r17,92(sp)
 4004334:	dc001615 	stw	r16,88(sp)
 4004338:	df001e04 	addi	fp,sp,120
 400433c:	e13fe615 	stw	r4,-104(fp)
 4004340:	e17fe715 	stw	r5,-100(fp)
 4004344:	3005883a 	mov	r2,r6
 4004348:	e0bfe80d 	sth	r2,-96(fp)
 400434c:	00810074 	movhi	r2,1025
 4004350:	10a72604 	addi	r2,r2,-25448
 4004354:	e0bfef15 	stw	r2,-68(fp)
 4004358:	008100b4 	movhi	r2,1026
 400435c:	10adc804 	addi	r2,r2,-18656
 4004360:	e0bff015 	stw	r2,-64(fp)
 4004364:	e0bff104 	addi	r2,fp,-60
 4004368:	e0ffe204 	addi	r3,fp,-120
 400436c:	10c00015 	stw	r3,0(r2)
 4004370:	00c10034 	movhi	r3,1024
 4004374:	18d16f04 	addi	r3,r3,17852
 4004378:	10c00115 	stw	r3,4(r2)
 400437c:	16c00215 	stw	sp,8(r2)
 4004380:	e0bfe904 	addi	r2,fp,-92
 4004384:	1009883a 	mov	r4,r2
 4004388:	400b40c0 	call	400b40c <_Unwind_SjLj_Register>
	if (_sockindex < MAX_SOCK_NUM) {
 400438c:	e0bfe617 	ldw	r2,-104(fp)
 4004390:	10800103 	ldbu	r2,4(r2)
 4004394:	10803fcc 	andi	r2,r2,255
 4004398:	10800228 	cmpgeui	r2,r2,8
 400439c:	1000131e 	bne	r2,zero,40043ec <_ZN14EthernetClient7connectE9IPAddresst+0xe0>
		if (Ethernet.socketStatus(_sockindex) != SnSR::CLOSED) {
 40043a0:	e0bfe617 	ldw	r2,-104(fp)
 40043a4:	10800103 	ldbu	r2,4(r2)
 40043a8:	10c03fcc 	andi	r3,r2,255
 40043ac:	00bfffc4 	movi	r2,-1
 40043b0:	e0bfea15 	stw	r2,-88(fp)
 40043b4:	1809883a 	mov	r4,r3
 40043b8:	40068780 	call	4006878 <_ZN13EthernetClass12socketStatusEh>
 40043bc:	10803fcc 	andi	r2,r2,255
 40043c0:	1004c03a 	cmpne	r2,r2,zero
 40043c4:	10803fcc 	andi	r2,r2,255
 40043c8:	10000526 	beq	r2,zero,40043e0 <_ZN14EthernetClient7connectE9IPAddresst+0xd4>
			Ethernet.socketDisconnect(_sockindex); // TODO: should we call stop()?
 40043cc:	e0bfe617 	ldw	r2,-104(fp)
 40043d0:	10800103 	ldbu	r2,4(r2)
 40043d4:	10803fcc 	andi	r2,r2,255
 40043d8:	1009883a 	mov	r4,r2
 40043dc:	40069cc0 	call	40069cc <_ZN13EthernetClass16socketDisconnectEh>
		}
		_sockindex = MAX_SOCK_NUM;
 40043e0:	e0bfe617 	ldw	r2,-104(fp)
 40043e4:	00c00204 	movi	r3,8
 40043e8:	10c00105 	stb	r3,4(r2)
	}
#if defined(ESP8266) || defined(ESP32)
	if (ip == IPAddress((uint32_t)0) || ip == IPAddress(0xFFFFFFFFul)) return 0;
#else
	if (ip == IPAddress(0ul) || ip == IPAddress(0xFFFFFFFFul)) return 0;
 40043ec:	e0ffe504 	addi	r3,fp,-108
 40043f0:	00800044 	movi	r2,1
 40043f4:	e0bfea15 	stw	r2,-88(fp)
 40043f8:	000b883a 	mov	r5,zero
 40043fc:	1809883a 	mov	r4,r3
 4004400:	4007d380 	call	4007d38 <_ZN9IPAddressC1Em>
 4004404:	e0ffe504 	addi	r3,fp,-108
 4004408:	e0bfe704 	addi	r2,fp,-100
 400440c:	180b883a 	mov	r5,r3
 4004410:	1009883a 	mov	r4,r2
 4004414:	40026300 	call	4002630 <_ZNK9IPAddresseqERKS_>
 4004418:	10803fcc 	andi	r2,r2,255
 400441c:	10000b1e 	bne	r2,zero,400444c <_ZN14EthernetClient7connectE9IPAddresst+0x140>
 4004420:	e0bfe404 	addi	r2,fp,-112
 4004424:	017fffc4 	movi	r5,-1
 4004428:	1009883a 	mov	r4,r2
 400442c:	4007d380 	call	4007d38 <_ZN9IPAddressC1Em>
 4004430:	e0ffe404 	addi	r3,fp,-112
 4004434:	e0bfe704 	addi	r2,fp,-100
 4004438:	180b883a 	mov	r5,r3
 400443c:	1009883a 	mov	r4,r2
 4004440:	40026300 	call	4002630 <_ZNK9IPAddresseqERKS_>
 4004444:	10803fcc 	andi	r2,r2,255
 4004448:	10000226 	beq	r2,zero,4004454 <_ZN14EthernetClient7connectE9IPAddresst+0x148>
 400444c:	00800044 	movi	r2,1
 4004450:	00000106 	br	4004458 <_ZN14EthernetClient7connectE9IPAddresst+0x14c>
 4004454:	0005883a 	mov	r2,zero
 4004458:	10803fcc 	andi	r2,r2,255
 400445c:	10000226 	beq	r2,zero,4004468 <_ZN14EthernetClient7connectE9IPAddresst+0x15c>
 4004460:	0005883a 	mov	r2,zero
 4004464:	00005306 	br	40045b4 <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
#endif
	_sockindex = Ethernet.socketBegin(SnMR::TCP, 0);
 4004468:	00bfffc4 	movi	r2,-1
 400446c:	e0bfea15 	stw	r2,-88(fp)
 4004470:	000b883a 	mov	r5,zero
 4004474:	01000844 	movi	r4,33
 4004478:	400628c0 	call	400628c <_ZN13EthernetClass11socketBeginEht>
 400447c:	1007883a 	mov	r3,r2
 4004480:	e0bfe617 	ldw	r2,-104(fp)
 4004484:	10c00105 	stb	r3,4(r2)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004488:	e0bfe617 	ldw	r2,-104(fp)
 400448c:	10800103 	ldbu	r2,4(r2)
 4004490:	10803fcc 	andi	r2,r2,255
 4004494:	10800230 	cmpltui	r2,r2,8
 4004498:	1000021e 	bne	r2,zero,40044a4 <_ZN14EthernetClient7connectE9IPAddresst+0x198>
 400449c:	0005883a 	mov	r2,zero
 40044a0:	00004406 	br	40045b4 <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
	Ethernet.socketConnect(_sockindex, rawIPAddress(ip), port);
 40044a4:	e0bfe617 	ldw	r2,-104(fp)
 40044a8:	10800103 	ldbu	r2,4(r2)
 40044ac:	10803fcc 	andi	r2,r2,255
 40044b0:	e0bff615 	stw	r2,-40(fp)
 40044b4:	e0bfe617 	ldw	r2,-104(fp)
 40044b8:	e0ffe704 	addi	r3,fp,-100
 40044bc:	180b883a 	mov	r5,r3
 40044c0:	1009883a 	mov	r4,r2
 40044c4:	4004ec80 	call	4004ec8 <_ZN6Client12rawIPAddressER9IPAddress>
 40044c8:	1009883a 	mov	r4,r2
 40044cc:	e0ffe80b 	ldhu	r3,-96(fp)
 40044d0:	00bfffc4 	movi	r2,-1
 40044d4:	e0bfea15 	stw	r2,-88(fp)
 40044d8:	180d883a 	mov	r6,r3
 40044dc:	200b883a 	mov	r5,r4
 40044e0:	e13ff617 	ldw	r4,-40(fp)
 40044e4:	400695c0 	call	400695c <_ZN13EthernetClass13socketConnectEhPht>
	uint32_t start = clock();
 40044e8:	400b73c0 	call	400b73c <clock>
 40044ec:	e0bfe215 	stw	r2,-120(fp)
	while (1) {
		uint8_t stat = Ethernet.socketStatus(_sockindex);
 40044f0:	e0bfe617 	ldw	r2,-104(fp)
 40044f4:	10800103 	ldbu	r2,4(r2)
 40044f8:	10c03fcc 	andi	r3,r2,255
 40044fc:	00bfffc4 	movi	r2,-1
 4004500:	e0bfea15 	stw	r2,-88(fp)
 4004504:	1809883a 	mov	r4,r3
 4004508:	40068780 	call	4006878 <_ZN13EthernetClass12socketStatusEh>
 400450c:	e0bfe305 	stb	r2,-116(fp)
		if (stat == SnSR::ESTABLISHED) return 1;
 4004510:	e0bfe303 	ldbu	r2,-116(fp)
 4004514:	108005d8 	cmpnei	r2,r2,23
 4004518:	1000021e 	bne	r2,zero,4004524 <_ZN14EthernetClient7connectE9IPAddresst+0x218>
 400451c:	00800044 	movi	r2,1
 4004520:	00002406 	br	40045b4 <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
		if (stat == SnSR::CLOSE_WAIT) return 1;
 4004524:	e0bfe303 	ldbu	r2,-116(fp)
 4004528:	10800718 	cmpnei	r2,r2,28
 400452c:	1000021e 	bne	r2,zero,4004538 <_ZN14EthernetClient7connectE9IPAddresst+0x22c>
 4004530:	00800044 	movi	r2,1
 4004534:	00001f06 	br	40045b4 <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
		if (stat == SnSR::CLOSED) return 0;
 4004538:	e0bfe303 	ldbu	r2,-116(fp)
 400453c:	1000021e 	bne	r2,zero,4004548 <_ZN14EthernetClient7connectE9IPAddresst+0x23c>
 4004540:	0005883a 	mov	r2,zero
 4004544:	00001b06 	br	40045b4 <_ZN14EthernetClient7connectE9IPAddresst+0x2a8>
		if (clock() - start > _timeout) break;
 4004548:	400b73c0 	call	400b73c <clock>
 400454c:	1007883a 	mov	r3,r2
 4004550:	e0bfe217 	ldw	r2,-120(fp)
 4004554:	1885c83a 	sub	r2,r3,r2
 4004558:	e0ffe617 	ldw	r3,-104(fp)
 400455c:	18c0018b 	ldhu	r3,6(r3)
 4004560:	18ffffcc 	andi	r3,r3,65535
 4004564:	1885803a 	cmpltu	r2,r3,r2
 4004568:	10803fcc 	andi	r2,r2,255
 400456c:	1000051e 	bne	r2,zero,4004584 <_ZN14EthernetClient7connectE9IPAddresst+0x278>
		usleep(1000);
 4004570:	00bfffc4 	movi	r2,-1
 4004574:	e0bfea15 	stw	r2,-88(fp)
 4004578:	0100fa04 	movi	r4,1000
 400457c:	40194f00 	call	40194f0 <usleep>
#endif
	_sockindex = Ethernet.socketBegin(SnMR::TCP, 0);
	if (_sockindex >= MAX_SOCK_NUM) return 0;
	Ethernet.socketConnect(_sockindex, rawIPAddress(ip), port);
	uint32_t start = clock();
	while (1) {
 4004580:	003fdb06 	br	40044f0 <__alt_data_end+0xfc0044f0>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
		if (stat == SnSR::ESTABLISHED) return 1;
		if (stat == SnSR::CLOSE_WAIT) return 1;
		if (stat == SnSR::CLOSED) return 0;
		if (clock() - start > _timeout) break;
 4004584:	0001883a 	nop
		usleep(1000);
	}
	Ethernet.socketClose(_sockindex);
 4004588:	e0bfe617 	ldw	r2,-104(fp)
 400458c:	10800103 	ldbu	r2,4(r2)
 4004590:	10c03fcc 	andi	r3,r2,255
 4004594:	00bfffc4 	movi	r2,-1
 4004598:	e0bfea15 	stw	r2,-88(fp)
 400459c:	1809883a 	mov	r4,r3
 40045a0:	40068b80 	call	40068b8 <_ZN13EthernetClass11socketCloseEh>
	_sockindex = MAX_SOCK_NUM;
 40045a4:	e0bfe617 	ldw	r2,-104(fp)
 40045a8:	00c00204 	movi	r3,8
 40045ac:	10c00105 	stb	r3,4(r2)
	return 0;
 40045b0:	0005883a 	mov	r2,zero
 40045b4:	e0bff715 	stw	r2,-36(fp)
 40045b8:	00000806 	br	40045dc <_ZN14EthernetClient7connectE9IPAddresst+0x2d0>
 40045bc:	e7001e04 	addi	fp,fp,120
 40045c0:	e0bfeb17 	ldw	r2,-84(fp)
		_sockindex = MAX_SOCK_NUM;
	}
#if defined(ESP8266) || defined(ESP32)
	if (ip == IPAddress((uint32_t)0) || ip == IPAddress(0xFFFFFFFFul)) return 0;
#else
	if (ip == IPAddress(0ul) || ip == IPAddress(0xFFFFFFFFul)) return 0;
 40045c4:	0001883a 	nop
 40045c8:	1007883a 	mov	r3,r2
 40045cc:	00bfffc4 	movi	r2,-1
 40045d0:	e0bfea15 	stw	r2,-88(fp)
 40045d4:	1809883a 	mov	r4,r3
 40045d8:	400b6080 	call	400b608 <_Unwind_SjLj_Resume>
 40045dc:	e0bfe904 	addi	r2,fp,-92
 40045e0:	1009883a 	mov	r4,r2
 40045e4:	400b4240 	call	400b424 <_Unwind_SjLj_Unregister>
		usleep(1000);
	}
	Ethernet.socketClose(_sockindex);
	_sockindex = MAX_SOCK_NUM;
	return 0;
}
 40045e8:	e0bff717 	ldw	r2,-36(fp)
 40045ec:	e6fff804 	addi	sp,fp,-32
 40045f0:	dfc00917 	ldw	ra,36(sp)
 40045f4:	df000817 	ldw	fp,32(sp)
 40045f8:	ddc00717 	ldw	r23,28(sp)
 40045fc:	dd800617 	ldw	r22,24(sp)
 4004600:	dd400517 	ldw	r21,20(sp)
 4004604:	dd000417 	ldw	r20,16(sp)
 4004608:	dcc00317 	ldw	r19,12(sp)
 400460c:	dc800217 	ldw	r18,8(sp)
 4004610:	dc400117 	ldw	r17,4(sp)
 4004614:	dc000017 	ldw	r16,0(sp)
 4004618:	dec00a04 	addi	sp,sp,40
 400461c:	f800283a 	ret

04004620 <_ZN14EthernetClient17availableForWriteEv>:

int EthernetClient::availableForWrite(void)
{
 4004620:	defffd04 	addi	sp,sp,-12
 4004624:	dfc00215 	stw	ra,8(sp)
 4004628:	df000115 	stw	fp,4(sp)
 400462c:	df000104 	addi	fp,sp,4
 4004630:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004634:	e0bfff17 	ldw	r2,-4(fp)
 4004638:	10800103 	ldbu	r2,4(r2)
 400463c:	10803fcc 	andi	r2,r2,255
 4004640:	10800230 	cmpltui	r2,r2,8
 4004644:	1000021e 	bne	r2,zero,4004650 <_ZN14EthernetClient17availableForWriteEv+0x30>
 4004648:	0005883a 	mov	r2,zero
 400464c:	00000606 	br	4004668 <_ZN14EthernetClient17availableForWriteEv+0x48>
	return Ethernet.socketSendAvailable(_sockindex);
 4004650:	e0bfff17 	ldw	r2,-4(fp)
 4004654:	10800103 	ldbu	r2,4(r2)
 4004658:	10803fcc 	andi	r2,r2,255
 400465c:	1009883a 	mov	r4,r2
 4004660:	40072880 	call	4007288 <_ZN13EthernetClass19socketSendAvailableEh>
 4004664:	10bfffcc 	andi	r2,r2,65535
}
 4004668:	e037883a 	mov	sp,fp
 400466c:	dfc00117 	ldw	ra,4(sp)
 4004670:	df000017 	ldw	fp,0(sp)
 4004674:	dec00204 	addi	sp,sp,8
 4004678:	f800283a 	ret

0400467c <_ZN14EthernetClient5writeEh>:

size_t EthernetClient::write(uint8_t b)
{
 400467c:	defffc04 	addi	sp,sp,-16
 4004680:	dfc00315 	stw	ra,12(sp)
 4004684:	df000215 	stw	fp,8(sp)
 4004688:	df000204 	addi	fp,sp,8
 400468c:	e13ffe15 	stw	r4,-8(fp)
 4004690:	2805883a 	mov	r2,r5
 4004694:	e0bfff05 	stb	r2,-4(fp)
	return write(&b, 1);
 4004698:	e0bffe17 	ldw	r2,-8(fp)
 400469c:	10800017 	ldw	r2,0(r2)
 40046a0:	10800304 	addi	r2,r2,12
 40046a4:	10800017 	ldw	r2,0(r2)
 40046a8:	e0ffff04 	addi	r3,fp,-4
 40046ac:	01800044 	movi	r6,1
 40046b0:	180b883a 	mov	r5,r3
 40046b4:	e13ffe17 	ldw	r4,-8(fp)
 40046b8:	103ee83a 	callr	r2
}
 40046bc:	e037883a 	mov	sp,fp
 40046c0:	dfc00117 	ldw	ra,4(sp)
 40046c4:	df000017 	ldw	fp,0(sp)
 40046c8:	dec00204 	addi	sp,sp,8
 40046cc:	f800283a 	ret

040046d0 <_ZN14EthernetClient5writeEPKhj>:

size_t EthernetClient::write(const uint8_t *buf, size_t size)
{
 40046d0:	defffb04 	addi	sp,sp,-20
 40046d4:	dfc00415 	stw	ra,16(sp)
 40046d8:	df000315 	stw	fp,12(sp)
 40046dc:	df000304 	addi	fp,sp,12
 40046e0:	e13ffd15 	stw	r4,-12(fp)
 40046e4:	e17ffe15 	stw	r5,-8(fp)
 40046e8:	e1bfff15 	stw	r6,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 40046ec:	e0bffd17 	ldw	r2,-12(fp)
 40046f0:	10800103 	ldbu	r2,4(r2)
 40046f4:	10803fcc 	andi	r2,r2,255
 40046f8:	10800230 	cmpltui	r2,r2,8
 40046fc:	1000021e 	bne	r2,zero,4004708 <_ZN14EthernetClient5writeEPKhj+0x38>
 4004700:	0005883a 	mov	r2,zero
 4004704:	00001006 	br	4004748 <_ZN14EthernetClient5writeEPKhj+0x78>
	if (Ethernet.socketSend(_sockindex, buf, size)) return size;
 4004708:	e0bffd17 	ldw	r2,-12(fp)
 400470c:	10800103 	ldbu	r2,4(r2)
 4004710:	10c03fcc 	andi	r3,r2,255
 4004714:	e0bfff17 	ldw	r2,-4(fp)
 4004718:	10bfffcc 	andi	r2,r2,65535
 400471c:	100d883a 	mov	r6,r2
 4004720:	e17ffe17 	ldw	r5,-8(fp)
 4004724:	1809883a 	mov	r4,r3
 4004728:	40071500 	call	4007150 <_ZN13EthernetClass10socketSendEhPKht>
 400472c:	10bfffcc 	andi	r2,r2,65535
 4004730:	1004c03a 	cmpne	r2,r2,zero
 4004734:	10803fcc 	andi	r2,r2,255
 4004738:	10000226 	beq	r2,zero,4004744 <_ZN14EthernetClient5writeEPKhj+0x74>
 400473c:	e0bfff17 	ldw	r2,-4(fp)
 4004740:	00000106 	br	4004748 <_ZN14EthernetClient5writeEPKhj+0x78>
	// setWriteError();
	return 0;
 4004744:	0005883a 	mov	r2,zero
}
 4004748:	e037883a 	mov	sp,fp
 400474c:	dfc00117 	ldw	ra,4(sp)
 4004750:	df000017 	ldw	fp,0(sp)
 4004754:	dec00204 	addi	sp,sp,8
 4004758:	f800283a 	ret

0400475c <_ZN14EthernetClient7printlnEv>:

size_t EthernetClient::println()
{
 400475c:	defffd04 	addi	sp,sp,-12
 4004760:	dfc00215 	stw	ra,8(sp)
 4004764:	df000115 	stw	fp,4(sp)
 4004768:	df000104 	addi	fp,sp,4
 400476c:	e13fff15 	stw	r4,-4(fp)
	return println("\n");
 4004770:	e0bfff17 	ldw	r2,-4(fp)
 4004774:	10800017 	ldw	r2,0(r2)
 4004778:	10801004 	addi	r2,r2,64
 400477c:	10800017 	ldw	r2,0(r2)
 4004780:	014100b4 	movhi	r5,1026
 4004784:	29728704 	addi	r5,r5,-13796
 4004788:	e13fff17 	ldw	r4,-4(fp)
 400478c:	103ee83a 	callr	r2
}
 4004790:	e037883a 	mov	sp,fp
 4004794:	dfc00117 	ldw	ra,4(sp)
 4004798:	df000017 	ldw	fp,0(sp)
 400479c:	dec00204 	addi	sp,sp,8
 40047a0:	f800283a 	ret

040047a4 <_ZN14EthernetClient7printlnEPKc>:

size_t EthernetClient::println(const char *buf)
{
 40047a4:	defffb04 	addi	sp,sp,-20
 40047a8:	dfc00415 	stw	ra,16(sp)
 40047ac:	df000315 	stw	fp,12(sp)
 40047b0:	df000304 	addi	fp,sp,12
 40047b4:	e13ffe15 	stw	r4,-8(fp)
 40047b8:	e17fff15 	stw	r5,-4(fp)
	size_t len = strlen(buf);
 40047bc:	e13fff17 	ldw	r4,-4(fp)
 40047c0:	400c83c0 	call	400c83c <strlen>
 40047c4:	e0bffd15 	stw	r2,-12(fp)
	write((uint8_t*)buf, len);
 40047c8:	e0bffe17 	ldw	r2,-8(fp)
 40047cc:	10800017 	ldw	r2,0(r2)
 40047d0:	10800304 	addi	r2,r2,12
 40047d4:	10800017 	ldw	r2,0(r2)
 40047d8:	e1bffd17 	ldw	r6,-12(fp)
 40047dc:	e17fff17 	ldw	r5,-4(fp)
 40047e0:	e13ffe17 	ldw	r4,-8(fp)
 40047e4:	103ee83a 	callr	r2
	write((uint8_t*)"\n", 1);
 40047e8:	e0bffe17 	ldw	r2,-8(fp)
 40047ec:	10800017 	ldw	r2,0(r2)
 40047f0:	10800304 	addi	r2,r2,12
 40047f4:	10800017 	ldw	r2,0(r2)
 40047f8:	01800044 	movi	r6,1
 40047fc:	014100b4 	movhi	r5,1026
 4004800:	29728704 	addi	r5,r5,-13796
 4004804:	e13ffe17 	ldw	r4,-8(fp)
 4004808:	103ee83a 	callr	r2
	return 0;
 400480c:	0005883a 	mov	r2,zero
}
 4004810:	e037883a 	mov	sp,fp
 4004814:	dfc00117 	ldw	ra,4(sp)
 4004818:	df000017 	ldw	fp,0(sp)
 400481c:	dec00204 	addi	sp,sp,8
 4004820:	f800283a 	ret

04004824 <_ZN14EthernetClient9availableEv>:

int EthernetClient::available()
{
 4004824:	defffd04 	addi	sp,sp,-12
 4004828:	dfc00215 	stw	ra,8(sp)
 400482c:	df000115 	stw	fp,4(sp)
 4004830:	df000104 	addi	fp,sp,4
 4004834:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004838:	e0bfff17 	ldw	r2,-4(fp)
 400483c:	10800103 	ldbu	r2,4(r2)
 4004840:	10803fcc 	andi	r2,r2,255
 4004844:	10800230 	cmpltui	r2,r2,8
 4004848:	1000021e 	bne	r2,zero,4004854 <_ZN14EthernetClient9availableEv+0x30>
 400484c:	0005883a 	mov	r2,zero
 4004850:	00000606 	br	400486c <_ZN14EthernetClient9availableEv+0x48>
	return Ethernet.socketRecvAvailable(_sockindex);
 4004854:	e0bfff17 	ldw	r2,-4(fp)
 4004858:	10800103 	ldbu	r2,4(r2)
 400485c:	10803fcc 	andi	r2,r2,255
 4004860:	1009883a 	mov	r4,r2
 4004864:	4006e340 	call	4006e34 <_ZN13EthernetClass19socketRecvAvailableEh>
 4004868:	10bfffcc 	andi	r2,r2,65535
	// packets if they are lost by the network?  Someday this should
	// be checked by a man-in-the-middle test which discards certain
	// packets.  If ACKs aren't resent, we would need to check for
	// returning 0 here and after a timeout do another Sock_RECV
	// command to cause the WIZnet chip to resend the ACK packet.
}
 400486c:	e037883a 	mov	sp,fp
 4004870:	dfc00117 	ldw	ra,4(sp)
 4004874:	df000017 	ldw	fp,0(sp)
 4004878:	dec00204 	addi	sp,sp,8
 400487c:	f800283a 	ret

04004880 <_ZN14EthernetClient4readEPhj>:

int EthernetClient::read(uint8_t *buf, size_t size)
{
 4004880:	defffb04 	addi	sp,sp,-20
 4004884:	dfc00415 	stw	ra,16(sp)
 4004888:	df000315 	stw	fp,12(sp)
 400488c:	df000304 	addi	fp,sp,12
 4004890:	e13ffd15 	stw	r4,-12(fp)
 4004894:	e17ffe15 	stw	r5,-8(fp)
 4004898:	e1bfff15 	stw	r6,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 400489c:	e0bffd17 	ldw	r2,-12(fp)
 40048a0:	10800103 	ldbu	r2,4(r2)
 40048a4:	10803fcc 	andi	r2,r2,255
 40048a8:	10800230 	cmpltui	r2,r2,8
 40048ac:	1000021e 	bne	r2,zero,40048b8 <_ZN14EthernetClient4readEPhj+0x38>
 40048b0:	0005883a 	mov	r2,zero
 40048b4:	00000b06 	br	40048e4 <_ZN14EthernetClient4readEPhj+0x64>
	return Ethernet.socketRecv(_sockindex, buf, size);
 40048b8:	e0bffd17 	ldw	r2,-12(fp)
 40048bc:	10800103 	ldbu	r2,4(r2)
 40048c0:	10803fcc 	andi	r2,r2,255
 40048c4:	e0ffff17 	ldw	r3,-4(fp)
 40048c8:	18ffffcc 	andi	r3,r3,65535
 40048cc:	18e0001c 	xori	r3,r3,32768
 40048d0:	18e00004 	addi	r3,r3,-32768
 40048d4:	180d883a 	mov	r6,r3
 40048d8:	e17ffe17 	ldw	r5,-8(fp)
 40048dc:	1009883a 	mov	r4,r2
 40048e0:	4006b940 	call	4006b94 <_ZN13EthernetClass10socketRecvEhPhs>
}
 40048e4:	e037883a 	mov	sp,fp
 40048e8:	dfc00117 	ldw	ra,4(sp)
 40048ec:	df000017 	ldw	fp,0(sp)
 40048f0:	dec00204 	addi	sp,sp,8
 40048f4:	f800283a 	ret

040048f8 <_ZN14EthernetClient4peekEv>:

int EthernetClient::peek()
{
 40048f8:	defffd04 	addi	sp,sp,-12
 40048fc:	dfc00215 	stw	ra,8(sp)
 4004900:	df000115 	stw	fp,4(sp)
 4004904:	df000104 	addi	fp,sp,4
 4004908:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return -1;
 400490c:	e0bfff17 	ldw	r2,-4(fp)
 4004910:	10800103 	ldbu	r2,4(r2)
 4004914:	10803fcc 	andi	r2,r2,255
 4004918:	10800230 	cmpltui	r2,r2,8
 400491c:	1000021e 	bne	r2,zero,4004928 <_ZN14EthernetClient4peekEv+0x30>
 4004920:	00bfffc4 	movi	r2,-1
 4004924:	00001106 	br	400496c <_ZN14EthernetClient4peekEv+0x74>
	if (!available()) return -1;
 4004928:	e0bfff17 	ldw	r2,-4(fp)
 400492c:	10800017 	ldw	r2,0(r2)
 4004930:	10800404 	addi	r2,r2,16
 4004934:	10800017 	ldw	r2,0(r2)
 4004938:	e13fff17 	ldw	r4,-4(fp)
 400493c:	103ee83a 	callr	r2
 4004940:	1005003a 	cmpeq	r2,r2,zero
 4004944:	10803fcc 	andi	r2,r2,255
 4004948:	10000226 	beq	r2,zero,4004954 <_ZN14EthernetClient4peekEv+0x5c>
 400494c:	00bfffc4 	movi	r2,-1
 4004950:	00000606 	br	400496c <_ZN14EthernetClient4peekEv+0x74>
	return Ethernet.socketPeek(_sockindex);
 4004954:	e0bfff17 	ldw	r2,-4(fp)
 4004958:	10800103 	ldbu	r2,4(r2)
 400495c:	10803fcc 	andi	r2,r2,255
 4004960:	1009883a 	mov	r4,r2
 4004964:	4006ee00 	call	4006ee0 <_ZN13EthernetClass10socketPeekEh>
 4004968:	10803fcc 	andi	r2,r2,255
}
 400496c:	e037883a 	mov	sp,fp
 4004970:	dfc00117 	ldw	ra,4(sp)
 4004974:	df000017 	ldw	fp,0(sp)
 4004978:	dec00204 	addi	sp,sp,8
 400497c:	f800283a 	ret

04004980 <_ZN14EthernetClient4readEv>:

int EthernetClient::read()
{
 4004980:	defffc04 	addi	sp,sp,-16
 4004984:	dfc00315 	stw	ra,12(sp)
 4004988:	df000215 	stw	fp,8(sp)
 400498c:	df000204 	addi	fp,sp,8
 4004990:	e13fff15 	stw	r4,-4(fp)
	uint8_t b;
	if (Ethernet.socketRecv(_sockindex, &b, 1) > 0) return b;
 4004994:	e0bfff17 	ldw	r2,-4(fp)
 4004998:	10800103 	ldbu	r2,4(r2)
 400499c:	10803fcc 	andi	r2,r2,255
 40049a0:	01800044 	movi	r6,1
 40049a4:	e17ffe04 	addi	r5,fp,-8
 40049a8:	1009883a 	mov	r4,r2
 40049ac:	4006b940 	call	4006b94 <_ZN13EthernetClass10socketRecvEhPhs>
 40049b0:	0084803a 	cmplt	r2,zero,r2
 40049b4:	10803fcc 	andi	r2,r2,255
 40049b8:	10000326 	beq	r2,zero,40049c8 <_ZN14EthernetClient4readEv+0x48>
 40049bc:	e0bffe03 	ldbu	r2,-8(fp)
 40049c0:	10803fcc 	andi	r2,r2,255
 40049c4:	00000106 	br	40049cc <_ZN14EthernetClient4readEv+0x4c>
	return -1;
 40049c8:	00bfffc4 	movi	r2,-1
}
 40049cc:	e037883a 	mov	sp,fp
 40049d0:	dfc00117 	ldw	ra,4(sp)
 40049d4:	df000017 	ldw	fp,0(sp)
 40049d8:	dec00204 	addi	sp,sp,8
 40049dc:	f800283a 	ret

040049e0 <_ZN14EthernetClient5flushEv>:

void EthernetClient::flush()
{
 40049e0:	defffc04 	addi	sp,sp,-16
 40049e4:	dfc00315 	stw	ra,12(sp)
 40049e8:	df000215 	stw	fp,8(sp)
 40049ec:	df000204 	addi	fp,sp,8
 40049f0:	e13fff15 	stw	r4,-4(fp)
	while (_sockindex < MAX_SOCK_NUM) {
 40049f4:	e0bfff17 	ldw	r2,-4(fp)
 40049f8:	10800103 	ldbu	r2,4(r2)
 40049fc:	10803fcc 	andi	r2,r2,255
 4004a00:	10800228 	cmpgeui	r2,r2,8
 4004a04:	1000191e 	bne	r2,zero,4004a6c <_ZN14EthernetClient5flushEv+0x8c>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
 4004a08:	e0bfff17 	ldw	r2,-4(fp)
 4004a0c:	10800103 	ldbu	r2,4(r2)
 4004a10:	10803fcc 	andi	r2,r2,255
 4004a14:	1009883a 	mov	r4,r2
 4004a18:	40068780 	call	4006878 <_ZN13EthernetClass12socketStatusEh>
 4004a1c:	e0bffe05 	stb	r2,-8(fp)
		if (stat != SnSR::ESTABLISHED && stat != SnSR::CLOSE_WAIT) return;
 4004a20:	e0bffe03 	ldbu	r2,-8(fp)
 4004a24:	108005e0 	cmpeqi	r2,r2,23
 4004a28:	1000031e 	bne	r2,zero,4004a38 <_ZN14EthernetClient5flushEv+0x58>
 4004a2c:	e0bffe03 	ldbu	r2,-8(fp)
 4004a30:	10800720 	cmpeqi	r2,r2,28
 4004a34:	10000a26 	beq	r2,zero,4004a60 <_ZN14EthernetClient5flushEv+0x80>
		if (Ethernet.socketSendAvailable(_sockindex) >= W5100.SSIZE) return;
 4004a38:	e0bfff17 	ldw	r2,-4(fp)
 4004a3c:	10800103 	ldbu	r2,4(r2)
 4004a40:	10803fcc 	andi	r2,r2,255
 4004a44:	1009883a 	mov	r4,r2
 4004a48:	40072880 	call	4007288 <_ZN13EthernetClass19socketSendAvailableEh>
 4004a4c:	10bfffcc 	andi	r2,r2,65535
 4004a50:	10820028 	cmpgeui	r2,r2,2048
 4004a54:	10803fcc 	andi	r2,r2,255
 4004a58:	1000031e 	bne	r2,zero,4004a68 <_ZN14EthernetClient5flushEv+0x88>
	return -1;
}

void EthernetClient::flush()
{
	while (_sockindex < MAX_SOCK_NUM) {
 4004a5c:	003fe506 	br	40049f4 <__alt_data_end+0xfc0049f4>
		uint8_t stat = Ethernet.socketStatus(_sockindex);
		if (stat != SnSR::ESTABLISHED && stat != SnSR::CLOSE_WAIT) return;
 4004a60:	0001883a 	nop
 4004a64:	00000106 	br	4004a6c <_ZN14EthernetClient5flushEv+0x8c>
		if (Ethernet.socketSendAvailable(_sockindex) >= W5100.SSIZE) return;
 4004a68:	0001883a 	nop
	}
}
 4004a6c:	e037883a 	mov	sp,fp
 4004a70:	dfc00117 	ldw	ra,4(sp)
 4004a74:	df000017 	ldw	fp,0(sp)
 4004a78:	dec00204 	addi	sp,sp,8
 4004a7c:	f800283a 	ret

04004a80 <_ZN14EthernetClient4stopEv>:

void EthernetClient::stop()
{
 4004a80:	defffc04 	addi	sp,sp,-16
 4004a84:	dfc00315 	stw	ra,12(sp)
 4004a88:	df000215 	stw	fp,8(sp)
 4004a8c:	df000204 	addi	fp,sp,8
 4004a90:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return;
 4004a94:	e0bfff17 	ldw	r2,-4(fp)
 4004a98:	10800103 	ldbu	r2,4(r2)
 4004a9c:	10803fcc 	andi	r2,r2,255
 4004aa0:	10800230 	cmpltui	r2,r2,8
 4004aa4:	10002a26 	beq	r2,zero,4004b50 <_ZN14EthernetClient4stopEv+0xd0>

	// attempt to close the connection gracefully (send a FIN to other side)
	Ethernet.socketDisconnect(_sockindex);
 4004aa8:	e0bfff17 	ldw	r2,-4(fp)
 4004aac:	10800103 	ldbu	r2,4(r2)
 4004ab0:	10803fcc 	andi	r2,r2,255
 4004ab4:	1009883a 	mov	r4,r2
 4004ab8:	40069cc0 	call	40069cc <_ZN13EthernetClass16socketDisconnectEh>
	unsigned long start = clock();
 4004abc:	400b73c0 	call	400b73c <clock>
 4004ac0:	e0bffe15 	stw	r2,-8(fp)

	// wait up to a second for the connection to close
	do {
		if (Ethernet.socketStatus(_sockindex) == SnSR::CLOSED) {
 4004ac4:	e0bfff17 	ldw	r2,-4(fp)
 4004ac8:	10800103 	ldbu	r2,4(r2)
 4004acc:	10803fcc 	andi	r2,r2,255
 4004ad0:	1009883a 	mov	r4,r2
 4004ad4:	40068780 	call	4006878 <_ZN13EthernetClass12socketStatusEh>
 4004ad8:	10803fcc 	andi	r2,r2,255
 4004adc:	1005003a 	cmpeq	r2,r2,zero
 4004ae0:	10803fcc 	andi	r2,r2,255
 4004ae4:	10000426 	beq	r2,zero,4004af8 <_ZN14EthernetClient4stopEv+0x78>
			_sockindex = MAX_SOCK_NUM;
 4004ae8:	e0bfff17 	ldw	r2,-4(fp)
 4004aec:	00c00204 	movi	r3,8
 4004af0:	10c00105 	stb	r3,4(r2)
			return; // exit the loop
 4004af4:	00001706 	br	4004b54 <_ZN14EthernetClient4stopEv+0xd4>
		}
		usleep(1000);
 4004af8:	0100fa04 	movi	r4,1000
 4004afc:	40194f00 	call	40194f0 <usleep>
	} while (clock() - start < _timeout);
 4004b00:	400b73c0 	call	400b73c <clock>
 4004b04:	1007883a 	mov	r3,r2
 4004b08:	e0bffe17 	ldw	r2,-8(fp)
 4004b0c:	1887c83a 	sub	r3,r3,r2
 4004b10:	e0bfff17 	ldw	r2,-4(fp)
 4004b14:	1080018b 	ldhu	r2,6(r2)
 4004b18:	10bfffcc 	andi	r2,r2,65535
	// attempt to close the connection gracefully (send a FIN to other side)
	Ethernet.socketDisconnect(_sockindex);
	unsigned long start = clock();

	// wait up to a second for the connection to close
	do {
 4004b1c:	1885803a 	cmpltu	r2,r3,r2
 4004b20:	10803fcc 	andi	r2,r2,255
 4004b24:	10000126 	beq	r2,zero,4004b2c <_ZN14EthernetClient4stopEv+0xac>
 4004b28:	003fe606 	br	4004ac4 <__alt_data_end+0xfc004ac4>
		}
		usleep(1000);
	} while (clock() - start < _timeout);

	// if it hasn't closed, close it forcefully
	Ethernet.socketClose(_sockindex);
 4004b2c:	e0bfff17 	ldw	r2,-4(fp)
 4004b30:	10800103 	ldbu	r2,4(r2)
 4004b34:	10803fcc 	andi	r2,r2,255
 4004b38:	1009883a 	mov	r4,r2
 4004b3c:	40068b80 	call	40068b8 <_ZN13EthernetClass11socketCloseEh>
	_sockindex = MAX_SOCK_NUM;
 4004b40:	e0bfff17 	ldw	r2,-4(fp)
 4004b44:	00c00204 	movi	r3,8
 4004b48:	10c00105 	stb	r3,4(r2)
 4004b4c:	00000106 	br	4004b54 <_ZN14EthernetClient4stopEv+0xd4>
	}
}

void EthernetClient::stop()
{
	if (_sockindex >= MAX_SOCK_NUM) return;
 4004b50:	0001883a 	nop
	} while (clock() - start < _timeout);

	// if it hasn't closed, close it forcefully
	Ethernet.socketClose(_sockindex);
	_sockindex = MAX_SOCK_NUM;
}
 4004b54:	e037883a 	mov	sp,fp
 4004b58:	dfc00117 	ldw	ra,4(sp)
 4004b5c:	df000017 	ldw	fp,0(sp)
 4004b60:	dec00204 	addi	sp,sp,8
 4004b64:	f800283a 	ret

04004b68 <_ZN14EthernetClient9connectedEv>:

uint8_t EthernetClient::connected()
{
 4004b68:	defffc04 	addi	sp,sp,-16
 4004b6c:	dfc00315 	stw	ra,12(sp)
 4004b70:	df000215 	stw	fp,8(sp)
 4004b74:	df000204 	addi	fp,sp,8
 4004b78:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004b7c:	e0bfff17 	ldw	r2,-4(fp)
 4004b80:	10800103 	ldbu	r2,4(r2)
 4004b84:	10803fcc 	andi	r2,r2,255
 4004b88:	10800230 	cmpltui	r2,r2,8
 4004b8c:	1000021e 	bne	r2,zero,4004b98 <_ZN14EthernetClient9connectedEv+0x30>
 4004b90:	0005883a 	mov	r2,zero
 4004b94:	00001b06 	br	4004c04 <_ZN14EthernetClient9connectedEv+0x9c>

	uint8_t s = Ethernet.socketStatus(_sockindex);
 4004b98:	e0bfff17 	ldw	r2,-4(fp)
 4004b9c:	10800103 	ldbu	r2,4(r2)
 4004ba0:	10803fcc 	andi	r2,r2,255
 4004ba4:	1009883a 	mov	r4,r2
 4004ba8:	40068780 	call	4006878 <_ZN13EthernetClass12socketStatusEh>
 4004bac:	e0bffe05 	stb	r2,-8(fp)
	return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
		(s == SnSR::CLOSE_WAIT && !available()));
 4004bb0:	e0bffe03 	ldbu	r2,-8(fp)
 4004bb4:	10800520 	cmpeqi	r2,r2,20
 4004bb8:	1000111e 	bne	r2,zero,4004c00 <_ZN14EthernetClient9connectedEv+0x98>
uint8_t EthernetClient::connected()
{
	if (_sockindex >= MAX_SOCK_NUM) return 0;

	uint8_t s = Ethernet.socketStatus(_sockindex);
	return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
 4004bbc:	e0bffe03 	ldbu	r2,-8(fp)
 4004bc0:	10000f26 	beq	r2,zero,4004c00 <_ZN14EthernetClient9connectedEv+0x98>
 4004bc4:	e0bffe03 	ldbu	r2,-8(fp)
 4004bc8:	10800620 	cmpeqi	r2,r2,24
 4004bcc:	10000c1e 	bne	r2,zero,4004c00 <_ZN14EthernetClient9connectedEv+0x98>
		(s == SnSR::CLOSE_WAIT && !available()));
 4004bd0:	e0bffe03 	ldbu	r2,-8(fp)
 4004bd4:	10800718 	cmpnei	r2,r2,28
 4004bd8:	1000071e 	bne	r2,zero,4004bf8 <_ZN14EthernetClient9connectedEv+0x90>
 4004bdc:	e0bfff17 	ldw	r2,-4(fp)
 4004be0:	10800017 	ldw	r2,0(r2)
 4004be4:	10800404 	addi	r2,r2,16
 4004be8:	10800017 	ldw	r2,0(r2)
 4004bec:	e13fff17 	ldw	r4,-4(fp)
 4004bf0:	103ee83a 	callr	r2
 4004bf4:	10000226 	beq	r2,zero,4004c00 <_ZN14EthernetClient9connectedEv+0x98>
 4004bf8:	00800044 	movi	r2,1
 4004bfc:	00000106 	br	4004c04 <_ZN14EthernetClient9connectedEv+0x9c>
 4004c00:	0005883a 	mov	r2,zero
}
 4004c04:	e037883a 	mov	sp,fp
 4004c08:	dfc00117 	ldw	ra,4(sp)
 4004c0c:	df000017 	ldw	fp,0(sp)
 4004c10:	dec00204 	addi	sp,sp,8
 4004c14:	f800283a 	ret

04004c18 <_ZN14EthernetClient6statusEv>:

uint8_t EthernetClient::status()
{
 4004c18:	defffd04 	addi	sp,sp,-12
 4004c1c:	dfc00215 	stw	ra,8(sp)
 4004c20:	df000115 	stw	fp,4(sp)
 4004c24:	df000104 	addi	fp,sp,4
 4004c28:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return SnSR::CLOSED;
 4004c2c:	e0bfff17 	ldw	r2,-4(fp)
 4004c30:	10800103 	ldbu	r2,4(r2)
 4004c34:	10803fcc 	andi	r2,r2,255
 4004c38:	10800230 	cmpltui	r2,r2,8
 4004c3c:	1000021e 	bne	r2,zero,4004c48 <_ZN14EthernetClient6statusEv+0x30>
 4004c40:	0005883a 	mov	r2,zero
 4004c44:	00000506 	br	4004c5c <_ZN14EthernetClient6statusEv+0x44>
	return Ethernet.socketStatus(_sockindex);
 4004c48:	e0bfff17 	ldw	r2,-4(fp)
 4004c4c:	10800103 	ldbu	r2,4(r2)
 4004c50:	10803fcc 	andi	r2,r2,255
 4004c54:	1009883a 	mov	r4,r2
 4004c58:	40068780 	call	4006878 <_ZN13EthernetClass12socketStatusEh>
}
 4004c5c:	e037883a 	mov	sp,fp
 4004c60:	dfc00117 	ldw	ra,4(sp)
 4004c64:	df000017 	ldw	fp,0(sp)
 4004c68:	dec00204 	addi	sp,sp,8
 4004c6c:	f800283a 	ret

04004c70 <_ZN14EthernetClienteqERKS_>:

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.
bool EthernetClient::operator==(const EthernetClient& rhs)
{
 4004c70:	defffd04 	addi	sp,sp,-12
 4004c74:	df000215 	stw	fp,8(sp)
 4004c78:	df000204 	addi	fp,sp,8
 4004c7c:	e13ffe15 	stw	r4,-8(fp)
 4004c80:	e17fff15 	stw	r5,-4(fp)
	if (_sockindex != rhs._sockindex) return false;
 4004c84:	e0bffe17 	ldw	r2,-8(fp)
 4004c88:	10c00103 	ldbu	r3,4(r2)
 4004c8c:	e0bfff17 	ldw	r2,-4(fp)
 4004c90:	10800103 	ldbu	r2,4(r2)
 4004c94:	18c03fcc 	andi	r3,r3,255
 4004c98:	10803fcc 	andi	r2,r2,255
 4004c9c:	18800226 	beq	r3,r2,4004ca8 <_ZN14EthernetClienteqERKS_+0x38>
 4004ca0:	0005883a 	mov	r2,zero
 4004ca4:	00000f06 	br	4004ce4 <_ZN14EthernetClienteqERKS_+0x74>
	if (_sockindex >= MAX_SOCK_NUM) return false;
 4004ca8:	e0bffe17 	ldw	r2,-8(fp)
 4004cac:	10800103 	ldbu	r2,4(r2)
 4004cb0:	10803fcc 	andi	r2,r2,255
 4004cb4:	10800230 	cmpltui	r2,r2,8
 4004cb8:	1000021e 	bne	r2,zero,4004cc4 <_ZN14EthernetClienteqERKS_+0x54>
 4004cbc:	0005883a 	mov	r2,zero
 4004cc0:	00000806 	br	4004ce4 <_ZN14EthernetClienteqERKS_+0x74>
	if (rhs._sockindex >= MAX_SOCK_NUM) return false;
 4004cc4:	e0bfff17 	ldw	r2,-4(fp)
 4004cc8:	10800103 	ldbu	r2,4(r2)
 4004ccc:	10803fcc 	andi	r2,r2,255
 4004cd0:	10800230 	cmpltui	r2,r2,8
 4004cd4:	1000021e 	bne	r2,zero,4004ce0 <_ZN14EthernetClienteqERKS_+0x70>
 4004cd8:	0005883a 	mov	r2,zero
 4004cdc:	00000106 	br	4004ce4 <_ZN14EthernetClienteqERKS_+0x74>
	return true;
 4004ce0:	00800044 	movi	r2,1
}
 4004ce4:	e037883a 	mov	sp,fp
 4004ce8:	df000017 	ldw	fp,0(sp)
 4004cec:	dec00104 	addi	sp,sp,4
 4004cf0:	f800283a 	ret

04004cf4 <_ZN14EthernetClient9localPortEv>:

// https://github.com/per1234/EthernetMod
// from: https://github.com/ntruchsess/Arduino-1/commit/937bce1a0bb2567f6d03b15df79525569377dabd
uint16_t EthernetClient::localPort()
{
 4004cf4:	defffc04 	addi	sp,sp,-16
 4004cf8:	dfc00315 	stw	ra,12(sp)
 4004cfc:	df000215 	stw	fp,8(sp)
 4004d00:	df000204 	addi	fp,sp,8
 4004d04:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004d08:	e0bfff17 	ldw	r2,-4(fp)
 4004d0c:	10800103 	ldbu	r2,4(r2)
 4004d10:	10803fcc 	andi	r2,r2,255
 4004d14:	10800230 	cmpltui	r2,r2,8
 4004d18:	1000021e 	bne	r2,zero,4004d24 <_ZN14EthernetClient9localPortEv+0x30>
 4004d1c:	0005883a 	mov	r2,zero
 4004d20:	00000706 	br	4004d40 <_ZN14EthernetClient9localPortEv+0x4c>
	uint16_t port;
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	port = W5100.readSnPORT(_sockindex);
 4004d24:	e0bfff17 	ldw	r2,-4(fp)
 4004d28:	10800103 	ldbu	r2,4(r2)
 4004d2c:	10803fcc 	andi	r2,r2,255
 4004d30:	1009883a 	mov	r4,r2
 4004d34:	40051480 	call	4005148 <_ZN10W5100Class10readSnPORTEh>
 4004d38:	e0bffe0d 	sth	r2,-8(fp)
//	SPI_endTransaction();
	return port;
 4004d3c:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4004d40:	e037883a 	mov	sp,fp
 4004d44:	dfc00117 	ldw	ra,4(sp)
 4004d48:	df000017 	ldw	fp,0(sp)
 4004d4c:	dec00204 	addi	sp,sp,8
 4004d50:	f800283a 	ret

04004d54 <_ZN14EthernetClient8remoteIPEv>:

// https://github.com/per1234/EthernetMod
// returns the remote IP address: https://forum.arduino.cc/index.php?topic=82416.0
IPAddress EthernetClient::remoteIP()
{
 4004d54:	defffa04 	addi	sp,sp,-24
 4004d58:	dfc00515 	stw	ra,20(sp)
 4004d5c:	df000415 	stw	fp,16(sp)
 4004d60:	df000404 	addi	fp,sp,16
 4004d64:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return IPAddress((uint32_t)0);
 4004d68:	e0bfff17 	ldw	r2,-4(fp)
 4004d6c:	10800103 	ldbu	r2,4(r2)
 4004d70:	10803fcc 	andi	r2,r2,255
 4004d74:	10800230 	cmpltui	r2,r2,8
 4004d78:	1000061e 	bne	r2,zero,4004d94 <_ZN14EthernetClient8remoteIPEv+0x40>
 4004d7c:	e0bffd04 	addi	r2,fp,-12
 4004d80:	000b883a 	mov	r5,zero
 4004d84:	1009883a 	mov	r4,r2
 4004d88:	4007d380 	call	4007d38 <_ZN9IPAddressC1Em>
 4004d8c:	e0bffd17 	ldw	r2,-12(fp)
 4004d90:	00000c06 	br	4004dc4 <_ZN14EthernetClient8remoteIPEv+0x70>
	uint8_t remoteIParray[4];
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	W5100.readSnDIPR(_sockindex, remoteIParray);
 4004d94:	e0bfff17 	ldw	r2,-4(fp)
 4004d98:	10800103 	ldbu	r2,4(r2)
 4004d9c:	10803fcc 	andi	r2,r2,255
 4004da0:	e0fffe04 	addi	r3,fp,-8
 4004da4:	180b883a 	mov	r5,r3
 4004da8:	1009883a 	mov	r4,r2
 4004dac:	40051a80 	call	40051a8 <_ZN10W5100Class10readSnDIPREhPh>
//	SPI_endTransaction();
	return IPAddress(remoteIParray);
 4004db0:	e0bffe04 	addi	r2,fp,-8
 4004db4:	100b883a 	mov	r5,r2
 4004db8:	e13ffc04 	addi	r4,fp,-16
 4004dbc:	4007d6c0 	call	4007d6c <_ZN9IPAddressC1EPKh>
 4004dc0:	e0bffc17 	ldw	r2,-16(fp)
}
 4004dc4:	e037883a 	mov	sp,fp
 4004dc8:	dfc00117 	ldw	ra,4(sp)
 4004dcc:	df000017 	ldw	fp,0(sp)
 4004dd0:	dec00204 	addi	sp,sp,8
 4004dd4:	f800283a 	ret

04004dd8 <_ZN14EthernetClient10remotePortEv>:

// https://github.com/per1234/EthernetMod
// from: https://github.com/ntruchsess/Arduino-1/commit/ca37de4ba4ecbdb941f14ac1fe7dd40f3008af75
uint16_t EthernetClient::remotePort()
{
 4004dd8:	defffc04 	addi	sp,sp,-16
 4004ddc:	dfc00315 	stw	ra,12(sp)
 4004de0:	df000215 	stw	fp,8(sp)
 4004de4:	df000204 	addi	fp,sp,8
 4004de8:	e13fff15 	stw	r4,-4(fp)
	if (_sockindex >= MAX_SOCK_NUM) return 0;
 4004dec:	e0bfff17 	ldw	r2,-4(fp)
 4004df0:	10800103 	ldbu	r2,4(r2)
 4004df4:	10803fcc 	andi	r2,r2,255
 4004df8:	10800230 	cmpltui	r2,r2,8
 4004dfc:	1000021e 	bne	r2,zero,4004e08 <_ZN14EthernetClient10remotePortEv+0x30>
 4004e00:	0005883a 	mov	r2,zero
 4004e04:	00000706 	br	4004e24 <_ZN14EthernetClient10remotePortEv+0x4c>
	uint16_t port;
//	SPI_beginTransaction(SPI_ETHERNET_SETTINGS);
	port = W5100.readSnDPORT(_sockindex);
 4004e08:	e0bfff17 	ldw	r2,-4(fp)
 4004e0c:	10800103 	ldbu	r2,4(r2)
 4004e10:	10803fcc 	andi	r2,r2,255
 4004e14:	1009883a 	mov	r4,r2
 4004e18:	40051f00 	call	40051f0 <_ZN10W5100Class11readSnDPORTEh>
 4004e1c:	e0bffe0d 	sth	r2,-8(fp)
//	SPI_endTransaction();
	return port;
 4004e20:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4004e24:	e037883a 	mov	sp,fp
 4004e28:	dfc00117 	ldw	ra,4(sp)
 4004e2c:	df000017 	ldw	fp,0(sp)
 4004e30:	dec00204 	addi	sp,sp,8
 4004e34:	f800283a 	ret

04004e38 <_Z41__static_initialization_and_destruction_0ii>:
 4004e38:	defffb04 	addi	sp,sp,-20
 4004e3c:	dfc00415 	stw	ra,16(sp)
 4004e40:	df000315 	stw	fp,12(sp)
 4004e44:	df000304 	addi	fp,sp,12
 4004e48:	e13ffe15 	stw	r4,-8(fp)
 4004e4c:	e17fff15 	stw	r5,-4(fp)
 4004e50:	e0bffe17 	ldw	r2,-8(fp)
 4004e54:	10800058 	cmpnei	r2,r2,1
 4004e58:	1000091e 	bne	r2,zero,4004e80 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4004e5c:	e0ffff17 	ldw	r3,-4(fp)
 4004e60:	00bfffd4 	movui	r2,65535
 4004e64:	1880061e 	bne	r3,r2,4004e80 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4004e68:	d8000015 	stw	zero,0(sp)
 4004e6c:	000f883a 	mov	r7,zero
 4004e70:	000d883a 	mov	r6,zero
 4004e74:	000b883a 	mov	r5,zero
 4004e78:	d112d404 	addi	r4,gp,19280
 4004e7c:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
 4004e80:	0001883a 	nop
 4004e84:	e037883a 	mov	sp,fp
 4004e88:	dfc00117 	ldw	ra,4(sp)
 4004e8c:	df000017 	ldw	fp,0(sp)
 4004e90:	dec00204 	addi	sp,sp,8
 4004e94:	f800283a 	ret

04004e98 <_GLOBAL__sub_I__ZN14EthernetClient7connectEPKct>:
 4004e98:	defffe04 	addi	sp,sp,-8
 4004e9c:	dfc00115 	stw	ra,4(sp)
 4004ea0:	df000015 	stw	fp,0(sp)
 4004ea4:	d839883a 	mov	fp,sp
 4004ea8:	017fffd4 	movui	r5,65535
 4004eac:	01000044 	movi	r4,1
 4004eb0:	4004e380 	call	4004e38 <_Z41__static_initialization_and_destruction_0ii>
 4004eb4:	e037883a 	mov	sp,fp
 4004eb8:	dfc00117 	ldw	ra,4(sp)
 4004ebc:	df000017 	ldw	fp,0(sp)
 4004ec0:	dec00204 	addi	sp,sp,8
 4004ec4:	f800283a 	ret

04004ec8 <_ZN6Client12rawIPAddressER9IPAddress>:
  virtual void flush() = 0;
  virtual void stop() = 0;
  virtual uint8_t connected() = 0;
  virtual operator bool() = 0;
protected:
  uint8_t* rawIPAddress(IPAddress& addr) { return addr.raw_address(); };
 4004ec8:	defffc04 	addi	sp,sp,-16
 4004ecc:	dfc00315 	stw	ra,12(sp)
 4004ed0:	df000215 	stw	fp,8(sp)
 4004ed4:	df000204 	addi	fp,sp,8
 4004ed8:	e13ffe15 	stw	r4,-8(fp)
 4004edc:	e17fff15 	stw	r5,-4(fp)
 4004ee0:	e13fff17 	ldw	r4,-4(fp)
 4004ee4:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 4004ee8:	e037883a 	mov	sp,fp
 4004eec:	dfc00117 	ldw	ra,4(sp)
 4004ef0:	df000017 	ldw	fp,0(sp)
 4004ef4:	dec00204 	addi	sp,sp,8
 4004ef8:	f800283a 	ret

04004efc <_ZN13EthernetClass11dnsServerIPEv>:

	static void MACAddress(uint8_t *mac_address);
	static IPAddress localIP();
	static IPAddress subnetMask();
	static IPAddress gatewayIP();
	static IPAddress dnsServerIP() { return _dnsServerAddress; }
 4004efc:	deffff04 	addi	sp,sp,-4
 4004f00:	df000015 	stw	fp,0(sp)
 4004f04:	d839883a 	mov	fp,sp
 4004f08:	d092cf17 	ldw	r2,19260(gp)
 4004f0c:	e037883a 	mov	sp,fp
 4004f10:	df000017 	ldw	fp,0(sp)
 4004f14:	dec00104 	addi	sp,sp,4
 4004f18:	f800283a 	ret

04004f1c <_ZN14EthernetClientD1Ev>:

class EthernetClient : public Client {
public:
	EthernetClient() : _sockindex(MAX_SOCK_NUM), _timeout(1000) { }
	EthernetClient(uint8_t s) : _sockindex(s), _timeout(1000) { }
	virtual ~EthernetClient() {};
 4004f1c:	defffd04 	addi	sp,sp,-12
 4004f20:	dfc00215 	stw	ra,8(sp)
 4004f24:	df000115 	stw	fp,4(sp)
 4004f28:	df000104 	addi	fp,sp,4
 4004f2c:	e13fff15 	stw	r4,-4(fp)
 4004f30:	008100b4 	movhi	r2,1026
 4004f34:	10b28a04 	addi	r2,r2,-13784
 4004f38:	e0ffff17 	ldw	r3,-4(fp)
 4004f3c:	18800015 	stw	r2,0(r3)
 4004f40:	0005883a 	mov	r2,zero
 4004f44:	10000226 	beq	r2,zero,4004f50 <_ZN14EthernetClientD1Ev+0x34>
 4004f48:	e13fff17 	ldw	r4,-4(fp)
 4004f4c:	400a4c80 	call	400a4c8 <_ZdlPv>
 4004f50:	e037883a 	mov	sp,fp
 4004f54:	dfc00117 	ldw	ra,4(sp)
 4004f58:	df000017 	ldw	fp,0(sp)
 4004f5c:	dec00204 	addi	sp,sp,8
 4004f60:	f800283a 	ret

04004f64 <_ZN14EthernetClientD0Ev>:
 4004f64:	defffd04 	addi	sp,sp,-12
 4004f68:	dfc00215 	stw	ra,8(sp)
 4004f6c:	df000115 	stw	fp,4(sp)
 4004f70:	df000104 	addi	fp,sp,4
 4004f74:	e13fff15 	stw	r4,-4(fp)
 4004f78:	e13fff17 	ldw	r4,-4(fp)
 4004f7c:	4004f1c0 	call	4004f1c <_ZN14EthernetClientD1Ev>
 4004f80:	e13fff17 	ldw	r4,-4(fp)
 4004f84:	400a4c80 	call	400a4c8 <_ZdlPv>
 4004f88:	e037883a 	mov	sp,fp
 4004f8c:	dfc00117 	ldw	ra,4(sp)
 4004f90:	df000017 	ldw	fp,0(sp)
 4004f94:	dec00204 	addi	sp,sp,8
 4004f98:	f800283a 	ret

04004f9c <_ZN14EthernetClientcvbEv>:
	virtual int read(uint8_t *buf, size_t size);
	virtual int peek();
	virtual void flush();
	virtual void stop();
	virtual uint8_t connected();
	virtual operator bool() { return _sockindex < MAX_SOCK_NUM; }
 4004f9c:	defffe04 	addi	sp,sp,-8
 4004fa0:	df000115 	stw	fp,4(sp)
 4004fa4:	df000104 	addi	fp,sp,4
 4004fa8:	e13fff15 	stw	r4,-4(fp)
 4004fac:	e0bfff17 	ldw	r2,-4(fp)
 4004fb0:	10800103 	ldbu	r2,4(r2)
 4004fb4:	10803fcc 	andi	r2,r2,255
 4004fb8:	10800230 	cmpltui	r2,r2,8
 4004fbc:	e037883a 	mov	sp,fp
 4004fc0:	df000017 	ldw	fp,0(sp)
 4004fc4:	dec00104 	addi	sp,sp,4
 4004fc8:	f800283a 	ret

04004fcc <_ZN14EthernetClienteqEb>:
	virtual bool operator==(const bool value) { return bool() == value; }
 4004fcc:	defffd04 	addi	sp,sp,-12
 4004fd0:	df000215 	stw	fp,8(sp)
 4004fd4:	df000204 	addi	fp,sp,8
 4004fd8:	e13ffe15 	stw	r4,-8(fp)
 4004fdc:	2805883a 	mov	r2,r5
 4004fe0:	e0bfff05 	stb	r2,-4(fp)
 4004fe4:	e0bfff03 	ldbu	r2,-4(fp)
 4004fe8:	1080005c 	xori	r2,r2,1
 4004fec:	e037883a 	mov	sp,fp
 4004ff0:	df000017 	ldw	fp,0(sp)
 4004ff4:	dec00104 	addi	sp,sp,4
 4004ff8:	f800283a 	ret

04004ffc <_ZN14EthernetClientneEb>:
	virtual bool operator!=(const bool value) { return bool() != value; }
 4004ffc:	defffd04 	addi	sp,sp,-12
 4005000:	df000215 	stw	fp,8(sp)
 4005004:	df000204 	addi	fp,sp,8
 4005008:	e13ffe15 	stw	r4,-8(fp)
 400500c:	2805883a 	mov	r2,r5
 4005010:	e0bfff05 	stb	r2,-4(fp)
 4005014:	e0bfff03 	ldbu	r2,-4(fp)
 4005018:	e037883a 	mov	sp,fp
 400501c:	df000017 	ldw	fp,0(sp)
 4005020:	dec00104 	addi	sp,sp,4
 4005024:	f800283a 	ret

04005028 <_ZN14EthernetClientneERKS_>:
	virtual bool operator==(const EthernetClient&);
	virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); }
 4005028:	defffc04 	addi	sp,sp,-16
 400502c:	dfc00315 	stw	ra,12(sp)
 4005030:	df000215 	stw	fp,8(sp)
 4005034:	df000204 	addi	fp,sp,8
 4005038:	e13ffe15 	stw	r4,-8(fp)
 400503c:	e17fff15 	stw	r5,-4(fp)
 4005040:	e0bffe17 	ldw	r2,-8(fp)
 4005044:	10800017 	ldw	r2,0(r2)
 4005048:	10801304 	addi	r2,r2,76
 400504c:	10800017 	ldw	r2,0(r2)
 4005050:	e17fff17 	ldw	r5,-4(fp)
 4005054:	e13ffe17 	ldw	r4,-8(fp)
 4005058:	103ee83a 	callr	r2
 400505c:	1080005c 	xori	r2,r2,1
 4005060:	e037883a 	mov	sp,fp
 4005064:	dfc00117 	ldw	ra,4(sp)
 4005068:	df000017 	ldw	fp,0(sp)
 400506c:	dec00204 	addi	sp,sp,8
 4005070:	f800283a 	ret

04005074 <_ZN14EthernetClient20setConnectionTimeoutEt>:
	uint8_t getSocketNumber() const { return _sockindex; }
	virtual uint16_t localPort();
	virtual IPAddress remoteIP();
	virtual uint16_t remotePort();
	virtual void setConnectionTimeout(uint16_t timeout) { _timeout = timeout; }
 4005074:	defffd04 	addi	sp,sp,-12
 4005078:	df000215 	stw	fp,8(sp)
 400507c:	df000204 	addi	fp,sp,8
 4005080:	e13ffe15 	stw	r4,-8(fp)
 4005084:	2805883a 	mov	r2,r5
 4005088:	e0bfff0d 	sth	r2,-4(fp)
 400508c:	e0bffe17 	ldw	r2,-8(fp)
 4005090:	e0ffff0b 	ldhu	r3,-4(fp)
 4005094:	10c0018d 	sth	r3,6(r2)
 4005098:	0001883a 	nop
 400509c:	e037883a 	mov	sp,fp
 40050a0:	df000017 	ldw	fp,0(sp)
 40050a4:	dec00104 	addi	sp,sp,4
 40050a8:	f800283a 	ret

040050ac <_ZN10W5100Class7CH_BASEEv>:
#undef __GP_REGISTER_N

  // W5100 Socket registers
  // ----------------------
private:
  static uint16_t CH_BASE(void) {
 40050ac:	deffff04 	addi	sp,sp,-4
 40050b0:	df000015 	stw	fp,0(sp)
 40050b4:	d839883a 	mov	fp,sp
    //if (chip == 55) return 0x1000;
    //if (chip == 52) return 0x4000;
    //return 0x0400;
    return CH_BASE_MSB << 8;
 40050b8:	d092da43 	ldbu	r2,19305(gp)
 40050bc:	10803fcc 	andi	r2,r2,255
 40050c0:	1004923a 	slli	r2,r2,8
  }
 40050c4:	e037883a 	mov	sp,fp
 40050c8:	df000017 	ldw	fp,0(sp)
 40050cc:	dec00104 	addi	sp,sp,4
 40050d0:	f800283a 	ret

040050d4 <_ZN10W5100Class6readSnEhtPht>:
    return read(CH_BASE() + s * CH_SIZE + addr);
  }
  static inline uint8_t writeSn(SOCKET s, uint16_t addr, uint8_t data) {
    return write(CH_BASE() + s * CH_SIZE + addr, data);
  }
  static inline uint16_t readSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
 40050d4:	defffa04 	addi	sp,sp,-24
 40050d8:	dfc00515 	stw	ra,20(sp)
 40050dc:	df000415 	stw	fp,16(sp)
 40050e0:	df000404 	addi	fp,sp,16
 40050e4:	2807883a 	mov	r3,r5
 40050e8:	e1bffe15 	stw	r6,-8(fp)
 40050ec:	3805883a 	mov	r2,r7
 40050f0:	e13ffc05 	stb	r4,-16(fp)
 40050f4:	e0fffd0d 	sth	r3,-12(fp)
 40050f8:	e0bfff0d 	sth	r2,-4(fp)
    return read(CH_BASE() + s * CH_SIZE + addr, buf, len);
 40050fc:	40050ac0 	call	40050ac <_ZN10W5100Class7CH_BASEEv>
 4005100:	1007883a 	mov	r3,r2
 4005104:	e0bffc03 	ldbu	r2,-16(fp)
 4005108:	1004923a 	slli	r2,r2,8
 400510c:	1885883a 	add	r2,r3,r2
 4005110:	1007883a 	mov	r3,r2
 4005114:	e0bffd0b 	ldhu	r2,-12(fp)
 4005118:	1885883a 	add	r2,r3,r2
 400511c:	10bfffcc 	andi	r2,r2,65535
 4005120:	e0ffff0b 	ldhu	r3,-4(fp)
 4005124:	180d883a 	mov	r6,r3
 4005128:	e17ffe17 	ldw	r5,-8(fp)
 400512c:	1009883a 	mov	r4,r2
 4005130:	40087100 	call	4008710 <_ZN10W5100Class4readEtPht>
  }
 4005134:	e037883a 	mov	sp,fp
 4005138:	dfc00117 	ldw	ra,4(sp)
 400513c:	df000017 	ldw	fp,0(sp)
 4005140:	dec00204 	addi	sp,sp,8
 4005144:	f800283a 	ret

04005148 <_ZN10W5100Class10readSnPORTEh>:
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
 4005148:	defffc04 	addi	sp,sp,-16
 400514c:	dfc00315 	stw	ra,12(sp)
 4005150:	df000215 	stw	fp,8(sp)
 4005154:	df000204 	addi	fp,sp,8
 4005158:	2005883a 	mov	r2,r4
 400515c:	e0bfff05 	stb	r2,-4(fp)
 4005160:	e0bfff03 	ldbu	r2,-4(fp)
 4005164:	01c00084 	movi	r7,2
 4005168:	e1bffe04 	addi	r6,fp,-8
 400516c:	01400104 	movi	r5,4
 4005170:	1009883a 	mov	r4,r2
 4005174:	40050d40 	call	40050d4 <_ZN10W5100Class6readSnEhtPht>
 4005178:	e0bffe03 	ldbu	r2,-8(fp)
 400517c:	10803fcc 	andi	r2,r2,255
 4005180:	1004923a 	slli	r2,r2,8
 4005184:	1007883a 	mov	r3,r2
 4005188:	e0bffe43 	ldbu	r2,-7(fp)
 400518c:	10803fcc 	andi	r2,r2,255
 4005190:	1884b03a 	or	r2,r3,r2
 4005194:	e037883a 	mov	sp,fp
 4005198:	dfc00117 	ldw	ra,4(sp)
 400519c:	df000017 	ldw	fp,0(sp)
 40051a0:	dec00204 	addi	sp,sp,8
 40051a4:	f800283a 	ret

040051a8 <_ZN10W5100Class10readSnDIPREhPh>:
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
 40051a8:	defffc04 	addi	sp,sp,-16
 40051ac:	dfc00315 	stw	ra,12(sp)
 40051b0:	df000215 	stw	fp,8(sp)
 40051b4:	df000204 	addi	fp,sp,8
 40051b8:	2005883a 	mov	r2,r4
 40051bc:	e17fff15 	stw	r5,-4(fp)
 40051c0:	e0bffe05 	stb	r2,-8(fp)
 40051c4:	e0bffe03 	ldbu	r2,-8(fp)
 40051c8:	01c00104 	movi	r7,4
 40051cc:	e1bfff17 	ldw	r6,-4(fp)
 40051d0:	01400304 	movi	r5,12
 40051d4:	1009883a 	mov	r4,r2
 40051d8:	40050d40 	call	40050d4 <_ZN10W5100Class6readSnEhtPht>
 40051dc:	e037883a 	mov	sp,fp
 40051e0:	dfc00117 	ldw	ra,4(sp)
 40051e4:	df000017 	ldw	fp,0(sp)
 40051e8:	dec00204 	addi	sp,sp,8
 40051ec:	f800283a 	ret

040051f0 <_ZN10W5100Class11readSnDPORTEh>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
 40051f0:	defffc04 	addi	sp,sp,-16
 40051f4:	dfc00315 	stw	ra,12(sp)
 40051f8:	df000215 	stw	fp,8(sp)
 40051fc:	df000204 	addi	fp,sp,8
 4005200:	2005883a 	mov	r2,r4
 4005204:	e0bfff05 	stb	r2,-4(fp)
 4005208:	e0bfff03 	ldbu	r2,-4(fp)
 400520c:	01c00084 	movi	r7,2
 4005210:	e1bffe04 	addi	r6,fp,-8
 4005214:	01400404 	movi	r5,16
 4005218:	1009883a 	mov	r4,r2
 400521c:	40050d40 	call	40050d4 <_ZN10W5100Class6readSnEhtPht>
 4005220:	e0bffe03 	ldbu	r2,-8(fp)
 4005224:	10803fcc 	andi	r2,r2,255
 4005228:	1004923a 	slli	r2,r2,8
 400522c:	1007883a 	mov	r3,r2
 4005230:	e0bffe43 	ldbu	r2,-7(fp)
 4005234:	10803fcc 	andi	r2,r2,255
 4005238:	1884b03a 	or	r2,r3,r2
 400523c:	e037883a 	mov	sp,fp
 4005240:	dfc00117 	ldw	ra,4(sp)
 4005244:	df000017 	ldw	fp,0(sp)
 4005248:	dec00204 	addi	sp,sp,8
 400524c:	f800283a 	ret

04005250 <_ZN9DNSClientC1Ev>:
#ifndef DNSClient_h
#define DNSClient_h

#include "Ethernet.h"

class DNSClient
 4005250:	defffd04 	addi	sp,sp,-12
 4005254:	dfc00215 	stw	ra,8(sp)
 4005258:	df000115 	stw	fp,4(sp)
 400525c:	df000104 	addi	fp,sp,4
 4005260:	e13fff15 	stw	r4,-4(fp)
 4005264:	e0bfff17 	ldw	r2,-4(fp)
 4005268:	1009883a 	mov	r4,r2
 400526c:	4007c9c0 	call	4007c9c <_ZN9IPAddressC1Ev>
 4005270:	e0bfff17 	ldw	r2,-4(fp)
 4005274:	10800204 	addi	r2,r2,8
 4005278:	1009883a 	mov	r4,r2
 400527c:	4003c300 	call	4003c30 <_ZN11EthernetUDPC1Ev>
 4005280:	0001883a 	nop
 4005284:	e037883a 	mov	sp,fp
 4005288:	dfc00117 	ldw	ra,4(sp)
 400528c:	df000017 	ldw	fp,0(sp)
 4005290:	dec00204 	addi	sp,sp,8
 4005294:	f800283a 	ret

04005298 <_ZN14EthernetServer5beginEv>:

uint16_t EthernetServer::server_port[MAX_SOCK_NUM];


void EthernetServer::begin()
{
 4005298:	defffc04 	addi	sp,sp,-16
 400529c:	dfc00315 	stw	ra,12(sp)
 40052a0:	df000215 	stw	fp,8(sp)
 40052a4:	df000204 	addi	fp,sp,8
 40052a8:	e13fff15 	stw	r4,-4(fp)
	uint8_t sockindex = Ethernet.socketBegin(SnMR::TCP, _port);
 40052ac:	e0bfff17 	ldw	r2,-4(fp)
 40052b0:	1080010b 	ldhu	r2,4(r2)
 40052b4:	10bfffcc 	andi	r2,r2,65535
 40052b8:	100b883a 	mov	r5,r2
 40052bc:	01000844 	movi	r4,33
 40052c0:	400628c0 	call	400628c <_ZN13EthernetClass11socketBeginEht>
 40052c4:	e0bffe05 	stb	r2,-8(fp)
	if (sockindex < MAX_SOCK_NUM) {
 40052c8:	e0bffe03 	ldbu	r2,-8(fp)
 40052cc:	10800228 	cmpgeui	r2,r2,8
 40052d0:	1000131e 	bne	r2,zero,4005320 <_ZN14EthernetServer5beginEv+0x88>
		if (Ethernet.socketListen(sockindex)) {
 40052d4:	e0bffe03 	ldbu	r2,-8(fp)
 40052d8:	1009883a 	mov	r4,r2
 40052dc:	40068f80 	call	40068f8 <_ZN13EthernetClass12socketListenEh>
 40052e0:	10803fcc 	andi	r2,r2,255
 40052e4:	1004c03a 	cmpne	r2,r2,zero
 40052e8:	10803fcc 	andi	r2,r2,255
 40052ec:	10000926 	beq	r2,zero,4005314 <_ZN14EthernetServer5beginEv+0x7c>
			server_port[sockindex] = _port;
 40052f0:	e0fffe03 	ldbu	r3,-8(fp)
 40052f4:	e0bfff17 	ldw	r2,-4(fp)
 40052f8:	1100010b 	ldhu	r4,4(r2)
 40052fc:	008100f4 	movhi	r2,1027
 4005300:	109a0404 	addi	r2,r2,26640
 4005304:	18c7883a 	add	r3,r3,r3
 4005308:	10c5883a 	add	r2,r2,r3
 400530c:	1100000d 	sth	r4,0(r2)
		} else {
			Ethernet.socketDisconnect(sockindex);
		}
	}
}
 4005310:	00000306 	br	4005320 <_ZN14EthernetServer5beginEv+0x88>
	uint8_t sockindex = Ethernet.socketBegin(SnMR::TCP, _port);
	if (sockindex < MAX_SOCK_NUM) {
		if (Ethernet.socketListen(sockindex)) {
			server_port[sockindex] = _port;
		} else {
			Ethernet.socketDisconnect(sockindex);
 4005314:	e0bffe03 	ldbu	r2,-8(fp)
 4005318:	1009883a 	mov	r4,r2
 400531c:	40069cc0 	call	40069cc <_ZN13EthernetClass16socketDisconnectEh>
		}
	}
}
 4005320:	0001883a 	nop
 4005324:	e037883a 	mov	sp,fp
 4005328:	dfc00117 	ldw	ra,4(sp)
 400532c:	df000017 	ldw	fp,0(sp)
 4005330:	dec00204 	addi	sp,sp,8
 4005334:	f800283a 	ret

04005338 <_ZN14EthernetServer9availableEv>:

EthernetClient EthernetServer::available()
{
 4005338:	defffa04 	addi	sp,sp,-24
 400533c:	dfc00515 	stw	ra,20(sp)
 4005340:	df000415 	stw	fp,16(sp)
 4005344:	df000404 	addi	fp,sp,16
 4005348:	e13ffe15 	stw	r4,-8(fp)
 400534c:	e17fff15 	stw	r5,-4(fp)
	bool listening = false;
 4005350:	e03ffc05 	stb	zero,-16(fp)
	uint8_t sockindex = MAX_SOCK_NUM;
 4005354:	00800204 	movi	r2,8
 4005358:	e0bffc45 	stb	r2,-15(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 400535c:	00800204 	movi	r2,8
 4005360:	e0bffc85 	stb	r2,-14(fp)

	chip = W5100.getChip();
 4005364:	40041740 	call	4004174 <_ZN10W5100Class7getChipEv>
 4005368:	e0bffd05 	stb	r2,-12(fp)
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
 400536c:	e0bffd03 	ldbu	r2,-12(fp)
 4005370:	1000041e 	bne	r2,zero,4005384 <_ZN14EthernetServer9availableEv+0x4c>
 4005374:	01400204 	movi	r5,8
 4005378:	e13ffe17 	ldw	r4,-8(fp)
 400537c:	40059440 	call	4005944 <_ZN14EthernetClientC1Eh>
 4005380:	00005006 	br	40054c4 <_ZN14EthernetServer9availableEv+0x18c>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4005384:	e0bffd03 	ldbu	r2,-12(fp)
 4005388:	10800cd8 	cmpnei	r2,r2,51
 400538c:	1000021e 	bne	r2,zero,4005398 <_ZN14EthernetServer9availableEv+0x60>
 4005390:	00800104 	movi	r2,4
 4005394:	e0bffc85 	stb	r2,-14(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4005398:	e03ffcc5 	stb	zero,-13(fp)
 400539c:	e0fffcc3 	ldbu	r3,-13(fp)
 40053a0:	e0bffc83 	ldbu	r2,-14(fp)
 40053a4:	18803a2e 	bgeu	r3,r2,4005490 <_ZN14EthernetServer9availableEv+0x158>
		if (server_port[i] == _port) {
 40053a8:	e0fffcc3 	ldbu	r3,-13(fp)
 40053ac:	008100f4 	movhi	r2,1027
 40053b0:	109a0404 	addi	r2,r2,26640
 40053b4:	18c7883a 	add	r3,r3,r3
 40053b8:	10c5883a 	add	r2,r2,r3
 40053bc:	10c0000b 	ldhu	r3,0(r2)
 40053c0:	e0bfff17 	ldw	r2,-4(fp)
 40053c4:	1080010b 	ldhu	r2,4(r2)
 40053c8:	18ffffcc 	andi	r3,r3,65535
 40053cc:	10bfffcc 	andi	r2,r2,65535
 40053d0:	18802b1e 	bne	r3,r2,4005480 <_ZN14EthernetServer9availableEv+0x148>
			uint8_t stat = Ethernet.socketStatus(i);
 40053d4:	e0bffcc3 	ldbu	r2,-13(fp)
 40053d8:	1009883a 	mov	r4,r2
 40053dc:	40068780 	call	4006878 <_ZN13EthernetClass12socketStatusEh>
 40053e0:	e0bffd45 	stb	r2,-11(fp)
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
 40053e4:	e0bffd43 	ldbu	r2,-11(fp)
 40053e8:	108005e0 	cmpeqi	r2,r2,23
 40053ec:	1000031e 	bne	r2,zero,40053fc <_ZN14EthernetServer9availableEv+0xc4>
 40053f0:	e0bffd43 	ldbu	r2,-11(fp)
 40053f4:	10800718 	cmpnei	r2,r2,28
 40053f8:	1000111e 	bne	r2,zero,4005440 <_ZN14EthernetServer9availableEv+0x108>
				if (Ethernet.socketRecvAvailable(i) > 0) {
 40053fc:	e0bffcc3 	ldbu	r2,-13(fp)
 4005400:	1009883a 	mov	r4,r2
 4005404:	4006e340 	call	4006e34 <_ZN13EthernetClass19socketRecvAvailableEh>
 4005408:	10bfffcc 	andi	r2,r2,65535
 400540c:	1004c03a 	cmpne	r2,r2,zero
 4005410:	10803fcc 	andi	r2,r2,255
 4005414:	10000326 	beq	r2,zero,4005424 <_ZN14EthernetServer9availableEv+0xec>
					sockindex = i;
 4005418:	e0bffcc3 	ldbu	r2,-13(fp)
 400541c:	e0bffc45 	stb	r2,-15(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 4005420:	00001606 	br	400547c <_ZN14EthernetServer9availableEv+0x144>
					sockindex = i;
				} else {
					// remote host closed connection, our end still open
					if (stat == SnSR::CLOSE_WAIT) {
 4005424:	e0bffd43 	ldbu	r2,-11(fp)
 4005428:	10800718 	cmpnei	r2,r2,28
 400542c:	1000131e 	bne	r2,zero,400547c <_ZN14EthernetServer9availableEv+0x144>
						Ethernet.socketDisconnect(i);
 4005430:	e0bffcc3 	ldbu	r2,-13(fp)
 4005434:	1009883a 	mov	r4,r2
 4005438:	40069cc0 	call	40069cc <_ZN13EthernetClass16socketDisconnectEh>
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 400543c:	00000f06 	br	400547c <_ZN14EthernetServer9availableEv+0x144>
					if (stat == SnSR::CLOSE_WAIT) {
						Ethernet.socketDisconnect(i);
						// status becomes LAST_ACK for short time
					}
				}
			} else if (stat == SnSR::LISTEN) {
 4005440:	e0bffd43 	ldbu	r2,-11(fp)
 4005444:	10800518 	cmpnei	r2,r2,20
 4005448:	1000031e 	bne	r2,zero,4005458 <_ZN14EthernetServer9availableEv+0x120>
				listening = true;
 400544c:	00800044 	movi	r2,1
 4005450:	e0bffc05 	stb	r2,-16(fp)
 4005454:	00000a06 	br	4005480 <_ZN14EthernetServer9availableEv+0x148>
			} else if (stat == SnSR::CLOSED) {
 4005458:	e0bffd43 	ldbu	r2,-11(fp)
 400545c:	1000081e 	bne	r2,zero,4005480 <_ZN14EthernetServer9availableEv+0x148>
				server_port[i] = 0;
 4005460:	e0fffcc3 	ldbu	r3,-13(fp)
 4005464:	008100f4 	movhi	r2,1027
 4005468:	109a0404 	addi	r2,r2,26640
 400546c:	18c7883a 	add	r3,r3,r3
 4005470:	10c5883a 	add	r2,r2,r3
 4005474:	1000000d 	sth	zero,0(r2)
 4005478:	00000106 	br	4005480 <_ZN14EthernetServer9availableEv+0x148>
#endif
	for (uint8_t i=0; i < maxindex; i++) {
		if (server_port[i] == _port) {
			uint8_t stat = Ethernet.socketStatus(i);
			if (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT) {
				if (Ethernet.socketRecvAvailable(i) > 0) {
 400547c:	0001883a 	nop
	chip = W5100.getChip();
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4005480:	e0bffcc3 	ldbu	r2,-13(fp)
 4005484:	10800044 	addi	r2,r2,1
 4005488:	e0bffcc5 	stb	r2,-13(fp)
 400548c:	003fc306 	br	400539c <__alt_data_end+0xfc00539c>
			} else if (stat == SnSR::CLOSED) {
				server_port[i] = 0;
			}
		}
	}
	if (!listening) begin();
 4005490:	e0bffc03 	ldbu	r2,-16(fp)
 4005494:	1080005c 	xori	r2,r2,1
 4005498:	10803fcc 	andi	r2,r2,255
 400549c:	10000526 	beq	r2,zero,40054b4 <_ZN14EthernetServer9availableEv+0x17c>
 40054a0:	e0bfff17 	ldw	r2,-4(fp)
 40054a4:	10800017 	ldw	r2,0(r2)
 40054a8:	10800017 	ldw	r2,0(r2)
 40054ac:	e13fff17 	ldw	r4,-4(fp)
 40054b0:	103ee83a 	callr	r2
	return EthernetClient(sockindex);
 40054b4:	e0bffc43 	ldbu	r2,-15(fp)
 40054b8:	100b883a 	mov	r5,r2
 40054bc:	e13ffe17 	ldw	r4,-8(fp)
 40054c0:	40059440 	call	4005944 <_ZN14EthernetClientC1Eh>
}
 40054c4:	e0bffe17 	ldw	r2,-8(fp)
 40054c8:	e037883a 	mov	sp,fp
 40054cc:	dfc00117 	ldw	ra,4(sp)
 40054d0:	df000017 	ldw	fp,0(sp)
 40054d4:	dec00204 	addi	sp,sp,8
 40054d8:	f800283a 	ret

040054dc <_ZN14EthernetServer6acceptEv>:

EthernetClient EthernetServer::accept()
{
 40054dc:	defffa04 	addi	sp,sp,-24
 40054e0:	dfc00515 	stw	ra,20(sp)
 40054e4:	df000415 	stw	fp,16(sp)
 40054e8:	df000404 	addi	fp,sp,16
 40054ec:	e13ffe15 	stw	r4,-8(fp)
 40054f0:	e17fff15 	stw	r5,-4(fp)
	bool listening = false;
 40054f4:	e03ffc05 	stb	zero,-16(fp)
	uint8_t sockindex = MAX_SOCK_NUM;
 40054f8:	00800204 	movi	r2,8
 40054fc:	e0bffc45 	stb	r2,-15(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 4005500:	00800204 	movi	r2,8
 4005504:	e0bffc85 	stb	r2,-14(fp)

	chip = W5100.getChip();
 4005508:	40041740 	call	4004174 <_ZN10W5100Class7getChipEv>
 400550c:	e0bffd05 	stb	r2,-12(fp)
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
 4005510:	e0bffd03 	ldbu	r2,-12(fp)
 4005514:	1000041e 	bne	r2,zero,4005528 <_ZN14EthernetServer6acceptEv+0x4c>
 4005518:	01400204 	movi	r5,8
 400551c:	e13ffe17 	ldw	r4,-8(fp)
 4005520:	40059440 	call	4005944 <_ZN14EthernetClientC1Eh>
 4005524:	00004906 	br	400564c <_ZN14EthernetServer6acceptEv+0x170>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4005528:	e0bffd03 	ldbu	r2,-12(fp)
 400552c:	10800cd8 	cmpnei	r2,r2,51
 4005530:	1000021e 	bne	r2,zero,400553c <_ZN14EthernetServer6acceptEv+0x60>
 4005534:	00800104 	movi	r2,4
 4005538:	e0bffc85 	stb	r2,-14(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 400553c:	e03ffcc5 	stb	zero,-13(fp)
 4005540:	e0fffcc3 	ldbu	r3,-13(fp)
 4005544:	e0bffc83 	ldbu	r2,-14(fp)
 4005548:	1880332e 	bgeu	r3,r2,4005618 <_ZN14EthernetServer6acceptEv+0x13c>
		if (server_port[i] == _port) {
 400554c:	e0fffcc3 	ldbu	r3,-13(fp)
 4005550:	008100f4 	movhi	r2,1027
 4005554:	109a0404 	addi	r2,r2,26640
 4005558:	18c7883a 	add	r3,r3,r3
 400555c:	10c5883a 	add	r2,r2,r3
 4005560:	10c0000b 	ldhu	r3,0(r2)
 4005564:	e0bfff17 	ldw	r2,-4(fp)
 4005568:	1080010b 	ldhu	r2,4(r2)
 400556c:	18ffffcc 	andi	r3,r3,65535
 4005570:	10bfffcc 	andi	r2,r2,65535
 4005574:	1880241e 	bne	r3,r2,4005608 <_ZN14EthernetServer6acceptEv+0x12c>
			uint8_t stat = Ethernet.socketStatus(i);
 4005578:	e0bffcc3 	ldbu	r2,-13(fp)
 400557c:	1009883a 	mov	r4,r2
 4005580:	40068780 	call	4006878 <_ZN13EthernetClass12socketStatusEh>
 4005584:	e0bffd45 	stb	r2,-11(fp)
			if (sockindex == MAX_SOCK_NUM &&
 4005588:	e0bffc43 	ldbu	r2,-15(fp)
 400558c:	10800218 	cmpnei	r2,r2,8
 4005590:	10000f1e 	bne	r2,zero,40055d0 <_ZN14EthernetServer6acceptEv+0xf4>
 4005594:	e0bffd43 	ldbu	r2,-11(fp)
 4005598:	108005e0 	cmpeqi	r2,r2,23
 400559c:	1000031e 	bne	r2,zero,40055ac <_ZN14EthernetServer6acceptEv+0xd0>
			  (stat == SnSR::ESTABLISHED || stat == SnSR::CLOSE_WAIT)) {
 40055a0:	e0bffd43 	ldbu	r2,-11(fp)
 40055a4:	10800718 	cmpnei	r2,r2,28
 40055a8:	1000091e 	bne	r2,zero,40055d0 <_ZN14EthernetServer6acceptEv+0xf4>
				// Return the connected client even if no data received.
				// Some protocols like FTP expect the server to send the
				// first data.
				sockindex = i;
 40055ac:	e0bffcc3 	ldbu	r2,-13(fp)
 40055b0:	e0bffc45 	stb	r2,-15(fp)
				server_port[i] = 0; // only return the client once
 40055b4:	e0fffcc3 	ldbu	r3,-13(fp)
 40055b8:	008100f4 	movhi	r2,1027
 40055bc:	109a0404 	addi	r2,r2,26640
 40055c0:	18c7883a 	add	r3,r3,r3
 40055c4:	10c5883a 	add	r2,r2,r3
 40055c8:	1000000d 	sth	zero,0(r2)
 40055cc:	00000e06 	br	4005608 <_ZN14EthernetServer6acceptEv+0x12c>
			} else if (stat == SnSR::LISTEN) {
 40055d0:	e0bffd43 	ldbu	r2,-11(fp)
 40055d4:	10800518 	cmpnei	r2,r2,20
 40055d8:	1000031e 	bne	r2,zero,40055e8 <_ZN14EthernetServer6acceptEv+0x10c>
				listening = true;
 40055dc:	00800044 	movi	r2,1
 40055e0:	e0bffc05 	stb	r2,-16(fp)
 40055e4:	00000806 	br	4005608 <_ZN14EthernetServer6acceptEv+0x12c>
			} else if (stat == SnSR::CLOSED) {
 40055e8:	e0bffd43 	ldbu	r2,-11(fp)
 40055ec:	1000061e 	bne	r2,zero,4005608 <_ZN14EthernetServer6acceptEv+0x12c>
				server_port[i] = 0;
 40055f0:	e0fffcc3 	ldbu	r3,-13(fp)
 40055f4:	008100f4 	movhi	r2,1027
 40055f8:	109a0404 	addi	r2,r2,26640
 40055fc:	18c7883a 	add	r3,r3,r3
 4005600:	10c5883a 	add	r2,r2,r3
 4005604:	1000000d 	sth	zero,0(r2)
	chip = W5100.getChip();
	if (!chip) return EthernetClient(MAX_SOCK_NUM);
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 4005608:	e0bffcc3 	ldbu	r2,-13(fp)
 400560c:	10800044 	addi	r2,r2,1
 4005610:	e0bffcc5 	stb	r2,-13(fp)
 4005614:	003fca06 	br	4005540 <__alt_data_end+0xfc005540>
			} else if (stat == SnSR::CLOSED) {
				server_port[i] = 0;
			}
		}
	}
	if (!listening) begin();
 4005618:	e0bffc03 	ldbu	r2,-16(fp)
 400561c:	1080005c 	xori	r2,r2,1
 4005620:	10803fcc 	andi	r2,r2,255
 4005624:	10000526 	beq	r2,zero,400563c <_ZN14EthernetServer6acceptEv+0x160>
 4005628:	e0bfff17 	ldw	r2,-4(fp)
 400562c:	10800017 	ldw	r2,0(r2)
 4005630:	10800017 	ldw	r2,0(r2)
 4005634:	e13fff17 	ldw	r4,-4(fp)
 4005638:	103ee83a 	callr	r2
	return EthernetClient(sockindex);
 400563c:	e0bffc43 	ldbu	r2,-15(fp)
 4005640:	100b883a 	mov	r5,r2
 4005644:	e13ffe17 	ldw	r4,-8(fp)
 4005648:	40059440 	call	4005944 <_ZN14EthernetClientC1Eh>
}
 400564c:	e0bffe17 	ldw	r2,-8(fp)
 4005650:	e037883a 	mov	sp,fp
 4005654:	dfc00117 	ldw	ra,4(sp)
 4005658:	df000017 	ldw	fp,0(sp)
 400565c:	dec00204 	addi	sp,sp,8
 4005660:	f800283a 	ret

04005664 <_ZN14EthernetServercvbEv>:

EthernetServer::operator bool()
{
 4005664:	defffc04 	addi	sp,sp,-16
 4005668:	dfc00315 	stw	ra,12(sp)
 400566c:	df000215 	stw	fp,8(sp)
 4005670:	df000204 	addi	fp,sp,8
 4005674:	e13fff15 	stw	r4,-4(fp)
	uint8_t maxindex=MAX_SOCK_NUM;
 4005678:	00800204 	movi	r2,8
 400567c:	e0bffe05 	stb	r2,-8(fp)
#if MAX_SOCK_NUM > 4
	if (W5100.getChip() == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4005680:	40041740 	call	4004174 <_ZN10W5100Class7getChipEv>
 4005684:	10803fcc 	andi	r2,r2,255
 4005688:	10800ce0 	cmpeqi	r2,r2,51
 400568c:	10803fcc 	andi	r2,r2,255
 4005690:	10000226 	beq	r2,zero,400569c <_ZN14EthernetServercvbEv+0x38>
 4005694:	00800104 	movi	r2,4
 4005698:	e0bffe05 	stb	r2,-8(fp)
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 400569c:	e03ffe45 	stb	zero,-7(fp)
 40056a0:	e0fffe43 	ldbu	r3,-7(fp)
 40056a4:	e0bffe03 	ldbu	r2,-8(fp)
 40056a8:	1880182e 	bgeu	r3,r2,400570c <_ZN14EthernetServercvbEv+0xa8>
		if (server_port[i] == _port) {
 40056ac:	e0fffe43 	ldbu	r3,-7(fp)
 40056b0:	008100f4 	movhi	r2,1027
 40056b4:	109a0404 	addi	r2,r2,26640
 40056b8:	18c7883a 	add	r3,r3,r3
 40056bc:	10c5883a 	add	r2,r2,r3
 40056c0:	10c0000b 	ldhu	r3,0(r2)
 40056c4:	e0bfff17 	ldw	r2,-4(fp)
 40056c8:	1080010b 	ldhu	r2,4(r2)
 40056cc:	18ffffcc 	andi	r3,r3,65535
 40056d0:	10bfffcc 	andi	r2,r2,65535
 40056d4:	1880091e 	bne	r3,r2,40056fc <_ZN14EthernetServercvbEv+0x98>
			if (Ethernet.socketStatus(i) == SnSR::LISTEN) {
 40056d8:	e0bffe43 	ldbu	r2,-7(fp)
 40056dc:	1009883a 	mov	r4,r2
 40056e0:	40068780 	call	4006878 <_ZN13EthernetClass12socketStatusEh>
 40056e4:	10803fcc 	andi	r2,r2,255
 40056e8:	10800520 	cmpeqi	r2,r2,20
 40056ec:	10803fcc 	andi	r2,r2,255
 40056f0:	10000226 	beq	r2,zero,40056fc <_ZN14EthernetServercvbEv+0x98>
				return true; // server is listening for incoming clients
 40056f4:	00800044 	movi	r2,1
 40056f8:	00000506 	br	4005710 <_ZN14EthernetServercvbEv+0xac>
{
	uint8_t maxindex=MAX_SOCK_NUM;
#if MAX_SOCK_NUM > 4
	if (W5100.getChip() == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	for (uint8_t i=0; i < maxindex; i++) {
 40056fc:	e0bffe43 	ldbu	r2,-7(fp)
 4005700:	10800044 	addi	r2,r2,1
 4005704:	e0bffe45 	stb	r2,-7(fp)
 4005708:	003fe506 	br	40056a0 <__alt_data_end+0xfc0056a0>
			if (Ethernet.socketStatus(i) == SnSR::LISTEN) {
				return true; // server is listening for incoming clients
			}
		}
	}
	return false;
 400570c:	0005883a 	mov	r2,zero
}
 4005710:	e037883a 	mov	sp,fp
 4005714:	dfc00117 	ldw	ra,4(sp)
 4005718:	df000017 	ldw	fp,0(sp)
 400571c:	dec00204 	addi	sp,sp,8
 4005720:	f800283a 	ret

04005724 <_ZN14EthernetServer5writeEh>:
	}
}
#endif

size_t EthernetServer::write(uint8_t b)
{
 4005724:	defffc04 	addi	sp,sp,-16
 4005728:	dfc00315 	stw	ra,12(sp)
 400572c:	df000215 	stw	fp,8(sp)
 4005730:	df000204 	addi	fp,sp,8
 4005734:	e13ffe15 	stw	r4,-8(fp)
 4005738:	2805883a 	mov	r2,r5
 400573c:	e0bfff05 	stb	r2,-4(fp)
	return write(&b, 1);
 4005740:	e0bffe17 	ldw	r2,-8(fp)
 4005744:	10800017 	ldw	r2,0(r2)
 4005748:	10800204 	addi	r2,r2,8
 400574c:	10800017 	ldw	r2,0(r2)
 4005750:	e0ffff04 	addi	r3,fp,-4
 4005754:	01800044 	movi	r6,1
 4005758:	180b883a 	mov	r5,r3
 400575c:	e13ffe17 	ldw	r4,-8(fp)
 4005760:	103ee83a 	callr	r2
}
 4005764:	e037883a 	mov	sp,fp
 4005768:	dfc00117 	ldw	ra,4(sp)
 400576c:	df000017 	ldw	fp,0(sp)
 4005770:	dec00204 	addi	sp,sp,8
 4005774:	f800283a 	ret

04005778 <_ZN14EthernetServer5writeEPKhj>:

size_t EthernetServer::write(const uint8_t *buffer, size_t size)
{
 4005778:	defff804 	addi	sp,sp,-32
 400577c:	dfc00715 	stw	ra,28(sp)
 4005780:	df000615 	stw	fp,24(sp)
 4005784:	df000604 	addi	fp,sp,24
 4005788:	e13ffd15 	stw	r4,-12(fp)
 400578c:	e17ffe15 	stw	r5,-8(fp)
 4005790:	e1bfff15 	stw	r6,-4(fp)
	uint8_t chip, maxindex=MAX_SOCK_NUM;
 4005794:	00800204 	movi	r2,8
 4005798:	e0bffa05 	stb	r2,-24(fp)

	chip = W5100.getChip();
 400579c:	40041740 	call	4004174 <_ZN10W5100Class7getChipEv>
 40057a0:	e0bffa85 	stb	r2,-22(fp)
	if (!chip) return 0;
 40057a4:	e0bffa83 	ldbu	r2,-22(fp)
 40057a8:	1000021e 	bne	r2,zero,40057b4 <_ZN14EthernetServer5writeEPKhj+0x3c>
 40057ac:	0005883a 	mov	r2,zero
 40057b0:	00002e06 	br	400586c <_ZN14EthernetServer5writeEPKhj+0xf4>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 40057b4:	e0bffa83 	ldbu	r2,-22(fp)
 40057b8:	10800cd8 	cmpnei	r2,r2,51
 40057bc:	1000021e 	bne	r2,zero,40057c8 <_ZN14EthernetServer5writeEPKhj+0x50>
 40057c0:	00800104 	movi	r2,4
 40057c4:	e0bffa05 	stb	r2,-24(fp)
#endif
	available();
 40057c8:	e0bffb04 	addi	r2,fp,-20
 40057cc:	e17ffd17 	ldw	r5,-12(fp)
 40057d0:	1009883a 	mov	r4,r2
 40057d4:	40053380 	call	4005338 <_ZN14EthernetServer9availableEv>
 40057d8:	e0bffb04 	addi	r2,fp,-20
 40057dc:	1009883a 	mov	r4,r2
 40057e0:	4004f1c0 	call	4004f1c <_ZN14EthernetClientD1Ev>
	for (uint8_t i=0; i < maxindex; i++) {
 40057e4:	e03ffa45 	stb	zero,-23(fp)
 40057e8:	e0fffa43 	ldbu	r3,-23(fp)
 40057ec:	e0bffa03 	ldbu	r2,-24(fp)
 40057f0:	18801d2e 	bgeu	r3,r2,4005868 <_ZN14EthernetServer5writeEPKhj+0xf0>
		if (server_port[i] == _port) {
 40057f4:	e0fffa43 	ldbu	r3,-23(fp)
 40057f8:	008100f4 	movhi	r2,1027
 40057fc:	109a0404 	addi	r2,r2,26640
 4005800:	18c7883a 	add	r3,r3,r3
 4005804:	10c5883a 	add	r2,r2,r3
 4005808:	10c0000b 	ldhu	r3,0(r2)
 400580c:	e0bffd17 	ldw	r2,-12(fp)
 4005810:	1080010b 	ldhu	r2,4(r2)
 4005814:	18ffffcc 	andi	r3,r3,65535
 4005818:	10bfffcc 	andi	r2,r2,65535
 400581c:	18800e1e 	bne	r3,r2,4005858 <_ZN14EthernetServer5writeEPKhj+0xe0>
			if (Ethernet.socketStatus(i) == SnSR::ESTABLISHED) {
 4005820:	e0bffa43 	ldbu	r2,-23(fp)
 4005824:	1009883a 	mov	r4,r2
 4005828:	40068780 	call	4006878 <_ZN13EthernetClass12socketStatusEh>
 400582c:	10803fcc 	andi	r2,r2,255
 4005830:	108005e0 	cmpeqi	r2,r2,23
 4005834:	10803fcc 	andi	r2,r2,255
 4005838:	10000726 	beq	r2,zero,4005858 <_ZN14EthernetServer5writeEPKhj+0xe0>
				Ethernet.socketSend(i, buffer, size);
 400583c:	e0fffa43 	ldbu	r3,-23(fp)
 4005840:	e0bfff17 	ldw	r2,-4(fp)
 4005844:	10bfffcc 	andi	r2,r2,65535
 4005848:	100d883a 	mov	r6,r2
 400584c:	e17ffe17 	ldw	r5,-8(fp)
 4005850:	1809883a 	mov	r4,r3
 4005854:	40071500 	call	4007150 <_ZN13EthernetClass10socketSendEhPKht>
	if (!chip) return 0;
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	available();
	for (uint8_t i=0; i < maxindex; i++) {
 4005858:	e0bffa43 	ldbu	r2,-23(fp)
 400585c:	10800044 	addi	r2,r2,1
 4005860:	e0bffa45 	stb	r2,-23(fp)
 4005864:	003fe006 	br	40057e8 <__alt_data_end+0xfc0057e8>
			if (Ethernet.socketStatus(i) == SnSR::ESTABLISHED) {
				Ethernet.socketSend(i, buffer, size);
			}
		}
	}
	return size;
 4005868:	e0bfff17 	ldw	r2,-4(fp)
}
 400586c:	e037883a 	mov	sp,fp
 4005870:	dfc00117 	ldw	ra,4(sp)
 4005874:	df000017 	ldw	fp,0(sp)
 4005878:	dec00204 	addi	sp,sp,8
 400587c:	f800283a 	ret

04005880 <_Z41__static_initialization_and_destruction_0ii>:
 4005880:	defffb04 	addi	sp,sp,-20
 4005884:	dfc00415 	stw	ra,16(sp)
 4005888:	df000315 	stw	fp,12(sp)
 400588c:	df000304 	addi	fp,sp,12
 4005890:	e13ffe15 	stw	r4,-8(fp)
 4005894:	e17fff15 	stw	r5,-4(fp)
 4005898:	e0bffe17 	ldw	r2,-8(fp)
 400589c:	10800058 	cmpnei	r2,r2,1
 40058a0:	1000091e 	bne	r2,zero,40058c8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40058a4:	e0ffff17 	ldw	r3,-4(fp)
 40058a8:	00bfffd4 	movui	r2,65535
 40058ac:	1880061e 	bne	r3,r2,40058c8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40058b0:	d8000015 	stw	zero,0(sp)
 40058b4:	000f883a 	mov	r7,zero
 40058b8:	000d883a 	mov	r6,zero
 40058bc:	000b883a 	mov	r5,zero
 40058c0:	d112d504 	addi	r4,gp,19284
 40058c4:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
 40058c8:	0001883a 	nop
 40058cc:	e037883a 	mov	sp,fp
 40058d0:	dfc00117 	ldw	ra,4(sp)
 40058d4:	df000017 	ldw	fp,0(sp)
 40058d8:	dec00204 	addi	sp,sp,8
 40058dc:	f800283a 	ret

040058e0 <_GLOBAL__sub_I__ZN14EthernetServer11server_portE>:
 40058e0:	defffe04 	addi	sp,sp,-8
 40058e4:	dfc00115 	stw	ra,4(sp)
 40058e8:	df000015 	stw	fp,0(sp)
 40058ec:	d839883a 	mov	fp,sp
 40058f0:	017fffd4 	movui	r5,65535
 40058f4:	01000044 	movi	r4,1
 40058f8:	40058800 	call	4005880 <_Z41__static_initialization_and_destruction_0ii>
 40058fc:	e037883a 	mov	sp,fp
 4005900:	dfc00117 	ldw	ra,4(sp)
 4005904:	df000017 	ldw	fp,0(sp)
 4005908:	dec00204 	addi	sp,sp,8
 400590c:	f800283a 	ret

04005910 <_ZN6ClientC1Ev>:
#ifndef client_h
#define client_h

#include "utility/IPAddress.h"

class Client {
 4005910:	defffe04 	addi	sp,sp,-8
 4005914:	df000115 	stw	fp,4(sp)
 4005918:	df000104 	addi	fp,sp,4
 400591c:	e13fff15 	stw	r4,-4(fp)
 4005920:	008100b4 	movhi	r2,1026
 4005924:	10b2b304 	addi	r2,r2,-13620
 4005928:	e0ffff17 	ldw	r3,-4(fp)
 400592c:	18800015 	stw	r2,0(r3)
 4005930:	0001883a 	nop
 4005934:	e037883a 	mov	sp,fp
 4005938:	df000017 	ldw	fp,0(sp)
 400593c:	dec00104 	addi	sp,sp,4
 4005940:	f800283a 	ret

04005944 <_ZN14EthernetClientC1Eh>:


class EthernetClient : public Client {
public:
	EthernetClient() : _sockindex(MAX_SOCK_NUM), _timeout(1000) { }
	EthernetClient(uint8_t s) : _sockindex(s), _timeout(1000) { }
 4005944:	defffc04 	addi	sp,sp,-16
 4005948:	dfc00315 	stw	ra,12(sp)
 400594c:	df000215 	stw	fp,8(sp)
 4005950:	df000204 	addi	fp,sp,8
 4005954:	e13ffe15 	stw	r4,-8(fp)
 4005958:	2805883a 	mov	r2,r5
 400595c:	e0bfff05 	stb	r2,-4(fp)
 4005960:	e0bffe17 	ldw	r2,-8(fp)
 4005964:	1009883a 	mov	r4,r2
 4005968:	40059100 	call	4005910 <_ZN6ClientC1Ev>
 400596c:	008100b4 	movhi	r2,1026
 4005970:	10b28a04 	addi	r2,r2,-13784
 4005974:	e0fffe17 	ldw	r3,-8(fp)
 4005978:	18800015 	stw	r2,0(r3)
 400597c:	e0bffe17 	ldw	r2,-8(fp)
 4005980:	e0ffff03 	ldbu	r3,-4(fp)
 4005984:	10c00105 	stb	r3,4(r2)
 4005988:	e0bffe17 	ldw	r2,-8(fp)
 400598c:	00c0fa04 	movi	r3,1000
 4005990:	10c0018d 	sth	r3,6(r2)
 4005994:	0001883a 	nop
 4005998:	e037883a 	mov	sp,fp
 400599c:	dfc00117 	ldw	ra,4(sp)
 40059a0:	df000017 	ldw	fp,0(sp)
 40059a4:	dec00204 	addi	sp,sp,8
 40059a8:	f800283a 	ret

040059ac <_ZN11EthernetUDP5beginEt>:
#include "Ethernet.h"
#include "utility/w5100.h"

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port)
{
 40059ac:	defffc04 	addi	sp,sp,-16
 40059b0:	dfc00315 	stw	ra,12(sp)
 40059b4:	df000215 	stw	fp,8(sp)
 40059b8:	df000204 	addi	fp,sp,8
 40059bc:	e13ffe15 	stw	r4,-8(fp)
 40059c0:	2805883a 	mov	r2,r5
 40059c4:	e0bfff0d 	sth	r2,-4(fp)
	if (sockindex < MAX_SOCK_NUM) Ethernet.socketClose(sockindex);
 40059c8:	e0bffe17 	ldw	r2,-8(fp)
 40059cc:	10800403 	ldbu	r2,16(r2)
 40059d0:	10803fcc 	andi	r2,r2,255
 40059d4:	10800228 	cmpgeui	r2,r2,8
 40059d8:	1000051e 	bne	r2,zero,40059f0 <_ZN11EthernetUDP5beginEt+0x44>
 40059dc:	e0bffe17 	ldw	r2,-8(fp)
 40059e0:	10800403 	ldbu	r2,16(r2)
 40059e4:	10803fcc 	andi	r2,r2,255
 40059e8:	1009883a 	mov	r4,r2
 40059ec:	40068b80 	call	40068b8 <_ZN13EthernetClass11socketCloseEh>
	sockindex = Ethernet.socketBegin(SnMR::UDP, port);
 40059f0:	e0bfff0b 	ldhu	r2,-4(fp)
 40059f4:	100b883a 	mov	r5,r2
 40059f8:	01000084 	movi	r4,2
 40059fc:	400628c0 	call	400628c <_ZN13EthernetClass11socketBeginEht>
 4005a00:	1007883a 	mov	r3,r2
 4005a04:	e0bffe17 	ldw	r2,-8(fp)
 4005a08:	10c00405 	stb	r3,16(r2)
	if (sockindex >= MAX_SOCK_NUM) return 0;
 4005a0c:	e0bffe17 	ldw	r2,-8(fp)
 4005a10:	10800403 	ldbu	r2,16(r2)
 4005a14:	10803fcc 	andi	r2,r2,255
 4005a18:	10800230 	cmpltui	r2,r2,8
 4005a1c:	1000021e 	bne	r2,zero,4005a28 <_ZN11EthernetUDP5beginEt+0x7c>
 4005a20:	0005883a 	mov	r2,zero
 4005a24:	00000606 	br	4005a40 <_ZN11EthernetUDP5beginEt+0x94>
	_port = port;
 4005a28:	e0bffe17 	ldw	r2,-8(fp)
 4005a2c:	e0ffff0b 	ldhu	r3,-4(fp)
 4005a30:	10c0010d 	sth	r3,4(r2)
	_remaining = 0;
 4005a34:	e0bffe17 	ldw	r2,-8(fp)
 4005a38:	1000048d 	sth	zero,18(r2)
	return 1;
 4005a3c:	00800044 	movi	r2,1
}
 4005a40:	e037883a 	mov	sp,fp
 4005a44:	dfc00117 	ldw	ra,4(sp)
 4005a48:	df000017 	ldw	fp,0(sp)
 4005a4c:	dec00204 	addi	sp,sp,8
 4005a50:	f800283a 	ret

04005a54 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available()
{
 4005a54:	defffe04 	addi	sp,sp,-8
 4005a58:	df000115 	stw	fp,4(sp)
 4005a5c:	df000104 	addi	fp,sp,4
 4005a60:	e13fff15 	stw	r4,-4(fp)
	return _remaining;
 4005a64:	e0bfff17 	ldw	r2,-4(fp)
 4005a68:	1080048b 	ldhu	r2,18(r2)
 4005a6c:	10bfffcc 	andi	r2,r2,65535
}
 4005a70:	e037883a 	mov	sp,fp
 4005a74:	df000017 	ldw	fp,0(sp)
 4005a78:	dec00104 	addi	sp,sp,4
 4005a7c:	f800283a 	ret

04005a80 <_ZN11EthernetUDP4stopEv>:

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
 4005a80:	defffd04 	addi	sp,sp,-12
 4005a84:	dfc00215 	stw	ra,8(sp)
 4005a88:	df000115 	stw	fp,4(sp)
 4005a8c:	df000104 	addi	fp,sp,4
 4005a90:	e13fff15 	stw	r4,-4(fp)
	if (sockindex < MAX_SOCK_NUM) {
 4005a94:	e0bfff17 	ldw	r2,-4(fp)
 4005a98:	10800403 	ldbu	r2,16(r2)
 4005a9c:	10803fcc 	andi	r2,r2,255
 4005aa0:	10800228 	cmpgeui	r2,r2,8
 4005aa4:	1000081e 	bne	r2,zero,4005ac8 <_ZN11EthernetUDP4stopEv+0x48>
		Ethernet.socketClose(sockindex);
 4005aa8:	e0bfff17 	ldw	r2,-4(fp)
 4005aac:	10800403 	ldbu	r2,16(r2)
 4005ab0:	10803fcc 	andi	r2,r2,255
 4005ab4:	1009883a 	mov	r4,r2
 4005ab8:	40068b80 	call	40068b8 <_ZN13EthernetClass11socketCloseEh>
		sockindex = MAX_SOCK_NUM;
 4005abc:	e0bfff17 	ldw	r2,-4(fp)
 4005ac0:	00c00204 	movi	r3,8
 4005ac4:	10c00405 	stb	r3,16(r2)
	}
}
 4005ac8:	0001883a 	nop
 4005acc:	e037883a 	mov	sp,fp
 4005ad0:	dfc00117 	ldw	ra,4(sp)
 4005ad4:	df000017 	ldw	fp,0(sp)
 4005ad8:	dec00204 	addi	sp,sp,8
 4005adc:	f800283a 	ret

04005ae0 <_ZN11EthernetUDP11beginPacketEPKct>:

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
 4005ae0:	defff104 	addi	sp,sp,-60
 4005ae4:	dfc00e15 	stw	ra,56(sp)
 4005ae8:	df000d15 	stw	fp,52(sp)
 4005aec:	df000d04 	addi	fp,sp,52
 4005af0:	e13ffd15 	stw	r4,-12(fp)
 4005af4:	e17ffe15 	stw	r5,-8(fp)
 4005af8:	3005883a 	mov	r2,r6
 4005afc:	e0bfff0d 	sth	r2,-4(fp)
	// Look up the host first
	int ret = 0;
 4005b00:	e03ff315 	stw	zero,-52(fp)
	DNSClient dns;
 4005b04:	e0bff504 	addi	r2,fp,-44
 4005b08:	1009883a 	mov	r4,r2
 4005b0c:	40052500 	call	4005250 <_ZN9DNSClientC1Ev>
	IPAddress remote_addr;
 4005b10:	e0bffc04 	addi	r2,fp,-16
 4005b14:	1009883a 	mov	r4,r2
 4005b18:	4007c9c0 	call	4007c9c <_ZN9IPAddressC1Ev>

	dns.begin(Ethernet.dnsServerIP());
 4005b1c:	4004efc0 	call	4004efc <_ZN13EthernetClass11dnsServerIPEv>
 4005b20:	e0bff415 	stw	r2,-48(fp)
 4005b24:	e0fff404 	addi	r3,fp,-48
 4005b28:	e0bff504 	addi	r2,fp,-44
 4005b2c:	180b883a 	mov	r5,r3
 4005b30:	1009883a 	mov	r4,r2
 4005b34:	40026b80 	call	40026b8 <_ZN9DNSClient5beginERK9IPAddress>
	ret = dns.getHostByName(host, remote_addr);
 4005b38:	e0fffc04 	addi	r3,fp,-16
 4005b3c:	e0bff504 	addi	r2,fp,-44
 4005b40:	01c4e204 	movi	r7,5000
 4005b44:	180d883a 	mov	r6,r3
 4005b48:	e17ffe17 	ldw	r5,-8(fp)
 4005b4c:	1009883a 	mov	r4,r2
 4005b50:	40028300 	call	4002830 <_ZN9DNSClient13getHostByNameEPKcR9IPAddresst>
 4005b54:	e0bff315 	stw	r2,-52(fp)
	if (ret != 1) return ret;
 4005b58:	e0bff317 	ldw	r2,-52(fp)
 4005b5c:	10800060 	cmpeqi	r2,r2,1
 4005b60:	1000021e 	bne	r2,zero,4005b6c <_ZN11EthernetUDP11beginPacketEPKct+0x8c>
 4005b64:	e0bff317 	ldw	r2,-52(fp)
 4005b68:	00000906 	br	4005b90 <_ZN11EthernetUDP11beginPacketEPKct+0xb0>
	return beginPacket(remote_addr, port);
 4005b6c:	e0bffd17 	ldw	r2,-12(fp)
 4005b70:	10800017 	ldw	r2,0(r2)
 4005b74:	10800304 	addi	r2,r2,12
 4005b78:	10800017 	ldw	r2,0(r2)
 4005b7c:	e0ffff0b 	ldhu	r3,-4(fp)
 4005b80:	180d883a 	mov	r6,r3
 4005b84:	e17ffc17 	ldw	r5,-16(fp)
 4005b88:	e13ffd17 	ldw	r4,-12(fp)
 4005b8c:	103ee83a 	callr	r2
}
 4005b90:	e037883a 	mov	sp,fp
 4005b94:	dfc00117 	ldw	ra,4(sp)
 4005b98:	df000017 	ldw	fp,0(sp)
 4005b9c:	dec00204 	addi	sp,sp,8
 4005ba0:	f800283a 	ret

04005ba4 <_ZN11EthernetUDP11beginPacketE9IPAddresst>:

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
 4005ba4:	defffa04 	addi	sp,sp,-24
 4005ba8:	dfc00515 	stw	ra,20(sp)
 4005bac:	df000415 	stw	fp,16(sp)
 4005bb0:	dc000315 	stw	r16,12(sp)
 4005bb4:	df000404 	addi	fp,sp,16
 4005bb8:	e13ffc15 	stw	r4,-16(fp)
 4005bbc:	e17ffd15 	stw	r5,-12(fp)
 4005bc0:	3005883a 	mov	r2,r6
 4005bc4:	e0bffe0d 	sth	r2,-8(fp)
	_offset = 0;
 4005bc8:	e0bffc17 	ldw	r2,-16(fp)
 4005bcc:	1000038d 	sth	zero,14(r2)
	//Serial.printf("UDP beginPacket\n");
	return Ethernet.socketStartUDP(sockindex, rawIPAddress(ip), port);
 4005bd0:	e0bffc17 	ldw	r2,-16(fp)
 4005bd4:	10800403 	ldbu	r2,16(r2)
 4005bd8:	14003fcc 	andi	r16,r2,255
 4005bdc:	e0bffc17 	ldw	r2,-16(fp)
 4005be0:	e0fffd04 	addi	r3,fp,-12
 4005be4:	180b883a 	mov	r5,r3
 4005be8:	1009883a 	mov	r4,r2
 4005bec:	400619c0 	call	400619c <_ZN3UDP12rawIPAddressER9IPAddress>
 4005bf0:	1007883a 	mov	r3,r2
 4005bf4:	e0bffe0b 	ldhu	r2,-8(fp)
 4005bf8:	100d883a 	mov	r6,r2
 4005bfc:	180b883a 	mov	r5,r3
 4005c00:	8009883a 	mov	r4,r16
 4005c04:	40073940 	call	4007394 <_ZN13EthernetClass14socketStartUDPEhPht>
 4005c08:	10803fcc 	andi	r2,r2,255
}
 4005c0c:	e6ffff04 	addi	sp,fp,-4
 4005c10:	dfc00217 	ldw	ra,8(sp)
 4005c14:	df000117 	ldw	fp,4(sp)
 4005c18:	dc000017 	ldw	r16,0(sp)
 4005c1c:	dec00304 	addi	sp,sp,12
 4005c20:	f800283a 	ret

04005c24 <_ZN11EthernetUDP9endPacketEv>:

int EthernetUDP::endPacket()
{
 4005c24:	defffd04 	addi	sp,sp,-12
 4005c28:	dfc00215 	stw	ra,8(sp)
 4005c2c:	df000115 	stw	fp,4(sp)
 4005c30:	df000104 	addi	fp,sp,4
 4005c34:	e13fff15 	stw	r4,-4(fp)
	return Ethernet.socketSendUDP(sockindex);
 4005c38:	e0bfff17 	ldw	r2,-4(fp)
 4005c3c:	10800403 	ldbu	r2,16(r2)
 4005c40:	10803fcc 	andi	r2,r2,255
 4005c44:	1009883a 	mov	r4,r2
 4005c48:	40074500 	call	4007450 <_ZN13EthernetClass13socketSendUDPEh>
 4005c4c:	10803fcc 	andi	r2,r2,255
}
 4005c50:	e037883a 	mov	sp,fp
 4005c54:	dfc00117 	ldw	ra,4(sp)
 4005c58:	df000017 	ldw	fp,0(sp)
 4005c5c:	dec00204 	addi	sp,sp,8
 4005c60:	f800283a 	ret

04005c64 <_ZN11EthernetUDP5writeEh>:

size_t EthernetUDP::write(uint8_t byte)
{
 4005c64:	defffd04 	addi	sp,sp,-12
 4005c68:	df000215 	stw	fp,8(sp)
 4005c6c:	df000204 	addi	fp,sp,8
 4005c70:	e13ffe15 	stw	r4,-8(fp)
 4005c74:	2805883a 	mov	r2,r5
 4005c78:	e0bfff05 	stb	r2,-4(fp)
	// TODO fix
	//return write(&byte, 1);
}
 4005c7c:	0001883a 	nop
 4005c80:	e037883a 	mov	sp,fp
 4005c84:	df000017 	ldw	fp,0(sp)
 4005c88:	dec00104 	addi	sp,sp,4
 4005c8c:	f800283a 	ret

04005c90 <_ZN11EthernetUDP5writeEPKhj>:

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
 4005c90:	defffa04 	addi	sp,sp,-24
 4005c94:	dfc00515 	stw	ra,20(sp)
 4005c98:	df000415 	stw	fp,16(sp)
 4005c9c:	df000404 	addi	fp,sp,16
 4005ca0:	e13ffd15 	stw	r4,-12(fp)
 4005ca4:	e17ffe15 	stw	r5,-8(fp)
 4005ca8:	e1bfff15 	stw	r6,-4(fp)
	//Serial.printf("UDP write %d\n", size);
	uint16_t bytes_written = Ethernet.socketBufferData(sockindex, _offset, buffer, size);
 4005cac:	e0bffd17 	ldw	r2,-12(fp)
 4005cb0:	10800403 	ldbu	r2,16(r2)
 4005cb4:	10c03fcc 	andi	r3,r2,255
 4005cb8:	e0bffd17 	ldw	r2,-12(fp)
 4005cbc:	1080038b 	ldhu	r2,14(r2)
 4005cc0:	113fffcc 	andi	r4,r2,65535
 4005cc4:	e0bfff17 	ldw	r2,-4(fp)
 4005cc8:	10bfffcc 	andi	r2,r2,65535
 4005ccc:	100f883a 	mov	r7,r2
 4005cd0:	e1bffe17 	ldw	r6,-8(fp)
 4005cd4:	200b883a 	mov	r5,r4
 4005cd8:	1809883a 	mov	r4,r3
 4005cdc:	40073000 	call	4007300 <_ZN13EthernetClass16socketBufferDataEhtPKht>
 4005ce0:	e0bffc0d 	sth	r2,-16(fp)
	_offset += bytes_written;
 4005ce4:	e0bffd17 	ldw	r2,-12(fp)
 4005ce8:	10c0038b 	ldhu	r3,14(r2)
 4005cec:	e0bffc0b 	ldhu	r2,-16(fp)
 4005cf0:	1885883a 	add	r2,r3,r2
 4005cf4:	1007883a 	mov	r3,r2
 4005cf8:	e0bffd17 	ldw	r2,-12(fp)
 4005cfc:	10c0038d 	sth	r3,14(r2)
	return bytes_written;
 4005d00:	e0bffc0b 	ldhu	r2,-16(fp)
}
 4005d04:	e037883a 	mov	sp,fp
 4005d08:	dfc00117 	ldw	ra,4(sp)
 4005d0c:	df000017 	ldw	fp,0(sp)
 4005d10:	dec00204 	addi	sp,sp,8
 4005d14:	f800283a 	ret

04005d18 <_ZN11EthernetUDP11parsePacketEv>:

int EthernetUDP::parsePacket()
{
 4005d18:	defffa04 	addi	sp,sp,-24
 4005d1c:	dfc00515 	stw	ra,20(sp)
 4005d20:	df000415 	stw	fp,16(sp)
 4005d24:	df000404 	addi	fp,sp,16
 4005d28:	e13fff15 	stw	r4,-4(fp)
	// discard any remaining bytes in the last packet
	while (_remaining) {
 4005d2c:	e0bfff17 	ldw	r2,-4(fp)
 4005d30:	1080048b 	ldhu	r2,18(r2)
 4005d34:	10bfffcc 	andi	r2,r2,65535
 4005d38:	10000126 	beq	r2,zero,4005d40 <_ZN11EthernetUDP11parsePacketEv+0x28>
 4005d3c:	003ffb06 	br	4005d2c <__alt_data_end+0xfc005d2c>

		// TODO fix
		//read((uint8_t *)NULL, _remaining);
	}

	if (Ethernet.socketRecvAvailable(sockindex) > 0) {
 4005d40:	e0bfff17 	ldw	r2,-4(fp)
 4005d44:	10800403 	ldbu	r2,16(r2)
 4005d48:	10803fcc 	andi	r2,r2,255
 4005d4c:	1009883a 	mov	r4,r2
 4005d50:	4006e340 	call	4006e34 <_ZN13EthernetClass19socketRecvAvailableEh>
 4005d54:	10bfffcc 	andi	r2,r2,65535
 4005d58:	1004c03a 	cmpne	r2,r2,zero
 4005d5c:	10803fcc 	andi	r2,r2,255
 4005d60:	10003426 	beq	r2,zero,4005e34 <_ZN11EthernetUDP11parsePacketEv+0x11c>
		//HACK - hand-parse the UDP packet using TCP recv method
		uint8_t tmpBuf[8];
		int ret=0;
 4005d64:	e03ffc15 	stw	zero,-16(fp)
		//read 8 header bytes and get IP and port from it
		ret = Ethernet.socketRecv(sockindex, tmpBuf, 8);
 4005d68:	e0bfff17 	ldw	r2,-4(fp)
 4005d6c:	10800403 	ldbu	r2,16(r2)
 4005d70:	10803fcc 	andi	r2,r2,255
 4005d74:	e0fffd04 	addi	r3,fp,-12
 4005d78:	01800204 	movi	r6,8
 4005d7c:	180b883a 	mov	r5,r3
 4005d80:	1009883a 	mov	r4,r2
 4005d84:	4006b940 	call	4006b94 <_ZN13EthernetClass10socketRecvEhPhs>
 4005d88:	e0bffc15 	stw	r2,-16(fp)
		if (ret > 0) {
 4005d8c:	e0bffc17 	ldw	r2,-16(fp)
 4005d90:	0080260e 	bge	zero,r2,4005e2c <_ZN11EthernetUDP11parsePacketEv+0x114>
			_remoteIP = tmpBuf;
 4005d94:	e0bfff17 	ldw	r2,-4(fp)
 4005d98:	10800204 	addi	r2,r2,8
 4005d9c:	e0fffd04 	addi	r3,fp,-12
 4005da0:	180b883a 	mov	r5,r3
 4005da4:	1009883a 	mov	r4,r2
 4005da8:	4007f580 	call	4007f58 <_ZN9IPAddressaSEPKh>
			_remotePort = tmpBuf[4];
 4005dac:	e0bffe03 	ldbu	r2,-8(fp)
 4005db0:	10c03fcc 	andi	r3,r2,255
 4005db4:	e0bfff17 	ldw	r2,-4(fp)
 4005db8:	10c0030d 	sth	r3,12(r2)
			_remotePort = (_remotePort << 8) + tmpBuf[5];
 4005dbc:	e0bfff17 	ldw	r2,-4(fp)
 4005dc0:	1080030b 	ldhu	r2,12(r2)
 4005dc4:	1004923a 	slli	r2,r2,8
 4005dc8:	1007883a 	mov	r3,r2
 4005dcc:	e0bffe43 	ldbu	r2,-7(fp)
 4005dd0:	10803fcc 	andi	r2,r2,255
 4005dd4:	1885883a 	add	r2,r3,r2
 4005dd8:	1007883a 	mov	r3,r2
 4005ddc:	e0bfff17 	ldw	r2,-4(fp)
 4005de0:	10c0030d 	sth	r3,12(r2)
			_remaining = tmpBuf[6];
 4005de4:	e0bffe83 	ldbu	r2,-6(fp)
 4005de8:	10c03fcc 	andi	r3,r2,255
 4005dec:	e0bfff17 	ldw	r2,-4(fp)
 4005df0:	10c0048d 	sth	r3,18(r2)
			_remaining = (_remaining << 8) + tmpBuf[7];
 4005df4:	e0bfff17 	ldw	r2,-4(fp)
 4005df8:	1080048b 	ldhu	r2,18(r2)
 4005dfc:	1004923a 	slli	r2,r2,8
 4005e00:	1007883a 	mov	r3,r2
 4005e04:	e0bffec3 	ldbu	r2,-5(fp)
 4005e08:	10803fcc 	andi	r2,r2,255
 4005e0c:	1885883a 	add	r2,r3,r2
 4005e10:	1007883a 	mov	r3,r2
 4005e14:	e0bfff17 	ldw	r2,-4(fp)
 4005e18:	10c0048d 	sth	r3,18(r2)

			// When we get here, any remaining bytes are the data
			ret = _remaining;
 4005e1c:	e0bfff17 	ldw	r2,-4(fp)
 4005e20:	1080048b 	ldhu	r2,18(r2)
 4005e24:	10bfffcc 	andi	r2,r2,65535
 4005e28:	e0bffc15 	stw	r2,-16(fp)
		}
		return ret;
 4005e2c:	e0bffc17 	ldw	r2,-16(fp)
 4005e30:	00000106 	br	4005e38 <_ZN11EthernetUDP11parsePacketEv+0x120>
	}
	// There aren't any packets available
	return 0;
 4005e34:	0005883a 	mov	r2,zero
}
 4005e38:	e037883a 	mov	sp,fp
 4005e3c:	dfc00117 	ldw	ra,4(sp)
 4005e40:	df000017 	ldw	fp,0(sp)
 4005e44:	dec00204 	addi	sp,sp,8
 4005e48:	f800283a 	ret

04005e4c <_ZN11EthernetUDP4readEv>:

int EthernetUDP::read()
{
 4005e4c:	defffc04 	addi	sp,sp,-16
 4005e50:	dfc00315 	stw	ra,12(sp)
 4005e54:	df000215 	stw	fp,8(sp)
 4005e58:	df000204 	addi	fp,sp,8
 4005e5c:	e13fff15 	stw	r4,-4(fp)
	uint8_t byte;

	if ((_remaining > 0) && (Ethernet.socketRecv(sockindex, &byte, 1) > 0)) {
 4005e60:	e0bfff17 	ldw	r2,-4(fp)
 4005e64:	1080048b 	ldhu	r2,18(r2)
 4005e68:	10bfffcc 	andi	r2,r2,65535
 4005e6c:	10000a26 	beq	r2,zero,4005e98 <_ZN11EthernetUDP4readEv+0x4c>
 4005e70:	e0bfff17 	ldw	r2,-4(fp)
 4005e74:	10800403 	ldbu	r2,16(r2)
 4005e78:	10803fcc 	andi	r2,r2,255
 4005e7c:	01800044 	movi	r6,1
 4005e80:	e17ffe04 	addi	r5,fp,-8
 4005e84:	1009883a 	mov	r4,r2
 4005e88:	4006b940 	call	4006b94 <_ZN13EthernetClass10socketRecvEhPhs>
 4005e8c:	0080020e 	bge	zero,r2,4005e98 <_ZN11EthernetUDP4readEv+0x4c>
 4005e90:	00800044 	movi	r2,1
 4005e94:	00000106 	br	4005e9c <_ZN11EthernetUDP4readEv+0x50>
 4005e98:	0005883a 	mov	r2,zero
 4005e9c:	10803fcc 	andi	r2,r2,255
 4005ea0:	10000926 	beq	r2,zero,4005ec8 <_ZN11EthernetUDP4readEv+0x7c>
		// We read things without any problems
		_remaining--;
 4005ea4:	e0bfff17 	ldw	r2,-4(fp)
 4005ea8:	1080048b 	ldhu	r2,18(r2)
 4005eac:	10bfffc4 	addi	r2,r2,-1
 4005eb0:	1007883a 	mov	r3,r2
 4005eb4:	e0bfff17 	ldw	r2,-4(fp)
 4005eb8:	10c0048d 	sth	r3,18(r2)
		return byte;
 4005ebc:	e0bffe03 	ldbu	r2,-8(fp)
 4005ec0:	10803fcc 	andi	r2,r2,255
 4005ec4:	00000106 	br	4005ecc <_ZN11EthernetUDP4readEv+0x80>
	}

	// If we get here, there's no data available
	return -1;
 4005ec8:	00bfffc4 	movi	r2,-1
}
 4005ecc:	e037883a 	mov	sp,fp
 4005ed0:	dfc00117 	ldw	ra,4(sp)
 4005ed4:	df000017 	ldw	fp,0(sp)
 4005ed8:	dec00204 	addi	sp,sp,8
 4005edc:	f800283a 	ret

04005ee0 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char *buffer, size_t len)
{
 4005ee0:	defffa04 	addi	sp,sp,-24
 4005ee4:	dfc00515 	stw	ra,20(sp)
 4005ee8:	df000415 	stw	fp,16(sp)
 4005eec:	df000404 	addi	fp,sp,16
 4005ef0:	e13ffd15 	stw	r4,-12(fp)
 4005ef4:	e17ffe15 	stw	r5,-8(fp)
 4005ef8:	e1bfff15 	stw	r6,-4(fp)
	if (_remaining > 0) {
 4005efc:	e0bffd17 	ldw	r2,-12(fp)
 4005f00:	1080048b 	ldhu	r2,18(r2)
 4005f04:	10bfffcc 	andi	r2,r2,65535
 4005f08:	10002a26 	beq	r2,zero,4005fb4 <_ZN11EthernetUDP4readEPhj+0xd4>
		int got;
		if (_remaining <= len) {
 4005f0c:	e0bffd17 	ldw	r2,-12(fp)
 4005f10:	1080048b 	ldhu	r2,18(r2)
 4005f14:	10bfffcc 	andi	r2,r2,65535
 4005f18:	e0ffff17 	ldw	r3,-4(fp)
 4005f1c:	18800e36 	bltu	r3,r2,4005f58 <_ZN11EthernetUDP4readEPhj+0x78>
			// data should fit in the buffer
			got = Ethernet.socketRecv(sockindex, buffer, _remaining);
 4005f20:	e0bffd17 	ldw	r2,-12(fp)
 4005f24:	10800403 	ldbu	r2,16(r2)
 4005f28:	10c03fcc 	andi	r3,r2,255
 4005f2c:	e0bffd17 	ldw	r2,-12(fp)
 4005f30:	1080048b 	ldhu	r2,18(r2)
 4005f34:	10bfffcc 	andi	r2,r2,65535
 4005f38:	10a0001c 	xori	r2,r2,32768
 4005f3c:	10a00004 	addi	r2,r2,-32768
 4005f40:	100d883a 	mov	r6,r2
 4005f44:	e17ffe17 	ldw	r5,-8(fp)
 4005f48:	1809883a 	mov	r4,r3
 4005f4c:	4006b940 	call	4006b94 <_ZN13EthernetClass10socketRecvEhPhs>
 4005f50:	e0bffc15 	stw	r2,-16(fp)
 4005f54:	00000c06 	br	4005f88 <_ZN11EthernetUDP4readEPhj+0xa8>
		} else {
			// too much data for the buffer,
			// grab as much as will fit
			got = Ethernet.socketRecv(sockindex, buffer, len);
 4005f58:	e0bffd17 	ldw	r2,-12(fp)
 4005f5c:	10800403 	ldbu	r2,16(r2)
 4005f60:	10803fcc 	andi	r2,r2,255
 4005f64:	e0ffff17 	ldw	r3,-4(fp)
 4005f68:	18ffffcc 	andi	r3,r3,65535
 4005f6c:	18e0001c 	xori	r3,r3,32768
 4005f70:	18e00004 	addi	r3,r3,-32768
 4005f74:	180d883a 	mov	r6,r3
 4005f78:	e17ffe17 	ldw	r5,-8(fp)
 4005f7c:	1009883a 	mov	r4,r2
 4005f80:	4006b940 	call	4006b94 <_ZN13EthernetClass10socketRecvEhPhs>
 4005f84:	e0bffc15 	stw	r2,-16(fp)
		}
		if (got > 0) {
 4005f88:	e0bffc17 	ldw	r2,-16(fp)
 4005f8c:	0080090e 	bge	zero,r2,4005fb4 <_ZN11EthernetUDP4readEPhj+0xd4>
			_remaining -= got;
 4005f90:	e0bffd17 	ldw	r2,-12(fp)
 4005f94:	1080048b 	ldhu	r2,18(r2)
 4005f98:	e0fffc17 	ldw	r3,-16(fp)
 4005f9c:	10c5c83a 	sub	r2,r2,r3
 4005fa0:	1007883a 	mov	r3,r2
 4005fa4:	e0bffd17 	ldw	r2,-12(fp)
 4005fa8:	10c0048d 	sth	r3,18(r2)
			//Serial.printf("UDP read %d\n", got);
			return got;
 4005fac:	e0bffc17 	ldw	r2,-16(fp)
 4005fb0:	00000106 	br	4005fb8 <_ZN11EthernetUDP4readEPhj+0xd8>
		}
	}
	// If we get here, there's no data available or recv failed
	return -1;
 4005fb4:	00bfffc4 	movi	r2,-1
}
 4005fb8:	e037883a 	mov	sp,fp
 4005fbc:	dfc00117 	ldw	ra,4(sp)
 4005fc0:	df000017 	ldw	fp,0(sp)
 4005fc4:	dec00204 	addi	sp,sp,8
 4005fc8:	f800283a 	ret

04005fcc <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
 4005fcc:	defffd04 	addi	sp,sp,-12
 4005fd0:	dfc00215 	stw	ra,8(sp)
 4005fd4:	df000115 	stw	fp,4(sp)
 4005fd8:	df000104 	addi	fp,sp,4
 4005fdc:	e13fff15 	stw	r4,-4(fp)
	// Unlike recv, peek doesn't check to see if there's any data available, so we must.
	// If the user hasn't called parsePacket yet then return nothing otherwise they
	// may get the UDP header
	if (sockindex >= MAX_SOCK_NUM || _remaining == 0) return -1;
 4005fe0:	e0bfff17 	ldw	r2,-4(fp)
 4005fe4:	10800403 	ldbu	r2,16(r2)
 4005fe8:	10803fcc 	andi	r2,r2,255
 4005fec:	10800228 	cmpgeui	r2,r2,8
 4005ff0:	1000041e 	bne	r2,zero,4006004 <_ZN11EthernetUDP4peekEv+0x38>
 4005ff4:	e0bfff17 	ldw	r2,-4(fp)
 4005ff8:	1080048b 	ldhu	r2,18(r2)
 4005ffc:	10bfffcc 	andi	r2,r2,65535
 4006000:	1000021e 	bne	r2,zero,400600c <_ZN11EthernetUDP4peekEv+0x40>
 4006004:	00bfffc4 	movi	r2,-1
 4006008:	00000606 	br	4006024 <_ZN11EthernetUDP4peekEv+0x58>
	return Ethernet.socketPeek(sockindex);
 400600c:	e0bfff17 	ldw	r2,-4(fp)
 4006010:	10800403 	ldbu	r2,16(r2)
 4006014:	10803fcc 	andi	r2,r2,255
 4006018:	1009883a 	mov	r4,r2
 400601c:	4006ee00 	call	4006ee0 <_ZN13EthernetClass10socketPeekEh>
 4006020:	10803fcc 	andi	r2,r2,255
}
 4006024:	e037883a 	mov	sp,fp
 4006028:	dfc00117 	ldw	ra,4(sp)
 400602c:	df000017 	ldw	fp,0(sp)
 4006030:	dec00204 	addi	sp,sp,8
 4006034:	f800283a 	ret

04006038 <_ZN11EthernetUDP5flushEv>:

void EthernetUDP::flush()
{
 4006038:	defffe04 	addi	sp,sp,-8
 400603c:	df000115 	stw	fp,4(sp)
 4006040:	df000104 	addi	fp,sp,4
 4006044:	e13fff15 	stw	r4,-4(fp)
	// TODO: we should wait for TX buffer to be emptied
}
 4006048:	0001883a 	nop
 400604c:	e037883a 	mov	sp,fp
 4006050:	df000017 	ldw	fp,0(sp)
 4006054:	dec00104 	addi	sp,sp,4
 4006058:	f800283a 	ret

0400605c <_ZN11EthernetUDP14beginMulticastE9IPAddresst>:

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::beginMulticast(IPAddress ip, uint16_t port)
{
 400605c:	defffb04 	addi	sp,sp,-20
 4006060:	dfc00415 	stw	ra,16(sp)
 4006064:	df000315 	stw	fp,12(sp)
 4006068:	df000304 	addi	fp,sp,12
 400606c:	e13ffd15 	stw	r4,-12(fp)
 4006070:	e17ffe15 	stw	r5,-8(fp)
 4006074:	3005883a 	mov	r2,r6
 4006078:	e0bfff0d 	sth	r2,-4(fp)
	if (sockindex < MAX_SOCK_NUM) Ethernet.socketClose(sockindex);
 400607c:	e0bffd17 	ldw	r2,-12(fp)
 4006080:	10800403 	ldbu	r2,16(r2)
 4006084:	10803fcc 	andi	r2,r2,255
 4006088:	10800228 	cmpgeui	r2,r2,8
 400608c:	1000051e 	bne	r2,zero,40060a4 <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x48>
 4006090:	e0bffd17 	ldw	r2,-12(fp)
 4006094:	10800403 	ldbu	r2,16(r2)
 4006098:	10803fcc 	andi	r2,r2,255
 400609c:	1009883a 	mov	r4,r2
 40060a0:	40068b80 	call	40068b8 <_ZN13EthernetClass11socketCloseEh>
	sockindex = Ethernet.socketBeginMulticast(SnMR::UDP | SnMR::MULTI, ip, port);
 40060a4:	e0bfff0b 	ldhu	r2,-4(fp)
 40060a8:	100d883a 	mov	r6,r2
 40060ac:	e17ffe17 	ldw	r5,-8(fp)
 40060b0:	01002084 	movi	r4,130
 40060b4:	40065280 	call	4006528 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst>
 40060b8:	1007883a 	mov	r3,r2
 40060bc:	e0bffd17 	ldw	r2,-12(fp)
 40060c0:	10c00405 	stb	r3,16(r2)
	if (sockindex >= MAX_SOCK_NUM) return 0;
 40060c4:	e0bffd17 	ldw	r2,-12(fp)
 40060c8:	10800403 	ldbu	r2,16(r2)
 40060cc:	10803fcc 	andi	r2,r2,255
 40060d0:	10800230 	cmpltui	r2,r2,8
 40060d4:	1000021e 	bne	r2,zero,40060e0 <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x84>
 40060d8:	0005883a 	mov	r2,zero
 40060dc:	00000606 	br	40060f8 <_ZN11EthernetUDP14beginMulticastE9IPAddresst+0x9c>
	_port = port;
 40060e0:	e0bffd17 	ldw	r2,-12(fp)
 40060e4:	e0ffff0b 	ldhu	r3,-4(fp)
 40060e8:	10c0010d 	sth	r3,4(r2)
	_remaining = 0;
 40060ec:	e0bffd17 	ldw	r2,-12(fp)
 40060f0:	1000048d 	sth	zero,18(r2)
	return 1;
 40060f4:	00800044 	movi	r2,1
}
 40060f8:	e037883a 	mov	sp,fp
 40060fc:	dfc00117 	ldw	ra,4(sp)
 4006100:	df000017 	ldw	fp,0(sp)
 4006104:	dec00204 	addi	sp,sp,8
 4006108:	f800283a 	ret

0400610c <_Z41__static_initialization_and_destruction_0ii>:
 400610c:	defffb04 	addi	sp,sp,-20
 4006110:	dfc00415 	stw	ra,16(sp)
 4006114:	df000315 	stw	fp,12(sp)
 4006118:	df000304 	addi	fp,sp,12
 400611c:	e13ffe15 	stw	r4,-8(fp)
 4006120:	e17fff15 	stw	r5,-4(fp)
 4006124:	e0bffe17 	ldw	r2,-8(fp)
 4006128:	10800058 	cmpnei	r2,r2,1
 400612c:	1000091e 	bne	r2,zero,4006154 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4006130:	e0ffff17 	ldw	r3,-4(fp)
 4006134:	00bfffd4 	movui	r2,65535
 4006138:	1880061e 	bne	r3,r2,4006154 <_Z41__static_initialization_and_destruction_0ii+0x48>
 400613c:	d8000015 	stw	zero,0(sp)
 4006140:	000f883a 	mov	r7,zero
 4006144:	000d883a 	mov	r6,zero
 4006148:	000b883a 	mov	r5,zero
 400614c:	d112d604 	addi	r4,gp,19288
 4006150:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
 4006154:	0001883a 	nop
 4006158:	e037883a 	mov	sp,fp
 400615c:	dfc00117 	ldw	ra,4(sp)
 4006160:	df000017 	ldw	fp,0(sp)
 4006164:	dec00204 	addi	sp,sp,8
 4006168:	f800283a 	ret

0400616c <_GLOBAL__sub_I__ZN11EthernetUDP5beginEt>:
 400616c:	defffe04 	addi	sp,sp,-8
 4006170:	dfc00115 	stw	ra,4(sp)
 4006174:	df000015 	stw	fp,0(sp)
 4006178:	d839883a 	mov	fp,sp
 400617c:	017fffd4 	movui	r5,65535
 4006180:	01000044 	movi	r4,1
 4006184:	400610c0 	call	400610c <_Z41__static_initialization_and_destruction_0ii>
 4006188:	e037883a 	mov	sp,fp
 400618c:	dfc00117 	ldw	ra,4(sp)
 4006190:	df000017 	ldw	fp,0(sp)
 4006194:	dec00204 	addi	sp,sp,8
 4006198:	f800283a 	ret

0400619c <_ZN3UDP12rawIPAddressER9IPAddress>:
  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() =0;
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() =0;
protected:
  uint8_t* rawIPAddress(IPAddress& addr) { return addr.raw_address(); };
 400619c:	defffc04 	addi	sp,sp,-16
 40061a0:	dfc00315 	stw	ra,12(sp)
 40061a4:	df000215 	stw	fp,8(sp)
 40061a8:	df000204 	addi	fp,sp,8
 40061ac:	e13ffe15 	stw	r4,-8(fp)
 40061b0:	e17fff15 	stw	r5,-4(fp)
 40061b4:	e13fff17 	ldw	r4,-4(fp)
 40061b8:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 40061bc:	e037883a 	mov	sp,fp
 40061c0:	dfc00117 	ldw	ra,4(sp)
 40061c4:	df000017 	ldw	fp,0(sp)
 40061c8:	dec00204 	addi	sp,sp,8
 40061cc:	f800283a 	ret

040061d0 <_ZN11EthernetUDP4readEPcj>:
	// Read up to len bytes from the current packet and place them into buffer
	// Returns the number of bytes read, or 0 if none are available
	virtual int read(unsigned char* buffer, size_t len);
	// Read up to len characters from the current packet and place them into buffer
	// Returns the number of characters read, or 0 if none are available
	virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 40061d0:	defffb04 	addi	sp,sp,-20
 40061d4:	dfc00415 	stw	ra,16(sp)
 40061d8:	df000315 	stw	fp,12(sp)
 40061dc:	df000304 	addi	fp,sp,12
 40061e0:	e13ffd15 	stw	r4,-12(fp)
 40061e4:	e17ffe15 	stw	r5,-8(fp)
 40061e8:	e1bfff15 	stw	r6,-4(fp)
 40061ec:	e0bffd17 	ldw	r2,-12(fp)
 40061f0:	10800017 	ldw	r2,0(r2)
 40061f4:	10800b04 	addi	r2,r2,44
 40061f8:	10800017 	ldw	r2,0(r2)
 40061fc:	e1bfff17 	ldw	r6,-4(fp)
 4006200:	e17ffe17 	ldw	r5,-8(fp)
 4006204:	e13ffd17 	ldw	r4,-12(fp)
 4006208:	103ee83a 	callr	r2
 400620c:	e037883a 	mov	sp,fp
 4006210:	dfc00117 	ldw	ra,4(sp)
 4006214:	df000017 	ldw	fp,0(sp)
 4006218:	dec00204 	addi	sp,sp,8
 400621c:	f800283a 	ret

04006220 <_ZN11EthernetUDP9localPortEv>:

	// Return the IP address of the host who sent the current incoming packet
	virtual IPAddress remoteIP() { return _remoteIP; };
	// Return the port of the host who sent the current incoming packet
	virtual uint16_t remotePort() { return _remotePort; };
	virtual uint16_t localPort() { return _port; }
 4006220:	defffe04 	addi	sp,sp,-8
 4006224:	df000115 	stw	fp,4(sp)
 4006228:	df000104 	addi	fp,sp,4
 400622c:	e13fff15 	stw	r4,-4(fp)
 4006230:	e0bfff17 	ldw	r2,-4(fp)
 4006234:	1080010b 	ldhu	r2,4(r2)
 4006238:	e037883a 	mov	sp,fp
 400623c:	df000017 	ldw	fp,0(sp)
 4006240:	dec00104 	addi	sp,sp,4
 4006244:	f800283a 	ret

04006248 <_ZN13EthernetClass14socketPortRandEt>:
/*          Socket management            */
/*****************************************/


void EthernetClass::socketPortRand(uint16_t n)
{
 4006248:	defffe04 	addi	sp,sp,-8
 400624c:	df000115 	stw	fp,4(sp)
 4006250:	df000104 	addi	fp,sp,4
 4006254:	2005883a 	mov	r2,r4
 4006258:	e0bfff0d 	sth	r2,-4(fp)
	n &= 0x3FFF;
 400625c:	e0bfff0b 	ldhu	r2,-4(fp)
 4006260:	108fffcc 	andi	r2,r2,16383
 4006264:	e0bfff0d 	sth	r2,-4(fp)
	local_port ^= n;
 4006268:	d0e00c0b 	ldhu	r3,-32720(gp)
 400626c:	e0bfff0b 	ldhu	r2,-4(fp)
 4006270:	1884f03a 	xor	r2,r3,r2
 4006274:	d0a00c0d 	sth	r2,-32720(gp)
	//Serial.printf("socketPortRand %d, srcport=%d\n", n, local_port);
}
 4006278:	0001883a 	nop
 400627c:	e037883a 	mov	sp,fp
 4006280:	df000017 	ldw	fp,0(sp)
 4006284:	dec00104 	addi	sp,sp,4
 4006288:	f800283a 	ret

0400628c <_ZN13EthernetClass11socketBeginEht>:

uint8_t EthernetClass::socketBegin(uint8_t protocol, uint16_t port)
{
 400628c:	defff804 	addi	sp,sp,-32
 4006290:	dfc00715 	stw	ra,28(sp)
 4006294:	df000615 	stw	fp,24(sp)
 4006298:	dc000515 	stw	r16,20(sp)
 400629c:	df000604 	addi	fp,sp,24
 40062a0:	2007883a 	mov	r3,r4
 40062a4:	2805883a 	mov	r2,r5
 40062a8:	e0fffd05 	stb	r3,-12(fp)
 40062ac:	e0bffe0d 	sth	r2,-8(fp)
	uint8_t s, status[MAX_SOCK_NUM], chip, maxindex=MAX_SOCK_NUM;
 40062b0:	00800204 	movi	r2,8
 40062b4:	e0bffa45 	stb	r2,-23(fp)

	// first check hardware compatibility
	chip = W5100.getChip();
 40062b8:	40041740 	call	4004174 <_ZN10W5100Class7getChipEv>
 40062bc:	e0bffa85 	stb	r2,-22(fp)
	if (!chip) return MAX_SOCK_NUM; // immediate error if no hardware detected
 40062c0:	e0bffa83 	ldbu	r2,-22(fp)
 40062c4:	1000021e 	bne	r2,zero,40062d0 <_ZN13EthernetClass11socketBeginEht+0x44>
 40062c8:	00800204 	movi	r2,8
 40062cc:	00009006 	br	4006510 <_ZN13EthernetClass11socketBeginEht+0x284>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 40062d0:	e0bffa83 	ldbu	r2,-22(fp)
 40062d4:	10800cd8 	cmpnei	r2,r2,51
 40062d8:	1000021e 	bne	r2,zero,40062e4 <_ZN13EthernetClass11socketBeginEht+0x58>
 40062dc:	00800104 	movi	r2,4
 40062e0:	e0bffa45 	stb	r2,-23(fp)
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 40062e4:	e03ffa05 	stb	zero,-24(fp)
 40062e8:	e0fffa03 	ldbu	r3,-24(fp)
 40062ec:	e0bffa43 	ldbu	r2,-23(fp)
 40062f0:	1880122e 	bgeu	r3,r2,400633c <_ZN13EthernetClass11socketBeginEht+0xb0>
		status[s] = W5100.readSnSR(s);
 40062f4:	e43ffa03 	ldbu	r16,-24(fp)
 40062f8:	e0bffa03 	ldbu	r2,-24(fp)
 40062fc:	1009883a 	mov	r4,r2
 4006300:	40077e80 	call	40077e8 <_ZN10W5100Class8readSnSREh>
 4006304:	1007883a 	mov	r3,r2
 4006308:	e0bffb04 	addi	r2,fp,-20
 400630c:	1405883a 	add	r2,r2,r16
 4006310:	10c00005 	stb	r3,0(r2)
		if (status[s] == SnSR::CLOSED) goto makesocket;
 4006314:	e0bffa03 	ldbu	r2,-24(fp)
 4006318:	e0fffb04 	addi	r3,fp,-20
 400631c:	1885883a 	add	r2,r3,r2
 4006320:	10800003 	ldbu	r2,0(r2)
 4006324:	10803fcc 	andi	r2,r2,255
 4006328:	10002b26 	beq	r2,zero,40063d8 <_ZN13EthernetClass11socketBeginEht+0x14c>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 400632c:	e0bffa03 	ldbu	r2,-24(fp)
 4006330:	10800044 	addi	r2,r2,1
 4006334:	e0bffa05 	stb	r2,-24(fp)
 4006338:	003feb06 	br	40062e8 <__alt_data_end+0xfc0062e8>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 400633c:	e03ffa05 	stb	zero,-24(fp)
 4006340:	e0fffa03 	ldbu	r3,-24(fp)
 4006344:	e0bffa43 	ldbu	r2,-23(fp)
 4006348:	1880152e 	bgeu	r3,r2,40063a0 <_ZN13EthernetClass11socketBeginEht+0x114>
		uint8_t stat = status[s];
 400634c:	e0bffa03 	ldbu	r2,-24(fp)
 4006350:	e0fffb04 	addi	r3,fp,-20
 4006354:	1885883a 	add	r2,r3,r2
 4006358:	10800003 	ldbu	r2,0(r2)
 400635c:	e0bffac5 	stb	r2,-21(fp)
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4006360:	e0bffac3 	ldbu	r2,-21(fp)
 4006364:	10800758 	cmpnei	r2,r2,29
 4006368:	10000f26 	beq	r2,zero,40063a8 <_ZN13EthernetClass11socketBeginEht+0x11c>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 400636c:	e0bffac3 	ldbu	r2,-21(fp)
 4006370:	108006d8 	cmpnei	r2,r2,27
 4006374:	10000e26 	beq	r2,zero,40063b0 <_ZN13EthernetClass11socketBeginEht+0x124>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4006378:	e0bffac3 	ldbu	r2,-21(fp)
 400637c:	10800618 	cmpnei	r2,r2,24
 4006380:	10000d26 	beq	r2,zero,40063b8 <_ZN13EthernetClass11socketBeginEht+0x12c>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4006384:	e0bffac3 	ldbu	r2,-21(fp)
 4006388:	10800698 	cmpnei	r2,r2,26
 400638c:	10000c26 	beq	r2,zero,40063c0 <_ZN13EthernetClass11socketBeginEht+0x134>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 4006390:	e0bffa03 	ldbu	r2,-24(fp)
 4006394:	10800044 	addi	r2,r2,1
 4006398:	e0bffa05 	stb	r2,-24(fp)
 400639c:	003fe806 	br	4006340 <__alt_data_end+0xfc006340>
		uint8_t stat = status[s];
		// TODO: this also needs to check if no more data
		if (stat == SnSR::CLOSE_WAIT) goto closemakesocket;
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
 40063a0:	00800204 	movi	r2,8
 40063a4:	00005a06 	br	4006510 <_ZN13EthernetClass11socketBeginEht+0x284>
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
		uint8_t stat = status[s];
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 40063a8:	0001883a 	nop
 40063ac:	00000506 	br	40063c4 <_ZN13EthernetClass11socketBeginEht+0x138>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 40063b0:	0001883a 	nop
 40063b4:	00000306 	br	40063c4 <_ZN13EthernetClass11socketBeginEht+0x138>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 40063b8:	0001883a 	nop
 40063bc:	00000106 	br	40063c4 <_ZN13EthernetClass11socketBeginEht+0x138>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 40063c0:	0001883a 	nop
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
 40063c4:	e0bffa03 	ldbu	r2,-24(fp)
 40063c8:	01400404 	movi	r5,16
 40063cc:	1009883a 	mov	r4,r2
 40063d0:	40089640 	call	4008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>
 40063d4:	00000106 	br	40063dc <_ZN13EthernetClass11socketBeginEht+0x150>
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
 40063d8:	0001883a 	nop
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
makesocket:
	//Serial.printf("W5000socket %d\n", s);
	EthernetServer::server_port[s] = 0;
 40063dc:	e0fffa03 	ldbu	r3,-24(fp)
 40063e0:	008100f4 	movhi	r2,1027
 40063e4:	109a0404 	addi	r2,r2,26640
 40063e8:	18c7883a 	add	r3,r3,r3
 40063ec:	10c5883a 	add	r2,r2,r3
 40063f0:	1000000d 	sth	zero,0(r2)
	usleep (250); // TODO: is this needed??
 40063f4:	01003e84 	movi	r4,250
 40063f8:	40194f00 	call	40194f0 <usleep>
	W5100.writeSnMR(s, protocol);
 40063fc:	e0bffa03 	ldbu	r2,-24(fp)
 4006400:	e0fffd03 	ldbu	r3,-12(fp)
 4006404:	180b883a 	mov	r5,r3
 4006408:	1009883a 	mov	r4,r2
 400640c:	400770c0 	call	400770c <_ZN10W5100Class9writeSnMREhh>
	W5100.writeSnIR(s, 0xFF);
 4006410:	e0bffa03 	ldbu	r2,-24(fp)
 4006414:	01403fc4 	movi	r5,255
 4006418:	1009883a 	mov	r4,r2
 400641c:	400775c0 	call	400775c <_ZN10W5100Class9writeSnIREhh>
	if (port > 0) {
 4006420:	e0bffe0b 	ldhu	r2,-8(fp)
 4006424:	10000626 	beq	r2,zero,4006440 <_ZN13EthernetClass11socketBeginEht+0x1b4>
		W5100.writeSnPORT(s, port);
 4006428:	e0bffa03 	ldbu	r2,-24(fp)
 400642c:	e0fffe0b 	ldhu	r3,-8(fp)
 4006430:	180b883a 	mov	r5,r3
 4006434:	1009883a 	mov	r4,r2
 4006438:	40078240 	call	4007824 <_ZN10W5100Class11writeSnPORTEht>
 400643c:	00001006 	br	4006480 <_ZN13EthernetClass11socketBeginEht+0x1f4>
	} else {
		// if don't set the source port, set local_port number.
		if (++local_port < 49152) local_port = 49152;
 4006440:	d0a00c0b 	ldhu	r2,-32720(gp)
 4006444:	10800044 	addi	r2,r2,1
 4006448:	d0a00c0d 	sth	r2,-32720(gp)
 400644c:	d0a00c0b 	ldhu	r2,-32720(gp)
 4006450:	10bfffcc 	andi	r2,r2,65535
 4006454:	10b00030 	cmpltui	r2,r2,49152
 4006458:	10803fcc 	andi	r2,r2,255
 400645c:	10000226 	beq	r2,zero,4006468 <_ZN13EthernetClass11socketBeginEht+0x1dc>
 4006460:	00b00004 	movi	r2,-16384
 4006464:	d0a00c0d 	sth	r2,-32720(gp)
		W5100.writeSnPORT(s, local_port);
 4006468:	e0bffa03 	ldbu	r2,-24(fp)
 400646c:	d0e00c0b 	ldhu	r3,-32720(gp)
 4006470:	18ffffcc 	andi	r3,r3,65535
 4006474:	180b883a 	mov	r5,r3
 4006478:	1009883a 	mov	r4,r2
 400647c:	40078240 	call	4007824 <_ZN10W5100Class11writeSnPORTEht>
	}
	W5100.execCmdSn(s, Sock_OPEN);
 4006480:	e0bffa03 	ldbu	r2,-24(fp)
 4006484:	01400044 	movi	r5,1
 4006488:	1009883a 	mov	r4,r2
 400648c:	40089640 	call	4008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	state[s].RX_RSR = 0;
 4006490:	e0fffa03 	ldbu	r3,-24(fp)
 4006494:	008100f4 	movhi	r2,1027
 4006498:	109a0804 	addi	r2,r2,26656
 400649c:	180690fa 	slli	r3,r3,3
 40064a0:	10c5883a 	add	r2,r2,r3
 40064a4:	1000000d 	sth	zero,0(r2)
	state[s].RX_RD  = W5100.readSnRX_RD(s); // always zero?
 40064a8:	e43ffa03 	ldbu	r16,-24(fp)
 40064ac:	e0bffa03 	ldbu	r2,-24(fp)
 40064b0:	1009883a 	mov	r4,r2
 40064b4:	4007b640 	call	4007b64 <_ZN10W5100Class11readSnRX_RDEh>
 40064b8:	1009883a 	mov	r4,r2
 40064bc:	008100f4 	movhi	r2,1027
 40064c0:	109a0804 	addi	r2,r2,26656
 40064c4:	800690fa 	slli	r3,r16,3
 40064c8:	10c5883a 	add	r2,r2,r3
 40064cc:	10800084 	addi	r2,r2,2
 40064d0:	1100000d 	sth	r4,0(r2)
	state[s].RX_inc = 0;
 40064d4:	e0fffa03 	ldbu	r3,-24(fp)
 40064d8:	008100f4 	movhi	r2,1027
 40064dc:	109a0804 	addi	r2,r2,26656
 40064e0:	180690fa 	slli	r3,r3,3
 40064e4:	10c5883a 	add	r2,r2,r3
 40064e8:	10800184 	addi	r2,r2,6
 40064ec:	10000005 	stb	zero,0(r2)
	state[s].TX_FSR = 0;
 40064f0:	e0fffa03 	ldbu	r3,-24(fp)
 40064f4:	008100f4 	movhi	r2,1027
 40064f8:	109a0804 	addi	r2,r2,26656
 40064fc:	180690fa 	slli	r3,r3,3
 4006500:	10c5883a 	add	r2,r2,r3
 4006504:	10800104 	addi	r2,r2,4
 4006508:	1000000d 	sth	zero,0(r2)
	//Serial.printf("W5000socket prot=%d, RX_RD=%d\n", W5100.readSnMR(s), state[s].RX_RD);
	return s;
 400650c:	e0bffa03 	ldbu	r2,-24(fp)
}
 4006510:	e6ffff04 	addi	sp,fp,-4
 4006514:	dfc00217 	ldw	ra,8(sp)
 4006518:	df000117 	ldw	fp,4(sp)
 400651c:	dc000017 	ldw	r16,0(sp)
 4006520:	dec00304 	addi	sp,sp,12
 4006524:	f800283a 	ret

04006528 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst>:

// multicast version to set fields before open  thd
uint8_t EthernetClass::socketBeginMulticast(uint8_t protocol, IPAddress ip, uint16_t port)
{
 4006528:	defff504 	addi	sp,sp,-44
 400652c:	dfc00a15 	stw	ra,40(sp)
 4006530:	df000915 	stw	fp,36(sp)
 4006534:	dc000815 	stw	r16,32(sp)
 4006538:	df000904 	addi	fp,sp,36
 400653c:	2007883a 	mov	r3,r4
 4006540:	e17ffd15 	stw	r5,-12(fp)
 4006544:	3005883a 	mov	r2,r6
 4006548:	e0fffc05 	stb	r3,-16(fp)
 400654c:	e0bffe0d 	sth	r2,-8(fp)
	uint8_t s, status[MAX_SOCK_NUM], chip, maxindex=MAX_SOCK_NUM;
 4006550:	00800204 	movi	r2,8
 4006554:	e0bff745 	stb	r2,-35(fp)

	// first check hardware compatibility
	chip = W5100.getChip();
 4006558:	40041740 	call	4004174 <_ZN10W5100Class7getChipEv>
 400655c:	e0bff785 	stb	r2,-34(fp)
	if (!chip) return MAX_SOCK_NUM; // immediate error if no hardware detected
 4006560:	e0bff783 	ldbu	r2,-34(fp)
 4006564:	1000021e 	bne	r2,zero,4006570 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x48>
 4006568:	00800204 	movi	r2,8
 400656c:	0000bc06 	br	4006860 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x338>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
 4006570:	e0bff783 	ldbu	r2,-34(fp)
 4006574:	10800cd8 	cmpnei	r2,r2,51
 4006578:	1000021e 	bne	r2,zero,4006584 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x5c>
 400657c:	00800104 	movi	r2,4
 4006580:	e0bff745 	stb	r2,-35(fp)
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 4006584:	e03ff705 	stb	zero,-36(fp)
 4006588:	e0fff703 	ldbu	r3,-36(fp)
 400658c:	e0bff743 	ldbu	r2,-35(fp)
 4006590:	1880122e 	bgeu	r3,r2,40065dc <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0xb4>
		status[s] = W5100.readSnSR(s);
 4006594:	e43ff703 	ldbu	r16,-36(fp)
 4006598:	e0bff703 	ldbu	r2,-36(fp)
 400659c:	1009883a 	mov	r4,r2
 40065a0:	40077e80 	call	40077e8 <_ZN10W5100Class8readSnSREh>
 40065a4:	1007883a 	mov	r3,r2
 40065a8:	e0bff804 	addi	r2,fp,-32
 40065ac:	1405883a 	add	r2,r2,r16
 40065b0:	10c00005 	stb	r3,0(r2)
		if (status[s] == SnSR::CLOSED) goto makesocket;
 40065b4:	e0bff703 	ldbu	r2,-36(fp)
 40065b8:	e0fff804 	addi	r3,fp,-32
 40065bc:	1885883a 	add	r2,r3,r2
 40065c0:	10800003 	ldbu	r2,0(r2)
 40065c4:	10803fcc 	andi	r2,r2,255
 40065c8:	10002b26 	beq	r2,zero,4006678 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x150>
#if MAX_SOCK_NUM > 4
	if (chip == 51) maxindex = 4; // W5100 chip never supports more than 4 sockets
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
 40065cc:	e0bff703 	ldbu	r2,-36(fp)
 40065d0:	10800044 	addi	r2,r2,1
 40065d4:	e0bff705 	stb	r2,-36(fp)
 40065d8:	003feb06 	br	4006588 <__alt_data_end+0xfc006588>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 40065dc:	e03ff705 	stb	zero,-36(fp)
 40065e0:	e0fff703 	ldbu	r3,-36(fp)
 40065e4:	e0bff743 	ldbu	r2,-35(fp)
 40065e8:	1880152e 	bgeu	r3,r2,4006640 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x118>
		uint8_t stat = status[s];
 40065ec:	e0bff703 	ldbu	r2,-36(fp)
 40065f0:	e0fff804 	addi	r3,fp,-32
 40065f4:	1885883a 	add	r2,r3,r2
 40065f8:	10800003 	ldbu	r2,0(r2)
 40065fc:	e0bff7c5 	stb	r2,-33(fp)
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4006600:	e0bff7c3 	ldbu	r2,-33(fp)
 4006604:	10800758 	cmpnei	r2,r2,29
 4006608:	10000f26 	beq	r2,zero,4006648 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x120>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 400660c:	e0bff7c3 	ldbu	r2,-33(fp)
 4006610:	108006d8 	cmpnei	r2,r2,27
 4006614:	10000e26 	beq	r2,zero,4006650 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x128>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4006618:	e0bff7c3 	ldbu	r2,-33(fp)
 400661c:	10800618 	cmpnei	r2,r2,24
 4006620:	10000d26 	beq	r2,zero,4006658 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x130>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4006624:	e0bff7c3 	ldbu	r2,-33(fp)
 4006628:	10800698 	cmpnei	r2,r2,26
 400662c:	10000c26 	beq	r2,zero,4006660 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x138>
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
 4006630:	e0bff703 	ldbu	r2,-36(fp)
 4006634:	10800044 	addi	r2,r2,1
 4006638:	e0bff705 	stb	r2,-36(fp)
 400663c:	003fe806 	br	40065e0 <__alt_data_end+0xfc0065e0>
		uint8_t stat = status[s];
		// TODO: this also needs to check if no more data
		if (stat == SnSR::CLOSE_WAIT) goto closemakesocket;
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
 4006640:	00800204 	movi	r2,8
 4006644:	00008606 	br	4006860 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x338>
	}
	//Serial.printf("W5000socket step2\n");
	// as a last resort, forcibly close any already closing
	for (s=0; s < maxindex; s++) {
		uint8_t stat = status[s];
		if (stat == SnSR::LAST_ACK) goto closemakesocket;
 4006648:	0001883a 	nop
 400664c:	00000506 	br	4006664 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x13c>
		if (stat == SnSR::TIME_WAIT) goto closemakesocket;
 4006650:	0001883a 	nop
 4006654:	00000306 	br	4006664 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x13c>
		if (stat == SnSR::FIN_WAIT) goto closemakesocket;
 4006658:	0001883a 	nop
 400665c:	00000106 	br	4006664 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x13c>
		if (stat == SnSR::CLOSING) goto closemakesocket;
 4006660:	0001883a 	nop
	}
#endif
	return MAX_SOCK_NUM; // all sockets are in use
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
 4006664:	e0bff703 	ldbu	r2,-36(fp)
 4006668:	01400404 	movi	r5,16
 400666c:	1009883a 	mov	r4,r2
 4006670:	40089640 	call	4008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>
 4006674:	00000106 	br	400667c <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x154>
#endif
	//Serial.printf("W5000socket begin, protocol=%d, port=%d\n", protocol, port);
	// look at all the hardware sockets, use any that are closed (unused)
	for (s=0; s < maxindex; s++) {
		status[s] = W5100.readSnSR(s);
		if (status[s] == SnSR::CLOSED) goto makesocket;
 4006678:	0001883a 	nop
closemakesocket:
	//Serial.printf("W5000socket close\n");
	W5100.execCmdSn(s, Sock_CLOSE);
makesocket:
	//Serial.printf("W5000socket %d\n", s);
	EthernetServer::server_port[s] = 0;
 400667c:	e0fff703 	ldbu	r3,-36(fp)
 4006680:	008100f4 	movhi	r2,1027
 4006684:	109a0404 	addi	r2,r2,26640
 4006688:	18c7883a 	add	r3,r3,r3
 400668c:	10c5883a 	add	r2,r2,r3
 4006690:	1000000d 	sth	zero,0(r2)
	usleep (250); // TODO: is this needed??
 4006694:	01003e84 	movi	r4,250
 4006698:	40194f00 	call	40194f0 <usleep>
	W5100.writeSnMR(s, protocol);
 400669c:	e0bff703 	ldbu	r2,-36(fp)
 40066a0:	e0fffc03 	ldbu	r3,-16(fp)
 40066a4:	180b883a 	mov	r5,r3
 40066a8:	1009883a 	mov	r4,r2
 40066ac:	400770c0 	call	400770c <_ZN10W5100Class9writeSnMREhh>
	W5100.writeSnIR(s, 0xFF);
 40066b0:	e0bff703 	ldbu	r2,-36(fp)
 40066b4:	01403fc4 	movi	r5,255
 40066b8:	1009883a 	mov	r4,r2
 40066bc:	400775c0 	call	400775c <_ZN10W5100Class9writeSnIREhh>
	if (port > 0) {
 40066c0:	e0bffe0b 	ldhu	r2,-8(fp)
 40066c4:	10000626 	beq	r2,zero,40066e0 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x1b8>
		W5100.writeSnPORT(s, port);
 40066c8:	e0bff703 	ldbu	r2,-36(fp)
 40066cc:	e0fffe0b 	ldhu	r3,-8(fp)
 40066d0:	180b883a 	mov	r5,r3
 40066d4:	1009883a 	mov	r4,r2
 40066d8:	40078240 	call	4007824 <_ZN10W5100Class11writeSnPORTEht>
 40066dc:	00001006 	br	4006720 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x1f8>
	} else {
		// if don't set the source port, set local_port number.
		if (++local_port < 49152) local_port = 49152;
 40066e0:	d0a00c0b 	ldhu	r2,-32720(gp)
 40066e4:	10800044 	addi	r2,r2,1
 40066e8:	d0a00c0d 	sth	r2,-32720(gp)
 40066ec:	d0a00c0b 	ldhu	r2,-32720(gp)
 40066f0:	10bfffcc 	andi	r2,r2,65535
 40066f4:	10b00030 	cmpltui	r2,r2,49152
 40066f8:	10803fcc 	andi	r2,r2,255
 40066fc:	10000226 	beq	r2,zero,4006708 <_ZN13EthernetClass20socketBeginMulticastEh9IPAddresst+0x1e0>
 4006700:	00b00004 	movi	r2,-16384
 4006704:	d0a00c0d 	sth	r2,-32720(gp)
		W5100.writeSnPORT(s, local_port);
 4006708:	e0bff703 	ldbu	r2,-36(fp)
 400670c:	d0e00c0b 	ldhu	r3,-32720(gp)
 4006710:	18ffffcc 	andi	r3,r3,65535
 4006714:	180b883a 	mov	r5,r3
 4006718:	1009883a 	mov	r4,r2
 400671c:	40078240 	call	4007824 <_ZN10W5100Class11writeSnPORTEht>
	}
	// Calculate MAC address from Multicast IP Address
    	unsigned char mac[] = {  0x01, 0x00, 0x5E, 0x00, 0x00, 0x00 };
 4006720:	00800044 	movi	r2,1
 4006724:	e0bffa05 	stb	r2,-24(fp)
 4006728:	e03ffa45 	stb	zero,-23(fp)
 400672c:	00801784 	movi	r2,94
 4006730:	e0bffa85 	stb	r2,-22(fp)
 4006734:	e03ffac5 	stb	zero,-21(fp)
 4006738:	e03ffb05 	stb	zero,-20(fp)
 400673c:	e03ffb45 	stb	zero,-19(fp)
    	mac[3] = ip[1] & 0x7F;
 4006740:	e0bffd04 	addi	r2,fp,-12
 4006744:	01400044 	movi	r5,1
 4006748:	1009883a 	mov	r4,r2
 400674c:	40031dc0 	call	40031dc <_ZN9IPAddressixEi>
 4006750:	10800003 	ldbu	r2,0(r2)
 4006754:	10801fcc 	andi	r2,r2,127
 4006758:	e0bffac5 	stb	r2,-21(fp)
    	mac[4] = ip[2];
 400675c:	e0bffd04 	addi	r2,fp,-12
 4006760:	01400084 	movi	r5,2
 4006764:	1009883a 	mov	r4,r2
 4006768:	40031dc0 	call	40031dc <_ZN9IPAddressixEi>
 400676c:	10800003 	ldbu	r2,0(r2)
 4006770:	e0bffb05 	stb	r2,-20(fp)
    	mac[5] = ip[3];
 4006774:	e0bffd04 	addi	r2,fp,-12
 4006778:	014000c4 	movi	r5,3
 400677c:	1009883a 	mov	r4,r2
 4006780:	40031dc0 	call	40031dc <_ZN9IPAddressixEi>
 4006784:	10800003 	ldbu	r2,0(r2)
 4006788:	e0bffb45 	stb	r2,-19(fp)
    	W5100.writeSnDIPR(s, ip.raw_address());   //239.255.0.1
 400678c:	e43ff703 	ldbu	r16,-36(fp)
 4006790:	e0bffd04 	addi	r2,fp,-12
 4006794:	1009883a 	mov	r4,r2
 4006798:	40031900 	call	4003190 <_ZN9IPAddress11raw_addressEv>
 400679c:	100b883a 	mov	r5,r2
 40067a0:	8009883a 	mov	r4,r16
 40067a4:	40078d00 	call	40078d0 <_ZN10W5100Class11writeSnDIPREhPh>
    	W5100.writeSnDPORT(s, port);
 40067a8:	e0bff703 	ldbu	r2,-36(fp)
 40067ac:	e0fffe0b 	ldhu	r3,-8(fp)
 40067b0:	180b883a 	mov	r5,r3
 40067b4:	1009883a 	mov	r4,r2
 40067b8:	40079180 	call	4007918 <_ZN10W5100Class12writeSnDPORTEht>
    	W5100.writeSnDHAR(s, mac);
 40067bc:	e0bff703 	ldbu	r2,-36(fp)
 40067c0:	e0fffa04 	addi	r3,fp,-24
 40067c4:	180b883a 	mov	r5,r3
 40067c8:	1009883a 	mov	r4,r2
 40067cc:	40078880 	call	4007888 <_ZN10W5100Class11writeSnDHAREhPh>
	W5100.execCmdSn(s, Sock_OPEN);
 40067d0:	e0bff703 	ldbu	r2,-36(fp)
 40067d4:	01400044 	movi	r5,1
 40067d8:	1009883a 	mov	r4,r2
 40067dc:	40089640 	call	4008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	state[s].RX_RSR = 0;
 40067e0:	e0fff703 	ldbu	r3,-36(fp)
 40067e4:	008100f4 	movhi	r2,1027
 40067e8:	109a0804 	addi	r2,r2,26656
 40067ec:	180690fa 	slli	r3,r3,3
 40067f0:	10c5883a 	add	r2,r2,r3
 40067f4:	1000000d 	sth	zero,0(r2)
	state[s].RX_RD  = W5100.readSnRX_RD(s); // always zero?
 40067f8:	e43ff703 	ldbu	r16,-36(fp)
 40067fc:	e0bff703 	ldbu	r2,-36(fp)
 4006800:	1009883a 	mov	r4,r2
 4006804:	4007b640 	call	4007b64 <_ZN10W5100Class11readSnRX_RDEh>
 4006808:	1009883a 	mov	r4,r2
 400680c:	008100f4 	movhi	r2,1027
 4006810:	109a0804 	addi	r2,r2,26656
 4006814:	800690fa 	slli	r3,r16,3
 4006818:	10c5883a 	add	r2,r2,r3
 400681c:	10800084 	addi	r2,r2,2
 4006820:	1100000d 	sth	r4,0(r2)
	state[s].RX_inc = 0;
 4006824:	e0fff703 	ldbu	r3,-36(fp)
 4006828:	008100f4 	movhi	r2,1027
 400682c:	109a0804 	addi	r2,r2,26656
 4006830:	180690fa 	slli	r3,r3,3
 4006834:	10c5883a 	add	r2,r2,r3
 4006838:	10800184 	addi	r2,r2,6
 400683c:	10000005 	stb	zero,0(r2)
	state[s].TX_FSR = 0;
 4006840:	e0fff703 	ldbu	r3,-36(fp)
 4006844:	008100f4 	movhi	r2,1027
 4006848:	109a0804 	addi	r2,r2,26656
 400684c:	180690fa 	slli	r3,r3,3
 4006850:	10c5883a 	add	r2,r2,r3
 4006854:	10800104 	addi	r2,r2,4
 4006858:	1000000d 	sth	zero,0(r2)
	//Serial.printf("W5000socket prot=%d, RX_RD=%d\n", W5100.readSnMR(s), state[s].RX_RD);
	return s;
 400685c:	e0bff703 	ldbu	r2,-36(fp)
}
 4006860:	e6ffff04 	addi	sp,fp,-4
 4006864:	dfc00217 	ldw	ra,8(sp)
 4006868:	df000117 	ldw	fp,4(sp)
 400686c:	dc000017 	ldw	r16,0(sp)
 4006870:	dec00304 	addi	sp,sp,12
 4006874:	f800283a 	ret

04006878 <_ZN13EthernetClass12socketStatusEh>:
// Return the socket's status
//
uint8_t EthernetClass::socketStatus(uint8_t s)
{
 4006878:	defffc04 	addi	sp,sp,-16
 400687c:	dfc00315 	stw	ra,12(sp)
 4006880:	df000215 	stw	fp,8(sp)
 4006884:	df000204 	addi	fp,sp,8
 4006888:	2005883a 	mov	r2,r4
 400688c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t status = W5100.readSnSR(s);
 4006890:	e0bfff03 	ldbu	r2,-4(fp)
 4006894:	1009883a 	mov	r4,r2
 4006898:	40077e80 	call	40077e8 <_ZN10W5100Class8readSnSREh>
 400689c:	e0bffe05 	stb	r2,-8(fp)
	return status;
 40068a0:	e0bffe03 	ldbu	r2,-8(fp)
}
 40068a4:	e037883a 	mov	sp,fp
 40068a8:	dfc00117 	ldw	ra,4(sp)
 40068ac:	df000017 	ldw	fp,0(sp)
 40068b0:	dec00204 	addi	sp,sp,8
 40068b4:	f800283a 	ret

040068b8 <_ZN13EthernetClass11socketCloseEh>:

// Immediately close.  If a TCP connection is established, the
// remote host is left unaware we closed.
//
void EthernetClass::socketClose(uint8_t s)
{
 40068b8:	defffd04 	addi	sp,sp,-12
 40068bc:	dfc00215 	stw	ra,8(sp)
 40068c0:	df000115 	stw	fp,4(sp)
 40068c4:	df000104 	addi	fp,sp,4
 40068c8:	2005883a 	mov	r2,r4
 40068cc:	e0bfff05 	stb	r2,-4(fp)
	W5100.execCmdSn(s, Sock_CLOSE);
 40068d0:	e0bfff03 	ldbu	r2,-4(fp)
 40068d4:	01400404 	movi	r5,16
 40068d8:	1009883a 	mov	r4,r2
 40068dc:	40089640 	call	4008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
 40068e0:	0001883a 	nop
 40068e4:	e037883a 	mov	sp,fp
 40068e8:	dfc00117 	ldw	ra,4(sp)
 40068ec:	df000017 	ldw	fp,0(sp)
 40068f0:	dec00204 	addi	sp,sp,8
 40068f4:	f800283a 	ret

040068f8 <_ZN13EthernetClass12socketListenEh>:


// Place the socket in listening (server) mode
//
uint8_t EthernetClass::socketListen(uint8_t s)
{
 40068f8:	defffd04 	addi	sp,sp,-12
 40068fc:	dfc00215 	stw	ra,8(sp)
 4006900:	df000115 	stw	fp,4(sp)
 4006904:	df000104 	addi	fp,sp,4
 4006908:	2005883a 	mov	r2,r4
 400690c:	e0bfff05 	stb	r2,-4(fp)
	if (W5100.readSnSR(s) != SnSR::INIT) {
 4006910:	e0bfff03 	ldbu	r2,-4(fp)
 4006914:	1009883a 	mov	r4,r2
 4006918:	40077e80 	call	40077e8 <_ZN10W5100Class8readSnSREh>
 400691c:	10803fcc 	andi	r2,r2,255
 4006920:	108004d8 	cmpnei	r2,r2,19
 4006924:	10803fcc 	andi	r2,r2,255
 4006928:	10000226 	beq	r2,zero,4006934 <_ZN13EthernetClass12socketListenEh+0x3c>
		return 0;
 400692c:	0005883a 	mov	r2,zero
 4006930:	00000506 	br	4006948 <_ZN13EthernetClass12socketListenEh+0x50>
	}
	W5100.execCmdSn(s, Sock_LISTEN);
 4006934:	e0bfff03 	ldbu	r2,-4(fp)
 4006938:	01400084 	movi	r5,2
 400693c:	1009883a 	mov	r4,r2
 4006940:	40089640 	call	4008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>
	return 1;
 4006944:	00800044 	movi	r2,1
}
 4006948:	e037883a 	mov	sp,fp
 400694c:	dfc00117 	ldw	ra,4(sp)
 4006950:	df000017 	ldw	fp,0(sp)
 4006954:	dec00204 	addi	sp,sp,8
 4006958:	f800283a 	ret

0400695c <_ZN13EthernetClass13socketConnectEhPht>:


// establish a TCP connection in Active (client) mode.
//
void EthernetClass::socketConnect(uint8_t s, uint8_t * addr, uint16_t port)
{
 400695c:	defffb04 	addi	sp,sp,-20
 4006960:	dfc00415 	stw	ra,16(sp)
 4006964:	df000315 	stw	fp,12(sp)
 4006968:	df000304 	addi	fp,sp,12
 400696c:	2007883a 	mov	r3,r4
 4006970:	e17ffe15 	stw	r5,-8(fp)
 4006974:	3005883a 	mov	r2,r6
 4006978:	e0fffd05 	stb	r3,-12(fp)
 400697c:	e0bfff0d 	sth	r2,-4(fp)
	// set destination IP
	W5100.writeSnDIPR(s, addr);
 4006980:	e0bffd03 	ldbu	r2,-12(fp)
 4006984:	e17ffe17 	ldw	r5,-8(fp)
 4006988:	1009883a 	mov	r4,r2
 400698c:	40078d00 	call	40078d0 <_ZN10W5100Class11writeSnDIPREhPh>
	W5100.writeSnDPORT(s, port);
 4006990:	e0bffd03 	ldbu	r2,-12(fp)
 4006994:	e0ffff0b 	ldhu	r3,-4(fp)
 4006998:	180b883a 	mov	r5,r3
 400699c:	1009883a 	mov	r4,r2
 40069a0:	40079180 	call	4007918 <_ZN10W5100Class12writeSnDPORTEht>
	W5100.execCmdSn(s, Sock_CONNECT);
 40069a4:	e0bffd03 	ldbu	r2,-12(fp)
 40069a8:	01400104 	movi	r5,4
 40069ac:	1009883a 	mov	r4,r2
 40069b0:	40089640 	call	4008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
 40069b4:	0001883a 	nop
 40069b8:	e037883a 	mov	sp,fp
 40069bc:	dfc00117 	ldw	ra,4(sp)
 40069c0:	df000017 	ldw	fp,0(sp)
 40069c4:	dec00204 	addi	sp,sp,8
 40069c8:	f800283a 	ret

040069cc <_ZN13EthernetClass16socketDisconnectEh>:


// Gracefully disconnect a TCP connection.
//
void EthernetClass::socketDisconnect(uint8_t s)
{
 40069cc:	defffd04 	addi	sp,sp,-12
 40069d0:	dfc00215 	stw	ra,8(sp)
 40069d4:	df000115 	stw	fp,4(sp)
 40069d8:	df000104 	addi	fp,sp,4
 40069dc:	2005883a 	mov	r2,r4
 40069e0:	e0bfff05 	stb	r2,-4(fp)
	W5100.execCmdSn(s, Sock_DISCON);
 40069e4:	e0bfff03 	ldbu	r2,-4(fp)
 40069e8:	01400204 	movi	r5,8
 40069ec:	1009883a 	mov	r4,r2
 40069f0:	40089640 	call	4008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
 40069f4:	0001883a 	nop
 40069f8:	e037883a 	mov	sp,fp
 40069fc:	dfc00117 	ldw	ra,4(sp)
 4006a00:	df000017 	ldw	fp,0(sp)
 4006a04:	dec00204 	addi	sp,sp,8
 4006a08:	f800283a 	ret

04006a0c <_ZL11getSnRX_RSRh>:
/*    Socket Data Receive Functions      */
/*****************************************/


static uint16_t getSnRX_RSR(uint8_t s)
{
 4006a0c:	defffc04 	addi	sp,sp,-16
 4006a10:	dfc00315 	stw	ra,12(sp)
 4006a14:	df000215 	stw	fp,8(sp)
 4006a18:	df000204 	addi	fp,sp,8
 4006a1c:	2005883a 	mov	r2,r4
 4006a20:	e0bfff05 	stb	r2,-4(fp)
#if 1
        uint16_t val, prev;

        prev = W5100.readSnRX_RSR(s);
 4006a24:	e0bfff03 	ldbu	r2,-4(fp)
 4006a28:	1009883a 	mov	r4,r2
 4006a2c:	4007aa00 	call	4007aa0 <_ZN10W5100Class12readSnRX_RSREh>
 4006a30:	e0bffe0d 	sth	r2,-8(fp)
        while (1) {
                val = W5100.readSnRX_RSR(s);
 4006a34:	e0bfff03 	ldbu	r2,-4(fp)
 4006a38:	1009883a 	mov	r4,r2
 4006a3c:	4007aa00 	call	4007aa0 <_ZN10W5100Class12readSnRX_RSREh>
 4006a40:	e0bffe8d 	sth	r2,-6(fp)
                if (val == prev) {
 4006a44:	e0fffe8b 	ldhu	r3,-6(fp)
 4006a48:	e0bffe0b 	ldhu	r2,-8(fp)
 4006a4c:	1880021e 	bne	r3,r2,4006a58 <_ZL11getSnRX_RSRh+0x4c>
			return val;
 4006a50:	e0bffe8b 	ldhu	r2,-6(fp)
 4006a54:	00000306 	br	4006a64 <_ZL11getSnRX_RSRh+0x58>
		}
                prev = val;
 4006a58:	e0bffe8b 	ldhu	r2,-6(fp)
 4006a5c:	e0bffe0d 	sth	r2,-8(fp)
{
#if 1
        uint16_t val, prev;

        prev = W5100.readSnRX_RSR(s);
        while (1) {
 4006a60:	003ff406 	br	4006a34 <__alt_data_end+0xfc006a34>
        }
#else
	uint16_t val = W5100.readSnRX_RSR(s);
	return val;
#endif
}
 4006a64:	e037883a 	mov	sp,fp
 4006a68:	dfc00117 	ldw	ra,4(sp)
 4006a6c:	df000017 	ldw	fp,0(sp)
 4006a70:	dec00204 	addi	sp,sp,8
 4006a74:	f800283a 	ret

04006a78 <_ZL9read_datahtPht>:

static void read_data(uint8_t s, uint16_t src, uint8_t *dst, uint16_t len)
{
 4006a78:	defff804 	addi	sp,sp,-32
 4006a7c:	dfc00715 	stw	ra,28(sp)
 4006a80:	df000615 	stw	fp,24(sp)
 4006a84:	df000604 	addi	fp,sp,24
 4006a88:	2807883a 	mov	r3,r5
 4006a8c:	e1bffe15 	stw	r6,-8(fp)
 4006a90:	3805883a 	mov	r2,r7
 4006a94:	e13ffc05 	stb	r4,-16(fp)
 4006a98:	e0fffd0d 	sth	r3,-12(fp)
 4006a9c:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t size;
	uint16_t src_mask;
	uint16_t src_ptr;

	//Serial.printf("read_data, len=%d, at:%d\n", len, src);
	src_mask = (uint16_t)src & W5100.SMASK;
 4006aa0:	e0bffd0b 	ldhu	r2,-12(fp)
 4006aa4:	1081ffcc 	andi	r2,r2,2047
 4006aa8:	e0bffa0d 	sth	r2,-24(fp)
	src_ptr = W5100.RBASE(s) + src_mask;
 4006aac:	e0bffc03 	ldbu	r2,-16(fp)
 4006ab0:	1009883a 	mov	r4,r2
 4006ab4:	4007c140 	call	4007c14 <_ZN10W5100Class5RBASEEh>
 4006ab8:	1007883a 	mov	r3,r2
 4006abc:	e0bffa0b 	ldhu	r2,-24(fp)
 4006ac0:	1885883a 	add	r2,r3,r2
 4006ac4:	e0bffa8d 	sth	r2,-22(fp)

	if (W5100.hasOffsetAddressMapping() || src_mask + len <= W5100.SSIZE) {
 4006ac8:	4007c640 	call	4007c64 <_ZN10W5100Class23hasOffsetAddressMappingEv>
 4006acc:	10803fcc 	andi	r2,r2,255
 4006ad0:	1000051e 	bne	r2,zero,4006ae8 <_ZL9read_datahtPht+0x70>
 4006ad4:	e0fffa0b 	ldhu	r3,-24(fp)
 4006ad8:	e0bfff0b 	ldhu	r2,-4(fp)
 4006adc:	1885883a 	add	r2,r3,r2
 4006ae0:	10820048 	cmpgei	r2,r2,2049
 4006ae4:	1000021e 	bne	r2,zero,4006af0 <_ZL9read_datahtPht+0x78>
 4006ae8:	00800044 	movi	r2,1
 4006aec:	00000106 	br	4006af4 <_ZL9read_datahtPht+0x7c>
 4006af0:	0005883a 	mov	r2,zero
 4006af4:	10803fcc 	andi	r2,r2,255
 4006af8:	10000726 	beq	r2,zero,4006b18 <_ZL9read_datahtPht+0xa0>
		W5100.read(src_ptr, dst, len);
 4006afc:	e0bffa8b 	ldhu	r2,-22(fp)
 4006b00:	e0ffff0b 	ldhu	r3,-4(fp)
 4006b04:	180d883a 	mov	r6,r3
 4006b08:	e17ffe17 	ldw	r5,-8(fp)
 4006b0c:	1009883a 	mov	r4,r2
 4006b10:	40087100 	call	4008710 <_ZN10W5100Class4readEtPht>
		size = W5100.SSIZE - src_mask;
		W5100.read(src_ptr, dst, size);
		dst += size;
		W5100.read(W5100.RBASE(s), dst, len - size);
	}
}
 4006b14:	00001906 	br	4006b7c <_ZL9read_datahtPht+0x104>
	src_ptr = W5100.RBASE(s) + src_mask;

	if (W5100.hasOffsetAddressMapping() || src_mask + len <= W5100.SSIZE) {
		W5100.read(src_ptr, dst, len);
	} else {
		size = W5100.SSIZE - src_mask;
 4006b18:	e0bffa0b 	ldhu	r2,-24(fp)
 4006b1c:	00c20004 	movi	r3,2048
 4006b20:	1885c83a 	sub	r2,r3,r2
 4006b24:	e0bffb0d 	sth	r2,-20(fp)
		W5100.read(src_ptr, dst, size);
 4006b28:	e0bffa8b 	ldhu	r2,-22(fp)
 4006b2c:	e0fffb0b 	ldhu	r3,-20(fp)
 4006b30:	180d883a 	mov	r6,r3
 4006b34:	e17ffe17 	ldw	r5,-8(fp)
 4006b38:	1009883a 	mov	r4,r2
 4006b3c:	40087100 	call	4008710 <_ZN10W5100Class4readEtPht>
		dst += size;
 4006b40:	e0bffb0b 	ldhu	r2,-20(fp)
 4006b44:	e0fffe17 	ldw	r3,-8(fp)
 4006b48:	1885883a 	add	r2,r3,r2
 4006b4c:	e0bffe15 	stw	r2,-8(fp)
		W5100.read(W5100.RBASE(s), dst, len - size);
 4006b50:	e0bffc03 	ldbu	r2,-16(fp)
 4006b54:	1009883a 	mov	r4,r2
 4006b58:	4007c140 	call	4007c14 <_ZN10W5100Class5RBASEEh>
 4006b5c:	113fffcc 	andi	r4,r2,65535
 4006b60:	e0ffff0b 	ldhu	r3,-4(fp)
 4006b64:	e0bffb0b 	ldhu	r2,-20(fp)
 4006b68:	1885c83a 	sub	r2,r3,r2
 4006b6c:	10bfffcc 	andi	r2,r2,65535
 4006b70:	100d883a 	mov	r6,r2
 4006b74:	e17ffe17 	ldw	r5,-8(fp)
 4006b78:	40087100 	call	4008710 <_ZN10W5100Class4readEtPht>
	}
}
 4006b7c:	0001883a 	nop
 4006b80:	e037883a 	mov	sp,fp
 4006b84:	dfc00117 	ldw	ra,4(sp)
 4006b88:	df000017 	ldw	fp,0(sp)
 4006b8c:	dec00204 	addi	sp,sp,8
 4006b90:	f800283a 	ret

04006b94 <_ZN13EthernetClass10socketRecvEhPhs>:

// Receive data.  Returns size, or -1 for no data, or 0 if connection closed
//
int EthernetClass::socketRecv(uint8_t s, uint8_t *buf, int16_t len)
{
 4006b94:	defff804 	addi	sp,sp,-32
 4006b98:	dfc00715 	stw	ra,28(sp)
 4006b9c:	df000615 	stw	fp,24(sp)
 4006ba0:	df000604 	addi	fp,sp,24
 4006ba4:	2007883a 	mov	r3,r4
 4006ba8:	e17ffe15 	stw	r5,-8(fp)
 4006bac:	3005883a 	mov	r2,r6
 4006bb0:	e0fffd05 	stb	r3,-12(fp)
 4006bb4:	e0bfff0d 	sth	r2,-4(fp)
	// Check how much data is available
	int ret = state[s].RX_RSR;
 4006bb8:	e0fffd03 	ldbu	r3,-12(fp)
 4006bbc:	008100f4 	movhi	r2,1027
 4006bc0:	109a0804 	addi	r2,r2,26656
 4006bc4:	180690fa 	slli	r3,r3,3
 4006bc8:	10c5883a 	add	r2,r2,r3
 4006bcc:	1080000b 	ldhu	r2,0(r2)
 4006bd0:	10bfffcc 	andi	r2,r2,65535
 4006bd4:	e0bffa15 	stw	r2,-24(fp)
	if (ret < len) {
 4006bd8:	e0bfff0f 	ldh	r2,-4(fp)
 4006bdc:	e0fffa17 	ldw	r3,-24(fp)
 4006be0:	1880170e 	bge	r3,r2,4006c40 <_ZN13EthernetClass10socketRecvEhPhs+0xac>
		uint16_t rsr = getSnRX_RSR(s);
 4006be4:	e0bffd03 	ldbu	r2,-12(fp)
 4006be8:	1009883a 	mov	r4,r2
 4006bec:	4006a0c0 	call	4006a0c <_ZL11getSnRX_RSRh>
 4006bf0:	e0bffb0d 	sth	r2,-20(fp)
		ret = rsr - state[s].RX_inc;
 4006bf4:	e0fffb0b 	ldhu	r3,-20(fp)
 4006bf8:	e13ffd03 	ldbu	r4,-12(fp)
 4006bfc:	008100f4 	movhi	r2,1027
 4006c00:	109a0804 	addi	r2,r2,26656
 4006c04:	200890fa 	slli	r4,r4,3
 4006c08:	1105883a 	add	r2,r2,r4
 4006c0c:	10800184 	addi	r2,r2,6
 4006c10:	10800003 	ldbu	r2,0(r2)
 4006c14:	10803fcc 	andi	r2,r2,255
 4006c18:	1885c83a 	sub	r2,r3,r2
 4006c1c:	e0bffa15 	stw	r2,-24(fp)
		state[s].RX_RSR = ret;
 4006c20:	e0fffd03 	ldbu	r3,-12(fp)
 4006c24:	e0bffa17 	ldw	r2,-24(fp)
 4006c28:	1009883a 	mov	r4,r2
 4006c2c:	008100f4 	movhi	r2,1027
 4006c30:	109a0804 	addi	r2,r2,26656
 4006c34:	180690fa 	slli	r3,r3,3
 4006c38:	10c5883a 	add	r2,r2,r3
 4006c3c:	1100000d 	sth	r4,0(r2)
		//Serial.printf("Sock_RECV, RX_RSR=%d, RX_inc=%d\n", ret, state[s].RX_inc);
	}
	if (ret == 0) {
 4006c40:	e0bffa17 	ldw	r2,-24(fp)
 4006c44:	1000111e 	bne	r2,zero,4006c8c <_ZN13EthernetClass10socketRecvEhPhs+0xf8>
		// No data available.
		uint8_t status = W5100.readSnSR(s);
 4006c48:	e0bffd03 	ldbu	r2,-12(fp)
 4006c4c:	1009883a 	mov	r4,r2
 4006c50:	40077e80 	call	40077e8 <_ZN10W5100Class8readSnSREh>
 4006c54:	e0bffb85 	stb	r2,-18(fp)
		if ( status == SnSR::LISTEN || status == SnSR::CLOSED ||
 4006c58:	e0bffb83 	ldbu	r2,-18(fp)
 4006c5c:	10800520 	cmpeqi	r2,r2,20
 4006c60:	1000051e 	bne	r2,zero,4006c78 <_ZN13EthernetClass10socketRecvEhPhs+0xe4>
 4006c64:	e0bffb83 	ldbu	r2,-18(fp)
 4006c68:	10000326 	beq	r2,zero,4006c78 <_ZN13EthernetClass10socketRecvEhPhs+0xe4>
 4006c6c:	e0bffb83 	ldbu	r2,-18(fp)
 4006c70:	10800718 	cmpnei	r2,r2,28
 4006c74:	1000021e 	bne	r2,zero,4006c80 <_ZN13EthernetClass10socketRecvEhPhs+0xec>
		  status == SnSR::CLOSE_WAIT ) {
			// The remote end has closed its side of the connection,
			// so this is the eof state
			ret = 0;
 4006c78:	e03ffa15 	stw	zero,-24(fp)
 4006c7c:	00006706 	br	4006e1c <_ZN13EthernetClass10socketRecvEhPhs+0x288>
		} else {
			// The connection is still up, but there's no data waiting to be read
			ret = -1;
 4006c80:	00bfffc4 	movi	r2,-1
 4006c84:	e0bffa15 	stw	r2,-24(fp)
 4006c88:	00006406 	br	4006e1c <_ZN13EthernetClass10socketRecvEhPhs+0x288>
		}
	} else {
		if (ret > len) ret = len; // more data available than buffer length
 4006c8c:	e0ffff0f 	ldh	r3,-4(fp)
 4006c90:	e0bffa17 	ldw	r2,-24(fp)
 4006c94:	1880020e 	bge	r3,r2,4006ca0 <_ZN13EthernetClass10socketRecvEhPhs+0x10c>
 4006c98:	e0bfff0f 	ldh	r2,-4(fp)
 4006c9c:	e0bffa15 	stw	r2,-24(fp)
		uint16_t ptr = state[s].RX_RD;
 4006ca0:	e0fffd03 	ldbu	r3,-12(fp)
 4006ca4:	008100f4 	movhi	r2,1027
 4006ca8:	109a0804 	addi	r2,r2,26656
 4006cac:	180690fa 	slli	r3,r3,3
 4006cb0:	10c5883a 	add	r2,r2,r3
 4006cb4:	10800084 	addi	r2,r2,2
 4006cb8:	1080000b 	ldhu	r2,0(r2)
 4006cbc:	e0bffc0d 	sth	r2,-16(fp)
		if (buf) read_data(s, ptr, buf, ret);
 4006cc0:	e0bffe17 	ldw	r2,-8(fp)
 4006cc4:	10000926 	beq	r2,zero,4006cec <_ZN13EthernetClass10socketRecvEhPhs+0x158>
 4006cc8:	e0fffd03 	ldbu	r3,-12(fp)
 4006ccc:	e13ffc0b 	ldhu	r4,-16(fp)
 4006cd0:	e0bffa17 	ldw	r2,-24(fp)
 4006cd4:	10bfffcc 	andi	r2,r2,65535
 4006cd8:	100f883a 	mov	r7,r2
 4006cdc:	e1bffe17 	ldw	r6,-8(fp)
 4006ce0:	200b883a 	mov	r5,r4
 4006ce4:	1809883a 	mov	r4,r3
 4006ce8:	4006a780 	call	4006a78 <_ZL9read_datahtPht>
		ptr += ret;
 4006cec:	e0bffa17 	ldw	r2,-24(fp)
 4006cf0:	1007883a 	mov	r3,r2
 4006cf4:	e0bffc0b 	ldhu	r2,-16(fp)
 4006cf8:	1885883a 	add	r2,r3,r2
 4006cfc:	e0bffc0d 	sth	r2,-16(fp)
		state[s].RX_RD = ptr;
 4006d00:	e0fffd03 	ldbu	r3,-12(fp)
 4006d04:	008100f4 	movhi	r2,1027
 4006d08:	109a0804 	addi	r2,r2,26656
 4006d0c:	180690fa 	slli	r3,r3,3
 4006d10:	10c5883a 	add	r2,r2,r3
 4006d14:	10800084 	addi	r2,r2,2
 4006d18:	e0fffc0b 	ldhu	r3,-16(fp)
 4006d1c:	10c0000d 	sth	r3,0(r2)
		state[s].RX_RSR -= ret;
 4006d20:	e0fffd03 	ldbu	r3,-12(fp)
 4006d24:	e13ffd03 	ldbu	r4,-12(fp)
 4006d28:	008100f4 	movhi	r2,1027
 4006d2c:	109a0804 	addi	r2,r2,26656
 4006d30:	200890fa 	slli	r4,r4,3
 4006d34:	1105883a 	add	r2,r2,r4
 4006d38:	1080000b 	ldhu	r2,0(r2)
 4006d3c:	e13ffa17 	ldw	r4,-24(fp)
 4006d40:	1105c83a 	sub	r2,r2,r4
 4006d44:	1009883a 	mov	r4,r2
 4006d48:	008100f4 	movhi	r2,1027
 4006d4c:	109a0804 	addi	r2,r2,26656
 4006d50:	180690fa 	slli	r3,r3,3
 4006d54:	10c5883a 	add	r2,r2,r3
 4006d58:	1100000d 	sth	r4,0(r2)
		uint16_t inc = state[s].RX_inc + ret;
 4006d5c:	e0fffd03 	ldbu	r3,-12(fp)
 4006d60:	008100f4 	movhi	r2,1027
 4006d64:	109a0804 	addi	r2,r2,26656
 4006d68:	180690fa 	slli	r3,r3,3
 4006d6c:	10c5883a 	add	r2,r2,r3
 4006d70:	10800184 	addi	r2,r2,6
 4006d74:	10800003 	ldbu	r2,0(r2)
 4006d78:	10803fcc 	andi	r2,r2,255
 4006d7c:	e0fffa17 	ldw	r3,-24(fp)
 4006d80:	10c5883a 	add	r2,r2,r3
 4006d84:	e0bffc8d 	sth	r2,-14(fp)
		if (inc >= 250 || state[s].RX_RSR == 0) {
 4006d88:	e0bffc8b 	ldhu	r2,-14(fp)
 4006d8c:	10803ea8 	cmpgeui	r2,r2,250
 4006d90:	1000081e 	bne	r2,zero,4006db4 <_ZN13EthernetClass10socketRecvEhPhs+0x220>
 4006d94:	e0fffd03 	ldbu	r3,-12(fp)
 4006d98:	008100f4 	movhi	r2,1027
 4006d9c:	109a0804 	addi	r2,r2,26656
 4006da0:	180690fa 	slli	r3,r3,3
 4006da4:	10c5883a 	add	r2,r2,r3
 4006da8:	1080000b 	ldhu	r2,0(r2)
 4006dac:	10bfffcc 	andi	r2,r2,65535
 4006db0:	1000111e 	bne	r2,zero,4006df8 <_ZN13EthernetClass10socketRecvEhPhs+0x264>
			state[s].RX_inc = 0;
 4006db4:	e0fffd03 	ldbu	r3,-12(fp)
 4006db8:	008100f4 	movhi	r2,1027
 4006dbc:	109a0804 	addi	r2,r2,26656
 4006dc0:	180690fa 	slli	r3,r3,3
 4006dc4:	10c5883a 	add	r2,r2,r3
 4006dc8:	10800184 	addi	r2,r2,6
 4006dcc:	10000005 	stb	zero,0(r2)
			W5100.writeSnRX_RD(s, ptr);
 4006dd0:	e0bffd03 	ldbu	r2,-12(fp)
 4006dd4:	e0fffc0b 	ldhu	r3,-16(fp)
 4006dd8:	180b883a 	mov	r5,r3
 4006ddc:	1009883a 	mov	r4,r2
 4006de0:	4007b000 	call	4007b00 <_ZN10W5100Class12writeSnRX_RDEht>
			W5100.execCmdSn(s, Sock_RECV);
 4006de4:	e0bffd03 	ldbu	r2,-12(fp)
 4006de8:	01401004 	movi	r5,64
 4006dec:	1009883a 	mov	r4,r2
 4006df0:	40089640 	call	4008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>
 4006df4:	00000906 	br	4006e1c <_ZN13EthernetClass10socketRecvEhPhs+0x288>
			//Serial.printf("Sock_RECV cmd, RX_RD=%d, RX_RSR=%d\n",
			//  state[s].RX_RD, state[s].RX_RSR);
		} else {
			state[s].RX_inc = inc;
 4006df8:	e0fffd03 	ldbu	r3,-12(fp)
 4006dfc:	e0bffc8b 	ldhu	r2,-14(fp)
 4006e00:	1009883a 	mov	r4,r2
 4006e04:	008100f4 	movhi	r2,1027
 4006e08:	109a0804 	addi	r2,r2,26656
 4006e0c:	180690fa 	slli	r3,r3,3
 4006e10:	10c5883a 	add	r2,r2,r3
 4006e14:	10800184 	addi	r2,r2,6
 4006e18:	11000005 	stb	r4,0(r2)
		}
	}
	//Serial.printf("socketRecv, ret=%d\n", ret);
	return ret;
 4006e1c:	e0bffa17 	ldw	r2,-24(fp)
}
 4006e20:	e037883a 	mov	sp,fp
 4006e24:	dfc00117 	ldw	ra,4(sp)
 4006e28:	df000017 	ldw	fp,0(sp)
 4006e2c:	dec00204 	addi	sp,sp,8
 4006e30:	f800283a 	ret

04006e34 <_ZN13EthernetClass19socketRecvAvailableEh>:

uint16_t EthernetClass::socketRecvAvailable(uint8_t s)
{
 4006e34:	defffc04 	addi	sp,sp,-16
 4006e38:	dfc00315 	stw	ra,12(sp)
 4006e3c:	df000215 	stw	fp,8(sp)
 4006e40:	df000204 	addi	fp,sp,8
 4006e44:	2005883a 	mov	r2,r4
 4006e48:	e0bfff05 	stb	r2,-4(fp)
	uint16_t ret = state[s].RX_RSR;
 4006e4c:	e0ffff03 	ldbu	r3,-4(fp)
 4006e50:	008100f4 	movhi	r2,1027
 4006e54:	109a0804 	addi	r2,r2,26656
 4006e58:	180690fa 	slli	r3,r3,3
 4006e5c:	10c5883a 	add	r2,r2,r3
 4006e60:	1080000b 	ldhu	r2,0(r2)
 4006e64:	e0bffe0d 	sth	r2,-8(fp)
	if (ret == 0) {
 4006e68:	e0bffe0b 	ldhu	r2,-8(fp)
 4006e6c:	1000161e 	bne	r2,zero,4006ec8 <_ZN13EthernetClass19socketRecvAvailableEh+0x94>
		uint16_t rsr = getSnRX_RSR(s);
 4006e70:	e0bfff03 	ldbu	r2,-4(fp)
 4006e74:	1009883a 	mov	r4,r2
 4006e78:	4006a0c0 	call	4006a0c <_ZL11getSnRX_RSRh>
 4006e7c:	e0bffe8d 	sth	r2,-6(fp)
		ret = rsr - state[s].RX_inc;
 4006e80:	e0ffff03 	ldbu	r3,-4(fp)
 4006e84:	008100f4 	movhi	r2,1027
 4006e88:	109a0804 	addi	r2,r2,26656
 4006e8c:	180690fa 	slli	r3,r3,3
 4006e90:	10c5883a 	add	r2,r2,r3
 4006e94:	10800184 	addi	r2,r2,6
 4006e98:	10800003 	ldbu	r2,0(r2)
 4006e9c:	10803fcc 	andi	r2,r2,255
 4006ea0:	e0fffe8b 	ldhu	r3,-6(fp)
 4006ea4:	1885c83a 	sub	r2,r3,r2
 4006ea8:	e0bffe0d 	sth	r2,-8(fp)
		state[s].RX_RSR = ret;
 4006eac:	e0ffff03 	ldbu	r3,-4(fp)
 4006eb0:	008100f4 	movhi	r2,1027
 4006eb4:	109a0804 	addi	r2,r2,26656
 4006eb8:	180690fa 	slli	r3,r3,3
 4006ebc:	10c5883a 	add	r2,r2,r3
 4006ec0:	e0fffe0b 	ldhu	r3,-8(fp)
 4006ec4:	10c0000d 	sth	r3,0(r2)
		//Serial.printf("sockRecvAvailable s=%d, RX_RSR=%d\n", s, ret);
	}
	return ret;
 4006ec8:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4006ecc:	e037883a 	mov	sp,fp
 4006ed0:	dfc00117 	ldw	ra,4(sp)
 4006ed4:	df000017 	ldw	fp,0(sp)
 4006ed8:	dec00204 	addi	sp,sp,8
 4006edc:	f800283a 	ret

04006ee0 <_ZN13EthernetClass10socketPeekEh>:

// get the first byte in the receive queue (no checking)
//
uint8_t EthernetClass::socketPeek(uint8_t s)
{
 4006ee0:	defffb04 	addi	sp,sp,-20
 4006ee4:	dfc00415 	stw	ra,16(sp)
 4006ee8:	df000315 	stw	fp,12(sp)
 4006eec:	dc000215 	stw	r16,8(sp)
 4006ef0:	df000304 	addi	fp,sp,12
 4006ef4:	2005883a 	mov	r2,r4
 4006ef8:	e0bffe05 	stb	r2,-8(fp)
	uint8_t b;
	uint16_t ptr = state[s].RX_RD;
 4006efc:	e0fffe03 	ldbu	r3,-8(fp)
 4006f00:	008100f4 	movhi	r2,1027
 4006f04:	109a0804 	addi	r2,r2,26656
 4006f08:	180690fa 	slli	r3,r3,3
 4006f0c:	10c5883a 	add	r2,r2,r3
 4006f10:	10800084 	addi	r2,r2,2
 4006f14:	1080000b 	ldhu	r2,0(r2)
 4006f18:	e0bffd0d 	sth	r2,-12(fp)
	W5100.read((ptr & W5100.SMASK) + W5100.RBASE(s), &b, 1);
 4006f1c:	e0bffd0b 	ldhu	r2,-12(fp)
 4006f20:	1081ffcc 	andi	r2,r2,2047
 4006f24:	1021883a 	mov	r16,r2
 4006f28:	e0bffe03 	ldbu	r2,-8(fp)
 4006f2c:	1009883a 	mov	r4,r2
 4006f30:	4007c140 	call	4007c14 <_ZN10W5100Class5RBASEEh>
 4006f34:	8085883a 	add	r2,r16,r2
 4006f38:	10bfffcc 	andi	r2,r2,65535
 4006f3c:	e0fffd84 	addi	r3,fp,-10
 4006f40:	01800044 	movi	r6,1
 4006f44:	180b883a 	mov	r5,r3
 4006f48:	1009883a 	mov	r4,r2
 4006f4c:	40087100 	call	4008710 <_ZN10W5100Class4readEtPht>
	return b;
 4006f50:	e0bffd83 	ldbu	r2,-10(fp)
}
 4006f54:	e6ffff04 	addi	sp,fp,-4
 4006f58:	dfc00217 	ldw	ra,8(sp)
 4006f5c:	df000117 	ldw	fp,4(sp)
 4006f60:	dc000017 	ldw	r16,0(sp)
 4006f64:	dec00304 	addi	sp,sp,12
 4006f68:	f800283a 	ret

04006f6c <_ZL11getSnTX_FSRh>:
/*****************************************/
/*    Socket Data Transmit Functions     */
/*****************************************/

static uint16_t getSnTX_FSR(uint8_t s)
{
 4006f6c:	defffc04 	addi	sp,sp,-16
 4006f70:	dfc00315 	stw	ra,12(sp)
 4006f74:	df000215 	stw	fp,8(sp)
 4006f78:	df000204 	addi	fp,sp,8
 4006f7c:	2005883a 	mov	r2,r4
 4006f80:	e0bfff05 	stb	r2,-4(fp)
        uint16_t val, prev;

        prev = W5100.readSnTX_FSR(s);
 4006f84:	e0bfff03 	ldbu	r2,-4(fp)
 4006f88:	1009883a 	mov	r4,r2
 4006f8c:	400797c0 	call	400797c <_ZN10W5100Class12readSnTX_FSREh>
 4006f90:	e0bffe0d 	sth	r2,-8(fp)
        while (1) {
                val = W5100.readSnTX_FSR(s);
 4006f94:	e0bfff03 	ldbu	r2,-4(fp)
 4006f98:	1009883a 	mov	r4,r2
 4006f9c:	400797c0 	call	400797c <_ZN10W5100Class12readSnTX_FSREh>
 4006fa0:	e0bffe8d 	sth	r2,-6(fp)
                if (val == prev) {
 4006fa4:	e0fffe8b 	ldhu	r3,-6(fp)
 4006fa8:	e0bffe0b 	ldhu	r2,-8(fp)
 4006fac:	18800a1e 	bne	r3,r2,4006fd8 <_ZL11getSnTX_FSRh+0x6c>
			state[s].TX_FSR = val;
 4006fb0:	e0ffff03 	ldbu	r3,-4(fp)
 4006fb4:	008100f4 	movhi	r2,1027
 4006fb8:	109a0804 	addi	r2,r2,26656
 4006fbc:	180690fa 	slli	r3,r3,3
 4006fc0:	10c5883a 	add	r2,r2,r3
 4006fc4:	10800104 	addi	r2,r2,4
 4006fc8:	e0fffe8b 	ldhu	r3,-6(fp)
 4006fcc:	10c0000d 	sth	r3,0(r2)
			return val;
 4006fd0:	e0bffe8b 	ldhu	r2,-6(fp)
 4006fd4:	00000306 	br	4006fe4 <_ZL11getSnTX_FSRh+0x78>
		}
                prev = val;
 4006fd8:	e0bffe8b 	ldhu	r2,-6(fp)
 4006fdc:	e0bffe0d 	sth	r2,-8(fp)
static uint16_t getSnTX_FSR(uint8_t s)
{
        uint16_t val, prev;

        prev = W5100.readSnTX_FSR(s);
        while (1) {
 4006fe0:	003fec06 	br	4006f94 <__alt_data_end+0xfc006f94>
			state[s].TX_FSR = val;
			return val;
		}
                prev = val;
        }
}
 4006fe4:	e037883a 	mov	sp,fp
 4006fe8:	dfc00117 	ldw	ra,4(sp)
 4006fec:	df000017 	ldw	fp,0(sp)
 4006ff0:	dec00204 	addi	sp,sp,8
 4006ff4:	f800283a 	ret

04006ff8 <_ZL10write_datahtPKht>:


static void write_data(uint8_t s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
 4006ff8:	defff804 	addi	sp,sp,-32
 4006ffc:	dfc00715 	stw	ra,28(sp)
 4007000:	df000615 	stw	fp,24(sp)
 4007004:	df000604 	addi	fp,sp,24
 4007008:	2807883a 	mov	r3,r5
 400700c:	e1bffe15 	stw	r6,-8(fp)
 4007010:	3805883a 	mov	r2,r7
 4007014:	e13ffc05 	stb	r4,-16(fp)
 4007018:	e0fffd0d 	sth	r3,-12(fp)
 400701c:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t ptr = W5100.readSnTX_WR(s);
 4007020:	e0bffc03 	ldbu	r2,-16(fp)
 4007024:	1009883a 	mov	r4,r2
 4007028:	4007a400 	call	4007a40 <_ZN10W5100Class11readSnTX_WREh>
 400702c:	e0bffa0d 	sth	r2,-24(fp)
	ptr += data_offset;
 4007030:	e0fffa0b 	ldhu	r3,-24(fp)
 4007034:	e0bffd0b 	ldhu	r2,-12(fp)
 4007038:	1885883a 	add	r2,r3,r2
 400703c:	e0bffa0d 	sth	r2,-24(fp)
	uint16_t offset = ptr & W5100.SMASK;
 4007040:	e0bffa0b 	ldhu	r2,-24(fp)
 4007044:	1081ffcc 	andi	r2,r2,2047
 4007048:	e0bffa8d 	sth	r2,-22(fp)
	uint16_t dstAddr = offset + W5100.SBASE(s);
 400704c:	e0bffc03 	ldbu	r2,-16(fp)
 4007050:	1009883a 	mov	r4,r2
 4007054:	4007bc40 	call	4007bc4 <_ZN10W5100Class5SBASEEh>
 4007058:	1007883a 	mov	r3,r2
 400705c:	e0bffa8b 	ldhu	r2,-22(fp)
 4007060:	1885883a 	add	r2,r3,r2
 4007064:	e0bffb0d 	sth	r2,-20(fp)

	if (W5100.hasOffsetAddressMapping() || offset + len <= W5100.SSIZE) {
 4007068:	4007c640 	call	4007c64 <_ZN10W5100Class23hasOffsetAddressMappingEv>
 400706c:	10803fcc 	andi	r2,r2,255
 4007070:	1000051e 	bne	r2,zero,4007088 <_ZL10write_datahtPKht+0x90>
 4007074:	e0fffa8b 	ldhu	r3,-22(fp)
 4007078:	e0bfff0b 	ldhu	r2,-4(fp)
 400707c:	1885883a 	add	r2,r3,r2
 4007080:	10820048 	cmpgei	r2,r2,2049
 4007084:	1000021e 	bne	r2,zero,4007090 <_ZL10write_datahtPKht+0x98>
 4007088:	00800044 	movi	r2,1
 400708c:	00000106 	br	4007094 <_ZL10write_datahtPKht+0x9c>
 4007090:	0005883a 	mov	r2,zero
 4007094:	10803fcc 	andi	r2,r2,255
 4007098:	10000726 	beq	r2,zero,40070b8 <_ZL10write_datahtPKht+0xc0>
		W5100.write(dstAddr, data, len);
 400709c:	e0bffb0b 	ldhu	r2,-20(fp)
 40070a0:	e0ffff0b 	ldhu	r3,-4(fp)
 40070a4:	180d883a 	mov	r6,r3
 40070a8:	e17ffe17 	ldw	r5,-8(fp)
 40070ac:	1009883a 	mov	r4,r2
 40070b0:	400856c0 	call	400856c <_ZN10W5100Class5writeEtPKht>
 40070b4:	00001706 	br	4007114 <_ZL10write_datahtPKht+0x11c>
	} else {
		// Wrap around circular buffer
		uint16_t size = W5100.SSIZE - offset;
 40070b8:	e0bffa8b 	ldhu	r2,-22(fp)
 40070bc:	00c20004 	movi	r3,2048
 40070c0:	1885c83a 	sub	r2,r3,r2
 40070c4:	e0bffb8d 	sth	r2,-18(fp)
		W5100.write(dstAddr, data, size);
 40070c8:	e0bffb0b 	ldhu	r2,-20(fp)
 40070cc:	e0fffb8b 	ldhu	r3,-18(fp)
 40070d0:	180d883a 	mov	r6,r3
 40070d4:	e17ffe17 	ldw	r5,-8(fp)
 40070d8:	1009883a 	mov	r4,r2
 40070dc:	400856c0 	call	400856c <_ZN10W5100Class5writeEtPKht>
		W5100.write(W5100.SBASE(s), data + size, len - size);
 40070e0:	e0bffc03 	ldbu	r2,-16(fp)
 40070e4:	1009883a 	mov	r4,r2
 40070e8:	4007bc40 	call	4007bc4 <_ZN10W5100Class5SBASEEh>
 40070ec:	113fffcc 	andi	r4,r2,65535
 40070f0:	e0bffb8b 	ldhu	r2,-18(fp)
 40070f4:	e0fffe17 	ldw	r3,-8(fp)
 40070f8:	188b883a 	add	r5,r3,r2
 40070fc:	e0ffff0b 	ldhu	r3,-4(fp)
 4007100:	e0bffb8b 	ldhu	r2,-18(fp)
 4007104:	1885c83a 	sub	r2,r3,r2
 4007108:	10bfffcc 	andi	r2,r2,65535
 400710c:	100d883a 	mov	r6,r2
 4007110:	400856c0 	call	400856c <_ZN10W5100Class5writeEtPKht>
	}
	ptr += len;
 4007114:	e0fffa0b 	ldhu	r3,-24(fp)
 4007118:	e0bfff0b 	ldhu	r2,-4(fp)
 400711c:	1885883a 	add	r2,r3,r2
 4007120:	e0bffa0d 	sth	r2,-24(fp)
	W5100.writeSnTX_WR(s, ptr);
 4007124:	e0bffc03 	ldbu	r2,-16(fp)
 4007128:	e0fffa0b 	ldhu	r3,-24(fp)
 400712c:	180b883a 	mov	r5,r3
 4007130:	1009883a 	mov	r4,r2
 4007134:	40079dc0 	call	40079dc <_ZN10W5100Class12writeSnTX_WREht>
}
 4007138:	0001883a 	nop
 400713c:	e037883a 	mov	sp,fp
 4007140:	dfc00117 	ldw	ra,4(sp)
 4007144:	df000017 	ldw	fp,0(sp)
 4007148:	dec00204 	addi	sp,sp,8
 400714c:	f800283a 	ret

04007150 <_ZN13EthernetClass10socketSendEhPKht>:
/**
 * @brief	This function used to send the data in TCP mode
 * @return	1 for success else 0.
 */
uint16_t EthernetClass::socketSend(uint8_t s, const uint8_t * buf, uint16_t len)
{
 4007150:	defff904 	addi	sp,sp,-28
 4007154:	dfc00615 	stw	ra,24(sp)
 4007158:	df000515 	stw	fp,20(sp)
 400715c:	df000504 	addi	fp,sp,20
 4007160:	2007883a 	mov	r3,r4
 4007164:	e17ffe15 	stw	r5,-8(fp)
 4007168:	3005883a 	mov	r2,r6
 400716c:	e0fffd05 	stb	r3,-12(fp)
 4007170:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t status=0;
 4007174:	e03ffb85 	stb	zero,-18(fp)
	uint16_t ret=0;
 4007178:	e03ffb0d 	sth	zero,-20(fp)
	uint16_t freesize=0;
 400717c:	e03ffc0d 	sth	zero,-16(fp)

	if (len > W5100.SSIZE) {
 4007180:	e0bfff0b 	ldhu	r2,-4(fp)
 4007184:	10820070 	cmpltui	r2,r2,2049
 4007188:	1000031e 	bne	r2,zero,4007198 <_ZN13EthernetClass10socketSendEhPKht+0x48>
		ret = W5100.SSIZE; // check size not to exceed MAX size.
 400718c:	00820004 	movi	r2,2048
 4007190:	e0bffb0d 	sth	r2,-20(fp)
 4007194:	00000206 	br	40071a0 <_ZN13EthernetClass10socketSendEhPKht+0x50>
	} else {
		ret = len;
 4007198:	e0bfff0b 	ldhu	r2,-4(fp)
 400719c:	e0bffb0d 	sth	r2,-20(fp)
	}

	// if freebuf is available, start.
	do {
		freesize = getSnTX_FSR(s);
 40071a0:	e0bffd03 	ldbu	r2,-12(fp)
 40071a4:	1009883a 	mov	r4,r2
 40071a8:	4006f6c0 	call	4006f6c <_ZL11getSnTX_FSRh>
 40071ac:	e0bffc0d 	sth	r2,-16(fp)
		status = W5100.readSnSR(s);
 40071b0:	e0bffd03 	ldbu	r2,-12(fp)
 40071b4:	1009883a 	mov	r4,r2
 40071b8:	40077e80 	call	40077e8 <_ZN10W5100Class8readSnSREh>
 40071bc:	e0bffb85 	stb	r2,-18(fp)
		if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT)) {
 40071c0:	e0bffb83 	ldbu	r2,-18(fp)
 40071c4:	108005e0 	cmpeqi	r2,r2,23
 40071c8:	1000051e 	bne	r2,zero,40071e0 <_ZN13EthernetClass10socketSendEhPKht+0x90>
 40071cc:	e0bffb83 	ldbu	r2,-18(fp)
 40071d0:	10800720 	cmpeqi	r2,r2,28
 40071d4:	1000021e 	bne	r2,zero,40071e0 <_ZN13EthernetClass10socketSendEhPKht+0x90>
			ret = 0;
 40071d8:	e03ffb0d 	sth	zero,-20(fp)
			break;
 40071dc:	00000406 	br	40071f0 <_ZN13EthernetClass10socketSendEhPKht+0xa0>
		}
		yield();
	} while (freesize < ret);
 40071e0:	e0fffc0b 	ldhu	r3,-16(fp)
 40071e4:	e0bffb0b 	ldhu	r2,-20(fp)
 40071e8:	1880012e 	bgeu	r3,r2,40071f0 <_ZN13EthernetClass10socketSendEhPKht+0xa0>
	} else {
		ret = len;
	}

	// if freebuf is available, start.
	do {
 40071ec:	003fec06 	br	40071a0 <__alt_data_end+0xfc0071a0>
		}
		yield();
	} while (freesize < ret);

	// copy data
	write_data(s, 0, (uint8_t *)buf, ret);
 40071f0:	e0bffd03 	ldbu	r2,-12(fp)
 40071f4:	e0fffb0b 	ldhu	r3,-20(fp)
 40071f8:	180f883a 	mov	r7,r3
 40071fc:	e1bffe17 	ldw	r6,-8(fp)
 4007200:	000b883a 	mov	r5,zero
 4007204:	1009883a 	mov	r4,r2
 4007208:	4006ff80 	call	4006ff8 <_ZL10write_datahtPKht>
	W5100.execCmdSn(s, Sock_SEND);
 400720c:	e0bffd03 	ldbu	r2,-12(fp)
 4007210:	01400804 	movi	r5,32
 4007214:	1009883a 	mov	r4,r2
 4007218:	40089640 	call	4008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>

	/* +2008.01 bj */
	while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) {
 400721c:	e0bffd03 	ldbu	r2,-12(fp)
 4007220:	1009883a 	mov	r4,r2
 4007224:	40077ac0 	call	40077ac <_ZN10W5100Class8readSnIREh>
 4007228:	10803fcc 	andi	r2,r2,255
 400722c:	1080040c 	andi	r2,r2,16
 4007230:	1005003a 	cmpeq	r2,r2,zero
 4007234:	10803fcc 	andi	r2,r2,255
 4007238:	10000926 	beq	r2,zero,4007260 <_ZN13EthernetClass10socketSendEhPKht+0x110>
		/* m2008.01 [bj] : reduce code */
		if ( W5100.readSnSR(s) == SnSR::CLOSED ) {
 400723c:	e0bffd03 	ldbu	r2,-12(fp)
 4007240:	1009883a 	mov	r4,r2
 4007244:	40077e80 	call	40077e8 <_ZN10W5100Class8readSnSREh>
 4007248:	10803fcc 	andi	r2,r2,255
 400724c:	1005003a 	cmpeq	r2,r2,zero
 4007250:	10803fcc 	andi	r2,r2,255
 4007254:	103ff126 	beq	r2,zero,400721c <__alt_data_end+0xfc00721c>
			return 0;
 4007258:	0005883a 	mov	r2,zero
 400725c:	00000506 	br	4007274 <_ZN13EthernetClass10socketSendEhPKht+0x124>
		}
		yield();
	}
	/* +2008.01 bj */
	W5100.writeSnIR(s, SnIR::SEND_OK);
 4007260:	e0bffd03 	ldbu	r2,-12(fp)
 4007264:	01400404 	movi	r5,16
 4007268:	1009883a 	mov	r4,r2
 400726c:	400775c0 	call	400775c <_ZN10W5100Class9writeSnIREhh>
	return ret;
 4007270:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4007274:	e037883a 	mov	sp,fp
 4007278:	dfc00117 	ldw	ra,4(sp)
 400727c:	df000017 	ldw	fp,0(sp)
 4007280:	dec00204 	addi	sp,sp,8
 4007284:	f800283a 	ret

04007288 <_ZN13EthernetClass19socketSendAvailableEh>:

uint16_t EthernetClass::socketSendAvailable(uint8_t s)
{
 4007288:	defffc04 	addi	sp,sp,-16
 400728c:	dfc00315 	stw	ra,12(sp)
 4007290:	df000215 	stw	fp,8(sp)
 4007294:	df000204 	addi	fp,sp,8
 4007298:	2005883a 	mov	r2,r4
 400729c:	e0bfff05 	stb	r2,-4(fp)
	uint8_t status=0;
 40072a0:	e03ffe05 	stb	zero,-8(fp)
	uint16_t freesize=0;
 40072a4:	e03ffe8d 	sth	zero,-6(fp)
	freesize = getSnTX_FSR(s);
 40072a8:	e0bfff03 	ldbu	r2,-4(fp)
 40072ac:	1009883a 	mov	r4,r2
 40072b0:	4006f6c0 	call	4006f6c <_ZL11getSnTX_FSRh>
 40072b4:	e0bffe8d 	sth	r2,-6(fp)
	status = W5100.readSnSR(s);
 40072b8:	e0bfff03 	ldbu	r2,-4(fp)
 40072bc:	1009883a 	mov	r4,r2
 40072c0:	40077e80 	call	40077e8 <_ZN10W5100Class8readSnSREh>
 40072c4:	e0bffe05 	stb	r2,-8(fp)
	if ((status == SnSR::ESTABLISHED) || (status == SnSR::CLOSE_WAIT)) {
 40072c8:	e0bffe03 	ldbu	r2,-8(fp)
 40072cc:	108005e0 	cmpeqi	r2,r2,23
 40072d0:	1000031e 	bne	r2,zero,40072e0 <_ZN13EthernetClass19socketSendAvailableEh+0x58>
 40072d4:	e0bffe03 	ldbu	r2,-8(fp)
 40072d8:	10800718 	cmpnei	r2,r2,28
 40072dc:	1000021e 	bne	r2,zero,40072e8 <_ZN13EthernetClass19socketSendAvailableEh+0x60>
		return freesize;
 40072e0:	e0bffe8b 	ldhu	r2,-6(fp)
 40072e4:	00000106 	br	40072ec <_ZN13EthernetClass19socketSendAvailableEh+0x64>
	}
	return 0;
 40072e8:	0005883a 	mov	r2,zero
}
 40072ec:	e037883a 	mov	sp,fp
 40072f0:	dfc00117 	ldw	ra,4(sp)
 40072f4:	df000017 	ldw	fp,0(sp)
 40072f8:	dec00204 	addi	sp,sp,8
 40072fc:	f800283a 	ret

04007300 <_ZN13EthernetClass16socketBufferDataEhtPKht>:

uint16_t EthernetClass::socketBufferData(uint8_t s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
 4007300:	defff904 	addi	sp,sp,-28
 4007304:	dfc00615 	stw	ra,24(sp)
 4007308:	df000515 	stw	fp,20(sp)
 400730c:	df000504 	addi	fp,sp,20
 4007310:	2807883a 	mov	r3,r5
 4007314:	e1bffe15 	stw	r6,-8(fp)
 4007318:	3805883a 	mov	r2,r7
 400731c:	e13ffc05 	stb	r4,-16(fp)
 4007320:	e0fffd0d 	sth	r3,-12(fp)
 4007324:	e0bfff0d 	sth	r2,-4(fp)
	//Serial.printf("  bufferData, offset=%d, len=%d\n", offset, len);
	uint16_t ret =0;
 4007328:	e03ffb0d 	sth	zero,-20(fp)
	uint16_t txfree = getSnTX_FSR(s);
 400732c:	e0bffc03 	ldbu	r2,-16(fp)
 4007330:	1009883a 	mov	r4,r2
 4007334:	4006f6c0 	call	4006f6c <_ZL11getSnTX_FSRh>
 4007338:	e0bffb8d 	sth	r2,-18(fp)
	if (len > txfree) {
 400733c:	e0bfff0b 	ldhu	r2,-4(fp)
 4007340:	e0fffb8b 	ldhu	r3,-18(fp)
 4007344:	1880032e 	bgeu	r3,r2,4007354 <_ZN13EthernetClass16socketBufferDataEhtPKht+0x54>
		ret = txfree; // check size not to exceed MAX size.
 4007348:	e0bffb8b 	ldhu	r2,-18(fp)
 400734c:	e0bffb0d 	sth	r2,-20(fp)
 4007350:	00000206 	br	400735c <_ZN13EthernetClass16socketBufferDataEhtPKht+0x5c>
	} else {
		ret = len;
 4007354:	e0bfff0b 	ldhu	r2,-4(fp)
 4007358:	e0bffb0d 	sth	r2,-20(fp)
	}
	write_data(s, offset, buf, ret);
 400735c:	e0bffc03 	ldbu	r2,-16(fp)
 4007360:	e0fffd0b 	ldhu	r3,-12(fp)
 4007364:	e13ffb0b 	ldhu	r4,-20(fp)
 4007368:	200f883a 	mov	r7,r4
 400736c:	e1bffe17 	ldw	r6,-8(fp)
 4007370:	180b883a 	mov	r5,r3
 4007374:	1009883a 	mov	r4,r2
 4007378:	4006ff80 	call	4006ff8 <_ZL10write_datahtPKht>
	return ret;
 400737c:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4007380:	e037883a 	mov	sp,fp
 4007384:	dfc00117 	ldw	ra,4(sp)
 4007388:	df000017 	ldw	fp,0(sp)
 400738c:	dec00204 	addi	sp,sp,8
 4007390:	f800283a 	ret

04007394 <_ZN13EthernetClass14socketStartUDPEhPht>:

bool EthernetClass::socketStartUDP(uint8_t s, uint8_t* addr, uint16_t port)
{
 4007394:	defffb04 	addi	sp,sp,-20
 4007398:	dfc00415 	stw	ra,16(sp)
 400739c:	df000315 	stw	fp,12(sp)
 40073a0:	df000304 	addi	fp,sp,12
 40073a4:	2007883a 	mov	r3,r4
 40073a8:	e17ffe15 	stw	r5,-8(fp)
 40073ac:	3005883a 	mov	r2,r6
 40073b0:	e0fffd05 	stb	r3,-12(fp)
 40073b4:	e0bfff0d 	sth	r2,-4(fp)
	if ( ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
 40073b8:	e0bffe17 	ldw	r2,-8(fp)
 40073bc:	10800003 	ldbu	r2,0(r2)
 40073c0:	10803fcc 	andi	r2,r2,255
 40073c4:	10000f1e 	bne	r2,zero,4007404 <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 40073c8:	e0bffe17 	ldw	r2,-8(fp)
 40073cc:	10800044 	addi	r2,r2,1
 40073d0:	10800003 	ldbu	r2,0(r2)
 40073d4:	10803fcc 	andi	r2,r2,255
 40073d8:	10000a1e 	bne	r2,zero,4007404 <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 40073dc:	e0bffe17 	ldw	r2,-8(fp)
 40073e0:	10800084 	addi	r2,r2,2
 40073e4:	10800003 	ldbu	r2,0(r2)
 40073e8:	10803fcc 	andi	r2,r2,255
 40073ec:	1000051e 	bne	r2,zero,4007404 <_ZN13EthernetClass14socketStartUDPEhPht+0x70>
 40073f0:	e0bffe17 	ldw	r2,-8(fp)
 40073f4:	108000c4 	addi	r2,r2,3
 40073f8:	10800003 	ldbu	r2,0(r2)
 40073fc:	10803fcc 	andi	r2,r2,255
 4007400:	10000226 	beq	r2,zero,400740c <_ZN13EthernetClass14socketStartUDPEhPht+0x78>
 4007404:	e0bfff0b 	ldhu	r2,-4(fp)
 4007408:	1000021e 	bne	r2,zero,4007414 <_ZN13EthernetClass14socketStartUDPEhPht+0x80>
	  ((port == 0x00)) ) {
		return false;
 400740c:	0005883a 	mov	r2,zero
 4007410:	00000a06 	br	400743c <_ZN13EthernetClass14socketStartUDPEhPht+0xa8>
	}
	W5100.writeSnDIPR(s, addr);
 4007414:	e0bffd03 	ldbu	r2,-12(fp)
 4007418:	e17ffe17 	ldw	r5,-8(fp)
 400741c:	1009883a 	mov	r4,r2
 4007420:	40078d00 	call	40078d0 <_ZN10W5100Class11writeSnDIPREhPh>
	W5100.writeSnDPORT(s, port);
 4007424:	e0bffd03 	ldbu	r2,-12(fp)
 4007428:	e0ffff0b 	ldhu	r3,-4(fp)
 400742c:	180b883a 	mov	r5,r3
 4007430:	1009883a 	mov	r4,r2
 4007434:	40079180 	call	4007918 <_ZN10W5100Class12writeSnDPORTEht>
	return true;
 4007438:	00800044 	movi	r2,1
}
 400743c:	e037883a 	mov	sp,fp
 4007440:	dfc00117 	ldw	ra,4(sp)
 4007444:	df000017 	ldw	fp,0(sp)
 4007448:	dec00204 	addi	sp,sp,8
 400744c:	f800283a 	ret

04007450 <_ZN13EthernetClass13socketSendUDPEh>:

bool EthernetClass::socketSendUDP(uint8_t s)
{
 4007450:	defffd04 	addi	sp,sp,-12
 4007454:	dfc00215 	stw	ra,8(sp)
 4007458:	df000115 	stw	fp,4(sp)
 400745c:	df000104 	addi	fp,sp,4
 4007460:	2005883a 	mov	r2,r4
 4007464:	e0bfff05 	stb	r2,-4(fp)
	W5100.execCmdSn(s, Sock_SEND);
 4007468:	e0bfff03 	ldbu	r2,-4(fp)
 400746c:	01400804 	movi	r5,32
 4007470:	1009883a 	mov	r4,r2
 4007474:	40089640 	call	4008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>

	/* +2008.01 bj */
	while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) {
 4007478:	e0bfff03 	ldbu	r2,-4(fp)
 400747c:	1009883a 	mov	r4,r2
 4007480:	40077ac0 	call	40077ac <_ZN10W5100Class8readSnIREh>
 4007484:	10803fcc 	andi	r2,r2,255
 4007488:	1080040c 	andi	r2,r2,16
 400748c:	1005003a 	cmpeq	r2,r2,zero
 4007490:	10803fcc 	andi	r2,r2,255
 4007494:	10000e26 	beq	r2,zero,40074d0 <_ZN13EthernetClass13socketSendUDPEh+0x80>
		if (W5100.readSnIR(s) & SnIR::TIMEOUT) {
 4007498:	e0bfff03 	ldbu	r2,-4(fp)
 400749c:	1009883a 	mov	r4,r2
 40074a0:	40077ac0 	call	40077ac <_ZN10W5100Class8readSnIREh>
 40074a4:	10803fcc 	andi	r2,r2,255
 40074a8:	1080020c 	andi	r2,r2,8
 40074ac:	1004c03a 	cmpne	r2,r2,zero
 40074b0:	10803fcc 	andi	r2,r2,255
 40074b4:	103ff026 	beq	r2,zero,4007478 <__alt_data_end+0xfc007478>
			/* +2008.01 [bj]: clear interrupt */
			W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
 40074b8:	e0bfff03 	ldbu	r2,-4(fp)
 40074bc:	01400604 	movi	r5,24
 40074c0:	1009883a 	mov	r4,r2
 40074c4:	400775c0 	call	400775c <_ZN10W5100Class9writeSnIREhh>
			//Serial.printf("sendUDP timeout\n");
			return false;
 40074c8:	0005883a 	mov	r2,zero
 40074cc:	00000506 	br	40074e4 <_ZN13EthernetClass13socketSendUDPEh+0x94>
		}
		yield();
	}

	/* +2008.01 bj */
	W5100.writeSnIR(s, SnIR::SEND_OK);
 40074d0:	e0bfff03 	ldbu	r2,-4(fp)
 40074d4:	01400404 	movi	r5,16
 40074d8:	1009883a 	mov	r4,r2
 40074dc:	400775c0 	call	400775c <_ZN10W5100Class9writeSnIREhh>

	//Serial.printf("sendUDP ok\n");
	/* Sent ok */
	return true;
 40074e0:	00800044 	movi	r2,1
}
 40074e4:	e037883a 	mov	sp,fp
 40074e8:	dfc00117 	ldw	ra,4(sp)
 40074ec:	df000017 	ldw	fp,0(sp)
 40074f0:	dec00204 	addi	sp,sp,8
 40074f4:	f800283a 	ret

040074f8 <_Z41__static_initialization_and_destruction_0ii>:
 40074f8:	defffb04 	addi	sp,sp,-20
 40074fc:	dfc00415 	stw	ra,16(sp)
 4007500:	df000315 	stw	fp,12(sp)
 4007504:	df000304 	addi	fp,sp,12
 4007508:	e13ffe15 	stw	r4,-8(fp)
 400750c:	e17fff15 	stw	r5,-4(fp)
 4007510:	e0bffe17 	ldw	r2,-8(fp)
 4007514:	10800058 	cmpnei	r2,r2,1
 4007518:	1000091e 	bne	r2,zero,4007540 <_Z41__static_initialization_and_destruction_0ii+0x48>
 400751c:	e0ffff17 	ldw	r3,-4(fp)
 4007520:	00bfffd4 	movui	r2,65535
 4007524:	1880061e 	bne	r3,r2,4007540 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4007528:	d8000015 	stw	zero,0(sp)
 400752c:	000f883a 	mov	r7,zero
 4007530:	000d883a 	mov	r6,zero
 4007534:	000b883a 	mov	r5,zero
 4007538:	d112d704 	addi	r4,gp,19292
 400753c:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
 4007540:	0001883a 	nop
 4007544:	e037883a 	mov	sp,fp
 4007548:	dfc00117 	ldw	ra,4(sp)
 400754c:	df000017 	ldw	fp,0(sp)
 4007550:	dec00204 	addi	sp,sp,8
 4007554:	f800283a 	ret

04007558 <_GLOBAL__sub_I__ZN13EthernetClass14socketPortRandEt>:
 4007558:	defffe04 	addi	sp,sp,-8
 400755c:	dfc00115 	stw	ra,4(sp)
 4007560:	df000015 	stw	fp,0(sp)
 4007564:	d839883a 	mov	fp,sp
 4007568:	017fffd4 	movui	r5,65535
 400756c:	01000044 	movi	r4,1
 4007570:	40074f80 	call	40074f8 <_Z41__static_initialization_and_destruction_0ii>
 4007574:	e037883a 	mov	sp,fp
 4007578:	dfc00117 	ldw	ra,4(sp)
 400757c:	df000017 	ldw	fp,0(sp)
 4007580:	dec00204 	addi	sp,sp,8
 4007584:	f800283a 	ret

04007588 <_ZN10W5100Class4readEt>:
  static uint16_t write(uint16_t addr, const uint8_t *buf, uint16_t len);
  static uint8_t write(uint16_t addr, uint8_t data) {
    return write(addr, &data, 1);
  }
  static uint16_t read(uint16_t addr, uint8_t *buf, uint16_t len);
  static uint8_t read(uint16_t addr) {
 4007588:	defffc04 	addi	sp,sp,-16
 400758c:	dfc00315 	stw	ra,12(sp)
 4007590:	df000215 	stw	fp,8(sp)
 4007594:	df000204 	addi	fp,sp,8
 4007598:	2005883a 	mov	r2,r4
 400759c:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t data;
    read(addr, &data, 1);
 40075a0:	e0bfff0b 	ldhu	r2,-4(fp)
 40075a4:	01800044 	movi	r6,1
 40075a8:	e17ffe04 	addi	r5,fp,-8
 40075ac:	1009883a 	mov	r4,r2
 40075b0:	40087100 	call	4008710 <_ZN10W5100Class4readEtPht>
    return data;
 40075b4:	e0bffe03 	ldbu	r2,-8(fp)
  }
 40075b8:	e037883a 	mov	sp,fp
 40075bc:	dfc00117 	ldw	ra,4(sp)
 40075c0:	df000017 	ldw	fp,0(sp)
 40075c4:	dec00204 	addi	sp,sp,8
 40075c8:	f800283a 	ret

040075cc <_ZN10W5100Class6readSnEht>:
    return CH_BASE_MSB << 8;
  }
  static uint8_t CH_BASE_MSB; // 1 redundant byte, saves ~80 bytes code on AVR
  static const uint16_t CH_SIZE = 0x0100;

  static inline uint8_t readSn(SOCKET s, uint16_t addr) {
 40075cc:	defffc04 	addi	sp,sp,-16
 40075d0:	dfc00315 	stw	ra,12(sp)
 40075d4:	df000215 	stw	fp,8(sp)
 40075d8:	df000204 	addi	fp,sp,8
 40075dc:	2007883a 	mov	r3,r4
 40075e0:	2805883a 	mov	r2,r5
 40075e4:	e0fffe05 	stb	r3,-8(fp)
 40075e8:	e0bfff0d 	sth	r2,-4(fp)
    return read(CH_BASE() + s * CH_SIZE + addr);
 40075ec:	40050ac0 	call	40050ac <_ZN10W5100Class7CH_BASEEv>
 40075f0:	1007883a 	mov	r3,r2
 40075f4:	e0bffe03 	ldbu	r2,-8(fp)
 40075f8:	1004923a 	slli	r2,r2,8
 40075fc:	1885883a 	add	r2,r3,r2
 4007600:	1007883a 	mov	r3,r2
 4007604:	e0bfff0b 	ldhu	r2,-4(fp)
 4007608:	1885883a 	add	r2,r3,r2
 400760c:	10bfffcc 	andi	r2,r2,65535
 4007610:	1009883a 	mov	r4,r2
 4007614:	40075880 	call	4007588 <_ZN10W5100Class4readEt>
  }
 4007618:	e037883a 	mov	sp,fp
 400761c:	dfc00117 	ldw	ra,4(sp)
 4007620:	df000017 	ldw	fp,0(sp)
 4007624:	dec00204 	addi	sp,sp,8
 4007628:	f800283a 	ret

0400762c <_ZN10W5100Class7writeSnEhth>:
  static inline uint8_t writeSn(SOCKET s, uint16_t addr, uint8_t data) {
 400762c:	defffb04 	addi	sp,sp,-20
 4007630:	dfc00415 	stw	ra,16(sp)
 4007634:	df000315 	stw	fp,12(sp)
 4007638:	df000304 	addi	fp,sp,12
 400763c:	2807883a 	mov	r3,r5
 4007640:	3005883a 	mov	r2,r6
 4007644:	e13ffd05 	stb	r4,-12(fp)
 4007648:	e0fffe0d 	sth	r3,-8(fp)
 400764c:	e0bfff05 	stb	r2,-4(fp)
    return write(CH_BASE() + s * CH_SIZE + addr, data);
 4007650:	40050ac0 	call	40050ac <_ZN10W5100Class7CH_BASEEv>
 4007654:	1007883a 	mov	r3,r2
 4007658:	e0bffd03 	ldbu	r2,-12(fp)
 400765c:	1004923a 	slli	r2,r2,8
 4007660:	1885883a 	add	r2,r3,r2
 4007664:	1007883a 	mov	r3,r2
 4007668:	e0bffe0b 	ldhu	r2,-8(fp)
 400766c:	1885883a 	add	r2,r3,r2
 4007670:	10bfffcc 	andi	r2,r2,65535
 4007674:	e0ffff03 	ldbu	r3,-4(fp)
 4007678:	180b883a 	mov	r5,r3
 400767c:	1009883a 	mov	r4,r2
 4007680:	4003ed40 	call	4003ed4 <_ZN10W5100Class5writeEth>
  }
 4007684:	e037883a 	mov	sp,fp
 4007688:	dfc00117 	ldw	ra,4(sp)
 400768c:	df000017 	ldw	fp,0(sp)
 4007690:	dec00204 	addi	sp,sp,8
 4007694:	f800283a 	ret

04007698 <_ZN10W5100Class7writeSnEhtPht>:
  static inline uint16_t readSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
    return read(CH_BASE() + s * CH_SIZE + addr, buf, len);
  }
  static inline uint16_t writeSn(SOCKET s, uint16_t addr, uint8_t *buf, uint16_t len) {
 4007698:	defffa04 	addi	sp,sp,-24
 400769c:	dfc00515 	stw	ra,20(sp)
 40076a0:	df000415 	stw	fp,16(sp)
 40076a4:	df000404 	addi	fp,sp,16
 40076a8:	2807883a 	mov	r3,r5
 40076ac:	e1bffe15 	stw	r6,-8(fp)
 40076b0:	3805883a 	mov	r2,r7
 40076b4:	e13ffc05 	stb	r4,-16(fp)
 40076b8:	e0fffd0d 	sth	r3,-12(fp)
 40076bc:	e0bfff0d 	sth	r2,-4(fp)
    return write(CH_BASE() + s * CH_SIZE + addr, buf, len);
 40076c0:	40050ac0 	call	40050ac <_ZN10W5100Class7CH_BASEEv>
 40076c4:	1007883a 	mov	r3,r2
 40076c8:	e0bffc03 	ldbu	r2,-16(fp)
 40076cc:	1004923a 	slli	r2,r2,8
 40076d0:	1885883a 	add	r2,r3,r2
 40076d4:	1007883a 	mov	r3,r2
 40076d8:	e0bffd0b 	ldhu	r2,-12(fp)
 40076dc:	1885883a 	add	r2,r3,r2
 40076e0:	10bfffcc 	andi	r2,r2,65535
 40076e4:	e0ffff0b 	ldhu	r3,-4(fp)
 40076e8:	180d883a 	mov	r6,r3
 40076ec:	e17ffe17 	ldw	r5,-8(fp)
 40076f0:	1009883a 	mov	r4,r2
 40076f4:	400856c0 	call	400856c <_ZN10W5100Class5writeEtPKht>
  }
 40076f8:	e037883a 	mov	sp,fp
 40076fc:	dfc00117 	ldw	ra,4(sp)
 4007700:	df000017 	ldw	fp,0(sp)
 4007704:	dec00204 	addi	sp,sp,8
 4007708:	f800283a 	ret

0400770c <_ZN10W5100Class9writeSnMREhh>:
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }

public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
 400770c:	defffc04 	addi	sp,sp,-16
 4007710:	dfc00315 	stw	ra,12(sp)
 4007714:	df000215 	stw	fp,8(sp)
 4007718:	df000204 	addi	fp,sp,8
 400771c:	2007883a 	mov	r3,r4
 4007720:	2805883a 	mov	r2,r5
 4007724:	e0fffe05 	stb	r3,-8(fp)
 4007728:	e0bfff05 	stb	r2,-4(fp)
 400772c:	e0bffe03 	ldbu	r2,-8(fp)
 4007730:	e0ffff03 	ldbu	r3,-4(fp)
 4007734:	180d883a 	mov	r6,r3
 4007738:	000b883a 	mov	r5,zero
 400773c:	1009883a 	mov	r4,r2
 4007740:	400762c0 	call	400762c <_ZN10W5100Class7writeSnEhth>
 4007744:	0001883a 	nop
 4007748:	e037883a 	mov	sp,fp
 400774c:	dfc00117 	ldw	ra,4(sp)
 4007750:	df000017 	ldw	fp,0(sp)
 4007754:	dec00204 	addi	sp,sp,8
 4007758:	f800283a 	ret

0400775c <_ZN10W5100Class9writeSnIREhh>:
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
 400775c:	defffc04 	addi	sp,sp,-16
 4007760:	dfc00315 	stw	ra,12(sp)
 4007764:	df000215 	stw	fp,8(sp)
 4007768:	df000204 	addi	fp,sp,8
 400776c:	2007883a 	mov	r3,r4
 4007770:	2805883a 	mov	r2,r5
 4007774:	e0fffe05 	stb	r3,-8(fp)
 4007778:	e0bfff05 	stb	r2,-4(fp)
 400777c:	e0bffe03 	ldbu	r2,-8(fp)
 4007780:	e0ffff03 	ldbu	r3,-4(fp)
 4007784:	180d883a 	mov	r6,r3
 4007788:	01400084 	movi	r5,2
 400778c:	1009883a 	mov	r4,r2
 4007790:	400762c0 	call	400762c <_ZN10W5100Class7writeSnEhth>
 4007794:	0001883a 	nop
 4007798:	e037883a 	mov	sp,fp
 400779c:	dfc00117 	ldw	ra,4(sp)
 40077a0:	df000017 	ldw	fp,0(sp)
 40077a4:	dec00204 	addi	sp,sp,8
 40077a8:	f800283a 	ret

040077ac <_ZN10W5100Class8readSnIREh>:
 40077ac:	defffd04 	addi	sp,sp,-12
 40077b0:	dfc00215 	stw	ra,8(sp)
 40077b4:	df000115 	stw	fp,4(sp)
 40077b8:	df000104 	addi	fp,sp,4
 40077bc:	2005883a 	mov	r2,r4
 40077c0:	e0bfff05 	stb	r2,-4(fp)
 40077c4:	e0bfff03 	ldbu	r2,-4(fp)
 40077c8:	01400084 	movi	r5,2
 40077cc:	1009883a 	mov	r4,r2
 40077d0:	40075cc0 	call	40075cc <_ZN10W5100Class6readSnEht>
 40077d4:	e037883a 	mov	sp,fp
 40077d8:	dfc00117 	ldw	ra,4(sp)
 40077dc:	df000017 	ldw	fp,0(sp)
 40077e0:	dec00204 	addi	sp,sp,8
 40077e4:	f800283a 	ret

040077e8 <_ZN10W5100Class8readSnSREh>:
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
 40077e8:	defffd04 	addi	sp,sp,-12
 40077ec:	dfc00215 	stw	ra,8(sp)
 40077f0:	df000115 	stw	fp,4(sp)
 40077f4:	df000104 	addi	fp,sp,4
 40077f8:	2005883a 	mov	r2,r4
 40077fc:	e0bfff05 	stb	r2,-4(fp)
 4007800:	e0bfff03 	ldbu	r2,-4(fp)
 4007804:	014000c4 	movi	r5,3
 4007808:	1009883a 	mov	r4,r2
 400780c:	40075cc0 	call	40075cc <_ZN10W5100Class6readSnEht>
 4007810:	e037883a 	mov	sp,fp
 4007814:	dfc00117 	ldw	ra,4(sp)
 4007818:	df000017 	ldw	fp,0(sp)
 400781c:	dec00204 	addi	sp,sp,8
 4007820:	f800283a 	ret

04007824 <_ZN10W5100Class11writeSnPORTEht>:
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
 4007824:	defffb04 	addi	sp,sp,-20
 4007828:	dfc00415 	stw	ra,16(sp)
 400782c:	df000315 	stw	fp,12(sp)
 4007830:	df000304 	addi	fp,sp,12
 4007834:	2007883a 	mov	r3,r4
 4007838:	2805883a 	mov	r2,r5
 400783c:	e0fffe05 	stb	r3,-8(fp)
 4007840:	e0bfff0d 	sth	r2,-4(fp)
 4007844:	e0bfff0b 	ldhu	r2,-4(fp)
 4007848:	1005d23a 	srai	r2,r2,8
 400784c:	e0bffd05 	stb	r2,-12(fp)
 4007850:	e0bfff0b 	ldhu	r2,-4(fp)
 4007854:	e0bffd45 	stb	r2,-11(fp)
 4007858:	e0bffe03 	ldbu	r2,-8(fp)
 400785c:	01c00084 	movi	r7,2
 4007860:	e1bffd04 	addi	r6,fp,-12
 4007864:	01400104 	movi	r5,4
 4007868:	1009883a 	mov	r4,r2
 400786c:	40076980 	call	4007698 <_ZN10W5100Class7writeSnEhtPht>
 4007870:	0001883a 	nop
 4007874:	e037883a 	mov	sp,fp
 4007878:	dfc00117 	ldw	ra,4(sp)
 400787c:	df000017 	ldw	fp,0(sp)
 4007880:	dec00204 	addi	sp,sp,8
 4007884:	f800283a 	ret

04007888 <_ZN10W5100Class11writeSnDHAREhPh>:
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
 4007888:	defffc04 	addi	sp,sp,-16
 400788c:	dfc00315 	stw	ra,12(sp)
 4007890:	df000215 	stw	fp,8(sp)
 4007894:	df000204 	addi	fp,sp,8
 4007898:	2005883a 	mov	r2,r4
 400789c:	e17fff15 	stw	r5,-4(fp)
 40078a0:	e0bffe05 	stb	r2,-8(fp)
 40078a4:	e0bffe03 	ldbu	r2,-8(fp)
 40078a8:	01c00184 	movi	r7,6
 40078ac:	e1bfff17 	ldw	r6,-4(fp)
 40078b0:	01400184 	movi	r5,6
 40078b4:	1009883a 	mov	r4,r2
 40078b8:	40076980 	call	4007698 <_ZN10W5100Class7writeSnEhtPht>
 40078bc:	e037883a 	mov	sp,fp
 40078c0:	dfc00117 	ldw	ra,4(sp)
 40078c4:	df000017 	ldw	fp,0(sp)
 40078c8:	dec00204 	addi	sp,sp,8
 40078cc:	f800283a 	ret

040078d0 <_ZN10W5100Class11writeSnDIPREhPh>:
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
 40078d0:	defffc04 	addi	sp,sp,-16
 40078d4:	dfc00315 	stw	ra,12(sp)
 40078d8:	df000215 	stw	fp,8(sp)
 40078dc:	df000204 	addi	fp,sp,8
 40078e0:	2005883a 	mov	r2,r4
 40078e4:	e17fff15 	stw	r5,-4(fp)
 40078e8:	e0bffe05 	stb	r2,-8(fp)
 40078ec:	e0bffe03 	ldbu	r2,-8(fp)
 40078f0:	01c00104 	movi	r7,4
 40078f4:	e1bfff17 	ldw	r6,-4(fp)
 40078f8:	01400304 	movi	r5,12
 40078fc:	1009883a 	mov	r4,r2
 4007900:	40076980 	call	4007698 <_ZN10W5100Class7writeSnEhtPht>
 4007904:	e037883a 	mov	sp,fp
 4007908:	dfc00117 	ldw	ra,4(sp)
 400790c:	df000017 	ldw	fp,0(sp)
 4007910:	dec00204 	addi	sp,sp,8
 4007914:	f800283a 	ret

04007918 <_ZN10W5100Class12writeSnDPORTEht>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
 4007918:	defffb04 	addi	sp,sp,-20
 400791c:	dfc00415 	stw	ra,16(sp)
 4007920:	df000315 	stw	fp,12(sp)
 4007924:	df000304 	addi	fp,sp,12
 4007928:	2007883a 	mov	r3,r4
 400792c:	2805883a 	mov	r2,r5
 4007930:	e0fffe05 	stb	r3,-8(fp)
 4007934:	e0bfff0d 	sth	r2,-4(fp)
 4007938:	e0bfff0b 	ldhu	r2,-4(fp)
 400793c:	1005d23a 	srai	r2,r2,8
 4007940:	e0bffd05 	stb	r2,-12(fp)
 4007944:	e0bfff0b 	ldhu	r2,-4(fp)
 4007948:	e0bffd45 	stb	r2,-11(fp)
 400794c:	e0bffe03 	ldbu	r2,-8(fp)
 4007950:	01c00084 	movi	r7,2
 4007954:	e1bffd04 	addi	r6,fp,-12
 4007958:	01400404 	movi	r5,16
 400795c:	1009883a 	mov	r4,r2
 4007960:	40076980 	call	4007698 <_ZN10W5100Class7writeSnEhtPht>
 4007964:	0001883a 	nop
 4007968:	e037883a 	mov	sp,fp
 400796c:	dfc00117 	ldw	ra,4(sp)
 4007970:	df000017 	ldw	fp,0(sp)
 4007974:	dec00204 	addi	sp,sp,8
 4007978:	f800283a 	ret

0400797c <_ZN10W5100Class12readSnTX_FSREh>:
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER8(SnRX_SIZE,   0x001E)        // RX Memory Size (W5200 only)
  __SOCKET_REGISTER8(SnTX_SIZE,   0x001F)        // RX Memory Size (W5200 only)
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
 400797c:	defffc04 	addi	sp,sp,-16
 4007980:	dfc00315 	stw	ra,12(sp)
 4007984:	df000215 	stw	fp,8(sp)
 4007988:	df000204 	addi	fp,sp,8
 400798c:	2005883a 	mov	r2,r4
 4007990:	e0bfff05 	stb	r2,-4(fp)
 4007994:	e0bfff03 	ldbu	r2,-4(fp)
 4007998:	01c00084 	movi	r7,2
 400799c:	e1bffe04 	addi	r6,fp,-8
 40079a0:	01400804 	movi	r5,32
 40079a4:	1009883a 	mov	r4,r2
 40079a8:	40050d40 	call	40050d4 <_ZN10W5100Class6readSnEhtPht>
 40079ac:	e0bffe03 	ldbu	r2,-8(fp)
 40079b0:	10803fcc 	andi	r2,r2,255
 40079b4:	1004923a 	slli	r2,r2,8
 40079b8:	1007883a 	mov	r3,r2
 40079bc:	e0bffe43 	ldbu	r2,-7(fp)
 40079c0:	10803fcc 	andi	r2,r2,255
 40079c4:	1884b03a 	or	r2,r3,r2
 40079c8:	e037883a 	mov	sp,fp
 40079cc:	dfc00117 	ldw	ra,4(sp)
 40079d0:	df000017 	ldw	fp,0(sp)
 40079d4:	dec00204 	addi	sp,sp,8
 40079d8:	f800283a 	ret

040079dc <_ZN10W5100Class12writeSnTX_WREht>:
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
 40079dc:	defffb04 	addi	sp,sp,-20
 40079e0:	dfc00415 	stw	ra,16(sp)
 40079e4:	df000315 	stw	fp,12(sp)
 40079e8:	df000304 	addi	fp,sp,12
 40079ec:	2007883a 	mov	r3,r4
 40079f0:	2805883a 	mov	r2,r5
 40079f4:	e0fffe05 	stb	r3,-8(fp)
 40079f8:	e0bfff0d 	sth	r2,-4(fp)
 40079fc:	e0bfff0b 	ldhu	r2,-4(fp)
 4007a00:	1005d23a 	srai	r2,r2,8
 4007a04:	e0bffd05 	stb	r2,-12(fp)
 4007a08:	e0bfff0b 	ldhu	r2,-4(fp)
 4007a0c:	e0bffd45 	stb	r2,-11(fp)
 4007a10:	e0bffe03 	ldbu	r2,-8(fp)
 4007a14:	01c00084 	movi	r7,2
 4007a18:	e1bffd04 	addi	r6,fp,-12
 4007a1c:	01400904 	movi	r5,36
 4007a20:	1009883a 	mov	r4,r2
 4007a24:	40076980 	call	4007698 <_ZN10W5100Class7writeSnEhtPht>
 4007a28:	0001883a 	nop
 4007a2c:	e037883a 	mov	sp,fp
 4007a30:	dfc00117 	ldw	ra,4(sp)
 4007a34:	df000017 	ldw	fp,0(sp)
 4007a38:	dec00204 	addi	sp,sp,8
 4007a3c:	f800283a 	ret

04007a40 <_ZN10W5100Class11readSnTX_WREh>:
 4007a40:	defffc04 	addi	sp,sp,-16
 4007a44:	dfc00315 	stw	ra,12(sp)
 4007a48:	df000215 	stw	fp,8(sp)
 4007a4c:	df000204 	addi	fp,sp,8
 4007a50:	2005883a 	mov	r2,r4
 4007a54:	e0bfff05 	stb	r2,-4(fp)
 4007a58:	e0bfff03 	ldbu	r2,-4(fp)
 4007a5c:	01c00084 	movi	r7,2
 4007a60:	e1bffe04 	addi	r6,fp,-8
 4007a64:	01400904 	movi	r5,36
 4007a68:	1009883a 	mov	r4,r2
 4007a6c:	40050d40 	call	40050d4 <_ZN10W5100Class6readSnEhtPht>
 4007a70:	e0bffe03 	ldbu	r2,-8(fp)
 4007a74:	10803fcc 	andi	r2,r2,255
 4007a78:	1004923a 	slli	r2,r2,8
 4007a7c:	1007883a 	mov	r3,r2
 4007a80:	e0bffe43 	ldbu	r2,-7(fp)
 4007a84:	10803fcc 	andi	r2,r2,255
 4007a88:	1884b03a 	or	r2,r3,r2
 4007a8c:	e037883a 	mov	sp,fp
 4007a90:	dfc00117 	ldw	ra,4(sp)
 4007a94:	df000017 	ldw	fp,0(sp)
 4007a98:	dec00204 	addi	sp,sp,8
 4007a9c:	f800283a 	ret

04007aa0 <_ZN10W5100Class12readSnRX_RSREh>:
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
 4007aa0:	defffc04 	addi	sp,sp,-16
 4007aa4:	dfc00315 	stw	ra,12(sp)
 4007aa8:	df000215 	stw	fp,8(sp)
 4007aac:	df000204 	addi	fp,sp,8
 4007ab0:	2005883a 	mov	r2,r4
 4007ab4:	e0bfff05 	stb	r2,-4(fp)
 4007ab8:	e0bfff03 	ldbu	r2,-4(fp)
 4007abc:	01c00084 	movi	r7,2
 4007ac0:	e1bffe04 	addi	r6,fp,-8
 4007ac4:	01400984 	movi	r5,38
 4007ac8:	1009883a 	mov	r4,r2
 4007acc:	40050d40 	call	40050d4 <_ZN10W5100Class6readSnEhtPht>
 4007ad0:	e0bffe03 	ldbu	r2,-8(fp)
 4007ad4:	10803fcc 	andi	r2,r2,255
 4007ad8:	1004923a 	slli	r2,r2,8
 4007adc:	1007883a 	mov	r3,r2
 4007ae0:	e0bffe43 	ldbu	r2,-7(fp)
 4007ae4:	10803fcc 	andi	r2,r2,255
 4007ae8:	1884b03a 	or	r2,r3,r2
 4007aec:	e037883a 	mov	sp,fp
 4007af0:	dfc00117 	ldw	ra,4(sp)
 4007af4:	df000017 	ldw	fp,0(sp)
 4007af8:	dec00204 	addi	sp,sp,8
 4007afc:	f800283a 	ret

04007b00 <_ZN10W5100Class12writeSnRX_RDEht>:
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
 4007b00:	defffb04 	addi	sp,sp,-20
 4007b04:	dfc00415 	stw	ra,16(sp)
 4007b08:	df000315 	stw	fp,12(sp)
 4007b0c:	df000304 	addi	fp,sp,12
 4007b10:	2007883a 	mov	r3,r4
 4007b14:	2805883a 	mov	r2,r5
 4007b18:	e0fffe05 	stb	r3,-8(fp)
 4007b1c:	e0bfff0d 	sth	r2,-4(fp)
 4007b20:	e0bfff0b 	ldhu	r2,-4(fp)
 4007b24:	1005d23a 	srai	r2,r2,8
 4007b28:	e0bffd05 	stb	r2,-12(fp)
 4007b2c:	e0bfff0b 	ldhu	r2,-4(fp)
 4007b30:	e0bffd45 	stb	r2,-11(fp)
 4007b34:	e0bffe03 	ldbu	r2,-8(fp)
 4007b38:	01c00084 	movi	r7,2
 4007b3c:	e1bffd04 	addi	r6,fp,-12
 4007b40:	01400a04 	movi	r5,40
 4007b44:	1009883a 	mov	r4,r2
 4007b48:	40076980 	call	4007698 <_ZN10W5100Class7writeSnEhtPht>
 4007b4c:	0001883a 	nop
 4007b50:	e037883a 	mov	sp,fp
 4007b54:	dfc00117 	ldw	ra,4(sp)
 4007b58:	df000017 	ldw	fp,0(sp)
 4007b5c:	dec00204 	addi	sp,sp,8
 4007b60:	f800283a 	ret

04007b64 <_ZN10W5100Class11readSnRX_RDEh>:
 4007b64:	defffc04 	addi	sp,sp,-16
 4007b68:	dfc00315 	stw	ra,12(sp)
 4007b6c:	df000215 	stw	fp,8(sp)
 4007b70:	df000204 	addi	fp,sp,8
 4007b74:	2005883a 	mov	r2,r4
 4007b78:	e0bfff05 	stb	r2,-4(fp)
 4007b7c:	e0bfff03 	ldbu	r2,-4(fp)
 4007b80:	01c00084 	movi	r7,2
 4007b84:	e1bffe04 	addi	r6,fp,-8
 4007b88:	01400a04 	movi	r5,40
 4007b8c:	1009883a 	mov	r4,r2
 4007b90:	40050d40 	call	40050d4 <_ZN10W5100Class6readSnEhtPht>
 4007b94:	e0bffe03 	ldbu	r2,-8(fp)
 4007b98:	10803fcc 	andi	r2,r2,255
 4007b9c:	1004923a 	slli	r2,r2,8
 4007ba0:	1007883a 	mov	r3,r2
 4007ba4:	e0bffe43 	ldbu	r2,-7(fp)
 4007ba8:	10803fcc 	andi	r2,r2,255
 4007bac:	1884b03a 	or	r2,r3,r2
 4007bb0:	e037883a 	mov	sp,fp
 4007bb4:	dfc00117 	ldw	ra,4(sp)
 4007bb8:	df000017 	ldw	fp,0(sp)
 4007bbc:	dec00204 	addi	sp,sp,8
 4007bc0:	f800283a 	ret

04007bc4 <_ZN10W5100Class5SBASEEh>:
  static uint16_t SMASK;
#else
  static const uint16_t SSIZE = 2048;
  static const uint16_t SMASK = 0x07FF;
#endif
  static uint16_t SBASE(uint8_t socknum) {
 4007bc4:	defffe04 	addi	sp,sp,-8
 4007bc8:	df000115 	stw	fp,4(sp)
 4007bcc:	df000104 	addi	fp,sp,4
 4007bd0:	2005883a 	mov	r2,r4
 4007bd4:	e0bfff05 	stb	r2,-4(fp)
    if (chip == 51) {
 4007bd8:	d092da03 	ldbu	r2,19304(gp)
 4007bdc:	10803fcc 	andi	r2,r2,255
 4007be0:	10800cd8 	cmpnei	r2,r2,51
 4007be4:	1000041e 	bne	r2,zero,4007bf8 <_ZN10W5100Class5SBASEEh+0x34>
      return socknum * SSIZE + 0x4000;
 4007be8:	e0bfff03 	ldbu	r2,-4(fp)
 4007bec:	10800204 	addi	r2,r2,8
 4007bf0:	100492fa 	slli	r2,r2,11
 4007bf4:	00000306 	br	4007c04 <_ZN10W5100Class5SBASEEh+0x40>
    } else {
      return socknum * SSIZE + 0x8000;
 4007bf8:	e0bfff03 	ldbu	r2,-4(fp)
 4007bfc:	10800404 	addi	r2,r2,16
 4007c00:	100492fa 	slli	r2,r2,11
    }
  }
 4007c04:	e037883a 	mov	sp,fp
 4007c08:	df000017 	ldw	fp,0(sp)
 4007c0c:	dec00104 	addi	sp,sp,4
 4007c10:	f800283a 	ret

04007c14 <_ZN10W5100Class5RBASEEh>:
  static uint16_t RBASE(uint8_t socknum) {
 4007c14:	defffe04 	addi	sp,sp,-8
 4007c18:	df000115 	stw	fp,4(sp)
 4007c1c:	df000104 	addi	fp,sp,4
 4007c20:	2005883a 	mov	r2,r4
 4007c24:	e0bfff05 	stb	r2,-4(fp)
    if (chip == 51) {
 4007c28:	d092da03 	ldbu	r2,19304(gp)
 4007c2c:	10803fcc 	andi	r2,r2,255
 4007c30:	10800cd8 	cmpnei	r2,r2,51
 4007c34:	1000041e 	bne	r2,zero,4007c48 <_ZN10W5100Class5RBASEEh+0x34>
      return socknum * SSIZE + 0x6000;
 4007c38:	e0bfff03 	ldbu	r2,-4(fp)
 4007c3c:	10800304 	addi	r2,r2,12
 4007c40:	100492fa 	slli	r2,r2,11
 4007c44:	00000306 	br	4007c54 <_ZN10W5100Class5RBASEEh+0x40>
    } else {
      return socknum * SSIZE + 0xC000;
 4007c48:	e0bfff03 	ldbu	r2,-4(fp)
 4007c4c:	10800604 	addi	r2,r2,24
 4007c50:	100492fa 	slli	r2,r2,11
    }
  }
 4007c54:	e037883a 	mov	sp,fp
 4007c58:	df000017 	ldw	fp,0(sp)
 4007c5c:	dec00104 	addi	sp,sp,4
 4007c60:	f800283a 	ret

04007c64 <_ZN10W5100Class23hasOffsetAddressMappingEv>:

  static bool hasOffsetAddressMapping(void) {
 4007c64:	deffff04 	addi	sp,sp,-4
 4007c68:	df000015 	stw	fp,0(sp)
 4007c6c:	d839883a 	mov	fp,sp
    if (chip == 55) return true;
 4007c70:	d092da03 	ldbu	r2,19304(gp)
 4007c74:	10803fcc 	andi	r2,r2,255
 4007c78:	10800dd8 	cmpnei	r2,r2,55
 4007c7c:	1000021e 	bne	r2,zero,4007c88 <_ZN10W5100Class23hasOffsetAddressMappingEv+0x24>
 4007c80:	00800044 	movi	r2,1
 4007c84:	00000106 	br	4007c8c <_ZN10W5100Class23hasOffsetAddressMappingEv+0x28>
    return false;
 4007c88:	0005883a 	mov	r2,zero
  }
 4007c8c:	e037883a 	mov	sp,fp
 4007c90:	df000017 	ldw	fp,0(sp)
 4007c94:	dec00104 	addi	sp,sp,4
 4007c98:	f800283a 	ret

04007c9c <_ZN9IPAddressC1Ev>:

#include "IPAddress.h"
#include <cstring>
#include <stdio.h>

IPAddress::IPAddress()
 4007c9c:	defffe04 	addi	sp,sp,-8
 4007ca0:	df000115 	stw	fp,4(sp)
 4007ca4:	df000104 	addi	fp,sp,4
 4007ca8:	e13fff15 	stw	r4,-4(fp)
{
    _address.dword = 0;
 4007cac:	e0bfff17 	ldw	r2,-4(fp)
 4007cb0:	10000015 	stw	zero,0(r2)
}
 4007cb4:	0001883a 	nop
 4007cb8:	e037883a 	mov	sp,fp
 4007cbc:	df000017 	ldw	fp,0(sp)
 4007cc0:	dec00104 	addi	sp,sp,4
 4007cc4:	f800283a 	ret

04007cc8 <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 4007cc8:	defffa04 	addi	sp,sp,-24
 4007ccc:	df000515 	stw	fp,20(sp)
 4007cd0:	df000504 	addi	fp,sp,20
 4007cd4:	e13ffb15 	stw	r4,-20(fp)
 4007cd8:	3009883a 	mov	r4,r6
 4007cdc:	3807883a 	mov	r3,r7
 4007ce0:	e0800117 	ldw	r2,4(fp)
 4007ce4:	e17ffc05 	stb	r5,-16(fp)
 4007ce8:	e13ffd05 	stb	r4,-12(fp)
 4007cec:	e0fffe05 	stb	r3,-8(fp)
 4007cf0:	e0bfff05 	stb	r2,-4(fp)
{
    _address.bytes[0] = first_octet;
 4007cf4:	e0bffb17 	ldw	r2,-20(fp)
 4007cf8:	e0fffc03 	ldbu	r3,-16(fp)
 4007cfc:	10c00005 	stb	r3,0(r2)
    _address.bytes[1] = second_octet;
 4007d00:	e0bffb17 	ldw	r2,-20(fp)
 4007d04:	e0fffd03 	ldbu	r3,-12(fp)
 4007d08:	10c00045 	stb	r3,1(r2)
    _address.bytes[2] = third_octet;
 4007d0c:	e0bffb17 	ldw	r2,-20(fp)
 4007d10:	e0fffe03 	ldbu	r3,-8(fp)
 4007d14:	10c00085 	stb	r3,2(r2)
    _address.bytes[3] = fourth_octet;
 4007d18:	e0bffb17 	ldw	r2,-20(fp)
 4007d1c:	e0ffff03 	ldbu	r3,-4(fp)
 4007d20:	10c000c5 	stb	r3,3(r2)
}
 4007d24:	0001883a 	nop
 4007d28:	e037883a 	mov	sp,fp
 4007d2c:	df000017 	ldw	fp,0(sp)
 4007d30:	dec00104 	addi	sp,sp,4
 4007d34:	f800283a 	ret

04007d38 <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
 4007d38:	defffd04 	addi	sp,sp,-12
 4007d3c:	df000215 	stw	fp,8(sp)
 4007d40:	df000204 	addi	fp,sp,8
 4007d44:	e13ffe15 	stw	r4,-8(fp)
 4007d48:	e17fff15 	stw	r5,-4(fp)
{
    _address.dword = address;
 4007d4c:	e0bffe17 	ldw	r2,-8(fp)
 4007d50:	e0ffff17 	ldw	r3,-4(fp)
 4007d54:	10c00015 	stw	r3,0(r2)
}
 4007d58:	0001883a 	nop
 4007d5c:	e037883a 	mov	sp,fp
 4007d60:	df000017 	ldw	fp,0(sp)
 4007d64:	dec00104 	addi	sp,sp,4
 4007d68:	f800283a 	ret

04007d6c <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
 4007d6c:	defffc04 	addi	sp,sp,-16
 4007d70:	dfc00315 	stw	ra,12(sp)
 4007d74:	df000215 	stw	fp,8(sp)
 4007d78:	df000204 	addi	fp,sp,8
 4007d7c:	e13ffe15 	stw	r4,-8(fp)
 4007d80:	e17fff15 	stw	r5,-4(fp)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
 4007d84:	e0bffe17 	ldw	r2,-8(fp)
 4007d88:	01800104 	movi	r6,4
 4007d8c:	e17fff17 	ldw	r5,-4(fp)
 4007d90:	1009883a 	mov	r4,r2
 4007d94:	400c0380 	call	400c038 <memcpy>
}
 4007d98:	0001883a 	nop
 4007d9c:	e037883a 	mov	sp,fp
 4007da0:	dfc00117 	ldw	ra,4(sp)
 4007da4:	df000017 	ldw	fp,0(sp)
 4007da8:	dec00204 	addi	sp,sp,8
 4007dac:	f800283a 	ret

04007db0 <_ZN9IPAddress10fromStringEPKc>:

bool IPAddress::fromString(const char *address)
{
 4007db0:	defffb04 	addi	sp,sp,-20
 4007db4:	dfc00415 	stw	ra,16(sp)
 4007db8:	df000315 	stw	fp,12(sp)
 4007dbc:	df000304 	addi	fp,sp,12
 4007dc0:	e13ffe15 	stw	r4,-8(fp)
 4007dc4:	e17fff15 	stw	r5,-4(fp)
    uint16_t acc = 0; // Accumulator
 4007dc8:	e03ffd0d 	sth	zero,-12(fp)
    uint8_t dots = 0;
 4007dcc:	e03ffd85 	stb	zero,-10(fp)

    while (*address)
 4007dd0:	e0bfff17 	ldw	r2,-4(fp)
 4007dd4:	10800003 	ldbu	r2,0(r2)
 4007dd8:	10803fcc 	andi	r2,r2,255
 4007ddc:	1080201c 	xori	r2,r2,128
 4007de0:	10bfe004 	addi	r2,r2,-128
 4007de4:	10002f26 	beq	r2,zero,4007ea4 <_ZN9IPAddress10fromStringEPKc+0xf4>
    {
        char c = *address++;
 4007de8:	e0bfff17 	ldw	r2,-4(fp)
 4007dec:	10c00044 	addi	r3,r2,1
 4007df0:	e0ffff15 	stw	r3,-4(fp)
 4007df4:	10800003 	ldbu	r2,0(r2)
 4007df8:	e0bffdc5 	stb	r2,-9(fp)
        if (c >= '0' && c <= '9')
 4007dfc:	e0bffdc7 	ldb	r2,-9(fp)
 4007e00:	10800c10 	cmplti	r2,r2,48
 4007e04:	1000111e 	bne	r2,zero,4007e4c <_ZN9IPAddress10fromStringEPKc+0x9c>
 4007e08:	e0bffdc7 	ldb	r2,-9(fp)
 4007e0c:	10800e88 	cmpgei	r2,r2,58
 4007e10:	10000e1e 	bne	r2,zero,4007e4c <_ZN9IPAddress10fromStringEPKc+0x9c>
        {
            acc = acc * 10 + (c - '0');
 4007e14:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e18:	01400284 	movi	r5,10
 4007e1c:	1009883a 	mov	r4,r2
 4007e20:	400b1dc0 	call	400b1dc <__mulsi3>
 4007e24:	1007883a 	mov	r3,r2
 4007e28:	e0bffdc7 	ldb	r2,-9(fp)
 4007e2c:	1885883a 	add	r2,r3,r2
 4007e30:	10bff404 	addi	r2,r2,-48
 4007e34:	e0bffd0d 	sth	r2,-12(fp)
            if (acc > 255) {
 4007e38:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e3c:	10804030 	cmpltui	r2,r2,256
 4007e40:	1000171e 	bne	r2,zero,4007ea0 <_ZN9IPAddress10fromStringEPKc+0xf0>
                // Value out of [0..255] range
                return false;
 4007e44:	0005883a 	mov	r2,zero
 4007e48:	00002006 	br	4007ecc <_ZN9IPAddress10fromStringEPKc+0x11c>
            }
        }
        else if (c == '.')
 4007e4c:	e0bffdc7 	ldb	r2,-9(fp)
 4007e50:	10800b98 	cmpnei	r2,r2,46
 4007e54:	1000101e 	bne	r2,zero,4007e98 <_ZN9IPAddress10fromStringEPKc+0xe8>
        {
            if (dots == 3) {
 4007e58:	e0bffd83 	ldbu	r2,-10(fp)
 4007e5c:	108000d8 	cmpnei	r2,r2,3
 4007e60:	1000021e 	bne	r2,zero,4007e6c <_ZN9IPAddress10fromStringEPKc+0xbc>
                // Too much dots (there must be 3 dots)
                return false;
 4007e64:	0005883a 	mov	r2,zero
 4007e68:	00001806 	br	4007ecc <_ZN9IPAddress10fromStringEPKc+0x11c>
            }
            _address.bytes[dots++] = acc;
 4007e6c:	e0bffd83 	ldbu	r2,-10(fp)
 4007e70:	10c00044 	addi	r3,r2,1
 4007e74:	e0fffd85 	stb	r3,-10(fp)
 4007e78:	10803fcc 	andi	r2,r2,255
 4007e7c:	e0fffd0b 	ldhu	r3,-12(fp)
 4007e80:	1809883a 	mov	r4,r3
 4007e84:	e0fffe17 	ldw	r3,-8(fp)
 4007e88:	1885883a 	add	r2,r3,r2
 4007e8c:	11000005 	stb	r4,0(r2)
            acc = 0;
 4007e90:	e03ffd0d 	sth	zero,-12(fp)
 4007e94:	003fce06 	br	4007dd0 <__alt_data_end+0xfc007dd0>
        }
        else
        {
            // Invalid char
            return false;
 4007e98:	0005883a 	mov	r2,zero
 4007e9c:	00000b06 	br	4007ecc <_ZN9IPAddress10fromStringEPKc+0x11c>
bool IPAddress::fromString(const char *address)
{
    uint16_t acc = 0; // Accumulator
    uint8_t dots = 0;

    while (*address)
 4007ea0:	003fcb06 	br	4007dd0 <__alt_data_end+0xfc007dd0>
            // Invalid char
            return false;
        }
    }

    if (dots != 3) {
 4007ea4:	e0bffd83 	ldbu	r2,-10(fp)
 4007ea8:	108000e0 	cmpeqi	r2,r2,3
 4007eac:	1000021e 	bne	r2,zero,4007eb8 <_ZN9IPAddress10fromStringEPKc+0x108>
        // Too few dots (there must be 3 dots)
        return false;
 4007eb0:	0005883a 	mov	r2,zero
 4007eb4:	00000506 	br	4007ecc <_ZN9IPAddress10fromStringEPKc+0x11c>
    }
    _address.bytes[3] = acc;
 4007eb8:	e0bffd0b 	ldhu	r2,-12(fp)
 4007ebc:	1007883a 	mov	r3,r2
 4007ec0:	e0bffe17 	ldw	r2,-8(fp)
 4007ec4:	10c000c5 	stb	r3,3(r2)
    return true;
 4007ec8:	00800044 	movi	r2,1
}
 4007ecc:	e037883a 	mov	sp,fp
 4007ed0:	dfc00117 	ldw	ra,4(sp)
 4007ed4:	df000017 	ldw	fp,0(sp)
 4007ed8:	dec00204 	addi	sp,sp,8
 4007edc:	f800283a 	ret

04007ee0 <_ZN9IPAddress5printEv>:

void IPAddress::print() {
 4007ee0:	defffc04 	addi	sp,sp,-16
 4007ee4:	dfc00315 	stw	ra,12(sp)
 4007ee8:	df000215 	stw	fp,8(sp)
 4007eec:	df000204 	addi	fp,sp,8
 4007ef0:	e13fff15 	stw	r4,-4(fp)
	printf("%u.%u.%u.%u", _address.bytes[0], _address.bytes[1], _address.bytes[2], _address.bytes[3]);
 4007ef4:	e0bfff17 	ldw	r2,-4(fp)
 4007ef8:	10800003 	ldbu	r2,0(r2)
 4007efc:	10c03fcc 	andi	r3,r2,255
 4007f00:	e0bfff17 	ldw	r2,-4(fp)
 4007f04:	10800043 	ldbu	r2,1(r2)
 4007f08:	11003fcc 	andi	r4,r2,255
 4007f0c:	e0bfff17 	ldw	r2,-4(fp)
 4007f10:	10800083 	ldbu	r2,2(r2)
 4007f14:	11403fcc 	andi	r5,r2,255
 4007f18:	e0bfff17 	ldw	r2,-4(fp)
 4007f1c:	108000c3 	ldbu	r2,3(r2)
 4007f20:	10803fcc 	andi	r2,r2,255
 4007f24:	d8800015 	stw	r2,0(sp)
 4007f28:	280f883a 	mov	r7,r5
 4007f2c:	200d883a 	mov	r6,r4
 4007f30:	180b883a 	mov	r5,r3
 4007f34:	010100b4 	movhi	r4,1026
 4007f38:	2132e204 	addi	r4,r4,-13432
 4007f3c:	400c2d80 	call	400c2d8 <printf>
}
 4007f40:	0001883a 	nop
 4007f44:	e037883a 	mov	sp,fp
 4007f48:	dfc00117 	ldw	ra,4(sp)
 4007f4c:	df000017 	ldw	fp,0(sp)
 4007f50:	dec00204 	addi	sp,sp,8
 4007f54:	f800283a 	ret

04007f58 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
 4007f58:	defffc04 	addi	sp,sp,-16
 4007f5c:	dfc00315 	stw	ra,12(sp)
 4007f60:	df000215 	stw	fp,8(sp)
 4007f64:	df000204 	addi	fp,sp,8
 4007f68:	e13ffe15 	stw	r4,-8(fp)
 4007f6c:	e17fff15 	stw	r5,-4(fp)
    memcpy(_address.bytes, address, sizeof(_address.bytes));
 4007f70:	e0bffe17 	ldw	r2,-8(fp)
 4007f74:	01800104 	movi	r6,4
 4007f78:	e17fff17 	ldw	r5,-4(fp)
 4007f7c:	1009883a 	mov	r4,r2
 4007f80:	400c0380 	call	400c038 <memcpy>
    return *this;
 4007f84:	e0bffe17 	ldw	r2,-8(fp)
}
 4007f88:	e037883a 	mov	sp,fp
 4007f8c:	dfc00117 	ldw	ra,4(sp)
 4007f90:	df000017 	ldw	fp,0(sp)
 4007f94:	dec00204 	addi	sp,sp,8
 4007f98:	f800283a 	ret

04007f9c <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
 4007f9c:	defffd04 	addi	sp,sp,-12
 4007fa0:	df000215 	stw	fp,8(sp)
 4007fa4:	df000204 	addi	fp,sp,8
 4007fa8:	e13ffe15 	stw	r4,-8(fp)
 4007fac:	e17fff15 	stw	r5,-4(fp)
    _address.dword = address;
 4007fb0:	e0bffe17 	ldw	r2,-8(fp)
 4007fb4:	e0ffff17 	ldw	r3,-4(fp)
 4007fb8:	10c00015 	stw	r3,0(r2)
    return *this;
 4007fbc:	e0bffe17 	ldw	r2,-8(fp)
}
 4007fc0:	e037883a 	mov	sp,fp
 4007fc4:	df000017 	ldw	fp,0(sp)
 4007fc8:	dec00104 	addi	sp,sp,4
 4007fcc:	f800283a 	ret

04007fd0 <_ZNK9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr) const
{
 4007fd0:	defffc04 	addi	sp,sp,-16
 4007fd4:	dfc00315 	stw	ra,12(sp)
 4007fd8:	df000215 	stw	fp,8(sp)
 4007fdc:	df000204 	addi	fp,sp,8
 4007fe0:	e13ffe15 	stw	r4,-8(fp)
 4007fe4:	e17fff15 	stw	r5,-4(fp)
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
 4007fe8:	e0bffe17 	ldw	r2,-8(fp)
 4007fec:	01800104 	movi	r6,4
 4007ff0:	100b883a 	mov	r5,r2
 4007ff4:	e13fff17 	ldw	r4,-4(fp)
 4007ff8:	400bfbc0 	call	400bfbc <memcmp>
 4007ffc:	1005003a 	cmpeq	r2,r2,zero
}
 4008000:	e037883a 	mov	sp,fp
 4008004:	dfc00117 	ldw	ra,4(sp)
 4008008:	df000017 	ldw	fp,0(sp)
 400800c:	dec00204 	addi	sp,sp,8
 4008010:	f800283a 	ret

04008014 <_Z41__static_initialization_and_destruction_0ii>:
 4008014:	defffb04 	addi	sp,sp,-20
 4008018:	dfc00415 	stw	ra,16(sp)
 400801c:	df000315 	stw	fp,12(sp)
 4008020:	df000304 	addi	fp,sp,12
 4008024:	e13ffe15 	stw	r4,-8(fp)
 4008028:	e17fff15 	stw	r5,-4(fp)
 400802c:	e0bffe17 	ldw	r2,-8(fp)
 4008030:	10800058 	cmpnei	r2,r2,1
 4008034:	1000091e 	bne	r2,zero,400805c <_Z41__static_initialization_and_destruction_0ii+0x48>
 4008038:	e0ffff17 	ldw	r3,-4(fp)
 400803c:	00bfffd4 	movui	r2,65535
 4008040:	1880061e 	bne	r3,r2,400805c <_Z41__static_initialization_and_destruction_0ii+0x48>
 4008044:	d8000015 	stw	zero,0(sp)
 4008048:	000f883a 	mov	r7,zero
 400804c:	000d883a 	mov	r6,zero
 4008050:	000b883a 	mov	r5,zero
 4008054:	d112d804 	addi	r4,gp,19296
 4008058:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
 400805c:	0001883a 	nop
 4008060:	e037883a 	mov	sp,fp
 4008064:	dfc00117 	ldw	ra,4(sp)
 4008068:	df000017 	ldw	fp,0(sp)
 400806c:	dec00204 	addi	sp,sp,8
 4008070:	f800283a 	ret

04008074 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
 4008074:	defffe04 	addi	sp,sp,-8
 4008078:	dfc00115 	stw	ra,4(sp)
 400807c:	df000015 	stw	fp,0(sp)
 4008080:	d839883a 	mov	fp,sp
 4008084:	017fffd4 	movui	r5,65535
 4008088:	01000044 	movi	r4,1
 400808c:	40080140 	call	4008014 <_Z41__static_initialization_and_destruction_0ii>
 4008090:	e037883a 	mov	sp,fp
 4008094:	dfc00117 	ldw	ra,4(sp)
 4008098:	df000017 	ldw	fp,0(sp)
 400809c:	dec00204 	addi	sp,sp,8
 40080a0:	f800283a 	ret

040080a4 <_ZN10W5100Class4initEv>:
  uint32_t W5100Class::ss_pin_mask;
#endif


uint8_t W5100Class::init(void)
{
 40080a4:	defffd04 	addi	sp,sp,-12
 40080a8:	dfc00215 	stw	ra,8(sp)
 40080ac:	df000115 	stw	fp,4(sp)
 40080b0:	df000104 	addi	fp,sp,4
	static bool initialized = false;
	uint8_t i;

	if (initialized) return 1;
 40080b4:	d092dac3 	ldbu	r2,19307(gp)
 40080b8:	10803fcc 	andi	r2,r2,255
 40080bc:	10000226 	beq	r2,zero,40080c8 <_ZN10W5100Class4initEv+0x24>
 40080c0:	00800044 	movi	r2,1
 40080c4:	00004306 	br	40081d4 <_ZN10W5100Class4initEv+0x130>
	// reset pulse!  The CAT811 has a 240 ms typical pulse length, and
	// a 400 ms worst case maximum pulse length.  MAX811 has a worst
	// case maximum 560 ms pulse length.  This delay is meant to wait
	// until the reset pulse is ended.  If your hardware has a shorter
	// reset time, this can be edited or removed.
	usleep (560000);
 40080c8:	01000274 	movhi	r4,9
 40080cc:	2122e004 	addi	r4,r4,-29824
 40080d0:	40194f00 	call	40194f0 <usleep>

	// Attempt W5200 detection first, because W5200 does not properly
	// reset its SPI state when CS goes high (inactive).  Communication
	// from detecting the other chips can leave the W5200 in a state
	// where it won't recover, unless given a reset pulse.
	if (isW5200()) {
 40080d4:	40083140 	call	4008314 <_ZN10W5100Class7isW5200Ev>
 40080d8:	10803fcc 	andi	r2,r2,255
 40080dc:	1004c03a 	cmpne	r2,r2,zero
 40080e0:	10803fcc 	andi	r2,r2,255
 40080e4:	10002126 	beq	r2,zero,400816c <_ZN10W5100Class4initEv+0xc8>
		CH_BASE_MSB = 0x40;
 40080e8:	00801004 	movi	r2,64
 40080ec:	d092da45 	stb	r2,19305(gp)
#else
		SSIZE = 2048;
#endif
		SMASK = SSIZE - 1;
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
 40080f0:	e03fff05 	stb	zero,-4(fp)
 40080f4:	e0bfff03 	ldbu	r2,-4(fp)
 40080f8:	10800228 	cmpgeui	r2,r2,8
 40080fc:	10000c1e 	bne	r2,zero,4008130 <_ZN10W5100Class4initEv+0x8c>
			writeSnRX_SIZE(i, SSIZE >> 10);
 4008100:	e0bfff03 	ldbu	r2,-4(fp)
 4008104:	01400084 	movi	r5,2
 4008108:	1009883a 	mov	r4,r2
 400810c:	4008c880 	call	4008c88 <_ZN10W5100Class14writeSnRX_SIZEEhh>
			writeSnTX_SIZE(i, SSIZE >> 10);
 4008110:	e0bfff03 	ldbu	r2,-4(fp)
 4008114:	01400084 	movi	r5,2
 4008118:	1009883a 	mov	r4,r2
 400811c:	4008cd80 	call	4008cd8 <_ZN10W5100Class14writeSnTX_SIZEEhh>
#else
		SSIZE = 2048;
#endif
		SMASK = SSIZE - 1;
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
 4008120:	e0bfff03 	ldbu	r2,-4(fp)
 4008124:	10800044 	addi	r2,r2,1
 4008128:	e0bfff05 	stb	r2,-4(fp)
 400812c:	003ff106 	br	40080f4 <__alt_data_end+0xfc0080f4>
			writeSnRX_SIZE(i, SSIZE >> 10);
			writeSnTX_SIZE(i, SSIZE >> 10);
		}
		for (; i<8; i++) {
 4008130:	e0bfff03 	ldbu	r2,-4(fp)
 4008134:	10800228 	cmpgeui	r2,r2,8
 4008138:	1000231e 	bne	r2,zero,40081c8 <_ZN10W5100Class4initEv+0x124>
			writeSnRX_SIZE(i, 0);
 400813c:	e0bfff03 	ldbu	r2,-4(fp)
 4008140:	000b883a 	mov	r5,zero
 4008144:	1009883a 	mov	r4,r2
 4008148:	4008c880 	call	4008c88 <_ZN10W5100Class14writeSnRX_SIZEEhh>
			writeSnTX_SIZE(i, 0);
 400814c:	e0bfff03 	ldbu	r2,-4(fp)
 4008150:	000b883a 	mov	r5,zero
 4008154:	1009883a 	mov	r4,r2
 4008158:	4008cd80 	call	4008cd8 <_ZN10W5100Class14writeSnTX_SIZEEhh>
#endif
		for (i=0; i<MAX_SOCK_NUM; i++) {
			writeSnRX_SIZE(i, SSIZE >> 10);
			writeSnTX_SIZE(i, SSIZE >> 10);
		}
		for (; i<8; i++) {
 400815c:	e0bfff03 	ldbu	r2,-4(fp)
 4008160:	10800044 	addi	r2,r2,1
 4008164:	e0bfff05 	stb	r2,-4(fp)
 4008168:	003ff106 	br	4008130 <__alt_data_end+0xfc008130>
			writeSnTX_SIZE(i, 0);
		}
	// Try W5500 next.  WIZnet finally seems to have implemented
	// SPI well with this chip.  It appears to be very resilient,
	// so try it after the fragile W5200
	} else if (isW5500()) {
 400816c:	40083ec0 	call	40083ec <_ZN10W5100Class7isW5500Ev>
 4008170:	10803fcc 	andi	r2,r2,255
 4008174:	1004c03a 	cmpne	r2,r2,zero
 4008178:	10803fcc 	andi	r2,r2,255
 400817c:	10000326 	beq	r2,zero,400818c <_ZN10W5100Class4initEv+0xe8>
		CH_BASE_MSB = 0x10;
 4008180:	00800404 	movi	r2,16
 4008184:	d092da45 	stb	r2,19305(gp)
 4008188:	00000f06 	br	40081c8 <_ZN10W5100Class4initEv+0x124>
	// Try W5100 last.  This simple chip uses fixed 4 byte frames
	// for every 8 bit access.  Terribly inefficient, but so simple
	// it recovers from "hearing" unsuccessful W5100 or W5200
	// communication.  W5100 is also the only chip without a VERSIONR
	// register for identification, so we check this last.
	} else if (isW5100()) {
 400818c:	400825c0 	call	400825c <_ZN10W5100Class7isW5100Ev>
 4008190:	10803fcc 	andi	r2,r2,255
 4008194:	1004c03a 	cmpne	r2,r2,zero
 4008198:	10803fcc 	andi	r2,r2,255
 400819c:	10000726 	beq	r2,zero,40081bc <_ZN10W5100Class4initEv+0x118>
		CH_BASE_MSB = 0x04;
 40081a0:	00800104 	movi	r2,4
 40081a4:	d092da45 	stb	r2,19305(gp)
		writeTMSR(0x55);
		writeRMSR(0x55);
#endif
		SMASK = SSIZE - 1;
#else
		writeTMSR(0x55);
 40081a8:	01001544 	movi	r4,85
 40081ac:	4008b0c0 	call	4008b0c <_ZN10W5100Class9writeTMSREh>
		writeRMSR(0x55);
 40081b0:	01001544 	movi	r4,85
 40081b4:	4008acc0 	call	4008acc <_ZN10W5100Class9writeRMSREh>
 40081b8:	00000306 	br	40081c8 <_ZN10W5100Class4initEv+0x124>
	// No hardware seems to be present.  Or it could be a W5200
	// that's heard other SPI communication if its chip select
	// pin wasn't high when a SD card or other SPI chip was used.
	} else {
		//Serial.println("no chip :-(");
		chip = 0;
 40081bc:	d012da05 	stb	zero,19304(gp)
		return 0; // no known chip is responding :-(
 40081c0:	0005883a 	mov	r2,zero
 40081c4:	00000306 	br	40081d4 <_ZN10W5100Class4initEv+0x130>
	}
	initialized = true;
 40081c8:	00800044 	movi	r2,1
 40081cc:	d092dac5 	stb	r2,19307(gp)
	return 1; // successful init
 40081d0:	00800044 	movi	r2,1
}
 40081d4:	e037883a 	mov	sp,fp
 40081d8:	dfc00117 	ldw	ra,4(sp)
 40081dc:	df000017 	ldw	fp,0(sp)
 40081e0:	dec00204 	addi	sp,sp,8
 40081e4:	f800283a 	ret

040081e8 <_ZN10W5100Class9softResetEv>:

// Soft reset the WIZnet chip, by writing to its MR register reset bit
uint8_t W5100Class::softReset(void)
{
 40081e8:	defffd04 	addi	sp,sp,-12
 40081ec:	dfc00215 	stw	ra,8(sp)
 40081f0:	df000115 	stw	fp,4(sp)
 40081f4:	df000104 	addi	fp,sp,4
	uint16_t count=0;
 40081f8:	e03fff0d 	sth	zero,-4(fp)

	//Serial.println("WIZnet soft reset");
	// write to reset bit
	writeMR(0x80);
 40081fc:	01002004 	movi	r4,128
 4008200:	4008a600 	call	4008a60 <_ZN10W5100Class7writeMREh>
	// then wait for soft reset to complete
	do {
		uint8_t mr = readMR();
 4008204:	4008aa00 	call	4008aa0 <_ZN10W5100Class6readMREv>
 4008208:	e0bfff85 	stb	r2,-2(fp)
		//Serial.print("mr=");
		//Serial.println(mr, HEX);
		if (mr == 0) return 1;
 400820c:	e0bfff83 	ldbu	r2,-2(fp)
 4008210:	1000021e 	bne	r2,zero,400821c <_ZN10W5100Class9softResetEv+0x34>
 4008214:	00800044 	movi	r2,1
 4008218:	00000b06 	br	4008248 <_ZN10W5100Class9softResetEv+0x60>
		usleep (1000);
 400821c:	0100fa04 	movi	r4,1000
 4008220:	40194f00 	call	40194f0 <usleep>

	//Serial.println("WIZnet soft reset");
	// write to reset bit
	writeMR(0x80);
	// then wait for soft reset to complete
	do {
 4008224:	e0bfff0b 	ldhu	r2,-4(fp)
 4008228:	10800044 	addi	r2,r2,1
 400822c:	e0bfff0d 	sth	r2,-4(fp)
 4008230:	e0bfff0b 	ldhu	r2,-4(fp)
 4008234:	10800530 	cmpltui	r2,r2,20
 4008238:	10803fcc 	andi	r2,r2,255
 400823c:	10000126 	beq	r2,zero,4008244 <_ZN10W5100Class9softResetEv+0x5c>
 4008240:	003ff006 	br	4008204 <__alt_data_end+0xfc008204>
		//Serial.print("mr=");
		//Serial.println(mr, HEX);
		if (mr == 0) return 1;
		usleep (1000);
	} while (++count < 20);
	return 0;
 4008244:	0005883a 	mov	r2,zero
}
 4008248:	e037883a 	mov	sp,fp
 400824c:	dfc00117 	ldw	ra,4(sp)
 4008250:	df000017 	ldw	fp,0(sp)
 4008254:	dec00204 	addi	sp,sp,8
 4008258:	f800283a 	ret

0400825c <_ZN10W5100Class7isW5100Ev>:

uint8_t W5100Class::isW5100(void)
{
 400825c:	defffe04 	addi	sp,sp,-8
 4008260:	dfc00115 	stw	ra,4(sp)
 4008264:	df000015 	stw	fp,0(sp)
 4008268:	d839883a 	mov	fp,sp
	chip = 51;
 400826c:	00800cc4 	movi	r2,51
 4008270:	d092da05 	stb	r2,19304(gp)
	//Serial.println("w5100.cpp: detect W5100 chip");
	if (!softReset()) return 0;
 4008274:	40081e80 	call	40081e8 <_ZN10W5100Class9softResetEv>
 4008278:	10803fcc 	andi	r2,r2,255
 400827c:	1005003a 	cmpeq	r2,r2,zero
 4008280:	10803fcc 	andi	r2,r2,255
 4008284:	10000226 	beq	r2,zero,4008290 <_ZN10W5100Class7isW5100Ev+0x34>
 4008288:	0005883a 	mov	r2,zero
 400828c:	00001c06 	br	4008300 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x10);
 4008290:	01000404 	movi	r4,16
 4008294:	4008a600 	call	4008a60 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 4008298:	4008aa00 	call	4008aa0 <_ZN10W5100Class6readMREv>
 400829c:	10803fcc 	andi	r2,r2,255
 40082a0:	10800418 	cmpnei	r2,r2,16
 40082a4:	10803fcc 	andi	r2,r2,255
 40082a8:	10000226 	beq	r2,zero,40082b4 <_ZN10W5100Class7isW5100Ev+0x58>
 40082ac:	0005883a 	mov	r2,zero
 40082b0:	00001306 	br	4008300 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x12);
 40082b4:	01000484 	movi	r4,18
 40082b8:	4008a600 	call	4008a60 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x12) return 0;
 40082bc:	4008aa00 	call	4008aa0 <_ZN10W5100Class6readMREv>
 40082c0:	10803fcc 	andi	r2,r2,255
 40082c4:	10800498 	cmpnei	r2,r2,18
 40082c8:	10803fcc 	andi	r2,r2,255
 40082cc:	10000226 	beq	r2,zero,40082d8 <_ZN10W5100Class7isW5100Ev+0x7c>
 40082d0:	0005883a 	mov	r2,zero
 40082d4:	00000a06 	br	4008300 <_ZN10W5100Class7isW5100Ev+0xa4>
	writeMR(0x00);
 40082d8:	0009883a 	mov	r4,zero
 40082dc:	4008a600 	call	4008a60 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 40082e0:	4008aa00 	call	4008aa0 <_ZN10W5100Class6readMREv>
 40082e4:	10803fcc 	andi	r2,r2,255
 40082e8:	1004c03a 	cmpne	r2,r2,zero
 40082ec:	10803fcc 	andi	r2,r2,255
 40082f0:	10000226 	beq	r2,zero,40082fc <_ZN10W5100Class7isW5100Ev+0xa0>
 40082f4:	0005883a 	mov	r2,zero
 40082f8:	00000106 	br	4008300 <_ZN10W5100Class7isW5100Ev+0xa4>
	//Serial.println("chip is W5100");
	return 1;
 40082fc:	00800044 	movi	r2,1
}
 4008300:	e037883a 	mov	sp,fp
 4008304:	dfc00117 	ldw	ra,4(sp)
 4008308:	df000017 	ldw	fp,0(sp)
 400830c:	dec00204 	addi	sp,sp,8
 4008310:	f800283a 	ret

04008314 <_ZN10W5100Class7isW5200Ev>:

uint8_t W5100Class::isW5200(void)
{
 4008314:	defffd04 	addi	sp,sp,-12
 4008318:	dfc00215 	stw	ra,8(sp)
 400831c:	df000115 	stw	fp,4(sp)
 4008320:	df000104 	addi	fp,sp,4
	chip = 52;
 4008324:	00800d04 	movi	r2,52
 4008328:	d092da05 	stb	r2,19304(gp)
	//Serial.println("w5100.cpp: detect W5200 chip");
	if (!softReset()) return 0;
 400832c:	40081e80 	call	40081e8 <_ZN10W5100Class9softResetEv>
 4008330:	10803fcc 	andi	r2,r2,255
 4008334:	1005003a 	cmpeq	r2,r2,zero
 4008338:	10803fcc 	andi	r2,r2,255
 400833c:	10000226 	beq	r2,zero,4008348 <_ZN10W5100Class7isW5200Ev+0x34>
 4008340:	0005883a 	mov	r2,zero
 4008344:	00002406 	br	40083d8 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x08);
 4008348:	01000204 	movi	r4,8
 400834c:	4008a600 	call	4008a60 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x08) return 0;
 4008350:	4008aa00 	call	4008aa0 <_ZN10W5100Class6readMREv>
 4008354:	10803fcc 	andi	r2,r2,255
 4008358:	10800218 	cmpnei	r2,r2,8
 400835c:	10803fcc 	andi	r2,r2,255
 4008360:	10000226 	beq	r2,zero,400836c <_ZN10W5100Class7isW5200Ev+0x58>
 4008364:	0005883a 	mov	r2,zero
 4008368:	00001b06 	br	40083d8 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x10);
 400836c:	01000404 	movi	r4,16
 4008370:	4008a600 	call	4008a60 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 4008374:	4008aa00 	call	4008aa0 <_ZN10W5100Class6readMREv>
 4008378:	10803fcc 	andi	r2,r2,255
 400837c:	10800418 	cmpnei	r2,r2,16
 4008380:	10803fcc 	andi	r2,r2,255
 4008384:	10000226 	beq	r2,zero,4008390 <_ZN10W5100Class7isW5200Ev+0x7c>
 4008388:	0005883a 	mov	r2,zero
 400838c:	00001206 	br	40083d8 <_ZN10W5100Class7isW5200Ev+0xc4>
	writeMR(0x00);
 4008390:	0009883a 	mov	r4,zero
 4008394:	4008a600 	call	4008a60 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 4008398:	4008aa00 	call	4008aa0 <_ZN10W5100Class6readMREv>
 400839c:	10803fcc 	andi	r2,r2,255
 40083a0:	1004c03a 	cmpne	r2,r2,zero
 40083a4:	10803fcc 	andi	r2,r2,255
 40083a8:	10000226 	beq	r2,zero,40083b4 <_ZN10W5100Class7isW5200Ev+0xa0>
 40083ac:	0005883a 	mov	r2,zero
 40083b0:	00000906 	br	40083d8 <_ZN10W5100Class7isW5200Ev+0xc4>
	int ver = readVERSIONR_W5200();
 40083b4:	4008b4c0 	call	4008b4c <_ZN10W5100Class18readVERSIONR_W5200Ev>
 40083b8:	10803fcc 	andi	r2,r2,255
 40083bc:	e0bfff15 	stw	r2,-4(fp)
	//Serial.print("version=");
	//Serial.println(ver);
	if (ver != 3) return 0;
 40083c0:	e0bfff17 	ldw	r2,-4(fp)
 40083c4:	108000e0 	cmpeqi	r2,r2,3
 40083c8:	1000021e 	bne	r2,zero,40083d4 <_ZN10W5100Class7isW5200Ev+0xc0>
 40083cc:	0005883a 	mov	r2,zero
 40083d0:	00000106 	br	40083d8 <_ZN10W5100Class7isW5200Ev+0xc4>
	//Serial.println("chip is W5200");
	return 1;
 40083d4:	00800044 	movi	r2,1
}
 40083d8:	e037883a 	mov	sp,fp
 40083dc:	dfc00117 	ldw	ra,4(sp)
 40083e0:	df000017 	ldw	fp,0(sp)
 40083e4:	dec00204 	addi	sp,sp,8
 40083e8:	f800283a 	ret

040083ec <_ZN10W5100Class7isW5500Ev>:

uint8_t W5100Class::isW5500(void)
{
 40083ec:	defffd04 	addi	sp,sp,-12
 40083f0:	dfc00215 	stw	ra,8(sp)
 40083f4:	df000115 	stw	fp,4(sp)
 40083f8:	df000104 	addi	fp,sp,4
	chip = 55;
 40083fc:	00800dc4 	movi	r2,55
 4008400:	d092da05 	stb	r2,19304(gp)
	//Serial.println("w5100.cpp: detect W5500 chip");
	if (!softReset()) return 0;
 4008404:	40081e80 	call	40081e8 <_ZN10W5100Class9softResetEv>
 4008408:	10803fcc 	andi	r2,r2,255
 400840c:	1005003a 	cmpeq	r2,r2,zero
 4008410:	10803fcc 	andi	r2,r2,255
 4008414:	10000226 	beq	r2,zero,4008420 <_ZN10W5100Class7isW5500Ev+0x34>
 4008418:	0005883a 	mov	r2,zero
 400841c:	00002406 	br	40084b0 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x08);
 4008420:	01000204 	movi	r4,8
 4008424:	4008a600 	call	4008a60 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x08) return 0;
 4008428:	4008aa00 	call	4008aa0 <_ZN10W5100Class6readMREv>
 400842c:	10803fcc 	andi	r2,r2,255
 4008430:	10800218 	cmpnei	r2,r2,8
 4008434:	10803fcc 	andi	r2,r2,255
 4008438:	10000226 	beq	r2,zero,4008444 <_ZN10W5100Class7isW5500Ev+0x58>
 400843c:	0005883a 	mov	r2,zero
 4008440:	00001b06 	br	40084b0 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x10);
 4008444:	01000404 	movi	r4,16
 4008448:	4008a600 	call	4008a60 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x10) return 0;
 400844c:	4008aa00 	call	4008aa0 <_ZN10W5100Class6readMREv>
 4008450:	10803fcc 	andi	r2,r2,255
 4008454:	10800418 	cmpnei	r2,r2,16
 4008458:	10803fcc 	andi	r2,r2,255
 400845c:	10000226 	beq	r2,zero,4008468 <_ZN10W5100Class7isW5500Ev+0x7c>
 4008460:	0005883a 	mov	r2,zero
 4008464:	00001206 	br	40084b0 <_ZN10W5100Class7isW5500Ev+0xc4>
	writeMR(0x00);
 4008468:	0009883a 	mov	r4,zero
 400846c:	4008a600 	call	4008a60 <_ZN10W5100Class7writeMREh>
	if (readMR() != 0x00) return 0;
 4008470:	4008aa00 	call	4008aa0 <_ZN10W5100Class6readMREv>
 4008474:	10803fcc 	andi	r2,r2,255
 4008478:	1004c03a 	cmpne	r2,r2,zero
 400847c:	10803fcc 	andi	r2,r2,255
 4008480:	10000226 	beq	r2,zero,400848c <_ZN10W5100Class7isW5500Ev+0xa0>
 4008484:	0005883a 	mov	r2,zero
 4008488:	00000906 	br	40084b0 <_ZN10W5100Class7isW5500Ev+0xc4>
	int ver = readVERSIONR_W5500();
 400848c:	4008b780 	call	4008b78 <_ZN10W5100Class18readVERSIONR_W5500Ev>
 4008490:	10803fcc 	andi	r2,r2,255
 4008494:	e0bfff15 	stw	r2,-4(fp)
	//Serial.print("version=");
	//Serial.println(ver);
	if (ver != 4) return 0;
 4008498:	e0bfff17 	ldw	r2,-4(fp)
 400849c:	10800120 	cmpeqi	r2,r2,4
 40084a0:	1000021e 	bne	r2,zero,40084ac <_ZN10W5100Class7isW5500Ev+0xc0>
 40084a4:	0005883a 	mov	r2,zero
 40084a8:	00000106 	br	40084b0 <_ZN10W5100Class7isW5500Ev+0xc4>
	//Serial.println("chip is W5500");
	return 1;
 40084ac:	00800044 	movi	r2,1
}
 40084b0:	e037883a 	mov	sp,fp
 40084b4:	dfc00117 	ldw	ra,4(sp)
 40084b8:	df000017 	ldw	fp,0(sp)
 40084bc:	dec00204 	addi	sp,sp,8
 40084c0:	f800283a 	ret

040084c4 <_ZN10W5100Class13getLinkStatusEv>:

W5100Linkstatus W5100Class::getLinkStatus()
{
 40084c4:	defffd04 	addi	sp,sp,-12
 40084c8:	dfc00215 	stw	ra,8(sp)
 40084cc:	df000115 	stw	fp,4(sp)
 40084d0:	df000104 	addi	fp,sp,4
	uint8_t phystatus;

	if (!init()) return UNKNOWN;
 40084d4:	40080a40 	call	40080a4 <_ZN10W5100Class4initEv>
 40084d8:	10803fcc 	andi	r2,r2,255
 40084dc:	1005003a 	cmpeq	r2,r2,zero
 40084e0:	10803fcc 	andi	r2,r2,255
 40084e4:	10000226 	beq	r2,zero,40084f0 <_ZN10W5100Class13getLinkStatusEv+0x2c>
 40084e8:	0005883a 	mov	r2,zero
 40084ec:	00001a06 	br	4008558 <_ZN10W5100Class13getLinkStatusEv+0x94>
	switch (chip) {
 40084f0:	d092da03 	ldbu	r2,19304(gp)
 40084f4:	10803fcc 	andi	r2,r2,255
 40084f8:	10c00d20 	cmpeqi	r3,r2,52
 40084fc:	1800031e 	bne	r3,zero,400850c <_ZN10W5100Class13getLinkStatusEv+0x48>
 4008500:	10800de0 	cmpeqi	r2,r2,55
 4008504:	10000a1e 	bne	r2,zero,4008530 <_ZN10W5100Class13getLinkStatusEv+0x6c>
 4008508:	00001206 	br	4008554 <_ZN10W5100Class13getLinkStatusEv+0x90>
	  case 52:
		phystatus = readPSTATUS_W5200();
 400850c:	4008ba40 	call	4008ba4 <_ZN10W5100Class17readPSTATUS_W5200Ev>
 4008510:	e0bfff05 	stb	r2,-4(fp)
		if (phystatus & 0x20) return LINK_ON;
 4008514:	e0bfff03 	ldbu	r2,-4(fp)
 4008518:	1080080c 	andi	r2,r2,32
 400851c:	10000226 	beq	r2,zero,4008528 <_ZN10W5100Class13getLinkStatusEv+0x64>
 4008520:	00800044 	movi	r2,1
 4008524:	00000c06 	br	4008558 <_ZN10W5100Class13getLinkStatusEv+0x94>
		return LINK_OFF;
 4008528:	00800084 	movi	r2,2
 400852c:	00000a06 	br	4008558 <_ZN10W5100Class13getLinkStatusEv+0x94>
	  case 55:
		phystatus = readPHYCFGR_W5500();
 4008530:	4008bd00 	call	4008bd0 <_ZN10W5100Class17readPHYCFGR_W5500Ev>
 4008534:	e0bfff05 	stb	r2,-4(fp)
		if (phystatus & 0x01) return LINK_ON;
 4008538:	e0bfff03 	ldbu	r2,-4(fp)
 400853c:	1080004c 	andi	r2,r2,1
 4008540:	10000226 	beq	r2,zero,400854c <_ZN10W5100Class13getLinkStatusEv+0x88>
 4008544:	00800044 	movi	r2,1
 4008548:	00000306 	br	4008558 <_ZN10W5100Class13getLinkStatusEv+0x94>
		return LINK_OFF;
 400854c:	00800084 	movi	r2,2
 4008550:	00000106 	br	4008558 <_ZN10W5100Class13getLinkStatusEv+0x94>
	  default:
		return UNKNOWN;
 4008554:	0005883a 	mov	r2,zero
	}
}
 4008558:	e037883a 	mov	sp,fp
 400855c:	dfc00117 	ldw	ra,4(sp)
 4008560:	df000017 	ldw	fp,0(sp)
 4008564:	dec00204 	addi	sp,sp,8
 4008568:	f800283a 	ret

0400856c <_ZN10W5100Class5writeEtPKht>:

uint16_t W5100Class::write(uint16_t addr, const uint8_t *buf, uint16_t len)
{
 400856c:	deffeb04 	addi	sp,sp,-84
 4008570:	dfc01415 	stw	ra,80(sp)
 4008574:	df001315 	stw	fp,76(sp)
 4008578:	df001304 	addi	fp,sp,76
 400857c:	2007883a 	mov	r3,r4
 4008580:	e17ffe15 	stw	r5,-8(fp)
 4008584:	3005883a 	mov	r2,r6
 4008588:	e0fffd0d 	sth	r3,-12(fp)
 400858c:	e0bfff0d 	sth	r2,-4(fp)
	if(len > 50) printf("WARNING: W5100Class::write called with a buffer that's too big!\n");
 4008590:	e0bfff0b 	ldhu	r2,-4(fp)
 4008594:	10800cf0 	cmpltui	r2,r2,51
 4008598:	1000031e 	bne	r2,zero,40085a8 <_ZN10W5100Class5writeEtPKht+0x3c>
 400859c:	010100b4 	movhi	r4,1026
 40085a0:	2132e504 	addi	r4,r4,-13420
 40085a4:	400c3f40 	call	400c3f4 <puts>

	// buffer holds command and data
	uint8_t cmd[50];

		if (addr < 0x100) {
 40085a8:	e0bffd0b 	ldhu	r2,-12(fp)
 40085ac:	10804028 	cmpgeui	r2,r2,256
 40085b0:	1000061e 	bne	r2,zero,40085cc <_ZN10W5100Class5writeEtPKht+0x60>
			// common registers 00nn
			cmd[0] = 0;
 40085b4:	e03ff045 	stb	zero,-63(fp)
			cmd[1] = addr & 0xFF;
 40085b8:	e0bffd0b 	ldhu	r2,-12(fp)
 40085bc:	e0bff085 	stb	r2,-62(fp)
			cmd[2] = 0x04;
 40085c0:	00800104 	movi	r2,4
 40085c4:	e0bff0c5 	stb	r2,-61(fp)
 40085c8:	00002c06 	br	400867c <_ZN10W5100Class5writeEtPKht+0x110>
		} else if (addr < 0x8000) {
 40085cc:	e0bffd0b 	ldhu	r2,-12(fp)
 40085d0:	10bfffcc 	andi	r2,r2,65535
 40085d4:	10a0001c 	xori	r2,r2,32768
 40085d8:	10a00004 	addi	r2,r2,-32768
 40085dc:	10000b16 	blt	r2,zero,400860c <_ZN10W5100Class5writeEtPKht+0xa0>
			// socket registers  10nn, 11nn, 12nn, 13nn, etc
			cmd[0] = 0;
 40085e0:	e03ff045 	stb	zero,-63(fp)
			cmd[1] = addr & 0xFF;
 40085e4:	e0bffd0b 	ldhu	r2,-12(fp)
 40085e8:	e0bff085 	stb	r2,-62(fp)
			cmd[2] = ((addr >> 3) & 0xE0) | 0x0C;
 40085ec:	e0bffd0b 	ldhu	r2,-12(fp)
 40085f0:	1005d0fa 	srai	r2,r2,3
 40085f4:	1007883a 	mov	r3,r2
 40085f8:	00bff804 	movi	r2,-32
 40085fc:	1884703a 	and	r2,r3,r2
 4008600:	10800314 	ori	r2,r2,12
 4008604:	e0bff0c5 	stb	r2,-61(fp)
 4008608:	00001c06 	br	400867c <_ZN10W5100Class5writeEtPKht+0x110>
		} else if (addr < 0xC000) {
 400860c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008610:	10b00028 	cmpgeui	r2,r2,49152
 4008614:	10000d1e 	bne	r2,zero,400864c <_ZN10W5100Class5writeEtPKht+0xe0>
			// transmit buffers  8000-87FF, 8800-8FFF, 9000-97FF, etc
			//  10## #nnn nnnn nnnn
			cmd[0] = addr >> 8;
 4008618:	e0bffd0b 	ldhu	r2,-12(fp)
 400861c:	1005d23a 	srai	r2,r2,8
 4008620:	e0bff045 	stb	r2,-63(fp)
			cmd[1] = addr & 0xFF;
 4008624:	e0bffd0b 	ldhu	r2,-12(fp)
 4008628:	e0bff085 	stb	r2,-62(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x14; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x14; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x14; // 2K buffers
 400862c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008630:	1005d1ba 	srai	r2,r2,6
 4008634:	1007883a 	mov	r3,r2
 4008638:	00bff804 	movi	r2,-32
 400863c:	1884703a 	and	r2,r3,r2
 4008640:	10800514 	ori	r2,r2,20
 4008644:	e0bff0c5 	stb	r2,-61(fp)
 4008648:	00000c06 	br	400867c <_ZN10W5100Class5writeEtPKht+0x110>
			#endif
		} else {
			// receive buffers
			cmd[0] = addr >> 8;
 400864c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008650:	1005d23a 	srai	r2,r2,8
 4008654:	e0bff045 	stb	r2,-63(fp)
			cmd[1] = addr & 0xFF;
 4008658:	e0bffd0b 	ldhu	r2,-12(fp)
 400865c:	e0bff085 	stb	r2,-62(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x1C; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x1C; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x1C; // 2K buffers
 4008660:	e0bffd0b 	ldhu	r2,-12(fp)
 4008664:	1005d1ba 	srai	r2,r2,6
 4008668:	1007883a 	mov	r3,r2
 400866c:	00bff804 	movi	r2,-32
 4008670:	1884703a 	and	r2,r3,r2
 4008674:	10800714 	ori	r2,r2,28
 4008678:	e0bff0c5 	stb	r2,-61(fp)
			#endif
		}
		for (uint8_t i=0; i < len; i++) {
 400867c:	e03ff005 	stb	zero,-64(fp)
 4008680:	e0bff003 	ldbu	r2,-64(fp)
 4008684:	10ffffcc 	andi	r3,r2,65535
 4008688:	e0bfff0b 	ldhu	r2,-4(fp)
 400868c:	18800d2e 	bgeu	r3,r2,40086c4 <_ZN10W5100Class5writeEtPKht+0x158>
			cmd[i + 3] = buf[i];
 4008690:	e0bff003 	ldbu	r2,-64(fp)
 4008694:	108000c4 	addi	r2,r2,3
 4008698:	e0fff003 	ldbu	r3,-64(fp)
 400869c:	e13ffe17 	ldw	r4,-8(fp)
 40086a0:	20c7883a 	add	r3,r4,r3
 40086a4:	18c00003 	ldbu	r3,0(r3)
 40086a8:	e13ff044 	addi	r4,fp,-63
 40086ac:	2085883a 	add	r2,r4,r2
 40086b0:	10c00005 	stb	r3,0(r2)
			cmd[2] = ((addr >> 7) & 0x60) | 0x1C; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x1C; // 2K buffers
			#endif
		}
		for (uint8_t i=0; i < len; i++) {
 40086b4:	e0bff003 	ldbu	r2,-64(fp)
 40086b8:	10800044 	addi	r2,r2,1
 40086bc:	e0bff005 	stb	r2,-64(fp)
 40086c0:	003fef06 	br	4008680 <__alt_data_end+0xfc008680>
			cmd[i + 3] = buf[i];
		}
		alt_avalon_spi_command(
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			len+3, cmd,            // Write length, write data pointer
 40086c4:	e0bfff0b 	ldhu	r2,-4(fp)
 40086c8:	108000c4 	addi	r2,r2,3
			#endif
		}
		for (uint8_t i=0; i < len; i++) {
			cmd[i + 3] = buf[i];
		}
		alt_avalon_spi_command(
 40086cc:	1007883a 	mov	r3,r2
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			len+3, cmd,            // Write length, write data pointer
			0, NULL,       // Read data, read buffer pointer
			0                   // Flags
		);
 40086d0:	e0bff044 	addi	r2,fp,-63
 40086d4:	d8000215 	stw	zero,8(sp)
 40086d8:	d8000115 	stw	zero,4(sp)
 40086dc:	d8000015 	stw	zero,0(sp)
 40086e0:	100f883a 	mov	r7,r2
 40086e4:	180d883a 	mov	r6,r3
 40086e8:	000b883a 	mov	r5,zero
 40086ec:	01020034 	movhi	r4,2048
 40086f0:	21142804 	addi	r4,r4,20640
 40086f4:	401a1980 	call	401a198 <alt_avalon_spi_command>
	return len;
 40086f8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 40086fc:	e037883a 	mov	sp,fp
 4008700:	dfc00117 	ldw	ra,4(sp)
 4008704:	df000017 	ldw	fp,0(sp)
 4008708:	dec00204 	addi	sp,sp,8
 400870c:	f800283a 	ret

04008710 <_ZN10W5100Class4readEtPht>:

uint16_t W5100Class::read(uint16_t addr, uint8_t *buf, uint16_t len)
{
 4008710:	defff604 	addi	sp,sp,-40
 4008714:	dfc00915 	stw	ra,36(sp)
 4008718:	df000815 	stw	fp,32(sp)
 400871c:	df000804 	addi	fp,sp,32
 4008720:	2007883a 	mov	r3,r4
 4008724:	e17ffe15 	stw	r5,-8(fp)
 4008728:	3005883a 	mov	r2,r6
 400872c:	e0fffd0d 	sth	r3,-12(fp)
 4008730:	e0bfff0d 	sth	r2,-4(fp)
	uint8_t cmd[4];

	// TODO test W5100 and 5200 support
	// this function is completely untested for those chips
	if (chip == 51) {
 4008734:	d092da03 	ldbu	r2,19304(gp)
 4008738:	10803fcc 	andi	r2,r2,255
 400873c:	10800cd8 	cmpnei	r2,r2,51
 4008740:	1000211e 	bne	r2,zero,40087c8 <_ZN10W5100Class4readEtPht+0xb8>
		// WARNING: COMPLETELY UNTESTED
		for (uint16_t i=0; i < len; i++) {
 4008744:	e03ffb0d 	sth	zero,-20(fp)
 4008748:	e0fffb0b 	ldhu	r3,-20(fp)
 400874c:	e0bfff0b 	ldhu	r2,-4(fp)
 4008750:	18807e2e 	bgeu	r3,r2,400894c <_ZN10W5100Class4readEtPht+0x23c>
//			#if 1
			cmd[0] = 0x0F;
 4008754:	008003c4 	movi	r2,15
 4008758:	e0bffb85 	stb	r2,-18(fp)
			cmd[1] = addr >> 8;
 400875c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008760:	1005d23a 	srai	r2,r2,8
 4008764:	e0bffbc5 	stb	r2,-17(fp)
			cmd[2] = addr & 0xFF;
 4008768:	e0bffd0b 	ldhu	r2,-12(fp)
 400876c:	e0bffc05 	stb	r2,-16(fp)

			alt_avalon_spi_command(
 4008770:	e0bffb0b 	ldhu	r2,-20(fp)
 4008774:	e0fffe17 	ldw	r3,-8(fp)
 4008778:	1885883a 	add	r2,r3,r2
				SPI_0_BASE, 0,      // SPI_0 base address, slave address
				3, cmd,            // Write length, write data pointer
				1, buf + i,       // Read data, read buffer pointer
				ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N      // Flags (toggle slave select each time...? that's what the old driver did)
			);
 400877c:	e13ffb84 	addi	r4,fp,-18
 4008780:	00c00084 	movi	r3,2
 4008784:	d8c00215 	stw	r3,8(sp)
 4008788:	d8800115 	stw	r2,4(sp)
 400878c:	00800044 	movi	r2,1
 4008790:	d8800015 	stw	r2,0(sp)
 4008794:	200f883a 	mov	r7,r4
 4008798:	018000c4 	movi	r6,3
 400879c:	000b883a 	mov	r5,zero
 40087a0:	01020034 	movhi	r4,2048
 40087a4:	21142804 	addi	r4,r4,20640
 40087a8:	401a1980 	call	401a198 <alt_avalon_spi_command>
			addr++;
 40087ac:	e0bffd0b 	ldhu	r2,-12(fp)
 40087b0:	10800044 	addi	r2,r2,1
 40087b4:	e0bffd0d 	sth	r2,-12(fp)

	// TODO test W5100 and 5200 support
	// this function is completely untested for those chips
	if (chip == 51) {
		// WARNING: COMPLETELY UNTESTED
		for (uint16_t i=0; i < len; i++) {
 40087b8:	e0bffb0b 	ldhu	r2,-20(fp)
 40087bc:	10800044 	addi	r2,r2,1
 40087c0:	e0bffb0d 	sth	r2,-20(fp)
 40087c4:	003fe006 	br	4008748 <__alt_data_end+0xfc008748>
//			SPI.transfer(cmd, 4); // TODO: why doesn't this work?
//			buf[i] = cmd[3];
//			addr++;
//			#endif
		}
	} else if (chip == 52) {
 40087c8:	d092da03 	ldbu	r2,19304(gp)
 40087cc:	10803fcc 	andi	r2,r2,255
 40087d0:	10800d18 	cmpnei	r2,r2,52
 40087d4:	10001d1e 	bne	r2,zero,400884c <_ZN10W5100Class4readEtPht+0x13c>
		// WARNING: COMPLETELY UNTESTED
		memset(buf, 0, len);
 40087d8:	e0bfff0b 	ldhu	r2,-4(fp)
 40087dc:	100d883a 	mov	r6,r2
 40087e0:	000b883a 	mov	r5,zero
 40087e4:	e13ffe17 	ldw	r4,-8(fp)
 40087e8:	400c1800 	call	400c180 <memset>

		cmd[0] = addr >> 8;
 40087ec:	e0bffd0b 	ldhu	r2,-12(fp)
 40087f0:	1005d23a 	srai	r2,r2,8
 40087f4:	e0bffb85 	stb	r2,-18(fp)
		cmd[1] = addr & 0xFF;
 40087f8:	e0bffd0b 	ldhu	r2,-12(fp)
 40087fc:	e0bffbc5 	stb	r2,-17(fp)
		cmd[2] = (len >> 8) & 0x7F;
 4008800:	e0bfff0b 	ldhu	r2,-4(fp)
 4008804:	1005d23a 	srai	r2,r2,8
 4008808:	10801fcc 	andi	r2,r2,127
 400880c:	e0bffc05 	stb	r2,-16(fp)
		cmd[3] = len & 0xFF;
 4008810:	e0bfff0b 	ldhu	r2,-4(fp)
 4008814:	e0bffc45 	stb	r2,-15(fp)
		alt_avalon_spi_command(
 4008818:	e0bfff0b 	ldhu	r2,-4(fp)
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			4, cmd,            // Write length, write data pointer
			len, buf,       // Read data, read buffer pointer
			0                   // Flags
		);
 400881c:	e13ffb84 	addi	r4,fp,-18
 4008820:	d8000215 	stw	zero,8(sp)
 4008824:	e0fffe17 	ldw	r3,-8(fp)
 4008828:	d8c00115 	stw	r3,4(sp)
 400882c:	d8800015 	stw	r2,0(sp)
 4008830:	200f883a 	mov	r7,r4
 4008834:	01800104 	movi	r6,4
 4008838:	000b883a 	mov	r5,zero
 400883c:	01020034 	movhi	r4,2048
 4008840:	21142804 	addi	r4,r4,20640
 4008844:	401a1980 	call	401a198 <alt_avalon_spi_command>
 4008848:	00004006 	br	400894c <_ZN10W5100Class4readEtPht+0x23c>
	} else { // chip == 55
		if (addr < 0x100) {
 400884c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008850:	10804028 	cmpgeui	r2,r2,256
 4008854:	1000051e 	bne	r2,zero,400886c <_ZN10W5100Class4readEtPht+0x15c>
			// common registers 00nn
			cmd[0] = 0;
 4008858:	e03ffb85 	stb	zero,-18(fp)
			cmd[1] = addr & 0xFF;
 400885c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008860:	e0bffbc5 	stb	r2,-17(fp)
			cmd[2] = 0x00;
 4008864:	e03ffc05 	stb	zero,-16(fp)
 4008868:	00002c06 	br	400891c <_ZN10W5100Class4readEtPht+0x20c>
		} else if (addr < 0x8000) {
 400886c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008870:	10bfffcc 	andi	r2,r2,65535
 4008874:	10a0001c 	xori	r2,r2,32768
 4008878:	10a00004 	addi	r2,r2,-32768
 400887c:	10000b16 	blt	r2,zero,40088ac <_ZN10W5100Class4readEtPht+0x19c>
			// socket registers  10nn, 11nn, 12nn, 13nn, etc
			cmd[0] = 0;
 4008880:	e03ffb85 	stb	zero,-18(fp)
			cmd[1] = addr & 0xFF;
 4008884:	e0bffd0b 	ldhu	r2,-12(fp)
 4008888:	e0bffbc5 	stb	r2,-17(fp)
			cmd[2] = ((addr >> 3) & 0xE0) | 0x08;
 400888c:	e0bffd0b 	ldhu	r2,-12(fp)
 4008890:	1005d0fa 	srai	r2,r2,3
 4008894:	1007883a 	mov	r3,r2
 4008898:	00bff804 	movi	r2,-32
 400889c:	1884703a 	and	r2,r3,r2
 40088a0:	10800214 	ori	r2,r2,8
 40088a4:	e0bffc05 	stb	r2,-16(fp)
 40088a8:	00001c06 	br	400891c <_ZN10W5100Class4readEtPht+0x20c>
		} else if (addr < 0xC000) {
 40088ac:	e0bffd0b 	ldhu	r2,-12(fp)
 40088b0:	10b00028 	cmpgeui	r2,r2,49152
 40088b4:	10000d1e 	bne	r2,zero,40088ec <_ZN10W5100Class4readEtPht+0x1dc>
			// transmit buffers  8000-87FF, 8800-8FFF, 9000-97FF, etc
			//  10## #nnn nnnn nnnn
			cmd[0] = addr >> 8;
 40088b8:	e0bffd0b 	ldhu	r2,-12(fp)
 40088bc:	1005d23a 	srai	r2,r2,8
 40088c0:	e0bffb85 	stb	r2,-18(fp)
			cmd[1] = addr & 0xFF;
 40088c4:	e0bffd0b 	ldhu	r2,-12(fp)
 40088c8:	e0bffbc5 	stb	r2,-17(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x10; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x10; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x10; // 2K buffers
 40088cc:	e0bffd0b 	ldhu	r2,-12(fp)
 40088d0:	1005d1ba 	srai	r2,r2,6
 40088d4:	1007883a 	mov	r3,r2
 40088d8:	00bff804 	movi	r2,-32
 40088dc:	1884703a 	and	r2,r3,r2
 40088e0:	10800414 	ori	r2,r2,16
 40088e4:	e0bffc05 	stb	r2,-16(fp)
 40088e8:	00000c06 	br	400891c <_ZN10W5100Class4readEtPht+0x20c>
			#endif
		} else {
			// receive buffers
			cmd[0] = addr >> 8;
 40088ec:	e0bffd0b 	ldhu	r2,-12(fp)
 40088f0:	1005d23a 	srai	r2,r2,8
 40088f4:	e0bffb85 	stb	r2,-18(fp)
			cmd[1] = addr & 0xFF;
 40088f8:	e0bffd0b 	ldhu	r2,-12(fp)
 40088fc:	e0bffbc5 	stb	r2,-17(fp)
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 2
			cmd[2] = ((addr >> 8) & 0x20) | 0x18; // 8K buffers
			#elif defined(ETHERNET_LARGE_BUFFERS) && MAX_SOCK_NUM <= 4
			cmd[2] = ((addr >> 7) & 0x60) | 0x18; // 4K buffers
			#else
			cmd[2] = ((addr >> 6) & 0xE0) | 0x18; // 2K buffers
 4008900:	e0bffd0b 	ldhu	r2,-12(fp)
 4008904:	1005d1ba 	srai	r2,r2,6
 4008908:	1007883a 	mov	r3,r2
 400890c:	00bff804 	movi	r2,-32
 4008910:	1884703a 	and	r2,r3,r2
 4008914:	10800614 	ori	r2,r2,24
 4008918:	e0bffc05 	stb	r2,-16(fp)
			#endif
		}

		alt_avalon_spi_command(
 400891c:	e0bfff0b 	ldhu	r2,-4(fp)
			SPI_0_BASE, 0,      // SPI_0 base address, slave address
			3, cmd,            // Write length, write data pointer
			len, buf,       // Read data, read buffer pointer
			0                   // Flags
		);
 4008920:	e13ffb84 	addi	r4,fp,-18
 4008924:	d8000215 	stw	zero,8(sp)
 4008928:	e0fffe17 	ldw	r3,-8(fp)
 400892c:	d8c00115 	stw	r3,4(sp)
 4008930:	d8800015 	stw	r2,0(sp)
 4008934:	200f883a 	mov	r7,r4
 4008938:	018000c4 	movi	r6,3
 400893c:	000b883a 	mov	r5,zero
 4008940:	01020034 	movhi	r4,2048
 4008944:	21142804 	addi	r4,r4,20640
 4008948:	401a1980 	call	401a198 <alt_avalon_spi_command>
	}
	return len;
 400894c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 4008950:	e037883a 	mov	sp,fp
 4008954:	dfc00117 	ldw	ra,4(sp)
 4008958:	df000017 	ldw	fp,0(sp)
 400895c:	dec00204 	addi	sp,sp,8
 4008960:	f800283a 	ret

04008964 <_ZN10W5100Class9execCmdSnEh7SockCMD>:

void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd)
{
 4008964:	defffc04 	addi	sp,sp,-16
 4008968:	dfc00315 	stw	ra,12(sp)
 400896c:	df000215 	stw	fp,8(sp)
 4008970:	df000204 	addi	fp,sp,8
 4008974:	2005883a 	mov	r2,r4
 4008978:	e17fff15 	stw	r5,-4(fp)
 400897c:	e0bffe05 	stb	r2,-8(fp)
	// Send command to socket
	writeSnCR(s, _cmd);
 4008980:	e0fffe03 	ldbu	r3,-8(fp)
 4008984:	e0bfff17 	ldw	r2,-4(fp)
 4008988:	10803fcc 	andi	r2,r2,255
 400898c:	100b883a 	mov	r5,r2
 4008990:	1809883a 	mov	r4,r3
 4008994:	4008bfc0 	call	4008bfc <_ZN10W5100Class9writeSnCREhh>
	// Wait for command to complete
	while (readSnCR(s)) ;
 4008998:	e0bffe03 	ldbu	r2,-8(fp)
 400899c:	1009883a 	mov	r4,r2
 40089a0:	4008c4c0 	call	4008c4c <_ZN10W5100Class8readSnCREh>
 40089a4:	10803fcc 	andi	r2,r2,255
 40089a8:	1004c03a 	cmpne	r2,r2,zero
 40089ac:	10803fcc 	andi	r2,r2,255
 40089b0:	10000126 	beq	r2,zero,40089b8 <_ZN10W5100Class9execCmdSnEh7SockCMD+0x54>
 40089b4:	003ff806 	br	4008998 <__alt_data_end+0xfc008998>
}
 40089b8:	0001883a 	nop
 40089bc:	e037883a 	mov	sp,fp
 40089c0:	dfc00117 	ldw	ra,4(sp)
 40089c4:	df000017 	ldw	fp,0(sp)
 40089c8:	dec00204 	addi	sp,sp,8
 40089cc:	f800283a 	ret

040089d0 <_Z41__static_initialization_and_destruction_0ii>:
 40089d0:	defffb04 	addi	sp,sp,-20
 40089d4:	dfc00415 	stw	ra,16(sp)
 40089d8:	df000315 	stw	fp,12(sp)
 40089dc:	df000304 	addi	fp,sp,12
 40089e0:	e13ffe15 	stw	r4,-8(fp)
 40089e4:	e17fff15 	stw	r5,-4(fp)
 40089e8:	e0bffe17 	ldw	r2,-8(fp)
 40089ec:	10800058 	cmpnei	r2,r2,1
 40089f0:	1000091e 	bne	r2,zero,4008a18 <_Z41__static_initialization_and_destruction_0ii+0x48>
 40089f4:	e0ffff17 	ldw	r3,-4(fp)
 40089f8:	00bfffd4 	movui	r2,65535
 40089fc:	1880061e 	bne	r3,r2,4008a18 <_Z41__static_initialization_and_destruction_0ii+0x48>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 4008a00:	d8000015 	stw	zero,0(sp)
 4008a04:	000f883a 	mov	r7,zero
 4008a08:	000d883a 	mov	r6,zero
 4008a0c:	000b883a 	mov	r5,zero
 4008a10:	d112d904 	addi	r4,gp,19300
 4008a14:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
 4008a18:	0001883a 	nop
 4008a1c:	e037883a 	mov	sp,fp
 4008a20:	dfc00117 	ldw	ra,4(sp)
 4008a24:	df000017 	ldw	fp,0(sp)
 4008a28:	dec00204 	addi	sp,sp,8
 4008a2c:	f800283a 	ret

04008a30 <_GLOBAL__sub_I__ZN10W5100Class4chipE>:
 4008a30:	defffe04 	addi	sp,sp,-8
 4008a34:	dfc00115 	stw	ra,4(sp)
 4008a38:	df000015 	stw	fp,0(sp)
 4008a3c:	d839883a 	mov	fp,sp
 4008a40:	017fffd4 	movui	r5,65535
 4008a44:	01000044 	movi	r4,1
 4008a48:	40089d00 	call	40089d0 <_Z41__static_initialization_and_destruction_0ii>
 4008a4c:	e037883a 	mov	sp,fp
 4008a50:	dfc00117 	ldw	ra,4(sp)
 4008a54:	df000017 	ldw	fp,0(sp)
 4008a58:	dec00204 	addi	sp,sp,8
 4008a5c:	f800283a 	ret

04008a60 <_ZN10W5100Class7writeMREh>:
    return read(address, _buff, size);            \
  }
  static W5100Linkstatus getLinkStatus();

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
 4008a60:	defffd04 	addi	sp,sp,-12
 4008a64:	dfc00215 	stw	ra,8(sp)
 4008a68:	df000115 	stw	fp,4(sp)
 4008a6c:	df000104 	addi	fp,sp,4
 4008a70:	2005883a 	mov	r2,r4
 4008a74:	e0bfff05 	stb	r2,-4(fp)
 4008a78:	e0bfff03 	ldbu	r2,-4(fp)
 4008a7c:	100b883a 	mov	r5,r2
 4008a80:	0009883a 	mov	r4,zero
 4008a84:	4003ed40 	call	4003ed4 <_ZN10W5100Class5writeEth>
 4008a88:	0001883a 	nop
 4008a8c:	e037883a 	mov	sp,fp
 4008a90:	dfc00117 	ldw	ra,4(sp)
 4008a94:	df000017 	ldw	fp,0(sp)
 4008a98:	dec00204 	addi	sp,sp,8
 4008a9c:	f800283a 	ret

04008aa0 <_ZN10W5100Class6readMREv>:
 4008aa0:	defffe04 	addi	sp,sp,-8
 4008aa4:	dfc00115 	stw	ra,4(sp)
 4008aa8:	df000015 	stw	fp,0(sp)
 4008aac:	d839883a 	mov	fp,sp
 4008ab0:	0009883a 	mov	r4,zero
 4008ab4:	40075880 	call	4007588 <_ZN10W5100Class4readEt>
 4008ab8:	e037883a 	mov	sp,fp
 4008abc:	dfc00117 	ldw	ra,4(sp)
 4008ac0:	df000017 	ldw	fp,0(sp)
 4008ac4:	dec00204 	addi	sp,sp,8
 4008ac8:	f800283a 	ret

04008acc <_ZN10W5100Class9writeRMSREh>:
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size (W5100 only)
 4008acc:	defffd04 	addi	sp,sp,-12
 4008ad0:	dfc00215 	stw	ra,8(sp)
 4008ad4:	df000115 	stw	fp,4(sp)
 4008ad8:	df000104 	addi	fp,sp,4
 4008adc:	2005883a 	mov	r2,r4
 4008ae0:	e0bfff05 	stb	r2,-4(fp)
 4008ae4:	e0bfff03 	ldbu	r2,-4(fp)
 4008ae8:	100b883a 	mov	r5,r2
 4008aec:	01000684 	movi	r4,26
 4008af0:	4003ed40 	call	4003ed4 <_ZN10W5100Class5writeEth>
 4008af4:	0001883a 	nop
 4008af8:	e037883a 	mov	sp,fp
 4008afc:	dfc00117 	ldw	ra,4(sp)
 4008b00:	df000017 	ldw	fp,0(sp)
 4008b04:	dec00204 	addi	sp,sp,8
 4008b08:	f800283a 	ret

04008b0c <_ZN10W5100Class9writeTMSREh>:
  __GP_REGISTER8 (TMSR,   0x001B);    // Transmit memory size (W5100 only)
 4008b0c:	defffd04 	addi	sp,sp,-12
 4008b10:	dfc00215 	stw	ra,8(sp)
 4008b14:	df000115 	stw	fp,4(sp)
 4008b18:	df000104 	addi	fp,sp,4
 4008b1c:	2005883a 	mov	r2,r4
 4008b20:	e0bfff05 	stb	r2,-4(fp)
 4008b24:	e0bfff03 	ldbu	r2,-4(fp)
 4008b28:	100b883a 	mov	r5,r2
 4008b2c:	010006c4 	movi	r4,27
 4008b30:	4003ed40 	call	4003ed4 <_ZN10W5100Class5writeEth>
 4008b34:	0001883a 	nop
 4008b38:	e037883a 	mov	sp,fp
 4008b3c:	dfc00117 	ldw	ra,4(sp)
 4008b40:	df000017 	ldw	fp,0(sp)
 4008b44:	dec00204 	addi	sp,sp,8
 4008b48:	f800283a 	ret

04008b4c <_ZN10W5100Class18readVERSIONR_W5200Ev>:
  __GP_REGISTER8 (PATR,   0x001C);    // Authentication type address in PPPoE mode
  __GP_REGISTER8 (PTIMER, 0x0028);    // PPP LCP Request Timer
  __GP_REGISTER8 (PMAGIC, 0x0029);    // PPP LCP Magic Number
  __GP_REGISTER_N(UIPR,   0x002A, 4); // Unreachable IP address in UDP mode (W5100 only)
  __GP_REGISTER16(UPORT,  0x002E);    // Unreachable Port address in UDP mode (W5100 only)
  __GP_REGISTER8 (VERSIONR_W5200,0x001F);   // Chip Version Register (W5200 only)
 4008b4c:	defffe04 	addi	sp,sp,-8
 4008b50:	dfc00115 	stw	ra,4(sp)
 4008b54:	df000015 	stw	fp,0(sp)
 4008b58:	d839883a 	mov	fp,sp
 4008b5c:	010007c4 	movi	r4,31
 4008b60:	40075880 	call	4007588 <_ZN10W5100Class4readEt>
 4008b64:	e037883a 	mov	sp,fp
 4008b68:	dfc00117 	ldw	ra,4(sp)
 4008b6c:	df000017 	ldw	fp,0(sp)
 4008b70:	dec00204 	addi	sp,sp,8
 4008b74:	f800283a 	ret

04008b78 <_ZN10W5100Class18readVERSIONR_W5500Ev>:
  __GP_REGISTER8 (VERSIONR_W5500,0x0039);   // Chip Version Register (W5500 only)
 4008b78:	defffe04 	addi	sp,sp,-8
 4008b7c:	dfc00115 	stw	ra,4(sp)
 4008b80:	df000015 	stw	fp,0(sp)
 4008b84:	d839883a 	mov	fp,sp
 4008b88:	01000e44 	movi	r4,57
 4008b8c:	40075880 	call	4007588 <_ZN10W5100Class4readEt>
 4008b90:	e037883a 	mov	sp,fp
 4008b94:	dfc00117 	ldw	ra,4(sp)
 4008b98:	df000017 	ldw	fp,0(sp)
 4008b9c:	dec00204 	addi	sp,sp,8
 4008ba0:	f800283a 	ret

04008ba4 <_ZN10W5100Class17readPSTATUS_W5200Ev>:
  __GP_REGISTER8 (PSTATUS_W5200,     0x0035);    // PHY Status
 4008ba4:	defffe04 	addi	sp,sp,-8
 4008ba8:	dfc00115 	stw	ra,4(sp)
 4008bac:	df000015 	stw	fp,0(sp)
 4008bb0:	d839883a 	mov	fp,sp
 4008bb4:	01000d44 	movi	r4,53
 4008bb8:	40075880 	call	4007588 <_ZN10W5100Class4readEt>
 4008bbc:	e037883a 	mov	sp,fp
 4008bc0:	dfc00117 	ldw	ra,4(sp)
 4008bc4:	df000017 	ldw	fp,0(sp)
 4008bc8:	dec00204 	addi	sp,sp,8
 4008bcc:	f800283a 	ret

04008bd0 <_ZN10W5100Class17readPHYCFGR_W5500Ev>:
  __GP_REGISTER8 (PHYCFGR_W5500,     0x002E);    // PHY Configuration register, default: 10111xxx
 4008bd0:	defffe04 	addi	sp,sp,-8
 4008bd4:	dfc00115 	stw	ra,4(sp)
 4008bd8:	df000015 	stw	fp,0(sp)
 4008bdc:	d839883a 	mov	fp,sp
 4008be0:	01000b84 	movi	r4,46
 4008be4:	40075880 	call	4007588 <_ZN10W5100Class4readEt>
 4008be8:	e037883a 	mov	sp,fp
 4008bec:	dfc00117 	ldw	ra,4(sp)
 4008bf0:	df000017 	ldw	fp,0(sp)
 4008bf4:	dec00204 	addi	sp,sp,8
 4008bf8:	f800283a 	ret

04008bfc <_ZN10W5100Class9writeSnCREhh>:
    return readSn(_s, address, _buff, size);                 \
  }

public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
 4008bfc:	defffc04 	addi	sp,sp,-16
 4008c00:	dfc00315 	stw	ra,12(sp)
 4008c04:	df000215 	stw	fp,8(sp)
 4008c08:	df000204 	addi	fp,sp,8
 4008c0c:	2007883a 	mov	r3,r4
 4008c10:	2805883a 	mov	r2,r5
 4008c14:	e0fffe05 	stb	r3,-8(fp)
 4008c18:	e0bfff05 	stb	r2,-4(fp)
 4008c1c:	e0bffe03 	ldbu	r2,-8(fp)
 4008c20:	e0ffff03 	ldbu	r3,-4(fp)
 4008c24:	180d883a 	mov	r6,r3
 4008c28:	01400044 	movi	r5,1
 4008c2c:	1009883a 	mov	r4,r2
 4008c30:	400762c0 	call	400762c <_ZN10W5100Class7writeSnEhth>
 4008c34:	0001883a 	nop
 4008c38:	e037883a 	mov	sp,fp
 4008c3c:	dfc00117 	ldw	ra,4(sp)
 4008c40:	df000017 	ldw	fp,0(sp)
 4008c44:	dec00204 	addi	sp,sp,8
 4008c48:	f800283a 	ret

04008c4c <_ZN10W5100Class8readSnCREh>:
 4008c4c:	defffd04 	addi	sp,sp,-12
 4008c50:	dfc00215 	stw	ra,8(sp)
 4008c54:	df000115 	stw	fp,4(sp)
 4008c58:	df000104 	addi	fp,sp,4
 4008c5c:	2005883a 	mov	r2,r4
 4008c60:	e0bfff05 	stb	r2,-4(fp)
 4008c64:	e0bfff03 	ldbu	r2,-4(fp)
 4008c68:	01400044 	movi	r5,1
 4008c6c:	1009883a 	mov	r4,r2
 4008c70:	40075cc0 	call	40075cc <_ZN10W5100Class6readSnEht>
 4008c74:	e037883a 	mov	sp,fp
 4008c78:	dfc00117 	ldw	ra,4(sp)
 4008c7c:	df000017 	ldw	fp,0(sp)
 4008c80:	dec00204 	addi	sp,sp,8
 4008c84:	f800283a 	ret

04008c88 <_ZN10W5100Class14writeSnRX_SIZEEhh>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER8(SnRX_SIZE,   0x001E)        // RX Memory Size (W5200 only)
 4008c88:	defffc04 	addi	sp,sp,-16
 4008c8c:	dfc00315 	stw	ra,12(sp)
 4008c90:	df000215 	stw	fp,8(sp)
 4008c94:	df000204 	addi	fp,sp,8
 4008c98:	2007883a 	mov	r3,r4
 4008c9c:	2805883a 	mov	r2,r5
 4008ca0:	e0fffe05 	stb	r3,-8(fp)
 4008ca4:	e0bfff05 	stb	r2,-4(fp)
 4008ca8:	e0bffe03 	ldbu	r2,-8(fp)
 4008cac:	e0ffff03 	ldbu	r3,-4(fp)
 4008cb0:	180d883a 	mov	r6,r3
 4008cb4:	01400784 	movi	r5,30
 4008cb8:	1009883a 	mov	r4,r2
 4008cbc:	400762c0 	call	400762c <_ZN10W5100Class7writeSnEhth>
 4008cc0:	0001883a 	nop
 4008cc4:	e037883a 	mov	sp,fp
 4008cc8:	dfc00117 	ldw	ra,4(sp)
 4008ccc:	df000017 	ldw	fp,0(sp)
 4008cd0:	dec00204 	addi	sp,sp,8
 4008cd4:	f800283a 	ret

04008cd8 <_ZN10W5100Class14writeSnTX_SIZEEhh>:
  __SOCKET_REGISTER8(SnTX_SIZE,   0x001F)        // RX Memory Size (W5200 only)
 4008cd8:	defffc04 	addi	sp,sp,-16
 4008cdc:	dfc00315 	stw	ra,12(sp)
 4008ce0:	df000215 	stw	fp,8(sp)
 4008ce4:	df000204 	addi	fp,sp,8
 4008ce8:	2007883a 	mov	r3,r4
 4008cec:	2805883a 	mov	r2,r5
 4008cf0:	e0fffe05 	stb	r3,-8(fp)
 4008cf4:	e0bfff05 	stb	r2,-4(fp)
 4008cf8:	e0bffe03 	ldbu	r2,-8(fp)
 4008cfc:	e0ffff03 	ldbu	r3,-4(fp)
 4008d00:	180d883a 	mov	r6,r3
 4008d04:	014007c4 	movi	r5,31
 4008d08:	1009883a 	mov	r4,r2
 4008d0c:	400762c0 	call	400762c <_ZN10W5100Class7writeSnEhth>
 4008d10:	0001883a 	nop
 4008d14:	e037883a 	mov	sp,fp
 4008d18:	dfc00117 	ldw	ra,4(sp)
 4008d1c:	df000017 	ldw	fp,0(sp)
 4008d20:	dec00204 	addi	sp,sp,8
 4008d24:	f800283a 	ret

04008d28 <main>:

// Enter a MAC address for your controller below.
// Newer Ethernet shields have a MAC address printed on a sticker on the shield
unsigned char mac[] = { 0xA8, 0x61, 0x0A, 0xAE, 0x74, 0xA6 };

int main() {
 4008d28:	deff7a04 	addi	sp,sp,-536
 4008d2c:	dfc08515 	stw	ra,532(sp)
 4008d30:	df008415 	stw	fp,528(sp)
 4008d34:	ddc08315 	stw	r23,524(sp)
 4008d38:	dd808215 	stw	r22,520(sp)
 4008d3c:	dd408115 	stw	r21,516(sp)
 4008d40:	dd008015 	stw	r20,512(sp)
 4008d44:	dcc07f15 	stw	r19,508(sp)
 4008d48:	dc807e15 	stw	r18,504(sp)
 4008d4c:	dc407d15 	stw	r17,500(sp)
 4008d50:	dc007c15 	stw	r16,496(sp)
 4008d54:	df008404 	addi	fp,sp,528
 4008d58:	00810074 	movhi	r2,1025
 4008d5c:	10a72604 	addi	r2,r2,-25448
 4008d60:	e0bff015 	stw	r2,-64(fp)
 4008d64:	008100b4 	movhi	r2,1026
 4008d68:	10adc984 	addi	r2,r2,-18650
 4008d6c:	e0bff115 	stw	r2,-60(fp)
 4008d70:	e0bff204 	addi	r2,fp,-56
 4008d74:	e0ff7c04 	addi	r3,fp,-528
 4008d78:	10c00015 	stw	r3,0(r2)
 4008d7c:	00c10074 	movhi	r3,1025
 4008d80:	18e40f04 	addi	r3,r3,-28612
 4008d84:	10c00115 	stw	r3,4(r2)
 4008d88:	16c00215 	stw	sp,8(r2)
 4008d8c:	e0bfea04 	addi	r2,fp,-88
 4008d90:	1009883a 	mov	r4,r2
 4008d94:	400b40c0 	call	400b40c <_Unwind_SjLj_Register>
		init_color_palette();
 4008d98:	00bfffc4 	movi	r2,-1
 4008d9c:	e0bfeb15 	stw	r2,-84(fp)
 4008da0:	40003100 	call	4000310 <init_color_palette>
		draw_background();
 4008da4:	40005f00 	call	40005f0 <draw_background>
		draw_sample();
 4008da8:	4000e9c0 	call	4000e9c <draw_sample>
	  if (Ethernet.begin(mac) == 0) {
 4008dac:	0183e804 	movi	r6,4000
 4008db0:	017a9814 	movui	r5,60000
 4008db4:	d1200cc4 	addi	r4,gp,-32717
 4008db8:	400320c0 	call	400320c <_ZN13EthernetClass5beginEPhmm>
 4008dbc:	1005003a 	cmpeq	r2,r2,zero
 4008dc0:	10803fcc 	andi	r2,r2,255
 4008dc4:	10001926 	beq	r2,zero,4008e2c <main+0x104>
	    printf("Failed to configure Ethernet using DHCP");
 4008dc8:	010100b4 	movhi	r4,1026
 4008dcc:	2132f504 	addi	r4,r4,-13356
 4008dd0:	400c2d80 	call	400c2d8 <printf>
	    // Check for Ethernet hardware present
	    if (Ethernet.hardwareStatus() == EthernetNoHardware) {
 4008dd4:	40037140 	call	4003714 <_ZN13EthernetClass14hardwareStatusEv>
 4008dd8:	1005003a 	cmpeq	r2,r2,zero
 4008ddc:	10803fcc 	andi	r2,r2,255
 4008de0:	10000826 	beq	r2,zero,4008e04 <main+0xdc>
	      printf("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
 4008de4:	010100b4 	movhi	r4,1026
 4008de8:	2132ff04 	addi	r4,r4,-13316
 4008dec:	400c2d80 	call	400c2d8 <printf>
	      while (true) {
	        usleep (1000); // do nothing, no point running without Ethernet hardware
 4008df0:	00bfffc4 	movi	r2,-1
 4008df4:	e0bfeb15 	stw	r2,-84(fp)
 4008df8:	0100fa04 	movi	r4,1000
 4008dfc:	40194f00 	call	40194f0 <usleep>
	  if (Ethernet.begin(mac) == 0) {
	    printf("Failed to configure Ethernet using DHCP");
	    // Check for Ethernet hardware present
	    if (Ethernet.hardwareStatus() == EthernetNoHardware) {
	      printf("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
	      while (true) {
 4008e00:	003ffb06 	br	4008df0 <__alt_data_end+0xfc008df0>
	        usleep (1000); // do nothing, no point running without Ethernet hardware
	      }
	    }
	    if (Ethernet.linkStatus() == LinkOFF) {
 4008e04:	00bfffc4 	movi	r2,-1
 4008e08:	e0bfeb15 	stw	r2,-84(fp)
 4008e0c:	40036bc0 	call	40036bc <_ZN13EthernetClass10linkStatusEv>
 4008e10:	108000a0 	cmpeqi	r2,r2,2
 4008e14:	10803fcc 	andi	r2,r2,255
 4008e18:	10001026 	beq	r2,zero,4008e5c <main+0x134>
	      printf("Ethernet cable is not connected.");
 4008e1c:	010100b4 	movhi	r4,1026
 4008e20:	21331104 	addi	r4,r4,-13244
 4008e24:	400c2d80 	call	400c2d8 <printf>
 4008e28:	00000c06 	br	4008e5c <main+0x134>
	    }
	  } else {
	    printf("DHCP assigned IP: ");
 4008e2c:	010100b4 	movhi	r4,1026
 4008e30:	00bfffc4 	movi	r2,-1
 4008e34:	e0bfeb15 	stw	r2,-84(fp)
 4008e38:	21331a04 	addi	r4,r4,-13208
 4008e3c:	400c2d80 	call	400c2d8 <printf>
	    Ethernet.localIP().print();
 4008e40:	400389c0 	call	400389c <_ZN13EthernetClass7localIPEv>
 4008e44:	e0bf7f15 	stw	r2,-516(fp)
 4008e48:	e0bf7f04 	addi	r2,fp,-516
 4008e4c:	1009883a 	mov	r4,r2
 4008e50:	4007ee00 	call	4007ee0 <_ZN9IPAddress5printEv>
	    printf("\n");
 4008e54:	01000284 	movi	r4,10
 4008e58:	400c31c0 	call	400c31c <putchar>
	  }

	  EthernetClient client;
 4008e5c:	e0bf8004 	addi	r2,fp,-512
 4008e60:	1009883a 	mov	r4,r2
 4008e64:	40090f80 	call	40090f8 <_ZN14EthernetClientC1Ev>
	  char server[] = "149.56.141.231";    // name address for Google (using DNS)
 4008e68:	008b8e74 	movhi	r2,11833
 4008e6c:	108d0c44 	addi	r2,r2,13361
 4008e70:	e0bf8215 	stw	r2,-504(fp)
 4008e74:	008c4bb4 	movhi	r2,12590
 4008e78:	108d8d44 	addi	r2,r2,13877
 4008e7c:	e0bf8315 	stw	r2,-500(fp)
 4008e80:	008c8bb4 	movhi	r2,12846
 4008e84:	108c4d04 	addi	r2,r2,12596
 4008e88:	e0bf8415 	stw	r2,-496(fp)
 4008e8c:	008c4cc4 	movi	r2,12595
 4008e90:	e0bf850d 	sth	r2,-492(fp)
 4008e94:	e03f8585 	stb	zero,-490(fp)

	  // keep polling the web server
	  while(1) {
		  if (client.connect(server, 80)) {
 4008e98:	e13f8204 	addi	r4,fp,-504
 4008e9c:	e0ff8004 	addi	r3,fp,-512
 4008ea0:	00800044 	movi	r2,1
 4008ea4:	e0bfeb15 	stw	r2,-84(fp)
 4008ea8:	01801404 	movi	r6,80
 4008eac:	200b883a 	mov	r5,r4
 4008eb0:	1809883a 	mov	r4,r3
 4008eb4:	40042000 	call	4004200 <_ZN14EthernetClient7connectEPKct>
 4008eb8:	1004c03a 	cmpne	r2,r2,zero
 4008ebc:	10803fcc 	andi	r2,r2,255
 4008ec0:	10001326 	beq	r2,zero,4008f10 <main+0x1e8>
		  	    //printf("connected to ");
		  	    //client.remoteIP().print();
		  	    //printf("\n");
		  	    // Make a HTTP request:
		  	    client.println("GET / HTTP/1.1");
 4008ec4:	e0bf8004 	addi	r2,fp,-512
 4008ec8:	014100b4 	movhi	r5,1026
 4008ecc:	29731f04 	addi	r5,r5,-13188
 4008ed0:	1009883a 	mov	r4,r2
 4008ed4:	40047a40 	call	40047a4 <_ZN14EthernetClient7printlnEPKc>
		  	    client.println("Host: 149.56.141.231");
 4008ed8:	e0bf8004 	addi	r2,fp,-512
 4008edc:	014100b4 	movhi	r5,1026
 4008ee0:	29732304 	addi	r5,r5,-13172
 4008ee4:	1009883a 	mov	r4,r2
 4008ee8:	40047a40 	call	40047a4 <_ZN14EthernetClient7printlnEPKc>
		  	    client.println("Connection: close");
 4008eec:	e0bf8004 	addi	r2,fp,-512
 4008ef0:	014100b4 	movhi	r5,1026
 4008ef4:	29732904 	addi	r5,r5,-13148
 4008ef8:	1009883a 	mov	r4,r2
 4008efc:	40047a40 	call	40047a4 <_ZN14EthernetClient7printlnEPKc>
		  	    client.println();
 4008f00:	e0bf8004 	addi	r2,fp,-512
 4008f04:	1009883a 	mov	r4,r2
 4008f08:	400475c0 	call	400475c <_ZN14EthernetClient7printlnEv>
 4008f0c:	00000506 	br	4008f24 <main+0x1fc>

		  	  } else {
		  	    // if you didn't get a connection to the server:
		  		  printf("connection failed");
 4008f10:	010100b4 	movhi	r4,1026
 4008f14:	00800044 	movi	r2,1
 4008f18:	e0bfeb15 	stw	r2,-84(fp)
 4008f1c:	21332e04 	addi	r4,r4,-13128
 4008f20:	400c2d80 	call	400c2d8 <printf>
		  	  }
		  	  unsigned long byteCount = 0;
 4008f24:	e03f7c15 	stw	zero,-528(fp)

		  	  while(1) {
		  		  // if there are incoming bytes available
		  		  // from the server, read them and print them:
		  		  int len = client.available();
 4008f28:	e0ff8004 	addi	r3,fp,-512
 4008f2c:	00800044 	movi	r2,1
 4008f30:	e0bfeb15 	stw	r2,-84(fp)
 4008f34:	1809883a 	mov	r4,r3
 4008f38:	40048240 	call	4004824 <_ZN14EthernetClient9availableEv>
 4008f3c:	e0bf7d15 	stw	r2,-524(fp)
		  		  uint8_t buffer[400];
		  		  if (len > 0) {
 4008f40:	e0bf7d17 	ldw	r2,-524(fp)
 4008f44:	0080120e 	bge	zero,r2,4008f90 <main+0x268>

		  		    //printf("Original len: %d", len);
		  		    if (len > 400) len = 400;
 4008f48:	e0bf7d17 	ldw	r2,-524(fp)
 4008f4c:	10806450 	cmplti	r2,r2,401
 4008f50:	1000021e 	bne	r2,zero,4008f5c <main+0x234>
 4008f54:	00806404 	movi	r2,400
 4008f58:	e0bf7d15 	stw	r2,-524(fp)
		  		    client.read(buffer, len);
 4008f5c:	e17f7d17 	ldw	r5,-524(fp)
 4008f60:	e13f85c4 	addi	r4,fp,-489
 4008f64:	e0ff8004 	addi	r3,fp,-512
 4008f68:	00800044 	movi	r2,1
 4008f6c:	e0bfeb15 	stw	r2,-84(fp)
 4008f70:	280d883a 	mov	r6,r5
 4008f74:	200b883a 	mov	r5,r4
 4008f78:	1809883a 	mov	r4,r3
 4008f7c:	40048800 	call	4004880 <_ZN14EthernetClient4readEPhj>
//		  		    for (int i = 0; i < len; ++i) {
//		  		      printf("%c", buffer[i]); // show in the serial monitor (slows some boards)
//		  		    }
		  		    byteCount = byteCount + len;
 4008f80:	e0bf7d17 	ldw	r2,-524(fp)
 4008f84:	e0ff7c17 	ldw	r3,-528(fp)
 4008f88:	1885883a 	add	r2,r3,r2
 4008f8c:	e0bf7c15 	stw	r2,-528(fp)
		  		  }

		  		  // if the server's disconnected, stop the client:
		  		  if (!client.connected()) {
 4008f90:	e0ff8004 	addi	r3,fp,-512
 4008f94:	00800044 	movi	r2,1
 4008f98:	e0bfeb15 	stw	r2,-84(fp)
 4008f9c:	1809883a 	mov	r4,r3
 4008fa0:	4004b680 	call	4004b68 <_ZN14EthernetClient9connectedEv>
 4008fa4:	10803fcc 	andi	r2,r2,255
 4008fa8:	1005003a 	cmpeq	r2,r2,zero
 4008fac:	10803fcc 	andi	r2,r2,255
 4008fb0:	103fdd26 	beq	r2,zero,4008f28 <__alt_data_end+0xfc008f28>
//		  		    printf("Received ");
//		  		    printf("%u", byteCount);
//		  		    printf(" bytes");
//		  		    printf("\n");

		  			char* start = (char*) buffer;
 4008fb4:	e0bf85c4 	addi	r2,fp,-489
 4008fb8:	e0bf7e15 	stw	r2,-520(fp)

		  			while(!isDiscord(++start));
 4008fbc:	e0bf7e17 	ldw	r2,-520(fp)
 4008fc0:	10800044 	addi	r2,r2,1
 4008fc4:	e0bf7e15 	stw	r2,-520(fp)
 4008fc8:	00800044 	movi	r2,1
 4008fcc:	e0bfeb15 	stw	r2,-84(fp)
 4008fd0:	e13f7e17 	ldw	r4,-520(fp)
 4008fd4:	40010dc0 	call	40010dc <isDiscord>
 4008fd8:	1005003a 	cmpeq	r2,r2,zero
 4008fdc:	10803fcc 	andi	r2,r2,255
 4008fe0:	10000126 	beq	r2,zero,4008fe8 <main+0x2c0>
 4008fe4:	003ff506 	br	4008fbc <__alt_data_end+0xfc008fbc>
		  			start += 16;
 4008fe8:	e0bf7e17 	ldw	r2,-520(fp)
 4008fec:	10800404 	addi	r2,r2,16
 4008ff0:	e0bf7e15 	stw	r2,-520(fp)
		  			buffer[len] = '\0';
 4008ff4:	e0ff85c4 	addi	r3,fp,-489
 4008ff8:	e0bf7d17 	ldw	r2,-524(fp)
 4008ffc:	1885883a 	add	r2,r3,r2
 4009000:	10000005 	stb	zero,0(r2)
		  			//start += 16;
		  			printf(start);
 4009004:	00800044 	movi	r2,1
 4009008:	e0bfeb15 	stw	r2,-84(fp)
 400900c:	e13f7e17 	ldw	r4,-520(fp)
 4009010:	400c2d80 	call	400c2d8 <printf>

		  			draw_string(MESSAGE_X_MARGIN, 100, start, &fonts[MESSAGE_FONT]);
 4009014:	01c100f4 	movhi	r7,1027
 4009018:	39e01004 	addi	r7,r7,-32704
 400901c:	e1bf7e17 	ldw	r6,-520(fp)
 4009020:	01401904 	movi	r5,100
 4009024:	01002504 	movi	r4,148
 4009028:	40008880 	call	4000888 <draw_string>

		  			usleep (100000);
 400902c:	010000b4 	movhi	r4,2
 4009030:	2121a804 	addi	r4,r4,-31072
 4009034:	40194f00 	call	40194f0 <usleep>

	  EthernetClient client;
	  char server[] = "149.56.141.231";    // name address for Google (using DNS)

	  // keep polling the web server
	  while(1) {
 4009038:	003f9706 	br	4008e98 <__alt_data_end+0xfc008e98>
 400903c:	e7008404 	addi	fp,fp,528
 4009040:	e0bfec17 	ldw	r2,-80(fp)
 4009044:	e0bff715 	stw	r2,-36(fp)
	    printf("DHCP assigned IP: ");
	    Ethernet.localIP().print();
	    printf("\n");
	  }

	  EthernetClient client;
 4009048:	e0bf8004 	addi	r2,fp,-512
 400904c:	1009883a 	mov	r4,r2
 4009050:	4004f1c0 	call	4004f1c <_ZN14EthernetClientD1Ev>
 4009054:	e0fff717 	ldw	r3,-36(fp)
 4009058:	00bfffc4 	movi	r2,-1
 400905c:	e0bfeb15 	stw	r2,-84(fp)
 4009060:	1809883a 	mov	r4,r3
 4009064:	400b6080 	call	400b608 <_Unwind_SjLj_Resume>

04009068 <_Z41__static_initialization_and_destruction_0ii>:
		  		    break;
		  		  }
		  }
	  }

}
 4009068:	defffb04 	addi	sp,sp,-20
 400906c:	dfc00415 	stw	ra,16(sp)
 4009070:	df000315 	stw	fp,12(sp)
 4009074:	df000304 	addi	fp,sp,12
 4009078:	e13ffe15 	stw	r4,-8(fp)
 400907c:	e17fff15 	stw	r5,-4(fp)
 4009080:	e0bffe17 	ldw	r2,-8(fp)
 4009084:	10800058 	cmpnei	r2,r2,1
 4009088:	1000091e 	bne	r2,zero,40090b0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 400908c:	e0ffff17 	ldw	r3,-4(fp)
 4009090:	00bfffd4 	movui	r2,65535
 4009094:	1880061e 	bne	r3,r2,40090b0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 4009098:	d8000015 	stw	zero,0(sp)
 400909c:	000f883a 	mov	r7,zero
 40090a0:	000d883a 	mov	r6,zero
 40090a4:	000b883a 	mov	r5,zero
 40090a8:	d112db04 	addi	r4,gp,19308
 40090ac:	4007cc80 	call	4007cc8 <_ZN9IPAddressC1Ehhhh>
 40090b0:	0001883a 	nop
 40090b4:	e037883a 	mov	sp,fp
 40090b8:	dfc00117 	ldw	ra,4(sp)
 40090bc:	df000017 	ldw	fp,0(sp)
 40090c0:	dec00204 	addi	sp,sp,8
 40090c4:	f800283a 	ret

040090c8 <_GLOBAL__sub_I_mac>:
 40090c8:	defffe04 	addi	sp,sp,-8
 40090cc:	dfc00115 	stw	ra,4(sp)
 40090d0:	df000015 	stw	fp,0(sp)
 40090d4:	d839883a 	mov	fp,sp
 40090d8:	017fffd4 	movui	r5,65535
 40090dc:	01000044 	movi	r4,1
 40090e0:	40090680 	call	4009068 <_Z41__static_initialization_and_destruction_0ii>
 40090e4:	e037883a 	mov	sp,fp
 40090e8:	dfc00117 	ldw	ra,4(sp)
 40090ec:	df000017 	ldw	fp,0(sp)
 40090f0:	dec00204 	addi	sp,sp,8
 40090f4:	f800283a 	ret

040090f8 <_ZN14EthernetClientC1Ev>:



class EthernetClient : public Client {
public:
	EthernetClient() : _sockindex(MAX_SOCK_NUM), _timeout(1000) { }
 40090f8:	defffd04 	addi	sp,sp,-12
 40090fc:	dfc00215 	stw	ra,8(sp)
 4009100:	df000115 	stw	fp,4(sp)
 4009104:	df000104 	addi	fp,sp,4
 4009108:	e13fff15 	stw	r4,-4(fp)
 400910c:	e0bfff17 	ldw	r2,-4(fp)
 4009110:	1009883a 	mov	r4,r2
 4009114:	40059100 	call	4005910 <_ZN6ClientC1Ev>
 4009118:	008100b4 	movhi	r2,1026
 400911c:	10b28a04 	addi	r2,r2,-13784
 4009120:	e0ffff17 	ldw	r3,-4(fp)
 4009124:	18800015 	stw	r2,0(r3)
 4009128:	e0bfff17 	ldw	r2,-4(fp)
 400912c:	00c00204 	movi	r3,8
 4009130:	10c00105 	stb	r3,4(r2)
 4009134:	e0bfff17 	ldw	r2,-4(fp)
 4009138:	00c0fa04 	movi	r3,1000
 400913c:	10c0018d 	sth	r3,6(r2)
 4009140:	0001883a 	nop
 4009144:	e037883a 	mov	sp,fp
 4009148:	dfc00117 	ldw	ra,4(sp)
 400914c:	df000017 	ldw	fp,0(sp)
 4009150:	dec00204 	addi	sp,sp,8
 4009154:	f800283a 	ret

04009158 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 4009158:	008100b4 	movhi	r2,1026
 400915c:	10b34204 	addi	r2,r2,-13048
 4009160:	20800015 	stw	r2,0(r4)
 4009164:	400a8f81 	jmpi	400a8f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

04009168 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 4009168:	defffe04 	addi	sp,sp,-8
 400916c:	008100b4 	movhi	r2,1026
 4009170:	dc000015 	stw	r16,0(sp)
 4009174:	dfc00115 	stw	ra,4(sp)
 4009178:	10b34204 	addi	r2,r2,-13048
 400917c:	20800015 	stw	r2,0(r4)
 4009180:	2021883a 	mov	r16,r4
 4009184:	400a8f80 	call	400a8f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 4009188:	8009883a 	mov	r4,r16
 400918c:	dfc00117 	ldw	ra,4(sp)
 4009190:	dc000017 	ldw	r16,0(sp)
 4009194:	dec00204 	addi	sp,sp,8
 4009198:	400a4c81 	jmpi	400a4c8 <_ZdlPv>

0400919c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 400919c:	defff504 	addi	sp,sp,-44
 40091a0:	dc000115 	stw	r16,4(sp)
 40091a4:	38800117 	ldw	r2,4(r7)
 40091a8:	24000117 	ldw	r16,4(r4)
 40091ac:	df000915 	stw	fp,36(sp)
 40091b0:	ddc00815 	stw	r23,32(sp)
 40091b4:	dd800715 	stw	r22,28(sp)
 40091b8:	dcc00415 	stw	r19,16(sp)
 40091bc:	dc800315 	stw	r18,12(sp)
 40091c0:	dc400215 	stw	r17,8(sp)
 40091c4:	dfc00a15 	stw	ra,40(sp)
 40091c8:	dd400615 	stw	r21,24(sp)
 40091cc:	dd000515 	stw	r20,20(sp)
 40091d0:	2823883a 	mov	r17,r5
 40091d4:	3039883a 	mov	fp,r6
 40091d8:	dcc00b17 	ldw	r19,44(sp)
 40091dc:	ddc00c17 	ldw	r23,48(sp)
 40091e0:	dd800d17 	ldw	r22,52(sp)
 40091e4:	dc800e17 	ldw	r18,56(sp)
 40091e8:	80800b26 	beq	r16,r2,4009218 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 40091ec:	80c00007 	ldb	r3,0(r16)
 40091f0:	2029883a 	mov	r20,r4
 40091f4:	01000a84 	movi	r4,42
 40091f8:	382b883a 	mov	r21,r7
 40091fc:	19001a26 	beq	r3,r4,4009268 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 4009200:	100b883a 	mov	r5,r2
 4009204:	8009883a 	mov	r4,r16
 4009208:	d8c00015 	stw	r3,0(sp)
 400920c:	400c7600 	call	400c760 <strcmp>
 4009210:	d8c00017 	ldw	r3,0(sp)
 4009214:	1000141e 	bne	r2,zero,4009268 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 4009218:	94c00015 	stw	r19,0(r18)
 400921c:	97000115 	stw	fp,4(r18)
 4009220:	88002816 	blt	r17,zero,40092c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 4009224:	9c63883a 	add	r17,r19,r17
 4009228:	b4403226 	beq	r22,r17,40092f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 400922c:	00800044 	movi	r2,1
 4009230:	90800315 	stw	r2,12(r18)
 4009234:	0005883a 	mov	r2,zero
 4009238:	dfc00a17 	ldw	ra,40(sp)
 400923c:	df000917 	ldw	fp,36(sp)
 4009240:	ddc00817 	ldw	r23,32(sp)
 4009244:	dd800717 	ldw	r22,28(sp)
 4009248:	dd400617 	ldw	r21,24(sp)
 400924c:	dd000517 	ldw	r20,20(sp)
 4009250:	dcc00417 	ldw	r19,16(sp)
 4009254:	dc800317 	ldw	r18,12(sp)
 4009258:	dc400217 	ldw	r17,8(sp)
 400925c:	dc000117 	ldw	r16,4(sp)
 4009260:	dec00b04 	addi	sp,sp,44
 4009264:	f800283a 	ret
 4009268:	9d801926 	beq	r19,r22,40092d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 400926c:	a1000217 	ldw	r4,8(r20)
 4009270:	a80f883a 	mov	r7,r21
 4009274:	e00d883a 	mov	r6,fp
 4009278:	20800017 	ldw	r2,0(r4)
 400927c:	dc800e15 	stw	r18,56(sp)
 4009280:	dd800d15 	stw	r22,52(sp)
 4009284:	ddc00c15 	stw	r23,48(sp)
 4009288:	dcc00b15 	stw	r19,44(sp)
 400928c:	10800717 	ldw	r2,28(r2)
 4009290:	880b883a 	mov	r5,r17
 4009294:	dfc00a17 	ldw	ra,40(sp)
 4009298:	df000917 	ldw	fp,36(sp)
 400929c:	ddc00817 	ldw	r23,32(sp)
 40092a0:	dd800717 	ldw	r22,28(sp)
 40092a4:	dd400617 	ldw	r21,24(sp)
 40092a8:	dd000517 	ldw	r20,20(sp)
 40092ac:	dcc00417 	ldw	r19,16(sp)
 40092b0:	dc800317 	ldw	r18,12(sp)
 40092b4:	dc400217 	ldw	r17,8(sp)
 40092b8:	dc000117 	ldw	r16,4(sp)
 40092bc:	dec00b04 	addi	sp,sp,44
 40092c0:	1000683a 	jmp	r2
 40092c4:	00bfff84 	movi	r2,-2
 40092c8:	88bfda1e 	bne	r17,r2,4009234 <__alt_data_end+0xfc009234>
 40092cc:	003fd706 	br	400922c <__alt_data_end+0xfc00922c>
 40092d0:	b9400117 	ldw	r5,4(r23)
 40092d4:	81400526 	beq	r16,r5,40092ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 40092d8:	00800a84 	movi	r2,42
 40092dc:	18bfe326 	beq	r3,r2,400926c <__alt_data_end+0xfc00926c>
 40092e0:	8009883a 	mov	r4,r16
 40092e4:	400c7600 	call	400c760 <strcmp>
 40092e8:	103fe01e 	bne	r2,zero,400926c <__alt_data_end+0xfc00926c>
 40092ec:	97000215 	stw	fp,8(r18)
 40092f0:	003fd006 	br	4009234 <__alt_data_end+0xfc009234>
 40092f4:	00800184 	movi	r2,6
 40092f8:	003fcd06 	br	4009230 <__alt_data_end+0xfc009230>

040092fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 40092fc:	defffa04 	addi	sp,sp,-24
 4009300:	dc000215 	stw	r16,8(sp)
 4009304:	dc000617 	ldw	r16,24(sp)
 4009308:	dc800415 	stw	r18,16(sp)
 400930c:	dc400315 	stw	r17,12(sp)
 4009310:	dfc00515 	stw	ra,20(sp)
 4009314:	2023883a 	mov	r17,r4
 4009318:	2825883a 	mov	r18,r5
 400931c:	81800b26 	beq	r16,r6,400934c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 4009320:	89000217 	ldw	r4,8(r17)
 4009324:	900b883a 	mov	r5,r18
 4009328:	20800017 	ldw	r2,0(r4)
 400932c:	dc000615 	stw	r16,24(sp)
 4009330:	10800817 	ldw	r2,32(r2)
 4009334:	dfc00517 	ldw	ra,20(sp)
 4009338:	dc800417 	ldw	r18,16(sp)
 400933c:	dc400317 	ldw	r17,12(sp)
 4009340:	dc000217 	ldw	r16,8(sp)
 4009344:	dec00604 	addi	sp,sp,24
 4009348:	1000683a 	jmp	r2
 400934c:	21000117 	ldw	r4,4(r4)
 4009350:	39400117 	ldw	r5,4(r7)
 4009354:	21400926 	beq	r4,r5,400937c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 4009358:	20c00007 	ldb	r3,0(r4)
 400935c:	00800a84 	movi	r2,42
 4009360:	18bfef26 	beq	r3,r2,4009320 <__alt_data_end+0xfc009320>
 4009364:	d9800015 	stw	r6,0(sp)
 4009368:	d9c00115 	stw	r7,4(sp)
 400936c:	400c7600 	call	400c760 <strcmp>
 4009370:	d9800017 	ldw	r6,0(sp)
 4009374:	d9c00117 	ldw	r7,4(sp)
 4009378:	103fe91e 	bne	r2,zero,4009320 <__alt_data_end+0xfc009320>
 400937c:	00800184 	movi	r2,6
 4009380:	dfc00517 	ldw	ra,20(sp)
 4009384:	dc800417 	ldw	r18,16(sp)
 4009388:	dc400317 	ldw	r17,12(sp)
 400938c:	dc000217 	ldw	r16,8(sp)
 4009390:	dec00604 	addi	sp,sp,24
 4009394:	f800283a 	ret

04009398 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 4009398:	defffb04 	addi	sp,sp,-20
 400939c:	dcc00315 	stw	r19,12(sp)
 40093a0:	dc800215 	stw	r18,8(sp)
 40093a4:	dc400115 	stw	r17,4(sp)
 40093a8:	dc000015 	stw	r16,0(sp)
 40093ac:	dfc00415 	stw	ra,16(sp)
 40093b0:	2027883a 	mov	r19,r4
 40093b4:	2821883a 	mov	r16,r5
 40093b8:	3023883a 	mov	r17,r6
 40093bc:	3825883a 	mov	r18,r7
 40093c0:	400a93c0 	call	400a93c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 40093c4:	10c03fcc 	andi	r3,r2,255
 40093c8:	18000726 	beq	r3,zero,40093e8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 40093cc:	dfc00417 	ldw	ra,16(sp)
 40093d0:	dcc00317 	ldw	r19,12(sp)
 40093d4:	dc800217 	ldw	r18,8(sp)
 40093d8:	dc400117 	ldw	r17,4(sp)
 40093dc:	dc000017 	ldw	r16,0(sp)
 40093e0:	dec00504 	addi	sp,sp,20
 40093e4:	f800283a 	ret
 40093e8:	99000217 	ldw	r4,8(r19)
 40093ec:	900f883a 	mov	r7,r18
 40093f0:	880d883a 	mov	r6,r17
 40093f4:	20800017 	ldw	r2,0(r4)
 40093f8:	800b883a 	mov	r5,r16
 40093fc:	10800617 	ldw	r2,24(r2)
 4009400:	dfc00417 	ldw	ra,16(sp)
 4009404:	dcc00317 	ldw	r19,12(sp)
 4009408:	dc800217 	ldw	r18,8(sp)
 400940c:	dc400117 	ldw	r17,4(sp)
 4009410:	dc000017 	ldw	r16,0(sp)
 4009414:	dec00504 	addi	sp,sp,20
 4009418:	1000683a 	jmp	r2

0400941c <_ZNSt9type_infoD1Ev>:
 400941c:	f800283a 	ret

04009420 <_ZNKSt9type_info14__is_pointer_pEv>:
 4009420:	0005883a 	mov	r2,zero
 4009424:	f800283a 	ret

04009428 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 4009428:	0005883a 	mov	r2,zero
 400942c:	f800283a 	ret

04009430 <_ZNSt9type_infoD0Ev>:
 4009430:	400a4c81 	jmpi	400a4c8 <_ZdlPv>

04009434 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 4009434:	21000117 	ldw	r4,4(r4)
 4009438:	29400117 	ldw	r5,4(r5)
 400943c:	21400c26 	beq	r4,r5,4009470 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 4009440:	20c00007 	ldb	r3,0(r4)
 4009444:	00800a84 	movi	r2,42
 4009448:	18800726 	beq	r3,r2,4009468 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 400944c:	deffff04 	addi	sp,sp,-4
 4009450:	dfc00015 	stw	ra,0(sp)
 4009454:	400c7600 	call	400c760 <strcmp>
 4009458:	1005003a 	cmpeq	r2,r2,zero
 400945c:	dfc00017 	ldw	ra,0(sp)
 4009460:	dec00104 	addi	sp,sp,4
 4009464:	f800283a 	ret
 4009468:	0005883a 	mov	r2,zero
 400946c:	f800283a 	ret
 4009470:	00800044 	movi	r2,1
 4009474:	f800283a 	ret

04009478 <_ZL21size_of_encoded_valueh>:
 4009478:	deffff04 	addi	sp,sp,-4
 400947c:	dfc00015 	stw	ra,0(sp)
 4009480:	20c03fcc 	andi	r3,r4,255
 4009484:	00803fc4 	movi	r2,255
 4009488:	18802026 	beq	r3,r2,400950c <_ZL21size_of_encoded_valueh+0x94>
 400948c:	210001cc 	andi	r4,r4,7
 4009490:	00800144 	movi	r2,5
 4009494:	11001c36 	bltu	r2,r4,4009508 <_ZL21size_of_encoded_valueh+0x90>
 4009498:	200890ba 	slli	r4,r4,2
 400949c:	00810074 	movhi	r2,1025
 40094a0:	10a52c04 	addi	r2,r2,-27472
 40094a4:	2089883a 	add	r4,r4,r2
 40094a8:	20800017 	ldw	r2,0(r4)
 40094ac:	1000683a 	jmp	r2
 40094b0:	040094c8 	cmpgei	r16,zero,595
 40094b4:	04009508 	cmpgei	r16,zero,596
 40094b8:	040094d8 	cmpnei	r16,zero,595
 40094bc:	040094c8 	cmpgei	r16,zero,595
 40094c0:	040094f8 	rdprs	r16,zero,595
 40094c4:	040094e8 	cmpgeui	r16,zero,595
 40094c8:	00800104 	movi	r2,4
 40094cc:	dfc00017 	ldw	ra,0(sp)
 40094d0:	dec00104 	addi	sp,sp,4
 40094d4:	f800283a 	ret
 40094d8:	00800084 	movi	r2,2
 40094dc:	dfc00017 	ldw	ra,0(sp)
 40094e0:	dec00104 	addi	sp,sp,4
 40094e4:	f800283a 	ret
 40094e8:	00800044 	movi	r2,1
 40094ec:	dfc00017 	ldw	ra,0(sp)
 40094f0:	dec00104 	addi	sp,sp,4
 40094f4:	f800283a 	ret
 40094f8:	00800204 	movi	r2,8
 40094fc:	dfc00017 	ldw	ra,0(sp)
 4009500:	dec00104 	addi	sp,sp,4
 4009504:	f800283a 	ret
 4009508:	400b7240 	call	400b724 <abort>
 400950c:	0005883a 	mov	r2,zero
 4009510:	dfc00017 	ldw	ra,0(sp)
 4009514:	dec00104 	addi	sp,sp,4
 4009518:	f800283a 	ret

0400951c <_ZL28read_encoded_value_with_basehjPKhPj>:
 400951c:	deffff04 	addi	sp,sp,-4
 4009520:	dfc00015 	stw	ra,0(sp)
 4009524:	20c03fcc 	andi	r3,r4,255
 4009528:	00801404 	movi	r2,80
 400952c:	18807326 	beq	r3,r2,40096fc <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
 4009530:	20c003cc 	andi	r3,r4,15
 4009534:	00800304 	movi	r2,12
 4009538:	10c06f36 	bltu	r2,r3,40096f8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
 400953c:	180690ba 	slli	r3,r3,2
 4009540:	02010074 	movhi	r8,1025
 4009544:	42255504 	addi	r8,r8,-27308
 4009548:	1a07883a 	add	r3,r3,r8
 400954c:	18800017 	ldw	r2,0(r3)
 4009550:	1000683a 	jmp	r2
 4009554:	04009588 	cmpgei	r16,zero,598
 4009558:	040096a4 	muli	r16,zero,602
 400955c:	040096e0 	cmpeqi	r16,zero,603
 4009560:	04009588 	cmpgei	r16,zero,598
 4009564:	040095ec 	andhi	r16,zero,599
 4009568:	04009640 	call	400964 <__alt_mem_sdram-0x3bff69c>
 400956c:	040096f8 	rdprs	r16,zero,603
 4009570:	040096f8 	rdprs	r16,zero,603
 4009574:	040096f8 	rdprs	r16,zero,603
 4009578:	0400964c 	andi	r16,zero,601
 400957c:	0400961c 	xori	r16,zero,600
 4009580:	04009588 	cmpgei	r16,zero,598
 4009584:	040095ec 	andhi	r16,zero,599
 4009588:	30800043 	ldbu	r2,1(r6)
 400958c:	30c00083 	ldbu	r3,2(r6)
 4009590:	324000c3 	ldbu	r9,3(r6)
 4009594:	32000003 	ldbu	r8,0(r6)
 4009598:	1004923a 	slli	r2,r2,8
 400959c:	1806943a 	slli	r3,r3,16
 40095a0:	4812963a 	slli	r9,r9,24
 40095a4:	1204b03a 	or	r2,r2,r8
 40095a8:	1884b03a 	or	r2,r3,r2
 40095ac:	4886b03a 	or	r3,r9,r2
 40095b0:	30800104 	addi	r2,r6,4
 40095b4:	18000926 	beq	r3,zero,40095dc <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 40095b8:	22001c0c 	andi	r8,r4,112
 40095bc:	02400404 	movi	r9,16
 40095c0:	42405726 	beq	r8,r9,4009720 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
 40095c4:	21003fcc 	andi	r4,r4,255
 40095c8:	2100201c 	xori	r4,r4,128
 40095cc:	213fe004 	addi	r4,r4,-128
 40095d0:	1947883a 	add	r3,r3,r5
 40095d4:	2000010e 	bge	r4,zero,40095dc <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 40095d8:	18c00017 	ldw	r3,0(r3)
 40095dc:	38c00015 	stw	r3,0(r7)
 40095e0:	dfc00017 	ldw	ra,0(sp)
 40095e4:	dec00104 	addi	sp,sp,4
 40095e8:	f800283a 	ret
 40095ec:	30800043 	ldbu	r2,1(r6)
 40095f0:	30c00083 	ldbu	r3,2(r6)
 40095f4:	324000c3 	ldbu	r9,3(r6)
 40095f8:	32000003 	ldbu	r8,0(r6)
 40095fc:	1004923a 	slli	r2,r2,8
 4009600:	1806943a 	slli	r3,r3,16
 4009604:	4812963a 	slli	r9,r9,24
 4009608:	1204b03a 	or	r2,r2,r8
 400960c:	1884b03a 	or	r2,r3,r2
 4009610:	4886b03a 	or	r3,r9,r2
 4009614:	30800204 	addi	r2,r6,8
 4009618:	003fe606 	br	40095b4 <__alt_data_end+0xfc0095b4>
 400961c:	30c00043 	ldbu	r3,1(r6)
 4009620:	32000003 	ldbu	r8,0(r6)
 4009624:	30800084 	addi	r2,r6,2
 4009628:	1806923a 	slli	r3,r3,8
 400962c:	1a06b03a 	or	r3,r3,r8
 4009630:	18ffffcc 	andi	r3,r3,65535
 4009634:	18e0001c 	xori	r3,r3,32768
 4009638:	18e00004 	addi	r3,r3,-32768
 400963c:	003fdd06 	br	40095b4 <__alt_data_end+0xfc0095b4>
 4009640:	30c00003 	ldbu	r3,0(r6)
 4009644:	30800044 	addi	r2,r6,1
 4009648:	003fda06 	br	40095b4 <__alt_data_end+0xfc0095b4>
 400964c:	3017883a 	mov	r11,r6
 4009650:	0007883a 	mov	r3,zero
 4009654:	0013883a 	mov	r9,zero
 4009658:	5a800003 	ldbu	r10,0(r11)
 400965c:	58800044 	addi	r2,r11,1
 4009660:	1017883a 	mov	r11,r2
 4009664:	52001fcc 	andi	r8,r10,127
 4009668:	4250983a 	sll	r8,r8,r9
 400966c:	53003fcc 	andi	r12,r10,255
 4009670:	6300201c 	xori	r12,r12,128
 4009674:	633fe004 	addi	r12,r12,-128
 4009678:	1a06b03a 	or	r3,r3,r8
 400967c:	4a4001c4 	addi	r9,r9,7
 4009680:	603ff516 	blt	r12,zero,4009658 <__alt_data_end+0xfc009658>
 4009684:	020007c4 	movi	r8,31
 4009688:	427fca36 	bltu	r8,r9,40095b4 <__alt_data_end+0xfc0095b4>
 400968c:	5280100c 	andi	r10,r10,64
 4009690:	503fc826 	beq	r10,zero,40095b4 <__alt_data_end+0xfc0095b4>
 4009694:	023fffc4 	movi	r8,-1
 4009698:	4252983a 	sll	r9,r8,r9
 400969c:	1a46b03a 	or	r3,r3,r9
 40096a0:	003fc506 	br	40095b8 <__alt_data_end+0xfc0095b8>
 40096a4:	3017883a 	mov	r11,r6
 40096a8:	0007883a 	mov	r3,zero
 40096ac:	0015883a 	mov	r10,zero
 40096b0:	5a000003 	ldbu	r8,0(r11)
 40096b4:	58800044 	addi	r2,r11,1
 40096b8:	1017883a 	mov	r11,r2
 40096bc:	42401fcc 	andi	r9,r8,127
 40096c0:	4a92983a 	sll	r9,r9,r10
 40096c4:	42003fcc 	andi	r8,r8,255
 40096c8:	4200201c 	xori	r8,r8,128
 40096cc:	423fe004 	addi	r8,r8,-128
 40096d0:	1a46b03a 	or	r3,r3,r9
 40096d4:	528001c4 	addi	r10,r10,7
 40096d8:	403ff516 	blt	r8,zero,40096b0 <__alt_data_end+0xfc0096b0>
 40096dc:	003fb506 	br	40095b4 <__alt_data_end+0xfc0095b4>
 40096e0:	30c00043 	ldbu	r3,1(r6)
 40096e4:	32000003 	ldbu	r8,0(r6)
 40096e8:	30800084 	addi	r2,r6,2
 40096ec:	1806923a 	slli	r3,r3,8
 40096f0:	1a06b03a 	or	r3,r3,r8
 40096f4:	003faf06 	br	40095b4 <__alt_data_end+0xfc0095b4>
 40096f8:	400b7240 	call	400b724 <abort>
 40096fc:	308000c4 	addi	r2,r6,3
 4009700:	00ffff04 	movi	r3,-4
 4009704:	10c4703a 	and	r2,r2,r3
 4009708:	10c00017 	ldw	r3,0(r2)
 400970c:	10800104 	addi	r2,r2,4
 4009710:	38c00015 	stw	r3,0(r7)
 4009714:	dfc00017 	ldw	ra,0(sp)
 4009718:	dec00104 	addi	sp,sp,4
 400971c:	f800283a 	ret
 4009720:	300b883a 	mov	r5,r6
 4009724:	003fa706 	br	40095c4 <__alt_data_end+0xfc0095c4>

04009728 <_ZL15get_ttype_entryP16lsda_header_infom>:
 4009728:	defffc04 	addi	sp,sp,-16
 400972c:	dfc00315 	stw	ra,12(sp)
 4009730:	dc000215 	stw	r16,8(sp)
 4009734:	2021883a 	mov	r16,r4
 4009738:	21000503 	ldbu	r4,20(r4)
 400973c:	d9400115 	stw	r5,4(sp)
 4009740:	40094780 	call	4009478 <_ZL21size_of_encoded_valueh>
 4009744:	d9400117 	ldw	r5,4(sp)
 4009748:	1009883a 	mov	r4,r2
 400974c:	400b1dc0 	call	400b1dc <__mulsi3>
 4009750:	81800317 	ldw	r6,12(r16)
 4009754:	81400217 	ldw	r5,8(r16)
 4009758:	81000503 	ldbu	r4,20(r16)
 400975c:	d80f883a 	mov	r7,sp
 4009760:	308dc83a 	sub	r6,r6,r2
 4009764:	400951c0 	call	400951c <_ZL28read_encoded_value_with_basehjPKhPj>
 4009768:	d8800017 	ldw	r2,0(sp)
 400976c:	dfc00317 	ldw	ra,12(sp)
 4009770:	dc000217 	ldw	r16,8(sp)
 4009774:	dec00404 	addi	sp,sp,16
 4009778:	f800283a 	ret

0400977c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 400977c:	deffff04 	addi	sp,sp,-4
 4009780:	dfc00015 	stw	ra,0(sp)
 4009784:	20c03fcc 	andi	r3,r4,255
 4009788:	00803fc4 	movi	r2,255
 400978c:	18800e26 	beq	r3,r2,40097c8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 4009790:	20801c0c 	andi	r2,r4,112
 4009794:	00c00804 	movi	r3,32
 4009798:	10c01726 	beq	r2,r3,40097f8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
 400979c:	18800e2e 	bgeu	r3,r2,40097d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
 40097a0:	00c01004 	movi	r3,64
 40097a4:	10c01026 	beq	r2,r3,40097e8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
 40097a8:	00c01404 	movi	r3,80
 40097ac:	10c00626 	beq	r2,r3,40097c8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 40097b0:	00c00c04 	movi	r3,48
 40097b4:	10c00b1e 	bne	r2,r3,40097e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 40097b8:	2809883a 	mov	r4,r5
 40097bc:	dfc00017 	ldw	ra,0(sp)
 40097c0:	dec00104 	addi	sp,sp,4
 40097c4:	400b4e41 	jmpi	400b4e4 <_Unwind_GetDataRelBase>
 40097c8:	0005883a 	mov	r2,zero
 40097cc:	dfc00017 	ldw	ra,0(sp)
 40097d0:	dec00104 	addi	sp,sp,4
 40097d4:	f800283a 	ret
 40097d8:	103ffb26 	beq	r2,zero,40097c8 <__alt_data_end+0xfc0097c8>
 40097dc:	00c00404 	movi	r3,16
 40097e0:	10fff926 	beq	r2,r3,40097c8 <__alt_data_end+0xfc0097c8>
 40097e4:	400b7240 	call	400b724 <abort>
 40097e8:	2809883a 	mov	r4,r5
 40097ec:	dfc00017 	ldw	ra,0(sp)
 40097f0:	dec00104 	addi	sp,sp,4
 40097f4:	400b4d41 	jmpi	400b4d4 <_Unwind_GetRegionStart>
 40097f8:	2809883a 	mov	r4,r5
 40097fc:	dfc00017 	ldw	ra,0(sp)
 4009800:	dec00104 	addi	sp,sp,4
 4009804:	400b4ec1 	jmpi	400b4ec <_Unwind_GetTextRelBase>

04009808 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 4009808:	defffb04 	addi	sp,sp,-20
 400980c:	dcc00315 	stw	r19,12(sp)
 4009810:	dc400115 	stw	r17,4(sp)
 4009814:	dc000015 	stw	r16,0(sp)
 4009818:	dfc00415 	stw	ra,16(sp)
 400981c:	dc800215 	stw	r18,8(sp)
 4009820:	2027883a 	mov	r19,r4
 4009824:	2821883a 	mov	r16,r5
 4009828:	3023883a 	mov	r17,r6
 400982c:	20003f26 	beq	r4,zero,400992c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 4009830:	400b4d40 	call	400b4d4 <_Unwind_GetRegionStart>
 4009834:	88800015 	stw	r2,0(r17)
 4009838:	84800003 	ldbu	r18,0(r16)
 400983c:	00c03fc4 	movi	r3,255
 4009840:	84000044 	addi	r16,r16,1
 4009844:	90c03726 	beq	r18,r3,4009924 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 4009848:	980b883a 	mov	r5,r19
 400984c:	9009883a 	mov	r4,r18
 4009850:	400977c0 	call	400977c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009854:	800d883a 	mov	r6,r16
 4009858:	89c00104 	addi	r7,r17,4
 400985c:	100b883a 	mov	r5,r2
 4009860:	9009883a 	mov	r4,r18
 4009864:	400951c0 	call	400951c <_ZL28read_encoded_value_with_basehjPKhPj>
 4009868:	1021883a 	mov	r16,r2
 400986c:	80c00003 	ldbu	r3,0(r16)
 4009870:	01003fc4 	movi	r4,255
 4009874:	80800044 	addi	r2,r16,1
 4009878:	88c00505 	stb	r3,20(r17)
 400987c:	18c03fcc 	andi	r3,r3,255
 4009880:	19002c26 	beq	r3,r4,4009934 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 4009884:	100f883a 	mov	r7,r2
 4009888:	000d883a 	mov	r6,zero
 400988c:	000b883a 	mov	r5,zero
 4009890:	38c00003 	ldbu	r3,0(r7)
 4009894:	10800044 	addi	r2,r2,1
 4009898:	100f883a 	mov	r7,r2
 400989c:	19001fcc 	andi	r4,r3,127
 40098a0:	2148983a 	sll	r4,r4,r5
 40098a4:	18c03fcc 	andi	r3,r3,255
 40098a8:	18c0201c 	xori	r3,r3,128
 40098ac:	18ffe004 	addi	r3,r3,-128
 40098b0:	310cb03a 	or	r6,r6,r4
 40098b4:	294001c4 	addi	r5,r5,7
 40098b8:	183ff516 	blt	r3,zero,4009890 <__alt_data_end+0xfc009890>
 40098bc:	118d883a 	add	r6,r2,r6
 40098c0:	89800315 	stw	r6,12(r17)
 40098c4:	10c00003 	ldbu	r3,0(r2)
 40098c8:	000d883a 	mov	r6,zero
 40098cc:	10800044 	addi	r2,r2,1
 40098d0:	88c00545 	stb	r3,21(r17)
 40098d4:	000b883a 	mov	r5,zero
 40098d8:	10c00003 	ldbu	r3,0(r2)
 40098dc:	10800044 	addi	r2,r2,1
 40098e0:	19001fcc 	andi	r4,r3,127
 40098e4:	2148983a 	sll	r4,r4,r5
 40098e8:	18c03fcc 	andi	r3,r3,255
 40098ec:	18c0201c 	xori	r3,r3,128
 40098f0:	18ffe004 	addi	r3,r3,-128
 40098f4:	310cb03a 	or	r6,r6,r4
 40098f8:	294001c4 	addi	r5,r5,7
 40098fc:	183ff616 	blt	r3,zero,40098d8 <__alt_data_end+0xfc0098d8>
 4009900:	118d883a 	add	r6,r2,r6
 4009904:	89800415 	stw	r6,16(r17)
 4009908:	dfc00417 	ldw	ra,16(sp)
 400990c:	dcc00317 	ldw	r19,12(sp)
 4009910:	dc800217 	ldw	r18,8(sp)
 4009914:	dc400117 	ldw	r17,4(sp)
 4009918:	dc000017 	ldw	r16,0(sp)
 400991c:	dec00504 	addi	sp,sp,20
 4009920:	f800283a 	ret
 4009924:	88800115 	stw	r2,4(r17)
 4009928:	003fd006 	br	400986c <__alt_data_end+0xfc00986c>
 400992c:	0005883a 	mov	r2,zero
 4009930:	003fc006 	br	4009834 <__alt_data_end+0xfc009834>
 4009934:	88000315 	stw	zero,12(r17)
 4009938:	003fe206 	br	40098c4 <__alt_data_end+0xfc0098c4>

0400993c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 400993c:	28800017 	ldw	r2,0(r5)
 4009940:	30c00017 	ldw	r3,0(r6)
 4009944:	defffb04 	addi	sp,sp,-20
 4009948:	10800217 	ldw	r2,8(r2)
 400994c:	dc400315 	stw	r17,12(sp)
 4009950:	dc000215 	stw	r16,8(sp)
 4009954:	d9400115 	stw	r5,4(sp)
 4009958:	dfc00415 	stw	ra,16(sp)
 400995c:	2021883a 	mov	r16,r4
 4009960:	d8c00015 	stw	r3,0(sp)
 4009964:	2809883a 	mov	r4,r5
 4009968:	3023883a 	mov	r17,r6
 400996c:	103ee83a 	callr	r2
 4009970:	10803fcc 	andi	r2,r2,255
 4009974:	d9400117 	ldw	r5,4(sp)
 4009978:	10000326 	beq	r2,zero,4009988 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
 400997c:	d8800017 	ldw	r2,0(sp)
 4009980:	10800017 	ldw	r2,0(r2)
 4009984:	d8800015 	stw	r2,0(sp)
 4009988:	80800017 	ldw	r2,0(r16)
 400998c:	01c00044 	movi	r7,1
 4009990:	d80d883a 	mov	r6,sp
 4009994:	10800417 	ldw	r2,16(r2)
 4009998:	8009883a 	mov	r4,r16
 400999c:	103ee83a 	callr	r2
 40099a0:	10c03fcc 	andi	r3,r2,255
 40099a4:	18000226 	beq	r3,zero,40099b0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
 40099a8:	d8c00017 	ldw	r3,0(sp)
 40099ac:	88c00015 	stw	r3,0(r17)
 40099b0:	dfc00417 	ldw	ra,16(sp)
 40099b4:	dc400317 	ldw	r17,12(sp)
 40099b8:	dc000217 	ldw	r16,8(sp)
 40099bc:	dec00504 	addi	sp,sp,20
 40099c0:	f800283a 	ret

040099c4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 40099c4:	defff304 	addi	sp,sp,-52
 40099c8:	dc800615 	stw	r18,24(sp)
 40099cc:	3825d23a 	srai	r18,r7,8
 40099d0:	dd000815 	stw	r20,32(sp)
 40099d4:	dcc00715 	stw	r19,28(sp)
 40099d8:	dfc00c15 	stw	ra,48(sp)
 40099dc:	ddc00b15 	stw	r23,44(sp)
 40099e0:	dd800a15 	stw	r22,40(sp)
 40099e4:	dd400915 	stw	r21,36(sp)
 40099e8:	dc400515 	stw	r17,20(sp)
 40099ec:	dc000415 	stw	r16,16(sp)
 40099f0:	d9400215 	stw	r5,8(sp)
 40099f4:	3827883a 	mov	r19,r7
 40099f8:	2029883a 	mov	r20,r4
 40099fc:	9000010e 	bge	r18,zero,4009a04 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
 4009a00:	04a5c83a 	sub	r18,zero,r18
 4009a04:	000b883a 	mov	r5,zero
 4009a08:	01000144 	movi	r4,5
 4009a0c:	d9800315 	stw	r6,12(sp)
 4009a10:	400977c0 	call	400977c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009a14:	d9800317 	ldw	r6,12(sp)
 4009a18:	d9c00104 	addi	r7,sp,4
 4009a1c:	100b883a 	mov	r5,r2
 4009a20:	01000144 	movi	r4,5
 4009a24:	400951c0 	call	400951c <_ZL28read_encoded_value_with_basehjPKhPj>
 4009a28:	017ffe44 	movi	r5,-7
 4009a2c:	1009883a 	mov	r4,r2
 4009a30:	1021883a 	mov	r16,r2
 4009a34:	400b1dc0 	call	400b1dc <__mulsi3>
 4009a38:	102d883a 	mov	r22,r2
 4009a3c:	0023883a 	mov	r17,zero
 4009a40:	85400003 	ldbu	r21,0(r16)
 4009a44:	8009883a 	mov	r4,r16
 4009a48:	014001c4 	movi	r5,7
 4009a4c:	400b1dc0 	call	400b1dc <__mulsi3>
 4009a50:	a8c01fcc 	andi	r3,r21,127
 4009a54:	1585883a 	add	r2,r2,r22
 4009a58:	1886983a 	sll	r3,r3,r2
 4009a5c:	ad403fcc 	andi	r21,r21,255
 4009a60:	ad40201c 	xori	r21,r21,128
 4009a64:	ad7fe004 	addi	r21,r21,-128
 4009a68:	84000044 	addi	r16,r16,1
 4009a6c:	88e2b03a 	or	r17,r17,r3
 4009a70:	a83ff316 	blt	r21,zero,4009a40 <__alt_data_end+0xfc009a40>
 4009a74:	8461883a 	add	r16,r16,r17
 4009a78:	017ffe44 	movi	r5,-7
 4009a7c:	8009883a 	mov	r4,r16
 4009a80:	400b1dc0 	call	400b1dc <__mulsi3>
 4009a84:	102d883a 	mov	r22,r2
 4009a88:	002b883a 	mov	r21,zero
 4009a8c:	84400003 	ldbu	r17,0(r16)
 4009a90:	8009883a 	mov	r4,r16
 4009a94:	014001c4 	movi	r5,7
 4009a98:	400b1dc0 	call	400b1dc <__mulsi3>
 4009a9c:	88c01fcc 	andi	r3,r17,127
 4009aa0:	1585883a 	add	r2,r2,r22
 4009aa4:	1886983a 	sll	r3,r3,r2
 4009aa8:	8c403fcc 	andi	r17,r17,255
 4009aac:	8c40201c 	xori	r17,r17,128
 4009ab0:	8c7fe004 	addi	r17,r17,-128
 4009ab4:	84000044 	addi	r16,r16,1
 4009ab8:	a8eab03a 	or	r21,r21,r3
 4009abc:	883ff316 	blt	r17,zero,4009a8c <__alt_data_end+0xfc009a8c>
 4009ac0:	94403fcc 	andi	r17,r18,255
 4009ac4:	8c7fffc4 	addi	r17,r17,-1
 4009ac8:	8463883a 	add	r17,r16,r17
 4009acc:	ad4000c4 	addi	r21,r21,3
 4009ad0:	00bfff04 	movi	r2,-4
 4009ad4:	ac21883a 	add	r16,r21,r16
 4009ad8:	017ffe44 	movi	r5,-7
 4009adc:	8809883a 	mov	r4,r17
 4009ae0:	80a0703a 	and	r16,r16,r2
 4009ae4:	400b1dc0 	call	400b1dc <__mulsi3>
 4009ae8:	0025883a 	mov	r18,zero
 4009aec:	102f883a 	mov	r23,r2
 4009af0:	8d800003 	ldbu	r22,0(r17)
 4009af4:	8809883a 	mov	r4,r17
 4009af8:	014001c4 	movi	r5,7
 4009afc:	400b1dc0 	call	400b1dc <__mulsi3>
 4009b00:	b0c01fcc 	andi	r3,r22,127
 4009b04:	15c5883a 	add	r2,r2,r23
 4009b08:	1886983a 	sll	r3,r3,r2
 4009b0c:	b5803fcc 	andi	r22,r22,255
 4009b10:	b580201c 	xori	r22,r22,128
 4009b14:	8d400044 	addi	r21,r17,1
 4009b18:	b5bfe004 	addi	r22,r22,-128
 4009b1c:	90e4b03a 	or	r18,r18,r3
 4009b20:	a823883a 	mov	r17,r21
 4009b24:	b03ff216 	blt	r22,zero,4009af0 <__alt_data_end+0xfc009af0>
 4009b28:	9cc03fcc 	andi	r19,r19,255
 4009b2c:	90002426 	beq	r18,zero,4009bc0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
 4009b30:	9809883a 	mov	r4,r19
 4009b34:	40094780 	call	4009478 <_ZL21size_of_encoded_valueh>
 4009b38:	100b883a 	mov	r5,r2
 4009b3c:	913fffc4 	addi	r4,r18,-1
 4009b40:	400b1dc0 	call	400b1dc <__mulsi3>
 4009b44:	d9400d17 	ldw	r5,52(sp)
 4009b48:	d80f883a 	mov	r7,sp
 4009b4c:	9809883a 	mov	r4,r19
 4009b50:	140d883a 	add	r6,r2,r16
 4009b54:	400951c0 	call	400951c <_ZL28read_encoded_value_with_basehjPKhPj>
 4009b58:	d9000017 	ldw	r4,0(sp)
 4009b5c:	d9800204 	addi	r6,sp,8
 4009b60:	a00b883a 	mov	r5,r20
 4009b64:	400993c0 	call	400993c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 4009b68:	10c03fcc 	andi	r3,r2,255
 4009b6c:	1800151e 	bne	r3,zero,4009bc4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
 4009b70:	a809883a 	mov	r4,r21
 4009b74:	017ffe44 	movi	r5,-7
 4009b78:	400b1dc0 	call	400b1dc <__mulsi3>
 4009b7c:	102d883a 	mov	r22,r2
 4009b80:	a809883a 	mov	r4,r21
 4009b84:	0025883a 	mov	r18,zero
 4009b88:	24400003 	ldbu	r17,0(r4)
 4009b8c:	014001c4 	movi	r5,7
 4009b90:	400b1dc0 	call	400b1dc <__mulsi3>
 4009b94:	88c01fcc 	andi	r3,r17,127
 4009b98:	1585883a 	add	r2,r2,r22
 4009b9c:	1886983a 	sll	r3,r3,r2
 4009ba0:	8c403fcc 	andi	r17,r17,255
 4009ba4:	8c40201c 	xori	r17,r17,128
 4009ba8:	ad400044 	addi	r21,r21,1
 4009bac:	8c7fe004 	addi	r17,r17,-128
 4009bb0:	90e4b03a 	or	r18,r18,r3
 4009bb4:	a809883a 	mov	r4,r21
 4009bb8:	883ff316 	blt	r17,zero,4009b88 <__alt_data_end+0xfc009b88>
 4009bbc:	003fdb06 	br	4009b2c <__alt_data_end+0xfc009b2c>
 4009bc0:	0005883a 	mov	r2,zero
 4009bc4:	dfc00c17 	ldw	ra,48(sp)
 4009bc8:	ddc00b17 	ldw	r23,44(sp)
 4009bcc:	dd800a17 	ldw	r22,40(sp)
 4009bd0:	dd400917 	ldw	r21,36(sp)
 4009bd4:	dd000817 	ldw	r20,32(sp)
 4009bd8:	dcc00717 	ldw	r19,28(sp)
 4009bdc:	dc800617 	ldw	r18,24(sp)
 4009be0:	dc400517 	ldw	r17,20(sp)
 4009be4:	dc000417 	ldw	r16,16(sp)
 4009be8:	dec00d04 	addi	sp,sp,52
 4009bec:	f800283a 	ret

04009bf0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 4009bf0:	defffb04 	addi	sp,sp,-20
 4009bf4:	dc000115 	stw	r16,4(sp)
 4009bf8:	24000317 	ldw	r16,12(r4)
 4009bfc:	01ce303a 	nor	r7,zero,r7
 4009c00:	dc800315 	stw	r18,12(sp)
 4009c04:	dc400215 	stw	r17,8(sp)
 4009c08:	dfc00415 	stw	ra,16(sp)
 4009c0c:	2023883a 	mov	r17,r4
 4009c10:	2825883a 	mov	r18,r5
 4009c14:	d9800015 	stw	r6,0(sp)
 4009c18:	81e1883a 	add	r16,r16,r7
 4009c1c:	800d883a 	mov	r6,r16
 4009c20:	000b883a 	mov	r5,zero
 4009c24:	0009883a 	mov	r4,zero
 4009c28:	30800003 	ldbu	r2,0(r6)
 4009c2c:	84000044 	addi	r16,r16,1
 4009c30:	800d883a 	mov	r6,r16
 4009c34:	10c01fcc 	andi	r3,r2,127
 4009c38:	1906983a 	sll	r3,r3,r4
 4009c3c:	10803fcc 	andi	r2,r2,255
 4009c40:	1080201c 	xori	r2,r2,128
 4009c44:	10bfe004 	addi	r2,r2,-128
 4009c48:	28cab03a 	or	r5,r5,r3
 4009c4c:	210001c4 	addi	r4,r4,7
 4009c50:	103ff516 	blt	r2,zero,4009c28 <__alt_data_end+0xfc009c28>
 4009c54:	28000e26 	beq	r5,zero,4009c90 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 4009c58:	8809883a 	mov	r4,r17
 4009c5c:	40097280 	call	4009728 <_ZL15get_ttype_entryP16lsda_header_infom>
 4009c60:	d80d883a 	mov	r6,sp
 4009c64:	900b883a 	mov	r5,r18
 4009c68:	1009883a 	mov	r4,r2
 4009c6c:	400993c0 	call	400993c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 4009c70:	10c03fcc 	andi	r3,r2,255
 4009c74:	183fe926 	beq	r3,zero,4009c1c <__alt_data_end+0xfc009c1c>
 4009c78:	dfc00417 	ldw	ra,16(sp)
 4009c7c:	dc800317 	ldw	r18,12(sp)
 4009c80:	dc400217 	ldw	r17,8(sp)
 4009c84:	dc000117 	ldw	r16,4(sp)
 4009c88:	dec00504 	addi	sp,sp,20
 4009c8c:	f800283a 	ret
 4009c90:	0005883a 	mov	r2,zero
 4009c94:	003ff806 	br	4009c78 <__alt_data_end+0xfc009c78>

04009c98 <__gxx_personality_sj0>:
 4009c98:	00810074 	movhi	r2,1025
 4009c9c:	deffdd04 	addi	sp,sp,-140
 4009ca0:	10a72604 	addi	r2,r2,-25448
 4009ca4:	d8800e15 	stw	r2,56(sp)
 4009ca8:	008100b4 	movhi	r2,1026
 4009cac:	10adcb04 	addi	r2,r2,-18644
 4009cb0:	d8800f15 	stw	r2,60(sp)
 4009cb4:	00810074 	movhi	r2,1025
 4009cb8:	10a89c04 	addi	r2,r2,-23952
 4009cbc:	d9001515 	stw	r4,84(sp)
 4009cc0:	d9000804 	addi	r4,sp,32
 4009cc4:	d8801115 	stw	r2,68(sp)
 4009cc8:	dfc02215 	stw	ra,136(sp)
 4009ccc:	df002115 	stw	fp,132(sp)
 4009cd0:	dec01015 	stw	sp,64(sp)
 4009cd4:	dec01215 	stw	sp,72(sp)
 4009cd8:	d9401915 	stw	r5,100(sp)
 4009cdc:	d9801615 	stw	r6,88(sp)
 4009ce0:	d9c01715 	stw	r7,92(sp)
 4009ce4:	400b40c0 	call	400b40c <_Unwind_SjLj_Register>
 4009ce8:	d8c01517 	ldw	r3,84(sp)
 4009cec:	d8000715 	stw	zero,28(sp)
 4009cf0:	d8000615 	stw	zero,24(sp)
 4009cf4:	00800044 	movi	r2,1
 4009cf8:	18800926 	beq	r3,r2,4009d20 <__gxx_personality_sj0+0x88>
 4009cfc:	01c000c4 	movi	r7,3
 4009d00:	d9c01515 	stw	r7,84(sp)
 4009d04:	d9000804 	addi	r4,sp,32
 4009d08:	400b4240 	call	400b424 <_Unwind_SjLj_Unregister>
 4009d0c:	d8801517 	ldw	r2,84(sp)
 4009d10:	dfc02217 	ldw	ra,136(sp)
 4009d14:	df002117 	ldw	fp,132(sp)
 4009d18:	dec02304 	addi	sp,sp,140
 4009d1c:	f800283a 	ret
 4009d20:	d9001617 	ldw	r4,88(sp)
 4009d24:	00af3574 	movhi	r2,48341
 4009d28:	d9c01717 	ldw	r7,92(sp)
 4009d2c:	10b54004 	addi	r2,r2,-11008
 4009d30:	00ee2cb4 	movhi	r3,47282
 4009d34:	2085883a 	add	r2,r4,r2
 4009d38:	18eaaf04 	addi	r3,r3,-21828
 4009d3c:	d8801b15 	stw	r2,108(sp)
 4009d40:	38c7883a 	add	r3,r7,r3
 4009d44:	1105803a 	cmpltu	r2,r2,r4
 4009d48:	10c7883a 	add	r3,r2,r3
 4009d4c:	d8c01c15 	stw	r3,112(sp)
 4009d50:	d8c01917 	ldw	r3,100(sp)
 4009d54:	00800184 	movi	r2,6
 4009d58:	18805426 	beq	r3,r2,4009eac <__gxx_personality_sj0+0x214>
 4009d5c:	d9002417 	ldw	r4,144(sp)
 4009d60:	00bfffc4 	movi	r2,-1
 4009d64:	d8800915 	stw	r2,36(sp)
 4009d68:	400b4c80 	call	400b4c8 <_Unwind_GetLanguageSpecificData>
 4009d6c:	d8801a15 	stw	r2,104(sp)
 4009d70:	1000c926 	beq	r2,zero,400a098 <__gxx_personality_sj0+0x400>
 4009d74:	d9002417 	ldw	r4,144(sp)
 4009d78:	d80d883a 	mov	r6,sp
 4009d7c:	100b883a 	mov	r5,r2
 4009d80:	40098080 	call	4009808 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 4009d84:	d9402417 	ldw	r5,144(sp)
 4009d88:	d9000503 	ldbu	r4,20(sp)
 4009d8c:	d8801515 	stw	r2,84(sp)
 4009d90:	400977c0 	call	400977c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009d94:	d9002417 	ldw	r4,144(sp)
 4009d98:	d9400604 	addi	r5,sp,24
 4009d9c:	d8800215 	stw	r2,8(sp)
 4009da0:	400b4980 	call	400b498 <_Unwind_GetIPInfo>
 4009da4:	d8c00617 	ldw	r3,24(sp)
 4009da8:	18006126 	beq	r3,zero,4009f30 <__gxx_personality_sj0+0x298>
 4009dac:	1000ba16 	blt	r2,zero,400a098 <__gxx_personality_sj0+0x400>
 4009db0:	10002f1e 	bne	r2,zero,4009e70 <__gxx_personality_sj0+0x1d8>
 4009db4:	d8001515 	stw	zero,84(sp)
 4009db8:	d8001f15 	stw	zero,124(sp)
 4009dbc:	d8001815 	stw	zero,96(sp)
 4009dc0:	00c00044 	movi	r3,1
 4009dc4:	d9001917 	ldw	r4,100(sp)
 4009dc8:	2080004c 	andi	r2,r4,1
 4009dcc:	1000b51e 	bne	r2,zero,400a0a4 <__gxx_personality_sj0+0x40c>
 4009dd0:	d9001917 	ldw	r4,100(sp)
 4009dd4:	2080020c 	andi	r2,r4,8
 4009dd8:	1000b71e 	bne	r2,zero,400a0b8 <__gxx_personality_sj0+0x420>
 4009ddc:	d9c01c17 	ldw	r7,112(sp)
 4009de0:	3800b826 	beq	r7,zero,400a0c4 <__gxx_personality_sj0+0x42c>
 4009de4:	00800044 	movi	r2,1
 4009de8:	1880b526 	beq	r3,r2,400a0c0 <__gxx_personality_sj0+0x428>
 4009dec:	d9c01517 	ldw	r7,84(sp)
 4009df0:	3800f516 	blt	r7,zero,400a1c8 <__gxx_personality_sj0+0x530>
 4009df4:	d9002417 	ldw	r4,144(sp)
 4009df8:	d9802317 	ldw	r6,140(sp)
 4009dfc:	00bfffc4 	movi	r2,-1
 4009e00:	000b883a 	mov	r5,zero
 4009e04:	d8800915 	stw	r2,36(sp)
 4009e08:	400b46c0 	call	400b46c <_Unwind_SetGR>
 4009e0c:	d9801517 	ldw	r6,84(sp)
 4009e10:	d9002417 	ldw	r4,144(sp)
 4009e14:	01400044 	movi	r5,1
 4009e18:	400b46c0 	call	400b46c <_Unwind_SetGR>
 4009e1c:	d9002417 	ldw	r4,144(sp)
 4009e20:	d9401f17 	ldw	r5,124(sp)
 4009e24:	400b4b80 	call	400b4b8 <_Unwind_SetIP>
 4009e28:	010001c4 	movi	r4,7
 4009e2c:	d9001515 	stw	r4,84(sp)
 4009e30:	003fb406 	br	4009d04 <__alt_data_end+0xfc009d04>
 4009e34:	000f883a 	mov	r7,zero
 4009e38:	000d883a 	mov	r6,zero
 4009e3c:	19000003 	ldbu	r4,0(r3)
 4009e40:	18c00044 	addi	r3,r3,1
 4009e44:	d8c01515 	stw	r3,84(sp)
 4009e48:	21401fcc 	andi	r5,r4,127
 4009e4c:	298a983a 	sll	r5,r5,r6
 4009e50:	21003fcc 	andi	r4,r4,255
 4009e54:	2100201c 	xori	r4,r4,128
 4009e58:	213fe004 	addi	r4,r4,-128
 4009e5c:	394eb03a 	or	r7,r7,r5
 4009e60:	318001c4 	addi	r6,r6,7
 4009e64:	203ff516 	blt	r4,zero,4009e3c <__alt_data_end+0xfc009e3c>
 4009e68:	10bfffc4 	addi	r2,r2,-1
 4009e6c:	10003226 	beq	r2,zero,4009f38 <__gxx_personality_sj0+0x2a0>
 4009e70:	d9c01517 	ldw	r7,84(sp)
 4009e74:	0011883a 	mov	r8,zero
 4009e78:	000d883a 	mov	r6,zero
 4009e7c:	39000003 	ldbu	r4,0(r7)
 4009e80:	38c00044 	addi	r3,r7,1
 4009e84:	180f883a 	mov	r7,r3
 4009e88:	21401fcc 	andi	r5,r4,127
 4009e8c:	298a983a 	sll	r5,r5,r6
 4009e90:	21003fcc 	andi	r4,r4,255
 4009e94:	2100201c 	xori	r4,r4,128
 4009e98:	213fe004 	addi	r4,r4,-128
 4009e9c:	4150b03a 	or	r8,r8,r5
 4009ea0:	318001c4 	addi	r6,r6,7
 4009ea4:	203ff516 	blt	r4,zero,4009e7c <__alt_data_end+0xfc009e7c>
 4009ea8:	003fe206 	br	4009e34 <__alt_data_end+0xfc009e34>
 4009eac:	d9001c17 	ldw	r4,112(sp)
 4009eb0:	203faa1e 	bne	r4,zero,4009d5c <__alt_data_end+0xfc009d5c>
 4009eb4:	d9c01517 	ldw	r7,84(sp)
 4009eb8:	d8801b17 	ldw	r2,108(sp)
 4009ebc:	38bfa736 	bltu	r7,r2,4009d5c <__alt_data_end+0xfc009d5c>
 4009ec0:	d8c02317 	ldw	r3,140(sp)
 4009ec4:	18fffe17 	ldw	r3,-8(r3)
 4009ec8:	d8c01f15 	stw	r3,124(sp)
 4009ecc:	18008226 	beq	r3,zero,400a0d8 <__gxx_personality_sj0+0x440>
 4009ed0:	d9002317 	ldw	r4,140(sp)
 4009ed4:	d9c02317 	ldw	r7,140(sp)
 4009ed8:	213ffb17 	ldw	r4,-20(r4)
 4009edc:	39fffd17 	ldw	r7,-12(r7)
 4009ee0:	d9001515 	stw	r4,84(sp)
 4009ee4:	d9c01a15 	stw	r7,104(sp)
 4009ee8:	d8801517 	ldw	r2,84(sp)
 4009eec:	103fc10e 	bge	r2,zero,4009df4 <__alt_data_end+0xfc009df4>
 4009ef0:	d9002417 	ldw	r4,144(sp)
 4009ef4:	d9401a17 	ldw	r5,104(sp)
 4009ef8:	d80d883a 	mov	r6,sp
 4009efc:	00bfffc4 	movi	r2,-1
 4009f00:	d8800915 	stw	r2,36(sp)
 4009f04:	40098080 	call	4009808 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 4009f08:	d9402417 	ldw	r5,144(sp)
 4009f0c:	d9000503 	ldbu	r4,20(sp)
 4009f10:	400977c0 	call	400977c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009f14:	d9000503 	ldbu	r4,20(sp)
 4009f18:	d9402417 	ldw	r5,144(sp)
 4009f1c:	d8800215 	stw	r2,8(sp)
 4009f20:	400977c0 	call	400977c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009f24:	d8c02317 	ldw	r3,140(sp)
 4009f28:	18bffe15 	stw	r2,-8(r3)
 4009f2c:	003fb106 	br	4009df4 <__alt_data_end+0xfc009df4>
 4009f30:	10bfffc4 	addi	r2,r2,-1
 4009f34:	003f9d06 	br	4009dac <__alt_data_end+0xfc009dac>
 4009f38:	42000044 	addi	r8,r8,1
 4009f3c:	da001f15 	stw	r8,124(sp)
 4009f40:	38005326 	beq	r7,zero,400a090 <__gxx_personality_sj0+0x3f8>
 4009f44:	d8800417 	ldw	r2,16(sp)
 4009f48:	39ffffc4 	addi	r7,r7,-1
 4009f4c:	11c5883a 	add	r2,r2,r7
 4009f50:	d8801815 	stw	r2,96(sp)
 4009f54:	40005026 	beq	r8,zero,400a098 <__gxx_personality_sj0+0x400>
 4009f58:	10007426 	beq	r2,zero,400a12c <__gxx_personality_sj0+0x494>
 4009f5c:	d8801917 	ldw	r2,100(sp)
 4009f60:	1080020c 	andi	r2,r2,8
 4009f64:	d8802015 	stw	r2,128(sp)
 4009f68:	1000a21e 	bne	r2,zero,400a1f4 <__gxx_personality_sj0+0x55c>
 4009f6c:	d8c01c17 	ldw	r3,112(sp)
 4009f70:	1800b026 	beq	r3,zero,400a234 <__gxx_personality_sj0+0x59c>
 4009f74:	01c100f4 	movhi	r7,1027
 4009f78:	39e71504 	addi	r7,r7,-25516
 4009f7c:	d9c01e15 	stw	r7,120(sp)
 4009f80:	d8001d05 	stb	zero,116(sp)
 4009f84:	d8c01817 	ldw	r3,96(sp)
 4009f88:	d8001515 	stw	zero,84(sp)
 4009f8c:	0009883a 	mov	r4,zero
 4009f90:	19400003 	ldbu	r5,0(r3)
 4009f94:	18800044 	addi	r2,r3,1
 4009f98:	d9c01517 	ldw	r7,84(sp)
 4009f9c:	28c01fcc 	andi	r3,r5,127
 4009fa0:	1906983a 	sll	r3,r3,r4
 4009fa4:	29803fcc 	andi	r6,r5,255
 4009fa8:	3180201c 	xori	r6,r6,128
 4009fac:	38ceb03a 	or	r7,r7,r3
 4009fb0:	d8801715 	stw	r2,92(sp)
 4009fb4:	31bfe004 	addi	r6,r6,-128
 4009fb8:	d9c01515 	stw	r7,84(sp)
 4009fbc:	210001c4 	addi	r4,r4,7
 4009fc0:	1007883a 	mov	r3,r2
 4009fc4:	303ff216 	blt	r6,zero,4009f90 <__alt_data_end+0xfc009f90>
 4009fc8:	00c007c4 	movi	r3,31
 4009fcc:	19000836 	bltu	r3,r4,4009ff0 <__gxx_personality_sj0+0x358>
 4009fd0:	2940100c 	andi	r5,r5,64
 4009fd4:	28000626 	beq	r5,zero,4009ff0 <__gxx_personality_sj0+0x358>
 4009fd8:	01c00044 	movi	r7,1
 4009fdc:	3908983a 	sll	r4,r7,r4
 4009fe0:	d8c01517 	ldw	r3,84(sp)
 4009fe4:	0109c83a 	sub	r4,zero,r4
 4009fe8:	1906b03a 	or	r3,r3,r4
 4009fec:	d8c01515 	stw	r3,84(sp)
 4009ff0:	d8001615 	stw	zero,88(sp)
 4009ff4:	0009883a 	mov	r4,zero
 4009ff8:	11400003 	ldbu	r5,0(r2)
 4009ffc:	d9c01617 	ldw	r7,88(sp)
 400a000:	10800044 	addi	r2,r2,1
 400a004:	28c01fcc 	andi	r3,r5,127
 400a008:	1906983a 	sll	r3,r3,r4
 400a00c:	29803fcc 	andi	r6,r5,255
 400a010:	3180201c 	xori	r6,r6,128
 400a014:	38ceb03a 	or	r7,r7,r3
 400a018:	31bfe004 	addi	r6,r6,-128
 400a01c:	d9c01615 	stw	r7,88(sp)
 400a020:	210001c4 	addi	r4,r4,7
 400a024:	303ff416 	blt	r6,zero,4009ff8 <__alt_data_end+0xfc009ff8>
 400a028:	008007c4 	movi	r2,31
 400a02c:	11000736 	bltu	r2,r4,400a04c <__gxx_personality_sj0+0x3b4>
 400a030:	2940100c 	andi	r5,r5,64
 400a034:	28000526 	beq	r5,zero,400a04c <__gxx_personality_sj0+0x3b4>
 400a038:	00c00044 	movi	r3,1
 400a03c:	1908983a 	sll	r4,r3,r4
 400a040:	0109c83a 	sub	r4,zero,r4
 400a044:	390eb03a 	or	r7,r7,r4
 400a048:	d9c01615 	stw	r7,88(sp)
 400a04c:	d9001517 	ldw	r4,84(sp)
 400a050:	20003c26 	beq	r4,zero,400a144 <__gxx_personality_sj0+0x4ac>
 400a054:	01003e0e 	bge	zero,r4,400a150 <__gxx_personality_sj0+0x4b8>
 400a058:	01ffffc4 	movi	r7,-1
 400a05c:	200b883a 	mov	r5,r4
 400a060:	d809883a 	mov	r4,sp
 400a064:	d9c00915 	stw	r7,36(sp)
 400a068:	40097280 	call	4009728 <_ZL15get_ttype_entryP16lsda_header_infom>
 400a06c:	10005f26 	beq	r2,zero,400a1ec <__gxx_personality_sj0+0x554>
 400a070:	d8c01e17 	ldw	r3,120(sp)
 400a074:	1800571e 	bne	r3,zero,400a1d4 <__gxx_personality_sj0+0x53c>
 400a078:	d9001617 	ldw	r4,88(sp)
 400a07c:	20002926 	beq	r4,zero,400a124 <__gxx_personality_sj0+0x48c>
 400a080:	d9c01717 	ldw	r7,92(sp)
 400a084:	390f883a 	add	r7,r7,r4
 400a088:	d9c01815 	stw	r7,96(sp)
 400a08c:	003fbd06 	br	4009f84 <__alt_data_end+0xfc009f84>
 400a090:	d8c01f17 	ldw	r3,124(sp)
 400a094:	1800251e 	bne	r3,zero,400a12c <__gxx_personality_sj0+0x494>
 400a098:	01000204 	movi	r4,8
 400a09c:	d9001515 	stw	r4,84(sp)
 400a0a0:	003f1806 	br	4009d04 <__alt_data_end+0xfc009d04>
 400a0a4:	d8801c17 	ldw	r2,112(sp)
 400a0a8:	10000d26 	beq	r2,zero,400a0e0 <__gxx_personality_sj0+0x448>
 400a0ac:	00800184 	movi	r2,6
 400a0b0:	d8801515 	stw	r2,84(sp)
 400a0b4:	003f1306 	br	4009d04 <__alt_data_end+0xfc009d04>
 400a0b8:	00800044 	movi	r2,1
 400a0bc:	18bf4d1e 	bne	r3,r2,4009df4 <__alt_data_end+0xfc009df4>
 400a0c0:	400abf00 	call	400abf0 <_ZSt9terminatev>
 400a0c4:	d9001b17 	ldw	r4,108(sp)
 400a0c8:	00800044 	movi	r2,1
 400a0cc:	113f4536 	bltu	r2,r4,4009de4 <__alt_data_end+0xfc009de4>
 400a0d0:	00800044 	movi	r2,1
 400a0d4:	18bf841e 	bne	r3,r2,4009ee8 <__alt_data_end+0xfc009ee8>
 400a0d8:	d9002317 	ldw	r4,140(sp)
 400a0dc:	400af3c0 	call	400af3c <__cxa_call_terminate>
 400a0e0:	d8c01b17 	ldw	r3,108(sp)
 400a0e4:	00800044 	movi	r2,1
 400a0e8:	10fff036 	bltu	r2,r3,400a0ac <__alt_data_end+0xfc00a0ac>
 400a0ec:	d9002317 	ldw	r4,140(sp)
 400a0f0:	d8801817 	ldw	r2,96(sp)
 400a0f4:	d9c01517 	ldw	r7,84(sp)
 400a0f8:	d8c01a17 	ldw	r3,104(sp)
 400a0fc:	20bffc15 	stw	r2,-16(r4)
 400a100:	d8800717 	ldw	r2,28(sp)
 400a104:	21fffb15 	stw	r7,-20(r4)
 400a108:	d9c01f17 	ldw	r7,124(sp)
 400a10c:	20bfff15 	stw	r2,-4(r4)
 400a110:	00800184 	movi	r2,6
 400a114:	20fffd15 	stw	r3,-12(r4)
 400a118:	21fffe15 	stw	r7,-8(r4)
 400a11c:	d8801515 	stw	r2,84(sp)
 400a120:	003ef806 	br	4009d04 <__alt_data_end+0xfc009d04>
 400a124:	d8801d03 	ldbu	r2,116(sp)
 400a128:	103fdb26 	beq	r2,zero,400a098 <__alt_data_end+0xfc00a098>
 400a12c:	d8c01917 	ldw	r3,100(sp)
 400a130:	1880004c 	andi	r2,r3,1
 400a134:	103fd81e 	bne	r2,zero,400a098 <__alt_data_end+0xfc00a098>
 400a138:	d8001515 	stw	zero,84(sp)
 400a13c:	00c00084 	movi	r3,2
 400a140:	003f2306 	br	4009dd0 <__alt_data_end+0xfc009dd0>
 400a144:	00c00044 	movi	r3,1
 400a148:	d8c01d05 	stb	r3,116(sp)
 400a14c:	003fca06 	br	400a078 <__alt_data_end+0xfc00a078>
 400a150:	d9001e17 	ldw	r4,120(sp)
 400a154:	20000426 	beq	r4,zero,400a168 <__gxx_personality_sj0+0x4d0>
 400a158:	d9c02017 	ldw	r7,128(sp)
 400a15c:	3800021e 	bne	r7,zero,400a168 <__gxx_personality_sj0+0x4d0>
 400a160:	d8801c17 	ldw	r2,112(sp)
 400a164:	10002726 	beq	r2,zero,400a204 <__gxx_personality_sj0+0x56c>
 400a168:	d8801517 	ldw	r2,84(sp)
 400a16c:	000d883a 	mov	r6,zero
 400a170:	000b883a 	mov	r5,zero
 400a174:	0088303a 	nor	r4,zero,r2
 400a178:	d8800317 	ldw	r2,12(sp)
 400a17c:	1109883a 	add	r4,r2,r4
 400a180:	20800003 	ldbu	r2,0(r4)
 400a184:	21000044 	addi	r4,r4,1
 400a188:	10c01fcc 	andi	r3,r2,127
 400a18c:	1946983a 	sll	r3,r3,r5
 400a190:	10803fcc 	andi	r2,r2,255
 400a194:	1080201c 	xori	r2,r2,128
 400a198:	10bfe004 	addi	r2,r2,-128
 400a19c:	30ccb03a 	or	r6,r6,r3
 400a1a0:	294001c4 	addi	r5,r5,7
 400a1a4:	103ff616 	blt	r2,zero,400a180 <__alt_data_end+0xfc00a180>
 400a1a8:	3005003a 	cmpeq	r2,r6,zero
 400a1ac:	10803fcc 	andi	r2,r2,255
 400a1b0:	103fb126 	beq	r2,zero,400a078 <__alt_data_end+0xfc00a078>
 400a1b4:	d9c01917 	ldw	r7,100(sp)
 400a1b8:	3880004c 	andi	r2,r7,1
 400a1bc:	103fb91e 	bne	r2,zero,400a0a4 <__alt_data_end+0xfc00a0a4>
 400a1c0:	d8802017 	ldw	r2,128(sp)
 400a1c4:	10002d26 	beq	r2,zero,400a27c <__gxx_personality_sj0+0x5e4>
 400a1c8:	00800044 	movi	r2,1
 400a1cc:	d8800915 	stw	r2,36(sp)
 400a1d0:	400ac180 	call	400ac18 <_ZSt10unexpectedv>
 400a1d4:	d9800704 	addi	r6,sp,28
 400a1d8:	180b883a 	mov	r5,r3
 400a1dc:	1009883a 	mov	r4,r2
 400a1e0:	400993c0 	call	400993c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400a1e4:	10803fcc 	andi	r2,r2,255
 400a1e8:	103fa326 	beq	r2,zero,400a078 <__alt_data_end+0xfc00a078>
 400a1ec:	00c000c4 	movi	r3,3
 400a1f0:	003ef406 	br	4009dc4 <__alt_data_end+0xfc009dc4>
 400a1f4:	010100f4 	movhi	r4,1027
 400a1f8:	21271304 	addi	r4,r4,-25524
 400a1fc:	d9001e15 	stw	r4,120(sp)
 400a200:	003f5f06 	br	4009f80 <__alt_data_end+0xfc009f80>
 400a204:	d9001b17 	ldw	r4,108(sp)
 400a208:	00c00044 	movi	r3,1
 400a20c:	193fd636 	bltu	r3,r4,400a168 <__alt_data_end+0xfc00a168>
 400a210:	01ffffc4 	movi	r7,-1
 400a214:	d9c00915 	stw	r7,36(sp)
 400a218:	d9800717 	ldw	r6,28(sp)
 400a21c:	d9c01517 	ldw	r7,84(sp)
 400a220:	d9401e17 	ldw	r5,120(sp)
 400a224:	d809883a 	mov	r4,sp
 400a228:	4009bf00 	call	4009bf0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400a22c:	1080005c 	xori	r2,r2,1
 400a230:	003fde06 	br	400a1ac <__alt_data_end+0xfc00a1ac>
 400a234:	d9001b17 	ldw	r4,108(sp)
 400a238:	00800044 	movi	r2,1
 400a23c:	113f4d36 	bltu	r2,r4,4009f74 <__alt_data_end+0xfc009f74>
 400a240:	d9c02317 	ldw	r7,140(sp)
 400a244:	38800017 	ldw	r2,0(r7)
 400a248:	1080004c 	andi	r2,r2,1
 400a24c:	1000061e 	bne	r2,zero,400a268 <__gxx_personality_sj0+0x5d0>
 400a250:	d8c02317 	ldw	r3,140(sp)
 400a254:	18800504 	addi	r2,r3,20
 400a258:	d8800715 	stw	r2,28(sp)
 400a25c:	10bff017 	ldw	r2,-64(r2)
 400a260:	d8801e15 	stw	r2,120(sp)
 400a264:	003f4606 	br	4009f80 <__alt_data_end+0xfc009f80>
 400a268:	38bff517 	ldw	r2,-44(r7)
 400a26c:	003ffa06 	br	400a258 <__alt_data_end+0xfc00a258>
 400a270:	d9000a17 	ldw	r4,40(sp)
 400a274:	400a6e00 	call	400a6e0 <__cxa_begin_catch>
 400a278:	003f9106 	br	400a0c0 <__alt_data_end+0xfc00a0c0>
 400a27c:	d9c01c17 	ldw	r7,112(sp)
 400a280:	383eda1e 	bne	r7,zero,4009dec <__alt_data_end+0xfc009dec>
 400a284:	d8c01b17 	ldw	r3,108(sp)
 400a288:	00800044 	movi	r2,1
 400a28c:	10fed736 	bltu	r2,r3,4009dec <__alt_data_end+0xfc009dec>
 400a290:	00c000c4 	movi	r3,3
 400a294:	003f8e06 	br	400a0d0 <__alt_data_end+0xfc00a0d0>

0400a298 <__cxa_call_unexpected>:
 400a298:	00810074 	movhi	r2,1025
 400a29c:	deffe604 	addi	sp,sp,-104
 400a2a0:	10a72604 	addi	r2,r2,-25448
 400a2a4:	d8800d15 	stw	r2,52(sp)
 400a2a8:	008100b4 	movhi	r2,1026
 400a2ac:	10adcf04 	addi	r2,r2,-18628
 400a2b0:	d8800e15 	stw	r2,56(sp)
 400a2b4:	d8800104 	addi	r2,sp,4
 400a2b8:	d8800f15 	stw	r2,60(sp)
 400a2bc:	00810074 	movhi	r2,1025
 400a2c0:	10a8c904 	addi	r2,r2,-23772
 400a2c4:	d9001415 	stw	r4,80(sp)
 400a2c8:	d9000704 	addi	r4,sp,28
 400a2cc:	dfc01915 	stw	ra,100(sp)
 400a2d0:	d8801015 	stw	r2,64(sp)
 400a2d4:	df001815 	stw	fp,96(sp)
 400a2d8:	dec01115 	stw	sp,68(sp)
 400a2dc:	400b40c0 	call	400b40c <_Unwind_SjLj_Register>
 400a2e0:	d9001417 	ldw	r4,80(sp)
 400a2e4:	400a6e00 	call	400a6e0 <__cxa_begin_catch>
 400a2e8:	d8c01417 	ldw	r3,80(sp)
 400a2ec:	18bffe17 	ldw	r2,-8(r3)
 400a2f0:	193ff717 	ldw	r4,-36(r3)
 400a2f4:	18fffd17 	ldw	r3,-12(r3)
 400a2f8:	d8800315 	stw	r2,12(sp)
 400a2fc:	d8c01615 	stw	r3,88(sp)
 400a300:	d8c01417 	ldw	r3,80(sp)
 400a304:	18fffb17 	ldw	r3,-20(r3)
 400a308:	d8c01515 	stw	r3,84(sp)
 400a30c:	d8c01417 	ldw	r3,80(sp)
 400a310:	18fff817 	ldw	r3,-32(r3)
 400a314:	d8c01415 	stw	r3,80(sp)
 400a318:	00c00044 	movi	r3,1
 400a31c:	d8c00815 	stw	r3,32(sp)
 400a320:	400ac080 	call	400ac08 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 400a324:	d8c00917 	ldw	r3,36(sp)
 400a328:	d8800817 	ldw	r2,32(sp)
 400a32c:	d8c01715 	stw	r3,92(sp)
 400a330:	10000a26 	beq	r2,zero,400a35c <__cxa_call_unexpected+0xc4>
 400a334:	10bfffc4 	addi	r2,r2,-1
 400a338:	10000126 	beq	r2,zero,400a340 <__cxa_call_unexpected+0xa8>
 400a33c:	003b68fa 	trap	3
 400a340:	d8000815 	stw	zero,32(sp)
 400a344:	400a7940 	call	400a794 <__cxa_end_catch>
 400a348:	400a7940 	call	400a794 <__cxa_end_catch>
 400a34c:	d9001717 	ldw	r4,92(sp)
 400a350:	00bfffc4 	movi	r2,-1
 400a354:	d8800815 	stw	r2,32(sp)
 400a358:	400b6080 	call	400b608 <_Unwind_SjLj_Resume>
 400a35c:	d9001717 	ldw	r4,92(sp)
 400a360:	400a6e00 	call	400a6e0 <__cxa_begin_catch>
 400a364:	400af940 	call	400af94 <__cxa_get_globals_fast>
 400a368:	10800017 	ldw	r2,0(r2)
 400a36c:	10c00b17 	ldw	r3,44(r2)
 400a370:	18c0004c 	andi	r3,r3,1
 400a374:	18001e26 	beq	r3,zero,400a3f0 <__cxa_call_unexpected+0x158>
 400a378:	10800017 	ldw	r2,0(r2)
 400a37c:	d8801715 	stw	r2,92(sp)
 400a380:	d8801517 	ldw	r2,84(sp)
 400a384:	00802b0e 	bge	zero,r2,400a434 <__cxa_call_unexpected+0x19c>
 400a388:	d8c01717 	ldw	r3,92(sp)
 400a38c:	d8800317 	ldw	r2,12(sp)
 400a390:	d9c01517 	ldw	r7,84(sp)
 400a394:	193ff017 	ldw	r4,-64(r3)
 400a398:	d9801617 	ldw	r6,88(sp)
 400a39c:	d8800015 	stw	r2,0(sp)
 400a3a0:	180b883a 	mov	r5,r3
 400a3a4:	00800084 	movi	r2,2
 400a3a8:	d8800815 	stw	r2,32(sp)
 400a3ac:	40099c40 	call	40099c4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400a3b0:	10803fcc 	andi	r2,r2,255
 400a3b4:	10001e1e 	bne	r2,zero,400a430 <__cxa_call_unexpected+0x198>
 400a3b8:	d8800317 	ldw	r2,12(sp)
 400a3bc:	d9c01517 	ldw	r7,84(sp)
 400a3c0:	d9801617 	ldw	r6,88(sp)
 400a3c4:	010100b4 	movhi	r4,1026
 400a3c8:	d8800015 	stw	r2,0(sp)
 400a3cc:	21338f04 	addi	r4,r4,-12740
 400a3d0:	00800084 	movi	r2,2
 400a3d4:	000b883a 	mov	r5,zero
 400a3d8:	d8800815 	stw	r2,32(sp)
 400a3dc:	40099c40 	call	40099c4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400a3e0:	10803fcc 	andi	r2,r2,255
 400a3e4:	1000051e 	bne	r2,zero,400a3fc <__cxa_call_unexpected+0x164>
 400a3e8:	d9001417 	ldw	r4,80(sp)
 400a3ec:	400ab300 	call	400ab30 <_ZN10__cxxabiv111__terminateEPFvvE>
 400a3f0:	10801004 	addi	r2,r2,64
 400a3f4:	d8801715 	stw	r2,92(sp)
 400a3f8:	003fe106 	br	400a380 <__alt_data_end+0xfc00a380>
 400a3fc:	01000104 	movi	r4,4
 400a400:	400add80 	call	400add8 <__cxa_allocate_exception>
 400a404:	00c100b4 	movhi	r3,1026
 400a408:	18f3aa04 	addi	r3,r3,-12632
 400a40c:	01810074 	movhi	r6,1025
 400a410:	014100b4 	movhi	r5,1026
 400a414:	10c00015 	stw	r3,0(r2)
 400a418:	31abec04 	addi	r6,r6,-20560
 400a41c:	00c00084 	movi	r3,2
 400a420:	29738f04 	addi	r5,r5,-12740
 400a424:	1009883a 	mov	r4,r2
 400a428:	d8c00815 	stw	r3,32(sp)
 400a42c:	400a5100 	call	400a510 <__cxa_throw>
 400a430:	400a5a00 	call	400a5a0 <__cxa_rethrow>
 400a434:	d9401617 	ldw	r5,88(sp)
 400a438:	00800084 	movi	r2,2
 400a43c:	d9800104 	addi	r6,sp,4
 400a440:	0009883a 	mov	r4,zero
 400a444:	d8800815 	stw	r2,32(sp)
 400a448:	40098080 	call	4009808 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400a44c:	d9801717 	ldw	r6,92(sp)
 400a450:	d9c01517 	ldw	r7,84(sp)
 400a454:	d9000104 	addi	r4,sp,4
 400a458:	317ff017 	ldw	r5,-64(r6)
 400a45c:	4009bf00 	call	4009bf0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400a460:	10803fcc 	andi	r2,r2,255
 400a464:	1000171e 	bne	r2,zero,400a4c4 <__cxa_call_unexpected+0x22c>
 400a468:	d9c01517 	ldw	r7,84(sp)
 400a46c:	014100b4 	movhi	r5,1026
 400a470:	00800084 	movi	r2,2
 400a474:	29738f04 	addi	r5,r5,-12740
 400a478:	000d883a 	mov	r6,zero
 400a47c:	d9000104 	addi	r4,sp,4
 400a480:	d8800815 	stw	r2,32(sp)
 400a484:	4009bf00 	call	4009bf0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400a488:	10803fcc 	andi	r2,r2,255
 400a48c:	103fd626 	beq	r2,zero,400a3e8 <__alt_data_end+0xfc00a3e8>
 400a490:	01000104 	movi	r4,4
 400a494:	400add80 	call	400add8 <__cxa_allocate_exception>
 400a498:	00c100b4 	movhi	r3,1026
 400a49c:	18f3aa04 	addi	r3,r3,-12632
 400a4a0:	01810074 	movhi	r6,1025
 400a4a4:	014100b4 	movhi	r5,1026
 400a4a8:	10c00015 	stw	r3,0(r2)
 400a4ac:	31abec04 	addi	r6,r6,-20560
 400a4b0:	00c00084 	movi	r3,2
 400a4b4:	29738f04 	addi	r5,r5,-12740
 400a4b8:	1009883a 	mov	r4,r2
 400a4bc:	d8c00815 	stw	r3,32(sp)
 400a4c0:	400a5100 	call	400a510 <__cxa_throw>
 400a4c4:	400a5a00 	call	400a5a0 <__cxa_rethrow>

0400a4c8 <_ZdlPv>:
 400a4c8:	400b79c1 	jmpi	400b79c <free>

0400a4cc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 400a4cc:	defffe04 	addi	sp,sp,-8
 400a4d0:	dfc00115 	stw	ra,4(sp)
 400a4d4:	dc000015 	stw	r16,0(sp)
 400a4d8:	00800044 	movi	r2,1
 400a4dc:	11000a36 	bltu	r2,r4,400a508 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 400a4e0:	28bff617 	ldw	r2,-40(r5)
 400a4e4:	2c000504 	addi	r16,r5,20
 400a4e8:	10000226 	beq	r2,zero,400a4f4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 400a4ec:	8009883a 	mov	r4,r16
 400a4f0:	103ee83a 	callr	r2
 400a4f4:	8009883a 	mov	r4,r16
 400a4f8:	dfc00117 	ldw	ra,4(sp)
 400a4fc:	dc000017 	ldw	r16,0(sp)
 400a500:	dec00204 	addi	sp,sp,8
 400a504:	400ae381 	jmpi	400ae38 <__cxa_free_exception>
 400a508:	293ff817 	ldw	r4,-32(r5)
 400a50c:	400ab300 	call	400ab30 <_ZN10__cxxabiv111__terminateEPFvvE>

0400a510 <__cxa_throw>:
 400a510:	defffb04 	addi	sp,sp,-20
 400a514:	dfc00415 	stw	ra,16(sp)
 400a518:	dcc00315 	stw	r19,12(sp)
 400a51c:	dc800215 	stw	r18,8(sp)
 400a520:	2827883a 	mov	r19,r5
 400a524:	3025883a 	mov	r18,r6
 400a528:	dc400115 	stw	r17,4(sp)
 400a52c:	dc000015 	stw	r16,0(sp)
 400a530:	2021883a 	mov	r16,r4
 400a534:	400afa00 	call	400afa0 <__cxa_get_globals>
 400a538:	10c00117 	ldw	r3,4(r2)
 400a53c:	847ffb04 	addi	r17,r16,-20
 400a540:	18c00044 	addi	r3,r3,1
 400a544:	10c00115 	stw	r3,4(r2)
 400a548:	00800044 	movi	r2,1
 400a54c:	80bfef15 	stw	r2,-68(r16)
 400a550:	84fff015 	stw	r19,-64(r16)
 400a554:	84bff115 	stw	r18,-60(r16)
 400a558:	400ac680 	call	400ac68 <_ZSt14get_unexpectedv>
 400a55c:	80bff215 	stw	r2,-56(r16)
 400a560:	400ac440 	call	400ac44 <_ZSt13get_terminatev>
 400a564:	80bff315 	stw	r2,-52(r16)
 400a568:	0090caf4 	movhi	r2,17195
 400a56c:	108ac004 	addi	r2,r2,11008
 400a570:	80bffb15 	stw	r2,-20(r16)
 400a574:	0091d3b4 	movhi	r2,18254
 400a578:	109550c4 	addi	r2,r2,21827
 400a57c:	80bffc15 	stw	r2,-16(r16)
 400a580:	00810074 	movhi	r2,1025
 400a584:	10a93304 	addi	r2,r2,-23348
 400a588:	8809883a 	mov	r4,r17
 400a58c:	80bffd15 	stw	r2,-12(r16)
 400a590:	400b4f40 	call	400b4f4 <_Unwind_SjLj_RaiseException>
 400a594:	8809883a 	mov	r4,r17
 400a598:	400a6e00 	call	400a6e0 <__cxa_begin_catch>
 400a59c:	400abf00 	call	400abf0 <_ZSt9terminatev>

0400a5a0 <__cxa_rethrow>:
 400a5a0:	defffe04 	addi	sp,sp,-8
 400a5a4:	dfc00115 	stw	ra,4(sp)
 400a5a8:	dc000015 	stw	r16,0(sp)
 400a5ac:	400afa00 	call	400afa0 <__cxa_get_globals>
 400a5b0:	10c00117 	ldw	r3,4(r2)
 400a5b4:	11000017 	ldw	r4,0(r2)
 400a5b8:	18c00044 	addi	r3,r3,1
 400a5bc:	10c00115 	stw	r3,4(r2)
 400a5c0:	20001126 	beq	r4,zero,400a608 <__cxa_rethrow+0x68>
 400a5c4:	21400b17 	ldw	r5,44(r4)
 400a5c8:	01ef3574 	movhi	r7,48341
 400a5cc:	39f54004 	addi	r7,r7,-11008
 400a5d0:	29cf883a 	add	r7,r5,r7
 400a5d4:	20c00c17 	ldw	r3,48(r4)
 400a5d8:	394d803a 	cmpltu	r6,r7,r5
 400a5dc:	016e2cb4 	movhi	r5,47282
 400a5e0:	296aaf04 	addi	r5,r5,-21828
 400a5e4:	1947883a 	add	r3,r3,r5
 400a5e8:	30c7883a 	add	r3,r6,r3
 400a5ec:	18000726 	beq	r3,zero,400a60c <__cxa_rethrow+0x6c>
 400a5f0:	10000015 	stw	zero,0(r2)
 400a5f4:	24000b04 	addi	r16,r4,44
 400a5f8:	8009883a 	mov	r4,r16
 400a5fc:	400b64c0 	call	400b64c <_Unwind_SjLj_Resume_or_Rethrow>
 400a600:	8009883a 	mov	r4,r16
 400a604:	400a6e00 	call	400a6e0 <__cxa_begin_catch>
 400a608:	400abf00 	call	400abf0 <_ZSt9terminatev>
 400a60c:	00c00044 	movi	r3,1
 400a610:	19fff736 	bltu	r3,r7,400a5f0 <__alt_data_end+0xfc00a5f0>
 400a614:	20800517 	ldw	r2,20(r4)
 400a618:	0085c83a 	sub	r2,zero,r2
 400a61c:	20800515 	stw	r2,20(r4)
 400a620:	003ff406 	br	400a5f4 <__alt_data_end+0xfc00a5f4>

0400a624 <__cxa_pure_virtual>:
 400a624:	014100b4 	movhi	r5,1026
 400a628:	deffff04 	addi	sp,sp,-4
 400a62c:	29735704 	addi	r5,r5,-12964
 400a630:	018006c4 	movi	r6,27
 400a634:	01000084 	movi	r4,2
 400a638:	dfc00015 	stw	ra,0(sp)
 400a63c:	401955c0 	call	401955c <write>
 400a640:	400abf00 	call	400abf0 <_ZSt9terminatev>

0400a644 <__cxa_deleted_virtual>:
 400a644:	014100b4 	movhi	r5,1026
 400a648:	deffff04 	addi	sp,sp,-4
 400a64c:	29735e04 	addi	r5,r5,-12936
 400a650:	01800784 	movi	r6,30
 400a654:	01000084 	movi	r4,2
 400a658:	dfc00015 	stw	ra,0(sp)
 400a65c:	401955c0 	call	401955c <write>
 400a660:	400abf00 	call	400abf0 <_ZSt9terminatev>

0400a664 <__cxa_guard_acquire>:
 400a664:	20800007 	ldb	r2,0(r4)
 400a668:	1000061e 	bne	r2,zero,400a684 <__cxa_guard_acquire+0x20>
 400a66c:	20800047 	ldb	r2,1(r4)
 400a670:	1000061e 	bne	r2,zero,400a68c <__cxa_guard_acquire+0x28>
 400a674:	00800044 	movi	r2,1
 400a678:	20800045 	stb	r2,1(r4)
 400a67c:	00800044 	movi	r2,1
 400a680:	f800283a 	ret
 400a684:	0005883a 	mov	r2,zero
 400a688:	f800283a 	ret
 400a68c:	deffff04 	addi	sp,sp,-4
 400a690:	01000104 	movi	r4,4
 400a694:	dfc00015 	stw	ra,0(sp)
 400a698:	400add80 	call	400add8 <__cxa_allocate_exception>
 400a69c:	00c100b4 	movhi	r3,1026
 400a6a0:	01810074 	movhi	r6,1025
 400a6a4:	014100b4 	movhi	r5,1026
 400a6a8:	18f3c504 	addi	r3,r3,-12524
 400a6ac:	31abf904 	addi	r6,r6,-20508
 400a6b0:	2973c004 	addi	r5,r5,-12544
 400a6b4:	1009883a 	mov	r4,r2
 400a6b8:	10c00015 	stw	r3,0(r2)
 400a6bc:	400a5100 	call	400a510 <__cxa_throw>

0400a6c0 <__cxa_guard_abort>:
 400a6c0:	20000045 	stb	zero,1(r4)
 400a6c4:	f800283a 	ret

0400a6c8 <__cxa_guard_release>:
 400a6c8:	00800044 	movi	r2,1
 400a6cc:	20000045 	stb	zero,1(r4)
 400a6d0:	20800005 	stb	r2,0(r4)
 400a6d4:	f800283a 	ret

0400a6d8 <__cxa_get_exception_ptr>:
 400a6d8:	20bfff17 	ldw	r2,-4(r4)
 400a6dc:	f800283a 	ret

0400a6e0 <__cxa_begin_catch>:
 400a6e0:	defffe04 	addi	sp,sp,-8
 400a6e4:	dc000015 	stw	r16,0(sp)
 400a6e8:	dfc00115 	stw	ra,4(sp)
 400a6ec:	2021883a 	mov	r16,r4
 400a6f0:	400afa00 	call	400afa0 <__cxa_get_globals>
 400a6f4:	81000017 	ldw	r4,0(r16)
 400a6f8:	80c00117 	ldw	r3,4(r16)
 400a6fc:	01af3574 	movhi	r6,48341
 400a700:	31b54004 	addi	r6,r6,-11008
 400a704:	016e2cb4 	movhi	r5,47282
 400a708:	296aaf04 	addi	r5,r5,-21828
 400a70c:	218d883a 	add	r6,r4,r6
 400a710:	3109803a 	cmpltu	r4,r6,r4
 400a714:	1947883a 	add	r3,r3,r5
 400a718:	20c7883a 	add	r3,r4,r3
 400a71c:	817ff504 	addi	r5,r16,-44
 400a720:	11000017 	ldw	r4,0(r2)
 400a724:	18000726 	beq	r3,zero,400a744 <__cxa_begin_catch+0x64>
 400a728:	2000191e 	bne	r4,zero,400a790 <__cxa_begin_catch+0xb0>
 400a72c:	11400015 	stw	r5,0(r2)
 400a730:	0005883a 	mov	r2,zero
 400a734:	dfc00117 	ldw	ra,4(sp)
 400a738:	dc000017 	ldw	r16,0(sp)
 400a73c:	dec00204 	addi	sp,sp,8
 400a740:	f800283a 	ret
 400a744:	01c00044 	movi	r7,1
 400a748:	39bff736 	bltu	r7,r6,400a728 <__alt_data_end+0xfc00a728>
 400a74c:	80fffa17 	ldw	r3,-24(r16)
 400a750:	18000d16 	blt	r3,zero,400a788 <__cxa_begin_catch+0xa8>
 400a754:	18c00044 	addi	r3,r3,1
 400a758:	11800117 	ldw	r6,4(r2)
 400a75c:	80fffa15 	stw	r3,-24(r16)
 400a760:	30ffffc4 	addi	r3,r6,-1
 400a764:	10c00115 	stw	r3,4(r2)
 400a768:	21400226 	beq	r4,r5,400a774 <__cxa_begin_catch+0x94>
 400a76c:	813ff915 	stw	r4,-28(r16)
 400a770:	11400015 	stw	r5,0(r2)
 400a774:	80bfff17 	ldw	r2,-4(r16)
 400a778:	dfc00117 	ldw	ra,4(sp)
 400a77c:	dc000017 	ldw	r16,0(sp)
 400a780:	dec00204 	addi	sp,sp,8
 400a784:	f800283a 	ret
 400a788:	38c7c83a 	sub	r3,r7,r3
 400a78c:	003ff206 	br	400a758 <__alt_data_end+0xfc00a758>
 400a790:	400abf00 	call	400abf0 <_ZSt9terminatev>

0400a794 <__cxa_end_catch>:
 400a794:	deffff04 	addi	sp,sp,-4
 400a798:	dfc00015 	stw	ra,0(sp)
 400a79c:	400af940 	call	400af94 <__cxa_get_globals_fast>
 400a7a0:	11000017 	ldw	r4,0(r2)
 400a7a4:	20001426 	beq	r4,zero,400a7f8 <__cxa_end_catch+0x64>
 400a7a8:	21400b17 	ldw	r5,44(r4)
 400a7ac:	01ef3574 	movhi	r7,48341
 400a7b0:	39f54004 	addi	r7,r7,-11008
 400a7b4:	29cf883a 	add	r7,r5,r7
 400a7b8:	20c00c17 	ldw	r3,48(r4)
 400a7bc:	394d803a 	cmpltu	r6,r7,r5
 400a7c0:	016e2cb4 	movhi	r5,47282
 400a7c4:	296aaf04 	addi	r5,r5,-21828
 400a7c8:	1947883a 	add	r3,r3,r5
 400a7cc:	30c7883a 	add	r3,r6,r3
 400a7d0:	18000c1e 	bne	r3,zero,400a804 <__cxa_end_catch+0x70>
 400a7d4:	00c00044 	movi	r3,1
 400a7d8:	19c00a36 	bltu	r3,r7,400a804 <__cxa_end_catch+0x70>
 400a7dc:	20c00517 	ldw	r3,20(r4)
 400a7e0:	18000d16 	blt	r3,zero,400a818 <__cxa_end_catch+0x84>
 400a7e4:	18ffffc4 	addi	r3,r3,-1
 400a7e8:	18001026 	beq	r3,zero,400a82c <__cxa_end_catch+0x98>
 400a7ec:	00bfffc4 	movi	r2,-1
 400a7f0:	18801426 	beq	r3,r2,400a844 <__cxa_end_catch+0xb0>
 400a7f4:	20c00515 	stw	r3,20(r4)
 400a7f8:	dfc00017 	ldw	ra,0(sp)
 400a7fc:	dec00104 	addi	sp,sp,4
 400a800:	f800283a 	ret
 400a804:	21000b04 	addi	r4,r4,44
 400a808:	10000015 	stw	zero,0(r2)
 400a80c:	dfc00017 	ldw	ra,0(sp)
 400a810:	dec00104 	addi	sp,sp,4
 400a814:	400b6981 	jmpi	400b698 <_Unwind_DeleteException>
 400a818:	18c00044 	addi	r3,r3,1
 400a81c:	183ff51e 	bne	r3,zero,400a7f4 <__alt_data_end+0xfc00a7f4>
 400a820:	21400417 	ldw	r5,16(r4)
 400a824:	11400015 	stw	r5,0(r2)
 400a828:	003ff206 	br	400a7f4 <__alt_data_end+0xfc00a7f4>
 400a82c:	20c00417 	ldw	r3,16(r4)
 400a830:	21000b04 	addi	r4,r4,44
 400a834:	10c00015 	stw	r3,0(r2)
 400a838:	dfc00017 	ldw	ra,0(sp)
 400a83c:	dec00104 	addi	sp,sp,4
 400a840:	400b6981 	jmpi	400b698 <_Unwind_DeleteException>
 400a844:	400abf00 	call	400abf0 <_ZSt9terminatev>

0400a848 <_ZSt18uncaught_exceptionv>:
 400a848:	deffff04 	addi	sp,sp,-4
 400a84c:	dfc00015 	stw	ra,0(sp)
 400a850:	400afa00 	call	400afa0 <__cxa_get_globals>
 400a854:	10800117 	ldw	r2,4(r2)
 400a858:	1004c03a 	cmpne	r2,r2,zero
 400a85c:	dfc00017 	ldw	ra,0(sp)
 400a860:	dec00104 	addi	sp,sp,4
 400a864:	f800283a 	ret

0400a868 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 400a868:	20800017 	ldw	r2,0(r4)
 400a86c:	defffa04 	addi	sp,sp,-24
 400a870:	dc000415 	stw	r16,16(sp)
 400a874:	10800617 	ldw	r2,24(r2)
 400a878:	3021883a 	mov	r16,r6
 400a87c:	31800017 	ldw	r6,0(r6)
 400a880:	00c00404 	movi	r3,16
 400a884:	d8c00215 	stw	r3,8(sp)
 400a888:	dfc00515 	stw	ra,20(sp)
 400a88c:	d8000015 	stw	zero,0(sp)
 400a890:	d8000115 	stw	zero,4(sp)
 400a894:	d8000315 	stw	zero,12(sp)
 400a898:	d80f883a 	mov	r7,sp
 400a89c:	103ee83a 	callr	r2
 400a8a0:	d8800117 	ldw	r2,4(sp)
 400a8a4:	00c00184 	movi	r3,6
 400a8a8:	1080018c 	andi	r2,r2,6
 400a8ac:	10c00526 	beq	r2,r3,400a8c4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 400a8b0:	0005883a 	mov	r2,zero
 400a8b4:	dfc00517 	ldw	ra,20(sp)
 400a8b8:	dc000417 	ldw	r16,16(sp)
 400a8bc:	dec00604 	addi	sp,sp,24
 400a8c0:	f800283a 	ret
 400a8c4:	d8c00017 	ldw	r3,0(sp)
 400a8c8:	00800044 	movi	r2,1
 400a8cc:	80c00015 	stw	r3,0(r16)
 400a8d0:	dfc00517 	ldw	ra,20(sp)
 400a8d4:	dc000417 	ldw	r16,16(sp)
 400a8d8:	dec00604 	addi	sp,sp,24
 400a8dc:	f800283a 	ret

0400a8e0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 400a8e0:	d8800017 	ldw	r2,0(sp)
 400a8e4:	11800226 	beq	r2,r6,400a8f0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 400a8e8:	00800044 	movi	r2,1
 400a8ec:	f800283a 	ret
 400a8f0:	00800184 	movi	r2,6
 400a8f4:	f800283a 	ret

0400a8f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 400a8f8:	008100b4 	movhi	r2,1026
 400a8fc:	10b37404 	addi	r2,r2,-12848
 400a900:	20800015 	stw	r2,0(r4)
 400a904:	400941c1 	jmpi	400941c <_ZNSt9type_infoD1Ev>

0400a908 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 400a908:	defffe04 	addi	sp,sp,-8
 400a90c:	008100b4 	movhi	r2,1026
 400a910:	dc000015 	stw	r16,0(sp)
 400a914:	dfc00115 	stw	ra,4(sp)
 400a918:	10b37404 	addi	r2,r2,-12848
 400a91c:	20800015 	stw	r2,0(r4)
 400a920:	2021883a 	mov	r16,r4
 400a924:	400941c0 	call	400941c <_ZNSt9type_infoD1Ev>
 400a928:	8009883a 	mov	r4,r16
 400a92c:	dfc00117 	ldw	ra,4(sp)
 400a930:	dc000017 	ldw	r16,0(sp)
 400a934:	dec00204 	addi	sp,sp,8
 400a938:	400a4c81 	jmpi	400a4c8 <_ZdlPv>

0400a93c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 400a93c:	21000117 	ldw	r4,4(r4)
 400a940:	29400117 	ldw	r5,4(r5)
 400a944:	defffd04 	addi	sp,sp,-12
 400a948:	dc400115 	stw	r17,4(sp)
 400a94c:	dc000015 	stw	r16,0(sp)
 400a950:	dfc00215 	stw	ra,8(sp)
 400a954:	3023883a 	mov	r17,r6
 400a958:	3821883a 	mov	r16,r7
 400a95c:	21400526 	beq	r4,r5,400a974 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 400a960:	20c00007 	ldb	r3,0(r4)
 400a964:	00800a84 	movi	r2,42
 400a968:	18800d26 	beq	r3,r2,400a9a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400a96c:	400c7600 	call	400c760 <strcmp>
 400a970:	10000b1e 	bne	r2,zero,400a9a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400a974:	00800204 	movi	r2,8
 400a978:	80800315 	stw	r2,12(r16)
 400a97c:	00800184 	movi	r2,6
 400a980:	80800115 	stw	r2,4(r16)
 400a984:	84400015 	stw	r17,0(r16)
 400a988:	00800044 	movi	r2,1
 400a98c:	dfc00217 	ldw	ra,8(sp)
 400a990:	dc400117 	ldw	r17,4(sp)
 400a994:	dc000017 	ldw	r16,0(sp)
 400a998:	dec00304 	addi	sp,sp,12
 400a99c:	f800283a 	ret
 400a9a0:	0005883a 	mov	r2,zero
 400a9a4:	003ff906 	br	400a98c <__alt_data_end+0xfc00a98c>

0400a9a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 400a9a8:	defffa04 	addi	sp,sp,-24
 400a9ac:	dc800415 	stw	r18,16(sp)
 400a9b0:	d8800817 	ldw	r2,32(sp)
 400a9b4:	dc800617 	ldw	r18,24(sp)
 400a9b8:	dc400315 	stw	r17,12(sp)
 400a9bc:	dc000215 	stw	r16,8(sp)
 400a9c0:	dfc00515 	stw	ra,20(sp)
 400a9c4:	dc400917 	ldw	r17,36(sp)
 400a9c8:	24000117 	ldw	r16,4(r4)
 400a9cc:	90801526 	beq	r18,r2,400aa24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 400a9d0:	39400117 	ldw	r5,4(r7)
 400a9d4:	2c000826 	beq	r5,r16,400a9f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 400a9d8:	80c00007 	ldb	r3,0(r16)
 400a9dc:	00800a84 	movi	r2,42
 400a9e0:	18800926 	beq	r3,r2,400aa08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400a9e4:	8009883a 	mov	r4,r16
 400a9e8:	d9800115 	stw	r6,4(sp)
 400a9ec:	400c7600 	call	400c760 <strcmp>
 400a9f0:	d9800117 	ldw	r6,4(sp)
 400a9f4:	1000041e 	bne	r2,zero,400aa08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400a9f8:	00800044 	movi	r2,1
 400a9fc:	8c800015 	stw	r18,0(r17)
 400aa00:	89800115 	stw	r6,4(r17)
 400aa04:	88800315 	stw	r2,12(r17)
 400aa08:	0005883a 	mov	r2,zero
 400aa0c:	dfc00517 	ldw	ra,20(sp)
 400aa10:	dc800417 	ldw	r18,16(sp)
 400aa14:	dc400317 	ldw	r17,12(sp)
 400aa18:	dc000217 	ldw	r16,8(sp)
 400aa1c:	dec00604 	addi	sp,sp,24
 400aa20:	f800283a 	ret
 400aa24:	d8800717 	ldw	r2,28(sp)
 400aa28:	11400117 	ldw	r5,4(r2)
 400aa2c:	81400a26 	beq	r16,r5,400aa58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 400aa30:	80c00007 	ldb	r3,0(r16)
 400aa34:	00800a84 	movi	r2,42
 400aa38:	18800c26 	beq	r3,r2,400aa6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 400aa3c:	8009883a 	mov	r4,r16
 400aa40:	d9800115 	stw	r6,4(sp)
 400aa44:	d9c00015 	stw	r7,0(sp)
 400aa48:	400c7600 	call	400c760 <strcmp>
 400aa4c:	d9800117 	ldw	r6,4(sp)
 400aa50:	d9c00017 	ldw	r7,0(sp)
 400aa54:	1000021e 	bne	r2,zero,400aa60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 400aa58:	89800215 	stw	r6,8(r17)
 400aa5c:	003fea06 	br	400aa08 <__alt_data_end+0xfc00aa08>
 400aa60:	39400117 	ldw	r5,4(r7)
 400aa64:	817fdf1e 	bne	r16,r5,400a9e4 <__alt_data_end+0xfc00a9e4>
 400aa68:	003fe306 	br	400a9f8 <__alt_data_end+0xfc00a9f8>
 400aa6c:	38800117 	ldw	r2,4(r7)
 400aa70:	80bfe51e 	bne	r16,r2,400aa08 <__alt_data_end+0xfc00aa08>
 400aa74:	003fe006 	br	400a9f8 <__alt_data_end+0xfc00a9f8>

0400aa78 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 400aa78:	20800117 	ldw	r2,4(r4)
 400aa7c:	28c00117 	ldw	r3,4(r5)
 400aa80:	10c02926 	beq	r2,r3,400ab28 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 400aa84:	defffb04 	addi	sp,sp,-20
 400aa88:	dcc00315 	stw	r19,12(sp)
 400aa8c:	dc800215 	stw	r18,8(sp)
 400aa90:	dc400115 	stw	r17,4(sp)
 400aa94:	dc000015 	stw	r16,0(sp)
 400aa98:	dfc00415 	stw	ra,16(sp)
 400aa9c:	2821883a 	mov	r16,r5
 400aaa0:	11400007 	ldb	r5,0(r2)
 400aaa4:	2025883a 	mov	r18,r4
 400aaa8:	01000a84 	movi	r4,42
 400aaac:	3823883a 	mov	r17,r7
 400aab0:	3027883a 	mov	r19,r6
 400aab4:	29000626 	beq	r5,r4,400aad0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400aab8:	180b883a 	mov	r5,r3
 400aabc:	1009883a 	mov	r4,r2
 400aac0:	400c7600 	call	400c760 <strcmp>
 400aac4:	1000021e 	bne	r2,zero,400aad0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400aac8:	00800044 	movi	r2,1
 400aacc:	00000306 	br	400aadc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 400aad0:	008000c4 	movi	r2,3
 400aad4:	1440082e 	bgeu	r2,r17,400aaf8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 400aad8:	0005883a 	mov	r2,zero
 400aadc:	dfc00417 	ldw	ra,16(sp)
 400aae0:	dcc00317 	ldw	r19,12(sp)
 400aae4:	dc800217 	ldw	r18,8(sp)
 400aae8:	dc400117 	ldw	r17,4(sp)
 400aaec:	dc000017 	ldw	r16,0(sp)
 400aaf0:	dec00504 	addi	sp,sp,20
 400aaf4:	f800283a 	ret
 400aaf8:	80800017 	ldw	r2,0(r16)
 400aafc:	980d883a 	mov	r6,r19
 400ab00:	900b883a 	mov	r5,r18
 400ab04:	10800517 	ldw	r2,20(r2)
 400ab08:	8009883a 	mov	r4,r16
 400ab0c:	dfc00417 	ldw	ra,16(sp)
 400ab10:	dcc00317 	ldw	r19,12(sp)
 400ab14:	dc800217 	ldw	r18,8(sp)
 400ab18:	dc400117 	ldw	r17,4(sp)
 400ab1c:	dc000017 	ldw	r16,0(sp)
 400ab20:	dec00504 	addi	sp,sp,20
 400ab24:	1000683a 	jmp	r2
 400ab28:	00800044 	movi	r2,1
 400ab2c:	f800283a 	ret

0400ab30 <_ZN10__cxxabiv111__terminateEPFvvE>:
 400ab30:	00810074 	movhi	r2,1025
 400ab34:	deffef04 	addi	sp,sp,-68
 400ab38:	10a72604 	addi	r2,r2,-25448
 400ab3c:	d8800615 	stw	r2,24(sp)
 400ab40:	008100b4 	movhi	r2,1026
 400ab44:	10add304 	addi	r2,r2,-18612
 400ab48:	d8800715 	stw	r2,28(sp)
 400ab4c:	00810074 	movhi	r2,1025
 400ab50:	10aae204 	addi	r2,r2,-21624
 400ab54:	d9000d15 	stw	r4,52(sp)
 400ab58:	d809883a 	mov	r4,sp
 400ab5c:	d8800915 	stw	r2,36(sp)
 400ab60:	dfc01015 	stw	ra,64(sp)
 400ab64:	df000f15 	stw	fp,60(sp)
 400ab68:	dec00815 	stw	sp,32(sp)
 400ab6c:	dec00a15 	stw	sp,40(sp)
 400ab70:	400b40c0 	call	400b40c <_Unwind_SjLj_Register>
 400ab74:	00800044 	movi	r2,1
 400ab78:	d8800115 	stw	r2,4(sp)
 400ab7c:	d8800d17 	ldw	r2,52(sp)
 400ab80:	103ee83a 	callr	r2
 400ab84:	400b7240 	call	400b724 <abort>
 400ab88:	d8c00217 	ldw	r3,8(sp)
 400ab8c:	d8800117 	ldw	r2,4(sp)
 400ab90:	d8c00d15 	stw	r3,52(sp)
 400ab94:	d8c00317 	ldw	r3,12(sp)
 400ab98:	d8c00e15 	stw	r3,56(sp)
 400ab9c:	10000b26 	beq	r2,zero,400abcc <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 400aba0:	10bfffc4 	addi	r2,r2,-1
 400aba4:	10000126 	beq	r2,zero,400abac <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 400aba8:	003b68fa 	trap	3
 400abac:	d8000115 	stw	zero,4(sp)
 400abb0:	400a7940 	call	400a794 <__cxa_end_catch>
 400abb4:	d8c00e17 	ldw	r3,56(sp)
 400abb8:	00bfffc4 	movi	r2,-1
 400abbc:	18800826 	beq	r3,r2,400abe0 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 400abc0:	d9000d17 	ldw	r4,52(sp)
 400abc4:	d8800115 	stw	r2,4(sp)
 400abc8:	400b6080 	call	400b608 <_Unwind_SjLj_Resume>
 400abcc:	d9000d17 	ldw	r4,52(sp)
 400abd0:	400a6e00 	call	400a6e0 <__cxa_begin_catch>
 400abd4:	00800084 	movi	r2,2
 400abd8:	d8800115 	stw	r2,4(sp)
 400abdc:	400b7240 	call	400b724 <abort>
 400abe0:	d8800e17 	ldw	r2,56(sp)
 400abe4:	d9000d17 	ldw	r4,52(sp)
 400abe8:	d8800115 	stw	r2,4(sp)
 400abec:	400a2980 	call	400a298 <__cxa_call_unexpected>

0400abf0 <_ZSt9terminatev>:
 400abf0:	008100f4 	movhi	r2,1027
 400abf4:	10a71704 	addi	r2,r2,-25508
 400abf8:	11000017 	ldw	r4,0(r2)
 400abfc:	deffff04 	addi	sp,sp,-4
 400ac00:	dfc00015 	stw	ra,0(sp)
 400ac04:	400ab300 	call	400ab30 <_ZN10__cxxabiv111__terminateEPFvvE>

0400ac08 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 400ac08:	deffff04 	addi	sp,sp,-4
 400ac0c:	dfc00015 	stw	ra,0(sp)
 400ac10:	203ee83a 	callr	r4
 400ac14:	400abf00 	call	400abf0 <_ZSt9terminatev>

0400ac18 <_ZSt10unexpectedv>:
 400ac18:	008100f4 	movhi	r2,1027
 400ac1c:	10a71004 	addi	r2,r2,-25536
 400ac20:	11000017 	ldw	r4,0(r2)
 400ac24:	deffff04 	addi	sp,sp,-4
 400ac28:	dfc00015 	stw	ra,0(sp)
 400ac2c:	400ac080 	call	400ac08 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0400ac30 <_ZSt13set_terminatePFvvE>:
 400ac30:	00c100f4 	movhi	r3,1027
 400ac34:	18e71704 	addi	r3,r3,-25508
 400ac38:	18800017 	ldw	r2,0(r3)
 400ac3c:	19000015 	stw	r4,0(r3)
 400ac40:	f800283a 	ret

0400ac44 <_ZSt13get_terminatev>:
 400ac44:	008100f4 	movhi	r2,1027
 400ac48:	10a71704 	addi	r2,r2,-25508
 400ac4c:	10800017 	ldw	r2,0(r2)
 400ac50:	f800283a 	ret

0400ac54 <_ZSt14set_unexpectedPFvvE>:
 400ac54:	00c100f4 	movhi	r3,1027
 400ac58:	18e71004 	addi	r3,r3,-25536
 400ac5c:	18800017 	ldw	r2,0(r3)
 400ac60:	19000015 	stw	r4,0(r3)
 400ac64:	f800283a 	ret

0400ac68 <_ZSt14get_unexpectedv>:
 400ac68:	008100f4 	movhi	r2,1027
 400ac6c:	10a71004 	addi	r2,r2,-25536
 400ac70:	10800017 	ldw	r2,0(r2)
 400ac74:	f800283a 	ret

0400ac78 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 400ac78:	018100f4 	movhi	r6,1027
 400ac7c:	319a1804 	addi	r6,r6,26720
 400ac80:	31400117 	ldw	r5,4(r6)
 400ac84:	223fff04 	addi	r8,r4,-4
 400ac88:	227fff17 	ldw	r9,-4(r4)
 400ac8c:	28001326 	beq	r5,zero,400acdc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
 400ac90:	424f883a 	add	r7,r8,r9
 400ac94:	29c01426 	beq	r5,r7,400ace8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 400ac98:	28c00117 	ldw	r3,4(r5)
 400ac9c:	18001c26 	beq	r3,zero,400ad10 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 400aca0:	38c00336 	bltu	r7,r3,400acb0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 400aca4:	00001e06 	br	400ad20 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
 400aca8:	3880052e 	bgeu	r7,r2,400acc0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
 400acac:	1007883a 	mov	r3,r2
 400acb0:	18800117 	ldw	r2,4(r3)
 400acb4:	29800104 	addi	r6,r5,4
 400acb8:	180b883a 	mov	r5,r3
 400acbc:	103ffa1e 	bne	r2,zero,400aca8 <__alt_data_end+0xfc00aca8>
 400acc0:	19400017 	ldw	r5,0(r3)
 400acc4:	194f883a 	add	r7,r3,r5
 400acc8:	41c00e26 	beq	r8,r7,400ad04 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
 400accc:	20800015 	stw	r2,0(r4)
 400acd0:	30800017 	ldw	r2,0(r6)
 400acd4:	12000115 	stw	r8,4(r2)
 400acd8:	f800283a 	ret
 400acdc:	20000015 	stw	zero,0(r4)
 400ace0:	32000115 	stw	r8,4(r6)
 400ace4:	f800283a 	ret
 400ace8:	28c00017 	ldw	r3,0(r5)
 400acec:	28800117 	ldw	r2,4(r5)
 400acf0:	1a53883a 	add	r9,r3,r9
 400acf4:	227fff15 	stw	r9,-4(r4)
 400acf8:	20800015 	stw	r2,0(r4)
 400acfc:	32000115 	stw	r8,4(r6)
 400ad00:	f800283a 	ret
 400ad04:	494b883a 	add	r5,r9,r5
 400ad08:	19400015 	stw	r5,0(r3)
 400ad0c:	f800283a 	ret
 400ad10:	0005883a 	mov	r2,zero
 400ad14:	2807883a 	mov	r3,r5
 400ad18:	31800104 	addi	r6,r6,4
 400ad1c:	003fe806 	br	400acc0 <__alt_data_end+0xfc00acc0>
 400ad20:	1805883a 	mov	r2,r3
 400ad24:	31800104 	addi	r6,r6,4
 400ad28:	2807883a 	mov	r3,r5
 400ad2c:	003fe406 	br	400acc0 <__alt_data_end+0xfc00acc0>

0400ad30 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 400ad30:	20800104 	addi	r2,r4,4
 400ad34:	00c001c4 	movi	r3,7
 400ad38:	1880112e 	bgeu	r3,r2,400ad80 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 400ad3c:	20c9883a 	add	r4,r4,r3
 400ad40:	00bfff04 	movi	r2,-4
 400ad44:	208a703a 	and	r5,r4,r2
 400ad48:	018100f4 	movhi	r6,1027
 400ad4c:	319a1804 	addi	r6,r6,26720
 400ad50:	30c00117 	ldw	r3,4(r6)
 400ad54:	18000826 	beq	r3,zero,400ad78 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 400ad58:	19000017 	ldw	r4,0(r3)
 400ad5c:	21400436 	bltu	r4,r5,400ad70 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
 400ad60:	00001a06 	br	400adcc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
 400ad64:	11000017 	ldw	r4,0(r2)
 400ad68:	2140072e 	bgeu	r4,r5,400ad88 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 400ad6c:	1007883a 	mov	r3,r2
 400ad70:	18800117 	ldw	r2,4(r3)
 400ad74:	103ffb1e 	bne	r2,zero,400ad64 <__alt_data_end+0xfc00ad64>
 400ad78:	0005883a 	mov	r2,zero
 400ad7c:	f800283a 	ret
 400ad80:	01400204 	movi	r5,8
 400ad84:	003ff006 	br	400ad48 <__alt_data_end+0xfc00ad48>
 400ad88:	18c00104 	addi	r3,r3,4
 400ad8c:	2149c83a 	sub	r4,r4,r5
 400ad90:	018001c4 	movi	r6,7
 400ad94:	3100092e 	bgeu	r6,r4,400adbc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
 400ad98:	11c00117 	ldw	r7,4(r2)
 400ad9c:	114d883a 	add	r6,r2,r5
 400ada0:	31000015 	stw	r4,0(r6)
 400ada4:	31c00115 	stw	r7,4(r6)
 400ada8:	18800017 	ldw	r2,0(r3)
 400adac:	11400015 	stw	r5,0(r2)
 400adb0:	19800015 	stw	r6,0(r3)
 400adb4:	10800104 	addi	r2,r2,4
 400adb8:	f800283a 	ret
 400adbc:	11000117 	ldw	r4,4(r2)
 400adc0:	10800104 	addi	r2,r2,4
 400adc4:	19000015 	stw	r4,0(r3)
 400adc8:	f800283a 	ret
 400adcc:	1805883a 	mov	r2,r3
 400add0:	30c00104 	addi	r3,r6,4
 400add4:	003fed06 	br	400ad8c <__alt_data_end+0xfc00ad8c>

0400add8 <__cxa_allocate_exception>:
 400add8:	defffd04 	addi	sp,sp,-12
 400addc:	dc400115 	stw	r17,4(sp)
 400ade0:	24401104 	addi	r17,r4,68
 400ade4:	8809883a 	mov	r4,r17
 400ade8:	dc000015 	stw	r16,0(sp)
 400adec:	dfc00215 	stw	ra,8(sp)
 400adf0:	400b7880 	call	400b788 <malloc>
 400adf4:	1021883a 	mov	r16,r2
 400adf8:	10000a26 	beq	r2,zero,400ae24 <__cxa_allocate_exception+0x4c>
 400adfc:	01801104 	movi	r6,68
 400ae00:	000b883a 	mov	r5,zero
 400ae04:	8009883a 	mov	r4,r16
 400ae08:	400c1800 	call	400c180 <memset>
 400ae0c:	80801104 	addi	r2,r16,68
 400ae10:	dfc00217 	ldw	ra,8(sp)
 400ae14:	dc400117 	ldw	r17,4(sp)
 400ae18:	dc000017 	ldw	r16,0(sp)
 400ae1c:	dec00304 	addi	sp,sp,12
 400ae20:	f800283a 	ret
 400ae24:	8809883a 	mov	r4,r17
 400ae28:	400ad300 	call	400ad30 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400ae2c:	1021883a 	mov	r16,r2
 400ae30:	103ff21e 	bne	r2,zero,400adfc <__alt_data_end+0xfc00adfc>
 400ae34:	400abf00 	call	400abf0 <_ZSt9terminatev>

0400ae38 <__cxa_free_exception>:
 400ae38:	00c100f4 	movhi	r3,1027
 400ae3c:	18da1804 	addi	r3,r3,26720
 400ae40:	18800217 	ldw	r2,8(r3)
 400ae44:	213fef04 	addi	r4,r4,-68
 400ae48:	1100042e 	bgeu	r2,r4,400ae5c <__cxa_free_exception+0x24>
 400ae4c:	18c00317 	ldw	r3,12(r3)
 400ae50:	10c5883a 	add	r2,r2,r3
 400ae54:	2080012e 	bgeu	r4,r2,400ae5c <__cxa_free_exception+0x24>
 400ae58:	400ac781 	jmpi	400ac78 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400ae5c:	400b79c1 	jmpi	400b79c <free>

0400ae60 <__cxa_allocate_dependent_exception>:
 400ae60:	defffe04 	addi	sp,sp,-8
 400ae64:	01001004 	movi	r4,64
 400ae68:	dc000015 	stw	r16,0(sp)
 400ae6c:	dfc00115 	stw	ra,4(sp)
 400ae70:	400b7880 	call	400b788 <malloc>
 400ae74:	1021883a 	mov	r16,r2
 400ae78:	10000926 	beq	r2,zero,400aea0 <__cxa_allocate_dependent_exception+0x40>
 400ae7c:	01801004 	movi	r6,64
 400ae80:	000b883a 	mov	r5,zero
 400ae84:	8009883a 	mov	r4,r16
 400ae88:	400c1800 	call	400c180 <memset>
 400ae8c:	8005883a 	mov	r2,r16
 400ae90:	dfc00117 	ldw	ra,4(sp)
 400ae94:	dc000017 	ldw	r16,0(sp)
 400ae98:	dec00204 	addi	sp,sp,8
 400ae9c:	f800283a 	ret
 400aea0:	01001004 	movi	r4,64
 400aea4:	400ad300 	call	400ad30 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400aea8:	1021883a 	mov	r16,r2
 400aeac:	103ff31e 	bne	r2,zero,400ae7c <__alt_data_end+0xfc00ae7c>
 400aeb0:	400abf00 	call	400abf0 <_ZSt9terminatev>

0400aeb4 <__cxa_free_dependent_exception>:
 400aeb4:	014100f4 	movhi	r5,1027
 400aeb8:	295a1804 	addi	r5,r5,26720
 400aebc:	28c00217 	ldw	r3,8(r5)
 400aec0:	2005883a 	mov	r2,r4
 400aec4:	1900042e 	bgeu	r3,r4,400aed8 <__cxa_free_dependent_exception+0x24>
 400aec8:	29400317 	ldw	r5,12(r5)
 400aecc:	1947883a 	add	r3,r3,r5
 400aed0:	20c0012e 	bgeu	r4,r3,400aed8 <__cxa_free_dependent_exception+0x24>
 400aed4:	400ac781 	jmpi	400ac78 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400aed8:	1009883a 	mov	r4,r2
 400aedc:	400b79c1 	jmpi	400b79c <free>

0400aee0 <_GLOBAL__sub_I___cxa_allocate_exception>:
 400aee0:	defffd04 	addi	sp,sp,-12
 400aee4:	dc400115 	stw	r17,4(sp)
 400aee8:	dc000015 	stw	r16,0(sp)
 400aeec:	04424004 	movi	r17,2304
 400aef0:	040100f4 	movhi	r16,1027
 400aef4:	841a1804 	addi	r16,r16,26720
 400aef8:	8809883a 	mov	r4,r17
 400aefc:	dfc00215 	stw	ra,8(sp)
 400af00:	84400315 	stw	r17,12(r16)
 400af04:	400b7880 	call	400b788 <malloc>
 400af08:	80800215 	stw	r2,8(r16)
 400af0c:	10000826 	beq	r2,zero,400af30 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
 400af10:	80800115 	stw	r2,4(r16)
 400af14:	14400015 	stw	r17,0(r2)
 400af18:	10000115 	stw	zero,4(r2)
 400af1c:	dfc00217 	ldw	ra,8(sp)
 400af20:	dc400117 	ldw	r17,4(sp)
 400af24:	dc000017 	ldw	r16,0(sp)
 400af28:	dec00304 	addi	sp,sp,12
 400af2c:	f800283a 	ret
 400af30:	80000315 	stw	zero,12(r16)
 400af34:	80000115 	stw	zero,4(r16)
 400af38:	003ff806 	br	400af1c <__alt_data_end+0xfc00af1c>

0400af3c <__cxa_call_terminate>:
 400af3c:	defffe04 	addi	sp,sp,-8
 400af40:	dfc00115 	stw	ra,4(sp)
 400af44:	dc000015 	stw	r16,0(sp)
 400af48:	20000d26 	beq	r4,zero,400af80 <__cxa_call_terminate+0x44>
 400af4c:	2021883a 	mov	r16,r4
 400af50:	400a6e00 	call	400a6e0 <__cxa_begin_catch>
 400af54:	80c00017 	ldw	r3,0(r16)
 400af58:	016f3574 	movhi	r5,48341
 400af5c:	29754004 	addi	r5,r5,-11008
 400af60:	194b883a 	add	r5,r3,r5
 400af64:	80800117 	ldw	r2,4(r16)
 400af68:	28c9803a 	cmpltu	r4,r5,r3
 400af6c:	00ee2cb4 	movhi	r3,47282
 400af70:	18eaaf04 	addi	r3,r3,-21828
 400af74:	10c5883a 	add	r2,r2,r3
 400af78:	2085883a 	add	r2,r4,r2
 400af7c:	10000126 	beq	r2,zero,400af84 <__cxa_call_terminate+0x48>
 400af80:	400abf00 	call	400abf0 <_ZSt9terminatev>
 400af84:	00800044 	movi	r2,1
 400af88:	117ffd36 	bltu	r2,r5,400af80 <__alt_data_end+0xfc00af80>
 400af8c:	813ff817 	ldw	r4,-32(r16)
 400af90:	400ab300 	call	400ab30 <_ZN10__cxxabiv111__terminateEPFvvE>

0400af94 <__cxa_get_globals_fast>:
 400af94:	008100f4 	movhi	r2,1027
 400af98:	1099dc04 	addi	r2,r2,26480
 400af9c:	f800283a 	ret

0400afa0 <__cxa_get_globals>:
 400afa0:	008100f4 	movhi	r2,1027
 400afa4:	1099dc04 	addi	r2,r2,26480
 400afa8:	f800283a 	ret

0400afac <_ZNSt9exceptionD1Ev>:
 400afac:	f800283a 	ret

0400afb0 <_ZNSt13bad_exceptionD1Ev>:
 400afb0:	f800283a 	ret

0400afb4 <_ZNKSt9exception4whatEv>:
 400afb4:	008100b4 	movhi	r2,1026
 400afb8:	10b37d04 	addi	r2,r2,-12812
 400afbc:	f800283a 	ret

0400afc0 <_ZNKSt13bad_exception4whatEv>:
 400afc0:	008100b4 	movhi	r2,1026
 400afc4:	10b38104 	addi	r2,r2,-12796
 400afc8:	f800283a 	ret

0400afcc <_ZNSt9exceptionD0Ev>:
 400afcc:	400a4c81 	jmpi	400a4c8 <_ZdlPv>

0400afd0 <_ZNSt13bad_exceptionD0Ev>:
 400afd0:	400a4c81 	jmpi	400a4c8 <_ZdlPv>

0400afd4 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 400afd4:	f800283a 	ret

0400afd8 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 400afd8:	400a4c81 	jmpi	400a4c8 <_ZdlPv>

0400afdc <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 400afdc:	f800283a 	ret

0400afe0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 400afe0:	400a4c81 	jmpi	400a4c8 <_ZdlPv>

0400afe4 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
 400afe4:	008100b4 	movhi	r2,1026
 400afe8:	10b3c504 	addi	r2,r2,-12524
 400afec:	20800015 	stw	r2,0(r4)
 400aff0:	400afac1 	jmpi	400afac <_ZNSt9exceptionD1Ev>

0400aff4 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
 400aff4:	defffe04 	addi	sp,sp,-8
 400aff8:	008100b4 	movhi	r2,1026
 400affc:	dc000015 	stw	r16,0(sp)
 400b000:	dfc00115 	stw	ra,4(sp)
 400b004:	10b3c504 	addi	r2,r2,-12524
 400b008:	20800015 	stw	r2,0(r4)
 400b00c:	2021883a 	mov	r16,r4
 400b010:	400afac0 	call	400afac <_ZNSt9exceptionD1Ev>
 400b014:	8009883a 	mov	r4,r16
 400b018:	dfc00117 	ldw	ra,4(sp)
 400b01c:	dc000017 	ldw	r16,0(sp)
 400b020:	dec00204 	addi	sp,sp,8
 400b024:	400a4c81 	jmpi	400a4c8 <_ZdlPv>

0400b028 <__divsi3>:
 400b028:	20001b16 	blt	r4,zero,400b098 <__divsi3+0x70>
 400b02c:	000f883a 	mov	r7,zero
 400b030:	28001616 	blt	r5,zero,400b08c <__divsi3+0x64>
 400b034:	200d883a 	mov	r6,r4
 400b038:	29001a2e 	bgeu	r5,r4,400b0a4 <__divsi3+0x7c>
 400b03c:	00800804 	movi	r2,32
 400b040:	00c00044 	movi	r3,1
 400b044:	00000106 	br	400b04c <__divsi3+0x24>
 400b048:	10000d26 	beq	r2,zero,400b080 <__divsi3+0x58>
 400b04c:	294b883a 	add	r5,r5,r5
 400b050:	10bfffc4 	addi	r2,r2,-1
 400b054:	18c7883a 	add	r3,r3,r3
 400b058:	293ffb36 	bltu	r5,r4,400b048 <__alt_data_end+0xfc00b048>
 400b05c:	0005883a 	mov	r2,zero
 400b060:	18000726 	beq	r3,zero,400b080 <__divsi3+0x58>
 400b064:	0005883a 	mov	r2,zero
 400b068:	31400236 	bltu	r6,r5,400b074 <__divsi3+0x4c>
 400b06c:	314dc83a 	sub	r6,r6,r5
 400b070:	10c4b03a 	or	r2,r2,r3
 400b074:	1806d07a 	srli	r3,r3,1
 400b078:	280ad07a 	srli	r5,r5,1
 400b07c:	183ffa1e 	bne	r3,zero,400b068 <__alt_data_end+0xfc00b068>
 400b080:	38000126 	beq	r7,zero,400b088 <__divsi3+0x60>
 400b084:	0085c83a 	sub	r2,zero,r2
 400b088:	f800283a 	ret
 400b08c:	014bc83a 	sub	r5,zero,r5
 400b090:	39c0005c 	xori	r7,r7,1
 400b094:	003fe706 	br	400b034 <__alt_data_end+0xfc00b034>
 400b098:	0109c83a 	sub	r4,zero,r4
 400b09c:	01c00044 	movi	r7,1
 400b0a0:	003fe306 	br	400b030 <__alt_data_end+0xfc00b030>
 400b0a4:	00c00044 	movi	r3,1
 400b0a8:	003fee06 	br	400b064 <__alt_data_end+0xfc00b064>

0400b0ac <__modsi3>:
 400b0ac:	20001716 	blt	r4,zero,400b10c <__modsi3+0x60>
 400b0b0:	000f883a 	mov	r7,zero
 400b0b4:	2005883a 	mov	r2,r4
 400b0b8:	28001216 	blt	r5,zero,400b104 <__modsi3+0x58>
 400b0bc:	2900162e 	bgeu	r5,r4,400b118 <__modsi3+0x6c>
 400b0c0:	01800804 	movi	r6,32
 400b0c4:	00c00044 	movi	r3,1
 400b0c8:	00000106 	br	400b0d0 <__modsi3+0x24>
 400b0cc:	30000a26 	beq	r6,zero,400b0f8 <__modsi3+0x4c>
 400b0d0:	294b883a 	add	r5,r5,r5
 400b0d4:	31bfffc4 	addi	r6,r6,-1
 400b0d8:	18c7883a 	add	r3,r3,r3
 400b0dc:	293ffb36 	bltu	r5,r4,400b0cc <__alt_data_end+0xfc00b0cc>
 400b0e0:	18000526 	beq	r3,zero,400b0f8 <__modsi3+0x4c>
 400b0e4:	1806d07a 	srli	r3,r3,1
 400b0e8:	11400136 	bltu	r2,r5,400b0f0 <__modsi3+0x44>
 400b0ec:	1145c83a 	sub	r2,r2,r5
 400b0f0:	280ad07a 	srli	r5,r5,1
 400b0f4:	183ffb1e 	bne	r3,zero,400b0e4 <__alt_data_end+0xfc00b0e4>
 400b0f8:	38000126 	beq	r7,zero,400b100 <__modsi3+0x54>
 400b0fc:	0085c83a 	sub	r2,zero,r2
 400b100:	f800283a 	ret
 400b104:	014bc83a 	sub	r5,zero,r5
 400b108:	003fec06 	br	400b0bc <__alt_data_end+0xfc00b0bc>
 400b10c:	0109c83a 	sub	r4,zero,r4
 400b110:	01c00044 	movi	r7,1
 400b114:	003fe706 	br	400b0b4 <__alt_data_end+0xfc00b0b4>
 400b118:	00c00044 	movi	r3,1
 400b11c:	003ff106 	br	400b0e4 <__alt_data_end+0xfc00b0e4>

0400b120 <__udivsi3>:
 400b120:	200d883a 	mov	r6,r4
 400b124:	2900152e 	bgeu	r5,r4,400b17c <__udivsi3+0x5c>
 400b128:	28001416 	blt	r5,zero,400b17c <__udivsi3+0x5c>
 400b12c:	00800804 	movi	r2,32
 400b130:	00c00044 	movi	r3,1
 400b134:	00000206 	br	400b140 <__udivsi3+0x20>
 400b138:	10000e26 	beq	r2,zero,400b174 <__udivsi3+0x54>
 400b13c:	28000516 	blt	r5,zero,400b154 <__udivsi3+0x34>
 400b140:	294b883a 	add	r5,r5,r5
 400b144:	10bfffc4 	addi	r2,r2,-1
 400b148:	18c7883a 	add	r3,r3,r3
 400b14c:	293ffa36 	bltu	r5,r4,400b138 <__alt_data_end+0xfc00b138>
 400b150:	18000826 	beq	r3,zero,400b174 <__udivsi3+0x54>
 400b154:	0005883a 	mov	r2,zero
 400b158:	31400236 	bltu	r6,r5,400b164 <__udivsi3+0x44>
 400b15c:	314dc83a 	sub	r6,r6,r5
 400b160:	10c4b03a 	or	r2,r2,r3
 400b164:	1806d07a 	srli	r3,r3,1
 400b168:	280ad07a 	srli	r5,r5,1
 400b16c:	183ffa1e 	bne	r3,zero,400b158 <__alt_data_end+0xfc00b158>
 400b170:	f800283a 	ret
 400b174:	0005883a 	mov	r2,zero
 400b178:	f800283a 	ret
 400b17c:	00c00044 	movi	r3,1
 400b180:	003ff406 	br	400b154 <__alt_data_end+0xfc00b154>

0400b184 <__umodsi3>:
 400b184:	2005883a 	mov	r2,r4
 400b188:	2900122e 	bgeu	r5,r4,400b1d4 <__umodsi3+0x50>
 400b18c:	28001116 	blt	r5,zero,400b1d4 <__umodsi3+0x50>
 400b190:	01800804 	movi	r6,32
 400b194:	00c00044 	movi	r3,1
 400b198:	00000206 	br	400b1a4 <__umodsi3+0x20>
 400b19c:	30000c26 	beq	r6,zero,400b1d0 <__umodsi3+0x4c>
 400b1a0:	28000516 	blt	r5,zero,400b1b8 <__umodsi3+0x34>
 400b1a4:	294b883a 	add	r5,r5,r5
 400b1a8:	31bfffc4 	addi	r6,r6,-1
 400b1ac:	18c7883a 	add	r3,r3,r3
 400b1b0:	293ffa36 	bltu	r5,r4,400b19c <__alt_data_end+0xfc00b19c>
 400b1b4:	18000626 	beq	r3,zero,400b1d0 <__umodsi3+0x4c>
 400b1b8:	1806d07a 	srli	r3,r3,1
 400b1bc:	11400136 	bltu	r2,r5,400b1c4 <__umodsi3+0x40>
 400b1c0:	1145c83a 	sub	r2,r2,r5
 400b1c4:	280ad07a 	srli	r5,r5,1
 400b1c8:	183ffb1e 	bne	r3,zero,400b1b8 <__alt_data_end+0xfc00b1b8>
 400b1cc:	f800283a 	ret
 400b1d0:	f800283a 	ret
 400b1d4:	00c00044 	movi	r3,1
 400b1d8:	003ff706 	br	400b1b8 <__alt_data_end+0xfc00b1b8>

0400b1dc <__mulsi3>:
 400b1dc:	0005883a 	mov	r2,zero
 400b1e0:	20000726 	beq	r4,zero,400b200 <__mulsi3+0x24>
 400b1e4:	20c0004c 	andi	r3,r4,1
 400b1e8:	2008d07a 	srli	r4,r4,1
 400b1ec:	18000126 	beq	r3,zero,400b1f4 <__mulsi3+0x18>
 400b1f0:	1145883a 	add	r2,r2,r5
 400b1f4:	294b883a 	add	r5,r5,r5
 400b1f8:	203ffa1e 	bne	r4,zero,400b1e4 <__alt_data_end+0xfc00b1e4>
 400b1fc:	f800283a 	ret
 400b200:	f800283a 	ret

0400b204 <_Unwind_ForcedUnwind_Phase2>:
 400b204:	defff404 	addi	sp,sp,-48
 400b208:	dd800915 	stw	r22,36(sp)
 400b20c:	058100f4 	movhi	r22,1027
 400b210:	ddc00a15 	stw	r23,40(sp)
 400b214:	dd400815 	stw	r21,32(sp)
 400b218:	dd000715 	stw	r20,28(sp)
 400b21c:	dcc00615 	stw	r19,24(sp)
 400b220:	dc400415 	stw	r17,16(sp)
 400b224:	dc000315 	stw	r16,12(sp)
 400b228:	dfc00b15 	stw	ra,44(sp)
 400b22c:	dc800515 	stw	r18,20(sp)
 400b230:	2021883a 	mov	r16,r4
 400b234:	2823883a 	mov	r17,r5
 400b238:	24c00317 	ldw	r19,12(r4)
 400b23c:	25000417 	ldw	r20,16(r4)
 400b240:	28c00017 	ldw	r3,0(r5)
 400b244:	b599de04 	addi	r22,r22,26488
 400b248:	054001c4 	movi	r21,7
 400b24c:	05c00204 	movi	r23,8
 400b250:	00001606 	br	400b2ac <_Unwind_ForcedUnwind_Phase2+0xa8>
 400b254:	81800017 	ldw	r6,0(r16)
 400b258:	81c00117 	ldw	r7,4(r16)
 400b25c:	1c800617 	ldw	r18,24(r3)
 400b260:	dd000215 	stw	r20,8(sp)
 400b264:	dc400115 	stw	r17,4(sp)
 400b268:	dc000015 	stw	r16,0(sp)
 400b26c:	983ee83a 	callr	r19
 400b270:	01400284 	movi	r5,10
 400b274:	01000044 	movi	r4,1
 400b278:	1000241e 	bne	r2,zero,400b30c <_Unwind_ForcedUnwind_Phase2+0x108>
 400b27c:	90000726 	beq	r18,zero,400b29c <_Unwind_ForcedUnwind_Phase2+0x98>
 400b280:	81800017 	ldw	r6,0(r16)
 400b284:	81c00117 	ldw	r7,4(r16)
 400b288:	dc400115 	stw	r17,4(sp)
 400b28c:	dc000015 	stw	r16,0(sp)
 400b290:	903ee83a 	callr	r18
 400b294:	15401f26 	beq	r2,r21,400b314 <_Unwind_ForcedUnwind_Phase2+0x110>
 400b298:	15c01c1e 	bne	r2,r23,400b30c <_Unwind_ForcedUnwind_Phase2+0x108>
 400b29c:	88800017 	ldw	r2,0(r17)
 400b2a0:	10c00017 	ldw	r3,0(r2)
 400b2a4:	b0c00015 	stw	r3,0(r22)
 400b2a8:	88c00015 	stw	r3,0(r17)
 400b2ac:	01400284 	movi	r5,10
 400b2b0:	01000044 	movi	r4,1
 400b2b4:	183fe71e 	bne	r3,zero,400b254 <__alt_data_end+0xfc00b254>
 400b2b8:	81800017 	ldw	r6,0(r16)
 400b2bc:	81c00117 	ldw	r7,4(r16)
 400b2c0:	01400684 	movi	r5,26
 400b2c4:	dd000215 	stw	r20,8(sp)
 400b2c8:	dc400115 	stw	r17,4(sp)
 400b2cc:	dc000015 	stw	r16,0(sp)
 400b2d0:	01000044 	movi	r4,1
 400b2d4:	983ee83a 	callr	r19
 400b2d8:	10000c1e 	bne	r2,zero,400b30c <_Unwind_ForcedUnwind_Phase2+0x108>
 400b2dc:	00800144 	movi	r2,5
 400b2e0:	dfc00b17 	ldw	ra,44(sp)
 400b2e4:	ddc00a17 	ldw	r23,40(sp)
 400b2e8:	dd800917 	ldw	r22,36(sp)
 400b2ec:	dd400817 	ldw	r21,32(sp)
 400b2f0:	dd000717 	ldw	r20,28(sp)
 400b2f4:	dcc00617 	ldw	r19,24(sp)
 400b2f8:	dc800517 	ldw	r18,20(sp)
 400b2fc:	dc400417 	ldw	r17,16(sp)
 400b300:	dc000317 	ldw	r16,12(sp)
 400b304:	dec00c04 	addi	sp,sp,48
 400b308:	f800283a 	ret
 400b30c:	00800084 	movi	r2,2
 400b310:	003ff306 	br	400b2e0 <__alt_data_end+0xfc00b2e0>
 400b314:	a805883a 	mov	r2,r21
 400b318:	003ff106 	br	400b2e0 <__alt_data_end+0xfc00b2e0>

0400b31c <_Unwind_RaiseException_Phase2>:
 400b31c:	28c00017 	ldw	r3,0(r5)
 400b320:	defff804 	addi	sp,sp,-32
 400b324:	dcc00515 	stw	r19,20(sp)
 400b328:	dc800415 	stw	r18,16(sp)
 400b32c:	dc400315 	stw	r17,12(sp)
 400b330:	dc000215 	stw	r16,8(sp)
 400b334:	dfc00715 	stw	ra,28(sp)
 400b338:	dd000615 	stw	r20,24(sp)
 400b33c:	2823883a 	mov	r17,r5
 400b340:	2021883a 	mov	r16,r4
 400b344:	048001c4 	movi	r18,7
 400b348:	04c00204 	movi	r19,8
 400b34c:	18001326 	beq	r3,zero,400b39c <_Unwind_RaiseException_Phase2+0x80>
 400b350:	81000417 	ldw	r4,16(r16)
 400b354:	1a000617 	ldw	r8,24(r3)
 400b358:	19001926 	beq	r3,r4,400b3c0 <_Unwind_RaiseException_Phase2+0xa4>
 400b35c:	40000c26 	beq	r8,zero,400b390 <_Unwind_RaiseException_Phase2+0x74>
 400b360:	01400084 	movi	r5,2
 400b364:	0029883a 	mov	r20,zero
 400b368:	81800017 	ldw	r6,0(r16)
 400b36c:	81c00117 	ldw	r7,4(r16)
 400b370:	01000044 	movi	r4,1
 400b374:	dc400115 	stw	r17,4(sp)
 400b378:	dc000015 	stw	r16,0(sp)
 400b37c:	403ee83a 	callr	r8
 400b380:	14801326 	beq	r2,r18,400b3d0 <_Unwind_RaiseException_Phase2+0xb4>
 400b384:	14c0051e 	bne	r2,r19,400b39c <_Unwind_RaiseException_Phase2+0x80>
 400b388:	a000131e 	bne	r20,zero,400b3d8 <_Unwind_RaiseException_Phase2+0xbc>
 400b38c:	88c00017 	ldw	r3,0(r17)
 400b390:	18c00017 	ldw	r3,0(r3)
 400b394:	88c00015 	stw	r3,0(r17)
 400b398:	183fed1e 	bne	r3,zero,400b350 <__alt_data_end+0xfc00b350>
 400b39c:	00800084 	movi	r2,2
 400b3a0:	dfc00717 	ldw	ra,28(sp)
 400b3a4:	dd000617 	ldw	r20,24(sp)
 400b3a8:	dcc00517 	ldw	r19,20(sp)
 400b3ac:	dc800417 	ldw	r18,16(sp)
 400b3b0:	dc400317 	ldw	r17,12(sp)
 400b3b4:	dc000217 	ldw	r16,8(sp)
 400b3b8:	dec00804 	addi	sp,sp,32
 400b3bc:	f800283a 	ret
 400b3c0:	40000526 	beq	r8,zero,400b3d8 <_Unwind_RaiseException_Phase2+0xbc>
 400b3c4:	01400184 	movi	r5,6
 400b3c8:	05000104 	movi	r20,4
 400b3cc:	003fe606 	br	400b368 <__alt_data_end+0xfc00b368>
 400b3d0:	9005883a 	mov	r2,r18
 400b3d4:	003ff206 	br	400b3a0 <__alt_data_end+0xfc00b3a0>
 400b3d8:	400b7240 	call	400b724 <abort>

0400b3dc <uw_install_context.isra.1>:
 400b3dc:	20c00017 	ldw	r3,0(r4)
 400b3e0:	deffff04 	addi	sp,sp,-4
 400b3e4:	014100f4 	movhi	r5,1027
 400b3e8:	19000917 	ldw	r4,36(r3)
 400b3ec:	df000015 	stw	fp,0(sp)
 400b3f0:	18800804 	addi	r2,r3,32
 400b3f4:	d839883a 	mov	fp,sp
 400b3f8:	2959de04 	addi	r5,r5,26488
 400b3fc:	28c00015 	stw	r3,0(r5)
 400b400:	17000017 	ldw	fp,0(r2)
 400b404:	1ec00a17 	ldw	sp,40(r3)
 400b408:	2000683a 	jmp	r4

0400b40c <_Unwind_SjLj_Register>:
 400b40c:	008100f4 	movhi	r2,1027
 400b410:	1099de04 	addi	r2,r2,26488
 400b414:	10c00017 	ldw	r3,0(r2)
 400b418:	11000015 	stw	r4,0(r2)
 400b41c:	20c00015 	stw	r3,0(r4)
 400b420:	f800283a 	ret

0400b424 <_Unwind_SjLj_Unregister>:
 400b424:	20c00017 	ldw	r3,0(r4)
 400b428:	008100f4 	movhi	r2,1027
 400b42c:	1099de04 	addi	r2,r2,26488
 400b430:	10c00015 	stw	r3,0(r2)
 400b434:	f800283a 	ret

0400b438 <_Unwind_GetGR>:
 400b438:	20800017 	ldw	r2,0(r4)
 400b43c:	29400084 	addi	r5,r5,2
 400b440:	294b883a 	add	r5,r5,r5
 400b444:	294b883a 	add	r5,r5,r5
 400b448:	114b883a 	add	r5,r2,r5
 400b44c:	28800017 	ldw	r2,0(r5)
 400b450:	f800283a 	ret

0400b454 <_Unwind_GetCFA>:
 400b454:	20800017 	ldw	r2,0(r4)
 400b458:	10000226 	beq	r2,zero,400b464 <_Unwind_GetCFA+0x10>
 400b45c:	10800a17 	ldw	r2,40(r2)
 400b460:	f800283a 	ret
 400b464:	0005883a 	mov	r2,zero
 400b468:	f800283a 	ret

0400b46c <_Unwind_SetGR>:
 400b46c:	20800017 	ldw	r2,0(r4)
 400b470:	29400084 	addi	r5,r5,2
 400b474:	294b883a 	add	r5,r5,r5
 400b478:	294b883a 	add	r5,r5,r5
 400b47c:	114b883a 	add	r5,r2,r5
 400b480:	29800015 	stw	r6,0(r5)
 400b484:	f800283a 	ret

0400b488 <_Unwind_GetIP>:
 400b488:	20800017 	ldw	r2,0(r4)
 400b48c:	10800117 	ldw	r2,4(r2)
 400b490:	10800044 	addi	r2,r2,1
 400b494:	f800283a 	ret

0400b498 <_Unwind_GetIPInfo>:
 400b498:	20800017 	ldw	r2,0(r4)
 400b49c:	28000015 	stw	zero,0(r5)
 400b4a0:	10000326 	beq	r2,zero,400b4b0 <_Unwind_GetIPInfo+0x18>
 400b4a4:	10800117 	ldw	r2,4(r2)
 400b4a8:	10800044 	addi	r2,r2,1
 400b4ac:	f800283a 	ret
 400b4b0:	0005883a 	mov	r2,zero
 400b4b4:	f800283a 	ret

0400b4b8 <_Unwind_SetIP>:
 400b4b8:	20800017 	ldw	r2,0(r4)
 400b4bc:	297fffc4 	addi	r5,r5,-1
 400b4c0:	11400115 	stw	r5,4(r2)
 400b4c4:	f800283a 	ret

0400b4c8 <_Unwind_GetLanguageSpecificData>:
 400b4c8:	20800017 	ldw	r2,0(r4)
 400b4cc:	10800717 	ldw	r2,28(r2)
 400b4d0:	f800283a 	ret

0400b4d4 <_Unwind_GetRegionStart>:
 400b4d4:	0005883a 	mov	r2,zero
 400b4d8:	f800283a 	ret

0400b4dc <_Unwind_FindEnclosingFunction>:
 400b4dc:	0005883a 	mov	r2,zero
 400b4e0:	f800283a 	ret

0400b4e4 <_Unwind_GetDataRelBase>:
 400b4e4:	0005883a 	mov	r2,zero
 400b4e8:	f800283a 	ret

0400b4ec <_Unwind_GetTextRelBase>:
 400b4ec:	0005883a 	mov	r2,zero
 400b4f0:	f800283a 	ret

0400b4f4 <_Unwind_SjLj_RaiseException>:
 400b4f4:	008100f4 	movhi	r2,1027
 400b4f8:	defff804 	addi	sp,sp,-32
 400b4fc:	1099de04 	addi	r2,r2,26488
 400b500:	dc800515 	stw	r18,20(sp)
 400b504:	14800017 	ldw	r18,0(r2)
 400b508:	dfc00715 	stw	ra,28(sp)
 400b50c:	dcc00615 	stw	r19,24(sp)
 400b510:	dc400415 	stw	r17,16(sp)
 400b514:	dc000315 	stw	r16,12(sp)
 400b518:	dc800215 	stw	r18,8(sp)
 400b51c:	90001426 	beq	r18,zero,400b570 <_Unwind_SjLj_RaiseException+0x7c>
 400b520:	2021883a 	mov	r16,r4
 400b524:	9005883a 	mov	r2,r18
 400b528:	04400184 	movi	r17,6
 400b52c:	04c00204 	movi	r19,8
 400b530:	10800617 	ldw	r2,24(r2)
 400b534:	10000a26 	beq	r2,zero,400b560 <_Unwind_SjLj_RaiseException+0x6c>
 400b538:	81800017 	ldw	r6,0(r16)
 400b53c:	81c00117 	ldw	r7,4(r16)
 400b540:	01400044 	movi	r5,1
 400b544:	d8c00204 	addi	r3,sp,8
 400b548:	d8c00115 	stw	r3,4(sp)
 400b54c:	dc000015 	stw	r16,0(sp)
 400b550:	2809883a 	mov	r4,r5
 400b554:	103ee83a 	callr	r2
 400b558:	14400d26 	beq	r2,r17,400b590 <_Unwind_SjLj_RaiseException+0x9c>
 400b55c:	14c0171e 	bne	r2,r19,400b5bc <_Unwind_SjLj_RaiseException+0xc8>
 400b560:	d8800217 	ldw	r2,8(sp)
 400b564:	10800017 	ldw	r2,0(r2)
 400b568:	d8800215 	stw	r2,8(sp)
 400b56c:	103ff01e 	bne	r2,zero,400b530 <__alt_data_end+0xfc00b530>
 400b570:	00800144 	movi	r2,5
 400b574:	dfc00717 	ldw	ra,28(sp)
 400b578:	dcc00617 	ldw	r19,24(sp)
 400b57c:	dc800517 	ldw	r18,20(sp)
 400b580:	dc400417 	ldw	r17,16(sp)
 400b584:	dc000317 	ldw	r16,12(sp)
 400b588:	dec00804 	addi	sp,sp,32
 400b58c:	f800283a 	ret
 400b590:	d8800217 	ldw	r2,8(sp)
 400b594:	80000315 	stw	zero,12(r16)
 400b598:	d9400204 	addi	r5,sp,8
 400b59c:	80800415 	stw	r2,16(r16)
 400b5a0:	8009883a 	mov	r4,r16
 400b5a4:	dc800215 	stw	r18,8(sp)
 400b5a8:	400b31c0 	call	400b31c <_Unwind_RaiseException_Phase2>
 400b5ac:	00c001c4 	movi	r3,7
 400b5b0:	10fff01e 	bne	r2,r3,400b574 <__alt_data_end+0xfc00b574>
 400b5b4:	d9000204 	addi	r4,sp,8
 400b5b8:	400b3dc0 	call	400b3dc <uw_install_context.isra.1>
 400b5bc:	008000c4 	movi	r2,3
 400b5c0:	003fec06 	br	400b574 <__alt_data_end+0xfc00b574>

0400b5c4 <_Unwind_SjLj_ForcedUnwind>:
 400b5c4:	00c100f4 	movhi	r3,1027
 400b5c8:	18d9de04 	addi	r3,r3,26488
 400b5cc:	defffe04 	addi	sp,sp,-8
 400b5d0:	18c00017 	ldw	r3,0(r3)
 400b5d4:	dfc00115 	stw	ra,4(sp)
 400b5d8:	21400315 	stw	r5,12(r4)
 400b5dc:	21800415 	stw	r6,16(r4)
 400b5e0:	d80b883a 	mov	r5,sp
 400b5e4:	d8c00015 	stw	r3,0(sp)
 400b5e8:	400b2040 	call	400b204 <_Unwind_ForcedUnwind_Phase2>
 400b5ec:	00c001c4 	movi	r3,7
 400b5f0:	10c00326 	beq	r2,r3,400b600 <_Unwind_SjLj_ForcedUnwind+0x3c>
 400b5f4:	dfc00117 	ldw	ra,4(sp)
 400b5f8:	dec00204 	addi	sp,sp,8
 400b5fc:	f800283a 	ret
 400b600:	d809883a 	mov	r4,sp
 400b604:	400b3dc0 	call	400b3dc <uw_install_context.isra.1>

0400b608 <_Unwind_SjLj_Resume>:
 400b608:	00c100f4 	movhi	r3,1027
 400b60c:	18d9de04 	addi	r3,r3,26488
 400b610:	18c00017 	ldw	r3,0(r3)
 400b614:	20800317 	ldw	r2,12(r4)
 400b618:	defffe04 	addi	sp,sp,-8
 400b61c:	dfc00115 	stw	ra,4(sp)
 400b620:	d8c00015 	stw	r3,0(sp)
 400b624:	d80b883a 	mov	r5,sp
 400b628:	1000041e 	bne	r2,zero,400b63c <_Unwind_SjLj_Resume+0x34>
 400b62c:	400b31c0 	call	400b31c <_Unwind_RaiseException_Phase2>
 400b630:	00c001c4 	movi	r3,7
 400b634:	10c00326 	beq	r2,r3,400b644 <_Unwind_SjLj_Resume+0x3c>
 400b638:	400b7240 	call	400b724 <abort>
 400b63c:	400b2040 	call	400b204 <_Unwind_ForcedUnwind_Phase2>
 400b640:	003ffb06 	br	400b630 <__alt_data_end+0xfc00b630>
 400b644:	d809883a 	mov	r4,sp
 400b648:	400b3dc0 	call	400b3dc <uw_install_context.isra.1>

0400b64c <_Unwind_SjLj_Resume_or_Rethrow>:
 400b64c:	20800317 	ldw	r2,12(r4)
 400b650:	defffe04 	addi	sp,sp,-8
 400b654:	dfc00115 	stw	ra,4(sp)
 400b658:	1000041e 	bne	r2,zero,400b66c <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 400b65c:	400b4f40 	call	400b4f4 <_Unwind_SjLj_RaiseException>
 400b660:	dfc00117 	ldw	ra,4(sp)
 400b664:	dec00204 	addi	sp,sp,8
 400b668:	f800283a 	ret
 400b66c:	008100f4 	movhi	r2,1027
 400b670:	1099de04 	addi	r2,r2,26488
 400b674:	10800017 	ldw	r2,0(r2)
 400b678:	d80b883a 	mov	r5,sp
 400b67c:	d8800015 	stw	r2,0(sp)
 400b680:	400b2040 	call	400b204 <_Unwind_ForcedUnwind_Phase2>
 400b684:	00c001c4 	movi	r3,7
 400b688:	10c00126 	beq	r2,r3,400b690 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 400b68c:	400b7240 	call	400b724 <abort>
 400b690:	d809883a 	mov	r4,sp
 400b694:	400b3dc0 	call	400b3dc <uw_install_context.isra.1>

0400b698 <_Unwind_DeleteException>:
 400b698:	20800217 	ldw	r2,8(r4)
 400b69c:	10000326 	beq	r2,zero,400b6ac <_Unwind_DeleteException+0x14>
 400b6a0:	200b883a 	mov	r5,r4
 400b6a4:	01000044 	movi	r4,1
 400b6a8:	1000683a 	jmp	r2
 400b6ac:	f800283a 	ret

0400b6b0 <_Unwind_Backtrace>:
 400b6b0:	008100f4 	movhi	r2,1027
 400b6b4:	1099de04 	addi	r2,r2,26488
 400b6b8:	10800017 	ldw	r2,0(r2)
 400b6bc:	defffc04 	addi	sp,sp,-16
 400b6c0:	dc400215 	stw	r17,8(sp)
 400b6c4:	dc000115 	stw	r16,4(sp)
 400b6c8:	dfc00315 	stw	ra,12(sp)
 400b6cc:	2023883a 	mov	r17,r4
 400b6d0:	2821883a 	mov	r16,r5
 400b6d4:	d8800015 	stw	r2,0(sp)
 400b6d8:	00000506 	br	400b6f0 <_Unwind_Backtrace+0x40>
 400b6dc:	883ee83a 	callr	r17
 400b6e0:	10000e1e 	bne	r2,zero,400b71c <_Unwind_Backtrace+0x6c>
 400b6e4:	d8800017 	ldw	r2,0(sp)
 400b6e8:	10800017 	ldw	r2,0(r2)
 400b6ec:	d8800015 	stw	r2,0(sp)
 400b6f0:	800b883a 	mov	r5,r16
 400b6f4:	d809883a 	mov	r4,sp
 400b6f8:	103ff81e 	bne	r2,zero,400b6dc <__alt_data_end+0xfc00b6dc>
 400b6fc:	883ee83a 	callr	r17
 400b700:	1000061e 	bne	r2,zero,400b71c <_Unwind_Backtrace+0x6c>
 400b704:	00800144 	movi	r2,5
 400b708:	dfc00317 	ldw	ra,12(sp)
 400b70c:	dc400217 	ldw	r17,8(sp)
 400b710:	dc000117 	ldw	r16,4(sp)
 400b714:	dec00404 	addi	sp,sp,16
 400b718:	f800283a 	ret
 400b71c:	008000c4 	movi	r2,3
 400b720:	003ff906 	br	400b708 <__alt_data_end+0xfc00b708>

0400b724 <abort>:
 400b724:	deffff04 	addi	sp,sp,-4
 400b728:	01000184 	movi	r4,6
 400b72c:	dfc00015 	stw	ra,0(sp)
 400b730:	400c6b00 	call	400c6b0 <raise>
 400b734:	01000044 	movi	r4,1
 400b738:	4018b640 	call	4018b64 <_exit>

0400b73c <clock>:
 400b73c:	008100f4 	movhi	r2,1027
 400b740:	10a71904 	addi	r2,r2,-25500
 400b744:	11000017 	ldw	r4,0(r2)
 400b748:	defffb04 	addi	sp,sp,-20
 400b74c:	d80b883a 	mov	r5,sp
 400b750:	dfc00415 	stw	ra,16(sp)
 400b754:	400c8d40 	call	400c8d4 <_times_r>
 400b758:	00ffffc4 	movi	r3,-1
 400b75c:	10c00726 	beq	r2,r3,400b77c <clock+0x40>
 400b760:	d8c00017 	ldw	r3,0(sp)
 400b764:	d8800117 	ldw	r2,4(sp)
 400b768:	1885883a 	add	r2,r3,r2
 400b76c:	d8c00217 	ldw	r3,8(sp)
 400b770:	10c7883a 	add	r3,r2,r3
 400b774:	d8800317 	ldw	r2,12(sp)
 400b778:	1885883a 	add	r2,r3,r2
 400b77c:	dfc00417 	ldw	ra,16(sp)
 400b780:	dec00504 	addi	sp,sp,20
 400b784:	f800283a 	ret

0400b788 <malloc>:
 400b788:	008100f4 	movhi	r2,1027
 400b78c:	10a71904 	addi	r2,r2,-25500
 400b790:	200b883a 	mov	r5,r4
 400b794:	11000017 	ldw	r4,0(r2)
 400b798:	400b7b01 	jmpi	400b7b0 <_malloc_r>

0400b79c <free>:
 400b79c:	008100f4 	movhi	r2,1027
 400b7a0:	10a71904 	addi	r2,r2,-25500
 400b7a4:	200b883a 	mov	r5,r4
 400b7a8:	11000017 	ldw	r4,0(r2)
 400b7ac:	4010e101 	jmpi	4010e10 <_free_r>

0400b7b0 <_malloc_r>:
 400b7b0:	defff504 	addi	sp,sp,-44
 400b7b4:	dc800315 	stw	r18,12(sp)
 400b7b8:	dfc00a15 	stw	ra,40(sp)
 400b7bc:	df000915 	stw	fp,36(sp)
 400b7c0:	ddc00815 	stw	r23,32(sp)
 400b7c4:	dd800715 	stw	r22,28(sp)
 400b7c8:	dd400615 	stw	r21,24(sp)
 400b7cc:	dd000515 	stw	r20,20(sp)
 400b7d0:	dcc00415 	stw	r19,16(sp)
 400b7d4:	dc400215 	stw	r17,8(sp)
 400b7d8:	dc000115 	stw	r16,4(sp)
 400b7dc:	288002c4 	addi	r2,r5,11
 400b7e0:	00c00584 	movi	r3,22
 400b7e4:	2025883a 	mov	r18,r4
 400b7e8:	18807f2e 	bgeu	r3,r2,400b9e8 <_malloc_r+0x238>
 400b7ec:	047ffe04 	movi	r17,-8
 400b7f0:	1462703a 	and	r17,r2,r17
 400b7f4:	8800a316 	blt	r17,zero,400ba84 <_malloc_r+0x2d4>
 400b7f8:	8940a236 	bltu	r17,r5,400ba84 <_malloc_r+0x2d4>
 400b7fc:	40191800 	call	4019180 <__malloc_lock>
 400b800:	00807dc4 	movi	r2,503
 400b804:	1441e92e 	bgeu	r2,r17,400bfac <_malloc_r+0x7fc>
 400b808:	8804d27a 	srli	r2,r17,9
 400b80c:	1000a126 	beq	r2,zero,400ba94 <_malloc_r+0x2e4>
 400b810:	00c00104 	movi	r3,4
 400b814:	18811e36 	bltu	r3,r2,400bc90 <_malloc_r+0x4e0>
 400b818:	8804d1ba 	srli	r2,r17,6
 400b81c:	12000e44 	addi	r8,r2,57
 400b820:	11c00e04 	addi	r7,r2,56
 400b824:	4209883a 	add	r4,r8,r8
 400b828:	04c100f4 	movhi	r19,1027
 400b82c:	2109883a 	add	r4,r4,r4
 400b830:	9ce15d04 	addi	r19,r19,-31372
 400b834:	2109883a 	add	r4,r4,r4
 400b838:	9909883a 	add	r4,r19,r4
 400b83c:	24000117 	ldw	r16,4(r4)
 400b840:	213ffe04 	addi	r4,r4,-8
 400b844:	24009726 	beq	r4,r16,400baa4 <_malloc_r+0x2f4>
 400b848:	80800117 	ldw	r2,4(r16)
 400b84c:	01bfff04 	movi	r6,-4
 400b850:	014003c4 	movi	r5,15
 400b854:	1184703a 	and	r2,r2,r6
 400b858:	1447c83a 	sub	r3,r2,r17
 400b85c:	28c00716 	blt	r5,r3,400b87c <_malloc_r+0xcc>
 400b860:	1800920e 	bge	r3,zero,400baac <_malloc_r+0x2fc>
 400b864:	84000317 	ldw	r16,12(r16)
 400b868:	24008e26 	beq	r4,r16,400baa4 <_malloc_r+0x2f4>
 400b86c:	80800117 	ldw	r2,4(r16)
 400b870:	1184703a 	and	r2,r2,r6
 400b874:	1447c83a 	sub	r3,r2,r17
 400b878:	28fff90e 	bge	r5,r3,400b860 <__alt_data_end+0xfc00b860>
 400b87c:	3809883a 	mov	r4,r7
 400b880:	018100f4 	movhi	r6,1027
 400b884:	9c000417 	ldw	r16,16(r19)
 400b888:	31a15d04 	addi	r6,r6,-31372
 400b88c:	32000204 	addi	r8,r6,8
 400b890:	82013426 	beq	r16,r8,400bd64 <_malloc_r+0x5b4>
 400b894:	80c00117 	ldw	r3,4(r16)
 400b898:	00bfff04 	movi	r2,-4
 400b89c:	188e703a 	and	r7,r3,r2
 400b8a0:	3c45c83a 	sub	r2,r7,r17
 400b8a4:	00c003c4 	movi	r3,15
 400b8a8:	18811f16 	blt	r3,r2,400bd28 <_malloc_r+0x578>
 400b8ac:	32000515 	stw	r8,20(r6)
 400b8b0:	32000415 	stw	r8,16(r6)
 400b8b4:	10007f0e 	bge	r2,zero,400bab4 <_malloc_r+0x304>
 400b8b8:	00807fc4 	movi	r2,511
 400b8bc:	11c0fd36 	bltu	r2,r7,400bcb4 <_malloc_r+0x504>
 400b8c0:	3806d0fa 	srli	r3,r7,3
 400b8c4:	01c00044 	movi	r7,1
 400b8c8:	30800117 	ldw	r2,4(r6)
 400b8cc:	19400044 	addi	r5,r3,1
 400b8d0:	294b883a 	add	r5,r5,r5
 400b8d4:	1807d0ba 	srai	r3,r3,2
 400b8d8:	294b883a 	add	r5,r5,r5
 400b8dc:	294b883a 	add	r5,r5,r5
 400b8e0:	298b883a 	add	r5,r5,r6
 400b8e4:	38c6983a 	sll	r3,r7,r3
 400b8e8:	29c00017 	ldw	r7,0(r5)
 400b8ec:	2a7ffe04 	addi	r9,r5,-8
 400b8f0:	1886b03a 	or	r3,r3,r2
 400b8f4:	82400315 	stw	r9,12(r16)
 400b8f8:	81c00215 	stw	r7,8(r16)
 400b8fc:	30c00115 	stw	r3,4(r6)
 400b900:	2c000015 	stw	r16,0(r5)
 400b904:	3c000315 	stw	r16,12(r7)
 400b908:	2005d0ba 	srai	r2,r4,2
 400b90c:	01400044 	movi	r5,1
 400b910:	288a983a 	sll	r5,r5,r2
 400b914:	19406f36 	bltu	r3,r5,400bad4 <_malloc_r+0x324>
 400b918:	28c4703a 	and	r2,r5,r3
 400b91c:	10000a1e 	bne	r2,zero,400b948 <_malloc_r+0x198>
 400b920:	00bfff04 	movi	r2,-4
 400b924:	294b883a 	add	r5,r5,r5
 400b928:	2088703a 	and	r4,r4,r2
 400b92c:	28c4703a 	and	r2,r5,r3
 400b930:	21000104 	addi	r4,r4,4
 400b934:	1000041e 	bne	r2,zero,400b948 <_malloc_r+0x198>
 400b938:	294b883a 	add	r5,r5,r5
 400b93c:	28c4703a 	and	r2,r5,r3
 400b940:	21000104 	addi	r4,r4,4
 400b944:	103ffc26 	beq	r2,zero,400b938 <__alt_data_end+0xfc00b938>
 400b948:	02bfff04 	movi	r10,-4
 400b94c:	024003c4 	movi	r9,15
 400b950:	21800044 	addi	r6,r4,1
 400b954:	318d883a 	add	r6,r6,r6
 400b958:	318d883a 	add	r6,r6,r6
 400b95c:	318d883a 	add	r6,r6,r6
 400b960:	998d883a 	add	r6,r19,r6
 400b964:	333ffe04 	addi	r12,r6,-8
 400b968:	2017883a 	mov	r11,r4
 400b96c:	31800104 	addi	r6,r6,4
 400b970:	34000017 	ldw	r16,0(r6)
 400b974:	31fffd04 	addi	r7,r6,-12
 400b978:	81c0041e 	bne	r16,r7,400b98c <_malloc_r+0x1dc>
 400b97c:	0000fb06 	br	400bd6c <_malloc_r+0x5bc>
 400b980:	1801030e 	bge	r3,zero,400bd90 <_malloc_r+0x5e0>
 400b984:	84000317 	ldw	r16,12(r16)
 400b988:	81c0f826 	beq	r16,r7,400bd6c <_malloc_r+0x5bc>
 400b98c:	80800117 	ldw	r2,4(r16)
 400b990:	1284703a 	and	r2,r2,r10
 400b994:	1447c83a 	sub	r3,r2,r17
 400b998:	48fff90e 	bge	r9,r3,400b980 <__alt_data_end+0xfc00b980>
 400b99c:	80800317 	ldw	r2,12(r16)
 400b9a0:	81000217 	ldw	r4,8(r16)
 400b9a4:	89400054 	ori	r5,r17,1
 400b9a8:	81400115 	stw	r5,4(r16)
 400b9ac:	20800315 	stw	r2,12(r4)
 400b9b0:	11000215 	stw	r4,8(r2)
 400b9b4:	8463883a 	add	r17,r16,r17
 400b9b8:	9c400515 	stw	r17,20(r19)
 400b9bc:	9c400415 	stw	r17,16(r19)
 400b9c0:	18800054 	ori	r2,r3,1
 400b9c4:	88800115 	stw	r2,4(r17)
 400b9c8:	8a000315 	stw	r8,12(r17)
 400b9cc:	8a000215 	stw	r8,8(r17)
 400b9d0:	88e3883a 	add	r17,r17,r3
 400b9d4:	88c00015 	stw	r3,0(r17)
 400b9d8:	9009883a 	mov	r4,r18
 400b9dc:	40191a40 	call	40191a4 <__malloc_unlock>
 400b9e0:	80800204 	addi	r2,r16,8
 400b9e4:	00001b06 	br	400ba54 <_malloc_r+0x2a4>
 400b9e8:	04400404 	movi	r17,16
 400b9ec:	89402536 	bltu	r17,r5,400ba84 <_malloc_r+0x2d4>
 400b9f0:	40191800 	call	4019180 <__malloc_lock>
 400b9f4:	00800184 	movi	r2,6
 400b9f8:	01000084 	movi	r4,2
 400b9fc:	04c100f4 	movhi	r19,1027
 400ba00:	1085883a 	add	r2,r2,r2
 400ba04:	9ce15d04 	addi	r19,r19,-31372
 400ba08:	1085883a 	add	r2,r2,r2
 400ba0c:	9885883a 	add	r2,r19,r2
 400ba10:	14000117 	ldw	r16,4(r2)
 400ba14:	10fffe04 	addi	r3,r2,-8
 400ba18:	80c0d926 	beq	r16,r3,400bd80 <_malloc_r+0x5d0>
 400ba1c:	80c00117 	ldw	r3,4(r16)
 400ba20:	81000317 	ldw	r4,12(r16)
 400ba24:	00bfff04 	movi	r2,-4
 400ba28:	1884703a 	and	r2,r3,r2
 400ba2c:	81400217 	ldw	r5,8(r16)
 400ba30:	8085883a 	add	r2,r16,r2
 400ba34:	10c00117 	ldw	r3,4(r2)
 400ba38:	29000315 	stw	r4,12(r5)
 400ba3c:	21400215 	stw	r5,8(r4)
 400ba40:	18c00054 	ori	r3,r3,1
 400ba44:	10c00115 	stw	r3,4(r2)
 400ba48:	9009883a 	mov	r4,r18
 400ba4c:	40191a40 	call	40191a4 <__malloc_unlock>
 400ba50:	80800204 	addi	r2,r16,8
 400ba54:	dfc00a17 	ldw	ra,40(sp)
 400ba58:	df000917 	ldw	fp,36(sp)
 400ba5c:	ddc00817 	ldw	r23,32(sp)
 400ba60:	dd800717 	ldw	r22,28(sp)
 400ba64:	dd400617 	ldw	r21,24(sp)
 400ba68:	dd000517 	ldw	r20,20(sp)
 400ba6c:	dcc00417 	ldw	r19,16(sp)
 400ba70:	dc800317 	ldw	r18,12(sp)
 400ba74:	dc400217 	ldw	r17,8(sp)
 400ba78:	dc000117 	ldw	r16,4(sp)
 400ba7c:	dec00b04 	addi	sp,sp,44
 400ba80:	f800283a 	ret
 400ba84:	00800304 	movi	r2,12
 400ba88:	90800015 	stw	r2,0(r18)
 400ba8c:	0005883a 	mov	r2,zero
 400ba90:	003ff006 	br	400ba54 <__alt_data_end+0xfc00ba54>
 400ba94:	01002004 	movi	r4,128
 400ba98:	02001004 	movi	r8,64
 400ba9c:	01c00fc4 	movi	r7,63
 400baa0:	003f6106 	br	400b828 <__alt_data_end+0xfc00b828>
 400baa4:	4009883a 	mov	r4,r8
 400baa8:	003f7506 	br	400b880 <__alt_data_end+0xfc00b880>
 400baac:	81000317 	ldw	r4,12(r16)
 400bab0:	003fde06 	br	400ba2c <__alt_data_end+0xfc00ba2c>
 400bab4:	81c5883a 	add	r2,r16,r7
 400bab8:	11400117 	ldw	r5,4(r2)
 400babc:	9009883a 	mov	r4,r18
 400bac0:	29400054 	ori	r5,r5,1
 400bac4:	11400115 	stw	r5,4(r2)
 400bac8:	40191a40 	call	40191a4 <__malloc_unlock>
 400bacc:	80800204 	addi	r2,r16,8
 400bad0:	003fe006 	br	400ba54 <__alt_data_end+0xfc00ba54>
 400bad4:	9c000217 	ldw	r16,8(r19)
 400bad8:	00bfff04 	movi	r2,-4
 400badc:	85800117 	ldw	r22,4(r16)
 400bae0:	b0ac703a 	and	r22,r22,r2
 400bae4:	b4400336 	bltu	r22,r17,400baf4 <_malloc_r+0x344>
 400bae8:	b445c83a 	sub	r2,r22,r17
 400baec:	00c003c4 	movi	r3,15
 400baf0:	18805d16 	blt	r3,r2,400bc68 <_malloc_r+0x4b8>
 400baf4:	05c100f4 	movhi	r23,1027
 400baf8:	008100f4 	movhi	r2,1027
 400bafc:	1099e104 	addi	r2,r2,26500
 400bb00:	bde71a04 	addi	r23,r23,-25496
 400bb04:	15400017 	ldw	r21,0(r2)
 400bb08:	b8c00017 	ldw	r3,0(r23)
 400bb0c:	00bfffc4 	movi	r2,-1
 400bb10:	858d883a 	add	r6,r16,r22
 400bb14:	8d6b883a 	add	r21,r17,r21
 400bb18:	1880ea26 	beq	r3,r2,400bec4 <_malloc_r+0x714>
 400bb1c:	ad4403c4 	addi	r21,r21,4111
 400bb20:	00bc0004 	movi	r2,-4096
 400bb24:	a8aa703a 	and	r21,r21,r2
 400bb28:	a80b883a 	mov	r5,r21
 400bb2c:	9009883a 	mov	r4,r18
 400bb30:	d9800015 	stw	r6,0(sp)
 400bb34:	400c4080 	call	400c408 <_sbrk_r>
 400bb38:	1029883a 	mov	r20,r2
 400bb3c:	00bfffc4 	movi	r2,-1
 400bb40:	d9800017 	ldw	r6,0(sp)
 400bb44:	a080e826 	beq	r20,r2,400bee8 <_malloc_r+0x738>
 400bb48:	a180a636 	bltu	r20,r6,400bde4 <_malloc_r+0x634>
 400bb4c:	070100f4 	movhi	fp,1027
 400bb50:	e71a1c04 	addi	fp,fp,26736
 400bb54:	e0800017 	ldw	r2,0(fp)
 400bb58:	a887883a 	add	r3,r21,r2
 400bb5c:	e0c00015 	stw	r3,0(fp)
 400bb60:	3500e626 	beq	r6,r20,400befc <_malloc_r+0x74c>
 400bb64:	b9000017 	ldw	r4,0(r23)
 400bb68:	00bfffc4 	movi	r2,-1
 400bb6c:	2080ee26 	beq	r4,r2,400bf28 <_malloc_r+0x778>
 400bb70:	a185c83a 	sub	r2,r20,r6
 400bb74:	10c5883a 	add	r2,r2,r3
 400bb78:	e0800015 	stw	r2,0(fp)
 400bb7c:	a0c001cc 	andi	r3,r20,7
 400bb80:	1800bc26 	beq	r3,zero,400be74 <_malloc_r+0x6c4>
 400bb84:	a0e9c83a 	sub	r20,r20,r3
 400bb88:	00840204 	movi	r2,4104
 400bb8c:	a5000204 	addi	r20,r20,8
 400bb90:	10c7c83a 	sub	r3,r2,r3
 400bb94:	a545883a 	add	r2,r20,r21
 400bb98:	1083ffcc 	andi	r2,r2,4095
 400bb9c:	18abc83a 	sub	r21,r3,r2
 400bba0:	a80b883a 	mov	r5,r21
 400bba4:	9009883a 	mov	r4,r18
 400bba8:	400c4080 	call	400c408 <_sbrk_r>
 400bbac:	00ffffc4 	movi	r3,-1
 400bbb0:	10c0e126 	beq	r2,r3,400bf38 <_malloc_r+0x788>
 400bbb4:	1505c83a 	sub	r2,r2,r20
 400bbb8:	1545883a 	add	r2,r2,r21
 400bbbc:	10800054 	ori	r2,r2,1
 400bbc0:	e0c00017 	ldw	r3,0(fp)
 400bbc4:	9d000215 	stw	r20,8(r19)
 400bbc8:	a0800115 	stw	r2,4(r20)
 400bbcc:	a8c7883a 	add	r3,r21,r3
 400bbd0:	e0c00015 	stw	r3,0(fp)
 400bbd4:	84c00e26 	beq	r16,r19,400bc10 <_malloc_r+0x460>
 400bbd8:	018003c4 	movi	r6,15
 400bbdc:	3580a72e 	bgeu	r6,r22,400be7c <_malloc_r+0x6cc>
 400bbe0:	81400117 	ldw	r5,4(r16)
 400bbe4:	013ffe04 	movi	r4,-8
 400bbe8:	b0bffd04 	addi	r2,r22,-12
 400bbec:	1104703a 	and	r2,r2,r4
 400bbf0:	2900004c 	andi	r4,r5,1
 400bbf4:	2088b03a 	or	r4,r4,r2
 400bbf8:	81000115 	stw	r4,4(r16)
 400bbfc:	01400144 	movi	r5,5
 400bc00:	8089883a 	add	r4,r16,r2
 400bc04:	21400115 	stw	r5,4(r4)
 400bc08:	21400215 	stw	r5,8(r4)
 400bc0c:	3080cd36 	bltu	r6,r2,400bf44 <_malloc_r+0x794>
 400bc10:	008100f4 	movhi	r2,1027
 400bc14:	1099e004 	addi	r2,r2,26496
 400bc18:	11000017 	ldw	r4,0(r2)
 400bc1c:	20c0012e 	bgeu	r4,r3,400bc24 <_malloc_r+0x474>
 400bc20:	10c00015 	stw	r3,0(r2)
 400bc24:	008100f4 	movhi	r2,1027
 400bc28:	1099df04 	addi	r2,r2,26492
 400bc2c:	11000017 	ldw	r4,0(r2)
 400bc30:	9c000217 	ldw	r16,8(r19)
 400bc34:	20c0012e 	bgeu	r4,r3,400bc3c <_malloc_r+0x48c>
 400bc38:	10c00015 	stw	r3,0(r2)
 400bc3c:	80c00117 	ldw	r3,4(r16)
 400bc40:	00bfff04 	movi	r2,-4
 400bc44:	1886703a 	and	r3,r3,r2
 400bc48:	1c45c83a 	sub	r2,r3,r17
 400bc4c:	1c400236 	bltu	r3,r17,400bc58 <_malloc_r+0x4a8>
 400bc50:	00c003c4 	movi	r3,15
 400bc54:	18800416 	blt	r3,r2,400bc68 <_malloc_r+0x4b8>
 400bc58:	9009883a 	mov	r4,r18
 400bc5c:	40191a40 	call	40191a4 <__malloc_unlock>
 400bc60:	0005883a 	mov	r2,zero
 400bc64:	003f7b06 	br	400ba54 <__alt_data_end+0xfc00ba54>
 400bc68:	88c00054 	ori	r3,r17,1
 400bc6c:	80c00115 	stw	r3,4(r16)
 400bc70:	8463883a 	add	r17,r16,r17
 400bc74:	10800054 	ori	r2,r2,1
 400bc78:	9c400215 	stw	r17,8(r19)
 400bc7c:	88800115 	stw	r2,4(r17)
 400bc80:	9009883a 	mov	r4,r18
 400bc84:	40191a40 	call	40191a4 <__malloc_unlock>
 400bc88:	80800204 	addi	r2,r16,8
 400bc8c:	003f7106 	br	400ba54 <__alt_data_end+0xfc00ba54>
 400bc90:	00c00504 	movi	r3,20
 400bc94:	18804a2e 	bgeu	r3,r2,400bdc0 <_malloc_r+0x610>
 400bc98:	00c01504 	movi	r3,84
 400bc9c:	18806e36 	bltu	r3,r2,400be58 <_malloc_r+0x6a8>
 400bca0:	8804d33a 	srli	r2,r17,12
 400bca4:	12001bc4 	addi	r8,r2,111
 400bca8:	11c01b84 	addi	r7,r2,110
 400bcac:	4209883a 	add	r4,r8,r8
 400bcb0:	003edd06 	br	400b828 <__alt_data_end+0xfc00b828>
 400bcb4:	3804d27a 	srli	r2,r7,9
 400bcb8:	00c00104 	movi	r3,4
 400bcbc:	1880442e 	bgeu	r3,r2,400bdd0 <_malloc_r+0x620>
 400bcc0:	00c00504 	movi	r3,20
 400bcc4:	18808136 	bltu	r3,r2,400becc <_malloc_r+0x71c>
 400bcc8:	11401704 	addi	r5,r2,92
 400bccc:	10c016c4 	addi	r3,r2,91
 400bcd0:	294b883a 	add	r5,r5,r5
 400bcd4:	294b883a 	add	r5,r5,r5
 400bcd8:	294b883a 	add	r5,r5,r5
 400bcdc:	994b883a 	add	r5,r19,r5
 400bce0:	28800017 	ldw	r2,0(r5)
 400bce4:	018100f4 	movhi	r6,1027
 400bce8:	297ffe04 	addi	r5,r5,-8
 400bcec:	31a15d04 	addi	r6,r6,-31372
 400bcf0:	28806526 	beq	r5,r2,400be88 <_malloc_r+0x6d8>
 400bcf4:	01bfff04 	movi	r6,-4
 400bcf8:	10c00117 	ldw	r3,4(r2)
 400bcfc:	1986703a 	and	r3,r3,r6
 400bd00:	38c0022e 	bgeu	r7,r3,400bd0c <_malloc_r+0x55c>
 400bd04:	10800217 	ldw	r2,8(r2)
 400bd08:	28bffb1e 	bne	r5,r2,400bcf8 <__alt_data_end+0xfc00bcf8>
 400bd0c:	11400317 	ldw	r5,12(r2)
 400bd10:	98c00117 	ldw	r3,4(r19)
 400bd14:	81400315 	stw	r5,12(r16)
 400bd18:	80800215 	stw	r2,8(r16)
 400bd1c:	2c000215 	stw	r16,8(r5)
 400bd20:	14000315 	stw	r16,12(r2)
 400bd24:	003ef806 	br	400b908 <__alt_data_end+0xfc00b908>
 400bd28:	88c00054 	ori	r3,r17,1
 400bd2c:	80c00115 	stw	r3,4(r16)
 400bd30:	8463883a 	add	r17,r16,r17
 400bd34:	34400515 	stw	r17,20(r6)
 400bd38:	34400415 	stw	r17,16(r6)
 400bd3c:	10c00054 	ori	r3,r2,1
 400bd40:	8a000315 	stw	r8,12(r17)
 400bd44:	8a000215 	stw	r8,8(r17)
 400bd48:	88c00115 	stw	r3,4(r17)
 400bd4c:	88a3883a 	add	r17,r17,r2
 400bd50:	88800015 	stw	r2,0(r17)
 400bd54:	9009883a 	mov	r4,r18
 400bd58:	40191a40 	call	40191a4 <__malloc_unlock>
 400bd5c:	80800204 	addi	r2,r16,8
 400bd60:	003f3c06 	br	400ba54 <__alt_data_end+0xfc00ba54>
 400bd64:	30c00117 	ldw	r3,4(r6)
 400bd68:	003ee706 	br	400b908 <__alt_data_end+0xfc00b908>
 400bd6c:	5ac00044 	addi	r11,r11,1
 400bd70:	588000cc 	andi	r2,r11,3
 400bd74:	31800204 	addi	r6,r6,8
 400bd78:	103efd1e 	bne	r2,zero,400b970 <__alt_data_end+0xfc00b970>
 400bd7c:	00002406 	br	400be10 <_malloc_r+0x660>
 400bd80:	14000317 	ldw	r16,12(r2)
 400bd84:	143f251e 	bne	r2,r16,400ba1c <__alt_data_end+0xfc00ba1c>
 400bd88:	21000084 	addi	r4,r4,2
 400bd8c:	003ebc06 	br	400b880 <__alt_data_end+0xfc00b880>
 400bd90:	8085883a 	add	r2,r16,r2
 400bd94:	10c00117 	ldw	r3,4(r2)
 400bd98:	81000317 	ldw	r4,12(r16)
 400bd9c:	81400217 	ldw	r5,8(r16)
 400bda0:	18c00054 	ori	r3,r3,1
 400bda4:	10c00115 	stw	r3,4(r2)
 400bda8:	29000315 	stw	r4,12(r5)
 400bdac:	21400215 	stw	r5,8(r4)
 400bdb0:	9009883a 	mov	r4,r18
 400bdb4:	40191a40 	call	40191a4 <__malloc_unlock>
 400bdb8:	80800204 	addi	r2,r16,8
 400bdbc:	003f2506 	br	400ba54 <__alt_data_end+0xfc00ba54>
 400bdc0:	12001704 	addi	r8,r2,92
 400bdc4:	11c016c4 	addi	r7,r2,91
 400bdc8:	4209883a 	add	r4,r8,r8
 400bdcc:	003e9606 	br	400b828 <__alt_data_end+0xfc00b828>
 400bdd0:	3804d1ba 	srli	r2,r7,6
 400bdd4:	11400e44 	addi	r5,r2,57
 400bdd8:	10c00e04 	addi	r3,r2,56
 400bddc:	294b883a 	add	r5,r5,r5
 400bde0:	003fbc06 	br	400bcd4 <__alt_data_end+0xfc00bcd4>
 400bde4:	84ff5926 	beq	r16,r19,400bb4c <__alt_data_end+0xfc00bb4c>
 400bde8:	008100f4 	movhi	r2,1027
 400bdec:	10a15d04 	addi	r2,r2,-31372
 400bdf0:	14000217 	ldw	r16,8(r2)
 400bdf4:	00bfff04 	movi	r2,-4
 400bdf8:	80c00117 	ldw	r3,4(r16)
 400bdfc:	1886703a 	and	r3,r3,r2
 400be00:	003f9106 	br	400bc48 <__alt_data_end+0xfc00bc48>
 400be04:	60800217 	ldw	r2,8(r12)
 400be08:	213fffc4 	addi	r4,r4,-1
 400be0c:	1300651e 	bne	r2,r12,400bfa4 <_malloc_r+0x7f4>
 400be10:	208000cc 	andi	r2,r4,3
 400be14:	633ffe04 	addi	r12,r12,-8
 400be18:	103ffa1e 	bne	r2,zero,400be04 <__alt_data_end+0xfc00be04>
 400be1c:	98800117 	ldw	r2,4(r19)
 400be20:	0146303a 	nor	r3,zero,r5
 400be24:	1884703a 	and	r2,r3,r2
 400be28:	98800115 	stw	r2,4(r19)
 400be2c:	294b883a 	add	r5,r5,r5
 400be30:	117f2836 	bltu	r2,r5,400bad4 <__alt_data_end+0xfc00bad4>
 400be34:	283f2726 	beq	r5,zero,400bad4 <__alt_data_end+0xfc00bad4>
 400be38:	2886703a 	and	r3,r5,r2
 400be3c:	5809883a 	mov	r4,r11
 400be40:	183ec31e 	bne	r3,zero,400b950 <__alt_data_end+0xfc00b950>
 400be44:	294b883a 	add	r5,r5,r5
 400be48:	2886703a 	and	r3,r5,r2
 400be4c:	21000104 	addi	r4,r4,4
 400be50:	183ffc26 	beq	r3,zero,400be44 <__alt_data_end+0xfc00be44>
 400be54:	003ebe06 	br	400b950 <__alt_data_end+0xfc00b950>
 400be58:	00c05504 	movi	r3,340
 400be5c:	18801236 	bltu	r3,r2,400bea8 <_malloc_r+0x6f8>
 400be60:	8804d3fa 	srli	r2,r17,15
 400be64:	12001e04 	addi	r8,r2,120
 400be68:	11c01dc4 	addi	r7,r2,119
 400be6c:	4209883a 	add	r4,r8,r8
 400be70:	003e6d06 	br	400b828 <__alt_data_end+0xfc00b828>
 400be74:	00c40004 	movi	r3,4096
 400be78:	003f4606 	br	400bb94 <__alt_data_end+0xfc00bb94>
 400be7c:	00800044 	movi	r2,1
 400be80:	a0800115 	stw	r2,4(r20)
 400be84:	003f7406 	br	400bc58 <__alt_data_end+0xfc00bc58>
 400be88:	1805d0ba 	srai	r2,r3,2
 400be8c:	01c00044 	movi	r7,1
 400be90:	30c00117 	ldw	r3,4(r6)
 400be94:	388e983a 	sll	r7,r7,r2
 400be98:	2805883a 	mov	r2,r5
 400be9c:	38c6b03a 	or	r3,r7,r3
 400bea0:	30c00115 	stw	r3,4(r6)
 400bea4:	003f9b06 	br	400bd14 <__alt_data_end+0xfc00bd14>
 400bea8:	00c15504 	movi	r3,1364
 400beac:	18801a36 	bltu	r3,r2,400bf18 <_malloc_r+0x768>
 400beb0:	8804d4ba 	srli	r2,r17,18
 400beb4:	12001f44 	addi	r8,r2,125
 400beb8:	11c01f04 	addi	r7,r2,124
 400bebc:	4209883a 	add	r4,r8,r8
 400bec0:	003e5906 	br	400b828 <__alt_data_end+0xfc00b828>
 400bec4:	ad400404 	addi	r21,r21,16
 400bec8:	003f1706 	br	400bb28 <__alt_data_end+0xfc00bb28>
 400becc:	00c01504 	movi	r3,84
 400bed0:	18802336 	bltu	r3,r2,400bf60 <_malloc_r+0x7b0>
 400bed4:	3804d33a 	srli	r2,r7,12
 400bed8:	11401bc4 	addi	r5,r2,111
 400bedc:	10c01b84 	addi	r3,r2,110
 400bee0:	294b883a 	add	r5,r5,r5
 400bee4:	003f7b06 	br	400bcd4 <__alt_data_end+0xfc00bcd4>
 400bee8:	9c000217 	ldw	r16,8(r19)
 400beec:	00bfff04 	movi	r2,-4
 400bef0:	80c00117 	ldw	r3,4(r16)
 400bef4:	1886703a 	and	r3,r3,r2
 400bef8:	003f5306 	br	400bc48 <__alt_data_end+0xfc00bc48>
 400befc:	3083ffcc 	andi	r2,r6,4095
 400bf00:	103f181e 	bne	r2,zero,400bb64 <__alt_data_end+0xfc00bb64>
 400bf04:	99000217 	ldw	r4,8(r19)
 400bf08:	b545883a 	add	r2,r22,r21
 400bf0c:	10800054 	ori	r2,r2,1
 400bf10:	20800115 	stw	r2,4(r4)
 400bf14:	003f3e06 	br	400bc10 <__alt_data_end+0xfc00bc10>
 400bf18:	01003f84 	movi	r4,254
 400bf1c:	02001fc4 	movi	r8,127
 400bf20:	01c01f84 	movi	r7,126
 400bf24:	003e4006 	br	400b828 <__alt_data_end+0xfc00b828>
 400bf28:	008100f4 	movhi	r2,1027
 400bf2c:	10a71a04 	addi	r2,r2,-25496
 400bf30:	15000015 	stw	r20,0(r2)
 400bf34:	003f1106 	br	400bb7c <__alt_data_end+0xfc00bb7c>
 400bf38:	00800044 	movi	r2,1
 400bf3c:	002b883a 	mov	r21,zero
 400bf40:	003f1f06 	br	400bbc0 <__alt_data_end+0xfc00bbc0>
 400bf44:	81400204 	addi	r5,r16,8
 400bf48:	9009883a 	mov	r4,r18
 400bf4c:	4010e100 	call	4010e10 <_free_r>
 400bf50:	008100f4 	movhi	r2,1027
 400bf54:	109a1c04 	addi	r2,r2,26736
 400bf58:	10c00017 	ldw	r3,0(r2)
 400bf5c:	003f2c06 	br	400bc10 <__alt_data_end+0xfc00bc10>
 400bf60:	00c05504 	movi	r3,340
 400bf64:	18800536 	bltu	r3,r2,400bf7c <_malloc_r+0x7cc>
 400bf68:	3804d3fa 	srli	r2,r7,15
 400bf6c:	11401e04 	addi	r5,r2,120
 400bf70:	10c01dc4 	addi	r3,r2,119
 400bf74:	294b883a 	add	r5,r5,r5
 400bf78:	003f5606 	br	400bcd4 <__alt_data_end+0xfc00bcd4>
 400bf7c:	00c15504 	movi	r3,1364
 400bf80:	18800536 	bltu	r3,r2,400bf98 <_malloc_r+0x7e8>
 400bf84:	3804d4ba 	srli	r2,r7,18
 400bf88:	11401f44 	addi	r5,r2,125
 400bf8c:	10c01f04 	addi	r3,r2,124
 400bf90:	294b883a 	add	r5,r5,r5
 400bf94:	003f4f06 	br	400bcd4 <__alt_data_end+0xfc00bcd4>
 400bf98:	01403f84 	movi	r5,254
 400bf9c:	00c01f84 	movi	r3,126
 400bfa0:	003f4c06 	br	400bcd4 <__alt_data_end+0xfc00bcd4>
 400bfa4:	98800117 	ldw	r2,4(r19)
 400bfa8:	003fa006 	br	400be2c <__alt_data_end+0xfc00be2c>
 400bfac:	8808d0fa 	srli	r4,r17,3
 400bfb0:	20800044 	addi	r2,r4,1
 400bfb4:	1085883a 	add	r2,r2,r2
 400bfb8:	003e9006 	br	400b9fc <__alt_data_end+0xfc00b9fc>

0400bfbc <memcmp>:
 400bfbc:	01c000c4 	movi	r7,3
 400bfc0:	3980192e 	bgeu	r7,r6,400c028 <memcmp+0x6c>
 400bfc4:	2144b03a 	or	r2,r4,r5
 400bfc8:	11c4703a 	and	r2,r2,r7
 400bfcc:	10000f26 	beq	r2,zero,400c00c <memcmp+0x50>
 400bfd0:	20800003 	ldbu	r2,0(r4)
 400bfd4:	28c00003 	ldbu	r3,0(r5)
 400bfd8:	10c0151e 	bne	r2,r3,400c030 <memcmp+0x74>
 400bfdc:	31bfff84 	addi	r6,r6,-2
 400bfe0:	01ffffc4 	movi	r7,-1
 400bfe4:	00000406 	br	400bff8 <memcmp+0x3c>
 400bfe8:	20800003 	ldbu	r2,0(r4)
 400bfec:	28c00003 	ldbu	r3,0(r5)
 400bff0:	31bfffc4 	addi	r6,r6,-1
 400bff4:	10c00e1e 	bne	r2,r3,400c030 <memcmp+0x74>
 400bff8:	21000044 	addi	r4,r4,1
 400bffc:	29400044 	addi	r5,r5,1
 400c000:	31fff91e 	bne	r6,r7,400bfe8 <__alt_data_end+0xfc00bfe8>
 400c004:	0005883a 	mov	r2,zero
 400c008:	f800283a 	ret
 400c00c:	20c00017 	ldw	r3,0(r4)
 400c010:	28800017 	ldw	r2,0(r5)
 400c014:	18bfee1e 	bne	r3,r2,400bfd0 <__alt_data_end+0xfc00bfd0>
 400c018:	31bfff04 	addi	r6,r6,-4
 400c01c:	21000104 	addi	r4,r4,4
 400c020:	29400104 	addi	r5,r5,4
 400c024:	39bff936 	bltu	r7,r6,400c00c <__alt_data_end+0xfc00c00c>
 400c028:	303fe91e 	bne	r6,zero,400bfd0 <__alt_data_end+0xfc00bfd0>
 400c02c:	003ff506 	br	400c004 <__alt_data_end+0xfc00c004>
 400c030:	10c5c83a 	sub	r2,r2,r3
 400c034:	f800283a 	ret

0400c038 <memcpy>:
 400c038:	defffd04 	addi	sp,sp,-12
 400c03c:	dfc00215 	stw	ra,8(sp)
 400c040:	dc400115 	stw	r17,4(sp)
 400c044:	dc000015 	stw	r16,0(sp)
 400c048:	00c003c4 	movi	r3,15
 400c04c:	2005883a 	mov	r2,r4
 400c050:	1980452e 	bgeu	r3,r6,400c168 <memcpy+0x130>
 400c054:	2906b03a 	or	r3,r5,r4
 400c058:	18c000cc 	andi	r3,r3,3
 400c05c:	1800441e 	bne	r3,zero,400c170 <memcpy+0x138>
 400c060:	347ffc04 	addi	r17,r6,-16
 400c064:	8822d13a 	srli	r17,r17,4
 400c068:	28c00104 	addi	r3,r5,4
 400c06c:	23400104 	addi	r13,r4,4
 400c070:	8820913a 	slli	r16,r17,4
 400c074:	2b000204 	addi	r12,r5,8
 400c078:	22c00204 	addi	r11,r4,8
 400c07c:	84000504 	addi	r16,r16,20
 400c080:	2a800304 	addi	r10,r5,12
 400c084:	22400304 	addi	r9,r4,12
 400c088:	2c21883a 	add	r16,r5,r16
 400c08c:	2811883a 	mov	r8,r5
 400c090:	200f883a 	mov	r7,r4
 400c094:	41000017 	ldw	r4,0(r8)
 400c098:	1fc00017 	ldw	ra,0(r3)
 400c09c:	63c00017 	ldw	r15,0(r12)
 400c0a0:	39000015 	stw	r4,0(r7)
 400c0a4:	53800017 	ldw	r14,0(r10)
 400c0a8:	6fc00015 	stw	ra,0(r13)
 400c0ac:	5bc00015 	stw	r15,0(r11)
 400c0b0:	4b800015 	stw	r14,0(r9)
 400c0b4:	18c00404 	addi	r3,r3,16
 400c0b8:	39c00404 	addi	r7,r7,16
 400c0bc:	42000404 	addi	r8,r8,16
 400c0c0:	6b400404 	addi	r13,r13,16
 400c0c4:	63000404 	addi	r12,r12,16
 400c0c8:	5ac00404 	addi	r11,r11,16
 400c0cc:	52800404 	addi	r10,r10,16
 400c0d0:	4a400404 	addi	r9,r9,16
 400c0d4:	1c3fef1e 	bne	r3,r16,400c094 <__alt_data_end+0xfc00c094>
 400c0d8:	89c00044 	addi	r7,r17,1
 400c0dc:	380e913a 	slli	r7,r7,4
 400c0e0:	310003cc 	andi	r4,r6,15
 400c0e4:	02c000c4 	movi	r11,3
 400c0e8:	11c7883a 	add	r3,r2,r7
 400c0ec:	29cb883a 	add	r5,r5,r7
 400c0f0:	5900212e 	bgeu	r11,r4,400c178 <memcpy+0x140>
 400c0f4:	1813883a 	mov	r9,r3
 400c0f8:	2811883a 	mov	r8,r5
 400c0fc:	200f883a 	mov	r7,r4
 400c100:	42800017 	ldw	r10,0(r8)
 400c104:	4a400104 	addi	r9,r9,4
 400c108:	39ffff04 	addi	r7,r7,-4
 400c10c:	4abfff15 	stw	r10,-4(r9)
 400c110:	42000104 	addi	r8,r8,4
 400c114:	59fffa36 	bltu	r11,r7,400c100 <__alt_data_end+0xfc00c100>
 400c118:	213fff04 	addi	r4,r4,-4
 400c11c:	2008d0ba 	srli	r4,r4,2
 400c120:	318000cc 	andi	r6,r6,3
 400c124:	21000044 	addi	r4,r4,1
 400c128:	2109883a 	add	r4,r4,r4
 400c12c:	2109883a 	add	r4,r4,r4
 400c130:	1907883a 	add	r3,r3,r4
 400c134:	290b883a 	add	r5,r5,r4
 400c138:	30000626 	beq	r6,zero,400c154 <memcpy+0x11c>
 400c13c:	198d883a 	add	r6,r3,r6
 400c140:	29c00003 	ldbu	r7,0(r5)
 400c144:	18c00044 	addi	r3,r3,1
 400c148:	29400044 	addi	r5,r5,1
 400c14c:	19ffffc5 	stb	r7,-1(r3)
 400c150:	19bffb1e 	bne	r3,r6,400c140 <__alt_data_end+0xfc00c140>
 400c154:	dfc00217 	ldw	ra,8(sp)
 400c158:	dc400117 	ldw	r17,4(sp)
 400c15c:	dc000017 	ldw	r16,0(sp)
 400c160:	dec00304 	addi	sp,sp,12
 400c164:	f800283a 	ret
 400c168:	2007883a 	mov	r3,r4
 400c16c:	003ff206 	br	400c138 <__alt_data_end+0xfc00c138>
 400c170:	2007883a 	mov	r3,r4
 400c174:	003ff106 	br	400c13c <__alt_data_end+0xfc00c13c>
 400c178:	200d883a 	mov	r6,r4
 400c17c:	003fee06 	br	400c138 <__alt_data_end+0xfc00c138>

0400c180 <memset>:
 400c180:	20c000cc 	andi	r3,r4,3
 400c184:	2005883a 	mov	r2,r4
 400c188:	18004426 	beq	r3,zero,400c29c <memset+0x11c>
 400c18c:	31ffffc4 	addi	r7,r6,-1
 400c190:	30004026 	beq	r6,zero,400c294 <memset+0x114>
 400c194:	2813883a 	mov	r9,r5
 400c198:	200d883a 	mov	r6,r4
 400c19c:	2007883a 	mov	r3,r4
 400c1a0:	00000406 	br	400c1b4 <memset+0x34>
 400c1a4:	3a3fffc4 	addi	r8,r7,-1
 400c1a8:	31800044 	addi	r6,r6,1
 400c1ac:	38003926 	beq	r7,zero,400c294 <memset+0x114>
 400c1b0:	400f883a 	mov	r7,r8
 400c1b4:	18c00044 	addi	r3,r3,1
 400c1b8:	32400005 	stb	r9,0(r6)
 400c1bc:	1a0000cc 	andi	r8,r3,3
 400c1c0:	403ff81e 	bne	r8,zero,400c1a4 <__alt_data_end+0xfc00c1a4>
 400c1c4:	010000c4 	movi	r4,3
 400c1c8:	21c02d2e 	bgeu	r4,r7,400c280 <memset+0x100>
 400c1cc:	29003fcc 	andi	r4,r5,255
 400c1d0:	200c923a 	slli	r6,r4,8
 400c1d4:	3108b03a 	or	r4,r6,r4
 400c1d8:	200c943a 	slli	r6,r4,16
 400c1dc:	218cb03a 	or	r6,r4,r6
 400c1e0:	010003c4 	movi	r4,15
 400c1e4:	21c0182e 	bgeu	r4,r7,400c248 <memset+0xc8>
 400c1e8:	3b3ffc04 	addi	r12,r7,-16
 400c1ec:	6018d13a 	srli	r12,r12,4
 400c1f0:	1a000104 	addi	r8,r3,4
 400c1f4:	1ac00204 	addi	r11,r3,8
 400c1f8:	6008913a 	slli	r4,r12,4
 400c1fc:	1a800304 	addi	r10,r3,12
 400c200:	1813883a 	mov	r9,r3
 400c204:	21000504 	addi	r4,r4,20
 400c208:	1909883a 	add	r4,r3,r4
 400c20c:	49800015 	stw	r6,0(r9)
 400c210:	41800015 	stw	r6,0(r8)
 400c214:	59800015 	stw	r6,0(r11)
 400c218:	51800015 	stw	r6,0(r10)
 400c21c:	42000404 	addi	r8,r8,16
 400c220:	4a400404 	addi	r9,r9,16
 400c224:	5ac00404 	addi	r11,r11,16
 400c228:	52800404 	addi	r10,r10,16
 400c22c:	413ff71e 	bne	r8,r4,400c20c <__alt_data_end+0xfc00c20c>
 400c230:	63000044 	addi	r12,r12,1
 400c234:	6018913a 	slli	r12,r12,4
 400c238:	39c003cc 	andi	r7,r7,15
 400c23c:	010000c4 	movi	r4,3
 400c240:	1b07883a 	add	r3,r3,r12
 400c244:	21c00e2e 	bgeu	r4,r7,400c280 <memset+0x100>
 400c248:	1813883a 	mov	r9,r3
 400c24c:	3811883a 	mov	r8,r7
 400c250:	010000c4 	movi	r4,3
 400c254:	49800015 	stw	r6,0(r9)
 400c258:	423fff04 	addi	r8,r8,-4
 400c25c:	4a400104 	addi	r9,r9,4
 400c260:	223ffc36 	bltu	r4,r8,400c254 <__alt_data_end+0xfc00c254>
 400c264:	393fff04 	addi	r4,r7,-4
 400c268:	2008d0ba 	srli	r4,r4,2
 400c26c:	39c000cc 	andi	r7,r7,3
 400c270:	21000044 	addi	r4,r4,1
 400c274:	2109883a 	add	r4,r4,r4
 400c278:	2109883a 	add	r4,r4,r4
 400c27c:	1907883a 	add	r3,r3,r4
 400c280:	38000526 	beq	r7,zero,400c298 <memset+0x118>
 400c284:	19cf883a 	add	r7,r3,r7
 400c288:	19400005 	stb	r5,0(r3)
 400c28c:	18c00044 	addi	r3,r3,1
 400c290:	38fffd1e 	bne	r7,r3,400c288 <__alt_data_end+0xfc00c288>
 400c294:	f800283a 	ret
 400c298:	f800283a 	ret
 400c29c:	2007883a 	mov	r3,r4
 400c2a0:	300f883a 	mov	r7,r6
 400c2a4:	003fc706 	br	400c1c4 <__alt_data_end+0xfc00c1c4>

0400c2a8 <_printf_r>:
 400c2a8:	defffd04 	addi	sp,sp,-12
 400c2ac:	2805883a 	mov	r2,r5
 400c2b0:	dfc00015 	stw	ra,0(sp)
 400c2b4:	d9800115 	stw	r6,4(sp)
 400c2b8:	d9c00215 	stw	r7,8(sp)
 400c2bc:	21400217 	ldw	r5,8(r4)
 400c2c0:	d9c00104 	addi	r7,sp,4
 400c2c4:	100d883a 	mov	r6,r2
 400c2c8:	400c8dc0 	call	400c8dc <___vfprintf_internal_r>
 400c2cc:	dfc00017 	ldw	ra,0(sp)
 400c2d0:	dec00304 	addi	sp,sp,12
 400c2d4:	f800283a 	ret

0400c2d8 <printf>:
 400c2d8:	defffc04 	addi	sp,sp,-16
 400c2dc:	dfc00015 	stw	ra,0(sp)
 400c2e0:	d9400115 	stw	r5,4(sp)
 400c2e4:	d9800215 	stw	r6,8(sp)
 400c2e8:	d9c00315 	stw	r7,12(sp)
 400c2ec:	008100f4 	movhi	r2,1027
 400c2f0:	10a71904 	addi	r2,r2,-25500
 400c2f4:	10800017 	ldw	r2,0(r2)
 400c2f8:	200b883a 	mov	r5,r4
 400c2fc:	d9800104 	addi	r6,sp,4
 400c300:	11000217 	ldw	r4,8(r2)
 400c304:	400ebb80 	call	400ebb8 <__vfprintf_internal>
 400c308:	dfc00017 	ldw	ra,0(sp)
 400c30c:	dec00404 	addi	sp,sp,16
 400c310:	f800283a 	ret

0400c314 <_putchar_r>:
 400c314:	21800217 	ldw	r6,8(r4)
 400c318:	4012d001 	jmpi	4012d00 <_putc_r>

0400c31c <putchar>:
 400c31c:	008100f4 	movhi	r2,1027
 400c320:	10a71904 	addi	r2,r2,-25500
 400c324:	200b883a 	mov	r5,r4
 400c328:	11000017 	ldw	r4,0(r2)
 400c32c:	21800217 	ldw	r6,8(r4)
 400c330:	4012d001 	jmpi	4012d00 <_putc_r>

0400c334 <_puts_r>:
 400c334:	defff604 	addi	sp,sp,-40
 400c338:	dc000715 	stw	r16,28(sp)
 400c33c:	2021883a 	mov	r16,r4
 400c340:	2809883a 	mov	r4,r5
 400c344:	dc400815 	stw	r17,32(sp)
 400c348:	dfc00915 	stw	ra,36(sp)
 400c34c:	2823883a 	mov	r17,r5
 400c350:	400c83c0 	call	400c83c <strlen>
 400c354:	10c00044 	addi	r3,r2,1
 400c358:	d8800115 	stw	r2,4(sp)
 400c35c:	008100b4 	movhi	r2,1026
 400c360:	10b3c904 	addi	r2,r2,-12508
 400c364:	d8800215 	stw	r2,8(sp)
 400c368:	00800044 	movi	r2,1
 400c36c:	d8800315 	stw	r2,12(sp)
 400c370:	00800084 	movi	r2,2
 400c374:	dc400015 	stw	r17,0(sp)
 400c378:	d8c00615 	stw	r3,24(sp)
 400c37c:	dec00415 	stw	sp,16(sp)
 400c380:	d8800515 	stw	r2,20(sp)
 400c384:	80000226 	beq	r16,zero,400c390 <_puts_r+0x5c>
 400c388:	80800e17 	ldw	r2,56(r16)
 400c38c:	10001426 	beq	r2,zero,400c3e0 <_puts_r+0xac>
 400c390:	81400217 	ldw	r5,8(r16)
 400c394:	2880030b 	ldhu	r2,12(r5)
 400c398:	10c8000c 	andi	r3,r2,8192
 400c39c:	1800061e 	bne	r3,zero,400c3b8 <_puts_r+0x84>
 400c3a0:	29001917 	ldw	r4,100(r5)
 400c3a4:	00f7ffc4 	movi	r3,-8193
 400c3a8:	10880014 	ori	r2,r2,8192
 400c3ac:	20c6703a 	and	r3,r4,r3
 400c3b0:	2880030d 	sth	r2,12(r5)
 400c3b4:	28c01915 	stw	r3,100(r5)
 400c3b8:	d9800404 	addi	r6,sp,16
 400c3bc:	8009883a 	mov	r4,r16
 400c3c0:	40111200 	call	4011120 <__sfvwrite_r>
 400c3c4:	1000091e 	bne	r2,zero,400c3ec <_puts_r+0xb8>
 400c3c8:	00800284 	movi	r2,10
 400c3cc:	dfc00917 	ldw	ra,36(sp)
 400c3d0:	dc400817 	ldw	r17,32(sp)
 400c3d4:	dc000717 	ldw	r16,28(sp)
 400c3d8:	dec00a04 	addi	sp,sp,40
 400c3dc:	f800283a 	ret
 400c3e0:	8009883a 	mov	r4,r16
 400c3e4:	4010c9c0 	call	4010c9c <__sinit>
 400c3e8:	003fe906 	br	400c390 <__alt_data_end+0xfc00c390>
 400c3ec:	00bfffc4 	movi	r2,-1
 400c3f0:	003ff606 	br	400c3cc <__alt_data_end+0xfc00c3cc>

0400c3f4 <puts>:
 400c3f4:	008100f4 	movhi	r2,1027
 400c3f8:	10a71904 	addi	r2,r2,-25500
 400c3fc:	200b883a 	mov	r5,r4
 400c400:	11000017 	ldw	r4,0(r2)
 400c404:	400c3341 	jmpi	400c334 <_puts_r>

0400c408 <_sbrk_r>:
 400c408:	defffd04 	addi	sp,sp,-12
 400c40c:	dc000015 	stw	r16,0(sp)
 400c410:	040100f4 	movhi	r16,1027
 400c414:	dc400115 	stw	r17,4(sp)
 400c418:	8419e204 	addi	r16,r16,26504
 400c41c:	2023883a 	mov	r17,r4
 400c420:	2809883a 	mov	r4,r5
 400c424:	dfc00215 	stw	ra,8(sp)
 400c428:	80000015 	stw	zero,0(r16)
 400c42c:	401938c0 	call	401938c <sbrk>
 400c430:	00ffffc4 	movi	r3,-1
 400c434:	10c00526 	beq	r2,r3,400c44c <_sbrk_r+0x44>
 400c438:	dfc00217 	ldw	ra,8(sp)
 400c43c:	dc400117 	ldw	r17,4(sp)
 400c440:	dc000017 	ldw	r16,0(sp)
 400c444:	dec00304 	addi	sp,sp,12
 400c448:	f800283a 	ret
 400c44c:	80c00017 	ldw	r3,0(r16)
 400c450:	183ff926 	beq	r3,zero,400c438 <__alt_data_end+0xfc00c438>
 400c454:	88c00015 	stw	r3,0(r17)
 400c458:	003ff706 	br	400c438 <__alt_data_end+0xfc00c438>

0400c45c <_init_signal_r>:
 400c45c:	2080b717 	ldw	r2,732(r4)
 400c460:	10000226 	beq	r2,zero,400c46c <_init_signal_r+0x10>
 400c464:	0005883a 	mov	r2,zero
 400c468:	f800283a 	ret
 400c46c:	defffe04 	addi	sp,sp,-8
 400c470:	01402004 	movi	r5,128
 400c474:	dc000015 	stw	r16,0(sp)
 400c478:	dfc00115 	stw	ra,4(sp)
 400c47c:	2021883a 	mov	r16,r4
 400c480:	400b7b00 	call	400b7b0 <_malloc_r>
 400c484:	8080b715 	stw	r2,732(r16)
 400c488:	10000d26 	beq	r2,zero,400c4c0 <_init_signal_r+0x64>
 400c48c:	0007883a 	mov	r3,zero
 400c490:	01002004 	movi	r4,128
 400c494:	00000106 	br	400c49c <_init_signal_r+0x40>
 400c498:	8080b717 	ldw	r2,732(r16)
 400c49c:	10c5883a 	add	r2,r2,r3
 400c4a0:	10000015 	stw	zero,0(r2)
 400c4a4:	18c00104 	addi	r3,r3,4
 400c4a8:	193ffb1e 	bne	r3,r4,400c498 <__alt_data_end+0xfc00c498>
 400c4ac:	0005883a 	mov	r2,zero
 400c4b0:	dfc00117 	ldw	ra,4(sp)
 400c4b4:	dc000017 	ldw	r16,0(sp)
 400c4b8:	dec00204 	addi	sp,sp,8
 400c4bc:	f800283a 	ret
 400c4c0:	00bfffc4 	movi	r2,-1
 400c4c4:	003ffa06 	br	400c4b0 <__alt_data_end+0xfc00c4b0>

0400c4c8 <_signal_r>:
 400c4c8:	00c007c4 	movi	r3,31
 400c4cc:	19401536 	bltu	r3,r5,400c524 <_signal_r+0x5c>
 400c4d0:	2080b717 	ldw	r2,732(r4)
 400c4d4:	defffc04 	addi	sp,sp,-16
 400c4d8:	dc800215 	stw	r18,8(sp)
 400c4dc:	dc400115 	stw	r17,4(sp)
 400c4e0:	dc000015 	stw	r16,0(sp)
 400c4e4:	dfc00315 	stw	ra,12(sp)
 400c4e8:	3023883a 	mov	r17,r6
 400c4ec:	2021883a 	mov	r16,r4
 400c4f0:	2825883a 	mov	r18,r5
 400c4f4:	10000f26 	beq	r2,zero,400c534 <_signal_r+0x6c>
 400c4f8:	948b883a 	add	r5,r18,r18
 400c4fc:	294b883a 	add	r5,r5,r5
 400c500:	114b883a 	add	r5,r2,r5
 400c504:	28800017 	ldw	r2,0(r5)
 400c508:	2c400015 	stw	r17,0(r5)
 400c50c:	dfc00317 	ldw	ra,12(sp)
 400c510:	dc800217 	ldw	r18,8(sp)
 400c514:	dc400117 	ldw	r17,4(sp)
 400c518:	dc000017 	ldw	r16,0(sp)
 400c51c:	dec00404 	addi	sp,sp,16
 400c520:	f800283a 	ret
 400c524:	00c00584 	movi	r3,22
 400c528:	20c00015 	stw	r3,0(r4)
 400c52c:	00bfffc4 	movi	r2,-1
 400c530:	f800283a 	ret
 400c534:	400c45c0 	call	400c45c <_init_signal_r>
 400c538:	1000021e 	bne	r2,zero,400c544 <_signal_r+0x7c>
 400c53c:	8080b717 	ldw	r2,732(r16)
 400c540:	003fed06 	br	400c4f8 <__alt_data_end+0xfc00c4f8>
 400c544:	00bfffc4 	movi	r2,-1
 400c548:	003ff006 	br	400c50c <__alt_data_end+0xfc00c50c>

0400c54c <_raise_r>:
 400c54c:	008007c4 	movi	r2,31
 400c550:	11402936 	bltu	r2,r5,400c5f8 <_raise_r+0xac>
 400c554:	20c0b717 	ldw	r3,732(r4)
 400c558:	defffd04 	addi	sp,sp,-12
 400c55c:	dc400115 	stw	r17,4(sp)
 400c560:	dc000015 	stw	r16,0(sp)
 400c564:	dfc00215 	stw	ra,8(sp)
 400c568:	2021883a 	mov	r16,r4
 400c56c:	2823883a 	mov	r17,r5
 400c570:	18001726 	beq	r3,zero,400c5d0 <_raise_r+0x84>
 400c574:	2945883a 	add	r2,r5,r5
 400c578:	1085883a 	add	r2,r2,r2
 400c57c:	1887883a 	add	r3,r3,r2
 400c580:	19800017 	ldw	r6,0(r3)
 400c584:	30001226 	beq	r6,zero,400c5d0 <_raise_r+0x84>
 400c588:	00800044 	movi	r2,1
 400c58c:	30800e26 	beq	r6,r2,400c5c8 <_raise_r+0x7c>
 400c590:	013fffc4 	movi	r4,-1
 400c594:	31000926 	beq	r6,r4,400c5bc <_raise_r+0x70>
 400c598:	18000015 	stw	zero,0(r3)
 400c59c:	2809883a 	mov	r4,r5
 400c5a0:	303ee83a 	callr	r6
 400c5a4:	0005883a 	mov	r2,zero
 400c5a8:	dfc00217 	ldw	ra,8(sp)
 400c5ac:	dc400117 	ldw	r17,4(sp)
 400c5b0:	dc000017 	ldw	r16,0(sp)
 400c5b4:	dec00304 	addi	sp,sp,12
 400c5b8:	f800283a 	ret
 400c5bc:	00c00584 	movi	r3,22
 400c5c0:	80c00015 	stw	r3,0(r16)
 400c5c4:	003ff806 	br	400c5a8 <__alt_data_end+0xfc00c5a8>
 400c5c8:	0005883a 	mov	r2,zero
 400c5cc:	003ff606 	br	400c5a8 <__alt_data_end+0xfc00c5a8>
 400c5d0:	8009883a 	mov	r4,r16
 400c5d4:	400c75c0 	call	400c75c <_getpid_r>
 400c5d8:	880d883a 	mov	r6,r17
 400c5dc:	100b883a 	mov	r5,r2
 400c5e0:	8009883a 	mov	r4,r16
 400c5e4:	dfc00217 	ldw	ra,8(sp)
 400c5e8:	dc400117 	ldw	r17,4(sp)
 400c5ec:	dc000017 	ldw	r16,0(sp)
 400c5f0:	dec00304 	addi	sp,sp,12
 400c5f4:	400c7001 	jmpi	400c700 <_kill_r>
 400c5f8:	00800584 	movi	r2,22
 400c5fc:	20800015 	stw	r2,0(r4)
 400c600:	00bfffc4 	movi	r2,-1
 400c604:	f800283a 	ret

0400c608 <__sigtramp_r>:
 400c608:	008007c4 	movi	r2,31
 400c60c:	11402436 	bltu	r2,r5,400c6a0 <__sigtramp_r+0x98>
 400c610:	20c0b717 	ldw	r3,732(r4)
 400c614:	defffd04 	addi	sp,sp,-12
 400c618:	dc400115 	stw	r17,4(sp)
 400c61c:	dc000015 	stw	r16,0(sp)
 400c620:	dfc00215 	stw	ra,8(sp)
 400c624:	2021883a 	mov	r16,r4
 400c628:	2823883a 	mov	r17,r5
 400c62c:	18001826 	beq	r3,zero,400c690 <__sigtramp_r+0x88>
 400c630:	8c45883a 	add	r2,r17,r17
 400c634:	1085883a 	add	r2,r2,r2
 400c638:	1885883a 	add	r2,r3,r2
 400c63c:	10c00017 	ldw	r3,0(r2)
 400c640:	18001126 	beq	r3,zero,400c688 <__sigtramp_r+0x80>
 400c644:	013fffc4 	movi	r4,-1
 400c648:	19000d26 	beq	r3,r4,400c680 <__sigtramp_r+0x78>
 400c64c:	01000044 	movi	r4,1
 400c650:	19000926 	beq	r3,r4,400c678 <__sigtramp_r+0x70>
 400c654:	10000015 	stw	zero,0(r2)
 400c658:	8809883a 	mov	r4,r17
 400c65c:	183ee83a 	callr	r3
 400c660:	0005883a 	mov	r2,zero
 400c664:	dfc00217 	ldw	ra,8(sp)
 400c668:	dc400117 	ldw	r17,4(sp)
 400c66c:	dc000017 	ldw	r16,0(sp)
 400c670:	dec00304 	addi	sp,sp,12
 400c674:	f800283a 	ret
 400c678:	008000c4 	movi	r2,3
 400c67c:	003ff906 	br	400c664 <__alt_data_end+0xfc00c664>
 400c680:	00800084 	movi	r2,2
 400c684:	003ff706 	br	400c664 <__alt_data_end+0xfc00c664>
 400c688:	00800044 	movi	r2,1
 400c68c:	003ff506 	br	400c664 <__alt_data_end+0xfc00c664>
 400c690:	400c45c0 	call	400c45c <_init_signal_r>
 400c694:	1000041e 	bne	r2,zero,400c6a8 <__sigtramp_r+0xa0>
 400c698:	80c0b717 	ldw	r3,732(r16)
 400c69c:	003fe406 	br	400c630 <__alt_data_end+0xfc00c630>
 400c6a0:	00bfffc4 	movi	r2,-1
 400c6a4:	f800283a 	ret
 400c6a8:	00bfffc4 	movi	r2,-1
 400c6ac:	003fed06 	br	400c664 <__alt_data_end+0xfc00c664>

0400c6b0 <raise>:
 400c6b0:	008100f4 	movhi	r2,1027
 400c6b4:	10a71904 	addi	r2,r2,-25500
 400c6b8:	200b883a 	mov	r5,r4
 400c6bc:	11000017 	ldw	r4,0(r2)
 400c6c0:	400c54c1 	jmpi	400c54c <_raise_r>

0400c6c4 <signal>:
 400c6c4:	008100f4 	movhi	r2,1027
 400c6c8:	10a71904 	addi	r2,r2,-25500
 400c6cc:	280d883a 	mov	r6,r5
 400c6d0:	200b883a 	mov	r5,r4
 400c6d4:	11000017 	ldw	r4,0(r2)
 400c6d8:	400c4c81 	jmpi	400c4c8 <_signal_r>

0400c6dc <_init_signal>:
 400c6dc:	008100f4 	movhi	r2,1027
 400c6e0:	10a71904 	addi	r2,r2,-25500
 400c6e4:	11000017 	ldw	r4,0(r2)
 400c6e8:	400c45c1 	jmpi	400c45c <_init_signal_r>

0400c6ec <__sigtramp>:
 400c6ec:	008100f4 	movhi	r2,1027
 400c6f0:	10a71904 	addi	r2,r2,-25500
 400c6f4:	200b883a 	mov	r5,r4
 400c6f8:	11000017 	ldw	r4,0(r2)
 400c6fc:	400c6081 	jmpi	400c608 <__sigtramp_r>

0400c700 <_kill_r>:
 400c700:	defffd04 	addi	sp,sp,-12
 400c704:	2805883a 	mov	r2,r5
 400c708:	dc000015 	stw	r16,0(sp)
 400c70c:	040100f4 	movhi	r16,1027
 400c710:	dc400115 	stw	r17,4(sp)
 400c714:	8419e204 	addi	r16,r16,26504
 400c718:	2023883a 	mov	r17,r4
 400c71c:	300b883a 	mov	r5,r6
 400c720:	1009883a 	mov	r4,r2
 400c724:	dfc00215 	stw	ra,8(sp)
 400c728:	80000015 	stw	zero,0(r16)
 400c72c:	4018dd00 	call	4018dd0 <kill>
 400c730:	00ffffc4 	movi	r3,-1
 400c734:	10c00526 	beq	r2,r3,400c74c <_kill_r+0x4c>
 400c738:	dfc00217 	ldw	ra,8(sp)
 400c73c:	dc400117 	ldw	r17,4(sp)
 400c740:	dc000017 	ldw	r16,0(sp)
 400c744:	dec00304 	addi	sp,sp,12
 400c748:	f800283a 	ret
 400c74c:	80c00017 	ldw	r3,0(r16)
 400c750:	183ff926 	beq	r3,zero,400c738 <__alt_data_end+0xfc00c738>
 400c754:	88c00015 	stw	r3,0(r17)
 400c758:	003ff706 	br	400c738 <__alt_data_end+0xfc00c738>

0400c75c <_getpid_r>:
 400c75c:	4018c8c1 	jmpi	4018c8c <getpid>

0400c760 <strcmp>:
 400c760:	2144b03a 	or	r2,r4,r5
 400c764:	108000cc 	andi	r2,r2,3
 400c768:	1000171e 	bne	r2,zero,400c7c8 <strcmp+0x68>
 400c76c:	20800017 	ldw	r2,0(r4)
 400c770:	28c00017 	ldw	r3,0(r5)
 400c774:	10c0141e 	bne	r2,r3,400c7c8 <strcmp+0x68>
 400c778:	027fbff4 	movhi	r9,65279
 400c77c:	4a7fbfc4 	addi	r9,r9,-257
 400c780:	0086303a 	nor	r3,zero,r2
 400c784:	02202074 	movhi	r8,32897
 400c788:	1245883a 	add	r2,r2,r9
 400c78c:	42202004 	addi	r8,r8,-32640
 400c790:	10c4703a 	and	r2,r2,r3
 400c794:	1204703a 	and	r2,r2,r8
 400c798:	10000226 	beq	r2,zero,400c7a4 <strcmp+0x44>
 400c79c:	00002306 	br	400c82c <strcmp+0xcc>
 400c7a0:	1000221e 	bne	r2,zero,400c82c <strcmp+0xcc>
 400c7a4:	21000104 	addi	r4,r4,4
 400c7a8:	20c00017 	ldw	r3,0(r4)
 400c7ac:	29400104 	addi	r5,r5,4
 400c7b0:	29800017 	ldw	r6,0(r5)
 400c7b4:	1a4f883a 	add	r7,r3,r9
 400c7b8:	00c4303a 	nor	r2,zero,r3
 400c7bc:	3884703a 	and	r2,r7,r2
 400c7c0:	1204703a 	and	r2,r2,r8
 400c7c4:	19bff626 	beq	r3,r6,400c7a0 <__alt_data_end+0xfc00c7a0>
 400c7c8:	20800003 	ldbu	r2,0(r4)
 400c7cc:	10c03fcc 	andi	r3,r2,255
 400c7d0:	18c0201c 	xori	r3,r3,128
 400c7d4:	18ffe004 	addi	r3,r3,-128
 400c7d8:	18000c26 	beq	r3,zero,400c80c <strcmp+0xac>
 400c7dc:	29800007 	ldb	r6,0(r5)
 400c7e0:	19800326 	beq	r3,r6,400c7f0 <strcmp+0x90>
 400c7e4:	00001306 	br	400c834 <strcmp+0xd4>
 400c7e8:	29800007 	ldb	r6,0(r5)
 400c7ec:	11800b1e 	bne	r2,r6,400c81c <strcmp+0xbc>
 400c7f0:	21000044 	addi	r4,r4,1
 400c7f4:	20c00003 	ldbu	r3,0(r4)
 400c7f8:	29400044 	addi	r5,r5,1
 400c7fc:	18803fcc 	andi	r2,r3,255
 400c800:	1080201c 	xori	r2,r2,128
 400c804:	10bfe004 	addi	r2,r2,-128
 400c808:	103ff71e 	bne	r2,zero,400c7e8 <__alt_data_end+0xfc00c7e8>
 400c80c:	0007883a 	mov	r3,zero
 400c810:	28800003 	ldbu	r2,0(r5)
 400c814:	1885c83a 	sub	r2,r3,r2
 400c818:	f800283a 	ret
 400c81c:	28800003 	ldbu	r2,0(r5)
 400c820:	18c03fcc 	andi	r3,r3,255
 400c824:	1885c83a 	sub	r2,r3,r2
 400c828:	f800283a 	ret
 400c82c:	0005883a 	mov	r2,zero
 400c830:	f800283a 	ret
 400c834:	10c03fcc 	andi	r3,r2,255
 400c838:	003ff506 	br	400c810 <__alt_data_end+0xfc00c810>

0400c83c <strlen>:
 400c83c:	208000cc 	andi	r2,r4,3
 400c840:	10002026 	beq	r2,zero,400c8c4 <strlen+0x88>
 400c844:	20800007 	ldb	r2,0(r4)
 400c848:	10002026 	beq	r2,zero,400c8cc <strlen+0x90>
 400c84c:	2005883a 	mov	r2,r4
 400c850:	00000206 	br	400c85c <strlen+0x20>
 400c854:	10c00007 	ldb	r3,0(r2)
 400c858:	18001826 	beq	r3,zero,400c8bc <strlen+0x80>
 400c85c:	10800044 	addi	r2,r2,1
 400c860:	10c000cc 	andi	r3,r2,3
 400c864:	183ffb1e 	bne	r3,zero,400c854 <__alt_data_end+0xfc00c854>
 400c868:	10c00017 	ldw	r3,0(r2)
 400c86c:	01ffbff4 	movhi	r7,65279
 400c870:	39ffbfc4 	addi	r7,r7,-257
 400c874:	00ca303a 	nor	r5,zero,r3
 400c878:	01a02074 	movhi	r6,32897
 400c87c:	19c7883a 	add	r3,r3,r7
 400c880:	31a02004 	addi	r6,r6,-32640
 400c884:	1946703a 	and	r3,r3,r5
 400c888:	1986703a 	and	r3,r3,r6
 400c88c:	1800091e 	bne	r3,zero,400c8b4 <strlen+0x78>
 400c890:	10800104 	addi	r2,r2,4
 400c894:	10c00017 	ldw	r3,0(r2)
 400c898:	19cb883a 	add	r5,r3,r7
 400c89c:	00c6303a 	nor	r3,zero,r3
 400c8a0:	28c6703a 	and	r3,r5,r3
 400c8a4:	1986703a 	and	r3,r3,r6
 400c8a8:	183ff926 	beq	r3,zero,400c890 <__alt_data_end+0xfc00c890>
 400c8ac:	00000106 	br	400c8b4 <strlen+0x78>
 400c8b0:	10800044 	addi	r2,r2,1
 400c8b4:	10c00007 	ldb	r3,0(r2)
 400c8b8:	183ffd1e 	bne	r3,zero,400c8b0 <__alt_data_end+0xfc00c8b0>
 400c8bc:	1105c83a 	sub	r2,r2,r4
 400c8c0:	f800283a 	ret
 400c8c4:	2005883a 	mov	r2,r4
 400c8c8:	003fe706 	br	400c868 <__alt_data_end+0xfc00c868>
 400c8cc:	0005883a 	mov	r2,zero
 400c8d0:	f800283a 	ret

0400c8d4 <_times_r>:
 400c8d4:	2809883a 	mov	r4,r5
 400c8d8:	40194781 	jmpi	4019478 <times>

0400c8dc <___vfprintf_internal_r>:
 400c8dc:	deffb804 	addi	sp,sp,-288
 400c8e0:	dfc04715 	stw	ra,284(sp)
 400c8e4:	ddc04515 	stw	r23,276(sp)
 400c8e8:	dd404315 	stw	r21,268(sp)
 400c8ec:	d9002d15 	stw	r4,180(sp)
 400c8f0:	282f883a 	mov	r23,r5
 400c8f4:	302b883a 	mov	r21,r6
 400c8f8:	d9c02e15 	stw	r7,184(sp)
 400c8fc:	df004615 	stw	fp,280(sp)
 400c900:	dd804415 	stw	r22,272(sp)
 400c904:	dd004215 	stw	r20,264(sp)
 400c908:	dcc04115 	stw	r19,260(sp)
 400c90c:	dc804015 	stw	r18,256(sp)
 400c910:	dc403f15 	stw	r17,252(sp)
 400c914:	dc003e15 	stw	r16,248(sp)
 400c918:	401181c0 	call	401181c <_localeconv_r>
 400c91c:	10800017 	ldw	r2,0(r2)
 400c920:	1009883a 	mov	r4,r2
 400c924:	d8803415 	stw	r2,208(sp)
 400c928:	400c83c0 	call	400c83c <strlen>
 400c92c:	d8803715 	stw	r2,220(sp)
 400c930:	d8802d17 	ldw	r2,180(sp)
 400c934:	10000226 	beq	r2,zero,400c940 <___vfprintf_internal_r+0x64>
 400c938:	10800e17 	ldw	r2,56(r2)
 400c93c:	1000fb26 	beq	r2,zero,400cd2c <___vfprintf_internal_r+0x450>
 400c940:	b880030b 	ldhu	r2,12(r23)
 400c944:	10c8000c 	andi	r3,r2,8192
 400c948:	1800061e 	bne	r3,zero,400c964 <___vfprintf_internal_r+0x88>
 400c94c:	b9001917 	ldw	r4,100(r23)
 400c950:	00f7ffc4 	movi	r3,-8193
 400c954:	10880014 	ori	r2,r2,8192
 400c958:	20c6703a 	and	r3,r4,r3
 400c95c:	b880030d 	sth	r2,12(r23)
 400c960:	b8c01915 	stw	r3,100(r23)
 400c964:	10c0020c 	andi	r3,r2,8
 400c968:	1800c326 	beq	r3,zero,400cc78 <___vfprintf_internal_r+0x39c>
 400c96c:	b8c00417 	ldw	r3,16(r23)
 400c970:	1800c126 	beq	r3,zero,400cc78 <___vfprintf_internal_r+0x39c>
 400c974:	1080068c 	andi	r2,r2,26
 400c978:	00c00284 	movi	r3,10
 400c97c:	10c0c626 	beq	r2,r3,400cc98 <___vfprintf_internal_r+0x3bc>
 400c980:	d8c00404 	addi	r3,sp,16
 400c984:	050100b4 	movhi	r20,1026
 400c988:	d9001e04 	addi	r4,sp,120
 400c98c:	a533da84 	addi	r20,r20,-12438
 400c990:	d8c01e15 	stw	r3,120(sp)
 400c994:	d8002015 	stw	zero,128(sp)
 400c998:	d8001f15 	stw	zero,124(sp)
 400c99c:	d8003315 	stw	zero,204(sp)
 400c9a0:	d8003615 	stw	zero,216(sp)
 400c9a4:	d8003815 	stw	zero,224(sp)
 400c9a8:	1811883a 	mov	r8,r3
 400c9ac:	d8003915 	stw	zero,228(sp)
 400c9b0:	d8003a15 	stw	zero,232(sp)
 400c9b4:	d8002f15 	stw	zero,188(sp)
 400c9b8:	d9002815 	stw	r4,160(sp)
 400c9bc:	a8800007 	ldb	r2,0(r21)
 400c9c0:	10028b26 	beq	r2,zero,400d3f0 <___vfprintf_internal_r+0xb14>
 400c9c4:	00c00944 	movi	r3,37
 400c9c8:	a823883a 	mov	r17,r21
 400c9cc:	10c0021e 	bne	r2,r3,400c9d8 <___vfprintf_internal_r+0xfc>
 400c9d0:	00001406 	br	400ca24 <___vfprintf_internal_r+0x148>
 400c9d4:	10c00326 	beq	r2,r3,400c9e4 <___vfprintf_internal_r+0x108>
 400c9d8:	8c400044 	addi	r17,r17,1
 400c9dc:	88800007 	ldb	r2,0(r17)
 400c9e0:	103ffc1e 	bne	r2,zero,400c9d4 <__alt_data_end+0xfc00c9d4>
 400c9e4:	8d61c83a 	sub	r16,r17,r21
 400c9e8:	80000e26 	beq	r16,zero,400ca24 <___vfprintf_internal_r+0x148>
 400c9ec:	d8c02017 	ldw	r3,128(sp)
 400c9f0:	d8801f17 	ldw	r2,124(sp)
 400c9f4:	45400015 	stw	r21,0(r8)
 400c9f8:	1c07883a 	add	r3,r3,r16
 400c9fc:	10800044 	addi	r2,r2,1
 400ca00:	d8c02015 	stw	r3,128(sp)
 400ca04:	44000115 	stw	r16,4(r8)
 400ca08:	d8801f15 	stw	r2,124(sp)
 400ca0c:	00c001c4 	movi	r3,7
 400ca10:	1880a916 	blt	r3,r2,400ccb8 <___vfprintf_internal_r+0x3dc>
 400ca14:	42000204 	addi	r8,r8,8
 400ca18:	d9402f17 	ldw	r5,188(sp)
 400ca1c:	2c0b883a 	add	r5,r5,r16
 400ca20:	d9402f15 	stw	r5,188(sp)
 400ca24:	88800007 	ldb	r2,0(r17)
 400ca28:	1000aa26 	beq	r2,zero,400ccd4 <___vfprintf_internal_r+0x3f8>
 400ca2c:	8d400044 	addi	r21,r17,1
 400ca30:	8c400047 	ldb	r17,1(r17)
 400ca34:	0021883a 	mov	r16,zero
 400ca38:	00bfffc4 	movi	r2,-1
 400ca3c:	0025883a 	mov	r18,zero
 400ca40:	dc002905 	stb	r16,164(sp)
 400ca44:	d8002785 	stb	zero,158(sp)
 400ca48:	d8002b05 	stb	zero,172(sp)
 400ca4c:	d8802a15 	stw	r2,168(sp)
 400ca50:	d8003115 	stw	zero,196(sp)
 400ca54:	04c01604 	movi	r19,88
 400ca58:	05800244 	movi	r22,9
 400ca5c:	9021883a 	mov	r16,r18
 400ca60:	4039883a 	mov	fp,r8
 400ca64:	ad400044 	addi	r21,r21,1
 400ca68:	88bff804 	addi	r2,r17,-32
 400ca6c:	98833236 	bltu	r19,r2,400d738 <___vfprintf_internal_r+0xe5c>
 400ca70:	100490ba 	slli	r2,r2,2
 400ca74:	00c10074 	movhi	r3,1025
 400ca78:	18f2a204 	addi	r3,r3,-13688
 400ca7c:	10c5883a 	add	r2,r2,r3
 400ca80:	10800017 	ldw	r2,0(r2)
 400ca84:	1000683a 	jmp	r2
 400ca88:	0400d630 	cmpltui	r16,zero,856
 400ca8c:	0400d738 	rdprs	r16,zero,860
 400ca90:	0400d738 	rdprs	r16,zero,860
 400ca94:	0400d650 	cmplti	r16,zero,857
 400ca98:	0400d738 	rdprs	r16,zero,860
 400ca9c:	0400d738 	rdprs	r16,zero,860
 400caa0:	0400d738 	rdprs	r16,zero,860
 400caa4:	0400d738 	rdprs	r16,zero,860
 400caa8:	0400d738 	rdprs	r16,zero,860
 400caac:	0400d738 	rdprs	r16,zero,860
 400cab0:	0400cd38 	rdprs	r16,zero,820
 400cab4:	0400d540 	call	400d54 <__alt_mem_sdram-0x3bff2ac>
 400cab8:	0400d738 	rdprs	r16,zero,860
 400cabc:	0400cbfc 	xorhi	r16,zero,815
 400cac0:	0400cd5c 	xori	r16,zero,821
 400cac4:	0400d738 	rdprs	r16,zero,860
 400cac8:	0400cdac 	andhi	r16,zero,822
 400cacc:	0400cdb8 	rdprs	r16,zero,822
 400cad0:	0400cdb8 	rdprs	r16,zero,822
 400cad4:	0400cdb8 	rdprs	r16,zero,822
 400cad8:	0400cdb8 	rdprs	r16,zero,822
 400cadc:	0400cdb8 	rdprs	r16,zero,822
 400cae0:	0400cdb8 	rdprs	r16,zero,822
 400cae4:	0400cdb8 	rdprs	r16,zero,822
 400cae8:	0400cdb8 	rdprs	r16,zero,822
 400caec:	0400cdb8 	rdprs	r16,zero,822
 400caf0:	0400d738 	rdprs	r16,zero,860
 400caf4:	0400d738 	rdprs	r16,zero,860
 400caf8:	0400d738 	rdprs	r16,zero,860
 400cafc:	0400d738 	rdprs	r16,zero,860
 400cb00:	0400d738 	rdprs	r16,zero,860
 400cb04:	0400d738 	rdprs	r16,zero,860
 400cb08:	0400d738 	rdprs	r16,zero,860
 400cb0c:	0400d738 	rdprs	r16,zero,860
 400cb10:	0400d738 	rdprs	r16,zero,860
 400cb14:	0400d738 	rdprs	r16,zero,860
 400cb18:	0400cdf4 	movhi	r16,823
 400cb1c:	0400cebc 	xorhi	r16,zero,826
 400cb20:	0400d738 	rdprs	r16,zero,860
 400cb24:	0400cebc 	xorhi	r16,zero,826
 400cb28:	0400d738 	rdprs	r16,zero,860
 400cb2c:	0400d738 	rdprs	r16,zero,860
 400cb30:	0400d738 	rdprs	r16,zero,860
 400cb34:	0400d738 	rdprs	r16,zero,860
 400cb38:	0400cf68 	cmpgeui	r16,zero,829
 400cb3c:	0400d738 	rdprs	r16,zero,860
 400cb40:	0400d738 	rdprs	r16,zero,860
 400cb44:	0400cf74 	movhi	r16,829
 400cb48:	0400d738 	rdprs	r16,zero,860
 400cb4c:	0400d738 	rdprs	r16,zero,860
 400cb50:	0400d738 	rdprs	r16,zero,860
 400cb54:	0400d738 	rdprs	r16,zero,860
 400cb58:	0400d738 	rdprs	r16,zero,860
 400cb5c:	0400d3f8 	rdprs	r16,zero,847
 400cb60:	0400d738 	rdprs	r16,zero,860
 400cb64:	0400d738 	rdprs	r16,zero,860
 400cb68:	0400d464 	muli	r16,zero,849
 400cb6c:	0400d738 	rdprs	r16,zero,860
 400cb70:	0400d738 	rdprs	r16,zero,860
 400cb74:	0400d738 	rdprs	r16,zero,860
 400cb78:	0400d738 	rdprs	r16,zero,860
 400cb7c:	0400d738 	rdprs	r16,zero,860
 400cb80:	0400d738 	rdprs	r16,zero,860
 400cb84:	0400d738 	rdprs	r16,zero,860
 400cb88:	0400d738 	rdprs	r16,zero,860
 400cb8c:	0400d738 	rdprs	r16,zero,860
 400cb90:	0400d738 	rdprs	r16,zero,860
 400cb94:	0400d6dc 	xori	r16,zero,859
 400cb98:	0400d65c 	xori	r16,zero,857
 400cb9c:	0400cebc 	xorhi	r16,zero,826
 400cba0:	0400cebc 	xorhi	r16,zero,826
 400cba4:	0400cebc 	xorhi	r16,zero,826
 400cba8:	0400d67c 	xorhi	r16,zero,857
 400cbac:	0400d65c 	xori	r16,zero,857
 400cbb0:	0400d738 	rdprs	r16,zero,860
 400cbb4:	0400d738 	rdprs	r16,zero,860
 400cbb8:	0400d688 	cmpgei	r16,zero,858
 400cbbc:	0400d738 	rdprs	r16,zero,860
 400cbc0:	0400d69c 	xori	r16,zero,858
 400cbc4:	0400d520 	cmpeqi	r16,zero,852
 400cbc8:	0400cc08 	cmpgei	r16,zero,816
 400cbcc:	0400d558 	cmpnei	r16,zero,853
 400cbd0:	0400d738 	rdprs	r16,zero,860
 400cbd4:	0400d564 	muli	r16,zero,853
 400cbd8:	0400d738 	rdprs	r16,zero,860
 400cbdc:	0400d5c8 	cmpgei	r16,zero,855
 400cbe0:	0400d738 	rdprs	r16,zero,860
 400cbe4:	0400d738 	rdprs	r16,zero,860
 400cbe8:	0400d5e8 	cmpgeui	r16,zero,855
 400cbec:	d8c03117 	ldw	r3,196(sp)
 400cbf0:	d8802e15 	stw	r2,184(sp)
 400cbf4:	00c7c83a 	sub	r3,zero,r3
 400cbf8:	d8c03115 	stw	r3,196(sp)
 400cbfc:	84000114 	ori	r16,r16,4
 400cc00:	ac400007 	ldb	r17,0(r21)
 400cc04:	003f9706 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400cc08:	00800c04 	movi	r2,48
 400cc0c:	d8802705 	stb	r2,156(sp)
 400cc10:	00801e04 	movi	r2,120
 400cc14:	d8802745 	stb	r2,157(sp)
 400cc18:	d9002a17 	ldw	r4,168(sp)
 400cc1c:	d8802e17 	ldw	r2,184(sp)
 400cc20:	d8002785 	stb	zero,158(sp)
 400cc24:	e011883a 	mov	r8,fp
 400cc28:	10c00104 	addi	r3,r2,4
 400cc2c:	14c00017 	ldw	r19,0(r2)
 400cc30:	002d883a 	mov	r22,zero
 400cc34:	80800094 	ori	r2,r16,2
 400cc38:	2002ca16 	blt	r4,zero,400d764 <___vfprintf_internal_r+0xe88>
 400cc3c:	00bfdfc4 	movi	r2,-129
 400cc40:	80a4703a 	and	r18,r16,r2
 400cc44:	d8c02e15 	stw	r3,184(sp)
 400cc48:	94800094 	ori	r18,r18,2
 400cc4c:	9802b41e 	bne	r19,zero,400d720 <___vfprintf_internal_r+0xe44>
 400cc50:	014100b4 	movhi	r5,1026
 400cc54:	2973d304 	addi	r5,r5,-12468
 400cc58:	d9403915 	stw	r5,228(sp)
 400cc5c:	04401e04 	movi	r17,120
 400cc60:	d8802a17 	ldw	r2,168(sp)
 400cc64:	0039883a 	mov	fp,zero
 400cc68:	1001fa26 	beq	r2,zero,400d454 <___vfprintf_internal_r+0xb78>
 400cc6c:	0027883a 	mov	r19,zero
 400cc70:	002d883a 	mov	r22,zero
 400cc74:	00021906 	br	400d4dc <___vfprintf_internal_r+0xc00>
 400cc78:	d9002d17 	ldw	r4,180(sp)
 400cc7c:	b80b883a 	mov	r5,r23
 400cc80:	400ec900 	call	400ec90 <__swsetup_r>
 400cc84:	1005dc1e 	bne	r2,zero,400e3f8 <___vfprintf_internal_r+0x1b1c>
 400cc88:	b880030b 	ldhu	r2,12(r23)
 400cc8c:	00c00284 	movi	r3,10
 400cc90:	1080068c 	andi	r2,r2,26
 400cc94:	10ff3a1e 	bne	r2,r3,400c980 <__alt_data_end+0xfc00c980>
 400cc98:	b880038f 	ldh	r2,14(r23)
 400cc9c:	103f3816 	blt	r2,zero,400c980 <__alt_data_end+0xfc00c980>
 400cca0:	d9c02e17 	ldw	r7,184(sp)
 400cca4:	d9002d17 	ldw	r4,180(sp)
 400cca8:	a80d883a 	mov	r6,r21
 400ccac:	b80b883a 	mov	r5,r23
 400ccb0:	400ebd40 	call	400ebd4 <__sbprintf>
 400ccb4:	00001106 	br	400ccfc <___vfprintf_internal_r+0x420>
 400ccb8:	d9002d17 	ldw	r4,180(sp)
 400ccbc:	d9801e04 	addi	r6,sp,120
 400ccc0:	b80b883a 	mov	r5,r23
 400ccc4:	40136780 	call	4013678 <__sprint_r>
 400ccc8:	1000081e 	bne	r2,zero,400ccec <___vfprintf_internal_r+0x410>
 400cccc:	da000404 	addi	r8,sp,16
 400ccd0:	003f5106 	br	400ca18 <__alt_data_end+0xfc00ca18>
 400ccd4:	d8802017 	ldw	r2,128(sp)
 400ccd8:	10000426 	beq	r2,zero,400ccec <___vfprintf_internal_r+0x410>
 400ccdc:	d9002d17 	ldw	r4,180(sp)
 400cce0:	d9801e04 	addi	r6,sp,120
 400cce4:	b80b883a 	mov	r5,r23
 400cce8:	40136780 	call	4013678 <__sprint_r>
 400ccec:	b880030b 	ldhu	r2,12(r23)
 400ccf0:	1080100c 	andi	r2,r2,64
 400ccf4:	1005c01e 	bne	r2,zero,400e3f8 <___vfprintf_internal_r+0x1b1c>
 400ccf8:	d8802f17 	ldw	r2,188(sp)
 400ccfc:	dfc04717 	ldw	ra,284(sp)
 400cd00:	df004617 	ldw	fp,280(sp)
 400cd04:	ddc04517 	ldw	r23,276(sp)
 400cd08:	dd804417 	ldw	r22,272(sp)
 400cd0c:	dd404317 	ldw	r21,268(sp)
 400cd10:	dd004217 	ldw	r20,264(sp)
 400cd14:	dcc04117 	ldw	r19,260(sp)
 400cd18:	dc804017 	ldw	r18,256(sp)
 400cd1c:	dc403f17 	ldw	r17,252(sp)
 400cd20:	dc003e17 	ldw	r16,248(sp)
 400cd24:	dec04804 	addi	sp,sp,288
 400cd28:	f800283a 	ret
 400cd2c:	d9002d17 	ldw	r4,180(sp)
 400cd30:	4010c9c0 	call	4010c9c <__sinit>
 400cd34:	003f0206 	br	400c940 <__alt_data_end+0xfc00c940>
 400cd38:	d9002e17 	ldw	r4,184(sp)
 400cd3c:	d9402e17 	ldw	r5,184(sp)
 400cd40:	21000017 	ldw	r4,0(r4)
 400cd44:	28800104 	addi	r2,r5,4
 400cd48:	d9003115 	stw	r4,196(sp)
 400cd4c:	203fa716 	blt	r4,zero,400cbec <__alt_data_end+0xfc00cbec>
 400cd50:	d8802e15 	stw	r2,184(sp)
 400cd54:	ac400007 	ldb	r17,0(r21)
 400cd58:	003f4206 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400cd5c:	ac400007 	ldb	r17,0(r21)
 400cd60:	01000a84 	movi	r4,42
 400cd64:	a8c00044 	addi	r3,r21,1
 400cd68:	89075826 	beq	r17,r4,400eacc <___vfprintf_internal_r+0x21f0>
 400cd6c:	8cbff404 	addi	r18,r17,-48
 400cd70:	b486ae36 	bltu	r22,r18,400e82c <___vfprintf_internal_r+0x1f50>
 400cd74:	0009883a 	mov	r4,zero
 400cd78:	1823883a 	mov	r17,r3
 400cd7c:	01400284 	movi	r5,10
 400cd80:	400b1dc0 	call	400b1dc <__mulsi3>
 400cd84:	88c00007 	ldb	r3,0(r17)
 400cd88:	1489883a 	add	r4,r2,r18
 400cd8c:	8d400044 	addi	r21,r17,1
 400cd90:	1cbff404 	addi	r18,r3,-48
 400cd94:	a823883a 	mov	r17,r21
 400cd98:	b4bff82e 	bgeu	r22,r18,400cd7c <__alt_data_end+0xfc00cd7c>
 400cd9c:	1823883a 	mov	r17,r3
 400cda0:	2005f616 	blt	r4,zero,400e57c <___vfprintf_internal_r+0x1ca0>
 400cda4:	d9002a15 	stw	r4,168(sp)
 400cda8:	003f2f06 	br	400ca68 <__alt_data_end+0xfc00ca68>
 400cdac:	84002014 	ori	r16,r16,128
 400cdb0:	ac400007 	ldb	r17,0(r21)
 400cdb4:	003f2b06 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400cdb8:	8cbff404 	addi	r18,r17,-48
 400cdbc:	d8003115 	stw	zero,196(sp)
 400cdc0:	0009883a 	mov	r4,zero
 400cdc4:	a823883a 	mov	r17,r21
 400cdc8:	01400284 	movi	r5,10
 400cdcc:	400b1dc0 	call	400b1dc <__mulsi3>
 400cdd0:	88c00007 	ldb	r3,0(r17)
 400cdd4:	9089883a 	add	r4,r18,r2
 400cdd8:	ad400044 	addi	r21,r21,1
 400cddc:	1cbff404 	addi	r18,r3,-48
 400cde0:	a823883a 	mov	r17,r21
 400cde4:	b4bff82e 	bgeu	r22,r18,400cdc8 <__alt_data_end+0xfc00cdc8>
 400cde8:	1823883a 	mov	r17,r3
 400cdec:	d9003115 	stw	r4,196(sp)
 400cdf0:	003f1d06 	br	400ca68 <__alt_data_end+0xfc00ca68>
 400cdf4:	8025883a 	mov	r18,r16
 400cdf8:	dc002903 	ldbu	r16,164(sp)
 400cdfc:	e011883a 	mov	r8,fp
 400ce00:	84003fcc 	andi	r16,r16,255
 400ce04:	8007531e 	bne	r16,zero,400eb54 <___vfprintf_internal_r+0x2278>
 400ce08:	94800414 	ori	r18,r18,16
 400ce0c:	9080080c 	andi	r2,r18,32
 400ce10:	1003a326 	beq	r2,zero,400dca0 <___vfprintf_internal_r+0x13c4>
 400ce14:	d9002e17 	ldw	r4,184(sp)
 400ce18:	20800117 	ldw	r2,4(r4)
 400ce1c:	24c00017 	ldw	r19,0(r4)
 400ce20:	21000204 	addi	r4,r4,8
 400ce24:	d9002e15 	stw	r4,184(sp)
 400ce28:	102d883a 	mov	r22,r2
 400ce2c:	10047316 	blt	r2,zero,400dffc <___vfprintf_internal_r+0x1720>
 400ce30:	d9002a17 	ldw	r4,168(sp)
 400ce34:	df002783 	ldbu	fp,158(sp)
 400ce38:	2003e416 	blt	r4,zero,400ddcc <___vfprintf_internal_r+0x14f0>
 400ce3c:	00ffdfc4 	movi	r3,-129
 400ce40:	9d84b03a 	or	r2,r19,r22
 400ce44:	90e4703a 	and	r18,r18,r3
 400ce48:	10018026 	beq	r2,zero,400d44c <___vfprintf_internal_r+0xb70>
 400ce4c:	b003ab26 	beq	r22,zero,400dcfc <___vfprintf_internal_r+0x1420>
 400ce50:	dc402915 	stw	r17,164(sp)
 400ce54:	dc001e04 	addi	r16,sp,120
 400ce58:	b023883a 	mov	r17,r22
 400ce5c:	402d883a 	mov	r22,r8
 400ce60:	9809883a 	mov	r4,r19
 400ce64:	880b883a 	mov	r5,r17
 400ce68:	01800284 	movi	r6,10
 400ce6c:	000f883a 	mov	r7,zero
 400ce70:	4015bbc0 	call	4015bbc <__umoddi3>
 400ce74:	10800c04 	addi	r2,r2,48
 400ce78:	843fffc4 	addi	r16,r16,-1
 400ce7c:	9809883a 	mov	r4,r19
 400ce80:	880b883a 	mov	r5,r17
 400ce84:	80800005 	stb	r2,0(r16)
 400ce88:	01800284 	movi	r6,10
 400ce8c:	000f883a 	mov	r7,zero
 400ce90:	40155c00 	call	40155c0 <__udivdi3>
 400ce94:	1027883a 	mov	r19,r2
 400ce98:	10c4b03a 	or	r2,r2,r3
 400ce9c:	1823883a 	mov	r17,r3
 400cea0:	103fef1e 	bne	r2,zero,400ce60 <__alt_data_end+0xfc00ce60>
 400cea4:	d8c02817 	ldw	r3,160(sp)
 400cea8:	dc402917 	ldw	r17,164(sp)
 400ceac:	b011883a 	mov	r8,r22
 400ceb0:	1c07c83a 	sub	r3,r3,r16
 400ceb4:	d8c02b15 	stw	r3,172(sp)
 400ceb8:	00005f06 	br	400d038 <___vfprintf_internal_r+0x75c>
 400cebc:	8025883a 	mov	r18,r16
 400cec0:	dc002903 	ldbu	r16,164(sp)
 400cec4:	e011883a 	mov	r8,fp
 400cec8:	84003fcc 	andi	r16,r16,255
 400cecc:	80071e1e 	bne	r16,zero,400eb48 <___vfprintf_internal_r+0x226c>
 400ced0:	9080020c 	andi	r2,r18,8
 400ced4:	1004af26 	beq	r2,zero,400e194 <___vfprintf_internal_r+0x18b8>
 400ced8:	d9002e17 	ldw	r4,184(sp)
 400cedc:	d9402e17 	ldw	r5,184(sp)
 400cee0:	d8802e17 	ldw	r2,184(sp)
 400cee4:	21000017 	ldw	r4,0(r4)
 400cee8:	29400117 	ldw	r5,4(r5)
 400ceec:	10800204 	addi	r2,r2,8
 400cef0:	d9003615 	stw	r4,216(sp)
 400cef4:	d9403815 	stw	r5,224(sp)
 400cef8:	d8802e15 	stw	r2,184(sp)
 400cefc:	d9003617 	ldw	r4,216(sp)
 400cf00:	d9403817 	ldw	r5,224(sp)
 400cf04:	da003d15 	stw	r8,244(sp)
 400cf08:	04000044 	movi	r16,1
 400cf0c:	40133cc0 	call	40133cc <__fpclassifyd>
 400cf10:	da003d17 	ldw	r8,244(sp)
 400cf14:	1404441e 	bne	r2,r16,400e028 <___vfprintf_internal_r+0x174c>
 400cf18:	d9003617 	ldw	r4,216(sp)
 400cf1c:	d9403817 	ldw	r5,224(sp)
 400cf20:	000d883a 	mov	r6,zero
 400cf24:	000f883a 	mov	r7,zero
 400cf28:	40175600 	call	4017560 <__ledf2>
 400cf2c:	da003d17 	ldw	r8,244(sp)
 400cf30:	1005e316 	blt	r2,zero,400e6c0 <___vfprintf_internal_r+0x1de4>
 400cf34:	df002783 	ldbu	fp,158(sp)
 400cf38:	008011c4 	movi	r2,71
 400cf3c:	1445580e 	bge	r2,r17,400e4a0 <___vfprintf_internal_r+0x1bc4>
 400cf40:	040100b4 	movhi	r16,1026
 400cf44:	8433cb04 	addi	r16,r16,-12500
 400cf48:	00c000c4 	movi	r3,3
 400cf4c:	00bfdfc4 	movi	r2,-129
 400cf50:	d8c02915 	stw	r3,164(sp)
 400cf54:	90a4703a 	and	r18,r18,r2
 400cf58:	d8c02b15 	stw	r3,172(sp)
 400cf5c:	d8002a15 	stw	zero,168(sp)
 400cf60:	d8003215 	stw	zero,200(sp)
 400cf64:	00003a06 	br	400d050 <___vfprintf_internal_r+0x774>
 400cf68:	84000214 	ori	r16,r16,8
 400cf6c:	ac400007 	ldb	r17,0(r21)
 400cf70:	003ebc06 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400cf74:	8025883a 	mov	r18,r16
 400cf78:	dc002903 	ldbu	r16,164(sp)
 400cf7c:	e011883a 	mov	r8,fp
 400cf80:	84003fcc 	andi	r16,r16,255
 400cf84:	8007001e 	bne	r16,zero,400eb88 <___vfprintf_internal_r+0x22ac>
 400cf88:	94800414 	ori	r18,r18,16
 400cf8c:	9080080c 	andi	r2,r18,32
 400cf90:	1002fa26 	beq	r2,zero,400db7c <___vfprintf_internal_r+0x12a0>
 400cf94:	d9002e17 	ldw	r4,184(sp)
 400cf98:	d9402a17 	ldw	r5,168(sp)
 400cf9c:	d8002785 	stb	zero,158(sp)
 400cfa0:	20800204 	addi	r2,r4,8
 400cfa4:	24c00017 	ldw	r19,0(r4)
 400cfa8:	25800117 	ldw	r22,4(r4)
 400cfac:	2804b116 	blt	r5,zero,400e274 <___vfprintf_internal_r+0x1998>
 400cfb0:	013fdfc4 	movi	r4,-129
 400cfb4:	9d86b03a 	or	r3,r19,r22
 400cfb8:	d8802e15 	stw	r2,184(sp)
 400cfbc:	9124703a 	and	r18,r18,r4
 400cfc0:	1802fb1e 	bne	r3,zero,400dbb0 <___vfprintf_internal_r+0x12d4>
 400cfc4:	d8c02a17 	ldw	r3,168(sp)
 400cfc8:	0039883a 	mov	fp,zero
 400cfcc:	1805e526 	beq	r3,zero,400e764 <___vfprintf_internal_r+0x1e88>
 400cfd0:	0027883a 	mov	r19,zero
 400cfd4:	002d883a 	mov	r22,zero
 400cfd8:	dc001e04 	addi	r16,sp,120
 400cfdc:	9806d0fa 	srli	r3,r19,3
 400cfe0:	b008977a 	slli	r4,r22,29
 400cfe4:	b02cd0fa 	srli	r22,r22,3
 400cfe8:	9cc001cc 	andi	r19,r19,7
 400cfec:	98800c04 	addi	r2,r19,48
 400cff0:	843fffc4 	addi	r16,r16,-1
 400cff4:	20e6b03a 	or	r19,r4,r3
 400cff8:	80800005 	stb	r2,0(r16)
 400cffc:	9d86b03a 	or	r3,r19,r22
 400d000:	183ff61e 	bne	r3,zero,400cfdc <__alt_data_end+0xfc00cfdc>
 400d004:	90c0004c 	andi	r3,r18,1
 400d008:	18014126 	beq	r3,zero,400d510 <___vfprintf_internal_r+0xc34>
 400d00c:	10803fcc 	andi	r2,r2,255
 400d010:	1080201c 	xori	r2,r2,128
 400d014:	10bfe004 	addi	r2,r2,-128
 400d018:	00c00c04 	movi	r3,48
 400d01c:	10c13c26 	beq	r2,r3,400d510 <___vfprintf_internal_r+0xc34>
 400d020:	80ffffc5 	stb	r3,-1(r16)
 400d024:	d8c02817 	ldw	r3,160(sp)
 400d028:	80bfffc4 	addi	r2,r16,-1
 400d02c:	1021883a 	mov	r16,r2
 400d030:	1887c83a 	sub	r3,r3,r2
 400d034:	d8c02b15 	stw	r3,172(sp)
 400d038:	d8802b17 	ldw	r2,172(sp)
 400d03c:	d9002a17 	ldw	r4,168(sp)
 400d040:	1100010e 	bge	r2,r4,400d048 <___vfprintf_internal_r+0x76c>
 400d044:	2005883a 	mov	r2,r4
 400d048:	d8802915 	stw	r2,164(sp)
 400d04c:	d8003215 	stw	zero,200(sp)
 400d050:	e7003fcc 	andi	fp,fp,255
 400d054:	e700201c 	xori	fp,fp,128
 400d058:	e73fe004 	addi	fp,fp,-128
 400d05c:	e0000326 	beq	fp,zero,400d06c <___vfprintf_internal_r+0x790>
 400d060:	d8c02917 	ldw	r3,164(sp)
 400d064:	18c00044 	addi	r3,r3,1
 400d068:	d8c02915 	stw	r3,164(sp)
 400d06c:	90c0008c 	andi	r3,r18,2
 400d070:	d8c02c15 	stw	r3,176(sp)
 400d074:	18000326 	beq	r3,zero,400d084 <___vfprintf_internal_r+0x7a8>
 400d078:	d8c02917 	ldw	r3,164(sp)
 400d07c:	18c00084 	addi	r3,r3,2
 400d080:	d8c02915 	stw	r3,164(sp)
 400d084:	90c0210c 	andi	r3,r18,132
 400d088:	d8c03015 	stw	r3,192(sp)
 400d08c:	1801c51e 	bne	r3,zero,400d7a4 <___vfprintf_internal_r+0xec8>
 400d090:	d9003117 	ldw	r4,196(sp)
 400d094:	d8c02917 	ldw	r3,164(sp)
 400d098:	20e7c83a 	sub	r19,r4,r3
 400d09c:	04c1c10e 	bge	zero,r19,400d7a4 <___vfprintf_internal_r+0xec8>
 400d0a0:	02400404 	movi	r9,16
 400d0a4:	d8c02017 	ldw	r3,128(sp)
 400d0a8:	d8801f17 	ldw	r2,124(sp)
 400d0ac:	4cc52f0e 	bge	r9,r19,400e56c <___vfprintf_internal_r+0x1c90>
 400d0b0:	014100b4 	movhi	r5,1026
 400d0b4:	2973de84 	addi	r5,r5,-12422
 400d0b8:	dc403b15 	stw	r17,236(sp)
 400d0bc:	d9403515 	stw	r5,212(sp)
 400d0c0:	9823883a 	mov	r17,r19
 400d0c4:	482d883a 	mov	r22,r9
 400d0c8:	9027883a 	mov	r19,r18
 400d0cc:	070001c4 	movi	fp,7
 400d0d0:	8025883a 	mov	r18,r16
 400d0d4:	dc002d17 	ldw	r16,180(sp)
 400d0d8:	00000306 	br	400d0e8 <___vfprintf_internal_r+0x80c>
 400d0dc:	8c7ffc04 	addi	r17,r17,-16
 400d0e0:	42000204 	addi	r8,r8,8
 400d0e4:	b440130e 	bge	r22,r17,400d134 <___vfprintf_internal_r+0x858>
 400d0e8:	010100b4 	movhi	r4,1026
 400d0ec:	18c00404 	addi	r3,r3,16
 400d0f0:	10800044 	addi	r2,r2,1
 400d0f4:	2133de84 	addi	r4,r4,-12422
 400d0f8:	41000015 	stw	r4,0(r8)
 400d0fc:	45800115 	stw	r22,4(r8)
 400d100:	d8c02015 	stw	r3,128(sp)
 400d104:	d8801f15 	stw	r2,124(sp)
 400d108:	e0bff40e 	bge	fp,r2,400d0dc <__alt_data_end+0xfc00d0dc>
 400d10c:	d9801e04 	addi	r6,sp,120
 400d110:	b80b883a 	mov	r5,r23
 400d114:	8009883a 	mov	r4,r16
 400d118:	40136780 	call	4013678 <__sprint_r>
 400d11c:	103ef31e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400d120:	8c7ffc04 	addi	r17,r17,-16
 400d124:	d8c02017 	ldw	r3,128(sp)
 400d128:	d8801f17 	ldw	r2,124(sp)
 400d12c:	da000404 	addi	r8,sp,16
 400d130:	b47fed16 	blt	r22,r17,400d0e8 <__alt_data_end+0xfc00d0e8>
 400d134:	9021883a 	mov	r16,r18
 400d138:	9825883a 	mov	r18,r19
 400d13c:	8827883a 	mov	r19,r17
 400d140:	dc403b17 	ldw	r17,236(sp)
 400d144:	d9403517 	ldw	r5,212(sp)
 400d148:	98c7883a 	add	r3,r19,r3
 400d14c:	10800044 	addi	r2,r2,1
 400d150:	41400015 	stw	r5,0(r8)
 400d154:	44c00115 	stw	r19,4(r8)
 400d158:	d8c02015 	stw	r3,128(sp)
 400d15c:	d8801f15 	stw	r2,124(sp)
 400d160:	010001c4 	movi	r4,7
 400d164:	2082c516 	blt	r4,r2,400dc7c <___vfprintf_internal_r+0x13a0>
 400d168:	df002787 	ldb	fp,158(sp)
 400d16c:	42000204 	addi	r8,r8,8
 400d170:	e0000c26 	beq	fp,zero,400d1a4 <___vfprintf_internal_r+0x8c8>
 400d174:	d8801f17 	ldw	r2,124(sp)
 400d178:	d9002784 	addi	r4,sp,158
 400d17c:	18c00044 	addi	r3,r3,1
 400d180:	10800044 	addi	r2,r2,1
 400d184:	41000015 	stw	r4,0(r8)
 400d188:	01000044 	movi	r4,1
 400d18c:	41000115 	stw	r4,4(r8)
 400d190:	d8c02015 	stw	r3,128(sp)
 400d194:	d8801f15 	stw	r2,124(sp)
 400d198:	010001c4 	movi	r4,7
 400d19c:	20825e16 	blt	r4,r2,400db18 <___vfprintf_internal_r+0x123c>
 400d1a0:	42000204 	addi	r8,r8,8
 400d1a4:	d8802c17 	ldw	r2,176(sp)
 400d1a8:	10000c26 	beq	r2,zero,400d1dc <___vfprintf_internal_r+0x900>
 400d1ac:	d8801f17 	ldw	r2,124(sp)
 400d1b0:	d9002704 	addi	r4,sp,156
 400d1b4:	18c00084 	addi	r3,r3,2
 400d1b8:	10800044 	addi	r2,r2,1
 400d1bc:	41000015 	stw	r4,0(r8)
 400d1c0:	01000084 	movi	r4,2
 400d1c4:	41000115 	stw	r4,4(r8)
 400d1c8:	d8c02015 	stw	r3,128(sp)
 400d1cc:	d8801f15 	stw	r2,124(sp)
 400d1d0:	010001c4 	movi	r4,7
 400d1d4:	20825816 	blt	r4,r2,400db38 <___vfprintf_internal_r+0x125c>
 400d1d8:	42000204 	addi	r8,r8,8
 400d1dc:	d9003017 	ldw	r4,192(sp)
 400d1e0:	00802004 	movi	r2,128
 400d1e4:	2081bb26 	beq	r4,r2,400d8d4 <___vfprintf_internal_r+0xff8>
 400d1e8:	d9402a17 	ldw	r5,168(sp)
 400d1ec:	d8802b17 	ldw	r2,172(sp)
 400d1f0:	28adc83a 	sub	r22,r5,r2
 400d1f4:	0580310e 	bge	zero,r22,400d2bc <___vfprintf_internal_r+0x9e0>
 400d1f8:	07000404 	movi	fp,16
 400d1fc:	d8801f17 	ldw	r2,124(sp)
 400d200:	e584360e 	bge	fp,r22,400e2dc <___vfprintf_internal_r+0x1a00>
 400d204:	014100b4 	movhi	r5,1026
 400d208:	2973da84 	addi	r5,r5,-12438
 400d20c:	dc402a15 	stw	r17,168(sp)
 400d210:	d9402c15 	stw	r5,176(sp)
 400d214:	b023883a 	mov	r17,r22
 400d218:	04c001c4 	movi	r19,7
 400d21c:	a82d883a 	mov	r22,r21
 400d220:	902b883a 	mov	r21,r18
 400d224:	8025883a 	mov	r18,r16
 400d228:	dc002d17 	ldw	r16,180(sp)
 400d22c:	00000306 	br	400d23c <___vfprintf_internal_r+0x960>
 400d230:	8c7ffc04 	addi	r17,r17,-16
 400d234:	42000204 	addi	r8,r8,8
 400d238:	e440110e 	bge	fp,r17,400d280 <___vfprintf_internal_r+0x9a4>
 400d23c:	18c00404 	addi	r3,r3,16
 400d240:	10800044 	addi	r2,r2,1
 400d244:	45000015 	stw	r20,0(r8)
 400d248:	47000115 	stw	fp,4(r8)
 400d24c:	d8c02015 	stw	r3,128(sp)
 400d250:	d8801f15 	stw	r2,124(sp)
 400d254:	98bff60e 	bge	r19,r2,400d230 <__alt_data_end+0xfc00d230>
 400d258:	d9801e04 	addi	r6,sp,120
 400d25c:	b80b883a 	mov	r5,r23
 400d260:	8009883a 	mov	r4,r16
 400d264:	40136780 	call	4013678 <__sprint_r>
 400d268:	103ea01e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400d26c:	8c7ffc04 	addi	r17,r17,-16
 400d270:	d8c02017 	ldw	r3,128(sp)
 400d274:	d8801f17 	ldw	r2,124(sp)
 400d278:	da000404 	addi	r8,sp,16
 400d27c:	e47fef16 	blt	fp,r17,400d23c <__alt_data_end+0xfc00d23c>
 400d280:	9021883a 	mov	r16,r18
 400d284:	a825883a 	mov	r18,r21
 400d288:	b02b883a 	mov	r21,r22
 400d28c:	882d883a 	mov	r22,r17
 400d290:	dc402a17 	ldw	r17,168(sp)
 400d294:	d9002c17 	ldw	r4,176(sp)
 400d298:	1d87883a 	add	r3,r3,r22
 400d29c:	10800044 	addi	r2,r2,1
 400d2a0:	41000015 	stw	r4,0(r8)
 400d2a4:	45800115 	stw	r22,4(r8)
 400d2a8:	d8c02015 	stw	r3,128(sp)
 400d2ac:	d8801f15 	stw	r2,124(sp)
 400d2b0:	010001c4 	movi	r4,7
 400d2b4:	20821016 	blt	r4,r2,400daf8 <___vfprintf_internal_r+0x121c>
 400d2b8:	42000204 	addi	r8,r8,8
 400d2bc:	9080400c 	andi	r2,r18,256
 400d2c0:	10013a1e 	bne	r2,zero,400d7ac <___vfprintf_internal_r+0xed0>
 400d2c4:	d9402b17 	ldw	r5,172(sp)
 400d2c8:	d8801f17 	ldw	r2,124(sp)
 400d2cc:	44000015 	stw	r16,0(r8)
 400d2d0:	1947883a 	add	r3,r3,r5
 400d2d4:	10800044 	addi	r2,r2,1
 400d2d8:	41400115 	stw	r5,4(r8)
 400d2dc:	d8c02015 	stw	r3,128(sp)
 400d2e0:	d8801f15 	stw	r2,124(sp)
 400d2e4:	010001c4 	movi	r4,7
 400d2e8:	2081f516 	blt	r4,r2,400dac0 <___vfprintf_internal_r+0x11e4>
 400d2ec:	42000204 	addi	r8,r8,8
 400d2f0:	9480010c 	andi	r18,r18,4
 400d2f4:	90003226 	beq	r18,zero,400d3c0 <___vfprintf_internal_r+0xae4>
 400d2f8:	d9403117 	ldw	r5,196(sp)
 400d2fc:	d8802917 	ldw	r2,164(sp)
 400d300:	28a1c83a 	sub	r16,r5,r2
 400d304:	04002e0e 	bge	zero,r16,400d3c0 <___vfprintf_internal_r+0xae4>
 400d308:	04400404 	movi	r17,16
 400d30c:	d8801f17 	ldw	r2,124(sp)
 400d310:	8c04c40e 	bge	r17,r16,400e624 <___vfprintf_internal_r+0x1d48>
 400d314:	014100b4 	movhi	r5,1026
 400d318:	2973de84 	addi	r5,r5,-12422
 400d31c:	d9403515 	stw	r5,212(sp)
 400d320:	048001c4 	movi	r18,7
 400d324:	dcc02d17 	ldw	r19,180(sp)
 400d328:	00000306 	br	400d338 <___vfprintf_internal_r+0xa5c>
 400d32c:	843ffc04 	addi	r16,r16,-16
 400d330:	42000204 	addi	r8,r8,8
 400d334:	8c00130e 	bge	r17,r16,400d384 <___vfprintf_internal_r+0xaa8>
 400d338:	010100b4 	movhi	r4,1026
 400d33c:	18c00404 	addi	r3,r3,16
 400d340:	10800044 	addi	r2,r2,1
 400d344:	2133de84 	addi	r4,r4,-12422
 400d348:	41000015 	stw	r4,0(r8)
 400d34c:	44400115 	stw	r17,4(r8)
 400d350:	d8c02015 	stw	r3,128(sp)
 400d354:	d8801f15 	stw	r2,124(sp)
 400d358:	90bff40e 	bge	r18,r2,400d32c <__alt_data_end+0xfc00d32c>
 400d35c:	d9801e04 	addi	r6,sp,120
 400d360:	b80b883a 	mov	r5,r23
 400d364:	9809883a 	mov	r4,r19
 400d368:	40136780 	call	4013678 <__sprint_r>
 400d36c:	103e5f1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400d370:	843ffc04 	addi	r16,r16,-16
 400d374:	d8c02017 	ldw	r3,128(sp)
 400d378:	d8801f17 	ldw	r2,124(sp)
 400d37c:	da000404 	addi	r8,sp,16
 400d380:	8c3fed16 	blt	r17,r16,400d338 <__alt_data_end+0xfc00d338>
 400d384:	d9403517 	ldw	r5,212(sp)
 400d388:	1c07883a 	add	r3,r3,r16
 400d38c:	10800044 	addi	r2,r2,1
 400d390:	41400015 	stw	r5,0(r8)
 400d394:	44000115 	stw	r16,4(r8)
 400d398:	d8c02015 	stw	r3,128(sp)
 400d39c:	d8801f15 	stw	r2,124(sp)
 400d3a0:	010001c4 	movi	r4,7
 400d3a4:	2080060e 	bge	r4,r2,400d3c0 <___vfprintf_internal_r+0xae4>
 400d3a8:	d9002d17 	ldw	r4,180(sp)
 400d3ac:	d9801e04 	addi	r6,sp,120
 400d3b0:	b80b883a 	mov	r5,r23
 400d3b4:	40136780 	call	4013678 <__sprint_r>
 400d3b8:	103e4c1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400d3bc:	d8c02017 	ldw	r3,128(sp)
 400d3c0:	d8803117 	ldw	r2,196(sp)
 400d3c4:	d9002917 	ldw	r4,164(sp)
 400d3c8:	1100010e 	bge	r2,r4,400d3d0 <___vfprintf_internal_r+0xaf4>
 400d3cc:	2005883a 	mov	r2,r4
 400d3d0:	d9402f17 	ldw	r5,188(sp)
 400d3d4:	288b883a 	add	r5,r5,r2
 400d3d8:	d9402f15 	stw	r5,188(sp)
 400d3dc:	1801c01e 	bne	r3,zero,400dae0 <___vfprintf_internal_r+0x1204>
 400d3e0:	a8800007 	ldb	r2,0(r21)
 400d3e4:	d8001f15 	stw	zero,124(sp)
 400d3e8:	da000404 	addi	r8,sp,16
 400d3ec:	103d751e 	bne	r2,zero,400c9c4 <__alt_data_end+0xfc00c9c4>
 400d3f0:	a823883a 	mov	r17,r21
 400d3f4:	003d8b06 	br	400ca24 <__alt_data_end+0xfc00ca24>
 400d3f8:	8025883a 	mov	r18,r16
 400d3fc:	dc002903 	ldbu	r16,164(sp)
 400d400:	e011883a 	mov	r8,fp
 400d404:	84003fcc 	andi	r16,r16,255
 400d408:	8005e51e 	bne	r16,zero,400eba0 <___vfprintf_internal_r+0x22c4>
 400d40c:	94800414 	ori	r18,r18,16
 400d410:	9080080c 	andi	r2,r18,32
 400d414:	10022b26 	beq	r2,zero,400dcc4 <___vfprintf_internal_r+0x13e8>
 400d418:	d9002e17 	ldw	r4,184(sp)
 400d41c:	d9402a17 	ldw	r5,168(sp)
 400d420:	d8002785 	stb	zero,158(sp)
 400d424:	20c00204 	addi	r3,r4,8
 400d428:	24c00017 	ldw	r19,0(r4)
 400d42c:	25800117 	ldw	r22,4(r4)
 400d430:	28042e16 	blt	r5,zero,400e4ec <___vfprintf_internal_r+0x1c10>
 400d434:	013fdfc4 	movi	r4,-129
 400d438:	9d84b03a 	or	r2,r19,r22
 400d43c:	d8c02e15 	stw	r3,184(sp)
 400d440:	9124703a 	and	r18,r18,r4
 400d444:	0039883a 	mov	fp,zero
 400d448:	103e801e 	bne	r2,zero,400ce4c <__alt_data_end+0xfc00ce4c>
 400d44c:	d9002a17 	ldw	r4,168(sp)
 400d450:	2002e01e 	bne	r4,zero,400dfd4 <___vfprintf_internal_r+0x16f8>
 400d454:	d8002a15 	stw	zero,168(sp)
 400d458:	d8002b15 	stw	zero,172(sp)
 400d45c:	dc001e04 	addi	r16,sp,120
 400d460:	003ef506 	br	400d038 <__alt_data_end+0xfc00d038>
 400d464:	8025883a 	mov	r18,r16
 400d468:	dc002903 	ldbu	r16,164(sp)
 400d46c:	e011883a 	mov	r8,fp
 400d470:	84003fcc 	andi	r16,r16,255
 400d474:	8005ba1e 	bne	r16,zero,400eb60 <___vfprintf_internal_r+0x2284>
 400d478:	010100b4 	movhi	r4,1026
 400d47c:	2133ce04 	addi	r4,r4,-12488
 400d480:	d9003915 	stw	r4,228(sp)
 400d484:	9080080c 	andi	r2,r18,32
 400d488:	10006126 	beq	r2,zero,400d610 <___vfprintf_internal_r+0xd34>
 400d48c:	d9402e17 	ldw	r5,184(sp)
 400d490:	2cc00017 	ldw	r19,0(r5)
 400d494:	2d800117 	ldw	r22,4(r5)
 400d498:	29400204 	addi	r5,r5,8
 400d49c:	d9402e15 	stw	r5,184(sp)
 400d4a0:	9080004c 	andi	r2,r18,1
 400d4a4:	1001ac26 	beq	r2,zero,400db58 <___vfprintf_internal_r+0x127c>
 400d4a8:	9d84b03a 	or	r2,r19,r22
 400d4ac:	10038526 	beq	r2,zero,400e2c4 <___vfprintf_internal_r+0x19e8>
 400d4b0:	d8c02a17 	ldw	r3,168(sp)
 400d4b4:	00800c04 	movi	r2,48
 400d4b8:	d8802705 	stb	r2,156(sp)
 400d4bc:	dc402745 	stb	r17,157(sp)
 400d4c0:	d8002785 	stb	zero,158(sp)
 400d4c4:	90800094 	ori	r2,r18,2
 400d4c8:	18047916 	blt	r3,zero,400e6b0 <___vfprintf_internal_r+0x1dd4>
 400d4cc:	00bfdfc4 	movi	r2,-129
 400d4d0:	90a4703a 	and	r18,r18,r2
 400d4d4:	94800094 	ori	r18,r18,2
 400d4d8:	0039883a 	mov	fp,zero
 400d4dc:	d9003917 	ldw	r4,228(sp)
 400d4e0:	dc001e04 	addi	r16,sp,120
 400d4e4:	988003cc 	andi	r2,r19,15
 400d4e8:	b006973a 	slli	r3,r22,28
 400d4ec:	2085883a 	add	r2,r4,r2
 400d4f0:	9826d13a 	srli	r19,r19,4
 400d4f4:	10800003 	ldbu	r2,0(r2)
 400d4f8:	b02cd13a 	srli	r22,r22,4
 400d4fc:	843fffc4 	addi	r16,r16,-1
 400d500:	1ce6b03a 	or	r19,r3,r19
 400d504:	80800005 	stb	r2,0(r16)
 400d508:	9d84b03a 	or	r2,r19,r22
 400d50c:	103ff51e 	bne	r2,zero,400d4e4 <__alt_data_end+0xfc00d4e4>
 400d510:	d8c02817 	ldw	r3,160(sp)
 400d514:	1c07c83a 	sub	r3,r3,r16
 400d518:	d8c02b15 	stw	r3,172(sp)
 400d51c:	003ec606 	br	400d038 <__alt_data_end+0xfc00d038>
 400d520:	8025883a 	mov	r18,r16
 400d524:	dc002903 	ldbu	r16,164(sp)
 400d528:	e011883a 	mov	r8,fp
 400d52c:	84003fcc 	andi	r16,r16,255
 400d530:	803e9626 	beq	r16,zero,400cf8c <__alt_data_end+0xfc00cf8c>
 400d534:	d8c02b03 	ldbu	r3,172(sp)
 400d538:	d8c02785 	stb	r3,158(sp)
 400d53c:	003e9306 	br	400cf8c <__alt_data_end+0xfc00cf8c>
 400d540:	00c00044 	movi	r3,1
 400d544:	d8c02905 	stb	r3,164(sp)
 400d548:	00c00ac4 	movi	r3,43
 400d54c:	d8c02b05 	stb	r3,172(sp)
 400d550:	ac400007 	ldb	r17,0(r21)
 400d554:	003d4306 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400d558:	84000814 	ori	r16,r16,32
 400d55c:	ac400007 	ldb	r17,0(r21)
 400d560:	003d4006 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400d564:	d8802e17 	ldw	r2,184(sp)
 400d568:	8025883a 	mov	r18,r16
 400d56c:	d8002785 	stb	zero,158(sp)
 400d570:	14000017 	ldw	r16,0(r2)
 400d574:	e011883a 	mov	r8,fp
 400d578:	14c00104 	addi	r19,r2,4
 400d57c:	80042d26 	beq	r16,zero,400e634 <___vfprintf_internal_r+0x1d58>
 400d580:	d8c02a17 	ldw	r3,168(sp)
 400d584:	1803e416 	blt	r3,zero,400e518 <___vfprintf_internal_r+0x1c3c>
 400d588:	180d883a 	mov	r6,r3
 400d58c:	000b883a 	mov	r5,zero
 400d590:	8009883a 	mov	r4,r16
 400d594:	df003d15 	stw	fp,244(sp)
 400d598:	4011a080 	call	4011a08 <memchr>
 400d59c:	da003d17 	ldw	r8,244(sp)
 400d5a0:	10046826 	beq	r2,zero,400e744 <___vfprintf_internal_r+0x1e68>
 400d5a4:	1405c83a 	sub	r2,r2,r16
 400d5a8:	d8802b15 	stw	r2,172(sp)
 400d5ac:	1003e016 	blt	r2,zero,400e530 <___vfprintf_internal_r+0x1c54>
 400d5b0:	df002783 	ldbu	fp,158(sp)
 400d5b4:	d8802915 	stw	r2,164(sp)
 400d5b8:	dcc02e15 	stw	r19,184(sp)
 400d5bc:	d8002a15 	stw	zero,168(sp)
 400d5c0:	d8003215 	stw	zero,200(sp)
 400d5c4:	003ea206 	br	400d050 <__alt_data_end+0xfc00d050>
 400d5c8:	8025883a 	mov	r18,r16
 400d5cc:	dc002903 	ldbu	r16,164(sp)
 400d5d0:	e011883a 	mov	r8,fp
 400d5d4:	84003fcc 	andi	r16,r16,255
 400d5d8:	803f8d26 	beq	r16,zero,400d410 <__alt_data_end+0xfc00d410>
 400d5dc:	d8c02b03 	ldbu	r3,172(sp)
 400d5e0:	d8c02785 	stb	r3,158(sp)
 400d5e4:	003f8a06 	br	400d410 <__alt_data_end+0xfc00d410>
 400d5e8:	8025883a 	mov	r18,r16
 400d5ec:	dc002903 	ldbu	r16,164(sp)
 400d5f0:	e011883a 	mov	r8,fp
 400d5f4:	84003fcc 	andi	r16,r16,255
 400d5f8:	8005661e 	bne	r16,zero,400eb94 <___vfprintf_internal_r+0x22b8>
 400d5fc:	010100b4 	movhi	r4,1026
 400d600:	2133d304 	addi	r4,r4,-12468
 400d604:	d9003915 	stw	r4,228(sp)
 400d608:	9080080c 	andi	r2,r18,32
 400d60c:	103f9f1e 	bne	r2,zero,400d48c <__alt_data_end+0xfc00d48c>
 400d610:	9080040c 	andi	r2,r18,16
 400d614:	1002eb26 	beq	r2,zero,400e1c4 <___vfprintf_internal_r+0x18e8>
 400d618:	d8802e17 	ldw	r2,184(sp)
 400d61c:	002d883a 	mov	r22,zero
 400d620:	14c00017 	ldw	r19,0(r2)
 400d624:	10800104 	addi	r2,r2,4
 400d628:	d8802e15 	stw	r2,184(sp)
 400d62c:	003f9c06 	br	400d4a0 <__alt_data_end+0xfc00d4a0>
 400d630:	d8802b07 	ldb	r2,172(sp)
 400d634:	1002e11e 	bne	r2,zero,400e1bc <___vfprintf_internal_r+0x18e0>
 400d638:	00c00044 	movi	r3,1
 400d63c:	d8c02905 	stb	r3,164(sp)
 400d640:	00c00804 	movi	r3,32
 400d644:	d8c02b05 	stb	r3,172(sp)
 400d648:	ac400007 	ldb	r17,0(r21)
 400d64c:	003d0506 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400d650:	84000054 	ori	r16,r16,1
 400d654:	ac400007 	ldb	r17,0(r21)
 400d658:	003d0206 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400d65c:	8025883a 	mov	r18,r16
 400d660:	dc002903 	ldbu	r16,164(sp)
 400d664:	e011883a 	mov	r8,fp
 400d668:	84003fcc 	andi	r16,r16,255
 400d66c:	803de726 	beq	r16,zero,400ce0c <__alt_data_end+0xfc00ce0c>
 400d670:	d8c02b03 	ldbu	r3,172(sp)
 400d674:	d8c02785 	stb	r3,158(sp)
 400d678:	003de406 	br	400ce0c <__alt_data_end+0xfc00ce0c>
 400d67c:	84001014 	ori	r16,r16,64
 400d680:	ac400007 	ldb	r17,0(r21)
 400d684:	003cf706 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400d688:	ac400007 	ldb	r17,0(r21)
 400d68c:	00801b04 	movi	r2,108
 400d690:	88838f26 	beq	r17,r2,400e4d0 <___vfprintf_internal_r+0x1bf4>
 400d694:	84000414 	ori	r16,r16,16
 400d698:	003cf206 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400d69c:	8025883a 	mov	r18,r16
 400d6a0:	dc002903 	ldbu	r16,164(sp)
 400d6a4:	e011883a 	mov	r8,fp
 400d6a8:	84003fcc 	andi	r16,r16,255
 400d6ac:	80053f1e 	bne	r16,zero,400ebac <___vfprintf_internal_r+0x22d0>
 400d6b0:	9080080c 	andi	r2,r18,32
 400d6b4:	1002d226 	beq	r2,zero,400e200 <___vfprintf_internal_r+0x1924>
 400d6b8:	d9002e17 	ldw	r4,184(sp)
 400d6bc:	d9402f17 	ldw	r5,188(sp)
 400d6c0:	20800017 	ldw	r2,0(r4)
 400d6c4:	2807d7fa 	srai	r3,r5,31
 400d6c8:	21000104 	addi	r4,r4,4
 400d6cc:	d9002e15 	stw	r4,184(sp)
 400d6d0:	11400015 	stw	r5,0(r2)
 400d6d4:	10c00115 	stw	r3,4(r2)
 400d6d8:	003cb806 	br	400c9bc <__alt_data_end+0xfc00c9bc>
 400d6dc:	d8c02e17 	ldw	r3,184(sp)
 400d6e0:	d9002e17 	ldw	r4,184(sp)
 400d6e4:	8025883a 	mov	r18,r16
 400d6e8:	18800017 	ldw	r2,0(r3)
 400d6ec:	21000104 	addi	r4,r4,4
 400d6f0:	00c00044 	movi	r3,1
 400d6f4:	e011883a 	mov	r8,fp
 400d6f8:	d8c02915 	stw	r3,164(sp)
 400d6fc:	d8002785 	stb	zero,158(sp)
 400d700:	d8801405 	stb	r2,80(sp)
 400d704:	d9002e15 	stw	r4,184(sp)
 400d708:	d8c02b15 	stw	r3,172(sp)
 400d70c:	d8002a15 	stw	zero,168(sp)
 400d710:	d8003215 	stw	zero,200(sp)
 400d714:	dc001404 	addi	r16,sp,80
 400d718:	0039883a 	mov	fp,zero
 400d71c:	003e5306 	br	400d06c <__alt_data_end+0xfc00d06c>
 400d720:	010100b4 	movhi	r4,1026
 400d724:	2133d304 	addi	r4,r4,-12468
 400d728:	0039883a 	mov	fp,zero
 400d72c:	d9003915 	stw	r4,228(sp)
 400d730:	04401e04 	movi	r17,120
 400d734:	003f6906 	br	400d4dc <__alt_data_end+0xfc00d4dc>
 400d738:	8025883a 	mov	r18,r16
 400d73c:	dc002903 	ldbu	r16,164(sp)
 400d740:	e011883a 	mov	r8,fp
 400d744:	84003fcc 	andi	r16,r16,255
 400d748:	8005081e 	bne	r16,zero,400eb6c <___vfprintf_internal_r+0x2290>
 400d74c:	883d6126 	beq	r17,zero,400ccd4 <__alt_data_end+0xfc00ccd4>
 400d750:	00c00044 	movi	r3,1
 400d754:	d8c02915 	stw	r3,164(sp)
 400d758:	dc401405 	stb	r17,80(sp)
 400d75c:	d8002785 	stb	zero,158(sp)
 400d760:	003fe906 	br	400d708 <__alt_data_end+0xfc00d708>
 400d764:	014100b4 	movhi	r5,1026
 400d768:	2973d304 	addi	r5,r5,-12468
 400d76c:	d9403915 	stw	r5,228(sp)
 400d770:	d8c02e15 	stw	r3,184(sp)
 400d774:	1025883a 	mov	r18,r2
 400d778:	04401e04 	movi	r17,120
 400d77c:	9d84b03a 	or	r2,r19,r22
 400d780:	1000fc1e 	bne	r2,zero,400db74 <___vfprintf_internal_r+0x1298>
 400d784:	0039883a 	mov	fp,zero
 400d788:	00800084 	movi	r2,2
 400d78c:	10803fcc 	andi	r2,r2,255
 400d790:	00c00044 	movi	r3,1
 400d794:	10c20f26 	beq	r2,r3,400dfd4 <___vfprintf_internal_r+0x16f8>
 400d798:	00c00084 	movi	r3,2
 400d79c:	10fd3326 	beq	r2,r3,400cc6c <__alt_data_end+0xfc00cc6c>
 400d7a0:	003e0b06 	br	400cfd0 <__alt_data_end+0xfc00cfd0>
 400d7a4:	d8c02017 	ldw	r3,128(sp)
 400d7a8:	003e7106 	br	400d170 <__alt_data_end+0xfc00d170>
 400d7ac:	00801944 	movi	r2,101
 400d7b0:	14407e0e 	bge	r2,r17,400d9ac <___vfprintf_internal_r+0x10d0>
 400d7b4:	d9003617 	ldw	r4,216(sp)
 400d7b8:	d9403817 	ldw	r5,224(sp)
 400d7bc:	000d883a 	mov	r6,zero
 400d7c0:	000f883a 	mov	r7,zero
 400d7c4:	d8c03c15 	stw	r3,240(sp)
 400d7c8:	da003d15 	stw	r8,244(sp)
 400d7cc:	40173fc0 	call	40173fc <__eqdf2>
 400d7d0:	d8c03c17 	ldw	r3,240(sp)
 400d7d4:	da003d17 	ldw	r8,244(sp)
 400d7d8:	1000f71e 	bne	r2,zero,400dbb8 <___vfprintf_internal_r+0x12dc>
 400d7dc:	d8801f17 	ldw	r2,124(sp)
 400d7e0:	010100b4 	movhi	r4,1026
 400d7e4:	2133da04 	addi	r4,r4,-12440
 400d7e8:	18c00044 	addi	r3,r3,1
 400d7ec:	10800044 	addi	r2,r2,1
 400d7f0:	41000015 	stw	r4,0(r8)
 400d7f4:	01000044 	movi	r4,1
 400d7f8:	41000115 	stw	r4,4(r8)
 400d7fc:	d8c02015 	stw	r3,128(sp)
 400d800:	d8801f15 	stw	r2,124(sp)
 400d804:	010001c4 	movi	r4,7
 400d808:	2082b816 	blt	r4,r2,400e2ec <___vfprintf_internal_r+0x1a10>
 400d80c:	42000204 	addi	r8,r8,8
 400d810:	d8802617 	ldw	r2,152(sp)
 400d814:	d9403317 	ldw	r5,204(sp)
 400d818:	11400216 	blt	r2,r5,400d824 <___vfprintf_internal_r+0xf48>
 400d81c:	9080004c 	andi	r2,r18,1
 400d820:	103eb326 	beq	r2,zero,400d2f0 <__alt_data_end+0xfc00d2f0>
 400d824:	d8803717 	ldw	r2,220(sp)
 400d828:	d9003417 	ldw	r4,208(sp)
 400d82c:	d9403717 	ldw	r5,220(sp)
 400d830:	1887883a 	add	r3,r3,r2
 400d834:	d8801f17 	ldw	r2,124(sp)
 400d838:	41000015 	stw	r4,0(r8)
 400d83c:	41400115 	stw	r5,4(r8)
 400d840:	10800044 	addi	r2,r2,1
 400d844:	d8c02015 	stw	r3,128(sp)
 400d848:	d8801f15 	stw	r2,124(sp)
 400d84c:	010001c4 	movi	r4,7
 400d850:	20832916 	blt	r4,r2,400e4f8 <___vfprintf_internal_r+0x1c1c>
 400d854:	42000204 	addi	r8,r8,8
 400d858:	d8803317 	ldw	r2,204(sp)
 400d85c:	143fffc4 	addi	r16,r2,-1
 400d860:	043ea30e 	bge	zero,r16,400d2f0 <__alt_data_end+0xfc00d2f0>
 400d864:	04400404 	movi	r17,16
 400d868:	d8801f17 	ldw	r2,124(sp)
 400d86c:	8c00880e 	bge	r17,r16,400da90 <___vfprintf_internal_r+0x11b4>
 400d870:	014100b4 	movhi	r5,1026
 400d874:	2973da84 	addi	r5,r5,-12438
 400d878:	d9402c15 	stw	r5,176(sp)
 400d87c:	058001c4 	movi	r22,7
 400d880:	dcc02d17 	ldw	r19,180(sp)
 400d884:	00000306 	br	400d894 <___vfprintf_internal_r+0xfb8>
 400d888:	42000204 	addi	r8,r8,8
 400d88c:	843ffc04 	addi	r16,r16,-16
 400d890:	8c00820e 	bge	r17,r16,400da9c <___vfprintf_internal_r+0x11c0>
 400d894:	18c00404 	addi	r3,r3,16
 400d898:	10800044 	addi	r2,r2,1
 400d89c:	45000015 	stw	r20,0(r8)
 400d8a0:	44400115 	stw	r17,4(r8)
 400d8a4:	d8c02015 	stw	r3,128(sp)
 400d8a8:	d8801f15 	stw	r2,124(sp)
 400d8ac:	b0bff60e 	bge	r22,r2,400d888 <__alt_data_end+0xfc00d888>
 400d8b0:	d9801e04 	addi	r6,sp,120
 400d8b4:	b80b883a 	mov	r5,r23
 400d8b8:	9809883a 	mov	r4,r19
 400d8bc:	40136780 	call	4013678 <__sprint_r>
 400d8c0:	103d0a1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400d8c4:	d8c02017 	ldw	r3,128(sp)
 400d8c8:	d8801f17 	ldw	r2,124(sp)
 400d8cc:	da000404 	addi	r8,sp,16
 400d8d0:	003fee06 	br	400d88c <__alt_data_end+0xfc00d88c>
 400d8d4:	d9403117 	ldw	r5,196(sp)
 400d8d8:	d8802917 	ldw	r2,164(sp)
 400d8dc:	28adc83a 	sub	r22,r5,r2
 400d8e0:	05be410e 	bge	zero,r22,400d1e8 <__alt_data_end+0xfc00d1e8>
 400d8e4:	07000404 	movi	fp,16
 400d8e8:	d8801f17 	ldw	r2,124(sp)
 400d8ec:	e5838f0e 	bge	fp,r22,400e72c <___vfprintf_internal_r+0x1e50>
 400d8f0:	014100b4 	movhi	r5,1026
 400d8f4:	2973da84 	addi	r5,r5,-12438
 400d8f8:	dc403015 	stw	r17,192(sp)
 400d8fc:	d9402c15 	stw	r5,176(sp)
 400d900:	b023883a 	mov	r17,r22
 400d904:	04c001c4 	movi	r19,7
 400d908:	a82d883a 	mov	r22,r21
 400d90c:	902b883a 	mov	r21,r18
 400d910:	8025883a 	mov	r18,r16
 400d914:	dc002d17 	ldw	r16,180(sp)
 400d918:	00000306 	br	400d928 <___vfprintf_internal_r+0x104c>
 400d91c:	8c7ffc04 	addi	r17,r17,-16
 400d920:	42000204 	addi	r8,r8,8
 400d924:	e440110e 	bge	fp,r17,400d96c <___vfprintf_internal_r+0x1090>
 400d928:	18c00404 	addi	r3,r3,16
 400d92c:	10800044 	addi	r2,r2,1
 400d930:	45000015 	stw	r20,0(r8)
 400d934:	47000115 	stw	fp,4(r8)
 400d938:	d8c02015 	stw	r3,128(sp)
 400d93c:	d8801f15 	stw	r2,124(sp)
 400d940:	98bff60e 	bge	r19,r2,400d91c <__alt_data_end+0xfc00d91c>
 400d944:	d9801e04 	addi	r6,sp,120
 400d948:	b80b883a 	mov	r5,r23
 400d94c:	8009883a 	mov	r4,r16
 400d950:	40136780 	call	4013678 <__sprint_r>
 400d954:	103ce51e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400d958:	8c7ffc04 	addi	r17,r17,-16
 400d95c:	d8c02017 	ldw	r3,128(sp)
 400d960:	d8801f17 	ldw	r2,124(sp)
 400d964:	da000404 	addi	r8,sp,16
 400d968:	e47fef16 	blt	fp,r17,400d928 <__alt_data_end+0xfc00d928>
 400d96c:	9021883a 	mov	r16,r18
 400d970:	a825883a 	mov	r18,r21
 400d974:	b02b883a 	mov	r21,r22
 400d978:	882d883a 	mov	r22,r17
 400d97c:	dc403017 	ldw	r17,192(sp)
 400d980:	d9002c17 	ldw	r4,176(sp)
 400d984:	1d87883a 	add	r3,r3,r22
 400d988:	10800044 	addi	r2,r2,1
 400d98c:	41000015 	stw	r4,0(r8)
 400d990:	45800115 	stw	r22,4(r8)
 400d994:	d8c02015 	stw	r3,128(sp)
 400d998:	d8801f15 	stw	r2,124(sp)
 400d99c:	010001c4 	movi	r4,7
 400d9a0:	20818e16 	blt	r4,r2,400dfdc <___vfprintf_internal_r+0x1700>
 400d9a4:	42000204 	addi	r8,r8,8
 400d9a8:	003e0f06 	br	400d1e8 <__alt_data_end+0xfc00d1e8>
 400d9ac:	d9403317 	ldw	r5,204(sp)
 400d9b0:	00800044 	movi	r2,1
 400d9b4:	18c00044 	addi	r3,r3,1
 400d9b8:	1141530e 	bge	r2,r5,400df08 <___vfprintf_internal_r+0x162c>
 400d9bc:	dc401f17 	ldw	r17,124(sp)
 400d9c0:	00800044 	movi	r2,1
 400d9c4:	40800115 	stw	r2,4(r8)
 400d9c8:	8c400044 	addi	r17,r17,1
 400d9cc:	44000015 	stw	r16,0(r8)
 400d9d0:	d8c02015 	stw	r3,128(sp)
 400d9d4:	dc401f15 	stw	r17,124(sp)
 400d9d8:	008001c4 	movi	r2,7
 400d9dc:	14416b16 	blt	r2,r17,400df8c <___vfprintf_internal_r+0x16b0>
 400d9e0:	42000204 	addi	r8,r8,8
 400d9e4:	d8803717 	ldw	r2,220(sp)
 400d9e8:	d9003417 	ldw	r4,208(sp)
 400d9ec:	8c400044 	addi	r17,r17,1
 400d9f0:	10c7883a 	add	r3,r2,r3
 400d9f4:	40800115 	stw	r2,4(r8)
 400d9f8:	41000015 	stw	r4,0(r8)
 400d9fc:	d8c02015 	stw	r3,128(sp)
 400da00:	dc401f15 	stw	r17,124(sp)
 400da04:	008001c4 	movi	r2,7
 400da08:	14416916 	blt	r2,r17,400dfb0 <___vfprintf_internal_r+0x16d4>
 400da0c:	45800204 	addi	r22,r8,8
 400da10:	d9003617 	ldw	r4,216(sp)
 400da14:	d9403817 	ldw	r5,224(sp)
 400da18:	000d883a 	mov	r6,zero
 400da1c:	000f883a 	mov	r7,zero
 400da20:	d8c03c15 	stw	r3,240(sp)
 400da24:	40173fc0 	call	40173fc <__eqdf2>
 400da28:	d8c03c17 	ldw	r3,240(sp)
 400da2c:	1000bc26 	beq	r2,zero,400dd20 <___vfprintf_internal_r+0x1444>
 400da30:	d9403317 	ldw	r5,204(sp)
 400da34:	84000044 	addi	r16,r16,1
 400da38:	8c400044 	addi	r17,r17,1
 400da3c:	28bfffc4 	addi	r2,r5,-1
 400da40:	1887883a 	add	r3,r3,r2
 400da44:	b0800115 	stw	r2,4(r22)
 400da48:	b4000015 	stw	r16,0(r22)
 400da4c:	d8c02015 	stw	r3,128(sp)
 400da50:	dc401f15 	stw	r17,124(sp)
 400da54:	008001c4 	movi	r2,7
 400da58:	14414316 	blt	r2,r17,400df68 <___vfprintf_internal_r+0x168c>
 400da5c:	b5800204 	addi	r22,r22,8
 400da60:	d9003a17 	ldw	r4,232(sp)
 400da64:	df0022c4 	addi	fp,sp,139
 400da68:	8c400044 	addi	r17,r17,1
 400da6c:	20c7883a 	add	r3,r4,r3
 400da70:	b7000015 	stw	fp,0(r22)
 400da74:	b1000115 	stw	r4,4(r22)
 400da78:	d8c02015 	stw	r3,128(sp)
 400da7c:	dc401f15 	stw	r17,124(sp)
 400da80:	008001c4 	movi	r2,7
 400da84:	14400e16 	blt	r2,r17,400dac0 <___vfprintf_internal_r+0x11e4>
 400da88:	b2000204 	addi	r8,r22,8
 400da8c:	003e1806 	br	400d2f0 <__alt_data_end+0xfc00d2f0>
 400da90:	010100b4 	movhi	r4,1026
 400da94:	2133da84 	addi	r4,r4,-12438
 400da98:	d9002c15 	stw	r4,176(sp)
 400da9c:	d9002c17 	ldw	r4,176(sp)
 400daa0:	1c07883a 	add	r3,r3,r16
 400daa4:	44000115 	stw	r16,4(r8)
 400daa8:	41000015 	stw	r4,0(r8)
 400daac:	10800044 	addi	r2,r2,1
 400dab0:	d8c02015 	stw	r3,128(sp)
 400dab4:	d8801f15 	stw	r2,124(sp)
 400dab8:	010001c4 	movi	r4,7
 400dabc:	20be0b0e 	bge	r4,r2,400d2ec <__alt_data_end+0xfc00d2ec>
 400dac0:	d9002d17 	ldw	r4,180(sp)
 400dac4:	d9801e04 	addi	r6,sp,120
 400dac8:	b80b883a 	mov	r5,r23
 400dacc:	40136780 	call	4013678 <__sprint_r>
 400dad0:	103c861e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400dad4:	d8c02017 	ldw	r3,128(sp)
 400dad8:	da000404 	addi	r8,sp,16
 400dadc:	003e0406 	br	400d2f0 <__alt_data_end+0xfc00d2f0>
 400dae0:	d9002d17 	ldw	r4,180(sp)
 400dae4:	d9801e04 	addi	r6,sp,120
 400dae8:	b80b883a 	mov	r5,r23
 400daec:	40136780 	call	4013678 <__sprint_r>
 400daf0:	103e3b26 	beq	r2,zero,400d3e0 <__alt_data_end+0xfc00d3e0>
 400daf4:	003c7d06 	br	400ccec <__alt_data_end+0xfc00ccec>
 400daf8:	d9002d17 	ldw	r4,180(sp)
 400dafc:	d9801e04 	addi	r6,sp,120
 400db00:	b80b883a 	mov	r5,r23
 400db04:	40136780 	call	4013678 <__sprint_r>
 400db08:	103c781e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400db0c:	d8c02017 	ldw	r3,128(sp)
 400db10:	da000404 	addi	r8,sp,16
 400db14:	003de906 	br	400d2bc <__alt_data_end+0xfc00d2bc>
 400db18:	d9002d17 	ldw	r4,180(sp)
 400db1c:	d9801e04 	addi	r6,sp,120
 400db20:	b80b883a 	mov	r5,r23
 400db24:	40136780 	call	4013678 <__sprint_r>
 400db28:	103c701e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400db2c:	d8c02017 	ldw	r3,128(sp)
 400db30:	da000404 	addi	r8,sp,16
 400db34:	003d9b06 	br	400d1a4 <__alt_data_end+0xfc00d1a4>
 400db38:	d9002d17 	ldw	r4,180(sp)
 400db3c:	d9801e04 	addi	r6,sp,120
 400db40:	b80b883a 	mov	r5,r23
 400db44:	40136780 	call	4013678 <__sprint_r>
 400db48:	103c681e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400db4c:	d8c02017 	ldw	r3,128(sp)
 400db50:	da000404 	addi	r8,sp,16
 400db54:	003da106 	br	400d1dc <__alt_data_end+0xfc00d1dc>
 400db58:	d9402a17 	ldw	r5,168(sp)
 400db5c:	d8002785 	stb	zero,158(sp)
 400db60:	283f0616 	blt	r5,zero,400d77c <__alt_data_end+0xfc00d77c>
 400db64:	00ffdfc4 	movi	r3,-129
 400db68:	9d84b03a 	or	r2,r19,r22
 400db6c:	90e4703a 	and	r18,r18,r3
 400db70:	103c3b26 	beq	r2,zero,400cc60 <__alt_data_end+0xfc00cc60>
 400db74:	0039883a 	mov	fp,zero
 400db78:	003e5806 	br	400d4dc <__alt_data_end+0xfc00d4dc>
 400db7c:	9080040c 	andi	r2,r18,16
 400db80:	1001b326 	beq	r2,zero,400e250 <___vfprintf_internal_r+0x1974>
 400db84:	d8c02e17 	ldw	r3,184(sp)
 400db88:	d9002a17 	ldw	r4,168(sp)
 400db8c:	d8002785 	stb	zero,158(sp)
 400db90:	18800104 	addi	r2,r3,4
 400db94:	1cc00017 	ldw	r19,0(r3)
 400db98:	002d883a 	mov	r22,zero
 400db9c:	2001b516 	blt	r4,zero,400e274 <___vfprintf_internal_r+0x1998>
 400dba0:	00ffdfc4 	movi	r3,-129
 400dba4:	d8802e15 	stw	r2,184(sp)
 400dba8:	90e4703a 	and	r18,r18,r3
 400dbac:	983d0526 	beq	r19,zero,400cfc4 <__alt_data_end+0xfc00cfc4>
 400dbb0:	0039883a 	mov	fp,zero
 400dbb4:	003d0806 	br	400cfd8 <__alt_data_end+0xfc00cfd8>
 400dbb8:	dc402617 	ldw	r17,152(sp)
 400dbbc:	0441d30e 	bge	zero,r17,400e30c <___vfprintf_internal_r+0x1a30>
 400dbc0:	dc403217 	ldw	r17,200(sp)
 400dbc4:	d8803317 	ldw	r2,204(sp)
 400dbc8:	1440010e 	bge	r2,r17,400dbd0 <___vfprintf_internal_r+0x12f4>
 400dbcc:	1023883a 	mov	r17,r2
 400dbd0:	04400a0e 	bge	zero,r17,400dbfc <___vfprintf_internal_r+0x1320>
 400dbd4:	d8801f17 	ldw	r2,124(sp)
 400dbd8:	1c47883a 	add	r3,r3,r17
 400dbdc:	44000015 	stw	r16,0(r8)
 400dbe0:	10800044 	addi	r2,r2,1
 400dbe4:	44400115 	stw	r17,4(r8)
 400dbe8:	d8c02015 	stw	r3,128(sp)
 400dbec:	d8801f15 	stw	r2,124(sp)
 400dbf0:	010001c4 	movi	r4,7
 400dbf4:	20826516 	blt	r4,r2,400e58c <___vfprintf_internal_r+0x1cb0>
 400dbf8:	42000204 	addi	r8,r8,8
 400dbfc:	88026116 	blt	r17,zero,400e584 <___vfprintf_internal_r+0x1ca8>
 400dc00:	d9003217 	ldw	r4,200(sp)
 400dc04:	2463c83a 	sub	r17,r4,r17
 400dc08:	04407b0e 	bge	zero,r17,400ddf8 <___vfprintf_internal_r+0x151c>
 400dc0c:	05800404 	movi	r22,16
 400dc10:	d8801f17 	ldw	r2,124(sp)
 400dc14:	b4419d0e 	bge	r22,r17,400e28c <___vfprintf_internal_r+0x19b0>
 400dc18:	010100b4 	movhi	r4,1026
 400dc1c:	2133da84 	addi	r4,r4,-12438
 400dc20:	d9002c15 	stw	r4,176(sp)
 400dc24:	070001c4 	movi	fp,7
 400dc28:	dcc02d17 	ldw	r19,180(sp)
 400dc2c:	00000306 	br	400dc3c <___vfprintf_internal_r+0x1360>
 400dc30:	42000204 	addi	r8,r8,8
 400dc34:	8c7ffc04 	addi	r17,r17,-16
 400dc38:	b441970e 	bge	r22,r17,400e298 <___vfprintf_internal_r+0x19bc>
 400dc3c:	18c00404 	addi	r3,r3,16
 400dc40:	10800044 	addi	r2,r2,1
 400dc44:	45000015 	stw	r20,0(r8)
 400dc48:	45800115 	stw	r22,4(r8)
 400dc4c:	d8c02015 	stw	r3,128(sp)
 400dc50:	d8801f15 	stw	r2,124(sp)
 400dc54:	e0bff60e 	bge	fp,r2,400dc30 <__alt_data_end+0xfc00dc30>
 400dc58:	d9801e04 	addi	r6,sp,120
 400dc5c:	b80b883a 	mov	r5,r23
 400dc60:	9809883a 	mov	r4,r19
 400dc64:	40136780 	call	4013678 <__sprint_r>
 400dc68:	103c201e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400dc6c:	d8c02017 	ldw	r3,128(sp)
 400dc70:	d8801f17 	ldw	r2,124(sp)
 400dc74:	da000404 	addi	r8,sp,16
 400dc78:	003fee06 	br	400dc34 <__alt_data_end+0xfc00dc34>
 400dc7c:	d9002d17 	ldw	r4,180(sp)
 400dc80:	d9801e04 	addi	r6,sp,120
 400dc84:	b80b883a 	mov	r5,r23
 400dc88:	40136780 	call	4013678 <__sprint_r>
 400dc8c:	103c171e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400dc90:	d8c02017 	ldw	r3,128(sp)
 400dc94:	df002787 	ldb	fp,158(sp)
 400dc98:	da000404 	addi	r8,sp,16
 400dc9c:	003d3406 	br	400d170 <__alt_data_end+0xfc00d170>
 400dca0:	9080040c 	andi	r2,r18,16
 400dca4:	10016126 	beq	r2,zero,400e22c <___vfprintf_internal_r+0x1950>
 400dca8:	d9402e17 	ldw	r5,184(sp)
 400dcac:	2cc00017 	ldw	r19,0(r5)
 400dcb0:	29400104 	addi	r5,r5,4
 400dcb4:	d9402e15 	stw	r5,184(sp)
 400dcb8:	982dd7fa 	srai	r22,r19,31
 400dcbc:	b005883a 	mov	r2,r22
 400dcc0:	003c5a06 	br	400ce2c <__alt_data_end+0xfc00ce2c>
 400dcc4:	9080040c 	andi	r2,r18,16
 400dcc8:	10003526 	beq	r2,zero,400dda0 <___vfprintf_internal_r+0x14c4>
 400dccc:	d8c02e17 	ldw	r3,184(sp)
 400dcd0:	d9002a17 	ldw	r4,168(sp)
 400dcd4:	d8002785 	stb	zero,158(sp)
 400dcd8:	18800104 	addi	r2,r3,4
 400dcdc:	1cc00017 	ldw	r19,0(r3)
 400dce0:	002d883a 	mov	r22,zero
 400dce4:	20003716 	blt	r4,zero,400ddc4 <___vfprintf_internal_r+0x14e8>
 400dce8:	00ffdfc4 	movi	r3,-129
 400dcec:	d8802e15 	stw	r2,184(sp)
 400dcf0:	90e4703a 	and	r18,r18,r3
 400dcf4:	0039883a 	mov	fp,zero
 400dcf8:	983dd426 	beq	r19,zero,400d44c <__alt_data_end+0xfc00d44c>
 400dcfc:	00800244 	movi	r2,9
 400dd00:	14fc5336 	bltu	r2,r19,400ce50 <__alt_data_end+0xfc00ce50>
 400dd04:	d8c02817 	ldw	r3,160(sp)
 400dd08:	dc001dc4 	addi	r16,sp,119
 400dd0c:	9cc00c04 	addi	r19,r19,48
 400dd10:	1c07c83a 	sub	r3,r3,r16
 400dd14:	dcc01dc5 	stb	r19,119(sp)
 400dd18:	d8c02b15 	stw	r3,172(sp)
 400dd1c:	003cc606 	br	400d038 <__alt_data_end+0xfc00d038>
 400dd20:	d8803317 	ldw	r2,204(sp)
 400dd24:	143fffc4 	addi	r16,r2,-1
 400dd28:	043f4d0e 	bge	zero,r16,400da60 <__alt_data_end+0xfc00da60>
 400dd2c:	07000404 	movi	fp,16
 400dd30:	e400810e 	bge	fp,r16,400df38 <___vfprintf_internal_r+0x165c>
 400dd34:	014100b4 	movhi	r5,1026
 400dd38:	2973da84 	addi	r5,r5,-12438
 400dd3c:	d9402c15 	stw	r5,176(sp)
 400dd40:	01c001c4 	movi	r7,7
 400dd44:	dcc02d17 	ldw	r19,180(sp)
 400dd48:	00000306 	br	400dd58 <___vfprintf_internal_r+0x147c>
 400dd4c:	b5800204 	addi	r22,r22,8
 400dd50:	843ffc04 	addi	r16,r16,-16
 400dd54:	e4007b0e 	bge	fp,r16,400df44 <___vfprintf_internal_r+0x1668>
 400dd58:	18c00404 	addi	r3,r3,16
 400dd5c:	8c400044 	addi	r17,r17,1
 400dd60:	b5000015 	stw	r20,0(r22)
 400dd64:	b7000115 	stw	fp,4(r22)
 400dd68:	d8c02015 	stw	r3,128(sp)
 400dd6c:	dc401f15 	stw	r17,124(sp)
 400dd70:	3c7ff60e 	bge	r7,r17,400dd4c <__alt_data_end+0xfc00dd4c>
 400dd74:	d9801e04 	addi	r6,sp,120
 400dd78:	b80b883a 	mov	r5,r23
 400dd7c:	9809883a 	mov	r4,r19
 400dd80:	d9c03c15 	stw	r7,240(sp)
 400dd84:	40136780 	call	4013678 <__sprint_r>
 400dd88:	d9c03c17 	ldw	r7,240(sp)
 400dd8c:	103bd71e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400dd90:	d8c02017 	ldw	r3,128(sp)
 400dd94:	dc401f17 	ldw	r17,124(sp)
 400dd98:	dd800404 	addi	r22,sp,16
 400dd9c:	003fec06 	br	400dd50 <__alt_data_end+0xfc00dd50>
 400dda0:	9080100c 	andi	r2,r18,64
 400dda4:	d8002785 	stb	zero,158(sp)
 400dda8:	10010e26 	beq	r2,zero,400e1e4 <___vfprintf_internal_r+0x1908>
 400ddac:	d9402e17 	ldw	r5,184(sp)
 400ddb0:	d8c02a17 	ldw	r3,168(sp)
 400ddb4:	002d883a 	mov	r22,zero
 400ddb8:	28800104 	addi	r2,r5,4
 400ddbc:	2cc0000b 	ldhu	r19,0(r5)
 400ddc0:	183fc90e 	bge	r3,zero,400dce8 <__alt_data_end+0xfc00dce8>
 400ddc4:	d8802e15 	stw	r2,184(sp)
 400ddc8:	0039883a 	mov	fp,zero
 400ddcc:	9d84b03a 	or	r2,r19,r22
 400ddd0:	103c1e1e 	bne	r2,zero,400ce4c <__alt_data_end+0xfc00ce4c>
 400ddd4:	00800044 	movi	r2,1
 400ddd8:	003e6c06 	br	400d78c <__alt_data_end+0xfc00d78c>
 400dddc:	d9002d17 	ldw	r4,180(sp)
 400dde0:	d9801e04 	addi	r6,sp,120
 400dde4:	b80b883a 	mov	r5,r23
 400dde8:	40136780 	call	4013678 <__sprint_r>
 400ddec:	103bbf1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400ddf0:	d8c02017 	ldw	r3,128(sp)
 400ddf4:	da000404 	addi	r8,sp,16
 400ddf8:	d9003217 	ldw	r4,200(sp)
 400ddfc:	d8802617 	ldw	r2,152(sp)
 400de00:	d9403317 	ldw	r5,204(sp)
 400de04:	8123883a 	add	r17,r16,r4
 400de08:	11400216 	blt	r2,r5,400de14 <___vfprintf_internal_r+0x1538>
 400de0c:	9100004c 	andi	r4,r18,1
 400de10:	20000d26 	beq	r4,zero,400de48 <___vfprintf_internal_r+0x156c>
 400de14:	d9003717 	ldw	r4,220(sp)
 400de18:	d9403417 	ldw	r5,208(sp)
 400de1c:	1907883a 	add	r3,r3,r4
 400de20:	d9001f17 	ldw	r4,124(sp)
 400de24:	41400015 	stw	r5,0(r8)
 400de28:	d9403717 	ldw	r5,220(sp)
 400de2c:	21000044 	addi	r4,r4,1
 400de30:	d8c02015 	stw	r3,128(sp)
 400de34:	41400115 	stw	r5,4(r8)
 400de38:	d9001f15 	stw	r4,124(sp)
 400de3c:	014001c4 	movi	r5,7
 400de40:	2901e816 	blt	r5,r4,400e5e4 <___vfprintf_internal_r+0x1d08>
 400de44:	42000204 	addi	r8,r8,8
 400de48:	d9003317 	ldw	r4,204(sp)
 400de4c:	8121883a 	add	r16,r16,r4
 400de50:	2085c83a 	sub	r2,r4,r2
 400de54:	8461c83a 	sub	r16,r16,r17
 400de58:	1400010e 	bge	r2,r16,400de60 <___vfprintf_internal_r+0x1584>
 400de5c:	1021883a 	mov	r16,r2
 400de60:	04000a0e 	bge	zero,r16,400de8c <___vfprintf_internal_r+0x15b0>
 400de64:	d9001f17 	ldw	r4,124(sp)
 400de68:	1c07883a 	add	r3,r3,r16
 400de6c:	44400015 	stw	r17,0(r8)
 400de70:	21000044 	addi	r4,r4,1
 400de74:	44000115 	stw	r16,4(r8)
 400de78:	d8c02015 	stw	r3,128(sp)
 400de7c:	d9001f15 	stw	r4,124(sp)
 400de80:	014001c4 	movi	r5,7
 400de84:	2901fb16 	blt	r5,r4,400e674 <___vfprintf_internal_r+0x1d98>
 400de88:	42000204 	addi	r8,r8,8
 400de8c:	8001f716 	blt	r16,zero,400e66c <___vfprintf_internal_r+0x1d90>
 400de90:	1421c83a 	sub	r16,r2,r16
 400de94:	043d160e 	bge	zero,r16,400d2f0 <__alt_data_end+0xfc00d2f0>
 400de98:	04400404 	movi	r17,16
 400de9c:	d8801f17 	ldw	r2,124(sp)
 400dea0:	8c3efb0e 	bge	r17,r16,400da90 <__alt_data_end+0xfc00da90>
 400dea4:	014100b4 	movhi	r5,1026
 400dea8:	2973da84 	addi	r5,r5,-12438
 400deac:	d9402c15 	stw	r5,176(sp)
 400deb0:	058001c4 	movi	r22,7
 400deb4:	dcc02d17 	ldw	r19,180(sp)
 400deb8:	00000306 	br	400dec8 <___vfprintf_internal_r+0x15ec>
 400debc:	42000204 	addi	r8,r8,8
 400dec0:	843ffc04 	addi	r16,r16,-16
 400dec4:	8c3ef50e 	bge	r17,r16,400da9c <__alt_data_end+0xfc00da9c>
 400dec8:	18c00404 	addi	r3,r3,16
 400decc:	10800044 	addi	r2,r2,1
 400ded0:	45000015 	stw	r20,0(r8)
 400ded4:	44400115 	stw	r17,4(r8)
 400ded8:	d8c02015 	stw	r3,128(sp)
 400dedc:	d8801f15 	stw	r2,124(sp)
 400dee0:	b0bff60e 	bge	r22,r2,400debc <__alt_data_end+0xfc00debc>
 400dee4:	d9801e04 	addi	r6,sp,120
 400dee8:	b80b883a 	mov	r5,r23
 400deec:	9809883a 	mov	r4,r19
 400def0:	40136780 	call	4013678 <__sprint_r>
 400def4:	103b7d1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400def8:	d8c02017 	ldw	r3,128(sp)
 400defc:	d8801f17 	ldw	r2,124(sp)
 400df00:	da000404 	addi	r8,sp,16
 400df04:	003fee06 	br	400dec0 <__alt_data_end+0xfc00dec0>
 400df08:	9088703a 	and	r4,r18,r2
 400df0c:	203eab1e 	bne	r4,zero,400d9bc <__alt_data_end+0xfc00d9bc>
 400df10:	dc401f17 	ldw	r17,124(sp)
 400df14:	40800115 	stw	r2,4(r8)
 400df18:	44000015 	stw	r16,0(r8)
 400df1c:	8c400044 	addi	r17,r17,1
 400df20:	d8c02015 	stw	r3,128(sp)
 400df24:	dc401f15 	stw	r17,124(sp)
 400df28:	008001c4 	movi	r2,7
 400df2c:	14400e16 	blt	r2,r17,400df68 <___vfprintf_internal_r+0x168c>
 400df30:	45800204 	addi	r22,r8,8
 400df34:	003eca06 	br	400da60 <__alt_data_end+0xfc00da60>
 400df38:	010100b4 	movhi	r4,1026
 400df3c:	2133da84 	addi	r4,r4,-12438
 400df40:	d9002c15 	stw	r4,176(sp)
 400df44:	d8802c17 	ldw	r2,176(sp)
 400df48:	1c07883a 	add	r3,r3,r16
 400df4c:	8c400044 	addi	r17,r17,1
 400df50:	b0800015 	stw	r2,0(r22)
 400df54:	b4000115 	stw	r16,4(r22)
 400df58:	d8c02015 	stw	r3,128(sp)
 400df5c:	dc401f15 	stw	r17,124(sp)
 400df60:	008001c4 	movi	r2,7
 400df64:	147ebd0e 	bge	r2,r17,400da5c <__alt_data_end+0xfc00da5c>
 400df68:	d9002d17 	ldw	r4,180(sp)
 400df6c:	d9801e04 	addi	r6,sp,120
 400df70:	b80b883a 	mov	r5,r23
 400df74:	40136780 	call	4013678 <__sprint_r>
 400df78:	103b5c1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400df7c:	d8c02017 	ldw	r3,128(sp)
 400df80:	dc401f17 	ldw	r17,124(sp)
 400df84:	dd800404 	addi	r22,sp,16
 400df88:	003eb506 	br	400da60 <__alt_data_end+0xfc00da60>
 400df8c:	d9002d17 	ldw	r4,180(sp)
 400df90:	d9801e04 	addi	r6,sp,120
 400df94:	b80b883a 	mov	r5,r23
 400df98:	40136780 	call	4013678 <__sprint_r>
 400df9c:	103b531e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400dfa0:	d8c02017 	ldw	r3,128(sp)
 400dfa4:	dc401f17 	ldw	r17,124(sp)
 400dfa8:	da000404 	addi	r8,sp,16
 400dfac:	003e8d06 	br	400d9e4 <__alt_data_end+0xfc00d9e4>
 400dfb0:	d9002d17 	ldw	r4,180(sp)
 400dfb4:	d9801e04 	addi	r6,sp,120
 400dfb8:	b80b883a 	mov	r5,r23
 400dfbc:	40136780 	call	4013678 <__sprint_r>
 400dfc0:	103b4a1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400dfc4:	d8c02017 	ldw	r3,128(sp)
 400dfc8:	dc401f17 	ldw	r17,124(sp)
 400dfcc:	dd800404 	addi	r22,sp,16
 400dfd0:	003e8f06 	br	400da10 <__alt_data_end+0xfc00da10>
 400dfd4:	0027883a 	mov	r19,zero
 400dfd8:	003f4a06 	br	400dd04 <__alt_data_end+0xfc00dd04>
 400dfdc:	d9002d17 	ldw	r4,180(sp)
 400dfe0:	d9801e04 	addi	r6,sp,120
 400dfe4:	b80b883a 	mov	r5,r23
 400dfe8:	40136780 	call	4013678 <__sprint_r>
 400dfec:	103b3f1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400dff0:	d8c02017 	ldw	r3,128(sp)
 400dff4:	da000404 	addi	r8,sp,16
 400dff8:	003c7b06 	br	400d1e8 <__alt_data_end+0xfc00d1e8>
 400dffc:	d9402a17 	ldw	r5,168(sp)
 400e000:	04e7c83a 	sub	r19,zero,r19
 400e004:	07000b44 	movi	fp,45
 400e008:	9804c03a 	cmpne	r2,r19,zero
 400e00c:	05adc83a 	sub	r22,zero,r22
 400e010:	df002785 	stb	fp,158(sp)
 400e014:	b0adc83a 	sub	r22,r22,r2
 400e018:	28017b16 	blt	r5,zero,400e608 <___vfprintf_internal_r+0x1d2c>
 400e01c:	00bfdfc4 	movi	r2,-129
 400e020:	90a4703a 	and	r18,r18,r2
 400e024:	003b8906 	br	400ce4c <__alt_data_end+0xfc00ce4c>
 400e028:	d9003617 	ldw	r4,216(sp)
 400e02c:	d9403817 	ldw	r5,224(sp)
 400e030:	da003d15 	stw	r8,244(sp)
 400e034:	40133cc0 	call	40133cc <__fpclassifyd>
 400e038:	da003d17 	ldw	r8,244(sp)
 400e03c:	1000f026 	beq	r2,zero,400e400 <___vfprintf_internal_r+0x1b24>
 400e040:	d9002a17 	ldw	r4,168(sp)
 400e044:	05bff7c4 	movi	r22,-33
 400e048:	00bfffc4 	movi	r2,-1
 400e04c:	8dac703a 	and	r22,r17,r22
 400e050:	20820026 	beq	r4,r2,400e854 <___vfprintf_internal_r+0x1f78>
 400e054:	008011c4 	movi	r2,71
 400e058:	b081f726 	beq	r22,r2,400e838 <___vfprintf_internal_r+0x1f5c>
 400e05c:	d9003817 	ldw	r4,224(sp)
 400e060:	90c04014 	ori	r3,r18,256
 400e064:	d8c02c15 	stw	r3,176(sp)
 400e068:	20021516 	blt	r4,zero,400e8c0 <___vfprintf_internal_r+0x1fe4>
 400e06c:	dcc03817 	ldw	r19,224(sp)
 400e070:	d8002905 	stb	zero,164(sp)
 400e074:	00801984 	movi	r2,102
 400e078:	8881f926 	beq	r17,r2,400e860 <___vfprintf_internal_r+0x1f84>
 400e07c:	00801184 	movi	r2,70
 400e080:	88821c26 	beq	r17,r2,400e8f4 <___vfprintf_internal_r+0x2018>
 400e084:	00801144 	movi	r2,69
 400e088:	b081ef26 	beq	r22,r2,400e848 <___vfprintf_internal_r+0x1f6c>
 400e08c:	d8c02a17 	ldw	r3,168(sp)
 400e090:	d8802104 	addi	r2,sp,132
 400e094:	d8800315 	stw	r2,12(sp)
 400e098:	d9403617 	ldw	r5,216(sp)
 400e09c:	d8802504 	addi	r2,sp,148
 400e0a0:	d9002d17 	ldw	r4,180(sp)
 400e0a4:	d8800215 	stw	r2,8(sp)
 400e0a8:	d8802604 	addi	r2,sp,152
 400e0ac:	d8c00015 	stw	r3,0(sp)
 400e0b0:	d8800115 	stw	r2,4(sp)
 400e0b4:	01c00084 	movi	r7,2
 400e0b8:	980d883a 	mov	r6,r19
 400e0bc:	d8c03c15 	stw	r3,240(sp)
 400e0c0:	da003d15 	stw	r8,244(sp)
 400e0c4:	400f00c0 	call	400f00c <_dtoa_r>
 400e0c8:	1021883a 	mov	r16,r2
 400e0cc:	008019c4 	movi	r2,103
 400e0d0:	d8c03c17 	ldw	r3,240(sp)
 400e0d4:	da003d17 	ldw	r8,244(sp)
 400e0d8:	88817126 	beq	r17,r2,400e6a0 <___vfprintf_internal_r+0x1dc4>
 400e0dc:	008011c4 	movi	r2,71
 400e0e0:	88829126 	beq	r17,r2,400eb28 <___vfprintf_internal_r+0x224c>
 400e0e4:	80f9883a 	add	fp,r16,r3
 400e0e8:	d9003617 	ldw	r4,216(sp)
 400e0ec:	000d883a 	mov	r6,zero
 400e0f0:	000f883a 	mov	r7,zero
 400e0f4:	980b883a 	mov	r5,r19
 400e0f8:	da003d15 	stw	r8,244(sp)
 400e0fc:	40173fc0 	call	40173fc <__eqdf2>
 400e100:	da003d17 	ldw	r8,244(sp)
 400e104:	10018d26 	beq	r2,zero,400e73c <___vfprintf_internal_r+0x1e60>
 400e108:	d8802117 	ldw	r2,132(sp)
 400e10c:	1700062e 	bgeu	r2,fp,400e128 <___vfprintf_internal_r+0x184c>
 400e110:	01000c04 	movi	r4,48
 400e114:	10c00044 	addi	r3,r2,1
 400e118:	d8c02115 	stw	r3,132(sp)
 400e11c:	11000005 	stb	r4,0(r2)
 400e120:	d8802117 	ldw	r2,132(sp)
 400e124:	173ffb36 	bltu	r2,fp,400e114 <__alt_data_end+0xfc00e114>
 400e128:	1405c83a 	sub	r2,r2,r16
 400e12c:	d8803315 	stw	r2,204(sp)
 400e130:	008011c4 	movi	r2,71
 400e134:	b0817626 	beq	r22,r2,400e710 <___vfprintf_internal_r+0x1e34>
 400e138:	00801944 	movi	r2,101
 400e13c:	1442800e 	bge	r2,r17,400eb40 <___vfprintf_internal_r+0x2264>
 400e140:	d8c02617 	ldw	r3,152(sp)
 400e144:	00801984 	movi	r2,102
 400e148:	d8c03215 	stw	r3,200(sp)
 400e14c:	8881fe26 	beq	r17,r2,400e948 <___vfprintf_internal_r+0x206c>
 400e150:	d8c03217 	ldw	r3,200(sp)
 400e154:	d9003317 	ldw	r4,204(sp)
 400e158:	1901dd16 	blt	r3,r4,400e8d0 <___vfprintf_internal_r+0x1ff4>
 400e15c:	9480004c 	andi	r18,r18,1
 400e160:	90022b1e 	bne	r18,zero,400ea10 <___vfprintf_internal_r+0x2134>
 400e164:	1805883a 	mov	r2,r3
 400e168:	18028316 	blt	r3,zero,400eb78 <___vfprintf_internal_r+0x229c>
 400e16c:	d8c03217 	ldw	r3,200(sp)
 400e170:	044019c4 	movi	r17,103
 400e174:	d8c02b15 	stw	r3,172(sp)
 400e178:	df002907 	ldb	fp,164(sp)
 400e17c:	e001531e 	bne	fp,zero,400e6cc <___vfprintf_internal_r+0x1df0>
 400e180:	df002783 	ldbu	fp,158(sp)
 400e184:	d8802915 	stw	r2,164(sp)
 400e188:	dc802c17 	ldw	r18,176(sp)
 400e18c:	d8002a15 	stw	zero,168(sp)
 400e190:	003baf06 	br	400d050 <__alt_data_end+0xfc00d050>
 400e194:	d8c02e17 	ldw	r3,184(sp)
 400e198:	d9002e17 	ldw	r4,184(sp)
 400e19c:	d9402e17 	ldw	r5,184(sp)
 400e1a0:	18c00017 	ldw	r3,0(r3)
 400e1a4:	21000117 	ldw	r4,4(r4)
 400e1a8:	29400204 	addi	r5,r5,8
 400e1ac:	d8c03615 	stw	r3,216(sp)
 400e1b0:	d9003815 	stw	r4,224(sp)
 400e1b4:	d9402e15 	stw	r5,184(sp)
 400e1b8:	003b5006 	br	400cefc <__alt_data_end+0xfc00cefc>
 400e1bc:	ac400007 	ldb	r17,0(r21)
 400e1c0:	003a2806 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400e1c4:	9080100c 	andi	r2,r18,64
 400e1c8:	1000a826 	beq	r2,zero,400e46c <___vfprintf_internal_r+0x1b90>
 400e1cc:	d8c02e17 	ldw	r3,184(sp)
 400e1d0:	002d883a 	mov	r22,zero
 400e1d4:	1cc0000b 	ldhu	r19,0(r3)
 400e1d8:	18c00104 	addi	r3,r3,4
 400e1dc:	d8c02e15 	stw	r3,184(sp)
 400e1e0:	003caf06 	br	400d4a0 <__alt_data_end+0xfc00d4a0>
 400e1e4:	d9002e17 	ldw	r4,184(sp)
 400e1e8:	d9402a17 	ldw	r5,168(sp)
 400e1ec:	002d883a 	mov	r22,zero
 400e1f0:	20800104 	addi	r2,r4,4
 400e1f4:	24c00017 	ldw	r19,0(r4)
 400e1f8:	283ebb0e 	bge	r5,zero,400dce8 <__alt_data_end+0xfc00dce8>
 400e1fc:	003ef106 	br	400ddc4 <__alt_data_end+0xfc00ddc4>
 400e200:	9080040c 	andi	r2,r18,16
 400e204:	1000921e 	bne	r2,zero,400e450 <___vfprintf_internal_r+0x1b74>
 400e208:	9480100c 	andi	r18,r18,64
 400e20c:	90013926 	beq	r18,zero,400e6f4 <___vfprintf_internal_r+0x1e18>
 400e210:	d9402e17 	ldw	r5,184(sp)
 400e214:	d8c02f17 	ldw	r3,188(sp)
 400e218:	28800017 	ldw	r2,0(r5)
 400e21c:	29400104 	addi	r5,r5,4
 400e220:	d9402e15 	stw	r5,184(sp)
 400e224:	10c0000d 	sth	r3,0(r2)
 400e228:	0039e406 	br	400c9bc <__alt_data_end+0xfc00c9bc>
 400e22c:	9080100c 	andi	r2,r18,64
 400e230:	10008026 	beq	r2,zero,400e434 <___vfprintf_internal_r+0x1b58>
 400e234:	d8802e17 	ldw	r2,184(sp)
 400e238:	14c0000f 	ldh	r19,0(r2)
 400e23c:	10800104 	addi	r2,r2,4
 400e240:	d8802e15 	stw	r2,184(sp)
 400e244:	982dd7fa 	srai	r22,r19,31
 400e248:	b005883a 	mov	r2,r22
 400e24c:	003af706 	br	400ce2c <__alt_data_end+0xfc00ce2c>
 400e250:	9080100c 	andi	r2,r18,64
 400e254:	d8002785 	stb	zero,158(sp)
 400e258:	10008a1e 	bne	r2,zero,400e484 <___vfprintf_internal_r+0x1ba8>
 400e25c:	d9002e17 	ldw	r4,184(sp)
 400e260:	d9402a17 	ldw	r5,168(sp)
 400e264:	002d883a 	mov	r22,zero
 400e268:	20800104 	addi	r2,r4,4
 400e26c:	24c00017 	ldw	r19,0(r4)
 400e270:	283e4b0e 	bge	r5,zero,400dba0 <__alt_data_end+0xfc00dba0>
 400e274:	9d86b03a 	or	r3,r19,r22
 400e278:	d8802e15 	stw	r2,184(sp)
 400e27c:	183e4c1e 	bne	r3,zero,400dbb0 <__alt_data_end+0xfc00dbb0>
 400e280:	0039883a 	mov	fp,zero
 400e284:	0005883a 	mov	r2,zero
 400e288:	003d4006 	br	400d78c <__alt_data_end+0xfc00d78c>
 400e28c:	014100b4 	movhi	r5,1026
 400e290:	2973da84 	addi	r5,r5,-12438
 400e294:	d9402c15 	stw	r5,176(sp)
 400e298:	d9402c17 	ldw	r5,176(sp)
 400e29c:	1c47883a 	add	r3,r3,r17
 400e2a0:	10800044 	addi	r2,r2,1
 400e2a4:	41400015 	stw	r5,0(r8)
 400e2a8:	44400115 	stw	r17,4(r8)
 400e2ac:	d8c02015 	stw	r3,128(sp)
 400e2b0:	d8801f15 	stw	r2,124(sp)
 400e2b4:	010001c4 	movi	r4,7
 400e2b8:	20bec816 	blt	r4,r2,400dddc <__alt_data_end+0xfc00dddc>
 400e2bc:	42000204 	addi	r8,r8,8
 400e2c0:	003ecd06 	br	400ddf8 <__alt_data_end+0xfc00ddf8>
 400e2c4:	d9002a17 	ldw	r4,168(sp)
 400e2c8:	d8002785 	stb	zero,158(sp)
 400e2cc:	203d2d16 	blt	r4,zero,400d784 <__alt_data_end+0xfc00d784>
 400e2d0:	00bfdfc4 	movi	r2,-129
 400e2d4:	90a4703a 	and	r18,r18,r2
 400e2d8:	003a6106 	br	400cc60 <__alt_data_end+0xfc00cc60>
 400e2dc:	010100b4 	movhi	r4,1026
 400e2e0:	2133da84 	addi	r4,r4,-12438
 400e2e4:	d9002c15 	stw	r4,176(sp)
 400e2e8:	003bea06 	br	400d294 <__alt_data_end+0xfc00d294>
 400e2ec:	d9002d17 	ldw	r4,180(sp)
 400e2f0:	d9801e04 	addi	r6,sp,120
 400e2f4:	b80b883a 	mov	r5,r23
 400e2f8:	40136780 	call	4013678 <__sprint_r>
 400e2fc:	103a7b1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400e300:	d8c02017 	ldw	r3,128(sp)
 400e304:	da000404 	addi	r8,sp,16
 400e308:	003d4106 	br	400d810 <__alt_data_end+0xfc00d810>
 400e30c:	d8801f17 	ldw	r2,124(sp)
 400e310:	014100b4 	movhi	r5,1026
 400e314:	01000044 	movi	r4,1
 400e318:	18c00044 	addi	r3,r3,1
 400e31c:	10800044 	addi	r2,r2,1
 400e320:	2973da04 	addi	r5,r5,-12440
 400e324:	41000115 	stw	r4,4(r8)
 400e328:	41400015 	stw	r5,0(r8)
 400e32c:	d8c02015 	stw	r3,128(sp)
 400e330:	d8801f15 	stw	r2,124(sp)
 400e334:	010001c4 	movi	r4,7
 400e338:	20805c16 	blt	r4,r2,400e4ac <___vfprintf_internal_r+0x1bd0>
 400e33c:	42000204 	addi	r8,r8,8
 400e340:	8800041e 	bne	r17,zero,400e354 <___vfprintf_internal_r+0x1a78>
 400e344:	d8803317 	ldw	r2,204(sp)
 400e348:	1000021e 	bne	r2,zero,400e354 <___vfprintf_internal_r+0x1a78>
 400e34c:	9080004c 	andi	r2,r18,1
 400e350:	103be726 	beq	r2,zero,400d2f0 <__alt_data_end+0xfc00d2f0>
 400e354:	d9003717 	ldw	r4,220(sp)
 400e358:	d8801f17 	ldw	r2,124(sp)
 400e35c:	d9403417 	ldw	r5,208(sp)
 400e360:	20c7883a 	add	r3,r4,r3
 400e364:	10800044 	addi	r2,r2,1
 400e368:	41000115 	stw	r4,4(r8)
 400e36c:	41400015 	stw	r5,0(r8)
 400e370:	d8c02015 	stw	r3,128(sp)
 400e374:	d8801f15 	stw	r2,124(sp)
 400e378:	010001c4 	movi	r4,7
 400e37c:	20812116 	blt	r4,r2,400e804 <___vfprintf_internal_r+0x1f28>
 400e380:	42000204 	addi	r8,r8,8
 400e384:	0463c83a 	sub	r17,zero,r17
 400e388:	0440730e 	bge	zero,r17,400e558 <___vfprintf_internal_r+0x1c7c>
 400e38c:	05800404 	movi	r22,16
 400e390:	b440860e 	bge	r22,r17,400e5ac <___vfprintf_internal_r+0x1cd0>
 400e394:	014100b4 	movhi	r5,1026
 400e398:	2973da84 	addi	r5,r5,-12438
 400e39c:	d9402c15 	stw	r5,176(sp)
 400e3a0:	070001c4 	movi	fp,7
 400e3a4:	dcc02d17 	ldw	r19,180(sp)
 400e3a8:	00000306 	br	400e3b8 <___vfprintf_internal_r+0x1adc>
 400e3ac:	42000204 	addi	r8,r8,8
 400e3b0:	8c7ffc04 	addi	r17,r17,-16
 400e3b4:	b440800e 	bge	r22,r17,400e5b8 <___vfprintf_internal_r+0x1cdc>
 400e3b8:	18c00404 	addi	r3,r3,16
 400e3bc:	10800044 	addi	r2,r2,1
 400e3c0:	45000015 	stw	r20,0(r8)
 400e3c4:	45800115 	stw	r22,4(r8)
 400e3c8:	d8c02015 	stw	r3,128(sp)
 400e3cc:	d8801f15 	stw	r2,124(sp)
 400e3d0:	e0bff60e 	bge	fp,r2,400e3ac <__alt_data_end+0xfc00e3ac>
 400e3d4:	d9801e04 	addi	r6,sp,120
 400e3d8:	b80b883a 	mov	r5,r23
 400e3dc:	9809883a 	mov	r4,r19
 400e3e0:	40136780 	call	4013678 <__sprint_r>
 400e3e4:	103a411e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400e3e8:	d8c02017 	ldw	r3,128(sp)
 400e3ec:	d8801f17 	ldw	r2,124(sp)
 400e3f0:	da000404 	addi	r8,sp,16
 400e3f4:	003fee06 	br	400e3b0 <__alt_data_end+0xfc00e3b0>
 400e3f8:	00bfffc4 	movi	r2,-1
 400e3fc:	003a3f06 	br	400ccfc <__alt_data_end+0xfc00ccfc>
 400e400:	008011c4 	movi	r2,71
 400e404:	1440b816 	blt	r2,r17,400e6e8 <___vfprintf_internal_r+0x1e0c>
 400e408:	040100b4 	movhi	r16,1026
 400e40c:	8433cc04 	addi	r16,r16,-12496
 400e410:	00c000c4 	movi	r3,3
 400e414:	00bfdfc4 	movi	r2,-129
 400e418:	d8c02915 	stw	r3,164(sp)
 400e41c:	90a4703a 	and	r18,r18,r2
 400e420:	df002783 	ldbu	fp,158(sp)
 400e424:	d8c02b15 	stw	r3,172(sp)
 400e428:	d8002a15 	stw	zero,168(sp)
 400e42c:	d8003215 	stw	zero,200(sp)
 400e430:	003b0706 	br	400d050 <__alt_data_end+0xfc00d050>
 400e434:	d8c02e17 	ldw	r3,184(sp)
 400e438:	1cc00017 	ldw	r19,0(r3)
 400e43c:	18c00104 	addi	r3,r3,4
 400e440:	d8c02e15 	stw	r3,184(sp)
 400e444:	982dd7fa 	srai	r22,r19,31
 400e448:	b005883a 	mov	r2,r22
 400e44c:	003a7706 	br	400ce2c <__alt_data_end+0xfc00ce2c>
 400e450:	d8c02e17 	ldw	r3,184(sp)
 400e454:	d9002f17 	ldw	r4,188(sp)
 400e458:	18800017 	ldw	r2,0(r3)
 400e45c:	18c00104 	addi	r3,r3,4
 400e460:	d8c02e15 	stw	r3,184(sp)
 400e464:	11000015 	stw	r4,0(r2)
 400e468:	00395406 	br	400c9bc <__alt_data_end+0xfc00c9bc>
 400e46c:	d9002e17 	ldw	r4,184(sp)
 400e470:	002d883a 	mov	r22,zero
 400e474:	24c00017 	ldw	r19,0(r4)
 400e478:	21000104 	addi	r4,r4,4
 400e47c:	d9002e15 	stw	r4,184(sp)
 400e480:	003c0706 	br	400d4a0 <__alt_data_end+0xfc00d4a0>
 400e484:	d9402e17 	ldw	r5,184(sp)
 400e488:	d8c02a17 	ldw	r3,168(sp)
 400e48c:	002d883a 	mov	r22,zero
 400e490:	28800104 	addi	r2,r5,4
 400e494:	2cc0000b 	ldhu	r19,0(r5)
 400e498:	183dc10e 	bge	r3,zero,400dba0 <__alt_data_end+0xfc00dba0>
 400e49c:	003f7506 	br	400e274 <__alt_data_end+0xfc00e274>
 400e4a0:	040100b4 	movhi	r16,1026
 400e4a4:	8433ca04 	addi	r16,r16,-12504
 400e4a8:	003aa706 	br	400cf48 <__alt_data_end+0xfc00cf48>
 400e4ac:	d9002d17 	ldw	r4,180(sp)
 400e4b0:	d9801e04 	addi	r6,sp,120
 400e4b4:	b80b883a 	mov	r5,r23
 400e4b8:	40136780 	call	4013678 <__sprint_r>
 400e4bc:	103a0b1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400e4c0:	dc402617 	ldw	r17,152(sp)
 400e4c4:	d8c02017 	ldw	r3,128(sp)
 400e4c8:	da000404 	addi	r8,sp,16
 400e4cc:	003f9c06 	br	400e340 <__alt_data_end+0xfc00e340>
 400e4d0:	ac400043 	ldbu	r17,1(r21)
 400e4d4:	84000814 	ori	r16,r16,32
 400e4d8:	ad400044 	addi	r21,r21,1
 400e4dc:	8c403fcc 	andi	r17,r17,255
 400e4e0:	8c40201c 	xori	r17,r17,128
 400e4e4:	8c7fe004 	addi	r17,r17,-128
 400e4e8:	00395e06 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400e4ec:	d8c02e15 	stw	r3,184(sp)
 400e4f0:	0039883a 	mov	fp,zero
 400e4f4:	003e3506 	br	400ddcc <__alt_data_end+0xfc00ddcc>
 400e4f8:	d9002d17 	ldw	r4,180(sp)
 400e4fc:	d9801e04 	addi	r6,sp,120
 400e500:	b80b883a 	mov	r5,r23
 400e504:	40136780 	call	4013678 <__sprint_r>
 400e508:	1039f81e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400e50c:	d8c02017 	ldw	r3,128(sp)
 400e510:	da000404 	addi	r8,sp,16
 400e514:	003cd006 	br	400d858 <__alt_data_end+0xfc00d858>
 400e518:	8009883a 	mov	r4,r16
 400e51c:	df003d15 	stw	fp,244(sp)
 400e520:	400c83c0 	call	400c83c <strlen>
 400e524:	d8802b15 	stw	r2,172(sp)
 400e528:	da003d17 	ldw	r8,244(sp)
 400e52c:	103c200e 	bge	r2,zero,400d5b0 <__alt_data_end+0xfc00d5b0>
 400e530:	0005883a 	mov	r2,zero
 400e534:	003c1e06 	br	400d5b0 <__alt_data_end+0xfc00d5b0>
 400e538:	d9002d17 	ldw	r4,180(sp)
 400e53c:	d9801e04 	addi	r6,sp,120
 400e540:	b80b883a 	mov	r5,r23
 400e544:	40136780 	call	4013678 <__sprint_r>
 400e548:	1039e81e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400e54c:	d8c02017 	ldw	r3,128(sp)
 400e550:	d8801f17 	ldw	r2,124(sp)
 400e554:	da000404 	addi	r8,sp,16
 400e558:	d9403317 	ldw	r5,204(sp)
 400e55c:	10800044 	addi	r2,r2,1
 400e560:	44000015 	stw	r16,0(r8)
 400e564:	28c7883a 	add	r3,r5,r3
 400e568:	003b5b06 	br	400d2d8 <__alt_data_end+0xfc00d2d8>
 400e56c:	010100b4 	movhi	r4,1026
 400e570:	2133de84 	addi	r4,r4,-12422
 400e574:	d9003515 	stw	r4,212(sp)
 400e578:	003af206 	br	400d144 <__alt_data_end+0xfc00d144>
 400e57c:	013fffc4 	movi	r4,-1
 400e580:	003a0806 	br	400cda4 <__alt_data_end+0xfc00cda4>
 400e584:	0023883a 	mov	r17,zero
 400e588:	003d9d06 	br	400dc00 <__alt_data_end+0xfc00dc00>
 400e58c:	d9002d17 	ldw	r4,180(sp)
 400e590:	d9801e04 	addi	r6,sp,120
 400e594:	b80b883a 	mov	r5,r23
 400e598:	40136780 	call	4013678 <__sprint_r>
 400e59c:	1039d31e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400e5a0:	d8c02017 	ldw	r3,128(sp)
 400e5a4:	da000404 	addi	r8,sp,16
 400e5a8:	003d9406 	br	400dbfc <__alt_data_end+0xfc00dbfc>
 400e5ac:	010100b4 	movhi	r4,1026
 400e5b0:	2133da84 	addi	r4,r4,-12438
 400e5b4:	d9002c15 	stw	r4,176(sp)
 400e5b8:	d9002c17 	ldw	r4,176(sp)
 400e5bc:	1c47883a 	add	r3,r3,r17
 400e5c0:	10800044 	addi	r2,r2,1
 400e5c4:	41000015 	stw	r4,0(r8)
 400e5c8:	44400115 	stw	r17,4(r8)
 400e5cc:	d8c02015 	stw	r3,128(sp)
 400e5d0:	d8801f15 	stw	r2,124(sp)
 400e5d4:	010001c4 	movi	r4,7
 400e5d8:	20bfd716 	blt	r4,r2,400e538 <__alt_data_end+0xfc00e538>
 400e5dc:	42000204 	addi	r8,r8,8
 400e5e0:	003fdd06 	br	400e558 <__alt_data_end+0xfc00e558>
 400e5e4:	d9002d17 	ldw	r4,180(sp)
 400e5e8:	d9801e04 	addi	r6,sp,120
 400e5ec:	b80b883a 	mov	r5,r23
 400e5f0:	40136780 	call	4013678 <__sprint_r>
 400e5f4:	1039bd1e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400e5f8:	d8802617 	ldw	r2,152(sp)
 400e5fc:	d8c02017 	ldw	r3,128(sp)
 400e600:	da000404 	addi	r8,sp,16
 400e604:	003e1006 	br	400de48 <__alt_data_end+0xfc00de48>
 400e608:	00800044 	movi	r2,1
 400e60c:	10803fcc 	andi	r2,r2,255
 400e610:	00c00044 	movi	r3,1
 400e614:	10fa0d26 	beq	r2,r3,400ce4c <__alt_data_end+0xfc00ce4c>
 400e618:	00c00084 	movi	r3,2
 400e61c:	10fbaf26 	beq	r2,r3,400d4dc <__alt_data_end+0xfc00d4dc>
 400e620:	003a6d06 	br	400cfd8 <__alt_data_end+0xfc00cfd8>
 400e624:	010100b4 	movhi	r4,1026
 400e628:	2133de84 	addi	r4,r4,-12422
 400e62c:	d9003515 	stw	r4,212(sp)
 400e630:	003b5406 	br	400d384 <__alt_data_end+0xfc00d384>
 400e634:	d8802a17 	ldw	r2,168(sp)
 400e638:	00c00184 	movi	r3,6
 400e63c:	1880012e 	bgeu	r3,r2,400e644 <___vfprintf_internal_r+0x1d68>
 400e640:	1805883a 	mov	r2,r3
 400e644:	d8802b15 	stw	r2,172(sp)
 400e648:	1000ef16 	blt	r2,zero,400ea08 <___vfprintf_internal_r+0x212c>
 400e64c:	040100b4 	movhi	r16,1026
 400e650:	d8802915 	stw	r2,164(sp)
 400e654:	dcc02e15 	stw	r19,184(sp)
 400e658:	d8002a15 	stw	zero,168(sp)
 400e65c:	d8003215 	stw	zero,200(sp)
 400e660:	8433d804 	addi	r16,r16,-12448
 400e664:	0039883a 	mov	fp,zero
 400e668:	003a8006 	br	400d06c <__alt_data_end+0xfc00d06c>
 400e66c:	0021883a 	mov	r16,zero
 400e670:	003e0706 	br	400de90 <__alt_data_end+0xfc00de90>
 400e674:	d9002d17 	ldw	r4,180(sp)
 400e678:	d9801e04 	addi	r6,sp,120
 400e67c:	b80b883a 	mov	r5,r23
 400e680:	40136780 	call	4013678 <__sprint_r>
 400e684:	1039991e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400e688:	d8802617 	ldw	r2,152(sp)
 400e68c:	d9403317 	ldw	r5,204(sp)
 400e690:	d8c02017 	ldw	r3,128(sp)
 400e694:	da000404 	addi	r8,sp,16
 400e698:	2885c83a 	sub	r2,r5,r2
 400e69c:	003dfb06 	br	400de8c <__alt_data_end+0xfc00de8c>
 400e6a0:	9080004c 	andi	r2,r18,1
 400e6a4:	103e8f1e 	bne	r2,zero,400e0e4 <__alt_data_end+0xfc00e0e4>
 400e6a8:	d8802117 	ldw	r2,132(sp)
 400e6ac:	003e9e06 	br	400e128 <__alt_data_end+0xfc00e128>
 400e6b0:	1025883a 	mov	r18,r2
 400e6b4:	0039883a 	mov	fp,zero
 400e6b8:	00800084 	movi	r2,2
 400e6bc:	003fd306 	br	400e60c <__alt_data_end+0xfc00e60c>
 400e6c0:	07000b44 	movi	fp,45
 400e6c4:	df002785 	stb	fp,158(sp)
 400e6c8:	003a1b06 	br	400cf38 <__alt_data_end+0xfc00cf38>
 400e6cc:	00c00b44 	movi	r3,45
 400e6d0:	d8c02785 	stb	r3,158(sp)
 400e6d4:	d8802915 	stw	r2,164(sp)
 400e6d8:	dc802c17 	ldw	r18,176(sp)
 400e6dc:	d8002a15 	stw	zero,168(sp)
 400e6e0:	07000b44 	movi	fp,45
 400e6e4:	003a5e06 	br	400d060 <__alt_data_end+0xfc00d060>
 400e6e8:	040100b4 	movhi	r16,1026
 400e6ec:	8433cd04 	addi	r16,r16,-12492
 400e6f0:	003f4706 	br	400e410 <__alt_data_end+0xfc00e410>
 400e6f4:	d9002e17 	ldw	r4,184(sp)
 400e6f8:	d9402f17 	ldw	r5,188(sp)
 400e6fc:	20800017 	ldw	r2,0(r4)
 400e700:	21000104 	addi	r4,r4,4
 400e704:	d9002e15 	stw	r4,184(sp)
 400e708:	11400015 	stw	r5,0(r2)
 400e70c:	0038ab06 	br	400c9bc <__alt_data_end+0xfc00c9bc>
 400e710:	dd802617 	ldw	r22,152(sp)
 400e714:	00bfff44 	movi	r2,-3
 400e718:	b0801c16 	blt	r22,r2,400e78c <___vfprintf_internal_r+0x1eb0>
 400e71c:	d9402a17 	ldw	r5,168(sp)
 400e720:	2d801a16 	blt	r5,r22,400e78c <___vfprintf_internal_r+0x1eb0>
 400e724:	dd803215 	stw	r22,200(sp)
 400e728:	003e8906 	br	400e150 <__alt_data_end+0xfc00e150>
 400e72c:	010100b4 	movhi	r4,1026
 400e730:	2133da84 	addi	r4,r4,-12438
 400e734:	d9002c15 	stw	r4,176(sp)
 400e738:	003c9106 	br	400d980 <__alt_data_end+0xfc00d980>
 400e73c:	e005883a 	mov	r2,fp
 400e740:	003e7906 	br	400e128 <__alt_data_end+0xfc00e128>
 400e744:	d9002a17 	ldw	r4,168(sp)
 400e748:	df002783 	ldbu	fp,158(sp)
 400e74c:	dcc02e15 	stw	r19,184(sp)
 400e750:	d9002915 	stw	r4,164(sp)
 400e754:	d9002b15 	stw	r4,172(sp)
 400e758:	d8002a15 	stw	zero,168(sp)
 400e75c:	d8003215 	stw	zero,200(sp)
 400e760:	003a3b06 	br	400d050 <__alt_data_end+0xfc00d050>
 400e764:	9080004c 	andi	r2,r18,1
 400e768:	0039883a 	mov	fp,zero
 400e76c:	10000426 	beq	r2,zero,400e780 <___vfprintf_internal_r+0x1ea4>
 400e770:	00800c04 	movi	r2,48
 400e774:	dc001dc4 	addi	r16,sp,119
 400e778:	d8801dc5 	stb	r2,119(sp)
 400e77c:	003b6406 	br	400d510 <__alt_data_end+0xfc00d510>
 400e780:	d8002b15 	stw	zero,172(sp)
 400e784:	dc001e04 	addi	r16,sp,120
 400e788:	003a2b06 	br	400d038 <__alt_data_end+0xfc00d038>
 400e78c:	8c7fff84 	addi	r17,r17,-2
 400e790:	b5bfffc4 	addi	r22,r22,-1
 400e794:	dd802615 	stw	r22,152(sp)
 400e798:	dc4022c5 	stb	r17,139(sp)
 400e79c:	b000bf16 	blt	r22,zero,400ea9c <___vfprintf_internal_r+0x21c0>
 400e7a0:	00800ac4 	movi	r2,43
 400e7a4:	d8802305 	stb	r2,140(sp)
 400e7a8:	00800244 	movi	r2,9
 400e7ac:	15807016 	blt	r2,r22,400e970 <___vfprintf_internal_r+0x2094>
 400e7b0:	00800c04 	movi	r2,48
 400e7b4:	b5800c04 	addi	r22,r22,48
 400e7b8:	d8802345 	stb	r2,141(sp)
 400e7bc:	dd802385 	stb	r22,142(sp)
 400e7c0:	d88023c4 	addi	r2,sp,143
 400e7c4:	df0022c4 	addi	fp,sp,139
 400e7c8:	d8c03317 	ldw	r3,204(sp)
 400e7cc:	1739c83a 	sub	fp,r2,fp
 400e7d0:	d9003317 	ldw	r4,204(sp)
 400e7d4:	e0c7883a 	add	r3,fp,r3
 400e7d8:	df003a15 	stw	fp,232(sp)
 400e7dc:	d8c02b15 	stw	r3,172(sp)
 400e7e0:	00800044 	movi	r2,1
 400e7e4:	1100b30e 	bge	r2,r4,400eab4 <___vfprintf_internal_r+0x21d8>
 400e7e8:	d8c02b17 	ldw	r3,172(sp)
 400e7ec:	18c00044 	addi	r3,r3,1
 400e7f0:	d8c02b15 	stw	r3,172(sp)
 400e7f4:	1805883a 	mov	r2,r3
 400e7f8:	1800ac16 	blt	r3,zero,400eaac <___vfprintf_internal_r+0x21d0>
 400e7fc:	d8003215 	stw	zero,200(sp)
 400e800:	003e5d06 	br	400e178 <__alt_data_end+0xfc00e178>
 400e804:	d9002d17 	ldw	r4,180(sp)
 400e808:	d9801e04 	addi	r6,sp,120
 400e80c:	b80b883a 	mov	r5,r23
 400e810:	40136780 	call	4013678 <__sprint_r>
 400e814:	1039351e 	bne	r2,zero,400ccec <__alt_data_end+0xfc00ccec>
 400e818:	dc402617 	ldw	r17,152(sp)
 400e81c:	d8c02017 	ldw	r3,128(sp)
 400e820:	d8801f17 	ldw	r2,124(sp)
 400e824:	da000404 	addi	r8,sp,16
 400e828:	003ed606 	br	400e384 <__alt_data_end+0xfc00e384>
 400e82c:	182b883a 	mov	r21,r3
 400e830:	d8002a15 	stw	zero,168(sp)
 400e834:	00388c06 	br	400ca68 <__alt_data_end+0xfc00ca68>
 400e838:	d8802a17 	ldw	r2,168(sp)
 400e83c:	103e071e 	bne	r2,zero,400e05c <__alt_data_end+0xfc00e05c>
 400e840:	dc002a15 	stw	r16,168(sp)
 400e844:	003e0506 	br	400e05c <__alt_data_end+0xfc00e05c>
 400e848:	d9002a17 	ldw	r4,168(sp)
 400e84c:	20c00044 	addi	r3,r4,1
 400e850:	003e0f06 	br	400e090 <__alt_data_end+0xfc00e090>
 400e854:	01400184 	movi	r5,6
 400e858:	d9402a15 	stw	r5,168(sp)
 400e85c:	003dff06 	br	400e05c <__alt_data_end+0xfc00e05c>
 400e860:	d8802104 	addi	r2,sp,132
 400e864:	d8800315 	stw	r2,12(sp)
 400e868:	d8802504 	addi	r2,sp,148
 400e86c:	d8800215 	stw	r2,8(sp)
 400e870:	d8802604 	addi	r2,sp,152
 400e874:	d8800115 	stw	r2,4(sp)
 400e878:	d8802a17 	ldw	r2,168(sp)
 400e87c:	d9403617 	ldw	r5,216(sp)
 400e880:	d9002d17 	ldw	r4,180(sp)
 400e884:	d8800015 	stw	r2,0(sp)
 400e888:	01c000c4 	movi	r7,3
 400e88c:	980d883a 	mov	r6,r19
 400e890:	da003d15 	stw	r8,244(sp)
 400e894:	400f00c0 	call	400f00c <_dtoa_r>
 400e898:	d8c02a17 	ldw	r3,168(sp)
 400e89c:	da003d17 	ldw	r8,244(sp)
 400e8a0:	1021883a 	mov	r16,r2
 400e8a4:	10f9883a 	add	fp,r2,r3
 400e8a8:	81000007 	ldb	r4,0(r16)
 400e8ac:	00800c04 	movi	r2,48
 400e8b0:	20805e26 	beq	r4,r2,400ea2c <___vfprintf_internal_r+0x2150>
 400e8b4:	d8c02617 	ldw	r3,152(sp)
 400e8b8:	e0f9883a 	add	fp,fp,r3
 400e8bc:	003e0a06 	br	400e0e8 <__alt_data_end+0xfc00e0e8>
 400e8c0:	00c00b44 	movi	r3,45
 400e8c4:	24e0003c 	xorhi	r19,r4,32768
 400e8c8:	d8c02905 	stb	r3,164(sp)
 400e8cc:	003de906 	br	400e074 <__alt_data_end+0xfc00e074>
 400e8d0:	d8c03217 	ldw	r3,200(sp)
 400e8d4:	00c07a0e 	bge	zero,r3,400eac0 <___vfprintf_internal_r+0x21e4>
 400e8d8:	00800044 	movi	r2,1
 400e8dc:	d9003317 	ldw	r4,204(sp)
 400e8e0:	1105883a 	add	r2,r2,r4
 400e8e4:	d8802b15 	stw	r2,172(sp)
 400e8e8:	10004e16 	blt	r2,zero,400ea24 <___vfprintf_internal_r+0x2148>
 400e8ec:	044019c4 	movi	r17,103
 400e8f0:	003e2106 	br	400e178 <__alt_data_end+0xfc00e178>
 400e8f4:	d9002a17 	ldw	r4,168(sp)
 400e8f8:	d8802104 	addi	r2,sp,132
 400e8fc:	d8800315 	stw	r2,12(sp)
 400e900:	d9000015 	stw	r4,0(sp)
 400e904:	d8802504 	addi	r2,sp,148
 400e908:	d9403617 	ldw	r5,216(sp)
 400e90c:	d9002d17 	ldw	r4,180(sp)
 400e910:	d8800215 	stw	r2,8(sp)
 400e914:	d8802604 	addi	r2,sp,152
 400e918:	d8800115 	stw	r2,4(sp)
 400e91c:	01c000c4 	movi	r7,3
 400e920:	980d883a 	mov	r6,r19
 400e924:	da003d15 	stw	r8,244(sp)
 400e928:	400f00c0 	call	400f00c <_dtoa_r>
 400e92c:	d8c02a17 	ldw	r3,168(sp)
 400e930:	da003d17 	ldw	r8,244(sp)
 400e934:	1021883a 	mov	r16,r2
 400e938:	00801184 	movi	r2,70
 400e93c:	80f9883a 	add	fp,r16,r3
 400e940:	88bfd926 	beq	r17,r2,400e8a8 <__alt_data_end+0xfc00e8a8>
 400e944:	003de806 	br	400e0e8 <__alt_data_end+0xfc00e0e8>
 400e948:	d9002a17 	ldw	r4,168(sp)
 400e94c:	00c04d0e 	bge	zero,r3,400ea84 <___vfprintf_internal_r+0x21a8>
 400e950:	2000441e 	bne	r4,zero,400ea64 <___vfprintf_internal_r+0x2188>
 400e954:	9480004c 	andi	r18,r18,1
 400e958:	9000421e 	bne	r18,zero,400ea64 <___vfprintf_internal_r+0x2188>
 400e95c:	1805883a 	mov	r2,r3
 400e960:	18006f16 	blt	r3,zero,400eb20 <___vfprintf_internal_r+0x2244>
 400e964:	d8c03217 	ldw	r3,200(sp)
 400e968:	d8c02b15 	stw	r3,172(sp)
 400e96c:	003e0206 	br	400e178 <__alt_data_end+0xfc00e178>
 400e970:	df0022c4 	addi	fp,sp,139
 400e974:	dc002a15 	stw	r16,168(sp)
 400e978:	4027883a 	mov	r19,r8
 400e97c:	e021883a 	mov	r16,fp
 400e980:	b009883a 	mov	r4,r22
 400e984:	01400284 	movi	r5,10
 400e988:	400b0ac0 	call	400b0ac <__modsi3>
 400e98c:	10800c04 	addi	r2,r2,48
 400e990:	843fffc4 	addi	r16,r16,-1
 400e994:	b009883a 	mov	r4,r22
 400e998:	01400284 	movi	r5,10
 400e99c:	80800005 	stb	r2,0(r16)
 400e9a0:	400b0280 	call	400b028 <__divsi3>
 400e9a4:	102d883a 	mov	r22,r2
 400e9a8:	00800244 	movi	r2,9
 400e9ac:	15bff416 	blt	r2,r22,400e980 <__alt_data_end+0xfc00e980>
 400e9b0:	9811883a 	mov	r8,r19
 400e9b4:	b0800c04 	addi	r2,r22,48
 400e9b8:	8027883a 	mov	r19,r16
 400e9bc:	997fffc4 	addi	r5,r19,-1
 400e9c0:	98bfffc5 	stb	r2,-1(r19)
 400e9c4:	dc002a17 	ldw	r16,168(sp)
 400e9c8:	2f006d2e 	bgeu	r5,fp,400eb80 <___vfprintf_internal_r+0x22a4>
 400e9cc:	d9c02384 	addi	r7,sp,142
 400e9d0:	3ccfc83a 	sub	r7,r7,r19
 400e9d4:	d9002344 	addi	r4,sp,141
 400e9d8:	e1cf883a 	add	r7,fp,r7
 400e9dc:	00000106 	br	400e9e4 <___vfprintf_internal_r+0x2108>
 400e9e0:	28800003 	ldbu	r2,0(r5)
 400e9e4:	20800005 	stb	r2,0(r4)
 400e9e8:	21000044 	addi	r4,r4,1
 400e9ec:	29400044 	addi	r5,r5,1
 400e9f0:	393ffb1e 	bne	r7,r4,400e9e0 <__alt_data_end+0xfc00e9e0>
 400e9f4:	d8802304 	addi	r2,sp,140
 400e9f8:	14c5c83a 	sub	r2,r2,r19
 400e9fc:	d8c02344 	addi	r3,sp,141
 400ea00:	1885883a 	add	r2,r3,r2
 400ea04:	003f7006 	br	400e7c8 <__alt_data_end+0xfc00e7c8>
 400ea08:	0005883a 	mov	r2,zero
 400ea0c:	003f0f06 	br	400e64c <__alt_data_end+0xfc00e64c>
 400ea10:	d8c03217 	ldw	r3,200(sp)
 400ea14:	18c00044 	addi	r3,r3,1
 400ea18:	d8c02b15 	stw	r3,172(sp)
 400ea1c:	1805883a 	mov	r2,r3
 400ea20:	183fb20e 	bge	r3,zero,400e8ec <__alt_data_end+0xfc00e8ec>
 400ea24:	0005883a 	mov	r2,zero
 400ea28:	003fb006 	br	400e8ec <__alt_data_end+0xfc00e8ec>
 400ea2c:	d9003617 	ldw	r4,216(sp)
 400ea30:	000d883a 	mov	r6,zero
 400ea34:	000f883a 	mov	r7,zero
 400ea38:	980b883a 	mov	r5,r19
 400ea3c:	d8c03c15 	stw	r3,240(sp)
 400ea40:	da003d15 	stw	r8,244(sp)
 400ea44:	40173fc0 	call	40173fc <__eqdf2>
 400ea48:	d8c03c17 	ldw	r3,240(sp)
 400ea4c:	da003d17 	ldw	r8,244(sp)
 400ea50:	103f9826 	beq	r2,zero,400e8b4 <__alt_data_end+0xfc00e8b4>
 400ea54:	00800044 	movi	r2,1
 400ea58:	10c7c83a 	sub	r3,r2,r3
 400ea5c:	d8c02615 	stw	r3,152(sp)
 400ea60:	003f9506 	br	400e8b8 <__alt_data_end+0xfc00e8b8>
 400ea64:	d9002a17 	ldw	r4,168(sp)
 400ea68:	d8c03217 	ldw	r3,200(sp)
 400ea6c:	20800044 	addi	r2,r4,1
 400ea70:	1885883a 	add	r2,r3,r2
 400ea74:	d8802b15 	stw	r2,172(sp)
 400ea78:	103dbf0e 	bge	r2,zero,400e178 <__alt_data_end+0xfc00e178>
 400ea7c:	0005883a 	mov	r2,zero
 400ea80:	003dbd06 	br	400e178 <__alt_data_end+0xfc00e178>
 400ea84:	2000201e 	bne	r4,zero,400eb08 <___vfprintf_internal_r+0x222c>
 400ea88:	9480004c 	andi	r18,r18,1
 400ea8c:	90001e1e 	bne	r18,zero,400eb08 <___vfprintf_internal_r+0x222c>
 400ea90:	00800044 	movi	r2,1
 400ea94:	d8802b15 	stw	r2,172(sp)
 400ea98:	003db706 	br	400e178 <__alt_data_end+0xfc00e178>
 400ea9c:	00800b44 	movi	r2,45
 400eaa0:	05adc83a 	sub	r22,zero,r22
 400eaa4:	d8802305 	stb	r2,140(sp)
 400eaa8:	003f3f06 	br	400e7a8 <__alt_data_end+0xfc00e7a8>
 400eaac:	0005883a 	mov	r2,zero
 400eab0:	003f5206 	br	400e7fc <__alt_data_end+0xfc00e7fc>
 400eab4:	90a4703a 	and	r18,r18,r2
 400eab8:	903f4e26 	beq	r18,zero,400e7f4 <__alt_data_end+0xfc00e7f4>
 400eabc:	003f4a06 	br	400e7e8 <__alt_data_end+0xfc00e7e8>
 400eac0:	00800084 	movi	r2,2
 400eac4:	10c5c83a 	sub	r2,r2,r3
 400eac8:	003f8406 	br	400e8dc <__alt_data_end+0xfc00e8dc>
 400eacc:	d9402e17 	ldw	r5,184(sp)
 400ead0:	d9002e17 	ldw	r4,184(sp)
 400ead4:	ac400043 	ldbu	r17,1(r21)
 400ead8:	29400017 	ldw	r5,0(r5)
 400eadc:	20800104 	addi	r2,r4,4
 400eae0:	d8802e15 	stw	r2,184(sp)
 400eae4:	d9402a15 	stw	r5,168(sp)
 400eae8:	182b883a 	mov	r21,r3
 400eaec:	283e7b0e 	bge	r5,zero,400e4dc <__alt_data_end+0xfc00e4dc>
 400eaf0:	8c403fcc 	andi	r17,r17,255
 400eaf4:	017fffc4 	movi	r5,-1
 400eaf8:	8c40201c 	xori	r17,r17,128
 400eafc:	d9402a15 	stw	r5,168(sp)
 400eb00:	8c7fe004 	addi	r17,r17,-128
 400eb04:	0037d706 	br	400ca64 <__alt_data_end+0xfc00ca64>
 400eb08:	d8c02a17 	ldw	r3,168(sp)
 400eb0c:	18c00084 	addi	r3,r3,2
 400eb10:	d8c02b15 	stw	r3,172(sp)
 400eb14:	1805883a 	mov	r2,r3
 400eb18:	183d970e 	bge	r3,zero,400e178 <__alt_data_end+0xfc00e178>
 400eb1c:	003fd706 	br	400ea7c <__alt_data_end+0xfc00ea7c>
 400eb20:	0005883a 	mov	r2,zero
 400eb24:	003f8f06 	br	400e964 <__alt_data_end+0xfc00e964>
 400eb28:	9080004c 	andi	r2,r18,1
 400eb2c:	103f821e 	bne	r2,zero,400e938 <__alt_data_end+0xfc00e938>
 400eb30:	d8802117 	ldw	r2,132(sp)
 400eb34:	1405c83a 	sub	r2,r2,r16
 400eb38:	d8803315 	stw	r2,204(sp)
 400eb3c:	b47ef426 	beq	r22,r17,400e710 <__alt_data_end+0xfc00e710>
 400eb40:	dd802617 	ldw	r22,152(sp)
 400eb44:	003f1206 	br	400e790 <__alt_data_end+0xfc00e790>
 400eb48:	d8c02b03 	ldbu	r3,172(sp)
 400eb4c:	d8c02785 	stb	r3,158(sp)
 400eb50:	0038df06 	br	400ced0 <__alt_data_end+0xfc00ced0>
 400eb54:	d8c02b03 	ldbu	r3,172(sp)
 400eb58:	d8c02785 	stb	r3,158(sp)
 400eb5c:	0038aa06 	br	400ce08 <__alt_data_end+0xfc00ce08>
 400eb60:	d8c02b03 	ldbu	r3,172(sp)
 400eb64:	d8c02785 	stb	r3,158(sp)
 400eb68:	003a4306 	br	400d478 <__alt_data_end+0xfc00d478>
 400eb6c:	d8c02b03 	ldbu	r3,172(sp)
 400eb70:	d8c02785 	stb	r3,158(sp)
 400eb74:	003af506 	br	400d74c <__alt_data_end+0xfc00d74c>
 400eb78:	0005883a 	mov	r2,zero
 400eb7c:	003d7b06 	br	400e16c <__alt_data_end+0xfc00e16c>
 400eb80:	d8802344 	addi	r2,sp,141
 400eb84:	003f1006 	br	400e7c8 <__alt_data_end+0xfc00e7c8>
 400eb88:	d8c02b03 	ldbu	r3,172(sp)
 400eb8c:	d8c02785 	stb	r3,158(sp)
 400eb90:	0038fd06 	br	400cf88 <__alt_data_end+0xfc00cf88>
 400eb94:	d8c02b03 	ldbu	r3,172(sp)
 400eb98:	d8c02785 	stb	r3,158(sp)
 400eb9c:	003a9706 	br	400d5fc <__alt_data_end+0xfc00d5fc>
 400eba0:	d8c02b03 	ldbu	r3,172(sp)
 400eba4:	d8c02785 	stb	r3,158(sp)
 400eba8:	003a1806 	br	400d40c <__alt_data_end+0xfc00d40c>
 400ebac:	d8c02b03 	ldbu	r3,172(sp)
 400ebb0:	d8c02785 	stb	r3,158(sp)
 400ebb4:	003abe06 	br	400d6b0 <__alt_data_end+0xfc00d6b0>

0400ebb8 <__vfprintf_internal>:
 400ebb8:	008100f4 	movhi	r2,1027
 400ebbc:	10a71904 	addi	r2,r2,-25500
 400ebc0:	300f883a 	mov	r7,r6
 400ebc4:	280d883a 	mov	r6,r5
 400ebc8:	200b883a 	mov	r5,r4
 400ebcc:	11000017 	ldw	r4,0(r2)
 400ebd0:	400c8dc1 	jmpi	400c8dc <___vfprintf_internal_r>

0400ebd4 <__sbprintf>:
 400ebd4:	2880030b 	ldhu	r2,12(r5)
 400ebd8:	2ac01917 	ldw	r11,100(r5)
 400ebdc:	2a80038b 	ldhu	r10,14(r5)
 400ebe0:	2a400717 	ldw	r9,28(r5)
 400ebe4:	2a000917 	ldw	r8,36(r5)
 400ebe8:	defee204 	addi	sp,sp,-1144
 400ebec:	00c10004 	movi	r3,1024
 400ebf0:	dc011a15 	stw	r16,1128(sp)
 400ebf4:	10bfff4c 	andi	r2,r2,65533
 400ebf8:	2821883a 	mov	r16,r5
 400ebfc:	d8cb883a 	add	r5,sp,r3
 400ec00:	dc811c15 	stw	r18,1136(sp)
 400ec04:	dc411b15 	stw	r17,1132(sp)
 400ec08:	dfc11d15 	stw	ra,1140(sp)
 400ec0c:	2025883a 	mov	r18,r4
 400ec10:	d881030d 	sth	r2,1036(sp)
 400ec14:	dac11915 	stw	r11,1124(sp)
 400ec18:	da81038d 	sth	r10,1038(sp)
 400ec1c:	da410715 	stw	r9,1052(sp)
 400ec20:	da010915 	stw	r8,1060(sp)
 400ec24:	dec10015 	stw	sp,1024(sp)
 400ec28:	dec10415 	stw	sp,1040(sp)
 400ec2c:	d8c10215 	stw	r3,1032(sp)
 400ec30:	d8c10515 	stw	r3,1044(sp)
 400ec34:	d8010615 	stw	zero,1048(sp)
 400ec38:	400c8dc0 	call	400c8dc <___vfprintf_internal_r>
 400ec3c:	1023883a 	mov	r17,r2
 400ec40:	10000416 	blt	r2,zero,400ec54 <__sbprintf+0x80>
 400ec44:	d9410004 	addi	r5,sp,1024
 400ec48:	9009883a 	mov	r4,r18
 400ec4c:	40108b00 	call	40108b0 <_fflush_r>
 400ec50:	10000d1e 	bne	r2,zero,400ec88 <__sbprintf+0xb4>
 400ec54:	d881030b 	ldhu	r2,1036(sp)
 400ec58:	1080100c 	andi	r2,r2,64
 400ec5c:	10000326 	beq	r2,zero,400ec6c <__sbprintf+0x98>
 400ec60:	8080030b 	ldhu	r2,12(r16)
 400ec64:	10801014 	ori	r2,r2,64
 400ec68:	8080030d 	sth	r2,12(r16)
 400ec6c:	8805883a 	mov	r2,r17
 400ec70:	dfc11d17 	ldw	ra,1140(sp)
 400ec74:	dc811c17 	ldw	r18,1136(sp)
 400ec78:	dc411b17 	ldw	r17,1132(sp)
 400ec7c:	dc011a17 	ldw	r16,1128(sp)
 400ec80:	dec11e04 	addi	sp,sp,1144
 400ec84:	f800283a 	ret
 400ec88:	047fffc4 	movi	r17,-1
 400ec8c:	003ff106 	br	400ec54 <__alt_data_end+0xfc00ec54>

0400ec90 <__swsetup_r>:
 400ec90:	008100f4 	movhi	r2,1027
 400ec94:	defffd04 	addi	sp,sp,-12
 400ec98:	10a71904 	addi	r2,r2,-25500
 400ec9c:	dc400115 	stw	r17,4(sp)
 400eca0:	2023883a 	mov	r17,r4
 400eca4:	11000017 	ldw	r4,0(r2)
 400eca8:	dc000015 	stw	r16,0(sp)
 400ecac:	dfc00215 	stw	ra,8(sp)
 400ecb0:	2821883a 	mov	r16,r5
 400ecb4:	20000226 	beq	r4,zero,400ecc0 <__swsetup_r+0x30>
 400ecb8:	20800e17 	ldw	r2,56(r4)
 400ecbc:	10003126 	beq	r2,zero,400ed84 <__swsetup_r+0xf4>
 400ecc0:	8080030b 	ldhu	r2,12(r16)
 400ecc4:	10c0020c 	andi	r3,r2,8
 400ecc8:	1009883a 	mov	r4,r2
 400eccc:	18000f26 	beq	r3,zero,400ed0c <__swsetup_r+0x7c>
 400ecd0:	80c00417 	ldw	r3,16(r16)
 400ecd4:	18001526 	beq	r3,zero,400ed2c <__swsetup_r+0x9c>
 400ecd8:	1100004c 	andi	r4,r2,1
 400ecdc:	20001c1e 	bne	r4,zero,400ed50 <__swsetup_r+0xc0>
 400ece0:	1080008c 	andi	r2,r2,2
 400ece4:	1000291e 	bne	r2,zero,400ed8c <__swsetup_r+0xfc>
 400ece8:	80800517 	ldw	r2,20(r16)
 400ecec:	80800215 	stw	r2,8(r16)
 400ecf0:	18001c26 	beq	r3,zero,400ed64 <__swsetup_r+0xd4>
 400ecf4:	0005883a 	mov	r2,zero
 400ecf8:	dfc00217 	ldw	ra,8(sp)
 400ecfc:	dc400117 	ldw	r17,4(sp)
 400ed00:	dc000017 	ldw	r16,0(sp)
 400ed04:	dec00304 	addi	sp,sp,12
 400ed08:	f800283a 	ret
 400ed0c:	2080040c 	andi	r2,r4,16
 400ed10:	10002e26 	beq	r2,zero,400edcc <__swsetup_r+0x13c>
 400ed14:	2080010c 	andi	r2,r4,4
 400ed18:	10001e1e 	bne	r2,zero,400ed94 <__swsetup_r+0x104>
 400ed1c:	80c00417 	ldw	r3,16(r16)
 400ed20:	20800214 	ori	r2,r4,8
 400ed24:	8080030d 	sth	r2,12(r16)
 400ed28:	183feb1e 	bne	r3,zero,400ecd8 <__alt_data_end+0xfc00ecd8>
 400ed2c:	1100a00c 	andi	r4,r2,640
 400ed30:	01408004 	movi	r5,512
 400ed34:	217fe826 	beq	r4,r5,400ecd8 <__alt_data_end+0xfc00ecd8>
 400ed38:	800b883a 	mov	r5,r16
 400ed3c:	8809883a 	mov	r4,r17
 400ed40:	401184c0 	call	401184c <__smakebuf_r>
 400ed44:	8080030b 	ldhu	r2,12(r16)
 400ed48:	80c00417 	ldw	r3,16(r16)
 400ed4c:	003fe206 	br	400ecd8 <__alt_data_end+0xfc00ecd8>
 400ed50:	80800517 	ldw	r2,20(r16)
 400ed54:	80000215 	stw	zero,8(r16)
 400ed58:	0085c83a 	sub	r2,zero,r2
 400ed5c:	80800615 	stw	r2,24(r16)
 400ed60:	183fe41e 	bne	r3,zero,400ecf4 <__alt_data_end+0xfc00ecf4>
 400ed64:	80c0030b 	ldhu	r3,12(r16)
 400ed68:	0005883a 	mov	r2,zero
 400ed6c:	1900200c 	andi	r4,r3,128
 400ed70:	203fe126 	beq	r4,zero,400ecf8 <__alt_data_end+0xfc00ecf8>
 400ed74:	18c01014 	ori	r3,r3,64
 400ed78:	80c0030d 	sth	r3,12(r16)
 400ed7c:	00bfffc4 	movi	r2,-1
 400ed80:	003fdd06 	br	400ecf8 <__alt_data_end+0xfc00ecf8>
 400ed84:	4010c9c0 	call	4010c9c <__sinit>
 400ed88:	003fcd06 	br	400ecc0 <__alt_data_end+0xfc00ecc0>
 400ed8c:	0005883a 	mov	r2,zero
 400ed90:	003fd606 	br	400ecec <__alt_data_end+0xfc00ecec>
 400ed94:	81400c17 	ldw	r5,48(r16)
 400ed98:	28000626 	beq	r5,zero,400edb4 <__swsetup_r+0x124>
 400ed9c:	80801004 	addi	r2,r16,64
 400eda0:	28800326 	beq	r5,r2,400edb0 <__swsetup_r+0x120>
 400eda4:	8809883a 	mov	r4,r17
 400eda8:	4010e100 	call	4010e10 <_free_r>
 400edac:	8100030b 	ldhu	r4,12(r16)
 400edb0:	80000c15 	stw	zero,48(r16)
 400edb4:	80c00417 	ldw	r3,16(r16)
 400edb8:	00bff6c4 	movi	r2,-37
 400edbc:	1108703a 	and	r4,r2,r4
 400edc0:	80000115 	stw	zero,4(r16)
 400edc4:	80c00015 	stw	r3,0(r16)
 400edc8:	003fd506 	br	400ed20 <__alt_data_end+0xfc00ed20>
 400edcc:	00800244 	movi	r2,9
 400edd0:	88800015 	stw	r2,0(r17)
 400edd4:	20801014 	ori	r2,r4,64
 400edd8:	8080030d 	sth	r2,12(r16)
 400eddc:	00bfffc4 	movi	r2,-1
 400ede0:	003fc506 	br	400ecf8 <__alt_data_end+0xfc00ecf8>

0400ede4 <quorem>:
 400ede4:	defff204 	addi	sp,sp,-56
 400ede8:	ddc00b15 	stw	r23,44(sp)
 400edec:	20800417 	ldw	r2,16(r4)
 400edf0:	2dc00417 	ldw	r23,16(r5)
 400edf4:	dfc00d15 	stw	ra,52(sp)
 400edf8:	df000c15 	stw	fp,48(sp)
 400edfc:	dd800a15 	stw	r22,40(sp)
 400ee00:	dd400915 	stw	r21,36(sp)
 400ee04:	dd000815 	stw	r20,32(sp)
 400ee08:	dcc00715 	stw	r19,28(sp)
 400ee0c:	dc800615 	stw	r18,24(sp)
 400ee10:	dc400515 	stw	r17,20(sp)
 400ee14:	dc000415 	stw	r16,16(sp)
 400ee18:	15c07a16 	blt	r2,r23,400f004 <quorem+0x220>
 400ee1c:	bdffffc4 	addi	r23,r23,-1
 400ee20:	bde9883a 	add	r20,r23,r23
 400ee24:	28c00504 	addi	r3,r5,20
 400ee28:	a529883a 	add	r20,r20,r20
 400ee2c:	1d39883a 	add	fp,r3,r20
 400ee30:	24c00504 	addi	r19,r4,20
 400ee34:	d9400215 	stw	r5,8(sp)
 400ee38:	9d29883a 	add	r20,r19,r20
 400ee3c:	e1400017 	ldw	r5,0(fp)
 400ee40:	d9000015 	stw	r4,0(sp)
 400ee44:	a1000017 	ldw	r4,0(r20)
 400ee48:	29400044 	addi	r5,r5,1
 400ee4c:	d8c00115 	stw	r3,4(sp)
 400ee50:	dd000315 	stw	r20,12(sp)
 400ee54:	400b1200 	call	400b120 <__udivsi3>
 400ee58:	1025883a 	mov	r18,r2
 400ee5c:	10003026 	beq	r2,zero,400ef20 <quorem+0x13c>
 400ee60:	dc400117 	ldw	r17,4(sp)
 400ee64:	9829883a 	mov	r20,r19
 400ee68:	002d883a 	mov	r22,zero
 400ee6c:	0021883a 	mov	r16,zero
 400ee70:	8d400017 	ldw	r21,0(r17)
 400ee74:	900b883a 	mov	r5,r18
 400ee78:	8c400104 	addi	r17,r17,4
 400ee7c:	a93fffcc 	andi	r4,r21,65535
 400ee80:	400b1dc0 	call	400b1dc <__mulsi3>
 400ee84:	a808d43a 	srli	r4,r21,16
 400ee88:	900b883a 	mov	r5,r18
 400ee8c:	15ad883a 	add	r22,r2,r22
 400ee90:	400b1dc0 	call	400b1dc <__mulsi3>
 400ee94:	a1000017 	ldw	r4,0(r20)
 400ee98:	b00cd43a 	srli	r6,r22,16
 400ee9c:	b0ffffcc 	andi	r3,r22,65535
 400eea0:	217fffcc 	andi	r5,r4,65535
 400eea4:	2c21883a 	add	r16,r5,r16
 400eea8:	80c7c83a 	sub	r3,r16,r3
 400eeac:	2008d43a 	srli	r4,r4,16
 400eeb0:	1185883a 	add	r2,r2,r6
 400eeb4:	1821d43a 	srai	r16,r3,16
 400eeb8:	117fffcc 	andi	r5,r2,65535
 400eebc:	2149c83a 	sub	r4,r4,r5
 400eec0:	2421883a 	add	r16,r4,r16
 400eec4:	8008943a 	slli	r4,r16,16
 400eec8:	18ffffcc 	andi	r3,r3,65535
 400eecc:	102cd43a 	srli	r22,r2,16
 400eed0:	20c8b03a 	or	r4,r4,r3
 400eed4:	a1000015 	stw	r4,0(r20)
 400eed8:	8021d43a 	srai	r16,r16,16
 400eedc:	a5000104 	addi	r20,r20,4
 400eee0:	e47fe32e 	bgeu	fp,r17,400ee70 <__alt_data_end+0xfc00ee70>
 400eee4:	d8c00317 	ldw	r3,12(sp)
 400eee8:	18800017 	ldw	r2,0(r3)
 400eeec:	10000c1e 	bne	r2,zero,400ef20 <quorem+0x13c>
 400eef0:	18bfff04 	addi	r2,r3,-4
 400eef4:	9880082e 	bgeu	r19,r2,400ef18 <quorem+0x134>
 400eef8:	18ffff17 	ldw	r3,-4(r3)
 400eefc:	18000326 	beq	r3,zero,400ef0c <quorem+0x128>
 400ef00:	00000506 	br	400ef18 <quorem+0x134>
 400ef04:	10c00017 	ldw	r3,0(r2)
 400ef08:	1800031e 	bne	r3,zero,400ef18 <quorem+0x134>
 400ef0c:	10bfff04 	addi	r2,r2,-4
 400ef10:	bdffffc4 	addi	r23,r23,-1
 400ef14:	98bffb36 	bltu	r19,r2,400ef04 <__alt_data_end+0xfc00ef04>
 400ef18:	d8c00017 	ldw	r3,0(sp)
 400ef1c:	1dc00415 	stw	r23,16(r3)
 400ef20:	d9400217 	ldw	r5,8(sp)
 400ef24:	d9000017 	ldw	r4,0(sp)
 400ef28:	40125cc0 	call	40125cc <__mcmp>
 400ef2c:	10002816 	blt	r2,zero,400efd0 <quorem+0x1ec>
 400ef30:	dc400117 	ldw	r17,4(sp)
 400ef34:	94800044 	addi	r18,r18,1
 400ef38:	980d883a 	mov	r6,r19
 400ef3c:	0007883a 	mov	r3,zero
 400ef40:	31000017 	ldw	r4,0(r6)
 400ef44:	89400017 	ldw	r5,0(r17)
 400ef48:	31800104 	addi	r6,r6,4
 400ef4c:	20bfffcc 	andi	r2,r4,65535
 400ef50:	10c7883a 	add	r3,r2,r3
 400ef54:	28bfffcc 	andi	r2,r5,65535
 400ef58:	1885c83a 	sub	r2,r3,r2
 400ef5c:	280ad43a 	srli	r5,r5,16
 400ef60:	2008d43a 	srli	r4,r4,16
 400ef64:	1007d43a 	srai	r3,r2,16
 400ef68:	10bfffcc 	andi	r2,r2,65535
 400ef6c:	2149c83a 	sub	r4,r4,r5
 400ef70:	20c9883a 	add	r4,r4,r3
 400ef74:	200a943a 	slli	r5,r4,16
 400ef78:	8c400104 	addi	r17,r17,4
 400ef7c:	2007d43a 	srai	r3,r4,16
 400ef80:	2884b03a 	or	r2,r5,r2
 400ef84:	30bfff15 	stw	r2,-4(r6)
 400ef88:	e47fed2e 	bgeu	fp,r17,400ef40 <__alt_data_end+0xfc00ef40>
 400ef8c:	bdc5883a 	add	r2,r23,r23
 400ef90:	1085883a 	add	r2,r2,r2
 400ef94:	9887883a 	add	r3,r19,r2
 400ef98:	18800017 	ldw	r2,0(r3)
 400ef9c:	10000c1e 	bne	r2,zero,400efd0 <quorem+0x1ec>
 400efa0:	18bfff04 	addi	r2,r3,-4
 400efa4:	9880082e 	bgeu	r19,r2,400efc8 <quorem+0x1e4>
 400efa8:	18ffff17 	ldw	r3,-4(r3)
 400efac:	18000326 	beq	r3,zero,400efbc <quorem+0x1d8>
 400efb0:	00000506 	br	400efc8 <quorem+0x1e4>
 400efb4:	10c00017 	ldw	r3,0(r2)
 400efb8:	1800031e 	bne	r3,zero,400efc8 <quorem+0x1e4>
 400efbc:	10bfff04 	addi	r2,r2,-4
 400efc0:	bdffffc4 	addi	r23,r23,-1
 400efc4:	98bffb36 	bltu	r19,r2,400efb4 <__alt_data_end+0xfc00efb4>
 400efc8:	d8c00017 	ldw	r3,0(sp)
 400efcc:	1dc00415 	stw	r23,16(r3)
 400efd0:	9005883a 	mov	r2,r18
 400efd4:	dfc00d17 	ldw	ra,52(sp)
 400efd8:	df000c17 	ldw	fp,48(sp)
 400efdc:	ddc00b17 	ldw	r23,44(sp)
 400efe0:	dd800a17 	ldw	r22,40(sp)
 400efe4:	dd400917 	ldw	r21,36(sp)
 400efe8:	dd000817 	ldw	r20,32(sp)
 400efec:	dcc00717 	ldw	r19,28(sp)
 400eff0:	dc800617 	ldw	r18,24(sp)
 400eff4:	dc400517 	ldw	r17,20(sp)
 400eff8:	dc000417 	ldw	r16,16(sp)
 400effc:	dec00e04 	addi	sp,sp,56
 400f000:	f800283a 	ret
 400f004:	0005883a 	mov	r2,zero
 400f008:	003ff206 	br	400efd4 <__alt_data_end+0xfc00efd4>

0400f00c <_dtoa_r>:
 400f00c:	20801017 	ldw	r2,64(r4)
 400f010:	deffde04 	addi	sp,sp,-136
 400f014:	df002015 	stw	fp,128(sp)
 400f018:	dcc01b15 	stw	r19,108(sp)
 400f01c:	dc801a15 	stw	r18,104(sp)
 400f020:	dc401915 	stw	r17,100(sp)
 400f024:	dc001815 	stw	r16,96(sp)
 400f028:	dfc02115 	stw	ra,132(sp)
 400f02c:	ddc01f15 	stw	r23,124(sp)
 400f030:	dd801e15 	stw	r22,120(sp)
 400f034:	dd401d15 	stw	r21,116(sp)
 400f038:	dd001c15 	stw	r20,112(sp)
 400f03c:	d9c00315 	stw	r7,12(sp)
 400f040:	2039883a 	mov	fp,r4
 400f044:	3023883a 	mov	r17,r6
 400f048:	2825883a 	mov	r18,r5
 400f04c:	dc002417 	ldw	r16,144(sp)
 400f050:	3027883a 	mov	r19,r6
 400f054:	10000826 	beq	r2,zero,400f078 <_dtoa_r+0x6c>
 400f058:	21801117 	ldw	r6,68(r4)
 400f05c:	00c00044 	movi	r3,1
 400f060:	100b883a 	mov	r5,r2
 400f064:	1986983a 	sll	r3,r3,r6
 400f068:	11800115 	stw	r6,4(r2)
 400f06c:	10c00215 	stw	r3,8(r2)
 400f070:	4011cf00 	call	4011cf0 <_Bfree>
 400f074:	e0001015 	stw	zero,64(fp)
 400f078:	88002e16 	blt	r17,zero,400f134 <_dtoa_r+0x128>
 400f07c:	80000015 	stw	zero,0(r16)
 400f080:	889ffc2c 	andhi	r2,r17,32752
 400f084:	00dffc34 	movhi	r3,32752
 400f088:	10c01c26 	beq	r2,r3,400f0fc <_dtoa_r+0xf0>
 400f08c:	000d883a 	mov	r6,zero
 400f090:	000f883a 	mov	r7,zero
 400f094:	9009883a 	mov	r4,r18
 400f098:	980b883a 	mov	r5,r19
 400f09c:	40173fc0 	call	40173fc <__eqdf2>
 400f0a0:	10002b1e 	bne	r2,zero,400f150 <_dtoa_r+0x144>
 400f0a4:	d9c02317 	ldw	r7,140(sp)
 400f0a8:	00800044 	movi	r2,1
 400f0ac:	38800015 	stw	r2,0(r7)
 400f0b0:	d8802517 	ldw	r2,148(sp)
 400f0b4:	10019e26 	beq	r2,zero,400f730 <_dtoa_r+0x724>
 400f0b8:	d8c02517 	ldw	r3,148(sp)
 400f0bc:	008100b4 	movhi	r2,1026
 400f0c0:	10b3da44 	addi	r2,r2,-12439
 400f0c4:	18800015 	stw	r2,0(r3)
 400f0c8:	10bfffc4 	addi	r2,r2,-1
 400f0cc:	dfc02117 	ldw	ra,132(sp)
 400f0d0:	df002017 	ldw	fp,128(sp)
 400f0d4:	ddc01f17 	ldw	r23,124(sp)
 400f0d8:	dd801e17 	ldw	r22,120(sp)
 400f0dc:	dd401d17 	ldw	r21,116(sp)
 400f0e0:	dd001c17 	ldw	r20,112(sp)
 400f0e4:	dcc01b17 	ldw	r19,108(sp)
 400f0e8:	dc801a17 	ldw	r18,104(sp)
 400f0ec:	dc401917 	ldw	r17,100(sp)
 400f0f0:	dc001817 	ldw	r16,96(sp)
 400f0f4:	dec02204 	addi	sp,sp,136
 400f0f8:	f800283a 	ret
 400f0fc:	d8c02317 	ldw	r3,140(sp)
 400f100:	0089c3c4 	movi	r2,9999
 400f104:	18800015 	stw	r2,0(r3)
 400f108:	90017726 	beq	r18,zero,400f6e8 <_dtoa_r+0x6dc>
 400f10c:	008100b4 	movhi	r2,1026
 400f110:	10b3e604 	addi	r2,r2,-12392
 400f114:	d9002517 	ldw	r4,148(sp)
 400f118:	203fec26 	beq	r4,zero,400f0cc <__alt_data_end+0xfc00f0cc>
 400f11c:	10c000c7 	ldb	r3,3(r2)
 400f120:	1801781e 	bne	r3,zero,400f704 <_dtoa_r+0x6f8>
 400f124:	10c000c4 	addi	r3,r2,3
 400f128:	d9802517 	ldw	r6,148(sp)
 400f12c:	30c00015 	stw	r3,0(r6)
 400f130:	003fe606 	br	400f0cc <__alt_data_end+0xfc00f0cc>
 400f134:	04e00034 	movhi	r19,32768
 400f138:	9cffffc4 	addi	r19,r19,-1
 400f13c:	00800044 	movi	r2,1
 400f140:	8ce6703a 	and	r19,r17,r19
 400f144:	80800015 	stw	r2,0(r16)
 400f148:	9823883a 	mov	r17,r19
 400f14c:	003fcc06 	br	400f080 <__alt_data_end+0xfc00f080>
 400f150:	d8800204 	addi	r2,sp,8
 400f154:	d8800015 	stw	r2,0(sp)
 400f158:	d9c00104 	addi	r7,sp,4
 400f15c:	900b883a 	mov	r5,r18
 400f160:	980d883a 	mov	r6,r19
 400f164:	e009883a 	mov	r4,fp
 400f168:	8820d53a 	srli	r16,r17,20
 400f16c:	40129980 	call	4012998 <__d2b>
 400f170:	d8800915 	stw	r2,36(sp)
 400f174:	8001651e 	bne	r16,zero,400f70c <_dtoa_r+0x700>
 400f178:	dd800217 	ldw	r22,8(sp)
 400f17c:	dc000117 	ldw	r16,4(sp)
 400f180:	00800804 	movi	r2,32
 400f184:	b421883a 	add	r16,r22,r16
 400f188:	80c10c84 	addi	r3,r16,1074
 400f18c:	10c2d10e 	bge	r2,r3,400fcd4 <_dtoa_r+0xcc8>
 400f190:	00801004 	movi	r2,64
 400f194:	81010484 	addi	r4,r16,1042
 400f198:	10c7c83a 	sub	r3,r2,r3
 400f19c:	9108d83a 	srl	r4,r18,r4
 400f1a0:	88e2983a 	sll	r17,r17,r3
 400f1a4:	2448b03a 	or	r4,r4,r17
 400f1a8:	40189180 	call	4018918 <__floatunsidf>
 400f1ac:	017f8434 	movhi	r5,65040
 400f1b0:	01800044 	movi	r6,1
 400f1b4:	1009883a 	mov	r4,r2
 400f1b8:	194b883a 	add	r5,r3,r5
 400f1bc:	843fffc4 	addi	r16,r16,-1
 400f1c0:	d9801115 	stw	r6,68(sp)
 400f1c4:	000d883a 	mov	r6,zero
 400f1c8:	01cffe34 	movhi	r7,16376
 400f1cc:	4017ec00 	call	4017ec0 <__subdf3>
 400f1d0:	0198dbf4 	movhi	r6,25455
 400f1d4:	01cff4f4 	movhi	r7,16339
 400f1d8:	3190d844 	addi	r6,r6,17249
 400f1dc:	39e1e9c4 	addi	r7,r7,-30809
 400f1e0:	1009883a 	mov	r4,r2
 400f1e4:	180b883a 	mov	r5,r3
 400f1e8:	40176540 	call	4017654 <__muldf3>
 400f1ec:	01a2d874 	movhi	r6,35681
 400f1f0:	01cff1f4 	movhi	r7,16327
 400f1f4:	31b22cc4 	addi	r6,r6,-14157
 400f1f8:	39e28a04 	addi	r7,r7,-30168
 400f1fc:	180b883a 	mov	r5,r3
 400f200:	1009883a 	mov	r4,r2
 400f204:	40161800 	call	4016180 <__adddf3>
 400f208:	8009883a 	mov	r4,r16
 400f20c:	1029883a 	mov	r20,r2
 400f210:	1823883a 	mov	r17,r3
 400f214:	401883c0 	call	401883c <__floatsidf>
 400f218:	019427f4 	movhi	r6,20639
 400f21c:	01cff4f4 	movhi	r7,16339
 400f220:	319e7ec4 	addi	r6,r6,31227
 400f224:	39d104c4 	addi	r7,r7,17427
 400f228:	1009883a 	mov	r4,r2
 400f22c:	180b883a 	mov	r5,r3
 400f230:	40176540 	call	4017654 <__muldf3>
 400f234:	100d883a 	mov	r6,r2
 400f238:	180f883a 	mov	r7,r3
 400f23c:	a009883a 	mov	r4,r20
 400f240:	880b883a 	mov	r5,r17
 400f244:	40161800 	call	4016180 <__adddf3>
 400f248:	1009883a 	mov	r4,r2
 400f24c:	180b883a 	mov	r5,r3
 400f250:	1029883a 	mov	r20,r2
 400f254:	1823883a 	mov	r17,r3
 400f258:	40187bc0 	call	40187bc <__fixdfsi>
 400f25c:	000d883a 	mov	r6,zero
 400f260:	000f883a 	mov	r7,zero
 400f264:	a009883a 	mov	r4,r20
 400f268:	880b883a 	mov	r5,r17
 400f26c:	d8800515 	stw	r2,20(sp)
 400f270:	40175600 	call	4017560 <__ledf2>
 400f274:	10028716 	blt	r2,zero,400fc94 <_dtoa_r+0xc88>
 400f278:	d8c00517 	ldw	r3,20(sp)
 400f27c:	00800584 	movi	r2,22
 400f280:	10c27536 	bltu	r2,r3,400fc58 <_dtoa_r+0xc4c>
 400f284:	180490fa 	slli	r2,r3,3
 400f288:	00c100b4 	movhi	r3,1026
 400f28c:	18f40104 	addi	r3,r3,-12284
 400f290:	1885883a 	add	r2,r3,r2
 400f294:	11000017 	ldw	r4,0(r2)
 400f298:	11400117 	ldw	r5,4(r2)
 400f29c:	900d883a 	mov	r6,r18
 400f2a0:	980f883a 	mov	r7,r19
 400f2a4:	40174840 	call	4017484 <__gedf2>
 400f2a8:	00828d0e 	bge	zero,r2,400fce0 <_dtoa_r+0xcd4>
 400f2ac:	d9000517 	ldw	r4,20(sp)
 400f2b0:	d8000e15 	stw	zero,56(sp)
 400f2b4:	213fffc4 	addi	r4,r4,-1
 400f2b8:	d9000515 	stw	r4,20(sp)
 400f2bc:	b42dc83a 	sub	r22,r22,r16
 400f2c0:	b5bfffc4 	addi	r22,r22,-1
 400f2c4:	b0026f16 	blt	r22,zero,400fc84 <_dtoa_r+0xc78>
 400f2c8:	d8000815 	stw	zero,32(sp)
 400f2cc:	d9c00517 	ldw	r7,20(sp)
 400f2d0:	38026416 	blt	r7,zero,400fc64 <_dtoa_r+0xc58>
 400f2d4:	b1ed883a 	add	r22,r22,r7
 400f2d8:	d9c00d15 	stw	r7,52(sp)
 400f2dc:	d8000a15 	stw	zero,40(sp)
 400f2e0:	d9800317 	ldw	r6,12(sp)
 400f2e4:	00800244 	movi	r2,9
 400f2e8:	11811436 	bltu	r2,r6,400f73c <_dtoa_r+0x730>
 400f2ec:	00800144 	movi	r2,5
 400f2f0:	1184e10e 	bge	r2,r6,4010678 <_dtoa_r+0x166c>
 400f2f4:	31bfff04 	addi	r6,r6,-4
 400f2f8:	d9800315 	stw	r6,12(sp)
 400f2fc:	0023883a 	mov	r17,zero
 400f300:	d9800317 	ldw	r6,12(sp)
 400f304:	008000c4 	movi	r2,3
 400f308:	30836726 	beq	r6,r2,40100a8 <_dtoa_r+0x109c>
 400f30c:	1183410e 	bge	r2,r6,4010014 <_dtoa_r+0x1008>
 400f310:	d9c00317 	ldw	r7,12(sp)
 400f314:	00800104 	movi	r2,4
 400f318:	38827c26 	beq	r7,r2,400fd0c <_dtoa_r+0xd00>
 400f31c:	00800144 	movi	r2,5
 400f320:	3884c41e 	bne	r7,r2,4010634 <_dtoa_r+0x1628>
 400f324:	00800044 	movi	r2,1
 400f328:	d8800b15 	stw	r2,44(sp)
 400f32c:	d8c00517 	ldw	r3,20(sp)
 400f330:	d9002217 	ldw	r4,136(sp)
 400f334:	1907883a 	add	r3,r3,r4
 400f338:	19800044 	addi	r6,r3,1
 400f33c:	d8c00c15 	stw	r3,48(sp)
 400f340:	d9800615 	stw	r6,24(sp)
 400f344:	0183a40e 	bge	zero,r6,40101d8 <_dtoa_r+0x11cc>
 400f348:	d9800617 	ldw	r6,24(sp)
 400f34c:	3021883a 	mov	r16,r6
 400f350:	e0001115 	stw	zero,68(fp)
 400f354:	008005c4 	movi	r2,23
 400f358:	1184c92e 	bgeu	r2,r6,4010680 <_dtoa_r+0x1674>
 400f35c:	00c00044 	movi	r3,1
 400f360:	00800104 	movi	r2,4
 400f364:	1085883a 	add	r2,r2,r2
 400f368:	11000504 	addi	r4,r2,20
 400f36c:	180b883a 	mov	r5,r3
 400f370:	18c00044 	addi	r3,r3,1
 400f374:	313ffb2e 	bgeu	r6,r4,400f364 <__alt_data_end+0xfc00f364>
 400f378:	e1401115 	stw	r5,68(fp)
 400f37c:	e009883a 	mov	r4,fp
 400f380:	4011c480 	call	4011c48 <_Balloc>
 400f384:	d8800715 	stw	r2,28(sp)
 400f388:	e0801015 	stw	r2,64(fp)
 400f38c:	00800384 	movi	r2,14
 400f390:	1400f736 	bltu	r2,r16,400f770 <_dtoa_r+0x764>
 400f394:	8800f626 	beq	r17,zero,400f770 <_dtoa_r+0x764>
 400f398:	d9c00517 	ldw	r7,20(sp)
 400f39c:	01c39a0e 	bge	zero,r7,4010208 <_dtoa_r+0x11fc>
 400f3a0:	388003cc 	andi	r2,r7,15
 400f3a4:	100490fa 	slli	r2,r2,3
 400f3a8:	382bd13a 	srai	r21,r7,4
 400f3ac:	00c100b4 	movhi	r3,1026
 400f3b0:	18f40104 	addi	r3,r3,-12284
 400f3b4:	1885883a 	add	r2,r3,r2
 400f3b8:	a8c0040c 	andi	r3,r21,16
 400f3bc:	12400017 	ldw	r9,0(r2)
 400f3c0:	12000117 	ldw	r8,4(r2)
 400f3c4:	18037926 	beq	r3,zero,40101ac <_dtoa_r+0x11a0>
 400f3c8:	008100b4 	movhi	r2,1026
 400f3cc:	10b3f704 	addi	r2,r2,-12324
 400f3d0:	11800817 	ldw	r6,32(r2)
 400f3d4:	11c00917 	ldw	r7,36(r2)
 400f3d8:	9009883a 	mov	r4,r18
 400f3dc:	980b883a 	mov	r5,r19
 400f3e0:	da001715 	stw	r8,92(sp)
 400f3e4:	da401615 	stw	r9,88(sp)
 400f3e8:	4016a2c0 	call	4016a2c <__divdf3>
 400f3ec:	da001717 	ldw	r8,92(sp)
 400f3f0:	da401617 	ldw	r9,88(sp)
 400f3f4:	ad4003cc 	andi	r21,r21,15
 400f3f8:	040000c4 	movi	r16,3
 400f3fc:	1023883a 	mov	r17,r2
 400f400:	1829883a 	mov	r20,r3
 400f404:	a8001126 	beq	r21,zero,400f44c <_dtoa_r+0x440>
 400f408:	05c100b4 	movhi	r23,1026
 400f40c:	bdf3f704 	addi	r23,r23,-12324
 400f410:	4805883a 	mov	r2,r9
 400f414:	4007883a 	mov	r3,r8
 400f418:	a980004c 	andi	r6,r21,1
 400f41c:	1009883a 	mov	r4,r2
 400f420:	a82bd07a 	srai	r21,r21,1
 400f424:	180b883a 	mov	r5,r3
 400f428:	30000426 	beq	r6,zero,400f43c <_dtoa_r+0x430>
 400f42c:	b9800017 	ldw	r6,0(r23)
 400f430:	b9c00117 	ldw	r7,4(r23)
 400f434:	84000044 	addi	r16,r16,1
 400f438:	40176540 	call	4017654 <__muldf3>
 400f43c:	bdc00204 	addi	r23,r23,8
 400f440:	a83ff51e 	bne	r21,zero,400f418 <__alt_data_end+0xfc00f418>
 400f444:	1013883a 	mov	r9,r2
 400f448:	1811883a 	mov	r8,r3
 400f44c:	480d883a 	mov	r6,r9
 400f450:	400f883a 	mov	r7,r8
 400f454:	8809883a 	mov	r4,r17
 400f458:	a00b883a 	mov	r5,r20
 400f45c:	4016a2c0 	call	4016a2c <__divdf3>
 400f460:	d8800f15 	stw	r2,60(sp)
 400f464:	d8c01015 	stw	r3,64(sp)
 400f468:	d8c00e17 	ldw	r3,56(sp)
 400f46c:	18000626 	beq	r3,zero,400f488 <_dtoa_r+0x47c>
 400f470:	d9000f17 	ldw	r4,60(sp)
 400f474:	d9401017 	ldw	r5,64(sp)
 400f478:	000d883a 	mov	r6,zero
 400f47c:	01cffc34 	movhi	r7,16368
 400f480:	40175600 	call	4017560 <__ledf2>
 400f484:	10040b16 	blt	r2,zero,40104b4 <_dtoa_r+0x14a8>
 400f488:	8009883a 	mov	r4,r16
 400f48c:	401883c0 	call	401883c <__floatsidf>
 400f490:	d9800f17 	ldw	r6,60(sp)
 400f494:	d9c01017 	ldw	r7,64(sp)
 400f498:	1009883a 	mov	r4,r2
 400f49c:	180b883a 	mov	r5,r3
 400f4a0:	40176540 	call	4017654 <__muldf3>
 400f4a4:	000d883a 	mov	r6,zero
 400f4a8:	01d00734 	movhi	r7,16412
 400f4ac:	1009883a 	mov	r4,r2
 400f4b0:	180b883a 	mov	r5,r3
 400f4b4:	40161800 	call	4016180 <__adddf3>
 400f4b8:	1021883a 	mov	r16,r2
 400f4bc:	d8800617 	ldw	r2,24(sp)
 400f4c0:	047f3034 	movhi	r17,64704
 400f4c4:	1c63883a 	add	r17,r3,r17
 400f4c8:	10031826 	beq	r2,zero,401012c <_dtoa_r+0x1120>
 400f4cc:	d8c00517 	ldw	r3,20(sp)
 400f4d0:	db000617 	ldw	r12,24(sp)
 400f4d4:	d8c01315 	stw	r3,76(sp)
 400f4d8:	d9000b17 	ldw	r4,44(sp)
 400f4dc:	20038f26 	beq	r4,zero,401031c <_dtoa_r+0x1310>
 400f4e0:	60bfffc4 	addi	r2,r12,-1
 400f4e4:	100490fa 	slli	r2,r2,3
 400f4e8:	00c100b4 	movhi	r3,1026
 400f4ec:	18f40104 	addi	r3,r3,-12284
 400f4f0:	1885883a 	add	r2,r3,r2
 400f4f4:	11800017 	ldw	r6,0(r2)
 400f4f8:	11c00117 	ldw	r7,4(r2)
 400f4fc:	d8800717 	ldw	r2,28(sp)
 400f500:	0009883a 	mov	r4,zero
 400f504:	014ff834 	movhi	r5,16352
 400f508:	db001615 	stw	r12,88(sp)
 400f50c:	15c00044 	addi	r23,r2,1
 400f510:	4016a2c0 	call	4016a2c <__divdf3>
 400f514:	800d883a 	mov	r6,r16
 400f518:	880f883a 	mov	r7,r17
 400f51c:	1009883a 	mov	r4,r2
 400f520:	180b883a 	mov	r5,r3
 400f524:	4017ec00 	call	4017ec0 <__subdf3>
 400f528:	d9401017 	ldw	r5,64(sp)
 400f52c:	d9000f17 	ldw	r4,60(sp)
 400f530:	102b883a 	mov	r21,r2
 400f534:	d8c01215 	stw	r3,72(sp)
 400f538:	40187bc0 	call	40187bc <__fixdfsi>
 400f53c:	1009883a 	mov	r4,r2
 400f540:	1029883a 	mov	r20,r2
 400f544:	401883c0 	call	401883c <__floatsidf>
 400f548:	d9000f17 	ldw	r4,60(sp)
 400f54c:	d9401017 	ldw	r5,64(sp)
 400f550:	100d883a 	mov	r6,r2
 400f554:	180f883a 	mov	r7,r3
 400f558:	4017ec00 	call	4017ec0 <__subdf3>
 400f55c:	1823883a 	mov	r17,r3
 400f560:	d8c00717 	ldw	r3,28(sp)
 400f564:	d9401217 	ldw	r5,72(sp)
 400f568:	a2000c04 	addi	r8,r20,48
 400f56c:	1021883a 	mov	r16,r2
 400f570:	1a000005 	stb	r8,0(r3)
 400f574:	800d883a 	mov	r6,r16
 400f578:	880f883a 	mov	r7,r17
 400f57c:	a809883a 	mov	r4,r21
 400f580:	4029883a 	mov	r20,r8
 400f584:	40174840 	call	4017484 <__gedf2>
 400f588:	00841d16 	blt	zero,r2,4010600 <_dtoa_r+0x15f4>
 400f58c:	800d883a 	mov	r6,r16
 400f590:	880f883a 	mov	r7,r17
 400f594:	0009883a 	mov	r4,zero
 400f598:	014ffc34 	movhi	r5,16368
 400f59c:	4017ec00 	call	4017ec0 <__subdf3>
 400f5a0:	d9401217 	ldw	r5,72(sp)
 400f5a4:	100d883a 	mov	r6,r2
 400f5a8:	180f883a 	mov	r7,r3
 400f5ac:	a809883a 	mov	r4,r21
 400f5b0:	40174840 	call	4017484 <__gedf2>
 400f5b4:	db001617 	ldw	r12,88(sp)
 400f5b8:	00840e16 	blt	zero,r2,40105f4 <_dtoa_r+0x15e8>
 400f5bc:	00800044 	movi	r2,1
 400f5c0:	13006b0e 	bge	r2,r12,400f770 <_dtoa_r+0x764>
 400f5c4:	d9000717 	ldw	r4,28(sp)
 400f5c8:	dd800f15 	stw	r22,60(sp)
 400f5cc:	dcc01015 	stw	r19,64(sp)
 400f5d0:	2319883a 	add	r12,r4,r12
 400f5d4:	dcc01217 	ldw	r19,72(sp)
 400f5d8:	602d883a 	mov	r22,r12
 400f5dc:	dc801215 	stw	r18,72(sp)
 400f5e0:	b825883a 	mov	r18,r23
 400f5e4:	00000906 	br	400f60c <_dtoa_r+0x600>
 400f5e8:	4017ec00 	call	4017ec0 <__subdf3>
 400f5ec:	a80d883a 	mov	r6,r21
 400f5f0:	980f883a 	mov	r7,r19
 400f5f4:	1009883a 	mov	r4,r2
 400f5f8:	180b883a 	mov	r5,r3
 400f5fc:	40175600 	call	4017560 <__ledf2>
 400f600:	1003e816 	blt	r2,zero,40105a4 <_dtoa_r+0x1598>
 400f604:	b825883a 	mov	r18,r23
 400f608:	bd83e926 	beq	r23,r22,40105b0 <_dtoa_r+0x15a4>
 400f60c:	a809883a 	mov	r4,r21
 400f610:	980b883a 	mov	r5,r19
 400f614:	000d883a 	mov	r6,zero
 400f618:	01d00934 	movhi	r7,16420
 400f61c:	40176540 	call	4017654 <__muldf3>
 400f620:	000d883a 	mov	r6,zero
 400f624:	01d00934 	movhi	r7,16420
 400f628:	8009883a 	mov	r4,r16
 400f62c:	880b883a 	mov	r5,r17
 400f630:	102b883a 	mov	r21,r2
 400f634:	1827883a 	mov	r19,r3
 400f638:	40176540 	call	4017654 <__muldf3>
 400f63c:	180b883a 	mov	r5,r3
 400f640:	1009883a 	mov	r4,r2
 400f644:	1821883a 	mov	r16,r3
 400f648:	1023883a 	mov	r17,r2
 400f64c:	40187bc0 	call	40187bc <__fixdfsi>
 400f650:	1009883a 	mov	r4,r2
 400f654:	1029883a 	mov	r20,r2
 400f658:	401883c0 	call	401883c <__floatsidf>
 400f65c:	8809883a 	mov	r4,r17
 400f660:	800b883a 	mov	r5,r16
 400f664:	100d883a 	mov	r6,r2
 400f668:	180f883a 	mov	r7,r3
 400f66c:	4017ec00 	call	4017ec0 <__subdf3>
 400f670:	a5000c04 	addi	r20,r20,48
 400f674:	a80d883a 	mov	r6,r21
 400f678:	980f883a 	mov	r7,r19
 400f67c:	1009883a 	mov	r4,r2
 400f680:	180b883a 	mov	r5,r3
 400f684:	95000005 	stb	r20,0(r18)
 400f688:	1021883a 	mov	r16,r2
 400f68c:	1823883a 	mov	r17,r3
 400f690:	40175600 	call	4017560 <__ledf2>
 400f694:	bdc00044 	addi	r23,r23,1
 400f698:	800d883a 	mov	r6,r16
 400f69c:	880f883a 	mov	r7,r17
 400f6a0:	0009883a 	mov	r4,zero
 400f6a4:	014ffc34 	movhi	r5,16368
 400f6a8:	103fcf0e 	bge	r2,zero,400f5e8 <__alt_data_end+0xfc00f5e8>
 400f6ac:	d8c01317 	ldw	r3,76(sp)
 400f6b0:	d8c00515 	stw	r3,20(sp)
 400f6b4:	d9400917 	ldw	r5,36(sp)
 400f6b8:	e009883a 	mov	r4,fp
 400f6bc:	4011cf00 	call	4011cf0 <_Bfree>
 400f6c0:	d9000517 	ldw	r4,20(sp)
 400f6c4:	d9802317 	ldw	r6,140(sp)
 400f6c8:	d9c02517 	ldw	r7,148(sp)
 400f6cc:	b8000005 	stb	zero,0(r23)
 400f6d0:	20800044 	addi	r2,r4,1
 400f6d4:	30800015 	stw	r2,0(r6)
 400f6d8:	3802aa26 	beq	r7,zero,4010184 <_dtoa_r+0x1178>
 400f6dc:	3dc00015 	stw	r23,0(r7)
 400f6e0:	d8800717 	ldw	r2,28(sp)
 400f6e4:	003e7906 	br	400f0cc <__alt_data_end+0xfc00f0cc>
 400f6e8:	00800434 	movhi	r2,16
 400f6ec:	10bfffc4 	addi	r2,r2,-1
 400f6f0:	88a2703a 	and	r17,r17,r2
 400f6f4:	883e851e 	bne	r17,zero,400f10c <__alt_data_end+0xfc00f10c>
 400f6f8:	008100b4 	movhi	r2,1026
 400f6fc:	10b3e304 	addi	r2,r2,-12404
 400f700:	003e8406 	br	400f114 <__alt_data_end+0xfc00f114>
 400f704:	10c00204 	addi	r3,r2,8
 400f708:	003e8706 	br	400f128 <__alt_data_end+0xfc00f128>
 400f70c:	01400434 	movhi	r5,16
 400f710:	297fffc4 	addi	r5,r5,-1
 400f714:	994a703a 	and	r5,r19,r5
 400f718:	9009883a 	mov	r4,r18
 400f71c:	843f0044 	addi	r16,r16,-1023
 400f720:	294ffc34 	orhi	r5,r5,16368
 400f724:	dd800217 	ldw	r22,8(sp)
 400f728:	d8001115 	stw	zero,68(sp)
 400f72c:	003ea506 	br	400f1c4 <__alt_data_end+0xfc00f1c4>
 400f730:	008100b4 	movhi	r2,1026
 400f734:	10b3da04 	addi	r2,r2,-12440
 400f738:	003e6406 	br	400f0cc <__alt_data_end+0xfc00f0cc>
 400f73c:	e0001115 	stw	zero,68(fp)
 400f740:	000b883a 	mov	r5,zero
 400f744:	e009883a 	mov	r4,fp
 400f748:	4011c480 	call	4011c48 <_Balloc>
 400f74c:	01bfffc4 	movi	r6,-1
 400f750:	01c00044 	movi	r7,1
 400f754:	d8800715 	stw	r2,28(sp)
 400f758:	d9800c15 	stw	r6,48(sp)
 400f75c:	e0801015 	stw	r2,64(fp)
 400f760:	d8000315 	stw	zero,12(sp)
 400f764:	d9c00b15 	stw	r7,44(sp)
 400f768:	d9800615 	stw	r6,24(sp)
 400f76c:	d8002215 	stw	zero,136(sp)
 400f770:	d8800117 	ldw	r2,4(sp)
 400f774:	10008916 	blt	r2,zero,400f99c <_dtoa_r+0x990>
 400f778:	d9000517 	ldw	r4,20(sp)
 400f77c:	00c00384 	movi	r3,14
 400f780:	19008616 	blt	r3,r4,400f99c <_dtoa_r+0x990>
 400f784:	200490fa 	slli	r2,r4,3
 400f788:	00c100b4 	movhi	r3,1026
 400f78c:	d9802217 	ldw	r6,136(sp)
 400f790:	18f40104 	addi	r3,r3,-12284
 400f794:	1885883a 	add	r2,r3,r2
 400f798:	14000017 	ldw	r16,0(r2)
 400f79c:	14400117 	ldw	r17,4(r2)
 400f7a0:	30016316 	blt	r6,zero,400fd30 <_dtoa_r+0xd24>
 400f7a4:	800d883a 	mov	r6,r16
 400f7a8:	880f883a 	mov	r7,r17
 400f7ac:	9009883a 	mov	r4,r18
 400f7b0:	980b883a 	mov	r5,r19
 400f7b4:	4016a2c0 	call	4016a2c <__divdf3>
 400f7b8:	180b883a 	mov	r5,r3
 400f7bc:	1009883a 	mov	r4,r2
 400f7c0:	40187bc0 	call	40187bc <__fixdfsi>
 400f7c4:	1009883a 	mov	r4,r2
 400f7c8:	102b883a 	mov	r21,r2
 400f7cc:	401883c0 	call	401883c <__floatsidf>
 400f7d0:	800d883a 	mov	r6,r16
 400f7d4:	880f883a 	mov	r7,r17
 400f7d8:	1009883a 	mov	r4,r2
 400f7dc:	180b883a 	mov	r5,r3
 400f7e0:	40176540 	call	4017654 <__muldf3>
 400f7e4:	100d883a 	mov	r6,r2
 400f7e8:	180f883a 	mov	r7,r3
 400f7ec:	9009883a 	mov	r4,r18
 400f7f0:	980b883a 	mov	r5,r19
 400f7f4:	4017ec00 	call	4017ec0 <__subdf3>
 400f7f8:	d9c00717 	ldw	r7,28(sp)
 400f7fc:	1009883a 	mov	r4,r2
 400f800:	a8800c04 	addi	r2,r21,48
 400f804:	38800005 	stb	r2,0(r7)
 400f808:	3dc00044 	addi	r23,r7,1
 400f80c:	d9c00617 	ldw	r7,24(sp)
 400f810:	01800044 	movi	r6,1
 400f814:	180b883a 	mov	r5,r3
 400f818:	2005883a 	mov	r2,r4
 400f81c:	39803826 	beq	r7,r6,400f900 <_dtoa_r+0x8f4>
 400f820:	000d883a 	mov	r6,zero
 400f824:	01d00934 	movhi	r7,16420
 400f828:	40176540 	call	4017654 <__muldf3>
 400f82c:	000d883a 	mov	r6,zero
 400f830:	000f883a 	mov	r7,zero
 400f834:	1009883a 	mov	r4,r2
 400f838:	180b883a 	mov	r5,r3
 400f83c:	1025883a 	mov	r18,r2
 400f840:	1827883a 	mov	r19,r3
 400f844:	40173fc0 	call	40173fc <__eqdf2>
 400f848:	103f9a26 	beq	r2,zero,400f6b4 <__alt_data_end+0xfc00f6b4>
 400f84c:	d9c00617 	ldw	r7,24(sp)
 400f850:	d8c00717 	ldw	r3,28(sp)
 400f854:	b829883a 	mov	r20,r23
 400f858:	38bfffc4 	addi	r2,r7,-1
 400f85c:	18ad883a 	add	r22,r3,r2
 400f860:	00000a06 	br	400f88c <_dtoa_r+0x880>
 400f864:	40176540 	call	4017654 <__muldf3>
 400f868:	000d883a 	mov	r6,zero
 400f86c:	000f883a 	mov	r7,zero
 400f870:	1009883a 	mov	r4,r2
 400f874:	180b883a 	mov	r5,r3
 400f878:	1025883a 	mov	r18,r2
 400f87c:	1827883a 	mov	r19,r3
 400f880:	b829883a 	mov	r20,r23
 400f884:	40173fc0 	call	40173fc <__eqdf2>
 400f888:	103f8a26 	beq	r2,zero,400f6b4 <__alt_data_end+0xfc00f6b4>
 400f88c:	800d883a 	mov	r6,r16
 400f890:	880f883a 	mov	r7,r17
 400f894:	9009883a 	mov	r4,r18
 400f898:	980b883a 	mov	r5,r19
 400f89c:	4016a2c0 	call	4016a2c <__divdf3>
 400f8a0:	180b883a 	mov	r5,r3
 400f8a4:	1009883a 	mov	r4,r2
 400f8a8:	40187bc0 	call	40187bc <__fixdfsi>
 400f8ac:	1009883a 	mov	r4,r2
 400f8b0:	102b883a 	mov	r21,r2
 400f8b4:	401883c0 	call	401883c <__floatsidf>
 400f8b8:	800d883a 	mov	r6,r16
 400f8bc:	880f883a 	mov	r7,r17
 400f8c0:	1009883a 	mov	r4,r2
 400f8c4:	180b883a 	mov	r5,r3
 400f8c8:	40176540 	call	4017654 <__muldf3>
 400f8cc:	100d883a 	mov	r6,r2
 400f8d0:	180f883a 	mov	r7,r3
 400f8d4:	9009883a 	mov	r4,r18
 400f8d8:	980b883a 	mov	r5,r19
 400f8dc:	4017ec00 	call	4017ec0 <__subdf3>
 400f8e0:	aa000c04 	addi	r8,r21,48
 400f8e4:	a2000005 	stb	r8,0(r20)
 400f8e8:	000d883a 	mov	r6,zero
 400f8ec:	01d00934 	movhi	r7,16420
 400f8f0:	1009883a 	mov	r4,r2
 400f8f4:	180b883a 	mov	r5,r3
 400f8f8:	a5c00044 	addi	r23,r20,1
 400f8fc:	b53fd91e 	bne	r22,r20,400f864 <__alt_data_end+0xfc00f864>
 400f900:	100d883a 	mov	r6,r2
 400f904:	180f883a 	mov	r7,r3
 400f908:	1009883a 	mov	r4,r2
 400f90c:	180b883a 	mov	r5,r3
 400f910:	40161800 	call	4016180 <__adddf3>
 400f914:	100d883a 	mov	r6,r2
 400f918:	180f883a 	mov	r7,r3
 400f91c:	8009883a 	mov	r4,r16
 400f920:	880b883a 	mov	r5,r17
 400f924:	1027883a 	mov	r19,r2
 400f928:	1825883a 	mov	r18,r3
 400f92c:	40175600 	call	4017560 <__ledf2>
 400f930:	10000816 	blt	r2,zero,400f954 <_dtoa_r+0x948>
 400f934:	980d883a 	mov	r6,r19
 400f938:	900f883a 	mov	r7,r18
 400f93c:	8009883a 	mov	r4,r16
 400f940:	880b883a 	mov	r5,r17
 400f944:	40173fc0 	call	40173fc <__eqdf2>
 400f948:	103f5a1e 	bne	r2,zero,400f6b4 <__alt_data_end+0xfc00f6b4>
 400f94c:	ad40004c 	andi	r21,r21,1
 400f950:	a83f5826 	beq	r21,zero,400f6b4 <__alt_data_end+0xfc00f6b4>
 400f954:	bd3fffc3 	ldbu	r20,-1(r23)
 400f958:	b8bfffc4 	addi	r2,r23,-1
 400f95c:	1007883a 	mov	r3,r2
 400f960:	01400e44 	movi	r5,57
 400f964:	d9800717 	ldw	r6,28(sp)
 400f968:	00000506 	br	400f980 <_dtoa_r+0x974>
 400f96c:	18ffffc4 	addi	r3,r3,-1
 400f970:	11824726 	beq	r2,r6,4010290 <_dtoa_r+0x1284>
 400f974:	1d000003 	ldbu	r20,0(r3)
 400f978:	102f883a 	mov	r23,r2
 400f97c:	10bfffc4 	addi	r2,r2,-1
 400f980:	a1003fcc 	andi	r4,r20,255
 400f984:	2100201c 	xori	r4,r4,128
 400f988:	213fe004 	addi	r4,r4,-128
 400f98c:	217ff726 	beq	r4,r5,400f96c <__alt_data_end+0xfc00f96c>
 400f990:	a2000044 	addi	r8,r20,1
 400f994:	12000005 	stb	r8,0(r2)
 400f998:	003f4606 	br	400f6b4 <__alt_data_end+0xfc00f6b4>
 400f99c:	d9000b17 	ldw	r4,44(sp)
 400f9a0:	2000c826 	beq	r4,zero,400fcc4 <_dtoa_r+0xcb8>
 400f9a4:	d9800317 	ldw	r6,12(sp)
 400f9a8:	00c00044 	movi	r3,1
 400f9ac:	1980f90e 	bge	r3,r6,400fd94 <_dtoa_r+0xd88>
 400f9b0:	d8800617 	ldw	r2,24(sp)
 400f9b4:	d8c00a17 	ldw	r3,40(sp)
 400f9b8:	157fffc4 	addi	r21,r2,-1
 400f9bc:	1d41f316 	blt	r3,r21,401018c <_dtoa_r+0x1180>
 400f9c0:	1d6bc83a 	sub	r21,r3,r21
 400f9c4:	d9c00617 	ldw	r7,24(sp)
 400f9c8:	3802aa16 	blt	r7,zero,4010474 <_dtoa_r+0x1468>
 400f9cc:	dd000817 	ldw	r20,32(sp)
 400f9d0:	d8800617 	ldw	r2,24(sp)
 400f9d4:	d8c00817 	ldw	r3,32(sp)
 400f9d8:	01400044 	movi	r5,1
 400f9dc:	e009883a 	mov	r4,fp
 400f9e0:	1887883a 	add	r3,r3,r2
 400f9e4:	d8c00815 	stw	r3,32(sp)
 400f9e8:	b0ad883a 	add	r22,r22,r2
 400f9ec:	401207c0 	call	401207c <__i2b>
 400f9f0:	1023883a 	mov	r17,r2
 400f9f4:	a0000826 	beq	r20,zero,400fa18 <_dtoa_r+0xa0c>
 400f9f8:	0580070e 	bge	zero,r22,400fa18 <_dtoa_r+0xa0c>
 400f9fc:	a005883a 	mov	r2,r20
 400fa00:	b500b916 	blt	r22,r20,400fce8 <_dtoa_r+0xcdc>
 400fa04:	d9000817 	ldw	r4,32(sp)
 400fa08:	a0a9c83a 	sub	r20,r20,r2
 400fa0c:	b0adc83a 	sub	r22,r22,r2
 400fa10:	2089c83a 	sub	r4,r4,r2
 400fa14:	d9000815 	stw	r4,32(sp)
 400fa18:	d9800a17 	ldw	r6,40(sp)
 400fa1c:	0181810e 	bge	zero,r6,4010024 <_dtoa_r+0x1018>
 400fa20:	d9c00b17 	ldw	r7,44(sp)
 400fa24:	3800b326 	beq	r7,zero,400fcf4 <_dtoa_r+0xce8>
 400fa28:	a800b226 	beq	r21,zero,400fcf4 <_dtoa_r+0xce8>
 400fa2c:	880b883a 	mov	r5,r17
 400fa30:	a80d883a 	mov	r6,r21
 400fa34:	e009883a 	mov	r4,fp
 400fa38:	40123440 	call	4012344 <__pow5mult>
 400fa3c:	d9800917 	ldw	r6,36(sp)
 400fa40:	100b883a 	mov	r5,r2
 400fa44:	e009883a 	mov	r4,fp
 400fa48:	1023883a 	mov	r17,r2
 400fa4c:	40120b80 	call	40120b8 <__multiply>
 400fa50:	1021883a 	mov	r16,r2
 400fa54:	d8800a17 	ldw	r2,40(sp)
 400fa58:	d9400917 	ldw	r5,36(sp)
 400fa5c:	e009883a 	mov	r4,fp
 400fa60:	1545c83a 	sub	r2,r2,r21
 400fa64:	d8800a15 	stw	r2,40(sp)
 400fa68:	4011cf00 	call	4011cf0 <_Bfree>
 400fa6c:	d8c00a17 	ldw	r3,40(sp)
 400fa70:	18009f1e 	bne	r3,zero,400fcf0 <_dtoa_r+0xce4>
 400fa74:	05c00044 	movi	r23,1
 400fa78:	e009883a 	mov	r4,fp
 400fa7c:	b80b883a 	mov	r5,r23
 400fa80:	401207c0 	call	401207c <__i2b>
 400fa84:	d9000d17 	ldw	r4,52(sp)
 400fa88:	102b883a 	mov	r21,r2
 400fa8c:	2000ce26 	beq	r4,zero,400fdc8 <_dtoa_r+0xdbc>
 400fa90:	200d883a 	mov	r6,r4
 400fa94:	100b883a 	mov	r5,r2
 400fa98:	e009883a 	mov	r4,fp
 400fa9c:	40123440 	call	4012344 <__pow5mult>
 400faa0:	d9800317 	ldw	r6,12(sp)
 400faa4:	102b883a 	mov	r21,r2
 400faa8:	b981810e 	bge	r23,r6,40100b0 <_dtoa_r+0x10a4>
 400faac:	0027883a 	mov	r19,zero
 400fab0:	a8800417 	ldw	r2,16(r21)
 400fab4:	05c00804 	movi	r23,32
 400fab8:	10800104 	addi	r2,r2,4
 400fabc:	1085883a 	add	r2,r2,r2
 400fac0:	1085883a 	add	r2,r2,r2
 400fac4:	a885883a 	add	r2,r21,r2
 400fac8:	11000017 	ldw	r4,0(r2)
 400facc:	4011f640 	call	4011f64 <__hi0bits>
 400fad0:	b885c83a 	sub	r2,r23,r2
 400fad4:	1585883a 	add	r2,r2,r22
 400fad8:	108007cc 	andi	r2,r2,31
 400fadc:	1000b326 	beq	r2,zero,400fdac <_dtoa_r+0xda0>
 400fae0:	00c00804 	movi	r3,32
 400fae4:	1887c83a 	sub	r3,r3,r2
 400fae8:	01000104 	movi	r4,4
 400faec:	20c2cd0e 	bge	r4,r3,4010624 <_dtoa_r+0x1618>
 400faf0:	00c00704 	movi	r3,28
 400faf4:	1885c83a 	sub	r2,r3,r2
 400faf8:	d8c00817 	ldw	r3,32(sp)
 400fafc:	a0a9883a 	add	r20,r20,r2
 400fb00:	b0ad883a 	add	r22,r22,r2
 400fb04:	1887883a 	add	r3,r3,r2
 400fb08:	d8c00815 	stw	r3,32(sp)
 400fb0c:	d9800817 	ldw	r6,32(sp)
 400fb10:	0180040e 	bge	zero,r6,400fb24 <_dtoa_r+0xb18>
 400fb14:	800b883a 	mov	r5,r16
 400fb18:	e009883a 	mov	r4,fp
 400fb1c:	40124840 	call	4012484 <__lshift>
 400fb20:	1021883a 	mov	r16,r2
 400fb24:	0580050e 	bge	zero,r22,400fb3c <_dtoa_r+0xb30>
 400fb28:	a80b883a 	mov	r5,r21
 400fb2c:	b00d883a 	mov	r6,r22
 400fb30:	e009883a 	mov	r4,fp
 400fb34:	40124840 	call	4012484 <__lshift>
 400fb38:	102b883a 	mov	r21,r2
 400fb3c:	d9c00e17 	ldw	r7,56(sp)
 400fb40:	3801211e 	bne	r7,zero,400ffc8 <_dtoa_r+0xfbc>
 400fb44:	d9800617 	ldw	r6,24(sp)
 400fb48:	0181380e 	bge	zero,r6,401002c <_dtoa_r+0x1020>
 400fb4c:	d8c00b17 	ldw	r3,44(sp)
 400fb50:	1800ab1e 	bne	r3,zero,400fe00 <_dtoa_r+0xdf4>
 400fb54:	dc800717 	ldw	r18,28(sp)
 400fb58:	dcc00617 	ldw	r19,24(sp)
 400fb5c:	9029883a 	mov	r20,r18
 400fb60:	00000206 	br	400fb6c <_dtoa_r+0xb60>
 400fb64:	4011d180 	call	4011d18 <__multadd>
 400fb68:	1021883a 	mov	r16,r2
 400fb6c:	a80b883a 	mov	r5,r21
 400fb70:	8009883a 	mov	r4,r16
 400fb74:	400ede40 	call	400ede4 <quorem>
 400fb78:	10800c04 	addi	r2,r2,48
 400fb7c:	90800005 	stb	r2,0(r18)
 400fb80:	94800044 	addi	r18,r18,1
 400fb84:	9507c83a 	sub	r3,r18,r20
 400fb88:	000f883a 	mov	r7,zero
 400fb8c:	01800284 	movi	r6,10
 400fb90:	800b883a 	mov	r5,r16
 400fb94:	e009883a 	mov	r4,fp
 400fb98:	1cfff216 	blt	r3,r19,400fb64 <__alt_data_end+0xfc00fb64>
 400fb9c:	1011883a 	mov	r8,r2
 400fba0:	d8800617 	ldw	r2,24(sp)
 400fba4:	0082370e 	bge	zero,r2,4010484 <_dtoa_r+0x1478>
 400fba8:	d9000717 	ldw	r4,28(sp)
 400fbac:	0025883a 	mov	r18,zero
 400fbb0:	20af883a 	add	r23,r4,r2
 400fbb4:	01800044 	movi	r6,1
 400fbb8:	800b883a 	mov	r5,r16
 400fbbc:	e009883a 	mov	r4,fp
 400fbc0:	da001715 	stw	r8,92(sp)
 400fbc4:	40124840 	call	4012484 <__lshift>
 400fbc8:	a80b883a 	mov	r5,r21
 400fbcc:	1009883a 	mov	r4,r2
 400fbd0:	d8800915 	stw	r2,36(sp)
 400fbd4:	40125cc0 	call	40125cc <__mcmp>
 400fbd8:	da001717 	ldw	r8,92(sp)
 400fbdc:	0081800e 	bge	zero,r2,40101e0 <_dtoa_r+0x11d4>
 400fbe0:	b93fffc3 	ldbu	r4,-1(r23)
 400fbe4:	b8bfffc4 	addi	r2,r23,-1
 400fbe8:	1007883a 	mov	r3,r2
 400fbec:	01800e44 	movi	r6,57
 400fbf0:	d9c00717 	ldw	r7,28(sp)
 400fbf4:	00000506 	br	400fc0c <_dtoa_r+0xc00>
 400fbf8:	18ffffc4 	addi	r3,r3,-1
 400fbfc:	11c12326 	beq	r2,r7,401008c <_dtoa_r+0x1080>
 400fc00:	19000003 	ldbu	r4,0(r3)
 400fc04:	102f883a 	mov	r23,r2
 400fc08:	10bfffc4 	addi	r2,r2,-1
 400fc0c:	21403fcc 	andi	r5,r4,255
 400fc10:	2940201c 	xori	r5,r5,128
 400fc14:	297fe004 	addi	r5,r5,-128
 400fc18:	29bff726 	beq	r5,r6,400fbf8 <__alt_data_end+0xfc00fbf8>
 400fc1c:	21000044 	addi	r4,r4,1
 400fc20:	11000005 	stb	r4,0(r2)
 400fc24:	a80b883a 	mov	r5,r21
 400fc28:	e009883a 	mov	r4,fp
 400fc2c:	4011cf00 	call	4011cf0 <_Bfree>
 400fc30:	883ea026 	beq	r17,zero,400f6b4 <__alt_data_end+0xfc00f6b4>
 400fc34:	90000426 	beq	r18,zero,400fc48 <_dtoa_r+0xc3c>
 400fc38:	94400326 	beq	r18,r17,400fc48 <_dtoa_r+0xc3c>
 400fc3c:	900b883a 	mov	r5,r18
 400fc40:	e009883a 	mov	r4,fp
 400fc44:	4011cf00 	call	4011cf0 <_Bfree>
 400fc48:	880b883a 	mov	r5,r17
 400fc4c:	e009883a 	mov	r4,fp
 400fc50:	4011cf00 	call	4011cf0 <_Bfree>
 400fc54:	003e9706 	br	400f6b4 <__alt_data_end+0xfc00f6b4>
 400fc58:	01800044 	movi	r6,1
 400fc5c:	d9800e15 	stw	r6,56(sp)
 400fc60:	003d9606 	br	400f2bc <__alt_data_end+0xfc00f2bc>
 400fc64:	d8800817 	ldw	r2,32(sp)
 400fc68:	d8c00517 	ldw	r3,20(sp)
 400fc6c:	d8000d15 	stw	zero,52(sp)
 400fc70:	10c5c83a 	sub	r2,r2,r3
 400fc74:	00c9c83a 	sub	r4,zero,r3
 400fc78:	d8800815 	stw	r2,32(sp)
 400fc7c:	d9000a15 	stw	r4,40(sp)
 400fc80:	003d9706 	br	400f2e0 <__alt_data_end+0xfc00f2e0>
 400fc84:	05adc83a 	sub	r22,zero,r22
 400fc88:	dd800815 	stw	r22,32(sp)
 400fc8c:	002d883a 	mov	r22,zero
 400fc90:	003d8e06 	br	400f2cc <__alt_data_end+0xfc00f2cc>
 400fc94:	d9000517 	ldw	r4,20(sp)
 400fc98:	401883c0 	call	401883c <__floatsidf>
 400fc9c:	100d883a 	mov	r6,r2
 400fca0:	180f883a 	mov	r7,r3
 400fca4:	a009883a 	mov	r4,r20
 400fca8:	880b883a 	mov	r5,r17
 400fcac:	40173fc0 	call	40173fc <__eqdf2>
 400fcb0:	103d7126 	beq	r2,zero,400f278 <__alt_data_end+0xfc00f278>
 400fcb4:	d9c00517 	ldw	r7,20(sp)
 400fcb8:	39ffffc4 	addi	r7,r7,-1
 400fcbc:	d9c00515 	stw	r7,20(sp)
 400fcc0:	003d6d06 	br	400f278 <__alt_data_end+0xfc00f278>
 400fcc4:	dd400a17 	ldw	r21,40(sp)
 400fcc8:	dd000817 	ldw	r20,32(sp)
 400fccc:	0023883a 	mov	r17,zero
 400fcd0:	003f4806 	br	400f9f4 <__alt_data_end+0xfc00f9f4>
 400fcd4:	10e3c83a 	sub	r17,r2,r3
 400fcd8:	9448983a 	sll	r4,r18,r17
 400fcdc:	003d3206 	br	400f1a8 <__alt_data_end+0xfc00f1a8>
 400fce0:	d8000e15 	stw	zero,56(sp)
 400fce4:	003d7506 	br	400f2bc <__alt_data_end+0xfc00f2bc>
 400fce8:	b005883a 	mov	r2,r22
 400fcec:	003f4506 	br	400fa04 <__alt_data_end+0xfc00fa04>
 400fcf0:	dc000915 	stw	r16,36(sp)
 400fcf4:	d9800a17 	ldw	r6,40(sp)
 400fcf8:	d9400917 	ldw	r5,36(sp)
 400fcfc:	e009883a 	mov	r4,fp
 400fd00:	40123440 	call	4012344 <__pow5mult>
 400fd04:	1021883a 	mov	r16,r2
 400fd08:	003f5a06 	br	400fa74 <__alt_data_end+0xfc00fa74>
 400fd0c:	01c00044 	movi	r7,1
 400fd10:	d9c00b15 	stw	r7,44(sp)
 400fd14:	d8802217 	ldw	r2,136(sp)
 400fd18:	0081280e 	bge	zero,r2,40101bc <_dtoa_r+0x11b0>
 400fd1c:	100d883a 	mov	r6,r2
 400fd20:	1021883a 	mov	r16,r2
 400fd24:	d8800c15 	stw	r2,48(sp)
 400fd28:	d8800615 	stw	r2,24(sp)
 400fd2c:	003d8806 	br	400f350 <__alt_data_end+0xfc00f350>
 400fd30:	d8800617 	ldw	r2,24(sp)
 400fd34:	00be9b16 	blt	zero,r2,400f7a4 <__alt_data_end+0xfc00f7a4>
 400fd38:	10010f1e 	bne	r2,zero,4010178 <_dtoa_r+0x116c>
 400fd3c:	880b883a 	mov	r5,r17
 400fd40:	000d883a 	mov	r6,zero
 400fd44:	01d00534 	movhi	r7,16404
 400fd48:	8009883a 	mov	r4,r16
 400fd4c:	40176540 	call	4017654 <__muldf3>
 400fd50:	900d883a 	mov	r6,r18
 400fd54:	980f883a 	mov	r7,r19
 400fd58:	1009883a 	mov	r4,r2
 400fd5c:	180b883a 	mov	r5,r3
 400fd60:	40174840 	call	4017484 <__gedf2>
 400fd64:	002b883a 	mov	r21,zero
 400fd68:	0023883a 	mov	r17,zero
 400fd6c:	1000bf16 	blt	r2,zero,401006c <_dtoa_r+0x1060>
 400fd70:	d9802217 	ldw	r6,136(sp)
 400fd74:	ddc00717 	ldw	r23,28(sp)
 400fd78:	018c303a 	nor	r6,zero,r6
 400fd7c:	d9800515 	stw	r6,20(sp)
 400fd80:	a80b883a 	mov	r5,r21
 400fd84:	e009883a 	mov	r4,fp
 400fd88:	4011cf00 	call	4011cf0 <_Bfree>
 400fd8c:	883e4926 	beq	r17,zero,400f6b4 <__alt_data_end+0xfc00f6b4>
 400fd90:	003fad06 	br	400fc48 <__alt_data_end+0xfc00fc48>
 400fd94:	d9c01117 	ldw	r7,68(sp)
 400fd98:	3801bc26 	beq	r7,zero,401048c <_dtoa_r+0x1480>
 400fd9c:	10810cc4 	addi	r2,r2,1075
 400fda0:	dd400a17 	ldw	r21,40(sp)
 400fda4:	dd000817 	ldw	r20,32(sp)
 400fda8:	003f0a06 	br	400f9d4 <__alt_data_end+0xfc00f9d4>
 400fdac:	00800704 	movi	r2,28
 400fdb0:	d9000817 	ldw	r4,32(sp)
 400fdb4:	a0a9883a 	add	r20,r20,r2
 400fdb8:	b0ad883a 	add	r22,r22,r2
 400fdbc:	2089883a 	add	r4,r4,r2
 400fdc0:	d9000815 	stw	r4,32(sp)
 400fdc4:	003f5106 	br	400fb0c <__alt_data_end+0xfc00fb0c>
 400fdc8:	d8c00317 	ldw	r3,12(sp)
 400fdcc:	b8c1fc0e 	bge	r23,r3,40105c0 <_dtoa_r+0x15b4>
 400fdd0:	0027883a 	mov	r19,zero
 400fdd4:	b805883a 	mov	r2,r23
 400fdd8:	003f3e06 	br	400fad4 <__alt_data_end+0xfc00fad4>
 400fddc:	880b883a 	mov	r5,r17
 400fde0:	e009883a 	mov	r4,fp
 400fde4:	000f883a 	mov	r7,zero
 400fde8:	01800284 	movi	r6,10
 400fdec:	4011d180 	call	4011d18 <__multadd>
 400fdf0:	d9000c17 	ldw	r4,48(sp)
 400fdf4:	1023883a 	mov	r17,r2
 400fdf8:	0102040e 	bge	zero,r4,401060c <_dtoa_r+0x1600>
 400fdfc:	d9000615 	stw	r4,24(sp)
 400fe00:	0500050e 	bge	zero,r20,400fe18 <_dtoa_r+0xe0c>
 400fe04:	880b883a 	mov	r5,r17
 400fe08:	a00d883a 	mov	r6,r20
 400fe0c:	e009883a 	mov	r4,fp
 400fe10:	40124840 	call	4012484 <__lshift>
 400fe14:	1023883a 	mov	r17,r2
 400fe18:	9801241e 	bne	r19,zero,40102ac <_dtoa_r+0x12a0>
 400fe1c:	8829883a 	mov	r20,r17
 400fe20:	d9000617 	ldw	r4,24(sp)
 400fe24:	dcc00717 	ldw	r19,28(sp)
 400fe28:	9480004c 	andi	r18,r18,1
 400fe2c:	20bfffc4 	addi	r2,r4,-1
 400fe30:	9885883a 	add	r2,r19,r2
 400fe34:	d8800415 	stw	r2,16(sp)
 400fe38:	dc800615 	stw	r18,24(sp)
 400fe3c:	a80b883a 	mov	r5,r21
 400fe40:	8009883a 	mov	r4,r16
 400fe44:	400ede40 	call	400ede4 <quorem>
 400fe48:	880b883a 	mov	r5,r17
 400fe4c:	8009883a 	mov	r4,r16
 400fe50:	102f883a 	mov	r23,r2
 400fe54:	40125cc0 	call	40125cc <__mcmp>
 400fe58:	a80b883a 	mov	r5,r21
 400fe5c:	a00d883a 	mov	r6,r20
 400fe60:	e009883a 	mov	r4,fp
 400fe64:	102d883a 	mov	r22,r2
 400fe68:	401262c0 	call	401262c <__mdiff>
 400fe6c:	1007883a 	mov	r3,r2
 400fe70:	10800317 	ldw	r2,12(r2)
 400fe74:	bc800c04 	addi	r18,r23,48
 400fe78:	180b883a 	mov	r5,r3
 400fe7c:	10004e1e 	bne	r2,zero,400ffb8 <_dtoa_r+0xfac>
 400fe80:	8009883a 	mov	r4,r16
 400fe84:	d8c01615 	stw	r3,88(sp)
 400fe88:	40125cc0 	call	40125cc <__mcmp>
 400fe8c:	d8c01617 	ldw	r3,88(sp)
 400fe90:	e009883a 	mov	r4,fp
 400fe94:	d8801615 	stw	r2,88(sp)
 400fe98:	180b883a 	mov	r5,r3
 400fe9c:	4011cf00 	call	4011cf0 <_Bfree>
 400fea0:	d8801617 	ldw	r2,88(sp)
 400fea4:	1000041e 	bne	r2,zero,400feb8 <_dtoa_r+0xeac>
 400fea8:	d9800317 	ldw	r6,12(sp)
 400feac:	3000021e 	bne	r6,zero,400feb8 <_dtoa_r+0xeac>
 400feb0:	d8c00617 	ldw	r3,24(sp)
 400feb4:	18003726 	beq	r3,zero,400ff94 <_dtoa_r+0xf88>
 400feb8:	b0002016 	blt	r22,zero,400ff3c <_dtoa_r+0xf30>
 400febc:	b000041e 	bne	r22,zero,400fed0 <_dtoa_r+0xec4>
 400fec0:	d9000317 	ldw	r4,12(sp)
 400fec4:	2000021e 	bne	r4,zero,400fed0 <_dtoa_r+0xec4>
 400fec8:	d8c00617 	ldw	r3,24(sp)
 400fecc:	18001b26 	beq	r3,zero,400ff3c <_dtoa_r+0xf30>
 400fed0:	00810716 	blt	zero,r2,40102f0 <_dtoa_r+0x12e4>
 400fed4:	d8c00417 	ldw	r3,16(sp)
 400fed8:	9d800044 	addi	r22,r19,1
 400fedc:	9c800005 	stb	r18,0(r19)
 400fee0:	b02f883a 	mov	r23,r22
 400fee4:	98c10626 	beq	r19,r3,4010300 <_dtoa_r+0x12f4>
 400fee8:	800b883a 	mov	r5,r16
 400feec:	000f883a 	mov	r7,zero
 400fef0:	01800284 	movi	r6,10
 400fef4:	e009883a 	mov	r4,fp
 400fef8:	4011d180 	call	4011d18 <__multadd>
 400fefc:	1021883a 	mov	r16,r2
 400ff00:	000f883a 	mov	r7,zero
 400ff04:	01800284 	movi	r6,10
 400ff08:	880b883a 	mov	r5,r17
 400ff0c:	e009883a 	mov	r4,fp
 400ff10:	8d002526 	beq	r17,r20,400ffa8 <_dtoa_r+0xf9c>
 400ff14:	4011d180 	call	4011d18 <__multadd>
 400ff18:	a00b883a 	mov	r5,r20
 400ff1c:	000f883a 	mov	r7,zero
 400ff20:	01800284 	movi	r6,10
 400ff24:	e009883a 	mov	r4,fp
 400ff28:	1023883a 	mov	r17,r2
 400ff2c:	4011d180 	call	4011d18 <__multadd>
 400ff30:	1029883a 	mov	r20,r2
 400ff34:	b027883a 	mov	r19,r22
 400ff38:	003fc006 	br	400fe3c <__alt_data_end+0xfc00fe3c>
 400ff3c:	9011883a 	mov	r8,r18
 400ff40:	00800e0e 	bge	zero,r2,400ff7c <_dtoa_r+0xf70>
 400ff44:	800b883a 	mov	r5,r16
 400ff48:	01800044 	movi	r6,1
 400ff4c:	e009883a 	mov	r4,fp
 400ff50:	da001715 	stw	r8,92(sp)
 400ff54:	40124840 	call	4012484 <__lshift>
 400ff58:	a80b883a 	mov	r5,r21
 400ff5c:	1009883a 	mov	r4,r2
 400ff60:	1021883a 	mov	r16,r2
 400ff64:	40125cc0 	call	40125cc <__mcmp>
 400ff68:	da001717 	ldw	r8,92(sp)
 400ff6c:	0081960e 	bge	zero,r2,40105c8 <_dtoa_r+0x15bc>
 400ff70:	00800e44 	movi	r2,57
 400ff74:	40817026 	beq	r8,r2,4010538 <_dtoa_r+0x152c>
 400ff78:	ba000c44 	addi	r8,r23,49
 400ff7c:	8825883a 	mov	r18,r17
 400ff80:	9dc00044 	addi	r23,r19,1
 400ff84:	9a000005 	stb	r8,0(r19)
 400ff88:	a023883a 	mov	r17,r20
 400ff8c:	dc000915 	stw	r16,36(sp)
 400ff90:	003f2406 	br	400fc24 <__alt_data_end+0xfc00fc24>
 400ff94:	00800e44 	movi	r2,57
 400ff98:	9011883a 	mov	r8,r18
 400ff9c:	90816626 	beq	r18,r2,4010538 <_dtoa_r+0x152c>
 400ffa0:	05bff516 	blt	zero,r22,400ff78 <__alt_data_end+0xfc00ff78>
 400ffa4:	003ff506 	br	400ff7c <__alt_data_end+0xfc00ff7c>
 400ffa8:	4011d180 	call	4011d18 <__multadd>
 400ffac:	1023883a 	mov	r17,r2
 400ffb0:	1029883a 	mov	r20,r2
 400ffb4:	003fdf06 	br	400ff34 <__alt_data_end+0xfc00ff34>
 400ffb8:	e009883a 	mov	r4,fp
 400ffbc:	4011cf00 	call	4011cf0 <_Bfree>
 400ffc0:	00800044 	movi	r2,1
 400ffc4:	003fbc06 	br	400feb8 <__alt_data_end+0xfc00feb8>
 400ffc8:	a80b883a 	mov	r5,r21
 400ffcc:	8009883a 	mov	r4,r16
 400ffd0:	40125cc0 	call	40125cc <__mcmp>
 400ffd4:	103edb0e 	bge	r2,zero,400fb44 <__alt_data_end+0xfc00fb44>
 400ffd8:	800b883a 	mov	r5,r16
 400ffdc:	000f883a 	mov	r7,zero
 400ffe0:	01800284 	movi	r6,10
 400ffe4:	e009883a 	mov	r4,fp
 400ffe8:	4011d180 	call	4011d18 <__multadd>
 400ffec:	1021883a 	mov	r16,r2
 400fff0:	d8800517 	ldw	r2,20(sp)
 400fff4:	d8c00b17 	ldw	r3,44(sp)
 400fff8:	10bfffc4 	addi	r2,r2,-1
 400fffc:	d8800515 	stw	r2,20(sp)
 4010000:	183f761e 	bne	r3,zero,400fddc <__alt_data_end+0xfc00fddc>
 4010004:	d9000c17 	ldw	r4,48(sp)
 4010008:	0101730e 	bge	zero,r4,40105d8 <_dtoa_r+0x15cc>
 401000c:	d9000615 	stw	r4,24(sp)
 4010010:	003ed006 	br	400fb54 <__alt_data_end+0xfc00fb54>
 4010014:	00800084 	movi	r2,2
 4010018:	3081861e 	bne	r6,r2,4010634 <_dtoa_r+0x1628>
 401001c:	d8000b15 	stw	zero,44(sp)
 4010020:	003f3c06 	br	400fd14 <__alt_data_end+0xfc00fd14>
 4010024:	dc000917 	ldw	r16,36(sp)
 4010028:	003e9206 	br	400fa74 <__alt_data_end+0xfc00fa74>
 401002c:	d9c00317 	ldw	r7,12(sp)
 4010030:	00800084 	movi	r2,2
 4010034:	11fec50e 	bge	r2,r7,400fb4c <__alt_data_end+0xfc00fb4c>
 4010038:	d9000617 	ldw	r4,24(sp)
 401003c:	20013c1e 	bne	r4,zero,4010530 <_dtoa_r+0x1524>
 4010040:	a80b883a 	mov	r5,r21
 4010044:	000f883a 	mov	r7,zero
 4010048:	01800144 	movi	r6,5
 401004c:	e009883a 	mov	r4,fp
 4010050:	4011d180 	call	4011d18 <__multadd>
 4010054:	100b883a 	mov	r5,r2
 4010058:	8009883a 	mov	r4,r16
 401005c:	102b883a 	mov	r21,r2
 4010060:	40125cc0 	call	40125cc <__mcmp>
 4010064:	dc000915 	stw	r16,36(sp)
 4010068:	00bf410e 	bge	zero,r2,400fd70 <__alt_data_end+0xfc00fd70>
 401006c:	d9c00717 	ldw	r7,28(sp)
 4010070:	00800c44 	movi	r2,49
 4010074:	38800005 	stb	r2,0(r7)
 4010078:	d8800517 	ldw	r2,20(sp)
 401007c:	3dc00044 	addi	r23,r7,1
 4010080:	10800044 	addi	r2,r2,1
 4010084:	d8800515 	stw	r2,20(sp)
 4010088:	003f3d06 	br	400fd80 <__alt_data_end+0xfc00fd80>
 401008c:	d9800517 	ldw	r6,20(sp)
 4010090:	d9c00717 	ldw	r7,28(sp)
 4010094:	00800c44 	movi	r2,49
 4010098:	31800044 	addi	r6,r6,1
 401009c:	d9800515 	stw	r6,20(sp)
 40100a0:	38800005 	stb	r2,0(r7)
 40100a4:	003edf06 	br	400fc24 <__alt_data_end+0xfc00fc24>
 40100a8:	d8000b15 	stw	zero,44(sp)
 40100ac:	003c9f06 	br	400f32c <__alt_data_end+0xfc00f32c>
 40100b0:	903e7e1e 	bne	r18,zero,400faac <__alt_data_end+0xfc00faac>
 40100b4:	00800434 	movhi	r2,16
 40100b8:	10bfffc4 	addi	r2,r2,-1
 40100bc:	9884703a 	and	r2,r19,r2
 40100c0:	1000ea1e 	bne	r2,zero,401046c <_dtoa_r+0x1460>
 40100c4:	9cdffc2c 	andhi	r19,r19,32752
 40100c8:	9800e826 	beq	r19,zero,401046c <_dtoa_r+0x1460>
 40100cc:	d9c00817 	ldw	r7,32(sp)
 40100d0:	b5800044 	addi	r22,r22,1
 40100d4:	04c00044 	movi	r19,1
 40100d8:	39c00044 	addi	r7,r7,1
 40100dc:	d9c00815 	stw	r7,32(sp)
 40100e0:	d8800d17 	ldw	r2,52(sp)
 40100e4:	103e721e 	bne	r2,zero,400fab0 <__alt_data_end+0xfc00fab0>
 40100e8:	00800044 	movi	r2,1
 40100ec:	003e7906 	br	400fad4 <__alt_data_end+0xfc00fad4>
 40100f0:	8009883a 	mov	r4,r16
 40100f4:	401883c0 	call	401883c <__floatsidf>
 40100f8:	d9800f17 	ldw	r6,60(sp)
 40100fc:	d9c01017 	ldw	r7,64(sp)
 4010100:	1009883a 	mov	r4,r2
 4010104:	180b883a 	mov	r5,r3
 4010108:	40176540 	call	4017654 <__muldf3>
 401010c:	000d883a 	mov	r6,zero
 4010110:	01d00734 	movhi	r7,16412
 4010114:	1009883a 	mov	r4,r2
 4010118:	180b883a 	mov	r5,r3
 401011c:	40161800 	call	4016180 <__adddf3>
 4010120:	047f3034 	movhi	r17,64704
 4010124:	1021883a 	mov	r16,r2
 4010128:	1c63883a 	add	r17,r3,r17
 401012c:	d9000f17 	ldw	r4,60(sp)
 4010130:	d9401017 	ldw	r5,64(sp)
 4010134:	000d883a 	mov	r6,zero
 4010138:	01d00534 	movhi	r7,16404
 401013c:	4017ec00 	call	4017ec0 <__subdf3>
 4010140:	800d883a 	mov	r6,r16
 4010144:	880f883a 	mov	r7,r17
 4010148:	1009883a 	mov	r4,r2
 401014c:	180b883a 	mov	r5,r3
 4010150:	102b883a 	mov	r21,r2
 4010154:	1829883a 	mov	r20,r3
 4010158:	40174840 	call	4017484 <__gedf2>
 401015c:	00806c16 	blt	zero,r2,4010310 <_dtoa_r+0x1304>
 4010160:	89e0003c 	xorhi	r7,r17,32768
 4010164:	800d883a 	mov	r6,r16
 4010168:	a809883a 	mov	r4,r21
 401016c:	a00b883a 	mov	r5,r20
 4010170:	40175600 	call	4017560 <__ledf2>
 4010174:	103d7e0e 	bge	r2,zero,400f770 <__alt_data_end+0xfc00f770>
 4010178:	002b883a 	mov	r21,zero
 401017c:	0023883a 	mov	r17,zero
 4010180:	003efb06 	br	400fd70 <__alt_data_end+0xfc00fd70>
 4010184:	d8800717 	ldw	r2,28(sp)
 4010188:	003bd006 	br	400f0cc <__alt_data_end+0xfc00f0cc>
 401018c:	d9000a17 	ldw	r4,40(sp)
 4010190:	d9800d17 	ldw	r6,52(sp)
 4010194:	dd400a15 	stw	r21,40(sp)
 4010198:	a905c83a 	sub	r2,r21,r4
 401019c:	308d883a 	add	r6,r6,r2
 40101a0:	d9800d15 	stw	r6,52(sp)
 40101a4:	002b883a 	mov	r21,zero
 40101a8:	003e0606 	br	400f9c4 <__alt_data_end+0xfc00f9c4>
 40101ac:	9023883a 	mov	r17,r18
 40101b0:	9829883a 	mov	r20,r19
 40101b4:	04000084 	movi	r16,2
 40101b8:	003c9206 	br	400f404 <__alt_data_end+0xfc00f404>
 40101bc:	04000044 	movi	r16,1
 40101c0:	dc000c15 	stw	r16,48(sp)
 40101c4:	dc000615 	stw	r16,24(sp)
 40101c8:	dc002215 	stw	r16,136(sp)
 40101cc:	e0001115 	stw	zero,68(fp)
 40101d0:	000b883a 	mov	r5,zero
 40101d4:	003c6906 	br	400f37c <__alt_data_end+0xfc00f37c>
 40101d8:	3021883a 	mov	r16,r6
 40101dc:	003ffb06 	br	40101cc <__alt_data_end+0xfc0101cc>
 40101e0:	1000021e 	bne	r2,zero,40101ec <_dtoa_r+0x11e0>
 40101e4:	4200004c 	andi	r8,r8,1
 40101e8:	403e7d1e 	bne	r8,zero,400fbe0 <__alt_data_end+0xfc00fbe0>
 40101ec:	01000c04 	movi	r4,48
 40101f0:	00000106 	br	40101f8 <_dtoa_r+0x11ec>
 40101f4:	102f883a 	mov	r23,r2
 40101f8:	b8bfffc4 	addi	r2,r23,-1
 40101fc:	10c00007 	ldb	r3,0(r2)
 4010200:	193ffc26 	beq	r3,r4,40101f4 <__alt_data_end+0xfc0101f4>
 4010204:	003e8706 	br	400fc24 <__alt_data_end+0xfc00fc24>
 4010208:	d8800517 	ldw	r2,20(sp)
 401020c:	00a3c83a 	sub	r17,zero,r2
 4010210:	8800a426 	beq	r17,zero,40104a4 <_dtoa_r+0x1498>
 4010214:	888003cc 	andi	r2,r17,15
 4010218:	100490fa 	slli	r2,r2,3
 401021c:	00c100b4 	movhi	r3,1026
 4010220:	18f40104 	addi	r3,r3,-12284
 4010224:	1885883a 	add	r2,r3,r2
 4010228:	11800017 	ldw	r6,0(r2)
 401022c:	11c00117 	ldw	r7,4(r2)
 4010230:	9009883a 	mov	r4,r18
 4010234:	980b883a 	mov	r5,r19
 4010238:	8823d13a 	srai	r17,r17,4
 401023c:	40176540 	call	4017654 <__muldf3>
 4010240:	d8800f15 	stw	r2,60(sp)
 4010244:	d8c01015 	stw	r3,64(sp)
 4010248:	8800e826 	beq	r17,zero,40105ec <_dtoa_r+0x15e0>
 401024c:	050100b4 	movhi	r20,1026
 4010250:	a533f704 	addi	r20,r20,-12324
 4010254:	04000084 	movi	r16,2
 4010258:	8980004c 	andi	r6,r17,1
 401025c:	1009883a 	mov	r4,r2
 4010260:	8823d07a 	srai	r17,r17,1
 4010264:	180b883a 	mov	r5,r3
 4010268:	30000426 	beq	r6,zero,401027c <_dtoa_r+0x1270>
 401026c:	a1800017 	ldw	r6,0(r20)
 4010270:	a1c00117 	ldw	r7,4(r20)
 4010274:	84000044 	addi	r16,r16,1
 4010278:	40176540 	call	4017654 <__muldf3>
 401027c:	a5000204 	addi	r20,r20,8
 4010280:	883ff51e 	bne	r17,zero,4010258 <__alt_data_end+0xfc010258>
 4010284:	d8800f15 	stw	r2,60(sp)
 4010288:	d8c01015 	stw	r3,64(sp)
 401028c:	003c7606 	br	400f468 <__alt_data_end+0xfc00f468>
 4010290:	00c00c04 	movi	r3,48
 4010294:	10c00005 	stb	r3,0(r2)
 4010298:	d8c00517 	ldw	r3,20(sp)
 401029c:	bd3fffc3 	ldbu	r20,-1(r23)
 40102a0:	18c00044 	addi	r3,r3,1
 40102a4:	d8c00515 	stw	r3,20(sp)
 40102a8:	003db906 	br	400f990 <__alt_data_end+0xfc00f990>
 40102ac:	89400117 	ldw	r5,4(r17)
 40102b0:	e009883a 	mov	r4,fp
 40102b4:	4011c480 	call	4011c48 <_Balloc>
 40102b8:	89800417 	ldw	r6,16(r17)
 40102bc:	89400304 	addi	r5,r17,12
 40102c0:	11000304 	addi	r4,r2,12
 40102c4:	31800084 	addi	r6,r6,2
 40102c8:	318d883a 	add	r6,r6,r6
 40102cc:	318d883a 	add	r6,r6,r6
 40102d0:	1027883a 	mov	r19,r2
 40102d4:	400c0380 	call	400c038 <memcpy>
 40102d8:	01800044 	movi	r6,1
 40102dc:	980b883a 	mov	r5,r19
 40102e0:	e009883a 	mov	r4,fp
 40102e4:	40124840 	call	4012484 <__lshift>
 40102e8:	1029883a 	mov	r20,r2
 40102ec:	003ecc06 	br	400fe20 <__alt_data_end+0xfc00fe20>
 40102f0:	00800e44 	movi	r2,57
 40102f4:	90809026 	beq	r18,r2,4010538 <_dtoa_r+0x152c>
 40102f8:	92000044 	addi	r8,r18,1
 40102fc:	003f1f06 	br	400ff7c <__alt_data_end+0xfc00ff7c>
 4010300:	9011883a 	mov	r8,r18
 4010304:	8825883a 	mov	r18,r17
 4010308:	a023883a 	mov	r17,r20
 401030c:	003e2906 	br	400fbb4 <__alt_data_end+0xfc00fbb4>
 4010310:	002b883a 	mov	r21,zero
 4010314:	0023883a 	mov	r17,zero
 4010318:	003f5406 	br	401006c <__alt_data_end+0xfc01006c>
 401031c:	61bfffc4 	addi	r6,r12,-1
 4010320:	300490fa 	slli	r2,r6,3
 4010324:	00c100b4 	movhi	r3,1026
 4010328:	18f40104 	addi	r3,r3,-12284
 401032c:	1885883a 	add	r2,r3,r2
 4010330:	11000017 	ldw	r4,0(r2)
 4010334:	11400117 	ldw	r5,4(r2)
 4010338:	d8800717 	ldw	r2,28(sp)
 401033c:	880f883a 	mov	r7,r17
 4010340:	d9801215 	stw	r6,72(sp)
 4010344:	800d883a 	mov	r6,r16
 4010348:	db001615 	stw	r12,88(sp)
 401034c:	15c00044 	addi	r23,r2,1
 4010350:	40176540 	call	4017654 <__muldf3>
 4010354:	d9401017 	ldw	r5,64(sp)
 4010358:	d9000f17 	ldw	r4,60(sp)
 401035c:	d8c01515 	stw	r3,84(sp)
 4010360:	d8801415 	stw	r2,80(sp)
 4010364:	40187bc0 	call	40187bc <__fixdfsi>
 4010368:	1009883a 	mov	r4,r2
 401036c:	1021883a 	mov	r16,r2
 4010370:	401883c0 	call	401883c <__floatsidf>
 4010374:	d9000f17 	ldw	r4,60(sp)
 4010378:	d9401017 	ldw	r5,64(sp)
 401037c:	100d883a 	mov	r6,r2
 4010380:	180f883a 	mov	r7,r3
 4010384:	4017ec00 	call	4017ec0 <__subdf3>
 4010388:	1829883a 	mov	r20,r3
 401038c:	d8c00717 	ldw	r3,28(sp)
 4010390:	84000c04 	addi	r16,r16,48
 4010394:	1023883a 	mov	r17,r2
 4010398:	1c000005 	stb	r16,0(r3)
 401039c:	db001617 	ldw	r12,88(sp)
 40103a0:	00800044 	movi	r2,1
 40103a4:	60802226 	beq	r12,r2,4010430 <_dtoa_r+0x1424>
 40103a8:	d9c00717 	ldw	r7,28(sp)
 40103ac:	8805883a 	mov	r2,r17
 40103b0:	b82b883a 	mov	r21,r23
 40103b4:	3b19883a 	add	r12,r7,r12
 40103b8:	6023883a 	mov	r17,r12
 40103bc:	a007883a 	mov	r3,r20
 40103c0:	dc800f15 	stw	r18,60(sp)
 40103c4:	000d883a 	mov	r6,zero
 40103c8:	01d00934 	movhi	r7,16420
 40103cc:	1009883a 	mov	r4,r2
 40103d0:	180b883a 	mov	r5,r3
 40103d4:	40176540 	call	4017654 <__muldf3>
 40103d8:	180b883a 	mov	r5,r3
 40103dc:	1009883a 	mov	r4,r2
 40103e0:	1829883a 	mov	r20,r3
 40103e4:	1025883a 	mov	r18,r2
 40103e8:	40187bc0 	call	40187bc <__fixdfsi>
 40103ec:	1009883a 	mov	r4,r2
 40103f0:	1021883a 	mov	r16,r2
 40103f4:	401883c0 	call	401883c <__floatsidf>
 40103f8:	100d883a 	mov	r6,r2
 40103fc:	180f883a 	mov	r7,r3
 4010400:	9009883a 	mov	r4,r18
 4010404:	a00b883a 	mov	r5,r20
 4010408:	84000c04 	addi	r16,r16,48
 401040c:	4017ec00 	call	4017ec0 <__subdf3>
 4010410:	ad400044 	addi	r21,r21,1
 4010414:	ac3fffc5 	stb	r16,-1(r21)
 4010418:	ac7fea1e 	bne	r21,r17,40103c4 <__alt_data_end+0xfc0103c4>
 401041c:	1023883a 	mov	r17,r2
 4010420:	d8801217 	ldw	r2,72(sp)
 4010424:	dc800f17 	ldw	r18,60(sp)
 4010428:	1829883a 	mov	r20,r3
 401042c:	b8af883a 	add	r23,r23,r2
 4010430:	d9001417 	ldw	r4,80(sp)
 4010434:	d9401517 	ldw	r5,84(sp)
 4010438:	000d883a 	mov	r6,zero
 401043c:	01cff834 	movhi	r7,16352
 4010440:	40161800 	call	4016180 <__adddf3>
 4010444:	880d883a 	mov	r6,r17
 4010448:	a00f883a 	mov	r7,r20
 401044c:	1009883a 	mov	r4,r2
 4010450:	180b883a 	mov	r5,r3
 4010454:	40175600 	call	4017560 <__ledf2>
 4010458:	10003e0e 	bge	r2,zero,4010554 <_dtoa_r+0x1548>
 401045c:	d9001317 	ldw	r4,76(sp)
 4010460:	bd3fffc3 	ldbu	r20,-1(r23)
 4010464:	d9000515 	stw	r4,20(sp)
 4010468:	003d3b06 	br	400f958 <__alt_data_end+0xfc00f958>
 401046c:	0027883a 	mov	r19,zero
 4010470:	003f1b06 	br	40100e0 <__alt_data_end+0xfc0100e0>
 4010474:	d8800817 	ldw	r2,32(sp)
 4010478:	11e9c83a 	sub	r20,r2,r7
 401047c:	0005883a 	mov	r2,zero
 4010480:	003d5406 	br	400f9d4 <__alt_data_end+0xfc00f9d4>
 4010484:	00800044 	movi	r2,1
 4010488:	003dc706 	br	400fba8 <__alt_data_end+0xfc00fba8>
 401048c:	d8c00217 	ldw	r3,8(sp)
 4010490:	00800d84 	movi	r2,54
 4010494:	dd400a17 	ldw	r21,40(sp)
 4010498:	10c5c83a 	sub	r2,r2,r3
 401049c:	dd000817 	ldw	r20,32(sp)
 40104a0:	003d4c06 	br	400f9d4 <__alt_data_end+0xfc00f9d4>
 40104a4:	dc800f15 	stw	r18,60(sp)
 40104a8:	dcc01015 	stw	r19,64(sp)
 40104ac:	04000084 	movi	r16,2
 40104b0:	003bed06 	br	400f468 <__alt_data_end+0xfc00f468>
 40104b4:	d9000617 	ldw	r4,24(sp)
 40104b8:	203f0d26 	beq	r4,zero,40100f0 <__alt_data_end+0xfc0100f0>
 40104bc:	d9800c17 	ldw	r6,48(sp)
 40104c0:	01bcab0e 	bge	zero,r6,400f770 <__alt_data_end+0xfc00f770>
 40104c4:	d9401017 	ldw	r5,64(sp)
 40104c8:	d9000f17 	ldw	r4,60(sp)
 40104cc:	000d883a 	mov	r6,zero
 40104d0:	01d00934 	movhi	r7,16420
 40104d4:	40176540 	call	4017654 <__muldf3>
 40104d8:	81000044 	addi	r4,r16,1
 40104dc:	d8800f15 	stw	r2,60(sp)
 40104e0:	d8c01015 	stw	r3,64(sp)
 40104e4:	401883c0 	call	401883c <__floatsidf>
 40104e8:	d9800f17 	ldw	r6,60(sp)
 40104ec:	d9c01017 	ldw	r7,64(sp)
 40104f0:	1009883a 	mov	r4,r2
 40104f4:	180b883a 	mov	r5,r3
 40104f8:	40176540 	call	4017654 <__muldf3>
 40104fc:	01d00734 	movhi	r7,16412
 4010500:	000d883a 	mov	r6,zero
 4010504:	1009883a 	mov	r4,r2
 4010508:	180b883a 	mov	r5,r3
 401050c:	40161800 	call	4016180 <__adddf3>
 4010510:	d9c00517 	ldw	r7,20(sp)
 4010514:	047f3034 	movhi	r17,64704
 4010518:	1021883a 	mov	r16,r2
 401051c:	39ffffc4 	addi	r7,r7,-1
 4010520:	d9c01315 	stw	r7,76(sp)
 4010524:	1c63883a 	add	r17,r3,r17
 4010528:	db000c17 	ldw	r12,48(sp)
 401052c:	003bea06 	br	400f4d8 <__alt_data_end+0xfc00f4d8>
 4010530:	dc000915 	stw	r16,36(sp)
 4010534:	003e0e06 	br	400fd70 <__alt_data_end+0xfc00fd70>
 4010538:	01000e44 	movi	r4,57
 401053c:	8825883a 	mov	r18,r17
 4010540:	9dc00044 	addi	r23,r19,1
 4010544:	99000005 	stb	r4,0(r19)
 4010548:	a023883a 	mov	r17,r20
 401054c:	dc000915 	stw	r16,36(sp)
 4010550:	003da406 	br	400fbe4 <__alt_data_end+0xfc00fbe4>
 4010554:	d9801417 	ldw	r6,80(sp)
 4010558:	d9c01517 	ldw	r7,84(sp)
 401055c:	0009883a 	mov	r4,zero
 4010560:	014ff834 	movhi	r5,16352
 4010564:	4017ec00 	call	4017ec0 <__subdf3>
 4010568:	880d883a 	mov	r6,r17
 401056c:	a00f883a 	mov	r7,r20
 4010570:	1009883a 	mov	r4,r2
 4010574:	180b883a 	mov	r5,r3
 4010578:	40174840 	call	4017484 <__gedf2>
 401057c:	00bc7c0e 	bge	zero,r2,400f770 <__alt_data_end+0xfc00f770>
 4010580:	01000c04 	movi	r4,48
 4010584:	00000106 	br	401058c <_dtoa_r+0x1580>
 4010588:	102f883a 	mov	r23,r2
 401058c:	b8bfffc4 	addi	r2,r23,-1
 4010590:	10c00007 	ldb	r3,0(r2)
 4010594:	193ffc26 	beq	r3,r4,4010588 <__alt_data_end+0xfc010588>
 4010598:	d9801317 	ldw	r6,76(sp)
 401059c:	d9800515 	stw	r6,20(sp)
 40105a0:	003c4406 	br	400f6b4 <__alt_data_end+0xfc00f6b4>
 40105a4:	d9801317 	ldw	r6,76(sp)
 40105a8:	d9800515 	stw	r6,20(sp)
 40105ac:	003cea06 	br	400f958 <__alt_data_end+0xfc00f958>
 40105b0:	dd800f17 	ldw	r22,60(sp)
 40105b4:	dcc01017 	ldw	r19,64(sp)
 40105b8:	dc801217 	ldw	r18,72(sp)
 40105bc:	003c6c06 	br	400f770 <__alt_data_end+0xfc00f770>
 40105c0:	903e031e 	bne	r18,zero,400fdd0 <__alt_data_end+0xfc00fdd0>
 40105c4:	003ebb06 	br	40100b4 <__alt_data_end+0xfc0100b4>
 40105c8:	103e6c1e 	bne	r2,zero,400ff7c <__alt_data_end+0xfc00ff7c>
 40105cc:	4080004c 	andi	r2,r8,1
 40105d0:	103e6a26 	beq	r2,zero,400ff7c <__alt_data_end+0xfc00ff7c>
 40105d4:	003e6606 	br	400ff70 <__alt_data_end+0xfc00ff70>
 40105d8:	d8c00317 	ldw	r3,12(sp)
 40105dc:	00800084 	movi	r2,2
 40105e0:	10c02916 	blt	r2,r3,4010688 <_dtoa_r+0x167c>
 40105e4:	d9000c17 	ldw	r4,48(sp)
 40105e8:	003e8806 	br	401000c <__alt_data_end+0xfc01000c>
 40105ec:	04000084 	movi	r16,2
 40105f0:	003b9d06 	br	400f468 <__alt_data_end+0xfc00f468>
 40105f4:	d9001317 	ldw	r4,76(sp)
 40105f8:	d9000515 	stw	r4,20(sp)
 40105fc:	003cd606 	br	400f958 <__alt_data_end+0xfc00f958>
 4010600:	d8801317 	ldw	r2,76(sp)
 4010604:	d8800515 	stw	r2,20(sp)
 4010608:	003c2a06 	br	400f6b4 <__alt_data_end+0xfc00f6b4>
 401060c:	d9800317 	ldw	r6,12(sp)
 4010610:	00800084 	movi	r2,2
 4010614:	11801516 	blt	r2,r6,401066c <_dtoa_r+0x1660>
 4010618:	d9c00c17 	ldw	r7,48(sp)
 401061c:	d9c00615 	stw	r7,24(sp)
 4010620:	003df706 	br	400fe00 <__alt_data_end+0xfc00fe00>
 4010624:	193d3926 	beq	r3,r4,400fb0c <__alt_data_end+0xfc00fb0c>
 4010628:	00c00f04 	movi	r3,60
 401062c:	1885c83a 	sub	r2,r3,r2
 4010630:	003ddf06 	br	400fdb0 <__alt_data_end+0xfc00fdb0>
 4010634:	e009883a 	mov	r4,fp
 4010638:	e0001115 	stw	zero,68(fp)
 401063c:	000b883a 	mov	r5,zero
 4010640:	4011c480 	call	4011c48 <_Balloc>
 4010644:	d8800715 	stw	r2,28(sp)
 4010648:	d8c00717 	ldw	r3,28(sp)
 401064c:	00bfffc4 	movi	r2,-1
 4010650:	01000044 	movi	r4,1
 4010654:	d8800c15 	stw	r2,48(sp)
 4010658:	e0c01015 	stw	r3,64(fp)
 401065c:	d9000b15 	stw	r4,44(sp)
 4010660:	d8800615 	stw	r2,24(sp)
 4010664:	d8002215 	stw	zero,136(sp)
 4010668:	003c4106 	br	400f770 <__alt_data_end+0xfc00f770>
 401066c:	d8c00c17 	ldw	r3,48(sp)
 4010670:	d8c00615 	stw	r3,24(sp)
 4010674:	003e7006 	br	4010038 <__alt_data_end+0xfc010038>
 4010678:	04400044 	movi	r17,1
 401067c:	003b2006 	br	400f300 <__alt_data_end+0xfc00f300>
 4010680:	000b883a 	mov	r5,zero
 4010684:	003b3d06 	br	400f37c <__alt_data_end+0xfc00f37c>
 4010688:	d8800c17 	ldw	r2,48(sp)
 401068c:	d8800615 	stw	r2,24(sp)
 4010690:	003e6906 	br	4010038 <__alt_data_end+0xfc010038>

04010694 <__sflush_r>:
 4010694:	2880030b 	ldhu	r2,12(r5)
 4010698:	defffb04 	addi	sp,sp,-20
 401069c:	dcc00315 	stw	r19,12(sp)
 40106a0:	dc400115 	stw	r17,4(sp)
 40106a4:	dfc00415 	stw	ra,16(sp)
 40106a8:	dc800215 	stw	r18,8(sp)
 40106ac:	dc000015 	stw	r16,0(sp)
 40106b0:	10c0020c 	andi	r3,r2,8
 40106b4:	2823883a 	mov	r17,r5
 40106b8:	2027883a 	mov	r19,r4
 40106bc:	1800311e 	bne	r3,zero,4010784 <__sflush_r+0xf0>
 40106c0:	28c00117 	ldw	r3,4(r5)
 40106c4:	10820014 	ori	r2,r2,2048
 40106c8:	2880030d 	sth	r2,12(r5)
 40106cc:	00c04b0e 	bge	zero,r3,40107fc <__sflush_r+0x168>
 40106d0:	8a000a17 	ldw	r8,40(r17)
 40106d4:	40002326 	beq	r8,zero,4010764 <__sflush_r+0xd0>
 40106d8:	9c000017 	ldw	r16,0(r19)
 40106dc:	10c4000c 	andi	r3,r2,4096
 40106e0:	98000015 	stw	zero,0(r19)
 40106e4:	18004826 	beq	r3,zero,4010808 <__sflush_r+0x174>
 40106e8:	89801417 	ldw	r6,80(r17)
 40106ec:	10c0010c 	andi	r3,r2,4
 40106f0:	18000626 	beq	r3,zero,401070c <__sflush_r+0x78>
 40106f4:	88c00117 	ldw	r3,4(r17)
 40106f8:	88800c17 	ldw	r2,48(r17)
 40106fc:	30cdc83a 	sub	r6,r6,r3
 4010700:	10000226 	beq	r2,zero,401070c <__sflush_r+0x78>
 4010704:	88800f17 	ldw	r2,60(r17)
 4010708:	308dc83a 	sub	r6,r6,r2
 401070c:	89400717 	ldw	r5,28(r17)
 4010710:	000f883a 	mov	r7,zero
 4010714:	9809883a 	mov	r4,r19
 4010718:	403ee83a 	callr	r8
 401071c:	00ffffc4 	movi	r3,-1
 4010720:	10c04426 	beq	r2,r3,4010834 <__sflush_r+0x1a0>
 4010724:	88c0030b 	ldhu	r3,12(r17)
 4010728:	89000417 	ldw	r4,16(r17)
 401072c:	88000115 	stw	zero,4(r17)
 4010730:	197dffcc 	andi	r5,r3,63487
 4010734:	8940030d 	sth	r5,12(r17)
 4010738:	89000015 	stw	r4,0(r17)
 401073c:	18c4000c 	andi	r3,r3,4096
 4010740:	18002c1e 	bne	r3,zero,40107f4 <__sflush_r+0x160>
 4010744:	89400c17 	ldw	r5,48(r17)
 4010748:	9c000015 	stw	r16,0(r19)
 401074c:	28000526 	beq	r5,zero,4010764 <__sflush_r+0xd0>
 4010750:	88801004 	addi	r2,r17,64
 4010754:	28800226 	beq	r5,r2,4010760 <__sflush_r+0xcc>
 4010758:	9809883a 	mov	r4,r19
 401075c:	4010e100 	call	4010e10 <_free_r>
 4010760:	88000c15 	stw	zero,48(r17)
 4010764:	0005883a 	mov	r2,zero
 4010768:	dfc00417 	ldw	ra,16(sp)
 401076c:	dcc00317 	ldw	r19,12(sp)
 4010770:	dc800217 	ldw	r18,8(sp)
 4010774:	dc400117 	ldw	r17,4(sp)
 4010778:	dc000017 	ldw	r16,0(sp)
 401077c:	dec00504 	addi	sp,sp,20
 4010780:	f800283a 	ret
 4010784:	2c800417 	ldw	r18,16(r5)
 4010788:	903ff626 	beq	r18,zero,4010764 <__alt_data_end+0xfc010764>
 401078c:	2c000017 	ldw	r16,0(r5)
 4010790:	108000cc 	andi	r2,r2,3
 4010794:	2c800015 	stw	r18,0(r5)
 4010798:	84a1c83a 	sub	r16,r16,r18
 401079c:	1000131e 	bne	r2,zero,40107ec <__sflush_r+0x158>
 40107a0:	28800517 	ldw	r2,20(r5)
 40107a4:	88800215 	stw	r2,8(r17)
 40107a8:	04000316 	blt	zero,r16,40107b8 <__sflush_r+0x124>
 40107ac:	003fed06 	br	4010764 <__alt_data_end+0xfc010764>
 40107b0:	90a5883a 	add	r18,r18,r2
 40107b4:	043feb0e 	bge	zero,r16,4010764 <__alt_data_end+0xfc010764>
 40107b8:	88800917 	ldw	r2,36(r17)
 40107bc:	89400717 	ldw	r5,28(r17)
 40107c0:	800f883a 	mov	r7,r16
 40107c4:	900d883a 	mov	r6,r18
 40107c8:	9809883a 	mov	r4,r19
 40107cc:	103ee83a 	callr	r2
 40107d0:	80a1c83a 	sub	r16,r16,r2
 40107d4:	00bff616 	blt	zero,r2,40107b0 <__alt_data_end+0xfc0107b0>
 40107d8:	88c0030b 	ldhu	r3,12(r17)
 40107dc:	00bfffc4 	movi	r2,-1
 40107e0:	18c01014 	ori	r3,r3,64
 40107e4:	88c0030d 	sth	r3,12(r17)
 40107e8:	003fdf06 	br	4010768 <__alt_data_end+0xfc010768>
 40107ec:	0005883a 	mov	r2,zero
 40107f0:	003fec06 	br	40107a4 <__alt_data_end+0xfc0107a4>
 40107f4:	88801415 	stw	r2,80(r17)
 40107f8:	003fd206 	br	4010744 <__alt_data_end+0xfc010744>
 40107fc:	28c00f17 	ldw	r3,60(r5)
 4010800:	00ffb316 	blt	zero,r3,40106d0 <__alt_data_end+0xfc0106d0>
 4010804:	003fd706 	br	4010764 <__alt_data_end+0xfc010764>
 4010808:	89400717 	ldw	r5,28(r17)
 401080c:	000d883a 	mov	r6,zero
 4010810:	01c00044 	movi	r7,1
 4010814:	9809883a 	mov	r4,r19
 4010818:	403ee83a 	callr	r8
 401081c:	100d883a 	mov	r6,r2
 4010820:	00bfffc4 	movi	r2,-1
 4010824:	30801426 	beq	r6,r2,4010878 <__sflush_r+0x1e4>
 4010828:	8880030b 	ldhu	r2,12(r17)
 401082c:	8a000a17 	ldw	r8,40(r17)
 4010830:	003fae06 	br	40106ec <__alt_data_end+0xfc0106ec>
 4010834:	98c00017 	ldw	r3,0(r19)
 4010838:	183fba26 	beq	r3,zero,4010724 <__alt_data_end+0xfc010724>
 401083c:	01000744 	movi	r4,29
 4010840:	19000626 	beq	r3,r4,401085c <__sflush_r+0x1c8>
 4010844:	01000584 	movi	r4,22
 4010848:	19000426 	beq	r3,r4,401085c <__sflush_r+0x1c8>
 401084c:	88c0030b 	ldhu	r3,12(r17)
 4010850:	18c01014 	ori	r3,r3,64
 4010854:	88c0030d 	sth	r3,12(r17)
 4010858:	003fc306 	br	4010768 <__alt_data_end+0xfc010768>
 401085c:	8880030b 	ldhu	r2,12(r17)
 4010860:	88c00417 	ldw	r3,16(r17)
 4010864:	88000115 	stw	zero,4(r17)
 4010868:	10bdffcc 	andi	r2,r2,63487
 401086c:	8880030d 	sth	r2,12(r17)
 4010870:	88c00015 	stw	r3,0(r17)
 4010874:	003fb306 	br	4010744 <__alt_data_end+0xfc010744>
 4010878:	98800017 	ldw	r2,0(r19)
 401087c:	103fea26 	beq	r2,zero,4010828 <__alt_data_end+0xfc010828>
 4010880:	00c00744 	movi	r3,29
 4010884:	10c00226 	beq	r2,r3,4010890 <__sflush_r+0x1fc>
 4010888:	00c00584 	movi	r3,22
 401088c:	10c0031e 	bne	r2,r3,401089c <__sflush_r+0x208>
 4010890:	9c000015 	stw	r16,0(r19)
 4010894:	0005883a 	mov	r2,zero
 4010898:	003fb306 	br	4010768 <__alt_data_end+0xfc010768>
 401089c:	88c0030b 	ldhu	r3,12(r17)
 40108a0:	3005883a 	mov	r2,r6
 40108a4:	18c01014 	ori	r3,r3,64
 40108a8:	88c0030d 	sth	r3,12(r17)
 40108ac:	003fae06 	br	4010768 <__alt_data_end+0xfc010768>

040108b0 <_fflush_r>:
 40108b0:	defffd04 	addi	sp,sp,-12
 40108b4:	dc000115 	stw	r16,4(sp)
 40108b8:	dfc00215 	stw	ra,8(sp)
 40108bc:	2021883a 	mov	r16,r4
 40108c0:	20000226 	beq	r4,zero,40108cc <_fflush_r+0x1c>
 40108c4:	20800e17 	ldw	r2,56(r4)
 40108c8:	10000c26 	beq	r2,zero,40108fc <_fflush_r+0x4c>
 40108cc:	2880030f 	ldh	r2,12(r5)
 40108d0:	1000051e 	bne	r2,zero,40108e8 <_fflush_r+0x38>
 40108d4:	0005883a 	mov	r2,zero
 40108d8:	dfc00217 	ldw	ra,8(sp)
 40108dc:	dc000117 	ldw	r16,4(sp)
 40108e0:	dec00304 	addi	sp,sp,12
 40108e4:	f800283a 	ret
 40108e8:	8009883a 	mov	r4,r16
 40108ec:	dfc00217 	ldw	ra,8(sp)
 40108f0:	dc000117 	ldw	r16,4(sp)
 40108f4:	dec00304 	addi	sp,sp,12
 40108f8:	40106941 	jmpi	4010694 <__sflush_r>
 40108fc:	d9400015 	stw	r5,0(sp)
 4010900:	4010c9c0 	call	4010c9c <__sinit>
 4010904:	d9400017 	ldw	r5,0(sp)
 4010908:	003ff006 	br	40108cc <__alt_data_end+0xfc0108cc>

0401090c <fflush>:
 401090c:	20000526 	beq	r4,zero,4010924 <fflush+0x18>
 4010910:	008100f4 	movhi	r2,1027
 4010914:	10a71904 	addi	r2,r2,-25500
 4010918:	200b883a 	mov	r5,r4
 401091c:	11000017 	ldw	r4,0(r2)
 4010920:	40108b01 	jmpi	40108b0 <_fflush_r>
 4010924:	008100f4 	movhi	r2,1027
 4010928:	10a71804 	addi	r2,r2,-25504
 401092c:	11000017 	ldw	r4,0(r2)
 4010930:	01410074 	movhi	r5,1025
 4010934:	29422c04 	addi	r5,r5,2224
 4010938:	40116ac1 	jmpi	40116ac <_fwalk_reent>

0401093c <__fp_unlock>:
 401093c:	0005883a 	mov	r2,zero
 4010940:	f800283a 	ret

04010944 <_cleanup_r>:
 4010944:	01410074 	movhi	r5,1025
 4010948:	2953d704 	addi	r5,r5,20316
 401094c:	40116ac1 	jmpi	40116ac <_fwalk_reent>

04010950 <__sinit.part.1>:
 4010950:	defff704 	addi	sp,sp,-36
 4010954:	00c10074 	movhi	r3,1025
 4010958:	dfc00815 	stw	ra,32(sp)
 401095c:	ddc00715 	stw	r23,28(sp)
 4010960:	dd800615 	stw	r22,24(sp)
 4010964:	dd400515 	stw	r21,20(sp)
 4010968:	dd000415 	stw	r20,16(sp)
 401096c:	dcc00315 	stw	r19,12(sp)
 4010970:	dc800215 	stw	r18,8(sp)
 4010974:	dc400115 	stw	r17,4(sp)
 4010978:	dc000015 	stw	r16,0(sp)
 401097c:	18c25104 	addi	r3,r3,2372
 4010980:	24000117 	ldw	r16,4(r4)
 4010984:	20c00f15 	stw	r3,60(r4)
 4010988:	2080bb04 	addi	r2,r4,748
 401098c:	00c000c4 	movi	r3,3
 4010990:	20c0b915 	stw	r3,740(r4)
 4010994:	2080ba15 	stw	r2,744(r4)
 4010998:	2000b815 	stw	zero,736(r4)
 401099c:	05c00204 	movi	r23,8
 40109a0:	00800104 	movi	r2,4
 40109a4:	2025883a 	mov	r18,r4
 40109a8:	b80d883a 	mov	r6,r23
 40109ac:	81001704 	addi	r4,r16,92
 40109b0:	000b883a 	mov	r5,zero
 40109b4:	80000015 	stw	zero,0(r16)
 40109b8:	80000115 	stw	zero,4(r16)
 40109bc:	80000215 	stw	zero,8(r16)
 40109c0:	8080030d 	sth	r2,12(r16)
 40109c4:	80001915 	stw	zero,100(r16)
 40109c8:	8000038d 	sth	zero,14(r16)
 40109cc:	80000415 	stw	zero,16(r16)
 40109d0:	80000515 	stw	zero,20(r16)
 40109d4:	80000615 	stw	zero,24(r16)
 40109d8:	400c1800 	call	400c180 <memset>
 40109dc:	05810074 	movhi	r22,1025
 40109e0:	94400217 	ldw	r17,8(r18)
 40109e4:	05410074 	movhi	r21,1025
 40109e8:	05010074 	movhi	r20,1025
 40109ec:	04c10074 	movhi	r19,1025
 40109f0:	b58d1004 	addi	r22,r22,13376
 40109f4:	ad4d2704 	addi	r21,r21,13468
 40109f8:	a50d4604 	addi	r20,r20,13592
 40109fc:	9ccd5d04 	addi	r19,r19,13684
 4010a00:	85800815 	stw	r22,32(r16)
 4010a04:	85400915 	stw	r21,36(r16)
 4010a08:	85000a15 	stw	r20,40(r16)
 4010a0c:	84c00b15 	stw	r19,44(r16)
 4010a10:	84000715 	stw	r16,28(r16)
 4010a14:	00800284 	movi	r2,10
 4010a18:	8880030d 	sth	r2,12(r17)
 4010a1c:	00800044 	movi	r2,1
 4010a20:	b80d883a 	mov	r6,r23
 4010a24:	89001704 	addi	r4,r17,92
 4010a28:	000b883a 	mov	r5,zero
 4010a2c:	88000015 	stw	zero,0(r17)
 4010a30:	88000115 	stw	zero,4(r17)
 4010a34:	88000215 	stw	zero,8(r17)
 4010a38:	88001915 	stw	zero,100(r17)
 4010a3c:	8880038d 	sth	r2,14(r17)
 4010a40:	88000415 	stw	zero,16(r17)
 4010a44:	88000515 	stw	zero,20(r17)
 4010a48:	88000615 	stw	zero,24(r17)
 4010a4c:	400c1800 	call	400c180 <memset>
 4010a50:	94000317 	ldw	r16,12(r18)
 4010a54:	00800484 	movi	r2,18
 4010a58:	8c400715 	stw	r17,28(r17)
 4010a5c:	8d800815 	stw	r22,32(r17)
 4010a60:	8d400915 	stw	r21,36(r17)
 4010a64:	8d000a15 	stw	r20,40(r17)
 4010a68:	8cc00b15 	stw	r19,44(r17)
 4010a6c:	8080030d 	sth	r2,12(r16)
 4010a70:	00800084 	movi	r2,2
 4010a74:	80000015 	stw	zero,0(r16)
 4010a78:	80000115 	stw	zero,4(r16)
 4010a7c:	80000215 	stw	zero,8(r16)
 4010a80:	80001915 	stw	zero,100(r16)
 4010a84:	8080038d 	sth	r2,14(r16)
 4010a88:	80000415 	stw	zero,16(r16)
 4010a8c:	80000515 	stw	zero,20(r16)
 4010a90:	80000615 	stw	zero,24(r16)
 4010a94:	b80d883a 	mov	r6,r23
 4010a98:	000b883a 	mov	r5,zero
 4010a9c:	81001704 	addi	r4,r16,92
 4010aa0:	400c1800 	call	400c180 <memset>
 4010aa4:	00800044 	movi	r2,1
 4010aa8:	84000715 	stw	r16,28(r16)
 4010aac:	85800815 	stw	r22,32(r16)
 4010ab0:	85400915 	stw	r21,36(r16)
 4010ab4:	85000a15 	stw	r20,40(r16)
 4010ab8:	84c00b15 	stw	r19,44(r16)
 4010abc:	90800e15 	stw	r2,56(r18)
 4010ac0:	dfc00817 	ldw	ra,32(sp)
 4010ac4:	ddc00717 	ldw	r23,28(sp)
 4010ac8:	dd800617 	ldw	r22,24(sp)
 4010acc:	dd400517 	ldw	r21,20(sp)
 4010ad0:	dd000417 	ldw	r20,16(sp)
 4010ad4:	dcc00317 	ldw	r19,12(sp)
 4010ad8:	dc800217 	ldw	r18,8(sp)
 4010adc:	dc400117 	ldw	r17,4(sp)
 4010ae0:	dc000017 	ldw	r16,0(sp)
 4010ae4:	dec00904 	addi	sp,sp,36
 4010ae8:	f800283a 	ret

04010aec <__fp_lock>:
 4010aec:	0005883a 	mov	r2,zero
 4010af0:	f800283a 	ret

04010af4 <__sfmoreglue>:
 4010af4:	defffc04 	addi	sp,sp,-16
 4010af8:	dc800215 	stw	r18,8(sp)
 4010afc:	2825883a 	mov	r18,r5
 4010b00:	dc000015 	stw	r16,0(sp)
 4010b04:	01401a04 	movi	r5,104
 4010b08:	2021883a 	mov	r16,r4
 4010b0c:	913fffc4 	addi	r4,r18,-1
 4010b10:	dfc00315 	stw	ra,12(sp)
 4010b14:	dc400115 	stw	r17,4(sp)
 4010b18:	400b1dc0 	call	400b1dc <__mulsi3>
 4010b1c:	8009883a 	mov	r4,r16
 4010b20:	11401d04 	addi	r5,r2,116
 4010b24:	1023883a 	mov	r17,r2
 4010b28:	400b7b00 	call	400b7b0 <_malloc_r>
 4010b2c:	1021883a 	mov	r16,r2
 4010b30:	10000726 	beq	r2,zero,4010b50 <__sfmoreglue+0x5c>
 4010b34:	11000304 	addi	r4,r2,12
 4010b38:	10000015 	stw	zero,0(r2)
 4010b3c:	14800115 	stw	r18,4(r2)
 4010b40:	11000215 	stw	r4,8(r2)
 4010b44:	89801a04 	addi	r6,r17,104
 4010b48:	000b883a 	mov	r5,zero
 4010b4c:	400c1800 	call	400c180 <memset>
 4010b50:	8005883a 	mov	r2,r16
 4010b54:	dfc00317 	ldw	ra,12(sp)
 4010b58:	dc800217 	ldw	r18,8(sp)
 4010b5c:	dc400117 	ldw	r17,4(sp)
 4010b60:	dc000017 	ldw	r16,0(sp)
 4010b64:	dec00404 	addi	sp,sp,16
 4010b68:	f800283a 	ret

04010b6c <__sfp>:
 4010b6c:	defffb04 	addi	sp,sp,-20
 4010b70:	dc000015 	stw	r16,0(sp)
 4010b74:	040100f4 	movhi	r16,1027
 4010b78:	84271804 	addi	r16,r16,-25504
 4010b7c:	dcc00315 	stw	r19,12(sp)
 4010b80:	2027883a 	mov	r19,r4
 4010b84:	81000017 	ldw	r4,0(r16)
 4010b88:	dfc00415 	stw	ra,16(sp)
 4010b8c:	dc800215 	stw	r18,8(sp)
 4010b90:	20800e17 	ldw	r2,56(r4)
 4010b94:	dc400115 	stw	r17,4(sp)
 4010b98:	1000021e 	bne	r2,zero,4010ba4 <__sfp+0x38>
 4010b9c:	40109500 	call	4010950 <__sinit.part.1>
 4010ba0:	81000017 	ldw	r4,0(r16)
 4010ba4:	2480b804 	addi	r18,r4,736
 4010ba8:	047fffc4 	movi	r17,-1
 4010bac:	91000117 	ldw	r4,4(r18)
 4010bb0:	94000217 	ldw	r16,8(r18)
 4010bb4:	213fffc4 	addi	r4,r4,-1
 4010bb8:	20000a16 	blt	r4,zero,4010be4 <__sfp+0x78>
 4010bbc:	8080030f 	ldh	r2,12(r16)
 4010bc0:	10000c26 	beq	r2,zero,4010bf4 <__sfp+0x88>
 4010bc4:	80c01d04 	addi	r3,r16,116
 4010bc8:	00000206 	br	4010bd4 <__sfp+0x68>
 4010bcc:	18bfe60f 	ldh	r2,-104(r3)
 4010bd0:	10000826 	beq	r2,zero,4010bf4 <__sfp+0x88>
 4010bd4:	213fffc4 	addi	r4,r4,-1
 4010bd8:	1c3ffd04 	addi	r16,r3,-12
 4010bdc:	18c01a04 	addi	r3,r3,104
 4010be0:	247ffa1e 	bne	r4,r17,4010bcc <__alt_data_end+0xfc010bcc>
 4010be4:	90800017 	ldw	r2,0(r18)
 4010be8:	10001d26 	beq	r2,zero,4010c60 <__sfp+0xf4>
 4010bec:	1025883a 	mov	r18,r2
 4010bf0:	003fee06 	br	4010bac <__alt_data_end+0xfc010bac>
 4010bf4:	00bfffc4 	movi	r2,-1
 4010bf8:	8080038d 	sth	r2,14(r16)
 4010bfc:	00800044 	movi	r2,1
 4010c00:	8080030d 	sth	r2,12(r16)
 4010c04:	80001915 	stw	zero,100(r16)
 4010c08:	80000015 	stw	zero,0(r16)
 4010c0c:	80000215 	stw	zero,8(r16)
 4010c10:	80000115 	stw	zero,4(r16)
 4010c14:	80000415 	stw	zero,16(r16)
 4010c18:	80000515 	stw	zero,20(r16)
 4010c1c:	80000615 	stw	zero,24(r16)
 4010c20:	01800204 	movi	r6,8
 4010c24:	000b883a 	mov	r5,zero
 4010c28:	81001704 	addi	r4,r16,92
 4010c2c:	400c1800 	call	400c180 <memset>
 4010c30:	8005883a 	mov	r2,r16
 4010c34:	80000c15 	stw	zero,48(r16)
 4010c38:	80000d15 	stw	zero,52(r16)
 4010c3c:	80001115 	stw	zero,68(r16)
 4010c40:	80001215 	stw	zero,72(r16)
 4010c44:	dfc00417 	ldw	ra,16(sp)
 4010c48:	dcc00317 	ldw	r19,12(sp)
 4010c4c:	dc800217 	ldw	r18,8(sp)
 4010c50:	dc400117 	ldw	r17,4(sp)
 4010c54:	dc000017 	ldw	r16,0(sp)
 4010c58:	dec00504 	addi	sp,sp,20
 4010c5c:	f800283a 	ret
 4010c60:	01400104 	movi	r5,4
 4010c64:	9809883a 	mov	r4,r19
 4010c68:	4010af40 	call	4010af4 <__sfmoreglue>
 4010c6c:	90800015 	stw	r2,0(r18)
 4010c70:	103fde1e 	bne	r2,zero,4010bec <__alt_data_end+0xfc010bec>
 4010c74:	00800304 	movi	r2,12
 4010c78:	98800015 	stw	r2,0(r19)
 4010c7c:	0005883a 	mov	r2,zero
 4010c80:	003ff006 	br	4010c44 <__alt_data_end+0xfc010c44>

04010c84 <_cleanup>:
 4010c84:	008100f4 	movhi	r2,1027
 4010c88:	10a71804 	addi	r2,r2,-25504
 4010c8c:	11000017 	ldw	r4,0(r2)
 4010c90:	01410074 	movhi	r5,1025
 4010c94:	2953d704 	addi	r5,r5,20316
 4010c98:	40116ac1 	jmpi	40116ac <_fwalk_reent>

04010c9c <__sinit>:
 4010c9c:	20800e17 	ldw	r2,56(r4)
 4010ca0:	10000126 	beq	r2,zero,4010ca8 <__sinit+0xc>
 4010ca4:	f800283a 	ret
 4010ca8:	40109501 	jmpi	4010950 <__sinit.part.1>

04010cac <__sfp_lock_acquire>:
 4010cac:	f800283a 	ret

04010cb0 <__sfp_lock_release>:
 4010cb0:	f800283a 	ret

04010cb4 <__sinit_lock_acquire>:
 4010cb4:	f800283a 	ret

04010cb8 <__sinit_lock_release>:
 4010cb8:	f800283a 	ret

04010cbc <__fp_lock_all>:
 4010cbc:	008100f4 	movhi	r2,1027
 4010cc0:	10a71904 	addi	r2,r2,-25500
 4010cc4:	11000017 	ldw	r4,0(r2)
 4010cc8:	01410074 	movhi	r5,1025
 4010ccc:	2942bb04 	addi	r5,r5,2796
 4010cd0:	40115e81 	jmpi	40115e8 <_fwalk>

04010cd4 <__fp_unlock_all>:
 4010cd4:	008100f4 	movhi	r2,1027
 4010cd8:	10a71904 	addi	r2,r2,-25500
 4010cdc:	11000017 	ldw	r4,0(r2)
 4010ce0:	01410074 	movhi	r5,1025
 4010ce4:	29424f04 	addi	r5,r5,2364
 4010ce8:	40115e81 	jmpi	40115e8 <_fwalk>

04010cec <_malloc_trim_r>:
 4010cec:	defffb04 	addi	sp,sp,-20
 4010cf0:	dcc00315 	stw	r19,12(sp)
 4010cf4:	04c100f4 	movhi	r19,1027
 4010cf8:	dc800215 	stw	r18,8(sp)
 4010cfc:	dc400115 	stw	r17,4(sp)
 4010d00:	dc000015 	stw	r16,0(sp)
 4010d04:	dfc00415 	stw	ra,16(sp)
 4010d08:	2821883a 	mov	r16,r5
 4010d0c:	9ce15d04 	addi	r19,r19,-31372
 4010d10:	2025883a 	mov	r18,r4
 4010d14:	40191800 	call	4019180 <__malloc_lock>
 4010d18:	98800217 	ldw	r2,8(r19)
 4010d1c:	14400117 	ldw	r17,4(r2)
 4010d20:	00bfff04 	movi	r2,-4
 4010d24:	88a2703a 	and	r17,r17,r2
 4010d28:	8c21c83a 	sub	r16,r17,r16
 4010d2c:	8403fbc4 	addi	r16,r16,4079
 4010d30:	8020d33a 	srli	r16,r16,12
 4010d34:	0083ffc4 	movi	r2,4095
 4010d38:	843fffc4 	addi	r16,r16,-1
 4010d3c:	8020933a 	slli	r16,r16,12
 4010d40:	1400060e 	bge	r2,r16,4010d5c <_malloc_trim_r+0x70>
 4010d44:	000b883a 	mov	r5,zero
 4010d48:	9009883a 	mov	r4,r18
 4010d4c:	400c4080 	call	400c408 <_sbrk_r>
 4010d50:	98c00217 	ldw	r3,8(r19)
 4010d54:	1c47883a 	add	r3,r3,r17
 4010d58:	10c00a26 	beq	r2,r3,4010d84 <_malloc_trim_r+0x98>
 4010d5c:	9009883a 	mov	r4,r18
 4010d60:	40191a40 	call	40191a4 <__malloc_unlock>
 4010d64:	0005883a 	mov	r2,zero
 4010d68:	dfc00417 	ldw	ra,16(sp)
 4010d6c:	dcc00317 	ldw	r19,12(sp)
 4010d70:	dc800217 	ldw	r18,8(sp)
 4010d74:	dc400117 	ldw	r17,4(sp)
 4010d78:	dc000017 	ldw	r16,0(sp)
 4010d7c:	dec00504 	addi	sp,sp,20
 4010d80:	f800283a 	ret
 4010d84:	040bc83a 	sub	r5,zero,r16
 4010d88:	9009883a 	mov	r4,r18
 4010d8c:	400c4080 	call	400c408 <_sbrk_r>
 4010d90:	00ffffc4 	movi	r3,-1
 4010d94:	10c00d26 	beq	r2,r3,4010dcc <_malloc_trim_r+0xe0>
 4010d98:	00c100f4 	movhi	r3,1027
 4010d9c:	18da1c04 	addi	r3,r3,26736
 4010da0:	18800017 	ldw	r2,0(r3)
 4010da4:	99000217 	ldw	r4,8(r19)
 4010da8:	8c23c83a 	sub	r17,r17,r16
 4010dac:	8c400054 	ori	r17,r17,1
 4010db0:	1421c83a 	sub	r16,r2,r16
 4010db4:	24400115 	stw	r17,4(r4)
 4010db8:	9009883a 	mov	r4,r18
 4010dbc:	1c000015 	stw	r16,0(r3)
 4010dc0:	40191a40 	call	40191a4 <__malloc_unlock>
 4010dc4:	00800044 	movi	r2,1
 4010dc8:	003fe706 	br	4010d68 <__alt_data_end+0xfc010d68>
 4010dcc:	000b883a 	mov	r5,zero
 4010dd0:	9009883a 	mov	r4,r18
 4010dd4:	400c4080 	call	400c408 <_sbrk_r>
 4010dd8:	99000217 	ldw	r4,8(r19)
 4010ddc:	014003c4 	movi	r5,15
 4010de0:	1107c83a 	sub	r3,r2,r4
 4010de4:	28ffdd0e 	bge	r5,r3,4010d5c <__alt_data_end+0xfc010d5c>
 4010de8:	014100f4 	movhi	r5,1027
 4010dec:	29671a04 	addi	r5,r5,-25496
 4010df0:	29400017 	ldw	r5,0(r5)
 4010df4:	18c00054 	ori	r3,r3,1
 4010df8:	20c00115 	stw	r3,4(r4)
 4010dfc:	00c100f4 	movhi	r3,1027
 4010e00:	1145c83a 	sub	r2,r2,r5
 4010e04:	18da1c04 	addi	r3,r3,26736
 4010e08:	18800015 	stw	r2,0(r3)
 4010e0c:	003fd306 	br	4010d5c <__alt_data_end+0xfc010d5c>

04010e10 <_free_r>:
 4010e10:	28004126 	beq	r5,zero,4010f18 <_free_r+0x108>
 4010e14:	defffd04 	addi	sp,sp,-12
 4010e18:	dc400115 	stw	r17,4(sp)
 4010e1c:	dc000015 	stw	r16,0(sp)
 4010e20:	2023883a 	mov	r17,r4
 4010e24:	2821883a 	mov	r16,r5
 4010e28:	dfc00215 	stw	ra,8(sp)
 4010e2c:	40191800 	call	4019180 <__malloc_lock>
 4010e30:	81ffff17 	ldw	r7,-4(r16)
 4010e34:	00bfff84 	movi	r2,-2
 4010e38:	010100f4 	movhi	r4,1027
 4010e3c:	81bffe04 	addi	r6,r16,-8
 4010e40:	3884703a 	and	r2,r7,r2
 4010e44:	21215d04 	addi	r4,r4,-31372
 4010e48:	308b883a 	add	r5,r6,r2
 4010e4c:	2a400117 	ldw	r9,4(r5)
 4010e50:	22000217 	ldw	r8,8(r4)
 4010e54:	00ffff04 	movi	r3,-4
 4010e58:	48c6703a 	and	r3,r9,r3
 4010e5c:	2a005726 	beq	r5,r8,4010fbc <_free_r+0x1ac>
 4010e60:	28c00115 	stw	r3,4(r5)
 4010e64:	39c0004c 	andi	r7,r7,1
 4010e68:	3800091e 	bne	r7,zero,4010e90 <_free_r+0x80>
 4010e6c:	823ffe17 	ldw	r8,-8(r16)
 4010e70:	22400204 	addi	r9,r4,8
 4010e74:	320dc83a 	sub	r6,r6,r8
 4010e78:	31c00217 	ldw	r7,8(r6)
 4010e7c:	1205883a 	add	r2,r2,r8
 4010e80:	3a406526 	beq	r7,r9,4011018 <_free_r+0x208>
 4010e84:	32000317 	ldw	r8,12(r6)
 4010e88:	3a000315 	stw	r8,12(r7)
 4010e8c:	41c00215 	stw	r7,8(r8)
 4010e90:	28cf883a 	add	r7,r5,r3
 4010e94:	39c00117 	ldw	r7,4(r7)
 4010e98:	39c0004c 	andi	r7,r7,1
 4010e9c:	38003a26 	beq	r7,zero,4010f88 <_free_r+0x178>
 4010ea0:	10c00054 	ori	r3,r2,1
 4010ea4:	30c00115 	stw	r3,4(r6)
 4010ea8:	3087883a 	add	r3,r6,r2
 4010eac:	18800015 	stw	r2,0(r3)
 4010eb0:	00c07fc4 	movi	r3,511
 4010eb4:	18801936 	bltu	r3,r2,4010f1c <_free_r+0x10c>
 4010eb8:	1004d0fa 	srli	r2,r2,3
 4010ebc:	01c00044 	movi	r7,1
 4010ec0:	21400117 	ldw	r5,4(r4)
 4010ec4:	10c00044 	addi	r3,r2,1
 4010ec8:	18c7883a 	add	r3,r3,r3
 4010ecc:	1005d0ba 	srai	r2,r2,2
 4010ed0:	18c7883a 	add	r3,r3,r3
 4010ed4:	18c7883a 	add	r3,r3,r3
 4010ed8:	1907883a 	add	r3,r3,r4
 4010edc:	3884983a 	sll	r2,r7,r2
 4010ee0:	19c00017 	ldw	r7,0(r3)
 4010ee4:	1a3ffe04 	addi	r8,r3,-8
 4010ee8:	1144b03a 	or	r2,r2,r5
 4010eec:	32000315 	stw	r8,12(r6)
 4010ef0:	31c00215 	stw	r7,8(r6)
 4010ef4:	20800115 	stw	r2,4(r4)
 4010ef8:	19800015 	stw	r6,0(r3)
 4010efc:	39800315 	stw	r6,12(r7)
 4010f00:	8809883a 	mov	r4,r17
 4010f04:	dfc00217 	ldw	ra,8(sp)
 4010f08:	dc400117 	ldw	r17,4(sp)
 4010f0c:	dc000017 	ldw	r16,0(sp)
 4010f10:	dec00304 	addi	sp,sp,12
 4010f14:	40191a41 	jmpi	40191a4 <__malloc_unlock>
 4010f18:	f800283a 	ret
 4010f1c:	100ad27a 	srli	r5,r2,9
 4010f20:	00c00104 	movi	r3,4
 4010f24:	19404a36 	bltu	r3,r5,4011050 <_free_r+0x240>
 4010f28:	100ad1ba 	srli	r5,r2,6
 4010f2c:	28c00e44 	addi	r3,r5,57
 4010f30:	18c7883a 	add	r3,r3,r3
 4010f34:	29400e04 	addi	r5,r5,56
 4010f38:	18c7883a 	add	r3,r3,r3
 4010f3c:	18c7883a 	add	r3,r3,r3
 4010f40:	1909883a 	add	r4,r3,r4
 4010f44:	20c00017 	ldw	r3,0(r4)
 4010f48:	01c100f4 	movhi	r7,1027
 4010f4c:	213ffe04 	addi	r4,r4,-8
 4010f50:	39e15d04 	addi	r7,r7,-31372
 4010f54:	20c04426 	beq	r4,r3,4011068 <_free_r+0x258>
 4010f58:	01ffff04 	movi	r7,-4
 4010f5c:	19400117 	ldw	r5,4(r3)
 4010f60:	29ca703a 	and	r5,r5,r7
 4010f64:	1140022e 	bgeu	r2,r5,4010f70 <_free_r+0x160>
 4010f68:	18c00217 	ldw	r3,8(r3)
 4010f6c:	20fffb1e 	bne	r4,r3,4010f5c <__alt_data_end+0xfc010f5c>
 4010f70:	19000317 	ldw	r4,12(r3)
 4010f74:	31000315 	stw	r4,12(r6)
 4010f78:	30c00215 	stw	r3,8(r6)
 4010f7c:	21800215 	stw	r6,8(r4)
 4010f80:	19800315 	stw	r6,12(r3)
 4010f84:	003fde06 	br	4010f00 <__alt_data_end+0xfc010f00>
 4010f88:	29c00217 	ldw	r7,8(r5)
 4010f8c:	10c5883a 	add	r2,r2,r3
 4010f90:	00c100f4 	movhi	r3,1027
 4010f94:	18e15f04 	addi	r3,r3,-31364
 4010f98:	38c03b26 	beq	r7,r3,4011088 <_free_r+0x278>
 4010f9c:	2a000317 	ldw	r8,12(r5)
 4010fa0:	11400054 	ori	r5,r2,1
 4010fa4:	3087883a 	add	r3,r6,r2
 4010fa8:	3a000315 	stw	r8,12(r7)
 4010fac:	41c00215 	stw	r7,8(r8)
 4010fb0:	31400115 	stw	r5,4(r6)
 4010fb4:	18800015 	stw	r2,0(r3)
 4010fb8:	003fbd06 	br	4010eb0 <__alt_data_end+0xfc010eb0>
 4010fbc:	39c0004c 	andi	r7,r7,1
 4010fc0:	10c5883a 	add	r2,r2,r3
 4010fc4:	3800071e 	bne	r7,zero,4010fe4 <_free_r+0x1d4>
 4010fc8:	81fffe17 	ldw	r7,-8(r16)
 4010fcc:	31cdc83a 	sub	r6,r6,r7
 4010fd0:	30c00317 	ldw	r3,12(r6)
 4010fd4:	31400217 	ldw	r5,8(r6)
 4010fd8:	11c5883a 	add	r2,r2,r7
 4010fdc:	28c00315 	stw	r3,12(r5)
 4010fe0:	19400215 	stw	r5,8(r3)
 4010fe4:	10c00054 	ori	r3,r2,1
 4010fe8:	30c00115 	stw	r3,4(r6)
 4010fec:	00c100f4 	movhi	r3,1027
 4010ff0:	18e71b04 	addi	r3,r3,-25492
 4010ff4:	18c00017 	ldw	r3,0(r3)
 4010ff8:	21800215 	stw	r6,8(r4)
 4010ffc:	10ffc036 	bltu	r2,r3,4010f00 <__alt_data_end+0xfc010f00>
 4011000:	008100f4 	movhi	r2,1027
 4011004:	1099e104 	addi	r2,r2,26500
 4011008:	11400017 	ldw	r5,0(r2)
 401100c:	8809883a 	mov	r4,r17
 4011010:	4010cec0 	call	4010cec <_malloc_trim_r>
 4011014:	003fba06 	br	4010f00 <__alt_data_end+0xfc010f00>
 4011018:	28c9883a 	add	r4,r5,r3
 401101c:	21000117 	ldw	r4,4(r4)
 4011020:	2100004c 	andi	r4,r4,1
 4011024:	2000391e 	bne	r4,zero,401110c <_free_r+0x2fc>
 4011028:	29c00217 	ldw	r7,8(r5)
 401102c:	29000317 	ldw	r4,12(r5)
 4011030:	1885883a 	add	r2,r3,r2
 4011034:	10c00054 	ori	r3,r2,1
 4011038:	39000315 	stw	r4,12(r7)
 401103c:	21c00215 	stw	r7,8(r4)
 4011040:	30c00115 	stw	r3,4(r6)
 4011044:	308d883a 	add	r6,r6,r2
 4011048:	30800015 	stw	r2,0(r6)
 401104c:	003fac06 	br	4010f00 <__alt_data_end+0xfc010f00>
 4011050:	00c00504 	movi	r3,20
 4011054:	19401536 	bltu	r3,r5,40110ac <_free_r+0x29c>
 4011058:	28c01704 	addi	r3,r5,92
 401105c:	18c7883a 	add	r3,r3,r3
 4011060:	294016c4 	addi	r5,r5,91
 4011064:	003fb406 	br	4010f38 <__alt_data_end+0xfc010f38>
 4011068:	280bd0ba 	srai	r5,r5,2
 401106c:	00c00044 	movi	r3,1
 4011070:	38800117 	ldw	r2,4(r7)
 4011074:	194a983a 	sll	r5,r3,r5
 4011078:	2007883a 	mov	r3,r4
 401107c:	2884b03a 	or	r2,r5,r2
 4011080:	38800115 	stw	r2,4(r7)
 4011084:	003fbb06 	br	4010f74 <__alt_data_end+0xfc010f74>
 4011088:	21800515 	stw	r6,20(r4)
 401108c:	21800415 	stw	r6,16(r4)
 4011090:	10c00054 	ori	r3,r2,1
 4011094:	31c00315 	stw	r7,12(r6)
 4011098:	31c00215 	stw	r7,8(r6)
 401109c:	30c00115 	stw	r3,4(r6)
 40110a0:	308d883a 	add	r6,r6,r2
 40110a4:	30800015 	stw	r2,0(r6)
 40110a8:	003f9506 	br	4010f00 <__alt_data_end+0xfc010f00>
 40110ac:	00c01504 	movi	r3,84
 40110b0:	19400536 	bltu	r3,r5,40110c8 <_free_r+0x2b8>
 40110b4:	100ad33a 	srli	r5,r2,12
 40110b8:	28c01bc4 	addi	r3,r5,111
 40110bc:	18c7883a 	add	r3,r3,r3
 40110c0:	29401b84 	addi	r5,r5,110
 40110c4:	003f9c06 	br	4010f38 <__alt_data_end+0xfc010f38>
 40110c8:	00c05504 	movi	r3,340
 40110cc:	19400536 	bltu	r3,r5,40110e4 <_free_r+0x2d4>
 40110d0:	100ad3fa 	srli	r5,r2,15
 40110d4:	28c01e04 	addi	r3,r5,120
 40110d8:	18c7883a 	add	r3,r3,r3
 40110dc:	29401dc4 	addi	r5,r5,119
 40110e0:	003f9506 	br	4010f38 <__alt_data_end+0xfc010f38>
 40110e4:	00c15504 	movi	r3,1364
 40110e8:	19400536 	bltu	r3,r5,4011100 <_free_r+0x2f0>
 40110ec:	100ad4ba 	srli	r5,r2,18
 40110f0:	28c01f44 	addi	r3,r5,125
 40110f4:	18c7883a 	add	r3,r3,r3
 40110f8:	29401f04 	addi	r5,r5,124
 40110fc:	003f8e06 	br	4010f38 <__alt_data_end+0xfc010f38>
 4011100:	00c03f84 	movi	r3,254
 4011104:	01401f84 	movi	r5,126
 4011108:	003f8b06 	br	4010f38 <__alt_data_end+0xfc010f38>
 401110c:	10c00054 	ori	r3,r2,1
 4011110:	30c00115 	stw	r3,4(r6)
 4011114:	308d883a 	add	r6,r6,r2
 4011118:	30800015 	stw	r2,0(r6)
 401111c:	003f7806 	br	4010f00 <__alt_data_end+0xfc010f00>

04011120 <__sfvwrite_r>:
 4011120:	30800217 	ldw	r2,8(r6)
 4011124:	10006726 	beq	r2,zero,40112c4 <__sfvwrite_r+0x1a4>
 4011128:	28c0030b 	ldhu	r3,12(r5)
 401112c:	defff404 	addi	sp,sp,-48
 4011130:	dd400715 	stw	r21,28(sp)
 4011134:	dd000615 	stw	r20,24(sp)
 4011138:	dc000215 	stw	r16,8(sp)
 401113c:	dfc00b15 	stw	ra,44(sp)
 4011140:	df000a15 	stw	fp,40(sp)
 4011144:	ddc00915 	stw	r23,36(sp)
 4011148:	dd800815 	stw	r22,32(sp)
 401114c:	dcc00515 	stw	r19,20(sp)
 4011150:	dc800415 	stw	r18,16(sp)
 4011154:	dc400315 	stw	r17,12(sp)
 4011158:	1880020c 	andi	r2,r3,8
 401115c:	2821883a 	mov	r16,r5
 4011160:	202b883a 	mov	r21,r4
 4011164:	3029883a 	mov	r20,r6
 4011168:	10002726 	beq	r2,zero,4011208 <__sfvwrite_r+0xe8>
 401116c:	28800417 	ldw	r2,16(r5)
 4011170:	10002526 	beq	r2,zero,4011208 <__sfvwrite_r+0xe8>
 4011174:	1880008c 	andi	r2,r3,2
 4011178:	a4400017 	ldw	r17,0(r20)
 401117c:	10002a26 	beq	r2,zero,4011228 <__sfvwrite_r+0x108>
 4011180:	05a00034 	movhi	r22,32768
 4011184:	0027883a 	mov	r19,zero
 4011188:	0025883a 	mov	r18,zero
 401118c:	b5bf0004 	addi	r22,r22,-1024
 4011190:	980d883a 	mov	r6,r19
 4011194:	a809883a 	mov	r4,r21
 4011198:	90004626 	beq	r18,zero,40112b4 <__sfvwrite_r+0x194>
 401119c:	900f883a 	mov	r7,r18
 40111a0:	b480022e 	bgeu	r22,r18,40111ac <__sfvwrite_r+0x8c>
 40111a4:	01e00034 	movhi	r7,32768
 40111a8:	39ff0004 	addi	r7,r7,-1024
 40111ac:	80800917 	ldw	r2,36(r16)
 40111b0:	81400717 	ldw	r5,28(r16)
 40111b4:	103ee83a 	callr	r2
 40111b8:	00805a0e 	bge	zero,r2,4011324 <__sfvwrite_r+0x204>
 40111bc:	a0c00217 	ldw	r3,8(r20)
 40111c0:	98a7883a 	add	r19,r19,r2
 40111c4:	90a5c83a 	sub	r18,r18,r2
 40111c8:	1885c83a 	sub	r2,r3,r2
 40111cc:	a0800215 	stw	r2,8(r20)
 40111d0:	103fef1e 	bne	r2,zero,4011190 <__alt_data_end+0xfc011190>
 40111d4:	0005883a 	mov	r2,zero
 40111d8:	dfc00b17 	ldw	ra,44(sp)
 40111dc:	df000a17 	ldw	fp,40(sp)
 40111e0:	ddc00917 	ldw	r23,36(sp)
 40111e4:	dd800817 	ldw	r22,32(sp)
 40111e8:	dd400717 	ldw	r21,28(sp)
 40111ec:	dd000617 	ldw	r20,24(sp)
 40111f0:	dcc00517 	ldw	r19,20(sp)
 40111f4:	dc800417 	ldw	r18,16(sp)
 40111f8:	dc400317 	ldw	r17,12(sp)
 40111fc:	dc000217 	ldw	r16,8(sp)
 4011200:	dec00c04 	addi	sp,sp,48
 4011204:	f800283a 	ret
 4011208:	800b883a 	mov	r5,r16
 401120c:	a809883a 	mov	r4,r21
 4011210:	400ec900 	call	400ec90 <__swsetup_r>
 4011214:	1000ee1e 	bne	r2,zero,40115d0 <__sfvwrite_r+0x4b0>
 4011218:	80c0030b 	ldhu	r3,12(r16)
 401121c:	a4400017 	ldw	r17,0(r20)
 4011220:	1880008c 	andi	r2,r3,2
 4011224:	103fd61e 	bne	r2,zero,4011180 <__alt_data_end+0xfc011180>
 4011228:	1880004c 	andi	r2,r3,1
 401122c:	1000421e 	bne	r2,zero,4011338 <__sfvwrite_r+0x218>
 4011230:	0039883a 	mov	fp,zero
 4011234:	0025883a 	mov	r18,zero
 4011238:	90001a26 	beq	r18,zero,40112a4 <__sfvwrite_r+0x184>
 401123c:	1880800c 	andi	r2,r3,512
 4011240:	84c00217 	ldw	r19,8(r16)
 4011244:	10002126 	beq	r2,zero,40112cc <__sfvwrite_r+0x1ac>
 4011248:	982f883a 	mov	r23,r19
 401124c:	94c09636 	bltu	r18,r19,40114a8 <__sfvwrite_r+0x388>
 4011250:	1881200c 	andi	r2,r3,1152
 4011254:	1000a11e 	bne	r2,zero,40114dc <__sfvwrite_r+0x3bc>
 4011258:	81000017 	ldw	r4,0(r16)
 401125c:	b80d883a 	mov	r6,r23
 4011260:	e00b883a 	mov	r5,fp
 4011264:	4011aec0 	call	4011aec <memmove>
 4011268:	80c00217 	ldw	r3,8(r16)
 401126c:	81000017 	ldw	r4,0(r16)
 4011270:	9005883a 	mov	r2,r18
 4011274:	1ce7c83a 	sub	r19,r3,r19
 4011278:	25cf883a 	add	r7,r4,r23
 401127c:	84c00215 	stw	r19,8(r16)
 4011280:	81c00015 	stw	r7,0(r16)
 4011284:	a0c00217 	ldw	r3,8(r20)
 4011288:	e0b9883a 	add	fp,fp,r2
 401128c:	90a5c83a 	sub	r18,r18,r2
 4011290:	18a7c83a 	sub	r19,r3,r2
 4011294:	a4c00215 	stw	r19,8(r20)
 4011298:	983fce26 	beq	r19,zero,40111d4 <__alt_data_end+0xfc0111d4>
 401129c:	80c0030b 	ldhu	r3,12(r16)
 40112a0:	903fe61e 	bne	r18,zero,401123c <__alt_data_end+0xfc01123c>
 40112a4:	8f000017 	ldw	fp,0(r17)
 40112a8:	8c800117 	ldw	r18,4(r17)
 40112ac:	8c400204 	addi	r17,r17,8
 40112b0:	003fe106 	br	4011238 <__alt_data_end+0xfc011238>
 40112b4:	8cc00017 	ldw	r19,0(r17)
 40112b8:	8c800117 	ldw	r18,4(r17)
 40112bc:	8c400204 	addi	r17,r17,8
 40112c0:	003fb306 	br	4011190 <__alt_data_end+0xfc011190>
 40112c4:	0005883a 	mov	r2,zero
 40112c8:	f800283a 	ret
 40112cc:	81000017 	ldw	r4,0(r16)
 40112d0:	80800417 	ldw	r2,16(r16)
 40112d4:	11005a36 	bltu	r2,r4,4011440 <__sfvwrite_r+0x320>
 40112d8:	85c00517 	ldw	r23,20(r16)
 40112dc:	95c05836 	bltu	r18,r23,4011440 <__sfvwrite_r+0x320>
 40112e0:	00a00034 	movhi	r2,32768
 40112e4:	10bfffc4 	addi	r2,r2,-1
 40112e8:	9009883a 	mov	r4,r18
 40112ec:	1480012e 	bgeu	r2,r18,40112f4 <__sfvwrite_r+0x1d4>
 40112f0:	1009883a 	mov	r4,r2
 40112f4:	b80b883a 	mov	r5,r23
 40112f8:	400b0280 	call	400b028 <__divsi3>
 40112fc:	b80b883a 	mov	r5,r23
 4011300:	1009883a 	mov	r4,r2
 4011304:	400b1dc0 	call	400b1dc <__mulsi3>
 4011308:	81400717 	ldw	r5,28(r16)
 401130c:	80c00917 	ldw	r3,36(r16)
 4011310:	100f883a 	mov	r7,r2
 4011314:	e00d883a 	mov	r6,fp
 4011318:	a809883a 	mov	r4,r21
 401131c:	183ee83a 	callr	r3
 4011320:	00bfd816 	blt	zero,r2,4011284 <__alt_data_end+0xfc011284>
 4011324:	8080030b 	ldhu	r2,12(r16)
 4011328:	10801014 	ori	r2,r2,64
 401132c:	8080030d 	sth	r2,12(r16)
 4011330:	00bfffc4 	movi	r2,-1
 4011334:	003fa806 	br	40111d8 <__alt_data_end+0xfc0111d8>
 4011338:	0027883a 	mov	r19,zero
 401133c:	0011883a 	mov	r8,zero
 4011340:	0039883a 	mov	fp,zero
 4011344:	0025883a 	mov	r18,zero
 4011348:	90001f26 	beq	r18,zero,40113c8 <__sfvwrite_r+0x2a8>
 401134c:	40005a26 	beq	r8,zero,40114b8 <__sfvwrite_r+0x398>
 4011350:	982d883a 	mov	r22,r19
 4011354:	94c0012e 	bgeu	r18,r19,401135c <__sfvwrite_r+0x23c>
 4011358:	902d883a 	mov	r22,r18
 401135c:	81000017 	ldw	r4,0(r16)
 4011360:	80800417 	ldw	r2,16(r16)
 4011364:	b02f883a 	mov	r23,r22
 4011368:	81c00517 	ldw	r7,20(r16)
 401136c:	1100032e 	bgeu	r2,r4,401137c <__sfvwrite_r+0x25c>
 4011370:	80c00217 	ldw	r3,8(r16)
 4011374:	38c7883a 	add	r3,r7,r3
 4011378:	1d801816 	blt	r3,r22,40113dc <__sfvwrite_r+0x2bc>
 401137c:	b1c03e16 	blt	r22,r7,4011478 <__sfvwrite_r+0x358>
 4011380:	80800917 	ldw	r2,36(r16)
 4011384:	81400717 	ldw	r5,28(r16)
 4011388:	e00d883a 	mov	r6,fp
 401138c:	da000115 	stw	r8,4(sp)
 4011390:	a809883a 	mov	r4,r21
 4011394:	103ee83a 	callr	r2
 4011398:	102f883a 	mov	r23,r2
 401139c:	da000117 	ldw	r8,4(sp)
 40113a0:	00bfe00e 	bge	zero,r2,4011324 <__alt_data_end+0xfc011324>
 40113a4:	9de7c83a 	sub	r19,r19,r23
 40113a8:	98001f26 	beq	r19,zero,4011428 <__sfvwrite_r+0x308>
 40113ac:	a0800217 	ldw	r2,8(r20)
 40113b0:	e5f9883a 	add	fp,fp,r23
 40113b4:	95e5c83a 	sub	r18,r18,r23
 40113b8:	15efc83a 	sub	r23,r2,r23
 40113bc:	a5c00215 	stw	r23,8(r20)
 40113c0:	b83f8426 	beq	r23,zero,40111d4 <__alt_data_end+0xfc0111d4>
 40113c4:	903fe11e 	bne	r18,zero,401134c <__alt_data_end+0xfc01134c>
 40113c8:	8f000017 	ldw	fp,0(r17)
 40113cc:	8c800117 	ldw	r18,4(r17)
 40113d0:	0011883a 	mov	r8,zero
 40113d4:	8c400204 	addi	r17,r17,8
 40113d8:	003fdb06 	br	4011348 <__alt_data_end+0xfc011348>
 40113dc:	180d883a 	mov	r6,r3
 40113e0:	e00b883a 	mov	r5,fp
 40113e4:	da000115 	stw	r8,4(sp)
 40113e8:	d8c00015 	stw	r3,0(sp)
 40113ec:	4011aec0 	call	4011aec <memmove>
 40113f0:	d8c00017 	ldw	r3,0(sp)
 40113f4:	80800017 	ldw	r2,0(r16)
 40113f8:	800b883a 	mov	r5,r16
 40113fc:	a809883a 	mov	r4,r21
 4011400:	10c5883a 	add	r2,r2,r3
 4011404:	80800015 	stw	r2,0(r16)
 4011408:	d8c00015 	stw	r3,0(sp)
 401140c:	40108b00 	call	40108b0 <_fflush_r>
 4011410:	d8c00017 	ldw	r3,0(sp)
 4011414:	da000117 	ldw	r8,4(sp)
 4011418:	103fc21e 	bne	r2,zero,4011324 <__alt_data_end+0xfc011324>
 401141c:	182f883a 	mov	r23,r3
 4011420:	9de7c83a 	sub	r19,r19,r23
 4011424:	983fe11e 	bne	r19,zero,40113ac <__alt_data_end+0xfc0113ac>
 4011428:	800b883a 	mov	r5,r16
 401142c:	a809883a 	mov	r4,r21
 4011430:	40108b00 	call	40108b0 <_fflush_r>
 4011434:	103fbb1e 	bne	r2,zero,4011324 <__alt_data_end+0xfc011324>
 4011438:	0011883a 	mov	r8,zero
 401143c:	003fdb06 	br	40113ac <__alt_data_end+0xfc0113ac>
 4011440:	94c0012e 	bgeu	r18,r19,4011448 <__sfvwrite_r+0x328>
 4011444:	9027883a 	mov	r19,r18
 4011448:	980d883a 	mov	r6,r19
 401144c:	e00b883a 	mov	r5,fp
 4011450:	4011aec0 	call	4011aec <memmove>
 4011454:	80800217 	ldw	r2,8(r16)
 4011458:	80c00017 	ldw	r3,0(r16)
 401145c:	14c5c83a 	sub	r2,r2,r19
 4011460:	1cc7883a 	add	r3,r3,r19
 4011464:	80800215 	stw	r2,8(r16)
 4011468:	80c00015 	stw	r3,0(r16)
 401146c:	10004326 	beq	r2,zero,401157c <__sfvwrite_r+0x45c>
 4011470:	9805883a 	mov	r2,r19
 4011474:	003f8306 	br	4011284 <__alt_data_end+0xfc011284>
 4011478:	b00d883a 	mov	r6,r22
 401147c:	e00b883a 	mov	r5,fp
 4011480:	da000115 	stw	r8,4(sp)
 4011484:	4011aec0 	call	4011aec <memmove>
 4011488:	80800217 	ldw	r2,8(r16)
 401148c:	80c00017 	ldw	r3,0(r16)
 4011490:	da000117 	ldw	r8,4(sp)
 4011494:	1585c83a 	sub	r2,r2,r22
 4011498:	1dad883a 	add	r22,r3,r22
 401149c:	80800215 	stw	r2,8(r16)
 40114a0:	85800015 	stw	r22,0(r16)
 40114a4:	003fbf06 	br	40113a4 <__alt_data_end+0xfc0113a4>
 40114a8:	81000017 	ldw	r4,0(r16)
 40114ac:	9027883a 	mov	r19,r18
 40114b0:	902f883a 	mov	r23,r18
 40114b4:	003f6906 	br	401125c <__alt_data_end+0xfc01125c>
 40114b8:	900d883a 	mov	r6,r18
 40114bc:	01400284 	movi	r5,10
 40114c0:	e009883a 	mov	r4,fp
 40114c4:	4011a080 	call	4011a08 <memchr>
 40114c8:	10003e26 	beq	r2,zero,40115c4 <__sfvwrite_r+0x4a4>
 40114cc:	10800044 	addi	r2,r2,1
 40114d0:	1727c83a 	sub	r19,r2,fp
 40114d4:	02000044 	movi	r8,1
 40114d8:	003f9d06 	br	4011350 <__alt_data_end+0xfc011350>
 40114dc:	80800517 	ldw	r2,20(r16)
 40114e0:	81400417 	ldw	r5,16(r16)
 40114e4:	81c00017 	ldw	r7,0(r16)
 40114e8:	10a7883a 	add	r19,r2,r2
 40114ec:	9885883a 	add	r2,r19,r2
 40114f0:	1026d7fa 	srli	r19,r2,31
 40114f4:	396dc83a 	sub	r22,r7,r5
 40114f8:	b1000044 	addi	r4,r22,1
 40114fc:	9885883a 	add	r2,r19,r2
 4011500:	1027d07a 	srai	r19,r2,1
 4011504:	2485883a 	add	r2,r4,r18
 4011508:	980d883a 	mov	r6,r19
 401150c:	9880022e 	bgeu	r19,r2,4011518 <__sfvwrite_r+0x3f8>
 4011510:	1027883a 	mov	r19,r2
 4011514:	100d883a 	mov	r6,r2
 4011518:	18c1000c 	andi	r3,r3,1024
 401151c:	18001c26 	beq	r3,zero,4011590 <__sfvwrite_r+0x470>
 4011520:	300b883a 	mov	r5,r6
 4011524:	a809883a 	mov	r4,r21
 4011528:	400b7b00 	call	400b7b0 <_malloc_r>
 401152c:	102f883a 	mov	r23,r2
 4011530:	10002926 	beq	r2,zero,40115d8 <__sfvwrite_r+0x4b8>
 4011534:	81400417 	ldw	r5,16(r16)
 4011538:	b00d883a 	mov	r6,r22
 401153c:	1009883a 	mov	r4,r2
 4011540:	400c0380 	call	400c038 <memcpy>
 4011544:	8080030b 	ldhu	r2,12(r16)
 4011548:	00fedfc4 	movi	r3,-1153
 401154c:	10c4703a 	and	r2,r2,r3
 4011550:	10802014 	ori	r2,r2,128
 4011554:	8080030d 	sth	r2,12(r16)
 4011558:	bd89883a 	add	r4,r23,r22
 401155c:	9d8fc83a 	sub	r7,r19,r22
 4011560:	85c00415 	stw	r23,16(r16)
 4011564:	84c00515 	stw	r19,20(r16)
 4011568:	81000015 	stw	r4,0(r16)
 401156c:	9027883a 	mov	r19,r18
 4011570:	81c00215 	stw	r7,8(r16)
 4011574:	902f883a 	mov	r23,r18
 4011578:	003f3806 	br	401125c <__alt_data_end+0xfc01125c>
 401157c:	800b883a 	mov	r5,r16
 4011580:	a809883a 	mov	r4,r21
 4011584:	40108b00 	call	40108b0 <_fflush_r>
 4011588:	103fb926 	beq	r2,zero,4011470 <__alt_data_end+0xfc011470>
 401158c:	003f6506 	br	4011324 <__alt_data_end+0xfc011324>
 4011590:	a809883a 	mov	r4,r21
 4011594:	4012e680 	call	4012e68 <_realloc_r>
 4011598:	102f883a 	mov	r23,r2
 401159c:	103fee1e 	bne	r2,zero,4011558 <__alt_data_end+0xfc011558>
 40115a0:	81400417 	ldw	r5,16(r16)
 40115a4:	a809883a 	mov	r4,r21
 40115a8:	4010e100 	call	4010e10 <_free_r>
 40115ac:	8080030b 	ldhu	r2,12(r16)
 40115b0:	00ffdfc4 	movi	r3,-129
 40115b4:	1884703a 	and	r2,r3,r2
 40115b8:	00c00304 	movi	r3,12
 40115bc:	a8c00015 	stw	r3,0(r21)
 40115c0:	003f5906 	br	4011328 <__alt_data_end+0xfc011328>
 40115c4:	94c00044 	addi	r19,r18,1
 40115c8:	02000044 	movi	r8,1
 40115cc:	003f6006 	br	4011350 <__alt_data_end+0xfc011350>
 40115d0:	00bfffc4 	movi	r2,-1
 40115d4:	003f0006 	br	40111d8 <__alt_data_end+0xfc0111d8>
 40115d8:	00800304 	movi	r2,12
 40115dc:	a8800015 	stw	r2,0(r21)
 40115e0:	8080030b 	ldhu	r2,12(r16)
 40115e4:	003f5006 	br	4011328 <__alt_data_end+0xfc011328>

040115e8 <_fwalk>:
 40115e8:	defff704 	addi	sp,sp,-36
 40115ec:	dd000415 	stw	r20,16(sp)
 40115f0:	dfc00815 	stw	ra,32(sp)
 40115f4:	ddc00715 	stw	r23,28(sp)
 40115f8:	dd800615 	stw	r22,24(sp)
 40115fc:	dd400515 	stw	r21,20(sp)
 4011600:	dcc00315 	stw	r19,12(sp)
 4011604:	dc800215 	stw	r18,8(sp)
 4011608:	dc400115 	stw	r17,4(sp)
 401160c:	dc000015 	stw	r16,0(sp)
 4011610:	2500b804 	addi	r20,r4,736
 4011614:	a0002326 	beq	r20,zero,40116a4 <_fwalk+0xbc>
 4011618:	282b883a 	mov	r21,r5
 401161c:	002f883a 	mov	r23,zero
 4011620:	05800044 	movi	r22,1
 4011624:	04ffffc4 	movi	r19,-1
 4011628:	a4400117 	ldw	r17,4(r20)
 401162c:	a4800217 	ldw	r18,8(r20)
 4011630:	8c7fffc4 	addi	r17,r17,-1
 4011634:	88000d16 	blt	r17,zero,401166c <_fwalk+0x84>
 4011638:	94000304 	addi	r16,r18,12
 401163c:	94800384 	addi	r18,r18,14
 4011640:	8080000b 	ldhu	r2,0(r16)
 4011644:	8c7fffc4 	addi	r17,r17,-1
 4011648:	813ffd04 	addi	r4,r16,-12
 401164c:	b080042e 	bgeu	r22,r2,4011660 <_fwalk+0x78>
 4011650:	9080000f 	ldh	r2,0(r18)
 4011654:	14c00226 	beq	r2,r19,4011660 <_fwalk+0x78>
 4011658:	a83ee83a 	callr	r21
 401165c:	b8aeb03a 	or	r23,r23,r2
 4011660:	84001a04 	addi	r16,r16,104
 4011664:	94801a04 	addi	r18,r18,104
 4011668:	8cfff51e 	bne	r17,r19,4011640 <__alt_data_end+0xfc011640>
 401166c:	a5000017 	ldw	r20,0(r20)
 4011670:	a03fed1e 	bne	r20,zero,4011628 <__alt_data_end+0xfc011628>
 4011674:	b805883a 	mov	r2,r23
 4011678:	dfc00817 	ldw	ra,32(sp)
 401167c:	ddc00717 	ldw	r23,28(sp)
 4011680:	dd800617 	ldw	r22,24(sp)
 4011684:	dd400517 	ldw	r21,20(sp)
 4011688:	dd000417 	ldw	r20,16(sp)
 401168c:	dcc00317 	ldw	r19,12(sp)
 4011690:	dc800217 	ldw	r18,8(sp)
 4011694:	dc400117 	ldw	r17,4(sp)
 4011698:	dc000017 	ldw	r16,0(sp)
 401169c:	dec00904 	addi	sp,sp,36
 40116a0:	f800283a 	ret
 40116a4:	002f883a 	mov	r23,zero
 40116a8:	003ff206 	br	4011674 <__alt_data_end+0xfc011674>

040116ac <_fwalk_reent>:
 40116ac:	defff704 	addi	sp,sp,-36
 40116b0:	dd000415 	stw	r20,16(sp)
 40116b4:	dfc00815 	stw	ra,32(sp)
 40116b8:	ddc00715 	stw	r23,28(sp)
 40116bc:	dd800615 	stw	r22,24(sp)
 40116c0:	dd400515 	stw	r21,20(sp)
 40116c4:	dcc00315 	stw	r19,12(sp)
 40116c8:	dc800215 	stw	r18,8(sp)
 40116cc:	dc400115 	stw	r17,4(sp)
 40116d0:	dc000015 	stw	r16,0(sp)
 40116d4:	2500b804 	addi	r20,r4,736
 40116d8:	a0002326 	beq	r20,zero,4011768 <_fwalk_reent+0xbc>
 40116dc:	282b883a 	mov	r21,r5
 40116e0:	2027883a 	mov	r19,r4
 40116e4:	002f883a 	mov	r23,zero
 40116e8:	05800044 	movi	r22,1
 40116ec:	04bfffc4 	movi	r18,-1
 40116f0:	a4400117 	ldw	r17,4(r20)
 40116f4:	a4000217 	ldw	r16,8(r20)
 40116f8:	8c7fffc4 	addi	r17,r17,-1
 40116fc:	88000c16 	blt	r17,zero,4011730 <_fwalk_reent+0x84>
 4011700:	84000304 	addi	r16,r16,12
 4011704:	8080000b 	ldhu	r2,0(r16)
 4011708:	8c7fffc4 	addi	r17,r17,-1
 401170c:	817ffd04 	addi	r5,r16,-12
 4011710:	b080052e 	bgeu	r22,r2,4011728 <_fwalk_reent+0x7c>
 4011714:	8080008f 	ldh	r2,2(r16)
 4011718:	9809883a 	mov	r4,r19
 401171c:	14800226 	beq	r2,r18,4011728 <_fwalk_reent+0x7c>
 4011720:	a83ee83a 	callr	r21
 4011724:	b8aeb03a 	or	r23,r23,r2
 4011728:	84001a04 	addi	r16,r16,104
 401172c:	8cbff51e 	bne	r17,r18,4011704 <__alt_data_end+0xfc011704>
 4011730:	a5000017 	ldw	r20,0(r20)
 4011734:	a03fee1e 	bne	r20,zero,40116f0 <__alt_data_end+0xfc0116f0>
 4011738:	b805883a 	mov	r2,r23
 401173c:	dfc00817 	ldw	ra,32(sp)
 4011740:	ddc00717 	ldw	r23,28(sp)
 4011744:	dd800617 	ldw	r22,24(sp)
 4011748:	dd400517 	ldw	r21,20(sp)
 401174c:	dd000417 	ldw	r20,16(sp)
 4011750:	dcc00317 	ldw	r19,12(sp)
 4011754:	dc800217 	ldw	r18,8(sp)
 4011758:	dc400117 	ldw	r17,4(sp)
 401175c:	dc000017 	ldw	r16,0(sp)
 4011760:	dec00904 	addi	sp,sp,36
 4011764:	f800283a 	ret
 4011768:	002f883a 	mov	r23,zero
 401176c:	003ff206 	br	4011738 <__alt_data_end+0xfc011738>

04011770 <_setlocale_r>:
 4011770:	30001b26 	beq	r6,zero,40117e0 <_setlocale_r+0x70>
 4011774:	014100b4 	movhi	r5,1026
 4011778:	defffe04 	addi	sp,sp,-8
 401177c:	2973e704 	addi	r5,r5,-12388
 4011780:	3009883a 	mov	r4,r6
 4011784:	dc000015 	stw	r16,0(sp)
 4011788:	dfc00115 	stw	ra,4(sp)
 401178c:	3021883a 	mov	r16,r6
 4011790:	400c7600 	call	400c760 <strcmp>
 4011794:	1000061e 	bne	r2,zero,40117b0 <_setlocale_r+0x40>
 4011798:	008100b4 	movhi	r2,1026
 401179c:	10b3c804 	addi	r2,r2,-12512
 40117a0:	dfc00117 	ldw	ra,4(sp)
 40117a4:	dc000017 	ldw	r16,0(sp)
 40117a8:	dec00204 	addi	sp,sp,8
 40117ac:	f800283a 	ret
 40117b0:	014100b4 	movhi	r5,1026
 40117b4:	2973c804 	addi	r5,r5,-12512
 40117b8:	8009883a 	mov	r4,r16
 40117bc:	400c7600 	call	400c760 <strcmp>
 40117c0:	103ff526 	beq	r2,zero,4011798 <__alt_data_end+0xfc011798>
 40117c4:	014100b4 	movhi	r5,1026
 40117c8:	2973d204 	addi	r5,r5,-12472
 40117cc:	8009883a 	mov	r4,r16
 40117d0:	400c7600 	call	400c760 <strcmp>
 40117d4:	103ff026 	beq	r2,zero,4011798 <__alt_data_end+0xfc011798>
 40117d8:	0005883a 	mov	r2,zero
 40117dc:	003ff006 	br	40117a0 <__alt_data_end+0xfc0117a0>
 40117e0:	008100b4 	movhi	r2,1026
 40117e4:	10b3c804 	addi	r2,r2,-12512
 40117e8:	f800283a 	ret

040117ec <__locale_charset>:
 40117ec:	008100f4 	movhi	r2,1027
 40117f0:	10a26704 	addi	r2,r2,-30308
 40117f4:	f800283a 	ret

040117f8 <__locale_mb_cur_max>:
 40117f8:	008100f4 	movhi	r2,1027
 40117fc:	10a71c04 	addi	r2,r2,-25488
 4011800:	10800017 	ldw	r2,0(r2)
 4011804:	f800283a 	ret

04011808 <__locale_msgcharset>:
 4011808:	008100f4 	movhi	r2,1027
 401180c:	10a25f04 	addi	r2,r2,-30340
 4011810:	f800283a 	ret

04011814 <__locale_cjk_lang>:
 4011814:	0005883a 	mov	r2,zero
 4011818:	f800283a 	ret

0401181c <_localeconv_r>:
 401181c:	008100f4 	movhi	r2,1027
 4011820:	10a26f04 	addi	r2,r2,-30276
 4011824:	f800283a 	ret

04011828 <setlocale>:
 4011828:	008100f4 	movhi	r2,1027
 401182c:	10a71904 	addi	r2,r2,-25500
 4011830:	280d883a 	mov	r6,r5
 4011834:	200b883a 	mov	r5,r4
 4011838:	11000017 	ldw	r4,0(r2)
 401183c:	40117701 	jmpi	4011770 <_setlocale_r>

04011840 <localeconv>:
 4011840:	008100f4 	movhi	r2,1027
 4011844:	10a26f04 	addi	r2,r2,-30276
 4011848:	f800283a 	ret

0401184c <__smakebuf_r>:
 401184c:	2880030b 	ldhu	r2,12(r5)
 4011850:	10c0008c 	andi	r3,r2,2
 4011854:	1800411e 	bne	r3,zero,401195c <__smakebuf_r+0x110>
 4011858:	deffec04 	addi	sp,sp,-80
 401185c:	dc000f15 	stw	r16,60(sp)
 4011860:	2821883a 	mov	r16,r5
 4011864:	2940038f 	ldh	r5,14(r5)
 4011868:	dc401015 	stw	r17,64(sp)
 401186c:	dfc01315 	stw	ra,76(sp)
 4011870:	dcc01215 	stw	r19,72(sp)
 4011874:	dc801115 	stw	r18,68(sp)
 4011878:	2023883a 	mov	r17,r4
 401187c:	28001c16 	blt	r5,zero,40118f0 <__smakebuf_r+0xa4>
 4011880:	d80d883a 	mov	r6,sp
 4011884:	40152680 	call	4015268 <_fstat_r>
 4011888:	10001816 	blt	r2,zero,40118ec <__smakebuf_r+0xa0>
 401188c:	d8800117 	ldw	r2,4(sp)
 4011890:	00e00014 	movui	r3,32768
 4011894:	10bc000c 	andi	r2,r2,61440
 4011898:	14c80020 	cmpeqi	r19,r2,8192
 401189c:	10c03726 	beq	r2,r3,401197c <__smakebuf_r+0x130>
 40118a0:	80c0030b 	ldhu	r3,12(r16)
 40118a4:	18c20014 	ori	r3,r3,2048
 40118a8:	80c0030d 	sth	r3,12(r16)
 40118ac:	00c80004 	movi	r3,8192
 40118b0:	10c0521e 	bne	r2,r3,40119fc <__smakebuf_r+0x1b0>
 40118b4:	8140038f 	ldh	r5,14(r16)
 40118b8:	8809883a 	mov	r4,r17
 40118bc:	40152c40 	call	40152c4 <_isatty_r>
 40118c0:	10004c26 	beq	r2,zero,40119f4 <__smakebuf_r+0x1a8>
 40118c4:	8080030b 	ldhu	r2,12(r16)
 40118c8:	80c010c4 	addi	r3,r16,67
 40118cc:	80c00015 	stw	r3,0(r16)
 40118d0:	10800054 	ori	r2,r2,1
 40118d4:	8080030d 	sth	r2,12(r16)
 40118d8:	00800044 	movi	r2,1
 40118dc:	80c00415 	stw	r3,16(r16)
 40118e0:	80800515 	stw	r2,20(r16)
 40118e4:	04810004 	movi	r18,1024
 40118e8:	00000706 	br	4011908 <__smakebuf_r+0xbc>
 40118ec:	8080030b 	ldhu	r2,12(r16)
 40118f0:	10c0200c 	andi	r3,r2,128
 40118f4:	18001f1e 	bne	r3,zero,4011974 <__smakebuf_r+0x128>
 40118f8:	04810004 	movi	r18,1024
 40118fc:	10820014 	ori	r2,r2,2048
 4011900:	8080030d 	sth	r2,12(r16)
 4011904:	0027883a 	mov	r19,zero
 4011908:	900b883a 	mov	r5,r18
 401190c:	8809883a 	mov	r4,r17
 4011910:	400b7b00 	call	400b7b0 <_malloc_r>
 4011914:	10002c26 	beq	r2,zero,40119c8 <__smakebuf_r+0x17c>
 4011918:	80c0030b 	ldhu	r3,12(r16)
 401191c:	01010074 	movhi	r4,1025
 4011920:	21025104 	addi	r4,r4,2372
 4011924:	89000f15 	stw	r4,60(r17)
 4011928:	18c02014 	ori	r3,r3,128
 401192c:	80c0030d 	sth	r3,12(r16)
 4011930:	80800015 	stw	r2,0(r16)
 4011934:	80800415 	stw	r2,16(r16)
 4011938:	84800515 	stw	r18,20(r16)
 401193c:	98001a1e 	bne	r19,zero,40119a8 <__smakebuf_r+0x15c>
 4011940:	dfc01317 	ldw	ra,76(sp)
 4011944:	dcc01217 	ldw	r19,72(sp)
 4011948:	dc801117 	ldw	r18,68(sp)
 401194c:	dc401017 	ldw	r17,64(sp)
 4011950:	dc000f17 	ldw	r16,60(sp)
 4011954:	dec01404 	addi	sp,sp,80
 4011958:	f800283a 	ret
 401195c:	288010c4 	addi	r2,r5,67
 4011960:	28800015 	stw	r2,0(r5)
 4011964:	28800415 	stw	r2,16(r5)
 4011968:	00800044 	movi	r2,1
 401196c:	28800515 	stw	r2,20(r5)
 4011970:	f800283a 	ret
 4011974:	04801004 	movi	r18,64
 4011978:	003fe006 	br	40118fc <__alt_data_end+0xfc0118fc>
 401197c:	81000a17 	ldw	r4,40(r16)
 4011980:	00c10074 	movhi	r3,1025
 4011984:	18cd4604 	addi	r3,r3,13592
 4011988:	20ffc51e 	bne	r4,r3,40118a0 <__alt_data_end+0xfc0118a0>
 401198c:	8080030b 	ldhu	r2,12(r16)
 4011990:	04810004 	movi	r18,1024
 4011994:	84801315 	stw	r18,76(r16)
 4011998:	1484b03a 	or	r2,r2,r18
 401199c:	8080030d 	sth	r2,12(r16)
 40119a0:	0027883a 	mov	r19,zero
 40119a4:	003fd806 	br	4011908 <__alt_data_end+0xfc011908>
 40119a8:	8140038f 	ldh	r5,14(r16)
 40119ac:	8809883a 	mov	r4,r17
 40119b0:	40152c40 	call	40152c4 <_isatty_r>
 40119b4:	103fe226 	beq	r2,zero,4011940 <__alt_data_end+0xfc011940>
 40119b8:	8080030b 	ldhu	r2,12(r16)
 40119bc:	10800054 	ori	r2,r2,1
 40119c0:	8080030d 	sth	r2,12(r16)
 40119c4:	003fde06 	br	4011940 <__alt_data_end+0xfc011940>
 40119c8:	8080030b 	ldhu	r2,12(r16)
 40119cc:	10c0800c 	andi	r3,r2,512
 40119d0:	183fdb1e 	bne	r3,zero,4011940 <__alt_data_end+0xfc011940>
 40119d4:	10800094 	ori	r2,r2,2
 40119d8:	80c010c4 	addi	r3,r16,67
 40119dc:	8080030d 	sth	r2,12(r16)
 40119e0:	00800044 	movi	r2,1
 40119e4:	80c00015 	stw	r3,0(r16)
 40119e8:	80c00415 	stw	r3,16(r16)
 40119ec:	80800515 	stw	r2,20(r16)
 40119f0:	003fd306 	br	4011940 <__alt_data_end+0xfc011940>
 40119f4:	04810004 	movi	r18,1024
 40119f8:	003fc306 	br	4011908 <__alt_data_end+0xfc011908>
 40119fc:	0027883a 	mov	r19,zero
 4011a00:	04810004 	movi	r18,1024
 4011a04:	003fc006 	br	4011908 <__alt_data_end+0xfc011908>

04011a08 <memchr>:
 4011a08:	208000cc 	andi	r2,r4,3
 4011a0c:	280f883a 	mov	r7,r5
 4011a10:	10003426 	beq	r2,zero,4011ae4 <memchr+0xdc>
 4011a14:	30bfffc4 	addi	r2,r6,-1
 4011a18:	30001a26 	beq	r6,zero,4011a84 <memchr+0x7c>
 4011a1c:	20c00003 	ldbu	r3,0(r4)
 4011a20:	29803fcc 	andi	r6,r5,255
 4011a24:	30c0051e 	bne	r6,r3,4011a3c <memchr+0x34>
 4011a28:	00001806 	br	4011a8c <memchr+0x84>
 4011a2c:	10001526 	beq	r2,zero,4011a84 <memchr+0x7c>
 4011a30:	20c00003 	ldbu	r3,0(r4)
 4011a34:	10bfffc4 	addi	r2,r2,-1
 4011a38:	30c01426 	beq	r6,r3,4011a8c <memchr+0x84>
 4011a3c:	21000044 	addi	r4,r4,1
 4011a40:	20c000cc 	andi	r3,r4,3
 4011a44:	183ff91e 	bne	r3,zero,4011a2c <__alt_data_end+0xfc011a2c>
 4011a48:	020000c4 	movi	r8,3
 4011a4c:	40801136 	bltu	r8,r2,4011a94 <memchr+0x8c>
 4011a50:	10000c26 	beq	r2,zero,4011a84 <memchr+0x7c>
 4011a54:	20c00003 	ldbu	r3,0(r4)
 4011a58:	29403fcc 	andi	r5,r5,255
 4011a5c:	28c00b26 	beq	r5,r3,4011a8c <memchr+0x84>
 4011a60:	20c00044 	addi	r3,r4,1
 4011a64:	39803fcc 	andi	r6,r7,255
 4011a68:	2089883a 	add	r4,r4,r2
 4011a6c:	00000306 	br	4011a7c <memchr+0x74>
 4011a70:	18c00044 	addi	r3,r3,1
 4011a74:	197fffc3 	ldbu	r5,-1(r3)
 4011a78:	31400526 	beq	r6,r5,4011a90 <memchr+0x88>
 4011a7c:	1805883a 	mov	r2,r3
 4011a80:	20fffb1e 	bne	r4,r3,4011a70 <__alt_data_end+0xfc011a70>
 4011a84:	0005883a 	mov	r2,zero
 4011a88:	f800283a 	ret
 4011a8c:	2005883a 	mov	r2,r4
 4011a90:	f800283a 	ret
 4011a94:	28c03fcc 	andi	r3,r5,255
 4011a98:	1812923a 	slli	r9,r3,8
 4011a9c:	02ffbff4 	movhi	r11,65279
 4011aa0:	02a02074 	movhi	r10,32897
 4011aa4:	48d2b03a 	or	r9,r9,r3
 4011aa8:	4806943a 	slli	r3,r9,16
 4011aac:	5affbfc4 	addi	r11,r11,-257
 4011ab0:	52a02004 	addi	r10,r10,-32640
 4011ab4:	48d2b03a 	or	r9,r9,r3
 4011ab8:	20c00017 	ldw	r3,0(r4)
 4011abc:	48c6f03a 	xor	r3,r9,r3
 4011ac0:	1acd883a 	add	r6,r3,r11
 4011ac4:	00c6303a 	nor	r3,zero,r3
 4011ac8:	30c6703a 	and	r3,r6,r3
 4011acc:	1a86703a 	and	r3,r3,r10
 4011ad0:	183fe01e 	bne	r3,zero,4011a54 <__alt_data_end+0xfc011a54>
 4011ad4:	10bfff04 	addi	r2,r2,-4
 4011ad8:	21000104 	addi	r4,r4,4
 4011adc:	40bff636 	bltu	r8,r2,4011ab8 <__alt_data_end+0xfc011ab8>
 4011ae0:	003fdb06 	br	4011a50 <__alt_data_end+0xfc011a50>
 4011ae4:	3005883a 	mov	r2,r6
 4011ae8:	003fd706 	br	4011a48 <__alt_data_end+0xfc011a48>

04011aec <memmove>:
 4011aec:	2005883a 	mov	r2,r4
 4011af0:	29000b2e 	bgeu	r5,r4,4011b20 <memmove+0x34>
 4011af4:	298f883a 	add	r7,r5,r6
 4011af8:	21c0092e 	bgeu	r4,r7,4011b20 <memmove+0x34>
 4011afc:	2187883a 	add	r3,r4,r6
 4011b00:	198bc83a 	sub	r5,r3,r6
 4011b04:	30004826 	beq	r6,zero,4011c28 <memmove+0x13c>
 4011b08:	39ffffc4 	addi	r7,r7,-1
 4011b0c:	39000003 	ldbu	r4,0(r7)
 4011b10:	18ffffc4 	addi	r3,r3,-1
 4011b14:	19000005 	stb	r4,0(r3)
 4011b18:	28fffb1e 	bne	r5,r3,4011b08 <__alt_data_end+0xfc011b08>
 4011b1c:	f800283a 	ret
 4011b20:	00c003c4 	movi	r3,15
 4011b24:	1980412e 	bgeu	r3,r6,4011c2c <memmove+0x140>
 4011b28:	2886b03a 	or	r3,r5,r2
 4011b2c:	18c000cc 	andi	r3,r3,3
 4011b30:	1800401e 	bne	r3,zero,4011c34 <memmove+0x148>
 4011b34:	33fffc04 	addi	r15,r6,-16
 4011b38:	781ed13a 	srli	r15,r15,4
 4011b3c:	28c00104 	addi	r3,r5,4
 4011b40:	13400104 	addi	r13,r2,4
 4011b44:	781c913a 	slli	r14,r15,4
 4011b48:	2b000204 	addi	r12,r5,8
 4011b4c:	12c00204 	addi	r11,r2,8
 4011b50:	73800504 	addi	r14,r14,20
 4011b54:	2a800304 	addi	r10,r5,12
 4011b58:	12400304 	addi	r9,r2,12
 4011b5c:	2b9d883a 	add	r14,r5,r14
 4011b60:	2811883a 	mov	r8,r5
 4011b64:	100f883a 	mov	r7,r2
 4011b68:	41000017 	ldw	r4,0(r8)
 4011b6c:	39c00404 	addi	r7,r7,16
 4011b70:	18c00404 	addi	r3,r3,16
 4011b74:	393ffc15 	stw	r4,-16(r7)
 4011b78:	193ffc17 	ldw	r4,-16(r3)
 4011b7c:	6b400404 	addi	r13,r13,16
 4011b80:	5ac00404 	addi	r11,r11,16
 4011b84:	693ffc15 	stw	r4,-16(r13)
 4011b88:	61000017 	ldw	r4,0(r12)
 4011b8c:	4a400404 	addi	r9,r9,16
 4011b90:	42000404 	addi	r8,r8,16
 4011b94:	593ffc15 	stw	r4,-16(r11)
 4011b98:	51000017 	ldw	r4,0(r10)
 4011b9c:	63000404 	addi	r12,r12,16
 4011ba0:	52800404 	addi	r10,r10,16
 4011ba4:	493ffc15 	stw	r4,-16(r9)
 4011ba8:	1bbfef1e 	bne	r3,r14,4011b68 <__alt_data_end+0xfc011b68>
 4011bac:	79000044 	addi	r4,r15,1
 4011bb0:	2008913a 	slli	r4,r4,4
 4011bb4:	328003cc 	andi	r10,r6,15
 4011bb8:	02c000c4 	movi	r11,3
 4011bbc:	1107883a 	add	r3,r2,r4
 4011bc0:	290b883a 	add	r5,r5,r4
 4011bc4:	5a801e2e 	bgeu	r11,r10,4011c40 <memmove+0x154>
 4011bc8:	1813883a 	mov	r9,r3
 4011bcc:	2811883a 	mov	r8,r5
 4011bd0:	500f883a 	mov	r7,r10
 4011bd4:	41000017 	ldw	r4,0(r8)
 4011bd8:	4a400104 	addi	r9,r9,4
 4011bdc:	39ffff04 	addi	r7,r7,-4
 4011be0:	493fff15 	stw	r4,-4(r9)
 4011be4:	42000104 	addi	r8,r8,4
 4011be8:	59fffa36 	bltu	r11,r7,4011bd4 <__alt_data_end+0xfc011bd4>
 4011bec:	513fff04 	addi	r4,r10,-4
 4011bf0:	2008d0ba 	srli	r4,r4,2
 4011bf4:	318000cc 	andi	r6,r6,3
 4011bf8:	21000044 	addi	r4,r4,1
 4011bfc:	2109883a 	add	r4,r4,r4
 4011c00:	2109883a 	add	r4,r4,r4
 4011c04:	1907883a 	add	r3,r3,r4
 4011c08:	290b883a 	add	r5,r5,r4
 4011c0c:	30000b26 	beq	r6,zero,4011c3c <memmove+0x150>
 4011c10:	198d883a 	add	r6,r3,r6
 4011c14:	29c00003 	ldbu	r7,0(r5)
 4011c18:	18c00044 	addi	r3,r3,1
 4011c1c:	29400044 	addi	r5,r5,1
 4011c20:	19ffffc5 	stb	r7,-1(r3)
 4011c24:	19bffb1e 	bne	r3,r6,4011c14 <__alt_data_end+0xfc011c14>
 4011c28:	f800283a 	ret
 4011c2c:	1007883a 	mov	r3,r2
 4011c30:	003ff606 	br	4011c0c <__alt_data_end+0xfc011c0c>
 4011c34:	1007883a 	mov	r3,r2
 4011c38:	003ff506 	br	4011c10 <__alt_data_end+0xfc011c10>
 4011c3c:	f800283a 	ret
 4011c40:	500d883a 	mov	r6,r10
 4011c44:	003ff106 	br	4011c0c <__alt_data_end+0xfc011c0c>

04011c48 <_Balloc>:
 4011c48:	20801317 	ldw	r2,76(r4)
 4011c4c:	defffc04 	addi	sp,sp,-16
 4011c50:	dc400115 	stw	r17,4(sp)
 4011c54:	dc000015 	stw	r16,0(sp)
 4011c58:	dfc00315 	stw	ra,12(sp)
 4011c5c:	dc800215 	stw	r18,8(sp)
 4011c60:	2023883a 	mov	r17,r4
 4011c64:	2821883a 	mov	r16,r5
 4011c68:	10000f26 	beq	r2,zero,4011ca8 <_Balloc+0x60>
 4011c6c:	8407883a 	add	r3,r16,r16
 4011c70:	18c7883a 	add	r3,r3,r3
 4011c74:	10c7883a 	add	r3,r2,r3
 4011c78:	18800017 	ldw	r2,0(r3)
 4011c7c:	10001126 	beq	r2,zero,4011cc4 <_Balloc+0x7c>
 4011c80:	11000017 	ldw	r4,0(r2)
 4011c84:	19000015 	stw	r4,0(r3)
 4011c88:	10000415 	stw	zero,16(r2)
 4011c8c:	10000315 	stw	zero,12(r2)
 4011c90:	dfc00317 	ldw	ra,12(sp)
 4011c94:	dc800217 	ldw	r18,8(sp)
 4011c98:	dc400117 	ldw	r17,4(sp)
 4011c9c:	dc000017 	ldw	r16,0(sp)
 4011ca0:	dec00404 	addi	sp,sp,16
 4011ca4:	f800283a 	ret
 4011ca8:	01800844 	movi	r6,33
 4011cac:	01400104 	movi	r5,4
 4011cb0:	4014e800 	call	4014e80 <_calloc_r>
 4011cb4:	88801315 	stw	r2,76(r17)
 4011cb8:	103fec1e 	bne	r2,zero,4011c6c <__alt_data_end+0xfc011c6c>
 4011cbc:	0005883a 	mov	r2,zero
 4011cc0:	003ff306 	br	4011c90 <__alt_data_end+0xfc011c90>
 4011cc4:	01400044 	movi	r5,1
 4011cc8:	2c24983a 	sll	r18,r5,r16
 4011ccc:	8809883a 	mov	r4,r17
 4011cd0:	91800144 	addi	r6,r18,5
 4011cd4:	318d883a 	add	r6,r6,r6
 4011cd8:	318d883a 	add	r6,r6,r6
 4011cdc:	4014e800 	call	4014e80 <_calloc_r>
 4011ce0:	103ff626 	beq	r2,zero,4011cbc <__alt_data_end+0xfc011cbc>
 4011ce4:	14000115 	stw	r16,4(r2)
 4011ce8:	14800215 	stw	r18,8(r2)
 4011cec:	003fe606 	br	4011c88 <__alt_data_end+0xfc011c88>

04011cf0 <_Bfree>:
 4011cf0:	28000826 	beq	r5,zero,4011d14 <_Bfree+0x24>
 4011cf4:	28c00117 	ldw	r3,4(r5)
 4011cf8:	20801317 	ldw	r2,76(r4)
 4011cfc:	18c7883a 	add	r3,r3,r3
 4011d00:	18c7883a 	add	r3,r3,r3
 4011d04:	10c5883a 	add	r2,r2,r3
 4011d08:	10c00017 	ldw	r3,0(r2)
 4011d0c:	28c00015 	stw	r3,0(r5)
 4011d10:	11400015 	stw	r5,0(r2)
 4011d14:	f800283a 	ret

04011d18 <__multadd>:
 4011d18:	defff704 	addi	sp,sp,-36
 4011d1c:	dc800215 	stw	r18,8(sp)
 4011d20:	2c800417 	ldw	r18,16(r5)
 4011d24:	dd800615 	stw	r22,24(sp)
 4011d28:	dd400515 	stw	r21,20(sp)
 4011d2c:	dd000415 	stw	r20,16(sp)
 4011d30:	dcc00315 	stw	r19,12(sp)
 4011d34:	dc400115 	stw	r17,4(sp)
 4011d38:	dc000015 	stw	r16,0(sp)
 4011d3c:	dfc00815 	stw	ra,32(sp)
 4011d40:	ddc00715 	stw	r23,28(sp)
 4011d44:	2827883a 	mov	r19,r5
 4011d48:	2029883a 	mov	r20,r4
 4011d4c:	3023883a 	mov	r17,r6
 4011d50:	3821883a 	mov	r16,r7
 4011d54:	2d400504 	addi	r21,r5,20
 4011d58:	002d883a 	mov	r22,zero
 4011d5c:	adc00017 	ldw	r23,0(r21)
 4011d60:	880b883a 	mov	r5,r17
 4011d64:	ad400104 	addi	r21,r21,4
 4011d68:	b93fffcc 	andi	r4,r23,65535
 4011d6c:	400b1dc0 	call	400b1dc <__mulsi3>
 4011d70:	b808d43a 	srli	r4,r23,16
 4011d74:	880b883a 	mov	r5,r17
 4011d78:	1421883a 	add	r16,r2,r16
 4011d7c:	400b1dc0 	call	400b1dc <__mulsi3>
 4011d80:	800ed43a 	srli	r7,r16,16
 4011d84:	80ffffcc 	andi	r3,r16,65535
 4011d88:	b5800044 	addi	r22,r22,1
 4011d8c:	11c5883a 	add	r2,r2,r7
 4011d90:	100e943a 	slli	r7,r2,16
 4011d94:	1020d43a 	srli	r16,r2,16
 4011d98:	38c7883a 	add	r3,r7,r3
 4011d9c:	a8ffff15 	stw	r3,-4(r21)
 4011da0:	b4bfee16 	blt	r22,r18,4011d5c <__alt_data_end+0xfc011d5c>
 4011da4:	80000926 	beq	r16,zero,4011dcc <__multadd+0xb4>
 4011da8:	98800217 	ldw	r2,8(r19)
 4011dac:	9080130e 	bge	r18,r2,4011dfc <__multadd+0xe4>
 4011db0:	90800144 	addi	r2,r18,5
 4011db4:	1085883a 	add	r2,r2,r2
 4011db8:	1085883a 	add	r2,r2,r2
 4011dbc:	9885883a 	add	r2,r19,r2
 4011dc0:	14000015 	stw	r16,0(r2)
 4011dc4:	94800044 	addi	r18,r18,1
 4011dc8:	9c800415 	stw	r18,16(r19)
 4011dcc:	9805883a 	mov	r2,r19
 4011dd0:	dfc00817 	ldw	ra,32(sp)
 4011dd4:	ddc00717 	ldw	r23,28(sp)
 4011dd8:	dd800617 	ldw	r22,24(sp)
 4011ddc:	dd400517 	ldw	r21,20(sp)
 4011de0:	dd000417 	ldw	r20,16(sp)
 4011de4:	dcc00317 	ldw	r19,12(sp)
 4011de8:	dc800217 	ldw	r18,8(sp)
 4011dec:	dc400117 	ldw	r17,4(sp)
 4011df0:	dc000017 	ldw	r16,0(sp)
 4011df4:	dec00904 	addi	sp,sp,36
 4011df8:	f800283a 	ret
 4011dfc:	99400117 	ldw	r5,4(r19)
 4011e00:	a009883a 	mov	r4,r20
 4011e04:	29400044 	addi	r5,r5,1
 4011e08:	4011c480 	call	4011c48 <_Balloc>
 4011e0c:	99800417 	ldw	r6,16(r19)
 4011e10:	99400304 	addi	r5,r19,12
 4011e14:	11000304 	addi	r4,r2,12
 4011e18:	31800084 	addi	r6,r6,2
 4011e1c:	318d883a 	add	r6,r6,r6
 4011e20:	318d883a 	add	r6,r6,r6
 4011e24:	1023883a 	mov	r17,r2
 4011e28:	400c0380 	call	400c038 <memcpy>
 4011e2c:	98000a26 	beq	r19,zero,4011e58 <__multadd+0x140>
 4011e30:	98c00117 	ldw	r3,4(r19)
 4011e34:	a0801317 	ldw	r2,76(r20)
 4011e38:	18c7883a 	add	r3,r3,r3
 4011e3c:	18c7883a 	add	r3,r3,r3
 4011e40:	10c5883a 	add	r2,r2,r3
 4011e44:	10c00017 	ldw	r3,0(r2)
 4011e48:	98c00015 	stw	r3,0(r19)
 4011e4c:	14c00015 	stw	r19,0(r2)
 4011e50:	8827883a 	mov	r19,r17
 4011e54:	003fd606 	br	4011db0 <__alt_data_end+0xfc011db0>
 4011e58:	8827883a 	mov	r19,r17
 4011e5c:	003fd406 	br	4011db0 <__alt_data_end+0xfc011db0>

04011e60 <__s2b>:
 4011e60:	defff904 	addi	sp,sp,-28
 4011e64:	dc400115 	stw	r17,4(sp)
 4011e68:	dc000015 	stw	r16,0(sp)
 4011e6c:	2023883a 	mov	r17,r4
 4011e70:	2821883a 	mov	r16,r5
 4011e74:	39000204 	addi	r4,r7,8
 4011e78:	01400244 	movi	r5,9
 4011e7c:	dcc00315 	stw	r19,12(sp)
 4011e80:	dc800215 	stw	r18,8(sp)
 4011e84:	dfc00615 	stw	ra,24(sp)
 4011e88:	dd400515 	stw	r21,20(sp)
 4011e8c:	dd000415 	stw	r20,16(sp)
 4011e90:	3825883a 	mov	r18,r7
 4011e94:	3027883a 	mov	r19,r6
 4011e98:	400b0280 	call	400b028 <__divsi3>
 4011e9c:	00c00044 	movi	r3,1
 4011ea0:	000b883a 	mov	r5,zero
 4011ea4:	1880030e 	bge	r3,r2,4011eb4 <__s2b+0x54>
 4011ea8:	18c7883a 	add	r3,r3,r3
 4011eac:	29400044 	addi	r5,r5,1
 4011eb0:	18bffd16 	blt	r3,r2,4011ea8 <__alt_data_end+0xfc011ea8>
 4011eb4:	8809883a 	mov	r4,r17
 4011eb8:	4011c480 	call	4011c48 <_Balloc>
 4011ebc:	d8c00717 	ldw	r3,28(sp)
 4011ec0:	10c00515 	stw	r3,20(r2)
 4011ec4:	00c00044 	movi	r3,1
 4011ec8:	10c00415 	stw	r3,16(r2)
 4011ecc:	00c00244 	movi	r3,9
 4011ed0:	1cc0210e 	bge	r3,r19,4011f58 <__s2b+0xf8>
 4011ed4:	80eb883a 	add	r21,r16,r3
 4011ed8:	a829883a 	mov	r20,r21
 4011edc:	84e1883a 	add	r16,r16,r19
 4011ee0:	a1c00007 	ldb	r7,0(r20)
 4011ee4:	01800284 	movi	r6,10
 4011ee8:	a5000044 	addi	r20,r20,1
 4011eec:	100b883a 	mov	r5,r2
 4011ef0:	39fff404 	addi	r7,r7,-48
 4011ef4:	8809883a 	mov	r4,r17
 4011ef8:	4011d180 	call	4011d18 <__multadd>
 4011efc:	a43ff81e 	bne	r20,r16,4011ee0 <__alt_data_end+0xfc011ee0>
 4011f00:	ace1883a 	add	r16,r21,r19
 4011f04:	843ffe04 	addi	r16,r16,-8
 4011f08:	9c800a0e 	bge	r19,r18,4011f34 <__s2b+0xd4>
 4011f0c:	94e5c83a 	sub	r18,r18,r19
 4011f10:	84a5883a 	add	r18,r16,r18
 4011f14:	81c00007 	ldb	r7,0(r16)
 4011f18:	01800284 	movi	r6,10
 4011f1c:	84000044 	addi	r16,r16,1
 4011f20:	100b883a 	mov	r5,r2
 4011f24:	39fff404 	addi	r7,r7,-48
 4011f28:	8809883a 	mov	r4,r17
 4011f2c:	4011d180 	call	4011d18 <__multadd>
 4011f30:	84bff81e 	bne	r16,r18,4011f14 <__alt_data_end+0xfc011f14>
 4011f34:	dfc00617 	ldw	ra,24(sp)
 4011f38:	dd400517 	ldw	r21,20(sp)
 4011f3c:	dd000417 	ldw	r20,16(sp)
 4011f40:	dcc00317 	ldw	r19,12(sp)
 4011f44:	dc800217 	ldw	r18,8(sp)
 4011f48:	dc400117 	ldw	r17,4(sp)
 4011f4c:	dc000017 	ldw	r16,0(sp)
 4011f50:	dec00704 	addi	sp,sp,28
 4011f54:	f800283a 	ret
 4011f58:	84000284 	addi	r16,r16,10
 4011f5c:	1827883a 	mov	r19,r3
 4011f60:	003fe906 	br	4011f08 <__alt_data_end+0xfc011f08>

04011f64 <__hi0bits>:
 4011f64:	20bfffec 	andhi	r2,r4,65535
 4011f68:	1000141e 	bne	r2,zero,4011fbc <__hi0bits+0x58>
 4011f6c:	2008943a 	slli	r4,r4,16
 4011f70:	00800404 	movi	r2,16
 4011f74:	20ffc02c 	andhi	r3,r4,65280
 4011f78:	1800021e 	bne	r3,zero,4011f84 <__hi0bits+0x20>
 4011f7c:	2008923a 	slli	r4,r4,8
 4011f80:	10800204 	addi	r2,r2,8
 4011f84:	20fc002c 	andhi	r3,r4,61440
 4011f88:	1800021e 	bne	r3,zero,4011f94 <__hi0bits+0x30>
 4011f8c:	2008913a 	slli	r4,r4,4
 4011f90:	10800104 	addi	r2,r2,4
 4011f94:	20f0002c 	andhi	r3,r4,49152
 4011f98:	1800031e 	bne	r3,zero,4011fa8 <__hi0bits+0x44>
 4011f9c:	2109883a 	add	r4,r4,r4
 4011fa0:	10800084 	addi	r2,r2,2
 4011fa4:	2109883a 	add	r4,r4,r4
 4011fa8:	20000316 	blt	r4,zero,4011fb8 <__hi0bits+0x54>
 4011fac:	2110002c 	andhi	r4,r4,16384
 4011fb0:	2000041e 	bne	r4,zero,4011fc4 <__hi0bits+0x60>
 4011fb4:	00800804 	movi	r2,32
 4011fb8:	f800283a 	ret
 4011fbc:	0005883a 	mov	r2,zero
 4011fc0:	003fec06 	br	4011f74 <__alt_data_end+0xfc011f74>
 4011fc4:	10800044 	addi	r2,r2,1
 4011fc8:	f800283a 	ret

04011fcc <__lo0bits>:
 4011fcc:	20c00017 	ldw	r3,0(r4)
 4011fd0:	188001cc 	andi	r2,r3,7
 4011fd4:	10000826 	beq	r2,zero,4011ff8 <__lo0bits+0x2c>
 4011fd8:	1880004c 	andi	r2,r3,1
 4011fdc:	1000211e 	bne	r2,zero,4012064 <__lo0bits+0x98>
 4011fe0:	1880008c 	andi	r2,r3,2
 4011fe4:	1000211e 	bne	r2,zero,401206c <__lo0bits+0xa0>
 4011fe8:	1806d0ba 	srli	r3,r3,2
 4011fec:	00800084 	movi	r2,2
 4011ff0:	20c00015 	stw	r3,0(r4)
 4011ff4:	f800283a 	ret
 4011ff8:	18bfffcc 	andi	r2,r3,65535
 4011ffc:	10001326 	beq	r2,zero,401204c <__lo0bits+0x80>
 4012000:	0005883a 	mov	r2,zero
 4012004:	19403fcc 	andi	r5,r3,255
 4012008:	2800021e 	bne	r5,zero,4012014 <__lo0bits+0x48>
 401200c:	1806d23a 	srli	r3,r3,8
 4012010:	10800204 	addi	r2,r2,8
 4012014:	194003cc 	andi	r5,r3,15
 4012018:	2800021e 	bne	r5,zero,4012024 <__lo0bits+0x58>
 401201c:	1806d13a 	srli	r3,r3,4
 4012020:	10800104 	addi	r2,r2,4
 4012024:	194000cc 	andi	r5,r3,3
 4012028:	2800021e 	bne	r5,zero,4012034 <__lo0bits+0x68>
 401202c:	1806d0ba 	srli	r3,r3,2
 4012030:	10800084 	addi	r2,r2,2
 4012034:	1940004c 	andi	r5,r3,1
 4012038:	2800081e 	bne	r5,zero,401205c <__lo0bits+0x90>
 401203c:	1806d07a 	srli	r3,r3,1
 4012040:	1800051e 	bne	r3,zero,4012058 <__lo0bits+0x8c>
 4012044:	00800804 	movi	r2,32
 4012048:	f800283a 	ret
 401204c:	1806d43a 	srli	r3,r3,16
 4012050:	00800404 	movi	r2,16
 4012054:	003feb06 	br	4012004 <__alt_data_end+0xfc012004>
 4012058:	10800044 	addi	r2,r2,1
 401205c:	20c00015 	stw	r3,0(r4)
 4012060:	f800283a 	ret
 4012064:	0005883a 	mov	r2,zero
 4012068:	f800283a 	ret
 401206c:	1806d07a 	srli	r3,r3,1
 4012070:	00800044 	movi	r2,1
 4012074:	20c00015 	stw	r3,0(r4)
 4012078:	f800283a 	ret

0401207c <__i2b>:
 401207c:	defffd04 	addi	sp,sp,-12
 4012080:	dc000015 	stw	r16,0(sp)
 4012084:	04000044 	movi	r16,1
 4012088:	dc400115 	stw	r17,4(sp)
 401208c:	2823883a 	mov	r17,r5
 4012090:	800b883a 	mov	r5,r16
 4012094:	dfc00215 	stw	ra,8(sp)
 4012098:	4011c480 	call	4011c48 <_Balloc>
 401209c:	14400515 	stw	r17,20(r2)
 40120a0:	14000415 	stw	r16,16(r2)
 40120a4:	dfc00217 	ldw	ra,8(sp)
 40120a8:	dc400117 	ldw	r17,4(sp)
 40120ac:	dc000017 	ldw	r16,0(sp)
 40120b0:	dec00304 	addi	sp,sp,12
 40120b4:	f800283a 	ret

040120b8 <__multiply>:
 40120b8:	deffef04 	addi	sp,sp,-68
 40120bc:	dc400815 	stw	r17,32(sp)
 40120c0:	dc000715 	stw	r16,28(sp)
 40120c4:	34400417 	ldw	r17,16(r6)
 40120c8:	2c000417 	ldw	r16,16(r5)
 40120cc:	dd800d15 	stw	r22,52(sp)
 40120d0:	dc800915 	stw	r18,36(sp)
 40120d4:	dfc01015 	stw	ra,64(sp)
 40120d8:	df000f15 	stw	fp,60(sp)
 40120dc:	ddc00e15 	stw	r23,56(sp)
 40120e0:	dd400c15 	stw	r21,48(sp)
 40120e4:	dd000b15 	stw	r20,44(sp)
 40120e8:	dcc00a15 	stw	r19,40(sp)
 40120ec:	2825883a 	mov	r18,r5
 40120f0:	302d883a 	mov	r22,r6
 40120f4:	8440050e 	bge	r16,r17,401210c <__multiply+0x54>
 40120f8:	8007883a 	mov	r3,r16
 40120fc:	3025883a 	mov	r18,r6
 4012100:	8821883a 	mov	r16,r17
 4012104:	282d883a 	mov	r22,r5
 4012108:	1823883a 	mov	r17,r3
 401210c:	90800217 	ldw	r2,8(r18)
 4012110:	8447883a 	add	r3,r16,r17
 4012114:	d8c00215 	stw	r3,8(sp)
 4012118:	91400117 	ldw	r5,4(r18)
 401211c:	10c0010e 	bge	r2,r3,4012124 <__multiply+0x6c>
 4012120:	29400044 	addi	r5,r5,1
 4012124:	4011c480 	call	4011c48 <_Balloc>
 4012128:	d8c00217 	ldw	r3,8(sp)
 401212c:	d8800615 	stw	r2,24(sp)
 4012130:	18eb883a 	add	r21,r3,r3
 4012134:	ad6b883a 	add	r21,r21,r21
 4012138:	10c00504 	addi	r3,r2,20
 401213c:	1d6b883a 	add	r21,r3,r21
 4012140:	d8c00115 	stw	r3,4(sp)
 4012144:	dd400315 	stw	r21,12(sp)
 4012148:	1805883a 	mov	r2,r3
 401214c:	1d40042e 	bgeu	r3,r21,4012160 <__multiply+0xa8>
 4012150:	d8c00317 	ldw	r3,12(sp)
 4012154:	10000015 	stw	zero,0(r2)
 4012158:	10800104 	addi	r2,r2,4
 401215c:	10fffc36 	bltu	r2,r3,4012150 <__alt_data_end+0xfc012150>
 4012160:	8c63883a 	add	r17,r17,r17
 4012164:	b5800504 	addi	r22,r22,20
 4012168:	8c63883a 	add	r17,r17,r17
 401216c:	94800504 	addi	r18,r18,20
 4012170:	8421883a 	add	r16,r16,r16
 4012174:	b463883a 	add	r17,r22,r17
 4012178:	8421883a 	add	r16,r16,r16
 401217c:	dd800015 	stw	r22,0(sp)
 4012180:	dc800415 	stw	r18,16(sp)
 4012184:	dc400515 	stw	r17,20(sp)
 4012188:	9429883a 	add	r20,r18,r16
 401218c:	b4404f2e 	bgeu	r22,r17,40122cc <__multiply+0x214>
 4012190:	d8c00017 	ldw	r3,0(sp)
 4012194:	1c800017 	ldw	r18,0(r3)
 4012198:	947fffcc 	andi	r17,r18,65535
 401219c:	88001e26 	beq	r17,zero,4012218 <__multiply+0x160>
 40121a0:	dd800117 	ldw	r22,4(sp)
 40121a4:	dd400417 	ldw	r21,16(sp)
 40121a8:	0027883a 	mov	r19,zero
 40121ac:	ac800017 	ldw	r18,0(r21)
 40121b0:	b4000017 	ldw	r16,0(r22)
 40121b4:	880b883a 	mov	r5,r17
 40121b8:	913fffcc 	andi	r4,r18,65535
 40121bc:	400b1dc0 	call	400b1dc <__mulsi3>
 40121c0:	9008d43a 	srli	r4,r18,16
 40121c4:	84bfffcc 	andi	r18,r16,65535
 40121c8:	1485883a 	add	r2,r2,r18
 40121cc:	14e5883a 	add	r18,r2,r19
 40121d0:	8020d43a 	srli	r16,r16,16
 40121d4:	9026d43a 	srli	r19,r18,16
 40121d8:	880b883a 	mov	r5,r17
 40121dc:	400b1dc0 	call	400b1dc <__mulsi3>
 40121e0:	1405883a 	add	r2,r2,r16
 40121e4:	14e1883a 	add	r16,r2,r19
 40121e8:	90ffffcc 	andi	r3,r18,65535
 40121ec:	8024943a 	slli	r18,r16,16
 40121f0:	ad400104 	addi	r21,r21,4
 40121f4:	b005883a 	mov	r2,r22
 40121f8:	90c6b03a 	or	r3,r18,r3
 40121fc:	b0c00015 	stw	r3,0(r22)
 4012200:	8026d43a 	srli	r19,r16,16
 4012204:	b5800104 	addi	r22,r22,4
 4012208:	ad3fe836 	bltu	r21,r20,40121ac <__alt_data_end+0xfc0121ac>
 401220c:	d8c00017 	ldw	r3,0(sp)
 4012210:	14c00115 	stw	r19,4(r2)
 4012214:	1c800017 	ldw	r18,0(r3)
 4012218:	9024d43a 	srli	r18,r18,16
 401221c:	90002226 	beq	r18,zero,40122a8 <__multiply+0x1f0>
 4012220:	d8c00117 	ldw	r3,4(sp)
 4012224:	dd800417 	ldw	r22,16(sp)
 4012228:	002f883a 	mov	r23,zero
 401222c:	1f000017 	ldw	fp,0(r3)
 4012230:	1823883a 	mov	r17,r3
 4012234:	182b883a 	mov	r21,r3
 4012238:	e021883a 	mov	r16,fp
 401223c:	00000106 	br	4012244 <__multiply+0x18c>
 4012240:	982b883a 	mov	r21,r19
 4012244:	b100000b 	ldhu	r4,0(r22)
 4012248:	8020d43a 	srli	r16,r16,16
 401224c:	900b883a 	mov	r5,r18
 4012250:	400b1dc0 	call	400b1dc <__mulsi3>
 4012254:	1405883a 	add	r2,r2,r16
 4012258:	15ef883a 	add	r23,r2,r23
 401225c:	b804943a 	slli	r2,r23,16
 4012260:	e0ffffcc 	andi	r3,fp,65535
 4012264:	8c400104 	addi	r17,r17,4
 4012268:	10c6b03a 	or	r3,r2,r3
 401226c:	88ffff15 	stw	r3,-4(r17)
 4012270:	b5800104 	addi	r22,r22,4
 4012274:	b13fff17 	ldw	r4,-4(r22)
 4012278:	acc00104 	addi	r19,r21,4
 401227c:	900b883a 	mov	r5,r18
 4012280:	2008d43a 	srli	r4,r4,16
 4012284:	9c000017 	ldw	r16,0(r19)
 4012288:	400b1dc0 	call	400b1dc <__mulsi3>
 401228c:	b806d43a 	srli	r3,r23,16
 4012290:	813fffcc 	andi	r4,r16,65535
 4012294:	1105883a 	add	r2,r2,r4
 4012298:	10f9883a 	add	fp,r2,r3
 401229c:	e02ed43a 	srli	r23,fp,16
 40122a0:	b53fe736 	bltu	r22,r20,4012240 <__alt_data_end+0xfc012240>
 40122a4:	af000115 	stw	fp,4(r21)
 40122a8:	d8c00017 	ldw	r3,0(sp)
 40122ac:	d9000517 	ldw	r4,20(sp)
 40122b0:	18c00104 	addi	r3,r3,4
 40122b4:	d8c00015 	stw	r3,0(sp)
 40122b8:	d8c00117 	ldw	r3,4(sp)
 40122bc:	18c00104 	addi	r3,r3,4
 40122c0:	d8c00115 	stw	r3,4(sp)
 40122c4:	d8c00017 	ldw	r3,0(sp)
 40122c8:	193fb136 	bltu	r3,r4,4012190 <__alt_data_end+0xfc012190>
 40122cc:	d8c00217 	ldw	r3,8(sp)
 40122d0:	00c00c0e 	bge	zero,r3,4012304 <__multiply+0x24c>
 40122d4:	d8c00317 	ldw	r3,12(sp)
 40122d8:	18bfff17 	ldw	r2,-4(r3)
 40122dc:	1d7fff04 	addi	r21,r3,-4
 40122e0:	10000326 	beq	r2,zero,40122f0 <__multiply+0x238>
 40122e4:	00000706 	br	4012304 <__multiply+0x24c>
 40122e8:	a8800017 	ldw	r2,0(r21)
 40122ec:	1000051e 	bne	r2,zero,4012304 <__multiply+0x24c>
 40122f0:	d8c00217 	ldw	r3,8(sp)
 40122f4:	ad7fff04 	addi	r21,r21,-4
 40122f8:	18ffffc4 	addi	r3,r3,-1
 40122fc:	d8c00215 	stw	r3,8(sp)
 4012300:	183ff91e 	bne	r3,zero,40122e8 <__alt_data_end+0xfc0122e8>
 4012304:	d8c00617 	ldw	r3,24(sp)
 4012308:	d9000217 	ldw	r4,8(sp)
 401230c:	1805883a 	mov	r2,r3
 4012310:	19000415 	stw	r4,16(r3)
 4012314:	dfc01017 	ldw	ra,64(sp)
 4012318:	df000f17 	ldw	fp,60(sp)
 401231c:	ddc00e17 	ldw	r23,56(sp)
 4012320:	dd800d17 	ldw	r22,52(sp)
 4012324:	dd400c17 	ldw	r21,48(sp)
 4012328:	dd000b17 	ldw	r20,44(sp)
 401232c:	dcc00a17 	ldw	r19,40(sp)
 4012330:	dc800917 	ldw	r18,36(sp)
 4012334:	dc400817 	ldw	r17,32(sp)
 4012338:	dc000717 	ldw	r16,28(sp)
 401233c:	dec01104 	addi	sp,sp,68
 4012340:	f800283a 	ret

04012344 <__pow5mult>:
 4012344:	defffa04 	addi	sp,sp,-24
 4012348:	dcc00315 	stw	r19,12(sp)
 401234c:	dc000015 	stw	r16,0(sp)
 4012350:	dfc00515 	stw	ra,20(sp)
 4012354:	dd000415 	stw	r20,16(sp)
 4012358:	dc800215 	stw	r18,8(sp)
 401235c:	dc400115 	stw	r17,4(sp)
 4012360:	308000cc 	andi	r2,r6,3
 4012364:	3021883a 	mov	r16,r6
 4012368:	2027883a 	mov	r19,r4
 401236c:	10002f1e 	bne	r2,zero,401242c <__pow5mult+0xe8>
 4012370:	2825883a 	mov	r18,r5
 4012374:	8021d0ba 	srai	r16,r16,2
 4012378:	80001a26 	beq	r16,zero,40123e4 <__pow5mult+0xa0>
 401237c:	9c401217 	ldw	r17,72(r19)
 4012380:	8800061e 	bne	r17,zero,401239c <__pow5mult+0x58>
 4012384:	00003406 	br	4012458 <__pow5mult+0x114>
 4012388:	8021d07a 	srai	r16,r16,1
 401238c:	80001526 	beq	r16,zero,40123e4 <__pow5mult+0xa0>
 4012390:	88800017 	ldw	r2,0(r17)
 4012394:	10001c26 	beq	r2,zero,4012408 <__pow5mult+0xc4>
 4012398:	1023883a 	mov	r17,r2
 401239c:	8080004c 	andi	r2,r16,1
 40123a0:	103ff926 	beq	r2,zero,4012388 <__alt_data_end+0xfc012388>
 40123a4:	880d883a 	mov	r6,r17
 40123a8:	900b883a 	mov	r5,r18
 40123ac:	9809883a 	mov	r4,r19
 40123b0:	40120b80 	call	40120b8 <__multiply>
 40123b4:	90001b26 	beq	r18,zero,4012424 <__pow5mult+0xe0>
 40123b8:	91000117 	ldw	r4,4(r18)
 40123bc:	98c01317 	ldw	r3,76(r19)
 40123c0:	8021d07a 	srai	r16,r16,1
 40123c4:	2109883a 	add	r4,r4,r4
 40123c8:	2109883a 	add	r4,r4,r4
 40123cc:	1907883a 	add	r3,r3,r4
 40123d0:	19000017 	ldw	r4,0(r3)
 40123d4:	91000015 	stw	r4,0(r18)
 40123d8:	1c800015 	stw	r18,0(r3)
 40123dc:	1025883a 	mov	r18,r2
 40123e0:	803feb1e 	bne	r16,zero,4012390 <__alt_data_end+0xfc012390>
 40123e4:	9005883a 	mov	r2,r18
 40123e8:	dfc00517 	ldw	ra,20(sp)
 40123ec:	dd000417 	ldw	r20,16(sp)
 40123f0:	dcc00317 	ldw	r19,12(sp)
 40123f4:	dc800217 	ldw	r18,8(sp)
 40123f8:	dc400117 	ldw	r17,4(sp)
 40123fc:	dc000017 	ldw	r16,0(sp)
 4012400:	dec00604 	addi	sp,sp,24
 4012404:	f800283a 	ret
 4012408:	880d883a 	mov	r6,r17
 401240c:	880b883a 	mov	r5,r17
 4012410:	9809883a 	mov	r4,r19
 4012414:	40120b80 	call	40120b8 <__multiply>
 4012418:	88800015 	stw	r2,0(r17)
 401241c:	10000015 	stw	zero,0(r2)
 4012420:	003fdd06 	br	4012398 <__alt_data_end+0xfc012398>
 4012424:	1025883a 	mov	r18,r2
 4012428:	003fd706 	br	4012388 <__alt_data_end+0xfc012388>
 401242c:	10bfffc4 	addi	r2,r2,-1
 4012430:	1085883a 	add	r2,r2,r2
 4012434:	00c100b4 	movhi	r3,1026
 4012438:	18f3ea04 	addi	r3,r3,-12376
 401243c:	1085883a 	add	r2,r2,r2
 4012440:	1885883a 	add	r2,r3,r2
 4012444:	11800017 	ldw	r6,0(r2)
 4012448:	000f883a 	mov	r7,zero
 401244c:	4011d180 	call	4011d18 <__multadd>
 4012450:	1025883a 	mov	r18,r2
 4012454:	003fc706 	br	4012374 <__alt_data_end+0xfc012374>
 4012458:	05000044 	movi	r20,1
 401245c:	a00b883a 	mov	r5,r20
 4012460:	9809883a 	mov	r4,r19
 4012464:	4011c480 	call	4011c48 <_Balloc>
 4012468:	1023883a 	mov	r17,r2
 401246c:	00809c44 	movi	r2,625
 4012470:	88800515 	stw	r2,20(r17)
 4012474:	8d000415 	stw	r20,16(r17)
 4012478:	9c401215 	stw	r17,72(r19)
 401247c:	88000015 	stw	zero,0(r17)
 4012480:	003fc606 	br	401239c <__alt_data_end+0xfc01239c>

04012484 <__lshift>:
 4012484:	defff904 	addi	sp,sp,-28
 4012488:	dd400515 	stw	r21,20(sp)
 401248c:	dcc00315 	stw	r19,12(sp)
 4012490:	302bd17a 	srai	r21,r6,5
 4012494:	2cc00417 	ldw	r19,16(r5)
 4012498:	28800217 	ldw	r2,8(r5)
 401249c:	dd000415 	stw	r20,16(sp)
 40124a0:	ace7883a 	add	r19,r21,r19
 40124a4:	dc800215 	stw	r18,8(sp)
 40124a8:	dc400115 	stw	r17,4(sp)
 40124ac:	dc000015 	stw	r16,0(sp)
 40124b0:	dfc00615 	stw	ra,24(sp)
 40124b4:	9c000044 	addi	r16,r19,1
 40124b8:	2823883a 	mov	r17,r5
 40124bc:	3029883a 	mov	r20,r6
 40124c0:	2025883a 	mov	r18,r4
 40124c4:	29400117 	ldw	r5,4(r5)
 40124c8:	1400030e 	bge	r2,r16,40124d8 <__lshift+0x54>
 40124cc:	1085883a 	add	r2,r2,r2
 40124d0:	29400044 	addi	r5,r5,1
 40124d4:	143ffd16 	blt	r2,r16,40124cc <__alt_data_end+0xfc0124cc>
 40124d8:	9009883a 	mov	r4,r18
 40124dc:	4011c480 	call	4011c48 <_Balloc>
 40124e0:	10c00504 	addi	r3,r2,20
 40124e4:	0540070e 	bge	zero,r21,4012504 <__lshift+0x80>
 40124e8:	ad6b883a 	add	r21,r21,r21
 40124ec:	ad6b883a 	add	r21,r21,r21
 40124f0:	1809883a 	mov	r4,r3
 40124f4:	1d47883a 	add	r3,r3,r21
 40124f8:	20000015 	stw	zero,0(r4)
 40124fc:	21000104 	addi	r4,r4,4
 4012500:	193ffd1e 	bne	r3,r4,40124f8 <__alt_data_end+0xfc0124f8>
 4012504:	8a000417 	ldw	r8,16(r17)
 4012508:	89000504 	addi	r4,r17,20
 401250c:	a18007cc 	andi	r6,r20,31
 4012510:	4211883a 	add	r8,r8,r8
 4012514:	4211883a 	add	r8,r8,r8
 4012518:	2211883a 	add	r8,r4,r8
 401251c:	30002326 	beq	r6,zero,40125ac <__lshift+0x128>
 4012520:	02400804 	movi	r9,32
 4012524:	4993c83a 	sub	r9,r9,r6
 4012528:	000b883a 	mov	r5,zero
 401252c:	21c00017 	ldw	r7,0(r4)
 4012530:	1815883a 	mov	r10,r3
 4012534:	18c00104 	addi	r3,r3,4
 4012538:	398e983a 	sll	r7,r7,r6
 401253c:	21000104 	addi	r4,r4,4
 4012540:	394ab03a 	or	r5,r7,r5
 4012544:	197fff15 	stw	r5,-4(r3)
 4012548:	217fff17 	ldw	r5,-4(r4)
 401254c:	2a4ad83a 	srl	r5,r5,r9
 4012550:	223ff636 	bltu	r4,r8,401252c <__alt_data_end+0xfc01252c>
 4012554:	51400115 	stw	r5,4(r10)
 4012558:	28001a1e 	bne	r5,zero,40125c4 <__lshift+0x140>
 401255c:	843fffc4 	addi	r16,r16,-1
 4012560:	14000415 	stw	r16,16(r2)
 4012564:	88000826 	beq	r17,zero,4012588 <__lshift+0x104>
 4012568:	89000117 	ldw	r4,4(r17)
 401256c:	90c01317 	ldw	r3,76(r18)
 4012570:	2109883a 	add	r4,r4,r4
 4012574:	2109883a 	add	r4,r4,r4
 4012578:	1907883a 	add	r3,r3,r4
 401257c:	19000017 	ldw	r4,0(r3)
 4012580:	89000015 	stw	r4,0(r17)
 4012584:	1c400015 	stw	r17,0(r3)
 4012588:	dfc00617 	ldw	ra,24(sp)
 401258c:	dd400517 	ldw	r21,20(sp)
 4012590:	dd000417 	ldw	r20,16(sp)
 4012594:	dcc00317 	ldw	r19,12(sp)
 4012598:	dc800217 	ldw	r18,8(sp)
 401259c:	dc400117 	ldw	r17,4(sp)
 40125a0:	dc000017 	ldw	r16,0(sp)
 40125a4:	dec00704 	addi	sp,sp,28
 40125a8:	f800283a 	ret
 40125ac:	21400017 	ldw	r5,0(r4)
 40125b0:	18c00104 	addi	r3,r3,4
 40125b4:	21000104 	addi	r4,r4,4
 40125b8:	197fff15 	stw	r5,-4(r3)
 40125bc:	223ffb36 	bltu	r4,r8,40125ac <__alt_data_end+0xfc0125ac>
 40125c0:	003fe606 	br	401255c <__alt_data_end+0xfc01255c>
 40125c4:	9c000084 	addi	r16,r19,2
 40125c8:	003fe406 	br	401255c <__alt_data_end+0xfc01255c>

040125cc <__mcmp>:
 40125cc:	20800417 	ldw	r2,16(r4)
 40125d0:	28c00417 	ldw	r3,16(r5)
 40125d4:	10c5c83a 	sub	r2,r2,r3
 40125d8:	1000111e 	bne	r2,zero,4012620 <__mcmp+0x54>
 40125dc:	18c7883a 	add	r3,r3,r3
 40125e0:	18c7883a 	add	r3,r3,r3
 40125e4:	21000504 	addi	r4,r4,20
 40125e8:	29400504 	addi	r5,r5,20
 40125ec:	20c5883a 	add	r2,r4,r3
 40125f0:	28cb883a 	add	r5,r5,r3
 40125f4:	00000106 	br	40125fc <__mcmp+0x30>
 40125f8:	20800a2e 	bgeu	r4,r2,4012624 <__mcmp+0x58>
 40125fc:	10bfff04 	addi	r2,r2,-4
 4012600:	297fff04 	addi	r5,r5,-4
 4012604:	11800017 	ldw	r6,0(r2)
 4012608:	28c00017 	ldw	r3,0(r5)
 401260c:	30fffa26 	beq	r6,r3,40125f8 <__alt_data_end+0xfc0125f8>
 4012610:	30c00236 	bltu	r6,r3,401261c <__mcmp+0x50>
 4012614:	00800044 	movi	r2,1
 4012618:	f800283a 	ret
 401261c:	00bfffc4 	movi	r2,-1
 4012620:	f800283a 	ret
 4012624:	0005883a 	mov	r2,zero
 4012628:	f800283a 	ret

0401262c <__mdiff>:
 401262c:	28c00417 	ldw	r3,16(r5)
 4012630:	30800417 	ldw	r2,16(r6)
 4012634:	defffa04 	addi	sp,sp,-24
 4012638:	dcc00315 	stw	r19,12(sp)
 401263c:	dc800215 	stw	r18,8(sp)
 4012640:	dfc00515 	stw	ra,20(sp)
 4012644:	dd000415 	stw	r20,16(sp)
 4012648:	dc400115 	stw	r17,4(sp)
 401264c:	dc000015 	stw	r16,0(sp)
 4012650:	1887c83a 	sub	r3,r3,r2
 4012654:	2825883a 	mov	r18,r5
 4012658:	3027883a 	mov	r19,r6
 401265c:	1800141e 	bne	r3,zero,40126b0 <__mdiff+0x84>
 4012660:	1085883a 	add	r2,r2,r2
 4012664:	1085883a 	add	r2,r2,r2
 4012668:	2a000504 	addi	r8,r5,20
 401266c:	34000504 	addi	r16,r6,20
 4012670:	4087883a 	add	r3,r8,r2
 4012674:	8085883a 	add	r2,r16,r2
 4012678:	00000106 	br	4012680 <__mdiff+0x54>
 401267c:	40c0592e 	bgeu	r8,r3,40127e4 <__mdiff+0x1b8>
 4012680:	18ffff04 	addi	r3,r3,-4
 4012684:	10bfff04 	addi	r2,r2,-4
 4012688:	19c00017 	ldw	r7,0(r3)
 401268c:	11400017 	ldw	r5,0(r2)
 4012690:	397ffa26 	beq	r7,r5,401267c <__alt_data_end+0xfc01267c>
 4012694:	3940592e 	bgeu	r7,r5,40127fc <__mdiff+0x1d0>
 4012698:	9005883a 	mov	r2,r18
 401269c:	4023883a 	mov	r17,r8
 40126a0:	9825883a 	mov	r18,r19
 40126a4:	05000044 	movi	r20,1
 40126a8:	1027883a 	mov	r19,r2
 40126ac:	00000406 	br	40126c0 <__mdiff+0x94>
 40126b0:	18005616 	blt	r3,zero,401280c <__mdiff+0x1e0>
 40126b4:	34400504 	addi	r17,r6,20
 40126b8:	2c000504 	addi	r16,r5,20
 40126bc:	0029883a 	mov	r20,zero
 40126c0:	91400117 	ldw	r5,4(r18)
 40126c4:	4011c480 	call	4011c48 <_Balloc>
 40126c8:	92400417 	ldw	r9,16(r18)
 40126cc:	9b000417 	ldw	r12,16(r19)
 40126d0:	12c00504 	addi	r11,r2,20
 40126d4:	4a51883a 	add	r8,r9,r9
 40126d8:	6319883a 	add	r12,r12,r12
 40126dc:	4211883a 	add	r8,r8,r8
 40126e0:	6319883a 	add	r12,r12,r12
 40126e4:	15000315 	stw	r20,12(r2)
 40126e8:	8211883a 	add	r8,r16,r8
 40126ec:	8b19883a 	add	r12,r17,r12
 40126f0:	0007883a 	mov	r3,zero
 40126f4:	81400017 	ldw	r5,0(r16)
 40126f8:	89c00017 	ldw	r7,0(r17)
 40126fc:	59800104 	addi	r6,r11,4
 4012700:	293fffcc 	andi	r4,r5,65535
 4012704:	20c7883a 	add	r3,r4,r3
 4012708:	393fffcc 	andi	r4,r7,65535
 401270c:	1909c83a 	sub	r4,r3,r4
 4012710:	280ad43a 	srli	r5,r5,16
 4012714:	380ed43a 	srli	r7,r7,16
 4012718:	2007d43a 	srai	r3,r4,16
 401271c:	213fffcc 	andi	r4,r4,65535
 4012720:	29cbc83a 	sub	r5,r5,r7
 4012724:	28c7883a 	add	r3,r5,r3
 4012728:	180a943a 	slli	r5,r3,16
 401272c:	8c400104 	addi	r17,r17,4
 4012730:	84000104 	addi	r16,r16,4
 4012734:	2908b03a 	or	r4,r5,r4
 4012738:	59000015 	stw	r4,0(r11)
 401273c:	1807d43a 	srai	r3,r3,16
 4012740:	3015883a 	mov	r10,r6
 4012744:	3017883a 	mov	r11,r6
 4012748:	8b3fea36 	bltu	r17,r12,40126f4 <__alt_data_end+0xfc0126f4>
 401274c:	8200162e 	bgeu	r16,r8,40127a8 <__mdiff+0x17c>
 4012750:	8017883a 	mov	r11,r16
 4012754:	59400017 	ldw	r5,0(r11)
 4012758:	31800104 	addi	r6,r6,4
 401275c:	5ac00104 	addi	r11,r11,4
 4012760:	293fffcc 	andi	r4,r5,65535
 4012764:	20c7883a 	add	r3,r4,r3
 4012768:	280ed43a 	srli	r7,r5,16
 401276c:	180bd43a 	srai	r5,r3,16
 4012770:	193fffcc 	andi	r4,r3,65535
 4012774:	3947883a 	add	r3,r7,r5
 4012778:	180a943a 	slli	r5,r3,16
 401277c:	1807d43a 	srai	r3,r3,16
 4012780:	2908b03a 	or	r4,r5,r4
 4012784:	313fff15 	stw	r4,-4(r6)
 4012788:	5a3ff236 	bltu	r11,r8,4012754 <__alt_data_end+0xfc012754>
 401278c:	0406303a 	nor	r3,zero,r16
 4012790:	1a07883a 	add	r3,r3,r8
 4012794:	1806d0ba 	srli	r3,r3,2
 4012798:	18c00044 	addi	r3,r3,1
 401279c:	18c7883a 	add	r3,r3,r3
 40127a0:	18c7883a 	add	r3,r3,r3
 40127a4:	50d5883a 	add	r10,r10,r3
 40127a8:	50ffff04 	addi	r3,r10,-4
 40127ac:	2000041e 	bne	r4,zero,40127c0 <__mdiff+0x194>
 40127b0:	18ffff04 	addi	r3,r3,-4
 40127b4:	19000017 	ldw	r4,0(r3)
 40127b8:	4a7fffc4 	addi	r9,r9,-1
 40127bc:	203ffc26 	beq	r4,zero,40127b0 <__alt_data_end+0xfc0127b0>
 40127c0:	12400415 	stw	r9,16(r2)
 40127c4:	dfc00517 	ldw	ra,20(sp)
 40127c8:	dd000417 	ldw	r20,16(sp)
 40127cc:	dcc00317 	ldw	r19,12(sp)
 40127d0:	dc800217 	ldw	r18,8(sp)
 40127d4:	dc400117 	ldw	r17,4(sp)
 40127d8:	dc000017 	ldw	r16,0(sp)
 40127dc:	dec00604 	addi	sp,sp,24
 40127e0:	f800283a 	ret
 40127e4:	000b883a 	mov	r5,zero
 40127e8:	4011c480 	call	4011c48 <_Balloc>
 40127ec:	00c00044 	movi	r3,1
 40127f0:	10c00415 	stw	r3,16(r2)
 40127f4:	10000515 	stw	zero,20(r2)
 40127f8:	003ff206 	br	40127c4 <__alt_data_end+0xfc0127c4>
 40127fc:	8023883a 	mov	r17,r16
 4012800:	0029883a 	mov	r20,zero
 4012804:	4021883a 	mov	r16,r8
 4012808:	003fad06 	br	40126c0 <__alt_data_end+0xfc0126c0>
 401280c:	9005883a 	mov	r2,r18
 4012810:	94400504 	addi	r17,r18,20
 4012814:	9c000504 	addi	r16,r19,20
 4012818:	9825883a 	mov	r18,r19
 401281c:	05000044 	movi	r20,1
 4012820:	1027883a 	mov	r19,r2
 4012824:	003fa606 	br	40126c0 <__alt_data_end+0xfc0126c0>

04012828 <__ulp>:
 4012828:	295ffc2c 	andhi	r5,r5,32752
 401282c:	00bf3034 	movhi	r2,64704
 4012830:	2887883a 	add	r3,r5,r2
 4012834:	00c0020e 	bge	zero,r3,4012840 <__ulp+0x18>
 4012838:	0005883a 	mov	r2,zero
 401283c:	f800283a 	ret
 4012840:	00c7c83a 	sub	r3,zero,r3
 4012844:	1807d53a 	srai	r3,r3,20
 4012848:	008004c4 	movi	r2,19
 401284c:	10c00b0e 	bge	r2,r3,401287c <__ulp+0x54>
 4012850:	18bffb04 	addi	r2,r3,-20
 4012854:	01000784 	movi	r4,30
 4012858:	0007883a 	mov	r3,zero
 401285c:	20800516 	blt	r4,r2,4012874 <__ulp+0x4c>
 4012860:	010007c4 	movi	r4,31
 4012864:	2089c83a 	sub	r4,r4,r2
 4012868:	00800044 	movi	r2,1
 401286c:	1104983a 	sll	r2,r2,r4
 4012870:	f800283a 	ret
 4012874:	00800044 	movi	r2,1
 4012878:	f800283a 	ret
 401287c:	01400234 	movhi	r5,8
 4012880:	28c7d83a 	sra	r3,r5,r3
 4012884:	0005883a 	mov	r2,zero
 4012888:	f800283a 	ret

0401288c <__b2d>:
 401288c:	defffa04 	addi	sp,sp,-24
 4012890:	dc000015 	stw	r16,0(sp)
 4012894:	24000417 	ldw	r16,16(r4)
 4012898:	dc400115 	stw	r17,4(sp)
 401289c:	24400504 	addi	r17,r4,20
 40128a0:	8421883a 	add	r16,r16,r16
 40128a4:	8421883a 	add	r16,r16,r16
 40128a8:	8c21883a 	add	r16,r17,r16
 40128ac:	dc800215 	stw	r18,8(sp)
 40128b0:	84bfff17 	ldw	r18,-4(r16)
 40128b4:	dd000415 	stw	r20,16(sp)
 40128b8:	dcc00315 	stw	r19,12(sp)
 40128bc:	9009883a 	mov	r4,r18
 40128c0:	2829883a 	mov	r20,r5
 40128c4:	dfc00515 	stw	ra,20(sp)
 40128c8:	4011f640 	call	4011f64 <__hi0bits>
 40128cc:	00c00804 	movi	r3,32
 40128d0:	1889c83a 	sub	r4,r3,r2
 40128d4:	a1000015 	stw	r4,0(r20)
 40128d8:	01000284 	movi	r4,10
 40128dc:	84ffff04 	addi	r19,r16,-4
 40128e0:	20801216 	blt	r4,r2,401292c <__b2d+0xa0>
 40128e4:	018002c4 	movi	r6,11
 40128e8:	308dc83a 	sub	r6,r6,r2
 40128ec:	9186d83a 	srl	r3,r18,r6
 40128f0:	18cffc34 	orhi	r3,r3,16368
 40128f4:	8cc0212e 	bgeu	r17,r19,401297c <__b2d+0xf0>
 40128f8:	813ffe17 	ldw	r4,-8(r16)
 40128fc:	218cd83a 	srl	r6,r4,r6
 4012900:	10800544 	addi	r2,r2,21
 4012904:	9084983a 	sll	r2,r18,r2
 4012908:	1184b03a 	or	r2,r2,r6
 401290c:	dfc00517 	ldw	ra,20(sp)
 4012910:	dd000417 	ldw	r20,16(sp)
 4012914:	dcc00317 	ldw	r19,12(sp)
 4012918:	dc800217 	ldw	r18,8(sp)
 401291c:	dc400117 	ldw	r17,4(sp)
 4012920:	dc000017 	ldw	r16,0(sp)
 4012924:	dec00604 	addi	sp,sp,24
 4012928:	f800283a 	ret
 401292c:	8cc00f2e 	bgeu	r17,r19,401296c <__b2d+0xe0>
 4012930:	117ffd44 	addi	r5,r2,-11
 4012934:	80bffe17 	ldw	r2,-8(r16)
 4012938:	28000e26 	beq	r5,zero,4012974 <__b2d+0xe8>
 401293c:	1949c83a 	sub	r4,r3,r5
 4012940:	9164983a 	sll	r18,r18,r5
 4012944:	1106d83a 	srl	r3,r2,r4
 4012948:	81bffe04 	addi	r6,r16,-8
 401294c:	948ffc34 	orhi	r18,r18,16368
 4012950:	90c6b03a 	or	r3,r18,r3
 4012954:	89800e2e 	bgeu	r17,r6,4012990 <__b2d+0x104>
 4012958:	81bffd17 	ldw	r6,-12(r16)
 401295c:	1144983a 	sll	r2,r2,r5
 4012960:	310ad83a 	srl	r5,r6,r4
 4012964:	2884b03a 	or	r2,r5,r2
 4012968:	003fe806 	br	401290c <__alt_data_end+0xfc01290c>
 401296c:	10bffd44 	addi	r2,r2,-11
 4012970:	1000041e 	bne	r2,zero,4012984 <__b2d+0xf8>
 4012974:	90cffc34 	orhi	r3,r18,16368
 4012978:	003fe406 	br	401290c <__alt_data_end+0xfc01290c>
 401297c:	000d883a 	mov	r6,zero
 4012980:	003fdf06 	br	4012900 <__alt_data_end+0xfc012900>
 4012984:	90a4983a 	sll	r18,r18,r2
 4012988:	0005883a 	mov	r2,zero
 401298c:	003ff906 	br	4012974 <__alt_data_end+0xfc012974>
 4012990:	1144983a 	sll	r2,r2,r5
 4012994:	003fdd06 	br	401290c <__alt_data_end+0xfc01290c>

04012998 <__d2b>:
 4012998:	defff804 	addi	sp,sp,-32
 401299c:	dc000215 	stw	r16,8(sp)
 40129a0:	3021883a 	mov	r16,r6
 40129a4:	dc400315 	stw	r17,12(sp)
 40129a8:	8022907a 	slli	r17,r16,1
 40129ac:	dd000615 	stw	r20,24(sp)
 40129b0:	2829883a 	mov	r20,r5
 40129b4:	01400044 	movi	r5,1
 40129b8:	dcc00515 	stw	r19,20(sp)
 40129bc:	dc800415 	stw	r18,16(sp)
 40129c0:	dfc00715 	stw	ra,28(sp)
 40129c4:	3825883a 	mov	r18,r7
 40129c8:	8822d57a 	srli	r17,r17,21
 40129cc:	4011c480 	call	4011c48 <_Balloc>
 40129d0:	1027883a 	mov	r19,r2
 40129d4:	00800434 	movhi	r2,16
 40129d8:	10bfffc4 	addi	r2,r2,-1
 40129dc:	808c703a 	and	r6,r16,r2
 40129e0:	88000126 	beq	r17,zero,40129e8 <__d2b+0x50>
 40129e4:	31800434 	orhi	r6,r6,16
 40129e8:	d9800015 	stw	r6,0(sp)
 40129ec:	a0002426 	beq	r20,zero,4012a80 <__d2b+0xe8>
 40129f0:	d9000104 	addi	r4,sp,4
 40129f4:	dd000115 	stw	r20,4(sp)
 40129f8:	4011fcc0 	call	4011fcc <__lo0bits>
 40129fc:	d8c00017 	ldw	r3,0(sp)
 4012a00:	10002f1e 	bne	r2,zero,4012ac0 <__d2b+0x128>
 4012a04:	d9000117 	ldw	r4,4(sp)
 4012a08:	99000515 	stw	r4,20(r19)
 4012a0c:	1821003a 	cmpeq	r16,r3,zero
 4012a10:	01000084 	movi	r4,2
 4012a14:	2421c83a 	sub	r16,r4,r16
 4012a18:	98c00615 	stw	r3,24(r19)
 4012a1c:	9c000415 	stw	r16,16(r19)
 4012a20:	88001f1e 	bne	r17,zero,4012aa0 <__d2b+0x108>
 4012a24:	10bef384 	addi	r2,r2,-1074
 4012a28:	90800015 	stw	r2,0(r18)
 4012a2c:	00900034 	movhi	r2,16384
 4012a30:	10bfffc4 	addi	r2,r2,-1
 4012a34:	8085883a 	add	r2,r16,r2
 4012a38:	1085883a 	add	r2,r2,r2
 4012a3c:	1085883a 	add	r2,r2,r2
 4012a40:	9885883a 	add	r2,r19,r2
 4012a44:	11000517 	ldw	r4,20(r2)
 4012a48:	8020917a 	slli	r16,r16,5
 4012a4c:	4011f640 	call	4011f64 <__hi0bits>
 4012a50:	d8c00817 	ldw	r3,32(sp)
 4012a54:	8085c83a 	sub	r2,r16,r2
 4012a58:	18800015 	stw	r2,0(r3)
 4012a5c:	9805883a 	mov	r2,r19
 4012a60:	dfc00717 	ldw	ra,28(sp)
 4012a64:	dd000617 	ldw	r20,24(sp)
 4012a68:	dcc00517 	ldw	r19,20(sp)
 4012a6c:	dc800417 	ldw	r18,16(sp)
 4012a70:	dc400317 	ldw	r17,12(sp)
 4012a74:	dc000217 	ldw	r16,8(sp)
 4012a78:	dec00804 	addi	sp,sp,32
 4012a7c:	f800283a 	ret
 4012a80:	d809883a 	mov	r4,sp
 4012a84:	4011fcc0 	call	4011fcc <__lo0bits>
 4012a88:	d8c00017 	ldw	r3,0(sp)
 4012a8c:	04000044 	movi	r16,1
 4012a90:	9c000415 	stw	r16,16(r19)
 4012a94:	98c00515 	stw	r3,20(r19)
 4012a98:	10800804 	addi	r2,r2,32
 4012a9c:	883fe126 	beq	r17,zero,4012a24 <__alt_data_end+0xfc012a24>
 4012aa0:	00c00d44 	movi	r3,53
 4012aa4:	8c7ef344 	addi	r17,r17,-1075
 4012aa8:	88a3883a 	add	r17,r17,r2
 4012aac:	1885c83a 	sub	r2,r3,r2
 4012ab0:	d8c00817 	ldw	r3,32(sp)
 4012ab4:	94400015 	stw	r17,0(r18)
 4012ab8:	18800015 	stw	r2,0(r3)
 4012abc:	003fe706 	br	4012a5c <__alt_data_end+0xfc012a5c>
 4012ac0:	01000804 	movi	r4,32
 4012ac4:	2089c83a 	sub	r4,r4,r2
 4012ac8:	1908983a 	sll	r4,r3,r4
 4012acc:	d9400117 	ldw	r5,4(sp)
 4012ad0:	1886d83a 	srl	r3,r3,r2
 4012ad4:	2148b03a 	or	r4,r4,r5
 4012ad8:	99000515 	stw	r4,20(r19)
 4012adc:	d8c00015 	stw	r3,0(sp)
 4012ae0:	003fca06 	br	4012a0c <__alt_data_end+0xfc012a0c>

04012ae4 <__ratio>:
 4012ae4:	defff904 	addi	sp,sp,-28
 4012ae8:	dc400315 	stw	r17,12(sp)
 4012aec:	2823883a 	mov	r17,r5
 4012af0:	d9400104 	addi	r5,sp,4
 4012af4:	dfc00615 	stw	ra,24(sp)
 4012af8:	dcc00515 	stw	r19,20(sp)
 4012afc:	dc800415 	stw	r18,16(sp)
 4012b00:	2027883a 	mov	r19,r4
 4012b04:	dc000215 	stw	r16,8(sp)
 4012b08:	401288c0 	call	401288c <__b2d>
 4012b0c:	d80b883a 	mov	r5,sp
 4012b10:	8809883a 	mov	r4,r17
 4012b14:	1025883a 	mov	r18,r2
 4012b18:	1821883a 	mov	r16,r3
 4012b1c:	401288c0 	call	401288c <__b2d>
 4012b20:	8a000417 	ldw	r8,16(r17)
 4012b24:	99000417 	ldw	r4,16(r19)
 4012b28:	d9400117 	ldw	r5,4(sp)
 4012b2c:	2209c83a 	sub	r4,r4,r8
 4012b30:	2010917a 	slli	r8,r4,5
 4012b34:	d9000017 	ldw	r4,0(sp)
 4012b38:	2909c83a 	sub	r4,r5,r4
 4012b3c:	4109883a 	add	r4,r8,r4
 4012b40:	01000e0e 	bge	zero,r4,4012b7c <__ratio+0x98>
 4012b44:	2008953a 	slli	r4,r4,20
 4012b48:	2421883a 	add	r16,r4,r16
 4012b4c:	100d883a 	mov	r6,r2
 4012b50:	180f883a 	mov	r7,r3
 4012b54:	9009883a 	mov	r4,r18
 4012b58:	800b883a 	mov	r5,r16
 4012b5c:	4016a2c0 	call	4016a2c <__divdf3>
 4012b60:	dfc00617 	ldw	ra,24(sp)
 4012b64:	dcc00517 	ldw	r19,20(sp)
 4012b68:	dc800417 	ldw	r18,16(sp)
 4012b6c:	dc400317 	ldw	r17,12(sp)
 4012b70:	dc000217 	ldw	r16,8(sp)
 4012b74:	dec00704 	addi	sp,sp,28
 4012b78:	f800283a 	ret
 4012b7c:	2008953a 	slli	r4,r4,20
 4012b80:	1907c83a 	sub	r3,r3,r4
 4012b84:	003ff106 	br	4012b4c <__alt_data_end+0xfc012b4c>

04012b88 <_mprec_log10>:
 4012b88:	defffe04 	addi	sp,sp,-8
 4012b8c:	dc000015 	stw	r16,0(sp)
 4012b90:	dfc00115 	stw	ra,4(sp)
 4012b94:	008005c4 	movi	r2,23
 4012b98:	2021883a 	mov	r16,r4
 4012b9c:	11000d0e 	bge	r2,r4,4012bd4 <_mprec_log10+0x4c>
 4012ba0:	0005883a 	mov	r2,zero
 4012ba4:	00cffc34 	movhi	r3,16368
 4012ba8:	843fffc4 	addi	r16,r16,-1
 4012bac:	000d883a 	mov	r6,zero
 4012bb0:	01d00934 	movhi	r7,16420
 4012bb4:	1009883a 	mov	r4,r2
 4012bb8:	180b883a 	mov	r5,r3
 4012bbc:	40176540 	call	4017654 <__muldf3>
 4012bc0:	803ff91e 	bne	r16,zero,4012ba8 <__alt_data_end+0xfc012ba8>
 4012bc4:	dfc00117 	ldw	ra,4(sp)
 4012bc8:	dc000017 	ldw	r16,0(sp)
 4012bcc:	dec00204 	addi	sp,sp,8
 4012bd0:	f800283a 	ret
 4012bd4:	202090fa 	slli	r16,r4,3
 4012bd8:	008100b4 	movhi	r2,1026
 4012bdc:	10b40104 	addi	r2,r2,-12284
 4012be0:	1421883a 	add	r16,r2,r16
 4012be4:	80800017 	ldw	r2,0(r16)
 4012be8:	80c00117 	ldw	r3,4(r16)
 4012bec:	dfc00117 	ldw	ra,4(sp)
 4012bf0:	dc000017 	ldw	r16,0(sp)
 4012bf4:	dec00204 	addi	sp,sp,8
 4012bf8:	f800283a 	ret

04012bfc <__copybits>:
 4012bfc:	297fffc4 	addi	r5,r5,-1
 4012c00:	280fd17a 	srai	r7,r5,5
 4012c04:	30c00417 	ldw	r3,16(r6)
 4012c08:	30800504 	addi	r2,r6,20
 4012c0c:	39c00044 	addi	r7,r7,1
 4012c10:	18c7883a 	add	r3,r3,r3
 4012c14:	39cf883a 	add	r7,r7,r7
 4012c18:	18c7883a 	add	r3,r3,r3
 4012c1c:	39cf883a 	add	r7,r7,r7
 4012c20:	10c7883a 	add	r3,r2,r3
 4012c24:	21cf883a 	add	r7,r4,r7
 4012c28:	10c00d2e 	bgeu	r2,r3,4012c60 <__copybits+0x64>
 4012c2c:	200b883a 	mov	r5,r4
 4012c30:	12000017 	ldw	r8,0(r2)
 4012c34:	29400104 	addi	r5,r5,4
 4012c38:	10800104 	addi	r2,r2,4
 4012c3c:	2a3fff15 	stw	r8,-4(r5)
 4012c40:	10fffb36 	bltu	r2,r3,4012c30 <__alt_data_end+0xfc012c30>
 4012c44:	1985c83a 	sub	r2,r3,r6
 4012c48:	10bffac4 	addi	r2,r2,-21
 4012c4c:	1004d0ba 	srli	r2,r2,2
 4012c50:	10800044 	addi	r2,r2,1
 4012c54:	1085883a 	add	r2,r2,r2
 4012c58:	1085883a 	add	r2,r2,r2
 4012c5c:	2089883a 	add	r4,r4,r2
 4012c60:	21c0032e 	bgeu	r4,r7,4012c70 <__copybits+0x74>
 4012c64:	20000015 	stw	zero,0(r4)
 4012c68:	21000104 	addi	r4,r4,4
 4012c6c:	21fffd36 	bltu	r4,r7,4012c64 <__alt_data_end+0xfc012c64>
 4012c70:	f800283a 	ret

04012c74 <__any_on>:
 4012c74:	20c00417 	ldw	r3,16(r4)
 4012c78:	2805d17a 	srai	r2,r5,5
 4012c7c:	21000504 	addi	r4,r4,20
 4012c80:	18800d0e 	bge	r3,r2,4012cb8 <__any_on+0x44>
 4012c84:	18c7883a 	add	r3,r3,r3
 4012c88:	18c7883a 	add	r3,r3,r3
 4012c8c:	20c7883a 	add	r3,r4,r3
 4012c90:	20c0192e 	bgeu	r4,r3,4012cf8 <__any_on+0x84>
 4012c94:	18bfff17 	ldw	r2,-4(r3)
 4012c98:	18ffff04 	addi	r3,r3,-4
 4012c9c:	1000041e 	bne	r2,zero,4012cb0 <__any_on+0x3c>
 4012ca0:	20c0142e 	bgeu	r4,r3,4012cf4 <__any_on+0x80>
 4012ca4:	18ffff04 	addi	r3,r3,-4
 4012ca8:	19400017 	ldw	r5,0(r3)
 4012cac:	283ffc26 	beq	r5,zero,4012ca0 <__alt_data_end+0xfc012ca0>
 4012cb0:	00800044 	movi	r2,1
 4012cb4:	f800283a 	ret
 4012cb8:	10c00a0e 	bge	r2,r3,4012ce4 <__any_on+0x70>
 4012cbc:	1085883a 	add	r2,r2,r2
 4012cc0:	1085883a 	add	r2,r2,r2
 4012cc4:	294007cc 	andi	r5,r5,31
 4012cc8:	2087883a 	add	r3,r4,r2
 4012ccc:	283ff026 	beq	r5,zero,4012c90 <__alt_data_end+0xfc012c90>
 4012cd0:	19800017 	ldw	r6,0(r3)
 4012cd4:	3144d83a 	srl	r2,r6,r5
 4012cd8:	114a983a 	sll	r5,r2,r5
 4012cdc:	317ff41e 	bne	r6,r5,4012cb0 <__alt_data_end+0xfc012cb0>
 4012ce0:	003feb06 	br	4012c90 <__alt_data_end+0xfc012c90>
 4012ce4:	1085883a 	add	r2,r2,r2
 4012ce8:	1085883a 	add	r2,r2,r2
 4012cec:	2087883a 	add	r3,r4,r2
 4012cf0:	003fe706 	br	4012c90 <__alt_data_end+0xfc012c90>
 4012cf4:	f800283a 	ret
 4012cf8:	0005883a 	mov	r2,zero
 4012cfc:	f800283a 	ret

04012d00 <_putc_r>:
 4012d00:	defffc04 	addi	sp,sp,-16
 4012d04:	dc000215 	stw	r16,8(sp)
 4012d08:	dfc00315 	stw	ra,12(sp)
 4012d0c:	2021883a 	mov	r16,r4
 4012d10:	20000226 	beq	r4,zero,4012d1c <_putc_r+0x1c>
 4012d14:	20800e17 	ldw	r2,56(r4)
 4012d18:	10001b26 	beq	r2,zero,4012d88 <_putc_r+0x88>
 4012d1c:	30800217 	ldw	r2,8(r6)
 4012d20:	10bfffc4 	addi	r2,r2,-1
 4012d24:	30800215 	stw	r2,8(r6)
 4012d28:	10000a16 	blt	r2,zero,4012d54 <_putc_r+0x54>
 4012d2c:	30800017 	ldw	r2,0(r6)
 4012d30:	11400005 	stb	r5,0(r2)
 4012d34:	30800017 	ldw	r2,0(r6)
 4012d38:	10c00044 	addi	r3,r2,1
 4012d3c:	30c00015 	stw	r3,0(r6)
 4012d40:	10800003 	ldbu	r2,0(r2)
 4012d44:	dfc00317 	ldw	ra,12(sp)
 4012d48:	dc000217 	ldw	r16,8(sp)
 4012d4c:	dec00404 	addi	sp,sp,16
 4012d50:	f800283a 	ret
 4012d54:	30c00617 	ldw	r3,24(r6)
 4012d58:	10c00616 	blt	r2,r3,4012d74 <_putc_r+0x74>
 4012d5c:	30800017 	ldw	r2,0(r6)
 4012d60:	00c00284 	movi	r3,10
 4012d64:	11400005 	stb	r5,0(r2)
 4012d68:	30800017 	ldw	r2,0(r6)
 4012d6c:	11400003 	ldbu	r5,0(r2)
 4012d70:	28fff11e 	bne	r5,r3,4012d38 <__alt_data_end+0xfc012d38>
 4012d74:	8009883a 	mov	r4,r16
 4012d78:	dfc00317 	ldw	ra,12(sp)
 4012d7c:	dc000217 	ldw	r16,8(sp)
 4012d80:	dec00404 	addi	sp,sp,16
 4012d84:	4014c741 	jmpi	4014c74 <__swbuf_r>
 4012d88:	d9400015 	stw	r5,0(sp)
 4012d8c:	d9800115 	stw	r6,4(sp)
 4012d90:	4010c9c0 	call	4010c9c <__sinit>
 4012d94:	d9800117 	ldw	r6,4(sp)
 4012d98:	d9400017 	ldw	r5,0(sp)
 4012d9c:	003fdf06 	br	4012d1c <__alt_data_end+0xfc012d1c>

04012da0 <putc>:
 4012da0:	008100f4 	movhi	r2,1027
 4012da4:	defffc04 	addi	sp,sp,-16
 4012da8:	10a71904 	addi	r2,r2,-25500
 4012dac:	dc000115 	stw	r16,4(sp)
 4012db0:	14000017 	ldw	r16,0(r2)
 4012db4:	dc400215 	stw	r17,8(sp)
 4012db8:	dfc00315 	stw	ra,12(sp)
 4012dbc:	2023883a 	mov	r17,r4
 4012dc0:	80000226 	beq	r16,zero,4012dcc <putc+0x2c>
 4012dc4:	80800e17 	ldw	r2,56(r16)
 4012dc8:	10001a26 	beq	r2,zero,4012e34 <putc+0x94>
 4012dcc:	28800217 	ldw	r2,8(r5)
 4012dd0:	10bfffc4 	addi	r2,r2,-1
 4012dd4:	28800215 	stw	r2,8(r5)
 4012dd8:	10000b16 	blt	r2,zero,4012e08 <putc+0x68>
 4012ddc:	28800017 	ldw	r2,0(r5)
 4012de0:	14400005 	stb	r17,0(r2)
 4012de4:	28800017 	ldw	r2,0(r5)
 4012de8:	10c00044 	addi	r3,r2,1
 4012dec:	28c00015 	stw	r3,0(r5)
 4012df0:	10800003 	ldbu	r2,0(r2)
 4012df4:	dfc00317 	ldw	ra,12(sp)
 4012df8:	dc400217 	ldw	r17,8(sp)
 4012dfc:	dc000117 	ldw	r16,4(sp)
 4012e00:	dec00404 	addi	sp,sp,16
 4012e04:	f800283a 	ret
 4012e08:	28c00617 	ldw	r3,24(r5)
 4012e0c:	10c00e16 	blt	r2,r3,4012e48 <putc+0xa8>
 4012e10:	28800017 	ldw	r2,0(r5)
 4012e14:	01000284 	movi	r4,10
 4012e18:	14400005 	stb	r17,0(r2)
 4012e1c:	28800017 	ldw	r2,0(r5)
 4012e20:	10c00003 	ldbu	r3,0(r2)
 4012e24:	193ff01e 	bne	r3,r4,4012de8 <__alt_data_end+0xfc012de8>
 4012e28:	280d883a 	mov	r6,r5
 4012e2c:	180b883a 	mov	r5,r3
 4012e30:	00000706 	br	4012e50 <putc+0xb0>
 4012e34:	8009883a 	mov	r4,r16
 4012e38:	d9400015 	stw	r5,0(sp)
 4012e3c:	4010c9c0 	call	4010c9c <__sinit>
 4012e40:	d9400017 	ldw	r5,0(sp)
 4012e44:	003fe106 	br	4012dcc <__alt_data_end+0xfc012dcc>
 4012e48:	280d883a 	mov	r6,r5
 4012e4c:	880b883a 	mov	r5,r17
 4012e50:	8009883a 	mov	r4,r16
 4012e54:	dfc00317 	ldw	ra,12(sp)
 4012e58:	dc400217 	ldw	r17,8(sp)
 4012e5c:	dc000117 	ldw	r16,4(sp)
 4012e60:	dec00404 	addi	sp,sp,16
 4012e64:	4014c741 	jmpi	4014c74 <__swbuf_r>

04012e68 <_realloc_r>:
 4012e68:	defff604 	addi	sp,sp,-40
 4012e6c:	dc800215 	stw	r18,8(sp)
 4012e70:	dfc00915 	stw	ra,36(sp)
 4012e74:	df000815 	stw	fp,32(sp)
 4012e78:	ddc00715 	stw	r23,28(sp)
 4012e7c:	dd800615 	stw	r22,24(sp)
 4012e80:	dd400515 	stw	r21,20(sp)
 4012e84:	dd000415 	stw	r20,16(sp)
 4012e88:	dcc00315 	stw	r19,12(sp)
 4012e8c:	dc400115 	stw	r17,4(sp)
 4012e90:	dc000015 	stw	r16,0(sp)
 4012e94:	3025883a 	mov	r18,r6
 4012e98:	2800b726 	beq	r5,zero,4013178 <_realloc_r+0x310>
 4012e9c:	282b883a 	mov	r21,r5
 4012ea0:	2029883a 	mov	r20,r4
 4012ea4:	40191800 	call	4019180 <__malloc_lock>
 4012ea8:	a8bfff17 	ldw	r2,-4(r21)
 4012eac:	043fff04 	movi	r16,-4
 4012eb0:	90c002c4 	addi	r3,r18,11
 4012eb4:	01000584 	movi	r4,22
 4012eb8:	acfffe04 	addi	r19,r21,-8
 4012ebc:	1420703a 	and	r16,r2,r16
 4012ec0:	20c0332e 	bgeu	r4,r3,4012f90 <_realloc_r+0x128>
 4012ec4:	047ffe04 	movi	r17,-8
 4012ec8:	1c62703a 	and	r17,r3,r17
 4012ecc:	8807883a 	mov	r3,r17
 4012ed0:	88005816 	blt	r17,zero,4013034 <_realloc_r+0x1cc>
 4012ed4:	8c805736 	bltu	r17,r18,4013034 <_realloc_r+0x1cc>
 4012ed8:	80c0300e 	bge	r16,r3,4012f9c <_realloc_r+0x134>
 4012edc:	070100f4 	movhi	fp,1027
 4012ee0:	e7215d04 	addi	fp,fp,-31372
 4012ee4:	e1c00217 	ldw	r7,8(fp)
 4012ee8:	9c09883a 	add	r4,r19,r16
 4012eec:	22000117 	ldw	r8,4(r4)
 4012ef0:	21c06326 	beq	r4,r7,4013080 <_realloc_r+0x218>
 4012ef4:	017fff84 	movi	r5,-2
 4012ef8:	414a703a 	and	r5,r8,r5
 4012efc:	214b883a 	add	r5,r4,r5
 4012f00:	29800117 	ldw	r6,4(r5)
 4012f04:	3180004c 	andi	r6,r6,1
 4012f08:	30003f26 	beq	r6,zero,4013008 <_realloc_r+0x1a0>
 4012f0c:	1080004c 	andi	r2,r2,1
 4012f10:	10008326 	beq	r2,zero,4013120 <_realloc_r+0x2b8>
 4012f14:	900b883a 	mov	r5,r18
 4012f18:	a009883a 	mov	r4,r20
 4012f1c:	400b7b00 	call	400b7b0 <_malloc_r>
 4012f20:	1025883a 	mov	r18,r2
 4012f24:	10011e26 	beq	r2,zero,40133a0 <_realloc_r+0x538>
 4012f28:	a93fff17 	ldw	r4,-4(r21)
 4012f2c:	10fffe04 	addi	r3,r2,-8
 4012f30:	00bfff84 	movi	r2,-2
 4012f34:	2084703a 	and	r2,r4,r2
 4012f38:	9885883a 	add	r2,r19,r2
 4012f3c:	1880ee26 	beq	r3,r2,40132f8 <_realloc_r+0x490>
 4012f40:	81bfff04 	addi	r6,r16,-4
 4012f44:	00800904 	movi	r2,36
 4012f48:	1180b836 	bltu	r2,r6,401322c <_realloc_r+0x3c4>
 4012f4c:	00c004c4 	movi	r3,19
 4012f50:	19809636 	bltu	r3,r6,40131ac <_realloc_r+0x344>
 4012f54:	9005883a 	mov	r2,r18
 4012f58:	a807883a 	mov	r3,r21
 4012f5c:	19000017 	ldw	r4,0(r3)
 4012f60:	11000015 	stw	r4,0(r2)
 4012f64:	19000117 	ldw	r4,4(r3)
 4012f68:	11000115 	stw	r4,4(r2)
 4012f6c:	18c00217 	ldw	r3,8(r3)
 4012f70:	10c00215 	stw	r3,8(r2)
 4012f74:	a80b883a 	mov	r5,r21
 4012f78:	a009883a 	mov	r4,r20
 4012f7c:	4010e100 	call	4010e10 <_free_r>
 4012f80:	a009883a 	mov	r4,r20
 4012f84:	40191a40 	call	40191a4 <__malloc_unlock>
 4012f88:	9005883a 	mov	r2,r18
 4012f8c:	00001206 	br	4012fd8 <_realloc_r+0x170>
 4012f90:	00c00404 	movi	r3,16
 4012f94:	1823883a 	mov	r17,r3
 4012f98:	003fce06 	br	4012ed4 <__alt_data_end+0xfc012ed4>
 4012f9c:	a825883a 	mov	r18,r21
 4012fa0:	8445c83a 	sub	r2,r16,r17
 4012fa4:	00c003c4 	movi	r3,15
 4012fa8:	18802636 	bltu	r3,r2,4013044 <_realloc_r+0x1dc>
 4012fac:	99800117 	ldw	r6,4(r19)
 4012fb0:	9c07883a 	add	r3,r19,r16
 4012fb4:	3180004c 	andi	r6,r6,1
 4012fb8:	3420b03a 	or	r16,r6,r16
 4012fbc:	9c000115 	stw	r16,4(r19)
 4012fc0:	18800117 	ldw	r2,4(r3)
 4012fc4:	10800054 	ori	r2,r2,1
 4012fc8:	18800115 	stw	r2,4(r3)
 4012fcc:	a009883a 	mov	r4,r20
 4012fd0:	40191a40 	call	40191a4 <__malloc_unlock>
 4012fd4:	9005883a 	mov	r2,r18
 4012fd8:	dfc00917 	ldw	ra,36(sp)
 4012fdc:	df000817 	ldw	fp,32(sp)
 4012fe0:	ddc00717 	ldw	r23,28(sp)
 4012fe4:	dd800617 	ldw	r22,24(sp)
 4012fe8:	dd400517 	ldw	r21,20(sp)
 4012fec:	dd000417 	ldw	r20,16(sp)
 4012ff0:	dcc00317 	ldw	r19,12(sp)
 4012ff4:	dc800217 	ldw	r18,8(sp)
 4012ff8:	dc400117 	ldw	r17,4(sp)
 4012ffc:	dc000017 	ldw	r16,0(sp)
 4013000:	dec00a04 	addi	sp,sp,40
 4013004:	f800283a 	ret
 4013008:	017fff04 	movi	r5,-4
 401300c:	414a703a 	and	r5,r8,r5
 4013010:	814d883a 	add	r6,r16,r5
 4013014:	30c01f16 	blt	r6,r3,4013094 <_realloc_r+0x22c>
 4013018:	20800317 	ldw	r2,12(r4)
 401301c:	20c00217 	ldw	r3,8(r4)
 4013020:	a825883a 	mov	r18,r21
 4013024:	3021883a 	mov	r16,r6
 4013028:	18800315 	stw	r2,12(r3)
 401302c:	10c00215 	stw	r3,8(r2)
 4013030:	003fdb06 	br	4012fa0 <__alt_data_end+0xfc012fa0>
 4013034:	00800304 	movi	r2,12
 4013038:	a0800015 	stw	r2,0(r20)
 401303c:	0005883a 	mov	r2,zero
 4013040:	003fe506 	br	4012fd8 <__alt_data_end+0xfc012fd8>
 4013044:	98c00117 	ldw	r3,4(r19)
 4013048:	9c4b883a 	add	r5,r19,r17
 401304c:	11000054 	ori	r4,r2,1
 4013050:	18c0004c 	andi	r3,r3,1
 4013054:	1c62b03a 	or	r17,r3,r17
 4013058:	9c400115 	stw	r17,4(r19)
 401305c:	29000115 	stw	r4,4(r5)
 4013060:	2885883a 	add	r2,r5,r2
 4013064:	10c00117 	ldw	r3,4(r2)
 4013068:	29400204 	addi	r5,r5,8
 401306c:	a009883a 	mov	r4,r20
 4013070:	18c00054 	ori	r3,r3,1
 4013074:	10c00115 	stw	r3,4(r2)
 4013078:	4010e100 	call	4010e10 <_free_r>
 401307c:	003fd306 	br	4012fcc <__alt_data_end+0xfc012fcc>
 4013080:	017fff04 	movi	r5,-4
 4013084:	414a703a 	and	r5,r8,r5
 4013088:	89800404 	addi	r6,r17,16
 401308c:	8151883a 	add	r8,r16,r5
 4013090:	4180590e 	bge	r8,r6,40131f8 <_realloc_r+0x390>
 4013094:	1080004c 	andi	r2,r2,1
 4013098:	103f9e1e 	bne	r2,zero,4012f14 <__alt_data_end+0xfc012f14>
 401309c:	adbffe17 	ldw	r22,-8(r21)
 40130a0:	00bfff04 	movi	r2,-4
 40130a4:	9dadc83a 	sub	r22,r19,r22
 40130a8:	b1800117 	ldw	r6,4(r22)
 40130ac:	3084703a 	and	r2,r6,r2
 40130b0:	20002026 	beq	r4,zero,4013134 <_realloc_r+0x2cc>
 40130b4:	80af883a 	add	r23,r16,r2
 40130b8:	b96f883a 	add	r23,r23,r5
 40130bc:	21c05f26 	beq	r4,r7,401323c <_realloc_r+0x3d4>
 40130c0:	b8c01c16 	blt	r23,r3,4013134 <_realloc_r+0x2cc>
 40130c4:	20800317 	ldw	r2,12(r4)
 40130c8:	20c00217 	ldw	r3,8(r4)
 40130cc:	81bfff04 	addi	r6,r16,-4
 40130d0:	01000904 	movi	r4,36
 40130d4:	18800315 	stw	r2,12(r3)
 40130d8:	10c00215 	stw	r3,8(r2)
 40130dc:	b0c00217 	ldw	r3,8(r22)
 40130e0:	b0800317 	ldw	r2,12(r22)
 40130e4:	b4800204 	addi	r18,r22,8
 40130e8:	18800315 	stw	r2,12(r3)
 40130ec:	10c00215 	stw	r3,8(r2)
 40130f0:	21801b36 	bltu	r4,r6,4013160 <_realloc_r+0x2f8>
 40130f4:	008004c4 	movi	r2,19
 40130f8:	1180352e 	bgeu	r2,r6,40131d0 <_realloc_r+0x368>
 40130fc:	a8800017 	ldw	r2,0(r21)
 4013100:	b0800215 	stw	r2,8(r22)
 4013104:	a8800117 	ldw	r2,4(r21)
 4013108:	b0800315 	stw	r2,12(r22)
 401310c:	008006c4 	movi	r2,27
 4013110:	11807f36 	bltu	r2,r6,4013310 <_realloc_r+0x4a8>
 4013114:	b0800404 	addi	r2,r22,16
 4013118:	ad400204 	addi	r21,r21,8
 401311c:	00002d06 	br	40131d4 <_realloc_r+0x36c>
 4013120:	adbffe17 	ldw	r22,-8(r21)
 4013124:	00bfff04 	movi	r2,-4
 4013128:	9dadc83a 	sub	r22,r19,r22
 401312c:	b1000117 	ldw	r4,4(r22)
 4013130:	2084703a 	and	r2,r4,r2
 4013134:	b03f7726 	beq	r22,zero,4012f14 <__alt_data_end+0xfc012f14>
 4013138:	80af883a 	add	r23,r16,r2
 401313c:	b8ff7516 	blt	r23,r3,4012f14 <__alt_data_end+0xfc012f14>
 4013140:	b0800317 	ldw	r2,12(r22)
 4013144:	b0c00217 	ldw	r3,8(r22)
 4013148:	81bfff04 	addi	r6,r16,-4
 401314c:	01000904 	movi	r4,36
 4013150:	18800315 	stw	r2,12(r3)
 4013154:	10c00215 	stw	r3,8(r2)
 4013158:	b4800204 	addi	r18,r22,8
 401315c:	21bfe52e 	bgeu	r4,r6,40130f4 <__alt_data_end+0xfc0130f4>
 4013160:	a80b883a 	mov	r5,r21
 4013164:	9009883a 	mov	r4,r18
 4013168:	4011aec0 	call	4011aec <memmove>
 401316c:	b821883a 	mov	r16,r23
 4013170:	b027883a 	mov	r19,r22
 4013174:	003f8a06 	br	4012fa0 <__alt_data_end+0xfc012fa0>
 4013178:	300b883a 	mov	r5,r6
 401317c:	dfc00917 	ldw	ra,36(sp)
 4013180:	df000817 	ldw	fp,32(sp)
 4013184:	ddc00717 	ldw	r23,28(sp)
 4013188:	dd800617 	ldw	r22,24(sp)
 401318c:	dd400517 	ldw	r21,20(sp)
 4013190:	dd000417 	ldw	r20,16(sp)
 4013194:	dcc00317 	ldw	r19,12(sp)
 4013198:	dc800217 	ldw	r18,8(sp)
 401319c:	dc400117 	ldw	r17,4(sp)
 40131a0:	dc000017 	ldw	r16,0(sp)
 40131a4:	dec00a04 	addi	sp,sp,40
 40131a8:	400b7b01 	jmpi	400b7b0 <_malloc_r>
 40131ac:	a8c00017 	ldw	r3,0(r21)
 40131b0:	90c00015 	stw	r3,0(r18)
 40131b4:	a8c00117 	ldw	r3,4(r21)
 40131b8:	90c00115 	stw	r3,4(r18)
 40131bc:	00c006c4 	movi	r3,27
 40131c0:	19804536 	bltu	r3,r6,40132d8 <_realloc_r+0x470>
 40131c4:	90800204 	addi	r2,r18,8
 40131c8:	a8c00204 	addi	r3,r21,8
 40131cc:	003f6306 	br	4012f5c <__alt_data_end+0xfc012f5c>
 40131d0:	9005883a 	mov	r2,r18
 40131d4:	a8c00017 	ldw	r3,0(r21)
 40131d8:	b821883a 	mov	r16,r23
 40131dc:	b027883a 	mov	r19,r22
 40131e0:	10c00015 	stw	r3,0(r2)
 40131e4:	a8c00117 	ldw	r3,4(r21)
 40131e8:	10c00115 	stw	r3,4(r2)
 40131ec:	a8c00217 	ldw	r3,8(r21)
 40131f0:	10c00215 	stw	r3,8(r2)
 40131f4:	003f6a06 	br	4012fa0 <__alt_data_end+0xfc012fa0>
 40131f8:	9c67883a 	add	r19,r19,r17
 40131fc:	4445c83a 	sub	r2,r8,r17
 4013200:	e4c00215 	stw	r19,8(fp)
 4013204:	10800054 	ori	r2,r2,1
 4013208:	98800115 	stw	r2,4(r19)
 401320c:	a8bfff17 	ldw	r2,-4(r21)
 4013210:	a009883a 	mov	r4,r20
 4013214:	1080004c 	andi	r2,r2,1
 4013218:	1462b03a 	or	r17,r2,r17
 401321c:	ac7fff15 	stw	r17,-4(r21)
 4013220:	40191a40 	call	40191a4 <__malloc_unlock>
 4013224:	a805883a 	mov	r2,r21
 4013228:	003f6b06 	br	4012fd8 <__alt_data_end+0xfc012fd8>
 401322c:	a80b883a 	mov	r5,r21
 4013230:	9009883a 	mov	r4,r18
 4013234:	4011aec0 	call	4011aec <memmove>
 4013238:	003f4e06 	br	4012f74 <__alt_data_end+0xfc012f74>
 401323c:	89000404 	addi	r4,r17,16
 4013240:	b93fbc16 	blt	r23,r4,4013134 <__alt_data_end+0xfc013134>
 4013244:	b0800317 	ldw	r2,12(r22)
 4013248:	b0c00217 	ldw	r3,8(r22)
 401324c:	81bfff04 	addi	r6,r16,-4
 4013250:	01000904 	movi	r4,36
 4013254:	18800315 	stw	r2,12(r3)
 4013258:	10c00215 	stw	r3,8(r2)
 401325c:	b4800204 	addi	r18,r22,8
 4013260:	21804336 	bltu	r4,r6,4013370 <_realloc_r+0x508>
 4013264:	008004c4 	movi	r2,19
 4013268:	11803f2e 	bgeu	r2,r6,4013368 <_realloc_r+0x500>
 401326c:	a8800017 	ldw	r2,0(r21)
 4013270:	b0800215 	stw	r2,8(r22)
 4013274:	a8800117 	ldw	r2,4(r21)
 4013278:	b0800315 	stw	r2,12(r22)
 401327c:	008006c4 	movi	r2,27
 4013280:	11803f36 	bltu	r2,r6,4013380 <_realloc_r+0x518>
 4013284:	b0800404 	addi	r2,r22,16
 4013288:	ad400204 	addi	r21,r21,8
 401328c:	a8c00017 	ldw	r3,0(r21)
 4013290:	10c00015 	stw	r3,0(r2)
 4013294:	a8c00117 	ldw	r3,4(r21)
 4013298:	10c00115 	stw	r3,4(r2)
 401329c:	a8c00217 	ldw	r3,8(r21)
 40132a0:	10c00215 	stw	r3,8(r2)
 40132a4:	b447883a 	add	r3,r22,r17
 40132a8:	bc45c83a 	sub	r2,r23,r17
 40132ac:	e0c00215 	stw	r3,8(fp)
 40132b0:	10800054 	ori	r2,r2,1
 40132b4:	18800115 	stw	r2,4(r3)
 40132b8:	b0800117 	ldw	r2,4(r22)
 40132bc:	a009883a 	mov	r4,r20
 40132c0:	1080004c 	andi	r2,r2,1
 40132c4:	1462b03a 	or	r17,r2,r17
 40132c8:	b4400115 	stw	r17,4(r22)
 40132cc:	40191a40 	call	40191a4 <__malloc_unlock>
 40132d0:	9005883a 	mov	r2,r18
 40132d4:	003f4006 	br	4012fd8 <__alt_data_end+0xfc012fd8>
 40132d8:	a8c00217 	ldw	r3,8(r21)
 40132dc:	90c00215 	stw	r3,8(r18)
 40132e0:	a8c00317 	ldw	r3,12(r21)
 40132e4:	90c00315 	stw	r3,12(r18)
 40132e8:	30801126 	beq	r6,r2,4013330 <_realloc_r+0x4c8>
 40132ec:	90800404 	addi	r2,r18,16
 40132f0:	a8c00404 	addi	r3,r21,16
 40132f4:	003f1906 	br	4012f5c <__alt_data_end+0xfc012f5c>
 40132f8:	90ffff17 	ldw	r3,-4(r18)
 40132fc:	00bfff04 	movi	r2,-4
 4013300:	a825883a 	mov	r18,r21
 4013304:	1884703a 	and	r2,r3,r2
 4013308:	80a1883a 	add	r16,r16,r2
 401330c:	003f2406 	br	4012fa0 <__alt_data_end+0xfc012fa0>
 4013310:	a8800217 	ldw	r2,8(r21)
 4013314:	b0800415 	stw	r2,16(r22)
 4013318:	a8800317 	ldw	r2,12(r21)
 401331c:	b0800515 	stw	r2,20(r22)
 4013320:	31000a26 	beq	r6,r4,401334c <_realloc_r+0x4e4>
 4013324:	b0800604 	addi	r2,r22,24
 4013328:	ad400404 	addi	r21,r21,16
 401332c:	003fa906 	br	40131d4 <__alt_data_end+0xfc0131d4>
 4013330:	a9000417 	ldw	r4,16(r21)
 4013334:	90800604 	addi	r2,r18,24
 4013338:	a8c00604 	addi	r3,r21,24
 401333c:	91000415 	stw	r4,16(r18)
 4013340:	a9000517 	ldw	r4,20(r21)
 4013344:	91000515 	stw	r4,20(r18)
 4013348:	003f0406 	br	4012f5c <__alt_data_end+0xfc012f5c>
 401334c:	a8c00417 	ldw	r3,16(r21)
 4013350:	ad400604 	addi	r21,r21,24
 4013354:	b0800804 	addi	r2,r22,32
 4013358:	b0c00615 	stw	r3,24(r22)
 401335c:	a8ffff17 	ldw	r3,-4(r21)
 4013360:	b0c00715 	stw	r3,28(r22)
 4013364:	003f9b06 	br	40131d4 <__alt_data_end+0xfc0131d4>
 4013368:	9005883a 	mov	r2,r18
 401336c:	003fc706 	br	401328c <__alt_data_end+0xfc01328c>
 4013370:	a80b883a 	mov	r5,r21
 4013374:	9009883a 	mov	r4,r18
 4013378:	4011aec0 	call	4011aec <memmove>
 401337c:	003fc906 	br	40132a4 <__alt_data_end+0xfc0132a4>
 4013380:	a8800217 	ldw	r2,8(r21)
 4013384:	b0800415 	stw	r2,16(r22)
 4013388:	a8800317 	ldw	r2,12(r21)
 401338c:	b0800515 	stw	r2,20(r22)
 4013390:	31000726 	beq	r6,r4,40133b0 <_realloc_r+0x548>
 4013394:	b0800604 	addi	r2,r22,24
 4013398:	ad400404 	addi	r21,r21,16
 401339c:	003fbb06 	br	401328c <__alt_data_end+0xfc01328c>
 40133a0:	a009883a 	mov	r4,r20
 40133a4:	40191a40 	call	40191a4 <__malloc_unlock>
 40133a8:	0005883a 	mov	r2,zero
 40133ac:	003f0a06 	br	4012fd8 <__alt_data_end+0xfc012fd8>
 40133b0:	a8c00417 	ldw	r3,16(r21)
 40133b4:	ad400604 	addi	r21,r21,24
 40133b8:	b0800804 	addi	r2,r22,32
 40133bc:	b0c00615 	stw	r3,24(r22)
 40133c0:	a8ffff17 	ldw	r3,-4(r21)
 40133c4:	b0c00715 	stw	r3,28(r22)
 40133c8:	003fb006 	br	401328c <__alt_data_end+0xfc01328c>

040133cc <__fpclassifyd>:
 40133cc:	00a00034 	movhi	r2,32768
 40133d0:	10bfffc4 	addi	r2,r2,-1
 40133d4:	2884703a 	and	r2,r5,r2
 40133d8:	10000726 	beq	r2,zero,40133f8 <__fpclassifyd+0x2c>
 40133dc:	00fffc34 	movhi	r3,65520
 40133e0:	019ff834 	movhi	r6,32736
 40133e4:	28c7883a 	add	r3,r5,r3
 40133e8:	31bfffc4 	addi	r6,r6,-1
 40133ec:	30c00536 	bltu	r6,r3,4013404 <__fpclassifyd+0x38>
 40133f0:	00800104 	movi	r2,4
 40133f4:	f800283a 	ret
 40133f8:	2000021e 	bne	r4,zero,4013404 <__fpclassifyd+0x38>
 40133fc:	00800084 	movi	r2,2
 4013400:	f800283a 	ret
 4013404:	00dffc34 	movhi	r3,32752
 4013408:	019ff834 	movhi	r6,32736
 401340c:	28cb883a 	add	r5,r5,r3
 4013410:	31bfffc4 	addi	r6,r6,-1
 4013414:	317ff62e 	bgeu	r6,r5,40133f0 <__alt_data_end+0xfc0133f0>
 4013418:	01400434 	movhi	r5,16
 401341c:	297fffc4 	addi	r5,r5,-1
 4013420:	28800236 	bltu	r5,r2,401342c <__fpclassifyd+0x60>
 4013424:	008000c4 	movi	r2,3
 4013428:	f800283a 	ret
 401342c:	10c00226 	beq	r2,r3,4013438 <__fpclassifyd+0x6c>
 4013430:	0005883a 	mov	r2,zero
 4013434:	f800283a 	ret
 4013438:	2005003a 	cmpeq	r2,r4,zero
 401343c:	f800283a 	ret

04013440 <__sread>:
 4013440:	defffe04 	addi	sp,sp,-8
 4013444:	dc000015 	stw	r16,0(sp)
 4013448:	2821883a 	mov	r16,r5
 401344c:	2940038f 	ldh	r5,14(r5)
 4013450:	dfc00115 	stw	ra,4(sp)
 4013454:	40153780 	call	4015378 <_read_r>
 4013458:	10000716 	blt	r2,zero,4013478 <__sread+0x38>
 401345c:	80c01417 	ldw	r3,80(r16)
 4013460:	1887883a 	add	r3,r3,r2
 4013464:	80c01415 	stw	r3,80(r16)
 4013468:	dfc00117 	ldw	ra,4(sp)
 401346c:	dc000017 	ldw	r16,0(sp)
 4013470:	dec00204 	addi	sp,sp,8
 4013474:	f800283a 	ret
 4013478:	80c0030b 	ldhu	r3,12(r16)
 401347c:	18fbffcc 	andi	r3,r3,61439
 4013480:	80c0030d 	sth	r3,12(r16)
 4013484:	dfc00117 	ldw	ra,4(sp)
 4013488:	dc000017 	ldw	r16,0(sp)
 401348c:	dec00204 	addi	sp,sp,8
 4013490:	f800283a 	ret

04013494 <__seofread>:
 4013494:	0005883a 	mov	r2,zero
 4013498:	f800283a 	ret

0401349c <__swrite>:
 401349c:	2880030b 	ldhu	r2,12(r5)
 40134a0:	defffb04 	addi	sp,sp,-20
 40134a4:	dcc00315 	stw	r19,12(sp)
 40134a8:	dc800215 	stw	r18,8(sp)
 40134ac:	dc400115 	stw	r17,4(sp)
 40134b0:	dc000015 	stw	r16,0(sp)
 40134b4:	dfc00415 	stw	ra,16(sp)
 40134b8:	10c0400c 	andi	r3,r2,256
 40134bc:	2821883a 	mov	r16,r5
 40134c0:	2023883a 	mov	r17,r4
 40134c4:	3025883a 	mov	r18,r6
 40134c8:	3827883a 	mov	r19,r7
 40134cc:	18000526 	beq	r3,zero,40134e4 <__swrite+0x48>
 40134d0:	2940038f 	ldh	r5,14(r5)
 40134d4:	01c00084 	movi	r7,2
 40134d8:	000d883a 	mov	r6,zero
 40134dc:	40153180 	call	4015318 <_lseek_r>
 40134e0:	8080030b 	ldhu	r2,12(r16)
 40134e4:	8140038f 	ldh	r5,14(r16)
 40134e8:	10bbffcc 	andi	r2,r2,61439
 40134ec:	980f883a 	mov	r7,r19
 40134f0:	900d883a 	mov	r6,r18
 40134f4:	8809883a 	mov	r4,r17
 40134f8:	8080030d 	sth	r2,12(r16)
 40134fc:	dfc00417 	ldw	ra,16(sp)
 4013500:	dcc00317 	ldw	r19,12(sp)
 4013504:	dc800217 	ldw	r18,8(sp)
 4013508:	dc400117 	ldw	r17,4(sp)
 401350c:	dc000017 	ldw	r16,0(sp)
 4013510:	dec00504 	addi	sp,sp,20
 4013514:	4014dcc1 	jmpi	4014dcc <_write_r>

04013518 <__sseek>:
 4013518:	defffe04 	addi	sp,sp,-8
 401351c:	dc000015 	stw	r16,0(sp)
 4013520:	2821883a 	mov	r16,r5
 4013524:	2940038f 	ldh	r5,14(r5)
 4013528:	dfc00115 	stw	ra,4(sp)
 401352c:	40153180 	call	4015318 <_lseek_r>
 4013530:	00ffffc4 	movi	r3,-1
 4013534:	10c00826 	beq	r2,r3,4013558 <__sseek+0x40>
 4013538:	80c0030b 	ldhu	r3,12(r16)
 401353c:	80801415 	stw	r2,80(r16)
 4013540:	18c40014 	ori	r3,r3,4096
 4013544:	80c0030d 	sth	r3,12(r16)
 4013548:	dfc00117 	ldw	ra,4(sp)
 401354c:	dc000017 	ldw	r16,0(sp)
 4013550:	dec00204 	addi	sp,sp,8
 4013554:	f800283a 	ret
 4013558:	80c0030b 	ldhu	r3,12(r16)
 401355c:	18fbffcc 	andi	r3,r3,61439
 4013560:	80c0030d 	sth	r3,12(r16)
 4013564:	dfc00117 	ldw	ra,4(sp)
 4013568:	dc000017 	ldw	r16,0(sp)
 401356c:	dec00204 	addi	sp,sp,8
 4013570:	f800283a 	ret

04013574 <__sclose>:
 4013574:	2940038f 	ldh	r5,14(r5)
 4013578:	4014e2c1 	jmpi	4014e2c <_close_r>

0401357c <__sprint_r.part.0>:
 401357c:	28801917 	ldw	r2,100(r5)
 4013580:	defff604 	addi	sp,sp,-40
 4013584:	dd400515 	stw	r21,20(sp)
 4013588:	dfc00915 	stw	ra,36(sp)
 401358c:	df000815 	stw	fp,32(sp)
 4013590:	ddc00715 	stw	r23,28(sp)
 4013594:	dd800615 	stw	r22,24(sp)
 4013598:	dd000415 	stw	r20,16(sp)
 401359c:	dcc00315 	stw	r19,12(sp)
 40135a0:	dc800215 	stw	r18,8(sp)
 40135a4:	dc400115 	stw	r17,4(sp)
 40135a8:	dc000015 	stw	r16,0(sp)
 40135ac:	1088000c 	andi	r2,r2,8192
 40135b0:	302b883a 	mov	r21,r6
 40135b4:	10002e26 	beq	r2,zero,4013670 <__sprint_r.part.0+0xf4>
 40135b8:	30800217 	ldw	r2,8(r6)
 40135bc:	35800017 	ldw	r22,0(r6)
 40135c0:	10002926 	beq	r2,zero,4013668 <__sprint_r.part.0+0xec>
 40135c4:	2827883a 	mov	r19,r5
 40135c8:	2029883a 	mov	r20,r4
 40135cc:	b5c00104 	addi	r23,r22,4
 40135d0:	04bfffc4 	movi	r18,-1
 40135d4:	bc400017 	ldw	r17,0(r23)
 40135d8:	b4000017 	ldw	r16,0(r22)
 40135dc:	0039883a 	mov	fp,zero
 40135e0:	8822d0ba 	srli	r17,r17,2
 40135e4:	8800031e 	bne	r17,zero,40135f4 <__sprint_r.part.0+0x78>
 40135e8:	00001806 	br	401364c <__sprint_r.part.0+0xd0>
 40135ec:	84000104 	addi	r16,r16,4
 40135f0:	8f001526 	beq	r17,fp,4013648 <__sprint_r.part.0+0xcc>
 40135f4:	81400017 	ldw	r5,0(r16)
 40135f8:	980d883a 	mov	r6,r19
 40135fc:	a009883a 	mov	r4,r20
 4013600:	40151c40 	call	40151c4 <_fputwc_r>
 4013604:	e7000044 	addi	fp,fp,1
 4013608:	14bff81e 	bne	r2,r18,40135ec <__alt_data_end+0xfc0135ec>
 401360c:	9005883a 	mov	r2,r18
 4013610:	a8000215 	stw	zero,8(r21)
 4013614:	a8000115 	stw	zero,4(r21)
 4013618:	dfc00917 	ldw	ra,36(sp)
 401361c:	df000817 	ldw	fp,32(sp)
 4013620:	ddc00717 	ldw	r23,28(sp)
 4013624:	dd800617 	ldw	r22,24(sp)
 4013628:	dd400517 	ldw	r21,20(sp)
 401362c:	dd000417 	ldw	r20,16(sp)
 4013630:	dcc00317 	ldw	r19,12(sp)
 4013634:	dc800217 	ldw	r18,8(sp)
 4013638:	dc400117 	ldw	r17,4(sp)
 401363c:	dc000017 	ldw	r16,0(sp)
 4013640:	dec00a04 	addi	sp,sp,40
 4013644:	f800283a 	ret
 4013648:	a8800217 	ldw	r2,8(r21)
 401364c:	8c63883a 	add	r17,r17,r17
 4013650:	8c63883a 	add	r17,r17,r17
 4013654:	1445c83a 	sub	r2,r2,r17
 4013658:	a8800215 	stw	r2,8(r21)
 401365c:	b5800204 	addi	r22,r22,8
 4013660:	bdc00204 	addi	r23,r23,8
 4013664:	103fdb1e 	bne	r2,zero,40135d4 <__alt_data_end+0xfc0135d4>
 4013668:	0005883a 	mov	r2,zero
 401366c:	003fe806 	br	4013610 <__alt_data_end+0xfc013610>
 4013670:	40111200 	call	4011120 <__sfvwrite_r>
 4013674:	003fe606 	br	4013610 <__alt_data_end+0xfc013610>

04013678 <__sprint_r>:
 4013678:	30c00217 	ldw	r3,8(r6)
 401367c:	18000126 	beq	r3,zero,4013684 <__sprint_r+0xc>
 4013680:	401357c1 	jmpi	401357c <__sprint_r.part.0>
 4013684:	30000115 	stw	zero,4(r6)
 4013688:	0005883a 	mov	r2,zero
 401368c:	f800283a 	ret

04013690 <___vfiprintf_internal_r>:
 4013690:	deffca04 	addi	sp,sp,-216
 4013694:	dd403115 	stw	r21,196(sp)
 4013698:	dfc03515 	stw	ra,212(sp)
 401369c:	df003415 	stw	fp,208(sp)
 40136a0:	ddc03315 	stw	r23,204(sp)
 40136a4:	dd803215 	stw	r22,200(sp)
 40136a8:	dd003015 	stw	r20,192(sp)
 40136ac:	dcc02f15 	stw	r19,188(sp)
 40136b0:	dc802e15 	stw	r18,184(sp)
 40136b4:	dc402d15 	stw	r17,180(sp)
 40136b8:	dc002c15 	stw	r16,176(sp)
 40136bc:	d9002115 	stw	r4,132(sp)
 40136c0:	d9402015 	stw	r5,128(sp)
 40136c4:	d9c02215 	stw	r7,136(sp)
 40136c8:	302b883a 	mov	r21,r6
 40136cc:	20000226 	beq	r4,zero,40136d8 <___vfiprintf_internal_r+0x48>
 40136d0:	20800e17 	ldw	r2,56(r4)
 40136d4:	1000cf26 	beq	r2,zero,4013a14 <___vfiprintf_internal_r+0x384>
 40136d8:	d8c02017 	ldw	r3,128(sp)
 40136dc:	1880030b 	ldhu	r2,12(r3)
 40136e0:	10c8000c 	andi	r3,r2,8192
 40136e4:	1800071e 	bne	r3,zero,4013704 <___vfiprintf_internal_r+0x74>
 40136e8:	d9402017 	ldw	r5,128(sp)
 40136ec:	00f7ffc4 	movi	r3,-8193
 40136f0:	10880014 	ori	r2,r2,8192
 40136f4:	29001917 	ldw	r4,100(r5)
 40136f8:	2880030d 	sth	r2,12(r5)
 40136fc:	20c6703a 	and	r3,r4,r3
 4013700:	28c01915 	stw	r3,100(r5)
 4013704:	10c0020c 	andi	r3,r2,8
 4013708:	1800a526 	beq	r3,zero,40139a0 <___vfiprintf_internal_r+0x310>
 401370c:	d9002017 	ldw	r4,128(sp)
 4013710:	20c00417 	ldw	r3,16(r4)
 4013714:	1800a226 	beq	r3,zero,40139a0 <___vfiprintf_internal_r+0x310>
 4013718:	1080068c 	andi	r2,r2,26
 401371c:	00c00284 	movi	r3,10
 4013720:	10c0a826 	beq	r2,r3,40139c4 <___vfiprintf_internal_r+0x334>
 4013724:	d9001a04 	addi	r4,sp,104
 4013728:	d94019c4 	addi	r5,sp,103
 401372c:	048100b4 	movhi	r18,1026
 4013730:	2145c83a 	sub	r2,r4,r5
 4013734:	94b43304 	addi	r18,r18,-12084
 4013738:	d9001e15 	stw	r4,120(sp)
 401373c:	d9401f15 	stw	r5,124(sp)
 4013740:	dec01a15 	stw	sp,104(sp)
 4013744:	d8001c15 	stw	zero,112(sp)
 4013748:	d8001b15 	stw	zero,108(sp)
 401374c:	d811883a 	mov	r8,sp
 4013750:	d8002615 	stw	zero,152(sp)
 4013754:	d8002415 	stw	zero,144(sp)
 4013758:	d8802815 	stw	r2,160(sp)
 401375c:	a82d883a 	mov	r22,r21
 4013760:	b0800007 	ldb	r2,0(r22)
 4013764:	10040d26 	beq	r2,zero,401479c <___vfiprintf_internal_r+0x110c>
 4013768:	00c00944 	movi	r3,37
 401376c:	b029883a 	mov	r20,r22
 4013770:	10c0021e 	bne	r2,r3,401377c <___vfiprintf_internal_r+0xec>
 4013774:	00001606 	br	40137d0 <___vfiprintf_internal_r+0x140>
 4013778:	10c00326 	beq	r2,r3,4013788 <___vfiprintf_internal_r+0xf8>
 401377c:	a5000044 	addi	r20,r20,1
 4013780:	a0800007 	ldb	r2,0(r20)
 4013784:	103ffc1e 	bne	r2,zero,4013778 <__alt_data_end+0xfc013778>
 4013788:	a5a1c83a 	sub	r16,r20,r22
 401378c:	80001026 	beq	r16,zero,40137d0 <___vfiprintf_internal_r+0x140>
 4013790:	d8c01c17 	ldw	r3,112(sp)
 4013794:	d8801b17 	ldw	r2,108(sp)
 4013798:	45800015 	stw	r22,0(r8)
 401379c:	80c7883a 	add	r3,r16,r3
 40137a0:	10800044 	addi	r2,r2,1
 40137a4:	44000115 	stw	r16,4(r8)
 40137a8:	d8c01c15 	stw	r3,112(sp)
 40137ac:	d8801b15 	stw	r2,108(sp)
 40137b0:	010001c4 	movi	r4,7
 40137b4:	2080750e 	bge	r4,r2,401398c <___vfiprintf_internal_r+0x2fc>
 40137b8:	1803951e 	bne	r3,zero,4014610 <___vfiprintf_internal_r+0xf80>
 40137bc:	d8c02417 	ldw	r3,144(sp)
 40137c0:	d8001b15 	stw	zero,108(sp)
 40137c4:	d811883a 	mov	r8,sp
 40137c8:	1c07883a 	add	r3,r3,r16
 40137cc:	d8c02415 	stw	r3,144(sp)
 40137d0:	a0800007 	ldb	r2,0(r20)
 40137d4:	1002e026 	beq	r2,zero,4014358 <___vfiprintf_internal_r+0xcc8>
 40137d8:	a5800044 	addi	r22,r20,1
 40137dc:	a0c00047 	ldb	r3,1(r20)
 40137e0:	d8001d85 	stb	zero,118(sp)
 40137e4:	0027883a 	mov	r19,zero
 40137e8:	d8002305 	stb	zero,140(sp)
 40137ec:	043fffc4 	movi	r16,-1
 40137f0:	d8002515 	stw	zero,148(sp)
 40137f4:	0023883a 	mov	r17,zero
 40137f8:	05001604 	movi	r20,88
 40137fc:	05400244 	movi	r21,9
 4013800:	402f883a 	mov	r23,r8
 4013804:	b5800044 	addi	r22,r22,1
 4013808:	18bff804 	addi	r2,r3,-32
 401380c:	a0827736 	bltu	r20,r2,40141ec <___vfiprintf_internal_r+0xb5c>
 4013810:	100490ba 	slli	r2,r2,2
 4013814:	01010074 	movhi	r4,1025
 4013818:	210e0a04 	addi	r4,r4,14376
 401381c:	1105883a 	add	r2,r2,r4
 4013820:	10800017 	ldw	r2,0(r2)
 4013824:	1000683a 	jmp	r2
 4013828:	04013eec 	andhi	r16,zero,1275
 401382c:	040141ec 	andhi	r16,zero,1287
 4013830:	040141ec 	andhi	r16,zero,1287
 4013834:	04013f08 	cmpgei	r16,zero,1276
 4013838:	040141ec 	andhi	r16,zero,1287
 401383c:	040141ec 	andhi	r16,zero,1287
 4013840:	040141ec 	andhi	r16,zero,1287
 4013844:	040141ec 	andhi	r16,zero,1287
 4013848:	040141ec 	andhi	r16,zero,1287
 401384c:	040141ec 	andhi	r16,zero,1287
 4013850:	04014110 	cmplti	r16,zero,1284
 4013854:	04014134 	movhi	r16,1284
 4013858:	040141ec 	andhi	r16,zero,1287
 401385c:	04013a2c 	andhi	r16,zero,1256
 4013860:	04014148 	cmpgei	r16,zero,1285
 4013864:	040141ec 	andhi	r16,zero,1287
 4013868:	04013f14 	movui	r16,1276
 401386c:	04013f20 	cmpeqi	r16,zero,1276
 4013870:	04013f20 	cmpeqi	r16,zero,1276
 4013874:	04013f20 	cmpeqi	r16,zero,1276
 4013878:	04013f20 	cmpeqi	r16,zero,1276
 401387c:	04013f20 	cmpeqi	r16,zero,1276
 4013880:	04013f20 	cmpeqi	r16,zero,1276
 4013884:	04013f20 	cmpeqi	r16,zero,1276
 4013888:	04013f20 	cmpeqi	r16,zero,1276
 401388c:	04013f20 	cmpeqi	r16,zero,1276
 4013890:	040141ec 	andhi	r16,zero,1287
 4013894:	040141ec 	andhi	r16,zero,1287
 4013898:	040141ec 	andhi	r16,zero,1287
 401389c:	040141ec 	andhi	r16,zero,1287
 40138a0:	040141ec 	andhi	r16,zero,1287
 40138a4:	040141ec 	andhi	r16,zero,1287
 40138a8:	040141ec 	andhi	r16,zero,1287
 40138ac:	040141ec 	andhi	r16,zero,1287
 40138b0:	040141ec 	andhi	r16,zero,1287
 40138b4:	040141ec 	andhi	r16,zero,1287
 40138b8:	04013f60 	cmpeqi	r16,zero,1277
 40138bc:	040141ec 	andhi	r16,zero,1287
 40138c0:	040141ec 	andhi	r16,zero,1287
 40138c4:	040141ec 	andhi	r16,zero,1287
 40138c8:	040141ec 	andhi	r16,zero,1287
 40138cc:	040141ec 	andhi	r16,zero,1287
 40138d0:	040141ec 	andhi	r16,zero,1287
 40138d4:	040141ec 	andhi	r16,zero,1287
 40138d8:	040141ec 	andhi	r16,zero,1287
 40138dc:	040141ec 	andhi	r16,zero,1287
 40138e0:	040141ec 	andhi	r16,zero,1287
 40138e4:	04013f9c 	xori	r16,zero,1278
 40138e8:	040141ec 	andhi	r16,zero,1287
 40138ec:	040141ec 	andhi	r16,zero,1287
 40138f0:	040141ec 	andhi	r16,zero,1287
 40138f4:	040141ec 	andhi	r16,zero,1287
 40138f8:	040141ec 	andhi	r16,zero,1287
 40138fc:	04013ff8 	rdprs	r16,zero,1279
 4013900:	040141ec 	andhi	r16,zero,1287
 4013904:	040141ec 	andhi	r16,zero,1287
 4013908:	0401406c 	andhi	r16,zero,1281
 401390c:	040141ec 	andhi	r16,zero,1287
 4013910:	040141ec 	andhi	r16,zero,1287
 4013914:	040141ec 	andhi	r16,zero,1287
 4013918:	040141ec 	andhi	r16,zero,1287
 401391c:	040141ec 	andhi	r16,zero,1287
 4013920:	040141ec 	andhi	r16,zero,1287
 4013924:	040141ec 	andhi	r16,zero,1287
 4013928:	040141ec 	andhi	r16,zero,1287
 401392c:	040141ec 	andhi	r16,zero,1287
 4013930:	040141ec 	andhi	r16,zero,1287
 4013934:	04013e14 	movui	r16,1272
 4013938:	04013e44 	movi	r16,1273
 401393c:	040141ec 	andhi	r16,zero,1287
 4013940:	040141ec 	andhi	r16,zero,1287
 4013944:	040141ec 	andhi	r16,zero,1287
 4013948:	04014194 	movui	r16,1286
 401394c:	04013e44 	movi	r16,1273
 4013950:	040141ec 	andhi	r16,zero,1287
 4013954:	040141ec 	andhi	r16,zero,1287
 4013958:	04013cec 	andhi	r16,zero,1267
 401395c:	040141ec 	andhi	r16,zero,1287
 4013960:	04013d00 	call	4013d0 <__alt_mem_sdram-0x3bfec30>
 4013964:	04013d38 	rdprs	r16,zero,1268
 4013968:	04013a38 	rdprs	r16,zero,1256
 401396c:	04013ce0 	cmpeqi	r16,zero,1267
 4013970:	040141ec 	andhi	r16,zero,1287
 4013974:	040140ac 	andhi	r16,zero,1282
 4013978:	040141ec 	andhi	r16,zero,1287
 401397c:	040140f8 	rdprs	r16,zero,1283
 4013980:	040141ec 	andhi	r16,zero,1287
 4013984:	040141ec 	andhi	r16,zero,1287
 4013988:	04013dbc 	xorhi	r16,zero,1270
 401398c:	42000204 	addi	r8,r8,8
 4013990:	d8c02417 	ldw	r3,144(sp)
 4013994:	1c07883a 	add	r3,r3,r16
 4013998:	d8c02415 	stw	r3,144(sp)
 401399c:	003f8c06 	br	40137d0 <__alt_data_end+0xfc0137d0>
 40139a0:	d9402017 	ldw	r5,128(sp)
 40139a4:	d9002117 	ldw	r4,132(sp)
 40139a8:	400ec900 	call	400ec90 <__swsetup_r>
 40139ac:	1003c11e 	bne	r2,zero,40148b4 <___vfiprintf_internal_r+0x1224>
 40139b0:	d9402017 	ldw	r5,128(sp)
 40139b4:	00c00284 	movi	r3,10
 40139b8:	2880030b 	ldhu	r2,12(r5)
 40139bc:	1080068c 	andi	r2,r2,26
 40139c0:	10ff581e 	bne	r2,r3,4013724 <__alt_data_end+0xfc013724>
 40139c4:	d8c02017 	ldw	r3,128(sp)
 40139c8:	1880038f 	ldh	r2,14(r3)
 40139cc:	103f5516 	blt	r2,zero,4013724 <__alt_data_end+0xfc013724>
 40139d0:	d9c02217 	ldw	r7,136(sp)
 40139d4:	d9002117 	ldw	r4,132(sp)
 40139d8:	a80d883a 	mov	r6,r21
 40139dc:	180b883a 	mov	r5,r3
 40139e0:	4014bb80 	call	4014bb8 <__sbprintf>
 40139e4:	dfc03517 	ldw	ra,212(sp)
 40139e8:	df003417 	ldw	fp,208(sp)
 40139ec:	ddc03317 	ldw	r23,204(sp)
 40139f0:	dd803217 	ldw	r22,200(sp)
 40139f4:	dd403117 	ldw	r21,196(sp)
 40139f8:	dd003017 	ldw	r20,192(sp)
 40139fc:	dcc02f17 	ldw	r19,188(sp)
 4013a00:	dc802e17 	ldw	r18,184(sp)
 4013a04:	dc402d17 	ldw	r17,180(sp)
 4013a08:	dc002c17 	ldw	r16,176(sp)
 4013a0c:	dec03604 	addi	sp,sp,216
 4013a10:	f800283a 	ret
 4013a14:	4010c9c0 	call	4010c9c <__sinit>
 4013a18:	003f2f06 	br	40136d8 <__alt_data_end+0xfc0136d8>
 4013a1c:	d8c02517 	ldw	r3,148(sp)
 4013a20:	d8802215 	stw	r2,136(sp)
 4013a24:	00c7c83a 	sub	r3,zero,r3
 4013a28:	d8c02515 	stw	r3,148(sp)
 4013a2c:	8c400114 	ori	r17,r17,4
 4013a30:	b0c00007 	ldb	r3,0(r22)
 4013a34:	003f7306 	br	4013804 <__alt_data_end+0xfc013804>
 4013a38:	00800c04 	movi	r2,48
 4013a3c:	d9402217 	ldw	r5,136(sp)
 4013a40:	d8801d05 	stb	r2,116(sp)
 4013a44:	00801e04 	movi	r2,120
 4013a48:	d8801d45 	stb	r2,117(sp)
 4013a4c:	d8001d85 	stb	zero,118(sp)
 4013a50:	b811883a 	mov	r8,r23
 4013a54:	28c00104 	addi	r3,r5,4
 4013a58:	2cc00017 	ldw	r19,0(r5)
 4013a5c:	0029883a 	mov	r20,zero
 4013a60:	88800094 	ori	r2,r17,2
 4013a64:	80032516 	blt	r16,zero,40146fc <___vfiprintf_internal_r+0x106c>
 4013a68:	00bfdfc4 	movi	r2,-129
 4013a6c:	88a2703a 	and	r17,r17,r2
 4013a70:	d8c02215 	stw	r3,136(sp)
 4013a74:	8c400094 	ori	r17,r17,2
 4013a78:	98032a1e 	bne	r19,zero,4014724 <___vfiprintf_internal_r+0x1094>
 4013a7c:	008100b4 	movhi	r2,1026
 4013a80:	10b3d304 	addi	r2,r2,-12468
 4013a84:	d8802615 	stw	r2,152(sp)
 4013a88:	002b883a 	mov	r21,zero
 4013a8c:	8001741e 	bne	r16,zero,4014060 <___vfiprintf_internal_r+0x9d0>
 4013a90:	0021883a 	mov	r16,zero
 4013a94:	0029883a 	mov	r20,zero
 4013a98:	ddc01a04 	addi	r23,sp,104
 4013a9c:	8027883a 	mov	r19,r16
 4013aa0:	8500010e 	bge	r16,r20,4013aa8 <___vfiprintf_internal_r+0x418>
 4013aa4:	a027883a 	mov	r19,r20
 4013aa8:	ad403fcc 	andi	r21,r21,255
 4013aac:	ad40201c 	xori	r21,r21,128
 4013ab0:	ad7fe004 	addi	r21,r21,-128
 4013ab4:	a8000126 	beq	r21,zero,4013abc <___vfiprintf_internal_r+0x42c>
 4013ab8:	9cc00044 	addi	r19,r19,1
 4013abc:	89c0008c 	andi	r7,r17,2
 4013ac0:	38000126 	beq	r7,zero,4013ac8 <___vfiprintf_internal_r+0x438>
 4013ac4:	9cc00084 	addi	r19,r19,2
 4013ac8:	88c0210c 	andi	r3,r17,132
 4013acc:	1801dd1e 	bne	r3,zero,4014244 <___vfiprintf_internal_r+0xbb4>
 4013ad0:	d9402517 	ldw	r5,148(sp)
 4013ad4:	2cebc83a 	sub	r21,r5,r19
 4013ad8:	0541da0e 	bge	zero,r21,4014244 <___vfiprintf_internal_r+0xbb4>
 4013adc:	07000404 	movi	fp,16
 4013ae0:	d8801c17 	ldw	r2,112(sp)
 4013ae4:	e543be0e 	bge	fp,r21,40149e0 <___vfiprintf_internal_r+0x1350>
 4013ae8:	014100b4 	movhi	r5,1026
 4013aec:	29743704 	addi	r5,r5,-12068
 4013af0:	dc002715 	stw	r16,156(sp)
 4013af4:	d9801b17 	ldw	r6,108(sp)
 4013af8:	a821883a 	mov	r16,r21
 4013afc:	d9402315 	stw	r5,140(sp)
 4013b00:	028001c4 	movi	r10,7
 4013b04:	d9c02915 	stw	r7,164(sp)
 4013b08:	182b883a 	mov	r21,r3
 4013b0c:	00000506 	br	4013b24 <___vfiprintf_internal_r+0x494>
 4013b10:	31000084 	addi	r4,r6,2
 4013b14:	42000204 	addi	r8,r8,8
 4013b18:	180d883a 	mov	r6,r3
 4013b1c:	843ffc04 	addi	r16,r16,-16
 4013b20:	e4000f0e 	bge	fp,r16,4013b60 <___vfiprintf_internal_r+0x4d0>
 4013b24:	010100b4 	movhi	r4,1026
 4013b28:	10800404 	addi	r2,r2,16
 4013b2c:	30c00044 	addi	r3,r6,1
 4013b30:	21343704 	addi	r4,r4,-12068
 4013b34:	41000015 	stw	r4,0(r8)
 4013b38:	47000115 	stw	fp,4(r8)
 4013b3c:	d8801c15 	stw	r2,112(sp)
 4013b40:	d8c01b15 	stw	r3,108(sp)
 4013b44:	50fff20e 	bge	r10,r3,4013b10 <__alt_data_end+0xfc013b10>
 4013b48:	1001b21e 	bne	r2,zero,4014214 <___vfiprintf_internal_r+0xb84>
 4013b4c:	843ffc04 	addi	r16,r16,-16
 4013b50:	000d883a 	mov	r6,zero
 4013b54:	01000044 	movi	r4,1
 4013b58:	d811883a 	mov	r8,sp
 4013b5c:	e43ff116 	blt	fp,r16,4013b24 <__alt_data_end+0xfc013b24>
 4013b60:	a807883a 	mov	r3,r21
 4013b64:	d9c02917 	ldw	r7,164(sp)
 4013b68:	802b883a 	mov	r21,r16
 4013b6c:	dc002717 	ldw	r16,156(sp)
 4013b70:	d9402317 	ldw	r5,140(sp)
 4013b74:	a885883a 	add	r2,r21,r2
 4013b78:	45400115 	stw	r21,4(r8)
 4013b7c:	41400015 	stw	r5,0(r8)
 4013b80:	d8801c15 	stw	r2,112(sp)
 4013b84:	d9001b15 	stw	r4,108(sp)
 4013b88:	014001c4 	movi	r5,7
 4013b8c:	29026216 	blt	r5,r4,4014518 <___vfiprintf_internal_r+0xe88>
 4013b90:	d9801d87 	ldb	r6,118(sp)
 4013b94:	42000204 	addi	r8,r8,8
 4013b98:	21400044 	addi	r5,r4,1
 4013b9c:	3001ae1e 	bne	r6,zero,4014258 <___vfiprintf_internal_r+0xbc8>
 4013ba0:	3801bb26 	beq	r7,zero,4014290 <___vfiprintf_internal_r+0xc00>
 4013ba4:	d9001d04 	addi	r4,sp,116
 4013ba8:	10800084 	addi	r2,r2,2
 4013bac:	41000015 	stw	r4,0(r8)
 4013bb0:	01000084 	movi	r4,2
 4013bb4:	41000115 	stw	r4,4(r8)
 4013bb8:	d8801c15 	stw	r2,112(sp)
 4013bbc:	d9401b15 	stw	r5,108(sp)
 4013bc0:	010001c4 	movi	r4,7
 4013bc4:	2142680e 	bge	r4,r5,4014568 <___vfiprintf_internal_r+0xed8>
 4013bc8:	1002b11e 	bne	r2,zero,4014690 <___vfiprintf_internal_r+0x1000>
 4013bcc:	01802004 	movi	r6,128
 4013bd0:	01400044 	movi	r5,1
 4013bd4:	0009883a 	mov	r4,zero
 4013bd8:	d811883a 	mov	r8,sp
 4013bdc:	1981ae1e 	bne	r3,r6,4014298 <___vfiprintf_internal_r+0xc08>
 4013be0:	d8c02517 	ldw	r3,148(sp)
 4013be4:	1cf9c83a 	sub	fp,r3,r19
 4013be8:	0701ab0e 	bge	zero,fp,4014298 <___vfiprintf_internal_r+0xc08>
 4013bec:	05400404 	movi	r21,16
 4013bf0:	af03a90e 	bge	r21,fp,4014a98 <___vfiprintf_internal_r+0x1408>
 4013bf4:	014100b4 	movhi	r5,1026
 4013bf8:	29743304 	addi	r5,r5,-12084
 4013bfc:	d9402315 	stw	r5,140(sp)
 4013c00:	01c001c4 	movi	r7,7
 4013c04:	00000506 	br	4013c1c <___vfiprintf_internal_r+0x58c>
 4013c08:	21800084 	addi	r6,r4,2
 4013c0c:	42000204 	addi	r8,r8,8
 4013c10:	1809883a 	mov	r4,r3
 4013c14:	e73ffc04 	addi	fp,fp,-16
 4013c18:	af000d0e 	bge	r21,fp,4013c50 <___vfiprintf_internal_r+0x5c0>
 4013c1c:	10800404 	addi	r2,r2,16
 4013c20:	20c00044 	addi	r3,r4,1
 4013c24:	44800015 	stw	r18,0(r8)
 4013c28:	45400115 	stw	r21,4(r8)
 4013c2c:	d8801c15 	stw	r2,112(sp)
 4013c30:	d8c01b15 	stw	r3,108(sp)
 4013c34:	38fff40e 	bge	r7,r3,4013c08 <__alt_data_end+0xfc013c08>
 4013c38:	10022b1e 	bne	r2,zero,40144e8 <___vfiprintf_internal_r+0xe58>
 4013c3c:	e73ffc04 	addi	fp,fp,-16
 4013c40:	01800044 	movi	r6,1
 4013c44:	0009883a 	mov	r4,zero
 4013c48:	d811883a 	mov	r8,sp
 4013c4c:	af3ff316 	blt	r21,fp,4013c1c <__alt_data_end+0xfc013c1c>
 4013c50:	d8c02317 	ldw	r3,140(sp)
 4013c54:	1705883a 	add	r2,r2,fp
 4013c58:	47000115 	stw	fp,4(r8)
 4013c5c:	40c00015 	stw	r3,0(r8)
 4013c60:	d8801c15 	stw	r2,112(sp)
 4013c64:	d9801b15 	stw	r6,108(sp)
 4013c68:	00c001c4 	movi	r3,7
 4013c6c:	19829416 	blt	r3,r6,40146c0 <___vfiprintf_internal_r+0x1030>
 4013c70:	8521c83a 	sub	r16,r16,r20
 4013c74:	42000204 	addi	r8,r8,8
 4013c78:	31400044 	addi	r5,r6,1
 4013c7c:	3009883a 	mov	r4,r6
 4013c80:	04018716 	blt	zero,r16,40142a0 <___vfiprintf_internal_r+0xc10>
 4013c84:	a085883a 	add	r2,r20,r2
 4013c88:	45c00015 	stw	r23,0(r8)
 4013c8c:	45000115 	stw	r20,4(r8)
 4013c90:	d8801c15 	stw	r2,112(sp)
 4013c94:	d9401b15 	stw	r5,108(sp)
 4013c98:	00c001c4 	movi	r3,7
 4013c9c:	1941c20e 	bge	r3,r5,40143a8 <___vfiprintf_internal_r+0xd18>
 4013ca0:	1002531e 	bne	r2,zero,40145f0 <___vfiprintf_internal_r+0xf60>
 4013ca4:	d8001b15 	stw	zero,108(sp)
 4013ca8:	8c40010c 	andi	r17,r17,4
 4013cac:	88023226 	beq	r17,zero,4014578 <___vfiprintf_internal_r+0xee8>
 4013cb0:	d9002517 	ldw	r4,148(sp)
 4013cb4:	24e3c83a 	sub	r17,r4,r19
 4013cb8:	04432916 	blt	zero,r17,4014960 <___vfiprintf_internal_r+0x12d0>
 4013cbc:	d8802517 	ldw	r2,148(sp)
 4013cc0:	14c0010e 	bge	r2,r19,4013cc8 <___vfiprintf_internal_r+0x638>
 4013cc4:	9805883a 	mov	r2,r19
 4013cc8:	d8c02417 	ldw	r3,144(sp)
 4013ccc:	1887883a 	add	r3,r3,r2
 4013cd0:	d8c02415 	stw	r3,144(sp)
 4013cd4:	d8001b15 	stw	zero,108(sp)
 4013cd8:	d811883a 	mov	r8,sp
 4013cdc:	003ea006 	br	4013760 <__alt_data_end+0xfc013760>
 4013ce0:	8c400814 	ori	r17,r17,32
 4013ce4:	b0c00007 	ldb	r3,0(r22)
 4013ce8:	003ec606 	br	4013804 <__alt_data_end+0xfc013804>
 4013cec:	b0c00007 	ldb	r3,0(r22)
 4013cf0:	00801b04 	movi	r2,108
 4013cf4:	18832026 	beq	r3,r2,4014978 <___vfiprintf_internal_r+0x12e8>
 4013cf8:	8c400414 	ori	r17,r17,16
 4013cfc:	003ec106 	br	4013804 <__alt_data_end+0xfc013804>
 4013d00:	9cc03fcc 	andi	r19,r19,255
 4013d04:	b811883a 	mov	r8,r23
 4013d08:	9803981e 	bne	r19,zero,4014b6c <___vfiprintf_internal_r+0x14dc>
 4013d0c:	8880080c 	andi	r2,r17,32
 4013d10:	1002be26 	beq	r2,zero,401480c <___vfiprintf_internal_r+0x117c>
 4013d14:	d9002217 	ldw	r4,136(sp)
 4013d18:	d9402417 	ldw	r5,144(sp)
 4013d1c:	20800017 	ldw	r2,0(r4)
 4013d20:	2807d7fa 	srai	r3,r5,31
 4013d24:	21000104 	addi	r4,r4,4
 4013d28:	d9002215 	stw	r4,136(sp)
 4013d2c:	11400015 	stw	r5,0(r2)
 4013d30:	10c00115 	stw	r3,4(r2)
 4013d34:	003e8a06 	br	4013760 <__alt_data_end+0xfc013760>
 4013d38:	9cc03fcc 	andi	r19,r19,255
 4013d3c:	b811883a 	mov	r8,r23
 4013d40:	9803871e 	bne	r19,zero,4014b60 <___vfiprintf_internal_r+0x14d0>
 4013d44:	8880080c 	andi	r2,r17,32
 4013d48:	10009a26 	beq	r2,zero,4013fb4 <___vfiprintf_internal_r+0x924>
 4013d4c:	d9002217 	ldw	r4,136(sp)
 4013d50:	d8001d85 	stb	zero,118(sp)
 4013d54:	20800204 	addi	r2,r4,8
 4013d58:	24c00017 	ldw	r19,0(r4)
 4013d5c:	25000117 	ldw	r20,4(r4)
 4013d60:	8002a416 	blt	r16,zero,40147f4 <___vfiprintf_internal_r+0x1164>
 4013d64:	013fdfc4 	movi	r4,-129
 4013d68:	9d06b03a 	or	r3,r19,r20
 4013d6c:	d8802215 	stw	r2,136(sp)
 4013d70:	8922703a 	and	r17,r17,r4
 4013d74:	18009b26 	beq	r3,zero,4013fe4 <___vfiprintf_internal_r+0x954>
 4013d78:	002b883a 	mov	r21,zero
 4013d7c:	ddc01a04 	addi	r23,sp,104
 4013d80:	9806d0fa 	srli	r3,r19,3
 4013d84:	a008977a 	slli	r4,r20,29
 4013d88:	a028d0fa 	srli	r20,r20,3
 4013d8c:	9cc001cc 	andi	r19,r19,7
 4013d90:	98800c04 	addi	r2,r19,48
 4013d94:	bdffffc4 	addi	r23,r23,-1
 4013d98:	20e6b03a 	or	r19,r4,r3
 4013d9c:	b8800005 	stb	r2,0(r23)
 4013da0:	9d06b03a 	or	r3,r19,r20
 4013da4:	183ff61e 	bne	r3,zero,4013d80 <__alt_data_end+0xfc013d80>
 4013da8:	88c0004c 	andi	r3,r17,1
 4013dac:	18021f1e 	bne	r3,zero,401462c <___vfiprintf_internal_r+0xf9c>
 4013db0:	d9401e17 	ldw	r5,120(sp)
 4013db4:	2de9c83a 	sub	r20,r5,r23
 4013db8:	003f3806 	br	4013a9c <__alt_data_end+0xfc013a9c>
 4013dbc:	9cc03fcc 	andi	r19,r19,255
 4013dc0:	b811883a 	mov	r8,r23
 4013dc4:	98034f1e 	bne	r19,zero,4014b04 <___vfiprintf_internal_r+0x1474>
 4013dc8:	008100b4 	movhi	r2,1026
 4013dcc:	10b3d304 	addi	r2,r2,-12468
 4013dd0:	d8802615 	stw	r2,152(sp)
 4013dd4:	8880080c 	andi	r2,r17,32
 4013dd8:	1000ac26 	beq	r2,zero,401408c <___vfiprintf_internal_r+0x9fc>
 4013ddc:	d9002217 	ldw	r4,136(sp)
 4013de0:	24c00017 	ldw	r19,0(r4)
 4013de4:	25000117 	ldw	r20,4(r4)
 4013de8:	21000204 	addi	r4,r4,8
 4013dec:	d9002215 	stw	r4,136(sp)
 4013df0:	8880004c 	andi	r2,r17,1
 4013df4:	1001e726 	beq	r2,zero,4014594 <___vfiprintf_internal_r+0xf04>
 4013df8:	9d04b03a 	or	r2,r19,r20
 4013dfc:	10025c1e 	bne	r2,zero,4014770 <___vfiprintf_internal_r+0x10e0>
 4013e00:	d8001d85 	stb	zero,118(sp)
 4013e04:	80024416 	blt	r16,zero,4014718 <___vfiprintf_internal_r+0x1088>
 4013e08:	00bfdfc4 	movi	r2,-129
 4013e0c:	88a2703a 	and	r17,r17,r2
 4013e10:	003f1d06 	br	4013a88 <__alt_data_end+0xfc013a88>
 4013e14:	d8c02217 	ldw	r3,136(sp)
 4013e18:	04c00044 	movi	r19,1
 4013e1c:	b811883a 	mov	r8,r23
 4013e20:	18800017 	ldw	r2,0(r3)
 4013e24:	18c00104 	addi	r3,r3,4
 4013e28:	d8001d85 	stb	zero,118(sp)
 4013e2c:	d8801005 	stb	r2,64(sp)
 4013e30:	d8c02215 	stw	r3,136(sp)
 4013e34:	9829883a 	mov	r20,r19
 4013e38:	ddc01004 	addi	r23,sp,64
 4013e3c:	0021883a 	mov	r16,zero
 4013e40:	003f1e06 	br	4013abc <__alt_data_end+0xfc013abc>
 4013e44:	9cc03fcc 	andi	r19,r19,255
 4013e48:	b811883a 	mov	r8,r23
 4013e4c:	9803331e 	bne	r19,zero,4014b1c <___vfiprintf_internal_r+0x148c>
 4013e50:	8880080c 	andi	r2,r17,32
 4013e54:	10004826 	beq	r2,zero,4013f78 <___vfiprintf_internal_r+0x8e8>
 4013e58:	d9002217 	ldw	r4,136(sp)
 4013e5c:	20800117 	ldw	r2,4(r4)
 4013e60:	24c00017 	ldw	r19,0(r4)
 4013e64:	21000204 	addi	r4,r4,8
 4013e68:	d9002215 	stw	r4,136(sp)
 4013e6c:	1029883a 	mov	r20,r2
 4013e70:	10024c16 	blt	r2,zero,40147a4 <___vfiprintf_internal_r+0x1114>
 4013e74:	dd401d83 	ldbu	r21,118(sp)
 4013e78:	80007116 	blt	r16,zero,4014040 <___vfiprintf_internal_r+0x9b0>
 4013e7c:	00ffdfc4 	movi	r3,-129
 4013e80:	9d04b03a 	or	r2,r19,r20
 4013e84:	88e2703a 	and	r17,r17,r3
 4013e88:	1000d126 	beq	r2,zero,40141d0 <___vfiprintf_internal_r+0xb40>
 4013e8c:	a0023526 	beq	r20,zero,4014764 <___vfiprintf_internal_r+0x10d4>
 4013e90:	ddc01a04 	addi	r23,sp,104
 4013e94:	4039883a 	mov	fp,r8
 4013e98:	9809883a 	mov	r4,r19
 4013e9c:	a00b883a 	mov	r5,r20
 4013ea0:	01800284 	movi	r6,10
 4013ea4:	000f883a 	mov	r7,zero
 4013ea8:	4015bbc0 	call	4015bbc <__umoddi3>
 4013eac:	10800c04 	addi	r2,r2,48
 4013eb0:	bdffffc4 	addi	r23,r23,-1
 4013eb4:	9809883a 	mov	r4,r19
 4013eb8:	a00b883a 	mov	r5,r20
 4013ebc:	b8800005 	stb	r2,0(r23)
 4013ec0:	01800284 	movi	r6,10
 4013ec4:	000f883a 	mov	r7,zero
 4013ec8:	40155c00 	call	40155c0 <__udivdi3>
 4013ecc:	1027883a 	mov	r19,r2
 4013ed0:	10c4b03a 	or	r2,r2,r3
 4013ed4:	1829883a 	mov	r20,r3
 4013ed8:	103fef1e 	bne	r2,zero,4013e98 <__alt_data_end+0xfc013e98>
 4013edc:	d9001e17 	ldw	r4,120(sp)
 4013ee0:	e011883a 	mov	r8,fp
 4013ee4:	25e9c83a 	sub	r20,r4,r23
 4013ee8:	003eec06 	br	4013a9c <__alt_data_end+0xfc013a9c>
 4013eec:	d8802307 	ldb	r2,140(sp)
 4013ef0:	1002361e 	bne	r2,zero,40147cc <___vfiprintf_internal_r+0x113c>
 4013ef4:	00c00804 	movi	r3,32
 4013ef8:	d8c02305 	stb	r3,140(sp)
 4013efc:	04c00044 	movi	r19,1
 4013f00:	b0c00007 	ldb	r3,0(r22)
 4013f04:	003e3f06 	br	4013804 <__alt_data_end+0xfc013804>
 4013f08:	8c400054 	ori	r17,r17,1
 4013f0c:	b0c00007 	ldb	r3,0(r22)
 4013f10:	003e3c06 	br	4013804 <__alt_data_end+0xfc013804>
 4013f14:	8c402014 	ori	r17,r17,128
 4013f18:	b0c00007 	ldb	r3,0(r22)
 4013f1c:	003e3906 	br	4013804 <__alt_data_end+0xfc013804>
 4013f20:	dc002715 	stw	r16,156(sp)
 4013f24:	d8002515 	stw	zero,148(sp)
 4013f28:	1f3ff404 	addi	fp,r3,-48
 4013f2c:	0009883a 	mov	r4,zero
 4013f30:	b021883a 	mov	r16,r22
 4013f34:	01400284 	movi	r5,10
 4013f38:	400b1dc0 	call	400b1dc <__mulsi3>
 4013f3c:	80c00007 	ldb	r3,0(r16)
 4013f40:	e089883a 	add	r4,fp,r2
 4013f44:	b5800044 	addi	r22,r22,1
 4013f48:	1f3ff404 	addi	fp,r3,-48
 4013f4c:	b021883a 	mov	r16,r22
 4013f50:	af3ff82e 	bgeu	r21,fp,4013f34 <__alt_data_end+0xfc013f34>
 4013f54:	d9002515 	stw	r4,148(sp)
 4013f58:	dc002717 	ldw	r16,156(sp)
 4013f5c:	003e2a06 	br	4013808 <__alt_data_end+0xfc013808>
 4013f60:	9cc03fcc 	andi	r19,r19,255
 4013f64:	b811883a 	mov	r8,r23
 4013f68:	9802e91e 	bne	r19,zero,4014b10 <___vfiprintf_internal_r+0x1480>
 4013f6c:	8c400414 	ori	r17,r17,16
 4013f70:	8880080c 	andi	r2,r17,32
 4013f74:	103fb81e 	bne	r2,zero,4013e58 <__alt_data_end+0xfc013e58>
 4013f78:	8880040c 	andi	r2,r17,16
 4013f7c:	10022e26 	beq	r2,zero,4014838 <___vfiprintf_internal_r+0x11a8>
 4013f80:	d9402217 	ldw	r5,136(sp)
 4013f84:	2cc00017 	ldw	r19,0(r5)
 4013f88:	29400104 	addi	r5,r5,4
 4013f8c:	d9402215 	stw	r5,136(sp)
 4013f90:	9829d7fa 	srai	r20,r19,31
 4013f94:	a005883a 	mov	r2,r20
 4013f98:	003fb506 	br	4013e70 <__alt_data_end+0xfc013e70>
 4013f9c:	9cc03fcc 	andi	r19,r19,255
 4013fa0:	b811883a 	mov	r8,r23
 4013fa4:	9802fa1e 	bne	r19,zero,4014b90 <___vfiprintf_internal_r+0x1500>
 4013fa8:	8c400414 	ori	r17,r17,16
 4013fac:	8880080c 	andi	r2,r17,32
 4013fb0:	103f661e 	bne	r2,zero,4013d4c <__alt_data_end+0xfc013d4c>
 4013fb4:	8880040c 	andi	r2,r17,16
 4013fb8:	10020626 	beq	r2,zero,40147d4 <___vfiprintf_internal_r+0x1144>
 4013fbc:	d9402217 	ldw	r5,136(sp)
 4013fc0:	d8001d85 	stb	zero,118(sp)
 4013fc4:	0029883a 	mov	r20,zero
 4013fc8:	28800104 	addi	r2,r5,4
 4013fcc:	2cc00017 	ldw	r19,0(r5)
 4013fd0:	80020816 	blt	r16,zero,40147f4 <___vfiprintf_internal_r+0x1164>
 4013fd4:	00ffdfc4 	movi	r3,-129
 4013fd8:	d8802215 	stw	r2,136(sp)
 4013fdc:	88e2703a 	and	r17,r17,r3
 4013fe0:	983f651e 	bne	r19,zero,4013d78 <__alt_data_end+0xfc013d78>
 4013fe4:	002b883a 	mov	r21,zero
 4013fe8:	8002cf26 	beq	r16,zero,4014b28 <___vfiprintf_internal_r+0x1498>
 4013fec:	0027883a 	mov	r19,zero
 4013ff0:	0029883a 	mov	r20,zero
 4013ff4:	003f6106 	br	4013d7c <__alt_data_end+0xfc013d7c>
 4013ff8:	9cc03fcc 	andi	r19,r19,255
 4013ffc:	b811883a 	mov	r8,r23
 4014000:	9802e01e 	bne	r19,zero,4014b84 <___vfiprintf_internal_r+0x14f4>
 4014004:	8c400414 	ori	r17,r17,16
 4014008:	8880080c 	andi	r2,r17,32
 401400c:	1000641e 	bne	r2,zero,40141a0 <___vfiprintf_internal_r+0xb10>
 4014010:	8880040c 	andi	r2,r17,16
 4014014:	1001c81e 	bne	r2,zero,4014738 <___vfiprintf_internal_r+0x10a8>
 4014018:	8880100c 	andi	r2,r17,64
 401401c:	d8001d85 	stb	zero,118(sp)
 4014020:	1002281e 	bne	r2,zero,40148c4 <___vfiprintf_internal_r+0x1234>
 4014024:	d9002217 	ldw	r4,136(sp)
 4014028:	0029883a 	mov	r20,zero
 401402c:	20800104 	addi	r2,r4,4
 4014030:	24c00017 	ldw	r19,0(r4)
 4014034:	8001c60e 	bge	r16,zero,4014750 <___vfiprintf_internal_r+0x10c0>
 4014038:	d8802215 	stw	r2,136(sp)
 401403c:	002b883a 	mov	r21,zero
 4014040:	9d04b03a 	or	r2,r19,r20
 4014044:	103f911e 	bne	r2,zero,4013e8c <__alt_data_end+0xfc013e8c>
 4014048:	00800044 	movi	r2,1
 401404c:	10803fcc 	andi	r2,r2,255
 4014050:	00c00044 	movi	r3,1
 4014054:	10c05f26 	beq	r2,r3,40141d4 <___vfiprintf_internal_r+0xb44>
 4014058:	00c00084 	movi	r3,2
 401405c:	10ffe31e 	bne	r2,r3,4013fec <__alt_data_end+0xfc013fec>
 4014060:	0027883a 	mov	r19,zero
 4014064:	0029883a 	mov	r20,zero
 4014068:	00015106 	br	40145b0 <___vfiprintf_internal_r+0xf20>
 401406c:	9cc03fcc 	andi	r19,r19,255
 4014070:	b811883a 	mov	r8,r23
 4014074:	9802c01e 	bne	r19,zero,4014b78 <___vfiprintf_internal_r+0x14e8>
 4014078:	014100b4 	movhi	r5,1026
 401407c:	2973ce04 	addi	r5,r5,-12488
 4014080:	d9402615 	stw	r5,152(sp)
 4014084:	8880080c 	andi	r2,r17,32
 4014088:	103f541e 	bne	r2,zero,4013ddc <__alt_data_end+0xfc013ddc>
 401408c:	8880040c 	andi	r2,r17,16
 4014090:	1001f226 	beq	r2,zero,401485c <___vfiprintf_internal_r+0x11cc>
 4014094:	d9402217 	ldw	r5,136(sp)
 4014098:	0029883a 	mov	r20,zero
 401409c:	2cc00017 	ldw	r19,0(r5)
 40140a0:	29400104 	addi	r5,r5,4
 40140a4:	d9402215 	stw	r5,136(sp)
 40140a8:	003f5106 	br	4013df0 <__alt_data_end+0xfc013df0>
 40140ac:	d8c02217 	ldw	r3,136(sp)
 40140b0:	b811883a 	mov	r8,r23
 40140b4:	d8001d85 	stb	zero,118(sp)
 40140b8:	1dc00017 	ldw	r23,0(r3)
 40140bc:	1f000104 	addi	fp,r3,4
 40140c0:	b8025926 	beq	r23,zero,4014a28 <___vfiprintf_internal_r+0x1398>
 40140c4:	80023316 	blt	r16,zero,4014994 <___vfiprintf_internal_r+0x1304>
 40140c8:	800d883a 	mov	r6,r16
 40140cc:	000b883a 	mov	r5,zero
 40140d0:	b809883a 	mov	r4,r23
 40140d4:	da002a15 	stw	r8,168(sp)
 40140d8:	4011a080 	call	4011a08 <memchr>
 40140dc:	da002a17 	ldw	r8,168(sp)
 40140e0:	10026826 	beq	r2,zero,4014a84 <___vfiprintf_internal_r+0x13f4>
 40140e4:	15e9c83a 	sub	r20,r2,r23
 40140e8:	dd401d83 	ldbu	r21,118(sp)
 40140ec:	df002215 	stw	fp,136(sp)
 40140f0:	0021883a 	mov	r16,zero
 40140f4:	003e6906 	br	4013a9c <__alt_data_end+0xfc013a9c>
 40140f8:	9cc03fcc 	andi	r19,r19,255
 40140fc:	b811883a 	mov	r8,r23
 4014100:	983fc126 	beq	r19,zero,4014008 <__alt_data_end+0xfc014008>
 4014104:	d8c02303 	ldbu	r3,140(sp)
 4014108:	d8c01d85 	stb	r3,118(sp)
 401410c:	003fbe06 	br	4014008 <__alt_data_end+0xfc014008>
 4014110:	d9002217 	ldw	r4,136(sp)
 4014114:	d9402217 	ldw	r5,136(sp)
 4014118:	21000017 	ldw	r4,0(r4)
 401411c:	28800104 	addi	r2,r5,4
 4014120:	d9002515 	stw	r4,148(sp)
 4014124:	203e3d16 	blt	r4,zero,4013a1c <__alt_data_end+0xfc013a1c>
 4014128:	d8802215 	stw	r2,136(sp)
 401412c:	b0c00007 	ldb	r3,0(r22)
 4014130:	003db406 	br	4013804 <__alt_data_end+0xfc013804>
 4014134:	00c00ac4 	movi	r3,43
 4014138:	d8c02305 	stb	r3,140(sp)
 401413c:	04c00044 	movi	r19,1
 4014140:	b0c00007 	ldb	r3,0(r22)
 4014144:	003daf06 	br	4013804 <__alt_data_end+0xfc013804>
 4014148:	b0c00007 	ldb	r3,0(r22)
 401414c:	01000a84 	movi	r4,42
 4014150:	b4000044 	addi	r16,r22,1
 4014154:	19025e26 	beq	r3,r4,4014ad0 <___vfiprintf_internal_r+0x1440>
 4014158:	1f3ff404 	addi	fp,r3,-48
 401415c:	0009883a 	mov	r4,zero
 4014160:	af025236 	bltu	r21,fp,4014aac <___vfiprintf_internal_r+0x141c>
 4014164:	01400284 	movi	r5,10
 4014168:	400b1dc0 	call	400b1dc <__mulsi3>
 401416c:	80c00007 	ldb	r3,0(r16)
 4014170:	1709883a 	add	r4,r2,fp
 4014174:	85800044 	addi	r22,r16,1
 4014178:	1f3ff404 	addi	fp,r3,-48
 401417c:	b021883a 	mov	r16,r22
 4014180:	af3ff82e 	bgeu	r21,fp,4014164 <__alt_data_end+0xfc014164>
 4014184:	2021883a 	mov	r16,r4
 4014188:	203d9f0e 	bge	r4,zero,4013808 <__alt_data_end+0xfc013808>
 401418c:	043fffc4 	movi	r16,-1
 4014190:	003d9d06 	br	4013808 <__alt_data_end+0xfc013808>
 4014194:	8c401014 	ori	r17,r17,64
 4014198:	b0c00007 	ldb	r3,0(r22)
 401419c:	003d9906 	br	4013804 <__alt_data_end+0xfc013804>
 40141a0:	d9002217 	ldw	r4,136(sp)
 40141a4:	d8001d85 	stb	zero,118(sp)
 40141a8:	20c00204 	addi	r3,r4,8
 40141ac:	24c00017 	ldw	r19,0(r4)
 40141b0:	25000117 	ldw	r20,4(r4)
 40141b4:	8001e716 	blt	r16,zero,4014954 <___vfiprintf_internal_r+0x12c4>
 40141b8:	013fdfc4 	movi	r4,-129
 40141bc:	9d04b03a 	or	r2,r19,r20
 40141c0:	d8c02215 	stw	r3,136(sp)
 40141c4:	8922703a 	and	r17,r17,r4
 40141c8:	002b883a 	mov	r21,zero
 40141cc:	103f2f1e 	bne	r2,zero,4013e8c <__alt_data_end+0xfc013e8c>
 40141d0:	803e2f26 	beq	r16,zero,4013a90 <__alt_data_end+0xfc013a90>
 40141d4:	0027883a 	mov	r19,zero
 40141d8:	9cc00c04 	addi	r19,r19,48
 40141dc:	dcc019c5 	stb	r19,103(sp)
 40141e0:	dd002817 	ldw	r20,160(sp)
 40141e4:	ddc019c4 	addi	r23,sp,103
 40141e8:	003e2c06 	br	4013a9c <__alt_data_end+0xfc013a9c>
 40141ec:	9cc03fcc 	andi	r19,r19,255
 40141f0:	b811883a 	mov	r8,r23
 40141f4:	9802571e 	bne	r19,zero,4014b54 <___vfiprintf_internal_r+0x14c4>
 40141f8:	18005726 	beq	r3,zero,4014358 <___vfiprintf_internal_r+0xcc8>
 40141fc:	04c00044 	movi	r19,1
 4014200:	d8c01005 	stb	r3,64(sp)
 4014204:	d8001d85 	stb	zero,118(sp)
 4014208:	9829883a 	mov	r20,r19
 401420c:	ddc01004 	addi	r23,sp,64
 4014210:	003f0a06 	br	4013e3c <__alt_data_end+0xfc013e3c>
 4014214:	d9402017 	ldw	r5,128(sp)
 4014218:	d9002117 	ldw	r4,132(sp)
 401421c:	d9801a04 	addi	r6,sp,104
 4014220:	da802a15 	stw	r10,168(sp)
 4014224:	401357c0 	call	401357c <__sprint_r.part.0>
 4014228:	da802a17 	ldw	r10,168(sp)
 401422c:	1000501e 	bne	r2,zero,4014370 <___vfiprintf_internal_r+0xce0>
 4014230:	d9801b17 	ldw	r6,108(sp)
 4014234:	d8801c17 	ldw	r2,112(sp)
 4014238:	d811883a 	mov	r8,sp
 401423c:	31000044 	addi	r4,r6,1
 4014240:	003e3606 	br	4013b1c <__alt_data_end+0xfc013b1c>
 4014244:	d9001b17 	ldw	r4,108(sp)
 4014248:	d8801c17 	ldw	r2,112(sp)
 401424c:	21400044 	addi	r5,r4,1
 4014250:	d9801d87 	ldb	r6,118(sp)
 4014254:	303e5226 	beq	r6,zero,4013ba0 <__alt_data_end+0xfc013ba0>
 4014258:	01800044 	movi	r6,1
 401425c:	d9001d84 	addi	r4,sp,118
 4014260:	1185883a 	add	r2,r2,r6
 4014264:	41000015 	stw	r4,0(r8)
 4014268:	41800115 	stw	r6,4(r8)
 401426c:	d8801c15 	stw	r2,112(sp)
 4014270:	d9401b15 	stw	r5,108(sp)
 4014274:	010001c4 	movi	r4,7
 4014278:	2140b00e 	bge	r4,r5,401453c <___vfiprintf_internal_r+0xeac>
 401427c:	1000f61e 	bne	r2,zero,4014658 <___vfiprintf_internal_r+0xfc8>
 4014280:	3800b31e 	bne	r7,zero,4014550 <___vfiprintf_internal_r+0xec0>
 4014284:	0009883a 	mov	r4,zero
 4014288:	300b883a 	mov	r5,r6
 401428c:	d811883a 	mov	r8,sp
 4014290:	01802004 	movi	r6,128
 4014294:	19be5226 	beq	r3,r6,4013be0 <__alt_data_end+0xfc013be0>
 4014298:	8521c83a 	sub	r16,r16,r20
 401429c:	043e790e 	bge	zero,r16,4013c84 <__alt_data_end+0xfc013c84>
 40142a0:	05400404 	movi	r21,16
 40142a4:	ac01b00e 	bge	r21,r16,4014968 <___vfiprintf_internal_r+0x12d8>
 40142a8:	014100b4 	movhi	r5,1026
 40142ac:	29743304 	addi	r5,r5,-12084
 40142b0:	d9402315 	stw	r5,140(sp)
 40142b4:	070001c4 	movi	fp,7
 40142b8:	00000506 	br	40142d0 <___vfiprintf_internal_r+0xc40>
 40142bc:	21400084 	addi	r5,r4,2
 40142c0:	42000204 	addi	r8,r8,8
 40142c4:	1809883a 	mov	r4,r3
 40142c8:	843ffc04 	addi	r16,r16,-16
 40142cc:	ac000d0e 	bge	r21,r16,4014304 <___vfiprintf_internal_r+0xc74>
 40142d0:	10800404 	addi	r2,r2,16
 40142d4:	20c00044 	addi	r3,r4,1
 40142d8:	44800015 	stw	r18,0(r8)
 40142dc:	45400115 	stw	r21,4(r8)
 40142e0:	d8801c15 	stw	r2,112(sp)
 40142e4:	d8c01b15 	stw	r3,108(sp)
 40142e8:	e0fff40e 	bge	fp,r3,40142bc <__alt_data_end+0xfc0142bc>
 40142ec:	1000101e 	bne	r2,zero,4014330 <___vfiprintf_internal_r+0xca0>
 40142f0:	843ffc04 	addi	r16,r16,-16
 40142f4:	01400044 	movi	r5,1
 40142f8:	0009883a 	mov	r4,zero
 40142fc:	d811883a 	mov	r8,sp
 4014300:	ac3ff316 	blt	r21,r16,40142d0 <__alt_data_end+0xfc0142d0>
 4014304:	d8c02317 	ldw	r3,140(sp)
 4014308:	1405883a 	add	r2,r2,r16
 401430c:	44000115 	stw	r16,4(r8)
 4014310:	40c00015 	stw	r3,0(r8)
 4014314:	d8801c15 	stw	r2,112(sp)
 4014318:	d9401b15 	stw	r5,108(sp)
 401431c:	00c001c4 	movi	r3,7
 4014320:	19401916 	blt	r3,r5,4014388 <___vfiprintf_internal_r+0xcf8>
 4014324:	42000204 	addi	r8,r8,8
 4014328:	29400044 	addi	r5,r5,1
 401432c:	003e5506 	br	4013c84 <__alt_data_end+0xfc013c84>
 4014330:	d9402017 	ldw	r5,128(sp)
 4014334:	d9002117 	ldw	r4,132(sp)
 4014338:	d9801a04 	addi	r6,sp,104
 401433c:	401357c0 	call	401357c <__sprint_r.part.0>
 4014340:	10000b1e 	bne	r2,zero,4014370 <___vfiprintf_internal_r+0xce0>
 4014344:	d9001b17 	ldw	r4,108(sp)
 4014348:	d8801c17 	ldw	r2,112(sp)
 401434c:	d811883a 	mov	r8,sp
 4014350:	21400044 	addi	r5,r4,1
 4014354:	003fdc06 	br	40142c8 <__alt_data_end+0xfc0142c8>
 4014358:	d8801c17 	ldw	r2,112(sp)
 401435c:	10000426 	beq	r2,zero,4014370 <___vfiprintf_internal_r+0xce0>
 4014360:	d9402017 	ldw	r5,128(sp)
 4014364:	d9002117 	ldw	r4,132(sp)
 4014368:	d9801a04 	addi	r6,sp,104
 401436c:	401357c0 	call	401357c <__sprint_r.part.0>
 4014370:	d9402017 	ldw	r5,128(sp)
 4014374:	2880030b 	ldhu	r2,12(r5)
 4014378:	1080100c 	andi	r2,r2,64
 401437c:	10014d1e 	bne	r2,zero,40148b4 <___vfiprintf_internal_r+0x1224>
 4014380:	d8802417 	ldw	r2,144(sp)
 4014384:	003d9706 	br	40139e4 <__alt_data_end+0xfc0139e4>
 4014388:	1000d21e 	bne	r2,zero,40146d4 <___vfiprintf_internal_r+0x1044>
 401438c:	00c00044 	movi	r3,1
 4014390:	a005883a 	mov	r2,r20
 4014394:	ddc00015 	stw	r23,0(sp)
 4014398:	dd000115 	stw	r20,4(sp)
 401439c:	dd001c15 	stw	r20,112(sp)
 40143a0:	d8c01b15 	stw	r3,108(sp)
 40143a4:	d811883a 	mov	r8,sp
 40143a8:	42000204 	addi	r8,r8,8
 40143ac:	8c40010c 	andi	r17,r17,4
 40143b0:	88004026 	beq	r17,zero,40144b4 <___vfiprintf_internal_r+0xe24>
 40143b4:	d9002517 	ldw	r4,148(sp)
 40143b8:	24e3c83a 	sub	r17,r4,r19
 40143bc:	04403d0e 	bge	zero,r17,40144b4 <___vfiprintf_internal_r+0xe24>
 40143c0:	04000404 	movi	r16,16
 40143c4:	8441a90e 	bge	r16,r17,4014a6c <___vfiprintf_internal_r+0x13dc>
 40143c8:	00c100b4 	movhi	r3,1026
 40143cc:	18f43704 	addi	r3,r3,-12068
 40143d0:	d9001b17 	ldw	r4,108(sp)
 40143d4:	d8c02315 	stw	r3,140(sp)
 40143d8:	050001c4 	movi	r20,7
 40143dc:	dd402117 	ldw	r21,132(sp)
 40143e0:	ddc02017 	ldw	r23,128(sp)
 40143e4:	00000506 	br	40143fc <___vfiprintf_internal_r+0xd6c>
 40143e8:	21400084 	addi	r5,r4,2
 40143ec:	42000204 	addi	r8,r8,8
 40143f0:	1809883a 	mov	r4,r3
 40143f4:	8c7ffc04 	addi	r17,r17,-16
 40143f8:	84400f0e 	bge	r16,r17,4014438 <___vfiprintf_internal_r+0xda8>
 40143fc:	014100b4 	movhi	r5,1026
 4014400:	10800404 	addi	r2,r2,16
 4014404:	20c00044 	addi	r3,r4,1
 4014408:	29743704 	addi	r5,r5,-12068
 401440c:	41400015 	stw	r5,0(r8)
 4014410:	44000115 	stw	r16,4(r8)
 4014414:	d8801c15 	stw	r2,112(sp)
 4014418:	d8c01b15 	stw	r3,108(sp)
 401441c:	a0fff20e 	bge	r20,r3,40143e8 <__alt_data_end+0xfc0143e8>
 4014420:	1000141e 	bne	r2,zero,4014474 <___vfiprintf_internal_r+0xde4>
 4014424:	8c7ffc04 	addi	r17,r17,-16
 4014428:	01400044 	movi	r5,1
 401442c:	0009883a 	mov	r4,zero
 4014430:	d811883a 	mov	r8,sp
 4014434:	847ff116 	blt	r16,r17,40143fc <__alt_data_end+0xfc0143fc>
 4014438:	d8c02317 	ldw	r3,140(sp)
 401443c:	1445883a 	add	r2,r2,r17
 4014440:	44400115 	stw	r17,4(r8)
 4014444:	40c00015 	stw	r3,0(r8)
 4014448:	d8801c15 	stw	r2,112(sp)
 401444c:	d9401b15 	stw	r5,108(sp)
 4014450:	00c001c4 	movi	r3,7
 4014454:	1940170e 	bge	r3,r5,40144b4 <___vfiprintf_internal_r+0xe24>
 4014458:	1000101e 	bne	r2,zero,401449c <___vfiprintf_internal_r+0xe0c>
 401445c:	d8802517 	ldw	r2,148(sp)
 4014460:	14c11616 	blt	r2,r19,40148bc <___vfiprintf_internal_r+0x122c>
 4014464:	d9002417 	ldw	r4,144(sp)
 4014468:	2089883a 	add	r4,r4,r2
 401446c:	d9002415 	stw	r4,144(sp)
 4014470:	003e1806 	br	4013cd4 <__alt_data_end+0xfc013cd4>
 4014474:	d9801a04 	addi	r6,sp,104
 4014478:	b80b883a 	mov	r5,r23
 401447c:	a809883a 	mov	r4,r21
 4014480:	401357c0 	call	401357c <__sprint_r.part.0>
 4014484:	103fba1e 	bne	r2,zero,4014370 <__alt_data_end+0xfc014370>
 4014488:	d9001b17 	ldw	r4,108(sp)
 401448c:	d8801c17 	ldw	r2,112(sp)
 4014490:	d811883a 	mov	r8,sp
 4014494:	21400044 	addi	r5,r4,1
 4014498:	003fd606 	br	40143f4 <__alt_data_end+0xfc0143f4>
 401449c:	d9402017 	ldw	r5,128(sp)
 40144a0:	d9002117 	ldw	r4,132(sp)
 40144a4:	d9801a04 	addi	r6,sp,104
 40144a8:	401357c0 	call	401357c <__sprint_r.part.0>
 40144ac:	103fb01e 	bne	r2,zero,4014370 <__alt_data_end+0xfc014370>
 40144b0:	d8801c17 	ldw	r2,112(sp)
 40144b4:	d8c02517 	ldw	r3,148(sp)
 40144b8:	1cc0010e 	bge	r3,r19,40144c0 <___vfiprintf_internal_r+0xe30>
 40144bc:	9807883a 	mov	r3,r19
 40144c0:	d9002417 	ldw	r4,144(sp)
 40144c4:	20c9883a 	add	r4,r4,r3
 40144c8:	d9002415 	stw	r4,144(sp)
 40144cc:	103e0126 	beq	r2,zero,4013cd4 <__alt_data_end+0xfc013cd4>
 40144d0:	d9402017 	ldw	r5,128(sp)
 40144d4:	d9002117 	ldw	r4,132(sp)
 40144d8:	d9801a04 	addi	r6,sp,104
 40144dc:	401357c0 	call	401357c <__sprint_r.part.0>
 40144e0:	103dfc26 	beq	r2,zero,4013cd4 <__alt_data_end+0xfc013cd4>
 40144e4:	003fa206 	br	4014370 <__alt_data_end+0xfc014370>
 40144e8:	d9402017 	ldw	r5,128(sp)
 40144ec:	d9002117 	ldw	r4,132(sp)
 40144f0:	d9801a04 	addi	r6,sp,104
 40144f4:	d9c02b15 	stw	r7,172(sp)
 40144f8:	401357c0 	call	401357c <__sprint_r.part.0>
 40144fc:	d9c02b17 	ldw	r7,172(sp)
 4014500:	103f9b1e 	bne	r2,zero,4014370 <__alt_data_end+0xfc014370>
 4014504:	d9001b17 	ldw	r4,108(sp)
 4014508:	d8801c17 	ldw	r2,112(sp)
 401450c:	d811883a 	mov	r8,sp
 4014510:	21800044 	addi	r6,r4,1
 4014514:	003dbf06 	br	4013c14 <__alt_data_end+0xfc013c14>
 4014518:	1000d81e 	bne	r2,zero,401487c <___vfiprintf_internal_r+0x11ec>
 401451c:	d9001d87 	ldb	r4,118(sp)
 4014520:	20000a26 	beq	r4,zero,401454c <___vfiprintf_internal_r+0xebc>
 4014524:	00800044 	movi	r2,1
 4014528:	d9001d84 	addi	r4,sp,118
 401452c:	100b883a 	mov	r5,r2
 4014530:	d9000015 	stw	r4,0(sp)
 4014534:	d8800115 	stw	r2,4(sp)
 4014538:	d811883a 	mov	r8,sp
 401453c:	2809883a 	mov	r4,r5
 4014540:	42000204 	addi	r8,r8,8
 4014544:	29400044 	addi	r5,r5,1
 4014548:	003d9506 	br	4013ba0 <__alt_data_end+0xfc013ba0>
 401454c:	3800fd26 	beq	r7,zero,4014944 <___vfiprintf_internal_r+0x12b4>
 4014550:	00800084 	movi	r2,2
 4014554:	d9001d04 	addi	r4,sp,116
 4014558:	d9000015 	stw	r4,0(sp)
 401455c:	d8800115 	stw	r2,4(sp)
 4014560:	01400044 	movi	r5,1
 4014564:	d811883a 	mov	r8,sp
 4014568:	2809883a 	mov	r4,r5
 401456c:	42000204 	addi	r8,r8,8
 4014570:	29400044 	addi	r5,r5,1
 4014574:	003f4606 	br	4014290 <__alt_data_end+0xfc014290>
 4014578:	d8802517 	ldw	r2,148(sp)
 401457c:	14c0010e 	bge	r2,r19,4014584 <___vfiprintf_internal_r+0xef4>
 4014580:	9805883a 	mov	r2,r19
 4014584:	d9402417 	ldw	r5,144(sp)
 4014588:	288b883a 	add	r5,r5,r2
 401458c:	d9402415 	stw	r5,144(sp)
 4014590:	003dd006 	br	4013cd4 <__alt_data_end+0xfc013cd4>
 4014594:	d8001d85 	stb	zero,118(sp)
 4014598:	80005d16 	blt	r16,zero,4014710 <___vfiprintf_internal_r+0x1080>
 401459c:	00ffdfc4 	movi	r3,-129
 40145a0:	9d04b03a 	or	r2,r19,r20
 40145a4:	88e2703a 	and	r17,r17,r3
 40145a8:	103d3726 	beq	r2,zero,4013a88 <__alt_data_end+0xfc013a88>
 40145ac:	002b883a 	mov	r21,zero
 40145b0:	d9002617 	ldw	r4,152(sp)
 40145b4:	ddc01a04 	addi	r23,sp,104
 40145b8:	988003cc 	andi	r2,r19,15
 40145bc:	a006973a 	slli	r3,r20,28
 40145c0:	2085883a 	add	r2,r4,r2
 40145c4:	9826d13a 	srli	r19,r19,4
 40145c8:	10800003 	ldbu	r2,0(r2)
 40145cc:	a028d13a 	srli	r20,r20,4
 40145d0:	bdffffc4 	addi	r23,r23,-1
 40145d4:	1ce6b03a 	or	r19,r3,r19
 40145d8:	b8800005 	stb	r2,0(r23)
 40145dc:	9d04b03a 	or	r2,r19,r20
 40145e0:	103ff51e 	bne	r2,zero,40145b8 <__alt_data_end+0xfc0145b8>
 40145e4:	d8801e17 	ldw	r2,120(sp)
 40145e8:	15e9c83a 	sub	r20,r2,r23
 40145ec:	003d2b06 	br	4013a9c <__alt_data_end+0xfc013a9c>
 40145f0:	d9402017 	ldw	r5,128(sp)
 40145f4:	d9002117 	ldw	r4,132(sp)
 40145f8:	d9801a04 	addi	r6,sp,104
 40145fc:	401357c0 	call	401357c <__sprint_r.part.0>
 4014600:	103f5b1e 	bne	r2,zero,4014370 <__alt_data_end+0xfc014370>
 4014604:	d8801c17 	ldw	r2,112(sp)
 4014608:	d811883a 	mov	r8,sp
 401460c:	003f6706 	br	40143ac <__alt_data_end+0xfc0143ac>
 4014610:	d9402017 	ldw	r5,128(sp)
 4014614:	d9002117 	ldw	r4,132(sp)
 4014618:	d9801a04 	addi	r6,sp,104
 401461c:	401357c0 	call	401357c <__sprint_r.part.0>
 4014620:	103f531e 	bne	r2,zero,4014370 <__alt_data_end+0xfc014370>
 4014624:	d811883a 	mov	r8,sp
 4014628:	003cd906 	br	4013990 <__alt_data_end+0xfc013990>
 401462c:	10803fcc 	andi	r2,r2,255
 4014630:	1080201c 	xori	r2,r2,128
 4014634:	10bfe004 	addi	r2,r2,-128
 4014638:	00c00c04 	movi	r3,48
 401463c:	10ffe926 	beq	r2,r3,40145e4 <__alt_data_end+0xfc0145e4>
 4014640:	b8ffffc5 	stb	r3,-1(r23)
 4014644:	d8c01e17 	ldw	r3,120(sp)
 4014648:	b8bfffc4 	addi	r2,r23,-1
 401464c:	102f883a 	mov	r23,r2
 4014650:	18a9c83a 	sub	r20,r3,r2
 4014654:	003d1106 	br	4013a9c <__alt_data_end+0xfc013a9c>
 4014658:	d9402017 	ldw	r5,128(sp)
 401465c:	d9002117 	ldw	r4,132(sp)
 4014660:	d9801a04 	addi	r6,sp,104
 4014664:	d8c02a15 	stw	r3,168(sp)
 4014668:	d9c02b15 	stw	r7,172(sp)
 401466c:	401357c0 	call	401357c <__sprint_r.part.0>
 4014670:	d8c02a17 	ldw	r3,168(sp)
 4014674:	d9c02b17 	ldw	r7,172(sp)
 4014678:	103f3d1e 	bne	r2,zero,4014370 <__alt_data_end+0xfc014370>
 401467c:	d9001b17 	ldw	r4,108(sp)
 4014680:	d8801c17 	ldw	r2,112(sp)
 4014684:	d811883a 	mov	r8,sp
 4014688:	21400044 	addi	r5,r4,1
 401468c:	003d4406 	br	4013ba0 <__alt_data_end+0xfc013ba0>
 4014690:	d9402017 	ldw	r5,128(sp)
 4014694:	d9002117 	ldw	r4,132(sp)
 4014698:	d9801a04 	addi	r6,sp,104
 401469c:	d8c02a15 	stw	r3,168(sp)
 40146a0:	401357c0 	call	401357c <__sprint_r.part.0>
 40146a4:	d8c02a17 	ldw	r3,168(sp)
 40146a8:	103f311e 	bne	r2,zero,4014370 <__alt_data_end+0xfc014370>
 40146ac:	d9001b17 	ldw	r4,108(sp)
 40146b0:	d8801c17 	ldw	r2,112(sp)
 40146b4:	d811883a 	mov	r8,sp
 40146b8:	21400044 	addi	r5,r4,1
 40146bc:	003ef406 	br	4014290 <__alt_data_end+0xfc014290>
 40146c0:	1000bd1e 	bne	r2,zero,40149b8 <___vfiprintf_internal_r+0x1328>
 40146c4:	01400044 	movi	r5,1
 40146c8:	0009883a 	mov	r4,zero
 40146cc:	d811883a 	mov	r8,sp
 40146d0:	003ef106 	br	4014298 <__alt_data_end+0xfc014298>
 40146d4:	d9402017 	ldw	r5,128(sp)
 40146d8:	d9002117 	ldw	r4,132(sp)
 40146dc:	d9801a04 	addi	r6,sp,104
 40146e0:	401357c0 	call	401357c <__sprint_r.part.0>
 40146e4:	103f221e 	bne	r2,zero,4014370 <__alt_data_end+0xfc014370>
 40146e8:	d9401b17 	ldw	r5,108(sp)
 40146ec:	d8801c17 	ldw	r2,112(sp)
 40146f0:	d811883a 	mov	r8,sp
 40146f4:	29400044 	addi	r5,r5,1
 40146f8:	003d6206 	br	4013c84 <__alt_data_end+0xfc013c84>
 40146fc:	014100b4 	movhi	r5,1026
 4014700:	2973d304 	addi	r5,r5,-12468
 4014704:	d9402615 	stw	r5,152(sp)
 4014708:	d8c02215 	stw	r3,136(sp)
 401470c:	1023883a 	mov	r17,r2
 4014710:	9d04b03a 	or	r2,r19,r20
 4014714:	103fa51e 	bne	r2,zero,40145ac <__alt_data_end+0xfc0145ac>
 4014718:	002b883a 	mov	r21,zero
 401471c:	00800084 	movi	r2,2
 4014720:	003e4a06 	br	401404c <__alt_data_end+0xfc01404c>
 4014724:	014100b4 	movhi	r5,1026
 4014728:	2973d304 	addi	r5,r5,-12468
 401472c:	002b883a 	mov	r21,zero
 4014730:	d9402615 	stw	r5,152(sp)
 4014734:	003f9e06 	br	40145b0 <__alt_data_end+0xfc0145b0>
 4014738:	d9402217 	ldw	r5,136(sp)
 401473c:	d8001d85 	stb	zero,118(sp)
 4014740:	0029883a 	mov	r20,zero
 4014744:	28800104 	addi	r2,r5,4
 4014748:	2cc00017 	ldw	r19,0(r5)
 401474c:	803e3a16 	blt	r16,zero,4014038 <__alt_data_end+0xfc014038>
 4014750:	00ffdfc4 	movi	r3,-129
 4014754:	d8802215 	stw	r2,136(sp)
 4014758:	88e2703a 	and	r17,r17,r3
 401475c:	002b883a 	mov	r21,zero
 4014760:	983e9b26 	beq	r19,zero,40141d0 <__alt_data_end+0xfc0141d0>
 4014764:	00800244 	movi	r2,9
 4014768:	14fdc936 	bltu	r2,r19,4013e90 <__alt_data_end+0xfc013e90>
 401476c:	003e9a06 	br	40141d8 <__alt_data_end+0xfc0141d8>
 4014770:	00800c04 	movi	r2,48
 4014774:	d8c01d45 	stb	r3,117(sp)
 4014778:	d8801d05 	stb	r2,116(sp)
 401477c:	d8001d85 	stb	zero,118(sp)
 4014780:	88c00094 	ori	r3,r17,2
 4014784:	80009c16 	blt	r16,zero,40149f8 <___vfiprintf_internal_r+0x1368>
 4014788:	00bfdfc4 	movi	r2,-129
 401478c:	88a2703a 	and	r17,r17,r2
 4014790:	8c400094 	ori	r17,r17,2
 4014794:	002b883a 	mov	r21,zero
 4014798:	003f8506 	br	40145b0 <__alt_data_end+0xfc0145b0>
 401479c:	b029883a 	mov	r20,r22
 40147a0:	003c0b06 	br	40137d0 <__alt_data_end+0xfc0137d0>
 40147a4:	04e7c83a 	sub	r19,zero,r19
 40147a8:	05400b44 	movi	r21,45
 40147ac:	9804c03a 	cmpne	r2,r19,zero
 40147b0:	0529c83a 	sub	r20,zero,r20
 40147b4:	dd401d85 	stb	r21,118(sp)
 40147b8:	a0a9c83a 	sub	r20,r20,r2
 40147bc:	80009716 	blt	r16,zero,4014a1c <___vfiprintf_internal_r+0x138c>
 40147c0:	00bfdfc4 	movi	r2,-129
 40147c4:	88a2703a 	and	r17,r17,r2
 40147c8:	003db006 	br	4013e8c <__alt_data_end+0xfc013e8c>
 40147cc:	b0c00007 	ldb	r3,0(r22)
 40147d0:	003c0c06 	br	4013804 <__alt_data_end+0xfc013804>
 40147d4:	8880100c 	andi	r2,r17,64
 40147d8:	d8001d85 	stb	zero,118(sp)
 40147dc:	1000461e 	bne	r2,zero,40148f8 <___vfiprintf_internal_r+0x1268>
 40147e0:	d9002217 	ldw	r4,136(sp)
 40147e4:	0029883a 	mov	r20,zero
 40147e8:	20800104 	addi	r2,r4,4
 40147ec:	24c00017 	ldw	r19,0(r4)
 40147f0:	803df80e 	bge	r16,zero,4013fd4 <__alt_data_end+0xfc013fd4>
 40147f4:	9d06b03a 	or	r3,r19,r20
 40147f8:	d8802215 	stw	r2,136(sp)
 40147fc:	183d5e1e 	bne	r3,zero,4013d78 <__alt_data_end+0xfc013d78>
 4014800:	002b883a 	mov	r21,zero
 4014804:	0005883a 	mov	r2,zero
 4014808:	003e1006 	br	401404c <__alt_data_end+0xfc01404c>
 401480c:	8880040c 	andi	r2,r17,16
 4014810:	1000321e 	bne	r2,zero,40148dc <___vfiprintf_internal_r+0x124c>
 4014814:	8c40100c 	andi	r17,r17,64
 4014818:	88008d26 	beq	r17,zero,4014a50 <___vfiprintf_internal_r+0x13c0>
 401481c:	d9402217 	ldw	r5,136(sp)
 4014820:	d8c02417 	ldw	r3,144(sp)
 4014824:	28800017 	ldw	r2,0(r5)
 4014828:	29400104 	addi	r5,r5,4
 401482c:	d9402215 	stw	r5,136(sp)
 4014830:	10c0000d 	sth	r3,0(r2)
 4014834:	003bca06 	br	4013760 <__alt_data_end+0xfc013760>
 4014838:	8880100c 	andi	r2,r17,64
 401483c:	10003a26 	beq	r2,zero,4014928 <___vfiprintf_internal_r+0x1298>
 4014840:	d8802217 	ldw	r2,136(sp)
 4014844:	14c0000f 	ldh	r19,0(r2)
 4014848:	10800104 	addi	r2,r2,4
 401484c:	d8802215 	stw	r2,136(sp)
 4014850:	9829d7fa 	srai	r20,r19,31
 4014854:	a005883a 	mov	r2,r20
 4014858:	003d8506 	br	4013e70 <__alt_data_end+0xfc013e70>
 401485c:	8880100c 	andi	r2,r17,64
 4014860:	10002b26 	beq	r2,zero,4014910 <___vfiprintf_internal_r+0x1280>
 4014864:	d8802217 	ldw	r2,136(sp)
 4014868:	0029883a 	mov	r20,zero
 401486c:	14c0000b 	ldhu	r19,0(r2)
 4014870:	10800104 	addi	r2,r2,4
 4014874:	d8802215 	stw	r2,136(sp)
 4014878:	003d5d06 	br	4013df0 <__alt_data_end+0xfc013df0>
 401487c:	d9402017 	ldw	r5,128(sp)
 4014880:	d9002117 	ldw	r4,132(sp)
 4014884:	d9801a04 	addi	r6,sp,104
 4014888:	d8c02a15 	stw	r3,168(sp)
 401488c:	d9c02b15 	stw	r7,172(sp)
 4014890:	401357c0 	call	401357c <__sprint_r.part.0>
 4014894:	d8c02a17 	ldw	r3,168(sp)
 4014898:	d9c02b17 	ldw	r7,172(sp)
 401489c:	103eb41e 	bne	r2,zero,4014370 <__alt_data_end+0xfc014370>
 40148a0:	d9001b17 	ldw	r4,108(sp)
 40148a4:	d8801c17 	ldw	r2,112(sp)
 40148a8:	d811883a 	mov	r8,sp
 40148ac:	21400044 	addi	r5,r4,1
 40148b0:	003e6706 	br	4014250 <__alt_data_end+0xfc014250>
 40148b4:	00bfffc4 	movi	r2,-1
 40148b8:	003c4a06 	br	40139e4 <__alt_data_end+0xfc0139e4>
 40148bc:	9805883a 	mov	r2,r19
 40148c0:	003ee806 	br	4014464 <__alt_data_end+0xfc014464>
 40148c4:	d8c02217 	ldw	r3,136(sp)
 40148c8:	0029883a 	mov	r20,zero
 40148cc:	18800104 	addi	r2,r3,4
 40148d0:	1cc0000b 	ldhu	r19,0(r3)
 40148d4:	803f9e0e 	bge	r16,zero,4014750 <__alt_data_end+0xfc014750>
 40148d8:	003dd706 	br	4014038 <__alt_data_end+0xfc014038>
 40148dc:	d8c02217 	ldw	r3,136(sp)
 40148e0:	d9002417 	ldw	r4,144(sp)
 40148e4:	18800017 	ldw	r2,0(r3)
 40148e8:	18c00104 	addi	r3,r3,4
 40148ec:	d8c02215 	stw	r3,136(sp)
 40148f0:	11000015 	stw	r4,0(r2)
 40148f4:	003b9a06 	br	4013760 <__alt_data_end+0xfc013760>
 40148f8:	d8c02217 	ldw	r3,136(sp)
 40148fc:	0029883a 	mov	r20,zero
 4014900:	18800104 	addi	r2,r3,4
 4014904:	1cc0000b 	ldhu	r19,0(r3)
 4014908:	803db20e 	bge	r16,zero,4013fd4 <__alt_data_end+0xfc013fd4>
 401490c:	003fb906 	br	40147f4 <__alt_data_end+0xfc0147f4>
 4014910:	d9002217 	ldw	r4,136(sp)
 4014914:	0029883a 	mov	r20,zero
 4014918:	24c00017 	ldw	r19,0(r4)
 401491c:	21000104 	addi	r4,r4,4
 4014920:	d9002215 	stw	r4,136(sp)
 4014924:	003d3206 	br	4013df0 <__alt_data_end+0xfc013df0>
 4014928:	d8c02217 	ldw	r3,136(sp)
 401492c:	1cc00017 	ldw	r19,0(r3)
 4014930:	18c00104 	addi	r3,r3,4
 4014934:	d8c02215 	stw	r3,136(sp)
 4014938:	9829d7fa 	srai	r20,r19,31
 401493c:	a005883a 	mov	r2,r20
 4014940:	003d4b06 	br	4013e70 <__alt_data_end+0xfc013e70>
 4014944:	0009883a 	mov	r4,zero
 4014948:	01400044 	movi	r5,1
 401494c:	d811883a 	mov	r8,sp
 4014950:	003e4f06 	br	4014290 <__alt_data_end+0xfc014290>
 4014954:	d8c02215 	stw	r3,136(sp)
 4014958:	002b883a 	mov	r21,zero
 401495c:	003db806 	br	4014040 <__alt_data_end+0xfc014040>
 4014960:	d811883a 	mov	r8,sp
 4014964:	003e9606 	br	40143c0 <__alt_data_end+0xfc0143c0>
 4014968:	010100b4 	movhi	r4,1026
 401496c:	21343304 	addi	r4,r4,-12084
 4014970:	d9002315 	stw	r4,140(sp)
 4014974:	003e6306 	br	4014304 <__alt_data_end+0xfc014304>
 4014978:	b0c00043 	ldbu	r3,1(r22)
 401497c:	8c400814 	ori	r17,r17,32
 4014980:	b5800044 	addi	r22,r22,1
 4014984:	18c03fcc 	andi	r3,r3,255
 4014988:	18c0201c 	xori	r3,r3,128
 401498c:	18ffe004 	addi	r3,r3,-128
 4014990:	003b9c06 	br	4013804 <__alt_data_end+0xfc013804>
 4014994:	b809883a 	mov	r4,r23
 4014998:	da002a15 	stw	r8,168(sp)
 401499c:	400c83c0 	call	400c83c <strlen>
 40149a0:	1029883a 	mov	r20,r2
 40149a4:	dd401d83 	ldbu	r21,118(sp)
 40149a8:	df002215 	stw	fp,136(sp)
 40149ac:	0021883a 	mov	r16,zero
 40149b0:	da002a17 	ldw	r8,168(sp)
 40149b4:	003c3906 	br	4013a9c <__alt_data_end+0xfc013a9c>
 40149b8:	d9402017 	ldw	r5,128(sp)
 40149bc:	d9002117 	ldw	r4,132(sp)
 40149c0:	d9801a04 	addi	r6,sp,104
 40149c4:	401357c0 	call	401357c <__sprint_r.part.0>
 40149c8:	103e691e 	bne	r2,zero,4014370 <__alt_data_end+0xfc014370>
 40149cc:	d9001b17 	ldw	r4,108(sp)
 40149d0:	d8801c17 	ldw	r2,112(sp)
 40149d4:	d811883a 	mov	r8,sp
 40149d8:	21400044 	addi	r5,r4,1
 40149dc:	003e2e06 	br	4014298 <__alt_data_end+0xfc014298>
 40149e0:	010100b4 	movhi	r4,1026
 40149e4:	21343704 	addi	r4,r4,-12068
 40149e8:	d9002315 	stw	r4,140(sp)
 40149ec:	d9001b17 	ldw	r4,108(sp)
 40149f0:	21000044 	addi	r4,r4,1
 40149f4:	003c5e06 	br	4013b70 <__alt_data_end+0xfc013b70>
 40149f8:	002b883a 	mov	r21,zero
 40149fc:	00800084 	movi	r2,2
 4014a00:	10803fcc 	andi	r2,r2,255
 4014a04:	01000044 	movi	r4,1
 4014a08:	11002b26 	beq	r2,r4,4014ab8 <___vfiprintf_internal_r+0x1428>
 4014a0c:	01000084 	movi	r4,2
 4014a10:	11002b1e 	bne	r2,r4,4014ac0 <___vfiprintf_internal_r+0x1430>
 4014a14:	1823883a 	mov	r17,r3
 4014a18:	003ee506 	br	40145b0 <__alt_data_end+0xfc0145b0>
 4014a1c:	8807883a 	mov	r3,r17
 4014a20:	00800044 	movi	r2,1
 4014a24:	003ff606 	br	4014a00 <__alt_data_end+0xfc014a00>
 4014a28:	00800184 	movi	r2,6
 4014a2c:	1400012e 	bgeu	r2,r16,4014a34 <___vfiprintf_internal_r+0x13a4>
 4014a30:	1021883a 	mov	r16,r2
 4014a34:	8029883a 	mov	r20,r16
 4014a38:	8027883a 	mov	r19,r16
 4014a3c:	80002216 	blt	r16,zero,4014ac8 <___vfiprintf_internal_r+0x1438>
 4014a40:	05c100b4 	movhi	r23,1026
 4014a44:	df002215 	stw	fp,136(sp)
 4014a48:	bdf3d804 	addi	r23,r23,-12448
 4014a4c:	003cfb06 	br	4013e3c <__alt_data_end+0xfc013e3c>
 4014a50:	d9002217 	ldw	r4,136(sp)
 4014a54:	d9402417 	ldw	r5,144(sp)
 4014a58:	20800017 	ldw	r2,0(r4)
 4014a5c:	21000104 	addi	r4,r4,4
 4014a60:	d9002215 	stw	r4,136(sp)
 4014a64:	11400015 	stw	r5,0(r2)
 4014a68:	003b3d06 	br	4013760 <__alt_data_end+0xfc013760>
 4014a6c:	014100b4 	movhi	r5,1026
 4014a70:	29743704 	addi	r5,r5,-12068
 4014a74:	d9402315 	stw	r5,140(sp)
 4014a78:	d9401b17 	ldw	r5,108(sp)
 4014a7c:	29400044 	addi	r5,r5,1
 4014a80:	003e6d06 	br	4014438 <__alt_data_end+0xfc014438>
 4014a84:	8029883a 	mov	r20,r16
 4014a88:	dd401d83 	ldbu	r21,118(sp)
 4014a8c:	df002215 	stw	fp,136(sp)
 4014a90:	0021883a 	mov	r16,zero
 4014a94:	003c0106 	br	4013a9c <__alt_data_end+0xfc013a9c>
 4014a98:	00c100b4 	movhi	r3,1026
 4014a9c:	18f43304 	addi	r3,r3,-12084
 4014aa0:	d8c02315 	stw	r3,140(sp)
 4014aa4:	280d883a 	mov	r6,r5
 4014aa8:	003c6906 	br	4013c50 <__alt_data_end+0xfc013c50>
 4014aac:	802d883a 	mov	r22,r16
 4014ab0:	0021883a 	mov	r16,zero
 4014ab4:	003b5406 	br	4013808 <__alt_data_end+0xfc013808>
 4014ab8:	1823883a 	mov	r17,r3
 4014abc:	003cf306 	br	4013e8c <__alt_data_end+0xfc013e8c>
 4014ac0:	1823883a 	mov	r17,r3
 4014ac4:	003cad06 	br	4013d7c <__alt_data_end+0xfc013d7c>
 4014ac8:	0027883a 	mov	r19,zero
 4014acc:	003fdc06 	br	4014a40 <__alt_data_end+0xfc014a40>
 4014ad0:	d9402217 	ldw	r5,136(sp)
 4014ad4:	8005883a 	mov	r2,r16
 4014ad8:	b0c00043 	ldbu	r3,1(r22)
 4014adc:	2c000017 	ldw	r16,0(r5)
 4014ae0:	29000104 	addi	r4,r5,4
 4014ae4:	d9002215 	stw	r4,136(sp)
 4014ae8:	102d883a 	mov	r22,r2
 4014aec:	803fa50e 	bge	r16,zero,4014984 <__alt_data_end+0xfc014984>
 4014af0:	18c03fcc 	andi	r3,r3,255
 4014af4:	18c0201c 	xori	r3,r3,128
 4014af8:	043fffc4 	movi	r16,-1
 4014afc:	18ffe004 	addi	r3,r3,-128
 4014b00:	003b4006 	br	4013804 <__alt_data_end+0xfc013804>
 4014b04:	d9402303 	ldbu	r5,140(sp)
 4014b08:	d9401d85 	stb	r5,118(sp)
 4014b0c:	003cae06 	br	4013dc8 <__alt_data_end+0xfc013dc8>
 4014b10:	d8c02303 	ldbu	r3,140(sp)
 4014b14:	d8c01d85 	stb	r3,118(sp)
 4014b18:	003d1406 	br	4013f6c <__alt_data_end+0xfc013f6c>
 4014b1c:	d8c02303 	ldbu	r3,140(sp)
 4014b20:	d8c01d85 	stb	r3,118(sp)
 4014b24:	003cca06 	br	4013e50 <__alt_data_end+0xfc013e50>
 4014b28:	8880004c 	andi	r2,r17,1
 4014b2c:	002b883a 	mov	r21,zero
 4014b30:	10000526 	beq	r2,zero,4014b48 <___vfiprintf_internal_r+0x14b8>
 4014b34:	00800c04 	movi	r2,48
 4014b38:	d88019c5 	stb	r2,103(sp)
 4014b3c:	dd002817 	ldw	r20,160(sp)
 4014b40:	ddc019c4 	addi	r23,sp,103
 4014b44:	003bd506 	br	4013a9c <__alt_data_end+0xfc013a9c>
 4014b48:	0029883a 	mov	r20,zero
 4014b4c:	ddc01a04 	addi	r23,sp,104
 4014b50:	003bd206 	br	4013a9c <__alt_data_end+0xfc013a9c>
 4014b54:	d9002303 	ldbu	r4,140(sp)
 4014b58:	d9001d85 	stb	r4,118(sp)
 4014b5c:	003da606 	br	40141f8 <__alt_data_end+0xfc0141f8>
 4014b60:	d8c02303 	ldbu	r3,140(sp)
 4014b64:	d8c01d85 	stb	r3,118(sp)
 4014b68:	003c7606 	br	4013d44 <__alt_data_end+0xfc013d44>
 4014b6c:	d8c02303 	ldbu	r3,140(sp)
 4014b70:	d8c01d85 	stb	r3,118(sp)
 4014b74:	003c6506 	br	4013d0c <__alt_data_end+0xfc013d0c>
 4014b78:	d9002303 	ldbu	r4,140(sp)
 4014b7c:	d9001d85 	stb	r4,118(sp)
 4014b80:	003d3d06 	br	4014078 <__alt_data_end+0xfc014078>
 4014b84:	d8c02303 	ldbu	r3,140(sp)
 4014b88:	d8c01d85 	stb	r3,118(sp)
 4014b8c:	003d1d06 	br	4014004 <__alt_data_end+0xfc014004>
 4014b90:	d8c02303 	ldbu	r3,140(sp)
 4014b94:	d8c01d85 	stb	r3,118(sp)
 4014b98:	003d0306 	br	4013fa8 <__alt_data_end+0xfc013fa8>

04014b9c <__vfiprintf_internal>:
 4014b9c:	008100f4 	movhi	r2,1027
 4014ba0:	10a71904 	addi	r2,r2,-25500
 4014ba4:	300f883a 	mov	r7,r6
 4014ba8:	280d883a 	mov	r6,r5
 4014bac:	200b883a 	mov	r5,r4
 4014bb0:	11000017 	ldw	r4,0(r2)
 4014bb4:	40136901 	jmpi	4013690 <___vfiprintf_internal_r>

04014bb8 <__sbprintf>:
 4014bb8:	2880030b 	ldhu	r2,12(r5)
 4014bbc:	2ac01917 	ldw	r11,100(r5)
 4014bc0:	2a80038b 	ldhu	r10,14(r5)
 4014bc4:	2a400717 	ldw	r9,28(r5)
 4014bc8:	2a000917 	ldw	r8,36(r5)
 4014bcc:	defee204 	addi	sp,sp,-1144
 4014bd0:	00c10004 	movi	r3,1024
 4014bd4:	dc011a15 	stw	r16,1128(sp)
 4014bd8:	10bfff4c 	andi	r2,r2,65533
 4014bdc:	2821883a 	mov	r16,r5
 4014be0:	d8cb883a 	add	r5,sp,r3
 4014be4:	dc811c15 	stw	r18,1136(sp)
 4014be8:	dc411b15 	stw	r17,1132(sp)
 4014bec:	dfc11d15 	stw	ra,1140(sp)
 4014bf0:	2025883a 	mov	r18,r4
 4014bf4:	d881030d 	sth	r2,1036(sp)
 4014bf8:	dac11915 	stw	r11,1124(sp)
 4014bfc:	da81038d 	sth	r10,1038(sp)
 4014c00:	da410715 	stw	r9,1052(sp)
 4014c04:	da010915 	stw	r8,1060(sp)
 4014c08:	dec10015 	stw	sp,1024(sp)
 4014c0c:	dec10415 	stw	sp,1040(sp)
 4014c10:	d8c10215 	stw	r3,1032(sp)
 4014c14:	d8c10515 	stw	r3,1044(sp)
 4014c18:	d8010615 	stw	zero,1048(sp)
 4014c1c:	40136900 	call	4013690 <___vfiprintf_internal_r>
 4014c20:	1023883a 	mov	r17,r2
 4014c24:	10000416 	blt	r2,zero,4014c38 <__sbprintf+0x80>
 4014c28:	d9410004 	addi	r5,sp,1024
 4014c2c:	9009883a 	mov	r4,r18
 4014c30:	40108b00 	call	40108b0 <_fflush_r>
 4014c34:	10000d1e 	bne	r2,zero,4014c6c <__sbprintf+0xb4>
 4014c38:	d881030b 	ldhu	r2,1036(sp)
 4014c3c:	1080100c 	andi	r2,r2,64
 4014c40:	10000326 	beq	r2,zero,4014c50 <__sbprintf+0x98>
 4014c44:	8080030b 	ldhu	r2,12(r16)
 4014c48:	10801014 	ori	r2,r2,64
 4014c4c:	8080030d 	sth	r2,12(r16)
 4014c50:	8805883a 	mov	r2,r17
 4014c54:	dfc11d17 	ldw	ra,1140(sp)
 4014c58:	dc811c17 	ldw	r18,1136(sp)
 4014c5c:	dc411b17 	ldw	r17,1132(sp)
 4014c60:	dc011a17 	ldw	r16,1128(sp)
 4014c64:	dec11e04 	addi	sp,sp,1144
 4014c68:	f800283a 	ret
 4014c6c:	047fffc4 	movi	r17,-1
 4014c70:	003ff106 	br	4014c38 <__alt_data_end+0xfc014c38>

04014c74 <__swbuf_r>:
 4014c74:	defffb04 	addi	sp,sp,-20
 4014c78:	dcc00315 	stw	r19,12(sp)
 4014c7c:	dc800215 	stw	r18,8(sp)
 4014c80:	dc000015 	stw	r16,0(sp)
 4014c84:	dfc00415 	stw	ra,16(sp)
 4014c88:	dc400115 	stw	r17,4(sp)
 4014c8c:	2025883a 	mov	r18,r4
 4014c90:	2827883a 	mov	r19,r5
 4014c94:	3021883a 	mov	r16,r6
 4014c98:	20000226 	beq	r4,zero,4014ca4 <__swbuf_r+0x30>
 4014c9c:	20800e17 	ldw	r2,56(r4)
 4014ca0:	10004226 	beq	r2,zero,4014dac <__swbuf_r+0x138>
 4014ca4:	80800617 	ldw	r2,24(r16)
 4014ca8:	8100030b 	ldhu	r4,12(r16)
 4014cac:	80800215 	stw	r2,8(r16)
 4014cb0:	2080020c 	andi	r2,r4,8
 4014cb4:	10003626 	beq	r2,zero,4014d90 <__swbuf_r+0x11c>
 4014cb8:	80c00417 	ldw	r3,16(r16)
 4014cbc:	18003426 	beq	r3,zero,4014d90 <__swbuf_r+0x11c>
 4014cc0:	2088000c 	andi	r2,r4,8192
 4014cc4:	9c403fcc 	andi	r17,r19,255
 4014cc8:	10001a26 	beq	r2,zero,4014d34 <__swbuf_r+0xc0>
 4014ccc:	80800017 	ldw	r2,0(r16)
 4014cd0:	81000517 	ldw	r4,20(r16)
 4014cd4:	10c7c83a 	sub	r3,r2,r3
 4014cd8:	1900200e 	bge	r3,r4,4014d5c <__swbuf_r+0xe8>
 4014cdc:	18c00044 	addi	r3,r3,1
 4014ce0:	81000217 	ldw	r4,8(r16)
 4014ce4:	11400044 	addi	r5,r2,1
 4014ce8:	81400015 	stw	r5,0(r16)
 4014cec:	213fffc4 	addi	r4,r4,-1
 4014cf0:	81000215 	stw	r4,8(r16)
 4014cf4:	14c00005 	stb	r19,0(r2)
 4014cf8:	80800517 	ldw	r2,20(r16)
 4014cfc:	10c01e26 	beq	r2,r3,4014d78 <__swbuf_r+0x104>
 4014d00:	8080030b 	ldhu	r2,12(r16)
 4014d04:	1080004c 	andi	r2,r2,1
 4014d08:	10000226 	beq	r2,zero,4014d14 <__swbuf_r+0xa0>
 4014d0c:	00800284 	movi	r2,10
 4014d10:	88801926 	beq	r17,r2,4014d78 <__swbuf_r+0x104>
 4014d14:	8805883a 	mov	r2,r17
 4014d18:	dfc00417 	ldw	ra,16(sp)
 4014d1c:	dcc00317 	ldw	r19,12(sp)
 4014d20:	dc800217 	ldw	r18,8(sp)
 4014d24:	dc400117 	ldw	r17,4(sp)
 4014d28:	dc000017 	ldw	r16,0(sp)
 4014d2c:	dec00504 	addi	sp,sp,20
 4014d30:	f800283a 	ret
 4014d34:	81401917 	ldw	r5,100(r16)
 4014d38:	00b7ffc4 	movi	r2,-8193
 4014d3c:	21080014 	ori	r4,r4,8192
 4014d40:	2884703a 	and	r2,r5,r2
 4014d44:	80801915 	stw	r2,100(r16)
 4014d48:	80800017 	ldw	r2,0(r16)
 4014d4c:	8100030d 	sth	r4,12(r16)
 4014d50:	81000517 	ldw	r4,20(r16)
 4014d54:	10c7c83a 	sub	r3,r2,r3
 4014d58:	193fe016 	blt	r3,r4,4014cdc <__alt_data_end+0xfc014cdc>
 4014d5c:	800b883a 	mov	r5,r16
 4014d60:	9009883a 	mov	r4,r18
 4014d64:	40108b00 	call	40108b0 <_fflush_r>
 4014d68:	1000071e 	bne	r2,zero,4014d88 <__swbuf_r+0x114>
 4014d6c:	80800017 	ldw	r2,0(r16)
 4014d70:	00c00044 	movi	r3,1
 4014d74:	003fda06 	br	4014ce0 <__alt_data_end+0xfc014ce0>
 4014d78:	800b883a 	mov	r5,r16
 4014d7c:	9009883a 	mov	r4,r18
 4014d80:	40108b00 	call	40108b0 <_fflush_r>
 4014d84:	103fe326 	beq	r2,zero,4014d14 <__alt_data_end+0xfc014d14>
 4014d88:	00bfffc4 	movi	r2,-1
 4014d8c:	003fe206 	br	4014d18 <__alt_data_end+0xfc014d18>
 4014d90:	800b883a 	mov	r5,r16
 4014d94:	9009883a 	mov	r4,r18
 4014d98:	400ec900 	call	400ec90 <__swsetup_r>
 4014d9c:	103ffa1e 	bne	r2,zero,4014d88 <__alt_data_end+0xfc014d88>
 4014da0:	8100030b 	ldhu	r4,12(r16)
 4014da4:	80c00417 	ldw	r3,16(r16)
 4014da8:	003fc506 	br	4014cc0 <__alt_data_end+0xfc014cc0>
 4014dac:	4010c9c0 	call	4010c9c <__sinit>
 4014db0:	003fbc06 	br	4014ca4 <__alt_data_end+0xfc014ca4>

04014db4 <__swbuf>:
 4014db4:	008100f4 	movhi	r2,1027
 4014db8:	10a71904 	addi	r2,r2,-25500
 4014dbc:	280d883a 	mov	r6,r5
 4014dc0:	200b883a 	mov	r5,r4
 4014dc4:	11000017 	ldw	r4,0(r2)
 4014dc8:	4014c741 	jmpi	4014c74 <__swbuf_r>

04014dcc <_write_r>:
 4014dcc:	defffd04 	addi	sp,sp,-12
 4014dd0:	2805883a 	mov	r2,r5
 4014dd4:	dc000015 	stw	r16,0(sp)
 4014dd8:	040100f4 	movhi	r16,1027
 4014ddc:	dc400115 	stw	r17,4(sp)
 4014de0:	300b883a 	mov	r5,r6
 4014de4:	8419e204 	addi	r16,r16,26504
 4014de8:	2023883a 	mov	r17,r4
 4014dec:	380d883a 	mov	r6,r7
 4014df0:	1009883a 	mov	r4,r2
 4014df4:	dfc00215 	stw	ra,8(sp)
 4014df8:	80000015 	stw	zero,0(r16)
 4014dfc:	401955c0 	call	401955c <write>
 4014e00:	00ffffc4 	movi	r3,-1
 4014e04:	10c00526 	beq	r2,r3,4014e1c <_write_r+0x50>
 4014e08:	dfc00217 	ldw	ra,8(sp)
 4014e0c:	dc400117 	ldw	r17,4(sp)
 4014e10:	dc000017 	ldw	r16,0(sp)
 4014e14:	dec00304 	addi	sp,sp,12
 4014e18:	f800283a 	ret
 4014e1c:	80c00017 	ldw	r3,0(r16)
 4014e20:	183ff926 	beq	r3,zero,4014e08 <__alt_data_end+0xfc014e08>
 4014e24:	88c00015 	stw	r3,0(r17)
 4014e28:	003ff706 	br	4014e08 <__alt_data_end+0xfc014e08>

04014e2c <_close_r>:
 4014e2c:	defffd04 	addi	sp,sp,-12
 4014e30:	dc000015 	stw	r16,0(sp)
 4014e34:	040100f4 	movhi	r16,1027
 4014e38:	dc400115 	stw	r17,4(sp)
 4014e3c:	8419e204 	addi	r16,r16,26504
 4014e40:	2023883a 	mov	r17,r4
 4014e44:	2809883a 	mov	r4,r5
 4014e48:	dfc00215 	stw	ra,8(sp)
 4014e4c:	80000015 	stw	zero,0(r16)
 4014e50:	4018a600 	call	4018a60 <close>
 4014e54:	00ffffc4 	movi	r3,-1
 4014e58:	10c00526 	beq	r2,r3,4014e70 <_close_r+0x44>
 4014e5c:	dfc00217 	ldw	ra,8(sp)
 4014e60:	dc400117 	ldw	r17,4(sp)
 4014e64:	dc000017 	ldw	r16,0(sp)
 4014e68:	dec00304 	addi	sp,sp,12
 4014e6c:	f800283a 	ret
 4014e70:	80c00017 	ldw	r3,0(r16)
 4014e74:	183ff926 	beq	r3,zero,4014e5c <__alt_data_end+0xfc014e5c>
 4014e78:	88c00015 	stw	r3,0(r17)
 4014e7c:	003ff706 	br	4014e5c <__alt_data_end+0xfc014e5c>

04014e80 <_calloc_r>:
 4014e80:	defffe04 	addi	sp,sp,-8
 4014e84:	2805883a 	mov	r2,r5
 4014e88:	dc000015 	stw	r16,0(sp)
 4014e8c:	300b883a 	mov	r5,r6
 4014e90:	2021883a 	mov	r16,r4
 4014e94:	1009883a 	mov	r4,r2
 4014e98:	dfc00115 	stw	ra,4(sp)
 4014e9c:	400b1dc0 	call	400b1dc <__mulsi3>
 4014ea0:	100b883a 	mov	r5,r2
 4014ea4:	8009883a 	mov	r4,r16
 4014ea8:	400b7b00 	call	400b7b0 <_malloc_r>
 4014eac:	10002926 	beq	r2,zero,4014f54 <_calloc_r+0xd4>
 4014eb0:	11bfff17 	ldw	r6,-4(r2)
 4014eb4:	1021883a 	mov	r16,r2
 4014eb8:	00bfff04 	movi	r2,-4
 4014ebc:	308c703a 	and	r6,r6,r2
 4014ec0:	00c00904 	movi	r3,36
 4014ec4:	308d883a 	add	r6,r6,r2
 4014ec8:	19801636 	bltu	r3,r6,4014f24 <_calloc_r+0xa4>
 4014ecc:	008004c4 	movi	r2,19
 4014ed0:	11800b2e 	bgeu	r2,r6,4014f00 <_calloc_r+0x80>
 4014ed4:	80000015 	stw	zero,0(r16)
 4014ed8:	80000115 	stw	zero,4(r16)
 4014edc:	008006c4 	movi	r2,27
 4014ee0:	11801a2e 	bgeu	r2,r6,4014f4c <_calloc_r+0xcc>
 4014ee4:	80000215 	stw	zero,8(r16)
 4014ee8:	80000315 	stw	zero,12(r16)
 4014eec:	30c0151e 	bne	r6,r3,4014f44 <_calloc_r+0xc4>
 4014ef0:	80000415 	stw	zero,16(r16)
 4014ef4:	80800604 	addi	r2,r16,24
 4014ef8:	80000515 	stw	zero,20(r16)
 4014efc:	00000106 	br	4014f04 <_calloc_r+0x84>
 4014f00:	8005883a 	mov	r2,r16
 4014f04:	10000015 	stw	zero,0(r2)
 4014f08:	10000115 	stw	zero,4(r2)
 4014f0c:	10000215 	stw	zero,8(r2)
 4014f10:	8005883a 	mov	r2,r16
 4014f14:	dfc00117 	ldw	ra,4(sp)
 4014f18:	dc000017 	ldw	r16,0(sp)
 4014f1c:	dec00204 	addi	sp,sp,8
 4014f20:	f800283a 	ret
 4014f24:	000b883a 	mov	r5,zero
 4014f28:	8009883a 	mov	r4,r16
 4014f2c:	400c1800 	call	400c180 <memset>
 4014f30:	8005883a 	mov	r2,r16
 4014f34:	dfc00117 	ldw	ra,4(sp)
 4014f38:	dc000017 	ldw	r16,0(sp)
 4014f3c:	dec00204 	addi	sp,sp,8
 4014f40:	f800283a 	ret
 4014f44:	80800404 	addi	r2,r16,16
 4014f48:	003fee06 	br	4014f04 <__alt_data_end+0xfc014f04>
 4014f4c:	80800204 	addi	r2,r16,8
 4014f50:	003fec06 	br	4014f04 <__alt_data_end+0xfc014f04>
 4014f54:	0005883a 	mov	r2,zero
 4014f58:	003fee06 	br	4014f14 <__alt_data_end+0xfc014f14>

04014f5c <_fclose_r>:
 4014f5c:	28003926 	beq	r5,zero,4015044 <_fclose_r+0xe8>
 4014f60:	defffc04 	addi	sp,sp,-16
 4014f64:	dc400115 	stw	r17,4(sp)
 4014f68:	dc000015 	stw	r16,0(sp)
 4014f6c:	dfc00315 	stw	ra,12(sp)
 4014f70:	dc800215 	stw	r18,8(sp)
 4014f74:	2023883a 	mov	r17,r4
 4014f78:	2821883a 	mov	r16,r5
 4014f7c:	20000226 	beq	r4,zero,4014f88 <_fclose_r+0x2c>
 4014f80:	20800e17 	ldw	r2,56(r4)
 4014f84:	10002726 	beq	r2,zero,4015024 <_fclose_r+0xc8>
 4014f88:	8080030f 	ldh	r2,12(r16)
 4014f8c:	1000071e 	bne	r2,zero,4014fac <_fclose_r+0x50>
 4014f90:	0005883a 	mov	r2,zero
 4014f94:	dfc00317 	ldw	ra,12(sp)
 4014f98:	dc800217 	ldw	r18,8(sp)
 4014f9c:	dc400117 	ldw	r17,4(sp)
 4014fa0:	dc000017 	ldw	r16,0(sp)
 4014fa4:	dec00404 	addi	sp,sp,16
 4014fa8:	f800283a 	ret
 4014fac:	800b883a 	mov	r5,r16
 4014fb0:	8809883a 	mov	r4,r17
 4014fb4:	40106940 	call	4010694 <__sflush_r>
 4014fb8:	1025883a 	mov	r18,r2
 4014fbc:	80800b17 	ldw	r2,44(r16)
 4014fc0:	10000426 	beq	r2,zero,4014fd4 <_fclose_r+0x78>
 4014fc4:	81400717 	ldw	r5,28(r16)
 4014fc8:	8809883a 	mov	r4,r17
 4014fcc:	103ee83a 	callr	r2
 4014fd0:	10001616 	blt	r2,zero,401502c <_fclose_r+0xd0>
 4014fd4:	8080030b 	ldhu	r2,12(r16)
 4014fd8:	1080200c 	andi	r2,r2,128
 4014fdc:	1000151e 	bne	r2,zero,4015034 <_fclose_r+0xd8>
 4014fe0:	81400c17 	ldw	r5,48(r16)
 4014fe4:	28000526 	beq	r5,zero,4014ffc <_fclose_r+0xa0>
 4014fe8:	80801004 	addi	r2,r16,64
 4014fec:	28800226 	beq	r5,r2,4014ff8 <_fclose_r+0x9c>
 4014ff0:	8809883a 	mov	r4,r17
 4014ff4:	4010e100 	call	4010e10 <_free_r>
 4014ff8:	80000c15 	stw	zero,48(r16)
 4014ffc:	81401117 	ldw	r5,68(r16)
 4015000:	28000326 	beq	r5,zero,4015010 <_fclose_r+0xb4>
 4015004:	8809883a 	mov	r4,r17
 4015008:	4010e100 	call	4010e10 <_free_r>
 401500c:	80001115 	stw	zero,68(r16)
 4015010:	4010cac0 	call	4010cac <__sfp_lock_acquire>
 4015014:	8000030d 	sth	zero,12(r16)
 4015018:	4010cb00 	call	4010cb0 <__sfp_lock_release>
 401501c:	9005883a 	mov	r2,r18
 4015020:	003fdc06 	br	4014f94 <__alt_data_end+0xfc014f94>
 4015024:	4010c9c0 	call	4010c9c <__sinit>
 4015028:	003fd706 	br	4014f88 <__alt_data_end+0xfc014f88>
 401502c:	04bfffc4 	movi	r18,-1
 4015030:	003fe806 	br	4014fd4 <__alt_data_end+0xfc014fd4>
 4015034:	81400417 	ldw	r5,16(r16)
 4015038:	8809883a 	mov	r4,r17
 401503c:	4010e100 	call	4010e10 <_free_r>
 4015040:	003fe706 	br	4014fe0 <__alt_data_end+0xfc014fe0>
 4015044:	0005883a 	mov	r2,zero
 4015048:	f800283a 	ret

0401504c <fclose>:
 401504c:	008100f4 	movhi	r2,1027
 4015050:	10a71904 	addi	r2,r2,-25500
 4015054:	200b883a 	mov	r5,r4
 4015058:	11000017 	ldw	r4,0(r2)
 401505c:	4014f5c1 	jmpi	4014f5c <_fclose_r>

04015060 <__fputwc>:
 4015060:	defff804 	addi	sp,sp,-32
 4015064:	dcc00415 	stw	r19,16(sp)
 4015068:	dc800315 	stw	r18,12(sp)
 401506c:	dc000115 	stw	r16,4(sp)
 4015070:	dfc00715 	stw	ra,28(sp)
 4015074:	dd400615 	stw	r21,24(sp)
 4015078:	dd000515 	stw	r20,20(sp)
 401507c:	dc400215 	stw	r17,8(sp)
 4015080:	2027883a 	mov	r19,r4
 4015084:	2825883a 	mov	r18,r5
 4015088:	3021883a 	mov	r16,r6
 401508c:	40117f80 	call	40117f8 <__locale_mb_cur_max>
 4015090:	00c00044 	movi	r3,1
 4015094:	10c03e26 	beq	r2,r3,4015190 <__fputwc+0x130>
 4015098:	81c01704 	addi	r7,r16,92
 401509c:	900d883a 	mov	r6,r18
 40150a0:	d80b883a 	mov	r5,sp
 40150a4:	9809883a 	mov	r4,r19
 40150a8:	40153d80 	call	40153d8 <_wcrtomb_r>
 40150ac:	1029883a 	mov	r20,r2
 40150b0:	00bfffc4 	movi	r2,-1
 40150b4:	a0802026 	beq	r20,r2,4015138 <__fputwc+0xd8>
 40150b8:	d9400003 	ldbu	r5,0(sp)
 40150bc:	a0001c26 	beq	r20,zero,4015130 <__fputwc+0xd0>
 40150c0:	0023883a 	mov	r17,zero
 40150c4:	05400284 	movi	r21,10
 40150c8:	00000906 	br	40150f0 <__fputwc+0x90>
 40150cc:	80800017 	ldw	r2,0(r16)
 40150d0:	11400005 	stb	r5,0(r2)
 40150d4:	80c00017 	ldw	r3,0(r16)
 40150d8:	18c00044 	addi	r3,r3,1
 40150dc:	80c00015 	stw	r3,0(r16)
 40150e0:	8c400044 	addi	r17,r17,1
 40150e4:	dc45883a 	add	r2,sp,r17
 40150e8:	8d00112e 	bgeu	r17,r20,4015130 <__fputwc+0xd0>
 40150ec:	11400003 	ldbu	r5,0(r2)
 40150f0:	80c00217 	ldw	r3,8(r16)
 40150f4:	18ffffc4 	addi	r3,r3,-1
 40150f8:	80c00215 	stw	r3,8(r16)
 40150fc:	183ff30e 	bge	r3,zero,40150cc <__alt_data_end+0xfc0150cc>
 4015100:	80800617 	ldw	r2,24(r16)
 4015104:	18801916 	blt	r3,r2,401516c <__fputwc+0x10c>
 4015108:	80800017 	ldw	r2,0(r16)
 401510c:	11400005 	stb	r5,0(r2)
 4015110:	80800017 	ldw	r2,0(r16)
 4015114:	10c00003 	ldbu	r3,0(r2)
 4015118:	10800044 	addi	r2,r2,1
 401511c:	1d402326 	beq	r3,r21,40151ac <__fputwc+0x14c>
 4015120:	80800015 	stw	r2,0(r16)
 4015124:	8c400044 	addi	r17,r17,1
 4015128:	dc45883a 	add	r2,sp,r17
 401512c:	8d3fef36 	bltu	r17,r20,40150ec <__alt_data_end+0xfc0150ec>
 4015130:	9005883a 	mov	r2,r18
 4015134:	00000406 	br	4015148 <__fputwc+0xe8>
 4015138:	80c0030b 	ldhu	r3,12(r16)
 401513c:	a005883a 	mov	r2,r20
 4015140:	18c01014 	ori	r3,r3,64
 4015144:	80c0030d 	sth	r3,12(r16)
 4015148:	dfc00717 	ldw	ra,28(sp)
 401514c:	dd400617 	ldw	r21,24(sp)
 4015150:	dd000517 	ldw	r20,20(sp)
 4015154:	dcc00417 	ldw	r19,16(sp)
 4015158:	dc800317 	ldw	r18,12(sp)
 401515c:	dc400217 	ldw	r17,8(sp)
 4015160:	dc000117 	ldw	r16,4(sp)
 4015164:	dec00804 	addi	sp,sp,32
 4015168:	f800283a 	ret
 401516c:	800d883a 	mov	r6,r16
 4015170:	29403fcc 	andi	r5,r5,255
 4015174:	9809883a 	mov	r4,r19
 4015178:	4014c740 	call	4014c74 <__swbuf_r>
 401517c:	10bfffe0 	cmpeqi	r2,r2,-1
 4015180:	10803fcc 	andi	r2,r2,255
 4015184:	103fd626 	beq	r2,zero,40150e0 <__alt_data_end+0xfc0150e0>
 4015188:	00bfffc4 	movi	r2,-1
 401518c:	003fee06 	br	4015148 <__alt_data_end+0xfc015148>
 4015190:	90ffffc4 	addi	r3,r18,-1
 4015194:	01003f84 	movi	r4,254
 4015198:	20ffbf36 	bltu	r4,r3,4015098 <__alt_data_end+0xfc015098>
 401519c:	900b883a 	mov	r5,r18
 40151a0:	dc800005 	stb	r18,0(sp)
 40151a4:	1029883a 	mov	r20,r2
 40151a8:	003fc506 	br	40150c0 <__alt_data_end+0xfc0150c0>
 40151ac:	800d883a 	mov	r6,r16
 40151b0:	a80b883a 	mov	r5,r21
 40151b4:	9809883a 	mov	r4,r19
 40151b8:	4014c740 	call	4014c74 <__swbuf_r>
 40151bc:	10bfffe0 	cmpeqi	r2,r2,-1
 40151c0:	003fef06 	br	4015180 <__alt_data_end+0xfc015180>

040151c4 <_fputwc_r>:
 40151c4:	3080030b 	ldhu	r2,12(r6)
 40151c8:	10c8000c 	andi	r3,r2,8192
 40151cc:	1800051e 	bne	r3,zero,40151e4 <_fputwc_r+0x20>
 40151d0:	30c01917 	ldw	r3,100(r6)
 40151d4:	10880014 	ori	r2,r2,8192
 40151d8:	3080030d 	sth	r2,12(r6)
 40151dc:	18880014 	ori	r2,r3,8192
 40151e0:	30801915 	stw	r2,100(r6)
 40151e4:	40150601 	jmpi	4015060 <__fputwc>

040151e8 <fputwc>:
 40151e8:	008100f4 	movhi	r2,1027
 40151ec:	defffc04 	addi	sp,sp,-16
 40151f0:	10a71904 	addi	r2,r2,-25500
 40151f4:	dc000115 	stw	r16,4(sp)
 40151f8:	14000017 	ldw	r16,0(r2)
 40151fc:	dc400215 	stw	r17,8(sp)
 4015200:	dfc00315 	stw	ra,12(sp)
 4015204:	2023883a 	mov	r17,r4
 4015208:	80000226 	beq	r16,zero,4015214 <fputwc+0x2c>
 401520c:	80800e17 	ldw	r2,56(r16)
 4015210:	10001026 	beq	r2,zero,4015254 <fputwc+0x6c>
 4015214:	2880030b 	ldhu	r2,12(r5)
 4015218:	10c8000c 	andi	r3,r2,8192
 401521c:	1800051e 	bne	r3,zero,4015234 <fputwc+0x4c>
 4015220:	28c01917 	ldw	r3,100(r5)
 4015224:	10880014 	ori	r2,r2,8192
 4015228:	2880030d 	sth	r2,12(r5)
 401522c:	18880014 	ori	r2,r3,8192
 4015230:	28801915 	stw	r2,100(r5)
 4015234:	280d883a 	mov	r6,r5
 4015238:	8009883a 	mov	r4,r16
 401523c:	880b883a 	mov	r5,r17
 4015240:	dfc00317 	ldw	ra,12(sp)
 4015244:	dc400217 	ldw	r17,8(sp)
 4015248:	dc000117 	ldw	r16,4(sp)
 401524c:	dec00404 	addi	sp,sp,16
 4015250:	40150601 	jmpi	4015060 <__fputwc>
 4015254:	8009883a 	mov	r4,r16
 4015258:	d9400015 	stw	r5,0(sp)
 401525c:	4010c9c0 	call	4010c9c <__sinit>
 4015260:	d9400017 	ldw	r5,0(sp)
 4015264:	003feb06 	br	4015214 <__alt_data_end+0xfc015214>

04015268 <_fstat_r>:
 4015268:	defffd04 	addi	sp,sp,-12
 401526c:	2805883a 	mov	r2,r5
 4015270:	dc000015 	stw	r16,0(sp)
 4015274:	040100f4 	movhi	r16,1027
 4015278:	dc400115 	stw	r17,4(sp)
 401527c:	8419e204 	addi	r16,r16,26504
 4015280:	2023883a 	mov	r17,r4
 4015284:	300b883a 	mov	r5,r6
 4015288:	1009883a 	mov	r4,r2
 401528c:	dfc00215 	stw	ra,8(sp)
 4015290:	80000015 	stw	zero,0(r16)
 4015294:	4018bd40 	call	4018bd4 <fstat>
 4015298:	00ffffc4 	movi	r3,-1
 401529c:	10c00526 	beq	r2,r3,40152b4 <_fstat_r+0x4c>
 40152a0:	dfc00217 	ldw	ra,8(sp)
 40152a4:	dc400117 	ldw	r17,4(sp)
 40152a8:	dc000017 	ldw	r16,0(sp)
 40152ac:	dec00304 	addi	sp,sp,12
 40152b0:	f800283a 	ret
 40152b4:	80c00017 	ldw	r3,0(r16)
 40152b8:	183ff926 	beq	r3,zero,40152a0 <__alt_data_end+0xfc0152a0>
 40152bc:	88c00015 	stw	r3,0(r17)
 40152c0:	003ff706 	br	40152a0 <__alt_data_end+0xfc0152a0>

040152c4 <_isatty_r>:
 40152c4:	defffd04 	addi	sp,sp,-12
 40152c8:	dc000015 	stw	r16,0(sp)
 40152cc:	040100f4 	movhi	r16,1027
 40152d0:	dc400115 	stw	r17,4(sp)
 40152d4:	8419e204 	addi	r16,r16,26504
 40152d8:	2023883a 	mov	r17,r4
 40152dc:	2809883a 	mov	r4,r5
 40152e0:	dfc00215 	stw	ra,8(sp)
 40152e4:	80000015 	stw	zero,0(r16)
 40152e8:	4018ce80 	call	4018ce8 <isatty>
 40152ec:	00ffffc4 	movi	r3,-1
 40152f0:	10c00526 	beq	r2,r3,4015308 <_isatty_r+0x44>
 40152f4:	dfc00217 	ldw	ra,8(sp)
 40152f8:	dc400117 	ldw	r17,4(sp)
 40152fc:	dc000017 	ldw	r16,0(sp)
 4015300:	dec00304 	addi	sp,sp,12
 4015304:	f800283a 	ret
 4015308:	80c00017 	ldw	r3,0(r16)
 401530c:	183ff926 	beq	r3,zero,40152f4 <__alt_data_end+0xfc0152f4>
 4015310:	88c00015 	stw	r3,0(r17)
 4015314:	003ff706 	br	40152f4 <__alt_data_end+0xfc0152f4>

04015318 <_lseek_r>:
 4015318:	defffd04 	addi	sp,sp,-12
 401531c:	2805883a 	mov	r2,r5
 4015320:	dc000015 	stw	r16,0(sp)
 4015324:	040100f4 	movhi	r16,1027
 4015328:	dc400115 	stw	r17,4(sp)
 401532c:	300b883a 	mov	r5,r6
 4015330:	8419e204 	addi	r16,r16,26504
 4015334:	2023883a 	mov	r17,r4
 4015338:	380d883a 	mov	r6,r7
 401533c:	1009883a 	mov	r4,r2
 4015340:	dfc00215 	stw	ra,8(sp)
 4015344:	80000015 	stw	zero,0(r16)
 4015348:	40190280 	call	4019028 <lseek>
 401534c:	00ffffc4 	movi	r3,-1
 4015350:	10c00526 	beq	r2,r3,4015368 <_lseek_r+0x50>
 4015354:	dfc00217 	ldw	ra,8(sp)
 4015358:	dc400117 	ldw	r17,4(sp)
 401535c:	dc000017 	ldw	r16,0(sp)
 4015360:	dec00304 	addi	sp,sp,12
 4015364:	f800283a 	ret
 4015368:	80c00017 	ldw	r3,0(r16)
 401536c:	183ff926 	beq	r3,zero,4015354 <__alt_data_end+0xfc015354>
 4015370:	88c00015 	stw	r3,0(r17)
 4015374:	003ff706 	br	4015354 <__alt_data_end+0xfc015354>

04015378 <_read_r>:
 4015378:	defffd04 	addi	sp,sp,-12
 401537c:	2805883a 	mov	r2,r5
 4015380:	dc000015 	stw	r16,0(sp)
 4015384:	040100f4 	movhi	r16,1027
 4015388:	dc400115 	stw	r17,4(sp)
 401538c:	300b883a 	mov	r5,r6
 4015390:	8419e204 	addi	r16,r16,26504
 4015394:	2023883a 	mov	r17,r4
 4015398:	380d883a 	mov	r6,r7
 401539c:	1009883a 	mov	r4,r2
 40153a0:	dfc00215 	stw	ra,8(sp)
 40153a4:	80000015 	stw	zero,0(r16)
 40153a8:	40192040 	call	4019204 <read>
 40153ac:	00ffffc4 	movi	r3,-1
 40153b0:	10c00526 	beq	r2,r3,40153c8 <_read_r+0x50>
 40153b4:	dfc00217 	ldw	ra,8(sp)
 40153b8:	dc400117 	ldw	r17,4(sp)
 40153bc:	dc000017 	ldw	r16,0(sp)
 40153c0:	dec00304 	addi	sp,sp,12
 40153c4:	f800283a 	ret
 40153c8:	80c00017 	ldw	r3,0(r16)
 40153cc:	183ff926 	beq	r3,zero,40153b4 <__alt_data_end+0xfc0153b4>
 40153d0:	88c00015 	stw	r3,0(r17)
 40153d4:	003ff706 	br	40153b4 <__alt_data_end+0xfc0153b4>

040153d8 <_wcrtomb_r>:
 40153d8:	defff604 	addi	sp,sp,-40
 40153dc:	008100f4 	movhi	r2,1027
 40153e0:	dc800815 	stw	r18,32(sp)
 40153e4:	dc400715 	stw	r17,28(sp)
 40153e8:	dc000615 	stw	r16,24(sp)
 40153ec:	10a71d04 	addi	r2,r2,-25484
 40153f0:	dfc00915 	stw	ra,36(sp)
 40153f4:	2021883a 	mov	r16,r4
 40153f8:	3823883a 	mov	r17,r7
 40153fc:	14800017 	ldw	r18,0(r2)
 4015400:	28001426 	beq	r5,zero,4015454 <_wcrtomb_r+0x7c>
 4015404:	d9400415 	stw	r5,16(sp)
 4015408:	d9800515 	stw	r6,20(sp)
 401540c:	40117ec0 	call	40117ec <__locale_charset>
 4015410:	d9800517 	ldw	r6,20(sp)
 4015414:	d9400417 	ldw	r5,16(sp)
 4015418:	100f883a 	mov	r7,r2
 401541c:	dc400015 	stw	r17,0(sp)
 4015420:	8009883a 	mov	r4,r16
 4015424:	903ee83a 	callr	r18
 4015428:	00ffffc4 	movi	r3,-1
 401542c:	10c0031e 	bne	r2,r3,401543c <_wcrtomb_r+0x64>
 4015430:	88000015 	stw	zero,0(r17)
 4015434:	00c02284 	movi	r3,138
 4015438:	80c00015 	stw	r3,0(r16)
 401543c:	dfc00917 	ldw	ra,36(sp)
 4015440:	dc800817 	ldw	r18,32(sp)
 4015444:	dc400717 	ldw	r17,28(sp)
 4015448:	dc000617 	ldw	r16,24(sp)
 401544c:	dec00a04 	addi	sp,sp,40
 4015450:	f800283a 	ret
 4015454:	40117ec0 	call	40117ec <__locale_charset>
 4015458:	100f883a 	mov	r7,r2
 401545c:	dc400015 	stw	r17,0(sp)
 4015460:	000d883a 	mov	r6,zero
 4015464:	d9400104 	addi	r5,sp,4
 4015468:	8009883a 	mov	r4,r16
 401546c:	903ee83a 	callr	r18
 4015470:	003fed06 	br	4015428 <__alt_data_end+0xfc015428>

04015474 <wcrtomb>:
 4015474:	defff604 	addi	sp,sp,-40
 4015478:	008100f4 	movhi	r2,1027
 401547c:	dc800615 	stw	r18,24(sp)
 4015480:	dc400515 	stw	r17,20(sp)
 4015484:	10a71904 	addi	r2,r2,-25500
 4015488:	dfc00915 	stw	ra,36(sp)
 401548c:	dd000815 	stw	r20,32(sp)
 4015490:	dcc00715 	stw	r19,28(sp)
 4015494:	dc000415 	stw	r16,16(sp)
 4015498:	3025883a 	mov	r18,r6
 401549c:	14400017 	ldw	r17,0(r2)
 40154a0:	20001926 	beq	r4,zero,4015508 <wcrtomb+0x94>
 40154a4:	008100f4 	movhi	r2,1027
 40154a8:	10a71d04 	addi	r2,r2,-25484
 40154ac:	15000017 	ldw	r20,0(r2)
 40154b0:	2021883a 	mov	r16,r4
 40154b4:	2827883a 	mov	r19,r5
 40154b8:	40117ec0 	call	40117ec <__locale_charset>
 40154bc:	100f883a 	mov	r7,r2
 40154c0:	dc800015 	stw	r18,0(sp)
 40154c4:	980d883a 	mov	r6,r19
 40154c8:	800b883a 	mov	r5,r16
 40154cc:	8809883a 	mov	r4,r17
 40154d0:	a03ee83a 	callr	r20
 40154d4:	00ffffc4 	movi	r3,-1
 40154d8:	10c0031e 	bne	r2,r3,40154e8 <wcrtomb+0x74>
 40154dc:	90000015 	stw	zero,0(r18)
 40154e0:	00c02284 	movi	r3,138
 40154e4:	88c00015 	stw	r3,0(r17)
 40154e8:	dfc00917 	ldw	ra,36(sp)
 40154ec:	dd000817 	ldw	r20,32(sp)
 40154f0:	dcc00717 	ldw	r19,28(sp)
 40154f4:	dc800617 	ldw	r18,24(sp)
 40154f8:	dc400517 	ldw	r17,20(sp)
 40154fc:	dc000417 	ldw	r16,16(sp)
 4015500:	dec00a04 	addi	sp,sp,40
 4015504:	f800283a 	ret
 4015508:	008100f4 	movhi	r2,1027
 401550c:	10a71d04 	addi	r2,r2,-25484
 4015510:	14000017 	ldw	r16,0(r2)
 4015514:	40117ec0 	call	40117ec <__locale_charset>
 4015518:	100f883a 	mov	r7,r2
 401551c:	dc800015 	stw	r18,0(sp)
 4015520:	000d883a 	mov	r6,zero
 4015524:	d9400104 	addi	r5,sp,4
 4015528:	8809883a 	mov	r4,r17
 401552c:	803ee83a 	callr	r16
 4015530:	003fe806 	br	40154d4 <__alt_data_end+0xfc0154d4>

04015534 <__ascii_wctomb>:
 4015534:	28000526 	beq	r5,zero,401554c <__ascii_wctomb+0x18>
 4015538:	00803fc4 	movi	r2,255
 401553c:	11800536 	bltu	r2,r6,4015554 <__ascii_wctomb+0x20>
 4015540:	29800005 	stb	r6,0(r5)
 4015544:	00800044 	movi	r2,1
 4015548:	f800283a 	ret
 401554c:	0005883a 	mov	r2,zero
 4015550:	f800283a 	ret
 4015554:	00802284 	movi	r2,138
 4015558:	20800015 	stw	r2,0(r4)
 401555c:	00bfffc4 	movi	r2,-1
 4015560:	f800283a 	ret

04015564 <_wctomb_r>:
 4015564:	008100f4 	movhi	r2,1027
 4015568:	defff904 	addi	sp,sp,-28
 401556c:	10a71d04 	addi	r2,r2,-25484
 4015570:	dfc00615 	stw	ra,24(sp)
 4015574:	dc400515 	stw	r17,20(sp)
 4015578:	dc000415 	stw	r16,16(sp)
 401557c:	3823883a 	mov	r17,r7
 4015580:	14000017 	ldw	r16,0(r2)
 4015584:	d9000115 	stw	r4,4(sp)
 4015588:	d9400215 	stw	r5,8(sp)
 401558c:	d9800315 	stw	r6,12(sp)
 4015590:	40117ec0 	call	40117ec <__locale_charset>
 4015594:	d9800317 	ldw	r6,12(sp)
 4015598:	d9400217 	ldw	r5,8(sp)
 401559c:	d9000117 	ldw	r4,4(sp)
 40155a0:	100f883a 	mov	r7,r2
 40155a4:	dc400015 	stw	r17,0(sp)
 40155a8:	803ee83a 	callr	r16
 40155ac:	dfc00617 	ldw	ra,24(sp)
 40155b0:	dc400517 	ldw	r17,20(sp)
 40155b4:	dc000417 	ldw	r16,16(sp)
 40155b8:	dec00704 	addi	sp,sp,28
 40155bc:	f800283a 	ret

040155c0 <__udivdi3>:
 40155c0:	defff404 	addi	sp,sp,-48
 40155c4:	dcc00515 	stw	r19,20(sp)
 40155c8:	dc000215 	stw	r16,8(sp)
 40155cc:	dfc00b15 	stw	ra,44(sp)
 40155d0:	df000a15 	stw	fp,40(sp)
 40155d4:	ddc00915 	stw	r23,36(sp)
 40155d8:	dd800815 	stw	r22,32(sp)
 40155dc:	dd400715 	stw	r21,28(sp)
 40155e0:	dd000615 	stw	r20,24(sp)
 40155e4:	dc800415 	stw	r18,16(sp)
 40155e8:	dc400315 	stw	r17,12(sp)
 40155ec:	2027883a 	mov	r19,r4
 40155f0:	2821883a 	mov	r16,r5
 40155f4:	3800461e 	bne	r7,zero,4015710 <__udivdi3+0x150>
 40155f8:	3023883a 	mov	r17,r6
 40155fc:	2025883a 	mov	r18,r4
 4015600:	2980572e 	bgeu	r5,r6,4015760 <__udivdi3+0x1a0>
 4015604:	00bfffd4 	movui	r2,65535
 4015608:	282d883a 	mov	r22,r5
 401560c:	1180b236 	bltu	r2,r6,40158d8 <__udivdi3+0x318>
 4015610:	00803fc4 	movi	r2,255
 4015614:	1185803a 	cmpltu	r2,r2,r6
 4015618:	100490fa 	slli	r2,r2,3
 401561c:	3086d83a 	srl	r3,r6,r2
 4015620:	010100b4 	movhi	r4,1026
 4015624:	21343b04 	addi	r4,r4,-12052
 4015628:	20c7883a 	add	r3,r4,r3
 401562c:	18c00003 	ldbu	r3,0(r3)
 4015630:	1885883a 	add	r2,r3,r2
 4015634:	00c00804 	movi	r3,32
 4015638:	1887c83a 	sub	r3,r3,r2
 401563c:	18000526 	beq	r3,zero,4015654 <__udivdi3+0x94>
 4015640:	80e0983a 	sll	r16,r16,r3
 4015644:	9884d83a 	srl	r2,r19,r2
 4015648:	30e2983a 	sll	r17,r6,r3
 401564c:	98e4983a 	sll	r18,r19,r3
 4015650:	142cb03a 	or	r22,r2,r16
 4015654:	882ad43a 	srli	r21,r17,16
 4015658:	b009883a 	mov	r4,r22
 401565c:	8d3fffcc 	andi	r20,r17,65535
 4015660:	a80b883a 	mov	r5,r21
 4015664:	400b1840 	call	400b184 <__umodsi3>
 4015668:	b009883a 	mov	r4,r22
 401566c:	a80b883a 	mov	r5,r21
 4015670:	1027883a 	mov	r19,r2
 4015674:	400b1200 	call	400b120 <__udivsi3>
 4015678:	100b883a 	mov	r5,r2
 401567c:	a009883a 	mov	r4,r20
 4015680:	102d883a 	mov	r22,r2
 4015684:	400b1dc0 	call	400b1dc <__mulsi3>
 4015688:	9826943a 	slli	r19,r19,16
 401568c:	9006d43a 	srli	r3,r18,16
 4015690:	1cc6b03a 	or	r3,r3,r19
 4015694:	1880052e 	bgeu	r3,r2,40156ac <__udivdi3+0xec>
 4015698:	1c47883a 	add	r3,r3,r17
 401569c:	b13fffc4 	addi	r4,r22,-1
 40156a0:	1c400136 	bltu	r3,r17,40156a8 <__udivdi3+0xe8>
 40156a4:	18814236 	bltu	r3,r2,4015bb0 <__udivdi3+0x5f0>
 40156a8:	202d883a 	mov	r22,r4
 40156ac:	18a1c83a 	sub	r16,r3,r2
 40156b0:	8009883a 	mov	r4,r16
 40156b4:	a80b883a 	mov	r5,r21
 40156b8:	400b1840 	call	400b184 <__umodsi3>
 40156bc:	1027883a 	mov	r19,r2
 40156c0:	8009883a 	mov	r4,r16
 40156c4:	a80b883a 	mov	r5,r21
 40156c8:	9826943a 	slli	r19,r19,16
 40156cc:	400b1200 	call	400b120 <__udivsi3>
 40156d0:	100b883a 	mov	r5,r2
 40156d4:	a009883a 	mov	r4,r20
 40156d8:	94bfffcc 	andi	r18,r18,65535
 40156dc:	1021883a 	mov	r16,r2
 40156e0:	94e4b03a 	or	r18,r18,r19
 40156e4:	400b1dc0 	call	400b1dc <__mulsi3>
 40156e8:	9080052e 	bgeu	r18,r2,4015700 <__udivdi3+0x140>
 40156ec:	8ca5883a 	add	r18,r17,r18
 40156f0:	80ffffc4 	addi	r3,r16,-1
 40156f4:	94410c36 	bltu	r18,r17,4015b28 <__udivdi3+0x568>
 40156f8:	90810b2e 	bgeu	r18,r2,4015b28 <__udivdi3+0x568>
 40156fc:	843fff84 	addi	r16,r16,-2
 4015700:	b004943a 	slli	r2,r22,16
 4015704:	0007883a 	mov	r3,zero
 4015708:	1404b03a 	or	r2,r2,r16
 401570c:	00005e06 	br	4015888 <__udivdi3+0x2c8>
 4015710:	29c05b36 	bltu	r5,r7,4015880 <__udivdi3+0x2c0>
 4015714:	00bfffd4 	movui	r2,65535
 4015718:	11c0672e 	bgeu	r2,r7,40158b8 <__udivdi3+0x2f8>
 401571c:	00804034 	movhi	r2,256
 4015720:	10bfffc4 	addi	r2,r2,-1
 4015724:	11c10a36 	bltu	r2,r7,4015b50 <__udivdi3+0x590>
 4015728:	00800404 	movi	r2,16
 401572c:	3886d83a 	srl	r3,r7,r2
 4015730:	010100b4 	movhi	r4,1026
 4015734:	21343b04 	addi	r4,r4,-12052
 4015738:	20c7883a 	add	r3,r4,r3
 401573c:	18c00003 	ldbu	r3,0(r3)
 4015740:	05c00804 	movi	r23,32
 4015744:	1885883a 	add	r2,r3,r2
 4015748:	b8afc83a 	sub	r23,r23,r2
 401574c:	b800671e 	bne	r23,zero,40158ec <__udivdi3+0x32c>
 4015750:	3c010536 	bltu	r7,r16,4015b68 <__udivdi3+0x5a8>
 4015754:	9985403a 	cmpgeu	r2,r19,r6
 4015758:	0007883a 	mov	r3,zero
 401575c:	00004a06 	br	4015888 <__udivdi3+0x2c8>
 4015760:	3000041e 	bne	r6,zero,4015774 <__udivdi3+0x1b4>
 4015764:	000b883a 	mov	r5,zero
 4015768:	01000044 	movi	r4,1
 401576c:	400b1200 	call	400b120 <__udivsi3>
 4015770:	1023883a 	mov	r17,r2
 4015774:	00bfffd4 	movui	r2,65535
 4015778:	1440532e 	bgeu	r2,r17,40158c8 <__udivdi3+0x308>
 401577c:	00804034 	movhi	r2,256
 4015780:	10bfffc4 	addi	r2,r2,-1
 4015784:	1440f436 	bltu	r2,r17,4015b58 <__udivdi3+0x598>
 4015788:	00800404 	movi	r2,16
 401578c:	8886d83a 	srl	r3,r17,r2
 4015790:	010100b4 	movhi	r4,1026
 4015794:	21343b04 	addi	r4,r4,-12052
 4015798:	20c7883a 	add	r3,r4,r3
 401579c:	18c00003 	ldbu	r3,0(r3)
 40157a0:	1885883a 	add	r2,r3,r2
 40157a4:	00c00804 	movi	r3,32
 40157a8:	1887c83a 	sub	r3,r3,r2
 40157ac:	1800a51e 	bne	r3,zero,4015a44 <__udivdi3+0x484>
 40157b0:	882ad43a 	srli	r21,r17,16
 40157b4:	8461c83a 	sub	r16,r16,r17
 40157b8:	8d3fffcc 	andi	r20,r17,65535
 40157bc:	00c00044 	movi	r3,1
 40157c0:	a80b883a 	mov	r5,r21
 40157c4:	8009883a 	mov	r4,r16
 40157c8:	d8c00115 	stw	r3,4(sp)
 40157cc:	400b1840 	call	400b184 <__umodsi3>
 40157d0:	a80b883a 	mov	r5,r21
 40157d4:	8009883a 	mov	r4,r16
 40157d8:	1027883a 	mov	r19,r2
 40157dc:	400b1200 	call	400b120 <__udivsi3>
 40157e0:	a00b883a 	mov	r5,r20
 40157e4:	1009883a 	mov	r4,r2
 40157e8:	102d883a 	mov	r22,r2
 40157ec:	400b1dc0 	call	400b1dc <__mulsi3>
 40157f0:	9826943a 	slli	r19,r19,16
 40157f4:	900ed43a 	srli	r7,r18,16
 40157f8:	d8c00117 	ldw	r3,4(sp)
 40157fc:	3cceb03a 	or	r7,r7,r19
 4015800:	3880052e 	bgeu	r7,r2,4015818 <__udivdi3+0x258>
 4015804:	3c4f883a 	add	r7,r7,r17
 4015808:	b13fffc4 	addi	r4,r22,-1
 401580c:	3c400136 	bltu	r7,r17,4015814 <__udivdi3+0x254>
 4015810:	3880e436 	bltu	r7,r2,4015ba4 <__udivdi3+0x5e4>
 4015814:	202d883a 	mov	r22,r4
 4015818:	38a1c83a 	sub	r16,r7,r2
 401581c:	8009883a 	mov	r4,r16
 4015820:	a80b883a 	mov	r5,r21
 4015824:	d8c00115 	stw	r3,4(sp)
 4015828:	400b1840 	call	400b184 <__umodsi3>
 401582c:	1027883a 	mov	r19,r2
 4015830:	8009883a 	mov	r4,r16
 4015834:	a80b883a 	mov	r5,r21
 4015838:	9826943a 	slli	r19,r19,16
 401583c:	400b1200 	call	400b120 <__udivsi3>
 4015840:	a00b883a 	mov	r5,r20
 4015844:	1009883a 	mov	r4,r2
 4015848:	94bfffcc 	andi	r18,r18,65535
 401584c:	1021883a 	mov	r16,r2
 4015850:	94e4b03a 	or	r18,r18,r19
 4015854:	400b1dc0 	call	400b1dc <__mulsi3>
 4015858:	d8c00117 	ldw	r3,4(sp)
 401585c:	9080052e 	bgeu	r18,r2,4015874 <__udivdi3+0x2b4>
 4015860:	8ca5883a 	add	r18,r17,r18
 4015864:	813fffc4 	addi	r4,r16,-1
 4015868:	9440ad36 	bltu	r18,r17,4015b20 <__udivdi3+0x560>
 401586c:	9080ac2e 	bgeu	r18,r2,4015b20 <__udivdi3+0x560>
 4015870:	843fff84 	addi	r16,r16,-2
 4015874:	b004943a 	slli	r2,r22,16
 4015878:	1404b03a 	or	r2,r2,r16
 401587c:	00000206 	br	4015888 <__udivdi3+0x2c8>
 4015880:	0007883a 	mov	r3,zero
 4015884:	0005883a 	mov	r2,zero
 4015888:	dfc00b17 	ldw	ra,44(sp)
 401588c:	df000a17 	ldw	fp,40(sp)
 4015890:	ddc00917 	ldw	r23,36(sp)
 4015894:	dd800817 	ldw	r22,32(sp)
 4015898:	dd400717 	ldw	r21,28(sp)
 401589c:	dd000617 	ldw	r20,24(sp)
 40158a0:	dcc00517 	ldw	r19,20(sp)
 40158a4:	dc800417 	ldw	r18,16(sp)
 40158a8:	dc400317 	ldw	r17,12(sp)
 40158ac:	dc000217 	ldw	r16,8(sp)
 40158b0:	dec00c04 	addi	sp,sp,48
 40158b4:	f800283a 	ret
 40158b8:	00803fc4 	movi	r2,255
 40158bc:	11c5803a 	cmpltu	r2,r2,r7
 40158c0:	100490fa 	slli	r2,r2,3
 40158c4:	003f9906 	br	401572c <__alt_data_end+0xfc01572c>
 40158c8:	00803fc4 	movi	r2,255
 40158cc:	1445803a 	cmpltu	r2,r2,r17
 40158d0:	100490fa 	slli	r2,r2,3
 40158d4:	003fad06 	br	401578c <__alt_data_end+0xfc01578c>
 40158d8:	00804034 	movhi	r2,256
 40158dc:	10bfffc4 	addi	r2,r2,-1
 40158e0:	11809f36 	bltu	r2,r6,4015b60 <__udivdi3+0x5a0>
 40158e4:	00800404 	movi	r2,16
 40158e8:	003f4c06 	br	401561c <__alt_data_end+0xfc01561c>
 40158ec:	3dce983a 	sll	r7,r7,r23
 40158f0:	30b8d83a 	srl	fp,r6,r2
 40158f4:	80a2d83a 	srl	r17,r16,r2
 40158f8:	35cc983a 	sll	r6,r6,r23
 40158fc:	3f38b03a 	or	fp,r7,fp
 4015900:	e024d43a 	srli	r18,fp,16
 4015904:	9884d83a 	srl	r2,r19,r2
 4015908:	85e0983a 	sll	r16,r16,r23
 401590c:	8809883a 	mov	r4,r17
 4015910:	900b883a 	mov	r5,r18
 4015914:	d9800015 	stw	r6,0(sp)
 4015918:	1420b03a 	or	r16,r2,r16
 401591c:	400b1840 	call	400b184 <__umodsi3>
 4015920:	900b883a 	mov	r5,r18
 4015924:	8809883a 	mov	r4,r17
 4015928:	1029883a 	mov	r20,r2
 401592c:	e5bfffcc 	andi	r22,fp,65535
 4015930:	400b1200 	call	400b120 <__udivsi3>
 4015934:	100b883a 	mov	r5,r2
 4015938:	b009883a 	mov	r4,r22
 401593c:	102b883a 	mov	r21,r2
 4015940:	400b1dc0 	call	400b1dc <__mulsi3>
 4015944:	a028943a 	slli	r20,r20,16
 4015948:	8006d43a 	srli	r3,r16,16
 401594c:	1d06b03a 	or	r3,r3,r20
 4015950:	1880042e 	bgeu	r3,r2,4015964 <__udivdi3+0x3a4>
 4015954:	1f07883a 	add	r3,r3,fp
 4015958:	a93fffc4 	addi	r4,r21,-1
 401595c:	1f00892e 	bgeu	r3,fp,4015b84 <__udivdi3+0x5c4>
 4015960:	202b883a 	mov	r21,r4
 4015964:	18a3c83a 	sub	r17,r3,r2
 4015968:	8809883a 	mov	r4,r17
 401596c:	900b883a 	mov	r5,r18
 4015970:	400b1840 	call	400b184 <__umodsi3>
 4015974:	1029883a 	mov	r20,r2
 4015978:	8809883a 	mov	r4,r17
 401597c:	900b883a 	mov	r5,r18
 4015980:	a028943a 	slli	r20,r20,16
 4015984:	400b1200 	call	400b120 <__udivsi3>
 4015988:	100b883a 	mov	r5,r2
 401598c:	b009883a 	mov	r4,r22
 4015990:	843fffcc 	andi	r16,r16,65535
 4015994:	1023883a 	mov	r17,r2
 4015998:	8520b03a 	or	r16,r16,r20
 401599c:	400b1dc0 	call	400b1dc <__mulsi3>
 40159a0:	8080042e 	bgeu	r16,r2,40159b4 <__udivdi3+0x3f4>
 40159a4:	8721883a 	add	r16,r16,fp
 40159a8:	88ffffc4 	addi	r3,r17,-1
 40159ac:	8700712e 	bgeu	r16,fp,4015b74 <__udivdi3+0x5b4>
 40159b0:	1823883a 	mov	r17,r3
 40159b4:	a80e943a 	slli	r7,r21,16
 40159b8:	d8c00017 	ldw	r3,0(sp)
 40159bc:	80a1c83a 	sub	r16,r16,r2
 40159c0:	3c64b03a 	or	r18,r7,r17
 40159c4:	1d3fffcc 	andi	r20,r3,65535
 40159c8:	9022d43a 	srli	r17,r18,16
 40159cc:	95bfffcc 	andi	r22,r18,65535
 40159d0:	a00b883a 	mov	r5,r20
 40159d4:	b009883a 	mov	r4,r22
 40159d8:	182ad43a 	srli	r21,r3,16
 40159dc:	400b1dc0 	call	400b1dc <__mulsi3>
 40159e0:	a00b883a 	mov	r5,r20
 40159e4:	8809883a 	mov	r4,r17
 40159e8:	1039883a 	mov	fp,r2
 40159ec:	400b1dc0 	call	400b1dc <__mulsi3>
 40159f0:	8809883a 	mov	r4,r17
 40159f4:	a80b883a 	mov	r5,r21
 40159f8:	1029883a 	mov	r20,r2
 40159fc:	400b1dc0 	call	400b1dc <__mulsi3>
 4015a00:	a80b883a 	mov	r5,r21
 4015a04:	b009883a 	mov	r4,r22
 4015a08:	1023883a 	mov	r17,r2
 4015a0c:	400b1dc0 	call	400b1dc <__mulsi3>
 4015a10:	e006d43a 	srli	r3,fp,16
 4015a14:	1505883a 	add	r2,r2,r20
 4015a18:	1887883a 	add	r3,r3,r2
 4015a1c:	1d00022e 	bgeu	r3,r20,4015a28 <__udivdi3+0x468>
 4015a20:	00800074 	movhi	r2,1
 4015a24:	88a3883a 	add	r17,r17,r2
 4015a28:	1804d43a 	srli	r2,r3,16
 4015a2c:	1463883a 	add	r17,r2,r17
 4015a30:	84404436 	bltu	r16,r17,4015b44 <__udivdi3+0x584>
 4015a34:	84403e26 	beq	r16,r17,4015b30 <__udivdi3+0x570>
 4015a38:	9005883a 	mov	r2,r18
 4015a3c:	0007883a 	mov	r3,zero
 4015a40:	003f9106 	br	4015888 <__alt_data_end+0xfc015888>
 4015a44:	88e2983a 	sll	r17,r17,r3
 4015a48:	80aed83a 	srl	r23,r16,r2
 4015a4c:	80e0983a 	sll	r16,r16,r3
 4015a50:	882ad43a 	srli	r21,r17,16
 4015a54:	9884d83a 	srl	r2,r19,r2
 4015a58:	b809883a 	mov	r4,r23
 4015a5c:	a80b883a 	mov	r5,r21
 4015a60:	98e4983a 	sll	r18,r19,r3
 4015a64:	142cb03a 	or	r22,r2,r16
 4015a68:	400b1840 	call	400b184 <__umodsi3>
 4015a6c:	b809883a 	mov	r4,r23
 4015a70:	a80b883a 	mov	r5,r21
 4015a74:	1027883a 	mov	r19,r2
 4015a78:	8d3fffcc 	andi	r20,r17,65535
 4015a7c:	400b1200 	call	400b120 <__udivsi3>
 4015a80:	a009883a 	mov	r4,r20
 4015a84:	100b883a 	mov	r5,r2
 4015a88:	102f883a 	mov	r23,r2
 4015a8c:	400b1dc0 	call	400b1dc <__mulsi3>
 4015a90:	9826943a 	slli	r19,r19,16
 4015a94:	b008d43a 	srli	r4,r22,16
 4015a98:	24c8b03a 	or	r4,r4,r19
 4015a9c:	2080062e 	bgeu	r4,r2,4015ab8 <__udivdi3+0x4f8>
 4015aa0:	2449883a 	add	r4,r4,r17
 4015aa4:	b8ffffc4 	addi	r3,r23,-1
 4015aa8:	24403c36 	bltu	r4,r17,4015b9c <__udivdi3+0x5dc>
 4015aac:	20803b2e 	bgeu	r4,r2,4015b9c <__udivdi3+0x5dc>
 4015ab0:	bdffff84 	addi	r23,r23,-2
 4015ab4:	2449883a 	add	r4,r4,r17
 4015ab8:	20a1c83a 	sub	r16,r4,r2
 4015abc:	a80b883a 	mov	r5,r21
 4015ac0:	8009883a 	mov	r4,r16
 4015ac4:	400b1840 	call	400b184 <__umodsi3>
 4015ac8:	a80b883a 	mov	r5,r21
 4015acc:	8009883a 	mov	r4,r16
 4015ad0:	1027883a 	mov	r19,r2
 4015ad4:	400b1200 	call	400b120 <__udivsi3>
 4015ad8:	a009883a 	mov	r4,r20
 4015adc:	100b883a 	mov	r5,r2
 4015ae0:	9826943a 	slli	r19,r19,16
 4015ae4:	1039883a 	mov	fp,r2
 4015ae8:	400b1dc0 	call	400b1dc <__mulsi3>
 4015aec:	b13fffcc 	andi	r4,r22,65535
 4015af0:	24c8b03a 	or	r4,r4,r19
 4015af4:	2080062e 	bgeu	r4,r2,4015b10 <__udivdi3+0x550>
 4015af8:	2449883a 	add	r4,r4,r17
 4015afc:	e0ffffc4 	addi	r3,fp,-1
 4015b00:	24402436 	bltu	r4,r17,4015b94 <__udivdi3+0x5d4>
 4015b04:	2080232e 	bgeu	r4,r2,4015b94 <__udivdi3+0x5d4>
 4015b08:	e73fff84 	addi	fp,fp,-2
 4015b0c:	2449883a 	add	r4,r4,r17
 4015b10:	b82e943a 	slli	r23,r23,16
 4015b14:	20a1c83a 	sub	r16,r4,r2
 4015b18:	bf06b03a 	or	r3,r23,fp
 4015b1c:	003f2806 	br	40157c0 <__alt_data_end+0xfc0157c0>
 4015b20:	2021883a 	mov	r16,r4
 4015b24:	003f5306 	br	4015874 <__alt_data_end+0xfc015874>
 4015b28:	1821883a 	mov	r16,r3
 4015b2c:	003ef406 	br	4015700 <__alt_data_end+0xfc015700>
 4015b30:	1806943a 	slli	r3,r3,16
 4015b34:	9de6983a 	sll	r19,r19,r23
 4015b38:	e73fffcc 	andi	fp,fp,65535
 4015b3c:	1f07883a 	add	r3,r3,fp
 4015b40:	98ffbd2e 	bgeu	r19,r3,4015a38 <__alt_data_end+0xfc015a38>
 4015b44:	90bfffc4 	addi	r2,r18,-1
 4015b48:	0007883a 	mov	r3,zero
 4015b4c:	003f4e06 	br	4015888 <__alt_data_end+0xfc015888>
 4015b50:	00800604 	movi	r2,24
 4015b54:	003ef506 	br	401572c <__alt_data_end+0xfc01572c>
 4015b58:	00800604 	movi	r2,24
 4015b5c:	003f0b06 	br	401578c <__alt_data_end+0xfc01578c>
 4015b60:	00800604 	movi	r2,24
 4015b64:	003ead06 	br	401561c <__alt_data_end+0xfc01561c>
 4015b68:	0007883a 	mov	r3,zero
 4015b6c:	00800044 	movi	r2,1
 4015b70:	003f4506 	br	4015888 <__alt_data_end+0xfc015888>
 4015b74:	80bf8e2e 	bgeu	r16,r2,40159b0 <__alt_data_end+0xfc0159b0>
 4015b78:	8c7fff84 	addi	r17,r17,-2
 4015b7c:	8721883a 	add	r16,r16,fp
 4015b80:	003f8c06 	br	40159b4 <__alt_data_end+0xfc0159b4>
 4015b84:	18bf762e 	bgeu	r3,r2,4015960 <__alt_data_end+0xfc015960>
 4015b88:	ad7fff84 	addi	r21,r21,-2
 4015b8c:	1f07883a 	add	r3,r3,fp
 4015b90:	003f7406 	br	4015964 <__alt_data_end+0xfc015964>
 4015b94:	1839883a 	mov	fp,r3
 4015b98:	003fdd06 	br	4015b10 <__alt_data_end+0xfc015b10>
 4015b9c:	182f883a 	mov	r23,r3
 4015ba0:	003fc506 	br	4015ab8 <__alt_data_end+0xfc015ab8>
 4015ba4:	b5bfff84 	addi	r22,r22,-2
 4015ba8:	3c4f883a 	add	r7,r7,r17
 4015bac:	003f1a06 	br	4015818 <__alt_data_end+0xfc015818>
 4015bb0:	b5bfff84 	addi	r22,r22,-2
 4015bb4:	1c47883a 	add	r3,r3,r17
 4015bb8:	003ebc06 	br	40156ac <__alt_data_end+0xfc0156ac>

04015bbc <__umoddi3>:
 4015bbc:	defff304 	addi	sp,sp,-52
 4015bc0:	df000b15 	stw	fp,44(sp)
 4015bc4:	dc400415 	stw	r17,16(sp)
 4015bc8:	dc000315 	stw	r16,12(sp)
 4015bcc:	dfc00c15 	stw	ra,48(sp)
 4015bd0:	ddc00a15 	stw	r23,40(sp)
 4015bd4:	dd800915 	stw	r22,36(sp)
 4015bd8:	dd400815 	stw	r21,32(sp)
 4015bdc:	dd000715 	stw	r20,28(sp)
 4015be0:	dcc00615 	stw	r19,24(sp)
 4015be4:	dc800515 	stw	r18,20(sp)
 4015be8:	2021883a 	mov	r16,r4
 4015bec:	2823883a 	mov	r17,r5
 4015bf0:	2839883a 	mov	fp,r5
 4015bf4:	3800401e 	bne	r7,zero,4015cf8 <__umoddi3+0x13c>
 4015bf8:	3027883a 	mov	r19,r6
 4015bfc:	2029883a 	mov	r20,r4
 4015c00:	2980552e 	bgeu	r5,r6,4015d58 <__umoddi3+0x19c>
 4015c04:	00bfffd4 	movui	r2,65535
 4015c08:	1180a236 	bltu	r2,r6,4015e94 <__umoddi3+0x2d8>
 4015c0c:	01003fc4 	movi	r4,255
 4015c10:	2189803a 	cmpltu	r4,r4,r6
 4015c14:	200890fa 	slli	r4,r4,3
 4015c18:	3104d83a 	srl	r2,r6,r4
 4015c1c:	00c100b4 	movhi	r3,1026
 4015c20:	18f43b04 	addi	r3,r3,-12052
 4015c24:	1885883a 	add	r2,r3,r2
 4015c28:	10c00003 	ldbu	r3,0(r2)
 4015c2c:	00800804 	movi	r2,32
 4015c30:	1909883a 	add	r4,r3,r4
 4015c34:	1125c83a 	sub	r18,r2,r4
 4015c38:	90000526 	beq	r18,zero,4015c50 <__umoddi3+0x94>
 4015c3c:	8ca2983a 	sll	r17,r17,r18
 4015c40:	8108d83a 	srl	r4,r16,r4
 4015c44:	34a6983a 	sll	r19,r6,r18
 4015c48:	84a8983a 	sll	r20,r16,r18
 4015c4c:	2478b03a 	or	fp,r4,r17
 4015c50:	982cd43a 	srli	r22,r19,16
 4015c54:	e009883a 	mov	r4,fp
 4015c58:	9dffffcc 	andi	r23,r19,65535
 4015c5c:	b00b883a 	mov	r5,r22
 4015c60:	400b1840 	call	400b184 <__umodsi3>
 4015c64:	b00b883a 	mov	r5,r22
 4015c68:	e009883a 	mov	r4,fp
 4015c6c:	102b883a 	mov	r21,r2
 4015c70:	400b1200 	call	400b120 <__udivsi3>
 4015c74:	100b883a 	mov	r5,r2
 4015c78:	b809883a 	mov	r4,r23
 4015c7c:	400b1dc0 	call	400b1dc <__mulsi3>
 4015c80:	a82a943a 	slli	r21,r21,16
 4015c84:	a006d43a 	srli	r3,r20,16
 4015c88:	1d46b03a 	or	r3,r3,r21
 4015c8c:	1880032e 	bgeu	r3,r2,4015c9c <__umoddi3+0xe0>
 4015c90:	1cc7883a 	add	r3,r3,r19
 4015c94:	1cc00136 	bltu	r3,r19,4015c9c <__umoddi3+0xe0>
 4015c98:	18813136 	bltu	r3,r2,4016160 <__umoddi3+0x5a4>
 4015c9c:	18a1c83a 	sub	r16,r3,r2
 4015ca0:	b00b883a 	mov	r5,r22
 4015ca4:	8009883a 	mov	r4,r16
 4015ca8:	400b1840 	call	400b184 <__umodsi3>
 4015cac:	b00b883a 	mov	r5,r22
 4015cb0:	8009883a 	mov	r4,r16
 4015cb4:	1023883a 	mov	r17,r2
 4015cb8:	400b1200 	call	400b120 <__udivsi3>
 4015cbc:	100b883a 	mov	r5,r2
 4015cc0:	b809883a 	mov	r4,r23
 4015cc4:	8822943a 	slli	r17,r17,16
 4015cc8:	400b1dc0 	call	400b1dc <__mulsi3>
 4015ccc:	a0ffffcc 	andi	r3,r20,65535
 4015cd0:	1c46b03a 	or	r3,r3,r17
 4015cd4:	1880042e 	bgeu	r3,r2,4015ce8 <__umoddi3+0x12c>
 4015cd8:	1cc7883a 	add	r3,r3,r19
 4015cdc:	1cc00236 	bltu	r3,r19,4015ce8 <__umoddi3+0x12c>
 4015ce0:	1880012e 	bgeu	r3,r2,4015ce8 <__umoddi3+0x12c>
 4015ce4:	1cc7883a 	add	r3,r3,r19
 4015ce8:	1885c83a 	sub	r2,r3,r2
 4015cec:	1484d83a 	srl	r2,r2,r18
 4015cf0:	0007883a 	mov	r3,zero
 4015cf4:	00005306 	br	4015e44 <__umoddi3+0x288>
 4015cf8:	29c05036 	bltu	r5,r7,4015e3c <__umoddi3+0x280>
 4015cfc:	00bfffd4 	movui	r2,65535
 4015d00:	11c05c2e 	bgeu	r2,r7,4015e74 <__umoddi3+0x2b8>
 4015d04:	00804034 	movhi	r2,256
 4015d08:	10bfffc4 	addi	r2,r2,-1
 4015d0c:	11c10636 	bltu	r2,r7,4016128 <__umoddi3+0x56c>
 4015d10:	01000404 	movi	r4,16
 4015d14:	3904d83a 	srl	r2,r7,r4
 4015d18:	00c100b4 	movhi	r3,1026
 4015d1c:	18f43b04 	addi	r3,r3,-12052
 4015d20:	1885883a 	add	r2,r3,r2
 4015d24:	14c00003 	ldbu	r19,0(r2)
 4015d28:	00c00804 	movi	r3,32
 4015d2c:	9927883a 	add	r19,r19,r4
 4015d30:	1ce9c83a 	sub	r20,r3,r19
 4015d34:	a0005c1e 	bne	r20,zero,4015ea8 <__umoddi3+0x2ec>
 4015d38:	3c400136 	bltu	r7,r17,4015d40 <__umoddi3+0x184>
 4015d3c:	81810a36 	bltu	r16,r6,4016168 <__umoddi3+0x5ac>
 4015d40:	8185c83a 	sub	r2,r16,r6
 4015d44:	89e3c83a 	sub	r17,r17,r7
 4015d48:	8089803a 	cmpltu	r4,r16,r2
 4015d4c:	8939c83a 	sub	fp,r17,r4
 4015d50:	e007883a 	mov	r3,fp
 4015d54:	00003b06 	br	4015e44 <__umoddi3+0x288>
 4015d58:	3000041e 	bne	r6,zero,4015d6c <__umoddi3+0x1b0>
 4015d5c:	000b883a 	mov	r5,zero
 4015d60:	01000044 	movi	r4,1
 4015d64:	400b1200 	call	400b120 <__udivsi3>
 4015d68:	1027883a 	mov	r19,r2
 4015d6c:	00bfffd4 	movui	r2,65535
 4015d70:	14c0442e 	bgeu	r2,r19,4015e84 <__umoddi3+0x2c8>
 4015d74:	00804034 	movhi	r2,256
 4015d78:	10bfffc4 	addi	r2,r2,-1
 4015d7c:	14c0ec36 	bltu	r2,r19,4016130 <__umoddi3+0x574>
 4015d80:	00800404 	movi	r2,16
 4015d84:	9886d83a 	srl	r3,r19,r2
 4015d88:	010100b4 	movhi	r4,1026
 4015d8c:	21343b04 	addi	r4,r4,-12052
 4015d90:	20c7883a 	add	r3,r4,r3
 4015d94:	18c00003 	ldbu	r3,0(r3)
 4015d98:	1887883a 	add	r3,r3,r2
 4015d9c:	00800804 	movi	r2,32
 4015da0:	10e5c83a 	sub	r18,r2,r3
 4015da4:	9000ab1e 	bne	r18,zero,4016054 <__umoddi3+0x498>
 4015da8:	982cd43a 	srli	r22,r19,16
 4015dac:	8ce3c83a 	sub	r17,r17,r19
 4015db0:	9dffffcc 	andi	r23,r19,65535
 4015db4:	b00b883a 	mov	r5,r22
 4015db8:	8809883a 	mov	r4,r17
 4015dbc:	400b1840 	call	400b184 <__umodsi3>
 4015dc0:	b00b883a 	mov	r5,r22
 4015dc4:	8809883a 	mov	r4,r17
 4015dc8:	102b883a 	mov	r21,r2
 4015dcc:	400b1200 	call	400b120 <__udivsi3>
 4015dd0:	b80b883a 	mov	r5,r23
 4015dd4:	1009883a 	mov	r4,r2
 4015dd8:	400b1dc0 	call	400b1dc <__mulsi3>
 4015ddc:	a82a943a 	slli	r21,r21,16
 4015de0:	a006d43a 	srli	r3,r20,16
 4015de4:	1d46b03a 	or	r3,r3,r21
 4015de8:	1880042e 	bgeu	r3,r2,4015dfc <__umoddi3+0x240>
 4015dec:	1cc7883a 	add	r3,r3,r19
 4015df0:	1cc00236 	bltu	r3,r19,4015dfc <__umoddi3+0x240>
 4015df4:	1880012e 	bgeu	r3,r2,4015dfc <__umoddi3+0x240>
 4015df8:	1cc7883a 	add	r3,r3,r19
 4015dfc:	18a1c83a 	sub	r16,r3,r2
 4015e00:	b00b883a 	mov	r5,r22
 4015e04:	8009883a 	mov	r4,r16
 4015e08:	400b1840 	call	400b184 <__umodsi3>
 4015e0c:	1023883a 	mov	r17,r2
 4015e10:	b00b883a 	mov	r5,r22
 4015e14:	8009883a 	mov	r4,r16
 4015e18:	400b1200 	call	400b120 <__udivsi3>
 4015e1c:	8822943a 	slli	r17,r17,16
 4015e20:	b80b883a 	mov	r5,r23
 4015e24:	1009883a 	mov	r4,r2
 4015e28:	400b1dc0 	call	400b1dc <__mulsi3>
 4015e2c:	a53fffcc 	andi	r20,r20,65535
 4015e30:	a446b03a 	or	r3,r20,r17
 4015e34:	18bfac2e 	bgeu	r3,r2,4015ce8 <__alt_data_end+0xfc015ce8>
 4015e38:	003fa706 	br	4015cd8 <__alt_data_end+0xfc015cd8>
 4015e3c:	2005883a 	mov	r2,r4
 4015e40:	2807883a 	mov	r3,r5
 4015e44:	dfc00c17 	ldw	ra,48(sp)
 4015e48:	df000b17 	ldw	fp,44(sp)
 4015e4c:	ddc00a17 	ldw	r23,40(sp)
 4015e50:	dd800917 	ldw	r22,36(sp)
 4015e54:	dd400817 	ldw	r21,32(sp)
 4015e58:	dd000717 	ldw	r20,28(sp)
 4015e5c:	dcc00617 	ldw	r19,24(sp)
 4015e60:	dc800517 	ldw	r18,20(sp)
 4015e64:	dc400417 	ldw	r17,16(sp)
 4015e68:	dc000317 	ldw	r16,12(sp)
 4015e6c:	dec00d04 	addi	sp,sp,52
 4015e70:	f800283a 	ret
 4015e74:	04c03fc4 	movi	r19,255
 4015e78:	99c9803a 	cmpltu	r4,r19,r7
 4015e7c:	200890fa 	slli	r4,r4,3
 4015e80:	003fa406 	br	4015d14 <__alt_data_end+0xfc015d14>
 4015e84:	00803fc4 	movi	r2,255
 4015e88:	14c5803a 	cmpltu	r2,r2,r19
 4015e8c:	100490fa 	slli	r2,r2,3
 4015e90:	003fbc06 	br	4015d84 <__alt_data_end+0xfc015d84>
 4015e94:	00804034 	movhi	r2,256
 4015e98:	10bfffc4 	addi	r2,r2,-1
 4015e9c:	1180a636 	bltu	r2,r6,4016138 <__umoddi3+0x57c>
 4015ea0:	01000404 	movi	r4,16
 4015ea4:	003f5c06 	br	4015c18 <__alt_data_end+0xfc015c18>
 4015ea8:	3d0e983a 	sll	r7,r7,r20
 4015eac:	34ead83a 	srl	r21,r6,r19
 4015eb0:	8cc6d83a 	srl	r3,r17,r19
 4015eb4:	8d10983a 	sll	r8,r17,r20
 4015eb8:	3d6ab03a 	or	r21,r7,r21
 4015ebc:	a82cd43a 	srli	r22,r21,16
 4015ec0:	84e2d83a 	srl	r17,r16,r19
 4015ec4:	1809883a 	mov	r4,r3
 4015ec8:	b00b883a 	mov	r5,r22
 4015ecc:	8a22b03a 	or	r17,r17,r8
 4015ed0:	3524983a 	sll	r18,r6,r20
 4015ed4:	dc400015 	stw	r17,0(sp)
 4015ed8:	d8c00115 	stw	r3,4(sp)
 4015edc:	400b1840 	call	400b184 <__umodsi3>
 4015ee0:	d8c00117 	ldw	r3,4(sp)
 4015ee4:	b00b883a 	mov	r5,r22
 4015ee8:	1039883a 	mov	fp,r2
 4015eec:	1809883a 	mov	r4,r3
 4015ef0:	400b1200 	call	400b120 <__udivsi3>
 4015ef4:	adffffcc 	andi	r23,r21,65535
 4015ef8:	100b883a 	mov	r5,r2
 4015efc:	b809883a 	mov	r4,r23
 4015f00:	1023883a 	mov	r17,r2
 4015f04:	400b1dc0 	call	400b1dc <__mulsi3>
 4015f08:	d9400017 	ldw	r5,0(sp)
 4015f0c:	e008943a 	slli	r4,fp,16
 4015f10:	8520983a 	sll	r16,r16,r20
 4015f14:	2806d43a 	srli	r3,r5,16
 4015f18:	1906b03a 	or	r3,r3,r4
 4015f1c:	1880042e 	bgeu	r3,r2,4015f30 <__umoddi3+0x374>
 4015f20:	1d47883a 	add	r3,r3,r21
 4015f24:	893fffc4 	addi	r4,r17,-1
 4015f28:	1d40892e 	bgeu	r3,r21,4016150 <__umoddi3+0x594>
 4015f2c:	2023883a 	mov	r17,r4
 4015f30:	18b9c83a 	sub	fp,r3,r2
 4015f34:	b00b883a 	mov	r5,r22
 4015f38:	e009883a 	mov	r4,fp
 4015f3c:	400b1840 	call	400b184 <__umodsi3>
 4015f40:	b00b883a 	mov	r5,r22
 4015f44:	e009883a 	mov	r4,fp
 4015f48:	d8800215 	stw	r2,8(sp)
 4015f4c:	400b1200 	call	400b120 <__udivsi3>
 4015f50:	100b883a 	mov	r5,r2
 4015f54:	b809883a 	mov	r4,r23
 4015f58:	102d883a 	mov	r22,r2
 4015f5c:	400b1dc0 	call	400b1dc <__mulsi3>
 4015f60:	d9800217 	ldw	r6,8(sp)
 4015f64:	d8c00017 	ldw	r3,0(sp)
 4015f68:	300c943a 	slli	r6,r6,16
 4015f6c:	1a3fffcc 	andi	r8,r3,65535
 4015f70:	4190b03a 	or	r8,r8,r6
 4015f74:	4080042e 	bgeu	r8,r2,4015f88 <__umoddi3+0x3cc>
 4015f78:	4551883a 	add	r8,r8,r21
 4015f7c:	b0ffffc4 	addi	r3,r22,-1
 4015f80:	45406f2e 	bgeu	r8,r21,4016140 <__umoddi3+0x584>
 4015f84:	182d883a 	mov	r22,r3
 4015f88:	880e943a 	slli	r7,r17,16
 4015f8c:	9006d43a 	srli	r3,r18,16
 4015f90:	91bfffcc 	andi	r6,r18,65535
 4015f94:	3dacb03a 	or	r22,r7,r22
 4015f98:	b02ed43a 	srli	r23,r22,16
 4015f9c:	b5bfffcc 	andi	r22,r22,65535
 4015fa0:	300b883a 	mov	r5,r6
 4015fa4:	b009883a 	mov	r4,r22
 4015fa8:	40a3c83a 	sub	r17,r8,r2
 4015fac:	d8c00115 	stw	r3,4(sp)
 4015fb0:	d9800215 	stw	r6,8(sp)
 4015fb4:	400b1dc0 	call	400b1dc <__mulsi3>
 4015fb8:	d9800217 	ldw	r6,8(sp)
 4015fbc:	b809883a 	mov	r4,r23
 4015fc0:	1039883a 	mov	fp,r2
 4015fc4:	300b883a 	mov	r5,r6
 4015fc8:	400b1dc0 	call	400b1dc <__mulsi3>
 4015fcc:	d8c00117 	ldw	r3,4(sp)
 4015fd0:	b809883a 	mov	r4,r23
 4015fd4:	d8800215 	stw	r2,8(sp)
 4015fd8:	180b883a 	mov	r5,r3
 4015fdc:	400b1dc0 	call	400b1dc <__mulsi3>
 4015fe0:	d8c00117 	ldw	r3,4(sp)
 4015fe4:	b009883a 	mov	r4,r22
 4015fe8:	102f883a 	mov	r23,r2
 4015fec:	180b883a 	mov	r5,r3
 4015ff0:	400b1dc0 	call	400b1dc <__mulsi3>
 4015ff4:	d9800217 	ldw	r6,8(sp)
 4015ff8:	e006d43a 	srli	r3,fp,16
 4015ffc:	1185883a 	add	r2,r2,r6
 4016000:	1885883a 	add	r2,r3,r2
 4016004:	1180022e 	bgeu	r2,r6,4016010 <__umoddi3+0x454>
 4016008:	00c00074 	movhi	r3,1
 401600c:	b8ef883a 	add	r23,r23,r3
 4016010:	1006d43a 	srli	r3,r2,16
 4016014:	1004943a 	slli	r2,r2,16
 4016018:	e73fffcc 	andi	fp,fp,65535
 401601c:	1dc7883a 	add	r3,r3,r23
 4016020:	1739883a 	add	fp,r2,fp
 4016024:	88c03a36 	bltu	r17,r3,4016110 <__umoddi3+0x554>
 4016028:	88c05126 	beq	r17,r3,4016170 <__umoddi3+0x5b4>
 401602c:	88c9c83a 	sub	r4,r17,r3
 4016030:	e00f883a 	mov	r7,fp
 4016034:	81cfc83a 	sub	r7,r16,r7
 4016038:	81c7803a 	cmpltu	r3,r16,r7
 401603c:	20c7c83a 	sub	r3,r4,r3
 4016040:	1cc4983a 	sll	r2,r3,r19
 4016044:	3d0ed83a 	srl	r7,r7,r20
 4016048:	1d06d83a 	srl	r3,r3,r20
 401604c:	11c4b03a 	or	r2,r2,r7
 4016050:	003f7c06 	br	4015e44 <__alt_data_end+0xfc015e44>
 4016054:	9ca6983a 	sll	r19,r19,r18
 4016058:	88f8d83a 	srl	fp,r17,r3
 401605c:	80c4d83a 	srl	r2,r16,r3
 4016060:	982cd43a 	srli	r22,r19,16
 4016064:	8ca2983a 	sll	r17,r17,r18
 4016068:	e009883a 	mov	r4,fp
 401606c:	b00b883a 	mov	r5,r22
 4016070:	146ab03a 	or	r21,r2,r17
 4016074:	400b1840 	call	400b184 <__umodsi3>
 4016078:	b00b883a 	mov	r5,r22
 401607c:	e009883a 	mov	r4,fp
 4016080:	1029883a 	mov	r20,r2
 4016084:	9dffffcc 	andi	r23,r19,65535
 4016088:	400b1200 	call	400b120 <__udivsi3>
 401608c:	b809883a 	mov	r4,r23
 4016090:	100b883a 	mov	r5,r2
 4016094:	400b1dc0 	call	400b1dc <__mulsi3>
 4016098:	a008943a 	slli	r4,r20,16
 401609c:	a806d43a 	srli	r3,r21,16
 40160a0:	84a8983a 	sll	r20,r16,r18
 40160a4:	1906b03a 	or	r3,r3,r4
 40160a8:	1880042e 	bgeu	r3,r2,40160bc <__umoddi3+0x500>
 40160ac:	1cc7883a 	add	r3,r3,r19
 40160b0:	1cc00236 	bltu	r3,r19,40160bc <__umoddi3+0x500>
 40160b4:	1880012e 	bgeu	r3,r2,40160bc <__umoddi3+0x500>
 40160b8:	1cc7883a 	add	r3,r3,r19
 40160bc:	18a3c83a 	sub	r17,r3,r2
 40160c0:	b00b883a 	mov	r5,r22
 40160c4:	8809883a 	mov	r4,r17
 40160c8:	400b1840 	call	400b184 <__umodsi3>
 40160cc:	b00b883a 	mov	r5,r22
 40160d0:	8809883a 	mov	r4,r17
 40160d4:	1021883a 	mov	r16,r2
 40160d8:	400b1200 	call	400b120 <__udivsi3>
 40160dc:	100b883a 	mov	r5,r2
 40160e0:	b809883a 	mov	r4,r23
 40160e4:	8020943a 	slli	r16,r16,16
 40160e8:	400b1dc0 	call	400b1dc <__mulsi3>
 40160ec:	a8ffffcc 	andi	r3,r21,65535
 40160f0:	1c06b03a 	or	r3,r3,r16
 40160f4:	1880042e 	bgeu	r3,r2,4016108 <__umoddi3+0x54c>
 40160f8:	1cc7883a 	add	r3,r3,r19
 40160fc:	1cc00236 	bltu	r3,r19,4016108 <__umoddi3+0x54c>
 4016100:	1880012e 	bgeu	r3,r2,4016108 <__umoddi3+0x54c>
 4016104:	1cc7883a 	add	r3,r3,r19
 4016108:	18a3c83a 	sub	r17,r3,r2
 401610c:	003f2906 	br	4015db4 <__alt_data_end+0xfc015db4>
 4016110:	e48fc83a 	sub	r7,fp,r18
 4016114:	1d49c83a 	sub	r4,r3,r21
 4016118:	e1f9803a 	cmpltu	fp,fp,r7
 401611c:	2739c83a 	sub	fp,r4,fp
 4016120:	8f09c83a 	sub	r4,r17,fp
 4016124:	003fc306 	br	4016034 <__alt_data_end+0xfc016034>
 4016128:	01000604 	movi	r4,24
 401612c:	003ef906 	br	4015d14 <__alt_data_end+0xfc015d14>
 4016130:	00800604 	movi	r2,24
 4016134:	003f1306 	br	4015d84 <__alt_data_end+0xfc015d84>
 4016138:	01000604 	movi	r4,24
 401613c:	003eb606 	br	4015c18 <__alt_data_end+0xfc015c18>
 4016140:	40bf902e 	bgeu	r8,r2,4015f84 <__alt_data_end+0xfc015f84>
 4016144:	b5bfff84 	addi	r22,r22,-2
 4016148:	4551883a 	add	r8,r8,r21
 401614c:	003f8e06 	br	4015f88 <__alt_data_end+0xfc015f88>
 4016150:	18bf762e 	bgeu	r3,r2,4015f2c <__alt_data_end+0xfc015f2c>
 4016154:	8c7fff84 	addi	r17,r17,-2
 4016158:	1d47883a 	add	r3,r3,r21
 401615c:	003f7406 	br	4015f30 <__alt_data_end+0xfc015f30>
 4016160:	1cc7883a 	add	r3,r3,r19
 4016164:	003ecd06 	br	4015c9c <__alt_data_end+0xfc015c9c>
 4016168:	8005883a 	mov	r2,r16
 401616c:	003ef806 	br	4015d50 <__alt_data_end+0xfc015d50>
 4016170:	873fe736 	bltu	r16,fp,4016110 <__alt_data_end+0xfc016110>
 4016174:	e00f883a 	mov	r7,fp
 4016178:	0009883a 	mov	r4,zero
 401617c:	003fad06 	br	4016034 <__alt_data_end+0xfc016034>

04016180 <__adddf3>:
 4016180:	02c00434 	movhi	r11,16
 4016184:	5affffc4 	addi	r11,r11,-1
 4016188:	2806d7fa 	srli	r3,r5,31
 401618c:	2ad4703a 	and	r10,r5,r11
 4016190:	3ad2703a 	and	r9,r7,r11
 4016194:	3804d53a 	srli	r2,r7,20
 4016198:	3018d77a 	srli	r12,r6,29
 401619c:	280ad53a 	srli	r5,r5,20
 40161a0:	501490fa 	slli	r10,r10,3
 40161a4:	2010d77a 	srli	r8,r4,29
 40161a8:	481290fa 	slli	r9,r9,3
 40161ac:	380ed7fa 	srli	r7,r7,31
 40161b0:	defffb04 	addi	sp,sp,-20
 40161b4:	dc800215 	stw	r18,8(sp)
 40161b8:	dc400115 	stw	r17,4(sp)
 40161bc:	dc000015 	stw	r16,0(sp)
 40161c0:	dfc00415 	stw	ra,16(sp)
 40161c4:	dcc00315 	stw	r19,12(sp)
 40161c8:	1c803fcc 	andi	r18,r3,255
 40161cc:	2c01ffcc 	andi	r16,r5,2047
 40161d0:	5210b03a 	or	r8,r10,r8
 40161d4:	202290fa 	slli	r17,r4,3
 40161d8:	1081ffcc 	andi	r2,r2,2047
 40161dc:	4b12b03a 	or	r9,r9,r12
 40161e0:	300c90fa 	slli	r6,r6,3
 40161e4:	91c07526 	beq	r18,r7,40163bc <__adddf3+0x23c>
 40161e8:	8087c83a 	sub	r3,r16,r2
 40161ec:	00c0ab0e 	bge	zero,r3,401649c <__adddf3+0x31c>
 40161f0:	10002a1e 	bne	r2,zero,401629c <__adddf3+0x11c>
 40161f4:	4984b03a 	or	r2,r9,r6
 40161f8:	1000961e 	bne	r2,zero,4016454 <__adddf3+0x2d4>
 40161fc:	888001cc 	andi	r2,r17,7
 4016200:	10000726 	beq	r2,zero,4016220 <__adddf3+0xa0>
 4016204:	888003cc 	andi	r2,r17,15
 4016208:	00c00104 	movi	r3,4
 401620c:	10c00426 	beq	r2,r3,4016220 <__adddf3+0xa0>
 4016210:	88c7883a 	add	r3,r17,r3
 4016214:	1c63803a 	cmpltu	r17,r3,r17
 4016218:	4451883a 	add	r8,r8,r17
 401621c:	1823883a 	mov	r17,r3
 4016220:	4080202c 	andhi	r2,r8,128
 4016224:	10005926 	beq	r2,zero,401638c <__adddf3+0x20c>
 4016228:	84000044 	addi	r16,r16,1
 401622c:	0081ffc4 	movi	r2,2047
 4016230:	8080ba26 	beq	r16,r2,401651c <__adddf3+0x39c>
 4016234:	00bfe034 	movhi	r2,65408
 4016238:	10bfffc4 	addi	r2,r2,-1
 401623c:	4090703a 	and	r8,r8,r2
 4016240:	4004977a 	slli	r2,r8,29
 4016244:	4010927a 	slli	r8,r8,9
 4016248:	8822d0fa 	srli	r17,r17,3
 401624c:	8401ffcc 	andi	r16,r16,2047
 4016250:	4010d33a 	srli	r8,r8,12
 4016254:	9007883a 	mov	r3,r18
 4016258:	1444b03a 	or	r2,r2,r17
 401625c:	8401ffcc 	andi	r16,r16,2047
 4016260:	8020953a 	slli	r16,r16,20
 4016264:	18c03fcc 	andi	r3,r3,255
 4016268:	01000434 	movhi	r4,16
 401626c:	213fffc4 	addi	r4,r4,-1
 4016270:	180697fa 	slli	r3,r3,31
 4016274:	4110703a 	and	r8,r8,r4
 4016278:	4410b03a 	or	r8,r8,r16
 401627c:	40c6b03a 	or	r3,r8,r3
 4016280:	dfc00417 	ldw	ra,16(sp)
 4016284:	dcc00317 	ldw	r19,12(sp)
 4016288:	dc800217 	ldw	r18,8(sp)
 401628c:	dc400117 	ldw	r17,4(sp)
 4016290:	dc000017 	ldw	r16,0(sp)
 4016294:	dec00504 	addi	sp,sp,20
 4016298:	f800283a 	ret
 401629c:	0081ffc4 	movi	r2,2047
 40162a0:	80bfd626 	beq	r16,r2,40161fc <__alt_data_end+0xfc0161fc>
 40162a4:	4a402034 	orhi	r9,r9,128
 40162a8:	00800e04 	movi	r2,56
 40162ac:	10c09f16 	blt	r2,r3,401652c <__adddf3+0x3ac>
 40162b0:	008007c4 	movi	r2,31
 40162b4:	10c0c216 	blt	r2,r3,40165c0 <__adddf3+0x440>
 40162b8:	00800804 	movi	r2,32
 40162bc:	10c5c83a 	sub	r2,r2,r3
 40162c0:	488a983a 	sll	r5,r9,r2
 40162c4:	30c8d83a 	srl	r4,r6,r3
 40162c8:	3084983a 	sll	r2,r6,r2
 40162cc:	48c6d83a 	srl	r3,r9,r3
 40162d0:	290cb03a 	or	r6,r5,r4
 40162d4:	1004c03a 	cmpne	r2,r2,zero
 40162d8:	308cb03a 	or	r6,r6,r2
 40162dc:	898dc83a 	sub	r6,r17,r6
 40162e0:	89a3803a 	cmpltu	r17,r17,r6
 40162e4:	40d1c83a 	sub	r8,r8,r3
 40162e8:	4451c83a 	sub	r8,r8,r17
 40162ec:	3023883a 	mov	r17,r6
 40162f0:	4080202c 	andhi	r2,r8,128
 40162f4:	10002326 	beq	r2,zero,4016384 <__adddf3+0x204>
 40162f8:	04c02034 	movhi	r19,128
 40162fc:	9cffffc4 	addi	r19,r19,-1
 4016300:	44e6703a 	and	r19,r8,r19
 4016304:	98007626 	beq	r19,zero,40164e0 <__adddf3+0x360>
 4016308:	9809883a 	mov	r4,r19
 401630c:	40189c00 	call	40189c0 <__clzsi2>
 4016310:	10fffe04 	addi	r3,r2,-8
 4016314:	010007c4 	movi	r4,31
 4016318:	20c07716 	blt	r4,r3,40164f8 <__adddf3+0x378>
 401631c:	00800804 	movi	r2,32
 4016320:	10c5c83a 	sub	r2,r2,r3
 4016324:	8884d83a 	srl	r2,r17,r2
 4016328:	98d0983a 	sll	r8,r19,r3
 401632c:	88e2983a 	sll	r17,r17,r3
 4016330:	1204b03a 	or	r2,r2,r8
 4016334:	1c007416 	blt	r3,r16,4016508 <__adddf3+0x388>
 4016338:	1c21c83a 	sub	r16,r3,r16
 401633c:	82000044 	addi	r8,r16,1
 4016340:	00c007c4 	movi	r3,31
 4016344:	1a009116 	blt	r3,r8,401658c <__adddf3+0x40c>
 4016348:	00c00804 	movi	r3,32
 401634c:	1a07c83a 	sub	r3,r3,r8
 4016350:	8a08d83a 	srl	r4,r17,r8
 4016354:	88e2983a 	sll	r17,r17,r3
 4016358:	10c6983a 	sll	r3,r2,r3
 401635c:	1210d83a 	srl	r8,r2,r8
 4016360:	8804c03a 	cmpne	r2,r17,zero
 4016364:	1906b03a 	or	r3,r3,r4
 4016368:	18a2b03a 	or	r17,r3,r2
 401636c:	0021883a 	mov	r16,zero
 4016370:	003fa206 	br	40161fc <__alt_data_end+0xfc0161fc>
 4016374:	1890b03a 	or	r8,r3,r2
 4016378:	40017d26 	beq	r8,zero,4016970 <__adddf3+0x7f0>
 401637c:	1011883a 	mov	r8,r2
 4016380:	1823883a 	mov	r17,r3
 4016384:	888001cc 	andi	r2,r17,7
 4016388:	103f9e1e 	bne	r2,zero,4016204 <__alt_data_end+0xfc016204>
 401638c:	4004977a 	slli	r2,r8,29
 4016390:	8822d0fa 	srli	r17,r17,3
 4016394:	4010d0fa 	srli	r8,r8,3
 4016398:	9007883a 	mov	r3,r18
 401639c:	1444b03a 	or	r2,r2,r17
 40163a0:	0101ffc4 	movi	r4,2047
 40163a4:	81002426 	beq	r16,r4,4016438 <__adddf3+0x2b8>
 40163a8:	8120703a 	and	r16,r16,r4
 40163ac:	01000434 	movhi	r4,16
 40163b0:	213fffc4 	addi	r4,r4,-1
 40163b4:	4110703a 	and	r8,r8,r4
 40163b8:	003fa806 	br	401625c <__alt_data_end+0xfc01625c>
 40163bc:	8089c83a 	sub	r4,r16,r2
 40163c0:	01005e0e 	bge	zero,r4,401653c <__adddf3+0x3bc>
 40163c4:	10002b26 	beq	r2,zero,4016474 <__adddf3+0x2f4>
 40163c8:	0081ffc4 	movi	r2,2047
 40163cc:	80bf8b26 	beq	r16,r2,40161fc <__alt_data_end+0xfc0161fc>
 40163d0:	4a402034 	orhi	r9,r9,128
 40163d4:	00800e04 	movi	r2,56
 40163d8:	1100a40e 	bge	r2,r4,401666c <__adddf3+0x4ec>
 40163dc:	498cb03a 	or	r6,r9,r6
 40163e0:	300ac03a 	cmpne	r5,r6,zero
 40163e4:	0013883a 	mov	r9,zero
 40163e8:	2c4b883a 	add	r5,r5,r17
 40163ec:	2c63803a 	cmpltu	r17,r5,r17
 40163f0:	4a11883a 	add	r8,r9,r8
 40163f4:	8a11883a 	add	r8,r17,r8
 40163f8:	2823883a 	mov	r17,r5
 40163fc:	4080202c 	andhi	r2,r8,128
 4016400:	103fe026 	beq	r2,zero,4016384 <__alt_data_end+0xfc016384>
 4016404:	84000044 	addi	r16,r16,1
 4016408:	0081ffc4 	movi	r2,2047
 401640c:	8080d226 	beq	r16,r2,4016758 <__adddf3+0x5d8>
 4016410:	00bfe034 	movhi	r2,65408
 4016414:	10bfffc4 	addi	r2,r2,-1
 4016418:	4090703a 	and	r8,r8,r2
 401641c:	880ad07a 	srli	r5,r17,1
 4016420:	400897fa 	slli	r4,r8,31
 4016424:	88c0004c 	andi	r3,r17,1
 4016428:	28e2b03a 	or	r17,r5,r3
 401642c:	4010d07a 	srli	r8,r8,1
 4016430:	2462b03a 	or	r17,r4,r17
 4016434:	003f7106 	br	40161fc <__alt_data_end+0xfc0161fc>
 4016438:	4088b03a 	or	r4,r8,r2
 401643c:	20014526 	beq	r4,zero,4016954 <__adddf3+0x7d4>
 4016440:	01000434 	movhi	r4,16
 4016444:	42000234 	orhi	r8,r8,8
 4016448:	213fffc4 	addi	r4,r4,-1
 401644c:	4110703a 	and	r8,r8,r4
 4016450:	003f8206 	br	401625c <__alt_data_end+0xfc01625c>
 4016454:	18ffffc4 	addi	r3,r3,-1
 4016458:	1800491e 	bne	r3,zero,4016580 <__adddf3+0x400>
 401645c:	898bc83a 	sub	r5,r17,r6
 4016460:	8963803a 	cmpltu	r17,r17,r5
 4016464:	4251c83a 	sub	r8,r8,r9
 4016468:	4451c83a 	sub	r8,r8,r17
 401646c:	2823883a 	mov	r17,r5
 4016470:	003f9f06 	br	40162f0 <__alt_data_end+0xfc0162f0>
 4016474:	4984b03a 	or	r2,r9,r6
 4016478:	103f6026 	beq	r2,zero,40161fc <__alt_data_end+0xfc0161fc>
 401647c:	213fffc4 	addi	r4,r4,-1
 4016480:	2000931e 	bne	r4,zero,40166d0 <__adddf3+0x550>
 4016484:	898d883a 	add	r6,r17,r6
 4016488:	3463803a 	cmpltu	r17,r6,r17
 401648c:	4251883a 	add	r8,r8,r9
 4016490:	8a11883a 	add	r8,r17,r8
 4016494:	3023883a 	mov	r17,r6
 4016498:	003fd806 	br	40163fc <__alt_data_end+0xfc0163fc>
 401649c:	1800541e 	bne	r3,zero,40165f0 <__adddf3+0x470>
 40164a0:	80800044 	addi	r2,r16,1
 40164a4:	1081ffcc 	andi	r2,r2,2047
 40164a8:	00c00044 	movi	r3,1
 40164ac:	1880a00e 	bge	r3,r2,4016730 <__adddf3+0x5b0>
 40164b0:	8989c83a 	sub	r4,r17,r6
 40164b4:	8905803a 	cmpltu	r2,r17,r4
 40164b8:	4267c83a 	sub	r19,r8,r9
 40164bc:	98a7c83a 	sub	r19,r19,r2
 40164c0:	9880202c 	andhi	r2,r19,128
 40164c4:	10006326 	beq	r2,zero,4016654 <__adddf3+0x4d4>
 40164c8:	3463c83a 	sub	r17,r6,r17
 40164cc:	4a07c83a 	sub	r3,r9,r8
 40164d0:	344d803a 	cmpltu	r6,r6,r17
 40164d4:	19a7c83a 	sub	r19,r3,r6
 40164d8:	3825883a 	mov	r18,r7
 40164dc:	983f8a1e 	bne	r19,zero,4016308 <__alt_data_end+0xfc016308>
 40164e0:	8809883a 	mov	r4,r17
 40164e4:	40189c00 	call	40189c0 <__clzsi2>
 40164e8:	10800804 	addi	r2,r2,32
 40164ec:	10fffe04 	addi	r3,r2,-8
 40164f0:	010007c4 	movi	r4,31
 40164f4:	20ff890e 	bge	r4,r3,401631c <__alt_data_end+0xfc01631c>
 40164f8:	10bff604 	addi	r2,r2,-40
 40164fc:	8884983a 	sll	r2,r17,r2
 4016500:	0023883a 	mov	r17,zero
 4016504:	1c3f8c0e 	bge	r3,r16,4016338 <__alt_data_end+0xfc016338>
 4016508:	023fe034 	movhi	r8,65408
 401650c:	423fffc4 	addi	r8,r8,-1
 4016510:	80e1c83a 	sub	r16,r16,r3
 4016514:	1210703a 	and	r8,r2,r8
 4016518:	003f3806 	br	40161fc <__alt_data_end+0xfc0161fc>
 401651c:	9007883a 	mov	r3,r18
 4016520:	0011883a 	mov	r8,zero
 4016524:	0005883a 	mov	r2,zero
 4016528:	003f4c06 	br	401625c <__alt_data_end+0xfc01625c>
 401652c:	498cb03a 	or	r6,r9,r6
 4016530:	300cc03a 	cmpne	r6,r6,zero
 4016534:	0007883a 	mov	r3,zero
 4016538:	003f6806 	br	40162dc <__alt_data_end+0xfc0162dc>
 401653c:	20009c1e 	bne	r4,zero,40167b0 <__adddf3+0x630>
 4016540:	80800044 	addi	r2,r16,1
 4016544:	1141ffcc 	andi	r5,r2,2047
 4016548:	01000044 	movi	r4,1
 401654c:	2140670e 	bge	r4,r5,40166ec <__adddf3+0x56c>
 4016550:	0101ffc4 	movi	r4,2047
 4016554:	11007f26 	beq	r2,r4,4016754 <__adddf3+0x5d4>
 4016558:	898d883a 	add	r6,r17,r6
 401655c:	4247883a 	add	r3,r8,r9
 4016560:	3451803a 	cmpltu	r8,r6,r17
 4016564:	40d1883a 	add	r8,r8,r3
 4016568:	402297fa 	slli	r17,r8,31
 401656c:	300cd07a 	srli	r6,r6,1
 4016570:	4010d07a 	srli	r8,r8,1
 4016574:	1021883a 	mov	r16,r2
 4016578:	89a2b03a 	or	r17,r17,r6
 401657c:	003f1f06 	br	40161fc <__alt_data_end+0xfc0161fc>
 4016580:	0081ffc4 	movi	r2,2047
 4016584:	80bf481e 	bne	r16,r2,40162a8 <__alt_data_end+0xfc0162a8>
 4016588:	003f1c06 	br	40161fc <__alt_data_end+0xfc0161fc>
 401658c:	843ff844 	addi	r16,r16,-31
 4016590:	01000804 	movi	r4,32
 4016594:	1406d83a 	srl	r3,r2,r16
 4016598:	41005026 	beq	r8,r4,40166dc <__adddf3+0x55c>
 401659c:	01001004 	movi	r4,64
 40165a0:	2211c83a 	sub	r8,r4,r8
 40165a4:	1204983a 	sll	r2,r2,r8
 40165a8:	88a2b03a 	or	r17,r17,r2
 40165ac:	8822c03a 	cmpne	r17,r17,zero
 40165b0:	1c62b03a 	or	r17,r3,r17
 40165b4:	0011883a 	mov	r8,zero
 40165b8:	0021883a 	mov	r16,zero
 40165bc:	003f7106 	br	4016384 <__alt_data_end+0xfc016384>
 40165c0:	193ff804 	addi	r4,r3,-32
 40165c4:	00800804 	movi	r2,32
 40165c8:	4908d83a 	srl	r4,r9,r4
 40165cc:	18804526 	beq	r3,r2,40166e4 <__adddf3+0x564>
 40165d0:	00801004 	movi	r2,64
 40165d4:	10c5c83a 	sub	r2,r2,r3
 40165d8:	4886983a 	sll	r3,r9,r2
 40165dc:	198cb03a 	or	r6,r3,r6
 40165e0:	300cc03a 	cmpne	r6,r6,zero
 40165e4:	218cb03a 	or	r6,r4,r6
 40165e8:	0007883a 	mov	r3,zero
 40165ec:	003f3b06 	br	40162dc <__alt_data_end+0xfc0162dc>
 40165f0:	80002a26 	beq	r16,zero,401669c <__adddf3+0x51c>
 40165f4:	0101ffc4 	movi	r4,2047
 40165f8:	11006826 	beq	r2,r4,401679c <__adddf3+0x61c>
 40165fc:	00c7c83a 	sub	r3,zero,r3
 4016600:	42002034 	orhi	r8,r8,128
 4016604:	01000e04 	movi	r4,56
 4016608:	20c07c16 	blt	r4,r3,40167fc <__adddf3+0x67c>
 401660c:	010007c4 	movi	r4,31
 4016610:	20c0da16 	blt	r4,r3,401697c <__adddf3+0x7fc>
 4016614:	01000804 	movi	r4,32
 4016618:	20c9c83a 	sub	r4,r4,r3
 401661c:	4114983a 	sll	r10,r8,r4
 4016620:	88cad83a 	srl	r5,r17,r3
 4016624:	8908983a 	sll	r4,r17,r4
 4016628:	40c6d83a 	srl	r3,r8,r3
 401662c:	5162b03a 	or	r17,r10,r5
 4016630:	2008c03a 	cmpne	r4,r4,zero
 4016634:	8922b03a 	or	r17,r17,r4
 4016638:	3463c83a 	sub	r17,r6,r17
 401663c:	48c7c83a 	sub	r3,r9,r3
 4016640:	344d803a 	cmpltu	r6,r6,r17
 4016644:	1991c83a 	sub	r8,r3,r6
 4016648:	1021883a 	mov	r16,r2
 401664c:	3825883a 	mov	r18,r7
 4016650:	003f2706 	br	40162f0 <__alt_data_end+0xfc0162f0>
 4016654:	24d0b03a 	or	r8,r4,r19
 4016658:	40001b1e 	bne	r8,zero,40166c8 <__adddf3+0x548>
 401665c:	0005883a 	mov	r2,zero
 4016660:	0007883a 	mov	r3,zero
 4016664:	0021883a 	mov	r16,zero
 4016668:	003f4d06 	br	40163a0 <__alt_data_end+0xfc0163a0>
 401666c:	008007c4 	movi	r2,31
 4016670:	11003c16 	blt	r2,r4,4016764 <__adddf3+0x5e4>
 4016674:	00800804 	movi	r2,32
 4016678:	1105c83a 	sub	r2,r2,r4
 401667c:	488e983a 	sll	r7,r9,r2
 4016680:	310ad83a 	srl	r5,r6,r4
 4016684:	3084983a 	sll	r2,r6,r2
 4016688:	4912d83a 	srl	r9,r9,r4
 401668c:	394ab03a 	or	r5,r7,r5
 4016690:	1004c03a 	cmpne	r2,r2,zero
 4016694:	288ab03a 	or	r5,r5,r2
 4016698:	003f5306 	br	40163e8 <__alt_data_end+0xfc0163e8>
 401669c:	4448b03a 	or	r4,r8,r17
 40166a0:	20003e26 	beq	r4,zero,401679c <__adddf3+0x61c>
 40166a4:	00c6303a 	nor	r3,zero,r3
 40166a8:	18003a1e 	bne	r3,zero,4016794 <__adddf3+0x614>
 40166ac:	3463c83a 	sub	r17,r6,r17
 40166b0:	4a07c83a 	sub	r3,r9,r8
 40166b4:	344d803a 	cmpltu	r6,r6,r17
 40166b8:	1991c83a 	sub	r8,r3,r6
 40166bc:	1021883a 	mov	r16,r2
 40166c0:	3825883a 	mov	r18,r7
 40166c4:	003f0a06 	br	40162f0 <__alt_data_end+0xfc0162f0>
 40166c8:	2023883a 	mov	r17,r4
 40166cc:	003f0d06 	br	4016304 <__alt_data_end+0xfc016304>
 40166d0:	0081ffc4 	movi	r2,2047
 40166d4:	80bf3f1e 	bne	r16,r2,40163d4 <__alt_data_end+0xfc0163d4>
 40166d8:	003ec806 	br	40161fc <__alt_data_end+0xfc0161fc>
 40166dc:	0005883a 	mov	r2,zero
 40166e0:	003fb106 	br	40165a8 <__alt_data_end+0xfc0165a8>
 40166e4:	0007883a 	mov	r3,zero
 40166e8:	003fbc06 	br	40165dc <__alt_data_end+0xfc0165dc>
 40166ec:	4444b03a 	or	r2,r8,r17
 40166f0:	8000871e 	bne	r16,zero,4016910 <__adddf3+0x790>
 40166f4:	1000ba26 	beq	r2,zero,40169e0 <__adddf3+0x860>
 40166f8:	4984b03a 	or	r2,r9,r6
 40166fc:	103ebf26 	beq	r2,zero,40161fc <__alt_data_end+0xfc0161fc>
 4016700:	8985883a 	add	r2,r17,r6
 4016704:	4247883a 	add	r3,r8,r9
 4016708:	1451803a 	cmpltu	r8,r2,r17
 401670c:	40d1883a 	add	r8,r8,r3
 4016710:	40c0202c 	andhi	r3,r8,128
 4016714:	1023883a 	mov	r17,r2
 4016718:	183f1a26 	beq	r3,zero,4016384 <__alt_data_end+0xfc016384>
 401671c:	00bfe034 	movhi	r2,65408
 4016720:	10bfffc4 	addi	r2,r2,-1
 4016724:	2021883a 	mov	r16,r4
 4016728:	4090703a 	and	r8,r8,r2
 401672c:	003eb306 	br	40161fc <__alt_data_end+0xfc0161fc>
 4016730:	4444b03a 	or	r2,r8,r17
 4016734:	8000291e 	bne	r16,zero,40167dc <__adddf3+0x65c>
 4016738:	10004b1e 	bne	r2,zero,4016868 <__adddf3+0x6e8>
 401673c:	4990b03a 	or	r8,r9,r6
 4016740:	40008b26 	beq	r8,zero,4016970 <__adddf3+0x7f0>
 4016744:	4811883a 	mov	r8,r9
 4016748:	3023883a 	mov	r17,r6
 401674c:	3825883a 	mov	r18,r7
 4016750:	003eaa06 	br	40161fc <__alt_data_end+0xfc0161fc>
 4016754:	1021883a 	mov	r16,r2
 4016758:	0011883a 	mov	r8,zero
 401675c:	0005883a 	mov	r2,zero
 4016760:	003f0f06 	br	40163a0 <__alt_data_end+0xfc0163a0>
 4016764:	217ff804 	addi	r5,r4,-32
 4016768:	00800804 	movi	r2,32
 401676c:	494ad83a 	srl	r5,r9,r5
 4016770:	20807d26 	beq	r4,r2,4016968 <__adddf3+0x7e8>
 4016774:	00801004 	movi	r2,64
 4016778:	1109c83a 	sub	r4,r2,r4
 401677c:	4912983a 	sll	r9,r9,r4
 4016780:	498cb03a 	or	r6,r9,r6
 4016784:	300cc03a 	cmpne	r6,r6,zero
 4016788:	298ab03a 	or	r5,r5,r6
 401678c:	0013883a 	mov	r9,zero
 4016790:	003f1506 	br	40163e8 <__alt_data_end+0xfc0163e8>
 4016794:	0101ffc4 	movi	r4,2047
 4016798:	113f9a1e 	bne	r2,r4,4016604 <__alt_data_end+0xfc016604>
 401679c:	4811883a 	mov	r8,r9
 40167a0:	3023883a 	mov	r17,r6
 40167a4:	1021883a 	mov	r16,r2
 40167a8:	3825883a 	mov	r18,r7
 40167ac:	003e9306 	br	40161fc <__alt_data_end+0xfc0161fc>
 40167b0:	8000161e 	bne	r16,zero,401680c <__adddf3+0x68c>
 40167b4:	444ab03a 	or	r5,r8,r17
 40167b8:	28005126 	beq	r5,zero,4016900 <__adddf3+0x780>
 40167bc:	0108303a 	nor	r4,zero,r4
 40167c0:	20004d1e 	bne	r4,zero,40168f8 <__adddf3+0x778>
 40167c4:	89a3883a 	add	r17,r17,r6
 40167c8:	4253883a 	add	r9,r8,r9
 40167cc:	898d803a 	cmpltu	r6,r17,r6
 40167d0:	3251883a 	add	r8,r6,r9
 40167d4:	1021883a 	mov	r16,r2
 40167d8:	003f0806 	br	40163fc <__alt_data_end+0xfc0163fc>
 40167dc:	1000301e 	bne	r2,zero,40168a0 <__adddf3+0x720>
 40167e0:	4984b03a 	or	r2,r9,r6
 40167e4:	10007126 	beq	r2,zero,40169ac <__adddf3+0x82c>
 40167e8:	4811883a 	mov	r8,r9
 40167ec:	3023883a 	mov	r17,r6
 40167f0:	3825883a 	mov	r18,r7
 40167f4:	0401ffc4 	movi	r16,2047
 40167f8:	003e8006 	br	40161fc <__alt_data_end+0xfc0161fc>
 40167fc:	4462b03a 	or	r17,r8,r17
 4016800:	8822c03a 	cmpne	r17,r17,zero
 4016804:	0007883a 	mov	r3,zero
 4016808:	003f8b06 	br	4016638 <__alt_data_end+0xfc016638>
 401680c:	0141ffc4 	movi	r5,2047
 4016810:	11403b26 	beq	r2,r5,4016900 <__adddf3+0x780>
 4016814:	0109c83a 	sub	r4,zero,r4
 4016818:	42002034 	orhi	r8,r8,128
 401681c:	01400e04 	movi	r5,56
 4016820:	29006716 	blt	r5,r4,40169c0 <__adddf3+0x840>
 4016824:	014007c4 	movi	r5,31
 4016828:	29007016 	blt	r5,r4,40169ec <__adddf3+0x86c>
 401682c:	01400804 	movi	r5,32
 4016830:	290bc83a 	sub	r5,r5,r4
 4016834:	4154983a 	sll	r10,r8,r5
 4016838:	890ed83a 	srl	r7,r17,r4
 401683c:	894a983a 	sll	r5,r17,r5
 4016840:	4108d83a 	srl	r4,r8,r4
 4016844:	51e2b03a 	or	r17,r10,r7
 4016848:	280ac03a 	cmpne	r5,r5,zero
 401684c:	8962b03a 	or	r17,r17,r5
 4016850:	89a3883a 	add	r17,r17,r6
 4016854:	2253883a 	add	r9,r4,r9
 4016858:	898d803a 	cmpltu	r6,r17,r6
 401685c:	3251883a 	add	r8,r6,r9
 4016860:	1021883a 	mov	r16,r2
 4016864:	003ee506 	br	40163fc <__alt_data_end+0xfc0163fc>
 4016868:	4984b03a 	or	r2,r9,r6
 401686c:	103e6326 	beq	r2,zero,40161fc <__alt_data_end+0xfc0161fc>
 4016870:	8987c83a 	sub	r3,r17,r6
 4016874:	88c9803a 	cmpltu	r4,r17,r3
 4016878:	4245c83a 	sub	r2,r8,r9
 401687c:	1105c83a 	sub	r2,r2,r4
 4016880:	1100202c 	andhi	r4,r2,128
 4016884:	203ebb26 	beq	r4,zero,4016374 <__alt_data_end+0xfc016374>
 4016888:	3463c83a 	sub	r17,r6,r17
 401688c:	4a07c83a 	sub	r3,r9,r8
 4016890:	344d803a 	cmpltu	r6,r6,r17
 4016894:	1991c83a 	sub	r8,r3,r6
 4016898:	3825883a 	mov	r18,r7
 401689c:	003e5706 	br	40161fc <__alt_data_end+0xfc0161fc>
 40168a0:	4984b03a 	or	r2,r9,r6
 40168a4:	10002e26 	beq	r2,zero,4016960 <__adddf3+0x7e0>
 40168a8:	4004d0fa 	srli	r2,r8,3
 40168ac:	8822d0fa 	srli	r17,r17,3
 40168b0:	4010977a 	slli	r8,r8,29
 40168b4:	10c0022c 	andhi	r3,r2,8
 40168b8:	4462b03a 	or	r17,r8,r17
 40168bc:	18000826 	beq	r3,zero,40168e0 <__adddf3+0x760>
 40168c0:	4808d0fa 	srli	r4,r9,3
 40168c4:	20c0022c 	andhi	r3,r4,8
 40168c8:	1800051e 	bne	r3,zero,40168e0 <__adddf3+0x760>
 40168cc:	300cd0fa 	srli	r6,r6,3
 40168d0:	4806977a 	slli	r3,r9,29
 40168d4:	2005883a 	mov	r2,r4
 40168d8:	3825883a 	mov	r18,r7
 40168dc:	19a2b03a 	or	r17,r3,r6
 40168e0:	8810d77a 	srli	r8,r17,29
 40168e4:	100490fa 	slli	r2,r2,3
 40168e8:	882290fa 	slli	r17,r17,3
 40168ec:	0401ffc4 	movi	r16,2047
 40168f0:	4090b03a 	or	r8,r8,r2
 40168f4:	003e4106 	br	40161fc <__alt_data_end+0xfc0161fc>
 40168f8:	0141ffc4 	movi	r5,2047
 40168fc:	117fc71e 	bne	r2,r5,401681c <__alt_data_end+0xfc01681c>
 4016900:	4811883a 	mov	r8,r9
 4016904:	3023883a 	mov	r17,r6
 4016908:	1021883a 	mov	r16,r2
 401690c:	003e3b06 	br	40161fc <__alt_data_end+0xfc0161fc>
 4016910:	10002f26 	beq	r2,zero,40169d0 <__adddf3+0x850>
 4016914:	4984b03a 	or	r2,r9,r6
 4016918:	10001126 	beq	r2,zero,4016960 <__adddf3+0x7e0>
 401691c:	4004d0fa 	srli	r2,r8,3
 4016920:	8822d0fa 	srli	r17,r17,3
 4016924:	4010977a 	slli	r8,r8,29
 4016928:	10c0022c 	andhi	r3,r2,8
 401692c:	4462b03a 	or	r17,r8,r17
 4016930:	183feb26 	beq	r3,zero,40168e0 <__alt_data_end+0xfc0168e0>
 4016934:	4808d0fa 	srli	r4,r9,3
 4016938:	20c0022c 	andhi	r3,r4,8
 401693c:	183fe81e 	bne	r3,zero,40168e0 <__alt_data_end+0xfc0168e0>
 4016940:	300cd0fa 	srli	r6,r6,3
 4016944:	4806977a 	slli	r3,r9,29
 4016948:	2005883a 	mov	r2,r4
 401694c:	19a2b03a 	or	r17,r3,r6
 4016950:	003fe306 	br	40168e0 <__alt_data_end+0xfc0168e0>
 4016954:	0011883a 	mov	r8,zero
 4016958:	0005883a 	mov	r2,zero
 401695c:	003e3f06 	br	401625c <__alt_data_end+0xfc01625c>
 4016960:	0401ffc4 	movi	r16,2047
 4016964:	003e2506 	br	40161fc <__alt_data_end+0xfc0161fc>
 4016968:	0013883a 	mov	r9,zero
 401696c:	003f8406 	br	4016780 <__alt_data_end+0xfc016780>
 4016970:	0005883a 	mov	r2,zero
 4016974:	0007883a 	mov	r3,zero
 4016978:	003e8906 	br	40163a0 <__alt_data_end+0xfc0163a0>
 401697c:	197ff804 	addi	r5,r3,-32
 4016980:	01000804 	movi	r4,32
 4016984:	414ad83a 	srl	r5,r8,r5
 4016988:	19002426 	beq	r3,r4,4016a1c <__adddf3+0x89c>
 401698c:	01001004 	movi	r4,64
 4016990:	20c7c83a 	sub	r3,r4,r3
 4016994:	40c6983a 	sll	r3,r8,r3
 4016998:	1c46b03a 	or	r3,r3,r17
 401699c:	1806c03a 	cmpne	r3,r3,zero
 40169a0:	28e2b03a 	or	r17,r5,r3
 40169a4:	0007883a 	mov	r3,zero
 40169a8:	003f2306 	br	4016638 <__alt_data_end+0xfc016638>
 40169ac:	0007883a 	mov	r3,zero
 40169b0:	5811883a 	mov	r8,r11
 40169b4:	00bfffc4 	movi	r2,-1
 40169b8:	0401ffc4 	movi	r16,2047
 40169bc:	003e7806 	br	40163a0 <__alt_data_end+0xfc0163a0>
 40169c0:	4462b03a 	or	r17,r8,r17
 40169c4:	8822c03a 	cmpne	r17,r17,zero
 40169c8:	0009883a 	mov	r4,zero
 40169cc:	003fa006 	br	4016850 <__alt_data_end+0xfc016850>
 40169d0:	4811883a 	mov	r8,r9
 40169d4:	3023883a 	mov	r17,r6
 40169d8:	0401ffc4 	movi	r16,2047
 40169dc:	003e0706 	br	40161fc <__alt_data_end+0xfc0161fc>
 40169e0:	4811883a 	mov	r8,r9
 40169e4:	3023883a 	mov	r17,r6
 40169e8:	003e0406 	br	40161fc <__alt_data_end+0xfc0161fc>
 40169ec:	21fff804 	addi	r7,r4,-32
 40169f0:	01400804 	movi	r5,32
 40169f4:	41ced83a 	srl	r7,r8,r7
 40169f8:	21400a26 	beq	r4,r5,4016a24 <__adddf3+0x8a4>
 40169fc:	01401004 	movi	r5,64
 4016a00:	2909c83a 	sub	r4,r5,r4
 4016a04:	4108983a 	sll	r4,r8,r4
 4016a08:	2448b03a 	or	r4,r4,r17
 4016a0c:	2008c03a 	cmpne	r4,r4,zero
 4016a10:	3922b03a 	or	r17,r7,r4
 4016a14:	0009883a 	mov	r4,zero
 4016a18:	003f8d06 	br	4016850 <__alt_data_end+0xfc016850>
 4016a1c:	0007883a 	mov	r3,zero
 4016a20:	003fdd06 	br	4016998 <__alt_data_end+0xfc016998>
 4016a24:	0009883a 	mov	r4,zero
 4016a28:	003ff706 	br	4016a08 <__alt_data_end+0xfc016a08>

04016a2c <__divdf3>:
 4016a2c:	defff004 	addi	sp,sp,-64
 4016a30:	dc800815 	stw	r18,32(sp)
 4016a34:	2824d53a 	srli	r18,r5,20
 4016a38:	dd800c15 	stw	r22,48(sp)
 4016a3c:	282cd7fa 	srli	r22,r5,31
 4016a40:	dc000615 	stw	r16,24(sp)
 4016a44:	04000434 	movhi	r16,16
 4016a48:	843fffc4 	addi	r16,r16,-1
 4016a4c:	dfc00f15 	stw	ra,60(sp)
 4016a50:	df000e15 	stw	fp,56(sp)
 4016a54:	ddc00d15 	stw	r23,52(sp)
 4016a58:	dd400b15 	stw	r21,44(sp)
 4016a5c:	dd000a15 	stw	r20,40(sp)
 4016a60:	dcc00915 	stw	r19,36(sp)
 4016a64:	dc400715 	stw	r17,28(sp)
 4016a68:	9481ffcc 	andi	r18,r18,2047
 4016a6c:	2c20703a 	and	r16,r5,r16
 4016a70:	b2003fcc 	andi	r8,r22,255
 4016a74:	90006126 	beq	r18,zero,4016bfc <__divdf3+0x1d0>
 4016a78:	0081ffc4 	movi	r2,2047
 4016a7c:	202b883a 	mov	r21,r4
 4016a80:	90803726 	beq	r18,r2,4016b60 <__divdf3+0x134>
 4016a84:	80800434 	orhi	r2,r16,16
 4016a88:	100490fa 	slli	r2,r2,3
 4016a8c:	2020d77a 	srli	r16,r4,29
 4016a90:	202a90fa 	slli	r21,r4,3
 4016a94:	94bf0044 	addi	r18,r18,-1023
 4016a98:	80a0b03a 	or	r16,r16,r2
 4016a9c:	0013883a 	mov	r9,zero
 4016aa0:	000b883a 	mov	r5,zero
 4016aa4:	3806d53a 	srli	r3,r7,20
 4016aa8:	382ed7fa 	srli	r23,r7,31
 4016aac:	04400434 	movhi	r17,16
 4016ab0:	8c7fffc4 	addi	r17,r17,-1
 4016ab4:	18c1ffcc 	andi	r3,r3,2047
 4016ab8:	3029883a 	mov	r20,r6
 4016abc:	3c62703a 	and	r17,r7,r17
 4016ac0:	bf003fcc 	andi	fp,r23,255
 4016ac4:	18006e26 	beq	r3,zero,4016c80 <__divdf3+0x254>
 4016ac8:	0081ffc4 	movi	r2,2047
 4016acc:	18806626 	beq	r3,r2,4016c68 <__divdf3+0x23c>
 4016ad0:	88800434 	orhi	r2,r17,16
 4016ad4:	100490fa 	slli	r2,r2,3
 4016ad8:	3022d77a 	srli	r17,r6,29
 4016adc:	302890fa 	slli	r20,r6,3
 4016ae0:	18ff0044 	addi	r3,r3,-1023
 4016ae4:	88a2b03a 	or	r17,r17,r2
 4016ae8:	000f883a 	mov	r7,zero
 4016aec:	b5e6f03a 	xor	r19,r22,r23
 4016af0:	3a4cb03a 	or	r6,r7,r9
 4016af4:	008003c4 	movi	r2,15
 4016af8:	9809883a 	mov	r4,r19
 4016afc:	90c7c83a 	sub	r3,r18,r3
 4016b00:	9cc03fcc 	andi	r19,r19,255
 4016b04:	11809636 	bltu	r2,r6,4016d60 <__divdf3+0x334>
 4016b08:	300c90ba 	slli	r6,r6,2
 4016b0c:	00810074 	movhi	r2,1025
 4016b10:	109ac804 	addi	r2,r2,27424
 4016b14:	308d883a 	add	r6,r6,r2
 4016b18:	30800017 	ldw	r2,0(r6)
 4016b1c:	1000683a 	jmp	r2
 4016b20:	04016d60 	cmpeqi	r16,zero,1461
 4016b24:	04016b98 	cmpnei	r16,zero,1454
 4016b28:	04016d50 	cmplti	r16,zero,1461
 4016b2c:	04016b8c 	andi	r16,zero,1454
 4016b30:	04016d50 	cmplti	r16,zero,1461
 4016b34:	04016d24 	muli	r16,zero,1460
 4016b38:	04016d50 	cmplti	r16,zero,1461
 4016b3c:	04016b8c 	andi	r16,zero,1454
 4016b40:	04016b98 	cmpnei	r16,zero,1454
 4016b44:	04016b98 	cmpnei	r16,zero,1454
 4016b48:	04016d24 	muli	r16,zero,1460
 4016b4c:	04016b8c 	andi	r16,zero,1454
 4016b50:	04016b7c 	xorhi	r16,zero,1453
 4016b54:	04016b7c 	xorhi	r16,zero,1453
 4016b58:	04016b7c 	xorhi	r16,zero,1453
 4016b5c:	040170e8 	cmpgeui	r16,zero,1475
 4016b60:	2404b03a 	or	r2,r4,r16
 4016b64:	10006c1e 	bne	r2,zero,4016d18 <__divdf3+0x2ec>
 4016b68:	02400204 	movi	r9,8
 4016b6c:	0021883a 	mov	r16,zero
 4016b70:	002b883a 	mov	r21,zero
 4016b74:	01400084 	movi	r5,2
 4016b78:	003fca06 	br	4016aa4 <__alt_data_end+0xfc016aa4>
 4016b7c:	8023883a 	mov	r17,r16
 4016b80:	a829883a 	mov	r20,r21
 4016b84:	4039883a 	mov	fp,r8
 4016b88:	280f883a 	mov	r7,r5
 4016b8c:	00800084 	movi	r2,2
 4016b90:	3881601e 	bne	r7,r2,4017114 <__divdf3+0x6e8>
 4016b94:	e027883a 	mov	r19,fp
 4016b98:	9900004c 	andi	r4,r19,1
 4016b9c:	0081ffc4 	movi	r2,2047
 4016ba0:	0021883a 	mov	r16,zero
 4016ba4:	002b883a 	mov	r21,zero
 4016ba8:	1004953a 	slli	r2,r2,20
 4016bac:	20c03fcc 	andi	r3,r4,255
 4016bb0:	01400434 	movhi	r5,16
 4016bb4:	297fffc4 	addi	r5,r5,-1
 4016bb8:	180697fa 	slli	r3,r3,31
 4016bbc:	8160703a 	and	r16,r16,r5
 4016bc0:	80a0b03a 	or	r16,r16,r2
 4016bc4:	80c6b03a 	or	r3,r16,r3
 4016bc8:	a805883a 	mov	r2,r21
 4016bcc:	dfc00f17 	ldw	ra,60(sp)
 4016bd0:	df000e17 	ldw	fp,56(sp)
 4016bd4:	ddc00d17 	ldw	r23,52(sp)
 4016bd8:	dd800c17 	ldw	r22,48(sp)
 4016bdc:	dd400b17 	ldw	r21,44(sp)
 4016be0:	dd000a17 	ldw	r20,40(sp)
 4016be4:	dcc00917 	ldw	r19,36(sp)
 4016be8:	dc800817 	ldw	r18,32(sp)
 4016bec:	dc400717 	ldw	r17,28(sp)
 4016bf0:	dc000617 	ldw	r16,24(sp)
 4016bf4:	dec01004 	addi	sp,sp,64
 4016bf8:	f800283a 	ret
 4016bfc:	2404b03a 	or	r2,r4,r16
 4016c00:	2023883a 	mov	r17,r4
 4016c04:	10003f26 	beq	r2,zero,4016d04 <__divdf3+0x2d8>
 4016c08:	80015e26 	beq	r16,zero,4017184 <__divdf3+0x758>
 4016c0c:	8009883a 	mov	r4,r16
 4016c10:	d9800215 	stw	r6,8(sp)
 4016c14:	d9c00515 	stw	r7,20(sp)
 4016c18:	da000415 	stw	r8,16(sp)
 4016c1c:	40189c00 	call	40189c0 <__clzsi2>
 4016c20:	d9800217 	ldw	r6,8(sp)
 4016c24:	d9c00517 	ldw	r7,20(sp)
 4016c28:	da000417 	ldw	r8,16(sp)
 4016c2c:	113ffd44 	addi	r4,r2,-11
 4016c30:	00c00704 	movi	r3,28
 4016c34:	19014f16 	blt	r3,r4,4017174 <__divdf3+0x748>
 4016c38:	00c00744 	movi	r3,29
 4016c3c:	157ffe04 	addi	r21,r2,-8
 4016c40:	1907c83a 	sub	r3,r3,r4
 4016c44:	8560983a 	sll	r16,r16,r21
 4016c48:	88c6d83a 	srl	r3,r17,r3
 4016c4c:	8d6a983a 	sll	r21,r17,r21
 4016c50:	1c20b03a 	or	r16,r3,r16
 4016c54:	1080fcc4 	addi	r2,r2,1011
 4016c58:	00a5c83a 	sub	r18,zero,r2
 4016c5c:	0013883a 	mov	r9,zero
 4016c60:	000b883a 	mov	r5,zero
 4016c64:	003f8f06 	br	4016aa4 <__alt_data_end+0xfc016aa4>
 4016c68:	3444b03a 	or	r2,r6,r17
 4016c6c:	1000231e 	bne	r2,zero,4016cfc <__divdf3+0x2d0>
 4016c70:	0023883a 	mov	r17,zero
 4016c74:	0029883a 	mov	r20,zero
 4016c78:	01c00084 	movi	r7,2
 4016c7c:	003f9b06 	br	4016aec <__alt_data_end+0xfc016aec>
 4016c80:	3444b03a 	or	r2,r6,r17
 4016c84:	10001926 	beq	r2,zero,4016cec <__divdf3+0x2c0>
 4016c88:	88014b26 	beq	r17,zero,40171b8 <__divdf3+0x78c>
 4016c8c:	8809883a 	mov	r4,r17
 4016c90:	d9400115 	stw	r5,4(sp)
 4016c94:	d9800215 	stw	r6,8(sp)
 4016c98:	da000415 	stw	r8,16(sp)
 4016c9c:	da400315 	stw	r9,12(sp)
 4016ca0:	40189c00 	call	40189c0 <__clzsi2>
 4016ca4:	d9400117 	ldw	r5,4(sp)
 4016ca8:	d9800217 	ldw	r6,8(sp)
 4016cac:	da000417 	ldw	r8,16(sp)
 4016cb0:	da400317 	ldw	r9,12(sp)
 4016cb4:	113ffd44 	addi	r4,r2,-11
 4016cb8:	00c00704 	movi	r3,28
 4016cbc:	19013a16 	blt	r3,r4,40171a8 <__divdf3+0x77c>
 4016cc0:	00c00744 	movi	r3,29
 4016cc4:	153ffe04 	addi	r20,r2,-8
 4016cc8:	1907c83a 	sub	r3,r3,r4
 4016ccc:	8d22983a 	sll	r17,r17,r20
 4016cd0:	30c6d83a 	srl	r3,r6,r3
 4016cd4:	3528983a 	sll	r20,r6,r20
 4016cd8:	1c62b03a 	or	r17,r3,r17
 4016cdc:	1080fcc4 	addi	r2,r2,1011
 4016ce0:	0087c83a 	sub	r3,zero,r2
 4016ce4:	000f883a 	mov	r7,zero
 4016ce8:	003f8006 	br	4016aec <__alt_data_end+0xfc016aec>
 4016cec:	0023883a 	mov	r17,zero
 4016cf0:	0029883a 	mov	r20,zero
 4016cf4:	01c00044 	movi	r7,1
 4016cf8:	003f7c06 	br	4016aec <__alt_data_end+0xfc016aec>
 4016cfc:	01c000c4 	movi	r7,3
 4016d00:	003f7a06 	br	4016aec <__alt_data_end+0xfc016aec>
 4016d04:	02400104 	movi	r9,4
 4016d08:	0021883a 	mov	r16,zero
 4016d0c:	002b883a 	mov	r21,zero
 4016d10:	01400044 	movi	r5,1
 4016d14:	003f6306 	br	4016aa4 <__alt_data_end+0xfc016aa4>
 4016d18:	02400304 	movi	r9,12
 4016d1c:	014000c4 	movi	r5,3
 4016d20:	003f6006 	br	4016aa4 <__alt_data_end+0xfc016aa4>
 4016d24:	04000434 	movhi	r16,16
 4016d28:	0009883a 	mov	r4,zero
 4016d2c:	843fffc4 	addi	r16,r16,-1
 4016d30:	057fffc4 	movi	r21,-1
 4016d34:	0081ffc4 	movi	r2,2047
 4016d38:	003f9b06 	br	4016ba8 <__alt_data_end+0xfc016ba8>
 4016d3c:	00c00044 	movi	r3,1
 4016d40:	1887c83a 	sub	r3,r3,r2
 4016d44:	01000e04 	movi	r4,56
 4016d48:	20c1530e 	bge	r4,r3,4017298 <__divdf3+0x86c>
 4016d4c:	9900004c 	andi	r4,r19,1
 4016d50:	0005883a 	mov	r2,zero
 4016d54:	0021883a 	mov	r16,zero
 4016d58:	002b883a 	mov	r21,zero
 4016d5c:	003f9206 	br	4016ba8 <__alt_data_end+0xfc016ba8>
 4016d60:	8c012e36 	bltu	r17,r16,401721c <__divdf3+0x7f0>
 4016d64:	84412c26 	beq	r16,r17,4017218 <__divdf3+0x7ec>
 4016d68:	a82f883a 	mov	r23,r21
 4016d6c:	18ffffc4 	addi	r3,r3,-1
 4016d70:	002b883a 	mov	r21,zero
 4016d74:	a004d63a 	srli	r2,r20,24
 4016d78:	8822923a 	slli	r17,r17,8
 4016d7c:	a028923a 	slli	r20,r20,8
 4016d80:	8009883a 	mov	r4,r16
 4016d84:	88acb03a 	or	r22,r17,r2
 4016d88:	dd000015 	stw	r20,0(sp)
 4016d8c:	b028d43a 	srli	r20,r22,16
 4016d90:	d8c00215 	stw	r3,8(sp)
 4016d94:	b4bfffcc 	andi	r18,r22,65535
 4016d98:	a00b883a 	mov	r5,r20
 4016d9c:	400b1200 	call	400b120 <__udivsi3>
 4016da0:	100b883a 	mov	r5,r2
 4016da4:	9009883a 	mov	r4,r18
 4016da8:	1023883a 	mov	r17,r2
 4016dac:	400b1dc0 	call	400b1dc <__mulsi3>
 4016db0:	8009883a 	mov	r4,r16
 4016db4:	a00b883a 	mov	r5,r20
 4016db8:	1039883a 	mov	fp,r2
 4016dbc:	400b1840 	call	400b184 <__umodsi3>
 4016dc0:	1004943a 	slli	r2,r2,16
 4016dc4:	b808d43a 	srli	r4,r23,16
 4016dc8:	d8c00217 	ldw	r3,8(sp)
 4016dcc:	2084b03a 	or	r2,r4,r2
 4016dd0:	1700062e 	bgeu	r2,fp,4016dec <__divdf3+0x3c0>
 4016dd4:	1585883a 	add	r2,r2,r22
 4016dd8:	893fffc4 	addi	r4,r17,-1
 4016ddc:	15811d36 	bltu	r2,r22,4017254 <__divdf3+0x828>
 4016de0:	17011c2e 	bgeu	r2,fp,4017254 <__divdf3+0x828>
 4016de4:	8c7fff84 	addi	r17,r17,-2
 4016de8:	1585883a 	add	r2,r2,r22
 4016dec:	1739c83a 	sub	fp,r2,fp
 4016df0:	a00b883a 	mov	r5,r20
 4016df4:	e009883a 	mov	r4,fp
 4016df8:	d8c00215 	stw	r3,8(sp)
 4016dfc:	400b1200 	call	400b120 <__udivsi3>
 4016e00:	100b883a 	mov	r5,r2
 4016e04:	9009883a 	mov	r4,r18
 4016e08:	1021883a 	mov	r16,r2
 4016e0c:	400b1dc0 	call	400b1dc <__mulsi3>
 4016e10:	a00b883a 	mov	r5,r20
 4016e14:	e009883a 	mov	r4,fp
 4016e18:	d8800415 	stw	r2,16(sp)
 4016e1c:	400b1840 	call	400b184 <__umodsi3>
 4016e20:	1004943a 	slli	r2,r2,16
 4016e24:	da000417 	ldw	r8,16(sp)
 4016e28:	bdffffcc 	andi	r23,r23,65535
 4016e2c:	b884b03a 	or	r2,r23,r2
 4016e30:	d8c00217 	ldw	r3,8(sp)
 4016e34:	1200062e 	bgeu	r2,r8,4016e50 <__divdf3+0x424>
 4016e38:	1585883a 	add	r2,r2,r22
 4016e3c:	813fffc4 	addi	r4,r16,-1
 4016e40:	15810236 	bltu	r2,r22,401724c <__divdf3+0x820>
 4016e44:	1201012e 	bgeu	r2,r8,401724c <__divdf3+0x820>
 4016e48:	843fff84 	addi	r16,r16,-2
 4016e4c:	1585883a 	add	r2,r2,r22
 4016e50:	8822943a 	slli	r17,r17,16
 4016e54:	d9800017 	ldw	r6,0(sp)
 4016e58:	1211c83a 	sub	r8,r2,r8
 4016e5c:	8c22b03a 	or	r17,r17,r16
 4016e60:	373fffcc 	andi	fp,r6,65535
 4016e64:	8abfffcc 	andi	r10,r17,65535
 4016e68:	8820d43a 	srli	r16,r17,16
 4016e6c:	5009883a 	mov	r4,r10
 4016e70:	e00b883a 	mov	r5,fp
 4016e74:	302ed43a 	srli	r23,r6,16
 4016e78:	d8c00215 	stw	r3,8(sp)
 4016e7c:	da000415 	stw	r8,16(sp)
 4016e80:	da800115 	stw	r10,4(sp)
 4016e84:	400b1dc0 	call	400b1dc <__mulsi3>
 4016e88:	800b883a 	mov	r5,r16
 4016e8c:	e009883a 	mov	r4,fp
 4016e90:	d8800515 	stw	r2,20(sp)
 4016e94:	400b1dc0 	call	400b1dc <__mulsi3>
 4016e98:	8009883a 	mov	r4,r16
 4016e9c:	b80b883a 	mov	r5,r23
 4016ea0:	d8800315 	stw	r2,12(sp)
 4016ea4:	400b1dc0 	call	400b1dc <__mulsi3>
 4016ea8:	da800117 	ldw	r10,4(sp)
 4016eac:	b80b883a 	mov	r5,r23
 4016eb0:	1021883a 	mov	r16,r2
 4016eb4:	5009883a 	mov	r4,r10
 4016eb8:	400b1dc0 	call	400b1dc <__mulsi3>
 4016ebc:	d9c00517 	ldw	r7,20(sp)
 4016ec0:	da400317 	ldw	r9,12(sp)
 4016ec4:	d8c00217 	ldw	r3,8(sp)
 4016ec8:	3808d43a 	srli	r4,r7,16
 4016ecc:	1245883a 	add	r2,r2,r9
 4016ed0:	da000417 	ldw	r8,16(sp)
 4016ed4:	2085883a 	add	r2,r4,r2
 4016ed8:	1240022e 	bgeu	r2,r9,4016ee4 <__divdf3+0x4b8>
 4016edc:	01000074 	movhi	r4,1
 4016ee0:	8121883a 	add	r16,r16,r4
 4016ee4:	1008d43a 	srli	r4,r2,16
 4016ee8:	1004943a 	slli	r2,r2,16
 4016eec:	39ffffcc 	andi	r7,r7,65535
 4016ef0:	2409883a 	add	r4,r4,r16
 4016ef4:	11c5883a 	add	r2,r2,r7
 4016ef8:	4100bb36 	bltu	r8,r4,40171e8 <__divdf3+0x7bc>
 4016efc:	4100d726 	beq	r8,r4,401725c <__divdf3+0x830>
 4016f00:	4109c83a 	sub	r4,r8,r4
 4016f04:	a8a1c83a 	sub	r16,r21,r2
 4016f08:	ac2b803a 	cmpltu	r21,r21,r16
 4016f0c:	256bc83a 	sub	r21,r4,r21
 4016f10:	b540d926 	beq	r22,r21,4017278 <__divdf3+0x84c>
 4016f14:	a00b883a 	mov	r5,r20
 4016f18:	a809883a 	mov	r4,r21
 4016f1c:	d8c00215 	stw	r3,8(sp)
 4016f20:	400b1200 	call	400b120 <__udivsi3>
 4016f24:	100b883a 	mov	r5,r2
 4016f28:	9009883a 	mov	r4,r18
 4016f2c:	d8800515 	stw	r2,20(sp)
 4016f30:	400b1dc0 	call	400b1dc <__mulsi3>
 4016f34:	a809883a 	mov	r4,r21
 4016f38:	a00b883a 	mov	r5,r20
 4016f3c:	d8800415 	stw	r2,16(sp)
 4016f40:	400b1840 	call	400b184 <__umodsi3>
 4016f44:	1004943a 	slli	r2,r2,16
 4016f48:	8008d43a 	srli	r4,r16,16
 4016f4c:	da000417 	ldw	r8,16(sp)
 4016f50:	d8c00217 	ldw	r3,8(sp)
 4016f54:	2084b03a 	or	r2,r4,r2
 4016f58:	d9c00517 	ldw	r7,20(sp)
 4016f5c:	1200062e 	bgeu	r2,r8,4016f78 <__divdf3+0x54c>
 4016f60:	1585883a 	add	r2,r2,r22
 4016f64:	393fffc4 	addi	r4,r7,-1
 4016f68:	1580c536 	bltu	r2,r22,4017280 <__divdf3+0x854>
 4016f6c:	1200c42e 	bgeu	r2,r8,4017280 <__divdf3+0x854>
 4016f70:	39ffff84 	addi	r7,r7,-2
 4016f74:	1585883a 	add	r2,r2,r22
 4016f78:	122bc83a 	sub	r21,r2,r8
 4016f7c:	a00b883a 	mov	r5,r20
 4016f80:	a809883a 	mov	r4,r21
 4016f84:	d8c00215 	stw	r3,8(sp)
 4016f88:	d9c00515 	stw	r7,20(sp)
 4016f8c:	400b1200 	call	400b120 <__udivsi3>
 4016f90:	9009883a 	mov	r4,r18
 4016f94:	100b883a 	mov	r5,r2
 4016f98:	d8800415 	stw	r2,16(sp)
 4016f9c:	400b1dc0 	call	400b1dc <__mulsi3>
 4016fa0:	a809883a 	mov	r4,r21
 4016fa4:	a00b883a 	mov	r5,r20
 4016fa8:	1025883a 	mov	r18,r2
 4016fac:	400b1840 	call	400b184 <__umodsi3>
 4016fb0:	1004943a 	slli	r2,r2,16
 4016fb4:	813fffcc 	andi	r4,r16,65535
 4016fb8:	d8c00217 	ldw	r3,8(sp)
 4016fbc:	20a0b03a 	or	r16,r4,r2
 4016fc0:	d9c00517 	ldw	r7,20(sp)
 4016fc4:	da000417 	ldw	r8,16(sp)
 4016fc8:	8480062e 	bgeu	r16,r18,4016fe4 <__divdf3+0x5b8>
 4016fcc:	85a1883a 	add	r16,r16,r22
 4016fd0:	40bfffc4 	addi	r2,r8,-1
 4016fd4:	8580ac36 	bltu	r16,r22,4017288 <__divdf3+0x85c>
 4016fd8:	8480ab2e 	bgeu	r16,r18,4017288 <__divdf3+0x85c>
 4016fdc:	423fff84 	addi	r8,r8,-2
 4016fe0:	85a1883a 	add	r16,r16,r22
 4016fe4:	3804943a 	slli	r2,r7,16
 4016fe8:	84a1c83a 	sub	r16,r16,r18
 4016fec:	e009883a 	mov	r4,fp
 4016ff0:	1228b03a 	or	r20,r2,r8
 4016ff4:	a1ffffcc 	andi	r7,r20,65535
 4016ff8:	a024d43a 	srli	r18,r20,16
 4016ffc:	380b883a 	mov	r5,r7
 4017000:	d8c00215 	stw	r3,8(sp)
 4017004:	d9c00515 	stw	r7,20(sp)
 4017008:	400b1dc0 	call	400b1dc <__mulsi3>
 401700c:	900b883a 	mov	r5,r18
 4017010:	e009883a 	mov	r4,fp
 4017014:	102b883a 	mov	r21,r2
 4017018:	400b1dc0 	call	400b1dc <__mulsi3>
 401701c:	900b883a 	mov	r5,r18
 4017020:	b809883a 	mov	r4,r23
 4017024:	1039883a 	mov	fp,r2
 4017028:	400b1dc0 	call	400b1dc <__mulsi3>
 401702c:	d9c00517 	ldw	r7,20(sp)
 4017030:	b80b883a 	mov	r5,r23
 4017034:	1025883a 	mov	r18,r2
 4017038:	3809883a 	mov	r4,r7
 401703c:	400b1dc0 	call	400b1dc <__mulsi3>
 4017040:	a808d43a 	srli	r4,r21,16
 4017044:	1705883a 	add	r2,r2,fp
 4017048:	d8c00217 	ldw	r3,8(sp)
 401704c:	2085883a 	add	r2,r4,r2
 4017050:	1700022e 	bgeu	r2,fp,401705c <__divdf3+0x630>
 4017054:	01000074 	movhi	r4,1
 4017058:	9125883a 	add	r18,r18,r4
 401705c:	1008d43a 	srli	r4,r2,16
 4017060:	1004943a 	slli	r2,r2,16
 4017064:	ad7fffcc 	andi	r21,r21,65535
 4017068:	2489883a 	add	r4,r4,r18
 401706c:	1545883a 	add	r2,r2,r21
 4017070:	81003836 	bltu	r16,r4,4017154 <__divdf3+0x728>
 4017074:	81003626 	beq	r16,r4,4017150 <__divdf3+0x724>
 4017078:	a5000054 	ori	r20,r20,1
 401707c:	1880ffc4 	addi	r2,r3,1023
 4017080:	00bf2e0e 	bge	zero,r2,4016d3c <__alt_data_end+0xfc016d3c>
 4017084:	a10001cc 	andi	r4,r20,7
 4017088:	20000726 	beq	r4,zero,40170a8 <__divdf3+0x67c>
 401708c:	a10003cc 	andi	r4,r20,15
 4017090:	01400104 	movi	r5,4
 4017094:	21400426 	beq	r4,r5,40170a8 <__divdf3+0x67c>
 4017098:	a149883a 	add	r4,r20,r5
 401709c:	2529803a 	cmpltu	r20,r4,r20
 40170a0:	8d23883a 	add	r17,r17,r20
 40170a4:	2029883a 	mov	r20,r4
 40170a8:	8900402c 	andhi	r4,r17,256
 40170ac:	20000426 	beq	r4,zero,40170c0 <__divdf3+0x694>
 40170b0:	18810004 	addi	r2,r3,1024
 40170b4:	00ffc034 	movhi	r3,65280
 40170b8:	18ffffc4 	addi	r3,r3,-1
 40170bc:	88e2703a 	and	r17,r17,r3
 40170c0:	00c1ff84 	movi	r3,2046
 40170c4:	18beb416 	blt	r3,r2,4016b98 <__alt_data_end+0xfc016b98>
 40170c8:	a028d0fa 	srli	r20,r20,3
 40170cc:	882a977a 	slli	r21,r17,29
 40170d0:	8820927a 	slli	r16,r17,9
 40170d4:	1081ffcc 	andi	r2,r2,2047
 40170d8:	ad2ab03a 	or	r21,r21,r20
 40170dc:	8020d33a 	srli	r16,r16,12
 40170e0:	9900004c 	andi	r4,r19,1
 40170e4:	003eb006 	br	4016ba8 <__alt_data_end+0xfc016ba8>
 40170e8:	8080022c 	andhi	r2,r16,8
 40170ec:	10001226 	beq	r2,zero,4017138 <__divdf3+0x70c>
 40170f0:	8880022c 	andhi	r2,r17,8
 40170f4:	1000101e 	bne	r2,zero,4017138 <__divdf3+0x70c>
 40170f8:	00800434 	movhi	r2,16
 40170fc:	8c000234 	orhi	r16,r17,8
 4017100:	10bfffc4 	addi	r2,r2,-1
 4017104:	b809883a 	mov	r4,r23
 4017108:	80a0703a 	and	r16,r16,r2
 401710c:	a02b883a 	mov	r21,r20
 4017110:	003f0806 	br	4016d34 <__alt_data_end+0xfc016d34>
 4017114:	008000c4 	movi	r2,3
 4017118:	3880b126 	beq	r7,r2,40173e0 <__divdf3+0x9b4>
 401711c:	00800044 	movi	r2,1
 4017120:	38805b1e 	bne	r7,r2,4017290 <__divdf3+0x864>
 4017124:	e009883a 	mov	r4,fp
 4017128:	0005883a 	mov	r2,zero
 401712c:	0021883a 	mov	r16,zero
 4017130:	002b883a 	mov	r21,zero
 4017134:	003e9c06 	br	4016ba8 <__alt_data_end+0xfc016ba8>
 4017138:	00800434 	movhi	r2,16
 401713c:	84000234 	orhi	r16,r16,8
 4017140:	10bfffc4 	addi	r2,r2,-1
 4017144:	b009883a 	mov	r4,r22
 4017148:	80a0703a 	and	r16,r16,r2
 401714c:	003ef906 	br	4016d34 <__alt_data_end+0xfc016d34>
 4017150:	103fca26 	beq	r2,zero,401707c <__alt_data_end+0xfc01707c>
 4017154:	b421883a 	add	r16,r22,r16
 4017158:	a17fffc4 	addi	r5,r20,-1
 401715c:	8580422e 	bgeu	r16,r22,4017268 <__divdf3+0x83c>
 4017160:	2829883a 	mov	r20,r5
 4017164:	813fc41e 	bne	r16,r4,4017078 <__alt_data_end+0xfc017078>
 4017168:	d9800017 	ldw	r6,0(sp)
 401716c:	30bfc21e 	bne	r6,r2,4017078 <__alt_data_end+0xfc017078>
 4017170:	003fc206 	br	401707c <__alt_data_end+0xfc01707c>
 4017174:	143ff604 	addi	r16,r2,-40
 4017178:	8c20983a 	sll	r16,r17,r16
 401717c:	002b883a 	mov	r21,zero
 4017180:	003eb406 	br	4016c54 <__alt_data_end+0xfc016c54>
 4017184:	d9800215 	stw	r6,8(sp)
 4017188:	d9c00515 	stw	r7,20(sp)
 401718c:	da000415 	stw	r8,16(sp)
 4017190:	40189c00 	call	40189c0 <__clzsi2>
 4017194:	10800804 	addi	r2,r2,32
 4017198:	da000417 	ldw	r8,16(sp)
 401719c:	d9c00517 	ldw	r7,20(sp)
 40171a0:	d9800217 	ldw	r6,8(sp)
 40171a4:	003ea106 	br	4016c2c <__alt_data_end+0xfc016c2c>
 40171a8:	147ff604 	addi	r17,r2,-40
 40171ac:	3462983a 	sll	r17,r6,r17
 40171b0:	0029883a 	mov	r20,zero
 40171b4:	003ec906 	br	4016cdc <__alt_data_end+0xfc016cdc>
 40171b8:	3009883a 	mov	r4,r6
 40171bc:	d9400115 	stw	r5,4(sp)
 40171c0:	d9800215 	stw	r6,8(sp)
 40171c4:	da000415 	stw	r8,16(sp)
 40171c8:	da400315 	stw	r9,12(sp)
 40171cc:	40189c00 	call	40189c0 <__clzsi2>
 40171d0:	10800804 	addi	r2,r2,32
 40171d4:	da400317 	ldw	r9,12(sp)
 40171d8:	da000417 	ldw	r8,16(sp)
 40171dc:	d9800217 	ldw	r6,8(sp)
 40171e0:	d9400117 	ldw	r5,4(sp)
 40171e4:	003eb306 	br	4016cb4 <__alt_data_end+0xfc016cb4>
 40171e8:	d9800017 	ldw	r6,0(sp)
 40171ec:	a9ab883a 	add	r21,r21,r6
 40171f0:	a98b803a 	cmpltu	r5,r21,r6
 40171f4:	2d8b883a 	add	r5,r5,r22
 40171f8:	2a11883a 	add	r8,r5,r8
 40171fc:	897fffc4 	addi	r5,r17,-1
 4017200:	b2000c2e 	bgeu	r22,r8,4017234 <__divdf3+0x808>
 4017204:	41003f36 	bltu	r8,r4,4017304 <__divdf3+0x8d8>
 4017208:	22006c26 	beq	r4,r8,40173bc <__divdf3+0x990>
 401720c:	4109c83a 	sub	r4,r8,r4
 4017210:	2823883a 	mov	r17,r5
 4017214:	003f3b06 	br	4016f04 <__alt_data_end+0xfc016f04>
 4017218:	ad3ed336 	bltu	r21,r20,4016d68 <__alt_data_end+0xfc016d68>
 401721c:	a804d07a 	srli	r2,r21,1
 4017220:	802e97fa 	slli	r23,r16,31
 4017224:	a82a97fa 	slli	r21,r21,31
 4017228:	8020d07a 	srli	r16,r16,1
 401722c:	b8aeb03a 	or	r23,r23,r2
 4017230:	003ed006 	br	4016d74 <__alt_data_end+0xfc016d74>
 4017234:	b23ff51e 	bne	r22,r8,401720c <__alt_data_end+0xfc01720c>
 4017238:	d9800017 	ldw	r6,0(sp)
 401723c:	a9bff12e 	bgeu	r21,r6,4017204 <__alt_data_end+0xfc017204>
 4017240:	b109c83a 	sub	r4,r22,r4
 4017244:	2823883a 	mov	r17,r5
 4017248:	003f2e06 	br	4016f04 <__alt_data_end+0xfc016f04>
 401724c:	2021883a 	mov	r16,r4
 4017250:	003eff06 	br	4016e50 <__alt_data_end+0xfc016e50>
 4017254:	2023883a 	mov	r17,r4
 4017258:	003ee406 	br	4016dec <__alt_data_end+0xfc016dec>
 401725c:	a8bfe236 	bltu	r21,r2,40171e8 <__alt_data_end+0xfc0171e8>
 4017260:	0009883a 	mov	r4,zero
 4017264:	003f2706 	br	4016f04 <__alt_data_end+0xfc016f04>
 4017268:	81002d36 	bltu	r16,r4,4017320 <__divdf3+0x8f4>
 401726c:	24005626 	beq	r4,r16,40173c8 <__divdf3+0x99c>
 4017270:	2829883a 	mov	r20,r5
 4017274:	003f8006 	br	4017078 <__alt_data_end+0xfc017078>
 4017278:	053fffc4 	movi	r20,-1
 401727c:	003f7f06 	br	401707c <__alt_data_end+0xfc01707c>
 4017280:	200f883a 	mov	r7,r4
 4017284:	003f3c06 	br	4016f78 <__alt_data_end+0xfc016f78>
 4017288:	1011883a 	mov	r8,r2
 401728c:	003f5506 	br	4016fe4 <__alt_data_end+0xfc016fe4>
 4017290:	e027883a 	mov	r19,fp
 4017294:	003f7906 	br	401707c <__alt_data_end+0xfc01707c>
 4017298:	010007c4 	movi	r4,31
 401729c:	20c02816 	blt	r4,r3,4017340 <__divdf3+0x914>
 40172a0:	00800804 	movi	r2,32
 40172a4:	10c5c83a 	sub	r2,r2,r3
 40172a8:	888a983a 	sll	r5,r17,r2
 40172ac:	a0c8d83a 	srl	r4,r20,r3
 40172b0:	a084983a 	sll	r2,r20,r2
 40172b4:	88e2d83a 	srl	r17,r17,r3
 40172b8:	2906b03a 	or	r3,r5,r4
 40172bc:	1004c03a 	cmpne	r2,r2,zero
 40172c0:	1886b03a 	or	r3,r3,r2
 40172c4:	188001cc 	andi	r2,r3,7
 40172c8:	10000726 	beq	r2,zero,40172e8 <__divdf3+0x8bc>
 40172cc:	188003cc 	andi	r2,r3,15
 40172d0:	01000104 	movi	r4,4
 40172d4:	11000426 	beq	r2,r4,40172e8 <__divdf3+0x8bc>
 40172d8:	1805883a 	mov	r2,r3
 40172dc:	10c00104 	addi	r3,r2,4
 40172e0:	1885803a 	cmpltu	r2,r3,r2
 40172e4:	88a3883a 	add	r17,r17,r2
 40172e8:	8880202c 	andhi	r2,r17,128
 40172ec:	10002926 	beq	r2,zero,4017394 <__divdf3+0x968>
 40172f0:	9900004c 	andi	r4,r19,1
 40172f4:	00800044 	movi	r2,1
 40172f8:	0021883a 	mov	r16,zero
 40172fc:	002b883a 	mov	r21,zero
 4017300:	003e2906 	br	4016ba8 <__alt_data_end+0xfc016ba8>
 4017304:	d9800017 	ldw	r6,0(sp)
 4017308:	8c7fff84 	addi	r17,r17,-2
 401730c:	a9ab883a 	add	r21,r21,r6
 4017310:	a98b803a 	cmpltu	r5,r21,r6
 4017314:	2d8b883a 	add	r5,r5,r22
 4017318:	2a11883a 	add	r8,r5,r8
 401731c:	003ef806 	br	4016f00 <__alt_data_end+0xfc016f00>
 4017320:	d9800017 	ldw	r6,0(sp)
 4017324:	318f883a 	add	r7,r6,r6
 4017328:	398b803a 	cmpltu	r5,r7,r6
 401732c:	2d8d883a 	add	r6,r5,r22
 4017330:	81a1883a 	add	r16,r16,r6
 4017334:	a17fff84 	addi	r5,r20,-2
 4017338:	d9c00015 	stw	r7,0(sp)
 401733c:	003f8806 	br	4017160 <__alt_data_end+0xfc017160>
 4017340:	013ff844 	movi	r4,-31
 4017344:	2085c83a 	sub	r2,r4,r2
 4017348:	8888d83a 	srl	r4,r17,r2
 401734c:	00800804 	movi	r2,32
 4017350:	18802126 	beq	r3,r2,40173d8 <__divdf3+0x9ac>
 4017354:	04001004 	movi	r16,64
 4017358:	80c7c83a 	sub	r3,r16,r3
 401735c:	88e0983a 	sll	r16,r17,r3
 4017360:	8504b03a 	or	r2,r16,r20
 4017364:	1004c03a 	cmpne	r2,r2,zero
 4017368:	2084b03a 	or	r2,r4,r2
 401736c:	144001cc 	andi	r17,r2,7
 4017370:	88000d1e 	bne	r17,zero,40173a8 <__divdf3+0x97c>
 4017374:	0021883a 	mov	r16,zero
 4017378:	102ad0fa 	srli	r21,r2,3
 401737c:	9900004c 	andi	r4,r19,1
 4017380:	0005883a 	mov	r2,zero
 4017384:	ac6ab03a 	or	r21,r21,r17
 4017388:	003e0706 	br	4016ba8 <__alt_data_end+0xfc016ba8>
 401738c:	1007883a 	mov	r3,r2
 4017390:	0023883a 	mov	r17,zero
 4017394:	8820927a 	slli	r16,r17,9
 4017398:	1805883a 	mov	r2,r3
 401739c:	8822977a 	slli	r17,r17,29
 40173a0:	8020d33a 	srli	r16,r16,12
 40173a4:	003ff406 	br	4017378 <__alt_data_end+0xfc017378>
 40173a8:	10c003cc 	andi	r3,r2,15
 40173ac:	01000104 	movi	r4,4
 40173b0:	193ff626 	beq	r3,r4,401738c <__alt_data_end+0xfc01738c>
 40173b4:	0023883a 	mov	r17,zero
 40173b8:	003fc806 	br	40172dc <__alt_data_end+0xfc0172dc>
 40173bc:	a8bfd136 	bltu	r21,r2,4017304 <__alt_data_end+0xfc017304>
 40173c0:	2823883a 	mov	r17,r5
 40173c4:	003fa606 	br	4017260 <__alt_data_end+0xfc017260>
 40173c8:	d9800017 	ldw	r6,0(sp)
 40173cc:	30bfd436 	bltu	r6,r2,4017320 <__alt_data_end+0xfc017320>
 40173d0:	2829883a 	mov	r20,r5
 40173d4:	003f6406 	br	4017168 <__alt_data_end+0xfc017168>
 40173d8:	0021883a 	mov	r16,zero
 40173dc:	003fe006 	br	4017360 <__alt_data_end+0xfc017360>
 40173e0:	00800434 	movhi	r2,16
 40173e4:	8c000234 	orhi	r16,r17,8
 40173e8:	10bfffc4 	addi	r2,r2,-1
 40173ec:	e009883a 	mov	r4,fp
 40173f0:	80a0703a 	and	r16,r16,r2
 40173f4:	a02b883a 	mov	r21,r20
 40173f8:	003e4e06 	br	4016d34 <__alt_data_end+0xfc016d34>

040173fc <__eqdf2>:
 40173fc:	2804d53a 	srli	r2,r5,20
 4017400:	3806d53a 	srli	r3,r7,20
 4017404:	02000434 	movhi	r8,16
 4017408:	423fffc4 	addi	r8,r8,-1
 401740c:	1081ffcc 	andi	r2,r2,2047
 4017410:	0281ffc4 	movi	r10,2047
 4017414:	2a12703a 	and	r9,r5,r8
 4017418:	18c1ffcc 	andi	r3,r3,2047
 401741c:	3a10703a 	and	r8,r7,r8
 4017420:	280ad7fa 	srli	r5,r5,31
 4017424:	380ed7fa 	srli	r7,r7,31
 4017428:	12801026 	beq	r2,r10,401746c <__eqdf2+0x70>
 401742c:	0281ffc4 	movi	r10,2047
 4017430:	1a800a26 	beq	r3,r10,401745c <__eqdf2+0x60>
 4017434:	10c00226 	beq	r2,r3,4017440 <__eqdf2+0x44>
 4017438:	00800044 	movi	r2,1
 401743c:	f800283a 	ret
 4017440:	4a3ffd1e 	bne	r9,r8,4017438 <__alt_data_end+0xfc017438>
 4017444:	21bffc1e 	bne	r4,r6,4017438 <__alt_data_end+0xfc017438>
 4017448:	29c00c26 	beq	r5,r7,401747c <__eqdf2+0x80>
 401744c:	103ffa1e 	bne	r2,zero,4017438 <__alt_data_end+0xfc017438>
 4017450:	2244b03a 	or	r2,r4,r9
 4017454:	1004c03a 	cmpne	r2,r2,zero
 4017458:	f800283a 	ret
 401745c:	3214b03a 	or	r10,r6,r8
 4017460:	503ff426 	beq	r10,zero,4017434 <__alt_data_end+0xfc017434>
 4017464:	00800044 	movi	r2,1
 4017468:	f800283a 	ret
 401746c:	2254b03a 	or	r10,r4,r9
 4017470:	503fee26 	beq	r10,zero,401742c <__alt_data_end+0xfc01742c>
 4017474:	00800044 	movi	r2,1
 4017478:	f800283a 	ret
 401747c:	0005883a 	mov	r2,zero
 4017480:	f800283a 	ret

04017484 <__gedf2>:
 4017484:	2804d53a 	srli	r2,r5,20
 4017488:	3806d53a 	srli	r3,r7,20
 401748c:	02000434 	movhi	r8,16
 4017490:	423fffc4 	addi	r8,r8,-1
 4017494:	1081ffcc 	andi	r2,r2,2047
 4017498:	0241ffc4 	movi	r9,2047
 401749c:	2a14703a 	and	r10,r5,r8
 40174a0:	18c1ffcc 	andi	r3,r3,2047
 40174a4:	3a10703a 	and	r8,r7,r8
 40174a8:	280ad7fa 	srli	r5,r5,31
 40174ac:	380ed7fa 	srli	r7,r7,31
 40174b0:	12401d26 	beq	r2,r9,4017528 <__gedf2+0xa4>
 40174b4:	0241ffc4 	movi	r9,2047
 40174b8:	1a401226 	beq	r3,r9,4017504 <__gedf2+0x80>
 40174bc:	1000081e 	bne	r2,zero,40174e0 <__gedf2+0x5c>
 40174c0:	2296b03a 	or	r11,r4,r10
 40174c4:	5813003a 	cmpeq	r9,r11,zero
 40174c8:	1800091e 	bne	r3,zero,40174f0 <__gedf2+0x6c>
 40174cc:	3218b03a 	or	r12,r6,r8
 40174d0:	6000071e 	bne	r12,zero,40174f0 <__gedf2+0x6c>
 40174d4:	0005883a 	mov	r2,zero
 40174d8:	5800101e 	bne	r11,zero,401751c <__gedf2+0x98>
 40174dc:	f800283a 	ret
 40174e0:	18000c1e 	bne	r3,zero,4017514 <__gedf2+0x90>
 40174e4:	3212b03a 	or	r9,r6,r8
 40174e8:	48000c26 	beq	r9,zero,401751c <__gedf2+0x98>
 40174ec:	0013883a 	mov	r9,zero
 40174f0:	39c03fcc 	andi	r7,r7,255
 40174f4:	48000826 	beq	r9,zero,4017518 <__gedf2+0x94>
 40174f8:	38000926 	beq	r7,zero,4017520 <__gedf2+0x9c>
 40174fc:	00800044 	movi	r2,1
 4017500:	f800283a 	ret
 4017504:	3212b03a 	or	r9,r6,r8
 4017508:	483fec26 	beq	r9,zero,40174bc <__alt_data_end+0xfc0174bc>
 401750c:	00bfff84 	movi	r2,-2
 4017510:	f800283a 	ret
 4017514:	39c03fcc 	andi	r7,r7,255
 4017518:	29c00626 	beq	r5,r7,4017534 <__gedf2+0xb0>
 401751c:	283ff726 	beq	r5,zero,40174fc <__alt_data_end+0xfc0174fc>
 4017520:	00bfffc4 	movi	r2,-1
 4017524:	f800283a 	ret
 4017528:	2292b03a 	or	r9,r4,r10
 401752c:	483fe126 	beq	r9,zero,40174b4 <__alt_data_end+0xfc0174b4>
 4017530:	003ff606 	br	401750c <__alt_data_end+0xfc01750c>
 4017534:	18bff916 	blt	r3,r2,401751c <__alt_data_end+0xfc01751c>
 4017538:	10c00316 	blt	r2,r3,4017548 <__gedf2+0xc4>
 401753c:	42bff736 	bltu	r8,r10,401751c <__alt_data_end+0xfc01751c>
 4017540:	52000326 	beq	r10,r8,4017550 <__gedf2+0xcc>
 4017544:	5200042e 	bgeu	r10,r8,4017558 <__gedf2+0xd4>
 4017548:	283fec1e 	bne	r5,zero,40174fc <__alt_data_end+0xfc0174fc>
 401754c:	003ff406 	br	4017520 <__alt_data_end+0xfc017520>
 4017550:	313ff236 	bltu	r6,r4,401751c <__alt_data_end+0xfc01751c>
 4017554:	21bffc36 	bltu	r4,r6,4017548 <__alt_data_end+0xfc017548>
 4017558:	0005883a 	mov	r2,zero
 401755c:	f800283a 	ret

04017560 <__ledf2>:
 4017560:	2804d53a 	srli	r2,r5,20
 4017564:	3810d53a 	srli	r8,r7,20
 4017568:	00c00434 	movhi	r3,16
 401756c:	18ffffc4 	addi	r3,r3,-1
 4017570:	1081ffcc 	andi	r2,r2,2047
 4017574:	0241ffc4 	movi	r9,2047
 4017578:	28d4703a 	and	r10,r5,r3
 401757c:	4201ffcc 	andi	r8,r8,2047
 4017580:	38c6703a 	and	r3,r7,r3
 4017584:	280ad7fa 	srli	r5,r5,31
 4017588:	380ed7fa 	srli	r7,r7,31
 401758c:	12401f26 	beq	r2,r9,401760c <__ledf2+0xac>
 4017590:	0241ffc4 	movi	r9,2047
 4017594:	42401426 	beq	r8,r9,40175e8 <__ledf2+0x88>
 4017598:	1000091e 	bne	r2,zero,40175c0 <__ledf2+0x60>
 401759c:	2296b03a 	or	r11,r4,r10
 40175a0:	5813003a 	cmpeq	r9,r11,zero
 40175a4:	29403fcc 	andi	r5,r5,255
 40175a8:	40000a1e 	bne	r8,zero,40175d4 <__ledf2+0x74>
 40175ac:	30d8b03a 	or	r12,r6,r3
 40175b0:	6000081e 	bne	r12,zero,40175d4 <__ledf2+0x74>
 40175b4:	0005883a 	mov	r2,zero
 40175b8:	5800111e 	bne	r11,zero,4017600 <__ledf2+0xa0>
 40175bc:	f800283a 	ret
 40175c0:	29403fcc 	andi	r5,r5,255
 40175c4:	40000c1e 	bne	r8,zero,40175f8 <__ledf2+0x98>
 40175c8:	30d2b03a 	or	r9,r6,r3
 40175cc:	48000c26 	beq	r9,zero,4017600 <__ledf2+0xa0>
 40175d0:	0013883a 	mov	r9,zero
 40175d4:	39c03fcc 	andi	r7,r7,255
 40175d8:	48000826 	beq	r9,zero,40175fc <__ledf2+0x9c>
 40175dc:	38001126 	beq	r7,zero,4017624 <__ledf2+0xc4>
 40175e0:	00800044 	movi	r2,1
 40175e4:	f800283a 	ret
 40175e8:	30d2b03a 	or	r9,r6,r3
 40175ec:	483fea26 	beq	r9,zero,4017598 <__alt_data_end+0xfc017598>
 40175f0:	00800084 	movi	r2,2
 40175f4:	f800283a 	ret
 40175f8:	39c03fcc 	andi	r7,r7,255
 40175fc:	39400726 	beq	r7,r5,401761c <__ledf2+0xbc>
 4017600:	2800081e 	bne	r5,zero,4017624 <__ledf2+0xc4>
 4017604:	00800044 	movi	r2,1
 4017608:	f800283a 	ret
 401760c:	2292b03a 	or	r9,r4,r10
 4017610:	483fdf26 	beq	r9,zero,4017590 <__alt_data_end+0xfc017590>
 4017614:	00800084 	movi	r2,2
 4017618:	f800283a 	ret
 401761c:	4080030e 	bge	r8,r2,401762c <__ledf2+0xcc>
 4017620:	383fef26 	beq	r7,zero,40175e0 <__alt_data_end+0xfc0175e0>
 4017624:	00bfffc4 	movi	r2,-1
 4017628:	f800283a 	ret
 401762c:	123feb16 	blt	r2,r8,40175dc <__alt_data_end+0xfc0175dc>
 4017630:	1abff336 	bltu	r3,r10,4017600 <__alt_data_end+0xfc017600>
 4017634:	50c00326 	beq	r10,r3,4017644 <__ledf2+0xe4>
 4017638:	50c0042e 	bgeu	r10,r3,401764c <__ledf2+0xec>
 401763c:	283fe81e 	bne	r5,zero,40175e0 <__alt_data_end+0xfc0175e0>
 4017640:	003ff806 	br	4017624 <__alt_data_end+0xfc017624>
 4017644:	313fee36 	bltu	r6,r4,4017600 <__alt_data_end+0xfc017600>
 4017648:	21bffc36 	bltu	r4,r6,401763c <__alt_data_end+0xfc01763c>
 401764c:	0005883a 	mov	r2,zero
 4017650:	f800283a 	ret

04017654 <__muldf3>:
 4017654:	deffee04 	addi	sp,sp,-72
 4017658:	dd000c15 	stw	r20,48(sp)
 401765c:	2828d53a 	srli	r20,r5,20
 4017660:	ddc00f15 	stw	r23,60(sp)
 4017664:	282ed7fa 	srli	r23,r5,31
 4017668:	dc000815 	stw	r16,32(sp)
 401766c:	04000434 	movhi	r16,16
 4017670:	dcc00b15 	stw	r19,44(sp)
 4017674:	843fffc4 	addi	r16,r16,-1
 4017678:	dfc01115 	stw	ra,68(sp)
 401767c:	df001015 	stw	fp,64(sp)
 4017680:	dd800e15 	stw	r22,56(sp)
 4017684:	dd400d15 	stw	r21,52(sp)
 4017688:	dc800a15 	stw	r18,40(sp)
 401768c:	dc400915 	stw	r17,36(sp)
 4017690:	a501ffcc 	andi	r20,r20,2047
 4017694:	2c20703a 	and	r16,r5,r16
 4017698:	b827883a 	mov	r19,r23
 401769c:	ba403fcc 	andi	r9,r23,255
 40176a0:	a0006026 	beq	r20,zero,4017824 <__muldf3+0x1d0>
 40176a4:	0081ffc4 	movi	r2,2047
 40176a8:	202d883a 	mov	r22,r4
 40176ac:	a0803626 	beq	r20,r2,4017788 <__muldf3+0x134>
 40176b0:	84000434 	orhi	r16,r16,16
 40176b4:	200ad77a 	srli	r5,r4,29
 40176b8:	800490fa 	slli	r2,r16,3
 40176bc:	202c90fa 	slli	r22,r4,3
 40176c0:	a53f0044 	addi	r20,r20,-1023
 40176c4:	28a0b03a 	or	r16,r5,r2
 40176c8:	002b883a 	mov	r21,zero
 40176cc:	000b883a 	mov	r5,zero
 40176d0:	3804d53a 	srli	r2,r7,20
 40176d4:	3838d7fa 	srli	fp,r7,31
 40176d8:	04400434 	movhi	r17,16
 40176dc:	8c7fffc4 	addi	r17,r17,-1
 40176e0:	1081ffcc 	andi	r2,r2,2047
 40176e4:	3025883a 	mov	r18,r6
 40176e8:	3c62703a 	and	r17,r7,r17
 40176ec:	e2803fcc 	andi	r10,fp,255
 40176f0:	10006d26 	beq	r2,zero,40178a8 <__muldf3+0x254>
 40176f4:	00c1ffc4 	movi	r3,2047
 40176f8:	10c06526 	beq	r2,r3,4017890 <__muldf3+0x23c>
 40176fc:	8c400434 	orhi	r17,r17,16
 4017700:	300ed77a 	srli	r7,r6,29
 4017704:	880690fa 	slli	r3,r17,3
 4017708:	302490fa 	slli	r18,r6,3
 401770c:	10bf0044 	addi	r2,r2,-1023
 4017710:	38e2b03a 	or	r17,r7,r3
 4017714:	000f883a 	mov	r7,zero
 4017718:	a087883a 	add	r3,r20,r2
 401771c:	010003c4 	movi	r4,15
 4017720:	3d44b03a 	or	r2,r7,r21
 4017724:	e5ccf03a 	xor	r6,fp,r23
 4017728:	1a000044 	addi	r8,r3,1
 401772c:	20809b36 	bltu	r4,r2,401799c <__muldf3+0x348>
 4017730:	100490ba 	slli	r2,r2,2
 4017734:	01010074 	movhi	r4,1025
 4017738:	211dd204 	addi	r4,r4,30536
 401773c:	1105883a 	add	r2,r2,r4
 4017740:	10800017 	ldw	r2,0(r2)
 4017744:	1000683a 	jmp	r2
 4017748:	0401799c 	xori	r16,zero,1510
 401774c:	040177a8 	cmpgeui	r16,zero,1502
 4017750:	040177a8 	cmpgeui	r16,zero,1502
 4017754:	040177a4 	muli	r16,zero,1502
 4017758:	04017978 	rdprs	r16,zero,1509
 401775c:	04017978 	rdprs	r16,zero,1509
 4017760:	04017960 	cmpeqi	r16,zero,1509
 4017764:	040177a4 	muli	r16,zero,1502
 4017768:	04017978 	rdprs	r16,zero,1509
 401776c:	04017960 	cmpeqi	r16,zero,1509
 4017770:	04017978 	rdprs	r16,zero,1509
 4017774:	040177a4 	muli	r16,zero,1502
 4017778:	04017988 	cmpgei	r16,zero,1510
 401777c:	04017988 	cmpgei	r16,zero,1510
 4017780:	04017988 	cmpgei	r16,zero,1510
 4017784:	04017ce8 	cmpgeui	r16,zero,1523
 4017788:	2404b03a 	or	r2,r4,r16
 401778c:	1000711e 	bne	r2,zero,4017954 <__muldf3+0x300>
 4017790:	05400204 	movi	r21,8
 4017794:	0021883a 	mov	r16,zero
 4017798:	002d883a 	mov	r22,zero
 401779c:	01400084 	movi	r5,2
 40177a0:	003fcb06 	br	40176d0 <__alt_data_end+0xfc0176d0>
 40177a4:	500d883a 	mov	r6,r10
 40177a8:	00800084 	movi	r2,2
 40177ac:	38805926 	beq	r7,r2,4017914 <__muldf3+0x2c0>
 40177b0:	008000c4 	movi	r2,3
 40177b4:	3881bb26 	beq	r7,r2,4017ea4 <__muldf3+0x850>
 40177b8:	00800044 	movi	r2,1
 40177bc:	3881961e 	bne	r7,r2,4017e18 <__muldf3+0x7c4>
 40177c0:	3027883a 	mov	r19,r6
 40177c4:	0005883a 	mov	r2,zero
 40177c8:	0021883a 	mov	r16,zero
 40177cc:	002d883a 	mov	r22,zero
 40177d0:	1004953a 	slli	r2,r2,20
 40177d4:	98c03fcc 	andi	r3,r19,255
 40177d8:	04400434 	movhi	r17,16
 40177dc:	8c7fffc4 	addi	r17,r17,-1
 40177e0:	180697fa 	slli	r3,r3,31
 40177e4:	8460703a 	and	r16,r16,r17
 40177e8:	80a0b03a 	or	r16,r16,r2
 40177ec:	80c6b03a 	or	r3,r16,r3
 40177f0:	b005883a 	mov	r2,r22
 40177f4:	dfc01117 	ldw	ra,68(sp)
 40177f8:	df001017 	ldw	fp,64(sp)
 40177fc:	ddc00f17 	ldw	r23,60(sp)
 4017800:	dd800e17 	ldw	r22,56(sp)
 4017804:	dd400d17 	ldw	r21,52(sp)
 4017808:	dd000c17 	ldw	r20,48(sp)
 401780c:	dcc00b17 	ldw	r19,44(sp)
 4017810:	dc800a17 	ldw	r18,40(sp)
 4017814:	dc400917 	ldw	r17,36(sp)
 4017818:	dc000817 	ldw	r16,32(sp)
 401781c:	dec01204 	addi	sp,sp,72
 4017820:	f800283a 	ret
 4017824:	2404b03a 	or	r2,r4,r16
 4017828:	202b883a 	mov	r21,r4
 401782c:	10004426 	beq	r2,zero,4017940 <__muldf3+0x2ec>
 4017830:	80015126 	beq	r16,zero,4017d78 <__muldf3+0x724>
 4017834:	8009883a 	mov	r4,r16
 4017838:	d9800715 	stw	r6,28(sp)
 401783c:	d9c00215 	stw	r7,8(sp)
 4017840:	da400415 	stw	r9,16(sp)
 4017844:	40189c00 	call	40189c0 <__clzsi2>
 4017848:	d9800717 	ldw	r6,28(sp)
 401784c:	d9c00217 	ldw	r7,8(sp)
 4017850:	da400417 	ldw	r9,16(sp)
 4017854:	113ffd44 	addi	r4,r2,-11
 4017858:	00c00704 	movi	r3,28
 401785c:	19014216 	blt	r3,r4,4017d68 <__muldf3+0x714>
 4017860:	00c00744 	movi	r3,29
 4017864:	15bffe04 	addi	r22,r2,-8
 4017868:	1907c83a 	sub	r3,r3,r4
 401786c:	85a0983a 	sll	r16,r16,r22
 4017870:	a8c6d83a 	srl	r3,r21,r3
 4017874:	adac983a 	sll	r22,r21,r22
 4017878:	1c20b03a 	or	r16,r3,r16
 401787c:	1080fcc4 	addi	r2,r2,1011
 4017880:	00a9c83a 	sub	r20,zero,r2
 4017884:	002b883a 	mov	r21,zero
 4017888:	000b883a 	mov	r5,zero
 401788c:	003f9006 	br	40176d0 <__alt_data_end+0xfc0176d0>
 4017890:	3446b03a 	or	r3,r6,r17
 4017894:	1800281e 	bne	r3,zero,4017938 <__muldf3+0x2e4>
 4017898:	0023883a 	mov	r17,zero
 401789c:	0025883a 	mov	r18,zero
 40178a0:	01c00084 	movi	r7,2
 40178a4:	003f9c06 	br	4017718 <__alt_data_end+0xfc017718>
 40178a8:	3446b03a 	or	r3,r6,r17
 40178ac:	18001e26 	beq	r3,zero,4017928 <__muldf3+0x2d4>
 40178b0:	88012126 	beq	r17,zero,4017d38 <__muldf3+0x6e4>
 40178b4:	8809883a 	mov	r4,r17
 40178b8:	d9400215 	stw	r5,8(sp)
 40178bc:	d9800715 	stw	r6,28(sp)
 40178c0:	da400415 	stw	r9,16(sp)
 40178c4:	da800315 	stw	r10,12(sp)
 40178c8:	40189c00 	call	40189c0 <__clzsi2>
 40178cc:	d9400217 	ldw	r5,8(sp)
 40178d0:	d9800717 	ldw	r6,28(sp)
 40178d4:	da400417 	ldw	r9,16(sp)
 40178d8:	da800317 	ldw	r10,12(sp)
 40178dc:	113ffd44 	addi	r4,r2,-11
 40178e0:	00c00704 	movi	r3,28
 40178e4:	19011016 	blt	r3,r4,4017d28 <__muldf3+0x6d4>
 40178e8:	00c00744 	movi	r3,29
 40178ec:	14bffe04 	addi	r18,r2,-8
 40178f0:	1907c83a 	sub	r3,r3,r4
 40178f4:	8ca2983a 	sll	r17,r17,r18
 40178f8:	30c6d83a 	srl	r3,r6,r3
 40178fc:	34a4983a 	sll	r18,r6,r18
 4017900:	1c62b03a 	or	r17,r3,r17
 4017904:	1080fcc4 	addi	r2,r2,1011
 4017908:	0085c83a 	sub	r2,zero,r2
 401790c:	000f883a 	mov	r7,zero
 4017910:	003f8106 	br	4017718 <__alt_data_end+0xfc017718>
 4017914:	3027883a 	mov	r19,r6
 4017918:	0081ffc4 	movi	r2,2047
 401791c:	0021883a 	mov	r16,zero
 4017920:	002d883a 	mov	r22,zero
 4017924:	003faa06 	br	40177d0 <__alt_data_end+0xfc0177d0>
 4017928:	0023883a 	mov	r17,zero
 401792c:	0025883a 	mov	r18,zero
 4017930:	01c00044 	movi	r7,1
 4017934:	003f7806 	br	4017718 <__alt_data_end+0xfc017718>
 4017938:	01c000c4 	movi	r7,3
 401793c:	003f7606 	br	4017718 <__alt_data_end+0xfc017718>
 4017940:	05400104 	movi	r21,4
 4017944:	0021883a 	mov	r16,zero
 4017948:	002d883a 	mov	r22,zero
 401794c:	01400044 	movi	r5,1
 4017950:	003f5f06 	br	40176d0 <__alt_data_end+0xfc0176d0>
 4017954:	05400304 	movi	r21,12
 4017958:	014000c4 	movi	r5,3
 401795c:	003f5c06 	br	40176d0 <__alt_data_end+0xfc0176d0>
 4017960:	04000434 	movhi	r16,16
 4017964:	0027883a 	mov	r19,zero
 4017968:	843fffc4 	addi	r16,r16,-1
 401796c:	05bfffc4 	movi	r22,-1
 4017970:	0081ffc4 	movi	r2,2047
 4017974:	003f9606 	br	40177d0 <__alt_data_end+0xfc0177d0>
 4017978:	8023883a 	mov	r17,r16
 401797c:	b025883a 	mov	r18,r22
 4017980:	280f883a 	mov	r7,r5
 4017984:	003f8806 	br	40177a8 <__alt_data_end+0xfc0177a8>
 4017988:	8023883a 	mov	r17,r16
 401798c:	b025883a 	mov	r18,r22
 4017990:	480d883a 	mov	r6,r9
 4017994:	280f883a 	mov	r7,r5
 4017998:	003f8306 	br	40177a8 <__alt_data_end+0xfc0177a8>
 401799c:	b026d43a 	srli	r19,r22,16
 40179a0:	902ed43a 	srli	r23,r18,16
 40179a4:	b5bfffcc 	andi	r22,r22,65535
 40179a8:	94bfffcc 	andi	r18,r18,65535
 40179ac:	b00b883a 	mov	r5,r22
 40179b0:	9009883a 	mov	r4,r18
 40179b4:	d8c00515 	stw	r3,20(sp)
 40179b8:	d9800715 	stw	r6,28(sp)
 40179bc:	da000615 	stw	r8,24(sp)
 40179c0:	400b1dc0 	call	400b1dc <__mulsi3>
 40179c4:	980b883a 	mov	r5,r19
 40179c8:	9009883a 	mov	r4,r18
 40179cc:	1029883a 	mov	r20,r2
 40179d0:	400b1dc0 	call	400b1dc <__mulsi3>
 40179d4:	b80b883a 	mov	r5,r23
 40179d8:	9809883a 	mov	r4,r19
 40179dc:	102b883a 	mov	r21,r2
 40179e0:	400b1dc0 	call	400b1dc <__mulsi3>
 40179e4:	b809883a 	mov	r4,r23
 40179e8:	b00b883a 	mov	r5,r22
 40179ec:	1039883a 	mov	fp,r2
 40179f0:	400b1dc0 	call	400b1dc <__mulsi3>
 40179f4:	a008d43a 	srli	r4,r20,16
 40179f8:	1545883a 	add	r2,r2,r21
 40179fc:	d8c00517 	ldw	r3,20(sp)
 4017a00:	2085883a 	add	r2,r4,r2
 4017a04:	d9800717 	ldw	r6,28(sp)
 4017a08:	da000617 	ldw	r8,24(sp)
 4017a0c:	1540022e 	bgeu	r2,r21,4017a18 <__muldf3+0x3c4>
 4017a10:	01000074 	movhi	r4,1
 4017a14:	e139883a 	add	fp,fp,r4
 4017a18:	100e943a 	slli	r7,r2,16
 4017a1c:	1004d43a 	srli	r2,r2,16
 4017a20:	882ad43a 	srli	r21,r17,16
 4017a24:	a53fffcc 	andi	r20,r20,65535
 4017a28:	8c7fffcc 	andi	r17,r17,65535
 4017a2c:	3d29883a 	add	r20,r7,r20
 4017a30:	b00b883a 	mov	r5,r22
 4017a34:	8809883a 	mov	r4,r17
 4017a38:	d8c00515 	stw	r3,20(sp)
 4017a3c:	d9800715 	stw	r6,28(sp)
 4017a40:	da000615 	stw	r8,24(sp)
 4017a44:	dd000115 	stw	r20,4(sp)
 4017a48:	d8800015 	stw	r2,0(sp)
 4017a4c:	400b1dc0 	call	400b1dc <__mulsi3>
 4017a50:	980b883a 	mov	r5,r19
 4017a54:	8809883a 	mov	r4,r17
 4017a58:	d8800215 	stw	r2,8(sp)
 4017a5c:	400b1dc0 	call	400b1dc <__mulsi3>
 4017a60:	9809883a 	mov	r4,r19
 4017a64:	a80b883a 	mov	r5,r21
 4017a68:	1029883a 	mov	r20,r2
 4017a6c:	400b1dc0 	call	400b1dc <__mulsi3>
 4017a70:	b00b883a 	mov	r5,r22
 4017a74:	a809883a 	mov	r4,r21
 4017a78:	d8800415 	stw	r2,16(sp)
 4017a7c:	400b1dc0 	call	400b1dc <__mulsi3>
 4017a80:	d9c00217 	ldw	r7,8(sp)
 4017a84:	1505883a 	add	r2,r2,r20
 4017a88:	d8c00517 	ldw	r3,20(sp)
 4017a8c:	3826d43a 	srli	r19,r7,16
 4017a90:	d9800717 	ldw	r6,28(sp)
 4017a94:	da000617 	ldw	r8,24(sp)
 4017a98:	9885883a 	add	r2,r19,r2
 4017a9c:	da400417 	ldw	r9,16(sp)
 4017aa0:	1500022e 	bgeu	r2,r20,4017aac <__muldf3+0x458>
 4017aa4:	01000074 	movhi	r4,1
 4017aa8:	4913883a 	add	r9,r9,r4
 4017aac:	1028d43a 	srli	r20,r2,16
 4017ab0:	1004943a 	slli	r2,r2,16
 4017ab4:	802cd43a 	srli	r22,r16,16
 4017ab8:	843fffcc 	andi	r16,r16,65535
 4017abc:	3cffffcc 	andi	r19,r7,65535
 4017ac0:	9009883a 	mov	r4,r18
 4017ac4:	800b883a 	mov	r5,r16
 4017ac8:	a269883a 	add	r20,r20,r9
 4017acc:	d8c00515 	stw	r3,20(sp)
 4017ad0:	d9800715 	stw	r6,28(sp)
 4017ad4:	da000615 	stw	r8,24(sp)
 4017ad8:	14e7883a 	add	r19,r2,r19
 4017adc:	400b1dc0 	call	400b1dc <__mulsi3>
 4017ae0:	9009883a 	mov	r4,r18
 4017ae4:	b00b883a 	mov	r5,r22
 4017ae8:	d8800315 	stw	r2,12(sp)
 4017aec:	400b1dc0 	call	400b1dc <__mulsi3>
 4017af0:	b809883a 	mov	r4,r23
 4017af4:	b00b883a 	mov	r5,r22
 4017af8:	d8800215 	stw	r2,8(sp)
 4017afc:	400b1dc0 	call	400b1dc <__mulsi3>
 4017b00:	b80b883a 	mov	r5,r23
 4017b04:	8009883a 	mov	r4,r16
 4017b08:	d8800415 	stw	r2,16(sp)
 4017b0c:	400b1dc0 	call	400b1dc <__mulsi3>
 4017b10:	da800317 	ldw	r10,12(sp)
 4017b14:	d9c00217 	ldw	r7,8(sp)
 4017b18:	d9000017 	ldw	r4,0(sp)
 4017b1c:	502ed43a 	srli	r23,r10,16
 4017b20:	11c5883a 	add	r2,r2,r7
 4017b24:	24e5883a 	add	r18,r4,r19
 4017b28:	b885883a 	add	r2,r23,r2
 4017b2c:	d8c00517 	ldw	r3,20(sp)
 4017b30:	d9800717 	ldw	r6,28(sp)
 4017b34:	da000617 	ldw	r8,24(sp)
 4017b38:	da400417 	ldw	r9,16(sp)
 4017b3c:	11c0022e 	bgeu	r2,r7,4017b48 <__muldf3+0x4f4>
 4017b40:	01000074 	movhi	r4,1
 4017b44:	4913883a 	add	r9,r9,r4
 4017b48:	100ed43a 	srli	r7,r2,16
 4017b4c:	1004943a 	slli	r2,r2,16
 4017b50:	55ffffcc 	andi	r23,r10,65535
 4017b54:	3a53883a 	add	r9,r7,r9
 4017b58:	8809883a 	mov	r4,r17
 4017b5c:	800b883a 	mov	r5,r16
 4017b60:	d8c00515 	stw	r3,20(sp)
 4017b64:	d9800715 	stw	r6,28(sp)
 4017b68:	da000615 	stw	r8,24(sp)
 4017b6c:	da400415 	stw	r9,16(sp)
 4017b70:	15ef883a 	add	r23,r2,r23
 4017b74:	400b1dc0 	call	400b1dc <__mulsi3>
 4017b78:	8809883a 	mov	r4,r17
 4017b7c:	b00b883a 	mov	r5,r22
 4017b80:	d8800215 	stw	r2,8(sp)
 4017b84:	400b1dc0 	call	400b1dc <__mulsi3>
 4017b88:	b00b883a 	mov	r5,r22
 4017b8c:	a809883a 	mov	r4,r21
 4017b90:	d8800315 	stw	r2,12(sp)
 4017b94:	400b1dc0 	call	400b1dc <__mulsi3>
 4017b98:	8009883a 	mov	r4,r16
 4017b9c:	a80b883a 	mov	r5,r21
 4017ba0:	1023883a 	mov	r17,r2
 4017ba4:	400b1dc0 	call	400b1dc <__mulsi3>
 4017ba8:	d9c00217 	ldw	r7,8(sp)
 4017bac:	da800317 	ldw	r10,12(sp)
 4017bb0:	d8c00517 	ldw	r3,20(sp)
 4017bb4:	3808d43a 	srli	r4,r7,16
 4017bb8:	1285883a 	add	r2,r2,r10
 4017bbc:	d9800717 	ldw	r6,28(sp)
 4017bc0:	2085883a 	add	r2,r4,r2
 4017bc4:	da000617 	ldw	r8,24(sp)
 4017bc8:	da400417 	ldw	r9,16(sp)
 4017bcc:	1280022e 	bgeu	r2,r10,4017bd8 <__muldf3+0x584>
 4017bd0:	01000074 	movhi	r4,1
 4017bd4:	8923883a 	add	r17,r17,r4
 4017bd8:	1008943a 	slli	r4,r2,16
 4017bdc:	39ffffcc 	andi	r7,r7,65535
 4017be0:	e4b9883a 	add	fp,fp,r18
 4017be4:	21cf883a 	add	r7,r4,r7
 4017be8:	e4e7803a 	cmpltu	r19,fp,r19
 4017bec:	3d0f883a 	add	r7,r7,r20
 4017bf0:	bf39883a 	add	fp,r23,fp
 4017bf4:	99c9883a 	add	r4,r19,r7
 4017bf8:	e5ef803a 	cmpltu	r23,fp,r23
 4017bfc:	490b883a 	add	r5,r9,r4
 4017c00:	1004d43a 	srli	r2,r2,16
 4017c04:	b965883a 	add	r18,r23,r5
 4017c08:	24c9803a 	cmpltu	r4,r4,r19
 4017c0c:	3d29803a 	cmpltu	r20,r7,r20
 4017c10:	a128b03a 	or	r20,r20,r4
 4017c14:	95ef803a 	cmpltu	r23,r18,r23
 4017c18:	2a53803a 	cmpltu	r9,r5,r9
 4017c1c:	a0a9883a 	add	r20,r20,r2
 4017c20:	4deeb03a 	or	r23,r9,r23
 4017c24:	a5ef883a 	add	r23,r20,r23
 4017c28:	bc63883a 	add	r17,r23,r17
 4017c2c:	e004927a 	slli	r2,fp,9
 4017c30:	d9000117 	ldw	r4,4(sp)
 4017c34:	882e927a 	slli	r23,r17,9
 4017c38:	9022d5fa 	srli	r17,r18,23
 4017c3c:	e038d5fa 	srli	fp,fp,23
 4017c40:	1104b03a 	or	r2,r2,r4
 4017c44:	9024927a 	slli	r18,r18,9
 4017c48:	1004c03a 	cmpne	r2,r2,zero
 4017c4c:	bc62b03a 	or	r17,r23,r17
 4017c50:	1738b03a 	or	fp,r2,fp
 4017c54:	8880402c 	andhi	r2,r17,256
 4017c58:	e4a4b03a 	or	r18,fp,r18
 4017c5c:	10000726 	beq	r2,zero,4017c7c <__muldf3+0x628>
 4017c60:	9006d07a 	srli	r3,r18,1
 4017c64:	880497fa 	slli	r2,r17,31
 4017c68:	9480004c 	andi	r18,r18,1
 4017c6c:	8822d07a 	srli	r17,r17,1
 4017c70:	1ca4b03a 	or	r18,r3,r18
 4017c74:	14a4b03a 	or	r18,r2,r18
 4017c78:	4007883a 	mov	r3,r8
 4017c7c:	1880ffc4 	addi	r2,r3,1023
 4017c80:	0080460e 	bge	zero,r2,4017d9c <__muldf3+0x748>
 4017c84:	910001cc 	andi	r4,r18,7
 4017c88:	20000726 	beq	r4,zero,4017ca8 <__muldf3+0x654>
 4017c8c:	910003cc 	andi	r4,r18,15
 4017c90:	01400104 	movi	r5,4
 4017c94:	21400426 	beq	r4,r5,4017ca8 <__muldf3+0x654>
 4017c98:	9149883a 	add	r4,r18,r5
 4017c9c:	24a5803a 	cmpltu	r18,r4,r18
 4017ca0:	8ca3883a 	add	r17,r17,r18
 4017ca4:	2025883a 	mov	r18,r4
 4017ca8:	8900402c 	andhi	r4,r17,256
 4017cac:	20000426 	beq	r4,zero,4017cc0 <__muldf3+0x66c>
 4017cb0:	18810004 	addi	r2,r3,1024
 4017cb4:	00ffc034 	movhi	r3,65280
 4017cb8:	18ffffc4 	addi	r3,r3,-1
 4017cbc:	88e2703a 	and	r17,r17,r3
 4017cc0:	00c1ff84 	movi	r3,2046
 4017cc4:	18bf1316 	blt	r3,r2,4017914 <__alt_data_end+0xfc017914>
 4017cc8:	882c977a 	slli	r22,r17,29
 4017ccc:	9024d0fa 	srli	r18,r18,3
 4017cd0:	8822927a 	slli	r17,r17,9
 4017cd4:	1081ffcc 	andi	r2,r2,2047
 4017cd8:	b4acb03a 	or	r22,r22,r18
 4017cdc:	8820d33a 	srli	r16,r17,12
 4017ce0:	3027883a 	mov	r19,r6
 4017ce4:	003eba06 	br	40177d0 <__alt_data_end+0xfc0177d0>
 4017ce8:	8080022c 	andhi	r2,r16,8
 4017cec:	10000926 	beq	r2,zero,4017d14 <__muldf3+0x6c0>
 4017cf0:	8880022c 	andhi	r2,r17,8
 4017cf4:	1000071e 	bne	r2,zero,4017d14 <__muldf3+0x6c0>
 4017cf8:	00800434 	movhi	r2,16
 4017cfc:	8c000234 	orhi	r16,r17,8
 4017d00:	10bfffc4 	addi	r2,r2,-1
 4017d04:	e027883a 	mov	r19,fp
 4017d08:	80a0703a 	and	r16,r16,r2
 4017d0c:	902d883a 	mov	r22,r18
 4017d10:	003f1706 	br	4017970 <__alt_data_end+0xfc017970>
 4017d14:	00800434 	movhi	r2,16
 4017d18:	84000234 	orhi	r16,r16,8
 4017d1c:	10bfffc4 	addi	r2,r2,-1
 4017d20:	80a0703a 	and	r16,r16,r2
 4017d24:	003f1206 	br	4017970 <__alt_data_end+0xfc017970>
 4017d28:	147ff604 	addi	r17,r2,-40
 4017d2c:	3462983a 	sll	r17,r6,r17
 4017d30:	0025883a 	mov	r18,zero
 4017d34:	003ef306 	br	4017904 <__alt_data_end+0xfc017904>
 4017d38:	3009883a 	mov	r4,r6
 4017d3c:	d9400215 	stw	r5,8(sp)
 4017d40:	d9800715 	stw	r6,28(sp)
 4017d44:	da400415 	stw	r9,16(sp)
 4017d48:	da800315 	stw	r10,12(sp)
 4017d4c:	40189c00 	call	40189c0 <__clzsi2>
 4017d50:	10800804 	addi	r2,r2,32
 4017d54:	da800317 	ldw	r10,12(sp)
 4017d58:	da400417 	ldw	r9,16(sp)
 4017d5c:	d9800717 	ldw	r6,28(sp)
 4017d60:	d9400217 	ldw	r5,8(sp)
 4017d64:	003edd06 	br	40178dc <__alt_data_end+0xfc0178dc>
 4017d68:	143ff604 	addi	r16,r2,-40
 4017d6c:	ac20983a 	sll	r16,r21,r16
 4017d70:	002d883a 	mov	r22,zero
 4017d74:	003ec106 	br	401787c <__alt_data_end+0xfc01787c>
 4017d78:	d9800715 	stw	r6,28(sp)
 4017d7c:	d9c00215 	stw	r7,8(sp)
 4017d80:	da400415 	stw	r9,16(sp)
 4017d84:	40189c00 	call	40189c0 <__clzsi2>
 4017d88:	10800804 	addi	r2,r2,32
 4017d8c:	da400417 	ldw	r9,16(sp)
 4017d90:	d9c00217 	ldw	r7,8(sp)
 4017d94:	d9800717 	ldw	r6,28(sp)
 4017d98:	003eae06 	br	4017854 <__alt_data_end+0xfc017854>
 4017d9c:	00c00044 	movi	r3,1
 4017da0:	1887c83a 	sub	r3,r3,r2
 4017da4:	01000e04 	movi	r4,56
 4017da8:	20fe8516 	blt	r4,r3,40177c0 <__alt_data_end+0xfc0177c0>
 4017dac:	010007c4 	movi	r4,31
 4017db0:	20c01b16 	blt	r4,r3,4017e20 <__muldf3+0x7cc>
 4017db4:	00800804 	movi	r2,32
 4017db8:	10c5c83a 	sub	r2,r2,r3
 4017dbc:	888a983a 	sll	r5,r17,r2
 4017dc0:	90c8d83a 	srl	r4,r18,r3
 4017dc4:	9084983a 	sll	r2,r18,r2
 4017dc8:	88e2d83a 	srl	r17,r17,r3
 4017dcc:	2906b03a 	or	r3,r5,r4
 4017dd0:	1004c03a 	cmpne	r2,r2,zero
 4017dd4:	1886b03a 	or	r3,r3,r2
 4017dd8:	188001cc 	andi	r2,r3,7
 4017ddc:	10000726 	beq	r2,zero,4017dfc <__muldf3+0x7a8>
 4017de0:	188003cc 	andi	r2,r3,15
 4017de4:	01000104 	movi	r4,4
 4017de8:	11000426 	beq	r2,r4,4017dfc <__muldf3+0x7a8>
 4017dec:	1805883a 	mov	r2,r3
 4017df0:	10c00104 	addi	r3,r2,4
 4017df4:	1885803a 	cmpltu	r2,r3,r2
 4017df8:	88a3883a 	add	r17,r17,r2
 4017dfc:	8880202c 	andhi	r2,r17,128
 4017e00:	10001c26 	beq	r2,zero,4017e74 <__muldf3+0x820>
 4017e04:	3027883a 	mov	r19,r6
 4017e08:	00800044 	movi	r2,1
 4017e0c:	0021883a 	mov	r16,zero
 4017e10:	002d883a 	mov	r22,zero
 4017e14:	003e6e06 	br	40177d0 <__alt_data_end+0xfc0177d0>
 4017e18:	4007883a 	mov	r3,r8
 4017e1c:	003f9706 	br	4017c7c <__alt_data_end+0xfc017c7c>
 4017e20:	017ff844 	movi	r5,-31
 4017e24:	2885c83a 	sub	r2,r5,r2
 4017e28:	888ad83a 	srl	r5,r17,r2
 4017e2c:	00800804 	movi	r2,32
 4017e30:	18801a26 	beq	r3,r2,4017e9c <__muldf3+0x848>
 4017e34:	01001004 	movi	r4,64
 4017e38:	20c7c83a 	sub	r3,r4,r3
 4017e3c:	88e2983a 	sll	r17,r17,r3
 4017e40:	8ca4b03a 	or	r18,r17,r18
 4017e44:	9004c03a 	cmpne	r2,r18,zero
 4017e48:	2884b03a 	or	r2,r5,r2
 4017e4c:	144001cc 	andi	r17,r2,7
 4017e50:	88000d1e 	bne	r17,zero,4017e88 <__muldf3+0x834>
 4017e54:	0021883a 	mov	r16,zero
 4017e58:	102cd0fa 	srli	r22,r2,3
 4017e5c:	3027883a 	mov	r19,r6
 4017e60:	0005883a 	mov	r2,zero
 4017e64:	b46cb03a 	or	r22,r22,r17
 4017e68:	003e5906 	br	40177d0 <__alt_data_end+0xfc0177d0>
 4017e6c:	1007883a 	mov	r3,r2
 4017e70:	0023883a 	mov	r17,zero
 4017e74:	8820927a 	slli	r16,r17,9
 4017e78:	1805883a 	mov	r2,r3
 4017e7c:	8822977a 	slli	r17,r17,29
 4017e80:	8020d33a 	srli	r16,r16,12
 4017e84:	003ff406 	br	4017e58 <__alt_data_end+0xfc017e58>
 4017e88:	10c003cc 	andi	r3,r2,15
 4017e8c:	01000104 	movi	r4,4
 4017e90:	193ff626 	beq	r3,r4,4017e6c <__alt_data_end+0xfc017e6c>
 4017e94:	0023883a 	mov	r17,zero
 4017e98:	003fd506 	br	4017df0 <__alt_data_end+0xfc017df0>
 4017e9c:	0023883a 	mov	r17,zero
 4017ea0:	003fe706 	br	4017e40 <__alt_data_end+0xfc017e40>
 4017ea4:	00800434 	movhi	r2,16
 4017ea8:	8c000234 	orhi	r16,r17,8
 4017eac:	10bfffc4 	addi	r2,r2,-1
 4017eb0:	3027883a 	mov	r19,r6
 4017eb4:	80a0703a 	and	r16,r16,r2
 4017eb8:	902d883a 	mov	r22,r18
 4017ebc:	003eac06 	br	4017970 <__alt_data_end+0xfc017970>

04017ec0 <__subdf3>:
 4017ec0:	02000434 	movhi	r8,16
 4017ec4:	423fffc4 	addi	r8,r8,-1
 4017ec8:	defffb04 	addi	sp,sp,-20
 4017ecc:	2a14703a 	and	r10,r5,r8
 4017ed0:	3812d53a 	srli	r9,r7,20
 4017ed4:	3a10703a 	and	r8,r7,r8
 4017ed8:	2006d77a 	srli	r3,r4,29
 4017edc:	3004d77a 	srli	r2,r6,29
 4017ee0:	dc000015 	stw	r16,0(sp)
 4017ee4:	501490fa 	slli	r10,r10,3
 4017ee8:	2820d53a 	srli	r16,r5,20
 4017eec:	401090fa 	slli	r8,r8,3
 4017ef0:	dc800215 	stw	r18,8(sp)
 4017ef4:	dc400115 	stw	r17,4(sp)
 4017ef8:	dfc00415 	stw	ra,16(sp)
 4017efc:	202290fa 	slli	r17,r4,3
 4017f00:	dcc00315 	stw	r19,12(sp)
 4017f04:	4a41ffcc 	andi	r9,r9,2047
 4017f08:	0101ffc4 	movi	r4,2047
 4017f0c:	2824d7fa 	srli	r18,r5,31
 4017f10:	8401ffcc 	andi	r16,r16,2047
 4017f14:	50c6b03a 	or	r3,r10,r3
 4017f18:	380ed7fa 	srli	r7,r7,31
 4017f1c:	408ab03a 	or	r5,r8,r2
 4017f20:	300c90fa 	slli	r6,r6,3
 4017f24:	49009626 	beq	r9,r4,4018180 <__subdf3+0x2c0>
 4017f28:	39c0005c 	xori	r7,r7,1
 4017f2c:	8245c83a 	sub	r2,r16,r9
 4017f30:	3c807426 	beq	r7,r18,4018104 <__subdf3+0x244>
 4017f34:	0080af0e 	bge	zero,r2,40181f4 <__subdf3+0x334>
 4017f38:	48002a1e 	bne	r9,zero,4017fe4 <__subdf3+0x124>
 4017f3c:	2988b03a 	or	r4,r5,r6
 4017f40:	20009a1e 	bne	r4,zero,40181ac <__subdf3+0x2ec>
 4017f44:	888001cc 	andi	r2,r17,7
 4017f48:	10000726 	beq	r2,zero,4017f68 <__subdf3+0xa8>
 4017f4c:	888003cc 	andi	r2,r17,15
 4017f50:	01000104 	movi	r4,4
 4017f54:	11000426 	beq	r2,r4,4017f68 <__subdf3+0xa8>
 4017f58:	890b883a 	add	r5,r17,r4
 4017f5c:	2c63803a 	cmpltu	r17,r5,r17
 4017f60:	1c47883a 	add	r3,r3,r17
 4017f64:	2823883a 	mov	r17,r5
 4017f68:	1880202c 	andhi	r2,r3,128
 4017f6c:	10005926 	beq	r2,zero,40180d4 <__subdf3+0x214>
 4017f70:	84000044 	addi	r16,r16,1
 4017f74:	0081ffc4 	movi	r2,2047
 4017f78:	8080be26 	beq	r16,r2,4018274 <__subdf3+0x3b4>
 4017f7c:	017fe034 	movhi	r5,65408
 4017f80:	297fffc4 	addi	r5,r5,-1
 4017f84:	1946703a 	and	r3,r3,r5
 4017f88:	1804977a 	slli	r2,r3,29
 4017f8c:	1806927a 	slli	r3,r3,9
 4017f90:	8822d0fa 	srli	r17,r17,3
 4017f94:	8401ffcc 	andi	r16,r16,2047
 4017f98:	180ad33a 	srli	r5,r3,12
 4017f9c:	9100004c 	andi	r4,r18,1
 4017fa0:	1444b03a 	or	r2,r2,r17
 4017fa4:	80c1ffcc 	andi	r3,r16,2047
 4017fa8:	1820953a 	slli	r16,r3,20
 4017fac:	20c03fcc 	andi	r3,r4,255
 4017fb0:	180897fa 	slli	r4,r3,31
 4017fb4:	00c00434 	movhi	r3,16
 4017fb8:	18ffffc4 	addi	r3,r3,-1
 4017fbc:	28c6703a 	and	r3,r5,r3
 4017fc0:	1c06b03a 	or	r3,r3,r16
 4017fc4:	1906b03a 	or	r3,r3,r4
 4017fc8:	dfc00417 	ldw	ra,16(sp)
 4017fcc:	dcc00317 	ldw	r19,12(sp)
 4017fd0:	dc800217 	ldw	r18,8(sp)
 4017fd4:	dc400117 	ldw	r17,4(sp)
 4017fd8:	dc000017 	ldw	r16,0(sp)
 4017fdc:	dec00504 	addi	sp,sp,20
 4017fe0:	f800283a 	ret
 4017fe4:	0101ffc4 	movi	r4,2047
 4017fe8:	813fd626 	beq	r16,r4,4017f44 <__alt_data_end+0xfc017f44>
 4017fec:	29402034 	orhi	r5,r5,128
 4017ff0:	01000e04 	movi	r4,56
 4017ff4:	2080a316 	blt	r4,r2,4018284 <__subdf3+0x3c4>
 4017ff8:	010007c4 	movi	r4,31
 4017ffc:	2080c616 	blt	r4,r2,4018318 <__subdf3+0x458>
 4018000:	01000804 	movi	r4,32
 4018004:	2089c83a 	sub	r4,r4,r2
 4018008:	2910983a 	sll	r8,r5,r4
 401800c:	308ed83a 	srl	r7,r6,r2
 4018010:	3108983a 	sll	r4,r6,r4
 4018014:	2884d83a 	srl	r2,r5,r2
 4018018:	41ccb03a 	or	r6,r8,r7
 401801c:	2008c03a 	cmpne	r4,r4,zero
 4018020:	310cb03a 	or	r6,r6,r4
 4018024:	898dc83a 	sub	r6,r17,r6
 4018028:	89a3803a 	cmpltu	r17,r17,r6
 401802c:	1887c83a 	sub	r3,r3,r2
 4018030:	1c47c83a 	sub	r3,r3,r17
 4018034:	3023883a 	mov	r17,r6
 4018038:	1880202c 	andhi	r2,r3,128
 401803c:	10002326 	beq	r2,zero,40180cc <__subdf3+0x20c>
 4018040:	04c02034 	movhi	r19,128
 4018044:	9cffffc4 	addi	r19,r19,-1
 4018048:	1ce6703a 	and	r19,r3,r19
 401804c:	98007a26 	beq	r19,zero,4018238 <__subdf3+0x378>
 4018050:	9809883a 	mov	r4,r19
 4018054:	40189c00 	call	40189c0 <__clzsi2>
 4018058:	113ffe04 	addi	r4,r2,-8
 401805c:	00c007c4 	movi	r3,31
 4018060:	19007b16 	blt	r3,r4,4018250 <__subdf3+0x390>
 4018064:	00800804 	movi	r2,32
 4018068:	1105c83a 	sub	r2,r2,r4
 401806c:	8884d83a 	srl	r2,r17,r2
 4018070:	9906983a 	sll	r3,r19,r4
 4018074:	8922983a 	sll	r17,r17,r4
 4018078:	10c4b03a 	or	r2,r2,r3
 401807c:	24007816 	blt	r4,r16,4018260 <__subdf3+0x3a0>
 4018080:	2421c83a 	sub	r16,r4,r16
 4018084:	80c00044 	addi	r3,r16,1
 4018088:	010007c4 	movi	r4,31
 401808c:	20c09516 	blt	r4,r3,40182e4 <__subdf3+0x424>
 4018090:	01400804 	movi	r5,32
 4018094:	28cbc83a 	sub	r5,r5,r3
 4018098:	88c8d83a 	srl	r4,r17,r3
 401809c:	8962983a 	sll	r17,r17,r5
 40180a0:	114a983a 	sll	r5,r2,r5
 40180a4:	10c6d83a 	srl	r3,r2,r3
 40180a8:	8804c03a 	cmpne	r2,r17,zero
 40180ac:	290ab03a 	or	r5,r5,r4
 40180b0:	28a2b03a 	or	r17,r5,r2
 40180b4:	0021883a 	mov	r16,zero
 40180b8:	003fa206 	br	4017f44 <__alt_data_end+0xfc017f44>
 40180bc:	2090b03a 	or	r8,r4,r2
 40180c0:	40018e26 	beq	r8,zero,40186fc <__subdf3+0x83c>
 40180c4:	1007883a 	mov	r3,r2
 40180c8:	2023883a 	mov	r17,r4
 40180cc:	888001cc 	andi	r2,r17,7
 40180d0:	103f9e1e 	bne	r2,zero,4017f4c <__alt_data_end+0xfc017f4c>
 40180d4:	1804977a 	slli	r2,r3,29
 40180d8:	8822d0fa 	srli	r17,r17,3
 40180dc:	1810d0fa 	srli	r8,r3,3
 40180e0:	9100004c 	andi	r4,r18,1
 40180e4:	1444b03a 	or	r2,r2,r17
 40180e8:	00c1ffc4 	movi	r3,2047
 40180ec:	80c02826 	beq	r16,r3,4018190 <__subdf3+0x2d0>
 40180f0:	01400434 	movhi	r5,16
 40180f4:	297fffc4 	addi	r5,r5,-1
 40180f8:	80e0703a 	and	r16,r16,r3
 40180fc:	414a703a 	and	r5,r8,r5
 4018100:	003fa806 	br	4017fa4 <__alt_data_end+0xfc017fa4>
 4018104:	0080630e 	bge	zero,r2,4018294 <__subdf3+0x3d4>
 4018108:	48003026 	beq	r9,zero,40181cc <__subdf3+0x30c>
 401810c:	0101ffc4 	movi	r4,2047
 4018110:	813f8c26 	beq	r16,r4,4017f44 <__alt_data_end+0xfc017f44>
 4018114:	29402034 	orhi	r5,r5,128
 4018118:	01000e04 	movi	r4,56
 401811c:	2080a90e 	bge	r4,r2,40183c4 <__subdf3+0x504>
 4018120:	298cb03a 	or	r6,r5,r6
 4018124:	3012c03a 	cmpne	r9,r6,zero
 4018128:	0005883a 	mov	r2,zero
 401812c:	4c53883a 	add	r9,r9,r17
 4018130:	4c63803a 	cmpltu	r17,r9,r17
 4018134:	10c7883a 	add	r3,r2,r3
 4018138:	88c7883a 	add	r3,r17,r3
 401813c:	4823883a 	mov	r17,r9
 4018140:	1880202c 	andhi	r2,r3,128
 4018144:	1000d026 	beq	r2,zero,4018488 <__subdf3+0x5c8>
 4018148:	84000044 	addi	r16,r16,1
 401814c:	0081ffc4 	movi	r2,2047
 4018150:	8080fe26 	beq	r16,r2,401854c <__subdf3+0x68c>
 4018154:	00bfe034 	movhi	r2,65408
 4018158:	10bfffc4 	addi	r2,r2,-1
 401815c:	1886703a 	and	r3,r3,r2
 4018160:	880ad07a 	srli	r5,r17,1
 4018164:	180497fa 	slli	r2,r3,31
 4018168:	8900004c 	andi	r4,r17,1
 401816c:	2922b03a 	or	r17,r5,r4
 4018170:	1806d07a 	srli	r3,r3,1
 4018174:	1462b03a 	or	r17,r2,r17
 4018178:	3825883a 	mov	r18,r7
 401817c:	003f7106 	br	4017f44 <__alt_data_end+0xfc017f44>
 4018180:	2984b03a 	or	r2,r5,r6
 4018184:	103f6826 	beq	r2,zero,4017f28 <__alt_data_end+0xfc017f28>
 4018188:	39c03fcc 	andi	r7,r7,255
 401818c:	003f6706 	br	4017f2c <__alt_data_end+0xfc017f2c>
 4018190:	4086b03a 	or	r3,r8,r2
 4018194:	18015226 	beq	r3,zero,40186e0 <__subdf3+0x820>
 4018198:	00c00434 	movhi	r3,16
 401819c:	41400234 	orhi	r5,r8,8
 40181a0:	18ffffc4 	addi	r3,r3,-1
 40181a4:	28ca703a 	and	r5,r5,r3
 40181a8:	003f7e06 	br	4017fa4 <__alt_data_end+0xfc017fa4>
 40181ac:	10bfffc4 	addi	r2,r2,-1
 40181b0:	1000491e 	bne	r2,zero,40182d8 <__subdf3+0x418>
 40181b4:	898fc83a 	sub	r7,r17,r6
 40181b8:	89e3803a 	cmpltu	r17,r17,r7
 40181bc:	1947c83a 	sub	r3,r3,r5
 40181c0:	1c47c83a 	sub	r3,r3,r17
 40181c4:	3823883a 	mov	r17,r7
 40181c8:	003f9b06 	br	4018038 <__alt_data_end+0xfc018038>
 40181cc:	2988b03a 	or	r4,r5,r6
 40181d0:	203f5c26 	beq	r4,zero,4017f44 <__alt_data_end+0xfc017f44>
 40181d4:	10bfffc4 	addi	r2,r2,-1
 40181d8:	1000931e 	bne	r2,zero,4018428 <__subdf3+0x568>
 40181dc:	898d883a 	add	r6,r17,r6
 40181e0:	3463803a 	cmpltu	r17,r6,r17
 40181e4:	1947883a 	add	r3,r3,r5
 40181e8:	88c7883a 	add	r3,r17,r3
 40181ec:	3023883a 	mov	r17,r6
 40181f0:	003fd306 	br	4018140 <__alt_data_end+0xfc018140>
 40181f4:	1000541e 	bne	r2,zero,4018348 <__subdf3+0x488>
 40181f8:	80800044 	addi	r2,r16,1
 40181fc:	1081ffcc 	andi	r2,r2,2047
 4018200:	01000044 	movi	r4,1
 4018204:	2080a20e 	bge	r4,r2,4018490 <__subdf3+0x5d0>
 4018208:	8989c83a 	sub	r4,r17,r6
 401820c:	8905803a 	cmpltu	r2,r17,r4
 4018210:	1967c83a 	sub	r19,r3,r5
 4018214:	98a7c83a 	sub	r19,r19,r2
 4018218:	9880202c 	andhi	r2,r19,128
 401821c:	10006326 	beq	r2,zero,40183ac <__subdf3+0x4ec>
 4018220:	3463c83a 	sub	r17,r6,r17
 4018224:	28c7c83a 	sub	r3,r5,r3
 4018228:	344d803a 	cmpltu	r6,r6,r17
 401822c:	19a7c83a 	sub	r19,r3,r6
 4018230:	3825883a 	mov	r18,r7
 4018234:	983f861e 	bne	r19,zero,4018050 <__alt_data_end+0xfc018050>
 4018238:	8809883a 	mov	r4,r17
 401823c:	40189c00 	call	40189c0 <__clzsi2>
 4018240:	10800804 	addi	r2,r2,32
 4018244:	113ffe04 	addi	r4,r2,-8
 4018248:	00c007c4 	movi	r3,31
 401824c:	193f850e 	bge	r3,r4,4018064 <__alt_data_end+0xfc018064>
 4018250:	10bff604 	addi	r2,r2,-40
 4018254:	8884983a 	sll	r2,r17,r2
 4018258:	0023883a 	mov	r17,zero
 401825c:	243f880e 	bge	r4,r16,4018080 <__alt_data_end+0xfc018080>
 4018260:	00ffe034 	movhi	r3,65408
 4018264:	18ffffc4 	addi	r3,r3,-1
 4018268:	8121c83a 	sub	r16,r16,r4
 401826c:	10c6703a 	and	r3,r2,r3
 4018270:	003f3406 	br	4017f44 <__alt_data_end+0xfc017f44>
 4018274:	9100004c 	andi	r4,r18,1
 4018278:	000b883a 	mov	r5,zero
 401827c:	0005883a 	mov	r2,zero
 4018280:	003f4806 	br	4017fa4 <__alt_data_end+0xfc017fa4>
 4018284:	298cb03a 	or	r6,r5,r6
 4018288:	300cc03a 	cmpne	r6,r6,zero
 401828c:	0005883a 	mov	r2,zero
 4018290:	003f6406 	br	4018024 <__alt_data_end+0xfc018024>
 4018294:	10009a1e 	bne	r2,zero,4018500 <__subdf3+0x640>
 4018298:	82400044 	addi	r9,r16,1
 401829c:	4881ffcc 	andi	r2,r9,2047
 40182a0:	02800044 	movi	r10,1
 40182a4:	5080670e 	bge	r10,r2,4018444 <__subdf3+0x584>
 40182a8:	0081ffc4 	movi	r2,2047
 40182ac:	4880af26 	beq	r9,r2,401856c <__subdf3+0x6ac>
 40182b0:	898d883a 	add	r6,r17,r6
 40182b4:	1945883a 	add	r2,r3,r5
 40182b8:	3447803a 	cmpltu	r3,r6,r17
 40182bc:	1887883a 	add	r3,r3,r2
 40182c0:	182297fa 	slli	r17,r3,31
 40182c4:	300cd07a 	srli	r6,r6,1
 40182c8:	1806d07a 	srli	r3,r3,1
 40182cc:	4821883a 	mov	r16,r9
 40182d0:	89a2b03a 	or	r17,r17,r6
 40182d4:	003f1b06 	br	4017f44 <__alt_data_end+0xfc017f44>
 40182d8:	0101ffc4 	movi	r4,2047
 40182dc:	813f441e 	bne	r16,r4,4017ff0 <__alt_data_end+0xfc017ff0>
 40182e0:	003f1806 	br	4017f44 <__alt_data_end+0xfc017f44>
 40182e4:	843ff844 	addi	r16,r16,-31
 40182e8:	01400804 	movi	r5,32
 40182ec:	1408d83a 	srl	r4,r2,r16
 40182f0:	19405026 	beq	r3,r5,4018434 <__subdf3+0x574>
 40182f4:	01401004 	movi	r5,64
 40182f8:	28c7c83a 	sub	r3,r5,r3
 40182fc:	10c4983a 	sll	r2,r2,r3
 4018300:	88a2b03a 	or	r17,r17,r2
 4018304:	8822c03a 	cmpne	r17,r17,zero
 4018308:	2462b03a 	or	r17,r4,r17
 401830c:	0007883a 	mov	r3,zero
 4018310:	0021883a 	mov	r16,zero
 4018314:	003f6d06 	br	40180cc <__alt_data_end+0xfc0180cc>
 4018318:	11fff804 	addi	r7,r2,-32
 401831c:	01000804 	movi	r4,32
 4018320:	29ced83a 	srl	r7,r5,r7
 4018324:	11004526 	beq	r2,r4,401843c <__subdf3+0x57c>
 4018328:	01001004 	movi	r4,64
 401832c:	2089c83a 	sub	r4,r4,r2
 4018330:	2904983a 	sll	r2,r5,r4
 4018334:	118cb03a 	or	r6,r2,r6
 4018338:	300cc03a 	cmpne	r6,r6,zero
 401833c:	398cb03a 	or	r6,r7,r6
 4018340:	0005883a 	mov	r2,zero
 4018344:	003f3706 	br	4018024 <__alt_data_end+0xfc018024>
 4018348:	80002a26 	beq	r16,zero,40183f4 <__subdf3+0x534>
 401834c:	0101ffc4 	movi	r4,2047
 4018350:	49006626 	beq	r9,r4,40184ec <__subdf3+0x62c>
 4018354:	0085c83a 	sub	r2,zero,r2
 4018358:	18c02034 	orhi	r3,r3,128
 401835c:	01000e04 	movi	r4,56
 4018360:	20807e16 	blt	r4,r2,401855c <__subdf3+0x69c>
 4018364:	010007c4 	movi	r4,31
 4018368:	2080e716 	blt	r4,r2,4018708 <__subdf3+0x848>
 401836c:	01000804 	movi	r4,32
 4018370:	2089c83a 	sub	r4,r4,r2
 4018374:	1914983a 	sll	r10,r3,r4
 4018378:	8890d83a 	srl	r8,r17,r2
 401837c:	8908983a 	sll	r4,r17,r4
 4018380:	1884d83a 	srl	r2,r3,r2
 4018384:	5222b03a 	or	r17,r10,r8
 4018388:	2006c03a 	cmpne	r3,r4,zero
 401838c:	88e2b03a 	or	r17,r17,r3
 4018390:	3463c83a 	sub	r17,r6,r17
 4018394:	2885c83a 	sub	r2,r5,r2
 4018398:	344d803a 	cmpltu	r6,r6,r17
 401839c:	1187c83a 	sub	r3,r2,r6
 40183a0:	4821883a 	mov	r16,r9
 40183a4:	3825883a 	mov	r18,r7
 40183a8:	003f2306 	br	4018038 <__alt_data_end+0xfc018038>
 40183ac:	24d0b03a 	or	r8,r4,r19
 40183b0:	40001b1e 	bne	r8,zero,4018420 <__subdf3+0x560>
 40183b4:	0005883a 	mov	r2,zero
 40183b8:	0009883a 	mov	r4,zero
 40183bc:	0021883a 	mov	r16,zero
 40183c0:	003f4906 	br	40180e8 <__alt_data_end+0xfc0180e8>
 40183c4:	010007c4 	movi	r4,31
 40183c8:	20803a16 	blt	r4,r2,40184b4 <__subdf3+0x5f4>
 40183cc:	01000804 	movi	r4,32
 40183d0:	2089c83a 	sub	r4,r4,r2
 40183d4:	2912983a 	sll	r9,r5,r4
 40183d8:	3090d83a 	srl	r8,r6,r2
 40183dc:	3108983a 	sll	r4,r6,r4
 40183e0:	2884d83a 	srl	r2,r5,r2
 40183e4:	4a12b03a 	or	r9,r9,r8
 40183e8:	2008c03a 	cmpne	r4,r4,zero
 40183ec:	4912b03a 	or	r9,r9,r4
 40183f0:	003f4e06 	br	401812c <__alt_data_end+0xfc01812c>
 40183f4:	1c48b03a 	or	r4,r3,r17
 40183f8:	20003c26 	beq	r4,zero,40184ec <__subdf3+0x62c>
 40183fc:	0084303a 	nor	r2,zero,r2
 4018400:	1000381e 	bne	r2,zero,40184e4 <__subdf3+0x624>
 4018404:	3463c83a 	sub	r17,r6,r17
 4018408:	28c5c83a 	sub	r2,r5,r3
 401840c:	344d803a 	cmpltu	r6,r6,r17
 4018410:	1187c83a 	sub	r3,r2,r6
 4018414:	4821883a 	mov	r16,r9
 4018418:	3825883a 	mov	r18,r7
 401841c:	003f0606 	br	4018038 <__alt_data_end+0xfc018038>
 4018420:	2023883a 	mov	r17,r4
 4018424:	003f0906 	br	401804c <__alt_data_end+0xfc01804c>
 4018428:	0101ffc4 	movi	r4,2047
 401842c:	813f3a1e 	bne	r16,r4,4018118 <__alt_data_end+0xfc018118>
 4018430:	003ec406 	br	4017f44 <__alt_data_end+0xfc017f44>
 4018434:	0005883a 	mov	r2,zero
 4018438:	003fb106 	br	4018300 <__alt_data_end+0xfc018300>
 401843c:	0005883a 	mov	r2,zero
 4018440:	003fbc06 	br	4018334 <__alt_data_end+0xfc018334>
 4018444:	1c44b03a 	or	r2,r3,r17
 4018448:	80008e1e 	bne	r16,zero,4018684 <__subdf3+0x7c4>
 401844c:	1000c826 	beq	r2,zero,4018770 <__subdf3+0x8b0>
 4018450:	2984b03a 	or	r2,r5,r6
 4018454:	103ebb26 	beq	r2,zero,4017f44 <__alt_data_end+0xfc017f44>
 4018458:	8989883a 	add	r4,r17,r6
 401845c:	1945883a 	add	r2,r3,r5
 4018460:	2447803a 	cmpltu	r3,r4,r17
 4018464:	1887883a 	add	r3,r3,r2
 4018468:	1880202c 	andhi	r2,r3,128
 401846c:	2023883a 	mov	r17,r4
 4018470:	103f1626 	beq	r2,zero,40180cc <__alt_data_end+0xfc0180cc>
 4018474:	00bfe034 	movhi	r2,65408
 4018478:	10bfffc4 	addi	r2,r2,-1
 401847c:	5021883a 	mov	r16,r10
 4018480:	1886703a 	and	r3,r3,r2
 4018484:	003eaf06 	br	4017f44 <__alt_data_end+0xfc017f44>
 4018488:	3825883a 	mov	r18,r7
 401848c:	003f0f06 	br	40180cc <__alt_data_end+0xfc0180cc>
 4018490:	1c44b03a 	or	r2,r3,r17
 4018494:	8000251e 	bne	r16,zero,401852c <__subdf3+0x66c>
 4018498:	1000661e 	bne	r2,zero,4018634 <__subdf3+0x774>
 401849c:	2990b03a 	or	r8,r5,r6
 40184a0:	40009626 	beq	r8,zero,40186fc <__subdf3+0x83c>
 40184a4:	2807883a 	mov	r3,r5
 40184a8:	3023883a 	mov	r17,r6
 40184ac:	3825883a 	mov	r18,r7
 40184b0:	003ea406 	br	4017f44 <__alt_data_end+0xfc017f44>
 40184b4:	127ff804 	addi	r9,r2,-32
 40184b8:	01000804 	movi	r4,32
 40184bc:	2a52d83a 	srl	r9,r5,r9
 40184c0:	11008c26 	beq	r2,r4,40186f4 <__subdf3+0x834>
 40184c4:	01001004 	movi	r4,64
 40184c8:	2085c83a 	sub	r2,r4,r2
 40184cc:	2884983a 	sll	r2,r5,r2
 40184d0:	118cb03a 	or	r6,r2,r6
 40184d4:	300cc03a 	cmpne	r6,r6,zero
 40184d8:	4992b03a 	or	r9,r9,r6
 40184dc:	0005883a 	mov	r2,zero
 40184e0:	003f1206 	br	401812c <__alt_data_end+0xfc01812c>
 40184e4:	0101ffc4 	movi	r4,2047
 40184e8:	493f9c1e 	bne	r9,r4,401835c <__alt_data_end+0xfc01835c>
 40184ec:	2807883a 	mov	r3,r5
 40184f0:	3023883a 	mov	r17,r6
 40184f4:	4821883a 	mov	r16,r9
 40184f8:	3825883a 	mov	r18,r7
 40184fc:	003e9106 	br	4017f44 <__alt_data_end+0xfc017f44>
 4018500:	80001f1e 	bne	r16,zero,4018580 <__subdf3+0x6c0>
 4018504:	1c48b03a 	or	r4,r3,r17
 4018508:	20005a26 	beq	r4,zero,4018674 <__subdf3+0x7b4>
 401850c:	0084303a 	nor	r2,zero,r2
 4018510:	1000561e 	bne	r2,zero,401866c <__subdf3+0x7ac>
 4018514:	89a3883a 	add	r17,r17,r6
 4018518:	1945883a 	add	r2,r3,r5
 401851c:	898d803a 	cmpltu	r6,r17,r6
 4018520:	3087883a 	add	r3,r6,r2
 4018524:	4821883a 	mov	r16,r9
 4018528:	003f0506 	br	4018140 <__alt_data_end+0xfc018140>
 401852c:	10002b1e 	bne	r2,zero,40185dc <__subdf3+0x71c>
 4018530:	2984b03a 	or	r2,r5,r6
 4018534:	10008026 	beq	r2,zero,4018738 <__subdf3+0x878>
 4018538:	2807883a 	mov	r3,r5
 401853c:	3023883a 	mov	r17,r6
 4018540:	3825883a 	mov	r18,r7
 4018544:	0401ffc4 	movi	r16,2047
 4018548:	003e7e06 	br	4017f44 <__alt_data_end+0xfc017f44>
 401854c:	3809883a 	mov	r4,r7
 4018550:	0011883a 	mov	r8,zero
 4018554:	0005883a 	mov	r2,zero
 4018558:	003ee306 	br	40180e8 <__alt_data_end+0xfc0180e8>
 401855c:	1c62b03a 	or	r17,r3,r17
 4018560:	8822c03a 	cmpne	r17,r17,zero
 4018564:	0005883a 	mov	r2,zero
 4018568:	003f8906 	br	4018390 <__alt_data_end+0xfc018390>
 401856c:	3809883a 	mov	r4,r7
 4018570:	4821883a 	mov	r16,r9
 4018574:	0011883a 	mov	r8,zero
 4018578:	0005883a 	mov	r2,zero
 401857c:	003eda06 	br	40180e8 <__alt_data_end+0xfc0180e8>
 4018580:	0101ffc4 	movi	r4,2047
 4018584:	49003b26 	beq	r9,r4,4018674 <__subdf3+0x7b4>
 4018588:	0085c83a 	sub	r2,zero,r2
 401858c:	18c02034 	orhi	r3,r3,128
 4018590:	01000e04 	movi	r4,56
 4018594:	20806e16 	blt	r4,r2,4018750 <__subdf3+0x890>
 4018598:	010007c4 	movi	r4,31
 401859c:	20807716 	blt	r4,r2,401877c <__subdf3+0x8bc>
 40185a0:	01000804 	movi	r4,32
 40185a4:	2089c83a 	sub	r4,r4,r2
 40185a8:	1914983a 	sll	r10,r3,r4
 40185ac:	8890d83a 	srl	r8,r17,r2
 40185b0:	8908983a 	sll	r4,r17,r4
 40185b4:	1884d83a 	srl	r2,r3,r2
 40185b8:	5222b03a 	or	r17,r10,r8
 40185bc:	2006c03a 	cmpne	r3,r4,zero
 40185c0:	88e2b03a 	or	r17,r17,r3
 40185c4:	89a3883a 	add	r17,r17,r6
 40185c8:	1145883a 	add	r2,r2,r5
 40185cc:	898d803a 	cmpltu	r6,r17,r6
 40185d0:	3087883a 	add	r3,r6,r2
 40185d4:	4821883a 	mov	r16,r9
 40185d8:	003ed906 	br	4018140 <__alt_data_end+0xfc018140>
 40185dc:	2984b03a 	or	r2,r5,r6
 40185e0:	10004226 	beq	r2,zero,40186ec <__subdf3+0x82c>
 40185e4:	1808d0fa 	srli	r4,r3,3
 40185e8:	8822d0fa 	srli	r17,r17,3
 40185ec:	1806977a 	slli	r3,r3,29
 40185f0:	2080022c 	andhi	r2,r4,8
 40185f4:	1c62b03a 	or	r17,r3,r17
 40185f8:	10000826 	beq	r2,zero,401861c <__subdf3+0x75c>
 40185fc:	2812d0fa 	srli	r9,r5,3
 4018600:	4880022c 	andhi	r2,r9,8
 4018604:	1000051e 	bne	r2,zero,401861c <__subdf3+0x75c>
 4018608:	300cd0fa 	srli	r6,r6,3
 401860c:	2804977a 	slli	r2,r5,29
 4018610:	4809883a 	mov	r4,r9
 4018614:	3825883a 	mov	r18,r7
 4018618:	11a2b03a 	or	r17,r2,r6
 401861c:	8806d77a 	srli	r3,r17,29
 4018620:	200890fa 	slli	r4,r4,3
 4018624:	882290fa 	slli	r17,r17,3
 4018628:	0401ffc4 	movi	r16,2047
 401862c:	1906b03a 	or	r3,r3,r4
 4018630:	003e4406 	br	4017f44 <__alt_data_end+0xfc017f44>
 4018634:	2984b03a 	or	r2,r5,r6
 4018638:	103e4226 	beq	r2,zero,4017f44 <__alt_data_end+0xfc017f44>
 401863c:	8989c83a 	sub	r4,r17,r6
 4018640:	8911803a 	cmpltu	r8,r17,r4
 4018644:	1945c83a 	sub	r2,r3,r5
 4018648:	1205c83a 	sub	r2,r2,r8
 401864c:	1200202c 	andhi	r8,r2,128
 4018650:	403e9a26 	beq	r8,zero,40180bc <__alt_data_end+0xfc0180bc>
 4018654:	3463c83a 	sub	r17,r6,r17
 4018658:	28c5c83a 	sub	r2,r5,r3
 401865c:	344d803a 	cmpltu	r6,r6,r17
 4018660:	1187c83a 	sub	r3,r2,r6
 4018664:	3825883a 	mov	r18,r7
 4018668:	003e3606 	br	4017f44 <__alt_data_end+0xfc017f44>
 401866c:	0101ffc4 	movi	r4,2047
 4018670:	493fc71e 	bne	r9,r4,4018590 <__alt_data_end+0xfc018590>
 4018674:	2807883a 	mov	r3,r5
 4018678:	3023883a 	mov	r17,r6
 401867c:	4821883a 	mov	r16,r9
 4018680:	003e3006 	br	4017f44 <__alt_data_end+0xfc017f44>
 4018684:	10003626 	beq	r2,zero,4018760 <__subdf3+0x8a0>
 4018688:	2984b03a 	or	r2,r5,r6
 401868c:	10001726 	beq	r2,zero,40186ec <__subdf3+0x82c>
 4018690:	1808d0fa 	srli	r4,r3,3
 4018694:	8822d0fa 	srli	r17,r17,3
 4018698:	1806977a 	slli	r3,r3,29
 401869c:	2080022c 	andhi	r2,r4,8
 40186a0:	1c62b03a 	or	r17,r3,r17
 40186a4:	10000726 	beq	r2,zero,40186c4 <__subdf3+0x804>
 40186a8:	2812d0fa 	srli	r9,r5,3
 40186ac:	4880022c 	andhi	r2,r9,8
 40186b0:	1000041e 	bne	r2,zero,40186c4 <__subdf3+0x804>
 40186b4:	300cd0fa 	srli	r6,r6,3
 40186b8:	2804977a 	slli	r2,r5,29
 40186bc:	4809883a 	mov	r4,r9
 40186c0:	11a2b03a 	or	r17,r2,r6
 40186c4:	8806d77a 	srli	r3,r17,29
 40186c8:	200890fa 	slli	r4,r4,3
 40186cc:	882290fa 	slli	r17,r17,3
 40186d0:	3825883a 	mov	r18,r7
 40186d4:	1906b03a 	or	r3,r3,r4
 40186d8:	0401ffc4 	movi	r16,2047
 40186dc:	003e1906 	br	4017f44 <__alt_data_end+0xfc017f44>
 40186e0:	000b883a 	mov	r5,zero
 40186e4:	0005883a 	mov	r2,zero
 40186e8:	003e2e06 	br	4017fa4 <__alt_data_end+0xfc017fa4>
 40186ec:	0401ffc4 	movi	r16,2047
 40186f0:	003e1406 	br	4017f44 <__alt_data_end+0xfc017f44>
 40186f4:	0005883a 	mov	r2,zero
 40186f8:	003f7506 	br	40184d0 <__alt_data_end+0xfc0184d0>
 40186fc:	0005883a 	mov	r2,zero
 4018700:	0009883a 	mov	r4,zero
 4018704:	003e7806 	br	40180e8 <__alt_data_end+0xfc0180e8>
 4018708:	123ff804 	addi	r8,r2,-32
 401870c:	01000804 	movi	r4,32
 4018710:	1a10d83a 	srl	r8,r3,r8
 4018714:	11002526 	beq	r2,r4,40187ac <__subdf3+0x8ec>
 4018718:	01001004 	movi	r4,64
 401871c:	2085c83a 	sub	r2,r4,r2
 4018720:	1884983a 	sll	r2,r3,r2
 4018724:	1444b03a 	or	r2,r2,r17
 4018728:	1004c03a 	cmpne	r2,r2,zero
 401872c:	40a2b03a 	or	r17,r8,r2
 4018730:	0005883a 	mov	r2,zero
 4018734:	003f1606 	br	4018390 <__alt_data_end+0xfc018390>
 4018738:	02000434 	movhi	r8,16
 401873c:	0009883a 	mov	r4,zero
 4018740:	423fffc4 	addi	r8,r8,-1
 4018744:	00bfffc4 	movi	r2,-1
 4018748:	0401ffc4 	movi	r16,2047
 401874c:	003e6606 	br	40180e8 <__alt_data_end+0xfc0180e8>
 4018750:	1c62b03a 	or	r17,r3,r17
 4018754:	8822c03a 	cmpne	r17,r17,zero
 4018758:	0005883a 	mov	r2,zero
 401875c:	003f9906 	br	40185c4 <__alt_data_end+0xfc0185c4>
 4018760:	2807883a 	mov	r3,r5
 4018764:	3023883a 	mov	r17,r6
 4018768:	0401ffc4 	movi	r16,2047
 401876c:	003df506 	br	4017f44 <__alt_data_end+0xfc017f44>
 4018770:	2807883a 	mov	r3,r5
 4018774:	3023883a 	mov	r17,r6
 4018778:	003df206 	br	4017f44 <__alt_data_end+0xfc017f44>
 401877c:	123ff804 	addi	r8,r2,-32
 4018780:	01000804 	movi	r4,32
 4018784:	1a10d83a 	srl	r8,r3,r8
 4018788:	11000a26 	beq	r2,r4,40187b4 <__subdf3+0x8f4>
 401878c:	01001004 	movi	r4,64
 4018790:	2085c83a 	sub	r2,r4,r2
 4018794:	1884983a 	sll	r2,r3,r2
 4018798:	1444b03a 	or	r2,r2,r17
 401879c:	1004c03a 	cmpne	r2,r2,zero
 40187a0:	40a2b03a 	or	r17,r8,r2
 40187a4:	0005883a 	mov	r2,zero
 40187a8:	003f8606 	br	40185c4 <__alt_data_end+0xfc0185c4>
 40187ac:	0005883a 	mov	r2,zero
 40187b0:	003fdc06 	br	4018724 <__alt_data_end+0xfc018724>
 40187b4:	0005883a 	mov	r2,zero
 40187b8:	003ff706 	br	4018798 <__alt_data_end+0xfc018798>

040187bc <__fixdfsi>:
 40187bc:	280cd53a 	srli	r6,r5,20
 40187c0:	00c00434 	movhi	r3,16
 40187c4:	18ffffc4 	addi	r3,r3,-1
 40187c8:	3181ffcc 	andi	r6,r6,2047
 40187cc:	01c0ff84 	movi	r7,1022
 40187d0:	28c6703a 	and	r3,r5,r3
 40187d4:	280ad7fa 	srli	r5,r5,31
 40187d8:	3980120e 	bge	r7,r6,4018824 <__fixdfsi+0x68>
 40187dc:	00810744 	movi	r2,1053
 40187e0:	11800c16 	blt	r2,r6,4018814 <__fixdfsi+0x58>
 40187e4:	00810cc4 	movi	r2,1075
 40187e8:	1185c83a 	sub	r2,r2,r6
 40187ec:	01c007c4 	movi	r7,31
 40187f0:	18c00434 	orhi	r3,r3,16
 40187f4:	38800d16 	blt	r7,r2,401882c <__fixdfsi+0x70>
 40187f8:	31befb44 	addi	r6,r6,-1043
 40187fc:	2084d83a 	srl	r2,r4,r2
 4018800:	1986983a 	sll	r3,r3,r6
 4018804:	1884b03a 	or	r2,r3,r2
 4018808:	28000726 	beq	r5,zero,4018828 <__fixdfsi+0x6c>
 401880c:	0085c83a 	sub	r2,zero,r2
 4018810:	f800283a 	ret
 4018814:	00a00034 	movhi	r2,32768
 4018818:	10bfffc4 	addi	r2,r2,-1
 401881c:	2885883a 	add	r2,r5,r2
 4018820:	f800283a 	ret
 4018824:	0005883a 	mov	r2,zero
 4018828:	f800283a 	ret
 401882c:	008104c4 	movi	r2,1043
 4018830:	1185c83a 	sub	r2,r2,r6
 4018834:	1884d83a 	srl	r2,r3,r2
 4018838:	003ff306 	br	4018808 <__alt_data_end+0xfc018808>

0401883c <__floatsidf>:
 401883c:	defffd04 	addi	sp,sp,-12
 4018840:	dfc00215 	stw	ra,8(sp)
 4018844:	dc400115 	stw	r17,4(sp)
 4018848:	dc000015 	stw	r16,0(sp)
 401884c:	20002b26 	beq	r4,zero,40188fc <__floatsidf+0xc0>
 4018850:	2023883a 	mov	r17,r4
 4018854:	2020d7fa 	srli	r16,r4,31
 4018858:	20002d16 	blt	r4,zero,4018910 <__floatsidf+0xd4>
 401885c:	8809883a 	mov	r4,r17
 4018860:	40189c00 	call	40189c0 <__clzsi2>
 4018864:	01410784 	movi	r5,1054
 4018868:	288bc83a 	sub	r5,r5,r2
 401886c:	01010cc4 	movi	r4,1075
 4018870:	2149c83a 	sub	r4,r4,r5
 4018874:	00c007c4 	movi	r3,31
 4018878:	1900160e 	bge	r3,r4,40188d4 <__floatsidf+0x98>
 401887c:	00c104c4 	movi	r3,1043
 4018880:	1947c83a 	sub	r3,r3,r5
 4018884:	88c6983a 	sll	r3,r17,r3
 4018888:	00800434 	movhi	r2,16
 401888c:	10bfffc4 	addi	r2,r2,-1
 4018890:	1886703a 	and	r3,r3,r2
 4018894:	2941ffcc 	andi	r5,r5,2047
 4018898:	800d883a 	mov	r6,r16
 401889c:	0005883a 	mov	r2,zero
 40188a0:	280a953a 	slli	r5,r5,20
 40188a4:	31803fcc 	andi	r6,r6,255
 40188a8:	01000434 	movhi	r4,16
 40188ac:	300c97fa 	slli	r6,r6,31
 40188b0:	213fffc4 	addi	r4,r4,-1
 40188b4:	1906703a 	and	r3,r3,r4
 40188b8:	1946b03a 	or	r3,r3,r5
 40188bc:	1986b03a 	or	r3,r3,r6
 40188c0:	dfc00217 	ldw	ra,8(sp)
 40188c4:	dc400117 	ldw	r17,4(sp)
 40188c8:	dc000017 	ldw	r16,0(sp)
 40188cc:	dec00304 	addi	sp,sp,12
 40188d0:	f800283a 	ret
 40188d4:	00c002c4 	movi	r3,11
 40188d8:	1887c83a 	sub	r3,r3,r2
 40188dc:	88c6d83a 	srl	r3,r17,r3
 40188e0:	8904983a 	sll	r2,r17,r4
 40188e4:	01000434 	movhi	r4,16
 40188e8:	213fffc4 	addi	r4,r4,-1
 40188ec:	2941ffcc 	andi	r5,r5,2047
 40188f0:	1906703a 	and	r3,r3,r4
 40188f4:	800d883a 	mov	r6,r16
 40188f8:	003fe906 	br	40188a0 <__alt_data_end+0xfc0188a0>
 40188fc:	000d883a 	mov	r6,zero
 4018900:	000b883a 	mov	r5,zero
 4018904:	0007883a 	mov	r3,zero
 4018908:	0005883a 	mov	r2,zero
 401890c:	003fe406 	br	40188a0 <__alt_data_end+0xfc0188a0>
 4018910:	0123c83a 	sub	r17,zero,r4
 4018914:	003fd106 	br	401885c <__alt_data_end+0xfc01885c>

04018918 <__floatunsidf>:
 4018918:	defffe04 	addi	sp,sp,-8
 401891c:	dc000015 	stw	r16,0(sp)
 4018920:	dfc00115 	stw	ra,4(sp)
 4018924:	2021883a 	mov	r16,r4
 4018928:	20002226 	beq	r4,zero,40189b4 <__floatunsidf+0x9c>
 401892c:	40189c00 	call	40189c0 <__clzsi2>
 4018930:	01010784 	movi	r4,1054
 4018934:	2089c83a 	sub	r4,r4,r2
 4018938:	01810cc4 	movi	r6,1075
 401893c:	310dc83a 	sub	r6,r6,r4
 4018940:	00c007c4 	movi	r3,31
 4018944:	1980120e 	bge	r3,r6,4018990 <__floatunsidf+0x78>
 4018948:	00c104c4 	movi	r3,1043
 401894c:	1907c83a 	sub	r3,r3,r4
 4018950:	80ca983a 	sll	r5,r16,r3
 4018954:	00800434 	movhi	r2,16
 4018958:	10bfffc4 	addi	r2,r2,-1
 401895c:	2101ffcc 	andi	r4,r4,2047
 4018960:	0021883a 	mov	r16,zero
 4018964:	288a703a 	and	r5,r5,r2
 4018968:	2008953a 	slli	r4,r4,20
 401896c:	00c00434 	movhi	r3,16
 4018970:	18ffffc4 	addi	r3,r3,-1
 4018974:	28c6703a 	and	r3,r5,r3
 4018978:	8005883a 	mov	r2,r16
 401897c:	1906b03a 	or	r3,r3,r4
 4018980:	dfc00117 	ldw	ra,4(sp)
 4018984:	dc000017 	ldw	r16,0(sp)
 4018988:	dec00204 	addi	sp,sp,8
 401898c:	f800283a 	ret
 4018990:	00c002c4 	movi	r3,11
 4018994:	188bc83a 	sub	r5,r3,r2
 4018998:	814ad83a 	srl	r5,r16,r5
 401899c:	00c00434 	movhi	r3,16
 40189a0:	18ffffc4 	addi	r3,r3,-1
 40189a4:	81a0983a 	sll	r16,r16,r6
 40189a8:	2101ffcc 	andi	r4,r4,2047
 40189ac:	28ca703a 	and	r5,r5,r3
 40189b0:	003fed06 	br	4018968 <__alt_data_end+0xfc018968>
 40189b4:	0009883a 	mov	r4,zero
 40189b8:	000b883a 	mov	r5,zero
 40189bc:	003fea06 	br	4018968 <__alt_data_end+0xfc018968>

040189c0 <__clzsi2>:
 40189c0:	00bfffd4 	movui	r2,65535
 40189c4:	11000536 	bltu	r2,r4,40189dc <__clzsi2+0x1c>
 40189c8:	00803fc4 	movi	r2,255
 40189cc:	11000f36 	bltu	r2,r4,4018a0c <__clzsi2+0x4c>
 40189d0:	00800804 	movi	r2,32
 40189d4:	0007883a 	mov	r3,zero
 40189d8:	00000506 	br	40189f0 <__clzsi2+0x30>
 40189dc:	00804034 	movhi	r2,256
 40189e0:	10bfffc4 	addi	r2,r2,-1
 40189e4:	11000c2e 	bgeu	r2,r4,4018a18 <__clzsi2+0x58>
 40189e8:	00800204 	movi	r2,8
 40189ec:	00c00604 	movi	r3,24
 40189f0:	20c8d83a 	srl	r4,r4,r3
 40189f4:	00c100b4 	movhi	r3,1026
 40189f8:	18f43b04 	addi	r3,r3,-12052
 40189fc:	1909883a 	add	r4,r3,r4
 4018a00:	20c00003 	ldbu	r3,0(r4)
 4018a04:	10c5c83a 	sub	r2,r2,r3
 4018a08:	f800283a 	ret
 4018a0c:	00800604 	movi	r2,24
 4018a10:	00c00204 	movi	r3,8
 4018a14:	003ff606 	br	40189f0 <__alt_data_end+0xfc0189f0>
 4018a18:	00800404 	movi	r2,16
 4018a1c:	1007883a 	mov	r3,r2
 4018a20:	003ff306 	br	40189f0 <__alt_data_end+0xfc0189f0>

04018a24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4018a24:	defffe04 	addi	sp,sp,-8
 4018a28:	dfc00115 	stw	ra,4(sp)
 4018a2c:	df000015 	stw	fp,0(sp)
 4018a30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4018a34:	d0a02417 	ldw	r2,-32624(gp)
 4018a38:	10000326 	beq	r2,zero,4018a48 <alt_get_errno+0x24>
 4018a3c:	d0a02417 	ldw	r2,-32624(gp)
 4018a40:	103ee83a 	callr	r2
 4018a44:	00000106 	br	4018a4c <alt_get_errno+0x28>
 4018a48:	d092e304 	addi	r2,gp,19340
}
 4018a4c:	e037883a 	mov	sp,fp
 4018a50:	dfc00117 	ldw	ra,4(sp)
 4018a54:	df000017 	ldw	fp,0(sp)
 4018a58:	dec00204 	addi	sp,sp,8
 4018a5c:	f800283a 	ret

04018a60 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4018a60:	defffb04 	addi	sp,sp,-20
 4018a64:	dfc00415 	stw	ra,16(sp)
 4018a68:	df000315 	stw	fp,12(sp)
 4018a6c:	df000304 	addi	fp,sp,12
 4018a70:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4018a74:	e0bfff17 	ldw	r2,-4(fp)
 4018a78:	10000816 	blt	r2,zero,4018a9c <close+0x3c>
 4018a7c:	01400304 	movi	r5,12
 4018a80:	e13fff17 	ldw	r4,-4(fp)
 4018a84:	400b1dc0 	call	400b1dc <__mulsi3>
 4018a88:	1007883a 	mov	r3,r2
 4018a8c:	008100f4 	movhi	r2,1027
 4018a90:	10a28704 	addi	r2,r2,-30180
 4018a94:	1885883a 	add	r2,r3,r2
 4018a98:	00000106 	br	4018aa0 <close+0x40>
 4018a9c:	0005883a 	mov	r2,zero
 4018aa0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4018aa4:	e0bffd17 	ldw	r2,-12(fp)
 4018aa8:	10001926 	beq	r2,zero,4018b10 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4018aac:	e0bffd17 	ldw	r2,-12(fp)
 4018ab0:	10800017 	ldw	r2,0(r2)
 4018ab4:	10800417 	ldw	r2,16(r2)
 4018ab8:	10000626 	beq	r2,zero,4018ad4 <close+0x74>
 4018abc:	e0bffd17 	ldw	r2,-12(fp)
 4018ac0:	10800017 	ldw	r2,0(r2)
 4018ac4:	10800417 	ldw	r2,16(r2)
 4018ac8:	e13ffd17 	ldw	r4,-12(fp)
 4018acc:	103ee83a 	callr	r2
 4018ad0:	00000106 	br	4018ad8 <close+0x78>
 4018ad4:	0005883a 	mov	r2,zero
 4018ad8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4018adc:	e13fff17 	ldw	r4,-4(fp)
 4018ae0:	40193080 	call	4019308 <alt_release_fd>
    if (rval < 0)
 4018ae4:	e0bffe17 	ldw	r2,-8(fp)
 4018ae8:	1000070e 	bge	r2,zero,4018b08 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4018aec:	4018a240 	call	4018a24 <alt_get_errno>
 4018af0:	1007883a 	mov	r3,r2
 4018af4:	e0bffe17 	ldw	r2,-8(fp)
 4018af8:	0085c83a 	sub	r2,zero,r2
 4018afc:	18800015 	stw	r2,0(r3)
      return -1;
 4018b00:	00bfffc4 	movi	r2,-1
 4018b04:	00000706 	br	4018b24 <close+0xc4>
    }
    return 0;
 4018b08:	0005883a 	mov	r2,zero
 4018b0c:	00000506 	br	4018b24 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4018b10:	4018a240 	call	4018a24 <alt_get_errno>
 4018b14:	1007883a 	mov	r3,r2
 4018b18:	00801444 	movi	r2,81
 4018b1c:	18800015 	stw	r2,0(r3)
    return -1;
 4018b20:	00bfffc4 	movi	r2,-1
  }
}
 4018b24:	e037883a 	mov	sp,fp
 4018b28:	dfc00117 	ldw	ra,4(sp)
 4018b2c:	df000017 	ldw	fp,0(sp)
 4018b30:	dec00204 	addi	sp,sp,8
 4018b34:	f800283a 	ret

04018b38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4018b38:	defffc04 	addi	sp,sp,-16
 4018b3c:	df000315 	stw	fp,12(sp)
 4018b40:	df000304 	addi	fp,sp,12
 4018b44:	e13ffd15 	stw	r4,-12(fp)
 4018b48:	e17ffe15 	stw	r5,-8(fp)
 4018b4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4018b50:	e0bfff17 	ldw	r2,-4(fp)
}
 4018b54:	e037883a 	mov	sp,fp
 4018b58:	df000017 	ldw	fp,0(sp)
 4018b5c:	dec00104 	addi	sp,sp,4
 4018b60:	f800283a 	ret

04018b64 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4018b64:	defffd04 	addi	sp,sp,-12
 4018b68:	df000215 	stw	fp,8(sp)
 4018b6c:	df000204 	addi	fp,sp,8
 4018b70:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4018b74:	0001883a 	nop
 4018b78:	e0bfff17 	ldw	r2,-4(fp)
 4018b7c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4018b80:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4018b84:	10000226 	beq	r2,zero,4018b90 <_exit+0x2c>
    ALT_SIM_FAIL();
 4018b88:	002af070 	cmpltui	zero,zero,43969
 4018b8c:	00000106 	br	4018b94 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4018b90:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4018b94:	003fff06 	br	4018b94 <__alt_data_end+0xfc018b94>

04018b98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4018b98:	defffe04 	addi	sp,sp,-8
 4018b9c:	dfc00115 	stw	ra,4(sp)
 4018ba0:	df000015 	stw	fp,0(sp)
 4018ba4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4018ba8:	d0a02417 	ldw	r2,-32624(gp)
 4018bac:	10000326 	beq	r2,zero,4018bbc <alt_get_errno+0x24>
 4018bb0:	d0a02417 	ldw	r2,-32624(gp)
 4018bb4:	103ee83a 	callr	r2
 4018bb8:	00000106 	br	4018bc0 <alt_get_errno+0x28>
 4018bbc:	d092e304 	addi	r2,gp,19340
}
 4018bc0:	e037883a 	mov	sp,fp
 4018bc4:	dfc00117 	ldw	ra,4(sp)
 4018bc8:	df000017 	ldw	fp,0(sp)
 4018bcc:	dec00204 	addi	sp,sp,8
 4018bd0:	f800283a 	ret

04018bd4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4018bd4:	defffb04 	addi	sp,sp,-20
 4018bd8:	dfc00415 	stw	ra,16(sp)
 4018bdc:	df000315 	stw	fp,12(sp)
 4018be0:	df000304 	addi	fp,sp,12
 4018be4:	e13ffe15 	stw	r4,-8(fp)
 4018be8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4018bec:	e0bffe17 	ldw	r2,-8(fp)
 4018bf0:	10000816 	blt	r2,zero,4018c14 <fstat+0x40>
 4018bf4:	01400304 	movi	r5,12
 4018bf8:	e13ffe17 	ldw	r4,-8(fp)
 4018bfc:	400b1dc0 	call	400b1dc <__mulsi3>
 4018c00:	1007883a 	mov	r3,r2
 4018c04:	008100f4 	movhi	r2,1027
 4018c08:	10a28704 	addi	r2,r2,-30180
 4018c0c:	1885883a 	add	r2,r3,r2
 4018c10:	00000106 	br	4018c18 <fstat+0x44>
 4018c14:	0005883a 	mov	r2,zero
 4018c18:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4018c1c:	e0bffd17 	ldw	r2,-12(fp)
 4018c20:	10001026 	beq	r2,zero,4018c64 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4018c24:	e0bffd17 	ldw	r2,-12(fp)
 4018c28:	10800017 	ldw	r2,0(r2)
 4018c2c:	10800817 	ldw	r2,32(r2)
 4018c30:	10000726 	beq	r2,zero,4018c50 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 4018c34:	e0bffd17 	ldw	r2,-12(fp)
 4018c38:	10800017 	ldw	r2,0(r2)
 4018c3c:	10800817 	ldw	r2,32(r2)
 4018c40:	e17fff17 	ldw	r5,-4(fp)
 4018c44:	e13ffd17 	ldw	r4,-12(fp)
 4018c48:	103ee83a 	callr	r2
 4018c4c:	00000a06 	br	4018c78 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4018c50:	e0bfff17 	ldw	r2,-4(fp)
 4018c54:	00c80004 	movi	r3,8192
 4018c58:	10c00115 	stw	r3,4(r2)
      return 0;
 4018c5c:	0005883a 	mov	r2,zero
 4018c60:	00000506 	br	4018c78 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4018c64:	4018b980 	call	4018b98 <alt_get_errno>
 4018c68:	1007883a 	mov	r3,r2
 4018c6c:	00801444 	movi	r2,81
 4018c70:	18800015 	stw	r2,0(r3)
    return -1;
 4018c74:	00bfffc4 	movi	r2,-1
  }
}
 4018c78:	e037883a 	mov	sp,fp
 4018c7c:	dfc00117 	ldw	ra,4(sp)
 4018c80:	df000017 	ldw	fp,0(sp)
 4018c84:	dec00204 	addi	sp,sp,8
 4018c88:	f800283a 	ret

04018c8c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 4018c8c:	deffff04 	addi	sp,sp,-4
 4018c90:	df000015 	stw	fp,0(sp)
 4018c94:	d839883a 	mov	fp,sp
  return 0;
 4018c98:	0005883a 	mov	r2,zero
}
 4018c9c:	e037883a 	mov	sp,fp
 4018ca0:	df000017 	ldw	fp,0(sp)
 4018ca4:	dec00104 	addi	sp,sp,4
 4018ca8:	f800283a 	ret

04018cac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4018cac:	defffe04 	addi	sp,sp,-8
 4018cb0:	dfc00115 	stw	ra,4(sp)
 4018cb4:	df000015 	stw	fp,0(sp)
 4018cb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4018cbc:	d0a02417 	ldw	r2,-32624(gp)
 4018cc0:	10000326 	beq	r2,zero,4018cd0 <alt_get_errno+0x24>
 4018cc4:	d0a02417 	ldw	r2,-32624(gp)
 4018cc8:	103ee83a 	callr	r2
 4018ccc:	00000106 	br	4018cd4 <alt_get_errno+0x28>
 4018cd0:	d092e304 	addi	r2,gp,19340
}
 4018cd4:	e037883a 	mov	sp,fp
 4018cd8:	dfc00117 	ldw	ra,4(sp)
 4018cdc:	df000017 	ldw	fp,0(sp)
 4018ce0:	dec00204 	addi	sp,sp,8
 4018ce4:	f800283a 	ret

04018ce8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4018ce8:	deffed04 	addi	sp,sp,-76
 4018cec:	dfc01215 	stw	ra,72(sp)
 4018cf0:	df001115 	stw	fp,68(sp)
 4018cf4:	df001104 	addi	fp,sp,68
 4018cf8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4018cfc:	e0bfff17 	ldw	r2,-4(fp)
 4018d00:	10000816 	blt	r2,zero,4018d24 <isatty+0x3c>
 4018d04:	01400304 	movi	r5,12
 4018d08:	e13fff17 	ldw	r4,-4(fp)
 4018d0c:	400b1dc0 	call	400b1dc <__mulsi3>
 4018d10:	1007883a 	mov	r3,r2
 4018d14:	008100f4 	movhi	r2,1027
 4018d18:	10a28704 	addi	r2,r2,-30180
 4018d1c:	1885883a 	add	r2,r3,r2
 4018d20:	00000106 	br	4018d28 <isatty+0x40>
 4018d24:	0005883a 	mov	r2,zero
 4018d28:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4018d2c:	e0bfef17 	ldw	r2,-68(fp)
 4018d30:	10000e26 	beq	r2,zero,4018d6c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4018d34:	e0bfef17 	ldw	r2,-68(fp)
 4018d38:	10800017 	ldw	r2,0(r2)
 4018d3c:	10800817 	ldw	r2,32(r2)
 4018d40:	1000021e 	bne	r2,zero,4018d4c <isatty+0x64>
    {
      return 1;
 4018d44:	00800044 	movi	r2,1
 4018d48:	00000d06 	br	4018d80 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4018d4c:	e0bff004 	addi	r2,fp,-64
 4018d50:	100b883a 	mov	r5,r2
 4018d54:	e13fff17 	ldw	r4,-4(fp)
 4018d58:	4018bd40 	call	4018bd4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4018d5c:	e0bff117 	ldw	r2,-60(fp)
 4018d60:	10880020 	cmpeqi	r2,r2,8192
 4018d64:	10803fcc 	andi	r2,r2,255
 4018d68:	00000506 	br	4018d80 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4018d6c:	4018cac0 	call	4018cac <alt_get_errno>
 4018d70:	1007883a 	mov	r3,r2
 4018d74:	00801444 	movi	r2,81
 4018d78:	18800015 	stw	r2,0(r3)
    return 0;
 4018d7c:	0005883a 	mov	r2,zero
  }
}
 4018d80:	e037883a 	mov	sp,fp
 4018d84:	dfc00117 	ldw	ra,4(sp)
 4018d88:	df000017 	ldw	fp,0(sp)
 4018d8c:	dec00204 	addi	sp,sp,8
 4018d90:	f800283a 	ret

04018d94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4018d94:	defffe04 	addi	sp,sp,-8
 4018d98:	dfc00115 	stw	ra,4(sp)
 4018d9c:	df000015 	stw	fp,0(sp)
 4018da0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4018da4:	d0a02417 	ldw	r2,-32624(gp)
 4018da8:	10000326 	beq	r2,zero,4018db8 <alt_get_errno+0x24>
 4018dac:	d0a02417 	ldw	r2,-32624(gp)
 4018db0:	103ee83a 	callr	r2
 4018db4:	00000106 	br	4018dbc <alt_get_errno+0x28>
 4018db8:	d092e304 	addi	r2,gp,19340
}
 4018dbc:	e037883a 	mov	sp,fp
 4018dc0:	dfc00117 	ldw	ra,4(sp)
 4018dc4:	df000017 	ldw	fp,0(sp)
 4018dc8:	dec00204 	addi	sp,sp,8
 4018dcc:	f800283a 	ret

04018dd0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 4018dd0:	defffb04 	addi	sp,sp,-20
 4018dd4:	dfc00415 	stw	ra,16(sp)
 4018dd8:	df000315 	stw	fp,12(sp)
 4018ddc:	df000304 	addi	fp,sp,12
 4018de0:	e13ffe15 	stw	r4,-8(fp)
 4018de4:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 4018de8:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 4018dec:	e0bffe17 	ldw	r2,-8(fp)
 4018df0:	00802f16 	blt	zero,r2,4018eb0 <kill+0xe0>
  {
    switch (sig)
 4018df4:	e0bfff17 	ldw	r2,-4(fp)
 4018df8:	10800828 	cmpgeui	r2,r2,32
 4018dfc:	1000291e 	bne	r2,zero,4018ea4 <kill+0xd4>
 4018e00:	e0bfff17 	ldw	r2,-4(fp)
 4018e04:	100690ba 	slli	r3,r2,2
 4018e08:	008100b4 	movhi	r2,1026
 4018e0c:	10a38704 	addi	r2,r2,-29156
 4018e10:	1885883a 	add	r2,r3,r2
 4018e14:	10800017 	ldw	r2,0(r2)
 4018e18:	1000683a 	jmp	r2
 4018e1c:	04018ec4 	movi	r16,1595
 4018e20:	04018ea4 	muli	r16,zero,1594
 4018e24:	04018ea4 	muli	r16,zero,1594
 4018e28:	04018e9c 	xori	r16,zero,1594
 4018e2c:	04018e9c 	xori	r16,zero,1594
 4018e30:	04018e9c 	xori	r16,zero,1594
 4018e34:	04018e9c 	xori	r16,zero,1594
 4018e38:	04018ea4 	muli	r16,zero,1594
 4018e3c:	04018e9c 	xori	r16,zero,1594
 4018e40:	04018e9c 	xori	r16,zero,1594
 4018e44:	04018e9c 	xori	r16,zero,1594
 4018e48:	04018e9c 	xori	r16,zero,1594
 4018e4c:	04018e9c 	xori	r16,zero,1594
 4018e50:	04018e9c 	xori	r16,zero,1594
 4018e54:	04018e9c 	xori	r16,zero,1594
 4018e58:	04018e9c 	xori	r16,zero,1594
 4018e5c:	04018ec4 	movi	r16,1595
 4018e60:	04018ea4 	muli	r16,zero,1594
 4018e64:	04018ea4 	muli	r16,zero,1594
 4018e68:	04018ea4 	muli	r16,zero,1594
 4018e6c:	04018ec4 	movi	r16,1595
 4018e70:	04018ea4 	muli	r16,zero,1594
 4018e74:	04018ea4 	muli	r16,zero,1594
 4018e78:	04018e9c 	xori	r16,zero,1594
 4018e7c:	04018e9c 	xori	r16,zero,1594
 4018e80:	04018e9c 	xori	r16,zero,1594
 4018e84:	04018e9c 	xori	r16,zero,1594
 4018e88:	04018e9c 	xori	r16,zero,1594
 4018e8c:	04018ea4 	muli	r16,zero,1594
 4018e90:	04018ea4 	muli	r16,zero,1594
 4018e94:	04018e9c 	xori	r16,zero,1594
 4018e98:	04018e9c 	xori	r16,zero,1594
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 4018e9c:	0009883a 	mov	r4,zero
 4018ea0:	4018b640 	call	4018b64 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 4018ea4:	00800584 	movi	r2,22
 4018ea8:	e0bffd15 	stw	r2,-12(fp)
 4018eac:	00000606 	br	4018ec8 <kill+0xf8>
    }
  }

  else if (pid > 0)
 4018eb0:	e0bffe17 	ldw	r2,-8(fp)
 4018eb4:	0080040e 	bge	zero,r2,4018ec8 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 4018eb8:	008000c4 	movi	r2,3
 4018ebc:	e0bffd15 	stw	r2,-12(fp)
 4018ec0:	00000106 	br	4018ec8 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 4018ec4:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 4018ec8:	e0bffd17 	ldw	r2,-12(fp)
 4018ecc:	10000626 	beq	r2,zero,4018ee8 <kill+0x118>
  {
    ALT_ERRNO = status;
 4018ed0:	4018d940 	call	4018d94 <alt_get_errno>
 4018ed4:	1007883a 	mov	r3,r2
 4018ed8:	e0bffd17 	ldw	r2,-12(fp)
 4018edc:	18800015 	stw	r2,0(r3)
    return -1;
 4018ee0:	00bfffc4 	movi	r2,-1
 4018ee4:	00000106 	br	4018eec <kill+0x11c>
  }

  return 0;
 4018ee8:	0005883a 	mov	r2,zero
}
 4018eec:	e037883a 	mov	sp,fp
 4018ef0:	dfc00117 	ldw	ra,4(sp)
 4018ef4:	df000017 	ldw	fp,0(sp)
 4018ef8:	dec00204 	addi	sp,sp,8
 4018efc:	f800283a 	ret

04018f00 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4018f00:	defffc04 	addi	sp,sp,-16
 4018f04:	df000315 	stw	fp,12(sp)
 4018f08:	df000304 	addi	fp,sp,12
 4018f0c:	e13ffd15 	stw	r4,-12(fp)
 4018f10:	e17ffe15 	stw	r5,-8(fp)
 4018f14:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4018f18:	e0fffe17 	ldw	r3,-8(fp)
 4018f1c:	e0bffd17 	ldw	r2,-12(fp)
 4018f20:	18800c26 	beq	r3,r2,4018f54 <alt_load_section+0x54>
  {
    while( to != end )
 4018f24:	00000806 	br	4018f48 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4018f28:	e0bffe17 	ldw	r2,-8(fp)
 4018f2c:	10c00104 	addi	r3,r2,4
 4018f30:	e0fffe15 	stw	r3,-8(fp)
 4018f34:	e0fffd17 	ldw	r3,-12(fp)
 4018f38:	19000104 	addi	r4,r3,4
 4018f3c:	e13ffd15 	stw	r4,-12(fp)
 4018f40:	18c00017 	ldw	r3,0(r3)
 4018f44:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4018f48:	e0fffe17 	ldw	r3,-8(fp)
 4018f4c:	e0bfff17 	ldw	r2,-4(fp)
 4018f50:	18bff51e 	bne	r3,r2,4018f28 <__alt_data_end+0xfc018f28>
    {
      *to++ = *from++;
    }
  }
}
 4018f54:	0001883a 	nop
 4018f58:	e037883a 	mov	sp,fp
 4018f5c:	df000017 	ldw	fp,0(sp)
 4018f60:	dec00104 	addi	sp,sp,4
 4018f64:	f800283a 	ret

04018f68 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4018f68:	defffe04 	addi	sp,sp,-8
 4018f6c:	dfc00115 	stw	ra,4(sp)
 4018f70:	df000015 	stw	fp,0(sp)
 4018f74:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4018f78:	018100f4 	movhi	r6,1027
 4018f7c:	31a72804 	addi	r6,r6,-25440
 4018f80:	014100b4 	movhi	r5,1026
 4018f84:	29748604 	addi	r5,r5,-11752
 4018f88:	010100f4 	movhi	r4,1027
 4018f8c:	21272804 	addi	r4,r4,-25440
 4018f90:	4018f000 	call	4018f00 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4018f94:	01810034 	movhi	r6,1024
 4018f98:	31808c04 	addi	r6,r6,560
 4018f9c:	01410034 	movhi	r5,1024
 4018fa0:	29400804 	addi	r5,r5,32
 4018fa4:	01010034 	movhi	r4,1024
 4018fa8:	21000804 	addi	r4,r4,32
 4018fac:	4018f000 	call	4018f00 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4018fb0:	018100b4 	movhi	r6,1026
 4018fb4:	31b48604 	addi	r6,r6,-11752
 4018fb8:	014100b4 	movhi	r5,1026
 4018fbc:	296de404 	addi	r5,r5,-18544
 4018fc0:	010100b4 	movhi	r4,1026
 4018fc4:	212de404 	addi	r4,r4,-18544
 4018fc8:	4018f000 	call	4018f00 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4018fcc:	401a70c0 	call	401a70c <alt_dcache_flush_all>
  alt_icache_flush_all();
 4018fd0:	401a8cc0 	call	401a8cc <alt_icache_flush_all>
}
 4018fd4:	0001883a 	nop
 4018fd8:	e037883a 	mov	sp,fp
 4018fdc:	dfc00117 	ldw	ra,4(sp)
 4018fe0:	df000017 	ldw	fp,0(sp)
 4018fe4:	dec00204 	addi	sp,sp,8
 4018fe8:	f800283a 	ret

04018fec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4018fec:	defffe04 	addi	sp,sp,-8
 4018ff0:	dfc00115 	stw	ra,4(sp)
 4018ff4:	df000015 	stw	fp,0(sp)
 4018ff8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4018ffc:	d0a02417 	ldw	r2,-32624(gp)
 4019000:	10000326 	beq	r2,zero,4019010 <alt_get_errno+0x24>
 4019004:	d0a02417 	ldw	r2,-32624(gp)
 4019008:	103ee83a 	callr	r2
 401900c:	00000106 	br	4019014 <alt_get_errno+0x28>
 4019010:	d092e304 	addi	r2,gp,19340
}
 4019014:	e037883a 	mov	sp,fp
 4019018:	dfc00117 	ldw	ra,4(sp)
 401901c:	df000017 	ldw	fp,0(sp)
 4019020:	dec00204 	addi	sp,sp,8
 4019024:	f800283a 	ret

04019028 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4019028:	defff904 	addi	sp,sp,-28
 401902c:	dfc00615 	stw	ra,24(sp)
 4019030:	df000515 	stw	fp,20(sp)
 4019034:	df000504 	addi	fp,sp,20
 4019038:	e13ffd15 	stw	r4,-12(fp)
 401903c:	e17ffe15 	stw	r5,-8(fp)
 4019040:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4019044:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4019048:	e0bffd17 	ldw	r2,-12(fp)
 401904c:	10000816 	blt	r2,zero,4019070 <lseek+0x48>
 4019050:	01400304 	movi	r5,12
 4019054:	e13ffd17 	ldw	r4,-12(fp)
 4019058:	400b1dc0 	call	400b1dc <__mulsi3>
 401905c:	1007883a 	mov	r3,r2
 4019060:	008100f4 	movhi	r2,1027
 4019064:	10a28704 	addi	r2,r2,-30180
 4019068:	1885883a 	add	r2,r3,r2
 401906c:	00000106 	br	4019074 <lseek+0x4c>
 4019070:	0005883a 	mov	r2,zero
 4019074:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4019078:	e0bffc17 	ldw	r2,-16(fp)
 401907c:	10001026 	beq	r2,zero,40190c0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4019080:	e0bffc17 	ldw	r2,-16(fp)
 4019084:	10800017 	ldw	r2,0(r2)
 4019088:	10800717 	ldw	r2,28(r2)
 401908c:	10000926 	beq	r2,zero,40190b4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4019090:	e0bffc17 	ldw	r2,-16(fp)
 4019094:	10800017 	ldw	r2,0(r2)
 4019098:	10800717 	ldw	r2,28(r2)
 401909c:	e1bfff17 	ldw	r6,-4(fp)
 40190a0:	e17ffe17 	ldw	r5,-8(fp)
 40190a4:	e13ffc17 	ldw	r4,-16(fp)
 40190a8:	103ee83a 	callr	r2
 40190ac:	e0bffb15 	stw	r2,-20(fp)
 40190b0:	00000506 	br	40190c8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40190b4:	00bfde84 	movi	r2,-134
 40190b8:	e0bffb15 	stw	r2,-20(fp)
 40190bc:	00000206 	br	40190c8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 40190c0:	00bfebc4 	movi	r2,-81
 40190c4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 40190c8:	e0bffb17 	ldw	r2,-20(fp)
 40190cc:	1000070e 	bge	r2,zero,40190ec <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 40190d0:	4018fec0 	call	4018fec <alt_get_errno>
 40190d4:	1007883a 	mov	r3,r2
 40190d8:	e0bffb17 	ldw	r2,-20(fp)
 40190dc:	0085c83a 	sub	r2,zero,r2
 40190e0:	18800015 	stw	r2,0(r3)
    rc = -1;
 40190e4:	00bfffc4 	movi	r2,-1
 40190e8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 40190ec:	e0bffb17 	ldw	r2,-20(fp)
}
 40190f0:	e037883a 	mov	sp,fp
 40190f4:	dfc00117 	ldw	ra,4(sp)
 40190f8:	df000017 	ldw	fp,0(sp)
 40190fc:	dec00204 	addi	sp,sp,8
 4019100:	f800283a 	ret

04019104 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4019104:	defffd04 	addi	sp,sp,-12
 4019108:	dfc00215 	stw	ra,8(sp)
 401910c:	df000115 	stw	fp,4(sp)
 4019110:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4019114:	0009883a 	mov	r4,zero
 4019118:	40196900 	call	4019690 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401911c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4019120:	40196c80 	call	40196c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4019124:	018100b4 	movhi	r6,1026
 4019128:	31b47e04 	addi	r6,r6,-11784
 401912c:	014100b4 	movhi	r5,1026
 4019130:	29747e04 	addi	r5,r5,-11784
 4019134:	010100b4 	movhi	r4,1026
 4019138:	21347e04 	addi	r4,r4,-11784
 401913c:	401ac700 	call	401ac70 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4019140:	401a80c0 	call	401a80c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4019144:	010100b4 	movhi	r4,1026
 4019148:	212a1b04 	addi	r4,r4,-22420
 401914c:	401b4300 	call	401b430 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4019150:	d092e717 	ldw	r2,19356(gp)
 4019154:	d0d2e817 	ldw	r3,19360(gp)
 4019158:	d112e917 	ldw	r4,19364(gp)
 401915c:	200d883a 	mov	r6,r4
 4019160:	180b883a 	mov	r5,r3
 4019164:	1009883a 	mov	r4,r2
 4019168:	4008d280 	call	4008d28 <main>
 401916c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4019170:	01000044 	movi	r4,1
 4019174:	4018a600 	call	4018a60 <close>
  exit (result);
 4019178:	e13fff17 	ldw	r4,-4(fp)
 401917c:	401b4440 	call	401b444 <exit>

04019180 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4019180:	defffe04 	addi	sp,sp,-8
 4019184:	df000115 	stw	fp,4(sp)
 4019188:	df000104 	addi	fp,sp,4
 401918c:	e13fff15 	stw	r4,-4(fp)
}
 4019190:	0001883a 	nop
 4019194:	e037883a 	mov	sp,fp
 4019198:	df000017 	ldw	fp,0(sp)
 401919c:	dec00104 	addi	sp,sp,4
 40191a0:	f800283a 	ret

040191a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 40191a4:	defffe04 	addi	sp,sp,-8
 40191a8:	df000115 	stw	fp,4(sp)
 40191ac:	df000104 	addi	fp,sp,4
 40191b0:	e13fff15 	stw	r4,-4(fp)
}
 40191b4:	0001883a 	nop
 40191b8:	e037883a 	mov	sp,fp
 40191bc:	df000017 	ldw	fp,0(sp)
 40191c0:	dec00104 	addi	sp,sp,4
 40191c4:	f800283a 	ret

040191c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40191c8:	defffe04 	addi	sp,sp,-8
 40191cc:	dfc00115 	stw	ra,4(sp)
 40191d0:	df000015 	stw	fp,0(sp)
 40191d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40191d8:	d0a02417 	ldw	r2,-32624(gp)
 40191dc:	10000326 	beq	r2,zero,40191ec <alt_get_errno+0x24>
 40191e0:	d0a02417 	ldw	r2,-32624(gp)
 40191e4:	103ee83a 	callr	r2
 40191e8:	00000106 	br	40191f0 <alt_get_errno+0x28>
 40191ec:	d092e304 	addi	r2,gp,19340
}
 40191f0:	e037883a 	mov	sp,fp
 40191f4:	dfc00117 	ldw	ra,4(sp)
 40191f8:	df000017 	ldw	fp,0(sp)
 40191fc:	dec00204 	addi	sp,sp,8
 4019200:	f800283a 	ret

04019204 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4019204:	defff904 	addi	sp,sp,-28
 4019208:	dfc00615 	stw	ra,24(sp)
 401920c:	df000515 	stw	fp,20(sp)
 4019210:	df000504 	addi	fp,sp,20
 4019214:	e13ffd15 	stw	r4,-12(fp)
 4019218:	e17ffe15 	stw	r5,-8(fp)
 401921c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4019220:	e0bffd17 	ldw	r2,-12(fp)
 4019224:	10000816 	blt	r2,zero,4019248 <read+0x44>
 4019228:	01400304 	movi	r5,12
 401922c:	e13ffd17 	ldw	r4,-12(fp)
 4019230:	400b1dc0 	call	400b1dc <__mulsi3>
 4019234:	1007883a 	mov	r3,r2
 4019238:	008100f4 	movhi	r2,1027
 401923c:	10a28704 	addi	r2,r2,-30180
 4019240:	1885883a 	add	r2,r3,r2
 4019244:	00000106 	br	401924c <read+0x48>
 4019248:	0005883a 	mov	r2,zero
 401924c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4019250:	e0bffb17 	ldw	r2,-20(fp)
 4019254:	10002226 	beq	r2,zero,40192e0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4019258:	e0bffb17 	ldw	r2,-20(fp)
 401925c:	10800217 	ldw	r2,8(r2)
 4019260:	108000cc 	andi	r2,r2,3
 4019264:	10800060 	cmpeqi	r2,r2,1
 4019268:	1000181e 	bne	r2,zero,40192cc <read+0xc8>
        (fd->dev->read))
 401926c:	e0bffb17 	ldw	r2,-20(fp)
 4019270:	10800017 	ldw	r2,0(r2)
 4019274:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4019278:	10001426 	beq	r2,zero,40192cc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401927c:	e0bffb17 	ldw	r2,-20(fp)
 4019280:	10800017 	ldw	r2,0(r2)
 4019284:	10800517 	ldw	r2,20(r2)
 4019288:	e0ffff17 	ldw	r3,-4(fp)
 401928c:	180d883a 	mov	r6,r3
 4019290:	e17ffe17 	ldw	r5,-8(fp)
 4019294:	e13ffb17 	ldw	r4,-20(fp)
 4019298:	103ee83a 	callr	r2
 401929c:	e0bffc15 	stw	r2,-16(fp)
 40192a0:	e0bffc17 	ldw	r2,-16(fp)
 40192a4:	1000070e 	bge	r2,zero,40192c4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 40192a8:	40191c80 	call	40191c8 <alt_get_errno>
 40192ac:	1007883a 	mov	r3,r2
 40192b0:	e0bffc17 	ldw	r2,-16(fp)
 40192b4:	0085c83a 	sub	r2,zero,r2
 40192b8:	18800015 	stw	r2,0(r3)
          return -1;
 40192bc:	00bfffc4 	movi	r2,-1
 40192c0:	00000c06 	br	40192f4 <read+0xf0>
        }
        return rval;
 40192c4:	e0bffc17 	ldw	r2,-16(fp)
 40192c8:	00000a06 	br	40192f4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40192cc:	40191c80 	call	40191c8 <alt_get_errno>
 40192d0:	1007883a 	mov	r3,r2
 40192d4:	00800344 	movi	r2,13
 40192d8:	18800015 	stw	r2,0(r3)
 40192dc:	00000406 	br	40192f0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40192e0:	40191c80 	call	40191c8 <alt_get_errno>
 40192e4:	1007883a 	mov	r3,r2
 40192e8:	00801444 	movi	r2,81
 40192ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40192f0:	00bfffc4 	movi	r2,-1
}
 40192f4:	e037883a 	mov	sp,fp
 40192f8:	dfc00117 	ldw	ra,4(sp)
 40192fc:	df000017 	ldw	fp,0(sp)
 4019300:	dec00204 	addi	sp,sp,8
 4019304:	f800283a 	ret

04019308 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4019308:	defffc04 	addi	sp,sp,-16
 401930c:	dfc00315 	stw	ra,12(sp)
 4019310:	df000215 	stw	fp,8(sp)
 4019314:	dc000115 	stw	r16,4(sp)
 4019318:	df000204 	addi	fp,sp,8
 401931c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4019320:	e0bffe17 	ldw	r2,-8(fp)
 4019324:	108000d0 	cmplti	r2,r2,3
 4019328:	1000111e 	bne	r2,zero,4019370 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 401932c:	040100f4 	movhi	r16,1027
 4019330:	84228704 	addi	r16,r16,-30180
 4019334:	e0bffe17 	ldw	r2,-8(fp)
 4019338:	01400304 	movi	r5,12
 401933c:	1009883a 	mov	r4,r2
 4019340:	400b1dc0 	call	400b1dc <__mulsi3>
 4019344:	8085883a 	add	r2,r16,r2
 4019348:	10800204 	addi	r2,r2,8
 401934c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4019350:	040100f4 	movhi	r16,1027
 4019354:	84228704 	addi	r16,r16,-30180
 4019358:	e0bffe17 	ldw	r2,-8(fp)
 401935c:	01400304 	movi	r5,12
 4019360:	1009883a 	mov	r4,r2
 4019364:	400b1dc0 	call	400b1dc <__mulsi3>
 4019368:	8085883a 	add	r2,r16,r2
 401936c:	10000015 	stw	zero,0(r2)
  }
}
 4019370:	0001883a 	nop
 4019374:	e6ffff04 	addi	sp,fp,-4
 4019378:	dfc00217 	ldw	ra,8(sp)
 401937c:	df000117 	ldw	fp,4(sp)
 4019380:	dc000017 	ldw	r16,0(sp)
 4019384:	dec00304 	addi	sp,sp,12
 4019388:	f800283a 	ret

0401938c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401938c:	defff904 	addi	sp,sp,-28
 4019390:	df000615 	stw	fp,24(sp)
 4019394:	df000604 	addi	fp,sp,24
 4019398:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401939c:	0005303a 	rdctl	r2,status
 40193a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40193a4:	e0fffe17 	ldw	r3,-8(fp)
 40193a8:	00bfff84 	movi	r2,-2
 40193ac:	1884703a 	and	r2,r3,r2
 40193b0:	1001703a 	wrctl	status,r2
  
  return context;
 40193b4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40193b8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40193bc:	d0a02517 	ldw	r2,-32620(gp)
 40193c0:	10c000c4 	addi	r3,r2,3
 40193c4:	00bfff04 	movi	r2,-4
 40193c8:	1884703a 	and	r2,r3,r2
 40193cc:	d0a02515 	stw	r2,-32620(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40193d0:	d0e02517 	ldw	r3,-32620(gp)
 40193d4:	e0bfff17 	ldw	r2,-4(fp)
 40193d8:	1887883a 	add	r3,r3,r2
 40193dc:	00820034 	movhi	r2,2048
 40193e0:	10800004 	addi	r2,r2,0
 40193e4:	10c0062e 	bgeu	r2,r3,4019400 <sbrk+0x74>
 40193e8:	e0bffb17 	ldw	r2,-20(fp)
 40193ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40193f0:	e0bffa17 	ldw	r2,-24(fp)
 40193f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 40193f8:	00bfffc4 	movi	r2,-1
 40193fc:	00000b06 	br	401942c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4019400:	d0a02517 	ldw	r2,-32620(gp)
 4019404:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4019408:	d0e02517 	ldw	r3,-32620(gp)
 401940c:	e0bfff17 	ldw	r2,-4(fp)
 4019410:	1885883a 	add	r2,r3,r2
 4019414:	d0a02515 	stw	r2,-32620(gp)
 4019418:	e0bffb17 	ldw	r2,-20(fp)
 401941c:	e0bffc15 	stw	r2,-16(fp)
 4019420:	e0bffc17 	ldw	r2,-16(fp)
 4019424:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4019428:	e0bffd17 	ldw	r2,-12(fp)
} 
 401942c:	e037883a 	mov	sp,fp
 4019430:	df000017 	ldw	fp,0(sp)
 4019434:	dec00104 	addi	sp,sp,4
 4019438:	f800283a 	ret

0401943c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401943c:	defffe04 	addi	sp,sp,-8
 4019440:	dfc00115 	stw	ra,4(sp)
 4019444:	df000015 	stw	fp,0(sp)
 4019448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401944c:	d0a02417 	ldw	r2,-32624(gp)
 4019450:	10000326 	beq	r2,zero,4019460 <alt_get_errno+0x24>
 4019454:	d0a02417 	ldw	r2,-32624(gp)
 4019458:	103ee83a 	callr	r2
 401945c:	00000106 	br	4019464 <alt_get_errno+0x28>
 4019460:	d092e304 	addi	r2,gp,19340
}
 4019464:	e037883a 	mov	sp,fp
 4019468:	dfc00117 	ldw	ra,4(sp)
 401946c:	df000017 	ldw	fp,0(sp)
 4019470:	dec00204 	addi	sp,sp,8
 4019474:	f800283a 	ret

04019478 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 4019478:	defffc04 	addi	sp,sp,-16
 401947c:	dfc00315 	stw	ra,12(sp)
 4019480:	df000215 	stw	fp,8(sp)
 4019484:	df000204 	addi	fp,sp,8
 4019488:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401948c:	d092ec17 	ldw	r2,19376(gp)
  clock_t ticks = alt_nticks(); 
 4019490:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4019494:	d092eb17 	ldw	r2,19372(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 4019498:	1000061e 	bne	r2,zero,40194b4 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 401949c:	401943c0 	call	401943c <alt_get_errno>
 40194a0:	1007883a 	mov	r3,r2
 40194a4:	00801604 	movi	r2,88
 40194a8:	18800015 	stw	r2,0(r3)
    return 0;
 40194ac:	0005883a 	mov	r2,zero
 40194b0:	00000a06 	br	40194dc <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 40194b4:	e0bfff17 	ldw	r2,-4(fp)
 40194b8:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 40194bc:	e0bfff17 	ldw	r2,-4(fp)
 40194c0:	e0fffe17 	ldw	r3,-8(fp)
 40194c4:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 40194c8:	e0bfff17 	ldw	r2,-4(fp)
 40194cc:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 40194d0:	e0bfff17 	ldw	r2,-4(fp)
 40194d4:	10000315 	stw	zero,12(r2)

  return ticks;
 40194d8:	e0bffe17 	ldw	r2,-8(fp)
}
 40194dc:	e037883a 	mov	sp,fp
 40194e0:	dfc00117 	ldw	ra,4(sp)
 40194e4:	df000017 	ldw	fp,0(sp)
 40194e8:	dec00204 	addi	sp,sp,8
 40194ec:	f800283a 	ret

040194f0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 40194f0:	defffd04 	addi	sp,sp,-12
 40194f4:	dfc00215 	stw	ra,8(sp)
 40194f8:	df000115 	stw	fp,4(sp)
 40194fc:	df000104 	addi	fp,sp,4
 4019500:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4019504:	e13fff17 	ldw	r4,-4(fp)
 4019508:	401a5b40 	call	401a5b4 <alt_busy_sleep>
}
 401950c:	e037883a 	mov	sp,fp
 4019510:	dfc00117 	ldw	ra,4(sp)
 4019514:	df000017 	ldw	fp,0(sp)
 4019518:	dec00204 	addi	sp,sp,8
 401951c:	f800283a 	ret

04019520 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4019520:	defffe04 	addi	sp,sp,-8
 4019524:	dfc00115 	stw	ra,4(sp)
 4019528:	df000015 	stw	fp,0(sp)
 401952c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4019530:	d0a02417 	ldw	r2,-32624(gp)
 4019534:	10000326 	beq	r2,zero,4019544 <alt_get_errno+0x24>
 4019538:	d0a02417 	ldw	r2,-32624(gp)
 401953c:	103ee83a 	callr	r2
 4019540:	00000106 	br	4019548 <alt_get_errno+0x28>
 4019544:	d092e304 	addi	r2,gp,19340
}
 4019548:	e037883a 	mov	sp,fp
 401954c:	dfc00117 	ldw	ra,4(sp)
 4019550:	df000017 	ldw	fp,0(sp)
 4019554:	dec00204 	addi	sp,sp,8
 4019558:	f800283a 	ret

0401955c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401955c:	defff904 	addi	sp,sp,-28
 4019560:	dfc00615 	stw	ra,24(sp)
 4019564:	df000515 	stw	fp,20(sp)
 4019568:	df000504 	addi	fp,sp,20
 401956c:	e13ffd15 	stw	r4,-12(fp)
 4019570:	e17ffe15 	stw	r5,-8(fp)
 4019574:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4019578:	e0bffd17 	ldw	r2,-12(fp)
 401957c:	10000816 	blt	r2,zero,40195a0 <write+0x44>
 4019580:	01400304 	movi	r5,12
 4019584:	e13ffd17 	ldw	r4,-12(fp)
 4019588:	400b1dc0 	call	400b1dc <__mulsi3>
 401958c:	1007883a 	mov	r3,r2
 4019590:	008100f4 	movhi	r2,1027
 4019594:	10a28704 	addi	r2,r2,-30180
 4019598:	1885883a 	add	r2,r3,r2
 401959c:	00000106 	br	40195a4 <write+0x48>
 40195a0:	0005883a 	mov	r2,zero
 40195a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40195a8:	e0bffb17 	ldw	r2,-20(fp)
 40195ac:	10002126 	beq	r2,zero,4019634 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40195b0:	e0bffb17 	ldw	r2,-20(fp)
 40195b4:	10800217 	ldw	r2,8(r2)
 40195b8:	108000cc 	andi	r2,r2,3
 40195bc:	10001826 	beq	r2,zero,4019620 <write+0xc4>
 40195c0:	e0bffb17 	ldw	r2,-20(fp)
 40195c4:	10800017 	ldw	r2,0(r2)
 40195c8:	10800617 	ldw	r2,24(r2)
 40195cc:	10001426 	beq	r2,zero,4019620 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 40195d0:	e0bffb17 	ldw	r2,-20(fp)
 40195d4:	10800017 	ldw	r2,0(r2)
 40195d8:	10800617 	ldw	r2,24(r2)
 40195dc:	e0ffff17 	ldw	r3,-4(fp)
 40195e0:	180d883a 	mov	r6,r3
 40195e4:	e17ffe17 	ldw	r5,-8(fp)
 40195e8:	e13ffb17 	ldw	r4,-20(fp)
 40195ec:	103ee83a 	callr	r2
 40195f0:	e0bffc15 	stw	r2,-16(fp)
 40195f4:	e0bffc17 	ldw	r2,-16(fp)
 40195f8:	1000070e 	bge	r2,zero,4019618 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 40195fc:	40195200 	call	4019520 <alt_get_errno>
 4019600:	1007883a 	mov	r3,r2
 4019604:	e0bffc17 	ldw	r2,-16(fp)
 4019608:	0085c83a 	sub	r2,zero,r2
 401960c:	18800015 	stw	r2,0(r3)
        return -1;
 4019610:	00bfffc4 	movi	r2,-1
 4019614:	00000c06 	br	4019648 <write+0xec>
      }
      return rval;
 4019618:	e0bffc17 	ldw	r2,-16(fp)
 401961c:	00000a06 	br	4019648 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4019620:	40195200 	call	4019520 <alt_get_errno>
 4019624:	1007883a 	mov	r3,r2
 4019628:	00800344 	movi	r2,13
 401962c:	18800015 	stw	r2,0(r3)
 4019630:	00000406 	br	4019644 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4019634:	40195200 	call	4019520 <alt_get_errno>
 4019638:	1007883a 	mov	r3,r2
 401963c:	00801444 	movi	r2,81
 4019640:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4019644:	00bfffc4 	movi	r2,-1
}
 4019648:	e037883a 	mov	sp,fp
 401964c:	dfc00117 	ldw	ra,4(sp)
 4019650:	df000017 	ldw	fp,0(sp)
 4019654:	dec00204 	addi	sp,sp,8
 4019658:	f800283a 	ret

0401965c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401965c:	defffd04 	addi	sp,sp,-12
 4019660:	dfc00215 	stw	ra,8(sp)
 4019664:	df000115 	stw	fp,4(sp)
 4019668:	df000104 	addi	fp,sp,4
 401966c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4019670:	d1602104 	addi	r5,gp,-32636
 4019674:	e13fff17 	ldw	r4,-4(fp)
 4019678:	401a7680 	call	401a768 <alt_dev_llist_insert>
}
 401967c:	e037883a 	mov	sp,fp
 4019680:	dfc00117 	ldw	ra,4(sp)
 4019684:	df000017 	ldw	fp,0(sp)
 4019688:	dec00204 	addi	sp,sp,8
 401968c:	f800283a 	ret

04019690 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4019690:	defffd04 	addi	sp,sp,-12
 4019694:	dfc00215 	stw	ra,8(sp)
 4019698:	df000115 	stw	fp,4(sp)
 401969c:	df000104 	addi	fp,sp,4
 40196a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 40196a4:	401b1140 	call	401b114 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40196a8:	00800044 	movi	r2,1
 40196ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40196b0:	0001883a 	nop
 40196b4:	e037883a 	mov	sp,fp
 40196b8:	dfc00117 	ldw	ra,4(sp)
 40196bc:	df000017 	ldw	fp,0(sp)
 40196c0:	dec00204 	addi	sp,sp,8
 40196c4:	f800283a 	ret

040196c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40196c8:	defffe04 	addi	sp,sp,-8
 40196cc:	dfc00115 	stw	ra,4(sp)
 40196d0:	df000015 	stw	fp,0(sp)
 40196d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 40196d8:	01c0fa04 	movi	r7,1000
 40196dc:	01800084 	movi	r6,2
 40196e0:	000b883a 	mov	r5,zero
 40196e4:	01020034 	movhi	r4,2048
 40196e8:	21141004 	addi	r4,r4,20544
 40196ec:	401a40c0 	call	401a40c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 40196f0:	01800044 	movi	r6,1
 40196f4:	000b883a 	mov	r5,zero
 40196f8:	010100f4 	movhi	r4,1027
 40196fc:	2122f104 	addi	r4,r4,-29756
 4019700:	40198940 	call	4019894 <altera_avalon_jtag_uart_init>
 4019704:	010100f4 	movhi	r4,1027
 4019708:	2122e704 	addi	r4,r4,-29796
 401970c:	401965c0 	call	401965c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 4019710:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4019714:	0001883a 	nop
}
 4019718:	0001883a 	nop
 401971c:	e037883a 	mov	sp,fp
 4019720:	dfc00117 	ldw	ra,4(sp)
 4019724:	df000017 	ldw	fp,0(sp)
 4019728:	dec00204 	addi	sp,sp,8
 401972c:	f800283a 	ret

04019730 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4019730:	defffa04 	addi	sp,sp,-24
 4019734:	dfc00515 	stw	ra,20(sp)
 4019738:	df000415 	stw	fp,16(sp)
 401973c:	df000404 	addi	fp,sp,16
 4019740:	e13ffd15 	stw	r4,-12(fp)
 4019744:	e17ffe15 	stw	r5,-8(fp)
 4019748:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401974c:	e0bffd17 	ldw	r2,-12(fp)
 4019750:	10800017 	ldw	r2,0(r2)
 4019754:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4019758:	e0bffc17 	ldw	r2,-16(fp)
 401975c:	10c00a04 	addi	r3,r2,40
 4019760:	e0bffd17 	ldw	r2,-12(fp)
 4019764:	10800217 	ldw	r2,8(r2)
 4019768:	100f883a 	mov	r7,r2
 401976c:	e1bfff17 	ldw	r6,-4(fp)
 4019770:	e17ffe17 	ldw	r5,-8(fp)
 4019774:	1809883a 	mov	r4,r3
 4019778:	4019d580 	call	4019d58 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401977c:	e037883a 	mov	sp,fp
 4019780:	dfc00117 	ldw	ra,4(sp)
 4019784:	df000017 	ldw	fp,0(sp)
 4019788:	dec00204 	addi	sp,sp,8
 401978c:	f800283a 	ret

04019790 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4019790:	defffa04 	addi	sp,sp,-24
 4019794:	dfc00515 	stw	ra,20(sp)
 4019798:	df000415 	stw	fp,16(sp)
 401979c:	df000404 	addi	fp,sp,16
 40197a0:	e13ffd15 	stw	r4,-12(fp)
 40197a4:	e17ffe15 	stw	r5,-8(fp)
 40197a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40197ac:	e0bffd17 	ldw	r2,-12(fp)
 40197b0:	10800017 	ldw	r2,0(r2)
 40197b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40197b8:	e0bffc17 	ldw	r2,-16(fp)
 40197bc:	10c00a04 	addi	r3,r2,40
 40197c0:	e0bffd17 	ldw	r2,-12(fp)
 40197c4:	10800217 	ldw	r2,8(r2)
 40197c8:	100f883a 	mov	r7,r2
 40197cc:	e1bfff17 	ldw	r6,-4(fp)
 40197d0:	e17ffe17 	ldw	r5,-8(fp)
 40197d4:	1809883a 	mov	r4,r3
 40197d8:	4019f740 	call	4019f74 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40197dc:	e037883a 	mov	sp,fp
 40197e0:	dfc00117 	ldw	ra,4(sp)
 40197e4:	df000017 	ldw	fp,0(sp)
 40197e8:	dec00204 	addi	sp,sp,8
 40197ec:	f800283a 	ret

040197f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40197f0:	defffc04 	addi	sp,sp,-16
 40197f4:	dfc00315 	stw	ra,12(sp)
 40197f8:	df000215 	stw	fp,8(sp)
 40197fc:	df000204 	addi	fp,sp,8
 4019800:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4019804:	e0bfff17 	ldw	r2,-4(fp)
 4019808:	10800017 	ldw	r2,0(r2)
 401980c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4019810:	e0bffe17 	ldw	r2,-8(fp)
 4019814:	10c00a04 	addi	r3,r2,40
 4019818:	e0bfff17 	ldw	r2,-4(fp)
 401981c:	10800217 	ldw	r2,8(r2)
 4019820:	100b883a 	mov	r5,r2
 4019824:	1809883a 	mov	r4,r3
 4019828:	4019c000 	call	4019c00 <altera_avalon_jtag_uart_close>
}
 401982c:	e037883a 	mov	sp,fp
 4019830:	dfc00117 	ldw	ra,4(sp)
 4019834:	df000017 	ldw	fp,0(sp)
 4019838:	dec00204 	addi	sp,sp,8
 401983c:	f800283a 	ret

04019840 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4019840:	defffa04 	addi	sp,sp,-24
 4019844:	dfc00515 	stw	ra,20(sp)
 4019848:	df000415 	stw	fp,16(sp)
 401984c:	df000404 	addi	fp,sp,16
 4019850:	e13ffd15 	stw	r4,-12(fp)
 4019854:	e17ffe15 	stw	r5,-8(fp)
 4019858:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401985c:	e0bffd17 	ldw	r2,-12(fp)
 4019860:	10800017 	ldw	r2,0(r2)
 4019864:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4019868:	e0bffc17 	ldw	r2,-16(fp)
 401986c:	10800a04 	addi	r2,r2,40
 4019870:	e1bfff17 	ldw	r6,-4(fp)
 4019874:	e17ffe17 	ldw	r5,-8(fp)
 4019878:	1009883a 	mov	r4,r2
 401987c:	4019c680 	call	4019c68 <altera_avalon_jtag_uart_ioctl>
}
 4019880:	e037883a 	mov	sp,fp
 4019884:	dfc00117 	ldw	ra,4(sp)
 4019888:	df000017 	ldw	fp,0(sp)
 401988c:	dec00204 	addi	sp,sp,8
 4019890:	f800283a 	ret

04019894 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4019894:	defffa04 	addi	sp,sp,-24
 4019898:	dfc00515 	stw	ra,20(sp)
 401989c:	df000415 	stw	fp,16(sp)
 40198a0:	df000404 	addi	fp,sp,16
 40198a4:	e13ffd15 	stw	r4,-12(fp)
 40198a8:	e17ffe15 	stw	r5,-8(fp)
 40198ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40198b0:	e0bffd17 	ldw	r2,-12(fp)
 40198b4:	00c00044 	movi	r3,1
 40198b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40198bc:	e0bffd17 	ldw	r2,-12(fp)
 40198c0:	10800017 	ldw	r2,0(r2)
 40198c4:	10800104 	addi	r2,r2,4
 40198c8:	1007883a 	mov	r3,r2
 40198cc:	e0bffd17 	ldw	r2,-12(fp)
 40198d0:	10800817 	ldw	r2,32(r2)
 40198d4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40198d8:	e0bffe17 	ldw	r2,-8(fp)
 40198dc:	e0ffff17 	ldw	r3,-4(fp)
 40198e0:	d8000015 	stw	zero,0(sp)
 40198e4:	e1fffd17 	ldw	r7,-12(fp)
 40198e8:	018100b4 	movhi	r6,1026
 40198ec:	31a65504 	addi	r6,r6,-26284
 40198f0:	180b883a 	mov	r5,r3
 40198f4:	1009883a 	mov	r4,r2
 40198f8:	401a8ec0 	call	401a8ec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40198fc:	e0bffd17 	ldw	r2,-12(fp)
 4019900:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4019904:	e0bffd17 	ldw	r2,-12(fp)
 4019908:	10800204 	addi	r2,r2,8
 401990c:	d0d2eb17 	ldw	r3,19372(gp)
 4019910:	e1fffd17 	ldw	r7,-12(fp)
 4019914:	018100b4 	movhi	r6,1026
 4019918:	31a6d804 	addi	r6,r6,-25760
 401991c:	180b883a 	mov	r5,r3
 4019920:	1009883a 	mov	r4,r2
 4019924:	401a4880 	call	401a488 <alt_alarm_start>
 4019928:	1000040e 	bge	r2,zero,401993c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401992c:	e0fffd17 	ldw	r3,-12(fp)
 4019930:	00a00034 	movhi	r2,32768
 4019934:	10bfffc4 	addi	r2,r2,-1
 4019938:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401993c:	0001883a 	nop
 4019940:	e037883a 	mov	sp,fp
 4019944:	dfc00117 	ldw	ra,4(sp)
 4019948:	df000017 	ldw	fp,0(sp)
 401994c:	dec00204 	addi	sp,sp,8
 4019950:	f800283a 	ret

04019954 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4019954:	defff804 	addi	sp,sp,-32
 4019958:	df000715 	stw	fp,28(sp)
 401995c:	df000704 	addi	fp,sp,28
 4019960:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4019964:	e0bfff17 	ldw	r2,-4(fp)
 4019968:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401996c:	e0bffb17 	ldw	r2,-20(fp)
 4019970:	10800017 	ldw	r2,0(r2)
 4019974:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4019978:	e0bffc17 	ldw	r2,-16(fp)
 401997c:	10800104 	addi	r2,r2,4
 4019980:	10800037 	ldwio	r2,0(r2)
 4019984:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4019988:	e0bffd17 	ldw	r2,-12(fp)
 401998c:	1080c00c 	andi	r2,r2,768
 4019990:	10006d26 	beq	r2,zero,4019b48 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4019994:	e0bffd17 	ldw	r2,-12(fp)
 4019998:	1080400c 	andi	r2,r2,256
 401999c:	10003526 	beq	r2,zero,4019a74 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40199a0:	00800074 	movhi	r2,1
 40199a4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40199a8:	e0bffb17 	ldw	r2,-20(fp)
 40199ac:	10800a17 	ldw	r2,40(r2)
 40199b0:	10800044 	addi	r2,r2,1
 40199b4:	1081ffcc 	andi	r2,r2,2047
 40199b8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 40199bc:	e0bffb17 	ldw	r2,-20(fp)
 40199c0:	10c00b17 	ldw	r3,44(r2)
 40199c4:	e0bffe17 	ldw	r2,-8(fp)
 40199c8:	18801526 	beq	r3,r2,4019a20 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40199cc:	e0bffc17 	ldw	r2,-16(fp)
 40199d0:	10800037 	ldwio	r2,0(r2)
 40199d4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40199d8:	e0bff917 	ldw	r2,-28(fp)
 40199dc:	10a0000c 	andi	r2,r2,32768
 40199e0:	10001126 	beq	r2,zero,4019a28 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40199e4:	e0bffb17 	ldw	r2,-20(fp)
 40199e8:	10800a17 	ldw	r2,40(r2)
 40199ec:	e0fff917 	ldw	r3,-28(fp)
 40199f0:	1809883a 	mov	r4,r3
 40199f4:	e0fffb17 	ldw	r3,-20(fp)
 40199f8:	1885883a 	add	r2,r3,r2
 40199fc:	10800e04 	addi	r2,r2,56
 4019a00:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4019a04:	e0bffb17 	ldw	r2,-20(fp)
 4019a08:	10800a17 	ldw	r2,40(r2)
 4019a0c:	10800044 	addi	r2,r2,1
 4019a10:	10c1ffcc 	andi	r3,r2,2047
 4019a14:	e0bffb17 	ldw	r2,-20(fp)
 4019a18:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4019a1c:	003fe206 	br	40199a8 <__alt_data_end+0xfc0199a8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4019a20:	0001883a 	nop
 4019a24:	00000106 	br	4019a2c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4019a28:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4019a2c:	e0bff917 	ldw	r2,-28(fp)
 4019a30:	10bfffec 	andhi	r2,r2,65535
 4019a34:	10000f26 	beq	r2,zero,4019a74 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4019a38:	e0bffb17 	ldw	r2,-20(fp)
 4019a3c:	10c00817 	ldw	r3,32(r2)
 4019a40:	00bfff84 	movi	r2,-2
 4019a44:	1886703a 	and	r3,r3,r2
 4019a48:	e0bffb17 	ldw	r2,-20(fp)
 4019a4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4019a50:	e0bffc17 	ldw	r2,-16(fp)
 4019a54:	10800104 	addi	r2,r2,4
 4019a58:	1007883a 	mov	r3,r2
 4019a5c:	e0bffb17 	ldw	r2,-20(fp)
 4019a60:	10800817 	ldw	r2,32(r2)
 4019a64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4019a68:	e0bffc17 	ldw	r2,-16(fp)
 4019a6c:	10800104 	addi	r2,r2,4
 4019a70:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4019a74:	e0bffd17 	ldw	r2,-12(fp)
 4019a78:	1080800c 	andi	r2,r2,512
 4019a7c:	103fbe26 	beq	r2,zero,4019978 <__alt_data_end+0xfc019978>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4019a80:	e0bffd17 	ldw	r2,-12(fp)
 4019a84:	1004d43a 	srli	r2,r2,16
 4019a88:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4019a8c:	00001406 	br	4019ae0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4019a90:	e0bffc17 	ldw	r2,-16(fp)
 4019a94:	e0fffb17 	ldw	r3,-20(fp)
 4019a98:	18c00d17 	ldw	r3,52(r3)
 4019a9c:	e13ffb17 	ldw	r4,-20(fp)
 4019aa0:	20c7883a 	add	r3,r4,r3
 4019aa4:	18c20e04 	addi	r3,r3,2104
 4019aa8:	18c00003 	ldbu	r3,0(r3)
 4019aac:	18c03fcc 	andi	r3,r3,255
 4019ab0:	18c0201c 	xori	r3,r3,128
 4019ab4:	18ffe004 	addi	r3,r3,-128
 4019ab8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4019abc:	e0bffb17 	ldw	r2,-20(fp)
 4019ac0:	10800d17 	ldw	r2,52(r2)
 4019ac4:	10800044 	addi	r2,r2,1
 4019ac8:	10c1ffcc 	andi	r3,r2,2047
 4019acc:	e0bffb17 	ldw	r2,-20(fp)
 4019ad0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4019ad4:	e0bffa17 	ldw	r2,-24(fp)
 4019ad8:	10bfffc4 	addi	r2,r2,-1
 4019adc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4019ae0:	e0bffa17 	ldw	r2,-24(fp)
 4019ae4:	10000526 	beq	r2,zero,4019afc <altera_avalon_jtag_uart_irq+0x1a8>
 4019ae8:	e0bffb17 	ldw	r2,-20(fp)
 4019aec:	10c00d17 	ldw	r3,52(r2)
 4019af0:	e0bffb17 	ldw	r2,-20(fp)
 4019af4:	10800c17 	ldw	r2,48(r2)
 4019af8:	18bfe51e 	bne	r3,r2,4019a90 <__alt_data_end+0xfc019a90>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4019afc:	e0bffa17 	ldw	r2,-24(fp)
 4019b00:	103f9d26 	beq	r2,zero,4019978 <__alt_data_end+0xfc019978>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4019b04:	e0bffb17 	ldw	r2,-20(fp)
 4019b08:	10c00817 	ldw	r3,32(r2)
 4019b0c:	00bfff44 	movi	r2,-3
 4019b10:	1886703a 	and	r3,r3,r2
 4019b14:	e0bffb17 	ldw	r2,-20(fp)
 4019b18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4019b1c:	e0bffb17 	ldw	r2,-20(fp)
 4019b20:	10800017 	ldw	r2,0(r2)
 4019b24:	10800104 	addi	r2,r2,4
 4019b28:	1007883a 	mov	r3,r2
 4019b2c:	e0bffb17 	ldw	r2,-20(fp)
 4019b30:	10800817 	ldw	r2,32(r2)
 4019b34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4019b38:	e0bffc17 	ldw	r2,-16(fp)
 4019b3c:	10800104 	addi	r2,r2,4
 4019b40:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4019b44:	003f8c06 	br	4019978 <__alt_data_end+0xfc019978>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4019b48:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4019b4c:	0001883a 	nop
 4019b50:	e037883a 	mov	sp,fp
 4019b54:	df000017 	ldw	fp,0(sp)
 4019b58:	dec00104 	addi	sp,sp,4
 4019b5c:	f800283a 	ret

04019b60 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4019b60:	defff804 	addi	sp,sp,-32
 4019b64:	df000715 	stw	fp,28(sp)
 4019b68:	df000704 	addi	fp,sp,28
 4019b6c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4019b70:	e0bffb17 	ldw	r2,-20(fp)
 4019b74:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4019b78:	e0bff917 	ldw	r2,-28(fp)
 4019b7c:	10800017 	ldw	r2,0(r2)
 4019b80:	10800104 	addi	r2,r2,4
 4019b84:	10800037 	ldwio	r2,0(r2)
 4019b88:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4019b8c:	e0bffa17 	ldw	r2,-24(fp)
 4019b90:	1081000c 	andi	r2,r2,1024
 4019b94:	10000b26 	beq	r2,zero,4019bc4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4019b98:	e0bff917 	ldw	r2,-28(fp)
 4019b9c:	10800017 	ldw	r2,0(r2)
 4019ba0:	10800104 	addi	r2,r2,4
 4019ba4:	1007883a 	mov	r3,r2
 4019ba8:	e0bff917 	ldw	r2,-28(fp)
 4019bac:	10800817 	ldw	r2,32(r2)
 4019bb0:	10810014 	ori	r2,r2,1024
 4019bb4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4019bb8:	e0bff917 	ldw	r2,-28(fp)
 4019bbc:	10000915 	stw	zero,36(r2)
 4019bc0:	00000a06 	br	4019bec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4019bc4:	e0bff917 	ldw	r2,-28(fp)
 4019bc8:	10c00917 	ldw	r3,36(r2)
 4019bcc:	00a00034 	movhi	r2,32768
 4019bd0:	10bfff04 	addi	r2,r2,-4
 4019bd4:	10c00536 	bltu	r2,r3,4019bec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4019bd8:	e0bff917 	ldw	r2,-28(fp)
 4019bdc:	10800917 	ldw	r2,36(r2)
 4019be0:	10c00044 	addi	r3,r2,1
 4019be4:	e0bff917 	ldw	r2,-28(fp)
 4019be8:	10c00915 	stw	r3,36(r2)
 4019bec:	d092eb17 	ldw	r2,19372(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4019bf0:	e037883a 	mov	sp,fp
 4019bf4:	df000017 	ldw	fp,0(sp)
 4019bf8:	dec00104 	addi	sp,sp,4
 4019bfc:	f800283a 	ret

04019c00 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4019c00:	defffd04 	addi	sp,sp,-12
 4019c04:	df000215 	stw	fp,8(sp)
 4019c08:	df000204 	addi	fp,sp,8
 4019c0c:	e13ffe15 	stw	r4,-8(fp)
 4019c10:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4019c14:	00000506 	br	4019c2c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4019c18:	e0bfff17 	ldw	r2,-4(fp)
 4019c1c:	1090000c 	andi	r2,r2,16384
 4019c20:	10000226 	beq	r2,zero,4019c2c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4019c24:	00bffd44 	movi	r2,-11
 4019c28:	00000b06 	br	4019c58 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4019c2c:	e0bffe17 	ldw	r2,-8(fp)
 4019c30:	10c00d17 	ldw	r3,52(r2)
 4019c34:	e0bffe17 	ldw	r2,-8(fp)
 4019c38:	10800c17 	ldw	r2,48(r2)
 4019c3c:	18800526 	beq	r3,r2,4019c54 <altera_avalon_jtag_uart_close+0x54>
 4019c40:	e0bffe17 	ldw	r2,-8(fp)
 4019c44:	10c00917 	ldw	r3,36(r2)
 4019c48:	e0bffe17 	ldw	r2,-8(fp)
 4019c4c:	10800117 	ldw	r2,4(r2)
 4019c50:	18bff136 	bltu	r3,r2,4019c18 <__alt_data_end+0xfc019c18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4019c54:	0005883a 	mov	r2,zero
}
 4019c58:	e037883a 	mov	sp,fp
 4019c5c:	df000017 	ldw	fp,0(sp)
 4019c60:	dec00104 	addi	sp,sp,4
 4019c64:	f800283a 	ret

04019c68 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4019c68:	defffa04 	addi	sp,sp,-24
 4019c6c:	df000515 	stw	fp,20(sp)
 4019c70:	df000504 	addi	fp,sp,20
 4019c74:	e13ffd15 	stw	r4,-12(fp)
 4019c78:	e17ffe15 	stw	r5,-8(fp)
 4019c7c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4019c80:	00bff9c4 	movi	r2,-25
 4019c84:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4019c88:	e0bffe17 	ldw	r2,-8(fp)
 4019c8c:	10da8060 	cmpeqi	r3,r2,27137
 4019c90:	1800031e 	bne	r3,zero,4019ca0 <altera_avalon_jtag_uart_ioctl+0x38>
 4019c94:	109a80a0 	cmpeqi	r2,r2,27138
 4019c98:	1000181e 	bne	r2,zero,4019cfc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4019c9c:	00002906 	br	4019d44 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4019ca0:	e0bffd17 	ldw	r2,-12(fp)
 4019ca4:	10c00117 	ldw	r3,4(r2)
 4019ca8:	00a00034 	movhi	r2,32768
 4019cac:	10bfffc4 	addi	r2,r2,-1
 4019cb0:	18802126 	beq	r3,r2,4019d38 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4019cb4:	e0bfff17 	ldw	r2,-4(fp)
 4019cb8:	10800017 	ldw	r2,0(r2)
 4019cbc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4019cc0:	e0bffc17 	ldw	r2,-16(fp)
 4019cc4:	10800090 	cmplti	r2,r2,2
 4019cc8:	1000061e 	bne	r2,zero,4019ce4 <altera_avalon_jtag_uart_ioctl+0x7c>
 4019ccc:	e0fffc17 	ldw	r3,-16(fp)
 4019cd0:	00a00034 	movhi	r2,32768
 4019cd4:	10bfffc4 	addi	r2,r2,-1
 4019cd8:	18800226 	beq	r3,r2,4019ce4 <altera_avalon_jtag_uart_ioctl+0x7c>
 4019cdc:	e0bffc17 	ldw	r2,-16(fp)
 4019ce0:	00000206 	br	4019cec <altera_avalon_jtag_uart_ioctl+0x84>
 4019ce4:	00a00034 	movhi	r2,32768
 4019ce8:	10bfff84 	addi	r2,r2,-2
 4019cec:	e0fffd17 	ldw	r3,-12(fp)
 4019cf0:	18800115 	stw	r2,4(r3)
      rc = 0;
 4019cf4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4019cf8:	00000f06 	br	4019d38 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4019cfc:	e0bffd17 	ldw	r2,-12(fp)
 4019d00:	10c00117 	ldw	r3,4(r2)
 4019d04:	00a00034 	movhi	r2,32768
 4019d08:	10bfffc4 	addi	r2,r2,-1
 4019d0c:	18800c26 	beq	r3,r2,4019d40 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4019d10:	e0bffd17 	ldw	r2,-12(fp)
 4019d14:	10c00917 	ldw	r3,36(r2)
 4019d18:	e0bffd17 	ldw	r2,-12(fp)
 4019d1c:	10800117 	ldw	r2,4(r2)
 4019d20:	1885803a 	cmpltu	r2,r3,r2
 4019d24:	10c03fcc 	andi	r3,r2,255
 4019d28:	e0bfff17 	ldw	r2,-4(fp)
 4019d2c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4019d30:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4019d34:	00000206 	br	4019d40 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4019d38:	0001883a 	nop
 4019d3c:	00000106 	br	4019d44 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4019d40:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4019d44:	e0bffb17 	ldw	r2,-20(fp)
}
 4019d48:	e037883a 	mov	sp,fp
 4019d4c:	df000017 	ldw	fp,0(sp)
 4019d50:	dec00104 	addi	sp,sp,4
 4019d54:	f800283a 	ret

04019d58 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4019d58:	defff304 	addi	sp,sp,-52
 4019d5c:	dfc00c15 	stw	ra,48(sp)
 4019d60:	df000b15 	stw	fp,44(sp)
 4019d64:	df000b04 	addi	fp,sp,44
 4019d68:	e13ffc15 	stw	r4,-16(fp)
 4019d6c:	e17ffd15 	stw	r5,-12(fp)
 4019d70:	e1bffe15 	stw	r6,-8(fp)
 4019d74:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4019d78:	e0bffd17 	ldw	r2,-12(fp)
 4019d7c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4019d80:	00004706 	br	4019ea0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4019d84:	e0bffc17 	ldw	r2,-16(fp)
 4019d88:	10800a17 	ldw	r2,40(r2)
 4019d8c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4019d90:	e0bffc17 	ldw	r2,-16(fp)
 4019d94:	10800b17 	ldw	r2,44(r2)
 4019d98:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4019d9c:	e0fff717 	ldw	r3,-36(fp)
 4019da0:	e0bff817 	ldw	r2,-32(fp)
 4019da4:	18800536 	bltu	r3,r2,4019dbc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4019da8:	e0fff717 	ldw	r3,-36(fp)
 4019dac:	e0bff817 	ldw	r2,-32(fp)
 4019db0:	1885c83a 	sub	r2,r3,r2
 4019db4:	e0bff615 	stw	r2,-40(fp)
 4019db8:	00000406 	br	4019dcc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4019dbc:	00c20004 	movi	r3,2048
 4019dc0:	e0bff817 	ldw	r2,-32(fp)
 4019dc4:	1885c83a 	sub	r2,r3,r2
 4019dc8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4019dcc:	e0bff617 	ldw	r2,-40(fp)
 4019dd0:	10001e26 	beq	r2,zero,4019e4c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4019dd4:	e0fffe17 	ldw	r3,-8(fp)
 4019dd8:	e0bff617 	ldw	r2,-40(fp)
 4019ddc:	1880022e 	bgeu	r3,r2,4019de8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4019de0:	e0bffe17 	ldw	r2,-8(fp)
 4019de4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4019de8:	e0bffc17 	ldw	r2,-16(fp)
 4019dec:	10c00e04 	addi	r3,r2,56
 4019df0:	e0bff817 	ldw	r2,-32(fp)
 4019df4:	1885883a 	add	r2,r3,r2
 4019df8:	e1bff617 	ldw	r6,-40(fp)
 4019dfc:	100b883a 	mov	r5,r2
 4019e00:	e13ff517 	ldw	r4,-44(fp)
 4019e04:	400c0380 	call	400c038 <memcpy>
      ptr   += n;
 4019e08:	e0fff517 	ldw	r3,-44(fp)
 4019e0c:	e0bff617 	ldw	r2,-40(fp)
 4019e10:	1885883a 	add	r2,r3,r2
 4019e14:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4019e18:	e0fffe17 	ldw	r3,-8(fp)
 4019e1c:	e0bff617 	ldw	r2,-40(fp)
 4019e20:	1885c83a 	sub	r2,r3,r2
 4019e24:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4019e28:	e0fff817 	ldw	r3,-32(fp)
 4019e2c:	e0bff617 	ldw	r2,-40(fp)
 4019e30:	1885883a 	add	r2,r3,r2
 4019e34:	10c1ffcc 	andi	r3,r2,2047
 4019e38:	e0bffc17 	ldw	r2,-16(fp)
 4019e3c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4019e40:	e0bffe17 	ldw	r2,-8(fp)
 4019e44:	00bfcf16 	blt	zero,r2,4019d84 <__alt_data_end+0xfc019d84>
 4019e48:	00000106 	br	4019e50 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4019e4c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4019e50:	e0fff517 	ldw	r3,-44(fp)
 4019e54:	e0bffd17 	ldw	r2,-12(fp)
 4019e58:	1880141e 	bne	r3,r2,4019eac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4019e5c:	e0bfff17 	ldw	r2,-4(fp)
 4019e60:	1090000c 	andi	r2,r2,16384
 4019e64:	1000131e 	bne	r2,zero,4019eb4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4019e68:	0001883a 	nop
 4019e6c:	e0bffc17 	ldw	r2,-16(fp)
 4019e70:	10c00a17 	ldw	r3,40(r2)
 4019e74:	e0bff717 	ldw	r2,-36(fp)
 4019e78:	1880051e 	bne	r3,r2,4019e90 <altera_avalon_jtag_uart_read+0x138>
 4019e7c:	e0bffc17 	ldw	r2,-16(fp)
 4019e80:	10c00917 	ldw	r3,36(r2)
 4019e84:	e0bffc17 	ldw	r2,-16(fp)
 4019e88:	10800117 	ldw	r2,4(r2)
 4019e8c:	18bff736 	bltu	r3,r2,4019e6c <__alt_data_end+0xfc019e6c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4019e90:	e0bffc17 	ldw	r2,-16(fp)
 4019e94:	10c00a17 	ldw	r3,40(r2)
 4019e98:	e0bff717 	ldw	r2,-36(fp)
 4019e9c:	18800726 	beq	r3,r2,4019ebc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4019ea0:	e0bffe17 	ldw	r2,-8(fp)
 4019ea4:	00bfb716 	blt	zero,r2,4019d84 <__alt_data_end+0xfc019d84>
 4019ea8:	00000506 	br	4019ec0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4019eac:	0001883a 	nop
 4019eb0:	00000306 	br	4019ec0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4019eb4:	0001883a 	nop
 4019eb8:	00000106 	br	4019ec0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4019ebc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4019ec0:	e0fff517 	ldw	r3,-44(fp)
 4019ec4:	e0bffd17 	ldw	r2,-12(fp)
 4019ec8:	18801826 	beq	r3,r2,4019f2c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019ecc:	0005303a 	rdctl	r2,status
 4019ed0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019ed4:	e0fffb17 	ldw	r3,-20(fp)
 4019ed8:	00bfff84 	movi	r2,-2
 4019edc:	1884703a 	and	r2,r3,r2
 4019ee0:	1001703a 	wrctl	status,r2
  
  return context;
 4019ee4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4019ee8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4019eec:	e0bffc17 	ldw	r2,-16(fp)
 4019ef0:	10800817 	ldw	r2,32(r2)
 4019ef4:	10c00054 	ori	r3,r2,1
 4019ef8:	e0bffc17 	ldw	r2,-16(fp)
 4019efc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4019f00:	e0bffc17 	ldw	r2,-16(fp)
 4019f04:	10800017 	ldw	r2,0(r2)
 4019f08:	10800104 	addi	r2,r2,4
 4019f0c:	1007883a 	mov	r3,r2
 4019f10:	e0bffc17 	ldw	r2,-16(fp)
 4019f14:	10800817 	ldw	r2,32(r2)
 4019f18:	18800035 	stwio	r2,0(r3)
 4019f1c:	e0bffa17 	ldw	r2,-24(fp)
 4019f20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019f24:	e0bff917 	ldw	r2,-28(fp)
 4019f28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4019f2c:	e0fff517 	ldw	r3,-44(fp)
 4019f30:	e0bffd17 	ldw	r2,-12(fp)
 4019f34:	18800426 	beq	r3,r2,4019f48 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4019f38:	e0fff517 	ldw	r3,-44(fp)
 4019f3c:	e0bffd17 	ldw	r2,-12(fp)
 4019f40:	1885c83a 	sub	r2,r3,r2
 4019f44:	00000606 	br	4019f60 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4019f48:	e0bfff17 	ldw	r2,-4(fp)
 4019f4c:	1090000c 	andi	r2,r2,16384
 4019f50:	10000226 	beq	r2,zero,4019f5c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4019f54:	00bffd44 	movi	r2,-11
 4019f58:	00000106 	br	4019f60 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4019f5c:	00bffec4 	movi	r2,-5
}
 4019f60:	e037883a 	mov	sp,fp
 4019f64:	dfc00117 	ldw	ra,4(sp)
 4019f68:	df000017 	ldw	fp,0(sp)
 4019f6c:	dec00204 	addi	sp,sp,8
 4019f70:	f800283a 	ret

04019f74 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4019f74:	defff304 	addi	sp,sp,-52
 4019f78:	dfc00c15 	stw	ra,48(sp)
 4019f7c:	df000b15 	stw	fp,44(sp)
 4019f80:	df000b04 	addi	fp,sp,44
 4019f84:	e13ffc15 	stw	r4,-16(fp)
 4019f88:	e17ffd15 	stw	r5,-12(fp)
 4019f8c:	e1bffe15 	stw	r6,-8(fp)
 4019f90:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4019f94:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4019f98:	e0bffd17 	ldw	r2,-12(fp)
 4019f9c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4019fa0:	00003706 	br	401a080 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4019fa4:	e0bffc17 	ldw	r2,-16(fp)
 4019fa8:	10800c17 	ldw	r2,48(r2)
 4019fac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4019fb0:	e0bffc17 	ldw	r2,-16(fp)
 4019fb4:	10800d17 	ldw	r2,52(r2)
 4019fb8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4019fbc:	e0fff917 	ldw	r3,-28(fp)
 4019fc0:	e0bff517 	ldw	r2,-44(fp)
 4019fc4:	1880062e 	bgeu	r3,r2,4019fe0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4019fc8:	e0fff517 	ldw	r3,-44(fp)
 4019fcc:	e0bff917 	ldw	r2,-28(fp)
 4019fd0:	1885c83a 	sub	r2,r3,r2
 4019fd4:	10bfffc4 	addi	r2,r2,-1
 4019fd8:	e0bff615 	stw	r2,-40(fp)
 4019fdc:	00000b06 	br	401a00c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4019fe0:	e0bff517 	ldw	r2,-44(fp)
 4019fe4:	10000526 	beq	r2,zero,4019ffc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4019fe8:	00c20004 	movi	r3,2048
 4019fec:	e0bff917 	ldw	r2,-28(fp)
 4019ff0:	1885c83a 	sub	r2,r3,r2
 4019ff4:	e0bff615 	stw	r2,-40(fp)
 4019ff8:	00000406 	br	401a00c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4019ffc:	00c1ffc4 	movi	r3,2047
 401a000:	e0bff917 	ldw	r2,-28(fp)
 401a004:	1885c83a 	sub	r2,r3,r2
 401a008:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401a00c:	e0bff617 	ldw	r2,-40(fp)
 401a010:	10001e26 	beq	r2,zero,401a08c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401a014:	e0fffe17 	ldw	r3,-8(fp)
 401a018:	e0bff617 	ldw	r2,-40(fp)
 401a01c:	1880022e 	bgeu	r3,r2,401a028 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401a020:	e0bffe17 	ldw	r2,-8(fp)
 401a024:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401a028:	e0bffc17 	ldw	r2,-16(fp)
 401a02c:	10c20e04 	addi	r3,r2,2104
 401a030:	e0bff917 	ldw	r2,-28(fp)
 401a034:	1885883a 	add	r2,r3,r2
 401a038:	e1bff617 	ldw	r6,-40(fp)
 401a03c:	e17ffd17 	ldw	r5,-12(fp)
 401a040:	1009883a 	mov	r4,r2
 401a044:	400c0380 	call	400c038 <memcpy>
      ptr   += n;
 401a048:	e0fffd17 	ldw	r3,-12(fp)
 401a04c:	e0bff617 	ldw	r2,-40(fp)
 401a050:	1885883a 	add	r2,r3,r2
 401a054:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401a058:	e0fffe17 	ldw	r3,-8(fp)
 401a05c:	e0bff617 	ldw	r2,-40(fp)
 401a060:	1885c83a 	sub	r2,r3,r2
 401a064:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401a068:	e0fff917 	ldw	r3,-28(fp)
 401a06c:	e0bff617 	ldw	r2,-40(fp)
 401a070:	1885883a 	add	r2,r3,r2
 401a074:	10c1ffcc 	andi	r3,r2,2047
 401a078:	e0bffc17 	ldw	r2,-16(fp)
 401a07c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401a080:	e0bffe17 	ldw	r2,-8(fp)
 401a084:	00bfc716 	blt	zero,r2,4019fa4 <__alt_data_end+0xfc019fa4>
 401a088:	00000106 	br	401a090 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401a08c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a090:	0005303a 	rdctl	r2,status
 401a094:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a098:	e0fffb17 	ldw	r3,-20(fp)
 401a09c:	00bfff84 	movi	r2,-2
 401a0a0:	1884703a 	and	r2,r3,r2
 401a0a4:	1001703a 	wrctl	status,r2
  
  return context;
 401a0a8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401a0ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401a0b0:	e0bffc17 	ldw	r2,-16(fp)
 401a0b4:	10800817 	ldw	r2,32(r2)
 401a0b8:	10c00094 	ori	r3,r2,2
 401a0bc:	e0bffc17 	ldw	r2,-16(fp)
 401a0c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401a0c4:	e0bffc17 	ldw	r2,-16(fp)
 401a0c8:	10800017 	ldw	r2,0(r2)
 401a0cc:	10800104 	addi	r2,r2,4
 401a0d0:	1007883a 	mov	r3,r2
 401a0d4:	e0bffc17 	ldw	r2,-16(fp)
 401a0d8:	10800817 	ldw	r2,32(r2)
 401a0dc:	18800035 	stwio	r2,0(r3)
 401a0e0:	e0bffa17 	ldw	r2,-24(fp)
 401a0e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a0e8:	e0bff817 	ldw	r2,-32(fp)
 401a0ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401a0f0:	e0bffe17 	ldw	r2,-8(fp)
 401a0f4:	0080100e 	bge	zero,r2,401a138 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401a0f8:	e0bfff17 	ldw	r2,-4(fp)
 401a0fc:	1090000c 	andi	r2,r2,16384
 401a100:	1000101e 	bne	r2,zero,401a144 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401a104:	0001883a 	nop
 401a108:	e0bffc17 	ldw	r2,-16(fp)
 401a10c:	10c00d17 	ldw	r3,52(r2)
 401a110:	e0bff517 	ldw	r2,-44(fp)
 401a114:	1880051e 	bne	r3,r2,401a12c <altera_avalon_jtag_uart_write+0x1b8>
 401a118:	e0bffc17 	ldw	r2,-16(fp)
 401a11c:	10c00917 	ldw	r3,36(r2)
 401a120:	e0bffc17 	ldw	r2,-16(fp)
 401a124:	10800117 	ldw	r2,4(r2)
 401a128:	18bff736 	bltu	r3,r2,401a108 <__alt_data_end+0xfc01a108>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401a12c:	e0bffc17 	ldw	r2,-16(fp)
 401a130:	10800917 	ldw	r2,36(r2)
 401a134:	1000051e 	bne	r2,zero,401a14c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401a138:	e0bffe17 	ldw	r2,-8(fp)
 401a13c:	00bfd016 	blt	zero,r2,401a080 <__alt_data_end+0xfc01a080>
 401a140:	00000306 	br	401a150 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401a144:	0001883a 	nop
 401a148:	00000106 	br	401a150 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401a14c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401a150:	e0fffd17 	ldw	r3,-12(fp)
 401a154:	e0bff717 	ldw	r2,-36(fp)
 401a158:	18800426 	beq	r3,r2,401a16c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401a15c:	e0fffd17 	ldw	r3,-12(fp)
 401a160:	e0bff717 	ldw	r2,-36(fp)
 401a164:	1885c83a 	sub	r2,r3,r2
 401a168:	00000606 	br	401a184 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401a16c:	e0bfff17 	ldw	r2,-4(fp)
 401a170:	1090000c 	andi	r2,r2,16384
 401a174:	10000226 	beq	r2,zero,401a180 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 401a178:	00bffd44 	movi	r2,-11
 401a17c:	00000106 	br	401a184 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401a180:	00bffec4 	movi	r2,-5
}
 401a184:	e037883a 	mov	sp,fp
 401a188:	dfc00117 	ldw	ra,4(sp)
 401a18c:	df000017 	ldw	fp,0(sp)
 401a190:	dec00204 	addi	sp,sp,8
 401a194:	f800283a 	ret

0401a198 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401a198:	defff404 	addi	sp,sp,-48
 401a19c:	df000b15 	stw	fp,44(sp)
 401a1a0:	df000b04 	addi	fp,sp,44
 401a1a4:	e13ffc15 	stw	r4,-16(fp)
 401a1a8:	e17ffd15 	stw	r5,-12(fp)
 401a1ac:	e1bffe15 	stw	r6,-8(fp)
 401a1b0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 401a1b4:	e0ffff17 	ldw	r3,-4(fp)
 401a1b8:	e0bffe17 	ldw	r2,-8(fp)
 401a1bc:	1885883a 	add	r2,r3,r2
 401a1c0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 401a1c4:	e0c00217 	ldw	r3,8(fp)
 401a1c8:	e0800117 	ldw	r2,4(fp)
 401a1cc:	1885883a 	add	r2,r3,r2
 401a1d0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 401a1d4:	e0800117 	ldw	r2,4(fp)
 401a1d8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 401a1dc:	e0bffe17 	ldw	r2,-8(fp)
 401a1e0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 401a1e4:	00800044 	movi	r2,1
 401a1e8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401a1ec:	e0bffc17 	ldw	r2,-16(fp)
 401a1f0:	10800504 	addi	r2,r2,20
 401a1f4:	1009883a 	mov	r4,r2
 401a1f8:	00c00044 	movi	r3,1
 401a1fc:	e0bffd17 	ldw	r2,-12(fp)
 401a200:	1884983a 	sll	r2,r3,r2
 401a204:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401a208:	e0800317 	ldw	r2,12(fp)
 401a20c:	1080008c 	andi	r2,r2,2
 401a210:	1000051e 	bne	r2,zero,401a228 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 401a214:	e0bffc17 	ldw	r2,-16(fp)
 401a218:	10800304 	addi	r2,r2,12
 401a21c:	1007883a 	mov	r3,r2
 401a220:	00810004 	movi	r2,1024
 401a224:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401a228:	e0bffc17 	ldw	r2,-16(fp)
 401a22c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401a230:	e0bffc17 	ldw	r2,-16(fp)
 401a234:	10800204 	addi	r2,r2,8
 401a238:	10800037 	ldwio	r2,0(r2)
 401a23c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401a240:	e0bffa17 	ldw	r2,-24(fp)
 401a244:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401a248:	10000226 	beq	r2,zero,401a254 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401a24c:	e0bff717 	ldw	r2,-36(fp)
 401a250:	1000031e 	bne	r2,zero,401a260 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401a254:	e0bffa17 	ldw	r2,-24(fp)
 401a258:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401a25c:	103ff426 	beq	r2,zero,401a230 <__alt_data_end+0xfc01a230>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 401a260:	e0bffa17 	ldw	r2,-24(fp)
 401a264:	1080100c 	andi	r2,r2,64
 401a268:	10001e26 	beq	r2,zero,401a2e4 <alt_avalon_spi_command+0x14c>
 401a26c:	e0bff717 	ldw	r2,-36(fp)
 401a270:	00801c0e 	bge	zero,r2,401a2e4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 401a274:	e0bff717 	ldw	r2,-36(fp)
 401a278:	10bfffc4 	addi	r2,r2,-1
 401a27c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 401a280:	e0ffff17 	ldw	r3,-4(fp)
 401a284:	e0bff817 	ldw	r2,-32(fp)
 401a288:	18800a2e 	bgeu	r3,r2,401a2b4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 401a28c:	e0bffc17 	ldw	r2,-16(fp)
 401a290:	10800104 	addi	r2,r2,4
 401a294:	1009883a 	mov	r4,r2
 401a298:	e0bfff17 	ldw	r2,-4(fp)
 401a29c:	10c00044 	addi	r3,r2,1
 401a2a0:	e0ffff15 	stw	r3,-4(fp)
 401a2a4:	10800003 	ldbu	r2,0(r2)
 401a2a8:	10803fcc 	andi	r2,r2,255
 401a2ac:	20800035 	stwio	r2,0(r4)
 401a2b0:	00000c06 	br	401a2e4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 401a2b4:	e0bff517 	ldw	r2,-44(fp)
 401a2b8:	10000826 	beq	r2,zero,401a2dc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 401a2bc:	e0bff517 	ldw	r2,-44(fp)
 401a2c0:	10bfffc4 	addi	r2,r2,-1
 401a2c4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 401a2c8:	e0bffc17 	ldw	r2,-16(fp)
 401a2cc:	10800104 	addi	r2,r2,4
 401a2d0:	0007883a 	mov	r3,zero
 401a2d4:	10c00035 	stwio	r3,0(r2)
 401a2d8:	00000206 	br	401a2e4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 401a2dc:	00bf0004 	movi	r2,-1024
 401a2e0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401a2e4:	e0bffa17 	ldw	r2,-24(fp)
 401a2e8:	1080200c 	andi	r2,r2,128
 401a2ec:	103fd026 	beq	r2,zero,401a230 <__alt_data_end+0xfc01a230>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401a2f0:	e0bffc17 	ldw	r2,-16(fp)
 401a2f4:	10800037 	ldwio	r2,0(r2)
 401a2f8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 401a2fc:	e0bff617 	ldw	r2,-40(fp)
 401a300:	10000426 	beq	r2,zero,401a314 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 401a304:	e0bff617 	ldw	r2,-40(fp)
 401a308:	10bfffc4 	addi	r2,r2,-1
 401a30c:	e0bff615 	stw	r2,-40(fp)
 401a310:	00000506 	br	401a328 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 401a314:	e0800217 	ldw	r2,8(fp)
 401a318:	10c00044 	addi	r3,r2,1
 401a31c:	e0c00215 	stw	r3,8(fp)
 401a320:	e0fffb17 	ldw	r3,-20(fp)
 401a324:	10c00005 	stb	r3,0(r2)
      credits++;
 401a328:	e0bff717 	ldw	r2,-36(fp)
 401a32c:	10800044 	addi	r2,r2,1
 401a330:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 401a334:	e0bff617 	ldw	r2,-40(fp)
 401a338:	103fbd1e 	bne	r2,zero,401a230 <__alt_data_end+0xfc01a230>
 401a33c:	e0c00217 	ldw	r3,8(fp)
 401a340:	e0bff917 	ldw	r2,-28(fp)
 401a344:	18bfba1e 	bne	r3,r2,401a230 <__alt_data_end+0xfc01a230>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401a348:	e0bffc17 	ldw	r2,-16(fp)
 401a34c:	10800204 	addi	r2,r2,8
 401a350:	10800037 	ldwio	r2,0(r2)
 401a354:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 401a358:	e0bffa17 	ldw	r2,-24(fp)
 401a35c:	1080080c 	andi	r2,r2,32
 401a360:	103ff926 	beq	r2,zero,401a348 <__alt_data_end+0xfc01a348>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 401a364:	e0800317 	ldw	r2,12(fp)
 401a368:	1080004c 	andi	r2,r2,1
 401a36c:	1000041e 	bne	r2,zero,401a380 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 401a370:	e0bffc17 	ldw	r2,-16(fp)
 401a374:	10800304 	addi	r2,r2,12
 401a378:	0007883a 	mov	r3,zero
 401a37c:	10c00035 	stwio	r3,0(r2)

  return read_length;
 401a380:	e0800117 	ldw	r2,4(fp)
}
 401a384:	e037883a 	mov	sp,fp
 401a388:	df000017 	ldw	fp,0(sp)
 401a38c:	dec00104 	addi	sp,sp,4
 401a390:	f800283a 	ret

0401a394 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401a394:	defffa04 	addi	sp,sp,-24
 401a398:	dfc00515 	stw	ra,20(sp)
 401a39c:	df000415 	stw	fp,16(sp)
 401a3a0:	df000404 	addi	fp,sp,16
 401a3a4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401a3a8:	0007883a 	mov	r3,zero
 401a3ac:	e0bfff17 	ldw	r2,-4(fp)
 401a3b0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401a3b4:	e0bfff17 	ldw	r2,-4(fp)
 401a3b8:	10800104 	addi	r2,r2,4
 401a3bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a3c0:	0005303a 	rdctl	r2,status
 401a3c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a3c8:	e0fffd17 	ldw	r3,-12(fp)
 401a3cc:	00bfff84 	movi	r2,-2
 401a3d0:	1884703a 	and	r2,r3,r2
 401a3d4:	1001703a 	wrctl	status,r2
  
  return context;
 401a3d8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 401a3dc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401a3e0:	401b00c0 	call	401b00c <alt_tick>
 401a3e4:	e0bffc17 	ldw	r2,-16(fp)
 401a3e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a3ec:	e0bffe17 	ldw	r2,-8(fp)
 401a3f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401a3f4:	0001883a 	nop
 401a3f8:	e037883a 	mov	sp,fp
 401a3fc:	dfc00117 	ldw	ra,4(sp)
 401a400:	df000017 	ldw	fp,0(sp)
 401a404:	dec00204 	addi	sp,sp,8
 401a408:	f800283a 	ret

0401a40c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401a40c:	defff804 	addi	sp,sp,-32
 401a410:	dfc00715 	stw	ra,28(sp)
 401a414:	df000615 	stw	fp,24(sp)
 401a418:	df000604 	addi	fp,sp,24
 401a41c:	e13ffc15 	stw	r4,-16(fp)
 401a420:	e17ffd15 	stw	r5,-12(fp)
 401a424:	e1bffe15 	stw	r6,-8(fp)
 401a428:	e1ffff15 	stw	r7,-4(fp)
 401a42c:	e0bfff17 	ldw	r2,-4(fp)
 401a430:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401a434:	d092eb17 	ldw	r2,19372(gp)
 401a438:	1000021e 	bne	r2,zero,401a444 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401a43c:	e0bffb17 	ldw	r2,-20(fp)
 401a440:	d092eb15 	stw	r2,19372(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401a444:	e0bffc17 	ldw	r2,-16(fp)
 401a448:	10800104 	addi	r2,r2,4
 401a44c:	00c001c4 	movi	r3,7
 401a450:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401a454:	d8000015 	stw	zero,0(sp)
 401a458:	e1fffc17 	ldw	r7,-16(fp)
 401a45c:	018100b4 	movhi	r6,1026
 401a460:	31a8e504 	addi	r6,r6,-23660
 401a464:	e17ffe17 	ldw	r5,-8(fp)
 401a468:	e13ffd17 	ldw	r4,-12(fp)
 401a46c:	401a8ec0 	call	401a8ec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401a470:	0001883a 	nop
 401a474:	e037883a 	mov	sp,fp
 401a478:	dfc00117 	ldw	ra,4(sp)
 401a47c:	df000017 	ldw	fp,0(sp)
 401a480:	dec00204 	addi	sp,sp,8
 401a484:	f800283a 	ret

0401a488 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401a488:	defff504 	addi	sp,sp,-44
 401a48c:	df000a15 	stw	fp,40(sp)
 401a490:	df000a04 	addi	fp,sp,40
 401a494:	e13ffc15 	stw	r4,-16(fp)
 401a498:	e17ffd15 	stw	r5,-12(fp)
 401a49c:	e1bffe15 	stw	r6,-8(fp)
 401a4a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401a4a4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401a4a8:	d092eb17 	ldw	r2,19372(gp)
  
  if (alt_ticks_per_second ())
 401a4ac:	10003c26 	beq	r2,zero,401a5a0 <alt_alarm_start+0x118>
  {
    if (alarm)
 401a4b0:	e0bffc17 	ldw	r2,-16(fp)
 401a4b4:	10003826 	beq	r2,zero,401a598 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 401a4b8:	e0bffc17 	ldw	r2,-16(fp)
 401a4bc:	e0fffe17 	ldw	r3,-8(fp)
 401a4c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401a4c4:	e0bffc17 	ldw	r2,-16(fp)
 401a4c8:	e0ffff17 	ldw	r3,-4(fp)
 401a4cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a4d0:	0005303a 	rdctl	r2,status
 401a4d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a4d8:	e0fff917 	ldw	r3,-28(fp)
 401a4dc:	00bfff84 	movi	r2,-2
 401a4e0:	1884703a 	and	r2,r3,r2
 401a4e4:	1001703a 	wrctl	status,r2
  
  return context;
 401a4e8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401a4ec:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401a4f0:	d092ec17 	ldw	r2,19376(gp)
      
      current_nticks = alt_nticks();
 401a4f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 401a4f8:	e0fffd17 	ldw	r3,-12(fp)
 401a4fc:	e0bff617 	ldw	r2,-40(fp)
 401a500:	1885883a 	add	r2,r3,r2
 401a504:	10c00044 	addi	r3,r2,1
 401a508:	e0bffc17 	ldw	r2,-16(fp)
 401a50c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401a510:	e0bffc17 	ldw	r2,-16(fp)
 401a514:	10c00217 	ldw	r3,8(r2)
 401a518:	e0bff617 	ldw	r2,-40(fp)
 401a51c:	1880042e 	bgeu	r3,r2,401a530 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401a520:	e0bffc17 	ldw	r2,-16(fp)
 401a524:	00c00044 	movi	r3,1
 401a528:	10c00405 	stb	r3,16(r2)
 401a52c:	00000206 	br	401a538 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401a530:	e0bffc17 	ldw	r2,-16(fp)
 401a534:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401a538:	e0bffc17 	ldw	r2,-16(fp)
 401a53c:	d0e02704 	addi	r3,gp,-32612
 401a540:	e0fffa15 	stw	r3,-24(fp)
 401a544:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401a548:	e0bffb17 	ldw	r2,-20(fp)
 401a54c:	e0fffa17 	ldw	r3,-24(fp)
 401a550:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401a554:	e0bffa17 	ldw	r2,-24(fp)
 401a558:	10c00017 	ldw	r3,0(r2)
 401a55c:	e0bffb17 	ldw	r2,-20(fp)
 401a560:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401a564:	e0bffa17 	ldw	r2,-24(fp)
 401a568:	10800017 	ldw	r2,0(r2)
 401a56c:	e0fffb17 	ldw	r3,-20(fp)
 401a570:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401a574:	e0bffa17 	ldw	r2,-24(fp)
 401a578:	e0fffb17 	ldw	r3,-20(fp)
 401a57c:	10c00015 	stw	r3,0(r2)
 401a580:	e0bff817 	ldw	r2,-32(fp)
 401a584:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a588:	e0bff717 	ldw	r2,-36(fp)
 401a58c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401a590:	0005883a 	mov	r2,zero
 401a594:	00000306 	br	401a5a4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 401a598:	00bffa84 	movi	r2,-22
 401a59c:	00000106 	br	401a5a4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401a5a0:	00bfde84 	movi	r2,-134
  }
}
 401a5a4:	e037883a 	mov	sp,fp
 401a5a8:	df000017 	ldw	fp,0(sp)
 401a5ac:	dec00104 	addi	sp,sp,4
 401a5b0:	f800283a 	ret

0401a5b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401a5b4:	defffa04 	addi	sp,sp,-24
 401a5b8:	dfc00515 	stw	ra,20(sp)
 401a5bc:	df000415 	stw	fp,16(sp)
 401a5c0:	df000404 	addi	fp,sp,16
 401a5c4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 401a5c8:	00800244 	movi	r2,9
 401a5cc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401a5d0:	014003f4 	movhi	r5,15
 401a5d4:	29509004 	addi	r5,r5,16960
 401a5d8:	e13ffd17 	ldw	r4,-12(fp)
 401a5dc:	400b1dc0 	call	400b1dc <__mulsi3>
 401a5e0:	100b883a 	mov	r5,r2
 401a5e4:	0100bef4 	movhi	r4,763
 401a5e8:	213c2004 	addi	r4,r4,-3968
 401a5ec:	400b1200 	call	400b120 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401a5f0:	100b883a 	mov	r5,r2
 401a5f4:	01200034 	movhi	r4,32768
 401a5f8:	213fffc4 	addi	r4,r4,-1
 401a5fc:	400b1200 	call	400b120 <__udivsi3>
 401a600:	100b883a 	mov	r5,r2
 401a604:	e13fff17 	ldw	r4,-4(fp)
 401a608:	400b1200 	call	400b120 <__udivsi3>
 401a60c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401a610:	e0bffe17 	ldw	r2,-8(fp)
 401a614:	10002a26 	beq	r2,zero,401a6c0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 401a618:	e03ffc15 	stw	zero,-16(fp)
 401a61c:	00001706 	br	401a67c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401a620:	00a00034 	movhi	r2,32768
 401a624:	10bfffc4 	addi	r2,r2,-1
 401a628:	10bfffc4 	addi	r2,r2,-1
 401a62c:	103ffe1e 	bne	r2,zero,401a628 <__alt_data_end+0xfc01a628>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401a630:	014003f4 	movhi	r5,15
 401a634:	29509004 	addi	r5,r5,16960
 401a638:	e13ffd17 	ldw	r4,-12(fp)
 401a63c:	400b1dc0 	call	400b1dc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401a640:	100b883a 	mov	r5,r2
 401a644:	0100bef4 	movhi	r4,763
 401a648:	213c2004 	addi	r4,r4,-3968
 401a64c:	400b1200 	call	400b120 <__udivsi3>
 401a650:	100b883a 	mov	r5,r2
 401a654:	01200034 	movhi	r4,32768
 401a658:	213fffc4 	addi	r4,r4,-1
 401a65c:	400b1200 	call	400b120 <__udivsi3>
 401a660:	1007883a 	mov	r3,r2
 401a664:	e0bfff17 	ldw	r2,-4(fp)
 401a668:	10c5c83a 	sub	r2,r2,r3
 401a66c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401a670:	e0bffc17 	ldw	r2,-16(fp)
 401a674:	10800044 	addi	r2,r2,1
 401a678:	e0bffc15 	stw	r2,-16(fp)
 401a67c:	e0fffc17 	ldw	r3,-16(fp)
 401a680:	e0bffe17 	ldw	r2,-8(fp)
 401a684:	18bfe616 	blt	r3,r2,401a620 <__alt_data_end+0xfc01a620>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401a688:	014003f4 	movhi	r5,15
 401a68c:	29509004 	addi	r5,r5,16960
 401a690:	e13ffd17 	ldw	r4,-12(fp)
 401a694:	400b1dc0 	call	400b1dc <__mulsi3>
 401a698:	100b883a 	mov	r5,r2
 401a69c:	0100bef4 	movhi	r4,763
 401a6a0:	213c2004 	addi	r4,r4,-3968
 401a6a4:	400b1200 	call	400b120 <__udivsi3>
 401a6a8:	e17fff17 	ldw	r5,-4(fp)
 401a6ac:	1009883a 	mov	r4,r2
 401a6b0:	400b1dc0 	call	400b1dc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401a6b4:	10bfffc4 	addi	r2,r2,-1
 401a6b8:	103ffe1e 	bne	r2,zero,401a6b4 <__alt_data_end+0xfc01a6b4>
 401a6bc:	00000d06 	br	401a6f4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401a6c0:	014003f4 	movhi	r5,15
 401a6c4:	29509004 	addi	r5,r5,16960
 401a6c8:	e13ffd17 	ldw	r4,-12(fp)
 401a6cc:	400b1dc0 	call	400b1dc <__mulsi3>
 401a6d0:	100b883a 	mov	r5,r2
 401a6d4:	0100bef4 	movhi	r4,763
 401a6d8:	213c2004 	addi	r4,r4,-3968
 401a6dc:	400b1200 	call	400b120 <__udivsi3>
 401a6e0:	e17fff17 	ldw	r5,-4(fp)
 401a6e4:	1009883a 	mov	r4,r2
 401a6e8:	400b1dc0 	call	400b1dc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401a6ec:	10bfffc4 	addi	r2,r2,-1
 401a6f0:	00bffe16 	blt	zero,r2,401a6ec <__alt_data_end+0xfc01a6ec>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401a6f4:	0005883a 	mov	r2,zero
}
 401a6f8:	e037883a 	mov	sp,fp
 401a6fc:	dfc00117 	ldw	ra,4(sp)
 401a700:	df000017 	ldw	fp,0(sp)
 401a704:	dec00204 	addi	sp,sp,8
 401a708:	f800283a 	ret

0401a70c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401a70c:	deffff04 	addi	sp,sp,-4
 401a710:	df000015 	stw	fp,0(sp)
 401a714:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401a718:	0001883a 	nop
 401a71c:	e037883a 	mov	sp,fp
 401a720:	df000017 	ldw	fp,0(sp)
 401a724:	dec00104 	addi	sp,sp,4
 401a728:	f800283a 	ret

0401a72c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401a72c:	defffe04 	addi	sp,sp,-8
 401a730:	dfc00115 	stw	ra,4(sp)
 401a734:	df000015 	stw	fp,0(sp)
 401a738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401a73c:	d0a02417 	ldw	r2,-32624(gp)
 401a740:	10000326 	beq	r2,zero,401a750 <alt_get_errno+0x24>
 401a744:	d0a02417 	ldw	r2,-32624(gp)
 401a748:	103ee83a 	callr	r2
 401a74c:	00000106 	br	401a754 <alt_get_errno+0x28>
 401a750:	d092e304 	addi	r2,gp,19340
}
 401a754:	e037883a 	mov	sp,fp
 401a758:	dfc00117 	ldw	ra,4(sp)
 401a75c:	df000017 	ldw	fp,0(sp)
 401a760:	dec00204 	addi	sp,sp,8
 401a764:	f800283a 	ret

0401a768 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401a768:	defffa04 	addi	sp,sp,-24
 401a76c:	dfc00515 	stw	ra,20(sp)
 401a770:	df000415 	stw	fp,16(sp)
 401a774:	df000404 	addi	fp,sp,16
 401a778:	e13ffe15 	stw	r4,-8(fp)
 401a77c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401a780:	e0bffe17 	ldw	r2,-8(fp)
 401a784:	10000326 	beq	r2,zero,401a794 <alt_dev_llist_insert+0x2c>
 401a788:	e0bffe17 	ldw	r2,-8(fp)
 401a78c:	10800217 	ldw	r2,8(r2)
 401a790:	1000061e 	bne	r2,zero,401a7ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 401a794:	401a72c0 	call	401a72c <alt_get_errno>
 401a798:	1007883a 	mov	r3,r2
 401a79c:	00800584 	movi	r2,22
 401a7a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 401a7a4:	00bffa84 	movi	r2,-22
 401a7a8:	00001306 	br	401a7f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 401a7ac:	e0bffe17 	ldw	r2,-8(fp)
 401a7b0:	e0ffff17 	ldw	r3,-4(fp)
 401a7b4:	e0fffc15 	stw	r3,-16(fp)
 401a7b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401a7bc:	e0bffd17 	ldw	r2,-12(fp)
 401a7c0:	e0fffc17 	ldw	r3,-16(fp)
 401a7c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401a7c8:	e0bffc17 	ldw	r2,-16(fp)
 401a7cc:	10c00017 	ldw	r3,0(r2)
 401a7d0:	e0bffd17 	ldw	r2,-12(fp)
 401a7d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401a7d8:	e0bffc17 	ldw	r2,-16(fp)
 401a7dc:	10800017 	ldw	r2,0(r2)
 401a7e0:	e0fffd17 	ldw	r3,-12(fp)
 401a7e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401a7e8:	e0bffc17 	ldw	r2,-16(fp)
 401a7ec:	e0fffd17 	ldw	r3,-12(fp)
 401a7f0:	10c00015 	stw	r3,0(r2)

  return 0;  
 401a7f4:	0005883a 	mov	r2,zero
}
 401a7f8:	e037883a 	mov	sp,fp
 401a7fc:	dfc00117 	ldw	ra,4(sp)
 401a800:	df000017 	ldw	fp,0(sp)
 401a804:	dec00204 	addi	sp,sp,8
 401a808:	f800283a 	ret

0401a80c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401a80c:	defffd04 	addi	sp,sp,-12
 401a810:	dfc00215 	stw	ra,8(sp)
 401a814:	df000115 	stw	fp,4(sp)
 401a818:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401a81c:	008100b4 	movhi	r2,1026
 401a820:	10ade304 	addi	r2,r2,-18548
 401a824:	e0bfff15 	stw	r2,-4(fp)
 401a828:	00000606 	br	401a844 <_do_ctors+0x38>
        (*ctor) (); 
 401a82c:	e0bfff17 	ldw	r2,-4(fp)
 401a830:	10800017 	ldw	r2,0(r2)
 401a834:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401a838:	e0bfff17 	ldw	r2,-4(fp)
 401a83c:	10bfff04 	addi	r2,r2,-4
 401a840:	e0bfff15 	stw	r2,-4(fp)
 401a844:	e0ffff17 	ldw	r3,-4(fp)
 401a848:	008100b4 	movhi	r2,1026
 401a84c:	10add844 	addi	r2,r2,-18591
 401a850:	18bff62e 	bgeu	r3,r2,401a82c <__alt_data_end+0xfc01a82c>
        (*ctor) (); 
}
 401a854:	0001883a 	nop
 401a858:	e037883a 	mov	sp,fp
 401a85c:	dfc00117 	ldw	ra,4(sp)
 401a860:	df000017 	ldw	fp,0(sp)
 401a864:	dec00204 	addi	sp,sp,8
 401a868:	f800283a 	ret

0401a86c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401a86c:	defffd04 	addi	sp,sp,-12
 401a870:	dfc00215 	stw	ra,8(sp)
 401a874:	df000115 	stw	fp,4(sp)
 401a878:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401a87c:	008100b4 	movhi	r2,1026
 401a880:	10ade304 	addi	r2,r2,-18548
 401a884:	e0bfff15 	stw	r2,-4(fp)
 401a888:	00000606 	br	401a8a4 <_do_dtors+0x38>
        (*dtor) (); 
 401a88c:	e0bfff17 	ldw	r2,-4(fp)
 401a890:	10800017 	ldw	r2,0(r2)
 401a894:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401a898:	e0bfff17 	ldw	r2,-4(fp)
 401a89c:	10bfff04 	addi	r2,r2,-4
 401a8a0:	e0bfff15 	stw	r2,-4(fp)
 401a8a4:	e0ffff17 	ldw	r3,-4(fp)
 401a8a8:	008100b4 	movhi	r2,1026
 401a8ac:	10ade404 	addi	r2,r2,-18544
 401a8b0:	18bff62e 	bgeu	r3,r2,401a88c <__alt_data_end+0xfc01a88c>
        (*dtor) (); 
}
 401a8b4:	0001883a 	nop
 401a8b8:	e037883a 	mov	sp,fp
 401a8bc:	dfc00117 	ldw	ra,4(sp)
 401a8c0:	df000017 	ldw	fp,0(sp)
 401a8c4:	dec00204 	addi	sp,sp,8
 401a8c8:	f800283a 	ret

0401a8cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401a8cc:	deffff04 	addi	sp,sp,-4
 401a8d0:	df000015 	stw	fp,0(sp)
 401a8d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 401a8d8:	0001883a 	nop
 401a8dc:	e037883a 	mov	sp,fp
 401a8e0:	df000017 	ldw	fp,0(sp)
 401a8e4:	dec00104 	addi	sp,sp,4
 401a8e8:	f800283a 	ret

0401a8ec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401a8ec:	defff904 	addi	sp,sp,-28
 401a8f0:	dfc00615 	stw	ra,24(sp)
 401a8f4:	df000515 	stw	fp,20(sp)
 401a8f8:	df000504 	addi	fp,sp,20
 401a8fc:	e13ffc15 	stw	r4,-16(fp)
 401a900:	e17ffd15 	stw	r5,-12(fp)
 401a904:	e1bffe15 	stw	r6,-8(fp)
 401a908:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401a90c:	e0800217 	ldw	r2,8(fp)
 401a910:	d8800015 	stw	r2,0(sp)
 401a914:	e1ffff17 	ldw	r7,-4(fp)
 401a918:	e1bffe17 	ldw	r6,-8(fp)
 401a91c:	e17ffd17 	ldw	r5,-12(fp)
 401a920:	e13ffc17 	ldw	r4,-16(fp)
 401a924:	401aa9c0 	call	401aa9c <alt_iic_isr_register>
}  
 401a928:	e037883a 	mov	sp,fp
 401a92c:	dfc00117 	ldw	ra,4(sp)
 401a930:	df000017 	ldw	fp,0(sp)
 401a934:	dec00204 	addi	sp,sp,8
 401a938:	f800283a 	ret

0401a93c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401a93c:	defff904 	addi	sp,sp,-28
 401a940:	df000615 	stw	fp,24(sp)
 401a944:	df000604 	addi	fp,sp,24
 401a948:	e13ffe15 	stw	r4,-8(fp)
 401a94c:	e17fff15 	stw	r5,-4(fp)
 401a950:	e0bfff17 	ldw	r2,-4(fp)
 401a954:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a958:	0005303a 	rdctl	r2,status
 401a95c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a960:	e0fffb17 	ldw	r3,-20(fp)
 401a964:	00bfff84 	movi	r2,-2
 401a968:	1884703a 	and	r2,r3,r2
 401a96c:	1001703a 	wrctl	status,r2
  
  return context;
 401a970:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401a974:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401a978:	00c00044 	movi	r3,1
 401a97c:	e0bffa17 	ldw	r2,-24(fp)
 401a980:	1884983a 	sll	r2,r3,r2
 401a984:	1007883a 	mov	r3,r2
 401a988:	d092ea17 	ldw	r2,19368(gp)
 401a98c:	1884b03a 	or	r2,r3,r2
 401a990:	d092ea15 	stw	r2,19368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401a994:	d092ea17 	ldw	r2,19368(gp)
 401a998:	100170fa 	wrctl	ienable,r2
 401a99c:	e0bffc17 	ldw	r2,-16(fp)
 401a9a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a9a4:	e0bffd17 	ldw	r2,-12(fp)
 401a9a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401a9ac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401a9b0:	0001883a 	nop
}
 401a9b4:	e037883a 	mov	sp,fp
 401a9b8:	df000017 	ldw	fp,0(sp)
 401a9bc:	dec00104 	addi	sp,sp,4
 401a9c0:	f800283a 	ret

0401a9c4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401a9c4:	defff904 	addi	sp,sp,-28
 401a9c8:	df000615 	stw	fp,24(sp)
 401a9cc:	df000604 	addi	fp,sp,24
 401a9d0:	e13ffe15 	stw	r4,-8(fp)
 401a9d4:	e17fff15 	stw	r5,-4(fp)
 401a9d8:	e0bfff17 	ldw	r2,-4(fp)
 401a9dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a9e0:	0005303a 	rdctl	r2,status
 401a9e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a9e8:	e0fffb17 	ldw	r3,-20(fp)
 401a9ec:	00bfff84 	movi	r2,-2
 401a9f0:	1884703a 	and	r2,r3,r2
 401a9f4:	1001703a 	wrctl	status,r2
  
  return context;
 401a9f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401a9fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401aa00:	00c00044 	movi	r3,1
 401aa04:	e0bffa17 	ldw	r2,-24(fp)
 401aa08:	1884983a 	sll	r2,r3,r2
 401aa0c:	0084303a 	nor	r2,zero,r2
 401aa10:	1007883a 	mov	r3,r2
 401aa14:	d092ea17 	ldw	r2,19368(gp)
 401aa18:	1884703a 	and	r2,r3,r2
 401aa1c:	d092ea15 	stw	r2,19368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401aa20:	d092ea17 	ldw	r2,19368(gp)
 401aa24:	100170fa 	wrctl	ienable,r2
 401aa28:	e0bffc17 	ldw	r2,-16(fp)
 401aa2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401aa30:	e0bffd17 	ldw	r2,-12(fp)
 401aa34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401aa38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401aa3c:	0001883a 	nop
}
 401aa40:	e037883a 	mov	sp,fp
 401aa44:	df000017 	ldw	fp,0(sp)
 401aa48:	dec00104 	addi	sp,sp,4
 401aa4c:	f800283a 	ret

0401aa50 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401aa50:	defffc04 	addi	sp,sp,-16
 401aa54:	df000315 	stw	fp,12(sp)
 401aa58:	df000304 	addi	fp,sp,12
 401aa5c:	e13ffe15 	stw	r4,-8(fp)
 401aa60:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401aa64:	000530fa 	rdctl	r2,ienable
 401aa68:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401aa6c:	00c00044 	movi	r3,1
 401aa70:	e0bfff17 	ldw	r2,-4(fp)
 401aa74:	1884983a 	sll	r2,r3,r2
 401aa78:	1007883a 	mov	r3,r2
 401aa7c:	e0bffd17 	ldw	r2,-12(fp)
 401aa80:	1884703a 	and	r2,r3,r2
 401aa84:	1004c03a 	cmpne	r2,r2,zero
 401aa88:	10803fcc 	andi	r2,r2,255
}
 401aa8c:	e037883a 	mov	sp,fp
 401aa90:	df000017 	ldw	fp,0(sp)
 401aa94:	dec00104 	addi	sp,sp,4
 401aa98:	f800283a 	ret

0401aa9c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401aa9c:	defff504 	addi	sp,sp,-44
 401aaa0:	dfc00a15 	stw	ra,40(sp)
 401aaa4:	df000915 	stw	fp,36(sp)
 401aaa8:	df000904 	addi	fp,sp,36
 401aaac:	e13ffc15 	stw	r4,-16(fp)
 401aab0:	e17ffd15 	stw	r5,-12(fp)
 401aab4:	e1bffe15 	stw	r6,-8(fp)
 401aab8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401aabc:	00bffa84 	movi	r2,-22
 401aac0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401aac4:	e0bffd17 	ldw	r2,-12(fp)
 401aac8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401aacc:	e0bff817 	ldw	r2,-32(fp)
 401aad0:	10800808 	cmpgei	r2,r2,32
 401aad4:	1000271e 	bne	r2,zero,401ab74 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401aad8:	0005303a 	rdctl	r2,status
 401aadc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401aae0:	e0fffb17 	ldw	r3,-20(fp)
 401aae4:	00bfff84 	movi	r2,-2
 401aae8:	1884703a 	and	r2,r3,r2
 401aaec:	1001703a 	wrctl	status,r2
  
  return context;
 401aaf0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401aaf4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 401aaf8:	008100f4 	movhi	r2,1027
 401aafc:	109a2604 	addi	r2,r2,26776
 401ab00:	e0fff817 	ldw	r3,-32(fp)
 401ab04:	180690fa 	slli	r3,r3,3
 401ab08:	10c5883a 	add	r2,r2,r3
 401ab0c:	e0fffe17 	ldw	r3,-8(fp)
 401ab10:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401ab14:	008100f4 	movhi	r2,1027
 401ab18:	109a2604 	addi	r2,r2,26776
 401ab1c:	e0fff817 	ldw	r3,-32(fp)
 401ab20:	180690fa 	slli	r3,r3,3
 401ab24:	10c5883a 	add	r2,r2,r3
 401ab28:	10800104 	addi	r2,r2,4
 401ab2c:	e0ffff17 	ldw	r3,-4(fp)
 401ab30:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401ab34:	e0bffe17 	ldw	r2,-8(fp)
 401ab38:	10000526 	beq	r2,zero,401ab50 <alt_iic_isr_register+0xb4>
 401ab3c:	e0bff817 	ldw	r2,-32(fp)
 401ab40:	100b883a 	mov	r5,r2
 401ab44:	e13ffc17 	ldw	r4,-16(fp)
 401ab48:	401a93c0 	call	401a93c <alt_ic_irq_enable>
 401ab4c:	00000406 	br	401ab60 <alt_iic_isr_register+0xc4>
 401ab50:	e0bff817 	ldw	r2,-32(fp)
 401ab54:	100b883a 	mov	r5,r2
 401ab58:	e13ffc17 	ldw	r4,-16(fp)
 401ab5c:	401a9c40 	call	401a9c4 <alt_ic_irq_disable>
 401ab60:	e0bff715 	stw	r2,-36(fp)
 401ab64:	e0bffa17 	ldw	r2,-24(fp)
 401ab68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ab6c:	e0bff917 	ldw	r2,-28(fp)
 401ab70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401ab74:	e0bff717 	ldw	r2,-36(fp)
}
 401ab78:	e037883a 	mov	sp,fp
 401ab7c:	dfc00117 	ldw	ra,4(sp)
 401ab80:	df000017 	ldw	fp,0(sp)
 401ab84:	dec00204 	addi	sp,sp,8
 401ab88:	f800283a 	ret

0401ab8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401ab8c:	defff804 	addi	sp,sp,-32
 401ab90:	dfc00715 	stw	ra,28(sp)
 401ab94:	df000615 	stw	fp,24(sp)
 401ab98:	dc000515 	stw	r16,20(sp)
 401ab9c:	df000604 	addi	fp,sp,24
 401aba0:	e13ffb15 	stw	r4,-20(fp)
 401aba4:	e17ffc15 	stw	r5,-16(fp)
 401aba8:	e1bffd15 	stw	r6,-12(fp)
 401abac:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 401abb0:	e1bffe17 	ldw	r6,-8(fp)
 401abb4:	e17ffd17 	ldw	r5,-12(fp)
 401abb8:	e13ffc17 	ldw	r4,-16(fp)
 401abbc:	401ae140 	call	401ae14 <open>
 401abc0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 401abc4:	e0bffa17 	ldw	r2,-24(fp)
 401abc8:	10002216 	blt	r2,zero,401ac54 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 401abcc:	040100f4 	movhi	r16,1027
 401abd0:	84228704 	addi	r16,r16,-30180
 401abd4:	e0bffa17 	ldw	r2,-24(fp)
 401abd8:	01400304 	movi	r5,12
 401abdc:	1009883a 	mov	r4,r2
 401abe0:	400b1dc0 	call	400b1dc <__mulsi3>
 401abe4:	8085883a 	add	r2,r16,r2
 401abe8:	10c00017 	ldw	r3,0(r2)
 401abec:	e0bffb17 	ldw	r2,-20(fp)
 401abf0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401abf4:	040100f4 	movhi	r16,1027
 401abf8:	84228704 	addi	r16,r16,-30180
 401abfc:	e0bffa17 	ldw	r2,-24(fp)
 401ac00:	01400304 	movi	r5,12
 401ac04:	1009883a 	mov	r4,r2
 401ac08:	400b1dc0 	call	400b1dc <__mulsi3>
 401ac0c:	8085883a 	add	r2,r16,r2
 401ac10:	10800104 	addi	r2,r2,4
 401ac14:	10c00017 	ldw	r3,0(r2)
 401ac18:	e0bffb17 	ldw	r2,-20(fp)
 401ac1c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401ac20:	040100f4 	movhi	r16,1027
 401ac24:	84228704 	addi	r16,r16,-30180
 401ac28:	e0bffa17 	ldw	r2,-24(fp)
 401ac2c:	01400304 	movi	r5,12
 401ac30:	1009883a 	mov	r4,r2
 401ac34:	400b1dc0 	call	400b1dc <__mulsi3>
 401ac38:	8085883a 	add	r2,r16,r2
 401ac3c:	10800204 	addi	r2,r2,8
 401ac40:	10c00017 	ldw	r3,0(r2)
 401ac44:	e0bffb17 	ldw	r2,-20(fp)
 401ac48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401ac4c:	e13ffa17 	ldw	r4,-24(fp)
 401ac50:	40193080 	call	4019308 <alt_release_fd>
  }
} 
 401ac54:	0001883a 	nop
 401ac58:	e6ffff04 	addi	sp,fp,-4
 401ac5c:	dfc00217 	ldw	ra,8(sp)
 401ac60:	df000117 	ldw	fp,4(sp)
 401ac64:	dc000017 	ldw	r16,0(sp)
 401ac68:	dec00304 	addi	sp,sp,12
 401ac6c:	f800283a 	ret

0401ac70 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401ac70:	defffb04 	addi	sp,sp,-20
 401ac74:	dfc00415 	stw	ra,16(sp)
 401ac78:	df000315 	stw	fp,12(sp)
 401ac7c:	df000304 	addi	fp,sp,12
 401ac80:	e13ffd15 	stw	r4,-12(fp)
 401ac84:	e17ffe15 	stw	r5,-8(fp)
 401ac88:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401ac8c:	01c07fc4 	movi	r7,511
 401ac90:	01800044 	movi	r6,1
 401ac94:	e17ffd17 	ldw	r5,-12(fp)
 401ac98:	010100f4 	movhi	r4,1027
 401ac9c:	21228a04 	addi	r4,r4,-30168
 401aca0:	401ab8c0 	call	401ab8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401aca4:	01c07fc4 	movi	r7,511
 401aca8:	000d883a 	mov	r6,zero
 401acac:	e17ffe17 	ldw	r5,-8(fp)
 401acb0:	010100f4 	movhi	r4,1027
 401acb4:	21228704 	addi	r4,r4,-30180
 401acb8:	401ab8c0 	call	401ab8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401acbc:	01c07fc4 	movi	r7,511
 401acc0:	01800044 	movi	r6,1
 401acc4:	e17fff17 	ldw	r5,-4(fp)
 401acc8:	010100f4 	movhi	r4,1027
 401accc:	21228d04 	addi	r4,r4,-30156
 401acd0:	401ab8c0 	call	401ab8c <alt_open_fd>
}  
 401acd4:	0001883a 	nop
 401acd8:	e037883a 	mov	sp,fp
 401acdc:	dfc00117 	ldw	ra,4(sp)
 401ace0:	df000017 	ldw	fp,0(sp)
 401ace4:	dec00204 	addi	sp,sp,8
 401ace8:	f800283a 	ret

0401acec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401acec:	defffe04 	addi	sp,sp,-8
 401acf0:	dfc00115 	stw	ra,4(sp)
 401acf4:	df000015 	stw	fp,0(sp)
 401acf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401acfc:	d0a02417 	ldw	r2,-32624(gp)
 401ad00:	10000326 	beq	r2,zero,401ad10 <alt_get_errno+0x24>
 401ad04:	d0a02417 	ldw	r2,-32624(gp)
 401ad08:	103ee83a 	callr	r2
 401ad0c:	00000106 	br	401ad14 <alt_get_errno+0x28>
 401ad10:	d092e304 	addi	r2,gp,19340
}
 401ad14:	e037883a 	mov	sp,fp
 401ad18:	dfc00117 	ldw	ra,4(sp)
 401ad1c:	df000017 	ldw	fp,0(sp)
 401ad20:	dec00204 	addi	sp,sp,8
 401ad24:	f800283a 	ret

0401ad28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401ad28:	defffb04 	addi	sp,sp,-20
 401ad2c:	dfc00415 	stw	ra,16(sp)
 401ad30:	df000315 	stw	fp,12(sp)
 401ad34:	dc000215 	stw	r16,8(sp)
 401ad38:	df000304 	addi	fp,sp,12
 401ad3c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401ad40:	e0bffe17 	ldw	r2,-8(fp)
 401ad44:	10800217 	ldw	r2,8(r2)
 401ad48:	10d00034 	orhi	r3,r2,16384
 401ad4c:	e0bffe17 	ldw	r2,-8(fp)
 401ad50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401ad54:	e03ffd15 	stw	zero,-12(fp)
 401ad58:	00002306 	br	401ade8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401ad5c:	040100f4 	movhi	r16,1027
 401ad60:	84228704 	addi	r16,r16,-30180
 401ad64:	e0bffd17 	ldw	r2,-12(fp)
 401ad68:	01400304 	movi	r5,12
 401ad6c:	1009883a 	mov	r4,r2
 401ad70:	400b1dc0 	call	400b1dc <__mulsi3>
 401ad74:	8085883a 	add	r2,r16,r2
 401ad78:	10c00017 	ldw	r3,0(r2)
 401ad7c:	e0bffe17 	ldw	r2,-8(fp)
 401ad80:	10800017 	ldw	r2,0(r2)
 401ad84:	1880151e 	bne	r3,r2,401addc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401ad88:	040100f4 	movhi	r16,1027
 401ad8c:	84228704 	addi	r16,r16,-30180
 401ad90:	e0bffd17 	ldw	r2,-12(fp)
 401ad94:	01400304 	movi	r5,12
 401ad98:	1009883a 	mov	r4,r2
 401ad9c:	400b1dc0 	call	400b1dc <__mulsi3>
 401ada0:	8085883a 	add	r2,r16,r2
 401ada4:	10800204 	addi	r2,r2,8
 401ada8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401adac:	10000b0e 	bge	r2,zero,401addc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401adb0:	01400304 	movi	r5,12
 401adb4:	e13ffd17 	ldw	r4,-12(fp)
 401adb8:	400b1dc0 	call	400b1dc <__mulsi3>
 401adbc:	1007883a 	mov	r3,r2
 401adc0:	008100f4 	movhi	r2,1027
 401adc4:	10a28704 	addi	r2,r2,-30180
 401adc8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401adcc:	e0bffe17 	ldw	r2,-8(fp)
 401add0:	18800226 	beq	r3,r2,401addc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401add4:	00bffcc4 	movi	r2,-13
 401add8:	00000806 	br	401adfc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401addc:	e0bffd17 	ldw	r2,-12(fp)
 401ade0:	10800044 	addi	r2,r2,1
 401ade4:	e0bffd15 	stw	r2,-12(fp)
 401ade8:	d0a02317 	ldw	r2,-32628(gp)
 401adec:	1007883a 	mov	r3,r2
 401adf0:	e0bffd17 	ldw	r2,-12(fp)
 401adf4:	18bfd92e 	bgeu	r3,r2,401ad5c <__alt_data_end+0xfc01ad5c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401adf8:	0005883a 	mov	r2,zero
}
 401adfc:	e6ffff04 	addi	sp,fp,-4
 401ae00:	dfc00217 	ldw	ra,8(sp)
 401ae04:	df000117 	ldw	fp,4(sp)
 401ae08:	dc000017 	ldw	r16,0(sp)
 401ae0c:	dec00304 	addi	sp,sp,12
 401ae10:	f800283a 	ret

0401ae14 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401ae14:	defff604 	addi	sp,sp,-40
 401ae18:	dfc00915 	stw	ra,36(sp)
 401ae1c:	df000815 	stw	fp,32(sp)
 401ae20:	df000804 	addi	fp,sp,32
 401ae24:	e13ffd15 	stw	r4,-12(fp)
 401ae28:	e17ffe15 	stw	r5,-8(fp)
 401ae2c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401ae30:	00bfffc4 	movi	r2,-1
 401ae34:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401ae38:	00bffb44 	movi	r2,-19
 401ae3c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401ae40:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401ae44:	d1602104 	addi	r5,gp,-32636
 401ae48:	e13ffd17 	ldw	r4,-12(fp)
 401ae4c:	401b1380 	call	401b138 <alt_find_dev>
 401ae50:	e0bff815 	stw	r2,-32(fp)
 401ae54:	e0bff817 	ldw	r2,-32(fp)
 401ae58:	1000051e 	bne	r2,zero,401ae70 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401ae5c:	e13ffd17 	ldw	r4,-12(fp)
 401ae60:	401b1c80 	call	401b1c8 <alt_find_file>
 401ae64:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401ae68:	00800044 	movi	r2,1
 401ae6c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401ae70:	e0bff817 	ldw	r2,-32(fp)
 401ae74:	10002b26 	beq	r2,zero,401af24 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401ae78:	e13ff817 	ldw	r4,-32(fp)
 401ae7c:	401b2d00 	call	401b2d0 <alt_get_fd>
 401ae80:	e0bff915 	stw	r2,-28(fp)
 401ae84:	e0bff917 	ldw	r2,-28(fp)
 401ae88:	1000030e 	bge	r2,zero,401ae98 <open+0x84>
    {
      status = index;
 401ae8c:	e0bff917 	ldw	r2,-28(fp)
 401ae90:	e0bffa15 	stw	r2,-24(fp)
 401ae94:	00002506 	br	401af2c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 401ae98:	01400304 	movi	r5,12
 401ae9c:	e13ff917 	ldw	r4,-28(fp)
 401aea0:	400b1dc0 	call	400b1dc <__mulsi3>
 401aea4:	1007883a 	mov	r3,r2
 401aea8:	008100f4 	movhi	r2,1027
 401aeac:	10a28704 	addi	r2,r2,-30180
 401aeb0:	1885883a 	add	r2,r3,r2
 401aeb4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401aeb8:	e0fffe17 	ldw	r3,-8(fp)
 401aebc:	00900034 	movhi	r2,16384
 401aec0:	10bfffc4 	addi	r2,r2,-1
 401aec4:	1886703a 	and	r3,r3,r2
 401aec8:	e0bffc17 	ldw	r2,-16(fp)
 401aecc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401aed0:	e0bffb17 	ldw	r2,-20(fp)
 401aed4:	1000051e 	bne	r2,zero,401aeec <open+0xd8>
 401aed8:	e13ffc17 	ldw	r4,-16(fp)
 401aedc:	401ad280 	call	401ad28 <alt_file_locked>
 401aee0:	e0bffa15 	stw	r2,-24(fp)
 401aee4:	e0bffa17 	ldw	r2,-24(fp)
 401aee8:	10001016 	blt	r2,zero,401af2c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401aeec:	e0bff817 	ldw	r2,-32(fp)
 401aef0:	10800317 	ldw	r2,12(r2)
 401aef4:	10000826 	beq	r2,zero,401af18 <open+0x104>
 401aef8:	e0bff817 	ldw	r2,-32(fp)
 401aefc:	10800317 	ldw	r2,12(r2)
 401af00:	e1ffff17 	ldw	r7,-4(fp)
 401af04:	e1bffe17 	ldw	r6,-8(fp)
 401af08:	e17ffd17 	ldw	r5,-12(fp)
 401af0c:	e13ffc17 	ldw	r4,-16(fp)
 401af10:	103ee83a 	callr	r2
 401af14:	00000106 	br	401af1c <open+0x108>
 401af18:	0005883a 	mov	r2,zero
 401af1c:	e0bffa15 	stw	r2,-24(fp)
 401af20:	00000206 	br	401af2c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401af24:	00bffb44 	movi	r2,-19
 401af28:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401af2c:	e0bffa17 	ldw	r2,-24(fp)
 401af30:	1000090e 	bge	r2,zero,401af58 <open+0x144>
  {
    alt_release_fd (index);  
 401af34:	e13ff917 	ldw	r4,-28(fp)
 401af38:	40193080 	call	4019308 <alt_release_fd>
    ALT_ERRNO = -status;
 401af3c:	401acec0 	call	401acec <alt_get_errno>
 401af40:	1007883a 	mov	r3,r2
 401af44:	e0bffa17 	ldw	r2,-24(fp)
 401af48:	0085c83a 	sub	r2,zero,r2
 401af4c:	18800015 	stw	r2,0(r3)
    return -1;
 401af50:	00bfffc4 	movi	r2,-1
 401af54:	00000106 	br	401af5c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 401af58:	e0bff917 	ldw	r2,-28(fp)
}
 401af5c:	e037883a 	mov	sp,fp
 401af60:	dfc00117 	ldw	ra,4(sp)
 401af64:	df000017 	ldw	fp,0(sp)
 401af68:	dec00204 	addi	sp,sp,8
 401af6c:	f800283a 	ret

0401af70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401af70:	defffa04 	addi	sp,sp,-24
 401af74:	df000515 	stw	fp,20(sp)
 401af78:	df000504 	addi	fp,sp,20
 401af7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401af80:	0005303a 	rdctl	r2,status
 401af84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401af88:	e0fffc17 	ldw	r3,-16(fp)
 401af8c:	00bfff84 	movi	r2,-2
 401af90:	1884703a 	and	r2,r3,r2
 401af94:	1001703a 	wrctl	status,r2
  
  return context;
 401af98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401af9c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401afa0:	e0bfff17 	ldw	r2,-4(fp)
 401afa4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401afa8:	e0bffd17 	ldw	r2,-12(fp)
 401afac:	10800017 	ldw	r2,0(r2)
 401afb0:	e0fffd17 	ldw	r3,-12(fp)
 401afb4:	18c00117 	ldw	r3,4(r3)
 401afb8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401afbc:	e0bffd17 	ldw	r2,-12(fp)
 401afc0:	10800117 	ldw	r2,4(r2)
 401afc4:	e0fffd17 	ldw	r3,-12(fp)
 401afc8:	18c00017 	ldw	r3,0(r3)
 401afcc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401afd0:	e0bffd17 	ldw	r2,-12(fp)
 401afd4:	e0fffd17 	ldw	r3,-12(fp)
 401afd8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401afdc:	e0bffd17 	ldw	r2,-12(fp)
 401afe0:	e0fffd17 	ldw	r3,-12(fp)
 401afe4:	10c00015 	stw	r3,0(r2)
 401afe8:	e0bffb17 	ldw	r2,-20(fp)
 401afec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401aff0:	e0bffe17 	ldw	r2,-8(fp)
 401aff4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401aff8:	0001883a 	nop
 401affc:	e037883a 	mov	sp,fp
 401b000:	df000017 	ldw	fp,0(sp)
 401b004:	dec00104 	addi	sp,sp,4
 401b008:	f800283a 	ret

0401b00c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401b00c:	defffb04 	addi	sp,sp,-20
 401b010:	dfc00415 	stw	ra,16(sp)
 401b014:	df000315 	stw	fp,12(sp)
 401b018:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401b01c:	d0a02717 	ldw	r2,-32612(gp)
 401b020:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401b024:	d092ec17 	ldw	r2,19376(gp)
 401b028:	10800044 	addi	r2,r2,1
 401b02c:	d092ec15 	stw	r2,19376(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401b030:	00002e06 	br	401b0ec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401b034:	e0bffd17 	ldw	r2,-12(fp)
 401b038:	10800017 	ldw	r2,0(r2)
 401b03c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401b040:	e0bffd17 	ldw	r2,-12(fp)
 401b044:	10800403 	ldbu	r2,16(r2)
 401b048:	10803fcc 	andi	r2,r2,255
 401b04c:	10000426 	beq	r2,zero,401b060 <alt_tick+0x54>
 401b050:	d092ec17 	ldw	r2,19376(gp)
 401b054:	1000021e 	bne	r2,zero,401b060 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401b058:	e0bffd17 	ldw	r2,-12(fp)
 401b05c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401b060:	e0bffd17 	ldw	r2,-12(fp)
 401b064:	10800217 	ldw	r2,8(r2)
 401b068:	d0d2ec17 	ldw	r3,19376(gp)
 401b06c:	18801d36 	bltu	r3,r2,401b0e4 <alt_tick+0xd8>
 401b070:	e0bffd17 	ldw	r2,-12(fp)
 401b074:	10800403 	ldbu	r2,16(r2)
 401b078:	10803fcc 	andi	r2,r2,255
 401b07c:	1000191e 	bne	r2,zero,401b0e4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401b080:	e0bffd17 	ldw	r2,-12(fp)
 401b084:	10800317 	ldw	r2,12(r2)
 401b088:	e0fffd17 	ldw	r3,-12(fp)
 401b08c:	18c00517 	ldw	r3,20(r3)
 401b090:	1809883a 	mov	r4,r3
 401b094:	103ee83a 	callr	r2
 401b098:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401b09c:	e0bfff17 	ldw	r2,-4(fp)
 401b0a0:	1000031e 	bne	r2,zero,401b0b0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401b0a4:	e13ffd17 	ldw	r4,-12(fp)
 401b0a8:	401af700 	call	401af70 <alt_alarm_stop>
 401b0ac:	00000d06 	br	401b0e4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 401b0b0:	e0bffd17 	ldw	r2,-12(fp)
 401b0b4:	10c00217 	ldw	r3,8(r2)
 401b0b8:	e0bfff17 	ldw	r2,-4(fp)
 401b0bc:	1887883a 	add	r3,r3,r2
 401b0c0:	e0bffd17 	ldw	r2,-12(fp)
 401b0c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401b0c8:	e0bffd17 	ldw	r2,-12(fp)
 401b0cc:	10c00217 	ldw	r3,8(r2)
 401b0d0:	d092ec17 	ldw	r2,19376(gp)
 401b0d4:	1880032e 	bgeu	r3,r2,401b0e4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 401b0d8:	e0bffd17 	ldw	r2,-12(fp)
 401b0dc:	00c00044 	movi	r3,1
 401b0e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 401b0e4:	e0bffe17 	ldw	r2,-8(fp)
 401b0e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401b0ec:	e0fffd17 	ldw	r3,-12(fp)
 401b0f0:	d0a02704 	addi	r2,gp,-32612
 401b0f4:	18bfcf1e 	bne	r3,r2,401b034 <__alt_data_end+0xfc01b034>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401b0f8:	0001883a 	nop
}
 401b0fc:	0001883a 	nop
 401b100:	e037883a 	mov	sp,fp
 401b104:	dfc00117 	ldw	ra,4(sp)
 401b108:	df000017 	ldw	fp,0(sp)
 401b10c:	dec00204 	addi	sp,sp,8
 401b110:	f800283a 	ret

0401b114 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401b114:	deffff04 	addi	sp,sp,-4
 401b118:	df000015 	stw	fp,0(sp)
 401b11c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401b120:	000170fa 	wrctl	ienable,zero
}
 401b124:	0001883a 	nop
 401b128:	e037883a 	mov	sp,fp
 401b12c:	df000017 	ldw	fp,0(sp)
 401b130:	dec00104 	addi	sp,sp,4
 401b134:	f800283a 	ret

0401b138 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401b138:	defffa04 	addi	sp,sp,-24
 401b13c:	dfc00515 	stw	ra,20(sp)
 401b140:	df000415 	stw	fp,16(sp)
 401b144:	df000404 	addi	fp,sp,16
 401b148:	e13ffe15 	stw	r4,-8(fp)
 401b14c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401b150:	e0bfff17 	ldw	r2,-4(fp)
 401b154:	10800017 	ldw	r2,0(r2)
 401b158:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401b15c:	e13ffe17 	ldw	r4,-8(fp)
 401b160:	400c83c0 	call	400c83c <strlen>
 401b164:	10800044 	addi	r2,r2,1
 401b168:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401b16c:	00000d06 	br	401b1a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401b170:	e0bffc17 	ldw	r2,-16(fp)
 401b174:	10800217 	ldw	r2,8(r2)
 401b178:	e0fffd17 	ldw	r3,-12(fp)
 401b17c:	180d883a 	mov	r6,r3
 401b180:	e17ffe17 	ldw	r5,-8(fp)
 401b184:	1009883a 	mov	r4,r2
 401b188:	400bfbc0 	call	400bfbc <memcmp>
 401b18c:	1000021e 	bne	r2,zero,401b198 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401b190:	e0bffc17 	ldw	r2,-16(fp)
 401b194:	00000706 	br	401b1b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401b198:	e0bffc17 	ldw	r2,-16(fp)
 401b19c:	10800017 	ldw	r2,0(r2)
 401b1a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401b1a4:	e0fffc17 	ldw	r3,-16(fp)
 401b1a8:	e0bfff17 	ldw	r2,-4(fp)
 401b1ac:	18bff01e 	bne	r3,r2,401b170 <__alt_data_end+0xfc01b170>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401b1b0:	0005883a 	mov	r2,zero
}
 401b1b4:	e037883a 	mov	sp,fp
 401b1b8:	dfc00117 	ldw	ra,4(sp)
 401b1bc:	df000017 	ldw	fp,0(sp)
 401b1c0:	dec00204 	addi	sp,sp,8
 401b1c4:	f800283a 	ret

0401b1c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401b1c8:	defffb04 	addi	sp,sp,-20
 401b1cc:	dfc00415 	stw	ra,16(sp)
 401b1d0:	df000315 	stw	fp,12(sp)
 401b1d4:	df000304 	addi	fp,sp,12
 401b1d8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401b1dc:	d0a01f17 	ldw	r2,-32644(gp)
 401b1e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401b1e4:	00003106 	br	401b2ac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401b1e8:	e0bffd17 	ldw	r2,-12(fp)
 401b1ec:	10800217 	ldw	r2,8(r2)
 401b1f0:	1009883a 	mov	r4,r2
 401b1f4:	400c83c0 	call	400c83c <strlen>
 401b1f8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 401b1fc:	e0bffd17 	ldw	r2,-12(fp)
 401b200:	10c00217 	ldw	r3,8(r2)
 401b204:	e0bffe17 	ldw	r2,-8(fp)
 401b208:	10bfffc4 	addi	r2,r2,-1
 401b20c:	1885883a 	add	r2,r3,r2
 401b210:	10800003 	ldbu	r2,0(r2)
 401b214:	10803fcc 	andi	r2,r2,255
 401b218:	1080201c 	xori	r2,r2,128
 401b21c:	10bfe004 	addi	r2,r2,-128
 401b220:	10800bd8 	cmpnei	r2,r2,47
 401b224:	1000031e 	bne	r2,zero,401b234 <alt_find_file+0x6c>
    {
      len -= 1;
 401b228:	e0bffe17 	ldw	r2,-8(fp)
 401b22c:	10bfffc4 	addi	r2,r2,-1
 401b230:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401b234:	e0bffe17 	ldw	r2,-8(fp)
 401b238:	e0ffff17 	ldw	r3,-4(fp)
 401b23c:	1885883a 	add	r2,r3,r2
 401b240:	10800003 	ldbu	r2,0(r2)
 401b244:	10803fcc 	andi	r2,r2,255
 401b248:	1080201c 	xori	r2,r2,128
 401b24c:	10bfe004 	addi	r2,r2,-128
 401b250:	10800be0 	cmpeqi	r2,r2,47
 401b254:	1000081e 	bne	r2,zero,401b278 <alt_find_file+0xb0>
 401b258:	e0bffe17 	ldw	r2,-8(fp)
 401b25c:	e0ffff17 	ldw	r3,-4(fp)
 401b260:	1885883a 	add	r2,r3,r2
 401b264:	10800003 	ldbu	r2,0(r2)
 401b268:	10803fcc 	andi	r2,r2,255
 401b26c:	1080201c 	xori	r2,r2,128
 401b270:	10bfe004 	addi	r2,r2,-128
 401b274:	10000a1e 	bne	r2,zero,401b2a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401b278:	e0bffd17 	ldw	r2,-12(fp)
 401b27c:	10800217 	ldw	r2,8(r2)
 401b280:	e0fffe17 	ldw	r3,-8(fp)
 401b284:	180d883a 	mov	r6,r3
 401b288:	e17fff17 	ldw	r5,-4(fp)
 401b28c:	1009883a 	mov	r4,r2
 401b290:	400bfbc0 	call	400bfbc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401b294:	1000021e 	bne	r2,zero,401b2a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401b298:	e0bffd17 	ldw	r2,-12(fp)
 401b29c:	00000706 	br	401b2bc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401b2a0:	e0bffd17 	ldw	r2,-12(fp)
 401b2a4:	10800017 	ldw	r2,0(r2)
 401b2a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401b2ac:	e0fffd17 	ldw	r3,-12(fp)
 401b2b0:	d0a01f04 	addi	r2,gp,-32644
 401b2b4:	18bfcc1e 	bne	r3,r2,401b1e8 <__alt_data_end+0xfc01b1e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401b2b8:	0005883a 	mov	r2,zero
}
 401b2bc:	e037883a 	mov	sp,fp
 401b2c0:	dfc00117 	ldw	ra,4(sp)
 401b2c4:	df000017 	ldw	fp,0(sp)
 401b2c8:	dec00204 	addi	sp,sp,8
 401b2cc:	f800283a 	ret

0401b2d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401b2d0:	defffa04 	addi	sp,sp,-24
 401b2d4:	dfc00515 	stw	ra,20(sp)
 401b2d8:	df000415 	stw	fp,16(sp)
 401b2dc:	dc000315 	stw	r16,12(sp)
 401b2e0:	df000404 	addi	fp,sp,16
 401b2e4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 401b2e8:	00bffa04 	movi	r2,-24
 401b2ec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401b2f0:	e03ffc15 	stw	zero,-16(fp)
 401b2f4:	00001d06 	br	401b36c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401b2f8:	040100f4 	movhi	r16,1027
 401b2fc:	84228704 	addi	r16,r16,-30180
 401b300:	e0bffc17 	ldw	r2,-16(fp)
 401b304:	01400304 	movi	r5,12
 401b308:	1009883a 	mov	r4,r2
 401b30c:	400b1dc0 	call	400b1dc <__mulsi3>
 401b310:	8085883a 	add	r2,r16,r2
 401b314:	10800017 	ldw	r2,0(r2)
 401b318:	1000111e 	bne	r2,zero,401b360 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 401b31c:	040100f4 	movhi	r16,1027
 401b320:	84228704 	addi	r16,r16,-30180
 401b324:	e0bffc17 	ldw	r2,-16(fp)
 401b328:	01400304 	movi	r5,12
 401b32c:	1009883a 	mov	r4,r2
 401b330:	400b1dc0 	call	400b1dc <__mulsi3>
 401b334:	8085883a 	add	r2,r16,r2
 401b338:	e0fffe17 	ldw	r3,-8(fp)
 401b33c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401b340:	d0e02317 	ldw	r3,-32628(gp)
 401b344:	e0bffc17 	ldw	r2,-16(fp)
 401b348:	1880020e 	bge	r3,r2,401b354 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 401b34c:	e0bffc17 	ldw	r2,-16(fp)
 401b350:	d0a02315 	stw	r2,-32628(gp)
      }
      rc = i;
 401b354:	e0bffc17 	ldw	r2,-16(fp)
 401b358:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 401b35c:	00000606 	br	401b378 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401b360:	e0bffc17 	ldw	r2,-16(fp)
 401b364:	10800044 	addi	r2,r2,1
 401b368:	e0bffc15 	stw	r2,-16(fp)
 401b36c:	e0bffc17 	ldw	r2,-16(fp)
 401b370:	10800810 	cmplti	r2,r2,32
 401b374:	103fe01e 	bne	r2,zero,401b2f8 <__alt_data_end+0xfc01b2f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401b378:	e0bffd17 	ldw	r2,-12(fp)
}
 401b37c:	e6ffff04 	addi	sp,fp,-4
 401b380:	dfc00217 	ldw	ra,8(sp)
 401b384:	df000117 	ldw	fp,4(sp)
 401b388:	dc000017 	ldw	r16,0(sp)
 401b38c:	dec00304 	addi	sp,sp,12
 401b390:	f800283a 	ret

0401b394 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401b394:	defffe04 	addi	sp,sp,-8
 401b398:	df000115 	stw	fp,4(sp)
 401b39c:	df000104 	addi	fp,sp,4
 401b3a0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401b3a4:	e0bfff17 	ldw	r2,-4(fp)
 401b3a8:	10bffe84 	addi	r2,r2,-6
 401b3ac:	10c00428 	cmpgeui	r3,r2,16
 401b3b0:	18001a1e 	bne	r3,zero,401b41c <alt_exception_cause_generated_bad_addr+0x88>
 401b3b4:	100690ba 	slli	r3,r2,2
 401b3b8:	008100b4 	movhi	r2,1026
 401b3bc:	10acf304 	addi	r2,r2,-19508
 401b3c0:	1885883a 	add	r2,r3,r2
 401b3c4:	10800017 	ldw	r2,0(r2)
 401b3c8:	1000683a 	jmp	r2
 401b3cc:	0401b40c 	andi	r16,zero,1744
 401b3d0:	0401b40c 	andi	r16,zero,1744
 401b3d4:	0401b41c 	xori	r16,zero,1744
 401b3d8:	0401b41c 	xori	r16,zero,1744
 401b3dc:	0401b41c 	xori	r16,zero,1744
 401b3e0:	0401b40c 	andi	r16,zero,1744
 401b3e4:	0401b414 	movui	r16,1744
 401b3e8:	0401b41c 	xori	r16,zero,1744
 401b3ec:	0401b40c 	andi	r16,zero,1744
 401b3f0:	0401b40c 	andi	r16,zero,1744
 401b3f4:	0401b41c 	xori	r16,zero,1744
 401b3f8:	0401b40c 	andi	r16,zero,1744
 401b3fc:	0401b414 	movui	r16,1744
 401b400:	0401b41c 	xori	r16,zero,1744
 401b404:	0401b41c 	xori	r16,zero,1744
 401b408:	0401b40c 	andi	r16,zero,1744
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401b40c:	00800044 	movi	r2,1
 401b410:	00000306 	br	401b420 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401b414:	0005883a 	mov	r2,zero
 401b418:	00000106 	br	401b420 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401b41c:	0005883a 	mov	r2,zero
  }
}
 401b420:	e037883a 	mov	sp,fp
 401b424:	df000017 	ldw	fp,0(sp)
 401b428:	dec00104 	addi	sp,sp,4
 401b42c:	f800283a 	ret

0401b430 <atexit>:
 401b430:	200b883a 	mov	r5,r4
 401b434:	000f883a 	mov	r7,zero
 401b438:	000d883a 	mov	r6,zero
 401b43c:	0009883a 	mov	r4,zero
 401b440:	401b47c1 	jmpi	401b47c <__register_exitproc>

0401b444 <exit>:
 401b444:	defffe04 	addi	sp,sp,-8
 401b448:	000b883a 	mov	r5,zero
 401b44c:	dc000015 	stw	r16,0(sp)
 401b450:	dfc00115 	stw	ra,4(sp)
 401b454:	2021883a 	mov	r16,r4
 401b458:	401b5940 	call	401b594 <__call_exitprocs>
 401b45c:	008100f4 	movhi	r2,1027
 401b460:	10a71804 	addi	r2,r2,-25504
 401b464:	11000017 	ldw	r4,0(r2)
 401b468:	20800f17 	ldw	r2,60(r4)
 401b46c:	10000126 	beq	r2,zero,401b474 <exit+0x30>
 401b470:	103ee83a 	callr	r2
 401b474:	8009883a 	mov	r4,r16
 401b478:	4018b640 	call	4018b64 <_exit>

0401b47c <__register_exitproc>:
 401b47c:	defffa04 	addi	sp,sp,-24
 401b480:	dc000315 	stw	r16,12(sp)
 401b484:	040100f4 	movhi	r16,1027
 401b488:	84271804 	addi	r16,r16,-25504
 401b48c:	80c00017 	ldw	r3,0(r16)
 401b490:	dc400415 	stw	r17,16(sp)
 401b494:	dfc00515 	stw	ra,20(sp)
 401b498:	18805217 	ldw	r2,328(r3)
 401b49c:	2023883a 	mov	r17,r4
 401b4a0:	10003726 	beq	r2,zero,401b580 <__register_exitproc+0x104>
 401b4a4:	10c00117 	ldw	r3,4(r2)
 401b4a8:	010007c4 	movi	r4,31
 401b4ac:	20c00e16 	blt	r4,r3,401b4e8 <__register_exitproc+0x6c>
 401b4b0:	1a000044 	addi	r8,r3,1
 401b4b4:	8800221e 	bne	r17,zero,401b540 <__register_exitproc+0xc4>
 401b4b8:	18c00084 	addi	r3,r3,2
 401b4bc:	18c7883a 	add	r3,r3,r3
 401b4c0:	18c7883a 	add	r3,r3,r3
 401b4c4:	12000115 	stw	r8,4(r2)
 401b4c8:	10c7883a 	add	r3,r2,r3
 401b4cc:	19400015 	stw	r5,0(r3)
 401b4d0:	0005883a 	mov	r2,zero
 401b4d4:	dfc00517 	ldw	ra,20(sp)
 401b4d8:	dc400417 	ldw	r17,16(sp)
 401b4dc:	dc000317 	ldw	r16,12(sp)
 401b4e0:	dec00604 	addi	sp,sp,24
 401b4e4:	f800283a 	ret
 401b4e8:	00810074 	movhi	r2,1025
 401b4ec:	10ade204 	addi	r2,r2,-18552
 401b4f0:	10002626 	beq	r2,zero,401b58c <__register_exitproc+0x110>
 401b4f4:	01006404 	movi	r4,400
 401b4f8:	d9400015 	stw	r5,0(sp)
 401b4fc:	d9800115 	stw	r6,4(sp)
 401b500:	d9c00215 	stw	r7,8(sp)
 401b504:	400b7880 	call	400b788 <malloc>
 401b508:	d9400017 	ldw	r5,0(sp)
 401b50c:	d9800117 	ldw	r6,4(sp)
 401b510:	d9c00217 	ldw	r7,8(sp)
 401b514:	10001d26 	beq	r2,zero,401b58c <__register_exitproc+0x110>
 401b518:	81000017 	ldw	r4,0(r16)
 401b51c:	10000115 	stw	zero,4(r2)
 401b520:	02000044 	movi	r8,1
 401b524:	22405217 	ldw	r9,328(r4)
 401b528:	0007883a 	mov	r3,zero
 401b52c:	12400015 	stw	r9,0(r2)
 401b530:	20805215 	stw	r2,328(r4)
 401b534:	10006215 	stw	zero,392(r2)
 401b538:	10006315 	stw	zero,396(r2)
 401b53c:	883fde26 	beq	r17,zero,401b4b8 <__alt_data_end+0xfc01b4b8>
 401b540:	18c9883a 	add	r4,r3,r3
 401b544:	2109883a 	add	r4,r4,r4
 401b548:	1109883a 	add	r4,r2,r4
 401b54c:	21802215 	stw	r6,136(r4)
 401b550:	01800044 	movi	r6,1
 401b554:	12406217 	ldw	r9,392(r2)
 401b558:	30cc983a 	sll	r6,r6,r3
 401b55c:	4992b03a 	or	r9,r9,r6
 401b560:	12406215 	stw	r9,392(r2)
 401b564:	21c04215 	stw	r7,264(r4)
 401b568:	01000084 	movi	r4,2
 401b56c:	893fd21e 	bne	r17,r4,401b4b8 <__alt_data_end+0xfc01b4b8>
 401b570:	11006317 	ldw	r4,396(r2)
 401b574:	218cb03a 	or	r6,r4,r6
 401b578:	11806315 	stw	r6,396(r2)
 401b57c:	003fce06 	br	401b4b8 <__alt_data_end+0xfc01b4b8>
 401b580:	18805304 	addi	r2,r3,332
 401b584:	18805215 	stw	r2,328(r3)
 401b588:	003fc606 	br	401b4a4 <__alt_data_end+0xfc01b4a4>
 401b58c:	00bfffc4 	movi	r2,-1
 401b590:	003fd006 	br	401b4d4 <__alt_data_end+0xfc01b4d4>

0401b594 <__call_exitprocs>:
 401b594:	defff504 	addi	sp,sp,-44
 401b598:	df000915 	stw	fp,36(sp)
 401b59c:	dd400615 	stw	r21,24(sp)
 401b5a0:	dc800315 	stw	r18,12(sp)
 401b5a4:	dfc00a15 	stw	ra,40(sp)
 401b5a8:	ddc00815 	stw	r23,32(sp)
 401b5ac:	dd800715 	stw	r22,28(sp)
 401b5b0:	dd000515 	stw	r20,20(sp)
 401b5b4:	dcc00415 	stw	r19,16(sp)
 401b5b8:	dc400215 	stw	r17,8(sp)
 401b5bc:	dc000115 	stw	r16,4(sp)
 401b5c0:	d9000015 	stw	r4,0(sp)
 401b5c4:	2839883a 	mov	fp,r5
 401b5c8:	04800044 	movi	r18,1
 401b5cc:	057fffc4 	movi	r21,-1
 401b5d0:	008100f4 	movhi	r2,1027
 401b5d4:	10a71804 	addi	r2,r2,-25504
 401b5d8:	12000017 	ldw	r8,0(r2)
 401b5dc:	45005217 	ldw	r20,328(r8)
 401b5e0:	44c05204 	addi	r19,r8,328
 401b5e4:	a0001c26 	beq	r20,zero,401b658 <__call_exitprocs+0xc4>
 401b5e8:	a0800117 	ldw	r2,4(r20)
 401b5ec:	15ffffc4 	addi	r23,r2,-1
 401b5f0:	b8000d16 	blt	r23,zero,401b628 <__call_exitprocs+0x94>
 401b5f4:	14000044 	addi	r16,r2,1
 401b5f8:	8421883a 	add	r16,r16,r16
 401b5fc:	8421883a 	add	r16,r16,r16
 401b600:	84402004 	addi	r17,r16,128
 401b604:	a463883a 	add	r17,r20,r17
 401b608:	a421883a 	add	r16,r20,r16
 401b60c:	e0001e26 	beq	fp,zero,401b688 <__call_exitprocs+0xf4>
 401b610:	80804017 	ldw	r2,256(r16)
 401b614:	e0801c26 	beq	fp,r2,401b688 <__call_exitprocs+0xf4>
 401b618:	bdffffc4 	addi	r23,r23,-1
 401b61c:	843fff04 	addi	r16,r16,-4
 401b620:	8c7fff04 	addi	r17,r17,-4
 401b624:	bd7ff91e 	bne	r23,r21,401b60c <__alt_data_end+0xfc01b60c>
 401b628:	00810074 	movhi	r2,1025
 401b62c:	10ade704 	addi	r2,r2,-18532
 401b630:	10000926 	beq	r2,zero,401b658 <__call_exitprocs+0xc4>
 401b634:	a0800117 	ldw	r2,4(r20)
 401b638:	1000301e 	bne	r2,zero,401b6fc <__call_exitprocs+0x168>
 401b63c:	a0800017 	ldw	r2,0(r20)
 401b640:	10003226 	beq	r2,zero,401b70c <__call_exitprocs+0x178>
 401b644:	a009883a 	mov	r4,r20
 401b648:	98800015 	stw	r2,0(r19)
 401b64c:	400b79c0 	call	400b79c <free>
 401b650:	9d000017 	ldw	r20,0(r19)
 401b654:	a03fe41e 	bne	r20,zero,401b5e8 <__alt_data_end+0xfc01b5e8>
 401b658:	dfc00a17 	ldw	ra,40(sp)
 401b65c:	df000917 	ldw	fp,36(sp)
 401b660:	ddc00817 	ldw	r23,32(sp)
 401b664:	dd800717 	ldw	r22,28(sp)
 401b668:	dd400617 	ldw	r21,24(sp)
 401b66c:	dd000517 	ldw	r20,20(sp)
 401b670:	dcc00417 	ldw	r19,16(sp)
 401b674:	dc800317 	ldw	r18,12(sp)
 401b678:	dc400217 	ldw	r17,8(sp)
 401b67c:	dc000117 	ldw	r16,4(sp)
 401b680:	dec00b04 	addi	sp,sp,44
 401b684:	f800283a 	ret
 401b688:	a0800117 	ldw	r2,4(r20)
 401b68c:	80c00017 	ldw	r3,0(r16)
 401b690:	10bfffc4 	addi	r2,r2,-1
 401b694:	15c01426 	beq	r2,r23,401b6e8 <__call_exitprocs+0x154>
 401b698:	80000015 	stw	zero,0(r16)
 401b69c:	183fde26 	beq	r3,zero,401b618 <__alt_data_end+0xfc01b618>
 401b6a0:	95c8983a 	sll	r4,r18,r23
 401b6a4:	a0806217 	ldw	r2,392(r20)
 401b6a8:	a5800117 	ldw	r22,4(r20)
 401b6ac:	2084703a 	and	r2,r4,r2
 401b6b0:	10000b26 	beq	r2,zero,401b6e0 <__call_exitprocs+0x14c>
 401b6b4:	a0806317 	ldw	r2,396(r20)
 401b6b8:	2088703a 	and	r4,r4,r2
 401b6bc:	20000c1e 	bne	r4,zero,401b6f0 <__call_exitprocs+0x15c>
 401b6c0:	89400017 	ldw	r5,0(r17)
 401b6c4:	d9000017 	ldw	r4,0(sp)
 401b6c8:	183ee83a 	callr	r3
 401b6cc:	a0800117 	ldw	r2,4(r20)
 401b6d0:	15bfbf1e 	bne	r2,r22,401b5d0 <__alt_data_end+0xfc01b5d0>
 401b6d4:	98800017 	ldw	r2,0(r19)
 401b6d8:	153fcf26 	beq	r2,r20,401b618 <__alt_data_end+0xfc01b618>
 401b6dc:	003fbc06 	br	401b5d0 <__alt_data_end+0xfc01b5d0>
 401b6e0:	183ee83a 	callr	r3
 401b6e4:	003ff906 	br	401b6cc <__alt_data_end+0xfc01b6cc>
 401b6e8:	a5c00115 	stw	r23,4(r20)
 401b6ec:	003feb06 	br	401b69c <__alt_data_end+0xfc01b69c>
 401b6f0:	89000017 	ldw	r4,0(r17)
 401b6f4:	183ee83a 	callr	r3
 401b6f8:	003ff406 	br	401b6cc <__alt_data_end+0xfc01b6cc>
 401b6fc:	a0800017 	ldw	r2,0(r20)
 401b700:	a027883a 	mov	r19,r20
 401b704:	1029883a 	mov	r20,r2
 401b708:	003fb606 	br	401b5e4 <__alt_data_end+0xfc01b5e4>
 401b70c:	0005883a 	mov	r2,zero
 401b710:	003ffb06 	br	401b700 <__alt_data_end+0xfc01b700>
 401b714:	0201ffff 	0x201ffff
 401b718:	ffff0000 	call	ffff000 <__alt_data_end+0x7fff000>
 401b71c:	00000201 	jmpi	20 <__alt_mem_sdram-0x3ffffe0>
 401b720:	0201ffff 	0x201ffff
 401b724:	ffff0000 	call	ffff000 <__alt_data_end+0x7fff000>
 401b728:	00000201 	jmpi	20 <__alt_mem_sdram-0x3ffffe0>
 401b72c:	010d0bff 	0x10d0bff
 401b730:	01010002 	0x1010002
	...
 401b73c:	010d0bff 	0x10d0bff
 401b740:	01010004 	movi	r4,1024
 401b744:	00000100 	call	10 <__alt_mem_sdram-0x3fffff0>
 401b748:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 401b74c:	01110bff 	0x1110bff
 401b750:	01010004 	movi	r4,1024
 401b754:	7f000105 	stb	fp,4(r15)
 401b758:	007d0000 	call	7d000 <__alt_mem_sdram-0x3f83000>
 401b75c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 401b760:	01883a00 	call	1883a0 <__alt_mem_sdram-0x3e77c60>
 401b764:	04002600 	call	400260 <__alt_mem_sdram-0x3bffda0>
 401b768:	04003160 	cmpeqi	r16,zero,197
 401b76c:	04003b9c 	xori	r16,zero,238
 401b770:	04004e98 	cmpnei	r16,zero,314
 401b774:	040058e0 	cmpeqi	r16,zero,355
 401b778:	0400616c 	andhi	r16,zero,389
 401b77c:	04007558 	cmpnei	r16,zero,469
 401b780:	04008074 	movhi	r16,513
 401b784:	04008a30 	cmpltui	r16,zero,552
 401b788:	040090c8 	cmpgei	r16,zero,579
 401b78c:	0400aee0 	cmpeqi	r16,zero,699
