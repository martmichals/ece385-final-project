//#include "pixel_vga.h"
#include <stdio.h>
#include <unistd.h>

#include "Discord/DiscordClient.h"
#include "pixel_vga.h"

#define SPI_0_BASE 0x080050A0
#include <altera_avalon_spi.h>

// Enter a MAC address for your controller below.
// Newer Ethernet shields have a MAC address printed on a sticker on the shield
unsigned char mac[] = { 0xA8, 0x61, 0x0A, 0xAE, 0x74, 0xA6 };

int main() {
		init_color_palette();
		draw_background();
		DiscordClient discordClient;
		while(1) {
			discordClient.fetchChannel("945536104629698631", 0);
		    // Usernames, messages
		    char unames[4][255] = {
		        "partymarty", "Captain_Sisko", "txwong2", "martinm6"
		    };
		     char messages[6][255] = {
		        "I hate hardware",
		        "I like coding in x86. I'm sadistic like that.",
		        "Why do so many people in this department just not shower?",
		        "Who cares about the weather being nice? I'm inside all day anyway.",
		        "Lol this is why I'm not an EE major.",
		        "CS professors don't have the ability to break your soul like ECE professors"
		    };
		    alt_u32 y = 453;
		    for(alt_u8 i=0; i<MAX_MESSAGE_LINES; ++i) {
		    	MessageLine* line = discordClient.getLine(i);
		        // Draw the uname
		        draw_string(
		            MESSAGE_X_MARGIN,
		            y + UNAME_Y_MARGIN,
		            unames[i%4],
		            &fonts[UNAME_FONT]
		        );
		        y -= fonts[UNAME_FONT].height + 2*UNAME_Y_MARGIN;

		        // Draw the message
		        draw_string(
		            MESSAGE_X_MARGIN,
		            y + MESSAGE_Y_MARGIN,
		            messages[i],
		            &fonts[MESSAGE_FONT]
		        );
		        y -= fonts[MESSAGE_FONT].height + 2*MESSAGE_Y_MARGIN;
		    }
			usleep(1000000);
		}

}




//int main() {
//	init_color_palette();
//	draw_background();
//	draw_sample();
//	return 1;
//}
